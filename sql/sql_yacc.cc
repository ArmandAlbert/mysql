
/* A Bison parser, made by GNU Bison 2.4.1.  */

/* Skeleton implementation for Bison's Yacc-like parsers in C
   
      Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003, 2004, 2005, 2006
   Free Software Foundation, Inc.
   
   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.
   
   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "2.4.1"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1

/* Using locations.  */
#define YYLSP_NEEDED 0

/* Substitute the variable and function names.  */
#define yyparse         MYSQLparse
#define yylex           MYSQLlex
#define yyerror         MYSQLerror
#define yylval          MYSQLlval
#define yychar          MYSQLchar
#define yydebug         MYSQLdebug
#define yynerrs         MYSQLnerrs


/* Copy the first part of user declarations.  */

/* Line 189 of yacc.c  */
#line 25 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"

/* thd is passed as an argument to yyparse(), and subsequently to yylex().
** The type will be void*, so it must be  cast to (THD*) when used.
** Use the YYTHD macro for this.
*/
#define YYPARSE_PARAM yythd
#define YYLEX_PARAM yythd
#define YYTHD ((THD *)yythd)
#define YYLIP (& YYTHD->m_parser_state->m_lip)
#define YYPS (& YYTHD->m_parser_state->m_yacc)

#define MYSQL_YACC
#define YYINITDEPTH 100
#define YYMAXDEPTH 3200                        /* Because of 64K stack */
#define Lex (YYTHD->lex)

#define Select Lex->current_select
#include "sql_priv.h"
#include "unireg.h"                    // REQUIRED: for other includes
#include "sql_parse.h"                        /* comp_*_creator */
#include "sql_table.h"                        /* primary_key_name */
#include "sql_partition.h"  /* mem_alloc_error, partition_info, HASH_PARTITION */
#include "sql_acl.h"                          /* *_ACL */
#include "password.h"       /* my_make_scrambled_password_323, my_make_scrambled_password */
#include "sql_class.h"      /* Key_part_spec, enum_filetype, Diag_condition_item_name */
#include "slave.h"
#include "lex_symbol.h"
#include "item_create.h"
#include "sp_head.h"
#include "sp_pcontext.h"
#include "sp_rcontext.h"
#include "sp.h"
#include "sql_alter.h"                         // Alter_table*_statement
#include "sql_truncate.h"                      // Truncate_statement
#include "sql_admin.h"                         // Analyze/Check..._table_stmt
#include "sql_partition_admin.h"               // Alter_table_*_partition_stmt
#include "sql_signal.h"
#include "event_parse_data.h"
#include "create_options.h"
#include <myisam.h>
#include <myisammrg.h>
#include "keycaches.h"
#include "set_var.h"
#include "rpl_mi.h"

/* this is to get the bison compilation windows warnings out */
#ifdef _MSC_VER
/* warning C4065: switch statement contains 'default' but no 'case' labels */
#pragma warning (disable : 4065)
#endif

int yylex(void *yylval, void *yythd);

#define yyoverflow(A,B,C,D,E,F)               \
  {                                           \
    ulong val= *(F);                          \
    if (my_yyoverflow((B), (D), &val))        \
    {                                         \
      yyerror((char*) (A));                   \
      return 2;                               \
    }                                         \
    else                                      \
    {                                         \
      *(F)= (YYSIZE_T)val;                    \
    }                                         \
  }

#define MYSQL_YYABORT                         \
  do                                          \
  {                                           \
    LEX::cleanup_lex_after_parse_error(YYTHD);\
    YYABORT;                                  \
  } while (0)

#define MYSQL_YYABORT_UNLESS(A)         \
  if (!(A))                             \
  {                                     \
    my_parse_error(ER(ER_SYNTAX_ERROR));\
    MYSQL_YYABORT;                      \
  }

/*
  Work around for broken code generated by bison 1.875.

  The code generated by bison 1.875a and later, bison 2.1 and bison 2.2 is ok.
  With bison 1.875 however, the generated code contains:
<pre>
  yyerrlab1:
  #if defined (__GNUC_MINOR__) && 2093 <= (__GNUC__ * 1000 + __GNUC_MINOR__)
    __attribute__ ((__unused__))
  #endif
</pre>
  This usage of __attribute__ is illegal, so we remove it.
  See the following references for details:
  http://lists.gnu.org/archive/html/bug-bison/2004-02/msg00014.html
  http://gcc.gnu.org/bugzilla/show_bug.cgi?id=14273
*/

#if defined (__GNUC_MINOR__) && 2093 <= (__GNUC__ * 1000 + __GNUC_MINOR__)
#undef __attribute__
#define __attribute__(X)
#endif


#ifndef DBUG_OFF
#define YYDEBUG 1
#else
#define YYDEBUG 0
#endif

/**
  @brief Push an error message into MySQL error stack with line
  and position information.

  This function provides semantic action implementers with a way
  to push the famous "You have a syntax error near..." error
  message into the error stack, which is normally produced only if
  a parse error is discovered internally by the Bison generated
  parser.
*/

void my_parse_error(const char *s)
{
  THD *thd= current_thd;
  Lex_input_stream *lip= & thd->m_parser_state->m_lip;

  const char *yytext= lip->get_tok_start();
  if (!yytext)
    yytext= "";

  /* Push an error into the error stack */
  ErrConvString err(yytext, strlen(yytext), thd->variables.character_set_client);
  my_printf_error(ER_PARSE_ERROR,  ER(ER_PARSE_ERROR), MYF(0), s,
                  err.ptr(), lip->yylineno);
}

/**
  @brief Bison callback to report a syntax/OOM error

  This function is invoked by the bison-generated parser
  when a syntax error, a parse error or an out-of-memory
  condition occurs. This function is not invoked when the
  parser is requested to abort by semantic action code
  by means of YYABORT or YYACCEPT macros. This is why these
  macros should not be used (use MYSQL_YYABORT/MYSQL_YYACCEPT
  instead).

  The parser will abort immediately after invoking this callback.

  This function is not for use in semantic actions and is internal to
  the parser, as it performs some pre-return cleanup. 
  In semantic actions, please use my_parse_error or my_error to
  push an error into the error stack and MYSQL_YYABORT
  to abort from the parser.
*/

void MYSQLerror(const char *s)
{
  THD *thd= current_thd;

  /*
    Restore the original LEX if it was replaced when parsing
    a stored procedure. We must ensure that a parsing error
    does not leave any side effects in the THD.
  */
  LEX::cleanup_lex_after_parse_error(thd);

  /* "parse error" changed into "syntax error" between bison 1.75 and 1.875 */
  if (strcmp(s,"parse error") == 0 || strcmp(s,"syntax error") == 0)
    s= ER(ER_SYNTAX_ERROR);
  my_parse_error(s);
}


#ifndef DBUG_OFF
void turn_parser_debug_on()
{
  /*
     MYSQLdebug is in sql/sql_yacc.cc, in bison generated code.
     Turning this option on is **VERY** verbose, and should be
     used when investigating a syntax error problem only.

     The syntax to run with bison traces is as follows :
     - Starting a server manually :
       mysqld --debug-dbug="d,parser_debug" ...
     - Running a test :
       mysql-test-run.pl --mysqld="--debug-dbug=d,parser_debug" ...

     The result will be in the process stderr (var/log/master.err)
   */

  extern int yydebug;
  yydebug= 1;
}
#endif

static bool is_native_function(THD *thd, const LEX_STRING *name)
{
  if (find_native_function_builder(thd, *name))
    return true;

  if (is_lex_native_function(name))
    return true;

  return false;
}


/**
  Helper action for a case statement (entering the CASE).
  This helper is used for both 'simple' and 'searched' cases.
  This helper, with the other case_stmt_action_..., is executed when
  the following SQL code is parsed:
<pre>
CREATE PROCEDURE proc_19194_simple(i int)
BEGIN
  DECLARE str CHAR(10);

  CASE i
    WHEN 1 THEN SET str="1";
    WHEN 2 THEN SET str="2";
    WHEN 3 THEN SET str="3";
    ELSE SET str="unknown";
  END CASE;

  SELECT str;
END
</pre>
  The actions are used to generate the following code:
<pre>
SHOW PROCEDURE CODE proc_19194_simple;
Pos     Instruction
0       set str@1 NULL
1       set_case_expr (12) 0 i@0
2       jump_if_not 5(12) (case_expr@0 = 1)
3       set str@1 _latin1'1'
4       jump 12
5       jump_if_not 8(12) (case_expr@0 = 2)
6       set str@1 _latin1'2'
7       jump 12
8       jump_if_not 11(12) (case_expr@0 = 3)
9       set str@1 _latin1'3'
10      jump 12
11      set str@1 _latin1'unknown'
12      stmt 0 "SELECT str"
</pre>

  @param lex the parser lex context
*/

void case_stmt_action_case(LEX *lex)
{
  lex->sphead->new_cont_backpatch(NULL);

  /*
    BACKPATCH: Creating target label for the jump to
    "case_stmt_action_end_case"
    (Instruction 12 in the example)
  */

  lex->spcont->push_label((char *)"", lex->sphead->instructions());
}

/**
  Helper action for a case expression statement (the expr in 'CASE expr').
  This helper is used for 'searched' cases only.
  @param lex the parser lex context
  @param expr the parsed expression
  @return 0 on success
*/

int case_stmt_action_expr(LEX *lex, Item* expr)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *parsing_ctx= lex->spcont;
  int case_expr_id= parsing_ctx->register_case_expr();
  sp_instr_set_case_expr *i;

  if (parsing_ctx->push_case_expr_id(case_expr_id))
    return 1;

  i= new sp_instr_set_case_expr(sp->instructions(),
                                parsing_ctx, case_expr_id, expr, lex);

  sp->add_cont_backpatch(i);
  return sp->add_instr(i);
}

/**
  Helper action for a case when condition.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
  @param when the parsed expression for the WHEN clause
  @param simple true for simple cases, false for searched cases
*/

int case_stmt_action_when(LEX *lex, Item *when, bool simple)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *ctx= lex->spcont;
  uint ip= sp->instructions();
  sp_instr_jump_if_not *i;
  Item_case_expr *var;
  Item *expr;

  if (simple)
  {
    var= new Item_case_expr(ctx->get_current_case_expr_id());

#ifndef DBUG_OFF
    if (var)
    {
      var->m_sp= sp;
    }
#endif

    expr= new Item_func_eq(var, when);
    i= new sp_instr_jump_if_not(ip, ctx, expr, lex);
  }
  else
    i= new sp_instr_jump_if_not(ip, ctx, when, lex);

  /*
    BACKPATCH: Registering forward jump from
    "case_stmt_action_when" to "case_stmt_action_then"
    (jump_if_not from instruction 2 to 5, 5 to 8 ... in the example)
  */

  return !test(i) ||
         sp->push_backpatch(i, ctx->push_label((char *)"", 0)) ||
         sp->add_cont_backpatch(i) ||
         sp->add_instr(i);
}

/**
  Helper action for a case then statements.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
*/

int case_stmt_action_then(LEX *lex)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *ctx= lex->spcont;
  uint ip= sp->instructions();
  sp_instr_jump *i = new sp_instr_jump(ip, ctx);
  if (!test(i) || sp->add_instr(i))
    return 1;

  /*
    BACKPATCH: Resolving forward jump from
    "case_stmt_action_when" to "case_stmt_action_then"
    (jump_if_not from instruction 2 to 5, 5 to 8 ... in the example)
  */

  sp->backpatch(ctx->pop_label());

  /*
    BACKPATCH: Registering forward jump from
    "case_stmt_action_then" to "case_stmt_action_end_case"
    (jump from instruction 4 to 12, 7 to 12 ... in the example)
  */

  return sp->push_backpatch(i, ctx->last_label());
}

/**
  Helper action for an end case.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
  @param simple true for simple cases, false for searched cases
*/

void case_stmt_action_end_case(LEX *lex, bool simple)
{
  /*
    BACKPATCH: Resolving forward jump from
    "case_stmt_action_then" to "case_stmt_action_end_case"
    (jump from instruction 4 to 12, 7 to 12 ... in the example)
  */
  lex->sphead->backpatch(lex->spcont->pop_label());

  if (simple)
    lex->spcont->pop_case_expr_id();

  lex->sphead->do_cont_backpatch();
}


static bool
find_sys_var_null_base(THD *thd, struct sys_var_with_base *tmp)
{
  tmp->var= find_sys_var(thd, tmp->base_name.str, tmp->base_name.length);

  if (tmp->var == NULL)
    my_error(ER_UNKNOWN_SYSTEM_VARIABLE, MYF(0), tmp->base_name.str);
  else
    tmp->base_name= null_lex_str;

  return thd->is_error();
}


/**
  Helper action for a SET statement.
  Used to push a system variable into the assignment list.

  @param thd      the current thread
  @param tmp      the system variable with base name
  @param var_type the scope of the variable
  @param val      the value being assigned to the variable

  @return TRUE if error, FALSE otherwise.
*/

static bool
set_system_variable(THD *thd, struct sys_var_with_base *tmp,
                    enum enum_var_type var_type, Item *val)
{
  set_var *var;
  LEX *lex= thd->lex;

  /* No AUTOCOMMIT from a stored function or trigger. */
  if (lex->spcont && tmp->var == Sys_autocommit_ptr)
    lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;

  if (! (var= new set_var(var_type, tmp->var, &tmp->base_name, val)))
    return TRUE;

  return lex->var_list.push_back(var);
}


/**
  Helper action for a SET statement.
  Used to push a SP local variable into the assignment list.

  @param thd      the current thread
  @param var_type the SP local variable
  @param val      the value being assigned to the variable

  @return TRUE if error, FALSE otherwise.
*/

static bool
set_local_variable(THD *thd, sp_variable_t *spv, Item *val)
{
  Item *it;
  LEX *lex= thd->lex;
  sp_instr_set *sp_set;

  if (val)
    it= val;
  else if (spv->dflt)
    it= spv->dflt;
  else
  {
    it= new (thd->mem_root) Item_null();
    if (it == NULL)
      return TRUE;
  }

  sp_set= new sp_instr_set(lex->sphead->instructions(), lex->spcont,
                           spv->offset, it, spv->type, lex, TRUE);

  return (sp_set == NULL || lex->sphead->add_instr(sp_set));
}


/**
  Helper action for a SET statement.
  Used to SET a field of NEW row.

  @param thd      the current thread
  @param name     the field name
  @param val      the value being assigned to the row

  @return TRUE if error, FALSE otherwise.
*/

static bool
set_trigger_new_row(THD *thd, LEX_STRING *name, Item *val)
{
  LEX *lex= thd->lex;
  Item_trigger_field *trg_fld;
  sp_instr_set_trigger_field *sp_fld;

  /* QQ: Shouldn't this be field's default value ? */
  if (! val)
    val= new Item_null();

  DBUG_ASSERT(lex->trg_chistics.action_time == TRG_ACTION_BEFORE &&
              (lex->trg_chistics.event == TRG_EVENT_INSERT ||
               lex->trg_chistics.event == TRG_EVENT_UPDATE));

  trg_fld= new (thd->mem_root)
            Item_trigger_field(lex->current_context(),
                               Item_trigger_field::NEW_ROW,
                               name->str, UPDATE_ACL, FALSE);

  if (trg_fld == NULL)
    return TRUE;

  sp_fld= new sp_instr_set_trigger_field(lex->sphead->instructions(),
                                         lex->spcont, trg_fld, val, lex);

  if (sp_fld == NULL)
    return TRUE;

  /*
    Let us add this item to list of all Item_trigger_field
    objects in trigger.
  */
  lex->trg_table_fields.link_in_list(trg_fld, &trg_fld->next_trg_field);

  return lex->sphead->add_instr(sp_fld);
}


/**
  Helper to resolve the SQL:2003 Syntax exception 1) in <in predicate>.
  See SQL:2003, Part 2, section 8.4 <in predicate>, Note 184, page 383.
  This function returns the proper item for the SQL expression
  <code>left [NOT] IN ( expr )</code>
  @param thd the current thread
  @param left the in predicand
  @param equal true for IN predicates, false for NOT IN predicates
  @param expr first and only expression of the in value list
  @return an expression representing the IN predicate.
*/
Item* handle_sql2003_note184_exception(THD *thd, Item* left, bool equal,
                                       Item *expr)
{
  /*
    Relevant references for this issue:
    - SQL:2003, Part 2, section 8.4 <in predicate>, page 383,
    - SQL:2003, Part 2, section 7.2 <row value expression>, page 296,
    - SQL:2003, Part 2, section 6.3 <value expression primary>, page 174,
    - SQL:2003, Part 2, section 7.15 <subquery>, page 370,
    - SQL:2003 Feature F561, "Full value expressions".

    The exception in SQL:2003 Note 184 means:
    Item_singlerow_subselect, which corresponds to a <scalar subquery>,
    should be re-interpreted as an Item_in_subselect, which corresponds
    to a <table subquery> when used inside an <in predicate>.

    Our reading of Note 184 is reccursive, so that all:
    - IN (( <subquery> ))
    - IN ((( <subquery> )))
    - IN '('^N <subquery> ')'^N
    - etc
    should be interpreted as a <table subquery>, no matter how deep in the
    expression the <subquery> is.
  */

  Item *result;

  DBUG_ENTER("handle_sql2003_note184_exception");

  if (expr->type() == Item::SUBSELECT_ITEM)
  {
    Item_subselect *expr2 = (Item_subselect*) expr;

    if (expr2->substype() == Item_subselect::SINGLEROW_SUBS)
    {
      Item_singlerow_subselect *expr3 = (Item_singlerow_subselect*) expr2;
      st_select_lex *subselect;

      /*
        Implement the mandated change, by altering the semantic tree:
          left IN Item_singlerow_subselect(subselect)
        is modified to
          left IN (subselect)
        which is represented as
          Item_in_subselect(left, subselect)
      */
      subselect= expr3->invalidate_and_restore_select_lex();
      result= new (thd->mem_root) Item_in_subselect(left, subselect);

      if (! equal)
        result = negate_expression(thd, result);

      DBUG_RETURN(result);
    }
  }

  if (equal)
    result= new (thd->mem_root) Item_func_eq(left, expr);
  else
    result= new (thd->mem_root) Item_func_ne(left, expr);

  DBUG_RETURN(result);
}

/**
   @brief Creates a new SELECT_LEX for a UNION branch.

   Sets up and initializes a SELECT_LEX structure for a query once the parser
   discovers a UNION token. The current SELECT_LEX is pushed on the stack and
   the new SELECT_LEX becomes the current one.

   @param lex The parser state.

   @param is_union_distinct True if the union preceding the new select statement
   uses UNION DISTINCT.

   @param is_top_level This should be @c TRUE if the newly created SELECT_LEX
   is a non-nested statement.

   @return <code>false</code> if successful, <code>true</code> if an error was
   reported. In the latter case parsing should stop.
 */
bool add_select_to_union_list(LEX *lex, bool is_union_distinct, 
                              bool is_top_level)
{
  /* 
     Only the last SELECT can have INTO. Since the grammar won't allow INTO in
     a nested SELECT, we make this check only when creating a top-level SELECT.
  */
  if (is_top_level && lex->result)
  {
    my_error(ER_WRONG_USAGE, MYF(0), "UNION", "INTO");
    return TRUE;
  }
  if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
  {
    my_parse_error(ER(ER_SYNTAX_ERROR));
    return TRUE;
  }
  /* This counter shouldn't be incremented for UNION parts */
  lex->nest_level--;
  if (mysql_new_select(lex, 0))
    return TRUE;
  mysql_init_select(lex);
  lex->current_select->linkage=UNION_TYPE;
  if (is_union_distinct) /* UNION DISTINCT - remember position */
    lex->current_select->master_unit()->union_distinct=
      lex->current_select;
  return FALSE;
}

/**
   @brief Initializes a SELECT_LEX for a query within parentheses (aka
   braces).

   @return false if successful, true if an error was reported. In the latter
   case parsing should stop.
 */
bool setup_select_in_parentheses(LEX *lex) 
{
  SELECT_LEX * sel= lex->current_select;
  if (sel->set_braces(1))
  {
    my_parse_error(ER(ER_SYNTAX_ERROR));
    return TRUE;
  }
  if (sel->linkage == UNION_TYPE &&
      !sel->master_unit()->first_select()->braces &&
      sel->master_unit()->first_select()->linkage ==
      UNION_TYPE)
  {
    my_parse_error(ER(ER_SYNTAX_ERROR));
    return TRUE;
  }
  if (sel->linkage == UNION_TYPE &&
      sel->olap != UNSPECIFIED_OLAP_TYPE &&
      sel->master_unit()->fake_select_lex)
  {
    my_error(ER_WRONG_USAGE, MYF(0), "CUBE/ROLLUP", "ORDER BY");
    return TRUE;
  }
  /* select in braces, can't contain global parameters */
  if (sel->master_unit()->fake_select_lex)
    sel->master_unit()->global_parameters=
      sel->master_unit()->fake_select_lex;
  return FALSE;
}

static bool add_create_index_prepare (LEX *lex, Table_ident *table)
{
  lex->sql_command= SQLCOM_CREATE_INDEX;
  if (!lex->current_select->add_table_to_list(lex->thd, table, NULL,
                                              TL_OPTION_UPDATING,
                                              TL_READ_NO_INSERT,
                                              MDL_SHARED_NO_WRITE))
    return TRUE;
  lex->alter_info.reset();
  lex->alter_info.flags= ALTER_ADD_INDEX;
  lex->col_list.empty();
  lex->change= NullS;
  lex->option_list= NULL;
  return FALSE;
}

static bool add_create_index (LEX *lex, Key::Keytype type,
                              const LEX_STRING &name,
                              KEY_CREATE_INFO *info= NULL, bool generated= 0)
{
  Key *key;
  key= new Key(type, name, info ? info : &lex->key_create_info, generated, 
               lex->col_list, lex->option_list, lex->check_exists);
  if (key == NULL)
    return TRUE;

  lex->alter_info.key_list.push_back(key);
  lex->col_list.empty();
  return FALSE;
}


/**
  Create a separate LEX for each assignment if in SP.

  If we are in SP we want have own LEX for each assignment.
  This is mostly because it is hard for several sp_instr_set
  and sp_instr_set_trigger instructions share one LEX.
  (Well, it is theoretically possible but adds some extra
  overhead on preparation for execution stage and IMO less
  robust).

  QQ: May be we should simply prohibit group assignments in SP?

  @see sp_create_assignment_instr

  @param thd           Thread context
  @param no_lookahead  True if the parser has no lookahead
*/

static void sp_create_assignment_lex(THD *thd, bool no_lookahead)
{
  LEX *lex= thd->lex;

  if (lex->sphead)
  {
    Lex_input_stream *lip= &thd->m_parser_state->m_lip;
    LEX *old_lex= lex;
    lex->sphead->reset_lex(thd);
    lex= thd->lex;

    /* Set new LEX as if we at start of set rule. */
    lex->sql_command= SQLCOM_SET_OPTION;
    mysql_init_select(lex);
    lex->var_list.empty();
    lex->one_shot_set= 0;
    lex->autocommit= 0;
    /* get_ptr() is only correct with no lookahead. */
    DBUG_ASSERT(no_lookahead);
    lex->sphead->m_tmp_query= lip->get_ptr();
    /* Inherit from outer lex. */
    lex->option_type= old_lex->option_type;
  }
}


/**
  Create a SP instruction for a SET assignment.

  @see sp_create_assignment_lex

  @param thd           Thread context
  @param no_lookahead  True if the parser has no lookahead

  @return false if success, true otherwise.
*/

static bool sp_create_assignment_instr(THD *thd, bool no_lookahead)
{
  LEX *lex= thd->lex;

  if (lex->sphead)
  {
    sp_head *sp= lex->sphead;

    if (!lex->var_list.is_empty())
    {
      /*
        We have assignment to user or system variable or
        option setting, so we should construct sp_instr_stmt
        for it.
      */
      LEX_STRING qbuff;
      sp_instr_stmt *i;
      Lex_input_stream *lip= &thd->m_parser_state->m_lip;

      if (!(i= new sp_instr_stmt(sp->instructions(), lex->spcont,
                                 lex)))
        return true;

      /*
        Extract the query statement from the tokenizer.  The
        end is either lip->ptr, if there was no lookahead,
        lip->tok_end otherwise.
      */
      if (no_lookahead)
        qbuff.length= lip->get_ptr() - sp->m_tmp_query;
      else
        qbuff.length= lip->get_tok_end() - sp->m_tmp_query;

      if (!(qbuff.str= (char*) alloc_root(thd->mem_root,
                                          qbuff.length + 5)))
        return true;

      strmake(strmake(qbuff.str, "SET ", 4), sp->m_tmp_query,
              qbuff.length);
      qbuff.length+= 4;
      i->m_query= qbuff;
      if (sp->add_instr(i))
        return true;
    }
    enum_var_type inner_option_type= lex->option_type;
    if (lex->sphead->restore_lex(thd))
      return true;
    /* Copy option_type to outer lex in case it has changed. */
    thd->lex->option_type= inner_option_type;
  }
  return false;
}




/* Line 189 of yacc.c  */
#line 903 "/home/buildbot/buildbot/build/mkdist/sql/sql_yacc.cc"

/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* Enabling the token table.  */
#ifndef YYTOKEN_TABLE
# define YYTOKEN_TABLE 0
#endif


/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     ABORT_SYM = 258,
     ACCESSIBLE_SYM = 259,
     ACTION = 260,
     ADD = 261,
     ADDDATE_SYM = 262,
     AFTER_SYM = 263,
     AGAINST = 264,
     AGGREGATE_SYM = 265,
     ALGORITHM_SYM = 266,
     ALL = 267,
     ALTER = 268,
     ALWAYS_SYM = 269,
     ANALYZE_SYM = 270,
     AND_AND_SYM = 271,
     AND_SYM = 272,
     ANY_SYM = 273,
     AS = 274,
     ASC = 275,
     ASCII_SYM = 276,
     ASENSITIVE_SYM = 277,
     AT_SYM = 278,
     AUTHORS_SYM = 279,
     AUTOEXTEND_SIZE_SYM = 280,
     AUTO_INC = 281,
     AUTO_SYM = 282,
     AVG_ROW_LENGTH = 283,
     AVG_SYM = 284,
     BACKUP_SYM = 285,
     BEFORE_SYM = 286,
     BEGIN_SYM = 287,
     BETWEEN_SYM = 288,
     BIGINT = 289,
     BINARY = 290,
     BINLOG_SYM = 291,
     BIN_NUM = 292,
     BIT_AND = 293,
     BIT_OR = 294,
     BIT_SYM = 295,
     BIT_XOR = 296,
     BLOB_SYM = 297,
     BLOCK_SYM = 298,
     BOOLEAN_SYM = 299,
     BOOL_SYM = 300,
     BOTH = 301,
     BTREE_SYM = 302,
     BY = 303,
     BYTE_SYM = 304,
     CACHE_SYM = 305,
     CALL_SYM = 306,
     CASCADE = 307,
     CASCADED = 308,
     CASE_SYM = 309,
     CAST_SYM = 310,
     CATALOG_NAME_SYM = 311,
     CHAIN_SYM = 312,
     CHANGE = 313,
     CHANGED = 314,
     CHARSET = 315,
     CHAR_SYM = 316,
     CHECKPOINT_SYM = 317,
     CHECKSUM_SYM = 318,
     CHECK_SYM = 319,
     CIPHER_SYM = 320,
     CLASS_ORIGIN_SYM = 321,
     CLIENT_SYM = 322,
     CLIENT_STATS_SYM = 323,
     CLOSE_SYM = 324,
     COALESCE = 325,
     CODE_SYM = 326,
     COLLATE_SYM = 327,
     COLLATION_SYM = 328,
     COLUMNS = 329,
     COLUMN_ADD_SYM = 330,
     COLUMN_CHECK_SYM = 331,
     COLUMN_CREATE_SYM = 332,
     COLUMN_DELETE_SYM = 333,
     COLUMN_GET_SYM = 334,
     COLUMN_SYM = 335,
     COLUMN_NAME_SYM = 336,
     COMMENT_SYM = 337,
     COMMITTED_SYM = 338,
     COMMIT_SYM = 339,
     COMPACT_SYM = 340,
     COMPLETION_SYM = 341,
     COMPRESSED_SYM = 342,
     CONCURRENT = 343,
     CONDITION_SYM = 344,
     CONNECTION_SYM = 345,
     CONSISTENT_SYM = 346,
     CONSTRAINT = 347,
     CONSTRAINT_CATALOG_SYM = 348,
     CONSTRAINT_NAME_SYM = 349,
     CONSTRAINT_SCHEMA_SYM = 350,
     CONTAINS_SYM = 351,
     CONTEXT_SYM = 352,
     CONTINUE_SYM = 353,
     CONTRIBUTORS_SYM = 354,
     CONVERT_SYM = 355,
     COUNT_SYM = 356,
     CPU_SYM = 357,
     CREATE = 358,
     CROSS = 359,
     CUBE_SYM = 360,
     CURDATE = 361,
     CURRENT_USER = 362,
     CURRENT_POS_SYM = 363,
     CURSOR_SYM = 364,
     CURSOR_NAME_SYM = 365,
     CURTIME = 366,
     DATABASE = 367,
     DATABASES = 368,
     DATAFILE_SYM = 369,
     DATA_SYM = 370,
     DATETIME = 371,
     DATE_ADD_INTERVAL = 372,
     DATE_SUB_INTERVAL = 373,
     DATE_SYM = 374,
     DAY_HOUR_SYM = 375,
     DAY_MICROSECOND_SYM = 376,
     DAY_MINUTE_SYM = 377,
     DAY_SECOND_SYM = 378,
     DAY_SYM = 379,
     DEALLOCATE_SYM = 380,
     DECIMAL_NUM = 381,
     DECIMAL_SYM = 382,
     DECLARE_SYM = 383,
     DEFAULT = 384,
     DEFINER_SYM = 385,
     DELAYED_SYM = 386,
     DELAY_KEY_WRITE_SYM = 387,
     DELETE_SYM = 388,
     DESC = 389,
     DESCRIBE = 390,
     DES_KEY_FILE = 391,
     DETERMINISTIC_SYM = 392,
     DIRECTORY_SYM = 393,
     DISABLE_SYM = 394,
     DISCARD = 395,
     DISK_SYM = 396,
     DISTINCT = 397,
     DIV_SYM = 398,
     DOUBLE_SYM = 399,
     DO_SYM = 400,
     DROP = 401,
     DUAL_SYM = 402,
     DUMPFILE = 403,
     DUPLICATE_SYM = 404,
     DYNAMIC_SYM = 405,
     EACH_SYM = 406,
     ELSE = 407,
     ELSEIF_SYM = 408,
     ENABLE_SYM = 409,
     ENCLOSED = 410,
     END = 411,
     ENDS_SYM = 412,
     END_OF_INPUT = 413,
     ENGINES_SYM = 414,
     ENGINE_SYM = 415,
     ENUM = 416,
     EQ = 417,
     EQUAL_SYM = 418,
     ERROR_SYM = 419,
     ERRORS = 420,
     ESCAPED = 421,
     ESCAPE_SYM = 422,
     EVENTS_SYM = 423,
     EVENT_SYM = 424,
     EVERY_SYM = 425,
     EXAMINED_SYM = 426,
     EXECUTE_SYM = 427,
     EXISTS = 428,
     EXIT_SYM = 429,
     EXPANSION_SYM = 430,
     EXTENDED_SYM = 431,
     EXTENT_SIZE_SYM = 432,
     EXTRACT_SYM = 433,
     FALSE_SYM = 434,
     FAST_SYM = 435,
     FAULTS_SYM = 436,
     FETCH_SYM = 437,
     FILE_SYM = 438,
     FIRST_SYM = 439,
     FIXED_SYM = 440,
     FLOAT_NUM = 441,
     FLOAT_SYM = 442,
     FLUSH_SYM = 443,
     FORCE_SYM = 444,
     FOREIGN = 445,
     FOR_SYM = 446,
     FOUND_SYM = 447,
     FROM = 448,
     FULL = 449,
     FULLTEXT_SYM = 450,
     FUNCTION_SYM = 451,
     GE = 452,
     GENERAL = 453,
     GENERATED_SYM = 454,
     GEOMETRYCOLLECTION = 455,
     GEOMETRY_SYM = 456,
     GET_FORMAT = 457,
     GLOBAL_SYM = 458,
     GRANT = 459,
     GRANTS = 460,
     GROUP_SYM = 461,
     GROUP_CONCAT_SYM = 462,
     GT_SYM = 463,
     HANDLER_SYM = 464,
     HARD_SYM = 465,
     HASH_SYM = 466,
     HAVING = 467,
     HELP_SYM = 468,
     HEX_NUM = 469,
     HEX_STRING = 470,
     HIGH_PRIORITY = 471,
     HOST_SYM = 472,
     HOSTS_SYM = 473,
     HOUR_MICROSECOND_SYM = 474,
     HOUR_MINUTE_SYM = 475,
     HOUR_SECOND_SYM = 476,
     HOUR_SYM = 477,
     IDENT = 478,
     IDENTIFIED_SYM = 479,
     IDENT_QUOTED = 480,
     IF = 481,
     IGNORE_SYM = 482,
     IGNORE_SERVER_IDS_SYM = 483,
     IMPORT = 484,
     INDEXES = 485,
     INDEX_SYM = 486,
     INDEX_STATS_SYM = 487,
     INFILE = 488,
     INITIAL_SIZE_SYM = 489,
     INNER_SYM = 490,
     INOUT_SYM = 491,
     INSENSITIVE_SYM = 492,
     INSERT = 493,
     INSERT_METHOD = 494,
     INSTALL_SYM = 495,
     INTERVAL_SYM = 496,
     INTO = 497,
     INT_SYM = 498,
     INVOKER_SYM = 499,
     IN_SYM = 500,
     IO_SYM = 501,
     IPC_SYM = 502,
     IS = 503,
     ISOLATION = 504,
     ISSUER_SYM = 505,
     ITERATE_SYM = 506,
     JOIN_SYM = 507,
     KEYS = 508,
     KEY_BLOCK_SIZE = 509,
     KEY_SYM = 510,
     KILL_SYM = 511,
     LANGUAGE_SYM = 512,
     LAST_SYM = 513,
     LAST_VALUE = 514,
     LE = 515,
     LEADING = 516,
     LEAVES = 517,
     LEAVE_SYM = 518,
     LEFT = 519,
     LESS_SYM = 520,
     LEVEL_SYM = 521,
     LEX_HOSTNAME = 522,
     LIKE = 523,
     LIMIT = 524,
     LINEAR_SYM = 525,
     LINES = 526,
     LINESTRING = 527,
     LIST_SYM = 528,
     LOAD = 529,
     LOCAL_SYM = 530,
     LOCATOR_SYM = 531,
     LOCKS_SYM = 532,
     LOCK_SYM = 533,
     LOGFILE_SYM = 534,
     LOGS_SYM = 535,
     LONGBLOB = 536,
     LONGTEXT = 537,
     LONG_NUM = 538,
     LONG_SYM = 539,
     LOOP_SYM = 540,
     LOW_PRIORITY = 541,
     LT = 542,
     MASTER_CONNECT_RETRY_SYM = 543,
     MASTER_GTID_POS_SYM = 544,
     MASTER_HOST_SYM = 545,
     MASTER_LOG_FILE_SYM = 546,
     MASTER_LOG_POS_SYM = 547,
     MASTER_PASSWORD_SYM = 548,
     MASTER_PORT_SYM = 549,
     MASTER_SERVER_ID_SYM = 550,
     MASTER_SSL_CAPATH_SYM = 551,
     MASTER_SSL_CA_SYM = 552,
     MASTER_SSL_CERT_SYM = 553,
     MASTER_SSL_CIPHER_SYM = 554,
     MASTER_SSL_CRL_SYM = 555,
     MASTER_SSL_CRLPATH_SYM = 556,
     MASTER_SSL_KEY_SYM = 557,
     MASTER_SSL_SYM = 558,
     MASTER_SSL_VERIFY_SERVER_CERT_SYM = 559,
     MASTER_SYM = 560,
     MASTER_USER_SYM = 561,
     MASTER_USE_GTID_SYM = 562,
     MASTER_HEARTBEAT_PERIOD_SYM = 563,
     MATCH = 564,
     MAX_CONNECTIONS_PER_HOUR = 565,
     MAX_QUERIES_PER_HOUR = 566,
     MAX_ROWS = 567,
     MAX_SIZE_SYM = 568,
     MAX_SYM = 569,
     MAX_UPDATES_PER_HOUR = 570,
     MAX_USER_CONNECTIONS_SYM = 571,
     MAX_VALUE_SYM = 572,
     MEDIUMBLOB = 573,
     MEDIUMINT = 574,
     MEDIUMTEXT = 575,
     MEDIUM_SYM = 576,
     MEMORY_SYM = 577,
     MERGE_SYM = 578,
     MESSAGE_TEXT_SYM = 579,
     MICROSECOND_SYM = 580,
     MIGRATE_SYM = 581,
     MINUTE_MICROSECOND_SYM = 582,
     MINUTE_SECOND_SYM = 583,
     MINUTE_SYM = 584,
     MIN_ROWS = 585,
     MIN_SYM = 586,
     MODE_SYM = 587,
     MODIFIES_SYM = 588,
     MODIFY_SYM = 589,
     MOD_SYM = 590,
     MONTH_SYM = 591,
     MULTILINESTRING = 592,
     MULTIPOINT = 593,
     MULTIPOLYGON = 594,
     MUTEX_SYM = 595,
     MYSQL_ERRNO_SYM = 596,
     NAMES_SYM = 597,
     NAME_SYM = 598,
     NATIONAL_SYM = 599,
     NATURAL = 600,
     NCHAR_STRING = 601,
     NCHAR_SYM = 602,
     NDBCLUSTER_SYM = 603,
     NE = 604,
     NEG = 605,
     NEW_SYM = 606,
     NEXT_SYM = 607,
     NODEGROUP_SYM = 608,
     NONE_SYM = 609,
     NOT2_SYM = 610,
     NOT_SYM = 611,
     NOW_SYM = 612,
     NO_SYM = 613,
     NO_WAIT_SYM = 614,
     NO_WRITE_TO_BINLOG = 615,
     NULL_SYM = 616,
     NUM = 617,
     NUMERIC_SYM = 618,
     NVARCHAR_SYM = 619,
     OFFSET_SYM = 620,
     OLD_PASSWORD = 621,
     ON = 622,
     ONE_SYM = 623,
     ONLY_SYM = 624,
     ONLINE_SYM = 625,
     OPEN_SYM = 626,
     OPTIMIZE = 627,
     OPTIONS_SYM = 628,
     OPTION = 629,
     OPTIONALLY = 630,
     OR2_SYM = 631,
     ORDER_SYM = 632,
     OR_OR_SYM = 633,
     OR_SYM = 634,
     OUTER = 635,
     OUTFILE = 636,
     OUT_SYM = 637,
     OWNER_SYM = 638,
     PACK_KEYS_SYM = 639,
     PAGE_SYM = 640,
     PAGE_CHECKSUM_SYM = 641,
     PARAM_MARKER = 642,
     PARSER_SYM = 643,
     PARSE_VCOL_EXPR_SYM = 644,
     PARTIAL = 645,
     PARTITIONING_SYM = 646,
     PARTITIONS_SYM = 647,
     PARTITION_SYM = 648,
     PASSWORD = 649,
     PERSISTENT_SYM = 650,
     PHASE_SYM = 651,
     PLUGINS_SYM = 652,
     PLUGIN_SYM = 653,
     POINT_SYM = 654,
     POLYGON = 655,
     PORT_SYM = 656,
     POSITION_SYM = 657,
     PRECISION = 658,
     PREPARE_SYM = 659,
     PRESERVE_SYM = 660,
     PREV_SYM = 661,
     PRIMARY_SYM = 662,
     PRIVILEGES = 663,
     PROCEDURE_SYM = 664,
     PROCESS = 665,
     PROCESSLIST_SYM = 666,
     PROFILE_SYM = 667,
     PROFILES_SYM = 668,
     PROXY_SYM = 669,
     PURGE = 670,
     QUARTER_SYM = 671,
     QUERY_SYM = 672,
     QUICK = 673,
     RANGE_SYM = 674,
     READS_SYM = 675,
     READ_ONLY_SYM = 676,
     READ_SYM = 677,
     READ_WRITE_SYM = 678,
     REAL = 679,
     REBUILD_SYM = 680,
     RECOVER_SYM = 681,
     REDOFILE_SYM = 682,
     REDO_BUFFER_SIZE_SYM = 683,
     REDUNDANT_SYM = 684,
     REFERENCES = 685,
     REGEXP = 686,
     RELAY = 687,
     RELAYLOG_SYM = 688,
     RELAY_LOG_FILE_SYM = 689,
     RELAY_LOG_POS_SYM = 690,
     RELAY_THREAD = 691,
     RELEASE_SYM = 692,
     RELOAD = 693,
     REMOVE_SYM = 694,
     RENAME = 695,
     REORGANIZE_SYM = 696,
     REPAIR = 697,
     REPEATABLE_SYM = 698,
     REPEAT_SYM = 699,
     REPLACE = 700,
     REPLICATION = 701,
     REQUIRE_SYM = 702,
     RESET_SYM = 703,
     RESIGNAL_SYM = 704,
     RESOURCES = 705,
     RESTORE_SYM = 706,
     RESTRICT = 707,
     RESUME_SYM = 708,
     RETURNS_SYM = 709,
     RETURN_SYM = 710,
     REVOKE = 711,
     RIGHT = 712,
     ROLLBACK_SYM = 713,
     ROLLUP_SYM = 714,
     ROUTINE_SYM = 715,
     ROWS_SYM = 716,
     ROW_FORMAT_SYM = 717,
     ROW_SYM = 718,
     RTREE_SYM = 719,
     SAVEPOINT_SYM = 720,
     SCHEDULE_SYM = 721,
     SCHEMA_NAME_SYM = 722,
     SECOND_MICROSECOND_SYM = 723,
     SECOND_SYM = 724,
     SECURITY_SYM = 725,
     SELECT_SYM = 726,
     SENSITIVE_SYM = 727,
     SEPARATOR_SYM = 728,
     SERIALIZABLE_SYM = 729,
     SERIAL_SYM = 730,
     SESSION_SYM = 731,
     SERVER_SYM = 732,
     SERVER_OPTIONS = 733,
     SET = 734,
     SET_VAR = 735,
     SHARE_SYM = 736,
     SHIFT_LEFT = 737,
     SHIFT_RIGHT = 738,
     SHOW = 739,
     SHUTDOWN = 740,
     SIGNAL_SYM = 741,
     SIGNED_SYM = 742,
     SIMPLE_SYM = 743,
     SLAVE = 744,
     SLAVES = 745,
     SLAVE_POS_SYM = 746,
     SLOW = 747,
     SMALLINT = 748,
     SNAPSHOT_SYM = 749,
     SOCKET_SYM = 750,
     SOFT_SYM = 751,
     SONAME_SYM = 752,
     SOUNDS_SYM = 753,
     SOURCE_SYM = 754,
     SPATIAL_SYM = 755,
     SPECIFIC_SYM = 756,
     SQLEXCEPTION_SYM = 757,
     SQLSTATE_SYM = 758,
     SQLWARNING_SYM = 759,
     SQL_BIG_RESULT = 760,
     SQL_BUFFER_RESULT = 761,
     SQL_CACHE_SYM = 762,
     SQL_CALC_FOUND_ROWS = 763,
     SQL_NO_CACHE_SYM = 764,
     SQL_SMALL_RESULT = 765,
     SQL_SYM = 766,
     SQL_THREAD = 767,
     SSL_SYM = 768,
     STARTING = 769,
     STARTS_SYM = 770,
     START_SYM = 771,
     STATUS_SYM = 772,
     STDDEV_SAMP_SYM = 773,
     STD_SYM = 774,
     STOP_SYM = 775,
     STORAGE_SYM = 776,
     STRAIGHT_JOIN = 777,
     STRING_SYM = 778,
     SUBCLASS_ORIGIN_SYM = 779,
     SUBDATE_SYM = 780,
     SUBJECT_SYM = 781,
     SUBPARTITIONS_SYM = 782,
     SUBPARTITION_SYM = 783,
     SUBSTRING = 784,
     SUM_SYM = 785,
     SUPER_SYM = 786,
     SUSPEND_SYM = 787,
     SWAPS_SYM = 788,
     SWITCHES_SYM = 789,
     SYSDATE = 790,
     TABLES = 791,
     TABLESPACE = 792,
     TABLE_REF_PRIORITY = 793,
     TABLE_STATS_SYM = 794,
     TABLE_SYM = 795,
     TABLE_CHECKSUM_SYM = 796,
     TABLE_NAME_SYM = 797,
     TEMPORARY = 798,
     TEMPTABLE_SYM = 799,
     TERMINATED = 800,
     TEXT_STRING = 801,
     TEXT_SYM = 802,
     THAN_SYM = 803,
     THEN_SYM = 804,
     TIMESTAMP = 805,
     TIMESTAMP_ADD = 806,
     TIMESTAMP_DIFF = 807,
     TIME_SYM = 808,
     TINYBLOB = 809,
     TINYINT = 810,
     TINYTEXT = 811,
     TO_SYM = 812,
     TRAILING = 813,
     TRANSACTION_SYM = 814,
     TRANSACTIONAL_SYM = 815,
     TRIGGERS_SYM = 816,
     TRIGGER_SYM = 817,
     TRIM = 818,
     TRUE_SYM = 819,
     TRUNCATE_SYM = 820,
     TYPES_SYM = 821,
     TYPE_SYM = 822,
     UDF_RETURNS_SYM = 823,
     ULONGLONG_NUM = 824,
     UNCOMMITTED_SYM = 825,
     UNDEFINED_SYM = 826,
     UNDERSCORE_CHARSET = 827,
     UNDOFILE_SYM = 828,
     UNDO_BUFFER_SIZE_SYM = 829,
     UNDO_SYM = 830,
     UNICODE_SYM = 831,
     UNINSTALL_SYM = 832,
     UNION_SYM = 833,
     UNIQUE_SYM = 834,
     UNKNOWN_SYM = 835,
     UNLOCK_SYM = 836,
     UNSIGNED = 837,
     UNTIL_SYM = 838,
     UPDATE_SYM = 839,
     UPGRADE_SYM = 840,
     USAGE = 841,
     USER = 842,
     USER_STATS_SYM = 843,
     USE_FRM = 844,
     USE_SYM = 845,
     USING = 846,
     UTC_DATE_SYM = 847,
     UTC_TIMESTAMP_SYM = 848,
     UTC_TIME_SYM = 849,
     VALUES = 850,
     VALUE_SYM = 851,
     VARBINARY = 852,
     VARCHAR = 853,
     VARIABLES = 854,
     VARIANCE_SYM = 855,
     VARYING = 856,
     VAR_SAMP_SYM = 857,
     VIA_SYM = 858,
     VIEW_SYM = 859,
     VIRTUAL_SYM = 860,
     WAIT_SYM = 861,
     WARNINGS = 862,
     WEEK_SYM = 863,
     WHEN_SYM = 864,
     WHERE = 865,
     WHILE_SYM = 866,
     WITH = 867,
     WITH_CUBE_SYM = 868,
     WITH_ROLLUP_SYM = 869,
     WORK_SYM = 870,
     WRAPPER_SYM = 871,
     WRITE_SYM = 872,
     X509_SYM = 873,
     XA_SYM = 874,
     XML_SYM = 875,
     XOR = 876,
     YEAR_MONTH_SYM = 877,
     YEAR_SYM = 878,
     ZEROFILL = 879,
     IMPOSSIBLE_ACTION = 880
   };
#endif
/* Tokens.  */
#define ABORT_SYM 258
#define ACCESSIBLE_SYM 259
#define ACTION 260
#define ADD 261
#define ADDDATE_SYM 262
#define AFTER_SYM 263
#define AGAINST 264
#define AGGREGATE_SYM 265
#define ALGORITHM_SYM 266
#define ALL 267
#define ALTER 268
#define ALWAYS_SYM 269
#define ANALYZE_SYM 270
#define AND_AND_SYM 271
#define AND_SYM 272
#define ANY_SYM 273
#define AS 274
#define ASC 275
#define ASCII_SYM 276
#define ASENSITIVE_SYM 277
#define AT_SYM 278
#define AUTHORS_SYM 279
#define AUTOEXTEND_SIZE_SYM 280
#define AUTO_INC 281
#define AUTO_SYM 282
#define AVG_ROW_LENGTH 283
#define AVG_SYM 284
#define BACKUP_SYM 285
#define BEFORE_SYM 286
#define BEGIN_SYM 287
#define BETWEEN_SYM 288
#define BIGINT 289
#define BINARY 290
#define BINLOG_SYM 291
#define BIN_NUM 292
#define BIT_AND 293
#define BIT_OR 294
#define BIT_SYM 295
#define BIT_XOR 296
#define BLOB_SYM 297
#define BLOCK_SYM 298
#define BOOLEAN_SYM 299
#define BOOL_SYM 300
#define BOTH 301
#define BTREE_SYM 302
#define BY 303
#define BYTE_SYM 304
#define CACHE_SYM 305
#define CALL_SYM 306
#define CASCADE 307
#define CASCADED 308
#define CASE_SYM 309
#define CAST_SYM 310
#define CATALOG_NAME_SYM 311
#define CHAIN_SYM 312
#define CHANGE 313
#define CHANGED 314
#define CHARSET 315
#define CHAR_SYM 316
#define CHECKPOINT_SYM 317
#define CHECKSUM_SYM 318
#define CHECK_SYM 319
#define CIPHER_SYM 320
#define CLASS_ORIGIN_SYM 321
#define CLIENT_SYM 322
#define CLIENT_STATS_SYM 323
#define CLOSE_SYM 324
#define COALESCE 325
#define CODE_SYM 326
#define COLLATE_SYM 327
#define COLLATION_SYM 328
#define COLUMNS 329
#define COLUMN_ADD_SYM 330
#define COLUMN_CHECK_SYM 331
#define COLUMN_CREATE_SYM 332
#define COLUMN_DELETE_SYM 333
#define COLUMN_GET_SYM 334
#define COLUMN_SYM 335
#define COLUMN_NAME_SYM 336
#define COMMENT_SYM 337
#define COMMITTED_SYM 338
#define COMMIT_SYM 339
#define COMPACT_SYM 340
#define COMPLETION_SYM 341
#define COMPRESSED_SYM 342
#define CONCURRENT 343
#define CONDITION_SYM 344
#define CONNECTION_SYM 345
#define CONSISTENT_SYM 346
#define CONSTRAINT 347
#define CONSTRAINT_CATALOG_SYM 348
#define CONSTRAINT_NAME_SYM 349
#define CONSTRAINT_SCHEMA_SYM 350
#define CONTAINS_SYM 351
#define CONTEXT_SYM 352
#define CONTINUE_SYM 353
#define CONTRIBUTORS_SYM 354
#define CONVERT_SYM 355
#define COUNT_SYM 356
#define CPU_SYM 357
#define CREATE 358
#define CROSS 359
#define CUBE_SYM 360
#define CURDATE 361
#define CURRENT_USER 362
#define CURRENT_POS_SYM 363
#define CURSOR_SYM 364
#define CURSOR_NAME_SYM 365
#define CURTIME 366
#define DATABASE 367
#define DATABASES 368
#define DATAFILE_SYM 369
#define DATA_SYM 370
#define DATETIME 371
#define DATE_ADD_INTERVAL 372
#define DATE_SUB_INTERVAL 373
#define DATE_SYM 374
#define DAY_HOUR_SYM 375
#define DAY_MICROSECOND_SYM 376
#define DAY_MINUTE_SYM 377
#define DAY_SECOND_SYM 378
#define DAY_SYM 379
#define DEALLOCATE_SYM 380
#define DECIMAL_NUM 381
#define DECIMAL_SYM 382
#define DECLARE_SYM 383
#define DEFAULT 384
#define DEFINER_SYM 385
#define DELAYED_SYM 386
#define DELAY_KEY_WRITE_SYM 387
#define DELETE_SYM 388
#define DESC 389
#define DESCRIBE 390
#define DES_KEY_FILE 391
#define DETERMINISTIC_SYM 392
#define DIRECTORY_SYM 393
#define DISABLE_SYM 394
#define DISCARD 395
#define DISK_SYM 396
#define DISTINCT 397
#define DIV_SYM 398
#define DOUBLE_SYM 399
#define DO_SYM 400
#define DROP 401
#define DUAL_SYM 402
#define DUMPFILE 403
#define DUPLICATE_SYM 404
#define DYNAMIC_SYM 405
#define EACH_SYM 406
#define ELSE 407
#define ELSEIF_SYM 408
#define ENABLE_SYM 409
#define ENCLOSED 410
#define END 411
#define ENDS_SYM 412
#define END_OF_INPUT 413
#define ENGINES_SYM 414
#define ENGINE_SYM 415
#define ENUM 416
#define EQ 417
#define EQUAL_SYM 418
#define ERROR_SYM 419
#define ERRORS 420
#define ESCAPED 421
#define ESCAPE_SYM 422
#define EVENTS_SYM 423
#define EVENT_SYM 424
#define EVERY_SYM 425
#define EXAMINED_SYM 426
#define EXECUTE_SYM 427
#define EXISTS 428
#define EXIT_SYM 429
#define EXPANSION_SYM 430
#define EXTENDED_SYM 431
#define EXTENT_SIZE_SYM 432
#define EXTRACT_SYM 433
#define FALSE_SYM 434
#define FAST_SYM 435
#define FAULTS_SYM 436
#define FETCH_SYM 437
#define FILE_SYM 438
#define FIRST_SYM 439
#define FIXED_SYM 440
#define FLOAT_NUM 441
#define FLOAT_SYM 442
#define FLUSH_SYM 443
#define FORCE_SYM 444
#define FOREIGN 445
#define FOR_SYM 446
#define FOUND_SYM 447
#define FROM 448
#define FULL 449
#define FULLTEXT_SYM 450
#define FUNCTION_SYM 451
#define GE 452
#define GENERAL 453
#define GENERATED_SYM 454
#define GEOMETRYCOLLECTION 455
#define GEOMETRY_SYM 456
#define GET_FORMAT 457
#define GLOBAL_SYM 458
#define GRANT 459
#define GRANTS 460
#define GROUP_SYM 461
#define GROUP_CONCAT_SYM 462
#define GT_SYM 463
#define HANDLER_SYM 464
#define HARD_SYM 465
#define HASH_SYM 466
#define HAVING 467
#define HELP_SYM 468
#define HEX_NUM 469
#define HEX_STRING 470
#define HIGH_PRIORITY 471
#define HOST_SYM 472
#define HOSTS_SYM 473
#define HOUR_MICROSECOND_SYM 474
#define HOUR_MINUTE_SYM 475
#define HOUR_SECOND_SYM 476
#define HOUR_SYM 477
#define IDENT 478
#define IDENTIFIED_SYM 479
#define IDENT_QUOTED 480
#define IF 481
#define IGNORE_SYM 482
#define IGNORE_SERVER_IDS_SYM 483
#define IMPORT 484
#define INDEXES 485
#define INDEX_SYM 486
#define INDEX_STATS_SYM 487
#define INFILE 488
#define INITIAL_SIZE_SYM 489
#define INNER_SYM 490
#define INOUT_SYM 491
#define INSENSITIVE_SYM 492
#define INSERT 493
#define INSERT_METHOD 494
#define INSTALL_SYM 495
#define INTERVAL_SYM 496
#define INTO 497
#define INT_SYM 498
#define INVOKER_SYM 499
#define IN_SYM 500
#define IO_SYM 501
#define IPC_SYM 502
#define IS 503
#define ISOLATION 504
#define ISSUER_SYM 505
#define ITERATE_SYM 506
#define JOIN_SYM 507
#define KEYS 508
#define KEY_BLOCK_SIZE 509
#define KEY_SYM 510
#define KILL_SYM 511
#define LANGUAGE_SYM 512
#define LAST_SYM 513
#define LAST_VALUE 514
#define LE 515
#define LEADING 516
#define LEAVES 517
#define LEAVE_SYM 518
#define LEFT 519
#define LESS_SYM 520
#define LEVEL_SYM 521
#define LEX_HOSTNAME 522
#define LIKE 523
#define LIMIT 524
#define LINEAR_SYM 525
#define LINES 526
#define LINESTRING 527
#define LIST_SYM 528
#define LOAD 529
#define LOCAL_SYM 530
#define LOCATOR_SYM 531
#define LOCKS_SYM 532
#define LOCK_SYM 533
#define LOGFILE_SYM 534
#define LOGS_SYM 535
#define LONGBLOB 536
#define LONGTEXT 537
#define LONG_NUM 538
#define LONG_SYM 539
#define LOOP_SYM 540
#define LOW_PRIORITY 541
#define LT 542
#define MASTER_CONNECT_RETRY_SYM 543
#define MASTER_GTID_POS_SYM 544
#define MASTER_HOST_SYM 545
#define MASTER_LOG_FILE_SYM 546
#define MASTER_LOG_POS_SYM 547
#define MASTER_PASSWORD_SYM 548
#define MASTER_PORT_SYM 549
#define MASTER_SERVER_ID_SYM 550
#define MASTER_SSL_CAPATH_SYM 551
#define MASTER_SSL_CA_SYM 552
#define MASTER_SSL_CERT_SYM 553
#define MASTER_SSL_CIPHER_SYM 554
#define MASTER_SSL_CRL_SYM 555
#define MASTER_SSL_CRLPATH_SYM 556
#define MASTER_SSL_KEY_SYM 557
#define MASTER_SSL_SYM 558
#define MASTER_SSL_VERIFY_SERVER_CERT_SYM 559
#define MASTER_SYM 560
#define MASTER_USER_SYM 561
#define MASTER_USE_GTID_SYM 562
#define MASTER_HEARTBEAT_PERIOD_SYM 563
#define MATCH 564
#define MAX_CONNECTIONS_PER_HOUR 565
#define MAX_QUERIES_PER_HOUR 566
#define MAX_ROWS 567
#define MAX_SIZE_SYM 568
#define MAX_SYM 569
#define MAX_UPDATES_PER_HOUR 570
#define MAX_USER_CONNECTIONS_SYM 571
#define MAX_VALUE_SYM 572
#define MEDIUMBLOB 573
#define MEDIUMINT 574
#define MEDIUMTEXT 575
#define MEDIUM_SYM 576
#define MEMORY_SYM 577
#define MERGE_SYM 578
#define MESSAGE_TEXT_SYM 579
#define MICROSECOND_SYM 580
#define MIGRATE_SYM 581
#define MINUTE_MICROSECOND_SYM 582
#define MINUTE_SECOND_SYM 583
#define MINUTE_SYM 584
#define MIN_ROWS 585
#define MIN_SYM 586
#define MODE_SYM 587
#define MODIFIES_SYM 588
#define MODIFY_SYM 589
#define MOD_SYM 590
#define MONTH_SYM 591
#define MULTILINESTRING 592
#define MULTIPOINT 593
#define MULTIPOLYGON 594
#define MUTEX_SYM 595
#define MYSQL_ERRNO_SYM 596
#define NAMES_SYM 597
#define NAME_SYM 598
#define NATIONAL_SYM 599
#define NATURAL 600
#define NCHAR_STRING 601
#define NCHAR_SYM 602
#define NDBCLUSTER_SYM 603
#define NE 604
#define NEG 605
#define NEW_SYM 606
#define NEXT_SYM 607
#define NODEGROUP_SYM 608
#define NONE_SYM 609
#define NOT2_SYM 610
#define NOT_SYM 611
#define NOW_SYM 612
#define NO_SYM 613
#define NO_WAIT_SYM 614
#define NO_WRITE_TO_BINLOG 615
#define NULL_SYM 616
#define NUM 617
#define NUMERIC_SYM 618
#define NVARCHAR_SYM 619
#define OFFSET_SYM 620
#define OLD_PASSWORD 621
#define ON 622
#define ONE_SYM 623
#define ONLY_SYM 624
#define ONLINE_SYM 625
#define OPEN_SYM 626
#define OPTIMIZE 627
#define OPTIONS_SYM 628
#define OPTION 629
#define OPTIONALLY 630
#define OR2_SYM 631
#define ORDER_SYM 632
#define OR_OR_SYM 633
#define OR_SYM 634
#define OUTER 635
#define OUTFILE 636
#define OUT_SYM 637
#define OWNER_SYM 638
#define PACK_KEYS_SYM 639
#define PAGE_SYM 640
#define PAGE_CHECKSUM_SYM 641
#define PARAM_MARKER 642
#define PARSER_SYM 643
#define PARSE_VCOL_EXPR_SYM 644
#define PARTIAL 645
#define PARTITIONING_SYM 646
#define PARTITIONS_SYM 647
#define PARTITION_SYM 648
#define PASSWORD 649
#define PERSISTENT_SYM 650
#define PHASE_SYM 651
#define PLUGINS_SYM 652
#define PLUGIN_SYM 653
#define POINT_SYM 654
#define POLYGON 655
#define PORT_SYM 656
#define POSITION_SYM 657
#define PRECISION 658
#define PREPARE_SYM 659
#define PRESERVE_SYM 660
#define PREV_SYM 661
#define PRIMARY_SYM 662
#define PRIVILEGES 663
#define PROCEDURE_SYM 664
#define PROCESS 665
#define PROCESSLIST_SYM 666
#define PROFILE_SYM 667
#define PROFILES_SYM 668
#define PROXY_SYM 669
#define PURGE 670
#define QUARTER_SYM 671
#define QUERY_SYM 672
#define QUICK 673
#define RANGE_SYM 674
#define READS_SYM 675
#define READ_ONLY_SYM 676
#define READ_SYM 677
#define READ_WRITE_SYM 678
#define REAL 679
#define REBUILD_SYM 680
#define RECOVER_SYM 681
#define REDOFILE_SYM 682
#define REDO_BUFFER_SIZE_SYM 683
#define REDUNDANT_SYM 684
#define REFERENCES 685
#define REGEXP 686
#define RELAY 687
#define RELAYLOG_SYM 688
#define RELAY_LOG_FILE_SYM 689
#define RELAY_LOG_POS_SYM 690
#define RELAY_THREAD 691
#define RELEASE_SYM 692
#define RELOAD 693
#define REMOVE_SYM 694
#define RENAME 695
#define REORGANIZE_SYM 696
#define REPAIR 697
#define REPEATABLE_SYM 698
#define REPEAT_SYM 699
#define REPLACE 700
#define REPLICATION 701
#define REQUIRE_SYM 702
#define RESET_SYM 703
#define RESIGNAL_SYM 704
#define RESOURCES 705
#define RESTORE_SYM 706
#define RESTRICT 707
#define RESUME_SYM 708
#define RETURNS_SYM 709
#define RETURN_SYM 710
#define REVOKE 711
#define RIGHT 712
#define ROLLBACK_SYM 713
#define ROLLUP_SYM 714
#define ROUTINE_SYM 715
#define ROWS_SYM 716
#define ROW_FORMAT_SYM 717
#define ROW_SYM 718
#define RTREE_SYM 719
#define SAVEPOINT_SYM 720
#define SCHEDULE_SYM 721
#define SCHEMA_NAME_SYM 722
#define SECOND_MICROSECOND_SYM 723
#define SECOND_SYM 724
#define SECURITY_SYM 725
#define SELECT_SYM 726
#define SENSITIVE_SYM 727
#define SEPARATOR_SYM 728
#define SERIALIZABLE_SYM 729
#define SERIAL_SYM 730
#define SESSION_SYM 731
#define SERVER_SYM 732
#define SERVER_OPTIONS 733
#define SET 734
#define SET_VAR 735
#define SHARE_SYM 736
#define SHIFT_LEFT 737
#define SHIFT_RIGHT 738
#define SHOW 739
#define SHUTDOWN 740
#define SIGNAL_SYM 741
#define SIGNED_SYM 742
#define SIMPLE_SYM 743
#define SLAVE 744
#define SLAVES 745
#define SLAVE_POS_SYM 746
#define SLOW 747
#define SMALLINT 748
#define SNAPSHOT_SYM 749
#define SOCKET_SYM 750
#define SOFT_SYM 751
#define SONAME_SYM 752
#define SOUNDS_SYM 753
#define SOURCE_SYM 754
#define SPATIAL_SYM 755
#define SPECIFIC_SYM 756
#define SQLEXCEPTION_SYM 757
#define SQLSTATE_SYM 758
#define SQLWARNING_SYM 759
#define SQL_BIG_RESULT 760
#define SQL_BUFFER_RESULT 761
#define SQL_CACHE_SYM 762
#define SQL_CALC_FOUND_ROWS 763
#define SQL_NO_CACHE_SYM 764
#define SQL_SMALL_RESULT 765
#define SQL_SYM 766
#define SQL_THREAD 767
#define SSL_SYM 768
#define STARTING 769
#define STARTS_SYM 770
#define START_SYM 771
#define STATUS_SYM 772
#define STDDEV_SAMP_SYM 773
#define STD_SYM 774
#define STOP_SYM 775
#define STORAGE_SYM 776
#define STRAIGHT_JOIN 777
#define STRING_SYM 778
#define SUBCLASS_ORIGIN_SYM 779
#define SUBDATE_SYM 780
#define SUBJECT_SYM 781
#define SUBPARTITIONS_SYM 782
#define SUBPARTITION_SYM 783
#define SUBSTRING 784
#define SUM_SYM 785
#define SUPER_SYM 786
#define SUSPEND_SYM 787
#define SWAPS_SYM 788
#define SWITCHES_SYM 789
#define SYSDATE 790
#define TABLES 791
#define TABLESPACE 792
#define TABLE_REF_PRIORITY 793
#define TABLE_STATS_SYM 794
#define TABLE_SYM 795
#define TABLE_CHECKSUM_SYM 796
#define TABLE_NAME_SYM 797
#define TEMPORARY 798
#define TEMPTABLE_SYM 799
#define TERMINATED 800
#define TEXT_STRING 801
#define TEXT_SYM 802
#define THAN_SYM 803
#define THEN_SYM 804
#define TIMESTAMP 805
#define TIMESTAMP_ADD 806
#define TIMESTAMP_DIFF 807
#define TIME_SYM 808
#define TINYBLOB 809
#define TINYINT 810
#define TINYTEXT 811
#define TO_SYM 812
#define TRAILING 813
#define TRANSACTION_SYM 814
#define TRANSACTIONAL_SYM 815
#define TRIGGERS_SYM 816
#define TRIGGER_SYM 817
#define TRIM 818
#define TRUE_SYM 819
#define TRUNCATE_SYM 820
#define TYPES_SYM 821
#define TYPE_SYM 822
#define UDF_RETURNS_SYM 823
#define ULONGLONG_NUM 824
#define UNCOMMITTED_SYM 825
#define UNDEFINED_SYM 826
#define UNDERSCORE_CHARSET 827
#define UNDOFILE_SYM 828
#define UNDO_BUFFER_SIZE_SYM 829
#define UNDO_SYM 830
#define UNICODE_SYM 831
#define UNINSTALL_SYM 832
#define UNION_SYM 833
#define UNIQUE_SYM 834
#define UNKNOWN_SYM 835
#define UNLOCK_SYM 836
#define UNSIGNED 837
#define UNTIL_SYM 838
#define UPDATE_SYM 839
#define UPGRADE_SYM 840
#define USAGE 841
#define USER 842
#define USER_STATS_SYM 843
#define USE_FRM 844
#define USE_SYM 845
#define USING 846
#define UTC_DATE_SYM 847
#define UTC_TIMESTAMP_SYM 848
#define UTC_TIME_SYM 849
#define VALUES 850
#define VALUE_SYM 851
#define VARBINARY 852
#define VARCHAR 853
#define VARIABLES 854
#define VARIANCE_SYM 855
#define VARYING 856
#define VAR_SAMP_SYM 857
#define VIA_SYM 858
#define VIEW_SYM 859
#define VIRTUAL_SYM 860
#define WAIT_SYM 861
#define WARNINGS 862
#define WEEK_SYM 863
#define WHEN_SYM 864
#define WHERE 865
#define WHILE_SYM 866
#define WITH 867
#define WITH_CUBE_SYM 868
#define WITH_ROLLUP_SYM 869
#define WORK_SYM 870
#define WRAPPER_SYM 871
#define WRITE_SYM 872
#define X509_SYM 873
#define XA_SYM 874
#define XML_SYM 875
#define XOR 876
#define YEAR_MONTH_SYM 877
#define YEAR_SYM 878
#define ZEROFILL 879
#define IMPOSSIBLE_ACTION 880




#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
typedef union YYSTYPE
{

/* Line 214 of yacc.c  */
#line 845 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"

  int  num;
  ulong ulong_num;
  ulonglong ulonglong_number;
  longlong longlong_number;
  LEX_STRING lex_str;
  LEX_STRING *lex_str_ptr;
  LEX_SYMBOL symbol;
  Table_ident *table;
  char *simple_string;
  Item *item;
  Item_num *item_num;
  List<Item> *item_list;
  List<String> *string_list;
  String *string;
  Key_part_spec *key_part;
  TABLE_LIST *table_list;
  udf_func *udf;
  LEX_USER *lex_user;
  struct sys_var_with_base variable;
  enum enum_var_type var_type;
  Key::Keytype key_type;
  enum ha_key_alg key_alg;
  handlerton *db_type;
  enum row_type row_type;
  enum ha_rkey_function ha_rkey_mode;
  enum enum_tx_isolation tx_isolation;
  enum Cast_target cast_type;
  enum Item_udftype udf_type;
  enum ha_choice choice;
  CHARSET_INFO *charset;
  thr_lock_type lock_type;
  interval_type interval, interval_time_st;
  timestamp_type date_time_type;
  st_select_lex *select_lex;
  chooser_compare_func_creator boolfunc2creator;
  struct sp_cond_type *spcondtype;
  struct { int vars, conds, hndlrs, curs; } spblock;
  sp_name *spname;
  LEX *lex;
  sp_head *sphead;
  struct p_elem_val *p_elem_value;
  enum index_hint_type index_hint;
  enum enum_filetype filetype;
  enum Foreign_key::fk_option m_fk_option;
  enum enum_yes_no_unknown m_yes_no_unk;
  Diag_condition_item_name diag_condition_item_name;
  DYNCALL_CREATE_DEF *dyncol_def;
  List<DYNCALL_CREATE_DEF> *dyncol_def_list;



/* Line 214 of yacc.c  */
#line 2242 "/home/buildbot/buildbot/build/mkdist/sql/sql_yacc.cc"
} YYSTYPE;
# define YYSTYPE_IS_TRIVIAL 1
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
#endif


/* Copy the second part of user declarations.  */

/* Line 264 of yacc.c  */
#line 896 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"

bool my_yyoverflow(short **a, YYSTYPE **b, ulong *yystacksize);


/* Line 264 of yacc.c  */
#line 2259 "/home/buildbot/buildbot/build/mkdist/sql/sql_yacc.cc"

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#elif (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
typedef signed char yytype_int8;
#else
typedef short int yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(msgid) dgettext ("bison-runtime", msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(msgid) msgid
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(e) ((void) (e))
#else
# define YYUSE(e) /* empty */
#endif

/* Identity function, used to suppress warnings about constant conditions.  */
#ifndef lint
# define YYID(n) (n)
#else
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static int
YYID (int yyi)
#else
static int
YYID (yyi)
    int yyi;
#endif
{
  return yyi;
}
#endif

#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#     ifndef _STDLIB_H
#      define _STDLIB_H 1
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (YYID (0))
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined _STDLIB_H \
       && ! ((defined YYMALLOC || defined malloc) \
	     && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef _STDLIB_H
#    define _STDLIB_H 1
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
	 || (defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss_alloc;
  YYSTYPE yyvs_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE)) \
      + YYSTACK_GAP_MAXIMUM)

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  YYSIZE_T yyi;				\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (YYID (0))
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)				\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack_alloc, Stack, yysize);			\
	Stack = &yyptr->Stack_alloc;					\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (YYID (0))

#endif

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  610
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   58593

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  645
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  949
/* YYNRULES -- Number of rules.  */
#define YYNRULES  2695
/* YYNRULES -- Number of states.  */
#define YYNSTATES  4570

/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   880

#define YYTRANSLATE(YYX)						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const yytype_uint16 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   638,     2,     2,     2,   632,   627,     2,
     635,   636,   630,   629,   637,   628,   643,   631,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   644,   641,
       2,     2,     2,     2,   642,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,   633,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   639,   626,   640,   634,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const yytype_uint16 yyprhs[] =
{
       0,     0,     3,     5,     6,    11,    14,    15,    17,    19,
      21,    23,    25,    27,    29,    31,    33,    35,    37,    39,
      41,    43,    45,    47,    49,    51,    53,    55,    57,    59,
      61,    63,    65,    67,    69,    71,    73,    75,    77,    79,
      81,    83,    85,    87,    89,    91,    93,    95,    97,    99,
     101,   103,   105,   107,   109,   111,   113,   115,   117,   119,
     121,   123,   125,   127,   131,   133,   135,   140,   142,   145,
     146,   151,   152,   155,   159,   161,   164,   165,   169,   170,
     177,   179,   183,   187,   191,   195,   199,   203,   207,   211,
     215,   219,   223,   227,   231,   235,   239,   243,   249,   251,
     252,   254,   258,   260,   264,   268,   272,   276,   280,   284,
     288,   289,   291,   293,   294,   302,   303,   317,   318,   332,
     333,   347,   348,   355,   356,   360,   365,   370,   374,   377,
     388,   390,   394,   397,   400,   403,   406,   409,   412,   415,
     416,   430,   431,   438,   441,   442,   444,   448,   450,   451,
     454,   455,   458,   459,   461,   465,   470,   471,   474,   475,
     478,   480,   482,   484,   486,   488,   490,   492,   494,   496,
     498,   500,   502,   504,   505,   509,   511,   512,   515,   516,
     519,   522,   525,   528,   531,   535,   539,   541,   543,   545,
     548,   552,   556,   557,   562,   563,   567,   568,   570,   574,
     576,   577,   579,   583,   585,   586,   590,   591,   593,   597,
     599,   604,   605,   607,   609,   611,   612,   616,   619,   623,
     624,   628,   629,   635,   641,   642,   650,   656,   657,   660,
     662,   664,   666,   670,   672,   674,   676,   680,   681,   683,
     685,   687,   689,   692,   694,   698,   700,   702,   703,   705,
     706,   709,   713,   719,   721,   723,   725,   727,   729,   731,
     733,   735,   737,   739,   741,   743,   745,   747,   749,   753,
     755,   759,   760,   763,   765,   767,   769,   771,   773,   775,
     777,   779,   781,   783,   785,   787,   789,   790,   796,   797,
     800,   801,   805,   806,   809,   812,   815,   818,   819,   826,
     829,   830,   833,   835,   837,   841,   842,   843,   844,   852,
     853,   856,   859,   861,   863,   864,   865,   874,   875,   882,
     884,   887,   889,   892,   893,   894,   901,   902,   903,   910,
     911,   914,   915,   921,   922,   924,   925,   931,   932,   935,
     936,   942,   947,   948,   949,   958,   959,   967,   969,   971,
     973,   975,   977,   980,   985,   991,   992,   997,  1002,  1007,
    1011,  1015,  1018,  1021,  1022,  1025,  1027,  1030,  1034,  1036,
    1038,  1040,  1042,  1044,  1047,  1051,  1053,  1055,  1057,  1059,
    1061,  1063,  1065,  1067,  1069,  1071,  1074,  1078,  1080,  1082,
    1084,  1086,  1088,  1090,  1092,  1095,  1099,  1101,  1103,  1105,
    1107,  1109,  1111,  1113,  1115,  1117,  1120,  1124,  1126,  1128,
    1130,  1133,  1136,  1139,  1141,  1143,  1145,  1147,  1150,  1154,
    1158,  1162,  1166,  1170,  1174,  1178,  1182,  1187,  1188,  1190,
    1192,  1194,  1196,  1198,  1199,  1207,  1211,  1212,  1218,  1220,
    1223,  1228,  1229,  1230,  1236,  1237,  1245,  1247,  1248,  1250,
    1251,  1256,  1257,  1258,  1262,  1268,  1275,  1276,  1281,  1284,
    1287,  1290,  1293,  1294,  1296,  1297,  1301,  1302,  1304,  1306,
    1310,  1312,  1317,  1323,  1329,  1330,  1333,  1334,  1335,  1343,
    1344,  1355,  1357,  1361,  1363,  1365,  1366,  1369,  1370,  1374,
    1376,  1380,  1381,  1388,  1390,  1391,  1392,  1398,  1399,  1404,
    1406,  1408,  1410,  1414,  1416,  1420,  1421,  1422,  1428,  1430,
    1434,  1436,  1438,  1439,  1443,  1445,  1449,  1450,  1455,  1457,
    1458,  1460,  1463,  1465,  1469,  1474,  1478,  1482,  1486,  1490,
    1495,  1500,  1504,  1505,  1506,  1513,  1514,  1516,  1517,  1519,
    1521,  1524,  1526,  1528,  1529,  1531,  1533,  1536,  1538,  1539,
    1543,  1544,  1546,  1548,  1551,  1553,  1556,  1560,  1564,  1568,
    1572,  1576,  1580,  1584,  1588,  1592,  1596,  1600,  1604,  1608,
    1612,  1616,  1617,  1624,  1626,  1628,  1632,  1637,  1642,  1645,
    1648,  1651,  1655,  1659,  1663,  1667,  1671,  1675,  1679,  1684,
    1689,  1691,  1693,  1695,  1697,  1699,  1701,  1703,  1705,  1707,
    1709,  1711,  1713,  1715,  1718,  1720,  1722,  1724,  1726,  1728,
    1730,  1734,  1736,  1738,  1741,  1744,  1745,  1754,  1755,  1765,
    1766,  1776,  1777,  1787,  1796,  1799,  1800,  1802,  1807,  1808,
    1810,  1813,  1814,  1818,  1821,  1830,  1831,  1834,  1835,  1837,
    1839,  1840,  1842,  1845,  1847,  1849,  1852,  1855,  1860,  1864,
    1868,  1872,  1876,  1878,  1881,  1883,  1885,  1889,  1892,  1896,
    1899,  1902,  1904,  1908,  1912,  1915,  1919,  1921,  1924,  1927,
    1930,  1932,  1935,  1937,  1939,  1941,  1944,  1948,  1951,  1955,
    1958,  1961,  1965,  1969,  1973,  1974,  1981,  1982,  1989,  1992,
    1994,  1996,  1998,  2000,  2002,  2004,  2006,  2008,  2010,  2012,
    2014,  2017,  2020,  2022,  2025,  2027,  2030,  2034,  2037,  2039,
    2041,  2043,  2045,  2047,  2049,  2051,  2054,  2055,  2057,  2059,
    2065,  2066,  2068,  2071,  2073,  2075,  2077,  2079,  2083,  2087,
    2091,  2095,  2096,  2098,  2099,  2101,  2102,  2104,  2107,  2109,
    2111,  2114,  2117,  2122,  2124,  2128,  2131,  2133,  2136,  2139,
    2142,  2146,  2150,  2154,  2158,  2161,  2164,  2166,  2168,  2170,
    2173,  2175,  2177,  2179,  2181,  2183,  2184,  2187,  2189,  2191,
    2193,  2195,  2197,  2198,  2201,  2203,  2205,  2206,  2208,  2210,
    2213,  2216,  2218,  2221,  2224,  2225,  2227,  2229,  2231,  2235,
    2237,  2241,  2242,  2244,  2245,  2247,  2253,  2254,  2258,  2262,
    2264,  2265,  2268,  2271,  2274,  2275,  2279,  2283,  2290,  2297,
    2299,  2301,  2304,  2307,  2310,  2312,  2315,  2318,  2320,  2322,
    2323,  2325,  2327,  2329,  2331,  2332,  2334,  2336,  2338,  2339,
    2341,  2344,  2345,  2347,  2348,  2350,  2351,  2353,  2355,  2358,
    2360,  2363,  2365,  2368,  2371,  2374,  2378,  2381,  2385,  2389,
    2393,  2397,  2399,  2401,  2403,  2405,  2409,  2411,  2413,  2415,
    2420,  2423,  2425,  2430,  2431,  2433,  2436,  2437,  2440,  2442,
    2446,  2447,  2454,  2455,  2461,  2469,  2470,  2476,  2477,  2483,
    2484,  2490,  2491,  2496,  2497,  2508,  2512,  2517,  2521,  2525,
    2533,  2534,  2538,  2540,  2545,  2546,  2550,  2551,  2554,  2555,
    2557,  2558,  2561,  2564,  2567,  2570,  2572,  2574,  2576,  2581,
    2586,  2587,  2594,  2599,  2600,  2606,  2607,  2614,  2619,  2623,
    2625,  2628,  2630,  2632,  2633,  2640,  2641,  2645,  2648,  2649,
    2655,  2656,  2657,  2664,  2666,  2670,  2672,  2674,  2678,  2682,
    2686,  2689,  2694,  2695,  2703,  2704,  2705,  2714,  2720,  2726,
    2730,  2735,  2738,  2741,  2748,  2754,  2758,  2764,  2766,  2768,
    2770,  2771,  2773,  2774,  2776,  2777,  2780,  2781,  2783,  2786,
    2788,  2790,  2792,  2793,  2795,  2797,  2798,  2801,  2803,  2804,
    2806,  2808,  2810,  2811,  2818,  2819,  2825,  2830,  2835,  2836,
    2843,  2848,  2852,  2853,  2855,  2857,  2861,  2865,  2868,  2871,
    2872,  2875,  2877,  2881,  2882,  2884,  2886,  2887,  2890,  2895,
    2897,  2901,  2902,  2908,  2909,  2911,  2913,  2914,  2921,  2922,
    2924,  2926,  2929,  2931,  2933,  2935,  2936,  2942,  2944,  2948,
    2951,  2952,  2956,  2958,  2963,  2965,  2966,  2971,  2973,  2974,
    2979,  2980,  2982,  2986,  2987,  2989,  2993,  2995,  2997,  3000,
    3001,  3007,  3008,  3010,  3012,  3015,  3017,  3019,  3021,  3023,
    3025,  3028,  3029,  3035,  3036,  3038,  3040,  3041,  3046,  3051,
    3055,  3061,  3063,  3067,  3071,  3072,  3079,  3081,  3083,  3085,
    3089,  3092,  3096,  3098,  3100,  3101,  3108,  3110,  3112,  3114,
    3118,  3122,  3127,  3128,  3135,  3136,  3139,  3140,  3145,  3146,
    3149,  3151,  3154,  3159,  3162,  3166,  3169,  3173,  3174,  3178,
    3179,  3180,  3187,  3190,  3192,  3194,  3197,  3200,  3209,  3214,
    3215,  3217,  3220,  3222,  3224,  3226,  3228,  3229,  3232,  3237,
    3241,  3243,  3245,  3249,  3254,  3255,  3256,  3257,  3260,  3263,
    3265,  3267,  3268,  3271,  3275,  3276,  3279,  3283,  3284,  3287,
    3291,  3295,  3299,  3302,  3306,  3311,  3315,  3320,  3324,  3329,
    3331,  3335,  3340,  3344,  3348,  3355,  3357,  3363,  3370,  3376,
    3384,  3391,  3400,  3406,  3413,  3418,  3423,  3429,  3433,  3438,
    3440,  3444,  3448,  3452,  3456,  3460,  3464,  3470,  3476,  3480,
    3484,  3488,  3492,  3496,  3500,  3502,  3504,  3506,  3508,  3510,
    3512,  3514,  3516,  3518,  3520,  3522,  3524,  3526,  3528,  3530,
    3532,  3534,  3535,  3538,  3540,  3543,  3545,  3547,  3549,  3552,
    3555,  3557,  3559,  3562,  3565,  3570,  3572,  3576,  3578,  3580,
    3582,  3584,  3586,  3590,  3592,  3594,  3596,  3598,  3602,  3605,
    3608,  3611,  3614,  3618,  3622,  3628,  3635,  3640,  3645,  3653,
    3656,  3663,  3669,  3676,  3683,  3688,  3693,  3699,  3704,  3711,
    3714,  3719,  3724,  3729,  3740,  3747,  3756,  3763,  3768,  3773,
    3780,  3785,  3790,  3795,  3802,  3807,  3815,  3823,  3831,  3838,
    3845,  3852,  3859,  3863,  3868,  3875,  3884,  3887,  3890,  3899,
    3908,  3915,  3922,  3925,  3932,  3939,  3948,  3957,  3964,  3973,
    3980,  3983,  3992,  4001,  4004,  4007,  4010,  4017,  4024,  4029,
    4034,  4043,  4048,  4053,  4058,  4063,  4067,  4076,  4081,  4086,
    4093,  4098,  4103,  4108,  4115,  4124,  4131,  4136,  4143,  4145,
    4152,  4157,  4162,  4167,  4172,  4177,  4184,  4189,  4190,  4196,
    4203,  4206,  4210,  4211,  4216,  4217,  4221,  4222,  4224,  4226,
    4230,  4235,  4240,  4246,  4251,  4256,  4261,  4267,  4272,  4273,
    4274,  4282,  4287,  4293,  4298,  4304,  4309,  4314,  4319,  4324,
    4329,  4335,  4336,  4345,  4346,  4350,  4354,  4356,  4361,  4362,
    4364,  4365,  4368,  4369,  4371,  4372,  4376,  4379,  4383,  4386,
    4388,  4390,  4393,  4395,  4398,  4400,  4403,  4406,  4409,  4410,
    4414,  4415,  4417,  4419,  4423,  4425,  4429,  4431,  4435,  4436,
    4438,  4439,  4442,  4447,  4453,  4455,  4457,  4459,  4461,  4466,
    4468,  4472,  4476,  4477,  4484,  4485,  4494,  4499,  4500,  4509,
    4510,  4521,  4528,  4529,  4538,  4539,  4550,  4557,  4559,  4562,
    4564,  4566,  4569,  4570,  4575,  4579,  4585,  4588,  4589,  4590,
    4598,  4600,  4601,  4602,  4609,  4610,  4614,  4615,  4616,  4622,
    4623,  4625,  4626,  4628,  4629,  4632,  4636,  4640,  4642,  4644,
    4645,  4653,  4654,  4662,  4664,  4667,  4668,  4669,  4672,  4673,
    4676,  4677,  4679,  4681,  4683,  4685,  4689,  4691,  4695,  4697,
    4699,  4701,  4703,  4705,  4707,  4709,  4711,  4713,  4715,  4717,
    4719,  4721,  4723,  4725,  4727,  4729,  4731,  4733,  4735,  4737,
    4739,  4741,  4743,  4745,  4746,  4748,  4750,  4751,  4754,  4755,
    4757,  4758,  4759,  4763,  4764,  4765,  4769,  4772,  4773,  4774,
    4779,  4784,  4787,  4788,  4790,  4792,  4796,  4800,  4802,  4805,
    4806,  4808,  4809,  4814,  4819,  4822,  4823,  4825,  4827,  4828,
    4830,  4831,  4833,  4836,  4842,  4847,  4849,  4853,  4857,  4859,
    4861,  4863,  4865,  4867,  4869,  4870,  4873,  4877,  4882,  4884,
    4887,  4890,  4892,  4894,  4896,  4898,  4900,  4902,  4904,  4906,
    4908,  4910,  4912,  4914,  4916,  4918,  4920,  4922,  4924,  4926,
    4928,  4930,  4932,  4934,  4936,  4938,  4940,  4942,  4943,  4944,
    4951,  4952,  4954,  4958,  4960,  4964,  4965,  4968,  4972,  4974,
    4977,  4979,  4980,  4984,  4985,  4986,  4994,  4997,  4999,  5000,
    5004,  5005,  5013,  5014,  5022,  5027,  5034,  5039,  5044,  5049,
    5050,  5057,  5062,  5067,  5073,  5080,  5085,  5087,  5091,  5093,
    5095,  5099,  5101,  5102,  5105,  5106,  5108,  5109,  5110,  5119,
    5120,  5121,  5128,  5129,  5131,  5133,  5135,  5137,  5139,  5142,
    5144,  5146,  5148,  5152,  5157,  5158,  5162,  5166,  5168,  5171,
    5174,  5175,  5179,  5180,  5186,  5190,  5192,  5196,  5198,  5202,
    5204,  5206,  5207,  5209,  5210,  5215,  5216,  5218,  5222,  5224,
    5226,  5228,  5229,  5230,  5237,  5238,  5239,  5251,  5255,  5257,
    5261,  5265,  5267,  5271,  5272,  5274,  5275,  5280,  5281,  5288,
    5289,  5295,  5296,  5303,  5305,  5309,  5312,  5317,  5318,  5321,
    5322,  5325,  5327,  5329,  5331,  5332,  5337,  5338,  5340,  5341,
    5343,  5345,  5349,  5351,  5353,  5356,  5359,  5362,  5364,  5366,
    5368,  5370,  5371,  5375,  5376,  5380,  5383,  5388,  5393,  5397,
    5402,  5407,  5409,  5413,  5417,  5421,  5425,  5432,  5435,  5438,
    5439,  5446,  5447,  5455,  5461,  5464,  5466,  5468,  5470,  5476,
    5482,  5485,  5488,  5490,  5495,  5499,  5502,  5506,  5509,  5512,
    5514,  5518,  5523,  5527,  5531,  5534,  5538,  5541,  5545,  5547,
    5549,  5551,  5553,  5557,  5561,  5565,  5569,  5573,  5577,  5581,
    5585,  5589,  5591,  5593,  5595,  5597,  5599,  5600,  5602,  5603,
    5606,  5607,  5609,  5611,  5613,  5614,  5617,  5618,  5621,  5622,
    5625,  5628,  5629,  5634,  5635,  5640,  5642,  5644,  5645,  5647,
    5649,  5650,  5652,  5654,  5655,  5660,  5661,  5662,  5668,  5670,
    5671,  5676,  5680,  5682,  5685,  5688,  5691,  5694,  5697,  5701,
    5704,  5706,  5708,  5710,  5712,  5715,  5717,  5719,  5721,  5723,
    5725,  5727,  5729,  5730,  5732,  5733,  5737,  5738,  5742,  5746,
    5748,  5749,  5754,  5756,  5759,  5760,  5762,  5763,  5767,  5771,
    5774,  5777,  5778,  5784,  5785,  5787,  5789,  5790,  5792,  5794,
    5796,  5799,  5802,  5803,  5804,  5805,  5806,  5828,  5830,  5832,
    5833,  5835,  5836,  5838,  5840,  5841,  5843,  5845,  5846,  5849,
    5852,  5854,  5858,  5863,  5867,  5871,  5872,  5875,  5878,  5880,
    5884,  5888,  5889,  5894,  5895,  5899,  5901,  5903,  5904,  5908,
    5911,  5915,  5917,  5919,  5922,  5923,  5926,  5930,  5932,  5938,
    5940,  5942,  5945,  5948,  5950,  5952,  5954,  5956,  5958,  5960,
    5963,  5966,  5968,  5970,  5972,  5974,  5976,  5978,  5980,  5982,
    5985,  5988,  5991,  5994,  5997,  5999,  6001,  6003,  6005,  6007,
    6009,  6011,  6015,  6021,  6023,  6025,  6027,  6029,  6031,  6035,
    6040,  6046,  6048,  6054,  6058,  6061,  6063,  6067,  6070,  6073,
    6078,  6080,  6082,  6084,  6086,  6088,  6090,  6092,  6094,  6096,
    6098,  6100,  6102,  6104,  6106,  6110,  6113,  6115,  6117,  6119,
    6121,  6123,  6125,  6127,  6129,  6131,  6133,  6135,  6137,  6139,
    6141,  6143,  6145,  6147,  6149,  6151,  6153,  6155,  6157,  6159,
    6161,  6163,  6165,  6167,  6169,  6171,  6173,  6175,  6177,  6179,
    6181,  6183,  6185,  6187,  6189,  6191,  6193,  6195,  6197,  6199,
    6201,  6203,  6205,  6207,  6209,  6211,  6213,  6215,  6217,  6219,
    6221,  6223,  6225,  6227,  6229,  6231,  6233,  6235,  6237,  6239,
    6241,  6243,  6245,  6247,  6249,  6251,  6253,  6255,  6257,  6259,
    6261,  6263,  6265,  6267,  6269,  6271,  6273,  6275,  6277,  6279,
    6281,  6283,  6285,  6287,  6289,  6291,  6293,  6295,  6297,  6299,
    6301,  6303,  6305,  6307,  6309,  6311,  6313,  6315,  6317,  6319,
    6321,  6323,  6325,  6327,  6329,  6331,  6333,  6335,  6337,  6339,
    6341,  6343,  6345,  6347,  6349,  6351,  6353,  6355,  6357,  6359,
    6361,  6363,  6365,  6367,  6369,  6371,  6373,  6375,  6377,  6379,
    6381,  6383,  6385,  6387,  6389,  6391,  6393,  6395,  6397,  6399,
    6401,  6403,  6405,  6407,  6409,  6411,  6413,  6415,  6417,  6419,
    6421,  6423,  6425,  6427,  6429,  6431,  6433,  6435,  6437,  6439,
    6441,  6443,  6445,  6447,  6449,  6451,  6453,  6455,  6457,  6459,
    6461,  6463,  6465,  6467,  6469,  6471,  6473,  6475,  6477,  6479,
    6481,  6483,  6485,  6487,  6489,  6491,  6493,  6495,  6497,  6499,
    6501,  6503,  6505,  6507,  6509,  6511,  6513,  6515,  6517,  6519,
    6521,  6523,  6525,  6527,  6529,  6531,  6533,  6535,  6537,  6539,
    6541,  6543,  6545,  6547,  6549,  6551,  6553,  6555,  6557,  6559,
    6561,  6563,  6565,  6567,  6569,  6571,  6573,  6575,  6577,  6579,
    6581,  6583,  6585,  6587,  6589,  6591,  6593,  6595,  6597,  6599,
    6601,  6603,  6605,  6607,  6609,  6611,  6613,  6615,  6617,  6619,
    6621,  6623,  6625,  6627,  6629,  6631,  6633,  6635,  6637,  6639,
    6641,  6643,  6645,  6647,  6649,  6651,  6653,  6655,  6657,  6659,
    6661,  6663,  6665,  6667,  6669,  6671,  6673,  6675,  6677,  6679,
    6681,  6683,  6685,  6687,  6689,  6691,  6693,  6695,  6697,  6699,
    6701,  6703,  6705,  6707,  6709,  6711,  6713,  6715,  6717,  6719,
    6721,  6723,  6725,  6727,  6729,  6731,  6733,  6735,  6737,  6739,
    6741,  6743,  6745,  6747,  6749,  6751,  6753,  6755,  6757,  6759,
    6761,  6763,  6765,  6767,  6769,  6771,  6773,  6775,  6777,  6779,
    6781,  6783,  6785,  6787,  6789,  6791,  6793,  6795,  6797,  6799,
    6801,  6803,  6805,  6807,  6809,  6811,  6813,  6815,  6817,  6819,
    6821,  6823,  6825,  6827,  6829,  6830,  6834,  6835,  6839,  6840,
    6844,  6845,  6849,  6850,  6854,  6857,  6858,  6861,  6862,  6865,
    6866,  6871,  6872,  6876,  6878,  6880,  6882,  6884,  6885,  6887,
    6889,  6891,  6892,  6895,  6898,  6901,  6905,  6909,  6914,  6921,
    6924,  6928,  6932,  6936,  6942,  6944,  6948,  6952,  6954,  6956,
    6960,  6964,  6966,  6970,  6973,  6976,  6979,  6982,  6985,  6987,
    6989,  6994,  6999,  7001,  7003,  7005,  7007,  7009,  7010,  7015,
    7017,  7019,  7021,  7025,  7029,  7031,  7033,  7036,  7039,  7042,
    7043,  7047,  7052,  7056,  7057,  7065,  7067,  7070,  7072,  7074,
    7076,  7078,  7080,  7082,  7083,  7089,  7091,  7093,  7095,  7097,
    7099,  7103,  7110,  7117,  7124,  7132,  7138,  7142,  7151,  7160,
    7169,  7176,  7177,  7179,  7181,  7184,  7185,  7187,  7189,  7193,
    7194,  7198,  7199,  7203,  7204,  7208,  7209,  7213,  7215,  7217,
    7219,  7221,  7223,  7225,  7227,  7229,  7231,  7233,  7235,  7238,
    7241,  7243,  7247,  7250,  7253,  7256,  7259,  7262,  7265,  7268,
    7271,  7273,  7275,  7278,  7279,  7281,  7285,  7287,  7290,  7293,
    7296,  7298,  7302,  7306,  7308,  7310,  7314,  7316,  7320,  7322,
    7324,  7326,  7328,  7333,  7339,  7344,  7351,  7353,  7354,  7358,
    7362,  7364,  7366,  7367,  7370,  7373,  7376,  7379,  7380,  7383,
    7384,  7388,  7391,  7393,  7396,  7399,  7402,  7405,  7408,  7409,
    7413,  7414,  7416,  7417,  7421,  7424,  7425,  7427,  7430,  7431,
    7433,  7438,  7443,  7449,  7452,  7456,  7457,  7459,  7460,  7465,
    7466,  7468,  7470,  7471,  7473,  7474,  7477,  7480,  7482,  7483,
    7485,  7487,  7490,  7494,  7497,  7498,  7505,  7509,  7510,  7511,
    7512,  7514,  7517,  7519,  7521,  7523,  7525,  7527,  7529,  7531,
    7533,  7535,  7538,  7541,  7545,  7547,  7549,  7551,  7553,  7555,
    7557,  7559,  7561,  7563,  7565,  7567,  7569,  7571,  7572,  7576,
    7578,  7581,  7583,  7586,  7590,  7594,  7598,  7599,  7603,  7607,
    7608,  7616,  7617,  7621,  7623,  7627,  7628,  7632,  7635,  7640,
    7641,  7645,  7650,  7655,  7656,  7657,  7658,  7675,  7684,  7692,
    7693,  7694,  7695,  7696,  7697,  7713,  7714,  7715,  7716,  7717,
    7730,  7735,  7740,  7744,  7749,  7753,  7756,  7758,  7762,  7768,
    7770,  7772,  7773,  7775,  7777,  7778,  7781,  7782,  7783,  7787,
    7788,  7791,  7797,  7801,  7805,  7809
};

/* YYRHS -- A `-1'-separated list of the rules' RHS.  */
static const yytype_int16 yyrhs[] =
{
     646,     0,    -1,   158,    -1,    -1,   649,   647,   641,   648,
      -1,   649,   158,    -1,    -1,   158,    -1,   650,    -1,  1521,
      -1,  1010,    -1,  1075,    -1,  1088,    -1,   701,    -1,   662,
      -1,  1089,    -1,  1067,    -1,  1527,    -1,   671,    -1,   651,
      -1,  1335,    -1,  1367,    -1,  1287,    -1,  1289,    -1,   655,
      -1,  1373,    -1,  1493,    -1,  1484,    -1,   660,    -1,  1299,
      -1,  1591,    -1,  1593,    -1,  1102,    -1,  1393,    -1,  1399,
      -1,  1476,    -1,  1094,    -1,   935,    -1,   845,    -1,  1109,
      -1,   653,    -1,  1389,    -1,  1530,    -1,  1097,    -1,  1070,
      -1,  1302,    -1,  1383,    -1,   736,    -1,  1491,    -1,  1528,
      -1,  1529,    -1,  1121,    -1,  1449,    -1,   729,    -1,  1353,
      -1,  1053,    -1,  1057,    -1,  1346,    -1,  1592,    -1,  1482,
      -1,  1327,    -1,  1398,    -1,  1583,    -1,   652,   404,  1443,
      -1,   125,    -1,   146,    -1,   404,  1443,   193,   654,    -1,
    1440,    -1,   642,  1445,    -1,    -1,   172,  1443,   656,   657,
      -1,    -1,   591,   658,    -1,   658,   637,   659,    -1,   659,
      -1,   642,  1445,    -1,    -1,   213,   661,  1445,    -1,    -1,
      58,   305,   669,   557,   663,   664,    -1,   665,    -1,   664,
     637,   665,    -1,   290,   162,  1440,    -1,   306,   162,  1440,
      -1,   293,   162,  1440,    -1,   294,   162,  1266,    -1,   288,
     162,  1266,    -1,   303,   162,  1266,    -1,   297,   162,  1440,
      -1,   296,   162,  1440,    -1,   298,   162,  1440,    -1,   299,
     162,  1440,    -1,   302,   162,  1440,    -1,   304,   162,  1266,
      -1,   300,   162,  1440,    -1,   301,   162,  1440,    -1,   308,
     162,  1428,    -1,   228,   162,   635,   666,   636,    -1,   668,
      -1,    -1,   667,    -1,   666,   637,   667,    -1,  1266,    -1,
     291,   162,  1440,    -1,   292,   162,  1268,    -1,   434,   162,
    1440,    -1,   435,   162,  1266,    -1,   307,   162,   108,    -1,
     307,   162,   491,    -1,   307,   162,   358,    -1,    -1,   670,
      -1,  1440,    -1,    -1,   103,   897,   540,   900,  1436,   672,
     833,    -1,    -1,   103,   987,   231,   900,  1443,   991,   367,
    1436,   673,   635,  1004,   636,   992,    -1,    -1,   103,   988,
     231,   900,  1443,   990,   367,  1436,   674,   635,  1004,   636,
     993,    -1,    -1,   103,   989,   231,   900,  1443,   990,   367,
    1436,   675,   635,  1004,   636,   994,    -1,    -1,   103,   112,
     900,  1443,   676,   894,    -1,    -1,   103,   677,  1549,    -1,
     103,   587,   694,  1509,    -1,   103,   279,   206,   796,    -1,
     103,   537,   793,    -1,   103,   678,    -1,   477,  1445,   190,
     115,   616,  1445,   373,   635,   679,   636,    -1,   680,    -1,
     679,   637,   680,    -1,   587,  1440,    -1,   217,  1440,    -1,
     112,  1440,    -1,   383,  1440,    -1,   394,  1440,    -1,   495,
    1440,    -1,   401,  1266,    -1,    -1,  1138,   169,   900,   695,
     682,   367,   466,   683,   688,   685,   690,   145,   691,    -1,
      -1,   170,  1144,  1236,   684,   686,   687,    -1,    23,  1144,
      -1,    -1,   154,    -1,   139,   367,   489,    -1,   139,    -1,
      -1,   515,  1144,    -1,    -1,   157,  1144,    -1,    -1,   689,
      -1,   367,    86,   405,    -1,   367,    86,   356,   405,    -1,
      -1,    82,  1440,    -1,    -1,   692,   693,    -1,   742,    -1,
     744,    -1,   740,    -1,   761,    -1,   779,    -1,   781,    -1,
     776,    -1,   746,    -1,   748,    -1,   749,    -1,   750,    -1,
     751,    -1,   753,    -1,    -1,  1443,   643,  1443,    -1,  1443,
      -1,    -1,   696,   698,    -1,    -1,   697,   699,    -1,    82,
    1440,    -1,   257,   511,    -1,   358,   511,    -1,    96,   511,
      -1,   420,   511,   115,    -1,   333,   511,   115,    -1,   700,
      -1,   698,    -1,   137,    -1,  1150,   137,    -1,   511,   470,
     130,    -1,   511,   470,   244,    -1,    -1,    51,   695,   702,
     703,    -1,    -1,   635,   704,   636,    -1,    -1,   705,    -1,
     705,   637,  1144,    -1,  1144,    -1,    -1,   707,    -1,   707,
     637,   709,    -1,   709,    -1,    -1,  1443,   708,   958,    -1,
      -1,   711,    -1,   711,   637,   712,    -1,   712,    -1,   713,
     708,  1443,   958,    -1,    -1,   245,    -1,   382,    -1,   236,
      -1,    -1,   714,   739,   641,    -1,   739,   641,    -1,   715,
     739,   641,    -1,    -1,   716,   717,   641,    -1,    -1,   128,
     737,   718,   958,   738,    -1,   128,  1443,    89,   191,   725,
      -1,    -1,   128,   722,   209,   191,   719,   723,   739,    -1,
     128,  1443,   109,   191,   720,    -1,    -1,   721,  1121,    -1,
     174,    -1,    98,    -1,   724,    -1,   723,   637,   724,    -1,
     728,    -1,  1266,    -1,   726,    -1,   503,   727,  1441,    -1,
      -1,   596,    -1,   725,    -1,  1443,    -1,   504,    -1,  1150,
     192,    -1,   502,    -1,   486,   730,   732,    -1,  1443,    -1,
     726,    -1,    -1,   730,    -1,    -1,   479,   733,    -1,   735,
     162,   734,    -1,   733,   637,   735,   162,   734,    -1,  1427,
      -1,  1175,    -1,  1432,    -1,    66,    -1,   524,    -1,    93,
      -1,    95,    -1,    94,    -1,    56,    -1,   467,    -1,   542,
      -1,    81,    -1,   110,    -1,   324,    -1,   341,    -1,   449,
     731,   732,    -1,  1443,    -1,   737,   637,  1443,    -1,    -1,
     129,  1144,    -1,   742,    -1,   744,    -1,   740,    -1,   761,
      -1,   779,    -1,   781,    -1,   776,    -1,   746,    -1,   748,
      -1,   749,    -1,   750,    -1,   751,    -1,   753,    -1,    -1,
     226,   741,   756,   156,   226,    -1,    -1,   743,   650,    -1,
      -1,   455,   745,  1144,    -1,    -1,   747,   785,    -1,   263,
    1444,    -1,   251,  1444,    -1,   371,  1443,    -1,    -1,   182,
     754,  1443,   242,   752,   755,    -1,    69,  1443,    -1,    -1,
     352,   193,    -1,   193,    -1,  1443,    -1,   755,   637,  1443,
      -1,    -1,    -1,    -1,   757,  1144,   549,   758,   715,   759,
     760,    -1,    -1,   153,   756,    -1,   152,   715,    -1,   762,
      -1,   765,    -1,    -1,    -1,    54,   763,  1144,   764,   767,
     775,   156,    54,    -1,    -1,    54,   766,   768,   775,   156,
      54,    -1,   769,    -1,   767,   769,    -1,   772,    -1,   768,
     772,    -1,    -1,    -1,   609,   770,  1144,   771,   549,   715,
      -1,    -1,    -1,   609,   773,  1144,   774,   549,   715,    -1,
      -1,   152,   715,    -1,    -1,  1444,   644,   777,   785,   778,
      -1,    -1,  1444,    -1,    -1,  1444,   644,   780,   783,   778,
      -1,    -1,   782,   783,    -1,    -1,    32,   784,   716,   714,
     156,    -1,   285,   715,   156,   285,    -1,    -1,    -1,   611,
     786,  1144,   145,   787,   715,   156,   611,    -1,    -1,   444,
     715,   583,   788,  1144,   156,   444,    -1,    31,    -1,     8,
      -1,   238,    -1,   584,    -1,   133,    -1,   818,   820,    -1,
     818,    58,   815,   799,    -1,   818,     6,   815,   794,   803,
      -1,    -1,   590,   279,   206,  1443,    -1,   818,     6,   815,
     806,    -1,   818,   146,   815,   806,    -1,   819,   798,   809,
      -1,   819,   798,   812,    -1,     6,   816,    -1,     6,   817,
      -1,    -1,   800,   801,    -1,   802,    -1,   801,   802,    -1,
     801,   637,   802,    -1,   821,    -1,   822,    -1,   823,    -1,
     804,    -1,   805,    -1,   804,   805,    -1,   804,   637,   805,
      -1,   821,    -1,   822,    -1,   823,    -1,   824,    -1,   827,
      -1,   829,    -1,   831,    -1,   828,    -1,   807,    -1,   808,
      -1,   807,   808,    -1,   807,   637,   808,    -1,   821,    -1,
     822,    -1,   823,    -1,   829,    -1,   831,    -1,   810,    -1,
     811,    -1,   810,   811,    -1,   810,   637,   811,    -1,   821,
      -1,   825,    -1,   826,    -1,   827,    -1,   829,    -1,   831,
      -1,   828,    -1,   813,    -1,   814,    -1,   813,   814,    -1,
     813,   637,   814,    -1,   821,    -1,   829,    -1,   831,    -1,
     114,  1440,    -1,   573,  1440,    -1,   427,  1440,    -1,  1443,
      -1,  1443,    -1,   421,    -1,   423,    -1,   356,     4,    -1,
     234,  1319,   832,    -1,    25,  1319,   832,    -1,   313,  1319,
     832,    -1,   177,  1319,   832,    -1,   574,  1319,   832,    -1,
     428,  1319,   832,    -1,   353,  1319,  1267,    -1,    82,  1319,
    1440,    -1,  1360,   160,  1319,   908,    -1,    -1,   831,    -1,
     606,    -1,   359,    -1,  1267,    -1,   223,    -1,    -1,   635,
     914,   636,   834,   901,   840,   837,    -1,   901,   840,   837,
      -1,    -1,   635,   890,   636,   835,  1534,    -1,   836,    -1,
     268,  1436,    -1,   635,   268,  1436,   636,    -1,    -1,    -1,
    1407,   893,   890,   838,  1531,    -1,    -1,  1407,   893,   635,
     890,   636,   839,  1534,    -1,   841,    -1,    -1,   842,    -1,
      -1,   393,   844,   843,   847,    -1,    -1,    -1,   393,   846,
     847,    -1,    48,   848,   858,   859,   866,    -1,   850,   255,
     851,   635,   852,   636,    -1,    -1,   850,   211,   849,   856,
      -1,   419,   856,    -1,   419,   855,    -1,   273,   856,    -1,
     273,   855,    -1,    -1,   270,    -1,    -1,    11,   162,  1267,
      -1,    -1,   853,    -1,   854,    -1,   853,   637,   854,    -1,
    1443,    -1,    74,   635,   852,   636,    -1,   635,  1138,   864,
    1139,   636,    -1,   635,  1138,   864,  1139,   636,    -1,    -1,
     392,  1267,    -1,    -1,    -1,   528,    48,   850,   211,   857,
     860,   865,    -1,    -1,   528,    48,   850,   255,   851,   635,
     862,   636,   861,   865,    -1,   863,    -1,   862,   637,   863,
      -1,  1443,    -1,  1147,    -1,    -1,   527,  1267,    -1,    -1,
     635,   867,   636,    -1,   868,    -1,   867,   637,   868,    -1,
      -1,   393,   869,   870,   871,   887,   882,    -1,  1443,    -1,
      -1,    -1,   595,   265,   548,   872,   874,    -1,    -1,   595,
     245,   873,   875,    -1,   317,    -1,   877,    -1,   877,    -1,
     635,   876,   636,    -1,   877,    -1,   876,   637,   877,    -1,
      -1,    -1,   635,   878,   880,   879,   636,    -1,   881,    -1,
     880,   637,   881,    -1,   317,    -1,  1147,    -1,    -1,   635,
     883,   636,    -1,   884,    -1,   883,   637,   884,    -1,    -1,
     528,   885,   886,   887,    -1,  1445,    -1,    -1,   888,    -1,
     888,   889,    -1,   889,    -1,   537,  1319,  1445,    -1,  1360,
     160,  1319,   908,    -1,    90,  1319,  1440,    -1,   353,  1319,
    1267,    -1,   312,  1319,  1269,    -1,   330,  1319,  1269,    -1,
     115,   138,  1319,  1440,    -1,   231,   138,  1319,  1440,    -1,
      82,  1319,  1440,    -1,    -1,    -1,   471,   891,  1132,  1136,
     892,   912,    -1,    -1,    19,    -1,    -1,   895,    -1,   896,
      -1,   895,   896,    -1,   907,    -1,   906,    -1,    -1,   898,
      -1,   899,    -1,   899,   898,    -1,   543,    -1,    -1,   226,
    1150,   173,    -1,    -1,   903,    -1,   904,    -1,   904,   902,
      -1,   904,    -1,   904,   903,    -1,   904,   637,   903,    -1,
     160,  1319,   908,    -1,   312,  1319,  1268,    -1,   330,  1319,
    1268,    -1,    28,  1319,  1266,    -1,   394,  1319,  1440,    -1,
      82,  1319,  1440,    -1,    26,  1319,  1268,    -1,   384,  1319,
    1266,    -1,   384,  1319,   129,    -1,    63,  1319,  1266,    -1,
     541,  1319,  1266,    -1,   386,  1319,  1272,    -1,   132,  1319,
    1266,    -1,   462,  1319,   910,    -1,    -1,   578,  1319,   905,
     635,  1381,   636,    -1,   906,    -1,   907,    -1,   239,  1319,
     911,    -1,   115,   138,  1319,  1440,    -1,   231,   138,  1319,
    1440,    -1,   537,  1443,    -1,   521,   141,    -1,   521,   322,
      -1,    90,  1319,  1440,    -1,   254,  1319,  1266,    -1,   560,
    1319,  1272,    -1,  1439,  1318,  1440,    -1,  1439,  1318,  1443,
      -1,  1439,  1318,  1269,    -1,  1439,  1318,   129,    -1,   970,
     961,  1319,   963,    -1,   970,    72,  1319,   969,    -1,  1445,
      -1,  1445,    -1,   129,    -1,   185,    -1,   150,    -1,    87,
      -1,   429,    -1,    85,    -1,   385,    -1,   358,    -1,   184,
      -1,   258,    -1,  1259,    -1,  1131,  1135,    -1,   523,    -1,
     424,    -1,   127,    -1,   243,    -1,   915,    -1,   916,    -1,
     915,   637,   916,    -1,   917,    -1,   918,    -1,   927,   923,
      -1,   927,   976,    -1,    -1,   982,  1007,   991,   635,  1004,
     636,   919,   992,    -1,    -1,   988,   985,  1007,   990,   635,
    1004,   636,   920,   993,    -1,    -1,   989,   985,  1007,   990,
     635,  1004,   636,   921,   994,    -1,    -1,   925,   983,  1006,
     991,   635,  1004,   636,   922,   992,    -1,   925,   190,   255,
    1007,   635,  1004,   636,   976,    -1,   925,   924,    -1,    -1,
     924,    -1,    64,   635,  1144,   636,    -1,    -1,   926,    -1,
      92,  1006,    -1,    -1,  1435,   928,   929,    -1,   937,   955,
      -1,   937,   930,    19,   635,   936,   636,   931,   932,    -1,
      -1,   199,    14,    -1,    -1,   605,    -1,   395,    -1,    -1,
     933,    -1,   933,   934,    -1,   934,    -1,   579,    -1,   579,
     255,    -1,    82,  1440,    -1,   389,   635,   936,   636,    -1,
    1138,  1144,  1139,    -1,   945,   953,   949,    -1,   946,   954,
     949,    -1,   187,   947,   949,    -1,    40,    -1,    40,   952,
      -1,    45,    -1,    44,    -1,   941,   952,   973,    -1,   941,
     973,    -1,   942,   952,   974,    -1,   942,   974,    -1,    35,
     952,    -1,    35,    -1,   943,   952,   973,    -1,   944,   952,
     974,    -1,   597,   952,    -1,   623,   953,   949,    -1,   119,
      -1,   553,   953,    -1,   550,   953,    -1,   116,   953,    -1,
     554,    -1,    42,   953,    -1,   940,    -1,   318,    -1,   281,
      -1,   284,   597,    -1,   284,   943,   973,    -1,   556,   973,
      -1,   547,   953,   973,    -1,   320,   973,    -1,   282,   973,
      -1,   127,   947,   949,    -1,   363,   947,   949,    -1,   185,
     947,   949,    -1,    -1,   161,   938,   635,  1009,   636,   973,
      -1,    -1,   479,   939,   635,  1009,   636,   973,    -1,   284,
     973,    -1,   475,    -1,   201,    -1,   200,    -1,   399,    -1,
     338,    -1,   272,    -1,   337,    -1,   400,    -1,   339,    -1,
      61,    -1,   347,    -1,   344,    61,    -1,   941,   601,    -1,
     598,    -1,   344,   598,    -1,   364,    -1,   347,   598,    -1,
     344,    61,   601,    -1,   347,   601,    -1,   243,    -1,   555,
      -1,   493,    -1,   319,    -1,    34,    -1,   424,    -1,   144,
      -1,   144,   403,    -1,    -1,   952,    -1,   948,    -1,   635,
     362,   637,   362,   636,    -1,    -1,   950,    -1,   950,   951,
      -1,   951,    -1,   487,    -1,   582,    -1,   624,    -1,   635,
     283,   636,    -1,   635,   569,   636,    -1,   635,   126,   636,
      -1,   635,   362,   636,    -1,    -1,   952,    -1,    -1,   948,
      -1,    -1,   956,    -1,   956,   957,    -1,   957,    -1,   361,
      -1,  1150,   361,    -1,   129,   959,    -1,   367,   584,   357,
    1141,    -1,    26,    -1,   475,   129,   596,    -1,   975,   255,
      -1,   579,    -1,   579,   255,    -1,    82,  1440,    -1,    72,
     967,    -1,  1439,  1318,  1440,    -1,  1439,  1318,  1443,    -1,
    1439,  1318,  1269,    -1,  1439,  1318,   129,    -1,   937,   968,
      -1,   357,  1141,    -1,  1426,    -1,   214,    -1,   215,    -1,
      61,   479,    -1,    60,    -1,  1445,    -1,    35,    -1,   962,
      -1,   129,    -1,    -1,   961,   963,    -1,  1445,    -1,    35,
      -1,   965,    -1,   129,    -1,  1445,    -1,    -1,    72,   969,
      -1,   967,    -1,   129,    -1,    -1,   129,    -1,    21,    -1,
      35,    21,    -1,    21,    35,    -1,   576,    -1,   576,    35,
      -1,    35,   576,    -1,    -1,   971,    -1,   972,    -1,    49,
      -1,   961,   962,   974,    -1,    35,    -1,    35,   961,   962,
      -1,    -1,    35,    -1,    -1,   407,    -1,   430,  1436,   977,
     979,   980,    -1,    -1,   635,   978,   636,    -1,   978,   637,
    1443,    -1,  1443,    -1,    -1,   309,   194,    -1,   309,   390,
      -1,   309,   488,    -1,    -1,   367,   584,   981,    -1,   367,
     133,   981,    -1,   367,   584,   981,   367,   133,   981,    -1,
     367,   133,   981,   367,   584,   981,    -1,   452,    -1,    52,
      -1,   479,   361,    -1,   358,     5,    -1,   479,   129,    -1,
     984,    -1,   407,   255,    -1,   579,   985,    -1,   255,    -1,
     231,    -1,    -1,   984,    -1,   253,    -1,   231,    -1,   230,
      -1,    -1,   579,    -1,   195,    -1,   500,    -1,    -1,   990,
      -1,   990,   998,    -1,    -1,   995,    -1,    -1,   997,    -1,
      -1,   996,    -1,  1000,    -1,   995,  1000,    -1,  1001,    -1,
     996,  1001,    -1,  1002,    -1,   997,  1002,    -1,   591,  1003,
      -1,   567,  1003,    -1,   254,  1319,  1266,    -1,    82,  1440,
      -1,  1439,  1318,  1440,    -1,  1439,  1318,  1443,    -1,  1439,
    1318,  1269,    -1,  1439,  1318,   129,    -1,   999,    -1,   998,
      -1,   999,    -1,   999,    -1,   612,   388,  1439,    -1,    47,
      -1,   464,    -1,   211,    -1,  1004,   637,  1005,  1257,    -1,
    1005,  1257,    -1,  1443,    -1,  1443,   635,   362,   636,    -1,
      -1,  1435,    -1,   900,  1006,    -1,    -1,   643,  1443,    -1,
    1424,    -1,  1009,   637,  1424,    -1,    -1,    13,  1045,   540,
    1436,  1011,  1022,    -1,    -1,    13,   112,  1021,  1012,   895,
      -1,    13,   112,  1443,   585,   115,   138,   343,    -1,    -1,
      13,   409,   695,  1013,   696,    -1,    -1,    13,   196,   695,
    1014,   696,    -1,    -1,    13,  1557,  1552,  1015,  1559,    -1,
      -1,    13,  1552,  1016,  1559,    -1,    -1,    13,  1552,   169,
     695,  1017,  1018,  1019,   685,   690,  1020,    -1,    13,   537,
     795,    -1,    13,   279,   206,   797,    -1,    13,   537,   792,
      -1,    13,   537,   791,    -1,    13,   477,  1445,   373,   635,
     679,   636,    -1,    -1,   367,   466,   683,    -1,   689,    -1,
     367,   466,   683,   689,    -1,    -1,   440,   557,   695,    -1,
      -1,   145,   691,    -1,    -1,  1443,    -1,    -1,   140,   537,
      -1,   229,   537,    -1,  1037,   841,    -1,  1037,  1026,    -1,
    1026,    -1,   842,    -1,  1028,    -1,   146,   393,  1297,  1035,
      -1,   425,   393,  1096,  1027,    -1,    -1,   372,   393,  1096,
    1027,  1023,  1096,    -1,    15,   393,  1096,  1027,    -1,    -1,
      64,   393,  1027,  1024,  1091,    -1,    -1,   442,   393,  1096,
    1027,  1025,  1072,    -1,    70,   393,  1096,  1267,    -1,   565,
     393,  1027,    -1,  1031,    -1,   439,   391,    -1,    12,    -1,
    1035,    -1,    -1,     6,   393,   900,  1096,  1029,  1030,    -1,
      -1,   635,   867,   636,    -1,   392,  1267,    -1,    -1,   441,
     393,  1096,  1032,  1033,    -1,    -1,    -1,  1035,  1034,   242,
     635,   867,   636,    -1,  1036,    -1,  1035,   637,  1036,    -1,
    1443,    -1,  1039,    -1,  1037,   637,  1039,    -1,     6,  1043,
     900,    -1,  1038,   917,  1051,    -1,     6,   918,    -1,  1038,
     635,   914,   636,    -1,    -1,    58,  1043,  1297,  1435,  1040,
     927,  1051,    -1,    -1,    -1,   334,  1043,  1297,  1435,  1041,
     929,  1042,  1051,    -1,   146,  1043,  1297,  1435,  1050,    -1,
     146,   190,   255,  1297,  1006,    -1,   146,   407,   255,    -1,
     146,   984,  1297,  1435,    -1,   139,   253,    -1,   154,   253,
      -1,    13,  1043,  1435,   479,   129,  1426,    -1,    13,  1043,
    1435,   146,   129,    -1,   440,  1052,  1436,    -1,   100,   557,
     961,   963,   968,    -1,   902,    -1,   189,    -1,  1250,    -1,
      -1,    80,    -1,    -1,   227,    -1,    -1,  1046,  1047,    -1,
      -1,  1048,    -1,  1048,  1049,    -1,  1049,    -1,   227,    -1,
     370,    -1,    -1,   452,    -1,    52,    -1,    -1,     8,  1443,
      -1,   184,    -1,    -1,   557,    -1,   162,    -1,    19,    -1,
      -1,   516,   489,   669,  1061,  1054,  1065,    -1,    -1,   516,
      12,   490,  1061,  1055,    -1,   520,   489,   669,  1061,    -1,
     520,    12,   490,  1061,    -1,    -1,   489,   669,   516,  1061,
    1056,  1065,    -1,   489,   669,   520,  1061,    -1,   516,   559,
    1058,    -1,    -1,  1059,    -1,  1060,    -1,  1059,   637,  1060,
      -1,   612,    91,   494,    -1,   422,   369,    -1,   422,   617,
      -1,    -1,  1062,  1063,    -1,  1064,    -1,  1063,   637,  1064,
      -1,    -1,   512,    -1,   436,    -1,    -1,   583,  1066,    -1,
     583,   289,   162,  1440,    -1,   668,    -1,  1066,   637,   668,
      -1,    -1,    63,  1478,  1068,  1293,  1069,    -1,    -1,   418,
      -1,   176,    -1,    -1,   442,  1096,  1478,  1071,  1293,  1072,
      -1,    -1,  1073,    -1,  1074,    -1,  1074,  1073,    -1,   418,
      -1,   176,    -1,   589,    -1,    -1,    15,  1096,  1478,  1076,
    1077,    -1,  1078,    -1,  1077,   637,  1078,    -1,  1294,  1079,
      -1,    -1,   395,   191,  1080,    -1,    12,    -1,    74,  1081,
     230,  1083,    -1,    12,    -1,    -1,   635,  1082,  1085,   636,
      -1,    12,    -1,    -1,   635,  1084,  1086,   636,    -1,    -1,
    1443,    -1,  1085,   637,  1443,    -1,    -1,  1087,    -1,  1086,
     637,  1087,    -1,  1443,    -1,   407,    -1,    36,  1440,    -1,
      -1,    64,  1478,  1090,  1293,  1091,    -1,    -1,  1092,    -1,
    1093,    -1,  1093,  1092,    -1,   418,    -1,   180,    -1,   321,
      -1,   176,    -1,    59,    -1,   191,   585,    -1,    -1,   372,
    1096,  1478,  1095,  1293,    -1,    -1,   360,    -1,   275,    -1,
      -1,   440,  1478,  1098,  1100,    -1,   440,   587,   694,  1099,
      -1,  1446,   557,  1446,    -1,  1099,   637,  1446,   557,  1446,
      -1,  1101,    -1,  1100,   637,  1101,    -1,  1436,   557,  1436,
      -1,    -1,    50,   231,  1103,  1104,   245,  1108,    -1,  1105,
      -1,  1107,    -1,  1106,    -1,  1105,   637,  1106,    -1,  1436,
    1117,    -1,  1436,  1115,  1117,    -1,  1443,    -1,   129,    -1,
      -1,   274,   231,   242,    50,  1110,  1111,    -1,  1114,    -1,
    1112,    -1,  1113,    -1,  1112,   637,  1113,    -1,  1436,  1117,
    1120,    -1,  1436,  1115,  1117,  1120,    -1,    -1,   393,   844,
    1116,   635,  1027,   636,    -1,    -1,  1118,  1119,    -1,    -1,
     984,   635,  1232,   636,    -1,    -1,   227,   262,    -1,  1122,
      -1,   471,  1125,    -1,   635,  1123,   636,  1534,    -1,   471,
    1127,    -1,   635,  1123,   636,    -1,   471,  1211,    -1,   635,
    1124,   636,    -1,    -1,  1127,  1126,  1531,    -1,    -1,    -1,
    1128,  1132,  1136,  1129,  1130,  1135,    -1,  1253,  1259,    -1,
    1282,    -1,  1131,    -1,  1282,  1131,    -1,  1131,  1282,    -1,
     193,  1193,  1242,  1247,  1244,  1253,  1259,  1273,    -1,   193,
     147,  1242,  1259,    -1,    -1,  1133,    -1,  1133,  1134,    -1,
    1134,    -1,  1548,    -1,   509,    -1,   507,    -1,    -1,   191,
     584,    -1,   278,   245,   481,   332,    -1,  1136,   637,  1137,
      -1,  1137,    -1,   630,    -1,  1138,  1430,  1139,    -1,  1138,
    1144,  1139,  1140,    -1,    -1,    -1,    -1,    19,  1443,    -1,
      19,  1440,    -1,  1443,    -1,  1440,    -1,    -1,   635,   636,
      -1,   635,  1267,   636,    -1,    -1,   635,   636,    -1,   635,
    1267,   636,    -1,    -1,   635,   636,    -1,  1144,  1148,  1144,
      -1,  1144,   621,  1144,    -1,  1144,  1149,  1144,    -1,   356,
    1144,    -1,  1145,   248,   564,    -1,  1145,   248,  1150,   564,
      -1,  1145,   248,   179,    -1,  1145,   248,  1150,   179,    -1,
    1145,   248,   580,    -1,  1145,   248,  1150,   580,    -1,  1145,
      -1,  1145,   248,   361,    -1,  1145,   248,  1150,   361,    -1,
    1145,   163,  1146,    -1,  1145,  1152,  1146,    -1,  1145,  1152,
    1153,   635,  1543,   636,    -1,  1146,    -1,  1147,   245,   635,
    1543,   636,    -1,  1147,  1150,   245,   635,  1543,   636,    -1,
    1147,   245,   635,  1144,   636,    -1,  1147,   245,   635,  1144,
     637,  1186,   636,    -1,  1147,  1150,   245,   635,  1144,   636,
      -1,  1147,  1150,   245,   635,  1144,   637,  1186,   636,    -1,
    1147,    33,  1147,    17,  1146,    -1,  1147,  1150,    33,  1147,
      17,  1146,    -1,  1147,   498,   268,  1147,    -1,  1147,   268,
    1158,  1246,    -1,  1147,  1150,   268,  1158,  1246,    -1,  1147,
     431,  1147,    -1,  1147,  1150,   431,  1147,    -1,  1147,    -1,
    1147,   626,  1147,    -1,  1147,   627,  1147,    -1,  1147,   482,
    1147,    -1,  1147,   483,  1147,    -1,  1147,   629,  1147,    -1,
    1147,   628,  1147,    -1,  1147,   629,   241,  1144,  1236,    -1,
    1147,   628,   241,  1144,  1236,    -1,  1147,   630,  1147,    -1,
    1147,   631,  1147,    -1,  1147,   632,  1147,    -1,  1147,   143,
    1147,    -1,  1147,   335,  1147,    -1,  1147,   633,  1147,    -1,
    1158,    -1,   379,    -1,   376,    -1,    17,    -1,    16,    -1,
     356,    -1,   355,    -1,   638,    -1,   355,    -1,   162,    -1,
     197,    -1,   208,    -1,   260,    -1,   287,    -1,   349,    -1,
      12,    -1,    18,    -1,    -1,    19,  1155,    -1,   243,    -1,
     582,   243,    -1,   144,    -1,   424,    -1,   187,    -1,   127,
     947,    -1,   941,   973,    -1,   942,    -1,   119,    -1,   553,
     953,    -1,   116,   953,    -1,  1144,   637,  1144,  1154,    -1,
    1156,    -1,  1157,   637,  1156,    -1,  1432,    -1,  1159,    -1,
    1160,    -1,  1163,    -1,  1161,    -1,  1158,    72,  1445,    -1,
    1427,    -1,  1425,    -1,  1175,    -1,  1171,    -1,  1158,   378,
    1158,    -1,   629,  1158,    -1,   628,  1158,    -1,   634,  1158,
      -1,  1151,  1158,    -1,   635,  1543,   636,    -1,   635,  1144,
     636,    -1,   635,  1144,   637,  1186,   636,    -1,   463,   635,
    1144,   637,  1186,   636,    -1,   173,   635,  1543,   636,    -1,
     639,  1443,  1144,   640,    -1,   309,  1187,     9,   635,  1147,
    1165,   636,    -1,    35,  1158,    -1,    55,   635,  1144,    19,
    1183,   636,    -1,    54,  1189,  1191,  1190,   156,    -1,   100,
     635,  1144,   637,  1183,   636,    -1,   100,   635,  1144,   591,
     962,   636,    -1,   129,   635,  1432,   636,    -1,   595,   635,
    1433,   636,    -1,   241,  1144,  1236,   629,  1144,    -1,    61,
     635,  1186,   636,    -1,    61,   635,  1186,   591,   962,   636,
      -1,   107,  1143,    -1,   119,   635,  1144,   636,    -1,   124,
     635,  1144,   636,    -1,   222,   635,  1144,   636,    -1,   238,
     635,  1144,   637,  1144,   637,  1144,   637,  1144,   636,    -1,
     241,   635,  1144,   637,  1144,   636,    -1,   241,   635,  1144,
     637,  1144,   637,  1186,   636,    -1,   264,   635,  1144,   637,
    1144,   636,    -1,   329,   635,  1144,   636,    -1,   336,   635,
    1144,   636,    -1,   457,   635,  1144,   637,  1144,   636,    -1,
     469,   635,  1144,   636,    -1,   553,   635,  1144,   636,    -1,
     550,   635,  1144,   636,    -1,   550,   635,  1144,   637,  1144,
     636,    -1,   563,   635,  1144,   636,    -1,   563,   635,   261,
    1144,   193,  1144,   636,    -1,   563,   635,   558,  1144,   193,
    1144,   636,    -1,   563,   635,    46,  1144,   193,  1144,   636,
      -1,   563,   635,   261,   193,  1144,   636,    -1,   563,   635,
     558,   193,  1144,   636,    -1,   563,   635,    46,   193,  1144,
     636,    -1,   563,   635,  1144,   193,  1144,   636,    -1,   587,
     635,   636,    -1,   623,   635,  1144,   636,    -1,     7,   635,
    1144,   637,  1144,   636,    -1,     7,   635,  1144,   637,   241,
    1144,  1236,   636,    -1,   106,  1143,    -1,   111,  1142,    -1,
     117,   635,  1144,   637,   241,  1144,  1236,   636,    -1,   118,
     635,  1144,   637,   241,  1144,  1236,   636,    -1,   178,   635,
    1236,   193,  1144,   636,    -1,   202,   635,  1238,   637,  1144,
     636,    -1,   357,  1142,    -1,   402,   635,  1147,   245,  1144,
     636,    -1,   525,   635,  1144,   637,  1144,   636,    -1,   525,
     635,  1144,   637,   241,  1144,  1236,   636,    -1,   529,   635,
    1144,   637,  1144,   637,  1144,   636,    -1,   529,   635,  1144,
     637,  1144,   636,    -1,   529,   635,  1144,   193,  1144,   191,
    1144,   636,    -1,   529,   635,  1144,   193,  1144,   636,    -1,
     535,  1142,    -1,   551,   635,  1237,   637,  1144,   637,  1144,
     636,    -1,   552,   635,  1237,   637,  1144,   637,  1144,   636,
      -1,   592,  1143,    -1,   594,  1142,    -1,   593,  1142,    -1,
      75,   635,  1144,   637,  1157,   636,    -1,    78,   635,  1144,
     637,  1186,   636,    -1,    76,   635,  1144,   636,    -1,    77,
     635,  1157,   636,    -1,    79,   635,  1144,   637,  1144,    19,
    1183,   636,    -1,    21,   635,  1144,   636,    -1,    60,   635,
    1144,   636,    -1,    70,   635,  1186,   636,    -1,    73,   635,
    1144,   636,    -1,   112,   635,   636,    -1,   226,   635,  1144,
     637,  1144,   637,  1144,   636,    -1,   259,   635,  1186,   636,
      -1,   325,   635,  1144,   636,    -1,   335,   635,  1144,   637,
    1144,   636,    -1,   366,   635,  1144,   636,    -1,   394,   635,
    1144,   636,    -1,   416,   635,  1144,   636,    -1,   444,   635,
    1144,   637,  1144,   636,    -1,   445,   635,  1144,   637,  1144,
     637,  1144,   636,    -1,   565,   635,  1144,   637,  1144,   636,
      -1,   608,   635,  1144,   636,    -1,   608,   635,  1144,   637,
    1144,   636,    -1,  1162,    -1,    96,   635,  1144,   637,  1144,
     636,    -1,   200,   635,  1186,   636,    -1,   272,   635,  1186,
     636,    -1,   337,   635,  1186,   636,    -1,   338,   635,  1186,
     636,    -1,   339,   635,  1186,   636,    -1,   399,   635,  1144,
     637,  1144,   636,    -1,   400,   635,  1186,   636,    -1,    -1,
    1439,   635,  1164,  1168,   636,    -1,  1443,   643,  1443,   635,
    1185,   636,    -1,  1166,  1167,    -1,   245,    44,   332,    -1,
      -1,   245,   345,   257,   332,    -1,    -1,   612,   417,   175,
      -1,    -1,  1169,    -1,  1170,    -1,  1169,   637,  1170,    -1,
    1138,  1144,  1139,  1140,    -1,    29,   635,  1181,   636,    -1,
      29,   635,   142,  1181,   636,    -1,    38,   635,  1181,   636,
      -1,    39,   635,  1181,   636,    -1,    41,   635,  1181,   636,
      -1,   101,   635,  1241,   630,   636,    -1,   101,   635,  1181,
     636,    -1,    -1,    -1,   101,   635,   142,  1172,  1186,  1173,
     636,    -1,   331,   635,  1181,   636,    -1,   331,   635,   142,
    1181,   636,    -1,   314,   635,  1181,   636,    -1,   314,   635,
     142,  1181,   636,    -1,   519,   635,  1181,   636,    -1,   600,
     635,  1181,   636,    -1,   518,   635,  1181,   636,    -1,   602,
     635,  1181,   636,    -1,   530,   635,  1181,   636,    -1,   530,
     635,   142,  1181,   636,    -1,    -1,   207,   635,  1178,  1174,
    1186,  1180,  1179,   636,    -1,    -1,   642,  1176,  1177,    -1,
    1445,   480,  1144,    -1,  1445,    -1,   642,  1465,  1445,  1008,
      -1,    -1,   142,    -1,    -1,   473,  1424,    -1,    -1,  1254,
      -1,    -1,  1241,  1182,  1144,    -1,    35,   953,    -1,    61,
     953,   973,    -1,   347,   953,    -1,   243,    -1,   487,    -1,
     487,   243,    -1,   582,    -1,   582,   243,    -1,   119,    -1,
     553,   953,    -1,   116,   953,    -1,   127,   947,    -1,    -1,
     144,  1184,   954,    -1,    -1,  1186,    -1,  1144,    -1,  1186,
     637,  1144,    -1,  1188,    -1,   635,  1188,   636,    -1,  1432,
      -1,  1188,   637,  1432,    -1,    -1,  1144,    -1,    -1,   152,
    1144,    -1,   609,  1144,   549,  1144,    -1,  1191,   609,  1144,
     549,  1144,    -1,  1205,    -1,  1196,    -1,  1195,    -1,  1192,
      -1,   639,  1443,  1192,   640,    -1,  1194,    -1,  1195,   637,
    1194,    -1,  1192,  1204,  1192,    -1,    -1,  1192,  1204,  1192,
     367,  1197,  1144,    -1,    -1,  1192,  1204,  1192,   591,  1198,
     635,  1235,   636,    -1,  1192,   345,  1203,  1205,    -1,    -1,
    1192,   264,  1221,   252,  1192,   367,  1199,  1144,    -1,    -1,
    1192,   264,  1221,   252,  1205,  1200,   591,   635,  1235,   636,
      -1,  1192,   345,   264,  1221,   252,  1205,    -1,    -1,  1192,
     457,  1221,   252,  1192,   367,  1201,  1144,    -1,    -1,  1192,
     457,  1221,   252,  1205,  1202,   591,   635,  1235,   636,    -1,
    1192,   345,   457,  1221,   252,  1205,    -1,   252,    -1,   235,
     252,    -1,   522,    -1,  1203,    -1,   104,   252,    -1,    -1,
    1206,  1436,  1240,  1230,    -1,  1220,  1219,  1216,    -1,   635,
    1219,  1207,   636,  1240,    -1,  1214,  1535,    -1,    -1,    -1,
    1207,   578,  1539,  1208,  1540,  1209,  1535,    -1,  1211,    -1,
      -1,    -1,  1212,  1546,  1136,  1213,   912,  1135,    -1,    -1,
    1219,  1215,  1195,    -1,    -1,    -1,  1217,  1132,  1136,  1218,
     912,    -1,    -1,   471,    -1,    -1,   380,    -1,    -1,   191,
     252,    -1,   191,   377,    48,    -1,   191,   206,    48,    -1,
     189,    -1,   227,    -1,    -1,  1223,   984,  1222,  1225,   635,
    1234,   636,    -1,    -1,   590,   984,  1222,  1226,   635,  1232,
     636,    -1,  1224,    -1,  1227,  1224,    -1,    -1,    -1,  1229,
    1227,    -1,    -1,  1231,  1228,    -1,    -1,  1234,    -1,  1443,
      -1,   407,    -1,  1233,    -1,  1234,   637,  1233,    -1,  1443,
      -1,  1235,   637,  1443,    -1,  1237,    -1,   120,    -1,   121,
      -1,   122,    -1,   123,    -1,   219,    -1,   220,    -1,   221,
      -1,   327,    -1,   328,    -1,   468,    -1,   622,    -1,   124,
      -1,   608,    -1,   222,    -1,   329,    -1,   336,    -1,   416,
      -1,   469,    -1,   325,    -1,   623,    -1,   119,    -1,   553,
      -1,   116,    -1,   550,    -1,    -1,    19,    -1,   162,    -1,
      -1,  1239,  1443,    -1,    -1,    12,    -1,    -1,    -1,   610,
    1243,  1144,    -1,    -1,    -1,   212,  1245,  1144,    -1,   167,
    1158,    -1,    -1,    -1,   206,    48,  1248,  1249,    -1,  1248,
     637,  1431,  1257,    -1,  1431,  1257,    -1,    -1,   613,    -1,
     614,    -1,   377,    48,  1251,    -1,  1251,   637,  1252,    -1,
    1252,    -1,  1433,  1257,    -1,    -1,  1254,    -1,    -1,   377,
      48,  1255,  1256,    -1,  1256,   637,  1431,  1257,    -1,  1431,
    1257,    -1,    -1,    20,    -1,   134,    -1,    -1,  1260,    -1,
      -1,  1260,    -1,   269,  1261,    -1,   269,  1261,   461,   171,
    1263,    -1,   269,   461,   171,  1263,    -1,  1262,    -1,  1262,
     637,  1262,    -1,  1262,   365,  1262,    -1,  1443,    -1,  1425,
      -1,   569,    -1,   283,    -1,   362,    -1,  1262,    -1,    -1,
     269,  1262,    -1,   269,   461,   171,    -1,   269,  1262,   461,
     171,    -1,   362,    -1,   628,   362,    -1,   628,   283,    -1,
     362,    -1,   214,    -1,   283,    -1,   569,    -1,   126,    -1,
     186,    -1,   362,    -1,   214,    -1,   283,    -1,   569,    -1,
    1270,    -1,   362,    -1,   569,    -1,   283,    -1,   126,    -1,
     186,    -1,   362,    -1,   569,    -1,   214,    -1,   283,    -1,
    1270,    -1,  1271,    -1,   126,    -1,   186,    -1,  1266,    -1,
     129,    -1,    -1,    -1,   409,  1443,  1274,   635,  1275,   636,
      -1,    -1,  1276,    -1,  1276,   637,  1277,    -1,  1277,    -1,
    1138,  1144,  1139,    -1,    -1,  1279,  1280,    -1,  1280,   637,
    1281,    -1,  1281,    -1,   642,  1445,    -1,  1445,    -1,    -1,
     242,  1283,  1284,    -1,    -1,    -1,   381,  1442,  1285,   964,
    1286,  1408,  1411,    -1,   148,  1442,    -1,  1278,    -1,    -1,
     145,  1288,  1186,    -1,    -1,   146,  1298,  1478,  1297,  1290,
    1293,  1050,    -1,    -1,   146,   231,  1297,  1443,   367,  1436,
    1291,    -1,   146,   112,  1297,  1443,    -1,   146,   196,  1297,
    1443,   643,  1443,    -1,   146,   196,  1297,  1443,    -1,   146,
     409,  1297,   695,    -1,   146,   587,   694,  1508,    -1,    -1,
     146,   604,  1297,  1292,  1293,  1050,    -1,   146,   169,  1297,
     695,    -1,   146,   562,  1297,   695,    -1,   146,   537,   818,
     829,   830,    -1,   146,   279,   206,   819,   829,   830,    -1,
     146,   477,  1297,  1445,    -1,  1294,    -1,  1293,   637,  1294,
      -1,  1436,    -1,  1296,    -1,  1295,   637,  1296,    -1,  1437,
      -1,    -1,   226,   173,    -1,    -1,   543,    -1,    -1,    -1,
     238,  1300,  1305,  1044,  1307,  1301,  1309,  1325,    -1,    -1,
      -1,   445,  1303,  1306,  1307,  1304,  1309,    -1,    -1,   286,
      -1,   131,    -1,   216,    -1,  1334,    -1,   131,    -1,   242,
    1308,    -1,  1308,    -1,  1294,    -1,  1312,    -1,   635,   636,
    1312,    -1,   635,  1311,   636,  1312,    -1,    -1,   479,  1310,
    1316,    -1,  1311,   637,  1429,    -1,  1429,    -1,   595,  1315,
      -1,   596,  1315,    -1,    -1,   890,  1313,  1531,    -1,    -1,
     635,   890,   636,  1314,  1534,    -1,  1315,   637,  1320,    -1,
    1320,    -1,  1316,   637,  1317,    -1,  1317,    -1,  1433,  1318,
    1324,    -1,   162,    -1,   480,    -1,    -1,  1318,    -1,    -1,
     635,  1321,  1322,   636,    -1,    -1,  1323,    -1,  1323,   637,
    1324,    -1,  1324,    -1,  1144,    -1,   129,    -1,    -1,    -1,
     367,   149,  1326,   255,   584,  1332,    -1,    -1,    -1,   584,
    1328,  1334,  1044,  1193,   479,  1330,  1329,  1242,  1253,  1264,
      -1,  1330,   637,  1331,    -1,  1331,    -1,  1433,  1318,  1324,
      -1,  1332,   637,  1333,    -1,  1333,    -1,  1433,  1318,  1324,
      -1,    -1,   286,    -1,    -1,   133,  1336,  1344,  1337,    -1,
      -1,   193,  1436,  1338,  1242,  1253,  1264,    -1,    -1,  1341,
    1339,   193,  1193,  1242,    -1,    -1,   193,  1295,  1340,   591,
    1193,  1242,    -1,  1342,    -1,  1341,   637,  1342,    -1,  1443,
    1343,    -1,  1443,   643,  1443,  1343,    -1,    -1,   643,   630,
      -1,    -1,  1345,  1344,    -1,   418,    -1,   286,    -1,   227,
      -1,    -1,   565,  1348,  1347,  1294,    -1,    -1,   540,    -1,
      -1,  1350,    -1,  1351,    -1,  1350,   637,  1351,    -1,   102,
      -1,   322,    -1,    43,   246,    -1,    97,   534,    -1,   385,
     181,    -1,   247,    -1,   533,    -1,   499,    -1,    12,    -1,
      -1,   191,   417,   362,    -1,    -1,   484,  1354,  1355,    -1,
     113,  1366,    -1,  1362,   536,  1361,  1366,    -1,  1362,   561,
    1361,  1366,    -1,   168,  1361,  1366,    -1,   540,   517,  1361,
    1366,    -1,   371,   536,  1361,  1366,    -1,   397,    -1,   397,
     497,  1440,    -1,   397,   497,  1366,    -1,   160,   909,  1358,
      -1,   160,    12,  1358,    -1,  1362,    74,  1363,  1436,  1361,
    1366,    -1,  1359,   280,    -1,   489,   218,    -1,    -1,    36,
     168,  1364,  1365,  1356,  1258,    -1,    -1,   433,   669,   168,
    1364,  1365,  1357,  1258,    -1,   986,  1363,  1436,  1361,  1242,
      -1,  1360,   159,    -1,    24,    -1,    99,    -1,   408,    -1,
     101,   635,   630,   636,   607,    -1,   101,   635,   630,   636,
     165,    -1,   607,  1258,    -1,   165,  1258,    -1,   413,    -1,
     412,  1349,  1352,  1258,    -1,  1464,   517,  1366,    -1,  1362,
     411,    -1,  1464,   599,  1366,    -1,   961,  1366,    -1,    73,
    1366,    -1,   205,    -1,   205,   191,  1446,    -1,   103,   112,
     900,  1443,    -1,   103,   540,  1436,    -1,   103,   604,  1436,
      -1,   305,   517,    -1,    12,   490,   517,    -1,   489,   517,
      -1,   489,   670,   517,    -1,    68,    -1,   588,    -1,   539,
      -1,   232,    -1,   103,   409,   695,    -1,   103,   196,   695,
      -1,   103,   562,   695,    -1,   409,   517,  1366,    -1,   196,
     517,  1366,    -1,   409,    71,   695,    -1,   196,    71,   695,
      -1,   103,   169,   695,    -1,  1370,   191,  1144,    -1,   517,
      -1,   340,    -1,   280,    -1,   305,    -1,    35,    -1,    -1,
     521,    -1,    -1,  1363,  1443,    -1,    -1,   194,    -1,   193,
      -1,   245,    -1,    -1,   245,  1440,    -1,    -1,   193,  1268,
      -1,    -1,   268,  1440,    -1,   610,  1144,    -1,    -1,  1370,
    1436,  1368,  1372,    -1,    -1,  1370,  1371,  1369,  1121,    -1,
     134,    -1,   135,    -1,    -1,   176,    -1,   392,    -1,    -1,
    1424,    -1,  1443,    -1,    -1,   188,  1096,  1374,  1375,    -1,
      -1,    -1,  1478,  1376,  1381,  1377,  1378,    -1,  1379,    -1,
      -1,   612,   422,   278,  1382,    -1,  1379,   637,  1380,    -1,
    1380,    -1,   164,   280,    -1,   160,   280,    -1,   198,   280,
      -1,   492,   280,    -1,    35,   280,    -1,   432,   280,   669,
      -1,   417,    50,    -1,   218,    -1,   408,    -1,   280,    -1,
     517,    -1,   489,   669,    -1,    68,    -1,   588,    -1,   539,
      -1,   232,    -1,   305,    -1,   136,    -1,   450,    -1,    -1,
    1293,    -1,    -1,    17,   139,    62,    -1,    -1,   448,  1384,
    1385,    -1,  1385,   637,  1386,    -1,  1386,    -1,    -1,   489,
    1387,   669,  1388,    -1,   305,    -1,   417,    50,    -1,    -1,
      12,    -1,    -1,   415,  1390,  1391,    -1,  1359,   280,  1392,
      -1,   557,  1440,    -1,    31,  1144,    -1,    -1,   256,  1394,
    1395,  1396,  1397,    -1,    -1,   210,    -1,   496,    -1,    -1,
      90,    -1,   417,    -1,  1144,    -1,   587,  1446,    -1,   590,
    1443,    -1,    -1,    -1,    -1,    -1,   274,  1404,  1400,  1406,
    1405,   233,  1442,  1401,  1407,   242,   540,  1436,  1402,   964,
    1403,  1414,  1408,  1411,  1415,  1417,  1420,    -1,   115,    -1,
     620,    -1,    -1,   275,    -1,    -1,    88,    -1,   286,    -1,
      -1,   445,    -1,   227,    -1,    -1,    74,  1409,    -1,  1409,
    1410,    -1,  1410,    -1,   545,    48,  1424,    -1,   375,   155,
      48,  1424,    -1,   155,    48,  1424,    -1,   166,    48,  1424,
      -1,    -1,   271,  1412,    -1,  1412,  1413,    -1,  1413,    -1,
     545,    48,  1424,    -1,   514,    48,  1424,    -1,    -1,   461,
     224,    48,  1424,    -1,    -1,   227,   362,  1416,    -1,   271,
      -1,   461,    -1,    -1,   635,  1418,   636,    -1,   635,   636,
      -1,  1418,   637,  1419,    -1,  1419,    -1,  1433,    -1,   642,
    1445,    -1,    -1,   479,  1421,    -1,  1421,   637,  1422,    -1,
    1422,    -1,  1433,  1318,  1138,  1324,  1139,    -1,   546,    -1,
     346,    -1,   572,   546,    -1,  1423,  1441,    -1,  1441,    -1,
     214,    -1,   215,    -1,    37,    -1,   387,    -1,  1427,    -1,
     629,  1428,    -1,   628,  1428,    -1,  1423,    -1,  1428,    -1,
     361,    -1,   179,    -1,   564,    -1,   214,    -1,   215,    -1,
      37,    -1,   572,   960,    -1,   572,    37,    -1,   119,  1423,
      -1,   553,  1423,    -1,   550,  1423,    -1,   362,    -1,   283,
      -1,   569,    -1,   126,    -1,   186,    -1,  1433,    -1,  1430,
      -1,  1443,   643,   630,    -1,  1443,   643,  1443,   643,   630,
      -1,  1144,    -1,  1443,    -1,  1434,    -1,  1443,    -1,  1434,
      -1,  1443,   643,  1443,    -1,   643,  1443,   643,  1443,    -1,
    1443,   643,  1443,   643,  1443,    -1,  1443,    -1,  1443,   643,
    1443,   643,  1443,    -1,  1443,   643,  1443,    -1,   643,  1443,
      -1,  1443,    -1,  1443,   643,  1443,    -1,   643,  1443,    -1,
    1443,  1343,    -1,  1443,   643,  1443,  1343,    -1,  1443,    -1,
     223,    -1,   225,    -1,   546,    -1,   546,    -1,   546,    -1,
    1439,    -1,  1447,    -1,  1439,    -1,  1448,    -1,  1443,    -1,
    1440,    -1,   267,    -1,  1445,    -1,  1445,   642,  1445,    -1,
     107,  1143,    -1,  1448,    -1,    21,    -1,    30,    -1,    32,
      -1,    49,    -1,    50,    -1,    60,    -1,    63,    -1,    62,
      -1,    69,    -1,    75,    -1,    76,    -1,    77,    -1,    78,
      -1,    79,    -1,    82,    -1,    84,    -1,    96,    -1,   125,
      -1,   145,    -1,   156,    -1,   171,    -1,   172,    -1,   188,
      -1,   209,    -1,   213,    -1,   217,    -1,   240,    -1,   257,
      -1,   358,    -1,   371,    -1,   374,    -1,   373,    -1,   383,
      -1,   388,    -1,   393,    -1,   401,    -1,   404,    -1,   439,
      -1,   442,    -1,   448,    -1,   451,    -1,   458,    -1,   465,
      -1,   470,    -1,   477,    -1,   487,    -1,   495,    -1,   489,
      -1,   490,    -1,   497,    -1,   516,    -1,   520,    -1,   565,
      -1,   576,    -1,   577,    -1,   616,    -1,   619,    -1,   585,
      -1,     5,    -1,     7,    -1,     8,    -1,     9,    -1,    10,
      -1,    11,    -1,    14,    -1,    18,    -1,    23,    -1,    24,
      -1,    26,    -1,    25,    -1,    27,    -1,    28,    -1,    29,
      -1,    36,    -1,    40,    -1,    43,    -1,    45,    -1,    44,
      -1,    47,    -1,    53,    -1,    56,    -1,    57,    -1,    59,
      -1,    65,    -1,    68,    -1,    67,    -1,    66,    -1,    70,
      -1,    71,    -1,    73,    -1,    81,    -1,    74,    -1,    83,
      -1,    85,    -1,    86,    -1,    87,    -1,    88,    -1,    90,
      -1,    91,    -1,    93,    -1,    95,    -1,    94,    -1,    97,
      -1,    99,    -1,   108,    -1,   102,    -1,   105,    -1,   110,
      -1,   115,    -1,   114,    -1,   116,    -1,   119,    -1,   124,
      -1,   130,    -1,   132,    -1,   136,    -1,   138,    -1,   139,
      -1,   140,    -1,   141,    -1,   148,    -1,   149,    -1,   150,
      -1,   157,    -1,   161,    -1,   160,    -1,   159,    -1,   164,
      -1,   165,    -1,   167,    -1,   169,    -1,   168,    -1,   170,
      -1,   175,    -1,   176,    -1,   177,    -1,   181,    -1,   180,
      -1,   192,    -1,   154,    -1,   194,    -1,   183,    -1,   184,
      -1,   185,    -1,   198,    -1,   199,    -1,   201,    -1,   200,
      -1,   202,    -1,   205,    -1,   203,    -1,   211,    -1,   210,
      -1,   218,    -1,   222,    -1,   224,    -1,   228,    -1,   232,
      -1,   244,    -1,   229,    -1,   230,    -1,   234,    -1,   246,
      -1,   247,    -1,   249,    -1,   250,    -1,   239,    -1,   254,
      -1,   259,    -1,   258,    -1,   262,    -1,   265,    -1,   266,
      -1,   272,    -1,   273,    -1,   275,    -1,   277,    -1,   279,
      -1,   280,    -1,   312,    -1,   305,    -1,   308,    -1,   289,
      -1,   290,    -1,   294,    -1,   291,    -1,   292,    -1,   306,
      -1,   307,    -1,   293,    -1,   295,    -1,   288,    -1,   303,
      -1,   297,    -1,   296,    -1,   298,    -1,   299,    -1,   300,
      -1,   301,    -1,   302,    -1,   310,    -1,   311,    -1,   313,
      -1,   315,    -1,   316,    -1,   321,    -1,   322,    -1,   323,
      -1,   324,    -1,   325,    -1,   326,    -1,   329,    -1,   330,
      -1,   334,    -1,   332,    -1,   336,    -1,   337,    -1,   338,
      -1,   339,    -1,   340,    -1,   341,    -1,   343,    -1,   342,
      -1,   344,    -1,   347,    -1,   348,    -1,   352,    -1,   351,
      -1,   359,    -1,   353,    -1,   354,    -1,   364,    -1,   365,
      -1,   366,    -1,   368,    -1,   370,    -1,   369,    -1,   384,
      -1,   385,    -1,   390,    -1,   391,    -1,   392,    -1,   394,
      -1,   395,    -1,   396,    -1,   398,    -1,   397,    -1,   399,
      -1,   400,    -1,   405,    -1,   406,    -1,   408,    -1,   410,
      -1,   411,    -1,   412,    -1,   413,    -1,   414,    -1,   416,
      -1,   417,    -1,   418,    -1,   421,    -1,   425,    -1,   426,
      -1,   428,    -1,   427,    -1,   429,    -1,   432,    -1,   433,
      -1,   434,    -1,   435,    -1,   436,    -1,   438,    -1,   441,
      -1,   443,    -1,   446,    -1,   450,    -1,   453,    -1,   454,
      -1,   459,    -1,   460,    -1,   461,    -1,   462,    -1,   463,
      -1,   464,    -1,   466,    -1,   467,    -1,   469,    -1,   475,
      -1,   474,    -1,   476,    -1,   488,    -1,   481,    -1,   485,
      -1,   491,    -1,   492,    -1,   494,    -1,   496,    -1,   498,
      -1,   499,    -1,   507,    -1,   506,    -1,   509,    -1,   512,
      -1,   515,    -1,   517,    -1,   521,    -1,   523,    -1,   524,
      -1,   525,    -1,   526,    -1,   528,    -1,   527,    -1,   531,
      -1,   532,    -1,   533,    -1,   534,    -1,   542,    -1,   539,
      -1,   536,    -1,   541,    -1,   537,    -1,   543,    -1,   544,
      -1,   547,    -1,   548,    -1,   559,    -1,   560,    -1,   561,
      -1,   550,    -1,   551,    -1,   552,    -1,   553,    -1,   566,
      -1,   567,    -1,   568,    -1,   196,    -1,   570,    -1,   571,
      -1,   574,    -1,   573,    -1,   580,    -1,   583,    -1,   587,
      -1,   588,    -1,   589,    -1,   599,    -1,   604,    -1,   605,
      -1,   596,    -1,   607,    -1,   606,    -1,   608,    -1,   615,
      -1,   618,    -1,   620,    -1,   623,    -1,   603,    -1,    -1,
     479,  1450,  1451,    -1,    -1,  1467,  1452,  1457,    -1,    -1,
     559,  1453,  1469,    -1,    -1,  1463,  1454,  1455,    -1,    -1,
    1466,  1456,  1457,    -1,   559,  1469,    -1,    -1,   637,  1458,
      -1,    -1,  1459,  1461,    -1,    -1,  1458,   637,  1460,  1461,
      -1,    -1,  1463,  1462,  1466,    -1,  1467,    -1,   203,    -1,
     275,    -1,   476,    -1,    -1,   203,    -1,   275,    -1,   476,
      -1,    -1,   203,   643,    -1,   275,   643,    -1,   476,   643,
      -1,  1468,  1318,  1475,    -1,  1468,  1318,  1475,    -1,   642,
    1445,  1318,  1144,    -1,   642,   642,  1465,  1468,  1318,  1475,
      -1,   961,   966,    -1,   342,  1318,  1144,    -1,   342,   963,
     968,    -1,   394,  1318,  1474,    -1,   394,   191,  1446,  1318,
    1474,    -1,  1443,    -1,  1443,   643,  1443,    -1,   129,   643,
    1443,    -1,  1470,    -1,  1471,    -1,  1470,   637,  1471,    -1,
    1471,   637,  1470,    -1,  1472,    -1,   249,   266,  1473,    -1,
     422,   369,    -1,   422,   617,    -1,   422,   570,    -1,   422,
      83,    -1,   443,   422,    -1,   474,    -1,   546,    -1,   394,
     635,   546,   636,    -1,   366,   635,   546,   636,    -1,  1144,
      -1,   129,    -1,   367,    -1,    12,    -1,    35,    -1,    -1,
     278,  1478,  1477,  1479,    -1,   540,    -1,   536,    -1,  1480,
      -1,  1479,   637,  1480,    -1,  1436,  1240,  1481,    -1,   422,
      -1,   617,    -1,   617,    88,    -1,   286,   617,    -1,   422,
     275,    -1,    -1,   581,  1483,  1478,    -1,   209,  1436,   371,
    1240,    -1,   209,  1438,    69,    -1,    -1,   209,  1438,   422,
    1485,  1486,  1242,  1259,    -1,  1487,    -1,  1443,  1488,    -1,
     184,    -1,   352,    -1,   184,    -1,   352,    -1,   406,    -1,
     258,    -1,    -1,  1490,  1489,   635,  1323,   636,    -1,   162,
      -1,   197,    -1,   260,    -1,   208,    -1,   287,    -1,   456,
     694,  1492,    -1,  1496,   367,  1495,  1507,   193,  1508,    -1,
    1496,   367,   196,  1507,   193,  1508,    -1,  1496,   367,   409,
    1507,   193,  1508,    -1,    12,  1497,   637,   204,   374,   193,
    1508,    -1,   414,   367,  1446,   193,  1508,    -1,   204,   694,
    1494,    -1,  1496,   367,  1495,  1507,   557,  1509,  1516,  1517,
      -1,  1496,   367,   196,  1507,   557,  1509,  1516,  1517,    -1,
    1496,   367,   409,  1507,   557,  1509,  1516,  1517,    -1,   414,
     367,  1446,   557,  1509,  1518,    -1,    -1,   540,    -1,  1498,
      -1,    12,  1497,    -1,    -1,   408,    -1,  1499,    -1,  1498,
     637,  1499,    -1,    -1,   471,  1500,  1513,    -1,    -1,   238,
    1501,  1513,    -1,    -1,   584,  1502,  1513,    -1,    -1,   430,
    1503,  1513,    -1,   133,    -1,   586,    -1,   231,    -1,    13,
      -1,   103,    -1,   146,    -1,   172,    -1,   438,    -1,   485,
      -1,   410,    -1,   183,    -1,   204,   374,    -1,   484,   113,
      -1,   531,    -1,   103,   543,   536,    -1,   278,   536,    -1,
     446,   489,    -1,   446,    67,    -1,   103,   604,    -1,   484,
     604,    -1,   103,   460,    -1,    13,   460,    -1,   103,   587,
      -1,   169,    -1,   562,    -1,   103,   537,    -1,    -1,    17,
      -1,  1506,  1504,  1505,    -1,  1506,    -1,   526,   546,    -1,
     250,   546,    -1,    65,   546,    -1,   630,    -1,  1443,   643,
     630,    -1,   630,   643,   630,    -1,  1436,    -1,  1446,    -1,
    1508,   637,  1446,    -1,  1512,    -1,  1509,   637,  1512,    -1,
     603,    -1,   612,    -1,   591,    -1,    19,    -1,  1446,   224,
      48,   546,    -1,  1446,   224,    48,   394,   546,    -1,  1446,
     224,  1510,  1445,    -1,  1446,   224,  1510,  1445,  1511,  1440,
      -1,  1446,    -1,    -1,   635,  1514,   636,    -1,  1514,   637,
    1515,    -1,  1515,    -1,  1443,    -1,    -1,   447,  1505,    -1,
     447,   513,    -1,   447,   618,    -1,   447,   354,    -1,    -1,
     612,  1519,    -1,    -1,   612,   204,   374,    -1,  1519,  1520,
      -1,  1520,    -1,   204,   374,    -1,   311,  1266,    -1,   315,
    1266,    -1,   310,  1266,    -1,   316,  1265,    -1,    -1,    32,
    1522,  1523,    -1,    -1,   615,    -1,    -1,    17,   358,    57,
      -1,    17,    57,    -1,    -1,   437,    -1,   358,   437,    -1,
      -1,   465,    -1,    84,  1523,  1524,  1525,    -1,   458,  1523,
    1524,  1525,    -1,   458,  1523,   557,  1526,  1443,    -1,   465,
    1443,    -1,   437,   465,  1443,    -1,    -1,  1532,    -1,    -1,
     578,  1539,  1533,  1122,    -1,    -1,  1532,    -1,  1536,    -1,
      -1,  1536,    -1,    -1,  1537,  1538,    -1,  1254,  1258,    -1,
    1260,    -1,    -1,   142,    -1,    12,    -1,   471,  1210,    -1,
     635,  1124,   636,    -1,  1540,  1535,    -1,    -1,  1541,   578,
    1539,  1542,  1540,  1535,    -1,  1544,  1541,  1545,    -1,    -1,
      -1,    -1,  1547,    -1,  1547,  1548,    -1,  1548,    -1,   522,
      -1,   216,    -1,   142,    -1,   510,    -1,   505,    -1,   506,
      -1,   508,    -1,    12,    -1,  1554,  1550,    -1,  1553,  1551,
      -1,  1555,  1552,  1559,    -1,  1559,    -1,  1567,    -1,  1578,
      -1,  1572,    -1,   681,    -1,  1559,    -1,  1567,    -1,  1578,
      -1,  1572,    -1,  1571,    -1,   681,    -1,  1553,    -1,  1554,
      -1,    -1,   130,   162,  1446,    -1,  1556,    -1,  1556,  1557,
      -1,  1557,    -1,   379,   445,    -1,    11,   162,   571,    -1,
      11,   162,   323,    -1,    11,   162,   544,    -1,    -1,   511,
     470,   130,    -1,   511,   470,   244,    -1,    -1,  1558,   604,
    1436,  1560,  1561,    19,  1563,    -1,    -1,   635,  1562,   636,
      -1,  1443,    -1,  1562,   637,  1443,    -1,    -1,  1564,  1565,
    1566,    -1,   471,  1125,    -1,   635,  1123,   636,  1534,    -1,
      -1,   612,    64,   374,    -1,   612,    53,    64,   374,    -1,
     612,   275,    64,   374,    -1,    -1,    -1,    -1,   562,  1138,
     695,   789,   790,   367,  1138,  1568,  1436,   191,  1138,  1569,
     151,   463,  1570,   739,    -1,    10,  1138,   196,  1443,   454,
     913,   497,  1440,    -1,  1138,   196,  1443,   454,   913,   497,
    1440,    -1,    -1,    -1,    -1,    -1,    -1,  1138,   196,   695,
     635,  1573,   706,   636,  1574,   454,  1575,   958,  1576,   697,
    1577,   739,    -1,    -1,    -1,    -1,    -1,   409,  1138,   695,
    1579,   635,  1580,   710,   636,  1581,   697,  1582,   739,    -1,
     619,  1585,  1584,  1586,    -1,   619,   156,  1584,  1588,    -1,
     619,   404,  1584,    -1,   619,    84,  1584,  1587,    -1,   619,
     458,  1584,    -1,   619,   426,    -1,  1424,    -1,  1424,   637,
    1424,    -1,  1424,   637,  1424,   637,  1266,    -1,    32,    -1,
     516,    -1,    -1,   252,    -1,   453,    -1,    -1,   368,   396,
      -1,    -1,    -1,   532,  1589,  1590,    -1,    -1,   191,   326,
      -1,   240,   398,  1443,   497,  1440,    -1,   240,   497,  1440,
      -1,   577,   398,  1443,    -1,   577,   497,  1440,    -1,   625,
      -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,  1837,  1837,  1850,  1849,  1874,  1881,  1883,  1887,  1888,
    1893,  1894,  1895,  1896,  1897,  1898,  1899,  1900,  1901,  1902,
    1903,  1904,  1905,  1906,  1907,  1908,  1909,  1910,  1911,  1912,
    1913,  1914,  1915,  1916,  1917,  1918,  1919,  1920,  1921,  1922,
    1923,  1924,  1925,  1926,  1927,  1928,  1929,  1930,  1931,  1932,
    1933,  1934,  1935,  1936,  1937,  1938,  1939,  1940,  1941,  1942,
    1943,  1944,  1945,  1949,  1959,  1960,  1964,  1974,  1981,  1992,
    1991,  2002,  2004,  2008,  2009,  2013,  2026,  2025,  2045,  2044,
    2053,  2054,  2058,  2062,  2066,  2070,  2074,  2078,  2083,  2087,
    2091,  2095,  2099,  2103,  2108,  2112,  2117,  2148,  2153,  2156,
    2158,  2159,  2163,  2169,  2173,  2189,  2193,  2199,  2209,  2219,
    2232,  2237,  2241,  2257,  2256,  2298,  2297,  2309,  2307,  2320,
    2318,  2330,  2329,  2342,  2341,  2349,  2353,  2357,  2361,  2368,
    2381,  2382,  2386,  2390,  2394,  2398,  2402,  2406,  2410,  2418,
    2417,  2449,  2448,  2455,  2462,  2463,  2469,  2475,  2485,  2491,
    2497,  2499,  2506,  2507,  2511,  2517,  2526,  2527,  2535,  2535,
    2593,  2594,  2595,  2596,  2597,  2598,  2599,  2600,  2601,  2602,
    2603,  2604,  2605,  2610,  2624,  2640,  2659,  2660,  2664,  2665,
    2670,  2672,  2674,  2676,  2678,  2680,  2682,  2688,  2689,  2690,
    2694,  2698,  2706,  2705,  2718,  2720,  2723,  2725,  2729,  2733,
    2740,  2742,  2746,  2747,  2752,  2772,  2798,  2800,  2804,  2805,
    2809,  2835,  2836,  2837,  2838,  2842,  2843,  2847,  2848,  2853,
    2856,  2883,  2882,  2947,  2963,  2962,  3016,  3042,  3042,  3065,
    3066,  3071,  3073,  3078,  3101,  3114,  3118,  3135,  3136,  3140,
    3144,  3153,  3160,  3167,  3177,  3192,  3215,  3221,  3222,  3228,
    3231,  3235,  3243,  3263,  3265,  3283,  3289,  3291,  3293,  3295,
    3297,  3299,  3301,  3303,  3305,  3307,  3309,  3311,  3316,  3331,
    3346,  3364,  3365,  3369,  3370,  3371,  3372,  3373,  3374,  3375,
    3376,  3377,  3378,  3379,  3380,  3381,  3386,  3385,  3392,  3392,
    3449,  3448,  3477,  3477,  3491,  3544,  3587,  3608,  3607,  3629,
    3648,  3650,  3651,  3655,  3675,  3698,  3700,  3716,  3698,  3735,
    3737,  3738,  3742,  3743,  3748,  3754,  3747,  3775,  3774,  3790,
    3791,  3795,  3796,  3801,  3805,  3800,  3826,  3830,  3825,  3849,
    3859,  3864,  3863,  3899,  3900,  3905,  3904,  3937,  3937,  3952,
    3951,  3987,  3999,  4001,  3998,  4028,  4027,  4048,  4050,  4055,
    4057,  4059,  4076,  4081,  4087,  4094,  4095,  4103,  4109,  4118,
    4124,  4130,  4131,  4135,  4135,  4140,  4141,  4142,  4146,  4147,
    4148,  4152,  4156,  4157,  4158,  4162,  4163,  4164,  4165,  4166,
    4167,  4168,  4169,  4173,  4177,  4178,  4179,  4183,  4184,  4185,
    4186,  4187,  4191,  4195,  4196,  4197,  4201,  4202,  4203,  4204,
    4205,  4206,  4207,  4211,  4215,  4216,  4217,  4221,  4222,  4223,
    4228,  4236,  4244,  4252,  4264,  4276,  4281,  4286,  4294,  4302,
    4310,  4318,  4326,  4334,  4342,  4355,  4368,  4381,  4383,  4387,
    4392,  4405,  4406,  4458,  4457,  4460,  4466,  4466,  4467,  4481,
    4482,  4486,  4488,  4487,  4491,  4490,  4496,  4533,  4534,  4539,
    4538,  4557,  4576,  4575,  4592,  4596,  4604,  4603,  4606,  4608,
    4610,  4612,  4617,  4618,  4624,  4625,  4642,  4643,  4647,  4648,
    4652,  4671,  4681,  4692,  4701,  4702,  4718,  4720,  4719,  4724,
    4722,  4733,  4734,  4738,  4756,  4772,  4773,  4789,  4804,  4826,
    4827,  4832,  4831,  4855,  4865,  4887,  4886,  4904,  4903,  4923,
    4945,  4949,  4978,  4990,  4991,  4996,  5007,  4995,  5032,  5033,
    5037,  5050,  5071,  5084,  5110,  5111,  5116,  5115,  5152,  5157,
    5158,  5162,  5163,  5167,  5169,  5175,  5181,  5183,  5185,  5187,
    5189,  5191,  5201,  5216,  5200,  5230,  5231,  5235,  5236,  5240,
    5241,  5245,  5246,  5250,  5251,  5255,  5256,  5260,  5265,  5269,
    5276,  5278,  5282,  5283,  5287,  5288,  5289,  5293,  5298,  5303,
    5308,  5313,  5318,  5323,  5328,  5343,  5349,  5354,  5359,  5364,
    5369,  5375,  5374,  5400,  5401,  5402,  5407,  5412,  5417,  5419,
    5421,  5423,  5429,  5434,  5439,  5445,  5451,  5457,  5466,  5484,
    5501,  5524,  5538,  5539,  5540,  5541,  5542,  5543,  5544,  5548,
    5549,  5550,  5554,  5555,  5559,  5560,  5561,  5562,  5567,  5574,
    5575,  5579,  5580,  5584,  5585,  5593,  5592,  5601,  5599,  5609,
    5607,  5617,  5615,  5623,  5643,  5649,  5651,  5655,  5659,  5660,
    5664,  5669,  5668,  5694,  5695,  5704,  5706,  5711,  5714,  5718,
    5725,  5726,  5730,  5731,  5735,  5741,  5747,  5751,  5767,  5783,
    5784,  5785,  5786,  5791,  5795,  5800,  5805,  5809,  5814,  5819,
    5825,  5830,  5836,  5840,  5845,  5850,  5868,  5870,  5872,  5885,
    5887,  5892,  5897,  5909,  5914,  5919,  5924,  5926,  5928,  5930,
    5932,  5934,  5936,  5938,  5941,  5940,  5945,  5944,  5948,  5950,
    5959,  5960,  5961,  5966,  5967,  5968,  5969,  5970,  5974,  5978,
    5979,  5983,  5984,  5988,  5989,  5990,  5991,  5992,  5996,  5997,
    5998,  5999,  6000,  6004,  6009,  6011,  6017,  6018,  6020,  6025,
    6034,  6035,  6039,  6040,  6044,  6045,  6046,  6050,  6051,  6052,
    6053,  6056,  6057,  6061,  6062,  6066,  6067,  6071,  6072,  6076,
    6077,  6078,  6079,  6086,  6087,  6093,  6099,  6105,  6111,  6112,
    6125,  6131,  6137,  6143,  6152,  6173,  6179,  6184,  6185,  6189,
    6190,  6194,  6202,  6206,  6207,  6211,  6212,  6216,  6225,  6229,
    6230,  6234,  6245,  6246,  6250,  6251,  6255,  6256,  6261,  6262,
    6266,  6273,  6282,  6290,  6301,  6302,  6303,  6304,  6305,  6306,
    6311,  6319,  6320,  6324,  6326,  6330,  6342,  6343,  6347,  6354,
    6367,  6368,  6370,  6372,  6378,  6383,  6389,  6395,  6402,  6412,
    6413,  6414,  6415,  6416,  6420,  6424,  6425,  6429,  6430,  6434,
    6435,  6439,  6440,  6441,  6445,  6446,  6450,  6454,  6467,  6479,
    6480,  6484,  6485,  6489,  6490,  6494,  6495,  6499,  6500,  6504,
    6505,  6509,  6510,  6514,  6515,  6519,  6521,  6522,  6528,  6534,
    6540,  6548,  6549,  6553,  6557,  6558,  6571,  6572,  6573,  6577,
    6578,  6582,  6588,  6602,  6603,  6607,  6619,  6620,  6624,  6625,
    6633,  6632,  6671,  6670,  6684,  6696,  6695,  6714,  6713,  6732,
    6731,  6750,  6744,  6764,  6763,  6796,  6801,  6806,  6811,  6816,
    6826,  6827,  6828,  6829,  6833,  6834,  6846,  6847,  6851,  6852,
    6855,  6857,  6858,  6859,  6861,  6863,  6864,  6873,  6874,  6878,
    6887,  6885,  6899,  6913,  6912,  6926,  6924,  6938,  6945,  6956,
    6960,  6967,  6971,  6976,  6975,  6991,  6993,  6998,  7006,  7005,
    7021,  7025,  7024,  7036,  7037,  7041,  7056,  7057,  7061,  7070,
    7074,  7079,  7084,  7083,  7095,  7106,  7094,  7122,  7131,  7135,
    7145,  7154,  7160,  7166,  7175,  7184,  7203,  7224,  7234,  7238,
    7246,  7247,  7251,  7252,  7256,  7256,  7259,  7261,  7265,  7266,
    7270,  7271,  7275,  7276,  7277,  7281,  7282,  7283,  7287,  7288,
    7289,  7290,  7299,  7298,  7308,  7307,  7314,  7321,  7329,  7328,
    7336,  7345,  7362,  7365,  7372,  7376,  7383,  7387,  7391,  7398,
    7398,  7404,  7405,  7409,  7410,  7411,  7415,  7416,  7429,  7436,
    7437,  7442,  7441,  7453,  7454,  7455,  7460,  7459,  7481,  7482,
    7486,  7487,  7491,  7492,  7493,  7498,  7497,  7519,  7520,  7524,
    7529,  7530,  7538,  7540,  7544,  7546,  7545,  7558,  7560,  7559,
    7573,  7574,  7579,  7588,  7589,  7590,  7594,  7600,  7609,  7618,
    7617,  7644,  7645,  7649,  7650,  7654,  7655,  7656,  7657,  7658,
    7659,  7664,  7663,  7685,  7686,  7687,  7692,  7691,  7697,  7704,
    7709,  7717,  7718,  7722,  7736,  7735,  7748,  7749,  7753,  7754,
    7758,  7768,  7778,  7779,  7784,  7783,  7794,  7795,  7799,  7800,
    7804,  7814,  7825,  7824,  7832,  7832,  7841,  7842,  7847,  7848,
    7857,  7866,  7867,  7871,  7876,  7881,  7886,  7891,  7890,  7910,
    7918,  7910,  7925,  7926,  7927,  7928,  7929,  7933,  7940,  7947,
    7949,  7960,  7961,  7965,  7966,  7994,  8024,  8026,  8032,  8042,
    8043,  8044,  8059,  8066,  8092,  8098,  8104,  8105,  8106,  8107,
    8108,  8112,  8113,  8114,  8118,  8119,  8120,  8124,  8125,  8130,
    8181,  8188,  8231,  8237,  8243,  8249,  8255,  8261,  8267,  8273,
    8277,  8283,  8289,  8295,  8301,  8307,  8311,  8317,  8327,  8333,
    8341,  8347,  8357,  8363,  8372,  8382,  8388,  8398,  8404,  8413,
    8417,  8423,  8429,  8435,  8441,  8447,  8453,  8459,  8465,  8471,
    8477,  8483,  8489,  8495,  8501,  8505,  8506,  8510,  8511,  8515,
    8516,  8520,  8521,  8525,  8526,  8527,  8528,  8529,  8530,  8534,
    8535,  8540,  8546,  8550,  8557,  8564,  8571,  8578,  8585,  8590,
    8596,  8603,  8610,  8618,  8629,  8651,  8658,  8666,  8667,  8668,
    8669,  8670,  8671,  8683,  8684,  8685,  8686,  8687,  8693,  8697,
    8703,  8709,  8715,  8721,  8723,  8730,  8737,  8743,  8745,  8754,
    8761,  8769,  8775,  8782,  8788,  8802,  8809,  8825,  8831,  8837,
    8845,  8851,  8857,  8863,  8869,  8884,  8896,  8902,  8908,  8914,
    8920,  8926,  8932,  8938,  8944,  8950,  8956,  8962,  8968,  8974,
    8980,  8986,  8992,  9000,  9021,  9028,  9034,  9041,  9048,  9055,
    9062,  9068,  9074,  9081,  9087,  9094,  9100,  9106,  9112,  9118,
    9124,  9142,  9148,  9154,  9161,  9168,  9176,  9183,  9190,  9197,
    9204,  9221,  9227,  9233,  9239,  9245,  9252,  9258,  9264,  9270,
    9276,  9282,  9294,  9300,  9306,  9312,  9318,  9330,  9336,  9352,
    9358,  9365,  9372,  9379,  9386,  9393,  9397,  9417,  9416,  9489,
    9531,  9533,  9538,  9539,  9543,  9544,  9548,  9549,  9553,  9560,
    9568,  9594,  9600,  9606,  9612,  9618,  9624,  9633,  9640,  9642,
    9639,  9649,  9660,  9666,  9672,  9678,  9684,  9690,  9696,  9702,
    9708,  9715,  9714,  9733,  9732,  9747,  9757,  9765,  9781,  9782,
    9787,  9792,  9797,  9800,  9813,  9812,  9829,  9831,  9833,  9835,
    9837,  9839,  9841,  9843,  9845,  9847,  9853,  9859,  9862,  9861,
    9867,  9868,  9872,  9879,  9887,  9888,  9892,  9899,  9907,  9908,
    9912,  9913,  9917,  9925,  9936,  9937,  9946,  9957,  9958,  9964,
    9965,  9985,  9989,  9987, 10005, 10003, 10014, 10024, 10022, 10040,
   10039, 10049, 10060, 10058, 10077, 10076, 10087, 10099, 10100, 10101,
   10105, 10106, 10118, 10118, 10132, 10172, 10225, 10229, 10234, 10226,
   10246, 10266, 10274, 10266, 10283, 10282, 10305, 10322, 10305, 10329,
   10333, 10359, 10360, 10365, 10368, 10369, 10370, 10374, 10375, 10380,
   10379, 10385, 10384, 10392, 10393, 10396, 10398, 10398, 10402, 10402,
   10407, 10408, 10412, 10414, 10419, 10420, 10424, 10435, 10448, 10449,
   10450, 10451, 10452, 10453, 10454, 10455, 10456, 10457, 10458, 10459,
   10463, 10464, 10465, 10466, 10467, 10468, 10469, 10470, 10471, 10475,
   10476, 10477, 10478, 10481, 10483, 10484, 10488, 10489, 10497, 10499,
   10503, 10505, 10504, 10518, 10521, 10520, 10535, 10541, 10556, 10558,
   10562, 10564, 10569, 10570, 10590, 10615, 10619, 10620, 10624, 10637,
   10639, 10644, 10643, 10678, 10680, 10685, 10686, 10687, 10692, 10699,
   10703, 10704, 10708, 10712, 10716, 10723, 10730, 10737, 10747, 10781,
   10785, 10791, 10797, 10806, 10814, 10818, 10825, 10826, 10830, 10831,
   10832, 10836, 10837, 10838, 10839, 10840, 10841, 10845, 10846, 10847,
   10848, 10849, 10853, 10854, 10855, 10856, 10857, 10861, 10862, 10863,
   10864, 10865, 10869, 10874, 10875, 10879, 10880, 10883, 10886, 10885,
   10916, 10917, 10921, 10922, 10926, 10938, 10938, 10948, 10949, 10953,
   10972, 11005, 11004, 11017, 11025, 11016, 11027, 11039, 11051, 11050,
   11068, 11067, 11078, 11078, 11094, 11101, 11124, 11145, 11157, 11162,
   11161, 11171, 11177, 11184, 11189, 11194, 11204, 11205, 11209, 11220,
   11221, 11225, 11237, 11241, 11249, 11250, 11258, 11266, 11257, 11276,
   11283, 11275, 11293, 11301, 11302, 11310, 11314, 11315, 11326, 11327,
   11331, 11340, 11341, 11342, 11344, 11343, 11354, 11355, 11359, 11360,
   11362, 11361, 11365, 11364, 11370, 11371, 11375, 11376, 11380, 11390,
   11391, 11395, 11396, 11401, 11400, 11414, 11415, 11419, 11424, 11432,
   11433, 11441, 11443, 11443, 11451, 11459, 11450, 11481, 11482, 11486,
   11494, 11495, 11499, 11509, 11510, 11517, 11516, 11532, 11531, 11543,
   11542, 11554, 11553, 11567, 11568, 11572, 11585, 11601, 11602, 11606,
   11607, 11611, 11612, 11613, 11618, 11617, 11639, 11641, 11644, 11646,
   11649, 11650, 11653, 11657, 11661, 11665, 11669, 11673, 11677, 11681,
   11685, 11693, 11696, 11706, 11705, 11719, 11726, 11734, 11742, 11750,
   11758, 11766, 11773, 11780, 11786, 11788, 11790, 11799, 11803, 11808,
   11807, 11813, 11812, 11817, 11826, 11833, 11842, 11851, 11856, 11858,
   11860, 11862, 11864, 11866, 11873, 11881, 11883, 11891, 11898, 11905,
   11915, 11922, 11928, 11937, 11945, 11949, 11954, 11962, 11967, 11974,
   11981, 11988, 11995, 12002, 12009, 12015, 12022, 12029, 12034, 12039,
   12044, 12055, 12057, 12059, 12064, 12065, 12068, 12070, 12074, 12075,
   12079, 12080, 12084, 12085, 12089, 12090, 12094, 12095, 12098, 12100,
   12107, 12118, 12117, 12130, 12129, 12139, 12140, 12144, 12145, 12146,
   12150, 12151, 12152, 12167, 12166, 12179, 12188, 12178, 12190, 12194,
   12195, 12209, 12210, 12215, 12217, 12219, 12221, 12223, 12225, 12236,
   12238, 12240, 12242, 12248, 12250, 12261, 12263, 12265, 12267, 12269,
   12271, 12273, 12278, 12279, 12283, 12284, 12288, 12287, 12297, 12298,
   12302, 12302, 12305, 12306, 12310, 12311, 12316, 12315, 12326, 12330,
   12334, 12347, 12346, 12360, 12361, 12362, 12365, 12366, 12367, 12371,
   12376, 12386, 12398, 12410, 12420, 12430, 12397, 12438, 12439, 12443,
   12444, 12448, 12449, 12457, 12461, 12462, 12463, 12466, 12468, 12472,
   12473, 12477, 12482, 12489, 12494, 12501, 12503, 12507, 12508, 12512,
   12517, 12525, 12526, 12529, 12531, 12539, 12541, 12545, 12546, 12547,
   12551, 12553, 12558, 12559, 12568, 12569, 12573, 12574, 12578, 12591,
   12615, 12627, 12638, 12657, 12665, 12677, 12685, 12700, 12721, 12722,
   12723, 12731, 12732, 12733, 12740, 12746, 12752, 12758, 12764, 12770,
   12799, 12827, 12828, 12829, 12833, 12843, 12853, 12859, 12868, 12883,
   12884, 12888, 12897, 12913, 12917, 12964, 12968, 12986, 12990, 13069,
   13094, 13125, 13126, 13142, 13152, 13156, 13162, 13168, 13178, 13184,
   13193, 13203, 13204, 13234, 13250, 13266, 13283, 13284, 13295, 13296,
   13307, 13308, 13309, 13313, 13330, 13352, 13367, 13368, 13369, 13370,
   13371, 13372, 13373, 13374, 13375, 13376, 13377, 13378, 13379, 13380,
   13381, 13382, 13383, 13384, 13385, 13386, 13387, 13388, 13389, 13390,
   13391, 13392, 13393, 13394, 13395, 13396, 13397, 13398, 13399, 13400,
   13401, 13402, 13403, 13404, 13405, 13406, 13407, 13408, 13409, 13410,
   13411, 13412, 13413, 13414, 13415, 13416, 13417, 13418, 13419, 13420,
   13421, 13422, 13423, 13424, 13425, 13435, 13436, 13437, 13438, 13439,
   13440, 13441, 13442, 13443, 13444, 13445, 13446, 13447, 13448, 13449,
   13450, 13451, 13452, 13453, 13454, 13455, 13456, 13457, 13458, 13459,
   13460, 13461, 13462, 13463, 13464, 13465, 13466, 13467, 13468, 13469,
   13470, 13471, 13472, 13473, 13474, 13475, 13476, 13477, 13478, 13479,
   13480, 13481, 13482, 13483, 13484, 13485, 13486, 13487, 13488, 13489,
   13490, 13491, 13492, 13493, 13494, 13495, 13496, 13497, 13498, 13499,
   13500, 13501, 13502, 13503, 13504, 13505, 13506, 13507, 13508, 13509,
   13510, 13511, 13512, 13513, 13514, 13515, 13516, 13517, 13518, 13519,
   13520, 13521, 13522, 13523, 13524, 13525, 13526, 13527, 13528, 13529,
   13530, 13531, 13532, 13533, 13534, 13535, 13536, 13537, 13538, 13539,
   13540, 13541, 13542, 13543, 13544, 13545, 13546, 13547, 13548, 13549,
   13550, 13551, 13552, 13553, 13554, 13555, 13556, 13557, 13558, 13559,
   13560, 13561, 13562, 13563, 13564, 13565, 13566, 13567, 13568, 13569,
   13570, 13571, 13572, 13573, 13574, 13575, 13576, 13577, 13578, 13579,
   13580, 13581, 13582, 13583, 13584, 13585, 13586, 13587, 13588, 13589,
   13590, 13591, 13592, 13593, 13594, 13595, 13596, 13597, 13598, 13599,
   13600, 13601, 13602, 13603, 13604, 13605, 13606, 13607, 13608, 13609,
   13610, 13611, 13612, 13613, 13614, 13615, 13616, 13617, 13618, 13619,
   13620, 13621, 13622, 13623, 13624, 13625, 13626, 13627, 13628, 13629,
   13630, 13631, 13632, 13633, 13634, 13635, 13636, 13637, 13638, 13639,
   13640, 13641, 13642, 13643, 13644, 13645, 13646, 13647, 13648, 13649,
   13650, 13651, 13652, 13653, 13654, 13655, 13656, 13657, 13658, 13659,
   13660, 13661, 13662, 13663, 13664, 13665, 13666, 13667, 13668, 13669,
   13670, 13671, 13672, 13673, 13674, 13675, 13676, 13677, 13678, 13679,
   13680, 13681, 13682, 13683, 13684, 13685, 13686, 13687, 13688, 13689,
   13690, 13691, 13692, 13693, 13694, 13695, 13696, 13697, 13698, 13699,
   13700, 13701, 13702, 13703, 13704, 13705, 13706, 13707, 13708, 13709,
   13710, 13711, 13712, 13713, 13714, 13715, 13716, 13717, 13718, 13719,
   13720, 13721, 13722, 13723, 13724, 13725, 13726, 13727, 13728, 13729,
   13730, 13731, 13732, 13733, 13745, 13744, 13763, 13762, 13769, 13768,
   13778, 13777, 13788, 13787, 13793, 13801, 13803, 13808, 13808, 13817,
   13816, 13830, 13829, 13834, 13838, 13839, 13840, 13844, 13845, 13846,
   13847, 13851, 13852, 13853, 13854, 13859, 13884, 13912, 13923, 13936,
   13950, 13965, 13984, 14012, 14025, 14052, 14095, 14109, 14110, 14111,
   14112, 14116, 14134, 14152, 14153, 14157, 14158, 14159, 14160, 14164,
   14165, 14174, 14186, 14187, 14188, 14194, 14200, 14212, 14211, 14227,
   14228, 14232, 14233, 14237, 14252, 14253, 14254, 14259, 14260, 14265,
   14264, 14284, 14296, 14309, 14308, 14342, 14343, 14347, 14348, 14352,
   14353, 14354, 14355, 14357, 14356, 14369, 14370, 14371, 14372, 14373,
   14379, 14384, 14390, 14401, 14412, 14416, 14426, 14431, 14438, 14450,
   14462, 14471, 14473, 14477, 14478, 14485, 14487, 14491, 14492, 14497,
   14496, 14500, 14499, 14503, 14502, 14506, 14505, 14508, 14509, 14510,
   14511, 14512, 14513, 14514, 14515, 14516, 14517, 14518, 14519, 14520,
   14521, 14522, 14523, 14524, 14525, 14526, 14527, 14528, 14529, 14530,
   14531, 14532, 14533, 14537, 14538, 14542, 14543, 14547, 14557, 14567,
   14580, 14595, 14608, 14621, 14633, 14638, 14646, 14651, 14658, 14658,
   14659, 14659, 14662, 14689, 14694, 14700, 14706, 14712, 14716, 14720,
   14721, 14725, 14752, 14754, 14758, 14762, 14766, 14773, 14774, 14778,
   14779, 14783, 14784, 14788, 14789, 14795, 14801, 14807, 14817, 14816,
   14826, 14827, 14832, 14833, 14834, 14839, 14840, 14841, 14845, 14846,
   14850, 14862, 14871, 14881, 14890, 14904, 14905, 14910, 14909, 14925,
   14926, 14927, 14930, 14932, 14936, 14936, 14960, 14961, 14965, 14966,
   14967, 14971, 14975, 14982, 14985, 14983, 14999, 15006, 15027, 15044,
   15046, 15050, 15051, 15055, 15056, 15064, 15065, 15066, 15067, 15073,
   15079, 15089, 15091, 15093, 15098, 15099, 15100, 15101, 15102, 15106,
   15107, 15108, 15109, 15110, 15111, 15121, 15122, 15127, 15140, 15153,
   15155, 15157, 15162, 15167, 15169, 15171, 15177, 15178, 15180, 15186,
   15185, 15203, 15204, 15208, 15213, 15221, 15221, 15246, 15247, 15252,
   15253, 15255, 15257, 15275, 15281, 15286, 15268, 15348, 15366, 15391,
   15423, 15427, 15436, 15459, 15387, 15524, 15548, 15557, 15565, 15523,
   15586, 15590, 15594, 15598, 15602, 15606, 15613, 15620, 15627, 15637,
   15638, 15642, 15643, 15644, 15648, 15649, 15654, 15656, 15655, 15661,
   15662, 15666, 15673, 15683, 15689, 15700
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || YYTOKEN_TABLE
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "ABORT_SYM", "ACCESSIBLE_SYM", "ACTION",
  "ADD", "ADDDATE_SYM", "AFTER_SYM", "AGAINST", "AGGREGATE_SYM",
  "ALGORITHM_SYM", "ALL", "ALTER", "ALWAYS_SYM", "ANALYZE_SYM",
  "AND_AND_SYM", "AND_SYM", "ANY_SYM", "AS", "ASC", "ASCII_SYM",
  "ASENSITIVE_SYM", "AT_SYM", "AUTHORS_SYM", "AUTOEXTEND_SIZE_SYM",
  "AUTO_INC", "AUTO_SYM", "AVG_ROW_LENGTH", "AVG_SYM", "BACKUP_SYM",
  "BEFORE_SYM", "BEGIN_SYM", "BETWEEN_SYM", "BIGINT", "BINARY",
  "BINLOG_SYM", "BIN_NUM", "BIT_AND", "BIT_OR", "BIT_SYM", "BIT_XOR",
  "BLOB_SYM", "BLOCK_SYM", "BOOLEAN_SYM", "BOOL_SYM", "BOTH", "BTREE_SYM",
  "BY", "BYTE_SYM", "CACHE_SYM", "CALL_SYM", "CASCADE", "CASCADED",
  "CASE_SYM", "CAST_SYM", "CATALOG_NAME_SYM", "CHAIN_SYM", "CHANGE",
  "CHANGED", "CHARSET", "CHAR_SYM", "CHECKPOINT_SYM", "CHECKSUM_SYM",
  "CHECK_SYM", "CIPHER_SYM", "CLASS_ORIGIN_SYM", "CLIENT_SYM",
  "CLIENT_STATS_SYM", "CLOSE_SYM", "COALESCE", "CODE_SYM", "COLLATE_SYM",
  "COLLATION_SYM", "COLUMNS", "COLUMN_ADD_SYM", "COLUMN_CHECK_SYM",
  "COLUMN_CREATE_SYM", "COLUMN_DELETE_SYM", "COLUMN_GET_SYM", "COLUMN_SYM",
  "COLUMN_NAME_SYM", "COMMENT_SYM", "COMMITTED_SYM", "COMMIT_SYM",
  "COMPACT_SYM", "COMPLETION_SYM", "COMPRESSED_SYM", "CONCURRENT",
  "CONDITION_SYM", "CONNECTION_SYM", "CONSISTENT_SYM", "CONSTRAINT",
  "CONSTRAINT_CATALOG_SYM", "CONSTRAINT_NAME_SYM", "CONSTRAINT_SCHEMA_SYM",
  "CONTAINS_SYM", "CONTEXT_SYM", "CONTINUE_SYM", "CONTRIBUTORS_SYM",
  "CONVERT_SYM", "COUNT_SYM", "CPU_SYM", "CREATE", "CROSS", "CUBE_SYM",
  "CURDATE", "CURRENT_USER", "CURRENT_POS_SYM", "CURSOR_SYM",
  "CURSOR_NAME_SYM", "CURTIME", "DATABASE", "DATABASES", "DATAFILE_SYM",
  "DATA_SYM", "DATETIME", "DATE_ADD_INTERVAL", "DATE_SUB_INTERVAL",
  "DATE_SYM", "DAY_HOUR_SYM", "DAY_MICROSECOND_SYM", "DAY_MINUTE_SYM",
  "DAY_SECOND_SYM", "DAY_SYM", "DEALLOCATE_SYM", "DECIMAL_NUM",
  "DECIMAL_SYM", "DECLARE_SYM", "DEFAULT", "DEFINER_SYM", "DELAYED_SYM",
  "DELAY_KEY_WRITE_SYM", "DELETE_SYM", "DESC", "DESCRIBE", "DES_KEY_FILE",
  "DETERMINISTIC_SYM", "DIRECTORY_SYM", "DISABLE_SYM", "DISCARD",
  "DISK_SYM", "DISTINCT", "DIV_SYM", "DOUBLE_SYM", "DO_SYM", "DROP",
  "DUAL_SYM", "DUMPFILE", "DUPLICATE_SYM", "DYNAMIC_SYM", "EACH_SYM",
  "ELSE", "ELSEIF_SYM", "ENABLE_SYM", "ENCLOSED", "END", "ENDS_SYM",
  "END_OF_INPUT", "ENGINES_SYM", "ENGINE_SYM", "ENUM", "EQ", "EQUAL_SYM",
  "ERROR_SYM", "ERRORS", "ESCAPED", "ESCAPE_SYM", "EVENTS_SYM",
  "EVENT_SYM", "EVERY_SYM", "EXAMINED_SYM", "EXECUTE_SYM", "EXISTS",
  "EXIT_SYM", "EXPANSION_SYM", "EXTENDED_SYM", "EXTENT_SIZE_SYM",
  "EXTRACT_SYM", "FALSE_SYM", "FAST_SYM", "FAULTS_SYM", "FETCH_SYM",
  "FILE_SYM", "FIRST_SYM", "FIXED_SYM", "FLOAT_NUM", "FLOAT_SYM",
  "FLUSH_SYM", "FORCE_SYM", "FOREIGN", "FOR_SYM", "FOUND_SYM", "FROM",
  "FULL", "FULLTEXT_SYM", "FUNCTION_SYM", "GE", "GENERAL", "GENERATED_SYM",
  "GEOMETRYCOLLECTION", "GEOMETRY_SYM", "GET_FORMAT", "GLOBAL_SYM",
  "GRANT", "GRANTS", "GROUP_SYM", "GROUP_CONCAT_SYM", "GT_SYM",
  "HANDLER_SYM", "HARD_SYM", "HASH_SYM", "HAVING", "HELP_SYM", "HEX_NUM",
  "HEX_STRING", "HIGH_PRIORITY", "HOST_SYM", "HOSTS_SYM",
  "HOUR_MICROSECOND_SYM", "HOUR_MINUTE_SYM", "HOUR_SECOND_SYM", "HOUR_SYM",
  "IDENT", "IDENTIFIED_SYM", "IDENT_QUOTED", "IF", "IGNORE_SYM",
  "IGNORE_SERVER_IDS_SYM", "IMPORT", "INDEXES", "INDEX_SYM",
  "INDEX_STATS_SYM", "INFILE", "INITIAL_SIZE_SYM", "INNER_SYM",
  "INOUT_SYM", "INSENSITIVE_SYM", "INSERT", "INSERT_METHOD", "INSTALL_SYM",
  "INTERVAL_SYM", "INTO", "INT_SYM", "INVOKER_SYM", "IN_SYM", "IO_SYM",
  "IPC_SYM", "IS", "ISOLATION", "ISSUER_SYM", "ITERATE_SYM", "JOIN_SYM",
  "KEYS", "KEY_BLOCK_SIZE", "KEY_SYM", "KILL_SYM", "LANGUAGE_SYM",
  "LAST_SYM", "LAST_VALUE", "LE", "LEADING", "LEAVES", "LEAVE_SYM", "LEFT",
  "LESS_SYM", "LEVEL_SYM", "LEX_HOSTNAME", "LIKE", "LIMIT", "LINEAR_SYM",
  "LINES", "LINESTRING", "LIST_SYM", "LOAD", "LOCAL_SYM", "LOCATOR_SYM",
  "LOCKS_SYM", "LOCK_SYM", "LOGFILE_SYM", "LOGS_SYM", "LONGBLOB",
  "LONGTEXT", "LONG_NUM", "LONG_SYM", "LOOP_SYM", "LOW_PRIORITY", "LT",
  "MASTER_CONNECT_RETRY_SYM", "MASTER_GTID_POS_SYM", "MASTER_HOST_SYM",
  "MASTER_LOG_FILE_SYM", "MASTER_LOG_POS_SYM", "MASTER_PASSWORD_SYM",
  "MASTER_PORT_SYM", "MASTER_SERVER_ID_SYM", "MASTER_SSL_CAPATH_SYM",
  "MASTER_SSL_CA_SYM", "MASTER_SSL_CERT_SYM", "MASTER_SSL_CIPHER_SYM",
  "MASTER_SSL_CRL_SYM", "MASTER_SSL_CRLPATH_SYM", "MASTER_SSL_KEY_SYM",
  "MASTER_SSL_SYM", "MASTER_SSL_VERIFY_SERVER_CERT_SYM", "MASTER_SYM",
  "MASTER_USER_SYM", "MASTER_USE_GTID_SYM", "MASTER_HEARTBEAT_PERIOD_SYM",
  "MATCH", "MAX_CONNECTIONS_PER_HOUR", "MAX_QUERIES_PER_HOUR", "MAX_ROWS",
  "MAX_SIZE_SYM", "MAX_SYM", "MAX_UPDATES_PER_HOUR",
  "MAX_USER_CONNECTIONS_SYM", "MAX_VALUE_SYM", "MEDIUMBLOB", "MEDIUMINT",
  "MEDIUMTEXT", "MEDIUM_SYM", "MEMORY_SYM", "MERGE_SYM",
  "MESSAGE_TEXT_SYM", "MICROSECOND_SYM", "MIGRATE_SYM",
  "MINUTE_MICROSECOND_SYM", "MINUTE_SECOND_SYM", "MINUTE_SYM", "MIN_ROWS",
  "MIN_SYM", "MODE_SYM", "MODIFIES_SYM", "MODIFY_SYM", "MOD_SYM",
  "MONTH_SYM", "MULTILINESTRING", "MULTIPOINT", "MULTIPOLYGON",
  "MUTEX_SYM", "MYSQL_ERRNO_SYM", "NAMES_SYM", "NAME_SYM", "NATIONAL_SYM",
  "NATURAL", "NCHAR_STRING", "NCHAR_SYM", "NDBCLUSTER_SYM", "NE", "NEG",
  "NEW_SYM", "NEXT_SYM", "NODEGROUP_SYM", "NONE_SYM", "NOT2_SYM",
  "NOT_SYM", "NOW_SYM", "NO_SYM", "NO_WAIT_SYM", "NO_WRITE_TO_BINLOG",
  "NULL_SYM", "NUM", "NUMERIC_SYM", "NVARCHAR_SYM", "OFFSET_SYM",
  "OLD_PASSWORD", "ON", "ONE_SYM", "ONLY_SYM", "ONLINE_SYM", "OPEN_SYM",
  "OPTIMIZE", "OPTIONS_SYM", "OPTION", "OPTIONALLY", "OR2_SYM",
  "ORDER_SYM", "OR_OR_SYM", "OR_SYM", "OUTER", "OUTFILE", "OUT_SYM",
  "OWNER_SYM", "PACK_KEYS_SYM", "PAGE_SYM", "PAGE_CHECKSUM_SYM",
  "PARAM_MARKER", "PARSER_SYM", "PARSE_VCOL_EXPR_SYM", "PARTIAL",
  "PARTITIONING_SYM", "PARTITIONS_SYM", "PARTITION_SYM", "PASSWORD",
  "PERSISTENT_SYM", "PHASE_SYM", "PLUGINS_SYM", "PLUGIN_SYM", "POINT_SYM",
  "POLYGON", "PORT_SYM", "POSITION_SYM", "PRECISION", "PREPARE_SYM",
  "PRESERVE_SYM", "PREV_SYM", "PRIMARY_SYM", "PRIVILEGES", "PROCEDURE_SYM",
  "PROCESS", "PROCESSLIST_SYM", "PROFILE_SYM", "PROFILES_SYM", "PROXY_SYM",
  "PURGE", "QUARTER_SYM", "QUERY_SYM", "QUICK", "RANGE_SYM", "READS_SYM",
  "READ_ONLY_SYM", "READ_SYM", "READ_WRITE_SYM", "REAL", "REBUILD_SYM",
  "RECOVER_SYM", "REDOFILE_SYM", "REDO_BUFFER_SIZE_SYM", "REDUNDANT_SYM",
  "REFERENCES", "REGEXP", "RELAY", "RELAYLOG_SYM", "RELAY_LOG_FILE_SYM",
  "RELAY_LOG_POS_SYM", "RELAY_THREAD", "RELEASE_SYM", "RELOAD",
  "REMOVE_SYM", "RENAME", "REORGANIZE_SYM", "REPAIR", "REPEATABLE_SYM",
  "REPEAT_SYM", "REPLACE", "REPLICATION", "REQUIRE_SYM", "RESET_SYM",
  "RESIGNAL_SYM", "RESOURCES", "RESTORE_SYM", "RESTRICT", "RESUME_SYM",
  "RETURNS_SYM", "RETURN_SYM", "REVOKE", "RIGHT", "ROLLBACK_SYM",
  "ROLLUP_SYM", "ROUTINE_SYM", "ROWS_SYM", "ROW_FORMAT_SYM", "ROW_SYM",
  "RTREE_SYM", "SAVEPOINT_SYM", "SCHEDULE_SYM", "SCHEMA_NAME_SYM",
  "SECOND_MICROSECOND_SYM", "SECOND_SYM", "SECURITY_SYM", "SELECT_SYM",
  "SENSITIVE_SYM", "SEPARATOR_SYM", "SERIALIZABLE_SYM", "SERIAL_SYM",
  "SESSION_SYM", "SERVER_SYM", "SERVER_OPTIONS", "SET", "SET_VAR",
  "SHARE_SYM", "SHIFT_LEFT", "SHIFT_RIGHT", "SHOW", "SHUTDOWN",
  "SIGNAL_SYM", "SIGNED_SYM", "SIMPLE_SYM", "SLAVE", "SLAVES",
  "SLAVE_POS_SYM", "SLOW", "SMALLINT", "SNAPSHOT_SYM", "SOCKET_SYM",
  "SOFT_SYM", "SONAME_SYM", "SOUNDS_SYM", "SOURCE_SYM", "SPATIAL_SYM",
  "SPECIFIC_SYM", "SQLEXCEPTION_SYM", "SQLSTATE_SYM", "SQLWARNING_SYM",
  "SQL_BIG_RESULT", "SQL_BUFFER_RESULT", "SQL_CACHE_SYM",
  "SQL_CALC_FOUND_ROWS", "SQL_NO_CACHE_SYM", "SQL_SMALL_RESULT", "SQL_SYM",
  "SQL_THREAD", "SSL_SYM", "STARTING", "STARTS_SYM", "START_SYM",
  "STATUS_SYM", "STDDEV_SAMP_SYM", "STD_SYM", "STOP_SYM", "STORAGE_SYM",
  "STRAIGHT_JOIN", "STRING_SYM", "SUBCLASS_ORIGIN_SYM", "SUBDATE_SYM",
  "SUBJECT_SYM", "SUBPARTITIONS_SYM", "SUBPARTITION_SYM", "SUBSTRING",
  "SUM_SYM", "SUPER_SYM", "SUSPEND_SYM", "SWAPS_SYM", "SWITCHES_SYM",
  "SYSDATE", "TABLES", "TABLESPACE", "TABLE_REF_PRIORITY",
  "TABLE_STATS_SYM", "TABLE_SYM", "TABLE_CHECKSUM_SYM", "TABLE_NAME_SYM",
  "TEMPORARY", "TEMPTABLE_SYM", "TERMINATED", "TEXT_STRING", "TEXT_SYM",
  "THAN_SYM", "THEN_SYM", "TIMESTAMP", "TIMESTAMP_ADD", "TIMESTAMP_DIFF",
  "TIME_SYM", "TINYBLOB", "TINYINT", "TINYTEXT", "TO_SYM", "TRAILING",
  "TRANSACTION_SYM", "TRANSACTIONAL_SYM", "TRIGGERS_SYM", "TRIGGER_SYM",
  "TRIM", "TRUE_SYM", "TRUNCATE_SYM", "TYPES_SYM", "TYPE_SYM",
  "UDF_RETURNS_SYM", "ULONGLONG_NUM", "UNCOMMITTED_SYM", "UNDEFINED_SYM",
  "UNDERSCORE_CHARSET", "UNDOFILE_SYM", "UNDO_BUFFER_SIZE_SYM", "UNDO_SYM",
  "UNICODE_SYM", "UNINSTALL_SYM", "UNION_SYM", "UNIQUE_SYM", "UNKNOWN_SYM",
  "UNLOCK_SYM", "UNSIGNED", "UNTIL_SYM", "UPDATE_SYM", "UPGRADE_SYM",
  "USAGE", "USER", "USER_STATS_SYM", "USE_FRM", "USE_SYM", "USING",
  "UTC_DATE_SYM", "UTC_TIMESTAMP_SYM", "UTC_TIME_SYM", "VALUES",
  "VALUE_SYM", "VARBINARY", "VARCHAR", "VARIABLES", "VARIANCE_SYM",
  "VARYING", "VAR_SAMP_SYM", "VIA_SYM", "VIEW_SYM", "VIRTUAL_SYM",
  "WAIT_SYM", "WARNINGS", "WEEK_SYM", "WHEN_SYM", "WHERE", "WHILE_SYM",
  "WITH", "WITH_CUBE_SYM", "WITH_ROLLUP_SYM", "WORK_SYM", "WRAPPER_SYM",
  "WRITE_SYM", "X509_SYM", "XA_SYM", "XML_SYM", "XOR", "YEAR_MONTH_SYM",
  "YEAR_SYM", "ZEROFILL", "IMPOSSIBLE_ACTION", "'|'", "'&'", "'-'", "'+'",
  "'*'", "'/'", "'%'", "'^'", "'~'", "'('", "')'", "','", "'!'", "'{'",
  "'}'", "';'", "'@'", "'.'", "':'", "$accept", "query", "$@1",
  "opt_end_of_input", "verb_clause", "statement", "deallocate",
  "deallocate_or_drop", "prepare", "prepare_src", "execute", "$@2",
  "execute_using", "execute_var_list", "execute_var_ident", "help", "$@3",
  "change", "$@4", "master_defs", "master_def", "ignore_server_id_list",
  "ignore_server_id", "master_file_def", "optional_connection_name",
  "connection_name", "create", "$@5", "$@6", "$@7", "$@8", "$@9", "$@10",
  "server_def", "server_options_list", "server_option", "event_tail",
  "$@11", "ev_schedule_time", "$@12", "opt_ev_status", "ev_starts",
  "ev_ends", "opt_ev_on_completion", "ev_on_completion", "opt_ev_comment",
  "ev_sql_stmt", "$@13", "ev_sql_stmt_inner", "clear_privileges",
  "sp_name", "sp_a_chistics", "sp_c_chistics", "sp_chistic",
  "sp_c_chistic", "sp_suid", "call", "$@14", "opt_sp_cparam_list",
  "opt_sp_cparams", "sp_cparams", "sp_fdparam_list", "sp_fdparams",
  "sp_init_param", "sp_fdparam", "sp_pdparam_list", "sp_pdparams",
  "sp_pdparam", "sp_opt_inout", "sp_proc_stmts", "sp_proc_stmts1",
  "sp_decls", "sp_decl", "$@15", "$@16", "sp_cursor_stmt", "$@17",
  "sp_handler_type", "sp_hcond_list", "sp_hcond_element", "sp_cond",
  "sqlstate", "opt_value", "sp_hcond", "signal_stmt", "signal_value",
  "opt_signal_value", "opt_set_signal_information",
  "signal_information_item_list", "signal_allowed_expr",
  "signal_condition_information_item_name", "resignal_stmt",
  "sp_decl_idents", "sp_opt_default", "sp_proc_stmt", "sp_proc_stmt_if",
  "$@18", "sp_proc_stmt_statement", "$@19", "sp_proc_stmt_return", "$@20",
  "sp_proc_stmt_unlabeled", "$@21", "sp_proc_stmt_leave",
  "sp_proc_stmt_iterate", "sp_proc_stmt_open", "sp_proc_stmt_fetch",
  "$@22", "sp_proc_stmt_close", "sp_opt_fetch_noise", "sp_fetch_list",
  "sp_if", "$@23", "$@24", "$@25", "sp_elseifs", "case_stmt_specification",
  "simple_case_stmt", "$@26", "$@27", "searched_case_stmt", "$@28",
  "simple_when_clause_list", "searched_when_clause_list",
  "simple_when_clause", "$@29", "$@30", "searched_when_clause", "$@31",
  "$@32", "else_clause_opt", "sp_labeled_control", "$@33", "sp_opt_label",
  "sp_labeled_block", "$@34", "sp_unlabeled_block", "$@35",
  "sp_block_content", "$@36", "sp_unlabeled_control", "$@37", "$@38",
  "$@39", "trg_action_time", "trg_event", "change_tablespace_access",
  "change_tablespace_info", "tablespace_info", "opt_logfile_group_name",
  "alter_tablespace_info", "logfile_group_info",
  "alter_logfile_group_info", "add_log_file", "change_ts_option_list",
  "$@40", "change_ts_options", "change_ts_option",
  "tablespace_option_list", "tablespace_options", "tablespace_option",
  "alter_tablespace_option_list", "alter_tablespace_options",
  "alter_tablespace_option", "logfile_group_option_list",
  "logfile_group_options", "logfile_group_option",
  "alter_logfile_group_option_list", "alter_logfile_group_options",
  "alter_logfile_group_option", "ts_datafile", "lg_undofile",
  "lg_redofile", "tablespace_name", "logfile_group_name", "ts_access_mode",
  "opt_ts_initial_size", "opt_ts_autoextend_size", "opt_ts_max_size",
  "opt_ts_extent_size", "opt_ts_undo_buffer_size",
  "opt_ts_redo_buffer_size", "opt_ts_nodegroup", "opt_ts_comment",
  "opt_ts_engine", "opt_ts_wait", "ts_wait", "size_number", "create_body",
  "$@41", "$@42", "create_like", "opt_create_select", "$@43", "$@44",
  "opt_create_partitioning", "opt_partitioning", "partitioning", "$@45",
  "have_partitioning", "partition_entry", "$@46", "partition",
  "part_type_def", "$@47", "opt_linear", "opt_key_algo", "part_field_list",
  "part_field_item_list", "part_field_item", "part_column_list",
  "part_func", "sub_part_func", "opt_num_parts", "opt_sub_part", "$@48",
  "$@49", "sub_part_field_list", "sub_part_field_item", "part_func_expr",
  "opt_num_subparts", "part_defs", "part_def_list", "part_definition",
  "$@50", "part_name", "opt_part_values", "$@51", "$@52", "part_func_max",
  "part_values_in", "part_value_list", "part_value_item", "$@53", "$@54",
  "part_value_item_list", "part_value_expr_item", "opt_sub_partition",
  "sub_part_list", "sub_part_definition", "$@55", "sub_name",
  "opt_part_options", "opt_part_option_list", "opt_part_option",
  "create_select", "$@56", "$@57", "opt_as", "opt_create_database_options",
  "create_database_options", "create_database_option", "opt_table_options",
  "table_options", "table_option", "opt_if_not_exists",
  "opt_create_table_options", "create_table_options_space_separated",
  "create_table_options", "create_table_option", "$@58", "default_charset",
  "default_collation", "storage_engines", "known_storage_engines",
  "row_types", "merge_insert_types", "opt_select_from", "udf_type",
  "create_field_list", "field_list", "field_list_item", "column_def",
  "key_def", "$@59", "$@60", "$@61", "$@62", "opt_check_constraint",
  "check_constraint", "opt_constraint", "constraint", "field_spec", "$@63",
  "field_def", "opt_generated_always", "vcol_opt_specifier",
  "vcol_opt_attribute", "vcol_opt_attribute_list", "vcol_attribute",
  "parse_vcol_expr", "virtual_column_func", "type", "$@64", "$@65",
  "spatial_type", "char", "nchar", "varchar", "nvarchar", "int_type",
  "real_type", "float_options", "precision", "field_options",
  "field_opt_list", "field_option", "field_length", "opt_field_length",
  "opt_precision", "opt_attribute", "opt_attribute_list", "attribute",
  "type_with_opt_collate", "now_or_signed_literal", "hex_num_or_string",
  "charset", "charset_name", "charset_name_or_default",
  "opt_load_data_charset", "old_or_new_charset_name",
  "old_or_new_charset_name_or_default", "collation_name", "opt_collate",
  "collation_name_or_default", "opt_default", "ascii", "unicode",
  "opt_binary", "opt_bin_mod", "opt_primary", "references", "opt_ref_list",
  "ref_list", "opt_match_clause", "opt_on_update_delete", "delete_option",
  "normal_key_type", "constraint_key_type", "key_or_index",
  "opt_key_or_index", "keys_or_index", "opt_unique", "fulltext", "spatial",
  "init_key_options", "key_alg", "normal_key_options",
  "fulltext_key_options", "spatial_key_options", "normal_key_opts",
  "spatial_key_opts", "fulltext_key_opts", "key_using_alg", "all_key_opt",
  "normal_key_opt", "spatial_key_opt", "fulltext_key_opt",
  "btree_or_rtree", "key_list", "key_part", "opt_ident",
  "opt_if_not_exists_ident", "opt_component", "string_list", "alter",
  "$@66", "$@67", "$@68", "$@69", "$@70", "$@71", "$@72",
  "ev_alter_on_schedule_completion", "opt_ev_rename_to", "opt_ev_sql_stmt",
  "ident_or_empty", "alter_commands", "$@73", "$@74", "$@75",
  "remove_partitioning", "all_or_alt_part_name_list", "add_partition_rule",
  "$@76", "add_part_extra", "reorg_partition_rule", "$@77",
  "reorg_parts_rule", "$@78", "alt_part_name_list", "alt_part_name_item",
  "alter_list", "add_column", "alter_list_item", "$@79", "$@80", "$@81",
  "opt_column", "opt_ignore", "alter_options", "$@82",
  "alter_options_part2", "alter_option_list", "alter_option",
  "opt_restrict", "opt_place", "opt_to", "slave", "$@83", "$@84", "$@85",
  "start", "opt_start_transaction_option_list",
  "start_transaction_option_list", "start_transaction_option",
  "slave_thread_opts", "$@86", "slave_thread_opt_list", "slave_thread_opt",
  "slave_until", "slave_until_opts", "checksum", "$@87",
  "opt_checksum_type", "repair", "$@88", "opt_mi_repair_type",
  "mi_repair_types", "mi_repair_type", "analyze", "$@89",
  "analyze_table_list", "analyze_table_elem_spec",
  "opt_persistent_stat_clause", "persistent_stat_spec",
  "persistent_column_stat_spec", "$@90", "persistent_index_stat_spec",
  "$@91", "table_column_list", "table_index_list", "table_index_name",
  "binlog_base64_event", "check", "$@92", "opt_mi_check_type",
  "mi_check_types", "mi_check_type", "optimize", "$@93",
  "opt_no_write_to_binlog", "rename", "$@94", "rename_list",
  "table_to_table_list", "table_to_table", "keycache", "$@95",
  "keycache_list_or_parts", "keycache_list", "assign_to_keycache",
  "assign_to_keycache_parts", "key_cache_name", "preload", "$@96",
  "preload_list_or_parts", "preload_list", "preload_keys",
  "preload_keys_parts", "adm_partition", "$@97", "cache_keys_spec", "$@98",
  "cache_key_list_or_empty", "opt_ignore_leaves", "select", "select_init",
  "select_paren", "select_paren_derived", "select_init2", "$@99",
  "select_part2", "$@100", "$@101", "select_into", "select_from",
  "select_options", "select_option_list", "select_option",
  "select_lock_type", "select_item_list", "select_item", "remember_name",
  "remember_end", "select_alias", "opt_default_time_precision",
  "opt_time_precision", "optional_braces", "expr", "bool_pri", "predicate",
  "bit_expr", "or", "and", "not", "not2", "comp_op", "all_or_any",
  "opt_dyncol_type", "dyncol_type", "dyncall_create_element",
  "dyncall_create_list", "simple_expr", "function_call_keyword",
  "function_call_nonkeyword", "function_call_conflict",
  "geometry_function", "function_call_generic", "@102", "fulltext_options",
  "opt_natural_language_mode", "opt_query_expansion", "opt_udf_expr_list",
  "udf_expr_list", "udf_expr", "sum_expr", "$@103", "$@104", "$@105",
  "variable", "$@106", "variable_aux", "opt_distinct",
  "opt_gconcat_separator", "opt_gorder_clause", "in_sum_expr", "$@107",
  "cast_type", "$@108", "opt_expr_list", "expr_list", "ident_list_arg",
  "ident_list", "opt_expr", "opt_else", "when_list", "table_ref",
  "join_table_list", "esc_table_ref", "derived_table_list", "join_table",
  "$@109", "$@110", "$@111", "$@112", "$@113", "$@114", "inner_join",
  "normal_join", "table_factor", "$@115", "select_derived_union", "$@116",
  "$@117", "select_init2_derived", "select_part2_derived", "$@118",
  "$@119", "select_derived", "$@120", "select_derived2", "$@121", "$@122",
  "get_select_lex", "select_derived_init", "opt_outer",
  "index_hint_clause", "index_hint_type", "index_hint_definition", "$@123",
  "$@124", "index_hints_list", "opt_index_hints_list", "$@125",
  "opt_key_definition", "$@126", "opt_key_usage_list", "key_usage_element",
  "key_usage_list", "using_list", "interval", "interval_time_stamp",
  "date_time_type", "table_alias", "opt_table_alias", "opt_all",
  "where_clause", "$@127", "having_clause", "$@128", "opt_escape",
  "group_clause", "group_list", "olap_opt", "alter_order_clause",
  "alter_order_list", "alter_order_item", "opt_order_clause",
  "order_clause", "$@129", "order_list", "order_dir",
  "opt_limit_clause_init", "opt_limit_clause", "limit_clause",
  "limit_options", "limit_option", "limit_rows_option",
  "delete_limit_clause", "int_num", "ulong_num", "real_ulong_num",
  "ulonglong_num", "real_ulonglong_num", "dec_num_error", "dec_num",
  "choice", "procedure_clause", "$@130", "procedure_list",
  "procedure_list2", "procedure_item", "select_var_list_init", "$@131",
  "select_var_list", "select_var_ident", "into", "$@132",
  "into_destination", "$@133", "$@134", "do", "$@135", "drop", "$@136",
  "$@137", "$@138", "table_list", "table_name", "table_alias_ref_list",
  "table_alias_ref", "opt_if_exists", "opt_temporary", "insert", "$@139",
  "$@140", "replace", "$@141", "$@142", "insert_lock_option",
  "replace_lock_option", "insert2", "insert_table", "insert_field_spec",
  "$@143", "fields", "insert_values", "$@144", "$@145", "values_list",
  "ident_eq_list", "ident_eq_value", "equal", "opt_equal", "no_braces",
  "$@146", "opt_values", "values", "expr_or_default", "opt_insert_update",
  "$@147", "update", "$@148", "$@149", "update_list", "update_elem",
  "insert_update_list", "insert_update_elem", "opt_low_priority", "delete",
  "$@150", "single_multi", "$@151", "$@152", "$@153", "table_wild_list",
  "table_wild_one", "opt_wild", "opt_delete_options", "opt_delete_option",
  "truncate", "$@154", "opt_table_sym", "opt_profile_defs", "profile_defs",
  "profile_def", "opt_profile_args", "show", "$@155", "show_param",
  "$@156", "$@157", "show_engine_param", "master_or_binary", "opt_storage",
  "opt_db", "opt_full", "from_or_in", "binlog_in", "binlog_from",
  "wild_and_where", "describe", "$@158", "$@159", "describe_command",
  "opt_extended_describe", "opt_describe_column", "flush", "$@160",
  "flush_options", "$@161", "$@162", "opt_with_read_lock",
  "flush_options_list", "flush_option", "opt_table_list",
  "optional_flush_tables_arguments", "reset", "$@163", "reset_options",
  "reset_option", "$@164", "slave_reset_options", "purge", "$@165",
  "purge_options", "purge_option", "kill", "$@166", "kill_type",
  "kill_option", "kill_expr", "use", "load", "$@167", "$@168", "$@169",
  "$@170", "data_or_xml", "opt_local", "load_data_lock", "opt_duplicate",
  "opt_field_term", "field_term_list", "field_term", "opt_line_term",
  "line_term_list", "line_term", "opt_xml_rows_identified_by",
  "opt_ignore_lines", "lines_or_rows", "opt_field_or_var_spec",
  "fields_or_vars", "field_or_var", "opt_load_data_set_spec",
  "load_data_set_list", "load_data_set_elem", "text_literal",
  "text_string", "param_marker", "signed_literal", "literal",
  "NUM_literal", "insert_ident", "table_wild", "order_ident",
  "simple_ident", "simple_ident_nospvar", "simple_ident_q", "field_ident",
  "table_ident", "table_ident_opt_wild", "table_ident_nodb", "IDENT_sys",
  "TEXT_STRING_sys", "TEXT_STRING_literal", "TEXT_STRING_filesystem",
  "ident", "label_ident", "ident_or_text", "user", "keyword", "keyword_sp",
  "set", "$@171", "start_option_value_list", "$@172", "$@173", "$@174",
  "start_option_value_list_following_option_type", "$@175",
  "option_value_list_continued", "option_value_list", "$@176", "$@177",
  "option_value", "$@178", "option_type", "opt_var_type",
  "opt_var_ident_type", "option_value_following_option_type",
  "option_value_no_option_type", "internal_variable_name",
  "transaction_characteristics", "transaction_access_mode",
  "isolation_level", "transaction_access_mode_types", "isolation_types",
  "text_or_password", "set_expr_or_default", "lock", "$@179",
  "table_or_tables", "table_lock_list", "table_lock", "lock_option",
  "unlock", "$@180", "handler", "$@181", "handler_read_or_scan",
  "handler_scan_function", "handler_rkey_function", "$@182",
  "handler_rkey_mode", "revoke", "revoke_command", "grant",
  "grant_command", "opt_table", "grant_privileges", "opt_privileges",
  "object_privilege_list", "object_privilege", "$@183", "$@184", "$@185",
  "$@186", "opt_and", "require_list", "require_list_element",
  "grant_ident", "user_list", "grant_list", "via_or_with", "using_or_as",
  "grant_user", "opt_column_list", "column_list", "column_list_id",
  "require_clause", "grant_options", "opt_grant_option",
  "grant_option_list", "grant_option", "begin", "$@187", "opt_work",
  "opt_chain", "opt_release", "opt_savepoint", "commit", "rollback",
  "savepoint", "release", "union_clause", "union_list", "$@188",
  "union_opt", "opt_union_order_or_limit", "union_order_or_limit", "$@189",
  "order_or_limit", "union_option", "query_specification",
  "query_expression_body", "$@190", "subselect", "subselect_start",
  "subselect_end", "opt_query_expression_options",
  "query_expression_option_list", "query_expression_option",
  "view_or_trigger_or_sp_or_event", "definer_tail", "no_definer_tail",
  "definer_opt", "no_definer", "definer", "view_replace_or_algorithm",
  "view_replace", "view_algorithm", "view_suid", "view_tail", "$@191",
  "view_list_opt", "view_list", "view_select", "$@192", "view_select_aux",
  "view_check_option", "trigger_tail", "$@193", "$@194", "$@195",
  "udf_tail", "sf_tail", "$@196", "$@197", "$@198", "$@199", "$@200",
  "sp_tail", "$@201", "$@202", "$@203", "$@204", "xa", "xid",
  "begin_or_start", "opt_join_or_resume", "opt_one_phase", "opt_suspend",
  "$@205", "opt_migrate", "install", "uninstall", "keep_gcc_happy", 0
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,   636,   637,   638,   639,   640,   641,   642,   643,   644,
     645,   646,   647,   648,   649,   650,   651,   652,   653,   654,
     655,   656,   657,   658,   659,   660,   661,   662,   663,   664,
     665,   666,   667,   668,   669,   670,   671,   672,   673,   674,
     675,   676,   677,   678,   679,   680,   681,   682,   683,   684,
     685,   686,   687,   688,   689,   690,   691,   692,   693,   694,
     695,   696,   697,   698,   699,   700,   701,   702,   703,   704,
     705,   706,   707,   708,   709,   710,   711,   712,   713,   714,
     715,   716,   717,   718,   719,   720,   721,   722,   723,   724,
     725,   726,   727,   728,   729,   730,   731,   732,   733,   734,
     735,   736,   737,   738,   739,   740,   741,   742,   743,   744,
     745,   746,   747,   748,   749,   750,   751,   752,   753,   754,
     755,   756,   757,   758,   759,   760,   761,   762,   763,   764,
     765,   766,   767,   768,   769,   770,   771,   772,   773,   774,
     775,   776,   777,   778,   779,   780,   781,   782,   783,   784,
     785,   786,   787,   788,   789,   790,   791,   792,   793,   794,
     795,   796,   797,   798,   799,   800,   801,   802,   803,   804,
     805,   806,   807,   808,   809,   810,   811,   812,   813,   814,
     815,   816,   817,   818,   819,   820,   821,   822,   823,   824,
     825,   826,   827,   828,   829,   830,   831,   832,   833,   834,
     835,   836,   837,   838,   839,   840,   841,   842,   843,   844,
     845,   846,   847,   848,   849,   850,   851,   852,   853,   854,
     855,   856,   857,   858,   859,   860,   861,   862,   863,   864,
     865,   866,   867,   868,   869,   870,   871,   872,   873,   874,
     875,   876,   877,   878,   879,   880,   124,    38,    45,    43,
      42,    47,    37,    94,   126,    40,    41,    44,    33,   123,
     125,    59,    64,    46,    58
};
# endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint16 yyr1[] =
{
       0,   645,   646,   647,   646,   646,   648,   648,   649,   649,
     650,   650,   650,   650,   650,   650,   650,   650,   650,   650,
     650,   650,   650,   650,   650,   650,   650,   650,   650,   650,
     650,   650,   650,   650,   650,   650,   650,   650,   650,   650,
     650,   650,   650,   650,   650,   650,   650,   650,   650,   650,
     650,   650,   650,   650,   650,   650,   650,   650,   650,   650,
     650,   650,   650,   651,   652,   652,   653,   654,   654,   656,
     655,   657,   657,   658,   658,   659,   661,   660,   663,   662,
     664,   664,   665,   665,   665,   665,   665,   665,   665,   665,
     665,   665,   665,   665,   665,   665,   665,   665,   665,   666,
     666,   666,   667,   668,   668,   668,   668,   668,   668,   668,
     669,   669,   670,   672,   671,   673,   671,   674,   671,   675,
     671,   676,   671,   677,   671,   671,   671,   671,   671,   678,
     679,   679,   680,   680,   680,   680,   680,   680,   680,   682,
     681,   684,   683,   683,   685,   685,   685,   685,   686,   686,
     687,   687,   688,   688,   689,   689,   690,   690,   692,   691,
     693,   693,   693,   693,   693,   693,   693,   693,   693,   693,
     693,   693,   693,   694,   695,   695,   696,   696,   697,   697,
     698,   698,   698,   698,   698,   698,   698,   699,   699,   699,
     700,   700,   702,   701,   703,   703,   704,   704,   705,   705,
     706,   706,   707,   707,   708,   709,   710,   710,   711,   711,
     712,   713,   713,   713,   713,   714,   714,   715,   715,   716,
     716,   718,   717,   717,   719,   717,   717,   721,   720,   722,
     722,   723,   723,   724,   725,   725,   726,   727,   727,   728,
     728,   728,   728,   728,   729,   730,   730,   731,   731,   732,
     732,   733,   733,   734,   734,   734,   735,   735,   735,   735,
     735,   735,   735,   735,   735,   735,   735,   735,   736,   737,
     737,   738,   738,   739,   739,   739,   739,   739,   739,   739,
     739,   739,   739,   739,   739,   739,   741,   740,   743,   742,
     745,   744,   747,   746,   748,   749,   750,   752,   751,   753,
     754,   754,   754,   755,   755,   757,   758,   759,   756,   760,
     760,   760,   761,   761,   763,   764,   762,   766,   765,   767,
     767,   768,   768,   770,   771,   769,   773,   774,   772,   775,
     775,   777,   776,   778,   778,   780,   779,   782,   781,   784,
     783,   785,   786,   787,   785,   788,   785,   789,   789,   790,
     790,   790,   791,   792,   793,   794,   794,   795,   795,   796,
     797,   798,   798,   800,   799,   801,   801,   801,   802,   802,
     802,   803,   804,   804,   804,   805,   805,   805,   805,   805,
     805,   805,   805,   806,   807,   807,   807,   808,   808,   808,
     808,   808,   809,   810,   810,   810,   811,   811,   811,   811,
     811,   811,   811,   812,   813,   813,   813,   814,   814,   814,
     815,   816,   817,   818,   819,   820,   820,   820,   821,   822,
     823,   824,   825,   826,   827,   828,   829,   830,   830,   831,
     831,   832,   832,   834,   833,   833,   835,   833,   833,   836,
     836,   837,   838,   837,   839,   837,   840,   841,   841,   843,
     842,   844,   846,   845,   847,   848,   849,   848,   848,   848,
     848,   848,   850,   850,   851,   851,   852,   852,   853,   853,
     854,   855,   856,   857,   858,   858,   859,   860,   859,   861,
     859,   862,   862,   863,   864,   865,   865,   866,   866,   867,
     867,   869,   868,   870,   871,   872,   871,   873,   871,   874,
     874,   875,   875,   876,   876,   878,   879,   877,   880,   880,
     881,   881,   882,   882,   883,   883,   885,   884,   886,   887,
     887,   888,   888,   889,   889,   889,   889,   889,   889,   889,
     889,   889,   891,   892,   890,   893,   893,   894,   894,   895,
     895,   896,   896,   897,   897,   898,   898,   899,   900,   900,
     901,   901,   902,   902,   903,   903,   903,   904,   904,   904,
     904,   904,   904,   904,   904,   904,   904,   904,   904,   904,
     904,   905,   904,   904,   904,   904,   904,   904,   904,   904,
     904,   904,   904,   904,   904,   904,   904,   904,   906,   907,
     908,   909,   910,   910,   910,   910,   910,   910,   910,   911,
     911,   911,   912,   912,   913,   913,   913,   913,   914,   915,
     915,   916,   916,   917,   917,   919,   918,   920,   918,   921,
     918,   922,   918,   918,   918,   923,   923,   924,   925,   925,
     926,   928,   927,   929,   929,   930,   930,   931,   931,   931,
     932,   932,   933,   933,   934,   934,   934,   935,   936,   937,
     937,   937,   937,   937,   937,   937,   937,   937,   937,   937,
     937,   937,   937,   937,   937,   937,   937,   937,   937,   937,
     937,   937,   937,   937,   937,   937,   937,   937,   937,   937,
     937,   937,   937,   937,   938,   937,   939,   937,   937,   937,
     940,   940,   940,   940,   940,   940,   940,   940,   941,   942,
     942,   943,   943,   944,   944,   944,   944,   944,   945,   945,
     945,   945,   945,   946,   946,   946,   947,   947,   947,   948,
     949,   949,   950,   950,   951,   951,   951,   952,   952,   952,
     952,   953,   953,   954,   954,   955,   955,   956,   956,   957,
     957,   957,   957,   957,   957,   957,   957,   957,   957,   957,
     957,   957,   957,   957,   958,   959,   959,   960,   960,   961,
     961,   962,   962,   963,   963,   964,   964,   965,   965,   966,
     966,   967,   968,   968,   969,   969,   970,   970,   971,   971,
     971,   972,   972,   972,   973,   973,   973,   973,   973,   973,
     973,   974,   974,   975,   975,   976,   977,   977,   978,   978,
     979,   979,   979,   979,   980,   980,   980,   980,   980,   981,
     981,   981,   981,   981,   982,   983,   983,   984,   984,   985,
     985,   986,   986,   986,   987,   987,   988,   989,   990,   991,
     991,   992,   992,   993,   993,   994,   994,   995,   995,   996,
     996,   997,   997,   998,   998,   999,   999,   999,   999,   999,
     999,  1000,  1000,  1001,  1002,  1002,  1003,  1003,  1003,  1004,
    1004,  1005,  1005,  1006,  1006,  1007,  1008,  1008,  1009,  1009,
    1011,  1010,  1012,  1010,  1010,  1013,  1010,  1014,  1010,  1015,
    1010,  1016,  1010,  1017,  1010,  1010,  1010,  1010,  1010,  1010,
    1018,  1018,  1018,  1018,  1019,  1019,  1020,  1020,  1021,  1021,
    1022,  1022,  1022,  1022,  1022,  1022,  1022,  1022,  1022,  1022,
    1023,  1022,  1022,  1024,  1022,  1025,  1022,  1022,  1022,  1022,
    1026,  1027,  1027,  1029,  1028,  1030,  1030,  1030,  1032,  1031,
    1033,  1034,  1033,  1035,  1035,  1036,  1037,  1037,  1038,  1039,
    1039,  1039,  1040,  1039,  1041,  1042,  1039,  1039,  1039,  1039,
    1039,  1039,  1039,  1039,  1039,  1039,  1039,  1039,  1039,  1039,
    1043,  1043,  1044,  1044,  1046,  1045,  1047,  1047,  1048,  1048,
    1049,  1049,  1050,  1050,  1050,  1051,  1051,  1051,  1052,  1052,
    1052,  1052,  1054,  1053,  1055,  1053,  1053,  1053,  1056,  1053,
    1053,  1057,  1058,  1058,  1059,  1059,  1060,  1060,  1060,  1062,
    1061,  1063,  1063,  1064,  1064,  1064,  1065,  1065,  1065,  1066,
    1066,  1068,  1067,  1069,  1069,  1069,  1071,  1070,  1072,  1072,
    1073,  1073,  1074,  1074,  1074,  1076,  1075,  1077,  1077,  1078,
    1079,  1079,  1080,  1080,  1081,  1082,  1081,  1083,  1084,  1083,
    1085,  1085,  1085,  1086,  1086,  1086,  1087,  1087,  1088,  1090,
    1089,  1091,  1091,  1092,  1092,  1093,  1093,  1093,  1093,  1093,
    1093,  1095,  1094,  1096,  1096,  1096,  1098,  1097,  1097,  1099,
    1099,  1100,  1100,  1101,  1103,  1102,  1104,  1104,  1105,  1105,
    1106,  1107,  1108,  1108,  1110,  1109,  1111,  1111,  1112,  1112,
    1113,  1114,  1116,  1115,  1118,  1117,  1119,  1119,  1120,  1120,
    1121,  1122,  1122,  1123,  1123,  1124,  1124,  1126,  1125,  1128,
    1129,  1127,  1130,  1130,  1130,  1130,  1130,  1131,  1131,  1132,
    1132,  1133,  1133,  1134,  1134,  1134,  1135,  1135,  1135,  1136,
    1136,  1136,  1137,  1137,  1138,  1139,  1140,  1140,  1140,  1140,
    1140,  1141,  1141,  1141,  1142,  1142,  1142,  1143,  1143,  1144,
    1144,  1144,  1144,  1144,  1144,  1144,  1144,  1144,  1144,  1144,
    1145,  1145,  1145,  1145,  1145,  1145,  1146,  1146,  1146,  1146,
    1146,  1146,  1146,  1146,  1146,  1146,  1146,  1146,  1146,  1146,
    1147,  1147,  1147,  1147,  1147,  1147,  1147,  1147,  1147,  1147,
    1147,  1147,  1147,  1147,  1147,  1148,  1148,  1149,  1149,  1150,
    1150,  1151,  1151,  1152,  1152,  1152,  1152,  1152,  1152,  1153,
    1153,  1154,  1154,  1155,  1155,  1155,  1155,  1155,  1155,  1155,
    1155,  1155,  1155,  1155,  1156,  1157,  1157,  1158,  1158,  1158,
    1158,  1158,  1158,  1158,  1158,  1158,  1158,  1158,  1158,  1158,
    1158,  1158,  1158,  1158,  1158,  1158,  1158,  1158,  1158,  1158,
    1158,  1158,  1158,  1158,  1158,  1158,  1158,  1159,  1159,  1159,
    1159,  1159,  1159,  1159,  1159,  1159,  1159,  1159,  1159,  1159,
    1159,  1159,  1159,  1159,  1159,  1159,  1159,  1159,  1159,  1159,
    1159,  1159,  1159,  1159,  1160,  1160,  1160,  1160,  1160,  1160,
    1160,  1160,  1160,  1160,  1160,  1160,  1160,  1160,  1160,  1160,
    1160,  1160,  1160,  1160,  1160,  1160,  1160,  1160,  1160,  1160,
    1160,  1161,  1161,  1161,  1161,  1161,  1161,  1161,  1161,  1161,
    1161,  1161,  1161,  1161,  1161,  1161,  1161,  1161,  1161,  1162,
    1162,  1162,  1162,  1162,  1162,  1162,  1162,  1164,  1163,  1163,
    1165,  1165,  1166,  1166,  1167,  1167,  1168,  1168,  1169,  1169,
    1170,  1171,  1171,  1171,  1171,  1171,  1171,  1171,  1172,  1173,
    1171,  1171,  1171,  1171,  1171,  1171,  1171,  1171,  1171,  1171,
    1171,  1174,  1171,  1176,  1175,  1177,  1177,  1177,  1178,  1178,
    1179,  1179,  1180,  1180,  1182,  1181,  1183,  1183,  1183,  1183,
    1183,  1183,  1183,  1183,  1183,  1183,  1183,  1183,  1184,  1183,
    1185,  1185,  1186,  1186,  1187,  1187,  1188,  1188,  1189,  1189,
    1190,  1190,  1191,  1191,  1192,  1192,  1193,  1194,  1194,  1195,
    1195,  1196,  1197,  1196,  1198,  1196,  1196,  1199,  1196,  1200,
    1196,  1196,  1201,  1196,  1202,  1196,  1196,  1203,  1203,  1203,
    1204,  1204,  1206,  1205,  1205,  1205,  1207,  1208,  1209,  1207,
    1210,  1212,  1213,  1211,  1215,  1214,  1217,  1218,  1216,  1219,
    1220,  1221,  1221,  1222,  1222,  1222,  1222,  1223,  1223,  1225,
    1224,  1226,  1224,  1227,  1227,  1228,  1229,  1228,  1231,  1230,
    1232,  1232,  1233,  1233,  1234,  1234,  1235,  1235,  1236,  1236,
    1236,  1236,  1236,  1236,  1236,  1236,  1236,  1236,  1236,  1236,
    1237,  1237,  1237,  1237,  1237,  1237,  1237,  1237,  1237,  1238,
    1238,  1238,  1238,  1239,  1239,  1239,  1240,  1240,  1241,  1241,
    1242,  1243,  1242,  1244,  1245,  1244,  1246,  1246,  1247,  1247,
    1248,  1248,  1249,  1249,  1249,  1250,  1251,  1251,  1252,  1253,
    1253,  1255,  1254,  1256,  1256,  1257,  1257,  1257,  1258,  1258,
    1259,  1259,  1260,  1260,  1260,  1261,  1261,  1261,  1262,  1262,
    1262,  1262,  1262,  1263,  1264,  1264,  1264,  1264,  1265,  1265,
    1265,  1266,  1266,  1266,  1266,  1266,  1266,  1267,  1267,  1267,
    1267,  1267,  1268,  1268,  1268,  1268,  1268,  1269,  1269,  1269,
    1269,  1269,  1270,  1271,  1271,  1272,  1272,  1273,  1274,  1273,
    1275,  1275,  1276,  1276,  1277,  1279,  1278,  1280,  1280,  1281,
    1281,  1283,  1282,  1285,  1286,  1284,  1284,  1284,  1288,  1287,
    1290,  1289,  1291,  1289,  1289,  1289,  1289,  1289,  1289,  1292,
    1289,  1289,  1289,  1289,  1289,  1289,  1293,  1293,  1294,  1295,
    1295,  1296,  1297,  1297,  1298,  1298,  1300,  1301,  1299,  1303,
    1304,  1302,  1305,  1305,  1305,  1305,  1306,  1306,  1307,  1307,
    1308,  1309,  1309,  1309,  1310,  1309,  1311,  1311,  1312,  1312,
    1313,  1312,  1314,  1312,  1315,  1315,  1316,  1316,  1317,  1318,
    1318,  1319,  1319,  1321,  1320,  1322,  1322,  1323,  1323,  1324,
    1324,  1325,  1326,  1325,  1328,  1329,  1327,  1330,  1330,  1331,
    1332,  1332,  1333,  1334,  1334,  1336,  1335,  1338,  1337,  1339,
    1337,  1340,  1337,  1341,  1341,  1342,  1342,  1343,  1343,  1344,
    1344,  1345,  1345,  1345,  1347,  1346,  1348,  1348,  1349,  1349,
    1350,  1350,  1351,  1351,  1351,  1351,  1351,  1351,  1351,  1351,
    1351,  1352,  1352,  1354,  1353,  1355,  1355,  1355,  1355,  1355,
    1355,  1355,  1355,  1355,  1355,  1355,  1355,  1355,  1355,  1356,
    1355,  1357,  1355,  1355,  1355,  1355,  1355,  1355,  1355,  1355,
    1355,  1355,  1355,  1355,  1355,  1355,  1355,  1355,  1355,  1355,
    1355,  1355,  1355,  1355,  1355,  1355,  1355,  1355,  1355,  1355,
    1355,  1355,  1355,  1355,  1355,  1355,  1355,  1355,  1355,  1355,
    1355,  1358,  1358,  1358,  1359,  1359,  1360,  1360,  1361,  1361,
    1362,  1362,  1363,  1363,  1364,  1364,  1365,  1365,  1366,  1366,
    1366,  1368,  1367,  1369,  1367,  1370,  1370,  1371,  1371,  1371,
    1372,  1372,  1372,  1374,  1373,  1376,  1377,  1375,  1375,  1378,
    1378,  1379,  1379,  1380,  1380,  1380,  1380,  1380,  1380,  1380,
    1380,  1380,  1380,  1380,  1380,  1380,  1380,  1380,  1380,  1380,
    1380,  1380,  1381,  1381,  1382,  1382,  1384,  1383,  1385,  1385,
    1387,  1386,  1386,  1386,  1388,  1388,  1390,  1389,  1391,  1392,
    1392,  1394,  1393,  1395,  1395,  1395,  1396,  1396,  1396,  1397,
    1397,  1398,  1400,  1401,  1402,  1403,  1399,  1404,  1404,  1405,
    1405,  1406,  1406,  1406,  1407,  1407,  1407,  1408,  1408,  1409,
    1409,  1410,  1410,  1410,  1410,  1411,  1411,  1412,  1412,  1413,
    1413,  1414,  1414,  1415,  1415,  1416,  1416,  1417,  1417,  1417,
    1418,  1418,  1419,  1419,  1420,  1420,  1421,  1421,  1422,  1423,
    1423,  1423,  1423,  1424,  1424,  1424,  1424,  1425,  1426,  1426,
    1426,  1427,  1427,  1427,  1427,  1427,  1427,  1427,  1427,  1427,
    1427,  1427,  1427,  1427,  1428,  1428,  1428,  1428,  1428,  1429,
    1429,  1430,  1430,  1431,  1432,  1432,  1433,  1433,  1434,  1434,
    1434,  1435,  1435,  1435,  1435,  1436,  1436,  1436,  1437,  1437,
    1438,  1439,  1439,  1440,  1441,  1442,  1443,  1443,  1444,  1444,
    1445,  1445,  1445,  1446,  1446,  1446,  1447,  1447,  1447,  1447,
    1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,
    1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,
    1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,
    1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,
    1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,
    1447,  1447,  1447,  1447,  1447,  1448,  1448,  1448,  1448,  1448,
    1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,
    1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,
    1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,
    1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,
    1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,
    1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,
    1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,
    1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,
    1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,
    1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,
    1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,
    1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,
    1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,
    1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,
    1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,
    1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,
    1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,
    1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,
    1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,
    1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,
    1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,
    1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,
    1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,
    1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,
    1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,
    1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,
    1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,
    1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,
    1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,
    1448,  1448,  1448,  1448,  1450,  1449,  1452,  1451,  1453,  1451,
    1454,  1451,  1456,  1455,  1455,  1457,  1457,  1459,  1458,  1460,
    1458,  1462,  1461,  1461,  1463,  1463,  1463,  1464,  1464,  1464,
    1464,  1465,  1465,  1465,  1465,  1466,  1467,  1467,  1467,  1467,
    1467,  1467,  1467,  1467,  1468,  1468,  1468,  1469,  1469,  1469,
    1469,  1470,  1471,  1472,  1472,  1473,  1473,  1473,  1473,  1474,
    1474,  1474,  1475,  1475,  1475,  1475,  1475,  1477,  1476,  1478,
    1478,  1479,  1479,  1480,  1481,  1481,  1481,  1481,  1481,  1483,
    1482,  1484,  1484,  1485,  1484,  1486,  1486,  1487,  1487,  1488,
    1488,  1488,  1488,  1489,  1488,  1490,  1490,  1490,  1490,  1490,
    1491,  1492,  1492,  1492,  1492,  1492,  1493,  1494,  1494,  1494,
    1494,  1495,  1495,  1496,  1496,  1497,  1497,  1498,  1498,  1500,
    1499,  1501,  1499,  1502,  1499,  1503,  1499,  1499,  1499,  1499,
    1499,  1499,  1499,  1499,  1499,  1499,  1499,  1499,  1499,  1499,
    1499,  1499,  1499,  1499,  1499,  1499,  1499,  1499,  1499,  1499,
    1499,  1499,  1499,  1504,  1504,  1505,  1505,  1506,  1506,  1506,
    1507,  1507,  1507,  1507,  1508,  1508,  1509,  1509,  1510,  1510,
    1511,  1511,  1512,  1512,  1512,  1512,  1512,  1513,  1513,  1514,
    1514,  1515,  1516,  1516,  1516,  1516,  1516,  1517,  1517,  1518,
    1518,  1519,  1519,  1520,  1520,  1520,  1520,  1520,  1522,  1521,
    1523,  1523,  1524,  1524,  1524,  1525,  1525,  1525,  1526,  1526,
    1527,  1528,  1528,  1529,  1530,  1531,  1531,  1533,  1532,  1534,
    1534,  1534,  1535,  1535,  1537,  1536,  1538,  1538,  1539,  1539,
    1539,  1540,  1540,  1541,  1542,  1541,  1543,  1544,  1545,  1546,
    1546,  1547,  1547,  1548,  1548,  1548,  1548,  1548,  1548,  1548,
    1548,  1549,  1549,  1549,  1550,  1550,  1550,  1550,  1550,  1551,
    1551,  1551,  1551,  1551,  1551,  1552,  1552,  1553,  1554,  1555,
    1555,  1555,  1556,  1557,  1557,  1557,  1558,  1558,  1558,  1560,
    1559,  1561,  1561,  1562,  1562,  1564,  1563,  1565,  1565,  1566,
    1566,  1566,  1566,  1568,  1569,  1570,  1567,  1571,  1571,  1573,
    1574,  1575,  1576,  1577,  1572,  1579,  1580,  1581,  1582,  1578,
    1583,  1583,  1583,  1583,  1583,  1583,  1584,  1584,  1584,  1585,
    1585,  1586,  1586,  1586,  1587,  1587,  1588,  1589,  1588,  1590,
    1590,  1591,  1591,  1592,  1592,  1593
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     1,     0,     4,     2,     0,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     3,     1,     1,     4,     1,     2,     0,
       4,     0,     2,     3,     1,     2,     0,     3,     0,     6,
       1,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     5,     1,     0,
       1,     3,     1,     3,     3,     3,     3,     3,     3,     3,
       0,     1,     1,     0,     7,     0,    13,     0,    13,     0,
      13,     0,     6,     0,     3,     4,     4,     3,     2,    10,
       1,     3,     2,     2,     2,     2,     2,     2,     2,     0,
      13,     0,     6,     2,     0,     1,     3,     1,     0,     2,
       0,     2,     0,     1,     3,     4,     0,     2,     0,     2,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     0,     3,     1,     0,     2,     0,     2,
       2,     2,     2,     2,     3,     3,     1,     1,     1,     2,
       3,     3,     0,     4,     0,     3,     0,     1,     3,     1,
       0,     1,     3,     1,     0,     3,     0,     1,     3,     1,
       4,     0,     1,     1,     1,     0,     3,     2,     3,     0,
       3,     0,     5,     5,     0,     7,     5,     0,     2,     1,
       1,     1,     3,     1,     1,     1,     3,     0,     1,     1,
       1,     1,     2,     1,     3,     1,     1,     0,     1,     0,
       2,     3,     5,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     3,     1,
       3,     0,     2,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     0,     5,     0,     2,
       0,     3,     0,     2,     2,     2,     2,     0,     6,     2,
       0,     2,     1,     1,     3,     0,     0,     0,     7,     0,
       2,     2,     1,     1,     0,     0,     8,     0,     6,     1,
       2,     1,     2,     0,     0,     6,     0,     0,     6,     0,
       2,     0,     5,     0,     1,     0,     5,     0,     2,     0,
       5,     4,     0,     0,     8,     0,     7,     1,     1,     1,
       1,     1,     2,     4,     5,     0,     4,     4,     4,     3,
       3,     2,     2,     0,     2,     1,     2,     3,     1,     1,
       1,     1,     1,     2,     3,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     2,     3,     1,     1,     1,
       1,     1,     1,     1,     2,     3,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     2,     3,     1,     1,     1,
       2,     2,     2,     1,     1,     1,     1,     2,     3,     3,
       3,     3,     3,     3,     3,     3,     4,     0,     1,     1,
       1,     1,     1,     0,     7,     3,     0,     5,     1,     2,
       4,     0,     0,     5,     0,     7,     1,     0,     1,     0,
       4,     0,     0,     3,     5,     6,     0,     4,     2,     2,
       2,     2,     0,     1,     0,     3,     0,     1,     1,     3,
       1,     4,     5,     5,     0,     2,     0,     0,     7,     0,
      10,     1,     3,     1,     1,     0,     2,     0,     3,     1,
       3,     0,     6,     1,     0,     0,     5,     0,     4,     1,
       1,     1,     3,     1,     3,     0,     0,     5,     1,     3,
       1,     1,     0,     3,     1,     3,     0,     4,     1,     0,
       1,     2,     1,     3,     4,     3,     3,     3,     3,     4,
       4,     3,     0,     0,     6,     0,     1,     0,     1,     1,
       2,     1,     1,     0,     1,     1,     2,     1,     0,     3,
       0,     1,     1,     2,     1,     2,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     0,     6,     1,     1,     3,     4,     4,     2,     2,
       2,     3,     3,     3,     3,     3,     3,     3,     4,     4,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     2,     1,     1,     1,     1,     1,     1,
       3,     1,     1,     2,     2,     0,     8,     0,     9,     0,
       9,     0,     9,     8,     2,     0,     1,     4,     0,     1,
       2,     0,     3,     2,     8,     0,     2,     0,     1,     1,
       0,     1,     2,     1,     1,     2,     2,     4,     3,     3,
       3,     3,     1,     2,     1,     1,     3,     2,     3,     2,
       2,     1,     3,     3,     2,     3,     1,     2,     2,     2,
       1,     2,     1,     1,     1,     2,     3,     2,     3,     2,
       2,     3,     3,     3,     0,     6,     0,     6,     2,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       2,     2,     1,     2,     1,     2,     3,     2,     1,     1,
       1,     1,     1,     1,     1,     2,     0,     1,     1,     5,
       0,     1,     2,     1,     1,     1,     1,     3,     3,     3,
       3,     0,     1,     0,     1,     0,     1,     2,     1,     1,
       2,     2,     4,     1,     3,     2,     1,     2,     2,     2,
       3,     3,     3,     3,     2,     2,     1,     1,     1,     2,
       1,     1,     1,     1,     1,     0,     2,     1,     1,     1,
       1,     1,     0,     2,     1,     1,     0,     1,     1,     2,
       2,     1,     2,     2,     0,     1,     1,     1,     3,     1,
       3,     0,     1,     0,     1,     5,     0,     3,     3,     1,
       0,     2,     2,     2,     0,     3,     3,     6,     6,     1,
       1,     2,     2,     2,     1,     2,     2,     1,     1,     0,
       1,     1,     1,     1,     0,     1,     1,     1,     0,     1,
       2,     0,     1,     0,     1,     0,     1,     1,     2,     1,
       2,     1,     2,     2,     2,     3,     2,     3,     3,     3,
       3,     1,     1,     1,     1,     3,     1,     1,     1,     4,
       2,     1,     4,     0,     1,     2,     0,     2,     1,     3,
       0,     6,     0,     5,     7,     0,     5,     0,     5,     0,
       5,     0,     4,     0,    10,     3,     4,     3,     3,     7,
       0,     3,     1,     4,     0,     3,     0,     2,     0,     1,
       0,     2,     2,     2,     2,     1,     1,     1,     4,     4,
       0,     6,     4,     0,     5,     0,     6,     4,     3,     1,
       2,     1,     1,     0,     6,     0,     3,     2,     0,     5,
       0,     0,     6,     1,     3,     1,     1,     3,     3,     3,
       2,     4,     0,     7,     0,     0,     8,     5,     5,     3,
       4,     2,     2,     6,     5,     3,     5,     1,     1,     1,
       0,     1,     0,     1,     0,     2,     0,     1,     2,     1,
       1,     1,     0,     1,     1,     0,     2,     1,     0,     1,
       1,     1,     0,     6,     0,     5,     4,     4,     0,     6,
       4,     3,     0,     1,     1,     3,     3,     2,     2,     0,
       2,     1,     3,     0,     1,     1,     0,     2,     4,     1,
       3,     0,     5,     0,     1,     1,     0,     6,     0,     1,
       1,     2,     1,     1,     1,     0,     5,     1,     3,     2,
       0,     3,     1,     4,     1,     0,     4,     1,     0,     4,
       0,     1,     3,     0,     1,     3,     1,     1,     2,     0,
       5,     0,     1,     1,     2,     1,     1,     1,     1,     1,
       2,     0,     5,     0,     1,     1,     0,     4,     4,     3,
       5,     1,     3,     3,     0,     6,     1,     1,     1,     3,
       2,     3,     1,     1,     0,     6,     1,     1,     1,     3,
       3,     4,     0,     6,     0,     2,     0,     4,     0,     2,
       1,     2,     4,     2,     3,     2,     3,     0,     3,     0,
       0,     6,     2,     1,     1,     2,     2,     8,     4,     0,
       1,     2,     1,     1,     1,     1,     0,     2,     4,     3,
       1,     1,     3,     4,     0,     0,     0,     2,     2,     1,
       1,     0,     2,     3,     0,     2,     3,     0,     2,     3,
       3,     3,     2,     3,     4,     3,     4,     3,     4,     1,
       3,     4,     3,     3,     6,     1,     5,     6,     5,     7,
       6,     8,     5,     6,     4,     4,     5,     3,     4,     1,
       3,     3,     3,     3,     3,     3,     5,     5,     3,     3,
       3,     3,     3,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     0,     2,     1,     2,     1,     1,     1,     2,     2,
       1,     1,     2,     2,     4,     1,     3,     1,     1,     1,
       1,     1,     3,     1,     1,     1,     1,     3,     2,     2,
       2,     2,     3,     3,     5,     6,     4,     4,     7,     2,
       6,     5,     6,     6,     4,     4,     5,     4,     6,     2,
       4,     4,     4,    10,     6,     8,     6,     4,     4,     6,
       4,     4,     4,     6,     4,     7,     7,     7,     6,     6,
       6,     6,     3,     4,     6,     8,     2,     2,     8,     8,
       6,     6,     2,     6,     6,     8,     8,     6,     8,     6,
       2,     8,     8,     2,     2,     2,     6,     6,     4,     4,
       8,     4,     4,     4,     4,     3,     8,     4,     4,     6,
       4,     4,     4,     6,     8,     6,     4,     6,     1,     6,
       4,     4,     4,     4,     4,     6,     4,     0,     5,     6,
       2,     3,     0,     4,     0,     3,     0,     1,     1,     3,
       4,     4,     5,     4,     4,     4,     5,     4,     0,     0,
       7,     4,     5,     4,     5,     4,     4,     4,     4,     4,
       5,     0,     8,     0,     3,     3,     1,     4,     0,     1,
       0,     2,     0,     1,     0,     3,     2,     3,     2,     1,
       1,     2,     1,     2,     1,     2,     2,     2,     0,     3,
       0,     1,     1,     3,     1,     3,     1,     3,     0,     1,
       0,     2,     4,     5,     1,     1,     1,     1,     4,     1,
       3,     3,     0,     6,     0,     8,     4,     0,     8,     0,
      10,     6,     0,     8,     0,    10,     6,     1,     2,     1,
       1,     2,     0,     4,     3,     5,     2,     0,     0,     7,
       1,     0,     0,     6,     0,     3,     0,     0,     5,     0,
       1,     0,     1,     0,     2,     3,     3,     1,     1,     0,
       7,     0,     7,     1,     2,     0,     0,     2,     0,     2,
       0,     1,     1,     1,     1,     3,     1,     3,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     0,     1,     1,     0,     2,     0,     1,
       0,     0,     3,     0,     0,     3,     2,     0,     0,     4,
       4,     2,     0,     1,     1,     3,     3,     1,     2,     0,
       1,     0,     4,     4,     2,     0,     1,     1,     0,     1,
       0,     1,     2,     5,     4,     1,     3,     3,     1,     1,
       1,     1,     1,     1,     0,     2,     3,     4,     1,     2,
       2,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     0,     0,     6,
       0,     1,     3,     1,     3,     0,     2,     3,     1,     2,
       1,     0,     3,     0,     0,     7,     2,     1,     0,     3,
       0,     7,     0,     7,     4,     6,     4,     4,     4,     0,
       6,     4,     4,     5,     6,     4,     1,     3,     1,     1,
       3,     1,     0,     2,     0,     1,     0,     0,     8,     0,
       0,     6,     0,     1,     1,     1,     1,     1,     2,     1,
       1,     1,     3,     4,     0,     3,     3,     1,     2,     2,
       0,     3,     0,     5,     3,     1,     3,     1,     3,     1,
       1,     0,     1,     0,     4,     0,     1,     3,     1,     1,
       1,     0,     0,     6,     0,     0,    11,     3,     1,     3,
       3,     1,     3,     0,     1,     0,     4,     0,     6,     0,
       5,     0,     6,     1,     3,     2,     4,     0,     2,     0,
       2,     1,     1,     1,     0,     4,     0,     1,     0,     1,
       1,     3,     1,     1,     2,     2,     2,     1,     1,     1,
       1,     0,     3,     0,     3,     2,     4,     4,     3,     4,
       4,     1,     3,     3,     3,     3,     6,     2,     2,     0,
       6,     0,     7,     5,     2,     1,     1,     1,     5,     5,
       2,     2,     1,     4,     3,     2,     3,     2,     2,     1,
       3,     4,     3,     3,     2,     3,     2,     3,     1,     1,
       1,     1,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     1,     1,     1,     1,     1,     0,     1,     0,     2,
       0,     1,     1,     1,     0,     2,     0,     2,     0,     2,
       2,     0,     4,     0,     4,     1,     1,     0,     1,     1,
       0,     1,     1,     0,     4,     0,     0,     5,     1,     0,
       4,     3,     1,     2,     2,     2,     2,     2,     3,     2,
       1,     1,     1,     1,     2,     1,     1,     1,     1,     1,
       1,     1,     0,     1,     0,     3,     0,     3,     3,     1,
       0,     4,     1,     2,     0,     1,     0,     3,     3,     2,
       2,     0,     5,     0,     1,     1,     0,     1,     1,     1,
       2,     2,     0,     0,     0,     0,    21,     1,     1,     0,
       1,     0,     1,     1,     0,     1,     1,     0,     2,     2,
       1,     3,     4,     3,     3,     0,     2,     2,     1,     3,
       3,     0,     4,     0,     3,     1,     1,     0,     3,     2,
       3,     1,     1,     2,     0,     2,     3,     1,     5,     1,
       1,     2,     2,     1,     1,     1,     1,     1,     1,     2,
       2,     1,     1,     1,     1,     1,     1,     1,     1,     2,
       2,     2,     2,     2,     1,     1,     1,     1,     1,     1,
       1,     3,     5,     1,     1,     1,     1,     1,     3,     4,
       5,     1,     5,     3,     2,     1,     3,     2,     2,     4,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     3,     2,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     0,     3,     0,     3,     0,     3,
       0,     3,     0,     3,     2,     0,     2,     0,     2,     0,
       4,     0,     3,     1,     1,     1,     1,     0,     1,     1,
       1,     0,     2,     2,     2,     3,     3,     4,     6,     2,
       3,     3,     3,     5,     1,     3,     3,     1,     1,     3,
       3,     1,     3,     2,     2,     2,     2,     2,     1,     1,
       4,     4,     1,     1,     1,     1,     1,     0,     4,     1,
       1,     1,     3,     3,     1,     1,     2,     2,     2,     0,
       3,     4,     3,     0,     7,     1,     2,     1,     1,     1,
       1,     1,     1,     0,     5,     1,     1,     1,     1,     1,
       3,     6,     6,     6,     7,     5,     3,     8,     8,     8,
       6,     0,     1,     1,     2,     0,     1,     1,     3,     0,
       3,     0,     3,     0,     3,     0,     3,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     2,     2,
       1,     3,     2,     2,     2,     2,     2,     2,     2,     2,
       1,     1,     2,     0,     1,     3,     1,     2,     2,     2,
       1,     3,     3,     1,     1,     3,     1,     3,     1,     1,
       1,     1,     4,     5,     4,     6,     1,     0,     3,     3,
       1,     1,     0,     2,     2,     2,     2,     0,     2,     0,
       3,     2,     1,     2,     2,     2,     2,     2,     0,     3,
       0,     1,     0,     3,     2,     0,     1,     2,     0,     1,
       4,     4,     5,     2,     3,     0,     1,     0,     4,     0,
       1,     1,     0,     1,     0,     2,     2,     1,     0,     1,
       1,     2,     3,     2,     0,     6,     3,     0,     0,     0,
       1,     2,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     2,     2,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     0,     3,     1,
       2,     1,     2,     3,     3,     3,     0,     3,     3,     0,
       7,     0,     3,     1,     3,     0,     3,     2,     4,     0,
       3,     4,     4,     0,     0,     0,    16,     8,     7,     0,
       0,     0,     0,     0,    15,     0,     0,     0,     0,    12,
       4,     4,     3,     4,     3,     2,     1,     3,     5,     1,
       1,     0,     1,     1,     0,     2,     0,     0,     3,     0,
       2,     5,     3,     3,     3,     1
};

/* YYDEFACT[STATE-NAME] -- Default rule to reduce with in state
   STATE-NUM when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
       0,   964,  1063,  2558,     0,     0,     0,     0,     0,     0,
    2560,   123,    64,  1705,  1825,  1826,  1618,  1644,     2,     0,
    1063,   173,     0,    76,  1646,     0,  1881,     0,     0,  1063,
       0,   452,     0,  1876,     0,     0,  1063,  1649,  1866,   247,
     173,  2560,     0,  1109,  2364,  1743,     0,   110,     0,     0,
    1726,     0,  2439,  1694,     0,     0,  2695,     0,     0,     3,
       8,    19,     0,    40,    24,    28,    14,    18,    13,    53,
      47,    38,    37,    10,    55,    56,    16,    44,    11,    12,
      15,    36,    43,    32,    39,    51,  1100,    22,    23,    29,
      45,    60,    20,    57,    54,    21,  1827,    25,    46,    41,
      33,    61,    34,    52,    35,    59,    27,    48,    26,     9,
      17,    49,    50,    42,    62,    30,    58,    31,     0,   898,
       0,     0,     0,     0,     0,     0,     0,   966,   881,  2625,
    2626,  2627,  1065,  1064,     0,  2560,  1993,  1048,  1074,  2065,
    2066,  2067,  2068,  2069,  2070,  2071,  2072,  2007,  2073,  2074,
    2076,  2075,  2077,  2078,  2079,  2008,  2009,  2080,  2081,  2082,
    2084,  2083,  2085,  2010,  2011,  2086,  2087,  2088,  2089,  2012,
    2014,  2013,  2090,  2093,  2092,  2091,  2015,  2094,  2095,  2096,
    2098,  2016,  2017,  2018,  2019,  2020,  2097,  2021,  2099,  2022,
    2100,  2101,  2102,  2103,  2104,  2105,  2106,  2108,  2107,  2023,
    2109,  2110,  2112,  2113,  2111,  2114,  2116,  2115,  2117,  2118,
    2119,  2024,  2120,  2121,  2122,  2123,  2124,  2125,  2126,  2025,
    2127,  2128,  2129,  2146,  2026,  2130,  2133,  2132,  2131,  2134,
    2135,  2136,  2138,  2137,  2139,  2027,  2028,  2140,  2141,  2142,
    2144,  2143,  2148,  2149,  2150,  2029,  2145,  2147,  2342,  2151,
    2152,  2154,  2153,  2155,  2157,  2156,  2030,  2159,  2158,  2031,
    2032,  2160,  2161,  1991,  2162,  1992,  2163,  2166,  2167,  2164,
    2168,  2173,  2033,  2165,  2169,  2170,  2171,  2172,  2174,  2034,
    2176,  2175,  2177,  2178,  2179,  2180,  2181,  2182,  2183,  2184,
    2185,  2198,  2189,  2190,  2192,  2193,  2196,  2191,  2197,  2201,
    2200,  2202,  2203,  2204,  2205,  2206,  2199,  2187,  2194,  2195,
    2188,  2207,  2208,  2186,  2209,  2210,  2211,  2212,  2213,  2214,
    2215,  2216,  2217,  2218,  2219,  2221,  2220,  2222,  2223,  2224,
    2225,  2226,  2227,  2229,  2228,  2230,  2231,  2232,  2234,  2233,
    2236,  2237,  2035,  2235,  2238,  2239,  2240,  2241,  2243,  2242,
    2036,  2038,  2037,  2039,  2244,  2245,  2040,  2246,  2247,  2248,
    2041,  2249,  2250,  2251,  2253,  2252,  2254,  2255,  2042,  2043,
    2256,  2257,  2258,  2259,  2260,  2261,  2262,  2263,  2264,  2265,
    2266,  2267,  2268,  2269,  2271,  2270,  2272,  2273,  2274,  2275,
    2276,  2277,  2278,  2044,  2279,  2045,  2280,  2281,  2046,  2282,
    2047,  2283,  2284,  2048,  2285,  2286,  2287,  2288,  2289,  2290,
    2049,  2291,  2292,  2293,  2050,  2295,  2294,  2296,  2051,  2298,
    2299,  2052,  2297,  2054,  2055,  2300,  2301,  2302,  2053,  2303,
    2056,  2304,  2305,  2307,  2306,  2308,  2309,  2310,  2057,  2311,
    2058,  2312,  2313,  2314,  2315,  2316,  2318,  2317,  2319,  2320,
    2321,  2322,  2325,  2327,  2324,  2326,  2323,  2328,  2329,  2330,
    2331,  2335,  2336,  2337,  2338,  2332,  2333,  2334,  2059,  2339,
    2340,  2341,  2343,  2344,  2346,  2345,  2060,  2061,  2347,  2348,
    2064,  2349,  2350,  2351,  2355,  2352,  2363,  2353,  2354,  2357,
    2356,  2358,  2359,  2062,  2360,  2063,  2361,  2362,   192,  1996,
     175,  1997,  2006,   110,  2430,  2429,  1011,  1049,  2561,  2562,
     548,   826,     0,     0,   827,     0,   547,   825,   173,  2627,
     128,     0,   544,   545,     0,     0,     0,  1719,     0,  1642,
    1642,  1642,  1642,     0,  1642,  1642,     0,  1645,  1642,   173,
    1642,     0,    69,  1833,     0,     0,     0,     0,  1990,     0,
    1652,     0,     0,  1883,  1897,     0,  1898,  1892,  2427,     0,
    1134,     0,     0,     0,     0,   173,  1066,     0,  1703,     0,
     237,   246,   248,   249,   245,     0,  2562,  2573,  1101,  1107,
    1119,     0,  1810,   249,     0,   111,   112,     0,   110,   992,
       0,   110,  1727,  1724,     0,     0,     0,  1703,  1891,  2679,
       0,     0,     0,  2675,     0,  2680,     0,  1109,     0,     0,
       1,     5,     0,     0,  2141,  2248,  1823,  1821,  1985,     0,
     872,   899,     0,   877,     0,   875,  2002,  2001,  2000,     0,
     888,   887,   885,     0,   413,     0,   970,   971,   965,   967,
     969,     0,  2636,   879,  1025,  2559,     0,   194,     0,     0,
       0,     0,     0,  2565,     0,     0,     0,     0,   127,     0,
       0,     0,   124,  1134,  1134,  2627,  2629,  2631,   548,   546,
     548,   548,   548,  1723,  1722,  1721,     0,  1719,  2066,  2007,
    2079,     0,  1958,     0,     0,     0,  1408,     0,  2012,     0,
    2094,  2096,  2016,  2017,  2018,  2019,  2020,  2023,     0,     0,
    1147,  1147,  1144,     0,     0,     0,  2118,  2119,  1967,     0,
       0,     0,  1954,  1968,  2154,  2155,     0,  1956,  1957,  2161,
       0,     0,     0,  2175,     0,  2180,  1965,     0,     0,  2216,
    2218,     0,     0,  2222,  2223,  2224,  2225,  1940,  1202,     0,
    1144,  1953,  1964,  2240,  1947,  2249,  2254,  2255,     0,  2264,
       0,     0,     0,  2289,  2293,     0,     0,  2315,     0,     0,
    1144,  1939,  2335,  2336,  2337,  2338,     0,  1955,  2059,  1966,
       0,  2349,  1147,  1144,  1144,     0,     0,     0,  2358,  2362,
       0,     0,     0,  2597,  1201,     0,  1373,     0,  1402,  1159,
    1165,  1179,     0,  1194,  1228,  1229,  1231,  1328,  1230,  1236,
    1235,  1619,  1951,  1234,  1233,  1952,  1227,  1975,  1996,  1974,
       0,     0,     0,     0,     0,     0,     0,     0,  1806,     0,
       0,  1629,  1642,    71,     0,  2475,  2490,  2491,  2487,  2492,
    2510,  2493,  2497,     0,  2489,  2481,     0,  2496,     0,  2485,
    2494,     0,  2479,     0,  2495,  2500,  2511,  2483,  2488,  2466,
       0,  2473,  2477,  1987,  1513,  2442,  2443,     0,    77,  1654,
    1655,  1653,   962,     0,  2692,  1884,  1885,  1886,     0,  1901,
       0,  1061,     0,     0,   462,   453,     0,  1805,  1804,     0,
    1877,  2574,     0,     0,  1016,  1657,  1704,     0,  1656,  1872,
       0,  1870,  1867,  1869,   238,     0,     0,   268,  2475,     0,
    2460,     0,  2568,  2565,  2575,  2610,  2605,  2604,  2607,  2608,
    1125,  2609,  1124,  2606,  2603,  1134,  1120,  1122,  1123,   760,
       0,     0,  2384,  2385,  2229,  2249,  2386,  2332,     0,     0,
    2404,  2365,  2370,  2366,     0,     0,  1765,     0,   760,  1788,
    1818,  1766,     0,     0,  1818,     0,  1548,  1808,  1811,     0,
    2388,  1779,   823,   822,  1791,   821,  2389,  1804,     0,  1751,
    1767,     0,  1728,  1772,   110,  2390,     0,  1807,  1790,     0,
    1789,  1548,  1818,     0,  1744,     0,     0,     0,     0,     0,
     244,   999,   999,   999,   999,     0,     0,   991,   993,   994,
     999,   999,     0,  2693,  2694,  2440,   962,  1946,  1944,  1945,
    1994,  2676,  1943,  2684,  2686,  2672,  2674,  2681,  1103,     0,
    2579,     6,    63,     0,  1830,  2634,  2635,  2633,   776,     0,
    1147,  2003,  2628,   176,   886,     0,   414,   176,     0,     0,
       0,     0,     0,   415,   416,   352,   870,   968,   883,     0,
       0,   882,  2636,     0,     0,  1076,  1078,  1077,  1094,   196,
     193,   174,    78,  1013,  1636,  1638,  1051,  2564,     0,     0,
    2566,  2570,  1200,  1199,     0,   121,   126,     0,     0,     0,
    2536,   125,  2526,  2632,  1134,  1134,  1134,  2624,     0,  2612,
    2619,  2620,  2623,  2622,  2621,  2618,     0,  2611,  2614,  2615,
    2617,  2616,  2636,  2630,     0,     0,     0,     0,     0,  1706,
    1709,  1713,  1717,  1720,     0,     0,  1518,  1249,  1518,  1518,
    1518,  1409,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1518,     0,  1286,  1259,     0,
    1287,     0,     0,     0,     0,     0,  1961,     0,     0,  2597,
       0,     0,     0,  1378,     0,     0,     0,  2597,     0,     0,
       0,     0,     0,     0,  1404,  1406,  1974,  1518,     0,     0,
    1518,     0,     0,     0,     0,     0,  1152,  1292,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1518,
    1518,     0,     0,  1518,  1300,     0,  1963,     0,     0,     0,
    1962,     0,     0,  1960,   757,   758,  1941,  1959,     0,  1303,
    1305,  1304,     0,  1518,  1518,     0,     0,  1239,  1238,  1240,
       0,     0,     0,     0,     0,     0,  1198,  1197,  1196,  1195,
       0,     0,     0,  1203,     0,  1204,  1205,     0,  1206,  1207,
    1208,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1241,     0,     0,     0,  1942,  1337,     0,  1643,  1624,  1631,
    1626,     0,  1806,  1627,  1635,   427,     0,  1632,  2524,  1628,
       0,  1620,     0,    70,     0,  1855,  1860,     0,     0,     0,
    1850,  1858,  1852,  1859,  1851,     0,     0,  1861,   110,     0,
    1853,  1857,  1856,  1834,  1838,  1842,  1835,  2476,  2474,  2508,
    2507,  2512,     0,  2509,  2505,  2498,  2537,  2502,     0,  2537,
    2504,  2503,  2537,  2499,  2506,  2537,  2471,     0,  1514,  1515,
       0,  2441,     0,  1986,   963,     0,     0,  1887,  1888,     0,
    1084,  1902,  1903,  1899,  1513,  2428,  2431,     0,   647,  1135,
     463,     0,     0,   474,     0,     0,    66,    67,     0,  1068,
       0,  1067,  1071,     0,     0,     0,  1660,  1650,  1659,  1873,
     110,     0,   236,   261,   256,   264,   258,   260,   259,   265,
     266,   267,   262,   257,   263,   250,     0,  2474,     0,  2471,
    2569,     0,  2571,  2588,  1108,  2576,  1131,  1110,  1130,     0,
    1121,   759,     0,   762,   764,  1679,  1680,   763,   772,     0,
     761,     0,     0,     0,  2391,     0,   768,   770,   769,  2399,
     767,     0,     0,  2375,     0,     0,  1814,     0,     0,  1778,
       0,   548,     0,     0,     0,     0,     0,     0,  1745,     0,
       0,   591,     0,  1771,  1549,  1812,  1813,  1818,     0,     0,
    1818,     0,  1784,  1808,  1818,     0,  1818,  1740,     0,     0,
    1732,  1737,  1733,     0,  1739,  1738,  1741,  1729,  1730,     0,
    1758,  1786,     0,  1808,  1770,  1777,     0,  1757,  1764,     0,
    1775,  1808,  1808,     0,  1818,  1818,   988,  1003,   990,   984,
     982,   997,   998,     0,     0,   987,   986,  1725,  1442,     0,
       0,  2673,  2687,  2671,  2682,  2683,  2670,  1104,  2580,  1102,
    2581,     0,     7,     4,  1824,  1822,  1831,  1832,   777,   776,
     539,   542,   541,     0,     0,  2005,     0,   878,     0,  1806,
     876,     0,     0,  1806,   363,  1806,   417,   776,   890,     0,
       0,   880,  1026,  1027,  1030,     0,     0,   451,  1094,  1080,
    1096,     0,   197,   199,     0,  1015,  1014,     0,  1012,  1059,
    1058,  1056,     0,  1057,  1055,  1050,  1052,  1053,  2563,  2567,
     549,   776,  1806,     0,   355,     0,     0,     0,     0,     0,
     548,     0,     0,  2613,   113,   828,   828,   828,  1711,  1639,
    1707,  1641,  1985,     0,     0,     0,  1715,     0,     0,  1519,
    1518,     0,  1384,     0,     0,     0,     0,  1410,     0,     0,
       0,     0,     0,     0,     0,     0,  1225,     0,     0,     0,
       0,     0,  1358,     0,  1384,  1148,  1593,  1594,  1578,  1579,
    1577,  1580,  1145,     0,  1581,  1592,  1315,     0,     0,     0,
       0,     0,     0,  1489,  1490,  1491,  1492,  1500,  1493,  1494,
    1495,  1502,  1507,  1496,  1497,  1503,  1504,  1505,  1498,  1506,
    1501,  1499,  1508,     0,  1488,     0,  1511,  1509,  1512,  1510,
       0,  1379,  1371,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1518,     0,     0,     0,  1518,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1518,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1282,     0,  1977,  1976,     0,     0,     0,     0,
    1243,     0,  1242,  1451,     0,  2582,  2598,     0,  2391,  1374,
    1376,     0,  1150,  1149,  1151,  1162,  1155,  1160,  1153,  1157,
       0,  1209,  2072,  1163,     0,     0,  1191,  2597,  1527,  1192,
    1177,  1182,  1183,     0,  1180,  1181,     0,  1185,     0,  1184,
    1188,  1189,  1190,  1193,     0,     0,     0,     0,  1232,  1237,
    1403,  1134,  1978,     0,     0,   427,   430,   429,  1633,   428,
    1681,     0,   972,     0,     0,    72,    74,  1847,  1844,  1843,
    1845,  1849,   110,  1854,  1846,     0,  1862,  2501,     0,  2482,
       0,  2486,  2480,  2484,     0,     0,  2472,     0,  2478,  1517,
    2149,  2233,     0,  1520,  2445,  1647,  2691,  2349,  1889,  1882,
       0,  1900,     0,     0,     0,  1062,   648,     0,  1134,   461,
     460,   459,   458,     0,   476,   456,   464,    68,     0,     0,
    1878,     0,     0,     0,     0,  1018,  1658,     0,  1874,  1868,
       0,     0,     0,     0,     0,     0,     0,  2572,  2590,  2589,
    2577,  1134,  1539,  1135,  1135,  1974,  2406,     0,  2401,  2400,
       0,     0,     0,  2419,  2402,     0,     0,  2369,  2407,  2408,
    2411,     0,     0,     0,     0,     0,  2405,  2332,  2371,  2372,
       0,  2377,  2367,  2425,  2426,  2423,  2424,  2422,  2396,  1785,
       0,  1816,  1819,  1820,     0,     0,  1799,  1793,  1792,  1782,
    1794,  1783,  1803,  1802,  1801,  1755,  1754,  1561,  1562,  2287,
    1560,  1552,  1555,  1559,  1558,  1748,  1809,  1798,  1796,  1780,
    1818,  1753,  1752,  1797,  1795,  1734,  1735,  1736,     0,  1548,
       0,  1814,  1787,  1818,  1808,     0,  1818,  1818,  1800,  1774,
    1776,  1006,  1005,  1004,  1000,  1001,   985,  1006,   996,   995,
    1460,  1459,     0,  1417,     0,  1419,  1416,  1415,  1414,     0,
    1459,  2677,  2685,  2689,     0,  1548,  2587,  2585,   540,  1681,
    1681,     0,  2004,     0,     0,     0,     0,     0,     0,     0,
     177,   186,     0,     0,   361,   362,  1681,   360,   403,   404,
     407,   408,   409,     0,     0,     0,     0,     0,     0,     0,
       0,   130,   410,  1681,  1681,   357,   383,   384,   387,   388,
     389,   390,   391,   353,     0,   358,   960,   960,     0,  1681,
    1681,   960,  1681,     0,     0,  1681,  1681,     0,     0,  1681,
       0,     0,   960,     0,  1681,   958,     0,     0,  1681,  1681,
    1681,  1681,   960,     0,     0,  1681,  1681,   451,  1681,     0,
       0,   978,     0,     0,  1681,     0,     0,  1681,  1681,     0,
    1681,   906,   957,   552,   573,   574,   871,   905,   907,   919,
     447,     0,   936,   959,     0,     0,   892,   894,  2637,  2638,
    2639,     0,     0,  1029,  1083,  1075,  1082,  1079,  1094,  1092,
    1081,   818,   817,     0,  1095,   195,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    79,    80,
      98,  1637,  1060,  1054,   122,   776,  1681,  1681,  1681,  1681,
     359,   392,   393,   396,   397,   398,   399,   402,   400,   401,
       0,     0,  1806,     0,  2528,  2529,     0,  2527,     0,  2665,
       0,     0,     0,   175,   550,   829,     0,     0,     0,     0,
       0,  1520,     0,  1988,  1714,  1442,  1718,  1717,     0,  1311,
       0,  1351,     0,  1353,  1354,  1355,     0,     0,     0,     0,
       0,  1312,     0,  1257,  1313,  1314,     0,  1308,     0,  1309,
       0,     0,     0,     0,     0,     0,     0,  1357,     0,  1146,
       0,     0,  1260,  1261,  1254,  1246,     0,  1330,     0,     0,
    1262,     0,     0,     0,     0,  1317,     0,  1331,  1405,     0,
    1407,  1978,     0,  1363,  1318,  1267,     0,  1361,     0,  1268,
    1332,  1333,  1334,  1320,  1321,     0,  1336,     0,  1322,     0,
       0,     0,     0,  1270,  1367,  1365,     0,     0,     0,     0,
    1369,  1272,     0,     0,     0,  1271,     0,     0,     0,     0,
       0,     0,     0,  1274,     0,  1255,  1366,  1368,  1326,     0,
    1283,     0,  2591,  1450,  2599,  1451,     0,     0,  2593,  2583,
    2588,  2596,  1247,     0,     0,  1979,  1156,  1161,  1154,  1158,
    2597,     0,     0,     0,     0,  1175,  1174,     0,     0,     0,
    2597,  1527,  1178,     0,     0,  1347,  1348,  1400,     0,  1625,
    1622,  1634,  1682,     0,  2525,   974,   973,  1630,   972,    75,
       0,  1848,  1841,  1863,  1836,  2541,     0,  2540,     0,  2520,
    2523,  1985,     0,     0,     0,  2455,  2449,  2456,  2458,  2452,
    2457,  2459,  2450,  2451,  2446,  2453,  1521,  1550,     0,  1890,
    1085,  1087,  1088,  1086,  1094,     0,     0,  2434,  2435,  2433,
    2432,   466,     0,   475,     0,   487,     0,     0,     0,  1880,
    1879,     0,  1069,  1072,  1073,  1023,  1022,  1024,  1017,  1019,
    1020,   532,  1664,     0,     0,     0,  1670,  1651,  1661,  1875,
    1871,     0,  2118,  2335,  2338,   251,   254,   253,   255,     0,
       0,     0,     0,     0,     0,  1129,  1442,  1611,  1126,  1114,
    1550,  1540,  1113,  1136,  1132,     0,   775,   774,   773,   771,
       0,     0,     0,     0,  2413,  2414,     0,     0,  2392,  2393,
    2394,     0,  2397,  2374,  2375,     0,  2376,     0,  1815,     0,
    1759,     0,  1781,     0,     0,     0,     0,  1750,     0,  1773,
    1731,  1816,  1749,  1520,  1808,  1746,  1747,     0,   989,  1003,
     983,  1459,  1442,     0,     0,  1437,  1461,     0,  1461,  1439,
    1440,  1442,     0,  1442,  1513,  1456,     0,     0,  2688,  1541,
    2586,     0,     0,   874,   180,   183,   181,     0,   182,     0,
       0,   412,   411,     0,  1806,   405,   134,   133,   135,   136,
    1575,  1576,  1572,  1573,  1571,  1574,   138,   137,   132,   889,
       0,     0,     0,  1806,   385,   364,   365,   368,   369,   370,
     961,   863,   548,   940,     0,   629,   548,   814,   819,   819,
     548,     0,  1063,     0,     0,  1642,     0,     0,  1063,     0,
       0,     0,  1681,     0,   951,   901,     0,  1642,     0,  1642,
    1642,   952,     0,   902,  1681,     0,     0,     0,     0,  1642,
    1063,     0,     0,     0,   449,     0,  1063,   920,   981,   980,
     979,     0,  1063,  1063,     0,   579,   580,   578,     0,     0,
       0,   571,   553,   776,   903,   448,   904,   628,     0,   975,
     625,   631,  1981,     0,     0,     0,     0,   144,  2641,  1028,
       0,     0,  1480,   198,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1806,   394,     0,     0,  1681,   354,   371,   372,   375,   376,
     377,   378,   379,   382,   380,   381,     0,  2532,  2534,     0,
       0,   348,   347,     0,   139,  2659,     0,     0,   628,   114,
     438,   447,   551,   554,     0,     0,   830,     0,     0,     0,
    1640,  1717,  1442,  1539,  1986,  1520,     0,  1716,     0,     0,
    1352,  1385,     0,  1411,     0,  1251,   731,   731,   731,  1394,
     716,  1398,  1389,   731,  1390,   731,  1392,     0,     0,     0,
    1211,  1226,     0,     0,     0,     0,     0,  1359,  1356,     0,
       0,     0,     0,  1382,     0,     0,     0,  1256,     0,  1342,
    1364,  1362,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1370,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1244,  1134,  2600,  2602,
    1105,     0,  2592,  2594,   866,  1375,     0,  1172,  1168,     0,
    1166,  1526,  1187,  1186,     0,     0,     0,  1176,  1135,  1338,
    1134,     0,  1401,  1980,  1623,   426,   590,  1621,    73,  1839,
    2538,     0,  2549,     0,     0,     0,     0,     0,     0,     0,
    2444,  1551,  1691,     0,  1094,  1098,  1995,  1893,  2437,  2438,
    2436,     0,   467,   468,   470,  1135,   484,   462,     0,   454,
     457,     0,   466,     0,  1021,  1119,     0,  1683,  1668,  1675,
    1669,     0,     0,     0,  1667,  1970,  1969,  1976,  2575,     0,
       0,  2465,     0,     0,     0,  2578,  1520,  1520,  1605,     0,
       0,  1111,  1116,  1112,  1115,     0,  1133,  1140,  1139,  1971,
    1978,  2403,     0,     0,     0,     0,  2418,  2412,  2409,  2410,
       0,  2373,  2395,  2379,  2378,  2381,  2383,  1585,  1586,  1584,
    1582,  1583,  1817,  1548,  1769,  1768,  1563,  1554,     0,  1557,
    1556,  1742,  1761,  1763,  1818,     0,  1009,  1007,  1002,     0,
    2582,  1454,     0,  1441,  1438,  1462,     0,  1461,  1461,  1442,
       0,  1421,  1695,  1698,     0,  1420,  1478,  1444,  1119,  2678,
    2690,     0,   589,   588,   185,   184,   190,   191,   432,   418,
     431,   406,   131,   419,   420,   386,     0,   366,   630,   864,
    1063,     0,     0,     0,   819,   624,   863,   863,   828,   820,
     548,   548,   938,     0,     0,   563,   560,     0,   566,   921,
     913,   922,   933,   935,     0,   562,   581,     0,     0,   569,
    1642,     0,   949,     0,     0,   557,     0,   600,   601,   599,
     575,   582,   558,   559,     0,     0,  1535,  1537,  1545,   565,
     564,  1596,  1595,   568,     0,   561,     0,   955,   928,     0,
     597,   595,   592,   594,   593,   598,   596,   570,   567,   583,
     918,     0,   960,   960,   937,     0,   608,   609,   611,   612,
    1984,     0,   977,   939,     0,   613,   626,   614,     0,     0,
     587,  1589,  1590,  1587,  1588,   586,  1591,   584,   585,     0,
     154,     0,     0,   891,     0,   147,   145,   156,     0,     0,
    1032,     0,  1031,     0,  1483,     0,  1484,  1481,  1482,    99,
      86,    82,   103,   104,    84,    85,    89,    88,    90,    91,
      94,    95,    92,    87,    93,    83,   107,   109,   108,    96,
     105,   106,    81,   425,   424,   423,   422,   395,     0,     0,
       0,  1806,   373,  2533,  2531,  2530,     0,     0,  2666,   351,
     349,   350,     0,     0,   200,   606,   607,   605,   604,     0,
     439,     0,     0,     0,  1904,   446,   776,   555,   856,   858,
     857,   844,   843,   115,   117,   119,     0,  1520,  1564,  1989,
    1710,     0,  1284,  1412,     0,     0,   732,  1386,   784,  1396,
       0,  1397,   718,   717,   733,  1388,  1391,  1395,  1393,  1250,
    1258,  1306,     0,  1224,  1307,     0,  1329,  1253,  1252,     0,
       0,     0,  1290,  1291,  1380,  1383,     0,     0,  1264,     0,
    1266,     0,     0,  1344,  1319,  1335,  1293,  1323,     0,  1269,
    1245,     0,  1294,     0,  1299,  1297,     0,  1273,     0,     0,
    1280,     0,  1278,     0,  1279,     0,  1281,  1325,  1327,  1452,
    2601,  1106,     0,     0,  1377,  1164,     0,  1173,  1170,     0,
    1167,  1136,  1349,  1339,     0,  1837,  2539,     0,  2470,  2522,
    2521,  2542,  2542,  2542,     0,  1522,     0,  1648,  1089,  1094,
    1098,     0,  1090,  1904,   471,     0,     0,     0,   491,     0,
     489,   465,     0,  1070,  1134,  1665,  1677,     0,  1685,     0,
       0,  1662,  1672,     0,     0,     0,  1671,   252,     0,  2462,
    2463,  2461,  1550,  1528,     0,     0,  1617,     0,  1612,  1127,
       0,  1138,  1137,     0,  2421,  2420,  2416,  2415,  2417,  2398,
       0,     0,  1760,  1553,  1548,  1756,     0,     0,  2588,  1513,
    1446,  1442,  1418,  1442,     0,     0,  1426,  1442,  1422,  1424,
       0,  1520,     0,  1443,  1475,  1134,  1973,  1542,  1545,   367,
     923,     0,   548,   815,   816,   828,   865,     0,   828,   828,
       0,     0,   912,   942,  1051,     0,   917,   772,   576,   863,
     908,   950,   972,   577,   944,   910,     0,  1546,  1547,  1538,
     450,   909,   930,   915,  1862,   941,   628,   976,   796,   712,
     661,   652,   731,   655,   654,   698,   731,   666,   716,   714,
     684,   716,   716,   691,   690,   708,   694,   674,   784,   784,
     673,   711,   784,   695,   693,   697,     0,   699,   716,   704,
     692,   696,   713,   689,   686,   710,   731,   731,   731,   670,
     709,   784,     0,   702,   731,   632,   735,   672,   784,   791,
       0,     0,   731,   733,  1983,   155,   143,     0,     0,   893,
     895,     0,     0,   896,  2643,     0,  2645,  1034,  1035,     0,
       0,  1097,     0,     0,   100,   102,     0,   356,   421,   374,
    2535,     0,   211,  1134,     0,     0,   201,   203,   204,     0,
       0,   436,   433,  1906,  1905,   435,   535,   556,     0,     0,
       0,  1717,  1712,     0,  1708,     0,  1413,     0,     0,     0,
       0,   778,   789,   787,   781,     0,   785,   786,  1387,     0,
       0,   734,  1399,   731,  1221,   716,  1215,  1217,  1213,     0,
     699,  1216,   731,     0,   784,  1220,  1212,     0,  1360,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1248,     0,
    1340,     0,     0,     0,     0,     0,     0,  1277,  1275,  1276,
    1550,  2582,   867,  1169,     0,  1350,     0,     0,     0,  2547,
    2547,  2547,  1690,  1689,     0,  1688,  1692,  1091,  1099,     0,
     469,   472,     0,   464,     0,   488,     0,   455,   533,     0,
       0,     0,  1686,  1674,  2579,  1663,  1666,  1978,  2464,  1118,
       0,  1523,  1616,  1613,     0,  1606,  1608,  1610,     0,  1972,
    2380,  2382,  1762,  1008,  1010,  1447,  1445,  1455,     0,  1414,
    1442,  1442,     0,  1414,     0,     0,  1697,  1539,  1699,  1479,
       0,  1457,     0,  1544,   925,     0,     0,     0,     0,     0,
       0,   954,     0,     0,   914,   934,   956,   948,   947,     0,
    1063,  1536,   929,   931,  1018,     0,   610,     0,   800,   660,
     653,   671,   669,   720,   715,     0,   720,   720,   680,   698,
     675,     0,   784,   688,   679,   700,   703,   705,   707,   720,
       0,   784,   668,   667,   677,   664,   720,   743,     0,     0,
       0,     0,   739,     0,   794,     0,   746,     0,   633,   736,
     738,     0,     0,     0,   701,   784,   657,   792,   791,   659,
     784,   791,   720,   720,     0,   141,   146,   157,   158,   884,
    2642,     0,  2640,     0,  1040,     0,  1093,  1485,    97,     0,
       0,     0,   214,   212,   213,     0,   207,   209,   204,  2653,
       0,  2660,     0,     0,  2658,   440,  2579,   550,   536,     0,
       0,     0,     0,  2287,  1565,  1285,   729,   727,   730,   728,
     780,   779,   783,     0,   782,   791,     0,     0,  1223,  1218,
     700,  1222,  1214,  1219,  1310,  1288,  1289,  1381,  1372,  1316,
       0,  1265,  1341,     0,     0,  1324,  1295,  1298,  1296,  1301,
    1302,  1126,  1126,   602,  2595,  1171,  1864,  2550,     0,     0,
    2546,  2544,     0,  2545,  2543,  2513,     0,  2468,  2469,  2467,
    2454,     0,     0,     0,  1134,   477,     0,   494,   493,   490,
    1550,  1676,  1678,  1684,  1673,     0,  1524,  1539,   765,  1609,
       0,  1128,     0,  1427,     0,  1431,  1436,  1432,     0,  1423,
       0,  1564,  1467,  1468,     0,     0,  1473,  1477,  1550,  1545,
       0,     0,   924,   627,     0,     0,     0,  1545,   861,     0,
       0,     0,     0,     0,     0,     0,   953,  1948,   975,   945,
     911,     0,   916,   572,     0,   799,     0,   804,   724,   725,
     726,   681,   721,   723,     0,   683,   651,   676,   706,   682,
       0,   678,   665,   749,   748,  1141,   741,   756,   636,     0,
       0,   747,     0,   737,   745,   740,     0,   656,   658,   662,
     663,   649,   650,  1982,   148,   897,   288,  2644,  1109,     0,
    2649,     0,  1041,  1037,  1038,  1033,   101,   129,  2657,  2667,
     211,     0,     0,   152,     0,   202,   772,   205,   437,   447,
       0,   442,     0,     0,     0,  1566,     0,   790,   788,     0,
       0,  1343,  1345,  1453,   603,     0,  1840,  2519,  2518,  2517,
    2514,     0,     0,     0,     0,     0,     0,  2548,  2552,  1687,
       0,     0,     0,   485,     0,     0,   519,   534,  1532,  1545,
       0,  1550,     0,  1614,  1607,  1448,     0,     0,     0,     0,
       0,  1486,  1696,  1463,  1463,  1474,  1458,  1543,   927,     0,
       0,     0,   615,     0,   860,     0,     0,     0,  1950,  1949,
     943,   975,     0,   797,     0,   801,   802,   803,     0,   795,
     722,     0,   868,     0,     0,   755,  1141,   744,  1134,   753,
     752,   750,   751,     0,   150,   314,     0,   300,   286,     0,
       0,     0,   290,   159,   162,   160,     0,   161,   167,     0,
     168,   169,   170,   171,   172,   163,   312,   313,   166,   164,
     165,     0,  1998,     0,  1999,  2647,     0,     0,  2646,  1036,
       0,  1043,   178,   208,     0,     0,   144,   153,  2661,   754,
    1904,     0,  2575,   831,   833,   835,  1567,   719,  1263,     0,
    2515,  2553,  2556,  2554,  2555,  1568,     0,  2557,  2551,     0,
    1894,  1135,     0,   478,     0,   481,   483,   497,     0,  1681,
    1681,     0,     0,  1681,  1681,  1681,  1681,   512,   520,   522,
       0,  1533,  1534,     0,  1529,  1531,  1525,  1597,   766,  1907,
    2582,  1428,     0,  1433,     0,  1425,     0,     0,  1471,  1469,
     926,     0,   621,   831,  1545,     0,   617,   619,   946,     0,
     798,     0,     0,   784,     0,   784,  1142,     0,   742,     0,
     149,     0,   142,     0,     0,   299,   302,     0,     0,   305,
     295,   294,   296,     0,   289,   288,   288,   342,   293,   339,
     338,   331,  2579,     0,     0,     0,  1042,  1047,     0,  1044,
    1046,  2668,   210,  1134,   156,     0,   434,   444,   443,     0,
    1681,   116,   832,   852,   851,   837,     0,     0,   118,   834,
     854,   841,   120,   836,   853,   839,  1865,  1570,  1569,  1693,
    1701,     0,   765,     0,   486,   479,     0,     0,   495,     0,
       0,  1681,  1681,     0,     0,     0,     0,     0,   492,   521,
    1681,  1545,     0,  1117,     0,  1915,  1449,     0,     0,  1487,
       0,  1464,     0,     0,     0,   623,   831,   616,   859,   862,
     833,   835,     0,   810,     0,   809,     0,   806,   805,   685,
     869,   687,  1143,   637,   151,   315,   326,   329,   321,   301,
       0,     0,     0,   291,   288,     0,   275,   273,   274,   280,
     281,   282,   283,   284,   285,   276,   279,   277,   278,   288,
       0,   219,     0,     0,  2648,     0,  2650,     0,  1039,     0,
     188,   187,   179,     0,   288,  2654,     0,  2662,  2579,   846,
       0,   838,     0,     0,   842,   840,     0,     0,  1895,   473,
     485,   482,   505,   498,   501,     0,   531,   525,     0,     0,
     527,   528,   526,   523,   516,     0,   514,     0,  1530,  1598,
       0,     0,     0,     0,  1908,  1910,     0,  1615,  1430,  1435,
    1466,  1465,  1480,     0,   622,   618,   620,   932,   812,   813,
     811,     0,     0,   639,   638,   640,     0,     0,   288,   322,
       0,   297,     0,     0,     0,     0,   217,   345,     0,   215,
     333,   333,  2651,  2652,  1045,   189,  2669,     0,   158,   178,
     445,   845,   850,   849,   847,   848,   855,  1700,  1702,  1921,
     480,   505,     0,   503,     0,   499,   496,   500,   529,   530,
       0,   513,     0,   524,     0,     0,     0,     0,     0,  1909,
       0,     0,  1916,  1918,     0,     0,     0,     0,     0,   644,
     634,   641,   643,   323,   329,   319,   327,   288,     0,     0,
     287,   306,   341,   218,     0,   343,     0,   288,     0,   332,
     334,   336,     0,   140,  2663,     0,  1907,   502,     0,   510,
     506,   508,   511,   519,   518,   515,  1134,  1913,  1914,     0,
    1911,     0,     0,  1917,  1472,  1470,   808,   807,   646,   645,
     642,     0,   320,     0,     0,   318,   298,   303,   288,     0,
     288,   230,   229,     0,   221,   269,   340,     0,   220,  2655,
     288,     0,  1915,   504,     0,     0,   517,     0,     0,  1601,
    1603,  1912,  1920,  1919,   324,     0,   288,     0,   288,     0,
     288,     0,     0,     0,     0,     0,   216,   288,  2664,     0,
    1923,   509,   507,  1135,  1599,  1134,     0,   316,   288,   304,
     309,   346,     0,   224,   270,   271,     0,   227,  2656,  1922,
       0,  1927,  1604,  1602,   288,   288,   305,   308,   344,     0,
       0,   222,   223,   235,   234,   226,     0,     0,     0,  1934,
     288,   288,   310,   243,   241,   288,   231,   239,   233,     0,
     240,   272,   228,  1925,  1926,  1924,  1929,     0,     0,  1931,
    1932,     0,  1896,     0,   225,   242,  1933,  1928,     0,  1935,
    1937,     0,   232,  1930,     0,  1134,  1936,     0,  1135,  1938
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,    58,   612,  1503,    59,    60,    61,    62,    63,  1346,
      64,   823,  1273,  1785,  1786,    65,   549,    66,  1544,  2128,
    2129,  3423,  3424,  2130,   584,   585,    67,  2164,  3448,  3449,
    3450,  1561,   519,   520,  2010,  2011,  1077,  3103,  3043,  3864,
    3047,  3984,  4112,  4026,  2086,  3413,  3865,  3866,  3993,   544,
    2162,  1517,  4141,  1990,  4262,  1991,    68,   647,  1050,  1541,
    1542,  3435,  3436,  3693,  3437,  3685,  3686,  3687,  3688,  4407,
    4234,  4339,  4408,  4483,  4519,  4525,  4526,  4453,  4535,  4536,
    4537,  4523,   895,  4538,    69,   572,   573,   897,  1375,  2405,
    1376,    70,  4454,  4521,  4235,  4236,  4119,  4237,  3996,  4238,
    4123,  4239,  3999,  4240,  4241,  4242,  4243,  4399,  4244,  4118,
    4446,  4231,  4232,  4448,  4500,  4517,  4245,  4006,  4113,  4326,
    4007,  4114,  4394,  4227,  4395,  4441,  4496,  4228,  4327,  4444,
    4330,  4246,  4252,  4409,  4247,  4253,  4248,  4011,  4130,  4251,
    4128,  4250,  4450,  4404,  2663,  3102,   630,   631,   658,  2152,
     632,  1066,  1024,  1519,  2023,  2024,  2525,  2526,  2645,  2646,
    2647,  2015,  2016,  2017,  2140,  2141,  2142,  1997,  1998,  1999,
    1523,  1994,  1995,   633,  1025,  1035,  2018,  2019,  2020,  2651,
    2144,  2145,  2146,  2147,  2021,  1778,  2022,  2929,  2669,  3697,
    3696,  2670,  3445,  4032,  4268,  3114,  3115,  2595,  2994,  2099,
      71,   561,   875,  1343,  2376,  1344,  2378,  2811,  2812,  2813,
    1829,  1830,  3765,  1834,  2375,  3923,  4280,  4054,  4055,  2815,
    4053,  2819,  3239,  3240,  3534,  3767,  3926,  4285,  4177,  4366,
    4283,  4362,  4284,  4364,  4465,  4420,  4421,  4188,  4295,  4296,
    4370,  4423,  4067,  4068,  4069,  2396,  2825,  3770,  3699,  2134,
    1509,  1510,   521,   522,   523,  2947,  2671,  2072,  2672,  2673,
    3011,  2074,  2075,  2785,  1430,  3007,  2980,  3741,  3109,  3015,
    3016,  3017,  3018,  3019,  4093,  4210,  4211,  4206,  3025,  2945,
    2534,  2535,  2600,  3028,  3395,  3647,  4325,  4390,  4391,  4392,
      72,   872,  3886,  3615,  3630,  3397,  3398,  3399,  3400,  3401,
    3402,  3403,  3141,  3142,  3831,  3832,  3833,  3136,  3137,  3472,
    3648,  3649,  3650,  3887,  3846,  1197,  3465,  1397,  1398,  3933,
    1408,  1409,  2427,  1868,  2428,  1513,  3466,  3467,  3468,  3659,
    3651,  3027,  3608,  3824,  3827,  3969,  4217,  2536,  2946,  2537,
    2950,   973,   524,  2538,  2539,  2165,  2166,  4151,  4158,  4162,
    4152,  4163,  4159,  4153,  4154,  4155,  4165,  4161,  3121,  3806,
    3807,  2938,  2948,  3204,  3971,    73,  1527,  1018,  1027,  1023,
    1042,   642,  1528,  2087,  2607,  3669,   620,  2076,  3600,  3324,
    3604,  2077,  2960,  2078,  3584,  3802,  2079,  3342,  3602,  3821,
    2961,  2962,  2080,  2081,  2082,  3593,  3599,  3961,  2540,  1325,
     126,   127,   638,   639,   640,  2327,  3023,  2581,    74,  1957,
    1956,  1951,    75,   987,   988,   989,  1476,  1477,  1954,  1955,
    2468,  2897,    76,   650,  1548,    77,  1354,  2388,  2389,  2390,
      78,  1043,  1532,  1533,  2093,  3052,  3419,  3674,  3875,  4021,
    3871,  4138,  4139,    79,    80,   651,  1555,  1556,  1557,    81,
    1337,   134,    82,   883,  1349,  1351,  1352,    83,   646,  1044,
    1045,  1046,  1047,  2095,    84,  1820,  2360,  2361,  2362,  2363,
    1538,  2611,  1539,  1540,  2104,  3232,    85,    86,   609,  2287,
     578,   904,   579,   580,  1862,  2418,  3742,   915,   916,   917,
    2851,  1387,  1388,  1389,  1826,  2856,  3975,  1130,  1127,   788,
     789,   790,   791,  1221,  1222,  3652,   792,  1231,  1744,  3153,
    3486,  1606,  1607,   793,   794,   795,   796,   797,   798,  1771,
    3172,  3173,  3500,  2314,  2315,  2316,   799,  2206,  3159,  2219,
     800,  1214,  1729,  1662,  3492,  3164,  1591,  2182,  2707,  3144,
    2781,  2281,  1153,  1154,  1112,  2189,  1597,  1963,  1964,  1965,
    1966,  1967,  3574,  3575,  3936,  3784,  3938,  3788,  2480,  2481,
    1968,  1969,  2899,  3782,  4080,  2282,  2283,  2284,  3510,  2900,
    3291,  2917,  2918,  3798,  2471,  1970,  2906,  4088,  3795,  3796,
    4204,  4203,  3797,  3579,  3580,  3303,  3304,  3055,  3056,  3057,
    3940,  1653,  1654,  1660,  1320,  1321,  1592,  2357,  2799,  3777,
    3930,  2305,  3551,  3928,  4074,  2083,  2986,  2987,  2420,  2421,
    2921,  3307,  3339,  1433,  3743,  2801,  1921,  2886,  2887,  3454,
    4047,  4524,  2930,  2882,  3035,  1624,  1625,  2993,  4193,  4374,
    4468,  4469,  4470,  3266,  3267,  3555,  3556,  2422,  2848,  3268,
    3778,  4079,    87,   528,    88,  1783,  2784,  1270,  2333,  1054,
    1578,  1579,   811,   541,    89,   550,  2358,    90,   568,  1847,
     862,   887,  1357,  1358,  2397,  2826,  2833,  2398,  2838,  3544,
    2828,  3245,  3246,  2322,  2323,  2829,  3248,  3541,  3524,  3525,
    3227,  3762,    91,   597,  3301,  2912,  2913,  4169,  4170,   888,
      92,   527,  1099,  2171,  1584,  2170,  1100,  1101,  2173,   676,
     677,    93,   992,   593,  1456,  1457,  1458,  1939,    94,   582,
     974,  2883,  3284,  1915,   879,  1266,  1437,   977,  1438,  1901,
    2450,  1419,    95,  1014,  1013,    96,   616,  1505,    97,   824,
    1293,  1796,  2789,  3215,  1294,  1295,  2334,  3906,    98,   569,
     892,   893,  1360,  2400,    99,   563,   880,  1840,   100,   553,
     867,  1329,  1819,   101,   102,   869,  3233,  4172,  4359,   557,
    1822,  1333,  3446,  4195,  4304,  4305,  4307,  4382,  4383,  4416,
    4511,  4545,  4529,  4548,  4549,  4552,  4559,  4560,   802,  1001,
     803,  3816,   804,   805,  2834,  2835,  3308,   806,  2836,   807,
    2601,  1055,  1581,   547,   499,   627,  1002,  2807,   809,  4013,
    1021,  1070,   501,   502,   103,   581,   931,  1413,  1403,  1412,
    1888,  2444,  1892,  2446,  2447,  3280,  2874,  3281,  2875,   979,
    1884,  1889,  2876,   934,  1877,  1878,  1879,  1880,  2867,  1874,
    1898,   104,   870,   506,  1335,  1336,  2369,   105,   596,   106,
    1322,  1813,  1814,  2354,  2798,  2355,   107,   900,   108,   849,
    1807,   850,  1298,   851,   852,  1312,  1306,  1315,  1309,  3911,
    3754,  3755,  2342,  1269,  1071,  2156,  3096,  1072,  1799,  2336,
    2337,  3519,  3757,  3218,  3917,  3918,   109,   135,   509,   653,
    1061,  1381,   110,   111,   112,   113,  1384,  1498,  2414,  1499,
    2288,  1500,  1501,  1977,  1860,  1725,  1726,  3202,  1211,  1212,
    2291,  2757,  2758,   918,   662,  1087,  1079,   128,   129,   130,
     665,   666,   131,  1040,  1041,  2608,  3049,  3415,  3672,  3673,
    3870,  4018,  1081,  3882,  4347,  4487,  1082,  1083,  3104,  3884,
    4145,  4349,  4460,  1084,  2660,  3432,  4022,  4264,   114,  1003,
     606,  1496,  1491,  1493,  1973,  2488,   115,   116,   117
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -3613
static const int yypact[] =
{
    4855,  2448,   100, -3613,  -148,   200, 50566,   112,   806,   806,
     405,  2683, -3613, -3613, -3613, -3613, -3613,  3310, -3613, 50566,
     100, -3613, 24619, -3613, -3613,   -55, -3613,   176,   806,   100,
     422, -3613, 50566, -3613,   685,  1671,   100, -3613, -3613, 45013,
   -3613,   405, 50566, -3613, -3613, -3613, 45013,  -148,   328,   384,
     585,   -27, -3613, -3613, 50566,  2064, -3613,  -158,  1181,  1048,
   -3613, -3613,  1026, -3613, -3613, -3613, -3613, -3613, -3613, -3613,
   -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613,
   -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613,
   -3613, -3613, -3613, -3613, -3613, -3613, 25240, -3613, -3613, -3613,
   -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613,
   -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613,  1346, 50566,
    1408, 50566,  1394, 50566, 43162, 50566,  1034,  1008,  1451, -3613,
   -3613,  1610, -3613, -3613,   806,   405, -3613, -3613, -3613, -3613,
   -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613,
   -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613,
   -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613,
   -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613,
   -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613,
   -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613,
   -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613,
   -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613,
   -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613,
   -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613,
   -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613,
   -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613,
   -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613,
   -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613,
   -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613,
   -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613,
   -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613,
   -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613,
   -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613,
   -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613,
   -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613,
   -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613,
   -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613,
   -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613,
   -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613,
   -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613,
   -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613,
   -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613,
   -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613,
   -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613,
   -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613,
   -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613,
   -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613,
   -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613,
   -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613,
   -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613,
     982, -3613, -3613,  -148, -3613, -3613, -3613, -3613, -3613,  1757,
    1530, -3613,  1613, 43162, -3613, 50566, -3613, -3613, -3613,  1110,
   -3613,  1313, -3613,  1319,  1636,  1653,  1670,  1228, 11367,  1686,
    1686,  1686,  1686,  1745,  1686,  1686, 50566, -3613,  1686, -3613,
    1686,   806, -3613, -3613,  3204, 50566,  1609,   483,  -121, 43162,
    1466, 50566,  -148,    53, -3613,  1747, -3613, -3613, -3613,   806,
   -3613,  1948,  1813,   274, 50566, -3613, -3613,   806,   968,     7,
    1416, -3613, -3613,  1531, -3613,  3817,   154, -3613, -3613, -3613,
    2207, 27103,  6366,  1531,  1164, -3613, -3613,  1524,  -148,   -86,
    1556,  -148, -3613, -3613, 50566,  -148,   806,  1742, -3613, -3613,
     286,   286,   286, -3613,   286, -3613,   286, -3613,  -158,  1431,
   -3613, -3613,  1440, 50566,   727,   933, -3613, -3613,  1412,  1086,
   -3613,  1506, 40694, -3613, 50566, -3613, -3613, -3613, -3613,  1726,
   -3613, -3613, -3613,  2297, -3613, 24619, -3613, -3613, -3613,  1008,
   -3613, 50566,  1601, -3613, -3613, -3613, 24619,  1483, 50566,  1557,
   24619, 24619,   212,    16,   868, 50566, 50566,  1938, -3613,  2127,
   40694,  1696, -3613,   375,  1321,  1610,  2140, -3613,  1530, -3613,
    1530,  1530,  1530, -3613, -3613, -3613, 45630,  1228,  1512,  1526,
    1539, 16479, -3613,  1541,  1566,  1586, 11367,  1589,  1597,  1600,
    1615,  1626,  1630,  1637,  1651,  1655,  1669,  1676,  1680,  1690,
    1692,  1692,  1698,  1700,  1706,  1716,  1333,  1724, -3613,  1737,
    1749,  1762, -3613, -3613,  1770,  1773,  1775, -3613, -3613,  1778,
    1803,  1805, 12006,  1826,  1842,  1847, -3613, 21505,  1860,  1865,
    1874,  1878,  1882,  1889,  1899,  1901,  1905, -3613, -3613, 11367,
    1698, -3613, -3613,  1907, -3613,  1928,  1931,  1937,  1951,  1965,
    1969,  1981,  1988,  2008,  2010,  2030,  2032,  2035,  2048,  2050,
    1698, -3613,  1459,  2059,  2061,  1590,  2067, -3613,  2069, -3613,
     332,  2071,  1692,  1698,  1698,  2075,  2097,  2099,  2104,  2107,
   16479, 16479, 16479, 11367, -3613, 50566, -3613, 50566,  1852,  2914,
   -3613,  2505, 16479,   906, -3613, -3613, -3613, -3613, -3613, -3613,
   -3613,  1720,  1622, -3613, -3613, -3613, -3613, -3613,  2114,  1583,
    2133, 50566, 50566, 50566, 50566, 50566, 50566, 43162,  1798, 50566,
   40694, -3613,  1686,  1789,  3924,  1913,  1932,  1493, -3613, -3613,
   -3613, -3613, -3613,  2028, -3613, -3613,  1955, -3613,  2154, -3613,
   -3613,   177, -3613,   186, -3613, -3613, -3613, -3613, -3613, -3613,
    2186,  1944, -3613, -3613,   128, -3613, -3613, 50566, -3613, -3613,
   -3613, -3613,  2201,  2086, -3613, -3613, -3613,   159,  2543,   213,
   24619, -3613,  1991, 11367,  1404, -3613,  -179, -3613, -3613,  2372,
   -3613, -3613, 40694, 24619, -3613, -3613, -3613, 22128, -3613, -3613,
    2604, -3613,  2062, -3613, -3613,  1622,  3969, -3613,  1913,  2392,
   -3613,  2394,  2301,    16,  2198, -3613, -3613, -3613, -3613, -3613,
   -3613, -3613, -3613, -3613, -3613,  2150,  2207, -3613, -3613,   468,
    2326,  2155,   793,   800, 36375,  1047,   825,    56, 27723, 36992,
    2166, -3613, -3613, -3613,    97,  2333, -3613,  2643, -3613, -3613,
     299, -3613,  2213,  1576,   299, 41311,  2573,  1368, -3613,   150,
   -3613,  2668, -3613, -3613, -3613, -3613, -3613,  2345,  2328,  2369,
   -3613,   385,  2147, -3613,  -148, -3613,   808, -3613, -3613,  2354,
   -3613,  2573,   299,  1368, -3613,  2597,  2724,   546,  2694,  -135,
   -3613, -3613, -3613, -3613, -3613,   -34,  2802, -3613,  2263, -3613,
   -3613, -3613, 24619, -3613, -3613, -3613,  2201, -3613, -3613, -3613,
   -3613,  2268, -3613,  2541,  2384, -3613, -3613,    42, -3613,  2282,
      28,  2763, -3613,  1084, 37609, -3613, -3613, -3613,  2799,  2815,
    1692,  2293, -3613, -3613, -3613,  2947, -3613, -3613,  2303,  2850,
    2850,  2850,  2962, -3613, -3613, -3613, -3613, -3613, -3613,  2507,
    2380, -3613,  1601, 24619,  2741,  2358, -3613, -3613,  2606, 11367,
   -3613, -3613, -3613,   744, -3613, -3613,   289, -3613,  2944,  2575,
   -3613, -3613, -3613, -3613,  2843, -3613, -3613,  2947,  2905,  2850,
    2798,  2393, -3613, -3613, -3613, -3613, -3613, -3613,   250, -3613,
   -3613, -3613, -3613, -3613, -3613, -3613,  1517, -3613, -3613, -3613,
   -3613, -3613,  1601, -3613, 24619, 50566, 50566, 50566, 24619, -3613,
    2397, -3613,  2388, -3613, 11367, 11367,   334,  2967,  3028,  3028,
    3028,  1852,  2434, 11367, 11367, 11367, 11367, 11367, 11367, 11367,
   11367, 11367, 11367, 11367, 11367,   343,  2408, -3613, -3613,  1946,
   -3613,  2409, 11367, 11367,  2500, 11367,  1622, 11367, 25861, -3613,
    4156, 11367,   466,  2907, 11367, 11367, 11367, 11367,  3349, 11367,
   11367, 11367, 25861,  3042,  2417, -3613,  2412,  1487, 11367, 11367,
    1684, 11367, 11367, 11367, 11367, 11367, -3613, -3613, 11367, 11367,
   11367, 11367, 16479, 11367, 11367, 11367, 11367, 11367, 11367,  3028,
    3028, 11367, 11367,  1689, -3613, 11367,  1622,    86,    86, 11367,
    1622,  8172, 11367, -3613, -3613, -3613, -3613, -3613,  2420, -3613,
   -3613, -3613, 25861,  3028,  3028, 11367, 11367,  2967,  2967,  2967,
     210,  2422,  1207, 11367, 28343,  2416, -3613, -3613, -3613, -3613,
   11367, 11367, 11367, -3613, 16479, -3613, -3613,  2078, -3613, -3613,
   -3613, 12645, 16479, 16479,  2430, 16479, 16479, 16479, 16479, 16479,
    2800, 16479, 16479, 17118, 17757, 16479, 16479, 16479, 16479,   183,
    2967, 43162, 16479, 11367, -3613, -3613, 50566, -3613, -3613, -3613,
    2428,  2706,  1798, -3613, -3613,   -87,  2918, -3613, -3613,  2437,
   24619, -3613,  2442, -3613,  2806, -3613, -3613,  2807,  2811,  2812,
   -3613, -3613, -3613, -3613, -3613,  3029,  2813, -3613,  -148,  2819,
   -3613, -3613, -3613, -3613,  2458, -3613, -3613, -3613, -3613, -3613,
   -3613, -3613,  2564, -3613, -3613, -3613,  2467, -3613, 40694,  2467,
   -3613, -3613,  2467, -3613, -3613,  2467,    84,  4884, -3613, -3613,
   50566, -3613, 51183, -3613, -3613, 22128,  -148, -3613, -3613, 13284,
   -3613, -3613, -3613,  2828,   149,  2470, -3613, 24619, -3613,  1852,
   -3613,    87,    87,  2718,  1511, 43162, -3613, -3613,   162,  2477,
    2559,  2481, -3613,  2562, 24619, 24619, -3613, -3613, -3613, -3613,
    -148,     7, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613,
   -3613, -3613, -3613, -3613, -3613,  2487,  2965,  2492, 40694,   834,
   -3613, 50566, -3613,  1739, -3613, -3613, -3613,  2493, -3613, 11367,
   -3613, -3613, 50566, -3613, -3613, -3613, -3613, -3613,  3069, 11367,
   -3613, 40694,  1058,   930,   903,    97, -3613, -3613, -3613, -3613,
   -3613, 50566, 46247,  2511,  8811,  2633,  2906,  -148, 11367, -3613,
    2522,  1530, 50566, 50566, 50566, 24619, 50566, 24619, -3613,  1027,
    1027, -3613, 38226, -3613, -3613, -3613, -3613,   299, 50566, 50566,
     299, 40694, -3613,  1368,   948, 50566,   299, -3613,  2908,  2619,
   -3613, -3613, -3613,  2974, -3613, -3613,  2966,  2526, -3613,  2991,
   -3613, -3613,  2647,  1368, -3613, -3613, 24619, -3613, -3613,  1368,
   -3613,  1368,  1368, 11367,   299,   299, -3613,  1175, -3613, -3613,
   -3613, -3613, -3613,  2671,   -86, -3613, -3613, -3613,  1130,   286,
    2771, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613,
   -3613,  1115, -3613, -3613, -3613, -3613, -3613, -3613, -3613,   189,
   -3613, -3613, -3613,  2136,  3030, -3613, 43162,  2837,   867,  1322,
    2837,  1812,  -148,   882, -3613,   882, -3613,  3386,  2820,   231,
   24619, -3613,  2536, -3613,  2783, 46864, 24619, -3613, -3613, -3613,
    1075,  2546,  2542,  1852,  4384, -3613, -3613, 24619, -3613, -3613,
   -3613, -3613,  2603, -3613, -3613, -3613, -3613,  2105, -3613, -3613,
   -3613,   196,  1856,  2574,  2601,   139, 40694,  2997, 50566, 50566,
    1530, 50566, 50566, -3613, -3613, -3613, -3613, -3613,  2557, -3613,
   -3613, -3613,  1248, 50566,  3003, 31439, -3613,   303,   314, -3613,
    3028,  2568, -3613,  2578,  2579,  2583, 11367,   236,   347,   360,
    1117,  1414,   950,   404,  1001,   421, -3613,  1472,   450,   481,
     489,   258, -3613,  2588,  2570, -3613, -3613, -3613, -3613, -3613,
   -3613, -3613, -3613,  2589, -3613, -3613, -3613,   496,   518,  1140,
    1166,  2591,  2592, -3613, -3613, -3613, -3613, -3613, -3613, -3613,
   -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613,
   -3613, -3613, -3613,  3005, -3613,  1542, -3613, -3613, -3613, -3613,
    2593, -3613, -3613,  1170,   630,   660,   219,  2602,  1604,   671,
    1664,  1710,  2598, 25861, 50566,  3028,  2600,  1266,  1282,  3028,
    2605,   701,  1294,  1730,  1750,  1779,  1316,  1324,   826,  1784,
    2924,  1328,   876,   896,   936,   984,  1348,  2610,  2611,   994,
     202,  3028,  2614,   262,  2621,  2627,  1352,  9450, 10089, 10728,
     165,  1006, -3613,  2615, -3613,  2412,  2629,  2632,   279,  1371,
   -3613, 11367, -3613, -3613,  1284,  1235,  2659,   172,   903, -3613,
    2758, 50566,  2137,   174, -3613, -3613, -3613, -3613, -3613, -3613,
    1217, -3613,  2607, -3613,  2634,  1918,  2638, 11367,  1194,  2638,
    3800,  1388,  1388, 16479,  2580,  1020, 12006,   768, 12006,   768,
    2638,  2638,  2638, -3613, 16479,  2642, 16479, 16479, -3613,  2967,
    1852,  2637,  1299, 50566, 24619,   -87, -3613, -3613, -3613, -3613,
      97, 40694,   145, 24619, 43162,  2641, -3613, -3613, -3613, -3613,
   -3613, -3613,  -148, -3613, -3613,  3930, 24619, -3613, 50566, -3613,
    2722, -3613, -3613, -3613, 22749, 22749, -3613, 22749, -3613, -3613,
     323,   414,  3037,  2672, -3613, -3613, -3613, 30820,  1852, -3613,
   24619, -3613,  3053,   -16, 24619,  2650, -3613,  2653, -3613, -3613,
   -3613, -3613, -3613,  2463,  2762, -3613,  3278, -3613, 11367,  -148,
   -3613, 40694, 40694, 24619, 24619,   804, -3613,  2257,  3279, -3613,
    3969, 18396,  3088,  3103, 22749, 22749, 22749, -3613, -3613, -3613,
   -3613, -3613,  1173,  1852, -3613,  2655, -3613, 41928, -3613,  1852,
      97,  2664,  2666, -3613, -3613,  3038,   646, -3613,  2669,  2674,
   -3613,  2660,  2662,  2665, 47481, 11367, -3613,   930, -3613, -3613,
      97, -3613, -3613, -3613, 16479,  1737, -3613,  1852, -3613, -3613,
    -148,  3116, -3613,  1852,  2676, 50566, -3613, -3613, -3613, -3613,
   -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613,  3142,
   -3613,  2853,   -41, -3613, -3613, -3613, -3613, -3613, -3613, -3613,
     299, -3613, -3613, -3613, -3613, -3613, -3613, -3613,  2903,  2573,
    2147,  2906, -3613,   299,  1368, 24619,   299,   299,  1852, -3613,
   -3613,  2738, -3613, -3613,  2685, -3613, -3613,  2738, -3613, -3613,
   -3613, -3613, 50566,   955,  2846, -3613,  2689, -3613, -3613, 24619,
   -3613,  2691, -3613,  3138,  3285,  2573, -3613, -3613, -3613,    97,
      97,  2992, -3613,  -148,  2823,  2830,  2831,  2832,  2833,  2875,
   -3613, -3613,  -148,  -148, -3613, -3613,    97, -3613,  1054, -3613,
   -3613, -3613, -3613,  -148,  -148,  -148,  -148,  2746,  -148,  -148,
    1788, -3613, -3613,    97,    97, -3613,   977, -3613, -3613, -3613,
   -3613, -3613, -3613, -3613,  1481, -3613,  2085,  3272,  2961,    97,
      97,  3272,    97,  2964,  2969,    97,    97,  2801,  3217,    97,
    3106,  2826,  2374,  3107,    97, -3613,  2827,  3230,    97,    97,
      97,    97,  3272,  2976,  3322,    97,    97, -3613,    97,  2978,
    2983,   190,  2984,  2985,    97,   922, 50566,    97,    97,  2989,
      97, -3613, -3613,  6251, -3613, -3613, -3613, -3613, -3613, -3613,
     722, 23373, -3613, -3613,    97,   170, -3613,  2948, -3613, -3613,
   -3613, 24619,  3193, -3613, -3613, -3613, -3613, -3613, -3613, -3613,
   -3613, -3613, -3613,  2756, -3613, -3613, 11367,  3231,  3232,  3233,
    3234,  3236,  3240,  3243,  3247,  3248,  3249,  3251,  3253,  3255,
    3256,  3257,  3259,  3261,  3262,  3263,  3264,  3265,  2791, -3613,
   -3613, -3613, -3613, -3613, -3613,   233,    97,    97,    97,    97,
   -3613,  1877, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613,
   43162,  3150,   256,   -72, -3613, -3613, 43162, -3613, 50566, -3613,
    1886, 50566,  2795,   694,  3779,  1135,  3064,  3065,  3066, 50566,
    2847,  2672, 31439, -3613, -3613,  1130, -3613,  2796, 13923, -3613,
    2804, -3613, 11367, -3613, -3613, -3613,  1568, 11367, 11367,  3290,
    2757, -3613, 42545, -3613, -3613, -3613, 11367, -3613, 11367, -3613,
   11367, 11367, 11367, 11367, 42545,  2757, 11367, -3613,  2816, -3613,
    3207,  3210, -3613, -3613, -3613, -3613, 11367, -3613, 11367, 11367,
   -3613, 11367, 11367, 11367, 11367, -3613, 11367, -3613, -3613, 16479,
   -3613,  2810,  2818, -3613, -3613, -3613,  2821, -3613, 11367, -3613,
   -3613, -3613, -3613, -3613, -3613, 11367, -3613, 11367, -3613, 11367,
   11367, 11367, 11367, -3613, -3613, -3613, 14562, 11367, 11367,  2822,
   -3613, -3613, 11367, 11367, 11367, -3613, 11367,  1096, 11367,  1578,
   11367,  2017, 11367, -3613, 11367, -3613, -3613, -3613, -3613, 11367,
   -3613,  1795, -3613, -3613,  2302, -3613,  1284,  2824, -3613, -3613,
    1739, -3613, -3613, 43162, 11367, -3613, -3613, -3613, -3613, -3613,
   -3613, 16479,   310,  2838, 16479, -3613,  3800,  3349,  3349,  2125,
   11367,  1194,  3800, 11367,  2839,  2829, -3613, 11367, 50566, -3613,
   -3613, -3613, -3613, 43162, -3613, -3613, -3613, -3613,   145, -3613,
    2442, -3613, -3613,  2650, -3613, -3613,  1809, -3613, 40694,  2835,
   -3613,  2840,  2898,  2904,  2910, -3613, -3613, -3613, -3613, -3613,
   -3613, -3613, -3613, -3613, -3613, -3613, -3613,  2573,  2257, -3613,
   -3613,  2844, -3613, -3613,  2606,  2916,  2863,  3188,  3376, -3613,
   -3613, 50566, 16479, -3613,  3436,  2852,  2855,  3323,  2856,  1852,
   -3613,  2935, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613,
     782, -3613, -3613,  2858,  2858, 20261, -3613, -3613, -3613, -3613,
   -3613,  3333,  1174,  1174,  1174, -3613, -3613, -3613, -3613,  3122,
   40694,  3305,  3306,  3307,  1084, -3613,   437, -3613,  1391,  3260,
    2573, -3613,  3312, 43779, -3613, 32056, -3613, -3613, -3613, -3613,
    1058,  2951,  2957,   -20, -3613, -3613,  3258,  3086, -3613, -3613,
   -3613,    97,  1852, -3613,  2511,  8811,  2872, 28963, -3613,  1264,
   -3613,    92, -3613, 38843,  3339, 38843, 38843, -3613,  3149, -3613,
   -3613,  3116, -3613,  2672,  1368, -3613, -3613,  2031, -3613,  1175,
   -3613, -3613,  1315,  3267,  3269, -3613,  3132,  1419,  3132, -3613,
   -3613,  1315, 25861,  1130,  2535, -3613,  2746,  3187, -3613, -3613,
   -3613, 41928, 39460, -3613, -3613, -3613, -3613,  3399, -3613,  3407,
     240, -3613, -3613,  1840,  1322, -3613, -3613, -3613, -3613, -3613,
   -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613,
    1812,  1840,  1840,   882, -3613,   126, -3613, -3613, -3613, -3613,
   -3613, 26482,  1530, -3613,   116, -3613,  1530, -3613,  1075,  1075,
    1530, 26482,   100,  1264,  2746,  1686,  2746, 48098,   100,  -148,
    -148,  2315,    97,  2746, -3613, -3613,  3276,  1686,  3280,  1686,
    1686, -3613, 43162, -3613,    97,   960,  2746,  1264,  1264,  1686,
     100, 25861,  2341,  2376, -3613,  -148,   100, -3613, -3613, -3613,
   -3613, 24619,   100,   100,  2932, -3613, -3613, -3613,  2746,  2376,
   48098, -3613, -3613,  6600, -3613, -3613, -3613, 19640, 50566,   986,
     209, -3613,  2881, 34524,    47,   291,  2979,   931,  2892, -3613,
     374,  2902, 48715,  1852,  2912,  2746,  -148,  -148,  1264,  -148,
    2746,  -148,  -148,  -148,  -148,  -148,  -148,  -148,  2746,  2746,
    -148,   152,  1402,  -148,  2746,  4384,  -148,  2463,  1840,  1840,
    1856, -3613,  3165,  3337,    97, -3613,   179, -3613, -3613, -3613,
   -3613, -3613, -3613, -3613, -3613, -3613,  2999, -3613,   166,  3095,
    2923, -3613, -3613,   326, -3613, -3613,  1186, 24619, 19019, -3613,
   -3613,  3166, -3613,  3774,   870,   870, -3613, 24619, 24619, 24619,
   -3613,  2917,  1130,  3185,  1656,  2672,  2933, -3613, 12006,  1406,
   -3613,  1852, 11367,  1852,  1582, -3613,  2929,  2929,  2929, -3613,
    2930, -3613, -3613,  2929,  3324,  2929,  3329,  2937,  2938,  1821,
    1213, -3613,  1827,  1230,  1441,  2940,  2941,  1720, -3613, 11367,
   11367,  1468,  1479,  -106,  1018,  1035,   356, -3613,  1484,  3739,
   -3613, -3613,  1535,  1537,  1564,  1591,  1077,  1602,  1844, 12006,
    1618,  1159,   362, -3613,  1624,  1111,  1136,  1646, 11367,  1677,
   11367,  1722, 11367,  1743,  1767,  1791, -3613,  2150,  2302, -3613,
   -3613,  2942, -3613, -3613,  2936,  1852,  2945, -3613, -3613, 11367,
   -3613,   906, -3613, -3613, 16479,   367,  2950, -3613,  1852, -3613,
   -3613,  2952,  1720, -3613, -3613, -3613, -3613, -3613, -3613,  2954,
   -3613, 50566,  -180,  2953, 32673, 40694, 40694, 40694,  2949, 11367,
   -3613, -3613,  3213, 24619, -3613,  3363, -3613, -3613, -3613, -3613,
   -3613,  2956,  2958, -3613, -3613, -3613,  3800,  3326,  3200, -3613,
   -3613,  2463, 50566, 40694, -3613,  2207, 25861, -3613,  2963, -3613,
    2963,  1491,  2971,  1862, -3613, -3613, -3613,  2959,  2198, 18396,
    3401,  2437, 40694, 40694, 40694, -3613,  2672,  2672,   144,  3019,
    3360, -3613, -3613, -3613, -3613, 49332, -3613, -3613, -3613, -3613,
    1344, -3613,  2972,  2977,   134,  3184, -3613, -3613, -3613, -3613,
    8811, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613,
   -3613, -3613, -3613,  2573, -3613, -3613, -3613, -3613, 38843, -3613,
   -3613, -3613, -3613, -3613,   299,  3448, -3613,  2975, -3613,  -181,
    1235, -3613,  1219, -3613, -3613, -3613,  3364,  3132,  3132,  1315,
    3367,  1106,  2986, -3613,    97, -3613, -3613, -3613,  2207, -3613,
   -3613, 11367, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613,
   -3613, -3613, -3613, -3613, -3613, -3613,  1481, -3613, -3613, -3613,
     100,  2987,  3365,  3366,  1075, -3613, 26482, 26482, -3613, -3613,
    1530,  1530, -3613,   101, 48098, -3613, -3613, 26482, -3613, -3613,
   -3613,  2990, -3613, -3613,  2463, -3613, -3613, 39460,  -148, -3613,
    1686, 50566, -3613, 26482, 26482, -3613,  -148, -3613, -3613, -3613,
   -3613, -3613, -3613, -3613, 26482, 48098,  2993, -3613,  1300, -3613,
   -3613, -3613, -3613, -3613,  1948, -3613, 48098, -3613, -3613, 48098,
   -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613,
   -3613,  2994,  2739,  1625, -3613,  2988,  2996, -3613, -3613, -3613,
   -3613, 50566, -3613, -3613, 24619, -3613, -3613, -3613,  5229, 50566,
   -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613,  3221,
   -3613, 11367, 11367,  3268, 50566,  3271, -3613,  3546, 50566,  3612,
   -3613,   121, -3613, 48098, -3613,  3000, -3613,  3002, -3613,  2746,
   -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613,
   -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613,
   -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613,  3006, 50566,
    1840,   256, -3613, -3613, -3613, -3613,  -148,  1186, -3613, -3613,
   -3613, -3613,  3277,  3281, 50566, -3613, -3613, -3613, -3613,  3146,
   -3613, 24619,  3010,  3011,   786, -3613,  6299, -3613, -3613, -3613,
   -3613, -3613, -3613, -3613, -3613, -3613, 31439,  2672,  3380, -3613,
   -3613,  3349, -3613,  1852, 11367,  1533, -3613, -3613,   272, -3613,
    1538, -3613, -3613, -3613,  3016, -3613, -3613, -3613, -3613, -3613,
   -3613, -3613,  2482, -3613, -3613,  2757, -3613, -3613, -3613,  3017,
    3349,  3349, -3613, -3613,  3179, -3613, 11367, 11367, -3613, 11367,
   -3613,  1057,  3018,  3043, -3613, -3613, -3613, -3613, 11367, -3613,
   -3613,  3349, -3613, 11367, -3613, -3613, 11367, -3613, 11367, 11367,
   -3613,  1793, -3613,  1858, -3613,  1872, -3613, -3613, -3613,  2493,
   -3613, -3613,  1207, 50566, -3613, -3613,  1867, -3613, -3613, 11367,
   -3613, 43779, -3613, -3613,  3235, -3613, -3613,  3452, -3613, -3613,
   -3613,   -33,   -33,   -33, 15201,  1852,  3512, -3613, -3613, -3613,
    3363,  3402, -3613,    41, -3613, 50566,  3027,  1643, -3613,  1883,
   -3613, -3613,  3031, -3613,  2150,  3032, -3613,    97, 15201,  2858,
    3195, -3613, -3613,  1491, 25861, 32056, -3613, -3613, 40694,  2437,
    2437,  2437,  2573,  3464,  2916,  2916, -3613, 29583, -3613, -3613,
    3191, -3613, -3613, 33290, -3613, -3613, -3613, -3613, -3613, -3613,
   28963, 47481, -3613, -3613,  2573, -3613,  -148,  2037,  1739,  2644,
   -3613,  1130, -3613,  1315,  3421,  3427, -3613,  1315, -3613, -3613,
   25861,  2672, 15201, -3613,   745,  2150,  1852,  3044,  1300, -3613,
   -3613, 11367,  1530, -3613, -3613, -3613, -3613,  3045, -3613, -3613,
    3553,  3554, -3613, -3613,  2105, 50566, -3613,  3069, -3613, 26482,
    2990, -3613,   462, -3613, -3613, -3613, 25861, -3613, -3613, -3613,
   -3613, -3613, 50566, -3613, 24619, -3613, 19640, -3613,  3049, -3613,
    2929,  2929,  2929, -3613, -3613, -3613,  2929, -3613,  2930,  3284,
   -3613,  2930,  2930, -3613, -3613, -3613, -3613, -3613,   272,   227,
   -3613, -3613,   272, -3613, -3613, -3613,   173,  1227,  2930, -3613,
   -3613, -3613, -3613, -3613, -3613, -3613,  2929,  2929,  2929, -3613,
   -3613,   272,  2929, -3613,  2929, -3613,  2825, -3613,   268,   117,
    2929,  2929,  2929,  3016,  3047, -3613,  1852,  3349,  3605, -3613,
   -3613,  3203,  -148,  3548, -3613,  1892, -3613, -3613, -3613,  3467,
    3063, -3613, 48715,  1921, -3613, -3613,  1812, -3613, -3613, -3613,
   -3613,  3205,   838, -3613,  3237,  3070,  3068, -3613, -3613,  -148,
    3072, -3613, -3613, -3613, -3613, -3613,  3681, -3613,  3074,  3075,
    3076,  2796, -3613, 40077, -3613,  -202,  1852,  3077,  3079,  3081,
    3082,  3666,   182, -3613,  3677, 42545, -3613, -3613, -3613,  1940,
    3359, -3613, -3613,  2929, -3613,  2930, -3613, -3613, -3613,  3661,
   -3613, -3613,  2929,  3480,   272, -3613, -3613,  3090, -3613,  3091,
    3093,   286,  3094,  1876,  1142,  1975,  3400,  3474, -3613,  3316,
   -3613,  1880,  1070,  1890,  1916,  1958,  1966, -3613, -3613, -3613,
    1543,  1235, -3613, -3613,  1985, -3613,  3456,  3362,   641,  3125,
    3125,  3125,  1737,  1852,  1994, -3613, -3613, -3613, -3613,  3496,
   -3613, -3613,  3104,  3278, 50566, -3613,  3200, -3613,  2493, 25861,
   15201,  3105,  3108, -3613,    28, -3613, -3613,  3097,  2437, -3613,
    3694,  3531, -3613, -3613, 43162,  3110, -3613, -3613,  3412, -3613,
   -3613, -3613, -3613, -3613, -3613, -3613, -3613,  2689,  2761,  3157,
    1315,  1315,  3008,  3158, 11367,  3115, -3613,  3185, -3613, -3613,
     859,  2493, 11367, -3613,  -107,  1974,  3117,  3118, 50566,  3119,
    3120, -3613,  3759, 26482, -3613, -3613, -3613, -3613, -3613,  5229,
     100, -3613, -3613,  2990,   782,  3121, -3613, 50566,  3442, -3613,
   -3613, -3613, -3613,  -137, -3613,  3124,  -137,  -137, -3613,  2326,
   -3613,  3155,   272, -3613, -3613,  3159, -3613, -3613, -3613,  -137,
    3127,   272, -3613, -3613, -3613, -3613,  -137, -3613, 43162,  -148,
    2970,  3750, -3613,  3183, -3613,  3639,  3514,  3752, -3613,  2714,
   -3613,  3518,  3414,    97, -3613,   272, -3613, -3613,  3741, -3613,
     272,  3741,  -137,  -137, 50566, -3613, -3613, -3613, -3613, -3613,
   -3613, 50566, -3613,  1342, 50566,   143, -3613, -3613, -3613,  2746,
    2000,  -148, -3613, -3613, -3613,  3141,  3144, -3613, -3613, -3613,
     291, -3613, 50566,  5229, -3613, -3613,    28,  6251, -3613,  1351,
   50566, 50566, 50566,  3607,  3321, -3613, -3613, -3613, -3613, -3613,
   -3613, -3613, -3613, 42545, -3613,  3741,  3423,  3152, -3613, -3613,
   -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613,
   11367, -3613, -3613,  3451,  3611, -3613, -3613, -3613, -3613, -3613,
   -3613,  1391,  1391, -3613, -3613, -3613,  3775, -3613,  3245,  3266,
   -3613, -3613,  3270, -3613, -3613,   119,  1819, -3613, -3613, -3613,
   -3613, 15201,  3538,  3254, -3613, -3613,  3160,  3202, -3613, -3613,
    1543, -3613, -3613, -3613, -3613, 11367, -3613,  3185,  2315, -3613,
   29583, -3613,  1207, -3613,  3215, -3613, -3613, -3613,  3218,  1852,
   50566,  3380, -3613, -3613,  1075,  1075, -3613,   859,  1543,  1300,
    2463,  3200, -3613, -3613, 50566, 50566,  2072,  1300,  3173, 50566,
   50566,  1174,  1174,  1174,  1402,  1402, -3613, -3613,   986, -3613,
   -3613,  3559, -3613, -3613,  2094, -3613,   901,  3443, -3613, -3613,
   -3613, -3613,  -137, -3613,   286, -3613, -3613, -3613, -3613, -3613,
     286, -3613, -3613, -3613, -3613,  3178, -3613, -3613, -3613,  3457,
    3223, -3613,  3186, -3613, -3613, -3613, 35141, -3613, -3613, -3613,
   -3613, -3613, -3613, -3613,  3309, -3613, 56736, -3613, -3613,  -158,
    3208,  2132, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613,
     106, 50566, 24619,  3268,  3368, -3613,  3069, -3613, -3613,  3166,
    3195, -3613,  2138,  2157,  2164, -3613,  3660, -3613, -3613,  3196,
    1992, -3613, -3613, -3613, -3613,  3697, -3613, -3613, -3613, -3613,
   -3613,   292,  3459,  2746,  2746,  2746,   629,  1819, -3613, -3613,
    3273, 24619, 16479,  3311, 50566,  1214,  2551, -3613,  1748,  1300,
   11367,  2573, 39460, -3613, -3613, -3613, 11367,  3206, 11367,  3214,
    2178, -3613, -3613,  3654,  3654, -3613, -3613, -3613, -3613,  2210,
    2218,  2253, -3613, 50566, -3613,  3490,  2262,  2287, -3613, -3613,
   -3613,   986,  3219, -3613, 50566, -3613, -3613, -3613,    78, -3613,
   -3613,  2290, -3613,  2306,  2019, -3613,  3178, -3613, -3613, -3613,
   -3613, -3613, -3613, 11367,  3698,  3250, 50566,   952, -3613, 57970,
   57970, 50566, -3613, -3613, -3613, -3613,  5859, -3613, -3613,   676,
   -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613,
   -3613,  3828, -3613,  3226, -3613, -3613,  3227,  1495, -3613, -3613,
   50566, 49949, -3613, -3613,  5229,  3671,   931, -3613, -3613, -3613,
     786,  3229,  2198,  1002,   164,   218, -3613, -3613, -3613,  3805,
   -3613, -3613, -3613, -3613, -3613, -3613,   109, -3613, -3613, 25861,
   -3613, -3613,  2463, -3613,  2310, -3613, -3613, -3613,  3331,    97,
      97,  3733,  3736,    97,    97,    97,    97,  3242,  2551, -3613,
    3720, -3613, -3613, 11367, -3613, -3613,  1852,  3472, -3613,  3809,
    1235,  1852, 50566,  1852, 50566, -3613, 50566,  1065, -3613, -3613,
   -3613,  3454, -3613,  1002,  1300,  3252, -3613, -3613, -3613,  3200,
   -3613,  1165,  1165,   272,   286,   272, -3613,  3274, -3613,  3283,
    1852, 11367, -3613, 11367,  3282, -3613, -3613,  3693, 50566, -3613,
   -3613, -3613, -3613, 11367, -3613, 56736, 56736, -3613, -3613, -3613,
   -3613,  3855,    28,  3826,  3519,  3831, -3613, -3613,  2313, -3613,
   -3613,  3304, -3613, -3613,  3546,  5229, -3613, -3613, -3613,  -148,
      97, -3613,  1002, -3613, -3613, -3613,    97,  3504, -3613,   164,
   -3613, -3613, -3613,   218, -3613, -3613, -3613, -3613, -3613,  3275,
   -3613,    97,  2315,  3286, -3613, -3613, 50566,  3289, -3613,  -148,
    -148,    97,    97,  2777,  2777,  2463, 43162,  3370, -3613, -3613,
      97,  1300, 50566, -3613,  1087,  3625, -3613,  2319,  2321, -3613,
    3851, -3613,  3853,  3293,  3294, -3613,  1002, -3613, -3613, -3613,
     164,   218,  2335, -3613,  3897, -3613,   915,  3537,  3542, -3613,
   -3613, -3613, -3613,   535,  1852,  1852, -3613,   241, -3613, -3613,
    3663,  3757, 11367,  1852, 53651,  3291, -3613, -3613, -3613, -3613,
   -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, 57353,
   11367, -3613,   676,  3828, -3613,  3543, -3613,  3551, -3613, 49949,
   -3613, -3613, -3613,  3793, 56736, -3613,  3771, -3613,    28, -3613,
    2746, -3613, 35758,  1311, -3613, -3613, 25861, 15201, -3613, -3613,
    3311, -3613,  3296, -3613, -3613,   625, -3613, -3613,  -148,  -148,
   -3613, -3613, -3613, -3613, -3613,  2337, -3613, 43162, -3613, -3613,
    3885,  3887,  3781,  3892,  1087, -3613,  -115, -3613, -3613, -3613,
   -3613, -3613, 48715, 48715, -3613, -3613, -3613, -3613, -3613, -3613,
   -3613,  3357,  3816, -3613, -3613,   124,  3343, 11367, 56736, -3613,
    3786, -3613,  3727,  1727,  3669,  3314, -3613,  3317,   487,  3832,
   57970, 57970, -3613, -3613, -3613, -3613, -3613,  3811, -3613, -3613,
   -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613,  3495,
   -3613, -3613,  2339, -3613, 15840, -3613, -3613, -3613, -3613, -3613,
   43162, -3613,  3370, -3613,  3332,   286,   286,  3918,   286, -3613,
    3920,  3921,  -115, -3613,  3340,  2344,  1165,  1165,  -148,  3722,
   -3613,   124, -3613, -3613,   273, -3613,  1852, 54268,  3925, 50566,
   -3613, -3613, -3613, -3613, 11367, -3613, 44396, 54885,  3334, -3613,
   -3613, -3613,  3515, -3613,  3304,  3758,  3809, -3613,  3296, -3613,
    3344, -3613,  3800,  2551, -3613, -3613,  3347, -3613, -3613,   286,
   -3613,   286,   286, -3613, -3613, -3613, -3613, -3613, -3613, -3613,
   -3613, 11367, -3613,  3834,  3439, -3613,  3354, -3613, 56736,  1673,
   56736, -3613, -3613,  3784,  3358,  1915, -3613,  3353, -3613, -3613,
   56736,  3948,  3625, -3613, 15840,  3372, -3613, 11367,  3373,  3374,
   -3613, -3613, -3613, -3613,  1852,  3947, 56736, 50566, 51800,  3568,
   55502,  3812, 50566,  5229,  3829,  3833, -3613, 56736, -3613,   286,
    3790, -3613, -3613,  1852, -3613, -3613,  3470, -3613, 52417, -3613,
    2569, -3613,  3411, -3613, -3613,  3894,  2056, -3613, -3613, -3613,
    3664,  3394, -3613, -3613, 56736, 56736, -3613, -3613, -3613, 33907,
   11367, -3613, -3613, -3613, -3613, -3613,  1084,   895, 20882,  3552,
   53034, 56119, -3613, -3613, -3613, 30203, -3613, -3613, -3613,  3838,
   -3613,  1852, -3613, -3613, -3613, -3613, -3613, 43162,  2346, -3613,
   -3613, 25861, -3613, 33907, -3613, -3613, -3613, -3613, 23996,  3395,
   -3613,    97, -3613, -3613, 25861, -3613, -3613, 15201, -3613, -3613
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -3613, -3613, -3613, -3613, -3613,    38, -3613, -3613, -3613, -3613,
   -3613, -3613, -3613, -3613,  1707, -3613, -3613, -3613, -3613, -3613,
    1401, -3613,   359, -2336,  -435,  3073, -3613, -3613, -3613, -3613,
   -3613, -3613, -3613, -3613,   614,  1521,  3381, -3613,   354, -3613,
      20, -3613, -3613, -3613, -2913,   -95,  -297, -3613, -3613,   341,
      22,  3025,  -296, -3129, -3613, -3613, -3613, -3613, -3613, -3613,
   -3613, -3613, -3613,   366,   364, -3613, -3613,   178, -3613, -3613,
   -1880, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613,  -496,
    -447,  1909, -3613, -3613, -3613,  4015, -3613,  3482, -3613,  1229,
    2217, -3613, -3613, -3613,  -391,   204, -3613,   205, -3613,   206,
   -3613,   207, -3613,   215,   216,   217,   226, -3613,   232, -3613,
   -3613,  -441, -3613, -3613, -3613, -3613,   234, -3613, -3613, -3613,
   -3613, -3613, -3613, -3613,  -309, -3613, -3613,  -134, -3613, -3613,
    -295,   235, -3613,  -238,   242, -3613,   244, -3613,  -147, -3613,
    -141, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613,
   -3613, -3613, -3613,  3046, -3613, -3613, -3613, -2017, -3613, -3613,
   -2407,  2590, -3613, -1701, -3613, -3613, -1807, -3613, -3613, -1716,
    -622, -3613, -3613,  1288,   613, -3613, -1425, -1922, -1898, -3613,
   -3613, -3613, -2018, -2013,  -794,  2342, -1209, -2238, -3613, -3613,
   -3613, -3613,    88, -3613, -3613,   225,  2036,  2596, -3613,  2068,
   -3613, -3613,  1125, -3613, -3613,  1307,   593,  1305, -3613,   894,
    2788, -1238, -3613, -3613, -3613, -3613, -3613, -3613,   -45,   211,
    -146, -3613, -3546,   596, -3613, -3613, -3613, -3613, -3613, -3613,
   -3613, -3613, -2359, -3613, -3613, -3613,  -328, -3613, -3613,  -235,
   -3613, -3613,  -282, -3613,    75, -2323, -3613, -3613, -3613, -3613,
    2584, -1380, -3613,  3623, -3613,  -448,   452,  2074, -2420, -1416,
   -3613,  -909,  -896, -2501, -3613, -3613, -3613, -3354,  1053,  1485,
   -3613,   805,  2073, -1903, -3613, -3613, -3613, -3613, -3613,  1552,
   -3613, -3613,   564, -3613,   560, -3613, -3613, -3613, -3613,  -230,
   -3613,   188, -2869, -3613, -3613, -3613, -2848,  1012,   798, -3613,
   -3613, -3613,  -467, -2223,  -795, -3613,   337, -2227, -2498,   769,
   -3613, -3613,   522, -3612, -3613, -3613,  -575, -2137, -2427,     2,
   -3613, -3613,   537, -3125,  1685, -3613, -3613, -3613, -3140, -3232,
   -3613,    90, -3613, -3613, -3613, -3613, -2917, -3613, -3613, -1506,
   -2015, -3613, -3613,  4166,  4167, -1530, -2696, -2905,   -31,   -29,
   -3613, -3613, -3613,  2018, -1560,    32,    24,    26,  1514, -1026,
     237, -2324, -1961, -3613,   351, -3613, -3613, -3613, -3613, -3613,
   -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613,
   -3613,  2112,  -872, -3613, -3613, -3613, -3613, -3613, -3613, -3613,
   -2734,   869, -3613, -3613,  1607, -3613, -3613, -3613, -1877,  3197,
   -3613, -3613, -3613, -3613,  3556, -2218, -2553, -3613, -3613, -3613,
   -3613, -3613, -3613, -3613, -3613,  2717,  1781, -3613, -3613,  1733,
    2246, -3613, -3613, -3613, -3613, -3613, -3613,   601,  1816, -3613,
   -3613, -3613, -3613,  2116, -3613, -3613, -3613, -3613, -3613, -3613,
   -3613, -3613,   -50, -3613, -3613, -3613,   887,  2656, -3613, -3613,
   -3613,    -9, -3613, -3613, -3613, -3613,  2373, -3613, -3613, -3613,
   -3613,  2679, -3613, -3613, -3613, -3613, -3613, -3613,  1409, -3613,
    1853, -3613, -1480, -3613, -3613,   988, -1009,  1806,  -603,  1933,
     355, -3613,  3617, -3613, -3613, -3613, -1693, -2460, -3613,  3318,
    -744, -2377,  2364,  -558, -1833,  1015,   252,  1682,   502,  3703,
   -3613, -1158, -1162, -3613, -3613,  -653, -3613, -3613, -3613, -3613,
   -3613,  2033,  2034,  -567, -3613, -3613, -3613, -3613, -3613, -3613,
   -3613, -3613, -3613, -3613, -3613,  1452, -3613, -3613, -3613, -3613,
   -1735, -3613, -3613, -3613, -3613, -3613,  1327, -3613, -2080, -3613,
   -3613,  -490, -3613,  3085, -3613, -3613, -3613, -2337, -1967,  1755,
     949, -3613, -3613, -3613, -3613, -3613, -3613, -3613,  1765, -3613,
   -2743, -3613, -3613, -3613, -3613, -3613,  1954, -3613, -3613, -3613,
   -3613, -3613, -3613, -3613, -1769, -3613, -1847,   302, -3613,   446,
   -3613, -3613, -3613, -3613, -3613, -3613, -3613,   -64,   827,   -63,
   -2089, -1116,  1817, -3613, -3613, -1290,  3126, -2073, -3613, -3613,
   -3613,  1941, -3613, -3613, -3613, -3613, -3613,   918, -2580, -1414,
   -3613, -3613, -3135,  -954, -2293,  -911, -3613, -1387,  1369,   465,
   -3613, -1875, -1100,    89, -2644, -2560, -3613,  1675, -3613, -3613,
   -3613, -3613,  -237, -3613, -3613, -3613,   479,  1841, -3613, -3613,
   -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613,  -550,  -798,
   -3613,  2093,  -481, -3613, -3613, -3613, -3613, -3613, -3613, -3613,
   -3613, -3613,  2943,  2919,  1911, -3613, -3613, -2352, -3613, -3613,
    1871, -3613,   728,  -916, -1872,  1022, -3613, -3613,  1024, -3224,
   -3613, -3613, -3613, -3613, -3613, -3613,   973, -3613,    -1,  3684,
   -3613, -3613, -3613, -3613, -3613, -3613, -3613,  2701, -1081,  3608,
   -3613, -3613, -3613, -3613, -3613, -3613,  2347, -3613, -3613, -3613,
   -3613, -3613, -3613,  2860,  3704,  -579, -1323, -3613,  -732,  2351,
    1833,  -881, -3613, -3613, -3613,  3714, -3613, -3613, -3613, -3613,
   -3613, -3613, -3613, -3613, -3613,  2502,   954, -3613, -3613, -3613,
   -3613,  2960, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613,
   -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613,
   -3613, -3613,  1066,  -113, -3613,     0,  -154, -3613,   -69, -3613,
   -3613, -3613, -3613, -3613,  -244, -3613, -3613,  -247,  -669,  -995,
   -1410,   678, -1799, -2537,  1068,  2946, -3188,  -702, -1179, -1161,
   -2182,    66, -3613, -3613,  3416,    65,   741,  -255,    -6, -2860,
    -109,  -580, -3613, -2124, -3613, -3613, -3613, -3613, -3613, -3613,
   -3613, -3613,  1875, -3613, -3613, -3613,  1044, -3613,  3744, -3613,
    2599,  1045,  3748, -1373,  2443,  1896,  1900, -3613, -3613,  1910,
   -2035, -3613, -3613,   203, -3613,  2518, -3613, -3613, -3613, -3613,
   -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613,
    2980,  3768,  3446, -3613,  3033, -3613, -3613, -3613, -3613, -3613,
     435, -3613,   764, -2282, -1331, -3613, -3613,  2779,   962, -3613,
    1558,  -196,  -484, -3613, -3613,   438, -3613, -3613,   327,  3782,
    3458, -3613, -3613, -3613, -3613, -3613, -2746,  -892, -3613, -3398,
   -2801, -1711, -3613, -3613, -2169, -3032, -3613, -3613, -1042, -3613,
   -3613, -3613, -3613, -2110, -3613, -3613, -3613,   102,  3841,  3844,
   -3613, -3613,   967, -3613,   434, -3613, -3613, -3613, -3613, -3613,
   -3613, -3613,  3687, -3613, -3613, -3613, -3613,  3709, -3613, -3613,
   -3613, -3613, -3613,  3717, -3613, -3613, -3613, -3613, -3613,  2226,
   -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613, -3613
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If zero, do what YYDEFACT says.
   If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -2637
static const yytype_int16 yytable[] =
{
     500,  1064,   873,   976,  1504,  1009,   929,   972,  1399,  1402,
    1690,   543,  1385,   542,  2289,   629,   548,  1464,  1414,  1506,
     559,  1586,  1923,  1713,  1265,  1155,   562,   567,   498,  1623,
    2423,  2424,  1667,   574,  2103,  1434,   577,  1136,   801,  1890,
     574,  1714,  1022,  3036,  1823,  1922,  2167,  2168,   598,   812,
     813,   814,  2407,   816,   817,  2708,  1779,   819,  2100,   821,
    1434,  2975,   655,  1428,  2800,  2923,  1735,  2715,   649,   137,
    1745,  1746,  2832,  1743,  1749,  1750,  1751,  1752,  3578,  1754,
    1755,  1757,  1759,  1760,  1761,  1762,  1763,  1975,   546,  1356,
     618,  1465,  3256,  1186,  2000,  3079,  1190,  1632,  2683,  3290,
    1053,  1056,  2528,  3128,  1832,  1078,  1086,  2491,  2492,  1511,
    2787,  2073,   586,   621,  1107,   500,  2406,   500,   628,   634,
    1930,  2763,  1512,  2533,  2503,  2716,  2529,  2853,  2841,  1978,
    3409,  2896,  2516,  3417,  2652,  2902,  3910,  2143,  1249,  2653,
    1943,  2521,  2522,   623,  2911,   625,  3774,  1318,  1946,  1947,
    2541,  2013,  3657,   984,  2545,  3873,   991,  2543,  2544,  3396,
    2546,  1827,   617,  2549,  2550,  2560,  3296,  2553,  1318,  2419,
    3511,   652,  2562,  3583,  2759,  2569,  2565,  2566,  2567,  2568,
    2941,  1216,  1217,  2572,  2573,  3094,  2575,  2153,  1216,  1217,
    1216,  1217,  2584,  1838,  1487,  2588,  2589,  2325,  2591,  3138,
    3139,  2485,  3596,  3711,  2013,  3145,  4388,  3147,  2685,  2578,
    1637,  4101,   507,  1207,  1208,  1209,  1764,  3276,  1216,  1217,
    1094,  1439,  1095,  1096,  1097,  1250,  1216,  1217,  3618,  3623,
    2649,   558,  3624,   643,  3625,  1216,  1217,  3330,   566,  3092,
    1268,  1466,   938,   920,  1310,  1534,  4149,  3320,  3461,  1327,
   -1985,  3634,  3317,  3117,  2650,  3949,  2604,  2884,  3656,  1395,
    3076,  2136,  3462,   865,  2636,  2637,  2638,  2639,  3443,  1057,
    2366,  1974,  1776,  2941,  1216,  1217,  3463, -2516,  1216,  1217,
    1804,  2013,  2505,  2933,  2934,  3800, -1516,   938,  3619,  3461,
    1319,   554,  3264,  3461,  1494,  1216,  1217, -2584,  3888,  1313,
    4149,  1331,  1350,  3462,  3484, -2368,  2942,  3462,  1641,   877,
    2002,  1319,   889,   607,  3041,  2524,  3772,  3463,  1508,  1216,
    1217,  3463,  2656,   997,  2455,  1508,  1216,  1217,   938,   920,
    1216,  1217,   938,   920,  2641,  1481,   985,   644,  2136, -1806,
     587,  1271,  3682,   551,  3723,  3112,  1589,  -873,  1549,  2939,
    3828,  3683,  2579,  2149,  -537,  1589,  2644,  3748,  2272,  2953,
    1996,  2088,  1508,  1216,  1217,  3244,  2190,   136,   576,  1193,
    2926,   594,  1216,  1217,  1059,   132,  1216,  1217,  1216,  1217,
    3199,   575,  1474,  1216,  1217,  1074,  3050,   263,  2187,   265,
    2893,  -538,  4167,  4328,  3799,  2257,   590,  3288,   136,  4380,
    3085,  3086,  2864,  3039,   657, -2584,  2367,   555,  1524,  1525,
    2872,  1642,  4142,  1996,  3518,  1645,  3927,   503,  4150,  1570,
    1216,  1217,  1646,  2865,   890,  4328,  3858,  2224,  1765,  3860,
    4381,   138,  3217,  2644,  3705, -1516,  1631,  1216,  1217,  2014,
     858,   263,   552,   265,  3946,  3829,  1571,  1564,  3051,  2847,
    1155,  1766,  3040,  1060,  2866,  3289,  1445,  1566,  3305,  3099,
     133,  3042,   645,  1345,  1475,  1550,  1216,  1217,  1775,  1551,
     595,  4168,  4150,  3143,  2657,  2089,  1590,   608, -2368,  3251,
    1552, -2447,  3837,  3898,  2927,  1612,  3444,  3830,  3684,  1885,
    1996,  3841,  2014,  1805,  1971,  1495,   891,  1216,  1217,  1332,
     998,   999,  1647,  1216,  1217,  1216,  1217,   628,  2937,   634,
    3077,  2441,  1216,  1217,  2325,  3857,  1567,  1568,  1569,  1777,
    3859,  3621,   857,  2943,  2951,  3265,   986,  1356,  3801,  1459,
     634,  1253,  2137,  4267,  1216,  1217,  2559,  3919,  1776,   853,
    3327,  1218,  3749,   628,  1219,   863,  1194,  1195,  1218,   866,
    3569,  1219,   855,  4212,  3573,  1649,  1925,  1356,   881,  1928,
    3259,  3260,  3261,  1931,  3100,  1934,  1779,  1417,   586,  2014,
    1058, -1516, -2448,  2000,  1740,   930,  1328,  1396,  1218,   878,
    3321,  1219,  1656,  1482,  2846,  1657,  1218,  3929,   993,  1219,
    1976,  2306, -2447,  1949,  1950,  1218,  2456,  2326,  1219,  2527,
    1511,  2368,  2309,  2528,  1566,  2312,  1383,  1012,  3603,  2137,
    1553,  2919,  3130,  1512,  1767,  1776,   628,   864,  1026,  3587,
    1469,  2463,  3315,  3316,  1806,  1600,  1601,  2529,  2652,   618,
   -2012,  2910,  4405,  2653,  1218,   500,  2605,  1219,  1218,  3024,
     618,  1219,  1051,  3078,   618,   618,  1216,  1217,  3200,  1065,
    1026,  1655,  1511,   586,   628,  1218,   586,  2073,  1219,  1668,
     994,  1670,  4102,  1038,  3947,  1512,  1311,  1440,  1748,  2956,
    1102,  2958,  3954,  1683,  1684,  1685,  1216,  1217,  2969,  1218,
    2968,  1689,  1219, -2448,  3429,  1769,  1218,  1216,  1217,  1219,
    1218,  2981,  2976,  1219,  1650,  2944,  3447,  2990,  2992,  2885,
     967,  1036,  2901,  4389,  3277,  2303,  3748,  1554,  1264,  1652,
    3744,   902,  1048,  3008,  2992,  3127,  2143,  1216,  1217,  1839,
    1782,  1156,  1828,  1218,  2649,  2001,  1219,  2648,  1800,  2854,
    3396, -2516,  1218,  2373,  4254,  1219,  1218,  1945,  1218,  1219,
    3060,  1219,  2154,  1218,   822,  3065,  1219,  2580,  2650,  2131,
    3935,  2155,  3135,  3073,  3074,  1978,  3418,  3095,  3712,  3081,
   -2516,  4029,   871,  2936,  2939,  2939, -1516,  1092,  2148, -1516,
     884,  3626,  3090,  3262,  3263,  3323,  4157,   967,  3874,  1213,
    1218,  1215,  1547,  1219,  1075,  1777,  1220,  1825,  2931,  2002,
    1314,  3331,  3332,  1220,  4075,  1220,   556,  1218,  1853,   995,
    1219,  2273,  3334,  3464,  1845,  1258,   500,  1260,  1261,  1026,
     500,   628,  2292,   500,   628,  1400,  3091,   588,  3752,  1405,
    1410,  1870,  2935,  1220,  3620,  3393,  1218,  3785,  3786,  1219,
    -873,  1220,  1000,  3087,  1259,  3279,  1431,  -537,  1263,  2258,
    1220,  1267,  1216,  1217,  3464,  2188,  1720,  1721,  3464,  2204,
    4226,  1323,  3428,  1793,  3611,  1720,  2223,  1218,  3612,   660,
    1219,  1929,  1777,  1218,   618,  1218,  1219,  3538,  1219,  3654,
    4350,  4505,  1218,   591,  -538,  1219,   628,   618,  1196,  1220,
     820,   618,  4393,  1220,  2805,  4191,  1039,   589,  3631,  3632,
    3633,  3749,  1216,  1217,  1218,  2205,  3636,  1219,  2261,  2262,
    1220,  3545,  1446,  3135,  3662,   856,   882,  2013,  1960,  1418,
    3101,  1233,  1216,  1217,  2326,  2278,  2279,  3118,   628,  3309,
    1545,  3471,   628,   628,  1220,  1848,  1547,  2832,  3581,  3314,
    4323,  1220,  2149, -2447, -1476,  1220,  1334,  1076,  1980,   628,
    2178,  1347,  4365,  2655,  -441,  3211,  2768,  2769, -2012,  1353,
    2179,  3564,  1216,  1217,  2430, -2157,  3568,  1470,  2385,  4208,
    3572,  4125, -2182,  4219, -2447,  4221,  1216,  1217,  1220,  3549,
    4027,  2230, -1476,  1905,  2445,  3718,  3548,  1220,  1251, -2636,
    2385,  1220,  3236,  1220,  3721,  2459,   618, -2296,  1220,  3318,
    3319,  4045,  3168,  3169,  3021,  3750,  2191,  3791,  3185,  3186,
    1216,  1217,  2013,  3208,  3209,  3597,  1218,  2792,  1507,  1219,
    1216,  1217,  4261,  3443,  2528,  2434,  1658,  1216,  1217,  1659,
     508,  2490,  1216,  1217, -2448,  1220,  1460,  1296,  1434,   586,
    1854,   586,  2949,  2949,  1216,  1217,  1218,   618,  2529,  1219,
    2407,  2196,  1220,  1923,  4319,  1923,  1923,  1218,  3792,  2457,
    1219,  1216,  1217,  4358,  3452, -2448,  4298,   560,  2198,  2473,
    3294,  3295,  2462,  2585,  1434,  2465,  2466,  2729,  2889,  2890,
    3045,  1220,  1961,  2652,  3682,  3487,  1962,  1218,  2653,  2000,
    1219,  3119,  1471,  3683,  4149,  3046,  3793,  2201,   618,  1575,
    1576,  1577,  1582,  1216,  1217,  3965,  2687,  1080,  1088,   885,
    2527,  3496,  1220,  1236,  2406,  1730,  1881,  1472,  1220,  2533,
    1220, -2012,  1216,  1217,  3598,  2057,  1996,  1220,  2202,  3565,
    4126,   118,  2161,  3609,  3610,   592,  2203,  1216,  1217,  4120,
    4121,  3143,  1156,  2210,  3143,  3143,  2560, -1806,  2820,  1220,
    4324,  2894,  1768,  2767,  2977,  4116,  1156,  2939,  2666,  2408,
     564,  3143,  1216,  1217,  3751,  2211,  1216,  1217,  1216,  1217,
    1574,  2060,  1546,  1233,  1580,  3635,  4543,  3752,  2603,  2649,
    3022,  3655,  3658,  3660,  3661,  1216,  1217,  2073,  1882,  1875,
    3471,   610,  1216,  1217,  3425,  4218,  1216,  1217,  4207,  2289,
    2474,  2772,  2773,  2650,  2916,  2014,  1715,  3931, -1828,  2311,
    2386,  2324,  1218,  1128,  2001,  1219,   611,  2475,   628,  1395,
    2816,  1996,  3980,  2313, -1806,  2143,  1417,  4213,  2978,  2476,
    3684,  2648,  2386,  1062,  1063,   263,  1511,   265,  3577,  1216,
    1217,  3444,  3152,  2328,  1714,   636,  1837,  2359,  1401,  1512,
     120,  1776,  4300,  1855,  2586,   628,  1216,  1217,  3143,  3155,
    1772,  1220,  1218,  4301,   886,  1219,  4150,  4046,  2766,  3753,
    4361,  2381,  2382,  2435,   618,  3960,  1251,  2221,  2776,  1067,
    2372,  4200,  1218, -2157,  1199,  1219,  4320,  3958,  3959,  4196,
   -2182,  1220,  1216,  1217,  1252,  4261,  4148,  4127,  1996,  2748,
    2014,  3966,  1220,  1534,  1992,  2002,  3036,  2222,  1216,  1217,
    2477,  4314,   628,  2914,  4117, -2296,  2101,  1912,  2226,  3165,
    1216,  1217,  1218,  3105,  1809,  1219,  1812,  4201,  2979,   618,
    3337,  1714,  1220,  2473,  3230,  1461,  1218,  1107,  3715,  1219,
    2102,   618,  1216,  1217,  3120, -1476,  1776,   648,  2238,   628,
    1216,  1217,   504,  4568,  1216,  1217,   505,  2148,   618,   618,
    3183,  3586,  1876,   586,   136,  1236,  4544,  2331,  2654,  2593,
    1218,  2304, -1828,  1219,  1216,  1217,  2416,  1913,  1216,  1217,
    1218,  2387,   628,  1219,  1806,  1857,  3891,  1218,   637,  1883,
    1219,  1547,  1218,  1865,  1432,  1219,  1866,  1216,  1217,  3967,
    2877,  1816,  2988,  2387,  1218,   628,  2296,  1219,  1245,  1246,
    1247,  1248,  3497,   967, -1829,  1886,   930,  1982,  4098,  1015,
    1714,  1218,  2478,  1776,  1219,  2417,   500,   500,   500,   618,
     500,   618,  1216,  1217,  1871,   586,  1924,  -441,  1262,  3106,
     613,  2149,  1926,   500,  3338,   628, -2157,  2655,  2949,   500,
    1993,  1547,  4202, -2182,  1906,  1907,  1908,  1220,  1910,  3794,
    2878,  2477,  1872,  1218,  2474,   673,  1219,  1216,  1217,  4057,
     618,  1927,  4302,  2245,  3221,  3222,  3223,  1933, -2296,  4436,
    4437,  2475,  1218,  3298,  -206,  1219,  1531,  2479,  1923,  4058,
    4410,  4410,  1902,  2476,  1216,  1217,   667,  1218,  1777,   661,
    1219,  1909,  1974,  1911,   136,  1216,  1217,  1220,   967,  1589,
    1216,  1217,  1238,  1239, -2584,  4078,  2013,  2559,   619,  1932,
     628,  2527,  1218,  2249,   674,  1219,  1218,  1220,  1218,  1219,
     737,  1219,  1515,  4214,   618,  2870,  1573,  1396,   708,  2096,
     618,  1233,  1944,  2250,   263,  1218,   265,  3084,  1219,  4290,
    4291,   618,  1218,  1254,  1914,  1219,  1218,  2879,  4133,  1219,
    1974,  1216,  1217,  1216,  1217,    43,  1996,  1220,  1418,  4134,
     628,  1435,   500,   500,  2477,  2163,   500,  4031, -1829,  2674,
     622,  1220,  1252,  2251,   635,   967,  3897,  1102,  2297,  2177,
    1216,  1217,  2849,  1777,  1216,  1217,  2195,  2012,   713,  1218,
    2159,  2160,  1219,  2675,  1216,  1217,  2090,   859,  1216,  1217,
     624,  1960,  2098,  3129,  1873,  1220,  1218,  1216,  1217,  1219,
    3107,  1952, -2584,  1436,  2523,  1220,  3207,  4215,  1216,  1217,
     641,  2252,  1220,  3036,  3036,   648,  2880,  1220,  4353,  1675,
    1016,  2256,  4303,  1093,  1216,  1217,  1362,  2197,  4077,  1220,
    1216,  1217,  1218,  2274,  4216,  1219,   675,  3247,  1243,  1244,
    1245,  1246,  1247,  1248,  2474,  3166,  1220,  1017,  1218,  3457,
    1777,  1219,  1216,  1217,  3457,  1714,  2648,  1156,  2231,  2850,
    1218,  2475,  3167,  1219,  1340,  2329,  2478,  1341,  1723,   737,
     981,  1776,   860,  2907,   982,   726,  1570,  1953,  1421,  1216,
    1217,  2504,  1218,  1216,  1217,  1219,  1589,  3299,  1220,  2224,
    1218,  1589,  2674,  1219,  1218,  2530,  3736,  1219,  2192,  3108,
    2001,  2712,  3036,  1572,  3178,  1996,  2717,  1220,  3010,    57,
     761,  3241,  1835,  1236,  1218,  2295,  2675,  1219,  1218,  2723,
    1075,  1219,  1220,  1136,  1186,  1190,  2416,  2771,  1216,  1217,
     120,  2479,  4014,  1216,  1217,  1422,  1134,  1218,  3188,  2805,
    1219,  1858,   861,  2193,  1253,  2285,   654,  1220,  2429,  1216,
    1217,  1220,  2738,  1220,   742,  1961,  1836,  2319,   618,  1962,
    4135,  2750,  1423,  3189,   652,   628,  2212,   618,   628,  3730,
    1220,  2298,  1218,  1216,  1217,  1219,  1960,  1220,  3589,  3590,
     618,  1220,  2335,  3817,  2014,  3184,  4373,  2299,  2341,  2341,
    2289,  2341,  2213,   659,  3425,   737,  2220,  1216,  1217,  1216,
    1217,   628,  1432,  3868,   618,  2556,  3458,  1218,   618,   656,
    1219,  3458,  2391,  1342,   818,  3627,  1679,  2782,  3628,  4479,
    1268,  1701,  1039,  2881,  1220,   628,   628,   618,   618, -1717,
    2320,  3817,  1724,   967,  1218,  1156,  2148,  1219,  2341,  2341,
    2341,  1220,  2654,   668,  3532,  1218,  2101,   586,  1219,  3292,
    1218,   628,   516,  1219,  3326,  4014,  4014,   670,  1216,  1217,
    2340,  2340,   929,  2340,  1216,  1217,  2908,  1254,   930,   761,
    2102,  1859,  2655,  1076,   671, -1717,  2364,  1220,  1216,  1217,
    1334,  2172,  1216,  1217,  2661,  3459,  1216,  1217,  3533,  2452,
    3469,   672,  2234,  1220,  2380,  1134,  1216,  1217,  1890,  1353,
    2384,  1218,   810,  1218,  1219,  1220,  1219,  2662,  2235,  2286,
    2340,  2340,  2340,  4363,  2003, -2636,  4367,  1254,  1777,  3282,
    2239,  1254,  1216,  1217,  2317,  2301,   737,  1220,  2136,   618,
    1218,  2479,  2318,  1219,  1218,  1220,  1385,  1219,   571,  1220,
    1961,   815,  2243,  1300,  1218,   571,  2472,  1219,  1218,  2136,
    2244,  1219,  2391,   618,  2248,  2448,  1616,  1218,  1135,  1220,
    1219,   769,  1434,  1220,  1216,  1217,  2967,  3869,  1218,  2317,
     854,  1219,  1216,  1217,  2253,  1424,  3890,  3273,  2265,   868,
    1216,  1217,  1220,  4197,  1218,  4198,   874,  1219,  3302,  3566,
    1218,  4014,  4014,  1219,  4484,   761,   876,  2280,  1216,  1217,
     896,  2464,   894,  3285,   983,  3455,  1243,  1244,  1245,  1246,
    1247,  1248,  1218,  3912,  4485,  1219,  1617,  1220,   886,  2004,
    1301,  1134,  2558,  1216,  1217,  2484,  1302, -1806,  4042,  4043,
    4044,  2642,  3132,  1923,  3489,  3490,   990,  2658,  2494,  1218,
    2194,  1253,  1219,  1218,  1618,   857,  1219,  2501,  2502,  4463,
    2587,  1233,  1220,  2928,  2957,  3502,  3704,  1010,  2506,  2507,
    2508,  2509,  1616,  2517,  2518,  2602,  2971,  3156,  2973,  2974,
    1303,  1011,  3322,  1400,  2940,   618,  2393,  2394,  2984,  1220,
    1996,  1019,  2952,  1714,  1185,  1400,   599,  1304,  1218,  1028,
    1220,  1219,  3460,  1218,  3162,  1220,  1219,  3460,  2199,  2200,
    4014,  1996,  1039,  3335,  1052,  3163,  1425,  2692,  1049,  1218,
    3170,  2914,  1219,  1619,  3341,  4014,  3250,  3343,  1068,  3913,
    3914,  3134,  1617,  1069,  3915,  3916,   761,  2408,  1426,  1714,
    4014,  1073,  2774,  1218,   628,  1616,  1219,  1104,   600,  -628,
     628,   118,  2659,  1216,  1217,   500,  1220,  2988,  1220,  1447,
    1618,  1105,  1134,  2681,  1549,  2530,  2684,  1218,  1000,  1218,
    1219,  3174,  1219,  3175,  1106,  1714,  1108,  2531,  2217,  1253,
    1427,  3420,  2510,  2664,  2764,  1220,   628,  4179,  4180,  1220,
    1448,  4183,  4184,  4185,  4186,  2005,   938,   920,   628,  1220,
    3176,  1109,  1620,  1220,  4014,  1617,  2006,   504,  1979,  2137,
    2752,   505,  1220,  2007,  2786,  1776,  4014,  4014,  4173,   905,
     601,  1110,  2313,  1220,  1113,  1189,  1256,  3177,  1218,  1619,
    2137,  1219,  1114,  1618,  1218,  1115,  1776,  1219,  3179,  1220,
    2225,  1253,  2511,  3243,  1449,  1220,  4249, -1717,  1218,  1450,
    1116,  1219,  1218,  1236,  3182,  1219,  1218,  1736,   565,  1219,
    3187,  1117,  1268,  1268,  1268,  1118,  1218,  1220,  1233,  1219,
    2512,  1801,  1119,  4014,  1802,  -628,  4401,  1803,  4270,  3206,
     511,  1550,  3190,  4014,  2138,  1551,  1120,   628,  3943,  3944,
    1121,  3665,  1218, -1717,  1220,  1219,  1552,  2654,  1220,  2686,
    2227,  1253,  1619,  1029,  1122,  2138,  1257,  2008,  1620,  4288,
    4289,  1123,  2783,  3192,   905,  1124,  2101,   628,  4297,   967,
    2895,  1297,  2110,  2111,  4014,  1125,  4014,  1126,  2110,  2111,
    3562,  3540,   628,  1129,  1218,  1131,  4014,  1219,  2124,  2513,
    2102,  1132,  1218,  1220,  2124,  1219,  2228,  1673,  1220,   906,
    1218,  1133,  4014,  1219,  4014,  1030,  4014,  1253,  3194,  1137,
    3247,  4071,  4072,  4014,  1220,  2814,  2240,  1253,  1218,  2289,
    3129,  1219,  1138,  1434,  4014,   938,   920,   967,  1714,  3196,
    1272,  1620,  2429,  1400,  1139,  4073,  2241,  1253,  1220,  2837,
    4014,  4014,  1299,  1218,  1451,  4351,  1219,  1140,   967,  2009,
    1238,  1239,  1305,  3197,   628,  1141,  4014,  4014,  1142,  1621,
    1143,  4014,  1220,  1144,  1220,  2242,  1253,  2858,  2514,  2860,
    2246,  1253,  1167,   907,  2519,  2520,  1553,  3198,  1324,  3507,
    2139,  2756,  1253,  1062,  1063,  1593,  1594,  1595,  1145,  1737,
    1146,   930,  1184,  1031,   906,  2790,  2791,  1924,  4397,  1924,
    1924,  2139,  1613,  2786,  2530,  1200,  1201,  3151,  2200,   118,
    1236,  1149,  1777,  3154,  1253,  2126,  2127,  2510,   602,  1452,
    2989,  2126,  2127,  1220,  4160,  4164,  1715,  1150,  2532,  1220,
    3180,  1253,  1151,  1777,  1676,   628,   628,  1680,  2857,  3329,
     603,  1307,  -628,  1220,  3508,  1157,  3727,  1220,  3253,  3254,
    1158,  1220,  2510,  3513,  1253,  2991,  1697,  1698,  3509,  1159,
    1702,  1220,  3729,  1160,  2640,  1621,  3735,  1161,   907,  3535,
    3536,  1308,   604,  1554,  1162,  2602,  3737,  2511,  3670,  3671,
    1716,  1717,  1453,  2954,  1163,  2602,  1164,  1220,  1232,  2964,
    1165,  2963,  1168,  3355,  1241,  1242,  1243,  1244,  1245,  1246,
    1247,  1248,  3738,  1316,  1318,  2512,   628,  3678,  3679,   570,
     119,  2985,  2511,  1169,  2556,  1715,  1170,  2996,  4478,  2343,
    4480,  2344,  1171,  2998,  2999,   618,  3708,  3716,   120,  1220,
     605,  1317,  1622,  1326,  2963,   514,  1172,  1220,  1621,  1616,
    2512,  2602,  3020,  1330,  3739,  1220,  4498,  3038,  3473,  4160,
    1173,  3474,  3740,  4164,  1174,  2101,  3058,  1238,  1239,  3475,
    3803,  3731,  1253,  1220,  2965,  2966,  1175, -2627,  2411,  2412,
    2413,  3745,  1253,  1176,  2513,  2515,  3476,  1338,  4038,  2102,
    3760,  3761,  2955,  4059,  4530,  4531,  3877,  2520,  1220, -1516,
    2995,  4060,  1738,  1177,   121,  1178,  1454,  2997,  1233,  1617,
    4160,  4164,  1348,  1032,  1359,  4106,  2982,  2983,  1739,  2513,
    4512,   618,  2602,  1318,  -628,  1179,  4061,  1180,  3037,  3477,
    1181,   618,   618,   618,  3892,  3893,  3894,  1618,  1268,  3495,
    1455,  3061,  3062,  1182,  3064,  1183,  3066,  3067,  3068,  3069,
    3070,  3071,  3072, -1516,  1187,  3075,  1188,  1319,  3080,  1361,
    3948,  3083,  1191,  2514,  1192,   929,  1198,  3063,  3952,  3953,
    1202, -1806,   908,   909,   910,   911,   912,   913,  1033,  3514,
    1034,  4515,  4516,  1233, -1516,  3478, -1516,   122,  2391,   914,
    3963,  3964,  1203,  3110,  1204,  4569,  2392,  3856,  2514,  1205,
    3637, -1516,  1206,  3123,  3124,  3125,  1619, -1516, -1516,  1255,
    1234,  1241,  1242,  1243,  1244,  1245,  1246,  1247,  1248,  1378,
    2816,  1379, -1516,  1478,  1479,  1480,  1380,  2557,  4019,  4020,
   -1516,  1485,  1486,  1235,  4033,  3953,  1383, -1516,  3950,  3951,
    1386,  2558,  4062,  3956,  3957,  2335,  3638, -1516,  1323,   628,
     628,   628,  2696,  4034,  3953,   510,  3639,   618,  1392, -1516,
    4035,  3953, -1516,  -628, -1516,  1391,  1319,   908,   909,  1411,
     911,  1416,   913, -1516,  4085,  4086,  2814,   628,  2697,  2530,
    1715,  3835,  3836,  1415,   914,  1620,  3479,  1004,  1005,  3480,
    1006,  2531,  1007,  1156,  3839, -1516,   628,   628,   628,  3972,
    1236,  3842,  1432,  3640,  -635,  3972,  4090,  3536,  1420,  3272,
   -1516,  3637,  2393,  2394,  4091,  3953, -1516,   123,  1400,  1441,
    1062,  1063,  1442,  4063,  1443,  2473,  1444,  3861,  3862,  3229,
    4171,  1463,  2510,  2698,  4107,  3689,  2699,  1467,   511, -1516,
   -1516,  4064,  1924,  1468,  2700,  1473, -1516,  3713,  1714,  4092,
    3953,  3613,  2395,  1483,  3616,  3617, -1516,  3638,  4096,  3953,
    1484,  2701, -1516,  1616,  4065,  1489,  3481,  3639, -1516,  1490,
    2515,  3629, -1516, -1516,  -824,  1236,  1492,  2180,  1497,  1983,
    3271,  1502, -1516,  4097,  3953,   124,  4103,  4104,  1508,  -628,
    1514,  3310,  2511,  1984,   511,  1516,  1237,   263,  1521,   265,
    2602,  2602,  4105,  4104, -1516,  2515,  4175,  4176,  2963,  4258,
    4259,  2602,  4174,  1518,  3640,  4308,  4086,  4309,  4086, -2627,
    2512,   628,   512,  1617,  1522,  2963,  1526,  2602,  2602,  -793,
    2101,  4317,  3536,  4371,  4372,  4417,  4418,  1529,  2602,  2963,
    4435,  3422,  4557,  4558,  1530,   125,  1535,  1238,  1239, -1516,
    2963,  3031, -1516,  2963,  2102,  1536,  2474,  3903,  3904,  1537,
    2702,  1558,  2232,  1240,  1704,  1705,  2236,   682,  3719,  3552,
    3553, -1516,  1559,  2475, -1516,  3347,  1560,  3000,   618,  3001,
    1563, -1516,  1565,  3404,  3641,  2476,  3520,  3521,  2259,  2513,
    1566,  1585,  1621,  3328,  1583,  3482,  3758,  3759,   500,  1251,
    1589,  3333,  3414,  1596,  1615,  1626,  1196,  2963,   263,  1661,
     265,  1672, -2627, -1516,  1673,  1674,  1712, -1516,  1722,  1731,
    3032,  3002,  1238,  1239,  3483,  1747,  3410,  1233,  1753,  1062,
    1063,  1773,   967,  1774,  1781,  3642,  1223,  1224,  1780,  1791,
    -793,  3643,  3003,  3427,  1784,  4292,  1787,  1788,  4066,  3811,
    3348,  1789,  1790,  1792,  1985,  1795,   708,  4171,  3438,  1794,
    1797, -1516,  1798,  1821,  2703,   618,  2477,  1824,  2514,  4220,
    1833,  1225,  2473, -1516,  1841,  1714,  1842,  3004,  1843,  1844,
    3451,  3644,  1226, -1516,  1850, -1516, -1516,  1851,  3783,  1852,
    1861,  1241,  1242,  1243,  1244,  1245,  1246,  1247,  1248,  3033,
    1385,  1867,  1136,  1186,  1190, -1516,  -628, -1516,  1891,   712,
    1899,  1900,  1904,  1936,  1935,  1937,   713,  1938,  3557,  1941,
     513,  3430,  1227,  1940,  1942,  1958, -1516,  1972,  1981,  2247,
    1986, -1516, -1516,  2091,  1228, -1516, -1516,  3440,  2092,  2106,
    1062,  1063,  2105,   514,   717,   718,  3642,  2085,  2132,  3645,
    2150,  2151,  3643,  2158,  2169,  1987,  2175,  3512,  2216,  2345,
    2208,  1229,  4422,  3932,  2181,  2858,  3922,  1242,  1243,  1244,
    1245,  1246,  1247,  1248,  2183,  2184,   825,   826,  2478,  2185,
     515,  2346, -1516,  -543,  2207,  2209,   516,  2214,  2215,  2814,
    2218,  2224,  3644,  2229,  2347, -1516,  2233,  2290,  2294,   514,
    4272,  2237, -1210,  2474,  2704,  2348,  2254,  2255,  2837,  3547,
    2260,  2275,   628,   726, -1516,  4277, -1516,  1988,  2263,  1236,
    2475,   628,   517,  1230,  2264,  2276,  4016,  2783,  2277,  2300,
     518,  1248,  2476, -1346,   930,   930,  2857,  2310,  2330,  2338,
   -1516, -1516,  2356,  2479, -1516, -1516,  2365,  1547,  2371,  2377,
    2374,  2399,  2409,  3646,  1715,  2349,  2410,  2350,  2425,  2431,
    3645,  2432,  4422,  2438,  2433,  2439,  2436,   827,  2440,  2449,
    2705,  2437,  2451,  2453,  2454,  2515,   737,  3005,  -628,  2963,
    2458,  2467,  2469,  2602,  2351,  2482,  2483,  3845,  2486,  2487,
    1715,   741,   742,  2489,  2495,  2493,  2963,   828,   618,  2706,
    2602,  2496,  2497,  2498,  2499,  2500,  3034,  4070,  1989,  4550,
     829,  3563,  2530,  2477,  2542,  2552,  1400,  2547,  2551,  2554,
    2561,  3006,  2548,  2555,  2563,  1216,  1217,  1714,  2564,  2570,
    2571,  2576,  4561,   830,  2577,  3787,   831,  2582,  2583,  4550,
    4427,  4428,  2590,  4430,  2610,  4561,  1983,   832,  2606,  2352,
    1714,  2612,  2026,  2614,  2615,  2616,  2617,  1714,  2618,  2027,
    1984,  2028,  2619,  1714,  3646,  2620,  1238,  1239,   833,  2621,
    2622,  2623,  2029,  2624,  2030,  2625,  3058,  2626,  2627,  2628,
     873,  2629,   529,  2630,  2631,  2632,  2633,  2634,  2635,  2643,
    2665,  2677,  2678,  2679,  4471,   834,  4472,  4473,  2682,  2686,
    2690,  4260,   835,  2353,  2031,  3779,  2695,  1924,  2719,  2032,
    2033,  2720,  2718,  2318,  2730,  2795,  2034,  2731,  2743,   628,
    2762,  2796,  2806,  2809,  2810,  2478,  2780,  2797,  2035,  1633,
    1634,  1635,  1636,  1637,  2770,  2779,  2036,  3667,  2793,   530,
    2808,  2803,   836,  2794,  2817,  2821,  2037,  2818,  4263,  4070,
    1828,  2822,  2823,  2827,  4509,  2839,  2840,  2862,  2842,  2843,
    2844,  2038,  2417,  2863,  3694,  2416,   531,  1875,  1876,  2873,
    2888,  2891,  2905,  2920,  2924,  1508,   761,  4542,  2039,  2903,
    3812,  2904,  2925,  3813,  3029,  2040,  2041,  3048,  3768,  2429,
    2479,  2970,  2042,  1715,   767,  2972,  3044,  3053,  3088,   769,
    2043,   532,   770,  3089,  -900,  3093,  2044,  3059,   628,  3097,
    1241,  1242,  1243,  1244,  1245,  1246,  1247,  1248,  3098,  2057,
    3126,  1985,  1974,  2176,  3135,  3140,  3214,  3146,  1638,  1639,
    1640,  1641,  3148,  3149,  3150,  2045,  3157,  3158,  3201,  3203,
    3226,  3205,  3808,  3219,  3224,  4265,  3210,  2602,  3213,   533,
    3231,  3820,  3234,  3238,  3258,  3235,  1340,  3932,  3814,  3815,
    3249,  3825,  3255,  3269,  1400,  3270,  3278,  3252,  3274,   263,
    3286,   265,  3287,  3275,   837,  2046,  3293,  2047,   838,  3297,
    3312,  3313,  3311,  3300,  3345,  2048,  3405,  3325,  3412,  3344,
    3336,  3416,   628,  3346,   839,  3408,  3421,  1986,  3411,  3422,
    2049,  3426,   840,  3439,  3433,  4565,  3441,  3442,  3434,  3453,
     841,  3470,  3491,  3488,  3498,  3499,  3517,  3516,  3863,  1062,
    1063,  3526,  1987,  3531,  3528,  3867,  2391,  3537,  3872,  3539,
    3550,  3557,  3558,  3570,  1642,   842,  1643,  1644,  1645,  3571,
    3588,  3582,  3591,  3592,  3607,  1646,  3438,  3614,   843,   844,
    3664,  2604,  3666,  3668,  3808,  3808,  3808,  3675,  2050,  3676,
    3698,  3710,  3681,  3690,  3844,  3692,  3691,   628,  3695,  3700,
    3701,  3702,  3714,  3706,   -65,  3707,  2051,  3708,  3709,   534,
    2052,  3717,  3720,  3722,  1988,  1218,  3724,  3725,  1219,  3726,
    3728,  3733,  3732,  3734,  3746,   845,  3747,  3756,  3763,  3764,
    3273,  3773,  3775,  3776,  3781,  3761,  3878,  3780, -1429, -1434,
    3790,  3826,  3804,  3805,  3809,  3810,  3654,  3823,  2053,  3834,
    3838,  4263,  3840,  2054,  3848,  1647,   846,  3849,  3850,  3851,
    2055,  3852,  2056,  3854,   628,  3855,  3657,  3879,  3895,  2057,
    2058,  3880,  3896,  3901,  3941,  3899,  3902,   535,   847,  3716,
     848,  3907,  3905,  3920,  3921,  3924,   682,  3925,  3808,  3808,
    2029,  3962,  2030,  3808,  3808,  2029,  3937,  2030,  3955,  3939,
    3968,  2059,  3908,  3974,  3976,  1989,  3909,  1648,  1649,  3977,
    4017,  3978,  4028,  1400,  3983,  2060,  2061,  2062,  2063,   898,
     826,  4036,  4037,  4041,  -776,  -776,  4039,  2032,  4052,  -776,
    -776,  4082,  2032,  4335,  4070,  4087,  -776,   536,  2064,  4084,
    3982,  -776,  4095,   537,  4099,  4111,  2035,  4049,  4335,  -317,
    4129,  2035,  4143,  4132,  2036,  4147,  4539,  4166,  4467,  2036,
    4131,  4181,   538,  4346,  4182,  4024,   618,  4187,  3811,  4178,
    4190,  4192,  1233,  4194,  3024,   708,  4229,  -335,  4209,  2038,
    4255,  4226,  4273,  4256,  2038,  4257,  4306,   539,  4294,  4310,
    4539,  4311,  4318,  1508,  4321,  4331,  2039,  2065,  1508,  4322,
    4222,  2039,  4276,  4332,   540,   618,  4348,  4342,  4056,  4223,
     827,  3981,  4279,  2066,  4282,  4343,   628,  2067,  4312,  4313,
    4345,  4361,  4336,  4375,  2044,  4376,  4377,  4467,   712,  2044,
    4378,  4386,  4398,  1233,   808,   713,  2068,  3808,  4025,  4387,
     828,  2069,  4393,  4400,  4402,  4403,  4415,  1650,  4100,  1274,
    4406, -2348,  4412,   829,  2070,  1274,  4429,  4426,  4431,  4432,
    1220,  1651,  1652,   717,   718,  4458,  4434,  4439,  4459,  4445,
    4115,  4464,  4461, -1600,  3171,  4122,   830,  4050,  4476,   831,
    4475,  4477,  1275,  4481,  4486,  4482,  4489,   263,  1275,   265,
     832,  4497,   263,  4503,   265,  2047,  4335,  4567,  4492,  4494,
    2047,  4495,  4501,  2048,  4136,  4140,  4457,  4510,  2048,  4514,
    4506,   833,  4518,  4520,  4507,  1363,  4527,  -900,  2049,  4528,
    4555,  4551,  4564,  2049,  4124,  1364,  3082,  2788,  3876,  1462,
    3680,  2932,   726,  1715,  3883,  1085,  4144,  2667,   834,  4266,
    1365,  4413,  1520,  4414,  3881,   835,  3885,  4562,  4023,  4522,
    1276,   583,  1366,  1367,  1368,   980,  1276,  2401,  3257,  4488,
    3994,  3995,  3997,  3998,  1236,  4532,  3941,  4293,  3941,  1369,
    4199,  4000,  4001,  4002,  1277,  4442,  2050,  4335,  1278,  4335,
    1277,  2050,  4003,  4329,  1278,   836,  4508,   808,  4004,  4443,
    4005,  4008,   808,  4411,  2051,   737,  4341,  4335,  4009,  2051,
    4010,  4340,  4230,  1562,  4030,  2025,  2594,  2321,  4146,  3340,
     741,   742,  1279,  2071,  3237,  2574,  3766,  3242,  1279,  3530,
    1831,  4281,  3769,  4051,  4360,  1236,  4491,  4425,   808,  4335,
    4335,  4466,  1280,  4189,  4554,  2135,   669,  2592,  1280,  3889,
    3431,  3606,  3026,  3113,  2599,   808,  1281,  3818,  2055,  3819,
    2056,  4440,  1281,  2055,  3485,  2056,  4109,  3622,  2058,  3970,
    4056,  3853,  3663,  2058,  4278,  3843,  2922,   525,   526,  4315,
     628,  4205,  4316,  2676,  4271,  4274,  4299,  4275,  2786,  3122,
    4094,  3973,  2596,  1488,  3595,  1037,   808,   808,   808,   808,
    3014,  1959,  2898,  2470,  1282,  3822,  2824,  2609,   808,  4344,
    1282,  3594,  3228,  2133,  4269,  2097,  2383,  2804,  3527,  2761,
    2845,  1238,  1239,  4015,  1008,  2415,  3515,   837,  4108,  1283,
    2709,   899,  3212,  2711,  1390,  1283,  2064,  1671,  2915,  2760,
    3567,  2064,  2909,  3945,  4286,  4287,  4089,   839,  4384,  3677,
    4385,  1614,  2777,  4140,  3601,   840,  3942,  3283,  4513,  3934,
    2852,  4424,  2680,   841,  3009,  2830,  4355,  3771,  1815,  2802,
    1715,  3543,  3542,  3576,  1846,  4357,  1633,  1634,  1635,  1636,
    1637,   996,  1238,  1239,  2174,  1103,   975,  2460,   842,   808,
    1916,   628,  2461,  1370,  2892,  2065,   978,  2332,  3605,  3529,
    2065,   843,   844,  4462,  4379,   761,  3058,  3058,  4490,  3812,
    1371,  2066,  3813,  4433,  4563,  2067,  2066,  4566,  3847,  2871,
    2067,  1849,  3546,   767,  3560,   932,  3561,  2293,   769,   933,
    2443,   770,  1284,  2869,  2068,  1864,  2868,  4354,  1284,  2068,
    2861,  1285,  2370,   901,  1377,  2157,  4040,  1285,   845,  3216,
    1808,  1089,  2070,  4368,  4369,  4048,  1286,  2070,   903,  1856,
     663,  1382,  1286,   664,   628,  1241,  1242,  1243,  1244,  1245,
    1246,  1247,  1248,  1090,  1287,  1638,  1639,  1640,  1641,   846,
    1287,  1091,     0,     0,     0,     0,     0,  3814,  3815,  1111,
       0,     0,     0,  4447,     0,     0,     0,     0,     0,     0,
    4455,   847,     0,   848,     0,     0,     0,     0,     0,     0,
       0,  3116,     0,  1288,  2668,     0,  1289,     0,     0,  1288,
       0,     0,  1289,     0,     0,  1148,  1241,  1242,  1243,  1244,
    1245,  1246,  1247,  1248,     0,     0,  1372,     0,  4556,     0,
       0,  1290,  1166,     0,     0,     0,     0,  1290,     0,     0,
       0,     0,     0,  4438,     0,     0,     0,     0,     0,     0,
     504,     0,     0,  1291,   505,   808,     0,     0,     0,  1291,
       0,  4499,     0,     0,     0,     0,  4504,     0,     0,     0,
       0,  1642,     0,  1643,  1644,  1645,  1210,     0,     0,     0,
       0,     0,  1646,  1373,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1374,  1292,  4540,     0,     0,     0,     0,  1292,     0,
     808,   808,  1715,     0,     0,     0,     0,     0,     0,   808,
     808,   808,   808,   808,   808,   808,   808,   808,   808,   808,
     808,   628,     0,     0,     0,  1715,     0,  4540,   808,   808,
       0,   808,  1715,   808,     0,     0,     0,   808,  1715,     0,
     808,   808,   808,   808,     0,   808,   808,   808,     0,     0,
       0,     0,  1647,     0,   808,   808,  1339,   808,   808,   808,
     808,   808,     0,     0,   808,   808,   808,   808,   808,   808,
     808,   808,   808,   808,   808,     0,     0,   808,   808,     0,
       0,   808,     0,     0,     0,   808,     0,   808,   808,     0,
       0,     0,  2107,     0,     0,     0,     0,     0,     0,     0,
       0,   808,   808,     0,  1648,  1649,     0,     0,     0,   808,
       0,     0,     0,     0,     0,     0,   808,   808,   808,     0,
     808,     0,     0,     0,     0,     0,     0,   808,   808,   808,
       0,   808,   808,   808,   808,   808,     0,   808,   808,   808,
     808,   808,   808,   808,   808,     0,     0,     0,   808,   808,
       0,     0,  2108,     0,  2109,  2110,  2111,  2112,  2113,     0,
    2114,  2115,  2116,  2117,  2118,  2119,  2120,  2121,  2122,     0,
    2123,  2124,  2125,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   808,     0,     0,     0,     0,
       0,     0,  1543,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1650,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1651,  1652,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   808,     0,  1587,  1588,     0,
       0,     0,     0,     0,     0,   808,  1598,  1599,  2126,  2127,
    1602,  1603,  1604,  1605,  1608,  1609,  1610,  1611,     0,     0,
     808,     0,     0,     0,   808,  1627,  1628,     0,  1629,     0,
    1630,     0,     0,     0,     0,     0,     0,  1663,  1664,  1665,
    1666,     0,     0,  1669,     0,     0,     0,     0,     0,     0,
       0,  1677,  1678,     0,  1681,  1682,     0,     0,     1,     0,
       2,  1686,  1687,  1688,     0,     0,  1691,  1692,  1693,  1694,
    1695,  1696,     0,     0,  1699,  1700,     0,     3,  1703,   808,
       0,     4,  1706,     0,  1710,  1711,     0,   826,     0,     0,
       0,     0,     0,     0,     0,     5,     6,     0,  1718,  1719,
       0,     0,     0,     7,     0,     0,  1727,     0,     8,     9,
       0,     0,     0,  1732,  1733,  1734,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    10,
       0,     0,     0,  2084,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1770,     0,    11,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      12,     0,     0,     0,     0,     0,     0,   827,    13,    14,
      15,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      16,    17,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   808,    18,     0,     0,     0,   828,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    19,     0,     0,
     829,     0,  1818,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    20,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   830,     0,     0,   831,     0,     0,    21,
       0,     0,     0,     0,    22,     0,     0,   832,    23,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   833,     0,
       0,     0,  1863,    24,     0,    25,     0,     0,     0,     0,
       0,     0,  1869,     0,     0,     0,     0,     0,     0,     0,
       0,    26,     0,     0,     0,   834,     0,  1897,     0,     0,
       0,  1903,   835,   808,   808,   808,     0,     0,     0,    27,
       0,     0,     0,    28,     0,     0,     0,   808,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   836,   808,     0,     0,     0,     0,     0,   808,
       0,     0,   808,     0,   808,     0,  1948,     0,     0,     0,
     808,     0,   808,   808,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    29,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    30,     0,     0,     0,    31,     0,
       0,     0,     0,     0,   808,     0,     0,     0,     0,    32,
       0,     0,     0,  3349,  3350,     0,     0,     0,     0,  3351,
      33,  3352,     0,  3353,  3354,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3355,     0,    34,     0,   837,    35,     0,    36,     0,  2186,
      37,   808,     0,    38,    39,     0,     0,     0,     0,     0,
     808,    40,     0,    41,   839,     0,     0,     0,     0,     0,
      42,     0,   840,     0,     0,     0,    43,     0,     0,     0,
     841,     0,     0,     0,    44,     0,     0,     0,     0,    45,
       0,    46,     0,     0,    47,  3356,     0,     0,  3357,     0,
       0,     0,     0,     0,     0,   842,  3358,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   843,   844,
       0,    48,     0,  3359,     0,    49,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3360,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2267,  2269,  2271,     0,  3361,   845,  3362,     0,     0,     0,
      50,     0,     0,     0,     0,     0,     0,     0,     0,  3363,
    3364,     0,    51,     0,     0,     0,    52,     0,     0,    53,
       0,     0,     0,     0,     0,    54,   846,     0,     0,     0,
    2302,     0,     0,     0,     0,     0,     0,     0,     0,  2307,
       0,  2308,     0,     0,     0,     0,     0,     0,   847,     0,
     848,     0,  3365,     0,    55,     0,     0,     0,     0,     0,
      56,     0,     0,     0,     0,     0,     0,     0,     0,  2084,
      57,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3366,     0,     0,     0,     0,     0,     0,     0,     0,
    3367,  3368,     0,  3369,     0,     0,     0,     0,     0,     0,
       0,     0,   808,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2379,     0,     0,     0,     0,     0,  3370,  3371,  3372,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3373,  3374,  3375,     0,
       0,     0,     0,  3376,     0,     0,  3377,     0,     0,     0,
    2084,     0,     0,     0,     0,     0,     0,     0,  2442,     0,
       0,     0,  3378,  3379,   808,     0,     0,     0,   808,     0,
       0,     0,     0,   808,   808,     0,     0,     0,     0,     0,
       0,     0,   808,     0,   808,     0,   808,   808,   808,   808,
       0,     0,   808,     0,     0,     0,     0,     0,  3380,  3381,
       0,     0,   808,     0,   808,   808,     0,   808,   808,   808,
     808,     0,   808,     0,     0,   808,     0,     0,     0,     0,
       0,     0,     0,  3382,   808,     0,     0,     0,     0,     0,
       0,   808,     0,   808,     0,   808,   808,   808,   808,     0,
       0,     0,   808,   808,   808,     0,     0,     0,   808,   808,
     808,     0,   808,     0,   808,     0,   808,     0,   808,     0,
     808,     0,     0,     0,     0,   808,     0,     0,     0,     0,
       0,     0,     0,     0,  3383,     0,     0,     0,  3384,     0,
     808,     0,     0,     0,     0,     0,     0,   808,     0,     0,
     808,     0,  3385,     0,     0,     0,   808,     0,     0,   808,
       0,     0,     0,   808,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3386,     0,     0,  3387,
       0,     0,  3388,  3389,  3390,  3391,     0,     0,   808,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2613,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3392,  3393,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3394,     0,     0,     0,     0,     0,     0,     0,
       0,   808,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     1,     0,     2,     0,     0,     0,     0,     0,
       0,  2689,     0,     0,     0,  2691,     0,     0,     0,     0,
    2693,  2694,     0,     0,     0,     4,     0,     0,     0,  1605,
       0,  2710,     0,  1605,     0,  2713,  2714,     0,     0,     5,
       6,     0,     0,     0,     0,     0,     0,     7,     0,  2721,
       0,  2722,     8,     9,  2724,  2725,  2726,  2727,     0,  2728,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2732,     0,    10,     0,     0,     0,     0,  2733,     0,
    2734,     0,  2735,  2736,  2737,     0,     0,     0,     0,  2740,
    2741,  2742,    11,     0,     0,  2744,  2745,  2746,     0,  2747,
       0,  2749,     0,  2751,     0,  2753,     0,  2754,     0,     0,
       0,     0,  2755,     0,    12,     0,     0,     0,     0,     0,
       0,     0,    13,    14,    15,     0,     0,  2765,     0,     0,
       0,     0,     0,     0,    16,    17,     0,     0,     0,  2084,
       0,     0,     0,  2775,     0,     0,  2778,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    19,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    20,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    21,     0,     0,     0,     0,    22,     0,
       0,     0,    23,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2084,
       0,     0,     0,     0,     0,     0,     0,    24,     0,    25,
       0,     0,     0,     0,   808,     0,     0,     0,   808,     0,
       0,     0,     0,     0,     0,    26,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    27,     0,   808,   808,    28,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1897,     0,
       0,     0,     0,     0,     0,   808,     0,     0,     0,     0,
       0,     0,     0,     0,   808,     0,   808,     0,   808,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   808,     0,     0,     0,     0,
     808,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   808,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    29,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    30,     0,
       0,     0,    31,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    32,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    33,     0,     0,  2029,     0,  2030,
       0,     0,     0,     0,     0,     0,   808,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    34,     0,     0,    35,
       0,    36,     0,     0,    37,     0,     0,    38,    39,     0,
       0,  -776,  -776,     0,  2032,    40,     0,    41,     0,     0,
       0,     0,     0,  -776,    42,  2029,     0,  2030,     0,     0,
      43,     0,     0,  2035,     0,     0,     0,   808,    44,     0,
       0,  2036,     0,    45,     0,    46,     0,     0,    47,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2032,     0,     0,     0,  2038,     0,     0,     0,
       0,     0,     0,     0,     0,    48,     0,     0,   935,    49,
    1508,  2035,     0,  2039,     0,     0,     0,     0,     0,  2036,
     936,  3131,     0,     0,     0,  3133,     0,     0,     0,     0,
       0,   877,   937,     0,     0,     0,     0,     0,     0,     0,
       0,  2044,     0,     0,  2038,     0,     0,     0,     0,     0,
       0,     0,  3160,  3161,    50,     0,   938,   920,  1508,     0,
       0,  2039,     0,     0,   939,     0,    51,     0,     0,   940,
      52,     0,  3181,    53,     0,     0,     0,     0,     0,    54,
       0,  3191,     0,  3193,     0,  3195,     0,   808,   808,  2044,
       0,     0,     0,     0,     0,   941,     0,   942,     0,   943,
       0,     0,     0,     0,   263,     0,   265,     0,    55,   944,
       0,     0,  2047,     0,    56,     0,     0,     0,     0,     0,
    2048,     0,     0,     0,    57,     0,     0,     0,     0,     0,
      14,    15,  3225,     0,     0,  2049,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   263,     0,   265, -1806,   945,     0,     0,     0,
    2047,   946,  2084,     0,   947,     0,     0,     0,  2048,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     808,     0,     0,  2049,     0,     0,     0,     0,     0,     0,
     948,     0,   949,  2050,     0,     0,     0,     0,     0,   950,
       0,   951,     0,  1897,     0,     0,     0,     0,     0,     0,
       0,  2051,   808,   808,     0,   808,     0,     0,     0,     0,
       0,     0,     0,     0,   808,     0,   952,   953,   954,   808,
       0,     0,   808,     0,   808,   808,  3012,     0,     0,     0,
       0,  2050,     0,  2027,     0,     0,     0,     0,     0,   955,
       0,     0,     0,     0,  3306,   808,  2029,     0,  2030,  2051,
       0,     0,     0,     0,     0,  2055,     0,  2056,     0,     0,
     808,   956,     0,     0,     0,  2058,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2031,     0,
       0,     0,     0,  2032,   808,     0,     0,     0,     0,     0,
       0,   957,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2035,  2055,     0,  2056,     0,     0,     0,     0,
    2036,     0,     0,  2058,     0,     0,     0,     0,     0,     0,
    2037,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2064,     0,  2038,     0,     0,   808,     0,
       0,     0,     0,     0,     0,     0,     0,   808,     0,  1508,
       0,     0,  2039,     0,     0,     0,     0,   958,     0,  2040,
       0,     0,     0,     0,  3406,  3407,  3013,     0,     0,     0,
       0,     0,     0,     0,  2043,     0,     0,     0,     0,     0,
    2044,  2064,     0,   959,     0,     0,     0,     0,     0,     0,
       0,     0,  2065,     0,   960,   961,     0,     0,   962,   963,
       0,     0,     0,     0,     0,     0,     0,     0,  2066,  2045,
       0,     0,  2067,     0,     0,     0,     0,     0,     0,   964,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2068,  3653,     0,     0,     0,     0,     0,     0,     0,
    2065,     0,     0,   263,     0,   265,     0,     0,     0,  2070,
       0,  2047,     0,     0,     0,     0,  2066,  3456,     0,  2048,
    2067,     0,   965,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2049,   966,     0,     0,     0,  2068,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3493,
    3494,     0,     0,     0,     0,     0,     0,  2070,     0,     0,
       0,  3501,     0, -2387,     0,     0,  3503,   967,     0,  3504,
       0,  3505,  3506,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   968,   969,     0,     0,     0,
       0,     0,  2050,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3523,     0,     0,
    2051,     0,     0,     0,  2052,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3523,     0,     0,   970,     0,   808,     0,     0,     0,
       0,     0,     0,     0,     0, -2387,     0,     0,     0,     0,
       0,     0,     0,   971,     0,     0,     0,  2054,     0,     0,
       0,     0,     0,     0,  2055,     0,  2056,     0,     0,     0,
     808,     0,     0,     0,  2058,     0,     0,     0,   808,     0,
       0,     0,     0,     0,     0,  3523,     0,     0,     0,     0,
       0,     0,     0,     0,  3585,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2061,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2064,     0,     0,  3653,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2084,     0,     0,     0,     0,     0,     0,
       0,  2065,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2066,     0,     0,
       0,  2067,     0,     0,     0,     0,   808,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2068,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   808,  2070,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   808,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3523,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3789,     0,     0,
       0,     0,  4012,     0,     0,  3306,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   808,     0,
       0,     0,     0,     0,     0,     0,   808,     0,     0,     0,
       0,     0,   808,     0,   808,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   808,
       0,     0,     0,     0,     0,  4012,  4012,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3900,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  4156,
    4156,  4156,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3523,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3306,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   808,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  4156,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   808,     0,   808,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   808,
       0,  4012,  4012,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  4156,     0,
       0,     0,     0,     0,     0,  4156,     0,     0,     0,  4156,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  4156,     0,     0,     0,  4156,  4156,     0,     0,
       0,     0,     0,  4076,     0,     0,     0,     0,     0,  4081,
       0,  4083,     0,     0,     0,     0,     0,     0,   808,     0,
    4012,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  4012,   808,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    4012,     0,     0,     0,     0,     0,  4110,     0,     0,  4356,
       0,     0,     0,   808,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   808,  4012,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  4012,  4012,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3306,     0,     0,     0,
     808,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  4012,  4224,     0,  4225,     0,     0,     0,
     808,     0,     0,  4012,     0,     0,  4233,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   808,     0,     0,
       0,     0,     0,     0,  4012,     0,  4012,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  4012,     0,     0,     0,
     808,     0,     0,   808,     0,     0,     0,     0,     0,     0,
       0,     0,  4012,     0,  4012,     0,  4012,     0,     0,     0,
       0,     0,     0,  4012,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  4012,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    4012,  4012,     0,     0,     0,  4333,   808,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  4012,  4012,     0,     0,
       0,  4012,     0,  4338,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3523,     0,     0,   808,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    4396,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  4449,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  4474,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    4493,     0,     0,     0,     0,     0,     0,   139,     0,   678,
     141,   142,   143,   144,     0,     0,   145,     0,     0,     0,
     146,     0,     0,   679,     0,   148,   149,   150,   151,   152,
     153,   680,   155,     0,   156,     0,     0,   681,   157,   682,
     683,   684,   158,   685,     0,   159,   160,   161,  1707,   162,
       0,   163,   164,  4541,     0,   165,   686,   687,   166,   167,
       0,   168,   688,   689,   170,   171,     0,   172,   173,   174,
     175,   176,   690,   178,     0,   691,   180,   692,   693,   694,
     695,   696,     0,   186,   187,   188,   189,   190,   191,   192,
     193,     0,   194,   195,     0,   196,   197,   198,   697,   200,
    3523,   201,   698,   699,   202,     0,     0,   203,   700,   701,
     204,     0,   205,   702,   703,     0,   206,   207,   208,   704,
     705,   706,     0,     0,     0,     0,   707,   211,   708,     0,
       0,   709,   212,     0,   213,     0,     0,     0,   214,     0,
     215,   216,   217,   218,     0,     0,     0,   219,     0,     0,
     220,   221,   222,     0,     0,     0,   223,     0,   224,   225,
       0,   226,   227,   228,     0,     0,   229,   230,     0,   231,
     232,   233,   234,   235,   236,   710,     0,   237,   238,   239,
     711,   712,   240,   241,     0,   242,   243,   244,   713,     0,
     245,     0,     0,     0,   246,     0,   247,     0,   248,     0,
     249,   250,   714,   252,   715,   254,     0,   255,     0,   716,
       0,   256,   257,   258,     0,   259,   717,   718,     0,   260,
     261,     0,     0,     0,   719,   263,   264,   265,   720,     0,
     266,   267,   268,     0,   269,     0,   270,     0,     0,     0,
     721,   271,   272,   722,     0,     0,   273,     0,   274,   275,
       0,   276,   277,     0,     0,     0,   278,     0,     0,   279,
     280,   723,     0,  1708,   282,     0,   724,   283,   284,     0,
       0,     0,     0,     0,   725,   286,     0,   287,     0,   288,
       0,   289,   290,     0,     0,   726,     0,     0,     0,     0,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,     0,   307,   308,   309,
     310,   727,   311,   312,   313,   314,   728,   315,   316,     0,
       0,     0,     0,   317,   318,   319,   320,   729,   322,     0,
       0,   730,   324,   731,   325,     0,   326,   732,   733,   734,
     735,   736,   331,   332,   333,   334,   335,     0,   737,   336,
     337,     0,     0,   338,   339,   340,   341,   738,   739,   740,
     342,   343,     0,   741,   742,     0,   344,   345,   743,     0,
     347,   348,   349,   350,     0,   351,   352,     0,     0,     0,
       0,     0,     0,     0,     0,   353,   354,   355,     0,   744,
     356,     0,   357,   358,   359,   360,   745,   362,   363,   364,
     365,   746,   747,   368,   748,     0,   369,   370,   371,     0,
     372,     0,   373,   374,   375,   376,   377,     0,   749,   379,
     380,     0,     0,   381,     0,     0,     0,   382,   383,   384,
     385,   386,     0,     0,   387,   388,   389,   390,   391,     0,
     392,   393,     0,   394,   395,   396,   750,   751,   397,     0,
     398,     0,   399,   400,     0,   401,   402,     0,     0,   752,
     403,   404,   405,   406,   407,   753,   409,   410,   411,   412,
       0,   754,   414,     0,     0,     0,   415,   416,   417,   418,
       0,     0,     0,   419,     0,     0,     0,   420,     0,   421,
     422,   423,   424,   425,   426,     0,   427,   428,   429,   430,
     431,   432,     0,     0,     0,     0,     0,     0,   433,   434,
       0,   435,     0,     0,   436,     0,     0,   437,   438,   439,
     755,   756,   440,   441,     0,   442,   443,   757,   445,   446,
     447,   758,   759,   448,   449,   450,   451,   760,   452,   453,
       0,   454,     0,   455,   456,   457,   458,     0,   761,   459,
     460,     0,   762,   763,   764,   765,     0,     0,     0,     0,
    1709,   465,   466,   467,     0,   766,   767,   768,   469,   470,
     471,   769,   472,   473,   770,   474,   475,     0,   476,   477,
       0,     0,   478,     0,     0,   479,     0,   480,     0,   771,
     482,   483,     0,     0,   772,   773,   774,   775,   484,     0,
       0,   485,   776,     0,   777,   486,   487,   488,   489,   490,
     778,     0,     0,     0,     0,     0,     0,   492,   493,     0,
     494,   495,   496,     0,     0,   779,     0,     0,     0,     0,
     780,   781,     0,     0,     0,     0,   782,   783,     0,     0,
     784,   785,     0,     0,   786,   787,   139,     0,   678,   141,
     142,   143,   144,  1893,     0,   145,     0,     0,     0,   146,
       0,     0,   679,     0,   148,   149,   150,   151,   152,   153,
     680,   155,     0,   156,     0,     0,  1894,   157,   682,   683,
     684,   158,   685,     0,   159,   160,   161,     0,   162,     0,
     163,   164,     0,     0,   165,   686,   687,   166,   167,     0,
     168,   688,   689,   170,   171,     0,   172,   173,   174,   175,
     176,   690,   178,     0,   691,   180,   692,   693,   694,   695,
     696,     0,   186,   187,   188,   189,   190,   191,   192,   193,
       0,   194,   195,     0,   196,   197,   198,   697,   200,     0,
     201,   698,   699,   202,     0,     0,   203,   700,   701,   204,
       0,   205,   702,   703,     0,   206,   207,   208,   704,   705,
     706,     0,     0,     0,     0,   707,   211,   708,     0,     0,
    1895,   212,     0,   213,     0,     0,     0,   214,     0,   215,
     216,   217,   218,     0,     0,     0,   219,     0,     0,   220,
     221,   222,     0,     0,     0,   223,     0,   224,   225,     0,
     226,   227,   228,     0,     0,   229,   230,     0,   231,   232,
     233,   234,   235,   236,   710,     0,   237,   238,   239,   711,
     712,   240,   241,     0,   242,   243,   244,   713,     0,   245,
       0,     0,     0,   246,     0,   247,     0,   248,     0,   249,
     250,   714,   252,   715,   254,     0,   255,     0,   716,     0,
     256,   257,   258,     0,   259,   717,   718,     0,   260,   261,
       0,     0,     0,   719,   263,   264,   265,   720,     0,   266,
     267,   268,     0,   269,     0,   270,     0,     0,     0,   721,
     271,   272,   722,     0,     0,   273,     0,   274,   275,     0,
     276,   277,     0,     0,     0,   278,     0,     0,   279,   280,
     723,     0,     0,   282,     0,   724,   283,   284,     0,     0,
       0,     0,     0,   725,   286,     0,   287,     0,   288,     0,
     289,   290,     0,     0,   726,     0,     0,     0,     0,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,     0,   307,   308,   309,   310,
     727,   311,   312,   313,   314,   728,   315,   316,     0,     0,
       0,     0,   317,   318,   319,   320,   729,   322,     0,     0,
     730,   324,   731,   325,     0,   326,   732,   733,   734,   735,
     736,   331,   332,   333,   334,   335,     0,   737,   336,   337,
       0,     0,   338,   339,   340,   341,   738,   739,   740,   342,
     343,     0,   741,   742,     0,   344,   345,   743,  1896,   347,
     348,   349,   350,     0,   351,   352,     0,     0,     0,     0,
       0,     0,     0,     0,   353,   354,   355,     0,   744,   356,
       0,   357,   358,   359,   360,   745,   362,   363,   364,   365,
     746,   747,   368,   748,     0,   369,   370,   371,     0,   372,
       0,   373,   374,   375,   376,   377,     0,   749,   379,   380,
       0,     0,   381,     0,     0,     0,   382,   383,   384,   385,
     386,     0,     0,   387,   388,   389,   390,   391,     0,   392,
     393,     0,   394,   395,   396,   750,   751,   397,     0,   398,
       0,   399,   400,     0,   401,   402,     0,     0,   752,   403,
     404,   405,   406,   407,   753,   409,   410,   411,   412,     0,
     754,   414,     0,     0,     0,   415,   416,   417,   418,     0,
       0,     0,   419,     0,     0,     0,   420,     0,   421,   422,
     423,   424,   425,   426,     0,   427,   428,   429,   430,   431,
     432,     0,     0,     0,     0,     0,     0,   433,   434,     0,
     435,     0,     0,   436,     0,     0,   437,   438,   439,   755,
     756,   440,   441,     0,   442,   443,   757,   445,   446,   447,
     758,   759,   448,   449,   450,   451,   760,   452,   453,     0,
     454,     0,   455,   456,   457,   458,     0,   761,   459,   460,
       0,   762,   763,   764,   765,     0,     0,     0,     0,     0,
     465,   466,   467,     0,   766,   767,   768,   469,   470,   471,
     769,   472,   473,   770,   474,   475,     0,   476,   477,     0,
       0,   478,     0,     0,   479,     0,   480,     0,   771,   482,
     483,     0,     0,   772,   773,   774,   775,   484,     0,     0,
     485,   776,     0,   777,   486,   487,   488,   489,   490,   778,
       0,     0,     0,     0,     0,     0,   492,   493,     0,   494,
     495,   496,     0,     0,   779,     0,     0,     0,     0,   780,
     781,     0,     0,     0,     0,   782,   783,     0,     0,   784,
     785,     0,     0,   786,   787,   139,     0,   678,   141,   142,
     143,   144,     0,     0,   145,     0,     0,     0,   146,     0,
       0,   679,     0,   148,   149,   150,   151,   152,   153,   680,
     155,     0,   156,     0,     0,   681,   157,   682,   683,   684,
     158,   685,     0,   159,   160,   161,     0,   162,     0,   163,
     164,     0,     0,   165,   686,   687,   166,   167,     0,   168,
     688,   689,   170,   171,     0,   172,   173,   174,   175,   176,
     690,   178,     0,   691,   180,   692,   693,   694,   695,   696,
       0,   186,   187,   188,   189,   190,   191,   192,   193,     0,
     194,   195,     0,   196,   197,   198,   697,   200,     0,   201,
     698,   699,   202,     0,     0,   203,   700,   701,   204,     0,
     205,   702,   703,     0,   206,   207,   208,   704,   705,   706,
       0,     0,     0,     0,   707,   211,   708,     0,     0,   709,
     212,     0,   213,     0,     0,     0,   214,     0,   215,   216,
     217,   218,     0,     0,     0,   219,     0,     0,   220,   221,
     222,     0,     0,     0,   223,     0,   224,   225,     0,   226,
     227,   228,     0,     0,   229,   230,     0,   231,   232,   233,
     234,   235,   236,   710,     0,   237,   238,   239,   711,   712,
     240,   241,     0,   242,   243,   244,   713,     0,   245,     0,
       0,     0,   246,  2266,   247,     0,   248,     0,   249,   250,
     714,   252,   715,   254,     0,   255,     0,   716,     0,   256,
     257,   258,     0,   259,   717,   718,     0,   260,   261,     0,
       0,     0,   719,   263,   264,   265,   720,     0,   266,   267,
     268,     0,   269,     0,   270,     0,     0,     0,   721,   271,
     272,   722,     0,     0,   273,     0,   274,   275,     0,   276,
     277,     0,     0,     0,   278,     0,     0,   279,   280,   723,
       0,     0,   282,     0,   724,   283,   284,     0,     0,     0,
       0,     0,   725,   286,     0,   287,     0,   288,     0,   289,
     290,     0,     0,   726,     0,     0,     0,     0,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,     0,   307,   308,   309,   310,   727,
     311,   312,   313,   314,   728,   315,   316,     0,     0,     0,
       0,   317,   318,   319,   320,   729,   322,     0,     0,   730,
     324,   731,   325,     0,   326,   732,   733,   734,   735,   736,
     331,   332,   333,   334,   335,     0,   737,   336,   337,     0,
       0,   338,   339,   340,   341,   738,   739,   740,   342,   343,
       0,   741,   742,     0,   344,   345,   743,     0,   347,   348,
     349,   350,     0,   351,   352,     0,     0,     0,     0,     0,
       0,     0,     0,   353,   354,   355,     0,   744,   356,     0,
     357,   358,   359,   360,   745,   362,   363,   364,   365,   746,
     747,   368,   748,     0,   369,   370,   371,     0,   372,     0,
     373,   374,   375,   376,   377,     0,   749,   379,   380,     0,
       0,   381,     0,     0,     0,   382,   383,   384,   385,   386,
       0,     0,   387,   388,   389,   390,   391,     0,   392,   393,
       0,   394,   395,   396,   750,   751,   397,     0,   398,     0,
     399,   400,     0,   401,   402,     0,     0,   752,   403,   404,
     405,   406,   407,   753,   409,   410,   411,   412,     0,   754,
     414,     0,     0,     0,   415,   416,   417,   418,     0,     0,
       0,   419,     0,     0,     0,   420,     0,   421,   422,   423,
     424,   425,   426,     0,   427,   428,   429,   430,   431,   432,
       0,     0,     0,     0,     0,     0,   433,   434,     0,   435,
       0,     0,   436,     0,     0,   437,   438,   439,   755,   756,
     440,   441,     0,   442,   443,   757,   445,   446,   447,   758,
     759,   448,   449,   450,   451,   760,   452,   453,     0,   454,
       0,   455,   456,   457,   458,     0,   761,   459,   460,     0,
     762,   763,   764,   765,     0,     0,     0,     0,     0,   465,
     466,   467,     0,   766,   767,   768,   469,   470,   471,   769,
     472,   473,   770,   474,   475,     0,   476,   477,     0,     0,
     478,     0,     0,   479,     0,   480,     0,   771,   482,   483,
       0,     0,   772,   773,   774,   775,   484,     0,     0,   485,
     776,     0,   777,   486,   487,   488,   489,   490,   778,     0,
       0,     0,     0,     0,     0,   492,   493,     0,   494,   495,
     496,     0,     0,   779,     0,     0,     0,     0,   780,   781,
       0,     0,     0,     0,   782,   783,     0,     0,   784,   785,
       0,     0,   786,   787,   139,     0,   678,   141,   142,   143,
     144,     0,     0,   145,     0,     0,     0,   146,     0,     0,
     679,     0,   148,   149,   150,   151,   152,   153,   680,   155,
       0,   156,     0,     0,   681,   157,   682,   683,   684,   158,
     685,     0,   159,   160,   161,     0,   162,     0,   163,   164,
       0,     0,   165,   686,   687,   166,   167,     0,   168,   688,
     689,   170,   171,     0,   172,   173,   174,   175,   176,   690,
     178,     0,   691,   180,   692,   693,   694,   695,   696,     0,
     186,   187,   188,   189,   190,   191,   192,   193,     0,   194,
     195,     0,   196,   197,   198,   697,   200,     0,   201,   698,
     699,   202,     0,     0,   203,   700,   701,   204,     0,   205,
     702,   703,     0,   206,   207,   208,   704,   705,   706,     0,
       0,     0,     0,   707,   211,   708,     0,     0,   709,   212,
       0,   213,     0,     0,     0,   214,     0,   215,   216,   217,
     218,     0,     0,     0,   219,     0,     0,   220,   221,   222,
       0,     0,     0,   223,     0,   224,   225,     0,   226,   227,
     228,     0,     0,   229,   230,     0,   231,   232,   233,   234,
     235,   236,   710,     0,   237,   238,   239,   711,   712,   240,
     241,     0,   242,   243,   244,   713,     0,   245,     0,     0,
       0,   246,  2268,   247,     0,   248,     0,   249,   250,   714,
     252,   715,   254,     0,   255,     0,   716,     0,   256,   257,
     258,     0,   259,   717,   718,     0,   260,   261,     0,     0,
       0,   719,   263,   264,   265,   720,     0,   266,   267,   268,
       0,   269,     0,   270,     0,     0,     0,   721,   271,   272,
     722,     0,     0,   273,     0,   274,   275,     0,   276,   277,
       0,     0,     0,   278,     0,     0,   279,   280,   723,     0,
       0,   282,     0,   724,   283,   284,     0,     0,     0,     0,
       0,   725,   286,     0,   287,     0,   288,     0,   289,   290,
       0,     0,   726,     0,     0,     0,     0,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,     0,   307,   308,   309,   310,   727,   311,
     312,   313,   314,   728,   315,   316,     0,     0,     0,     0,
     317,   318,   319,   320,   729,   322,     0,     0,   730,   324,
     731,   325,     0,   326,   732,   733,   734,   735,   736,   331,
     332,   333,   334,   335,     0,   737,   336,   337,     0,     0,
     338,   339,   340,   341,   738,   739,   740,   342,   343,     0,
     741,   742,     0,   344,   345,   743,     0,   347,   348,   349,
     350,     0,   351,   352,     0,     0,     0,     0,     0,     0,
       0,     0,   353,   354,   355,     0,   744,   356,     0,   357,
     358,   359,   360,   745,   362,   363,   364,   365,   746,   747,
     368,   748,     0,   369,   370,   371,     0,   372,     0,   373,
     374,   375,   376,   377,     0,   749,   379,   380,     0,     0,
     381,     0,     0,     0,   382,   383,   384,   385,   386,     0,
       0,   387,   388,   389,   390,   391,     0,   392,   393,     0,
     394,   395,   396,   750,   751,   397,     0,   398,     0,   399,
     400,     0,   401,   402,     0,     0,   752,   403,   404,   405,
     406,   407,   753,   409,   410,   411,   412,     0,   754,   414,
       0,     0,     0,   415,   416,   417,   418,     0,     0,     0,
     419,     0,     0,     0,   420,     0,   421,   422,   423,   424,
     425,   426,     0,   427,   428,   429,   430,   431,   432,     0,
       0,     0,     0,     0,     0,   433,   434,     0,   435,     0,
       0,   436,     0,     0,   437,   438,   439,   755,   756,   440,
     441,     0,   442,   443,   757,   445,   446,   447,   758,   759,
     448,   449,   450,   451,   760,   452,   453,     0,   454,     0,
     455,   456,   457,   458,     0,   761,   459,   460,     0,   762,
     763,   764,   765,     0,     0,     0,     0,     0,   465,   466,
     467,     0,   766,   767,   768,   469,   470,   471,   769,   472,
     473,   770,   474,   475,     0,   476,   477,     0,     0,   478,
       0,     0,   479,     0,   480,     0,   771,   482,   483,     0,
       0,   772,   773,   774,   775,   484,     0,     0,   485,   776,
       0,   777,   486,   487,   488,   489,   490,   778,     0,     0,
       0,     0,     0,     0,   492,   493,     0,   494,   495,   496,
       0,     0,   779,     0,     0,     0,     0,   780,   781,     0,
       0,     0,     0,   782,   783,     0,     0,   784,   785,     0,
       0,   786,   787,   139,     0,   678,   141,   142,   143,   144,
       0,     0,   145,     0,     0,     0,   146,     0,     0,   679,
       0,   148,   149,   150,   151,   152,   153,   680,   155,     0,
     156,     0,     0,   681,   157,   682,   683,   684,   158,   685,
       0,   159,   160,   161,     0,   162,     0,   163,   164,     0,
       0,   165,   686,   687,   166,   167,     0,   168,   688,   689,
     170,   171,     0,   172,   173,   174,   175,   176,   690,   178,
       0,   691,   180,   692,   693,   694,   695,   696,     0,   186,
     187,   188,   189,   190,   191,   192,   193,     0,   194,   195,
       0,   196,   197,   198,   697,   200,     0,   201,   698,   699,
     202,     0,     0,   203,   700,   701,   204,     0,   205,   702,
     703,     0,   206,   207,   208,   704,   705,   706,     0,     0,
       0,     0,   707,   211,   708,     0,     0,   709,   212,     0,
     213,     0,     0,     0,   214,     0,   215,   216,   217,   218,
       0,     0,     0,   219,     0,     0,   220,   221,   222,     0,
       0,     0,   223,     0,   224,   225,     0,   226,   227,   228,
       0,     0,   229,   230,     0,   231,   232,   233,   234,   235,
     236,   710,     0,   237,   238,   239,   711,   712,   240,   241,
       0,   242,   243,   244,   713,     0,   245,     0,     0,     0,
     246,  2270,   247,     0,   248,     0,   249,   250,   714,   252,
     715,   254,     0,   255,     0,   716,     0,   256,   257,   258,
       0,   259,   717,   718,     0,   260,   261,     0,     0,     0,
     719,   263,   264,   265,   720,     0,   266,   267,   268,     0,
     269,     0,   270,     0,     0,     0,   721,   271,   272,   722,
       0,     0,   273,     0,   274,   275,     0,   276,   277,     0,
       0,     0,   278,     0,     0,   279,   280,   723,     0,     0,
     282,     0,   724,   283,   284,     0,     0,     0,     0,     0,
     725,   286,     0,   287,     0,   288,     0,   289,   290,     0,
       0,   726,     0,     0,     0,     0,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,     0,   307,   308,   309,   310,   727,   311,   312,
     313,   314,   728,   315,   316,     0,     0,     0,     0,   317,
     318,   319,   320,   729,   322,     0,     0,   730,   324,   731,
     325,     0,   326,   732,   733,   734,   735,   736,   331,   332,
     333,   334,   335,     0,   737,   336,   337,     0,     0,   338,
     339,   340,   341,   738,   739,   740,   342,   343,     0,   741,
     742,     0,   344,   345,   743,     0,   347,   348,   349,   350,
       0,   351,   352,     0,     0,     0,     0,     0,     0,     0,
       0,   353,   354,   355,     0,   744,   356,     0,   357,   358,
     359,   360,   745,   362,   363,   364,   365,   746,   747,   368,
     748,     0,   369,   370,   371,     0,   372,     0,   373,   374,
     375,   376,   377,     0,   749,   379,   380,     0,     0,   381,
       0,     0,     0,   382,   383,   384,   385,   386,     0,     0,
     387,   388,   389,   390,   391,     0,   392,   393,     0,   394,
     395,   396,   750,   751,   397,     0,   398,     0,   399,   400,
       0,   401,   402,     0,     0,   752,   403,   404,   405,   406,
     407,   753,   409,   410,   411,   412,     0,   754,   414,     0,
       0,     0,   415,   416,   417,   418,     0,     0,     0,   419,
       0,     0,     0,   420,     0,   421,   422,   423,   424,   425,
     426,     0,   427,   428,   429,   430,   431,   432,     0,     0,
       0,     0,     0,     0,   433,   434,     0,   435,     0,     0,
     436,     0,     0,   437,   438,   439,   755,   756,   440,   441,
       0,   442,   443,   757,   445,   446,   447,   758,   759,   448,
     449,   450,   451,   760,   452,   453,     0,   454,     0,   455,
     456,   457,   458,     0,   761,   459,   460,     0,   762,   763,
     764,   765,     0,     0,     0,     0,     0,   465,   466,   467,
       0,   766,   767,   768,   469,   470,   471,   769,   472,   473,
     770,   474,   475,     0,   476,   477,     0,     0,   478,     0,
       0,   479,     0,   480,     0,   771,   482,   483,     0,     0,
     772,   773,   774,   775,   484,     0,     0,   485,   776,     0,
     777,   486,   487,   488,   489,   490,   778,     0,     0,     0,
       0,     0,     0,   492,   493,     0,   494,   495,   496,     0,
       0,   779,     0,     0,     0,     0,   780,   781,     0,     0,
       0,     0,   782,   783,     0,     0,   784,   785,     0,     0,
     786,   787,   139,     0,   678,   141,   142,   143,   144,     0,
       0,   145,     0,     0,     0,   146,     0,     0,   679,     0,
     148,   149,   150,   151,   152,   153,   680,   155,     0,   156,
       0,     0,   681,   157,   682,   683,   684,   158,   685,     0,
     159,   160,   161,     0,   162,     0,   163,   164,     0,     0,
     165,   686,   687,   166,   167,     0,   168,   688,   689,   170,
     171,     0,   172,   173,   174,   175,   176,   690,   178,     0,
     691,   180,   692,   693,   694,   695,   696,     0,   186,   187,
     188,   189,   190,   191,   192,   193,     0,   194,   195,     0,
     196,   197,   198,   697,   200,     0,   201,   698,   699,   202,
       0,     0,   203,   700,   701,   204,     0,   205,   702,   703,
       0,   206,   207,   208,   704,   705,   706,     0,     0,     0,
       0,   707,   211,   708,     0,     0,   709,   212,     0,   213,
       0,     0,     0,   214,     0,   215,   216,   217,   218,     0,
       0,     0,   219,     0,     0,   220,   221,   222,     0,     0,
       0,   223,     0,   224,   225,     0,   226,   227,   228,     0,
       0,   229,   230,     0,   231,   232,   233,   234,   235,   236,
     710,     0,   237,   238,   239,   711,   712,   240,   241,     0,
     242,   243,   244,   713,     0,   245,     0,     0,     0,   246,
       0,   247,     0,   248,     0,   249,   250,   714,   252,   715,
     254,     0,   255,     0,   716,     0,   256,   257,   258,     0,
     259,   717,   718,     0,   260,   261,     0,     0,     0,   719,
     263,   264,   265,   720,     0,   266,   267,   268,     0,   269,
       0,   270,     0,     0,     0,   721,   271,   272,   722,     0,
       0,   273,     0,   274,   275,     0,   276,   277,     0,     0,
       0,   278,     0,     0,   279,   280,   723,     0,     0,   282,
       0,   724,   283,   284,     0,     0,     0,     0,     0,   725,
     286,     0,   287,     0,   288,     0,   289,   290,     0,     0,
     726,     0,     0,     0,     0,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,     0,   307,   308,   309,   310,   727,   311,   312,   313,
     314,   728,   315,   316,     0,     0,     0,     0,   317,   318,
     319,   320,   729,   322,     0,     0,   730,   324,   731,   325,
       0,   326,   732,   733,   734,   735,   736,   331,   332,   333,
     334,   335,     0,   737,   336,   337,     0,     0,   338,   339,
     340,   341,   738,   739,   740,   342,   343,     0,   741,   742,
       0,   344,   345,   743,     0,   347,   348,   349,   350,     0,
     351,   352,     0,     0,     0,     0,     0,     0,     0,     0,
     353,   354,   355,     0,   744,   356,     0,   357,   358,   359,
     360,   745,   362,   363,   364,   365,   746,   747,   368,   748,
       0,   369,   370,   371,     0,   372,     0,   373,   374,   375,
     376,   377,     0,   749,   379,   380,     0,     0,   381,     0,
       0,     0,   382,   383,   384,   385,   386,     0,     0,   387,
     388,   389,   390,   391,     0,   392,   393,     0,   394,   395,
     396,   750,   751,   397,     0,   398,     0,   399,   400,     0,
     401,   402,     0,     0,   752,   403,   404,   405,   406,   407,
     753,   409,   410,   411,   412,     0,   754,   414,     0,     0,
       0,   415,   416,   417,   418,     0,     0,     0,   419,     0,
       0,     0,   420,     0,   421,   422,   423,   424,   425,   426,
       0,   427,   428,   429,   430,   431,   432,     0,     0,     0,
       0,     0,     0,   433,   434,     0,   435,     0,     0,   436,
       0,     0,   437,   438,   439,   755,   756,   440,   441,     0,
     442,   443,   757,   445,   446,   447,   758,   759,   448,   449,
     450,   451,   760,   452,   453,     0,   454,     0,   455,   456,
     457,   458,     0,   761,   459,   460,     0,   762,   763,   764,
     765,     0,     0,     0,     0,     0,   465,   466,   467,     0,
     766,   767,   768,   469,   470,   471,   769,   472,   473,   770,
     474,   475,     0,   476,   477,     0,     0,   478,     0,     0,
     479,     0,   480,     0,   771,   482,   483,     0,     0,   772,
     773,   774,   775,   484,     0,     0,   485,   776,     0,   777,
     486,   487,   488,   489,   490,   778,     0,     0,     0,     0,
       0,     0,   492,   493,     0,   494,   495,   496,     0,     0,
     779,     0,     0,     0,     0,   780,   781,     0,     0,     0,
       0,   782,   783,     0,     0,   784,   785,     0,     0,   786,
     787,   139,     0,   678,   141,   142,   143,   144,     0,     0,
     145,     0,     0,     0,   146,     0,     0,   679,     0,   148,
     149,   150,   151,   152,   153,   680,   155,     0,   156,     0,
       0,   681,   157,   682,   683,   684,   158,   685,     0,   159,
     160,   161,     0,   162,     0,   163,   164,     0,     0,   165,
     686,   687,   166,   167,     0,   168,   688,   689,   170,   171,
       0,   172,   173,   174,   175,   176,   690,   178,     0,   691,
     180,   692,   693,   694,   695,   696,     0,   186,   187,   188,
     189,   190,   191,   192,   193,     0,   194,   195,     0,   196,
     197,   198,   697,   200,     0,   201,   698,   699,   202,     0,
       0,   203,   700,   701,   204,     0,   205,   702,   703,     0,
     206,   207,   208,   704,   705,   706,     0,     0,     0,     0,
     707,   211,   708,     0,     0,   709,   212,     0,   213,     0,
       0,     0,   214,     0,   215,   216,   217,   218,     0,     0,
       0,   219,     0,     0,   220,   221,   222,     0,     0,     0,
     223,     0,   224,   225,     0,   226,   227,   228,     0,     0,
     229,   230,     0,   231,   232,   233,   234,   235,   236,   710,
       0,   237,   238,   239,   711,   712,   240,   241,     0,   242,
     243,   244,   713,     0,   245,     0,     0,     0,   246,     0,
     247,     0,   248,     0,   249,   250,   714,   252,   715,   254,
       0,   255,     0,   716,     0,   256,   257,   258,     0,   259,
     717,   718,     0,   260,   261,     0,     0,     0,   719,   263,
     264,   265,   720,     0,   266,   267,   268,     0,   269,     0,
     270,     0,     0,     0,   721,   271,   272,   722,     0,     0,
     273,     0,   274,   275,     0,   276,   277,     0,     0,     0,
     278,     0,     0,   279,   280,   723,     0,     0,   282,     0,
     724,   283,   284,     0,     0,     0,     0,     0,   725,   286,
       0,   287,     0,   288,     0,   289,   290,     0,     0,   726,
       0,     0,     0,     0,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
       0,   307,   308,   309,   310,   727,   311,   312,   313,   314,
     728,   315,   316,     0,     0,     0,     0,   317,   318,   319,
     320,   729,   322,     0,     0,   730,   324,   731,   325,     0,
     326,   732,   733,   734,   735,   736,   331,   332,   333,   334,
     335,     0,   737,   336,   337,     0,     0,   338,   339,   340,
     341,   738,   739,   740,   342,   343,     0,   741,   742,     0,
     344,   345,   743,     0,   347,   348,   349,   350,     0,   351,
     352,     0,     0,     0,     0,     0,     0,     0,     0,   353,
     354,   355,     0,   744,   356,     0,   357,   358,   359,   360,
     745,   362,   363,   364,   365,   746,   747,   368,   748,     0,
     369,   370,   371,     0,   372,     0,   373,   374,   375,   376,
     377,     0,   749,   379,   380,     0,     0,   381,     0,     0,
       0,   382,   383,   384,   385,   386,     0,     0,   387,   388,
     389,   390,   391,     0,   392,   393,     0,   394,   395,   396,
     750,   751,   397,     0,   398,     0,   399,   400,     0,   401,
     402,     0,     0,   752,   403,   404,   405,   406,   407,   753,
     409,   410,   411,   412,     0,   754,   414,     0,     0,     0,
     415,   416,   417,   418,     0,     0,     0,   419,     0,     0,
       0,   420,     0,   421,   422,   423,   424,   425,   426,     0,
     427,   428,   429,   430,   431,   432,     0,     0,     0,     0,
       0,     0,   433,   434,     0,   435,     0,     0,   436,     0,
       0,   437,   438,   439,   755,   756,   440,   441,     0,   442,
     443,   757,   445,   446,   447,   758,   759,   448,   449,   450,
     451,   760,   452,   453,     0,   454,     0,   455,   456,   457,
     458,     0,   761,   459,   460,     0,   762,   763,   764,   765,
       0,     0,     0,     0,     0,   465,   466,   467,     0,   766,
     767,   768,   469,   470,   471,   769,   472,   473,   770,   474,
     475,     0,   476,   477,     0,     0,   478,     0,     0,   479,
       0,   480,     0,   771,   482,   483,     0,     0,   772,   773,
     774,   775,   484,     0,     0,   485,   776,     0,   777,   486,
     487,   488,   489,   490,   778,     0,     0,     0,     0,     0,
       0,   492,   493,     0,   494,   495,   496,     0,     0,   779,
       0,     0,     0,     0,   780,   781,     0,     0,     0,     0,
     782,  1147,     0,     0,   784,   785,     0,     0,   786,   787,
     139,     0,   678,   141,   142,   143,   144,  1741,     0,   145,
       0,     0,     0,  1742,     0,     0,   679,     0,   148,   149,
     150,   151,   152,   153,   680,   155,     0,   156,     0,     0,
     681,   157,   682,   683,   684,   158,   685,     0,   159,   160,
     161,     0,   162,     0,   163,   164,     0,     0,   165,   686,
     687,   166,   167,     0,   168,   688,   689,   170,   171,     0,
     172,   173,   174,   175,   176,   690,   178,     0,   691,   180,
     692,   693,   694,   695,   696,     0,   186,   187,   188,   189,
     190,   191,   192,   193,     0,   194,   195,     0,   196,   197,
     198,   697,   200,     0,   201,   698,   699,   202,     0,     0,
     203,   700,   701,   204,     0,   205,   702,   703,     0,   206,
     207,   208,   704,   705,   706,     0,     0,     0,     0,   707,
     211,   708,     0,     0,   709,   212,     0,   213,     0,     0,
       0,   214,     0,   215,   216,   217,   218,     0,     0,     0,
     219,     0,     0,   220,   221,   222,     0,     0,     0,   223,
       0,   224,   225,     0,   226,   227,   228,     0,     0,   229,
     230,     0,   231,   232,   233,   234,   235,   236,   710,     0,
     237,   238,   239,   711,   712,   240,   241,     0,   242,   243,
     244,   713,     0,   245,     0,     0,     0,   246,     0,   247,
       0,   248,     0,   249,   250,   714,   252,   715,   254,     0,
     255,     0,   716,     0,   256,   257,   258,     0,   259,   717,
     718,     0,   260,   261,     0,     0,     0,   719,   263,   264,
     265,   720,     0,   266,   267,   268,     0,   269,     0,   270,
       0,     0,     0,   721,   271,   272,   722,     0,     0,   273,
       0,   274,   275,     0,   276,   277,     0,     0,     0,   278,
       0,     0,   279,   280,   723,     0,     0,   282,     0,   724,
     283,   284,     0,     0,     0,     0,     0,   725,   286,     0,
     287,     0,   288,     0,   289,   290,     0,     0,   726,     0,
       0,     0,     0,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,     0,
     307,   308,   309,   310,   727,   311,   312,   313,   314,   728,
     315,   316,     0,     0,     0,     0,   317,   318,   319,   320,
     729,   322,     0,     0,   730,   324,   731,   325,     0,   326,
     732,   733,   734,   735,   736,   331,   332,   333,   334,   335,
       0,   737,   336,   337,     0,     0,   338,   339,   340,   341,
     738,     0,   740,   342,   343,     0,   741,   742,     0,   344,
     345,   743,     0,   347,   348,   349,   350,     0,   351,   352,
       0,     0,     0,     0,     0,     0,     0,     0,   353,   354,
     355,     0,   744,   356,     0,   357,   358,   359,   360,   745,
     362,   363,   364,   365,   746,   747,   368,   748,     0,   369,
     370,   371,     0,   372,     0,   373,   374,   375,   376,   377,
       0,   749,   379,   380,     0,     0,   381,     0,     0,     0,
     382,   383,   384,   385,   386,     0,     0,   387,   388,   389,
     390,   391,     0,   392,   393,     0,   394,   395,   396,   750,
     751,   397,     0,   398,     0,   399,   400,     0,   401,   402,
       0,     0,   752,   403,   404,   405,   406,   407,   753,   409,
     410,   411,   412,     0,   754,   414,     0,     0,     0,   415,
     416,   417,   418,     0,     0,     0,   419,     0,     0,     0,
     420,     0,   421,   422,   423,   424,   425,   426,     0,   427,
     428,   429,   430,   431,   432,     0,     0,     0,     0,     0,
       0,   433,   434,     0,   435,     0,     0,   436,     0,     0,
     437,   438,   439,   755,   756,   440,   441,     0,   442,   443,
     757,   445,   446,   447,   758,   759,   448,   449,   450,   451,
     760,   452,   453,     0,   454,     0,   455,   456,   457,   458,
       0,   761,   459,   460,     0,   762,   763,   764,   765,     0,
       0,     0,     0,     0,   465,   466,   467,     0,   766,   767,
     768,   469,   470,   471,   769,   472,   473,   770,   474,   475,
       0,   476,   477,     0,     0,   478,     0,     0,   479,     0,
     480,     0,   771,   482,   483,     0,     0,   772,   773,   774,
     775,   484,     0,     0,   485,   776,     0,   777,   486,   487,
     488,   489,   490,   778,     0,     0,     0,     0,     0,     0,
     492,   493,     0,   494,   495,   496,     0,     0,   779,     0,
       0,     0,     0,   780,   781,     0,     0,     0,     0,   782,
     783,     0,     0,   784,   785,     0,     0,   786,   787,   139,
       0,   678,   141,   142,   143,   144,     0,     0,   145,     0,
       0,     0,   146,     0,     0,   679,     0,   148,   149,   150,
     151,   152,   153,   680,   155,     0,   156,     0,     0,   681,
     157,   682,   683,   684,   158,   685,     0,   159,   160,   161,
       0,   162,     0,   163,   164,     0,     0,   165,   686,   687,
     166,   167,     0,   168,   688,   689,   170,   171,     0,   172,
     173,   174,   175,   176,   690,   178,     0,   691,   180,   692,
     693,   694,   695,   696,     0,   186,   187,   188,   189,   190,
     191,   192,   193,     0,   194,   195,     0,   196,   197,   198,
     697,   200,     0,   201,   698,   699,   202,     0,     0,   203,
     700,   701,   204,     0,   205,   702,   703,     0,   206,   207,
     208,   704,   705,   706,     0,     0,     0,     0,   707,   211,
     708,     0,     0,   709,   212,     0,   213,     0,     0,     0,
     214,     0,   215,   216,   217,   218,     0,     0,     0,   219,
       0,     0,   220,   221,   222,     0,     0,     0,   223,     0,
     224,   225,     0,   226,   227,   228,     0,     0,   229,   230,
       0,   231,   232,   233,   234,   235,   236,   710,     0,   237,
     238,   239,   711,   712,   240,   241,     0,   242,   243,   244,
     713,     0,   245,     0,     0,     0,   246,     0,   247,     0,
     248,     0,   249,   250,   714,   252,   715,   254,     0,   255,
       0,   716,     0,   256,   257,   258,     0,   259,   717,   718,
       0,   260,   261,     0,     0,     0,   719,   263,   264,   265,
     720,     0,   266,   267,   268,     0,   269,     0,   270,     0,
       0,     0,   721,   271,   272,   722,     0,     0,   273,     0,
     274,   275,     0,   276,   277,     0,     0,     0,   278,     0,
       0,   279,   280,   723,     0,     0,   282,     0,   724,   283,
     284,     0,     0,     0,     0,     0,   725,   286,     0,   287,
       0,   288,     0,   289,   290,     0,     0,   726,     0,     0,
       0,     0,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,     0,   307,
     308,   309,   310,   727,   311,   312,   313,   314,   728,   315,
     316,     0,     0,     0,     0,   317,   318,   319,   320,   729,
     322,     0,     0,   730,   324,   731,   325,     0,   326,   732,
     733,   734,   735,   736,   331,   332,   333,   334,   335,     0,
     737,   336,   337,     0,     0,   338,   339,   340,   341,   738,
     739,   740,   342,   343,     0,   741,   742,     0,   344,   345,
     743,     0,   347,   348,   349,   350,     0,   351,   352,     0,
       0,     0,     0,     0,     0,     0,     0,   353,   354,   355,
       0,   744,   356,     0,   357,   358,   359,   360,   745,   362,
     363,   364,   365,   746,   747,   368,   748,     0,   369,   370,
     371,     0,   372,     0,   373,   374,   375,   376,   377,     0,
     749,   379,   380,     0,     0,   381,     0,     0,     0,   382,
     383,   384,   385,   386,     0,     0,   387,   388,   389,   390,
     391,     0,   392,   393,     0,   394,   395,   396,   750,   751,
     397,     0,   398,     0,   399,   400,     0,   401,   402,     0,
       0,   752,   403,   404,   405,   406,   407,   753,   409,   410,
     411,   412,     0,   754,   414,     0,     0,     0,   415,   416,
     417,   418,     0,     0,     0,   419,     0,     0,     0,   420,
       0,   421,   422,   423,   424,   425,   426,     0,   427,   428,
     429,   430,   431,   432,     0,     0,     0,     0,     0,     0,
     433,   434,     0,   435,     0,     0,   436,     0,     0,   437,
     438,   439,   755,   756,   440,   441,     0,   442,   443,   757,
     445,   446,   447,   758,   759,   448,   449,   450,   451,   760,
     452,   453,     0,   454,     0,   455,   456,   457,   458,     0,
     761,   459,   460,     0,   762,   763,   764,   765,     0,     0,
       0,     0,     0,   465,   466,   467,     0,   766,   767,   768,
     469,   470,   471,   769,   472,   473,   770,   474,   475,     0,
     476,   477,     0,     0,   478,     0,     0,   479,     0,   480,
       0,  1817,   482,   483,     0,     0,   772,   773,   774,   775,
     484,     0,     0,   485,   776,     0,   777,   486,   487,   488,
     489,   490,   778,     0,     0,     0,     0,     0,     0,   492,
     493,     0,   494,   495,   496,     0,     0,   779,     0,     0,
       0,     0,   780,   781,     0,     0,     0,     0,   782,   783,
       0,     0,   784,   785,     0,     0,   786,   787,   139,     0,
     678,   141,   142,   143,   144,     0,     0,   145,     0,     0,
       0,   146,     0,     0,   679,     0,   148,   149,   150,   151,
     152,   153,   680,   155,     0,   156,     0,     0,   681,   157,
     682,   683,   684,   158,   685,     0,   159,   160,   161,     0,
     162,     0,   163,   164,     0,     0,   165,   686,   687,   166,
     167,     0,   168,   688,   689,   170,   171,     0,   172,   173,
     174,   175,   176,   690,   178,     0,   691,   180,   692,   693,
     694,   695,   696,     0,   186,   187,   188,   189,   190,   191,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   697,
     200,     0,   201,   698,   699,   202,     0,     0,   203,   700,
     701,   204,     0,   205,   702,   703,     0,   206,   207,   208,
     704,   705,   706,     0,     0,     0,     0,   707,   211,   708,
       0,     0,   709,   212,     0,   213,     0,     0,     0,   214,
       0,   215,   216,   217,   218,     0,     0,     0,   219,     0,
       0,   220,   221,   222,     0,     0,     0,   223,     0,   224,
     225,     0,   226,   227,   228,     0,     0,   229,   230,     0,
     231,   232,   233,   234,   235,   236,   710,     0,   237,   238,
     239,   711,   712,   240,   241,     0,   242,   243,   244,   713,
       0,   245,     0,     0,     0,   246,     0,   247,     0,   248,
       0,   249,   250,   714,   252,   715,   254,     0,   255,     0,
     716,     0,   256,   257,   258,     0,   259,   717,   718,     0,
     260,   261,     0,     0,     0,   719,   263,   264,   265,   720,
       0,   266,   267,   268,     0,   269,     0,   270,     0,     0,
       0,   721,   271,   272,  2688,     0,     0,   273,     0,   274,
     275,     0,   276,   277,     0,     0,     0,   278,     0,     0,
     279,   280,   723,     0,     0,   282,     0,   724,   283,   284,
       0,     0,     0,     0,     0,   725,   286,     0,   287,     0,
     288,     0,   289,   290,     0,     0,   726,     0,     0,     0,
       0,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,     0,   307,   308,
     309,   310,   727,   311,   312,   313,   314,   728,   315,   316,
       0,     0,     0,     0,   317,   318,   319,   320,   729,   322,
       0,     0,   730,   324,   731,   325,     0,   326,   732,   733,
     734,   735,   736,   331,   332,   333,   334,   335,     0,   737,
     336,   337,     0,     0,   338,   339,   340,   341,   738,   739,
     740,   342,   343,     0,   741,   742,     0,   344,   345,   743,
       0,   347,   348,   349,   350,     0,   351,   352,     0,     0,
       0,     0,     0,     0,     0,     0,   353,   354,   355,     0,
     744,   356,     0,   357,   358,   359,   360,   745,   362,   363,
     364,   365,   746,   747,   368,   748,     0,   369,   370,   371,
       0,   372,     0,   373,   374,   375,   376,   377,     0,   749,
     379,   380,     0,     0,   381,     0,     0,     0,   382,   383,
     384,   385,   386,     0,     0,   387,   388,   389,   390,   391,
       0,   392,   393,     0,   394,   395,   396,   750,   751,   397,
       0,   398,     0,   399,   400,     0,   401,   402,     0,     0,
     752,   403,   404,   405,   406,   407,   753,   409,   410,   411,
     412,     0,   754,   414,     0,     0,     0,   415,   416,   417,
     418,     0,     0,     0,   419,     0,     0,     0,   420,     0,
     421,   422,   423,   424,   425,   426,     0,   427,   428,   429,
     430,   431,   432,     0,     0,     0,     0,     0,     0,   433,
     434,     0,   435,     0,     0,   436,     0,     0,   437,   438,
     439,   755,   756,   440,   441,     0,   442,   443,   757,   445,
     446,   447,   758,   759,   448,   449,   450,   451,   760,   452,
     453,     0,   454,     0,   455,   456,   457,   458,     0,   761,
     459,   460,     0,   762,   763,   764,   765,     0,     0,     0,
       0,     0,   465,   466,   467,     0,   766,   767,   768,   469,
     470,   471,   769,   472,   473,   770,   474,   475,     0,   476,
     477,     0,     0,   478,     0,     0,   479,     0,   480,     0,
     771,   482,   483,     0,     0,   772,   773,   774,   775,   484,
       0,     0,   485,   776,     0,   777,   486,   487,   488,   489,
     490,   778,     0,     0,     0,     0,     0,     0,   492,   493,
       0,   494,   495,   496,     0,     0,   779,     0,     0,     0,
       0,   780,   781,     0,     0,     0,     0,   782,   783,     0,
       0,   784,   785,     0,     0,   786,   787,   139,     0,   678,
     141,   142,   143,   144,     0,     0,   145,     0,     0,     0,
     146,     0,     0,   679,     0,   148,   149,   150,   151,   152,
     153,   680,   155,     0,   156,     0,     0,   681,   157,   682,
     683,   684,   158,   685,     0,   159,   160,   161,     0,   162,
       0,   163,   164,     0,     0,   165,   686,   687,   166,   167,
       0,   168,   688,   689,   170,   171,     0,   172,   173,   174,
     175,   176,   690,   178,     0,   691,   180,   692,   693,   694,
     695,   696,     0,   186,   187,   188,   189,   190,   191,   192,
     193,     0,   194,   195,     0,   196,   197,   198,   697,   200,
       0,   201,   698,   699,   202,     0,     0,   203,   700,   701,
     204,     0,   205,   702,   703,     0,   206,   207,   208,   704,
     705,   706,     0,     0,     0,     0,   707,   211,   708,     0,
       0,   709,   212,     0,   213,     0,     0,     0,   214,     0,
     215,   216,   217,   218,     0,     0,     0,   219,     0,     0,
     220,   221,   222,     0,     0,     0,   223,     0,   224,   225,
       0,   226,   227,   228,     0,     0,   229,   230,     0,   231,
     232,   233,   234,   235,   236,   710,     0,   237,   238,   239,
     711,   712,   240,   241,     0,   242,   243,   244,   713,     0,
     245,     0,     0,     0,   246,     0,   247,     0,   248,     0,
     249,   250,   714,   252,   715,   254,     0,   255,     0,   716,
       0,   256,   257,   258,     0,   259,   717,   718,     0,   260,
     261,     0,     0,     0,   719,   263,   264,   265,   720,     0,
     266,   267,   268,     0,   269,     0,   270,     0,     0,     0,
     721,   271,   272,  2739,     0,     0,   273,     0,   274,   275,
       0,   276,   277,     0,     0,     0,   278,     0,     0,   279,
     280,   723,     0,     0,   282,     0,   724,   283,   284,     0,
       0,     0,     0,     0,   725,   286,     0,   287,     0,   288,
       0,   289,   290,     0,     0,   726,     0,     0,     0,     0,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,     0,   307,   308,   309,
     310,   727,   311,   312,   313,   314,   728,   315,   316,     0,
       0,     0,     0,   317,   318,   319,   320,   729,   322,     0,
       0,   730,   324,   731,   325,     0,   326,   732,   733,   734,
     735,   736,   331,   332,   333,   334,   335,     0,   737,   336,
     337,     0,     0,   338,   339,   340,   341,   738,   739,   740,
     342,   343,     0,   741,   742,     0,   344,   345,   743,     0,
     347,   348,   349,   350,     0,   351,   352,     0,     0,     0,
       0,     0,     0,     0,     0,   353,   354,   355,     0,   744,
     356,     0,   357,   358,   359,   360,   745,   362,   363,   364,
     365,   746,   747,   368,   748,     0,   369,   370,   371,     0,
     372,     0,   373,   374,   375,   376,   377,     0,   749,   379,
     380,     0,     0,   381,     0,     0,     0,   382,   383,   384,
     385,   386,     0,     0,   387,   388,   389,   390,   391,     0,
     392,   393,     0,   394,   395,   396,   750,   751,   397,     0,
     398,     0,   399,   400,     0,   401,   402,     0,     0,   752,
     403,   404,   405,   406,   407,   753,   409,   410,   411,   412,
       0,   754,   414,     0,     0,     0,   415,   416,   417,   418,
       0,     0,     0,   419,     0,     0,     0,   420,     0,   421,
     422,   423,   424,   425,   426,     0,   427,   428,   429,   430,
     431,   432,     0,     0,     0,     0,     0,     0,   433,   434,
       0,   435,     0,     0,   436,     0,     0,   437,   438,   439,
     755,   756,   440,   441,     0,   442,   443,   757,   445,   446,
     447,   758,   759,   448,   449,   450,   451,   760,   452,   453,
       0,   454,     0,   455,   456,   457,   458,     0,   761,   459,
     460,     0,   762,   763,   764,   765,     0,     0,     0,     0,
       0,   465,   466,   467,     0,   766,   767,   768,   469,   470,
     471,   769,   472,   473,   770,   474,   475,     0,   476,   477,
       0,     0,   478,     0,     0,   479,     0,   480,     0,   771,
     482,   483,     0,     0,   772,   773,   774,   775,   484,     0,
       0,   485,   776,     0,   777,   486,   487,   488,   489,   490,
     778,     0,     0,     0,     0,     0,     0,   492,   493,     0,
     494,   495,   496,     0,     0,   779,     0,     0,     0,     0,
     780,   781,     0,     0,     0,     0,   782,   783,     0,     0,
     784,   785,     0,     0,   786,   787,   139,     0,   678,   141,
     142,   143,   144,     0,     0,   145,     0,     0,     0,   146,
       0,     0,   679,     0,   148,   149,   150,   151,   152,   153,
     680,   155,     0,   156,     0,     0,   681,   157,   682,   683,
     684,   158,   685,     0,   159,   160,   161,     0,   162,     0,
     163,   164,     0,     0,   165,   686,   687,   166,   167,     0,
     168,   688,   689,   170,   171,     0,   172,   173,   174,   175,
     176,   690,   178,     0,   691,   180,   692,   693,   694,   695,
     696,     0,   186,   187,   188,   189,   190,   191,   192,   193,
       0,   194,   195,     0,   196,   197,   198,   697,   200,     0,
     201,   698,   699,   202,     0,     0,   203,   700,   701,   204,
       0,   205,   702,   703,     0,   206,   207,   208,   704,   705,
     706,     0,     0,     0,     0,   707,   211,   708,     0,     0,
    3522,   212,     0,   213,     0,     0,     0,   214,     0,   215,
     216,   217,   218,     0,     0,     0,   219,     0,     0,   220,
     221,   222,     0,     0,     0,   223,     0,   224,   225,     0,
     226,   227,   228,     0,     0,   229,   230,     0,   231,   232,
     233,   234,   235,   236,   710,     0,   237,   238,   239,   711,
     712,   240,   241,     0,   242,   243,   244,   713,     0,   245,
       0,     0,     0,   246,     0,   247,     0,   248,     0,   249,
     250,   714,   252,   715,   254,     0,   255,     0,   716,     0,
     256,   257,   258,     0,   259,   717,   718,     0,   260,   261,
       0,     0,     0,   719,   263,   264,   265,   720,     0,   266,
     267,   268,     0,   269,     0,   270,     0,     0,     0,   721,
     271,   272,   722,     0,     0,   273,     0,   274,   275,     0,
     276,   277,     0,     0,     0,   278,     0,     0,   279,   280,
     723,     0,     0,   282,     0,   724,   283,   284,     0,     0,
       0,     0,     0,   725,   286,     0,   287,     0,   288,     0,
     289,   290,     0,     0,   726,     0,     0,     0,     0,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,     0,   307,   308,   309,   310,
     727,   311,   312,   313,   314,   728,   315,   316,     0,     0,
       0,     0,   317,   318,   319,   320,   729,   322,     0,     0,
     730,   324,   731,   325,     0,   326,   732,   733,   734,   735,
     736,   331,   332,   333,   334,   335,     0,   737,   336,   337,
       0,     0,   338,   339,   340,   341,   738,   739,   740,   342,
     343,     0,   741,   742,     0,   344,   345,   743,     0,   347,
     348,   349,   350,     0,   351,   352,     0,     0,     0,     0,
       0,     0,     0,     0,   353,   354,   355,     0,   744,   356,
       0,   357,   358,   359,   360,   745,   362,   363,   364,   365,
     746,   747,   368,   748,     0,   369,   370,   371,     0,   372,
       0,   373,   374,   375,   376,   377,     0,   749,   379,   380,
       0,     0,   381,     0,     0,     0,   382,   383,   384,   385,
     386,     0,     0,   387,   388,   389,   390,   391,     0,   392,
     393,     0,   394,   395,   396,   750,   751,   397,     0,   398,
       0,   399,   400,     0,   401,   402,     0,     0,   752,   403,
     404,   405,   406,   407,   753,   409,   410,   411,   412,     0,
     754,   414,     0,     0,     0,   415,   416,   417,   418,     0,
       0,     0,   419,     0,     0,     0,   420,     0,   421,   422,
     423,   424,   425,   426,     0,   427,   428,   429,   430,   431,
     432,     0,     0,     0,     0,     0,     0,   433,   434,     0,
     435,     0,     0,   436,     0,     0,   437,   438,   439,   755,
     756,   440,   441,     0,   442,   443,   757,   445,   446,   447,
     758,   759,   448,   449,   450,   451,   760,   452,   453,     0,
     454,     0,   455,   456,   457,   458,     0,   761,   459,   460,
       0,   762,   763,   764,   765,     0,     0,     0,     0,     0,
     465,   466,   467,     0,   766,   767,   768,   469,   470,   471,
     769,   472,   473,   770,   474,   475,     0,   476,   477,     0,
       0,   478,     0,     0,   479,     0,   480,     0,   771,   482,
     483,     0,     0,   772,   773,   774,   775,   484,     0,     0,
     485,   776,     0,   777,   486,   487,   488,   489,   490,   778,
       0,     0,     0,     0,     0,     0,   492,   493,     0,   494,
     495,   496,     0,     0,   779,     0,     0,     0,     0,   780,
     781,     0,     0,     0,     0,   782,   783,     0,     0,   784,
     785,     0,     0,   786,   787,   139,     0,   678,   141,   142,
     143,   144,     0,     0,   145,     0,     0,     0,   146,     0,
       0,   679,     0,   148,   149,   150,   151,   152,   153,   680,
     155,     0,   156,     0,     0,   681,   157,   682,   683,   684,
     158,   685,     0,   159,   160,   161,     0,   162,     0,   163,
     164,     0,     0,   165,   686,   687,   166,   167,     0,   168,
     688,   689,   170,   171,     0,   172,   173,   174,   175,   176,
     690,   178,     0,   691,   180,   692,   693,   694,   695,   696,
       0,   186,   187,   188,   189,   190,   191,   192,   193,     0,
     194,   195,     0,   196,   197,   198,   697,   200,     0,   201,
     698,   699,   202,     0,     0,   203,   700,   701,   204,     0,
     205,   702,   703,     0,   206,   207,   208,   704,   705,   706,
       0,     0,     0,     0,   707,   211,   708,     0,     0,   709,
     212,     0,   213,     0,     0,     0,   214,     0,   215,   216,
     217,   218,     0,     0,     0,   219,     0,     0,   220,   221,
     222,     0,     0,     0,   223,     0,   224,   225,     0,   226,
     227,   228,     0,     0,   229,   230,     0,   231,   232,   233,
     234,   235,   236,   710,     0,   237,   238,   239,   711,   712,
     240,   241,     0,   242,   243,   244,   713,     0,   245,     0,
       0,     0,   246,     0,   247,     0,   248,     0,   249,   250,
     714,   252,   715,   254,     0,   255,     0,   716,     0,   256,
     257,   258,     0,   259,   717,   718,     0,   260,   261,     0,
       0,     0,   719,   263,   264,   265,   720,     0,   266,   267,
     268,     0,   269,     0,   270,     0,     0,     0,   721,   271,
     272,   722,     0,     0,   273,     0,   274,   275,     0,   276,
     277,     0,     0,     0,   278,     0,     0,   279,   280,   723,
       0,     0,   282,     0,   724,   283,   284,     0,     0,     0,
       0,     0,   725,   286,     0,   287,     0,   288,     0,   289,
     290,     0,     0,   726,     0,     0,     0,     0,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,     0,   307,   308,   309,   310,   727,
     311,   312,   313,   314,   728,   315,   316,  4419,     0,     0,
       0,   317,   318,   319,   320,   729,   322,     0,     0,   730,
     324,   731,   325,     0,   326,   732,   733,   734,   735,   736,
     331,   332,   333,   334,   335,     0,   737,   336,   337,     0,
       0,   338,   339,   340,   341,   738,     0,   740,   342,   343,
       0,   741,   742,     0,   344,   345,   743,     0,   347,   348,
     349,   350,     0,   351,   352,     0,     0,     0,     0,     0,
       0,     0,     0,   353,   354,   355,     0,   744,   356,     0,
     357,   358,   359,   360,   745,   362,   363,   364,   365,   746,
     747,   368,   748,     0,   369,   370,   371,     0,   372,     0,
     373,   374,   375,   376,   377,     0,   749,   379,   380,     0,
       0,   381,     0,     0,     0,   382,   383,   384,   385,   386,
       0,     0,   387,   388,   389,   390,   391,     0,   392,   393,
       0,   394,   395,   396,   750,   751,   397,     0,   398,     0,
     399,   400,     0,   401,   402,     0,     0,   752,   403,   404,
     405,   406,   407,   753,   409,   410,   411,   412,     0,   754,
     414,     0,     0,     0,   415,   416,   417,   418,     0,     0,
       0,   419,     0,     0,     0,   420,     0,   421,   422,   423,
     424,   425,   426,     0,   427,   428,   429,   430,   431,   432,
       0,     0,     0,     0,     0,     0,   433,   434,     0,   435,
       0,     0,   436,     0,     0,   437,   438,   439,   755,   756,
     440,   441,     0,   442,   443,   757,   445,   446,   447,   758,
     759,   448,   449,   450,   451,   760,   452,   453,     0,   454,
       0,   455,   456,   457,   458,     0,   761,   459,   460,     0,
     762,   763,   764,   765,     0,     0,     0,     0,     0,   465,
     466,   467,     0,   766,   767,   768,   469,   470,   471,   769,
     472,   473,   770,   474,   475,     0,   476,   477,     0,     0,
     478,     0,     0,   479,     0,   480,     0,   771,   482,   483,
       0,     0,   772,   773,   774,   775,   484,     0,     0,   485,
     776,     0,   777,   486,   487,   488,   489,   490,   778,     0,
       0,     0,     0,     0,     0,   492,   493,     0,   494,   495,
     496,     0,     0,   779,     0,     0,     0,     0,   780,   781,
       0,     0,     0,     0,   782,   783,     0,     0,   784,   785,
       0,     0,   786,   787,   139,     0,   678,   141,   142,   143,
     144,     0,     0,   145,     0,     0,     0,   146,     0,     0,
     679,     0,   148,   149,   150,   151,   152,   153,   680,   155,
       0,   156,     0,     0,   681,   157,   682,   683,   684,   158,
     685,     0,   159,   160,   161,     0,   162,     0,   163,   164,
       0,     0,   165,   686,   687,   166,   167,     0,   168,   688,
     689,   170,   171,     0,   172,   173,   174,   175,   176,   690,
     178,     0,   691,   180,   692,   693,   694,   695,   696,     0,
     186,   187,   188,   189,   190,   191,   192,   193,     0,   194,
     195,     0,   196,   197,   198,   697,   200,     0,   201,   698,
     699,   202,     0,     0,   203,   700,   701,   204,     0,   205,
     702,   703,     0,   206,   207,   208,   704,   705,   706,     0,
       0,     0,     0,   707,   211,   708,     0,     0,   709,   212,
       0,   213,     0,     0,     0,   214,     0,   215,   216,   217,
     218,     0,     0,     0,   219,     0,     0,   220,   221,   222,
       0,     0,     0,   223,     0,   224,   225,     0,   226,   227,
     228,     0,     0,   229,   230,     0,   231,   232,   233,   234,
     235,   236,   710,     0,   237,   238,   239,   711,   712,   240,
     241,     0,   242,   243,   244,   713,     0,   245,     0,     0,
       0,   246,     0,   247,     0,   248,     0,   249,   250,   714,
     252,   715,   254,     0,   255,     0,   716,     0,   256,   257,
     258,     0,   259,   717,   718,     0,   260,   261,     0,     0,
       0,   719,   263,   264,   265,   720,     0,   266,   267,   268,
       0,   269,     0,   270,     0,     0,     0,   721,   271,   272,
     722,     0,     0,   273,     0,   274,   275,     0,   276,   277,
       0,     0,     0,   278,     0,     0,   279,   280,   723,     0,
       0,   282,     0,   724,   283,   284,     0,     0,     0,     0,
       0,   725,   286,     0,   287,     0,   288,     0,   289,   290,
       0,     0,   726,     0,     0,     0,     0,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,     0,   307,   308,   309,   310,   727,   311,
     312,   313,   314,   728,   315,   316,     0,     0,     0,     0,
     317,   318,   319,   320,   729,   322,     0,     0,   730,   324,
     731,   325,     0,   326,   732,   733,   734,   735,   736,   331,
     332,   333,   334,   335,     0,   737,   336,   337,     0,     0,
     338,   339,   340,   341,   738,     0,   740,   342,   343,     0,
     741,   742,     0,   344,   345,   743,     0,   347,   348,   349,
     350,     0,   351,   352,     0,     0,     0,     0,     0,     0,
       0,     0,   353,   354,   355,     0,   744,   356,     0,   357,
     358,   359,   360,   745,   362,   363,   364,   365,   746,   747,
     368,   748,     0,   369,   370,   371,     0,   372,     0,   373,
     374,   375,   376,   377,     0,   749,   379,   380,     0,     0,
     381,     0,     0,     0,   382,   383,   384,   385,   386,     0,
       0,   387,   388,   389,   390,   391,     0,   392,   393,     0,
     394,   395,   396,   750,   751,   397,     0,   398,     0,   399,
     400,     0,   401,   402,     0,     0,   752,   403,   404,   405,
     406,   407,   753,   409,   410,   411,   412,     0,   754,   414,
       0,     0,     0,   415,   416,   417,   418,     0,     0,     0,
     419,     0,     0,     0,   420,     0,   421,   422,   423,   424,
     425,   426,     0,   427,   428,   429,   430,   431,   432,     0,
       0,     0,     0,     0,     0,   433,   434,     0,   435,     0,
       0,   436,     0,     0,   437,   438,   439,   755,   756,   440,
     441,     0,   442,   443,   757,   445,   446,   447,   758,   759,
     448,   449,   450,   451,   760,   452,   453,     0,   454,     0,
     455,   456,   457,   458,     0,   761,   459,   460,     0,   762,
     763,   764,   765,     0,     0,     0,     0,     0,   465,   466,
     467,     0,   766,   767,   768,   469,   470,   471,   769,   472,
     473,   770,   474,   475,     0,   476,   477,     0,     0,   478,
       0,     0,   479,     0,   480,     0,   771,   482,   483,     0,
       0,   772,   773,   774,   775,   484,     0,     0,   485,   776,
       0,   777,   486,   487,   488,   489,   490,   778,     0,     0,
       0,     0,     0,     0,   492,   493,     0,   494,   495,   496,
       0,     0,   779,     0,     0,     0,     0,   780,   781,     0,
       0,     0,     0,   782,   783,     0,     0,   784,   785,     0,
       0,   786,   787,   139,     0,   678,   141,   142,   143,   144,
       0,     0,   145,     0,     0,     0,   146,     0,     0,   679,
       0,   148,   149,   150,   151,   152,   153,   680,   155,     0,
     156,     0,     0,   681,   157,   682,   683,   684,   158,   685,
       0,   159,   160,   161,     0,   162,     0,   163,   164,     0,
       0,   165,   686,   687,   166,   167,     0,   168,   688,   689,
     170,   171,     0,   172,   173,   174,   175,   176,   690,   178,
       0,   691,   180,   692,   693,   694,   695,   696,     0,   186,
     187,   188,   189,   190,   191,   192,   193,     0,   194,   195,
       0,   196,   197,   198,   697,   200,     0,   201,   698,   699,
     202,     0,     0,   203,   700,   701,   204,     0,   205,   702,
     703,     0,   206,   207,   208,   704,   705,   706,     0,     0,
       0,     0,   707,   211,   708,     0,     0,   709,   212,     0,
     213,     0,     0,     0,   214,     0,   215,   216,   217,   218,
       0,     0,     0,   219,     0,     0,   220,   221,   222,     0,
       0,     0,   223,     0,   224,   225,     0,   226,   227,   228,
       0,     0,   229,   230,     0,   231,   232,   233,   234,   235,
     236,   710,     0,   237,   238,   239,   711,   712,   240,   241,
       0,   242,   243,   244,   713,     0,   245,     0,     0,     0,
     246,     0,   247,     0,   248,     0,   249,   250,   714,   252,
     715,   254,     0,   255,     0,   716,     0,   256,   257,   258,
       0,   259,   717,   718,     0,   260,   261,     0,     0,     0,
     719,   263,   264,   265,   720,     0,   266,   267,   268,     0,
     269,     0,   270,     0,     0,     0,   721,   271,   272,  1756,
       0,     0,   273,     0,   274,   275,     0,   276,   277,     0,
       0,     0,   278,     0,     0,   279,   280,   723,     0,     0,
     282,     0,   724,   283,   284,     0,     0,     0,     0,     0,
     725,   286,     0,   287,     0,   288,     0,   289,   290,     0,
       0,   726,     0,     0,     0,     0,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,     0,   307,   308,   309,   310,   727,   311,   312,
     313,   314,   728,   315,   316,     0,     0,     0,     0,   317,
     318,   319,   320,   729,   322,     0,     0,   730,   324,   731,
     325,     0,   326,   732,   733,   734,   735,   736,   331,   332,
     333,   334,   335,     0,   737,   336,   337,     0,     0,   338,
     339,   340,   341,   738,     0,   740,   342,   343,     0,   741,
     742,     0,   344,   345,   743,     0,   347,   348,   349,   350,
       0,   351,   352,     0,     0,     0,     0,     0,     0,     0,
       0,   353,   354,   355,     0,   744,   356,     0,   357,   358,
     359,   360,   745,   362,   363,   364,   365,   746,   747,   368,
     748,     0,   369,   370,   371,     0,   372,     0,   373,   374,
     375,   376,   377,     0,   749,   379,   380,     0,     0,   381,
       0,     0,     0,   382,   383,   384,   385,   386,     0,     0,
     387,   388,   389,   390,   391,     0,   392,   393,     0,   394,
     395,   396,   750,   751,   397,     0,   398,     0,   399,   400,
       0,   401,   402,     0,     0,   752,   403,   404,   405,   406,
     407,   753,   409,   410,   411,   412,     0,   754,   414,     0,
       0,     0,   415,   416,   417,   418,     0,     0,     0,   419,
       0,     0,     0,   420,     0,   421,   422,   423,   424,   425,
     426,     0,   427,   428,   429,   430,   431,   432,     0,     0,
       0,     0,     0,     0,   433,   434,     0,   435,     0,     0,
     436,     0,     0,   437,   438,   439,   755,   756,   440,   441,
       0,   442,   443,   757,   445,   446,   447,   758,   759,   448,
     449,   450,   451,   760,   452,   453,     0,   454,     0,   455,
     456,   457,   458,     0,   761,   459,   460,     0,   762,   763,
     764,   765,     0,     0,     0,     0,     0,   465,   466,   467,
       0,   766,   767,   768,   469,   470,   471,   769,   472,   473,
     770,   474,   475,     0,   476,   477,     0,     0,   478,     0,
       0,   479,     0,   480,     0,   771,   482,   483,     0,     0,
     772,   773,   774,   775,   484,     0,     0,   485,   776,     0,
     777,   486,   487,   488,   489,   490,   778,     0,     0,     0,
       0,     0,     0,   492,   493,     0,   494,   495,   496,     0,
       0,   779,     0,     0,     0,     0,   780,   781,     0,     0,
       0,     0,   782,   783,     0,     0,   784,   785,     0,     0,
     786,   787,   139,     0,   678,   141,   142,   143,   144,     0,
       0,   145,     0,     0,     0,   146,     0,     0,   679,     0,
     148,   149,   150,   151,   152,   153,   680,   155,     0,   156,
       0,     0,   681,   157,   682,   683,   684,   158,   685,     0,
     159,   160,   161,     0,   162,     0,   163,   164,     0,     0,
     165,   686,   687,   166,   167,     0,   168,   688,   689,   170,
     171,     0,   172,   173,   174,   175,   176,   690,   178,     0,
     691,   180,   692,   693,   694,   695,   696,     0,   186,   187,
     188,   189,   190,   191,   192,   193,     0,   194,   195,     0,
     196,   197,   198,   697,   200,     0,   201,   698,   699,   202,
       0,     0,   203,   700,   701,   204,     0,   205,   702,   703,
       0,   206,   207,   208,   704,   705,   706,     0,     0,     0,
       0,   707,   211,   708,     0,     0,   709,   212,     0,   213,
       0,     0,     0,   214,     0,   215,   216,   217,   218,     0,
       0,     0,   219,     0,     0,   220,   221,   222,     0,     0,
       0,   223,     0,   224,   225,     0,   226,   227,   228,     0,
       0,   229,   230,     0,   231,   232,   233,   234,   235,   236,
     710,     0,   237,   238,   239,   711,   712,   240,   241,     0,
     242,   243,   244,   713,     0,   245,     0,     0,     0,   246,
       0,   247,     0,   248,     0,   249,   250,   714,   252,   715,
     254,     0,   255,     0,   716,     0,   256,   257,   258,     0,
     259,   717,   718,     0,   260,   261,     0,     0,     0,   719,
     263,   264,   265,   720,     0,   266,   267,   268,     0,   269,
       0,   270,     0,     0,     0,   721,   271,   272,  1758,     0,
       0,   273,     0,   274,   275,     0,   276,   277,     0,     0,
       0,   278,     0,     0,   279,   280,   723,     0,     0,   282,
       0,   724,   283,   284,     0,     0,     0,     0,     0,   725,
     286,     0,   287,     0,   288,     0,   289,   290,     0,     0,
     726,     0,     0,     0,     0,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,     0,   307,   308,   309,   310,   727,   311,   312,   313,
     314,   728,   315,   316,     0,     0,     0,     0,   317,   318,
     319,   320,   729,   322,     0,     0,   730,   324,   731,   325,
       0,   326,   732,   733,   734,   735,   736,   331,   332,   333,
     334,   335,     0,   737,   336,   337,     0,     0,   338,   339,
     340,   341,   738,     0,   740,   342,   343,     0,   741,   742,
       0,   344,   345,   743,     0,   347,   348,   349,   350,     0,
     351,   352,     0,     0,     0,     0,     0,     0,     0,     0,
     353,   354,   355,     0,   744,   356,     0,   357,   358,   359,
     360,   745,   362,   363,   364,   365,   746,   747,   368,   748,
       0,   369,   370,   371,     0,   372,     0,   373,   374,   375,
     376,   377,     0,   749,   379,   380,     0,     0,   381,     0,
       0,     0,   382,   383,   384,   385,   386,     0,     0,   387,
     388,   389,   390,   391,     0,   392,   393,     0,   394,   395,
     396,   750,   751,   397,     0,   398,     0,   399,   400,     0,
     401,   402,     0,     0,   752,   403,   404,   405,   406,   407,
     753,   409,   410,   411,   412,     0,   754,   414,     0,     0,
       0,   415,   416,   417,   418,     0,     0,     0,   419,     0,
       0,     0,   420,     0,   421,   422,   423,   424,   425,   426,
       0,   427,   428,   429,   430,   431,   432,     0,     0,     0,
       0,     0,     0,   433,   434,     0,   435,     0,     0,   436,
       0,     0,   437,   438,   439,   755,   756,   440,   441,     0,
     442,   443,   757,   445,   446,   447,   758,   759,   448,   449,
     450,   451,   760,   452,   453,     0,   454,     0,   455,   456,
     457,   458,     0,   761,   459,   460,     0,   762,   763,   764,
     765,     0,     0,     0,     0,     0,   465,   466,   467,     0,
     766,   767,   768,   469,   470,   471,   769,   472,   473,   770,
     474,   475,     0,   476,   477,     0,     0,   478,     0,     0,
     479,     0,   480,     0,   771,   482,   483,     0,     0,   772,
     773,   774,   775,   484,     0,     0,   485,   776,     0,   777,
     486,   487,   488,   489,   490,   778,     0,     0,     0,     0,
       0,     0,   492,   493,     0,   494,   495,   496,     0,     0,
     779,     0,     0,     0,     0,   780,   781,     0,     0,     0,
       0,   782,   783,     0,     0,   784,   785,     0,     0,   786,
     787,   139,     0,   140,   141,   142,   143,   144,     0,     0,
     145,     0,     0,     0,   146,     0,     0,   147,     0,   148,
     149,   150,   151,   152,   153,   154,   155,     0,   156,     0,
       0,     0,   157,   682,     0,     0,   158,     0,     0,   159,
     160,   161,     0,   162,     0,   163,   164,     0,     0,   165,
       0,     0,   166,   167,     0,   168,   169,     0,   170,   171,
       0,   172,   173,   174,   175,   176,   177,   178,     0,   179,
     180,   181,   182,   183,   184,   185,     0,   186,   187,   188,
     189,   190,   191,   192,   193,     0,   194,   195,     0,   196,
     197,   198,   199,   200,     0,   201,     0,     0,   202,     0,
       0,   203,     0,     0,   204,     0,   205,     0,     0,     0,
     206,   207,   208,     0,     0,  2402,     0,     0,     0,     0,
     210,   211,   708,     0,     0,     0,   212,     0,   213,     0,
       0,     0,   214,     0,   215,   216,   217,   218,     0,     0,
       0,   219,     0,     0,   220,   221,   222,     0,     0,     0,
     223,     0,   224,   225,     0,   226,   227,   228,     0,     0,
     229,   230,     0,   231,   232,   233,   234,   235,   236,     0,
       0,   237,   238,   239,     0,   712,   240,   241,     0,   242,
     243,   244,   713,     0,   245,     0,     0,     0,   246,     0,
     247,     0,   248,     0,   249,   250,   251,   252,   253,   254,
       0,   255,     0,     0,     0,   256,   257,   258,     0,   259,
     717,   718,     0,   260,   261,     0,     0,     0,   262,   263,
     264,   265,     0,     0,   266,   267,   268,     0,   269,     0,
     270,     0,     0,     0,     0,   271,   272,     0,     0,     0,
     273,     0,   274,   275,     0,   276,   277,     0,     0,     0,
     278,     0,     0,   279,   280,   281,     0,     0,   282,     0,
       0,   283,   284,     0,     0,     0,     0,     0,   285,   286,
       0,   287,     0,   288,     0,   289,   290,     0,     0,   726,
       0,     0,     0,     0,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
       0,   307,   308,   309,   310,     0,   311,   312,   313,   314,
       0,   315,   316,     0,     0,     0,     0,   317,   318,   319,
     320,   321,   322,     0,     0,   323,   324,     0,   325,     0,
     326,     0,   327,   328,   329,   330,   331,   332,   333,   334,
     335,     0,   737,   336,   337,     0,     0,   338,   339,   340,
     341,     0,     0,     0,   342,   343,     0,   741,   742,     0,
     344,   345,   346,     0,   347,   348,   349,   350,     0,   351,
     352,     0,     0,     0,     0,     0,     0,     0,     0,   353,
     354,   355,     0,     0,   356,     0,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,     0,     0,
     369,   370,   371,     0,   372,     0,   373,   374,   375,   376,
     377,     0,   378,   379,   380,     0,     0,   381,     0,     0,
       0,   382,   383,   384,   385,   386,     0,     0,   387,   388,
     389,   390,   391,     0,   392,   393,     0,   394,   395,   396,
       0,     0,   397,     0,   398,     0,   399,   400,     0,   401,
     402,     0,     0,     0,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,     0,   413,   414,     0,     0,     0,
     415,   416,   417,   418,     0,     0,     0,   419,     0,     0,
       0,   420,     0,   421,   422,   423,   424,   425,   426,     0,
     427,   428,   429,   430,   431,   432,     0,     0,     0,     0,
       0,     0,   433,   434,     0,   435,     0,     0,   436,     0,
       0,   437,   438,   439,     0,     0,   440,   441,     0,   442,
     443,   444,   445,   446,   447,     0,     0,   448,   449,   450,
     451,     0,   452,   453,     0,   454,     0,   455,   456,   457,
     458,     0,   761,   459,   460,     0,  2403,   462,   463,  2404,
       0,     0,     0,     0,     0,   465,   466,   467,     0,     0,
     767,   468,   469,   470,   471,   769,   472,   473,   770,   474,
     475,     0,   476,   477,     0,     0,   478,     0,     0,   479,
       0,   480,     0,   481,   482,   483,     0,     0,     0,     0,
       0,     0,   484,     0,     0,   485,     0,     0,     0,   486,
     487,   488,   489,   490,   491,     0,     0,     0,     0,     0,
       0,   492,   493,     0,   494,   495,   496,     0,     0,   497,
       0,     0,     0,     0,   139,     0,   140,   141,   142,   143,
     144,     0,     0,   145,     0,     0,     0,   146,   786,   787,
     147,     0,   148,   149,   150,   151,   152,   153,   154,   155,
       0,   156,     0,     0,     0,   157,     0,     0,     0,   158,
       0,     0,   159,   160,   161,     0,   162,     0,   163,   164,
       0,     0,   165,     0,     0,   166,   167,     0,   168,   169,
       0,   170,   171,     0,   172,   173,   174,   175,   176,   177,
     178,     0,   179,   180,   181,   182,   183,   184,   185,     0,
     186,   187,   188,   189,   190,   191,   192,   193,     0,   194,
     195,  2531,   196,   197,   198,   199,   200,     0,   201,     0,
       0,   202,     0,     0,   203,     0,     0,   204,     0,   205,
       0,     0,     0,   206,   207,   208,     0,     0,   209,     0,
       0,     0,     0,   210,   211,     0,     0,     0,     0,   212,
       0,   213,     0,     0,     0,   214,     0,   215,   216,   217,
     218,     0,     0,     0,   219,     0,     0,   220,   221,   222,
       0,     0,     0,   223,     0,   224,   225,     0,   226,   227,
     228,     0,     0,   229,   230,     0,   231,   232,   233,   234,
     235,   236,     0,     0,   237,   238,   239,     0,     0,   240,
     241,     0,   242,   243,   244,     0,     0,   245,     0,     0,
       0,   246,     0,   247,   511,   248,     0,   249,   250,   251,
     252,   253,   254,     0,   255,     0,     0,     0,   256,   257,
     258,     0,   259,     0,     0,     0,   260,   261,     0,     0,
       0,   262,   263,   264,   265,     0,     0,   266,   267,   268,
    2101,   269,     0,   270,     0,     0,     0,     0,   271,   272,
       0,     0,     0,   273,     0,   274,   275,     0,   276,   277,
       0,     0,     0,   278,  2102,     0,   279,   280,   281,     0,
       0,   282,     0,     0,   283,   284,     0,  3111,     0,     0,
       0,   285,   286,     0,   287,     0,   288,     0,   289,   290,
       0,     0,     0,     0,     0,     0,     0,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,     0,   307,   308,   309,   310,     0,   311,
     312,   313,   314,     0,   315,   316,     0,     0,     0,     0,
     317,   318,   319,   320,   321,   322,     0,     0,   323,   324,
       0,   325,     0,   326,     0,   327,   328,   329,   330,   331,
     332,   333,   334,   335,     0,     0,   336,   337,     0,     0,
     338,   339,   340,   341,     0,     0,     0,   342,   343,     0,
       0,     0,     0,   344,   345,   346,     0,   347,   348,   349,
     350,     0,   351,   352,     0,     0,     0,     0,     0,     0,
       0,     0,   353,   354,   355,     0,     0,   356,     0,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,     0,     0,   369,   370,   371,     0,   372,     0,   373,
     374,   375,   376,   377,     0,   378,   379,   380,     0,     0,
     381,     0,     0,     0,   382,   383,   384,   385,   386,     0,
       0,   387,   388,   389,   390,   391,     0,   392,   393,     0,
     394,   395,   396,     0,     0,   397,     0,   398,     0,   399,
     400,     0,   401,   402,     0,     0,     0,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,     0,   413,   414,
    2391,     0,     0,   415,   416,   417,   418,     0,     0,     0,
     419,     0,     0,     0,   420,     0,   421,   422,   423,   424,
     425,   426,     0,   427,   428,   429,   430,   431,   432,   514,
       0,     0,     0,     0,     0,   433,   434,     0,   435,     0,
       0,   436,     0,     0,   437,   438,   439,     0,     0,   440,
     441,     0,   442,   443,   444,   445,   446,   447,     0,     0,
     448,   449,   450,   451,     0,   452,   453,     0,   454,     0,
     455,   456,   457,   458,     0,     0,   459,   460,     0,   461,
     462,   463,   464,     0,     0,     0,     0,     0,   465,   466,
     467,     0,     0,     0,   468,   469,   470,   471,     0,   472,
     473,     0,   474,   475,     0,   476,   477,     0,     0,   478,
       0,     0,   479,     0,   480,     0,   481,   482,   483,     0,
       0,     0,     0,     0,     0,   484,     0,     0,   485,     0,
       0,     0,   486,   487,   488,   489,   490,   491,     0,     0,
       0,     0,     0,     0,   492,   493,     0,   494,   495,   496,
       0,     0,   497,     0,     0,   139,     0,   140,   141,   142,
     143,   144,     0,     0,   145,     0,     0,     0,   146,     0,
       0,   147,  2598,   148,   149,   150,   151,   152,   153,   154,
     155,     0,   156,     0,     0,     0,   157,     0,     0,     0,
     158,     0,     0,   159,   160,   161,     0,   162,     0,   163,
     164,     0,     0,   165,     0,     0,   166,   167,     0,   168,
     169,     0,   170,   171,     0,   172,   173,   174,   175,   176,
     177,   178,     0,   179,   180,   181,   182,   183,   184,   185,
       0,   186,   187,   188,   189,   190,   191,   192,   193,     0,
     194,   195,  2531,   196,   197,   198,   199,   200,     0,   201,
       0,     0,   202,     0,     0,   203,     0,     0,   204,     0,
     205,     0,     0,     0,   206,   207,   208,     0,     0,   209,
       0,     0,     0,     0,   210,   211,     0,     0,     0,     0,
     212,     0,   213,     0,     0,     0,   214,     0,   215,   216,
     217,   218,     0,     0,     0,   219,     0,     0,   220,   221,
     222,     0,     0,     0,   223,     0,   224,   225,     0,   226,
     227,   228,     0,     0,   229,   230,     0,   231,   232,   233,
     234,   235,   236,     0,     0,   237,   238,   239,     0,     0,
     240,   241,     0,   242,   243,   244,     0,     0,   245,     0,
       0,     0,   246,     0,   247,   511,   248,     0,   249,   250,
     251,   252,   253,   254,     0,   255,     0,     0,     0,   256,
     257,   258,     0,   259,     0,     0,     0,   260,   261,     0,
       0,     0,   262,   263,   264,   265,     0,     0,   266,   267,
     268,  2101,   269,     0,   270,     0,     0,     0,     0,   271,
     272,     0,     0,     0,   273,     0,   274,   275,     0,   276,
     277,     0,     0,     0,   278,  2102,     0,   279,   280,   281,
       0,     0,   282,     0,     0,   283,   284,     0,     0,     0,
       0,     0,   285,   286,     0,   287,     0,   288,     0,   289,
     290,     0,     0,     0,     0,     0,     0,     0,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,     0,   307,   308,   309,   310,     0,
     311,   312,   313,   314,     0,   315,   316,     0,     0,     0,
       0,   317,   318,   319,   320,   321,   322,     0,     0,   323,
     324,     0,   325,     0,   326,     0,   327,   328,   329,   330,
     331,   332,   333,   334,   335,     0,     0,   336,   337,     0,
       0,   338,   339,   340,   341,     0,     0,     0,   342,   343,
       0,     0,     0,     0,   344,   345,   346,     0,   347,   348,
     349,   350,     0,   351,   352,     0,     0,     0,     0,     0,
       0,     0,     0,   353,   354,   355,     0,     0,   356,     0,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,     0,     0,   369,   370,   371,     0,   372,     0,
     373,   374,   375,   376,   377,     0,   378,   379,   380,     0,
       0,   381,     0,     0,     0,   382,   383,   384,   385,   386,
       0,     0,   387,   388,   389,   390,   391,     0,   392,   393,
       0,   394,   395,   396,     0,     0,   397,     0,   398,     0,
     399,   400,     0,   401,   402,     0,     0,     0,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,     0,   413,
     414,     0,     0,     0,   415,   416,   417,   418,     0,     0,
       0,   419,     0,     0,     0,   420,     0,   421,   422,   423,
     424,   425,   426,     0,   427,   428,   429,   430,   431,   432,
     514,     0,     0,     0,     0,     0,   433,   434,     0,   435,
       0,     0,   436,     0,     0,   437,   438,   439,     0,     0,
     440,   441,     0,   442,   443,   444,   445,   446,   447,     0,
       0,   448,   449,   450,   451,     0,   452,   453,     0,   454,
       0,   455,   456,   457,   458,     0,     0,   459,   460,     0,
     461,   462,   463,   464,     0,     0,     0,     0,     0,   465,
     466,   467,     0,     0,     0,   468,   469,   470,   471,     0,
     472,   473,     0,   474,   475,     0,   476,   477,     0,     0,
     478,     0,     0,   479,     0,   480,     0,   481,   482,   483,
       0,     0,     0,     0,     0,     0,   484,     0,     0,   485,
       0,     0,     0,   486,   487,   488,   489,   490,   491,     0,
       0,     0,     0,     0,     0,   492,   493,     0,   494,   495,
     496,     0,     0,   497,     0,     0,   139,     0,   140,   141,
     142,   143,   144,     0,     0,   145,     0,     0,     0,   146,
       0,     0,   147,  2598,   148,   149,   150,   151,   152,   153,
     154,   155,     0,   156,     0,     0,     0,   157,     0,     0,
       0,   158,     0,     0,   159,   160,   161,     0,   162,     0,
     163,   164,     0,     0,   165,     0,     0,   166,   167,     0,
     168,   169,     0,   170,   171,     0,   172,   173,   174,   175,
     176,   177,   178,     0,   179,   180,   181,   182,   183,   184,
     185,     0,   186,   187,   188,   189,   190,   191,   192,   193,
       0,   194,   195,     0,   196,   197,   198,   199,   200,     0,
     201,     0,     0,   202,     0,     0,   203,     0,     0,   204,
       0,   205,     0,     0,     0,   206,   207,   208,     0,     0,
     209,     0,     0,     0,     0,   210,   211,     0,     0,     0,
       0,   212,     0,   213,     0,     0,     0,   214,     0,   215,
     216,   217,   218,     0,     0,     0,   219,     0,     0,   220,
     221,   222,     0,     0,     0,   223,     0,   224,   225,     0,
     226,   227,   228,     0,     0,   229,   230,     0,   231,   232,
     233,   234,   235,   236,     0,     0,   237,   238,   239,     0,
       0,   240,   241,     0,   242,   243,   244,     0,     0,   245,
       0,     0,     0,   246,     0,   247,     0,   248,     0,   249,
     250,   251,   252,   253,   254,     0,   255,     0,     0,     0,
     256,   257,   258,     0,   259,     0,     0,     0,   260,   261,
       0,     0,     0,   262,   263,   264,   265,     0,     0,   266,
     267,   268,     0,   269,     0,   270,     0,     0,     0,     0,
     271,   272,     0,     0,     0,   273,     0,   274,   275,     0,
     276,   277,     0,     0,     0,   278,     0,     0,   279,   280,
     281,     0,     0,   282,     0,     0,   283,   284,     0,     0,
       0,     0,     0,   285,   286,     0,   287,     0,   288,     0,
     289,   290,     0,     0,     0,     0,     0,     0,     0,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,     0,   307,   308,   309,   310,
       0,   311,   312,   313,   314,     0,   315,   316,     0,     0,
       0,     0,   317,   318,   319,   320,   321,   322,     0,     0,
     323,   324,     0,   325,     0,   326,     0,   327,   328,   329,
     330,   331,   332,   333,   334,   335,     0,     0,   336,   337,
       0,     0,   338,   339,   340,   341,     0,     0,     0,   342,
     343,     0,     0,     0,     0,   344,   345,   346,     0,   347,
     348,   349,   350,     0,   351,   352,     0,     0,     0,     0,
       0,     0,     0,     0,   353,   354,   355,     0,     0,   356,
       0,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,     0,     0,   369,   370,   371,     0,   372,
       0,   373,   374,   375,   376,   377,     0,   378,   379,   380,
       0,     0,   381,     0,     0,     0,   382,   383,   384,   385,
     386,     0,     0,   387,   388,   389,   390,   391,     0,   392,
     393,     0,   394,   395,   396,     0,     0,   397,     0,   398,
       0,   399,   400,     0,   401,   402,     0,     0,     0,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,     0,
     413,   414,  2391,     0,     0,   415,   416,   417,   418,     0,
       0,     0,   419,     0,     0,     0,   420,     0,   421,   422,
     423,   424,   425,   426,     0,   427,   428,   429,   430,   431,
     432,     0,     0,     0,     0,     0,     0,   433,   434,     0,
     435,     0,     0,   436,     0,     0,   437,   438,   439,     0,
       0,   440,   441,     0,   442,   443,   444,   445,   446,   447,
       0,     0,   448,   449,   450,   451,     0,   452,   453,     0,
     454,     0,   455,   456,   457,   458,     0,     0,   459,   460,
       0,   461,   462,   463,   464,     0,     0,     0,     0,     0,
     465,   466,   467,     0,     0,     0,   468,   469,   470,   471,
       0,   472,   473,     0,   474,   475,     0,   476,   477,     0,
       0,   478,     0,     0,   479,     0,   480,     0,   481,   482,
     483,     0,     0,     0,     0,     0,     0,   484,     0,     0,
     485,     0,     0,     0,   486,   487,   488,   489,   490,   491,
       0,     0,     0,     0,     0,     0,   492,   493,     0,   494,
     495,   496,     0,     0,   497,     0,     0,   139,     0,   140,
     141,   142,   143,   144,     0,     0,   145,  2831,     0,     0,
     146,     0,     0,   147,   787,   148,   149,   150,   151,   152,
     153,   154,   155,     0,   156,     0,     0,     0,   157,     0,
       0,     0,   158,     0,     0,   159,   160,   161,     0,   162,
       0,   163,   164,     0,     0,   165,     0,     0,   166,   167,
       0,   168,   169,     0,   170,   171,     0,   172,   173,   174,
     175,   176,   177,   178,     0,   179,   180,   181,   182,   183,
     184,   185,     0,   186,   187,   188,   189,   190,   191,   192,
     193,     0,   194,   195,     0,   196,   197,   198,   199,   200,
       0,   201,     0,     0,   202,     0,     0,   203,     0,     0,
     204,     0,   205,     0,     0,     0,   206,   207,   208,     0,
       0,   209,     0,     0,     0,     0,   210,   211,     0,     0,
       0,     0,   212,     0,   213,     0,     0,     0,   214,     0,
     215,   216,   217,   218,     0,     0,     0,   219,     0,     0,
     220,   221,   222,     0,     0,     0,   223,     0,   224,   225,
       0,   226,   227,   228,     0,     0,   229,   230,     0,   231,
     232,   233,   234,   235,   236,     0,     0,   237,   238,   239,
       0,     0,   240,   241,     0,   242,   243,   244,     0,     0,
     245,     0,     0,     0,   246,     0,   247,     0,   248,     0,
     249,   250,   251,   252,   253,   254,     0,   255,     0,     0,
       0,   256,   257,   258,     0,   259,     0,     0,     0,   260,
     261,     0,     0,     0,   262,   263,   264,   265,     0,     0,
     266,   267,   268,     0,   269,     0,   270,     0,     0,     0,
       0,   271,   272,     0,     0,     0,   273,     0,   274,   275,
       0,   276,   277,     0,     0,     0,   278,     0,     0,   279,
     280,   281,     0,     0,   282,     0,     0,   283,   284,     0,
       0,     0,     0,     0,   285,   286,     0,   287,     0,   288,
       0,   289,   290,     0,     0,     0,     0,     0,     0,     0,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,     0,   307,   308,   309,
     310,     0,   311,   312,   313,   314,     0,   315,   316,     0,
       0,     0,     0,   317,   318,   319,   320,   321,   322,     0,
       0,   323,   324,     0,   325,     0,   326,     0,   327,   328,
     329,   330,   331,   332,   333,   334,   335,     0,     0,   336,
     337,     0,     0,   338,   339,   340,   341,     0,     0,     0,
     342,   343,     0,     0,     0,     0,   344,   345,   346,     0,
     347,   348,   349,   350,     0,   351,   352,     0,     0,     0,
       0,     0,     0,     0,     0,   353,   354,   355,     0,     0,
     356,     0,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,     0,     0,   369,   370,   371,     0,
     372,     0,   373,   374,   375,   376,   377,     0,   378,   379,
     380,     0,     0,   381,     0,     0,     0,   382,   383,   384,
     385,   386,     0,     0,   387,   388,   389,   390,   391,     0,
     392,   393,     0,   394,   395,   396,     0,     0,   397,     0,
     398,     0,   399,   400,     0,   401,   402,     0,     0,     0,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
       0,   413,   414,     0,     0,     0,   415,   416,   417,   418,
       0,     0,     0,   419,     0,     0,     0,   420,     0,   421,
     422,   423,   424,   425,   426,     0,   427,   428,   429,   430,
     431,   432,     0,     0,     0,     0,     0,     0,   433,   434,
       0,   435,     0,     0,   436,     0,     0,   437,   438,   439,
       0,     0,   440,   441,     0,   442,   443,   444,   445,   446,
     447,     0,     0,   448,   449,   450,   451,     0,   452,   453,
       0,   454,     0,   455,   456,   457,   458,     0,     0,   459,
     460,     0,   461,   462,   463,   464,     0,     0,     0,     0,
       0,   465,   466,   467,     0,     0,     0,   468,   469,   470,
     471,     0,   472,   473,     0,   474,   475,     0,   476,   477,
       0,     0,   478,     0,     0,   479,     0,   480,     0,   481,
     482,   483,     0,     0,     0,     0,     0,     0,   484,     0,
       0,   485,     0,     0,     0,   486,   487,   488,   489,   490,
     491,     0,     0,     0,     0,     0,     0,   492,   493,     0,
     494,   495,   496,     0,     0,   497,     0,     0,     0,     0,
     139,     0,   140,   141,   142,   143,   144,     0,  4546,   145,
       0,     0,     0,   146,  4547,   787,   147,     0,   148,   149,
     150,   151,   152,   153,   154,   155,     0,   156,     0,     0,
       0,   157,     0,     0,     0,   158,     0,     0,   159,   160,
     161,     0,   162,     0,   163,   164,     0,     0,   165,     0,
       0,   166,   167,     0,   168,   169,     0,   170,   171,     0,
     172,   173,   174,   175,   176,   177,   178,     0,   179,   180,
     181,   182,   183,   184,   185,     0,   186,   187,   188,   189,
     190,   191,   192,   193,     0,   194,   195,     0,   196,   197,
     198,   199,   200,     0,   201,     0,     0,   202,     0,     0,
     203,     0,     0,   204,     0,   205,     0,     0,     0,   206,
     207,   208,     0,     0,   209,     0,     0,     0,     0,   210,
     211,     0,     0,     0,     0,   212,     0,   213,     0,     0,
       0,   214,     0,   215,   216,   217,   218,     0,     0,     0,
     219,     0,     0,   220,   221,   222,     0,     0,     0,   223,
       0,   224,   225,     0,   226,   227,   228,     0,     0,   229,
     230,     0,   231,   232,   233,   234,   235,   236,     0,     0,
     237,   238,   239,     0,     0,   240,   241,     0,   242,   243,
     244,     0,     0,   245,     0,     0,     0,   246,     0,   247,
       0,   248,     0,   249,   250,   251,   252,   253,   254,     0,
     255,     0,     0,     0,   256,   257,   258,     0,   259,     0,
       0,     0,   260,   261,     0,     0,     0,   262,   263,   264,
     265,     0,     0,   266,   267,   268,     0,   269,     0,   270,
       0,     0,     0,     0,   271,   272,     0,     0,     0,   273,
       0,   274,   275,     0,   276,   277,     0,     0,     0,   278,
       0,     0,   279,   280,   281,     0,     0,   282,     0,     0,
     283,   284,     0,     0,     0,     0,     0,   285,   286,     0,
     287,     0,   288,     0,   289,   290,     0,     0,     0,     0,
       0,     0,     0,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,     0,
     307,   308,   309,   310,     0,   311,   312,   313,   314,     0,
     315,   316,     0,     0,     0,     0,   317,   318,   319,   320,
     321,   322,     0,     0,   323,   324,     0,   325,     0,   326,
       0,   327,   328,   329,   330,   331,   332,   333,   334,   335,
       0,     0,   336,   337,     0,     0,   338,   339,   340,   341,
       0,     0,     0,   342,   343,     0,     0,     0,     0,   344,
     345,   346,     0,   347,   348,   349,   350,     0,   351,   352,
       0,     0,     0,     0,     0,     0,     0,     0,   353,   354,
     355,     0,     0,   356,     0,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,     0,     0,   369,
     370,   371,     0,   372,     0,   373,   374,   375,   376,   377,
       0,   378,   379,   380,     0,     0,   381,     0,     0,     0,
     382,   383,   384,   385,   386,     0,     0,   387,   388,   389,
     390,   391,     0,   392,   393,     0,   394,   395,   396,     0,
       0,   397,     0,   398,     0,   399,   400,     0,   401,   402,
       0,     0,     0,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,     0,   413,   414,     0,     0,     0,   415,
     416,   417,   418,     0,     0,     0,   419,     0,     0,     0,
     420,     0,   421,   422,   423,   424,   425,   426,     0,   427,
     428,   429,   430,   431,   432,     0,     0,     0,     0,     0,
       0,   433,   434,     0,   435,     0,     0,   436,     0,     0,
     437,   438,   439,     0,     0,   440,   441,     0,   442,   443,
     444,   445,   446,   447,     0,     0,   448,   449,   450,   451,
       0,   452,   453,     0,   454,     0,   455,   456,   457,   458,
       0,     0,   459,   460,     0,   461,   462,   463,   464,     0,
       0,     0,     0,     0,   465,   466,   467,     0,     0,     0,
     468,   469,   470,   471,     0,   472,   473,     0,   474,   475,
       0,   476,   477,     0,     0,   478,     0,     0,   479,     0,
     480,     0,   481,   482,   483,     0,     0,     0,     0,     0,
       0,   484,     0,     0,   485,     0,     0,     0,   486,   487,
     488,   489,   490,   491,     0,     0,     0,     0,     0,     0,
     492,   493,     0,   494,   495,   496,     0,     0,   497,     0,
       0,     0,     0,   139,     0,   140,   141,   142,   143,   144,
    1152,     0,   145,     0,     0,     0,   146,     0,   787,   147,
       0,   148,   149,   150,   151,   152,   153,   154,   155,     0,
     156,     0,     0,     0,   157,     0,     0,     0,   158,     0,
       0,   159,   160,   161,     0,   162,     0,   163,   164,     0,
       0,   165,     0,     0,   166,   167,     0,   168,   169,     0,
     170,   171,     0,   172,   173,   174,   175,   176,   177,   178,
       0,   179,   180,   181,   182,   183,   184,   185,     0,   186,
     187,   188,   189,   190,   191,   192,   193,     0,   194,   195,
       0,   196,   197,   198,   199,   200,     0,   201,     0,     0,
     202,     0,     0,   203,     0,     0,   204,     0,   205,     0,
       0,     0,   206,   207,   208,     0,     0,   209,     0,     0,
       0,     0,   210,   211,     0,     0,     0,     0,   212,     0,
     213,     0,     0,     0,   214,     0,   215,   216,   217,   218,
       0,     0,     0,   219,     0,     0,   220,   221,   222,     0,
       0,     0,   223,     0,   224,   225,     0,   226,   227,   228,
       0,     0,   229,   230,     0,   231,   232,   233,   234,   235,
     236,     0,     0,   237,   238,   239,     0,     0,   240,   241,
       0,   242,   243,   244,     0,     0,   245,     0,     0,     0,
     246,     0,   247,     0,   248,     0,   249,   250,   251,   252,
     253,   254,     0,   255,     0,     0,     0,   256,   257,   258,
       0,   259,     0,     0,     0,   260,   261,     0,     0,     0,
     262,   263,   264,   265,     0,     0,   266,   267,   268,     0,
     269,     0,   270,     0,     0,     0,     0,   271,   272,     0,
    1355,     0,   273,     0,   274,   275,     0,   276,   277,     0,
       0,     0,   278,     0,     0,   279,   280,   281,     0,     0,
     282,     0,     0,   283,   284,     0,     0,     0,     0,     0,
     285,   286,     0,   287,     0,   288,     0,   289,   290,     0,
       0,     0,     0,     0,     0,     0,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,     0,   307,   308,   309,   310,     0,   311,   312,
     313,   314,     0,   315,   316,     0,     0,     0,     0,   317,
     318,   319,   320,   321,   322,     0,     0,   323,   324,     0,
     325,     0,   326,     0,   327,   328,   329,   330,   331,   332,
     333,   334,   335,     0,     0,   336,   337,     0,     0,   338,
     339,   340,   341,     0,     0,     0,   342,   343,     0,     0,
       0,     0,   344,   345,   346,     0,   347,   348,   349,   350,
       0,   351,   352,     0,     0,     0,     0,     0,     0,     0,
       0,   353,   354,   355,     0,     0,   356,     0,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
       0,     0,   369,   370,   371,     0,   372,     0,   373,   374,
     375,   376,   377,     0,   378,   379,   380,     0,     0,   381,
       0,     0,     0,   382,   383,   384,   385,   386,     0,     0,
     387,   388,   389,   390,   391,     0,   392,   393,     0,   394,
     395,   396,     0,     0,   397,     0,   398,     0,   399,   400,
       0,   401,   402,     0,     0,     0,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,     0,   413,   414,     0,
       0,     0,   415,   416,   417,   418,     0,     0,     0,   419,
       0,     0,     0,   420,     0,   421,   422,   423,   424,   425,
     426,     0,   427,   428,   429,   430,   431,   432,     0,     0,
       0,     0,     0,     0,   433,   434,     0,   435,     0,     0,
     436,     0,     0,   437,   438,   439,     0,     0,   440,   441,
       0,   442,   443,   444,   445,   446,   447,     0,     0,   448,
     449,   450,   451,     0,   452,   453,     0,   454,     0,   455,
     456,   457,   458,     0,     0,   459,   460,     0,   461,   462,
     463,   464,     0,     0,     0,     0,     0,   465,   466,   467,
       0,     0,     0,   468,   469,   470,   471,     0,   472,   473,
       0,   474,   475,     0,   476,   477,     0,     0,   478,     0,
       0,   479,     0,   480,     0,   481,   482,   483,     0,     0,
       0,     0,     0,     0,   484,     0,     0,   485,     0,     0,
       0,   486,   487,   488,   489,   490,   491,     0,     0,     0,
       0,     0,     0,   492,   493,     0,   494,   495,   496,     0,
       0,   497,     0,     0,   139,     0,   140,   141,   142,   143,
     144,     0,     0,   145,     0,     0,     0,   146,     0,     0,
     147,   545,   148,   149,   150,   151,   152,   153,   154,   155,
       0,   156,     0,     0,     0,   157,     0,     0,     0,   158,
       0,     0,   159,   160,   161,     0,   162,     0,   163,   164,
       0,     0,   165,     0,     0,   166,   167,     0,   168,   169,
       0,   170,   171,     0,   172,   173,   174,   175,   176,   177,
     178,     0,   179,   180,   181,   182,   183,   184,   185,     0,
     186,   187,   188,   189,   190,   191,   192,   193,     0,   194,
     195,     0,   196,   197,   198,   199,   200,     0,   201,     0,
       0,   202,     0,     0,   203,     0,     0,   204,     0,   205,
       0,     0,     0,   206,   207,   208,     0,     0,   209,     0,
       0,     0,     0,   210,   211,     0,     0,     0,     0,   212,
       0,   213,     0,     0,     0,   214,     0,   215,   216,   217,
     218,     0,     0,     0,   219,     0,     0,   220,   221,   222,
       0,     0,     0,   223,     0,   224,   225,     0,   226,   227,
     228,     0,     0,   229,   230,     0,   231,   232,   233,   234,
     235,   236,     0,     0,   237,   238,   239,     0,     0,   240,
     241,     0,   242,   243,   244,     0,     0,   245,     0,     0,
       0,   246,     0,   247,     0,   248,     0,   249,   250,   251,
     252,   253,   254,     0,   255,     0,     0,     0,   256,   257,
     258,     0,   259,     0,     0,     0,   260,   261,     0,     0,
       0,   262,   263,   264,   265,     0,     0,   266,   267,   268,
       0,   269,     0,   270,     0,     0,     0,     0,   271,   272,
       0,     0,     0,   273,     0,   274,   275,     0,   276,   277,
       0,     0,     0,   278,     0,     0,   279,   280,   281,     0,
       0,   282,     0,     0,   283,   284,     0,     0,     0,     0,
       0,   285,   286,     0,   287,     0,   288,     0,   289,   290,
       0,     0,     0,     0,     0,     0,     0,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,     0,   307,   308,   309,   310,     0,   311,
     312,   313,   314,     0,   315,   316,     0,     0,     0,     0,
     317,   318,   319,   320,   321,   322,     0,     0,   323,   324,
       0,   325,     0,   326,     0,   327,   328,   329,   330,   331,
     332,   333,   334,   335,     0,     0,   336,   337,     0,     0,
     338,   339,   340,   341,     0,     0,     0,   342,   343,     0,
       0,     0,     0,   344,   345,   346,     0,   347,   348,   349,
     350,     0,   351,   352,     0,     0,     0,     0,     0,     0,
       0,     0,   353,   354,   355,     0,     0,   356,     0,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,     0,     0,   369,   370,   371,     0,   372,     0,   373,
     374,   375,   376,   377,     0,   378,   379,   380,     0,     0,
     381,     0,     0,     0,   382,   383,   384,   385,   386,     0,
       0,   387,   388,   389,   390,   391,     0,   392,   393,     0,
     394,   395,   396,     0,     0,   397,     0,   398,     0,   399,
     400,     0,   401,   402,     0,     0,     0,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,     0,   413,   414,
       0,     0,     0,   415,   416,   417,   418,     0,     0,     0,
     419,     0,     0,     0,   420,     0,   421,   422,   423,   424,
     425,   426,     0,   427,   428,   429,   430,   431,   432,     0,
       0,     0,     0,     0,     0,   433,   434,     0,   435,     0,
       0,   436,     0,     0,   437,   438,   439,     0,     0,   440,
     441,     0,   442,   443,   444,   445,   446,   447,     0,     0,
     448,   449,   450,   451,     0,   452,   453,     0,   454,     0,
     455,   456,   457,   458,     0,     0,   459,   460,     0,   461,
     462,   463,   464,     0,     0,     0,     0,     0,   465,   466,
     467,     0,     0,     0,   468,   469,   470,   471,     0,   472,
     473,     0,   474,   475,     0,   476,   477,     0,     0,   478,
       0,     0,   479,     0,   480,     0,   481,   482,   483,     0,
       0,     0,     0,     0,     0,   484,     0,     0,   485,     0,
       0,     0,   486,   487,   488,   489,   490,   491,     0,     0,
       0,     0,     0,     0,   492,   493,     0,   494,   495,   496,
       0,     0,   497,     0,     0,     0,     0,     0,   139,  2339,
     140,   141,   142,   143,   144,     0,     0,   145,     0,     0,
       0,   146,   545,     0,   147,     0,   148,   149,   150,   151,
     152,   153,   154,   155,     0,   156,     0,     0,     0,   157,
       0,     0,     0,   158,     0,     0,   159,   160,   161,     0,
     162,     0,   163,   164,     0,     0,   165,     0,     0,   166,
     167,     0,   168,   169,     0,   170,   171,     0,   172,   173,
     174,   175,   176,   177,   178,     0,   179,   180,   181,   182,
     183,   184,   185,     0,   186,   187,   188,   189,   190,   191,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   199,
     200,     0,   201,     0,     0,   202,     0,     0,   203,     0,
       0,   204,     0,   205,     0,     0,     0,   206,   207,   208,
       0,     0,   209,     0,     0,     0,     0,   210,   211,     0,
       0,     0,     0,   212,     0,   213,     0,     0,     0,   214,
       0,   215,   216,   217,   218,     0,     0,     0,   219,     0,
       0,   220,   221,   222,     0,     0,     0,   223,     0,   224,
     225,     0,   226,   227,   228,     0,     0,   229,   230,     0,
     231,   232,   233,   234,   235,   236,     0,     0,   237,   238,
     239,     0,     0,   240,   241,     0,   242,   243,   244,     0,
       0,   245,     0,     0,     0,   246,     0,   247,     0,   248,
       0,   249,   250,   251,   252,   253,   254,     0,   255,     0,
       0,     0,   256,   257,   258,     0,   259,     0,     0,     0,
     260,   261,     0,     0,     0,   262,   263,   264,   265,     0,
       0,   266,   267,   268,     0,   269,     0,   270,     0,     0,
       0,     0,   271,   272,     0,     0,     0,   273,     0,   274,
     275,     0,   276,   277,     0,     0,     0,   278,     0,     0,
     279,   280,   281,     0,     0,   282,     0,     0,   283,   284,
       0,     0,     0,     0,     0,   285,   286,     0,   287,     0,
     288,     0,   289,   290,     0,     0,     0,     0,     0,     0,
       0,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,     0,   307,   308,
     309,   310,     0,   311,   312,   313,   314,     0,   315,   316,
       0,     0,     0,     0,   317,   318,   319,   320,   321,   322,
       0,     0,   323,   324,     0,   325,     0,   326,     0,   327,
     328,   329,   330,   331,   332,   333,   334,   335,     0,     0,
     336,   337,     0,     0,   338,   339,   340,   341,     0,     0,
       0,   342,   343,     0,     0,     0,     0,   344,   345,   346,
       0,   347,   348,   349,   350,     0,   351,   352,     0,     0,
       0,     0,     0,     0,     0,     0,   353,   354,   355,     0,
       0,   356,     0,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,     0,     0,   369,   370,   371,
       0,   372,     0,   373,   374,   375,   376,   377,     0,   378,
     379,   380,     0,     0,   381,     0,     0,     0,   382,   383,
     384,   385,   386,     0,     0,   387,   388,   389,   390,   391,
       0,   392,   393,     0,   394,   395,   396,     0,     0,   397,
       0,   398,     0,   399,   400,     0,   401,   402,     0,     0,
       0,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,     0,   413,   414,     0,     0,     0,   415,   416,   417,
     418,     0,     0,     0,   419,     0,     0,     0,   420,     0,
     421,   422,   423,   424,   425,   426,     0,   427,   428,   429,
     430,   431,   432,     0,     0,     0,     0,     0,     0,   433,
     434,     0,   435,     0,     0,   436,     0,     0,   437,   438,
     439,     0,     0,   440,   441,     0,   442,   443,   444,   445,
     446,   447,     0,     0,   448,   449,   450,   451,     0,   452,
     453,     0,   454,     0,   455,   456,   457,   458,     0,     0,
     459,   460,     0,   461,   462,   463,   464,     0,     0,     0,
       0,     0,   465,   466,   467,     0,     0,     0,   468,   469,
     470,   471,     0,   472,   473,     0,   474,   475,     0,   476,
     477,     0,     0,   478,     0,     0,   479,     0,   480,     0,
     481,   482,   483,     0,     0,     0,     0,     0,     0,   484,
       0,     0,   485,     0,     0,     0,   486,   487,   488,   489,
     490,   491,     0,     0,     0,     0,     0,     0,   492,   493,
       0,   494,   495,   496,     0,     0,   497,     0,     0,     0,
       0,   139,     0,   140,   141,   142,   143,   144,  2597,     0,
     145,     0,     0,     0,   146,     0,  2598,   147,     0,   148,
     149,   150,   151,   152,   153,   154,   155,     0,   156,     0,
       0,     0,   157,     0,     0,     0,   158,     0,     0,   159,
     160,   161,     0,   162,     0,   163,   164,     0,     0,   165,
       0,     0,   166,   167,     0,   168,   169,     0,   170,   171,
       0,   172,   173,   174,   175,   176,   177,   178,     0,   179,
     180,   181,   182,   183,   184,   185,     0,   186,   187,   188,
     189,   190,   191,   192,   193,     0,   194,   195,     0,   196,
     197,   198,   199,   200,     0,   201,     0,     0,   202,     0,
       0,   203,     0,     0,   204,     0,   205,     0,     0,     0,
     206,   207,   208,     0,     0,   209,     0,     0,     0,     0,
     210,   211,     0,     0,     0,     0,   212,     0,   213,     0,
       0,     0,   214,     0,   215,   216,   217,   218,     0,     0,
       0,   219,     0,     0,   220,   221,   222,     0,     0,     0,
     223,     0,   224,   225,     0,   226,   227,   228,     0,     0,
     229,   230,     0,   231,   232,   233,   234,   235,   236,     0,
       0,   237,   238,   239,     0,     0,   240,   241,     0,   242,
     243,   244,     0,     0,   245,     0,     0,     0,   246,     0,
     247,     0,   248,     0,   249,   250,   251,   252,   253,   254,
       0,   255,     0,     0,     0,   256,   257,   258,     0,   259,
       0,     0,     0,   260,   261,     0,     0,     0,   262,   263,
     264,   265,     0,     0,   266,   267,   268,     0,   269,     0,
     270,     0,     0,     0,     0,   271,   272,     0,     0,     0,
     273,     0,   274,   275,     0,   276,   277,     0,     0,     0,
     278,     0,     0,   279,   280,   281,     0,     0,   282,     0,
       0,   283,   284,     0,     0,     0,     0,     0,   285,   286,
       0,   287,     0,   288,     0,   289,   290,     0,     0,     0,
       0,     0,     0,     0,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
       0,   307,   308,   309,   310,     0,   311,   312,   313,   314,
       0,   315,   316,     0,     0,     0,     0,   317,   318,   319,
     320,   321,   322,     0,     0,   323,   324,     0,   325,     0,
     326,     0,   327,   328,   329,   330,   331,   332,   333,   334,
     335,     0,     0,   336,   337,     0,     0,   338,   339,   340,
     341,     0,     0,     0,   342,   343,     0,     0,     0,     0,
     344,   345,   346,     0,   347,   348,   349,   350,     0,   351,
     352,     0,     0,     0,     0,     0,     0,     0,     0,   353,
     354,   355,     0,     0,   356,     0,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,     0,     0,
     369,   370,   371,     0,   372,     0,   373,   374,   375,   376,
     377,     0,   378,   379,   380,     0,     0,   381,     0,     0,
       0,   382,   383,   384,   385,   386,     0,     0,   387,   388,
     389,   390,   391,     0,   392,   393,     0,   394,   395,   396,
       0,     0,   397,     0,   398,     0,   399,   400,     0,   401,
     402,     0,     0,     0,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,     0,   413,   414,     0,     0,     0,
     415,   416,   417,   418,     0,     0,     0,   419,     0,     0,
       0,   420,     0,   421,   422,   423,   424,   425,   426,     0,
     427,   428,   429,   430,   431,   432,     0,     0,     0,     0,
       0,     0,   433,   434,     0,   435,     0,     0,   436,     0,
       0,   437,   438,   439,     0,     0,   440,   441,     0,   442,
     443,   444,   445,   446,   447,     0,     0,   448,   449,   450,
     451,     0,   452,   453,     0,   454,     0,   455,   456,   457,
     458,     0,     0,   459,   460,     0,   461,   462,   463,   464,
       0,     0,     0,     0,     0,   465,   466,   467,     0,     0,
       0,   468,   469,   470,   471,     0,   472,   473,     0,   474,
     475,     0,   476,   477,     0,     0,   478,     0,     0,   479,
       0,   480,     0,   481,   482,   483,     0,     0,     0,     0,
       0,     0,   484,     0,     0,   485,     0,     0,     0,   486,
     487,   488,   489,   490,   491,     0,     0,     0,     0,     0,
       0,   492,   493,     0,   494,   495,   496,     0,     0,   497,
       0,     0,     0,     0,   139,     0,   140,   141,   142,   143,
     144,     0,     0,   145,     0,     0,     0,   146,  4547,   787,
     147,     0,   148,   149,   150,   151,   152,   153,   154,   155,
       0,   156,     0,     0,     0,   157,     0,     0,     0,   158,
       0,     0,   159,   160,   161,     0,   162,     0,   163,   164,
       0,     0,   165,     0,     0,   166,   167,     0,   168,   169,
       0,   170,   171,     0,   172,   173,   174,   175,   176,   177,
     178,     0,   179,   180,   181,   182,   183,   184,   185,     0,
     186,   187,   188,   189,   190,   191,   192,   193,     0,   194,
     195,     0,   196,   197,   198,   199,   200,     0,   201,     0,
       0,   202,     0,     0,   203,     0,     0,   204,     0,   205,
       0,     0,     0,   206,   207,   208,     0,     0,   209,     0,
       0,     0,     0,   210,   211,     0,     0,     0,     0,   212,
       0,   213,     0,     0,     0,   214,     0,   215,   216,   217,
     218,     0,     0,     0,   219,     0,     0,   220,   221,   222,
       0,     0,     0,   223,     0,   224,   225,     0,   226,   227,
     228,     0,     0,   229,   230,     0,   231,   232,   233,   234,
     235,   236,     0,     0,   237,   238,   239,     0,     0,   240,
     241,     0,   242,   243,   244,     0,     0,   245,     0,     0,
       0,   246,     0,   247,     0,   248,     0,   249,   250,   251,
     252,   253,   254,     0,   255,     0,     0,     0,   256,   257,
     258,     0,   259,     0,     0,     0,   260,   261,     0,     0,
       0,   262,   263,   264,   265,     0,     0,   266,   267,   268,
       0,   269,     0,   270,     0,     0,     0,     0,   271,   272,
       0,     0,     0,   273,     0,   274,   275,     0,   276,   277,
       0,     0,     0,   278,     0,     0,   279,   280,   281,     0,
       0,   282,     0,     0,   283,   284,     0,     0,     0,     0,
       0,   285,   286,     0,   287,     0,   288,     0,   289,   290,
       0,     0,     0,     0,     0,     0,     0,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,     0,   307,   308,   309,   310,     0,   311,
     312,   313,   314,     0,   315,   316,     0,     0,     0,     0,
     317,   318,   319,   320,   321,   322,     0,     0,   323,   324,
       0,   325,     0,   326,     0,   327,   328,   329,   330,   331,
     332,   333,   334,   335,     0,     0,   336,   337,     0,     0,
     338,   339,   340,   341,     0,     0,     0,   342,   343,     0,
       0,     0,     0,   344,   345,   346,     0,   347,   348,   349,
     350,     0,   351,   352,     0,     0,     0,     0,     0,     0,
       0,     0,   353,   354,   355,     0,     0,   356,     0,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,     0,     0,   369,   370,   371,     0,   372,     0,   373,
     374,   375,   376,   377,     0,   378,   379,   380,     0,     0,
     381,     0,     0,     0,   382,   383,   384,   385,   386,     0,
       0,   387,   388,   389,   390,   391,     0,   392,   393,     0,
     394,   395,   396,     0,     0,   397,     0,   398,     0,   399,
     400,     0,   401,   402,     0,     0,     0,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,     0,   413,   414,
       0,     0,     0,   415,   416,   417,   418,     0,     0,     0,
     419,     0,     0,     0,   420,     0,   421,   422,   423,   424,
     425,   426,     0,   427,   428,   429,   430,   431,   432,     0,
       0,     0,     0,     0,     0,   433,   434,     0,   435,     0,
       0,   436,     0,     0,   437,   438,   439,     0,     0,   440,
     441,     0,   442,   443,   444,   445,   446,   447,     0,     0,
     448,   449,   450,   451,     0,   452,   453,     0,   454,     0,
     455,   456,   457,   458,     0,     0,   459,   460,     0,   461,
     462,   463,   464,     0,     0,     0,     0,     0,   465,   466,
     467,     0,     0,     0,   468,   469,   470,   471,     0,   472,
     473,     0,   474,   475,     0,   476,   477,     0,     0,   478,
       0,     0,   479,     0,   480,     0,   481,   482,   483,     0,
       0,     0,     0,     0,     0,   484,     0,     0,   485,     0,
       0,     0,   486,   487,   488,   489,   490,   491,     0,     0,
       0,     0,     0,     0,   492,   493,     0,   494,   495,   496,
       0,     0,   497,     0,     0,   139,     0,   140,   141,   142,
     143,   144,     0,     0,   145,     0,     0,     0,   146,     0,
       0,   147,   545,   148,   149,   150,   151,   152,   153,   154,
     155,     0,   156,     0,     0,     0,   157,     0,     0,     0,
     158,     0,     0,   159,   160,   161,     0,   162,     0,   163,
     164,     0,     0,   165,     0,     0,   166,   167,     0,   168,
     169,     0,   170,   171,     0,   172,   173,   174,   175,   176,
     177,   178,     0,   179,   180,   181,   182,   183,   184,   185,
       0,   186,   187,   188,   189,   190,   191,   192,   193,     0,
     194,   195,     0,   196,   197,   198,   199,   200,     0,   201,
       0,     0,   202,     0,     0,   203,     0,     0,   204,     0,
     205,     0,     0,     0,   206,   207,   208,     0,     0,   209,
       0,     0,     0,     0,   210,   211,     0,     0,     0,     0,
     212,     0,   213,     0,     0,     0,   214,     0,   215,   216,
     217,   218,     0,     0,     0,   219,     0,     0,   220,   221,
     222,     0,     0,     0,   223,     0,   224,   225,     0,   226,
     227,   228,     0,     0,   229,   230,     0,   231,   232,   233,
     234,   235,   236,     0,     0,   237,   614,   239,     0,     0,
     240,   241,     0,   242,   243,   244,     0,     0,   245,     0,
       0,     0,   246,     0,   247,     0,   248,     0,   249,   250,
     251,   252,   253,   254,     0,   255,     0,     0,     0,   256,
     257,   258,     0,   259,     0,     0,     0,   260,   261,     0,
       0,     0,   262,   263,   264,   265,     0,     0,   266,   267,
     268,     0,   269,     0,   270,     0,     0,     0,     0,   271,
     272,     0,     0,     0,   273,     0,   274,   275,     0,   276,
     277,     0,     0,     0,   278,     0,     0,   279,   280,   281,
       0,     0,   282,     0,     0,   283,   284,     0,     0,     0,
       0,     0,   285,   286,     0,   287,     0,   288,     0,   289,
     290,     0,     0,     0,     0,     0,     0,     0,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,     0,   307,   308,   309,   310,     0,
     311,   312,   313,   314,     0,   315,   316,     0,     0,     0,
       0,   317,   318,   319,   320,   321,   322,     0,     0,   323,
     324,     0,   325,     0,   326,     0,   327,   328,   329,   330,
     331,   332,   333,   334,   335,     0,     0,   336,   337,     0,
       0,   338,   339,   340,   341,     0,     0,     0,   342,   343,
       0,     0,     0,     0,   344,   345,   346,     0,   347,   348,
     349,   350,     0,   351,   352,     0,     0,     0,     0,     0,
       0,     0,     0,   353,   354,   355,     0,     0,   356,     0,
     357,   358,   615,   360,   361,   362,   363,   364,   365,   366,
     367,   368,     0,     0,   369,   370,   371,     0,   372,     0,
     373,   374,   375,   376,   377,     0,   378,   379,   380,     0,
       0,   381,     0,     0,     0,   382,   383,   384,   385,   386,
       0,     0,   387,   388,   389,   390,   391,     0,   392,   393,
       0,   394,   395,   396,     0,     0,   397,     0,   398,     0,
     399,   400,     0,   401,   402,     0,     0,     0,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,     0,   413,
     414,     0,     0,     0,   415,   416,   417,   418,     0,     0,
       0,   419,     0,     0,     0,   420,     0,   421,   422,   423,
     424,   425,   426,     0,   427,   428,   429,   430,   431,   432,
       0,     0,     0,     0,     0,     0,   433,   434,     0,   435,
       0,     0,   436,     0,     0,   437,   438,   439,     0,     0,
     440,   441,     0,   442,   443,   444,   445,   446,   447,     0,
       0,   448,   449,   450,   451,     0,   452,   453,     0,   454,
       0,   455,   456,   457,   458,     0,     0,   459,   460,     0,
     461,   462,   463,   464,     0,     0,     0,     0,     0,   465,
     466,   467,     0,     0,     0,   468,   469,   470,   471,     0,
     472,   473,     0,   474,   475,     0,   476,   477,     0,     0,
     478,     0,     0,   479,     0,   480,     0,   481,   482,   483,
       0,     0,     0,     0,     0,     0,   484,     0,     0,   485,
       0,     0,     0,   486,   487,   488,   489,   490,   491,     0,
       0,     0,     0,     0,     0,   492,   493,     0,   494,   495,
     496,     0,     0,   497,     0,     0,   139,     0,   140,   141,
     142,   143,   144,     0,     0,   145,     0,     0,     0,   146,
       0,     0,   147,   545,   148,   149,   150,   151,   152,   153,
     154,   155,     0,   156,     0,     0,     0,   157,     0,     0,
       0,   158,     0,     0,   159,   160,   161,     0,   162,     0,
     163,   164,     0,     0,   165,     0,     0,   166,   167,     0,
     168,   169,     0,   170,   171,     0,   172,   173,   174,   175,
     176,   177,   178,     0,   179,   180,   181,   182,   183,   184,
     185,     0,   186,   187,   188,   189,   190,   191,   192,   193,
       0,   194,   195,     0,   196,   197,   198,   199,   200,     0,
     201,     0,     0,   202,     0,     0,   203,     0,     0,   204,
       0,   205,     0,     0,     0,   206,   207,   208,     0,     0,
     209,     0,     0,     0,     0,   210,   211,     0,     0,     0,
       0,   212,     0,   213,     0,     0,     0,   214,     0,   215,
     216,   217,   218,     0,     0,     0,   219,     0,     0,   220,
     221,   222,     0,     0,     0,   223,     0,   224,   225,     0,
     226,   227,   228,     0,     0,   229,   230,     0,   231,   232,
     233,   234,   235,   236,     0,     0,   237,   238,   239,     0,
       0,   240,   241,     0,   242,   243,   244,     0,     0,   245,
       0,     0,     0,   246,     0,   247,     0,   248,     0,   249,
     250,   251,   252,   253,   254,     0,   255,     0,     0,     0,
     256,   257,   258,     0,   259,     0,     0,     0,   260,   261,
       0,     0,     0,   262,   263,   264,   265,     0,     0,   266,
     267,   268,     0,   269,     0,   270,     0,     0,     0,     0,
     271,   272,     0,     0,     0,   273,     0,   274,   275,     0,
     276,   277,     0,     0,     0,   278,     0,     0,   279,   280,
     281,     0,     0,   282,     0,     0,   283,   284,     0,     0,
       0,     0,     0,   285,   286,     0,   287,     0,   288,     0,
     289,   290,     0,     0,     0,     0,     0,     0,     0,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,     0,   307,   308,   309,   310,
       0,   311,   312,   313,   314,     0,   315,   316,     0,     0,
       0,     0,   317,   318,   319,   320,   321,   322,     0,     0,
     323,   324,     0,   325,     0,   326,     0,   327,   328,   329,
     330,   331,   332,   333,   334,   335,     0,     0,   336,   337,
       0,     0,   338,   339,   340,   341,     0,     0,     0,   342,
     343,     0,     0,     0,     0,   344,   345,   346,     0,   347,
     348,   349,   350,     0,   351,   352,     0,     0,     0,     0,
       0,     0,     0,     0,   353,   354,   355,     0,     0,   356,
       0,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,     0,     0,   369,   370,   371,     0,   372,
       0,   373,   374,   375,   376,   377,     0,   378,   379,   380,
       0,     0,   381,     0,     0,     0,   382,   383,   384,   385,
     386,     0,     0,   387,   388,   389,   390,   391,     0,   392,
     393,     0,   394,   395,   396,     0,     0,   397,     0,   398,
       0,   399,   400,     0,   401,   402,     0,     0,     0,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,     0,
     413,   414,     0,     0,     0,   415,   416,   417,   418,     0,
       0,     0,   419,     0,     0,     0,   420,     0,   421,   422,
     423,   424,   425,   426,     0,   427,   428,   429,   430,   431,
     432,     0,     0,     0,     0,     0,     0,   433,   434,     0,
     435,     0,     0,   436,     0,     0,   437,   438,   439,     0,
       0,   440,   441,     0,   442,   443,   444,   445,   446,   447,
       0,     0,   448,   449,   450,   451,     0,   452,   453,     0,
     454,     0,   455,   456,   457,   458,     0,     0,   459,   460,
       0,   461,   462,   463,   464,     0,     0,     0,     0,     0,
     465,   466,   467,     0,     0,     0,   468,   469,   470,   471,
       0,   472,   473,     0,   474,   475,     0,   476,   477,     0,
       0,   478,     0,     0,   479,     0,   480,     0,   481,   482,
     483,     0,     0,     0,     0,     0,     0,   484,     0,     0,
     485,     0,     0,     0,   486,   487,   488,   489,   490,   491,
       0,     0,     0,     0,     0,     0,   492,   493,     0,   494,
     495,   496,     0,     0,   497,     0,     0,   139,     0,   140,
     141,   142,   143,   144,     0,     0,   145,     0,     0,     0,
     146,     0,     0,   147,   787,   148,   149,   150,   151,   152,
     153,   154,   155,     0,   156,     0,     0,     0,   157,     0,
       0,     0,   158,     0,     0,   159,   160,   161,     0,   162,
       0,   163,   164,     0,     0,   165,     0,     0,   166,   167,
       0,   168,   169,     0,   170,   171,     0,   172,   173,   174,
     175,   176,   177,   178,     0,   179,   180,   181,   182,   183,
     184,   185,     0,   186,   187,   188,   189,   190,   191,   192,
     193,     0,   194,   195,     0,   196,   197,   198,   199,   200,
       0,   201,     0,     0,   202,     0,     0,   203,     0,     0,
     204,     0,   205,     0,     0,     0,   206,   207,   208,     0,
       0,   209,     0,     0,     0,     0,   210,   211,     0,     0,
       0,     0,   212,     0,   213,     0,     0,     0,   214,     0,
     215,   216,   217,   218,     0,     0,     0,   219,     0,     0,
     220,   221,   222,     0,     0,     0,   223,     0,   224,   225,
       0,   226,   227,   228,     0,     0,   229,   230,     0,   231,
     232,   233,   234,   235,   236,     0,     0,   237,   238,   239,
       0,     0,   240,   241,     0,   242,   243,   244,     0,     0,
     245,     0,     0,     0,   246,     0,   247,     0,   248,     0,
     249,   250,   251,   252,   253,   254,     0,   255,     0,     0,
       0,   256,   257,   258,     0,   259,     0,     0,     0,   260,
     261,     0,     0,     0,   262,   263,   264,   265,     0,     0,
     266,   267,   268,     0,   269,     0,   270,     0,     0,     0,
       0,   271,   272,     0,     0,     0,   273,     0,   274,   275,
       0,   276,   277,     0,     0,     0,   278,     0,     0,   279,
     280,   281,     0,     0,   282,     0,     0,   283,   284,     0,
       0,     0,     0,     0,   285,   286,     0,   287,     0,   288,
       0,   289,   290,     0,     0,     0,     0,     0,     0,     0,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,     0,   307,   308,   309,
     310,     0,   311,   312,   313,   314,     0,   315,   316,     0,
       0,     0,     0,   317,   318,   319,   320,   321,   322,     0,
       0,   323,   324,     0,   325,     0,   326,     0,   327,   328,
     329,   330,   331,   332,   333,   334,   335,     0,     0,   336,
     337,     0,     0,   338,   339,   340,   341,     0,     0,     0,
     342,   343,     0,     0,     0,     0,   344,   345,   346,     0,
     347,   348,   349,   350,     0,   351,   352,     0,     0,     0,
       0,     0,     0,     0,     0,   353,   354,   355,     0,     0,
     356,     0,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,     0,     0,   369,   370,   371,     0,
     372,     0,   373,   374,   375,   376,   377,     0,   378,   379,
     380,     0,     0,   381,     0,     0,     0,   382,   383,   384,
     385,   386,     0,     0,   387,   388,   389,   390,   391,     0,
     392,   393,     0,   394,   395,   396,     0,     0,   397,     0,
     398,     0,   399,   400,     0,   401,   402,     0,     0,     0,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
       0,   413,   414,     0,     0,     0,   415,   416,   417,   418,
       0,     0,     0,   419,     0,     0,     0,   420,     0,   421,
     422,   423,   424,   425,   426,     0,   427,   428,   429,   430,
     431,   432,     0,     0,     0,     0,     0,     0,   433,   434,
       0,   435,     0,     0,   436,     0,     0,   437,   438,   439,
       0,     0,   440,   441,     0,   442,   443,   444,   445,   446,
     447,     0,     0,   448,   449,   450,   451,     0,   452,   453,
       0,   454,     0,   455,   456,   457,   458,     0,     0,   459,
     460,     0,   461,   462,   463,   464,     0,     0,     0,     0,
       0,   465,   466,   467,     0,     0,     0,   468,   469,   470,
     471,     0,   472,   473,     0,   474,   475,     0,   476,   477,
       0,     0,   478,     0,     0,   479,     0,   480,     0,   481,
     482,   483,     0,     0,     0,     0,     0,     0,   484,     0,
       0,   485,     0,     0,     0,   486,   487,   488,   489,   490,
     491,     0,     0,     0,     0,     0,     0,   492,   493,     0,
     494,   495,   496,     0,     0,   497,     0,     0,   139,     0,
     140,   141,   142,   143,   144,     0,     0,   145,     0,     0,
       0,   146,     0,     0,   147,  2598,   148,   149,   150,   151,
     152,   153,   154,   155,     0,   156,     0,     0,     0,   157,
       0,     0,     0,   158,     0,     0,   159,   160,   161,     0,
     162,     0,   163,   164,     0,     0,   165,     0,     0,   166,
     167,     0,   168,   919,   920,   170,   171,     0,   172,   173,
     174,   175,   176,   177,   178,     0,   179,   180,   181,   182,
     183,   184,   185,     0,   186,   187,   188,   189,   190,   191,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   199,
     200,     0,   201,     0,     0,   202,     0,     0,   203,     0,
       0,   204,     0,   205,     0,     0,     0,   206,   207,   208,
       0,     0,   209,     0,     0,     0,     0,   210,   211,     0,
       0,     0,   921,   212,     0,   213,     0,     0,     0,   214,
       0,   215,   216,   217,   218,     0,     0,     0,   219,     0,
       0,   220,   221,   222,     0,     0,     0,   223,     0,   224,
     225,     0,   226,   227,   228,     0,     0,   229,   230,     0,
     231,   232,   233,   234,   235,   236,     0,     0,   237,   238,
     239,     0,     0,   240,   241,     0,   242,   243,   244,     0,
       0,   245,     0,     0,     0,   246,     0,   247,     0,   248,
       0,   249,   250,   251,   252,   253,   922,     0,   255,     0,
       0,     0,   256,   257,   258,     0,   259,     0,     0,     0,
     260,   261,     0,     0,     0,   262,   263,   264,   265,     0,
       0,   266,   267,   268,     0,   269,     0,   270,     0,     0,
       0,     0,   271,   272,     0,     0,     0,   273,     0,   274,
     275,     0,   276,   277,     0,     0,     0,   278,     0,     0,
     279,   280,   281,     0,     0,   282,     0,     0,   283,   284,
       0,     0,     0,     0,     0,   285,   286,     0,   923,     0,
     288,     0,   289,   290,     0,     0,     0,     0,     0,     0,
       0,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,     0,   307,   308,
     309,   310,     0,   311,   312,   313,   314,     0,   315,   316,
       0,     0,     0,     0,   317,   318,   319,   320,   321,   322,
       0,     0,   323,   324,     0,   325,     0,   326,     0,   327,
     328,   329,   330,   331,   332,   924,   334,   335,     0,     0,
     336,   337,     0,     0,   338,   339,   340,   341,     0,     0,
       0,   342,   343,     0,     0,     0,     0,   344,   345,   346,
       0,   347,   348,   349,   350,     0,   351,   352,     0,     0,
       0,     0,     0,     0,     0,     0,   353,   354,   355,     0,
       0,   356,     0,   357,   358,   359,   360,   925,   362,   363,
     364,   365,   366,   367,   368,     0,     0,   369,   370,   371,
       0,   372,     0,   373,   374,   375,   376,   377,     0,   378,
     379,   380,     0,     0,   381,     0,     0,     0,   382,   383,
     384,   385,   386,     0,     0,   387,   388,   389,   390,   391,
       0,   392,   393,     0,   394,   395,   396,     0,     0,   397,
       0,   398,     0,   399,   400,     0,   401,   402,     0,     0,
       0,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,     0,   413,   414,     0,     0,     0,   415,   416,   926,
     418,     0,     0,     0,   419,     0,     0,     0,   420,     0,
     421,   422,   423,   424,   425,   426,     0,   427,   428,   429,
     430,   431,   432,     0,     0,     0,     0,     0,     0,   433,
     434,     0,   435,     0,     0,   436,     0,     0,   437,   438,
     439,     0,     0,   440,   441,     0,   442,   443,   444,   445,
     446,   447,     0,     0,   448,   449,   450,   451,     0,   452,
     453,     0,   454,     0,   455,   456,   457,   458,     0,     0,
     459,   460,     0,   461,   462,   463,   464,     0,     0,     0,
       0,     0,   927,   466,   467,     0,     0,     0,   468,   469,
     470,   471,     0,   472,   473,     0,   474,   475,     0,   476,
     477,     0,     0,   478,     0,     0,   479,     0,   480,     0,
     481,   482,   483,     0,     0,     0,     0,     0,     0,   484,
       0,     0,   485,     0,     0,     0,   486,   487,   488,   489,
     490,   491,     0,     0,     0,     0,     0,     0,   492,   493,
       0,   494,   495,   496,     0,     0,   497,     0,   139,     0,
     140,   141,   142,   143,   144,     0,     0,   145,     0,     0,
       0,   146,     0,     0,   147,   928,   148,   149,   150,   151,
     152,   153,   154,   155,     0,   156,     0,     0,     0,   157,
       0,     0,     0,   158,     0,     0,   159,   160,   161,     0,
     162,     0,   163,   164,     0,     0,   165,     0,     0,   166,
     167,     0,   168,   169,     0,   170,   171,     0,   172,   173,
     174,   175,   176,   177,   178,     0,   179,   180,   181,   182,
     183,   184,   185,     0,   186,   187,   188,   189,   190,   191,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   199,
     200,     0,   201,     0,     0,   202,     0,     0,   203,     0,
       0,   204,     0,   205,     0,     0,     0,   206,   207,   208,
       0,     0,   209,     0,     0,     0,     0,   210,   211,     0,
       0,     0,     0,   212,     0,   213,     0,     0,     0,   214,
       0,   215,   216,   217,   218,     0,     0,     0,   219,     0,
       0,   220,   221,   222,     0,     0,     0,   223,     0,   224,
     225,     0,   226,   227,   228,     0,     0,   229,   230,     0,
     231,   232,   233,   234,   235,   236,     0,     0,   237,   238,
     239,     0,     0,   240,   241,     0,   242,   243,   244,     0,
       0,   245,     0,     0,     0,   246,     0,   247,     0,   248,
       0,   249,   250,   251,   252,   253,   254,     0,   255,     0,
       0,     0,   256,   257,   258,     0,   259,     0,     0,     0,
     260,   261,     0,     0,     0,   262,   263,   264,   265,     0,
       0,   266,   267,   268,     0,   269,     0,   270,     0,     0,
       0,     0,   271,   272,     0,     0,     0,   273,     0,   274,
     275,     0,   276,   277,     0,     0,     0,   278,     0,     0,
     279,   280,   281,     0,     0,   282,     0,     0,   283,   284,
     626,     0,     0,     0,     0,   285,   286,     0,   287,     0,
     288,     0,   289,   290,     0,     0,     0,     0,     0,     0,
       0,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,     0,   307,   308,
     309,   310,     0,   311,   312,   313,   314,     0,   315,   316,
       0,     0,     0,     0,   317,   318,   319,   320,   321,   322,
       0,     0,   323,   324,     0,   325,     0,   326,     0,   327,
     328,   329,   330,   331,   332,   333,   334,   335,     0,     0,
     336,   337,     0,     0,   338,   339,   340,   341,     0,     0,
       0,   342,   343,     0,     0,     0,     0,   344,   345,   346,
       0,   347,   348,   349,   350,     0,   351,   352,     0,     0,
       0,     0,     0,     0,     0,     0,   353,   354,   355,     0,
       0,   356,     0,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,     0,     0,   369,   370,   371,
       0,   372,     0,   373,   374,   375,   376,   377,     0,   378,
     379,   380,     0,     0,   381,     0,     0,     0,   382,   383,
     384,   385,   386,     0,     0,   387,   388,   389,   390,   391,
       0,   392,   393,     0,   394,   395,   396,     0,     0,   397,
       0,   398,     0,   399,   400,     0,   401,   402,     0,     0,
       0,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,     0,   413,   414,     0,     0,     0,   415,   416,   417,
     418,     0,     0,     0,   419,     0,     0,     0,   420,     0,
     421,   422,   423,   424,   425,   426,     0,   427,   428,   429,
     430,   431,   432,     0,     0,     0,     0,     0,     0,   433,
     434,     0,   435,     0,     0,   436,     0,     0,   437,   438,
     439,     0,     0,   440,   441,     0,   442,   443,   444,   445,
     446,   447,     0,     0,   448,   449,   450,   451,     0,   452,
     453,     0,   454,     0,   455,   456,   457,   458,     0,   136,
     459,   460,     0,   461,   462,   463,   464,     0,     0,     0,
       0,     0,   465,   466,   467,     0,     0,     0,   468,   469,
     470,   471,     0,   472,   473,     0,   474,   475,     0,   476,
     477,     0,     0,   478,     0,     0,   479,     0,   480,     0,
     481,   482,   483,     0,     0,     0,     0,     0,     0,   484,
       0,     0,   485,     0,     0,     0,   486,   487,   488,   489,
     490,   491,     0,     0,     0,     0,     0,     0,   492,   493,
       0,   494,   495,   496,     0,     0,   497,     0,   139,     0,
     140,   141,   142,   143,   144,     0,     0,   145,     0,     0,
       0,   146,     0,     0,   147,  1404,   148,   149,   150,   151,
     152,   153,   154,   155,     0,   156,     0,     0,     0,   157,
       0,     0,     0,   158,     0,     0,   159,   160,   161,     0,
     162,     0,   163,   164,     0,     0,   165,     0,     0,   166,
     167,     0,   168,   169,     0,   170,   171,     0,   172,   173,
     174,   175,   176,   177,   178,     0,   179,   180,   181,   182,
     183,   184,   185,     0,   186,   187,   188,   189,   190,   191,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   199,
     200,     0,   201,     0,     0,   202,     0,     0,   203,     0,
       0,   204,     0,   205,     0,     0,     0,   206,   207,   208,
       0,     0,   209,     0,     0,     0,     0,   210,   211,     0,
       0,     0,     0,   212,     0,   213,     0,     0,     0,   214,
       0,   215,   216,   217,   218,     0,     0,     0,   219,     0,
       0,   220,   221,   222,     0,     0,     0,   223,     0,   224,
     225,     0,   226,   227,   228,     0,     0,   229,   230,     0,
     231,   232,   233,   234,   235,   236,     0,     0,   237,   238,
     239,     0,     0,   240,   241,     0,   242,   243,   244,     0,
       0,   245,     0,     0,     0,   246,     0,   247,     0,   248,
       0,   249,   250,   251,   252,   253,   254,     0,   255,     0,
       0,     0,   256,   257,   258,     0,   259,     0,     0,     0,
     260,   261,     0,     0,     0,   262,   263,   264,   265,     0,
       0,   266,   267,   268,     0,   269,     0,   270,     0,     0,
       0,     0,   271,   272,     0,     0,     0,   273,     0,   274,
     275,     0,   276,   277,     0,     0,     0,   278,     0,     0,
     279,   280,   281,     0,     0,   282,     0,     0,   283,   284,
     626,     0,     0,     0,     0,   285,   286,     0,   287,     0,
     288,     0,   289,   290,     0,     0,     0,     0,     0,     0,
       0,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,     0,   307,   308,
     309,   310,     0,   311,   312,   313,   314,     0,   315,   316,
       0,     0,     0,     0,   317,   318,   319,   320,   321,   322,
       0,     0,   323,   324,     0,   325,     0,   326,     0,   327,
     328,   329,   330,   331,   332,   333,   334,   335,     0,     0,
     336,   337,     0,     0,   338,   339,   340,   341,     0,     0,
       0,   342,   343,     0,     0,     0,     0,   344,   345,   346,
       0,   347,   348,   349,   350,     0,   351,   352,     0,     0,
       0,     0,     0,     0,     0,     0,   353,   354,   355,     0,
       0,   356,     0,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,     0,     0,   369,   370,   371,
       0,   372,     0,   373,   374,   375,   376,   377,     0,   378,
     379,   380,     0,     0,   381,     0,     0,     0,   382,   383,
     384,   385,   386,     0,     0,   387,   388,   389,   390,   391,
       0,   392,   393,     0,   394,   395,   396,     0,     0,   397,
       0,   398,     0,   399,   400,     0,   401,   402,     0,     0,
       0,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,     0,   413,   414,     0,     0,     0,   415,   416,   417,
     418,     0,     0,     0,   419,     0,     0,     0,   420,     0,
     421,   422,   423,   424,   425,   426,     0,   427,   428,   429,
     430,   431,   432,     0,     0,     0,     0,     0,     0,   433,
     434,     0,   435,     0,     0,   436,     0,     0,   437,   438,
     439,     0,     0,   440,   441,     0,   442,   443,   444,   445,
     446,   447,     0,     0,   448,   449,   450,   451,     0,   452,
     453,     0,   454,     0,   455,   456,   457,   458,     0,   136,
     459,   460,     0,   461,   462,   463,   464,     0,     0,     0,
       0,     0,   465,   466,   467,     0,     0,     0,   468,   469,
     470,   471,     0,   472,   473,     0,   474,   475,     0,   476,
     477,     0,     0,   478,     0,     0,   479,     0,   480,     0,
     481,   482,   483,     0,     0,     0,     0,     0,     0,   484,
       0,     0,   485,     0,     0,     0,   486,   487,   488,   489,
     490,   491,     0,     0,     0,     0,     0,     0,   492,   493,
       0,   494,   495,   496,     0,     0,   497,     0,   139,     0,
     140,   141,   142,   143,   144,     0,     0,   145,     0,     0,
       0,   146,     0,     0,   147,  1728,   148,   149,   150,   151,
     152,   153,   154,   155,     0,   156,     0,     0,     0,   157,
       0,     0,     0,   158,     0,     0,   159,   160,   161,     0,
     162,     0,   163,   164,     0,     0,   165,     0,     0,   166,
     167,     0,   168,   919,   920,   170,   171,     0,   172,   173,
     174,   175,   176,   177,   178,     0,   179,   180,   181,   182,
     183,   184,   185,     0,   186,   187,   188,   189,   190,   191,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   199,
     200,     0,   201,     0,     0,   202,     0,     0,   203,     0,
       0,   204,     0,   205,     0,     0,     0,   206,   207,   208,
       0,     0,   209,     0,     0,     0,     0,   210,   211,     0,
       0,     0,   921,   212,     0,   213,     0,     0,     0,   214,
       0,   215,   216,   217,   218,     0,     0,     0,   219,     0,
       0,   220,   221,   222,     0,     0,     0,   223,     0,   224,
     225,     0,   226,   227,   228,     0,     0,   229,   230,     0,
     231,   232,   233,   234,   235,   236,     0,     0,   237,   238,
     239,     0,     0,   240,   241,     0,   242,   243,   244,     0,
       0,   245,     0,     0,     0,   246,     0,   247,     0,   248,
       0,   249,   250,   251,   252,   253,   922,     0,   255,     0,
       0,     0,   256,   257,   258,     0,   259,     0,     0,     0,
     260,   261,     0,     0,     0,   262,   263,   264,   265,     0,
       0,   266,   267,   268,     0,   269,     0,   270,     0,     0,
       0,     0,   271,   272,     0,     0,     0,   273,     0,   274,
     275,     0,   276,   277,     0,     0,     0,   278,     0,     0,
     279,   280,   281,     0,     0,   282,     0,     0,   283,   284,
       0,     0,     0,     0,     0,   285,   286,     0,   923,     0,
     288,     0,   289,   290,     0,     0,     0,     0,     0,     0,
       0,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,     0,   307,   308,
     309,   310,     0,   311,   312,   313,   314,     0,   315,   316,
       0,     0,     0,     0,   317,   318,   319,   320,   321,   322,
       0,     0,   323,   324,     0,   325,     0,   326,     0,   327,
     328,   329,   330,   331,   332,   924,   334,   335,     0,     0,
     336,   337,     0,     0,   338,   339,   340,   341,     0,     0,
       0,   342,   343,     0,     0,     0,     0,   344,   345,   346,
       0,   347,   348,   349,   350,     0,   351,   352,     0,     0,
       0,     0,     0,     0,     0,     0,   353,   354,   355,     0,
       0,   356,     0,   357,   358,   359,   360,   925,   362,   363,
     364,   365,   366,   367,   368,     0,     0,   369,   370,   371,
       0,   372,     0,   373,   374,   375,   376,   377,     0,   378,
     379,   380,     0,     0,   381,     0,     0,     0,   382,   383,
     384,   385,   386,     0,     0,   387,   388,   389,   390,   391,
       0,   392,   393,     0,   394,   395,   396,     0,     0,   397,
       0,   398,     0,   399,   400,     0,   401,   402,     0,     0,
       0,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,     0,   413,   414,     0,     0,     0,   415,   416,   926,
     418,     0,     0,     0,   419,     0,     0,     0,   420,     0,
     421,   422,   423,   424,   425,   426,     0,   427,   428,   429,
     430,   431,   432,     0,     0,     0,     0,     0,     0,   433,
     434,     0,   435,     0,     0,   436,     0,     0,   437,   438,
     439,     0,     0,   440,   441,     0,   442,   443,   444,   445,
     446,   447,     0,     0,   448,   449,   450,   451,     0,   452,
     453,     0,   454,     0,   455,   456,   457,   458,     0,     0,
     459,   460,     0,   461,   462,   463,   464,     0,     0,     0,
       0,     0,   465,   466,   467,     0,     0,     0,   468,   469,
     470,   471,     0,   472,   473,     0,   474,   475,     0,   476,
     477,     0,     0,   478,     0,     0,   479,     0,   480,     0,
     481,   482,   483,     0,     0,     0,     0,     0,     0,   484,
       0,     0,   485,     0,     0,     0,   486,   487,   488,   489,
     490,   491,     0,     0,     0,     0,     0,     0,   492,   493,
       0,   494,   495,   496,     0,     0,   497,     0,   139,     0,
     140,   141,   142,   143,   144,     0,     0,   145,     0,     0,
       0,   146,     0,     0,   147,   928,   148,   149,   150,   151,
     152,   153,   154,   155,     0,   156,     0,     0,     0,   157,
       0,     0,     0,   158,     0,     0,   159,   160,   161,     0,
     162,     0,   163,   164,     0,     0,   165,     0,     0,   166,
     167,     0,   168,   169,     0,   170,   171,     0,   172,   173,
     174,   175,   176,   177,   178,     0,   179,   180,   181,   182,
     183,   184,   185,     0,   186,   187,   188,   189,   190,   191,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   199,
     200,     0,   201,     0,     0,   202,     0,     0,   203,     0,
       0,   204,     0,   205,     0,     0,     0,   206,   207,   208,
       0,     0,   209,     0,     0,     0,     0,   210,   211,     0,
       0,     0,     0,   212,     0,   213,     0,     0,     0,   214,
       0,   215,   216,   217,   218,     0,     0,     0,   219,     0,
       0,   220,   221,   222,     0,     0,     0,   223,     0,   224,
     225,     0,   226,   227,   228,     0,     0,   229,   230,     0,
     231,   232,   233,   234,   235,   236,     0,     0,   237,   238,
     239,     0,     0,   240,   241,     0,   242,   243,   244,     0,
       0,   245,     0,     0,     0,   246,     0,   247,     0,   248,
       0,   249,   250,   251,   252,   253,   254,     0,   255,     0,
       0,     0,   256,   257,   258,     0,   259,     0,     0,     0,
     260,   261,     0,     0,     0,   262,   263,   264,   265,     0,
       0,   266,   267,   268,     0,   269,     0,   270,     0,     0,
       0,     0,   271,   272,     0,     0,     0,   273,     0,   274,
     275,     0,   276,   277,     0,     0,     0,   278,     0,     0,
     279,   280,   281,     0,     0,   282,     0,     0,   283,   284,
     626,     0,     0,     0,     0,   285,   286,     0,   287,     0,
     288,     0,   289,   290,     0,     0,     0,     0,     0,     0,
       0,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,     0,   307,   308,
     309,   310,     0,   311,   312,   313,   314,     0,   315,   316,
       0,     0,     0,     0,   317,   318,   319,   320,   321,   322,
       0,     0,   323,   324,     0,   325,     0,   326,     0,   327,
     328,   329,   330,   331,   332,   333,   334,   335,     0,     0,
     336,   337,     0,     0,   338,   339,   340,   341,     0,     0,
       0,   342,   343,     0,     0,     0,     0,   344,   345,   346,
       0,   347,   348,   349,   350,     0,   351,   352,     0,     0,
       0,     0,     0,     0,     0,     0,   353,   354,   355,     0,
       0,   356,     0,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,     0,     0,   369,   370,   371,
       0,   372,     0,   373,   374,   375,   376,   377,     0,   378,
     379,   380,     0,     0,   381,     0,     0,     0,   382,   383,
     384,   385,   386,     0,     0,   387,   388,   389,   390,   391,
       0,   392,   393,     0,   394,   395,   396,     0,     0,   397,
       0,   398,     0,   399,   400,     0,   401,   402,     0,     0,
       0,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,     0,   413,   414,     0,     0,     0,   415,   416,   417,
     418,     0,     0,     0,   419,     0,     0,     0,   420,     0,
     421,   422,   423,   424,   425,   426,     0,   427,   428,   429,
     430,   431,   432,     0,     0,     0,     0,     0,     0,   433,
     434,     0,   435,     0,     0,   436,     0,     0,   437,   438,
     439,     0,     0,   440,   441,     0,   442,   443,   444,   445,
     446,   447,     0,     0,   448,   449,   450,   451,     0,   452,
     453,     0,   454,     0,   455,   456,   457,   458,     0,   136,
     459,   460,     0,   461,   462,   463,   464,     0,     0,     0,
       0,     0,   465,   466,   467,     0,     0,     0,   468,   469,
     470,   471,     0,   472,   473,     0,   474,   475,     0,   476,
     477,     0,     0,   478,     0,     0,   479,     0,   480,     0,
     481,   482,   483,     0,     0,     0,     0,     0,     0,   484,
       0,     0,   485,     0,     0,     0,   486,   487,   488,   489,
     490,   491,     0,     0,     0,     0,     0,     0,   492,   493,
       0,   494,   495,   496,     0,     0,   497,     0,   139,     0,
     140,   141,   142,   143,   144,     0,     0,   145,     0,     0,
       0,   146,     0,     0,     0,  3554,   148,   149,   150,   151,
     152,   153,   154,     0,     0,  -337,     0,     0,     0,   157,
       0,     0,     0,   158,     0,     0,   159,   160,   161,     0,
     162,     0,     0,     0,     0,     0,   165,  3985,     0,   166,
     167,     0,   168,     0,     0,     0,     0,     0,   172,   173,
     174,   175,  3986,   177,   178,     0,   179,   180,     0,     0,
       0,     0,     0,     0,   186,     0,   188,     0,   190,   191,
     192,   193,     0,   194,   195,     0,   196,   197,   198,     0,
     200,     0,   201,     0,     0,   202,     0,     0,   203,     0,
       0,   204,     0,   205,     0,     0,     0,   206,   207,   208,
       0,     0,   209,     0,     0,     0,     0,   210,     0,     0,
       0,     0,     0,   212,     0,   213,     0,     0,     0,   214,
       0,   215,   216,   217,   218,     0,     0,     0,     0,     0,
       0,   220,   221,   222,     0,     0,     0,   223,     0,     0,
     225,     0,   226,   227,   228,     0,     0,   229,   230,     0,
     231,   232,   233,   234,     0,     0,     0,     0,   237,   238,
     239,     0,     0,   240,   241,  3987,   242,   243,   244,     0,
       0,     0,     0,     0,     0,   246,     0,   247,     0,   248,
       0,   249,   250,   251,   252,   253,   254,     0,   255,     0,
       0,     0,     0,   257,   258,     0,     0,     0,     0,     0,
       0,   261,     0,     0,     0,   262,   263,   264,   265,  3988,
       0,   266,   267,   268,     0,   269,     0,   270,     0,     0,
       0,     0,   271,     0,     0,     0,     0,   273,     0,   274,
     275,     0,   276,   277,  3989,     0,     0,   278,     0,     0,
       0,   280,   281,     0,     0,   282,  3990,     0,   283,   284,
       0,     0,     0,     0,     0,   285,   286,     0,   287,     0,
     288,     0,   289,   290,     0,     0,     0,     0,  -292,     0,
       0,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,     0,   307,   308,
     309,   310,     0,   311,   312,   313,   314,     0,   315,   316,
       0,     0,     0,     0,   317,   318,   319,   320,   321,   322,
       0,     0,   323,   324,     0,   325,     0,   326,     0,   327,
     328,   329,   330,   331,   332,   333,   334,   335,     0,     0,
     336,   337,     0,     0,   338,   339,   340,   341,     0,     0,
       0,     0,   343,     0,     0,     0,     0,   344,   345,   346,
       0,   347,   348,   349,  3991,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   354,   355,     0,
       0,     0,     0,   357,   358,   359,     0,   361,   362,   363,
     364,   365,   366,   367,     0,     0,     0,     0,   370,   371,
       0,   372,     0,   373,   374,   375,   376,   377,     0,   378,
     379,   380,     0,     0,   381,     0,     0,     0,   382,   383,
     384,   385,   386,     0,     0,   387,   388,   389,   390,   391,
       0,   392,     0,     0,   394,     0,   396,  -292,     0,   397,
       0,     0,     0,   399,     0,     0,   401,   402,  3992,     0,
       0,     0,   404,   405,   406,   407,   408,   409,     0,   411,
     412,     0,   413,     0,     0,     0,     0,   415,   416,   417,
       0,     0,     0,     0,   419,     0,     0,     0,   420,     0,
       0,   422,     0,     0,   425,   426,     0,   427,     0,   429,
       0,   431,   432,     0,     0,     0,     0,     0,     0,   433,
     434,     0,   435,     0,     0,   436,     0,     0,   437,     0,
     439,     0,     0,     0,   441,     0,   442,   443,   444,   445,
     446,   447,     0,     0,   448,   449,   450,   451,     0,   452,
     453,     0,   454,     0,   455,   456,   457,   458,     0,     0,
     459,   460,     0,   461,   462,   463,   464,     0,     0,     0,
       0,     0,   465,   466,   467,     0,     0,     0,     0,   469,
     470,   471,     0,   472,   473,     0,   474,   475,     0,     0,
       0,     0,     0,   478,     0,     0,   479,     0,     0,     0,
     481,   482,   483,     0,     0,     0,     0,     0,     0,   484,
       0,     0,   485,     0,     0,     0,   486,   487,   488,   489,
     490,   491,     0,     0,  -292,     0,     0,     0,   492,     0,
       0,   494,     0,   496,     0,   139,   497,   140,   141,   142,
     143,   144,     0,     0,   145,     0,     0,     0,   146,     0,
    4553,   147,     0,   148,   149,   150,   151,   152,   153,   154,
     155,     0,   156,     0,     0,     0,   157,     0,     0,     0,
     158,     0,     0,   159,   160,   161,     0,   162,     0,   163,
     164,     0,     0,   165,     0,     0,   166,   167,     0,   168,
     169,     0,   170,   171,     0,   172,   173,   174,   175,   176,
     177,   178,     0,   179,   180,   181,   182,   183,   184,   185,
       0,   186,   187,   188,   189,   190,   191,   192,   193,     0,
     194,   195,     0,   196,   197,   198,   199,   200,     0,   201,
       0,     0,   202,     0,     0,   203,     0,  1020,   204,     0,
     205,     0,     0,     0,   206,   207,   208,     0,     0,   209,
       0,     0,     0,     0,   210,   211,     0,     0,     0,     0,
     212,     0,   213,     0,     0,     0,   214,     0,   215,   216,
     217,   218,     0,     0,     0,   219,     0,     0,   220,   221,
     222,     0,     0,     0,   223,     0,   224,   225,     0,   226,
     227,   228,     0,     0,   229,   230,     0,   231,   232,   233,
     234,   235,   236,     0,     0,   237,   238,   239,     0,     0,
     240,   241,     0,   242,   243,   244,     0,     0,   245,     0,
       0,     0,   246,     0,   247,     0,   248,     0,   249,   250,
     251,   252,   253,   254,     0,   255,     0,     0,     0,   256,
     257,   258,     0,   259,     0,     0,     0,   260,   261,     0,
       0,     0,   262,   263,   264,   265,     0,     0,   266,   267,
     268,     0,   269,     0,   270,     0,     0,     0,     0,   271,
     272,     0,     0,     0,   273,     0,   274,   275,     0,   276,
     277,     0,     0,     0,   278,     0,     0,   279,   280,   281,
       0,     0,   282,     0,     0,   283,   284,   626,     0,     0,
       0,     0,   285,   286,     0,   287,     0,   288,     0,   289,
     290,     0,     0,     0,     0,     0,     0,     0,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,     0,   307,   308,   309,   310,     0,
     311,   312,   313,   314,     0,   315,   316,     0,     0,     0,
       0,   317,   318,   319,   320,   321,   322,     0,     0,   323,
     324,     0,   325,     0,   326,     0,   327,   328,   329,   330,
     331,   332,   333,   334,   335,     0,     0,   336,   337,     0,
       0,   338,   339,   340,   341,     0,     0,     0,   342,   343,
       0,     0,     0,     0,   344,   345,   346,     0,   347,   348,
     349,   350,     0,   351,   352,     0,     0,     0,     0,     0,
       0,     0,     0,   353,   354,   355,     0,     0,   356,     0,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,     0,     0,   369,   370,   371,     0,   372,     0,
     373,   374,   375,   376,   377,     0,   378,   379,   380,     0,
       0,   381,     0,     0,     0,   382,   383,   384,   385,   386,
       0,     0,   387,   388,   389,   390,   391,     0,   392,   393,
       0,   394,   395,   396,     0,     0,   397,     0,   398,     0,
     399,   400,     0,   401,   402,     0,     0,     0,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,     0,   413,
     414,     0,     0,     0,   415,   416,   417,   418,     0,     0,
       0,   419,     0,     0,     0,   420,     0,   421,   422,   423,
     424,   425,   426,     0,   427,   428,   429,   430,   431,   432,
       0,     0,     0,     0,     0,     0,   433,   434,     0,   435,
       0,     0,   436,     0,     0,   437,   438,   439,     0,     0,
     440,   441,     0,   442,   443,   444,   445,   446,   447,     0,
       0,   448,   449,   450,   451,     0,   452,   453,     0,   454,
       0,   455,   456,   457,   458,     0,   136,   459,   460,     0,
     461,   462,   463,   464,     0,     0,     0,     0,     0,   465,
     466,   467,     0,     0,     0,   468,   469,   470,   471,     0,
     472,   473,     0,   474,   475,     0,   476,   477,     0,     0,
     478,     0,     0,   479,     0,   480,     0,   481,   482,   483,
       0,     0,     0,     0,     0,     0,   484,     0,     0,   485,
       0,     0,     0,   486,   487,   488,   489,   490,   491,     0,
       0,     0,     0,     0,     0,   492,   493,     0,   494,   495,
     496,     0,     0,   497,   139,     0,   140,   141,   142,   143,
     144,     0,     0,   145,     0,  1198,     0,   146,     0,     0,
     147,     0,   148,   149,   150,   151,   152,   153,   154,   155,
       0,   156,     0,     0,     0,   157,     0,     0,     0,   158,
       0,     0,   159,   160,   161,     0,   162,     0,   163,   164,
       0,     0,   165,     0,     0,   166,   167,     0,   168,   169,
       0,   170,   171,     0,   172,   173,   174,   175,   176,   177,
     178,     0,   179,   180,   181,   182,   183,   184,   185,     0,
     186,   187,   188,   189,   190,   191,   192,   193,     0,   194,
     195,     0,   196,   197,   198,   199,   200,     0,   201,     0,
       0,   202,     0,     0,   203,     0,     0,   204,     0,   205,
       0,     0,     0,   206,   207,   208,     0,     0,   209,     0,
       0,     0,     0,   210,   211,     0,     0,     0,     0,   212,
       0,   213,     0,     0,     0,   214,     0,   215,   216,   217,
     218,     0,     0,     0,   219,     0,     0,   220,   221,   222,
       0,     0,     0,   223,     0,   224,   225,     0,   226,   227,
     228,     0,     0,   229,   230,     0,   231,   232,   233,   234,
     235,   236,     0,     0,   237,   238,   239,     0,     0,   240,
     241,     0,   242,   243,   244,     0,     0,   245,     0,     0,
       0,   246,     0,   247,     0,   248,     0,   249,   250,   251,
     252,   253,   254,     0,   255,     0,     0,     0,   256,   257,
     258,     0,   259,     0,     0,     0,   260,   261,     0,     0,
       0,   262,   263,   264,   265,     0,     0,   266,   267,   268,
       0,   269,     0,   270,     0,     0,     0,     0,   271,   272,
       0,     0,     0,   273,     0,   274,   275,     0,   276,   277,
       0,     0,     0,   278,     0,     0,   279,   280,   281,     0,
       0,   282,     0,     0,   283,   284,     0,     0,     0,     0,
       0,   285,   286,     0,   287,     0,   288,     0,   289,   290,
       0,     0,     0,     0,     0,     0,     0,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,     0,   307,   308,   309,   310,     0,   311,
     312,   313,   314,     0,   315,   316,     0,     0,     0,     0,
     317,   318,   319,   320,   321,   322,     0,     0,   323,   324,
       0,   325,     0,   326,     0,   327,   328,   329,   330,   331,
     332,   333,   334,   335,     0,     0,   336,   337,     0,     0,
     338,   339,   340,   341,     0,     0,     0,   342,   343,     0,
       0,     0,     0,   344,   345,   346,     0,   347,   348,   349,
     350,     0,   351,   352,     0,     0,     0,     0,     0,     0,
       0,     0,   353,   354,   355,     0,     0,   356,     0,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,     0,     0,   369,   370,   371,     0,   372,     0,   373,
     374,   375,   376,   377,     0,   378,   379,   380,     0,     0,
     381,     0,     0,     0,   382,   383,   384,   385,   386,     0,
       0,   387,   388,   389,   390,   391,     0,   392,   393,     0,
     394,   395,   396,     0,     0,   397,     0,   398,     0,   399,
     400,     0,   401,   402,     0,     0,     0,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,     0,   413,   414,
       0,     0,     0,   415,   416,   417,   418,     0,     0,     0,
     419,     0,     0,     0,   420,     0,   421,   422,   423,   424,
     425,   426,     0,   427,   428,   429,   430,   431,   432,     0,
       0,     0,     0,     0,     0,   433,   434,     0,   435,     0,
       0,   436,     0,     0,   437,   438,   439,     0,     0,   440,
     441,     0,   442,   443,   444,   445,   446,   447,     0,     0,
     448,   449,   450,   451,     0,   452,   453,     0,   454,     0,
     455,   456,   457,   458,     0,     0,   459,   460,     0,   461,
     462,   463,   464,     0,     0,     0,     0,     0,   465,   466,
     467,     0,     0,     0,   468,   469,   470,   471,     0,   472,
     473,     0,   474,   475,     0,   476,   477,     0,     0,   478,
       0,     0,   479,     0,   480,     0,   481,   482,   483,     0,
       0,     0,     0,     0,     0,   484,     0,     0,   485,     0,
       0,     0,   486,   487,   488,   489,   490,   491,     0,     0,
       0,     0,     0,     0,   492,   493,     0,   494,   495,   496,
       0,   139,   497,   140,   141,   142,   143,   144,     0,  2176,
     145,     0,     0,     0,   146,     0,     0,   147,     0,   148,
     149,   150,   151,   152,   153,   154,   155,     0,   156,     0,
       0,     0,   157,     0,     0,     0,   158,     0,     0,   159,
     160,   161,     0,   162,     0,   163,   164,     0,     0,   165,
       0,     0,   166,   167,     0,   168,   169,     0,   170,   171,
       0,   172,   173,   174,   175,   176,   177,   178,     0,   179,
     180,   181,   182,   183,   184,   185,     0,   186,   187,   188,
     189,   190,   191,   192,   193,     0,   194,   195,     0,   196,
     197,   198,   199,   200,     0,   201,     0,     0,   202,     0,
       0,   203,     0,     0,   204,     0,   205,     0,     0,     0,
     206,   207,   208,     0,     0,   209,     0,     0,     0,     0,
     210,   211,     0,     0,     0,     0,   212,     0,   213,     0,
       0,     0,   214,     0,   215,   216,   217,   218,     0,     0,
       0,   219,     0,     0,   220,   221,   222,     0,     0,     0,
     223,     0,   224,   225,     0,   226,   227,   228,     0,     0,
     229,   230,     0,   231,   232,   233,   234,   235,   236,     0,
       0,   237,   238,   239,     0,     0,   240,   241,     0,   242,
     243,   244,     0,     0,   245,     0,     0,     0,   246,     0,
     247,     0,   248,     0,   249,   250,   251,   252,   253,   254,
       0,   255,     0,     0,     0,   256,   257,   258,     0,   259,
       0,     0,     0,   260,   261,     0,     0,     0,   262,   263,
     264,   265,     0,     0,   266,   267,   268,     0,   269,     0,
     270,     0,     0,     0,     0,   271,   272,     0,     0,     0,
     273,     0,   274,   275,     0,   276,   277,     0,     0,     0,
     278,     0,     0,   279,   280,   281,     0,     0,   282,     0,
       0,   283,   284,     0,     0,     0,     0,     0,   285,   286,
       0,   287,     0,   288,     0,   289,   290,     0,     0,     0,
       0,     0,     0,     0,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
       0,   307,   308,   309,   310,     0,   311,   312,   313,   314,
       0,   315,   316,     0,     0,     0,     0,   317,   318,   319,
     320,   321,   322,     0,     0,   323,   324,     0,   325,     0,
     326,     0,   327,   328,   329,   330,   331,   332,   333,   334,
     335,     0,     0,   336,   337,     0,     0,   338,   339,   340,
     341,     0,     0,     0,   342,   343,     0,     0,     0,     0,
     344,   345,   346,     0,   347,   348,   349,   350,     0,   351,
     352,     0,     0,     0,     0,     0,     0,     0,     0,   353,
     354,   355,     0,     0,   356,     0,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,     0,     0,
     369,   370,   371,     0,   372,     0,   373,   374,   375,   376,
     377,     0,   378,   379,   380,     0,     0,   381,     0,     0,
       0,   382,   383,   384,   385,   386,     0,     0,   387,   388,
     389,   390,   391,     0,   392,   393,     0,   394,   395,   396,
       0,     0,   397,     0,   398,     0,   399,   400,     0,   401,
     402,     0,     0,     0,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,     0,   413,   414,     0,     0,     0,
     415,   416,   417,   418,     0,     0,     0,   419,     0,     0,
       0,   420,     0,   421,   422,   423,   424,   425,   426,     0,
     427,   428,   429,   430,   431,   432,     0,     0,     0,     0,
       0,     0,   433,   434,     0,   435,     0,     0,   436,     0,
       0,   437,   438,   439,     0,     0,   440,   441,     0,   442,
     443,   444,   445,   446,   447,     0,     0,   448,   449,   450,
     451,     0,   452,   453,     0,   454,     0,   455,   456,   457,
     458,     0,     0,   459,   460,     0,   461,   462,   463,   464,
       0,     0,     0,     0,     0,   465,   466,   467,     0,     0,
       0,   468,   469,   470,   471,     0,   472,   473,     0,   474,
     475,     0,   476,   477,     0,     0,   478,     0,     0,   479,
       0,   480,     0,   481,   482,   483,     0,     0,     0,     0,
       0,     0,   484,     0,     0,   485,     0,     0,     0,   486,
     487,   488,   489,   490,   491,     0,     0,     0,     0,     0,
       0,   492,   493,     0,   494,   495,   496,     0,   139,   497,
     140,   141,   142,   143,   144,     0,  2859,   145,     0,     0,
       0,   146,     0,     0,   147,     0,   148,   149,   150,   151,
     152,   153,   154,   155,     0,   156,     0,     0,     0,   157,
       0,     0,     0,   158,     0,     0,   159,   160,   161,     0,
     162,     0,   163,   164,     0,     0,   165,     0,     0,   166,
     167,     0,   168,   169,     0,   170,   171,     0,   172,   173,
     174,   175,   176,   177,   178,     0,   179,   180,   181,   182,
     183,   184,   185,     0,   186,   187,   188,   189,   190,   191,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   199,
     200,     0,   201,     0,     0,   202,     0,     0,   203,     0,
       0,   204,     0,   205,     0,     0,     0,   206,   207,   208,
       0,     0,   209,     0,     0,     0,     0,   210,   211,     0,
       0,     0,     0,   212,     0,   213,     0,     0,     0,   214,
       0,   215,   216,   217,   218,     0,     0,     0,   219,     0,
       0,   220,   221,   222,     0,     0,     0,   223,     0,   224,
     225,     0,   226,   227,   228,     0,     0,   229,   230,     0,
     231,   232,   233,   234,   235,   236,     0,     0,   237,   238,
     239,     0,     0,   240,   241,     0,   242,   243,   244,     0,
       0,   245,     0,     0,     0,   246,     0,   247,     0,   248,
       0,   249,   250,   251,   252,   253,   254,     0,   255,     0,
       0,     0,   256,   257,   258,     0,   259,     0,     0,     0,
     260,   261,     0,     0,     0,   262,   263,   264,   265,     0,
       0,   266,   267,   268,     0,   269,     0,   270,     0,     0,
       0,     0,   271,   272,     0,     0,     0,   273,     0,   274,
     275,     0,   276,   277,     0,     0,     0,   278,     0,     0,
     279,   280,   281,     0,     0,   282,     0,     0,   283,   284,
       0,     0,     0,     0,     0,   285,   286,     0,   287,     0,
     288,     0,   289,   290,     0,     0,     0,     0,     0,     0,
       0,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,     0,   307,   308,
     309,   310,     0,   311,   312,   313,   314,     0,   315,   316,
       0,     0,     0,     0,   317,   318,   319,   320,   321,   322,
       0,     0,   323,   324,     0,   325,     0,   326,     0,   327,
     328,   329,   330,   331,   332,   333,   334,   335,     0,     0,
     336,   337,     0,     0,   338,   339,   340,   341,     0,     0,
       0,   342,   343,     0,     0,     0,     0,   344,   345,   346,
       0,   347,   348,   349,   350,     0,   351,   352,     0,     0,
       0,     0,     0,     0,     0,     0,   353,   354,   355,     0,
       0,   356,     0,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,     0,     0,   369,   370,   371,
       0,   372,     0,   373,   374,   375,   376,   377,     0,   378,
     379,   380,     0,     0,   381,     0,     0,     0,   382,   383,
     384,   385,   386,     0,     0,   387,   388,   389,   390,   391,
       0,   392,   393,     0,   394,   395,   396,     0,     0,   397,
       0,   398,     0,   399,   400,     0,   401,   402,     0,     0,
       0,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,     0,   413,   414,     0,     0,     0,   415,   416,   417,
     418,     0,     0,     0,   419,     0,     0,     0,   420,     0,
     421,   422,   423,   424,   425,   426,     0,   427,   428,   429,
     430,   431,   432,     0,     0,     0,     0,     0,     0,   433,
     434,     0,   435,     0,     0,   436,     0,     0,   437,   438,
     439,     0,     0,   440,   441,     0,   442,   443,   444,   445,
     446,   447,     0,     0,   448,   449,   450,   451,     0,   452,
     453,     0,   454,     0,   455,   456,   457,   458,     0,     0,
     459,   460,     0,   461,   462,   463,   464,     0,     0,     0,
       0,     0,   465,   466,   467,     0,     0,     0,   468,   469,
     470,   471,     0,   472,   473,     0,   474,   475,     0,   476,
     477,     0,     0,   478,     0,     0,   479,     0,   480,     0,
     481,   482,   483,     0,     0,     0,     0,     0,     0,   484,
       0,     0,   485,     0,     0,     0,   486,   487,   488,   489,
     490,   491,     0,     0,     0,     0,     0,     0,   492,   493,
       0,   494,   495,   496,     0,   139,   497,   140,   141,   142,
     143,   144,     0,  3220,   145,     0,     0,     0,   146,     0,
       0,   147,     0,   148,   149,   150,   151,   152,   153,   154,
     155,     0,   156,     0,     0,     0,   157,     0,     0,     0,
     158,     0,     0,   159,   160,   161,     0,   162,     0,   163,
     164,     0,     0,   165,     0,     0,   166,   167,     0,   168,
     169,     0,   170,   171,     0,   172,   173,   174,   175,   176,
     177,   178,     0,   179,   180,   181,   182,   183,   184,   185,
       0,   186,   187,   188,   189,   190,   191,   192,   193,     0,
     194,   195,     0,   196,   197,   198,   199,   200,     0,   201,
       0,     0,   202,     0,     0,   203,     0,     0,   204,     0,
     205,     0,     0,     0,   206,   207,   208,     0,     0,   209,
       0,     0,     0,     0,   210,   211,     0,     0,     0,     0,
     212,     0,   213,     0,     0,     0,   214,     0,   215,   216,
     217,   218,     0,     0,     0,   219,     0,     0,   220,   221,
     222,     0,     0,     0,   223,     0,   224,   225,     0,   226,
     227,   228,     0,     0,   229,   230,     0,   231,   232,   233,
     234,   235,   236,     0,     0,   237,   238,   239,     0,     0,
     240,   241,     0,   242,   243,   244,     0,     0,   245,     0,
       0,     0,   246,     0,   247,     0,   248,     0,   249,   250,
     251,   252,   253,   254,     0,   255,     0,     0,     0,   256,
     257,   258,     0,   259,     0,     0,     0,   260,   261,     0,
       0,     0,   262,   263,   264,   265,     0,     0,   266,   267,
     268,     0,   269,     0,   270,     0,     0,     0,     0,   271,
     272,     0,     0,     0,   273,     0,   274,   275,     0,   276,
     277,     0,     0,     0,   278,     0,     0,   279,   280,   281,
       0,     0,   282,     0,     0,   283,   284,     0,     0,     0,
       0,     0,   285,   286,     0,   287,     0,   288,     0,   289,
     290,     0,     0,     0,     0,     0,     0,     0,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,     0,   307,   308,   309,   310,     0,
     311,   312,   313,   314,     0,   315,   316,     0,     0,     0,
       0,   317,   318,   319,   320,   321,   322,     0,     0,   323,
     324,     0,   325,     0,   326,     0,   327,   328,   329,   330,
     331,   332,   333,   334,   335,     0,     0,   336,   337,     0,
       0,   338,   339,   340,   341,     0,     0,     0,   342,   343,
       0,     0,     0,     0,   344,   345,   346,     0,   347,   348,
     349,   350,     0,   351,   352,     0,     0,     0,     0,     0,
       0,     0,     0,   353,   354,   355,     0,     0,   356,     0,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,     0,     0,   369,   370,   371,     0,   372,     0,
     373,   374,   375,   376,   377,     0,   378,   379,   380,     0,
       0,   381,     0,     0,     0,   382,   383,   384,   385,   386,
       0,     0,   387,   388,   389,   390,   391,     0,   392,   393,
       0,   394,   395,   396,     0,     0,   397,     0,   398,     0,
     399,   400,     0,   401,   402,     0,     0,     0,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,     0,   413,
     414,     0,     0,     0,   415,   416,   417,   418,     0,     0,
       0,   419,     0,     0,     0,   420,     0,   421,   422,   423,
     424,   425,   426,     0,   427,   428,   429,   430,   431,   432,
       0,     0,     0,     0,     0,     0,   433,   434,     0,   435,
       0,     0,   436,     0,     0,   437,   438,   439,     0,     0,
     440,   441,     0,   442,   443,   444,   445,   446,   447,     0,
       0,   448,   449,   450,   451,     0,   452,   453,     0,   454,
       0,   455,   456,   457,   458,     0,     0,   459,   460,     0,
     461,   462,   463,   464,     0,     0,     0,     0,     0,   465,
     466,   467,     0,     0,     0,   468,   469,   470,   471,     0,
     472,   473,     0,   474,   475,     0,   476,   477,     0,     0,
     478,     0,     0,   479,     0,   480,     0,   481,   482,   483,
       0,     0,     0,     0,     0,     0,   484,     0,     0,   485,
       0,     0,     0,   486,   487,   488,   489,   490,   491,     0,
       0,     0,     0,     0,     0,   492,   493,     0,   494,   495,
     496,     0,   139,   497,   140,   141,   142,   143,   144,     0,
    3559,   145,     0,     0,     0,   146,     0,     0,   147,     0,
     148,   149,   150,   151,   152,   153,   154,   155,     0,   156,
       0,     0,     0,   157,     0,     0,     0,   158,     0,     0,
     159,   160,   161,     0,   162,     0,   163,   164,     0,     0,
     165,     0,     0,   166,   167,     0,   168,   169,     0,   170,
     171,     0,   172,   173,   174,   175,   176,   177,   178,     0,
     179,   180,   181,   182,   183,   184,   185,     0,   186,   187,
     188,   189,   190,   191,   192,   193,     0,   194,   195,     0,
     196,   197,   198,   199,   200,     0,   201,     0,     0,   202,
       0,     0,   203,     0,     0,   204,     0,   205,     0,     0,
       0,   206,   207,   208,     0,     0,   209,     0,     0,     0,
       0,   210,   211,  2510,     0,     0,     0,   212,     0,   213,
       0,     0,     0,   214,     0,   215,   216,   217,   218,     0,
       0,     0,   219,     0,     0,   220,   221,   222,     0,     0,
       0,   223,     0,   224,   225,     0,   226,   227,   228,     0,
       0,   229,   230,     0,   231,   232,   233,   234,   235,   236,
       0,     0,   237,   238,   239,     0,     0,   240,   241,     0,
     242,   243,   244,  2511,     0,   245,     0,     0,     0,   246,
       0,   247,     0,   248,     0,   249,   250,   251,   252,   253,
     254,     0,   255,     0,     0,     0,   256,   257,   258,     0,
     259,  2512,     0,     0,   260,   261,     0,     0,     0,   262,
     263,   264,   265,     0,     0,   266,   267,   268,     0,   269,
       0,   270,     0,     0,     0,     0,   271,   272,     0,     0,
       0,   273,     0,   274,   275,     0,   276,   277,     0,     0,
       0,   278,     0,     0,   279,   280,   281,     0,     0,   282,
       0,     0,   283,   284,     0,     0,     0,     0,     0,   285,
     286,     0,   287,     0,   288,     0,   289,   290,     0,     0,
    2513,     0,     0,     0,     0,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,     0,   307,   308,   309,   310,     0,   311,   312,   313,
     314,     0,   315,   316,     0,     0,     0,     0,   317,   318,
     319,   320,   321,   322,     0,     0,   323,   324,     0,   325,
       0,   326,     0,   327,   328,   329,   330,   331,   332,   333,
     334,   335,     0,     0,   336,   337,     0,     0,   338,   339,
     340,   341,  1062,  1063,     0,   342,   343,     0,     0,  2514,
       0,   344,   345,   346,     0,   347,   348,   349,   350,     0,
     351,   352,     0,     0,     0,     0,     0,     0,     0,     0,
     353,   354,   355,     0,     0,   356,     0,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,     0,
       0,   369,   370,   371,     0,   372,     0,   373,   374,   375,
     376,   377,     0,   378,   379,   380,     0,     0,   381,     0,
       0,     0,   382,   383,   384,   385,   386,     0,     0,   387,
     388,   389,   390,   391,     0,   392,   393,     0,   394,   395,
     396,     0,     0,   397,     0,   398,     0,   399,   400,     0,
     401,   402,     0,     0,     0,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,     0,   413,   414,     0,     0,
       0,   415,   416,   417,   418,     0,     0,     0,   419,     0,
       0,     0,   420,     0,   421,   422,   423,   424,   425,   426,
       0,   427,   428,   429,   430,   431,   432,     0,     0,  4533,
     570,  4534,     0,   433,   434,     0,   435,     0,     0,   436,
       0,     0,   437,   438,   439,     0,     0,   440,   441,     0,
     442,   443,   444,   445,   446,   447,     0,     0,   448,   449,
     450,   451,     0,   452,   453,     0,   454,     0,   455,   456,
     457,   458,     0,     0,   459,   460,     0,   461,   462,   463,
     464,     0,     0,     0,     0,     0,   465,   466,   467,     0,
       0,     0,   468,   469,   470,   471,  2515,   472,   473,     0,
     474,   475,     0,   476,   477,     0,     0,   478,     0,     0,
     479,     0,   480,     0,   481,   482,   483,     0,     0,     0,
       0,     0,     0,   484,     0,     0,   485,     0,     0,     0,
     486,   487,   488,   489,   490,   491,     0,     0,     0,     0,
       0,     0,   492,   493,     0,   494,   495,   496,     0,   139,
     497,   140,   141,   142,   143,   144,     0,     0,   145,     0,
       0,     0,   146,     0,     0,   147,     0,   148,   149,   150,
     151,   152,   153,   154,   155,     0,   156,     0,     0,     0,
     157,     0,     0,     0,   158,     0,     0,   159,   160,   161,
       0,   162,     0,   163,   164,     0,     0,   165,     0,     0,
     166,   167,     0,   168,   169,     0,   170,   171,     0,   172,
     173,   174,   175,   176,   177,   178,     0,   179,   180,   181,
     182,   183,   184,   185,     0,   186,   187,   188,   189,   190,
     191,   192,   193,     0,   194,   195,     0,   196,   197,   198,
     199,   200,     0,   201,     0,     0,   202,     0,     0,   203,
       0,     0,   204,     0,   205,     0,     0,     0,   206,   207,
     208,     0,     0,   209,     0,     0,     0,     0,   210,   211,
    1616,     0,     0,  3030,   212,     0,   213,     0,     0,     0,
     214,     0,   215,   216,   217,   218,     0,     0,     0,   219,
       0,     0,   220,   221,   222,     0,     0,     0,   223,     0,
     224,   225,     0,   226,   227,   228,     0,     0,   229,   230,
       0,   231,   232,   233,   234,   235,   236,     0,     0,   237,
     238,   239,     0,     0,   240,   241,     0,   242,   243,   244,
    1617,     0,   245,     0,     0,     0,   246,     0,   247,     0,
     248,     0,   249,   250,   251,   252,   253,   254,     0,   255,
       0,     0,     0,   256,   257,   258,     0,   259,  3031,     0,
       0,   260,   261,     0,     0,     0,   262,   263,   264,   265,
       0,     0,   266,   267,   268,     0,   269,     0,   270,     0,
       0,     0,     0,   271,   272,     0,     0,     0,   273,     0,
     274,   275,     0,   276,   277,     0,     0,     0,   278,     0,
       0,   279,   280,   281,     0,     0,   282,     0,     0,   283,
     284,     0,     0,     0,     0,     0,   285,   286,     0,   287,
       0,   288,     0,   289,   290,     0,     0,  3032,     0,     0,
       0,     0,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,     0,   307,
     308,   309,   310,     0,   311,   312,   313,   314,     0,   315,
     316,     0,     0,     0,     0,   317,   318,   319,   320,   321,
     322,     0,     0,   323,   324,     0,   325,     0,   326,     0,
     327,   328,   329,   330,   331,   332,   333,   334,   335,     0,
       0,   336,   337,     0,     0,   338,   339,   340,   341,     0,
       0,     0,   342,   343,     0,     0,  3033,     0,   344,   345,
     346,     0,   347,   348,   349,   350,     0,   351,   352,     0,
       0,     0,     0,     0,     0,     0,     0,   353,   354,   355,
       0,     0,   356,     0,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,     0,     0,   369,   370,
     371,     0,   372,     0,   373,   374,   375,   376,   377,     0,
     378,   379,   380,     0,     0,   381,     0,     0,     0,   382,
     383,   384,   385,   386,     0,     0,   387,   388,   389,   390,
     391,     0,   392,   393,     0,   394,   395,   396,     0,     0,
     397,     0,   398,     0,   399,   400,     0,   401,   402,     0,
       0,     0,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,     0,   413,   414,     0,     0,     0,   415,   416,
     417,   418,     0,     0,     0,   419,     0,     0,     0,   420,
       0,   421,   422,   423,   424,   425,   426,     0,   427,   428,
     429,   430,   431,   432,     0,     0,     0,     0,     0,     0,
     433,   434,     0,   435,     0,     0,   436,     0,     0,   437,
     438,   439,     0,     0,   440,   441,     0,   442,   443,   444,
     445,   446,   447,     0,     0,   448,   449,   450,   451,     0,
     452,   453,     0,   454,     0,   455,   456,   457,   458,     0,
     136,   459,   460,     0,   461,   462,   463,   464,     0,     0,
       0,     0,     0,   465,   466,   467,     0,     0,     0,   468,
     469,   470,   471,  3034,   472,   473,     0,   474,   475,     0,
     476,   477,     0,     0,   478,     0,     0,   479,     0,   480,
       0,   481,   482,   483,     0,     0,     0,     0,     0,     0,
     484,     0,     0,   485,     0,     0,     0,   486,   487,   488,
     489,   490,   491,     0,     0,     0,     0,     0,     0,   492,
     493,     0,   494,   495,   496,     0,   139,   497,   140,   141,
     142,   143,   144,     0,     0,   145,     0,     0,     0,   146,
       0,     0,   147,     0,   148,   149,   150,   151,   152,   153,
     154,   155,     0,   156,     0,     0,     0,   157,     0,     0,
       0,   158,     0,     0,   159,   160,   161,     0,   162,     0,
     163,   164,     0,     0,   165,     0,     0,   166,   167,     0,
     168,   169,     0,   170,   171,     0,   172,   173,   174,   175,
     176,   177,   178,     0,   179,   180,   181,   182,   183,   184,
     185,     0,   186,   187,   188,   189,   190,   191,   192,   193,
       0,   194,   195,     0,   196,   197,   198,   199,   200,     0,
     201,     0,     0,   202,     0,     0,   203,     0,     0,   204,
       0,   205,     0,     0,     0,   206,   207,   208,     0,     0,
     209,     0,     0,     0,     0,   210,   211,  1616,     0,     0,
    3979,   212,     0,   213,     0,     0,     0,   214,     0,   215,
     216,   217,   218,     0,     0,     0,   219,     0,     0,   220,
     221,   222,     0,     0,     0,   223,     0,   224,   225,     0,
     226,   227,   228,     0,     0,   229,   230,     0,   231,   232,
     233,   234,   235,   236,     0,     0,   237,   238,   239,     0,
       0,   240,   241,     0,   242,   243,   244,  1617,     0,   245,
       0,     0,     0,   246,     0,   247,     0,   248,     0,   249,
     250,   251,   252,   253,   254,     0,   255,     0,     0,     0,
     256,   257,   258,     0,   259,  3031,     0,     0,   260,   261,
       0,     0,     0,   262,   263,   264,   265,     0,     0,   266,
     267,   268,     0,   269,     0,   270,     0,     0,     0,     0,
     271,   272,     0,     0,     0,   273,     0,   274,   275,     0,
     276,   277,     0,     0,     0,   278,     0,     0,   279,   280,
     281,     0,     0,   282,     0,     0,   283,   284,     0,     0,
       0,     0,     0,   285,   286,     0,   287,     0,   288,     0,
     289,   290,     0,     0,  3032,     0,     0,     0,     0,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,     0,   307,   308,   309,   310,
       0,   311,   312,   313,   314,     0,   315,   316,     0,     0,
       0,     0,   317,   318,   319,   320,   321,   322,     0,     0,
     323,   324,     0,   325,     0,   326,     0,   327,   328,   329,
     330,   331,   332,   333,   334,   335,     0,     0,   336,   337,
       0,     0,   338,   339,   340,   341,     0,     0,     0,   342,
     343,     0,     0,  3033,     0,   344,   345,   346,     0,   347,
     348,   349,   350,     0,   351,   352,     0,     0,     0,     0,
       0,     0,     0,     0,   353,   354,   355,     0,     0,   356,
       0,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,     0,     0,   369,   370,   371,     0,   372,
       0,   373,   374,   375,   376,   377,     0,   378,   379,   380,
       0,     0,   381,     0,     0,     0,   382,   383,   384,   385,
     386,     0,     0,   387,   388,   389,   390,   391,     0,   392,
     393,     0,   394,   395,   396,     0,     0,   397,     0,   398,
       0,   399,   400,     0,   401,   402,     0,     0,     0,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,     0,
     413,   414,     0,     0,     0,   415,   416,   417,   418,     0,
       0,     0,   419,     0,     0,     0,   420,     0,   421,   422,
     423,   424,   425,   426,     0,   427,   428,   429,   430,   431,
     432,     0,     0,     0,     0,     0,     0,   433,   434,     0,
     435,     0,     0,   436,     0,     0,   437,   438,   439,     0,
       0,   440,   441,     0,   442,   443,   444,   445,   446,   447,
       0,     0,   448,   449,   450,   451,     0,   452,   453,     0,
     454,     0,   455,   456,   457,   458,     0,   136,   459,   460,
       0,   461,   462,   463,   464,     0,     0,     0,     0,     0,
     465,   466,   467,     0,     0,     0,   468,   469,   470,   471,
    3034,   472,   473,     0,   474,   475,     0,   476,   477,     0,
       0,   478,     0,     0,   479,     0,   480,     0,   481,   482,
     483,     0,     0,     0,     0,     0,     0,   484,     0,     0,
     485,     0,     0,     0,   486,   487,   488,   489,   490,   491,
       0,     0,     0,     0,     0,     0,   492,   493,     0,   494,
     495,   496,     0,   139,   497,   140,   141,   142,   143,   144,
       0,     0,   145,     0,     0,     0,   146,     0,     0,   147,
       0,   148,   149,   150,   151,   152,   153,   154,   155,     0,
     156,     0,     0,     0,   157,     0,     0,     0,   158,     0,
       0,   159,   160,   161,     0,   162,     0,   163,   164,     0,
       0,   165,     0,     0,   166,   167,     0,   168,   169,     0,
     170,   171,     0,   172,   173,   174,   175,   176,   177,   178,
       0,   179,   180,   181,   182,   183,   184,   185,     0,   186,
     187,   188,   189,   190,   191,   192,   193,     0,   194,   195,
       0,   196,   197,   198,   199,   200,     0,   201,     0,     0,
     202,     0,     0,   203,     0,     0,   204,     0,   205,     0,
       0,     0,   206,   207,   208,     0,     0,   209,     0,     0,
       0,     0,   210,   211,  1616,     0,     0,  4352,   212,     0,
     213,     0,     0,     0,   214,     0,   215,   216,   217,   218,
       0,     0,     0,   219,     0,     0,   220,   221,   222,     0,
       0,     0,   223,     0,   224,   225,     0,   226,   227,   228,
       0,     0,   229,   230,     0,   231,   232,   233,   234,   235,
     236,     0,     0,   237,   238,   239,     0,     0,   240,   241,
       0,   242,   243,   244,  1617,     0,   245,     0,     0,     0,
     246,     0,   247,     0,   248,     0,   249,   250,   251,   252,
     253,   254,     0,   255,     0,     0,     0,   256,   257,   258,
       0,   259,  3031,     0,     0,   260,   261,     0,     0,     0,
     262,   263,   264,   265,     0,     0,   266,   267,   268,     0,
     269,     0,   270,     0,     0,     0,     0,   271,   272,     0,
       0,     0,   273,     0,   274,   275,     0,   276,   277,     0,
       0,     0,   278,     0,     0,   279,   280,   281,     0,     0,
     282,     0,     0,   283,   284,     0,     0,     0,     0,     0,
     285,   286,     0,   287,     0,   288,     0,   289,   290,     0,
       0,  3032,     0,     0,     0,     0,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,     0,   307,   308,   309,   310,     0,   311,   312,
     313,   314,     0,   315,   316,     0,     0,     0,     0,   317,
     318,   319,   320,   321,   322,     0,     0,   323,   324,     0,
     325,     0,   326,     0,   327,   328,   329,   330,   331,   332,
     333,   334,   335,     0,     0,   336,   337,     0,     0,   338,
     339,   340,   341,     0,     0,     0,   342,   343,     0,     0,
    3033,     0,   344,   345,   346,     0,   347,   348,   349,   350,
       0,   351,   352,     0,     0,     0,     0,     0,     0,     0,
       0,   353,   354,   355,     0,     0,   356,     0,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
       0,     0,   369,   370,   371,     0,   372,     0,   373,   374,
     375,   376,   377,     0,   378,   379,   380,     0,     0,   381,
       0,     0,     0,   382,   383,   384,   385,   386,     0,     0,
     387,   388,   389,   390,   391,     0,   392,   393,     0,   394,
     395,   396,     0,     0,   397,     0,   398,     0,   399,   400,
       0,   401,   402,     0,     0,     0,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,     0,   413,   414,     0,
       0,     0,   415,   416,   417,   418,     0,     0,     0,   419,
       0,     0,     0,   420,     0,   421,   422,   423,   424,   425,
     426,     0,   427,   428,   429,   430,   431,   432,     0,     0,
       0,     0,     0,     0,   433,   434,     0,   435,     0,     0,
     436,     0,     0,   437,   438,   439,     0,     0,   440,   441,
       0,   442,   443,   444,   445,   446,   447,     0,     0,   448,
     449,   450,   451,     0,   452,   453,     0,   454,     0,   455,
     456,   457,   458,     0,   136,   459,   460,     0,   461,   462,
     463,   464,     0,     0,     0,     0,     0,   465,   466,   467,
       0,     0,     0,   468,   469,   470,   471,  3034,   472,   473,
       0,   474,   475,     0,   476,   477,     0,     0,   478,     0,
       0,   479,     0,   480,     0,   481,   482,   483,     0,     0,
       0,     0,     0,     0,   484,     0,     0,   485,     0,     0,
       0,   486,   487,   488,   489,   490,   491,     0,     0,     0,
       0,     0,     0,   492,   493,     0,   494,   495,   496,     0,
     139,   497,   140,   141,   142,   143,   144,     0,     0,   145,
       0,     0,     0,   146,     0,     0,   147,     0,   148,   149,
     150,   151,   152,   153,   154,   155,     0,   156,     0,     0,
    1393,   157,     0,     0,     0,   158,     0,     0,   159,   160,
     161,     0,   162,     0,   163,   164,     0,     0,   165,     0,
       0,   166,   167,     0,   168,   169,     0,   170,   171,     0,
     172,   173,   174,   175,   176,   177,   178,     0,   179,   180,
     181,   182,   183,   184,   185,     0,   186,   187,   188,   189,
     190,   191,   192,   193,     0,   194,   195,     0,   196,   197,
     198,   199,   200,     0,   201,     0,     0,   202,     0,     0,
     203,     0,     0,   204,     0,   205,     0,     0,     0,   206,
     207,   208,     0,     0,   209,     0,     0,     0,     0,   210,
     211,     0,     0,     0,  1394,   212,     0,   213,     0,     0,
       0,   214,     0,   215,   216,   217,   218,     0,     0,     0,
     219,     0,     0,   220,   221,   222,     0,     0,     0,   223,
       0,   224,   225,     0,   226,   227,   228,  1395,     0,   229,
     230,     0,   231,   232,   233,   234,   235,   236,     0,     0,
     237,   238,   239,     0,     0,   240,   241,     0,   242,   243,
     244,     0,     0,   245,     0,     0,     0,   246,     0,   247,
       0,   248,     0,   249,   250,   251,   252,   253,   254,     0,
     255,     0,     0,     0,   256,   257,   258,     0,   259,     0,
       0,     0,   260,   261,     0,     0,     0,   262,   263,   264,
     265,     0,     0,   266,   267,   268,     0,   269,     0,   270,
       0,     0,     0,     0,   271,   272,     0,     0,     0,   273,
       0,   274,   275,     0,   276,   277,     0,     0,     0,   278,
       0,     0,   279,   280,   281,     0,     0,   282,     0,     0,
     283,   284,   626,     0,     0,     0,     0,   285,   286,     0,
     287,     0,   288,     0,   289,   290,     0,     0,     0,     0,
       0,     0,     0,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,     0,
     307,   308,   309,   310,     0,   311,   312,   313,   314,     0,
     315,   316,     0,     0,     0,     0,   317,   318,   319,   320,
     321,   322,     0,     0,   323,   324,     0,   325,     0,   326,
       0,   327,   328,   329,   330,   331,   332,   333,   334,   335,
       0,     0,   336,   337,     0,     0,   338,   339,   340,   341,
       0,     0,     0,   342,   343,     0,     0,     0,     0,   344,
     345,   346,     0,   347,   348,   349,   350,     0,   351,   352,
       0,     0,     0,     0,     0,     0,     0,     0,   353,   354,
     355,     0,     0,   356,     0,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,     0,     0,   369,
     370,   371,     0,   372,     0,   373,   374,   375,   376,   377,
       0,   378,   379,   380,     0,     0,   381,     0,     0,     0,
     382,   383,   384,   385,   386,     0,     0,   387,   388,   389,
     390,   391,     0,   392,   393,     0,   394,   395,   396,     0,
       0,   397,     0,   398,     0,   399,   400,     0,   401,   402,
       0,     0,     0,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,     0,   413,   414,     0,     0,     0,   415,
     416,   417,   418,     0,     0,  1396,   419,     0,     0,     0,
     420,     0,   421,   422,   423,   424,   425,   426,     0,   427,
     428,   429,   430,   431,   432,     0,     0,     0,     0,     0,
       0,   433,   434,     0,   435,     0,     0,   436,     0,     0,
     437,   438,   439,     0,     0,   440,   441,     0,   442,   443,
     444,   445,   446,   447,     0,     0,   448,   449,   450,   451,
       0,   452,   453,     0,   454,     0,   455,   456,   457,   458,
       0,   136,   459,   460,     0,   461,   462,   463,   464,     0,
       0,     0,     0,     0,   465,   466,   467,     0,     0,     0,
     468,   469,   470,   471,     0,   472,   473,     0,   474,   475,
       0,   476,   477,     0,     0,   478,     0,     0,   479,     0,
     480,     0,   481,   482,   483,     0,     0,     0,     0,     0,
       0,   484,     0,     0,   485,     0,     0,     0,   486,   487,
     488,   489,   490,   491,     0,     0,     0,     0,     0,     0,
     492,   493,     0,   494,   495,   496,     0,   139,   497,   140,
     141,   142,   143,   144,     0,     0,   145,     0,     0,     0,
     146,     0,     0,   147,     0,   148,   149,   150,   151,   152,
     153,   154,   155,     0,   156,     0,     0,  1406,   157,     0,
       0,     0,   158,     0,     0,   159,   160,   161,     0,   162,
       0,   163,   164,     0,     0,   165,     0,     0,   166,   167,
       0,   168,   169,     0,   170,   171,     0,   172,   173,   174,
     175,   176,   177,   178,     0,   179,   180,   181,   182,   183,
     184,   185,     0,   186,   187,   188,   189,   190,   191,   192,
     193,     0,   194,   195,     0,   196,   197,   198,   199,   200,
       0,   201,     0,     0,   202,     0,     0,   203,     0,     0,
     204,     0,   205,     0,     0,     0,   206,   207,   208,     0,
       0,   209,     0,     0,     0,     0,   210,   211,     0,     0,
       0,  1407,   212,     0,   213,     0,     0,     0,   214,     0,
     215,   216,   217,   218,     0,     0,     0,   219,     0,     0,
     220,   221,   222,     0,     0,     0,   223,     0,   224,   225,
       0,   226,   227,   228,     0,     0,   229,   230,     0,   231,
     232,   233,   234,   235,   236,     0,     0,   237,   238,   239,
       0,     0,   240,   241,     0,   242,   243,   244,     0,     0,
     245,     0,     0,     0,   246,     0,   247,     0,   248,     0,
     249,   250,   251,   252,   253,   254,     0,   255,     0,     0,
       0,   256,   257,   258,     0,   259,     0,     0,     0,   260,
     261,     0,     0,     0,   262,   263,   264,   265,     0,     0,
     266,   267,   268,     0,   269,     0,   270,     0,     0,     0,
       0,   271,   272,     0,     0,     0,   273,     0,   274,   275,
       0,   276,   277,     0,     0,     0,   278,     0,     0,   279,
     280,   281,     0,     0,   282,     0,     0,   283,   284,   626,
       0,     0,     0,     0,   285,   286,     0,   287,     0,   288,
       0,   289,   290,     0,     0,     0,     0,     0,     0,     0,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,     0,   307,   308,   309,
     310,     0,   311,   312,   313,   314,     0,   315,   316,     0,
       0,     0,     0,   317,   318,   319,   320,   321,   322,     0,
       0,   323,   324,     0,   325,     0,   326,     0,   327,   328,
     329,   330,   331,   332,   333,   334,   335,     0,     0,   336,
     337,     0,     0,   338,   339,   340,   341,     0,     0,     0,
     342,   343,     0,     0,     0,     0,   344,   345,   346,     0,
     347,   348,   349,   350,     0,   351,   352,     0,     0,     0,
       0,     0,     0,     0,     0,   353,   354,   355,     0,     0,
     356,     0,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,     0,     0,   369,   370,   371,     0,
     372,     0,   373,   374,   375,   376,   377,     0,   378,   379,
     380,     0,     0,   381,     0,     0,     0,   382,   383,   384,
     385,   386,     0,     0,   387,   388,   389,   390,   391,     0,
     392,   393,     0,   394,   395,   396,     0,     0,   397,     0,
     398,     0,   399,   400,     0,   401,   402,     0,     0,     0,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
       0,   413,   414,     0,     0,     0,   415,   416,   417,   418,
       0,     0,     0,   419,     0,     0,     0,   420,     0,   421,
     422,   423,   424,   425,   426,     0,   427,   428,   429,   430,
     431,   432,     0,     0,     0,     0,     0,     0,   433,   434,
       0,   435,     0,     0,   436,     0,     0,   437,   438,   439,
       0,     0,   440,   441,     0,   442,   443,   444,   445,   446,
     447,     0,     0,   448,   449,   450,   451,     0,   452,   453,
       0,   454,     0,   455,   456,   457,   458,     0,   136,   459,
     460,     0,   461,   462,   463,   464,     0,     0,     0,     0,
       0,   465,   466,   467,     0,     0,     0,   468,   469,   470,
     471,     0,   472,   473,     0,   474,   475,     0,   476,   477,
       0,     0,   478,     0,     0,   479,     0,   480,     0,   481,
     482,   483,     0,     0,     0,     0,     0,     0,   484,     0,
       0,   485,     0,     0,     0,   486,   487,   488,   489,   490,
     491,     0,     0,     0,     0,     0,     0,   492,   493,     0,
     494,   495,   496,     0,   139,   497,   140,   141,   142,   143,
     144,     0,     0,   145,     0,     0,     0,   146,     0,     0,
     147,     0,   148,   149,   150,   151,   152,   153,   154,   155,
       0,   156,     0,     0,     0,   157,   997,     0,     0,   158,
       0,     0,   159,   160,   161,     0,   162,     0,   163,   164,
       0,     0,   165,     0,     0,   166,   167,     0,   168,   169,
       0,   170,   171,     0,   172,   173,   174,   175,   176,   177,
     178,     0,   179,   180,   181,   182,   183,   184,   185,     0,
     186,   187,   188,   189,   190,   191,   192,   193,     0,   194,
     195,     0,   196,   197,   198,   199,   200,     0,   201,     0,
       0,   202,     0,     0,   203,     0,     0,   204,     0,   205,
       0,     0,     0,   206,   207,   208,     0,     0,   209,     0,
       0,     0,     0,   210,   211,     0,     0,     0,     0,   212,
       0,   213,     0,     0,     0,   214,     0,   215,   216,   217,
     218,     0,     0,     0,   219,     0,     0,   220,   221,   222,
       0,     0,     0,   223,     0,   224,   225,     0,   226,   227,
     228,     0,     0,   229,   230,     0,   231,   232,   233,   234,
     235,   236,     0,     0,   237,   238,   239,     0,     0,   240,
     241,     0,   242,   243,   244,     0,     0,   245,     0,     0,
       0,   246,     0,   247,     0,   248,     0,   249,   250,   251,
     252,   253,   254,     0,   255,     0,     0,     0,   256,   257,
     258,     0,   259,   998,   999,     0,   260,   261,     0,     0,
       0,   262,   263,   264,   265,     0,     0,   266,   267,   268,
       0,   269,     0,   270,     0,     0,     0,     0,   271,   272,
       0,     0,     0,   273,     0,   274,   275,     0,   276,   277,
       0,     0,     0,   278,     0,     0,   279,   280,   281,     0,
       0,   282,     0,     0,   283,   284,     0,     0,     0,     0,
       0,   285,   286,     0,   287,     0,   288,     0,   289,   290,
       0,     0,     0,     0,     0,     0,     0,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,     0,   307,   308,   309,   310,     0,   311,
     312,   313,   314,     0,   315,   316,     0,     0,     0,     0,
     317,   318,   319,   320,   321,   322,     0,     0,   323,   324,
       0,   325,     0,   326,     0,   327,   328,   329,   330,   331,
     332,   333,   334,   335,     0,     0,   336,   337,     0,     0,
     338,   339,   340,   341,     0,     0,     0,   342,   343,     0,
       0,     0,     0,   344,   345,   346,     0,   347,   348,   349,
     350,     0,   351,   352,     0,     0,     0,     0,     0,     0,
       0,     0,   353,   354,   355,     0,     0,   356,     0,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,     0,     0,   369,   370,   371,     0,   372,     0,   373,
     374,   375,   376,   377,     0,   378,   379,   380,     0,     0,
     381,     0,     0,     0,   382,   383,   384,   385,   386,     0,
       0,   387,   388,   389,   390,   391,     0,   392,   393,     0,
     394,   395,   396,     0,     0,   397,     0,   398,     0,   399,
     400,     0,   401,   402,     0,     0,     0,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,     0,   413,   414,
       0,     0,     0,   415,   416,   417,   418,     0,     0,     0,
     419,     0,     0,     0,   420,     0,   421,   422,   423,   424,
     425,   426,     0,   427,   428,   429,   430,   431,   432,     0,
       0,     0,     0,     0,     0,   433,   434,     0,   435,     0,
       0,   436,     0,     0,   437,   438,   439,     0,     0,   440,
     441,     0,   442,   443,   444,   445,   446,   447,     0,     0,
     448,   449,   450,   451,     0,   452,   453,     0,   454,     0,
     455,   456,   457,   458,     0,  1000,   459,   460,     0,   461,
     462,   463,   464,     0,     0,     0,     0,     0,   465,   466,
     467,     0,     0,     0,   468,   469,   470,   471,     0,   472,
     473,     0,   474,   475,     0,   476,   477,     0,     0,   478,
       0,     0,   479,     0,   480,     0,   481,   482,   483,     0,
       0,     0,     0,     0,     0,   484,     0,     0,   485,     0,
       0,     0,   486,   487,   488,   489,   490,   491,     0,     0,
       0,     0,     0,     0,   492,   493,     0,   494,   495,   496,
       0,   139,   497,   140,   141,   142,   143,   144,     0,     0,
     145,     0,     0,     0,   146,     0,     0,   147,     0,   148,
     149,   150,   151,   152,   153,   154,   155,     0,   156,     0,
       0,     0,   157,     0,     0,     0,   158,     0,     0,   159,
     160,   161,     0,   162,     0,   163,   164,     0,     0,   165,
       0,     0,   166,   167,     0,   168,   169,     0,   170,   171,
       0,   172,   173,   174,   175,   176,   177,   178,     0,   179,
     180,   181,   182,   183,   184,   185,     0,   186,   187,   188,
     189,   190,   191,   192,   193,     0,   194,   195,     0,   196,
     197,   198,   199,   200,     0,   201,     0,     0,   202,     0,
       0,   203,     0,     0,   204,     0,   205,     0,     0,     0,
     206,   207,   208,     0,     0,   209,     0,     0,     0,     0,
     210,   211,     0,     0,     0,     0,   212,     0,   213,     0,
       0,     0,   214,     0,   215,   216,   217,   218,     0,     0,
       0,   219,     0,     0,   220,   221,   222,     0,     0,     0,
     223,     0,   224,   225,     0,   226,   227,   228,     0,     0,
     229,   230,     0,   231,   232,   233,   234,   235,   236,     0,
       0,   237,   238,   239,     0,     0,   240,   241,     0,   242,
     243,   244,     0,     0,   245,     0,     0,     0,   246,     0,
     247,     0,   248,     0,   249,   250,   251,   252,   253,   254,
       0,   255,     0,     0,     0,   256,   257,   258,     0,   259,
       0,     0,     0,   260,   261,     0,     0,     0,   262,   263,
     264,   265,     0,     0,   266,   267,   268,     0,   269,     0,
     270,     0,     0,     0,     0,   271,   272,     0,     0,     0,
     273,     0,   274,   275,     0,   276,   277,     0,     0,     0,
     278,     0,     0,   279,   280,   281,     0,     0,   282,     0,
       0,   283,   284,     0,     0,     0,     0,     0,   285,   286,
       0,   287,     0,   288,     0,   289,   290,     0,     0,  1917,
       0,     0,     0,     0,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
       0,   307,   308,   309,   310,     0,   311,   312,   313,   314,
       0,   315,   316,     0,     0,     0,     0,   317,   318,   319,
     320,   321,   322,     0,     0,   323,   324,     0,   325,     0,
     326,     0,   327,   328,   329,   330,   331,   332,   333,   334,
     335,     0,     0,   336,   337,     0,     0,   338,   339,   340,
     341,     0,     0,     0,   342,   343,     0,     0,  1918,     0,
     344,   345,   346,     0,   347,   348,   349,   350,     0,   351,
     352,     0,     0,     0,     0,     0,     0,     0,     0,   353,
     354,   355,     0,   744,   356,     0,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,     0,     0,
     369,   370,   371,     0,   372,     0,   373,   374,   375,   376,
     377,     0,   378,   379,   380,     0,     0,   381,     0,     0,
       0,   382,   383,   384,   385,   386,     0,     0,   387,   388,
     389,   390,   391,     0,   392,   393,     0,   394,   395,   396,
       0,     0,   397,     0,   398,     0,   399,   400,     0,   401,
     402,     0,     0,     0,   403,   404,   405,  1919,   407,   408,
     409,   410,   411,   412,     0,   413,   414,     0,     0,     0,
     415,   416,   417,   418,     0,     0,     0,   419,     0,     0,
       0,   420,     0,   421,   422,   423,   424,   425,   426,     0,
     427,   428,   429,   430,   431,   432,     0,     0,     0,     0,
       0,     0,   433,   434,     0,   435,     0,     0,   436,     0,
       0,   437,   438,   439,     0,     0,   440,   441,     0,   442,
     443,   444,   445,   446,   447,     0,     0,   448,   449,   450,
     451,     0,   452,   453,     0,   454,     0,   455,   456,   457,
     458,     0,     0,   459,   460,     0,   461,   462,   463,   464,
       0,     0,     0,     0,     0,   465,   466,   467,     0,     0,
       0,   468,   469,   470,   471,  1920,   472,   473,     0,   474,
     475,     0,   476,   477,     0,     0,   478,     0,     0,   479,
       0,   480,     0,   481,   482,   483,     0,     0,     0,     0,
       0,     0,   484,     0,     0,   485,     0,     0,     0,   486,
     487,   488,   489,   490,   491,     0,     0,     0,     0,     0,
       0,   492,   493,     0,   494,   495,   496,     0,   139,   497,
     140,   141,   142,   143,   144,     0,     0,   145,     0,     0,
       0,   146,     0,     0,   147,     0,   148,   149,   150,   151,
     152,   153,   154,   155,     0,   156,     0,     0,     0,   157,
       0,     0,     0,   158,     0,     0,   159,   160,   161,     0,
     162,     0,   163,   164,     0,     0,   165,     0,     0,   166,
     167,     0,   168,   169,     0,   170,   171,     0,   172,   173,
     174,   175,   176,   177,   178,     0,   179,   180,   181,   182,
     183,   184,   185,     0,   186,   187,   188,   189,   190,   191,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   199,
     200,     0,   201,     0,     0,   202,     0,     0,   203,     0,
       0,   204,     0,   205,     0,     0,     0,   206,   207,   208,
       0,     0,   209,     0,     0,     0,     0,   210,   211,     0,
       0,     0,     0,   212,     0,   213,     0,     0,     0,   214,
       0,   215,   216,   217,   218,     0,     0,     0,   219,     0,
       0,   220,   221,   222,     0,     0,     0,   223,     0,   224,
     225,     0,   226,   227,   228,     0,     0,   229,   230,     0,
     231,   232,   233,   234,   235,   236,     0,     0,   237,   238,
     239,     0,     0,   240,   241,     0,   242,   243,   244,     0,
       0,   245,     0,     0,     0,   246,     0,   247,     0,   248,
       0,   249,   250,   251,   252,   253,   254,     0,   255,     0,
       0,     0,   256,   257,   258,     0,   259,     0,     0,     0,
     260,   261,     0,     0,     0,   262,   263,   264,   265,     0,
       0,   266,   267,   268,     0,   269,     0,   270,     0,     0,
       0,     0,   271,   272,     0,     0,     0,   273,     0,   274,
     275,     0,   276,   277,     0,     0,     0,   278,     0,     0,
     279,   280,   281,     0,     0,   282,     0,     0,   283,   284,
       0,     0,     0,     0,     0,   285,   286,     0,   287,     0,
     288,     0,   289,   290,     0,     0,  1917,     0,     0,     0,
       0,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,     0,   307,   308,
     309,   310,     0,   311,   312,   313,   314,     0,   315,   316,
       0,     0,     0,     0,   317,   318,   319,   320,   321,   322,
       0,     0,   323,   324,     0,   325,     0,   326,     0,   327,
     328,   329,   330,   331,   332,   333,   334,   335,     0,     0,
     336,   337,     0,     0,   338,   339,   340,   341,     0,     0,
       0,   342,   343,     0,     0,  1918,     0,   344,   345,   346,
       0,   347,   348,   349,   350,     0,   351,   352,     0,     0,
       0,     0,     0,     0,     0,     0,   353,   354,   355,     0,
     744,   356,     0,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,     0,     0,   369,   370,   371,
       0,   372,     0,   373,   374,   375,   376,   377,     0,   378,
     379,   380,     0,     0,   381,     0,     0,     0,   382,   383,
     384,   385,   386,     0,     0,   387,   388,   389,   390,   391,
       0,   392,   393,     0,   394,   395,   396,     0,     0,   397,
       0,   398,     0,   399,   400,     0,   401,   402,     0,     0,
       0,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,     0,   413,   414,     0,     0,     0,   415,   416,   417,
     418,     0,     0,     0,   419,     0,     0,     0,   420,     0,
     421,   422,   423,   424,   425,   426,     0,   427,   428,   429,
     430,   431,   432,     0,     0,     0,     0,     0,     0,   433,
     434,     0,   435,     0,     0,   436,     0,     0,   437,   438,
     439,     0,     0,   440,   441,     0,   442,   443,   444,   445,
     446,   447,     0,     0,   448,   449,   450,   451,     0,   452,
     453,     0,   454,     0,   455,   456,   457,   458,     0,     0,
     459,   460,     0,   461,   462,   463,   464,     0,     0,     0,
       0,     0,   465,   466,   467,     0,     0,     0,   468,   469,
     470,   471,  1920,   472,   473,     0,   474,   475,     0,   476,
     477,     0,     0,   478,     0,     0,   479,     0,   480,     0,
     481,   482,   483,     0,     0,     0,     0,     0,     0,   484,
       0,     0,   485,     0,     0,     0,   486,   487,   488,   489,
     490,   491,     0,     0,     0,     0,     0,     0,   492,   493,
       0,   494,   495,   496,     0,   139,   497,   140,   141,   142,
     143,   144,     0,     0,   145,     0,     0,     0,   146,     0,
       0,   147,     0,   148,   149,   150,   151,   152,   153,   154,
     155,     0,   156,     0,     0,  1393,   157,     0,     0,     0,
     158,     0,     0,   159,   160,   161,     0,   162,     0,   163,
     164,     0,     0,   165,     0,     0,   166,   167,     0,   168,
     169,     0,   170,   171,     0,   172,   173,   174,   175,   176,
     177,   178,     0,   179,   180,   181,   182,   183,   184,   185,
       0,   186,   187,   188,   189,   190,   191,   192,   193,     0,
     194,   195,     0,   196,   197,   198,   199,   200,     0,   201,
       0,     0,   202,     0,     0,   203,     0,     0,   204,     0,
     205,     0,     0,     0,   206,   207,   208,     0,     0,   209,
       0,     0,     0,     0,   210,   211,     0,     0,     0,  1394,
     212,     0,   213,     0,     0,     0,   214,     0,   215,   216,
     217,   218,     0,     0,     0,   219,     0,     0,   220,   221,
     222,     0,     0,     0,   223,     0,   224,   225,     0,   226,
     227,   228,     0,     0,   229,   230,     0,   231,   232,   233,
     234,   235,   236,     0,     0,   237,   238,   239,     0,     0,
     240,   241,     0,   242,   243,   244,     0,     0,   245,     0,
       0,     0,   246,     0,   247,     0,   248,     0,   249,   250,
     251,   252,   253,   254,     0,   255,     0,     0,     0,   256,
     257,   258,     0,   259,     0,     0,     0,   260,   261,     0,
       0,     0,   262,   263,   264,   265,     0,     0,   266,   267,
     268,     0,   269,     0,   270,     0,     0,     0,     0,   271,
     272,     0,     0,     0,   273,     0,   274,   275,     0,   276,
     277,     0,     0,     0,   278,     0,     0,   279,   280,   281,
       0,     0,   282,     0,     0,   283,   284,   626,     0,     0,
       0,     0,   285,   286,     0,   287,     0,   288,     0,   289,
     290,     0,     0,     0,     0,     0,     0,     0,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,     0,   307,   308,   309,   310,     0,
     311,   312,   313,   314,     0,   315,   316,     0,     0,     0,
       0,   317,   318,   319,   320,   321,   322,     0,     0,   323,
     324,     0,   325,     0,   326,     0,   327,   328,   329,   330,
     331,   332,   333,   334,   335,     0,     0,   336,   337,     0,
       0,   338,   339,   340,   341,     0,     0,     0,   342,   343,
       0,     0,     0,     0,   344,   345,   346,     0,   347,   348,
     349,   350,     0,   351,   352,     0,     0,     0,     0,     0,
       0,     0,     0,   353,   354,   355,     0,     0,   356,     0,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,     0,     0,   369,   370,   371,     0,   372,     0,
     373,   374,   375,   376,   377,     0,   378,   379,   380,     0,
       0,   381,     0,     0,     0,   382,   383,   384,   385,   386,
       0,     0,   387,   388,   389,   390,   391,     0,   392,   393,
       0,   394,   395,   396,     0,     0,   397,     0,   398,     0,
     399,   400,     0,   401,   402,     0,     0,     0,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,     0,   413,
     414,     0,     0,     0,   415,   416,   417,   418,     0,     0,
       0,   419,     0,     0,     0,   420,     0,   421,   422,   423,
     424,   425,   426,     0,   427,   428,   429,   430,   431,   432,
       0,     0,     0,     0,     0,     0,   433,   434,     0,   435,
       0,     0,   436,     0,     0,   437,   438,   439,     0,     0,
     440,   441,     0,   442,   443,   444,   445,   446,   447,     0,
       0,   448,   449,   450,   451,     0,   452,   453,     0,   454,
       0,   455,   456,   457,   458,     0,   136,   459,   460,     0,
     461,   462,   463,   464,     0,     0,     0,     0,     0,   465,
     466,   467,     0,     0,     0,   468,   469,   470,   471,     0,
     472,   473,     0,   474,   475,     0,   476,   477,     0,     0,
     478,     0,     0,   479,     0,   480,     0,   481,   482,   483,
       0,     0,     0,     0,     0,     0,   484,     0,     0,   485,
       0,     0,     0,   486,   487,   488,   489,   490,   491,     0,
       0,     0,     0,     0,     0,   492,   493,     0,   494,   495,
     496,     0,   139,   497,   140,   141,   142,   143,   144,     0,
       0,   145,     0,     0,     0,   146,     0,     0,   147,     0,
     148,   149,   150,   151,   152,   153,   154,   155,     0,   156,
       0,     0,     0,   157,     0,     0,     0,   158,     0,     0,
     159,   160,   161,     0,   162,     0,   163,   164,     0,     0,
     165,     0,     0,   166,   167,     0,   168,   169,     0,   170,
     171,     0,   172,   173,   174,   175,   176,   177,   178,     0,
     179,   180,   181,   182,   183,   184,   185,     0,   186,   187,
     188,   189,   190,   191,   192,   193,     0,   194,   195,     0,
     196,   197,   198,   199,   200,     0,   201,     0,     0,   202,
       0,     0,   203,     0,     0,   204,     0,   205,     0,     0,
       0,   206,   207,   208,     0,     0,   209,     0,     0,     0,
       0,   210,   211,     0,     0,     0,     0,   212,     0,   213,
       0,     0,     0,   214,     0,   215,   216,   217,   218,     0,
       0,     0,   219,     0,     0,   220,   221,   222,     0,     0,
       0,   223,     0,   224,   225,     0,   226,   227,   228,     0,
       0,   229,   230,     0,   231,   232,   233,   234,   235,   236,
       0,     0,   237,   238,   239,     0,     0,   240,   241,     0,
     242,   243,   244,     0,     0,   245,     0,     0,     0,   246,
       0,   247,     0,   248,     0,   249,   250,   251,   252,   253,
     254,     0,   255,     0,     0,     0,   256,   257,   258,     0,
     259,     0,     0,     0,   260,   261,     0,     0,     0,   262,
     263,   264,   265,     0,     0,   266,   267,   268,     0,   269,
       0,   270,     0,     0,     0,     0,   271,   272,     0,     0,
       0,   273,     0,   274,   275,     0,   276,   277,     0,     0,
       0,   278,     0,     0,   279,   280,   281,     0,     0,   282,
       0,     0,   283,   284,     0,     0,     0,     0,     0,   285,
     286,     0,   287,     0,   288,     0,   289,   290,     0,     0,
    1917,     0,     0,     0,     0,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,     0,   307,   308,   309,   310,     0,   311,   312,   313,
     314,     0,   315,   316,     0,     0,     0,     0,   317,   318,
     319,   320,   321,   322,     0,     0,   323,   324,     0,   325,
       0,   326,     0,   327,   328,   329,   330,   331,   332,   333,
     334,   335,     0,     0,   336,   337,     0,     0,   338,   339,
     340,   341,     0,     0,     0,   342,   343,     0,     0,  1918,
       0,   344,   345,   346,     0,   347,   348,   349,   350,     0,
     351,   352,     0,     0,     0,     0,     0,     0,     0,     0,
     353,   354,   355,     0,   744,   356,     0,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,     0,
       0,   369,   370,   371,     0,   372,     0,   373,   374,   375,
     376,   377,     0,   378,   379,   380,     0,     0,   381,     0,
       0,     0,   382,   383,   384,   385,   386,     0,     0,   387,
     388,   389,   390,   391,     0,   392,   393,     0,   394,   395,
     396,     0,     0,   397,     0,   398,     0,   399,   400,     0,
     401,   402,     0,     0,     0,   403,   404,   405,  3703,   407,
     408,   409,   410,   411,   412,     0,   413,   414,     0,     0,
       0,   415,   416,   417,   418,     0,     0,     0,   419,     0,
       0,     0,   420,     0,   421,   422,   423,   424,   425,   426,
       0,   427,   428,   429,   430,   431,   432,     0,     0,     0,
       0,     0,     0,   433,   434,     0,   435,     0,     0,   436,
       0,     0,   437,   438,   439,     0,     0,   440,   441,     0,
     442,   443,   444,   445,   446,   447,     0,     0,   448,   449,
     450,   451,     0,   452,   453,     0,   454,     0,   455,   456,
     457,   458,     0,     0,   459,   460,     0,   461,   462,   463,
     464,     0,     0,     0,     0,     0,   465,   466,   467,     0,
       0,     0,   468,   469,   470,   471,  1920,   472,   473,     0,
     474,   475,     0,   476,   477,     0,     0,   478,     0,     0,
     479,     0,   480,     0,   481,   482,   483,     0,     0,     0,
       0,     0,     0,   484,     0,     0,   485,     0,     0,     0,
     486,   487,   488,   489,   490,   491,     0,     0,     0,     0,
       0,     0,   492,   493,     0,   494,   495,   496,     0,   139,
     497,   140,   141,   142,   143,   144,     0,     0,   145,     0,
       0,     0,   146,     0,     0,   147,     0,   148,   149,   150,
     151,   152,   153,   154,   155,     0,   156,     0,     0,     0,
     157,     0,     0,     0,   158,     0,     0,   159,   160,   161,
       0,   162,     0,   163,   164,     0,     0,   165,     0,     0,
     166,   167,     0,   168,   169,     0,   170,   171,     0,   172,
     173,   174,   175,   176,   177,   178,     0,   179,   180,   181,
     182,   183,   184,   185,     0,   186,   187,   188,   189,   190,
     191,   192,   193,     0,   194,   195,     0,   196,   197,   198,
     199,   200,     0,   201,     0,     0,   202,     0,     0,   203,
       0,  1020,   204,     0,   205,     0,     0,     0,   206,   207,
     208,     0,     0,   209,     0,     0,     0,     0,   210,   211,
       0,     0,     0,     0,   212,     0,   213,     0,     0,     0,
     214,     0,   215,   216,   217,   218,     0,     0,     0,   219,
       0,     0,   220,   221,   222,     0,     0,     0,   223,     0,
     224,   225,     0,   226,   227,   228,     0,     0,   229,   230,
       0,   231,   232,   233,   234,   235,   236,     0,     0,   237,
     238,   239,     0,     0,   240,   241,     0,   242,   243,   244,
       0,     0,   245,     0,     0,     0,   246,     0,   247,     0,
     248,     0,   249,   250,   251,   252,   253,   254,     0,   255,
       0,     0,     0,   256,   257,   258,     0,   259,     0,     0,
       0,   260,   261,     0,     0,     0,   262,   263,   264,   265,
       0,     0,   266,   267,   268,     0,   269,     0,   270,     0,
       0,     0,     0,   271,   272,     0,     0,     0,   273,     0,
     274,   275,     0,   276,   277,     0,     0,     0,   278,     0,
       0,   279,   280,   281,     0,     0,   282,     0,     0,   283,
     284,   626,     0,     0,     0,     0,   285,   286,     0,   287,
       0,   288,     0,   289,   290,     0,     0,     0,     0,     0,
       0,     0,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,     0,   307,
     308,   309,   310,     0,   311,   312,   313,   314,     0,   315,
     316,     0,     0,     0,     0,   317,   318,   319,   320,   321,
     322,     0,     0,   323,   324,     0,   325,     0,   326,     0,
     327,   328,   329,   330,   331,   332,   333,   334,   335,     0,
       0,   336,   337,     0,     0,   338,   339,   340,   341,     0,
       0,     0,   342,   343,     0,     0,     0,     0,   344,   345,
     346,     0,   347,   348,   349,   350,     0,   351,   352,     0,
       0,     0,     0,     0,     0,     0,     0,   353,   354,   355,
       0,     0,   356,     0,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,     0,     0,   369,   370,
     371,     0,   372,     0,   373,   374,   375,   376,   377,     0,
     378,   379,   380,     0,     0,   381,     0,     0,     0,   382,
     383,   384,   385,   386,     0,     0,   387,   388,   389,   390,
     391,     0,   392,   393,     0,   394,   395,   396,     0,     0,
     397,     0,   398,     0,   399,   400,     0,   401,   402,     0,
       0,     0,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,     0,   413,   414,     0,     0,     0,   415,   416,
     417,   418,     0,     0,     0,   419,     0,     0,     0,   420,
       0,   421,   422,   423,   424,   425,   426,     0,   427,   428,
     429,   430,   431,   432,     0,     0,     0,     0,     0,     0,
     433,   434,     0,   435,     0,     0,   436,     0,     0,   437,
     438,   439,     0,     0,   440,   441,     0,   442,   443,   444,
     445,   446,   447,     0,     0,   448,   449,   450,   451,     0,
     452,   453,     0,   454,     0,   455,   456,   457,   458,     0,
     136,   459,   460,     0,   461,   462,   463,   464,     0,     0,
       0,     0,     0,   465,   466,   467,     0,     0,     0,   468,
     469,   470,   471,     0,   472,   473,     0,   474,   475,     0,
     476,   477,     0,     0,   478,     0,     0,   479,     0,   480,
       0,   481,   482,   483,     0,     0,     0,     0,     0,     0,
     484,     0,     0,   485,     0,     0,     0,   486,   487,   488,
     489,   490,   491,     0,     0,     0,     0,     0,     0,   492,
     493,     0,   494,   495,   496,     0,   139,   497,   140,   141,
     142,   143,   144,  1429,     0,   145,     0,     0,     0,   146,
       0,     0,   147,     0,   148,   149,   150,   151,   152,   153,
     154,   155,     0,   156,     0,     0,     0,   157,     0,     0,
       0,   158,     0,     0,   159,   160,   161,     0,   162,     0,
     163,   164,     0,     0,   165,     0,     0,   166,   167,     0,
     168,   169,     0,   170,   171,     0,   172,   173,   174,   175,
     176,   177,   178,     0,   179,   180,   181,   182,   183,   184,
     185,     0,   186,   187,   188,   189,   190,   191,   192,   193,
       0,   194,   195,     0,   196,   197,   198,   199,   200,     0,
     201,     0,     0,   202,     0,     0,   203,     0,     0,   204,
       0,   205,     0,     0,     0,   206,   207,   208,     0,     0,
     209,     0,     0,     0,     0,   210,   211,     0,     0,     0,
       0,   212,     0,   213,     0,     0,     0,   214,     0,   215,
     216,   217,   218,     0,     0,     0,   219,     0,     0,   220,
     221,   222,     0,     0,     0,   223,     0,   224,   225,     0,
     226,   227,   228,     0,     0,   229,   230,     0,   231,   232,
     233,   234,   235,   236,     0,     0,   237,   238,   239,     0,
       0,   240,   241,     0,   242,   243,   244,     0,     0,   245,
       0,     0,     0,   246,     0,   247,     0,   248,     0,   249,
     250,   251,   252,   253,   254,     0,   255,     0,     0,     0,
     256,   257,   258,     0,   259,     0,     0,     0,   260,   261,
       0,     0,     0,   262,   263,   264,   265,     0,     0,   266,
     267,   268,     0,   269,     0,   270,     0,     0,     0,     0,
     271,   272,     0,     0,     0,   273,     0,   274,   275,     0,
     276,   277,     0,     0,     0,   278,     0,     0,   279,   280,
     281,     0,     0,   282,     0,     0,   283,   284,   626,     0,
       0,     0,     0,   285,   286,     0,   287,     0,   288,     0,
     289,   290,     0,     0,     0,     0,     0,     0,     0,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,     0,   307,   308,   309,   310,
       0,   311,   312,   313,   314,     0,   315,   316,     0,     0,
       0,     0,   317,   318,   319,   320,   321,   322,     0,     0,
     323,   324,     0,   325,     0,   326,     0,   327,   328,   329,
     330,   331,   332,   333,   334,   335,     0,     0,   336,   337,
       0,     0,   338,   339,   340,   341,     0,     0,     0,   342,
     343,     0,     0,     0,     0,   344,   345,   346,     0,   347,
     348,   349,   350,     0,   351,   352,     0,     0,     0,     0,
       0,     0,     0,     0,   353,   354,   355,     0,     0,   356,
       0,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,     0,     0,   369,   370,   371,     0,   372,
       0,   373,   374,   375,   376,   377,     0,   378,   379,   380,
       0,     0,   381,     0,     0,     0,   382,   383,   384,   385,
     386,     0,     0,   387,   388,   389,   390,   391,     0,   392,
     393,     0,   394,   395,   396,     0,     0,   397,     0,   398,
       0,   399,   400,     0,   401,   402,     0,     0,     0,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,     0,
     413,   414,     0,     0,     0,   415,   416,   417,   418,     0,
       0,     0,   419,     0,     0,     0,   420,     0,   421,   422,
     423,   424,   425,   426,     0,   427,   428,   429,   430,   431,
     432,     0,     0,     0,     0,     0,     0,   433,   434,     0,
     435,     0,     0,   436,     0,     0,   437,   438,   439,     0,
       0,   440,   441,     0,   442,   443,   444,   445,   446,   447,
       0,     0,   448,   449,   450,   451,     0,   452,   453,     0,
     454,     0,   455,   456,   457,   458,     0,   136,   459,   460,
       0,   461,   462,   463,   464,     0,     0,     0,     0,     0,
     465,   466,   467,     0,     0,     0,   468,   469,   470,   471,
       0,   472,   473,     0,   474,   475,     0,   476,   477,     0,
       0,   478,     0,     0,   479,     0,   480,     0,   481,   482,
     483,     0,     0,     0,     0,     0,     0,   484,     0,     0,
     485,     0,     0,     0,   486,   487,   488,   489,   490,   491,
       0,     0,     0,     0,     0,     0,   492,   493,     0,   494,
     495,   496,     0,   139,   497,   140,   141,   142,   143,   144,
       0,     0,   145,     0,     0,     0,   146,     0,     0,   147,
       0,   148,   149,   150,   151,   152,   153,   154,   155,     0,
     156,     0,     0,     0,   157,     0,     0,     0,   158,     0,
       0,   159,   160,   161,     0,   162,     0,   163,   164,     0,
       0,   165,     0,     0,   166,   167,     0,   168,   169,     0,
     170,   171,     0,   172,   173,   174,   175,   176,   177,   178,
       0,   179,   180,   181,   182,   183,   184,   185,     0,   186,
     187,   188,   189,   190,   191,   192,   193,     0,   194,   195,
       0,   196,   197,   198,   199,   200,     0,   201,     0,     0,
     202,     0,     0,   203,     0,     0,   204,     0,   205,     0,
       0,     0,   206,   207,   208,     0,     0,   209,     0,     0,
       0,     0,   210,   211,     0,     0,     0,  2426,   212,     0,
     213,     0,     0,     0,   214,     0,   215,   216,   217,   218,
       0,     0,     0,   219,     0,     0,   220,   221,   222,     0,
       0,     0,   223,     0,   224,   225,     0,   226,   227,   228,
       0,     0,   229,   230,     0,   231,   232,   233,   234,   235,
     236,     0,     0,   237,   238,   239,     0,     0,   240,   241,
       0,   242,   243,   244,     0,     0,   245,     0,     0,     0,
     246,     0,   247,     0,   248,     0,   249,   250,   251,   252,
     253,   254,     0,   255,     0,     0,     0,   256,   257,   258,
       0,   259,     0,     0,     0,   260,   261,     0,     0,     0,
     262,   263,   264,   265,     0,     0,   266,   267,   268,     0,
     269,     0,   270,     0,     0,     0,     0,   271,   272,     0,
       0,     0,   273,     0,   274,   275,     0,   276,   277,     0,
       0,     0,   278,     0,     0,   279,   280,   281,     0,     0,
     282,     0,     0,   283,   284,   626,     0,     0,     0,     0,
     285,   286,     0,   287,     0,   288,     0,   289,   290,     0,
       0,     0,     0,     0,     0,     0,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,     0,   307,   308,   309,   310,     0,   311,   312,
     313,   314,     0,   315,   316,     0,     0,     0,     0,   317,
     318,   319,   320,   321,   322,     0,     0,   323,   324,     0,
     325,     0,   326,     0,   327,   328,   329,   330,   331,   332,
     333,   334,   335,     0,     0,   336,   337,     0,     0,   338,
     339,   340,   341,     0,     0,     0,   342,   343,     0,     0,
       0,     0,   344,   345,   346,     0,   347,   348,   349,   350,
       0,   351,   352,     0,     0,     0,     0,     0,     0,     0,
       0,   353,   354,   355,     0,     0,   356,     0,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
       0,     0,   369,   370,   371,     0,   372,     0,   373,   374,
     375,   376,   377,     0,   378,   379,   380,     0,     0,   381,
       0,     0,     0,   382,   383,   384,   385,   386,     0,     0,
     387,   388,   389,   390,   391,     0,   392,   393,     0,   394,
     395,   396,     0,     0,   397,     0,   398,     0,   399,   400,
       0,   401,   402,     0,     0,     0,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,     0,   413,   414,     0,
       0,     0,   415,   416,   417,   418,     0,     0,     0,   419,
       0,     0,     0,   420,     0,   421,   422,   423,   424,   425,
     426,     0,   427,   428,   429,   430,   431,   432,     0,     0,
       0,     0,     0,     0,   433,   434,     0,   435,     0,     0,
     436,     0,     0,   437,   438,   439,     0,     0,   440,   441,
       0,   442,   443,   444,   445,   446,   447,     0,     0,   448,
     449,   450,   451,     0,   452,   453,     0,   454,     0,   455,
     456,   457,   458,     0,   136,   459,   460,     0,   461,   462,
     463,   464,     0,     0,     0,     0,     0,   465,   466,   467,
       0,     0,     0,   468,   469,   470,   471,     0,   472,   473,
       0,   474,   475,     0,   476,   477,     0,     0,   478,     0,
       0,   479,     0,   480,     0,   481,   482,   483,     0,     0,
       0,     0,     0,     0,   484,     0,     0,   485,     0,     0,
       0,   486,   487,   488,   489,   490,   491,     0,     0,     0,
       0,     0,     0,   492,   493,     0,   494,   495,   496,     0,
     139,   497,   140,   141,   142,   143,   144,     0,     0,   145,
       0,     0,     0,   146,     0,     0,   147,     0,   148,   149,
     150,   151,   152,   153,   154,   155,     0,   156,     0,     0,
    1393,   157,     0,     0,     0,   158,     0,     0,   159,   160,
     161,     0,   162,     0,   163,   164,     0,     0,   165,     0,
       0,   166,   167,     0,   168,   169,     0,   170,   171,     0,
     172,   173,   174,   175,   176,   177,   178,     0,   179,   180,
     181,   182,   183,   184,   185,     0,   186,   187,   188,   189,
     190,   191,   192,   193,     0,   194,   195,     0,   196,   197,
     198,   199,   200,     0,   201,     0,     0,   202,     0,     0,
     203,     0,     0,   204,     0,   205,     0,     0,     0,   206,
     207,   208,     0,     0,   209,     0,     0,     0,     0,   210,
     211,     0,     0,     0,     0,   212,     0,   213,     0,     0,
       0,   214,     0,   215,   216,   217,   218,     0,     0,     0,
     219,     0,     0,   220,   221,   222,     0,     0,     0,   223,
       0,   224,   225,     0,   226,   227,   228,     0,     0,   229,
     230,     0,   231,   232,   233,   234,   235,   236,     0,     0,
     237,   238,   239,     0,     0,   240,   241,     0,   242,   243,
     244,     0,     0,   245,     0,     0,     0,   246,     0,   247,
       0,   248,     0,   249,   250,   251,   252,   253,   254,     0,
     255,     0,     0,     0,   256,   257,   258,     0,   259,     0,
       0,     0,   260,   261,     0,     0,     0,   262,   263,   264,
     265,     0,     0,   266,   267,   268,     0,   269,     0,   270,
       0,     0,     0,     0,   271,   272,     0,     0,     0,   273,
       0,   274,   275,     0,   276,   277,     0,     0,     0,   278,
       0,     0,   279,   280,   281,     0,     0,   282,     0,     0,
     283,   284,   626,     0,     0,     0,     0,   285,   286,     0,
     287,     0,   288,     0,   289,   290,     0,     0,     0,     0,
       0,     0,     0,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,     0,
     307,   308,   309,   310,     0,   311,   312,   313,   314,     0,
     315,   316,     0,     0,     0,     0,   317,   318,   319,   320,
     321,   322,     0,     0,   323,   324,     0,   325,     0,   326,
       0,   327,   328,   329,   330,   331,   332,   333,   334,   335,
       0,     0,   336,   337,     0,     0,   338,   339,   340,   341,
       0,     0,     0,   342,   343,     0,     0,     0,     0,   344,
     345,   346,     0,   347,   348,   349,   350,     0,   351,   352,
       0,     0,     0,     0,     0,     0,     0,     0,   353,   354,
     355,     0,     0,   356,     0,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,     0,     0,   369,
     370,   371,     0,   372,     0,   373,   374,   375,   376,   377,
       0,   378,   379,   380,     0,     0,   381,     0,     0,     0,
     382,   383,   384,   385,   386,     0,     0,   387,   388,   389,
     390,   391,     0,   392,   393,     0,   394,   395,   396,     0,
       0,   397,     0,   398,     0,   399,   400,     0,   401,   402,
       0,     0,     0,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,     0,   413,   414,     0,     0,     0,   415,
     416,   417,   418,     0,     0,     0,   419,     0,     0,     0,
     420,     0,   421,   422,   423,   424,   425,   426,     0,   427,
     428,   429,   430,   431,   432,     0,     0,     0,     0,     0,
       0,   433,   434,     0,   435,     0,     0,   436,     0,     0,
     437,   438,   439,     0,     0,   440,   441,     0,   442,   443,
     444,   445,   446,   447,     0,     0,   448,   449,   450,   451,
       0,   452,   453,     0,   454,     0,   455,   456,   457,   458,
       0,   136,   459,   460,     0,   461,   462,   463,   464,     0,
       0,     0,     0,     0,   465,   466,   467,     0,     0,     0,
     468,   469,   470,   471,     0,   472,   473,     0,   474,   475,
       0,   476,   477,     0,     0,   478,     0,     0,   479,     0,
     480,     0,   481,   482,   483,     0,     0,     0,     0,     0,
       0,   484,     0,     0,   485,     0,     0,     0,   486,   487,
     488,   489,   490,   491,     0,     0,     0,     0,     0,     0,
     492,   493,     0,   494,   495,   496,     0,   139,   497,   140,
     141,   142,   143,   144,     0,     0,   145,     0,     0,     0,
     146,     0,     0,   147,     0,   148,   149,   150,   151,   152,
     153,   154,   155,     0,   156,     0,     0,     0,   157,     0,
       0,     0,   158,     0,     0,   159,   160,   161,     0,   162,
       0,   163,   164,     0,     0,   165,     0,     0,   166,   167,
       0,   168,   169,     0,   170,   171,     0,   172,   173,   174,
     175,   176,   177,   178,     0,   179,   180,   181,   182,   183,
     184,   185,     0,   186,   187,   188,   189,   190,   191,   192,
     193,     0,   194,   195,     0,   196,   197,   198,   199,   200,
       0,   201,     0,     0,   202,     0,     0,   203,     0,     0,
     204,     0,   205,     0,     0,     0,   206,   207,   208,     0,
       0,   209,     0,     0,     0,     0,   210,   211,     0,     0,
       0,     0,   212,     0,   213,     0,     0,     0,   214,     0,
     215,   216,   217,   218,     0,     0,     0,   219,     0,     0,
     220,   221,   222,     0,     0,     0,   223,     0,   224,   225,
       0,   226,   227,   228,     0,     0,   229,   230,     0,   231,
     232,   233,   234,   235,   236,     0,     0,   237,   238,   239,
       0,     0,   240,   241,     0,   242,   243,   244,     0,     0,
     245,     0,     0,     0,   246,     0,   247,     0,   248,     0,
     249,   250,   251,   252,   253,   254,     0,   255,     0,     0,
       0,   256,   257,   258,     0,   259,     0,     0,     0,   260,
     261,     0,     0,     0,   262,   263,   264,   265,     0,     0,
     266,   267,   268,     0,   269,     0,   270,     0,     0,     0,
       0,   271,   272,     0,     0,     0,   273,     0,   274,   275,
       0,   276,   277,     0,     0,     0,   278,     0,     0,   279,
     280,   281,     0,     0,   282,     0,     0,   283,   284,   626,
       0,     0,     0,     0,   285,   286,     0,   287,     0,   288,
       0,   289,   290,     0,     0,     0,     0,     0,     0,     0,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,     0,   307,   308,   309,
     310,     0,   311,   312,   313,   314,     0,   315,   316,     0,
       0,     0,     0,   317,   318,   319,   320,   321,   322,     0,
       0,   323,   324,     0,   325,     0,   326,     0,   327,   328,
     329,   330,   331,   332,   333,   334,   335,     0,     0,   336,
     337,     0,     0,   338,   339,   340,   341,     0,     0,     0,
     342,   343,     0,     0,     0,     0,   344,   345,   346,     0,
     347,   348,   349,   350,     0,   351,   352,     0,     0,     0,
       0,     0,     0,     0,     0,   353,   354,   355,     0,     0,
     356,     0,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,     0,     0,   369,   370,   371,     0,
     372,     0,   373,   374,   375,   376,   377,     0,   378,   379,
     380,     0,     0,   381,     0,     0,     0,   382,   383,   384,
     385,   386,     0,     0,   387,   388,   389,   390,   391,     0,
     392,   393,     0,   394,   395,   396,     0,     0,   397,     0,
     398,     0,   399,   400,     0,   401,   402,     0,     0,     0,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
       0,   413,   414,     0,     0,     0,   415,   416,   417,   418,
       0,     0,     0,   419,     0,     0,     0,   420,     0,   421,
     422,   423,   424,   425,   426,     0,   427,   428,   429,   430,
     431,   432,     0,     0,     0,     0,     0,     0,   433,   434,
       0,   435,     0,     0,   436,     0,     0,   437,   438,   439,
       0,     0,   440,   441,     0,   442,   443,   444,   445,   446,
     447,     0,     0,   448,   449,   450,   451,     0,   452,   453,
       0,   454,     0,   455,   456,   457,   458,     0,   136,   459,
     460,     0,   461,   462,   463,   464,     0,     0,     0,     0,
       0,   465,   466,   467,     0,     0,     0,   468,   469,   470,
     471,     0,   472,   473,     0,   474,   475,     0,   476,   477,
       0,     0,   478,     0,     0,   479,     0,   480,     0,   481,
     482,   483,     0,     0,     0,     0,     0,     0,   484,     0,
       0,   485,     0,     0,     0,   486,   487,   488,   489,   490,
     491,     0,     0,     0,     0,     0,     0,   492,   493,     0,
     494,   495,   496,     0,   139,   497,   140,   141,   142,   143,
     144,     0,     0,   145,     0,     0,     0,   146,  2855,     0,
     147,     0,   148,   149,   150,   151,   152,   153,   154,   155,
       0,   156,     0,     0,     0,   157,     0,     0,     0,   158,
       0,     0,   159,   160,   161,     0,   162,     0,   163,   164,
       0,     0,   165,     0,     0,   166,   167,     0,   168,   169,
       0,   170,   171,     0,   172,   173,   174,   175,   176,   177,
     178,     0,   179,   180,   181,   182,   183,   184,   185,     0,
     186,   187,   188,   189,   190,   191,   192,   193,     0,   194,
     195,     0,   196,   197,   198,   199,   200,     0,   201,     0,
       0,   202,     0,     0,   203,     0,     0,   204,     0,   205,
       0,     0,     0,   206,   207,   208,     0,     0,   209,     0,
       0,     0,     0,   210,   211,     0,     0,     0,     0,   212,
       0,   213,     0,     0,     0,   214,     0,   215,   216,   217,
     218,     0,     0,     0,   219,     0,     0,   220,   221,   222,
       0,     0,     0,   223,     0,   224,   225,     0,   226,   227,
     228,     0,     0,   229,   230,     0,   231,   232,   233,   234,
     235,   236,     0,     0,   237,   238,   239,     0,     0,   240,
     241,     0,   242,   243,   244,     0,     0,   245,     0,     0,
       0,   246,     0,   247,     0,   248,     0,   249,   250,   251,
     252,   253,   254,     0,   255,     0,     0,     0,   256,   257,
     258,     0,   259,     0,     0,     0,   260,   261,     0,     0,
       0,   262,   263,   264,   265,     0,     0,   266,   267,   268,
       0,   269,     0,   270,     0,     0,     0,     0,   271,   272,
       0,     0,     0,   273,     0,   274,   275,     0,   276,   277,
       0,     0,     0,   278,     0,     0,   279,   280,   281,     0,
       0,   282,     0,     0,   283,   284,     0,     0,     0,     0,
       0,   285,   286,     0,   287,     0,   288,     0,   289,   290,
       0,     0,     0,     0,     0,     0,     0,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,     0,   307,   308,   309,   310,     0,   311,
     312,   313,   314,     0,   315,   316,     0,     0,     0,     0,
     317,   318,   319,   320,   321,   322,     0,     0,   323,   324,
       0,   325,     0,   326,     0,   327,   328,   329,   330,   331,
     332,   333,   334,   335,     0,     0,   336,   337,     0,     0,
     338,   339,   340,   341,     0,     0,     0,   342,   343,     0,
       0,     0,     0,   344,   345,   346,     0,   347,   348,   349,
     350,     0,   351,   352,     0,     0,     0,     0,     0,     0,
       0,     0,   353,   354,   355,     0,     0,   356,     0,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,     0,     0,   369,   370,   371,     0,   372,     0,   373,
     374,   375,   376,   377,     0,   378,   379,   380,     0,     0,
     381,     0,     0,     0,   382,   383,   384,   385,   386,     0,
       0,   387,   388,   389,   390,   391,     0,   392,   393,     0,
     394,   395,   396,     0,     0,   397,     0,   398,     0,   399,
     400,     0,   401,   402,     0,     0,     0,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,     0,   413,   414,
       0,     0,     0,   415,   416,   417,   418,     0,     0,     0,
     419,     0,     0,     0,   420,     0,   421,   422,   423,   424,
     425,   426,     0,   427,   428,   429,   430,   431,   432,     0,
       0,     0,     0,     0,     0,   433,   434,     0,   435,     0,
       0,   436,     0,     0,   437,   438,   439,     0,     0,   440,
     441,     0,   442,   443,   444,   445,   446,   447,     0,     0,
     448,   449,   450,   451,     0,   452,   453,     0,   454,     0,
     455,   456,   457,   458,     0,   136,   459,   460,     0,   461,
     462,   463,   464,     0,     0,     0,     0,     0,   465,   466,
     467,     0,     0,     0,   468,   469,   470,   471,     0,   472,
     473,     0,   474,   475,     0,   476,   477,     0,     0,   478,
       0,     0,   479,     0,   480,     0,   481,   482,   483,     0,
       0,     0,     0,     0,     0,   484,     0,     0,   485,     0,
       0,     0,   486,   487,   488,   489,   490,   491,     0,     0,
       0,     0,     0,     0,   492,   493,     0,   494,   495,   496,
       0,   139,   497,   140,   141,   142,   143,   144,     0,     0,
     145,     0,     0,     0,   146,     0,     0,   147,     0,   148,
     149,   150,   151,   152,   153,   154,   155,     0,   156,     0,
       0,     0,   157,     0,     0,     0,   158,     0,     0,   159,
     160,   161,     0,   162,     0,   163,   164,     0,     0,   165,
       0,     0,   166,   167,     0,   168,   169,     0,   170,   171,
       0,   172,   173,   174,   175,   176,   177,   178,     0,   179,
     180,   181,   182,   183,   184,   185,     0,   186,   187,   188,
     189,   190,   191,   192,   193,     0,   194,   195,     0,   196,
     197,   198,   199,   200,  4451,   201,     0,     0,   202,     0,
       0,   203,     0,     0,   204,     0,   205,     0,     0,     0,
     206,   207,   208,     0,     0,   209,     0,     0,     0,     0,
     210,   211,     0,     0,     0,     0,   212,     0,   213,     0,
       0,     0,   214,     0,   215,   216,   217,   218,     0,     0,
       0,   219,     0,     0,   220,   221,   222,     0,     0,     0,
     223,     0,   224,   225,     0,   226,   227,   228,     0,     0,
     229,   230,     0,   231,   232,   233,   234,   235,   236,     0,
    4452,   237,   238,   239,     0,     0,   240,   241,     0,   242,
     243,   244,     0,     0,   245,     0,     0,     0,   246,     0,
     247,     0,   248,     0,   249,   250,   251,   252,   253,   254,
       0,   255,     0,     0,     0,   256,   257,   258,     0,   259,
       0,     0,     0,   260,   261,     0,     0,     0,   262,   263,
     264,   265,     0,     0,   266,   267,   268,     0,   269,     0,
     270,     0,     0,     0,     0,   271,   272,     0,     0,     0,
     273,     0,   274,   275,     0,   276,   277,     0,     0,     0,
     278,     0,     0,   279,   280,   281,     0,     0,   282,     0,
       0,   283,   284,     0,     0,     0,     0,     0,   285,   286,
       0,   287,     0,   288,     0,   289,   290,     0,     0,     0,
       0,     0,     0,     0,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
       0,   307,   308,   309,   310,     0,   311,   312,   313,   314,
       0,   315,   316,     0,     0,     0,     0,   317,   318,   319,
     320,   321,   322,     0,     0,   323,   324,     0,   325,     0,
     326,     0,   327,   328,   329,   330,   331,   332,   333,   334,
     335,     0,     0,   336,   337,     0,     0,   338,   339,   340,
     341,     0,     0,     0,   342,   343,     0,     0,     0,     0,
     344,   345,   346,     0,   347,   348,   349,   350,     0,   351,
     352,     0,     0,     0,     0,     0,     0,     0,     0,   353,
     354,   355,     0,     0,   356,     0,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,     0,     0,
     369,   370,   371,     0,   372,     0,   373,   374,   375,   376,
     377,     0,   378,   379,   380,     0,     0,   381,     0,     0,
       0,   382,   383,   384,   385,   386,     0,     0,   387,   388,
     389,   390,   391,     0,   392,   393,     0,   394,   395,   396,
       0,     0,   397,     0,   398,     0,   399,   400,     0,   401,
     402,     0,     0,     0,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,     0,   413,   414,     0,     0,     0,
     415,   416,   417,   418,     0,     0,     0,   419,     0,     0,
       0,   420,     0,   421,   422,   423,   424,   425,   426,     0,
     427,   428,   429,   430,   431,   432,     0,     0,     0,     0,
       0,     0,   433,   434,     0,   435,     0,     0,   436,     0,
       0,   437,   438,   439,     0,     0,   440,   441,     0,   442,
     443,   444,   445,   446,   447,     0,     0,   448,   449,   450,
     451,     0,   452,   453,     0,   454,     0,   455,   456,   457,
     458,     0,     0,   459,   460,     0,   461,   462,   463,   464,
       0,     0,     0,     0,     0,   465,   466,   467,     0,     0,
       0,   468,   469,   470,   471,     0,   472,   473,     0,   474,
     475,     0,   476,   477,     0,     0,   478,     0,     0,   479,
       0,   480,     0,   481,   482,   483,     0,     0,     0,     0,
       0,     0,   484,     0,     0,   485,     0,     0,     0,   486,
     487,   488,   489,   490,   491,     0,     0,     0,     0,     0,
       0,   492,   493,     0,   494,   495,   496,     0,   139,   497,
     140,   141,   142,   143,   144,     0,     0,   145,     0,     0,
       0,   146,     0,     0,   147,     0,   148,   149,   150,   151,
     152,   153,   154,   155,     0,   156,     0,     0,     0,   157,
       0,     0,     0,   158,     0,     0,   159,   160,   161,     0,
     162,     0,   163,   164,     0,     0,   165,     0,     0,   166,
     167,     0,   168,   169,     0,   170,   171,     0,   172,   173,
     174,   175,   176,   177,   178,     0,   179,   180,   181,   182,
     183,   184,   185,     0,   186,   187,   188,   189,   190,   191,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   199,
     200,     0,   201,     0,     0,   202,     0,     0,   203,     0,
       0,   204,     0,   205,     0,     0,     0,   206,   207,   208,
       0,     0,   209,     0,     0,     0,     0,   210,   211,     0,
       0,     0,     0,   212,     0,   213,     0,     0,     0,   214,
       0,   215,   216,   217,   218,     0,     0,     0,   219,     0,
       0,   220,   221,   222,     0,     0,     0,   223,     0,   224,
     225,     0,   226,   227,   228,     0,     0,   229,   230,     0,
     231,   232,   233,   234,   235,   236,     0,     0,   237,   238,
     239,     0,     0,   240,   241,     0,   242,   243,   244,     0,
       0,   245,     0,     0,     0,   246,     0,   247,     0,   248,
       0,   249,   250,   251,   252,   253,   254,     0,   255,     0,
       0,     0,   256,   257,   258,     0,   259,     0,     0,     0,
     260,   261,     0,     0,     0,   262,   263,   264,   265,     0,
       0,   266,   267,   268,     0,   269,     0,   270,     0,     0,
       0,     0,   271,   272,     0,     0,     0,   273,     0,   274,
     275,     0,   276,   277,     0,     0,     0,   278,     0,     0,
     279,   280,   281,     0,     0,   282,     0,     0,   283,   284,
       0,     0,     0,     0,     0,   285,   286,     0,   287,     0,
     288,     0,   289,   290,     0,     0,     0,     0,     0,     0,
       0,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,     0,   307,   308,
     309,   310,     0,   311,   312,   313,   314,     0,   315,   316,
       0,     0,     0,     0,   317,   318,   319,   320,   321,   322,
       0,     0,   323,   324,     0,   325,     0,   326,     0,   327,
     328,   329,   330,   331,   332,   333,   334,   335,     0,     0,
     336,   337,     0,     0,   338,   339,   340,   341,     0,     0,
       0,   342,   343,     0,     0,     0,     0,   344,   345,   346,
       0,   347,   348,   349,   350,     0,   351,   352,     0,     0,
       0,     0,     0,     0,     0,     0,   353,   354,   355,     0,
       0,   356,     0,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,     0,     0,   369,   370,   371,
       0,   372,     0,   373,   374,   375,   376,   377,     0,   378,
     379,   380,     0,     0,   381,     0,     0,     0,   382,   383,
     384,   385,   386,     0,     0,   387,   388,   389,   390,   391,
       0,   392,   393,     0,   394,   395,   396,     0,     0,   397,
       0,   398,     0,   399,   400,     0,   401,   402,     0,     0,
       0,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,     0,   413,   414,     0,     0,     0,   415,   416,   417,
     418,     0,     0,     0,   419,     0,     0,     0,   420,     0,
     421,   422,   423,   424,   425,   426,     0,   427,   428,   429,
     430,   431,   432,     0,     0,     0,   570,     0,     0,   433,
     434,     0,   435,     0,     0,   436,     0,     0,   437,   438,
     439,     0,     0,   440,   441,     0,   442,   443,   444,   445,
     446,   447,     0,     0,   448,   449,   450,   451,     0,   452,
     453,     0,   454,     0,   455,   456,   457,   458,     0,     0,
     459,   460,     0,   461,   462,   463,   464,     0,     0,     0,
       0,     0,   465,   466,   467,     0,     0,     0,   468,   469,
     470,   471,     0,   472,   473,     0,   474,   475,     0,   476,
     477,     0,     0,   478,     0,     0,   479,     0,   480,     0,
     481,   482,   483,     0,     0,     0,     0,     0,     0,   484,
       0,     0,   485,     0,     0,     0,   486,   487,   488,   489,
     490,   491,     0,     0,     0,     0,     0,     0,   492,   493,
       0,   494,   495,   496,     0,   139,   497,   140,   141,   142,
     143,   144,     0,     0,   145,     0,     0,     0,   146,     0,
       0,   147,     0,   148,   149,   150,   151,   152,   153,   154,
     155,     0,   156,     0,     0,     0,   157,     0,     0,     0,
     158,     0,     0,   159,   160,   161,     0,   162,     0,   163,
     164,     0,     0,   165,     0,     0,   166,   167,     0,   168,
     169,     0,   170,   171,     0,   172,   173,   174,   175,   176,
     177,   178,     0,   179,   180,   181,   182,   183,   184,   185,
       0,   186,   187,   188,   189,   190,   191,   192,   193,     0,
     194,   195,     0,   196,   197,   198,   199,   200,     0,   201,
       0,     0,   202,     0,     0,   203,     0,     0,   204,     0,
     205,     0,     0,     0,   206,   207,   208,     0,     0,   209,
       0,     0,     0,     0,   210,   211,     0,     0,     0,     0,
     212,     0,   213,     0,     0,     0,   214,     0,   215,   216,
     217,   218,     0,     0,     0,   219,     0,     0,   220,   221,
     222,     0,     0,     0,   223,     0,   224,   225,     0,   226,
     227,   228,     0,     0,   229,   230,     0,   231,   232,   233,
     234,   235,   236,     0,     0,   237,   238,   239,     0,     0,
     240,   241,     0,   242,   243,   244,     0,     0,   245,     0,
       0,     0,   246,  1098,   247,     0,   248,     0,   249,   250,
     251,   252,   253,   254,     0,   255,     0,     0,     0,   256,
     257,   258,     0,   259,     0,     0,     0,   260,   261,     0,
       0,     0,   262,   263,   264,   265,     0,     0,   266,   267,
     268,     0,   269,     0,   270,     0,     0,     0,     0,   271,
     272,     0,     0,     0,   273,     0,   274,   275,     0,   276,
     277,     0,     0,     0,   278,     0,     0,   279,   280,   281,
       0,     0,   282,     0,     0,   283,   284,     0,     0,     0,
       0,     0,   285,   286,     0,   287,     0,   288,     0,   289,
     290,     0,     0,     0,     0,     0,     0,     0,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,     0,   307,   308,   309,   310,     0,
     311,   312,   313,   314,     0,   315,   316,     0,     0,     0,
       0,   317,   318,   319,   320,   321,   322,     0,     0,   323,
     324,     0,   325,     0,   326,     0,   327,   328,   329,   330,
     331,   332,   333,   334,   335,     0,     0,   336,   337,     0,
       0,   338,   339,   340,   341,     0,     0,     0,   342,   343,
       0,     0,     0,     0,   344,   345,   346,     0,   347,   348,
     349,   350,     0,   351,   352,     0,     0,     0,     0,     0,
       0,     0,     0,   353,   354,   355,     0,     0,   356,     0,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,     0,     0,   369,   370,   371,     0,   372,     0,
     373,   374,   375,   376,   377,     0,   378,   379,   380,     0,
       0,   381,     0,     0,     0,   382,   383,   384,   385,   386,
       0,     0,   387,   388,   389,   390,   391,     0,   392,   393,
       0,   394,   395,   396,     0,     0,   397,     0,   398,     0,
     399,   400,     0,   401,   402,     0,     0,     0,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,     0,   413,
     414,     0,     0,     0,   415,   416,   417,   418,     0,     0,
       0,   419,     0,     0,     0,   420,     0,   421,   422,   423,
     424,   425,   426,     0,   427,   428,   429,   430,   431,   432,
       0,     0,     0,     0,     0,     0,   433,   434,     0,   435,
       0,     0,   436,     0,     0,   437,   438,   439,     0,     0,
     440,   441,     0,   442,   443,   444,   445,   446,   447,     0,
       0,   448,   449,   450,   451,     0,   452,   453,     0,   454,
       0,   455,   456,   457,   458,     0,     0,   459,   460,     0,
     461,   462,   463,   464,     0,     0,     0,     0,     0,   465,
     466,   467,     0,     0,     0,   468,   469,   470,   471,     0,
     472,   473,     0,   474,   475,     0,   476,   477,     0,     0,
     478,     0,     0,   479,     0,   480,     0,   481,   482,   483,
       0,     0,     0,     0,     0,     0,   484,     0,     0,   485,
       0,     0,     0,   486,   487,   488,   489,   490,   491,     0,
       0,     0,     0,     0,     0,   492,   493,     0,   494,   495,
     496,     0,   139,   497,   140,   141,   142,   143,   144,     0,
       0,   145,     0,     0,     0,   146,     0,     0,   147,     0,
     148,   149,   150,   151,   152,   153,   154,   155,     0,   156,
       0,     0,     0,   157,     0,     0,     0,   158,     0,     0,
     159,   160,   161,     0,   162,     0,   163,   164,     0,     0,
     165,     0,     0,   166,   167,     0,   168,   169,     0,   170,
     171,     0,   172,   173,   174,   175,   176,   177,   178,     0,
     179,   180,   181,   182,   183,   184,   185,     0,   186,   187,
     188,   189,   190,   191,   192,   193,     0,   194,   195,     0,
     196,   197,   198,   199,   200,     0,   201,     0,     0,   202,
       0,     0,   203,     0,     0,   204,     0,   205,     0,     0,
       0,   206,   207,   208,     0,     0,   209,     0,     0,     0,
       0,   210,   211,     0,     0,     0,   921,   212,     0,   213,
       0,     0,     0,   214,     0,   215,   216,   217,   218,     0,
       0,     0,   219,     0,     0,   220,   221,   222,     0,     0,
       0,   223,     0,   224,   225,     0,   226,   227,   228,     0,
       0,   229,   230,     0,   231,   232,   233,   234,   235,   236,
       0,     0,   237,   238,   239,     0,     0,   240,   241,     0,
     242,   243,   244,     0,     0,   245,     0,     0,     0,   246,
       0,   247,     0,   248,     0,   249,   250,   251,   252,   253,
     254,     0,   255,     0,     0,     0,   256,   257,   258,     0,
     259,     0,     0,     0,   260,   261,     0,     0,     0,   262,
     263,   264,   265,     0,     0,   266,   267,   268,     0,   269,
       0,   270,     0,     0,     0,     0,   271,   272,     0,     0,
       0,   273,     0,   274,   275,     0,   276,   277,     0,     0,
       0,   278,     0,     0,   279,   280,   281,     0,     0,   282,
       0,     0,   283,   284,     0,     0,     0,     0,     0,   285,
     286,     0,   287,     0,   288,     0,   289,   290,     0,     0,
       0,     0,     0,     0,     0,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,     0,   307,   308,   309,   310,     0,   311,   312,   313,
     314,     0,   315,   316,     0,     0,     0,     0,   317,   318,
     319,   320,   321,   322,     0,     0,   323,   324,     0,   325,
       0,   326,     0,   327,   328,   329,   330,   331,   332,   333,
     334,   335,     0,     0,   336,   337,     0,     0,   338,   339,
     340,   341,     0,     0,     0,   342,   343,     0,     0,     0,
       0,   344,   345,   346,     0,   347,   348,   349,   350,     0,
     351,   352,     0,     0,     0,     0,     0,     0,     0,     0,
     353,   354,   355,     0,     0,   356,     0,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,     0,
       0,   369,   370,   371,     0,   372,     0,   373,   374,   375,
     376,   377,     0,   378,   379,   380,     0,     0,   381,     0,
       0,     0,   382,   383,   384,   385,   386,     0,     0,   387,
     388,   389,   390,   391,     0,   392,   393,     0,   394,   395,
     396,     0,     0,   397,     0,   398,     0,   399,   400,     0,
     401,   402,     0,     0,     0,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,     0,   413,   414,     0,     0,
       0,   415,   416,   417,   418,     0,     0,     0,   419,     0,
       0,     0,   420,     0,   421,   422,   423,   424,   425,   426,
       0,   427,   428,   429,   430,   431,   432,     0,     0,     0,
       0,     0,     0,   433,   434,     0,   435,     0,     0,   436,
       0,     0,   437,   438,   439,     0,     0,   440,   441,     0,
     442,   443,   444,   445,   446,   447,     0,     0,   448,   449,
     450,   451,     0,   452,   453,     0,   454,     0,   455,   456,
     457,   458,     0,     0,   459,   460,     0,   461,   462,   463,
     464,     0,     0,     0,     0,     0,  1887,   466,   467,     0,
       0,     0,   468,   469,   470,   471,     0,   472,   473,     0,
     474,   475,     0,   476,   477,     0,     0,   478,     0,     0,
     479,     0,   480,     0,   481,   482,   483,     0,     0,     0,
       0,     0,     0,   484,     0,     0,   485,     0,     0,     0,
     486,   487,   488,   489,   490,   491,     0,     0,     0,     0,
       0,     0,   492,   493,     0,   494,   495,   496,     0,   139,
     497,   140,   141,   142,   143,   144,     0,     0,   145,     0,
       0,     0,   146,     0,     0,   147,     0,   148,   149,   150,
     151,   152,   153,   154,   155,     0,   156,     0,     0,     0,
     157,     0,     0,     0,   158,     0,     0,   159,   160,   161,
       0,   162,     0,   163,   164,     0,     0,   165,     0,     0,
     166,   167,     0,   168,   169,     0,   170,   171,     0,   172,
     173,   174,   175,   176,   177,   178,     0,   179,   180,   181,
     182,   183,   184,   185,     0,   186,   187,   188,   189,   190,
     191,   192,   193,     0,   194,   195,     0,   196,   197,   198,
     199,   200,     0,   201,     0,     0,   202,     0,     0,   203,
       0,     0,   204,     0,   205,     0,     0,     0,   206,   207,
     208,     0,     0,   209,     0,     0,     0,     0,   210,   211,
       0,     0,     0,  2094,   212,     0,   213,     0,     0,     0,
     214,     0,   215,   216,   217,   218,     0,     0,     0,   219,
       0,     0,   220,   221,   222,     0,     0,     0,   223,     0,
     224,   225,     0,   226,   227,   228,     0,     0,   229,   230,
       0,   231,   232,   233,   234,   235,   236,     0,     0,   237,
     238,   239,     0,     0,   240,   241,     0,   242,   243,   244,
       0,     0,   245,     0,     0,     0,   246,     0,   247,     0,
     248,     0,   249,   250,   251,   252,   253,   254,     0,   255,
       0,     0,     0,   256,   257,   258,     0,   259,     0,     0,
       0,   260,   261,     0,     0,     0,   262,   263,   264,   265,
       0,     0,   266,   267,   268,     0,   269,     0,   270,     0,
       0,     0,     0,   271,   272,     0,     0,     0,   273,     0,
     274,   275,     0,   276,   277,     0,     0,     0,   278,     0,
       0,   279,   280,   281,     0,     0,   282,     0,     0,   283,
     284,     0,     0,     0,     0,     0,   285,   286,     0,   287,
       0,   288,     0,   289,   290,     0,     0,     0,     0,     0,
       0,     0,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,     0,   307,
     308,   309,   310,     0,   311,   312,   313,   314,     0,   315,
     316,     0,     0,     0,     0,   317,   318,   319,   320,   321,
     322,     0,     0,   323,   324,     0,   325,     0,   326,     0,
     327,   328,   329,   330,   331,   332,   333,   334,   335,     0,
       0,   336,   337,     0,     0,   338,   339,   340,   341,     0,
       0,     0,   342,   343,     0,     0,     0,     0,   344,   345,
     346,     0,   347,   348,   349,   350,     0,   351,   352,     0,
       0,     0,     0,     0,     0,     0,     0,   353,   354,   355,
       0,     0,   356,     0,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,     0,     0,   369,   370,
     371,     0,   372,     0,   373,   374,   375,   376,   377,     0,
     378,   379,   380,     0,     0,   381,     0,     0,     0,   382,
     383,   384,   385,   386,     0,     0,   387,   388,   389,   390,
     391,     0,   392,   393,     0,   394,   395,   396,     0,     0,
     397,     0,   398,     0,   399,   400,     0,   401,   402,     0,
       0,     0,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,     0,   413,   414,     0,     0,     0,   415,   416,
     417,   418,     0,     0,     0,   419,     0,     0,     0,   420,
       0,   421,   422,   423,   424,   425,   426,     0,   427,   428,
     429,   430,   431,   432,     0,     0,     0,     0,     0,     0,
     433,   434,     0,   435,     0,     0,   436,     0,     0,   437,
     438,   439,     0,     0,   440,   441,     0,   442,   443,   444,
     445,   446,   447,     0,     0,   448,   449,   450,   451,     0,
     452,   453,     0,   454,     0,   455,   456,   457,   458,     0,
       0,   459,   460,     0,   461,   462,   463,   464,     0,     0,
       0,     0,     0,   465,   466,   467,     0,     0,     0,   468,
     469,   470,   471,     0,   472,   473,     0,   474,   475,     0,
     476,   477,     0,     0,   478,     0,     0,   479,     0,   480,
       0,   481,   482,   483,     0,     0,     0,     0,     0,     0,
     484,     0,     0,   485,     0,     0,     0,   486,   487,   488,
     489,   490,   491,     0,     0,     0,     0,     0,     0,   492,
     493,     0,   494,   495,   496,     0,   139,   497,   140,   141,
     142,   143,   144,     0,     0,   145,     0,     0,     0,   146,
       0,     0,   147,     0,   148,   149,   150,   151,   152,   153,
     154,   155,     0,   156,     0,     0,     0,   157,     0,     0,
       0,   158,     0,     0,   159,   160,   161,     0,   162,     0,
     163,   164,     0,     0,   165,     0,     0,   166,   167,     0,
     168,   169,     0,   170,   171,     0,   172,   173,   174,   175,
     176,   177,   178,     0,   179,   180,   181,   182,   183,   184,
     185,     0,   186,   187,   188,   189,   190,   191,   192,   193,
       0,   194,   195,     0,   196,   197,   198,   199,   200,     0,
     201,     0,     0,   202,     0,     0,   203,     0,     0,   204,
       0,   205,     0,     0,     0,   206,   207,   208,     0,     0,
     209,     0,     0,     0,     0,   210,   211,     0,     0,     0,
     921,   212,     0,   213,     0,     0,     0,   214,     0,   215,
     216,   217,   218,     0,     0,     0,   219,     0,     0,   220,
     221,   222,     0,     0,     0,   223,     0,   224,   225,     0,
     226,   227,   228,     0,     0,   229,   230,     0,   231,   232,
     233,   234,   235,   236,     0,     0,   237,   238,   239,     0,
       0,   240,   241,     0,   242,   243,   244,     0,     0,   245,
       0,     0,     0,   246,     0,   247,     0,   248,     0,   249,
     250,   251,   252,   253,   254,     0,   255,     0,     0,     0,
     256,   257,   258,     0,   259,     0,     0,     0,   260,   261,
       0,     0,     0,   262,   263,   264,   265,     0,     0,   266,
     267,   268,     0,   269,     0,   270,     0,     0,     0,     0,
     271,   272,     0,     0,     0,   273,     0,   274,   275,     0,
     276,   277,     0,     0,     0,   278,     0,     0,   279,   280,
     281,     0,     0,   282,     0,     0,   283,   284,     0,     0,
       0,     0,     0,   285,   286,     0,   287,     0,   288,     0,
     289,   290,     0,     0,     0,     0,     0,     0,     0,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,     0,   307,   308,   309,   310,
       0,   311,   312,   313,   314,     0,   315,   316,     0,     0,
       0,     0,   317,   318,   319,   320,   321,   322,     0,     0,
     323,   324,     0,   325,     0,   326,     0,   327,   328,   329,
     330,   331,   332,   333,   334,   335,     0,     0,   336,   337,
       0,     0,   338,   339,   340,   341,     0,     0,     0,   342,
     343,     0,     0,     0,     0,   344,   345,   346,     0,   347,
     348,   349,   350,     0,   351,   352,     0,     0,     0,     0,
       0,     0,     0,     0,   353,   354,   355,     0,     0,   356,
       0,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,     0,     0,   369,   370,   371,     0,   372,
       0,   373,   374,   375,   376,   377,     0,   378,   379,   380,
       0,     0,   381,     0,     0,     0,   382,   383,   384,   385,
     386,     0,     0,   387,   388,   389,   390,   391,     0,   392,
     393,     0,   394,   395,   396,     0,     0,   397,     0,   398,
       0,   399,   400,     0,   401,   402,     0,     0,     0,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,     0,
     413,   414,     0,     0,     0,   415,   416,   417,   418,     0,
       0,     0,   419,     0,     0,     0,   420,     0,   421,   422,
     423,   424,   425,   426,     0,   427,   428,   429,   430,   431,
     432,     0,     0,     0,     0,     0,     0,   433,   434,     0,
     435,     0,     0,   436,     0,     0,   437,   438,   439,     0,
       0,   440,   441,     0,   442,   443,   444,   445,   446,   447,
       0,     0,   448,   449,   450,   451,     0,   452,   453,     0,
     454,     0,   455,   456,   457,   458,     0,     0,   459,   460,
       0,   461,   462,   463,   464,     0,     0,     0,     0,     0,
     465,   466,   467,     0,     0,     0,   468,   469,   470,   471,
       0,   472,   473,     0,   474,   475,     0,   476,   477,     0,
       0,   478,     0,     0,   479,     0,   480,     0,   481,   482,
     483,     0,     0,     0,     0,     0,     0,   484,     0,     0,
     485,     0,     0,     0,   486,   487,   488,   489,   490,   491,
       0,     0,     0,     0,     0,     0,   492,   493,     0,   494,
     495,   496,     0,   139,   497,   140,   141,   142,   143,   144,
    2959,     0,   145,     0,     0,     0,   146,     0,     0,   147,
       0,   148,   149,   150,   151,   152,   153,   154,   155,     0,
     156,     0,     0,     0,   157,     0,     0,     0,   158,     0,
       0,   159,   160,   161,     0,   162,     0,   163,   164,     0,
       0,   165,     0,     0,   166,   167,     0,   168,   169,     0,
     170,   171,     0,   172,   173,   174,   175,   176,   177,   178,
       0,   179,   180,   181,   182,   183,   184,   185,     0,   186,
     187,   188,   189,   190,   191,   192,   193,     0,   194,   195,
       0,   196,   197,   198,   199,   200,     0,   201,     0,     0,
     202,     0,     0,   203,     0,     0,   204,     0,   205,     0,
       0,     0,   206,   207,   208,     0,     0,   209,     0,     0,
       0,     0,   210,   211,     0,     0,     0,     0,   212,     0,
     213,     0,     0,     0,   214,     0,   215,   216,   217,   218,
       0,     0,     0,   219,     0,     0,   220,   221,   222,     0,
       0,     0,   223,     0,   224,   225,     0,   226,   227,   228,
       0,     0,   229,   230,     0,   231,   232,   233,   234,   235,
     236,     0,     0,   237,   238,   239,     0,     0,   240,   241,
       0,   242,   243,   244,     0,     0,   245,     0,     0,     0,
     246,     0,   247,     0,   248,     0,   249,   250,   251,   252,
     253,   254,     0,   255,     0,     0,     0,   256,   257,   258,
       0,   259,     0,     0,     0,   260,   261,     0,     0,     0,
     262,   263,   264,   265,     0,     0,   266,   267,   268,     0,
     269,     0,   270,     0,     0,     0,     0,   271,   272,     0,
       0,     0,   273,     0,   274,   275,     0,   276,   277,     0,
       0,     0,   278,     0,     0,   279,   280,   281,     0,     0,
     282,     0,     0,   283,   284,     0,     0,     0,     0,     0,
     285,   286,     0,   287,     0,   288,     0,   289,   290,     0,
       0,     0,     0,     0,     0,     0,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,     0,   307,   308,   309,   310,     0,   311,   312,
     313,   314,     0,   315,   316,     0,     0,     0,     0,   317,
     318,   319,   320,   321,   322,     0,     0,   323,   324,     0,
     325,     0,   326,     0,   327,   328,   329,   330,   331,   332,
     333,   334,   335,     0,     0,   336,   337,     0,     0,   338,
     339,   340,   341,     0,     0,     0,   342,   343,     0,     0,
       0,     0,   344,   345,   346,     0,   347,   348,   349,   350,
       0,   351,   352,     0,     0,     0,     0,     0,     0,     0,
       0,   353,   354,   355,     0,     0,   356,     0,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
       0,     0,   369,   370,   371,     0,   372,     0,   373,   374,
     375,   376,   377,     0,   378,   379,   380,     0,     0,   381,
       0,     0,     0,   382,   383,   384,   385,   386,     0,     0,
     387,   388,   389,   390,   391,     0,   392,   393,     0,   394,
     395,   396,     0,     0,   397,     0,   398,     0,   399,   400,
       0,   401,   402,     0,     0,     0,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,     0,   413,   414,     0,
       0,     0,   415,   416,   417,   418,     0,     0,     0,   419,
       0,     0,     0,   420,     0,   421,   422,   423,   424,   425,
     426,     0,   427,   428,   429,   430,   431,   432,     0,     0,
       0,     0,     0,     0,   433,   434,     0,   435,     0,     0,
     436,     0,     0,   437,   438,   439,     0,     0,   440,   441,
       0,   442,   443,   444,   445,   446,   447,     0,     0,   448,
     449,   450,   451,     0,   452,   453,     0,   454,     0,   455,
     456,   457,   458,     0,     0,   459,   460,     0,   461,   462,
     463,   464,     0,     0,     0,     0,     0,   465,   466,   467,
       0,     0,     0,   468,   469,   470,   471,     0,   472,   473,
       0,   474,   475,     0,   476,   477,     0,     0,   478,     0,
       0,   479,     0,   480,     0,   481,   482,   483,     0,     0,
       0,     0,     0,     0,   484,     0,     0,   485,     0,     0,
       0,   486,   487,   488,   489,   490,   491,     0,     0,     0,
       0,     0,     0,   492,   493,     0,   494,   495,   496,     0,
     139,   497,   140,   141,   142,   143,   144,     0,     0,   145,
       0,     0,     0,   146,     0,     0,   147,     0,   148,   149,
     150,   151,   152,   153,   154,   155,     0,   156,     0,     0,
       0,   157,     0,     0,     0,   158,     0,     0,   159,   160,
     161,     0,   162,     0,   163,   164,     0,     0,   165,     0,
       0,   166,   167,     0,   168,   169,     0,   170,   171,     0,
     172,   173,   174,   175,   176,   177,   178,     0,   179,   180,
     181,   182,   183,   184,   185,     0,   186,   187,   188,   189,
     190,   191,   192,   193,     0,   194,   195,     0,   196,   197,
     198,   199,   200,     0,   201,     0,     0,   202,     0,     0,
     203,     0,     0,   204,     0,   205,     0,     0,     0,   206,
     207,   208,     0,     0,   209,     0,     0,     0,     0,   210,
     211,     0,     0,     0,     0,   212,     0,   213,     0,     0,
       0,   214,     0,   215,   216,   217,   218,     0,     0,     0,
     219,     0,     0,   220,   221,   222,     0,     0,     0,   223,
       0,   224,   225,     0,   226,   227,   228,     0,     0,   229,
     230,     0,   231,   232,   233,   234,   235,   236,     0,     0,
     237,   238,   239,     0,     0,   240,   241,     0,   242,   243,
     244,     0,     0,   245,     0,     0,     0,   246,     0,   247,
       0,   248,     0,   249,   250,   251,   252,   253,   254,     0,
     255,     0,     0,     0,   256,   257,   258,     0,   259,     0,
       0,     0,   260,   261,     0,     0,     0,   262,   263,   264,
     265,     0,     0,   266,   267,   268,     0,   269,     0,   270,
       0,     0,     0,     0,   271,   272,     0,     0,     0,   273,
       0,   274,   275,     0,   276,   277,     0,     0,     0,   278,
       0,     0,   279,   280,   281,     0,     0,   282,     0,     0,
     283,   284,     0,     0,     0,     0,     0,   285,   286,     0,
     287,     0,   288,     0,   289,   290,     0,     0,     0,     0,
       0,     0,     0,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,     0,
     307,   308,   309,   310,     0,   311,   312,   313,   314,     0,
     315,   316,     0,     0,     0,     0,   317,   318,   319,   320,
     321,   322,     0,     0,   323,   324,     0,   325,     0,   326,
       0,   327,   328,   329,   330,   331,   332,   333,   334,   335,
       0,     0,   336,   337,     0,     0,   338,   339,   340,   341,
       0,     0,     0,   342,   343,     0,     0,     0,     0,   344,
     345,   346,     0,   347,   348,   349,   350,     0,   351,   352,
       0,     0,     0,     0,     0,     0,     0,     0,   353,   354,
     355,     0,     0,   356,     0,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,     0,     0,   369,
     370,   371,  3054,   372,     0,   373,   374,   375,   376,   377,
       0,   378,   379,   380,     0,     0,   381,     0,     0,     0,
     382,   383,   384,   385,   386,     0,     0,   387,   388,   389,
     390,   391,     0,   392,   393,     0,   394,   395,   396,     0,
       0,   397,     0,   398,     0,   399,   400,     0,   401,   402,
       0,     0,     0,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,     0,   413,   414,     0,     0,     0,   415,
     416,   417,   418,     0,     0,     0,   419,     0,     0,     0,
     420,     0,   421,   422,   423,   424,   425,   426,     0,   427,
     428,   429,   430,   431,   432,     0,     0,     0,     0,     0,
       0,   433,   434,     0,   435,     0,     0,   436,     0,     0,
     437,   438,   439,     0,     0,   440,   441,     0,   442,   443,
     444,   445,   446,   447,     0,     0,   448,   449,   450,   451,
       0,   452,   453,     0,   454,     0,   455,   456,   457,   458,
       0,     0,   459,   460,     0,   461,   462,   463,   464,     0,
       0,     0,     0,     0,   465,   466,   467,     0,     0,     0,
     468,   469,   470,   471,     0,   472,   473,     0,   474,   475,
       0,   476,   477,     0,     0,   478,     0,     0,   479,     0,
     480,     0,   481,   482,   483,     0,     0,     0,     0,     0,
       0,   484,     0,     0,   485,     0,     0,     0,   486,   487,
     488,   489,   490,   491,     0,     0,     0,     0,     0,     0,
     492,   493,     0,   494,   495,   496,     0,   139,   497,   140,
     141,   142,   143,   144,     0,     0,   145,     0,     0,     0,
     146,     0,     0,   147,     0,   148,   149,   150,   151,   152,
     153,   154,   155,     0,   156,     0,     0,     0,   157,     0,
       0,     0,   158,     0,     0,   159,   160,   161,     0,   162,
       0,   163,   164,     0,     0,   165,     0,     0,   166,   167,
       0,   168,   169,     0,   170,   171,     0,   172,   173,   174,
     175,   176,   177,   178,     0,   179,   180,   181,   182,   183,
     184,   185,     0,   186,   187,   188,   189,   190,   191,   192,
     193,     0,   194,   195,     0,   196,   197,   198,   199,   200,
       0,   201,     0,     0,   202,     0,     0,   203,     0,     0,
     204,     0,   205,     0,     0,     0,   206,   207,   208,     0,
       0,   209,     0,     0,     0,     0,   210,   211,     0,     0,
       0,     0,   212,     0,   213,     0,     0,     0,   214,     0,
     215,   216,   217,   218,     0,     0,     0,   219,     0,     0,
     220,   221,   222,     0,     0,     0,   223,     0,   224,   225,
       0,   226,   227,   228,     0,     0,   229,   230,     0,   231,
     232,   233,   234,   235,   236,     0,     0,   237,   238,   239,
       0,     0,   240,   241,     0,   242,   243,   244,     0,     0,
     245,     0,     0,     0,   246,     0,   247,     0,   248,     0,
     249,   250,   251,   252,   253,   254,     0,   255,     0,     0,
       0,   256,   257,   258,     0,   259,     0,     0,     0,   260,
     261,     0,     0,     0,   262,   263,   264,   265,     0,     0,
     266,   267,   268,     0,   269,     0,   270,     0,     0,     0,
       0,   271,   272,     0,     0,     0,   273,     0,   274,   275,
       0,   276,   277,     0,     0,     0,   278,     0,     0,   279,
     280,   281,     0,     0,   282,     0,     0,   283,   284,     0,
       0,     0,     0,     0,   285,   286,     0,   287,     0,   288,
       0,   289,   290,     0,     0,     0,     0,     0,     0,     0,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,     0,   307,   308,   309,
     310,     0,   311,   312,   313,   314,     0,   315,   316,     0,
       0,     0,     0,   317,   318,   319,   320,   321,   322,     0,
       0,   323,   324,     0,   325,     0,   326,     0,   327,   328,
     329,   330,   331,   332,   333,   334,   335,     0,     0,   336,
     337,     0,     0,   338,   339,   340,   341,     0,     0,     0,
     342,   343,     0,     0,     0,     0,   344,   345,   346,     0,
     347,   348,   349,   350,     0,   351,   352,     0,     0,     0,
       0,     0,     0,     0,     0,   353,   354,   355,     0,     0,
     356,     0,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,     0,     0,   369,   370,   371,     0,
     372,     0,   373,   374,   375,   376,   377,     0,   378,   379,
     380,     0,     0,   381,     0,     0,     0,   382,   383,   384,
     385,   386,     0,     0,   387,   388,   389,   390,   391,     0,
     392,   393,     0,   394,   395,   396,     0,     0,   397,     0,
     398,     0,   399,   400,     0,   401,   402,     0,     0,     0,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
       0,   413,   414,     0,     0,     0,   415,   416,   417,   418,
       0,     0,     0,   419,     0,     0,     0,   420,     0,   421,
     422,   423,   424,   425,   426,     0,   427,   428,   429,   430,
     431,   432,     0,     0,     0,     0,     0,     0,   433,   434,
       0,   435,     0,     0,   436,     0,     0,   437,   438,   439,
       0,     0,   440,   441,     0,   442,   443,   444,   445,   446,
     447,     0,     0,   448,   449,   450,   451,     0,   452,   453,
       0,   454,     0,   455,   456,   457,   458,     0,   136,   459,
     460,     0,   461,   462,   463,   464,     0,     0,     0,     0,
       0,   465,   466,   467,     0,     0,     0,   468,   469,   470,
     471,     0,   472,   473,     0,   474,   475,     0,   476,   477,
       0,     0,   478,     0,     0,   479,     0,   480,     0,   481,
     482,   483,     0,     0,     0,     0,     0,     0,   484,     0,
       0,   485,     0,     0,     0,   486,   487,   488,   489,   490,
     491,     0,     0,     0,     0,     0,     0,   492,   493,     0,
     494,   495,   496,     0,   139,   497,   140,   141,   142,   143,
     144,     0,     0,   145,     0,     0,     0,   146,     0,     0,
     147,     0,   148,   149,   150,   151,   152,   153,   154,   155,
       0,   156,     0,     0,     0,   157,     0,     0,     0,   158,
       0,     0,   159,   160,   161,     0,   162,     0,   163,   164,
       0,     0,   165,     0,     0,   166,   167,     0,   168,   169,
       0,   170,   171,     0,   172,   173,   174,   175,   176,   177,
     178,     0,   179,   180,   181,   182,   183,   184,   185,     0,
     186,   187,   188,   189,   190,   191,   192,   193,     0,   194,
     195,     0,   196,   197,   198,   199,   200,     0,   201,     0,
       0,   202,     0,     0,   203,     0,     0,   204,     0,   205,
       0,     0,     0,   206,   207,   208,     0,     0,   209,     0,
       0,     0,     0,   210,   211,     0,     0,     0,     0,   212,
       0,   213,     0,     0,     0,   214,     0,   215,   216,   217,
     218,     0,     0,     0,   219,     0,     0,   220,   221,   222,
       0,     0,     0,   223,     0,   224,   225,     0,   226,   227,
     228,     0,     0,   229,   230,     0,   231,   232,   233,   234,
     235,   236,     0,     0,   237,   238,   239,     0,     0,   240,
     241,     0,   242,   243,   244,     0,     0,   245,     0,     0,
       0,   246,     0,   247,     0,   248,     0,   249,   250,   251,
     252,   253,   254,     0,   255,     0,     0,     0,   256,   257,
     258,     0,   259,     0,     0,     0,   260,   261,     0,     0,
       0,   262,   263,   264,   265,     0,     0,   266,   267,   268,
       0,   269,     0,   270,     0,     0,     0,     0,   271,   272,
       0,     0,     0,   273,     0,   274,   275,     0,   276,   277,
       0,     0,     0,   278,     0,     0,   279,   280,   281,     0,
       0,   282,     0,     0,   283,   284,     0,     0,     0,     0,
       0,   285,   286,     0,   287,     0,   288,     0,   289,   290,
       0,     0,     0,     0,     0,     0,     0,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,     0,   307,   308,   309,   310,     0,   311,
     312,   313,   314,     0,   315,   316,     0,     0,     0,     0,
     317,   318,   319,   320,   321,   322,     0,     0,   323,   324,
       0,   325,     0,   326,     0,   327,   328,   329,   330,   331,
     332,   333,   334,   335,     0,     0,   336,   337,     0,     0,
     338,   339,   340,   341,     0,     0,     0,   342,   343,     0,
       0,     0,     0,   344,   345,   346,     0,   347,   348,   349,
     350,     0,   351,   352,     0,     0,     0,     0,     0,     0,
       0,     0,   353,   354,   355,     0,     0,   356,     0,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,     0,     0,   369,   370,   371,  4137,   372,     0,   373,
     374,   375,   376,   377,     0,   378,   379,   380,     0,     0,
     381,     0,     0,     0,   382,   383,   384,   385,   386,     0,
       0,   387,   388,   389,   390,   391,     0,   392,   393,     0,
     394,   395,   396,     0,     0,   397,     0,   398,     0,   399,
     400,     0,   401,   402,     0,     0,     0,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,     0,   413,   414,
       0,     0,     0,   415,   416,   417,   418,     0,     0,     0,
     419,     0,     0,     0,   420,     0,   421,   422,   423,   424,
     425,   426,     0,   427,   428,   429,   430,   431,   432,     0,
       0,     0,     0,     0,     0,   433,   434,     0,   435,     0,
       0,   436,     0,     0,   437,   438,   439,     0,     0,   440,
     441,     0,   442,   443,   444,   445,   446,   447,     0,     0,
     448,   449,   450,   451,     0,   452,   453,     0,   454,     0,
     455,   456,   457,   458,     0,     0,   459,   460,     0,   461,
     462,   463,   464,     0,     0,     0,     0,     0,   465,   466,
     467,     0,     0,     0,   468,   469,   470,   471,     0,   472,
     473,     0,   474,   475,     0,   476,   477,     0,     0,   478,
       0,     0,   479,     0,   480,     0,   481,   482,   483,     0,
       0,     0,     0,     0,     0,   484,     0,     0,   485,     0,
       0,     0,   486,   487,   488,   489,   490,   491,     0,     0,
       0,     0,     0,     0,   492,   493,     0,   494,   495,   496,
       0,   139,   497,   140,   141,   142,   143,   144,     0,     0,
     145,     0,     0,     0,   146,     0,     0,   147,     0,   148,
     149,   150,   151,   152,   153,   154,   155,     0,   156,     0,
       0,     0,   157,     0,     0,     0,   158,     0,     0,   159,
     160,   161,     0,   162,     0,   163,   164,     0,     0,   165,
       0,     0,   166,   167,     0,   168,   169,     0,   170,   171,
       0,   172,   173,   174,   175,   176,   177,   178,     0,   179,
     180,   181,   182,   183,   184,   185,     0,   186,   187,   188,
     189,   190,   191,   192,   193,     0,   194,   195,     0,   196,
     197,   198,   199,   200,     0,   201,     0,     0,   202,     0,
       0,   203,     0,     0,   204,     0,   205,     0,     0,     0,
     206,   207,   208,     0,     0,   209,     0,     0,     0,     0,
     210,   211,     0,     0,     0,     0,   212,     0,   213,     0,
       0,     0,   214,     0,   215,   216,   217,   218,     0,     0,
       0,   219,     0,     0,   220,   221,   222,     0,     0,     0,
     223,     0,   224,   225,     0,   226,   227,   228,     0,     0,
     229,   230,     0,   231,   232,   233,   234,   235,   236,     0,
       0,   237,   238,   239,     0,     0,   240,   241,     0,   242,
     243,   244,     0,     0,   245,     0,     0,     0,   246,     0,
     247,     0,   248,     0,   249,   250,   251,   252,   253,   254,
       0,   255,     0,     0,     0,   256,   257,   258,     0,   259,
       0,     0,     0,   260,   261,     0,     0,     0,   262,   263,
     264,   265,     0,     0,   266,   267,   268,     0,   269,     0,
     270,     0,     0,     0,     0,   271,   272,     0,     0,     0,
     273,     0,   274,   275,     0,   276,   277,     0,     0,     0,
     278,     0,     0,   279,   280,   281,     0,     0,   282,     0,
       0,   283,   284,     0,     0,     0,     0,     0,   285,   286,
       0,   287,     0,   288,     0,   289,   290,     0,     0,     0,
       0,     0,     0,     0,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
       0,   307,   308,   309,   310,     0,   311,   312,   313,   314,
       0,   315,   316,     0,     0,     0,     0,   317,   318,   319,
     320,   321,   322,     0,     0,   323,   324,     0,   325,     0,
     326,     0,   327,   328,   329,   330,   331,   332,   333,   334,
     335,     0,     0,   336,   337,     0,     0,   338,   339,   340,
     341,     0,     0,     0,   342,   343,     0,     0,     0,     0,
     344,   345,   346,     0,   347,   348,   349,   350,     0,   351,
     352,     0,     0,     0,     0,     0,     0,     0,     0,   353,
     354,   355,     0,     0,   356,     0,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,     0,     0,
     369,   370,   371,     0,   372,     0,   373,   374,   375,   376,
     377,     0,   378,   379,   380,     0,     0,   381,     0,     0,
       0,   382,   383,   384,   385,   386,     0,     0,   387,   388,
     389,   390,   391,     0,   392,   393,     0,   394,   395,   396,
       0,     0,   397,     0,   398,     0,   399,   400,     0,   401,
     402,     0,     0,     0,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,     0,   413,   414,     0,     0,     0,
     415,   416,   417,   418,     0,     0,     0,   419,     0,     0,
       0,   420,     0,   421,   422,   423,   424,   425,   426,     0,
     427,   428,   429,   430,   431,   432,     0,     0,     0,     0,
       0,     0,   433,   434,     0,   435,     0,     0,   436,     0,
       0,   437,   438,   439,     0,     0,   440,   441,     0,   442,
     443,   444,   445,   446,   447,     0,     0,   448,   449,   450,
     451,     0,   452,   453,     0,   454,     0,   455,   456,   457,
     458,     0,     0,   459,   460,     0,   461,   462,   463,   464,
       0,     0,     0,     0,     0,   465,   466,   467,     0,     0,
       0,   468,   469,   470,   471,     0,   472,   473,     0,   474,
     475,     0,   476,   477,     0,     0,   478,     0,     0,   479,
       0,   480,     0,   481,   482,   483,     0,     0,     0,     0,
       0,     0,   484,     0,     0,   485,     0,     0,     0,   486,
     487,   488,   489,   490,   491,     0,     0,     0,     0,     0,
       0,   492,   493,     0,   494,   495,   496,     0,   139,   497,
     140,   141,   142,   143,   144,     0,     0,   145,     0,     0,
       0,   146,     0,     0,   147,     0,   148,   149,   150,   151,
     152,   153,   154,   155,     0,   156,     0,     0,     0,   157,
       0,     0,     0,   158,     0,     0,   159,   160,   161,     0,
     162,     0,   163,   164,     0,     0,   165,     0,     0,   166,
     167,     0,   168,   169,     0,   170,   171,     0,   172,   173,
     174,   175,   176,   177,   178,     0,   179,   180,   181,   182,
     183,   184,   185,     0,   186,   187,   188,   189,   190,   191,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   199,
     200,     0,   201,     0,     0,   202,     0,     0,   203,     0,
       0,   204,     0,   205,     0,     0,     0,   206,   207,   208,
       0,     0,   209,     0,     0,     0,     0,   210,   211,     0,
       0,     0,     0,   212,     0,   213,     0,     0,     0,   214,
       0,   215,   216,   217,   218,     0,     0,     0,   219,     0,
       0,   220,   221,   222,     0,     0,     0,   223,     0,   224,
     225,     0,   226,   227,   228,     0,     0,   229,   230,     0,
     231,   232,   233,   234,   235,   236,     0,     0,   237,   238,
     239,     0,     0,   240,   241,     0,   242,  1810,   244,     0,
       0,   245,     0,     0,     0,   246,     0,   247,     0,   248,
       0,   249,   250,   251,   252,   253,   254,     0,   255,     0,
       0,     0,   256,   257,   258,     0,   259,     0,     0,     0,
     260,   261,     0,     0,     0,   262,   263,   264,   265,     0,
       0,   266,   267,   268,     0,   269,     0,   270,     0,     0,
       0,     0,   271,   272,     0,     0,     0,   273,     0,   274,
     275,     0,   276,   277,     0,     0,     0,   278,     0,     0,
     279,   280,   281,     0,     0,   282,     0,     0,   283,   284,
       0,     0,     0,     0,     0,   285,   286,     0,   287,     0,
     288,     0,   289,   290,     0,     0,     0,     0,     0,     0,
       0,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,     0,   307,   308,
     309,   310,     0,   311,   312,   313,   314,     0,   315,   316,
       0,     0,     0,     0,   317,   318,   319,   320,   321,   322,
       0,     0,   323,   324,     0,   325,     0,   326,     0,   327,
     328,   329,   330,   331,   332,   333,   334,   335,     0,     0,
     336,   337,     0,     0,   338,  1811,   340,   341,     0,     0,
       0,   342,   343,     0,     0,     0,     0,   344,   345,   346,
       0,   347,   348,   349,   350,     0,   351,   352,     0,     0,
       0,     0,     0,     0,     0,     0,   353,   354,   355,     0,
       0,   356,     0,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,     0,     0,   369,   370,   371,
       0,   372,     0,   373,   374,   375,   376,   377,     0,   378,
     379,   380,     0,     0,   381,     0,     0,     0,   382,   383,
     384,   385,   386,     0,     0,   387,   388,   389,   390,   391,
       0,   392,   393,     0,   394,   395,   396,     0,     0,   397,
       0,   398,     0,   399,   400,     0,   401,   402,     0,     0,
       0,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,     0,   413,   414,     0,     0,     0,   415,   416,   417,
     418,     0,     0,     0,   419,     0,     0,     0,   420,     0,
     421,   422,   423,   424,   425,   426,     0,   427,   428,   429,
     430,   431,   432,     0,     0,     0,     0,     0,     0,   433,
     434,     0,   435,     0,     0,   436,     0,     0,   437,   438,
     439,     0,     0,   440,   441,     0,   442,   443,   444,   445,
     446,   447,     0,     0,   448,   449,   450,   451,     0,   452,
     453,     0,   454,     0,   455,   456,   457,   458,     0,     0,
     459,   460,     0,   461,   462,   463,   464,     0,     0,     0,
       0,     0,   465,   466,   467,     0,     0,     0,   468,   469,
     470,   471,     0,   472,   473,     0,   474,   475,     0,   476,
     477,     0,     0,   478,     0,     0,   479,     0,   480,     0,
     481,   482,   483,     0,     0,     0,     0,     0,     0,   484,
       0,     0,   485,     0,     0,     0,   486,   487,   488,   489,
     490,   491,     0,     0,     0,     0,     0,     0,   492,   493,
       0,   494,   495,   496,     0,   139,   497,   140,   141,   142,
     143,   144,     0,     0,   145,     0,     0,     0,   146,     0,
       0,     0,     0,   148,   149,   150,   151,   152,   153,   154,
       0,     0,  -337,     0,     0,     0,   157,     0,     0,     0,
     158,     0,     0,   159,   160,   161,     0,   162,     0,     0,
       0,     0,     0,   165,  3985,     0,   166,   167,     0,   168,
       0,     0,     0,     0,     0,   172,   173,   174,   175,  3986,
     177,   178,     0,   179,   180,     0,     0,     0,     0,     0,
       0,   186,     0,   188,     0,   190,   191,   192,   193,     0,
     194,   195,     0,   196,   197,   198,     0,   200,     0,   201,
       0,     0,   202,     0,     0,   203,     0,     0,   204,     0,
     205,     0,     0,     0,   206,   207,   208,     0,     0,   209,
       0,     0,     0,     0,   210,     0,     0,     0,     0,     0,
     212,     0,   213,     0,     0,     0,   214,     0,   215,   216,
     217,   218,     0,     0,     0,     0,     0,     0,   220,   221,
     222,     0,  -307,  -307,   223,     0,  -307,   225,     0,   226,
     227,   228,     0,     0,   229,   230,     0,   231,   232,   233,
     234,     0,     0,     0,     0,   237,   238,   239,     0,     0,
     240,   241,  3987,   242,   243,   244,     0,     0,     0,     0,
       0,     0,   246,     0,   247,     0,   248,     0,   249,   250,
     251,   252,   253,   254,     0,   255,     0,     0,     0,     0,
     257,   258,     0,     0,     0,     0,     0,     0,   261,     0,
       0,     0,   262,   263,   264,   265,  3988,     0,   266,   267,
     268,     0,   269,     0,   270,     0,     0,     0,     0,   271,
       0,     0,     0,     0,   273,     0,   274,   275,     0,   276,
     277,  3989,     0,     0,   278,     0,     0,     0,   280,   281,
       0,     0,   282,  3990,     0,   283,   284,     0,     0,     0,
       0,     0,   285,   286,     0,   287,     0,   288,     0,   289,
     290,     0,     0,     0,     0,  -292,     0,     0,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,     0,   307,   308,   309,   310,     0,
     311,   312,   313,   314,     0,   315,   316,     0,     0,     0,
       0,   317,   318,   319,   320,   321,   322,     0,     0,   323,
     324,     0,   325,     0,   326,     0,   327,   328,   329,   330,
     331,   332,   333,   334,   335,     0,     0,   336,   337,     0,
       0,   338,   339,   340,   341,     0,     0,     0,     0,   343,
       0,     0,     0,     0,   344,   345,   346,     0,   347,   348,
     349,  3991,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   354,   355,     0,     0,     0,     0,
     357,   358,   359,     0,   361,   362,   363,   364,   365,   366,
     367,     0,     0,     0,     0,   370,   371,     0,   372,     0,
     373,   374,   375,   376,   377,     0,   378,   379,   380,     0,
       0,   381,     0,     0,     0,   382,   383,   384,   385,   386,
       0,     0,   387,   388,   389,   390,   391,     0,   392,     0,
       0,   394,     0,   396,  -292,     0,   397,     0,     0,     0,
     399,     0,     0,   401,   402,  3992,     0,     0,     0,   404,
     405,   406,   407,   408,   409,     0,   411,   412,     0,   413,
       0,     0,     0,     0,   415,   416,   417,     0,     0,     0,
       0,   419,     0,     0,     0,   420,     0,     0,   422,     0,
       0,   425,   426,     0,   427,     0,   429,     0,   431,   432,
       0,     0,     0,     0,     0,     0,   433,   434,     0,   435,
       0,     0,   436,     0,     0,   437,     0,   439,     0,     0,
       0,   441,     0,   442,   443,   444,   445,   446,   447,     0,
       0,   448,   449,   450,   451,     0,   452,   453,     0,   454,
       0,   455,   456,   457,   458,     0,     0,   459,   460,     0,
     461,   462,   463,   464,     0,     0,     0,     0,     0,   465,
     466,   467,     0,     0,     0,     0,   469,   470,   471,     0,
     472,   473,     0,   474,   475,     0,     0,     0,     0,     0,
     478,     0,     0,   479,     0,     0,     0,   481,   482,   483,
       0,     0,     0,     0,     0,     0,   484,     0,     0,   485,
       0,     0,     0,   486,   487,   488,   489,   490,   491,     0,
       0,  -292,     0,     0,     0,   492,     0,     0,   494,     0,
     496,     0,   139,   497,   140,   141,   142,   143,   144,     0,
       0,   145,     0,     0,     0,   146,     0,     0,     0,     0,
     148,   149,   150,   151,   152,   153,   154,     0,     0,  -337,
       0,     0,     0,   157,     0,     0,     0,   158,     0,     0,
     159,   160,   161,     0,   162,     0,     0,     0,     0,     0,
     165,  3985,     0,   166,   167,     0,   168,     0,     0,     0,
       0,     0,   172,   173,   174,   175,  3986,   177,   178,     0,
     179,   180,     0,     0,     0,     0,     0,     0,   186,     0,
     188,     0,   190,   191,   192,   193,     0,   194,   195,     0,
     196,   197,   198,     0,   200,     0,   201,     0,     0,   202,
       0,     0,   203,     0,     0,   204,     0,   205,     0,     0,
       0,   206,   207,   208,     0,     0,   209,     0,     0,     0,
       0,   210,     0,     0,     0,     0,     0,   212,     0,   213,
       0,     0,     0,   214,     0,   215,   216,   217,   218,     0,
       0,     0,     0,     0,     0,   220,   221,   222,     0,  -328,
       0,   223,     0,  -328,   225,     0,   226,   227,   228,     0,
       0,   229,   230,     0,   231,   232,   233,   234,     0,     0,
       0,     0,   237,   238,   239,     0,     0,   240,   241,  3987,
     242,   243,   244,     0,     0,     0,     0,     0,     0,   246,
       0,   247,     0,   248,     0,   249,   250,   251,   252,   253,
     254,     0,   255,     0,     0,     0,     0,   257,   258,     0,
       0,     0,     0,     0,     0,   261,     0,     0,     0,   262,
     263,   264,   265,  3988,     0,   266,   267,   268,     0,   269,
       0,   270,     0,     0,     0,     0,   271,     0,     0,     0,
       0,   273,     0,   274,   275,     0,   276,   277,  3989,     0,
       0,   278,     0,     0,     0,   280,   281,     0,     0,   282,
    3990,     0,   283,   284,     0,     0,     0,     0,     0,   285,
     286,     0,   287,     0,   288,     0,   289,   290,     0,     0,
       0,     0,  -292,     0,     0,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,     0,   307,   308,   309,   310,     0,   311,   312,   313,
     314,     0,   315,   316,     0,     0,     0,     0,   317,   318,
     319,   320,   321,   322,     0,     0,   323,   324,     0,   325,
       0,   326,     0,   327,   328,   329,   330,   331,   332,   333,
     334,   335,     0,     0,   336,   337,     0,     0,   338,   339,
     340,   341,     0,     0,     0,     0,   343,     0,     0,     0,
       0,   344,   345,   346,     0,   347,   348,   349,  3991,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   354,   355,     0,     0,     0,     0,   357,   358,   359,
       0,   361,   362,   363,   364,   365,   366,   367,     0,     0,
       0,     0,   370,   371,     0,   372,     0,   373,   374,   375,
     376,   377,     0,   378,   379,   380,     0,     0,   381,     0,
       0,     0,   382,   383,   384,   385,   386,     0,     0,   387,
     388,   389,   390,   391,     0,   392,     0,     0,   394,     0,
     396,  -292,     0,   397,     0,     0,     0,   399,     0,     0,
     401,   402,  3992,     0,     0,     0,   404,   405,   406,   407,
     408,   409,     0,   411,   412,     0,   413,     0,     0,     0,
       0,   415,   416,   417,     0,     0,     0,     0,   419,     0,
       0,     0,   420,     0,     0,   422,     0,     0,   425,   426,
       0,   427,     0,   429,     0,   431,   432,     0,     0,     0,
       0,     0,     0,   433,   434,     0,   435,     0,     0,   436,
       0,     0,   437,     0,   439,     0,     0,     0,   441,     0,
     442,   443,   444,   445,   446,   447,     0,     0,   448,   449,
     450,   451,     0,   452,   453,     0,   454,     0,   455,   456,
     457,   458,     0,     0,   459,   460,     0,   461,   462,   463,
     464,     0,     0,     0,     0,     0,   465,   466,   467,     0,
       0,     0,     0,   469,   470,   471,     0,   472,   473,     0,
     474,   475,     0,     0,     0,     0,     0,   478,     0,     0,
     479,     0,     0,     0,   481,   482,   483,     0,     0,     0,
       0,     0,     0,   484,     0,     0,   485,     0,     0,     0,
     486,   487,   488,   489,   490,   491,  -328,     0,  -292,     0,
       0,     0,   492,     0,     0,   494,     0,   496,     0,   139,
     497,   140,   141,   142,   143,   144,     0,     0,   145,     0,
       0,     0,   146,     0,     0,     0,     0,   148,   149,   150,
     151,   152,   153,   154,     0,     0,  -337,     0,     0,     0,
     157,     0,     0,     0,   158,     0,     0,   159,   160,   161,
       0,   162,     0,     0,     0,     0,     0,   165,  3985,     0,
     166,   167,     0,   168,     0,     0,     0,     0,     0,   172,
     173,   174,   175,  3986,   177,   178,     0,   179,   180,     0,
       0,     0,     0,     0,     0,   186,     0,   188,     0,   190,
     191,   192,   193,     0,   194,   195,     0,   196,   197,   198,
       0,   200,     0,   201,     0,     0,   202,     0,     0,   203,
       0,     0,   204,     0,   205,     0,     0,     0,   206,   207,
     208,     0,     0,   209,     0,     0,     0,     0,   210,     0,
       0,     0,     0,     0,   212,     0,   213,     0,     0,     0,
     214,     0,   215,   216,   217,   218,     0,     0,     0,     0,
       0,     0,   220,   221,   222,     0,  -325,     0,   223,     0,
    -325,   225,     0,   226,   227,   228,     0,     0,   229,   230,
       0,   231,   232,   233,   234,     0,     0,     0,     0,   237,
     238,   239,     0,     0,   240,   241,  3987,   242,   243,   244,
       0,     0,     0,     0,     0,     0,   246,     0,   247,     0,
     248,     0,   249,   250,   251,   252,   253,   254,     0,   255,
       0,     0,     0,     0,   257,   258,     0,     0,     0,     0,
       0,     0,   261,     0,     0,     0,   262,   263,   264,   265,
    3988,     0,   266,   267,   268,     0,   269,     0,   270,     0,
       0,     0,     0,   271,     0,     0,     0,     0,   273,     0,
     274,   275,     0,   276,   277,  3989,     0,     0,   278,     0,
       0,     0,   280,   281,     0,     0,   282,  3990,     0,   283,
     284,     0,     0,     0,     0,     0,   285,   286,     0,   287,
       0,   288,     0,   289,   290,     0,     0,     0,     0,  -292,
       0,     0,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,     0,   307,
     308,   309,   310,     0,   311,   312,   313,   314,     0,   315,
     316,     0,     0,     0,     0,   317,   318,   319,   320,   321,
     322,     0,     0,   323,   324,     0,   325,     0,   326,     0,
     327,   328,   329,   330,   331,   332,   333,   334,   335,     0,
       0,   336,   337,     0,     0,   338,   339,   340,   341,     0,
       0,     0,     0,   343,     0,     0,     0,     0,   344,   345,
     346,     0,   347,   348,   349,  3991,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   354,   355,
       0,     0,     0,     0,   357,   358,   359,     0,   361,   362,
     363,   364,   365,   366,   367,     0,     0,     0,     0,   370,
     371,     0,   372,     0,   373,   374,   375,   376,   377,     0,
     378,   379,   380,     0,     0,   381,     0,     0,     0,   382,
     383,   384,   385,   386,     0,     0,   387,   388,   389,   390,
     391,     0,   392,     0,     0,   394,     0,   396,  -292,     0,
     397,     0,     0,     0,   399,     0,     0,   401,   402,  3992,
       0,     0,     0,   404,   405,   406,   407,   408,   409,     0,
     411,   412,     0,   413,     0,     0,     0,     0,   415,   416,
     417,     0,     0,     0,     0,   419,     0,     0,     0,   420,
       0,     0,   422,     0,     0,   425,   426,     0,   427,     0,
     429,     0,   431,   432,     0,     0,     0,     0,     0,     0,
     433,   434,     0,   435,     0,     0,   436,     0,     0,   437,
       0,   439,     0,     0,     0,   441,     0,   442,   443,   444,
     445,   446,   447,     0,     0,   448,   449,   450,   451,     0,
     452,   453,     0,   454,     0,   455,   456,   457,   458,     0,
       0,   459,   460,     0,   461,   462,   463,   464,     0,     0,
       0,     0,     0,   465,   466,   467,     0,     0,     0,     0,
     469,   470,   471,     0,   472,   473,     0,   474,   475,     0,
       0,     0,     0,     0,   478,     0,     0,   479,     0,     0,
       0,   481,   482,   483,     0,     0,     0,     0,     0,     0,
     484,     0,     0,   485,     0,     0,     0,   486,   487,   488,
     489,   490,   491,  -325,     0,  -292,     0,     0,     0,   492,
       0,     0,   494,     0,   496,     0,   139,   497,   140,   141,
     142,   143,   144,     0,     0,   145,     0,     0,     0,   146,
       0,     0,     0,     0,   148,   149,   150,   151,   152,   153,
     154,     0,     0,  -337,     0,     0,     0,   157,     0,     0,
       0,   158,     0,     0,   159,   160,   161,     0,   162,     0,
       0,     0,     0,     0,   165,  3985,     0,   166,   167,     0,
     168,     0,     0,     0,     0,     0,   172,   173,   174,   175,
    3986,   177,   178,     0,   179,   180,     0,     0,     0,     0,
       0,     0,   186,     0,   188,     0,   190,   191,   192,   193,
       0,   194,   195,     0,   196,   197,   198,     0,   200,     0,
     201,     0,     0,   202,     0,     0,   203,     0,     0,   204,
       0,   205,     0,     0,     0,   206,   207,   208,     0,     0,
     209,     0,     0,     0,     0,   210,     0,     0,     0,     0,
       0,   212,     0,   213,     0,     0,     0,   214,     0,   215,
     216,   217,   218,     0,     0,     0,     0,     0,     0,   220,
     221,   222,     0,     0,     0,   223,     0,  4334,   225,     0,
     226,   227,   228,     0,     0,   229,   230,     0,   231,   232,
     233,   234,     0,     0,     0,     0,   237,   238,   239,     0,
       0,   240,   241,  3987,   242,   243,   244,     0,     0,     0,
       0,     0,     0,   246,     0,   247,     0,   248,     0,   249,
     250,   251,   252,   253,   254,     0,   255,     0,     0,     0,
       0,   257,   258,     0,     0,     0,     0,     0,     0,   261,
       0,     0,     0,   262,   263,   264,   265,  3988,     0,   266,
     267,   268,     0,   269,     0,   270,     0,     0,     0,     0,
     271,     0,     0,     0,     0,   273,     0,   274,   275,     0,
     276,   277,  3989,     0,     0,   278,     0,     0,     0,   280,
     281,     0,     0,   282,  3990,     0,   283,   284,     0,     0,
       0,     0,     0,   285,   286,     0,   287,     0,   288,     0,
     289,   290,     0,     0,     0,     0,  -292,     0,     0,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,     0,   307,   308,   309,   310,
       0,   311,   312,   313,   314,     0,   315,   316,     0,     0,
       0,     0,   317,   318,   319,   320,   321,   322,     0,     0,
     323,   324,     0,   325,     0,   326,     0,   327,   328,   329,
     330,   331,   332,   333,   334,   335,     0,     0,   336,   337,
       0,     0,   338,   339,   340,   341,     0,     0,     0,     0,
     343,     0,     0,     0,     0,   344,   345,   346,     0,   347,
     348,   349,  3991,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   354,   355,     0,     0,     0,
       0,   357,   358,   359,     0,   361,   362,   363,   364,   365,
     366,   367,     0,     0,     0,     0,   370,   371,     0,   372,
       0,   373,   374,   375,   376,   377,     0,   378,   379,   380,
       0,     0,   381,     0,     0,     0,   382,   383,   384,   385,
     386,     0,     0,   387,   388,   389,   390,   391,     0,   392,
       0,     0,   394,     0,   396,  -292,     0,   397,     0,     0,
       0,   399,     0,     0,   401,   402,  3992,     0,     0,     0,
     404,   405,   406,   407,   408,   409,     0,   411,   412,     0,
     413,     0,     0,     0,     0,   415,   416,   417,     0,     0,
       0,     0,   419,     0,     0,     0,   420,     0,     0,   422,
       0,     0,   425,   426,     0,   427,     0,   429,     0,   431,
     432,     0,     0,     0,     0,     0,     0,   433,   434,     0,
     435,     0,     0,   436,     0,     0,   437,     0,   439,     0,
       0,     0,   441,     0,   442,   443,   444,   445,   446,   447,
       0,     0,   448,   449,   450,   451,     0,   452,   453,     0,
     454,     0,   455,   456,   457,   458,     0,     0,   459,   460,
       0,   461,   462,   463,   464,     0,     0,     0,     0,     0,
     465,   466,   467,     0,     0,     0,     0,   469,   470,   471,
       0,   472,   473,     0,   474,   475,     0,     0,     0,     0,
       0,   478,     0,     0,   479,     0,     0,     0,   481,   482,
     483,     0,     0,     0,     0,     0,     0,   484,     0,     0,
     485,     0,     0,     0,   486,   487,   488,   489,   490,   491,
       0,     0,  -292,     0,     0,     0,   492,     0,     0,   494,
       0,   496,     0,   139,   497,   140,   141,   142,   143,   144,
       0,     0,   145,     0,     0,     0,   146,     0,     0,     0,
       0,   148,   149,   150,   151,   152,   153,   154,     0,     0,
    -337,     0,     0,     0,   157,     0,     0,     0,   158,     0,
       0,   159,   160,   161,     0,   162,     0,     0,     0,     0,
       0,   165,  3985,     0,   166,   167,     0,   168,     0,     0,
       0,     0,     0,   172,   173,   174,   175,  3986,   177,   178,
       0,   179,   180,     0,     0,     0,     0,     0,     0,   186,
       0,   188,     0,   190,   191,   192,   193,     0,   194,   195,
       0,   196,   197,   198,     0,   200,     0,   201,     0,     0,
     202,     0,     0,   203,     0,     0,   204,     0,   205,     0,
       0,     0,   206,   207,   208,     0,     0,   209,     0,     0,
       0,     0,   210,     0,     0,     0,     0,     0,   212,     0,
     213,     0,     0,     0,   214,     0,   215,   216,   217,   218,
       0,     0,     0,     0,     0,     0,   220,   221,   222,     0,
       0,     0,   223,     0,  -330,   225,     0,   226,   227,   228,
       0,     0,   229,   230,     0,   231,   232,   233,   234,     0,
       0,     0,     0,   237,   238,   239,     0,     0,   240,   241,
    3987,   242,   243,   244,     0,     0,     0,     0,     0,     0,
     246,     0,   247,     0,   248,     0,   249,   250,   251,   252,
     253,   254,     0,   255,     0,     0,     0,     0,   257,   258,
       0,     0,     0,     0,     0,     0,   261,     0,     0,     0,
     262,   263,   264,   265,  3988,     0,   266,   267,   268,     0,
     269,     0,   270,     0,     0,     0,     0,   271,     0,     0,
       0,     0,   273,     0,   274,   275,     0,   276,   277,  3989,
       0,     0,   278,     0,     0,     0,   280,   281,     0,     0,
     282,  3990,     0,   283,   284,     0,     0,     0,     0,     0,
     285,   286,     0,   287,     0,   288,     0,   289,   290,     0,
       0,     0,     0,  -292,     0,     0,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,     0,   307,   308,   309,   310,     0,   311,   312,
     313,   314,     0,   315,   316,     0,     0,     0,     0,   317,
     318,   319,   320,   321,   322,     0,     0,   323,   324,     0,
     325,     0,   326,     0,   327,   328,   329,   330,   331,   332,
     333,   334,   335,     0,     0,   336,   337,     0,     0,   338,
     339,   340,   341,     0,     0,     0,     0,   343,     0,     0,
       0,     0,   344,   345,   346,     0,   347,   348,   349,  3991,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   354,   355,     0,     0,     0,     0,   357,   358,
     359,     0,   361,   362,   363,   364,   365,   366,   367,     0,
       0,     0,     0,   370,   371,     0,   372,     0,   373,   374,
     375,   376,   377,     0,   378,   379,   380,     0,     0,   381,
       0,     0,     0,   382,   383,   384,   385,   386,     0,     0,
     387,   388,   389,   390,   391,     0,   392,     0,     0,   394,
       0,   396,  -292,     0,   397,     0,     0,     0,   399,     0,
       0,   401,   402,  3992,     0,     0,     0,   404,   405,   406,
     407,   408,   409,     0,   411,   412,     0,   413,     0,     0,
       0,     0,   415,   416,   417,     0,     0,     0,     0,   419,
       0,     0,     0,   420,     0,     0,   422,     0,     0,   425,
     426,     0,   427,     0,   429,     0,   431,   432,     0,     0,
       0,     0,     0,     0,   433,   434,     0,   435,     0,     0,
     436,     0,     0,   437,     0,   439,     0,     0,     0,   441,
       0,   442,   443,   444,   445,   446,   447,     0,     0,   448,
     449,   450,   451,     0,   452,   453,     0,   454,     0,   455,
     456,   457,   458,     0,     0,   459,   460,     0,   461,   462,
     463,   464,     0,     0,     0,     0,     0,   465,   466,   467,
       0,     0,     0,     0,   469,   470,   471,     0,   472,   473,
       0,   474,   475,     0,     0,     0,     0,     0,   478,     0,
       0,   479,     0,     0,     0,   481,   482,   483,     0,     0,
       0,     0,     0,     0,   484,     0,     0,   485,     0,     0,
       0,   486,   487,   488,   489,   490,   491,     0,     0,  -292,
       0,     0,     0,   492,     0,     0,   494,     0,   496,     0,
     139,   497,   140,   141,   142,   143,   144,     0,     0,   145,
       0,     0,     0,   146,     0,     0,     0,     0,   148,   149,
     150,   151,   152,   153,   154,     0,     0,  -337,     0,     0,
       0,   157,     0,     0,     0,   158,     0,     0,   159,   160,
     161,     0,   162,     0,     0,     0,     0,     0,   165,  3985,
       0,   166,   167,     0,   168,     0,     0,     0,     0,     0,
     172,   173,   174,   175,  3986,   177,   178,     0,   179,   180,
       0,     0,     0,     0,     0,     0,   186,     0,   188,     0,
     190,   191,   192,   193,     0,   194,   195,     0,   196,   197,
     198,     0,   200,     0,   201,     0,     0,   202,     0,     0,
     203,     0,     0,   204,     0,   205,     0,     0,     0,   206,
     207,   208,     0,     0,   209,     0,     0,     0,     0,   210,
       0,     0,     0,     0,     0,   212,     0,   213,     0,     0,
       0,   214,     0,   215,   216,   217,   218,     0,     0,     0,
       0,     0,     0,   220,   221,   222,     0,     0,     0,   223,
       0,  4456,   225,     0,   226,   227,   228,     0,     0,   229,
     230,     0,   231,   232,   233,   234,     0,     0,     0,     0,
     237,   238,   239,     0,     0,   240,   241,  3987,   242,   243,
     244,     0,     0,     0,     0,     0,     0,   246,     0,   247,
       0,   248,     0,   249,   250,   251,   252,   253,   254,     0,
     255,     0,     0,     0,     0,   257,   258,     0,     0,     0,
       0,     0,     0,   261,     0,     0,     0,   262,   263,   264,
     265,  3988,     0,   266,   267,   268,     0,   269,     0,   270,
       0,     0,     0,     0,   271,     0,     0,     0,     0,   273,
       0,   274,   275,     0,   276,   277,  3989,     0,     0,   278,
       0,     0,     0,   280,   281,     0,     0,   282,  3990,     0,
     283,   284,     0,     0,     0,     0,     0,   285,   286,     0,
     287,     0,   288,     0,   289,   290,     0,     0,     0,     0,
    -292,     0,     0,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,     0,
     307,   308,   309,   310,     0,   311,   312,   313,   314,     0,
     315,   316,     0,     0,     0,     0,   317,   318,   319,   320,
     321,   322,     0,     0,   323,   324,     0,   325,     0,   326,
       0,   327,   328,   329,   330,   331,   332,   333,   334,   335,
       0,     0,   336,   337,     0,     0,   338,   339,   340,   341,
       0,     0,     0,     0,   343,     0,     0,     0,     0,   344,
     345,   346,     0,   347,   348,   349,  3991,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   354,
     355,     0,     0,     0,     0,   357,   358,   359,     0,   361,
     362,   363,   364,   365,   366,   367,     0,     0,     0,     0,
     370,   371,     0,   372,     0,   373,   374,   375,   376,   377,
       0,   378,   379,   380,     0,     0,   381,     0,     0,     0,
     382,   383,   384,   385,   386,     0,     0,   387,   388,   389,
     390,   391,     0,   392,     0,     0,   394,     0,   396,  -292,
       0,   397,     0,     0,     0,   399,     0,     0,   401,   402,
    3992,     0,     0,     0,   404,   405,   406,   407,   408,   409,
       0,   411,   412,     0,   413,     0,     0,     0,     0,   415,
     416,   417,     0,     0,     0,     0,   419,     0,     0,     0,
     420,     0,     0,   422,     0,     0,   425,   426,     0,   427,
       0,   429,     0,   431,   432,     0,     0,     0,     0,     0,
       0,   433,   434,     0,   435,     0,     0,   436,     0,     0,
     437,     0,   439,     0,     0,     0,   441,     0,   442,   443,
     444,   445,   446,   447,     0,     0,   448,   449,   450,   451,
       0,   452,   453,     0,   454,     0,   455,   456,   457,   458,
       0,     0,   459,   460,     0,   461,   462,   463,   464,     0,
       0,     0,     0,     0,   465,   466,   467,     0,     0,     0,
       0,   469,   470,   471,     0,   472,   473,     0,   474,   475,
       0,     0,     0,     0,     0,   478,     0,     0,   479,     0,
       0,     0,   481,   482,   483,     0,     0,     0,     0,     0,
       0,   484,     0,     0,   485,     0,     0,     0,   486,   487,
     488,   489,   490,   491,     0,     0,  -292,     0,     0,     0,
     492,     0,     0,   494,     0,   496,     0,   139,   497,   140,
     141,   142,   143,   144,     0,     0,   145,     0,     0,     0,
     146,     0,     0,     0,     0,   148,   149,   150,   151,   152,
     153,   154,     0,     0,  -337,     0,     0,     0,   157,     0,
       0,     0,   158,     0,     0,   159,   160,   161,     0,   162,
       0,     0,     0,     0,     0,   165,  3985,     0,   166,   167,
       0,   168,     0,     0,     0,     0,     0,   172,   173,   174,
     175,  3986,   177,   178,     0,   179,   180,     0,     0,     0,
       0,     0,     0,   186,     0,   188,     0,   190,   191,   192,
     193,     0,   194,   195,     0,   196,   197,   198,     0,   200,
       0,   201,     0,     0,   202,     0,     0,   203,     0,     0,
     204,     0,   205,     0,     0,     0,   206,   207,   208,     0,
       0,   209,     0,     0,     0,     0,   210,     0,     0,     0,
       0,     0,   212,     0,   213,     0,     0,     0,   214,     0,
     215,   216,   217,   218,     0,     0,     0,     0,     0,     0,
     220,   221,   222,     0,     0,     0,   223,     0,  4502,   225,
       0,   226,   227,   228,     0,     0,   229,   230,     0,   231,
     232,   233,   234,     0,     0,     0,     0,   237,   238,   239,
       0,     0,   240,   241,  3987,   242,   243,   244,     0,     0,
       0,     0,     0,     0,   246,     0,   247,     0,   248,     0,
     249,   250,   251,   252,   253,   254,     0,   255,     0,     0,
       0,     0,   257,   258,     0,     0,     0,     0,     0,     0,
     261,     0,     0,     0,   262,   263,   264,   265,  3988,     0,
     266,   267,   268,     0,   269,     0,   270,     0,     0,     0,
       0,   271,     0,     0,     0,     0,   273,     0,   274,   275,
       0,   276,   277,  3989,     0,     0,   278,     0,     0,     0,
     280,   281,     0,     0,   282,  3990,     0,   283,   284,     0,
       0,     0,     0,     0,   285,   286,     0,   287,     0,   288,
       0,   289,   290,     0,     0,     0,     0,  -292,     0,     0,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,     0,   307,   308,   309,
     310,     0,   311,   312,   313,   314,     0,   315,   316,     0,
       0,     0,     0,   317,   318,   319,   320,   321,   322,     0,
       0,   323,   324,     0,   325,     0,   326,     0,   327,   328,
     329,   330,   331,   332,   333,   334,   335,     0,     0,   336,
     337,     0,     0,   338,   339,   340,   341,     0,     0,     0,
       0,   343,     0,     0,     0,     0,   344,   345,   346,     0,
     347,   348,   349,  3991,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   354,   355,     0,     0,
       0,     0,   357,   358,   359,     0,   361,   362,   363,   364,
     365,   366,   367,     0,     0,     0,     0,   370,   371,     0,
     372,     0,   373,   374,   375,   376,   377,     0,   378,   379,
     380,     0,     0,   381,     0,     0,     0,   382,   383,   384,
     385,   386,     0,     0,   387,   388,   389,   390,   391,     0,
     392,     0,     0,   394,     0,   396,  -292,     0,   397,     0,
       0,     0,   399,     0,     0,   401,   402,  3992,     0,     0,
       0,   404,   405,   406,   407,   408,   409,     0,   411,   412,
       0,   413,     0,     0,     0,     0,   415,   416,   417,     0,
       0,     0,     0,   419,     0,     0,     0,   420,     0,     0,
     422,     0,     0,   425,   426,     0,   427,     0,   429,     0,
     431,   432,     0,     0,     0,     0,     0,     0,   433,   434,
       0,   435,     0,     0,   436,     0,     0,   437,     0,   439,
       0,     0,     0,   441,     0,   442,   443,   444,   445,   446,
     447,     0,     0,   448,   449,   450,   451,     0,   452,   453,
       0,   454,     0,   455,   456,   457,   458,     0,     0,   459,
     460,     0,   461,   462,   463,   464,     0,     0,     0,     0,
       0,   465,   466,   467,     0,     0,     0,     0,   469,   470,
     471,     0,   472,   473,     0,   474,   475,     0,     0,     0,
       0,     0,   478,     0,     0,   479,     0,     0,     0,   481,
     482,   483,     0,     0,     0,     0,     0,     0,   484,     0,
       0,   485,     0,     0,     0,   486,   487,   488,   489,   490,
     491,     0,     0,  -292,     0,     0,     0,   492,     0,     0,
     494,     0,   496,     0,   139,   497,   140,   141,   142,   143,
     144,     0,     0,   145,     0,     0,     0,   146,     0,     0,
       0,     0,   148,   149,   150,   151,   152,   153,   154,     0,
       0,  -337,     0,     0,     0,   157,     0,     0,     0,   158,
       0,     0,   159,   160,   161,     0,   162,     0,     0,     0,
       0,     0,   165,  3985,     0,   166,   167,     0,   168,     0,
       0,     0,     0,     0,   172,   173,   174,   175,  3986,   177,
     178,     0,   179,   180,     0,     0,     0,     0,     0,     0,
     186,     0,   188,     0,   190,   191,   192,   193,     0,   194,
     195,     0,   196,   197,   198,     0,   200,     0,   201,     0,
       0,   202,     0,     0,   203,     0,     0,   204,     0,   205,
       0,     0,     0,   206,   207,   208,     0,     0,   209,     0,
       0,     0,     0,   210,     0,     0,     0,     0,     0,   212,
       0,   213,     0,     0,     0,   214,     0,   215,   216,   217,
     218,     0,     0,     0,     0,     0,     0,   220,   221,   222,
       0,     0,     0,   223,     0,  -311,   225,     0,   226,   227,
     228,     0,     0,   229,   230,     0,   231,   232,   233,   234,
       0,     0,     0,     0,   237,   238,   239,     0,     0,   240,
     241,  3987,   242,   243,   244,     0,     0,     0,     0,     0,
       0,   246,     0,   247,     0,   248,     0,   249,   250,   251,
     252,   253,   254,     0,   255,     0,     0,     0,     0,   257,
     258,     0,     0,     0,     0,     0,     0,   261,     0,     0,
       0,   262,   263,   264,   265,  3988,     0,   266,   267,   268,
       0,   269,     0,   270,     0,     0,     0,     0,   271,     0,
       0,     0,     0,   273,     0,   274,   275,     0,   276,   277,
    3989,     0,     0,   278,     0,     0,     0,   280,   281,     0,
       0,   282,  3990,     0,   283,   284,     0,     0,     0,     0,
       0,   285,   286,     0,   287,     0,   288,     0,   289,   290,
       0,     0,     0,     0,  -292,     0,     0,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,     0,   307,   308,   309,   310,     0,   311,
     312,   313,   314,     0,   315,   316,     0,     0,     0,     0,
     317,   318,   319,   320,   321,   322,     0,     0,   323,   324,
       0,   325,     0,   326,     0,   327,   328,   329,   330,   331,
     332,   333,   334,   335,     0,     0,   336,   337,     0,     0,
     338,   339,   340,   341,     0,     0,     0,     0,   343,     0,
       0,     0,     0,   344,   345,   346,     0,   347,   348,   349,
    3991,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   354,   355,     0,     0,     0,     0,   357,
     358,   359,     0,   361,   362,   363,   364,   365,   366,   367,
       0,     0,     0,     0,   370,   371,     0,   372,     0,   373,
     374,   375,   376,   377,     0,   378,   379,   380,     0,     0,
     381,     0,     0,     0,   382,   383,   384,   385,   386,     0,
       0,   387,   388,   389,   390,   391,     0,   392,     0,     0,
     394,     0,   396,  -292,     0,   397,     0,     0,     0,   399,
       0,     0,   401,   402,  3992,     0,     0,     0,   404,   405,
     406,   407,   408,   409,     0,   411,   412,     0,   413,     0,
       0,     0,     0,   415,   416,   417,     0,     0,     0,     0,
     419,     0,     0,     0,   420,     0,     0,   422,     0,     0,
     425,   426,     0,   427,     0,   429,     0,   431,   432,     0,
       0,     0,     0,     0,     0,   433,   434,     0,   435,     0,
       0,   436,     0,     0,   437,     0,   439,     0,     0,     0,
     441,     0,   442,   443,   444,   445,   446,   447,     0,     0,
     448,   449,   450,   451,     0,   452,   453,     0,   454,     0,
     455,   456,   457,   458,     0,     0,   459,   460,     0,   461,
     462,   463,   464,     0,     0,     0,     0,     0,   465,   466,
     467,     0,     0,     0,     0,   469,   470,   471,     0,   472,
     473,     0,   474,   475,     0,     0,     0,     0,     0,   478,
       0,     0,   479,     0,     0,     0,   481,   482,   483,     0,
       0,     0,     0,     0,     0,   484,     0,     0,   485,     0,
       0,     0,   486,   487,   488,   489,   490,   491,     0,     0,
    -292,     0,     0,     0,   492,     0,     0,   494,     0,   496,
       0,   139,   497,   140,   141,   142,   143,   144,     0,     0,
     145,     0,     0,     0,   146,     0,     0,     0,     0,   148,
     149,   150,   151,   152,   153,   154,     0,     0,  -337,     0,
       0,     0,   157,     0,     0,     0,   158,     0,     0,   159,
     160,   161,     0,   162,     0,     0,     0,     0,     0,   165,
    3985,     0,   166,   167,     0,   168,     0,     0,     0,     0,
       0,   172,   173,   174,   175,  3986,   177,   178,     0,   179,
     180,     0,     0,     0,     0,     0,     0,   186,     0,   188,
       0,   190,   191,   192,   193,     0,   194,   195,     0,   196,
     197,   198,     0,   200,     0,   201,     0,     0,   202,     0,
       0,   203,     0,     0,   204,     0,   205,     0,     0,     0,
     206,   207,   208,     0,     0,   209,     0,     0,     0,     0,
     210,     0,     0,     0,     0,     0,   212,     0,   213,     0,
       0,     0,   214,     0,   215,   216,   217,   218,     0,     0,
       0,     0,     0,     0,   220,   221,   222,     0,     0,     0,
     223,     0,     0,   225,     0,   226,   227,   228,     0,     0,
     229,   230,     0,   231,   232,   233,   234,     0,     0,     0,
       0,   237,   238,   239,     0,     0,   240,   241,  3987,   242,
     243,   244,     0,     0,     0,     0,     0,     0,   246,     0,
     247,     0,   248,     0,   249,   250,   251,   252,   253,   254,
       0,   255,     0,     0,     0,     0,   257,   258,     0,     0,
       0,     0,     0,     0,   261,     0,     0,     0,   262,   263,
     264,   265,  3988,     0,   266,   267,   268,     0,   269,     0,
     270,     0,     0,     0,     0,   271,     0,     0,     0,     0,
     273,     0,   274,   275,     0,   276,   277,  3989,     0,     0,
     278,     0,     0,     0,   280,   281,     0,     0,   282,  3990,
       0,   283,   284,     0,     0,     0,     0,     0,   285,   286,
       0,   287,     0,   288,     0,   289,   290,     0,     0,     0,
       0,  -292,     0,     0,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
       0,   307,   308,   309,   310,     0,   311,   312,   313,   314,
       0,   315,   316,     0,     0,     0,     0,   317,   318,   319,
     320,   321,   322,     0,     0,   323,   324,     0,   325,     0,
     326,     0,   327,   328,   329,   330,   331,   332,   333,   334,
     335,     0,     0,   336,   337,     0,     0,   338,   339,   340,
     341,     0,     0,     0,     0,   343,     0,     0,     0,     0,
     344,   345,   346,     0,   347,   348,   349,  3991,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     354,   355,     0,     0,     0,     0,   357,   358,   359,     0,
     361,   362,   363,   364,   365,   366,   367,     0,     0,     0,
       0,   370,   371,     0,   372,     0,   373,   374,   375,   376,
     377,     0,   378,   379,   380,     0,     0,   381,     0,     0,
       0,   382,   383,   384,   385,   386,     0,     0,   387,   388,
     389,   390,   391,     0,   392,     0,     0,   394,     0,   396,
    -292,     0,   397,     0,     0,     0,   399,     0,     0,   401,
     402,  3992,     0,     0,     0,   404,   405,   406,   407,   408,
     409,     0,   411,   412,     0,   413,     0,     0,     0,     0,
     415,   416,   417,     0,     0,     0,     0,   419,     0,     0,
       0,   420,     0,     0,   422,     0,     0,   425,   426,     0,
     427,     0,   429,     0,   431,   432,     0,     0,     0,     0,
       0,     0,   433,   434,     0,   435,     0,     0,   436,     0,
       0,   437,     0,   439,     0,     0,     0,   441,     0,   442,
     443,   444,   445,   446,   447,     0,     0,   448,   449,   450,
     451,     0,   452,   453,     0,   454,     0,   455,   456,   457,
     458,     0,     0,   459,   460,     0,   461,   462,   463,   464,
       0,     0,     0,     0,     0,   465,   466,   467,     0,     0,
       0,     0,   469,   470,   471,     0,   472,   473,     0,   474,
     475,     0,     0,     0,     0,     0,   478,     0,     0,   479,
       0,     0,     0,   481,   482,   483,     0,     0,     0,     0,
       0,     0,   484,     0,     0,   485,     0,     0,     0,   486,
     487,   488,   489,   490,   491,     0,     0,  -292,     0,     0,
       0,   492,     0,     0,   494,     0,   496,     0,   139,   497,
     140,   141,   142,   143,   144,     0,     0,   145,     0,     0,
       0,   146,     0,     0,     0,     0,   148,   149,   150,   151,
     152,   153,   154,     0,     0,  -337,     0,     0,     0,   157,
       0,     0,     0,   158,     0,     0,   159,   160,   161,     0,
     162,     0,     0,     0,     0,     0,   165,  3985,     0,   166,
     167,     0,   168,     0,     0,     0,     0,     0,   172,   173,
     174,   175,  3986,   177,   178,     0,   179,   180,     0,     0,
       0,     0,     0,     0,   186,     0,   188,     0,   190,   191,
     192,   193,     0,   194,   195,     0,   196,   197,   198,     0,
     200,     0,   201,     0,     0,   202,     0,     0,   203,     0,
       0,   204,     0,   205,     0,     0,     0,   206,   207,   208,
       0,     0,   209,     0,     0,     0,     0,   210,     0,     0,
       0,     0,     0,   212,     0,   213,     0,     0,     0,   214,
       0,   215,   216,   217,   218,     0,     0,     0,     0,     0,
       0,   220,   221,   222,     0,     0,     0,   223,     0,     0,
     225,     0,   226,   227,   228,     0,     0,   229,   230,     0,
     231,   232,   233,   234,     0,     0,     0,     0,   237,   238,
     239,     0,     0,   240,   241,  3987,   242,   243,   244,     0,
       0,     0,     0,     0,     0,   246,     0,   247,     0,   248,
       0,   249,   250,   251,   252,   253,   254,     0,   255,     0,
       0,     0,     0,   257,   258,     0,     0,     0,     0,     0,
       0,   261,     0,     0,     0,   262,   263,   264,   265,  3988,
       0,   266,   267,   268,     0,   269,     0,   270,     0,     0,
       0,     0,   271,     0,     0,     0,     0,   273,     0,   274,
     275,     0,   276,   277,  3989,     0,     0,   278,     0,     0,
       0,   280,   281,     0,     0,   282,  3990,     0,   283,   284,
       0,     0,     0,     0,     0,   285,   286,     0,   287,     0,
     288,     0,   289,   290,     0,     0,     0,     0,  -292,     0,
       0,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,     0,   307,   308,
     309,   310,     0,   311,   312,   313,   314,     0,   315,   316,
       0,     0,     0,     0,   317,   318,   319,   320,   321,   322,
       0,     0,   323,   324,     0,   325,     0,   326,     0,   327,
     328,   329,   330,   331,   332,   333,   334,   335,     0,     0,
     336,   337,     0,     0,   338,   339,   340,   341,     0,     0,
       0,     0,   343,     0,     0,     0,     0,   344,   345,   346,
       0,   347,   348,   349,  3991,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   354,   355,     0,
       0,     0,     0,   357,   358,   359,     0,   361,   362,   363,
     364,   365,   366,   367,     0,     0,     0,     0,   370,   371,
       0,   372,     0,   373,   374,   375,   376,   377,     0,   378,
     379,   380,     0,     0,   381,     0,     0,     0,   382,   383,
     384,   385,   386,     0,     0,   387,   388,   389,   390,   391,
       0,   392,     0,     0,   394,     0,   396,  -292,     0,   397,
       0,     0,     0,   399,     0,     0,   401,   402,  3992,     0,
       0,     0,   404,   405,   406,   407,   408,   409,     0,   411,
     412,     0,   413,     0,     0,     0,     0,   415,   416,   417,
       0,     0,     0,     0,   419,     0,     0,     0,   420,     0,
       0,   422,     0,     0,   425,   426,     0,   427,     0,   429,
       0,   431,   432,     0,     0,     0,     0,     0,     0,   433,
     434,     0,   435,     0,     0,   436,     0,     0,   437,     0,
     439,     0,     0,     0,   441,     0,   442,   443,   444,   445,
     446,   447,     0,     0,   448,   449,   450,   451,     0,   452,
     453,     0,   454,     0,   455,   456,   457,   458,     0,     0,
     459,   460,     0,   461,   462,   463,   464,     0,     0,     0,
       0,     0,   465,   466,   467,     0,     0,     0,     0,   469,
     470,   471,     0,   472,   473,     0,   474,   475,     0,     0,
       0,     0,     0,   478,     0,     0,  4337,     0,     0,     0,
     481,   482,   483,     0,     0,     0,     0,     0,     0,   484,
       0,     0,   485,     0,     0,     0,   486,   487,   488,   489,
     490,   491,     0,     0,  -292,     0,     0,     0,   492,     0,
       0,   494,     0,   496,     0,   139,   497,   140,   141,   142,
     143,   144,     0,     0,   145,     0,     0,     0,   146,     0,
       0,     0,     0,   148,   149,   150,   151,   152,   153,   154,
       0,     0,     0,     0,     0,     0,   157,     0,     0,     0,
     158,     0,     0,   159,   160,   161,     0,   162,     0,     0,
       0,     0,     0,   165,     0,     0,   166,   167,     0,   168,
       0,     0,     0,     0,     0,   172,   173,   174,   175,     0,
     177,   178,     0,   179,   180,     0,     0,     0,     0,     0,
       0,   186,     0,   188,     0,   190,   191,   192,   193,     0,
     194,   195,     0,   196,   197,   198,     0,   200,     0,   201,
       0,     0,   202,     0,     0,   203,     0,     0,   204,     0,
     205,     0,     0,     0,   206,   207,   208,     0,     0,   209,
       0,     0,     0,     0,   210,     0,     0,     0,     0,     0,
     212,     0,   213,     0,     0,     0,   214,     0,   215,   216,
     217,   218,     0,     0,     0,     0,     0,     0,   220,   221,
     222,     0,     0,     0,   223,     0,     0,   225,     0,   226,
     227,   228,     0,     0,   229,   230,     0,   231,   232,   233,
     234,     0,     0,     0,     0,   237,   238,   239,     0,     0,
     240,   241,     0,   242,   243,   244,     0,     0,     0,     0,
       0,     0,   246,     0,   247,     0,   248,     0,   249,   250,
     251,   252,   253,   254,     0,   255,     0,     0,     0,     0,
     257,   258,     0,     0,     0,     0,     0,     0,   261,     0,
       0,     0,   262,   263,   264,   265,     0,     0,   266,   267,
     268,     0,   269,     0,   270,     0,     0,     0,     0,   271,
       0,     0,     0,     0,   273,     0,   274,   275,     0,   276,
     277,     0,     0,     0,   278,     0,     0,     0,   280,   281,
       0,     0,   282,     0,     0,   283,   284,     0,     0,     0,
       0,     0,   285,   286,     0,   287,     0,   288,     0,   289,
     290,     0,     0,     0,     0,     0,     0,     0,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,     0,   307,   308,   309,   310,     0,
     311,   312,   313,   314,     0,   315,   316,     0,     0,     0,
       0,   317,   318,   319,   320,   321,   322,     0,     0,   323,
     324,     0,   325,     0,   326,     0,   327,   328,   329,   330,
     331,   332,   333,   334,   335,     0,     0,   336,   337,     0,
       0,   338,   339,   340,   341,     0,     0,     0,     0,   343,
       0,     0,     0,     0,   344,   345,   346,     0,   347,   348,
     349,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   354,   355,     0,     0,     0,     0,
     357,   358,   359,     0,   361,   362,   363,   364,   365,   366,
     367,     0,     0,     0,     0,   370,   371,     0,   372,     0,
     373,   374,   375,   376,   377,     0,   378,   379,   380,     0,
       0,   381,     0,     0,     0,   382,   383,   384,   385,   386,
       0,     0,   387,   388,   389,   390,   391,     0,   392,     0,
       0,   394,     0,   396,     0,     0,   397,     0,     0,     0,
     399,     0,     0,   401,   402,     0,     0,     0,     0,   404,
     405,   406,   407,   408,   409,     0,   411,   412,     0,   413,
       0,     0,     0,     0,   415,   416,   417,     0,     0,     0,
       0,   419,     0,     0,     0,   420,     0,     0,   422,     0,
       0,   425,   426,     0,   427,     0,   429,     0,   431,   432,
       0,     0,     0,     0,     0,     0,   433,   434,     0,   435,
       0,     0,   436,     0,     0,   437,     0,   439,     0,     0,
       0,   441,     0,   442,   443,   444,   445,   446,   447,     0,
       0,   448,   449,   450,   451,     0,   452,   453,     0,   454,
       0,   455,   456,   457,   458,     0,     0,   459,   460,     0,
     461,   462,   463,   464,     0,     0,     0,     0,     0,   465,
     466,   467,     0,     0,     0,     0,   469,   470,   471,     0,
     472,   473,     0,   474,   475,     0,     0,     0,     0,     0,
     478,     0,     0,   479,     0,     0,     0,   481,   482,   483,
       0,     0,     0,     0,     0,     0,   484,     0,     0,   485,
       0,     0,     0,   486,   487,   488,   489,   490,   491,     0,
       0,     0,     0,     0,     0,   492,     0,     0,   494,     0,
     496,     0,     0,   497
};

static const yytype_int16 yycheck[] =
{
       6,   654,   560,   582,  1013,   608,   581,   582,   924,   925,
    1172,    20,   904,    19,  1725,   124,    22,   971,   934,  1014,
      29,  1102,  1432,  1202,   818,   727,    32,    36,     6,  1129,
    1863,  1864,  1148,    39,  1540,   946,    42,   706,   528,  1412,
      46,  1202,   622,  2603,  1334,  1432,  1576,  1577,    54,   530,
     531,   532,  1851,   534,   535,  2192,  1265,   538,  1538,   540,
     971,  2562,   510,   944,  2357,  2492,  1224,  2204,   503,     4,
    1232,  1233,  2395,  1231,  1236,  1237,  1238,  1239,  3302,  1241,
    1242,  1243,  1244,  1245,  1246,  1247,  1248,  1501,    22,   887,
      96,   972,  2838,   762,  1519,  2632,   765,  1139,  2171,  2900,
     650,   651,  2024,  2683,  1342,   663,   664,  1979,  1980,  1018,
    2328,  1527,    47,   119,   681,   121,  1851,   123,   124,   125,
    1443,  2290,  1018,  2026,  1996,  2205,  2024,  2420,  2410,  1509,
    3043,  2467,  2007,    12,  2152,  2472,    17,  1562,   791,  2152,
    1463,  2013,  2014,   121,  2481,   123,  3544,    19,  1471,  1472,
    2027,    25,    35,   588,  2031,    12,   591,  2029,  2030,  3028,
    2032,    74,    96,  2035,  2036,  2042,  2909,  2039,    19,  1862,
    3202,    17,  2044,  3308,  2284,  2052,  2048,  2049,  2050,  2051,
      64,    16,    17,  2055,  2056,    19,  2058,    48,    16,    17,
      16,    17,  2064,    31,   992,  2067,  2068,    52,  2070,  2697,
    2698,  1970,  3327,    21,    25,  2703,    82,  2705,  2175,    19,
     124,   133,     9,   780,   781,   782,    33,    83,    16,    17,
     668,    71,   670,   671,   672,   792,    16,    17,  3368,  3369,
    2152,    28,  3372,   131,    61,    16,    17,  2971,    35,  2646,
     820,   973,    60,    61,    67,  1043,    82,   146,    21,    90,
     371,  3391,  2948,  2673,  2152,  3801,    86,   165,  3398,   162,
     108,    82,    35,   210,  2136,  2137,  2138,  2139,   227,    57,
     286,   377,   359,    64,    16,    17,    49,   158,    16,    17,
     196,    25,  1998,  2521,  2522,   392,   158,    60,    61,    21,
     162,   115,   148,    21,   252,    16,    17,   269,  3696,   113,
      82,    88,   882,    35,  3152,   249,   190,    35,   222,    35,
    1519,   162,   305,   471,    23,  2016,  3540,    49,   129,    16,
      17,    49,   394,    37,   365,   129,    16,    17,    60,    61,
      16,    17,    60,    61,  2141,   369,   422,   134,    82,   160,
      12,   822,   236,   398,  3484,  2668,    12,   158,    59,  2531,
     487,   245,   162,  1562,   158,    12,   177,    65,   193,  2541,
     234,   130,   129,    16,    17,  2825,    19,   546,    41,    37,
     130,   398,    16,    17,   358,   275,    16,    17,    16,    17,
    2757,    40,   517,    16,    17,    10,    12,   223,   152,   225,
    2463,   158,   283,   152,  3582,   193,    12,   578,   546,   514,
    2638,  2639,   422,   356,   513,   377,   422,   231,  1030,  1031,
    2445,   325,  4024,   234,   447,   329,  3770,   305,   254,   169,
      16,    17,   336,   443,   417,   152,  3658,   629,   245,  3661,
     545,   231,   612,   177,   636,   286,  1138,    16,    17,   313,
     549,   223,   497,   225,  3798,   582,   196,  1069,    74,  2416,
    1152,   268,   405,   437,   474,   636,    71,   637,  2918,   133,
     360,   170,   135,   642,   599,   176,    16,    17,  1262,   180,
     497,   362,   254,  2700,   546,   244,   142,   635,   422,  2831,
     191,   158,  3622,  3715,   244,   142,   445,   624,   382,  1405,
     234,  3631,   313,   409,  1489,   453,   489,    16,    17,   286,
     214,   215,   416,    16,    17,    16,    17,   513,  2525,   515,
     358,  1884,    16,    17,    52,  3655,  1074,  1075,  1076,   606,
    3660,  3369,   643,   407,  2539,   381,   612,  1325,   635,   964,
     536,   637,   353,  4145,    16,    17,  2042,  3761,   359,   545,
    2967,   376,   250,   549,   379,   551,   214,   215,   376,   496,
    3293,   379,    69,  4099,  3297,   469,  1437,  1355,   564,  1440,
    2842,  2843,  2844,  1444,   238,  1446,  1775,   268,   503,   313,
     358,   422,   158,  1998,  1227,   581,   417,   480,   376,   305,
     479,   379,   116,   617,   147,   119,   376,  3775,   594,   379,
    1501,  1753,   269,  1474,  1475,   376,   637,   452,   379,  2024,
    1509,   617,  1764,  2525,   637,  1767,   578,   613,  3342,   353,
     321,  2486,  2685,  1509,   431,   359,   622,   552,   624,  3315,
      74,  1944,  2946,  2947,   540,  1115,  1116,  2525,  2646,   635,
     162,  2478,   145,  2646,   376,   641,   466,   379,   376,   430,
     646,   379,   648,   491,   650,   651,    16,    17,  2758,   655,
     656,  1141,  1561,   588,   660,   376,   591,  2073,   379,  1149,
     595,  1151,   584,   641,  3799,  1561,   489,   517,  1235,  2544,
     676,  2546,  3807,  1163,  1164,  1165,    16,    17,  2553,   376,
    2552,  1171,   379,   269,  3091,  1252,   376,    16,    17,   379,
     376,  2566,  2564,   379,   608,   579,  3116,  2572,  2573,   607,
     521,   635,  2471,   579,   570,  1747,    65,   418,   817,   623,
    3511,   557,   646,  2588,  2589,  2682,  2141,    16,    17,   557,
    1270,   727,   635,   376,  2646,  1519,   379,  2152,  1308,  2422,
    3599,   612,   376,  1833,  4132,   379,   376,  1469,   376,   379,
    2615,   379,   603,   376,   541,  2620,   379,   557,  2646,  1547,
    3782,   612,   635,  2628,  2629,  2135,   635,   591,   576,  2634,
     641,  3886,   559,   637,  2946,  2947,   617,   665,  1562,   641,
     567,   598,  2644,  2846,  2847,  2957,   612,   521,   635,   785,
     376,   787,   637,   379,   409,   606,   621,  1337,  2504,  1998,
     604,  2973,  2974,   621,  3929,   621,   620,   376,  1378,   596,
     379,   636,  2984,   576,  1354,   811,   812,   813,   814,   815,
     816,   817,   640,   819,   820,   924,   637,   489,   526,   928,
     929,  1401,  2523,   621,   597,   598,   376,  3570,  3571,   379,
     641,   621,   546,  2640,   812,  2870,   945,   641,   816,   637,
     621,   819,    16,    17,   576,   609,   636,   637,   576,   591,
     609,   857,  3090,  1288,  3352,   636,   637,   376,  3356,   518,
     379,  1441,   606,   376,   870,   376,   379,  3244,   379,   601,
    4268,  4483,   376,   489,   641,   379,   882,   883,   546,   621,
     539,   887,   609,   621,  2364,  4073,   511,   559,  3386,  3387,
    3388,   250,    16,    17,   376,   637,  3394,   379,   636,   637,
     621,  3253,   517,   635,  3402,   422,   565,    25,   471,   610,
     584,   143,    16,    17,   452,   636,   637,    47,   924,  2936,
     176,  3144,   928,   929,   621,  1360,   637,  3250,  3305,  2944,
     395,   621,  2141,   610,   189,   621,   870,   562,  1513,   945,
     637,   876,   317,  2152,   158,  2778,   636,   637,   480,   883,
     636,  3287,    16,    17,  1870,   162,  3293,   411,   176,  4094,
    3297,   285,   162,  4103,   641,  4105,    16,    17,   621,  3262,
    3883,  1673,   227,  1421,  1890,  3473,  3258,   621,    72,   604,
     176,   621,  2815,   621,  3482,  1939,   992,   162,   621,  2950,
    2951,   362,   636,   637,     8,   354,   636,  3577,   636,   637,
      16,    17,    25,   636,   637,  3329,   376,  2338,  1014,   379,
      16,    17,  4141,   227,  2936,   369,   550,    16,    17,   553,
     615,  1975,    16,    17,   610,   621,   218,   824,  1939,   964,
     196,   966,  2538,  2539,    16,    17,   376,  1043,  2936,   379,
    2839,   637,   621,  2453,   129,  2455,  2456,   376,   189,  1930,
     379,    16,    17,  4277,  3127,   641,  4191,   635,   637,   104,
    2907,  2908,  1943,   141,  1975,  1946,  1947,  2229,  2455,  2456,
     139,   621,   635,  3091,   236,  3155,   639,   376,  3091,  2504,
     379,   211,   536,   245,    82,   154,   227,   637,  1094,  1095,
    1096,  1097,  1098,    16,    17,   194,  2177,   663,   664,   131,
    2525,    44,   621,   335,  2839,  1214,   203,   561,   621,  3012,
     621,   643,    16,    17,  3332,   393,   234,   621,   637,  3288,
     444,    11,  1570,  3350,  3351,   540,   637,    16,    17,  3989,
    3990,  3358,  1138,   637,  3361,  3362,  3013,   160,  2376,   621,
     605,  2464,  1251,  2301,   184,   193,  1152,  3329,   454,  1851,
     465,  3378,    16,    17,   513,   637,    16,    17,    16,    17,
    1094,   439,   418,   143,  1098,  3392,   271,   526,  2084,  3091,
     184,  3398,  3399,  3400,  3401,    16,    17,  2593,   275,   249,
    3403,     0,    16,    17,  3059,  4102,    16,    17,  4093,  2900,
     235,  2307,  2308,  3091,  2484,   313,  1202,  3777,   471,  1766,
     418,  1781,   376,   701,  1998,   379,   158,   252,  1214,   162,
    2372,   234,  3856,  1771,   160,  2640,   268,    52,   258,   264,
     382,  2646,   418,   355,   356,   223,  2135,   225,  3301,    16,
      17,   445,    19,  1783,  2395,   227,  1345,  1817,   191,  2135,
     130,   359,   155,   409,   322,  1251,    16,    17,  3475,    19,
    1256,   621,   376,   166,   286,   379,   254,   628,  2300,   618,
     635,  1841,  1842,   617,  1270,  3818,    72,   637,  2310,   656,
    1828,   206,   376,   480,   772,   379,   361,  3814,  3815,  4080,
     480,   621,    16,    17,   378,  4414,  4032,   611,   234,   193,
     313,   390,   621,  2091,   427,  2504,  3856,   637,    16,    17,
     345,  4206,  1308,  2482,   352,   480,   231,   280,   637,  2723,
      16,    17,   376,   127,  1320,   379,  1322,   252,   358,  1325,
      20,  2482,   621,   104,  2804,   517,   376,  1894,  3465,   379,
     255,  1337,    16,    17,   464,   590,   359,   643,   637,  1345,
      16,    17,   536,  4567,    16,    17,   540,  2141,  1354,  1355,
     191,  3312,   422,  1288,   546,   335,   461,  1792,  2152,   637,
     376,   167,   635,   379,    16,    17,   193,   340,    16,    17,
     376,   589,  1378,   379,   540,  1381,  3699,   376,   370,   476,
     379,   637,   376,  1389,   269,   379,  1392,    16,    17,   488,
     126,  1326,  2571,   589,   376,  1401,   179,   379,   630,   631,
     632,   633,   345,   521,   471,  1411,  1412,  1516,  3961,   323,
    2571,   376,   457,   359,   379,   242,  1422,  1423,  1424,  1425,
    1426,  1427,    16,    17,   366,  1360,  1432,   641,   815,   243,
     404,  2640,  1438,  1439,   134,  1441,   643,  2646,  2944,  1445,
     573,   637,   377,   643,  1422,  1423,  1424,   621,  1426,   590,
     186,   345,   394,   376,   235,   227,   379,    16,    17,   245,
    1466,  1439,   375,   637,  2795,  2796,  2797,  1445,   643,  4386,
    4387,   252,   376,   367,   636,   379,  1042,   522,  2888,   265,
    4340,  4341,  1417,   264,    16,    17,   519,   376,   606,   379,
     379,  1425,   377,  1427,   546,    16,    17,   621,   521,    12,
      16,    17,   482,   483,   269,  3932,    25,  3013,   162,  1444,
    1516,  2936,   376,   637,   286,   379,   376,   621,   376,   379,
     346,   379,  1020,   358,  1530,  2441,  1092,   480,   126,  1535,
    1536,   143,  1466,   637,   223,   376,   225,  2637,   379,  4183,
    4184,  1547,   376,   802,   517,   379,   376,   283,    53,   379,
     377,    16,    17,    16,    17,   471,   234,   621,   610,    64,
    1566,   193,  1568,  1569,   345,  1571,  1572,  3890,   635,   567,
     162,   621,   378,   637,   540,   521,  3713,  1583,   361,  1585,
      16,    17,   191,   606,    16,    17,   636,  1522,   186,   376,
    1568,  1569,   379,   591,    16,    17,  1530,   131,    16,    17,
     206,   471,  1536,  2684,   546,   621,   376,    16,    17,   379,
     424,   436,   377,   245,   637,   621,  2774,   452,    16,    17,
     169,   637,   621,  4183,  4184,   643,   362,   621,  4272,   142,
     544,   637,   545,   666,    16,    17,   895,   636,  3931,   621,
      16,    17,   376,   637,   479,   379,   418,  2826,   628,   629,
     630,   631,   632,   633,   235,   637,   621,   571,   376,   126,
     606,   379,    16,    17,   126,  2826,  3091,  1673,  1674,   278,
     376,   252,   637,   379,   270,  1784,   457,   273,   471,   346,
     516,   359,   216,   264,   520,   283,   169,   512,   112,    16,
      17,   637,   376,    16,    17,   379,    12,   591,   621,   629,
     376,    12,   567,   379,   376,    80,   636,   379,   591,   523,
    2504,  2201,  4272,   196,   637,   234,  2206,   621,  2590,   635,
     546,  2821,   211,   335,   376,  1731,   591,   379,   376,  2219,
     409,   379,   621,  2402,  2403,  2404,   193,  2304,    16,    17,
     130,   522,  3866,    16,    17,   169,   572,   376,   637,  3229,
     379,    12,   286,   636,   637,   471,   226,   621,  1867,    16,
      17,   621,  2252,   621,   362,   635,   255,  1773,  1774,   639,
     275,   193,   196,   637,    17,  1781,   636,  1783,  1784,   637,
     621,   564,   376,    16,    17,   379,   471,   621,  3318,  3319,
    1796,   621,  1798,  3592,   313,   636,  4297,   580,  1804,  1805,
    3511,  1807,   636,   515,  3679,   346,   636,    16,    17,    16,
      17,  1817,   269,   471,  1820,   190,   283,   376,  1824,   206,
     379,   283,   471,   419,   536,   598,   142,  2317,   601,   156,
    2410,   142,   511,   569,   621,  1841,  1842,  1843,  1844,   591,
    1774,  3640,   635,   521,   376,  1851,  2640,   379,  1854,  1855,
    1856,   621,  2646,   540,   211,   376,   231,  1792,   379,   640,
     376,  1867,   543,   379,  2964,  3989,  3990,   231,    16,    17,
    1804,  1805,  2447,  1807,    16,    17,   457,  1136,  1884,   546,
     255,   142,  3091,   562,   231,   637,  1820,   621,    16,    17,
    1824,   643,    16,    17,     8,   362,    16,    17,   255,  1905,
     362,   231,   636,   621,  1839,   572,    16,    17,  3281,  1843,
    1844,   376,   226,   376,   379,   621,   379,    31,   636,   635,
    1854,  1855,  1856,  4282,   112,   604,  4285,  1186,   606,  2883,
     636,  1190,    16,    17,   635,    17,   346,   621,    82,  1945,
     376,   522,   643,   379,   376,   621,  2838,   379,    39,   621,
     635,   206,   636,   460,   376,    46,  1962,   379,   376,    82,
     636,   379,   471,  1969,   636,  1900,   126,   376,   635,   621,
     379,   569,  2883,   621,    16,    17,  2551,   635,   376,   635,
     371,   379,    16,    17,   636,   409,   635,   643,   636,   242,
      16,    17,   621,  4082,   376,  4084,    48,   379,  2914,  3289,
     376,  4125,  4126,   379,    89,   546,   193,   636,    16,    17,
     479,  1945,   596,  2894,   490,  3131,   628,   629,   630,   631,
     632,   633,   376,   204,   109,   379,   186,   621,   286,   217,
     537,   572,   407,    16,    17,  1969,   543,   160,  3913,  3914,
    3915,  2150,   636,  3453,  3160,  3161,   490,  2156,  1983,   376,
     636,   637,   379,   376,   214,   643,   379,  1992,  1993,  4418,
    2066,   143,   621,   223,  2545,  3181,  3453,   636,  2003,  2004,
    2005,  2006,   126,  2008,  2009,  2081,  2557,   636,  2559,  2560,
     587,   641,  2954,  2192,  2532,  2091,   595,   596,  2569,   621,
     234,   585,  2540,  3254,   635,  2204,    32,   604,   376,   373,
     621,   379,   569,   376,   636,   621,   379,   569,   636,   637,
    4234,   234,   511,  2985,   557,   636,   540,   549,   635,   376,
     636,  3300,   379,   283,  2996,  4249,   635,  2999,   190,   310,
     311,   549,   186,     6,   315,   316,   546,  2839,   562,  3300,
    4264,   445,    17,   376,  2150,   126,   379,   635,    84,    64,
    2156,    11,  2158,    16,    17,  2161,   621,  3336,   621,    12,
     214,   635,   572,  2169,    59,    80,  2172,   376,   546,   376,
     379,   636,   379,   636,   635,  3336,   635,    92,   636,   637,
     604,  3053,   126,  2161,  2293,   621,  2192,  4059,  4060,   621,
      43,  4063,  4064,  4065,  4066,   383,    60,    61,  2204,   621,
     636,   635,   362,   621,  4328,   186,   394,   536,    72,   353,
     193,   540,   621,   401,  2323,   359,  4340,  4341,  4051,    12,
     156,   635,  2780,   621,   635,   635,   643,   636,   376,   283,
     353,   379,   635,   214,   376,   635,   359,   379,   636,   621,
     636,   637,   186,  2823,    97,   621,  4126,   591,   376,   102,
     635,   379,   376,   335,   636,   379,   376,   179,   587,   379,
     636,   635,  2842,  2843,  2844,   635,   376,   621,   143,   379,
     214,  1309,   635,  4397,  1312,   190,   549,  1315,  4150,  2769,
     195,   176,   636,  4407,   428,   180,   635,  2293,  3794,  3795,
     635,  3407,   376,   637,   621,   379,   191,  3091,   621,   643,
     636,   637,   283,     6,   635,   428,   173,   495,   362,  4181,
    4182,   635,  2318,   636,    12,   635,   231,  2323,  4190,   521,
     289,   408,   291,   292,  4448,   635,  4450,   635,   291,   292,
    3284,  3247,  2338,   635,   376,   635,  4460,   379,   307,   283,
     255,   635,   376,   621,   307,   379,   636,   637,   621,   142,
     376,   635,  4476,   379,  4478,    58,  4480,   637,   636,   635,
    3539,   613,   614,  4487,   621,  2371,   636,   637,   376,  4080,
    3451,   379,   635,  3284,  4498,    60,    61,   521,  3539,   636,
     591,   362,  2491,  2492,   635,   637,   636,   637,   621,  2395,
    4514,  4515,   460,   376,   247,  4270,   379,   635,   521,   587,
     482,   483,   374,   636,  2410,   635,  4530,  4531,   635,   569,
     635,  4535,   621,   635,   621,   636,   637,  2423,   362,  2425,
     636,   637,   740,   216,   636,   637,   321,   636,   227,   636,
     574,   636,   637,   355,   356,  1108,  1109,  1110,   635,   361,
     635,  2447,   760,   146,   142,   636,   637,  2453,  4328,  2455,
    2456,   574,  1125,  2562,    80,   773,   774,   636,   637,    11,
     335,   635,   606,   636,   637,   434,   435,   126,   404,   322,
     129,   434,   435,   621,  4034,  4035,  2482,   635,   393,   621,
     636,   637,   635,   606,  1157,  2491,  2492,  1160,  2423,  2970,
     426,   536,   407,   621,   636,   635,  3491,   621,   636,   637,
     635,   621,   126,   636,   637,   129,  1179,  1180,   636,   635,
    1183,   621,   636,   635,   637,   569,   636,   635,   216,   636,
     637,   367,   458,   418,   635,  2531,   636,   186,   636,   637,
    1203,  1204,   385,  2542,   635,  2541,   635,   621,    33,  2548,
     635,  2547,   635,    61,   626,   627,   628,   629,   630,   631,
     632,   633,   636,   367,    19,   214,  2562,   636,   637,   503,
     112,  2570,   186,   635,   190,  2571,   635,  2576,  4448,  1805,
    4450,  1807,   635,  2582,  2583,  2581,   636,   637,   130,   621,
     516,   637,   636,   497,  2590,   500,   635,   621,   569,   126,
     214,  2597,  2598,    50,   636,   621,  4476,  2603,   116,  4159,
     635,   119,   636,  4163,   635,   231,  2612,   482,   483,   127,
     636,   636,   637,   621,  2549,  2550,   635,   169,  1854,  1855,
    1856,   636,   637,   635,   283,   569,   144,   636,   636,   255,
     636,   637,  2543,    82,  4514,  4515,   636,   637,   621,   104,
    2575,    90,   564,   635,   196,   635,   499,  2581,   143,   186,
    4210,  4211,   280,   356,    50,   636,  2567,  2568,   580,   283,
    4493,  2667,  2668,    19,   579,   635,   115,   635,  2603,   187,
     635,  2677,  2678,  2679,  3700,  3701,  3702,   214,  3258,  3169,
     533,  2616,  2617,   635,  2619,   635,  2621,  2622,  2623,  2624,
    2625,  2626,  2627,   158,   635,  2630,   635,   162,  2633,   637,
    3800,  2636,   635,   362,   635,  3280,   635,  2618,   636,   637,
     635,   160,   505,   506,   507,   508,   509,   510,   421,  3209,
     423,   152,   153,   143,   189,   243,   191,   279,   471,   522,
     636,   637,   635,  2667,   635,  4568,   479,  3653,   362,   635,
      26,   206,   635,  2677,  2678,  2679,   283,   212,   104,   635,
     245,   626,   627,   628,   629,   630,   631,   632,   633,   367,
    3922,   367,   227,   982,   983,   984,   465,   393,   636,   637,
     235,   990,   991,   268,   636,   637,   578,   242,  3804,  3805,
     630,   407,   231,  3809,  3810,  2791,    72,   252,  2794,  2795,
    2796,  2797,    35,   636,   637,   112,    82,  2803,   643,   264,
     636,   637,   158,    64,   269,   479,   162,   505,   506,   643,
     508,   168,   510,   278,   636,   637,  2822,  2823,    61,    80,
    2826,  3616,  3617,   490,   522,   362,   344,   601,   602,   347,
     604,    92,   606,  2839,  3629,   191,  2842,  2843,  2844,  3834,
     335,  3636,   269,   129,    19,  3840,   636,   637,   635,  2855,
     206,    26,   595,   596,   636,   637,   212,   409,  2967,   191,
     355,   356,   517,   312,   536,   104,   497,  3662,  3663,  2803,
    4049,   517,   126,   116,  3974,  3433,   119,   280,   195,   235,
     345,   330,  2888,   159,   127,   191,   242,  3462,  4049,   636,
     637,  3358,   635,    91,  3361,  3362,   252,    72,   636,   637,
     637,   144,   367,   126,   353,   637,   424,    82,   264,   368,
     569,  3378,   377,   269,   231,   335,   532,  1590,   636,    82,
    2855,   158,   278,   636,   637,   477,   636,   637,   129,   190,
     115,  2940,   186,    96,   195,   642,   431,   223,   635,   225,
    2946,  2947,   636,   637,   409,   569,   636,   637,  2954,   636,
     637,  2957,  4052,     6,   129,   636,   637,   636,   637,   511,
     214,  2967,   279,   186,   114,  2971,     4,  2973,  2974,   255,
     231,   636,   637,   636,   637,   636,   637,   470,  2984,  2985,
     636,   637,   636,   637,   604,   537,   245,   482,   483,   345,
    2996,   214,   457,  2999,   255,   637,   235,  3741,  3742,   393,
     243,    57,  1675,   498,  1187,  1188,  1679,    37,  3475,  3264,
    3265,   367,   437,   252,   479,  3021,   173,    85,  3024,    87,
     115,   377,   224,  3029,   199,   264,  3222,  3223,  1701,   283,
     637,   643,   569,  2968,   637,   553,  3520,  3521,  3044,    72,
      12,  2976,  3048,   609,   636,   636,   546,  3053,   223,   142,
     225,     9,   604,   409,   637,   643,   636,   522,   636,   643,
     283,   129,   482,   483,   582,   635,  3044,   143,   268,   355,
     356,   643,   521,   367,   637,   361,   162,   163,   160,    50,
     255,   367,   150,  3089,   642,  4185,   280,   280,   537,   119,
    3024,   280,   280,   280,   257,   637,   126,  4276,  3104,   280,
     536,   457,   635,   275,   347,  3111,   345,   637,   362,  4104,
     392,   197,   104,   578,   637,  4276,   557,   185,   637,   557,
    3126,   407,   208,   479,   637,   590,   591,   162,   367,   637,
     637,   626,   627,   628,   629,   630,   631,   632,   633,   362,
    4032,    72,  3811,  3812,  3813,   610,   407,   612,   637,   179,
     517,   245,   630,   534,   246,   181,   186,   191,  3267,   168,
     477,  3096,   248,   637,   517,   494,   522,   396,   138,   245,
     333,   636,   637,   637,   260,   640,   641,  3111,   395,   637,
     355,   356,   636,   500,   214,   215,   361,   367,   585,   475,
     616,   590,   367,   196,   637,   358,   193,  3203,   193,   162,
     630,   287,  4364,  3778,   636,  3211,  3764,   627,   628,   629,
     630,   631,   632,   633,   636,   636,    12,    13,   457,   636,
     537,   184,   578,   540,   636,   636,   543,   636,   636,  3235,
     637,   629,   407,   635,   197,   591,   636,   578,   480,   500,
    4156,   636,   635,   235,   487,   208,   636,   636,  3254,  3255,
     636,   636,  3258,   283,   610,  4171,   612,   420,   637,   335,
     252,  3267,   579,   349,   637,   636,  3869,  3273,   636,   635,
     587,   633,   264,   636,  3280,  3281,  3211,   635,   637,   557,
     636,   637,   610,   522,   640,   641,   233,   637,   635,    11,
     528,    12,   204,   579,  3300,   258,   193,   260,   643,   635,
     475,   635,  4464,   643,   266,   643,   637,   103,   643,   193,
     553,   637,   636,   171,   461,   569,   346,   385,   579,  3325,
     417,   583,   637,  3329,   287,   479,   637,   357,   637,   191,
    3336,   361,   362,    48,   511,   343,  3342,   133,  3344,   582,
    3346,   511,   511,   511,   511,   470,   569,  3926,   511,  4528,
     146,  3286,    80,   345,   393,   138,  3465,   393,   557,   253,
     253,   429,   393,   537,   537,    16,    17,  4528,   138,   393,
      48,   393,  4551,   169,   391,   367,   172,   393,   393,  4558,
    4375,  4376,   393,  4378,   191,  4564,    82,   183,   440,   352,
    4551,   635,     6,   162,   162,   162,   162,  4558,   162,    13,
      96,    15,   162,  4564,   579,   162,   482,   483,   204,   162,
     162,   162,    26,   162,    28,   162,  3422,   162,   162,   162,
    3978,   162,   112,   162,   162,   162,   162,   162,   637,   279,
     635,   367,   367,   367,  4429,   231,  4431,  4432,   591,   643,
     636,   137,   238,   406,    58,  3554,   156,  3453,   241,    63,
      64,   241,   636,   643,   636,   557,    70,   636,   636,  3465,
     636,   557,   546,   275,    88,   457,   637,   557,    82,   120,
     121,   122,   123,   124,   636,   636,    90,  3412,   643,   169,
     617,   637,   278,   643,    48,   162,   100,   635,  4141,  4068,
     635,   635,   557,   635,  4489,   162,   374,   546,   193,   193,
     193,   115,   242,   546,  3439,   193,   196,   249,   422,   637,
     171,   362,   380,   326,   115,   129,   546,  4526,   132,   252,
     550,   252,   115,   553,   643,   139,   140,   635,  3534,  3638,
     522,   255,   146,  3539,   564,   255,   557,   635,   373,   569,
     154,   231,   572,   206,   158,   546,   160,   635,  3554,   454,
     626,   627,   628,   629,   630,   631,   632,   633,   635,   393,
     643,   257,   377,   630,   635,   635,   612,   243,   219,   220,
     221,   222,   243,   636,   636,   189,   636,   636,   636,   643,
     367,   636,  3588,   630,   635,  4143,   636,  3593,   636,   279,
     227,  3600,   636,   393,   193,   637,   270,  4172,   628,   629,
     637,  3607,   643,   584,  3713,   245,   422,   636,   636,   223,
     162,   225,   637,   636,   410,   229,   252,   231,   414,   252,
     255,   255,   635,   637,   636,   239,   405,   637,    82,   635,
     637,    19,  3638,   637,   430,   367,   636,   333,   367,   637,
     254,   635,   438,   497,   367,  4561,   636,   636,   367,   269,
     446,   635,   473,   636,   636,   612,   204,   422,  3664,   355,
     356,   149,   358,   636,   262,  3671,   471,   636,  3674,   637,
     206,  3780,   481,   252,   325,   471,   327,   328,   329,   252,
     635,   637,   129,   129,   635,   336,  3692,   403,   484,   485,
     643,    86,   489,   145,  3700,  3701,  3702,   230,   312,   636,
      19,    35,   497,   466,  3639,   637,   636,  3713,   636,   635,
     635,   635,    35,   636,   404,   636,   330,   636,   636,   409,
     334,   362,    61,   243,   420,   376,   636,   636,   379,   636,
     636,   257,   332,   417,   278,   531,   374,   612,   242,   635,
     643,   636,    48,   212,   332,   637,  3681,   637,   591,   591,
     635,   309,   635,   635,   635,   635,   601,   636,   372,   635,
     601,  4414,   635,   377,    14,   416,   562,   584,   129,   255,
     384,    19,   386,   255,  3780,   361,    35,   636,   171,   393,
     394,   637,   461,   332,  3790,   362,   175,   477,   584,   637,
     586,   546,    17,   255,   540,   635,    37,   595,  3804,  3805,
      26,   242,    28,  3809,  3810,    26,   591,    28,   635,   591,
     367,   425,   546,   635,   357,   511,   546,   468,   469,   596,
     612,   635,   454,  3932,   515,   439,   440,   441,   442,    12,
      13,   171,   636,   374,    60,    61,   139,    63,   527,    60,
      61,   635,    63,  4234,  4423,   191,    72,   537,   462,   635,
    3856,    72,   362,   543,   635,   157,    82,   584,  4249,   609,
      32,    82,   191,   636,    90,   636,  4519,    62,  4426,    90,
     644,   138,   562,  4264,   138,  3881,  3882,   635,   119,   548,
     160,   409,   143,    74,   430,   126,   193,    32,   636,   115,
      64,   609,   388,   374,   115,    64,   271,   587,   528,    48,
    4553,    48,     5,   129,   367,   242,   132,   521,   129,   367,
     636,   132,   637,   156,   604,  3921,   145,   374,  3924,   636,
     103,  3856,   636,   537,   635,   374,  3932,   541,   635,   635,
     137,   635,   641,    48,   160,    48,   155,  4495,   179,   160,
      48,   584,   156,   143,   528,   186,   560,  3953,  3882,   133,
     133,   565,   609,   226,   285,   641,   461,   608,  3964,    35,
     128,   644,   151,   146,   578,    35,    48,   635,    48,    48,
     621,   622,   623,   214,   215,   641,   636,   255,   463,    54,
    3986,   637,   224,   636,   245,  3991,   169,  3921,   549,   172,
     156,   637,    68,   209,   641,   637,    48,   223,    68,   225,
     183,    54,   223,   191,   225,   231,  4397,  4565,   636,   636,
     231,   637,   444,   239,  4020,  4021,  4407,   227,   239,   549,
     191,   204,   611,   129,   191,    56,   362,   641,   254,   635,
     192,   479,   637,   254,  3996,    66,  2635,  2330,  3679,   966,
    3426,  2520,   283,  4049,  3690,   664,  4026,   268,   231,  4144,
      81,  4348,  1027,  4349,  3688,   238,  3692,  4553,  3880,  4506,
     136,    46,    93,    94,    95,   583,   136,  1850,  2839,  4460,
    3866,  3866,  3866,  3866,   335,  4516,  4082,  4186,  4084,   110,
    4086,  3866,  3866,  3866,   160,  4394,   312,  4478,   164,  4480,
     160,   312,  3866,  4227,   164,   278,  4487,   681,  3866,  4394,
    3866,  3866,   686,  4341,   330,   346,  4253,  4498,  3866,   330,
    3866,  4252,  4118,  1067,  3889,  1525,  2080,  1775,  4030,  2994,
     361,   362,   198,  1527,  2817,  2057,  3533,  2822,   198,  3235,
    1342,  4176,  3536,  3922,  4280,   335,  4464,  4372,   722,  4530,
    4531,  4423,   218,  4068,  4535,  1561,   523,  2073,   218,  3697,
    3097,  3346,  2600,  2668,  2081,   739,   232,  3593,   384,  3599,
     386,  4391,   232,   384,  3152,   386,  3978,  3369,   394,  3832,
    4176,  3649,  3403,   394,  4172,  3638,  2491,    11,    11,  4210,
    4186,  4091,  4211,  2165,  4152,  4159,  4192,  4163,  4297,  2675,
    3953,  3840,  2080,   996,  3325,   639,   780,   781,   782,   783,
    2593,  1484,  2469,  1957,   280,  3604,  2390,  2091,   792,  4259,
     280,  3324,  2803,  1557,  4149,  1536,  1843,  2364,  3230,  2286,
    2414,   482,   483,  3868,   607,  1861,  3211,   410,  3976,   305,
    2196,   414,  2780,  2200,   916,   305,   462,  1152,  2483,  2285,
    3291,   462,  2477,  3797,  4179,  4180,  3944,   430,  4312,  3422,
    4313,  1125,  2311,  4259,  3336,   438,  3791,  2888,  4495,  3780,
    2419,  4370,  2169,   446,  2589,  2394,  4272,  3539,  1325,  2358,
    4276,  3249,  3248,  3300,  1355,  4276,   120,   121,   122,   123,
     124,   597,   482,   483,  1583,   677,   582,  1940,   471,   873,
    1430,  4297,  1941,   324,  2461,   521,   582,  1795,  3344,  3233,
     521,   484,   485,  4416,  4304,   546,  4312,  4313,  4462,   550,
     341,   537,   553,  4382,  4558,   541,   537,  4564,  3640,  2444,
     541,  1361,  3254,   564,  3280,   581,  3281,  1728,   569,   581,
    1887,   572,   408,  2437,   560,  1389,  2436,  4272,   408,   560,
    2430,   417,  1824,   575,   898,  1566,  3911,   417,   531,  2791,
    1317,   664,   578,  4288,  4289,  3917,   432,   578,   576,  1379,
     519,   903,   432,   519,  4370,   626,   627,   628,   629,   630,
     631,   632,   633,   664,   450,   219,   220,   221,   222,   562,
     450,   664,    -1,    -1,    -1,    -1,    -1,   628,   629,   686,
      -1,    -1,    -1,  4399,    -1,    -1,    -1,    -1,    -1,    -1,
    4406,   584,    -1,   586,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   637,    -1,   489,   635,    -1,   492,    -1,    -1,   489,
      -1,    -1,   492,    -1,    -1,   722,   626,   627,   628,   629,
     630,   631,   632,   633,    -1,    -1,   467,    -1,  4547,    -1,
      -1,   517,   739,    -1,    -1,    -1,    -1,   517,    -1,    -1,
      -1,    -1,    -1,  4388,    -1,    -1,    -1,    -1,    -1,    -1,
     536,    -1,    -1,   539,   540,  1049,    -1,    -1,    -1,   539,
      -1,  4477,    -1,    -1,    -1,    -1,  4482,    -1,    -1,    -1,
      -1,   325,    -1,   327,   328,   329,   783,    -1,    -1,    -1,
      -1,    -1,   336,   524,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   542,   588,  4519,    -1,    -1,    -1,    -1,   588,    -1,
    1104,  1105,  4528,    -1,    -1,    -1,    -1,    -1,    -1,  1113,
    1114,  1115,  1116,  1117,  1118,  1119,  1120,  1121,  1122,  1123,
    1124,  4547,    -1,    -1,    -1,  4551,    -1,  4553,  1132,  1133,
      -1,  1135,  4558,  1137,    -1,    -1,    -1,  1141,  4564,    -1,
    1144,  1145,  1146,  1147,    -1,  1149,  1150,  1151,    -1,    -1,
      -1,    -1,   416,    -1,  1158,  1159,   873,  1161,  1162,  1163,
    1164,  1165,    -1,    -1,  1168,  1169,  1170,  1171,  1172,  1173,
    1174,  1175,  1176,  1177,  1178,    -1,    -1,  1181,  1182,    -1,
      -1,  1185,    -1,    -1,    -1,  1189,    -1,  1191,  1192,    -1,
      -1,    -1,   228,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1205,  1206,    -1,   468,   469,    -1,    -1,    -1,  1213,
      -1,    -1,    -1,    -1,    -1,    -1,  1220,  1221,  1222,    -1,
    1224,    -1,    -1,    -1,    -1,    -1,    -1,  1231,  1232,  1233,
      -1,  1235,  1236,  1237,  1238,  1239,    -1,  1241,  1242,  1243,
    1244,  1245,  1246,  1247,  1248,    -1,    -1,    -1,  1252,  1253,
      -1,    -1,   288,    -1,   290,   291,   292,   293,   294,    -1,
     296,   297,   298,   299,   300,   301,   302,   303,   304,    -1,
     306,   307,   308,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1329,    -1,    -1,    -1,    -1,
      -1,    -1,  1049,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   608,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   622,   623,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1389,    -1,  1104,  1105,    -1,
      -1,    -1,    -1,    -1,    -1,  1399,  1113,  1114,   434,   435,
    1117,  1118,  1119,  1120,  1121,  1122,  1123,  1124,    -1,    -1,
    1414,    -1,    -1,    -1,  1418,  1132,  1133,    -1,  1135,    -1,
    1137,    -1,    -1,    -1,    -1,    -1,    -1,  1144,  1145,  1146,
    1147,    -1,    -1,  1150,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1158,  1159,    -1,  1161,  1162,    -1,    -1,    13,    -1,
      15,  1168,  1169,  1170,    -1,    -1,  1173,  1174,  1175,  1176,
    1177,  1178,    -1,    -1,  1181,  1182,    -1,    32,  1185,  1473,
      -1,    36,  1189,    -1,  1191,  1192,    -1,    13,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    50,    51,    -1,  1205,  1206,
      -1,    -1,    -1,    58,    -1,    -1,  1213,    -1,    63,    64,
      -1,    -1,    -1,  1220,  1221,  1222,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,
      -1,    -1,    -1,  1527,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1253,    -1,   103,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     125,    -1,    -1,    -1,    -1,    -1,    -1,   103,   133,   134,
     135,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     145,   146,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1596,   158,    -1,    -1,    -1,   133,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   172,    -1,    -1,
     146,    -1,  1329,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   188,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   169,    -1,    -1,   172,    -1,    -1,   204,
      -1,    -1,    -1,    -1,   209,    -1,    -1,   183,   213,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   204,    -1,
      -1,    -1,  1389,   238,    -1,   240,    -1,    -1,    -1,    -1,
      -1,    -1,  1399,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   256,    -1,    -1,    -1,   231,    -1,  1414,    -1,    -1,
      -1,  1418,   238,  1707,  1708,  1709,    -1,    -1,    -1,   274,
      -1,    -1,    -1,   278,    -1,    -1,    -1,  1721,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   278,  1747,    -1,    -1,    -1,    -1,    -1,  1753,
      -1,    -1,  1756,    -1,  1758,    -1,  1473,    -1,    -1,    -1,
    1764,    -1,  1766,  1767,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   372,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   389,    -1,    -1,    -1,   393,    -1,
      -1,    -1,    -1,    -1,  1838,    -1,    -1,    -1,    -1,   404,
      -1,    -1,    -1,    34,    35,    -1,    -1,    -1,    -1,    40,
     415,    42,    -1,    44,    45,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      61,    -1,   437,    -1,   410,   440,    -1,   442,    -1,  1596,
     445,  1885,    -1,   448,   449,    -1,    -1,    -1,    -1,    -1,
    1894,   456,    -1,   458,   430,    -1,    -1,    -1,    -1,    -1,
     465,    -1,   438,    -1,    -1,    -1,   471,    -1,    -1,    -1,
     446,    -1,    -1,    -1,   479,    -1,    -1,    -1,    -1,   484,
      -1,   486,    -1,    -1,   489,   116,    -1,    -1,   119,    -1,
      -1,    -1,    -1,    -1,    -1,   471,   127,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   484,   485,
      -1,   516,    -1,   144,    -1,   520,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     161,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1707,  1708,  1709,    -1,   185,   531,   187,    -1,    -1,    -1,
     565,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   200,
     201,    -1,   577,    -1,    -1,    -1,   581,    -1,    -1,   584,
      -1,    -1,    -1,    -1,    -1,   590,   562,    -1,    -1,    -1,
    1747,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1756,
      -1,  1758,    -1,    -1,    -1,    -1,    -1,    -1,   584,    -1,
     586,    -1,   243,    -1,   619,    -1,    -1,    -1,    -1,    -1,
     625,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2073,
     635,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   272,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     281,   282,    -1,   284,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2106,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1838,    -1,    -1,    -1,    -1,    -1,   318,   319,   320,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   337,   338,   339,    -1,
      -1,    -1,    -1,   344,    -1,    -1,   347,    -1,    -1,    -1,
    2164,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1885,    -1,
      -1,    -1,   363,   364,  2178,    -1,    -1,    -1,  2182,    -1,
      -1,    -1,    -1,  2187,  2188,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2196,    -1,  2198,    -1,  2200,  2201,  2202,  2203,
      -1,    -1,  2206,    -1,    -1,    -1,    -1,    -1,   399,   400,
      -1,    -1,  2216,    -1,  2218,  2219,    -1,  2221,  2222,  2223,
    2224,    -1,  2226,    -1,    -1,  2229,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   424,  2238,    -1,    -1,    -1,    -1,    -1,
      -1,  2245,    -1,  2247,    -1,  2249,  2250,  2251,  2252,    -1,
      -1,    -1,  2256,  2257,  2258,    -1,    -1,    -1,  2262,  2263,
    2264,    -1,  2266,    -1,  2268,    -1,  2270,    -1,  2272,    -1,
    2274,    -1,    -1,    -1,    -1,  2279,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   475,    -1,    -1,    -1,   479,    -1,
    2294,    -1,    -1,    -1,    -1,    -1,    -1,  2301,    -1,    -1,
    2304,    -1,   493,    -1,    -1,    -1,  2310,    -1,    -1,  2313,
      -1,    -1,    -1,  2317,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   547,    -1,    -1,   550,
      -1,    -1,   553,   554,   555,   556,    -1,    -1,  2372,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2106,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   597,   598,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   623,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2445,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    13,    -1,    15,    -1,    -1,    -1,    -1,    -1,
      -1,  2178,    -1,    -1,    -1,  2182,    -1,    -1,    -1,    -1,
    2187,  2188,    -1,    -1,    -1,    36,    -1,    -1,    -1,  2196,
      -1,  2198,    -1,  2200,    -1,  2202,  2203,    -1,    -1,    50,
      51,    -1,    -1,    -1,    -1,    -1,    -1,    58,    -1,  2216,
      -1,  2218,    63,    64,  2221,  2222,  2223,  2224,    -1,  2226,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2238,    -1,    84,    -1,    -1,    -1,    -1,  2245,    -1,
    2247,    -1,  2249,  2250,  2251,    -1,    -1,    -1,    -1,  2256,
    2257,  2258,   103,    -1,    -1,  2262,  2263,  2264,    -1,  2266,
      -1,  2268,    -1,  2270,    -1,  2272,    -1,  2274,    -1,    -1,
      -1,    -1,  2279,    -1,   125,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   133,   134,   135,    -1,    -1,  2294,    -1,    -1,
      -1,    -1,    -1,    -1,   145,   146,    -1,    -1,    -1,  2593,
      -1,    -1,    -1,  2310,    -1,    -1,  2313,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   172,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   188,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   204,    -1,    -1,    -1,    -1,   209,    -1,
      -1,    -1,   213,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2673,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   238,    -1,   240,
      -1,    -1,    -1,    -1,  2688,    -1,    -1,    -1,  2692,    -1,
      -1,    -1,    -1,    -1,    -1,   256,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   274,    -1,  2719,  2720,   278,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2445,    -1,
      -1,    -1,    -1,    -1,    -1,  2739,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2748,    -1,  2750,    -1,  2752,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2769,    -1,    -1,    -1,    -1,
    2774,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2799,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   372,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   389,    -1,
      -1,    -1,   393,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   404,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   415,    -1,    -1,    26,    -1,    28,
      -1,    -1,    -1,    -1,    -1,    -1,  2870,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   437,    -1,    -1,   440,
      -1,   442,    -1,    -1,   445,    -1,    -1,   448,   449,    -1,
      -1,    60,    61,    -1,    63,   456,    -1,   458,    -1,    -1,
      -1,    -1,    -1,    72,   465,    26,    -1,    28,    -1,    -1,
     471,    -1,    -1,    82,    -1,    -1,    -1,  2921,   479,    -1,
      -1,    90,    -1,   484,    -1,   486,    -1,    -1,   489,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    63,    -1,    -1,    -1,   115,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   516,    -1,    -1,    12,   520,
     129,    82,    -1,   132,    -1,    -1,    -1,    -1,    -1,    90,
      24,  2688,    -1,    -1,    -1,  2692,    -1,    -1,    -1,    -1,
      -1,    35,    36,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   160,    -1,    -1,   115,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2719,  2720,   565,    -1,    60,    61,   129,    -1,
      -1,   132,    -1,    -1,    68,    -1,   577,    -1,    -1,    73,
     581,    -1,  2739,   584,    -1,    -1,    -1,    -1,    -1,   590,
      -1,  2748,    -1,  2750,    -1,  2752,    -1,  3041,  3042,   160,
      -1,    -1,    -1,    -1,    -1,    99,    -1,   101,    -1,   103,
      -1,    -1,    -1,    -1,   223,    -1,   225,    -1,   619,   113,
      -1,    -1,   231,    -1,   625,    -1,    -1,    -1,    -1,    -1,
     239,    -1,    -1,    -1,   635,    -1,    -1,    -1,    -1,    -1,
     134,   135,  2799,    -1,    -1,   254,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   223,    -1,   225,   159,   160,    -1,    -1,    -1,
     231,   165,  3116,    -1,   168,    -1,    -1,    -1,   239,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3134,    -1,    -1,   254,    -1,    -1,    -1,    -1,    -1,    -1,
     194,    -1,   196,   312,    -1,    -1,    -1,    -1,    -1,   203,
      -1,   205,    -1,  2870,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   330,  3166,  3167,    -1,  3169,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3178,    -1,   230,   231,   232,  3183,
      -1,    -1,  3186,    -1,  3188,  3189,     6,    -1,    -1,    -1,
      -1,   312,    -1,    13,    -1,    -1,    -1,    -1,    -1,   253,
      -1,    -1,    -1,    -1,  2921,  3209,    26,    -1,    28,   330,
      -1,    -1,    -1,    -1,    -1,   384,    -1,   386,    -1,    -1,
    3224,   275,    -1,    -1,    -1,   394,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    -1,
      -1,    -1,    -1,    63,  3248,    -1,    -1,    -1,    -1,    -1,
      -1,   305,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    82,   384,    -1,   386,    -1,    -1,    -1,    -1,
      90,    -1,    -1,   394,    -1,    -1,    -1,    -1,    -1,    -1,
     100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   462,    -1,   115,    -1,    -1,  3302,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3311,    -1,   129,
      -1,    -1,   132,    -1,    -1,    -1,    -1,   371,    -1,   139,
      -1,    -1,    -1,    -1,  3041,  3042,   146,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   154,    -1,    -1,    -1,    -1,    -1,
     160,   462,    -1,   397,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   521,    -1,   408,   409,    -1,    -1,   412,   413,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   537,   189,
      -1,    -1,   541,    -1,    -1,    -1,    -1,    -1,    -1,   433,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   560,  3396,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     521,    -1,    -1,   223,    -1,   225,    -1,    -1,    -1,   578,
      -1,   231,    -1,    -1,    -1,    -1,   537,  3134,    -1,   239,
     541,    -1,   476,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   254,   489,    -1,    -1,    -1,   560,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3166,
    3167,    -1,    -1,    -1,    -1,    -1,    -1,   578,    -1,    -1,
      -1,  3178,    -1,   517,    -1,    -1,  3183,   521,    -1,  3186,
      -1,  3188,  3189,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   539,   540,    -1,    -1,    -1,
      -1,    -1,   312,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3224,    -1,    -1,
     330,    -1,    -1,    -1,   334,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3248,    -1,    -1,   588,    -1,  3540,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   599,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   607,    -1,    -1,    -1,   377,    -1,    -1,
      -1,    -1,    -1,    -1,   384,    -1,   386,    -1,    -1,    -1,
    3574,    -1,    -1,    -1,   394,    -1,    -1,    -1,  3582,    -1,
      -1,    -1,    -1,    -1,    -1,  3302,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3311,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     440,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   462,    -1,    -1,  3649,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3697,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   521,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   537,    -1,    -1,
      -1,   541,    -1,    -1,    -1,    -1,  3730,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     560,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3761,   578,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3775,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3540,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3574,    -1,    -1,
      -1,    -1,  3866,    -1,    -1,  3582,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3922,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3930,    -1,    -1,    -1,
      -1,    -1,  3936,    -1,  3938,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3983,
      -1,    -1,    -1,    -1,    -1,  3989,  3990,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3730,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4033,
    4034,  4035,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3761,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3775,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4073,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4093,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4111,    -1,  4113,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4123,
      -1,  4125,  4126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4152,    -1,
      -1,    -1,    -1,    -1,    -1,  4159,    -1,    -1,    -1,  4163,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  4206,    -1,    -1,    -1,  4210,  4211,    -1,    -1,
      -1,    -1,    -1,  3930,    -1,    -1,    -1,    -1,    -1,  3936,
      -1,  3938,    -1,    -1,    -1,    -1,    -1,    -1,  4232,    -1,
    4234,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  4249,  4250,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4264,    -1,    -1,    -1,    -1,    -1,  3983,    -1,    -1,  4273,
      -1,    -1,    -1,  4277,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  4327,  4328,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  4340,  4341,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  4073,    -1,    -1,    -1,
    4364,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  4397,  4111,    -1,  4113,    -1,    -1,    -1,
    4404,    -1,    -1,  4407,    -1,    -1,  4123,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4441,    -1,    -1,
      -1,    -1,    -1,    -1,  4448,    -1,  4450,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  4460,    -1,    -1,    -1,
    4464,    -1,    -1,  4467,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  4476,    -1,  4478,    -1,  4480,    -1,    -1,    -1,
      -1,    -1,    -1,  4487,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4498,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4514,  4515,    -1,    -1,    -1,  4232,  4520,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  4530,  4531,    -1,    -1,
      -1,  4535,    -1,  4250,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4277,    -1,    -1,  4567,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4327,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4404,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4441,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4467,    -1,    -1,    -1,    -1,    -1,    -1,     5,    -1,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,    -1,    -1,    21,    -1,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    32,    -1,    -1,    35,    36,    37,
      38,    39,    40,    41,    -1,    43,    44,    45,    46,    47,
      -1,    49,    50,  4520,    -1,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    -1,    65,    66,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      78,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    -1,    90,    91,    -1,    93,    94,    95,    96,    97,
    4567,    99,   100,   101,   102,    -1,    -1,   105,   106,   107,
     108,    -1,   110,   111,   112,    -1,   114,   115,   116,   117,
     118,   119,    -1,    -1,    -1,    -1,   124,   125,   126,    -1,
      -1,   129,   130,    -1,   132,    -1,    -1,    -1,   136,    -1,
     138,   139,   140,   141,    -1,    -1,    -1,   145,    -1,    -1,
     148,   149,   150,    -1,    -1,    -1,   154,    -1,   156,   157,
      -1,   159,   160,   161,    -1,    -1,   164,   165,    -1,   167,
     168,   169,   170,   171,   172,   173,    -1,   175,   176,   177,
     178,   179,   180,   181,    -1,   183,   184,   185,   186,    -1,
     188,    -1,    -1,    -1,   192,    -1,   194,    -1,   196,    -1,
     198,   199,   200,   201,   202,   203,    -1,   205,    -1,   207,
      -1,   209,   210,   211,    -1,   213,   214,   215,    -1,   217,
     218,    -1,    -1,    -1,   222,   223,   224,   225,   226,    -1,
     228,   229,   230,    -1,   232,    -1,   234,    -1,    -1,    -1,
     238,   239,   240,   241,    -1,    -1,   244,    -1,   246,   247,
      -1,   249,   250,    -1,    -1,    -1,   254,    -1,    -1,   257,
     258,   259,    -1,   261,   262,    -1,   264,   265,   266,    -1,
      -1,    -1,    -1,    -1,   272,   273,    -1,   275,    -1,   277,
      -1,   279,   280,    -1,    -1,   283,    -1,    -1,    -1,    -1,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,    -1,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,    -1,
      -1,    -1,    -1,   321,   322,   323,   324,   325,   326,    -1,
      -1,   329,   330,   331,   332,    -1,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,    -1,   346,   347,
     348,    -1,    -1,   351,   352,   353,   354,   355,   356,   357,
     358,   359,    -1,   361,   362,    -1,   364,   365,   366,    -1,
     368,   369,   370,   371,    -1,   373,   374,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   383,   384,   385,    -1,   387,
     388,    -1,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,    -1,   404,   405,   406,    -1,
     408,    -1,   410,   411,   412,   413,   414,    -1,   416,   417,
     418,    -1,    -1,   421,    -1,    -1,    -1,   425,   426,   427,
     428,   429,    -1,    -1,   432,   433,   434,   435,   436,    -1,
     438,   439,    -1,   441,   442,   443,   444,   445,   446,    -1,
     448,    -1,   450,   451,    -1,   453,   454,    -1,    -1,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
      -1,   469,   470,    -1,    -1,    -1,   474,   475,   476,   477,
      -1,    -1,    -1,   481,    -1,    -1,    -1,   485,    -1,   487,
     488,   489,   490,   491,   492,    -1,   494,   495,   496,   497,
     498,   499,    -1,    -1,    -1,    -1,    -1,    -1,   506,   507,
      -1,   509,    -1,    -1,   512,    -1,    -1,   515,   516,   517,
     518,   519,   520,   521,    -1,   523,   524,   525,   526,   527,
     528,   529,   530,   531,   532,   533,   534,   535,   536,   537,
      -1,   539,    -1,   541,   542,   543,   544,    -1,   546,   547,
     548,    -1,   550,   551,   552,   553,    -1,    -1,    -1,    -1,
     558,   559,   560,   561,    -1,   563,   564,   565,   566,   567,
     568,   569,   570,   571,   572,   573,   574,    -1,   576,   577,
      -1,    -1,   580,    -1,    -1,   583,    -1,   585,    -1,   587,
     588,   589,    -1,    -1,   592,   593,   594,   595,   596,    -1,
      -1,   599,   600,    -1,   602,   603,   604,   605,   606,   607,
     608,    -1,    -1,    -1,    -1,    -1,    -1,   615,   616,    -1,
     618,   619,   620,    -1,    -1,   623,    -1,    -1,    -1,    -1,
     628,   629,    -1,    -1,    -1,    -1,   634,   635,    -1,    -1,
     638,   639,    -1,    -1,   642,   643,     5,    -1,     7,     8,
       9,    10,    11,    12,    -1,    14,    -1,    -1,    -1,    18,
      -1,    -1,    21,    -1,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    32,    -1,    -1,    35,    36,    37,    38,
      39,    40,    41,    -1,    43,    44,    45,    -1,    47,    -1,
      49,    50,    -1,    -1,    53,    54,    55,    56,    57,    -1,
      59,    60,    61,    62,    63,    -1,    65,    66,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    78,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    -1,    93,    94,    95,    96,    97,    -1,
      99,   100,   101,   102,    -1,    -1,   105,   106,   107,   108,
      -1,   110,   111,   112,    -1,   114,   115,   116,   117,   118,
     119,    -1,    -1,    -1,    -1,   124,   125,   126,    -1,    -1,
     129,   130,    -1,   132,    -1,    -1,    -1,   136,    -1,   138,
     139,   140,   141,    -1,    -1,    -1,   145,    -1,    -1,   148,
     149,   150,    -1,    -1,    -1,   154,    -1,   156,   157,    -1,
     159,   160,   161,    -1,    -1,   164,   165,    -1,   167,   168,
     169,   170,   171,   172,   173,    -1,   175,   176,   177,   178,
     179,   180,   181,    -1,   183,   184,   185,   186,    -1,   188,
      -1,    -1,    -1,   192,    -1,   194,    -1,   196,    -1,   198,
     199,   200,   201,   202,   203,    -1,   205,    -1,   207,    -1,
     209,   210,   211,    -1,   213,   214,   215,    -1,   217,   218,
      -1,    -1,    -1,   222,   223,   224,   225,   226,    -1,   228,
     229,   230,    -1,   232,    -1,   234,    -1,    -1,    -1,   238,
     239,   240,   241,    -1,    -1,   244,    -1,   246,   247,    -1,
     249,   250,    -1,    -1,    -1,   254,    -1,    -1,   257,   258,
     259,    -1,    -1,   262,    -1,   264,   265,   266,    -1,    -1,
      -1,    -1,    -1,   272,   273,    -1,   275,    -1,   277,    -1,
     279,   280,    -1,    -1,   283,    -1,    -1,    -1,    -1,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,    -1,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,    -1,    -1,
      -1,    -1,   321,   322,   323,   324,   325,   326,    -1,    -1,
     329,   330,   331,   332,    -1,   334,   335,   336,   337,   338,
     339,   340,   341,   342,   343,   344,    -1,   346,   347,   348,
      -1,    -1,   351,   352,   353,   354,   355,   356,   357,   358,
     359,    -1,   361,   362,    -1,   364,   365,   366,   367,   368,
     369,   370,   371,    -1,   373,   374,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   383,   384,   385,    -1,   387,   388,
      -1,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,    -1,   404,   405,   406,    -1,   408,
      -1,   410,   411,   412,   413,   414,    -1,   416,   417,   418,
      -1,    -1,   421,    -1,    -1,    -1,   425,   426,   427,   428,
     429,    -1,    -1,   432,   433,   434,   435,   436,    -1,   438,
     439,    -1,   441,   442,   443,   444,   445,   446,    -1,   448,
      -1,   450,   451,    -1,   453,   454,    -1,    -1,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,    -1,
     469,   470,    -1,    -1,    -1,   474,   475,   476,   477,    -1,
      -1,    -1,   481,    -1,    -1,    -1,   485,    -1,   487,   488,
     489,   490,   491,   492,    -1,   494,   495,   496,   497,   498,
     499,    -1,    -1,    -1,    -1,    -1,    -1,   506,   507,    -1,
     509,    -1,    -1,   512,    -1,    -1,   515,   516,   517,   518,
     519,   520,   521,    -1,   523,   524,   525,   526,   527,   528,
     529,   530,   531,   532,   533,   534,   535,   536,   537,    -1,
     539,    -1,   541,   542,   543,   544,    -1,   546,   547,   548,
      -1,   550,   551,   552,   553,    -1,    -1,    -1,    -1,    -1,
     559,   560,   561,    -1,   563,   564,   565,   566,   567,   568,
     569,   570,   571,   572,   573,   574,    -1,   576,   577,    -1,
      -1,   580,    -1,    -1,   583,    -1,   585,    -1,   587,   588,
     589,    -1,    -1,   592,   593,   594,   595,   596,    -1,    -1,
     599,   600,    -1,   602,   603,   604,   605,   606,   607,   608,
      -1,    -1,    -1,    -1,    -1,    -1,   615,   616,    -1,   618,
     619,   620,    -1,    -1,   623,    -1,    -1,    -1,    -1,   628,
     629,    -1,    -1,    -1,    -1,   634,   635,    -1,    -1,   638,
     639,    -1,    -1,   642,   643,     5,    -1,     7,     8,     9,
      10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,
      -1,    21,    -1,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    -1,    -1,    35,    36,    37,    38,    39,
      40,    41,    -1,    43,    44,    45,    -1,    47,    -1,    49,
      50,    -1,    -1,    53,    54,    55,    56,    57,    -1,    59,
      60,    61,    62,    63,    -1,    65,    66,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    77,    78,    79,
      -1,    81,    82,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    -1,    93,    94,    95,    96,    97,    -1,    99,
     100,   101,   102,    -1,    -1,   105,   106,   107,   108,    -1,
     110,   111,   112,    -1,   114,   115,   116,   117,   118,   119,
      -1,    -1,    -1,    -1,   124,   125,   126,    -1,    -1,   129,
     130,    -1,   132,    -1,    -1,    -1,   136,    -1,   138,   139,
     140,   141,    -1,    -1,    -1,   145,    -1,    -1,   148,   149,
     150,    -1,    -1,    -1,   154,    -1,   156,   157,    -1,   159,
     160,   161,    -1,    -1,   164,   165,    -1,   167,   168,   169,
     170,   171,   172,   173,    -1,   175,   176,   177,   178,   179,
     180,   181,    -1,   183,   184,   185,   186,    -1,   188,    -1,
      -1,    -1,   192,   193,   194,    -1,   196,    -1,   198,   199,
     200,   201,   202,   203,    -1,   205,    -1,   207,    -1,   209,
     210,   211,    -1,   213,   214,   215,    -1,   217,   218,    -1,
      -1,    -1,   222,   223,   224,   225,   226,    -1,   228,   229,
     230,    -1,   232,    -1,   234,    -1,    -1,    -1,   238,   239,
     240,   241,    -1,    -1,   244,    -1,   246,   247,    -1,   249,
     250,    -1,    -1,    -1,   254,    -1,    -1,   257,   258,   259,
      -1,    -1,   262,    -1,   264,   265,   266,    -1,    -1,    -1,
      -1,    -1,   272,   273,    -1,   275,    -1,   277,    -1,   279,
     280,    -1,    -1,   283,    -1,    -1,    -1,    -1,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,    -1,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,    -1,    -1,    -1,
      -1,   321,   322,   323,   324,   325,   326,    -1,    -1,   329,
     330,   331,   332,    -1,   334,   335,   336,   337,   338,   339,
     340,   341,   342,   343,   344,    -1,   346,   347,   348,    -1,
      -1,   351,   352,   353,   354,   355,   356,   357,   358,   359,
      -1,   361,   362,    -1,   364,   365,   366,    -1,   368,   369,
     370,   371,    -1,   373,   374,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   383,   384,   385,    -1,   387,   388,    -1,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,    -1,   404,   405,   406,    -1,   408,    -1,
     410,   411,   412,   413,   414,    -1,   416,   417,   418,    -1,
      -1,   421,    -1,    -1,    -1,   425,   426,   427,   428,   429,
      -1,    -1,   432,   433,   434,   435,   436,    -1,   438,   439,
      -1,   441,   442,   443,   444,   445,   446,    -1,   448,    -1,
     450,   451,    -1,   453,   454,    -1,    -1,   457,   458,   459,
     460,   461,   462,   463,   464,   465,   466,   467,    -1,   469,
     470,    -1,    -1,    -1,   474,   475,   476,   477,    -1,    -1,
      -1,   481,    -1,    -1,    -1,   485,    -1,   487,   488,   489,
     490,   491,   492,    -1,   494,   495,   496,   497,   498,   499,
      -1,    -1,    -1,    -1,    -1,    -1,   506,   507,    -1,   509,
      -1,    -1,   512,    -1,    -1,   515,   516,   517,   518,   519,
     520,   521,    -1,   523,   524,   525,   526,   527,   528,   529,
     530,   531,   532,   533,   534,   535,   536,   537,    -1,   539,
      -1,   541,   542,   543,   544,    -1,   546,   547,   548,    -1,
     550,   551,   552,   553,    -1,    -1,    -1,    -1,    -1,   559,
     560,   561,    -1,   563,   564,   565,   566,   567,   568,   569,
     570,   571,   572,   573,   574,    -1,   576,   577,    -1,    -1,
     580,    -1,    -1,   583,    -1,   585,    -1,   587,   588,   589,
      -1,    -1,   592,   593,   594,   595,   596,    -1,    -1,   599,
     600,    -1,   602,   603,   604,   605,   606,   607,   608,    -1,
      -1,    -1,    -1,    -1,    -1,   615,   616,    -1,   618,   619,
     620,    -1,    -1,   623,    -1,    -1,    -1,    -1,   628,   629,
      -1,    -1,    -1,    -1,   634,   635,    -1,    -1,   638,   639,
      -1,    -1,   642,   643,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      21,    -1,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    32,    -1,    -1,    35,    36,    37,    38,    39,    40,
      41,    -1,    43,    44,    45,    -1,    47,    -1,    49,    50,
      -1,    -1,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    -1,    65,    66,    67,    68,    69,    70,
      71,    -1,    73,    74,    75,    76,    77,    78,    79,    -1,
      81,    82,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    -1,    93,    94,    95,    96,    97,    -1,    99,   100,
     101,   102,    -1,    -1,   105,   106,   107,   108,    -1,   110,
     111,   112,    -1,   114,   115,   116,   117,   118,   119,    -1,
      -1,    -1,    -1,   124,   125,   126,    -1,    -1,   129,   130,
      -1,   132,    -1,    -1,    -1,   136,    -1,   138,   139,   140,
     141,    -1,    -1,    -1,   145,    -1,    -1,   148,   149,   150,
      -1,    -1,    -1,   154,    -1,   156,   157,    -1,   159,   160,
     161,    -1,    -1,   164,   165,    -1,   167,   168,   169,   170,
     171,   172,   173,    -1,   175,   176,   177,   178,   179,   180,
     181,    -1,   183,   184,   185,   186,    -1,   188,    -1,    -1,
      -1,   192,   193,   194,    -1,   196,    -1,   198,   199,   200,
     201,   202,   203,    -1,   205,    -1,   207,    -1,   209,   210,
     211,    -1,   213,   214,   215,    -1,   217,   218,    -1,    -1,
      -1,   222,   223,   224,   225,   226,    -1,   228,   229,   230,
      -1,   232,    -1,   234,    -1,    -1,    -1,   238,   239,   240,
     241,    -1,    -1,   244,    -1,   246,   247,    -1,   249,   250,
      -1,    -1,    -1,   254,    -1,    -1,   257,   258,   259,    -1,
      -1,   262,    -1,   264,   265,   266,    -1,    -1,    -1,    -1,
      -1,   272,   273,    -1,   275,    -1,   277,    -1,   279,   280,
      -1,    -1,   283,    -1,    -1,    -1,    -1,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,    -1,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,    -1,    -1,    -1,    -1,
     321,   322,   323,   324,   325,   326,    -1,    -1,   329,   330,
     331,   332,    -1,   334,   335,   336,   337,   338,   339,   340,
     341,   342,   343,   344,    -1,   346,   347,   348,    -1,    -1,
     351,   352,   353,   354,   355,   356,   357,   358,   359,    -1,
     361,   362,    -1,   364,   365,   366,    -1,   368,   369,   370,
     371,    -1,   373,   374,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   383,   384,   385,    -1,   387,   388,    -1,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,    -1,   404,   405,   406,    -1,   408,    -1,   410,
     411,   412,   413,   414,    -1,   416,   417,   418,    -1,    -1,
     421,    -1,    -1,    -1,   425,   426,   427,   428,   429,    -1,
      -1,   432,   433,   434,   435,   436,    -1,   438,   439,    -1,
     441,   442,   443,   444,   445,   446,    -1,   448,    -1,   450,
     451,    -1,   453,   454,    -1,    -1,   457,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   467,    -1,   469,   470,
      -1,    -1,    -1,   474,   475,   476,   477,    -1,    -1,    -1,
     481,    -1,    -1,    -1,   485,    -1,   487,   488,   489,   490,
     491,   492,    -1,   494,   495,   496,   497,   498,   499,    -1,
      -1,    -1,    -1,    -1,    -1,   506,   507,    -1,   509,    -1,
      -1,   512,    -1,    -1,   515,   516,   517,   518,   519,   520,
     521,    -1,   523,   524,   525,   526,   527,   528,   529,   530,
     531,   532,   533,   534,   535,   536,   537,    -1,   539,    -1,
     541,   542,   543,   544,    -1,   546,   547,   548,    -1,   550,
     551,   552,   553,    -1,    -1,    -1,    -1,    -1,   559,   560,
     561,    -1,   563,   564,   565,   566,   567,   568,   569,   570,
     571,   572,   573,   574,    -1,   576,   577,    -1,    -1,   580,
      -1,    -1,   583,    -1,   585,    -1,   587,   588,   589,    -1,
      -1,   592,   593,   594,   595,   596,    -1,    -1,   599,   600,
      -1,   602,   603,   604,   605,   606,   607,   608,    -1,    -1,
      -1,    -1,    -1,    -1,   615,   616,    -1,   618,   619,   620,
      -1,    -1,   623,    -1,    -1,    -1,    -1,   628,   629,    -1,
      -1,    -1,    -1,   634,   635,    -1,    -1,   638,   639,    -1,
      -1,   642,   643,     5,    -1,     7,     8,     9,    10,    11,
      -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,
      -1,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      32,    -1,    -1,    35,    36,    37,    38,    39,    40,    41,
      -1,    43,    44,    45,    -1,    47,    -1,    49,    50,    -1,
      -1,    53,    54,    55,    56,    57,    -1,    59,    60,    61,
      62,    63,    -1,    65,    66,    67,    68,    69,    70,    71,
      -1,    73,    74,    75,    76,    77,    78,    79,    -1,    81,
      82,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      -1,    93,    94,    95,    96,    97,    -1,    99,   100,   101,
     102,    -1,    -1,   105,   106,   107,   108,    -1,   110,   111,
     112,    -1,   114,   115,   116,   117,   118,   119,    -1,    -1,
      -1,    -1,   124,   125,   126,    -1,    -1,   129,   130,    -1,
     132,    -1,    -1,    -1,   136,    -1,   138,   139,   140,   141,
      -1,    -1,    -1,   145,    -1,    -1,   148,   149,   150,    -1,
      -1,    -1,   154,    -1,   156,   157,    -1,   159,   160,   161,
      -1,    -1,   164,   165,    -1,   167,   168,   169,   170,   171,
     172,   173,    -1,   175,   176,   177,   178,   179,   180,   181,
      -1,   183,   184,   185,   186,    -1,   188,    -1,    -1,    -1,
     192,   193,   194,    -1,   196,    -1,   198,   199,   200,   201,
     202,   203,    -1,   205,    -1,   207,    -1,   209,   210,   211,
      -1,   213,   214,   215,    -1,   217,   218,    -1,    -1,    -1,
     222,   223,   224,   225,   226,    -1,   228,   229,   230,    -1,
     232,    -1,   234,    -1,    -1,    -1,   238,   239,   240,   241,
      -1,    -1,   244,    -1,   246,   247,    -1,   249,   250,    -1,
      -1,    -1,   254,    -1,    -1,   257,   258,   259,    -1,    -1,
     262,    -1,   264,   265,   266,    -1,    -1,    -1,    -1,    -1,
     272,   273,    -1,   275,    -1,   277,    -1,   279,   280,    -1,
      -1,   283,    -1,    -1,    -1,    -1,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,    -1,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,    -1,    -1,    -1,    -1,   321,
     322,   323,   324,   325,   326,    -1,    -1,   329,   330,   331,
     332,    -1,   334,   335,   336,   337,   338,   339,   340,   341,
     342,   343,   344,    -1,   346,   347,   348,    -1,    -1,   351,
     352,   353,   354,   355,   356,   357,   358,   359,    -1,   361,
     362,    -1,   364,   365,   366,    -1,   368,   369,   370,   371,
      -1,   373,   374,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   383,   384,   385,    -1,   387,   388,    -1,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,    -1,   404,   405,   406,    -1,   408,    -1,   410,   411,
     412,   413,   414,    -1,   416,   417,   418,    -1,    -1,   421,
      -1,    -1,    -1,   425,   426,   427,   428,   429,    -1,    -1,
     432,   433,   434,   435,   436,    -1,   438,   439,    -1,   441,
     442,   443,   444,   445,   446,    -1,   448,    -1,   450,   451,
      -1,   453,   454,    -1,    -1,   457,   458,   459,   460,   461,
     462,   463,   464,   465,   466,   467,    -1,   469,   470,    -1,
      -1,    -1,   474,   475,   476,   477,    -1,    -1,    -1,   481,
      -1,    -1,    -1,   485,    -1,   487,   488,   489,   490,   491,
     492,    -1,   494,   495,   496,   497,   498,   499,    -1,    -1,
      -1,    -1,    -1,    -1,   506,   507,    -1,   509,    -1,    -1,
     512,    -1,    -1,   515,   516,   517,   518,   519,   520,   521,
      -1,   523,   524,   525,   526,   527,   528,   529,   530,   531,
     532,   533,   534,   535,   536,   537,    -1,   539,    -1,   541,
     542,   543,   544,    -1,   546,   547,   548,    -1,   550,   551,
     552,   553,    -1,    -1,    -1,    -1,    -1,   559,   560,   561,
      -1,   563,   564,   565,   566,   567,   568,   569,   570,   571,
     572,   573,   574,    -1,   576,   577,    -1,    -1,   580,    -1,
      -1,   583,    -1,   585,    -1,   587,   588,   589,    -1,    -1,
     592,   593,   594,   595,   596,    -1,    -1,   599,   600,    -1,
     602,   603,   604,   605,   606,   607,   608,    -1,    -1,    -1,
      -1,    -1,    -1,   615,   616,    -1,   618,   619,   620,    -1,
      -1,   623,    -1,    -1,    -1,    -1,   628,   629,    -1,    -1,
      -1,    -1,   634,   635,    -1,    -1,   638,   639,    -1,    -1,
     642,   643,     5,    -1,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,
      23,    24,    25,    26,    27,    28,    29,    30,    -1,    32,
      -1,    -1,    35,    36,    37,    38,    39,    40,    41,    -1,
      43,    44,    45,    -1,    47,    -1,    49,    50,    -1,    -1,
      53,    54,    55,    56,    57,    -1,    59,    60,    61,    62,
      63,    -1,    65,    66,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    78,    79,    -1,    81,    82,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    -1,
      93,    94,    95,    96,    97,    -1,    99,   100,   101,   102,
      -1,    -1,   105,   106,   107,   108,    -1,   110,   111,   112,
      -1,   114,   115,   116,   117,   118,   119,    -1,    -1,    -1,
      -1,   124,   125,   126,    -1,    -1,   129,   130,    -1,   132,
      -1,    -1,    -1,   136,    -1,   138,   139,   140,   141,    -1,
      -1,    -1,   145,    -1,    -1,   148,   149,   150,    -1,    -1,
      -1,   154,    -1,   156,   157,    -1,   159,   160,   161,    -1,
      -1,   164,   165,    -1,   167,   168,   169,   170,   171,   172,
     173,    -1,   175,   176,   177,   178,   179,   180,   181,    -1,
     183,   184,   185,   186,    -1,   188,    -1,    -1,    -1,   192,
      -1,   194,    -1,   196,    -1,   198,   199,   200,   201,   202,
     203,    -1,   205,    -1,   207,    -1,   209,   210,   211,    -1,
     213,   214,   215,    -1,   217,   218,    -1,    -1,    -1,   222,
     223,   224,   225,   226,    -1,   228,   229,   230,    -1,   232,
      -1,   234,    -1,    -1,    -1,   238,   239,   240,   241,    -1,
      -1,   244,    -1,   246,   247,    -1,   249,   250,    -1,    -1,
      -1,   254,    -1,    -1,   257,   258,   259,    -1,    -1,   262,
      -1,   264,   265,   266,    -1,    -1,    -1,    -1,    -1,   272,
     273,    -1,   275,    -1,   277,    -1,   279,   280,    -1,    -1,
     283,    -1,    -1,    -1,    -1,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,    -1,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,    -1,    -1,    -1,    -1,   321,   322,
     323,   324,   325,   326,    -1,    -1,   329,   330,   331,   332,
      -1,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,    -1,   346,   347,   348,    -1,    -1,   351,   352,
     353,   354,   355,   356,   357,   358,   359,    -1,   361,   362,
      -1,   364,   365,   366,    -1,   368,   369,   370,   371,    -1,
     373,   374,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     383,   384,   385,    -1,   387,   388,    -1,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
      -1,   404,   405,   406,    -1,   408,    -1,   410,   411,   412,
     413,   414,    -1,   416,   417,   418,    -1,    -1,   421,    -1,
      -1,    -1,   425,   426,   427,   428,   429,    -1,    -1,   432,
     433,   434,   435,   436,    -1,   438,   439,    -1,   441,   442,
     443,   444,   445,   446,    -1,   448,    -1,   450,   451,    -1,
     453,   454,    -1,    -1,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   466,   467,    -1,   469,   470,    -1,    -1,
      -1,   474,   475,   476,   477,    -1,    -1,    -1,   481,    -1,
      -1,    -1,   485,    -1,   487,   488,   489,   490,   491,   492,
      -1,   494,   495,   496,   497,   498,   499,    -1,    -1,    -1,
      -1,    -1,    -1,   506,   507,    -1,   509,    -1,    -1,   512,
      -1,    -1,   515,   516,   517,   518,   519,   520,   521,    -1,
     523,   524,   525,   526,   527,   528,   529,   530,   531,   532,
     533,   534,   535,   536,   537,    -1,   539,    -1,   541,   542,
     543,   544,    -1,   546,   547,   548,    -1,   550,   551,   552,
     553,    -1,    -1,    -1,    -1,    -1,   559,   560,   561,    -1,
     563,   564,   565,   566,   567,   568,   569,   570,   571,   572,
     573,   574,    -1,   576,   577,    -1,    -1,   580,    -1,    -1,
     583,    -1,   585,    -1,   587,   588,   589,    -1,    -1,   592,
     593,   594,   595,   596,    -1,    -1,   599,   600,    -1,   602,
     603,   604,   605,   606,   607,   608,    -1,    -1,    -1,    -1,
      -1,    -1,   615,   616,    -1,   618,   619,   620,    -1,    -1,
     623,    -1,    -1,    -1,    -1,   628,   629,    -1,    -1,    -1,
      -1,   634,   635,    -1,    -1,   638,   639,    -1,    -1,   642,
     643,     5,    -1,     7,     8,     9,    10,    11,    -1,    -1,
      14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    -1,
      -1,    35,    36,    37,    38,    39,    40,    41,    -1,    43,
      44,    45,    -1,    47,    -1,    49,    50,    -1,    -1,    53,
      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,
      -1,    65,    66,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    78,    79,    -1,    81,    82,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    -1,    93,
      94,    95,    96,    97,    -1,    99,   100,   101,   102,    -1,
      -1,   105,   106,   107,   108,    -1,   110,   111,   112,    -1,
     114,   115,   116,   117,   118,   119,    -1,    -1,    -1,    -1,
     124,   125,   126,    -1,    -1,   129,   130,    -1,   132,    -1,
      -1,    -1,   136,    -1,   138,   139,   140,   141,    -1,    -1,
      -1,   145,    -1,    -1,   148,   149,   150,    -1,    -1,    -1,
     154,    -1,   156,   157,    -1,   159,   160,   161,    -1,    -1,
     164,   165,    -1,   167,   168,   169,   170,   171,   172,   173,
      -1,   175,   176,   177,   178,   179,   180,   181,    -1,   183,
     184,   185,   186,    -1,   188,    -1,    -1,    -1,   192,    -1,
     194,    -1,   196,    -1,   198,   199,   200,   201,   202,   203,
      -1,   205,    -1,   207,    -1,   209,   210,   211,    -1,   213,
     214,   215,    -1,   217,   218,    -1,    -1,    -1,   222,   223,
     224,   225,   226,    -1,   228,   229,   230,    -1,   232,    -1,
     234,    -1,    -1,    -1,   238,   239,   240,   241,    -1,    -1,
     244,    -1,   246,   247,    -1,   249,   250,    -1,    -1,    -1,
     254,    -1,    -1,   257,   258,   259,    -1,    -1,   262,    -1,
     264,   265,   266,    -1,    -1,    -1,    -1,    -1,   272,   273,
      -1,   275,    -1,   277,    -1,   279,   280,    -1,    -1,   283,
      -1,    -1,    -1,    -1,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
      -1,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,    -1,    -1,    -1,    -1,   321,   322,   323,
     324,   325,   326,    -1,    -1,   329,   330,   331,   332,    -1,
     334,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     344,    -1,   346,   347,   348,    -1,    -1,   351,   352,   353,
     354,   355,   356,   357,   358,   359,    -1,   361,   362,    -1,
     364,   365,   366,    -1,   368,   369,   370,   371,    -1,   373,
     374,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   383,
     384,   385,    -1,   387,   388,    -1,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,    -1,
     404,   405,   406,    -1,   408,    -1,   410,   411,   412,   413,
     414,    -1,   416,   417,   418,    -1,    -1,   421,    -1,    -1,
      -1,   425,   426,   427,   428,   429,    -1,    -1,   432,   433,
     434,   435,   436,    -1,   438,   439,    -1,   441,   442,   443,
     444,   445,   446,    -1,   448,    -1,   450,   451,    -1,   453,
     454,    -1,    -1,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,    -1,   469,   470,    -1,    -1,    -1,
     474,   475,   476,   477,    -1,    -1,    -1,   481,    -1,    -1,
      -1,   485,    -1,   487,   488,   489,   490,   491,   492,    -1,
     494,   495,   496,   497,   498,   499,    -1,    -1,    -1,    -1,
      -1,    -1,   506,   507,    -1,   509,    -1,    -1,   512,    -1,
      -1,   515,   516,   517,   518,   519,   520,   521,    -1,   523,
     524,   525,   526,   527,   528,   529,   530,   531,   532,   533,
     534,   535,   536,   537,    -1,   539,    -1,   541,   542,   543,
     544,    -1,   546,   547,   548,    -1,   550,   551,   552,   553,
      -1,    -1,    -1,    -1,    -1,   559,   560,   561,    -1,   563,
     564,   565,   566,   567,   568,   569,   570,   571,   572,   573,
     574,    -1,   576,   577,    -1,    -1,   580,    -1,    -1,   583,
      -1,   585,    -1,   587,   588,   589,    -1,    -1,   592,   593,
     594,   595,   596,    -1,    -1,   599,   600,    -1,   602,   603,
     604,   605,   606,   607,   608,    -1,    -1,    -1,    -1,    -1,
      -1,   615,   616,    -1,   618,   619,   620,    -1,    -1,   623,
      -1,    -1,    -1,    -1,   628,   629,    -1,    -1,    -1,    -1,
     634,   635,    -1,    -1,   638,   639,    -1,    -1,   642,   643,
       5,    -1,     7,     8,     9,    10,    11,    12,    -1,    14,
      -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,
      25,    26,    27,    28,    29,    30,    -1,    32,    -1,    -1,
      35,    36,    37,    38,    39,    40,    41,    -1,    43,    44,
      45,    -1,    47,    -1,    49,    50,    -1,    -1,    53,    54,
      55,    56,    57,    -1,    59,    60,    61,    62,    63,    -1,
      65,    66,    67,    68,    69,    70,    71,    -1,    73,    74,
      75,    76,    77,    78,    79,    -1,    81,    82,    83,    84,
      85,    86,    87,    88,    -1,    90,    91,    -1,    93,    94,
      95,    96,    97,    -1,    99,   100,   101,   102,    -1,    -1,
     105,   106,   107,   108,    -1,   110,   111,   112,    -1,   114,
     115,   116,   117,   118,   119,    -1,    -1,    -1,    -1,   124,
     125,   126,    -1,    -1,   129,   130,    -1,   132,    -1,    -1,
      -1,   136,    -1,   138,   139,   140,   141,    -1,    -1,    -1,
     145,    -1,    -1,   148,   149,   150,    -1,    -1,    -1,   154,
      -1,   156,   157,    -1,   159,   160,   161,    -1,    -1,   164,
     165,    -1,   167,   168,   169,   170,   171,   172,   173,    -1,
     175,   176,   177,   178,   179,   180,   181,    -1,   183,   184,
     185,   186,    -1,   188,    -1,    -1,    -1,   192,    -1,   194,
      -1,   196,    -1,   198,   199,   200,   201,   202,   203,    -1,
     205,    -1,   207,    -1,   209,   210,   211,    -1,   213,   214,
     215,    -1,   217,   218,    -1,    -1,    -1,   222,   223,   224,
     225,   226,    -1,   228,   229,   230,    -1,   232,    -1,   234,
      -1,    -1,    -1,   238,   239,   240,   241,    -1,    -1,   244,
      -1,   246,   247,    -1,   249,   250,    -1,    -1,    -1,   254,
      -1,    -1,   257,   258,   259,    -1,    -1,   262,    -1,   264,
     265,   266,    -1,    -1,    -1,    -1,    -1,   272,   273,    -1,
     275,    -1,   277,    -1,   279,   280,    -1,    -1,   283,    -1,
      -1,    -1,    -1,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,    -1,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,    -1,    -1,    -1,    -1,   321,   322,   323,   324,
     325,   326,    -1,    -1,   329,   330,   331,   332,    -1,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
      -1,   346,   347,   348,    -1,    -1,   351,   352,   353,   354,
     355,    -1,   357,   358,   359,    -1,   361,   362,    -1,   364,
     365,   366,    -1,   368,   369,   370,   371,    -1,   373,   374,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   383,   384,
     385,    -1,   387,   388,    -1,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,    -1,   404,
     405,   406,    -1,   408,    -1,   410,   411,   412,   413,   414,
      -1,   416,   417,   418,    -1,    -1,   421,    -1,    -1,    -1,
     425,   426,   427,   428,   429,    -1,    -1,   432,   433,   434,
     435,   436,    -1,   438,   439,    -1,   441,   442,   443,   444,
     445,   446,    -1,   448,    -1,   450,   451,    -1,   453,   454,
      -1,    -1,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,    -1,   469,   470,    -1,    -1,    -1,   474,
     475,   476,   477,    -1,    -1,    -1,   481,    -1,    -1,    -1,
     485,    -1,   487,   488,   489,   490,   491,   492,    -1,   494,
     495,   496,   497,   498,   499,    -1,    -1,    -1,    -1,    -1,
      -1,   506,   507,    -1,   509,    -1,    -1,   512,    -1,    -1,
     515,   516,   517,   518,   519,   520,   521,    -1,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,    -1,   539,    -1,   541,   542,   543,   544,
      -1,   546,   547,   548,    -1,   550,   551,   552,   553,    -1,
      -1,    -1,    -1,    -1,   559,   560,   561,    -1,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
      -1,   576,   577,    -1,    -1,   580,    -1,    -1,   583,    -1,
     585,    -1,   587,   588,   589,    -1,    -1,   592,   593,   594,
     595,   596,    -1,    -1,   599,   600,    -1,   602,   603,   604,
     605,   606,   607,   608,    -1,    -1,    -1,    -1,    -1,    -1,
     615,   616,    -1,   618,   619,   620,    -1,    -1,   623,    -1,
      -1,    -1,    -1,   628,   629,    -1,    -1,    -1,    -1,   634,
     635,    -1,    -1,   638,   639,    -1,    -1,   642,   643,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,
      26,    27,    28,    29,    30,    -1,    32,    -1,    -1,    35,
      36,    37,    38,    39,    40,    41,    -1,    43,    44,    45,
      -1,    47,    -1,    49,    50,    -1,    -1,    53,    54,    55,
      56,    57,    -1,    59,    60,    61,    62,    63,    -1,    65,
      66,    67,    68,    69,    70,    71,    -1,    73,    74,    75,
      76,    77,    78,    79,    -1,    81,    82,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    -1,    93,    94,    95,
      96,    97,    -1,    99,   100,   101,   102,    -1,    -1,   105,
     106,   107,   108,    -1,   110,   111,   112,    -1,   114,   115,
     116,   117,   118,   119,    -1,    -1,    -1,    -1,   124,   125,
     126,    -1,    -1,   129,   130,    -1,   132,    -1,    -1,    -1,
     136,    -1,   138,   139,   140,   141,    -1,    -1,    -1,   145,
      -1,    -1,   148,   149,   150,    -1,    -1,    -1,   154,    -1,
     156,   157,    -1,   159,   160,   161,    -1,    -1,   164,   165,
      -1,   167,   168,   169,   170,   171,   172,   173,    -1,   175,
     176,   177,   178,   179,   180,   181,    -1,   183,   184,   185,
     186,    -1,   188,    -1,    -1,    -1,   192,    -1,   194,    -1,
     196,    -1,   198,   199,   200,   201,   202,   203,    -1,   205,
      -1,   207,    -1,   209,   210,   211,    -1,   213,   214,   215,
      -1,   217,   218,    -1,    -1,    -1,   222,   223,   224,   225,
     226,    -1,   228,   229,   230,    -1,   232,    -1,   234,    -1,
      -1,    -1,   238,   239,   240,   241,    -1,    -1,   244,    -1,
     246,   247,    -1,   249,   250,    -1,    -1,    -1,   254,    -1,
      -1,   257,   258,   259,    -1,    -1,   262,    -1,   264,   265,
     266,    -1,    -1,    -1,    -1,    -1,   272,   273,    -1,   275,
      -1,   277,    -1,   279,   280,    -1,    -1,   283,    -1,    -1,
      -1,    -1,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,    -1,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,    -1,    -1,    -1,    -1,   321,   322,   323,   324,   325,
     326,    -1,    -1,   329,   330,   331,   332,    -1,   334,   335,
     336,   337,   338,   339,   340,   341,   342,   343,   344,    -1,
     346,   347,   348,    -1,    -1,   351,   352,   353,   354,   355,
     356,   357,   358,   359,    -1,   361,   362,    -1,   364,   365,
     366,    -1,   368,   369,   370,   371,    -1,   373,   374,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   383,   384,   385,
      -1,   387,   388,    -1,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,    -1,   404,   405,
     406,    -1,   408,    -1,   410,   411,   412,   413,   414,    -1,
     416,   417,   418,    -1,    -1,   421,    -1,    -1,    -1,   425,
     426,   427,   428,   429,    -1,    -1,   432,   433,   434,   435,
     436,    -1,   438,   439,    -1,   441,   442,   443,   444,   445,
     446,    -1,   448,    -1,   450,   451,    -1,   453,   454,    -1,
      -1,   457,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,    -1,   469,   470,    -1,    -1,    -1,   474,   475,
     476,   477,    -1,    -1,    -1,   481,    -1,    -1,    -1,   485,
      -1,   487,   488,   489,   490,   491,   492,    -1,   494,   495,
     496,   497,   498,   499,    -1,    -1,    -1,    -1,    -1,    -1,
     506,   507,    -1,   509,    -1,    -1,   512,    -1,    -1,   515,
     516,   517,   518,   519,   520,   521,    -1,   523,   524,   525,
     526,   527,   528,   529,   530,   531,   532,   533,   534,   535,
     536,   537,    -1,   539,    -1,   541,   542,   543,   544,    -1,
     546,   547,   548,    -1,   550,   551,   552,   553,    -1,    -1,
      -1,    -1,    -1,   559,   560,   561,    -1,   563,   564,   565,
     566,   567,   568,   569,   570,   571,   572,   573,   574,    -1,
     576,   577,    -1,    -1,   580,    -1,    -1,   583,    -1,   585,
      -1,   587,   588,   589,    -1,    -1,   592,   593,   594,   595,
     596,    -1,    -1,   599,   600,    -1,   602,   603,   604,   605,
     606,   607,   608,    -1,    -1,    -1,    -1,    -1,    -1,   615,
     616,    -1,   618,   619,   620,    -1,    -1,   623,    -1,    -1,
      -1,    -1,   628,   629,    -1,    -1,    -1,    -1,   634,   635,
      -1,    -1,   638,   639,    -1,    -1,   642,   643,     5,    -1,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    32,    -1,    -1,    35,    36,
      37,    38,    39,    40,    41,    -1,    43,    44,    45,    -1,
      47,    -1,    49,    50,    -1,    -1,    53,    54,    55,    56,
      57,    -1,    59,    60,    61,    62,    63,    -1,    65,    66,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      77,    78,    79,    -1,    81,    82,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    -1,    93,    94,    95,    96,
      97,    -1,    99,   100,   101,   102,    -1,    -1,   105,   106,
     107,   108,    -1,   110,   111,   112,    -1,   114,   115,   116,
     117,   118,   119,    -1,    -1,    -1,    -1,   124,   125,   126,
      -1,    -1,   129,   130,    -1,   132,    -1,    -1,    -1,   136,
      -1,   138,   139,   140,   141,    -1,    -1,    -1,   145,    -1,
      -1,   148,   149,   150,    -1,    -1,    -1,   154,    -1,   156,
     157,    -1,   159,   160,   161,    -1,    -1,   164,   165,    -1,
     167,   168,   169,   170,   171,   172,   173,    -1,   175,   176,
     177,   178,   179,   180,   181,    -1,   183,   184,   185,   186,
      -1,   188,    -1,    -1,    -1,   192,    -1,   194,    -1,   196,
      -1,   198,   199,   200,   201,   202,   203,    -1,   205,    -1,
     207,    -1,   209,   210,   211,    -1,   213,   214,   215,    -1,
     217,   218,    -1,    -1,    -1,   222,   223,   224,   225,   226,
      -1,   228,   229,   230,    -1,   232,    -1,   234,    -1,    -1,
      -1,   238,   239,   240,   241,    -1,    -1,   244,    -1,   246,
     247,    -1,   249,   250,    -1,    -1,    -1,   254,    -1,    -1,
     257,   258,   259,    -1,    -1,   262,    -1,   264,   265,   266,
      -1,    -1,    -1,    -1,    -1,   272,   273,    -1,   275,    -1,
     277,    -1,   279,   280,    -1,    -1,   283,    -1,    -1,    -1,
      -1,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,    -1,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
      -1,    -1,    -1,    -1,   321,   322,   323,   324,   325,   326,
      -1,    -1,   329,   330,   331,   332,    -1,   334,   335,   336,
     337,   338,   339,   340,   341,   342,   343,   344,    -1,   346,
     347,   348,    -1,    -1,   351,   352,   353,   354,   355,   356,
     357,   358,   359,    -1,   361,   362,    -1,   364,   365,   366,
      -1,   368,   369,   370,   371,    -1,   373,   374,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   383,   384,   385,    -1,
     387,   388,    -1,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,    -1,   404,   405,   406,
      -1,   408,    -1,   410,   411,   412,   413,   414,    -1,   416,
     417,   418,    -1,    -1,   421,    -1,    -1,    -1,   425,   426,
     427,   428,   429,    -1,    -1,   432,   433,   434,   435,   436,
      -1,   438,   439,    -1,   441,   442,   443,   444,   445,   446,
      -1,   448,    -1,   450,   451,    -1,   453,   454,    -1,    -1,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
     467,    -1,   469,   470,    -1,    -1,    -1,   474,   475,   476,
     477,    -1,    -1,    -1,   481,    -1,    -1,    -1,   485,    -1,
     487,   488,   489,   490,   491,   492,    -1,   494,   495,   496,
     497,   498,   499,    -1,    -1,    -1,    -1,    -1,    -1,   506,
     507,    -1,   509,    -1,    -1,   512,    -1,    -1,   515,   516,
     517,   518,   519,   520,   521,    -1,   523,   524,   525,   526,
     527,   528,   529,   530,   531,   532,   533,   534,   535,   536,
     537,    -1,   539,    -1,   541,   542,   543,   544,    -1,   546,
     547,   548,    -1,   550,   551,   552,   553,    -1,    -1,    -1,
      -1,    -1,   559,   560,   561,    -1,   563,   564,   565,   566,
     567,   568,   569,   570,   571,   572,   573,   574,    -1,   576,
     577,    -1,    -1,   580,    -1,    -1,   583,    -1,   585,    -1,
     587,   588,   589,    -1,    -1,   592,   593,   594,   595,   596,
      -1,    -1,   599,   600,    -1,   602,   603,   604,   605,   606,
     607,   608,    -1,    -1,    -1,    -1,    -1,    -1,   615,   616,
      -1,   618,   619,   620,    -1,    -1,   623,    -1,    -1,    -1,
      -1,   628,   629,    -1,    -1,    -1,    -1,   634,   635,    -1,
      -1,   638,   639,    -1,    -1,   642,   643,     5,    -1,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,    -1,    -1,    21,    -1,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    32,    -1,    -1,    35,    36,    37,
      38,    39,    40,    41,    -1,    43,    44,    45,    -1,    47,
      -1,    49,    50,    -1,    -1,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    -1,    65,    66,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      78,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    -1,    90,    91,    -1,    93,    94,    95,    96,    97,
      -1,    99,   100,   101,   102,    -1,    -1,   105,   106,   107,
     108,    -1,   110,   111,   112,    -1,   114,   115,   116,   117,
     118,   119,    -1,    -1,    -1,    -1,   124,   125,   126,    -1,
      -1,   129,   130,    -1,   132,    -1,    -1,    -1,   136,    -1,
     138,   139,   140,   141,    -1,    -1,    -1,   145,    -1,    -1,
     148,   149,   150,    -1,    -1,    -1,   154,    -1,   156,   157,
      -1,   159,   160,   161,    -1,    -1,   164,   165,    -1,   167,
     168,   169,   170,   171,   172,   173,    -1,   175,   176,   177,
     178,   179,   180,   181,    -1,   183,   184,   185,   186,    -1,
     188,    -1,    -1,    -1,   192,    -1,   194,    -1,   196,    -1,
     198,   199,   200,   201,   202,   203,    -1,   205,    -1,   207,
      -1,   209,   210,   211,    -1,   213,   214,   215,    -1,   217,
     218,    -1,    -1,    -1,   222,   223,   224,   225,   226,    -1,
     228,   229,   230,    -1,   232,    -1,   234,    -1,    -1,    -1,
     238,   239,   240,   241,    -1,    -1,   244,    -1,   246,   247,
      -1,   249,   250,    -1,    -1,    -1,   254,    -1,    -1,   257,
     258,   259,    -1,    -1,   262,    -1,   264,   265,   266,    -1,
      -1,    -1,    -1,    -1,   272,   273,    -1,   275,    -1,   277,
      -1,   279,   280,    -1,    -1,   283,    -1,    -1,    -1,    -1,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,    -1,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,    -1,
      -1,    -1,    -1,   321,   322,   323,   324,   325,   326,    -1,
      -1,   329,   330,   331,   332,    -1,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,    -1,   346,   347,
     348,    -1,    -1,   351,   352,   353,   354,   355,   356,   357,
     358,   359,    -1,   361,   362,    -1,   364,   365,   366,    -1,
     368,   369,   370,   371,    -1,   373,   374,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   383,   384,   385,    -1,   387,
     388,    -1,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,    -1,   404,   405,   406,    -1,
     408,    -1,   410,   411,   412,   413,   414,    -1,   416,   417,
     418,    -1,    -1,   421,    -1,    -1,    -1,   425,   426,   427,
     428,   429,    -1,    -1,   432,   433,   434,   435,   436,    -1,
     438,   439,    -1,   441,   442,   443,   444,   445,   446,    -1,
     448,    -1,   450,   451,    -1,   453,   454,    -1,    -1,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
      -1,   469,   470,    -1,    -1,    -1,   474,   475,   476,   477,
      -1,    -1,    -1,   481,    -1,    -1,    -1,   485,    -1,   487,
     488,   489,   490,   491,   492,    -1,   494,   495,   496,   497,
     498,   499,    -1,    -1,    -1,    -1,    -1,    -1,   506,   507,
      -1,   509,    -1,    -1,   512,    -1,    -1,   515,   516,   517,
     518,   519,   520,   521,    -1,   523,   524,   525,   526,   527,
     528,   529,   530,   531,   532,   533,   534,   535,   536,   537,
      -1,   539,    -1,   541,   542,   543,   544,    -1,   546,   547,
     548,    -1,   550,   551,   552,   553,    -1,    -1,    -1,    -1,
      -1,   559,   560,   561,    -1,   563,   564,   565,   566,   567,
     568,   569,   570,   571,   572,   573,   574,    -1,   576,   577,
      -1,    -1,   580,    -1,    -1,   583,    -1,   585,    -1,   587,
     588,   589,    -1,    -1,   592,   593,   594,   595,   596,    -1,
      -1,   599,   600,    -1,   602,   603,   604,   605,   606,   607,
     608,    -1,    -1,    -1,    -1,    -1,    -1,   615,   616,    -1,
     618,   619,   620,    -1,    -1,   623,    -1,    -1,    -1,    -1,
     628,   629,    -1,    -1,    -1,    -1,   634,   635,    -1,    -1,
     638,   639,    -1,    -1,   642,   643,     5,    -1,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      -1,    -1,    21,    -1,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    32,    -1,    -1,    35,    36,    37,    38,
      39,    40,    41,    -1,    43,    44,    45,    -1,    47,    -1,
      49,    50,    -1,    -1,    53,    54,    55,    56,    57,    -1,
      59,    60,    61,    62,    63,    -1,    65,    66,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    78,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    -1,    93,    94,    95,    96,    97,    -1,
      99,   100,   101,   102,    -1,    -1,   105,   106,   107,   108,
      -1,   110,   111,   112,    -1,   114,   115,   116,   117,   118,
     119,    -1,    -1,    -1,    -1,   124,   125,   126,    -1,    -1,
     129,   130,    -1,   132,    -1,    -1,    -1,   136,    -1,   138,
     139,   140,   141,    -1,    -1,    -1,   145,    -1,    -1,   148,
     149,   150,    -1,    -1,    -1,   154,    -1,   156,   157,    -1,
     159,   160,   161,    -1,    -1,   164,   165,    -1,   167,   168,
     169,   170,   171,   172,   173,    -1,   175,   176,   177,   178,
     179,   180,   181,    -1,   183,   184,   185,   186,    -1,   188,
      -1,    -1,    -1,   192,    -1,   194,    -1,   196,    -1,   198,
     199,   200,   201,   202,   203,    -1,   205,    -1,   207,    -1,
     209,   210,   211,    -1,   213,   214,   215,    -1,   217,   218,
      -1,    -1,    -1,   222,   223,   224,   225,   226,    -1,   228,
     229,   230,    -1,   232,    -1,   234,    -1,    -1,    -1,   238,
     239,   240,   241,    -1,    -1,   244,    -1,   246,   247,    -1,
     249,   250,    -1,    -1,    -1,   254,    -1,    -1,   257,   258,
     259,    -1,    -1,   262,    -1,   264,   265,   266,    -1,    -1,
      -1,    -1,    -1,   272,   273,    -1,   275,    -1,   277,    -1,
     279,   280,    -1,    -1,   283,    -1,    -1,    -1,    -1,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,    -1,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,    -1,    -1,
      -1,    -1,   321,   322,   323,   324,   325,   326,    -1,    -1,
     329,   330,   331,   332,    -1,   334,   335,   336,   337,   338,
     339,   340,   341,   342,   343,   344,    -1,   346,   347,   348,
      -1,    -1,   351,   352,   353,   354,   355,   356,   357,   358,
     359,    -1,   361,   362,    -1,   364,   365,   366,    -1,   368,
     369,   370,   371,    -1,   373,   374,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   383,   384,   385,    -1,   387,   388,
      -1,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,    -1,   404,   405,   406,    -1,   408,
      -1,   410,   411,   412,   413,   414,    -1,   416,   417,   418,
      -1,    -1,   421,    -1,    -1,    -1,   425,   426,   427,   428,
     429,    -1,    -1,   432,   433,   434,   435,   436,    -1,   438,
     439,    -1,   441,   442,   443,   444,   445,   446,    -1,   448,
      -1,   450,   451,    -1,   453,   454,    -1,    -1,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,    -1,
     469,   470,    -1,    -1,    -1,   474,   475,   476,   477,    -1,
      -1,    -1,   481,    -1,    -1,    -1,   485,    -1,   487,   488,
     489,   490,   491,   492,    -1,   494,   495,   496,   497,   498,
     499,    -1,    -1,    -1,    -1,    -1,    -1,   506,   507,    -1,
     509,    -1,    -1,   512,    -1,    -1,   515,   516,   517,   518,
     519,   520,   521,    -1,   523,   524,   525,   526,   527,   528,
     529,   530,   531,   532,   533,   534,   535,   536,   537,    -1,
     539,    -1,   541,   542,   543,   544,    -1,   546,   547,   548,
      -1,   550,   551,   552,   553,    -1,    -1,    -1,    -1,    -1,
     559,   560,   561,    -1,   563,   564,   565,   566,   567,   568,
     569,   570,   571,   572,   573,   574,    -1,   576,   577,    -1,
      -1,   580,    -1,    -1,   583,    -1,   585,    -1,   587,   588,
     589,    -1,    -1,   592,   593,   594,   595,   596,    -1,    -1,
     599,   600,    -1,   602,   603,   604,   605,   606,   607,   608,
      -1,    -1,    -1,    -1,    -1,    -1,   615,   616,    -1,   618,
     619,   620,    -1,    -1,   623,    -1,    -1,    -1,    -1,   628,
     629,    -1,    -1,    -1,    -1,   634,   635,    -1,    -1,   638,
     639,    -1,    -1,   642,   643,     5,    -1,     7,     8,     9,
      10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,
      -1,    21,    -1,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    -1,    -1,    35,    36,    37,    38,    39,
      40,    41,    -1,    43,    44,    45,    -1,    47,    -1,    49,
      50,    -1,    -1,    53,    54,    55,    56,    57,    -1,    59,
      60,    61,    62,    63,    -1,    65,    66,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    77,    78,    79,
      -1,    81,    82,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    -1,    93,    94,    95,    96,    97,    -1,    99,
     100,   101,   102,    -1,    -1,   105,   106,   107,   108,    -1,
     110,   111,   112,    -1,   114,   115,   116,   117,   118,   119,
      -1,    -1,    -1,    -1,   124,   125,   126,    -1,    -1,   129,
     130,    -1,   132,    -1,    -1,    -1,   136,    -1,   138,   139,
     140,   141,    -1,    -1,    -1,   145,    -1,    -1,   148,   149,
     150,    -1,    -1,    -1,   154,    -1,   156,   157,    -1,   159,
     160,   161,    -1,    -1,   164,   165,    -1,   167,   168,   169,
     170,   171,   172,   173,    -1,   175,   176,   177,   178,   179,
     180,   181,    -1,   183,   184,   185,   186,    -1,   188,    -1,
      -1,    -1,   192,    -1,   194,    -1,   196,    -1,   198,   199,
     200,   201,   202,   203,    -1,   205,    -1,   207,    -1,   209,
     210,   211,    -1,   213,   214,   215,    -1,   217,   218,    -1,
      -1,    -1,   222,   223,   224,   225,   226,    -1,   228,   229,
     230,    -1,   232,    -1,   234,    -1,    -1,    -1,   238,   239,
     240,   241,    -1,    -1,   244,    -1,   246,   247,    -1,   249,
     250,    -1,    -1,    -1,   254,    -1,    -1,   257,   258,   259,
      -1,    -1,   262,    -1,   264,   265,   266,    -1,    -1,    -1,
      -1,    -1,   272,   273,    -1,   275,    -1,   277,    -1,   279,
     280,    -1,    -1,   283,    -1,    -1,    -1,    -1,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,    -1,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,    -1,    -1,
      -1,   321,   322,   323,   324,   325,   326,    -1,    -1,   329,
     330,   331,   332,    -1,   334,   335,   336,   337,   338,   339,
     340,   341,   342,   343,   344,    -1,   346,   347,   348,    -1,
      -1,   351,   352,   353,   354,   355,    -1,   357,   358,   359,
      -1,   361,   362,    -1,   364,   365,   366,    -1,   368,   369,
     370,   371,    -1,   373,   374,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   383,   384,   385,    -1,   387,   388,    -1,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,    -1,   404,   405,   406,    -1,   408,    -1,
     410,   411,   412,   413,   414,    -1,   416,   417,   418,    -1,
      -1,   421,    -1,    -1,    -1,   425,   426,   427,   428,   429,
      -1,    -1,   432,   433,   434,   435,   436,    -1,   438,   439,
      -1,   441,   442,   443,   444,   445,   446,    -1,   448,    -1,
     450,   451,    -1,   453,   454,    -1,    -1,   457,   458,   459,
     460,   461,   462,   463,   464,   465,   466,   467,    -1,   469,
     470,    -1,    -1,    -1,   474,   475,   476,   477,    -1,    -1,
      -1,   481,    -1,    -1,    -1,   485,    -1,   487,   488,   489,
     490,   491,   492,    -1,   494,   495,   496,   497,   498,   499,
      -1,    -1,    -1,    -1,    -1,    -1,   506,   507,    -1,   509,
      -1,    -1,   512,    -1,    -1,   515,   516,   517,   518,   519,
     520,   521,    -1,   523,   524,   525,   526,   527,   528,   529,
     530,   531,   532,   533,   534,   535,   536,   537,    -1,   539,
      -1,   541,   542,   543,   544,    -1,   546,   547,   548,    -1,
     550,   551,   552,   553,    -1,    -1,    -1,    -1,    -1,   559,
     560,   561,    -1,   563,   564,   565,   566,   567,   568,   569,
     570,   571,   572,   573,   574,    -1,   576,   577,    -1,    -1,
     580,    -1,    -1,   583,    -1,   585,    -1,   587,   588,   589,
      -1,    -1,   592,   593,   594,   595,   596,    -1,    -1,   599,
     600,    -1,   602,   603,   604,   605,   606,   607,   608,    -1,
      -1,    -1,    -1,    -1,    -1,   615,   616,    -1,   618,   619,
     620,    -1,    -1,   623,    -1,    -1,    -1,    -1,   628,   629,
      -1,    -1,    -1,    -1,   634,   635,    -1,    -1,   638,   639,
      -1,    -1,   642,   643,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      21,    -1,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    32,    -1,    -1,    35,    36,    37,    38,    39,    40,
      41,    -1,    43,    44,    45,    -1,    47,    -1,    49,    50,
      -1,    -1,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    -1,    65,    66,    67,    68,    69,    70,
      71,    -1,    73,    74,    75,    76,    77,    78,    79,    -1,
      81,    82,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    -1,    93,    94,    95,    96,    97,    -1,    99,   100,
     101,   102,    -1,    -1,   105,   106,   107,   108,    -1,   110,
     111,   112,    -1,   114,   115,   116,   117,   118,   119,    -1,
      -1,    -1,    -1,   124,   125,   126,    -1,    -1,   129,   130,
      -1,   132,    -1,    -1,    -1,   136,    -1,   138,   139,   140,
     141,    -1,    -1,    -1,   145,    -1,    -1,   148,   149,   150,
      -1,    -1,    -1,   154,    -1,   156,   157,    -1,   159,   160,
     161,    -1,    -1,   164,   165,    -1,   167,   168,   169,   170,
     171,   172,   173,    -1,   175,   176,   177,   178,   179,   180,
     181,    -1,   183,   184,   185,   186,    -1,   188,    -1,    -1,
      -1,   192,    -1,   194,    -1,   196,    -1,   198,   199,   200,
     201,   202,   203,    -1,   205,    -1,   207,    -1,   209,   210,
     211,    -1,   213,   214,   215,    -1,   217,   218,    -1,    -1,
      -1,   222,   223,   224,   225,   226,    -1,   228,   229,   230,
      -1,   232,    -1,   234,    -1,    -1,    -1,   238,   239,   240,
     241,    -1,    -1,   244,    -1,   246,   247,    -1,   249,   250,
      -1,    -1,    -1,   254,    -1,    -1,   257,   258,   259,    -1,
      -1,   262,    -1,   264,   265,   266,    -1,    -1,    -1,    -1,
      -1,   272,   273,    -1,   275,    -1,   277,    -1,   279,   280,
      -1,    -1,   283,    -1,    -1,    -1,    -1,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,    -1,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,    -1,    -1,    -1,    -1,
     321,   322,   323,   324,   325,   326,    -1,    -1,   329,   330,
     331,   332,    -1,   334,   335,   336,   337,   338,   339,   340,
     341,   342,   343,   344,    -1,   346,   347,   348,    -1,    -1,
     351,   352,   353,   354,   355,    -1,   357,   358,   359,    -1,
     361,   362,    -1,   364,   365,   366,    -1,   368,   369,   370,
     371,    -1,   373,   374,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   383,   384,   385,    -1,   387,   388,    -1,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,    -1,   404,   405,   406,    -1,   408,    -1,   410,
     411,   412,   413,   414,    -1,   416,   417,   418,    -1,    -1,
     421,    -1,    -1,    -1,   425,   426,   427,   428,   429,    -1,
      -1,   432,   433,   434,   435,   436,    -1,   438,   439,    -1,
     441,   442,   443,   444,   445,   446,    -1,   448,    -1,   450,
     451,    -1,   453,   454,    -1,    -1,   457,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   467,    -1,   469,   470,
      -1,    -1,    -1,   474,   475,   476,   477,    -1,    -1,    -1,
     481,    -1,    -1,    -1,   485,    -1,   487,   488,   489,   490,
     491,   492,    -1,   494,   495,   496,   497,   498,   499,    -1,
      -1,    -1,    -1,    -1,    -1,   506,   507,    -1,   509,    -1,
      -1,   512,    -1,    -1,   515,   516,   517,   518,   519,   520,
     521,    -1,   523,   524,   525,   526,   527,   528,   529,   530,
     531,   532,   533,   534,   535,   536,   537,    -1,   539,    -1,
     541,   542,   543,   544,    -1,   546,   547,   548,    -1,   550,
     551,   552,   553,    -1,    -1,    -1,    -1,    -1,   559,   560,
     561,    -1,   563,   564,   565,   566,   567,   568,   569,   570,
     571,   572,   573,   574,    -1,   576,   577,    -1,    -1,   580,
      -1,    -1,   583,    -1,   585,    -1,   587,   588,   589,    -1,
      -1,   592,   593,   594,   595,   596,    -1,    -1,   599,   600,
      -1,   602,   603,   604,   605,   606,   607,   608,    -1,    -1,
      -1,    -1,    -1,    -1,   615,   616,    -1,   618,   619,   620,
      -1,    -1,   623,    -1,    -1,    -1,    -1,   628,   629,    -1,
      -1,    -1,    -1,   634,   635,    -1,    -1,   638,   639,    -1,
      -1,   642,   643,     5,    -1,     7,     8,     9,    10,    11,
      -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,
      -1,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      32,    -1,    -1,    35,    36,    37,    38,    39,    40,    41,
      -1,    43,    44,    45,    -1,    47,    -1,    49,    50,    -1,
      -1,    53,    54,    55,    56,    57,    -1,    59,    60,    61,
      62,    63,    -1,    65,    66,    67,    68,    69,    70,    71,
      -1,    73,    74,    75,    76,    77,    78,    79,    -1,    81,
      82,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      -1,    93,    94,    95,    96,    97,    -1,    99,   100,   101,
     102,    -1,    -1,   105,   106,   107,   108,    -1,   110,   111,
     112,    -1,   114,   115,   116,   117,   118,   119,    -1,    -1,
      -1,    -1,   124,   125,   126,    -1,    -1,   129,   130,    -1,
     132,    -1,    -1,    -1,   136,    -1,   138,   139,   140,   141,
      -1,    -1,    -1,   145,    -1,    -1,   148,   149,   150,    -1,
      -1,    -1,   154,    -1,   156,   157,    -1,   159,   160,   161,
      -1,    -1,   164,   165,    -1,   167,   168,   169,   170,   171,
     172,   173,    -1,   175,   176,   177,   178,   179,   180,   181,
      -1,   183,   184,   185,   186,    -1,   188,    -1,    -1,    -1,
     192,    -1,   194,    -1,   196,    -1,   198,   199,   200,   201,
     202,   203,    -1,   205,    -1,   207,    -1,   209,   210,   211,
      -1,   213,   214,   215,    -1,   217,   218,    -1,    -1,    -1,
     222,   223,   224,   225,   226,    -1,   228,   229,   230,    -1,
     232,    -1,   234,    -1,    -1,    -1,   238,   239,   240,   241,
      -1,    -1,   244,    -1,   246,   247,    -1,   249,   250,    -1,
      -1,    -1,   254,    -1,    -1,   257,   258,   259,    -1,    -1,
     262,    -1,   264,   265,   266,    -1,    -1,    -1,    -1,    -1,
     272,   273,    -1,   275,    -1,   277,    -1,   279,   280,    -1,
      -1,   283,    -1,    -1,    -1,    -1,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,    -1,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,    -1,    -1,    -1,    -1,   321,
     322,   323,   324,   325,   326,    -1,    -1,   329,   330,   331,
     332,    -1,   334,   335,   336,   337,   338,   339,   340,   341,
     342,   343,   344,    -1,   346,   347,   348,    -1,    -1,   351,
     352,   353,   354,   355,    -1,   357,   358,   359,    -1,   361,
     362,    -1,   364,   365,   366,    -1,   368,   369,   370,   371,
      -1,   373,   374,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   383,   384,   385,    -1,   387,   388,    -1,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,    -1,   404,   405,   406,    -1,   408,    -1,   410,   411,
     412,   413,   414,    -1,   416,   417,   418,    -1,    -1,   421,
      -1,    -1,    -1,   425,   426,   427,   428,   429,    -1,    -1,
     432,   433,   434,   435,   436,    -1,   438,   439,    -1,   441,
     442,   443,   444,   445,   446,    -1,   448,    -1,   450,   451,
      -1,   453,   454,    -1,    -1,   457,   458,   459,   460,   461,
     462,   463,   464,   465,   466,   467,    -1,   469,   470,    -1,
      -1,    -1,   474,   475,   476,   477,    -1,    -1,    -1,   481,
      -1,    -1,    -1,   485,    -1,   487,   488,   489,   490,   491,
     492,    -1,   494,   495,   496,   497,   498,   499,    -1,    -1,
      -1,    -1,    -1,    -1,   506,   507,    -1,   509,    -1,    -1,
     512,    -1,    -1,   515,   516,   517,   518,   519,   520,   521,
      -1,   523,   524,   525,   526,   527,   528,   529,   530,   531,
     532,   533,   534,   535,   536,   537,    -1,   539,    -1,   541,
     542,   543,   544,    -1,   546,   547,   548,    -1,   550,   551,
     552,   553,    -1,    -1,    -1,    -1,    -1,   559,   560,   561,
      -1,   563,   564,   565,   566,   567,   568,   569,   570,   571,
     572,   573,   574,    -1,   576,   577,    -1,    -1,   580,    -1,
      -1,   583,    -1,   585,    -1,   587,   588,   589,    -1,    -1,
     592,   593,   594,   595,   596,    -1,    -1,   599,   600,    -1,
     602,   603,   604,   605,   606,   607,   608,    -1,    -1,    -1,
      -1,    -1,    -1,   615,   616,    -1,   618,   619,   620,    -1,
      -1,   623,    -1,    -1,    -1,    -1,   628,   629,    -1,    -1,
      -1,    -1,   634,   635,    -1,    -1,   638,   639,    -1,    -1,
     642,   643,     5,    -1,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,
      23,    24,    25,    26,    27,    28,    29,    30,    -1,    32,
      -1,    -1,    35,    36,    37,    38,    39,    40,    41,    -1,
      43,    44,    45,    -1,    47,    -1,    49,    50,    -1,    -1,
      53,    54,    55,    56,    57,    -1,    59,    60,    61,    62,
      63,    -1,    65,    66,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    78,    79,    -1,    81,    82,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    -1,
      93,    94,    95,    96,    97,    -1,    99,   100,   101,   102,
      -1,    -1,   105,   106,   107,   108,    -1,   110,   111,   112,
      -1,   114,   115,   116,   117,   118,   119,    -1,    -1,    -1,
      -1,   124,   125,   126,    -1,    -1,   129,   130,    -1,   132,
      -1,    -1,    -1,   136,    -1,   138,   139,   140,   141,    -1,
      -1,    -1,   145,    -1,    -1,   148,   149,   150,    -1,    -1,
      -1,   154,    -1,   156,   157,    -1,   159,   160,   161,    -1,
      -1,   164,   165,    -1,   167,   168,   169,   170,   171,   172,
     173,    -1,   175,   176,   177,   178,   179,   180,   181,    -1,
     183,   184,   185,   186,    -1,   188,    -1,    -1,    -1,   192,
      -1,   194,    -1,   196,    -1,   198,   199,   200,   201,   202,
     203,    -1,   205,    -1,   207,    -1,   209,   210,   211,    -1,
     213,   214,   215,    -1,   217,   218,    -1,    -1,    -1,   222,
     223,   224,   225,   226,    -1,   228,   229,   230,    -1,   232,
      -1,   234,    -1,    -1,    -1,   238,   239,   240,   241,    -1,
      -1,   244,    -1,   246,   247,    -1,   249,   250,    -1,    -1,
      -1,   254,    -1,    -1,   257,   258,   259,    -1,    -1,   262,
      -1,   264,   265,   266,    -1,    -1,    -1,    -1,    -1,   272,
     273,    -1,   275,    -1,   277,    -1,   279,   280,    -1,    -1,
     283,    -1,    -1,    -1,    -1,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,    -1,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,    -1,    -1,    -1,    -1,   321,   322,
     323,   324,   325,   326,    -1,    -1,   329,   330,   331,   332,
      -1,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,    -1,   346,   347,   348,    -1,    -1,   351,   352,
     353,   354,   355,    -1,   357,   358,   359,    -1,   361,   362,
      -1,   364,   365,   366,    -1,   368,   369,   370,   371,    -1,
     373,   374,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     383,   384,   385,    -1,   387,   388,    -1,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
      -1,   404,   405,   406,    -1,   408,    -1,   410,   411,   412,
     413,   414,    -1,   416,   417,   418,    -1,    -1,   421,    -1,
      -1,    -1,   425,   426,   427,   428,   429,    -1,    -1,   432,
     433,   434,   435,   436,    -1,   438,   439,    -1,   441,   442,
     443,   444,   445,   446,    -1,   448,    -1,   450,   451,    -1,
     453,   454,    -1,    -1,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   466,   467,    -1,   469,   470,    -1,    -1,
      -1,   474,   475,   476,   477,    -1,    -1,    -1,   481,    -1,
      -1,    -1,   485,    -1,   487,   488,   489,   490,   491,   492,
      -1,   494,   495,   496,   497,   498,   499,    -1,    -1,    -1,
      -1,    -1,    -1,   506,   507,    -1,   509,    -1,    -1,   512,
      -1,    -1,   515,   516,   517,   518,   519,   520,   521,    -1,
     523,   524,   525,   526,   527,   528,   529,   530,   531,   532,
     533,   534,   535,   536,   537,    -1,   539,    -1,   541,   542,
     543,   544,    -1,   546,   547,   548,    -1,   550,   551,   552,
     553,    -1,    -1,    -1,    -1,    -1,   559,   560,   561,    -1,
     563,   564,   565,   566,   567,   568,   569,   570,   571,   572,
     573,   574,    -1,   576,   577,    -1,    -1,   580,    -1,    -1,
     583,    -1,   585,    -1,   587,   588,   589,    -1,    -1,   592,
     593,   594,   595,   596,    -1,    -1,   599,   600,    -1,   602,
     603,   604,   605,   606,   607,   608,    -1,    -1,    -1,    -1,
      -1,    -1,   615,   616,    -1,   618,   619,   620,    -1,    -1,
     623,    -1,    -1,    -1,    -1,   628,   629,    -1,    -1,    -1,
      -1,   634,   635,    -1,    -1,   638,   639,    -1,    -1,   642,
     643,     5,    -1,     7,     8,     9,    10,    11,    -1,    -1,
      14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    -1,
      -1,    -1,    36,    37,    -1,    -1,    40,    -1,    -1,    43,
      44,    45,    -1,    47,    -1,    49,    50,    -1,    -1,    53,
      -1,    -1,    56,    57,    -1,    59,    60,    -1,    62,    63,
      -1,    65,    66,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    78,    79,    -1,    81,    82,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    -1,    93,
      94,    95,    96,    97,    -1,    99,    -1,    -1,   102,    -1,
      -1,   105,    -1,    -1,   108,    -1,   110,    -1,    -1,    -1,
     114,   115,   116,    -1,    -1,   119,    -1,    -1,    -1,    -1,
     124,   125,   126,    -1,    -1,    -1,   130,    -1,   132,    -1,
      -1,    -1,   136,    -1,   138,   139,   140,   141,    -1,    -1,
      -1,   145,    -1,    -1,   148,   149,   150,    -1,    -1,    -1,
     154,    -1,   156,   157,    -1,   159,   160,   161,    -1,    -1,
     164,   165,    -1,   167,   168,   169,   170,   171,   172,    -1,
      -1,   175,   176,   177,    -1,   179,   180,   181,    -1,   183,
     184,   185,   186,    -1,   188,    -1,    -1,    -1,   192,    -1,
     194,    -1,   196,    -1,   198,   199,   200,   201,   202,   203,
      -1,   205,    -1,    -1,    -1,   209,   210,   211,    -1,   213,
     214,   215,    -1,   217,   218,    -1,    -1,    -1,   222,   223,
     224,   225,    -1,    -1,   228,   229,   230,    -1,   232,    -1,
     234,    -1,    -1,    -1,    -1,   239,   240,    -1,    -1,    -1,
     244,    -1,   246,   247,    -1,   249,   250,    -1,    -1,    -1,
     254,    -1,    -1,   257,   258,   259,    -1,    -1,   262,    -1,
      -1,   265,   266,    -1,    -1,    -1,    -1,    -1,   272,   273,
      -1,   275,    -1,   277,    -1,   279,   280,    -1,    -1,   283,
      -1,    -1,    -1,    -1,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
      -1,   305,   306,   307,   308,    -1,   310,   311,   312,   313,
      -1,   315,   316,    -1,    -1,    -1,    -1,   321,   322,   323,
     324,   325,   326,    -1,    -1,   329,   330,    -1,   332,    -1,
     334,    -1,   336,   337,   338,   339,   340,   341,   342,   343,
     344,    -1,   346,   347,   348,    -1,    -1,   351,   352,   353,
     354,    -1,    -1,    -1,   358,   359,    -1,   361,   362,    -1,
     364,   365,   366,    -1,   368,   369,   370,   371,    -1,   373,
     374,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   383,
     384,   385,    -1,    -1,   388,    -1,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,    -1,    -1,
     404,   405,   406,    -1,   408,    -1,   410,   411,   412,   413,
     414,    -1,   416,   417,   418,    -1,    -1,   421,    -1,    -1,
      -1,   425,   426,   427,   428,   429,    -1,    -1,   432,   433,
     434,   435,   436,    -1,   438,   439,    -1,   441,   442,   443,
      -1,    -1,   446,    -1,   448,    -1,   450,   451,    -1,   453,
     454,    -1,    -1,    -1,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,    -1,   469,   470,    -1,    -1,    -1,
     474,   475,   476,   477,    -1,    -1,    -1,   481,    -1,    -1,
      -1,   485,    -1,   487,   488,   489,   490,   491,   492,    -1,
     494,   495,   496,   497,   498,   499,    -1,    -1,    -1,    -1,
      -1,    -1,   506,   507,    -1,   509,    -1,    -1,   512,    -1,
      -1,   515,   516,   517,    -1,    -1,   520,   521,    -1,   523,
     524,   525,   526,   527,   528,    -1,    -1,   531,   532,   533,
     534,    -1,   536,   537,    -1,   539,    -1,   541,   542,   543,
     544,    -1,   546,   547,   548,    -1,   550,   551,   552,   553,
      -1,    -1,    -1,    -1,    -1,   559,   560,   561,    -1,    -1,
     564,   565,   566,   567,   568,   569,   570,   571,   572,   573,
     574,    -1,   576,   577,    -1,    -1,   580,    -1,    -1,   583,
      -1,   585,    -1,   587,   588,   589,    -1,    -1,    -1,    -1,
      -1,    -1,   596,    -1,    -1,   599,    -1,    -1,    -1,   603,
     604,   605,   606,   607,   608,    -1,    -1,    -1,    -1,    -1,
      -1,   615,   616,    -1,   618,   619,   620,    -1,    -1,   623,
      -1,    -1,    -1,    -1,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,   642,   643,
      21,    -1,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    32,    -1,    -1,    -1,    36,    -1,    -1,    -1,    40,
      -1,    -1,    43,    44,    45,    -1,    47,    -1,    49,    50,
      -1,    -1,    53,    -1,    -1,    56,    57,    -1,    59,    60,
      -1,    62,    63,    -1,    65,    66,    67,    68,    69,    70,
      71,    -1,    73,    74,    75,    76,    77,    78,    79,    -1,
      81,    82,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    92,    93,    94,    95,    96,    97,    -1,    99,    -1,
      -1,   102,    -1,    -1,   105,    -1,    -1,   108,    -1,   110,
      -1,    -1,    -1,   114,   115,   116,    -1,    -1,   119,    -1,
      -1,    -1,    -1,   124,   125,    -1,    -1,    -1,    -1,   130,
      -1,   132,    -1,    -1,    -1,   136,    -1,   138,   139,   140,
     141,    -1,    -1,    -1,   145,    -1,    -1,   148,   149,   150,
      -1,    -1,    -1,   154,    -1,   156,   157,    -1,   159,   160,
     161,    -1,    -1,   164,   165,    -1,   167,   168,   169,   170,
     171,   172,    -1,    -1,   175,   176,   177,    -1,    -1,   180,
     181,    -1,   183,   184,   185,    -1,    -1,   188,    -1,    -1,
      -1,   192,    -1,   194,   195,   196,    -1,   198,   199,   200,
     201,   202,   203,    -1,   205,    -1,    -1,    -1,   209,   210,
     211,    -1,   213,    -1,    -1,    -1,   217,   218,    -1,    -1,
      -1,   222,   223,   224,   225,    -1,    -1,   228,   229,   230,
     231,   232,    -1,   234,    -1,    -1,    -1,    -1,   239,   240,
      -1,    -1,    -1,   244,    -1,   246,   247,    -1,   249,   250,
      -1,    -1,    -1,   254,   255,    -1,   257,   258,   259,    -1,
      -1,   262,    -1,    -1,   265,   266,    -1,   268,    -1,    -1,
      -1,   272,   273,    -1,   275,    -1,   277,    -1,   279,   280,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,    -1,   305,   306,   307,   308,    -1,   310,
     311,   312,   313,    -1,   315,   316,    -1,    -1,    -1,    -1,
     321,   322,   323,   324,   325,   326,    -1,    -1,   329,   330,
      -1,   332,    -1,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,   344,    -1,    -1,   347,   348,    -1,    -1,
     351,   352,   353,   354,    -1,    -1,    -1,   358,   359,    -1,
      -1,    -1,    -1,   364,   365,   366,    -1,   368,   369,   370,
     371,    -1,   373,   374,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   383,   384,   385,    -1,    -1,   388,    -1,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,    -1,    -1,   404,   405,   406,    -1,   408,    -1,   410,
     411,   412,   413,   414,    -1,   416,   417,   418,    -1,    -1,
     421,    -1,    -1,    -1,   425,   426,   427,   428,   429,    -1,
      -1,   432,   433,   434,   435,   436,    -1,   438,   439,    -1,
     441,   442,   443,    -1,    -1,   446,    -1,   448,    -1,   450,
     451,    -1,   453,   454,    -1,    -1,    -1,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   467,    -1,   469,   470,
     471,    -1,    -1,   474,   475,   476,   477,    -1,    -1,    -1,
     481,    -1,    -1,    -1,   485,    -1,   487,   488,   489,   490,
     491,   492,    -1,   494,   495,   496,   497,   498,   499,   500,
      -1,    -1,    -1,    -1,    -1,   506,   507,    -1,   509,    -1,
      -1,   512,    -1,    -1,   515,   516,   517,    -1,    -1,   520,
     521,    -1,   523,   524,   525,   526,   527,   528,    -1,    -1,
     531,   532,   533,   534,    -1,   536,   537,    -1,   539,    -1,
     541,   542,   543,   544,    -1,    -1,   547,   548,    -1,   550,
     551,   552,   553,    -1,    -1,    -1,    -1,    -1,   559,   560,
     561,    -1,    -1,    -1,   565,   566,   567,   568,    -1,   570,
     571,    -1,   573,   574,    -1,   576,   577,    -1,    -1,   580,
      -1,    -1,   583,    -1,   585,    -1,   587,   588,   589,    -1,
      -1,    -1,    -1,    -1,    -1,   596,    -1,    -1,   599,    -1,
      -1,    -1,   603,   604,   605,   606,   607,   608,    -1,    -1,
      -1,    -1,    -1,    -1,   615,   616,    -1,   618,   619,   620,
      -1,    -1,   623,    -1,    -1,     5,    -1,     7,     8,     9,
      10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,
      -1,    21,   643,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    -1,    -1,    -1,    36,    -1,    -1,    -1,
      40,    -1,    -1,    43,    44,    45,    -1,    47,    -1,    49,
      50,    -1,    -1,    53,    -1,    -1,    56,    57,    -1,    59,
      60,    -1,    62,    63,    -1,    65,    66,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    77,    78,    79,
      -1,    81,    82,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    92,    93,    94,    95,    96,    97,    -1,    99,
      -1,    -1,   102,    -1,    -1,   105,    -1,    -1,   108,    -1,
     110,    -1,    -1,    -1,   114,   115,   116,    -1,    -1,   119,
      -1,    -1,    -1,    -1,   124,   125,    -1,    -1,    -1,    -1,
     130,    -1,   132,    -1,    -1,    -1,   136,    -1,   138,   139,
     140,   141,    -1,    -1,    -1,   145,    -1,    -1,   148,   149,
     150,    -1,    -1,    -1,   154,    -1,   156,   157,    -1,   159,
     160,   161,    -1,    -1,   164,   165,    -1,   167,   168,   169,
     170,   171,   172,    -1,    -1,   175,   176,   177,    -1,    -1,
     180,   181,    -1,   183,   184,   185,    -1,    -1,   188,    -1,
      -1,    -1,   192,    -1,   194,   195,   196,    -1,   198,   199,
     200,   201,   202,   203,    -1,   205,    -1,    -1,    -1,   209,
     210,   211,    -1,   213,    -1,    -1,    -1,   217,   218,    -1,
      -1,    -1,   222,   223,   224,   225,    -1,    -1,   228,   229,
     230,   231,   232,    -1,   234,    -1,    -1,    -1,    -1,   239,
     240,    -1,    -1,    -1,   244,    -1,   246,   247,    -1,   249,
     250,    -1,    -1,    -1,   254,   255,    -1,   257,   258,   259,
      -1,    -1,   262,    -1,    -1,   265,   266,    -1,    -1,    -1,
      -1,    -1,   272,   273,    -1,   275,    -1,   277,    -1,   279,
     280,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,    -1,   305,   306,   307,   308,    -1,
     310,   311,   312,   313,    -1,   315,   316,    -1,    -1,    -1,
      -1,   321,   322,   323,   324,   325,   326,    -1,    -1,   329,
     330,    -1,   332,    -1,   334,    -1,   336,   337,   338,   339,
     340,   341,   342,   343,   344,    -1,    -1,   347,   348,    -1,
      -1,   351,   352,   353,   354,    -1,    -1,    -1,   358,   359,
      -1,    -1,    -1,    -1,   364,   365,   366,    -1,   368,   369,
     370,   371,    -1,   373,   374,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   383,   384,   385,    -1,    -1,   388,    -1,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,    -1,    -1,   404,   405,   406,    -1,   408,    -1,
     410,   411,   412,   413,   414,    -1,   416,   417,   418,    -1,
      -1,   421,    -1,    -1,    -1,   425,   426,   427,   428,   429,
      -1,    -1,   432,   433,   434,   435,   436,    -1,   438,   439,
      -1,   441,   442,   443,    -1,    -1,   446,    -1,   448,    -1,
     450,   451,    -1,   453,   454,    -1,    -1,    -1,   458,   459,
     460,   461,   462,   463,   464,   465,   466,   467,    -1,   469,
     470,    -1,    -1,    -1,   474,   475,   476,   477,    -1,    -1,
      -1,   481,    -1,    -1,    -1,   485,    -1,   487,   488,   489,
     490,   491,   492,    -1,   494,   495,   496,   497,   498,   499,
     500,    -1,    -1,    -1,    -1,    -1,   506,   507,    -1,   509,
      -1,    -1,   512,    -1,    -1,   515,   516,   517,    -1,    -1,
     520,   521,    -1,   523,   524,   525,   526,   527,   528,    -1,
      -1,   531,   532,   533,   534,    -1,   536,   537,    -1,   539,
      -1,   541,   542,   543,   544,    -1,    -1,   547,   548,    -1,
     550,   551,   552,   553,    -1,    -1,    -1,    -1,    -1,   559,
     560,   561,    -1,    -1,    -1,   565,   566,   567,   568,    -1,
     570,   571,    -1,   573,   574,    -1,   576,   577,    -1,    -1,
     580,    -1,    -1,   583,    -1,   585,    -1,   587,   588,   589,
      -1,    -1,    -1,    -1,    -1,    -1,   596,    -1,    -1,   599,
      -1,    -1,    -1,   603,   604,   605,   606,   607,   608,    -1,
      -1,    -1,    -1,    -1,    -1,   615,   616,    -1,   618,   619,
     620,    -1,    -1,   623,    -1,    -1,     5,    -1,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      -1,    -1,    21,   643,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    32,    -1,    -1,    -1,    36,    -1,    -1,
      -1,    40,    -1,    -1,    43,    44,    45,    -1,    47,    -1,
      49,    50,    -1,    -1,    53,    -1,    -1,    56,    57,    -1,
      59,    60,    -1,    62,    63,    -1,    65,    66,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    78,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    -1,    93,    94,    95,    96,    97,    -1,
      99,    -1,    -1,   102,    -1,    -1,   105,    -1,    -1,   108,
      -1,   110,    -1,    -1,    -1,   114,   115,   116,    -1,    -1,
     119,    -1,    -1,    -1,    -1,   124,   125,    -1,    -1,    -1,
      -1,   130,    -1,   132,    -1,    -1,    -1,   136,    -1,   138,
     139,   140,   141,    -1,    -1,    -1,   145,    -1,    -1,   148,
     149,   150,    -1,    -1,    -1,   154,    -1,   156,   157,    -1,
     159,   160,   161,    -1,    -1,   164,   165,    -1,   167,   168,
     169,   170,   171,   172,    -1,    -1,   175,   176,   177,    -1,
      -1,   180,   181,    -1,   183,   184,   185,    -1,    -1,   188,
      -1,    -1,    -1,   192,    -1,   194,    -1,   196,    -1,   198,
     199,   200,   201,   202,   203,    -1,   205,    -1,    -1,    -1,
     209,   210,   211,    -1,   213,    -1,    -1,    -1,   217,   218,
      -1,    -1,    -1,   222,   223,   224,   225,    -1,    -1,   228,
     229,   230,    -1,   232,    -1,   234,    -1,    -1,    -1,    -1,
     239,   240,    -1,    -1,    -1,   244,    -1,   246,   247,    -1,
     249,   250,    -1,    -1,    -1,   254,    -1,    -1,   257,   258,
     259,    -1,    -1,   262,    -1,    -1,   265,   266,    -1,    -1,
      -1,    -1,    -1,   272,   273,    -1,   275,    -1,   277,    -1,
     279,   280,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,    -1,   305,   306,   307,   308,
      -1,   310,   311,   312,   313,    -1,   315,   316,    -1,    -1,
      -1,    -1,   321,   322,   323,   324,   325,   326,    -1,    -1,
     329,   330,    -1,   332,    -1,   334,    -1,   336,   337,   338,
     339,   340,   341,   342,   343,   344,    -1,    -1,   347,   348,
      -1,    -1,   351,   352,   353,   354,    -1,    -1,    -1,   358,
     359,    -1,    -1,    -1,    -1,   364,   365,   366,    -1,   368,
     369,   370,   371,    -1,   373,   374,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   383,   384,   385,    -1,    -1,   388,
      -1,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,    -1,    -1,   404,   405,   406,    -1,   408,
      -1,   410,   411,   412,   413,   414,    -1,   416,   417,   418,
      -1,    -1,   421,    -1,    -1,    -1,   425,   426,   427,   428,
     429,    -1,    -1,   432,   433,   434,   435,   436,    -1,   438,
     439,    -1,   441,   442,   443,    -1,    -1,   446,    -1,   448,
      -1,   450,   451,    -1,   453,   454,    -1,    -1,    -1,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,    -1,
     469,   470,   471,    -1,    -1,   474,   475,   476,   477,    -1,
      -1,    -1,   481,    -1,    -1,    -1,   485,    -1,   487,   488,
     489,   490,   491,   492,    -1,   494,   495,   496,   497,   498,
     499,    -1,    -1,    -1,    -1,    -1,    -1,   506,   507,    -1,
     509,    -1,    -1,   512,    -1,    -1,   515,   516,   517,    -1,
      -1,   520,   521,    -1,   523,   524,   525,   526,   527,   528,
      -1,    -1,   531,   532,   533,   534,    -1,   536,   537,    -1,
     539,    -1,   541,   542,   543,   544,    -1,    -1,   547,   548,
      -1,   550,   551,   552,   553,    -1,    -1,    -1,    -1,    -1,
     559,   560,   561,    -1,    -1,    -1,   565,   566,   567,   568,
      -1,   570,   571,    -1,   573,   574,    -1,   576,   577,    -1,
      -1,   580,    -1,    -1,   583,    -1,   585,    -1,   587,   588,
     589,    -1,    -1,    -1,    -1,    -1,    -1,   596,    -1,    -1,
     599,    -1,    -1,    -1,   603,   604,   605,   606,   607,   608,
      -1,    -1,    -1,    -1,    -1,    -1,   615,   616,    -1,   618,
     619,   620,    -1,    -1,   623,    -1,    -1,     5,    -1,     7,
       8,     9,    10,    11,    -1,    -1,    14,   636,    -1,    -1,
      18,    -1,    -1,    21,   643,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    32,    -1,    -1,    -1,    36,    -1,
      -1,    -1,    40,    -1,    -1,    43,    44,    45,    -1,    47,
      -1,    49,    50,    -1,    -1,    53,    -1,    -1,    56,    57,
      -1,    59,    60,    -1,    62,    63,    -1,    65,    66,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      78,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    -1,    90,    91,    -1,    93,    94,    95,    96,    97,
      -1,    99,    -1,    -1,   102,    -1,    -1,   105,    -1,    -1,
     108,    -1,   110,    -1,    -1,    -1,   114,   115,   116,    -1,
      -1,   119,    -1,    -1,    -1,    -1,   124,   125,    -1,    -1,
      -1,    -1,   130,    -1,   132,    -1,    -1,    -1,   136,    -1,
     138,   139,   140,   141,    -1,    -1,    -1,   145,    -1,    -1,
     148,   149,   150,    -1,    -1,    -1,   154,    -1,   156,   157,
      -1,   159,   160,   161,    -1,    -1,   164,   165,    -1,   167,
     168,   169,   170,   171,   172,    -1,    -1,   175,   176,   177,
      -1,    -1,   180,   181,    -1,   183,   184,   185,    -1,    -1,
     188,    -1,    -1,    -1,   192,    -1,   194,    -1,   196,    -1,
     198,   199,   200,   201,   202,   203,    -1,   205,    -1,    -1,
      -1,   209,   210,   211,    -1,   213,    -1,    -1,    -1,   217,
     218,    -1,    -1,    -1,   222,   223,   224,   225,    -1,    -1,
     228,   229,   230,    -1,   232,    -1,   234,    -1,    -1,    -1,
      -1,   239,   240,    -1,    -1,    -1,   244,    -1,   246,   247,
      -1,   249,   250,    -1,    -1,    -1,   254,    -1,    -1,   257,
     258,   259,    -1,    -1,   262,    -1,    -1,   265,   266,    -1,
      -1,    -1,    -1,    -1,   272,   273,    -1,   275,    -1,   277,
      -1,   279,   280,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,    -1,   305,   306,   307,
     308,    -1,   310,   311,   312,   313,    -1,   315,   316,    -1,
      -1,    -1,    -1,   321,   322,   323,   324,   325,   326,    -1,
      -1,   329,   330,    -1,   332,    -1,   334,    -1,   336,   337,
     338,   339,   340,   341,   342,   343,   344,    -1,    -1,   347,
     348,    -1,    -1,   351,   352,   353,   354,    -1,    -1,    -1,
     358,   359,    -1,    -1,    -1,    -1,   364,   365,   366,    -1,
     368,   369,   370,   371,    -1,   373,   374,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   383,   384,   385,    -1,    -1,
     388,    -1,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,    -1,    -1,   404,   405,   406,    -1,
     408,    -1,   410,   411,   412,   413,   414,    -1,   416,   417,
     418,    -1,    -1,   421,    -1,    -1,    -1,   425,   426,   427,
     428,   429,    -1,    -1,   432,   433,   434,   435,   436,    -1,
     438,   439,    -1,   441,   442,   443,    -1,    -1,   446,    -1,
     448,    -1,   450,   451,    -1,   453,   454,    -1,    -1,    -1,
     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
      -1,   469,   470,    -1,    -1,    -1,   474,   475,   476,   477,
      -1,    -1,    -1,   481,    -1,    -1,    -1,   485,    -1,   487,
     488,   489,   490,   491,   492,    -1,   494,   495,   496,   497,
     498,   499,    -1,    -1,    -1,    -1,    -1,    -1,   506,   507,
      -1,   509,    -1,    -1,   512,    -1,    -1,   515,   516,   517,
      -1,    -1,   520,   521,    -1,   523,   524,   525,   526,   527,
     528,    -1,    -1,   531,   532,   533,   534,    -1,   536,   537,
      -1,   539,    -1,   541,   542,   543,   544,    -1,    -1,   547,
     548,    -1,   550,   551,   552,   553,    -1,    -1,    -1,    -1,
      -1,   559,   560,   561,    -1,    -1,    -1,   565,   566,   567,
     568,    -1,   570,   571,    -1,   573,   574,    -1,   576,   577,
      -1,    -1,   580,    -1,    -1,   583,    -1,   585,    -1,   587,
     588,   589,    -1,    -1,    -1,    -1,    -1,    -1,   596,    -1,
      -1,   599,    -1,    -1,    -1,   603,   604,   605,   606,   607,
     608,    -1,    -1,    -1,    -1,    -1,    -1,   615,   616,    -1,
     618,   619,   620,    -1,    -1,   623,    -1,    -1,    -1,    -1,
       5,    -1,     7,     8,     9,    10,    11,    -1,   636,    14,
      -1,    -1,    -1,    18,   642,   643,    21,    -1,    23,    24,
      25,    26,    27,    28,    29,    30,    -1,    32,    -1,    -1,
      -1,    36,    -1,    -1,    -1,    40,    -1,    -1,    43,    44,
      45,    -1,    47,    -1,    49,    50,    -1,    -1,    53,    -1,
      -1,    56,    57,    -1,    59,    60,    -1,    62,    63,    -1,
      65,    66,    67,    68,    69,    70,    71,    -1,    73,    74,
      75,    76,    77,    78,    79,    -1,    81,    82,    83,    84,
      85,    86,    87,    88,    -1,    90,    91,    -1,    93,    94,
      95,    96,    97,    -1,    99,    -1,    -1,   102,    -1,    -1,
     105,    -1,    -1,   108,    -1,   110,    -1,    -1,    -1,   114,
     115,   116,    -1,    -1,   119,    -1,    -1,    -1,    -1,   124,
     125,    -1,    -1,    -1,    -1,   130,    -1,   132,    -1,    -1,
      -1,   136,    -1,   138,   139,   140,   141,    -1,    -1,    -1,
     145,    -1,    -1,   148,   149,   150,    -1,    -1,    -1,   154,
      -1,   156,   157,    -1,   159,   160,   161,    -1,    -1,   164,
     165,    -1,   167,   168,   169,   170,   171,   172,    -1,    -1,
     175,   176,   177,    -1,    -1,   180,   181,    -1,   183,   184,
     185,    -1,    -1,   188,    -1,    -1,    -1,   192,    -1,   194,
      -1,   196,    -1,   198,   199,   200,   201,   202,   203,    -1,
     205,    -1,    -1,    -1,   209,   210,   211,    -1,   213,    -1,
      -1,    -1,   217,   218,    -1,    -1,    -1,   222,   223,   224,
     225,    -1,    -1,   228,   229,   230,    -1,   232,    -1,   234,
      -1,    -1,    -1,    -1,   239,   240,    -1,    -1,    -1,   244,
      -1,   246,   247,    -1,   249,   250,    -1,    -1,    -1,   254,
      -1,    -1,   257,   258,   259,    -1,    -1,   262,    -1,    -1,
     265,   266,    -1,    -1,    -1,    -1,    -1,   272,   273,    -1,
     275,    -1,   277,    -1,   279,   280,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,    -1,
     305,   306,   307,   308,    -1,   310,   311,   312,   313,    -1,
     315,   316,    -1,    -1,    -1,    -1,   321,   322,   323,   324,
     325,   326,    -1,    -1,   329,   330,    -1,   332,    -1,   334,
      -1,   336,   337,   338,   339,   340,   341,   342,   343,   344,
      -1,    -1,   347,   348,    -1,    -1,   351,   352,   353,   354,
      -1,    -1,    -1,   358,   359,    -1,    -1,    -1,    -1,   364,
     365,   366,    -1,   368,   369,   370,   371,    -1,   373,   374,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   383,   384,
     385,    -1,    -1,   388,    -1,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,    -1,    -1,   404,
     405,   406,    -1,   408,    -1,   410,   411,   412,   413,   414,
      -1,   416,   417,   418,    -1,    -1,   421,    -1,    -1,    -1,
     425,   426,   427,   428,   429,    -1,    -1,   432,   433,   434,
     435,   436,    -1,   438,   439,    -1,   441,   442,   443,    -1,
      -1,   446,    -1,   448,    -1,   450,   451,    -1,   453,   454,
      -1,    -1,    -1,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,    -1,   469,   470,    -1,    -1,    -1,   474,
     475,   476,   477,    -1,    -1,    -1,   481,    -1,    -1,    -1,
     485,    -1,   487,   488,   489,   490,   491,   492,    -1,   494,
     495,   496,   497,   498,   499,    -1,    -1,    -1,    -1,    -1,
      -1,   506,   507,    -1,   509,    -1,    -1,   512,    -1,    -1,
     515,   516,   517,    -1,    -1,   520,   521,    -1,   523,   524,
     525,   526,   527,   528,    -1,    -1,   531,   532,   533,   534,
      -1,   536,   537,    -1,   539,    -1,   541,   542,   543,   544,
      -1,    -1,   547,   548,    -1,   550,   551,   552,   553,    -1,
      -1,    -1,    -1,    -1,   559,   560,   561,    -1,    -1,    -1,
     565,   566,   567,   568,    -1,   570,   571,    -1,   573,   574,
      -1,   576,   577,    -1,    -1,   580,    -1,    -1,   583,    -1,
     585,    -1,   587,   588,   589,    -1,    -1,    -1,    -1,    -1,
      -1,   596,    -1,    -1,   599,    -1,    -1,    -1,   603,   604,
     605,   606,   607,   608,    -1,    -1,    -1,    -1,    -1,    -1,
     615,   616,    -1,   618,   619,   620,    -1,    -1,   623,    -1,
      -1,    -1,    -1,     5,    -1,     7,     8,     9,    10,    11,
     635,    -1,    14,    -1,    -1,    -1,    18,    -1,   643,    21,
      -1,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      32,    -1,    -1,    -1,    36,    -1,    -1,    -1,    40,    -1,
      -1,    43,    44,    45,    -1,    47,    -1,    49,    50,    -1,
      -1,    53,    -1,    -1,    56,    57,    -1,    59,    60,    -1,
      62,    63,    -1,    65,    66,    67,    68,    69,    70,    71,
      -1,    73,    74,    75,    76,    77,    78,    79,    -1,    81,
      82,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      -1,    93,    94,    95,    96,    97,    -1,    99,    -1,    -1,
     102,    -1,    -1,   105,    -1,    -1,   108,    -1,   110,    -1,
      -1,    -1,   114,   115,   116,    -1,    -1,   119,    -1,    -1,
      -1,    -1,   124,   125,    -1,    -1,    -1,    -1,   130,    -1,
     132,    -1,    -1,    -1,   136,    -1,   138,   139,   140,   141,
      -1,    -1,    -1,   145,    -1,    -1,   148,   149,   150,    -1,
      -1,    -1,   154,    -1,   156,   157,    -1,   159,   160,   161,
      -1,    -1,   164,   165,    -1,   167,   168,   169,   170,   171,
     172,    -1,    -1,   175,   176,   177,    -1,    -1,   180,   181,
      -1,   183,   184,   185,    -1,    -1,   188,    -1,    -1,    -1,
     192,    -1,   194,    -1,   196,    -1,   198,   199,   200,   201,
     202,   203,    -1,   205,    -1,    -1,    -1,   209,   210,   211,
      -1,   213,    -1,    -1,    -1,   217,   218,    -1,    -1,    -1,
     222,   223,   224,   225,    -1,    -1,   228,   229,   230,    -1,
     232,    -1,   234,    -1,    -1,    -1,    -1,   239,   240,    -1,
     242,    -1,   244,    -1,   246,   247,    -1,   249,   250,    -1,
      -1,    -1,   254,    -1,    -1,   257,   258,   259,    -1,    -1,
     262,    -1,    -1,   265,   266,    -1,    -1,    -1,    -1,    -1,
     272,   273,    -1,   275,    -1,   277,    -1,   279,   280,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,    -1,   305,   306,   307,   308,    -1,   310,   311,
     312,   313,    -1,   315,   316,    -1,    -1,    -1,    -1,   321,
     322,   323,   324,   325,   326,    -1,    -1,   329,   330,    -1,
     332,    -1,   334,    -1,   336,   337,   338,   339,   340,   341,
     342,   343,   344,    -1,    -1,   347,   348,    -1,    -1,   351,
     352,   353,   354,    -1,    -1,    -1,   358,   359,    -1,    -1,
      -1,    -1,   364,   365,   366,    -1,   368,   369,   370,   371,
      -1,   373,   374,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   383,   384,   385,    -1,    -1,   388,    -1,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
      -1,    -1,   404,   405,   406,    -1,   408,    -1,   410,   411,
     412,   413,   414,    -1,   416,   417,   418,    -1,    -1,   421,
      -1,    -1,    -1,   425,   426,   427,   428,   429,    -1,    -1,
     432,   433,   434,   435,   436,    -1,   438,   439,    -1,   441,
     442,   443,    -1,    -1,   446,    -1,   448,    -1,   450,   451,
      -1,   453,   454,    -1,    -1,    -1,   458,   459,   460,   461,
     462,   463,   464,   465,   466,   467,    -1,   469,   470,    -1,
      -1,    -1,   474,   475,   476,   477,    -1,    -1,    -1,   481,
      -1,    -1,    -1,   485,    -1,   487,   488,   489,   490,   491,
     492,    -1,   494,   495,   496,   497,   498,   499,    -1,    -1,
      -1,    -1,    -1,    -1,   506,   507,    -1,   509,    -1,    -1,
     512,    -1,    -1,   515,   516,   517,    -1,    -1,   520,   521,
      -1,   523,   524,   525,   526,   527,   528,    -1,    -1,   531,
     532,   533,   534,    -1,   536,   537,    -1,   539,    -1,   541,
     542,   543,   544,    -1,    -1,   547,   548,    -1,   550,   551,
     552,   553,    -1,    -1,    -1,    -1,    -1,   559,   560,   561,
      -1,    -1,    -1,   565,   566,   567,   568,    -1,   570,   571,
      -1,   573,   574,    -1,   576,   577,    -1,    -1,   580,    -1,
      -1,   583,    -1,   585,    -1,   587,   588,   589,    -1,    -1,
      -1,    -1,    -1,    -1,   596,    -1,    -1,   599,    -1,    -1,
      -1,   603,   604,   605,   606,   607,   608,    -1,    -1,    -1,
      -1,    -1,    -1,   615,   616,    -1,   618,   619,   620,    -1,
      -1,   623,    -1,    -1,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      21,   643,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    32,    -1,    -1,    -1,    36,    -1,    -1,    -1,    40,
      -1,    -1,    43,    44,    45,    -1,    47,    -1,    49,    50,
      -1,    -1,    53,    -1,    -1,    56,    57,    -1,    59,    60,
      -1,    62,    63,    -1,    65,    66,    67,    68,    69,    70,
      71,    -1,    73,    74,    75,    76,    77,    78,    79,    -1,
      81,    82,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    -1,    93,    94,    95,    96,    97,    -1,    99,    -1,
      -1,   102,    -1,    -1,   105,    -1,    -1,   108,    -1,   110,
      -1,    -1,    -1,   114,   115,   116,    -1,    -1,   119,    -1,
      -1,    -1,    -1,   124,   125,    -1,    -1,    -1,    -1,   130,
      -1,   132,    -1,    -1,    -1,   136,    -1,   138,   139,   140,
     141,    -1,    -1,    -1,   145,    -1,    -1,   148,   149,   150,
      -1,    -1,    -1,   154,    -1,   156,   157,    -1,   159,   160,
     161,    -1,    -1,   164,   165,    -1,   167,   168,   169,   170,
     171,   172,    -1,    -1,   175,   176,   177,    -1,    -1,   180,
     181,    -1,   183,   184,   185,    -1,    -1,   188,    -1,    -1,
      -1,   192,    -1,   194,    -1,   196,    -1,   198,   199,   200,
     201,   202,   203,    -1,   205,    -1,    -1,    -1,   209,   210,
     211,    -1,   213,    -1,    -1,    -1,   217,   218,    -1,    -1,
      -1,   222,   223,   224,   225,    -1,    -1,   228,   229,   230,
      -1,   232,    -1,   234,    -1,    -1,    -1,    -1,   239,   240,
      -1,    -1,    -1,   244,    -1,   246,   247,    -1,   249,   250,
      -1,    -1,    -1,   254,    -1,    -1,   257,   258,   259,    -1,
      -1,   262,    -1,    -1,   265,   266,    -1,    -1,    -1,    -1,
      -1,   272,   273,    -1,   275,    -1,   277,    -1,   279,   280,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,    -1,   305,   306,   307,   308,    -1,   310,
     311,   312,   313,    -1,   315,   316,    -1,    -1,    -1,    -1,
     321,   322,   323,   324,   325,   326,    -1,    -1,   329,   330,
      -1,   332,    -1,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,   344,    -1,    -1,   347,   348,    -1,    -1,
     351,   352,   353,   354,    -1,    -1,    -1,   358,   359,    -1,
      -1,    -1,    -1,   364,   365,   366,    -1,   368,   369,   370,
     371,    -1,   373,   374,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   383,   384,   385,    -1,    -1,   388,    -1,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,    -1,    -1,   404,   405,   406,    -1,   408,    -1,   410,
     411,   412,   413,   414,    -1,   416,   417,   418,    -1,    -1,
     421,    -1,    -1,    -1,   425,   426,   427,   428,   429,    -1,
      -1,   432,   433,   434,   435,   436,    -1,   438,   439,    -1,
     441,   442,   443,    -1,    -1,   446,    -1,   448,    -1,   450,
     451,    -1,   453,   454,    -1,    -1,    -1,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   467,    -1,   469,   470,
      -1,    -1,    -1,   474,   475,   476,   477,    -1,    -1,    -1,
     481,    -1,    -1,    -1,   485,    -1,   487,   488,   489,   490,
     491,   492,    -1,   494,   495,   496,   497,   498,   499,    -1,
      -1,    -1,    -1,    -1,    -1,   506,   507,    -1,   509,    -1,
      -1,   512,    -1,    -1,   515,   516,   517,    -1,    -1,   520,
     521,    -1,   523,   524,   525,   526,   527,   528,    -1,    -1,
     531,   532,   533,   534,    -1,   536,   537,    -1,   539,    -1,
     541,   542,   543,   544,    -1,    -1,   547,   548,    -1,   550,
     551,   552,   553,    -1,    -1,    -1,    -1,    -1,   559,   560,
     561,    -1,    -1,    -1,   565,   566,   567,   568,    -1,   570,
     571,    -1,   573,   574,    -1,   576,   577,    -1,    -1,   580,
      -1,    -1,   583,    -1,   585,    -1,   587,   588,   589,    -1,
      -1,    -1,    -1,    -1,    -1,   596,    -1,    -1,   599,    -1,
      -1,    -1,   603,   604,   605,   606,   607,   608,    -1,    -1,
      -1,    -1,    -1,    -1,   615,   616,    -1,   618,   619,   620,
      -1,    -1,   623,    -1,    -1,    -1,    -1,    -1,     5,   630,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,   643,    -1,    21,    -1,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    32,    -1,    -1,    -1,    36,
      -1,    -1,    -1,    40,    -1,    -1,    43,    44,    45,    -1,
      47,    -1,    49,    50,    -1,    -1,    53,    -1,    -1,    56,
      57,    -1,    59,    60,    -1,    62,    63,    -1,    65,    66,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      77,    78,    79,    -1,    81,    82,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    -1,    93,    94,    95,    96,
      97,    -1,    99,    -1,    -1,   102,    -1,    -1,   105,    -1,
      -1,   108,    -1,   110,    -1,    -1,    -1,   114,   115,   116,
      -1,    -1,   119,    -1,    -1,    -1,    -1,   124,   125,    -1,
      -1,    -1,    -1,   130,    -1,   132,    -1,    -1,    -1,   136,
      -1,   138,   139,   140,   141,    -1,    -1,    -1,   145,    -1,
      -1,   148,   149,   150,    -1,    -1,    -1,   154,    -1,   156,
     157,    -1,   159,   160,   161,    -1,    -1,   164,   165,    -1,
     167,   168,   169,   170,   171,   172,    -1,    -1,   175,   176,
     177,    -1,    -1,   180,   181,    -1,   183,   184,   185,    -1,
      -1,   188,    -1,    -1,    -1,   192,    -1,   194,    -1,   196,
      -1,   198,   199,   200,   201,   202,   203,    -1,   205,    -1,
      -1,    -1,   209,   210,   211,    -1,   213,    -1,    -1,    -1,
     217,   218,    -1,    -1,    -1,   222,   223,   224,   225,    -1,
      -1,   228,   229,   230,    -1,   232,    -1,   234,    -1,    -1,
      -1,    -1,   239,   240,    -1,    -1,    -1,   244,    -1,   246,
     247,    -1,   249,   250,    -1,    -1,    -1,   254,    -1,    -1,
     257,   258,   259,    -1,    -1,   262,    -1,    -1,   265,   266,
      -1,    -1,    -1,    -1,    -1,   272,   273,    -1,   275,    -1,
     277,    -1,   279,   280,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,    -1,   305,   306,
     307,   308,    -1,   310,   311,   312,   313,    -1,   315,   316,
      -1,    -1,    -1,    -1,   321,   322,   323,   324,   325,   326,
      -1,    -1,   329,   330,    -1,   332,    -1,   334,    -1,   336,
     337,   338,   339,   340,   341,   342,   343,   344,    -1,    -1,
     347,   348,    -1,    -1,   351,   352,   353,   354,    -1,    -1,
      -1,   358,   359,    -1,    -1,    -1,    -1,   364,   365,   366,
      -1,   368,   369,   370,   371,    -1,   373,   374,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   383,   384,   385,    -1,
      -1,   388,    -1,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,    -1,    -1,   404,   405,   406,
      -1,   408,    -1,   410,   411,   412,   413,   414,    -1,   416,
     417,   418,    -1,    -1,   421,    -1,    -1,    -1,   425,   426,
     427,   428,   429,    -1,    -1,   432,   433,   434,   435,   436,
      -1,   438,   439,    -1,   441,   442,   443,    -1,    -1,   446,
      -1,   448,    -1,   450,   451,    -1,   453,   454,    -1,    -1,
      -1,   458,   459,   460,   461,   462,   463,   464,   465,   466,
     467,    -1,   469,   470,    -1,    -1,    -1,   474,   475,   476,
     477,    -1,    -1,    -1,   481,    -1,    -1,    -1,   485,    -1,
     487,   488,   489,   490,   491,   492,    -1,   494,   495,   496,
     497,   498,   499,    -1,    -1,    -1,    -1,    -1,    -1,   506,
     507,    -1,   509,    -1,    -1,   512,    -1,    -1,   515,   516,
     517,    -1,    -1,   520,   521,    -1,   523,   524,   525,   526,
     527,   528,    -1,    -1,   531,   532,   533,   534,    -1,   536,
     537,    -1,   539,    -1,   541,   542,   543,   544,    -1,    -1,
     547,   548,    -1,   550,   551,   552,   553,    -1,    -1,    -1,
      -1,    -1,   559,   560,   561,    -1,    -1,    -1,   565,   566,
     567,   568,    -1,   570,   571,    -1,   573,   574,    -1,   576,
     577,    -1,    -1,   580,    -1,    -1,   583,    -1,   585,    -1,
     587,   588,   589,    -1,    -1,    -1,    -1,    -1,    -1,   596,
      -1,    -1,   599,    -1,    -1,    -1,   603,   604,   605,   606,
     607,   608,    -1,    -1,    -1,    -1,    -1,    -1,   615,   616,
      -1,   618,   619,   620,    -1,    -1,   623,    -1,    -1,    -1,
      -1,     5,    -1,     7,     8,     9,    10,    11,   635,    -1,
      14,    -1,    -1,    -1,    18,    -1,   643,    21,    -1,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    -1,
      -1,    -1,    36,    -1,    -1,    -1,    40,    -1,    -1,    43,
      44,    45,    -1,    47,    -1,    49,    50,    -1,    -1,    53,
      -1,    -1,    56,    57,    -1,    59,    60,    -1,    62,    63,
      -1,    65,    66,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    78,    79,    -1,    81,    82,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    -1,    93,
      94,    95,    96,    97,    -1,    99,    -1,    -1,   102,    -1,
      -1,   105,    -1,    -1,   108,    -1,   110,    -1,    -1,    -1,
     114,   115,   116,    -1,    -1,   119,    -1,    -1,    -1,    -1,
     124,   125,    -1,    -1,    -1,    -1,   130,    -1,   132,    -1,
      -1,    -1,   136,    -1,   138,   139,   140,   141,    -1,    -1,
      -1,   145,    -1,    -1,   148,   149,   150,    -1,    -1,    -1,
     154,    -1,   156,   157,    -1,   159,   160,   161,    -1,    -1,
     164,   165,    -1,   167,   168,   169,   170,   171,   172,    -1,
      -1,   175,   176,   177,    -1,    -1,   180,   181,    -1,   183,
     184,   185,    -1,    -1,   188,    -1,    -1,    -1,   192,    -1,
     194,    -1,   196,    -1,   198,   199,   200,   201,   202,   203,
      -1,   205,    -1,    -1,    -1,   209,   210,   211,    -1,   213,
      -1,    -1,    -1,   217,   218,    -1,    -1,    -1,   222,   223,
     224,   225,    -1,    -1,   228,   229,   230,    -1,   232,    -1,
     234,    -1,    -1,    -1,    -1,   239,   240,    -1,    -1,    -1,
     244,    -1,   246,   247,    -1,   249,   250,    -1,    -1,    -1,
     254,    -1,    -1,   257,   258,   259,    -1,    -1,   262,    -1,
      -1,   265,   266,    -1,    -1,    -1,    -1,    -1,   272,   273,
      -1,   275,    -1,   277,    -1,   279,   280,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
      -1,   305,   306,   307,   308,    -1,   310,   311,   312,   313,
      -1,   315,   316,    -1,    -1,    -1,    -1,   321,   322,   323,
     324,   325,   326,    -1,    -1,   329,   330,    -1,   332,    -1,
     334,    -1,   336,   337,   338,   339,   340,   341,   342,   343,
     344,    -1,    -1,   347,   348,    -1,    -1,   351,   352,   353,
     354,    -1,    -1,    -1,   358,   359,    -1,    -1,    -1,    -1,
     364,   365,   366,    -1,   368,   369,   370,   371,    -1,   373,
     374,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   383,
     384,   385,    -1,    -1,   388,    -1,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,    -1,    -1,
     404,   405,   406,    -1,   408,    -1,   410,   411,   412,   413,
     414,    -1,   416,   417,   418,    -1,    -1,   421,    -1,    -1,
      -1,   425,   426,   427,   428,   429,    -1,    -1,   432,   433,
     434,   435,   436,    -1,   438,   439,    -1,   441,   442,   443,
      -1,    -1,   446,    -1,   448,    -1,   450,   451,    -1,   453,
     454,    -1,    -1,    -1,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,    -1,   469,   470,    -1,    -1,    -1,
     474,   475,   476,   477,    -1,    -1,    -1,   481,    -1,    -1,
      -1,   485,    -1,   487,   488,   489,   490,   491,   492,    -1,
     494,   495,   496,   497,   498,   499,    -1,    -1,    -1,    -1,
      -1,    -1,   506,   507,    -1,   509,    -1,    -1,   512,    -1,
      -1,   515,   516,   517,    -1,    -1,   520,   521,    -1,   523,
     524,   525,   526,   527,   528,    -1,    -1,   531,   532,   533,
     534,    -1,   536,   537,    -1,   539,    -1,   541,   542,   543,
     544,    -1,    -1,   547,   548,    -1,   550,   551,   552,   553,
      -1,    -1,    -1,    -1,    -1,   559,   560,   561,    -1,    -1,
      -1,   565,   566,   567,   568,    -1,   570,   571,    -1,   573,
     574,    -1,   576,   577,    -1,    -1,   580,    -1,    -1,   583,
      -1,   585,    -1,   587,   588,   589,    -1,    -1,    -1,    -1,
      -1,    -1,   596,    -1,    -1,   599,    -1,    -1,    -1,   603,
     604,   605,   606,   607,   608,    -1,    -1,    -1,    -1,    -1,
      -1,   615,   616,    -1,   618,   619,   620,    -1,    -1,   623,
      -1,    -1,    -1,    -1,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,   642,   643,
      21,    -1,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    32,    -1,    -1,    -1,    36,    -1,    -1,    -1,    40,
      -1,    -1,    43,    44,    45,    -1,    47,    -1,    49,    50,
      -1,    -1,    53,    -1,    -1,    56,    57,    -1,    59,    60,
      -1,    62,    63,    -1,    65,    66,    67,    68,    69,    70,
      71,    -1,    73,    74,    75,    76,    77,    78,    79,    -1,
      81,    82,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    -1,    93,    94,    95,    96,    97,    -1,    99,    -1,
      -1,   102,    -1,    -1,   105,    -1,    -1,   108,    -1,   110,
      -1,    -1,    -1,   114,   115,   116,    -1,    -1,   119,    -1,
      -1,    -1,    -1,   124,   125,    -1,    -1,    -1,    -1,   130,
      -1,   132,    -1,    -1,    -1,   136,    -1,   138,   139,   140,
     141,    -1,    -1,    -1,   145,    -1,    -1,   148,   149,   150,
      -1,    -1,    -1,   154,    -1,   156,   157,    -1,   159,   160,
     161,    -1,    -1,   164,   165,    -1,   167,   168,   169,   170,
     171,   172,    -1,    -1,   175,   176,   177,    -1,    -1,   180,
     181,    -1,   183,   184,   185,    -1,    -1,   188,    -1,    -1,
      -1,   192,    -1,   194,    -1,   196,    -1,   198,   199,   200,
     201,   202,   203,    -1,   205,    -1,    -1,    -1,   209,   210,
     211,    -1,   213,    -1,    -1,    -1,   217,   218,    -1,    -1,
      -1,   222,   223,   224,   225,    -1,    -1,   228,   229,   230,
      -1,   232,    -1,   234,    -1,    -1,    -1,    -1,   239,   240,
      -1,    -1,    -1,   244,    -1,   246,   247,    -1,   249,   250,
      -1,    -1,    -1,   254,    -1,    -1,   257,   258,   259,    -1,
      -1,   262,    -1,    -1,   265,   266,    -1,    -1,    -1,    -1,
      -1,   272,   273,    -1,   275,    -1,   277,    -1,   279,   280,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,    -1,   305,   306,   307,   308,    -1,   310,
     311,   312,   313,    -1,   315,   316,    -1,    -1,    -1,    -1,
     321,   322,   323,   324,   325,   326,    -1,    -1,   329,   330,
      -1,   332,    -1,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,   344,    -1,    -1,   347,   348,    -1,    -1,
     351,   352,   353,   354,    -1,    -1,    -1,   358,   359,    -1,
      -1,    -1,    -1,   364,   365,   366,    -1,   368,   369,   370,
     371,    -1,   373,   374,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   383,   384,   385,    -1,    -1,   388,    -1,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,    -1,    -1,   404,   405,   406,    -1,   408,    -1,   410,
     411,   412,   413,   414,    -1,   416,   417,   418,    -1,    -1,
     421,    -1,    -1,    -1,   425,   426,   427,   428,   429,    -1,
      -1,   432,   433,   434,   435,   436,    -1,   438,   439,    -1,
     441,   442,   443,    -1,    -1,   446,    -1,   448,    -1,   450,
     451,    -1,   453,   454,    -1,    -1,    -1,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   467,    -1,   469,   470,
      -1,    -1,    -1,   474,   475,   476,   477,    -1,    -1,    -1,
     481,    -1,    -1,    -1,   485,    -1,   487,   488,   489,   490,
     491,   492,    -1,   494,   495,   496,   497,   498,   499,    -1,
      -1,    -1,    -1,    -1,    -1,   506,   507,    -1,   509,    -1,
      -1,   512,    -1,    -1,   515,   516,   517,    -1,    -1,   520,
     521,    -1,   523,   524,   525,   526,   527,   528,    -1,    -1,
     531,   532,   533,   534,    -1,   536,   537,    -1,   539,    -1,
     541,   542,   543,   544,    -1,    -1,   547,   548,    -1,   550,
     551,   552,   553,    -1,    -1,    -1,    -1,    -1,   559,   560,
     561,    -1,    -1,    -1,   565,   566,   567,   568,    -1,   570,
     571,    -1,   573,   574,    -1,   576,   577,    -1,    -1,   580,
      -1,    -1,   583,    -1,   585,    -1,   587,   588,   589,    -1,
      -1,    -1,    -1,    -1,    -1,   596,    -1,    -1,   599,    -1,
      -1,    -1,   603,   604,   605,   606,   607,   608,    -1,    -1,
      -1,    -1,    -1,    -1,   615,   616,    -1,   618,   619,   620,
      -1,    -1,   623,    -1,    -1,     5,    -1,     7,     8,     9,
      10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,
      -1,    21,   643,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    -1,    -1,    -1,    36,    -1,    -1,    -1,
      40,    -1,    -1,    43,    44,    45,    -1,    47,    -1,    49,
      50,    -1,    -1,    53,    -1,    -1,    56,    57,    -1,    59,
      60,    -1,    62,    63,    -1,    65,    66,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    77,    78,    79,
      -1,    81,    82,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    -1,    93,    94,    95,    96,    97,    -1,    99,
      -1,    -1,   102,    -1,    -1,   105,    -1,    -1,   108,    -1,
     110,    -1,    -1,    -1,   114,   115,   116,    -1,    -1,   119,
      -1,    -1,    -1,    -1,   124,   125,    -1,    -1,    -1,    -1,
     130,    -1,   132,    -1,    -1,    -1,   136,    -1,   138,   139,
     140,   141,    -1,    -1,    -1,   145,    -1,    -1,   148,   149,
     150,    -1,    -1,    -1,   154,    -1,   156,   157,    -1,   159,
     160,   161,    -1,    -1,   164,   165,    -1,   167,   168,   169,
     170,   171,   172,    -1,    -1,   175,   176,   177,    -1,    -1,
     180,   181,    -1,   183,   184,   185,    -1,    -1,   188,    -1,
      -1,    -1,   192,    -1,   194,    -1,   196,    -1,   198,   199,
     200,   201,   202,   203,    -1,   205,    -1,    -1,    -1,   209,
     210,   211,    -1,   213,    -1,    -1,    -1,   217,   218,    -1,
      -1,    -1,   222,   223,   224,   225,    -1,    -1,   228,   229,
     230,    -1,   232,    -1,   234,    -1,    -1,    -1,    -1,   239,
     240,    -1,    -1,    -1,   244,    -1,   246,   247,    -1,   249,
     250,    -1,    -1,    -1,   254,    -1,    -1,   257,   258,   259,
      -1,    -1,   262,    -1,    -1,   265,   266,    -1,    -1,    -1,
      -1,    -1,   272,   273,    -1,   275,    -1,   277,    -1,   279,
     280,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,    -1,   305,   306,   307,   308,    -1,
     310,   311,   312,   313,    -1,   315,   316,    -1,    -1,    -1,
      -1,   321,   322,   323,   324,   325,   326,    -1,    -1,   329,
     330,    -1,   332,    -1,   334,    -1,   336,   337,   338,   339,
     340,   341,   342,   343,   344,    -1,    -1,   347,   348,    -1,
      -1,   351,   352,   353,   354,    -1,    -1,    -1,   358,   359,
      -1,    -1,    -1,    -1,   364,   365,   366,    -1,   368,   369,
     370,   371,    -1,   373,   374,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   383,   384,   385,    -1,    -1,   388,    -1,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,    -1,    -1,   404,   405,   406,    -1,   408,    -1,
     410,   411,   412,   413,   414,    -1,   416,   417,   418,    -1,
      -1,   421,    -1,    -1,    -1,   425,   426,   427,   428,   429,
      -1,    -1,   432,   433,   434,   435,   436,    -1,   438,   439,
      -1,   441,   442,   443,    -1,    -1,   446,    -1,   448,    -1,
     450,   451,    -1,   453,   454,    -1,    -1,    -1,   458,   459,
     460,   461,   462,   463,   464,   465,   466,   467,    -1,   469,
     470,    -1,    -1,    -1,   474,   475,   476,   477,    -1,    -1,
      -1,   481,    -1,    -1,    -1,   485,    -1,   487,   488,   489,
     490,   491,   492,    -1,   494,   495,   496,   497,   498,   499,
      -1,    -1,    -1,    -1,    -1,    -1,   506,   507,    -1,   509,
      -1,    -1,   512,    -1,    -1,   515,   516,   517,    -1,    -1,
     520,   521,    -1,   523,   524,   525,   526,   527,   528,    -1,
      -1,   531,   532,   533,   534,    -1,   536,   537,    -1,   539,
      -1,   541,   542,   543,   544,    -1,    -1,   547,   548,    -1,
     550,   551,   552,   553,    -1,    -1,    -1,    -1,    -1,   559,
     560,   561,    -1,    -1,    -1,   565,   566,   567,   568,    -1,
     570,   571,    -1,   573,   574,    -1,   576,   577,    -1,    -1,
     580,    -1,    -1,   583,    -1,   585,    -1,   587,   588,   589,
      -1,    -1,    -1,    -1,    -1,    -1,   596,    -1,    -1,   599,
      -1,    -1,    -1,   603,   604,   605,   606,   607,   608,    -1,
      -1,    -1,    -1,    -1,    -1,   615,   616,    -1,   618,   619,
     620,    -1,    -1,   623,    -1,    -1,     5,    -1,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      -1,    -1,    21,   643,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    32,    -1,    -1,    -1,    36,    -1,    -1,
      -1,    40,    -1,    -1,    43,    44,    45,    -1,    47,    -1,
      49,    50,    -1,    -1,    53,    -1,    -1,    56,    57,    -1,
      59,    60,    -1,    62,    63,    -1,    65,    66,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    78,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    -1,    93,    94,    95,    96,    97,    -1,
      99,    -1,    -1,   102,    -1,    -1,   105,    -1,    -1,   108,
      -1,   110,    -1,    -1,    -1,   114,   115,   116,    -1,    -1,
     119,    -1,    -1,    -1,    -1,   124,   125,    -1,    -1,    -1,
      -1,   130,    -1,   132,    -1,    -1,    -1,   136,    -1,   138,
     139,   140,   141,    -1,    -1,    -1,   145,    -1,    -1,   148,
     149,   150,    -1,    -1,    -1,   154,    -1,   156,   157,    -1,
     159,   160,   161,    -1,    -1,   164,   165,    -1,   167,   168,
     169,   170,   171,   172,    -1,    -1,   175,   176,   177,    -1,
      -1,   180,   181,    -1,   183,   184,   185,    -1,    -1,   188,
      -1,    -1,    -1,   192,    -1,   194,    -1,   196,    -1,   198,
     199,   200,   201,   202,   203,    -1,   205,    -1,    -1,    -1,
     209,   210,   211,    -1,   213,    -1,    -1,    -1,   217,   218,
      -1,    -1,    -1,   222,   223,   224,   225,    -1,    -1,   228,
     229,   230,    -1,   232,    -1,   234,    -1,    -1,    -1,    -1,
     239,   240,    -1,    -1,    -1,   244,    -1,   246,   247,    -1,
     249,   250,    -1,    -1,    -1,   254,    -1,    -1,   257,   258,
     259,    -1,    -1,   262,    -1,    -1,   265,   266,    -1,    -1,
      -1,    -1,    -1,   272,   273,    -1,   275,    -1,   277,    -1,
     279,   280,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,    -1,   305,   306,   307,   308,
      -1,   310,   311,   312,   313,    -1,   315,   316,    -1,    -1,
      -1,    -1,   321,   322,   323,   324,   325,   326,    -1,    -1,
     329,   330,    -1,   332,    -1,   334,    -1,   336,   337,   338,
     339,   340,   341,   342,   343,   344,    -1,    -1,   347,   348,
      -1,    -1,   351,   352,   353,   354,    -1,    -1,    -1,   358,
     359,    -1,    -1,    -1,    -1,   364,   365,   366,    -1,   368,
     369,   370,   371,    -1,   373,   374,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   383,   384,   385,    -1,    -1,   388,
      -1,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,    -1,    -1,   404,   405,   406,    -1,   408,
      -1,   410,   411,   412,   413,   414,    -1,   416,   417,   418,
      -1,    -1,   421,    -1,    -1,    -1,   425,   426,   427,   428,
     429,    -1,    -1,   432,   433,   434,   435,   436,    -1,   438,
     439,    -1,   441,   442,   443,    -1,    -1,   446,    -1,   448,
      -1,   450,   451,    -1,   453,   454,    -1,    -1,    -1,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,    -1,
     469,   470,    -1,    -1,    -1,   474,   475,   476,   477,    -1,
      -1,    -1,   481,    -1,    -1,    -1,   485,    -1,   487,   488,
     489,   490,   491,   492,    -1,   494,   495,   496,   497,   498,
     499,    -1,    -1,    -1,    -1,    -1,    -1,   506,   507,    -1,
     509,    -1,    -1,   512,    -1,    -1,   515,   516,   517,    -1,
      -1,   520,   521,    -1,   523,   524,   525,   526,   527,   528,
      -1,    -1,   531,   532,   533,   534,    -1,   536,   537,    -1,
     539,    -1,   541,   542,   543,   544,    -1,    -1,   547,   548,
      -1,   550,   551,   552,   553,    -1,    -1,    -1,    -1,    -1,
     559,   560,   561,    -1,    -1,    -1,   565,   566,   567,   568,
      -1,   570,   571,    -1,   573,   574,    -1,   576,   577,    -1,
      -1,   580,    -1,    -1,   583,    -1,   585,    -1,   587,   588,
     589,    -1,    -1,    -1,    -1,    -1,    -1,   596,    -1,    -1,
     599,    -1,    -1,    -1,   603,   604,   605,   606,   607,   608,
      -1,    -1,    -1,    -1,    -1,    -1,   615,   616,    -1,   618,
     619,   620,    -1,    -1,   623,    -1,    -1,     5,    -1,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,    -1,    -1,    21,   643,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    32,    -1,    -1,    -1,    36,    -1,
      -1,    -1,    40,    -1,    -1,    43,    44,    45,    -1,    47,
      -1,    49,    50,    -1,    -1,    53,    -1,    -1,    56,    57,
      -1,    59,    60,    -1,    62,    63,    -1,    65,    66,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      78,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    -1,    90,    91,    -1,    93,    94,    95,    96,    97,
      -1,    99,    -1,    -1,   102,    -1,    -1,   105,    -1,    -1,
     108,    -1,   110,    -1,    -1,    -1,   114,   115,   116,    -1,
      -1,   119,    -1,    -1,    -1,    -1,   124,   125,    -1,    -1,
      -1,    -1,   130,    -1,   132,    -1,    -1,    -1,   136,    -1,
     138,   139,   140,   141,    -1,    -1,    -1,   145,    -1,    -1,
     148,   149,   150,    -1,    -1,    -1,   154,    -1,   156,   157,
      -1,   159,   160,   161,    -1,    -1,   164,   165,    -1,   167,
     168,   169,   170,   171,   172,    -1,    -1,   175,   176,   177,
      -1,    -1,   180,   181,    -1,   183,   184,   185,    -1,    -1,
     188,    -1,    -1,    -1,   192,    -1,   194,    -1,   196,    -1,
     198,   199,   200,   201,   202,   203,    -1,   205,    -1,    -1,
      -1,   209,   210,   211,    -1,   213,    -1,    -1,    -1,   217,
     218,    -1,    -1,    -1,   222,   223,   224,   225,    -1,    -1,
     228,   229,   230,    -1,   232,    -1,   234,    -1,    -1,    -1,
      -1,   239,   240,    -1,    -1,    -1,   244,    -1,   246,   247,
      -1,   249,   250,    -1,    -1,    -1,   254,    -1,    -1,   257,
     258,   259,    -1,    -1,   262,    -1,    -1,   265,   266,    -1,
      -1,    -1,    -1,    -1,   272,   273,    -1,   275,    -1,   277,
      -1,   279,   280,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,    -1,   305,   306,   307,
     308,    -1,   310,   311,   312,   313,    -1,   315,   316,    -1,
      -1,    -1,    -1,   321,   322,   323,   324,   325,   326,    -1,
      -1,   329,   330,    -1,   332,    -1,   334,    -1,   336,   337,
     338,   339,   340,   341,   342,   343,   344,    -1,    -1,   347,
     348,    -1,    -1,   351,   352,   353,   354,    -1,    -1,    -1,
     358,   359,    -1,    -1,    -1,    -1,   364,   365,   366,    -1,
     368,   369,   370,   371,    -1,   373,   374,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   383,   384,   385,    -1,    -1,
     388,    -1,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,    -1,    -1,   404,   405,   406,    -1,
     408,    -1,   410,   411,   412,   413,   414,    -1,   416,   417,
     418,    -1,    -1,   421,    -1,    -1,    -1,   425,   426,   427,
     428,   429,    -1,    -1,   432,   433,   434,   435,   436,    -1,
     438,   439,    -1,   441,   442,   443,    -1,    -1,   446,    -1,
     448,    -1,   450,   451,    -1,   453,   454,    -1,    -1,    -1,
     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
      -1,   469,   470,    -1,    -1,    -1,   474,   475,   476,   477,
      -1,    -1,    -1,   481,    -1,    -1,    -1,   485,    -1,   487,
     488,   489,   490,   491,   492,    -1,   494,   495,   496,   497,
     498,   499,    -1,    -1,    -1,    -1,    -1,    -1,   506,   507,
      -1,   509,    -1,    -1,   512,    -1,    -1,   515,   516,   517,
      -1,    -1,   520,   521,    -1,   523,   524,   525,   526,   527,
     528,    -1,    -1,   531,   532,   533,   534,    -1,   536,   537,
      -1,   539,    -1,   541,   542,   543,   544,    -1,    -1,   547,
     548,    -1,   550,   551,   552,   553,    -1,    -1,    -1,    -1,
      -1,   559,   560,   561,    -1,    -1,    -1,   565,   566,   567,
     568,    -1,   570,   571,    -1,   573,   574,    -1,   576,   577,
      -1,    -1,   580,    -1,    -1,   583,    -1,   585,    -1,   587,
     588,   589,    -1,    -1,    -1,    -1,    -1,    -1,   596,    -1,
      -1,   599,    -1,    -1,    -1,   603,   604,   605,   606,   607,
     608,    -1,    -1,    -1,    -1,    -1,    -1,   615,   616,    -1,
     618,   619,   620,    -1,    -1,   623,    -1,    -1,     5,    -1,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    -1,    -1,    21,   643,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    32,    -1,    -1,    -1,    36,
      -1,    -1,    -1,    40,    -1,    -1,    43,    44,    45,    -1,
      47,    -1,    49,    50,    -1,    -1,    53,    -1,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    -1,    65,    66,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      77,    78,    79,    -1,    81,    82,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    -1,    93,    94,    95,    96,
      97,    -1,    99,    -1,    -1,   102,    -1,    -1,   105,    -1,
      -1,   108,    -1,   110,    -1,    -1,    -1,   114,   115,   116,
      -1,    -1,   119,    -1,    -1,    -1,    -1,   124,   125,    -1,
      -1,    -1,   129,   130,    -1,   132,    -1,    -1,    -1,   136,
      -1,   138,   139,   140,   141,    -1,    -1,    -1,   145,    -1,
      -1,   148,   149,   150,    -1,    -1,    -1,   154,    -1,   156,
     157,    -1,   159,   160,   161,    -1,    -1,   164,   165,    -1,
     167,   168,   169,   170,   171,   172,    -1,    -1,   175,   176,
     177,    -1,    -1,   180,   181,    -1,   183,   184,   185,    -1,
      -1,   188,    -1,    -1,    -1,   192,    -1,   194,    -1,   196,
      -1,   198,   199,   200,   201,   202,   203,    -1,   205,    -1,
      -1,    -1,   209,   210,   211,    -1,   213,    -1,    -1,    -1,
     217,   218,    -1,    -1,    -1,   222,   223,   224,   225,    -1,
      -1,   228,   229,   230,    -1,   232,    -1,   234,    -1,    -1,
      -1,    -1,   239,   240,    -1,    -1,    -1,   244,    -1,   246,
     247,    -1,   249,   250,    -1,    -1,    -1,   254,    -1,    -1,
     257,   258,   259,    -1,    -1,   262,    -1,    -1,   265,   266,
      -1,    -1,    -1,    -1,    -1,   272,   273,    -1,   275,    -1,
     277,    -1,   279,   280,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,    -1,   305,   306,
     307,   308,    -1,   310,   311,   312,   313,    -1,   315,   316,
      -1,    -1,    -1,    -1,   321,   322,   323,   324,   325,   326,
      -1,    -1,   329,   330,    -1,   332,    -1,   334,    -1,   336,
     337,   338,   339,   340,   341,   342,   343,   344,    -1,    -1,
     347,   348,    -1,    -1,   351,   352,   353,   354,    -1,    -1,
      -1,   358,   359,    -1,    -1,    -1,    -1,   364,   365,   366,
      -1,   368,   369,   370,   371,    -1,   373,   374,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   383,   384,   385,    -1,
      -1,   388,    -1,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,    -1,    -1,   404,   405,   406,
      -1,   408,    -1,   410,   411,   412,   413,   414,    -1,   416,
     417,   418,    -1,    -1,   421,    -1,    -1,    -1,   425,   426,
     427,   428,   429,    -1,    -1,   432,   433,   434,   435,   436,
      -1,   438,   439,    -1,   441,   442,   443,    -1,    -1,   446,
      -1,   448,    -1,   450,   451,    -1,   453,   454,    -1,    -1,
      -1,   458,   459,   460,   461,   462,   463,   464,   465,   466,
     467,    -1,   469,   470,    -1,    -1,    -1,   474,   475,   476,
     477,    -1,    -1,    -1,   481,    -1,    -1,    -1,   485,    -1,
     487,   488,   489,   490,   491,   492,    -1,   494,   495,   496,
     497,   498,   499,    -1,    -1,    -1,    -1,    -1,    -1,   506,
     507,    -1,   509,    -1,    -1,   512,    -1,    -1,   515,   516,
     517,    -1,    -1,   520,   521,    -1,   523,   524,   525,   526,
     527,   528,    -1,    -1,   531,   532,   533,   534,    -1,   536,
     537,    -1,   539,    -1,   541,   542,   543,   544,    -1,    -1,
     547,   548,    -1,   550,   551,   552,   553,    -1,    -1,    -1,
      -1,    -1,   559,   560,   561,    -1,    -1,    -1,   565,   566,
     567,   568,    -1,   570,   571,    -1,   573,   574,    -1,   576,
     577,    -1,    -1,   580,    -1,    -1,   583,    -1,   585,    -1,
     587,   588,   589,    -1,    -1,    -1,    -1,    -1,    -1,   596,
      -1,    -1,   599,    -1,    -1,    -1,   603,   604,   605,   606,
     607,   608,    -1,    -1,    -1,    -1,    -1,    -1,   615,   616,
      -1,   618,   619,   620,    -1,    -1,   623,    -1,     5,    -1,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    -1,    -1,    21,   642,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    32,    -1,    -1,    -1,    36,
      -1,    -1,    -1,    40,    -1,    -1,    43,    44,    45,    -1,
      47,    -1,    49,    50,    -1,    -1,    53,    -1,    -1,    56,
      57,    -1,    59,    60,    -1,    62,    63,    -1,    65,    66,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      77,    78,    79,    -1,    81,    82,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    -1,    93,    94,    95,    96,
      97,    -1,    99,    -1,    -1,   102,    -1,    -1,   105,    -1,
      -1,   108,    -1,   110,    -1,    -1,    -1,   114,   115,   116,
      -1,    -1,   119,    -1,    -1,    -1,    -1,   124,   125,    -1,
      -1,    -1,    -1,   130,    -1,   132,    -1,    -1,    -1,   136,
      -1,   138,   139,   140,   141,    -1,    -1,    -1,   145,    -1,
      -1,   148,   149,   150,    -1,    -1,    -1,   154,    -1,   156,
     157,    -1,   159,   160,   161,    -1,    -1,   164,   165,    -1,
     167,   168,   169,   170,   171,   172,    -1,    -1,   175,   176,
     177,    -1,    -1,   180,   181,    -1,   183,   184,   185,    -1,
      -1,   188,    -1,    -1,    -1,   192,    -1,   194,    -1,   196,
      -1,   198,   199,   200,   201,   202,   203,    -1,   205,    -1,
      -1,    -1,   209,   210,   211,    -1,   213,    -1,    -1,    -1,
     217,   218,    -1,    -1,    -1,   222,   223,   224,   225,    -1,
      -1,   228,   229,   230,    -1,   232,    -1,   234,    -1,    -1,
      -1,    -1,   239,   240,    -1,    -1,    -1,   244,    -1,   246,
     247,    -1,   249,   250,    -1,    -1,    -1,   254,    -1,    -1,
     257,   258,   259,    -1,    -1,   262,    -1,    -1,   265,   266,
     267,    -1,    -1,    -1,    -1,   272,   273,    -1,   275,    -1,
     277,    -1,   279,   280,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,    -1,   305,   306,
     307,   308,    -1,   310,   311,   312,   313,    -1,   315,   316,
      -1,    -1,    -1,    -1,   321,   322,   323,   324,   325,   326,
      -1,    -1,   329,   330,    -1,   332,    -1,   334,    -1,   336,
     337,   338,   339,   340,   341,   342,   343,   344,    -1,    -1,
     347,   348,    -1,    -1,   351,   352,   353,   354,    -1,    -1,
      -1,   358,   359,    -1,    -1,    -1,    -1,   364,   365,   366,
      -1,   368,   369,   370,   371,    -1,   373,   374,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   383,   384,   385,    -1,
      -1,   388,    -1,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,    -1,    -1,   404,   405,   406,
      -1,   408,    -1,   410,   411,   412,   413,   414,    -1,   416,
     417,   418,    -1,    -1,   421,    -1,    -1,    -1,   425,   426,
     427,   428,   429,    -1,    -1,   432,   433,   434,   435,   436,
      -1,   438,   439,    -1,   441,   442,   443,    -1,    -1,   446,
      -1,   448,    -1,   450,   451,    -1,   453,   454,    -1,    -1,
      -1,   458,   459,   460,   461,   462,   463,   464,   465,   466,
     467,    -1,   469,   470,    -1,    -1,    -1,   474,   475,   476,
     477,    -1,    -1,    -1,   481,    -1,    -1,    -1,   485,    -1,
     487,   488,   489,   490,   491,   492,    -1,   494,   495,   496,
     497,   498,   499,    -1,    -1,    -1,    -1,    -1,    -1,   506,
     507,    -1,   509,    -1,    -1,   512,    -1,    -1,   515,   516,
     517,    -1,    -1,   520,   521,    -1,   523,   524,   525,   526,
     527,   528,    -1,    -1,   531,   532,   533,   534,    -1,   536,
     537,    -1,   539,    -1,   541,   542,   543,   544,    -1,   546,
     547,   548,    -1,   550,   551,   552,   553,    -1,    -1,    -1,
      -1,    -1,   559,   560,   561,    -1,    -1,    -1,   565,   566,
     567,   568,    -1,   570,   571,    -1,   573,   574,    -1,   576,
     577,    -1,    -1,   580,    -1,    -1,   583,    -1,   585,    -1,
     587,   588,   589,    -1,    -1,    -1,    -1,    -1,    -1,   596,
      -1,    -1,   599,    -1,    -1,    -1,   603,   604,   605,   606,
     607,   608,    -1,    -1,    -1,    -1,    -1,    -1,   615,   616,
      -1,   618,   619,   620,    -1,    -1,   623,    -1,     5,    -1,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    -1,    -1,    21,   642,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    32,    -1,    -1,    -1,    36,
      -1,    -1,    -1,    40,    -1,    -1,    43,    44,    45,    -1,
      47,    -1,    49,    50,    -1,    -1,    53,    -1,    -1,    56,
      57,    -1,    59,    60,    -1,    62,    63,    -1,    65,    66,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      77,    78,    79,    -1,    81,    82,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    -1,    93,    94,    95,    96,
      97,    -1,    99,    -1,    -1,   102,    -1,    -1,   105,    -1,
      -1,   108,    -1,   110,    -1,    -1,    -1,   114,   115,   116,
      -1,    -1,   119,    -1,    -1,    -1,    -1,   124,   125,    -1,
      -1,    -1,    -1,   130,    -1,   132,    -1,    -1,    -1,   136,
      -1,   138,   139,   140,   141,    -1,    -1,    -1,   145,    -1,
      -1,   148,   149,   150,    -1,    -1,    -1,   154,    -1,   156,
     157,    -1,   159,   160,   161,    -1,    -1,   164,   165,    -1,
     167,   168,   169,   170,   171,   172,    -1,    -1,   175,   176,
     177,    -1,    -1,   180,   181,    -1,   183,   184,   185,    -1,
      -1,   188,    -1,    -1,    -1,   192,    -1,   194,    -1,   196,
      -1,   198,   199,   200,   201,   202,   203,    -1,   205,    -1,
      -1,    -1,   209,   210,   211,    -1,   213,    -1,    -1,    -1,
     217,   218,    -1,    -1,    -1,   222,   223,   224,   225,    -1,
      -1,   228,   229,   230,    -1,   232,    -1,   234,    -1,    -1,
      -1,    -1,   239,   240,    -1,    -1,    -1,   244,    -1,   246,
     247,    -1,   249,   250,    -1,    -1,    -1,   254,    -1,    -1,
     257,   258,   259,    -1,    -1,   262,    -1,    -1,   265,   266,
     267,    -1,    -1,    -1,    -1,   272,   273,    -1,   275,    -1,
     277,    -1,   279,   280,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,    -1,   305,   306,
     307,   308,    -1,   310,   311,   312,   313,    -1,   315,   316,
      -1,    -1,    -1,    -1,   321,   322,   323,   324,   325,   326,
      -1,    -1,   329,   330,    -1,   332,    -1,   334,    -1,   336,
     337,   338,   339,   340,   341,   342,   343,   344,    -1,    -1,
     347,   348,    -1,    -1,   351,   352,   353,   354,    -1,    -1,
      -1,   358,   359,    -1,    -1,    -1,    -1,   364,   365,   366,
      -1,   368,   369,   370,   371,    -1,   373,   374,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   383,   384,   385,    -1,
      -1,   388,    -1,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,    -1,    -1,   404,   405,   406,
      -1,   408,    -1,   410,   411,   412,   413,   414,    -1,   416,
     417,   418,    -1,    -1,   421,    -1,    -1,    -1,   425,   426,
     427,   428,   429,    -1,    -1,   432,   433,   434,   435,   436,
      -1,   438,   439,    -1,   441,   442,   443,    -1,    -1,   446,
      -1,   448,    -1,   450,   451,    -1,   453,   454,    -1,    -1,
      -1,   458,   459,   460,   461,   462,   463,   464,   465,   466,
     467,    -1,   469,   470,    -1,    -1,    -1,   474,   475,   476,
     477,    -1,    -1,    -1,   481,    -1,    -1,    -1,   485,    -1,
     487,   488,   489,   490,   491,   492,    -1,   494,   495,   496,
     497,   498,   499,    -1,    -1,    -1,    -1,    -1,    -1,   506,
     507,    -1,   509,    -1,    -1,   512,    -1,    -1,   515,   516,
     517,    -1,    -1,   520,   521,    -1,   523,   524,   525,   526,
     527,   528,    -1,    -1,   531,   532,   533,   534,    -1,   536,
     537,    -1,   539,    -1,   541,   542,   543,   544,    -1,   546,
     547,   548,    -1,   550,   551,   552,   553,    -1,    -1,    -1,
      -1,    -1,   559,   560,   561,    -1,    -1,    -1,   565,   566,
     567,   568,    -1,   570,   571,    -1,   573,   574,    -1,   576,
     577,    -1,    -1,   580,    -1,    -1,   583,    -1,   585,    -1,
     587,   588,   589,    -1,    -1,    -1,    -1,    -1,    -1,   596,
      -1,    -1,   599,    -1,    -1,    -1,   603,   604,   605,   606,
     607,   608,    -1,    -1,    -1,    -1,    -1,    -1,   615,   616,
      -1,   618,   619,   620,    -1,    -1,   623,    -1,     5,    -1,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    -1,    -1,    21,   642,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    32,    -1,    -1,    -1,    36,
      -1,    -1,    -1,    40,    -1,    -1,    43,    44,    45,    -1,
      47,    -1,    49,    50,    -1,    -1,    53,    -1,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    -1,    65,    66,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      77,    78,    79,    -1,    81,    82,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    -1,    93,    94,    95,    96,
      97,    -1,    99,    -1,    -1,   102,    -1,    -1,   105,    -1,
      -1,   108,    -1,   110,    -1,    -1,    -1,   114,   115,   116,
      -1,    -1,   119,    -1,    -1,    -1,    -1,   124,   125,    -1,
      -1,    -1,   129,   130,    -1,   132,    -1,    -1,    -1,   136,
      -1,   138,   139,   140,   141,    -1,    -1,    -1,   145,    -1,
      -1,   148,   149,   150,    -1,    -1,    -1,   154,    -1,   156,
     157,    -1,   159,   160,   161,    -1,    -1,   164,   165,    -1,
     167,   168,   169,   170,   171,   172,    -1,    -1,   175,   176,
     177,    -1,    -1,   180,   181,    -1,   183,   184,   185,    -1,
      -1,   188,    -1,    -1,    -1,   192,    -1,   194,    -1,   196,
      -1,   198,   199,   200,   201,   202,   203,    -1,   205,    -1,
      -1,    -1,   209,   210,   211,    -1,   213,    -1,    -1,    -1,
     217,   218,    -1,    -1,    -1,   222,   223,   224,   225,    -1,
      -1,   228,   229,   230,    -1,   232,    -1,   234,    -1,    -1,
      -1,    -1,   239,   240,    -1,    -1,    -1,   244,    -1,   246,
     247,    -1,   249,   250,    -1,    -1,    -1,   254,    -1,    -1,
     257,   258,   259,    -1,    -1,   262,    -1,    -1,   265,   266,
      -1,    -1,    -1,    -1,    -1,   272,   273,    -1,   275,    -1,
     277,    -1,   279,   280,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,    -1,   305,   306,
     307,   308,    -1,   310,   311,   312,   313,    -1,   315,   316,
      -1,    -1,    -1,    -1,   321,   322,   323,   324,   325,   326,
      -1,    -1,   329,   330,    -1,   332,    -1,   334,    -1,   336,
     337,   338,   339,   340,   341,   342,   343,   344,    -1,    -1,
     347,   348,    -1,    -1,   351,   352,   353,   354,    -1,    -1,
      -1,   358,   359,    -1,    -1,    -1,    -1,   364,   365,   366,
      -1,   368,   369,   370,   371,    -1,   373,   374,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   383,   384,   385,    -1,
      -1,   388,    -1,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,    -1,    -1,   404,   405,   406,
      -1,   408,    -1,   410,   411,   412,   413,   414,    -1,   416,
     417,   418,    -1,    -1,   421,    -1,    -1,    -1,   425,   426,
     427,   428,   429,    -1,    -1,   432,   433,   434,   435,   436,
      -1,   438,   439,    -1,   441,   442,   443,    -1,    -1,   446,
      -1,   448,    -1,   450,   451,    -1,   453,   454,    -1,    -1,
      -1,   458,   459,   460,   461,   462,   463,   464,   465,   466,
     467,    -1,   469,   470,    -1,    -1,    -1,   474,   475,   476,
     477,    -1,    -1,    -1,   481,    -1,    -1,    -1,   485,    -1,
     487,   488,   489,   490,   491,   492,    -1,   494,   495,   496,
     497,   498,   499,    -1,    -1,    -1,    -1,    -1,    -1,   506,
     507,    -1,   509,    -1,    -1,   512,    -1,    -1,   515,   516,
     517,    -1,    -1,   520,   521,    -1,   523,   524,   525,   526,
     527,   528,    -1,    -1,   531,   532,   533,   534,    -1,   536,
     537,    -1,   539,    -1,   541,   542,   543,   544,    -1,    -1,
     547,   548,    -1,   550,   551,   552,   553,    -1,    -1,    -1,
      -1,    -1,   559,   560,   561,    -1,    -1,    -1,   565,   566,
     567,   568,    -1,   570,   571,    -1,   573,   574,    -1,   576,
     577,    -1,    -1,   580,    -1,    -1,   583,    -1,   585,    -1,
     587,   588,   589,    -1,    -1,    -1,    -1,    -1,    -1,   596,
      -1,    -1,   599,    -1,    -1,    -1,   603,   604,   605,   606,
     607,   608,    -1,    -1,    -1,    -1,    -1,    -1,   615,   616,
      -1,   618,   619,   620,    -1,    -1,   623,    -1,     5,    -1,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    -1,    -1,    21,   642,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    32,    -1,    -1,    -1,    36,
      -1,    -1,    -1,    40,    -1,    -1,    43,    44,    45,    -1,
      47,    -1,    49,    50,    -1,    -1,    53,    -1,    -1,    56,
      57,    -1,    59,    60,    -1,    62,    63,    -1,    65,    66,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      77,    78,    79,    -1,    81,    82,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    -1,    93,    94,    95,    96,
      97,    -1,    99,    -1,    -1,   102,    -1,    -1,   105,    -1,
      -1,   108,    -1,   110,    -1,    -1,    -1,   114,   115,   116,
      -1,    -1,   119,    -1,    -1,    -1,    -1,   124,   125,    -1,
      -1,    -1,    -1,   130,    -1,   132,    -1,    -1,    -1,   136,
      -1,   138,   139,   140,   141,    -1,    -1,    -1,   145,    -1,
      -1,   148,   149,   150,    -1,    -1,    -1,   154,    -1,   156,
     157,    -1,   159,   160,   161,    -1,    -1,   164,   165,    -1,
     167,   168,   169,   170,   171,   172,    -1,    -1,   175,   176,
     177,    -1,    -1,   180,   181,    -1,   183,   184,   185,    -1,
      -1,   188,    -1,    -1,    -1,   192,    -1,   194,    -1,   196,
      -1,   198,   199,   200,   201,   202,   203,    -1,   205,    -1,
      -1,    -1,   209,   210,   211,    -1,   213,    -1,    -1,    -1,
     217,   218,    -1,    -1,    -1,   222,   223,   224,   225,    -1,
      -1,   228,   229,   230,    -1,   232,    -1,   234,    -1,    -1,
      -1,    -1,   239,   240,    -1,    -1,    -1,   244,    -1,   246,
     247,    -1,   249,   250,    -1,    -1,    -1,   254,    -1,    -1,
     257,   258,   259,    -1,    -1,   262,    -1,    -1,   265,   266,
     267,    -1,    -1,    -1,    -1,   272,   273,    -1,   275,    -1,
     277,    -1,   279,   280,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,    -1,   305,   306,
     307,   308,    -1,   310,   311,   312,   313,    -1,   315,   316,
      -1,    -1,    -1,    -1,   321,   322,   323,   324,   325,   326,
      -1,    -1,   329,   330,    -1,   332,    -1,   334,    -1,   336,
     337,   338,   339,   340,   341,   342,   343,   344,    -1,    -1,
     347,   348,    -1,    -1,   351,   352,   353,   354,    -1,    -1,
      -1,   358,   359,    -1,    -1,    -1,    -1,   364,   365,   366,
      -1,   368,   369,   370,   371,    -1,   373,   374,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   383,   384,   385,    -1,
      -1,   388,    -1,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,    -1,    -1,   404,   405,   406,
      -1,   408,    -1,   410,   411,   412,   413,   414,    -1,   416,
     417,   418,    -1,    -1,   421,    -1,    -1,    -1,   425,   426,
     427,   428,   429,    -1,    -1,   432,   433,   434,   435,   436,
      -1,   438,   439,    -1,   441,   442,   443,    -1,    -1,   446,
      -1,   448,    -1,   450,   451,    -1,   453,   454,    -1,    -1,
      -1,   458,   459,   460,   461,   462,   463,   464,   465,   466,
     467,    -1,   469,   470,    -1,    -1,    -1,   474,   475,   476,
     477,    -1,    -1,    -1,   481,    -1,    -1,    -1,   485,    -1,
     487,   488,   489,   490,   491,   492,    -1,   494,   495,   496,
     497,   498,   499,    -1,    -1,    -1,    -1,    -1,    -1,   506,
     507,    -1,   509,    -1,    -1,   512,    -1,    -1,   515,   516,
     517,    -1,    -1,   520,   521,    -1,   523,   524,   525,   526,
     527,   528,    -1,    -1,   531,   532,   533,   534,    -1,   536,
     537,    -1,   539,    -1,   541,   542,   543,   544,    -1,   546,
     547,   548,    -1,   550,   551,   552,   553,    -1,    -1,    -1,
      -1,    -1,   559,   560,   561,    -1,    -1,    -1,   565,   566,
     567,   568,    -1,   570,   571,    -1,   573,   574,    -1,   576,
     577,    -1,    -1,   580,    -1,    -1,   583,    -1,   585,    -1,
     587,   588,   589,    -1,    -1,    -1,    -1,    -1,    -1,   596,
      -1,    -1,   599,    -1,    -1,    -1,   603,   604,   605,   606,
     607,   608,    -1,    -1,    -1,    -1,    -1,    -1,   615,   616,
      -1,   618,   619,   620,    -1,    -1,   623,    -1,     5,    -1,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    -1,    -1,    -1,   642,    23,    24,    25,    26,
      27,    28,    29,    -1,    -1,    32,    -1,    -1,    -1,    36,
      -1,    -1,    -1,    40,    -1,    -1,    43,    44,    45,    -1,
      47,    -1,    -1,    -1,    -1,    -1,    53,    54,    -1,    56,
      57,    -1,    59,    -1,    -1,    -1,    -1,    -1,    65,    66,
      67,    68,    69,    70,    71,    -1,    73,    74,    -1,    -1,
      -1,    -1,    -1,    -1,    81,    -1,    83,    -1,    85,    86,
      87,    88,    -1,    90,    91,    -1,    93,    94,    95,    -1,
      97,    -1,    99,    -1,    -1,   102,    -1,    -1,   105,    -1,
      -1,   108,    -1,   110,    -1,    -1,    -1,   114,   115,   116,
      -1,    -1,   119,    -1,    -1,    -1,    -1,   124,    -1,    -1,
      -1,    -1,    -1,   130,    -1,   132,    -1,    -1,    -1,   136,
      -1,   138,   139,   140,   141,    -1,    -1,    -1,    -1,    -1,
      -1,   148,   149,   150,    -1,    -1,    -1,   154,    -1,    -1,
     157,    -1,   159,   160,   161,    -1,    -1,   164,   165,    -1,
     167,   168,   169,   170,    -1,    -1,    -1,    -1,   175,   176,
     177,    -1,    -1,   180,   181,   182,   183,   184,   185,    -1,
      -1,    -1,    -1,    -1,    -1,   192,    -1,   194,    -1,   196,
      -1,   198,   199,   200,   201,   202,   203,    -1,   205,    -1,
      -1,    -1,    -1,   210,   211,    -1,    -1,    -1,    -1,    -1,
      -1,   218,    -1,    -1,    -1,   222,   223,   224,   225,   226,
      -1,   228,   229,   230,    -1,   232,    -1,   234,    -1,    -1,
      -1,    -1,   239,    -1,    -1,    -1,    -1,   244,    -1,   246,
     247,    -1,   249,   250,   251,    -1,    -1,   254,    -1,    -1,
      -1,   258,   259,    -1,    -1,   262,   263,    -1,   265,   266,
      -1,    -1,    -1,    -1,    -1,   272,   273,    -1,   275,    -1,
     277,    -1,   279,   280,    -1,    -1,    -1,    -1,   285,    -1,
      -1,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,    -1,   305,   306,
     307,   308,    -1,   310,   311,   312,   313,    -1,   315,   316,
      -1,    -1,    -1,    -1,   321,   322,   323,   324,   325,   326,
      -1,    -1,   329,   330,    -1,   332,    -1,   334,    -1,   336,
     337,   338,   339,   340,   341,   342,   343,   344,    -1,    -1,
     347,   348,    -1,    -1,   351,   352,   353,   354,    -1,    -1,
      -1,    -1,   359,    -1,    -1,    -1,    -1,   364,   365,   366,
      -1,   368,   369,   370,   371,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   384,   385,    -1,
      -1,    -1,    -1,   390,   391,   392,    -1,   394,   395,   396,
     397,   398,   399,   400,    -1,    -1,    -1,    -1,   405,   406,
      -1,   408,    -1,   410,   411,   412,   413,   414,    -1,   416,
     417,   418,    -1,    -1,   421,    -1,    -1,    -1,   425,   426,
     427,   428,   429,    -1,    -1,   432,   433,   434,   435,   436,
      -1,   438,    -1,    -1,   441,    -1,   443,   444,    -1,   446,
      -1,    -1,    -1,   450,    -1,    -1,   453,   454,   455,    -1,
      -1,    -1,   459,   460,   461,   462,   463,   464,    -1,   466,
     467,    -1,   469,    -1,    -1,    -1,    -1,   474,   475,   476,
      -1,    -1,    -1,    -1,   481,    -1,    -1,    -1,   485,    -1,
      -1,   488,    -1,    -1,   491,   492,    -1,   494,    -1,   496,
      -1,   498,   499,    -1,    -1,    -1,    -1,    -1,    -1,   506,
     507,    -1,   509,    -1,    -1,   512,    -1,    -1,   515,    -1,
     517,    -1,    -1,    -1,   521,    -1,   523,   524,   525,   526,
     527,   528,    -1,    -1,   531,   532,   533,   534,    -1,   536,
     537,    -1,   539,    -1,   541,   542,   543,   544,    -1,    -1,
     547,   548,    -1,   550,   551,   552,   553,    -1,    -1,    -1,
      -1,    -1,   559,   560,   561,    -1,    -1,    -1,    -1,   566,
     567,   568,    -1,   570,   571,    -1,   573,   574,    -1,    -1,
      -1,    -1,    -1,   580,    -1,    -1,   583,    -1,    -1,    -1,
     587,   588,   589,    -1,    -1,    -1,    -1,    -1,    -1,   596,
      -1,    -1,   599,    -1,    -1,    -1,   603,   604,   605,   606,
     607,   608,    -1,    -1,   611,    -1,    -1,    -1,   615,    -1,
      -1,   618,    -1,   620,    -1,     5,   623,     7,     8,     9,
      10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,
     637,    21,    -1,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    -1,    -1,    -1,    36,    -1,    -1,    -1,
      40,    -1,    -1,    43,    44,    45,    -1,    47,    -1,    49,
      50,    -1,    -1,    53,    -1,    -1,    56,    57,    -1,    59,
      60,    -1,    62,    63,    -1,    65,    66,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    77,    78,    79,
      -1,    81,    82,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    -1,    93,    94,    95,    96,    97,    -1,    99,
      -1,    -1,   102,    -1,    -1,   105,    -1,   107,   108,    -1,
     110,    -1,    -1,    -1,   114,   115,   116,    -1,    -1,   119,
      -1,    -1,    -1,    -1,   124,   125,    -1,    -1,    -1,    -1,
     130,    -1,   132,    -1,    -1,    -1,   136,    -1,   138,   139,
     140,   141,    -1,    -1,    -1,   145,    -1,    -1,   148,   149,
     150,    -1,    -1,    -1,   154,    -1,   156,   157,    -1,   159,
     160,   161,    -1,    -1,   164,   165,    -1,   167,   168,   169,
     170,   171,   172,    -1,    -1,   175,   176,   177,    -1,    -1,
     180,   181,    -1,   183,   184,   185,    -1,    -1,   188,    -1,
      -1,    -1,   192,    -1,   194,    -1,   196,    -1,   198,   199,
     200,   201,   202,   203,    -1,   205,    -1,    -1,    -1,   209,
     210,   211,    -1,   213,    -1,    -1,    -1,   217,   218,    -1,
      -1,    -1,   222,   223,   224,   225,    -1,    -1,   228,   229,
     230,    -1,   232,    -1,   234,    -1,    -1,    -1,    -1,   239,
     240,    -1,    -1,    -1,   244,    -1,   246,   247,    -1,   249,
     250,    -1,    -1,    -1,   254,    -1,    -1,   257,   258,   259,
      -1,    -1,   262,    -1,    -1,   265,   266,   267,    -1,    -1,
      -1,    -1,   272,   273,    -1,   275,    -1,   277,    -1,   279,
     280,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,    -1,   305,   306,   307,   308,    -1,
     310,   311,   312,   313,    -1,   315,   316,    -1,    -1,    -1,
      -1,   321,   322,   323,   324,   325,   326,    -1,    -1,   329,
     330,    -1,   332,    -1,   334,    -1,   336,   337,   338,   339,
     340,   341,   342,   343,   344,    -1,    -1,   347,   348,    -1,
      -1,   351,   352,   353,   354,    -1,    -1,    -1,   358,   359,
      -1,    -1,    -1,    -1,   364,   365,   366,    -1,   368,   369,
     370,   371,    -1,   373,   374,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   383,   384,   385,    -1,    -1,   388,    -1,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,    -1,    -1,   404,   405,   406,    -1,   408,    -1,
     410,   411,   412,   413,   414,    -1,   416,   417,   418,    -1,
      -1,   421,    -1,    -1,    -1,   425,   426,   427,   428,   429,
      -1,    -1,   432,   433,   434,   435,   436,    -1,   438,   439,
      -1,   441,   442,   443,    -1,    -1,   446,    -1,   448,    -1,
     450,   451,    -1,   453,   454,    -1,    -1,    -1,   458,   459,
     460,   461,   462,   463,   464,   465,   466,   467,    -1,   469,
     470,    -1,    -1,    -1,   474,   475,   476,   477,    -1,    -1,
      -1,   481,    -1,    -1,    -1,   485,    -1,   487,   488,   489,
     490,   491,   492,    -1,   494,   495,   496,   497,   498,   499,
      -1,    -1,    -1,    -1,    -1,    -1,   506,   507,    -1,   509,
      -1,    -1,   512,    -1,    -1,   515,   516,   517,    -1,    -1,
     520,   521,    -1,   523,   524,   525,   526,   527,   528,    -1,
      -1,   531,   532,   533,   534,    -1,   536,   537,    -1,   539,
      -1,   541,   542,   543,   544,    -1,   546,   547,   548,    -1,
     550,   551,   552,   553,    -1,    -1,    -1,    -1,    -1,   559,
     560,   561,    -1,    -1,    -1,   565,   566,   567,   568,    -1,
     570,   571,    -1,   573,   574,    -1,   576,   577,    -1,    -1,
     580,    -1,    -1,   583,    -1,   585,    -1,   587,   588,   589,
      -1,    -1,    -1,    -1,    -1,    -1,   596,    -1,    -1,   599,
      -1,    -1,    -1,   603,   604,   605,   606,   607,   608,    -1,
      -1,    -1,    -1,    -1,    -1,   615,   616,    -1,   618,   619,
     620,    -1,    -1,   623,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,   635,    -1,    18,    -1,    -1,
      21,    -1,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    32,    -1,    -1,    -1,    36,    -1,    -1,    -1,    40,
      -1,    -1,    43,    44,    45,    -1,    47,    -1,    49,    50,
      -1,    -1,    53,    -1,    -1,    56,    57,    -1,    59,    60,
      -1,    62,    63,    -1,    65,    66,    67,    68,    69,    70,
      71,    -1,    73,    74,    75,    76,    77,    78,    79,    -1,
      81,    82,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    -1,    93,    94,    95,    96,    97,    -1,    99,    -1,
      -1,   102,    -1,    -1,   105,    -1,    -1,   108,    -1,   110,
      -1,    -1,    -1,   114,   115,   116,    -1,    -1,   119,    -1,
      -1,    -1,    -1,   124,   125,    -1,    -1,    -1,    -1,   130,
      -1,   132,    -1,    -1,    -1,   136,    -1,   138,   139,   140,
     141,    -1,    -1,    -1,   145,    -1,    -1,   148,   149,   150,
      -1,    -1,    -1,   154,    -1,   156,   157,    -1,   159,   160,
     161,    -1,    -1,   164,   165,    -1,   167,   168,   169,   170,
     171,   172,    -1,    -1,   175,   176,   177,    -1,    -1,   180,
     181,    -1,   183,   184,   185,    -1,    -1,   188,    -1,    -1,
      -1,   192,    -1,   194,    -1,   196,    -1,   198,   199,   200,
     201,   202,   203,    -1,   205,    -1,    -1,    -1,   209,   210,
     211,    -1,   213,    -1,    -1,    -1,   217,   218,    -1,    -1,
      -1,   222,   223,   224,   225,    -1,    -1,   228,   229,   230,
      -1,   232,    -1,   234,    -1,    -1,    -1,    -1,   239,   240,
      -1,    -1,    -1,   244,    -1,   246,   247,    -1,   249,   250,
      -1,    -1,    -1,   254,    -1,    -1,   257,   258,   259,    -1,
      -1,   262,    -1,    -1,   265,   266,    -1,    -1,    -1,    -1,
      -1,   272,   273,    -1,   275,    -1,   277,    -1,   279,   280,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,    -1,   305,   306,   307,   308,    -1,   310,
     311,   312,   313,    -1,   315,   316,    -1,    -1,    -1,    -1,
     321,   322,   323,   324,   325,   326,    -1,    -1,   329,   330,
      -1,   332,    -1,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,   344,    -1,    -1,   347,   348,    -1,    -1,
     351,   352,   353,   354,    -1,    -1,    -1,   358,   359,    -1,
      -1,    -1,    -1,   364,   365,   366,    -1,   368,   369,   370,
     371,    -1,   373,   374,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   383,   384,   385,    -1,    -1,   388,    -1,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,    -1,    -1,   404,   405,   406,    -1,   408,    -1,   410,
     411,   412,   413,   414,    -1,   416,   417,   418,    -1,    -1,
     421,    -1,    -1,    -1,   425,   426,   427,   428,   429,    -1,
      -1,   432,   433,   434,   435,   436,    -1,   438,   439,    -1,
     441,   442,   443,    -1,    -1,   446,    -1,   448,    -1,   450,
     451,    -1,   453,   454,    -1,    -1,    -1,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   467,    -1,   469,   470,
      -1,    -1,    -1,   474,   475,   476,   477,    -1,    -1,    -1,
     481,    -1,    -1,    -1,   485,    -1,   487,   488,   489,   490,
     491,   492,    -1,   494,   495,   496,   497,   498,   499,    -1,
      -1,    -1,    -1,    -1,    -1,   506,   507,    -1,   509,    -1,
      -1,   512,    -1,    -1,   515,   516,   517,    -1,    -1,   520,
     521,    -1,   523,   524,   525,   526,   527,   528,    -1,    -1,
     531,   532,   533,   534,    -1,   536,   537,    -1,   539,    -1,
     541,   542,   543,   544,    -1,    -1,   547,   548,    -1,   550,
     551,   552,   553,    -1,    -1,    -1,    -1,    -1,   559,   560,
     561,    -1,    -1,    -1,   565,   566,   567,   568,    -1,   570,
     571,    -1,   573,   574,    -1,   576,   577,    -1,    -1,   580,
      -1,    -1,   583,    -1,   585,    -1,   587,   588,   589,    -1,
      -1,    -1,    -1,    -1,    -1,   596,    -1,    -1,   599,    -1,
      -1,    -1,   603,   604,   605,   606,   607,   608,    -1,    -1,
      -1,    -1,    -1,    -1,   615,   616,    -1,   618,   619,   620,
      -1,     5,   623,     7,     8,     9,    10,    11,    -1,   630,
      14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    -1,
      -1,    -1,    36,    -1,    -1,    -1,    40,    -1,    -1,    43,
      44,    45,    -1,    47,    -1,    49,    50,    -1,    -1,    53,
      -1,    -1,    56,    57,    -1,    59,    60,    -1,    62,    63,
      -1,    65,    66,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    78,    79,    -1,    81,    82,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    -1,    93,
      94,    95,    96,    97,    -1,    99,    -1,    -1,   102,    -1,
      -1,   105,    -1,    -1,   108,    -1,   110,    -1,    -1,    -1,
     114,   115,   116,    -1,    -1,   119,    -1,    -1,    -1,    -1,
     124,   125,    -1,    -1,    -1,    -1,   130,    -1,   132,    -1,
      -1,    -1,   136,    -1,   138,   139,   140,   141,    -1,    -1,
      -1,   145,    -1,    -1,   148,   149,   150,    -1,    -1,    -1,
     154,    -1,   156,   157,    -1,   159,   160,   161,    -1,    -1,
     164,   165,    -1,   167,   168,   169,   170,   171,   172,    -1,
      -1,   175,   176,   177,    -1,    -1,   180,   181,    -1,   183,
     184,   185,    -1,    -1,   188,    -1,    -1,    -1,   192,    -1,
     194,    -1,   196,    -1,   198,   199,   200,   201,   202,   203,
      -1,   205,    -1,    -1,    -1,   209,   210,   211,    -1,   213,
      -1,    -1,    -1,   217,   218,    -1,    -1,    -1,   222,   223,
     224,   225,    -1,    -1,   228,   229,   230,    -1,   232,    -1,
     234,    -1,    -1,    -1,    -1,   239,   240,    -1,    -1,    -1,
     244,    -1,   246,   247,    -1,   249,   250,    -1,    -1,    -1,
     254,    -1,    -1,   257,   258,   259,    -1,    -1,   262,    -1,
      -1,   265,   266,    -1,    -1,    -1,    -1,    -1,   272,   273,
      -1,   275,    -1,   277,    -1,   279,   280,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
      -1,   305,   306,   307,   308,    -1,   310,   311,   312,   313,
      -1,   315,   316,    -1,    -1,    -1,    -1,   321,   322,   323,
     324,   325,   326,    -1,    -1,   329,   330,    -1,   332,    -1,
     334,    -1,   336,   337,   338,   339,   340,   341,   342,   343,
     344,    -1,    -1,   347,   348,    -1,    -1,   351,   352,   353,
     354,    -1,    -1,    -1,   358,   359,    -1,    -1,    -1,    -1,
     364,   365,   366,    -1,   368,   369,   370,   371,    -1,   373,
     374,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   383,
     384,   385,    -1,    -1,   388,    -1,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,    -1,    -1,
     404,   405,   406,    -1,   408,    -1,   410,   411,   412,   413,
     414,    -1,   416,   417,   418,    -1,    -1,   421,    -1,    -1,
      -1,   425,   426,   427,   428,   429,    -1,    -1,   432,   433,
     434,   435,   436,    -1,   438,   439,    -1,   441,   442,   443,
      -1,    -1,   446,    -1,   448,    -1,   450,   451,    -1,   453,
     454,    -1,    -1,    -1,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,    -1,   469,   470,    -1,    -1,    -1,
     474,   475,   476,   477,    -1,    -1,    -1,   481,    -1,    -1,
      -1,   485,    -1,   487,   488,   489,   490,   491,   492,    -1,
     494,   495,   496,   497,   498,   499,    -1,    -1,    -1,    -1,
      -1,    -1,   506,   507,    -1,   509,    -1,    -1,   512,    -1,
      -1,   515,   516,   517,    -1,    -1,   520,   521,    -1,   523,
     524,   525,   526,   527,   528,    -1,    -1,   531,   532,   533,
     534,    -1,   536,   537,    -1,   539,    -1,   541,   542,   543,
     544,    -1,    -1,   547,   548,    -1,   550,   551,   552,   553,
      -1,    -1,    -1,    -1,    -1,   559,   560,   561,    -1,    -1,
      -1,   565,   566,   567,   568,    -1,   570,   571,    -1,   573,
     574,    -1,   576,   577,    -1,    -1,   580,    -1,    -1,   583,
      -1,   585,    -1,   587,   588,   589,    -1,    -1,    -1,    -1,
      -1,    -1,   596,    -1,    -1,   599,    -1,    -1,    -1,   603,
     604,   605,   606,   607,   608,    -1,    -1,    -1,    -1,    -1,
      -1,   615,   616,    -1,   618,   619,   620,    -1,     5,   623,
       7,     8,     9,    10,    11,    -1,   630,    14,    -1,    -1,
      -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    32,    -1,    -1,    -1,    36,
      -1,    -1,    -1,    40,    -1,    -1,    43,    44,    45,    -1,
      47,    -1,    49,    50,    -1,    -1,    53,    -1,    -1,    56,
      57,    -1,    59,    60,    -1,    62,    63,    -1,    65,    66,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      77,    78,    79,    -1,    81,    82,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    -1,    93,    94,    95,    96,
      97,    -1,    99,    -1,    -1,   102,    -1,    -1,   105,    -1,
      -1,   108,    -1,   110,    -1,    -1,    -1,   114,   115,   116,
      -1,    -1,   119,    -1,    -1,    -1,    -1,   124,   125,    -1,
      -1,    -1,    -1,   130,    -1,   132,    -1,    -1,    -1,   136,
      -1,   138,   139,   140,   141,    -1,    -1,    -1,   145,    -1,
      -1,   148,   149,   150,    -1,    -1,    -1,   154,    -1,   156,
     157,    -1,   159,   160,   161,    -1,    -1,   164,   165,    -1,
     167,   168,   169,   170,   171,   172,    -1,    -1,   175,   176,
     177,    -1,    -1,   180,   181,    -1,   183,   184,   185,    -1,
      -1,   188,    -1,    -1,    -1,   192,    -1,   194,    -1,   196,
      -1,   198,   199,   200,   201,   202,   203,    -1,   205,    -1,
      -1,    -1,   209,   210,   211,    -1,   213,    -1,    -1,    -1,
     217,   218,    -1,    -1,    -1,   222,   223,   224,   225,    -1,
      -1,   228,   229,   230,    -1,   232,    -1,   234,    -1,    -1,
      -1,    -1,   239,   240,    -1,    -1,    -1,   244,    -1,   246,
     247,    -1,   249,   250,    -1,    -1,    -1,   254,    -1,    -1,
     257,   258,   259,    -1,    -1,   262,    -1,    -1,   265,   266,
      -1,    -1,    -1,    -1,    -1,   272,   273,    -1,   275,    -1,
     277,    -1,   279,   280,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,    -1,   305,   306,
     307,   308,    -1,   310,   311,   312,   313,    -1,   315,   316,
      -1,    -1,    -1,    -1,   321,   322,   323,   324,   325,   326,
      -1,    -1,   329,   330,    -1,   332,    -1,   334,    -1,   336,
     337,   338,   339,   340,   341,   342,   343,   344,    -1,    -1,
     347,   348,    -1,    -1,   351,   352,   353,   354,    -1,    -1,
      -1,   358,   359,    -1,    -1,    -1,    -1,   364,   365,   366,
      -1,   368,   369,   370,   371,    -1,   373,   374,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   383,   384,   385,    -1,
      -1,   388,    -1,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,    -1,    -1,   404,   405,   406,
      -1,   408,    -1,   410,   411,   412,   413,   414,    -1,   416,
     417,   418,    -1,    -1,   421,    -1,    -1,    -1,   425,   426,
     427,   428,   429,    -1,    -1,   432,   433,   434,   435,   436,
      -1,   438,   439,    -1,   441,   442,   443,    -1,    -1,   446,
      -1,   448,    -1,   450,   451,    -1,   453,   454,    -1,    -1,
      -1,   458,   459,   460,   461,   462,   463,   464,   465,   466,
     467,    -1,   469,   470,    -1,    -1,    -1,   474,   475,   476,
     477,    -1,    -1,    -1,   481,    -1,    -1,    -1,   485,    -1,
     487,   488,   489,   490,   491,   492,    -1,   494,   495,   496,
     497,   498,   499,    -1,    -1,    -1,    -1,    -1,    -1,   506,
     507,    -1,   509,    -1,    -1,   512,    -1,    -1,   515,   516,
     517,    -1,    -1,   520,   521,    -1,   523,   524,   525,   526,
     527,   528,    -1,    -1,   531,   532,   533,   534,    -1,   536,
     537,    -1,   539,    -1,   541,   542,   543,   544,    -1,    -1,
     547,   548,    -1,   550,   551,   552,   553,    -1,    -1,    -1,
      -1,    -1,   559,   560,   561,    -1,    -1,    -1,   565,   566,
     567,   568,    -1,   570,   571,    -1,   573,   574,    -1,   576,
     577,    -1,    -1,   580,    -1,    -1,   583,    -1,   585,    -1,
     587,   588,   589,    -1,    -1,    -1,    -1,    -1,    -1,   596,
      -1,    -1,   599,    -1,    -1,    -1,   603,   604,   605,   606,
     607,   608,    -1,    -1,    -1,    -1,    -1,    -1,   615,   616,
      -1,   618,   619,   620,    -1,     5,   623,     7,     8,     9,
      10,    11,    -1,   630,    14,    -1,    -1,    -1,    18,    -1,
      -1,    21,    -1,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    -1,    -1,    -1,    36,    -1,    -1,    -1,
      40,    -1,    -1,    43,    44,    45,    -1,    47,    -1,    49,
      50,    -1,    -1,    53,    -1,    -1,    56,    57,    -1,    59,
      60,    -1,    62,    63,    -1,    65,    66,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    77,    78,    79,
      -1,    81,    82,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    -1,    93,    94,    95,    96,    97,    -1,    99,
      -1,    -1,   102,    -1,    -1,   105,    -1,    -1,   108,    -1,
     110,    -1,    -1,    -1,   114,   115,   116,    -1,    -1,   119,
      -1,    -1,    -1,    -1,   124,   125,    -1,    -1,    -1,    -1,
     130,    -1,   132,    -1,    -1,    -1,   136,    -1,   138,   139,
     140,   141,    -1,    -1,    -1,   145,    -1,    -1,   148,   149,
     150,    -1,    -1,    -1,   154,    -1,   156,   157,    -1,   159,
     160,   161,    -1,    -1,   164,   165,    -1,   167,   168,   169,
     170,   171,   172,    -1,    -1,   175,   176,   177,    -1,    -1,
     180,   181,    -1,   183,   184,   185,    -1,    -1,   188,    -1,
      -1,    -1,   192,    -1,   194,    -1,   196,    -1,   198,   199,
     200,   201,   202,   203,    -1,   205,    -1,    -1,    -1,   209,
     210,   211,    -1,   213,    -1,    -1,    -1,   217,   218,    -1,
      -1,    -1,   222,   223,   224,   225,    -1,    -1,   228,   229,
     230,    -1,   232,    -1,   234,    -1,    -1,    -1,    -1,   239,
     240,    -1,    -1,    -1,   244,    -1,   246,   247,    -1,   249,
     250,    -1,    -1,    -1,   254,    -1,    -1,   257,   258,   259,
      -1,    -1,   262,    -1,    -1,   265,   266,    -1,    -1,    -1,
      -1,    -1,   272,   273,    -1,   275,    -1,   277,    -1,   279,
     280,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,    -1,   305,   306,   307,   308,    -1,
     310,   311,   312,   313,    -1,   315,   316,    -1,    -1,    -1,
      -1,   321,   322,   323,   324,   325,   326,    -1,    -1,   329,
     330,    -1,   332,    -1,   334,    -1,   336,   337,   338,   339,
     340,   341,   342,   343,   344,    -1,    -1,   347,   348,    -1,
      -1,   351,   352,   353,   354,    -1,    -1,    -1,   358,   359,
      -1,    -1,    -1,    -1,   364,   365,   366,    -1,   368,   369,
     370,   371,    -1,   373,   374,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   383,   384,   385,    -1,    -1,   388,    -1,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,    -1,    -1,   404,   405,   406,    -1,   408,    -1,
     410,   411,   412,   413,   414,    -1,   416,   417,   418,    -1,
      -1,   421,    -1,    -1,    -1,   425,   426,   427,   428,   429,
      -1,    -1,   432,   433,   434,   435,   436,    -1,   438,   439,
      -1,   441,   442,   443,    -1,    -1,   446,    -1,   448,    -1,
     450,   451,    -1,   453,   454,    -1,    -1,    -1,   458,   459,
     460,   461,   462,   463,   464,   465,   466,   467,    -1,   469,
     470,    -1,    -1,    -1,   474,   475,   476,   477,    -1,    -1,
      -1,   481,    -1,    -1,    -1,   485,    -1,   487,   488,   489,
     490,   491,   492,    -1,   494,   495,   496,   497,   498,   499,
      -1,    -1,    -1,    -1,    -1,    -1,   506,   507,    -1,   509,
      -1,    -1,   512,    -1,    -1,   515,   516,   517,    -1,    -1,
     520,   521,    -1,   523,   524,   525,   526,   527,   528,    -1,
      -1,   531,   532,   533,   534,    -1,   536,   537,    -1,   539,
      -1,   541,   542,   543,   544,    -1,    -1,   547,   548,    -1,
     550,   551,   552,   553,    -1,    -1,    -1,    -1,    -1,   559,
     560,   561,    -1,    -1,    -1,   565,   566,   567,   568,    -1,
     570,   571,    -1,   573,   574,    -1,   576,   577,    -1,    -1,
     580,    -1,    -1,   583,    -1,   585,    -1,   587,   588,   589,
      -1,    -1,    -1,    -1,    -1,    -1,   596,    -1,    -1,   599,
      -1,    -1,    -1,   603,   604,   605,   606,   607,   608,    -1,
      -1,    -1,    -1,    -1,    -1,   615,   616,    -1,   618,   619,
     620,    -1,     5,   623,     7,     8,     9,    10,    11,    -1,
     630,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,
      23,    24,    25,    26,    27,    28,    29,    30,    -1,    32,
      -1,    -1,    -1,    36,    -1,    -1,    -1,    40,    -1,    -1,
      43,    44,    45,    -1,    47,    -1,    49,    50,    -1,    -1,
      53,    -1,    -1,    56,    57,    -1,    59,    60,    -1,    62,
      63,    -1,    65,    66,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    78,    79,    -1,    81,    82,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    -1,
      93,    94,    95,    96,    97,    -1,    99,    -1,    -1,   102,
      -1,    -1,   105,    -1,    -1,   108,    -1,   110,    -1,    -1,
      -1,   114,   115,   116,    -1,    -1,   119,    -1,    -1,    -1,
      -1,   124,   125,   126,    -1,    -1,    -1,   130,    -1,   132,
      -1,    -1,    -1,   136,    -1,   138,   139,   140,   141,    -1,
      -1,    -1,   145,    -1,    -1,   148,   149,   150,    -1,    -1,
      -1,   154,    -1,   156,   157,    -1,   159,   160,   161,    -1,
      -1,   164,   165,    -1,   167,   168,   169,   170,   171,   172,
      -1,    -1,   175,   176,   177,    -1,    -1,   180,   181,    -1,
     183,   184,   185,   186,    -1,   188,    -1,    -1,    -1,   192,
      -1,   194,    -1,   196,    -1,   198,   199,   200,   201,   202,
     203,    -1,   205,    -1,    -1,    -1,   209,   210,   211,    -1,
     213,   214,    -1,    -1,   217,   218,    -1,    -1,    -1,   222,
     223,   224,   225,    -1,    -1,   228,   229,   230,    -1,   232,
      -1,   234,    -1,    -1,    -1,    -1,   239,   240,    -1,    -1,
      -1,   244,    -1,   246,   247,    -1,   249,   250,    -1,    -1,
      -1,   254,    -1,    -1,   257,   258,   259,    -1,    -1,   262,
      -1,    -1,   265,   266,    -1,    -1,    -1,    -1,    -1,   272,
     273,    -1,   275,    -1,   277,    -1,   279,   280,    -1,    -1,
     283,    -1,    -1,    -1,    -1,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,    -1,   305,   306,   307,   308,    -1,   310,   311,   312,
     313,    -1,   315,   316,    -1,    -1,    -1,    -1,   321,   322,
     323,   324,   325,   326,    -1,    -1,   329,   330,    -1,   332,
      -1,   334,    -1,   336,   337,   338,   339,   340,   341,   342,
     343,   344,    -1,    -1,   347,   348,    -1,    -1,   351,   352,
     353,   354,   355,   356,    -1,   358,   359,    -1,    -1,   362,
      -1,   364,   365,   366,    -1,   368,   369,   370,   371,    -1,
     373,   374,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     383,   384,   385,    -1,    -1,   388,    -1,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,    -1,
      -1,   404,   405,   406,    -1,   408,    -1,   410,   411,   412,
     413,   414,    -1,   416,   417,   418,    -1,    -1,   421,    -1,
      -1,    -1,   425,   426,   427,   428,   429,    -1,    -1,   432,
     433,   434,   435,   436,    -1,   438,   439,    -1,   441,   442,
     443,    -1,    -1,   446,    -1,   448,    -1,   450,   451,    -1,
     453,   454,    -1,    -1,    -1,   458,   459,   460,   461,   462,
     463,   464,   465,   466,   467,    -1,   469,   470,    -1,    -1,
      -1,   474,   475,   476,   477,    -1,    -1,    -1,   481,    -1,
      -1,    -1,   485,    -1,   487,   488,   489,   490,   491,   492,
      -1,   494,   495,   496,   497,   498,   499,    -1,    -1,   502,
     503,   504,    -1,   506,   507,    -1,   509,    -1,    -1,   512,
      -1,    -1,   515,   516,   517,    -1,    -1,   520,   521,    -1,
     523,   524,   525,   526,   527,   528,    -1,    -1,   531,   532,
     533,   534,    -1,   536,   537,    -1,   539,    -1,   541,   542,
     543,   544,    -1,    -1,   547,   548,    -1,   550,   551,   552,
     553,    -1,    -1,    -1,    -1,    -1,   559,   560,   561,    -1,
      -1,    -1,   565,   566,   567,   568,   569,   570,   571,    -1,
     573,   574,    -1,   576,   577,    -1,    -1,   580,    -1,    -1,
     583,    -1,   585,    -1,   587,   588,   589,    -1,    -1,    -1,
      -1,    -1,    -1,   596,    -1,    -1,   599,    -1,    -1,    -1,
     603,   604,   605,   606,   607,   608,    -1,    -1,    -1,    -1,
      -1,    -1,   615,   616,    -1,   618,   619,   620,    -1,     5,
     623,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,
      26,    27,    28,    29,    30,    -1,    32,    -1,    -1,    -1,
      36,    -1,    -1,    -1,    40,    -1,    -1,    43,    44,    45,
      -1,    47,    -1,    49,    50,    -1,    -1,    53,    -1,    -1,
      56,    57,    -1,    59,    60,    -1,    62,    63,    -1,    65,
      66,    67,    68,    69,    70,    71,    -1,    73,    74,    75,
      76,    77,    78,    79,    -1,    81,    82,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    -1,    93,    94,    95,
      96,    97,    -1,    99,    -1,    -1,   102,    -1,    -1,   105,
      -1,    -1,   108,    -1,   110,    -1,    -1,    -1,   114,   115,
     116,    -1,    -1,   119,    -1,    -1,    -1,    -1,   124,   125,
     126,    -1,    -1,   129,   130,    -1,   132,    -1,    -1,    -1,
     136,    -1,   138,   139,   140,   141,    -1,    -1,    -1,   145,
      -1,    -1,   148,   149,   150,    -1,    -1,    -1,   154,    -1,
     156,   157,    -1,   159,   160,   161,    -1,    -1,   164,   165,
      -1,   167,   168,   169,   170,   171,   172,    -1,    -1,   175,
     176,   177,    -1,    -1,   180,   181,    -1,   183,   184,   185,
     186,    -1,   188,    -1,    -1,    -1,   192,    -1,   194,    -1,
     196,    -1,   198,   199,   200,   201,   202,   203,    -1,   205,
      -1,    -1,    -1,   209,   210,   211,    -1,   213,   214,    -1,
      -1,   217,   218,    -1,    -1,    -1,   222,   223,   224,   225,
      -1,    -1,   228,   229,   230,    -1,   232,    -1,   234,    -1,
      -1,    -1,    -1,   239,   240,    -1,    -1,    -1,   244,    -1,
     246,   247,    -1,   249,   250,    -1,    -1,    -1,   254,    -1,
      -1,   257,   258,   259,    -1,    -1,   262,    -1,    -1,   265,
     266,    -1,    -1,    -1,    -1,    -1,   272,   273,    -1,   275,
      -1,   277,    -1,   279,   280,    -1,    -1,   283,    -1,    -1,
      -1,    -1,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,    -1,   305,
     306,   307,   308,    -1,   310,   311,   312,   313,    -1,   315,
     316,    -1,    -1,    -1,    -1,   321,   322,   323,   324,   325,
     326,    -1,    -1,   329,   330,    -1,   332,    -1,   334,    -1,
     336,   337,   338,   339,   340,   341,   342,   343,   344,    -1,
      -1,   347,   348,    -1,    -1,   351,   352,   353,   354,    -1,
      -1,    -1,   358,   359,    -1,    -1,   362,    -1,   364,   365,
     366,    -1,   368,   369,   370,   371,    -1,   373,   374,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   383,   384,   385,
      -1,    -1,   388,    -1,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,    -1,    -1,   404,   405,
     406,    -1,   408,    -1,   410,   411,   412,   413,   414,    -1,
     416,   417,   418,    -1,    -1,   421,    -1,    -1,    -1,   425,
     426,   427,   428,   429,    -1,    -1,   432,   433,   434,   435,
     436,    -1,   438,   439,    -1,   441,   442,   443,    -1,    -1,
     446,    -1,   448,    -1,   450,   451,    -1,   453,   454,    -1,
      -1,    -1,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,    -1,   469,   470,    -1,    -1,    -1,   474,   475,
     476,   477,    -1,    -1,    -1,   481,    -1,    -1,    -1,   485,
      -1,   487,   488,   489,   490,   491,   492,    -1,   494,   495,
     496,   497,   498,   499,    -1,    -1,    -1,    -1,    -1,    -1,
     506,   507,    -1,   509,    -1,    -1,   512,    -1,    -1,   515,
     516,   517,    -1,    -1,   520,   521,    -1,   523,   524,   525,
     526,   527,   528,    -1,    -1,   531,   532,   533,   534,    -1,
     536,   537,    -1,   539,    -1,   541,   542,   543,   544,    -1,
     546,   547,   548,    -1,   550,   551,   552,   553,    -1,    -1,
      -1,    -1,    -1,   559,   560,   561,    -1,    -1,    -1,   565,
     566,   567,   568,   569,   570,   571,    -1,   573,   574,    -1,
     576,   577,    -1,    -1,   580,    -1,    -1,   583,    -1,   585,
      -1,   587,   588,   589,    -1,    -1,    -1,    -1,    -1,    -1,
     596,    -1,    -1,   599,    -1,    -1,    -1,   603,   604,   605,
     606,   607,   608,    -1,    -1,    -1,    -1,    -1,    -1,   615,
     616,    -1,   618,   619,   620,    -1,     5,   623,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      -1,    -1,    21,    -1,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    32,    -1,    -1,    -1,    36,    -1,    -1,
      -1,    40,    -1,    -1,    43,    44,    45,    -1,    47,    -1,
      49,    50,    -1,    -1,    53,    -1,    -1,    56,    57,    -1,
      59,    60,    -1,    62,    63,    -1,    65,    66,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    78,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    -1,    93,    94,    95,    96,    97,    -1,
      99,    -1,    -1,   102,    -1,    -1,   105,    -1,    -1,   108,
      -1,   110,    -1,    -1,    -1,   114,   115,   116,    -1,    -1,
     119,    -1,    -1,    -1,    -1,   124,   125,   126,    -1,    -1,
     129,   130,    -1,   132,    -1,    -1,    -1,   136,    -1,   138,
     139,   140,   141,    -1,    -1,    -1,   145,    -1,    -1,   148,
     149,   150,    -1,    -1,    -1,   154,    -1,   156,   157,    -1,
     159,   160,   161,    -1,    -1,   164,   165,    -1,   167,   168,
     169,   170,   171,   172,    -1,    -1,   175,   176,   177,    -1,
      -1,   180,   181,    -1,   183,   184,   185,   186,    -1,   188,
      -1,    -1,    -1,   192,    -1,   194,    -1,   196,    -1,   198,
     199,   200,   201,   202,   203,    -1,   205,    -1,    -1,    -1,
     209,   210,   211,    -1,   213,   214,    -1,    -1,   217,   218,
      -1,    -1,    -1,   222,   223,   224,   225,    -1,    -1,   228,
     229,   230,    -1,   232,    -1,   234,    -1,    -1,    -1,    -1,
     239,   240,    -1,    -1,    -1,   244,    -1,   246,   247,    -1,
     249,   250,    -1,    -1,    -1,   254,    -1,    -1,   257,   258,
     259,    -1,    -1,   262,    -1,    -1,   265,   266,    -1,    -1,
      -1,    -1,    -1,   272,   273,    -1,   275,    -1,   277,    -1,
     279,   280,    -1,    -1,   283,    -1,    -1,    -1,    -1,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,    -1,   305,   306,   307,   308,
      -1,   310,   311,   312,   313,    -1,   315,   316,    -1,    -1,
      -1,    -1,   321,   322,   323,   324,   325,   326,    -1,    -1,
     329,   330,    -1,   332,    -1,   334,    -1,   336,   337,   338,
     339,   340,   341,   342,   343,   344,    -1,    -1,   347,   348,
      -1,    -1,   351,   352,   353,   354,    -1,    -1,    -1,   358,
     359,    -1,    -1,   362,    -1,   364,   365,   366,    -1,   368,
     369,   370,   371,    -1,   373,   374,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   383,   384,   385,    -1,    -1,   388,
      -1,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,    -1,    -1,   404,   405,   406,    -1,   408,
      -1,   410,   411,   412,   413,   414,    -1,   416,   417,   418,
      -1,    -1,   421,    -1,    -1,    -1,   425,   426,   427,   428,
     429,    -1,    -1,   432,   433,   434,   435,   436,    -1,   438,
     439,    -1,   441,   442,   443,    -1,    -1,   446,    -1,   448,
      -1,   450,   451,    -1,   453,   454,    -1,    -1,    -1,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,    -1,
     469,   470,    -1,    -1,    -1,   474,   475,   476,   477,    -1,
      -1,    -1,   481,    -1,    -1,    -1,   485,    -1,   487,   488,
     489,   490,   491,   492,    -1,   494,   495,   496,   497,   498,
     499,    -1,    -1,    -1,    -1,    -1,    -1,   506,   507,    -1,
     509,    -1,    -1,   512,    -1,    -1,   515,   516,   517,    -1,
      -1,   520,   521,    -1,   523,   524,   525,   526,   527,   528,
      -1,    -1,   531,   532,   533,   534,    -1,   536,   537,    -1,
     539,    -1,   541,   542,   543,   544,    -1,   546,   547,   548,
      -1,   550,   551,   552,   553,    -1,    -1,    -1,    -1,    -1,
     559,   560,   561,    -1,    -1,    -1,   565,   566,   567,   568,
     569,   570,   571,    -1,   573,   574,    -1,   576,   577,    -1,
      -1,   580,    -1,    -1,   583,    -1,   585,    -1,   587,   588,
     589,    -1,    -1,    -1,    -1,    -1,    -1,   596,    -1,    -1,
     599,    -1,    -1,    -1,   603,   604,   605,   606,   607,   608,
      -1,    -1,    -1,    -1,    -1,    -1,   615,   616,    -1,   618,
     619,   620,    -1,     5,   623,     7,     8,     9,    10,    11,
      -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,
      -1,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      32,    -1,    -1,    -1,    36,    -1,    -1,    -1,    40,    -1,
      -1,    43,    44,    45,    -1,    47,    -1,    49,    50,    -1,
      -1,    53,    -1,    -1,    56,    57,    -1,    59,    60,    -1,
      62,    63,    -1,    65,    66,    67,    68,    69,    70,    71,
      -1,    73,    74,    75,    76,    77,    78,    79,    -1,    81,
      82,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      -1,    93,    94,    95,    96,    97,    -1,    99,    -1,    -1,
     102,    -1,    -1,   105,    -1,    -1,   108,    -1,   110,    -1,
      -1,    -1,   114,   115,   116,    -1,    -1,   119,    -1,    -1,
      -1,    -1,   124,   125,   126,    -1,    -1,   129,   130,    -1,
     132,    -1,    -1,    -1,   136,    -1,   138,   139,   140,   141,
      -1,    -1,    -1,   145,    -1,    -1,   148,   149,   150,    -1,
      -1,    -1,   154,    -1,   156,   157,    -1,   159,   160,   161,
      -1,    -1,   164,   165,    -1,   167,   168,   169,   170,   171,
     172,    -1,    -1,   175,   176,   177,    -1,    -1,   180,   181,
      -1,   183,   184,   185,   186,    -1,   188,    -1,    -1,    -1,
     192,    -1,   194,    -1,   196,    -1,   198,   199,   200,   201,
     202,   203,    -1,   205,    -1,    -1,    -1,   209,   210,   211,
      -1,   213,   214,    -1,    -1,   217,   218,    -1,    -1,    -1,
     222,   223,   224,   225,    -1,    -1,   228,   229,   230,    -1,
     232,    -1,   234,    -1,    -1,    -1,    -1,   239,   240,    -1,
      -1,    -1,   244,    -1,   246,   247,    -1,   249,   250,    -1,
      -1,    -1,   254,    -1,    -1,   257,   258,   259,    -1,    -1,
     262,    -1,    -1,   265,   266,    -1,    -1,    -1,    -1,    -1,
     272,   273,    -1,   275,    -1,   277,    -1,   279,   280,    -1,
      -1,   283,    -1,    -1,    -1,    -1,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,    -1,   305,   306,   307,   308,    -1,   310,   311,
     312,   313,    -1,   315,   316,    -1,    -1,    -1,    -1,   321,
     322,   323,   324,   325,   326,    -1,    -1,   329,   330,    -1,
     332,    -1,   334,    -1,   336,   337,   338,   339,   340,   341,
     342,   343,   344,    -1,    -1,   347,   348,    -1,    -1,   351,
     352,   353,   354,    -1,    -1,    -1,   358,   359,    -1,    -1,
     362,    -1,   364,   365,   366,    -1,   368,   369,   370,   371,
      -1,   373,   374,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   383,   384,   385,    -1,    -1,   388,    -1,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
      -1,    -1,   404,   405,   406,    -1,   408,    -1,   410,   411,
     412,   413,   414,    -1,   416,   417,   418,    -1,    -1,   421,
      -1,    -1,    -1,   425,   426,   427,   428,   429,    -1,    -1,
     432,   433,   434,   435,   436,    -1,   438,   439,    -1,   441,
     442,   443,    -1,    -1,   446,    -1,   448,    -1,   450,   451,
      -1,   453,   454,    -1,    -1,    -1,   458,   459,   460,   461,
     462,   463,   464,   465,   466,   467,    -1,   469,   470,    -1,
      -1,    -1,   474,   475,   476,   477,    -1,    -1,    -1,   481,
      -1,    -1,    -1,   485,    -1,   487,   488,   489,   490,   491,
     492,    -1,   494,   495,   496,   497,   498,   499,    -1,    -1,
      -1,    -1,    -1,    -1,   506,   507,    -1,   509,    -1,    -1,
     512,    -1,    -1,   515,   516,   517,    -1,    -1,   520,   521,
      -1,   523,   524,   525,   526,   527,   528,    -1,    -1,   531,
     532,   533,   534,    -1,   536,   537,    -1,   539,    -1,   541,
     542,   543,   544,    -1,   546,   547,   548,    -1,   550,   551,
     552,   553,    -1,    -1,    -1,    -1,    -1,   559,   560,   561,
      -1,    -1,    -1,   565,   566,   567,   568,   569,   570,   571,
      -1,   573,   574,    -1,   576,   577,    -1,    -1,   580,    -1,
      -1,   583,    -1,   585,    -1,   587,   588,   589,    -1,    -1,
      -1,    -1,    -1,    -1,   596,    -1,    -1,   599,    -1,    -1,
      -1,   603,   604,   605,   606,   607,   608,    -1,    -1,    -1,
      -1,    -1,    -1,   615,   616,    -1,   618,   619,   620,    -1,
       5,   623,     7,     8,     9,    10,    11,    -1,    -1,    14,
      -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,
      25,    26,    27,    28,    29,    30,    -1,    32,    -1,    -1,
      35,    36,    -1,    -1,    -1,    40,    -1,    -1,    43,    44,
      45,    -1,    47,    -1,    49,    50,    -1,    -1,    53,    -1,
      -1,    56,    57,    -1,    59,    60,    -1,    62,    63,    -1,
      65,    66,    67,    68,    69,    70,    71,    -1,    73,    74,
      75,    76,    77,    78,    79,    -1,    81,    82,    83,    84,
      85,    86,    87,    88,    -1,    90,    91,    -1,    93,    94,
      95,    96,    97,    -1,    99,    -1,    -1,   102,    -1,    -1,
     105,    -1,    -1,   108,    -1,   110,    -1,    -1,    -1,   114,
     115,   116,    -1,    -1,   119,    -1,    -1,    -1,    -1,   124,
     125,    -1,    -1,    -1,   129,   130,    -1,   132,    -1,    -1,
      -1,   136,    -1,   138,   139,   140,   141,    -1,    -1,    -1,
     145,    -1,    -1,   148,   149,   150,    -1,    -1,    -1,   154,
      -1,   156,   157,    -1,   159,   160,   161,   162,    -1,   164,
     165,    -1,   167,   168,   169,   170,   171,   172,    -1,    -1,
     175,   176,   177,    -1,    -1,   180,   181,    -1,   183,   184,
     185,    -1,    -1,   188,    -1,    -1,    -1,   192,    -1,   194,
      -1,   196,    -1,   198,   199,   200,   201,   202,   203,    -1,
     205,    -1,    -1,    -1,   209,   210,   211,    -1,   213,    -1,
      -1,    -1,   217,   218,    -1,    -1,    -1,   222,   223,   224,
     225,    -1,    -1,   228,   229,   230,    -1,   232,    -1,   234,
      -1,    -1,    -1,    -1,   239,   240,    -1,    -1,    -1,   244,
      -1,   246,   247,    -1,   249,   250,    -1,    -1,    -1,   254,
      -1,    -1,   257,   258,   259,    -1,    -1,   262,    -1,    -1,
     265,   266,   267,    -1,    -1,    -1,    -1,   272,   273,    -1,
     275,    -1,   277,    -1,   279,   280,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,    -1,
     305,   306,   307,   308,    -1,   310,   311,   312,   313,    -1,
     315,   316,    -1,    -1,    -1,    -1,   321,   322,   323,   324,
     325,   326,    -1,    -1,   329,   330,    -1,   332,    -1,   334,
      -1,   336,   337,   338,   339,   340,   341,   342,   343,   344,
      -1,    -1,   347,   348,    -1,    -1,   351,   352,   353,   354,
      -1,    -1,    -1,   358,   359,    -1,    -1,    -1,    -1,   364,
     365,   366,    -1,   368,   369,   370,   371,    -1,   373,   374,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   383,   384,
     385,    -1,    -1,   388,    -1,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,    -1,    -1,   404,
     405,   406,    -1,   408,    -1,   410,   411,   412,   413,   414,
      -1,   416,   417,   418,    -1,    -1,   421,    -1,    -1,    -1,
     425,   426,   427,   428,   429,    -1,    -1,   432,   433,   434,
     435,   436,    -1,   438,   439,    -1,   441,   442,   443,    -1,
      -1,   446,    -1,   448,    -1,   450,   451,    -1,   453,   454,
      -1,    -1,    -1,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,    -1,   469,   470,    -1,    -1,    -1,   474,
     475,   476,   477,    -1,    -1,   480,   481,    -1,    -1,    -1,
     485,    -1,   487,   488,   489,   490,   491,   492,    -1,   494,
     495,   496,   497,   498,   499,    -1,    -1,    -1,    -1,    -1,
      -1,   506,   507,    -1,   509,    -1,    -1,   512,    -1,    -1,
     515,   516,   517,    -1,    -1,   520,   521,    -1,   523,   524,
     525,   526,   527,   528,    -1,    -1,   531,   532,   533,   534,
      -1,   536,   537,    -1,   539,    -1,   541,   542,   543,   544,
      -1,   546,   547,   548,    -1,   550,   551,   552,   553,    -1,
      -1,    -1,    -1,    -1,   559,   560,   561,    -1,    -1,    -1,
     565,   566,   567,   568,    -1,   570,   571,    -1,   573,   574,
      -1,   576,   577,    -1,    -1,   580,    -1,    -1,   583,    -1,
     585,    -1,   587,   588,   589,    -1,    -1,    -1,    -1,    -1,
      -1,   596,    -1,    -1,   599,    -1,    -1,    -1,   603,   604,
     605,   606,   607,   608,    -1,    -1,    -1,    -1,    -1,    -1,
     615,   616,    -1,   618,   619,   620,    -1,     5,   623,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,    -1,    -1,    21,    -1,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    32,    -1,    -1,    35,    36,    -1,
      -1,    -1,    40,    -1,    -1,    43,    44,    45,    -1,    47,
      -1,    49,    50,    -1,    -1,    53,    -1,    -1,    56,    57,
      -1,    59,    60,    -1,    62,    63,    -1,    65,    66,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      78,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    -1,    90,    91,    -1,    93,    94,    95,    96,    97,
      -1,    99,    -1,    -1,   102,    -1,    -1,   105,    -1,    -1,
     108,    -1,   110,    -1,    -1,    -1,   114,   115,   116,    -1,
      -1,   119,    -1,    -1,    -1,    -1,   124,   125,    -1,    -1,
      -1,   129,   130,    -1,   132,    -1,    -1,    -1,   136,    -1,
     138,   139,   140,   141,    -1,    -1,    -1,   145,    -1,    -1,
     148,   149,   150,    -1,    -1,    -1,   154,    -1,   156,   157,
      -1,   159,   160,   161,    -1,    -1,   164,   165,    -1,   167,
     168,   169,   170,   171,   172,    -1,    -1,   175,   176,   177,
      -1,    -1,   180,   181,    -1,   183,   184,   185,    -1,    -1,
     188,    -1,    -1,    -1,   192,    -1,   194,    -1,   196,    -1,
     198,   199,   200,   201,   202,   203,    -1,   205,    -1,    -1,
      -1,   209,   210,   211,    -1,   213,    -1,    -1,    -1,   217,
     218,    -1,    -1,    -1,   222,   223,   224,   225,    -1,    -1,
     228,   229,   230,    -1,   232,    -1,   234,    -1,    -1,    -1,
      -1,   239,   240,    -1,    -1,    -1,   244,    -1,   246,   247,
      -1,   249,   250,    -1,    -1,    -1,   254,    -1,    -1,   257,
     258,   259,    -1,    -1,   262,    -1,    -1,   265,   266,   267,
      -1,    -1,    -1,    -1,   272,   273,    -1,   275,    -1,   277,
      -1,   279,   280,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,    -1,   305,   306,   307,
     308,    -1,   310,   311,   312,   313,    -1,   315,   316,    -1,
      -1,    -1,    -1,   321,   322,   323,   324,   325,   326,    -1,
      -1,   329,   330,    -1,   332,    -1,   334,    -1,   336,   337,
     338,   339,   340,   341,   342,   343,   344,    -1,    -1,   347,
     348,    -1,    -1,   351,   352,   353,   354,    -1,    -1,    -1,
     358,   359,    -1,    -1,    -1,    -1,   364,   365,   366,    -1,
     368,   369,   370,   371,    -1,   373,   374,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   383,   384,   385,    -1,    -1,
     388,    -1,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,    -1,    -1,   404,   405,   406,    -1,
     408,    -1,   410,   411,   412,   413,   414,    -1,   416,   417,
     418,    -1,    -1,   421,    -1,    -1,    -1,   425,   426,   427,
     428,   429,    -1,    -1,   432,   433,   434,   435,   436,    -1,
     438,   439,    -1,   441,   442,   443,    -1,    -1,   446,    -1,
     448,    -1,   450,   451,    -1,   453,   454,    -1,    -1,    -1,
     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
      -1,   469,   470,    -1,    -1,    -1,   474,   475,   476,   477,
      -1,    -1,    -1,   481,    -1,    -1,    -1,   485,    -1,   487,
     488,   489,   490,   491,   492,    -1,   494,   495,   496,   497,
     498,   499,    -1,    -1,    -1,    -1,    -1,    -1,   506,   507,
      -1,   509,    -1,    -1,   512,    -1,    -1,   515,   516,   517,
      -1,    -1,   520,   521,    -1,   523,   524,   525,   526,   527,
     528,    -1,    -1,   531,   532,   533,   534,    -1,   536,   537,
      -1,   539,    -1,   541,   542,   543,   544,    -1,   546,   547,
     548,    -1,   550,   551,   552,   553,    -1,    -1,    -1,    -1,
      -1,   559,   560,   561,    -1,    -1,    -1,   565,   566,   567,
     568,    -1,   570,   571,    -1,   573,   574,    -1,   576,   577,
      -1,    -1,   580,    -1,    -1,   583,    -1,   585,    -1,   587,
     588,   589,    -1,    -1,    -1,    -1,    -1,    -1,   596,    -1,
      -1,   599,    -1,    -1,    -1,   603,   604,   605,   606,   607,
     608,    -1,    -1,    -1,    -1,    -1,    -1,   615,   616,    -1,
     618,   619,   620,    -1,     5,   623,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      21,    -1,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    32,    -1,    -1,    -1,    36,    37,    -1,    -1,    40,
      -1,    -1,    43,    44,    45,    -1,    47,    -1,    49,    50,
      -1,    -1,    53,    -1,    -1,    56,    57,    -1,    59,    60,
      -1,    62,    63,    -1,    65,    66,    67,    68,    69,    70,
      71,    -1,    73,    74,    75,    76,    77,    78,    79,    -1,
      81,    82,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    -1,    93,    94,    95,    96,    97,    -1,    99,    -1,
      -1,   102,    -1,    -1,   105,    -1,    -1,   108,    -1,   110,
      -1,    -1,    -1,   114,   115,   116,    -1,    -1,   119,    -1,
      -1,    -1,    -1,   124,   125,    -1,    -1,    -1,    -1,   130,
      -1,   132,    -1,    -1,    -1,   136,    -1,   138,   139,   140,
     141,    -1,    -1,    -1,   145,    -1,    -1,   148,   149,   150,
      -1,    -1,    -1,   154,    -1,   156,   157,    -1,   159,   160,
     161,    -1,    -1,   164,   165,    -1,   167,   168,   169,   170,
     171,   172,    -1,    -1,   175,   176,   177,    -1,    -1,   180,
     181,    -1,   183,   184,   185,    -1,    -1,   188,    -1,    -1,
      -1,   192,    -1,   194,    -1,   196,    -1,   198,   199,   200,
     201,   202,   203,    -1,   205,    -1,    -1,    -1,   209,   210,
     211,    -1,   213,   214,   215,    -1,   217,   218,    -1,    -1,
      -1,   222,   223,   224,   225,    -1,    -1,   228,   229,   230,
      -1,   232,    -1,   234,    -1,    -1,    -1,    -1,   239,   240,
      -1,    -1,    -1,   244,    -1,   246,   247,    -1,   249,   250,
      -1,    -1,    -1,   254,    -1,    -1,   257,   258,   259,    -1,
      -1,   262,    -1,    -1,   265,   266,    -1,    -1,    -1,    -1,
      -1,   272,   273,    -1,   275,    -1,   277,    -1,   279,   280,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,    -1,   305,   306,   307,   308,    -1,   310,
     311,   312,   313,    -1,   315,   316,    -1,    -1,    -1,    -1,
     321,   322,   323,   324,   325,   326,    -1,    -1,   329,   330,
      -1,   332,    -1,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,   344,    -1,    -1,   347,   348,    -1,    -1,
     351,   352,   353,   354,    -1,    -1,    -1,   358,   359,    -1,
      -1,    -1,    -1,   364,   365,   366,    -1,   368,   369,   370,
     371,    -1,   373,   374,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   383,   384,   385,    -1,    -1,   388,    -1,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,    -1,    -1,   404,   405,   406,    -1,   408,    -1,   410,
     411,   412,   413,   414,    -1,   416,   417,   418,    -1,    -1,
     421,    -1,    -1,    -1,   425,   426,   427,   428,   429,    -1,
      -1,   432,   433,   434,   435,   436,    -1,   438,   439,    -1,
     441,   442,   443,    -1,    -1,   446,    -1,   448,    -1,   450,
     451,    -1,   453,   454,    -1,    -1,    -1,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   467,    -1,   469,   470,
      -1,    -1,    -1,   474,   475,   476,   477,    -1,    -1,    -1,
     481,    -1,    -1,    -1,   485,    -1,   487,   488,   489,   490,
     491,   492,    -1,   494,   495,   496,   497,   498,   499,    -1,
      -1,    -1,    -1,    -1,    -1,   506,   507,    -1,   509,    -1,
      -1,   512,    -1,    -1,   515,   516,   517,    -1,    -1,   520,
     521,    -1,   523,   524,   525,   526,   527,   528,    -1,    -1,
     531,   532,   533,   534,    -1,   536,   537,    -1,   539,    -1,
     541,   542,   543,   544,    -1,   546,   547,   548,    -1,   550,
     551,   552,   553,    -1,    -1,    -1,    -1,    -1,   559,   560,
     561,    -1,    -1,    -1,   565,   566,   567,   568,    -1,   570,
     571,    -1,   573,   574,    -1,   576,   577,    -1,    -1,   580,
      -1,    -1,   583,    -1,   585,    -1,   587,   588,   589,    -1,
      -1,    -1,    -1,    -1,    -1,   596,    -1,    -1,   599,    -1,
      -1,    -1,   603,   604,   605,   606,   607,   608,    -1,    -1,
      -1,    -1,    -1,    -1,   615,   616,    -1,   618,   619,   620,
      -1,     5,   623,     7,     8,     9,    10,    11,    -1,    -1,
      14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    -1,
      -1,    -1,    36,    -1,    -1,    -1,    40,    -1,    -1,    43,
      44,    45,    -1,    47,    -1,    49,    50,    -1,    -1,    53,
      -1,    -1,    56,    57,    -1,    59,    60,    -1,    62,    63,
      -1,    65,    66,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    78,    79,    -1,    81,    82,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    -1,    93,
      94,    95,    96,    97,    -1,    99,    -1,    -1,   102,    -1,
      -1,   105,    -1,    -1,   108,    -1,   110,    -1,    -1,    -1,
     114,   115,   116,    -1,    -1,   119,    -1,    -1,    -1,    -1,
     124,   125,    -1,    -1,    -1,    -1,   130,    -1,   132,    -1,
      -1,    -1,   136,    -1,   138,   139,   140,   141,    -1,    -1,
      -1,   145,    -1,    -1,   148,   149,   150,    -1,    -1,    -1,
     154,    -1,   156,   157,    -1,   159,   160,   161,    -1,    -1,
     164,   165,    -1,   167,   168,   169,   170,   171,   172,    -1,
      -1,   175,   176,   177,    -1,    -1,   180,   181,    -1,   183,
     184,   185,    -1,    -1,   188,    -1,    -1,    -1,   192,    -1,
     194,    -1,   196,    -1,   198,   199,   200,   201,   202,   203,
      -1,   205,    -1,    -1,    -1,   209,   210,   211,    -1,   213,
      -1,    -1,    -1,   217,   218,    -1,    -1,    -1,   222,   223,
     224,   225,    -1,    -1,   228,   229,   230,    -1,   232,    -1,
     234,    -1,    -1,    -1,    -1,   239,   240,    -1,    -1,    -1,
     244,    -1,   246,   247,    -1,   249,   250,    -1,    -1,    -1,
     254,    -1,    -1,   257,   258,   259,    -1,    -1,   262,    -1,
      -1,   265,   266,    -1,    -1,    -1,    -1,    -1,   272,   273,
      -1,   275,    -1,   277,    -1,   279,   280,    -1,    -1,   283,
      -1,    -1,    -1,    -1,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
      -1,   305,   306,   307,   308,    -1,   310,   311,   312,   313,
      -1,   315,   316,    -1,    -1,    -1,    -1,   321,   322,   323,
     324,   325,   326,    -1,    -1,   329,   330,    -1,   332,    -1,
     334,    -1,   336,   337,   338,   339,   340,   341,   342,   343,
     344,    -1,    -1,   347,   348,    -1,    -1,   351,   352,   353,
     354,    -1,    -1,    -1,   358,   359,    -1,    -1,   362,    -1,
     364,   365,   366,    -1,   368,   369,   370,   371,    -1,   373,
     374,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   383,
     384,   385,    -1,   387,   388,    -1,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,    -1,    -1,
     404,   405,   406,    -1,   408,    -1,   410,   411,   412,   413,
     414,    -1,   416,   417,   418,    -1,    -1,   421,    -1,    -1,
      -1,   425,   426,   427,   428,   429,    -1,    -1,   432,   433,
     434,   435,   436,    -1,   438,   439,    -1,   441,   442,   443,
      -1,    -1,   446,    -1,   448,    -1,   450,   451,    -1,   453,
     454,    -1,    -1,    -1,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,    -1,   469,   470,    -1,    -1,    -1,
     474,   475,   476,   477,    -1,    -1,    -1,   481,    -1,    -1,
      -1,   485,    -1,   487,   488,   489,   490,   491,   492,    -1,
     494,   495,   496,   497,   498,   499,    -1,    -1,    -1,    -1,
      -1,    -1,   506,   507,    -1,   509,    -1,    -1,   512,    -1,
      -1,   515,   516,   517,    -1,    -1,   520,   521,    -1,   523,
     524,   525,   526,   527,   528,    -1,    -1,   531,   532,   533,
     534,    -1,   536,   537,    -1,   539,    -1,   541,   542,   543,
     544,    -1,    -1,   547,   548,    -1,   550,   551,   552,   553,
      -1,    -1,    -1,    -1,    -1,   559,   560,   561,    -1,    -1,
      -1,   565,   566,   567,   568,   569,   570,   571,    -1,   573,
     574,    -1,   576,   577,    -1,    -1,   580,    -1,    -1,   583,
      -1,   585,    -1,   587,   588,   589,    -1,    -1,    -1,    -1,
      -1,    -1,   596,    -1,    -1,   599,    -1,    -1,    -1,   603,
     604,   605,   606,   607,   608,    -1,    -1,    -1,    -1,    -1,
      -1,   615,   616,    -1,   618,   619,   620,    -1,     5,   623,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    32,    -1,    -1,    -1,    36,
      -1,    -1,    -1,    40,    -1,    -1,    43,    44,    45,    -1,
      47,    -1,    49,    50,    -1,    -1,    53,    -1,    -1,    56,
      57,    -1,    59,    60,    -1,    62,    63,    -1,    65,    66,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      77,    78,    79,    -1,    81,    82,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    -1,    93,    94,    95,    96,
      97,    -1,    99,    -1,    -1,   102,    -1,    -1,   105,    -1,
      -1,   108,    -1,   110,    -1,    -1,    -1,   114,   115,   116,
      -1,    -1,   119,    -1,    -1,    -1,    -1,   124,   125,    -1,
      -1,    -1,    -1,   130,    -1,   132,    -1,    -1,    -1,   136,
      -1,   138,   139,   140,   141,    -1,    -1,    -1,   145,    -1,
      -1,   148,   149,   150,    -1,    -1,    -1,   154,    -1,   156,
     157,    -1,   159,   160,   161,    -1,    -1,   164,   165,    -1,
     167,   168,   169,   170,   171,   172,    -1,    -1,   175,   176,
     177,    -1,    -1,   180,   181,    -1,   183,   184,   185,    -1,
      -1,   188,    -1,    -1,    -1,   192,    -1,   194,    -1,   196,
      -1,   198,   199,   200,   201,   202,   203,    -1,   205,    -1,
      -1,    -1,   209,   210,   211,    -1,   213,    -1,    -1,    -1,
     217,   218,    -1,    -1,    -1,   222,   223,   224,   225,    -1,
      -1,   228,   229,   230,    -1,   232,    -1,   234,    -1,    -1,
      -1,    -1,   239,   240,    -1,    -1,    -1,   244,    -1,   246,
     247,    -1,   249,   250,    -1,    -1,    -1,   254,    -1,    -1,
     257,   258,   259,    -1,    -1,   262,    -1,    -1,   265,   266,
      -1,    -1,    -1,    -1,    -1,   272,   273,    -1,   275,    -1,
     277,    -1,   279,   280,    -1,    -1,   283,    -1,    -1,    -1,
      -1,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,    -1,   305,   306,
     307,   308,    -1,   310,   311,   312,   313,    -1,   315,   316,
      -1,    -1,    -1,    -1,   321,   322,   323,   324,   325,   326,
      -1,    -1,   329,   330,    -1,   332,    -1,   334,    -1,   336,
     337,   338,   339,   340,   341,   342,   343,   344,    -1,    -1,
     347,   348,    -1,    -1,   351,   352,   353,   354,    -1,    -1,
      -1,   358,   359,    -1,    -1,   362,    -1,   364,   365,   366,
      -1,   368,   369,   370,   371,    -1,   373,   374,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   383,   384,   385,    -1,
     387,   388,    -1,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,    -1,    -1,   404,   405,   406,
      -1,   408,    -1,   410,   411,   412,   413,   414,    -1,   416,
     417,   418,    -1,    -1,   421,    -1,    -1,    -1,   425,   426,
     427,   428,   429,    -1,    -1,   432,   433,   434,   435,   436,
      -1,   438,   439,    -1,   441,   442,   443,    -1,    -1,   446,
      -1,   448,    -1,   450,   451,    -1,   453,   454,    -1,    -1,
      -1,   458,   459,   460,   461,   462,   463,   464,   465,   466,
     467,    -1,   469,   470,    -1,    -1,    -1,   474,   475,   476,
     477,    -1,    -1,    -1,   481,    -1,    -1,    -1,   485,    -1,
     487,   488,   489,   490,   491,   492,    -1,   494,   495,   496,
     497,   498,   499,    -1,    -1,    -1,    -1,    -1,    -1,   506,
     507,    -1,   509,    -1,    -1,   512,    -1,    -1,   515,   516,
     517,    -1,    -1,   520,   521,    -1,   523,   524,   525,   526,
     527,   528,    -1,    -1,   531,   532,   533,   534,    -1,   536,
     537,    -1,   539,    -1,   541,   542,   543,   544,    -1,    -1,
     547,   548,    -1,   550,   551,   552,   553,    -1,    -1,    -1,
      -1,    -1,   559,   560,   561,    -1,    -1,    -1,   565,   566,
     567,   568,   569,   570,   571,    -1,   573,   574,    -1,   576,
     577,    -1,    -1,   580,    -1,    -1,   583,    -1,   585,    -1,
     587,   588,   589,    -1,    -1,    -1,    -1,    -1,    -1,   596,
      -1,    -1,   599,    -1,    -1,    -1,   603,   604,   605,   606,
     607,   608,    -1,    -1,    -1,    -1,    -1,    -1,   615,   616,
      -1,   618,   619,   620,    -1,     5,   623,     7,     8,     9,
      10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,
      -1,    21,    -1,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    -1,    -1,    35,    36,    -1,    -1,    -1,
      40,    -1,    -1,    43,    44,    45,    -1,    47,    -1,    49,
      50,    -1,    -1,    53,    -1,    -1,    56,    57,    -1,    59,
      60,    -1,    62,    63,    -1,    65,    66,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    77,    78,    79,
      -1,    81,    82,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    -1,    93,    94,    95,    96,    97,    -1,    99,
      -1,    -1,   102,    -1,    -1,   105,    -1,    -1,   108,    -1,
     110,    -1,    -1,    -1,   114,   115,   116,    -1,    -1,   119,
      -1,    -1,    -1,    -1,   124,   125,    -1,    -1,    -1,   129,
     130,    -1,   132,    -1,    -1,    -1,   136,    -1,   138,   139,
     140,   141,    -1,    -1,    -1,   145,    -1,    -1,   148,   149,
     150,    -1,    -1,    -1,   154,    -1,   156,   157,    -1,   159,
     160,   161,    -1,    -1,   164,   165,    -1,   167,   168,   169,
     170,   171,   172,    -1,    -1,   175,   176,   177,    -1,    -1,
     180,   181,    -1,   183,   184,   185,    -1,    -1,   188,    -1,
      -1,    -1,   192,    -1,   194,    -1,   196,    -1,   198,   199,
     200,   201,   202,   203,    -1,   205,    -1,    -1,    -1,   209,
     210,   211,    -1,   213,    -1,    -1,    -1,   217,   218,    -1,
      -1,    -1,   222,   223,   224,   225,    -1,    -1,   228,   229,
     230,    -1,   232,    -1,   234,    -1,    -1,    -1,    -1,   239,
     240,    -1,    -1,    -1,   244,    -1,   246,   247,    -1,   249,
     250,    -1,    -1,    -1,   254,    -1,    -1,   257,   258,   259,
      -1,    -1,   262,    -1,    -1,   265,   266,   267,    -1,    -1,
      -1,    -1,   272,   273,    -1,   275,    -1,   277,    -1,   279,
     280,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,    -1,   305,   306,   307,   308,    -1,
     310,   311,   312,   313,    -1,   315,   316,    -1,    -1,    -1,
      -1,   321,   322,   323,   324,   325,   326,    -1,    -1,   329,
     330,    -1,   332,    -1,   334,    -1,   336,   337,   338,   339,
     340,   341,   342,   343,   344,    -1,    -1,   347,   348,    -1,
      -1,   351,   352,   353,   354,    -1,    -1,    -1,   358,   359,
      -1,    -1,    -1,    -1,   364,   365,   366,    -1,   368,   369,
     370,   371,    -1,   373,   374,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   383,   384,   385,    -1,    -1,   388,    -1,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,    -1,    -1,   404,   405,   406,    -1,   408,    -1,
     410,   411,   412,   413,   414,    -1,   416,   417,   418,    -1,
      -1,   421,    -1,    -1,    -1,   425,   426,   427,   428,   429,
      -1,    -1,   432,   433,   434,   435,   436,    -1,   438,   439,
      -1,   441,   442,   443,    -1,    -1,   446,    -1,   448,    -1,
     450,   451,    -1,   453,   454,    -1,    -1,    -1,   458,   459,
     460,   461,   462,   463,   464,   465,   466,   467,    -1,   469,
     470,    -1,    -1,    -1,   474,   475,   476,   477,    -1,    -1,
      -1,   481,    -1,    -1,    -1,   485,    -1,   487,   488,   489,
     490,   491,   492,    -1,   494,   495,   496,   497,   498,   499,
      -1,    -1,    -1,    -1,    -1,    -1,   506,   507,    -1,   509,
      -1,    -1,   512,    -1,    -1,   515,   516,   517,    -1,    -1,
     520,   521,    -1,   523,   524,   525,   526,   527,   528,    -1,
      -1,   531,   532,   533,   534,    -1,   536,   537,    -1,   539,
      -1,   541,   542,   543,   544,    -1,   546,   547,   548,    -1,
     550,   551,   552,   553,    -1,    -1,    -1,    -1,    -1,   559,
     560,   561,    -1,    -1,    -1,   565,   566,   567,   568,    -1,
     570,   571,    -1,   573,   574,    -1,   576,   577,    -1,    -1,
     580,    -1,    -1,   583,    -1,   585,    -1,   587,   588,   589,
      -1,    -1,    -1,    -1,    -1,    -1,   596,    -1,    -1,   599,
      -1,    -1,    -1,   603,   604,   605,   606,   607,   608,    -1,
      -1,    -1,    -1,    -1,    -1,   615,   616,    -1,   618,   619,
     620,    -1,     5,   623,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,
      23,    24,    25,    26,    27,    28,    29,    30,    -1,    32,
      -1,    -1,    -1,    36,    -1,    -1,    -1,    40,    -1,    -1,
      43,    44,    45,    -1,    47,    -1,    49,    50,    -1,    -1,
      53,    -1,    -1,    56,    57,    -1,    59,    60,    -1,    62,
      63,    -1,    65,    66,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    78,    79,    -1,    81,    82,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    -1,
      93,    94,    95,    96,    97,    -1,    99,    -1,    -1,   102,
      -1,    -1,   105,    -1,    -1,   108,    -1,   110,    -1,    -1,
      -1,   114,   115,   116,    -1,    -1,   119,    -1,    -1,    -1,
      -1,   124,   125,    -1,    -1,    -1,    -1,   130,    -1,   132,
      -1,    -1,    -1,   136,    -1,   138,   139,   140,   141,    -1,
      -1,    -1,   145,    -1,    -1,   148,   149,   150,    -1,    -1,
      -1,   154,    -1,   156,   157,    -1,   159,   160,   161,    -1,
      -1,   164,   165,    -1,   167,   168,   169,   170,   171,   172,
      -1,    -1,   175,   176,   177,    -1,    -1,   180,   181,    -1,
     183,   184,   185,    -1,    -1,   188,    -1,    -1,    -1,   192,
      -1,   194,    -1,   196,    -1,   198,   199,   200,   201,   202,
     203,    -1,   205,    -1,    -1,    -1,   209,   210,   211,    -1,
     213,    -1,    -1,    -1,   217,   218,    -1,    -1,    -1,   222,
     223,   224,   225,    -1,    -1,   228,   229,   230,    -1,   232,
      -1,   234,    -1,    -1,    -1,    -1,   239,   240,    -1,    -1,
      -1,   244,    -1,   246,   247,    -1,   249,   250,    -1,    -1,
      -1,   254,    -1,    -1,   257,   258,   259,    -1,    -1,   262,
      -1,    -1,   265,   266,    -1,    -1,    -1,    -1,    -1,   272,
     273,    -1,   275,    -1,   277,    -1,   279,   280,    -1,    -1,
     283,    -1,    -1,    -1,    -1,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,    -1,   305,   306,   307,   308,    -1,   310,   311,   312,
     313,    -1,   315,   316,    -1,    -1,    -1,    -1,   321,   322,
     323,   324,   325,   326,    -1,    -1,   329,   330,    -1,   332,
      -1,   334,    -1,   336,   337,   338,   339,   340,   341,   342,
     343,   344,    -1,    -1,   347,   348,    -1,    -1,   351,   352,
     353,   354,    -1,    -1,    -1,   358,   359,    -1,    -1,   362,
      -1,   364,   365,   366,    -1,   368,   369,   370,   371,    -1,
     373,   374,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     383,   384,   385,    -1,   387,   388,    -1,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,    -1,
      -1,   404,   405,   406,    -1,   408,    -1,   410,   411,   412,
     413,   414,    -1,   416,   417,   418,    -1,    -1,   421,    -1,
      -1,    -1,   425,   426,   427,   428,   429,    -1,    -1,   432,
     433,   434,   435,   436,    -1,   438,   439,    -1,   441,   442,
     443,    -1,    -1,   446,    -1,   448,    -1,   450,   451,    -1,
     453,   454,    -1,    -1,    -1,   458,   459,   460,   461,   462,
     463,   464,   465,   466,   467,    -1,   469,   470,    -1,    -1,
      -1,   474,   475,   476,   477,    -1,    -1,    -1,   481,    -1,
      -1,    -1,   485,    -1,   487,   488,   489,   490,   491,   492,
      -1,   494,   495,   496,   497,   498,   499,    -1,    -1,    -1,
      -1,    -1,    -1,   506,   507,    -1,   509,    -1,    -1,   512,
      -1,    -1,   515,   516,   517,    -1,    -1,   520,   521,    -1,
     523,   524,   525,   526,   527,   528,    -1,    -1,   531,   532,
     533,   534,    -1,   536,   537,    -1,   539,    -1,   541,   542,
     543,   544,    -1,    -1,   547,   548,    -1,   550,   551,   552,
     553,    -1,    -1,    -1,    -1,    -1,   559,   560,   561,    -1,
      -1,    -1,   565,   566,   567,   568,   569,   570,   571,    -1,
     573,   574,    -1,   576,   577,    -1,    -1,   580,    -1,    -1,
     583,    -1,   585,    -1,   587,   588,   589,    -1,    -1,    -1,
      -1,    -1,    -1,   596,    -1,    -1,   599,    -1,    -1,    -1,
     603,   604,   605,   606,   607,   608,    -1,    -1,    -1,    -1,
      -1,    -1,   615,   616,    -1,   618,   619,   620,    -1,     5,
     623,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,
      26,    27,    28,    29,    30,    -1,    32,    -1,    -1,    -1,
      36,    -1,    -1,    -1,    40,    -1,    -1,    43,    44,    45,
      -1,    47,    -1,    49,    50,    -1,    -1,    53,    -1,    -1,
      56,    57,    -1,    59,    60,    -1,    62,    63,    -1,    65,
      66,    67,    68,    69,    70,    71,    -1,    73,    74,    75,
      76,    77,    78,    79,    -1,    81,    82,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    -1,    93,    94,    95,
      96,    97,    -1,    99,    -1,    -1,   102,    -1,    -1,   105,
      -1,   107,   108,    -1,   110,    -1,    -1,    -1,   114,   115,
     116,    -1,    -1,   119,    -1,    -1,    -1,    -1,   124,   125,
      -1,    -1,    -1,    -1,   130,    -1,   132,    -1,    -1,    -1,
     136,    -1,   138,   139,   140,   141,    -1,    -1,    -1,   145,
      -1,    -1,   148,   149,   150,    -1,    -1,    -1,   154,    -1,
     156,   157,    -1,   159,   160,   161,    -1,    -1,   164,   165,
      -1,   167,   168,   169,   170,   171,   172,    -1,    -1,   175,
     176,   177,    -1,    -1,   180,   181,    -1,   183,   184,   185,
      -1,    -1,   188,    -1,    -1,    -1,   192,    -1,   194,    -1,
     196,    -1,   198,   199,   200,   201,   202,   203,    -1,   205,
      -1,    -1,    -1,   209,   210,   211,    -1,   213,    -1,    -1,
      -1,   217,   218,    -1,    -1,    -1,   222,   223,   224,   225,
      -1,    -1,   228,   229,   230,    -1,   232,    -1,   234,    -1,
      -1,    -1,    -1,   239,   240,    -1,    -1,    -1,   244,    -1,
     246,   247,    -1,   249,   250,    -1,    -1,    -1,   254,    -1,
      -1,   257,   258,   259,    -1,    -1,   262,    -1,    -1,   265,
     266,   267,    -1,    -1,    -1,    -1,   272,   273,    -1,   275,
      -1,   277,    -1,   279,   280,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,    -1,   305,
     306,   307,   308,    -1,   310,   311,   312,   313,    -1,   315,
     316,    -1,    -1,    -1,    -1,   321,   322,   323,   324,   325,
     326,    -1,    -1,   329,   330,    -1,   332,    -1,   334,    -1,
     336,   337,   338,   339,   340,   341,   342,   343,   344,    -1,
      -1,   347,   348,    -1,    -1,   351,   352,   353,   354,    -1,
      -1,    -1,   358,   359,    -1,    -1,    -1,    -1,   364,   365,
     366,    -1,   368,   369,   370,   371,    -1,   373,   374,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   383,   384,   385,
      -1,    -1,   388,    -1,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,    -1,    -1,   404,   405,
     406,    -1,   408,    -1,   410,   411,   412,   413,   414,    -1,
     416,   417,   418,    -1,    -1,   421,    -1,    -1,    -1,   425,
     426,   427,   428,   429,    -1,    -1,   432,   433,   434,   435,
     436,    -1,   438,   439,    -1,   441,   442,   443,    -1,    -1,
     446,    -1,   448,    -1,   450,   451,    -1,   453,   454,    -1,
      -1,    -1,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,    -1,   469,   470,    -1,    -1,    -1,   474,   475,
     476,   477,    -1,    -1,    -1,   481,    -1,    -1,    -1,   485,
      -1,   487,   488,   489,   490,   491,   492,    -1,   494,   495,
     496,   497,   498,   499,    -1,    -1,    -1,    -1,    -1,    -1,
     506,   507,    -1,   509,    -1,    -1,   512,    -1,    -1,   515,
     516,   517,    -1,    -1,   520,   521,    -1,   523,   524,   525,
     526,   527,   528,    -1,    -1,   531,   532,   533,   534,    -1,
     536,   537,    -1,   539,    -1,   541,   542,   543,   544,    -1,
     546,   547,   548,    -1,   550,   551,   552,   553,    -1,    -1,
      -1,    -1,    -1,   559,   560,   561,    -1,    -1,    -1,   565,
     566,   567,   568,    -1,   570,   571,    -1,   573,   574,    -1,
     576,   577,    -1,    -1,   580,    -1,    -1,   583,    -1,   585,
      -1,   587,   588,   589,    -1,    -1,    -1,    -1,    -1,    -1,
     596,    -1,    -1,   599,    -1,    -1,    -1,   603,   604,   605,
     606,   607,   608,    -1,    -1,    -1,    -1,    -1,    -1,   615,
     616,    -1,   618,   619,   620,    -1,     5,   623,     7,     8,
       9,    10,    11,    12,    -1,    14,    -1,    -1,    -1,    18,
      -1,    -1,    21,    -1,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    32,    -1,    -1,    -1,    36,    -1,    -1,
      -1,    40,    -1,    -1,    43,    44,    45,    -1,    47,    -1,
      49,    50,    -1,    -1,    53,    -1,    -1,    56,    57,    -1,
      59,    60,    -1,    62,    63,    -1,    65,    66,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    78,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    -1,    93,    94,    95,    96,    97,    -1,
      99,    -1,    -1,   102,    -1,    -1,   105,    -1,    -1,   108,
      -1,   110,    -1,    -1,    -1,   114,   115,   116,    -1,    -1,
     119,    -1,    -1,    -1,    -1,   124,   125,    -1,    -1,    -1,
      -1,   130,    -1,   132,    -1,    -1,    -1,   136,    -1,   138,
     139,   140,   141,    -1,    -1,    -1,   145,    -1,    -1,   148,
     149,   150,    -1,    -1,    -1,   154,    -1,   156,   157,    -1,
     159,   160,   161,    -1,    -1,   164,   165,    -1,   167,   168,
     169,   170,   171,   172,    -1,    -1,   175,   176,   177,    -1,
      -1,   180,   181,    -1,   183,   184,   185,    -1,    -1,   188,
      -1,    -1,    -1,   192,    -1,   194,    -1,   196,    -1,   198,
     199,   200,   201,   202,   203,    -1,   205,    -1,    -1,    -1,
     209,   210,   211,    -1,   213,    -1,    -1,    -1,   217,   218,
      -1,    -1,    -1,   222,   223,   224,   225,    -1,    -1,   228,
     229,   230,    -1,   232,    -1,   234,    -1,    -1,    -1,    -1,
     239,   240,    -1,    -1,    -1,   244,    -1,   246,   247,    -1,
     249,   250,    -1,    -1,    -1,   254,    -1,    -1,   257,   258,
     259,    -1,    -1,   262,    -1,    -1,   265,   266,   267,    -1,
      -1,    -1,    -1,   272,   273,    -1,   275,    -1,   277,    -1,
     279,   280,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,    -1,   305,   306,   307,   308,
      -1,   310,   311,   312,   313,    -1,   315,   316,    -1,    -1,
      -1,    -1,   321,   322,   323,   324,   325,   326,    -1,    -1,
     329,   330,    -1,   332,    -1,   334,    -1,   336,   337,   338,
     339,   340,   341,   342,   343,   344,    -1,    -1,   347,   348,
      -1,    -1,   351,   352,   353,   354,    -1,    -1,    -1,   358,
     359,    -1,    -1,    -1,    -1,   364,   365,   366,    -1,   368,
     369,   370,   371,    -1,   373,   374,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   383,   384,   385,    -1,    -1,   388,
      -1,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,    -1,    -1,   404,   405,   406,    -1,   408,
      -1,   410,   411,   412,   413,   414,    -1,   416,   417,   418,
      -1,    -1,   421,    -1,    -1,    -1,   425,   426,   427,   428,
     429,    -1,    -1,   432,   433,   434,   435,   436,    -1,   438,
     439,    -1,   441,   442,   443,    -1,    -1,   446,    -1,   448,
      -1,   450,   451,    -1,   453,   454,    -1,    -1,    -1,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,    -1,
     469,   470,    -1,    -1,    -1,   474,   475,   476,   477,    -1,
      -1,    -1,   481,    -1,    -1,    -1,   485,    -1,   487,   488,
     489,   490,   491,   492,    -1,   494,   495,   496,   497,   498,
     499,    -1,    -1,    -1,    -1,    -1,    -1,   506,   507,    -1,
     509,    -1,    -1,   512,    -1,    -1,   515,   516,   517,    -1,
      -1,   520,   521,    -1,   523,   524,   525,   526,   527,   528,
      -1,    -1,   531,   532,   533,   534,    -1,   536,   537,    -1,
     539,    -1,   541,   542,   543,   544,    -1,   546,   547,   548,
      -1,   550,   551,   552,   553,    -1,    -1,    -1,    -1,    -1,
     559,   560,   561,    -1,    -1,    -1,   565,   566,   567,   568,
      -1,   570,   571,    -1,   573,   574,    -1,   576,   577,    -1,
      -1,   580,    -1,    -1,   583,    -1,   585,    -1,   587,   588,
     589,    -1,    -1,    -1,    -1,    -1,    -1,   596,    -1,    -1,
     599,    -1,    -1,    -1,   603,   604,   605,   606,   607,   608,
      -1,    -1,    -1,    -1,    -1,    -1,   615,   616,    -1,   618,
     619,   620,    -1,     5,   623,     7,     8,     9,    10,    11,
      -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,
      -1,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      32,    -1,    -1,    -1,    36,    -1,    -1,    -1,    40,    -1,
      -1,    43,    44,    45,    -1,    47,    -1,    49,    50,    -1,
      -1,    53,    -1,    -1,    56,    57,    -1,    59,    60,    -1,
      62,    63,    -1,    65,    66,    67,    68,    69,    70,    71,
      -1,    73,    74,    75,    76,    77,    78,    79,    -1,    81,
      82,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      -1,    93,    94,    95,    96,    97,    -1,    99,    -1,    -1,
     102,    -1,    -1,   105,    -1,    -1,   108,    -1,   110,    -1,
      -1,    -1,   114,   115,   116,    -1,    -1,   119,    -1,    -1,
      -1,    -1,   124,   125,    -1,    -1,    -1,   129,   130,    -1,
     132,    -1,    -1,    -1,   136,    -1,   138,   139,   140,   141,
      -1,    -1,    -1,   145,    -1,    -1,   148,   149,   150,    -1,
      -1,    -1,   154,    -1,   156,   157,    -1,   159,   160,   161,
      -1,    -1,   164,   165,    -1,   167,   168,   169,   170,   171,
     172,    -1,    -1,   175,   176,   177,    -1,    -1,   180,   181,
      -1,   183,   184,   185,    -1,    -1,   188,    -1,    -1,    -1,
     192,    -1,   194,    -1,   196,    -1,   198,   199,   200,   201,
     202,   203,    -1,   205,    -1,    -1,    -1,   209,   210,   211,
      -1,   213,    -1,    -1,    -1,   217,   218,    -1,    -1,    -1,
     222,   223,   224,   225,    -1,    -1,   228,   229,   230,    -1,
     232,    -1,   234,    -1,    -1,    -1,    -1,   239,   240,    -1,
      -1,    -1,   244,    -1,   246,   247,    -1,   249,   250,    -1,
      -1,    -1,   254,    -1,    -1,   257,   258,   259,    -1,    -1,
     262,    -1,    -1,   265,   266,   267,    -1,    -1,    -1,    -1,
     272,   273,    -1,   275,    -1,   277,    -1,   279,   280,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,    -1,   305,   306,   307,   308,    -1,   310,   311,
     312,   313,    -1,   315,   316,    -1,    -1,    -1,    -1,   321,
     322,   323,   324,   325,   326,    -1,    -1,   329,   330,    -1,
     332,    -1,   334,    -1,   336,   337,   338,   339,   340,   341,
     342,   343,   344,    -1,    -1,   347,   348,    -1,    -1,   351,
     352,   353,   354,    -1,    -1,    -1,   358,   359,    -1,    -1,
      -1,    -1,   364,   365,   366,    -1,   368,   369,   370,   371,
      -1,   373,   374,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   383,   384,   385,    -1,    -1,   388,    -1,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
      -1,    -1,   404,   405,   406,    -1,   408,    -1,   410,   411,
     412,   413,   414,    -1,   416,   417,   418,    -1,    -1,   421,
      -1,    -1,    -1,   425,   426,   427,   428,   429,    -1,    -1,
     432,   433,   434,   435,   436,    -1,   438,   439,    -1,   441,
     442,   443,    -1,    -1,   446,    -1,   448,    -1,   450,   451,
      -1,   453,   454,    -1,    -1,    -1,   458,   459,   460,   461,
     462,   463,   464,   465,   466,   467,    -1,   469,   470,    -1,
      -1,    -1,   474,   475,   476,   477,    -1,    -1,    -1,   481,
      -1,    -1,    -1,   485,    -1,   487,   488,   489,   490,   491,
     492,    -1,   494,   495,   496,   497,   498,   499,    -1,    -1,
      -1,    -1,    -1,    -1,   506,   507,    -1,   509,    -1,    -1,
     512,    -1,    -1,   515,   516,   517,    -1,    -1,   520,   521,
      -1,   523,   524,   525,   526,   527,   528,    -1,    -1,   531,
     532,   533,   534,    -1,   536,   537,    -1,   539,    -1,   541,
     542,   543,   544,    -1,   546,   547,   548,    -1,   550,   551,
     552,   553,    -1,    -1,    -1,    -1,    -1,   559,   560,   561,
      -1,    -1,    -1,   565,   566,   567,   568,    -1,   570,   571,
      -1,   573,   574,    -1,   576,   577,    -1,    -1,   580,    -1,
      -1,   583,    -1,   585,    -1,   587,   588,   589,    -1,    -1,
      -1,    -1,    -1,    -1,   596,    -1,    -1,   599,    -1,    -1,
      -1,   603,   604,   605,   606,   607,   608,    -1,    -1,    -1,
      -1,    -1,    -1,   615,   616,    -1,   618,   619,   620,    -1,
       5,   623,     7,     8,     9,    10,    11,    -1,    -1,    14,
      -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,
      25,    26,    27,    28,    29,    30,    -1,    32,    -1,    -1,
      35,    36,    -1,    -1,    -1,    40,    -1,    -1,    43,    44,
      45,    -1,    47,    -1,    49,    50,    -1,    -1,    53,    -1,
      -1,    56,    57,    -1,    59,    60,    -1,    62,    63,    -1,
      65,    66,    67,    68,    69,    70,    71,    -1,    73,    74,
      75,    76,    77,    78,    79,    -1,    81,    82,    83,    84,
      85,    86,    87,    88,    -1,    90,    91,    -1,    93,    94,
      95,    96,    97,    -1,    99,    -1,    -1,   102,    -1,    -1,
     105,    -1,    -1,   108,    -1,   110,    -1,    -1,    -1,   114,
     115,   116,    -1,    -1,   119,    -1,    -1,    -1,    -1,   124,
     125,    -1,    -1,    -1,    -1,   130,    -1,   132,    -1,    -1,
      -1,   136,    -1,   138,   139,   140,   141,    -1,    -1,    -1,
     145,    -1,    -1,   148,   149,   150,    -1,    -1,    -1,   154,
      -1,   156,   157,    -1,   159,   160,   161,    -1,    -1,   164,
     165,    -1,   167,   168,   169,   170,   171,   172,    -1,    -1,
     175,   176,   177,    -1,    -1,   180,   181,    -1,   183,   184,
     185,    -1,    -1,   188,    -1,    -1,    -1,   192,    -1,   194,
      -1,   196,    -1,   198,   199,   200,   201,   202,   203,    -1,
     205,    -1,    -1,    -1,   209,   210,   211,    -1,   213,    -1,
      -1,    -1,   217,   218,    -1,    -1,    -1,   222,   223,   224,
     225,    -1,    -1,   228,   229,   230,    -1,   232,    -1,   234,
      -1,    -1,    -1,    -1,   239,   240,    -1,    -1,    -1,   244,
      -1,   246,   247,    -1,   249,   250,    -1,    -1,    -1,   254,
      -1,    -1,   257,   258,   259,    -1,    -1,   262,    -1,    -1,
     265,   266,   267,    -1,    -1,    -1,    -1,   272,   273,    -1,
     275,    -1,   277,    -1,   279,   280,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,    -1,
     305,   306,   307,   308,    -1,   310,   311,   312,   313,    -1,
     315,   316,    -1,    -1,    -1,    -1,   321,   322,   323,   324,
     325,   326,    -1,    -1,   329,   330,    -1,   332,    -1,   334,
      -1,   336,   337,   338,   339,   340,   341,   342,   343,   344,
      -1,    -1,   347,   348,    -1,    -1,   351,   352,   353,   354,
      -1,    -1,    -1,   358,   359,    -1,    -1,    -1,    -1,   364,
     365,   366,    -1,   368,   369,   370,   371,    -1,   373,   374,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   383,   384,
     385,    -1,    -1,   388,    -1,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,    -1,    -1,   404,
     405,   406,    -1,   408,    -1,   410,   411,   412,   413,   414,
      -1,   416,   417,   418,    -1,    -1,   421,    -1,    -1,    -1,
     425,   426,   427,   428,   429,    -1,    -1,   432,   433,   434,
     435,   436,    -1,   438,   439,    -1,   441,   442,   443,    -1,
      -1,   446,    -1,   448,    -1,   450,   451,    -1,   453,   454,
      -1,    -1,    -1,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,    -1,   469,   470,    -1,    -1,    -1,   474,
     475,   476,   477,    -1,    -1,    -1,   481,    -1,    -1,    -1,
     485,    -1,   487,   488,   489,   490,   491,   492,    -1,   494,
     495,   496,   497,   498,   499,    -1,    -1,    -1,    -1,    -1,
      -1,   506,   507,    -1,   509,    -1,    -1,   512,    -1,    -1,
     515,   516,   517,    -1,    -1,   520,   521,    -1,   523,   524,
     525,   526,   527,   528,    -1,    -1,   531,   532,   533,   534,
      -1,   536,   537,    -1,   539,    -1,   541,   542,   543,   544,
      -1,   546,   547,   548,    -1,   550,   551,   552,   553,    -1,
      -1,    -1,    -1,    -1,   559,   560,   561,    -1,    -1,    -1,
     565,   566,   567,   568,    -1,   570,   571,    -1,   573,   574,
      -1,   576,   577,    -1,    -1,   580,    -1,    -1,   583,    -1,
     585,    -1,   587,   588,   589,    -1,    -1,    -1,    -1,    -1,
      -1,   596,    -1,    -1,   599,    -1,    -1,    -1,   603,   604,
     605,   606,   607,   608,    -1,    -1,    -1,    -1,    -1,    -1,
     615,   616,    -1,   618,   619,   620,    -1,     5,   623,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,    -1,    -1,    21,    -1,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    32,    -1,    -1,    -1,    36,    -1,
      -1,    -1,    40,    -1,    -1,    43,    44,    45,    -1,    47,
      -1,    49,    50,    -1,    -1,    53,    -1,    -1,    56,    57,
      -1,    59,    60,    -1,    62,    63,    -1,    65,    66,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      78,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    -1,    90,    91,    -1,    93,    94,    95,    96,    97,
      -1,    99,    -1,    -1,   102,    -1,    -1,   105,    -1,    -1,
     108,    -1,   110,    -1,    -1,    -1,   114,   115,   116,    -1,
      -1,   119,    -1,    -1,    -1,    -1,   124,   125,    -1,    -1,
      -1,    -1,   130,    -1,   132,    -1,    -1,    -1,   136,    -1,
     138,   139,   140,   141,    -1,    -1,    -1,   145,    -1,    -1,
     148,   149,   150,    -1,    -1,    -1,   154,    -1,   156,   157,
      -1,   159,   160,   161,    -1,    -1,   164,   165,    -1,   167,
     168,   169,   170,   171,   172,    -1,    -1,   175,   176,   177,
      -1,    -1,   180,   181,    -1,   183,   184,   185,    -1,    -1,
     188,    -1,    -1,    -1,   192,    -1,   194,    -1,   196,    -1,
     198,   199,   200,   201,   202,   203,    -1,   205,    -1,    -1,
      -1,   209,   210,   211,    -1,   213,    -1,    -1,    -1,   217,
     218,    -1,    -1,    -1,   222,   223,   224,   225,    -1,    -1,
     228,   229,   230,    -1,   232,    -1,   234,    -1,    -1,    -1,
      -1,   239,   240,    -1,    -1,    -1,   244,    -1,   246,   247,
      -1,   249,   250,    -1,    -1,    -1,   254,    -1,    -1,   257,
     258,   259,    -1,    -1,   262,    -1,    -1,   265,   266,   267,
      -1,    -1,    -1,    -1,   272,   273,    -1,   275,    -1,   277,
      -1,   279,   280,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,    -1,   305,   306,   307,
     308,    -1,   310,   311,   312,   313,    -1,   315,   316,    -1,
      -1,    -1,    -1,   321,   322,   323,   324,   325,   326,    -1,
      -1,   329,   330,    -1,   332,    -1,   334,    -1,   336,   337,
     338,   339,   340,   341,   342,   343,   344,    -1,    -1,   347,
     348,    -1,    -1,   351,   352,   353,   354,    -1,    -1,    -1,
     358,   359,    -1,    -1,    -1,    -1,   364,   365,   366,    -1,
     368,   369,   370,   371,    -1,   373,   374,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   383,   384,   385,    -1,    -1,
     388,    -1,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,    -1,    -1,   404,   405,   406,    -1,
     408,    -1,   410,   411,   412,   413,   414,    -1,   416,   417,
     418,    -1,    -1,   421,    -1,    -1,    -1,   425,   426,   427,
     428,   429,    -1,    -1,   432,   433,   434,   435,   436,    -1,
     438,   439,    -1,   441,   442,   443,    -1,    -1,   446,    -1,
     448,    -1,   450,   451,    -1,   453,   454,    -1,    -1,    -1,
     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
      -1,   469,   470,    -1,    -1,    -1,   474,   475,   476,   477,
      -1,    -1,    -1,   481,    -1,    -1,    -1,   485,    -1,   487,
     488,   489,   490,   491,   492,    -1,   494,   495,   496,   497,
     498,   499,    -1,    -1,    -1,    -1,    -1,    -1,   506,   507,
      -1,   509,    -1,    -1,   512,    -1,    -1,   515,   516,   517,
      -1,    -1,   520,   521,    -1,   523,   524,   525,   526,   527,
     528,    -1,    -1,   531,   532,   533,   534,    -1,   536,   537,
      -1,   539,    -1,   541,   542,   543,   544,    -1,   546,   547,
     548,    -1,   550,   551,   552,   553,    -1,    -1,    -1,    -1,
      -1,   559,   560,   561,    -1,    -1,    -1,   565,   566,   567,
     568,    -1,   570,   571,    -1,   573,   574,    -1,   576,   577,
      -1,    -1,   580,    -1,    -1,   583,    -1,   585,    -1,   587,
     588,   589,    -1,    -1,    -1,    -1,    -1,    -1,   596,    -1,
      -1,   599,    -1,    -1,    -1,   603,   604,   605,   606,   607,
     608,    -1,    -1,    -1,    -1,    -1,    -1,   615,   616,    -1,
     618,   619,   620,    -1,     5,   623,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    19,    -1,
      21,    -1,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    32,    -1,    -1,    -1,    36,    -1,    -1,    -1,    40,
      -1,    -1,    43,    44,    45,    -1,    47,    -1,    49,    50,
      -1,    -1,    53,    -1,    -1,    56,    57,    -1,    59,    60,
      -1,    62,    63,    -1,    65,    66,    67,    68,    69,    70,
      71,    -1,    73,    74,    75,    76,    77,    78,    79,    -1,
      81,    82,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    -1,    93,    94,    95,    96,    97,    -1,    99,    -1,
      -1,   102,    -1,    -1,   105,    -1,    -1,   108,    -1,   110,
      -1,    -1,    -1,   114,   115,   116,    -1,    -1,   119,    -1,
      -1,    -1,    -1,   124,   125,    -1,    -1,    -1,    -1,   130,
      -1,   132,    -1,    -1,    -1,   136,    -1,   138,   139,   140,
     141,    -1,    -1,    -1,   145,    -1,    -1,   148,   149,   150,
      -1,    -1,    -1,   154,    -1,   156,   157,    -1,   159,   160,
     161,    -1,    -1,   164,   165,    -1,   167,   168,   169,   170,
     171,   172,    -1,    -1,   175,   176,   177,    -1,    -1,   180,
     181,    -1,   183,   184,   185,    -1,    -1,   188,    -1,    -1,
      -1,   192,    -1,   194,    -1,   196,    -1,   198,   199,   200,
     201,   202,   203,    -1,   205,    -1,    -1,    -1,   209,   210,
     211,    -1,   213,    -1,    -1,    -1,   217,   218,    -1,    -1,
      -1,   222,   223,   224,   225,    -1,    -1,   228,   229,   230,
      -1,   232,    -1,   234,    -1,    -1,    -1,    -1,   239,   240,
      -1,    -1,    -1,   244,    -1,   246,   247,    -1,   249,   250,
      -1,    -1,    -1,   254,    -1,    -1,   257,   258,   259,    -1,
      -1,   262,    -1,    -1,   265,   266,    -1,    -1,    -1,    -1,
      -1,   272,   273,    -1,   275,    -1,   277,    -1,   279,   280,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,    -1,   305,   306,   307,   308,    -1,   310,
     311,   312,   313,    -1,   315,   316,    -1,    -1,    -1,    -1,
     321,   322,   323,   324,   325,   326,    -1,    -1,   329,   330,
      -1,   332,    -1,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,   344,    -1,    -1,   347,   348,    -1,    -1,
     351,   352,   353,   354,    -1,    -1,    -1,   358,   359,    -1,
      -1,    -1,    -1,   364,   365,   366,    -1,   368,   369,   370,
     371,    -1,   373,   374,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   383,   384,   385,    -1,    -1,   388,    -1,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,    -1,    -1,   404,   405,   406,    -1,   408,    -1,   410,
     411,   412,   413,   414,    -1,   416,   417,   418,    -1,    -1,
     421,    -1,    -1,    -1,   425,   426,   427,   428,   429,    -1,
      -1,   432,   433,   434,   435,   436,    -1,   438,   439,    -1,
     441,   442,   443,    -1,    -1,   446,    -1,   448,    -1,   450,
     451,    -1,   453,   454,    -1,    -1,    -1,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   467,    -1,   469,   470,
      -1,    -1,    -1,   474,   475,   476,   477,    -1,    -1,    -1,
     481,    -1,    -1,    -1,   485,    -1,   487,   488,   489,   490,
     491,   492,    -1,   494,   495,   496,   497,   498,   499,    -1,
      -1,    -1,    -1,    -1,    -1,   506,   507,    -1,   509,    -1,
      -1,   512,    -1,    -1,   515,   516,   517,    -1,    -1,   520,
     521,    -1,   523,   524,   525,   526,   527,   528,    -1,    -1,
     531,   532,   533,   534,    -1,   536,   537,    -1,   539,    -1,
     541,   542,   543,   544,    -1,   546,   547,   548,    -1,   550,
     551,   552,   553,    -1,    -1,    -1,    -1,    -1,   559,   560,
     561,    -1,    -1,    -1,   565,   566,   567,   568,    -1,   570,
     571,    -1,   573,   574,    -1,   576,   577,    -1,    -1,   580,
      -1,    -1,   583,    -1,   585,    -1,   587,   588,   589,    -1,
      -1,    -1,    -1,    -1,    -1,   596,    -1,    -1,   599,    -1,
      -1,    -1,   603,   604,   605,   606,   607,   608,    -1,    -1,
      -1,    -1,    -1,    -1,   615,   616,    -1,   618,   619,   620,
      -1,     5,   623,     7,     8,     9,    10,    11,    -1,    -1,
      14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    -1,
      -1,    -1,    36,    -1,    -1,    -1,    40,    -1,    -1,    43,
      44,    45,    -1,    47,    -1,    49,    50,    -1,    -1,    53,
      -1,    -1,    56,    57,    -1,    59,    60,    -1,    62,    63,
      -1,    65,    66,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    78,    79,    -1,    81,    82,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    -1,    93,
      94,    95,    96,    97,    98,    99,    -1,    -1,   102,    -1,
      -1,   105,    -1,    -1,   108,    -1,   110,    -1,    -1,    -1,
     114,   115,   116,    -1,    -1,   119,    -1,    -1,    -1,    -1,
     124,   125,    -1,    -1,    -1,    -1,   130,    -1,   132,    -1,
      -1,    -1,   136,    -1,   138,   139,   140,   141,    -1,    -1,
      -1,   145,    -1,    -1,   148,   149,   150,    -1,    -1,    -1,
     154,    -1,   156,   157,    -1,   159,   160,   161,    -1,    -1,
     164,   165,    -1,   167,   168,   169,   170,   171,   172,    -1,
     174,   175,   176,   177,    -1,    -1,   180,   181,    -1,   183,
     184,   185,    -1,    -1,   188,    -1,    -1,    -1,   192,    -1,
     194,    -1,   196,    -1,   198,   199,   200,   201,   202,   203,
      -1,   205,    -1,    -1,    -1,   209,   210,   211,    -1,   213,
      -1,    -1,    -1,   217,   218,    -1,    -1,    -1,   222,   223,
     224,   225,    -1,    -1,   228,   229,   230,    -1,   232,    -1,
     234,    -1,    -1,    -1,    -1,   239,   240,    -1,    -1,    -1,
     244,    -1,   246,   247,    -1,   249,   250,    -1,    -1,    -1,
     254,    -1,    -1,   257,   258,   259,    -1,    -1,   262,    -1,
      -1,   265,   266,    -1,    -1,    -1,    -1,    -1,   272,   273,
      -1,   275,    -1,   277,    -1,   279,   280,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
      -1,   305,   306,   307,   308,    -1,   310,   311,   312,   313,
      -1,   315,   316,    -1,    -1,    -1,    -1,   321,   322,   323,
     324,   325,   326,    -1,    -1,   329,   330,    -1,   332,    -1,
     334,    -1,   336,   337,   338,   339,   340,   341,   342,   343,
     344,    -1,    -1,   347,   348,    -1,    -1,   351,   352,   353,
     354,    -1,    -1,    -1,   358,   359,    -1,    -1,    -1,    -1,
     364,   365,   366,    -1,   368,   369,   370,   371,    -1,   373,
     374,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   383,
     384,   385,    -1,    -1,   388,    -1,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,    -1,    -1,
     404,   405,   406,    -1,   408,    -1,   410,   411,   412,   413,
     414,    -1,   416,   417,   418,    -1,    -1,   421,    -1,    -1,
      -1,   425,   426,   427,   428,   429,    -1,    -1,   432,   433,
     434,   435,   436,    -1,   438,   439,    -1,   441,   442,   443,
      -1,    -1,   446,    -1,   448,    -1,   450,   451,    -1,   453,
     454,    -1,    -1,    -1,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,    -1,   469,   470,    -1,    -1,    -1,
     474,   475,   476,   477,    -1,    -1,    -1,   481,    -1,    -1,
      -1,   485,    -1,   487,   488,   489,   490,   491,   492,    -1,
     494,   495,   496,   497,   498,   499,    -1,    -1,    -1,    -1,
      -1,    -1,   506,   507,    -1,   509,    -1,    -1,   512,    -1,
      -1,   515,   516,   517,    -1,    -1,   520,   521,    -1,   523,
     524,   525,   526,   527,   528,    -1,    -1,   531,   532,   533,
     534,    -1,   536,   537,    -1,   539,    -1,   541,   542,   543,
     544,    -1,    -1,   547,   548,    -1,   550,   551,   552,   553,
      -1,    -1,    -1,    -1,    -1,   559,   560,   561,    -1,    -1,
      -1,   565,   566,   567,   568,    -1,   570,   571,    -1,   573,
     574,    -1,   576,   577,    -1,    -1,   580,    -1,    -1,   583,
      -1,   585,    -1,   587,   588,   589,    -1,    -1,    -1,    -1,
      -1,    -1,   596,    -1,    -1,   599,    -1,    -1,    -1,   603,
     604,   605,   606,   607,   608,    -1,    -1,    -1,    -1,    -1,
      -1,   615,   616,    -1,   618,   619,   620,    -1,     5,   623,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    32,    -1,    -1,    -1,    36,
      -1,    -1,    -1,    40,    -1,    -1,    43,    44,    45,    -1,
      47,    -1,    49,    50,    -1,    -1,    53,    -1,    -1,    56,
      57,    -1,    59,    60,    -1,    62,    63,    -1,    65,    66,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      77,    78,    79,    -1,    81,    82,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    -1,    93,    94,    95,    96,
      97,    -1,    99,    -1,    -1,   102,    -1,    -1,   105,    -1,
      -1,   108,    -1,   110,    -1,    -1,    -1,   114,   115,   116,
      -1,    -1,   119,    -1,    -1,    -1,    -1,   124,   125,    -1,
      -1,    -1,    -1,   130,    -1,   132,    -1,    -1,    -1,   136,
      -1,   138,   139,   140,   141,    -1,    -1,    -1,   145,    -1,
      -1,   148,   149,   150,    -1,    -1,    -1,   154,    -1,   156,
     157,    -1,   159,   160,   161,    -1,    -1,   164,   165,    -1,
     167,   168,   169,   170,   171,   172,    -1,    -1,   175,   176,
     177,    -1,    -1,   180,   181,    -1,   183,   184,   185,    -1,
      -1,   188,    -1,    -1,    -1,   192,    -1,   194,    -1,   196,
      -1,   198,   199,   200,   201,   202,   203,    -1,   205,    -1,
      -1,    -1,   209,   210,   211,    -1,   213,    -1,    -1,    -1,
     217,   218,    -1,    -1,    -1,   222,   223,   224,   225,    -1,
      -1,   228,   229,   230,    -1,   232,    -1,   234,    -1,    -1,
      -1,    -1,   239,   240,    -1,    -1,    -1,   244,    -1,   246,
     247,    -1,   249,   250,    -1,    -1,    -1,   254,    -1,    -1,
     257,   258,   259,    -1,    -1,   262,    -1,    -1,   265,   266,
      -1,    -1,    -1,    -1,    -1,   272,   273,    -1,   275,    -1,
     277,    -1,   279,   280,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,    -1,   305,   306,
     307,   308,    -1,   310,   311,   312,   313,    -1,   315,   316,
      -1,    -1,    -1,    -1,   321,   322,   323,   324,   325,   326,
      -1,    -1,   329,   330,    -1,   332,    -1,   334,    -1,   336,
     337,   338,   339,   340,   341,   342,   343,   344,    -1,    -1,
     347,   348,    -1,    -1,   351,   352,   353,   354,    -1,    -1,
      -1,   358,   359,    -1,    -1,    -1,    -1,   364,   365,   366,
      -1,   368,   369,   370,   371,    -1,   373,   374,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   383,   384,   385,    -1,
      -1,   388,    -1,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,    -1,    -1,   404,   405,   406,
      -1,   408,    -1,   410,   411,   412,   413,   414,    -1,   416,
     417,   418,    -1,    -1,   421,    -1,    -1,    -1,   425,   426,
     427,   428,   429,    -1,    -1,   432,   433,   434,   435,   436,
      -1,   438,   439,    -1,   441,   442,   443,    -1,    -1,   446,
      -1,   448,    -1,   450,   451,    -1,   453,   454,    -1,    -1,
      -1,   458,   459,   460,   461,   462,   463,   464,   465,   466,
     467,    -1,   469,   470,    -1,    -1,    -1,   474,   475,   476,
     477,    -1,    -1,    -1,   481,    -1,    -1,    -1,   485,    -1,
     487,   488,   489,   490,   491,   492,    -1,   494,   495,   496,
     497,   498,   499,    -1,    -1,    -1,   503,    -1,    -1,   506,
     507,    -1,   509,    -1,    -1,   512,    -1,    -1,   515,   516,
     517,    -1,    -1,   520,   521,    -1,   523,   524,   525,   526,
     527,   528,    -1,    -1,   531,   532,   533,   534,    -1,   536,
     537,    -1,   539,    -1,   541,   542,   543,   544,    -1,    -1,
     547,   548,    -1,   550,   551,   552,   553,    -1,    -1,    -1,
      -1,    -1,   559,   560,   561,    -1,    -1,    -1,   565,   566,
     567,   568,    -1,   570,   571,    -1,   573,   574,    -1,   576,
     577,    -1,    -1,   580,    -1,    -1,   583,    -1,   585,    -1,
     587,   588,   589,    -1,    -1,    -1,    -1,    -1,    -1,   596,
      -1,    -1,   599,    -1,    -1,    -1,   603,   604,   605,   606,
     607,   608,    -1,    -1,    -1,    -1,    -1,    -1,   615,   616,
      -1,   618,   619,   620,    -1,     5,   623,     7,     8,     9,
      10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,
      -1,    21,    -1,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    -1,    -1,    -1,    36,    -1,    -1,    -1,
      40,    -1,    -1,    43,    44,    45,    -1,    47,    -1,    49,
      50,    -1,    -1,    53,    -1,    -1,    56,    57,    -1,    59,
      60,    -1,    62,    63,    -1,    65,    66,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    77,    78,    79,
      -1,    81,    82,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    -1,    93,    94,    95,    96,    97,    -1,    99,
      -1,    -1,   102,    -1,    -1,   105,    -1,    -1,   108,    -1,
     110,    -1,    -1,    -1,   114,   115,   116,    -1,    -1,   119,
      -1,    -1,    -1,    -1,   124,   125,    -1,    -1,    -1,    -1,
     130,    -1,   132,    -1,    -1,    -1,   136,    -1,   138,   139,
     140,   141,    -1,    -1,    -1,   145,    -1,    -1,   148,   149,
     150,    -1,    -1,    -1,   154,    -1,   156,   157,    -1,   159,
     160,   161,    -1,    -1,   164,   165,    -1,   167,   168,   169,
     170,   171,   172,    -1,    -1,   175,   176,   177,    -1,    -1,
     180,   181,    -1,   183,   184,   185,    -1,    -1,   188,    -1,
      -1,    -1,   192,   193,   194,    -1,   196,    -1,   198,   199,
     200,   201,   202,   203,    -1,   205,    -1,    -1,    -1,   209,
     210,   211,    -1,   213,    -1,    -1,    -1,   217,   218,    -1,
      -1,    -1,   222,   223,   224,   225,    -1,    -1,   228,   229,
     230,    -1,   232,    -1,   234,    -1,    -1,    -1,    -1,   239,
     240,    -1,    -1,    -1,   244,    -1,   246,   247,    -1,   249,
     250,    -1,    -1,    -1,   254,    -1,    -1,   257,   258,   259,
      -1,    -1,   262,    -1,    -1,   265,   266,    -1,    -1,    -1,
      -1,    -1,   272,   273,    -1,   275,    -1,   277,    -1,   279,
     280,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,    -1,   305,   306,   307,   308,    -1,
     310,   311,   312,   313,    -1,   315,   316,    -1,    -1,    -1,
      -1,   321,   322,   323,   324,   325,   326,    -1,    -1,   329,
     330,    -1,   332,    -1,   334,    -1,   336,   337,   338,   339,
     340,   341,   342,   343,   344,    -1,    -1,   347,   348,    -1,
      -1,   351,   352,   353,   354,    -1,    -1,    -1,   358,   359,
      -1,    -1,    -1,    -1,   364,   365,   366,    -1,   368,   369,
     370,   371,    -1,   373,   374,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   383,   384,   385,    -1,    -1,   388,    -1,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,    -1,    -1,   404,   405,   406,    -1,   408,    -1,
     410,   411,   412,   413,   414,    -1,   416,   417,   418,    -1,
      -1,   421,    -1,    -1,    -1,   425,   426,   427,   428,   429,
      -1,    -1,   432,   433,   434,   435,   436,    -1,   438,   439,
      -1,   441,   442,   443,    -1,    -1,   446,    -1,   448,    -1,
     450,   451,    -1,   453,   454,    -1,    -1,    -1,   458,   459,
     460,   461,   462,   463,   464,   465,   466,   467,    -1,   469,
     470,    -1,    -1,    -1,   474,   475,   476,   477,    -1,    -1,
      -1,   481,    -1,    -1,    -1,   485,    -1,   487,   488,   489,
     490,   491,   492,    -1,   494,   495,   496,   497,   498,   499,
      -1,    -1,    -1,    -1,    -1,    -1,   506,   507,    -1,   509,
      -1,    -1,   512,    -1,    -1,   515,   516,   517,    -1,    -1,
     520,   521,    -1,   523,   524,   525,   526,   527,   528,    -1,
      -1,   531,   532,   533,   534,    -1,   536,   537,    -1,   539,
      -1,   541,   542,   543,   544,    -1,    -1,   547,   548,    -1,
     550,   551,   552,   553,    -1,    -1,    -1,    -1,    -1,   559,
     560,   561,    -1,    -1,    -1,   565,   566,   567,   568,    -1,
     570,   571,    -1,   573,   574,    -1,   576,   577,    -1,    -1,
     580,    -1,    -1,   583,    -1,   585,    -1,   587,   588,   589,
      -1,    -1,    -1,    -1,    -1,    -1,   596,    -1,    -1,   599,
      -1,    -1,    -1,   603,   604,   605,   606,   607,   608,    -1,
      -1,    -1,    -1,    -1,    -1,   615,   616,    -1,   618,   619,
     620,    -1,     5,   623,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,
      23,    24,    25,    26,    27,    28,    29,    30,    -1,    32,
      -1,    -1,    -1,    36,    -1,    -1,    -1,    40,    -1,    -1,
      43,    44,    45,    -1,    47,    -1,    49,    50,    -1,    -1,
      53,    -1,    -1,    56,    57,    -1,    59,    60,    -1,    62,
      63,    -1,    65,    66,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    78,    79,    -1,    81,    82,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    -1,
      93,    94,    95,    96,    97,    -1,    99,    -1,    -1,   102,
      -1,    -1,   105,    -1,    -1,   108,    -1,   110,    -1,    -1,
      -1,   114,   115,   116,    -1,    -1,   119,    -1,    -1,    -1,
      -1,   124,   125,    -1,    -1,    -1,   129,   130,    -1,   132,
      -1,    -1,    -1,   136,    -1,   138,   139,   140,   141,    -1,
      -1,    -1,   145,    -1,    -1,   148,   149,   150,    -1,    -1,
      -1,   154,    -1,   156,   157,    -1,   159,   160,   161,    -1,
      -1,   164,   165,    -1,   167,   168,   169,   170,   171,   172,
      -1,    -1,   175,   176,   177,    -1,    -1,   180,   181,    -1,
     183,   184,   185,    -1,    -1,   188,    -1,    -1,    -1,   192,
      -1,   194,    -1,   196,    -1,   198,   199,   200,   201,   202,
     203,    -1,   205,    -1,    -1,    -1,   209,   210,   211,    -1,
     213,    -1,    -1,    -1,   217,   218,    -1,    -1,    -1,   222,
     223,   224,   225,    -1,    -1,   228,   229,   230,    -1,   232,
      -1,   234,    -1,    -1,    -1,    -1,   239,   240,    -1,    -1,
      -1,   244,    -1,   246,   247,    -1,   249,   250,    -1,    -1,
      -1,   254,    -1,    -1,   257,   258,   259,    -1,    -1,   262,
      -1,    -1,   265,   266,    -1,    -1,    -1,    -1,    -1,   272,
     273,    -1,   275,    -1,   277,    -1,   279,   280,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,    -1,   305,   306,   307,   308,    -1,   310,   311,   312,
     313,    -1,   315,   316,    -1,    -1,    -1,    -1,   321,   322,
     323,   324,   325,   326,    -1,    -1,   329,   330,    -1,   332,
      -1,   334,    -1,   336,   337,   338,   339,   340,   341,   342,
     343,   344,    -1,    -1,   347,   348,    -1,    -1,   351,   352,
     353,   354,    -1,    -1,    -1,   358,   359,    -1,    -1,    -1,
      -1,   364,   365,   366,    -1,   368,   369,   370,   371,    -1,
     373,   374,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     383,   384,   385,    -1,    -1,   388,    -1,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,    -1,
      -1,   404,   405,   406,    -1,   408,    -1,   410,   411,   412,
     413,   414,    -1,   416,   417,   418,    -1,    -1,   421,    -1,
      -1,    -1,   425,   426,   427,   428,   429,    -1,    -1,   432,
     433,   434,   435,   436,    -1,   438,   439,    -1,   441,   442,
     443,    -1,    -1,   446,    -1,   448,    -1,   450,   451,    -1,
     453,   454,    -1,    -1,    -1,   458,   459,   460,   461,   462,
     463,   464,   465,   466,   467,    -1,   469,   470,    -1,    -1,
      -1,   474,   475,   476,   477,    -1,    -1,    -1,   481,    -1,
      -1,    -1,   485,    -1,   487,   488,   489,   490,   491,   492,
      -1,   494,   495,   496,   497,   498,   499,    -1,    -1,    -1,
      -1,    -1,    -1,   506,   507,    -1,   509,    -1,    -1,   512,
      -1,    -1,   515,   516,   517,    -1,    -1,   520,   521,    -1,
     523,   524,   525,   526,   527,   528,    -1,    -1,   531,   532,
     533,   534,    -1,   536,   537,    -1,   539,    -1,   541,   542,
     543,   544,    -1,    -1,   547,   548,    -1,   550,   551,   552,
     553,    -1,    -1,    -1,    -1,    -1,   559,   560,   561,    -1,
      -1,    -1,   565,   566,   567,   568,    -1,   570,   571,    -1,
     573,   574,    -1,   576,   577,    -1,    -1,   580,    -1,    -1,
     583,    -1,   585,    -1,   587,   588,   589,    -1,    -1,    -1,
      -1,    -1,    -1,   596,    -1,    -1,   599,    -1,    -1,    -1,
     603,   604,   605,   606,   607,   608,    -1,    -1,    -1,    -1,
      -1,    -1,   615,   616,    -1,   618,   619,   620,    -1,     5,
     623,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,
      26,    27,    28,    29,    30,    -1,    32,    -1,    -1,    -1,
      36,    -1,    -1,    -1,    40,    -1,    -1,    43,    44,    45,
      -1,    47,    -1,    49,    50,    -1,    -1,    53,    -1,    -1,
      56,    57,    -1,    59,    60,    -1,    62,    63,    -1,    65,
      66,    67,    68,    69,    70,    71,    -1,    73,    74,    75,
      76,    77,    78,    79,    -1,    81,    82,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    -1,    93,    94,    95,
      96,    97,    -1,    99,    -1,    -1,   102,    -1,    -1,   105,
      -1,    -1,   108,    -1,   110,    -1,    -1,    -1,   114,   115,
     116,    -1,    -1,   119,    -1,    -1,    -1,    -1,   124,   125,
      -1,    -1,    -1,   129,   130,    -1,   132,    -1,    -1,    -1,
     136,    -1,   138,   139,   140,   141,    -1,    -1,    -1,   145,
      -1,    -1,   148,   149,   150,    -1,    -1,    -1,   154,    -1,
     156,   157,    -1,   159,   160,   161,    -1,    -1,   164,   165,
      -1,   167,   168,   169,   170,   171,   172,    -1,    -1,   175,
     176,   177,    -1,    -1,   180,   181,    -1,   183,   184,   185,
      -1,    -1,   188,    -1,    -1,    -1,   192,    -1,   194,    -1,
     196,    -1,   198,   199,   200,   201,   202,   203,    -1,   205,
      -1,    -1,    -1,   209,   210,   211,    -1,   213,    -1,    -1,
      -1,   217,   218,    -1,    -1,    -1,   222,   223,   224,   225,
      -1,    -1,   228,   229,   230,    -1,   232,    -1,   234,    -1,
      -1,    -1,    -1,   239,   240,    -1,    -1,    -1,   244,    -1,
     246,   247,    -1,   249,   250,    -1,    -1,    -1,   254,    -1,
      -1,   257,   258,   259,    -1,    -1,   262,    -1,    -1,   265,
     266,    -1,    -1,    -1,    -1,    -1,   272,   273,    -1,   275,
      -1,   277,    -1,   279,   280,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,    -1,   305,
     306,   307,   308,    -1,   310,   311,   312,   313,    -1,   315,
     316,    -1,    -1,    -1,    -1,   321,   322,   323,   324,   325,
     326,    -1,    -1,   329,   330,    -1,   332,    -1,   334,    -1,
     336,   337,   338,   339,   340,   341,   342,   343,   344,    -1,
      -1,   347,   348,    -1,    -1,   351,   352,   353,   354,    -1,
      -1,    -1,   358,   359,    -1,    -1,    -1,    -1,   364,   365,
     366,    -1,   368,   369,   370,   371,    -1,   373,   374,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   383,   384,   385,
      -1,    -1,   388,    -1,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,    -1,    -1,   404,   405,
     406,    -1,   408,    -1,   410,   411,   412,   413,   414,    -1,
     416,   417,   418,    -1,    -1,   421,    -1,    -1,    -1,   425,
     426,   427,   428,   429,    -1,    -1,   432,   433,   434,   435,
     436,    -1,   438,   439,    -1,   441,   442,   443,    -1,    -1,
     446,    -1,   448,    -1,   450,   451,    -1,   453,   454,    -1,
      -1,    -1,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,    -1,   469,   470,    -1,    -1,    -1,   474,   475,
     476,   477,    -1,    -1,    -1,   481,    -1,    -1,    -1,   485,
      -1,   487,   488,   489,   490,   491,   492,    -1,   494,   495,
     496,   497,   498,   499,    -1,    -1,    -1,    -1,    -1,    -1,
     506,   507,    -1,   509,    -1,    -1,   512,    -1,    -1,   515,
     516,   517,    -1,    -1,   520,   521,    -1,   523,   524,   525,
     526,   527,   528,    -1,    -1,   531,   532,   533,   534,    -1,
     536,   537,    -1,   539,    -1,   541,   542,   543,   544,    -1,
      -1,   547,   548,    -1,   550,   551,   552,   553,    -1,    -1,
      -1,    -1,    -1,   559,   560,   561,    -1,    -1,    -1,   565,
     566,   567,   568,    -1,   570,   571,    -1,   573,   574,    -1,
     576,   577,    -1,    -1,   580,    -1,    -1,   583,    -1,   585,
      -1,   587,   588,   589,    -1,    -1,    -1,    -1,    -1,    -1,
     596,    -1,    -1,   599,    -1,    -1,    -1,   603,   604,   605,
     606,   607,   608,    -1,    -1,    -1,    -1,    -1,    -1,   615,
     616,    -1,   618,   619,   620,    -1,     5,   623,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      -1,    -1,    21,    -1,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    32,    -1,    -1,    -1,    36,    -1,    -1,
      -1,    40,    -1,    -1,    43,    44,    45,    -1,    47,    -1,
      49,    50,    -1,    -1,    53,    -1,    -1,    56,    57,    -1,
      59,    60,    -1,    62,    63,    -1,    65,    66,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    78,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    -1,    93,    94,    95,    96,    97,    -1,
      99,    -1,    -1,   102,    -1,    -1,   105,    -1,    -1,   108,
      -1,   110,    -1,    -1,    -1,   114,   115,   116,    -1,    -1,
     119,    -1,    -1,    -1,    -1,   124,   125,    -1,    -1,    -1,
     129,   130,    -1,   132,    -1,    -1,    -1,   136,    -1,   138,
     139,   140,   141,    -1,    -1,    -1,   145,    -1,    -1,   148,
     149,   150,    -1,    -1,    -1,   154,    -1,   156,   157,    -1,
     159,   160,   161,    -1,    -1,   164,   165,    -1,   167,   168,
     169,   170,   171,   172,    -1,    -1,   175,   176,   177,    -1,
      -1,   180,   181,    -1,   183,   184,   185,    -1,    -1,   188,
      -1,    -1,    -1,   192,    -1,   194,    -1,   196,    -1,   198,
     199,   200,   201,   202,   203,    -1,   205,    -1,    -1,    -1,
     209,   210,   211,    -1,   213,    -1,    -1,    -1,   217,   218,
      -1,    -1,    -1,   222,   223,   224,   225,    -1,    -1,   228,
     229,   230,    -1,   232,    -1,   234,    -1,    -1,    -1,    -1,
     239,   240,    -1,    -1,    -1,   244,    -1,   246,   247,    -1,
     249,   250,    -1,    -1,    -1,   254,    -1,    -1,   257,   258,
     259,    -1,    -1,   262,    -1,    -1,   265,   266,    -1,    -1,
      -1,    -1,    -1,   272,   273,    -1,   275,    -1,   277,    -1,
     279,   280,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,    -1,   305,   306,   307,   308,
      -1,   310,   311,   312,   313,    -1,   315,   316,    -1,    -1,
      -1,    -1,   321,   322,   323,   324,   325,   326,    -1,    -1,
     329,   330,    -1,   332,    -1,   334,    -1,   336,   337,   338,
     339,   340,   341,   342,   343,   344,    -1,    -1,   347,   348,
      -1,    -1,   351,   352,   353,   354,    -1,    -1,    -1,   358,
     359,    -1,    -1,    -1,    -1,   364,   365,   366,    -1,   368,
     369,   370,   371,    -1,   373,   374,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   383,   384,   385,    -1,    -1,   388,
      -1,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,    -1,    -1,   404,   405,   406,    -1,   408,
      -1,   410,   411,   412,   413,   414,    -1,   416,   417,   418,
      -1,    -1,   421,    -1,    -1,    -1,   425,   426,   427,   428,
     429,    -1,    -1,   432,   433,   434,   435,   436,    -1,   438,
     439,    -1,   441,   442,   443,    -1,    -1,   446,    -1,   448,
      -1,   450,   451,    -1,   453,   454,    -1,    -1,    -1,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,    -1,
     469,   470,    -1,    -1,    -1,   474,   475,   476,   477,    -1,
      -1,    -1,   481,    -1,    -1,    -1,   485,    -1,   487,   488,
     489,   490,   491,   492,    -1,   494,   495,   496,   497,   498,
     499,    -1,    -1,    -1,    -1,    -1,    -1,   506,   507,    -1,
     509,    -1,    -1,   512,    -1,    -1,   515,   516,   517,    -1,
      -1,   520,   521,    -1,   523,   524,   525,   526,   527,   528,
      -1,    -1,   531,   532,   533,   534,    -1,   536,   537,    -1,
     539,    -1,   541,   542,   543,   544,    -1,    -1,   547,   548,
      -1,   550,   551,   552,   553,    -1,    -1,    -1,    -1,    -1,
     559,   560,   561,    -1,    -1,    -1,   565,   566,   567,   568,
      -1,   570,   571,    -1,   573,   574,    -1,   576,   577,    -1,
      -1,   580,    -1,    -1,   583,    -1,   585,    -1,   587,   588,
     589,    -1,    -1,    -1,    -1,    -1,    -1,   596,    -1,    -1,
     599,    -1,    -1,    -1,   603,   604,   605,   606,   607,   608,
      -1,    -1,    -1,    -1,    -1,    -1,   615,   616,    -1,   618,
     619,   620,    -1,     5,   623,     7,     8,     9,    10,    11,
      12,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,
      -1,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      32,    -1,    -1,    -1,    36,    -1,    -1,    -1,    40,    -1,
      -1,    43,    44,    45,    -1,    47,    -1,    49,    50,    -1,
      -1,    53,    -1,    -1,    56,    57,    -1,    59,    60,    -1,
      62,    63,    -1,    65,    66,    67,    68,    69,    70,    71,
      -1,    73,    74,    75,    76,    77,    78,    79,    -1,    81,
      82,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      -1,    93,    94,    95,    96,    97,    -1,    99,    -1,    -1,
     102,    -1,    -1,   105,    -1,    -1,   108,    -1,   110,    -1,
      -1,    -1,   114,   115,   116,    -1,    -1,   119,    -1,    -1,
      -1,    -1,   124,   125,    -1,    -1,    -1,    -1,   130,    -1,
     132,    -1,    -1,    -1,   136,    -1,   138,   139,   140,   141,
      -1,    -1,    -1,   145,    -1,    -1,   148,   149,   150,    -1,
      -1,    -1,   154,    -1,   156,   157,    -1,   159,   160,   161,
      -1,    -1,   164,   165,    -1,   167,   168,   169,   170,   171,
     172,    -1,    -1,   175,   176,   177,    -1,    -1,   180,   181,
      -1,   183,   184,   185,    -1,    -1,   188,    -1,    -1,    -1,
     192,    -1,   194,    -1,   196,    -1,   198,   199,   200,   201,
     202,   203,    -1,   205,    -1,    -1,    -1,   209,   210,   211,
      -1,   213,    -1,    -1,    -1,   217,   218,    -1,    -1,    -1,
     222,   223,   224,   225,    -1,    -1,   228,   229,   230,    -1,
     232,    -1,   234,    -1,    -1,    -1,    -1,   239,   240,    -1,
      -1,    -1,   244,    -1,   246,   247,    -1,   249,   250,    -1,
      -1,    -1,   254,    -1,    -1,   257,   258,   259,    -1,    -1,
     262,    -1,    -1,   265,   266,    -1,    -1,    -1,    -1,    -1,
     272,   273,    -1,   275,    -1,   277,    -1,   279,   280,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,    -1,   305,   306,   307,   308,    -1,   310,   311,
     312,   313,    -1,   315,   316,    -1,    -1,    -1,    -1,   321,
     322,   323,   324,   325,   326,    -1,    -1,   329,   330,    -1,
     332,    -1,   334,    -1,   336,   337,   338,   339,   340,   341,
     342,   343,   344,    -1,    -1,   347,   348,    -1,    -1,   351,
     352,   353,   354,    -1,    -1,    -1,   358,   359,    -1,    -1,
      -1,    -1,   364,   365,   366,    -1,   368,   369,   370,   371,
      -1,   373,   374,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   383,   384,   385,    -1,    -1,   388,    -1,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
      -1,    -1,   404,   405,   406,    -1,   408,    -1,   410,   411,
     412,   413,   414,    -1,   416,   417,   418,    -1,    -1,   421,
      -1,    -1,    -1,   425,   426,   427,   428,   429,    -1,    -1,
     432,   433,   434,   435,   436,    -1,   438,   439,    -1,   441,
     442,   443,    -1,    -1,   446,    -1,   448,    -1,   450,   451,
      -1,   453,   454,    -1,    -1,    -1,   458,   459,   460,   461,
     462,   463,   464,   465,   466,   467,    -1,   469,   470,    -1,
      -1,    -1,   474,   475,   476,   477,    -1,    -1,    -1,   481,
      -1,    -1,    -1,   485,    -1,   487,   488,   489,   490,   491,
     492,    -1,   494,   495,   496,   497,   498,   499,    -1,    -1,
      -1,    -1,    -1,    -1,   506,   507,    -1,   509,    -1,    -1,
     512,    -1,    -1,   515,   516,   517,    -1,    -1,   520,   521,
      -1,   523,   524,   525,   526,   527,   528,    -1,    -1,   531,
     532,   533,   534,    -1,   536,   537,    -1,   539,    -1,   541,
     542,   543,   544,    -1,    -1,   547,   548,    -1,   550,   551,
     552,   553,    -1,    -1,    -1,    -1,    -1,   559,   560,   561,
      -1,    -1,    -1,   565,   566,   567,   568,    -1,   570,   571,
      -1,   573,   574,    -1,   576,   577,    -1,    -1,   580,    -1,
      -1,   583,    -1,   585,    -1,   587,   588,   589,    -1,    -1,
      -1,    -1,    -1,    -1,   596,    -1,    -1,   599,    -1,    -1,
      -1,   603,   604,   605,   606,   607,   608,    -1,    -1,    -1,
      -1,    -1,    -1,   615,   616,    -1,   618,   619,   620,    -1,
       5,   623,     7,     8,     9,    10,    11,    -1,    -1,    14,
      -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,
      25,    26,    27,    28,    29,    30,    -1,    32,    -1,    -1,
      -1,    36,    -1,    -1,    -1,    40,    -1,    -1,    43,    44,
      45,    -1,    47,    -1,    49,    50,    -1,    -1,    53,    -1,
      -1,    56,    57,    -1,    59,    60,    -1,    62,    63,    -1,
      65,    66,    67,    68,    69,    70,    71,    -1,    73,    74,
      75,    76,    77,    78,    79,    -1,    81,    82,    83,    84,
      85,    86,    87,    88,    -1,    90,    91,    -1,    93,    94,
      95,    96,    97,    -1,    99,    -1,    -1,   102,    -1,    -1,
     105,    -1,    -1,   108,    -1,   110,    -1,    -1,    -1,   114,
     115,   116,    -1,    -1,   119,    -1,    -1,    -1,    -1,   124,
     125,    -1,    -1,    -1,    -1,   130,    -1,   132,    -1,    -1,
      -1,   136,    -1,   138,   139,   140,   141,    -1,    -1,    -1,
     145,    -1,    -1,   148,   149,   150,    -1,    -1,    -1,   154,
      -1,   156,   157,    -1,   159,   160,   161,    -1,    -1,   164,
     165,    -1,   167,   168,   169,   170,   171,   172,    -1,    -1,
     175,   176,   177,    -1,    -1,   180,   181,    -1,   183,   184,
     185,    -1,    -1,   188,    -1,    -1,    -1,   192,    -1,   194,
      -1,   196,    -1,   198,   199,   200,   201,   202,   203,    -1,
     205,    -1,    -1,    -1,   209,   210,   211,    -1,   213,    -1,
      -1,    -1,   217,   218,    -1,    -1,    -1,   222,   223,   224,
     225,    -1,    -1,   228,   229,   230,    -1,   232,    -1,   234,
      -1,    -1,    -1,    -1,   239,   240,    -1,    -1,    -1,   244,
      -1,   246,   247,    -1,   249,   250,    -1,    -1,    -1,   254,
      -1,    -1,   257,   258,   259,    -1,    -1,   262,    -1,    -1,
     265,   266,    -1,    -1,    -1,    -1,    -1,   272,   273,    -1,
     275,    -1,   277,    -1,   279,   280,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,    -1,
     305,   306,   307,   308,    -1,   310,   311,   312,   313,    -1,
     315,   316,    -1,    -1,    -1,    -1,   321,   322,   323,   324,
     325,   326,    -1,    -1,   329,   330,    -1,   332,    -1,   334,
      -1,   336,   337,   338,   339,   340,   341,   342,   343,   344,
      -1,    -1,   347,   348,    -1,    -1,   351,   352,   353,   354,
      -1,    -1,    -1,   358,   359,    -1,    -1,    -1,    -1,   364,
     365,   366,    -1,   368,   369,   370,   371,    -1,   373,   374,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   383,   384,
     385,    -1,    -1,   388,    -1,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,    -1,    -1,   404,
     405,   406,   407,   408,    -1,   410,   411,   412,   413,   414,
      -1,   416,   417,   418,    -1,    -1,   421,    -1,    -1,    -1,
     425,   426,   427,   428,   429,    -1,    -1,   432,   433,   434,
     435,   436,    -1,   438,   439,    -1,   441,   442,   443,    -1,
      -1,   446,    -1,   448,    -1,   450,   451,    -1,   453,   454,
      -1,    -1,    -1,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,    -1,   469,   470,    -1,    -1,    -1,   474,
     475,   476,   477,    -1,    -1,    -1,   481,    -1,    -1,    -1,
     485,    -1,   487,   488,   489,   490,   491,   492,    -1,   494,
     495,   496,   497,   498,   499,    -1,    -1,    -1,    -1,    -1,
      -1,   506,   507,    -1,   509,    -1,    -1,   512,    -1,    -1,
     515,   516,   517,    -1,    -1,   520,   521,    -1,   523,   524,
     525,   526,   527,   528,    -1,    -1,   531,   532,   533,   534,
      -1,   536,   537,    -1,   539,    -1,   541,   542,   543,   544,
      -1,    -1,   547,   548,    -1,   550,   551,   552,   553,    -1,
      -1,    -1,    -1,    -1,   559,   560,   561,    -1,    -1,    -1,
     565,   566,   567,   568,    -1,   570,   571,    -1,   573,   574,
      -1,   576,   577,    -1,    -1,   580,    -1,    -1,   583,    -1,
     585,    -1,   587,   588,   589,    -1,    -1,    -1,    -1,    -1,
      -1,   596,    -1,    -1,   599,    -1,    -1,    -1,   603,   604,
     605,   606,   607,   608,    -1,    -1,    -1,    -1,    -1,    -1,
     615,   616,    -1,   618,   619,   620,    -1,     5,   623,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,    -1,    -1,    21,    -1,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    32,    -1,    -1,    -1,    36,    -1,
      -1,    -1,    40,    -1,    -1,    43,    44,    45,    -1,    47,
      -1,    49,    50,    -1,    -1,    53,    -1,    -1,    56,    57,
      -1,    59,    60,    -1,    62,    63,    -1,    65,    66,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      78,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    -1,    90,    91,    -1,    93,    94,    95,    96,    97,
      -1,    99,    -1,    -1,   102,    -1,    -1,   105,    -1,    -1,
     108,    -1,   110,    -1,    -1,    -1,   114,   115,   116,    -1,
      -1,   119,    -1,    -1,    -1,    -1,   124,   125,    -1,    -1,
      -1,    -1,   130,    -1,   132,    -1,    -1,    -1,   136,    -1,
     138,   139,   140,   141,    -1,    -1,    -1,   145,    -1,    -1,
     148,   149,   150,    -1,    -1,    -1,   154,    -1,   156,   157,
      -1,   159,   160,   161,    -1,    -1,   164,   165,    -1,   167,
     168,   169,   170,   171,   172,    -1,    -1,   175,   176,   177,
      -1,    -1,   180,   181,    -1,   183,   184,   185,    -1,    -1,
     188,    -1,    -1,    -1,   192,    -1,   194,    -1,   196,    -1,
     198,   199,   200,   201,   202,   203,    -1,   205,    -1,    -1,
      -1,   209,   210,   211,    -1,   213,    -1,    -1,    -1,   217,
     218,    -1,    -1,    -1,   222,   223,   224,   225,    -1,    -1,
     228,   229,   230,    -1,   232,    -1,   234,    -1,    -1,    -1,
      -1,   239,   240,    -1,    -1,    -1,   244,    -1,   246,   247,
      -1,   249,   250,    -1,    -1,    -1,   254,    -1,    -1,   257,
     258,   259,    -1,    -1,   262,    -1,    -1,   265,   266,    -1,
      -1,    -1,    -1,    -1,   272,   273,    -1,   275,    -1,   277,
      -1,   279,   280,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,    -1,   305,   306,   307,
     308,    -1,   310,   311,   312,   313,    -1,   315,   316,    -1,
      -1,    -1,    -1,   321,   322,   323,   324,   325,   326,    -1,
      -1,   329,   330,    -1,   332,    -1,   334,    -1,   336,   337,
     338,   339,   340,   341,   342,   343,   344,    -1,    -1,   347,
     348,    -1,    -1,   351,   352,   353,   354,    -1,    -1,    -1,
     358,   359,    -1,    -1,    -1,    -1,   364,   365,   366,    -1,
     368,   369,   370,   371,    -1,   373,   374,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   383,   384,   385,    -1,    -1,
     388,    -1,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,    -1,    -1,   404,   405,   406,    -1,
     408,    -1,   410,   411,   412,   413,   414,    -1,   416,   417,
     418,    -1,    -1,   421,    -1,    -1,    -1,   425,   426,   427,
     428,   429,    -1,    -1,   432,   433,   434,   435,   436,    -1,
     438,   439,    -1,   441,   442,   443,    -1,    -1,   446,    -1,
     448,    -1,   450,   451,    -1,   453,   454,    -1,    -1,    -1,
     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
      -1,   469,   470,    -1,    -1,    -1,   474,   475,   476,   477,
      -1,    -1,    -1,   481,    -1,    -1,    -1,   485,    -1,   487,
     488,   489,   490,   491,   492,    -1,   494,   495,   496,   497,
     498,   499,    -1,    -1,    -1,    -1,    -1,    -1,   506,   507,
      -1,   509,    -1,    -1,   512,    -1,    -1,   515,   516,   517,
      -1,    -1,   520,   521,    -1,   523,   524,   525,   526,   527,
     528,    -1,    -1,   531,   532,   533,   534,    -1,   536,   537,
      -1,   539,    -1,   541,   542,   543,   544,    -1,   546,   547,
     548,    -1,   550,   551,   552,   553,    -1,    -1,    -1,    -1,
      -1,   559,   560,   561,    -1,    -1,    -1,   565,   566,   567,
     568,    -1,   570,   571,    -1,   573,   574,    -1,   576,   577,
      -1,    -1,   580,    -1,    -1,   583,    -1,   585,    -1,   587,
     588,   589,    -1,    -1,    -1,    -1,    -1,    -1,   596,    -1,
      -1,   599,    -1,    -1,    -1,   603,   604,   605,   606,   607,
     608,    -1,    -1,    -1,    -1,    -1,    -1,   615,   616,    -1,
     618,   619,   620,    -1,     5,   623,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      21,    -1,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    32,    -1,    -1,    -1,    36,    -1,    -1,    -1,    40,
      -1,    -1,    43,    44,    45,    -1,    47,    -1,    49,    50,
      -1,    -1,    53,    -1,    -1,    56,    57,    -1,    59,    60,
      -1,    62,    63,    -1,    65,    66,    67,    68,    69,    70,
      71,    -1,    73,    74,    75,    76,    77,    78,    79,    -1,
      81,    82,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    -1,    93,    94,    95,    96,    97,    -1,    99,    -1,
      -1,   102,    -1,    -1,   105,    -1,    -1,   108,    -1,   110,
      -1,    -1,    -1,   114,   115,   116,    -1,    -1,   119,    -1,
      -1,    -1,    -1,   124,   125,    -1,    -1,    -1,    -1,   130,
      -1,   132,    -1,    -1,    -1,   136,    -1,   138,   139,   140,
     141,    -1,    -1,    -1,   145,    -1,    -1,   148,   149,   150,
      -1,    -1,    -1,   154,    -1,   156,   157,    -1,   159,   160,
     161,    -1,    -1,   164,   165,    -1,   167,   168,   169,   170,
     171,   172,    -1,    -1,   175,   176,   177,    -1,    -1,   180,
     181,    -1,   183,   184,   185,    -1,    -1,   188,    -1,    -1,
      -1,   192,    -1,   194,    -1,   196,    -1,   198,   199,   200,
     201,   202,   203,    -1,   205,    -1,    -1,    -1,   209,   210,
     211,    -1,   213,    -1,    -1,    -1,   217,   218,    -1,    -1,
      -1,   222,   223,   224,   225,    -1,    -1,   228,   229,   230,
      -1,   232,    -1,   234,    -1,    -1,    -1,    -1,   239,   240,
      -1,    -1,    -1,   244,    -1,   246,   247,    -1,   249,   250,
      -1,    -1,    -1,   254,    -1,    -1,   257,   258,   259,    -1,
      -1,   262,    -1,    -1,   265,   266,    -1,    -1,    -1,    -1,
      -1,   272,   273,    -1,   275,    -1,   277,    -1,   279,   280,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,    -1,   305,   306,   307,   308,    -1,   310,
     311,   312,   313,    -1,   315,   316,    -1,    -1,    -1,    -1,
     321,   322,   323,   324,   325,   326,    -1,    -1,   329,   330,
      -1,   332,    -1,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,   344,    -1,    -1,   347,   348,    -1,    -1,
     351,   352,   353,   354,    -1,    -1,    -1,   358,   359,    -1,
      -1,    -1,    -1,   364,   365,   366,    -1,   368,   369,   370,
     371,    -1,   373,   374,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   383,   384,   385,    -1,    -1,   388,    -1,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,    -1,    -1,   404,   405,   406,   407,   408,    -1,   410,
     411,   412,   413,   414,    -1,   416,   417,   418,    -1,    -1,
     421,    -1,    -1,    -1,   425,   426,   427,   428,   429,    -1,
      -1,   432,   433,   434,   435,   436,    -1,   438,   439,    -1,
     441,   442,   443,    -1,    -1,   446,    -1,   448,    -1,   450,
     451,    -1,   453,   454,    -1,    -1,    -1,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   467,    -1,   469,   470,
      -1,    -1,    -1,   474,   475,   476,   477,    -1,    -1,    -1,
     481,    -1,    -1,    -1,   485,    -1,   487,   488,   489,   490,
     491,   492,    -1,   494,   495,   496,   497,   498,   499,    -1,
      -1,    -1,    -1,    -1,    -1,   506,   507,    -1,   509,    -1,
      -1,   512,    -1,    -1,   515,   516,   517,    -1,    -1,   520,
     521,    -1,   523,   524,   525,   526,   527,   528,    -1,    -1,
     531,   532,   533,   534,    -1,   536,   537,    -1,   539,    -1,
     541,   542,   543,   544,    -1,    -1,   547,   548,    -1,   550,
     551,   552,   553,    -1,    -1,    -1,    -1,    -1,   559,   560,
     561,    -1,    -1,    -1,   565,   566,   567,   568,    -1,   570,
     571,    -1,   573,   574,    -1,   576,   577,    -1,    -1,   580,
      -1,    -1,   583,    -1,   585,    -1,   587,   588,   589,    -1,
      -1,    -1,    -1,    -1,    -1,   596,    -1,    -1,   599,    -1,
      -1,    -1,   603,   604,   605,   606,   607,   608,    -1,    -1,
      -1,    -1,    -1,    -1,   615,   616,    -1,   618,   619,   620,
      -1,     5,   623,     7,     8,     9,    10,    11,    -1,    -1,
      14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    -1,
      -1,    -1,    36,    -1,    -1,    -1,    40,    -1,    -1,    43,
      44,    45,    -1,    47,    -1,    49,    50,    -1,    -1,    53,
      -1,    -1,    56,    57,    -1,    59,    60,    -1,    62,    63,
      -1,    65,    66,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    78,    79,    -1,    81,    82,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    -1,    93,
      94,    95,    96,    97,    -1,    99,    -1,    -1,   102,    -1,
      -1,   105,    -1,    -1,   108,    -1,   110,    -1,    -1,    -1,
     114,   115,   116,    -1,    -1,   119,    -1,    -1,    -1,    -1,
     124,   125,    -1,    -1,    -1,    -1,   130,    -1,   132,    -1,
      -1,    -1,   136,    -1,   138,   139,   140,   141,    -1,    -1,
      -1,   145,    -1,    -1,   148,   149,   150,    -1,    -1,    -1,
     154,    -1,   156,   157,    -1,   159,   160,   161,    -1,    -1,
     164,   165,    -1,   167,   168,   169,   170,   171,   172,    -1,
      -1,   175,   176,   177,    -1,    -1,   180,   181,    -1,   183,
     184,   185,    -1,    -1,   188,    -1,    -1,    -1,   192,    -1,
     194,    -1,   196,    -1,   198,   199,   200,   201,   202,   203,
      -1,   205,    -1,    -1,    -1,   209,   210,   211,    -1,   213,
      -1,    -1,    -1,   217,   218,    -1,    -1,    -1,   222,   223,
     224,   225,    -1,    -1,   228,   229,   230,    -1,   232,    -1,
     234,    -1,    -1,    -1,    -1,   239,   240,    -1,    -1,    -1,
     244,    -1,   246,   247,    -1,   249,   250,    -1,    -1,    -1,
     254,    -1,    -1,   257,   258,   259,    -1,    -1,   262,    -1,
      -1,   265,   266,    -1,    -1,    -1,    -1,    -1,   272,   273,
      -1,   275,    -1,   277,    -1,   279,   280,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
      -1,   305,   306,   307,   308,    -1,   310,   311,   312,   313,
      -1,   315,   316,    -1,    -1,    -1,    -1,   321,   322,   323,
     324,   325,   326,    -1,    -1,   329,   330,    -1,   332,    -1,
     334,    -1,   336,   337,   338,   339,   340,   341,   342,   343,
     344,    -1,    -1,   347,   348,    -1,    -1,   351,   352,   353,
     354,    -1,    -1,    -1,   358,   359,    -1,    -1,    -1,    -1,
     364,   365,   366,    -1,   368,   369,   370,   371,    -1,   373,
     374,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   383,
     384,   385,    -1,    -1,   388,    -1,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,    -1,    -1,
     404,   405,   406,    -1,   408,    -1,   410,   411,   412,   413,
     414,    -1,   416,   417,   418,    -1,    -1,   421,    -1,    -1,
      -1,   425,   426,   427,   428,   429,    -1,    -1,   432,   433,
     434,   435,   436,    -1,   438,   439,    -1,   441,   442,   443,
      -1,    -1,   446,    -1,   448,    -1,   450,   451,    -1,   453,
     454,    -1,    -1,    -1,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,    -1,   469,   470,    -1,    -1,    -1,
     474,   475,   476,   477,    -1,    -1,    -1,   481,    -1,    -1,
      -1,   485,    -1,   487,   488,   489,   490,   491,   492,    -1,
     494,   495,   496,   497,   498,   499,    -1,    -1,    -1,    -1,
      -1,    -1,   506,   507,    -1,   509,    -1,    -1,   512,    -1,
      -1,   515,   516,   517,    -1,    -1,   520,   521,    -1,   523,
     524,   525,   526,   527,   528,    -1,    -1,   531,   532,   533,
     534,    -1,   536,   537,    -1,   539,    -1,   541,   542,   543,
     544,    -1,    -1,   547,   548,    -1,   550,   551,   552,   553,
      -1,    -1,    -1,    -1,    -1,   559,   560,   561,    -1,    -1,
      -1,   565,   566,   567,   568,    -1,   570,   571,    -1,   573,
     574,    -1,   576,   577,    -1,    -1,   580,    -1,    -1,   583,
      -1,   585,    -1,   587,   588,   589,    -1,    -1,    -1,    -1,
      -1,    -1,   596,    -1,    -1,   599,    -1,    -1,    -1,   603,
     604,   605,   606,   607,   608,    -1,    -1,    -1,    -1,    -1,
      -1,   615,   616,    -1,   618,   619,   620,    -1,     5,   623,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    32,    -1,    -1,    -1,    36,
      -1,    -1,    -1,    40,    -1,    -1,    43,    44,    45,    -1,
      47,    -1,    49,    50,    -1,    -1,    53,    -1,    -1,    56,
      57,    -1,    59,    60,    -1,    62,    63,    -1,    65,    66,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      77,    78,    79,    -1,    81,    82,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    -1,    93,    94,    95,    96,
      97,    -1,    99,    -1,    -1,   102,    -1,    -1,   105,    -1,
      -1,   108,    -1,   110,    -1,    -1,    -1,   114,   115,   116,
      -1,    -1,   119,    -1,    -1,    -1,    -1,   124,   125,    -1,
      -1,    -1,    -1,   130,    -1,   132,    -1,    -1,    -1,   136,
      -1,   138,   139,   140,   141,    -1,    -1,    -1,   145,    -1,
      -1,   148,   149,   150,    -1,    -1,    -1,   154,    -1,   156,
     157,    -1,   159,   160,   161,    -1,    -1,   164,   165,    -1,
     167,   168,   169,   170,   171,   172,    -1,    -1,   175,   176,
     177,    -1,    -1,   180,   181,    -1,   183,   184,   185,    -1,
      -1,   188,    -1,    -1,    -1,   192,    -1,   194,    -1,   196,
      -1,   198,   199,   200,   201,   202,   203,    -1,   205,    -1,
      -1,    -1,   209,   210,   211,    -1,   213,    -1,    -1,    -1,
     217,   218,    -1,    -1,    -1,   222,   223,   224,   225,    -1,
      -1,   228,   229,   230,    -1,   232,    -1,   234,    -1,    -1,
      -1,    -1,   239,   240,    -1,    -1,    -1,   244,    -1,   246,
     247,    -1,   249,   250,    -1,    -1,    -1,   254,    -1,    -1,
     257,   258,   259,    -1,    -1,   262,    -1,    -1,   265,   266,
      -1,    -1,    -1,    -1,    -1,   272,   273,    -1,   275,    -1,
     277,    -1,   279,   280,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,    -1,   305,   306,
     307,   308,    -1,   310,   311,   312,   313,    -1,   315,   316,
      -1,    -1,    -1,    -1,   321,   322,   323,   324,   325,   326,
      -1,    -1,   329,   330,    -1,   332,    -1,   334,    -1,   336,
     337,   338,   339,   340,   341,   342,   343,   344,    -1,    -1,
     347,   348,    -1,    -1,   351,   352,   353,   354,    -1,    -1,
      -1,   358,   359,    -1,    -1,    -1,    -1,   364,   365,   366,
      -1,   368,   369,   370,   371,    -1,   373,   374,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   383,   384,   385,    -1,
      -1,   388,    -1,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,    -1,    -1,   404,   405,   406,
      -1,   408,    -1,   410,   411,   412,   413,   414,    -1,   416,
     417,   418,    -1,    -1,   421,    -1,    -1,    -1,   425,   426,
     427,   428,   429,    -1,    -1,   432,   433,   434,   435,   436,
      -1,   438,   439,    -1,   441,   442,   443,    -1,    -1,   446,
      -1,   448,    -1,   450,   451,    -1,   453,   454,    -1,    -1,
      -1,   458,   459,   460,   461,   462,   463,   464,   465,   466,
     467,    -1,   469,   470,    -1,    -1,    -1,   474,   475,   476,
     477,    -1,    -1,    -1,   481,    -1,    -1,    -1,   485,    -1,
     487,   488,   489,   490,   491,   492,    -1,   494,   495,   496,
     497,   498,   499,    -1,    -1,    -1,    -1,    -1,    -1,   506,
     507,    -1,   509,    -1,    -1,   512,    -1,    -1,   515,   516,
     517,    -1,    -1,   520,   521,    -1,   523,   524,   525,   526,
     527,   528,    -1,    -1,   531,   532,   533,   534,    -1,   536,
     537,    -1,   539,    -1,   541,   542,   543,   544,    -1,    -1,
     547,   548,    -1,   550,   551,   552,   553,    -1,    -1,    -1,
      -1,    -1,   559,   560,   561,    -1,    -1,    -1,   565,   566,
     567,   568,    -1,   570,   571,    -1,   573,   574,    -1,   576,
     577,    -1,    -1,   580,    -1,    -1,   583,    -1,   585,    -1,
     587,   588,   589,    -1,    -1,    -1,    -1,    -1,    -1,   596,
      -1,    -1,   599,    -1,    -1,    -1,   603,   604,   605,   606,
     607,   608,    -1,    -1,    -1,    -1,    -1,    -1,   615,   616,
      -1,   618,   619,   620,    -1,     5,   623,     7,     8,     9,
      10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,
      -1,    -1,    -1,    23,    24,    25,    26,    27,    28,    29,
      -1,    -1,    32,    -1,    -1,    -1,    36,    -1,    -1,    -1,
      40,    -1,    -1,    43,    44,    45,    -1,    47,    -1,    -1,
      -1,    -1,    -1,    53,    54,    -1,    56,    57,    -1,    59,
      -1,    -1,    -1,    -1,    -1,    65,    66,    67,    68,    69,
      70,    71,    -1,    73,    74,    -1,    -1,    -1,    -1,    -1,
      -1,    81,    -1,    83,    -1,    85,    86,    87,    88,    -1,
      90,    91,    -1,    93,    94,    95,    -1,    97,    -1,    99,
      -1,    -1,   102,    -1,    -1,   105,    -1,    -1,   108,    -1,
     110,    -1,    -1,    -1,   114,   115,   116,    -1,    -1,   119,
      -1,    -1,    -1,    -1,   124,    -1,    -1,    -1,    -1,    -1,
     130,    -1,   132,    -1,    -1,    -1,   136,    -1,   138,   139,
     140,   141,    -1,    -1,    -1,    -1,    -1,    -1,   148,   149,
     150,    -1,   152,   153,   154,    -1,   156,   157,    -1,   159,
     160,   161,    -1,    -1,   164,   165,    -1,   167,   168,   169,
     170,    -1,    -1,    -1,    -1,   175,   176,   177,    -1,    -1,
     180,   181,   182,   183,   184,   185,    -1,    -1,    -1,    -1,
      -1,    -1,   192,    -1,   194,    -1,   196,    -1,   198,   199,
     200,   201,   202,   203,    -1,   205,    -1,    -1,    -1,    -1,
     210,   211,    -1,    -1,    -1,    -1,    -1,    -1,   218,    -1,
      -1,    -1,   222,   223,   224,   225,   226,    -1,   228,   229,
     230,    -1,   232,    -1,   234,    -1,    -1,    -1,    -1,   239,
      -1,    -1,    -1,    -1,   244,    -1,   246,   247,    -1,   249,
     250,   251,    -1,    -1,   254,    -1,    -1,    -1,   258,   259,
      -1,    -1,   262,   263,    -1,   265,   266,    -1,    -1,    -1,
      -1,    -1,   272,   273,    -1,   275,    -1,   277,    -1,   279,
     280,    -1,    -1,    -1,    -1,   285,    -1,    -1,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,    -1,   305,   306,   307,   308,    -1,
     310,   311,   312,   313,    -1,   315,   316,    -1,    -1,    -1,
      -1,   321,   322,   323,   324,   325,   326,    -1,    -1,   329,
     330,    -1,   332,    -1,   334,    -1,   336,   337,   338,   339,
     340,   341,   342,   343,   344,    -1,    -1,   347,   348,    -1,
      -1,   351,   352,   353,   354,    -1,    -1,    -1,    -1,   359,
      -1,    -1,    -1,    -1,   364,   365,   366,    -1,   368,   369,
     370,   371,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   384,   385,    -1,    -1,    -1,    -1,
     390,   391,   392,    -1,   394,   395,   396,   397,   398,   399,
     400,    -1,    -1,    -1,    -1,   405,   406,    -1,   408,    -1,
     410,   411,   412,   413,   414,    -1,   416,   417,   418,    -1,
      -1,   421,    -1,    -1,    -1,   425,   426,   427,   428,   429,
      -1,    -1,   432,   433,   434,   435,   436,    -1,   438,    -1,
      -1,   441,    -1,   443,   444,    -1,   446,    -1,    -1,    -1,
     450,    -1,    -1,   453,   454,   455,    -1,    -1,    -1,   459,
     460,   461,   462,   463,   464,    -1,   466,   467,    -1,   469,
      -1,    -1,    -1,    -1,   474,   475,   476,    -1,    -1,    -1,
      -1,   481,    -1,    -1,    -1,   485,    -1,    -1,   488,    -1,
      -1,   491,   492,    -1,   494,    -1,   496,    -1,   498,   499,
      -1,    -1,    -1,    -1,    -1,    -1,   506,   507,    -1,   509,
      -1,    -1,   512,    -1,    -1,   515,    -1,   517,    -1,    -1,
      -1,   521,    -1,   523,   524,   525,   526,   527,   528,    -1,
      -1,   531,   532,   533,   534,    -1,   536,   537,    -1,   539,
      -1,   541,   542,   543,   544,    -1,    -1,   547,   548,    -1,
     550,   551,   552,   553,    -1,    -1,    -1,    -1,    -1,   559,
     560,   561,    -1,    -1,    -1,    -1,   566,   567,   568,    -1,
     570,   571,    -1,   573,   574,    -1,    -1,    -1,    -1,    -1,
     580,    -1,    -1,   583,    -1,    -1,    -1,   587,   588,   589,
      -1,    -1,    -1,    -1,    -1,    -1,   596,    -1,    -1,   599,
      -1,    -1,    -1,   603,   604,   605,   606,   607,   608,    -1,
      -1,   611,    -1,    -1,    -1,   615,    -1,    -1,   618,    -1,
     620,    -1,     5,   623,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    -1,    -1,
      23,    24,    25,    26,    27,    28,    29,    -1,    -1,    32,
      -1,    -1,    -1,    36,    -1,    -1,    -1,    40,    -1,    -1,
      43,    44,    45,    -1,    47,    -1,    -1,    -1,    -1,    -1,
      53,    54,    -1,    56,    57,    -1,    59,    -1,    -1,    -1,
      -1,    -1,    65,    66,    67,    68,    69,    70,    71,    -1,
      73,    74,    -1,    -1,    -1,    -1,    -1,    -1,    81,    -1,
      83,    -1,    85,    86,    87,    88,    -1,    90,    91,    -1,
      93,    94,    95,    -1,    97,    -1,    99,    -1,    -1,   102,
      -1,    -1,   105,    -1,    -1,   108,    -1,   110,    -1,    -1,
      -1,   114,   115,   116,    -1,    -1,   119,    -1,    -1,    -1,
      -1,   124,    -1,    -1,    -1,    -1,    -1,   130,    -1,   132,
      -1,    -1,    -1,   136,    -1,   138,   139,   140,   141,    -1,
      -1,    -1,    -1,    -1,    -1,   148,   149,   150,    -1,   152,
      -1,   154,    -1,   156,   157,    -1,   159,   160,   161,    -1,
      -1,   164,   165,    -1,   167,   168,   169,   170,    -1,    -1,
      -1,    -1,   175,   176,   177,    -1,    -1,   180,   181,   182,
     183,   184,   185,    -1,    -1,    -1,    -1,    -1,    -1,   192,
      -1,   194,    -1,   196,    -1,   198,   199,   200,   201,   202,
     203,    -1,   205,    -1,    -1,    -1,    -1,   210,   211,    -1,
      -1,    -1,    -1,    -1,    -1,   218,    -1,    -1,    -1,   222,
     223,   224,   225,   226,    -1,   228,   229,   230,    -1,   232,
      -1,   234,    -1,    -1,    -1,    -1,   239,    -1,    -1,    -1,
      -1,   244,    -1,   246,   247,    -1,   249,   250,   251,    -1,
      -1,   254,    -1,    -1,    -1,   258,   259,    -1,    -1,   262,
     263,    -1,   265,   266,    -1,    -1,    -1,    -1,    -1,   272,
     273,    -1,   275,    -1,   277,    -1,   279,   280,    -1,    -1,
      -1,    -1,   285,    -1,    -1,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,    -1,   305,   306,   307,   308,    -1,   310,   311,   312,
     313,    -1,   315,   316,    -1,    -1,    -1,    -1,   321,   322,
     323,   324,   325,   326,    -1,    -1,   329,   330,    -1,   332,
      -1,   334,    -1,   336,   337,   338,   339,   340,   341,   342,
     343,   344,    -1,    -1,   347,   348,    -1,    -1,   351,   352,
     353,   354,    -1,    -1,    -1,    -1,   359,    -1,    -1,    -1,
      -1,   364,   365,   366,    -1,   368,   369,   370,   371,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   384,   385,    -1,    -1,    -1,    -1,   390,   391,   392,
      -1,   394,   395,   396,   397,   398,   399,   400,    -1,    -1,
      -1,    -1,   405,   406,    -1,   408,    -1,   410,   411,   412,
     413,   414,    -1,   416,   417,   418,    -1,    -1,   421,    -1,
      -1,    -1,   425,   426,   427,   428,   429,    -1,    -1,   432,
     433,   434,   435,   436,    -1,   438,    -1,    -1,   441,    -1,
     443,   444,    -1,   446,    -1,    -1,    -1,   450,    -1,    -1,
     453,   454,   455,    -1,    -1,    -1,   459,   460,   461,   462,
     463,   464,    -1,   466,   467,    -1,   469,    -1,    -1,    -1,
      -1,   474,   475,   476,    -1,    -1,    -1,    -1,   481,    -1,
      -1,    -1,   485,    -1,    -1,   488,    -1,    -1,   491,   492,
      -1,   494,    -1,   496,    -1,   498,   499,    -1,    -1,    -1,
      -1,    -1,    -1,   506,   507,    -1,   509,    -1,    -1,   512,
      -1,    -1,   515,    -1,   517,    -1,    -1,    -1,   521,    -1,
     523,   524,   525,   526,   527,   528,    -1,    -1,   531,   532,
     533,   534,    -1,   536,   537,    -1,   539,    -1,   541,   542,
     543,   544,    -1,    -1,   547,   548,    -1,   550,   551,   552,
     553,    -1,    -1,    -1,    -1,    -1,   559,   560,   561,    -1,
      -1,    -1,    -1,   566,   567,   568,    -1,   570,   571,    -1,
     573,   574,    -1,    -1,    -1,    -1,    -1,   580,    -1,    -1,
     583,    -1,    -1,    -1,   587,   588,   589,    -1,    -1,    -1,
      -1,    -1,    -1,   596,    -1,    -1,   599,    -1,    -1,    -1,
     603,   604,   605,   606,   607,   608,   609,    -1,   611,    -1,
      -1,    -1,   615,    -1,    -1,   618,    -1,   620,    -1,     5,
     623,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    -1,    -1,    23,    24,    25,
      26,    27,    28,    29,    -1,    -1,    32,    -1,    -1,    -1,
      36,    -1,    -1,    -1,    40,    -1,    -1,    43,    44,    45,
      -1,    47,    -1,    -1,    -1,    -1,    -1,    53,    54,    -1,
      56,    57,    -1,    59,    -1,    -1,    -1,    -1,    -1,    65,
      66,    67,    68,    69,    70,    71,    -1,    73,    74,    -1,
      -1,    -1,    -1,    -1,    -1,    81,    -1,    83,    -1,    85,
      86,    87,    88,    -1,    90,    91,    -1,    93,    94,    95,
      -1,    97,    -1,    99,    -1,    -1,   102,    -1,    -1,   105,
      -1,    -1,   108,    -1,   110,    -1,    -1,    -1,   114,   115,
     116,    -1,    -1,   119,    -1,    -1,    -1,    -1,   124,    -1,
      -1,    -1,    -1,    -1,   130,    -1,   132,    -1,    -1,    -1,
     136,    -1,   138,   139,   140,   141,    -1,    -1,    -1,    -1,
      -1,    -1,   148,   149,   150,    -1,   152,    -1,   154,    -1,
     156,   157,    -1,   159,   160,   161,    -1,    -1,   164,   165,
      -1,   167,   168,   169,   170,    -1,    -1,    -1,    -1,   175,
     176,   177,    -1,    -1,   180,   181,   182,   183,   184,   185,
      -1,    -1,    -1,    -1,    -1,    -1,   192,    -1,   194,    -1,
     196,    -1,   198,   199,   200,   201,   202,   203,    -1,   205,
      -1,    -1,    -1,    -1,   210,   211,    -1,    -1,    -1,    -1,
      -1,    -1,   218,    -1,    -1,    -1,   222,   223,   224,   225,
     226,    -1,   228,   229,   230,    -1,   232,    -1,   234,    -1,
      -1,    -1,    -1,   239,    -1,    -1,    -1,    -1,   244,    -1,
     246,   247,    -1,   249,   250,   251,    -1,    -1,   254,    -1,
      -1,    -1,   258,   259,    -1,    -1,   262,   263,    -1,   265,
     266,    -1,    -1,    -1,    -1,    -1,   272,   273,    -1,   275,
      -1,   277,    -1,   279,   280,    -1,    -1,    -1,    -1,   285,
      -1,    -1,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,    -1,   305,
     306,   307,   308,    -1,   310,   311,   312,   313,    -1,   315,
     316,    -1,    -1,    -1,    -1,   321,   322,   323,   324,   325,
     326,    -1,    -1,   329,   330,    -1,   332,    -1,   334,    -1,
     336,   337,   338,   339,   340,   341,   342,   343,   344,    -1,
      -1,   347,   348,    -1,    -1,   351,   352,   353,   354,    -1,
      -1,    -1,    -1,   359,    -1,    -1,    -1,    -1,   364,   365,
     366,    -1,   368,   369,   370,   371,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   384,   385,
      -1,    -1,    -1,    -1,   390,   391,   392,    -1,   394,   395,
     396,   397,   398,   399,   400,    -1,    -1,    -1,    -1,   405,
     406,    -1,   408,    -1,   410,   411,   412,   413,   414,    -1,
     416,   417,   418,    -1,    -1,   421,    -1,    -1,    -1,   425,
     426,   427,   428,   429,    -1,    -1,   432,   433,   434,   435,
     436,    -1,   438,    -1,    -1,   441,    -1,   443,   444,    -1,
     446,    -1,    -1,    -1,   450,    -1,    -1,   453,   454,   455,
      -1,    -1,    -1,   459,   460,   461,   462,   463,   464,    -1,
     466,   467,    -1,   469,    -1,    -1,    -1,    -1,   474,   475,
     476,    -1,    -1,    -1,    -1,   481,    -1,    -1,    -1,   485,
      -1,    -1,   488,    -1,    -1,   491,   492,    -1,   494,    -1,
     496,    -1,   498,   499,    -1,    -1,    -1,    -1,    -1,    -1,
     506,   507,    -1,   509,    -1,    -1,   512,    -1,    -1,   515,
      -1,   517,    -1,    -1,    -1,   521,    -1,   523,   524,   525,
     526,   527,   528,    -1,    -1,   531,   532,   533,   534,    -1,
     536,   537,    -1,   539,    -1,   541,   542,   543,   544,    -1,
      -1,   547,   548,    -1,   550,   551,   552,   553,    -1,    -1,
      -1,    -1,    -1,   559,   560,   561,    -1,    -1,    -1,    -1,
     566,   567,   568,    -1,   570,   571,    -1,   573,   574,    -1,
      -1,    -1,    -1,    -1,   580,    -1,    -1,   583,    -1,    -1,
      -1,   587,   588,   589,    -1,    -1,    -1,    -1,    -1,    -1,
     596,    -1,    -1,   599,    -1,    -1,    -1,   603,   604,   605,
     606,   607,   608,   609,    -1,   611,    -1,    -1,    -1,   615,
      -1,    -1,   618,    -1,   620,    -1,     5,   623,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      -1,    -1,    -1,    -1,    23,    24,    25,    26,    27,    28,
      29,    -1,    -1,    32,    -1,    -1,    -1,    36,    -1,    -1,
      -1,    40,    -1,    -1,    43,    44,    45,    -1,    47,    -1,
      -1,    -1,    -1,    -1,    53,    54,    -1,    56,    57,    -1,
      59,    -1,    -1,    -1,    -1,    -1,    65,    66,    67,    68,
      69,    70,    71,    -1,    73,    74,    -1,    -1,    -1,    -1,
      -1,    -1,    81,    -1,    83,    -1,    85,    86,    87,    88,
      -1,    90,    91,    -1,    93,    94,    95,    -1,    97,    -1,
      99,    -1,    -1,   102,    -1,    -1,   105,    -1,    -1,   108,
      -1,   110,    -1,    -1,    -1,   114,   115,   116,    -1,    -1,
     119,    -1,    -1,    -1,    -1,   124,    -1,    -1,    -1,    -1,
      -1,   130,    -1,   132,    -1,    -1,    -1,   136,    -1,   138,
     139,   140,   141,    -1,    -1,    -1,    -1,    -1,    -1,   148,
     149,   150,    -1,    -1,    -1,   154,    -1,   156,   157,    -1,
     159,   160,   161,    -1,    -1,   164,   165,    -1,   167,   168,
     169,   170,    -1,    -1,    -1,    -1,   175,   176,   177,    -1,
      -1,   180,   181,   182,   183,   184,   185,    -1,    -1,    -1,
      -1,    -1,    -1,   192,    -1,   194,    -1,   196,    -1,   198,
     199,   200,   201,   202,   203,    -1,   205,    -1,    -1,    -1,
      -1,   210,   211,    -1,    -1,    -1,    -1,    -1,    -1,   218,
      -1,    -1,    -1,   222,   223,   224,   225,   226,    -1,   228,
     229,   230,    -1,   232,    -1,   234,    -1,    -1,    -1,    -1,
     239,    -1,    -1,    -1,    -1,   244,    -1,   246,   247,    -1,
     249,   250,   251,    -1,    -1,   254,    -1,    -1,    -1,   258,
     259,    -1,    -1,   262,   263,    -1,   265,   266,    -1,    -1,
      -1,    -1,    -1,   272,   273,    -1,   275,    -1,   277,    -1,
     279,   280,    -1,    -1,    -1,    -1,   285,    -1,    -1,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,    -1,   305,   306,   307,   308,
      -1,   310,   311,   312,   313,    -1,   315,   316,    -1,    -1,
      -1,    -1,   321,   322,   323,   324,   325,   326,    -1,    -1,
     329,   330,    -1,   332,    -1,   334,    -1,   336,   337,   338,
     339,   340,   341,   342,   343,   344,    -1,    -1,   347,   348,
      -1,    -1,   351,   352,   353,   354,    -1,    -1,    -1,    -1,
     359,    -1,    -1,    -1,    -1,   364,   365,   366,    -1,   368,
     369,   370,   371,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   384,   385,    -1,    -1,    -1,
      -1,   390,   391,   392,    -1,   394,   395,   396,   397,   398,
     399,   400,    -1,    -1,    -1,    -1,   405,   406,    -1,   408,
      -1,   410,   411,   412,   413,   414,    -1,   416,   417,   418,
      -1,    -1,   421,    -1,    -1,    -1,   425,   426,   427,   428,
     429,    -1,    -1,   432,   433,   434,   435,   436,    -1,   438,
      -1,    -1,   441,    -1,   443,   444,    -1,   446,    -1,    -1,
      -1,   450,    -1,    -1,   453,   454,   455,    -1,    -1,    -1,
     459,   460,   461,   462,   463,   464,    -1,   466,   467,    -1,
     469,    -1,    -1,    -1,    -1,   474,   475,   476,    -1,    -1,
      -1,    -1,   481,    -1,    -1,    -1,   485,    -1,    -1,   488,
      -1,    -1,   491,   492,    -1,   494,    -1,   496,    -1,   498,
     499,    -1,    -1,    -1,    -1,    -1,    -1,   506,   507,    -1,
     509,    -1,    -1,   512,    -1,    -1,   515,    -1,   517,    -1,
      -1,    -1,   521,    -1,   523,   524,   525,   526,   527,   528,
      -1,    -1,   531,   532,   533,   534,    -1,   536,   537,    -1,
     539,    -1,   541,   542,   543,   544,    -1,    -1,   547,   548,
      -1,   550,   551,   552,   553,    -1,    -1,    -1,    -1,    -1,
     559,   560,   561,    -1,    -1,    -1,    -1,   566,   567,   568,
      -1,   570,   571,    -1,   573,   574,    -1,    -1,    -1,    -1,
      -1,   580,    -1,    -1,   583,    -1,    -1,    -1,   587,   588,
     589,    -1,    -1,    -1,    -1,    -1,    -1,   596,    -1,    -1,
     599,    -1,    -1,    -1,   603,   604,   605,   606,   607,   608,
      -1,    -1,   611,    -1,    -1,    -1,   615,    -1,    -1,   618,
      -1,   620,    -1,     5,   623,     7,     8,     9,    10,    11,
      -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    -1,
      -1,    23,    24,    25,    26,    27,    28,    29,    -1,    -1,
      32,    -1,    -1,    -1,    36,    -1,    -1,    -1,    40,    -1,
      -1,    43,    44,    45,    -1,    47,    -1,    -1,    -1,    -1,
      -1,    53,    54,    -1,    56,    57,    -1,    59,    -1,    -1,
      -1,    -1,    -1,    65,    66,    67,    68,    69,    70,    71,
      -1,    73,    74,    -1,    -1,    -1,    -1,    -1,    -1,    81,
      -1,    83,    -1,    85,    86,    87,    88,    -1,    90,    91,
      -1,    93,    94,    95,    -1,    97,    -1,    99,    -1,    -1,
     102,    -1,    -1,   105,    -1,    -1,   108,    -1,   110,    -1,
      -1,    -1,   114,   115,   116,    -1,    -1,   119,    -1,    -1,
      -1,    -1,   124,    -1,    -1,    -1,    -1,    -1,   130,    -1,
     132,    -1,    -1,    -1,   136,    -1,   138,   139,   140,   141,
      -1,    -1,    -1,    -1,    -1,    -1,   148,   149,   150,    -1,
      -1,    -1,   154,    -1,   156,   157,    -1,   159,   160,   161,
      -1,    -1,   164,   165,    -1,   167,   168,   169,   170,    -1,
      -1,    -1,    -1,   175,   176,   177,    -1,    -1,   180,   181,
     182,   183,   184,   185,    -1,    -1,    -1,    -1,    -1,    -1,
     192,    -1,   194,    -1,   196,    -1,   198,   199,   200,   201,
     202,   203,    -1,   205,    -1,    -1,    -1,    -1,   210,   211,
      -1,    -1,    -1,    -1,    -1,    -1,   218,    -1,    -1,    -1,
     222,   223,   224,   225,   226,    -1,   228,   229,   230,    -1,
     232,    -1,   234,    -1,    -1,    -1,    -1,   239,    -1,    -1,
      -1,    -1,   244,    -1,   246,   247,    -1,   249,   250,   251,
      -1,    -1,   254,    -1,    -1,    -1,   258,   259,    -1,    -1,
     262,   263,    -1,   265,   266,    -1,    -1,    -1,    -1,    -1,
     272,   273,    -1,   275,    -1,   277,    -1,   279,   280,    -1,
      -1,    -1,    -1,   285,    -1,    -1,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,    -1,   305,   306,   307,   308,    -1,   310,   311,
     312,   313,    -1,   315,   316,    -1,    -1,    -1,    -1,   321,
     322,   323,   324,   325,   326,    -1,    -1,   329,   330,    -1,
     332,    -1,   334,    -1,   336,   337,   338,   339,   340,   341,
     342,   343,   344,    -1,    -1,   347,   348,    -1,    -1,   351,
     352,   353,   354,    -1,    -1,    -1,    -1,   359,    -1,    -1,
      -1,    -1,   364,   365,   366,    -1,   368,   369,   370,   371,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   384,   385,    -1,    -1,    -1,    -1,   390,   391,
     392,    -1,   394,   395,   396,   397,   398,   399,   400,    -1,
      -1,    -1,    -1,   405,   406,    -1,   408,    -1,   410,   411,
     412,   413,   414,    -1,   416,   417,   418,    -1,    -1,   421,
      -1,    -1,    -1,   425,   426,   427,   428,   429,    -1,    -1,
     432,   433,   434,   435,   436,    -1,   438,    -1,    -1,   441,
      -1,   443,   444,    -1,   446,    -1,    -1,    -1,   450,    -1,
      -1,   453,   454,   455,    -1,    -1,    -1,   459,   460,   461,
     462,   463,   464,    -1,   466,   467,    -1,   469,    -1,    -1,
      -1,    -1,   474,   475,   476,    -1,    -1,    -1,    -1,   481,
      -1,    -1,    -1,   485,    -1,    -1,   488,    -1,    -1,   491,
     492,    -1,   494,    -1,   496,    -1,   498,   499,    -1,    -1,
      -1,    -1,    -1,    -1,   506,   507,    -1,   509,    -1,    -1,
     512,    -1,    -1,   515,    -1,   517,    -1,    -1,    -1,   521,
      -1,   523,   524,   525,   526,   527,   528,    -1,    -1,   531,
     532,   533,   534,    -1,   536,   537,    -1,   539,    -1,   541,
     542,   543,   544,    -1,    -1,   547,   548,    -1,   550,   551,
     552,   553,    -1,    -1,    -1,    -1,    -1,   559,   560,   561,
      -1,    -1,    -1,    -1,   566,   567,   568,    -1,   570,   571,
      -1,   573,   574,    -1,    -1,    -1,    -1,    -1,   580,    -1,
      -1,   583,    -1,    -1,    -1,   587,   588,   589,    -1,    -1,
      -1,    -1,    -1,    -1,   596,    -1,    -1,   599,    -1,    -1,
      -1,   603,   604,   605,   606,   607,   608,    -1,    -1,   611,
      -1,    -1,    -1,   615,    -1,    -1,   618,    -1,   620,    -1,
       5,   623,     7,     8,     9,    10,    11,    -1,    -1,    14,
      -1,    -1,    -1,    18,    -1,    -1,    -1,    -1,    23,    24,
      25,    26,    27,    28,    29,    -1,    -1,    32,    -1,    -1,
      -1,    36,    -1,    -1,    -1,    40,    -1,    -1,    43,    44,
      45,    -1,    47,    -1,    -1,    -1,    -1,    -1,    53,    54,
      -1,    56,    57,    -1,    59,    -1,    -1,    -1,    -1,    -1,
      65,    66,    67,    68,    69,    70,    71,    -1,    73,    74,
      -1,    -1,    -1,    -1,    -1,    -1,    81,    -1,    83,    -1,
      85,    86,    87,    88,    -1,    90,    91,    -1,    93,    94,
      95,    -1,    97,    -1,    99,    -1,    -1,   102,    -1,    -1,
     105,    -1,    -1,   108,    -1,   110,    -1,    -1,    -1,   114,
     115,   116,    -1,    -1,   119,    -1,    -1,    -1,    -1,   124,
      -1,    -1,    -1,    -1,    -1,   130,    -1,   132,    -1,    -1,
      -1,   136,    -1,   138,   139,   140,   141,    -1,    -1,    -1,
      -1,    -1,    -1,   148,   149,   150,    -1,    -1,    -1,   154,
      -1,   156,   157,    -1,   159,   160,   161,    -1,    -1,   164,
     165,    -1,   167,   168,   169,   170,    -1,    -1,    -1,    -1,
     175,   176,   177,    -1,    -1,   180,   181,   182,   183,   184,
     185,    -1,    -1,    -1,    -1,    -1,    -1,   192,    -1,   194,
      -1,   196,    -1,   198,   199,   200,   201,   202,   203,    -1,
     205,    -1,    -1,    -1,    -1,   210,   211,    -1,    -1,    -1,
      -1,    -1,    -1,   218,    -1,    -1,    -1,   222,   223,   224,
     225,   226,    -1,   228,   229,   230,    -1,   232,    -1,   234,
      -1,    -1,    -1,    -1,   239,    -1,    -1,    -1,    -1,   244,
      -1,   246,   247,    -1,   249,   250,   251,    -1,    -1,   254,
      -1,    -1,    -1,   258,   259,    -1,    -1,   262,   263,    -1,
     265,   266,    -1,    -1,    -1,    -1,    -1,   272,   273,    -1,
     275,    -1,   277,    -1,   279,   280,    -1,    -1,    -1,    -1,
     285,    -1,    -1,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,    -1,
     305,   306,   307,   308,    -1,   310,   311,   312,   313,    -1,
     315,   316,    -1,    -1,    -1,    -1,   321,   322,   323,   324,
     325,   326,    -1,    -1,   329,   330,    -1,   332,    -1,   334,
      -1,   336,   337,   338,   339,   340,   341,   342,   343,   344,
      -1,    -1,   347,   348,    -1,    -1,   351,   352,   353,   354,
      -1,    -1,    -1,    -1,   359,    -1,    -1,    -1,    -1,   364,
     365,   366,    -1,   368,   369,   370,   371,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   384,
     385,    -1,    -1,    -1,    -1,   390,   391,   392,    -1,   394,
     395,   396,   397,   398,   399,   400,    -1,    -1,    -1,    -1,
     405,   406,    -1,   408,    -1,   410,   411,   412,   413,   414,
      -1,   416,   417,   418,    -1,    -1,   421,    -1,    -1,    -1,
     425,   426,   427,   428,   429,    -1,    -1,   432,   433,   434,
     435,   436,    -1,   438,    -1,    -1,   441,    -1,   443,   444,
      -1,   446,    -1,    -1,    -1,   450,    -1,    -1,   453,   454,
     455,    -1,    -1,    -1,   459,   460,   461,   462,   463,   464,
      -1,   466,   467,    -1,   469,    -1,    -1,    -1,    -1,   474,
     475,   476,    -1,    -1,    -1,    -1,   481,    -1,    -1,    -1,
     485,    -1,    -1,   488,    -1,    -1,   491,   492,    -1,   494,
      -1,   496,    -1,   498,   499,    -1,    -1,    -1,    -1,    -1,
      -1,   506,   507,    -1,   509,    -1,    -1,   512,    -1,    -1,
     515,    -1,   517,    -1,    -1,    -1,   521,    -1,   523,   524,
     525,   526,   527,   528,    -1,    -1,   531,   532,   533,   534,
      -1,   536,   537,    -1,   539,    -1,   541,   542,   543,   544,
      -1,    -1,   547,   548,    -1,   550,   551,   552,   553,    -1,
      -1,    -1,    -1,    -1,   559,   560,   561,    -1,    -1,    -1,
      -1,   566,   567,   568,    -1,   570,   571,    -1,   573,   574,
      -1,    -1,    -1,    -1,    -1,   580,    -1,    -1,   583,    -1,
      -1,    -1,   587,   588,   589,    -1,    -1,    -1,    -1,    -1,
      -1,   596,    -1,    -1,   599,    -1,    -1,    -1,   603,   604,
     605,   606,   607,   608,    -1,    -1,   611,    -1,    -1,    -1,
     615,    -1,    -1,   618,    -1,   620,    -1,     5,   623,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,    -1,    -1,    -1,    -1,    23,    24,    25,    26,    27,
      28,    29,    -1,    -1,    32,    -1,    -1,    -1,    36,    -1,
      -1,    -1,    40,    -1,    -1,    43,    44,    45,    -1,    47,
      -1,    -1,    -1,    -1,    -1,    53,    54,    -1,    56,    57,
      -1,    59,    -1,    -1,    -1,    -1,    -1,    65,    66,    67,
      68,    69,    70,    71,    -1,    73,    74,    -1,    -1,    -1,
      -1,    -1,    -1,    81,    -1,    83,    -1,    85,    86,    87,
      88,    -1,    90,    91,    -1,    93,    94,    95,    -1,    97,
      -1,    99,    -1,    -1,   102,    -1,    -1,   105,    -1,    -1,
     108,    -1,   110,    -1,    -1,    -1,   114,   115,   116,    -1,
      -1,   119,    -1,    -1,    -1,    -1,   124,    -1,    -1,    -1,
      -1,    -1,   130,    -1,   132,    -1,    -1,    -1,   136,    -1,
     138,   139,   140,   141,    -1,    -1,    -1,    -1,    -1,    -1,
     148,   149,   150,    -1,    -1,    -1,   154,    -1,   156,   157,
      -1,   159,   160,   161,    -1,    -1,   164,   165,    -1,   167,
     168,   169,   170,    -1,    -1,    -1,    -1,   175,   176,   177,
      -1,    -1,   180,   181,   182,   183,   184,   185,    -1,    -1,
      -1,    -1,    -1,    -1,   192,    -1,   194,    -1,   196,    -1,
     198,   199,   200,   201,   202,   203,    -1,   205,    -1,    -1,
      -1,    -1,   210,   211,    -1,    -1,    -1,    -1,    -1,    -1,
     218,    -1,    -1,    -1,   222,   223,   224,   225,   226,    -1,
     228,   229,   230,    -1,   232,    -1,   234,    -1,    -1,    -1,
      -1,   239,    -1,    -1,    -1,    -1,   244,    -1,   246,   247,
      -1,   249,   250,   251,    -1,    -1,   254,    -1,    -1,    -1,
     258,   259,    -1,    -1,   262,   263,    -1,   265,   266,    -1,
      -1,    -1,    -1,    -1,   272,   273,    -1,   275,    -1,   277,
      -1,   279,   280,    -1,    -1,    -1,    -1,   285,    -1,    -1,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,    -1,   305,   306,   307,
     308,    -1,   310,   311,   312,   313,    -1,   315,   316,    -1,
      -1,    -1,    -1,   321,   322,   323,   324,   325,   326,    -1,
      -1,   329,   330,    -1,   332,    -1,   334,    -1,   336,   337,
     338,   339,   340,   341,   342,   343,   344,    -1,    -1,   347,
     348,    -1,    -1,   351,   352,   353,   354,    -1,    -1,    -1,
      -1,   359,    -1,    -1,    -1,    -1,   364,   365,   366,    -1,
     368,   369,   370,   371,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   384,   385,    -1,    -1,
      -1,    -1,   390,   391,   392,    -1,   394,   395,   396,   397,
     398,   399,   400,    -1,    -1,    -1,    -1,   405,   406,    -1,
     408,    -1,   410,   411,   412,   413,   414,    -1,   416,   417,
     418,    -1,    -1,   421,    -1,    -1,    -1,   425,   426,   427,
     428,   429,    -1,    -1,   432,   433,   434,   435,   436,    -1,
     438,    -1,    -1,   441,    -1,   443,   444,    -1,   446,    -1,
      -1,    -1,   450,    -1,    -1,   453,   454,   455,    -1,    -1,
      -1,   459,   460,   461,   462,   463,   464,    -1,   466,   467,
      -1,   469,    -1,    -1,    -1,    -1,   474,   475,   476,    -1,
      -1,    -1,    -1,   481,    -1,    -1,    -1,   485,    -1,    -1,
     488,    -1,    -1,   491,   492,    -1,   494,    -1,   496,    -1,
     498,   499,    -1,    -1,    -1,    -1,    -1,    -1,   506,   507,
      -1,   509,    -1,    -1,   512,    -1,    -1,   515,    -1,   517,
      -1,    -1,    -1,   521,    -1,   523,   524,   525,   526,   527,
     528,    -1,    -1,   531,   532,   533,   534,    -1,   536,   537,
      -1,   539,    -1,   541,   542,   543,   544,    -1,    -1,   547,
     548,    -1,   550,   551,   552,   553,    -1,    -1,    -1,    -1,
      -1,   559,   560,   561,    -1,    -1,    -1,    -1,   566,   567,
     568,    -1,   570,   571,    -1,   573,   574,    -1,    -1,    -1,
      -1,    -1,   580,    -1,    -1,   583,    -1,    -1,    -1,   587,
     588,   589,    -1,    -1,    -1,    -1,    -1,    -1,   596,    -1,
      -1,   599,    -1,    -1,    -1,   603,   604,   605,   606,   607,
     608,    -1,    -1,   611,    -1,    -1,    -1,   615,    -1,    -1,
     618,    -1,   620,    -1,     5,   623,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      -1,    -1,    23,    24,    25,    26,    27,    28,    29,    -1,
      -1,    32,    -1,    -1,    -1,    36,    -1,    -1,    -1,    40,
      -1,    -1,    43,    44,    45,    -1,    47,    -1,    -1,    -1,
      -1,    -1,    53,    54,    -1,    56,    57,    -1,    59,    -1,
      -1,    -1,    -1,    -1,    65,    66,    67,    68,    69,    70,
      71,    -1,    73,    74,    -1,    -1,    -1,    -1,    -1,    -1,
      81,    -1,    83,    -1,    85,    86,    87,    88,    -1,    90,
      91,    -1,    93,    94,    95,    -1,    97,    -1,    99,    -1,
      -1,   102,    -1,    -1,   105,    -1,    -1,   108,    -1,   110,
      -1,    -1,    -1,   114,   115,   116,    -1,    -1,   119,    -1,
      -1,    -1,    -1,   124,    -1,    -1,    -1,    -1,    -1,   130,
      -1,   132,    -1,    -1,    -1,   136,    -1,   138,   139,   140,
     141,    -1,    -1,    -1,    -1,    -1,    -1,   148,   149,   150,
      -1,    -1,    -1,   154,    -1,   156,   157,    -1,   159,   160,
     161,    -1,    -1,   164,   165,    -1,   167,   168,   169,   170,
      -1,    -1,    -1,    -1,   175,   176,   177,    -1,    -1,   180,
     181,   182,   183,   184,   185,    -1,    -1,    -1,    -1,    -1,
      -1,   192,    -1,   194,    -1,   196,    -1,   198,   199,   200,
     201,   202,   203,    -1,   205,    -1,    -1,    -1,    -1,   210,
     211,    -1,    -1,    -1,    -1,    -1,    -1,   218,    -1,    -1,
      -1,   222,   223,   224,   225,   226,    -1,   228,   229,   230,
      -1,   232,    -1,   234,    -1,    -1,    -1,    -1,   239,    -1,
      -1,    -1,    -1,   244,    -1,   246,   247,    -1,   249,   250,
     251,    -1,    -1,   254,    -1,    -1,    -1,   258,   259,    -1,
      -1,   262,   263,    -1,   265,   266,    -1,    -1,    -1,    -1,
      -1,   272,   273,    -1,   275,    -1,   277,    -1,   279,   280,
      -1,    -1,    -1,    -1,   285,    -1,    -1,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,    -1,   305,   306,   307,   308,    -1,   310,
     311,   312,   313,    -1,   315,   316,    -1,    -1,    -1,    -1,
     321,   322,   323,   324,   325,   326,    -1,    -1,   329,   330,
      -1,   332,    -1,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,   344,    -1,    -1,   347,   348,    -1,    -1,
     351,   352,   353,   354,    -1,    -1,    -1,    -1,   359,    -1,
      -1,    -1,    -1,   364,   365,   366,    -1,   368,   369,   370,
     371,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   384,   385,    -1,    -1,    -1,    -1,   390,
     391,   392,    -1,   394,   395,   396,   397,   398,   399,   400,
      -1,    -1,    -1,    -1,   405,   406,    -1,   408,    -1,   410,
     411,   412,   413,   414,    -1,   416,   417,   418,    -1,    -1,
     421,    -1,    -1,    -1,   425,   426,   427,   428,   429,    -1,
      -1,   432,   433,   434,   435,   436,    -1,   438,    -1,    -1,
     441,    -1,   443,   444,    -1,   446,    -1,    -1,    -1,   450,
      -1,    -1,   453,   454,   455,    -1,    -1,    -1,   459,   460,
     461,   462,   463,   464,    -1,   466,   467,    -1,   469,    -1,
      -1,    -1,    -1,   474,   475,   476,    -1,    -1,    -1,    -1,
     481,    -1,    -1,    -1,   485,    -1,    -1,   488,    -1,    -1,
     491,   492,    -1,   494,    -1,   496,    -1,   498,   499,    -1,
      -1,    -1,    -1,    -1,    -1,   506,   507,    -1,   509,    -1,
      -1,   512,    -1,    -1,   515,    -1,   517,    -1,    -1,    -1,
     521,    -1,   523,   524,   525,   526,   527,   528,    -1,    -1,
     531,   532,   533,   534,    -1,   536,   537,    -1,   539,    -1,
     541,   542,   543,   544,    -1,    -1,   547,   548,    -1,   550,
     551,   552,   553,    -1,    -1,    -1,    -1,    -1,   559,   560,
     561,    -1,    -1,    -1,    -1,   566,   567,   568,    -1,   570,
     571,    -1,   573,   574,    -1,    -1,    -1,    -1,    -1,   580,
      -1,    -1,   583,    -1,    -1,    -1,   587,   588,   589,    -1,
      -1,    -1,    -1,    -1,    -1,   596,    -1,    -1,   599,    -1,
      -1,    -1,   603,   604,   605,   606,   607,   608,    -1,    -1,
     611,    -1,    -1,    -1,   615,    -1,    -1,   618,    -1,   620,
      -1,     5,   623,     7,     8,     9,    10,    11,    -1,    -1,
      14,    -1,    -1,    -1,    18,    -1,    -1,    -1,    -1,    23,
      24,    25,    26,    27,    28,    29,    -1,    -1,    32,    -1,
      -1,    -1,    36,    -1,    -1,    -1,    40,    -1,    -1,    43,
      44,    45,    -1,    47,    -1,    -1,    -1,    -1,    -1,    53,
      54,    -1,    56,    57,    -1,    59,    -1,    -1,    -1,    -1,
      -1,    65,    66,    67,    68,    69,    70,    71,    -1,    73,
      74,    -1,    -1,    -1,    -1,    -1,    -1,    81,    -1,    83,
      -1,    85,    86,    87,    88,    -1,    90,    91,    -1,    93,
      94,    95,    -1,    97,    -1,    99,    -1,    -1,   102,    -1,
      -1,   105,    -1,    -1,   108,    -1,   110,    -1,    -1,    -1,
     114,   115,   116,    -1,    -1,   119,    -1,    -1,    -1,    -1,
     124,    -1,    -1,    -1,    -1,    -1,   130,    -1,   132,    -1,
      -1,    -1,   136,    -1,   138,   139,   140,   141,    -1,    -1,
      -1,    -1,    -1,    -1,   148,   149,   150,    -1,    -1,    -1,
     154,    -1,    -1,   157,    -1,   159,   160,   161,    -1,    -1,
     164,   165,    -1,   167,   168,   169,   170,    -1,    -1,    -1,
      -1,   175,   176,   177,    -1,    -1,   180,   181,   182,   183,
     184,   185,    -1,    -1,    -1,    -1,    -1,    -1,   192,    -1,
     194,    -1,   196,    -1,   198,   199,   200,   201,   202,   203,
      -1,   205,    -1,    -1,    -1,    -1,   210,   211,    -1,    -1,
      -1,    -1,    -1,    -1,   218,    -1,    -1,    -1,   222,   223,
     224,   225,   226,    -1,   228,   229,   230,    -1,   232,    -1,
     234,    -1,    -1,    -1,    -1,   239,    -1,    -1,    -1,    -1,
     244,    -1,   246,   247,    -1,   249,   250,   251,    -1,    -1,
     254,    -1,    -1,    -1,   258,   259,    -1,    -1,   262,   263,
      -1,   265,   266,    -1,    -1,    -1,    -1,    -1,   272,   273,
      -1,   275,    -1,   277,    -1,   279,   280,    -1,    -1,    -1,
      -1,   285,    -1,    -1,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
      -1,   305,   306,   307,   308,    -1,   310,   311,   312,   313,
      -1,   315,   316,    -1,    -1,    -1,    -1,   321,   322,   323,
     324,   325,   326,    -1,    -1,   329,   330,    -1,   332,    -1,
     334,    -1,   336,   337,   338,   339,   340,   341,   342,   343,
     344,    -1,    -1,   347,   348,    -1,    -1,   351,   352,   353,
     354,    -1,    -1,    -1,    -1,   359,    -1,    -1,    -1,    -1,
     364,   365,   366,    -1,   368,   369,   370,   371,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     384,   385,    -1,    -1,    -1,    -1,   390,   391,   392,    -1,
     394,   395,   396,   397,   398,   399,   400,    -1,    -1,    -1,
      -1,   405,   406,    -1,   408,    -1,   410,   411,   412,   413,
     414,    -1,   416,   417,   418,    -1,    -1,   421,    -1,    -1,
      -1,   425,   426,   427,   428,   429,    -1,    -1,   432,   433,
     434,   435,   436,    -1,   438,    -1,    -1,   441,    -1,   443,
     444,    -1,   446,    -1,    -1,    -1,   450,    -1,    -1,   453,
     454,   455,    -1,    -1,    -1,   459,   460,   461,   462,   463,
     464,    -1,   466,   467,    -1,   469,    -1,    -1,    -1,    -1,
     474,   475,   476,    -1,    -1,    -1,    -1,   481,    -1,    -1,
      -1,   485,    -1,    -1,   488,    -1,    -1,   491,   492,    -1,
     494,    -1,   496,    -1,   498,   499,    -1,    -1,    -1,    -1,
      -1,    -1,   506,   507,    -1,   509,    -1,    -1,   512,    -1,
      -1,   515,    -1,   517,    -1,    -1,    -1,   521,    -1,   523,
     524,   525,   526,   527,   528,    -1,    -1,   531,   532,   533,
     534,    -1,   536,   537,    -1,   539,    -1,   541,   542,   543,
     544,    -1,    -1,   547,   548,    -1,   550,   551,   552,   553,
      -1,    -1,    -1,    -1,    -1,   559,   560,   561,    -1,    -1,
      -1,    -1,   566,   567,   568,    -1,   570,   571,    -1,   573,
     574,    -1,    -1,    -1,    -1,    -1,   580,    -1,    -1,   583,
      -1,    -1,    -1,   587,   588,   589,    -1,    -1,    -1,    -1,
      -1,    -1,   596,    -1,    -1,   599,    -1,    -1,    -1,   603,
     604,   605,   606,   607,   608,    -1,    -1,   611,    -1,    -1,
      -1,   615,    -1,    -1,   618,    -1,   620,    -1,     5,   623,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    -1,    -1,    -1,    -1,    23,    24,    25,    26,
      27,    28,    29,    -1,    -1,    32,    -1,    -1,    -1,    36,
      -1,    -1,    -1,    40,    -1,    -1,    43,    44,    45,    -1,
      47,    -1,    -1,    -1,    -1,    -1,    53,    54,    -1,    56,
      57,    -1,    59,    -1,    -1,    -1,    -1,    -1,    65,    66,
      67,    68,    69,    70,    71,    -1,    73,    74,    -1,    -1,
      -1,    -1,    -1,    -1,    81,    -1,    83,    -1,    85,    86,
      87,    88,    -1,    90,    91,    -1,    93,    94,    95,    -1,
      97,    -1,    99,    -1,    -1,   102,    -1,    -1,   105,    -1,
      -1,   108,    -1,   110,    -1,    -1,    -1,   114,   115,   116,
      -1,    -1,   119,    -1,    -1,    -1,    -1,   124,    -1,    -1,
      -1,    -1,    -1,   130,    -1,   132,    -1,    -1,    -1,   136,
      -1,   138,   139,   140,   141,    -1,    -1,    -1,    -1,    -1,
      -1,   148,   149,   150,    -1,    -1,    -1,   154,    -1,    -1,
     157,    -1,   159,   160,   161,    -1,    -1,   164,   165,    -1,
     167,   168,   169,   170,    -1,    -1,    -1,    -1,   175,   176,
     177,    -1,    -1,   180,   181,   182,   183,   184,   185,    -1,
      -1,    -1,    -1,    -1,    -1,   192,    -1,   194,    -1,   196,
      -1,   198,   199,   200,   201,   202,   203,    -1,   205,    -1,
      -1,    -1,    -1,   210,   211,    -1,    -1,    -1,    -1,    -1,
      -1,   218,    -1,    -1,    -1,   222,   223,   224,   225,   226,
      -1,   228,   229,   230,    -1,   232,    -1,   234,    -1,    -1,
      -1,    -1,   239,    -1,    -1,    -1,    -1,   244,    -1,   246,
     247,    -1,   249,   250,   251,    -1,    -1,   254,    -1,    -1,
      -1,   258,   259,    -1,    -1,   262,   263,    -1,   265,   266,
      -1,    -1,    -1,    -1,    -1,   272,   273,    -1,   275,    -1,
     277,    -1,   279,   280,    -1,    -1,    -1,    -1,   285,    -1,
      -1,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,    -1,   305,   306,
     307,   308,    -1,   310,   311,   312,   313,    -1,   315,   316,
      -1,    -1,    -1,    -1,   321,   322,   323,   324,   325,   326,
      -1,    -1,   329,   330,    -1,   332,    -1,   334,    -1,   336,
     337,   338,   339,   340,   341,   342,   343,   344,    -1,    -1,
     347,   348,    -1,    -1,   351,   352,   353,   354,    -1,    -1,
      -1,    -1,   359,    -1,    -1,    -1,    -1,   364,   365,   366,
      -1,   368,   369,   370,   371,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   384,   385,    -1,
      -1,    -1,    -1,   390,   391,   392,    -1,   394,   395,   396,
     397,   398,   399,   400,    -1,    -1,    -1,    -1,   405,   406,
      -1,   408,    -1,   410,   411,   412,   413,   414,    -1,   416,
     417,   418,    -1,    -1,   421,    -1,    -1,    -1,   425,   426,
     427,   428,   429,    -1,    -1,   432,   433,   434,   435,   436,
      -1,   438,    -1,    -1,   441,    -1,   443,   444,    -1,   446,
      -1,    -1,    -1,   450,    -1,    -1,   453,   454,   455,    -1,
      -1,    -1,   459,   460,   461,   462,   463,   464,    -1,   466,
     467,    -1,   469,    -1,    -1,    -1,    -1,   474,   475,   476,
      -1,    -1,    -1,    -1,   481,    -1,    -1,    -1,   485,    -1,
      -1,   488,    -1,    -1,   491,   492,    -1,   494,    -1,   496,
      -1,   498,   499,    -1,    -1,    -1,    -1,    -1,    -1,   506,
     507,    -1,   509,    -1,    -1,   512,    -1,    -1,   515,    -1,
     517,    -1,    -1,    -1,   521,    -1,   523,   524,   525,   526,
     527,   528,    -1,    -1,   531,   532,   533,   534,    -1,   536,
     537,    -1,   539,    -1,   541,   542,   543,   544,    -1,    -1,
     547,   548,    -1,   550,   551,   552,   553,    -1,    -1,    -1,
      -1,    -1,   559,   560,   561,    -1,    -1,    -1,    -1,   566,
     567,   568,    -1,   570,   571,    -1,   573,   574,    -1,    -1,
      -1,    -1,    -1,   580,    -1,    -1,   583,    -1,    -1,    -1,
     587,   588,   589,    -1,    -1,    -1,    -1,    -1,    -1,   596,
      -1,    -1,   599,    -1,    -1,    -1,   603,   604,   605,   606,
     607,   608,    -1,    -1,   611,    -1,    -1,    -1,   615,    -1,
      -1,   618,    -1,   620,    -1,     5,   623,     7,     8,     9,
      10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,
      -1,    -1,    -1,    23,    24,    25,    26,    27,    28,    29,
      -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,
      40,    -1,    -1,    43,    44,    45,    -1,    47,    -1,    -1,
      -1,    -1,    -1,    53,    -1,    -1,    56,    57,    -1,    59,
      -1,    -1,    -1,    -1,    -1,    65,    66,    67,    68,    -1,
      70,    71,    -1,    73,    74,    -1,    -1,    -1,    -1,    -1,
      -1,    81,    -1,    83,    -1,    85,    86,    87,    88,    -1,
      90,    91,    -1,    93,    94,    95,    -1,    97,    -1,    99,
      -1,    -1,   102,    -1,    -1,   105,    -1,    -1,   108,    -1,
     110,    -1,    -1,    -1,   114,   115,   116,    -1,    -1,   119,
      -1,    -1,    -1,    -1,   124,    -1,    -1,    -1,    -1,    -1,
     130,    -1,   132,    -1,    -1,    -1,   136,    -1,   138,   139,
     140,   141,    -1,    -1,    -1,    -1,    -1,    -1,   148,   149,
     150,    -1,    -1,    -1,   154,    -1,    -1,   157,    -1,   159,
     160,   161,    -1,    -1,   164,   165,    -1,   167,   168,   169,
     170,    -1,    -1,    -1,    -1,   175,   176,   177,    -1,    -1,
     180,   181,    -1,   183,   184,   185,    -1,    -1,    -1,    -1,
      -1,    -1,   192,    -1,   194,    -1,   196,    -1,   198,   199,
     200,   201,   202,   203,    -1,   205,    -1,    -1,    -1,    -1,
     210,   211,    -1,    -1,    -1,    -1,    -1,    -1,   218,    -1,
      -1,    -1,   222,   223,   224,   225,    -1,    -1,   228,   229,
     230,    -1,   232,    -1,   234,    -1,    -1,    -1,    -1,   239,
      -1,    -1,    -1,    -1,   244,    -1,   246,   247,    -1,   249,
     250,    -1,    -1,    -1,   254,    -1,    -1,    -1,   258,   259,
      -1,    -1,   262,    -1,    -1,   265,   266,    -1,    -1,    -1,
      -1,    -1,   272,   273,    -1,   275,    -1,   277,    -1,   279,
     280,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,    -1,   305,   306,   307,   308,    -1,
     310,   311,   312,   313,    -1,   315,   316,    -1,    -1,    -1,
      -1,   321,   322,   323,   324,   325,   326,    -1,    -1,   329,
     330,    -1,   332,    -1,   334,    -1,   336,   337,   338,   339,
     340,   341,   342,   343,   344,    -1,    -1,   347,   348,    -1,
      -1,   351,   352,   353,   354,    -1,    -1,    -1,    -1,   359,
      -1,    -1,    -1,    -1,   364,   365,   366,    -1,   368,   369,
     370,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   384,   385,    -1,    -1,    -1,    -1,
     390,   391,   392,    -1,   394,   395,   396,   397,   398,   399,
     400,    -1,    -1,    -1,    -1,   405,   406,    -1,   408,    -1,
     410,   411,   412,   413,   414,    -1,   416,   417,   418,    -1,
      -1,   421,    -1,    -1,    -1,   425,   426,   427,   428,   429,
      -1,    -1,   432,   433,   434,   435,   436,    -1,   438,    -1,
      -1,   441,    -1,   443,    -1,    -1,   446,    -1,    -1,    -1,
     450,    -1,    -1,   453,   454,    -1,    -1,    -1,    -1,   459,
     460,   461,   462,   463,   464,    -1,   466,   467,    -1,   469,
      -1,    -1,    -1,    -1,   474,   475,   476,    -1,    -1,    -1,
      -1,   481,    -1,    -1,    -1,   485,    -1,    -1,   488,    -1,
      -1,   491,   492,    -1,   494,    -1,   496,    -1,   498,   499,
      -1,    -1,    -1,    -1,    -1,    -1,   506,   507,    -1,   509,
      -1,    -1,   512,    -1,    -1,   515,    -1,   517,    -1,    -1,
      -1,   521,    -1,   523,   524,   525,   526,   527,   528,    -1,
      -1,   531,   532,   533,   534,    -1,   536,   537,    -1,   539,
      -1,   541,   542,   543,   544,    -1,    -1,   547,   548,    -1,
     550,   551,   552,   553,    -1,    -1,    -1,    -1,    -1,   559,
     560,   561,    -1,    -1,    -1,    -1,   566,   567,   568,    -1,
     570,   571,    -1,   573,   574,    -1,    -1,    -1,    -1,    -1,
     580,    -1,    -1,   583,    -1,    -1,    -1,   587,   588,   589,
      -1,    -1,    -1,    -1,    -1,    -1,   596,    -1,    -1,   599,
      -1,    -1,    -1,   603,   604,   605,   606,   607,   608,    -1,
      -1,    -1,    -1,    -1,    -1,   615,    -1,    -1,   618,    -1,
     620,    -1,    -1,   623
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const yytype_uint16 yystos[] =
{
       0,    13,    15,    32,    36,    50,    51,    58,    63,    64,
      84,   103,   125,   133,   134,   135,   145,   146,   158,   172,
     188,   204,   209,   213,   238,   240,   256,   274,   278,   372,
     389,   393,   404,   415,   437,   440,   442,   445,   448,   449,
     456,   458,   465,   471,   479,   484,   486,   489,   516,   520,
     565,   577,   581,   584,   590,   619,   625,   635,   646,   649,
     650,   651,   652,   653,   655,   660,   662,   671,   701,   729,
     736,   845,   935,  1010,  1053,  1057,  1067,  1070,  1075,  1088,
    1089,  1094,  1097,  1102,  1109,  1121,  1122,  1287,  1289,  1299,
    1302,  1327,  1335,  1346,  1353,  1367,  1370,  1373,  1383,  1389,
    1393,  1398,  1399,  1449,  1476,  1482,  1484,  1491,  1493,  1521,
    1527,  1528,  1529,  1530,  1583,  1591,  1592,  1593,    11,   112,
     130,   196,   279,   409,   477,   537,  1045,  1046,  1552,  1553,
    1554,  1557,   275,   360,  1096,  1522,   546,  1440,   231,     5,
       7,     8,     9,    10,    11,    14,    18,    21,    23,    24,
      25,    26,    27,    28,    29,    30,    32,    36,    40,    43,
      44,    45,    47,    49,    50,    53,    56,    57,    59,    60,
      62,    63,    65,    66,    67,    68,    69,    70,    71,    73,
      74,    75,    76,    77,    78,    79,    81,    82,    83,    84,
      85,    86,    87,    88,    90,    91,    93,    94,    95,    96,
      97,    99,   102,   105,   108,   110,   114,   115,   116,   119,
     124,   125,   130,   132,   136,   138,   139,   140,   141,   145,
     148,   149,   150,   154,   156,   157,   159,   160,   161,   164,
     165,   167,   168,   169,   170,   171,   172,   175,   176,   177,
     180,   181,   183,   184,   185,   188,   192,   194,   196,   198,
     199,   200,   201,   202,   203,   205,   209,   210,   211,   213,
     217,   218,   222,   223,   224,   225,   228,   229,   230,   232,
     234,   239,   240,   244,   246,   247,   249,   250,   254,   257,
     258,   259,   262,   265,   266,   272,   273,   275,   277,   279,
     280,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   305,   306,   307,
     308,   310,   311,   312,   313,   315,   316,   321,   322,   323,
     324,   325,   326,   329,   330,   332,   334,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   347,   348,   351,   352,
     353,   354,   358,   359,   364,   365,   366,   368,   369,   370,
     371,   373,   374,   383,   384,   385,   388,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   404,
     405,   406,   408,   410,   411,   412,   413,   414,   416,   417,
     418,   421,   425,   426,   427,   428,   429,   432,   433,   434,
     435,   436,   438,   439,   441,   442,   443,   446,   448,   450,
     451,   453,   454,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   469,   470,   474,   475,   476,   477,   481,
     485,   487,   488,   489,   490,   491,   492,   494,   495,   496,
     497,   498,   499,   506,   507,   509,   512,   515,   516,   517,
     520,   521,   523,   524,   525,   526,   527,   528,   531,   532,
     533,   534,   536,   537,   539,   541,   542,   543,   544,   547,
     548,   550,   551,   552,   553,   559,   560,   561,   565,   566,
     567,   568,   570,   571,   573,   574,   576,   577,   580,   583,
     585,   587,   588,   589,   596,   599,   603,   604,   605,   606,
     607,   608,   615,   616,   618,   619,   620,   623,   695,  1439,
    1443,  1447,  1448,   305,   536,   540,  1478,  1478,   615,  1523,
     112,   195,   279,   477,   500,   537,   543,   579,   587,   677,
     678,   897,   898,   899,   987,   988,   989,  1336,  1288,   112,
     169,   196,   231,   279,   409,   477,   537,   543,   562,   587,
     604,  1298,  1443,  1096,   694,   643,  1436,  1438,  1443,   661,
    1300,   398,   497,  1394,   115,   231,   620,  1404,  1478,  1096,
     635,   846,  1443,  1390,   465,   587,  1478,  1096,  1303,  1384,
     503,   726,   730,   731,  1443,   694,  1523,  1443,  1125,  1127,
    1128,  1450,  1354,   730,   669,   670,  1440,    12,   489,   559,
      12,   489,   540,  1348,   398,   497,  1483,  1328,  1443,    32,
      84,   156,   404,   426,   458,   516,  1585,   471,   635,  1123,
       0,   158,   647,   404,   176,   392,  1371,  1436,  1443,   162,
    1021,  1443,   162,   695,   206,   695,   267,  1440,  1443,  1445,
     791,   792,   795,   818,  1443,   540,   227,   370,  1047,  1048,
    1049,   169,  1016,  1552,  1478,  1523,  1103,   702,   643,   669,
    1068,  1090,    17,  1524,   226,   900,   206,  1445,   793,   818,
     694,   379,  1549,  1553,  1554,  1555,  1556,  1557,   540,   898,
     231,   231,   231,   227,   286,   418,  1344,  1345,     7,    21,
      29,    35,    37,    38,    39,    41,    54,    55,    60,    61,
      70,    73,    75,    76,    77,    78,    79,    96,   100,   101,
     106,   107,   111,   112,   117,   118,   119,   124,   126,   129,
     173,   178,   179,   186,   200,   202,   207,   214,   215,   222,
     226,   238,   241,   259,   264,   272,   283,   309,   314,   325,
     329,   331,   335,   336,   337,   338,   339,   346,   355,   356,
     357,   361,   362,   366,   387,   394,   399,   400,   402,   416,
     444,   445,   457,   463,   469,   518,   519,   525,   529,   530,
     535,   546,   550,   551,   552,   553,   563,   564,   565,   569,
     572,   587,   592,   593,   594,   595,   600,   602,   608,   623,
     628,   629,   634,   635,   638,   639,   642,   643,  1144,  1145,
    1146,  1147,  1151,  1158,  1159,  1160,  1161,  1162,  1163,  1171,
    1175,  1186,  1423,  1425,  1427,  1428,  1432,  1434,  1439,  1443,
     226,  1297,  1297,  1297,  1297,   206,  1297,  1297,   818,  1297,
     694,  1297,  1478,   656,  1374,    12,    13,   103,   133,   146,
     169,   172,   183,   204,   231,   238,   278,   410,   414,   430,
     438,   446,   471,   484,   485,   531,   562,   584,   586,  1494,
    1496,  1498,  1499,  1443,   371,    69,   422,   643,  1445,   131,
     216,   286,  1305,  1443,  1440,   210,   496,  1395,   242,  1400,
    1477,  1478,   936,  1138,    48,   847,   193,    35,   305,  1359,
    1391,  1443,   694,  1098,  1478,   131,   286,  1306,  1334,   305,
     417,   489,  1385,  1386,   596,   727,   479,   732,    12,   414,
    1492,  1496,   557,  1524,  1126,    12,   142,   216,   505,   506,
     507,   508,   509,   510,   522,  1132,  1133,  1134,  1548,    60,
      61,   129,   203,   275,   342,   394,   476,   559,   642,   961,
    1443,  1451,  1463,  1467,  1468,    12,    24,    36,    60,    68,
      73,    99,   101,   103,   113,   160,   165,   168,   194,   196,
     203,   205,   230,   231,   232,   253,   275,   305,   371,   397,
     408,   409,   412,   413,   433,   476,   489,   521,   539,   540,
     588,   607,   961,   986,  1355,  1359,  1360,  1362,  1370,  1464,
     732,   516,   520,   490,   669,   422,   612,  1058,  1059,  1060,
     490,   669,  1347,  1443,  1440,  1478,  1334,    37,   214,   215,
     546,  1424,  1441,  1584,  1584,  1584,  1584,  1584,  1127,  1123,
     636,   641,  1443,  1369,  1368,   323,   544,   571,  1012,   585,
     107,  1445,  1446,  1014,   797,   819,  1443,  1013,   373,     6,
      58,   146,   356,   421,   423,   820,  1436,  1049,   695,   511,
    1558,  1559,  1015,  1076,  1104,  1105,  1106,  1107,  1436,   635,
     703,  1443,   557,  1293,  1294,  1436,  1293,    57,   358,   358,
     437,  1525,   355,   356,  1150,  1443,   796,   819,   190,     6,
    1446,  1509,  1512,   445,    10,   409,   562,   681,  1138,  1551,
    1559,  1567,  1571,  1572,  1578,   681,  1138,  1550,  1559,  1567,
    1572,  1578,  1552,  1557,   900,   900,   900,   900,   193,  1337,
    1341,  1342,  1443,  1344,   635,   635,   635,  1158,   635,   635,
     635,  1144,  1189,   635,   635,   635,   635,   635,   635,   635,
     635,   635,   635,   635,   635,   635,   635,  1143,  1143,   635,
    1142,   635,   635,   635,   572,   635,  1423,   635,   635,   635,
     635,   635,   635,   635,   635,   635,   635,   635,  1144,   635,
     635,   635,   635,  1187,  1188,  1432,  1443,   635,   635,   635,
     635,   635,   635,   635,   635,   635,  1144,  1142,   635,   635,
     635,   635,   635,   635,   635,   635,   635,   635,   635,   635,
     635,   635,   635,   635,  1142,   635,  1423,   635,   635,   635,
    1423,   635,   635,    37,   214,   215,   546,   960,   635,  1143,
    1142,  1142,   635,   635,   635,   635,   635,  1158,  1158,  1158,
    1144,  1543,  1544,  1443,  1176,  1443,    16,    17,   376,   379,
     621,  1148,  1149,   162,   163,   197,   208,   248,   260,   287,
     349,  1152,    33,   143,   245,   268,   335,   431,   482,   483,
     498,   626,   627,   628,   629,   630,   631,   632,   633,  1150,
    1158,    72,   378,   637,  1441,   635,   643,   173,  1443,   695,
    1443,  1443,   819,   695,  1445,   829,  1360,   695,  1446,  1508,
    1292,  1297,   591,   657,    35,    68,   136,   160,   164,   198,
     218,   232,   280,   305,   408,   417,   432,   450,   489,   492,
     517,   539,   588,  1375,  1379,  1380,  1478,   408,  1497,   460,
     460,   537,   543,   587,   604,   374,  1501,   536,   367,  1503,
      67,   489,  1500,   113,   604,  1502,   367,   637,    19,   162,
    1239,  1240,  1485,  1443,   227,  1044,   497,    90,   417,  1396,
      50,    88,   286,  1406,  1436,  1479,  1480,  1095,   636,  1144,
     270,   273,   419,   848,   850,   642,   654,  1440,   280,  1099,
    1446,  1100,  1101,  1436,  1071,   242,  1294,  1307,  1308,    50,
    1387,   637,  1441,    56,    66,    81,    93,    94,    95,   110,
     324,   341,   467,   524,   542,   733,   735,  1497,   367,   367,
     465,  1526,  1525,   578,  1531,  1532,   630,  1136,  1137,  1138,
    1134,   479,   643,    35,   129,   162,   480,   962,   963,  1318,
    1445,   191,  1318,  1453,   642,  1445,    35,   129,   965,   966,
    1445,   643,  1454,  1452,  1318,   490,   168,   268,   610,  1366,
     635,   112,   169,   196,   409,   540,   562,   604,  1366,    12,
     909,  1445,   269,  1258,  1260,   193,   245,  1361,  1363,    71,
     517,   191,   517,   536,   497,    71,   517,    12,    43,    97,
     102,   247,   322,   385,   499,   533,  1349,  1350,  1351,   669,
     218,   517,   670,   517,  1258,  1366,  1363,   280,   159,    74,
     411,   536,   561,   191,   517,   599,  1061,  1062,  1061,  1061,
    1061,   369,   617,    91,   637,  1061,  1061,  1294,  1044,   637,
     368,  1587,   532,  1588,   252,   453,  1586,   636,  1532,  1534,
    1536,  1537,   158,   648,  1121,  1372,  1424,  1443,   129,   895,
     896,   906,   907,   970,   115,  1143,   642,   696,     6,   798,
     696,   635,   114,   815,   815,   815,     4,  1011,  1017,   470,
     604,  1559,  1077,  1078,  1294,   245,   637,   393,  1115,  1117,
    1118,   704,   705,  1144,   663,   176,   418,   637,  1069,    59,
     176,   180,   191,   321,   418,  1091,  1092,  1093,    57,   437,
     173,   676,   798,   115,   815,   224,   637,  1138,  1138,  1138,
     169,   196,   196,  1559,  1436,  1443,  1443,  1443,  1295,  1296,
    1436,  1437,  1443,   637,  1339,   643,  1343,  1144,  1144,    12,
     142,  1181,  1241,  1181,  1181,  1181,   609,  1191,  1144,  1144,
    1186,  1186,  1144,  1144,  1144,  1144,  1156,  1157,  1144,  1144,
    1144,  1144,   142,  1181,  1241,   636,   126,   186,   214,   283,
     362,   569,   636,  1267,  1270,  1271,   636,  1144,  1144,  1144,
    1144,  1432,  1543,   120,   121,   122,   123,   124,   219,   220,
     221,   222,   325,   327,   328,   329,   336,   416,   468,   469,
     608,   622,   623,  1236,  1237,  1186,   116,   119,   550,   553,
    1238,   142,  1178,  1144,  1144,  1144,  1144,  1236,  1186,  1144,
    1186,  1188,     9,   637,   643,   142,  1181,  1144,  1144,   142,
    1181,  1144,  1144,  1186,  1186,  1186,  1144,  1144,  1144,  1186,
    1147,  1144,  1144,  1144,  1144,  1144,  1144,  1181,  1181,  1144,
    1144,   142,  1181,  1144,  1237,  1237,  1144,    46,   261,   558,
    1144,  1144,   636,  1433,  1434,  1443,  1181,  1181,  1144,  1144,
     636,   637,   636,   471,   635,  1540,  1541,  1144,   642,  1177,
    1445,   643,  1144,  1144,  1144,  1146,   179,   361,   564,   580,
    1150,    12,    18,  1146,  1153,  1147,  1147,   635,  1158,  1147,
    1147,  1147,  1147,   268,  1147,  1147,   241,  1147,   241,  1147,
    1147,  1147,  1147,  1147,    33,   245,   268,   431,  1445,  1158,
    1144,  1164,  1443,   643,   367,   829,   359,   606,   830,   831,
     160,   637,  1293,  1290,   642,   658,   659,   280,   280,   280,
     280,    50,   280,   669,   280,   637,  1376,   536,   635,  1513,
    1446,  1513,  1513,  1513,   196,   409,   540,  1495,  1499,  1443,
     184,   352,  1443,  1486,  1487,  1307,  1440,   587,  1144,  1397,
    1110,   275,  1405,  1240,   637,  1293,  1139,    74,   635,   855,
     856,   855,   856,   392,   858,   211,   255,  1445,    31,   557,
    1392,   637,   557,   637,   557,  1293,  1308,  1304,   669,  1386,
     637,   162,   637,  1446,   196,   409,  1495,  1443,    12,   142,
    1539,   637,  1129,  1144,  1430,  1443,  1443,    72,   968,  1144,
    1446,   366,   394,   546,  1474,   249,   422,  1469,  1470,  1471,
    1472,   203,   275,   476,  1465,  1318,  1443,   559,  1455,  1466,
    1468,   637,  1457,    12,    35,   129,   367,  1144,  1475,   517,
     245,  1364,  1440,  1144,   630,   900,   695,   695,   695,  1436,
     695,  1436,   280,   340,   517,  1358,  1358,   283,   362,   461,
     569,  1261,  1262,  1425,  1443,  1366,  1443,   695,  1366,  1446,
    1361,  1366,  1440,   695,  1366,   246,   534,   181,   191,  1352,
     637,   168,   517,  1361,  1436,  1363,  1361,  1361,  1144,  1366,
    1366,  1056,   436,   512,  1063,  1064,  1055,  1054,   494,  1060,
     471,   635,   639,  1192,  1193,  1194,  1195,  1196,  1205,  1206,
    1220,  1424,   396,  1589,   377,  1254,  1260,  1538,   896,    72,
     961,   138,  1445,    82,    96,   257,   333,   358,   420,   511,
     698,   700,   427,   573,   816,   817,   234,   812,   813,   814,
     821,   829,   831,   112,   217,   383,   394,   401,   495,   587,
     679,   680,  1440,    25,   313,   806,   807,   808,   821,   822,
     823,   829,   831,   799,   800,   806,     6,    13,    15,    26,
      28,    58,    63,    64,    70,    82,    90,   100,   115,   132,
     139,   140,   146,   154,   160,   189,   229,   231,   239,   254,
     312,   330,   334,   372,   377,   384,   386,   393,   394,   425,
     439,   440,   441,   442,   462,   521,   537,   541,   560,   565,
     578,   842,   902,   904,   906,   907,  1022,  1026,  1028,  1031,
    1037,  1038,  1039,  1250,  1439,   367,   689,  1018,   130,   244,
    1436,   637,   395,  1079,   129,  1108,  1443,  1106,  1436,   844,
    1117,   231,   255,   984,  1119,   636,   637,   228,   288,   290,
     291,   292,   293,   294,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   306,   307,   308,   434,   435,   664,   665,
     668,  1294,   585,  1092,   894,   895,    82,   353,   428,   574,
     809,   810,   811,   821,   825,   826,   827,   828,   829,   831,
     616,   590,   794,    48,   603,   612,  1510,  1512,   196,   695,
     695,   900,   695,  1443,   672,   990,   991,   990,   990,   637,
    1340,  1338,   643,  1343,  1342,   193,   630,  1443,   637,   636,
    1181,   636,  1182,   636,   636,   636,  1144,   152,   609,  1190,
      19,   636,   591,   636,   636,   636,   637,   636,   637,   636,
     637,   637,   637,   637,   591,   637,  1172,   636,   630,   636,
     637,   637,   636,   636,   636,   636,   193,   636,   637,  1174,
     636,   637,   637,   637,   629,   636,   637,   636,   636,   635,
    1432,  1443,  1181,   636,   636,   636,  1181,   636,   637,   636,
     636,   636,   636,   636,   636,   637,   636,   245,   636,   637,
     637,   637,   637,   636,   636,   636,   637,   193,   637,  1181,
     636,   636,   637,   637,   637,   636,   193,  1144,   193,  1144,
     193,  1144,   193,   636,   637,   636,   636,   636,   636,   637,
     636,  1186,  1210,  1211,  1212,   471,   635,  1124,  1535,  1536,
     578,  1545,   640,  1465,   480,  1443,   179,   361,   564,   580,
     635,    17,  1144,  1543,   167,  1246,  1147,  1144,  1144,  1147,
     635,  1158,  1147,  1138,  1168,  1169,  1170,   635,   643,  1443,
    1436,   830,  1318,  1319,  1446,    52,   452,  1050,  1293,  1445,
     637,   669,  1380,  1293,  1381,  1443,  1514,  1515,   557,   630,
    1436,  1443,  1507,  1507,  1507,   162,   184,   197,   208,   258,
     260,   287,   352,   406,  1488,  1490,   610,  1242,  1301,  1446,
    1111,  1112,  1113,  1114,  1436,   233,   286,   422,   617,  1481,
    1480,   635,  1138,  1267,   528,   859,   849,    11,   851,  1144,
    1440,  1446,  1446,  1101,  1436,   176,   418,   589,  1072,  1073,
    1074,   471,   479,   595,   596,   635,   890,  1309,  1312,    12,
    1388,   735,   119,   550,   553,   734,  1175,  1427,  1432,   204,
     193,  1507,  1507,  1507,  1533,  1137,   193,   242,  1130,  1131,
    1253,  1254,  1282,  1139,  1139,   643,   129,   967,   969,  1445,
    1318,   635,   635,   266,   369,   617,   637,   637,   643,   643,
     643,  1468,  1144,  1469,  1456,  1318,  1458,  1459,  1440,   193,
    1365,   636,  1443,   171,   461,   365,   637,  1366,   417,  1258,
    1351,  1364,  1366,  1361,  1436,  1366,  1366,   583,  1065,   637,
    1065,  1219,  1443,   104,   235,   252,   264,   345,   457,   522,
    1203,  1204,   479,   637,  1436,  1219,   637,   191,  1590,    48,
    1258,  1319,  1319,   343,  1440,   511,   511,   511,   511,   511,
     470,  1440,  1440,  1319,   637,   814,  1440,  1440,  1440,  1440,
     126,   186,   214,   283,   362,   569,  1266,  1440,  1440,   636,
     637,  1319,  1319,   637,   808,   801,   802,   821,   822,   823,
      80,    92,   393,   918,   925,   926,   982,   984,   988,   989,
    1043,  1043,   393,  1319,  1319,  1043,  1319,   393,   393,  1319,
    1319,   557,   138,  1319,   253,   537,   190,   393,   407,   984,
    1043,   253,  1319,   537,   138,  1319,  1319,  1319,  1319,  1043,
     393,    48,  1319,  1319,   844,  1319,   393,   391,    19,   162,
     557,  1052,   393,   393,  1319,   141,   322,  1443,  1319,  1319,
     393,  1319,   902,   637,   841,   842,  1026,   635,   643,   917,
     927,  1435,  1443,  1318,    86,   466,   440,  1019,  1560,  1078,
     191,  1116,   635,  1144,   162,   162,   162,   162,   162,   162,
     162,   162,   162,   162,   162,   162,   162,   162,   162,   162,
     162,   162,   162,   162,   162,   637,  1319,  1319,  1319,  1319,
     637,   811,  1445,   279,   177,   803,   804,   805,   821,   822,
     823,   824,   827,   828,   829,   831,   394,   546,  1445,  1443,
    1579,     8,    31,   789,   695,   635,   454,   268,   635,   833,
     836,   901,   903,   904,   567,   591,   998,   367,   367,   367,
    1296,  1443,   591,  1242,  1443,  1193,   643,  1343,   241,  1144,
     636,  1144,   549,  1144,  1144,   156,    35,    61,   116,   119,
     127,   144,   243,   347,   487,   553,   582,  1183,   962,  1157,
    1144,  1156,  1186,  1144,  1144,   962,  1183,  1186,   636,   241,
     241,  1144,  1144,  1186,  1144,  1144,  1144,  1144,  1144,  1147,
     636,   636,  1144,  1144,  1144,  1144,  1144,  1144,  1186,   241,
    1144,  1144,  1144,   636,  1144,  1144,  1144,  1144,   193,  1144,
     193,  1144,   193,  1144,  1144,  1144,   636,  1546,  1547,  1548,
    1211,  1124,   636,  1539,  1445,  1144,  1543,  1146,   636,   637,
     636,  1158,  1236,  1236,    17,  1144,  1543,  1246,  1144,   636,
     637,  1185,  1186,  1443,  1291,   908,  1445,  1050,   659,  1377,
     636,   637,  1509,   643,   643,   557,   557,   557,  1489,  1243,
    1259,  1260,  1309,   637,  1115,  1117,   546,  1442,   617,   275,
      88,   852,   853,   854,  1443,   864,  1147,    48,   635,   866,
     856,   162,   635,   557,  1073,   891,  1310,   635,  1315,  1320,
    1315,   636,   890,  1311,  1429,  1430,  1433,  1443,  1313,   162,
     374,  1508,   193,   193,   193,  1122,   147,  1193,  1283,   191,
     278,  1135,  1282,  1259,  1131,    19,  1140,  1440,  1443,   630,
    1443,  1474,   546,   546,   422,   443,   474,  1473,  1471,  1470,
    1318,  1457,  1475,   637,  1461,  1463,  1467,   126,   186,   283,
     362,   569,  1268,  1356,   165,   607,  1262,  1263,   171,  1262,
    1262,   362,  1365,  1242,  1361,   289,   668,  1066,  1064,  1207,
    1214,  1219,  1192,   252,   252,   380,  1221,   264,   457,  1203,
    1221,  1192,  1330,  1331,  1433,  1194,  1240,  1216,  1217,  1266,
     326,  1255,   969,   963,   115,   115,   130,   244,   223,   832,
    1267,   814,   680,   832,   832,   808,   637,   802,  1006,  1435,
     900,    64,   190,   407,   579,   924,   983,   900,  1007,   984,
     985,   985,   900,  1435,  1096,  1268,  1266,  1297,  1266,    12,
    1027,  1035,  1036,  1443,  1096,  1440,  1440,   961,  1319,  1266,
     255,  1297,   255,  1297,  1297,   908,  1319,   184,   258,   358,
     911,  1266,  1268,  1268,  1297,  1096,  1251,  1252,  1433,   129,
    1266,   129,  1266,  1272,   843,  1440,  1096,  1436,  1096,  1096,
      85,    87,   129,   150,   185,   385,   429,   910,  1266,  1272,
    1027,   905,     6,   146,  1039,   914,   915,   916,   917,   918,
    1443,     8,   184,  1051,   430,   923,   924,   976,   928,   643,
     129,   214,   283,   362,   569,  1269,  1270,  1440,  1443,   356,
     405,    23,   170,   683,   557,   139,   154,   685,   635,  1561,
      12,    74,  1080,   635,   407,  1232,  1233,  1234,  1443,   635,
    1266,  1440,  1440,  1268,  1440,  1266,  1440,  1440,  1440,  1440,
    1440,  1440,  1440,  1266,  1266,  1440,   108,   358,   491,  1428,
    1440,  1266,   665,  1440,  1267,   832,   832,   811,   373,   206,
    1319,   637,   805,   546,    19,   591,  1511,   454,   635,   133,
     238,   584,   790,   682,  1573,   127,   243,   424,   523,   913,
    1436,   268,   890,   914,   840,   841,   637,   903,    47,   211,
     464,  1003,  1003,  1436,  1436,  1436,   643,  1193,  1253,  1343,
    1242,  1144,   636,  1144,   549,   635,   952,   953,   953,   953,
     635,   947,   948,   952,  1184,   953,   243,   953,   243,   636,
     636,   636,    19,  1154,   636,    19,   636,   636,   636,  1173,
    1144,  1144,   636,   636,  1180,  1254,   637,   637,   636,   637,
     636,   245,  1165,  1166,   636,   636,   636,   636,   637,   636,
     636,  1144,   636,   191,   636,   636,   637,   636,   637,   637,
     636,  1144,   636,  1144,   636,  1144,   636,   636,   636,  1136,
    1548,   636,  1542,   643,  1008,   636,  1186,  1146,   636,   637,
     636,  1139,  1170,   636,   612,  1378,  1515,   612,  1518,   630,
     630,  1509,  1509,  1509,   635,  1144,   367,  1325,  1113,  1436,
    1117,   227,  1120,  1401,   636,   637,  1139,   850,   393,   867,
     868,  1267,   852,  1446,  1132,  1316,  1317,  1433,  1321,   637,
     635,  1312,   636,   636,   637,   643,  1531,   734,   193,  1508,
    1508,  1508,  1242,  1242,   148,   381,  1278,  1279,  1284,   584,
     245,  1440,  1443,   643,   636,   636,    83,   570,   422,  1475,
    1460,  1462,  1258,  1263,  1357,  1366,   162,   637,   578,   636,
    1535,  1215,   640,   252,  1221,  1221,  1205,   252,   367,   591,
     637,  1329,  1318,  1230,  1231,  1132,  1144,  1256,  1431,   802,
    1096,   635,   255,   255,   985,  1006,  1006,   991,  1007,  1007,
     146,   479,  1027,  1435,  1024,   637,  1267,   963,  1440,  1297,
    1035,  1435,  1435,  1440,  1435,  1027,   637,    20,   134,  1257,
     847,  1027,  1032,  1027,   635,   636,   637,  1443,  1436,    34,
      35,    40,    42,    44,    45,    61,   116,   119,   127,   144,
     161,   185,   187,   200,   201,   243,   272,   281,   282,   284,
     318,   319,   320,   337,   338,   339,   344,   347,   363,   364,
     399,   400,   424,   475,   479,   493,   547,   550,   553,   554,
     555,   556,   597,   598,   623,   929,   937,   940,   941,   942,
     943,   944,   945,   946,  1443,   405,  1144,  1144,   367,   689,
     695,   367,    82,   690,  1443,  1562,    19,    12,   635,  1081,
    1027,   636,   637,   666,   667,  1266,   635,  1443,   832,   805,
    1440,   913,  1580,   367,   367,   706,   707,   709,  1443,   497,
    1436,   636,   636,   227,   445,   837,  1407,   903,   673,   674,
     675,  1443,  1242,   269,  1264,  1236,  1144,   126,   283,   362,
     569,    21,    35,    49,   576,   961,   971,   972,   973,   362,
     635,   948,   954,   116,   119,   127,   144,   187,   243,   344,
     347,   424,   553,   582,   941,   942,  1155,  1183,   636,  1236,
    1236,   473,  1179,  1144,  1144,  1186,    44,   345,   636,   612,
    1167,  1144,  1236,  1144,  1144,  1144,  1144,   636,   636,   636,
    1213,  1540,  1443,   636,  1186,  1140,   422,   204,   447,  1516,
    1516,  1516,   129,  1144,  1323,  1324,   149,  1120,   262,  1407,
     854,   636,   211,   255,   869,   636,   637,   636,  1136,   637,
    1318,  1322,  1323,  1320,  1314,  1312,  1429,  1443,  1508,  1259,
     206,  1247,  1442,  1442,   642,  1280,  1281,  1445,   481,   630,
    1461,  1466,  1258,  1440,   668,  1539,  1240,  1195,  1192,  1205,
     252,   252,  1192,  1205,  1197,  1198,  1331,  1242,  1324,  1228,
    1229,  1136,   637,  1257,  1029,  1144,  1007,   991,   635,   990,
     990,   129,   129,  1040,  1091,  1036,   968,  1006,  1050,  1041,
    1023,  1252,  1033,  1035,  1025,  1381,   916,   635,   977,   952,
     952,   953,   953,   947,   403,   938,   947,   947,   973,    61,
     597,   941,   943,   973,   973,    61,   598,   598,   601,   947,
     939,   953,   953,   953,   973,   952,   953,    26,    72,    82,
     129,   199,   361,   367,   407,   475,   579,   930,   955,   956,
     957,   975,  1150,  1439,   601,   952,   973,    35,   952,   974,
     952,   952,   953,   954,   643,  1236,   489,  1440,   145,  1020,
     636,   637,  1563,  1564,  1082,   230,   636,  1233,   636,   637,
     679,   497,   236,   245,   382,   710,   711,   712,   713,  1138,
     466,   636,   637,   708,  1440,   636,   835,   834,    19,   893,
     635,   635,   635,   461,  1262,   636,   636,   636,   636,   636,
      35,    21,   576,   961,    35,   962,   637,   362,   953,   947,
      61,   953,   243,   973,   636,   636,   636,  1424,   636,   636,
     637,   636,   332,   257,   417,   636,   636,   636,   636,   636,
     636,   912,  1131,  1259,  1535,   636,   278,   374,    65,   250,
     354,   513,   526,   618,  1505,  1506,   612,  1517,  1517,  1517,
     636,   637,  1326,   242,   635,   857,   851,   870,  1443,   868,
     892,  1317,  1324,   636,  1534,    48,   212,  1244,  1285,  1445,
     637,   332,  1208,   367,  1200,  1205,  1205,   367,  1202,  1144,
     635,  1253,   189,   227,   590,  1223,  1224,  1227,  1218,  1431,
     392,   635,  1030,   636,   635,   635,  1004,  1005,  1443,   635,
     635,   119,   550,   553,   628,   629,  1426,  1427,   927,   929,
    1096,  1034,  1072,   636,   978,  1443,   309,   979,   487,   582,
     624,   949,   950,   951,   635,   949,   949,   973,   601,   949,
     635,   973,   949,   967,  1440,   357,   959,  1426,    14,   584,
     129,   255,    19,   957,   255,   361,  1318,   973,   974,   973,
     974,   949,   949,  1443,   684,   691,   692,  1443,   471,   635,
    1565,  1085,  1443,    12,   635,  1083,   667,   636,  1440,   636,
     637,   708,  1568,   683,  1574,   709,   937,   958,  1534,   901,
     635,   890,  1004,  1004,  1004,   171,   461,   962,   974,   362,
    1144,   332,   175,  1135,  1135,    17,  1382,   546,   546,   546,
      17,  1504,   204,   310,   311,   315,   316,  1519,  1520,  1324,
     255,   540,  1138,   860,   635,   595,   871,   912,  1248,  1431,
    1245,  1253,   961,   964,  1281,  1540,  1199,   591,  1201,   591,
    1235,  1443,  1264,   984,   984,  1224,   912,  1257,  1267,   867,
    1004,  1004,   636,   637,  1257,   635,  1004,  1004,  1428,  1428,
    1051,  1042,   242,   636,   637,   194,   390,   488,   367,   980,
     951,  1009,  1424,  1009,   635,  1141,   357,   596,   635,   129,
    1269,  1440,  1443,   515,   686,    54,    69,   182,   226,   251,
     263,   371,   455,   693,   740,   742,   743,   744,   746,   747,
     748,   749,   750,   751,   753,   761,   762,   765,   776,   779,
     781,   782,  1439,  1444,  1448,  1125,  1123,   612,  1566,   636,
     637,  1084,  1581,   712,  1443,  1436,   688,   689,   454,   968,
     840,   890,   838,   636,   636,   636,   171,   636,   636,   139,
    1505,   374,  1266,  1266,  1266,   362,   628,  1265,  1520,   584,
    1436,   864,   527,   865,   862,   863,  1443,   245,   265,    82,
      90,   115,   231,   312,   330,   353,   537,   887,   888,   889,
    1360,   613,   614,   637,  1249,  1257,  1144,  1259,   963,  1286,
    1209,  1144,   635,  1144,   635,   636,   637,   191,  1222,  1222,
     636,   636,   636,   919,  1005,   362,   636,   636,  1051,   635,
    1443,   133,   584,   636,   637,   636,   636,  1267,  1141,   936,
    1144,   157,   687,   763,   766,  1443,   193,   352,   754,   741,
    1444,  1444,  1443,   745,   650,   285,   444,   611,   785,    32,
     783,   644,   636,    53,    64,   275,  1443,   407,  1086,  1087,
    1443,   697,   958,   191,   685,  1575,   837,   636,  1531,    82,
     254,   992,   995,   998,   999,  1000,  1439,   612,   993,   997,
     999,  1002,   994,   996,   999,  1001,    62,   283,   362,  1332,
    1333,  1433,  1402,  1139,  1267,   636,   637,   873,   548,  1319,
    1319,   138,   138,  1319,  1319,  1319,  1319,   635,   882,   889,
     160,  1431,   409,  1273,    74,  1408,  1535,  1235,  1235,  1443,
     206,   252,   377,  1226,  1225,   976,   922,   992,  1257,   636,
     920,   921,   867,    52,   358,   452,   479,   981,   981,   973,
    1424,   973,   636,   636,  1144,  1144,   609,   768,   772,   193,
    1443,   756,   757,  1144,   715,   739,   740,   742,   744,   746,
     748,   749,   750,   751,   753,   761,   776,   779,   781,   715,
     786,   784,   777,   780,  1534,    64,   374,    64,   636,   637,
     137,   698,   699,  1150,  1582,  1138,   690,   958,   839,  1440,
    1319,  1000,  1318,   388,  1002,  1001,   637,  1318,   964,   636,
     861,   863,   635,   875,   877,   872,  1440,  1440,  1319,  1319,
    1269,  1269,  1267,  1445,   528,   883,   884,  1319,  1257,  1443,
     155,   166,   375,   545,  1409,  1410,   271,  1411,   636,   636,
      48,    48,   635,   635,   992,   993,   994,   636,     5,   129,
     361,   367,   367,   395,   605,   931,   764,   773,   152,   772,
     775,   242,   156,  1144,   156,   739,   641,   583,  1144,   716,
     785,   783,   374,   374,  1087,   137,   739,  1569,   145,  1576,
    1534,  1266,   129,  1269,  1440,  1443,  1439,  1333,  1324,  1403,
     865,   635,   876,   877,   878,   317,   874,   877,  1440,  1440,
     885,   636,   637,   908,  1274,    48,    48,   155,    48,  1410,
     514,   545,  1412,  1413,  1232,  1234,   584,   133,    82,   579,
     932,   933,   934,   609,   767,   769,  1144,   715,   156,   752,
     226,   549,   285,   641,   788,   145,   128,   714,   717,   778,
    1444,   778,   151,   691,   697,   461,  1414,   636,   637,   317,
     880,   881,  1147,   886,  1445,   884,   635,  1424,  1424,    48,
    1424,    48,    48,  1413,   636,   636,   981,   981,  1440,   255,
     934,   770,   769,   775,   774,    54,   755,  1443,   758,  1144,
     787,    98,   174,   722,   737,  1443,   156,   739,   641,   463,
    1577,   224,  1408,   877,   637,   879,   887,  1138,  1275,  1276,
    1277,  1424,  1424,  1424,  1144,   156,   549,   637,   715,   156,
     715,   209,   637,   718,    89,   109,   641,  1570,   739,    48,
    1411,   881,   636,  1144,   636,   637,   771,    54,   715,  1443,
     759,   444,   156,   191,  1443,   958,   191,   191,   739,  1424,
     227,  1415,  1139,  1277,   549,   152,   153,   760,   611,   719,
     129,   738,   725,   726,  1266,   720,   721,   362,   635,  1417,
     715,   715,   756,   502,   504,   723,   724,   725,   728,  1150,
    1443,  1144,  1121,   271,   461,  1416,   636,   642,  1418,  1419,
    1433,   479,  1420,   637,   739,   192,  1445,   636,   637,  1421,
    1422,  1433,   724,  1419,   637,  1318,  1422,  1138,  1324,  1139
};

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		(-2)
#define YYEOF		0

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrorlab


/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */

#define YYFAIL		goto yyerrlab

#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yytoken = YYTRANSLATE (yychar);				\
      YYPOPSTACK (1);						\
      goto yybackup;						\
    }								\
  else								\
    {								\
      yyerror (YY_("syntax error: cannot back up")); \
      YYERROR;							\
    }								\
while (YYID (0))


#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#define YYRHSLOC(Rhs, K) ((Rhs)[K])
#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)				\
    do									\
      if (YYID (N))                                                    \
	{								\
	  (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;	\
	  (Current).first_column = YYRHSLOC (Rhs, 1).first_column;	\
	  (Current).last_line    = YYRHSLOC (Rhs, N).last_line;		\
	  (Current).last_column  = YYRHSLOC (Rhs, N).last_column;	\
	}								\
      else								\
	{								\
	  (Current).first_line   = (Current).last_line   =		\
	    YYRHSLOC (Rhs, 0).last_line;				\
	  (Current).first_column = (Current).last_column =		\
	    YYRHSLOC (Rhs, 0).last_column;				\
	}								\
    while (YYID (0))
#endif


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if YYLTYPE_IS_TRIVIAL
#  define YY_LOCATION_PRINT(File, Loc)			\
     fprintf (File, "%d.%d-%d.%d",			\
	      (Loc).first_line, (Loc).first_column,	\
	      (Loc).last_line,  (Loc).last_column)
# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#ifdef YYLEX_PARAM
# define YYLEX yylex (&yylval, YYLEX_PARAM)
#else
# define YYLEX yylex (&yylval)
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (YYID (0))

# define YY_SYMBOL_PRINT(Title, Type, Value, Location)			  \
do {									  \
  if (yydebug)								  \
    {									  \
      YYFPRINTF (stderr, "%s ", Title);					  \
      yy_symbol_print (stderr,						  \
		  Type, Value); \
      YYFPRINTF (stderr, "\n");						  \
    }									  \
} while (YYID (0))


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)
#else
static void
yy_symbol_value_print (yyoutput, yytype, yyvaluep)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
#endif
{
  if (!yyvaluep)
    return;
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# else
  YYUSE (yyoutput);
# endif
  switch (yytype)
    {
      default:
	break;
    }
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)
#else
static void
yy_symbol_print (yyoutput, yytype, yyvaluep)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
#endif
{
  if (yytype < YYNTOKENS)
    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);

  yy_symbol_value_print (yyoutput, yytype, yyvaluep);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
#else
static void
yy_stack_print (yybottom, yytop)
    yytype_int16 *yybottom;
    yytype_int16 *yytop;
#endif
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)				\
do {								\
  if (yydebug)							\
    yy_stack_print ((Bottom), (Top));				\
} while (YYID (0))


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_reduce_print (YYSTYPE *yyvsp, int yyrule)
#else
static void
yy_reduce_print (yyvsp, yyrule)
    YYSTYPE *yyvsp;
    int yyrule;
#endif
{
  int yynrhs = yyr2[yyrule];
  int yyi;
  unsigned long int yylno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
	     yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
		       &(yyvsp[(yyi + 1) - (yynrhs)])
		       		       );
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug)				\
    yy_reduce_print (yyvsp, Rule); \
} while (YYID (0))

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif



#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static YYSIZE_T
yystrlen (const char *yystr)
#else
static YYSIZE_T
yystrlen (yystr)
    const char *yystr;
#endif
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static char *
yystpcpy (char *yydest, const char *yysrc)
#else
static char *
yystpcpy (yydest, yysrc)
    char *yydest;
    const char *yysrc;
#endif
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
	switch (*++yyp)
	  {
	  case '\'':
	  case ',':
	    goto do_not_strip_quotes;

	  case '\\':
	    if (*++yyp != '\\')
	      goto do_not_strip_quotes;
	    /* Fall through.  */
	  default:
	    if (yyres)
	      yyres[yyn] = *yyp;
	    yyn++;
	    break;

	  case '"':
	    if (yyres)
	      yyres[yyn] = '\0';
	    return yyn;
	  }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into YYRESULT an error message about the unexpected token
   YYCHAR while in state YYSTATE.  Return the number of bytes copied,
   including the terminating null byte.  If YYRESULT is null, do not
   copy anything; just return the number of bytes that would be
   copied.  As a special case, return 0 if an ordinary "syntax error"
   message will do.  Return YYSIZE_MAXIMUM if overflow occurs during
   size calculation.  */
static YYSIZE_T
yysyntax_error (char *yyresult, int yystate, int yychar)
{
  int yyn = yypact[yystate];

  if (! (YYPACT_NINF < yyn && yyn <= YYLAST))
    return 0;
  else
    {
      int yytype = YYTRANSLATE (yychar);
      YYSIZE_T yysize0 = yytnamerr (0, yytname[yytype]);
      YYSIZE_T yysize = yysize0;
      YYSIZE_T yysize1;
      int yysize_overflow = 0;
      enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
      char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
      int yyx;

# if 0
      /* This is so xgettext sees the translatable formats that are
	 constructed on the fly.  */
      YY_("syntax error, unexpected %s");
      YY_("syntax error, unexpected %s, expecting %s");
      YY_("syntax error, unexpected %s, expecting %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s");
# endif
      char *yyfmt;
      char const *yyf;
      static char const yyunexpected[] = "syntax error, unexpected %s";
      static char const yyexpecting[] = ", expecting %s";
      static char const yyor[] = " or %s";
      char yyformat[sizeof yyunexpected
		    + sizeof yyexpecting - 1
		    + ((YYERROR_VERBOSE_ARGS_MAXIMUM - 2)
		       * (sizeof yyor - 1))];
      char const *yyprefix = yyexpecting;

      /* Start YYX at -YYN if negative to avoid negative indexes in
	 YYCHECK.  */
      int yyxbegin = yyn < 0 ? -yyn : 0;

      /* Stay within bounds of both yycheck and yytname.  */
      int yychecklim = YYLAST - yyn + 1;
      int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
      int yycount = 1;

      yyarg[0] = yytname[yytype];
      yyfmt = yystpcpy (yyformat, yyunexpected);

      for (yyx = yyxbegin; yyx < yyxend; ++yyx)
	if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
	  {
	    if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
	      {
		yycount = 1;
		yysize = yysize0;
		yyformat[sizeof yyunexpected - 1] = '\0';
		break;
	      }
	    yyarg[yycount++] = yytname[yyx];
	    yysize1 = yysize + yytnamerr (0, yytname[yyx]);
	    yysize_overflow |= (yysize1 < yysize);
	    yysize = yysize1;
	    yyfmt = yystpcpy (yyfmt, yyprefix);
	    yyprefix = yyor;
	  }

      yyf = YY_(yyformat);
      yysize1 = yysize + yystrlen (yyf);
      yysize_overflow |= (yysize1 < yysize);
      yysize = yysize1;

      if (yysize_overflow)
	return YYSIZE_MAXIMUM;

      if (yyresult)
	{
	  /* Avoid sprintf, as that infringes on the user's name space.
	     Don't have undefined behavior even if the translation
	     produced a string with the wrong number of "%s"s.  */
	  char *yyp = yyresult;
	  int yyi = 0;
	  while ((*yyp = *yyf) != '\0')
	    {
	      if (*yyp == '%' && yyf[1] == 's' && yyi < yycount)
		{
		  yyp += yytnamerr (yyp, yyarg[yyi++]);
		  yyf += 2;
		}
	      else
		{
		  yyp++;
		  yyf++;
		}
	    }
	}
      return yysize;
    }
}
#endif /* YYERROR_VERBOSE */


/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep)
#else
static void
yydestruct (yymsg, yytype, yyvaluep)
    const char *yymsg;
    int yytype;
    YYSTYPE *yyvaluep;
#endif
{
  YYUSE (yyvaluep);

  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  switch (yytype)
    {

      default:
	break;
    }
}

/* Prevent warnings from -Wmissing-prototypes.  */
#ifdef YYPARSE_PARAM
#if defined __STDC__ || defined __cplusplus
int yyparse (void *YYPARSE_PARAM);
#else
int yyparse ();
#endif
#else /* ! YYPARSE_PARAM */
#if defined __STDC__ || defined __cplusplus
int yyparse (void);
#else
int yyparse ();
#endif
#endif /* ! YYPARSE_PARAM */





/*-------------------------.
| yyparse or yypush_parse.  |
`-------------------------*/

#ifdef YYPARSE_PARAM
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void *YYPARSE_PARAM)
#else
int
yyparse (YYPARSE_PARAM)
    void *YYPARSE_PARAM;
#endif
#else /* ! YYPARSE_PARAM */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void)
#else
int
yyparse ()

#endif
#endif
{
/* The lookahead symbol.  */
int yychar;

/* The semantic value of the lookahead symbol.  */
YYSTYPE yylval;

    /* Number of syntax errors so far.  */
    int yynerrs;

    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       `yyss': related to states.
       `yyvs': related to semantic values.

       Refer to the stacks thru separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    YYSIZE_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yytoken = 0;
  yyss = yyssa;
  yyvs = yyvsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */
  yyssp = yyss;
  yyvsp = yyvs;

  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack.  Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	yytype_int16 *yyss1 = yyss;

	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
	yyoverflow (YY_("memory exhausted"),
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yystacksize);

	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
	goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
	yystacksize = YYMAXDEPTH;

      {
	yytype_int16 *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyexhaustedlab;
	YYSTACK_RELOCATE (yyss_alloc, yyss);
	YYSTACK_RELOCATE (yyvs_alloc, yyvs);
#  undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yyn == YYPACT_NINF)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yyn == 0 || yyn == YYTABLE_NINF)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token.  */
  yychar = YYEMPTY;

  yystate = yyn;
  *++yyvsp = yylval;

  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];


  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 2:

/* Line 1455 of yacc.c  */
#line 1838 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            if (!thd->bootstrap &&
              (!(thd->lex->select_lex.options & OPTION_FOUND_COMMENT)))
            {
              my_message(ER_EMPTY_QUERY, ER(ER_EMPTY_QUERY), MYF(0));
              MYSQL_YYABORT;
            }
            thd->lex->sql_command= SQLCOM_EMPTY_QUERY;
            YYLIP->found_semicolon= NULL;
          }
    break;

  case 3:

/* Line 1455 of yacc.c  */
#line 1850 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex_input_stream *lip = YYLIP;

            if ((YYTHD->client_capabilities & CLIENT_MULTI_QUERIES) &&
                lip->multi_statements &&
                ! lip->eof())
            {
              /*
                We found a well formed query, and multi queries are allowed:
                - force the parser to stop after the ';'
                - mark the start of the next query for the next invocation
                  of the parser.
              */
              lip->next_state= MY_LEX_END;
              lip->found_semicolon= lip->get_ptr();
            }
            else
            {
              /* Single query, terminated. */
              lip->found_semicolon= NULL;
            }
          }
    break;

  case 5:

/* Line 1455 of yacc.c  */
#line 1875 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* Single query, not terminated. */
            YYLIP->found_semicolon= NULL;
          }
    break;

  case 63:

/* Line 1455 of yacc.c  */
#line 1950 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_DEALLOCATE_PREPARE;
            lex->prepared_stmt_name= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 66:

/* Line 1455 of yacc.c  */
#line 1965 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_PREPARE;
            lex->prepared_stmt_name= (yyvsp[(2) - (4)].lex_str);
          }
    break;

  case 67:

/* Line 1455 of yacc.c  */
#line 1975 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->prepared_stmt_code= (yyvsp[(1) - (1)].lex_str);
            lex->prepared_stmt_code_is_varref= FALSE;
          }
    break;

  case 68:

/* Line 1455 of yacc.c  */
#line 1982 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->prepared_stmt_code= (yyvsp[(2) - (2)].lex_str);
            lex->prepared_stmt_code_is_varref= TRUE;
          }
    break;

  case 69:

/* Line 1455 of yacc.c  */
#line 1992 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_EXECUTE;
            lex->prepared_stmt_name= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 70:

/* Line 1455 of yacc.c  */
#line 1999 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 75:

/* Line 1455 of yacc.c  */
#line 2014 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            LEX_STRING *lexstr= (LEX_STRING*)sql_memdup(&(yyvsp[(2) - (2)].lex_str), sizeof(LEX_STRING));
            if (!lexstr || lex->prepared_stmt_params.push_back(lexstr))
              MYSQL_YYABORT;
          }
    break;

  case 76:

/* Line 1455 of yacc.c  */
#line 2026 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HELP");
              MYSQL_YYABORT;
            }
          }
    break;

  case 77:

/* Line 1455 of yacc.c  */
#line 2034 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_HELP;
            lex->help_arg= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 78:

/* Line 1455 of yacc.c  */
#line 2045 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_CHANGE_MASTER;
          }
    break;

  case 79:

/* Line 1455 of yacc.c  */
#line 2049 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 82:

/* Line 1455 of yacc.c  */
#line 2059 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.host = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 83:

/* Line 1455 of yacc.c  */
#line 2063 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.user = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 84:

/* Line 1455 of yacc.c  */
#line 2067 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.password = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 85:

/* Line 1455 of yacc.c  */
#line 2071 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.port = (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 86:

/* Line 1455 of yacc.c  */
#line 2075 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.connect_retry = (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 87:

/* Line 1455 of yacc.c  */
#line 2079 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.ssl= (yyvsp[(3) - (3)].ulong_num) ? 
              LEX_MASTER_INFO::LEX_MI_ENABLE : LEX_MASTER_INFO::LEX_MI_DISABLE;
          }
    break;

  case 88:

/* Line 1455 of yacc.c  */
#line 2084 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_ca= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 89:

/* Line 1455 of yacc.c  */
#line 2088 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_capath= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 90:

/* Line 1455 of yacc.c  */
#line 2092 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_cert= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 91:

/* Line 1455 of yacc.c  */
#line 2096 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_cipher= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 92:

/* Line 1455 of yacc.c  */
#line 2100 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_key= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 93:

/* Line 1455 of yacc.c  */
#line 2104 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_verify_server_cert= (yyvsp[(3) - (3)].ulong_num) ?
              LEX_MASTER_INFO::LEX_MI_ENABLE : LEX_MASTER_INFO::LEX_MI_DISABLE;
          }
    break;

  case 94:

/* Line 1455 of yacc.c  */
#line 2109 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_crl= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 95:

/* Line 1455 of yacc.c  */
#line 2113 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_crlpath= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 96:

/* Line 1455 of yacc.c  */
#line 2118 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.heartbeat_period= (float) (yyvsp[(3) - (3)].item_num)->val_real();
            if (Lex->mi.heartbeat_period > SLAVE_MAX_HEARTBEAT_PERIOD ||
                Lex->mi.heartbeat_period < 0.0)
            {
               const char format[]= "%d";
               char buf[4*sizeof(SLAVE_MAX_HEARTBEAT_PERIOD) + sizeof(format)];
               sprintf(buf, format, SLAVE_MAX_HEARTBEAT_PERIOD);
               my_error(ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE, MYF(0), buf);
               MYSQL_YYABORT;
            }
            if (Lex->mi.heartbeat_period > slave_net_timeout)
            {
              push_warning_printf(YYTHD, MYSQL_ERROR::WARN_LEVEL_WARN,
                                  ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MAX,
                                  ER(ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MAX));
            }
            if (Lex->mi.heartbeat_period < 0.001)
            {
              if (Lex->mi.heartbeat_period != 0.0)
              {
                push_warning_printf(YYTHD, MYSQL_ERROR::WARN_LEVEL_WARN,
                                    ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MIN,
                                    ER(ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MIN));
                Lex->mi.heartbeat_period= 0.0;
              }
              Lex->mi.heartbeat_opt=  LEX_MASTER_INFO::LEX_MI_DISABLE;
            }
            Lex->mi.heartbeat_opt=  LEX_MASTER_INFO::LEX_MI_ENABLE;
          }
    break;

  case 97:

/* Line 1455 of yacc.c  */
#line 2149 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.repl_ignore_server_ids_opt= LEX_MASTER_INFO::LEX_MI_ENABLE;
           }
    break;

  case 102:

/* Line 1455 of yacc.c  */
#line 2164 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            insert_dynamic(&Lex->mi.repl_ignore_server_ids, (uchar*) &((yyvsp[(1) - (1)].ulong_num)));
          }
    break;

  case 103:

/* Line 1455 of yacc.c  */
#line 2170 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.log_file_name = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 104:

/* Line 1455 of yacc.c  */
#line 2174 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.pos = (yyvsp[(3) - (3)].ulonglong_number);
            /* 
               If the user specified a value < BIN_LOG_HEADER_SIZE, adjust it
               instead of causing subsequent errors. 
               We need to do it in this file, because only there we know that 
               MASTER_LOG_POS has been explicitely specified. On the contrary
               in change_master() (sql_repl.cc) we cannot distinguish between 0
               (MASTER_LOG_POS explicitely specified as 0) and 0 (unspecified),
               whereas we want to distinguish (specified 0 means "read the binlog
               from 0" (4 in fact), unspecified means "don't change the position
               (keep the preceding value)").
            */
            Lex->mi.pos = max(BIN_LOG_HEADER_SIZE, Lex->mi.pos);
          }
    break;

  case 105:

/* Line 1455 of yacc.c  */
#line 2190 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.relay_log_name = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 106:

/* Line 1455 of yacc.c  */
#line 2194 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.relay_log_pos = (yyvsp[(3) - (3)].ulong_num);
            /* Adjust if < BIN_LOG_HEADER_SIZE (same comment as Lex->mi.pos) */
            Lex->mi.relay_log_pos = max(BIN_LOG_HEADER_SIZE, Lex->mi.relay_log_pos);
          }
    break;

  case 107:

/* Line 1455 of yacc.c  */
#line 2200 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->mi.use_gtid_opt != LEX_MASTER_INFO::LEX_GTID_UNCHANGED)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "MASTER_use_gtid");
              MYSQL_YYABORT;
            }
            Lex->mi.use_gtid_opt= LEX_MASTER_INFO::LEX_GTID_CURRENT_POS;
          }
    break;

  case 108:

/* Line 1455 of yacc.c  */
#line 2210 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->mi.use_gtid_opt != LEX_MASTER_INFO::LEX_GTID_UNCHANGED)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "MASTER_use_gtid");
              MYSQL_YYABORT;
            }
            Lex->mi.use_gtid_opt= LEX_MASTER_INFO::LEX_GTID_SLAVE_POS;
          }
    break;

  case 109:

/* Line 1455 of yacc.c  */
#line 2220 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->mi.use_gtid_opt != LEX_MASTER_INFO::LEX_GTID_UNCHANGED)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "MASTER_use_gtid");
              MYSQL_YYABORT;
            }
            Lex->mi.use_gtid_opt= LEX_MASTER_INFO::LEX_GTID_NO;
          }
    break;

  case 110:

/* Line 1455 of yacc.c  */
#line 2232 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->mi.connection_name= thd->variables.default_master_connection;
          }
    break;

  case 112:

/* Line 1455 of yacc.c  */
#line 2242 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
           Lex->mi.connection_name= (yyvsp[(1) - (1)].lex_str);
#ifdef HAVE_REPLICATION
           if (check_master_connection_name(&(yyvsp[(1) - (1)].lex_str)))
           {
              my_error(ER_WRONG_ARGUMENTS, MYF(0), "MASTER_CONNECTION_NAME");
              MYSQL_YYABORT;
           }
#endif
         }
    break;

  case 113:

/* Line 1455 of yacc.c  */
#line 2257 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_CREATE_TABLE;
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(5) - (5)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_WRITE, MDL_EXCLUSIVE))
              MYSQL_YYABORT;
            /*
              For CREATE TABLE, an non-existing table is not an error.
              Instruct open_tables() to just take an MDL lock if the
              table does not exist.
            */
            lex->query_tables->open_strategy= TABLE_LIST::OPEN_IF_EXISTS;
            lex->alter_info.reset();
            lex->col_list.empty();
            lex->change=NullS;
            bzero((char*) &lex->create_info,sizeof(lex->create_info));
            lex->create_info.options=(yyvsp[(2) - (5)].num) | (yyvsp[(4) - (5)].num);
            lex->create_info.default_table_charset= NULL;
            lex->name.str= 0;
            lex->name.length= 0;
            lex->create_last_non_select_table= lex->last_table();
          }
    break;

  case 114:

/* Line 1455 of yacc.c  */
#line 2282 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= YYTHD->lex;
            lex->current_select= &lex->select_lex; 
            if ((lex->create_info.used_fields & HA_CREATE_USED_ENGINE) &&
                !lex->create_info.db_type)
            {
              lex->create_info.db_type= ha_default_handlerton(YYTHD);
              push_warning_printf(YYTHD, MYSQL_ERROR::WARN_LEVEL_WARN,
                                  ER_WARN_USING_OTHER_HANDLER,
                                  ER(ER_WARN_USING_OTHER_HANDLER),
                                  hton_name(lex->create_info.db_type)->str,
                                  (yyvsp[(5) - (7)].table)->table.str);
            }
            create_table_set_open_action_and_adjust_tables(lex);
          }
    break;

  case 115:

/* Line 1455 of yacc.c  */
#line 2298 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_create_index_prepare(Lex, (yyvsp[(8) - (8)].table)))
              MYSQL_YYABORT;
          }
    break;

  case 116:

/* Line 1455 of yacc.c  */
#line 2303 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_create_index(Lex, (yyvsp[(2) - (13)].key_type), (yyvsp[(5) - (13)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 117:

/* Line 1455 of yacc.c  */
#line 2309 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_create_index_prepare(Lex, (yyvsp[(8) - (8)].table)))
              MYSQL_YYABORT;
          }
    break;

  case 118:

/* Line 1455 of yacc.c  */
#line 2314 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_create_index(Lex, (yyvsp[(2) - (13)].key_type), (yyvsp[(5) - (13)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 119:

/* Line 1455 of yacc.c  */
#line 2320 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_create_index_prepare(Lex, (yyvsp[(8) - (8)].table)))
              MYSQL_YYABORT;
          }
    break;

  case 120:

/* Line 1455 of yacc.c  */
#line 2325 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_create_index(Lex, (yyvsp[(2) - (13)].key_type), (yyvsp[(5) - (13)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 121:

/* Line 1455 of yacc.c  */
#line 2330 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.default_table_charset= NULL;
            Lex->create_info.used_fields= 0;
          }
    break;

  case 122:

/* Line 1455 of yacc.c  */
#line 2335 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_CREATE_DB;
            lex->name= (yyvsp[(4) - (6)].lex_str);
            lex->create_info.options=(yyvsp[(3) - (6)].num);
          }
    break;

  case 123:

/* Line 1455 of yacc.c  */
#line 2342 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_view_mode= VIEW_CREATE_NEW;
            Lex->create_view_algorithm= DTYPE_ALGORITHM_UNDEFINED;
            Lex->create_view_suid= TRUE;
          }
    break;

  case 124:

/* Line 1455 of yacc.c  */
#line 2348 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 125:

/* Line 1455 of yacc.c  */
#line 2350 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_CREATE_USER;
          }
    break;

  case 126:

/* Line 1455 of yacc.c  */
#line 2354 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->alter_tablespace_info->ts_cmd_type= CREATE_LOGFILE_GROUP;
          }
    break;

  case 127:

/* Line 1455 of yacc.c  */
#line 2358 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->alter_tablespace_info->ts_cmd_type= CREATE_TABLESPACE;
          }
    break;

  case 128:

/* Line 1455 of yacc.c  */
#line 2362 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_CREATE_SERVER;
          }
    break;

  case 129:

/* Line 1455 of yacc.c  */
#line 2373 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->server_options.server_name= (yyvsp[(2) - (10)].lex_str).str;
            Lex->server_options.server_name_length= (yyvsp[(2) - (10)].lex_str).length;
            Lex->server_options.scheme= (yyvsp[(6) - (10)].lex_str).str;
          }
    break;

  case 132:

/* Line 1455 of yacc.c  */
#line 2387 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->server_options.username= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 133:

/* Line 1455 of yacc.c  */
#line 2391 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->server_options.host= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 134:

/* Line 1455 of yacc.c  */
#line 2395 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->server_options.db= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 135:

/* Line 1455 of yacc.c  */
#line 2399 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->server_options.owner= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 136:

/* Line 1455 of yacc.c  */
#line 2403 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->server_options.password= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 137:

/* Line 1455 of yacc.c  */
#line 2407 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->server_options.socket= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 138:

/* Line 1455 of yacc.c  */
#line 2411 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->server_options.port= (yyvsp[(2) - (2)].ulong_num);
          }
    break;

  case 139:

/* Line 1455 of yacc.c  */
#line 2418 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex=Lex;

            lex->stmt_definition_begin= (yyvsp[(1) - (4)].simple_string);
            lex->create_info.options= (yyvsp[(3) - (4)].num);
            if (!(lex->event_parse_data= Event_parse_data::new_instance(thd)))
              MYSQL_YYABORT;
            lex->event_parse_data->identifier= (yyvsp[(4) - (4)].spname);
            lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_DROP;

            lex->sql_command= SQLCOM_CREATE_EVENT;
            /* We need that for disallowing subqueries */
          }
    break;

  case 140:

/* Line 1455 of yacc.c  */
#line 2438 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              sql_command is set here because some rules in ev_sql_stmt
              can overwrite it
            */
            Lex->sql_command= SQLCOM_CREATE_EVENT;
          }
    break;

  case 141:

/* Line 1455 of yacc.c  */
#line 2449 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_expression= (yyvsp[(2) - (3)].item);
            Lex->event_parse_data->interval= (yyvsp[(3) - (3)].interval);
          }
    break;

  case 143:

/* Line 1455 of yacc.c  */
#line 2456 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_execute_at= (yyvsp[(2) - (2)].item);
          }
    break;

  case 144:

/* Line 1455 of yacc.c  */
#line 2462 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 145:

/* Line 1455 of yacc.c  */
#line 2464 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::ENABLED;
            Lex->event_parse_data->status_changed= true;
            (yyval.num)= 1;
          }
    break;

  case 146:

/* Line 1455 of yacc.c  */
#line 2470 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::SLAVESIDE_DISABLED;
            Lex->event_parse_data->status_changed= true; 
            (yyval.num)= 1;
          }
    break;

  case 147:

/* Line 1455 of yacc.c  */
#line 2476 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::DISABLED;
            Lex->event_parse_data->status_changed= true;
            (yyval.num)= 1;
          }
    break;

  case 148:

/* Line 1455 of yacc.c  */
#line 2485 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_func_now_local(0);
            if (item == NULL)
              MYSQL_YYABORT;
            Lex->event_parse_data->item_starts= item;
          }
    break;

  case 149:

/* Line 1455 of yacc.c  */
#line 2492 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_starts= (yyvsp[(2) - (2)].item);
          }
    break;

  case 151:

/* Line 1455 of yacc.c  */
#line 2500 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_ends= (yyvsp[(2) - (2)].item);
          }
    break;

  case 152:

/* Line 1455 of yacc.c  */
#line 2506 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 154:

/* Line 1455 of yacc.c  */
#line 2512 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_PRESERVE;
            (yyval.num)= 1;
          }
    break;

  case 155:

/* Line 1455 of yacc.c  */
#line 2518 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_DROP;
            (yyval.num)= 1;
          }
    break;

  case 156:

/* Line 1455 of yacc.c  */
#line 2526 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 157:

/* Line 1455 of yacc.c  */
#line 2528 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->comment= Lex->event_parse_data->comment= (yyvsp[(2) - (2)].lex_str);
            (yyval.num)= 1;
          }
    break;

  case 158:

/* Line 1455 of yacc.c  */
#line 2535 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            /*
              This stops the following :
              - CREATE EVENT ... DO CREATE EVENT ...;
              - ALTER  EVENT ... DO CREATE EVENT ...;
              - CREATE EVENT ... DO ALTER EVENT DO ....;
              - CREATE PROCEDURE ... BEGIN CREATE EVENT ... END|
              This allows:
              - CREATE EVENT ... DO DROP EVENT yyy;
              - CREATE EVENT ... DO ALTER EVENT yyy;
                (the nested ALTER EVENT can have anything but DO clause)
              - ALTER  EVENT ... DO ALTER EVENT yyy;
                (the nested ALTER EVENT can have anything but DO clause)
              - ALTER  EVENT ... DO DROP EVENT yyy;
              - CREATE PROCEDURE ... BEGIN ALTER EVENT ... END|
                (the nested ALTER EVENT can have anything but DO clause)
              - CREATE PROCEDURE ... BEGIN DROP EVENT ... END|
            */
            if (lex->sphead)
            {
              my_error(ER_EVENT_RECURSION_FORBIDDEN, MYF(0));
              MYSQL_YYABORT;
            }
              
            if (!(lex->sphead= new sp_head()))
              MYSQL_YYABORT;

            lex->sphead->reset_thd_mem_root(thd);
            lex->sphead->init(lex);
            lex->sphead->init_sp_name(thd, lex->event_parse_data->identifier);

            lex->sphead->m_type= TYPE_ENUM_PROCEDURE;

            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
            lex->sphead->m_chistics= &lex->sp_chistics;

            lex->sphead->set_body_start(thd, lip->get_cpp_ptr());
          }
    break;

  case 159:

/* Line 1455 of yacc.c  */
#line 2578 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            /* return back to the original memory root ASAP */
            lex->sphead->set_stmt_end(thd);
            lex->sphead->restore_thd_mem_root(thd);

            lex->sp_chistics.suid= SP_IS_SUID;  //always the definer!

            lex->event_parse_data->body_changed= TRUE;
          }
    break;

  case 173:

/* Line 1455 of yacc.c  */
#line 2610 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
           LEX *lex=Lex;
           lex->users_list.empty();
           lex->columns.empty();
           lex->grant= lex->grant_tot_col= 0;
           lex->all_privileges= 0;
           lex->select_lex.db= 0;
           lex->ssl_type= SSL_TYPE_NOT_SPECIFIED;
           lex->ssl_cipher= lex->x509_subject= lex->x509_issuer= 0;
           bzero((char *)&(lex->mqh),sizeof(lex->mqh));
         }
    break;

  case 174:

/* Line 1455 of yacc.c  */
#line 2625 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!(yyvsp[(1) - (3)].lex_str).str || check_db_name(&(yyvsp[(1) - (3)].lex_str)))
            {
              my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[(1) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (check_routine_name(&(yyvsp[(3) - (3)].lex_str)))
            {
              MYSQL_YYABORT;
            }
            (yyval.spname)= new sp_name((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), true);
            if ((yyval.spname) == NULL)
              MYSQL_YYABORT;
            (yyval.spname)->init_qname(YYTHD);
          }
    break;

  case 175:

/* Line 1455 of yacc.c  */
#line 2641 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            LEX_STRING db;
            if (check_routine_name(&(yyvsp[(1) - (1)].lex_str)))
            {
              MYSQL_YYABORT;
            }
            if (lex->copy_db_to(&db.str, &db.length))
              MYSQL_YYABORT;
            (yyval.spname)= new sp_name(db, (yyvsp[(1) - (1)].lex_str), false);
            if ((yyval.spname) == NULL)
              MYSQL_YYABORT;
            (yyval.spname)->init_qname(thd);
          }
    break;

  case 176:

/* Line 1455 of yacc.c  */
#line 2659 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 177:

/* Line 1455 of yacc.c  */
#line 2660 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 178:

/* Line 1455 of yacc.c  */
#line 2664 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 179:

/* Line 1455 of yacc.c  */
#line 2665 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 180:

/* Line 1455 of yacc.c  */
#line 2671 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sp_chistics.comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 181:

/* Line 1455 of yacc.c  */
#line 2673 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* Just parse it, we only have one language for now. */ }
    break;

  case 182:

/* Line 1455 of yacc.c  */
#line 2675 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_NO_SQL; }
    break;

  case 183:

/* Line 1455 of yacc.c  */
#line 2677 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_CONTAINS_SQL; }
    break;

  case 184:

/* Line 1455 of yacc.c  */
#line 2679 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_READS_SQL_DATA; }
    break;

  case 185:

/* Line 1455 of yacc.c  */
#line 2681 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_MODIFIES_SQL_DATA; }
    break;

  case 186:

/* Line 1455 of yacc.c  */
#line 2683 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 187:

/* Line 1455 of yacc.c  */
#line 2688 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { }
    break;

  case 188:

/* Line 1455 of yacc.c  */
#line 2689 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sp_chistics.detistic= TRUE; }
    break;

  case 189:

/* Line 1455 of yacc.c  */
#line 2690 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sp_chistics.detistic= FALSE; }
    break;

  case 190:

/* Line 1455 of yacc.c  */
#line 2695 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sp_chistics.suid= SP_IS_SUID;
          }
    break;

  case 191:

/* Line 1455 of yacc.c  */
#line 2699 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sp_chistics.suid= SP_IS_NOT_SUID;
          }
    break;

  case 192:

/* Line 1455 of yacc.c  */
#line 2706 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex = Lex;

            lex->sql_command= SQLCOM_CALL;
            lex->spname= (yyvsp[(2) - (2)].spname);
            lex->value_list.empty();
            sp_add_used_routine(lex, YYTHD, (yyvsp[(2) - (2)].spname), TYPE_ENUM_PROCEDURE);
          }
    break;

  case 193:

/* Line 1455 of yacc.c  */
#line 2714 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 198:

/* Line 1455 of yacc.c  */
#line 2730 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
           Lex->value_list.push_back((yyvsp[(3) - (3)].item));
          }
    break;

  case 199:

/* Line 1455 of yacc.c  */
#line 2734 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->value_list.push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 204:

/* Line 1455 of yacc.c  */
#line 2752 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->length= 0;
            lex->dec= 0;
            lex->type= 0;

            lex->default_value= 0;
            lex->on_update_value= 0;

            lex->comment= null_lex_str;
            lex->charset= NULL;

            lex->interval_list.empty();
            lex->uint_geom_type= 0;
            lex->vcol_info= 0;
          }
    break;

  case 205:

/* Line 1455 of yacc.c  */
#line 2773 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable(&(yyvsp[(1) - (3)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_PARAM, MYF(0), (yyvsp[(1) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            sp_variable_t *spvar= spc->push_variable(&(yyvsp[(1) - (3)].lex_str),
                                                     (enum enum_field_types)(yyvsp[(3) - (3)].num),
                                                     sp_param_in);

            if (lex->sphead->fill_field_definition(YYTHD, lex,
                                                   (enum enum_field_types) (yyvsp[(3) - (3)].num),
                                                   &spvar->field_def))
            {
              MYSQL_YYABORT;
            }
            spvar->field_def.field_name= spvar->name.str;
            spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;
          }
    break;

  case 210:

/* Line 1455 of yacc.c  */
#line 2810 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable(&(yyvsp[(3) - (4)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_PARAM, MYF(0), (yyvsp[(3) - (4)].lex_str).str);
              MYSQL_YYABORT;
            }
            sp_variable_t *spvar= spc->push_variable(&(yyvsp[(3) - (4)].lex_str),
                                                     (enum enum_field_types)(yyvsp[(4) - (4)].num),
                                                     (sp_param_mode_t)(yyvsp[(1) - (4)].num));

            if (lex->sphead->fill_field_definition(YYTHD, lex,
                                                   (enum enum_field_types) (yyvsp[(4) - (4)].num),
                                                   &spvar->field_def))
            {
              MYSQL_YYABORT;
            }
            spvar->field_def.field_name= spvar->name.str;
            spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;
          }
    break;

  case 211:

/* Line 1455 of yacc.c  */
#line 2835 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= sp_param_in; }
    break;

  case 212:

/* Line 1455 of yacc.c  */
#line 2836 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= sp_param_in; }
    break;

  case 213:

/* Line 1455 of yacc.c  */
#line 2837 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= sp_param_out; }
    break;

  case 214:

/* Line 1455 of yacc.c  */
#line 2838 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= sp_param_inout; }
    break;

  case 215:

/* Line 1455 of yacc.c  */
#line 2842 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 217:

/* Line 1455 of yacc.c  */
#line 2847 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 219:

/* Line 1455 of yacc.c  */
#line 2853 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
          }
    break;

  case 220:

/* Line 1455 of yacc.c  */
#line 2857 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* We check for declarations out of (standard) order this way
              because letting the grammar rules reflect it caused tricky
               shift/reduce conflicts with the wrong result. (And we get
               better error handling this way.) */
            if (((yyvsp[(2) - (3)].spblock).vars || (yyvsp[(2) - (3)].spblock).conds) && ((yyvsp[(1) - (3)].spblock).curs || (yyvsp[(1) - (3)].spblock).hndlrs))
            { /* Variable or condition following cursor or handler */
              my_message(ER_SP_VARCOND_AFTER_CURSHNDLR,
                         ER(ER_SP_VARCOND_AFTER_CURSHNDLR), MYF(0));
              MYSQL_YYABORT;
            }
            if ((yyvsp[(2) - (3)].spblock).curs && (yyvsp[(1) - (3)].spblock).hndlrs)
            { /* Cursor following handler */
              my_message(ER_SP_CURSOR_AFTER_HANDLER,
                         ER(ER_SP_CURSOR_AFTER_HANDLER), MYF(0));
              MYSQL_YYABORT;
            }
            (yyval.spblock).vars= (yyvsp[(1) - (3)].spblock).vars + (yyvsp[(2) - (3)].spblock).vars;
            (yyval.spblock).conds= (yyvsp[(1) - (3)].spblock).conds + (yyvsp[(2) - (3)].spblock).conds;
            (yyval.spblock).hndlrs= (yyvsp[(1) - (3)].spblock).hndlrs + (yyvsp[(2) - (3)].spblock).hndlrs;
            (yyval.spblock).curs= (yyvsp[(1) - (3)].spblock).curs + (yyvsp[(2) - (3)].spblock).curs;
          }
    break;

  case 221:

/* Line 1455 of yacc.c  */
#line 2883 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sphead->reset_lex(YYTHD);
            lex->spcont->declare_var_boundary((yyvsp[(2) - (2)].num));
          }
    break;

  case 222:

/* Line 1455 of yacc.c  */
#line 2891 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_pcontext *pctx= lex->spcont;
            uint num_vars= pctx->context_var_count();
            enum enum_field_types var_type= (enum enum_field_types) (yyvsp[(4) - (5)].num);
            Item *dflt_value_item= (yyvsp[(5) - (5)].item);
            
            if (!dflt_value_item)
            {
              dflt_value_item= new (thd->mem_root) Item_null();
              if (dflt_value_item == NULL)
                MYSQL_YYABORT;
              /* QQ Set to the var_type with null_value? */
            }
            
            for (uint i = num_vars-(yyvsp[(2) - (5)].num) ; i < num_vars ; i++)
            {
              uint var_idx= pctx->var_context2runtime(i);
              sp_variable_t *spvar= pctx->find_variable(var_idx);
            
              if (!spvar)
                MYSQL_YYABORT;
            
              spvar->type= var_type;
              spvar->dflt= dflt_value_item;
            
              if (lex->sphead->fill_field_definition(YYTHD, lex, var_type,
                                                     &spvar->field_def))
              {
                MYSQL_YYABORT;
              }
            
              spvar->field_def.field_name= spvar->name.str;
              spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;
            
              /* The last instruction is responsible for freeing LEX. */

              sp_instr_set *is= new sp_instr_set(lex->sphead->instructions(),
                                                 pctx,
                                                 var_idx,
                                                 dflt_value_item,
                                                 var_type,
                                                 lex,
                                                 (i == num_vars - 1));
              if (is == NULL ||
                  lex->sphead->add_instr(is))
                MYSQL_YYABORT;
            }

            pctx->declare_var_boundary(0);
            if (lex->sphead->restore_lex(YYTHD))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyvsp[(2) - (5)].num);
            (yyval.spblock).conds= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
          }
    break;

  case 223:

/* Line 1455 of yacc.c  */
#line 2948 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_cond(&(yyvsp[(2) - (5)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_COND, MYF(0), (yyvsp[(2) - (5)].lex_str).str);
              MYSQL_YYABORT;
            }
            if(YYTHD->lex->spcont->push_cond(&(yyvsp[(2) - (5)].lex_str), (yyvsp[(5) - (5)].spcondtype)))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
            (yyval.spblock).conds= 1;
          }
    break;

  case 224:

/* Line 1455 of yacc.c  */
#line 2963 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            lex->spcont= lex->spcont->push_context(LABEL_HANDLER_SCOPE);

            sp_pcontext *ctx= lex->spcont;
            sp_instr_hpush_jump *i=
              new sp_instr_hpush_jump(sp->instructions(), ctx, (yyvsp[(2) - (4)].num),
                                      ctx->current_var_count());
            if (i == NULL || sp->add_instr(i))
              MYSQL_YYABORT;

            /* For continue handlers, mark end of handler scope. */
            if ((yyvsp[(2) - (4)].num) == SP_HANDLER_CONTINUE &&
                sp->push_backpatch(i, ctx->last_label()))
              MYSQL_YYABORT;

            if (sp->push_backpatch(i, ctx->push_label(empty_c_string, 0)))
              MYSQL_YYABORT;
          }
    break;

  case 225:

/* Line 1455 of yacc.c  */
#line 2985 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_label_t *hlab= lex->spcont->pop_label(); /* After this hdlr */
            sp_instr_hreturn *i;

            if ((yyvsp[(2) - (7)].num) == SP_HANDLER_CONTINUE)
            {
              i= new sp_instr_hreturn(sp->instructions(), ctx,
                                      ctx->current_var_count());
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
            else
            {  /* EXIT or UNDO handler, just jump to the end of the block */
              i= new sp_instr_hreturn(sp->instructions(), ctx, 0);
              if (i == NULL ||
                  sp->add_instr(i) ||
                  sp->push_backpatch(i, lex->spcont->last_label())) /* Block end */
                MYSQL_YYABORT;
            }
            lex->sphead->backpatch(hlab);

            lex->spcont= ctx->pop_context();

            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).curs= 0;
            (yyval.spblock).hndlrs= (yyvsp[(6) - (7)].num);
            lex->spcont->add_handlers((yyvsp[(6) - (7)].num));
          }
    break;

  case 226:

/* Line 1455 of yacc.c  */
#line 3017 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            uint offp;
            sp_instr_cpush *i;

            if (ctx->find_cursor(&(yyvsp[(2) - (5)].lex_str), &offp, TRUE))
            {
              my_error(ER_SP_DUP_CURS, MYF(0), (yyvsp[(2) - (5)].lex_str).str);
              delete (yyvsp[(5) - (5)].lex);
              MYSQL_YYABORT;
            }
            i= new sp_instr_cpush(sp->instructions(), ctx, (yyvsp[(5) - (5)].lex),
                                  ctx->current_cursor_count());
            if (i == NULL ||
                sp->add_instr(i) ||
                ctx->push_cursor(&(yyvsp[(2) - (5)].lex_str)))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).hndlrs= 0;
            (yyval.spblock).curs= 1;
          }
    break;

  case 227:

/* Line 1455 of yacc.c  */
#line 3042 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sphead->reset_lex(YYTHD);
          }
    break;

  case 228:

/* Line 1455 of yacc.c  */
#line 3046 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            DBUG_ASSERT(lex->sql_command == SQLCOM_SELECT);

            if (lex->result)
            {
              my_message(ER_SP_BAD_CURSOR_SELECT, ER(ER_SP_BAD_CURSOR_SELECT),
                         MYF(0));
              MYSQL_YYABORT;
            }
            lex->sp_lex_in_use= TRUE;
            (yyval.lex)= lex;
            if (lex->sphead->restore_lex(YYTHD))
              MYSQL_YYABORT;
          }
    break;

  case 229:

/* Line 1455 of yacc.c  */
#line 3065 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= SP_HANDLER_EXIT; }
    break;

  case 230:

/* Line 1455 of yacc.c  */
#line 3066 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= SP_HANDLER_CONTINUE; }
    break;

  case 231:

/* Line 1455 of yacc.c  */
#line 3072 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 232:

/* Line 1455 of yacc.c  */
#line 3074 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)+= 1; }
    break;

  case 233:

/* Line 1455 of yacc.c  */
#line 3079 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont->parent_context();

            if (ctx->find_handler((yyvsp[(1) - (1)].spcondtype)))
            {
              my_message(ER_SP_DUP_HANDLER, ER(ER_SP_DUP_HANDLER), MYF(0));
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_hpush_jump *i=
                (sp_instr_hpush_jump *)sp->last_instruction();

              i->add_condition((yyvsp[(1) - (1)].spcondtype));
              ctx->push_handler((yyvsp[(1) - (1)].spcondtype));
            }
          }
    break;

  case 234:

/* Line 1455 of yacc.c  */
#line 3102 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* mysql errno */
            if ((yyvsp[(1) - (1)].ulong_num) == 0)
            {
              my_error(ER_WRONG_VALUE, MYF(0), "CONDITION", "0");
              MYSQL_YYABORT;
            }
            (yyval.spcondtype)= (sp_cond_type_t *)YYTHD->alloc(sizeof(sp_cond_type_t));
            if ((yyval.spcondtype) == NULL)
              MYSQL_YYABORT;
            (yyval.spcondtype)->type= sp_cond_type_t::number;
            (yyval.spcondtype)->mysqlerr= (yyvsp[(1) - (1)].ulong_num);
          }
    break;

  case 236:

/* Line 1455 of yacc.c  */
#line 3119 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* SQLSTATE */
            if (!sp_cond_check(&(yyvsp[(3) - (3)].lex_str)))
            {
              my_error(ER_SP_BAD_SQLSTATE, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.spcondtype)= (sp_cond_type_t *)YYTHD->alloc(sizeof(sp_cond_type_t));
            if ((yyval.spcondtype) == NULL)
              MYSQL_YYABORT;
            (yyval.spcondtype)->type= sp_cond_type_t::state;
            memcpy((yyval.spcondtype)->sqlstate, (yyvsp[(3) - (3)].lex_str).str, SQLSTATE_LENGTH);
            (yyval.spcondtype)->sqlstate[SQLSTATE_LENGTH]= '\0';
          }
    break;

  case 237:

/* Line 1455 of yacc.c  */
#line 3135 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 238:

/* Line 1455 of yacc.c  */
#line 3136 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 239:

/* Line 1455 of yacc.c  */
#line 3141 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.spcondtype)= (yyvsp[(1) - (1)].spcondtype);
          }
    break;

  case 240:

/* Line 1455 of yacc.c  */
#line 3145 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.spcondtype)= Lex->spcont->find_cond(&(yyvsp[(1) - (1)].lex_str));
            if ((yyval.spcondtype) == NULL)
            {
              my_error(ER_SP_COND_MISMATCH, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 241:

/* Line 1455 of yacc.c  */
#line 3154 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.spcondtype)= (sp_cond_type_t *)YYTHD->alloc(sizeof(sp_cond_type_t));
            if ((yyval.spcondtype) == NULL)
              MYSQL_YYABORT;
            (yyval.spcondtype)->type= sp_cond_type_t::warning;
          }
    break;

  case 242:

/* Line 1455 of yacc.c  */
#line 3161 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.spcondtype)= (sp_cond_type_t *)YYTHD->alloc(sizeof(sp_cond_type_t));
            if ((yyval.spcondtype) == NULL)
              MYSQL_YYABORT;
            (yyval.spcondtype)->type= sp_cond_type_t::notfound;
          }
    break;

  case 243:

/* Line 1455 of yacc.c  */
#line 3168 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.spcondtype)= (sp_cond_type_t *)YYTHD->alloc(sizeof(sp_cond_type_t));
            if ((yyval.spcondtype) == NULL)
              MYSQL_YYABORT;
            (yyval.spcondtype)->type= sp_cond_type_t::exception;
          }
    break;

  case 244:

/* Line 1455 of yacc.c  */
#line 3178 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Yacc_state *state= & thd->m_parser_state->m_yacc;

            lex->sql_command= SQLCOM_SIGNAL;
            lex->m_stmt= new (thd->mem_root) Signal_statement(lex, (yyvsp[(2) - (3)].spcondtype),
                                                      state->m_set_signal_info);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 245:

/* Line 1455 of yacc.c  */
#line 3193 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_cond_type_t *cond;
            if (lex->spcont == NULL)
            {
              /* SIGNAL foo cannot be used outside of stored programs */
              my_error(ER_SP_COND_MISMATCH, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            cond= lex->spcont->find_cond(&(yyvsp[(1) - (1)].lex_str));
            if (cond == NULL)
            {
              my_error(ER_SP_COND_MISMATCH, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (cond->type != sp_cond_type_t::state)
            {
              my_error(ER_SIGNAL_BAD_CONDITION_TYPE, MYF(0));
              MYSQL_YYABORT;
            }
            (yyval.spcondtype)= cond;
          }
    break;

  case 246:

/* Line 1455 of yacc.c  */
#line 3216 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.spcondtype)= (yyvsp[(1) - (1)].spcondtype); }
    break;

  case 247:

/* Line 1455 of yacc.c  */
#line 3221 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.spcondtype)= NULL; }
    break;

  case 248:

/* Line 1455 of yacc.c  */
#line 3223 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.spcondtype)= (yyvsp[(1) - (1)].spcondtype); }
    break;

  case 249:

/* Line 1455 of yacc.c  */
#line 3228 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            YYTHD->m_parser_state->m_yacc.m_set_signal_info.clear();
          }
    break;

  case 251:

/* Line 1455 of yacc.c  */
#line 3236 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Set_signal_information *info;
            info= & YYTHD->m_parser_state->m_yacc.m_set_signal_info;
            int index= (int) (yyvsp[(1) - (3)].diag_condition_item_name);
            info->clear();
            info->m_item[index]= (yyvsp[(3) - (3)].item);
          }
    break;

  case 252:

/* Line 1455 of yacc.c  */
#line 3245 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Set_signal_information *info;
            info= & YYTHD->m_parser_state->m_yacc.m_set_signal_info;
            int index= (int) (yyvsp[(3) - (5)].diag_condition_item_name);
            if (info->m_item[index] != NULL)
            {
              my_error(ER_DUP_SIGNAL_SET, MYF(0),
                       Diag_condition_item_names[index].str);
              MYSQL_YYABORT;
            }
            info->m_item[index]= (yyvsp[(5) - (5)].item);
          }
    break;

  case 253:

/* Line 1455 of yacc.c  */
#line 3264 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 254:

/* Line 1455 of yacc.c  */
#line 3266 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if ((yyvsp[(1) - (1)].item)->type() == Item::FUNC_ITEM)
            {
              Item_func *item= (Item_func*) (yyvsp[(1) - (1)].item);
              if (item->functype() == Item_func::SUSERVAR_FUNC)
              {
                /*
                  Don't allow the following syntax:
                    SIGNAL/RESIGNAL ...
                    SET <signal condition item name> = @foo := expr
                */
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
            }
            (yyval.item)= (yyvsp[(1) - (1)].item);
          }
    break;

  case 255:

/* Line 1455 of yacc.c  */
#line 3284 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 256:

/* Line 1455 of yacc.c  */
#line 3290 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CLASS_ORIGIN; }
    break;

  case 257:

/* Line 1455 of yacc.c  */
#line 3292 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_SUBCLASS_ORIGIN; }
    break;

  case 258:

/* Line 1455 of yacc.c  */
#line 3294 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CONSTRAINT_CATALOG; }
    break;

  case 259:

/* Line 1455 of yacc.c  */
#line 3296 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CONSTRAINT_SCHEMA; }
    break;

  case 260:

/* Line 1455 of yacc.c  */
#line 3298 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CONSTRAINT_NAME; }
    break;

  case 261:

/* Line 1455 of yacc.c  */
#line 3300 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CATALOG_NAME; }
    break;

  case 262:

/* Line 1455 of yacc.c  */
#line 3302 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_SCHEMA_NAME; }
    break;

  case 263:

/* Line 1455 of yacc.c  */
#line 3304 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_TABLE_NAME; }
    break;

  case 264:

/* Line 1455 of yacc.c  */
#line 3306 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_COLUMN_NAME; }
    break;

  case 265:

/* Line 1455 of yacc.c  */
#line 3308 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CURSOR_NAME; }
    break;

  case 266:

/* Line 1455 of yacc.c  */
#line 3310 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_MESSAGE_TEXT; }
    break;

  case 267:

/* Line 1455 of yacc.c  */
#line 3312 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_MYSQL_ERRNO; }
    break;

  case 268:

/* Line 1455 of yacc.c  */
#line 3317 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Yacc_state *state= & thd->m_parser_state->m_yacc;

            lex->sql_command= SQLCOM_RESIGNAL;
            lex->m_stmt= new (thd->mem_root) Resignal_statement(lex, (yyvsp[(2) - (3)].spcondtype),
                                                      state->m_set_signal_info);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 269:

/* Line 1455 of yacc.c  */
#line 3332 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* NOTE: field definition is filled in sp_decl section. */

            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable(&(yyvsp[(1) - (1)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            spc->push_variable(&(yyvsp[(1) - (1)].lex_str), (enum_field_types)0, sp_param_in);
            (yyval.num)= 1;
          }
    break;

  case 270:

/* Line 1455 of yacc.c  */
#line 3347 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* NOTE: field definition is filled in sp_decl section. */

            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable(&(yyvsp[(3) - (3)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_VAR, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            spc->push_variable(&(yyvsp[(3) - (3)].lex_str), (enum_field_types)0, sp_param_in);
            (yyval.num)= (yyvsp[(1) - (3)].num) + 1;
          }
    break;

  case 271:

/* Line 1455 of yacc.c  */
#line 3364 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item) = NULL; }
    break;

  case 272:

/* Line 1455 of yacc.c  */
#line 3365 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item); }
    break;

  case 286:

/* Line 1455 of yacc.c  */
#line 3386 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sphead->new_cont_backpatch(NULL); }
    break;

  case 287:

/* Line 1455 of yacc.c  */
#line 3388 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sphead->do_cont_backpatch(); }
    break;

  case 288:

/* Line 1455 of yacc.c  */
#line 3392 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            lex->sphead->reset_lex(thd);
            lex->sphead->m_tmp_query= lip->get_tok_start();
          }
    break;

  case 289:

/* Line 1455 of yacc.c  */
#line 3401 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_head *sp= lex->sphead;

            sp->m_flags|= sp_get_flags_for_command(lex);
            if (lex->sql_command == SQLCOM_CHANGE_DB)
            { /* "USE db" doesn't work in a procedure */
              my_error(ER_SP_BADSTATEMENT, MYF(0), "USE");
              MYSQL_YYABORT;
            }
            /*
              Don't add an instruction for SET statements, since all
              instructions for them were already added during processing
              of "set" rule.
            */
            DBUG_ASSERT(lex->sql_command != SQLCOM_SET_OPTION ||
                        lex->var_list.is_empty());
            if (lex->sql_command != SQLCOM_SET_OPTION)
            {
              sp_instr_stmt *i=new sp_instr_stmt(sp->instructions(),
                                                 lex->spcont, lex);
              if (i == NULL)
                MYSQL_YYABORT;

              /*
                Extract the query statement from the tokenizer.  The
                end is either lex->ptr, if there was no lookahead,
                lex->tok_end otherwise.
              */
              if (yychar == YYEMPTY)
                i->m_query.length= lip->get_ptr() - sp->m_tmp_query;
              else
                i->m_query.length= lip->get_tok_end() - sp->m_tmp_query;
              if (!(i->m_query.str= strmake_root(thd->mem_root,
                                                 sp->m_tmp_query,
                                                 i->m_query.length)) ||
                    sp->add_instr(i))
                MYSQL_YYABORT;
            }
            if (sp->restore_lex(thd))
              MYSQL_YYABORT;
          }
    break;

  case 290:

/* Line 1455 of yacc.c  */
#line 3449 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sphead->reset_lex(YYTHD); }
    break;

  case 291:

/* Line 1455 of yacc.c  */
#line 3451 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            if (sp->m_type != TYPE_ENUM_FUNCTION)
            {
              my_message(ER_SP_BADRETURN, ER(ER_SP_BADRETURN), MYF(0));
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_freturn *i;

              i= new sp_instr_freturn(sp->instructions(), lex->spcont, (yyvsp[(3) - (3)].item),
                                      sp->m_return_field_def.sql_type, lex);
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
              sp->m_flags|= sp_head::HAS_RETURN;
            }
            if (sp->restore_lex(YYTHD))
              MYSQL_YYABORT;
          }
    break;

  case 292:

/* Line 1455 of yacc.c  */
#line 3477 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* Unlabeled controls get a secret label. */
            LEX *lex= Lex;

            lex->spcont->push_label((char *)"", lex->sphead->instructions());
          }
    break;

  case 293:

/* Line 1455 of yacc.c  */
#line 3483 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sphead->backpatch(lex->spcont->pop_label());
          }
    break;

  case 294:

/* Line 1455 of yacc.c  */
#line 3492 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp = lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_label_t *lab= ctx->find_label((yyvsp[(2) - (2)].lex_str).str);

            if (! lab)
            {
              my_error(ER_SP_LILABEL_MISMATCH, MYF(0), "LEAVE", (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_jump *i;
              uint ip= sp->instructions();
              uint n;
              /*
                When jumping to a BEGIN-END block end, the target jump
                points to the block hpop/cpop cleanup instructions,
                so we should exclude the block context here.
                When jumping to something else (i.e., SP_LAB_ITER),
                there are no hpop/cpop at the jump destination,
                so we should include the block context here for cleanup.
              */
              bool exclusive= (lab->type == SP_LAB_BEGIN);

              n= ctx->diff_handlers(lab->ctx, exclusive);
              if (n)
              {
                sp_instr_hpop *hpop= new sp_instr_hpop(ip++, ctx, n);
                if (hpop == NULL)
                  MYSQL_YYABORT;
                sp->add_instr(hpop);
              }
              n= ctx->diff_cursors(lab->ctx, exclusive);
              if (n)
              {
                sp_instr_cpop *cpop= new sp_instr_cpop(ip++, ctx, n);
                if (cpop == NULL)
                  MYSQL_YYABORT;
                sp->add_instr(cpop);
              }
              i= new sp_instr_jump(ip, ctx);
              if (i == NULL)
                MYSQL_YYABORT;
              sp->push_backpatch(i, lab);  /* Jumping forward */
              sp->add_instr(i);
            }
          }
    break;

  case 295:

/* Line 1455 of yacc.c  */
#line 3545 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_label_t *lab= ctx->find_label((yyvsp[(2) - (2)].lex_str).str);

            if (! lab || lab->type != SP_LAB_ITER)
            {
              my_error(ER_SP_LILABEL_MISMATCH, MYF(0), "ITERATE", (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_jump *i;
              uint ip= sp->instructions();
              uint n;

              n= ctx->diff_handlers(lab->ctx, FALSE);  /* Inclusive the dest. */
              if (n)
              {
                sp_instr_hpop *hpop= new sp_instr_hpop(ip++, ctx, n);
                if (hpop == NULL ||
                    sp->add_instr(hpop))
                  MYSQL_YYABORT;
              }
              n= ctx->diff_cursors(lab->ctx, FALSE);  /* Inclusive the dest. */
              if (n)
              {
                sp_instr_cpop *cpop= new sp_instr_cpop(ip++, ctx, n);
                if (cpop == NULL ||
                    sp->add_instr(cpop))
                  MYSQL_YYABORT;
              }
              i= new sp_instr_jump(ip, ctx, lab->ip); /* Jump back */
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
          }
    break;

  case 296:

/* Line 1455 of yacc.c  */
#line 3588 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint offset;
            sp_instr_copen *i;

            if (! lex->spcont->find_cursor(&(yyvsp[(2) - (2)].lex_str), &offset))
            {
              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            i= new sp_instr_copen(sp->instructions(), lex->spcont, offset);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 297:

/* Line 1455 of yacc.c  */
#line 3608 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint offset;
            sp_instr_cfetch *i;

            if (! lex->spcont->find_cursor(&(yyvsp[(3) - (4)].lex_str), &offset))
            {
              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(3) - (4)].lex_str).str);
              MYSQL_YYABORT;
            }
            i= new sp_instr_cfetch(sp->instructions(), lex->spcont, offset);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 298:

/* Line 1455 of yacc.c  */
#line 3625 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 299:

/* Line 1455 of yacc.c  */
#line 3630 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint offset;
            sp_instr_cclose *i;

            if (! lex->spcont->find_cursor(&(yyvsp[(2) - (2)].lex_str), &offset))
            {
              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            i= new sp_instr_cclose(sp->instructions(), lex->spcont,  offset);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 303:

/* Line 1455 of yacc.c  */
#line 3656 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *spc= lex->spcont;
            sp_variable_t *spv;

            if (!spc || !(spv = spc->find_variable(&(yyvsp[(1) - (1)].lex_str))))
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              /* An SP local variable */
              sp_instr_cfetch *i= (sp_instr_cfetch *)sp->last_instruction();

              i->add_to_varlist(spv);
            }
          }
    break;

  case 304:

/* Line 1455 of yacc.c  */
#line 3676 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *spc= lex->spcont;
            sp_variable_t *spv;

            if (!spc || !(spv = spc->find_variable(&(yyvsp[(3) - (3)].lex_str))))
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              /* An SP local variable */
              sp_instr_cfetch *i= (sp_instr_cfetch *)sp->last_instruction();

              i->add_to_varlist(spv);
            }
          }
    break;

  case 305:

/* Line 1455 of yacc.c  */
#line 3698 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sphead->reset_lex(YYTHD); }
    break;

  case 306:

/* Line 1455 of yacc.c  */
#line 3700 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            uint ip= sp->instructions();
            sp_instr_jump_if_not *i = new sp_instr_jump_if_not(ip, ctx,
                                                               (yyvsp[(2) - (3)].item), lex);
            if (i == NULL ||
                sp->push_backpatch(i, ctx->push_label((char *)"", 0)) ||
                sp->add_cont_backpatch(i) ||
                sp->add_instr(i))
              MYSQL_YYABORT;
            if (sp->restore_lex(YYTHD))
              MYSQL_YYABORT;
          }
    break;

  case 307:

/* Line 1455 of yacc.c  */
#line 3716 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            sp_head *sp= Lex->sphead;
            sp_pcontext *ctx= Lex->spcont;
            uint ip= sp->instructions();
            sp_instr_jump *i = new sp_instr_jump(ip, ctx);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
            sp->backpatch(ctx->pop_label());
            sp->push_backpatch(i, ctx->push_label((char *)"", 0));
          }
    break;

  case 308:

/* Line 1455 of yacc.c  */
#line 3728 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sphead->backpatch(lex->spcont->pop_label());
          }
    break;

  case 314:

/* Line 1455 of yacc.c  */
#line 3748 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            case_stmt_action_case(lex);
            lex->sphead->reset_lex(YYTHD); /* For expr $3 */
          }
    break;

  case 315:

/* Line 1455 of yacc.c  */
#line 3754 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (case_stmt_action_expr(lex, (yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;

            /* For expr $3 */
            if (lex->sphead->restore_lex(YYTHD))
              MYSQL_YYABORT;
          }
    break;

  case 316:

/* Line 1455 of yacc.c  */
#line 3767 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            case_stmt_action_end_case(lex, true);
          }
    break;

  case 317:

/* Line 1455 of yacc.c  */
#line 3775 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            case_stmt_action_case(lex);
          }
    break;

  case 318:

/* Line 1455 of yacc.c  */
#line 3783 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            case_stmt_action_end_case(lex, false);
          }
    break;

  case 323:

/* Line 1455 of yacc.c  */
#line 3801 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sphead->reset_lex(YYTHD); /* For expr $3 */
          }
    break;

  case 324:

/* Line 1455 of yacc.c  */
#line 3805 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* Simple case: <caseval> = <whenval> */

            LEX *lex= Lex;
            if (case_stmt_action_when(lex, (yyvsp[(3) - (3)].item), true))
              MYSQL_YYABORT;
            /* For expr $3 */
            if (lex->sphead->restore_lex(YYTHD))
              MYSQL_YYABORT;
          }
    break;

  case 325:

/* Line 1455 of yacc.c  */
#line 3817 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (case_stmt_action_then(lex))
              MYSQL_YYABORT;
          }
    break;

  case 326:

/* Line 1455 of yacc.c  */
#line 3826 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sphead->reset_lex(YYTHD); /* For expr $3 */
          }
    break;

  case 327:

/* Line 1455 of yacc.c  */
#line 3830 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (case_stmt_action_when(lex, (yyvsp[(3) - (3)].item), false))
              MYSQL_YYABORT;
            /* For expr $3 */
            if (lex->sphead->restore_lex(YYTHD))
              MYSQL_YYABORT;
          }
    break;

  case 328:

/* Line 1455 of yacc.c  */
#line 3840 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (case_stmt_action_then(lex))
              MYSQL_YYABORT;
          }
    break;

  case 329:

/* Line 1455 of yacc.c  */
#line 3849 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint ip= sp->instructions();
            sp_instr_error *i= new sp_instr_error(ip, lex->spcont,
                                                  ER_SP_CASE_NOT_FOUND);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 331:

/* Line 1455 of yacc.c  */
#line 3864 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *ctx= lex->spcont;
            sp_label_t *lab= ctx->find_label((yyvsp[(1) - (2)].lex_str).str);

            if (lab)
            {
              my_error(ER_SP_LABEL_REDEFINE, MYF(0), (yyvsp[(1) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              lab= lex->spcont->push_label((yyvsp[(1) - (2)].lex_str).str,
                                           lex->sphead->instructions());
              lab->type= SP_LAB_ITER;
            }
          }
    break;

  case 332:

/* Line 1455 of yacc.c  */
#line 3882 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_label_t *lab= lex->spcont->pop_label();

            if ((yyvsp[(5) - (5)].lex_str).str)
            {
              if (my_strcasecmp(system_charset_info, (yyvsp[(5) - (5)].lex_str).str, lab->name) != 0)
              {
                my_error(ER_SP_LABEL_MISMATCH, MYF(0), (yyvsp[(5) - (5)].lex_str).str);
                MYSQL_YYABORT;
              }
            }
            lex->sphead->backpatch(lab);
          }
    break;

  case 333:

/* Line 1455 of yacc.c  */
#line 3899 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 334:

/* Line 1455 of yacc.c  */
#line 3900 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 335:

/* Line 1455 of yacc.c  */
#line 3905 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *ctx= lex->spcont;
            sp_label_t *lab= ctx->find_label((yyvsp[(1) - (2)].lex_str).str);

            if (lab)
            {
              my_error(ER_SP_LABEL_REDEFINE, MYF(0), (yyvsp[(1) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }

            lab= lex->spcont->push_label((yyvsp[(1) - (2)].lex_str).str,
                                         lex->sphead->instructions());
            lab->type= SP_LAB_BEGIN;
          }
    break;

  case 336:

/* Line 1455 of yacc.c  */
#line 3921 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_label_t *lab= lex->spcont->pop_label();

            if ((yyvsp[(5) - (5)].lex_str).str)
            {
              if (my_strcasecmp(system_charset_info, (yyvsp[(5) - (5)].lex_str).str, lab->name) != 0)
              {
                my_error(ER_SP_LABEL_MISMATCH, MYF(0), (yyvsp[(5) - (5)].lex_str).str);
                MYSQL_YYABORT;
              }
            }
          }
    break;

  case 337:

/* Line 1455 of yacc.c  */
#line 3937 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* Unlabeled blocks get a secret label. */
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label_t *lab= lex->spcont->push_label((char *)"", ip);
            lab->type= SP_LAB_BEGIN;
          }
    break;

  case 338:

/* Line 1455 of yacc.c  */
#line 3944 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->spcont->pop_label();
          }
    break;

  case 339:

/* Line 1455 of yacc.c  */
#line 3952 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* QQ This is just a dummy for grouping declarations and statements
              together. No [[NOT] ATOMIC] yet, and we need to figure out how
              make it coexist with the existing BEGIN COMMIT/ROLLBACK. */
            LEX *lex= Lex;
            lex->spcont= lex->spcont->push_context(LABEL_DEFAULT_SCOPE);
          }
    break;

  case 340:

/* Line 1455 of yacc.c  */
#line 3961 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_instr *i;

            sp->backpatch(ctx->last_label()); /* We always have a label */
            if ((yyvsp[(3) - (5)].spblock).hndlrs)
            {
              i= new sp_instr_hpop(sp->instructions(), ctx, (yyvsp[(3) - (5)].spblock).hndlrs);
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
            if ((yyvsp[(3) - (5)].spblock).curs)
            {
              i= new sp_instr_cpop(sp->instructions(), ctx, (yyvsp[(3) - (5)].spblock).curs);
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
            lex->spcont= ctx->pop_context();
          }
    break;

  case 341:

/* Line 1455 of yacc.c  */
#line 3989 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label_t *lab= lex->spcont->last_label();  /* Jumping back */
            sp_instr_jump *i = new sp_instr_jump(ip, lex->spcont, lab->ip);
            if (i == NULL ||
                lex->sphead->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 342:

/* Line 1455 of yacc.c  */
#line 3999 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sphead->reset_lex(YYTHD); }
    break;

  case 343:

/* Line 1455 of yacc.c  */
#line 4001 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint ip= sp->instructions();
            sp_instr_jump_if_not *i = new sp_instr_jump_if_not(ip, lex->spcont,
                                                               (yyvsp[(3) - (4)].item), lex);
            if (i == NULL ||
                /* Jumping forward */
                sp->push_backpatch(i, lex->spcont->last_label()) ||
                sp->new_cont_backpatch(i) ||
                sp->add_instr(i))
              MYSQL_YYABORT;
            if (sp->restore_lex(YYTHD))
              MYSQL_YYABORT;
          }
    break;

  case 344:

/* Line 1455 of yacc.c  */
#line 4017 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label_t *lab= lex->spcont->last_label();  /* Jumping back */
            sp_instr_jump *i = new sp_instr_jump(ip, lex->spcont, lab->ip);
            if (i == NULL ||
                lex->sphead->add_instr(i))
              MYSQL_YYABORT;
            lex->sphead->do_cont_backpatch();
          }
    break;

  case 345:

/* Line 1455 of yacc.c  */
#line 4028 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sphead->reset_lex(YYTHD); }
    break;

  case 346:

/* Line 1455 of yacc.c  */
#line 4030 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label_t *lab= lex->spcont->last_label();  /* Jumping back */
            sp_instr_jump_if_not *i = new sp_instr_jump_if_not(ip, lex->spcont,
                                                               (yyvsp[(5) - (7)].item), lab->ip,
                                                               lex);
            if (i == NULL ||
                lex->sphead->add_instr(i))
              MYSQL_YYABORT;
            if (lex->sphead->restore_lex(YYTHD))
              MYSQL_YYABORT;
            /* We can shortcut the cont_backpatch here */
            i->m_cont_dest= ip+1;
          }
    break;

  case 347:

/* Line 1455 of yacc.c  */
#line 4049 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->trg_chistics.action_time= TRG_ACTION_BEFORE; }
    break;

  case 348:

/* Line 1455 of yacc.c  */
#line 4051 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->trg_chistics.action_time= TRG_ACTION_AFTER; }
    break;

  case 349:

/* Line 1455 of yacc.c  */
#line 4056 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->trg_chistics.event= TRG_EVENT_INSERT; }
    break;

  case 350:

/* Line 1455 of yacc.c  */
#line 4058 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->trg_chistics.event= TRG_EVENT_UPDATE; }
    break;

  case 351:

/* Line 1455 of yacc.c  */
#line 4060 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->trg_chistics.event= TRG_EVENT_DELETE; }
    break;

  case 355:

/* Line 1455 of yacc.c  */
#line 4094 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 356:

/* Line 1455 of yacc.c  */
#line 4096 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->logfile_group_name= (yyvsp[(4) - (4)].lex_str).str;
          }
    break;

  case 357:

/* Line 1455 of yacc.c  */
#line 4106 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            Lex->alter_tablespace_info->ts_alter_tablespace_type= ALTER_TABLESPACE_ADD_FILE; 
          }
    break;

  case 358:

/* Line 1455 of yacc.c  */
#line 4112 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            Lex->alter_tablespace_info->ts_alter_tablespace_type= ALTER_TABLESPACE_DROP_FILE; 
          }
    break;

  case 363:

/* Line 1455 of yacc.c  */
#line 4135 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 410:

/* Line 1455 of yacc.c  */
#line 4229 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->data_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 411:

/* Line 1455 of yacc.c  */
#line 4237 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->undo_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 412:

/* Line 1455 of yacc.c  */
#line 4245 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->redo_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 413:

/* Line 1455 of yacc.c  */
#line 4253 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info= new st_alter_tablespace();
            if (lex->alter_tablespace_info == NULL)
              MYSQL_YYABORT;
            lex->alter_tablespace_info->tablespace_name= (yyvsp[(1) - (1)].lex_str).str;
            lex->sql_command= SQLCOM_ALTER_TABLESPACE;
          }
    break;

  case 414:

/* Line 1455 of yacc.c  */
#line 4265 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info= new st_alter_tablespace();
            if (lex->alter_tablespace_info == NULL)
              MYSQL_YYABORT;
            lex->alter_tablespace_info->logfile_group_name= (yyvsp[(1) - (1)].lex_str).str;
            lex->sql_command= SQLCOM_ALTER_TABLESPACE;
          }
    break;

  case 415:

/* Line 1455 of yacc.c  */
#line 4277 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_READ_ONLY;
          }
    break;

  case 416:

/* Line 1455 of yacc.c  */
#line 4282 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_READ_WRITE;
          }
    break;

  case 417:

/* Line 1455 of yacc.c  */
#line 4287 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_NOT_ACCESSIBLE;
          }
    break;

  case 418:

/* Line 1455 of yacc.c  */
#line 4295 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->initial_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 419:

/* Line 1455 of yacc.c  */
#line 4303 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->autoextend_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 420:

/* Line 1455 of yacc.c  */
#line 4311 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->max_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 421:

/* Line 1455 of yacc.c  */
#line 4319 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->extent_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 422:

/* Line 1455 of yacc.c  */
#line 4327 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->undo_buffer_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 423:

/* Line 1455 of yacc.c  */
#line 4335 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->redo_buffer_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 424:

/* Line 1455 of yacc.c  */
#line 4343 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->nodegroup_id != UNDEF_NODEGROUP)
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"NODEGROUP");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->nodegroup_id= (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 425:

/* Line 1455 of yacc.c  */
#line 4356 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->ts_comment != NULL)
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"COMMENT");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->ts_comment= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 426:

/* Line 1455 of yacc.c  */
#line 4369 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->storage_engine != NULL)
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),
                       "STORAGE ENGINE");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->storage_engine= (yyvsp[(4) - (4)].db_type);
          }
    break;

  case 429:

/* Line 1455 of yacc.c  */
#line 4388 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->wait_until_completed= TRUE;
          }
    break;

  case 430:

/* Line 1455 of yacc.c  */
#line 4393 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!(lex->alter_tablespace_info->wait_until_completed))
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"NO_WAIT");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->wait_until_completed= FALSE;
          }
    break;

  case 431:

/* Line 1455 of yacc.c  */
#line 4405 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ulonglong_number)= (yyvsp[(1) - (1)].ulong_num);}
    break;

  case 432:

/* Line 1455 of yacc.c  */
#line 4407 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            ulonglong number;
            uint text_shift_number= 0;
            longlong prefix_number;
            char *start_ptr= (yyvsp[(1) - (1)].lex_str).str;
            uint str_len= (yyvsp[(1) - (1)].lex_str).length;
            char *end_ptr= start_ptr + str_len;
            int error;
            prefix_number= my_strtoll10(start_ptr, &end_ptr, &error);
            if ((start_ptr + str_len - 1) == end_ptr)
            {
              switch (end_ptr[0])
              {
                case 'g':
                case 'G':
                  text_shift_number+=10;
                case 'm':
                case 'M':
                  text_shift_number+=10;
                case 'k':
                case 'K':
                  text_shift_number+=10;
                  break;
                default:
                {
                  my_error(ER_WRONG_SIZE_NUMBER, MYF(0));
                  MYSQL_YYABORT;
                }
              }
              if (prefix_number >> 31)
              {
                my_error(ER_SIZE_OVERFLOW_ERROR, MYF(0));
                MYSQL_YYABORT;
              }
              number= prefix_number << text_shift_number;
            }
            else
            {
              my_error(ER_WRONG_SIZE_NUMBER, MYF(0));
              MYSQL_YYABORT;
            }
            (yyval.ulonglong_number)= number;
          }
    break;

  case 433:

/* Line 1455 of yacc.c  */
#line 4458 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_info.option_list= NULL; }
    break;

  case 434:

/* Line 1455 of yacc.c  */
#line 4459 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 435:

/* Line 1455 of yacc.c  */
#line 4460 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 436:

/* Line 1455 of yacc.c  */
#line 4466 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 437:

/* Line 1455 of yacc.c  */
#line 4466 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 438:

/* Line 1455 of yacc.c  */
#line 4468 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {

            Lex->create_info.options|= HA_LEX_CREATE_TABLE_LIKE;
            TABLE_LIST *src_table= Lex->select_lex.add_table_to_list(YYTHD,
                                        (yyvsp[(1) - (1)].table), NULL, 0, TL_READ, MDL_SHARED_READ);
            if (! src_table)
              MYSQL_YYABORT;
            /* CREATE TABLE ... LIKE is not allowed for views. */
            src_table->required_type= FRMTYPE_TABLE;
          }
    break;

  case 439:

/* Line 1455 of yacc.c  */
#line 4481 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.table)= (yyvsp[(2) - (2)].table); }
    break;

  case 440:

/* Line 1455 of yacc.c  */
#line 4482 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.table)= (yyvsp[(3) - (4)].table); }
    break;

  case 441:

/* Line 1455 of yacc.c  */
#line 4486 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 442:

/* Line 1455 of yacc.c  */
#line 4488 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->set_braces(0);}
    break;

  case 443:

/* Line 1455 of yacc.c  */
#line 4489 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 444:

/* Line 1455 of yacc.c  */
#line 4491 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 445:

/* Line 1455 of yacc.c  */
#line 4492 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 446:

/* Line 1455 of yacc.c  */
#line 4497 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              Remove all tables used in PARTITION clause from the global table
              list. Partitioning with subqueries is not allowed anyway.
            */
            TABLE_LIST *last_non_sel_table= Lex->create_last_non_select_table;
            last_non_sel_table->next_global= 0;
            Lex->query_tables_last= &last_non_sel_table->next_global;
          }
    break;

  case 447:

/* Line 1455 of yacc.c  */
#line 4533 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 449:

/* Line 1455 of yacc.c  */
#line 4539 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info= new partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            if (lex->sql_command == SQLCOM_ALTER_TABLE)
            {
              lex->alter_info.flags|= ALTER_PARTITION;
            }
          }
    break;

  case 451:

/* Line 1455 of yacc.c  */
#line 4557 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
#ifdef WITH_PARTITION_STORAGE_ENGINE
            LEX_STRING partition_name={C_STRING_WITH_LEN("partition")};
            if (!plugin_is_ready(&partition_name, MYSQL_STORAGE_ENGINE_PLUGIN))
            {
              my_error(ER_OPTION_PREVENTS_STATEMENT, MYF(0),
                      "--skip-partition");
              MYSQL_YYABORT;
            }
#else
            my_error(ER_FEATURE_DISABLED, MYF(0), "partitioning",
                    "--with-plugin-partition");
            MYSQL_YYABORT;
#endif
          }
    break;

  case 452:

/* Line 1455 of yacc.c  */
#line 4576 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!lex->part_info)
            {
              my_parse_error(ER(ER_PARTITION_ENTRY_ERROR));
              MYSQL_YYABORT;
            }
            /*
              We enter here when opening the frm file to translate
              partition info string into part_info data structure.
            */
          }
    break;

  case 453:

/* Line 1455 of yacc.c  */
#line 4588 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 455:

/* Line 1455 of yacc.c  */
#line 4597 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->list_of_part_fields= TRUE;
            part_info->column_list= FALSE;
            part_info->part_type= HASH_PARTITION;
          }
    break;

  case 456:

/* Line 1455 of yacc.c  */
#line 4604 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->part_type= HASH_PARTITION; }
    break;

  case 457:

/* Line 1455 of yacc.c  */
#line 4605 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 458:

/* Line 1455 of yacc.c  */
#line 4607 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->part_type= RANGE_PARTITION; }
    break;

  case 459:

/* Line 1455 of yacc.c  */
#line 4609 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->part_type= RANGE_PARTITION; }
    break;

  case 460:

/* Line 1455 of yacc.c  */
#line 4611 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->part_type= LIST_PARTITION; }
    break;

  case 461:

/* Line 1455 of yacc.c  */
#line 4613 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->part_type= LIST_PARTITION; }
    break;

  case 462:

/* Line 1455 of yacc.c  */
#line 4617 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 463:

/* Line 1455 of yacc.c  */
#line 4619 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->linear_hash_ind= TRUE;}
    break;

  case 464:

/* Line 1455 of yacc.c  */
#line 4624 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->key_algorithm= partition_info::KEY_ALGORITHM_NONE;}
    break;

  case 465:

/* Line 1455 of yacc.c  */
#line 4626 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            switch ((yyvsp[(3) - (3)].ulong_num)) {
            case 1:
              Lex->part_info->key_algorithm= partition_info::KEY_ALGORITHM_51;
              break;
            case 2:
              Lex->part_info->key_algorithm= partition_info::KEY_ALGORITHM_55;
              break;
            default:
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 466:

/* Line 1455 of yacc.c  */
#line 4642 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 467:

/* Line 1455 of yacc.c  */
#line 4643 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 468:

/* Line 1455 of yacc.c  */
#line 4647 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 469:

/* Line 1455 of yacc.c  */
#line 4648 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 470:

/* Line 1455 of yacc.c  */
#line 4653 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->num_columns++;
            if (part_info->part_field_list.push_back((yyvsp[(1) - (1)].lex_str).str))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
            if (part_info->num_columns > MAX_REF_PARTS)
            {
              my_error(ER_TOO_MANY_PARTITION_FUNC_FIELDS_ERROR, MYF(0),
                       "list of partition fields");
              MYSQL_YYABORT;
            }
          }
    break;

  case 471:

/* Line 1455 of yacc.c  */
#line 4672 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->column_list= TRUE;
            part_info->list_of_part_fields= TRUE;
          }
    break;

  case 472:

/* Line 1455 of yacc.c  */
#line 4682 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->set_part_expr((yyvsp[(2) - (5)].simple_string)+1, (yyvsp[(3) - (5)].item), (yyvsp[(4) - (5)].simple_string), FALSE))
            { MYSQL_YYABORT; }
            part_info->num_columns= 1;
            part_info->column_list= FALSE;
          }
    break;

  case 473:

/* Line 1455 of yacc.c  */
#line 4693 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->part_info->set_part_expr((yyvsp[(2) - (5)].simple_string)+1, (yyvsp[(3) - (5)].item), (yyvsp[(4) - (5)].simple_string), TRUE))
            { MYSQL_YYABORT; }
          }
    break;

  case 474:

/* Line 1455 of yacc.c  */
#line 4701 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 475:

/* Line 1455 of yacc.c  */
#line 4703 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            uint num_parts= (yyvsp[(2) - (2)].ulong_num);
            partition_info *part_info= Lex->part_info;
            if (num_parts == 0)
            {
              my_error(ER_NO_PARTS_ERROR, MYF(0), "partitions");
              MYSQL_YYABORT;
            }

            part_info->num_parts= num_parts;
            part_info->use_default_num_partitions= FALSE;
          }
    break;

  case 476:

/* Line 1455 of yacc.c  */
#line 4718 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 477:

/* Line 1455 of yacc.c  */
#line 4720 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->subpart_type= HASH_PARTITION; }
    break;

  case 478:

/* Line 1455 of yacc.c  */
#line 4721 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 479:

/* Line 1455 of yacc.c  */
#line 4724 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->subpart_type= HASH_PARTITION;
            part_info->list_of_subpart_fields= TRUE;
          }
    break;

  case 480:

/* Line 1455 of yacc.c  */
#line 4729 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 481:

/* Line 1455 of yacc.c  */
#line 4733 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 482:

/* Line 1455 of yacc.c  */
#line 4734 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 483:

/* Line 1455 of yacc.c  */
#line 4739 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->subpart_field_list.push_back((yyvsp[(1) - (1)].lex_str).str))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
            if (part_info->subpart_field_list.elements > MAX_REF_PARTS)
            {
              my_error(ER_TOO_MANY_PARTITION_FUNC_FIELDS_ERROR, MYF(0),
                       "list of subpartition fields");
              MYSQL_YYABORT;
            }
          }
    break;

  case 484:

/* Line 1455 of yacc.c  */
#line 4757 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            bool not_corr_func;
            not_corr_func= !lex->safe_to_cache_query;
            lex->safe_to_cache_query= 1;
            if (not_corr_func)
            {
              my_parse_error(ER(ER_WRONG_EXPR_IN_PARTITION_FUNC_ERROR));
              MYSQL_YYABORT;
            }
            (yyval.item)=(yyvsp[(1) - (1)].item);
          }
    break;

  case 485:

/* Line 1455 of yacc.c  */
#line 4772 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 486:

/* Line 1455 of yacc.c  */
#line 4774 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            uint num_parts= (yyvsp[(2) - (2)].ulong_num);
            LEX *lex= Lex;
            if (num_parts == 0)
            {
              my_error(ER_NO_PARTS_ERROR, MYF(0), "subpartitions");
              MYSQL_YYABORT;
            }
            lex->part_info->num_subparts= num_parts;
            lex->part_info->use_default_num_subpartitions= FALSE;
          }
    break;

  case 487:

/* Line 1455 of yacc.c  */
#line 4789 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->part_type == RANGE_PARTITION)
            {
              my_error(ER_PARTITIONS_MUST_BE_DEFINED_ERROR, MYF(0),
                       "RANGE");
              MYSQL_YYABORT;
            }
            else if (part_info->part_type == LIST_PARTITION)
            {
              my_error(ER_PARTITIONS_MUST_BE_DEFINED_ERROR, MYF(0),
                       "LIST");
              MYSQL_YYABORT;
            }
          }
    break;

  case 488:

/* Line 1455 of yacc.c  */
#line 4805 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            uint count_curr_parts= part_info->partitions.elements;
            if (part_info->num_parts != 0)
            {
              if (part_info->num_parts !=
                  count_curr_parts)
              {
                my_parse_error(ER(ER_PARTITION_WRONG_NO_PART_ERROR));
                MYSQL_YYABORT;
              }
            }
            else if (count_curr_parts > 0)
            {
              part_info->num_parts= count_curr_parts;
            }
            part_info->count_curr_subparts= 0;
          }
    break;

  case 489:

/* Line 1455 of yacc.c  */
#line 4826 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 490:

/* Line 1455 of yacc.c  */
#line 4827 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 491:

/* Line 1455 of yacc.c  */
#line 4832 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            partition_element *p_elem= new partition_element();

            if (!p_elem || part_info->partitions.push_back(p_elem))
            {
              mem_alloc_error(sizeof(partition_element));
              MYSQL_YYABORT;
            }
            p_elem->part_state= PART_NORMAL;
            part_info->curr_part_elem= p_elem;
            part_info->current_partition= p_elem;
            part_info->use_default_partitions= FALSE;
            part_info->use_default_num_partitions= FALSE;
          }
    break;

  case 492:

/* Line 1455 of yacc.c  */
#line 4851 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 493:

/* Line 1455 of yacc.c  */
#line 4856 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            partition_element *p_elem= part_info->curr_part_elem;
            p_elem->partition_name= (yyvsp[(1) - (1)].lex_str).str;
          }
    break;

  case 494:

/* Line 1455 of yacc.c  */
#line 4865 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->part_type == RANGE_PARTITION)
              {
                my_error(ER_PARTITION_REQUIRES_VALUES_ERROR, MYF(0),
                         "RANGE", "LESS THAN");
                MYSQL_YYABORT;
              }
              if (part_info->part_type == LIST_PARTITION)
              {
                my_error(ER_PARTITION_REQUIRES_VALUES_ERROR, MYF(0),
                         "LIST", "IN");
                MYSQL_YYABORT;
              }
            }
            else
              part_info->part_type= HASH_PARTITION;
          }
    break;

  case 495:

/* Line 1455 of yacc.c  */
#line 4887 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->part_type != RANGE_PARTITION)
              {
                my_error(ER_PARTITION_WRONG_VALUES_ERROR, MYF(0),
                         "RANGE", "LESS THAN");
                MYSQL_YYABORT;
              }
            }
            else
              part_info->part_type= RANGE_PARTITION;
          }
    break;

  case 496:

/* Line 1455 of yacc.c  */
#line 4902 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 497:

/* Line 1455 of yacc.c  */
#line 4904 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->part_type != LIST_PARTITION)
              {
                my_error(ER_PARTITION_WRONG_VALUES_ERROR, MYF(0),
                               "LIST", "IN");
                MYSQL_YYABORT;
              }
            }
            else
              part_info->part_type= LIST_PARTITION;
          }
    break;

  case 498:

/* Line 1455 of yacc.c  */
#line 4919 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 499:

/* Line 1455 of yacc.c  */
#line 4924 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;

            if (part_info->num_columns &&
                part_info->num_columns != 1U)
            {
              part_info->print_debug("Kilroy II", NULL);
              my_parse_error(ER(ER_PARTITION_COLUMN_LIST_ERROR));
              MYSQL_YYABORT;
            }
            else
              part_info->num_columns= 1U;
            if (part_info->init_column_part())
            {
              MYSQL_YYABORT;
            }
            if (part_info->add_max_value())
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 500:

/* Line 1455 of yacc.c  */
#line 4945 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 501:

/* Line 1455 of yacc.c  */
#line 4950 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            part_info->print_debug("part_values_in: part_value_item", NULL);

            if (part_info->num_columns != 1U)
            {
              if (!lex->is_partition_management() ||
                  part_info->num_columns == 0 ||
                  part_info->num_columns > MAX_REF_PARTS)
              {
                part_info->print_debug("Kilroy III", NULL);
                my_parse_error(ER(ER_PARTITION_COLUMN_LIST_ERROR));
                MYSQL_YYABORT;
              }
              /*
                Reorganize the current large array into a list of small
                arrays with one entry in each array. This can happen
                in the first partition of an ALTER TABLE statement where
                we ADD or REORGANIZE partitions. Also can only happen
                for LIST partitions.
              */
              if (part_info->reorganize_into_single_field_col_val())
              {
                MYSQL_YYABORT;
              }
            }
          }
    break;

  case 502:

/* Line 1455 of yacc.c  */
#line 4979 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->num_columns < 2U)
            {
              my_parse_error(ER(ER_ROW_SINGLE_PARTITION_FIELD_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 503:

/* Line 1455 of yacc.c  */
#line 4990 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 504:

/* Line 1455 of yacc.c  */
#line 4991 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 505:

/* Line 1455 of yacc.c  */
#line 4996 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->print_debug("( part_value_item", NULL);
            /* Initialisation code needed for each list of value expressions */
            if (!(part_info->part_type == LIST_PARTITION &&
                  part_info->num_columns == 1U) &&
                 part_info->init_column_part())
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 506:

/* Line 1455 of yacc.c  */
#line 5007 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 507:

/* Line 1455 of yacc.c  */
#line 5009 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->print_debug(") part_value_item", NULL);
            if (part_info->num_columns == 0)
              part_info->num_columns= part_info->curr_list_object;
            if (part_info->num_columns != part_info->curr_list_object)
            {
              /*
                All value items lists must be of equal length, in some cases
                which is covered by the above if-statement we don't know yet
                how many columns is in the partition so the assignment above
                ensures that we only report errors when we know we have an
                error.
              */
              part_info->print_debug("Kilroy I", NULL);
              my_parse_error(ER(ER_PARTITION_COLUMN_LIST_ERROR));
              MYSQL_YYABORT;
            }
            part_info->curr_list_object= 0;
          }
    break;

  case 508:

/* Line 1455 of yacc.c  */
#line 5032 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 509:

/* Line 1455 of yacc.c  */
#line 5033 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 510:

/* Line 1455 of yacc.c  */
#line 5038 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->part_type == LIST_PARTITION)
            {
              my_parse_error(ER(ER_MAXVALUE_IN_VALUES_IN));
              MYSQL_YYABORT;
            }
            if (part_info->add_max_value())
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 511:

/* Line 1455 of yacc.c  */
#line 5051 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            Item *part_expr= (yyvsp[(1) - (1)].item);

            if (!lex->safe_to_cache_query)
            {
              my_parse_error(ER(ER_WRONG_EXPR_IN_PARTITION_FUNC_ERROR));
              MYSQL_YYABORT;
            }
            if (part_info->add_column_list_value(YYTHD, part_expr))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 512:

/* Line 1455 of yacc.c  */
#line 5071 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->num_subparts != 0 &&
                !part_info->use_default_subpartitions)
            {
              /*
                We come here when we have defined subpartitions on the first
                partition but not on all the subsequent partitions. 
              */
              my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 513:

/* Line 1455 of yacc.c  */
#line 5085 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->num_subparts != 0)
            {
              if (part_info->num_subparts !=
                  part_info->count_curr_subparts)
              {
                my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
                MYSQL_YYABORT;
              }
            }
            else if (part_info->count_curr_subparts > 0)
            {
              if (part_info->partitions.elements > 1)
              {
                my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
                MYSQL_YYABORT;
              }
              part_info->num_subparts= part_info->count_curr_subparts;
            }
            part_info->count_curr_subparts= 0;
          }
    break;

  case 514:

/* Line 1455 of yacc.c  */
#line 5110 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 515:

/* Line 1455 of yacc.c  */
#line 5111 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 516:

/* Line 1455 of yacc.c  */
#line 5116 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            partition_element *curr_part= part_info->current_partition;
            partition_element *sub_p_elem= new partition_element(curr_part);
            if (part_info->use_default_subpartitions &&
                part_info->partitions.elements >= 2)
            {
              /*
                create table t1 (a int)
                partition by list (a) subpartition by hash (a)
                (partition p0 values in (1),
                 partition p1 values in (2) subpartition sp11);
                causes use to arrive since we are on the second
                partition, but still use_default_subpartitions
                is set. When we come here we're processing at least
                the second partition (the current partition processed
                have already been put into the partitions list.
              */
              my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
              MYSQL_YYABORT;
            }
            if (!sub_p_elem ||
             curr_part->subpartitions.push_back(sub_p_elem))
            {
              mem_alloc_error(sizeof(partition_element));
              MYSQL_YYABORT;
            }
            part_info->curr_part_elem= sub_p_elem;
            part_info->use_default_subpartitions= FALSE;
            part_info->use_default_num_subpartitions= FALSE;
            part_info->count_curr_subparts++;
          }
    break;

  case 517:

/* Line 1455 of yacc.c  */
#line 5148 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 518:

/* Line 1455 of yacc.c  */
#line 5153 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->partition_name= (yyvsp[(1) - (1)].lex_str).str; }
    break;

  case 519:

/* Line 1455 of yacc.c  */
#line 5157 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 520:

/* Line 1455 of yacc.c  */
#line 5158 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 521:

/* Line 1455 of yacc.c  */
#line 5162 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 522:

/* Line 1455 of yacc.c  */
#line 5163 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 523:

/* Line 1455 of yacc.c  */
#line 5168 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->tablespace_name= (yyvsp[(3) - (3)].lex_str).str; }
    break;

  case 524:

/* Line 1455 of yacc.c  */
#line 5170 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->curr_part_elem->engine_type= (yyvsp[(4) - (4)].db_type);
            part_info->default_engine_type= (yyvsp[(4) - (4)].db_type);
          }
    break;

  case 525:

/* Line 1455 of yacc.c  */
#line 5176 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info->curr_part_elem->connect_string.str= (yyvsp[(3) - (3)].lex_str).str;
            lex->part_info->curr_part_elem->connect_string.length= (yyvsp[(3) - (3)].lex_str).length;
          }
    break;

  case 526:

/* Line 1455 of yacc.c  */
#line 5182 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->nodegroup_id= (uint16) (yyvsp[(3) - (3)].ulong_num); }
    break;

  case 527:

/* Line 1455 of yacc.c  */
#line 5184 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_max_rows= (ha_rows) (yyvsp[(3) - (3)].ulonglong_number); }
    break;

  case 528:

/* Line 1455 of yacc.c  */
#line 5186 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_min_rows= (ha_rows) (yyvsp[(3) - (3)].ulonglong_number); }
    break;

  case 529:

/* Line 1455 of yacc.c  */
#line 5188 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->data_file_name= (yyvsp[(4) - (4)].lex_str).str; }
    break;

  case 530:

/* Line 1455 of yacc.c  */
#line 5190 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->index_file_name= (yyvsp[(4) - (4)].lex_str).str; }
    break;

  case 531:

/* Line 1455 of yacc.c  */
#line 5192 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_comment= (yyvsp[(3) - (3)].lex_str).str; }
    break;

  case 532:

/* Line 1455 of yacc.c  */
#line 5201 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->sql_command == SQLCOM_INSERT)
              lex->sql_command= SQLCOM_INSERT_SELECT;
            else if (lex->sql_command == SQLCOM_REPLACE)
              lex->sql_command= SQLCOM_REPLACE_SELECT;
            /*
              The following work only with the local list, the global list
              is created correctly in this case
            */
            lex->current_select->table_list.save_and_clear(&lex->save_list);
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 533:

/* Line 1455 of yacc.c  */
#line 5216 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 534:

/* Line 1455 of yacc.c  */
#line 5220 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              The following work only with the local list, the global list
              is created correctly in this case
            */
            Lex->current_select->table_list.push_front(&Lex->save_list);
          }
    break;

  case 535:

/* Line 1455 of yacc.c  */
#line 5230 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 536:

/* Line 1455 of yacc.c  */
#line 5231 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 537:

/* Line 1455 of yacc.c  */
#line 5235 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 538:

/* Line 1455 of yacc.c  */
#line 5236 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 539:

/* Line 1455 of yacc.c  */
#line 5240 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 540:

/* Line 1455 of yacc.c  */
#line 5241 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 541:

/* Line 1455 of yacc.c  */
#line 5245 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 542:

/* Line 1455 of yacc.c  */
#line 5246 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 543:

/* Line 1455 of yacc.c  */
#line 5250 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 544:

/* Line 1455 of yacc.c  */
#line 5251 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(1) - (1)].num);}
    break;

  case 545:

/* Line 1455 of yacc.c  */
#line 5255 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=(yyvsp[(1) - (1)].num); }
    break;

  case 546:

/* Line 1455 of yacc.c  */
#line 5256 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(1) - (2)].num) | (yyvsp[(2) - (2)].num); }
    break;

  case 547:

/* Line 1455 of yacc.c  */
#line 5260 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=HA_LEX_CREATE_TMP_TABLE; }
    break;

  case 548:

/* Line 1455 of yacc.c  */
#line 5265 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->check_exists= FALSE;
            (yyval.num)= 0;
          }
    break;

  case 549:

/* Line 1455 of yacc.c  */
#line 5270 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->check_exists= TRUE;
            (yyval.num)=HA_LEX_CREATE_IF_NOT_EXISTS;
          }
    break;

  case 557:

/* Line 1455 of yacc.c  */
#line 5294 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.db_type= (yyvsp[(3) - (3)].db_type);
            Lex->create_info.used_fields|= HA_CREATE_USED_ENGINE;
          }
    break;

  case 558:

/* Line 1455 of yacc.c  */
#line 5299 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.max_rows= (yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_MAX_ROWS;
          }
    break;

  case 559:

/* Line 1455 of yacc.c  */
#line 5304 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.min_rows= (yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_MIN_ROWS;
          }
    break;

  case 560:

/* Line 1455 of yacc.c  */
#line 5309 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.avg_row_length=(yyvsp[(3) - (3)].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_AVG_ROW_LENGTH;
          }
    break;

  case 561:

/* Line 1455 of yacc.c  */
#line 5314 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.password=(yyvsp[(3) - (3)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_PASSWORD;
          }
    break;

  case 562:

/* Line 1455 of yacc.c  */
#line 5319 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.comment=(yyvsp[(3) - (3)].lex_str);
            Lex->create_info.used_fields|= HA_CREATE_USED_COMMENT;
          }
    break;

  case 563:

/* Line 1455 of yacc.c  */
#line 5324 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.auto_increment_value=(yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_AUTO;
          }
    break;

  case 564:

/* Line 1455 of yacc.c  */
#line 5329 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            switch((yyvsp[(3) - (3)].ulong_num)) {
            case 0:
                Lex->create_info.table_options|= HA_OPTION_NO_PACK_KEYS;
                break;
            case 1:
                Lex->create_info.table_options|= HA_OPTION_PACK_KEYS;
                break;
            default:
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
            }
            Lex->create_info.used_fields|= HA_CREATE_USED_PACK_KEYS;
          }
    break;

  case 565:

/* Line 1455 of yacc.c  */
#line 5344 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.table_options&=
              ~(HA_OPTION_PACK_KEYS | HA_OPTION_NO_PACK_KEYS);
            Lex->create_info.used_fields|= HA_CREATE_USED_PACK_KEYS;
          }
    break;

  case 566:

/* Line 1455 of yacc.c  */
#line 5350 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_CHECKSUM : HA_OPTION_NO_CHECKSUM;
            Lex->create_info.used_fields|= HA_CREATE_USED_CHECKSUM;
          }
    break;

  case 567:

/* Line 1455 of yacc.c  */
#line 5355 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
             Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_CHECKSUM : HA_OPTION_NO_CHECKSUM;
             Lex->create_info.used_fields|= HA_CREATE_USED_CHECKSUM;
          }
    break;

  case 568:

/* Line 1455 of yacc.c  */
#line 5360 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.used_fields|= HA_CREATE_USED_PAGE_CHECKSUM;
            Lex->create_info.page_checksum= (yyvsp[(3) - (3)].choice);
          }
    break;

  case 569:

/* Line 1455 of yacc.c  */
#line 5365 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_DELAY_KEY_WRITE : HA_OPTION_NO_DELAY_KEY_WRITE;
            Lex->create_info.used_fields|= HA_CREATE_USED_DELAY_KEY_WRITE;
          }
    break;

  case 570:

/* Line 1455 of yacc.c  */
#line 5370 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.row_type= (yyvsp[(3) - (3)].row_type);
            Lex->create_info.used_fields|= HA_CREATE_USED_ROW_FORMAT;
          }
    break;

  case 571:

/* Line 1455 of yacc.c  */
#line 5375 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->select_lex.table_list.save_and_clear(&Lex->save_list);
          }
    break;

  case 572:

/* Line 1455 of yacc.c  */
#line 5379 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              Move the union list to the merge_list and exclude its tables
              from the global list.
            */
            LEX *lex=Lex;
            lex->create_info.merge_list= lex->select_lex.table_list;
            lex->select_lex.table_list= lex->save_list;
            /*
              When excluding union list from the global list we assume that
              elements of the former immediately follow elements which represent
              table being created/altered and parent tables.
            */
            TABLE_LIST *last_non_sel_table= lex->create_last_non_select_table;
            DBUG_ASSERT(last_non_sel_table->next_global ==
                        lex->create_info.merge_list.first);
            last_non_sel_table->next_global= 0;
            Lex->query_tables_last= &last_non_sel_table->next_global;

            lex->create_info.used_fields|= HA_CREATE_USED_UNION;
          }
    break;

  case 575:

/* Line 1455 of yacc.c  */
#line 5403 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.merge_insert_method= (yyvsp[(3) - (3)].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_INSERT_METHOD;
          }
    break;

  case 576:

/* Line 1455 of yacc.c  */
#line 5408 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.data_file_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_DATADIR;
          }
    break;

  case 577:

/* Line 1455 of yacc.c  */
#line 5413 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.index_file_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_INDEXDIR;
          }
    break;

  case 578:

/* Line 1455 of yacc.c  */
#line 5418 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {Lex->create_info.tablespace= (yyvsp[(2) - (2)].lex_str).str;}
    break;

  case 579:

/* Line 1455 of yacc.c  */
#line 5420 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {Lex->create_info.storage_media= HA_SM_DISK;}
    break;

  case 580:

/* Line 1455 of yacc.c  */
#line 5422 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {Lex->create_info.storage_media= HA_SM_MEMORY;}
    break;

  case 581:

/* Line 1455 of yacc.c  */
#line 5424 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.connect_string.str= (yyvsp[(3) - (3)].lex_str).str;
            Lex->create_info.connect_string.length= (yyvsp[(3) - (3)].lex_str).length;
            Lex->create_info.used_fields|= HA_CREATE_USED_CONNECTION;
          }
    break;

  case 582:

/* Line 1455 of yacc.c  */
#line 5430 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.used_fields|= HA_CREATE_USED_KEY_BLOCK_SIZE;
            Lex->create_info.key_block_size= (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 583:

/* Line 1455 of yacc.c  */
#line 5435 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
	    Lex->create_info.used_fields|= HA_CREATE_USED_TRANSACTIONAL;
            Lex->create_info.transactional= (yyvsp[(3) - (3)].choice);
          }
    break;

  case 584:

/* Line 1455 of yacc.c  */
#line 5440 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            new (YYTHD->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), true, &Lex->create_info.option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 585:

/* Line 1455 of yacc.c  */
#line 5446 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            new (YYTHD->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), false, &Lex->create_info.option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 586:

/* Line 1455 of yacc.c  */
#line 5452 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            new (YYTHD->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].ulonglong_number), &Lex->create_info.option_list,
                                  &Lex->option_list_last, YYTHD->mem_root);
          }
    break;

  case 587:

/* Line 1455 of yacc.c  */
#line 5458 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            new (YYTHD->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), &Lex->create_info.option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 588:

/* Line 1455 of yacc.c  */
#line 5467 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            HA_CREATE_INFO *cinfo= &Lex->create_info;
            if ((cinfo->used_fields & HA_CREATE_USED_DEFAULT_CHARSET) &&
                 cinfo->default_table_charset && (yyvsp[(4) - (4)].charset) &&
                 !my_charset_same(cinfo->default_table_charset,(yyvsp[(4) - (4)].charset)))
            {
              my_error(ER_CONFLICTING_DECLARATIONS, MYF(0),
                       "CHARACTER SET ", cinfo->default_table_charset->csname,
                       "CHARACTER SET ", (yyvsp[(4) - (4)].charset)->csname);
              MYSQL_YYABORT;
            }
            Lex->create_info.default_table_charset= (yyvsp[(4) - (4)].charset);
            Lex->create_info.used_fields|= HA_CREATE_USED_DEFAULT_CHARSET;
          }
    break;

  case 589:

/* Line 1455 of yacc.c  */
#line 5485 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            HA_CREATE_INFO *cinfo= &Lex->create_info;
            if ((cinfo->used_fields & HA_CREATE_USED_DEFAULT_CHARSET) &&
                 cinfo->default_table_charset && (yyvsp[(4) - (4)].charset) &&
                 !((yyvsp[(4) - (4)].charset)= merge_charset_and_collation(cinfo->default_table_charset,
                                                   (yyvsp[(4) - (4)].charset))))
            {
              MYSQL_YYABORT;
            }

            Lex->create_info.default_table_charset= (yyvsp[(4) - (4)].charset);
            Lex->create_info.used_fields|= HA_CREATE_USED_DEFAULT_CHARSET;
          }
    break;

  case 590:

/* Line 1455 of yacc.c  */
#line 5502 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            plugin_ref plugin= ha_resolve_by_name(YYTHD, &(yyvsp[(1) - (1)].lex_str));

            if (plugin)
              (yyval.db_type)= plugin_data(plugin, handlerton*);
            else
            {
              if (YYTHD->variables.sql_mode & MODE_NO_ENGINE_SUBSTITUTION)
              {
                my_error(ER_UNKNOWN_STORAGE_ENGINE, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
                MYSQL_YYABORT;
              }
              (yyval.db_type)= 0;
              push_warning_printf(YYTHD, MYSQL_ERROR::WARN_LEVEL_WARN,
                                  ER_UNKNOWN_STORAGE_ENGINE,
                                  ER(ER_UNKNOWN_STORAGE_ENGINE),
                                  (yyvsp[(1) - (1)].lex_str).str);
            }
          }
    break;

  case 591:

/* Line 1455 of yacc.c  */
#line 5525 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            plugin_ref plugin;
            if ((plugin= ha_resolve_by_name(YYTHD, &(yyvsp[(1) - (1)].lex_str))))
              (yyval.db_type)= plugin_data(plugin, handlerton*);
            else
            {
              my_error(ER_UNKNOWN_STORAGE_ENGINE, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 592:

/* Line 1455 of yacc.c  */
#line 5538 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_DEFAULT; }
    break;

  case 593:

/* Line 1455 of yacc.c  */
#line 5539 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_FIXED; }
    break;

  case 594:

/* Line 1455 of yacc.c  */
#line 5540 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_DYNAMIC; }
    break;

  case 595:

/* Line 1455 of yacc.c  */
#line 5541 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_COMPRESSED; }
    break;

  case 596:

/* Line 1455 of yacc.c  */
#line 5542 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_REDUNDANT; }
    break;

  case 597:

/* Line 1455 of yacc.c  */
#line 5543 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_COMPACT; }
    break;

  case 598:

/* Line 1455 of yacc.c  */
#line 5544 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_PAGE; }
    break;

  case 599:

/* Line 1455 of yacc.c  */
#line 5548 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_DISABLED; }
    break;

  case 600:

/* Line 1455 of yacc.c  */
#line 5549 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_TO_FIRST; }
    break;

  case 601:

/* Line 1455 of yacc.c  */
#line 5550 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_TO_LAST; }
    break;

  case 602:

/* Line 1455 of yacc.c  */
#line 5554 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 604:

/* Line 1455 of yacc.c  */
#line 5559 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {(yyval.num) = (int) STRING_RESULT; }
    break;

  case 605:

/* Line 1455 of yacc.c  */
#line 5560 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {(yyval.num) = (int) REAL_RESULT; }
    break;

  case 606:

/* Line 1455 of yacc.c  */
#line 5561 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {(yyval.num) = (int) DECIMAL_RESULT; }
    break;

  case 607:

/* Line 1455 of yacc.c  */
#line 5562 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {(yyval.num) = (int) INT_RESULT; }
    break;

  case 608:

/* Line 1455 of yacc.c  */
#line 5568 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
          Lex->create_last_non_select_table= Lex->last_table();
        }
    break;

  case 614:

/* Line 1455 of yacc.c  */
#line 5586 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->col_list.empty(); /* Alloced by sql_alloc */
          }
    break;

  case 615:

/* Line 1455 of yacc.c  */
#line 5593 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->option_list= NULL; }
    break;

  case 616:

/* Line 1455 of yacc.c  */
#line 5595 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(1) - (8)].key_type), (yyvsp[(2) - (8)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 617:

/* Line 1455 of yacc.c  */
#line 5601 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->option_list= NULL; }
    break;

  case 618:

/* Line 1455 of yacc.c  */
#line 5603 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(1) - (9)].key_type), (yyvsp[(3) - (9)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 619:

/* Line 1455 of yacc.c  */
#line 5609 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->option_list= NULL; }
    break;

  case 620:

/* Line 1455 of yacc.c  */
#line 5611 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(1) - (9)].key_type), (yyvsp[(3) - (9)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 621:

/* Line 1455 of yacc.c  */
#line 5617 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->option_list= NULL; }
    break;

  case 622:

/* Line 1455 of yacc.c  */
#line 5619 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(2) - (9)].key_type), (yyvsp[(3) - (9)].lex_str).str ? (yyvsp[(3) - (9)].lex_str) : (yyvsp[(1) - (9)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 623:

/* Line 1455 of yacc.c  */
#line 5624 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Key *key= new Foreign_key((yyvsp[(4) - (8)].lex_str).str ? (yyvsp[(4) - (8)].lex_str) : (yyvsp[(1) - (8)].lex_str), lex->col_list,
                                      (yyvsp[(8) - (8)].table),
                                      lex->ref_list,
                                      lex->fk_delete_opt,
                                      lex->fk_update_opt,
                                      lex->fk_match_option,
                                      lex->check_exists);
            if (key == NULL)
              MYSQL_YYABORT;
            lex->alter_info.key_list.push_back(key);
            lex->option_list= NULL;
            if (add_create_index (lex, Key::MULTIPLE, (yyvsp[(1) - (8)].lex_str).str ? (yyvsp[(1) - (8)].lex_str) : (yyvsp[(4) - (8)].lex_str),
                                  &default_key_create_info, 1))
              MYSQL_YYABORT;
            /* Only used for ALTER TABLE. Ignored otherwise. */
            lex->alter_info.flags|= ALTER_FOREIGN_KEY;
          }
    break;

  case 624:

/* Line 1455 of yacc.c  */
#line 5644 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->col_list.empty(); /* Alloced by sql_alloc */
          }
    break;

  case 628:

/* Line 1455 of yacc.c  */
#line 5659 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 629:

/* Line 1455 of yacc.c  */
#line 5660 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 630:

/* Line 1455 of yacc.c  */
#line 5664 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str); }
    break;

  case 631:

/* Line 1455 of yacc.c  */
#line 5669 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->length=lex->dec=0;
            lex->type=0;
            lex->default_value= lex->on_update_value= 0;
            lex->comment=null_lex_str;
            lex->charset=NULL;
	    lex->vcol_info= 0;
            lex->option_list= NULL;
          }
    break;

  case 632:

/* Line 1455 of yacc.c  */
#line 5680 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (add_field_to_list(lex->thd, &(yyvsp[(1) - (3)].lex_str), (enum enum_field_types) (yyvsp[(3) - (3)].num),
                                  lex->length,lex->dec,lex->type,
                                  lex->default_value, lex->on_update_value, 
                                  &lex->comment,
                                  lex->change,&lex->interval_list,lex->charset,
                                  lex->uint_geom_type,
                                  lex->vcol_info, lex->option_list))
              MYSQL_YYABORT;
          }
    break;

  case 633:

/* Line 1455 of yacc.c  */
#line 5694 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 634:

/* Line 1455 of yacc.c  */
#line 5698 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= (enum enum_field_types)MYSQL_TYPE_VIRTUAL;
            Lex->vcol_info->set_field_type((enum enum_field_types) (yyvsp[(1) - (8)].num));
          }
    break;

  case 636:

/* Line 1455 of yacc.c  */
#line 5706 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 637:

/* Line 1455 of yacc.c  */
#line 5711 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->vcol_info->set_stored_in_db_flag(FALSE);
          }
    break;

  case 638:

/* Line 1455 of yacc.c  */
#line 5715 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->vcol_info->set_stored_in_db_flag(FALSE);
          }
    break;

  case 639:

/* Line 1455 of yacc.c  */
#line 5719 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->vcol_info->set_stored_in_db_flag(TRUE);
          }
    break;

  case 640:

/* Line 1455 of yacc.c  */
#line 5725 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 641:

/* Line 1455 of yacc.c  */
#line 5726 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 642:

/* Line 1455 of yacc.c  */
#line 5730 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 644:

/* Line 1455 of yacc.c  */
#line 5736 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= UNIQUE_FLAG;
            lex->alter_info.flags|= ALTER_ADD_INDEX;
          }
    break;

  case 645:

/* Line 1455 of yacc.c  */
#line 5742 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= UNIQUE_KEY_FLAG;
            lex->alter_info.flags|= ALTER_ADD_INDEX;
          }
    break;

  case 646:

/* Line 1455 of yacc.c  */
#line 5747 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 647:

/* Line 1455 of yacc.c  */
#line 5752 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              "PARSE_VCOL_EXPR" can only be used by the SQL server
              when reading a '*.frm' file.
              Prevent the end user from invoking this command.
            */
            if (!Lex->parse_vcol_expr)
            {
              my_message(ER_SYNTAX_ERROR, ER(ER_SYNTAX_ERROR), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 648:

/* Line 1455 of yacc.c  */
#line 5768 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->vcol_info= new Virtual_column_info();
            if (!Lex->vcol_info)
            {
              mem_alloc_error(sizeof(Virtual_column_info));
              MYSQL_YYABORT;
            }
            uint expr_len= (uint)((yyvsp[(3) - (3)].simple_string) - (yyvsp[(1) - (3)].simple_string)) - 1;
            Lex->vcol_info->expr_str.str= (char* ) sql_memdup((yyvsp[(1) - (3)].simple_string) + 1, expr_len);
            Lex->vcol_info->expr_str.length= expr_len;
            Lex->vcol_info->expr_item= (yyvsp[(2) - (3)].item);
          }
    break;

  case 649:

/* Line 1455 of yacc.c  */
#line 5783 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=(yyvsp[(1) - (3)].num); }
    break;

  case 650:

/* Line 1455 of yacc.c  */
#line 5784 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=(yyvsp[(1) - (3)].num); }
    break;

  case 651:

/* Line 1455 of yacc.c  */
#line 5785 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_FLOAT; }
    break;

  case 652:

/* Line 1455 of yacc.c  */
#line 5787 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_BIT;
          }
    break;

  case 653:

/* Line 1455 of yacc.c  */
#line 5792 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_BIT;
          }
    break;

  case 654:

/* Line 1455 of yacc.c  */
#line 5796 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_TINY;
          }
    break;

  case 655:

/* Line 1455 of yacc.c  */
#line 5801 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_TINY;
          }
    break;

  case 656:

/* Line 1455 of yacc.c  */
#line 5806 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 657:

/* Line 1455 of yacc.c  */
#line 5810 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 658:

/* Line 1455 of yacc.c  */
#line 5815 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_STRING;
            Lex->charset=national_charset_info;
          }
    break;

  case 659:

/* Line 1455 of yacc.c  */
#line 5820 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_STRING;
            Lex->charset=national_charset_info;
          }
    break;

  case 660:

/* Line 1455 of yacc.c  */
#line 5826 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 661:

/* Line 1455 of yacc.c  */
#line 5831 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 662:

/* Line 1455 of yacc.c  */
#line 5837 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_TYPE_VARCHAR;
          }
    break;

  case 663:

/* Line 1455 of yacc.c  */
#line 5841 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_TYPE_VARCHAR;
            Lex->charset=national_charset_info;
          }
    break;

  case 664:

/* Line 1455 of yacc.c  */
#line 5846 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)= MYSQL_TYPE_VARCHAR;
          }
    break;

  case 665:

/* Line 1455 of yacc.c  */
#line 5851 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->length)
            {
              errno= 0;
              ulong length= strtoul(Lex->length, NULL, 10);
              if (errno == 0 && length <= MAX_FIELD_BLOBLENGTH && length != 4)
              {
                char buff[sizeof("YEAR()") + MY_INT64_NUM_DECIMAL_DIGITS + 1];
                my_snprintf(buff, sizeof(buff), "YEAR(%lu)", length);
                push_warning_printf(YYTHD, MYSQL_ERROR::WARN_LEVEL_NOTE,
                                    ER_WARN_DEPRECATED_SYNTAX,
                                    ER(ER_WARN_DEPRECATED_SYNTAX),
                                    buff, "YEAR(4)");
              }
            }
            (yyval.num)=MYSQL_TYPE_YEAR;
          }
    break;

  case 666:

/* Line 1455 of yacc.c  */
#line 5869 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DATE; }
    break;

  case 667:

/* Line 1455 of yacc.c  */
#line 5871 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_TIME; }
    break;

  case 668:

/* Line 1455 of yacc.c  */
#line 5873 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (YYTHD->variables.sql_mode & MODE_MAXDB)
              (yyval.num)=MYSQL_TYPE_DATETIME;
            else
            {
              /* 
                Unlike other types TIMESTAMP fields are NOT NULL by default.
              */
              Lex->type|= NOT_NULL_FLAG;
              (yyval.num)=MYSQL_TYPE_TIMESTAMP;
            }
          }
    break;

  case 669:

/* Line 1455 of yacc.c  */
#line 5886 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DATETIME; }
    break;

  case 670:

/* Line 1455 of yacc.c  */
#line 5888 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_TINY_BLOB;
          }
    break;

  case 671:

/* Line 1455 of yacc.c  */
#line 5893 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_BLOB;
          }
    break;

  case 672:

/* Line 1455 of yacc.c  */
#line 5898 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            Lex->charset=&my_charset_bin;
            Lex->uint_geom_type= (uint)(yyvsp[(1) - (1)].num);
            (yyval.num)=MYSQL_TYPE_GEOMETRY;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
    break;

  case 673:

/* Line 1455 of yacc.c  */
#line 5910 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB;
          }
    break;

  case 674:

/* Line 1455 of yacc.c  */
#line 5915 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_LONG_BLOB;
          }
    break;

  case 675:

/* Line 1455 of yacc.c  */
#line 5920 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB;
          }
    break;

  case 676:

/* Line 1455 of yacc.c  */
#line 5925 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB; }
    break;

  case 677:

/* Line 1455 of yacc.c  */
#line 5927 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_TINY_BLOB; }
    break;

  case 678:

/* Line 1455 of yacc.c  */
#line 5929 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_BLOB; }
    break;

  case 679:

/* Line 1455 of yacc.c  */
#line 5931 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB; }
    break;

  case 680:

/* Line 1455 of yacc.c  */
#line 5933 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_LONG_BLOB; }
    break;

  case 681:

/* Line 1455 of yacc.c  */
#line 5935 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_NEWDECIMAL;}
    break;

  case 682:

/* Line 1455 of yacc.c  */
#line 5937 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_NEWDECIMAL;}
    break;

  case 683:

/* Line 1455 of yacc.c  */
#line 5939 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_NEWDECIMAL;}
    break;

  case 684:

/* Line 1455 of yacc.c  */
#line 5941 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {Lex->interval_list.empty();}
    break;

  case 685:

/* Line 1455 of yacc.c  */
#line 5943 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_ENUM; }
    break;

  case 686:

/* Line 1455 of yacc.c  */
#line 5945 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->interval_list.empty();}
    break;

  case 687:

/* Line 1455 of yacc.c  */
#line 5947 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_SET; }
    break;

  case 688:

/* Line 1455 of yacc.c  */
#line 5949 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB; }
    break;

  case 689:

/* Line 1455 of yacc.c  */
#line 5951 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_LONGLONG;
            Lex->type|= (AUTO_INCREMENT_FLAG | NOT_NULL_FLAG | UNSIGNED_FLAG |
              UNIQUE_FLAG);
          }
    break;

  case 690:

/* Line 1455 of yacc.c  */
#line 5959 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_GEOMETRY; }
    break;

  case 691:

/* Line 1455 of yacc.c  */
#line 5960 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_GEOMETRYCOLLECTION; }
    break;

  case 692:

/* Line 1455 of yacc.c  */
#line 5962 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->length= (char*)"25";
            (yyval.num)= Field::GEOM_POINT;
          }
    break;

  case 693:

/* Line 1455 of yacc.c  */
#line 5966 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_MULTIPOINT; }
    break;

  case 694:

/* Line 1455 of yacc.c  */
#line 5967 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_LINESTRING; }
    break;

  case 695:

/* Line 1455 of yacc.c  */
#line 5968 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_MULTILINESTRING; }
    break;

  case 696:

/* Line 1455 of yacc.c  */
#line 5969 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_POLYGON; }
    break;

  case 697:

/* Line 1455 of yacc.c  */
#line 5970 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_MULTIPOLYGON; }
    break;

  case 698:

/* Line 1455 of yacc.c  */
#line 5974 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 699:

/* Line 1455 of yacc.c  */
#line 5978 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 700:

/* Line 1455 of yacc.c  */
#line 5979 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 701:

/* Line 1455 of yacc.c  */
#line 5983 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 702:

/* Line 1455 of yacc.c  */
#line 5984 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 703:

/* Line 1455 of yacc.c  */
#line 5988 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 704:

/* Line 1455 of yacc.c  */
#line 5989 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 705:

/* Line 1455 of yacc.c  */
#line 5990 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 706:

/* Line 1455 of yacc.c  */
#line 5991 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 707:

/* Line 1455 of yacc.c  */
#line 5992 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 708:

/* Line 1455 of yacc.c  */
#line 5996 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_LONG; }
    break;

  case 709:

/* Line 1455 of yacc.c  */
#line 5997 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_TINY; }
    break;

  case 710:

/* Line 1455 of yacc.c  */
#line 5998 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_SHORT; }
    break;

  case 711:

/* Line 1455 of yacc.c  */
#line 5999 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_INT24; }
    break;

  case 712:

/* Line 1455 of yacc.c  */
#line 6000 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_LONGLONG; }
    break;

  case 713:

/* Line 1455 of yacc.c  */
#line 6005 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= YYTHD->variables.sql_mode & MODE_REAL_AS_FLOAT ?
              MYSQL_TYPE_FLOAT : MYSQL_TYPE_DOUBLE;
          }
    break;

  case 714:

/* Line 1455 of yacc.c  */
#line 6010 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DOUBLE; }
    break;

  case 715:

/* Line 1455 of yacc.c  */
#line 6012 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DOUBLE; }
    break;

  case 716:

/* Line 1455 of yacc.c  */
#line 6017 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->dec=Lex->length= (char*)0; }
    break;

  case 717:

/* Line 1455 of yacc.c  */
#line 6019 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->dec= (char*)0; }
    break;

  case 718:

/* Line 1455 of yacc.c  */
#line 6021 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 719:

/* Line 1455 of yacc.c  */
#line 6026 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->length=(yyvsp[(2) - (5)].lex_str).str;
            lex->dec=(yyvsp[(4) - (5)].lex_str).str;
          }
    break;

  case 720:

/* Line 1455 of yacc.c  */
#line 6034 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 721:

/* Line 1455 of yacc.c  */
#line 6035 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 722:

/* Line 1455 of yacc.c  */
#line 6039 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 723:

/* Line 1455 of yacc.c  */
#line 6040 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 724:

/* Line 1455 of yacc.c  */
#line 6044 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 725:

/* Line 1455 of yacc.c  */
#line 6045 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= UNSIGNED_FLAG;}
    break;

  case 726:

/* Line 1455 of yacc.c  */
#line 6046 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= UNSIGNED_FLAG | ZEROFILL_FLAG; }
    break;

  case 727:

/* Line 1455 of yacc.c  */
#line 6050 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 728:

/* Line 1455 of yacc.c  */
#line 6051 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 729:

/* Line 1455 of yacc.c  */
#line 6052 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 730:

/* Line 1455 of yacc.c  */
#line 6053 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 731:

/* Line 1455 of yacc.c  */
#line 6056 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->length=(char*) 0; /* use default length */ }
    break;

  case 732:

/* Line 1455 of yacc.c  */
#line 6057 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { }
    break;

  case 733:

/* Line 1455 of yacc.c  */
#line 6061 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 734:

/* Line 1455 of yacc.c  */
#line 6062 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 735:

/* Line 1455 of yacc.c  */
#line 6066 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 736:

/* Line 1455 of yacc.c  */
#line 6067 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 737:

/* Line 1455 of yacc.c  */
#line 6071 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 739:

/* Line 1455 of yacc.c  */
#line 6076 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type&= ~ NOT_NULL_FLAG; }
    break;

  case 740:

/* Line 1455 of yacc.c  */
#line 6077 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= NOT_NULL_FLAG; }
    break;

  case 741:

/* Line 1455 of yacc.c  */
#line 6078 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->default_value=(yyvsp[(2) - (2)].item); }
    break;

  case 742:

/* Line 1455 of yacc.c  */
#line 6080 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_func_now_local((yyvsp[(4) - (4)].num));
            if (item == NULL)
              MYSQL_YYABORT;
            Lex->on_update_value= item;
          }
    break;

  case 743:

/* Line 1455 of yacc.c  */
#line 6086 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= AUTO_INCREMENT_FLAG | NOT_NULL_FLAG; }
    break;

  case 744:

/* Line 1455 of yacc.c  */
#line 6088 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            LEX *lex=Lex;
            lex->type|= AUTO_INCREMENT_FLAG | NOT_NULL_FLAG | UNIQUE_FLAG;
            lex->alter_info.flags|= ALTER_ADD_INDEX;
          }
    break;

  case 745:

/* Line 1455 of yacc.c  */
#line 6094 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= PRI_KEY_FLAG | NOT_NULL_FLAG;
            lex->alter_info.flags|= ALTER_ADD_INDEX;
          }
    break;

  case 746:

/* Line 1455 of yacc.c  */
#line 6100 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= UNIQUE_FLAG; 
            lex->alter_info.flags|= ALTER_ADD_INDEX;
          }
    break;

  case 747:

/* Line 1455 of yacc.c  */
#line 6106 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= UNIQUE_KEY_FLAG; 
            lex->alter_info.flags|= ALTER_ADD_INDEX; 
          }
    break;

  case 748:

/* Line 1455 of yacc.c  */
#line 6111 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 749:

/* Line 1455 of yacc.c  */
#line 6113 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->charset && !my_charset_same(Lex->charset,(yyvsp[(2) - (2)].charset)))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       (yyvsp[(2) - (2)].charset)->name,Lex->charset->csname);
              MYSQL_YYABORT;
            }
            else
            {
              Lex->charset=(yyvsp[(2) - (2)].charset);
            }
          }
    break;

  case 750:

/* Line 1455 of yacc.c  */
#line 6126 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            new (YYTHD->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), true, &Lex->option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 751:

/* Line 1455 of yacc.c  */
#line 6132 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            new (YYTHD->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), false, &Lex->option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 752:

/* Line 1455 of yacc.c  */
#line 6138 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            new (YYTHD->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].ulonglong_number), &Lex->option_list,
                                  &Lex->option_list_last, YYTHD->mem_root);
          }
    break;

  case 753:

/* Line 1455 of yacc.c  */
#line 6144 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            new (YYTHD->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), &Lex->option_list, &Lex->option_list_last);
          }
    break;

  case 754:

/* Line 1455 of yacc.c  */
#line 6153 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
          (yyval.num)= (yyvsp[(1) - (2)].num);

          if (Lex->charset) /* Lex->charset is scanned in "type" */
          {
            if (!(Lex->charset= merge_charset_and_collation(Lex->charset, (yyvsp[(2) - (2)].charset))))
              MYSQL_YYABORT;
          }
          else if ((yyvsp[(2) - (2)].charset))
          {
            my_error(ER_NOT_SUPPORTED_YET, MYF(0),
                     "COLLATE with no CHARACTER SET "
                     "in SP parameters, RETURNS, DECLARE");
            MYSQL_YYABORT;
          }
        }
    break;

  case 755:

/* Line 1455 of yacc.c  */
#line 6174 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_now_local((yyvsp[(2) - (2)].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 756:

/* Line 1455 of yacc.c  */
#line 6180 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 757:

/* Line 1455 of yacc.c  */
#line 6184 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 758:

/* Line 1455 of yacc.c  */
#line 6185 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 759:

/* Line 1455 of yacc.c  */
#line 6189 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 760:

/* Line 1455 of yacc.c  */
#line 6190 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 761:

/* Line 1455 of yacc.c  */
#line 6195 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!((yyval.charset)=get_charset_by_csname((yyvsp[(1) - (1)].lex_str).str,MY_CS_PRIMARY,MYF(0))))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 762:

/* Line 1455 of yacc.c  */
#line 6202 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.charset)= &my_charset_bin; }
    break;

  case 763:

/* Line 1455 of yacc.c  */
#line 6206 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset);   }
    break;

  case 764:

/* Line 1455 of yacc.c  */
#line 6207 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 765:

/* Line 1455 of yacc.c  */
#line 6211 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.charset)= NULL; }
    break;

  case 766:

/* Line 1455 of yacc.c  */
#line 6212 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.charset)= (yyvsp[(2) - (2)].charset); }
    break;

  case 767:

/* Line 1455 of yacc.c  */
#line 6217 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!((yyval.charset)=get_charset_by_csname((yyvsp[(1) - (1)].lex_str).str,MY_CS_PRIMARY,MYF(0))) &&
                !((yyval.charset)=get_old_charset_by_name((yyvsp[(1) - (1)].lex_str).str)))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 768:

/* Line 1455 of yacc.c  */
#line 6225 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.charset)= &my_charset_bin; }
    break;

  case 769:

/* Line 1455 of yacc.c  */
#line 6229 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset);   }
    break;

  case 770:

/* Line 1455 of yacc.c  */
#line 6230 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 771:

/* Line 1455 of yacc.c  */
#line 6235 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!((yyval.charset)=get_charset_by_name((yyvsp[(1) - (1)].lex_str).str,MYF(0))))
            {
              my_error(ER_UNKNOWN_COLLATION, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 772:

/* Line 1455 of yacc.c  */
#line 6245 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 773:

/* Line 1455 of yacc.c  */
#line 6246 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(2) - (2)].charset); }
    break;

  case 774:

/* Line 1455 of yacc.c  */
#line 6250 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset); }
    break;

  case 775:

/* Line 1455 of yacc.c  */
#line 6251 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 776:

/* Line 1455 of yacc.c  */
#line 6255 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 777:

/* Line 1455 of yacc.c  */
#line 6256 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 778:

/* Line 1455 of yacc.c  */
#line 6261 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->charset= &my_charset_latin1; }
    break;

  case 779:

/* Line 1455 of yacc.c  */
#line 6263 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->charset= &my_charset_latin1_bin;
          }
    break;

  case 780:

/* Line 1455 of yacc.c  */
#line 6267 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->charset= &my_charset_latin1_bin;
          }
    break;

  case 781:

/* Line 1455 of yacc.c  */
#line 6274 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!(Lex->charset=get_charset_by_csname("ucs2",
                                                     MY_CS_PRIMARY,MYF(0))))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), "ucs2");
              MYSQL_YYABORT;
            }
          }
    break;

  case 782:

/* Line 1455 of yacc.c  */
#line 6283 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!(Lex->charset=get_charset_by_name("ucs2_bin", MYF(0))))
            {
              my_error(ER_UNKNOWN_COLLATION, MYF(0), "ucs2_bin");
              MYSQL_YYABORT;
            }
          }
    break;

  case 783:

/* Line 1455 of yacc.c  */
#line 6291 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!(Lex->charset=get_charset_by_name("ucs2_bin", MYF(0))))
            {
              my_error(ER_UNKNOWN_COLLATION, MYF(0), "ucs2_bin");
              MYSQL_YYABORT;
            }
          }
    break;

  case 784:

/* Line 1455 of yacc.c  */
#line 6301 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->charset=NULL; }
    break;

  case 787:

/* Line 1455 of yacc.c  */
#line 6304 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->charset=&my_charset_bin; }
    break;

  case 788:

/* Line 1455 of yacc.c  */
#line 6305 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->charset=(yyvsp[(2) - (3)].charset); }
    break;

  case 789:

/* Line 1455 of yacc.c  */
#line 6307 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->charset= NULL;
            Lex->type|= BINCMP_FLAG;
          }
    break;

  case 790:

/* Line 1455 of yacc.c  */
#line 6312 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->charset= (yyvsp[(3) - (3)].charset);
            Lex->type|= BINCMP_FLAG;
          }
    break;

  case 791:

/* Line 1455 of yacc.c  */
#line 6319 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { }
    break;

  case 792:

/* Line 1455 of yacc.c  */
#line 6320 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= BINCMP_FLAG; }
    break;

  case 795:

/* Line 1455 of yacc.c  */
#line 6335 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.table)=(yyvsp[(2) - (5)].table);
          }
    break;

  case 796:

/* Line 1455 of yacc.c  */
#line 6342 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ref_list.empty(); }
    break;

  case 798:

/* Line 1455 of yacc.c  */
#line 6348 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Key_part_spec *key= new Key_part_spec((yyvsp[(3) - (3)].lex_str), 0);
            if (key == NULL)
              MYSQL_YYABORT;
            Lex->ref_list.push_back(key);
          }
    break;

  case 799:

/* Line 1455 of yacc.c  */
#line 6355 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Key_part_spec *key= new Key_part_spec((yyvsp[(1) - (1)].lex_str), 0);
            if (key == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->ref_list.empty();
            lex->ref_list.push_back(key);
          }
    break;

  case 800:

/* Line 1455 of yacc.c  */
#line 6367 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_UNDEF; }
    break;

  case 801:

/* Line 1455 of yacc.c  */
#line 6369 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_FULL; }
    break;

  case 802:

/* Line 1455 of yacc.c  */
#line 6371 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_PARTIAL; }
    break;

  case 803:

/* Line 1455 of yacc.c  */
#line 6373 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_SIMPLE; }
    break;

  case 804:

/* Line 1455 of yacc.c  */
#line 6378 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= Foreign_key::FK_OPTION_UNDEF;
            lex->fk_delete_opt= Foreign_key::FK_OPTION_UNDEF;
          }
    break;

  case 805:

/* Line 1455 of yacc.c  */
#line 6384 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= (yyvsp[(3) - (3)].m_fk_option);
            lex->fk_delete_opt= Foreign_key::FK_OPTION_UNDEF;
          }
    break;

  case 806:

/* Line 1455 of yacc.c  */
#line 6390 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= Foreign_key::FK_OPTION_UNDEF;
            lex->fk_delete_opt= (yyvsp[(3) - (3)].m_fk_option);
          }
    break;

  case 807:

/* Line 1455 of yacc.c  */
#line 6397 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= (yyvsp[(3) - (6)].m_fk_option);
            lex->fk_delete_opt= (yyvsp[(6) - (6)].m_fk_option);
          }
    break;

  case 808:

/* Line 1455 of yacc.c  */
#line 6404 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= (yyvsp[(6) - (6)].m_fk_option);
            lex->fk_delete_opt= (yyvsp[(3) - (6)].m_fk_option);
          }
    break;

  case 809:

/* Line 1455 of yacc.c  */
#line 6412 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_RESTRICT; }
    break;

  case 810:

/* Line 1455 of yacc.c  */
#line 6413 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_CASCADE; }
    break;

  case 811:

/* Line 1455 of yacc.c  */
#line 6414 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_SET_NULL; }
    break;

  case 812:

/* Line 1455 of yacc.c  */
#line 6415 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_NO_ACTION; }
    break;

  case 813:

/* Line 1455 of yacc.c  */
#line 6416 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_DEFAULT;  }
    break;

  case 814:

/* Line 1455 of yacc.c  */
#line 6420 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::MULTIPLE; }
    break;

  case 815:

/* Line 1455 of yacc.c  */
#line 6424 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::PRIMARY; }
    break;

  case 816:

/* Line 1455 of yacc.c  */
#line 6425 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::UNIQUE; }
    break;

  case 817:

/* Line 1455 of yacc.c  */
#line 6429 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 818:

/* Line 1455 of yacc.c  */
#line 6430 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 819:

/* Line 1455 of yacc.c  */
#line 6434 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 821:

/* Line 1455 of yacc.c  */
#line 6439 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 822:

/* Line 1455 of yacc.c  */
#line 6440 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 823:

/* Line 1455 of yacc.c  */
#line 6441 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 824:

/* Line 1455 of yacc.c  */
#line 6445 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::MULTIPLE; }
    break;

  case 825:

/* Line 1455 of yacc.c  */
#line 6446 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::UNIQUE; }
    break;

  case 826:

/* Line 1455 of yacc.c  */
#line 6450 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::FULLTEXT;}
    break;

  case 827:

/* Line 1455 of yacc.c  */
#line 6455 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            (yyval.key_type)= Key::SPATIAL;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
    break;

  case 828:

/* Line 1455 of yacc.c  */
#line 6467 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->key_create_info= default_key_create_info;
          }
    break;

  case 831:

/* Line 1455 of yacc.c  */
#line 6484 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 833:

/* Line 1455 of yacc.c  */
#line 6489 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 835:

/* Line 1455 of yacc.c  */
#line 6494 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 843:

/* Line 1455 of yacc.c  */
#line 6514 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->key_create_info.algorithm= (yyvsp[(2) - (2)].key_alg); }
    break;

  case 844:

/* Line 1455 of yacc.c  */
#line 6515 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->key_create_info.algorithm= (yyvsp[(2) - (2)].key_alg); }
    break;

  case 845:

/* Line 1455 of yacc.c  */
#line 6520 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->key_create_info.block_size= (yyvsp[(3) - (3)].ulong_num); }
    break;

  case 846:

/* Line 1455 of yacc.c  */
#line 6521 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->key_create_info.comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 847:

/* Line 1455 of yacc.c  */
#line 6523 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            new (YYTHD->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), true, &Lex->option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 848:

/* Line 1455 of yacc.c  */
#line 6529 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            new (YYTHD->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), false, &Lex->option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 849:

/* Line 1455 of yacc.c  */
#line 6535 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            new (YYTHD->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].ulonglong_number), &Lex->option_list,
                                  &Lex->option_list_last, YYTHD->mem_root);
          }
    break;

  case 850:

/* Line 1455 of yacc.c  */
#line 6541 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            new (YYTHD->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), &Lex->option_list, &Lex->option_list_last);
          }
    break;

  case 855:

/* Line 1455 of yacc.c  */
#line 6559 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (plugin_is_ready(&(yyvsp[(3) - (3)].lex_str), MYSQL_FTPARSER_PLUGIN))
              Lex->key_create_info.parser_name= (yyvsp[(3) - (3)].lex_str);
            else
            {
              my_error(ER_FUNCTION_NOT_DEFINED, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 856:

/* Line 1455 of yacc.c  */
#line 6571 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_BTREE; }
    break;

  case 857:

/* Line 1455 of yacc.c  */
#line 6572 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_RTREE; }
    break;

  case 858:

/* Line 1455 of yacc.c  */
#line 6573 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_HASH; }
    break;

  case 859:

/* Line 1455 of yacc.c  */
#line 6577 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->col_list.push_back((yyvsp[(3) - (4)].key_part)); }
    break;

  case 860:

/* Line 1455 of yacc.c  */
#line 6578 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->col_list.push_back((yyvsp[(1) - (2)].key_part)); }
    break;

  case 861:

/* Line 1455 of yacc.c  */
#line 6583 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.key_part)= new Key_part_spec((yyvsp[(1) - (1)].lex_str), 0);
            if ((yyval.key_part) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 862:

/* Line 1455 of yacc.c  */
#line 6589 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            int key_part_len= atoi((yyvsp[(3) - (4)].lex_str).str);
            if (!key_part_len)
            {
              my_error(ER_KEY_PART_0, MYF(0), (yyvsp[(1) - (4)].lex_str).str);
            }
            (yyval.key_part)= new Key_part_spec((yyvsp[(1) - (4)].lex_str), (uint) key_part_len);
            if ((yyval.key_part) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 863:

/* Line 1455 of yacc.c  */
#line 6602 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 864:

/* Line 1455 of yacc.c  */
#line 6603 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 865:

/* Line 1455 of yacc.c  */
#line 6608 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
          LEX *lex= Lex;
          if (lex->check_exists && lex->sql_command != SQLCOM_ALTER_TABLE)
          {
            my_parse_error(ER(ER_SYNTAX_ERROR));
            MYSQL_YYABORT;
          }
          (yyval.lex_str)= (yyvsp[(2) - (2)].lex_str);
        }
    break;

  case 866:

/* Line 1455 of yacc.c  */
#line 6619 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 867:

/* Line 1455 of yacc.c  */
#line 6620 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 868:

/* Line 1455 of yacc.c  */
#line 6624 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->interval_list.push_back((yyvsp[(1) - (1)].string)); }
    break;

  case 869:

/* Line 1455 of yacc.c  */
#line 6625 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->interval_list.push_back((yyvsp[(3) - (3)].string)); }
    break;

  case 870:

/* Line 1455 of yacc.c  */
#line 6633 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->name.str= 0;
            lex->name.length= 0;
            lex->sql_command= SQLCOM_ALTER_TABLE;
            lex->duplicates= DUP_ERROR; 
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(4) - (4)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_READ_NO_INSERT,
                                                   MDL_SHARED_NO_WRITE))
              MYSQL_YYABORT;
            lex->col_list.empty();
            lex->select_lex.init_order();
            lex->select_lex.db= (lex->select_lex.table_list.first)->db;
            bzero((char*) &lex->create_info,sizeof(lex->create_info));
            lex->create_info.db_type= 0;
            lex->create_info.default_table_charset= NULL;
            lex->create_info.row_type= ROW_TYPE_NOT_USED;
            lex->alter_info.reset();
            lex->no_write_to_binlog= 0;
            lex->create_info.storage_media= HA_SM_DEFAULT;
            lex->create_last_non_select_table= lex->last_table();
            DBUG_ASSERT(!lex->m_stmt);
          }
    break;

  case 871:

/* Line 1455 of yacc.c  */
#line 6659 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            if (!lex->m_stmt)
            {
              /* Create a generic ALTER TABLE statment. */
              lex->m_stmt= new (thd->mem_root) Alter_table_statement(lex);
              if (lex->m_stmt == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 872:

/* Line 1455 of yacc.c  */
#line 6671 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.default_table_charset= NULL;
            Lex->create_info.used_fields= 0;
          }
    break;

  case 873:

/* Line 1455 of yacc.c  */
#line 6676 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_ALTER_DB;
            lex->name= (yyvsp[(3) - (5)].lex_str);
            if (lex->name.str == NULL &&
                lex->copy_db_to(&lex->name.str, &lex->name.length))
              MYSQL_YYABORT;
          }
    break;

  case 874:

/* Line 1455 of yacc.c  */
#line 6685 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "DATABASE");
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_ALTER_DB_UPGRADE;
            lex->name= (yyvsp[(3) - (7)].lex_str);
          }
    break;

  case 875:

/* Line 1455 of yacc.c  */
#line 6696 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }
            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
    break;

  case 876:

/* Line 1455 of yacc.c  */
#line 6707 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->sql_command= SQLCOM_ALTER_PROCEDURE;
            lex->spname= (yyvsp[(3) - (5)].spname);
          }
    break;

  case 877:

/* Line 1455 of yacc.c  */
#line 6714 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
    break;

  case 878:

/* Line 1455 of yacc.c  */
#line 6725 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->sql_command= SQLCOM_ALTER_FUNCTION;
            lex->spname= (yyvsp[(3) - (5)].spname);
          }
    break;

  case 879:

/* Line 1455 of yacc.c  */
#line 6732 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "ALTER VIEW");
              MYSQL_YYABORT;
            }
            lex->create_view_mode= VIEW_ALTER;
          }
    break;

  case 880:

/* Line 1455 of yacc.c  */
#line 6743 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 881:

/* Line 1455 of yacc.c  */
#line 6750 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "ALTER VIEW");
              MYSQL_YYABORT;
            }
            lex->create_view_algorithm= DTYPE_ALGORITHM_UNDEFINED;
            lex->create_view_mode= VIEW_ALTER;
          }
    break;

  case 882:

/* Line 1455 of yacc.c  */
#line 6762 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 883:

/* Line 1455 of yacc.c  */
#line 6764 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* 
              It is safe to use Lex->spname because
              ALTER EVENT xxx RENATE TO yyy DO ALTER EVENT RENAME TO
              is not allowed. Lex->spname is used in the case of RENAME TO
              If it had to be supported spname had to be added to
              Event_parse_data.
            */

            if (!(Lex->event_parse_data= Event_parse_data::new_instance(YYTHD)))
              MYSQL_YYABORT;
            Lex->event_parse_data->identifier= (yyvsp[(4) - (4)].spname);

            Lex->sql_command= SQLCOM_ALTER_EVENT;
          }
    break;

  case 884:

/* Line 1455 of yacc.c  */
#line 6784 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!((yyvsp[(6) - (10)].num) || (yyvsp[(7) - (10)].num) || (yyvsp[(8) - (10)].num) || (yyvsp[(9) - (10)].num) || (yyvsp[(10) - (10)].num)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            /*
              sql_command is set here because some rules in ev_sql_stmt
              can overwrite it
            */
            Lex->sql_command= SQLCOM_ALTER_EVENT;
          }
    break;

  case 885:

/* Line 1455 of yacc.c  */
#line 6797 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_TABLESPACE;
          }
    break;

  case 886:

/* Line 1455 of yacc.c  */
#line 6802 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_LOGFILE_GROUP;
          }
    break;

  case 887:

/* Line 1455 of yacc.c  */
#line 6807 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= CHANGE_FILE_TABLESPACE;
          }
    break;

  case 888:

/* Line 1455 of yacc.c  */
#line 6812 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_ACCESS_MODE_TABLESPACE;
          }
    break;

  case 889:

/* Line 1455 of yacc.c  */
#line 6817 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_ALTER_SERVER;
            lex->server_options.server_name= (yyvsp[(3) - (7)].lex_str).str;
            lex->server_options.server_name_length= (yyvsp[(3) - (7)].lex_str).length;
          }
    break;

  case 890:

/* Line 1455 of yacc.c  */
#line 6826 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 891:

/* Line 1455 of yacc.c  */
#line 6827 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 892:

/* Line 1455 of yacc.c  */
#line 6828 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 893:

/* Line 1455 of yacc.c  */
#line 6829 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 894:

/* Line 1455 of yacc.c  */
#line 6833 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 895:

/* Line 1455 of yacc.c  */
#line 6835 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              Use lex's spname to hold the new name.
              The original name is in the Event_parse_data object
            */
            Lex->spname= (yyvsp[(3) - (3)].spname); 
            (yyval.num)= 1;
          }
    break;

  case 896:

/* Line 1455 of yacc.c  */
#line 6846 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 897:

/* Line 1455 of yacc.c  */
#line 6847 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 898:

/* Line 1455 of yacc.c  */
#line 6851 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str).str= 0; (yyval.lex_str).length= 0; }
    break;

  case 899:

/* Line 1455 of yacc.c  */
#line 6852 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 901:

/* Line 1455 of yacc.c  */
#line 6857 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->alter_info.tablespace_op= DISCARD_TABLESPACE; }
    break;

  case 902:

/* Line 1455 of yacc.c  */
#line 6858 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->alter_info.tablespace_op= IMPORT_TABLESPACE; }
    break;

  case 908:

/* Line 1455 of yacc.c  */
#line 6875 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_DROP_PARTITION;
          }
    break;

  case 909:

/* Line 1455 of yacc.c  */
#line 6880 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_info.flags|= ALTER_REBUILD_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
          }
    break;

  case 910:

/* Line 1455 of yacc.c  */
#line 6887 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root)
                          Alter_table_optimize_partition_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 912:

/* Line 1455 of yacc.c  */
#line 6901 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root)
                          Alter_table_analyze_partition_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 913:

/* Line 1455 of yacc.c  */
#line 6913 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root)
                          Alter_table_check_partition_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 915:

/* Line 1455 of yacc.c  */
#line 6926 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root)
                          Alter_table_repair_partition_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 917:

/* Line 1455 of yacc.c  */
#line 6939 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_info.flags|= ALTER_COALESCE_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->alter_info.num_parts= (yyvsp[(4) - (4)].ulong_num);
          }
    break;

  case 918:

/* Line 1455 of yacc.c  */
#line 6946 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root)
                          Alter_table_truncate_partition_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 920:

/* Line 1455 of yacc.c  */
#line 6961 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_REMOVE_PARTITIONING;
          }
    break;

  case 921:

/* Line 1455 of yacc.c  */
#line 6968 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_ALL_PARTITION;
          }
    break;

  case 923:

/* Line 1455 of yacc.c  */
#line 6976 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info= new partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            lex->alter_info.flags|= ALTER_ADD_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(4) - (4)].num);
          }
    break;

  case 924:

/* Line 1455 of yacc.c  */
#line 6988 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 926:

/* Line 1455 of yacc.c  */
#line 6994 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info->num_parts= lex->part_info->partitions.elements;
          }
    break;

  case 927:

/* Line 1455 of yacc.c  */
#line 6999 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->part_info->num_parts= (yyvsp[(2) - (2)].ulong_num);
          }
    break;

  case 928:

/* Line 1455 of yacc.c  */
#line 7006 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info= new partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            lex->no_write_to_binlog= (yyvsp[(3) - (3)].num);
          }
    break;

  case 930:

/* Line 1455 of yacc.c  */
#line 7021 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_TABLE_REORG;
          }
    break;

  case 931:

/* Line 1455 of yacc.c  */
#line 7025 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_REORGANIZE_PARTITION;
          }
    break;

  case 932:

/* Line 1455 of yacc.c  */
#line 7029 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->num_parts= part_info->partitions.elements;
          }
    break;

  case 933:

/* Line 1455 of yacc.c  */
#line 7036 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 934:

/* Line 1455 of yacc.c  */
#line 7037 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 935:

/* Line 1455 of yacc.c  */
#line 7042 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->alter_info.partition_names.push_back((yyvsp[(1) - (1)].lex_str).str))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
          }
    break;

  case 938:

/* Line 1455 of yacc.c  */
#line 7062 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->change=0;
            lex->alter_info.flags|= ALTER_ADD_COLUMN;
          }
    break;

  case 939:

/* Line 1455 of yacc.c  */
#line 7071 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
          }
    break;

  case 940:

/* Line 1455 of yacc.c  */
#line 7075 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
            Lex->alter_info.flags|= ALTER_ADD_INDEX;
          }
    break;

  case 941:

/* Line 1455 of yacc.c  */
#line 7080 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_ADD_COLUMN | ALTER_ADD_INDEX;
          }
    break;

  case 942:

/* Line 1455 of yacc.c  */
#line 7084 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->change= (yyvsp[(4) - (4)].lex_str).str;
            lex->alter_info.flags|= ALTER_CHANGE_COLUMN;
            lex->option_list= NULL;
          }
    break;

  case 943:

/* Line 1455 of yacc.c  */
#line 7091 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
          }
    break;

  case 944:

/* Line 1455 of yacc.c  */
#line 7095 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->length=lex->dec=0; lex->type=0;
            lex->default_value= lex->on_update_value= 0;
            lex->comment=null_lex_str;
            lex->charset= NULL;
            lex->alter_info.flags|= ALTER_CHANGE_COLUMN;
	    lex->vcol_info= 0;
            lex->option_list= NULL;
          }
    break;

  case 945:

/* Line 1455 of yacc.c  */
#line 7106 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (add_field_to_list(lex->thd,&(yyvsp[(4) - (6)].lex_str),
                                  (enum enum_field_types) (yyvsp[(6) - (6)].num),
                                  lex->length,lex->dec,lex->type,
                                  lex->default_value, lex->on_update_value,
                                  &lex->comment,
                                  (yyvsp[(4) - (6)].lex_str).str, &lex->interval_list, lex->charset,
                                  lex->uint_geom_type,
                                  lex->vcol_info, lex->option_list))
              MYSQL_YYABORT;
          }
    break;

  case 946:

/* Line 1455 of yacc.c  */
#line 7119 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
          }
    break;

  case 947:

/* Line 1455 of yacc.c  */
#line 7123 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::COLUMN, (yyvsp[(4) - (5)].lex_str).str, (yyvsp[(3) - (5)].num));
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= ALTER_DROP_COLUMN;
          }
    break;

  case 948:

/* Line 1455 of yacc.c  */
#line 7132 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_DROP_INDEX | ALTER_FOREIGN_KEY;
          }
    break;

  case 949:

/* Line 1455 of yacc.c  */
#line 7136 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, primary_key_name,
                                           FALSE);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= ALTER_DROP_INDEX;
          }
    break;

  case 950:

/* Line 1455 of yacc.c  */
#line 7146 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, (yyvsp[(4) - (4)].lex_str).str, (yyvsp[(3) - (4)].num));
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= ALTER_DROP_INDEX;
          }
    break;

  case 951:

/* Line 1455 of yacc.c  */
#line 7155 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.keys_onoff= DISABLE;
            lex->alter_info.flags|= ALTER_KEYS_ONOFF;
          }
    break;

  case 952:

/* Line 1455 of yacc.c  */
#line 7161 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.keys_onoff= ENABLE;
            lex->alter_info.flags|= ALTER_KEYS_ONOFF;
          }
    break;

  case 953:

/* Line 1455 of yacc.c  */
#line 7167 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_column *ac= new Alter_column((yyvsp[(3) - (6)].lex_str).str,(yyvsp[(6) - (6)].item));
            if (ac == NULL)
              MYSQL_YYABORT;
            lex->alter_info.alter_list.push_back(ac);
            lex->alter_info.flags|= ALTER_CHANGE_COLUMN_DEFAULT;
          }
    break;

  case 954:

/* Line 1455 of yacc.c  */
#line 7176 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_column *ac= new Alter_column((yyvsp[(3) - (5)].lex_str).str, (Item*) 0);
            if (ac == NULL)
              MYSQL_YYABORT;
            lex->alter_info.alter_list.push_back(ac);
            lex->alter_info.flags|= ALTER_CHANGE_COLUMN_DEFAULT;
          }
    break;

  case 955:

/* Line 1455 of yacc.c  */
#line 7185 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            size_t dummy;
            lex->select_lex.db=(yyvsp[(3) - (3)].table)->db.str;
            if (lex->select_lex.db == NULL &&
                lex->copy_db_to(&lex->select_lex.db, &dummy))
            {
              MYSQL_YYABORT;
            }
            if (check_table_name((yyvsp[(3) - (3)].table)->table.str,(yyvsp[(3) - (3)].table)->table.length, FALSE) ||
                ((yyvsp[(3) - (3)].table)->db.str && check_db_name(&(yyvsp[(3) - (3)].table)->db)))
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(3) - (3)].table)->table.str);
              MYSQL_YYABORT;
            }
            lex->name= (yyvsp[(3) - (3)].table)->table;
            lex->alter_info.flags|= ALTER_RENAME;
          }
    break;

  case 956:

/* Line 1455 of yacc.c  */
#line 7204 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!(yyvsp[(4) - (5)].charset))
            {
              THD *thd= YYTHD;
              (yyvsp[(4) - (5)].charset)= thd->variables.collation_database;
            }
            (yyvsp[(5) - (5)].charset)= (yyvsp[(5) - (5)].charset) ? (yyvsp[(5) - (5)].charset) : (yyvsp[(4) - (5)].charset);
            if (!my_charset_same((yyvsp[(4) - (5)].charset),(yyvsp[(5) - (5)].charset)))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       (yyvsp[(5) - (5)].charset)->name, (yyvsp[(4) - (5)].charset)->csname);
              MYSQL_YYABORT;
            }
            LEX *lex= Lex;
            lex->create_info.table_charset=
            lex->create_info.default_table_charset= (yyvsp[(5) - (5)].charset);
            lex->create_info.used_fields|= (HA_CREATE_USED_CHARSET |
              HA_CREATE_USED_DEFAULT_CHARSET);
            lex->alter_info.flags|= ALTER_CONVERT;
          }
    break;

  case 957:

/* Line 1455 of yacc.c  */
#line 7225 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.flags|= ALTER_OPTIONS;
            if ((lex->create_info.used_fields & HA_CREATE_USED_ENGINE) &&
                !lex->create_info.db_type)
            {
              lex->create_info.used_fields&= ~HA_CREATE_USED_ENGINE;
            }
          }
    break;

  case 958:

/* Line 1455 of yacc.c  */
#line 7235 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_RECREATE;
          }
    break;

  case 959:

/* Line 1455 of yacc.c  */
#line 7239 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.flags|= ALTER_ORDER;
          }
    break;

  case 960:

/* Line 1455 of yacc.c  */
#line 7246 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 961:

/* Line 1455 of yacc.c  */
#line 7247 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 962:

/* Line 1455 of yacc.c  */
#line 7251 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ignore= 0;}
    break;

  case 963:

/* Line 1455 of yacc.c  */
#line 7252 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ignore= 1;}
    break;

  case 964:

/* Line 1455 of yacc.c  */
#line 7256 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ignore= Lex->online= 0;}
    break;

  case 970:

/* Line 1455 of yacc.c  */
#line 7270 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ignore= 1;}
    break;

  case 971:

/* Line 1455 of yacc.c  */
#line 7271 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->online= 1;}
    break;

  case 972:

/* Line 1455 of yacc.c  */
#line 7275 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->drop_mode= DROP_DEFAULT; }
    break;

  case 973:

/* Line 1455 of yacc.c  */
#line 7276 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->drop_mode= DROP_RESTRICT; }
    break;

  case 974:

/* Line 1455 of yacc.c  */
#line 7277 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->drop_mode= DROP_CASCADE; }
    break;

  case 975:

/* Line 1455 of yacc.c  */
#line 7281 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 976:

/* Line 1455 of yacc.c  */
#line 7282 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { store_position_for_column((yyvsp[(2) - (2)].lex_str).str); }
    break;

  case 977:

/* Line 1455 of yacc.c  */
#line 7283 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { store_position_for_column(first_keyword); }
    break;

  case 978:

/* Line 1455 of yacc.c  */
#line 7287 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 979:

/* Line 1455 of yacc.c  */
#line 7288 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 980:

/* Line 1455 of yacc.c  */
#line 7289 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 981:

/* Line 1455 of yacc.c  */
#line 7290 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 982:

/* Line 1455 of yacc.c  */
#line 7299 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_START;
            lex->type = 0;
            /* If you change this code don't forget to update SLAVE START too */
          }
    break;

  case 983:

/* Line 1455 of yacc.c  */
#line 7306 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 984:

/* Line 1455 of yacc.c  */
#line 7308 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_ALL_START;
            lex->type = 0;
          }
    break;

  case 985:

/* Line 1455 of yacc.c  */
#line 7313 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 986:

/* Line 1455 of yacc.c  */
#line 7315 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_STOP;
            lex->type = 0;
            /* If you change this code don't forget to update SLAVE STOP too */
          }
    break;

  case 987:

/* Line 1455 of yacc.c  */
#line 7322 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_ALL_STOP;
            lex->type = 0;
            /* If you change this code don't forget to update SLAVE STOP too */
          }
    break;

  case 988:

/* Line 1455 of yacc.c  */
#line 7329 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_START;
            lex->type = 0;
          }
    break;

  case 989:

/* Line 1455 of yacc.c  */
#line 7335 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 990:

/* Line 1455 of yacc.c  */
#line 7337 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_STOP;
            lex->type = 0;
          }
    break;

  case 991:

/* Line 1455 of yacc.c  */
#line 7346 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_BEGIN;
            /* READ ONLY and READ WRITE are mutually exclusive. */
            if (((yyvsp[(3) - (3)].num) & MYSQL_START_TRANS_OPT_READ_WRITE) &&
                ((yyvsp[(3) - (3)].num) & MYSQL_START_TRANS_OPT_READ_ONLY))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->start_transaction_opt= (yyvsp[(3) - (3)].num);
          }
    break;

  case 992:

/* Line 1455 of yacc.c  */
#line 7362 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= 0;
          }
    break;

  case 993:

/* Line 1455 of yacc.c  */
#line 7366 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= (yyvsp[(1) - (1)].num);
          }
    break;

  case 994:

/* Line 1455 of yacc.c  */
#line 7373 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= (yyvsp[(1) - (1)].num);
          }
    break;

  case 995:

/* Line 1455 of yacc.c  */
#line 7377 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= (yyvsp[(1) - (3)].num) | (yyvsp[(3) - (3)].num);
          }
    break;

  case 996:

/* Line 1455 of yacc.c  */
#line 7384 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_START_TRANS_OPT_WITH_CONS_SNAPSHOT;
          }
    break;

  case 997:

/* Line 1455 of yacc.c  */
#line 7388 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_START_TRANS_OPT_READ_ONLY;
          }
    break;

  case 998:

/* Line 1455 of yacc.c  */
#line 7392 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_START_TRANS_OPT_READ_WRITE;
          }
    break;

  case 999:

/* Line 1455 of yacc.c  */
#line 7398 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->slave_thd_opt= 0; }
    break;

  case 1000:

/* Line 1455 of yacc.c  */
#line 7400 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1003:

/* Line 1455 of yacc.c  */
#line 7409 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1004:

/* Line 1455 of yacc.c  */
#line 7410 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->slave_thd_opt|=SLAVE_SQL; }
    break;

  case 1005:

/* Line 1455 of yacc.c  */
#line 7411 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->slave_thd_opt|=SLAVE_IO; }
    break;

  case 1006:

/* Line 1455 of yacc.c  */
#line 7415 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1007:

/* Line 1455 of yacc.c  */
#line 7417 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (((lex->mi.log_file_name || lex->mi.pos) &&
                 (lex->mi.relay_log_name || lex->mi.relay_log_pos)) ||
                !((lex->mi.log_file_name && lex->mi.pos) ||
                  (lex->mi.relay_log_name && lex->mi.relay_log_pos)))
            {
               my_message(ER_BAD_SLAVE_UNTIL_COND,
                          ER(ER_BAD_SLAVE_UNTIL_COND), MYF(0));
               MYSQL_YYABORT;
            }
          }
    break;

  case 1008:

/* Line 1455 of yacc.c  */
#line 7430 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.gtid_pos_str = (yyvsp[(4) - (4)].lex_str);
          }
    break;

  case 1011:

/* Line 1455 of yacc.c  */
#line 7442 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_CHECKSUM;
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1012:

/* Line 1455 of yacc.c  */
#line 7449 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1013:

/* Line 1455 of yacc.c  */
#line 7453 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.flags= 0; }
    break;

  case 1014:

/* Line 1455 of yacc.c  */
#line 7454 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.flags= T_QUICK; }
    break;

  case 1015:

/* Line 1455 of yacc.c  */
#line 7455 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.flags= T_EXTEND; }
    break;

  case 1016:

/* Line 1455 of yacc.c  */
#line 7460 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_REPAIR;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1017:

/* Line 1455 of yacc.c  */
#line 7470 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root) Repair_table_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1018:

/* Line 1455 of yacc.c  */
#line 7481 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.flags = T_MEDIUM; }
    break;

  case 1019:

/* Line 1455 of yacc.c  */
#line 7482 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1020:

/* Line 1455 of yacc.c  */
#line 7486 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1021:

/* Line 1455 of yacc.c  */
#line 7487 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1022:

/* Line 1455 of yacc.c  */
#line 7491 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_QUICK; }
    break;

  case 1023:

/* Line 1455 of yacc.c  */
#line 7492 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_EXTEND; }
    break;

  case 1024:

/* Line 1455 of yacc.c  */
#line 7493 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.sql_flags|= TT_USEFRM; }
    break;

  case 1025:

/* Line 1455 of yacc.c  */
#line 7498 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_ANALYZE;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1026:

/* Line 1455 of yacc.c  */
#line 7508 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root) Analyze_table_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1030:

/* Line 1455 of yacc.c  */
#line 7529 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1031:

/* Line 1455 of yacc.c  */
#line 7531 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            THD *thd= YYTHD;
            thd->lex->with_persistent_for_clause= TRUE;
          }
    break;

  case 1032:

/* Line 1455 of yacc.c  */
#line 7539 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1033:

/* Line 1455 of yacc.c  */
#line 7541 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1034:

/* Line 1455 of yacc.c  */
#line 7544 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1035:

/* Line 1455 of yacc.c  */
#line 7546 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            lex->column_list= new List<LEX_STRING>;
            if (lex->column_list == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1037:

/* Line 1455 of yacc.c  */
#line 7558 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1038:

/* Line 1455 of yacc.c  */
#line 7560 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            lex->index_list= new List<LEX_STRING>;
            if (lex->index_list == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1040:

/* Line 1455 of yacc.c  */
#line 7573 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1041:

/* Line 1455 of yacc.c  */
#line 7575 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->column_list->push_back((LEX_STRING*)
            sql_memdup(&(yyvsp[(1) - (1)].lex_str), sizeof(LEX_STRING)));
          }
    break;

  case 1042:

/* Line 1455 of yacc.c  */
#line 7580 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->column_list->push_back((LEX_STRING*)
            sql_memdup(&(yyvsp[(3) - (3)].lex_str), sizeof(LEX_STRING)));
          }
    break;

  case 1043:

/* Line 1455 of yacc.c  */
#line 7588 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1046:

/* Line 1455 of yacc.c  */
#line 7595 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->index_list->push_back(
              (LEX_STRING*) sql_memdup(&(yyvsp[(1) - (1)].lex_str), sizeof(LEX_STRING)));
          }
    break;

  case 1047:

/* Line 1455 of yacc.c  */
#line 7601 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX_STRING str= {(char*) "PRIMARY", 7};
            Lex->index_list->push_back(
              (LEX_STRING*) sql_memdup(&str, sizeof(LEX_STRING)));
          }
    break;

  case 1048:

/* Line 1455 of yacc.c  */
#line 7610 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_BINLOG_BASE64_EVENT;
            Lex->comment= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 1049:

/* Line 1455 of yacc.c  */
#line 7618 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "CHECK");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_CHECK;
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1050:

/* Line 1455 of yacc.c  */
#line 7633 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root) Check_table_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1051:

/* Line 1455 of yacc.c  */
#line 7644 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.flags = T_MEDIUM; }
    break;

  case 1052:

/* Line 1455 of yacc.c  */
#line 7645 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1053:

/* Line 1455 of yacc.c  */
#line 7649 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1054:

/* Line 1455 of yacc.c  */
#line 7650 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1055:

/* Line 1455 of yacc.c  */
#line 7654 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_QUICK; }
    break;

  case 1056:

/* Line 1455 of yacc.c  */
#line 7655 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_FAST; }
    break;

  case 1057:

/* Line 1455 of yacc.c  */
#line 7656 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_MEDIUM; }
    break;

  case 1058:

/* Line 1455 of yacc.c  */
#line 7657 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_EXTEND; }
    break;

  case 1059:

/* Line 1455 of yacc.c  */
#line 7658 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_CHECK_ONLY_CHANGED; }
    break;

  case 1060:

/* Line 1455 of yacc.c  */
#line 7659 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.sql_flags|= TT_FOR_UPGRADE; }
    break;

  case 1061:

/* Line 1455 of yacc.c  */
#line 7664 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_OPTIMIZE;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1062:

/* Line 1455 of yacc.c  */
#line 7674 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root) Optimize_table_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1063:

/* Line 1455 of yacc.c  */
#line 7685 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1064:

/* Line 1455 of yacc.c  */
#line 7686 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1065:

/* Line 1455 of yacc.c  */
#line 7687 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1066:

/* Line 1455 of yacc.c  */
#line 7692 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_RENAME_TABLE;
          }
    break;

  case 1067:

/* Line 1455 of yacc.c  */
#line 7696 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1068:

/* Line 1455 of yacc.c  */
#line 7698 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_RENAME_USER;
          }
    break;

  case 1069:

/* Line 1455 of yacc.c  */
#line 7705 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (3)].lex_user)) || Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 1070:

/* Line 1455 of yacc.c  */
#line 7710 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (5)].lex_user)) || Lex->users_list.push_back((yyvsp[(5) - (5)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 1073:

/* Line 1455 of yacc.c  */
#line 7723 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            SELECT_LEX *sl= lex->current_select;
            if (!sl->add_table_to_list(lex->thd, (yyvsp[(1) - (3)].table),NULL,TL_OPTION_UPDATING,
                                       TL_IGNORE, MDL_EXCLUSIVE) ||
                !sl->add_table_to_list(lex->thd, (yyvsp[(3) - (3)].table),NULL,TL_OPTION_UPDATING,
                                       TL_IGNORE, MDL_EXCLUSIVE))
              MYSQL_YYABORT;
          }
    break;

  case 1074:

/* Line 1455 of yacc.c  */
#line 7736 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->alter_info.reset();
          }
    break;

  case 1075:

/* Line 1455 of yacc.c  */
#line 7740 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ASSIGN_TO_KEYCACHE;
            lex->ident= (yyvsp[(6) - (6)].lex_str);
          }
    break;

  case 1080:

/* Line 1455 of yacc.c  */
#line 7759 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (2)].table), NULL, 0, TL_READ,
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1081:

/* Line 1455 of yacc.c  */
#line 7769 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (3)].table), NULL, 0, TL_READ, 
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1082:

/* Line 1455 of yacc.c  */
#line 7778 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 1083:

/* Line 1455 of yacc.c  */
#line 7779 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str) = default_key_cache_base; }
    break;

  case 1084:

/* Line 1455 of yacc.c  */
#line 7784 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_PRELOAD_KEYS;
            lex->alter_info.reset();
          }
    break;

  case 1085:

/* Line 1455 of yacc.c  */
#line 7790 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1090:

/* Line 1455 of yacc.c  */
#line 7805 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (3)].table), NULL, (yyvsp[(3) - (3)].num), TL_READ,
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1091:

/* Line 1455 of yacc.c  */
#line 7815 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (4)].table), NULL, (yyvsp[(4) - (4)].num), TL_READ,
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1092:

/* Line 1455 of yacc.c  */
#line 7825 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_ADMIN_PARTITION;
          }
    break;

  case 1094:

/* Line 1455 of yacc.c  */
#line 7832 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->select_lex.alloc_index_hints(YYTHD);
            Select->set_index_hint_type(INDEX_HINT_USE, 
                                        INDEX_HINT_MASK_ALL);
          }
    break;

  case 1096:

/* Line 1455 of yacc.c  */
#line 7841 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { }
    break;

  case 1098:

/* Line 1455 of yacc.c  */
#line 7847 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1099:

/* Line 1455 of yacc.c  */
#line 7848 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= TL_OPTION_IGNORE_LEAVES; }
    break;

  case 1100:

/* Line 1455 of yacc.c  */
#line 7858 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SELECT;
          }
    break;

  case 1103:

/* Line 1455 of yacc.c  */
#line 7872 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (setup_select_in_parentheses(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1105:

/* Line 1455 of yacc.c  */
#line 7882 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (setup_select_in_parentheses(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1107:

/* Line 1455 of yacc.c  */
#line 7891 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX * sel= lex->current_select;
            if (lex->current_select->set_braces(0))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (sel->linkage == UNION_TYPE &&
                sel->master_unit()->first_select()->braces)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1109:

/* Line 1455 of yacc.c  */
#line 7910 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->linkage != UNION_TYPE)
              mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 1110:

/* Line 1455 of yacc.c  */
#line 7918 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1112:

/* Line 1455 of yacc.c  */
#line 7925 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1117:

/* Line 1455 of yacc.c  */
#line 7935 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->context.table_list=
              Select->context.first_name_resolution_table=
                Select->table_list.first;
          }
    break;

  case 1120:

/* Line 1455 of yacc.c  */
#line 7950 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Select->options & SELECT_DISTINCT && Select->options & SELECT_ALL)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "ALL", "DISTINCT");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1124:

/* Line 1455 of yacc.c  */
#line 7967 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* 
              Allow this flag only on the first top-level SELECT statement, if
              SQL_CACHE wasn't specified, and only once per query.
             */
            if (Lex->current_select != &Lex->select_lex)
            {
              my_error(ER_CANT_USE_OPTION_HERE, MYF(0), "SQL_NO_CACHE");
              MYSQL_YYABORT;
            }
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_CACHE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "SQL_CACHE", "SQL_NO_CACHE");
              MYSQL_YYABORT;
            }
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_NO_CACHE)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "SQL_NO_CACHE");
              MYSQL_YYABORT;
            }
            else
            {
              Lex->safe_to_cache_query=0;
              Lex->select_lex.options&= ~OPTION_TO_QUERY_CACHE;
              Lex->select_lex.sql_cache= SELECT_LEX::SQL_NO_CACHE;
            }
          }
    break;

  case 1125:

/* Line 1455 of yacc.c  */
#line 7995 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* 
              Allow this flag only on the first top-level SELECT statement, if
              SQL_NO_CACHE wasn't specified, and only once per query.
             */
            if (Lex->current_select != &Lex->select_lex)
            {
              my_error(ER_CANT_USE_OPTION_HERE, MYF(0), "SQL_CACHE");
              MYSQL_YYABORT;
            }         
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_NO_CACHE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "SQL_NO_CACHE", "SQL_CACHE");
              MYSQL_YYABORT;
            }
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_CACHE)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "SQL_CACHE");
              MYSQL_YYABORT;
            }
            else
            {
              Lex->safe_to_cache_query=1;
              Lex->select_lex.options|= OPTION_TO_QUERY_CACHE;
              Lex->select_lex.sql_cache= SELECT_LEX::SQL_CACHE;
            }
          }
    break;

  case 1127:

/* Line 1455 of yacc.c  */
#line 8027 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->current_select->set_lock_for_tables(TL_WRITE);
            lex->safe_to_cache_query=0;
          }
    break;

  case 1128:

/* Line 1455 of yacc.c  */
#line 8033 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->current_select->
              set_lock_for_tables(TL_READ_WITH_SHARED_LOCKS);
            lex->safe_to_cache_query=0;
          }
    break;

  case 1131:

/* Line 1455 of yacc.c  */
#line 8045 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *item= new (thd->mem_root)
                          Item_field(&thd->lex->current_select->context,
                                     NULL, NULL, "*");
            if (item == NULL)
              MYSQL_YYABORT;
            if (add_item_to_list(thd, item))
              MYSQL_YYABORT;
            (thd->lex->current_select->with_wild)++;
          }
    break;

  case 1132:

/* Line 1455 of yacc.c  */
#line 8060 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (add_item_to_list(thd, (yyvsp[(2) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1133:

/* Line 1455 of yacc.c  */
#line 8067 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            DBUG_ASSERT((yyvsp[(1) - (4)].simple_string) < (yyvsp[(3) - (4)].simple_string));

            if (add_item_to_list(thd, (yyvsp[(2) - (4)].item)))
              MYSQL_YYABORT;
            if ((yyvsp[(4) - (4)].lex_str).str)
            {
              if (Lex->sql_command == SQLCOM_CREATE_VIEW &&
                  check_column_name((yyvsp[(4) - (4)].lex_str).str))
              {
                my_error(ER_WRONG_COLUMN_NAME, MYF(0), (yyvsp[(4) - (4)].lex_str).str);
                MYSQL_YYABORT;
              }
              (yyvsp[(2) - (4)].item)->is_autogenerated_name= FALSE;
              (yyvsp[(2) - (4)].item)->set_name((yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length, system_charset_info);
            }
            else if (!(yyvsp[(2) - (4)].item)->name)
            {
              (yyvsp[(2) - (4)].item)->set_name((yyvsp[(1) - (4)].simple_string), (uint) ((yyvsp[(3) - (4)].simple_string) - (yyvsp[(1) - (4)].simple_string)), thd->charset());
            }
          }
    break;

  case 1134:

/* Line 1455 of yacc.c  */
#line 8092 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.simple_string)= (char*) YYLIP->get_cpp_tok_start();
          }
    break;

  case 1135:

/* Line 1455 of yacc.c  */
#line 8098 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.simple_string)= (char*) YYLIP->get_cpp_tok_end();
          }
    break;

  case 1136:

/* Line 1455 of yacc.c  */
#line 8104 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)=null_lex_str;}
    break;

  case 1137:

/* Line 1455 of yacc.c  */
#line 8105 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str); }
    break;

  case 1138:

/* Line 1455 of yacc.c  */
#line 8106 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str); }
    break;

  case 1139:

/* Line 1455 of yacc.c  */
#line 8107 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1140:

/* Line 1455 of yacc.c  */
#line 8108 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1141:

/* Line 1455 of yacc.c  */
#line 8112 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= NOT_FIXED_DEC;  }
    break;

  case 1142:

/* Line 1455 of yacc.c  */
#line 8113 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= NOT_FIXED_DEC;  }
    break;

  case 1143:

/* Line 1455 of yacc.c  */
#line 8114 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(2) - (3)].ulong_num); }
    break;

  case 1144:

/* Line 1455 of yacc.c  */
#line 8118 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0;  }
    break;

  case 1145:

/* Line 1455 of yacc.c  */
#line 8119 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0;  }
    break;

  case 1146:

/* Line 1455 of yacc.c  */
#line 8120 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(2) - (3)].ulong_num); }
    break;

  case 1147:

/* Line 1455 of yacc.c  */
#line 8124 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1148:

/* Line 1455 of yacc.c  */
#line 8125 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1149:

/* Line 1455 of yacc.c  */
#line 8131 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              Design notes:
              Do not use a manually maintained stack like thd->lex->xxx_list,
              but use the internal bison stack ($$, $1 and $3) instead.
              Using the bison stack is:
              - more robust to changes in the grammar,
              - guaranteed to be in sync with the parser state,
              - better for performances (no memory allocation).
            */
            Item_cond_or *item1;
            Item_cond_or *item3;
            if (is_cond_or((yyvsp[(1) - (3)].item)))
            {
              item1= (Item_cond_or*) (yyvsp[(1) - (3)].item);
              if (is_cond_or((yyvsp[(3) - (3)].item)))
              {
                item3= (Item_cond_or*) (yyvsp[(3) - (3)].item);
                /*
                  (X1 OR X2) OR (Y1 OR Y2) ==> OR (X1, X2, Y1, Y2)
                */
                item3->add_at_head(item1->argument_list());
                (yyval.item) = (yyvsp[(3) - (3)].item);
              }
              else
              {
                /*
                  (X1 OR X2) OR Y ==> OR (X1, X2, Y)
                */
                item1->add((yyvsp[(3) - (3)].item));
                (yyval.item) = (yyvsp[(1) - (3)].item);
              }
            }
            else if (is_cond_or((yyvsp[(3) - (3)].item)))
            {
              item3= (Item_cond_or*) (yyvsp[(3) - (3)].item);
              /*
                X OR (Y1 OR Y2) ==> OR (X, Y1, Y2)
              */
              item3->add_at_head((yyvsp[(1) - (3)].item));
              (yyval.item) = (yyvsp[(3) - (3)].item);
            }
            else
            {
              /* X OR Y */
              (yyval.item) = new (YYTHD->mem_root) Item_cond_or((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1150:

/* Line 1455 of yacc.c  */
#line 8182 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* XOR is a proprietary extension */
            (yyval.item) = new (YYTHD->mem_root) Item_func_xor((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1151:

/* Line 1455 of yacc.c  */
#line 8189 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* See comments in rule expr: expr or expr */
            Item_cond_and *item1;
            Item_cond_and *item3;
            if (is_cond_and((yyvsp[(1) - (3)].item)))
            {
              item1= (Item_cond_and*) (yyvsp[(1) - (3)].item);
              if (is_cond_and((yyvsp[(3) - (3)].item)))
              {
                item3= (Item_cond_and*) (yyvsp[(3) - (3)].item);
                /*
                  (X1 AND X2) AND (Y1 AND Y2) ==> AND (X1, X2, Y1, Y2)
                */
                item3->add_at_head(item1->argument_list());
                (yyval.item) = (yyvsp[(3) - (3)].item);
              }
              else
              {
                /*
                  (X1 AND X2) AND Y ==> AND (X1, X2, Y)
                */
                item1->add((yyvsp[(3) - (3)].item));
                (yyval.item) = (yyvsp[(1) - (3)].item);
              }
            }
            else if (is_cond_and((yyvsp[(3) - (3)].item)))
            {
              item3= (Item_cond_and*) (yyvsp[(3) - (3)].item);
              /*
                X AND (Y1 AND Y2) ==> AND (X, Y1, Y2)
              */
              item3->add_at_head((yyvsp[(1) - (3)].item));
              (yyval.item) = (yyvsp[(3) - (3)].item);
            }
            else
            {
              /* X AND Y */
              (yyval.item) = new (YYTHD->mem_root) Item_cond_and((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1152:

/* Line 1455 of yacc.c  */
#line 8232 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= negate_expression(YYTHD, (yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1153:

/* Line 1455 of yacc.c  */
#line 8238 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_istrue((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1154:

/* Line 1455 of yacc.c  */
#line 8244 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnottrue((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1155:

/* Line 1455 of yacc.c  */
#line 8250 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isfalse((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1156:

/* Line 1455 of yacc.c  */
#line 8256 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnotfalse((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1157:

/* Line 1455 of yacc.c  */
#line 8262 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnull((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1158:

/* Line 1455 of yacc.c  */
#line 8268 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnotnull((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1160:

/* Line 1455 of yacc.c  */
#line 8278 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnull((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1161:

/* Line 1455 of yacc.c  */
#line 8284 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnotnull((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1162:

/* Line 1455 of yacc.c  */
#line 8290 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_equal((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1163:

/* Line 1455 of yacc.c  */
#line 8296 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= (*(yyvsp[(2) - (3)].boolfunc2creator))(0)->create((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1164:

/* Line 1455 of yacc.c  */
#line 8302 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= all_any_subquery_creator((yyvsp[(1) - (6)].item), (yyvsp[(2) - (6)].boolfunc2creator), (yyvsp[(3) - (6)].num), (yyvsp[(5) - (6)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1166:

/* Line 1455 of yacc.c  */
#line 8312 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_in_subselect((yyvsp[(1) - (5)].item), (yyvsp[(4) - (5)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1167:

/* Line 1455 of yacc.c  */
#line 8318 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *item= new (thd->mem_root) Item_in_subselect((yyvsp[(1) - (6)].item), (yyvsp[(5) - (6)].select_lex));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= negate_expression(thd, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1168:

/* Line 1455 of yacc.c  */
#line 8328 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= handle_sql2003_note184_exception(YYTHD, (yyvsp[(1) - (5)].item), true, (yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1169:

/* Line 1455 of yacc.c  */
#line 8334 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            (yyvsp[(6) - (7)].item_list)->push_front((yyvsp[(4) - (7)].item));
            (yyvsp[(6) - (7)].item_list)->push_front((yyvsp[(1) - (7)].item));
            (yyval.item)= new (YYTHD->mem_root) Item_func_in(*(yyvsp[(6) - (7)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1170:

/* Line 1455 of yacc.c  */
#line 8342 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= handle_sql2003_note184_exception(YYTHD, (yyvsp[(1) - (6)].item), false, (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1171:

/* Line 1455 of yacc.c  */
#line 8348 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(5) - (8)].item));
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(1) - (8)].item));
            Item_func_in *item = new (YYTHD->mem_root) Item_func_in(*(yyvsp[(7) - (8)].item_list));
            if (item == NULL)
              MYSQL_YYABORT;
            item->negate();
            (yyval.item)= item;
          }
    break;

  case 1172:

/* Line 1455 of yacc.c  */
#line 8358 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_between((yyvsp[(1) - (5)].item),(yyvsp[(3) - (5)].item),(yyvsp[(5) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1173:

/* Line 1455 of yacc.c  */
#line 8364 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item_func_between *item;
            item= new (YYTHD->mem_root) Item_func_between((yyvsp[(1) - (6)].item),(yyvsp[(4) - (6)].item),(yyvsp[(6) - (6)].item));
            if (item == NULL)
              MYSQL_YYABORT;
            item->negate();
            (yyval.item)= item;
          }
    break;

  case 1174:

/* Line 1455 of yacc.c  */
#line 8373 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item *item1= new (YYTHD->mem_root) Item_func_soundex((yyvsp[(1) - (4)].item));
            Item *item4= new (YYTHD->mem_root) Item_func_soundex((yyvsp[(4) - (4)].item));
            if ((item1 == NULL) || (item4 == NULL))
              MYSQL_YYABORT;
            (yyval.item)= new (YYTHD->mem_root) Item_func_eq(item1, item4);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1175:

/* Line 1455 of yacc.c  */
#line 8383 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_like((yyvsp[(1) - (4)].item),(yyvsp[(3) - (4)].item),(yyvsp[(4) - (4)].item),Lex->escape_used);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1176:

/* Line 1455 of yacc.c  */
#line 8389 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_func_like((yyvsp[(1) - (5)].item),(yyvsp[(4) - (5)].item),(yyvsp[(5) - (5)].item),
                                                             Lex->escape_used);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (YYTHD->mem_root) Item_func_not(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1177:

/* Line 1455 of yacc.c  */
#line 8399 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_regex((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1178:

/* Line 1455 of yacc.c  */
#line 8405 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_func_regex((yyvsp[(1) - (4)].item),(yyvsp[(4) - (4)].item));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= negate_expression(YYTHD, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1180:

/* Line 1455 of yacc.c  */
#line 8418 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_or((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1181:

/* Line 1455 of yacc.c  */
#line 8424 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_and((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1182:

/* Line 1455 of yacc.c  */
#line 8430 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_shift_left((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1183:

/* Line 1455 of yacc.c  */
#line 8436 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_shift_right((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1184:

/* Line 1455 of yacc.c  */
#line 8442 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_plus((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1185:

/* Line 1455 of yacc.c  */
#line 8448 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_minus((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1186:

/* Line 1455 of yacc.c  */
#line 8454 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(1) - (5)].item),(yyvsp[(4) - (5)].item),(yyvsp[(5) - (5)].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1187:

/* Line 1455 of yacc.c  */
#line 8460 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(1) - (5)].item),(yyvsp[(4) - (5)].item),(yyvsp[(5) - (5)].interval),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1188:

/* Line 1455 of yacc.c  */
#line 8466 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_mul((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1189:

/* Line 1455 of yacc.c  */
#line 8472 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_div((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1190:

/* Line 1455 of yacc.c  */
#line 8478 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_mod((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1191:

/* Line 1455 of yacc.c  */
#line 8484 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_int_div((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1192:

/* Line 1455 of yacc.c  */
#line 8490 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_mod((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1193:

/* Line 1455 of yacc.c  */
#line 8496 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_xor((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1203:

/* Line 1455 of yacc.c  */
#line 8525 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_eq_creator; }
    break;

  case 1204:

/* Line 1455 of yacc.c  */
#line 8526 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_ge_creator; }
    break;

  case 1205:

/* Line 1455 of yacc.c  */
#line 8527 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_gt_creator; }
    break;

  case 1206:

/* Line 1455 of yacc.c  */
#line 8528 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_le_creator; }
    break;

  case 1207:

/* Line 1455 of yacc.c  */
#line 8529 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_lt_creator; }
    break;

  case 1208:

/* Line 1455 of yacc.c  */
#line 8530 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_ne_creator; }
    break;

  case 1209:

/* Line 1455 of yacc.c  */
#line 8534 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num) = 1; }
    break;

  case 1210:

/* Line 1455 of yacc.c  */
#line 8535 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1211:

/* Line 1455 of yacc.c  */
#line 8540 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
	    (yyval.num)= DYN_COL_NULL; /* automatic type */
            lex->charset= NULL;
            lex->length= lex->dec= 0;
	  }
    break;

  case 1212:

/* Line 1455 of yacc.c  */
#line 8546 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(2) - (2)].num); }
    break;

  case 1213:

/* Line 1455 of yacc.c  */
#line 8551 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_INT;
            lex->charset= NULL;
            lex->length= lex->dec= 0;
          }
    break;

  case 1214:

/* Line 1455 of yacc.c  */
#line 8558 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_UINT;
            lex->charset= NULL;
            lex->length= lex->dec= 0;
          }
    break;

  case 1215:

/* Line 1455 of yacc.c  */
#line 8565 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_DOUBLE;
            lex->charset= NULL;
            lex->length= lex->dec= 0;
          }
    break;

  case 1216:

/* Line 1455 of yacc.c  */
#line 8572 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_DOUBLE;
            lex->charset= NULL;
            lex->length= lex->dec= 0;
          }
    break;

  case 1217:

/* Line 1455 of yacc.c  */
#line 8579 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_DOUBLE;
            lex->charset= NULL;
            lex->length= lex->dec= 0;
          }
    break;

  case 1218:

/* Line 1455 of yacc.c  */
#line 8586 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= DYN_COL_DECIMAL;
            Lex->charset= NULL;
          }
    break;

  case 1219:

/* Line 1455 of yacc.c  */
#line 8591 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_STRING;
            lex->length= lex->dec= 0;
          }
    break;

  case 1220:

/* Line 1455 of yacc.c  */
#line 8597 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_STRING;
            lex->charset= national_charset_info;
            lex->length= lex->dec= 0;
          }
    break;

  case 1221:

/* Line 1455 of yacc.c  */
#line 8604 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_DATE;
            lex->charset= NULL;
            lex->length= lex->dec= 0;
          }
    break;

  case 1222:

/* Line 1455 of yacc.c  */
#line 8611 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_TIME;
            lex->charset= NULL;
            lex->dec= lex->length;
            lex->length= 0;
          }
    break;

  case 1223:

/* Line 1455 of yacc.c  */
#line 8619 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_DATETIME;
            lex->charset= NULL;
            lex->dec= lex->length;
            lex->length= 0;
          }
    break;

  case 1224:

/* Line 1455 of yacc.c  */
#line 8630 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
     LEX *lex= Lex;
     (yyval.dyncol_def)= (DYNCALL_CREATE_DEF *)
       alloc_root(YYTHD->mem_root, sizeof(DYNCALL_CREATE_DEF));
     if ((yyval.dyncol_def) == NULL)
       MYSQL_YYABORT;
     (yyval.dyncol_def)->key= (yyvsp[(1) - (4)].item);
     (yyval.dyncol_def)->value= (yyvsp[(3) - (4)].item);
     (yyval.dyncol_def)->type= (DYNAMIC_COLUMN_TYPE)(yyvsp[(4) - (4)].num);
     (yyval.dyncol_def)->cs= lex->charset;
     if (lex->length)
       (yyval.dyncol_def)->len= strtoul(lex->length, NULL, 10);
     else
       (yyval.dyncol_def)->len= 0;
     if (lex->dec)
       (yyval.dyncol_def)->frac= strtoul(lex->dec, NULL, 10);
     else
       (yyval.dyncol_def)->len= 0;
   }
    break;

  case 1225:

/* Line 1455 of yacc.c  */
#line 8652 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
         (yyval.dyncol_def_list)= new (YYTHD->mem_root) List<DYNCALL_CREATE_DEF>;
         if ((yyval.dyncol_def_list) == NULL)
           MYSQL_YYABORT;
         (yyval.dyncol_def_list)->push_back((yyvsp[(1) - (1)].dyncol_def));
       }
    break;

  case 1226:

/* Line 1455 of yacc.c  */
#line 8659 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
         (yyvsp[(1) - (3)].dyncol_def_list)->push_back((yyvsp[(3) - (3)].dyncol_def));
         (yyval.dyncol_def_list)= (yyvsp[(1) - (3)].dyncol_def_list);
       }
    break;

  case 1232:

/* Line 1455 of yacc.c  */
#line 8672 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *i1= new (thd->mem_root) Item_string((yyvsp[(3) - (3)].lex_str).str,
                                                      (yyvsp[(3) - (3)].lex_str).length,
                                                      thd->charset());
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_set_collation((yyvsp[(1) - (3)].item), i1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1237:

/* Line 1455 of yacc.c  */
#line 8688 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_concat((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1238:

/* Line 1455 of yacc.c  */
#line 8694 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= (yyvsp[(2) - (2)].item);
          }
    break;

  case 1239:

/* Line 1455 of yacc.c  */
#line 8698 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_neg((yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1240:

/* Line 1455 of yacc.c  */
#line 8704 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_neg((yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1241:

/* Line 1455 of yacc.c  */
#line 8710 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= negate_expression(YYTHD, (yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1242:

/* Line 1455 of yacc.c  */
#line 8716 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            (yyval.item)= new (YYTHD->mem_root) Item_singlerow_subselect((yyvsp[(2) - (3)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1243:

/* Line 1455 of yacc.c  */
#line 8722 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(2) - (3)].item); }
    break;

  case 1244:

/* Line 1455 of yacc.c  */
#line 8724 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyvsp[(4) - (5)].item_list)->push_front((yyvsp[(2) - (5)].item));
            (yyval.item)= new (YYTHD->mem_root) Item_row(*(yyvsp[(4) - (5)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1245:

/* Line 1455 of yacc.c  */
#line 8731 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyvsp[(5) - (6)].item_list)->push_front((yyvsp[(3) - (6)].item));
            (yyval.item)= new (YYTHD->mem_root) Item_row(*(yyvsp[(5) - (6)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1246:

/* Line 1455 of yacc.c  */
#line 8738 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_exists_subselect((yyvsp[(3) - (4)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1247:

/* Line 1455 of yacc.c  */
#line 8744 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(3) - (4)].item); }
    break;

  case 1248:

/* Line 1455 of yacc.c  */
#line 8746 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyvsp[(2) - (7)].item_list)->push_front((yyvsp[(5) - (7)].item));
            Item_func_match *i1= new (YYTHD->mem_root) Item_func_match(*(yyvsp[(2) - (7)].item_list), (yyvsp[(6) - (7)].num));
            if (i1 == NULL)
              MYSQL_YYABORT;
            Select->add_ftfunc_to_list(i1);
            (yyval.item)= i1;
          }
    break;

  case 1249:

/* Line 1455 of yacc.c  */
#line 8755 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= create_func_cast(YYTHD, (yyvsp[(2) - (2)].item), ITEM_CAST_CHAR, NULL, NULL,
                                 &my_charset_bin);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1250:

/* Line 1455 of yacc.c  */
#line 8762 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.item)= create_func_cast(YYTHD, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].cast_type), lex->length, lex->dec,
                                 lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1251:

/* Line 1455 of yacc.c  */
#line 8770 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_case(* (yyvsp[(3) - (5)].item_list), (yyvsp[(2) - (5)].item), (yyvsp[(4) - (5)].item) );
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1252:

/* Line 1455 of yacc.c  */
#line 8776 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= create_func_cast(YYTHD, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].cast_type), Lex->length, Lex->dec,
                                 Lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1253:

/* Line 1455 of yacc.c  */
#line 8783 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_conv_charset((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].charset));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1254:

/* Line 1455 of yacc.c  */
#line 8789 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if ((yyvsp[(3) - (4)].item)->is_splocal())
            {
              Item_splocal *il= static_cast<Item_splocal *>((yyvsp[(3) - (4)].item));

              my_error(ER_WRONG_COLUMN_NAME, MYF(0), il->my_name()->str);
              MYSQL_YYABORT;
            }
            (yyval.item)= new (YYTHD->mem_root) Item_default_value(Lex->current_context(),
                                                         (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1255:

/* Line 1455 of yacc.c  */
#line 8803 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_insert_value(Lex->current_context(),
                                                        (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1256:

/* Line 1455 of yacc.c  */
#line 8811 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(5) - (5)].item),(yyvsp[(2) - (5)].item),(yyvsp[(3) - (5)].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1257:

/* Line 1455 of yacc.c  */
#line 8826 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_char(*(yyvsp[(3) - (4)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1258:

/* Line 1455 of yacc.c  */
#line 8832 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_char(*(yyvsp[(3) - (6)].item_list), (yyvsp[(5) - (6)].charset));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1259:

/* Line 1455 of yacc.c  */
#line 8838 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_current_user(Lex->current_context());
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query= 0;
          }
    break;

  case 1260:

/* Line 1455 of yacc.c  */
#line 8846 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_typecast((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1261:

/* Line 1455 of yacc.c  */
#line 8852 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_dayofmonth((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1262:

/* Line 1455 of yacc.c  */
#line 8858 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_hour((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1263:

/* Line 1455 of yacc.c  */
#line 8864 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_insert((yyvsp[(3) - (10)].item),(yyvsp[(5) - (10)].item),(yyvsp[(7) - (10)].item),(yyvsp[(9) - (10)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1264:

/* Line 1455 of yacc.c  */
#line 8870 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            List<Item> *list= new (thd->mem_root) List<Item>;
            if (list == NULL)
              MYSQL_YYABORT;
            list->push_front((yyvsp[(5) - (6)].item));
            list->push_front((yyvsp[(3) - (6)].item));
            Item_row *item= new (thd->mem_root) Item_row(*list);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_interval(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1265:

/* Line 1455 of yacc.c  */
#line 8885 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(5) - (8)].item));
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(3) - (8)].item));
            Item_row *item= new (thd->mem_root) Item_row(*(yyvsp[(7) - (8)].item_list));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_interval(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1266:

/* Line 1455 of yacc.c  */
#line 8897 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_left((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1267:

/* Line 1455 of yacc.c  */
#line 8903 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_minute((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1268:

/* Line 1455 of yacc.c  */
#line 8909 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_month((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1269:

/* Line 1455 of yacc.c  */
#line 8915 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_right((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1270:

/* Line 1455 of yacc.c  */
#line 8921 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_second((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1271:

/* Line 1455 of yacc.c  */
#line 8927 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_time_typecast((yyvsp[(3) - (4)].item), AUTO_SEC_PART_DIGITS);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1272:

/* Line 1455 of yacc.c  */
#line 8933 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_datetime_typecast((yyvsp[(3) - (4)].item), AUTO_SEC_PART_DIGITS);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1273:

/* Line 1455 of yacc.c  */
#line 8939 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_add_time((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item), 1, 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1274:

/* Line 1455 of yacc.c  */
#line 8945 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1275:

/* Line 1455 of yacc.c  */
#line 8951 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_ltrim((yyvsp[(6) - (7)].item),(yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1276:

/* Line 1455 of yacc.c  */
#line 8957 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_rtrim((yyvsp[(6) - (7)].item),(yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1277:

/* Line 1455 of yacc.c  */
#line 8963 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(6) - (7)].item),(yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1278:

/* Line 1455 of yacc.c  */
#line 8969 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_ltrim((yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1279:

/* Line 1455 of yacc.c  */
#line 8975 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_rtrim((yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1280:

/* Line 1455 of yacc.c  */
#line 8981 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1281:

/* Line 1455 of yacc.c  */
#line 8987 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(5) - (6)].item),(yyvsp[(3) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1282:

/* Line 1455 of yacc.c  */
#line 8993 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_user();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1283:

/* Line 1455 of yacc.c  */
#line 9001 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_year((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1284:

/* Line 1455 of yacc.c  */
#line 9022 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                                             INTERVAL_DAY, 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1285:

/* Line 1455 of yacc.c  */
#line 9029 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item), (yyvsp[(6) - (8)].item), (yyvsp[(7) - (8)].interval), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1286:

/* Line 1455 of yacc.c  */
#line 9035 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curdate_local();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1287:

/* Line 1455 of yacc.c  */
#line 9042 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curtime_local((yyvsp[(2) - (2)].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1288:

/* Line 1455 of yacc.c  */
#line 9050 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item),(yyvsp[(6) - (8)].item),(yyvsp[(7) - (8)].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1289:

/* Line 1455 of yacc.c  */
#line 9057 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item),(yyvsp[(6) - (8)].item),(yyvsp[(7) - (8)].interval),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1290:

/* Line 1455 of yacc.c  */
#line 9063 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_extract( (yyvsp[(3) - (6)].interval), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1291:

/* Line 1455 of yacc.c  */
#line 9069 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_get_format((yyvsp[(3) - (6)].date_time_type), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1292:

/* Line 1455 of yacc.c  */
#line 9075 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_now_local((yyvsp[(2) - (2)].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1293:

/* Line 1455 of yacc.c  */
#line 9082 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_func_locate((yyvsp[(5) - (6)].item),(yyvsp[(3) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1294:

/* Line 1455 of yacc.c  */
#line 9088 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                                             INTERVAL_DAY, 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1295:

/* Line 1455 of yacc.c  */
#line 9095 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item), (yyvsp[(6) - (8)].item), (yyvsp[(7) - (8)].interval), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1296:

/* Line 1455 of yacc.c  */
#line 9101 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1297:

/* Line 1455 of yacc.c  */
#line 9107 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1298:

/* Line 1455 of yacc.c  */
#line 9113 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1299:

/* Line 1455 of yacc.c  */
#line 9119 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1300:

/* Line 1455 of yacc.c  */
#line 9125 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              Unlike other time-related functions, SYSDATE() is
              replication-unsafe because it is not affected by the
              TIMESTAMP variable.  It is unsafe even if
              sysdate_is_now=1, because the slave may have
              sysdate_is_now=0.
            */
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            if (global_system_variables.sysdate_is_now == 0)
              (yyval.item)= new (YYTHD->mem_root) Item_func_sysdate_local((yyvsp[(2) - (2)].num));
            else
              (yyval.item)= new (YYTHD->mem_root) Item_func_now_local((yyvsp[(2) - (2)].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1301:

/* Line 1455 of yacc.c  */
#line 9143 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(7) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(3) - (8)].interval_time_st),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1302:

/* Line 1455 of yacc.c  */
#line 9149 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_timestamp_diff((yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item),(yyvsp[(3) - (8)].interval_time_st));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1303:

/* Line 1455 of yacc.c  */
#line 9155 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curdate_utc();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1304:

/* Line 1455 of yacc.c  */
#line 9162 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curtime_utc((yyvsp[(2) - (2)].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1305:

/* Line 1455 of yacc.c  */
#line 9169 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_now_utc((yyvsp[(2) - (2)].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1306:

/* Line 1455 of yacc.c  */
#line 9177 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= create_func_dyncol_add(YYTHD, (yyvsp[(3) - (6)].item), *(yyvsp[(5) - (6)].dyncol_def_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1307:

/* Line 1455 of yacc.c  */
#line 9184 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= create_func_dyncol_delete(YYTHD, (yyvsp[(3) - (6)].item), *(yyvsp[(5) - (6)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1308:

/* Line 1455 of yacc.c  */
#line 9191 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_dyncol_check((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1309:

/* Line 1455 of yacc.c  */
#line 9198 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= create_func_dyncol_create(YYTHD, *(yyvsp[(3) - (4)].dyncol_def_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1310:

/* Line 1455 of yacc.c  */
#line 9205 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.item)= create_func_dyncol_get(YYTHD, (yyvsp[(3) - (8)].item), (yyvsp[(5) - (8)].item), (yyvsp[(7) - (8)].cast_type),
                                        lex->length, lex->dec,
                                        lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1311:

/* Line 1455 of yacc.c  */
#line 9222 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_ascii((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1312:

/* Line 1455 of yacc.c  */
#line 9228 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_charset((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1313:

/* Line 1455 of yacc.c  */
#line 9234 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_coalesce(* (yyvsp[(3) - (4)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1314:

/* Line 1455 of yacc.c  */
#line 9240 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_collation((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1315:

/* Line 1455 of yacc.c  */
#line 9246 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_database();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1316:

/* Line 1455 of yacc.c  */
#line 9253 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_if((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1317:

/* Line 1455 of yacc.c  */
#line 9259 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_last_value(* (yyvsp[(3) - (4)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1318:

/* Line 1455 of yacc.c  */
#line 9265 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_microsecond((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1319:

/* Line 1455 of yacc.c  */
#line 9271 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_func_mod((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1320:

/* Line 1455 of yacc.c  */
#line 9277 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)=  new (YYTHD->mem_root) Item_func_old_password((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1321:

/* Line 1455 of yacc.c  */
#line 9283 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item* i1;
            if (thd->variables.old_passwords)
              i1= new (thd->mem_root) Item_func_old_password((yyvsp[(3) - (4)].item));
            else
              i1= new (thd->mem_root) Item_func_password((yyvsp[(3) - (4)].item));
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= i1;
          }
    break;

  case 1322:

/* Line 1455 of yacc.c  */
#line 9295 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_func_quarter((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1323:

/* Line 1455 of yacc.c  */
#line 9301 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_repeat((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1324:

/* Line 1455 of yacc.c  */
#line 9307 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_replace((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1325:

/* Line 1455 of yacc.c  */
#line 9313 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_round((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1326:

/* Line 1455 of yacc.c  */
#line 9319 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *i1= new (thd->mem_root) Item_int((char*) "0",
                                           thd->variables.default_week_format,
                                                   1);
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_week((yyvsp[(3) - (4)].item), i1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1327:

/* Line 1455 of yacc.c  */
#line 9331 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_week((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1328:

/* Line 1455 of yacc.c  */
#line 9337 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            (yyval.item)= (yyvsp[(1) - (1)].item);
            /* $1 may be NULL, GEOM_NEW not tested for out of memory */
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
    break;

  case 1329:

/* Line 1455 of yacc.c  */
#line 9353 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_rel((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                               Item_func::SP_CONTAINS_FUNC));
          }
    break;

  case 1330:

/* Line 1455 of yacc.c  */
#line 9359 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_geometrycollection,
                           Geometry::wkb_point));
          }
    break;

  case 1331:

/* Line 1455 of yacc.c  */
#line 9366 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_linestring,
                           Geometry::wkb_point));
          }
    break;

  case 1332:

/* Line 1455 of yacc.c  */
#line 9373 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multilinestring,
                           Geometry::wkb_linestring));
          }
    break;

  case 1333:

/* Line 1455 of yacc.c  */
#line 9380 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multipoint,
                           Geometry::wkb_point));
          }
    break;

  case 1334:

/* Line 1455 of yacc.c  */
#line 9387 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multipolygon,
                           Geometry::wkb_polygon));
          }
    break;

  case 1335:

/* Line 1455 of yacc.c  */
#line 9394 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD, Item_func_point((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item)));
          }
    break;

  case 1336:

/* Line 1455 of yacc.c  */
#line 9398 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_polygon,
                           Geometry::wkb_linestring));
          }
    break;

  case 1337:

/* Line 1455 of yacc.c  */
#line 9417 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
#ifdef HAVE_DLOPEN
            udf_func *udf= 0;
            LEX *lex= Lex;
            if (using_udf_functions &&
                (udf= find_udf((yyvsp[(1) - (2)].lex_str).str, (yyvsp[(1) - (2)].lex_str).length)) &&
                udf->type == UDFTYPE_AGGREGATE)
            {
              if (lex->current_select->inc_in_sum_expr())
              {
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
            }
            /* Temporary placing the result of find_udf in $3 */
            (yyval.udf)= udf;
#endif
          }
    break;

  case 1338:

/* Line 1455 of yacc.c  */
#line 9436 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Create_func *builder;
            Item *item= NULL;

            if (check_routine_name(&(yyvsp[(1) - (5)].lex_str)))
            {
              MYSQL_YYABORT;
            }

            /*
              Implementation note:
              names are resolved with the following order:
              - MySQL native functions,
              - User Defined Functions,
              - Stored Functions (assuming the current <use> database)

              This will be revised with WL#2128 (SQL PATH)
            */
            builder= find_native_function_builder(thd, (yyvsp[(1) - (5)].lex_str));
            if (builder)
            {
              item= builder->create_func(thd, (yyvsp[(1) - (5)].lex_str), (yyvsp[(4) - (5)].item_list));
            }
            else
            {
#ifdef HAVE_DLOPEN
              /* Retrieving the result of find_udf */
              udf_func *udf= (yyvsp[(3) - (5)].udf);

              if (udf)
              {
                if (udf->type == UDFTYPE_AGGREGATE)
                {
                  Select->in_sum_expr--;
                }

                item= Create_udf_func::s_singleton.create(thd, udf, (yyvsp[(4) - (5)].item_list));
              }
              else
#endif
              {
                builder= find_qualified_function_builder(thd);
                DBUG_ASSERT(builder);
                item= builder->create_func(thd, (yyvsp[(1) - (5)].lex_str), (yyvsp[(4) - (5)].item_list));
              }
            }

            if (! ((yyval.item)= item))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1339:

/* Line 1455 of yacc.c  */
#line 9490 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Create_qfunc *builder;
            Item *item= NULL;

            /*
              The following in practice calls:
              <code>Create_sp_func::create()</code>
              and builds a stored function.

              However, it's important to maintain the interface between the
              parser and the implementation in item_create.cc clean,
              since this will change with WL#2128 (SQL PATH):
              - INFORMATION_SCHEMA.version() is the SQL 99 syntax for the native
              function version(),
              - MySQL.version() is the SQL 2003 syntax for the native function
              version() (a vendor can specify any schema).
            */

            if (!(yyvsp[(1) - (6)].lex_str).str || check_db_name(&(yyvsp[(1) - (6)].lex_str)))
            {
              my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[(1) - (6)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (check_routine_name(&(yyvsp[(3) - (6)].lex_str)))
            {
              MYSQL_YYABORT;
            }

            builder= find_qualified_function_builder(thd);
            DBUG_ASSERT(builder);
            item= builder->create_with_db(thd, (yyvsp[(1) - (6)].lex_str), (yyvsp[(3) - (6)].lex_str), true, (yyvsp[(5) - (6)].item_list));

            if (! ((yyval.item)= item))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1340:

/* Line 1455 of yacc.c  */
#line 9532 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(1) - (2)].num) | (yyvsp[(2) - (2)].num); }
    break;

  case 1341:

/* Line 1455 of yacc.c  */
#line 9534 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= FT_BOOL; }
    break;

  case 1342:

/* Line 1455 of yacc.c  */
#line 9538 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= FT_NL; }
    break;

  case 1343:

/* Line 1455 of yacc.c  */
#line 9539 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= FT_NL; }
    break;

  case 1344:

/* Line 1455 of yacc.c  */
#line 9543 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0;         }
    break;

  case 1345:

/* Line 1455 of yacc.c  */
#line 9544 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= FT_EXPAND; }
    break;

  case 1346:

/* Line 1455 of yacc.c  */
#line 9548 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item_list)= NULL; }
    break;

  case 1347:

/* Line 1455 of yacc.c  */
#line 9549 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list); }
    break;

  case 1348:

/* Line 1455 of yacc.c  */
#line 9554 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new (YYTHD->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 1349:

/* Line 1455 of yacc.c  */
#line 9561 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item));
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1350:

/* Line 1455 of yacc.c  */
#line 9569 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
             Use Item::name as a storage for the attribute value of user
             defined function argument. It is safe to use Item::name
             because the syntax will not allow having an explicit name here.
             See WL#1017 re. udf attributes.
            */
            if ((yyvsp[(4) - (4)].lex_str).str)
            {
              (yyvsp[(2) - (4)].item)->is_autogenerated_name= FALSE;
              (yyvsp[(2) - (4)].item)->set_name((yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length, system_charset_info);
            }
            /* 
               A field has to have its proper name in order for name
               resolution to work, something we are only guaranteed if we
               parse it out. If we hijack the input stream with
               remember_name we may get quoted or escaped names.
            */
            else if ((yyvsp[(2) - (4)].item)->type() != Item::FIELD_ITEM)
              (yyvsp[(2) - (4)].item)->set_name((yyvsp[(1) - (4)].simple_string), (uint) ((yyvsp[(3) - (4)].simple_string) - (yyvsp[(1) - (4)].simple_string)), YYTHD->charset());
            (yyval.item)= (yyvsp[(2) - (4)].item);
          }
    break;

  case 1351:

/* Line 1455 of yacc.c  */
#line 9595 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_avg((yyvsp[(3) - (4)].item), FALSE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1352:

/* Line 1455 of yacc.c  */
#line 9601 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_avg((yyvsp[(4) - (5)].item), TRUE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1353:

/* Line 1455 of yacc.c  */
#line 9607 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_and((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1354:

/* Line 1455 of yacc.c  */
#line 9613 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_or((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1355:

/* Line 1455 of yacc.c  */
#line 9619 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_xor((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1356:

/* Line 1455 of yacc.c  */
#line 9625 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_int((int32) 0L,1);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (YYTHD->mem_root) Item_sum_count(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1357:

/* Line 1455 of yacc.c  */
#line 9634 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_count((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1358:

/* Line 1455 of yacc.c  */
#line 9640 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->in_sum_expr++; }
    break;

  case 1359:

/* Line 1455 of yacc.c  */
#line 9642 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->in_sum_expr--; }
    break;

  case 1360:

/* Line 1455 of yacc.c  */
#line 9644 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_count(* (yyvsp[(5) - (7)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1361:

/* Line 1455 of yacc.c  */
#line 9650 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_min((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1362:

/* Line 1455 of yacc.c  */
#line 9661 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_min((yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1363:

/* Line 1455 of yacc.c  */
#line 9667 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_max((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1364:

/* Line 1455 of yacc.c  */
#line 9673 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_max((yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1365:

/* Line 1455 of yacc.c  */
#line 9679 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_std((yyvsp[(3) - (4)].item), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1366:

/* Line 1455 of yacc.c  */
#line 9685 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_variance((yyvsp[(3) - (4)].item), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1367:

/* Line 1455 of yacc.c  */
#line 9691 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_std((yyvsp[(3) - (4)].item), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1368:

/* Line 1455 of yacc.c  */
#line 9697 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_variance((yyvsp[(3) - (4)].item), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1369:

/* Line 1455 of yacc.c  */
#line 9703 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_sum((yyvsp[(3) - (4)].item), FALSE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1370:

/* Line 1455 of yacc.c  */
#line 9709 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_sum((yyvsp[(4) - (5)].item), TRUE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1371:

/* Line 1455 of yacc.c  */
#line 9715 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->in_sum_expr++; }
    break;

  case 1372:

/* Line 1455 of yacc.c  */
#line 9719 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->in_sum_expr--;
            (yyval.item)= new (YYTHD->mem_root)
                  Item_func_group_concat(Lex->current_context(), (yyvsp[(3) - (8)].num), (yyvsp[(5) - (8)].item_list),
                                         sel->gorder_list, (yyvsp[(7) - (8)].string));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            (yyvsp[(5) - (8)].item_list)->empty();
          }
    break;

  case 1373:

/* Line 1455 of yacc.c  */
#line 9733 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (! Lex->parsing_options.allows_variable)
            {
              my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1374:

/* Line 1455 of yacc.c  */
#line 9741 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= (yyvsp[(3) - (3)].item);
          }
    break;

  case 1375:

/* Line 1455 of yacc.c  */
#line 9748 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item_func_set_user_var *item;
            (yyval.item)= item= new (YYTHD->mem_root) Item_func_set_user_var((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_RAND);
            lex->set_var_list.push_back(item);
          }
    break;

  case 1376:

/* Line 1455 of yacc.c  */
#line 9758 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_get_user_var((yyvsp[(1) - (1)].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_RAND);
          }
    break;

  case 1377:

/* Line 1455 of yacc.c  */
#line 9766 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* disallow "SELECT @@global.global.variable" */
            if ((yyvsp[(3) - (4)].lex_str).str && (yyvsp[(4) - (4)].lex_str).str && check_reserved_words(&(yyvsp[(3) - (4)].lex_str)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (!((yyval.item)= get_system_var(YYTHD, (yyvsp[(2) - (4)].var_type), (yyvsp[(3) - (4)].lex_str), (yyvsp[(4) - (4)].lex_str))))
              MYSQL_YYABORT;
            if (!((Item_func_get_system_var*) (yyval.item))->is_written_to_binlog())
              Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_VARIABLE);
          }
    break;

  case 1378:

/* Line 1455 of yacc.c  */
#line 9781 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1379:

/* Line 1455 of yacc.c  */
#line 9782 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num) = 1; }
    break;

  case 1380:

/* Line 1455 of yacc.c  */
#line 9787 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.string)= new (YYTHD->mem_root) String(",", 1, &my_charset_latin1);
            if ((yyval.string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1381:

/* Line 1455 of yacc.c  */
#line 9792 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.string) = (yyvsp[(2) - (2)].string); }
    break;

  case 1382:

/* Line 1455 of yacc.c  */
#line 9797 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->gorder_list = NULL;
          }
    break;

  case 1383:

/* Line 1455 of yacc.c  */
#line 9801 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            SELECT_LEX *select= Select;
            select->gorder_list= new (YYTHD->mem_root)
                                   SQL_I_List<ORDER>(select->order_list);
            if (select->gorder_list == NULL)
              MYSQL_YYABORT;
            select->order_list.empty();
          }
    break;

  case 1384:

/* Line 1455 of yacc.c  */
#line 9813 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->current_select->inc_in_sum_expr())
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1385:

/* Line 1455 of yacc.c  */
#line 9822 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->in_sum_expr--;
            (yyval.item)= (yyvsp[(3) - (3)].item);
          }
    break;

  case 1386:

/* Line 1455 of yacc.c  */
#line 9830 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->charset= &my_charset_bin; Lex->dec= 0; }
    break;

  case 1387:

/* Line 1455 of yacc.c  */
#line 9832 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->dec= 0; }
    break;

  case 1388:

/* Line 1455 of yacc.c  */
#line 9834 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->charset= national_charset_info; Lex->dec=0; }
    break;

  case 1389:

/* Line 1455 of yacc.c  */
#line 9836 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_SIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1390:

/* Line 1455 of yacc.c  */
#line 9838 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_SIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1391:

/* Line 1455 of yacc.c  */
#line 9840 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_SIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1392:

/* Line 1455 of yacc.c  */
#line 9842 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_UNSIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1393:

/* Line 1455 of yacc.c  */
#line 9844 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_UNSIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1394:

/* Line 1455 of yacc.c  */
#line 9846 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_DATE; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1395:

/* Line 1455 of yacc.c  */
#line 9848 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.cast_type)=ITEM_CAST_TIME;
            LEX *lex= Lex;
            lex->charset= NULL; lex->dec= lex->length; lex->length= (char*)0;
           }
    break;

  case 1396:

/* Line 1455 of yacc.c  */
#line 9854 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.cast_type)=ITEM_CAST_DATETIME;
            LEX *lex= Lex;
            lex->charset= NULL; lex->dec= lex->length; lex->length= (char*)0;
           }
    break;

  case 1397:

/* Line 1455 of yacc.c  */
#line 9860 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_DECIMAL; Lex->charset= NULL; }
    break;

  case 1398:

/* Line 1455 of yacc.c  */
#line 9862 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->charset= NULL; Lex->length= Lex->dec= 0;}
    break;

  case 1399:

/* Line 1455 of yacc.c  */
#line 9864 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_DOUBLE; }
    break;

  case 1400:

/* Line 1455 of yacc.c  */
#line 9867 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item_list)= NULL; }
    break;

  case 1401:

/* Line 1455 of yacc.c  */
#line 9868 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list);}
    break;

  case 1402:

/* Line 1455 of yacc.c  */
#line 9873 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new (YYTHD->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 1403:

/* Line 1455 of yacc.c  */
#line 9880 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item));
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1404:

/* Line 1455 of yacc.c  */
#line 9887 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list); }
    break;

  case 1405:

/* Line 1455 of yacc.c  */
#line 9888 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(2) - (3)].item_list); }
    break;

  case 1406:

/* Line 1455 of yacc.c  */
#line 9893 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new (YYTHD->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 1407:

/* Line 1455 of yacc.c  */
#line 9900 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item));
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1408:

/* Line 1455 of yacc.c  */
#line 9907 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)= NULL; }
    break;

  case 1409:

/* Line 1455 of yacc.c  */
#line 9908 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 1410:

/* Line 1455 of yacc.c  */
#line 9912 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)= NULL; }
    break;

  case 1411:

/* Line 1455 of yacc.c  */
#line 9913 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(2) - (2)].item); }
    break;

  case 1412:

/* Line 1455 of yacc.c  */
#line 9918 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(2) - (4)].item));
            (yyval.item_list)->push_back((yyvsp[(4) - (4)].item));
          }
    break;

  case 1413:

/* Line 1455 of yacc.c  */
#line 9926 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (5)].item_list)->push_back((yyvsp[(3) - (5)].item));
            (yyvsp[(1) - (5)].item_list)->push_back((yyvsp[(5) - (5)].item));
            (yyval.item_list)= (yyvsp[(1) - (5)].item_list);
          }
    break;

  case 1414:

/* Line 1455 of yacc.c  */
#line 9936 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1415:

/* Line 1455 of yacc.c  */
#line 9938 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->nest_last_join(lex->thd)))
              MYSQL_YYABORT;
          }
    break;

  case 1416:

/* Line 1455 of yacc.c  */
#line 9946 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { MYSQL_YYABORT_UNLESS((yyval.table_list)=(yyvsp[(1) - (1)].table_list)); }
    break;

  case 1417:

/* Line 1455 of yacc.c  */
#line 9957 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1418:

/* Line 1455 of yacc.c  */
#line 9958 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(3) - (4)].table_list); }
    break;

  case 1419:

/* Line 1455 of yacc.c  */
#line 9964 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1420:

/* Line 1455 of yacc.c  */
#line 9966 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].table_list) && ((yyval.table_list)=(yyvsp[(3) - (3)].table_list)));
          }
    break;

  case 1421:

/* Line 1455 of yacc.c  */
#line 9986 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].table_list) && ((yyval.table_list)=(yyvsp[(3) - (3)].table_list))); (yyvsp[(3) - (3)].table_list)->straight=(yyvsp[(2) - (3)].num); }
    break;

  case 1422:

/* Line 1455 of yacc.c  */
#line 9989 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && (yyvsp[(3) - (4)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (4)].table_list), (yyvsp[(3) - (4)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1423:

/* Line 1455 of yacc.c  */
#line 9997 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
	    (yyvsp[(3) - (6)].table_list)->straight=(yyvsp[(2) - (6)].num);
            add_join_on((yyvsp[(3) - (6)].table_list),(yyvsp[(6) - (6)].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1424:

/* Line 1455 of yacc.c  */
#line 10005 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && (yyvsp[(3) - (4)].table_list));
          }
    break;

  case 1425:

/* Line 1455 of yacc.c  */
#line 10009 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
	    (yyvsp[(3) - (8)].table_list)->straight=(yyvsp[(2) - (8)].num);
            add_join_natural((yyvsp[(1) - (8)].table_list),(yyvsp[(3) - (8)].table_list),(yyvsp[(7) - (8)].string_list),Select); 
	    (yyval.table_list)=(yyvsp[(3) - (8)].table_list); 
          }
    break;

  case 1426:

/* Line 1455 of yacc.c  */
#line 10015 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && ((yyval.table_list)=(yyvsp[(4) - (4)].table_list)));
	    (yyvsp[(4) - (4)].table_list)->straight=(yyvsp[(3) - (4)].num);
            add_join_natural((yyvsp[(1) - (4)].table_list),(yyvsp[(4) - (4)].table_list),NULL,Select);
          }
    break;

  case 1427:

/* Line 1455 of yacc.c  */
#line 10024 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(5) - (6)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (6)].table_list), (yyvsp[(5) - (6)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1428:

/* Line 1455 of yacc.c  */
#line 10032 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            add_join_on((yyvsp[(5) - (8)].table_list),(yyvsp[(8) - (8)].item));
            Lex->pop_context();
            (yyvsp[(5) - (8)].table_list)->outer_join|=JOIN_TYPE_LEFT;
            (yyval.table_list)=(yyvsp[(5) - (8)].table_list);
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1429:

/* Line 1455 of yacc.c  */
#line 10040 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].table_list) && (yyvsp[(5) - (5)].table_list));
          }
    break;

  case 1430:

/* Line 1455 of yacc.c  */
#line 10044 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            add_join_natural((yyvsp[(1) - (10)].table_list),(yyvsp[(5) - (10)].table_list),(yyvsp[(9) - (10)].string_list),Select); 
            (yyvsp[(5) - (10)].table_list)->outer_join|=JOIN_TYPE_LEFT; 
            (yyval.table_list)=(yyvsp[(5) - (10)].table_list); 
          }
    break;

  case 1431:

/* Line 1455 of yacc.c  */
#line 10050 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(6) - (6)].table_list));
            add_join_natural((yyvsp[(1) - (6)].table_list),(yyvsp[(6) - (6)].table_list),NULL,Select);
            (yyvsp[(6) - (6)].table_list)->outer_join|=JOIN_TYPE_LEFT;
            (yyval.table_list)=(yyvsp[(6) - (6)].table_list);
          }
    break;

  case 1432:

/* Line 1455 of yacc.c  */
#line 10060 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(5) - (6)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (6)].table_list), (yyvsp[(5) - (6)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1433:

/* Line 1455 of yacc.c  */
#line 10068 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
            add_join_on((yyval.table_list), (yyvsp[(8) - (8)].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1434:

/* Line 1455 of yacc.c  */
#line 10077 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].table_list) && (yyvsp[(5) - (5)].table_list));
          }
    break;

  case 1435:

/* Line 1455 of yacc.c  */
#line 10081 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
            add_join_natural((yyval.table_list),(yyvsp[(5) - (10)].table_list),(yyvsp[(9) - (10)].string_list),Select);
          }
    break;

  case 1436:

/* Line 1455 of yacc.c  */
#line 10088 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(6) - (6)].table_list));
            add_join_natural((yyvsp[(6) - (6)].table_list),(yyvsp[(1) - (6)].table_list),NULL,Select);
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
          }
    break;

  case 1437:

/* Line 1455 of yacc.c  */
#line 10099 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1438:

/* Line 1455 of yacc.c  */
#line 10100 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1439:

/* Line 1455 of yacc.c  */
#line 10101 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num) = 1; }
    break;

  case 1440:

/* Line 1455 of yacc.c  */
#line 10105 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num) = (yyvsp[(1) - (1)].num); }
    break;

  case 1441:

/* Line 1455 of yacc.c  */
#line 10106 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1442:

/* Line 1455 of yacc.c  */
#line 10118 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->table_join_options= 0;
          }
    break;

  case 1443:

/* Line 1455 of yacc.c  */
#line 10123 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!((yyval.table_list)= Select->add_table_to_list(YYTHD, (yyvsp[(2) - (4)].table), (yyvsp[(3) - (4)].lex_str_ptr),
                                                Select->get_table_join_options(),
                                                YYPS->m_lock_type,
                                                YYPS->m_mdl_type,
                                                Select->pop_index_hints())))
              MYSQL_YYABORT;
            Select->add_joined_table((yyval.table_list));
          }
    break;

  case 1444:

/* Line 1455 of yacc.c  */
#line 10133 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if ((yyvsp[(1) - (3)].num))
            {
              if (sel->set_braces(1))
              {
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
              /* select in braces, can't contain global parameters */
              if (sel->master_unit()->fake_select_lex)
                sel->master_unit()->global_parameters=
                   sel->master_unit()->fake_select_lex;
            }
            if ((yyvsp[(2) - (3)].select_lex)->init_nested_join(lex->thd))
              MYSQL_YYABORT;
            (yyval.table_list)= 0;
            /* incomplete derived tables return NULL, we must be
               nested in select_derived rule to be here. */
          }
    break;

  case 1445:

/* Line 1455 of yacc.c  */
#line 10173 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* Use $2 instead of Lex->current_select as derived table will
               alter value of Lex->current_select. */
            if (!((yyvsp[(3) - (5)].table_list) || (yyvsp[(5) - (5)].lex_str_ptr)) && (yyvsp[(2) - (5)].select_lex)->embedding &&
                !(yyvsp[(2) - (5)].select_lex)->embedding->nested_join->join_list.elements)
            {
              /* we have a derived table ($3 == NULL) but no alias,
                 Since we are nested in further parentheses so we
                 can pass NULL to the outer level parentheses
                 Permits parsing of "((((select ...))) as xyz)" */
              (yyval.table_list)= 0;
            }
            else if (!(yyvsp[(3) - (5)].table_list))
            {
              /* Handle case of derived table, alias may be NULL if there
                 are no outer parentheses, add_table_to_list() will throw
                 error in this case */
              LEX *lex=Lex;
              SELECT_LEX *sel= lex->current_select;
              SELECT_LEX_UNIT *unit= sel->master_unit();
              lex->current_select= sel= unit->outer_select();
              Table_ident *ti= new Table_ident(unit);
              if (ti == NULL)
                MYSQL_YYABORT;
              if (!((yyval.table_list)= sel->add_table_to_list(lex->thd,
                                               new Table_ident(unit), (yyvsp[(5) - (5)].lex_str_ptr), 0,
                                               TL_READ, MDL_SHARED_READ)))

                MYSQL_YYABORT;
              sel->add_joined_table((yyval.table_list));
              lex->pop_context();
              lex->nest_level--;
            }
            else if (((yyvsp[(3) - (5)].table_list)->select_lex &&
                      (yyvsp[(3) - (5)].table_list)->select_lex->master_unit()->is_union() &&
                      ((yyvsp[(3) - (5)].table_list)->select_lex->master_unit()->first_select() ==
                       (yyvsp[(3) - (5)].table_list)->select_lex || !(yyvsp[(3) - (5)].table_list)->lifted)) || (yyvsp[(5) - (5)].lex_str_ptr))
            {
              /* simple nested joins cannot have aliases or unions */
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            else
            {
              /* nested join: FROM (t1 JOIN t2 ...),
                 nest_level is the same as in the outer query */
              (yyval.table_list)= (yyvsp[(3) - (5)].table_list);
            }
          }
    break;

  case 1447:

/* Line 1455 of yacc.c  */
#line 10229 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_select_to_union_list(Lex, (bool)(yyvsp[(3) - (3)].num), FALSE))
              MYSQL_YYABORT;
          }
    break;

  case 1448:

/* Line 1455 of yacc.c  */
#line 10234 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              Remove from the name resolution context stack the context of the
              last select in the union.
             */
            Lex->pop_context();
          }
    break;

  case 1450:

/* Line 1455 of yacc.c  */
#line 10247 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX * sel= lex->current_select;
            if (lex->current_select->set_braces(0))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (sel->linkage == UNION_TYPE &&
                sel->master_unit()->first_select()->braces)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1451:

/* Line 1455 of yacc.c  */
#line 10266 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->linkage != UNION_TYPE)
              mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 1452:

/* Line 1455 of yacc.c  */
#line 10274 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1454:

/* Line 1455 of yacc.c  */
#line 10283 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if ((yyvsp[(1) - (1)].select_lex)->init_nested_join(lex->thd))
              MYSQL_YYABORT;
          }
    break;

  case 1455:

/* Line 1455 of yacc.c  */
#line 10289 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            /* for normal joins, $3 != NULL and end_nested_join() != NULL,
               for derived tables, both must equal NULL */

            if (!((yyval.table_list)= (yyvsp[(1) - (3)].select_lex)->end_nested_join(lex->thd)) && (yyvsp[(3) - (3)].table_list))
              MYSQL_YYABORT;
            if (!(yyvsp[(3) - (3)].table_list) && (yyval.table_list))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1456:

/* Line 1455 of yacc.c  */
#line 10305 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->derived_tables|= DERIVED_SUBQUERY;
            if (!lex->expr_allows_subselect ||
                lex->sql_command == (int)SQLCOM_PURGE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE ||
                mysql_new_select(lex, 1))
              MYSQL_YYABORT;
            mysql_init_select(lex);
            lex->current_select->linkage= DERIVED_TABLE_TYPE;
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 1457:

/* Line 1455 of yacc.c  */
#line 10322 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1459:

/* Line 1455 of yacc.c  */
#line 10329 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.select_lex)= Select; }
    break;

  case 1460:

/* Line 1455 of yacc.c  */
#line 10334 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (! lex->parsing_options.allows_derived)
            {
              my_error(ER_VIEW_SELECT_DERIVED, MYF(0));
              MYSQL_YYABORT;
            }

            SELECT_LEX *sel= lex->current_select;
            TABLE_LIST *embedding;
            if (!sel->embedding || sel->end_nested_join(lex->thd))
            {
              /* we are not in parentheses */
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            embedding= Select->embedding;
            (yyval.num)= embedding &&
                !embedding->nested_join->join_list.elements;
            /* return true if we are deeply nested */
          }
    break;

  case 1461:

/* Line 1455 of yacc.c  */
#line 10359 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1462:

/* Line 1455 of yacc.c  */
#line 10360 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1463:

/* Line 1455 of yacc.c  */
#line 10365 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= YYTHD->variables.old_mode ?  INDEX_HINT_MASK_JOIN : INDEX_HINT_MASK_ALL; 
          }
    break;

  case 1464:

/* Line 1455 of yacc.c  */
#line 10368 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_JOIN;  }
    break;

  case 1465:

/* Line 1455 of yacc.c  */
#line 10369 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_ORDER; }
    break;

  case 1466:

/* Line 1455 of yacc.c  */
#line 10370 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_GROUP; }
    break;

  case 1467:

/* Line 1455 of yacc.c  */
#line 10374 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.index_hint)= INDEX_HINT_FORCE; }
    break;

  case 1468:

/* Line 1455 of yacc.c  */
#line 10375 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.index_hint)= INDEX_HINT_IGNORE; }
    break;

  case 1469:

/* Line 1455 of yacc.c  */
#line 10380 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->set_index_hint_type((yyvsp[(1) - (3)].index_hint), (yyvsp[(3) - (3)].num));
          }
    break;

  case 1471:

/* Line 1455 of yacc.c  */
#line 10385 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->set_index_hint_type(INDEX_HINT_USE, (yyvsp[(3) - (3)].num));
          }
    break;

  case 1476:

/* Line 1455 of yacc.c  */
#line 10398 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->alloc_index_hints(YYTHD); }
    break;

  case 1478:

/* Line 1455 of yacc.c  */
#line 10402 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {  Select->clear_index_hints(); }
    break;

  case 1480:

/* Line 1455 of yacc.c  */
#line 10407 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->add_index_hint(YYTHD, NULL, 0); }
    break;

  case 1481:

/* Line 1455 of yacc.c  */
#line 10408 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1482:

/* Line 1455 of yacc.c  */
#line 10413 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->add_index_hint(YYTHD, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length); }
    break;

  case 1483:

/* Line 1455 of yacc.c  */
#line 10415 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->add_index_hint(YYTHD, (char *)"PRIMARY", 7); }
    break;

  case 1486:

/* Line 1455 of yacc.c  */
#line 10425 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!((yyval.string_list)= new List<String>))
              MYSQL_YYABORT;
            String *s= new (YYTHD->mem_root) String((const char *) (yyvsp[(1) - (1)].lex_str).str,
                                                    (yyvsp[(1) - (1)].lex_str).length,
                                                    system_charset_info);
            if (s == NULL)
              MYSQL_YYABORT;
            (yyval.string_list)->push_back(s);
          }
    break;

  case 1487:

/* Line 1455 of yacc.c  */
#line 10436 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            String *s= new (YYTHD->mem_root) String((const char *) (yyvsp[(3) - (3)].lex_str).str,
                                                    (yyvsp[(3) - (3)].lex_str).length,
                                                    system_charset_info);
            if (s == NULL)
              MYSQL_YYABORT;
            (yyvsp[(1) - (3)].string_list)->push_back(s);
            (yyval.string_list)= (yyvsp[(1) - (3)].string_list);
          }
    break;

  case 1488:

/* Line 1455 of yacc.c  */
#line 10448 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1489:

/* Line 1455 of yacc.c  */
#line 10449 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_HOUR; }
    break;

  case 1490:

/* Line 1455 of yacc.c  */
#line 10450 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_MICROSECOND; }
    break;

  case 1491:

/* Line 1455 of yacc.c  */
#line 10451 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_MINUTE; }
    break;

  case 1492:

/* Line 1455 of yacc.c  */
#line 10452 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_SECOND; }
    break;

  case 1493:

/* Line 1455 of yacc.c  */
#line 10453 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_MICROSECOND; }
    break;

  case 1494:

/* Line 1455 of yacc.c  */
#line 10454 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_MINUTE; }
    break;

  case 1495:

/* Line 1455 of yacc.c  */
#line 10455 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_SECOND; }
    break;

  case 1496:

/* Line 1455 of yacc.c  */
#line 10456 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_MINUTE_MICROSECOND; }
    break;

  case 1497:

/* Line 1455 of yacc.c  */
#line 10457 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_MINUTE_SECOND; }
    break;

  case 1498:

/* Line 1455 of yacc.c  */
#line 10458 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_SECOND_MICROSECOND; }
    break;

  case 1499:

/* Line 1455 of yacc.c  */
#line 10459 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_YEAR_MONTH; }
    break;

  case 1500:

/* Line 1455 of yacc.c  */
#line 10463 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_DAY; }
    break;

  case 1501:

/* Line 1455 of yacc.c  */
#line 10464 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_WEEK; }
    break;

  case 1502:

/* Line 1455 of yacc.c  */
#line 10465 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_HOUR; }
    break;

  case 1503:

/* Line 1455 of yacc.c  */
#line 10466 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MINUTE; }
    break;

  case 1504:

/* Line 1455 of yacc.c  */
#line 10467 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MONTH; }
    break;

  case 1505:

/* Line 1455 of yacc.c  */
#line 10468 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_QUARTER; }
    break;

  case 1506:

/* Line 1455 of yacc.c  */
#line 10469 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_SECOND; }
    break;

  case 1507:

/* Line 1455 of yacc.c  */
#line 10470 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MICROSECOND; }
    break;

  case 1508:

/* Line 1455 of yacc.c  */
#line 10471 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_YEAR; }
    break;

  case 1509:

/* Line 1455 of yacc.c  */
#line 10475 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_DATE;}
    break;

  case 1510:

/* Line 1455 of yacc.c  */
#line 10476 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_TIME;}
    break;

  case 1511:

/* Line 1455 of yacc.c  */
#line 10477 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_DATETIME;}
    break;

  case 1512:

/* Line 1455 of yacc.c  */
#line 10478 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_DATETIME;}
    break;

  case 1516:

/* Line 1455 of yacc.c  */
#line 10488 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str_ptr)=0; }
    break;

  case 1517:

/* Line 1455 of yacc.c  */
#line 10490 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.lex_str_ptr)= (LEX_STRING*) sql_memdup(&(yyvsp[(2) - (2)].lex_str),sizeof(LEX_STRING));
            if ((yyval.lex_str_ptr) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1520:

/* Line 1455 of yacc.c  */
#line 10503 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->where= 0; }
    break;

  case 1521:

/* Line 1455 of yacc.c  */
#line 10505 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->parsing_place= IN_WHERE;
          }
    break;

  case 1522:

/* Line 1455 of yacc.c  */
#line 10509 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            SELECT_LEX *select= Select;
            select->where= normalize_cond((yyvsp[(3) - (3)].item));
            select->parsing_place= NO_MATTER;
            if ((yyvsp[(3) - (3)].item))
              (yyvsp[(3) - (3)].item)->top_level_item();
          }
    break;

  case 1524:

/* Line 1455 of yacc.c  */
#line 10521 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->parsing_place= IN_HAVING;
          }
    break;

  case 1525:

/* Line 1455 of yacc.c  */
#line 10525 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->having= normalize_cond((yyvsp[(3) - (3)].item));
            sel->parsing_place= NO_MATTER;
            if ((yyvsp[(3) - (3)].item))
              (yyvsp[(3) - (3)].item)->top_level_item();
          }
    break;

  case 1526:

/* Line 1455 of yacc.c  */
#line 10536 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->escape_used= TRUE;
            (yyval.item)= (yyvsp[(2) - (2)].item);
          }
    break;

  case 1527:

/* Line 1455 of yacc.c  */
#line 10541 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Lex->escape_used= FALSE;
            (yyval.item)= ((thd->variables.sql_mode & MODE_NO_BACKSLASH_ESCAPES) ?
                 new (thd->mem_root) Item_string("", 0, &my_charset_latin1) :
                 new (thd->mem_root) Item_string("\\", 1, &my_charset_latin1));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1530:

/* Line 1455 of yacc.c  */
#line 10563 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { if (add_group_to_list(YYTHD, (yyvsp[(3) - (4)].item),(bool) (yyvsp[(4) - (4)].num))) MYSQL_YYABORT; }
    break;

  case 1531:

/* Line 1455 of yacc.c  */
#line 10565 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { if (add_group_to_list(YYTHD, (yyvsp[(1) - (2)].item),(bool) (yyvsp[(2) - (2)].num))) MYSQL_YYABORT; }
    break;

  case 1532:

/* Line 1455 of yacc.c  */
#line 10569 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1533:

/* Line 1455 of yacc.c  */
#line 10571 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              'WITH CUBE' is reserved in the MySQL syntax, but not implemented,
              and cause LALR(2) conflicts.
              This syntax is not standard.
              MySQL syntax: GROUP BY col1, col2, col3 WITH CUBE
              SQL-2003: GROUP BY ... CUBE(col1, col2, col3)
            */
            LEX *lex=Lex;
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "WITH CUBE",
                       "global union parameters");
              MYSQL_YYABORT;
            }
            lex->current_select->olap= CUBE_TYPE;
            my_error(ER_NOT_SUPPORTED_YET, MYF(0), "CUBE");
            MYSQL_YYABORT;
          }
    break;

  case 1534:

/* Line 1455 of yacc.c  */
#line 10591 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              'WITH ROLLUP' is needed for backward compatibility,
              and cause LALR(2) conflicts.
              This syntax is not standard.
              MySQL syntax: GROUP BY col1, col2, col3 WITH ROLLUP
              SQL-2003: GROUP BY ... ROLLUP(col1, col2, col3)
            */
            LEX *lex= Lex;
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "WITH ROLLUP",
                       "global union parameters");
              MYSQL_YYABORT;
            }
            lex->current_select->olap= ROLLUP_TYPE;
          }
    break;

  case 1538:

/* Line 1455 of yacc.c  */
#line 10625 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            bool ascending= ((yyvsp[(2) - (2)].num) == 1) ? true : false;
            if (add_order_to_list(thd, (yyvsp[(1) - (2)].item), ascending))
              MYSQL_YYABORT;
          }
    break;

  case 1541:

/* Line 1455 of yacc.c  */
#line 10644 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            SELECT_LEX *sel= lex->current_select;
            SELECT_LEX_UNIT *unit= sel-> master_unit();
            if (sel->linkage != GLOBAL_OPTIONS_TYPE &&
                sel->olap != UNSPECIFIED_OLAP_TYPE &&
                (sel->linkage != UNION_TYPE || sel->braces))
            {
              my_error(ER_WRONG_USAGE, MYF(0),
                       "CUBE/ROLLUP", "ORDER BY");
              MYSQL_YYABORT;
            }
            if (lex->sql_command != SQLCOM_ALTER_TABLE && !unit->fake_select_lex)
            {
              /*
                A query of the of the form (SELECT ...) ORDER BY order_list is
                executed in the same way as the query
                SELECT ... ORDER BY order_list
                unless the SELECT construct contains ORDER BY or LIMIT clauses.
                Otherwise we create a fake SELECT_LEX if it has not been created
                yet.
              */
              SELECT_LEX *first_sl= unit->first_select();
              if (!unit->is_union() &&
                  (first_sl->order_list.elements || 
                   first_sl->select_limit) &&            
                  unit->add_fake_select_lex(lex->thd))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1543:

/* Line 1455 of yacc.c  */
#line 10679 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { if (add_order_to_list(YYTHD, (yyvsp[(3) - (4)].item),(bool) (yyvsp[(4) - (4)].num))) MYSQL_YYABORT; }
    break;

  case 1544:

/* Line 1455 of yacc.c  */
#line 10681 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { if (add_order_to_list(YYTHD, (yyvsp[(1) - (2)].item),(bool) (yyvsp[(2) - (2)].num))) MYSQL_YYABORT; }
    break;

  case 1545:

/* Line 1455 of yacc.c  */
#line 10685 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num) =  1; }
    break;

  case 1546:

/* Line 1455 of yacc.c  */
#line 10686 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num) =1; }
    break;

  case 1547:

/* Line 1455 of yacc.c  */
#line 10687 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num) =0; }
    break;

  case 1548:

/* Line 1455 of yacc.c  */
#line 10692 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            sel->offset_limit= 0;
            sel->select_limit= 0;
	    lex->limit_rows_examined= 0;
          }
    break;

  case 1549:

/* Line 1455 of yacc.c  */
#line 10699 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1550:

/* Line 1455 of yacc.c  */
#line 10703 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1551:

/* Line 1455 of yacc.c  */
#line 10704 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1552:

/* Line 1455 of yacc.c  */
#line 10709 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
          }
    break;

  case 1553:

/* Line 1455 of yacc.c  */
#line 10713 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
          }
    break;

  case 1554:

/* Line 1455 of yacc.c  */
#line 10717 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
          }
    break;

  case 1555:

/* Line 1455 of yacc.c  */
#line 10724 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(1) - (1)].item);
            sel->offset_limit= 0;
            sel->explicit_limit= 1;
          }
    break;

  case 1556:

/* Line 1455 of yacc.c  */
#line 10731 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(3) - (3)].item);
            sel->offset_limit= (yyvsp[(1) - (3)].item);
            sel->explicit_limit= 1;
          }
    break;

  case 1557:

/* Line 1455 of yacc.c  */
#line 10738 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(1) - (3)].item);
            sel->offset_limit= (yyvsp[(3) - (3)].item);
            sel->explicit_limit= 1;
          }
    break;

  case 1558:

/* Line 1455 of yacc.c  */
#line 10748 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
          Item_splocal *splocal;
          THD *thd= YYTHD;
          LEX *lex= thd->lex;
          Lex_input_stream *lip= & thd->m_parser_state->m_lip;
          sp_variable_t *spv;
          sp_pcontext *spc = lex->spcont;
          if (spc && (spv = spc->find_variable(&(yyvsp[(1) - (1)].lex_str))))
          {
            splocal= new (thd->mem_root)
              Item_splocal((yyvsp[(1) - (1)].lex_str), spv->offset, spv->type,
                  lip->get_tok_start() - lex->sphead->m_tmp_query,
                  lip->get_ptr() - lip->get_tok_start());
            if (splocal == NULL)
              MYSQL_YYABORT;
#ifndef DBUG_OFF
            splocal->m_sp= lex->sphead;
#endif
            lex->safe_to_cache_query=0;
          }
          else
          {
            my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
            MYSQL_YYABORT;
          }
          if (splocal->type() != Item::INT_ITEM)
          {
            my_error(ER_WRONG_SPVAR_TYPE_IN_LIMIT, MYF(0));
            MYSQL_YYABORT;
          }
          splocal->limit_clause_param= TRUE;
          (yyval.item)= splocal;
        }
    break;

  case 1559:

/* Line 1455 of yacc.c  */
#line 10782 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
          ((Item_param *) (yyvsp[(1) - (1)].item))->limit_clause_param= TRUE;
        }
    break;

  case 1560:

/* Line 1455 of yacc.c  */
#line 10786 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1561:

/* Line 1455 of yacc.c  */
#line 10792 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1562:

/* Line 1455 of yacc.c  */
#line 10798 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1563:

/* Line 1455 of yacc.c  */
#line 10807 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            LEX *lex=Lex;
            lex->limit_rows_examined= (yyvsp[(1) - (1)].item);
          }
    break;

  case 1564:

/* Line 1455 of yacc.c  */
#line 10814 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->current_select->select_limit= 0;
          }
    break;

  case 1565:

/* Line 1455 of yacc.c  */
#line 10819 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(2) - (2)].item);
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
            sel->explicit_limit= 1;
          }
    break;

  case 1566:

/* Line 1455 of yacc.c  */
#line 10825 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { my_parse_error(ER(ER_SYNTAX_ERROR)); MYSQL_YYABORT; }
    break;

  case 1567:

/* Line 1455 of yacc.c  */
#line 10826 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { my_parse_error(ER(ER_SYNTAX_ERROR)); MYSQL_YYABORT; }
    break;

  case 1568:

/* Line 1455 of yacc.c  */
#line 10830 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.num)= (int) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1569:

/* Line 1455 of yacc.c  */
#line 10831 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.num)= -(int) my_strtoll10((yyvsp[(2) - (2)].lex_str).str, (char**) 0, &error); }
    break;

  case 1570:

/* Line 1455 of yacc.c  */
#line 10832 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.num)= -(int) my_strtoll10((yyvsp[(2) - (2)].lex_str).str, (char**) 0, &error); }
    break;

  case 1571:

/* Line 1455 of yacc.c  */
#line 10836 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1572:

/* Line 1455 of yacc.c  */
#line 10837 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (ulong) strtol((yyvsp[(1) - (1)].lex_str).str, (char**) 0, 16); }
    break;

  case 1573:

/* Line 1455 of yacc.c  */
#line 10838 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1574:

/* Line 1455 of yacc.c  */
#line 10839 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1575:

/* Line 1455 of yacc.c  */
#line 10840 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1576:

/* Line 1455 of yacc.c  */
#line 10841 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1577:

/* Line 1455 of yacc.c  */
#line 10845 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1578:

/* Line 1455 of yacc.c  */
#line 10846 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (ulong) strtol((yyvsp[(1) - (1)].lex_str).str, (char**) 0, 16); }
    break;

  case 1579:

/* Line 1455 of yacc.c  */
#line 10847 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1580:

/* Line 1455 of yacc.c  */
#line 10848 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1581:

/* Line 1455 of yacc.c  */
#line 10849 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { MYSQL_YYABORT; }
    break;

  case 1582:

/* Line 1455 of yacc.c  */
#line 10853 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1583:

/* Line 1455 of yacc.c  */
#line 10854 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1584:

/* Line 1455 of yacc.c  */
#line 10855 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1585:

/* Line 1455 of yacc.c  */
#line 10856 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1586:

/* Line 1455 of yacc.c  */
#line 10857 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1587:

/* Line 1455 of yacc.c  */
#line 10861 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1588:

/* Line 1455 of yacc.c  */
#line 10862 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1589:

/* Line 1455 of yacc.c  */
#line 10863 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ulonglong_number)= strtoull((yyvsp[(1) - (1)].lex_str).str, (char**) 0, 16); }
    break;

  case 1590:

/* Line 1455 of yacc.c  */
#line 10864 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1591:

/* Line 1455 of yacc.c  */
#line 10865 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { MYSQL_YYABORT; }
    break;

  case 1592:

/* Line 1455 of yacc.c  */
#line 10870 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { my_parse_error(ER(ER_ONLY_INTEGERS_ALLOWED)); }
    break;

  case 1595:

/* Line 1455 of yacc.c  */
#line 10879 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.choice)= (yyvsp[(1) - (1)].ulong_num) != 0 ? HA_CHOICE_YES : HA_CHOICE_NO; }
    break;

  case 1596:

/* Line 1455 of yacc.c  */
#line 10880 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.choice)= HA_CHOICE_UNDEF; }
    break;

  case 1598:

/* Line 1455 of yacc.c  */
#line 10886 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            if (! lex->parsing_options.allows_select_procedure)
            {
              my_error(ER_VIEW_SELECT_CLAUSE, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }

            if (&lex->select_lex != lex->current_select)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "PROCEDURE", "subquery");
              MYSQL_YYABORT;
            }
            lex->proc_list.elements=0;
            lex->proc_list.first=0;
            lex->proc_list.next= &lex->proc_list.first;
            Item_field *item= new (YYTHD->mem_root)
                                Item_field(&lex->current_select->context,
                                           NULL, NULL, (yyvsp[(2) - (2)].lex_str).str);
            if (item == NULL)
              MYSQL_YYABORT;
            if (add_proc_to_list(lex->thd, item))
              MYSQL_YYABORT;
            Lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
          }
    break;

  case 1600:

/* Line 1455 of yacc.c  */
#line 10916 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1601:

/* Line 1455 of yacc.c  */
#line 10917 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1604:

/* Line 1455 of yacc.c  */
#line 10927 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (add_proc_to_list(thd, (yyvsp[(2) - (3)].item)))
              MYSQL_YYABORT;
            if (!(yyvsp[(2) - (3)].item)->name)
              (yyvsp[(2) - (3)].item)->set_name((yyvsp[(1) - (3)].simple_string), (uint) ((yyvsp[(3) - (3)].simple_string) - (yyvsp[(1) - (3)].simple_string)), thd->charset());
          }
    break;

  case 1605:

/* Line 1455 of yacc.c  */
#line 10938 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->describe && (!(lex->result= new select_dumpvar())))
              MYSQL_YYABORT;
          }
    break;

  case 1606:

/* Line 1455 of yacc.c  */
#line 10944 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1608:

/* Line 1455 of yacc.c  */
#line 10949 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1609:

/* Line 1455 of yacc.c  */
#line 10954 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->result) 
            {
              my_var *var= new my_var((yyvsp[(2) - (2)].lex_str),0,0,(enum_field_types)0);
              if (var == NULL)
                MYSQL_YYABORT;
              ((select_dumpvar *)lex->result)->var_list.push_back(var);
            }
            else
            {
              /*
                The parser won't create select_result instance only
                if it's an EXPLAIN.
              */
              DBUG_ASSERT(lex->describe);
            }
          }
    break;

  case 1610:

/* Line 1455 of yacc.c  */
#line 10973 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            sp_variable_t *t;

            if (!lex->spcont || !(t=lex->spcont->find_variable(&(yyvsp[(1) - (1)].lex_str))))
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (lex->result)
            {
              my_var *var= new my_var((yyvsp[(1) - (1)].lex_str),1,t->offset,t->type);
              if (var == NULL)
                MYSQL_YYABORT;
              ((select_dumpvar *)lex->result)->var_list.push_back(var);
#ifndef DBUG_OFF
              var->sp= lex->sphead;
#endif
            }
            else
            {
              /*
                The parser won't create select_result instance only
                if it's an EXPLAIN.
              */
              DBUG_ASSERT(lex->describe);
            }
          }
    break;

  case 1611:

/* Line 1455 of yacc.c  */
#line 11005 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (! Lex->parsing_options.allows_select_into)
            {
              my_error(ER_VIEW_SELECT_CLAUSE, MYF(0), "INTO");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1613:

/* Line 1455 of yacc.c  */
#line 11017 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
            if (!(lex->exchange= new sql_exchange((yyvsp[(2) - (2)].lex_str).str, 0)) ||
                !(lex->result= new select_export(lex->exchange)))
              MYSQL_YYABORT;
          }
    break;

  case 1614:

/* Line 1455 of yacc.c  */
#line 11025 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->exchange->cs= (yyvsp[(4) - (4)].charset); }
    break;

  case 1616:

/* Line 1455 of yacc.c  */
#line 11028 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->describe)
            {
              lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
              if (!(lex->exchange= new sql_exchange((yyvsp[(2) - (2)].lex_str).str,1)))
                MYSQL_YYABORT;
              if (!(lex->result= new select_dump(lex->exchange)))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1617:

/* Line 1455 of yacc.c  */
#line 11040 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
          }
    break;

  case 1618:

/* Line 1455 of yacc.c  */
#line 11051 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_DO;
            mysql_init_select(lex);
          }
    break;

  case 1619:

/* Line 1455 of yacc.c  */
#line 11057 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->insert_list= (yyvsp[(3) - (3)].item_list);
          }
    break;

  case 1620:

/* Line 1455 of yacc.c  */
#line 11068 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_DROP_TABLE;
            lex->drop_temporary= (yyvsp[(2) - (4)].num);
            lex->check_exists= (yyvsp[(4) - (4)].num);
            YYPS->m_lock_type= TL_UNLOCK;
            YYPS->m_mdl_type= MDL_EXCLUSIVE;
          }
    break;

  case 1621:

/* Line 1455 of yacc.c  */
#line 11077 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1622:

/* Line 1455 of yacc.c  */
#line 11078 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1623:

/* Line 1455 of yacc.c  */
#line 11079 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, (yyvsp[(4) - (7)].lex_str).str, (yyvsp[(3) - (7)].num));
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->sql_command= SQLCOM_DROP_INDEX;
            lex->alter_info.reset();
            lex->alter_info.flags= ALTER_DROP_INDEX;
            lex->alter_info.drop_list.push_back(ad);
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(6) - (7)].table), NULL,
                                                        TL_OPTION_UPDATING,
                                                        TL_READ_NO_INSERT,
                                                        MDL_SHARED_NO_WRITE))
              MYSQL_YYABORT;
          }
    break;

  case 1624:

/* Line 1455 of yacc.c  */
#line 11095 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_DROP_DB;
            lex->check_exists=(yyvsp[(3) - (4)].num);
            lex->name= (yyvsp[(4) - (4)].lex_str);
          }
    break;

  case 1625:

/* Line 1455 of yacc.c  */
#line 11102 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_name *spname;
            if ((yyvsp[(4) - (6)].lex_str).str && check_db_name(&(yyvsp[(4) - (6)].lex_str)))
            {
               my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[(4) - (6)].lex_str).str);
               MYSQL_YYABORT;
            }
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_DROP_FUNCTION;
            lex->check_exists= (yyvsp[(3) - (6)].num);
            spname= new sp_name((yyvsp[(4) - (6)].lex_str), (yyvsp[(6) - (6)].lex_str), true);
            if (spname == NULL)
              MYSQL_YYABORT;
            spname->init_qname(thd);
            lex->spname= spname;
          }
    break;

  case 1626:

/* Line 1455 of yacc.c  */
#line 11125 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            LEX_STRING db= {0, 0};
            sp_name *spname;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            if (thd->db && lex->copy_db_to(&db.str, &db.length))
              MYSQL_YYABORT;
            lex->sql_command = SQLCOM_DROP_FUNCTION;
            lex->check_exists= (yyvsp[(3) - (4)].num);
            spname= new sp_name(db, (yyvsp[(4) - (4)].lex_str), false);
            if (spname == NULL)
              MYSQL_YYABORT;
            spname->init_qname(thd);
            lex->spname= spname;
          }
    break;

  case 1627:

/* Line 1455 of yacc.c  */
#line 11146 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_DROP_PROCEDURE;
            lex->check_exists= (yyvsp[(3) - (4)].num);
            lex->spname= (yyvsp[(4) - (4)].spname);
          }
    break;

  case 1628:

/* Line 1455 of yacc.c  */
#line 11158 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_DROP_USER;
          }
    break;

  case 1629:

/* Line 1455 of yacc.c  */
#line 11162 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DROP_VIEW;
            lex->check_exists= (yyvsp[(3) - (3)].num);
            YYPS->m_lock_type= TL_UNLOCK;
            YYPS->m_mdl_type= MDL_EXCLUSIVE;
          }
    break;

  case 1630:

/* Line 1455 of yacc.c  */
#line 11170 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1631:

/* Line 1455 of yacc.c  */
#line 11172 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->check_exists= (yyvsp[(3) - (4)].num);
            Lex->spname= (yyvsp[(4) - (4)].spname);
            Lex->sql_command = SQLCOM_DROP_EVENT;
          }
    break;

  case 1632:

/* Line 1455 of yacc.c  */
#line 11178 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DROP_TRIGGER;
            lex->check_exists= (yyvsp[(3) - (4)].num);
            lex->spname= (yyvsp[(4) - (4)].spname);
          }
    break;

  case 1633:

/* Line 1455 of yacc.c  */
#line 11185 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= DROP_TABLESPACE;
          }
    break;

  case 1634:

/* Line 1455 of yacc.c  */
#line 11190 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= DROP_LOGFILE_GROUP;
          }
    break;

  case 1635:

/* Line 1455 of yacc.c  */
#line 11195 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_DROP_SERVER;
            Lex->check_exists= (yyvsp[(3) - (4)].num);
            Lex->server_options.server_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->server_options.server_name_length= (yyvsp[(4) - (4)].lex_str).length;
          }
    break;

  case 1638:

/* Line 1455 of yacc.c  */
#line 11210 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (1)].table), NULL,
                                           TL_OPTION_UPDATING,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1641:

/* Line 1455 of yacc.c  */
#line 11226 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (1)].table), NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1642:

/* Line 1455 of yacc.c  */
#line 11237 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
          Lex->check_exists= FALSE;
          (yyval.num)= 0;
        }
    break;

  case 1643:

/* Line 1455 of yacc.c  */
#line 11242 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
          Lex->check_exists= TRUE;
          (yyval.num)= 1;
        }
    break;

  case 1644:

/* Line 1455 of yacc.c  */
#line 11249 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1645:

/* Line 1455 of yacc.c  */
#line 11250 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1646:

/* Line 1455 of yacc.c  */
#line 11258 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_INSERT;
            lex->duplicates= DUP_ERROR; 
            mysql_init_select(lex);
          }
    break;

  case 1647:

/* Line 1455 of yacc.c  */
#line 11266 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->set_lock_for_tables((yyvsp[(3) - (5)].lock_type));
            Lex->current_select= &Lex->select_lex;
          }
    break;

  case 1648:

/* Line 1455 of yacc.c  */
#line 11271 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1649:

/* Line 1455 of yacc.c  */
#line 11276 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_REPLACE;
            lex->duplicates= DUP_REPLACE;
            mysql_init_select(lex);
          }
    break;

  case 1650:

/* Line 1455 of yacc.c  */
#line 11283 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->set_lock_for_tables((yyvsp[(3) - (4)].lock_type));
            Lex->current_select= &Lex->select_lex;
          }
    break;

  case 1651:

/* Line 1455 of yacc.c  */
#line 11288 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1652:

/* Line 1455 of yacc.c  */
#line 11293 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              If it is SP we do not allow insert optimisation when result of
              insert visible only after the table unlocking but everyone can
              read table.
            */
            (yyval.lock_type)= (Lex->sphead ? TL_WRITE_DEFAULT : TL_WRITE_CONCURRENT_INSERT);
          }
    break;

  case 1653:

/* Line 1455 of yacc.c  */
#line 11301 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1654:

/* Line 1455 of yacc.c  */
#line 11303 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
          Lex->keyword_delayed_begin_offset= (uint)(YYLIP->get_tok_start() -
                                                    YYTHD->query());
          Lex->keyword_delayed_end_offset= Lex->keyword_delayed_begin_offset +
                                           YYLIP->yyLength() + 1;
          (yyval.lock_type)= TL_WRITE_DELAYED;
        }
    break;

  case 1655:

/* Line 1455 of yacc.c  */
#line 11310 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE; }
    break;

  case 1656:

/* Line 1455 of yacc.c  */
#line 11314 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lock_type)= (yyvsp[(1) - (1)].lock_type); }
    break;

  case 1657:

/* Line 1455 of yacc.c  */
#line 11316 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
          Lex->keyword_delayed_begin_offset= (uint)(YYLIP->get_tok_start() -
                                                    YYTHD->query());
          Lex->keyword_delayed_end_offset= Lex->keyword_delayed_begin_offset +
                                           YYLIP->yyLength() + 1;
          (yyval.lock_type)= TL_WRITE_DELAYED;
        }
    break;

  case 1658:

/* Line 1455 of yacc.c  */
#line 11326 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1659:

/* Line 1455 of yacc.c  */
#line 11327 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1660:

/* Line 1455 of yacc.c  */
#line 11332 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->field_list.empty();
            lex->many_values.empty();
            lex->insert_list=0;
          }
    break;

  case 1661:

/* Line 1455 of yacc.c  */
#line 11340 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1662:

/* Line 1455 of yacc.c  */
#line 11341 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1663:

/* Line 1455 of yacc.c  */
#line 11342 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1664:

/* Line 1455 of yacc.c  */
#line 11344 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!(lex->insert_list = new List_item) ||
                lex->many_values.push_back(lex->insert_list))
              MYSQL_YYABORT;
          }
    break;

  case 1666:

/* Line 1455 of yacc.c  */
#line 11354 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(3) - (3)].item)); }
    break;

  case 1667:

/* Line 1455 of yacc.c  */
#line 11355 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(1) - (1)].item)); }
    break;

  case 1668:

/* Line 1455 of yacc.c  */
#line 11359 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1669:

/* Line 1455 of yacc.c  */
#line 11360 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1670:

/* Line 1455 of yacc.c  */
#line 11362 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->set_braces(0);}
    break;

  case 1671:

/* Line 1455 of yacc.c  */
#line 11363 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1672:

/* Line 1455 of yacc.c  */
#line 11365 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 1673:

/* Line 1455 of yacc.c  */
#line 11366 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1678:

/* Line 1455 of yacc.c  */
#line 11381 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->field_list.push_back((yyvsp[(1) - (3)].item)) ||
                lex->insert_list->push_back((yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1679:

/* Line 1455 of yacc.c  */
#line 11390 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1680:

/* Line 1455 of yacc.c  */
#line 11391 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1681:

/* Line 1455 of yacc.c  */
#line 11395 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1682:

/* Line 1455 of yacc.c  */
#line 11396 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1683:

/* Line 1455 of yacc.c  */
#line 11401 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
              if (!(Lex->insert_list = new List_item))
                MYSQL_YYABORT;
          }
    break;

  case 1684:

/* Line 1455 of yacc.c  */
#line 11406 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->many_values.push_back(lex->insert_list))
              MYSQL_YYABORT;
          }
    break;

  case 1685:

/* Line 1455 of yacc.c  */
#line 11414 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1687:

/* Line 1455 of yacc.c  */
#line 11420 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->insert_list->push_back((yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1688:

/* Line 1455 of yacc.c  */
#line 11425 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->insert_list->push_back((yyvsp[(1) - (1)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1689:

/* Line 1455 of yacc.c  */
#line 11432 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item);}
    break;

  case 1690:

/* Line 1455 of yacc.c  */
#line 11434 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_default_value(Lex->current_context());
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1692:

/* Line 1455 of yacc.c  */
#line 11443 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->duplicates= DUP_UPDATE; }
    break;

  case 1694:

/* Line 1455 of yacc.c  */
#line 11451 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            mysql_init_select(lex);
            lex->sql_command= SQLCOM_UPDATE;
            lex->duplicates= DUP_ERROR; 
          }
    break;

  case 1695:

/* Line 1455 of yacc.c  */
#line 11459 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->select_lex.table_list.elements > 1)
              lex->sql_command= SQLCOM_UPDATE_MULTI;
            else if (lex->select_lex.get_table_list()->derived)
            {
              /* it is single table update and it is update of derived table */
              my_error(ER_NON_UPDATABLE_TABLE, MYF(0),
                       lex->select_lex.get_table_list()->alias, "UPDATE");
              MYSQL_YYABORT;
            }
            /*
              In case of multi-update setting write lock for all tables may
              be too pessimistic. We will decrease lock level if possible in
              mysql_multi_update().
            */
            Select->set_lock_for_tables((yyvsp[(3) - (7)].lock_type));
          }
    break;

  case 1696:

/* Line 1455 of yacc.c  */
#line 11477 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1699:

/* Line 1455 of yacc.c  */
#line 11487 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_item_to_list(YYTHD, (yyvsp[(1) - (3)].item)) || add_value_to_list(YYTHD, (yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1702:

/* Line 1455 of yacc.c  */
#line 11500 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
          LEX *lex= Lex;
          if (lex->update_list.push_back((yyvsp[(1) - (3)].item)) || 
              lex->value_list.push_back((yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1703:

/* Line 1455 of yacc.c  */
#line 11509 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_DEFAULT; }
    break;

  case 1704:

/* Line 1455 of yacc.c  */
#line 11510 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1705:

/* Line 1455 of yacc.c  */
#line 11517 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DELETE;
            mysql_init_select(lex);
            YYPS->m_lock_type= TL_WRITE_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_WRITE;

            lex->ignore= 0;
            lex->select_lex.init_order();
          }
    break;

  case 1707:

/* Line 1455 of yacc.c  */
#line 11532 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(2) - (2)].table), NULL, TL_OPTION_UPDATING,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
            YYPS->m_lock_type= TL_READ_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_READ;
          }
    break;

  case 1708:

/* Line 1455 of yacc.c  */
#line 11541 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1709:

/* Line 1455 of yacc.c  */
#line 11543 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            mysql_init_multi_delete(Lex);
            YYPS->m_lock_type= TL_READ_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_READ;
          }
    break;

  case 1710:

/* Line 1455 of yacc.c  */
#line 11549 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (multi_delete_set_locks_and_link_aux_tables(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1711:

/* Line 1455 of yacc.c  */
#line 11554 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            mysql_init_multi_delete(Lex);
            YYPS->m_lock_type= TL_READ_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_READ;
          }
    break;

  case 1712:

/* Line 1455 of yacc.c  */
#line 11560 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (multi_delete_set_locks_and_link_aux_tables(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1715:

/* Line 1455 of yacc.c  */
#line 11573 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Table_ident *ti= new Table_ident((yyvsp[(1) - (2)].lex_str));
            if (ti == NULL)
              MYSQL_YYABORT;
            if (!Select->add_table_to_list(YYTHD,
                                           ti,
                                           NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1716:

/* Line 1455 of yacc.c  */
#line 11586 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Table_ident *ti= new Table_ident(YYTHD, (yyvsp[(1) - (4)].lex_str), (yyvsp[(3) - (4)].lex_str), 0);
            if (ti == NULL)
              MYSQL_YYABORT;
            if (!Select->add_table_to_list(YYTHD,
                                           ti,
                                           NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1717:

/* Line 1455 of yacc.c  */
#line 11601 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1718:

/* Line 1455 of yacc.c  */
#line 11602 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1719:

/* Line 1455 of yacc.c  */
#line 11606 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1720:

/* Line 1455 of yacc.c  */
#line 11607 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1721:

/* Line 1455 of yacc.c  */
#line 11611 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->options|= OPTION_QUICK; }
    break;

  case 1722:

/* Line 1455 of yacc.c  */
#line 11612 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { YYPS->m_lock_type= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1723:

/* Line 1455 of yacc.c  */
#line 11613 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ignore= 1; }
    break;

  case 1724:

/* Line 1455 of yacc.c  */
#line 11618 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX* lex= Lex;
            lex->sql_command= SQLCOM_TRUNCATE;
            lex->alter_info.reset();
            lex->select_lex.options= 0;
            lex->select_lex.sql_cache= SELECT_LEX::SQL_CACHE_UNSPECIFIED;
            lex->select_lex.init_order();
            YYPS->m_lock_type= TL_WRITE;
            YYPS->m_mdl_type= MDL_EXCLUSIVE;
          }
    break;

  case 1725:

/* Line 1455 of yacc.c  */
#line 11629 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root) Truncate_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1732:

/* Line 1455 of yacc.c  */
#line 11654 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_CPU;
    }
    break;

  case 1733:

/* Line 1455 of yacc.c  */
#line 11658 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_MEMORY;
    }
    break;

  case 1734:

/* Line 1455 of yacc.c  */
#line 11662 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_BLOCK_IO;
    }
    break;

  case 1735:

/* Line 1455 of yacc.c  */
#line 11666 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_CONTEXT;
    }
    break;

  case 1736:

/* Line 1455 of yacc.c  */
#line 11670 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_PAGE_FAULTS;
    }
    break;

  case 1737:

/* Line 1455 of yacc.c  */
#line 11674 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_IPC;
    }
    break;

  case 1738:

/* Line 1455 of yacc.c  */
#line 11678 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_SWAPS;
    }
    break;

  case 1739:

/* Line 1455 of yacc.c  */
#line 11682 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_SOURCE;
    }
    break;

  case 1740:

/* Line 1455 of yacc.c  */
#line 11686 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_ALL;
    }
    break;

  case 1741:

/* Line 1455 of yacc.c  */
#line 11693 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
      Lex->profile_query_id= 0;
    }
    break;

  case 1742:

/* Line 1455 of yacc.c  */
#line 11697 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
      Lex->profile_query_id= atoi((yyvsp[(3) - (3)].lex_str).str);
    }
    break;

  case 1743:

/* Line 1455 of yacc.c  */
#line 11706 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->wild=0;
            lex->ident=null_lex_str;
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
            bzero((char*) &lex->create_info,sizeof(lex->create_info));
          }
    break;

  case 1744:

/* Line 1455 of yacc.c  */
#line 11715 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1745:

/* Line 1455 of yacc.c  */
#line 11720 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_DATABASES;
             if (prepare_schema_table(YYTHD, lex, 0, SCH_SCHEMATA))
               MYSQL_YYABORT;
           }
    break;

  case 1746:

/* Line 1455 of yacc.c  */
#line 11727 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TABLES;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_TABLE_NAMES))
               MYSQL_YYABORT;
           }
    break;

  case 1747:

/* Line 1455 of yacc.c  */
#line 11735 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TRIGGERS;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_TRIGGERS))
               MYSQL_YYABORT;
           }
    break;

  case 1748:

/* Line 1455 of yacc.c  */
#line 11743 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_EVENTS;
             lex->select_lex.db= (yyvsp[(2) - (3)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_EVENTS))
               MYSQL_YYABORT;
           }
    break;

  case 1749:

/* Line 1455 of yacc.c  */
#line 11751 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TABLE_STATUS;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_TABLES))
               MYSQL_YYABORT;
           }
    break;

  case 1750:

/* Line 1455 of yacc.c  */
#line 11759 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_OPEN_TABLES;
            lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
            if (prepare_schema_table(YYTHD, lex, 0, SCH_OPEN_TABLES))
              MYSQL_YYABORT;
          }
    break;

  case 1751:

/* Line 1455 of yacc.c  */
#line 11767 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_PLUGINS;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_PLUGINS))
              MYSQL_YYABORT;
          }
    break;

  case 1752:

/* Line 1455 of yacc.c  */
#line 11774 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->ident= (yyvsp[(3) - (3)].lex_str);
            Lex->sql_command= SQLCOM_SHOW_PLUGINS;
            if (prepare_schema_table(YYTHD, Lex, 0, SCH_ALL_PLUGINS))
              MYSQL_YYABORT;
          }
    break;

  case 1753:

/* Line 1455 of yacc.c  */
#line 11781 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_SHOW_PLUGINS;
            if (prepare_schema_table(YYTHD, Lex, 0, SCH_ALL_PLUGINS))
              MYSQL_YYABORT;
          }
    break;

  case 1754:

/* Line 1455 of yacc.c  */
#line 11787 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_info.db_type= (yyvsp[(2) - (3)].db_type); }
    break;

  case 1755:

/* Line 1455 of yacc.c  */
#line 11789 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_info.db_type= NULL; }
    break;

  case 1756:

/* Line 1455 of yacc.c  */
#line 11791 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_FIELDS;
            if ((yyvsp[(5) - (6)].simple_string))
              (yyvsp[(4) - (6)].table)->change_db((yyvsp[(5) - (6)].simple_string));
            if (prepare_schema_table(YYTHD, lex, (yyvsp[(4) - (6)].table), SCH_COLUMNS))
              MYSQL_YYABORT;
          }
    break;

  case 1757:

/* Line 1455 of yacc.c  */
#line 11800 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_BINLOGS;
          }
    break;

  case 1758:

/* Line 1455 of yacc.c  */
#line 11804 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_SLAVE_HOSTS;
          }
    break;

  case 1759:

/* Line 1455 of yacc.c  */
#line 11808 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_BINLOG_EVENTS;
          }
    break;

  case 1761:

/* Line 1455 of yacc.c  */
#line 11813 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_RELAYLOG_EVENTS;
          }
    break;

  case 1763:

/* Line 1455 of yacc.c  */
#line 11818 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_KEYS;
            if ((yyvsp[(4) - (5)].simple_string))
              (yyvsp[(3) - (5)].table)->change_db((yyvsp[(4) - (5)].simple_string));
            if (prepare_schema_table(YYTHD, lex, (yyvsp[(3) - (5)].table), SCH_STATISTICS))
              MYSQL_YYABORT;
          }
    break;

  case 1764:

/* Line 1455 of yacc.c  */
#line 11827 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_STORAGE_ENGINES;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_ENGINES))
              MYSQL_YYABORT;
          }
    break;

  case 1765:

/* Line 1455 of yacc.c  */
#line 11834 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_AUTHORS;
            push_warning_printf(YYTHD, MYSQL_ERROR::WARN_LEVEL_WARN,
                                ER_WARN_DEPRECATED_SYNTAX_NO_REPLACEMENT,
                                ER(ER_WARN_DEPRECATED_SYNTAX_NO_REPLACEMENT),
                                "SHOW AUTHORS");
          }
    break;

  case 1766:

/* Line 1455 of yacc.c  */
#line 11843 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_CONTRIBUTORS;
            push_warning_printf(YYTHD, MYSQL_ERROR::WARN_LEVEL_WARN,
                                ER_WARN_DEPRECATED_SYNTAX_NO_REPLACEMENT,
                                ER(ER_WARN_DEPRECATED_SYNTAX_NO_REPLACEMENT),
                                "SHOW CONTRIBUTORS");
          }
    break;

  case 1767:

/* Line 1455 of yacc.c  */
#line 11852 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_PRIVILEGES;
          }
    break;

  case 1768:

/* Line 1455 of yacc.c  */
#line 11857 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (void) create_select_for_variable("warning_count"); }
    break;

  case 1769:

/* Line 1455 of yacc.c  */
#line 11859 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (void) create_select_for_variable("error_count"); }
    break;

  case 1770:

/* Line 1455 of yacc.c  */
#line 11861 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sql_command = SQLCOM_SHOW_WARNS;}
    break;

  case 1771:

/* Line 1455 of yacc.c  */
#line 11863 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sql_command = SQLCOM_SHOW_ERRORS;}
    break;

  case 1772:

/* Line 1455 of yacc.c  */
#line 11865 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sql_command = SQLCOM_SHOW_PROFILES; }
    break;

  case 1773:

/* Line 1455 of yacc.c  */
#line 11867 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_PROFILE;
            if (prepare_schema_table(YYTHD, lex, NULL, SCH_PROFILES) != 0)
              YYABORT;
          }
    break;

  case 1774:

/* Line 1455 of yacc.c  */
#line 11874 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS;
            lex->option_type= (yyvsp[(1) - (3)].var_type);
            if (prepare_schema_table(YYTHD, lex, 0, SCH_STATUS))
              MYSQL_YYABORT;
          }
    break;

  case 1775:

/* Line 1455 of yacc.c  */
#line 11882 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_PROCESSLIST;}
    break;

  case 1776:

/* Line 1455 of yacc.c  */
#line 11884 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_VARIABLES;
            lex->option_type= (yyvsp[(1) - (3)].var_type);
            if (prepare_schema_table(YYTHD, lex, 0, SCH_VARIABLES))
              MYSQL_YYABORT;
          }
    break;

  case 1777:

/* Line 1455 of yacc.c  */
#line 11892 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_CHARSETS;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_CHARSETS))
              MYSQL_YYABORT;
          }
    break;

  case 1778:

/* Line 1455 of yacc.c  */
#line 11899 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_COLLATIONS;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_COLLATIONS))
              MYSQL_YYABORT;
          }
    break;

  case 1779:

/* Line 1455 of yacc.c  */
#line 11906 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_GRANTS;
            LEX_USER *curr_user;
            if (!(curr_user= (LEX_USER*) lex->thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            bzero(curr_user, sizeof(st_lex_user));
            lex->grant_user= curr_user;
          }
    break;

  case 1780:

/* Line 1455 of yacc.c  */
#line 11916 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_GRANTS;
            lex->grant_user=(yyvsp[(3) - (3)].lex_user);
            lex->grant_user->password=null_lex_str;
          }
    break;

  case 1781:

/* Line 1455 of yacc.c  */
#line 11923 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command=SQLCOM_SHOW_CREATE_DB;
            Lex->create_info.options=(yyvsp[(3) - (4)].num);
            Lex->name= (yyvsp[(4) - (4)].lex_str);
          }
    break;

  case 1782:

/* Line 1455 of yacc.c  */
#line 11929 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_SHOW_CREATE;
            if (!lex->select_lex.add_table_to_list(YYTHD, (yyvsp[(3) - (3)].table), NULL,0))
              MYSQL_YYABORT;
            lex->only_view= 0;
            lex->create_info.storage_media= HA_SM_DEFAULT;
          }
    break;

  case 1783:

/* Line 1455 of yacc.c  */
#line 11938 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_SHOW_CREATE;
            if (!lex->select_lex.add_table_to_list(YYTHD, (yyvsp[(3) - (3)].table), NULL, 0))
              MYSQL_YYABORT;
            lex->only_view= 1;
          }
    break;

  case 1784:

/* Line 1455 of yacc.c  */
#line 11946 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_MASTER_STAT;
          }
    break;

  case 1785:

/* Line 1455 of yacc.c  */
#line 11950 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_SLAVE_STAT;
            Lex->verbose= 1;
          }
    break;

  case 1786:

/* Line 1455 of yacc.c  */
#line 11955 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->mi.connection_name= thd->variables.default_master_connection;
            lex->sql_command = SQLCOM_SHOW_SLAVE_STAT;
            lex->verbose= 0;
          }
    break;

  case 1787:

/* Line 1455 of yacc.c  */
#line 11963 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_SLAVE_STAT;
            Lex->verbose= 0;
          }
    break;

  case 1788:

/* Line 1455 of yacc.c  */
#line 11968 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
           LEX *lex= Lex;
           lex->sql_command= SQLCOM_SHOW_CLIENT_STATS;
           if (prepare_schema_table(YYTHD, lex, 0, SCH_CLIENT_STATS))
             MYSQL_YYABORT;
          }
    break;

  case 1789:

/* Line 1455 of yacc.c  */
#line 11975 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_USER_STATS;
             if (prepare_schema_table(YYTHD, lex, 0, SCH_USER_STATS))
               MYSQL_YYABORT;
          }
    break;

  case 1790:

/* Line 1455 of yacc.c  */
#line 11982 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TABLE_STATS;
             if (prepare_schema_table(YYTHD, lex, 0, SCH_TABLE_STATS))
               MYSQL_YYABORT;
          }
    break;

  case 1791:

/* Line 1455 of yacc.c  */
#line 11989 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_INDEX_STATS;
             if (prepare_schema_table(YYTHD, lex, 0, SCH_INDEX_STATS))
               MYSQL_YYABORT;
          }
    break;

  case 1792:

/* Line 1455 of yacc.c  */
#line 11996 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sql_command = SQLCOM_SHOW_CREATE_PROC;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1793:

/* Line 1455 of yacc.c  */
#line 12003 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sql_command = SQLCOM_SHOW_CREATE_FUNC;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1794:

/* Line 1455 of yacc.c  */
#line 12010 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_CREATE_TRIGGER;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1795:

/* Line 1455 of yacc.c  */
#line 12016 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS_PROC;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_PROCEDURES))
              MYSQL_YYABORT;
          }
    break;

  case 1796:

/* Line 1455 of yacc.c  */
#line 12023 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS_FUNC;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_PROCEDURES))
              MYSQL_YYABORT;
          }
    break;

  case 1797:

/* Line 1455 of yacc.c  */
#line 12030 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_SHOW_PROC_CODE;
            Lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1798:

/* Line 1455 of yacc.c  */
#line 12035 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_SHOW_FUNC_CODE;
            Lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1799:

/* Line 1455 of yacc.c  */
#line 12040 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->spname= (yyvsp[(3) - (3)].spname);
            Lex->sql_command = SQLCOM_SHOW_CREATE_EVENT;
          }
    break;

  case 1800:

/* Line 1455 of yacc.c  */
#line 12045 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Lex->sql_command= SQLCOM_SHOW_EXPLAIN;
            if (prepare_schema_table(thd, Lex, 0, SCH_EXPLAIN))
              MYSQL_YYABORT;
            add_value_to_list(thd, (yyvsp[(3) - (3)].item));
          }
    break;

  case 1801:

/* Line 1455 of yacc.c  */
#line 12056 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_STATUS; }
    break;

  case 1802:

/* Line 1455 of yacc.c  */
#line 12058 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_MUTEX; }
    break;

  case 1803:

/* Line 1455 of yacc.c  */
#line 12060 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_LOGS; }
    break;

  case 1808:

/* Line 1455 of yacc.c  */
#line 12074 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.simple_string)= 0; }
    break;

  case 1809:

/* Line 1455 of yacc.c  */
#line 12075 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.simple_string)= (yyvsp[(2) - (2)].lex_str).str; }
    break;

  case 1810:

/* Line 1455 of yacc.c  */
#line 12079 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->verbose=0; }
    break;

  case 1811:

/* Line 1455 of yacc.c  */
#line 12080 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->verbose=1; }
    break;

  case 1814:

/* Line 1455 of yacc.c  */
#line 12089 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->mi.log_file_name = 0; }
    break;

  case 1815:

/* Line 1455 of yacc.c  */
#line 12090 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->mi.log_file_name = (yyvsp[(2) - (2)].lex_str).str; }
    break;

  case 1816:

/* Line 1455 of yacc.c  */
#line 12094 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->mi.pos = 4; /* skip magic number */ }
    break;

  case 1817:

/* Line 1455 of yacc.c  */
#line 12095 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->mi.pos = (yyvsp[(2) - (2)].ulonglong_number); }
    break;

  case 1819:

/* Line 1455 of yacc.c  */
#line 12101 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->wild= new (YYTHD->mem_root) String((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length,
                                                    system_charset_info);
            if (Lex->wild == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1820:

/* Line 1455 of yacc.c  */
#line 12108 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->where= normalize_cond((yyvsp[(2) - (2)].item));
            if ((yyvsp[(2) - (2)].item))
              (yyvsp[(2) - (2)].item)->top_level_item();
          }
    break;

  case 1821:

/* Line 1455 of yacc.c  */
#line 12118 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
            lex->sql_command= SQLCOM_SHOW_FIELDS;
            lex->select_lex.db= 0;
            lex->verbose= 0;
            if (prepare_schema_table(YYTHD, lex, (yyvsp[(2) - (2)].table), SCH_COLUMNS))
              MYSQL_YYABORT;
          }
    break;

  case 1822:

/* Line 1455 of yacc.c  */
#line 12128 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1823:

/* Line 1455 of yacc.c  */
#line 12130 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->describe|= DESCRIBE_NORMAL; }
    break;

  case 1824:

/* Line 1455 of yacc.c  */
#line 12132 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->select_lex.options|= SELECT_DESCRIBE;
          }
    break;

  case 1827:

/* Line 1455 of yacc.c  */
#line 12144 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1828:

/* Line 1455 of yacc.c  */
#line 12145 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->describe|= DESCRIBE_EXTENDED; }
    break;

  case 1829:

/* Line 1455 of yacc.c  */
#line 12146 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->describe|= DESCRIBE_PARTITIONS; }
    break;

  case 1830:

/* Line 1455 of yacc.c  */
#line 12150 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1831:

/* Line 1455 of yacc.c  */
#line 12151 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->wild= (yyvsp[(1) - (1)].string); }
    break;

  case 1832:

/* Line 1455 of yacc.c  */
#line 12153 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->wild= new (YYTHD->mem_root) String((const char*) (yyvsp[(1) - (1)].lex_str).str,
                                                    (yyvsp[(1) - (1)].lex_str).length,
                                                    system_charset_info);
            if (Lex->wild == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1833:

/* Line 1455 of yacc.c  */
#line 12167 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_FLUSH;
            lex->type= 0;
            lex->no_write_to_binlog= (yyvsp[(2) - (2)].num);
          }
    break;

  case 1834:

/* Line 1455 of yacc.c  */
#line 12174 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1835:

/* Line 1455 of yacc.c  */
#line 12179 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->type|= REFRESH_TABLES;
            /*
              Set type of metadata and table locks for
              FLUSH TABLES table_list [WITH READ LOCK].
            */
            YYPS->m_lock_type= TL_READ_NO_INSERT;
            YYPS->m_mdl_type= MDL_SHARED_HIGH_PRIO;
          }
    break;

  case 1836:

/* Line 1455 of yacc.c  */
#line 12188 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1837:

/* Line 1455 of yacc.c  */
#line 12189 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1839:

/* Line 1455 of yacc.c  */
#line 12194 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1840:

/* Line 1455 of yacc.c  */
#line 12196 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            TABLE_LIST *tables= Lex->query_tables;
            Lex->type|= REFRESH_READ_LOCK | (yyvsp[(4) - (4)].num);
            for (; tables; tables= tables->next_global)
            {
              tables->mdl_request.set_type(MDL_SHARED_NO_WRITE);
              tables->required_type= FRMTYPE_TABLE; /* Don't try to flush views. */
              tables->open_type= OT_BASE_ONLY;      /* Ignore temporary tables. */
            }
          }
    break;

  case 1842:

/* Line 1455 of yacc.c  */
#line 12211 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1843:

/* Line 1455 of yacc.c  */
#line 12216 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_ERROR_LOG; }
    break;

  case 1844:

/* Line 1455 of yacc.c  */
#line 12218 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_ENGINE_LOG; }
    break;

  case 1845:

/* Line 1455 of yacc.c  */
#line 12220 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_GENERAL_LOG; }
    break;

  case 1846:

/* Line 1455 of yacc.c  */
#line 12222 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_SLOW_LOG; }
    break;

  case 1847:

/* Line 1455 of yacc.c  */
#line 12224 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_BINARY_LOG; }
    break;

  case 1848:

/* Line 1455 of yacc.c  */
#line 12226 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->type & REFRESH_RELAY_LOG)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "FLUSH", "RELAY LOGS");
              MYSQL_YYABORT;
	    }
            lex->type|= REFRESH_RELAY_LOG;
            lex->relay_log_connection_name= lex->mi.connection_name;
           }
    break;

  case 1849:

/* Line 1455 of yacc.c  */
#line 12237 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_QUERY_CACHE_FREE; }
    break;

  case 1850:

/* Line 1455 of yacc.c  */
#line 12239 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_HOSTS; }
    break;

  case 1851:

/* Line 1455 of yacc.c  */
#line 12241 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_GRANT; }
    break;

  case 1852:

/* Line 1455 of yacc.c  */
#line 12243 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->type|= REFRESH_LOG;
            Lex->relay_log_connection_name.str= (char*) "";
            Lex->relay_log_connection_name.length= 0;
          }
    break;

  case 1853:

/* Line 1455 of yacc.c  */
#line 12249 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_STATUS; }
    break;

  case 1854:

/* Line 1455 of yacc.c  */
#line 12251 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            LEX *lex= Lex;
            if (lex->type & REFRESH_SLAVE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "FLUSH","SLAVE");
              MYSQL_YYABORT;
	    }
            lex->type|= REFRESH_SLAVE;
            lex->reset_slave_info.all= false;
          }
    break;

  case 1855:

/* Line 1455 of yacc.c  */
#line 12262 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_CLIENT_STATS; }
    break;

  case 1856:

/* Line 1455 of yacc.c  */
#line 12264 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_USER_STATS; }
    break;

  case 1857:

/* Line 1455 of yacc.c  */
#line 12266 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_TABLE_STATS; }
    break;

  case 1858:

/* Line 1455 of yacc.c  */
#line 12268 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_INDEX_STATS; }
    break;

  case 1859:

/* Line 1455 of yacc.c  */
#line 12270 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_MASTER; }
    break;

  case 1860:

/* Line 1455 of yacc.c  */
#line 12272 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_DES_KEY_FILE; }
    break;

  case 1861:

/* Line 1455 of yacc.c  */
#line 12274 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_USER_RESOURCES; }
    break;

  case 1862:

/* Line 1455 of yacc.c  */
#line 12278 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1863:

/* Line 1455 of yacc.c  */
#line 12279 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1864:

/* Line 1455 of yacc.c  */
#line 12283 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {(yyval.num)= 0;}
    break;

  case 1865:

/* Line 1455 of yacc.c  */
#line 12284 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {(yyval.num)= REFRESH_CHECKPOINT; }
    break;

  case 1866:

/* Line 1455 of yacc.c  */
#line 12288 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_RESET; lex->type=0;
          }
    break;

  case 1867:

/* Line 1455 of yacc.c  */
#line 12293 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1870:

/* Line 1455 of yacc.c  */
#line 12302 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_SLAVE; }
    break;

  case 1871:

/* Line 1455 of yacc.c  */
#line 12304 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { }
    break;

  case 1872:

/* Line 1455 of yacc.c  */
#line 12305 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_MASTER; }
    break;

  case 1873:

/* Line 1455 of yacc.c  */
#line 12306 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_QUERY_CACHE;}
    break;

  case 1874:

/* Line 1455 of yacc.c  */
#line 12310 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->reset_slave_info.all= false; }
    break;

  case 1875:

/* Line 1455 of yacc.c  */
#line 12311 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->reset_slave_info.all= true; }
    break;

  case 1876:

/* Line 1455 of yacc.c  */
#line 12316 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type=0;
            lex->sql_command = SQLCOM_PURGE;
          }
    break;

  case 1877:

/* Line 1455 of yacc.c  */
#line 12322 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1879:

/* Line 1455 of yacc.c  */
#line 12331 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->to_log = (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 1880:

/* Line 1455 of yacc.c  */
#line 12335 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->value_list.empty();
            lex->value_list.push_front((yyvsp[(2) - (2)].item));
            lex->sql_command= SQLCOM_PURGE_BEFORE;
          }
    break;

  case 1881:

/* Line 1455 of yacc.c  */
#line 12347 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->value_list.empty();
            lex->users_list.empty();
            lex->sql_command= SQLCOM_KILL;
          }
    break;

  case 1882:

/* Line 1455 of yacc.c  */
#line 12354 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->kill_signal= (killed_state) ((yyvsp[(3) - (5)].num) | (yyvsp[(4) - (5)].num));
          }
    break;

  case 1883:

/* Line 1455 of yacc.c  */
#line 12360 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= (int) KILL_HARD_BIT; }
    break;

  case 1884:

/* Line 1455 of yacc.c  */
#line 12361 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= (int) KILL_HARD_BIT; }
    break;

  case 1885:

/* Line 1455 of yacc.c  */
#line 12362 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1886:

/* Line 1455 of yacc.c  */
#line 12365 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= (int) KILL_CONNECTION; }
    break;

  case 1887:

/* Line 1455 of yacc.c  */
#line 12366 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= (int) KILL_CONNECTION; }
    break;

  case 1888:

/* Line 1455 of yacc.c  */
#line 12367 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= (int) KILL_QUERY; }
    break;

  case 1889:

/* Line 1455 of yacc.c  */
#line 12372 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
          Lex->value_list.push_front((yyval.item));
          Lex->kill_type= KILL_TYPE_ID;
         }
    break;

  case 1890:

/* Line 1455 of yacc.c  */
#line 12377 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->users_list.push_back((yyvsp[(2) - (2)].lex_user));
            Lex->kill_type= KILL_TYPE_USER;
          }
    break;

  case 1891:

/* Line 1455 of yacc.c  */
#line 12387 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_CHANGE_DB;
            lex->select_lex.db= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 1892:

/* Line 1455 of yacc.c  */
#line 12398 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), 
                       (yyvsp[(2) - (2)].filetype) == FILETYPE_CSV ? "LOAD DATA" : "LOAD XML");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1893:

/* Line 1455 of yacc.c  */
#line 12410 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_LOAD;
            lex->local_file=  (yyvsp[(5) - (7)].num);
            lex->duplicates= DUP_ERROR;
            lex->ignore= 0;
            if (!(lex->exchange= new sql_exchange((yyvsp[(7) - (7)].lex_str).str, 0, (yyvsp[(2) - (7)].filetype))))
              MYSQL_YYABORT;
          }
    break;

  case 1894:

/* Line 1455 of yacc.c  */
#line 12420 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(12) - (12)].table), NULL, TL_OPTION_UPDATING,
                                           (yyvsp[(4) - (12)].lock_type), MDL_SHARED_WRITE))
              MYSQL_YYABORT;
            lex->field_list.empty();
            lex->update_list.empty();
            lex->value_list.empty();
          }
    break;

  case 1895:

/* Line 1455 of yacc.c  */
#line 12430 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->exchange->cs= (yyvsp[(14) - (14)].charset); }
    break;

  case 1896:

/* Line 1455 of yacc.c  */
#line 12434 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1897:

/* Line 1455 of yacc.c  */
#line 12438 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.filetype)= FILETYPE_CSV; }
    break;

  case 1898:

/* Line 1455 of yacc.c  */
#line 12439 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.filetype)= FILETYPE_XML; }
    break;

  case 1899:

/* Line 1455 of yacc.c  */
#line 12443 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=0;}
    break;

  case 1900:

/* Line 1455 of yacc.c  */
#line 12444 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=1;}
    break;

  case 1901:

/* Line 1455 of yacc.c  */
#line 12448 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_DEFAULT; }
    break;

  case 1902:

/* Line 1455 of yacc.c  */
#line 12450 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              Ignore this option in SP to avoid problem with query cache and
              triggers with non default priority locks
            */
            (yyval.lock_type)= (Lex->sphead ? TL_WRITE_DEFAULT : TL_WRITE_CONCURRENT_INSERT);
          }
    break;

  case 1903:

/* Line 1455 of yacc.c  */
#line 12457 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1904:

/* Line 1455 of yacc.c  */
#line 12461 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->duplicates=DUP_ERROR; }
    break;

  case 1905:

/* Line 1455 of yacc.c  */
#line 12462 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->duplicates=DUP_REPLACE; }
    break;

  case 1906:

/* Line 1455 of yacc.c  */
#line 12463 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ignore= 1; }
    break;

  case 1911:

/* Line 1455 of yacc.c  */
#line 12478 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->field_term= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1912:

/* Line 1455 of yacc.c  */
#line 12483 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            DBUG_ASSERT(lex->exchange != 0);
            lex->exchange->enclosed= (yyvsp[(4) - (4)].string);
            lex->exchange->opt_enclosed= 1;
          }
    break;

  case 1913:

/* Line 1455 of yacc.c  */
#line 12490 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->enclosed= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1914:

/* Line 1455 of yacc.c  */
#line 12495 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->escaped= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1919:

/* Line 1455 of yacc.c  */
#line 12513 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->line_term= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1920:

/* Line 1455 of yacc.c  */
#line 12518 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->line_start= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1921:

/* Line 1455 of yacc.c  */
#line 12525 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { }
    break;

  case 1922:

/* Line 1455 of yacc.c  */
#line 12527 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->exchange->line_term = (yyvsp[(4) - (4)].string); }
    break;

  case 1924:

/* Line 1455 of yacc.c  */
#line 12532 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->skip_lines= atol((yyvsp[(2) - (3)].lex_str).str);
          }
    break;

  case 1925:

/* Line 1455 of yacc.c  */
#line 12539 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { }
    break;

  case 1926:

/* Line 1455 of yacc.c  */
#line 12541 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { }
    break;

  case 1927:

/* Line 1455 of yacc.c  */
#line 12545 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1928:

/* Line 1455 of yacc.c  */
#line 12546 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1929:

/* Line 1455 of yacc.c  */
#line 12547 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1930:

/* Line 1455 of yacc.c  */
#line 12552 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(3) - (3)].item)); }
    break;

  case 1931:

/* Line 1455 of yacc.c  */
#line 12554 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(1) - (1)].item)); }
    break;

  case 1932:

/* Line 1455 of yacc.c  */
#line 12558 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {(yyval.item)= (yyvsp[(1) - (1)].item);}
    break;

  case 1933:

/* Line 1455 of yacc.c  */
#line 12560 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_user_var_as_out_param((yyvsp[(2) - (2)].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1934:

/* Line 1455 of yacc.c  */
#line 12568 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1935:

/* Line 1455 of yacc.c  */
#line 12569 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1938:

/* Line 1455 of yacc.c  */
#line 12579 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->update_list.push_back((yyvsp[(1) - (5)].item)) || 
                lex->value_list.push_back((yyvsp[(4) - (5)].item)))
                MYSQL_YYABORT;
            (yyvsp[(4) - (5)].item)->set_name_no_truncate((yyvsp[(3) - (5)].simple_string), (uint) ((yyvsp[(5) - (5)].simple_string) - (yyvsp[(3) - (5)].simple_string)), YYTHD->charset());
          }
    break;

  case 1939:

/* Line 1455 of yacc.c  */
#line 12592 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX_STRING tmp;
            THD *thd= YYTHD;
            CHARSET_INFO *cs_con= thd->variables.collation_connection;
            CHARSET_INFO *cs_cli= thd->variables.character_set_client;
            uint repertoire= thd->lex->text_string_is_7bit &&
                             my_charset_is_ascii_based(cs_cli) ?
                             MY_REPERTOIRE_ASCII : MY_REPERTOIRE_UNICODE30;
            if (thd->charset_is_collation_connection ||
                (repertoire == MY_REPERTOIRE_ASCII &&
                 my_charset_is_ascii_based(cs_con)))
              tmp= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&tmp, cs_con, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, cs_cli))
                MYSQL_YYABORT;
            }
            (yyval.item)= new (thd->mem_root) Item_string(tmp.str, tmp.length, cs_con,
                                                DERIVATION_COERCIBLE,
                                                repertoire);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1940:

/* Line 1455 of yacc.c  */
#line 12616 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            uint repertoire= Lex->text_string_is_7bit ?
                             MY_REPERTOIRE_ASCII : MY_REPERTOIRE_UNICODE30;
            DBUG_ASSERT(my_charset_is_ascii_based(national_charset_info));
            (yyval.item)= new (YYTHD->mem_root) Item_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length,
                                                  national_charset_info,
                                                  DERIVATION_COERCIBLE,
                                                  repertoire);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1941:

/* Line 1455 of yacc.c  */
#line 12628 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item_string *str= new (YYTHD->mem_root) Item_string((yyvsp[(2) - (2)].lex_str).str,
                                                                (yyvsp[(2) - (2)].lex_str).length, (yyvsp[(1) - (2)].charset));
            if (str == NULL)
              MYSQL_YYABORT;
            str->set_repertoire_from_value();
            str->set_cs_specified(TRUE);

            (yyval.item)= str;
          }
    break;

  case 1942:

/* Line 1455 of yacc.c  */
#line 12639 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item_string* item= (Item_string*) (yyvsp[(1) - (2)].item);
            item->append((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (!(item->collation.repertoire & MY_REPERTOIRE_EXTENDED))
            {
              /*
                 If the string has been pure ASCII so far,
                 check the new part.
              */
              CHARSET_INFO *cs= YYTHD->variables.collation_connection;
              item->collation.repertoire|= my_string_repertoire(cs,
                                                                (yyvsp[(2) - (2)].lex_str).str,
                                                                (yyvsp[(2) - (2)].lex_str).length);
            }
          }
    break;

  case 1943:

/* Line 1455 of yacc.c  */
#line 12658 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.string)= new (YYTHD->mem_root) String((yyvsp[(1) - (1)].lex_str).str,
                                             (yyvsp[(1) - (1)].lex_str).length,
                                             YYTHD->variables.collation_connection);
            if ((yyval.string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1944:

/* Line 1455 of yacc.c  */
#line 12666 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_hex_hybrid((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fields, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            (yyval.string)= tmp->val_str((String*) 0);
          }
    break;

  case 1945:

/* Line 1455 of yacc.c  */
#line 12678 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_hex_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            tmp->quick_fix_field();
            (yyval.string)= tmp->val_str((String*) 0);
          }
    break;

  case 1946:

/* Line 1455 of yacc.c  */
#line 12686 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_bin_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fields, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            (yyval.string)= tmp->val_str((String*) 0);
          }
    break;

  case 1947:

/* Line 1455 of yacc.c  */
#line 12701 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            Item_param *item;
            if (! lex->parsing_options.allows_variable)
            {
              my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
              MYSQL_YYABORT;
            }
            item= new (thd->mem_root) Item_param((uint) (lip->get_tok_start() - thd->query()));
            if (!((yyval.item)= item) || lex->param_list.push_back(item))
            {
              my_message(ER_OUT_OF_RESOURCES, ER(ER_OUT_OF_RESOURCES), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1948:

/* Line 1455 of yacc.c  */
#line 12721 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item); }
    break;

  case 1949:

/* Line 1455 of yacc.c  */
#line 12722 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item_num); }
    break;

  case 1950:

/* Line 1455 of yacc.c  */
#line 12724 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyvsp[(2) - (2)].item_num)->max_length++;
            (yyval.item)= (yyvsp[(2) - (2)].item_num)->neg();
          }
    break;

  case 1951:

/* Line 1455 of yacc.c  */
#line 12731 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item); }
    break;

  case 1952:

/* Line 1455 of yacc.c  */
#line 12732 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item_num); }
    break;

  case 1953:

/* Line 1455 of yacc.c  */
#line 12734 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_null();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            YYLIP->next_state= MY_LEX_OPERATOR_OR_IDENT;
          }
    break;

  case 1954:

/* Line 1455 of yacc.c  */
#line 12741 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_int((char*) "FALSE",0,1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1955:

/* Line 1455 of yacc.c  */
#line 12747 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_int((char*) "TRUE",1,1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1956:

/* Line 1455 of yacc.c  */
#line 12753 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_hex_hybrid((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1957:

/* Line 1455 of yacc.c  */
#line 12759 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_hex_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1958:

/* Line 1455 of yacc.c  */
#line 12765 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_bin_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1959:

/* Line 1455 of yacc.c  */
#line 12771 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_hex_string((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fieds, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            String *str= tmp->val_str((String*) 0);

            Item_string *item_str;
            item_str= new (YYTHD->mem_root)
                        Item_string(NULL, /* name will be set in select_item */
                                    str ? str->ptr() : "",
                                    str ? str->length() : 0,
                                    (yyvsp[(1) - (2)].charset));
            if (!item_str ||
                !item_str->check_well_formed_result(&item_str->str_value, TRUE))
            {
              MYSQL_YYABORT;
            }

            item_str->set_repertoire_from_value();
            item_str->set_cs_specified(TRUE);

            (yyval.item)= item_str;
          }
    break;

  case 1960:

/* Line 1455 of yacc.c  */
#line 12800 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_bin_string((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fieds, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            String *str= tmp->val_str((String*) 0);

            Item_string *item_str;
            item_str= new (YYTHD->mem_root)
                        Item_string(NULL, /* name will be set in select_item */
                                    str ? str->ptr() : "",
                                    str ? str->length() : 0,
                                    (yyvsp[(1) - (2)].charset));
            if (!item_str ||
                !item_str->check_well_formed_result(&item_str->str_value, TRUE))
            {
              MYSQL_YYABORT;
            }

            item_str->set_cs_specified(TRUE);

            (yyval.item)= item_str;
          }
    break;

  case 1961:

/* Line 1455 of yacc.c  */
#line 12827 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item); }
    break;

  case 1962:

/* Line 1455 of yacc.c  */
#line 12828 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item); }
    break;

  case 1963:

/* Line 1455 of yacc.c  */
#line 12829 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item); }
    break;

  case 1964:

/* Line 1455 of yacc.c  */
#line 12834 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            int error;
            (yyval.item_num)= new (YYTHD->mem_root)
                  Item_int((yyvsp[(1) - (1)].lex_str).str,
                           (longlong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, NULL, &error),
                           (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1965:

/* Line 1455 of yacc.c  */
#line 12844 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            int error;
            (yyval.item_num)= new (YYTHD->mem_root)
                  Item_int((yyvsp[(1) - (1)].lex_str).str,
                           (longlong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, NULL, &error),
                           (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1966:

/* Line 1455 of yacc.c  */
#line 12854 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item_num)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1967:

/* Line 1455 of yacc.c  */
#line 12860 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item_num)= new (YYTHD->mem_root) Item_decimal((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length,
                                                   YYTHD->charset());
            if (((yyval.item_num) == NULL) || (YYTHD->is_error()))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1968:

/* Line 1455 of yacc.c  */
#line 12869 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item_num)= new (YYTHD->mem_root) Item_float((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (((yyval.item_num) == NULL) || (YYTHD->is_error()))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1969:

/* Line 1455 of yacc.c  */
#line 12883 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 1970:

/* Line 1455 of yacc.c  */
#line 12884 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 1971:

/* Line 1455 of yacc.c  */
#line 12889 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            (yyval.item)= new (YYTHD->mem_root) Item_field(Lex->current_context(),
                                                 NullS, (yyvsp[(1) - (3)].lex_str).str, "*");
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            sel->with_wild++;
          }
    break;

  case 1972:

/* Line 1455 of yacc.c  */
#line 12898 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            SELECT_LEX *sel= Select;
            const char* schema= thd->client_capabilities & CLIENT_NO_SCHEMA ?
                                  NullS : (yyvsp[(1) - (5)].lex_str).str;
            (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                               schema,
                                               (yyvsp[(3) - (5)].lex_str).str,"*");
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            sel->with_wild++;
          }
    break;

  case 1973:

/* Line 1455 of yacc.c  */
#line 12913 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 1974:

/* Line 1455 of yacc.c  */
#line 12918 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_variable_t *spv;
            sp_pcontext *spc = lex->spcont;
            if (spc && (spv = spc->find_variable(&(yyvsp[(1) - (1)].lex_str))))
            {
              /* We're compiling a stored procedure and found a variable */
              if (! lex->parsing_options.allows_variable)
              {
                my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
                MYSQL_YYABORT;
              }

              Item_splocal *splocal;
              splocal= new (thd->mem_root)
                         Item_splocal((yyvsp[(1) - (1)].lex_str), spv->offset, spv->type,
                                      lip->get_tok_start_prev() - lex->sphead->m_tmp_query,
                                      lip->get_tok_end() - lip->get_tok_start_prev());
              if (splocal == NULL)
                MYSQL_YYABORT;
#ifndef DBUG_OFF
              splocal->m_sp= lex->sphead;
#endif
              (yyval.item)= splocal;
              lex->safe_to_cache_query=0;
            }
            else
            {
              SELECT_LEX *sel=Select;
              if ((sel->parsing_place != IN_HAVING) ||
                  (sel->get_in_sum_expr() > 0))
              {
                (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                   NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
              }
              else
              {
                (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                                 NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
              }
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1975:

/* Line 1455 of yacc.c  */
#line 12964 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 1976:

/* Line 1455 of yacc.c  */
#line 12969 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            SELECT_LEX *sel=Select;
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                               NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1977:

/* Line 1455 of yacc.c  */
#line 12986 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 1978:

/* Line 1455 of yacc.c  */
#line 12991 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            /*
              FIXME This will work ok in simple_ident_nospvar case because
              we can't meet simple_ident_nospvar in trigger now. But it
              should be changed in future.
            */
            if (lex->sphead && lex->sphead->m_type == TYPE_ENUM_TRIGGER &&
                (!my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "NEW") ||
                 !my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "OLD")))
            {
              Item_trigger_field *trg_fld;
              bool new_row= ((yyvsp[(1) - (3)].lex_str).str[0]=='N' || (yyvsp[(1) - (3)].lex_str).str[0]=='n');

              if (lex->trg_chistics.event == TRG_EVENT_INSERT &&
                  !new_row)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0), "OLD", "on INSERT");
                MYSQL_YYABORT;
              }

              if (lex->trg_chistics.event == TRG_EVENT_DELETE &&
                  new_row)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0), "NEW", "on DELETE");
                MYSQL_YYABORT;
              }

              DBUG_ASSERT(!new_row ||
                          (lex->trg_chistics.event == TRG_EVENT_INSERT ||
                           lex->trg_chistics.event == TRG_EVENT_UPDATE));
              const bool read_only=
                !(new_row && lex->trg_chistics.action_time == TRG_ACTION_BEFORE);
              trg_fld= new (thd->mem_root)
                         Item_trigger_field(Lex->current_context(),
                                            new_row ?
                                              Item_trigger_field::NEW_ROW:
                                              Item_trigger_field::OLD_ROW,
                                            (yyvsp[(3) - (3)].lex_str).str,
                                            SELECT_ACL,
                                            read_only);
              if (trg_fld == NULL)
                MYSQL_YYABORT;

              /*
                Let us add this item to list of all Item_trigger_field objects
                in trigger.
              */
              lex->trg_table_fields.link_in_list(trg_fld,
                                                 &trg_fld->next_trg_field);

              (yyval.item)= trg_fld;
            }
            else
            {
              SELECT_LEX *sel= lex->current_select;
              if (sel->no_table_names_allowed)
              {
                my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                         MYF(0), (yyvsp[(1) - (3)].lex_str).str, thd->where);
              }
              if ((sel->parsing_place != IN_HAVING) ||
                  (sel->get_in_sum_expr() > 0))
              {
                (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                   NullS, (yyvsp[(1) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).str);
              }
              else
              {
                (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                                 NullS, (yyvsp[(1) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).str);
              }
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1979:

/* Line 1455 of yacc.c  */
#line 13070 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->no_table_names_allowed)
            {
              my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                       MYF(0), (yyvsp[(2) - (4)].lex_str).str, thd->where);
            }
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 NullS, (yyvsp[(2) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).str);

            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                               NullS, (yyvsp[(2) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1980:

/* Line 1455 of yacc.c  */
#line 13095 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            SELECT_LEX *sel= lex->current_select;
            const char* schema= (thd->client_capabilities & CLIENT_NO_SCHEMA ?
                                 NullS : (yyvsp[(1) - (5)].lex_str).str);
            if (sel->no_table_names_allowed)
            {
              my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                       MYF(0), (yyvsp[(3) - (5)].lex_str).str, thd->where);
            }
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 schema,
                                                 (yyvsp[(3) - (5)].lex_str).str, (yyvsp[(5) - (5)].lex_str).str);
            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                               schema,
                                               (yyvsp[(3) - (5)].lex_str).str, (yyvsp[(5) - (5)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1981:

/* Line 1455 of yacc.c  */
#line 13125 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 1982:

/* Line 1455 of yacc.c  */
#line 13127 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            TABLE_LIST *table= Select->table_list.first;
            if (my_strcasecmp(table_alias_charset, (yyvsp[(1) - (5)].lex_str).str, table->db))
            {
              my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[(1) - (5)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (my_strcasecmp(table_alias_charset, (yyvsp[(3) - (5)].lex_str).str,
                              table->table_name))
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(3) - (5)].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.lex_str)=(yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 1983:

/* Line 1455 of yacc.c  */
#line 13143 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            TABLE_LIST *table= Select->table_list.first;
            if (my_strcasecmp(table_alias_charset, (yyvsp[(1) - (3)].lex_str).str, table->alias))
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(1) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.lex_str)=(yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 1984:

/* Line 1455 of yacc.c  */
#line 13152 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str);}
    break;

  case 1985:

/* Line 1455 of yacc.c  */
#line 13157 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.table)= new Table_ident((yyvsp[(1) - (1)].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1986:

/* Line 1455 of yacc.c  */
#line 13163 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.table)= new Table_ident(YYTHD, (yyvsp[(1) - (3)].lex_str),(yyvsp[(3) - (3)].lex_str),0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1987:

/* Line 1455 of yacc.c  */
#line 13169 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* For Delphi */
            (yyval.table)= new Table_ident((yyvsp[(2) - (2)].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1988:

/* Line 1455 of yacc.c  */
#line 13179 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.table)= new Table_ident((yyvsp[(1) - (2)].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1989:

/* Line 1455 of yacc.c  */
#line 13185 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.table)= new Table_ident(YYTHD, (yyvsp[(1) - (4)].lex_str),(yyvsp[(3) - (4)].lex_str),0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1990:

/* Line 1455 of yacc.c  */
#line 13194 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX_STRING db={(char*) any_db,3};
            (yyval.table)= new Table_ident(YYTHD, db,(yyvsp[(1) - (1)].lex_str),0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1991:

/* Line 1455 of yacc.c  */
#line 13203 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 1992:

/* Line 1455 of yacc.c  */
#line 13205 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_system_charset)
            {
              CHARSET_INFO *cs= system_charset_info;
              int dummy_error;
              uint wlen= cs->cset->well_formed_len(cs, (yyvsp[(1) - (1)].lex_str).str,
                                                   (yyvsp[(1) - (1)].lex_str).str+(yyvsp[(1) - (1)].lex_str).length,
                                                   (yyvsp[(1) - (1)].lex_str).length, &dummy_error);
              if (wlen < (yyvsp[(1) - (1)].lex_str).length)
              {
                ErrConvString err((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, &my_charset_bin);
                my_error(ER_INVALID_CHARACTER_STRING, MYF(0),
                         cs->csname, err.ptr());
                MYSQL_YYABORT;
              }
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            }
            else
            {
              if (thd->convert_string(&(yyval.lex_str), system_charset_info,
                                  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1993:

/* Line 1455 of yacc.c  */
#line 13235 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_system_charset)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str), system_charset_info,
                                  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1994:

/* Line 1455 of yacc.c  */
#line 13251 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_collation_connection)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str), thd->variables.collation_connection,
                                  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            } 
          }
    break;

  case 1995:

/* Line 1455 of yacc.c  */
#line 13267 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_character_set_filesystem)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str),
                                      thd->variables.character_set_filesystem,
                                      (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1996:

/* Line 1455 of yacc.c  */
#line 13283 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1997:

/* Line 1455 of yacc.c  */
#line 13285 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            (yyval.lex_str).str= thd->strmake((yyvsp[(1) - (1)].symbol).str, (yyvsp[(1) - (1)].symbol).length);
            if ((yyval.lex_str).str == NULL)
              MYSQL_YYABORT;
            (yyval.lex_str).length= (yyvsp[(1) - (1)].symbol).length;
          }
    break;

  case 1998:

/* Line 1455 of yacc.c  */
#line 13295 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1999:

/* Line 1455 of yacc.c  */
#line 13297 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            (yyval.lex_str).str= thd->strmake((yyvsp[(1) - (1)].symbol).str, (yyvsp[(1) - (1)].symbol).length);
            if ((yyval.lex_str).str == NULL)
              MYSQL_YYABORT;
            (yyval.lex_str).length= (yyvsp[(1) - (1)].symbol).length;
          }
    break;

  case 2000:

/* Line 1455 of yacc.c  */
#line 13307 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 2001:

/* Line 1455 of yacc.c  */
#line 13308 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 2002:

/* Line 1455 of yacc.c  */
#line 13309 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 2003:

/* Line 1455 of yacc.c  */
#line 13314 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            if (!((yyval.lex_user)=(LEX_USER*) thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user = (yyvsp[(1) - (1)].lex_str);
            (yyval.lex_user)->host.str= (char *) "%";
            (yyval.lex_user)->host.length= 1;
            (yyval.lex_user)->password= null_lex_str; 
            (yyval.lex_user)->plugin= empty_lex_str;
            (yyval.lex_user)->auth= empty_lex_str;

            if (check_string_char_length(&(yyval.lex_user)->user, ER(ER_USERNAME),
                                         username_char_length,
                                         system_charset_info, 0))
              MYSQL_YYABORT;
          }
    break;

  case 2004:

/* Line 1455 of yacc.c  */
#line 13331 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            if (!((yyval.lex_user)=(LEX_USER*) thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user = (yyvsp[(1) - (3)].lex_str); (yyval.lex_user)->host=(yyvsp[(3) - (3)].lex_str);
            (yyval.lex_user)->password= null_lex_str; 
            (yyval.lex_user)->plugin= empty_lex_str;
            (yyval.lex_user)->auth= empty_lex_str;

            if (check_string_char_length(&(yyval.lex_user)->user, ER(ER_USERNAME),
                                         username_char_length,
                                         system_charset_info, 0) ||
                check_host_name(&(yyval.lex_user)->host))
              MYSQL_YYABORT;
            /*
              Convert hostname part of username to lowercase.
              It's OK to use in-place lowercase as long as
              the character set is utf8.
            */
            my_casedn_str(system_charset_info, (yyval.lex_user)->host.str);
          }
    break;

  case 2005:

/* Line 1455 of yacc.c  */
#line 13353 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!((yyval.lex_user)=(LEX_USER*) YYTHD->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            /* 
              empty LEX_USER means current_user and 
              will be handled in the  get_current_user() function
              later
            */
            bzero((yyval.lex_user), sizeof(LEX_USER));
          }
    break;

  case 2006:

/* Line 1455 of yacc.c  */
#line 13367 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2007:

/* Line 1455 of yacc.c  */
#line 13368 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2008:

/* Line 1455 of yacc.c  */
#line 13369 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2009:

/* Line 1455 of yacc.c  */
#line 13370 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2010:

/* Line 1455 of yacc.c  */
#line 13371 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2011:

/* Line 1455 of yacc.c  */
#line 13372 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2012:

/* Line 1455 of yacc.c  */
#line 13373 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2013:

/* Line 1455 of yacc.c  */
#line 13374 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2014:

/* Line 1455 of yacc.c  */
#line 13375 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2015:

/* Line 1455 of yacc.c  */
#line 13376 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2016:

/* Line 1455 of yacc.c  */
#line 13377 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2017:

/* Line 1455 of yacc.c  */
#line 13378 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2018:

/* Line 1455 of yacc.c  */
#line 13379 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2019:

/* Line 1455 of yacc.c  */
#line 13380 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2020:

/* Line 1455 of yacc.c  */
#line 13381 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2021:

/* Line 1455 of yacc.c  */
#line 13382 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2022:

/* Line 1455 of yacc.c  */
#line 13383 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2023:

/* Line 1455 of yacc.c  */
#line 13384 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2024:

/* Line 1455 of yacc.c  */
#line 13385 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2025:

/* Line 1455 of yacc.c  */
#line 13386 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2026:

/* Line 1455 of yacc.c  */
#line 13387 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2027:

/* Line 1455 of yacc.c  */
#line 13388 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2028:

/* Line 1455 of yacc.c  */
#line 13389 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2029:

/* Line 1455 of yacc.c  */
#line 13390 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2030:

/* Line 1455 of yacc.c  */
#line 13391 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2031:

/* Line 1455 of yacc.c  */
#line 13392 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2032:

/* Line 1455 of yacc.c  */
#line 13393 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2033:

/* Line 1455 of yacc.c  */
#line 13394 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2034:

/* Line 1455 of yacc.c  */
#line 13395 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2035:

/* Line 1455 of yacc.c  */
#line 13396 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2036:

/* Line 1455 of yacc.c  */
#line 13397 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2037:

/* Line 1455 of yacc.c  */
#line 13398 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2038:

/* Line 1455 of yacc.c  */
#line 13399 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2039:

/* Line 1455 of yacc.c  */
#line 13400 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2040:

/* Line 1455 of yacc.c  */
#line 13401 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2041:

/* Line 1455 of yacc.c  */
#line 13402 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2042:

/* Line 1455 of yacc.c  */
#line 13403 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2043:

/* Line 1455 of yacc.c  */
#line 13404 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2044:

/* Line 1455 of yacc.c  */
#line 13405 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2045:

/* Line 1455 of yacc.c  */
#line 13406 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2046:

/* Line 1455 of yacc.c  */
#line 13407 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2047:

/* Line 1455 of yacc.c  */
#line 13408 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2048:

/* Line 1455 of yacc.c  */
#line 13409 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2049:

/* Line 1455 of yacc.c  */
#line 13410 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2050:

/* Line 1455 of yacc.c  */
#line 13411 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2051:

/* Line 1455 of yacc.c  */
#line 13412 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2052:

/* Line 1455 of yacc.c  */
#line 13413 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2053:

/* Line 1455 of yacc.c  */
#line 13414 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2054:

/* Line 1455 of yacc.c  */
#line 13415 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2055:

/* Line 1455 of yacc.c  */
#line 13416 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2056:

/* Line 1455 of yacc.c  */
#line 13417 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2057:

/* Line 1455 of yacc.c  */
#line 13418 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2058:

/* Line 1455 of yacc.c  */
#line 13419 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2059:

/* Line 1455 of yacc.c  */
#line 13420 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2060:

/* Line 1455 of yacc.c  */
#line 13421 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2061:

/* Line 1455 of yacc.c  */
#line 13422 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2062:

/* Line 1455 of yacc.c  */
#line 13423 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2063:

/* Line 1455 of yacc.c  */
#line 13424 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2064:

/* Line 1455 of yacc.c  */
#line 13425 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2065:

/* Line 1455 of yacc.c  */
#line 13435 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2066:

/* Line 1455 of yacc.c  */
#line 13436 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2067:

/* Line 1455 of yacc.c  */
#line 13437 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2068:

/* Line 1455 of yacc.c  */
#line 13438 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2069:

/* Line 1455 of yacc.c  */
#line 13439 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2070:

/* Line 1455 of yacc.c  */
#line 13440 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2071:

/* Line 1455 of yacc.c  */
#line 13441 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2072:

/* Line 1455 of yacc.c  */
#line 13442 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2073:

/* Line 1455 of yacc.c  */
#line 13443 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2074:

/* Line 1455 of yacc.c  */
#line 13444 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2075:

/* Line 1455 of yacc.c  */
#line 13445 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2076:

/* Line 1455 of yacc.c  */
#line 13446 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2077:

/* Line 1455 of yacc.c  */
#line 13447 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2078:

/* Line 1455 of yacc.c  */
#line 13448 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2079:

/* Line 1455 of yacc.c  */
#line 13449 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2080:

/* Line 1455 of yacc.c  */
#line 13450 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2081:

/* Line 1455 of yacc.c  */
#line 13451 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2082:

/* Line 1455 of yacc.c  */
#line 13452 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2083:

/* Line 1455 of yacc.c  */
#line 13453 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2084:

/* Line 1455 of yacc.c  */
#line 13454 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2085:

/* Line 1455 of yacc.c  */
#line 13455 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2086:

/* Line 1455 of yacc.c  */
#line 13456 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2087:

/* Line 1455 of yacc.c  */
#line 13457 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2088:

/* Line 1455 of yacc.c  */
#line 13458 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2089:

/* Line 1455 of yacc.c  */
#line 13459 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2090:

/* Line 1455 of yacc.c  */
#line 13460 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2091:

/* Line 1455 of yacc.c  */
#line 13461 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2092:

/* Line 1455 of yacc.c  */
#line 13462 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2093:

/* Line 1455 of yacc.c  */
#line 13463 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2094:

/* Line 1455 of yacc.c  */
#line 13464 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2095:

/* Line 1455 of yacc.c  */
#line 13465 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2096:

/* Line 1455 of yacc.c  */
#line 13466 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2097:

/* Line 1455 of yacc.c  */
#line 13467 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2098:

/* Line 1455 of yacc.c  */
#line 13468 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2099:

/* Line 1455 of yacc.c  */
#line 13469 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2100:

/* Line 1455 of yacc.c  */
#line 13470 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2101:

/* Line 1455 of yacc.c  */
#line 13471 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2102:

/* Line 1455 of yacc.c  */
#line 13472 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2103:

/* Line 1455 of yacc.c  */
#line 13473 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2104:

/* Line 1455 of yacc.c  */
#line 13474 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2105:

/* Line 1455 of yacc.c  */
#line 13475 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2106:

/* Line 1455 of yacc.c  */
#line 13476 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2107:

/* Line 1455 of yacc.c  */
#line 13477 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2108:

/* Line 1455 of yacc.c  */
#line 13478 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2109:

/* Line 1455 of yacc.c  */
#line 13479 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2110:

/* Line 1455 of yacc.c  */
#line 13480 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2111:

/* Line 1455 of yacc.c  */
#line 13481 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2112:

/* Line 1455 of yacc.c  */
#line 13482 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2113:

/* Line 1455 of yacc.c  */
#line 13483 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2114:

/* Line 1455 of yacc.c  */
#line 13484 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2115:

/* Line 1455 of yacc.c  */
#line 13485 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2116:

/* Line 1455 of yacc.c  */
#line 13486 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2117:

/* Line 1455 of yacc.c  */
#line 13487 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2118:

/* Line 1455 of yacc.c  */
#line 13488 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2119:

/* Line 1455 of yacc.c  */
#line 13489 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2120:

/* Line 1455 of yacc.c  */
#line 13490 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2121:

/* Line 1455 of yacc.c  */
#line 13491 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2122:

/* Line 1455 of yacc.c  */
#line 13492 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2123:

/* Line 1455 of yacc.c  */
#line 13493 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2124:

/* Line 1455 of yacc.c  */
#line 13494 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2125:

/* Line 1455 of yacc.c  */
#line 13495 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2126:

/* Line 1455 of yacc.c  */
#line 13496 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2127:

/* Line 1455 of yacc.c  */
#line 13497 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2128:

/* Line 1455 of yacc.c  */
#line 13498 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2129:

/* Line 1455 of yacc.c  */
#line 13499 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2130:

/* Line 1455 of yacc.c  */
#line 13500 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2131:

/* Line 1455 of yacc.c  */
#line 13501 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2132:

/* Line 1455 of yacc.c  */
#line 13502 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2133:

/* Line 1455 of yacc.c  */
#line 13503 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2134:

/* Line 1455 of yacc.c  */
#line 13504 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2135:

/* Line 1455 of yacc.c  */
#line 13505 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2136:

/* Line 1455 of yacc.c  */
#line 13506 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2137:

/* Line 1455 of yacc.c  */
#line 13507 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2138:

/* Line 1455 of yacc.c  */
#line 13508 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2139:

/* Line 1455 of yacc.c  */
#line 13509 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2140:

/* Line 1455 of yacc.c  */
#line 13510 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2141:

/* Line 1455 of yacc.c  */
#line 13511 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2142:

/* Line 1455 of yacc.c  */
#line 13512 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2143:

/* Line 1455 of yacc.c  */
#line 13513 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2144:

/* Line 1455 of yacc.c  */
#line 13514 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2145:

/* Line 1455 of yacc.c  */
#line 13515 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2146:

/* Line 1455 of yacc.c  */
#line 13516 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2147:

/* Line 1455 of yacc.c  */
#line 13517 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2148:

/* Line 1455 of yacc.c  */
#line 13518 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2149:

/* Line 1455 of yacc.c  */
#line 13519 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2150:

/* Line 1455 of yacc.c  */
#line 13520 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2151:

/* Line 1455 of yacc.c  */
#line 13521 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2152:

/* Line 1455 of yacc.c  */
#line 13522 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2153:

/* Line 1455 of yacc.c  */
#line 13523 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2154:

/* Line 1455 of yacc.c  */
#line 13524 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2155:

/* Line 1455 of yacc.c  */
#line 13525 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2156:

/* Line 1455 of yacc.c  */
#line 13526 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2157:

/* Line 1455 of yacc.c  */
#line 13527 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2158:

/* Line 1455 of yacc.c  */
#line 13528 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2159:

/* Line 1455 of yacc.c  */
#line 13529 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2160:

/* Line 1455 of yacc.c  */
#line 13530 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2161:

/* Line 1455 of yacc.c  */
#line 13531 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2162:

/* Line 1455 of yacc.c  */
#line 13532 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2163:

/* Line 1455 of yacc.c  */
#line 13533 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2164:

/* Line 1455 of yacc.c  */
#line 13534 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2165:

/* Line 1455 of yacc.c  */
#line 13535 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2166:

/* Line 1455 of yacc.c  */
#line 13536 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2167:

/* Line 1455 of yacc.c  */
#line 13537 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2168:

/* Line 1455 of yacc.c  */
#line 13538 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2169:

/* Line 1455 of yacc.c  */
#line 13539 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2170:

/* Line 1455 of yacc.c  */
#line 13540 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2171:

/* Line 1455 of yacc.c  */
#line 13541 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2172:

/* Line 1455 of yacc.c  */
#line 13542 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2173:

/* Line 1455 of yacc.c  */
#line 13543 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2174:

/* Line 1455 of yacc.c  */
#line 13544 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2175:

/* Line 1455 of yacc.c  */
#line 13545 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2176:

/* Line 1455 of yacc.c  */
#line 13546 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2177:

/* Line 1455 of yacc.c  */
#line 13547 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2178:

/* Line 1455 of yacc.c  */
#line 13548 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2179:

/* Line 1455 of yacc.c  */
#line 13549 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2180:

/* Line 1455 of yacc.c  */
#line 13550 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2181:

/* Line 1455 of yacc.c  */
#line 13551 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2182:

/* Line 1455 of yacc.c  */
#line 13552 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2183:

/* Line 1455 of yacc.c  */
#line 13553 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2184:

/* Line 1455 of yacc.c  */
#line 13554 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2185:

/* Line 1455 of yacc.c  */
#line 13555 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2186:

/* Line 1455 of yacc.c  */
#line 13556 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2187:

/* Line 1455 of yacc.c  */
#line 13557 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2188:

/* Line 1455 of yacc.c  */
#line 13558 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2189:

/* Line 1455 of yacc.c  */
#line 13559 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2190:

/* Line 1455 of yacc.c  */
#line 13560 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2191:

/* Line 1455 of yacc.c  */
#line 13561 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2192:

/* Line 1455 of yacc.c  */
#line 13562 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2193:

/* Line 1455 of yacc.c  */
#line 13563 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2194:

/* Line 1455 of yacc.c  */
#line 13564 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2195:

/* Line 1455 of yacc.c  */
#line 13565 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2196:

/* Line 1455 of yacc.c  */
#line 13566 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2197:

/* Line 1455 of yacc.c  */
#line 13567 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2198:

/* Line 1455 of yacc.c  */
#line 13568 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2199:

/* Line 1455 of yacc.c  */
#line 13569 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2200:

/* Line 1455 of yacc.c  */
#line 13570 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2201:

/* Line 1455 of yacc.c  */
#line 13571 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2202:

/* Line 1455 of yacc.c  */
#line 13572 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2203:

/* Line 1455 of yacc.c  */
#line 13573 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2204:

/* Line 1455 of yacc.c  */
#line 13574 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2205:

/* Line 1455 of yacc.c  */
#line 13575 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2206:

/* Line 1455 of yacc.c  */
#line 13576 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2207:

/* Line 1455 of yacc.c  */
#line 13577 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2208:

/* Line 1455 of yacc.c  */
#line 13578 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2209:

/* Line 1455 of yacc.c  */
#line 13579 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2210:

/* Line 1455 of yacc.c  */
#line 13580 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2211:

/* Line 1455 of yacc.c  */
#line 13581 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2212:

/* Line 1455 of yacc.c  */
#line 13582 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2213:

/* Line 1455 of yacc.c  */
#line 13583 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2214:

/* Line 1455 of yacc.c  */
#line 13584 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2215:

/* Line 1455 of yacc.c  */
#line 13585 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2216:

/* Line 1455 of yacc.c  */
#line 13586 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2217:

/* Line 1455 of yacc.c  */
#line 13587 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2218:

/* Line 1455 of yacc.c  */
#line 13588 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2219:

/* Line 1455 of yacc.c  */
#line 13589 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2220:

/* Line 1455 of yacc.c  */
#line 13590 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2221:

/* Line 1455 of yacc.c  */
#line 13591 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2222:

/* Line 1455 of yacc.c  */
#line 13592 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2223:

/* Line 1455 of yacc.c  */
#line 13593 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2224:

/* Line 1455 of yacc.c  */
#line 13594 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2225:

/* Line 1455 of yacc.c  */
#line 13595 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2226:

/* Line 1455 of yacc.c  */
#line 13596 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2227:

/* Line 1455 of yacc.c  */
#line 13597 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2228:

/* Line 1455 of yacc.c  */
#line 13598 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2229:

/* Line 1455 of yacc.c  */
#line 13599 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2230:

/* Line 1455 of yacc.c  */
#line 13600 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2231:

/* Line 1455 of yacc.c  */
#line 13601 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2232:

/* Line 1455 of yacc.c  */
#line 13602 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2233:

/* Line 1455 of yacc.c  */
#line 13603 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2234:

/* Line 1455 of yacc.c  */
#line 13604 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2235:

/* Line 1455 of yacc.c  */
#line 13605 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2236:

/* Line 1455 of yacc.c  */
#line 13606 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2237:

/* Line 1455 of yacc.c  */
#line 13607 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2238:

/* Line 1455 of yacc.c  */
#line 13608 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2239:

/* Line 1455 of yacc.c  */
#line 13609 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2240:

/* Line 1455 of yacc.c  */
#line 13610 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2241:

/* Line 1455 of yacc.c  */
#line 13611 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2242:

/* Line 1455 of yacc.c  */
#line 13612 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2243:

/* Line 1455 of yacc.c  */
#line 13613 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2244:

/* Line 1455 of yacc.c  */
#line 13614 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2245:

/* Line 1455 of yacc.c  */
#line 13615 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2246:

/* Line 1455 of yacc.c  */
#line 13616 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2247:

/* Line 1455 of yacc.c  */
#line 13617 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2248:

/* Line 1455 of yacc.c  */
#line 13618 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2249:

/* Line 1455 of yacc.c  */
#line 13619 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2250:

/* Line 1455 of yacc.c  */
#line 13620 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2251:

/* Line 1455 of yacc.c  */
#line 13621 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2252:

/* Line 1455 of yacc.c  */
#line 13622 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2253:

/* Line 1455 of yacc.c  */
#line 13623 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2254:

/* Line 1455 of yacc.c  */
#line 13624 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2255:

/* Line 1455 of yacc.c  */
#line 13625 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2256:

/* Line 1455 of yacc.c  */
#line 13626 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2257:

/* Line 1455 of yacc.c  */
#line 13627 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2258:

/* Line 1455 of yacc.c  */
#line 13628 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2259:

/* Line 1455 of yacc.c  */
#line 13629 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2260:

/* Line 1455 of yacc.c  */
#line 13630 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2261:

/* Line 1455 of yacc.c  */
#line 13631 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2262:

/* Line 1455 of yacc.c  */
#line 13632 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2263:

/* Line 1455 of yacc.c  */
#line 13633 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2264:

/* Line 1455 of yacc.c  */
#line 13634 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2265:

/* Line 1455 of yacc.c  */
#line 13635 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2266:

/* Line 1455 of yacc.c  */
#line 13636 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2267:

/* Line 1455 of yacc.c  */
#line 13637 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2268:

/* Line 1455 of yacc.c  */
#line 13638 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2269:

/* Line 1455 of yacc.c  */
#line 13639 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2270:

/* Line 1455 of yacc.c  */
#line 13640 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2271:

/* Line 1455 of yacc.c  */
#line 13641 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2272:

/* Line 1455 of yacc.c  */
#line 13642 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2273:

/* Line 1455 of yacc.c  */
#line 13643 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2274:

/* Line 1455 of yacc.c  */
#line 13644 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2275:

/* Line 1455 of yacc.c  */
#line 13645 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2276:

/* Line 1455 of yacc.c  */
#line 13646 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2277:

/* Line 1455 of yacc.c  */
#line 13647 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2278:

/* Line 1455 of yacc.c  */
#line 13648 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2279:

/* Line 1455 of yacc.c  */
#line 13649 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2280:

/* Line 1455 of yacc.c  */
#line 13650 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2281:

/* Line 1455 of yacc.c  */
#line 13651 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2282:

/* Line 1455 of yacc.c  */
#line 13652 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2283:

/* Line 1455 of yacc.c  */
#line 13653 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2284:

/* Line 1455 of yacc.c  */
#line 13654 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2285:

/* Line 1455 of yacc.c  */
#line 13655 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2286:

/* Line 1455 of yacc.c  */
#line 13656 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2287:

/* Line 1455 of yacc.c  */
#line 13657 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2288:

/* Line 1455 of yacc.c  */
#line 13658 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2289:

/* Line 1455 of yacc.c  */
#line 13659 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2290:

/* Line 1455 of yacc.c  */
#line 13660 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2291:

/* Line 1455 of yacc.c  */
#line 13661 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2292:

/* Line 1455 of yacc.c  */
#line 13662 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2293:

/* Line 1455 of yacc.c  */
#line 13663 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2294:

/* Line 1455 of yacc.c  */
#line 13664 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2295:

/* Line 1455 of yacc.c  */
#line 13665 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2296:

/* Line 1455 of yacc.c  */
#line 13666 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2297:

/* Line 1455 of yacc.c  */
#line 13667 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2298:

/* Line 1455 of yacc.c  */
#line 13668 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2299:

/* Line 1455 of yacc.c  */
#line 13669 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2300:

/* Line 1455 of yacc.c  */
#line 13670 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2301:

/* Line 1455 of yacc.c  */
#line 13671 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2302:

/* Line 1455 of yacc.c  */
#line 13672 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2303:

/* Line 1455 of yacc.c  */
#line 13673 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2304:

/* Line 1455 of yacc.c  */
#line 13674 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2305:

/* Line 1455 of yacc.c  */
#line 13675 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2306:

/* Line 1455 of yacc.c  */
#line 13676 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2307:

/* Line 1455 of yacc.c  */
#line 13677 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2308:

/* Line 1455 of yacc.c  */
#line 13678 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2309:

/* Line 1455 of yacc.c  */
#line 13679 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2310:

/* Line 1455 of yacc.c  */
#line 13680 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2311:

/* Line 1455 of yacc.c  */
#line 13681 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2312:

/* Line 1455 of yacc.c  */
#line 13682 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2313:

/* Line 1455 of yacc.c  */
#line 13683 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2314:

/* Line 1455 of yacc.c  */
#line 13684 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2315:

/* Line 1455 of yacc.c  */
#line 13685 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2316:

/* Line 1455 of yacc.c  */
#line 13686 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2317:

/* Line 1455 of yacc.c  */
#line 13687 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2318:

/* Line 1455 of yacc.c  */
#line 13688 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2319:

/* Line 1455 of yacc.c  */
#line 13689 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2320:

/* Line 1455 of yacc.c  */
#line 13690 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2321:

/* Line 1455 of yacc.c  */
#line 13691 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2322:

/* Line 1455 of yacc.c  */
#line 13692 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2323:

/* Line 1455 of yacc.c  */
#line 13693 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2324:

/* Line 1455 of yacc.c  */
#line 13694 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2325:

/* Line 1455 of yacc.c  */
#line 13695 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2326:

/* Line 1455 of yacc.c  */
#line 13696 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2327:

/* Line 1455 of yacc.c  */
#line 13697 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2328:

/* Line 1455 of yacc.c  */
#line 13698 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2329:

/* Line 1455 of yacc.c  */
#line 13699 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2330:

/* Line 1455 of yacc.c  */
#line 13700 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2331:

/* Line 1455 of yacc.c  */
#line 13701 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2332:

/* Line 1455 of yacc.c  */
#line 13702 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2333:

/* Line 1455 of yacc.c  */
#line 13703 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2334:

/* Line 1455 of yacc.c  */
#line 13704 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2335:

/* Line 1455 of yacc.c  */
#line 13705 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2336:

/* Line 1455 of yacc.c  */
#line 13706 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2337:

/* Line 1455 of yacc.c  */
#line 13707 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2338:

/* Line 1455 of yacc.c  */
#line 13708 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2339:

/* Line 1455 of yacc.c  */
#line 13709 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2340:

/* Line 1455 of yacc.c  */
#line 13710 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2341:

/* Line 1455 of yacc.c  */
#line 13711 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2342:

/* Line 1455 of yacc.c  */
#line 13712 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2343:

/* Line 1455 of yacc.c  */
#line 13713 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2344:

/* Line 1455 of yacc.c  */
#line 13714 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2345:

/* Line 1455 of yacc.c  */
#line 13715 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2346:

/* Line 1455 of yacc.c  */
#line 13716 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2347:

/* Line 1455 of yacc.c  */
#line 13717 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2348:

/* Line 1455 of yacc.c  */
#line 13718 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2349:

/* Line 1455 of yacc.c  */
#line 13719 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2350:

/* Line 1455 of yacc.c  */
#line 13720 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2351:

/* Line 1455 of yacc.c  */
#line 13721 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2352:

/* Line 1455 of yacc.c  */
#line 13722 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2353:

/* Line 1455 of yacc.c  */
#line 13723 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2354:

/* Line 1455 of yacc.c  */
#line 13724 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2355:

/* Line 1455 of yacc.c  */
#line 13725 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2356:

/* Line 1455 of yacc.c  */
#line 13726 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2357:

/* Line 1455 of yacc.c  */
#line 13727 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2358:

/* Line 1455 of yacc.c  */
#line 13728 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2359:

/* Line 1455 of yacc.c  */
#line 13729 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2360:

/* Line 1455 of yacc.c  */
#line 13730 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2361:

/* Line 1455 of yacc.c  */
#line 13731 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2362:

/* Line 1455 of yacc.c  */
#line 13732 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2363:

/* Line 1455 of yacc.c  */
#line 13733 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2364:

/* Line 1455 of yacc.c  */
#line 13745 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SET_OPTION;
            mysql_init_select(lex);
            lex->option_type=OPT_SESSION;
            lex->var_list.empty();
            lex->one_shot_set= 0;
            lex->autocommit= 0;
            sp_create_assignment_lex(YYTHD, yychar == YYEMPTY);
          }
    break;

  case 2365:

/* Line 1455 of yacc.c  */
#line 13756 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2366:

/* Line 1455 of yacc.c  */
#line 13763 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(YYTHD, yychar == YYEMPTY))
              MYSQL_YYABORT;
          }
    break;

  case 2368:

/* Line 1455 of yacc.c  */
#line 13769 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->option_type= OPT_DEFAULT;
          }
    break;

  case 2369:

/* Line 1455 of yacc.c  */
#line 13773 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(YYTHD, yychar == YYEMPTY))
              MYSQL_YYABORT;
          }
    break;

  case 2370:

/* Line 1455 of yacc.c  */
#line 13778 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->option_type= (yyvsp[(1) - (1)].var_type);
          }
    break;

  case 2372:

/* Line 1455 of yacc.c  */
#line 13788 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(YYTHD, yychar == YYEMPTY))
              MYSQL_YYABORT; 
          }
    break;

  case 2374:

/* Line 1455 of yacc.c  */
#line 13794 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(YYTHD, yychar == YYEMPTY))
              MYSQL_YYABORT; 
          }
    break;

  case 2377:

/* Line 1455 of yacc.c  */
#line 13808 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            sp_create_assignment_lex(YYTHD, yychar == YYEMPTY);
          }
    break;

  case 2378:

/* Line 1455 of yacc.c  */
#line 13812 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(YYTHD, yychar == YYEMPTY))
              MYSQL_YYABORT; 
          }
    break;

  case 2379:

/* Line 1455 of yacc.c  */
#line 13817 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            sp_create_assignment_lex(YYTHD, yychar == YYEMPTY);
          }
    break;

  case 2380:

/* Line 1455 of yacc.c  */
#line 13821 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(YYTHD, yychar == YYEMPTY))
              MYSQL_YYABORT; 
          }
    break;

  case 2381:

/* Line 1455 of yacc.c  */
#line 13830 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->option_type= (yyvsp[(1) - (1)].var_type);
          }
    break;

  case 2384:

/* Line 1455 of yacc.c  */
#line 13838 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2385:

/* Line 1455 of yacc.c  */
#line 13839 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2386:

/* Line 1455 of yacc.c  */
#line 13840 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2387:

/* Line 1455 of yacc.c  */
#line 13844 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2388:

/* Line 1455 of yacc.c  */
#line 13845 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2389:

/* Line 1455 of yacc.c  */
#line 13846 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2390:

/* Line 1455 of yacc.c  */
#line 13847 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2391:

/* Line 1455 of yacc.c  */
#line 13851 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_DEFAULT; }
    break;

  case 2392:

/* Line 1455 of yacc.c  */
#line 13852 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2393:

/* Line 1455 of yacc.c  */
#line 13853 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2394:

/* Line 1455 of yacc.c  */
#line 13854 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2395:

/* Line 1455 of yacc.c  */
#line 13860 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;

            if ((yyvsp[(1) - (3)].variable).var && (yyvsp[(1) - (3)].variable).var != trg_new_row_fake_var)
            {
              /* It is a system variable. */
              if (set_system_variable(thd, &(yyvsp[(1) - (3)].variable), lex->option_type, (yyvsp[(3) - (3)].item)))
                MYSQL_YYABORT;
            }
            else
            {
              /*
                Not in trigger assigning value to new row,
                and option_type preceeding local variable is illegal.
              */
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2396:

/* Line 1455 of yacc.c  */
#line 13885 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            LEX_STRING *name= &(yyvsp[(1) - (3)].variable).base_name;

            if ((yyvsp[(1) - (3)].variable).var == trg_new_row_fake_var)
            {
              /* We are in trigger and assigning value to field of new row */
              if (set_trigger_new_row(YYTHD, name, (yyvsp[(3) - (3)].item)))
                MYSQL_YYABORT;
            }
            else if ((yyvsp[(1) - (3)].variable).var)
            {
              /* It is a system variable. */
              if (set_system_variable(thd, &(yyvsp[(1) - (3)].variable), lex->option_type, (yyvsp[(3) - (3)].item)))
                MYSQL_YYABORT;
            }
            else
            {
              sp_pcontext *spc= lex->spcont;
              sp_variable *spv= spc->find_variable(name, false);

              /* It is a local variable. */
              if (set_local_variable(thd, spv, (yyvsp[(3) - (3)].item)))
                MYSQL_YYABORT;
            }
          }
    break;

  case 2397:

/* Line 1455 of yacc.c  */
#line 13913 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item_func_set_user_var *item;
            item= new (YYTHD->mem_root) Item_func_set_user_var((yyvsp[(2) - (4)].lex_str), (yyvsp[(4) - (4)].item));
            if (item == NULL)
              MYSQL_YYABORT;
            set_var_user *var= new set_var_user(item);
            if (var == NULL)
              MYSQL_YYABORT;
            Lex->var_list.push_back(var);
          }
    break;

  case 2398:

/* Line 1455 of yacc.c  */
#line 13924 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            struct sys_var_with_base tmp= (yyvsp[(4) - (6)].variable);
            /* Lookup if necessary: must be a system variable. */
            if (tmp.var == NULL)
            {
              if (find_sys_var_null_base(thd, &tmp))
                MYSQL_YYABORT;
            }
            if (set_system_variable(thd, &tmp, (yyvsp[(3) - (6)].var_type), (yyvsp[(6) - (6)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 2399:

/* Line 1455 of yacc.c  */
#line 13937 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            CHARSET_INFO *cs2;
            cs2= (yyvsp[(2) - (2)].charset) ? (yyvsp[(2) - (2)].charset): global_system_variables.character_set_client;
            set_var_collation_client *var;
            var= new set_var_collation_client(cs2,
                                              thd->variables.collation_database,
                                              cs2);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2400:

/* Line 1455 of yacc.c  */
#line 13951 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;
            LEX_STRING names;

            names.str= (char *)"names";
            names.length= 5;
            if (spc && spc->find_variable(&names, false))
              my_error(ER_SP_BAD_VAR_SHADOW, MYF(0), names.str);
            else
              my_parse_error(ER(ER_SYNTAX_ERROR));

            MYSQL_YYABORT;
          }
    break;

  case 2401:

/* Line 1455 of yacc.c  */
#line 13966 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            CHARSET_INFO *cs2;
            CHARSET_INFO *cs3;
            cs2= (yyvsp[(2) - (3)].charset) ? (yyvsp[(2) - (3)].charset) : global_system_variables.character_set_client;
            cs3= (yyvsp[(3) - (3)].charset) ? (yyvsp[(3) - (3)].charset) : cs2;
            if (!my_charset_same(cs2, cs3))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       cs3->name, cs2->csname);
              MYSQL_YYABORT;
            }
            set_var_collation_client *var;
            var= new set_var_collation_client(cs3, cs3, cs3);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2402:

/* Line 1455 of yacc.c  */
#line 13985 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            LEX_USER *user;
            sp_pcontext *spc= lex->spcont;
            LEX_STRING pw;

            pw.str= (char *)"password";
            pw.length= 8;
            if (spc && spc->find_variable(&pw, false))
            {
              my_error(ER_SP_BAD_VAR_SHADOW, MYF(0), pw.str);
              MYSQL_YYABORT;
            }
            if (!(user=(LEX_USER*) thd->alloc(sizeof(LEX_USER))))
              MYSQL_YYABORT;
            user->host=null_lex_str;
            user->user.str=thd->security_ctx->user;
            user->user.length= strlen(thd->security_ctx->user);
            set_var_password *var= new set_var_password(user, (yyvsp[(3) - (3)].simple_string));
            if (var == NULL)
              MYSQL_YYABORT;
            thd->lex->var_list.push_back(var);
            thd->lex->autocommit= TRUE;
            if (lex->sphead)
              lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;
          }
    break;

  case 2403:

/* Line 1455 of yacc.c  */
#line 14013 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            set_var_password *var= new set_var_password((yyvsp[(3) - (5)].lex_user),(yyvsp[(5) - (5)].simple_string));
            if (var == NULL)
              MYSQL_YYABORT;
            Lex->var_list.push_back(var);
            Lex->autocommit= TRUE;
            if (Lex->sphead)
              Lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;
          }
    break;

  case 2404:

/* Line 1455 of yacc.c  */
#line 14026 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            sp_pcontext *spc= thd->lex->spcont;
            sp_variable_t *spv;

            /* Best effort lookup for system variable. */
            if (!spc || !(spv = spc->find_variable(&(yyvsp[(1) - (1)].lex_str))))
            {
              struct sys_var_with_base tmp= {NULL, (yyvsp[(1) - (1)].lex_str)};

              /* Not an SP local variable */
              if (find_sys_var_null_base(thd, &tmp))
                MYSQL_YYABORT;

              (yyval.variable)= tmp;
            }
            else
            {
              /*
                Possibly an SP local variable (or a shadowed sysvar).
                Will depend on the context of the SET statement.
              */
              (yyval.variable).var= NULL;
              (yyval.variable).base_name= (yyvsp[(1) - (1)].lex_str);
            }
          }
    break;

  case 2405:

/* Line 1455 of yacc.c  */
#line 14053 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (check_reserved_words(&(yyvsp[(1) - (3)].lex_str)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (lex->sphead && lex->sphead->m_type == TYPE_ENUM_TRIGGER &&
                (!my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "NEW") || 
                 !my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "OLD")))
            {
              if ((yyvsp[(1) - (3)].lex_str).str[0]=='O' || (yyvsp[(1) - (3)].lex_str).str[0]=='o')
              {
                my_error(ER_TRG_CANT_CHANGE_ROW, MYF(0), "OLD", "");
                MYSQL_YYABORT;
              }
              if (lex->trg_chistics.event == TRG_EVENT_DELETE)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0),
                         "NEW", "on DELETE");
                MYSQL_YYABORT;
              }
              if (lex->trg_chistics.action_time == TRG_ACTION_AFTER)
              {
                my_error(ER_TRG_CANT_CHANGE_ROW, MYF(0), "NEW", "after ");
                MYSQL_YYABORT;
              }
              /* This special combination will denote field of NEW row */
              (yyval.variable).var= trg_new_row_fake_var;
              (yyval.variable).base_name= (yyvsp[(3) - (3)].lex_str);
            }
            else
            {
              sys_var *tmp=find_sys_var(YYTHD, (yyvsp[(3) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).length);
              if (!tmp)
                MYSQL_YYABORT;
              if (!tmp->is_struct())
                my_error(ER_VARIABLE_IS_NOT_STRUCT, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              (yyval.variable).var= tmp;
              (yyval.variable).base_name= (yyvsp[(1) - (3)].lex_str);
            }
          }
    break;

  case 2406:

/* Line 1455 of yacc.c  */
#line 14096 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            sys_var *tmp=find_sys_var(YYTHD, (yyvsp[(3) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).length);
            if (!tmp)
              MYSQL_YYABORT;
            if (!tmp->is_struct())
              my_error(ER_VARIABLE_IS_NOT_STRUCT, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
            (yyval.variable).var= tmp;
            (yyval.variable).base_name.str=    (char*) "default";
            (yyval.variable).base_name.length= 7;
          }
    break;

  case 2411:

/* Line 1455 of yacc.c  */
#line 14117 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex=Lex;
            Item *item= new (thd->mem_root) Item_int((int32) (yyvsp[(1) - (1)].num));
            if (item == NULL)
              MYSQL_YYABORT;
            set_var *var= new set_var(lex->option_type,
                                      find_sys_var(thd, "tx_read_only"),
                                      &null_lex_str,
                                      item);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2412:

/* Line 1455 of yacc.c  */
#line 14135 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex=Lex;
            Item *item= new (thd->mem_root) Item_int((int32) (yyvsp[(3) - (3)].tx_isolation));
            if (item == NULL)
              MYSQL_YYABORT;
            set_var *var= new set_var(lex->option_type,
                                      find_sys_var(thd, "tx_isolation"),
                                      &null_lex_str,
                                      item);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2413:

/* Line 1455 of yacc.c  */
#line 14152 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= true; }
    break;

  case 2414:

/* Line 1455 of yacc.c  */
#line 14153 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= false; }
    break;

  case 2415:

/* Line 1455 of yacc.c  */
#line 14157 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_READ_UNCOMMITTED; }
    break;

  case 2416:

/* Line 1455 of yacc.c  */
#line 14158 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_READ_COMMITTED; }
    break;

  case 2417:

/* Line 1455 of yacc.c  */
#line 14159 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_REPEATABLE_READ; }
    break;

  case 2418:

/* Line 1455 of yacc.c  */
#line 14160 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_SERIALIZABLE; }
    break;

  case 2419:

/* Line 1455 of yacc.c  */
#line 14164 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.simple_string)=(yyvsp[(1) - (1)].lex_str).str;}
    break;

  case 2420:

/* Line 1455 of yacc.c  */
#line 14166 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.simple_string)= (yyvsp[(3) - (4)].lex_str).length ? YYTHD->variables.old_passwords ?
              Item_func_old_password::alloc(YYTHD, (yyvsp[(3) - (4)].lex_str).str, (yyvsp[(3) - (4)].lex_str).length) :
              Item_func_password::alloc(YYTHD, (yyvsp[(3) - (4)].lex_str).str, (yyvsp[(3) - (4)].lex_str).length) :
              (yyvsp[(3) - (4)].lex_str).str;
            if ((yyval.simple_string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2421:

/* Line 1455 of yacc.c  */
#line 14175 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.simple_string)= (yyvsp[(3) - (4)].lex_str).length ? Item_func_old_password::alloc(YYTHD, (yyvsp[(3) - (4)].lex_str).str,
                                                          (yyvsp[(3) - (4)].lex_str).length) :
              (yyvsp[(3) - (4)].lex_str).str;
            if ((yyval.simple_string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2422:

/* Line 1455 of yacc.c  */
#line 14186 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 2423:

/* Line 1455 of yacc.c  */
#line 14187 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)=0; }
    break;

  case 2424:

/* Line 1455 of yacc.c  */
#line 14189 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_string("ON",  2, system_charset_info);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2425:

/* Line 1455 of yacc.c  */
#line 14195 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_string("ALL", 3, system_charset_info);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2426:

/* Line 1455 of yacc.c  */
#line 14201 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_string("binary", 6, system_charset_info);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2427:

/* Line 1455 of yacc.c  */
#line 14212 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "LOCK");
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_LOCK_TABLES;
          }
    break;

  case 2428:

/* Line 1455 of yacc.c  */
#line 14223 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2433:

/* Line 1455 of yacc.c  */
#line 14238 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            thr_lock_type lock_type= (thr_lock_type) (yyvsp[(3) - (3)].num);
            bool lock_for_write= (lock_type >= TL_WRITE_ALLOW_WRITE);
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (3)].table), (yyvsp[(2) - (3)].lex_str_ptr), 0, lock_type,
                                           (lock_for_write ?
                                            lock_type == TL_WRITE_CONCURRENT_INSERT ?
                                            MDL_SHARED_WRITE :
                                            MDL_SHARED_NO_READ_WRITE :
                                            MDL_SHARED_READ)))
              MYSQL_YYABORT;
          }
    break;

  case 2434:

/* Line 1455 of yacc.c  */
#line 14252 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= TL_READ_NO_INSERT; }
    break;

  case 2435:

/* Line 1455 of yacc.c  */
#line 14253 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= TL_WRITE_DEFAULT; }
    break;

  case 2436:

/* Line 1455 of yacc.c  */
#line 14255 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= (Lex->sphead ? TL_WRITE_DEFAULT : TL_WRITE_CONCURRENT_INSERT);
          }
    break;

  case 2437:

/* Line 1455 of yacc.c  */
#line 14259 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 2438:

/* Line 1455 of yacc.c  */
#line 14260 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= TL_READ; }
    break;

  case 2439:

/* Line 1455 of yacc.c  */
#line 14265 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "UNLOCK");
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_UNLOCK_TABLES;
          }
    break;

  case 2440:

/* Line 1455 of yacc.c  */
#line 14276 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2441:

/* Line 1455 of yacc.c  */
#line 14285 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_HA_OPEN;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(2) - (4)].table), (yyvsp[(4) - (4)].lex_str_ptr), 0))
              MYSQL_YYABORT;
          }
    break;

  case 2442:

/* Line 1455 of yacc.c  */
#line 14297 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_HA_CLOSE;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(2) - (3)].table), 0, 0))
              MYSQL_YYABORT;
          }
    break;

  case 2443:

/* Line 1455 of yacc.c  */
#line 14309 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
              MYSQL_YYABORT;
            }
            lex->expr_allows_subselect= FALSE;
            lex->sql_command = SQLCOM_HA_READ;
            lex->ha_rkey_mode= HA_READ_KEY_EXACT; /* Avoid purify warnings */
            Item *one= new (YYTHD->mem_root) Item_int((int32) 1);
            if (one == NULL)
              MYSQL_YYABORT;
            lex->current_select->select_limit= one;
            lex->current_select->offset_limit= 0;
            lex->limit_rows_examined= 0;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(2) - (3)].table), 0, 0))
              MYSQL_YYABORT;
          }
    break;

  case 2444:

/* Line 1455 of yacc.c  */
#line 14329 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->expr_allows_subselect= TRUE;
            /* Stored functions are not supported for HANDLER READ. */
            if (Lex->uses_stored_routines())
            {
              my_error(ER_NOT_SUPPORTED_YET, MYF(0),
                       "stored functions in HANDLER ... READ");
              MYSQL_YYABORT;
            }
          }
    break;

  case 2445:

/* Line 1455 of yacc.c  */
#line 14342 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ident= null_lex_str; }
    break;

  case 2446:

/* Line 1455 of yacc.c  */
#line 14343 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ident= (yyvsp[(1) - (2)].lex_str); }
    break;

  case 2447:

/* Line 1455 of yacc.c  */
#line 14347 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RFIRST; }
    break;

  case 2448:

/* Line 1455 of yacc.c  */
#line 14348 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RNEXT;  }
    break;

  case 2449:

/* Line 1455 of yacc.c  */
#line 14352 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RFIRST; }
    break;

  case 2450:

/* Line 1455 of yacc.c  */
#line 14353 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RNEXT;  }
    break;

  case 2451:

/* Line 1455 of yacc.c  */
#line 14354 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RPREV;  }
    break;

  case 2452:

/* Line 1455 of yacc.c  */
#line 14355 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RLAST;  }
    break;

  case 2453:

/* Line 1455 of yacc.c  */
#line 14357 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->ha_read_mode = RKEY;
            lex->ha_rkey_mode=(yyvsp[(1) - (1)].ha_rkey_mode);
            if (!(lex->insert_list = new List_item))
              MYSQL_YYABORT;
          }
    break;

  case 2454:

/* Line 1455 of yacc.c  */
#line 14365 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2455:

/* Line 1455 of yacc.c  */
#line 14369 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_EXACT;   }
    break;

  case 2456:

/* Line 1455 of yacc.c  */
#line 14370 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_OR_NEXT; }
    break;

  case 2457:

/* Line 1455 of yacc.c  */
#line 14371 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_OR_PREV; }
    break;

  case 2458:

/* Line 1455 of yacc.c  */
#line 14372 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_AFTER_KEY;   }
    break;

  case 2459:

/* Line 1455 of yacc.c  */
#line 14373 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_BEFORE_KEY;  }
    break;

  case 2460:

/* Line 1455 of yacc.c  */
#line 14380 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2461:

/* Line 1455 of yacc.c  */
#line 14385 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= 0;
          }
    break;

  case 2462:

/* Line 1455 of yacc.c  */
#line 14391 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= TYPE_ENUM_FUNCTION;
          }
    break;

  case 2463:

/* Line 1455 of yacc.c  */
#line 14402 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= TYPE_ENUM_PROCEDURE;
          }
    break;

  case 2464:

/* Line 1455 of yacc.c  */
#line 14413 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_REVOKE_ALL;
          }
    break;

  case 2465:

/* Line 1455 of yacc.c  */
#line 14417 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->users_list.push_front ((yyvsp[(3) - (5)].lex_user));
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= TYPE_ENUM_PROXY;
          }
    break;

  case 2466:

/* Line 1455 of yacc.c  */
#line 14427 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2467:

/* Line 1455 of yacc.c  */
#line 14433 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_GRANT;
            lex->type= 0;
          }
    break;

  case 2468:

/* Line 1455 of yacc.c  */
#line 14440 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_GRANT;
            lex->type= TYPE_ENUM_FUNCTION;
          }
    break;

  case 2469:

/* Line 1455 of yacc.c  */
#line 14452 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_GRANT;
            lex->type= TYPE_ENUM_PROCEDURE;
          }
    break;

  case 2470:

/* Line 1455 of yacc.c  */
#line 14463 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->users_list.push_front ((yyvsp[(3) - (6)].lex_user));
            lex->sql_command= SQLCOM_GRANT;
            lex->type= TYPE_ENUM_PROXY;
          }
    break;

  case 2473:

/* Line 1455 of yacc.c  */
#line 14477 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2474:

/* Line 1455 of yacc.c  */
#line 14479 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            Lex->all_privileges= 1; 
            Lex->grant= GLOBAL_ACLS;
          }
    break;

  case 2479:

/* Line 1455 of yacc.c  */
#line 14497 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->which_columns = SELECT_ACL;}
    break;

  case 2480:

/* Line 1455 of yacc.c  */
#line 14498 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2481:

/* Line 1455 of yacc.c  */
#line 14500 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->which_columns = INSERT_ACL;}
    break;

  case 2482:

/* Line 1455 of yacc.c  */
#line 14501 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2483:

/* Line 1455 of yacc.c  */
#line 14503 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->which_columns = UPDATE_ACL; }
    break;

  case 2484:

/* Line 1455 of yacc.c  */
#line 14504 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2485:

/* Line 1455 of yacc.c  */
#line 14506 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->which_columns = REFERENCES_ACL;}
    break;

  case 2486:

/* Line 1455 of yacc.c  */
#line 14507 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2487:

/* Line 1455 of yacc.c  */
#line 14508 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= DELETE_ACL;}
    break;

  case 2488:

/* Line 1455 of yacc.c  */
#line 14509 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2489:

/* Line 1455 of yacc.c  */
#line 14510 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= INDEX_ACL;}
    break;

  case 2490:

/* Line 1455 of yacc.c  */
#line 14511 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= ALTER_ACL;}
    break;

  case 2491:

/* Line 1455 of yacc.c  */
#line 14512 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_ACL;}
    break;

  case 2492:

/* Line 1455 of yacc.c  */
#line 14513 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= DROP_ACL;}
    break;

  case 2493:

/* Line 1455 of yacc.c  */
#line 14514 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= EXECUTE_ACL;}
    break;

  case 2494:

/* Line 1455 of yacc.c  */
#line 14515 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= RELOAD_ACL;}
    break;

  case 2495:

/* Line 1455 of yacc.c  */
#line 14516 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= SHUTDOWN_ACL;}
    break;

  case 2496:

/* Line 1455 of yacc.c  */
#line 14517 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= PROCESS_ACL;}
    break;

  case 2497:

/* Line 1455 of yacc.c  */
#line 14518 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= FILE_ACL;}
    break;

  case 2498:

/* Line 1455 of yacc.c  */
#line 14519 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= GRANT_ACL;}
    break;

  case 2499:

/* Line 1455 of yacc.c  */
#line 14520 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= SHOW_DB_ACL;}
    break;

  case 2500:

/* Line 1455 of yacc.c  */
#line 14521 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= SUPER_ACL;}
    break;

  case 2501:

/* Line 1455 of yacc.c  */
#line 14522 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_TMP_ACL;}
    break;

  case 2502:

/* Line 1455 of yacc.c  */
#line 14523 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= LOCK_TABLES_ACL; }
    break;

  case 2503:

/* Line 1455 of yacc.c  */
#line 14524 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= REPL_SLAVE_ACL; }
    break;

  case 2504:

/* Line 1455 of yacc.c  */
#line 14525 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= REPL_CLIENT_ACL; }
    break;

  case 2505:

/* Line 1455 of yacc.c  */
#line 14526 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_VIEW_ACL; }
    break;

  case 2506:

/* Line 1455 of yacc.c  */
#line 14527 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= SHOW_VIEW_ACL; }
    break;

  case 2507:

/* Line 1455 of yacc.c  */
#line 14528 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_PROC_ACL; }
    break;

  case 2508:

/* Line 1455 of yacc.c  */
#line 14529 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= ALTER_PROC_ACL; }
    break;

  case 2509:

/* Line 1455 of yacc.c  */
#line 14530 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_USER_ACL; }
    break;

  case 2510:

/* Line 1455 of yacc.c  */
#line 14531 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= EVENT_ACL;}
    break;

  case 2511:

/* Line 1455 of yacc.c  */
#line 14532 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= TRIGGER_ACL; }
    break;

  case 2512:

/* Line 1455 of yacc.c  */
#line 14533 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_TABLESPACE_ACL; }
    break;

  case 2513:

/* Line 1455 of yacc.c  */
#line 14537 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2514:

/* Line 1455 of yacc.c  */
#line 14538 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2517:

/* Line 1455 of yacc.c  */
#line 14548 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->x509_subject)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "SUBJECT");
              MYSQL_YYABORT;
            }
            lex->x509_subject=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2518:

/* Line 1455 of yacc.c  */
#line 14558 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->x509_issuer)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "ISSUER");
              MYSQL_YYABORT;
            }
            lex->x509_issuer=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2519:

/* Line 1455 of yacc.c  */
#line 14568 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->ssl_cipher)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "CIPHER");
              MYSQL_YYABORT;
            }
            lex->ssl_cipher=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2520:

/* Line 1455 of yacc.c  */
#line 14581 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            size_t dummy;
            if (lex->copy_db_to(&lex->current_select->db, &dummy))
              MYSQL_YYABORT;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant = DB_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
            {
              my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2521:

/* Line 1455 of yacc.c  */
#line 14596 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->current_select->db = (yyvsp[(1) - (3)].lex_str).str;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant = DB_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
            {
              my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2522:

/* Line 1455 of yacc.c  */
#line 14609 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->current_select->db = NULL;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant= GLOBAL_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
            {
              my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2523:

/* Line 1455 of yacc.c  */
#line 14622 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(1) - (1)].table),NULL,
                                                        TL_OPTION_UPDATING))
              MYSQL_YYABORT;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant =  TABLE_ACLS & ~GRANT_ACL;
          }
    break;

  case 2524:

/* Line 1455 of yacc.c  */
#line 14634 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (1)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2525:

/* Line 1455 of yacc.c  */
#line 14639 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2526:

/* Line 1455 of yacc.c  */
#line 14647 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (1)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2527:

/* Line 1455 of yacc.c  */
#line 14652 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2532:

/* Line 1455 of yacc.c  */
#line 14663 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.lex_user)=(yyvsp[(1) - (4)].lex_user); (yyvsp[(1) - (4)].lex_user)->password=(yyvsp[(4) - (4)].lex_str);
            if ((yyvsp[(4) - (4)].lex_str).length)
            {
              if (YYTHD->variables.old_passwords)
              {
                char *buff= 
                  (char *) YYTHD->alloc(SCRAMBLED_PASSWORD_CHAR_LENGTH_323+1);
                if (buff == NULL)
                  MYSQL_YYABORT;
                my_make_scrambled_password_323(buff, (yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length);
                (yyvsp[(1) - (4)].lex_user)->password.str= buff;
                (yyvsp[(1) - (4)].lex_user)->password.length= SCRAMBLED_PASSWORD_CHAR_LENGTH_323;
              }
              else
              {
                char *buff= 
                  (char *) YYTHD->alloc(SCRAMBLED_PASSWORD_CHAR_LENGTH+1);
                if (buff == NULL)
                  MYSQL_YYABORT;
                my_make_scrambled_password(buff, (yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length);
                (yyvsp[(1) - (4)].lex_user)->password.str= buff;
                (yyvsp[(1) - (4)].lex_user)->password.length= SCRAMBLED_PASSWORD_CHAR_LENGTH;
              }
            }
          }
    break;

  case 2533:

/* Line 1455 of yacc.c  */
#line 14690 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            (yyval.lex_user)= (yyvsp[(1) - (5)].lex_user); 
            (yyvsp[(1) - (5)].lex_user)->password= (yyvsp[(5) - (5)].lex_str); 
          }
    break;

  case 2534:

/* Line 1455 of yacc.c  */
#line 14695 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.lex_user)= (yyvsp[(1) - (4)].lex_user);
            (yyvsp[(1) - (4)].lex_user)->plugin= (yyvsp[(4) - (4)].lex_str);
            (yyvsp[(1) - (4)].lex_user)->auth= empty_lex_str;
          }
    break;

  case 2535:

/* Line 1455 of yacc.c  */
#line 14701 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.lex_user)= (yyvsp[(1) - (6)].lex_user);
            (yyvsp[(1) - (6)].lex_user)->plugin= (yyvsp[(4) - (6)].lex_str);
            (yyvsp[(1) - (6)].lex_user)->auth= (yyvsp[(6) - (6)].lex_str);
          }
    break;

  case 2536:

/* Line 1455 of yacc.c  */
#line 14707 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_user)= (yyvsp[(1) - (1)].lex_user); (yyvsp[(1) - (1)].lex_user)->password= null_lex_str; }
    break;

  case 2537:

/* Line 1455 of yacc.c  */
#line 14712 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->grant |= lex->which_columns;
          }
    break;

  case 2541:

/* Line 1455 of yacc.c  */
#line 14726 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            String *new_str = new (YYTHD->mem_root) String((const char*) (yyvsp[(1) - (1)].lex_str).str,(yyvsp[(1) - (1)].lex_str).length,system_charset_info);
            if (new_str == NULL)
              MYSQL_YYABORT;
            List_iterator <LEX_COLUMN> iter(Lex->columns);
            class LEX_COLUMN *point;
            LEX *lex=Lex;
            while ((point=iter++))
            {
              if (!my_strcasecmp(system_charset_info,
                                 point->column.c_ptr(), new_str->c_ptr()))
                break;
            }
            lex->grant_tot_col|= lex->which_columns;
            if (point)
              point->rights |= lex->which_columns;
            else
            {
              LEX_COLUMN *col= new LEX_COLUMN (*new_str,lex->which_columns);
              if (col == NULL)
                MYSQL_YYABORT;
              lex->columns.push_back(col);
            }
          }
    break;

  case 2543:

/* Line 1455 of yacc.c  */
#line 14755 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_SPECIFIED;
          }
    break;

  case 2544:

/* Line 1455 of yacc.c  */
#line 14759 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_ANY;
          }
    break;

  case 2545:

/* Line 1455 of yacc.c  */
#line 14763 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_X509;
          }
    break;

  case 2546:

/* Line 1455 of yacc.c  */
#line 14767 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_NONE;
          }
    break;

  case 2547:

/* Line 1455 of yacc.c  */
#line 14773 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2549:

/* Line 1455 of yacc.c  */
#line 14778 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2550:

/* Line 1455 of yacc.c  */
#line 14779 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= GRANT_ACL;}
    break;

  case 2551:

/* Line 1455 of yacc.c  */
#line 14783 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2552:

/* Line 1455 of yacc.c  */
#line 14784 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2553:

/* Line 1455 of yacc.c  */
#line 14788 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= GRANT_ACL;}
    break;

  case 2554:

/* Line 1455 of yacc.c  */
#line 14790 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.questions=(yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::QUERIES_PER_HOUR;
          }
    break;

  case 2555:

/* Line 1455 of yacc.c  */
#line 14796 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.updates=(yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::UPDATES_PER_HOUR;
          }
    break;

  case 2556:

/* Line 1455 of yacc.c  */
#line 14802 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.conn_per_hour= (yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::CONNECTIONS_PER_HOUR;
          }
    break;

  case 2557:

/* Line 1455 of yacc.c  */
#line 14808 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.user_conn= (yyvsp[(2) - (2)].num);
            lex->mqh.specified_limits|= USER_RESOURCES::USER_CONNECTIONS;
          }
    break;

  case 2558:

/* Line 1455 of yacc.c  */
#line 14817 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_BEGIN;
            lex->start_transaction_opt= 0;
          }
    break;

  case 2559:

/* Line 1455 of yacc.c  */
#line 14822 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2560:

/* Line 1455 of yacc.c  */
#line 14826 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2561:

/* Line 1455 of yacc.c  */
#line 14827 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2562:

/* Line 1455 of yacc.c  */
#line 14832 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_UNKNOWN; }
    break;

  case 2563:

/* Line 1455 of yacc.c  */
#line 14833 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_NO; }
    break;

  case 2564:

/* Line 1455 of yacc.c  */
#line 14834 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_YES; }
    break;

  case 2565:

/* Line 1455 of yacc.c  */
#line 14839 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_UNKNOWN; }
    break;

  case 2566:

/* Line 1455 of yacc.c  */
#line 14840 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_YES; }
    break;

  case 2567:

/* Line 1455 of yacc.c  */
#line 14841 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_NO; }
    break;

  case 2568:

/* Line 1455 of yacc.c  */
#line 14845 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2569:

/* Line 1455 of yacc.c  */
#line 14846 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2570:

/* Line 1455 of yacc.c  */
#line 14851 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_COMMIT;
            /* Don't allow AND CHAIN RELEASE. */
            MYSQL_YYABORT_UNLESS((yyvsp[(3) - (4)].m_yes_no_unk) != TVL_YES || (yyvsp[(4) - (4)].m_yes_no_unk) != TVL_YES);
            lex->tx_chain= (yyvsp[(3) - (4)].m_yes_no_unk);
            lex->tx_release= (yyvsp[(4) - (4)].m_yes_no_unk);
          }
    break;

  case 2571:

/* Line 1455 of yacc.c  */
#line 14863 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ROLLBACK;
            /* Don't allow AND CHAIN RELEASE. */
            MYSQL_YYABORT_UNLESS((yyvsp[(3) - (4)].m_yes_no_unk) != TVL_YES || (yyvsp[(4) - (4)].m_yes_no_unk) != TVL_YES);
            lex->tx_chain= (yyvsp[(3) - (4)].m_yes_no_unk);
            lex->tx_release= (yyvsp[(4) - (4)].m_yes_no_unk);
          }
    break;

  case 2572:

/* Line 1455 of yacc.c  */
#line 14873 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ROLLBACK_TO_SAVEPOINT;
            lex->ident= (yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 2573:

/* Line 1455 of yacc.c  */
#line 14882 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SAVEPOINT;
            lex->ident= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 2574:

/* Line 1455 of yacc.c  */
#line 14891 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_RELEASE_SAVEPOINT;
            lex->ident= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 2575:

/* Line 1455 of yacc.c  */
#line 14904 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2577:

/* Line 1455 of yacc.c  */
#line 14910 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_select_to_union_list(Lex, (bool)(yyvsp[(2) - (2)].num), TRUE))
              MYSQL_YYABORT;
          }
    break;

  case 2578:

/* Line 1455 of yacc.c  */
#line 14915 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              Remove from the name resolution context stack the context of the
              last select in the union.
            */
            Lex->pop_context();
          }
    break;

  case 2579:

/* Line 1455 of yacc.c  */
#line 14925 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 2580:

/* Line 1455 of yacc.c  */
#line 14926 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 2581:

/* Line 1455 of yacc.c  */
#line 14927 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 2584:

/* Line 1455 of yacc.c  */
#line 14936 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            DBUG_ASSERT(lex->current_select->linkage != GLOBAL_OPTIONS_TYPE);
            SELECT_LEX *sel= lex->current_select;
            SELECT_LEX_UNIT *unit= sel->master_unit();
            SELECT_LEX *fake= unit->fake_select_lex;
            if (fake)
            {
              unit->global_parameters= fake;
              fake->no_table_names_allowed= 1;
              lex->current_select= fake;
            }
            thd->where= "global ORDER clause";
          }
    break;

  case 2585:

/* Line 1455 of yacc.c  */
#line 14952 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            thd->lex->current_select->no_table_names_allowed= 0;
            thd->where= "";
          }
    break;

  case 2588:

/* Line 1455 of yacc.c  */
#line 14965 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=1; }
    break;

  case 2589:

/* Line 1455 of yacc.c  */
#line 14966 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=1; }
    break;

  case 2590:

/* Line 1455 of yacc.c  */
#line 14967 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=0; }
    break;

  case 2591:

/* Line 1455 of yacc.c  */
#line 14972 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            (yyval.select_lex)= Lex->current_select->master_unit()->first_select();
          }
    break;

  case 2592:

/* Line 1455 of yacc.c  */
#line 14976 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.select_lex)= Lex->current_select->master_unit()->first_select();
          }
    break;

  case 2594:

/* Line 1455 of yacc.c  */
#line 14985 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_select_to_union_list(Lex, (bool)(yyvsp[(3) - (3)].num), FALSE))
              MYSQL_YYABORT;
          }
    break;

  case 2595:

/* Line 1455 of yacc.c  */
#line 14991 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->pop_context();
            (yyval.select_lex)= (yyvsp[(1) - (6)].select_lex);
          }
    break;

  case 2596:

/* Line 1455 of yacc.c  */
#line 15000 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            (yyval.select_lex)= (yyvsp[(2) - (3)].select_lex);
          }
    break;

  case 2597:

/* Line 1455 of yacc.c  */
#line 15006 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->expr_allows_subselect ||
               lex->sql_command == (int)SQLCOM_PURGE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            /* 
              we are making a "derived table" for the parenthesis
              as we need to have a lex level to fit the union 
              after the parenthesis, e.g. 
              (SELECT .. ) UNION ...  becomes 
              SELECT * FROM ((SELECT ...) UNION ...)
            */
            if (mysql_new_select(Lex, 1))
              MYSQL_YYABORT;
          }
    break;

  case 2598:

/* Line 1455 of yacc.c  */
#line 15027 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->pop_context();
            SELECT_LEX *child= lex->current_select;
            lex->current_select = lex->current_select->return_after_parsing();
            lex->nest_level--;
            lex->current_select->n_child_sum_items += child->n_sum_items;
            /*
              A subselect can add fields to an outer select. Reserve space for
              them.
            */
            lex->current_select->select_n_where_fields+=
            child->select_n_where_fields;
          }
    break;

  case 2603:

/* Line 1455 of yacc.c  */
#line 15055 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->options|= SELECT_STRAIGHT_JOIN; }
    break;

  case 2604:

/* Line 1455 of yacc.c  */
#line 15057 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            YYPS->m_lock_type= TL_READ_HIGH_PRIORITY;
            YYPS->m_mdl_type= MDL_SHARED_READ;
            Select->options|= SELECT_HIGH_PRIORITY;
          }
    break;

  case 2605:

/* Line 1455 of yacc.c  */
#line 15064 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->options|= SELECT_DISTINCT; }
    break;

  case 2606:

/* Line 1455 of yacc.c  */
#line 15065 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->options|= SELECT_SMALL_RESULT; }
    break;

  case 2607:

/* Line 1455 of yacc.c  */
#line 15066 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->options|= SELECT_BIG_RESULT; }
    break;

  case 2608:

/* Line 1455 of yacc.c  */
#line 15068 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            Select->options|= OPTION_BUFFER_RESULT;
          }
    break;

  case 2609:

/* Line 1455 of yacc.c  */
#line 15074 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            Select->options|= OPTION_FOUND_ROWS;
          }
    break;

  case 2610:

/* Line 1455 of yacc.c  */
#line 15079 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->options|= SELECT_ALL; }
    break;

  case 2611:

/* Line 1455 of yacc.c  */
#line 15090 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2612:

/* Line 1455 of yacc.c  */
#line 15092 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2613:

/* Line 1455 of yacc.c  */
#line 15094 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2627:

/* Line 1455 of yacc.c  */
#line 15127 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              We have to distinguish missing DEFINER-clause from case when
              CURRENT_USER specified as definer explicitly in order to properly
              handle CREATE TRIGGER statements which come to replication thread
              from older master servers (i.e. to create non-suid trigger in this
              case).
            */
            YYTHD->lex->definer= 0;
          }
    break;

  case 2628:

/* Line 1455 of yacc.c  */
#line 15141 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            YYTHD->lex->definer= get_current_user(YYTHD, (yyvsp[(3) - (3)].lex_user));
          }
    break;

  case 2629:

/* Line 1455 of yacc.c  */
#line 15154 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2630:

/* Line 1455 of yacc.c  */
#line 15156 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2631:

/* Line 1455 of yacc.c  */
#line 15158 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2632:

/* Line 1455 of yacc.c  */
#line 15163 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_view_mode= VIEW_CREATE_OR_REPLACE; }
    break;

  case 2633:

/* Line 1455 of yacc.c  */
#line 15168 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_view_algorithm= DTYPE_ALGORITHM_UNDEFINED; }
    break;

  case 2634:

/* Line 1455 of yacc.c  */
#line 15170 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_view_algorithm= VIEW_ALGORITHM_MERGE; }
    break;

  case 2635:

/* Line 1455 of yacc.c  */
#line 15172 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_view_algorithm= VIEW_ALGORITHM_TMPTABLE; }
    break;

  case 2636:

/* Line 1455 of yacc.c  */
#line 15177 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_DEFAULT; }
    break;

  case 2637:

/* Line 1455 of yacc.c  */
#line 15179 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_DEFINER; }
    break;

  case 2638:

/* Line 1455 of yacc.c  */
#line 15181 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_INVOKER; }
    break;

  case 2639:

/* Line 1455 of yacc.c  */
#line 15186 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_CREATE_VIEW;
            /* first table in list is target VIEW name */
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(3) - (3)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_IGNORE,
                                                   MDL_EXCLUSIVE))
              MYSQL_YYABORT;
            lex->query_tables->open_strategy= TABLE_LIST::OPEN_STUB;
          }
    break;

  case 2641:

/* Line 1455 of yacc.c  */
#line 15203 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2643:

/* Line 1455 of yacc.c  */
#line 15209 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
              Lex->view_list.push_back((LEX_STRING*)
              sql_memdup(&(yyvsp[(1) - (1)].lex_str), sizeof(LEX_STRING)));
            }
    break;

  case 2644:

/* Line 1455 of yacc.c  */
#line 15214 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
              Lex->view_list.push_back((LEX_STRING*)
              sql_memdup(&(yyvsp[(3) - (3)].lex_str), sizeof(LEX_STRING)));
            }
    break;

  case 2645:

/* Line 1455 of yacc.c  */
#line 15221 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->parsing_options.allows_variable= FALSE;
            lex->parsing_options.allows_select_into= FALSE;
            lex->parsing_options.allows_select_procedure= FALSE;
            lex->parsing_options.allows_derived= FALSE;
            lex->create_view_select.str= (char *) YYLIP->get_cpp_ptr();
          }
    break;

  case 2646:

/* Line 1455 of yacc.c  */
#line 15230 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            uint len= YYLIP->get_cpp_ptr() - lex->create_view_select.str;
            void *create_view_select= thd->memdup(lex->create_view_select.str, len);
            lex->create_view_select.length= len;
            lex->create_view_select.str= (char *) create_view_select;
            trim_whitespace(thd->charset(), &lex->create_view_select);
            lex->parsing_options.allows_variable= TRUE;
            lex->parsing_options.allows_select_into= TRUE;
            lex->parsing_options.allows_select_procedure= TRUE;
            lex->parsing_options.allows_derived= TRUE;
          }
    break;

  case 2649:

/* Line 1455 of yacc.c  */
#line 15252 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_NONE; }
    break;

  case 2650:

/* Line 1455 of yacc.c  */
#line 15254 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_CASCADED; }
    break;

  case 2651:

/* Line 1455 of yacc.c  */
#line 15256 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_CASCADED; }
    break;

  case 2652:

/* Line 1455 of yacc.c  */
#line 15258 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_LOCAL; }
    break;

  case 2653:

/* Line 1455 of yacc.c  */
#line 15275 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* $8 */
            Lex->raw_trg_on_table_name_begin= YYLIP->get_tok_start();
          }
    break;

  case 2654:

/* Line 1455 of yacc.c  */
#line 15281 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* $12 */
            Lex->raw_trg_on_table_name_end= YYLIP->get_tok_start();
          }
    break;

  case 2655:

/* Line 1455 of yacc.c  */
#line 15286 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* $15 */
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_head *sp;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "TRIGGER");
              MYSQL_YYABORT;
            }

            if (!(sp= new sp_head()))
              MYSQL_YYABORT;
            sp->reset_thd_mem_root(thd);
            sp->init(lex);
            sp->m_type= TYPE_ENUM_TRIGGER;
            sp->init_sp_name(thd, (yyvsp[(3) - (14)].spname));
            lex->stmt_definition_begin= (yyvsp[(2) - (14)].simple_string);
            lex->ident.str= (yyvsp[(7) - (14)].simple_string);
            lex->ident.length= (yyvsp[(11) - (14)].simple_string) - (yyvsp[(7) - (14)].simple_string);

            lex->sphead= sp;
            lex->spname= (yyvsp[(3) - (14)].spname);

            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
            lex->sphead->m_chistics= &lex->sp_chistics;
            lex->sphead->set_body_start(thd, lip->get_cpp_ptr());
          }
    break;

  case 2656:

/* Line 1455 of yacc.c  */
#line 15316 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* $17 */
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            lex->sql_command= SQLCOM_CREATE_TRIGGER;
            sp->set_stmt_end(YYTHD);
            sp->restore_thd_mem_root(YYTHD);

            if (sp->is_not_allowed_in_function("trigger"))
              MYSQL_YYABORT;

            /*
              We have to do it after parsing trigger body, because some of
              sp_proc_stmt alternatives are not saving/restoring LEX, so
              lex->query_tables can be wiped out.
            */
            if (!lex->select_lex.add_table_to_list(YYTHD, (yyvsp[(9) - (16)].table),
                                                   (LEX_STRING*) 0,
                                                   TL_OPTION_UPDATING,
                                                   TL_READ_NO_INSERT,
                                                   MDL_SHARED_NO_WRITE))
              MYSQL_YYABORT;
          }
    break;

  case 2657:

/* Line 1455 of yacc.c  */
#line 15350 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            if (is_native_function(thd, & (yyvsp[(4) - (8)].lex_str)))
            {
              my_error(ER_NATIVE_FCT_NAME_COLLISION, MYF(0),
                       (yyvsp[(4) - (8)].lex_str).str);
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_CREATE_FUNCTION;
            lex->udf.type= UDFTYPE_AGGREGATE;
            lex->stmt_definition_begin= (yyvsp[(2) - (8)].simple_string);
            lex->udf.name = (yyvsp[(4) - (8)].lex_str);
            lex->udf.returns=(Item_result) (yyvsp[(6) - (8)].num);
            lex->udf.dl=(yyvsp[(8) - (8)].lex_str).str;
          }
    break;

  case 2658:

/* Line 1455 of yacc.c  */
#line 15368 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            if (is_native_function(thd, & (yyvsp[(3) - (7)].lex_str)))
            {
              my_error(ER_NATIVE_FCT_NAME_COLLISION, MYF(0),
                       (yyvsp[(3) - (7)].lex_str).str);
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_CREATE_FUNCTION;
            lex->udf.type= UDFTYPE_FUNCTION;
            lex->stmt_definition_begin= (yyvsp[(1) - (7)].simple_string);
            lex->udf.name = (yyvsp[(3) - (7)].lex_str);
            lex->udf.returns=(Item_result) (yyvsp[(5) - (7)].num);
            lex->udf.dl=(yyvsp[(7) - (7)].lex_str).str;
          }
    break;

  case 2659:

/* Line 1455 of yacc.c  */
#line 15391 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* $5 */
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_head *sp;
            const char* tmp_param_begin;

            lex->stmt_definition_begin= (yyvsp[(1) - (4)].simple_string);
            lex->spname= (yyvsp[(3) - (4)].spname);

            if (lex->sphead)
            {
              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            /* Order is important here: new - reset - init */
            sp= new sp_head();
            if (sp == NULL)
              MYSQL_YYABORT;
            sp->reset_thd_mem_root(thd);
            sp->init(lex);
            sp->init_sp_name(thd, lex->spname);

            sp->m_type= TYPE_ENUM_FUNCTION;
            lex->sphead= sp;

            tmp_param_begin= lip->get_cpp_tok_start();
            tmp_param_begin++;
            lex->sphead->m_param_begin= tmp_param_begin;
          }
    break;

  case 2660:

/* Line 1455 of yacc.c  */
#line 15423 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* $8 */
            Lex->sphead->m_param_end= YYLIP->get_cpp_tok_start();
          }
    break;

  case 2661:

/* Line 1455 of yacc.c  */
#line 15427 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* $10 */
            LEX *lex= Lex;
            lex->charset= NULL;
            lex->length= lex->dec= NULL;
            lex->interval_list.empty();
            lex->type= 0;
            lex->vcol_info= 0;
          }
    break;

  case 2662:

/* Line 1455 of yacc.c  */
#line 15436 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* $12 */
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            /*
              This was disabled in 5.1.12. See bug #20701
              When collation support in SP is implemented, then this test
              should be removed.
            */
            if (((yyvsp[(11) - (11)].num) == MYSQL_TYPE_STRING || (yyvsp[(11) - (11)].num) == MYSQL_TYPE_VARCHAR)
                && (lex->type & BINCMP_FLAG))
            {
              my_error(ER_NOT_SUPPORTED_YET, MYF(0), "return value collation");
              MYSQL_YYABORT;
            }

            if (sp->fill_field_definition(YYTHD, lex,
                                          (enum enum_field_types) (yyvsp[(11) - (11)].num),
                                          &sp->m_return_field_def))
              MYSQL_YYABORT;

            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
    break;

  case 2663:

/* Line 1455 of yacc.c  */
#line 15459 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* $14 */
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            lex->sphead->m_chistics= &lex->sp_chistics;
            lex->sphead->set_body_start(thd, lip->get_cpp_tok_start());
          }
    break;

  case 2664:

/* Line 1455 of yacc.c  */
#line 15468 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            if (sp->is_not_allowed_in_function("function"))
              MYSQL_YYABORT;

            lex->sql_command= SQLCOM_CREATE_SPFUNCTION;
            sp->set_stmt_end(thd);
            if (!(sp->m_flags & sp_head::HAS_RETURN))
            {
              my_error(ER_SP_NORETURN, MYF(0), sp->m_qname.str);
              MYSQL_YYABORT;
            }
            if (is_native_function(thd, & sp->m_name))
            {
              /*
                This warning will be printed when
                [1] A client query is parsed,
                [2] A stored function is loaded by db_load_routine.
                Printing the warning for [2] is intentional, to cover the
                following scenario:
                - A user define a SF 'foo' using MySQL 5.N
                - An application uses select foo(), and works.
                - MySQL 5.{N+1} defines a new native function 'foo', as
                part of a new feature.
                - MySQL 5.{N+1} documentation is updated, and should mention
                that there is a potential incompatible change in case of
                existing stored function named 'foo'.
                - The user deploys 5.{N+1}. At this point, 'select foo()'
                means something different, and the user code is most likely
                broken (it's only safe if the code is 'select db.foo()').
                With a warning printed when the SF is loaded (which has to occur
                before the call), the warning will provide a hint explaining
                the root cause of a later failure of 'select foo()'.
                With no warning printed, the user code will fail with no
                apparent reason.
                Printing a warning each time db_load_routine is executed for
                an ambiguous function is annoying, since that can happen a lot,
                but in practice should not happen unless there *are* name
                collisions.
                If a collision exists, it should not be silenced but fixed.
              */
              push_warning_printf(thd,
                                  MYSQL_ERROR::WARN_LEVEL_NOTE,
                                  ER_NATIVE_FCT_NAME_COLLISION,
                                  ER(ER_NATIVE_FCT_NAME_COLLISION),
                                  sp->m_name.str);
            }
            sp->restore_thd_mem_root(thd);
          }
    break;

  case 2665:

/* Line 1455 of yacc.c  */
#line 15524 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }

            lex->stmt_definition_begin= (yyvsp[(2) - (3)].simple_string);

            /* Order is important here: new - reset - init */
            sp= new sp_head();
            if (sp == NULL)
              MYSQL_YYABORT;
            sp->reset_thd_mem_root(YYTHD);
            sp->init(lex);
            sp->m_type= TYPE_ENUM_PROCEDURE;
            sp->init_sp_name(YYTHD, (yyvsp[(3) - (3)].spname));

            lex->sphead= sp;
          }
    break;

  case 2666:

/* Line 1455 of yacc.c  */
#line 15548 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            const char* tmp_param_begin;

            tmp_param_begin= YYLIP->get_cpp_tok_start();
            tmp_param_begin++;
            Lex->sphead->m_param_begin= tmp_param_begin;
          }
    break;

  case 2667:

/* Line 1455 of yacc.c  */
#line 15557 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            lex->sphead->m_param_end= YYLIP->get_cpp_tok_start();
            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
    break;

  case 2668:

/* Line 1455 of yacc.c  */
#line 15565 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            lex->sphead->m_chistics= &lex->sp_chistics;
            lex->sphead->set_body_start(thd, YYLIP->get_cpp_tok_start());
          }
    break;

  case 2669:

/* Line 1455 of yacc.c  */
#line 15573 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            sp->set_stmt_end(YYTHD);
            lex->sql_command= SQLCOM_CREATE_PROCEDURE;
            sp->restore_thd_mem_root(YYTHD);
          }
    break;

  case 2670:

/* Line 1455 of yacc.c  */
#line 15587 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_START;
          }
    break;

  case 2671:

/* Line 1455 of yacc.c  */
#line 15591 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_END;
          }
    break;

  case 2672:

/* Line 1455 of yacc.c  */
#line 15595 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_PREPARE;
          }
    break;

  case 2673:

/* Line 1455 of yacc.c  */
#line 15599 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_COMMIT;
          }
    break;

  case 2674:

/* Line 1455 of yacc.c  */
#line 15603 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_ROLLBACK;
          }
    break;

  case 2675:

/* Line 1455 of yacc.c  */
#line 15607 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_RECOVER;
          }
    break;

  case 2676:

/* Line 1455 of yacc.c  */
#line 15614 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (1)].string)->length() <= MAXGTRIDSIZE);
            if (!(Lex->xid=(XID *)YYTHD->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set(1L, (yyvsp[(1) - (1)].string)->ptr(), (yyvsp[(1) - (1)].string)->length(), 0, 0);
          }
    break;

  case 2677:

/* Line 1455 of yacc.c  */
#line 15621 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].string)->length() <= MAXGTRIDSIZE && (yyvsp[(3) - (3)].string)->length() <= MAXBQUALSIZE);
            if (!(Lex->xid=(XID *)YYTHD->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set(1L, (yyvsp[(1) - (3)].string)->ptr(), (yyvsp[(1) - (3)].string)->length(), (yyvsp[(3) - (3)].string)->ptr(), (yyvsp[(3) - (3)].string)->length());
          }
    break;

  case 2678:

/* Line 1455 of yacc.c  */
#line 15628 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].string)->length() <= MAXGTRIDSIZE && (yyvsp[(3) - (5)].string)->length() <= MAXBQUALSIZE);
            if (!(Lex->xid=(XID *)YYTHD->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set((yyvsp[(5) - (5)].ulong_num), (yyvsp[(1) - (5)].string)->ptr(), (yyvsp[(1) - (5)].string)->length(), (yyvsp[(3) - (5)].string)->ptr(), (yyvsp[(3) - (5)].string)->length());
          }
    break;

  case 2679:

/* Line 1455 of yacc.c  */
#line 15637 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2680:

/* Line 1455 of yacc.c  */
#line 15638 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2681:

/* Line 1455 of yacc.c  */
#line 15642 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2682:

/* Line 1455 of yacc.c  */
#line 15643 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_JOIN;        }
    break;

  case 2683:

/* Line 1455 of yacc.c  */
#line 15644 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_RESUME;      }
    break;

  case 2684:

/* Line 1455 of yacc.c  */
#line 15648 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2685:

/* Line 1455 of yacc.c  */
#line 15649 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_ONE_PHASE;   }
    break;

  case 2686:

/* Line 1455 of yacc.c  */
#line 15654 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2687:

/* Line 1455 of yacc.c  */
#line 15656 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_SUSPEND;     }
    break;

  case 2689:

/* Line 1455 of yacc.c  */
#line 15661 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2690:

/* Line 1455 of yacc.c  */
#line 15662 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_FOR_MIGRATE; }
    break;

  case 2691:

/* Line 1455 of yacc.c  */
#line 15667 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_INSTALL_PLUGIN;
            lex->comment= (yyvsp[(3) - (5)].lex_str);
            lex->ident= (yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 2692:

/* Line 1455 of yacc.c  */
#line 15674 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_INSTALL_PLUGIN;
            lex->comment= null_lex_str;
            lex->ident= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 2693:

/* Line 1455 of yacc.c  */
#line 15684 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_UNINSTALL_PLUGIN;
            lex->comment= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 2694:

/* Line 1455 of yacc.c  */
#line 15690 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_UNINSTALL_PLUGIN;
            lex->comment= null_lex_str;
            lex->ident= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 2695:

/* Line 1455 of yacc.c  */
#line 15701 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
	  YYERROR;
	}
    break;



/* Line 1455 of yacc.c  */
#line 41974 "/home/buildbot/buildbot/build/mkdist/sql/sql_yacc.cc"
      default: break;
    }
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;

  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (YY_("syntax error"));
#else
      {
	YYSIZE_T yysize = yysyntax_error (0, yystate, yychar);
	if (yymsg_alloc < yysize && yymsg_alloc < YYSTACK_ALLOC_MAXIMUM)
	  {
	    YYSIZE_T yyalloc = 2 * yysize;
	    if (! (yysize <= yyalloc && yyalloc <= YYSTACK_ALLOC_MAXIMUM))
	      yyalloc = YYSTACK_ALLOC_MAXIMUM;
	    if (yymsg != yymsgbuf)
	      YYSTACK_FREE (yymsg);
	    yymsg = (char *) YYSTACK_ALLOC (yyalloc);
	    if (yymsg)
	      yymsg_alloc = yyalloc;
	    else
	      {
		yymsg = yymsgbuf;
		yymsg_alloc = sizeof yymsgbuf;
	      }
	  }

	if (0 < yysize && yysize <= yymsg_alloc)
	  {
	    (void) yysyntax_error (yymsg, yystate, yychar);
	    yyerror (yymsg);
	  }
	else
	  {
	    yyerror (YY_("syntax error"));
	    if (yysize != 0)
	      goto yyexhaustedlab;
	  }
      }
#endif
    }



  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */

      if (yychar <= YYEOF)
	{
	  /* Return failure if at end of input.  */
	  if (yychar == YYEOF)
	    YYABORT;
	}
      else
	{
	  yydestruct ("Error: discarding",
		      yytoken, &yylval);
	  yychar = YYEMPTY;
	}
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  /* Do not reclaim the symbols of the rule which action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (yyn != YYPACT_NINF)
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
	YYABORT;


      yydestruct ("Error: popping",
		  yystos[yystate], yyvsp);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  *++yyvsp = yylval;


  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#if !defined(yyoverflow) || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEMPTY)
     yydestruct ("Cleanup: discarding lookahead",
		 yytoken, &yylval);
  /* Do not reclaim the symbols of the rule which action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
		  yystos[*yyssp], yyvsp);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  /* Make sure YYID is used.  */
  return YYID (yyresult);
}



