
/* A Bison parser, made by GNU Bison 2.4.1.  */

/* Skeleton implementation for Bison's Yacc-like parsers in C
   
      Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003, 2004, 2005, 2006
   Free Software Foundation, Inc.
   
   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.
   
   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "2.4.1"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1

/* Using locations.  */
#define YYLSP_NEEDED 0

/* Substitute the variable and function names.  */
#define yyparse         MYSQLparse
#define yylex           MYSQLlex
#define yyerror         MYSQLerror
#define yylval          MYSQLlval
#define yychar          MYSQLchar
#define yydebug         MYSQLdebug
#define yynerrs         MYSQLnerrs


/* Copy the first part of user declarations.  */

/* Line 189 of yacc.c  */
#line 25 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"

/* thd is passed as an argument to yyparse(), and subsequently to yylex().
** The type will be void*, so it must be  cast to (THD*) when used.
** Use the YYTHD macro for this.
*/
#define YYPARSE_PARAM yythd
#define YYLEX_PARAM yythd
#define YYTHD ((THD *)yythd)
#define YYLIP (& YYTHD->m_parser_state->m_lip)
#define YYPS (& YYTHD->m_parser_state->m_yacc)

#define MYSQL_YACC
#define YYINITDEPTH 100
#define YYMAXDEPTH 3200                        /* Because of 64K stack */
#define Lex (YYTHD->lex)

#define Select Lex->current_select
#include "sql_priv.h"
#include "unireg.h"                    // REQUIRED: for other includes
#include "sql_parse.h"                        /* comp_*_creator */
#include "sql_table.h"                        /* primary_key_name */
#include "sql_partition.h"  /* mem_alloc_error, partition_info, HASH_PARTITION */
#include "sql_acl.h"                          /* *_ACL */
#include "password.h"       /* my_make_scrambled_password_323, my_make_scrambled_password */
#include "sql_class.h"      /* Key_part_spec, enum_filetype, Diag_condition_item_name */
#include "slave.h"
#include "lex_symbol.h"
#include "item_create.h"
#include "sp_head.h"
#include "sp_pcontext.h"
#include "sp_rcontext.h"
#include "sp.h"
#include "sql_alter.h"                         // Alter_table*_statement
#include "sql_truncate.h"                      // Truncate_statement
#include "sql_admin.h"                         // Analyze/Check..._table_stmt
#include "sql_partition_admin.h"               // Alter_table_*_partition_stmt
#include "sql_signal.h"
#include "event_parse_data.h"
#include "create_options.h"
#include <myisam.h>
#include <myisammrg.h>
#include "keycaches.h"
#include "set_var.h"
#include "rpl_mi.h"

/* this is to get the bison compilation windows warnings out */
#ifdef _MSC_VER
/* warning C4065: switch statement contains 'default' but no 'case' labels */
#pragma warning (disable : 4065)
#endif

int yylex(void *yylval, void *yythd);

#define yyoverflow(A,B,C,D,E,F)               \
  {                                           \
    ulong val= *(F);                          \
    if (my_yyoverflow((B), (D), &val))        \
    {                                         \
      yyerror((char*) (A));                   \
      return 2;                               \
    }                                         \
    else                                      \
    {                                         \
      *(F)= (YYSIZE_T)val;                    \
    }                                         \
  }

#define MYSQL_YYABORT                         \
  do                                          \
  {                                           \
    LEX::cleanup_lex_after_parse_error(YYTHD);\
    YYABORT;                                  \
  } while (0)

#define MYSQL_YYABORT_UNLESS(A)         \
  if (!(A))                             \
  {                                     \
    my_parse_error(ER(ER_SYNTAX_ERROR));\
    MYSQL_YYABORT;                      \
  }

/*
  Work around for broken code generated by bison 1.875.

  The code generated by bison 1.875a and later, bison 2.1 and bison 2.2 is ok.
  With bison 1.875 however, the generated code contains:
<pre>
  yyerrlab1:
  #if defined (__GNUC_MINOR__) && 2093 <= (__GNUC__ * 1000 + __GNUC_MINOR__)
    __attribute__ ((__unused__))
  #endif
</pre>
  This usage of __attribute__ is illegal, so we remove it.
  See the following references for details:
  http://lists.gnu.org/archive/html/bug-bison/2004-02/msg00014.html
  http://gcc.gnu.org/bugzilla/show_bug.cgi?id=14273
*/

#if defined (__GNUC_MINOR__) && 2093 <= (__GNUC__ * 1000 + __GNUC_MINOR__)
#undef __attribute__
#define __attribute__(X)
#endif


#ifndef DBUG_OFF
#define YYDEBUG 1
#else
#define YYDEBUG 0
#endif

/**
  @brief Push an error message into MySQL error stack with line
  and position information.

  This function provides semantic action implementers with a way
  to push the famous "You have a syntax error near..." error
  message into the error stack, which is normally produced only if
  a parse error is discovered internally by the Bison generated
  parser.
*/

void my_parse_error(const char *s)
{
  THD *thd= current_thd;
  Lex_input_stream *lip= & thd->m_parser_state->m_lip;

  const char *yytext= lip->get_tok_start();
  if (!yytext)
    yytext= "";

  /* Push an error into the error stack */
  ErrConvString err(yytext, strlen(yytext), thd->variables.character_set_client);
  my_printf_error(ER_PARSE_ERROR,  ER(ER_PARSE_ERROR), MYF(0), s,
                  err.ptr(), lip->yylineno);
}

/**
  @brief Bison callback to report a syntax/OOM error

  This function is invoked by the bison-generated parser
  when a syntax error, a parse error or an out-of-memory
  condition occurs. This function is not invoked when the
  parser is requested to abort by semantic action code
  by means of YYABORT or YYACCEPT macros. This is why these
  macros should not be used (use MYSQL_YYABORT/MYSQL_YYACCEPT
  instead).

  The parser will abort immediately after invoking this callback.

  This function is not for use in semantic actions and is internal to
  the parser, as it performs some pre-return cleanup. 
  In semantic actions, please use my_parse_error or my_error to
  push an error into the error stack and MYSQL_YYABORT
  to abort from the parser.
*/

void MYSQLerror(const char *s)
{
  THD *thd= current_thd;

  /*
    Restore the original LEX if it was replaced when parsing
    a stored procedure. We must ensure that a parsing error
    does not leave any side effects in the THD.
  */
  LEX::cleanup_lex_after_parse_error(thd);

  /* "parse error" changed into "syntax error" between bison 1.75 and 1.875 */
  if (strcmp(s,"parse error") == 0 || strcmp(s,"syntax error") == 0)
    s= ER(ER_SYNTAX_ERROR);
  my_parse_error(s);
}


#ifndef DBUG_OFF
void turn_parser_debug_on()
{
  /*
     MYSQLdebug is in sql/sql_yacc.cc, in bison generated code.
     Turning this option on is **VERY** verbose, and should be
     used when investigating a syntax error problem only.

     The syntax to run with bison traces is as follows :
     - Starting a server manually :
       mysqld --debug-dbug="d,parser_debug" ...
     - Running a test :
       mysql-test-run.pl --mysqld="--debug-dbug=d,parser_debug" ...

     The result will be in the process stderr (var/log/master.err)
   */

  extern int yydebug;
  yydebug= 1;
}
#endif

static bool is_native_function(THD *thd, const LEX_STRING *name)
{
  if (find_native_function_builder(thd, *name))
    return true;

  if (is_lex_native_function(name))
    return true;

  return false;
}


/**
  Helper action for a case statement (entering the CASE).
  This helper is used for both 'simple' and 'searched' cases.
  This helper, with the other case_stmt_action_..., is executed when
  the following SQL code is parsed:
<pre>
CREATE PROCEDURE proc_19194_simple(i int)
BEGIN
  DECLARE str CHAR(10);

  CASE i
    WHEN 1 THEN SET str="1";
    WHEN 2 THEN SET str="2";
    WHEN 3 THEN SET str="3";
    ELSE SET str="unknown";
  END CASE;

  SELECT str;
END
</pre>
  The actions are used to generate the following code:
<pre>
SHOW PROCEDURE CODE proc_19194_simple;
Pos     Instruction
0       set str@1 NULL
1       set_case_expr (12) 0 i@0
2       jump_if_not 5(12) (case_expr@0 = 1)
3       set str@1 _latin1'1'
4       jump 12
5       jump_if_not 8(12) (case_expr@0 = 2)
6       set str@1 _latin1'2'
7       jump 12
8       jump_if_not 11(12) (case_expr@0 = 3)
9       set str@1 _latin1'3'
10      jump 12
11      set str@1 _latin1'unknown'
12      stmt 0 "SELECT str"
</pre>

  @param lex the parser lex context
*/

void case_stmt_action_case(LEX *lex)
{
  lex->sphead->new_cont_backpatch(NULL);

  /*
    BACKPATCH: Creating target label for the jump to
    "case_stmt_action_end_case"
    (Instruction 12 in the example)
  */

  lex->spcont->push_label((char *)"", lex->sphead->instructions());
}

/**
  Helper action for a case expression statement (the expr in 'CASE expr').
  This helper is used for 'searched' cases only.
  @param lex the parser lex context
  @param expr the parsed expression
  @return 0 on success
*/

int case_stmt_action_expr(LEX *lex, Item* expr)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *parsing_ctx= lex->spcont;
  int case_expr_id= parsing_ctx->register_case_expr();
  sp_instr_set_case_expr *i;

  if (parsing_ctx->push_case_expr_id(case_expr_id))
    return 1;

  i= new sp_instr_set_case_expr(sp->instructions(),
                                parsing_ctx, case_expr_id, expr, lex);

  sp->add_cont_backpatch(i);
  return sp->add_instr(i);
}

/**
  Helper action for a case when condition.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
  @param when the parsed expression for the WHEN clause
  @param simple true for simple cases, false for searched cases
*/

int case_stmt_action_when(LEX *lex, Item *when, bool simple)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *ctx= lex->spcont;
  uint ip= sp->instructions();
  sp_instr_jump_if_not *i;
  Item_case_expr *var;
  Item *expr;

  if (simple)
  {
    var= new Item_case_expr(ctx->get_current_case_expr_id());

#ifndef DBUG_OFF
    if (var)
    {
      var->m_sp= sp;
    }
#endif

    expr= new Item_func_eq(var, when);
    i= new sp_instr_jump_if_not(ip, ctx, expr, lex);
  }
  else
    i= new sp_instr_jump_if_not(ip, ctx, when, lex);

  /*
    BACKPATCH: Registering forward jump from
    "case_stmt_action_when" to "case_stmt_action_then"
    (jump_if_not from instruction 2 to 5, 5 to 8 ... in the example)
  */

  return !test(i) ||
         sp->push_backpatch(i, ctx->push_label((char *)"", 0)) ||
         sp->add_cont_backpatch(i) ||
         sp->add_instr(i);
}

/**
  Helper action for a case then statements.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
*/

int case_stmt_action_then(LEX *lex)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *ctx= lex->spcont;
  uint ip= sp->instructions();
  sp_instr_jump *i = new sp_instr_jump(ip, ctx);
  if (!test(i) || sp->add_instr(i))
    return 1;

  /*
    BACKPATCH: Resolving forward jump from
    "case_stmt_action_when" to "case_stmt_action_then"
    (jump_if_not from instruction 2 to 5, 5 to 8 ... in the example)
  */

  sp->backpatch(ctx->pop_label());

  /*
    BACKPATCH: Registering forward jump from
    "case_stmt_action_then" to "case_stmt_action_end_case"
    (jump from instruction 4 to 12, 7 to 12 ... in the example)
  */

  return sp->push_backpatch(i, ctx->last_label());
}

/**
  Helper action for an end case.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
  @param simple true for simple cases, false for searched cases
*/

void case_stmt_action_end_case(LEX *lex, bool simple)
{
  /*
    BACKPATCH: Resolving forward jump from
    "case_stmt_action_then" to "case_stmt_action_end_case"
    (jump from instruction 4 to 12, 7 to 12 ... in the example)
  */
  lex->sphead->backpatch(lex->spcont->pop_label());

  if (simple)
    lex->spcont->pop_case_expr_id();

  lex->sphead->do_cont_backpatch();
}


static bool
find_sys_var_null_base(THD *thd, struct sys_var_with_base *tmp)
{
  tmp->var= find_sys_var(thd, tmp->base_name.str, tmp->base_name.length);

  if (tmp->var == NULL)
    my_error(ER_UNKNOWN_SYSTEM_VARIABLE, MYF(0), tmp->base_name.str);
  else
    tmp->base_name= null_lex_str;

  return thd->is_error();
}


/**
  Helper action for a SET statement.
  Used to push a system variable into the assignment list.

  @param thd      the current thread
  @param tmp      the system variable with base name
  @param var_type the scope of the variable
  @param val      the value being assigned to the variable

  @return TRUE if error, FALSE otherwise.
*/

static bool
set_system_variable(THD *thd, struct sys_var_with_base *tmp,
                    enum enum_var_type var_type, Item *val)
{
  set_var *var;
  LEX *lex= thd->lex;

  /* No AUTOCOMMIT from a stored function or trigger. */
  if (lex->spcont && tmp->var == Sys_autocommit_ptr)
    lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;

  if (! (var= new set_var(var_type, tmp->var, &tmp->base_name, val)))
    return TRUE;

  return lex->var_list.push_back(var);
}


/**
  Helper action for a SET statement.
  Used to push a SP local variable into the assignment list.

  @param thd      the current thread
  @param var_type the SP local variable
  @param val      the value being assigned to the variable

  @return TRUE if error, FALSE otherwise.
*/

static bool
set_local_variable(THD *thd, sp_variable_t *spv, Item *val)
{
  Item *it;
  LEX *lex= thd->lex;
  sp_instr_set *sp_set;

  if (val)
    it= val;
  else if (spv->dflt)
    it= spv->dflt;
  else
  {
    it= new (thd->mem_root) Item_null();
    if (it == NULL)
      return TRUE;
  }

  sp_set= new sp_instr_set(lex->sphead->instructions(), lex->spcont,
                           spv->offset, it, spv->type, lex, TRUE);

  return (sp_set == NULL || lex->sphead->add_instr(sp_set));
}


/**
  Helper action for a SET statement.
  Used to SET a field of NEW row.

  @param thd      the current thread
  @param name     the field name
  @param val      the value being assigned to the row

  @return TRUE if error, FALSE otherwise.
*/

static bool
set_trigger_new_row(THD *thd, LEX_STRING *name, Item *val)
{
  LEX *lex= thd->lex;
  Item_trigger_field *trg_fld;
  sp_instr_set_trigger_field *sp_fld;

  /* QQ: Shouldn't this be field's default value ? */
  if (! val)
    val= new Item_null();

  DBUG_ASSERT(lex->trg_chistics.action_time == TRG_ACTION_BEFORE &&
              (lex->trg_chistics.event == TRG_EVENT_INSERT ||
               lex->trg_chistics.event == TRG_EVENT_UPDATE));

  trg_fld= new (thd->mem_root)
            Item_trigger_field(lex->current_context(),
                               Item_trigger_field::NEW_ROW,
                               name->str, UPDATE_ACL, FALSE);

  if (trg_fld == NULL)
    return TRUE;

  sp_fld= new sp_instr_set_trigger_field(lex->sphead->instructions(),
                                         lex->spcont, trg_fld, val, lex);

  if (sp_fld == NULL)
    return TRUE;

  /*
    Let us add this item to list of all Item_trigger_field
    objects in trigger.
  */
  lex->trg_table_fields.link_in_list(trg_fld, &trg_fld->next_trg_field);

  return lex->sphead->add_instr(sp_fld);
}


/**
  Helper to resolve the SQL:2003 Syntax exception 1) in <in predicate>.
  See SQL:2003, Part 2, section 8.4 <in predicate>, Note 184, page 383.
  This function returns the proper item for the SQL expression
  <code>left [NOT] IN ( expr )</code>
  @param thd the current thread
  @param left the in predicand
  @param equal true for IN predicates, false for NOT IN predicates
  @param expr first and only expression of the in value list
  @return an expression representing the IN predicate.
*/
Item* handle_sql2003_note184_exception(THD *thd, Item* left, bool equal,
                                       Item *expr)
{
  /*
    Relevant references for this issue:
    - SQL:2003, Part 2, section 8.4 <in predicate>, page 383,
    - SQL:2003, Part 2, section 7.2 <row value expression>, page 296,
    - SQL:2003, Part 2, section 6.3 <value expression primary>, page 174,
    - SQL:2003, Part 2, section 7.15 <subquery>, page 370,
    - SQL:2003 Feature F561, "Full value expressions".

    The exception in SQL:2003 Note 184 means:
    Item_singlerow_subselect, which corresponds to a <scalar subquery>,
    should be re-interpreted as an Item_in_subselect, which corresponds
    to a <table subquery> when used inside an <in predicate>.

    Our reading of Note 184 is reccursive, so that all:
    - IN (( <subquery> ))
    - IN ((( <subquery> )))
    - IN '('^N <subquery> ')'^N
    - etc
    should be interpreted as a <table subquery>, no matter how deep in the
    expression the <subquery> is.
  */

  Item *result;

  DBUG_ENTER("handle_sql2003_note184_exception");

  if (expr->type() == Item::SUBSELECT_ITEM)
  {
    Item_subselect *expr2 = (Item_subselect*) expr;

    if (expr2->substype() == Item_subselect::SINGLEROW_SUBS)
    {
      Item_singlerow_subselect *expr3 = (Item_singlerow_subselect*) expr2;
      st_select_lex *subselect;

      /*
        Implement the mandated change, by altering the semantic tree:
          left IN Item_singlerow_subselect(subselect)
        is modified to
          left IN (subselect)
        which is represented as
          Item_in_subselect(left, subselect)
      */
      subselect= expr3->invalidate_and_restore_select_lex();
      result= new (thd->mem_root) Item_in_subselect(left, subselect);

      if (! equal)
        result = negate_expression(thd, result);

      DBUG_RETURN(result);
    }
  }

  if (equal)
    result= new (thd->mem_root) Item_func_eq(left, expr);
  else
    result= new (thd->mem_root) Item_func_ne(left, expr);

  DBUG_RETURN(result);
}

/**
   @brief Creates a new SELECT_LEX for a UNION branch.

   Sets up and initializes a SELECT_LEX structure for a query once the parser
   discovers a UNION token. The current SELECT_LEX is pushed on the stack and
   the new SELECT_LEX becomes the current one.

   @param lex The parser state.

   @param is_union_distinct True if the union preceding the new select statement
   uses UNION DISTINCT.

   @param is_top_level This should be @c TRUE if the newly created SELECT_LEX
   is a non-nested statement.

   @return <code>false</code> if successful, <code>true</code> if an error was
   reported. In the latter case parsing should stop.
 */
bool add_select_to_union_list(LEX *lex, bool is_union_distinct, 
                              bool is_top_level)
{
  /* 
     Only the last SELECT can have INTO. Since the grammar won't allow INTO in
     a nested SELECT, we make this check only when creating a top-level SELECT.
  */
  if (is_top_level && lex->result)
  {
    my_error(ER_WRONG_USAGE, MYF(0), "UNION", "INTO");
    return TRUE;
  }
  if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
  {
    my_parse_error(ER(ER_SYNTAX_ERROR));
    return TRUE;
  }
  /* This counter shouldn't be incremented for UNION parts */
  lex->nest_level--;
  if (mysql_new_select(lex, 0))
    return TRUE;
  mysql_init_select(lex);
  lex->current_select->linkage=UNION_TYPE;
  if (is_union_distinct) /* UNION DISTINCT - remember position */
    lex->current_select->master_unit()->union_distinct=
      lex->current_select;
  return FALSE;
}

/**
   @brief Initializes a SELECT_LEX for a query within parentheses (aka
   braces).

   @return false if successful, true if an error was reported. In the latter
   case parsing should stop.
 */
bool setup_select_in_parentheses(LEX *lex) 
{
  SELECT_LEX * sel= lex->current_select;
  if (sel->set_braces(1))
  {
    my_parse_error(ER(ER_SYNTAX_ERROR));
    return TRUE;
  }
  if (sel->linkage == UNION_TYPE &&
      !sel->master_unit()->first_select()->braces &&
      sel->master_unit()->first_select()->linkage ==
      UNION_TYPE)
  {
    my_parse_error(ER(ER_SYNTAX_ERROR));
    return TRUE;
  }
  if (sel->linkage == UNION_TYPE &&
      sel->olap != UNSPECIFIED_OLAP_TYPE &&
      sel->master_unit()->fake_select_lex)
  {
    my_error(ER_WRONG_USAGE, MYF(0), "CUBE/ROLLUP", "ORDER BY");
    return TRUE;
  }
  /* select in braces, can't contain global parameters */
  if (sel->master_unit()->fake_select_lex)
    sel->master_unit()->global_parameters=
      sel->master_unit()->fake_select_lex;
  return FALSE;
}

static bool add_create_index_prepare (LEX *lex, Table_ident *table)
{
  lex->sql_command= SQLCOM_CREATE_INDEX;
  if (!lex->current_select->add_table_to_list(lex->thd, table, NULL,
                                              TL_OPTION_UPDATING,
                                              TL_READ_NO_INSERT,
                                              MDL_SHARED_NO_WRITE))
    return TRUE;
  lex->alter_info.reset();
  lex->alter_info.flags= ALTER_ADD_INDEX;
  lex->col_list.empty();
  lex->change= NullS;
  lex->option_list= NULL;
  return FALSE;
}

static bool add_create_index (LEX *lex, Key::Keytype type,
                              const LEX_STRING &name,
                              KEY_CREATE_INFO *info= NULL, bool generated= 0)
{
  Key *key;
  key= new Key(type, name, info ? info : &lex->key_create_info, generated, 
               lex->col_list, lex->option_list);
  if (key == NULL)
    return TRUE;

  lex->alter_info.key_list.push_back(key);
  lex->col_list.empty();
  return FALSE;
}


/**
  Create a separate LEX for each assignment if in SP.

  If we are in SP we want have own LEX for each assignment.
  This is mostly because it is hard for several sp_instr_set
  and sp_instr_set_trigger instructions share one LEX.
  (Well, it is theoretically possible but adds some extra
  overhead on preparation for execution stage and IMO less
  robust).

  QQ: May be we should simply prohibit group assignments in SP?

  @see sp_create_assignment_instr

  @param thd           Thread context
  @param no_lookahead  True if the parser has no lookahead
*/

static void sp_create_assignment_lex(THD *thd, bool no_lookahead)
{
  LEX *lex= thd->lex;

  if (lex->sphead)
  {
    Lex_input_stream *lip= &thd->m_parser_state->m_lip;
    LEX *old_lex= lex;
    lex->sphead->reset_lex(thd);
    lex= thd->lex;

    /* Set new LEX as if we at start of set rule. */
    lex->sql_command= SQLCOM_SET_OPTION;
    mysql_init_select(lex);
    lex->var_list.empty();
    lex->one_shot_set= 0;
    lex->autocommit= 0;
    /* get_ptr() is only correct with no lookahead. */
    DBUG_ASSERT(no_lookahead);
    lex->sphead->m_tmp_query= lip->get_ptr();
    /* Inherit from outer lex. */
    lex->option_type= old_lex->option_type;
  }
}


/**
  Create a SP instruction for a SET assignment.

  @see sp_create_assignment_lex

  @param thd           Thread context
  @param no_lookahead  True if the parser has no lookahead

  @return false if success, true otherwise.
*/

static bool sp_create_assignment_instr(THD *thd, bool no_lookahead)
{
  LEX *lex= thd->lex;

  if (lex->sphead)
  {
    sp_head *sp= lex->sphead;

    if (!lex->var_list.is_empty())
    {
      /*
        We have assignment to user or system variable or
        option setting, so we should construct sp_instr_stmt
        for it.
      */
      LEX_STRING qbuff;
      sp_instr_stmt *i;
      Lex_input_stream *lip= &thd->m_parser_state->m_lip;

      if (!(i= new sp_instr_stmt(sp->instructions(), lex->spcont,
                                 lex)))
        return true;

      /*
        Extract the query statement from the tokenizer.  The
        end is either lip->ptr, if there was no lookahead,
        lip->tok_end otherwise.
      */
      if (no_lookahead)
        qbuff.length= lip->get_ptr() - sp->m_tmp_query;
      else
        qbuff.length= lip->get_tok_end() - sp->m_tmp_query;

      if (!(qbuff.str= (char*) alloc_root(thd->mem_root,
                                          qbuff.length + 5)))
        return true;

      strmake(strmake(qbuff.str, "SET ", 4), sp->m_tmp_query,
              qbuff.length);
      qbuff.length+= 4;
      i->m_query= qbuff;
      if (sp->add_instr(i))
        return true;
    }
    enum_var_type inner_option_type= lex->option_type;
    if (lex->sphead->restore_lex(thd))
      return true;
    /* Copy option_type to outer lex in case it has changed. */
    thd->lex->option_type= inner_option_type;
  }
  return false;
}




/* Line 189 of yacc.c  */
#line 903 "/home/buildbot/buildbot/build/mkdist/sql/sql_yacc.cc"

/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* Enabling the token table.  */
#ifndef YYTOKEN_TABLE
# define YYTOKEN_TABLE 0
#endif


/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     ABORT_SYM = 258,
     ACCESSIBLE_SYM = 259,
     ACTION = 260,
     ADD = 261,
     ADDDATE_SYM = 262,
     AFTER_SYM = 263,
     AGAINST = 264,
     AGGREGATE_SYM = 265,
     ALGORITHM_SYM = 266,
     ALL = 267,
     ALTER = 268,
     ALWAYS_SYM = 269,
     ANALYZE_SYM = 270,
     AND_AND_SYM = 271,
     AND_SYM = 272,
     ANY_SYM = 273,
     AS = 274,
     ASC = 275,
     ASCII_SYM = 276,
     ASENSITIVE_SYM = 277,
     AT_SYM = 278,
     AUTHORS_SYM = 279,
     AUTOEXTEND_SIZE_SYM = 280,
     AUTO_INC = 281,
     AVG_ROW_LENGTH = 282,
     AVG_SYM = 283,
     BACKUP_SYM = 284,
     BEFORE_SYM = 285,
     BEGIN_SYM = 286,
     BETWEEN_SYM = 287,
     BIGINT = 288,
     BINARY = 289,
     BINLOG_SYM = 290,
     BIN_NUM = 291,
     BIT_AND = 292,
     BIT_OR = 293,
     BIT_SYM = 294,
     BIT_XOR = 295,
     BLOB_SYM = 296,
     BLOCK_SYM = 297,
     BOOLEAN_SYM = 298,
     BOOL_SYM = 299,
     BOTH = 300,
     BTREE_SYM = 301,
     BY = 302,
     BYTE_SYM = 303,
     CACHE_SYM = 304,
     CALL_SYM = 305,
     CASCADE = 306,
     CASCADED = 307,
     CASE_SYM = 308,
     CAST_SYM = 309,
     CATALOG_NAME_SYM = 310,
     CHAIN_SYM = 311,
     CHANGE = 312,
     CHANGED = 313,
     CHARSET = 314,
     CHAR_SYM = 315,
     CHECKPOINT_SYM = 316,
     CHECKSUM_SYM = 317,
     CHECK_SYM = 318,
     CIPHER_SYM = 319,
     CLASS_ORIGIN_SYM = 320,
     CLIENT_SYM = 321,
     CLIENT_STATS_SYM = 322,
     CLOSE_SYM = 323,
     COALESCE = 324,
     CODE_SYM = 325,
     COLLATE_SYM = 326,
     COLLATION_SYM = 327,
     COLUMNS = 328,
     COLUMN_ADD_SYM = 329,
     COLUMN_CREATE_SYM = 330,
     COLUMN_DELETE_SYM = 331,
     COLUMN_EXISTS_SYM = 332,
     COLUMN_GET_SYM = 333,
     COLUMN_LIST_SYM = 334,
     COLUMN_SYM = 335,
     COLUMN_NAME_SYM = 336,
     COMMENT_SYM = 337,
     COMMITTED_SYM = 338,
     COMMIT_SYM = 339,
     COMPACT_SYM = 340,
     COMPLETION_SYM = 341,
     COMPRESSED_SYM = 342,
     CONCURRENT = 343,
     CONDITION_SYM = 344,
     CONNECTION_SYM = 345,
     CONSISTENT_SYM = 346,
     CONSTRAINT = 347,
     CONSTRAINT_CATALOG_SYM = 348,
     CONSTRAINT_NAME_SYM = 349,
     CONSTRAINT_SCHEMA_SYM = 350,
     CONTAINS_SYM = 351,
     CONTEXT_SYM = 352,
     CONTINUE_SYM = 353,
     CONTRIBUTORS_SYM = 354,
     CONVERT_SYM = 355,
     COUNT_SYM = 356,
     CPU_SYM = 357,
     CREATE = 358,
     CROSS = 359,
     CUBE_SYM = 360,
     CURDATE = 361,
     CURRENT_USER = 362,
     CURSOR_SYM = 363,
     CURSOR_NAME_SYM = 364,
     CURTIME = 365,
     DATABASE = 366,
     DATABASES = 367,
     DATAFILE_SYM = 368,
     DATA_SYM = 369,
     DATETIME = 370,
     DATE_ADD_INTERVAL = 371,
     DATE_SUB_INTERVAL = 372,
     DATE_SYM = 373,
     DAY_HOUR_SYM = 374,
     DAY_MICROSECOND_SYM = 375,
     DAY_MINUTE_SYM = 376,
     DAY_SECOND_SYM = 377,
     DAY_SYM = 378,
     DEALLOCATE_SYM = 379,
     DECIMAL_NUM = 380,
     DECIMAL_SYM = 381,
     DECLARE_SYM = 382,
     DEFAULT = 383,
     DEFINER_SYM = 384,
     DELAYED_SYM = 385,
     DELAY_KEY_WRITE_SYM = 386,
     DELETE_SYM = 387,
     DESC = 388,
     DESCRIBE = 389,
     DES_KEY_FILE = 390,
     DETERMINISTIC_SYM = 391,
     DIRECTORY_SYM = 392,
     DISABLE_SYM = 393,
     DISCARD = 394,
     DISK_SYM = 395,
     DISTINCT = 396,
     DIV_SYM = 397,
     DOUBLE_SYM = 398,
     DO_SYM = 399,
     DROP = 400,
     DUAL_SYM = 401,
     DUMPFILE = 402,
     DUPLICATE_SYM = 403,
     DYNAMIC_SYM = 404,
     EACH_SYM = 405,
     ELSE = 406,
     ELSEIF_SYM = 407,
     ENABLE_SYM = 408,
     ENCLOSED = 409,
     END = 410,
     ENDS_SYM = 411,
     END_OF_INPUT = 412,
     ENGINES_SYM = 413,
     ENGINE_SYM = 414,
     ENUM = 415,
     EQ = 416,
     EQUAL_SYM = 417,
     ERROR_SYM = 418,
     ERRORS = 419,
     ESCAPED = 420,
     ESCAPE_SYM = 421,
     EVENTS_SYM = 422,
     EVENT_SYM = 423,
     EVERY_SYM = 424,
     EXAMINED_SYM = 425,
     EXECUTE_SYM = 426,
     EXISTS = 427,
     EXIT_SYM = 428,
     EXPANSION_SYM = 429,
     EXTENDED_SYM = 430,
     EXTENT_SIZE_SYM = 431,
     EXTRACT_SYM = 432,
     FALSE_SYM = 433,
     FAST_SYM = 434,
     FAULTS_SYM = 435,
     FETCH_SYM = 436,
     FILE_SYM = 437,
     FIRST_SYM = 438,
     FIXED_SYM = 439,
     FLOAT_NUM = 440,
     FLOAT_SYM = 441,
     FLUSH_SYM = 442,
     FORCE_SYM = 443,
     FOREIGN = 444,
     FOR_SYM = 445,
     FOUND_SYM = 446,
     FROM = 447,
     FULL = 448,
     FULLTEXT_SYM = 449,
     FUNCTION_SYM = 450,
     GE = 451,
     GENERAL = 452,
     GENERATED_SYM = 453,
     GEOMETRYCOLLECTION = 454,
     GEOMETRY_SYM = 455,
     GET_FORMAT = 456,
     GLOBAL_SYM = 457,
     GRANT = 458,
     GRANTS = 459,
     GROUP_SYM = 460,
     GROUP_CONCAT_SYM = 461,
     GT_SYM = 462,
     HANDLER_SYM = 463,
     HARD_SYM = 464,
     HASH_SYM = 465,
     HAVING = 466,
     HELP_SYM = 467,
     HEX_NUM = 468,
     HIGH_PRIORITY = 469,
     HOST_SYM = 470,
     HOSTS_SYM = 471,
     HOUR_MICROSECOND_SYM = 472,
     HOUR_MINUTE_SYM = 473,
     HOUR_SECOND_SYM = 474,
     HOUR_SYM = 475,
     IDENT = 476,
     IDENTIFIED_SYM = 477,
     IDENT_QUOTED = 478,
     IF = 479,
     IGNORE_SYM = 480,
     IGNORE_SERVER_IDS_SYM = 481,
     IMPORT = 482,
     INDEXES = 483,
     INDEX_SYM = 484,
     INDEX_STATS_SYM = 485,
     INFILE = 486,
     INITIAL_SIZE_SYM = 487,
     INNER_SYM = 488,
     INOUT_SYM = 489,
     INSENSITIVE_SYM = 490,
     INSERT = 491,
     INSERT_METHOD = 492,
     INSTALL_SYM = 493,
     INTERVAL_SYM = 494,
     INTO = 495,
     INT_SYM = 496,
     INVOKER_SYM = 497,
     IN_SYM = 498,
     IO_SYM = 499,
     IPC_SYM = 500,
     IS = 501,
     ISOLATION = 502,
     ISSUER_SYM = 503,
     ITERATE_SYM = 504,
     JOIN_SYM = 505,
     KEYS = 506,
     KEY_BLOCK_SIZE = 507,
     KEY_SYM = 508,
     KILL_SYM = 509,
     LANGUAGE_SYM = 510,
     LAST_SYM = 511,
     LAST_VALUE = 512,
     LE = 513,
     LEADING = 514,
     LEAVES = 515,
     LEAVE_SYM = 516,
     LEFT = 517,
     LESS_SYM = 518,
     LEVEL_SYM = 519,
     LEX_HOSTNAME = 520,
     LIKE = 521,
     LIMIT = 522,
     LINEAR_SYM = 523,
     LINES = 524,
     LINESTRING = 525,
     LIST_SYM = 526,
     LOAD = 527,
     LOCAL_SYM = 528,
     LOCATOR_SYM = 529,
     LOCKS_SYM = 530,
     LOCK_SYM = 531,
     LOGFILE_SYM = 532,
     LOGS_SYM = 533,
     LONGBLOB = 534,
     LONGTEXT = 535,
     LONG_NUM = 536,
     LONG_SYM = 537,
     LOOP_SYM = 538,
     LOW_PRIORITY = 539,
     LT = 540,
     MASTER_CONNECT_RETRY_SYM = 541,
     MASTER_HOST_SYM = 542,
     MASTER_LOG_FILE_SYM = 543,
     MASTER_LOG_POS_SYM = 544,
     MASTER_PASSWORD_SYM = 545,
     MASTER_PORT_SYM = 546,
     MASTER_SERVER_ID_SYM = 547,
     MASTER_SSL_CAPATH_SYM = 548,
     MASTER_SSL_CA_SYM = 549,
     MASTER_SSL_CERT_SYM = 550,
     MASTER_SSL_CIPHER_SYM = 551,
     MASTER_SSL_CRL_SYM = 552,
     MASTER_SSL_CRLPATH_SYM = 553,
     MASTER_SSL_KEY_SYM = 554,
     MASTER_SSL_SYM = 555,
     MASTER_SSL_VERIFY_SERVER_CERT_SYM = 556,
     MASTER_SYM = 557,
     MASTER_USER_SYM = 558,
     MASTER_HEARTBEAT_PERIOD_SYM = 559,
     MATCH = 560,
     MAX_CONNECTIONS_PER_HOUR = 561,
     MAX_QUERIES_PER_HOUR = 562,
     MAX_ROWS = 563,
     MAX_SIZE_SYM = 564,
     MAX_SYM = 565,
     MAX_UPDATES_PER_HOUR = 566,
     MAX_USER_CONNECTIONS_SYM = 567,
     MAX_VALUE_SYM = 568,
     MEDIUMBLOB = 569,
     MEDIUMINT = 570,
     MEDIUMTEXT = 571,
     MEDIUM_SYM = 572,
     MEMORY_SYM = 573,
     MERGE_SYM = 574,
     MESSAGE_TEXT_SYM = 575,
     MICROSECOND_SYM = 576,
     MIGRATE_SYM = 577,
     MINUTE_MICROSECOND_SYM = 578,
     MINUTE_SECOND_SYM = 579,
     MINUTE_SYM = 580,
     MIN_ROWS = 581,
     MIN_SYM = 582,
     MODE_SYM = 583,
     MODIFIES_SYM = 584,
     MODIFY_SYM = 585,
     MOD_SYM = 586,
     MONTH_SYM = 587,
     MULTILINESTRING = 588,
     MULTIPOINT = 589,
     MULTIPOLYGON = 590,
     MUTEX_SYM = 591,
     MYSQL_ERRNO_SYM = 592,
     NAMES_SYM = 593,
     NAME_SYM = 594,
     NATIONAL_SYM = 595,
     NATURAL = 596,
     NCHAR_STRING = 597,
     NCHAR_SYM = 598,
     NDBCLUSTER_SYM = 599,
     NE = 600,
     NEG = 601,
     NEW_SYM = 602,
     NEXT_SYM = 603,
     NODEGROUP_SYM = 604,
     NONE_SYM = 605,
     NOT2_SYM = 606,
     NOT_SYM = 607,
     NOW_SYM = 608,
     NO_SYM = 609,
     NO_WAIT_SYM = 610,
     NO_WRITE_TO_BINLOG = 611,
     NULL_SYM = 612,
     NUM = 613,
     NUMERIC_SYM = 614,
     NVARCHAR_SYM = 615,
     OFFSET_SYM = 616,
     OLD_PASSWORD = 617,
     ON = 618,
     ONE_SYM = 619,
     ONLY_SYM = 620,
     ONLINE_SYM = 621,
     OPEN_SYM = 622,
     OPTIMIZE = 623,
     OPTIONS_SYM = 624,
     OPTION = 625,
     OPTIONALLY = 626,
     OR2_SYM = 627,
     ORDER_SYM = 628,
     OR_OR_SYM = 629,
     OR_SYM = 630,
     OUTER = 631,
     OUTFILE = 632,
     OUT_SYM = 633,
     OWNER_SYM = 634,
     PACK_KEYS_SYM = 635,
     PAGE_SYM = 636,
     PAGE_CHECKSUM_SYM = 637,
     PARAM_MARKER = 638,
     PARSER_SYM = 639,
     PARSE_VCOL_EXPR_SYM = 640,
     PARTIAL = 641,
     PARTITIONING_SYM = 642,
     PARTITIONS_SYM = 643,
     PARTITION_SYM = 644,
     PASSWORD = 645,
     PERSISTENT_SYM = 646,
     PHASE_SYM = 647,
     PLUGINS_SYM = 648,
     PLUGIN_SYM = 649,
     POINT_SYM = 650,
     POLYGON = 651,
     PORT_SYM = 652,
     POSITION_SYM = 653,
     PRECISION = 654,
     PREPARE_SYM = 655,
     PRESERVE_SYM = 656,
     PREV_SYM = 657,
     PRIMARY_SYM = 658,
     PRIVILEGES = 659,
     PROCEDURE_SYM = 660,
     PROCESS = 661,
     PROCESSLIST_SYM = 662,
     PROFILE_SYM = 663,
     PROFILES_SYM = 664,
     PROXY_SYM = 665,
     PURGE = 666,
     QUARTER_SYM = 667,
     QUERY_SYM = 668,
     QUICK = 669,
     RANGE_SYM = 670,
     READS_SYM = 671,
     READ_ONLY_SYM = 672,
     READ_SYM = 673,
     READ_WRITE_SYM = 674,
     REAL = 675,
     REBUILD_SYM = 676,
     RECOVER_SYM = 677,
     REDOFILE_SYM = 678,
     REDO_BUFFER_SIZE_SYM = 679,
     REDUNDANT_SYM = 680,
     REFERENCES = 681,
     REGEXP = 682,
     RELAY = 683,
     RELAYLOG_SYM = 684,
     RELAY_LOG_FILE_SYM = 685,
     RELAY_LOG_POS_SYM = 686,
     RELAY_THREAD = 687,
     RELEASE_SYM = 688,
     RELOAD = 689,
     REMOVE_SYM = 690,
     RENAME = 691,
     REORGANIZE_SYM = 692,
     REPAIR = 693,
     REPEATABLE_SYM = 694,
     REPEAT_SYM = 695,
     REPLACE = 696,
     REPLICATION = 697,
     REQUIRE_SYM = 698,
     RESET_SYM = 699,
     RESIGNAL_SYM = 700,
     RESOURCES = 701,
     RESTORE_SYM = 702,
     RESTRICT = 703,
     RESUME_SYM = 704,
     RETURNS_SYM = 705,
     RETURN_SYM = 706,
     REVOKE = 707,
     RIGHT = 708,
     ROLLBACK_SYM = 709,
     ROLLUP_SYM = 710,
     ROUTINE_SYM = 711,
     ROWS_SYM = 712,
     ROW_FORMAT_SYM = 713,
     ROW_SYM = 714,
     RTREE_SYM = 715,
     SAVEPOINT_SYM = 716,
     SCHEDULE_SYM = 717,
     SCHEMA_NAME_SYM = 718,
     SECOND_MICROSECOND_SYM = 719,
     SECOND_SYM = 720,
     SECURITY_SYM = 721,
     SELECT_SYM = 722,
     SENSITIVE_SYM = 723,
     SEPARATOR_SYM = 724,
     SERIALIZABLE_SYM = 725,
     SERIAL_SYM = 726,
     SESSION_SYM = 727,
     SERVER_SYM = 728,
     SERVER_OPTIONS = 729,
     SET = 730,
     SET_VAR = 731,
     SHARE_SYM = 732,
     SHIFT_LEFT = 733,
     SHIFT_RIGHT = 734,
     SHOW = 735,
     SHUTDOWN = 736,
     SIGNAL_SYM = 737,
     SIGNED_SYM = 738,
     SIMPLE_SYM = 739,
     SLAVE = 740,
     SLAVES = 741,
     SLOW = 742,
     SMALLINT = 743,
     SNAPSHOT_SYM = 744,
     SOCKET_SYM = 745,
     SOFT_SYM = 746,
     SONAME_SYM = 747,
     SOUNDS_SYM = 748,
     SOURCE_SYM = 749,
     SPATIAL_SYM = 750,
     SPECIFIC_SYM = 751,
     SQLEXCEPTION_SYM = 752,
     SQLSTATE_SYM = 753,
     SQLWARNING_SYM = 754,
     SQL_BIG_RESULT = 755,
     SQL_BUFFER_RESULT = 756,
     SQL_CACHE_SYM = 757,
     SQL_CALC_FOUND_ROWS = 758,
     SQL_NO_CACHE_SYM = 759,
     SQL_SMALL_RESULT = 760,
     SQL_SYM = 761,
     SQL_THREAD = 762,
     SSL_SYM = 763,
     STARTING = 764,
     STARTS_SYM = 765,
     START_SYM = 766,
     STATUS_SYM = 767,
     STDDEV_SAMP_SYM = 768,
     STD_SYM = 769,
     STOP_SYM = 770,
     STORAGE_SYM = 771,
     STRAIGHT_JOIN = 772,
     STRING_SYM = 773,
     SUBCLASS_ORIGIN_SYM = 774,
     SUBDATE_SYM = 775,
     SUBJECT_SYM = 776,
     SUBPARTITIONS_SYM = 777,
     SUBPARTITION_SYM = 778,
     SUBSTRING = 779,
     SUM_SYM = 780,
     SUPER_SYM = 781,
     SUSPEND_SYM = 782,
     SWAPS_SYM = 783,
     SWITCHES_SYM = 784,
     SYSDATE = 785,
     TABLES = 786,
     TABLESPACE = 787,
     TABLE_REF_PRIORITY = 788,
     TABLE_STATS_SYM = 789,
     TABLE_SYM = 790,
     TABLE_CHECKSUM_SYM = 791,
     TABLE_NAME_SYM = 792,
     TEMPORARY = 793,
     TEMPTABLE_SYM = 794,
     TERMINATED = 795,
     TEXT_STRING = 796,
     TEXT_SYM = 797,
     THAN_SYM = 798,
     THEN_SYM = 799,
     TIMESTAMP = 800,
     TIMESTAMP_ADD = 801,
     TIMESTAMP_DIFF = 802,
     TIME_SYM = 803,
     TINYBLOB = 804,
     TINYINT = 805,
     TINYTEXT = 806,
     TO_SYM = 807,
     TRAILING = 808,
     TRANSACTION_SYM = 809,
     TRANSACTIONAL_SYM = 810,
     TRIGGERS_SYM = 811,
     TRIGGER_SYM = 812,
     TRIM = 813,
     TRUE_SYM = 814,
     TRUNCATE_SYM = 815,
     TYPES_SYM = 816,
     TYPE_SYM = 817,
     UDF_RETURNS_SYM = 818,
     ULONGLONG_NUM = 819,
     UNCOMMITTED_SYM = 820,
     UNDEFINED_SYM = 821,
     UNDERSCORE_CHARSET = 822,
     UNDOFILE_SYM = 823,
     UNDO_BUFFER_SIZE_SYM = 824,
     UNDO_SYM = 825,
     UNICODE_SYM = 826,
     UNINSTALL_SYM = 827,
     UNION_SYM = 828,
     UNIQUE_SYM = 829,
     UNKNOWN_SYM = 830,
     UNLOCK_SYM = 831,
     UNSIGNED = 832,
     UNTIL_SYM = 833,
     UPDATE_SYM = 834,
     UPGRADE_SYM = 835,
     USAGE = 836,
     USER = 837,
     USER_STATS_SYM = 838,
     USE_FRM = 839,
     USE_SYM = 840,
     USING = 841,
     UTC_DATE_SYM = 842,
     UTC_TIMESTAMP_SYM = 843,
     UTC_TIME_SYM = 844,
     VALUES = 845,
     VALUE_SYM = 846,
     VARBINARY = 847,
     VARCHAR = 848,
     VARIABLES = 849,
     VARIANCE_SYM = 850,
     VARYING = 851,
     VAR_SAMP_SYM = 852,
     VIA_SYM = 853,
     VIEW_SYM = 854,
     VIRTUAL_SYM = 855,
     WAIT_SYM = 856,
     WARNINGS = 857,
     WEEK_SYM = 858,
     WHEN_SYM = 859,
     WHERE = 860,
     WHILE_SYM = 861,
     WITH = 862,
     WITH_CUBE_SYM = 863,
     WITH_ROLLUP_SYM = 864,
     WORK_SYM = 865,
     WRAPPER_SYM = 866,
     WRITE_SYM = 867,
     X509_SYM = 868,
     XA_SYM = 869,
     XML_SYM = 870,
     XOR = 871,
     YEAR_MONTH_SYM = 872,
     YEAR_SYM = 873,
     ZEROFILL = 874,
     IMPOSSIBLE_ACTION = 875
   };
#endif
/* Tokens.  */
#define ABORT_SYM 258
#define ACCESSIBLE_SYM 259
#define ACTION 260
#define ADD 261
#define ADDDATE_SYM 262
#define AFTER_SYM 263
#define AGAINST 264
#define AGGREGATE_SYM 265
#define ALGORITHM_SYM 266
#define ALL 267
#define ALTER 268
#define ALWAYS_SYM 269
#define ANALYZE_SYM 270
#define AND_AND_SYM 271
#define AND_SYM 272
#define ANY_SYM 273
#define AS 274
#define ASC 275
#define ASCII_SYM 276
#define ASENSITIVE_SYM 277
#define AT_SYM 278
#define AUTHORS_SYM 279
#define AUTOEXTEND_SIZE_SYM 280
#define AUTO_INC 281
#define AVG_ROW_LENGTH 282
#define AVG_SYM 283
#define BACKUP_SYM 284
#define BEFORE_SYM 285
#define BEGIN_SYM 286
#define BETWEEN_SYM 287
#define BIGINT 288
#define BINARY 289
#define BINLOG_SYM 290
#define BIN_NUM 291
#define BIT_AND 292
#define BIT_OR 293
#define BIT_SYM 294
#define BIT_XOR 295
#define BLOB_SYM 296
#define BLOCK_SYM 297
#define BOOLEAN_SYM 298
#define BOOL_SYM 299
#define BOTH 300
#define BTREE_SYM 301
#define BY 302
#define BYTE_SYM 303
#define CACHE_SYM 304
#define CALL_SYM 305
#define CASCADE 306
#define CASCADED 307
#define CASE_SYM 308
#define CAST_SYM 309
#define CATALOG_NAME_SYM 310
#define CHAIN_SYM 311
#define CHANGE 312
#define CHANGED 313
#define CHARSET 314
#define CHAR_SYM 315
#define CHECKPOINT_SYM 316
#define CHECKSUM_SYM 317
#define CHECK_SYM 318
#define CIPHER_SYM 319
#define CLASS_ORIGIN_SYM 320
#define CLIENT_SYM 321
#define CLIENT_STATS_SYM 322
#define CLOSE_SYM 323
#define COALESCE 324
#define CODE_SYM 325
#define COLLATE_SYM 326
#define COLLATION_SYM 327
#define COLUMNS 328
#define COLUMN_ADD_SYM 329
#define COLUMN_CREATE_SYM 330
#define COLUMN_DELETE_SYM 331
#define COLUMN_EXISTS_SYM 332
#define COLUMN_GET_SYM 333
#define COLUMN_LIST_SYM 334
#define COLUMN_SYM 335
#define COLUMN_NAME_SYM 336
#define COMMENT_SYM 337
#define COMMITTED_SYM 338
#define COMMIT_SYM 339
#define COMPACT_SYM 340
#define COMPLETION_SYM 341
#define COMPRESSED_SYM 342
#define CONCURRENT 343
#define CONDITION_SYM 344
#define CONNECTION_SYM 345
#define CONSISTENT_SYM 346
#define CONSTRAINT 347
#define CONSTRAINT_CATALOG_SYM 348
#define CONSTRAINT_NAME_SYM 349
#define CONSTRAINT_SCHEMA_SYM 350
#define CONTAINS_SYM 351
#define CONTEXT_SYM 352
#define CONTINUE_SYM 353
#define CONTRIBUTORS_SYM 354
#define CONVERT_SYM 355
#define COUNT_SYM 356
#define CPU_SYM 357
#define CREATE 358
#define CROSS 359
#define CUBE_SYM 360
#define CURDATE 361
#define CURRENT_USER 362
#define CURSOR_SYM 363
#define CURSOR_NAME_SYM 364
#define CURTIME 365
#define DATABASE 366
#define DATABASES 367
#define DATAFILE_SYM 368
#define DATA_SYM 369
#define DATETIME 370
#define DATE_ADD_INTERVAL 371
#define DATE_SUB_INTERVAL 372
#define DATE_SYM 373
#define DAY_HOUR_SYM 374
#define DAY_MICROSECOND_SYM 375
#define DAY_MINUTE_SYM 376
#define DAY_SECOND_SYM 377
#define DAY_SYM 378
#define DEALLOCATE_SYM 379
#define DECIMAL_NUM 380
#define DECIMAL_SYM 381
#define DECLARE_SYM 382
#define DEFAULT 383
#define DEFINER_SYM 384
#define DELAYED_SYM 385
#define DELAY_KEY_WRITE_SYM 386
#define DELETE_SYM 387
#define DESC 388
#define DESCRIBE 389
#define DES_KEY_FILE 390
#define DETERMINISTIC_SYM 391
#define DIRECTORY_SYM 392
#define DISABLE_SYM 393
#define DISCARD 394
#define DISK_SYM 395
#define DISTINCT 396
#define DIV_SYM 397
#define DOUBLE_SYM 398
#define DO_SYM 399
#define DROP 400
#define DUAL_SYM 401
#define DUMPFILE 402
#define DUPLICATE_SYM 403
#define DYNAMIC_SYM 404
#define EACH_SYM 405
#define ELSE 406
#define ELSEIF_SYM 407
#define ENABLE_SYM 408
#define ENCLOSED 409
#define END 410
#define ENDS_SYM 411
#define END_OF_INPUT 412
#define ENGINES_SYM 413
#define ENGINE_SYM 414
#define ENUM 415
#define EQ 416
#define EQUAL_SYM 417
#define ERROR_SYM 418
#define ERRORS 419
#define ESCAPED 420
#define ESCAPE_SYM 421
#define EVENTS_SYM 422
#define EVENT_SYM 423
#define EVERY_SYM 424
#define EXAMINED_SYM 425
#define EXECUTE_SYM 426
#define EXISTS 427
#define EXIT_SYM 428
#define EXPANSION_SYM 429
#define EXTENDED_SYM 430
#define EXTENT_SIZE_SYM 431
#define EXTRACT_SYM 432
#define FALSE_SYM 433
#define FAST_SYM 434
#define FAULTS_SYM 435
#define FETCH_SYM 436
#define FILE_SYM 437
#define FIRST_SYM 438
#define FIXED_SYM 439
#define FLOAT_NUM 440
#define FLOAT_SYM 441
#define FLUSH_SYM 442
#define FORCE_SYM 443
#define FOREIGN 444
#define FOR_SYM 445
#define FOUND_SYM 446
#define FROM 447
#define FULL 448
#define FULLTEXT_SYM 449
#define FUNCTION_SYM 450
#define GE 451
#define GENERAL 452
#define GENERATED_SYM 453
#define GEOMETRYCOLLECTION 454
#define GEOMETRY_SYM 455
#define GET_FORMAT 456
#define GLOBAL_SYM 457
#define GRANT 458
#define GRANTS 459
#define GROUP_SYM 460
#define GROUP_CONCAT_SYM 461
#define GT_SYM 462
#define HANDLER_SYM 463
#define HARD_SYM 464
#define HASH_SYM 465
#define HAVING 466
#define HELP_SYM 467
#define HEX_NUM 468
#define HIGH_PRIORITY 469
#define HOST_SYM 470
#define HOSTS_SYM 471
#define HOUR_MICROSECOND_SYM 472
#define HOUR_MINUTE_SYM 473
#define HOUR_SECOND_SYM 474
#define HOUR_SYM 475
#define IDENT 476
#define IDENTIFIED_SYM 477
#define IDENT_QUOTED 478
#define IF 479
#define IGNORE_SYM 480
#define IGNORE_SERVER_IDS_SYM 481
#define IMPORT 482
#define INDEXES 483
#define INDEX_SYM 484
#define INDEX_STATS_SYM 485
#define INFILE 486
#define INITIAL_SIZE_SYM 487
#define INNER_SYM 488
#define INOUT_SYM 489
#define INSENSITIVE_SYM 490
#define INSERT 491
#define INSERT_METHOD 492
#define INSTALL_SYM 493
#define INTERVAL_SYM 494
#define INTO 495
#define INT_SYM 496
#define INVOKER_SYM 497
#define IN_SYM 498
#define IO_SYM 499
#define IPC_SYM 500
#define IS 501
#define ISOLATION 502
#define ISSUER_SYM 503
#define ITERATE_SYM 504
#define JOIN_SYM 505
#define KEYS 506
#define KEY_BLOCK_SIZE 507
#define KEY_SYM 508
#define KILL_SYM 509
#define LANGUAGE_SYM 510
#define LAST_SYM 511
#define LAST_VALUE 512
#define LE 513
#define LEADING 514
#define LEAVES 515
#define LEAVE_SYM 516
#define LEFT 517
#define LESS_SYM 518
#define LEVEL_SYM 519
#define LEX_HOSTNAME 520
#define LIKE 521
#define LIMIT 522
#define LINEAR_SYM 523
#define LINES 524
#define LINESTRING 525
#define LIST_SYM 526
#define LOAD 527
#define LOCAL_SYM 528
#define LOCATOR_SYM 529
#define LOCKS_SYM 530
#define LOCK_SYM 531
#define LOGFILE_SYM 532
#define LOGS_SYM 533
#define LONGBLOB 534
#define LONGTEXT 535
#define LONG_NUM 536
#define LONG_SYM 537
#define LOOP_SYM 538
#define LOW_PRIORITY 539
#define LT 540
#define MASTER_CONNECT_RETRY_SYM 541
#define MASTER_HOST_SYM 542
#define MASTER_LOG_FILE_SYM 543
#define MASTER_LOG_POS_SYM 544
#define MASTER_PASSWORD_SYM 545
#define MASTER_PORT_SYM 546
#define MASTER_SERVER_ID_SYM 547
#define MASTER_SSL_CAPATH_SYM 548
#define MASTER_SSL_CA_SYM 549
#define MASTER_SSL_CERT_SYM 550
#define MASTER_SSL_CIPHER_SYM 551
#define MASTER_SSL_CRL_SYM 552
#define MASTER_SSL_CRLPATH_SYM 553
#define MASTER_SSL_KEY_SYM 554
#define MASTER_SSL_SYM 555
#define MASTER_SSL_VERIFY_SERVER_CERT_SYM 556
#define MASTER_SYM 557
#define MASTER_USER_SYM 558
#define MASTER_HEARTBEAT_PERIOD_SYM 559
#define MATCH 560
#define MAX_CONNECTIONS_PER_HOUR 561
#define MAX_QUERIES_PER_HOUR 562
#define MAX_ROWS 563
#define MAX_SIZE_SYM 564
#define MAX_SYM 565
#define MAX_UPDATES_PER_HOUR 566
#define MAX_USER_CONNECTIONS_SYM 567
#define MAX_VALUE_SYM 568
#define MEDIUMBLOB 569
#define MEDIUMINT 570
#define MEDIUMTEXT 571
#define MEDIUM_SYM 572
#define MEMORY_SYM 573
#define MERGE_SYM 574
#define MESSAGE_TEXT_SYM 575
#define MICROSECOND_SYM 576
#define MIGRATE_SYM 577
#define MINUTE_MICROSECOND_SYM 578
#define MINUTE_SECOND_SYM 579
#define MINUTE_SYM 580
#define MIN_ROWS 581
#define MIN_SYM 582
#define MODE_SYM 583
#define MODIFIES_SYM 584
#define MODIFY_SYM 585
#define MOD_SYM 586
#define MONTH_SYM 587
#define MULTILINESTRING 588
#define MULTIPOINT 589
#define MULTIPOLYGON 590
#define MUTEX_SYM 591
#define MYSQL_ERRNO_SYM 592
#define NAMES_SYM 593
#define NAME_SYM 594
#define NATIONAL_SYM 595
#define NATURAL 596
#define NCHAR_STRING 597
#define NCHAR_SYM 598
#define NDBCLUSTER_SYM 599
#define NE 600
#define NEG 601
#define NEW_SYM 602
#define NEXT_SYM 603
#define NODEGROUP_SYM 604
#define NONE_SYM 605
#define NOT2_SYM 606
#define NOT_SYM 607
#define NOW_SYM 608
#define NO_SYM 609
#define NO_WAIT_SYM 610
#define NO_WRITE_TO_BINLOG 611
#define NULL_SYM 612
#define NUM 613
#define NUMERIC_SYM 614
#define NVARCHAR_SYM 615
#define OFFSET_SYM 616
#define OLD_PASSWORD 617
#define ON 618
#define ONE_SYM 619
#define ONLY_SYM 620
#define ONLINE_SYM 621
#define OPEN_SYM 622
#define OPTIMIZE 623
#define OPTIONS_SYM 624
#define OPTION 625
#define OPTIONALLY 626
#define OR2_SYM 627
#define ORDER_SYM 628
#define OR_OR_SYM 629
#define OR_SYM 630
#define OUTER 631
#define OUTFILE 632
#define OUT_SYM 633
#define OWNER_SYM 634
#define PACK_KEYS_SYM 635
#define PAGE_SYM 636
#define PAGE_CHECKSUM_SYM 637
#define PARAM_MARKER 638
#define PARSER_SYM 639
#define PARSE_VCOL_EXPR_SYM 640
#define PARTIAL 641
#define PARTITIONING_SYM 642
#define PARTITIONS_SYM 643
#define PARTITION_SYM 644
#define PASSWORD 645
#define PERSISTENT_SYM 646
#define PHASE_SYM 647
#define PLUGINS_SYM 648
#define PLUGIN_SYM 649
#define POINT_SYM 650
#define POLYGON 651
#define PORT_SYM 652
#define POSITION_SYM 653
#define PRECISION 654
#define PREPARE_SYM 655
#define PRESERVE_SYM 656
#define PREV_SYM 657
#define PRIMARY_SYM 658
#define PRIVILEGES 659
#define PROCEDURE_SYM 660
#define PROCESS 661
#define PROCESSLIST_SYM 662
#define PROFILE_SYM 663
#define PROFILES_SYM 664
#define PROXY_SYM 665
#define PURGE 666
#define QUARTER_SYM 667
#define QUERY_SYM 668
#define QUICK 669
#define RANGE_SYM 670
#define READS_SYM 671
#define READ_ONLY_SYM 672
#define READ_SYM 673
#define READ_WRITE_SYM 674
#define REAL 675
#define REBUILD_SYM 676
#define RECOVER_SYM 677
#define REDOFILE_SYM 678
#define REDO_BUFFER_SIZE_SYM 679
#define REDUNDANT_SYM 680
#define REFERENCES 681
#define REGEXP 682
#define RELAY 683
#define RELAYLOG_SYM 684
#define RELAY_LOG_FILE_SYM 685
#define RELAY_LOG_POS_SYM 686
#define RELAY_THREAD 687
#define RELEASE_SYM 688
#define RELOAD 689
#define REMOVE_SYM 690
#define RENAME 691
#define REORGANIZE_SYM 692
#define REPAIR 693
#define REPEATABLE_SYM 694
#define REPEAT_SYM 695
#define REPLACE 696
#define REPLICATION 697
#define REQUIRE_SYM 698
#define RESET_SYM 699
#define RESIGNAL_SYM 700
#define RESOURCES 701
#define RESTORE_SYM 702
#define RESTRICT 703
#define RESUME_SYM 704
#define RETURNS_SYM 705
#define RETURN_SYM 706
#define REVOKE 707
#define RIGHT 708
#define ROLLBACK_SYM 709
#define ROLLUP_SYM 710
#define ROUTINE_SYM 711
#define ROWS_SYM 712
#define ROW_FORMAT_SYM 713
#define ROW_SYM 714
#define RTREE_SYM 715
#define SAVEPOINT_SYM 716
#define SCHEDULE_SYM 717
#define SCHEMA_NAME_SYM 718
#define SECOND_MICROSECOND_SYM 719
#define SECOND_SYM 720
#define SECURITY_SYM 721
#define SELECT_SYM 722
#define SENSITIVE_SYM 723
#define SEPARATOR_SYM 724
#define SERIALIZABLE_SYM 725
#define SERIAL_SYM 726
#define SESSION_SYM 727
#define SERVER_SYM 728
#define SERVER_OPTIONS 729
#define SET 730
#define SET_VAR 731
#define SHARE_SYM 732
#define SHIFT_LEFT 733
#define SHIFT_RIGHT 734
#define SHOW 735
#define SHUTDOWN 736
#define SIGNAL_SYM 737
#define SIGNED_SYM 738
#define SIMPLE_SYM 739
#define SLAVE 740
#define SLAVES 741
#define SLOW 742
#define SMALLINT 743
#define SNAPSHOT_SYM 744
#define SOCKET_SYM 745
#define SOFT_SYM 746
#define SONAME_SYM 747
#define SOUNDS_SYM 748
#define SOURCE_SYM 749
#define SPATIAL_SYM 750
#define SPECIFIC_SYM 751
#define SQLEXCEPTION_SYM 752
#define SQLSTATE_SYM 753
#define SQLWARNING_SYM 754
#define SQL_BIG_RESULT 755
#define SQL_BUFFER_RESULT 756
#define SQL_CACHE_SYM 757
#define SQL_CALC_FOUND_ROWS 758
#define SQL_NO_CACHE_SYM 759
#define SQL_SMALL_RESULT 760
#define SQL_SYM 761
#define SQL_THREAD 762
#define SSL_SYM 763
#define STARTING 764
#define STARTS_SYM 765
#define START_SYM 766
#define STATUS_SYM 767
#define STDDEV_SAMP_SYM 768
#define STD_SYM 769
#define STOP_SYM 770
#define STORAGE_SYM 771
#define STRAIGHT_JOIN 772
#define STRING_SYM 773
#define SUBCLASS_ORIGIN_SYM 774
#define SUBDATE_SYM 775
#define SUBJECT_SYM 776
#define SUBPARTITIONS_SYM 777
#define SUBPARTITION_SYM 778
#define SUBSTRING 779
#define SUM_SYM 780
#define SUPER_SYM 781
#define SUSPEND_SYM 782
#define SWAPS_SYM 783
#define SWITCHES_SYM 784
#define SYSDATE 785
#define TABLES 786
#define TABLESPACE 787
#define TABLE_REF_PRIORITY 788
#define TABLE_STATS_SYM 789
#define TABLE_SYM 790
#define TABLE_CHECKSUM_SYM 791
#define TABLE_NAME_SYM 792
#define TEMPORARY 793
#define TEMPTABLE_SYM 794
#define TERMINATED 795
#define TEXT_STRING 796
#define TEXT_SYM 797
#define THAN_SYM 798
#define THEN_SYM 799
#define TIMESTAMP 800
#define TIMESTAMP_ADD 801
#define TIMESTAMP_DIFF 802
#define TIME_SYM 803
#define TINYBLOB 804
#define TINYINT 805
#define TINYTEXT 806
#define TO_SYM 807
#define TRAILING 808
#define TRANSACTION_SYM 809
#define TRANSACTIONAL_SYM 810
#define TRIGGERS_SYM 811
#define TRIGGER_SYM 812
#define TRIM 813
#define TRUE_SYM 814
#define TRUNCATE_SYM 815
#define TYPES_SYM 816
#define TYPE_SYM 817
#define UDF_RETURNS_SYM 818
#define ULONGLONG_NUM 819
#define UNCOMMITTED_SYM 820
#define UNDEFINED_SYM 821
#define UNDERSCORE_CHARSET 822
#define UNDOFILE_SYM 823
#define UNDO_BUFFER_SIZE_SYM 824
#define UNDO_SYM 825
#define UNICODE_SYM 826
#define UNINSTALL_SYM 827
#define UNION_SYM 828
#define UNIQUE_SYM 829
#define UNKNOWN_SYM 830
#define UNLOCK_SYM 831
#define UNSIGNED 832
#define UNTIL_SYM 833
#define UPDATE_SYM 834
#define UPGRADE_SYM 835
#define USAGE 836
#define USER 837
#define USER_STATS_SYM 838
#define USE_FRM 839
#define USE_SYM 840
#define USING 841
#define UTC_DATE_SYM 842
#define UTC_TIMESTAMP_SYM 843
#define UTC_TIME_SYM 844
#define VALUES 845
#define VALUE_SYM 846
#define VARBINARY 847
#define VARCHAR 848
#define VARIABLES 849
#define VARIANCE_SYM 850
#define VARYING 851
#define VAR_SAMP_SYM 852
#define VIA_SYM 853
#define VIEW_SYM 854
#define VIRTUAL_SYM 855
#define WAIT_SYM 856
#define WARNINGS 857
#define WEEK_SYM 858
#define WHEN_SYM 859
#define WHERE 860
#define WHILE_SYM 861
#define WITH 862
#define WITH_CUBE_SYM 863
#define WITH_ROLLUP_SYM 864
#define WORK_SYM 865
#define WRAPPER_SYM 866
#define WRITE_SYM 867
#define X509_SYM 868
#define XA_SYM 869
#define XML_SYM 870
#define XOR 871
#define YEAR_MONTH_SYM 872
#define YEAR_SYM 873
#define ZEROFILL 874
#define IMPOSSIBLE_ACTION 875




#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
typedef union YYSTYPE
{

/* Line 214 of yacc.c  */
#line 845 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"

  int  num;
  ulong ulong_num;
  ulonglong ulonglong_number;
  longlong longlong_number;
  LEX_STRING lex_str;
  LEX_STRING *lex_str_ptr;
  LEX_SYMBOL symbol;
  Table_ident *table;
  char *simple_string;
  Item *item;
  Item_num *item_num;
  List<Item> *item_list;
  List<String> *string_list;
  String *string;
  Key_part_spec *key_part;
  TABLE_LIST *table_list;
  udf_func *udf;
  LEX_USER *lex_user;
  struct sys_var_with_base variable;
  enum enum_var_type var_type;
  Key::Keytype key_type;
  enum ha_key_alg key_alg;
  handlerton *db_type;
  enum row_type row_type;
  enum ha_rkey_function ha_rkey_mode;
  enum enum_tx_isolation tx_isolation;
  enum Cast_target cast_type;
  enum Item_udftype udf_type;
  enum ha_choice choice;
  CHARSET_INFO *charset;
  thr_lock_type lock_type;
  interval_type interval, interval_time_st;
  timestamp_type date_time_type;
  st_select_lex *select_lex;
  chooser_compare_func_creator boolfunc2creator;
  struct sp_cond_type *spcondtype;
  struct { int vars, conds, hndlrs, curs; } spblock;
  sp_name *spname;
  LEX *lex;
  sp_head *sphead;
  struct p_elem_val *p_elem_value;
  enum index_hint_type index_hint;
  enum enum_filetype filetype;
  enum Foreign_key::fk_option m_fk_option;
  enum enum_yes_no_unknown m_yes_no_unk;
  Diag_condition_item_name diag_condition_item_name;
  DYNCALL_CREATE_DEF *dyncol_def;
  List<DYNCALL_CREATE_DEF> *dyncol_def_list;



/* Line 214 of yacc.c  */
#line 2232 "/home/buildbot/buildbot/build/mkdist/sql/sql_yacc.cc"
} YYSTYPE;
# define YYSTYPE_IS_TRIVIAL 1
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
#endif


/* Copy the second part of user declarations.  */

/* Line 264 of yacc.c  */
#line 896 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"

bool my_yyoverflow(short **a, YYSTYPE **b, ulong *yystacksize);


/* Line 264 of yacc.c  */
#line 2249 "/home/buildbot/buildbot/build/mkdist/sql/sql_yacc.cc"

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#elif (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
typedef signed char yytype_int8;
#else
typedef short int yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(msgid) dgettext ("bison-runtime", msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(msgid) msgid
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(e) ((void) (e))
#else
# define YYUSE(e) /* empty */
#endif

/* Identity function, used to suppress warnings about constant conditions.  */
#ifndef lint
# define YYID(n) (n)
#else
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static int
YYID (int yyi)
#else
static int
YYID (yyi)
    int yyi;
#endif
{
  return yyi;
}
#endif

#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#     ifndef _STDLIB_H
#      define _STDLIB_H 1
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (YYID (0))
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined _STDLIB_H \
       && ! ((defined YYMALLOC || defined malloc) \
	     && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef _STDLIB_H
#    define _STDLIB_H 1
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
	 || (defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss_alloc;
  YYSTYPE yyvs_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE)) \
      + YYSTACK_GAP_MAXIMUM)

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  YYSIZE_T yyi;				\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (YYID (0))
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)				\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack_alloc, Stack, yysize);			\
	Stack = &yyptr->Stack_alloc;					\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (YYID (0))

#endif

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  605
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   57297

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  640
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  934
/* YYNRULES -- Number of rules.  */
#define YYNRULES  2655
/* YYNRULES -- Number of states.  */
#define YYNSTATES  4507

/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   875

#define YYTRANSLATE(YYX)						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const yytype_uint16 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   633,     2,     2,     2,   627,   622,     2,
     630,   631,   625,   624,   632,   623,   638,   626,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   639,   636,
       2,     2,     2,     2,   637,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,   628,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   634,   621,   635,   629,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const yytype_uint16 yyprhs[] =
{
       0,     0,     3,     5,     6,    11,    14,    15,    17,    19,
      21,    23,    25,    27,    29,    31,    33,    35,    37,    39,
      41,    43,    45,    47,    49,    51,    53,    55,    57,    59,
      61,    63,    65,    67,    69,    71,    73,    75,    77,    79,
      81,    83,    85,    87,    89,    91,    93,    95,    97,    99,
     101,   103,   105,   107,   109,   111,   113,   115,   117,   119,
     121,   123,   125,   127,   131,   133,   135,   140,   142,   145,
     146,   151,   152,   155,   159,   161,   164,   165,   169,   170,
     177,   179,   183,   187,   191,   195,   199,   203,   207,   211,
     215,   219,   223,   227,   231,   235,   239,   243,   249,   251,
     252,   254,   258,   260,   264,   268,   272,   276,   277,   279,
     281,   282,   290,   291,   304,   305,   318,   319,   332,   333,
     340,   341,   345,   350,   355,   359,   362,   373,   375,   379,
     382,   385,   388,   391,   394,   397,   400,   401,   415,   416,
     423,   426,   427,   429,   433,   435,   436,   439,   440,   443,
     444,   446,   450,   455,   456,   459,   460,   463,   465,   467,
     469,   471,   473,   475,   477,   479,   481,   483,   485,   487,
     489,   490,   494,   496,   497,   500,   501,   504,   507,   510,
     513,   516,   520,   524,   526,   528,   530,   533,   537,   541,
     542,   547,   548,   552,   553,   555,   559,   561,   562,   564,
     568,   570,   571,   575,   576,   578,   582,   584,   589,   590,
     592,   594,   596,   597,   601,   604,   608,   609,   613,   614,
     620,   626,   627,   635,   641,   642,   645,   647,   649,   651,
     655,   657,   659,   661,   665,   666,   668,   670,   672,   674,
     677,   679,   683,   685,   687,   688,   690,   691,   694,   698,
     704,   706,   708,   710,   712,   714,   716,   718,   720,   722,
     724,   726,   728,   730,   732,   734,   738,   740,   744,   745,
     748,   750,   752,   754,   756,   758,   760,   762,   764,   766,
     768,   770,   772,   774,   775,   781,   782,   785,   786,   790,
     791,   794,   797,   800,   803,   804,   811,   814,   815,   818,
     820,   822,   826,   827,   828,   829,   837,   838,   841,   844,
     846,   848,   849,   850,   859,   860,   867,   869,   872,   874,
     877,   878,   879,   886,   887,   888,   895,   896,   899,   900,
     906,   907,   909,   910,   916,   917,   920,   921,   927,   932,
     933,   934,   943,   944,   952,   954,   956,   958,   960,   962,
     965,   970,   976,   977,   982,   987,   992,   996,  1000,  1003,
    1006,  1007,  1010,  1012,  1015,  1019,  1021,  1023,  1025,  1027,
    1029,  1032,  1036,  1038,  1040,  1042,  1044,  1046,  1048,  1050,
    1052,  1054,  1056,  1059,  1063,  1065,  1067,  1069,  1071,  1073,
    1075,  1077,  1080,  1084,  1086,  1088,  1090,  1092,  1094,  1096,
    1098,  1100,  1102,  1105,  1109,  1111,  1113,  1115,  1118,  1121,
    1124,  1126,  1128,  1130,  1132,  1135,  1139,  1143,  1147,  1151,
    1155,  1159,  1163,  1167,  1172,  1173,  1175,  1177,  1179,  1181,
    1183,  1186,  1190,  1193,  1198,  1199,  1206,  1207,  1213,  1214,
    1215,  1221,  1222,  1230,  1232,  1233,  1235,  1236,  1241,  1242,
    1243,  1247,  1253,  1259,  1260,  1265,  1268,  1271,  1274,  1277,
    1278,  1280,  1281,  1283,  1285,  1289,  1291,  1296,  1302,  1308,
    1309,  1312,  1313,  1314,  1322,  1323,  1333,  1335,  1339,  1341,
    1343,  1344,  1347,  1348,  1352,  1354,  1358,  1359,  1366,  1368,
    1369,  1370,  1376,  1377,  1382,  1384,  1386,  1388,  1392,  1394,
    1398,  1399,  1400,  1406,  1408,  1412,  1414,  1416,  1417,  1421,
    1423,  1427,  1428,  1433,  1435,  1436,  1438,  1441,  1443,  1447,
    1452,  1456,  1460,  1464,  1468,  1473,  1478,  1482,  1483,  1484,
    1491,  1492,  1494,  1495,  1497,  1499,  1502,  1504,  1506,  1507,
    1509,  1511,  1514,  1516,  1517,  1521,  1522,  1524,  1526,  1529,
    1531,  1534,  1538,  1542,  1546,  1550,  1554,  1558,  1562,  1566,
    1570,  1574,  1578,  1582,  1586,  1590,  1594,  1595,  1602,  1604,
    1606,  1610,  1615,  1620,  1623,  1626,  1629,  1633,  1637,  1641,
    1645,  1649,  1653,  1657,  1662,  1667,  1669,  1671,  1673,  1675,
    1677,  1679,  1681,  1683,  1685,  1687,  1689,  1691,  1693,  1696,
    1698,  1700,  1702,  1704,  1706,  1708,  1712,  1714,  1716,  1719,
    1722,  1723,  1732,  1733,  1743,  1744,  1754,  1755,  1765,  1774,
    1777,  1778,  1780,  1785,  1786,  1788,  1791,  1792,  1796,  1799,
    1808,  1809,  1812,  1813,  1815,  1817,  1818,  1820,  1823,  1825,
    1827,  1830,  1833,  1838,  1842,  1846,  1850,  1854,  1856,  1859,
    1861,  1863,  1867,  1870,  1874,  1877,  1880,  1882,  1886,  1890,
    1893,  1897,  1899,  1902,  1905,  1908,  1910,  1913,  1915,  1917,
    1919,  1922,  1926,  1929,  1933,  1936,  1939,  1943,  1947,  1951,
    1952,  1959,  1960,  1967,  1970,  1972,  1974,  1976,  1978,  1980,
    1982,  1984,  1986,  1988,  1990,  1992,  1995,  1998,  2000,  2003,
    2005,  2008,  2012,  2015,  2017,  2019,  2021,  2023,  2025,  2027,
    2029,  2032,  2033,  2035,  2037,  2043,  2044,  2046,  2049,  2051,
    2053,  2055,  2057,  2061,  2065,  2069,  2073,  2074,  2076,  2077,
    2079,  2080,  2082,  2085,  2087,  2089,  2092,  2095,  2100,  2102,
    2106,  2109,  2111,  2114,  2117,  2120,  2124,  2128,  2132,  2136,
    2139,  2142,  2144,  2147,  2149,  2151,  2153,  2155,  2157,  2158,
    2161,  2163,  2165,  2167,  2169,  2171,  2172,  2175,  2177,  2179,
    2180,  2182,  2184,  2187,  2190,  2192,  2195,  2198,  2199,  2201,
    2203,  2205,  2209,  2211,  2215,  2216,  2218,  2219,  2221,  2227,
    2228,  2232,  2236,  2238,  2239,  2242,  2245,  2248,  2249,  2253,
    2257,  2264,  2271,  2273,  2275,  2278,  2281,  2284,  2286,  2289,
    2292,  2294,  2296,  2297,  2299,  2301,  2303,  2305,  2306,  2308,
    2310,  2312,  2313,  2315,  2318,  2319,  2321,  2322,  2324,  2325,
    2327,  2329,  2332,  2334,  2337,  2339,  2342,  2345,  2348,  2352,
    2355,  2359,  2363,  2367,  2371,  2373,  2375,  2377,  2379,  2383,
    2385,  2387,  2389,  2394,  2397,  2399,  2404,  2405,  2407,  2408,
    2411,  2413,  2417,  2418,  2425,  2426,  2432,  2440,  2441,  2447,
    2448,  2454,  2455,  2461,  2462,  2467,  2468,  2479,  2483,  2488,
    2492,  2496,  2504,  2505,  2509,  2511,  2516,  2517,  2521,  2522,
    2525,  2526,  2528,  2529,  2532,  2535,  2538,  2541,  2543,  2545,
    2547,  2551,  2556,  2557,  2564,  2569,  2570,  2576,  2577,  2584,
    2589,  2593,  2595,  2598,  2600,  2602,  2603,  2609,  2610,  2614,
    2617,  2618,  2624,  2625,  2626,  2633,  2635,  2639,  2641,  2643,
    2647,  2650,  2654,  2657,  2662,  2663,  2670,  2671,  2672,  2680,
    2685,  2690,  2694,  2698,  2701,  2704,  2711,  2717,  2721,  2727,
    2729,  2731,  2733,  2734,  2736,  2737,  2739,  2740,  2743,  2744,
    2746,  2749,  2751,  2753,  2755,  2756,  2758,  2760,  2761,  2764,
    2766,  2767,  2769,  2771,  2773,  2774,  2781,  2782,  2788,  2793,
    2798,  2799,  2806,  2811,  2815,  2816,  2818,  2820,  2824,  2828,
    2831,  2834,  2835,  2838,  2840,  2844,  2845,  2847,  2849,  2850,
    2853,  2855,  2859,  2860,  2866,  2867,  2869,  2871,  2872,  2879,
    2880,  2882,  2884,  2887,  2889,  2891,  2893,  2894,  2900,  2903,
    2904,  2910,  2911,  2913,  2915,  2918,  2920,  2922,  2924,  2926,
    2928,  2931,  2932,  2938,  2939,  2941,  2943,  2944,  2949,  2954,
    2958,  2964,  2966,  2970,  2974,  2975,  2982,  2984,  2986,  2988,
    2992,  2995,  2999,  3001,  3003,  3004,  3011,  3013,  3015,  3017,
    3021,  3025,  3030,  3031,  3038,  3039,  3042,  3043,  3048,  3049,
    3052,  3054,  3057,  3062,  3065,  3069,  3072,  3076,  3077,  3081,
    3082,  3083,  3090,  3093,  3095,  3097,  3100,  3103,  3112,  3117,
    3118,  3120,  3123,  3125,  3127,  3129,  3131,  3132,  3135,  3140,
    3144,  3146,  3148,  3152,  3157,  3158,  3159,  3160,  3163,  3166,
    3168,  3170,  3171,  3174,  3178,  3179,  3182,  3186,  3190,  3194,
    3197,  3201,  3206,  3210,  3215,  3219,  3224,  3226,  3230,  3235,
    3239,  3243,  3250,  3252,  3258,  3265,  3271,  3279,  3286,  3295,
    3301,  3308,  3313,  3318,  3324,  3328,  3333,  3335,  3339,  3343,
    3347,  3351,  3355,  3359,  3365,  3371,  3375,  3379,  3383,  3387,
    3391,  3395,  3397,  3399,  3401,  3403,  3405,  3407,  3409,  3411,
    3413,  3415,  3417,  3419,  3421,  3423,  3425,  3427,  3429,  3430,
    3433,  3435,  3438,  3440,  3442,  3444,  3447,  3450,  3452,  3454,
    3457,  3460,  3465,  3467,  3471,  3473,  3475,  3477,  3479,  3481,
    3485,  3487,  3489,  3491,  3493,  3497,  3500,  3503,  3506,  3509,
    3513,  3517,  3523,  3530,  3535,  3540,  3548,  3551,  3558,  3564,
    3571,  3578,  3583,  3588,  3594,  3599,  3606,  3609,  3614,  3619,
    3624,  3635,  3642,  3651,  3658,  3663,  3668,  3675,  3680,  3685,
    3690,  3697,  3702,  3710,  3718,  3726,  3733,  3740,  3747,  3754,
    3758,  3763,  3770,  3779,  3782,  3785,  3794,  3803,  3810,  3817,
    3820,  3827,  3834,  3843,  3852,  3859,  3868,  3875,  3878,  3887,
    3896,  3899,  3902,  3905,  3912,  3919,  3926,  3931,  3936,  3945,
    3950,  3955,  3960,  3965,  3969,  3978,  3983,  3988,  3995,  4000,
    4005,  4010,  4017,  4026,  4033,  4038,  4045,  4047,  4054,  4059,
    4064,  4069,  4074,  4079,  4086,  4091,  4092,  4098,  4105,  4108,
    4112,  4113,  4118,  4119,  4123,  4124,  4126,  4128,  4132,  4137,
    4142,  4148,  4153,  4158,  4163,  4169,  4174,  4175,  4176,  4184,
    4189,  4195,  4200,  4206,  4211,  4216,  4221,  4226,  4231,  4237,
    4238,  4247,  4248,  4252,  4256,  4258,  4263,  4264,  4266,  4267,
    4270,  4271,  4273,  4274,  4278,  4281,  4285,  4288,  4290,  4292,
    4295,  4297,  4300,  4302,  4305,  4308,  4311,  4312,  4316,  4317,
    4319,  4321,  4325,  4327,  4331,  4333,  4337,  4338,  4340,  4341,
    4344,  4349,  4355,  4357,  4359,  4361,  4363,  4368,  4370,  4374,
    4378,  4382,  4383,  4390,  4391,  4398,  4399,  4408,  4413,  4414,
    4423,  4424,  4435,  4442,  4443,  4452,  4453,  4464,  4471,  4473,
    4476,  4479,  4480,  4485,  4489,  4495,  4498,  4499,  4500,  4508,
    4510,  4511,  4512,  4519,  4520,  4524,  4525,  4526,  4532,  4533,
    4535,  4536,  4538,  4539,  4542,  4546,  4550,  4552,  4554,  4555,
    4563,  4564,  4572,  4574,  4577,  4578,  4579,  4582,  4583,  4586,
    4587,  4589,  4591,  4593,  4595,  4599,  4601,  4605,  4607,  4609,
    4611,  4613,  4615,  4617,  4619,  4621,  4623,  4625,  4627,  4629,
    4631,  4633,  4635,  4637,  4639,  4641,  4643,  4645,  4647,  4649,
    4651,  4653,  4655,  4656,  4658,  4660,  4661,  4664,  4665,  4667,
    4668,  4669,  4673,  4674,  4675,  4679,  4682,  4683,  4684,  4689,
    4694,  4697,  4698,  4700,  4702,  4706,  4710,  4712,  4715,  4716,
    4718,  4719,  4724,  4729,  4732,  4733,  4735,  4737,  4738,  4740,
    4741,  4743,  4746,  4752,  4757,  4759,  4763,  4767,  4769,  4771,
    4773,  4775,  4777,  4779,  4780,  4783,  4787,  4792,  4794,  4797,
    4800,  4802,  4804,  4806,  4808,  4810,  4812,  4814,  4816,  4818,
    4820,  4822,  4824,  4826,  4828,  4830,  4832,  4834,  4836,  4838,
    4840,  4842,  4844,  4846,  4848,  4850,  4852,  4853,  4854,  4861,
    4862,  4864,  4868,  4870,  4874,  4875,  4878,  4882,  4884,  4887,
    4889,  4890,  4894,  4895,  4896,  4904,  4907,  4909,  4910,  4914,
    4915,  4923,  4924,  4931,  4936,  4943,  4948,  4953,  4958,  4959,
    4966,  4971,  4976,  4982,  4989,  4994,  4996,  5000,  5002,  5004,
    5008,  5010,  5011,  5014,  5015,  5017,  5018,  5019,  5028,  5029,
    5030,  5037,  5038,  5040,  5042,  5044,  5046,  5048,  5051,  5053,
    5055,  5057,  5061,  5066,  5067,  5071,  5075,  5077,  5080,  5083,
    5084,  5088,  5089,  5095,  5099,  5101,  5105,  5107,  5111,  5113,
    5115,  5116,  5118,  5119,  5124,  5125,  5127,  5131,  5133,  5135,
    5137,  5138,  5139,  5146,  5147,  5148,  5160,  5164,  5166,  5170,
    5174,  5176,  5180,  5181,  5183,  5184,  5189,  5190,  5197,  5198,
    5204,  5205,  5212,  5214,  5218,  5221,  5226,  5227,  5230,  5231,
    5234,  5236,  5238,  5240,  5241,  5246,  5247,  5249,  5250,  5252,
    5254,  5258,  5260,  5262,  5265,  5268,  5271,  5273,  5275,  5277,
    5279,  5280,  5284,  5285,  5289,  5292,  5297,  5302,  5306,  5311,
    5316,  5318,  5322,  5326,  5333,  5336,  5339,  5340,  5347,  5348,
    5356,  5362,  5365,  5367,  5369,  5371,  5377,  5383,  5386,  5389,
    5391,  5396,  5400,  5403,  5407,  5410,  5413,  5415,  5419,  5424,
    5428,  5432,  5435,  5439,  5442,  5446,  5448,  5450,  5452,  5454,
    5458,  5462,  5466,  5470,  5474,  5478,  5482,  5486,  5490,  5492,
    5494,  5496,  5498,  5500,  5501,  5503,  5504,  5507,  5508,  5510,
    5512,  5514,  5515,  5518,  5519,  5522,  5523,  5526,  5529,  5530,
    5535,  5536,  5541,  5543,  5545,  5546,  5548,  5550,  5551,  5553,
    5555,  5556,  5561,  5562,  5563,  5569,  5571,  5572,  5577,  5581,
    5583,  5586,  5589,  5592,  5595,  5598,  5602,  5605,  5607,  5609,
    5611,  5613,  5616,  5618,  5620,  5622,  5624,  5626,  5628,  5630,
    5631,  5633,  5634,  5638,  5639,  5643,  5647,  5649,  5650,  5655,
    5657,  5660,  5661,  5663,  5664,  5668,  5672,  5675,  5678,  5679,
    5685,  5686,  5688,  5690,  5691,  5693,  5695,  5697,  5700,  5703,
    5704,  5705,  5706,  5707,  5729,  5731,  5733,  5734,  5736,  5737,
    5739,  5741,  5742,  5744,  5746,  5747,  5750,  5753,  5755,  5759,
    5764,  5768,  5772,  5773,  5776,  5779,  5781,  5785,  5789,  5790,
    5795,  5796,  5800,  5802,  5804,  5805,  5809,  5812,  5816,  5818,
    5820,  5823,  5824,  5827,  5831,  5833,  5839,  5841,  5843,  5846,
    5849,  5851,  5853,  5855,  5857,  5859,  5862,  5865,  5867,  5869,
    5871,  5873,  5875,  5877,  5879,  5882,  5885,  5888,  5891,  5894,
    5896,  5898,  5900,  5902,  5904,  5906,  5908,  5912,  5918,  5920,
    5922,  5924,  5926,  5928,  5932,  5937,  5943,  5945,  5951,  5955,
    5958,  5960,  5964,  5967,  5970,  5975,  5977,  5979,  5981,  5983,
    5985,  5987,  5989,  5991,  5993,  5995,  5997,  5999,  6001,  6003,
    6007,  6010,  6012,  6014,  6016,  6018,  6020,  6022,  6024,  6026,
    6028,  6030,  6032,  6034,  6036,  6038,  6040,  6042,  6044,  6046,
    6048,  6050,  6052,  6054,  6056,  6058,  6060,  6062,  6064,  6066,
    6068,  6070,  6072,  6074,  6076,  6078,  6080,  6082,  6084,  6086,
    6088,  6090,  6092,  6094,  6096,  6098,  6100,  6102,  6104,  6106,
    6108,  6110,  6112,  6114,  6116,  6118,  6120,  6122,  6124,  6126,
    6128,  6130,  6132,  6134,  6136,  6138,  6140,  6142,  6144,  6146,
    6148,  6150,  6152,  6154,  6156,  6158,  6160,  6162,  6164,  6166,
    6168,  6170,  6172,  6174,  6176,  6178,  6180,  6182,  6184,  6186,
    6188,  6190,  6192,  6194,  6196,  6198,  6200,  6202,  6204,  6206,
    6208,  6210,  6212,  6214,  6216,  6218,  6220,  6222,  6224,  6226,
    6228,  6230,  6232,  6234,  6236,  6238,  6240,  6242,  6244,  6246,
    6248,  6250,  6252,  6254,  6256,  6258,  6260,  6262,  6264,  6266,
    6268,  6270,  6272,  6274,  6276,  6278,  6280,  6282,  6284,  6286,
    6288,  6290,  6292,  6294,  6296,  6298,  6300,  6302,  6304,  6306,
    6308,  6310,  6312,  6314,  6316,  6318,  6320,  6322,  6324,  6326,
    6328,  6330,  6332,  6334,  6336,  6338,  6340,  6342,  6344,  6346,
    6348,  6350,  6352,  6354,  6356,  6358,  6360,  6362,  6364,  6366,
    6368,  6370,  6372,  6374,  6376,  6378,  6380,  6382,  6384,  6386,
    6388,  6390,  6392,  6394,  6396,  6398,  6400,  6402,  6404,  6406,
    6408,  6410,  6412,  6414,  6416,  6418,  6420,  6422,  6424,  6426,
    6428,  6430,  6432,  6434,  6436,  6438,  6440,  6442,  6444,  6446,
    6448,  6450,  6452,  6454,  6456,  6458,  6460,  6462,  6464,  6466,
    6468,  6470,  6472,  6474,  6476,  6478,  6480,  6482,  6484,  6486,
    6488,  6490,  6492,  6494,  6496,  6498,  6500,  6502,  6504,  6506,
    6508,  6510,  6512,  6514,  6516,  6518,  6520,  6522,  6524,  6526,
    6528,  6530,  6532,  6534,  6536,  6538,  6540,  6542,  6544,  6546,
    6548,  6550,  6552,  6554,  6556,  6558,  6560,  6562,  6564,  6566,
    6568,  6570,  6572,  6574,  6576,  6578,  6580,  6582,  6584,  6586,
    6588,  6590,  6592,  6594,  6596,  6598,  6600,  6602,  6604,  6606,
    6608,  6610,  6612,  6614,  6616,  6618,  6620,  6622,  6624,  6626,
    6628,  6630,  6632,  6634,  6636,  6638,  6640,  6642,  6644,  6646,
    6648,  6650,  6652,  6654,  6656,  6658,  6660,  6662,  6664,  6666,
    6668,  6670,  6672,  6674,  6676,  6678,  6680,  6682,  6684,  6686,
    6688,  6690,  6692,  6694,  6696,  6698,  6700,  6702,  6704,  6706,
    6708,  6710,  6712,  6714,  6716,  6717,  6721,  6722,  6726,  6727,
    6731,  6732,  6736,  6737,  6741,  6744,  6745,  6748,  6749,  6752,
    6753,  6758,  6759,  6763,  6765,  6767,  6769,  6771,  6772,  6774,
    6776,  6778,  6779,  6782,  6785,  6788,  6792,  6796,  6801,  6808,
    6811,  6815,  6819,  6823,  6829,  6831,  6835,  6839,  6841,  6843,
    6847,  6851,  6853,  6857,  6860,  6863,  6866,  6869,  6872,  6874,
    6876,  6881,  6886,  6888,  6890,  6892,  6894,  6896,  6897,  6902,
    6904,  6906,  6908,  6912,  6916,  6918,  6920,  6923,  6926,  6929,
    6930,  6934,  6939,  6943,  6944,  6952,  6954,  6957,  6959,  6961,
    6963,  6965,  6967,  6969,  6970,  6976,  6978,  6980,  6982,  6984,
    6986,  6990,  6997,  7004,  7011,  7019,  7025,  7029,  7038,  7047,
    7056,  7063,  7064,  7066,  7068,  7071,  7072,  7074,  7076,  7080,
    7081,  7085,  7086,  7090,  7091,  7095,  7096,  7100,  7102,  7104,
    7106,  7108,  7110,  7112,  7114,  7116,  7118,  7120,  7122,  7125,
    7128,  7130,  7134,  7137,  7140,  7143,  7146,  7149,  7152,  7155,
    7158,  7160,  7162,  7165,  7166,  7168,  7172,  7174,  7177,  7180,
    7183,  7185,  7189,  7193,  7195,  7197,  7201,  7203,  7207,  7209,
    7211,  7213,  7215,  7220,  7226,  7231,  7238,  7240,  7241,  7245,
    7249,  7251,  7253,  7254,  7257,  7260,  7263,  7266,  7267,  7270,
    7271,  7275,  7278,  7280,  7283,  7286,  7289,  7292,  7295,  7296,
    7300,  7301,  7303,  7304,  7308,  7311,  7312,  7314,  7317,  7318,
    7320,  7325,  7330,  7336,  7339,  7343,  7344,  7346,  7347,  7352,
    7353,  7355,  7357,  7358,  7360,  7361,  7364,  7367,  7369,  7370,
    7372,  7374,  7377,  7381,  7384,  7385,  7392,  7396,  7397,  7398,
    7399,  7401,  7404,  7406,  7408,  7410,  7412,  7414,  7416,  7418,
    7420,  7422,  7425,  7428,  7432,  7434,  7436,  7438,  7440,  7442,
    7444,  7446,  7448,  7450,  7452,  7454,  7456,  7458,  7459,  7463,
    7465,  7468,  7470,  7473,  7477,  7481,  7485,  7486,  7490,  7494,
    7495,  7503,  7504,  7508,  7510,  7514,  7515,  7519,  7522,  7527,
    7528,  7532,  7537,  7542,  7543,  7544,  7545,  7562,  7571,  7579,
    7580,  7581,  7582,  7583,  7584,  7600,  7601,  7602,  7603,  7604,
    7617,  7622,  7627,  7631,  7636,  7640,  7643,  7645,  7649,  7655,
    7657,  7659,  7660,  7662,  7664,  7665,  7668,  7669,  7670,  7674,
    7675,  7678,  7684,  7688,  7692,  7696
};

/* YYRHS -- A `-1'-separated list of the rules' RHS.  */
static const yytype_int16 yyrhs[] =
{
     641,     0,    -1,   157,    -1,    -1,   644,   642,   636,   643,
      -1,   644,   157,    -1,    -1,   157,    -1,   645,    -1,  1501,
      -1,  1002,    -1,  1067,    -1,  1069,    -1,   696,    -1,   657,
      -1,  1070,    -1,  1059,    -1,  1507,    -1,   666,    -1,   646,
      -1,  1315,    -1,  1347,    -1,  1267,    -1,  1269,    -1,   650,
      -1,  1353,    -1,  1473,    -1,  1464,    -1,   655,    -1,  1279,
      -1,  1571,    -1,  1573,    -1,  1083,    -1,  1373,    -1,  1379,
      -1,  1456,    -1,  1075,    -1,   929,    -1,   840,    -1,  1090,
      -1,   648,    -1,  1369,    -1,  1510,    -1,  1078,    -1,  1062,
      -1,  1282,    -1,  1363,    -1,   731,    -1,  1471,    -1,  1508,
      -1,  1509,    -1,  1102,    -1,  1429,    -1,   724,    -1,  1333,
      -1,  1045,    -1,  1049,    -1,  1326,    -1,  1572,    -1,  1462,
      -1,  1307,    -1,  1378,    -1,  1563,    -1,   647,   400,  1423,
      -1,   124,    -1,   145,    -1,   400,  1423,   192,   649,    -1,
    1420,    -1,   637,  1425,    -1,    -1,   171,  1423,   651,   652,
      -1,    -1,   586,   653,    -1,   653,   632,   654,    -1,   654,
      -1,   637,  1425,    -1,    -1,   212,   656,  1425,    -1,    -1,
      57,   302,   664,   552,   658,   659,    -1,   660,    -1,   659,
     632,   660,    -1,   287,   161,  1420,    -1,   303,   161,  1420,
      -1,   290,   161,  1420,    -1,   291,   161,  1246,    -1,   286,
     161,  1246,    -1,   300,   161,  1246,    -1,   294,   161,  1420,
      -1,   293,   161,  1420,    -1,   295,   161,  1420,    -1,   296,
     161,  1420,    -1,   299,   161,  1420,    -1,   301,   161,  1246,
      -1,   297,   161,  1420,    -1,   298,   161,  1420,    -1,   304,
     161,  1408,    -1,   226,   161,   630,   661,   631,    -1,   663,
      -1,    -1,   662,    -1,   661,   632,   662,    -1,  1246,    -1,
     288,   161,  1420,    -1,   289,   161,  1248,    -1,   430,   161,
    1420,    -1,   431,   161,  1246,    -1,    -1,   665,    -1,  1420,
      -1,    -1,   103,   891,   535,   894,  1416,   667,   828,    -1,
      -1,   103,   980,   229,  1423,   984,   363,  1416,   668,   630,
     997,   631,   985,    -1,    -1,   103,   981,   229,  1423,   983,
     363,  1416,   669,   630,   997,   631,   986,    -1,    -1,   103,
     982,   229,  1423,   983,   363,  1416,   670,   630,   997,   631,
     987,    -1,    -1,   103,   111,   894,  1423,   671,   888,    -1,
      -1,   103,   672,  1529,    -1,   103,   582,   689,  1489,    -1,
     103,   277,   205,   791,    -1,   103,   532,   788,    -1,   103,
     673,    -1,   473,  1425,   189,   114,   611,  1425,   369,   630,
     674,   631,    -1,   675,    -1,   674,   632,   675,    -1,   582,
    1420,    -1,   215,  1420,    -1,   111,  1420,    -1,   379,  1420,
      -1,   390,  1420,    -1,   490,  1420,    -1,   397,  1246,    -1,
      -1,  1119,   168,   894,   690,   677,   363,   462,   678,   683,
     680,   685,   144,   686,    -1,    -1,   169,  1124,  1216,   679,
     681,   682,    -1,    23,  1124,    -1,    -1,   153,    -1,   138,
     363,   485,    -1,   138,    -1,    -1,   510,  1124,    -1,    -1,
     156,  1124,    -1,    -1,   684,    -1,   363,    86,   401,    -1,
     363,    86,   352,   401,    -1,    -1,    82,  1420,    -1,    -1,
     687,   688,    -1,   737,    -1,   739,    -1,   735,    -1,   756,
      -1,   774,    -1,   776,    -1,   771,    -1,   741,    -1,   743,
      -1,   744,    -1,   745,    -1,   746,    -1,   748,    -1,    -1,
    1423,   638,  1423,    -1,  1423,    -1,    -1,   691,   693,    -1,
      -1,   692,   694,    -1,    82,  1420,    -1,   255,   506,    -1,
     354,   506,    -1,    96,   506,    -1,   416,   506,   114,    -1,
     329,   506,   114,    -1,   695,    -1,   693,    -1,   136,    -1,
    1130,   136,    -1,   506,   466,   129,    -1,   506,   466,   242,
      -1,    -1,    50,   690,   697,   698,    -1,    -1,   630,   699,
     631,    -1,    -1,   700,    -1,   700,   632,  1124,    -1,  1124,
      -1,    -1,   702,    -1,   702,   632,   704,    -1,   704,    -1,
      -1,  1423,   703,   952,    -1,    -1,   706,    -1,   706,   632,
     707,    -1,   707,    -1,   708,   703,  1423,   952,    -1,    -1,
     243,    -1,   378,    -1,   234,    -1,    -1,   709,   734,   636,
      -1,   734,   636,    -1,   710,   734,   636,    -1,    -1,   711,
     712,   636,    -1,    -1,   127,   732,   713,   952,   733,    -1,
     127,  1423,    89,   190,   720,    -1,    -1,   127,   717,   208,
     190,   714,   718,   734,    -1,   127,  1423,   108,   190,   715,
      -1,    -1,   716,  1102,    -1,   173,    -1,    98,    -1,   719,
      -1,   718,   632,   719,    -1,   723,    -1,  1246,    -1,   721,
      -1,   498,   722,  1421,    -1,    -1,   591,    -1,   720,    -1,
    1423,    -1,   499,    -1,  1130,   191,    -1,   497,    -1,   482,
     725,   727,    -1,  1423,    -1,   721,    -1,    -1,   725,    -1,
      -1,   475,   728,    -1,   730,   161,   729,    -1,   728,   632,
     730,   161,   729,    -1,  1407,    -1,  1155,    -1,  1412,    -1,
      65,    -1,   519,    -1,    93,    -1,    95,    -1,    94,    -1,
      55,    -1,   463,    -1,   537,    -1,    81,    -1,   109,    -1,
     320,    -1,   337,    -1,   445,   726,   727,    -1,  1423,    -1,
     732,   632,  1423,    -1,    -1,   128,  1124,    -1,   737,    -1,
     739,    -1,   735,    -1,   756,    -1,   774,    -1,   776,    -1,
     771,    -1,   741,    -1,   743,    -1,   744,    -1,   745,    -1,
     746,    -1,   748,    -1,    -1,   224,   736,   751,   155,   224,
      -1,    -1,   738,   645,    -1,    -1,   451,   740,  1124,    -1,
      -1,   742,   780,    -1,   261,  1424,    -1,   249,  1424,    -1,
     367,  1423,    -1,    -1,   181,   749,  1423,   240,   747,   750,
      -1,    68,  1423,    -1,    -1,   348,   192,    -1,   192,    -1,
    1423,    -1,   750,   632,  1423,    -1,    -1,    -1,    -1,   752,
    1124,   544,   753,   710,   754,   755,    -1,    -1,   152,   751,
      -1,   151,   710,    -1,   757,    -1,   760,    -1,    -1,    -1,
      53,   758,  1124,   759,   762,   770,   155,    53,    -1,    -1,
      53,   761,   763,   770,   155,    53,    -1,   764,    -1,   762,
     764,    -1,   767,    -1,   763,   767,    -1,    -1,    -1,   604,
     765,  1124,   766,   544,   710,    -1,    -1,    -1,   604,   768,
    1124,   769,   544,   710,    -1,    -1,   151,   710,    -1,    -1,
    1424,   639,   772,   780,   773,    -1,    -1,  1424,    -1,    -1,
    1424,   639,   775,   778,   773,    -1,    -1,   777,   778,    -1,
      -1,    31,   779,   711,   709,   155,    -1,   283,   710,   155,
     283,    -1,    -1,    -1,   606,   781,  1124,   144,   782,   710,
     155,   606,    -1,    -1,   440,   710,   578,   783,  1124,   155,
     440,    -1,    30,    -1,     8,    -1,   236,    -1,   579,    -1,
     132,    -1,   813,   815,    -1,   813,    57,   810,   794,    -1,
     813,     6,   810,   789,   798,    -1,    -1,   585,   277,   205,
    1423,    -1,   813,     6,   810,   801,    -1,   813,   145,   810,
     801,    -1,   814,   793,   804,    -1,   814,   793,   807,    -1,
       6,   811,    -1,     6,   812,    -1,    -1,   795,   796,    -1,
     797,    -1,   796,   797,    -1,   796,   632,   797,    -1,   816,
      -1,   817,    -1,   818,    -1,   799,    -1,   800,    -1,   799,
     800,    -1,   799,   632,   800,    -1,   816,    -1,   817,    -1,
     818,    -1,   819,    -1,   822,    -1,   824,    -1,   826,    -1,
     823,    -1,   802,    -1,   803,    -1,   802,   803,    -1,   802,
     632,   803,    -1,   816,    -1,   817,    -1,   818,    -1,   824,
      -1,   826,    -1,   805,    -1,   806,    -1,   805,   806,    -1,
     805,   632,   806,    -1,   816,    -1,   820,    -1,   821,    -1,
     822,    -1,   824,    -1,   826,    -1,   823,    -1,   808,    -1,
     809,    -1,   808,   809,    -1,   808,   632,   809,    -1,   816,
      -1,   824,    -1,   826,    -1,   113,  1420,    -1,   568,  1420,
      -1,   423,  1420,    -1,  1423,    -1,  1423,    -1,   417,    -1,
     419,    -1,   352,     4,    -1,   232,  1299,   827,    -1,    25,
    1299,   827,    -1,   309,  1299,   827,    -1,   176,  1299,   827,
      -1,   569,  1299,   827,    -1,   424,  1299,   827,    -1,   349,
    1299,  1247,    -1,    82,  1299,  1420,    -1,  1340,   159,  1299,
     902,    -1,    -1,   826,    -1,   601,    -1,   355,    -1,  1247,
      -1,   221,    -1,   630,   829,    -1,   895,   835,   832,    -1,
     266,  1416,    -1,   630,   266,  1416,   631,    -1,    -1,   908,
     631,   830,   895,   835,   832,    -1,    -1,   835,   884,   631,
     831,  1514,    -1,    -1,    -1,  1387,   887,   884,   833,  1511,
      -1,    -1,  1387,   887,   630,   884,   631,   834,  1514,    -1,
     836,    -1,    -1,   837,    -1,    -1,   389,   839,   838,   842,
      -1,    -1,    -1,   389,   841,   842,    -1,    47,   843,   852,
     853,   860,    -1,   845,   253,   630,   846,   631,    -1,    -1,
     845,   210,   844,   850,    -1,   415,   850,    -1,   415,   849,
      -1,   271,   850,    -1,   271,   849,    -1,    -1,   268,    -1,
      -1,   847,    -1,   848,    -1,   847,   632,   848,    -1,  1423,
      -1,    73,   630,   846,   631,    -1,   630,  1119,   858,  1120,
     631,    -1,   630,  1119,   858,  1120,   631,    -1,    -1,   388,
    1247,    -1,    -1,    -1,   523,    47,   845,   210,   851,   854,
     859,    -1,    -1,   523,    47,   845,   253,   630,   856,   631,
     855,   859,    -1,   857,    -1,   856,   632,   857,    -1,  1423,
      -1,  1127,    -1,    -1,   522,  1247,    -1,    -1,   630,   861,
     631,    -1,   862,    -1,   861,   632,   862,    -1,    -1,   389,
     863,   864,   865,   881,   876,    -1,  1423,    -1,    -1,    -1,
     590,   263,   543,   866,   868,    -1,    -1,   590,   243,   867,
     869,    -1,   313,    -1,   871,    -1,   871,    -1,   630,   870,
     631,    -1,   871,    -1,   870,   632,   871,    -1,    -1,    -1,
     630,   872,   874,   873,   631,    -1,   875,    -1,   874,   632,
     875,    -1,   313,    -1,  1127,    -1,    -1,   630,   877,   631,
      -1,   878,    -1,   877,   632,   878,    -1,    -1,   523,   879,
     880,   881,    -1,  1425,    -1,    -1,   882,    -1,   882,   883,
      -1,   883,    -1,   532,  1299,  1425,    -1,  1340,   159,  1299,
     902,    -1,    90,  1299,  1420,    -1,   349,  1299,  1247,    -1,
     308,  1299,  1249,    -1,   326,  1299,  1249,    -1,   114,   137,
    1299,  1420,    -1,   229,   137,  1299,  1420,    -1,    82,  1299,
    1420,    -1,    -1,    -1,   467,   885,  1113,  1117,   886,   906,
      -1,    -1,    19,    -1,    -1,   889,    -1,   890,    -1,   889,
     890,    -1,   901,    -1,   900,    -1,    -1,   892,    -1,   893,
      -1,   893,   892,    -1,   538,    -1,    -1,   224,  1130,   172,
      -1,    -1,   897,    -1,   898,    -1,   898,   896,    -1,   898,
      -1,   898,   897,    -1,   898,   632,   897,    -1,   159,  1299,
     902,    -1,   308,  1299,  1248,    -1,   326,  1299,  1248,    -1,
      27,  1299,  1246,    -1,   390,  1299,  1420,    -1,    82,  1299,
    1420,    -1,    26,  1299,  1248,    -1,   380,  1299,  1246,    -1,
     380,  1299,   128,    -1,    62,  1299,  1246,    -1,   536,  1299,
    1246,    -1,   382,  1299,  1252,    -1,   131,  1299,  1246,    -1,
     458,  1299,   904,    -1,    -1,   573,  1299,   899,   630,  1361,
     631,    -1,   900,    -1,   901,    -1,   237,  1299,   905,    -1,
     114,   137,  1299,  1420,    -1,   229,   137,  1299,  1420,    -1,
     532,  1423,    -1,   516,   140,    -1,   516,   318,    -1,    90,
    1299,  1420,    -1,   252,  1299,  1246,    -1,   555,  1299,  1252,
      -1,  1419,  1298,  1420,    -1,  1419,  1298,  1423,    -1,  1419,
    1298,  1249,    -1,  1419,  1298,   128,    -1,   963,   954,  1299,
     956,    -1,   963,    71,  1299,   962,    -1,  1425,    -1,  1425,
      -1,   128,    -1,   184,    -1,   149,    -1,    87,    -1,   425,
      -1,    85,    -1,   381,    -1,   354,    -1,   183,    -1,   256,
      -1,  1239,    -1,  1112,  1116,    -1,   518,    -1,   420,    -1,
     126,    -1,   241,    -1,   909,    -1,   910,    -1,   909,   632,
     910,    -1,   911,    -1,   912,    -1,   921,   917,    -1,   921,
     969,    -1,    -1,   975,   999,   984,   630,   997,   631,   913,
     985,    -1,    -1,   981,   978,   999,   983,   630,   997,   631,
     914,   986,    -1,    -1,   982,   978,   999,   983,   630,   997,
     631,   915,   987,    -1,    -1,   919,   976,   999,   984,   630,
     997,   631,   916,   985,    -1,   919,   189,   253,   999,   630,
     997,   631,   969,    -1,   919,   918,    -1,    -1,   918,    -1,
      63,   630,  1124,   631,    -1,    -1,   920,    -1,    92,   999,
      -1,    -1,  1415,   922,   923,    -1,   931,   949,    -1,   931,
     924,    19,   630,   930,   631,   925,   926,    -1,    -1,   198,
      14,    -1,    -1,   600,    -1,   391,    -1,    -1,   927,    -1,
     927,   928,    -1,   928,    -1,   574,    -1,   574,   253,    -1,
      82,  1420,    -1,   385,   630,   930,   631,    -1,  1119,  1124,
    1120,    -1,   939,   947,   943,    -1,   940,   948,   943,    -1,
     186,   941,   943,    -1,    39,    -1,    39,   946,    -1,    44,
      -1,    43,    -1,   935,   946,   966,    -1,   935,   966,    -1,
     936,   946,   967,    -1,   936,   967,    -1,    34,   946,    -1,
      34,    -1,   937,   946,   966,    -1,   938,   946,   967,    -1,
     592,   946,    -1,   618,   947,   943,    -1,   118,    -1,   548,
     947,    -1,   545,   947,    -1,   115,   947,    -1,   549,    -1,
      41,   947,    -1,   934,    -1,   314,    -1,   279,    -1,   282,
     592,    -1,   282,   937,   966,    -1,   551,   966,    -1,   542,
     947,   966,    -1,   316,   966,    -1,   280,   966,    -1,   126,
     941,   943,    -1,   359,   941,   943,    -1,   184,   941,   943,
      -1,    -1,   160,   932,   630,  1001,   631,   966,    -1,    -1,
     475,   933,   630,  1001,   631,   966,    -1,   282,   966,    -1,
     471,    -1,   200,    -1,   199,    -1,   395,    -1,   334,    -1,
     270,    -1,   333,    -1,   396,    -1,   335,    -1,    60,    -1,
     343,    -1,   340,    60,    -1,   935,   596,    -1,   593,    -1,
     340,   593,    -1,   360,    -1,   343,   593,    -1,   340,    60,
     596,    -1,   343,   596,    -1,   241,    -1,   550,    -1,   488,
      -1,   315,    -1,    33,    -1,   420,    -1,   143,    -1,   143,
     399,    -1,    -1,   946,    -1,   942,    -1,   630,   358,   632,
     358,   631,    -1,    -1,   944,    -1,   944,   945,    -1,   945,
      -1,   483,    -1,   577,    -1,   619,    -1,   630,   281,   631,
      -1,   630,   564,   631,    -1,   630,   125,   631,    -1,   630,
     358,   631,    -1,    -1,   946,    -1,    -1,   942,    -1,    -1,
     950,    -1,   950,   951,    -1,   951,    -1,   357,    -1,  1130,
     357,    -1,   128,   953,    -1,   363,   579,   353,  1123,    -1,
      26,    -1,   471,   128,   591,    -1,   968,   253,    -1,   574,
      -1,   574,   253,    -1,    82,  1420,    -1,    71,   960,    -1,
    1419,  1298,  1420,    -1,  1419,  1298,  1423,    -1,  1419,  1298,
    1249,    -1,  1419,  1298,   128,    -1,   931,   961,    -1,   353,
    1123,    -1,  1406,    -1,    60,   475,    -1,    59,    -1,  1425,
      -1,    34,    -1,   955,    -1,   128,    -1,    -1,   954,   956,
      -1,  1425,    -1,    34,    -1,   958,    -1,   128,    -1,  1425,
      -1,    -1,    71,   962,    -1,   960,    -1,   128,    -1,    -1,
     128,    -1,    21,    -1,    34,    21,    -1,    21,    34,    -1,
     571,    -1,   571,    34,    -1,    34,   571,    -1,    -1,   964,
      -1,   965,    -1,    48,    -1,   954,   955,   967,    -1,    34,
      -1,    34,   954,   955,    -1,    -1,    34,    -1,    -1,   403,
      -1,   426,  1416,   970,   972,   973,    -1,    -1,   630,   971,
     631,    -1,   971,   632,  1423,    -1,  1423,    -1,    -1,   305,
     193,    -1,   305,   386,    -1,   305,   484,    -1,    -1,   363,
     579,   974,    -1,   363,   132,   974,    -1,   363,   579,   974,
     363,   132,   974,    -1,   363,   132,   974,   363,   579,   974,
      -1,   448,    -1,    51,    -1,   475,   357,    -1,   354,     5,
      -1,   475,   128,    -1,   977,    -1,   403,   253,    -1,   574,
     978,    -1,   253,    -1,   229,    -1,    -1,   977,    -1,   251,
      -1,   229,    -1,   228,    -1,    -1,   574,    -1,   194,    -1,
     495,    -1,    -1,   983,    -1,   983,   991,    -1,    -1,   988,
      -1,    -1,   990,    -1,    -1,   989,    -1,   993,    -1,   988,
     993,    -1,   994,    -1,   989,   994,    -1,   995,    -1,   990,
     995,    -1,   586,   996,    -1,   562,   996,    -1,   252,  1299,
    1246,    -1,    82,  1420,    -1,  1419,  1298,  1420,    -1,  1419,
    1298,  1423,    -1,  1419,  1298,  1249,    -1,  1419,  1298,   128,
      -1,   992,    -1,   991,    -1,   992,    -1,   992,    -1,   607,
     384,  1419,    -1,    46,    -1,   460,    -1,   210,    -1,   997,
     632,   998,  1237,    -1,   998,  1237,    -1,  1423,    -1,  1423,
     630,   358,   631,    -1,    -1,  1415,    -1,    -1,   638,  1423,
      -1,  1404,    -1,  1001,   632,  1404,    -1,    -1,    13,  1037,
     535,  1416,  1003,  1014,    -1,    -1,    13,   111,  1013,  1004,
     889,    -1,    13,   111,  1423,   580,   114,   137,   339,    -1,
      -1,    13,   405,   690,  1005,   691,    -1,    -1,    13,   195,
     690,  1006,   691,    -1,    -1,    13,  1537,  1532,  1007,  1539,
      -1,    -1,    13,  1532,  1008,  1539,    -1,    -1,    13,  1532,
     168,   690,  1009,  1010,  1011,   680,   685,  1012,    -1,    13,
     532,   790,    -1,    13,   277,   205,   792,    -1,    13,   532,
     787,    -1,    13,   532,   786,    -1,    13,   473,  1425,   369,
     630,   674,   631,    -1,    -1,   363,   462,   678,    -1,   684,
      -1,   363,   462,   678,   684,    -1,    -1,   436,   552,   690,
      -1,    -1,   144,   686,    -1,    -1,  1423,    -1,    -1,   139,
     532,    -1,   227,   532,    -1,  1029,   836,    -1,  1029,  1018,
      -1,  1018,    -1,   837,    -1,  1020,    -1,   145,   389,  1027,
      -1,   421,   389,  1077,  1019,    -1,    -1,   368,   389,  1077,
    1019,  1015,  1077,    -1,    15,   389,  1077,  1019,    -1,    -1,
      63,   389,  1019,  1016,  1072,    -1,    -1,   438,   389,  1077,
    1019,  1017,  1064,    -1,    69,   389,  1077,  1247,    -1,   560,
     389,  1019,    -1,  1023,    -1,   435,   387,    -1,    12,    -1,
    1027,    -1,    -1,     6,   389,  1077,  1021,  1022,    -1,    -1,
     630,   861,   631,    -1,   388,  1247,    -1,    -1,   437,   389,
    1077,  1024,  1025,    -1,    -1,    -1,  1027,  1026,   240,   630,
     861,   631,    -1,  1028,    -1,  1027,   632,  1028,    -1,  1423,
      -1,  1031,    -1,  1029,   632,  1031,    -1,     6,  1035,    -1,
    1030,   911,  1043,    -1,     6,   912,    -1,  1030,   630,   908,
     631,    -1,    -1,    57,  1035,  1415,  1032,   921,  1043,    -1,
      -1,    -1,   330,  1035,  1415,  1033,   923,  1034,  1043,    -1,
     145,  1035,  1415,  1042,    -1,   145,   189,   253,   999,    -1,
     145,   403,   253,    -1,   145,   977,  1415,    -1,   138,   251,
      -1,   153,   251,    -1,    13,  1035,  1415,   475,   128,  1406,
      -1,    13,  1035,  1415,   145,   128,    -1,   436,  1044,  1416,
      -1,   100,   552,   954,   956,   961,    -1,   896,    -1,   188,
      -1,  1230,    -1,    -1,    80,    -1,    -1,   225,    -1,    -1,
    1038,  1039,    -1,    -1,  1040,    -1,  1040,  1041,    -1,  1041,
      -1,   225,    -1,   366,    -1,    -1,   448,    -1,    51,    -1,
      -1,     8,  1423,    -1,   183,    -1,    -1,   552,    -1,   161,
      -1,    19,    -1,    -1,   511,   485,   664,  1053,  1046,  1057,
      -1,    -1,   511,    12,   486,  1053,  1047,    -1,   515,   485,
     664,  1053,    -1,   515,    12,   486,  1053,    -1,    -1,   485,
     664,   511,  1053,  1048,  1057,    -1,   485,   664,   515,  1053,
      -1,   511,   554,  1050,    -1,    -1,  1051,    -1,  1052,    -1,
    1051,   632,  1052,    -1,   607,    91,   489,    -1,   418,   365,
      -1,   418,   612,    -1,    -1,  1054,  1055,    -1,  1056,    -1,
    1055,   632,  1056,    -1,    -1,   507,    -1,   432,    -1,    -1,
     578,  1058,    -1,   663,    -1,  1058,   632,   663,    -1,    -1,
      62,  1458,  1060,  1273,  1061,    -1,    -1,   414,    -1,   175,
      -1,    -1,   438,  1077,  1458,  1063,  1273,  1064,    -1,    -1,
    1065,    -1,  1066,    -1,  1066,  1065,    -1,   414,    -1,   175,
      -1,   584,    -1,    -1,    15,  1077,  1458,  1068,  1273,    -1,
      35,  1420,    -1,    -1,    63,  1458,  1071,  1273,  1072,    -1,
      -1,  1073,    -1,  1074,    -1,  1074,  1073,    -1,   414,    -1,
     179,    -1,   317,    -1,   175,    -1,    58,    -1,   190,   580,
      -1,    -1,   368,  1077,  1458,  1076,  1273,    -1,    -1,   356,
      -1,   273,    -1,    -1,   436,  1458,  1079,  1081,    -1,   436,
     582,   689,  1080,    -1,  1426,   552,  1426,    -1,  1080,   632,
    1426,   552,  1426,    -1,  1082,    -1,  1081,   632,  1082,    -1,
    1416,   552,  1416,    -1,    -1,    49,   229,  1084,  1085,   243,
    1089,    -1,  1086,    -1,  1088,    -1,  1087,    -1,  1086,   632,
    1087,    -1,  1416,  1098,    -1,  1416,  1096,  1098,    -1,  1423,
      -1,   128,    -1,    -1,   272,   229,   240,    49,  1091,  1092,
      -1,  1095,    -1,  1093,    -1,  1094,    -1,  1093,   632,  1094,
      -1,  1416,  1098,  1101,    -1,  1416,  1096,  1098,  1101,    -1,
      -1,   389,   839,  1097,   630,  1019,   631,    -1,    -1,  1099,
    1100,    -1,    -1,   977,   630,  1212,   631,    -1,    -1,   225,
     260,    -1,  1103,    -1,   467,  1106,    -1,   630,  1104,   631,
    1514,    -1,   467,  1108,    -1,   630,  1104,   631,    -1,   467,
    1191,    -1,   630,  1105,   631,    -1,    -1,  1108,  1107,  1511,
      -1,    -1,    -1,  1109,  1113,  1117,  1110,  1111,  1116,    -1,
    1233,  1239,    -1,  1262,    -1,  1112,    -1,  1262,  1112,    -1,
    1112,  1262,    -1,   192,  1173,  1222,  1227,  1224,  1233,  1239,
    1253,    -1,   192,   146,  1222,  1239,    -1,    -1,  1114,    -1,
    1114,  1115,    -1,  1115,    -1,  1528,    -1,   504,    -1,   502,
      -1,    -1,   190,   579,    -1,   276,   243,   477,   328,    -1,
    1117,   632,  1118,    -1,  1118,    -1,   625,    -1,  1119,  1410,
    1120,    -1,  1119,  1124,  1120,  1121,    -1,    -1,    -1,    -1,
      19,  1423,    -1,    19,  1420,    -1,  1423,    -1,  1420,    -1,
      -1,   630,   631,    -1,   630,  1247,   631,    -1,    -1,   630,
     631,    -1,  1124,  1128,  1124,    -1,  1124,   616,  1124,    -1,
    1124,  1129,  1124,    -1,   352,  1124,    -1,  1125,   246,   559,
      -1,  1125,   246,  1130,   559,    -1,  1125,   246,   178,    -1,
    1125,   246,  1130,   178,    -1,  1125,   246,   575,    -1,  1125,
     246,  1130,   575,    -1,  1125,    -1,  1125,   246,   357,    -1,
    1125,   246,  1130,   357,    -1,  1125,   162,  1126,    -1,  1125,
    1132,  1126,    -1,  1125,  1132,  1133,   630,  1523,   631,    -1,
    1126,    -1,  1127,   243,   630,  1523,   631,    -1,  1127,  1130,
     243,   630,  1523,   631,    -1,  1127,   243,   630,  1124,   631,
      -1,  1127,   243,   630,  1124,   632,  1166,   631,    -1,  1127,
    1130,   243,   630,  1124,   631,    -1,  1127,  1130,   243,   630,
    1124,   632,  1166,   631,    -1,  1127,    32,  1127,    17,  1126,
      -1,  1127,  1130,    32,  1127,    17,  1126,    -1,  1127,   493,
     266,  1127,    -1,  1127,   266,  1138,  1226,    -1,  1127,  1130,
     266,  1138,  1226,    -1,  1127,   427,  1127,    -1,  1127,  1130,
     427,  1127,    -1,  1127,    -1,  1127,   621,  1127,    -1,  1127,
     622,  1127,    -1,  1127,   478,  1127,    -1,  1127,   479,  1127,
      -1,  1127,   624,  1127,    -1,  1127,   623,  1127,    -1,  1127,
     624,   239,  1124,  1216,    -1,  1127,   623,   239,  1124,  1216,
      -1,  1127,   625,  1127,    -1,  1127,   626,  1127,    -1,  1127,
     627,  1127,    -1,  1127,   142,  1127,    -1,  1127,   331,  1127,
      -1,  1127,   628,  1127,    -1,  1138,    -1,   375,    -1,   372,
      -1,    17,    -1,    16,    -1,   352,    -1,   351,    -1,   633,
      -1,   351,    -1,   161,    -1,   196,    -1,   207,    -1,   258,
      -1,   285,    -1,   345,    -1,    12,    -1,    18,    -1,    -1,
      19,  1135,    -1,   241,    -1,   577,   241,    -1,   143,    -1,
     420,    -1,   186,    -1,   126,   941,    -1,   935,   966,    -1,
     936,    -1,   118,    -1,   548,   947,    -1,   115,   947,    -1,
    1124,   632,  1124,  1134,    -1,  1136,    -1,  1137,   632,  1136,
      -1,  1412,    -1,  1139,    -1,  1140,    -1,  1143,    -1,  1141,
      -1,  1138,    71,  1425,    -1,  1407,    -1,  1405,    -1,  1155,
      -1,  1151,    -1,  1138,   374,  1138,    -1,   624,  1138,    -1,
     623,  1138,    -1,   629,  1138,    -1,  1131,  1138,    -1,   630,
    1523,   631,    -1,   630,  1124,   631,    -1,   630,  1124,   632,
    1166,   631,    -1,   459,   630,  1124,   632,  1166,   631,    -1,
     172,   630,  1523,   631,    -1,   634,  1423,  1124,   635,    -1,
     305,  1167,     9,   630,  1127,  1145,   631,    -1,    34,  1138,
      -1,    54,   630,  1124,    19,  1163,   631,    -1,    53,  1169,
    1171,  1170,   155,    -1,   100,   630,  1124,   632,  1163,   631,
      -1,   100,   630,  1124,   586,   955,   631,    -1,   128,   630,
    1412,   631,    -1,   590,   630,  1413,   631,    -1,   239,  1124,
    1216,   624,  1124,    -1,    60,   630,  1166,   631,    -1,    60,
     630,  1166,   586,   955,   631,    -1,   107,  1123,    -1,   118,
     630,  1124,   631,    -1,   123,   630,  1124,   631,    -1,   220,
     630,  1124,   631,    -1,   236,   630,  1124,   632,  1124,   632,
    1124,   632,  1124,   631,    -1,   239,   630,  1124,   632,  1124,
     631,    -1,   239,   630,  1124,   632,  1124,   632,  1166,   631,
      -1,   262,   630,  1124,   632,  1124,   631,    -1,   325,   630,
    1124,   631,    -1,   332,   630,  1124,   631,    -1,   453,   630,
    1124,   632,  1124,   631,    -1,   465,   630,  1124,   631,    -1,
     548,   630,  1124,   631,    -1,   545,   630,  1124,   631,    -1,
     545,   630,  1124,   632,  1124,   631,    -1,   558,   630,  1124,
     631,    -1,   558,   630,   259,  1124,   192,  1124,   631,    -1,
     558,   630,   553,  1124,   192,  1124,   631,    -1,   558,   630,
      45,  1124,   192,  1124,   631,    -1,   558,   630,   259,   192,
    1124,   631,    -1,   558,   630,   553,   192,  1124,   631,    -1,
     558,   630,    45,   192,  1124,   631,    -1,   558,   630,  1124,
     192,  1124,   631,    -1,   582,   630,   631,    -1,   618,   630,
    1124,   631,    -1,     7,   630,  1124,   632,  1124,   631,    -1,
       7,   630,  1124,   632,   239,  1124,  1216,   631,    -1,   106,
    1123,    -1,   110,  1122,    -1,   116,   630,  1124,   632,   239,
    1124,  1216,   631,    -1,   117,   630,  1124,   632,   239,  1124,
    1216,   631,    -1,   177,   630,  1216,   192,  1124,   631,    -1,
     201,   630,  1218,   632,  1124,   631,    -1,   353,  1122,    -1,
     398,   630,  1127,   243,  1124,   631,    -1,   520,   630,  1124,
     632,  1124,   631,    -1,   520,   630,  1124,   632,   239,  1124,
    1216,   631,    -1,   524,   630,  1124,   632,  1124,   632,  1124,
     631,    -1,   524,   630,  1124,   632,  1124,   631,    -1,   524,
     630,  1124,   192,  1124,   190,  1124,   631,    -1,   524,   630,
    1124,   192,  1124,   631,    -1,   530,  1122,    -1,   546,   630,
    1217,   632,  1124,   632,  1124,   631,    -1,   547,   630,  1217,
     632,  1124,   632,  1124,   631,    -1,   587,  1123,    -1,   589,
    1122,    -1,   588,  1122,    -1,    74,   630,  1124,   632,  1137,
     631,    -1,    76,   630,  1124,   632,  1166,   631,    -1,    77,
     630,  1124,   632,  1124,   631,    -1,    79,   630,  1124,   631,
      -1,    75,   630,  1137,   631,    -1,    78,   630,  1124,   632,
    1124,    19,  1163,   631,    -1,    21,   630,  1124,   631,    -1,
      59,   630,  1124,   631,    -1,    69,   630,  1166,   631,    -1,
      72,   630,  1124,   631,    -1,   111,   630,   631,    -1,   224,
     630,  1124,   632,  1124,   632,  1124,   631,    -1,   257,   630,
    1166,   631,    -1,   321,   630,  1124,   631,    -1,   331,   630,
    1124,   632,  1124,   631,    -1,   362,   630,  1124,   631,    -1,
     390,   630,  1124,   631,    -1,   412,   630,  1124,   631,    -1,
     440,   630,  1124,   632,  1124,   631,    -1,   441,   630,  1124,
     632,  1124,   632,  1124,   631,    -1,   560,   630,  1124,   632,
    1124,   631,    -1,   603,   630,  1124,   631,    -1,   603,   630,
    1124,   632,  1124,   631,    -1,  1142,    -1,    96,   630,  1124,
     632,  1124,   631,    -1,   199,   630,  1166,   631,    -1,   270,
     630,  1166,   631,    -1,   333,   630,  1166,   631,    -1,   334,
     630,  1166,   631,    -1,   335,   630,  1166,   631,    -1,   395,
     630,  1124,   632,  1124,   631,    -1,   396,   630,  1166,   631,
      -1,    -1,  1419,   630,  1144,  1148,   631,    -1,  1423,   638,
    1423,   630,  1165,   631,    -1,  1146,  1147,    -1,   243,    43,
     328,    -1,    -1,   243,   341,   255,   328,    -1,    -1,   607,
     413,   174,    -1,    -1,  1149,    -1,  1150,    -1,  1149,   632,
    1150,    -1,  1119,  1124,  1120,  1121,    -1,    28,   630,  1161,
     631,    -1,    28,   630,   141,  1161,   631,    -1,    37,   630,
    1161,   631,    -1,    38,   630,  1161,   631,    -1,    40,   630,
    1161,   631,    -1,   101,   630,  1221,   625,   631,    -1,   101,
     630,  1161,   631,    -1,    -1,    -1,   101,   630,   141,  1152,
    1166,  1153,   631,    -1,   327,   630,  1161,   631,    -1,   327,
     630,   141,  1161,   631,    -1,   310,   630,  1161,   631,    -1,
     310,   630,   141,  1161,   631,    -1,   514,   630,  1161,   631,
      -1,   595,   630,  1161,   631,    -1,   513,   630,  1161,   631,
      -1,   597,   630,  1161,   631,    -1,   525,   630,  1161,   631,
      -1,   525,   630,   141,  1161,   631,    -1,    -1,   206,   630,
    1158,  1154,  1166,  1160,  1159,   631,    -1,    -1,   637,  1156,
    1157,    -1,  1425,   476,  1124,    -1,  1425,    -1,   637,  1445,
    1425,  1000,    -1,    -1,   141,    -1,    -1,   469,  1404,    -1,
      -1,  1234,    -1,    -1,  1221,  1162,  1124,    -1,    34,   947,
      -1,    60,   947,   966,    -1,   343,   947,    -1,   241,    -1,
     483,    -1,   483,   241,    -1,   577,    -1,   577,   241,    -1,
     118,    -1,   548,   947,    -1,   115,   947,    -1,   126,   941,
      -1,    -1,   143,  1164,   948,    -1,    -1,  1166,    -1,  1124,
      -1,  1166,   632,  1124,    -1,  1168,    -1,   630,  1168,   631,
      -1,  1412,    -1,  1168,   632,  1412,    -1,    -1,  1124,    -1,
      -1,   151,  1124,    -1,   604,  1124,   544,  1124,    -1,  1171,
     604,  1124,   544,  1124,    -1,  1185,    -1,  1176,    -1,  1175,
      -1,  1172,    -1,   634,  1423,  1172,   635,    -1,  1174,    -1,
    1175,   632,  1174,    -1,  1172,  1184,  1172,    -1,  1172,   517,
    1185,    -1,    -1,  1172,  1184,  1172,   363,  1177,  1124,    -1,
      -1,  1172,   517,  1185,   363,  1178,  1124,    -1,    -1,  1172,
    1184,  1172,   586,  1179,   630,  1215,   631,    -1,  1172,   341,
     250,  1185,    -1,    -1,  1172,   262,  1201,   250,  1172,   363,
    1180,  1124,    -1,    -1,  1172,   262,  1201,   250,  1185,  1181,
     586,   630,  1215,   631,    -1,  1172,   341,   262,  1201,   250,
    1185,    -1,    -1,  1172,   453,  1201,   250,  1172,   363,  1182,
    1124,    -1,    -1,  1172,   453,  1201,   250,  1185,  1183,   586,
     630,  1215,   631,    -1,  1172,   341,   453,  1201,   250,  1185,
      -1,   250,    -1,   233,   250,    -1,   104,   250,    -1,    -1,
    1186,  1416,  1220,  1210,    -1,  1200,  1199,  1196,    -1,   630,
    1199,  1187,   631,  1220,    -1,  1194,  1515,    -1,    -1,    -1,
    1187,   573,  1519,  1188,  1520,  1189,  1515,    -1,  1191,    -1,
      -1,    -1,  1192,  1526,  1117,  1193,   906,  1116,    -1,    -1,
    1199,  1195,  1175,    -1,    -1,    -1,  1197,  1113,  1117,  1198,
     906,    -1,    -1,   467,    -1,    -1,   376,    -1,    -1,   190,
     250,    -1,   190,   373,    47,    -1,   190,   205,    47,    -1,
     188,    -1,   225,    -1,    -1,  1203,   977,  1202,  1205,   630,
    1214,   631,    -1,    -1,   585,   977,  1202,  1206,   630,  1212,
     631,    -1,  1204,    -1,  1207,  1204,    -1,    -1,    -1,  1209,
    1207,    -1,    -1,  1211,  1208,    -1,    -1,  1214,    -1,  1423,
      -1,   403,    -1,  1213,    -1,  1214,   632,  1213,    -1,  1423,
      -1,  1215,   632,  1423,    -1,  1217,    -1,   119,    -1,   120,
      -1,   121,    -1,   122,    -1,   217,    -1,   218,    -1,   219,
      -1,   323,    -1,   324,    -1,   464,    -1,   617,    -1,   123,
      -1,   603,    -1,   220,    -1,   325,    -1,   332,    -1,   412,
      -1,   465,    -1,   321,    -1,   618,    -1,   118,    -1,   548,
      -1,   115,    -1,   545,    -1,    -1,    19,    -1,   161,    -1,
      -1,  1219,  1423,    -1,    -1,    12,    -1,    -1,    -1,   605,
    1223,  1124,    -1,    -1,    -1,   211,  1225,  1124,    -1,   166,
    1138,    -1,    -1,    -1,   205,    47,  1228,  1229,    -1,  1228,
     632,  1411,  1237,    -1,  1411,  1237,    -1,    -1,   608,    -1,
     609,    -1,   373,    47,  1231,    -1,  1231,   632,  1232,    -1,
    1232,    -1,  1413,  1237,    -1,    -1,  1234,    -1,    -1,   373,
      47,  1235,  1236,    -1,  1236,   632,  1411,  1237,    -1,  1411,
    1237,    -1,    -1,    20,    -1,   133,    -1,    -1,  1240,    -1,
      -1,  1240,    -1,   267,  1241,    -1,   267,  1241,   457,   170,
    1243,    -1,   267,   457,   170,  1243,    -1,  1242,    -1,  1242,
     632,  1242,    -1,  1242,   361,  1242,    -1,  1423,    -1,  1405,
      -1,   564,    -1,   281,    -1,   358,    -1,  1242,    -1,    -1,
     267,  1242,    -1,   267,   457,   170,    -1,   267,  1242,   457,
     170,    -1,   358,    -1,   623,   358,    -1,   623,   281,    -1,
     358,    -1,   213,    -1,   281,    -1,   564,    -1,   125,    -1,
     185,    -1,   358,    -1,   213,    -1,   281,    -1,   564,    -1,
    1250,    -1,   358,    -1,   564,    -1,   281,    -1,   125,    -1,
     185,    -1,   358,    -1,   564,    -1,   213,    -1,   281,    -1,
    1250,    -1,  1251,    -1,   125,    -1,   185,    -1,  1246,    -1,
     128,    -1,    -1,    -1,   405,  1423,  1254,   630,  1255,   631,
      -1,    -1,  1256,    -1,  1256,   632,  1257,    -1,  1257,    -1,
    1119,  1124,  1120,    -1,    -1,  1259,  1260,    -1,  1260,   632,
    1261,    -1,  1261,    -1,   637,  1425,    -1,  1425,    -1,    -1,
     240,  1263,  1264,    -1,    -1,    -1,   377,  1422,  1265,   957,
    1266,  1388,  1391,    -1,   147,  1422,    -1,  1258,    -1,    -1,
     144,  1268,  1166,    -1,    -1,   145,  1278,  1458,  1277,  1270,
    1273,  1042,    -1,    -1,   145,   229,  1423,   363,  1416,  1271,
      -1,   145,   111,  1277,  1423,    -1,   145,   195,  1277,  1423,
     638,  1423,    -1,   145,   195,  1277,  1423,    -1,   145,   405,
    1277,   690,    -1,   145,   582,   689,  1488,    -1,    -1,   145,
     599,  1277,  1272,  1273,  1042,    -1,   145,   168,  1277,   690,
      -1,   145,   557,  1277,   690,    -1,   145,   532,   813,   824,
     825,    -1,   145,   277,   205,   814,   824,   825,    -1,   145,
     473,  1277,  1425,    -1,  1274,    -1,  1273,   632,  1274,    -1,
    1416,    -1,  1276,    -1,  1275,   632,  1276,    -1,  1417,    -1,
      -1,   224,   172,    -1,    -1,   538,    -1,    -1,    -1,   236,
    1280,  1285,  1036,  1287,  1281,  1289,  1305,    -1,    -1,    -1,
     441,  1283,  1286,  1287,  1284,  1289,    -1,    -1,   284,    -1,
     130,    -1,   214,    -1,  1314,    -1,   130,    -1,   240,  1288,
      -1,  1288,    -1,  1274,    -1,  1292,    -1,   630,   631,  1292,
      -1,   630,  1291,   631,  1292,    -1,    -1,   475,  1290,  1296,
      -1,  1291,   632,  1409,    -1,  1409,    -1,   590,  1295,    -1,
     591,  1295,    -1,    -1,   884,  1293,  1511,    -1,    -1,   630,
     884,   631,  1294,  1514,    -1,  1295,   632,  1300,    -1,  1300,
      -1,  1296,   632,  1297,    -1,  1297,    -1,  1413,  1298,  1304,
      -1,   161,    -1,   476,    -1,    -1,  1298,    -1,    -1,   630,
    1301,  1302,   631,    -1,    -1,  1303,    -1,  1303,   632,  1304,
      -1,  1304,    -1,  1124,    -1,   128,    -1,    -1,    -1,   363,
     148,  1306,   253,   579,  1312,    -1,    -1,    -1,   579,  1308,
    1314,  1036,  1173,   475,  1310,  1309,  1222,  1233,  1244,    -1,
    1310,   632,  1311,    -1,  1311,    -1,  1413,  1298,  1304,    -1,
    1312,   632,  1313,    -1,  1313,    -1,  1413,  1298,  1304,    -1,
      -1,   284,    -1,    -1,   132,  1316,  1324,  1317,    -1,    -1,
     192,  1416,  1318,  1222,  1233,  1244,    -1,    -1,  1321,  1319,
     192,  1173,  1222,    -1,    -1,   192,  1275,  1320,   586,  1173,
    1222,    -1,  1322,    -1,  1321,   632,  1322,    -1,  1423,  1323,
      -1,  1423,   638,  1423,  1323,    -1,    -1,   638,   625,    -1,
      -1,  1325,  1324,    -1,   414,    -1,   284,    -1,   225,    -1,
      -1,   560,  1328,  1327,  1274,    -1,    -1,   535,    -1,    -1,
    1330,    -1,  1331,    -1,  1330,   632,  1331,    -1,   102,    -1,
     318,    -1,    42,   244,    -1,    97,   529,    -1,   381,   180,
      -1,   245,    -1,   528,    -1,   494,    -1,    12,    -1,    -1,
     190,   413,   358,    -1,    -1,   480,  1334,  1335,    -1,   112,
    1346,    -1,  1342,   531,  1341,  1346,    -1,  1342,   556,  1341,
    1346,    -1,   167,  1341,  1346,    -1,   535,   512,  1341,  1346,
      -1,   367,   531,  1341,  1346,    -1,   393,    -1,   159,   903,
    1338,    -1,   159,    12,  1338,    -1,  1342,    73,  1343,  1416,
    1341,  1346,    -1,  1339,   278,    -1,   485,   216,    -1,    -1,
      35,   167,  1344,  1345,  1336,  1238,    -1,    -1,   429,   664,
     167,  1344,  1345,  1337,  1238,    -1,   979,  1343,  1416,  1341,
    1222,    -1,  1340,   158,    -1,    24,    -1,    99,    -1,   404,
      -1,   101,   630,   625,   631,   602,    -1,   101,   630,   625,
     631,   164,    -1,   602,  1238,    -1,   164,  1238,    -1,   409,
      -1,   408,  1329,  1332,  1238,    -1,  1444,   512,  1346,    -1,
    1342,   407,    -1,  1444,   594,  1346,    -1,   954,  1346,    -1,
      72,  1346,    -1,   204,    -1,   204,   190,  1426,    -1,   103,
     111,   894,  1423,    -1,   103,   535,  1416,    -1,   103,   599,
    1416,    -1,   302,   512,    -1,    12,   486,   512,    -1,   485,
     512,    -1,   485,   665,   512,    -1,    67,    -1,   583,    -1,
     534,    -1,   230,    -1,   103,   405,   690,    -1,   103,   195,
     690,    -1,   103,   557,   690,    -1,   405,   512,  1346,    -1,
     195,   512,  1346,    -1,   405,    70,   690,    -1,   195,    70,
     690,    -1,   103,   168,   690,    -1,  1350,   190,  1124,    -1,
     512,    -1,   336,    -1,   278,    -1,   302,    -1,    34,    -1,
      -1,   516,    -1,    -1,  1343,  1423,    -1,    -1,   193,    -1,
     192,    -1,   243,    -1,    -1,   243,  1420,    -1,    -1,   192,
    1248,    -1,    -1,   266,  1420,    -1,   605,  1124,    -1,    -1,
    1350,  1416,  1348,  1352,    -1,    -1,  1350,  1351,  1349,  1102,
      -1,   133,    -1,   134,    -1,    -1,   175,    -1,   388,    -1,
      -1,  1404,    -1,  1423,    -1,    -1,   187,  1077,  1354,  1355,
      -1,    -1,    -1,  1458,  1356,  1361,  1357,  1358,    -1,  1359,
      -1,    -1,   607,   418,   276,  1362,    -1,  1359,   632,  1360,
      -1,  1360,    -1,   163,   278,    -1,   159,   278,    -1,   197,
     278,    -1,   487,   278,    -1,    34,   278,    -1,   428,   278,
     664,    -1,   413,    49,    -1,   216,    -1,   404,    -1,   278,
      -1,   512,    -1,   485,   664,    -1,    67,    -1,   583,    -1,
     534,    -1,   230,    -1,   302,    -1,   135,    -1,   446,    -1,
      -1,  1273,    -1,    -1,    17,   138,    61,    -1,    -1,   444,
    1364,  1365,    -1,  1365,   632,  1366,    -1,  1366,    -1,    -1,
     485,  1367,   664,  1368,    -1,   302,    -1,   413,    49,    -1,
      -1,    12,    -1,    -1,   411,  1370,  1371,    -1,  1339,   278,
    1372,    -1,   552,  1420,    -1,    30,  1124,    -1,    -1,   254,
    1374,  1375,  1376,  1377,    -1,    -1,   209,    -1,   491,    -1,
      -1,    90,    -1,   413,    -1,  1124,    -1,   582,  1426,    -1,
     585,  1423,    -1,    -1,    -1,    -1,    -1,   272,  1384,  1380,
    1386,  1385,   231,  1422,  1381,  1387,   240,   535,  1416,  1382,
     957,  1383,  1394,  1388,  1391,  1395,  1397,  1400,    -1,   114,
      -1,   615,    -1,    -1,   273,    -1,    -1,    88,    -1,   284,
      -1,    -1,   441,    -1,   225,    -1,    -1,    73,  1389,    -1,
    1389,  1390,    -1,  1390,    -1,   540,    47,  1404,    -1,   371,
     154,    47,  1404,    -1,   154,    47,  1404,    -1,   165,    47,
    1404,    -1,    -1,   269,  1392,    -1,  1392,  1393,    -1,  1393,
      -1,   540,    47,  1404,    -1,   509,    47,  1404,    -1,    -1,
     457,   222,    47,  1404,    -1,    -1,   225,   358,  1396,    -1,
     269,    -1,   457,    -1,    -1,   630,  1398,   631,    -1,   630,
     631,    -1,  1398,   632,  1399,    -1,  1399,    -1,  1413,    -1,
     637,  1425,    -1,    -1,   475,  1401,    -1,  1401,   632,  1402,
      -1,  1402,    -1,  1413,  1298,  1119,  1304,  1120,    -1,   541,
      -1,   342,    -1,   567,   541,    -1,  1403,  1421,    -1,  1421,
      -1,   213,    -1,    36,    -1,   383,    -1,  1407,    -1,   624,
    1408,    -1,   623,  1408,    -1,  1403,    -1,  1408,    -1,   357,
      -1,   178,    -1,   559,    -1,   213,    -1,    36,    -1,   567,
     213,    -1,   567,    36,    -1,   118,  1403,    -1,   548,  1403,
      -1,   545,  1403,    -1,   358,    -1,   281,    -1,   564,    -1,
     125,    -1,   185,    -1,  1413,    -1,  1410,    -1,  1423,   638,
     625,    -1,  1423,   638,  1423,   638,   625,    -1,  1124,    -1,
    1423,    -1,  1414,    -1,  1423,    -1,  1414,    -1,  1423,   638,
    1423,    -1,   638,  1423,   638,  1423,    -1,  1423,   638,  1423,
     638,  1423,    -1,  1423,    -1,  1423,   638,  1423,   638,  1423,
      -1,  1423,   638,  1423,    -1,   638,  1423,    -1,  1423,    -1,
    1423,   638,  1423,    -1,   638,  1423,    -1,  1423,  1323,    -1,
    1423,   638,  1423,  1323,    -1,  1423,    -1,   221,    -1,   223,
      -1,   541,    -1,   541,    -1,   541,    -1,  1419,    -1,  1427,
      -1,  1419,    -1,  1428,    -1,  1423,    -1,  1420,    -1,   265,
      -1,  1425,    -1,  1425,   637,  1425,    -1,   107,  1123,    -1,
    1428,    -1,    21,    -1,    29,    -1,    31,    -1,    48,    -1,
      49,    -1,    59,    -1,    62,    -1,    61,    -1,    68,    -1,
      74,    -1,    75,    -1,    76,    -1,    77,    -1,    78,    -1,
      79,    -1,    82,    -1,    84,    -1,    96,    -1,   124,    -1,
     144,    -1,   155,    -1,   170,    -1,   171,    -1,   187,    -1,
     208,    -1,   212,    -1,   215,    -1,   238,    -1,   255,    -1,
     354,    -1,   367,    -1,   369,    -1,   379,    -1,   384,    -1,
     389,    -1,   397,    -1,   400,    -1,   435,    -1,   438,    -1,
     444,    -1,   447,    -1,   454,    -1,   461,    -1,   466,    -1,
     473,    -1,   483,    -1,   490,    -1,   485,    -1,   486,    -1,
     492,    -1,   511,    -1,   515,    -1,   560,    -1,   571,    -1,
     572,    -1,   611,    -1,   614,    -1,   580,    -1,     5,    -1,
       7,    -1,     8,    -1,     9,    -1,    10,    -1,    11,    -1,
      14,    -1,    18,    -1,    23,    -1,    24,    -1,    26,    -1,
      25,    -1,    27,    -1,    28,    -1,    35,    -1,    39,    -1,
      42,    -1,    44,    -1,    43,    -1,    46,    -1,    52,    -1,
      55,    -1,    56,    -1,    58,    -1,    64,    -1,    67,    -1,
      66,    -1,    65,    -1,    69,    -1,    70,    -1,    72,    -1,
      81,    -1,    73,    -1,    83,    -1,    85,    -1,    86,    -1,
      87,    -1,    88,    -1,    90,    -1,    91,    -1,    93,    -1,
      95,    -1,    94,    -1,    97,    -1,    99,    -1,   102,    -1,
     105,    -1,   109,    -1,   114,    -1,   113,    -1,   115,    -1,
     118,    -1,   123,    -1,   129,    -1,   131,    -1,   135,    -1,
     137,    -1,   138,    -1,   139,    -1,   140,    -1,   147,    -1,
     148,    -1,   149,    -1,   156,    -1,   160,    -1,   159,    -1,
     158,    -1,   163,    -1,   164,    -1,   166,    -1,   168,    -1,
     167,    -1,   169,    -1,   174,    -1,   175,    -1,   176,    -1,
     180,    -1,   179,    -1,   191,    -1,   153,    -1,   193,    -1,
     182,    -1,   183,    -1,   184,    -1,   197,    -1,   198,    -1,
     200,    -1,   199,    -1,   201,    -1,   204,    -1,   202,    -1,
     210,    -1,   209,    -1,   216,    -1,   220,    -1,   222,    -1,
     226,    -1,   230,    -1,   242,    -1,   227,    -1,   228,    -1,
     232,    -1,   244,    -1,   245,    -1,   247,    -1,   248,    -1,
     237,    -1,   252,    -1,   257,    -1,   256,    -1,   260,    -1,
     263,    -1,   264,    -1,   270,    -1,   271,    -1,   273,    -1,
     275,    -1,   277,    -1,   278,    -1,   308,    -1,   302,    -1,
     304,    -1,   287,    -1,   291,    -1,   288,    -1,   289,    -1,
     303,    -1,   290,    -1,   292,    -1,   286,    -1,   300,    -1,
     294,    -1,   293,    -1,   295,    -1,   296,    -1,   297,    -1,
     298,    -1,   299,    -1,   306,    -1,   307,    -1,   309,    -1,
     311,    -1,   312,    -1,   317,    -1,   318,    -1,   319,    -1,
     320,    -1,   321,    -1,   322,    -1,   325,    -1,   326,    -1,
     330,    -1,   328,    -1,   332,    -1,   333,    -1,   334,    -1,
     335,    -1,   336,    -1,   337,    -1,   339,    -1,   338,    -1,
     340,    -1,   343,    -1,   344,    -1,   348,    -1,   347,    -1,
     355,    -1,   349,    -1,   350,    -1,   360,    -1,   361,    -1,
     362,    -1,   364,    -1,   366,    -1,   365,    -1,   380,    -1,
     381,    -1,   386,    -1,   387,    -1,   388,    -1,   390,    -1,
     391,    -1,   392,    -1,   394,    -1,   393,    -1,   395,    -1,
     396,    -1,   401,    -1,   402,    -1,   404,    -1,   406,    -1,
     407,    -1,   408,    -1,   409,    -1,   410,    -1,   412,    -1,
     413,    -1,   414,    -1,   417,    -1,   421,    -1,   422,    -1,
     424,    -1,   423,    -1,   425,    -1,   428,    -1,   429,    -1,
     430,    -1,   431,    -1,   432,    -1,   434,    -1,   437,    -1,
     439,    -1,   442,    -1,   446,    -1,   449,    -1,   450,    -1,
     455,    -1,   456,    -1,   457,    -1,   458,    -1,   459,    -1,
     460,    -1,   462,    -1,   463,    -1,   465,    -1,   471,    -1,
     470,    -1,   472,    -1,   484,    -1,   477,    -1,   481,    -1,
     487,    -1,   489,    -1,   491,    -1,   493,    -1,   494,    -1,
     502,    -1,   501,    -1,   504,    -1,   507,    -1,   510,    -1,
     512,    -1,   516,    -1,   518,    -1,   519,    -1,   520,    -1,
     521,    -1,   523,    -1,   522,    -1,   526,    -1,   527,    -1,
     528,    -1,   529,    -1,   537,    -1,   534,    -1,   531,    -1,
     536,    -1,   532,    -1,   538,    -1,   539,    -1,   542,    -1,
     543,    -1,   554,    -1,   555,    -1,   556,    -1,   545,    -1,
     546,    -1,   547,    -1,   548,    -1,   561,    -1,   562,    -1,
     563,    -1,   195,    -1,   565,    -1,   566,    -1,   569,    -1,
     568,    -1,   575,    -1,   578,    -1,   582,    -1,   583,    -1,
     584,    -1,   594,    -1,   599,    -1,   600,    -1,   591,    -1,
     602,    -1,   601,    -1,   603,    -1,   610,    -1,   613,    -1,
     615,    -1,   618,    -1,   598,    -1,    -1,   475,  1430,  1431,
      -1,    -1,  1447,  1432,  1437,    -1,    -1,   554,  1433,  1449,
      -1,    -1,  1443,  1434,  1435,    -1,    -1,  1446,  1436,  1437,
      -1,   554,  1449,    -1,    -1,   632,  1438,    -1,    -1,  1439,
    1441,    -1,    -1,  1438,   632,  1440,  1441,    -1,    -1,  1443,
    1442,  1446,    -1,  1447,    -1,   202,    -1,   273,    -1,   472,
      -1,    -1,   202,    -1,   273,    -1,   472,    -1,    -1,   202,
     638,    -1,   273,   638,    -1,   472,   638,    -1,  1448,  1298,
    1455,    -1,  1448,  1298,  1455,    -1,   637,  1425,  1298,  1124,
      -1,   637,   637,  1445,  1448,  1298,  1455,    -1,   954,   959,
      -1,   338,  1298,  1124,    -1,   338,   956,   961,    -1,   390,
    1298,  1454,    -1,   390,   190,  1426,  1298,  1454,    -1,  1423,
      -1,  1423,   638,  1423,    -1,   128,   638,  1423,    -1,  1450,
      -1,  1451,    -1,  1450,   632,  1451,    -1,  1451,   632,  1450,
      -1,  1452,    -1,   247,   264,  1453,    -1,   418,   365,    -1,
     418,   612,    -1,   418,   565,    -1,   418,    83,    -1,   439,
     418,    -1,   470,    -1,   541,    -1,   390,   630,   541,   631,
      -1,   362,   630,   541,   631,    -1,  1124,    -1,   128,    -1,
     363,    -1,    12,    -1,    34,    -1,    -1,   276,  1458,  1457,
    1459,    -1,   535,    -1,   531,    -1,  1460,    -1,  1459,   632,
    1460,    -1,  1416,  1220,  1461,    -1,   418,    -1,   612,    -1,
     612,    88,    -1,   284,   612,    -1,   418,   273,    -1,    -1,
     576,  1463,  1458,    -1,   208,  1416,   367,  1220,    -1,   208,
    1418,    68,    -1,    -1,   208,  1418,   418,  1465,  1466,  1222,
    1239,    -1,  1467,    -1,  1423,  1468,    -1,   183,    -1,   348,
      -1,   183,    -1,   348,    -1,   402,    -1,   256,    -1,    -1,
    1470,  1469,   630,  1303,   631,    -1,   161,    -1,   196,    -1,
     258,    -1,   207,    -1,   285,    -1,   452,   689,  1472,    -1,
    1476,   363,  1475,  1487,   192,  1488,    -1,  1476,   363,   195,
    1487,   192,  1488,    -1,  1476,   363,   405,  1487,   192,  1488,
      -1,    12,  1477,   632,   203,   370,   192,  1488,    -1,   410,
     363,  1426,   192,  1488,    -1,   203,   689,  1474,    -1,  1476,
     363,  1475,  1487,   552,  1489,  1496,  1497,    -1,  1476,   363,
     195,  1487,   552,  1489,  1496,  1497,    -1,  1476,   363,   405,
    1487,   552,  1489,  1496,  1497,    -1,   410,   363,  1426,   552,
    1489,  1498,    -1,    -1,   535,    -1,  1478,    -1,    12,  1477,
      -1,    -1,   404,    -1,  1479,    -1,  1478,   632,  1479,    -1,
      -1,   467,  1480,  1493,    -1,    -1,   236,  1481,  1493,    -1,
      -1,   579,  1482,  1493,    -1,    -1,   426,  1483,  1493,    -1,
     132,    -1,   581,    -1,   229,    -1,    13,    -1,   103,    -1,
     145,    -1,   171,    -1,   434,    -1,   481,    -1,   406,    -1,
     182,    -1,   203,   370,    -1,   480,   112,    -1,   526,    -1,
     103,   538,   531,    -1,   276,   531,    -1,   442,   485,    -1,
     442,    66,    -1,   103,   599,    -1,   480,   599,    -1,   103,
     456,    -1,    13,   456,    -1,   103,   582,    -1,   168,    -1,
     557,    -1,   103,   532,    -1,    -1,    17,    -1,  1486,  1484,
    1485,    -1,  1486,    -1,   521,   541,    -1,   248,   541,    -1,
      64,   541,    -1,   625,    -1,  1423,   638,   625,    -1,   625,
     638,   625,    -1,  1416,    -1,  1426,    -1,  1488,   632,  1426,
      -1,  1492,    -1,  1489,   632,  1492,    -1,   598,    -1,   607,
      -1,   586,    -1,    19,    -1,  1426,   222,    47,   541,    -1,
    1426,   222,    47,   390,   541,    -1,  1426,   222,  1490,  1425,
      -1,  1426,   222,  1490,  1425,  1491,  1420,    -1,  1426,    -1,
      -1,   630,  1494,   631,    -1,  1494,   632,  1495,    -1,  1495,
      -1,  1423,    -1,    -1,   443,  1485,    -1,   443,   508,    -1,
     443,   613,    -1,   443,   350,    -1,    -1,   607,  1499,    -1,
      -1,   607,   203,   370,    -1,  1499,  1500,    -1,  1500,    -1,
     203,   370,    -1,   307,  1246,    -1,   311,  1246,    -1,   306,
    1246,    -1,   312,  1245,    -1,    -1,    31,  1502,  1503,    -1,
      -1,   610,    -1,    -1,    17,   354,    56,    -1,    17,    56,
      -1,    -1,   433,    -1,   354,   433,    -1,    -1,   461,    -1,
      84,  1503,  1504,  1505,    -1,   454,  1503,  1504,  1505,    -1,
     454,  1503,   552,  1506,  1423,    -1,   461,  1423,    -1,   433,
     461,  1423,    -1,    -1,  1512,    -1,    -1,   573,  1519,  1513,
    1103,    -1,    -1,  1512,    -1,  1516,    -1,    -1,  1516,    -1,
      -1,  1517,  1518,    -1,  1234,  1238,    -1,  1240,    -1,    -1,
     141,    -1,    12,    -1,   467,  1190,    -1,   630,  1105,   631,
      -1,  1520,  1515,    -1,    -1,  1521,   573,  1519,  1522,  1520,
    1515,    -1,  1524,  1521,  1525,    -1,    -1,    -1,    -1,  1527,
      -1,  1527,  1528,    -1,  1528,    -1,   517,    -1,   214,    -1,
     141,    -1,   505,    -1,   500,    -1,   501,    -1,   503,    -1,
      12,    -1,  1534,  1530,    -1,  1533,  1531,    -1,  1535,  1532,
    1539,    -1,  1539,    -1,  1547,    -1,  1558,    -1,  1552,    -1,
     676,    -1,  1539,    -1,  1547,    -1,  1558,    -1,  1552,    -1,
    1551,    -1,   676,    -1,  1533,    -1,  1534,    -1,    -1,   129,
     161,  1426,    -1,  1536,    -1,  1536,  1537,    -1,  1537,    -1,
     375,   441,    -1,    11,   161,   566,    -1,    11,   161,   319,
      -1,    11,   161,   539,    -1,    -1,   506,   466,   129,    -1,
     506,   466,   242,    -1,    -1,  1538,   599,  1416,  1540,  1541,
      19,  1543,    -1,    -1,   630,  1542,   631,    -1,  1423,    -1,
    1542,   632,  1423,    -1,    -1,  1544,  1545,  1546,    -1,   467,
    1106,    -1,   630,  1104,   631,  1514,    -1,    -1,   607,    63,
     370,    -1,   607,    52,    63,   370,    -1,   607,   273,    63,
     370,    -1,    -1,    -1,    -1,   557,  1119,   690,   784,   785,
     363,  1119,  1548,  1416,   190,  1119,  1549,   150,   459,  1550,
     734,    -1,    10,  1119,   195,  1423,   450,   907,   492,  1420,
      -1,  1119,   195,  1423,   450,   907,   492,  1420,    -1,    -1,
      -1,    -1,    -1,    -1,  1119,   195,   690,   630,  1553,   701,
     631,  1554,   450,  1555,   952,  1556,   692,  1557,   734,    -1,
      -1,    -1,    -1,    -1,   405,  1119,   690,  1559,   630,  1560,
     705,   631,  1561,   692,  1562,   734,    -1,   614,  1565,  1564,
    1566,    -1,   614,   155,  1564,  1568,    -1,   614,   400,  1564,
      -1,   614,    84,  1564,  1567,    -1,   614,   454,  1564,    -1,
     614,   422,    -1,  1404,    -1,  1404,   632,  1404,    -1,  1404,
     632,  1404,   632,  1246,    -1,    31,    -1,   511,    -1,    -1,
     250,    -1,   449,    -1,    -1,   364,   392,    -1,    -1,    -1,
     527,  1569,  1570,    -1,    -1,   190,   322,    -1,   238,   394,
    1423,   492,  1420,    -1,   238,   492,  1420,    -1,   572,   394,
    1423,    -1,   572,   492,  1420,    -1,   620,    -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,  1821,  1821,  1834,  1833,  1858,  1865,  1867,  1871,  1872,
    1877,  1878,  1879,  1880,  1881,  1882,  1883,  1884,  1885,  1886,
    1887,  1888,  1889,  1890,  1891,  1892,  1893,  1894,  1895,  1896,
    1897,  1898,  1899,  1900,  1901,  1902,  1903,  1904,  1905,  1906,
    1907,  1908,  1909,  1910,  1911,  1912,  1913,  1914,  1915,  1916,
    1917,  1918,  1919,  1920,  1921,  1922,  1923,  1924,  1925,  1926,
    1927,  1928,  1929,  1933,  1943,  1944,  1948,  1958,  1965,  1976,
    1975,  1986,  1988,  1992,  1993,  1997,  2010,  2009,  2029,  2028,
    2037,  2038,  2042,  2046,  2050,  2054,  2058,  2062,  2067,  2071,
    2075,  2079,  2083,  2087,  2092,  2096,  2101,  2132,  2137,  2140,
    2142,  2143,  2147,  2153,  2157,  2173,  2177,  2187,  2192,  2196,
    2212,  2211,  2253,  2252,  2264,  2262,  2275,  2273,  2285,  2284,
    2297,  2296,  2304,  2308,  2312,  2316,  2323,  2336,  2337,  2341,
    2345,  2349,  2353,  2357,  2361,  2365,  2373,  2372,  2404,  2403,
    2410,  2417,  2418,  2424,  2430,  2440,  2446,  2452,  2454,  2461,
    2462,  2466,  2472,  2481,  2482,  2490,  2490,  2548,  2549,  2550,
    2551,  2552,  2553,  2554,  2555,  2556,  2557,  2558,  2559,  2560,
    2565,  2579,  2595,  2614,  2615,  2619,  2620,  2625,  2627,  2629,
    2631,  2633,  2635,  2637,  2643,  2644,  2645,  2649,  2653,  2661,
    2660,  2673,  2675,  2678,  2680,  2684,  2688,  2695,  2697,  2701,
    2702,  2707,  2727,  2753,  2755,  2759,  2760,  2764,  2790,  2791,
    2792,  2793,  2797,  2798,  2802,  2803,  2808,  2811,  2838,  2837,
    2902,  2918,  2917,  2971,  2997,  2997,  3020,  3021,  3026,  3028,
    3033,  3056,  3069,  3073,  3090,  3091,  3095,  3099,  3108,  3115,
    3122,  3132,  3147,  3170,  3176,  3177,  3183,  3186,  3190,  3198,
    3218,  3220,  3238,  3244,  3246,  3248,  3250,  3252,  3254,  3256,
    3258,  3260,  3262,  3264,  3266,  3271,  3286,  3301,  3319,  3320,
    3324,  3325,  3326,  3327,  3328,  3329,  3330,  3331,  3332,  3333,
    3334,  3335,  3336,  3341,  3340,  3347,  3347,  3404,  3403,  3432,
    3432,  3446,  3499,  3542,  3563,  3562,  3584,  3603,  3605,  3606,
    3610,  3630,  3653,  3655,  3671,  3653,  3690,  3692,  3693,  3697,
    3698,  3703,  3709,  3702,  3730,  3729,  3745,  3746,  3750,  3751,
    3756,  3760,  3755,  3781,  3785,  3780,  3804,  3814,  3819,  3818,
    3854,  3855,  3860,  3859,  3892,  3892,  3907,  3906,  3942,  3954,
    3956,  3953,  3983,  3982,  4003,  4005,  4010,  4012,  4014,  4031,
    4036,  4042,  4049,  4050,  4058,  4064,  4073,  4079,  4085,  4086,
    4090,  4090,  4095,  4096,  4097,  4101,  4102,  4103,  4107,  4111,
    4112,  4113,  4117,  4118,  4119,  4120,  4121,  4122,  4123,  4124,
    4128,  4132,  4133,  4134,  4138,  4139,  4140,  4141,  4142,  4146,
    4150,  4151,  4152,  4156,  4157,  4158,  4159,  4160,  4161,  4162,
    4166,  4170,  4171,  4172,  4176,  4177,  4178,  4183,  4191,  4199,
    4207,  4219,  4231,  4236,  4241,  4249,  4257,  4265,  4273,  4281,
    4289,  4297,  4310,  4323,  4336,  4338,  4342,  4347,  4360,  4361,
    4412,  4413,  4416,  4431,  4450,  4449,  4458,  4456,  4463,  4465,
    4464,  4468,  4467,  4473,  4510,  4511,  4516,  4515,  4534,  4553,
    4552,  4569,  4573,  4581,  4580,  4583,  4585,  4587,  4589,  4594,
    4595,  4600,  4601,  4605,  4606,  4610,  4629,  4639,  4650,  4659,
    4660,  4676,  4678,  4677,  4682,  4680,  4691,  4692,  4696,  4714,
    4730,  4731,  4747,  4762,  4784,  4785,  4790,  4789,  4813,  4823,
    4845,  4844,  4862,  4861,  4881,  4903,  4907,  4936,  4948,  4949,
    4954,  4965,  4953,  4990,  4991,  4995,  5008,  5029,  5042,  5068,
    5069,  5074,  5073,  5110,  5115,  5116,  5120,  5121,  5125,  5127,
    5133,  5139,  5141,  5143,  5145,  5147,  5149,  5159,  5174,  5158,
    5188,  5189,  5193,  5194,  5198,  5199,  5203,  5204,  5208,  5209,
    5213,  5214,  5218,  5222,  5223,  5226,  5228,  5232,  5233,  5237,
    5238,  5239,  5243,  5248,  5253,  5258,  5263,  5268,  5273,  5278,
    5293,  5299,  5304,  5309,  5314,  5319,  5325,  5324,  5350,  5351,
    5352,  5357,  5362,  5367,  5369,  5371,  5373,  5379,  5384,  5389,
    5395,  5401,  5407,  5416,  5434,  5451,  5474,  5488,  5489,  5490,
    5491,  5492,  5493,  5494,  5498,  5499,  5500,  5504,  5505,  5509,
    5510,  5511,  5512,  5517,  5524,  5525,  5529,  5530,  5534,  5535,
    5543,  5542,  5551,  5549,  5559,  5557,  5567,  5565,  5573,  5592,
    5598,  5600,  5604,  5608,  5609,  5613,  5618,  5617,  5643,  5644,
    5653,  5655,  5660,  5663,  5667,  5674,  5675,  5679,  5680,  5684,
    5690,  5696,  5700,  5716,  5732,  5733,  5734,  5735,  5740,  5744,
    5749,  5754,  5758,  5763,  5768,  5774,  5779,  5785,  5789,  5794,
    5799,  5817,  5819,  5821,  5834,  5836,  5841,  5846,  5858,  5863,
    5868,  5873,  5875,  5877,  5879,  5881,  5883,  5885,  5887,  5890,
    5889,  5894,  5893,  5897,  5899,  5908,  5909,  5910,  5915,  5916,
    5917,  5918,  5919,  5923,  5927,  5928,  5932,  5933,  5937,  5938,
    5939,  5940,  5941,  5945,  5946,  5947,  5948,  5949,  5953,  5958,
    5960,  5966,  5967,  5969,  5974,  5983,  5984,  5988,  5989,  5993,
    5994,  5995,  5999,  6000,  6001,  6002,  6005,  6006,  6010,  6011,
    6015,  6016,  6020,  6021,  6025,  6026,  6027,  6028,  6035,  6036,
    6042,  6048,  6054,  6060,  6061,  6074,  6080,  6086,  6092,  6101,
    6122,  6128,  6133,  6134,  6138,  6146,  6150,  6151,  6155,  6156,
    6160,  6169,  6173,  6174,  6178,  6189,  6190,  6194,  6195,  6199,
    6200,  6205,  6206,  6210,  6217,  6226,  6234,  6245,  6246,  6247,
    6248,  6249,  6250,  6255,  6263,  6264,  6268,  6270,  6274,  6286,
    6287,  6291,  6298,  6311,  6312,  6314,  6316,  6322,  6327,  6333,
    6339,  6346,  6356,  6357,  6358,  6359,  6360,  6364,  6368,  6369,
    6373,  6374,  6378,  6379,  6383,  6384,  6385,  6389,  6390,  6394,
    6398,  6411,  6423,  6424,  6428,  6429,  6433,  6434,  6438,  6439,
    6443,  6444,  6448,  6449,  6453,  6454,  6458,  6459,  6463,  6465,
    6466,  6472,  6478,  6484,  6492,  6493,  6497,  6501,  6502,  6515,
    6516,  6517,  6521,  6522,  6526,  6532,  6546,  6547,  6551,  6552,
    6556,  6557,  6565,  6564,  6603,  6602,  6616,  6628,  6627,  6646,
    6645,  6664,  6663,  6682,  6676,  6696,  6695,  6728,  6733,  6738,
    6743,  6748,  6758,  6759,  6760,  6761,  6765,  6766,  6778,  6779,
    6783,  6784,  6787,  6789,  6790,  6791,  6793,  6795,  6796,  6805,
    6806,  6810,  6819,  6817,  6831,  6845,  6844,  6858,  6856,  6870,
    6877,  6888,  6892,  6899,  6903,  6908,  6907,  6923,  6925,  6930,
    6938,  6937,  6953,  6957,  6956,  6968,  6969,  6973,  6988,  6989,
    6993,  7002,  7006,  7011,  7016,  7015,  7027,  7038,  7026,  7054,
    7063,  7067,  7076,  7085,  7091,  7097,  7106,  7115,  7134,  7155,
    7165,  7169,  7177,  7178,  7182,  7183,  7187,  7187,  7190,  7192,
    7196,  7197,  7201,  7202,  7206,  7207,  7208,  7212,  7213,  7214,
    7218,  7219,  7220,  7221,  7230,  7229,  7239,  7238,  7245,  7252,
    7260,  7259,  7267,  7276,  7293,  7296,  7303,  7307,  7314,  7318,
    7322,  7329,  7329,  7335,  7336,  7340,  7341,  7342,  7346,  7347,
    7363,  7364,  7369,  7368,  7380,  7381,  7382,  7387,  7386,  7408,
    7409,  7413,  7414,  7418,  7419,  7420,  7425,  7424,  7446,  7455,
    7454,  7481,  7482,  7486,  7487,  7491,  7492,  7493,  7494,  7495,
    7496,  7501,  7500,  7522,  7523,  7524,  7529,  7528,  7534,  7541,
    7546,  7554,  7555,  7559,  7573,  7572,  7585,  7586,  7590,  7591,
    7595,  7605,  7615,  7616,  7621,  7620,  7631,  7632,  7636,  7637,
    7641,  7651,  7662,  7661,  7669,  7669,  7678,  7679,  7684,  7685,
    7694,  7703,  7704,  7708,  7713,  7718,  7723,  7728,  7727,  7747,
    7755,  7747,  7762,  7763,  7764,  7765,  7766,  7770,  7777,  7784,
    7786,  7797,  7798,  7802,  7803,  7831,  7861,  7863,  7869,  7879,
    7880,  7881,  7896,  7903,  7929,  7935,  7941,  7942,  7943,  7944,
    7945,  7949,  7950,  7951,  7955,  7956,  7961,  8012,  8019,  8062,
    8068,  8074,  8080,  8086,  8092,  8098,  8104,  8108,  8114,  8120,
    8126,  8132,  8138,  8142,  8148,  8158,  8164,  8172,  8178,  8188,
    8194,  8203,  8213,  8219,  8229,  8235,  8244,  8248,  8254,  8260,
    8266,  8272,  8278,  8284,  8290,  8296,  8302,  8308,  8314,  8320,
    8326,  8332,  8336,  8337,  8341,  8342,  8346,  8347,  8351,  8352,
    8356,  8357,  8358,  8359,  8360,  8361,  8365,  8366,  8371,  8377,
    8381,  8388,  8395,  8402,  8409,  8416,  8421,  8427,  8434,  8441,
    8449,  8460,  8482,  8489,  8497,  8498,  8499,  8500,  8501,  8502,
    8514,  8515,  8516,  8517,  8518,  8524,  8528,  8534,  8540,  8546,
    8552,  8554,  8561,  8568,  8574,  8576,  8585,  8592,  8600,  8606,
    8613,  8619,  8633,  8640,  8656,  8662,  8668,  8676,  8682,  8688,
    8694,  8700,  8715,  8727,  8733,  8739,  8745,  8751,  8757,  8763,
    8769,  8775,  8781,  8787,  8793,  8799,  8805,  8811,  8817,  8823,
    8831,  8852,  8859,  8865,  8872,  8879,  8886,  8893,  8899,  8905,
    8912,  8918,  8925,  8931,  8937,  8943,  8949,  8955,  8973,  8979,
    8985,  8992,  8999,  9007,  9014,  9021,  9028,  9035,  9042,  9059,
    9065,  9071,  9077,  9083,  9090,  9096,  9102,  9108,  9114,  9120,
    9132,  9138,  9144,  9150,  9156,  9168,  9174,  9190,  9196,  9203,
    9210,  9217,  9224,  9231,  9235,  9255,  9254,  9327,  9369,  9371,
    9376,  9377,  9381,  9382,  9386,  9387,  9391,  9398,  9406,  9432,
    9438,  9444,  9450,  9456,  9462,  9471,  9478,  9480,  9477,  9487,
    9498,  9504,  9510,  9516,  9522,  9528,  9534,  9540,  9546,  9553,
    9552,  9571,  9570,  9585,  9595,  9603,  9619,  9620,  9625,  9630,
    9635,  9638,  9651,  9650,  9667,  9669,  9671,  9673,  9675,  9677,
    9679,  9681,  9683,  9685,  9691,  9697,  9700,  9699,  9705,  9706,
    9710,  9717,  9725,  9726,  9730,  9737,  9745,  9746,  9750,  9751,
    9755,  9763,  9774,  9775,  9784,  9795,  9796,  9802,  9803,  9823,
    9825,  9829,  9827,  9844,  9842,  9860,  9858,  9865,  9874,  9872,
    9890,  9889,  9899,  9910,  9908,  9927,  9926,  9937,  9948,  9949,
    9950,  9962,  9962,  9976, 10016, 10069, 10073, 10078, 10070, 10090,
   10110, 10118, 10110, 10127, 10126, 10149, 10166, 10149, 10173, 10177,
   10203, 10204, 10209, 10212, 10213, 10214, 10218, 10219, 10224, 10223,
   10229, 10228, 10236, 10237, 10240, 10242, 10242, 10246, 10246, 10251,
   10252, 10256, 10258, 10263, 10264, 10268, 10279, 10292, 10293, 10294,
   10295, 10296, 10297, 10298, 10299, 10300, 10301, 10302, 10303, 10307,
   10308, 10309, 10310, 10311, 10312, 10313, 10314, 10315, 10319, 10320,
   10321, 10322, 10325, 10327, 10328, 10332, 10333, 10341, 10343, 10347,
   10349, 10348, 10362, 10365, 10364, 10379, 10385, 10400, 10402, 10406,
   10408, 10413, 10414, 10434, 10459, 10463, 10464, 10468, 10481, 10483,
   10488, 10487, 10522, 10524, 10529, 10530, 10531, 10536, 10543, 10547,
   10548, 10552, 10556, 10560, 10567, 10574, 10581, 10591, 10625, 10629,
   10635, 10641, 10650, 10658, 10662, 10669, 10670, 10674, 10675, 10676,
   10680, 10681, 10682, 10683, 10684, 10685, 10689, 10690, 10691, 10692,
   10693, 10697, 10698, 10699, 10700, 10701, 10705, 10706, 10707, 10708,
   10709, 10713, 10718, 10719, 10723, 10724, 10727, 10730, 10729, 10760,
   10761, 10765, 10766, 10770, 10782, 10782, 10792, 10793, 10797, 10816,
   10849, 10848, 10861, 10869, 10860, 10871, 10883, 10895, 10894, 10912,
   10911, 10922, 10922, 10938, 10945, 10968, 10989, 11001, 11006, 11005,
   11015, 11021, 11028, 11033, 11038, 11048, 11049, 11053, 11064, 11065,
   11069, 11080, 11081, 11085, 11086, 11094, 11102, 11093, 11112, 11119,
   11111, 11129, 11137, 11138, 11146, 11150, 11151, 11162, 11163, 11167,
   11176, 11177, 11178, 11180, 11179, 11190, 11191, 11195, 11196, 11198,
   11197, 11201, 11200, 11206, 11207, 11211, 11212, 11216, 11226, 11227,
   11231, 11232, 11237, 11236, 11250, 11251, 11255, 11260, 11268, 11269,
   11277, 11279, 11279, 11287, 11295, 11286, 11317, 11318, 11322, 11330,
   11331, 11335, 11345, 11346, 11353, 11352, 11368, 11367, 11379, 11378,
   11390, 11389, 11403, 11404, 11408, 11421, 11437, 11438, 11442, 11443,
   11447, 11448, 11449, 11454, 11453, 11475, 11477, 11480, 11482, 11485,
   11486, 11489, 11493, 11497, 11501, 11505, 11509, 11513, 11517, 11521,
   11529, 11532, 11542, 11541, 11554, 11561, 11569, 11577, 11585, 11593,
   11601, 11608, 11610, 11612, 11621, 11625, 11630, 11629, 11635, 11634,
   11639, 11648, 11655, 11660, 11665, 11670, 11672, 11674, 11676, 11678,
   11680, 11687, 11695, 11697, 11705, 11712, 11719, 11729, 11736, 11742,
   11751, 11759, 11763, 11768, 11776, 11781, 11788, 11795, 11802, 11809,
   11816, 11823, 11829, 11836, 11843, 11848, 11853, 11858, 11869, 11871,
   11873, 11878, 11879, 11882, 11884, 11888, 11889, 11893, 11894, 11898,
   11899, 11903, 11904, 11908, 11909, 11912, 11914, 11921, 11932, 11931,
   11944, 11943, 11953, 11954, 11958, 11959, 11960, 11964, 11965, 11966,
   11981, 11980, 11993, 12002, 11992, 12004, 12008, 12009, 12023, 12024,
   12029, 12031, 12033, 12035, 12037, 12039, 12050, 12052, 12054, 12056,
   12062, 12064, 12075, 12077, 12079, 12081, 12083, 12085, 12087, 12092,
   12093, 12097, 12098, 12102, 12101, 12111, 12112, 12116, 12116, 12119,
   12120, 12124, 12125, 12130, 12129, 12140, 12144, 12148, 12161, 12160,
   12174, 12175, 12176, 12179, 12180, 12181, 12185, 12190, 12200, 12212,
   12224, 12234, 12244, 12211, 12252, 12253, 12257, 12258, 12262, 12263,
   12271, 12275, 12276, 12277, 12280, 12282, 12286, 12287, 12291, 12296,
   12303, 12308, 12315, 12317, 12321, 12322, 12326, 12331, 12339, 12340,
   12343, 12345, 12353, 12355, 12359, 12360, 12361, 12365, 12367, 12372,
   12373, 12382, 12383, 12387, 12388, 12392, 12405, 12429, 12441, 12452,
   12471, 12479, 12491, 12506, 12527, 12528, 12529, 12537, 12538, 12539,
   12546, 12552, 12558, 12564, 12570, 12599, 12627, 12628, 12629, 12633,
   12643, 12653, 12659, 12668, 12683, 12684, 12688, 12697, 12713, 12717,
   12764, 12768, 12786, 12790, 12869, 12894, 12925, 12926, 12942, 12952,
   12956, 12962, 12968, 12978, 12984, 12993, 13003, 13004, 13034, 13050,
   13066, 13083, 13084, 13095, 13096, 13107, 13108, 13109, 13113, 13130,
   13152, 13167, 13168, 13169, 13170, 13171, 13172, 13173, 13174, 13175,
   13176, 13177, 13178, 13179, 13180, 13181, 13182, 13183, 13184, 13185,
   13186, 13187, 13188, 13189, 13190, 13191, 13192, 13193, 13194, 13195,
   13196, 13197, 13198, 13199, 13200, 13201, 13202, 13203, 13204, 13205,
   13206, 13207, 13208, 13209, 13210, 13211, 13212, 13213, 13214, 13215,
   13216, 13217, 13218, 13219, 13220, 13221, 13222, 13223, 13224, 13225,
   13235, 13236, 13237, 13238, 13239, 13240, 13241, 13242, 13243, 13244,
   13245, 13246, 13247, 13248, 13249, 13250, 13251, 13252, 13253, 13254,
   13255, 13256, 13257, 13258, 13259, 13260, 13261, 13262, 13263, 13264,
   13265, 13266, 13267, 13268, 13269, 13270, 13271, 13272, 13273, 13274,
   13275, 13276, 13277, 13278, 13279, 13280, 13281, 13282, 13283, 13284,
   13285, 13286, 13287, 13288, 13289, 13290, 13291, 13292, 13293, 13294,
   13295, 13296, 13297, 13298, 13299, 13300, 13301, 13302, 13303, 13304,
   13305, 13306, 13307, 13308, 13309, 13310, 13311, 13312, 13313, 13314,
   13315, 13316, 13317, 13318, 13319, 13320, 13321, 13322, 13323, 13324,
   13325, 13326, 13327, 13328, 13329, 13330, 13331, 13332, 13333, 13334,
   13335, 13336, 13337, 13338, 13339, 13340, 13341, 13342, 13343, 13344,
   13345, 13346, 13347, 13348, 13349, 13350, 13351, 13352, 13353, 13354,
   13355, 13356, 13357, 13358, 13359, 13360, 13361, 13362, 13363, 13364,
   13365, 13366, 13367, 13368, 13369, 13370, 13371, 13372, 13373, 13374,
   13375, 13376, 13377, 13378, 13379, 13380, 13381, 13382, 13383, 13384,
   13385, 13386, 13387, 13388, 13389, 13390, 13391, 13392, 13393, 13394,
   13395, 13396, 13397, 13398, 13399, 13400, 13401, 13402, 13403, 13404,
   13405, 13406, 13407, 13408, 13409, 13410, 13411, 13412, 13413, 13414,
   13415, 13416, 13417, 13418, 13419, 13420, 13421, 13422, 13423, 13424,
   13425, 13426, 13427, 13428, 13429, 13430, 13431, 13432, 13433, 13434,
   13435, 13436, 13437, 13438, 13439, 13440, 13441, 13442, 13443, 13444,
   13445, 13446, 13447, 13448, 13449, 13450, 13451, 13452, 13453, 13454,
   13455, 13456, 13457, 13458, 13459, 13460, 13461, 13462, 13463, 13464,
   13465, 13466, 13467, 13468, 13469, 13470, 13471, 13472, 13473, 13474,
   13475, 13476, 13477, 13478, 13479, 13480, 13481, 13482, 13483, 13484,
   13485, 13486, 13487, 13488, 13489, 13490, 13491, 13492, 13493, 13494,
   13495, 13496, 13497, 13498, 13499, 13500, 13501, 13502, 13503, 13504,
   13505, 13506, 13507, 13508, 13509, 13510, 13511, 13512, 13513, 13514,
   13515, 13516, 13517, 13518, 13519, 13520, 13521, 13522, 13523, 13524,
   13525, 13526, 13527, 13528, 13540, 13539, 13558, 13557, 13564, 13563,
   13573, 13572, 13583, 13582, 13588, 13596, 13598, 13603, 13603, 13612,
   13611, 13625, 13624, 13629, 13633, 13634, 13635, 13639, 13640, 13641,
   13642, 13646, 13647, 13648, 13649, 13654, 13679, 13707, 13718, 13731,
   13745, 13760, 13779, 13807, 13820, 13847, 13890, 13904, 13905, 13906,
   13907, 13911, 13929, 13947, 13948, 13952, 13953, 13954, 13955, 13959,
   13960, 13969, 13981, 13982, 13983, 13989, 13995, 14007, 14006, 14022,
   14023, 14027, 14028, 14032, 14047, 14048, 14049, 14054, 14055, 14060,
   14059, 14079, 14091, 14104, 14103, 14137, 14138, 14142, 14143, 14147,
   14148, 14149, 14150, 14152, 14151, 14164, 14165, 14166, 14167, 14168,
   14174, 14179, 14185, 14196, 14207, 14211, 14221, 14226, 14233, 14245,
   14257, 14266, 14268, 14272, 14273, 14280, 14282, 14286, 14287, 14292,
   14291, 14295, 14294, 14298, 14297, 14301, 14300, 14303, 14304, 14305,
   14306, 14307, 14308, 14309, 14310, 14311, 14312, 14313, 14314, 14315,
   14316, 14317, 14318, 14319, 14320, 14321, 14322, 14323, 14324, 14325,
   14326, 14327, 14328, 14332, 14333, 14337, 14338, 14342, 14352, 14362,
   14375, 14390, 14403, 14416, 14428, 14433, 14441, 14446, 14453, 14453,
   14454, 14454, 14457, 14484, 14489, 14495, 14501, 14507, 14511, 14515,
   14516, 14520, 14547, 14549, 14553, 14557, 14561, 14568, 14569, 14573,
   14574, 14578, 14579, 14583, 14584, 14590, 14596, 14602, 14612, 14611,
   14621, 14622, 14627, 14628, 14629, 14634, 14635, 14636, 14640, 14641,
   14645, 14657, 14666, 14676, 14685, 14699, 14700, 14705, 14704, 14720,
   14721, 14722, 14725, 14727, 14731, 14731, 14755, 14756, 14760, 14761,
   14762, 14766, 14770, 14777, 14780, 14778, 14794, 14801, 14822, 14839,
   14841, 14845, 14846, 14850, 14851, 14859, 14860, 14861, 14862, 14868,
   14874, 14884, 14886, 14888, 14893, 14894, 14895, 14896, 14897, 14901,
   14902, 14903, 14904, 14905, 14906, 14916, 14917, 14922, 14935, 14948,
   14950, 14952, 14957, 14962, 14964, 14966, 14972, 14973, 14975, 14981,
   14980, 14998, 14999, 15003, 15008, 15016, 15016, 15041, 15042, 15047,
   15048, 15050, 15052, 15070, 15076, 15081, 15063, 15143, 15161, 15186,
   15218, 15222, 15231, 15254, 15182, 15319, 15343, 15352, 15360, 15318,
   15381, 15385, 15389, 15393, 15397, 15401, 15408, 15415, 15422, 15432,
   15433, 15437, 15438, 15439, 15443, 15444, 15449, 15451, 15450, 15456,
   15457, 15461, 15468, 15478, 15484, 15495
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || YYTOKEN_TABLE
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "ABORT_SYM", "ACCESSIBLE_SYM", "ACTION",
  "ADD", "ADDDATE_SYM", "AFTER_SYM", "AGAINST", "AGGREGATE_SYM",
  "ALGORITHM_SYM", "ALL", "ALTER", "ALWAYS_SYM", "ANALYZE_SYM",
  "AND_AND_SYM", "AND_SYM", "ANY_SYM", "AS", "ASC", "ASCII_SYM",
  "ASENSITIVE_SYM", "AT_SYM", "AUTHORS_SYM", "AUTOEXTEND_SIZE_SYM",
  "AUTO_INC", "AVG_ROW_LENGTH", "AVG_SYM", "BACKUP_SYM", "BEFORE_SYM",
  "BEGIN_SYM", "BETWEEN_SYM", "BIGINT", "BINARY", "BINLOG_SYM", "BIN_NUM",
  "BIT_AND", "BIT_OR", "BIT_SYM", "BIT_XOR", "BLOB_SYM", "BLOCK_SYM",
  "BOOLEAN_SYM", "BOOL_SYM", "BOTH", "BTREE_SYM", "BY", "BYTE_SYM",
  "CACHE_SYM", "CALL_SYM", "CASCADE", "CASCADED", "CASE_SYM", "CAST_SYM",
  "CATALOG_NAME_SYM", "CHAIN_SYM", "CHANGE", "CHANGED", "CHARSET",
  "CHAR_SYM", "CHECKPOINT_SYM", "CHECKSUM_SYM", "CHECK_SYM", "CIPHER_SYM",
  "CLASS_ORIGIN_SYM", "CLIENT_SYM", "CLIENT_STATS_SYM", "CLOSE_SYM",
  "COALESCE", "CODE_SYM", "COLLATE_SYM", "COLLATION_SYM", "COLUMNS",
  "COLUMN_ADD_SYM", "COLUMN_CREATE_SYM", "COLUMN_DELETE_SYM",
  "COLUMN_EXISTS_SYM", "COLUMN_GET_SYM", "COLUMN_LIST_SYM", "COLUMN_SYM",
  "COLUMN_NAME_SYM", "COMMENT_SYM", "COMMITTED_SYM", "COMMIT_SYM",
  "COMPACT_SYM", "COMPLETION_SYM", "COMPRESSED_SYM", "CONCURRENT",
  "CONDITION_SYM", "CONNECTION_SYM", "CONSISTENT_SYM", "CONSTRAINT",
  "CONSTRAINT_CATALOG_SYM", "CONSTRAINT_NAME_SYM", "CONSTRAINT_SCHEMA_SYM",
  "CONTAINS_SYM", "CONTEXT_SYM", "CONTINUE_SYM", "CONTRIBUTORS_SYM",
  "CONVERT_SYM", "COUNT_SYM", "CPU_SYM", "CREATE", "CROSS", "CUBE_SYM",
  "CURDATE", "CURRENT_USER", "CURSOR_SYM", "CURSOR_NAME_SYM", "CURTIME",
  "DATABASE", "DATABASES", "DATAFILE_SYM", "DATA_SYM", "DATETIME",
  "DATE_ADD_INTERVAL", "DATE_SUB_INTERVAL", "DATE_SYM", "DAY_HOUR_SYM",
  "DAY_MICROSECOND_SYM", "DAY_MINUTE_SYM", "DAY_SECOND_SYM", "DAY_SYM",
  "DEALLOCATE_SYM", "DECIMAL_NUM", "DECIMAL_SYM", "DECLARE_SYM", "DEFAULT",
  "DEFINER_SYM", "DELAYED_SYM", "DELAY_KEY_WRITE_SYM", "DELETE_SYM",
  "DESC", "DESCRIBE", "DES_KEY_FILE", "DETERMINISTIC_SYM", "DIRECTORY_SYM",
  "DISABLE_SYM", "DISCARD", "DISK_SYM", "DISTINCT", "DIV_SYM",
  "DOUBLE_SYM", "DO_SYM", "DROP", "DUAL_SYM", "DUMPFILE", "DUPLICATE_SYM",
  "DYNAMIC_SYM", "EACH_SYM", "ELSE", "ELSEIF_SYM", "ENABLE_SYM",
  "ENCLOSED", "END", "ENDS_SYM", "END_OF_INPUT", "ENGINES_SYM",
  "ENGINE_SYM", "ENUM", "EQ", "EQUAL_SYM", "ERROR_SYM", "ERRORS",
  "ESCAPED", "ESCAPE_SYM", "EVENTS_SYM", "EVENT_SYM", "EVERY_SYM",
  "EXAMINED_SYM", "EXECUTE_SYM", "EXISTS", "EXIT_SYM", "EXPANSION_SYM",
  "EXTENDED_SYM", "EXTENT_SIZE_SYM", "EXTRACT_SYM", "FALSE_SYM",
  "FAST_SYM", "FAULTS_SYM", "FETCH_SYM", "FILE_SYM", "FIRST_SYM",
  "FIXED_SYM", "FLOAT_NUM", "FLOAT_SYM", "FLUSH_SYM", "FORCE_SYM",
  "FOREIGN", "FOR_SYM", "FOUND_SYM", "FROM", "FULL", "FULLTEXT_SYM",
  "FUNCTION_SYM", "GE", "GENERAL", "GENERATED_SYM", "GEOMETRYCOLLECTION",
  "GEOMETRY_SYM", "GET_FORMAT", "GLOBAL_SYM", "GRANT", "GRANTS",
  "GROUP_SYM", "GROUP_CONCAT_SYM", "GT_SYM", "HANDLER_SYM", "HARD_SYM",
  "HASH_SYM", "HAVING", "HELP_SYM", "HEX_NUM", "HIGH_PRIORITY", "HOST_SYM",
  "HOSTS_SYM", "HOUR_MICROSECOND_SYM", "HOUR_MINUTE_SYM",
  "HOUR_SECOND_SYM", "HOUR_SYM", "IDENT", "IDENTIFIED_SYM", "IDENT_QUOTED",
  "IF", "IGNORE_SYM", "IGNORE_SERVER_IDS_SYM", "IMPORT", "INDEXES",
  "INDEX_SYM", "INDEX_STATS_SYM", "INFILE", "INITIAL_SIZE_SYM",
  "INNER_SYM", "INOUT_SYM", "INSENSITIVE_SYM", "INSERT", "INSERT_METHOD",
  "INSTALL_SYM", "INTERVAL_SYM", "INTO", "INT_SYM", "INVOKER_SYM",
  "IN_SYM", "IO_SYM", "IPC_SYM", "IS", "ISOLATION", "ISSUER_SYM",
  "ITERATE_SYM", "JOIN_SYM", "KEYS", "KEY_BLOCK_SIZE", "KEY_SYM",
  "KILL_SYM", "LANGUAGE_SYM", "LAST_SYM", "LAST_VALUE", "LE", "LEADING",
  "LEAVES", "LEAVE_SYM", "LEFT", "LESS_SYM", "LEVEL_SYM", "LEX_HOSTNAME",
  "LIKE", "LIMIT", "LINEAR_SYM", "LINES", "LINESTRING", "LIST_SYM", "LOAD",
  "LOCAL_SYM", "LOCATOR_SYM", "LOCKS_SYM", "LOCK_SYM", "LOGFILE_SYM",
  "LOGS_SYM", "LONGBLOB", "LONGTEXT", "LONG_NUM", "LONG_SYM", "LOOP_SYM",
  "LOW_PRIORITY", "LT", "MASTER_CONNECT_RETRY_SYM", "MASTER_HOST_SYM",
  "MASTER_LOG_FILE_SYM", "MASTER_LOG_POS_SYM", "MASTER_PASSWORD_SYM",
  "MASTER_PORT_SYM", "MASTER_SERVER_ID_SYM", "MASTER_SSL_CAPATH_SYM",
  "MASTER_SSL_CA_SYM", "MASTER_SSL_CERT_SYM", "MASTER_SSL_CIPHER_SYM",
  "MASTER_SSL_CRL_SYM", "MASTER_SSL_CRLPATH_SYM", "MASTER_SSL_KEY_SYM",
  "MASTER_SSL_SYM", "MASTER_SSL_VERIFY_SERVER_CERT_SYM", "MASTER_SYM",
  "MASTER_USER_SYM", "MASTER_HEARTBEAT_PERIOD_SYM", "MATCH",
  "MAX_CONNECTIONS_PER_HOUR", "MAX_QUERIES_PER_HOUR", "MAX_ROWS",
  "MAX_SIZE_SYM", "MAX_SYM", "MAX_UPDATES_PER_HOUR",
  "MAX_USER_CONNECTIONS_SYM", "MAX_VALUE_SYM", "MEDIUMBLOB", "MEDIUMINT",
  "MEDIUMTEXT", "MEDIUM_SYM", "MEMORY_SYM", "MERGE_SYM",
  "MESSAGE_TEXT_SYM", "MICROSECOND_SYM", "MIGRATE_SYM",
  "MINUTE_MICROSECOND_SYM", "MINUTE_SECOND_SYM", "MINUTE_SYM", "MIN_ROWS",
  "MIN_SYM", "MODE_SYM", "MODIFIES_SYM", "MODIFY_SYM", "MOD_SYM",
  "MONTH_SYM", "MULTILINESTRING", "MULTIPOINT", "MULTIPOLYGON",
  "MUTEX_SYM", "MYSQL_ERRNO_SYM", "NAMES_SYM", "NAME_SYM", "NATIONAL_SYM",
  "NATURAL", "NCHAR_STRING", "NCHAR_SYM", "NDBCLUSTER_SYM", "NE", "NEG",
  "NEW_SYM", "NEXT_SYM", "NODEGROUP_SYM", "NONE_SYM", "NOT2_SYM",
  "NOT_SYM", "NOW_SYM", "NO_SYM", "NO_WAIT_SYM", "NO_WRITE_TO_BINLOG",
  "NULL_SYM", "NUM", "NUMERIC_SYM", "NVARCHAR_SYM", "OFFSET_SYM",
  "OLD_PASSWORD", "ON", "ONE_SYM", "ONLY_SYM", "ONLINE_SYM", "OPEN_SYM",
  "OPTIMIZE", "OPTIONS_SYM", "OPTION", "OPTIONALLY", "OR2_SYM",
  "ORDER_SYM", "OR_OR_SYM", "OR_SYM", "OUTER", "OUTFILE", "OUT_SYM",
  "OWNER_SYM", "PACK_KEYS_SYM", "PAGE_SYM", "PAGE_CHECKSUM_SYM",
  "PARAM_MARKER", "PARSER_SYM", "PARSE_VCOL_EXPR_SYM", "PARTIAL",
  "PARTITIONING_SYM", "PARTITIONS_SYM", "PARTITION_SYM", "PASSWORD",
  "PERSISTENT_SYM", "PHASE_SYM", "PLUGINS_SYM", "PLUGIN_SYM", "POINT_SYM",
  "POLYGON", "PORT_SYM", "POSITION_SYM", "PRECISION", "PREPARE_SYM",
  "PRESERVE_SYM", "PREV_SYM", "PRIMARY_SYM", "PRIVILEGES", "PROCEDURE_SYM",
  "PROCESS", "PROCESSLIST_SYM", "PROFILE_SYM", "PROFILES_SYM", "PROXY_SYM",
  "PURGE", "QUARTER_SYM", "QUERY_SYM", "QUICK", "RANGE_SYM", "READS_SYM",
  "READ_ONLY_SYM", "READ_SYM", "READ_WRITE_SYM", "REAL", "REBUILD_SYM",
  "RECOVER_SYM", "REDOFILE_SYM", "REDO_BUFFER_SIZE_SYM", "REDUNDANT_SYM",
  "REFERENCES", "REGEXP", "RELAY", "RELAYLOG_SYM", "RELAY_LOG_FILE_SYM",
  "RELAY_LOG_POS_SYM", "RELAY_THREAD", "RELEASE_SYM", "RELOAD",
  "REMOVE_SYM", "RENAME", "REORGANIZE_SYM", "REPAIR", "REPEATABLE_SYM",
  "REPEAT_SYM", "REPLACE", "REPLICATION", "REQUIRE_SYM", "RESET_SYM",
  "RESIGNAL_SYM", "RESOURCES", "RESTORE_SYM", "RESTRICT", "RESUME_SYM",
  "RETURNS_SYM", "RETURN_SYM", "REVOKE", "RIGHT", "ROLLBACK_SYM",
  "ROLLUP_SYM", "ROUTINE_SYM", "ROWS_SYM", "ROW_FORMAT_SYM", "ROW_SYM",
  "RTREE_SYM", "SAVEPOINT_SYM", "SCHEDULE_SYM", "SCHEMA_NAME_SYM",
  "SECOND_MICROSECOND_SYM", "SECOND_SYM", "SECURITY_SYM", "SELECT_SYM",
  "SENSITIVE_SYM", "SEPARATOR_SYM", "SERIALIZABLE_SYM", "SERIAL_SYM",
  "SESSION_SYM", "SERVER_SYM", "SERVER_OPTIONS", "SET", "SET_VAR",
  "SHARE_SYM", "SHIFT_LEFT", "SHIFT_RIGHT", "SHOW", "SHUTDOWN",
  "SIGNAL_SYM", "SIGNED_SYM", "SIMPLE_SYM", "SLAVE", "SLAVES", "SLOW",
  "SMALLINT", "SNAPSHOT_SYM", "SOCKET_SYM", "SOFT_SYM", "SONAME_SYM",
  "SOUNDS_SYM", "SOURCE_SYM", "SPATIAL_SYM", "SPECIFIC_SYM",
  "SQLEXCEPTION_SYM", "SQLSTATE_SYM", "SQLWARNING_SYM", "SQL_BIG_RESULT",
  "SQL_BUFFER_RESULT", "SQL_CACHE_SYM", "SQL_CALC_FOUND_ROWS",
  "SQL_NO_CACHE_SYM", "SQL_SMALL_RESULT", "SQL_SYM", "SQL_THREAD",
  "SSL_SYM", "STARTING", "STARTS_SYM", "START_SYM", "STATUS_SYM",
  "STDDEV_SAMP_SYM", "STD_SYM", "STOP_SYM", "STORAGE_SYM", "STRAIGHT_JOIN",
  "STRING_SYM", "SUBCLASS_ORIGIN_SYM", "SUBDATE_SYM", "SUBJECT_SYM",
  "SUBPARTITIONS_SYM", "SUBPARTITION_SYM", "SUBSTRING", "SUM_SYM",
  "SUPER_SYM", "SUSPEND_SYM", "SWAPS_SYM", "SWITCHES_SYM", "SYSDATE",
  "TABLES", "TABLESPACE", "TABLE_REF_PRIORITY", "TABLE_STATS_SYM",
  "TABLE_SYM", "TABLE_CHECKSUM_SYM", "TABLE_NAME_SYM", "TEMPORARY",
  "TEMPTABLE_SYM", "TERMINATED", "TEXT_STRING", "TEXT_SYM", "THAN_SYM",
  "THEN_SYM", "TIMESTAMP", "TIMESTAMP_ADD", "TIMESTAMP_DIFF", "TIME_SYM",
  "TINYBLOB", "TINYINT", "TINYTEXT", "TO_SYM", "TRAILING",
  "TRANSACTION_SYM", "TRANSACTIONAL_SYM", "TRIGGERS_SYM", "TRIGGER_SYM",
  "TRIM", "TRUE_SYM", "TRUNCATE_SYM", "TYPES_SYM", "TYPE_SYM",
  "UDF_RETURNS_SYM", "ULONGLONG_NUM", "UNCOMMITTED_SYM", "UNDEFINED_SYM",
  "UNDERSCORE_CHARSET", "UNDOFILE_SYM", "UNDO_BUFFER_SIZE_SYM", "UNDO_SYM",
  "UNICODE_SYM", "UNINSTALL_SYM", "UNION_SYM", "UNIQUE_SYM", "UNKNOWN_SYM",
  "UNLOCK_SYM", "UNSIGNED", "UNTIL_SYM", "UPDATE_SYM", "UPGRADE_SYM",
  "USAGE", "USER", "USER_STATS_SYM", "USE_FRM", "USE_SYM", "USING",
  "UTC_DATE_SYM", "UTC_TIMESTAMP_SYM", "UTC_TIME_SYM", "VALUES",
  "VALUE_SYM", "VARBINARY", "VARCHAR", "VARIABLES", "VARIANCE_SYM",
  "VARYING", "VAR_SAMP_SYM", "VIA_SYM", "VIEW_SYM", "VIRTUAL_SYM",
  "WAIT_SYM", "WARNINGS", "WEEK_SYM", "WHEN_SYM", "WHERE", "WHILE_SYM",
  "WITH", "WITH_CUBE_SYM", "WITH_ROLLUP_SYM", "WORK_SYM", "WRAPPER_SYM",
  "WRITE_SYM", "X509_SYM", "XA_SYM", "XML_SYM", "XOR", "YEAR_MONTH_SYM",
  "YEAR_SYM", "ZEROFILL", "IMPOSSIBLE_ACTION", "'|'", "'&'", "'-'", "'+'",
  "'*'", "'/'", "'%'", "'^'", "'~'", "'('", "')'", "','", "'!'", "'{'",
  "'}'", "';'", "'@'", "'.'", "':'", "$accept", "query", "$@1",
  "opt_end_of_input", "verb_clause", "statement", "deallocate",
  "deallocate_or_drop", "prepare", "prepare_src", "execute", "$@2",
  "execute_using", "execute_var_list", "execute_var_ident", "help", "$@3",
  "change", "$@4", "master_defs", "master_def", "ignore_server_id_list",
  "ignore_server_id", "master_file_def", "optional_connection_name",
  "connection_name", "create", "$@5", "$@6", "$@7", "$@8", "$@9", "$@10",
  "server_def", "server_options_list", "server_option", "event_tail",
  "$@11", "ev_schedule_time", "$@12", "opt_ev_status", "ev_starts",
  "ev_ends", "opt_ev_on_completion", "ev_on_completion", "opt_ev_comment",
  "ev_sql_stmt", "$@13", "ev_sql_stmt_inner", "clear_privileges",
  "sp_name", "sp_a_chistics", "sp_c_chistics", "sp_chistic",
  "sp_c_chistic", "sp_suid", "call", "$@14", "opt_sp_cparam_list",
  "opt_sp_cparams", "sp_cparams", "sp_fdparam_list", "sp_fdparams",
  "sp_init_param", "sp_fdparam", "sp_pdparam_list", "sp_pdparams",
  "sp_pdparam", "sp_opt_inout", "sp_proc_stmts", "sp_proc_stmts1",
  "sp_decls", "sp_decl", "$@15", "$@16", "sp_cursor_stmt", "$@17",
  "sp_handler_type", "sp_hcond_list", "sp_hcond_element", "sp_cond",
  "sqlstate", "opt_value", "sp_hcond", "signal_stmt", "signal_value",
  "opt_signal_value", "opt_set_signal_information",
  "signal_information_item_list", "signal_allowed_expr",
  "signal_condition_information_item_name", "resignal_stmt",
  "sp_decl_idents", "sp_opt_default", "sp_proc_stmt", "sp_proc_stmt_if",
  "$@18", "sp_proc_stmt_statement", "$@19", "sp_proc_stmt_return", "$@20",
  "sp_proc_stmt_unlabeled", "$@21", "sp_proc_stmt_leave",
  "sp_proc_stmt_iterate", "sp_proc_stmt_open", "sp_proc_stmt_fetch",
  "$@22", "sp_proc_stmt_close", "sp_opt_fetch_noise", "sp_fetch_list",
  "sp_if", "$@23", "$@24", "$@25", "sp_elseifs", "case_stmt_specification",
  "simple_case_stmt", "$@26", "$@27", "searched_case_stmt", "$@28",
  "simple_when_clause_list", "searched_when_clause_list",
  "simple_when_clause", "$@29", "$@30", "searched_when_clause", "$@31",
  "$@32", "else_clause_opt", "sp_labeled_control", "$@33", "sp_opt_label",
  "sp_labeled_block", "$@34", "sp_unlabeled_block", "$@35",
  "sp_block_content", "$@36", "sp_unlabeled_control", "$@37", "$@38",
  "$@39", "trg_action_time", "trg_event", "change_tablespace_access",
  "change_tablespace_info", "tablespace_info", "opt_logfile_group_name",
  "alter_tablespace_info", "logfile_group_info",
  "alter_logfile_group_info", "add_log_file", "change_ts_option_list",
  "$@40", "change_ts_options", "change_ts_option",
  "tablespace_option_list", "tablespace_options", "tablespace_option",
  "alter_tablespace_option_list", "alter_tablespace_options",
  "alter_tablespace_option", "logfile_group_option_list",
  "logfile_group_options", "logfile_group_option",
  "alter_logfile_group_option_list", "alter_logfile_group_options",
  "alter_logfile_group_option", "ts_datafile", "lg_undofile",
  "lg_redofile", "tablespace_name", "logfile_group_name", "ts_access_mode",
  "opt_ts_initial_size", "opt_ts_autoextend_size", "opt_ts_max_size",
  "opt_ts_extent_size", "opt_ts_undo_buffer_size",
  "opt_ts_redo_buffer_size", "opt_ts_nodegroup", "opt_ts_comment",
  "opt_ts_engine", "opt_ts_wait", "ts_wait", "size_number", "create2",
  "create2a", "$@41", "$@42", "create3", "$@43", "$@44",
  "opt_create_partitioning", "opt_partitioning", "partitioning", "$@45",
  "have_partitioning", "partition_entry", "$@46", "partition",
  "part_type_def", "$@47", "opt_linear", "part_field_list",
  "part_field_item_list", "part_field_item", "part_column_list",
  "part_func", "sub_part_func", "opt_num_parts", "opt_sub_part", "$@48",
  "$@49", "sub_part_field_list", "sub_part_field_item", "part_func_expr",
  "opt_num_subparts", "part_defs", "part_def_list", "part_definition",
  "$@50", "part_name", "opt_part_values", "$@51", "$@52", "part_func_max",
  "part_values_in", "part_value_list", "part_value_item", "$@53", "$@54",
  "part_value_item_list", "part_value_expr_item", "opt_sub_partition",
  "sub_part_list", "sub_part_definition", "$@55", "sub_name",
  "opt_part_options", "opt_part_option_list", "opt_part_option",
  "create_select", "$@56", "$@57", "opt_as", "opt_create_database_options",
  "create_database_options", "create_database_option", "opt_table_options",
  "table_options", "table_option", "opt_if_not_exists",
  "opt_create_table_options", "create_table_options_space_separated",
  "create_table_options", "create_table_option", "$@58", "default_charset",
  "default_collation", "storage_engines", "known_storage_engines",
  "row_types", "merge_insert_types", "opt_select_from", "udf_type",
  "create_field_list", "field_list", "field_list_item", "column_def",
  "key_def", "$@59", "$@60", "$@61", "$@62", "opt_check_constraint",
  "check_constraint", "opt_constraint", "constraint", "field_spec", "$@63",
  "field_def", "opt_generated_always", "vcol_opt_specifier",
  "vcol_opt_attribute", "vcol_opt_attribute_list", "vcol_attribute",
  "parse_vcol_expr", "virtual_column_func", "type", "$@64", "$@65",
  "spatial_type", "char", "nchar", "varchar", "nvarchar", "int_type",
  "real_type", "float_options", "precision", "field_options",
  "field_opt_list", "field_option", "field_length", "opt_field_length",
  "opt_precision", "opt_attribute", "opt_attribute_list", "attribute",
  "type_with_opt_collate", "now_or_signed_literal", "charset",
  "charset_name", "charset_name_or_default", "opt_load_data_charset",
  "old_or_new_charset_name", "old_or_new_charset_name_or_default",
  "collation_name", "opt_collate", "collation_name_or_default",
  "opt_default", "ascii", "unicode", "opt_binary", "opt_bin_mod",
  "opt_primary", "references", "opt_ref_list", "ref_list",
  "opt_match_clause", "opt_on_update_delete", "delete_option",
  "normal_key_type", "constraint_key_type", "key_or_index",
  "opt_key_or_index", "keys_or_index", "opt_unique", "fulltext", "spatial",
  "init_key_options", "key_alg", "normal_key_options",
  "fulltext_key_options", "spatial_key_options", "normal_key_opts",
  "spatial_key_opts", "fulltext_key_opts", "key_using_alg", "all_key_opt",
  "normal_key_opt", "spatial_key_opt", "fulltext_key_opt",
  "btree_or_rtree", "key_list", "key_part", "opt_ident", "opt_component",
  "string_list", "alter", "$@66", "$@67", "$@68", "$@69", "$@70", "$@71",
  "$@72", "ev_alter_on_schedule_completion", "opt_ev_rename_to",
  "opt_ev_sql_stmt", "ident_or_empty", "alter_commands", "$@73", "$@74",
  "$@75", "remove_partitioning", "all_or_alt_part_name_list",
  "add_partition_rule", "$@76", "add_part_extra", "reorg_partition_rule",
  "$@77", "reorg_parts_rule", "$@78", "alt_part_name_list",
  "alt_part_name_item", "alter_list", "add_column", "alter_list_item",
  "$@79", "$@80", "$@81", "opt_column", "opt_ignore", "alter_options",
  "$@82", "alter_options_part2", "alter_option_list", "alter_option",
  "opt_restrict", "opt_place", "opt_to", "slave", "$@83", "$@84", "$@85",
  "start", "opt_start_transaction_option_list",
  "start_transaction_option_list", "start_transaction_option",
  "slave_thread_opts", "$@86", "slave_thread_opt_list", "slave_thread_opt",
  "slave_until", "slave_until_opts", "checksum", "$@87",
  "opt_checksum_type", "repair", "$@88", "opt_mi_repair_type",
  "mi_repair_types", "mi_repair_type", "analyze", "$@89",
  "binlog_base64_event", "check", "$@90", "opt_mi_check_type",
  "mi_check_types", "mi_check_type", "optimize", "$@91",
  "opt_no_write_to_binlog", "rename", "$@92", "rename_list",
  "table_to_table_list", "table_to_table", "keycache", "$@93",
  "keycache_list_or_parts", "keycache_list", "assign_to_keycache",
  "assign_to_keycache_parts", "key_cache_name", "preload", "$@94",
  "preload_list_or_parts", "preload_list", "preload_keys",
  "preload_keys_parts", "adm_partition", "$@95", "cache_keys_spec", "$@96",
  "cache_key_list_or_empty", "opt_ignore_leaves", "select", "select_init",
  "select_paren", "select_paren_derived", "select_init2", "$@97",
  "select_part2", "$@98", "$@99", "select_into", "select_from",
  "select_options", "select_option_list", "select_option",
  "select_lock_type", "select_item_list", "select_item", "remember_name",
  "remember_end", "select_alias", "opt_time_precision", "optional_braces",
  "expr", "bool_pri", "predicate", "bit_expr", "or", "and", "not", "not2",
  "comp_op", "all_or_any", "opt_dyncol_type", "dyncol_type",
  "dyncall_create_element", "dyncall_create_list", "simple_expr",
  "function_call_keyword", "function_call_nonkeyword",
  "function_call_conflict", "geometry_function", "function_call_generic",
  "@100", "fulltext_options", "opt_natural_language_mode",
  "opt_query_expansion", "opt_udf_expr_list", "udf_expr_list", "udf_expr",
  "sum_expr", "$@101", "$@102", "$@103", "variable", "$@104",
  "variable_aux", "opt_distinct", "opt_gconcat_separator",
  "opt_gorder_clause", "in_sum_expr", "$@105", "cast_type", "$@106",
  "opt_expr_list", "expr_list", "ident_list_arg", "ident_list", "opt_expr",
  "opt_else", "when_list", "table_ref", "join_table_list", "esc_table_ref",
  "derived_table_list", "join_table", "$@107", "$@108", "$@109", "$@110",
  "$@111", "$@112", "$@113", "normal_join", "table_factor", "$@114",
  "select_derived_union", "$@115", "$@116", "select_init2_derived",
  "select_part2_derived", "$@117", "$@118", "select_derived", "$@119",
  "select_derived2", "$@120", "$@121", "get_select_lex",
  "select_derived_init", "opt_outer", "index_hint_clause",
  "index_hint_type", "index_hint_definition", "$@122", "$@123",
  "index_hints_list", "opt_index_hints_list", "$@124",
  "opt_key_definition", "$@125", "opt_key_usage_list", "key_usage_element",
  "key_usage_list", "using_list", "interval", "interval_time_stamp",
  "date_time_type", "table_alias", "opt_table_alias", "opt_all",
  "where_clause", "$@126", "having_clause", "$@127", "opt_escape",
  "group_clause", "group_list", "olap_opt", "alter_order_clause",
  "alter_order_list", "alter_order_item", "opt_order_clause",
  "order_clause", "$@128", "order_list", "order_dir",
  "opt_limit_clause_init", "opt_limit_clause", "limit_clause",
  "limit_options", "limit_option", "limit_rows_option",
  "delete_limit_clause", "int_num", "ulong_num", "real_ulong_num",
  "ulonglong_num", "real_ulonglong_num", "dec_num_error", "dec_num",
  "choice", "procedure_clause", "$@129", "procedure_list",
  "procedure_list2", "procedure_item", "select_var_list_init", "$@130",
  "select_var_list", "select_var_ident", "into", "$@131",
  "into_destination", "$@132", "$@133", "do", "$@134", "drop", "$@135",
  "$@136", "$@137", "table_list", "table_name", "table_alias_ref_list",
  "table_alias_ref", "if_exists", "opt_temporary", "insert", "$@138",
  "$@139", "replace", "$@140", "$@141", "insert_lock_option",
  "replace_lock_option", "insert2", "insert_table", "insert_field_spec",
  "$@142", "fields", "insert_values", "$@143", "$@144", "values_list",
  "ident_eq_list", "ident_eq_value", "equal", "opt_equal", "no_braces",
  "$@145", "opt_values", "values", "expr_or_default", "opt_insert_update",
  "$@146", "update", "$@147", "$@148", "update_list", "update_elem",
  "insert_update_list", "insert_update_elem", "opt_low_priority", "delete",
  "$@149", "single_multi", "$@150", "$@151", "$@152", "table_wild_list",
  "table_wild_one", "opt_wild", "opt_delete_options", "opt_delete_option",
  "truncate", "$@153", "opt_table_sym", "opt_profile_defs", "profile_defs",
  "profile_def", "opt_profile_args", "show", "$@154", "show_param",
  "$@155", "$@156", "show_engine_param", "master_or_binary", "opt_storage",
  "opt_db", "opt_full", "from_or_in", "binlog_in", "binlog_from",
  "wild_and_where", "describe", "$@157", "$@158", "describe_command",
  "opt_extended_describe", "opt_describe_column", "flush", "$@159",
  "flush_options", "$@160", "$@161", "opt_with_read_lock",
  "flush_options_list", "flush_option", "opt_table_list",
  "optional_flush_tables_arguments", "reset", "$@162", "reset_options",
  "reset_option", "$@163", "slave_reset_options", "purge", "$@164",
  "purge_options", "purge_option", "kill", "$@165", "kill_type",
  "kill_option", "kill_expr", "use", "load", "$@166", "$@167", "$@168",
  "$@169", "data_or_xml", "opt_local", "load_data_lock", "opt_duplicate",
  "opt_field_term", "field_term_list", "field_term", "opt_line_term",
  "line_term_list", "line_term", "opt_xml_rows_identified_by",
  "opt_ignore_lines", "lines_or_rows", "opt_field_or_var_spec",
  "fields_or_vars", "field_or_var", "opt_load_data_set_spec",
  "load_data_set_list", "load_data_set_elem", "text_literal",
  "text_string", "param_marker", "signed_literal", "literal",
  "NUM_literal", "insert_ident", "table_wild", "order_ident",
  "simple_ident", "simple_ident_nospvar", "simple_ident_q", "field_ident",
  "table_ident", "table_ident_opt_wild", "table_ident_nodb", "IDENT_sys",
  "TEXT_STRING_sys", "TEXT_STRING_literal", "TEXT_STRING_filesystem",
  "ident", "label_ident", "ident_or_text", "user", "keyword", "keyword_sp",
  "set", "$@170", "start_option_value_list", "$@171", "$@172", "$@173",
  "start_option_value_list_following_option_type", "$@174",
  "option_value_list_continued", "option_value_list", "$@175", "$@176",
  "option_value", "$@177", "option_type", "opt_var_type",
  "opt_var_ident_type", "option_value_following_option_type",
  "option_value_no_option_type", "internal_variable_name",
  "transaction_characteristics", "transaction_access_mode",
  "isolation_level", "transaction_access_mode_types", "isolation_types",
  "text_or_password", "set_expr_or_default", "lock", "$@178",
  "table_or_tables", "table_lock_list", "table_lock", "lock_option",
  "unlock", "$@179", "handler", "$@180", "handler_read_or_scan",
  "handler_scan_function", "handler_rkey_function", "$@181",
  "handler_rkey_mode", "revoke", "revoke_command", "grant",
  "grant_command", "opt_table", "grant_privileges", "opt_privileges",
  "object_privilege_list", "object_privilege", "$@182", "$@183", "$@184",
  "$@185", "opt_and", "require_list", "require_list_element",
  "grant_ident", "user_list", "grant_list", "via_or_with", "using_or_as",
  "grant_user", "opt_column_list", "column_list", "column_list_id",
  "require_clause", "grant_options", "opt_grant_option",
  "grant_option_list", "grant_option", "begin", "$@186", "opt_work",
  "opt_chain", "opt_release", "opt_savepoint", "commit", "rollback",
  "savepoint", "release", "union_clause", "union_list", "$@187",
  "union_opt", "opt_union_order_or_limit", "union_order_or_limit", "$@188",
  "order_or_limit", "union_option", "query_specification",
  "query_expression_body", "$@189", "subselect", "subselect_start",
  "subselect_end", "opt_query_expression_options",
  "query_expression_option_list", "query_expression_option",
  "view_or_trigger_or_sp_or_event", "definer_tail", "no_definer_tail",
  "definer_opt", "no_definer", "definer", "view_replace_or_algorithm",
  "view_replace", "view_algorithm", "view_suid", "view_tail", "$@190",
  "view_list_opt", "view_list", "view_select", "$@191", "view_select_aux",
  "view_check_option", "trigger_tail", "$@192", "$@193", "$@194",
  "udf_tail", "sf_tail", "$@195", "$@196", "$@197", "$@198", "$@199",
  "sp_tail", "$@200", "$@201", "$@202", "$@203", "xa", "xid",
  "begin_or_start", "opt_join_or_resume", "opt_one_phase", "opt_suspend",
  "$@204", "opt_migrate", "install", "uninstall", "keep_gcc_happy", 0
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,   636,   637,   638,   639,   640,   641,   642,   643,   644,
     645,   646,   647,   648,   649,   650,   651,   652,   653,   654,
     655,   656,   657,   658,   659,   660,   661,   662,   663,   664,
     665,   666,   667,   668,   669,   670,   671,   672,   673,   674,
     675,   676,   677,   678,   679,   680,   681,   682,   683,   684,
     685,   686,   687,   688,   689,   690,   691,   692,   693,   694,
     695,   696,   697,   698,   699,   700,   701,   702,   703,   704,
     705,   706,   707,   708,   709,   710,   711,   712,   713,   714,
     715,   716,   717,   718,   719,   720,   721,   722,   723,   724,
     725,   726,   727,   728,   729,   730,   731,   732,   733,   734,
     735,   736,   737,   738,   739,   740,   741,   742,   743,   744,
     745,   746,   747,   748,   749,   750,   751,   752,   753,   754,
     755,   756,   757,   758,   759,   760,   761,   762,   763,   764,
     765,   766,   767,   768,   769,   770,   771,   772,   773,   774,
     775,   776,   777,   778,   779,   780,   781,   782,   783,   784,
     785,   786,   787,   788,   789,   790,   791,   792,   793,   794,
     795,   796,   797,   798,   799,   800,   801,   802,   803,   804,
     805,   806,   807,   808,   809,   810,   811,   812,   813,   814,
     815,   816,   817,   818,   819,   820,   821,   822,   823,   824,
     825,   826,   827,   828,   829,   830,   831,   832,   833,   834,
     835,   836,   837,   838,   839,   840,   841,   842,   843,   844,
     845,   846,   847,   848,   849,   850,   851,   852,   853,   854,
     855,   856,   857,   858,   859,   860,   861,   862,   863,   864,
     865,   866,   867,   868,   869,   870,   871,   872,   873,   874,
     875,   124,    38,    45,    43,    42,    47,    37,    94,   126,
      40,    41,    44,    33,   123,   125,    59,    64,    46,    58
};
# endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint16 yyr1[] =
{
       0,   640,   641,   642,   641,   641,   643,   643,   644,   644,
     645,   645,   645,   645,   645,   645,   645,   645,   645,   645,
     645,   645,   645,   645,   645,   645,   645,   645,   645,   645,
     645,   645,   645,   645,   645,   645,   645,   645,   645,   645,
     645,   645,   645,   645,   645,   645,   645,   645,   645,   645,
     645,   645,   645,   645,   645,   645,   645,   645,   645,   645,
     645,   645,   645,   646,   647,   647,   648,   649,   649,   651,
     650,   652,   652,   653,   653,   654,   656,   655,   658,   657,
     659,   659,   660,   660,   660,   660,   660,   660,   660,   660,
     660,   660,   660,   660,   660,   660,   660,   660,   660,   661,
     661,   661,   662,   663,   663,   663,   663,   664,   664,   665,
     667,   666,   668,   666,   669,   666,   670,   666,   671,   666,
     672,   666,   666,   666,   666,   666,   673,   674,   674,   675,
     675,   675,   675,   675,   675,   675,   677,   676,   679,   678,
     678,   680,   680,   680,   680,   681,   681,   682,   682,   683,
     683,   684,   684,   685,   685,   687,   686,   688,   688,   688,
     688,   688,   688,   688,   688,   688,   688,   688,   688,   688,
     689,   690,   690,   691,   691,   692,   692,   693,   693,   693,
     693,   693,   693,   693,   694,   694,   694,   695,   695,   697,
     696,   698,   698,   699,   699,   700,   700,   701,   701,   702,
     702,   703,   704,   705,   705,   706,   706,   707,   708,   708,
     708,   708,   709,   709,   710,   710,   711,   711,   713,   712,
     712,   714,   712,   712,   716,   715,   717,   717,   718,   718,
     719,   720,   720,   721,   722,   722,   723,   723,   723,   723,
     723,   724,   725,   725,   726,   726,   727,   727,   728,   728,
     729,   729,   729,   730,   730,   730,   730,   730,   730,   730,
     730,   730,   730,   730,   730,   731,   732,   732,   733,   733,
     734,   734,   734,   734,   734,   734,   734,   734,   734,   734,
     734,   734,   734,   736,   735,   738,   737,   740,   739,   742,
     741,   743,   744,   745,   747,   746,   748,   749,   749,   749,
     750,   750,   752,   753,   754,   751,   755,   755,   755,   756,
     756,   758,   759,   757,   761,   760,   762,   762,   763,   763,
     765,   766,   764,   768,   769,   767,   770,   770,   772,   771,
     773,   773,   775,   774,   777,   776,   779,   778,   780,   781,
     782,   780,   783,   780,   784,   784,   785,   785,   785,   786,
     787,   788,   789,   789,   790,   790,   791,   792,   793,   793,
     795,   794,   796,   796,   796,   797,   797,   797,   798,   799,
     799,   799,   800,   800,   800,   800,   800,   800,   800,   800,
     801,   802,   802,   802,   803,   803,   803,   803,   803,   804,
     805,   805,   805,   806,   806,   806,   806,   806,   806,   806,
     807,   808,   808,   808,   809,   809,   809,   810,   811,   812,
     813,   814,   815,   815,   815,   816,   817,   818,   819,   820,
     821,   822,   823,   824,   825,   825,   826,   826,   827,   827,
     828,   828,   828,   828,   830,   829,   831,   829,   832,   833,
     832,   834,   832,   835,   836,   836,   838,   837,   839,   841,
     840,   842,   843,   844,   843,   843,   843,   843,   843,   845,
     845,   846,   846,   847,   847,   848,   849,   850,   851,   852,
     852,   853,   854,   853,   855,   853,   856,   856,   857,   858,
     859,   859,   860,   860,   861,   861,   863,   862,   864,   865,
     866,   865,   867,   865,   868,   868,   869,   869,   870,   870,
     872,   873,   871,   874,   874,   875,   875,   876,   876,   877,
     877,   879,   878,   880,   881,   881,   882,   882,   883,   883,
     883,   883,   883,   883,   883,   883,   883,   885,   886,   884,
     887,   887,   888,   888,   889,   889,   890,   890,   891,   891,
     892,   892,   893,   894,   894,   895,   895,   896,   896,   897,
     897,   897,   898,   898,   898,   898,   898,   898,   898,   898,
     898,   898,   898,   898,   898,   898,   899,   898,   898,   898,
     898,   898,   898,   898,   898,   898,   898,   898,   898,   898,
     898,   898,   898,   900,   901,   902,   903,   904,   904,   904,
     904,   904,   904,   904,   905,   905,   905,   906,   906,   907,
     907,   907,   907,   908,   909,   909,   910,   910,   911,   911,
     913,   912,   914,   912,   915,   912,   916,   912,   912,   912,
     917,   917,   918,   919,   919,   920,   922,   921,   923,   923,
     924,   924,   925,   925,   925,   926,   926,   927,   927,   928,
     928,   928,   929,   930,   931,   931,   931,   931,   931,   931,
     931,   931,   931,   931,   931,   931,   931,   931,   931,   931,
     931,   931,   931,   931,   931,   931,   931,   931,   931,   931,
     931,   931,   931,   931,   931,   931,   931,   931,   931,   932,
     931,   933,   931,   931,   931,   934,   934,   934,   934,   934,
     934,   934,   934,   935,   936,   936,   937,   937,   938,   938,
     938,   938,   938,   939,   939,   939,   939,   939,   940,   940,
     940,   941,   941,   941,   942,   943,   943,   944,   944,   945,
     945,   945,   946,   946,   946,   946,   947,   947,   948,   948,
     949,   949,   950,   950,   951,   951,   951,   951,   951,   951,
     951,   951,   951,   951,   951,   951,   951,   951,   951,   952,
     953,   953,   954,   954,   955,   955,   956,   956,   957,   957,
     958,   958,   959,   959,   960,   961,   961,   962,   962,   963,
     963,   964,   964,   964,   965,   965,   965,   966,   966,   966,
     966,   966,   966,   966,   967,   967,   968,   968,   969,   970,
     970,   971,   971,   972,   972,   972,   972,   973,   973,   973,
     973,   973,   974,   974,   974,   974,   974,   975,   976,   976,
     977,   977,   978,   978,   979,   979,   979,   980,   980,   981,
     982,   983,   984,   984,   985,   985,   986,   986,   987,   987,
     988,   988,   989,   989,   990,   990,   991,   991,   992,   992,
     992,   992,   992,   992,   993,   993,   994,   995,   995,   996,
     996,   996,   997,   997,   998,   998,   999,   999,  1000,  1000,
    1001,  1001,  1003,  1002,  1004,  1002,  1002,  1005,  1002,  1006,
    1002,  1007,  1002,  1008,  1002,  1009,  1002,  1002,  1002,  1002,
    1002,  1002,  1010,  1010,  1010,  1010,  1011,  1011,  1012,  1012,
    1013,  1013,  1014,  1014,  1014,  1014,  1014,  1014,  1014,  1014,
    1014,  1014,  1015,  1014,  1014,  1016,  1014,  1017,  1014,  1014,
    1014,  1014,  1018,  1019,  1019,  1021,  1020,  1022,  1022,  1022,
    1024,  1023,  1025,  1026,  1025,  1027,  1027,  1028,  1029,  1029,
    1030,  1031,  1031,  1031,  1032,  1031,  1033,  1034,  1031,  1031,
    1031,  1031,  1031,  1031,  1031,  1031,  1031,  1031,  1031,  1031,
    1031,  1031,  1035,  1035,  1036,  1036,  1038,  1037,  1039,  1039,
    1040,  1040,  1041,  1041,  1042,  1042,  1042,  1043,  1043,  1043,
    1044,  1044,  1044,  1044,  1046,  1045,  1047,  1045,  1045,  1045,
    1048,  1045,  1045,  1049,  1050,  1050,  1051,  1051,  1052,  1052,
    1052,  1054,  1053,  1055,  1055,  1056,  1056,  1056,  1057,  1057,
    1058,  1058,  1060,  1059,  1061,  1061,  1061,  1063,  1062,  1064,
    1064,  1065,  1065,  1066,  1066,  1066,  1068,  1067,  1069,  1071,
    1070,  1072,  1072,  1073,  1073,  1074,  1074,  1074,  1074,  1074,
    1074,  1076,  1075,  1077,  1077,  1077,  1079,  1078,  1078,  1080,
    1080,  1081,  1081,  1082,  1084,  1083,  1085,  1085,  1086,  1086,
    1087,  1088,  1089,  1089,  1091,  1090,  1092,  1092,  1093,  1093,
    1094,  1095,  1097,  1096,  1099,  1098,  1100,  1100,  1101,  1101,
    1102,  1103,  1103,  1104,  1104,  1105,  1105,  1107,  1106,  1109,
    1110,  1108,  1111,  1111,  1111,  1111,  1111,  1112,  1112,  1113,
    1113,  1114,  1114,  1115,  1115,  1115,  1116,  1116,  1116,  1117,
    1117,  1117,  1118,  1118,  1119,  1120,  1121,  1121,  1121,  1121,
    1121,  1122,  1122,  1122,  1123,  1123,  1124,  1124,  1124,  1124,
    1124,  1124,  1124,  1124,  1124,  1124,  1124,  1125,  1125,  1125,
    1125,  1125,  1125,  1126,  1126,  1126,  1126,  1126,  1126,  1126,
    1126,  1126,  1126,  1126,  1126,  1126,  1126,  1127,  1127,  1127,
    1127,  1127,  1127,  1127,  1127,  1127,  1127,  1127,  1127,  1127,
    1127,  1127,  1128,  1128,  1129,  1129,  1130,  1130,  1131,  1131,
    1132,  1132,  1132,  1132,  1132,  1132,  1133,  1133,  1134,  1134,
    1135,  1135,  1135,  1135,  1135,  1135,  1135,  1135,  1135,  1135,
    1135,  1136,  1137,  1137,  1138,  1138,  1138,  1138,  1138,  1138,
    1138,  1138,  1138,  1138,  1138,  1138,  1138,  1138,  1138,  1138,
    1138,  1138,  1138,  1138,  1138,  1138,  1138,  1138,  1138,  1138,
    1138,  1138,  1138,  1138,  1139,  1139,  1139,  1139,  1139,  1139,
    1139,  1139,  1139,  1139,  1139,  1139,  1139,  1139,  1139,  1139,
    1139,  1139,  1139,  1139,  1139,  1139,  1139,  1139,  1139,  1139,
    1139,  1140,  1140,  1140,  1140,  1140,  1140,  1140,  1140,  1140,
    1140,  1140,  1140,  1140,  1140,  1140,  1140,  1140,  1140,  1140,
    1140,  1140,  1140,  1140,  1140,  1140,  1140,  1140,  1140,  1141,
    1141,  1141,  1141,  1141,  1141,  1141,  1141,  1141,  1141,  1141,
    1141,  1141,  1141,  1141,  1141,  1141,  1141,  1142,  1142,  1142,
    1142,  1142,  1142,  1142,  1142,  1144,  1143,  1143,  1145,  1145,
    1146,  1146,  1147,  1147,  1148,  1148,  1149,  1149,  1150,  1151,
    1151,  1151,  1151,  1151,  1151,  1151,  1152,  1153,  1151,  1151,
    1151,  1151,  1151,  1151,  1151,  1151,  1151,  1151,  1151,  1154,
    1151,  1156,  1155,  1157,  1157,  1157,  1158,  1158,  1159,  1159,
    1160,  1160,  1162,  1161,  1163,  1163,  1163,  1163,  1163,  1163,
    1163,  1163,  1163,  1163,  1163,  1163,  1164,  1163,  1165,  1165,
    1166,  1166,  1167,  1167,  1168,  1168,  1169,  1169,  1170,  1170,
    1171,  1171,  1172,  1172,  1173,  1174,  1174,  1175,  1175,  1176,
    1176,  1177,  1176,  1178,  1176,  1179,  1176,  1176,  1180,  1176,
    1181,  1176,  1176,  1182,  1176,  1183,  1176,  1176,  1184,  1184,
    1184,  1186,  1185,  1185,  1185,  1187,  1188,  1189,  1187,  1190,
    1192,  1193,  1191,  1195,  1194,  1197,  1198,  1196,  1199,  1200,
    1201,  1201,  1202,  1202,  1202,  1202,  1203,  1203,  1205,  1204,
    1206,  1204,  1207,  1207,  1208,  1209,  1208,  1211,  1210,  1212,
    1212,  1213,  1213,  1214,  1214,  1215,  1215,  1216,  1216,  1216,
    1216,  1216,  1216,  1216,  1216,  1216,  1216,  1216,  1216,  1217,
    1217,  1217,  1217,  1217,  1217,  1217,  1217,  1217,  1218,  1218,
    1218,  1218,  1219,  1219,  1219,  1220,  1220,  1221,  1221,  1222,
    1223,  1222,  1224,  1225,  1224,  1226,  1226,  1227,  1227,  1228,
    1228,  1229,  1229,  1229,  1230,  1231,  1231,  1232,  1233,  1233,
    1235,  1234,  1236,  1236,  1237,  1237,  1237,  1238,  1238,  1239,
    1239,  1240,  1240,  1240,  1241,  1241,  1241,  1242,  1242,  1242,
    1242,  1242,  1243,  1244,  1244,  1244,  1244,  1245,  1245,  1245,
    1246,  1246,  1246,  1246,  1246,  1246,  1247,  1247,  1247,  1247,
    1247,  1248,  1248,  1248,  1248,  1248,  1249,  1249,  1249,  1249,
    1249,  1250,  1251,  1251,  1252,  1252,  1253,  1254,  1253,  1255,
    1255,  1256,  1256,  1257,  1259,  1258,  1260,  1260,  1261,  1261,
    1263,  1262,  1265,  1266,  1264,  1264,  1264,  1268,  1267,  1270,
    1269,  1271,  1269,  1269,  1269,  1269,  1269,  1269,  1272,  1269,
    1269,  1269,  1269,  1269,  1269,  1273,  1273,  1274,  1275,  1275,
    1276,  1277,  1277,  1278,  1278,  1280,  1281,  1279,  1283,  1284,
    1282,  1285,  1285,  1285,  1285,  1286,  1286,  1287,  1287,  1288,
    1289,  1289,  1289,  1290,  1289,  1291,  1291,  1292,  1292,  1293,
    1292,  1294,  1292,  1295,  1295,  1296,  1296,  1297,  1298,  1298,
    1299,  1299,  1301,  1300,  1302,  1302,  1303,  1303,  1304,  1304,
    1305,  1306,  1305,  1308,  1309,  1307,  1310,  1310,  1311,  1312,
    1312,  1313,  1314,  1314,  1316,  1315,  1318,  1317,  1319,  1317,
    1320,  1317,  1321,  1321,  1322,  1322,  1323,  1323,  1324,  1324,
    1325,  1325,  1325,  1327,  1326,  1328,  1328,  1329,  1329,  1330,
    1330,  1331,  1331,  1331,  1331,  1331,  1331,  1331,  1331,  1331,
    1332,  1332,  1334,  1333,  1335,  1335,  1335,  1335,  1335,  1335,
    1335,  1335,  1335,  1335,  1335,  1335,  1336,  1335,  1337,  1335,
    1335,  1335,  1335,  1335,  1335,  1335,  1335,  1335,  1335,  1335,
    1335,  1335,  1335,  1335,  1335,  1335,  1335,  1335,  1335,  1335,
    1335,  1335,  1335,  1335,  1335,  1335,  1335,  1335,  1335,  1335,
    1335,  1335,  1335,  1335,  1335,  1335,  1335,  1335,  1338,  1338,
    1338,  1339,  1339,  1340,  1340,  1341,  1341,  1342,  1342,  1343,
    1343,  1344,  1344,  1345,  1345,  1346,  1346,  1346,  1348,  1347,
    1349,  1347,  1350,  1350,  1351,  1351,  1351,  1352,  1352,  1352,
    1354,  1353,  1356,  1357,  1355,  1355,  1358,  1358,  1359,  1359,
    1360,  1360,  1360,  1360,  1360,  1360,  1360,  1360,  1360,  1360,
    1360,  1360,  1360,  1360,  1360,  1360,  1360,  1360,  1360,  1361,
    1361,  1362,  1362,  1364,  1363,  1365,  1365,  1367,  1366,  1366,
    1366,  1368,  1368,  1370,  1369,  1371,  1372,  1372,  1374,  1373,
    1375,  1375,  1375,  1376,  1376,  1376,  1377,  1377,  1378,  1380,
    1381,  1382,  1383,  1379,  1384,  1384,  1385,  1385,  1386,  1386,
    1386,  1387,  1387,  1387,  1388,  1388,  1389,  1389,  1390,  1390,
    1390,  1390,  1391,  1391,  1392,  1392,  1393,  1393,  1394,  1394,
    1395,  1395,  1396,  1396,  1397,  1397,  1397,  1398,  1398,  1399,
    1399,  1400,  1400,  1401,  1401,  1402,  1403,  1403,  1403,  1403,
    1404,  1404,  1404,  1405,  1406,  1406,  1406,  1407,  1407,  1407,
    1407,  1407,  1407,  1407,  1407,  1407,  1407,  1407,  1407,  1408,
    1408,  1408,  1408,  1408,  1409,  1409,  1410,  1410,  1411,  1412,
    1412,  1413,  1413,  1414,  1414,  1414,  1415,  1415,  1415,  1415,
    1416,  1416,  1416,  1417,  1417,  1418,  1419,  1419,  1420,  1421,
    1422,  1423,  1423,  1424,  1424,  1425,  1425,  1425,  1426,  1426,
    1426,  1427,  1427,  1427,  1427,  1427,  1427,  1427,  1427,  1427,
    1427,  1427,  1427,  1427,  1427,  1427,  1427,  1427,  1427,  1427,
    1427,  1427,  1427,  1427,  1427,  1427,  1427,  1427,  1427,  1427,
    1427,  1427,  1427,  1427,  1427,  1427,  1427,  1427,  1427,  1427,
    1427,  1427,  1427,  1427,  1427,  1427,  1427,  1427,  1427,  1427,
    1427,  1427,  1427,  1427,  1427,  1427,  1427,  1427,  1427,  1427,
    1428,  1428,  1428,  1428,  1428,  1428,  1428,  1428,  1428,  1428,
    1428,  1428,  1428,  1428,  1428,  1428,  1428,  1428,  1428,  1428,
    1428,  1428,  1428,  1428,  1428,  1428,  1428,  1428,  1428,  1428,
    1428,  1428,  1428,  1428,  1428,  1428,  1428,  1428,  1428,  1428,
    1428,  1428,  1428,  1428,  1428,  1428,  1428,  1428,  1428,  1428,
    1428,  1428,  1428,  1428,  1428,  1428,  1428,  1428,  1428,  1428,
    1428,  1428,  1428,  1428,  1428,  1428,  1428,  1428,  1428,  1428,
    1428,  1428,  1428,  1428,  1428,  1428,  1428,  1428,  1428,  1428,
    1428,  1428,  1428,  1428,  1428,  1428,  1428,  1428,  1428,  1428,
    1428,  1428,  1428,  1428,  1428,  1428,  1428,  1428,  1428,  1428,
    1428,  1428,  1428,  1428,  1428,  1428,  1428,  1428,  1428,  1428,
    1428,  1428,  1428,  1428,  1428,  1428,  1428,  1428,  1428,  1428,
    1428,  1428,  1428,  1428,  1428,  1428,  1428,  1428,  1428,  1428,
    1428,  1428,  1428,  1428,  1428,  1428,  1428,  1428,  1428,  1428,
    1428,  1428,  1428,  1428,  1428,  1428,  1428,  1428,  1428,  1428,
    1428,  1428,  1428,  1428,  1428,  1428,  1428,  1428,  1428,  1428,
    1428,  1428,  1428,  1428,  1428,  1428,  1428,  1428,  1428,  1428,
    1428,  1428,  1428,  1428,  1428,  1428,  1428,  1428,  1428,  1428,
    1428,  1428,  1428,  1428,  1428,  1428,  1428,  1428,  1428,  1428,
    1428,  1428,  1428,  1428,  1428,  1428,  1428,  1428,  1428,  1428,
    1428,  1428,  1428,  1428,  1428,  1428,  1428,  1428,  1428,  1428,
    1428,  1428,  1428,  1428,  1428,  1428,  1428,  1428,  1428,  1428,
    1428,  1428,  1428,  1428,  1428,  1428,  1428,  1428,  1428,  1428,
    1428,  1428,  1428,  1428,  1428,  1428,  1428,  1428,  1428,  1428,
    1428,  1428,  1428,  1428,  1428,  1428,  1428,  1428,  1428,  1428,
    1428,  1428,  1428,  1428,  1428,  1428,  1428,  1428,  1428,  1428,
    1428,  1428,  1428,  1428,  1428,  1428,  1428,  1428,  1428,  1428,
    1428,  1428,  1428,  1428,  1428,  1428,  1428,  1428,  1428,  1428,
    1428,  1428,  1428,  1428,  1428,  1428,  1428,  1428,  1428,  1428,
    1428,  1428,  1428,  1428,  1430,  1429,  1432,  1431,  1433,  1431,
    1434,  1431,  1436,  1435,  1435,  1437,  1437,  1439,  1438,  1440,
    1438,  1442,  1441,  1441,  1443,  1443,  1443,  1444,  1444,  1444,
    1444,  1445,  1445,  1445,  1445,  1446,  1447,  1447,  1447,  1447,
    1447,  1447,  1447,  1447,  1448,  1448,  1448,  1449,  1449,  1449,
    1449,  1450,  1451,  1452,  1452,  1453,  1453,  1453,  1453,  1454,
    1454,  1454,  1455,  1455,  1455,  1455,  1455,  1457,  1456,  1458,
    1458,  1459,  1459,  1460,  1461,  1461,  1461,  1461,  1461,  1463,
    1462,  1464,  1464,  1465,  1464,  1466,  1466,  1467,  1467,  1468,
    1468,  1468,  1468,  1469,  1468,  1470,  1470,  1470,  1470,  1470,
    1471,  1472,  1472,  1472,  1472,  1472,  1473,  1474,  1474,  1474,
    1474,  1475,  1475,  1476,  1476,  1477,  1477,  1478,  1478,  1480,
    1479,  1481,  1479,  1482,  1479,  1483,  1479,  1479,  1479,  1479,
    1479,  1479,  1479,  1479,  1479,  1479,  1479,  1479,  1479,  1479,
    1479,  1479,  1479,  1479,  1479,  1479,  1479,  1479,  1479,  1479,
    1479,  1479,  1479,  1484,  1484,  1485,  1485,  1486,  1486,  1486,
    1487,  1487,  1487,  1487,  1488,  1488,  1489,  1489,  1490,  1490,
    1491,  1491,  1492,  1492,  1492,  1492,  1492,  1493,  1493,  1494,
    1494,  1495,  1496,  1496,  1496,  1496,  1496,  1497,  1497,  1498,
    1498,  1499,  1499,  1500,  1500,  1500,  1500,  1500,  1502,  1501,
    1503,  1503,  1504,  1504,  1504,  1505,  1505,  1505,  1506,  1506,
    1507,  1508,  1508,  1509,  1510,  1511,  1511,  1513,  1512,  1514,
    1514,  1514,  1515,  1515,  1517,  1516,  1518,  1518,  1519,  1519,
    1519,  1520,  1520,  1521,  1522,  1521,  1523,  1524,  1525,  1526,
    1526,  1527,  1527,  1528,  1528,  1528,  1528,  1528,  1528,  1528,
    1528,  1529,  1529,  1529,  1530,  1530,  1530,  1530,  1530,  1531,
    1531,  1531,  1531,  1531,  1531,  1532,  1532,  1533,  1534,  1535,
    1535,  1535,  1536,  1537,  1537,  1537,  1538,  1538,  1538,  1540,
    1539,  1541,  1541,  1542,  1542,  1544,  1543,  1545,  1545,  1546,
    1546,  1546,  1546,  1548,  1549,  1550,  1547,  1551,  1551,  1553,
    1554,  1555,  1556,  1557,  1552,  1559,  1560,  1561,  1562,  1558,
    1563,  1563,  1563,  1563,  1563,  1563,  1564,  1564,  1564,  1565,
    1565,  1566,  1566,  1566,  1567,  1567,  1568,  1569,  1568,  1570,
    1570,  1571,  1571,  1572,  1572,  1573
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     1,     0,     4,     2,     0,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     3,     1,     1,     4,     1,     2,     0,
       4,     0,     2,     3,     1,     2,     0,     3,     0,     6,
       1,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     5,     1,     0,
       1,     3,     1,     3,     3,     3,     3,     0,     1,     1,
       0,     7,     0,    12,     0,    12,     0,    12,     0,     6,
       0,     3,     4,     4,     3,     2,    10,     1,     3,     2,
       2,     2,     2,     2,     2,     2,     0,    13,     0,     6,
       2,     0,     1,     3,     1,     0,     2,     0,     2,     0,
       1,     3,     4,     0,     2,     0,     2,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       0,     3,     1,     0,     2,     0,     2,     2,     2,     2,
       2,     3,     3,     1,     1,     1,     2,     3,     3,     0,
       4,     0,     3,     0,     1,     3,     1,     0,     1,     3,
       1,     0,     3,     0,     1,     3,     1,     4,     0,     1,
       1,     1,     0,     3,     2,     3,     0,     3,     0,     5,
       5,     0,     7,     5,     0,     2,     1,     1,     1,     3,
       1,     1,     1,     3,     0,     1,     1,     1,     1,     2,
       1,     3,     1,     1,     0,     1,     0,     2,     3,     5,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     3,     1,     3,     0,     2,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     0,     5,     0,     2,     0,     3,     0,
       2,     2,     2,     2,     0,     6,     2,     0,     2,     1,
       1,     3,     0,     0,     0,     7,     0,     2,     2,     1,
       1,     0,     0,     8,     0,     6,     1,     2,     1,     2,
       0,     0,     6,     0,     0,     6,     0,     2,     0,     5,
       0,     1,     0,     5,     0,     2,     0,     5,     4,     0,
       0,     8,     0,     7,     1,     1,     1,     1,     1,     2,
       4,     5,     0,     4,     4,     4,     3,     3,     2,     2,
       0,     2,     1,     2,     3,     1,     1,     1,     1,     1,
       2,     3,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     2,     3,     1,     1,     1,     1,     1,     1,
       1,     2,     3,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     2,     3,     1,     1,     1,     2,     2,     2,
       1,     1,     1,     1,     2,     3,     3,     3,     3,     3,
       3,     3,     3,     4,     0,     1,     1,     1,     1,     1,
       2,     3,     2,     4,     0,     6,     0,     5,     0,     0,
       5,     0,     7,     1,     0,     1,     0,     4,     0,     0,
       3,     5,     5,     0,     4,     2,     2,     2,     2,     0,
       1,     0,     1,     1,     3,     1,     4,     5,     5,     0,
       2,     0,     0,     7,     0,     9,     1,     3,     1,     1,
       0,     2,     0,     3,     1,     3,     0,     6,     1,     0,
       0,     5,     0,     4,     1,     1,     1,     3,     1,     3,
       0,     0,     5,     1,     3,     1,     1,     0,     3,     1,
       3,     0,     4,     1,     0,     1,     2,     1,     3,     4,
       3,     3,     3,     3,     4,     4,     3,     0,     0,     6,
       0,     1,     0,     1,     1,     2,     1,     1,     0,     1,
       1,     2,     1,     0,     3,     0,     1,     1,     2,     1,
       2,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     0,     6,     1,     1,
       3,     4,     4,     2,     2,     2,     3,     3,     3,     3,
       3,     3,     3,     4,     4,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     2,     1,
       1,     1,     1,     1,     1,     3,     1,     1,     2,     2,
       0,     8,     0,     9,     0,     9,     0,     9,     8,     2,
       0,     1,     4,     0,     1,     2,     0,     3,     2,     8,
       0,     2,     0,     1,     1,     0,     1,     2,     1,     1,
       2,     2,     4,     3,     3,     3,     3,     1,     2,     1,
       1,     3,     2,     3,     2,     2,     1,     3,     3,     2,
       3,     1,     2,     2,     2,     1,     2,     1,     1,     1,
       2,     3,     2,     3,     2,     2,     3,     3,     3,     0,
       6,     0,     6,     2,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     2,     2,     1,     2,     1,
       2,     3,     2,     1,     1,     1,     1,     1,     1,     1,
       2,     0,     1,     1,     5,     0,     1,     2,     1,     1,
       1,     1,     3,     3,     3,     3,     0,     1,     0,     1,
       0,     1,     2,     1,     1,     2,     2,     4,     1,     3,
       2,     1,     2,     2,     2,     3,     3,     3,     3,     2,
       2,     1,     2,     1,     1,     1,     1,     1,     0,     2,
       1,     1,     1,     1,     1,     0,     2,     1,     1,     0,
       1,     1,     2,     2,     1,     2,     2,     0,     1,     1,
       1,     3,     1,     3,     0,     1,     0,     1,     5,     0,
       3,     3,     1,     0,     2,     2,     2,     0,     3,     3,
       6,     6,     1,     1,     2,     2,     2,     1,     2,     2,
       1,     1,     0,     1,     1,     1,     1,     0,     1,     1,
       1,     0,     1,     2,     0,     1,     0,     1,     0,     1,
       1,     2,     1,     2,     1,     2,     2,     2,     3,     2,
       3,     3,     3,     3,     1,     1,     1,     1,     3,     1,
       1,     1,     4,     2,     1,     4,     0,     1,     0,     2,
       1,     3,     0,     6,     0,     5,     7,     0,     5,     0,
       5,     0,     5,     0,     4,     0,    10,     3,     4,     3,
       3,     7,     0,     3,     1,     4,     0,     3,     0,     2,
       0,     1,     0,     2,     2,     2,     2,     1,     1,     1,
       3,     4,     0,     6,     4,     0,     5,     0,     6,     4,
       3,     1,     2,     1,     1,     0,     5,     0,     3,     2,
       0,     5,     0,     0,     6,     1,     3,     1,     1,     3,
       2,     3,     2,     4,     0,     6,     0,     0,     7,     4,
       4,     3,     3,     2,     2,     6,     5,     3,     5,     1,
       1,     1,     0,     1,     0,     1,     0,     2,     0,     1,
       2,     1,     1,     1,     0,     1,     1,     0,     2,     1,
       0,     1,     1,     1,     0,     6,     0,     5,     4,     4,
       0,     6,     4,     3,     0,     1,     1,     3,     3,     2,
       2,     0,     2,     1,     3,     0,     1,     1,     0,     2,
       1,     3,     0,     5,     0,     1,     1,     0,     6,     0,
       1,     1,     2,     1,     1,     1,     0,     5,     2,     0,
       5,     0,     1,     1,     2,     1,     1,     1,     1,     1,
       2,     0,     5,     0,     1,     1,     0,     4,     4,     3,
       5,     1,     3,     3,     0,     6,     1,     1,     1,     3,
       2,     3,     1,     1,     0,     6,     1,     1,     1,     3,
       3,     4,     0,     6,     0,     2,     0,     4,     0,     2,
       1,     2,     4,     2,     3,     2,     3,     0,     3,     0,
       0,     6,     2,     1,     1,     2,     2,     8,     4,     0,
       1,     2,     1,     1,     1,     1,     0,     2,     4,     3,
       1,     1,     3,     4,     0,     0,     0,     2,     2,     1,
       1,     0,     2,     3,     0,     2,     3,     3,     3,     2,
       3,     4,     3,     4,     3,     4,     1,     3,     4,     3,
       3,     6,     1,     5,     6,     5,     7,     6,     8,     5,
       6,     4,     4,     5,     3,     4,     1,     3,     3,     3,
       3,     3,     3,     5,     5,     3,     3,     3,     3,     3,
       3,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     0,     2,
       1,     2,     1,     1,     1,     2,     2,     1,     1,     2,
       2,     4,     1,     3,     1,     1,     1,     1,     1,     3,
       1,     1,     1,     1,     3,     2,     2,     2,     2,     3,
       3,     5,     6,     4,     4,     7,     2,     6,     5,     6,
       6,     4,     4,     5,     4,     6,     2,     4,     4,     4,
      10,     6,     8,     6,     4,     4,     6,     4,     4,     4,
       6,     4,     7,     7,     7,     6,     6,     6,     6,     3,
       4,     6,     8,     2,     2,     8,     8,     6,     6,     2,
       6,     6,     8,     8,     6,     8,     6,     2,     8,     8,
       2,     2,     2,     6,     6,     6,     4,     4,     8,     4,
       4,     4,     4,     3,     8,     4,     4,     6,     4,     4,
       4,     6,     8,     6,     4,     6,     1,     6,     4,     4,
       4,     4,     4,     6,     4,     0,     5,     6,     2,     3,
       0,     4,     0,     3,     0,     1,     1,     3,     4,     4,
       5,     4,     4,     4,     5,     4,     0,     0,     7,     4,
       5,     4,     5,     4,     4,     4,     4,     4,     5,     0,
       8,     0,     3,     3,     1,     4,     0,     1,     0,     2,
       0,     1,     0,     3,     2,     3,     2,     1,     1,     2,
       1,     2,     1,     2,     2,     2,     0,     3,     0,     1,
       1,     3,     1,     3,     1,     3,     0,     1,     0,     2,
       4,     5,     1,     1,     1,     1,     4,     1,     3,     3,
       3,     0,     6,     0,     6,     0,     8,     4,     0,     8,
       0,    10,     6,     0,     8,     0,    10,     6,     1,     2,
       2,     0,     4,     3,     5,     2,     0,     0,     7,     1,
       0,     0,     6,     0,     3,     0,     0,     5,     0,     1,
       0,     1,     0,     2,     3,     3,     1,     1,     0,     7,
       0,     7,     1,     2,     0,     0,     2,     0,     2,     0,
       1,     1,     1,     1,     3,     1,     3,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     0,     1,     1,     0,     2,     0,     1,     0,
       0,     3,     0,     0,     3,     2,     0,     0,     4,     4,
       2,     0,     1,     1,     3,     3,     1,     2,     0,     1,
       0,     4,     4,     2,     0,     1,     1,     0,     1,     0,
       1,     2,     5,     4,     1,     3,     3,     1,     1,     1,
       1,     1,     1,     0,     2,     3,     4,     1,     2,     2,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     0,     0,     6,     0,
       1,     3,     1,     3,     0,     2,     3,     1,     2,     1,
       0,     3,     0,     0,     7,     2,     1,     0,     3,     0,
       7,     0,     6,     4,     6,     4,     4,     4,     0,     6,
       4,     4,     5,     6,     4,     1,     3,     1,     1,     3,
       1,     0,     2,     0,     1,     0,     0,     8,     0,     0,
       6,     0,     1,     1,     1,     1,     1,     2,     1,     1,
       1,     3,     4,     0,     3,     3,     1,     2,     2,     0,
       3,     0,     5,     3,     1,     3,     1,     3,     1,     1,
       0,     1,     0,     4,     0,     1,     3,     1,     1,     1,
       0,     0,     6,     0,     0,    11,     3,     1,     3,     3,
       1,     3,     0,     1,     0,     4,     0,     6,     0,     5,
       0,     6,     1,     3,     2,     4,     0,     2,     0,     2,
       1,     1,     1,     0,     4,     0,     1,     0,     1,     1,
       3,     1,     1,     2,     2,     2,     1,     1,     1,     1,
       0,     3,     0,     3,     2,     4,     4,     3,     4,     4,
       1,     3,     3,     6,     2,     2,     0,     6,     0,     7,
       5,     2,     1,     1,     1,     5,     5,     2,     2,     1,
       4,     3,     2,     3,     2,     2,     1,     3,     4,     3,
       3,     2,     3,     2,     3,     1,     1,     1,     1,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     1,     1,
       1,     1,     1,     0,     1,     0,     2,     0,     1,     1,
       1,     0,     2,     0,     2,     0,     2,     2,     0,     4,
       0,     4,     1,     1,     0,     1,     1,     0,     1,     1,
       0,     4,     0,     0,     5,     1,     0,     4,     3,     1,
       2,     2,     2,     2,     2,     3,     2,     1,     1,     1,
       1,     2,     1,     1,     1,     1,     1,     1,     1,     0,
       1,     0,     3,     0,     3,     3,     1,     0,     4,     1,
       2,     0,     1,     0,     3,     3,     2,     2,     0,     5,
       0,     1,     1,     0,     1,     1,     1,     2,     2,     0,
       0,     0,     0,    21,     1,     1,     0,     1,     0,     1,
       1,     0,     1,     1,     0,     2,     2,     1,     3,     4,
       3,     3,     0,     2,     2,     1,     3,     3,     0,     4,
       0,     3,     1,     1,     0,     3,     2,     3,     1,     1,
       2,     0,     2,     3,     1,     5,     1,     1,     2,     2,
       1,     1,     1,     1,     1,     2,     2,     1,     1,     1,
       1,     1,     1,     1,     2,     2,     2,     2,     2,     1,
       1,     1,     1,     1,     1,     1,     3,     5,     1,     1,
       1,     1,     1,     3,     4,     5,     1,     5,     3,     2,
       1,     3,     2,     2,     4,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     3,
       2,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     0,     3,     0,     3,     0,     3,
       0,     3,     0,     3,     2,     0,     2,     0,     2,     0,
       4,     0,     3,     1,     1,     1,     1,     0,     1,     1,
       1,     0,     2,     2,     2,     3,     3,     4,     6,     2,
       3,     3,     3,     5,     1,     3,     3,     1,     1,     3,
       3,     1,     3,     2,     2,     2,     2,     2,     1,     1,
       4,     4,     1,     1,     1,     1,     1,     0,     4,     1,
       1,     1,     3,     3,     1,     1,     2,     2,     2,     0,
       3,     4,     3,     0,     7,     1,     2,     1,     1,     1,
       1,     1,     1,     0,     5,     1,     1,     1,     1,     1,
       3,     6,     6,     6,     7,     5,     3,     8,     8,     8,
       6,     0,     1,     1,     2,     0,     1,     1,     3,     0,
       3,     0,     3,     0,     3,     0,     3,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     2,     2,
       1,     3,     2,     2,     2,     2,     2,     2,     2,     2,
       1,     1,     2,     0,     1,     3,     1,     2,     2,     2,
       1,     3,     3,     1,     1,     3,     1,     3,     1,     1,
       1,     1,     4,     5,     4,     6,     1,     0,     3,     3,
       1,     1,     0,     2,     2,     2,     2,     0,     2,     0,
       3,     2,     1,     2,     2,     2,     2,     2,     0,     3,
       0,     1,     0,     3,     2,     0,     1,     2,     0,     1,
       4,     4,     5,     2,     3,     0,     1,     0,     4,     0,
       1,     1,     0,     1,     0,     2,     2,     1,     0,     1,
       1,     2,     3,     2,     0,     6,     3,     0,     0,     0,
       1,     2,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     2,     2,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     0,     3,     1,
       2,     1,     2,     3,     3,     3,     0,     3,     3,     0,
       7,     0,     3,     1,     3,     0,     3,     2,     4,     0,
       3,     4,     4,     0,     0,     0,    16,     8,     7,     0,
       0,     0,     0,     0,    15,     0,     0,     0,     0,    12,
       4,     4,     3,     4,     3,     2,     1,     3,     5,     1,
       1,     0,     1,     1,     0,     2,     0,     0,     3,     0,
       2,     5,     3,     3,     3,     1
};

/* YYDEFACT[STATE-NAME] -- Default rule to reduce with in state
   STATE-NUM when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
       0,   956,  1033,  2518,     0,     0,     0,     0,     0,     0,
    2520,   120,    64,  1674,  1792,  1793,  1587,  1613,     2,     0,
    1033,   170,     0,    76,  1615,     0,  1848,     0,     0,  1033,
       0,   449,     0,  1843,     0,     0,  1033,  1618,  1833,   244,
     170,  2520,     0,  1079,  2324,  1712,     0,   107,     0,     0,
    1695,     0,  2399,  1663,     0,     0,  2655,     0,     0,     3,
       8,    19,     0,    40,    24,    28,    14,    18,    13,    53,
      47,    38,    37,    10,    55,    56,    16,    44,    11,    12,
      15,    36,    43,    32,    39,    51,  1070,    22,    23,    29,
      45,    60,    20,    57,    54,    21,  1794,    25,    46,    41,
      33,    61,    34,    52,    35,    59,    27,    48,    26,     9,
      17,    49,    50,    42,    62,    30,    58,    31,     0,   890,
       0,     0,     0,     0,     0,     0,     0,   958,   873,  2585,
    2586,  2587,  1035,  1034,     0,  2520,  1958,  1018,  1044,  2030,
    2031,  2032,  2033,  2034,  2035,  2036,  2037,  1972,  2038,  2039,
    2041,  2040,  2042,  2043,  1973,  1974,  2044,  2045,  2046,  2048,
    2047,  2049,  1975,  1976,  2050,  2051,  2052,  2053,  1977,  1979,
    1978,  2054,  2057,  2056,  2055,  1980,  2058,  2059,  2060,  2062,
    1981,  1982,  1983,  1984,  1985,  1986,  2061,  1987,  2063,  1988,
    2064,  2065,  2066,  2067,  2068,  2069,  2070,  2072,  2071,  1989,
    2073,  2074,  2075,  2076,  2077,  2079,  2078,  2080,  2081,  2082,
    1990,  2083,  2084,  2085,  2086,  2087,  2088,  2089,  1991,  2090,
    2091,  2092,  2109,  1992,  2093,  2096,  2095,  2094,  2097,  2098,
    2099,  2101,  2100,  2102,  1993,  1994,  2103,  2104,  2105,  2107,
    2106,  2111,  2112,  2113,  1995,  2108,  2110,  2302,  2114,  2115,
    2117,  2116,  2118,  2120,  2119,  1996,  2122,  2121,  1997,  1998,
    2123,  2124,  1956,  2125,  1957,  2126,  2129,  2130,  2127,  2131,
    2136,  1999,  2128,  2132,  2133,  2134,  2135,  2137,  2000,  2139,
    2138,  2140,  2141,  2142,  2143,  2144,  2145,  2146,  2147,  2148,
    2159,  2152,  2154,  2155,  2157,  2153,  2158,  2162,  2161,  2163,
    2164,  2165,  2166,  2167,  2160,  2150,  2156,  2151,  2168,  2169,
    2149,  2170,  2171,  2172,  2173,  2174,  2175,  2176,  2177,  2178,
    2179,  2180,  2182,  2181,  2183,  2184,  2185,  2186,  2187,  2188,
    2190,  2189,  2191,  2192,  2193,  2195,  2194,  2197,  2198,  2001,
    2196,  2199,  2200,  2201,  2202,  2204,  2203,  2002,  2003,  2004,
    2205,  2206,  2005,  2207,  2208,  2209,  2006,  2210,  2211,  2212,
    2214,  2213,  2215,  2216,  2007,  2008,  2217,  2218,  2219,  2220,
    2221,  2222,  2223,  2224,  2225,  2226,  2227,  2228,  2229,  2230,
    2232,  2231,  2233,  2234,  2235,  2236,  2237,  2238,  2239,  2009,
    2240,  2010,  2241,  2242,  2011,  2243,  2012,  2244,  2245,  2013,
    2246,  2247,  2248,  2249,  2250,  2251,  2014,  2252,  2253,  2254,
    2015,  2256,  2255,  2257,  2016,  2259,  2260,  2017,  2258,  2019,
    2020,  2261,  2262,  2018,  2263,  2021,  2264,  2265,  2267,  2266,
    2268,  2269,  2270,  2022,  2271,  2023,  2272,  2273,  2274,  2275,
    2276,  2278,  2277,  2279,  2280,  2281,  2282,  2285,  2287,  2284,
    2286,  2283,  2288,  2289,  2290,  2291,  2295,  2296,  2297,  2298,
    2292,  2293,  2294,  2024,  2299,  2300,  2301,  2303,  2304,  2306,
    2305,  2025,  2026,  2307,  2308,  2029,  2309,  2310,  2311,  2315,
    2312,  2323,  2313,  2314,  2317,  2316,  2318,  2319,  2027,  2320,
    2028,  2321,  2322,   189,  1961,   172,  1962,  1971,   107,  2390,
    2389,  1002,  1019,  2521,  2522,   543,   819,     0,     0,   820,
       0,   542,   818,   170,  2587,   125,     0,   539,   540,     0,
       0,     0,  1688,     0,  1611,  1611,  1611,     0,     0,  1611,
    1611,     0,  1614,  1611,   170,  1611,     0,    69,  1800,     0,
       0,     0,     0,  1955,     0,  1621,     0,     0,  1850,  1864,
       0,  1865,  1859,  2387,     0,  1104,     0,     0,     0,     0,
     170,  1036,     0,  1672,     0,   234,   243,   245,   246,   242,
       0,  2522,  2533,  1071,  1077,  1089,     0,  1777,   246,     0,
     108,   109,     0,   107,   984,     0,   107,  1696,  1693,     0,
       0,     0,  1672,  1858,  2639,     0,     0,     0,  2635,     0,
    2640,     0,  1079,     0,     0,     1,     5,     0,     0,  2104,
    2209,  1790,  1788,  1950,     0,   864,   891,     0,   869,     0,
     867,  1967,  1966,  1965,     0,   880,   879,   877,     0,   410,
       0,   962,   963,   957,   959,   961,     0,  2596,   871,  1016,
    2519,     0,   191,     0,     0,     0,     0,     0,  2525,     0,
       0,     0,     0,   124,     0,     0,     0,   121,  1104,  1104,
    2587,  2589,  2591,   543,   541,     0,     0,     0,  1692,  1691,
    1690,     0,  1688,  2031,  1972,  2043,     0,  1923,     0,     0,
       0,  1376,     0,  1977,     0,  2058,  2060,  1981,  1982,  1983,
    1984,  1985,  1986,  1989,     0,     0,  1114,  1114,  1111,     0,
       0,     0,  2081,  2082,  1932,     0,     0,     0,  1920,  1933,
    2117,  2118,     0,  1922,  2124,     0,     0,     0,  2138,     0,
    2143,  1930,     0,     0,  2177,  2179,     0,     0,  2183,  2184,
    2185,  2186,  1907,  1169,     0,  1111,  1919,  1929,  2201,  1913,
    2210,  2215,  2216,     0,  2225,     0,     0,     0,  2250,  2254,
       0,     0,  2275,     0,     0,  1111,  1906,  2295,  2296,  2297,
    2298,     0,  1921,  2024,  1931,     0,  2309,  1114,  1111,  1111,
       0,     0,     0,  2318,  2322,     0,     0,     0,  2557,  1168,
       0,  1341,     0,  1370,  1126,  1132,  1146,     0,  1161,  1195,
    1196,  1198,  1296,  1197,  1203,  1202,  1588,  1917,  1201,  1200,
    1918,  1194,  1940,  1961,  1939,     0,     0,     0,     0,     0,
       0,     0,     0,  1773,     0,     0,  1598,  1611,    71,     0,
    2435,  2450,  2451,  2447,  2452,  2470,  2453,  2457,     0,  2449,
    2441,     0,  2456,     0,  2445,  2454,     0,  2439,     0,  2455,
    2460,  2471,  2443,  2448,  2426,     0,  2433,  2437,  1952,  1482,
    2402,  2403,     0,    77,  1623,  1624,  1622,   954,     0,  2652,
    1851,  1852,  1853,     0,  1868,     0,  1031,     0,     0,   459,
     450,     0,  1772,  1771,     0,  1844,  2534,     0,     0,  1007,
    1626,  1673,     0,  1625,  1839,     0,  1837,  1834,  1836,   235,
       0,     0,   265,  2435,     0,  2420,     0,  2528,  2525,  2535,
    2570,  2565,  2564,  2567,  2568,  1095,  2569,  1094,  2566,  2563,
    1104,  1090,  1092,  1093,   753,     0,     0,  2344,  2345,  2190,
    2210,  2346,  2292,     0,     0,  2364,  2325,  2330,  2326,     0,
       0,  1732,     0,   753,  1755,  1785,  1733,     0,     0,  1785,
       0,  1517,  1775,  1778,     0,  2348,  1746,   816,   815,  1758,
     814,  2349,  1771,     0,  1720,  1734,     0,  1697,  1739,   107,
    2350,     0,  1774,  1757,     0,  1756,  1517,  1785,     0,  1713,
       0,     0,     0,     0,     0,   241,   991,   991,   991,   991,
       0,     0,   983,   985,   986,   991,   991,     0,  2653,  2654,
    2400,   954,  1912,  1911,  1959,  2636,  1910,  2644,  2646,  2632,
    2634,  2641,  1073,     0,  2539,     6,    63,     0,  1797,  2594,
    2595,  2593,   769,     0,  1114,  1968,  2588,   173,   878,     0,
     411,   173,     0,     0,     0,     0,     0,   412,   413,   349,
     862,   960,   875,     0,     0,   874,  2596,     0,     0,  1046,
    1048,  1047,  1064,   193,   190,   171,    78,  1004,  1605,  1607,
    1021,  2524,     0,     0,  2526,  2530,  1167,  1166,     0,   118,
     123,     0,     0,     0,  2496,   122,  2486,  2592,  1104,  1104,
    1104,  2584,     0,  2572,  2579,  2580,  2583,  2582,  2581,  2578,
       0,  2571,  2574,  2575,  2577,  2576,  2596,  2590,     0,   821,
     821,   821,     0,  1675,  1678,  1682,  1686,  1689,     0,     0,
    1487,  1216,  1487,  1487,  1487,  1377,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1487,     0,  1253,  1226,     0,  1254,     0,     0,     0,     0,
       0,  1926,     0,     0,  2557,     0,     0,     0,  1346,     0,
       0,     0,  2557,     0,     0,     0,     0,     0,     0,  1372,
    1374,  1939,  1487,     0,     0,  1487,     0,     0,     0,     0,
       0,  1119,  1259,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1487,  1487,     0,     0,  1487,  1267,
       0,  1928,     0,     0,     0,  1927,     0,     0,  1925,  1924,
    1908,     0,  1270,  1272,  1271,     0,  1487,  1487,     0,     0,
    1206,  1205,  1207,     0,     0,     0,     0,     0,     0,  1165,
    1164,  1163,  1162,     0,     0,     0,  1170,     0,  1171,  1172,
       0,  1173,  1174,  1175,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1208,     0,     0,     0,  1909,  1305,     0,
    1612,  1593,  1600,  1595,     0,  1773,  1596,  1604,   424,     0,
    1601,  2484,  1597,     0,  1589,     0,    70,     0,  1822,  1827,
       0,     0,     0,  1817,  1825,  1819,  1826,  1818,     0,     0,
    1828,   107,     0,  1820,  1824,  1823,  1801,  1805,  1809,  1802,
    2436,  2434,  2468,  2467,  2472,     0,  2469,  2465,  2458,  2497,
    2462,     0,  2497,  2464,  2463,  2497,  2459,  2466,  2497,  2431,
       0,  1483,  1484,     0,  2401,     0,  1951,   955,     0,     0,
    1854,  1855,     0,  1054,  1869,  1870,  1866,  1482,  2388,  2391,
       0,   642,  1105,   460,     0,     0,   469,     0,     0,    66,
      67,     0,  1038,     0,  1037,  1041,     0,     0,     0,  1629,
    1619,  1628,  1840,   107,     0,   233,   258,   253,   261,   255,
     257,   256,   262,   263,   264,   259,   254,   260,   247,     0,
    2434,     0,  2431,  2529,     0,  2531,  2548,  1078,  2536,  1101,
    1080,  1100,     0,  1091,   752,     0,   755,   757,  1648,  1649,
     756,   765,     0,   754,     0,     0,     0,  2351,     0,   761,
     763,   762,  2359,   760,     0,     0,  2335,     0,     0,  1781,
       0,     0,  1745,     0,   543,     0,     0,     0,     0,     0,
       0,  1714,     0,     0,   586,     0,  1738,  1518,  1779,  1780,
    1785,     0,     0,  1785,     0,  1751,  1775,     0,  1785,  1709,
       0,     0,  1701,  1706,  1702,     0,  1708,  1707,  1710,  1698,
    1699,     0,  1725,  1753,     0,  1775,  1737,  1744,     0,  1724,
    1731,     0,  1742,  1775,  1775,     0,  1785,  1785,   980,   995,
     982,   976,   974,   989,   990,     0,     0,   979,   978,  1694,
    1411,     0,     0,  2633,  2647,  2631,  2642,  2643,  2630,  1074,
    2540,  1072,  2541,     0,     7,     4,  1791,  1789,  1798,  1799,
     770,   769,   534,   537,   536,     0,     0,  1970,     0,   870,
       0,  1773,   868,     0,     0,  1773,   360,  1773,   414,   769,
     882,     0,     0,   872,  1017,     0,     0,   448,  1064,  1050,
    1066,     0,   194,   196,     0,  1006,  1005,     0,  1003,  1029,
    1028,  1026,     0,  1027,  1025,  1020,  1022,  1023,  2523,  2527,
     544,   769,  1773,     0,   352,     0,     0,     0,     0,     0,
     543,     0,     0,  2573,   110,   822,     0,     0,     0,  1680,
    1608,  1676,  1610,  1950,     0,     0,     0,  1684,     0,     0,
    1488,  1487,     0,  1352,     0,     0,     0,     0,  1378,     0,
       0,     0,     0,     0,     0,     0,  1192,     0,     0,     0,
       0,     0,     0,     0,  1326,     0,  1352,  1115,  1562,  1563,
    1547,  1548,  1546,  1549,  1112,     0,  1550,  1561,  1283,     0,
       0,     0,     0,     0,     0,  1458,  1459,  1460,  1461,  1469,
    1462,  1463,  1464,  1471,  1476,  1465,  1466,  1472,  1473,  1474,
    1467,  1475,  1470,  1468,  1477,     0,  1457,     0,  1480,  1478,
    1481,  1479,     0,  1347,  1339,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1487,     0,     0,
       0,  1487,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1487,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1249,     0,  1942,  1941,     0,     0,
       0,     0,  1210,     0,  1209,  1420,     0,  2542,  2558,     0,
    2351,  1342,  1344,     0,  1117,  1116,  1118,  1129,  1122,  1127,
    1120,  1124,     0,  1176,  2037,  1130,     0,     0,  1158,  2557,
    1496,  1159,  1144,  1149,  1150,     0,  1147,  1148,     0,  1152,
       0,  1151,  1155,  1156,  1157,  1160,     0,     0,     0,     0,
    1199,  1204,  1371,  1104,  1943,     0,  1591,   424,   427,   426,
    1602,   425,  1650,     0,   964,     0,     0,    72,    74,  1814,
    1811,  1810,  1812,  1816,   107,  1821,  1813,     0,  1829,  2461,
       0,  2442,     0,  2446,  2440,  2444,     0,     0,  2432,     0,
    2438,  1486,  2112,  2194,     0,  1489,  2405,  1616,  2651,  2309,
    1856,  1849,     0,  1867,     0,     0,     0,  1032,   643,     0,
    1104,   458,   457,   456,   455,     0,   471,   453,     0,    68,
       0,     0,  1845,     0,     0,     0,     0,  1009,  1627,     0,
    1841,  1835,     0,     0,     0,     0,     0,     0,     0,  2532,
    2550,  2549,  2537,  1104,  1508,  1105,  1105,  1939,  2366,     0,
    2361,  2360,     0,     0,     0,  2379,  2362,     0,     0,  2329,
    2367,  2368,  2371,     0,     0,     0,     0,     0,  2365,  2292,
    2331,  2332,     0,  2337,  2327,  2385,  2386,  2383,  2384,  2382,
    2356,  1752,     0,  1783,  1786,  1787,     0,     0,  1766,  1760,
    1759,  1749,  1761,  1750,  1770,  1769,  1768,  1722,  1721,  1530,
    1531,  2248,  1529,  1521,  1524,  1528,  1527,  1717,  1776,  1765,
    1763,  1747,  1785,  1764,  1762,  1703,  1704,  1705,     0,  1517,
       0,  1781,  1754,  1785,  1775,     0,  1785,  1785,  1767,  1741,
    1743,   998,   997,   996,   992,   993,   977,   998,   988,   987,
    1429,  1428,     0,  1385,     0,  1387,  1384,  1383,  1382,     0,
    1428,  2637,  2645,  2649,     0,  1517,  2547,  2545,   535,  1650,
    1650,     0,  1969,     0,     0,     0,     0,     0,     0,     0,
     174,   183,     0,     0,   358,   359,  1650,   357,   400,   401,
     404,   405,   406,     0,     0,     0,     0,     0,     0,     0,
       0,   127,   407,  1650,  1650,   354,   380,   381,   384,   385,
     386,   387,   388,   350,     0,   355,   952,   952,     0,  1650,
    1650,   952,  1650,     0,     0,  1650,  1650,     0,     0,  1650,
       0,     0,   952,     0,  1650,   950,     0,     0,  1650,  1650,
    1650,  1650,   952,     0,     0,  1650,  1650,   448,  1650,     0,
       0,   970,     0,     0,  1650,     0,     0,  1650,  1650,     0,
    1650,   898,   949,   547,   568,   569,   863,   897,   899,   911,
     444,     0,   928,   951,     0,     0,   884,   886,  2597,  2598,
    2599,  1053,  1045,  1052,  1049,  1064,  1062,  1051,   811,   810,
       0,  1065,   192,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    79,    80,    98,  1606,  1030,  1024,
     119,   769,  1650,  1650,  1650,  1650,   356,   389,   390,   393,
     394,   395,   396,   399,   397,   398,     0,     0,  1773,     0,
    2488,  2489,     0,  2487,     0,  2625,     0,     0,     0,   172,
     545,     0,     0,   823,     0,     0,     0,     0,     0,  1489,
       0,  1953,  1683,  1411,  1687,  1686,     0,  1279,     0,  1319,
       0,  1321,  1322,  1323,     0,     0,     0,     0,     0,  1280,
       0,  1224,  1281,  1282,     0,     0,  1277,     0,     0,     0,
       0,  1276,     0,     0,     0,     0,  1325,     0,  1113,     0,
       0,  1227,  1228,  1221,  1213,     0,  1298,     0,     0,  1229,
       0,     0,     0,     0,  1285,     0,  1299,  1373,     0,  1375,
    1943,     0,  1331,  1286,  1234,     0,  1329,     0,  1235,  1300,
    1301,  1302,  1288,  1289,     0,  1304,     0,  1290,     0,     0,
       0,     0,  1237,  1335,  1333,     0,     0,     0,     0,  1337,
    1239,     0,     0,     0,  1238,     0,     0,     0,     0,     0,
       0,     0,  1241,     0,  1222,  1334,  1336,  1294,     0,  1250,
       0,  2551,  1419,  2559,  1420,     0,     0,  2553,  2543,  2548,
    2556,  1214,     0,     0,  1944,  1123,  1128,  1121,  1125,  2557,
       0,     0,     0,     0,  1142,  1141,     0,     0,     0,  2557,
    1496,  1145,     0,     0,  1315,  1316,  1368,     0,  1594,  1592,
    1603,  1651,     0,  2485,   966,   965,  1599,   964,    75,     0,
    1815,  1808,  1830,  1803,  2501,     0,  2500,     0,  2480,  2483,
    1950,     0,     0,     0,  2415,  2409,  2416,  2418,  2412,  2417,
    2419,  2410,  2411,  2406,  2413,  1490,  1519,     0,  1857,  1055,
    1057,  1058,  1056,  1064,     0,     0,  2394,  2395,  2393,  2392,
     461,     0,   470,     0,   482,     0,   461,  1847,  1846,     0,
    1039,  1042,  1043,  1014,  1013,  1015,  1008,  1010,  1011,   527,
    1633,     0,     0,     0,  1639,  1620,  1630,  1842,  1838,     0,
    2081,  2295,  2298,   248,   251,   250,   252,     0,     0,     0,
       0,     0,     0,  1099,  1411,  1580,  1096,  1084,  1519,  1509,
    1083,  1106,  1102,     0,   768,   767,   766,   764,     0,     0,
       0,     0,  2373,  2374,     0,     0,  2352,  2353,  2354,     0,
    2357,  2334,  2335,     0,  2336,     0,  1782,     0,  1726,     0,
    1748,     0,     0,     0,     0,  1719,     0,  1740,  1700,  1783,
    1718,  1489,  1775,  1715,  1716,     0,   981,   995,   975,  1428,
    1411,     0,     0,  1408,  1430,     0,  1430,  1411,  1411,     0,
    1411,  1482,  1425,     0,     0,  2648,  1510,  2546,     0,     0,
     866,   177,   180,   178,     0,   179,     0,     0,   409,   408,
       0,  1773,   402,   131,   130,   132,   133,  1544,  1545,  1541,
    1542,  1540,  1543,   135,   134,   129,   881,     0,     0,     0,
    1773,   382,   361,   362,   365,   366,   367,   953,   856,  1033,
     932,     0,   624,   856,   807,   812,   812,   930,     0,  1033,
       0,     0,     0,     0,     0,  1033,     0,     0,     0,  1650,
       0,   943,   893,     0,     0,     0,     0,     0,   944,     0,
     894,  1650,     0,     0,     0,     0,     0,  1033,     0,     0,
       0,   446,     0,  1033,   912,   973,   972,   971,     0,  1033,
    1033,     0,   574,   575,   573,     0,     0,     0,   566,   548,
     769,   895,   445,   896,   623,     0,   967,   620,   626,  1946,
       0,     0,     0,     0,   141,  2601,     0,  1449,   195,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1773,   391,     0,     0,  1650,   351,
     368,   369,   372,   373,   374,   375,   376,   379,   377,   378,
       0,  2492,  2494,     0,     0,   345,   344,     0,   136,  2619,
       0,     0,   623,   111,   444,   546,   549,   849,   851,   850,
     837,   836,   112,   114,   116,  1609,  1686,  1411,  1508,  1951,
    1489,     0,  1685,     0,     0,  1320,  1353,     0,  1379,     0,
    1218,   726,   726,   726,  1362,   711,  1366,  1357,   726,  1358,
     726,  1360,     0,     0,     0,  1178,  1193,     0,     0,     0,
       0,     0,     0,  1327,  1324,     0,     0,     0,     0,  1350,
       0,     0,     0,  1223,     0,  1310,  1332,  1330,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1338,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1211,  1104,  2560,  2562,  1075,     0,  2552,  2554,
     858,  1343,     0,  1139,  1135,     0,  1133,  1495,  1154,  1153,
       0,     0,     0,  1143,  1105,  1306,  1104,     0,  1369,  1945,
     423,   585,  1590,    73,  1806,  2498,     0,  2509,     0,     0,
       0,     0,     0,     0,     0,  2404,  1520,  1660,     0,  1064,
    1068,  1960,  1860,  2397,  2398,  2396,     0,   462,   463,   465,
    1105,   479,   459,     0,   451,   454,     0,     0,  1012,  1089,
       0,  1652,  1637,  1644,  1638,     0,     0,     0,  1636,  1935,
    1934,  1941,  2535,     0,     0,  2425,     0,     0,     0,  2538,
    1489,  1489,  1574,     0,     0,  1081,  1086,  1082,  1085,     0,
    1103,  1110,  1109,  1936,  1943,  2363,     0,     0,     0,     0,
    2378,  2372,  2369,  2370,     0,  2333,  2355,  2339,  2338,  2341,
    2343,  1554,  1555,  1553,  1551,  1552,  1784,  1517,  1736,  1735,
    1532,  1523,     0,  1526,  1525,  1711,  1728,  1730,  1785,  1000,
     999,   994,     0,  2542,  1423,     0,  1410,  1409,  1431,     0,
    1411,  1430,  1430,     0,  1390,  1389,  1664,  1667,     0,  1388,
    1447,  1413,  1089,  2638,  2650,     0,   584,   583,   182,   181,
     187,   188,   429,   415,   428,   403,   128,   416,   417,   383,
       0,   363,   625,   857,   915,     0,     0,     0,   812,   619,
     856,   821,   813,   856,   856,     0,     0,   558,   555,   934,
     561,   913,   905,   914,   925,   927,     0,   557,   576,     0,
       0,   564,   856,   900,   941,   942,   964,   552,     0,   595,
     596,   594,   570,   577,   553,   554,   936,     0,  1504,  1506,
    1514,   560,   559,  1565,  1564,   563,     0,   556,     0,   947,
     920,     0,   592,   590,   587,   589,   588,   593,   591,   565,
     562,   578,   910,     0,   952,   952,   929,     0,   603,   604,
     606,   607,  1949,     0,   969,   931,     0,   608,   621,   609,
       0,     0,   582,  1558,  1559,  1556,  1557,   581,  1560,   579,
     580,     0,   151,     0,     0,   883,     0,   144,   142,   153,
       0,     0,     0,  1452,     0,  1453,  1450,  1451,    99,    86,
      82,   103,   104,    84,    85,    89,    88,    90,    91,    94,
      95,    92,    87,    93,    83,    96,   105,   106,    81,   422,
     421,   420,   419,   392,     0,     0,     0,  1773,   370,  2493,
    2491,  2490,     0,     0,  2626,   348,   346,   347,     0,     0,
     197,   601,   602,   600,   599,     0,   432,     0,  2006,   430,
       0,   443,     0,  1871,   769,   550,     0,     0,     0,     0,
    1489,  1533,  1954,  1679,     0,  1251,  1380,     0,     0,   727,
    1354,   777,  1364,     0,  1365,   713,   712,   728,  1356,  1359,
    1363,  1361,  1217,  1225,  1273,     0,  1191,  1274,  1275,     0,
    1297,  1220,  1219,     0,     0,     0,  1257,  1258,  1348,  1351,
       0,     0,  1231,     0,  1233,     0,     0,  1312,  1287,  1303,
    1260,  1291,     0,  1236,  1212,     0,  1261,     0,  1266,  1264,
       0,  1240,     0,     0,  1247,     0,  1245,     0,  1246,     0,
    1248,  1293,  1295,  1421,  2561,  1076,     0,     0,  1345,  1131,
       0,  1140,  1137,     0,  1134,  1106,  1317,  1307,     0,  1804,
    2499,     0,  2430,  2482,  2481,  2502,  2502,  2502,     0,  1491,
       0,  1617,  1059,  1064,  1068,     0,  1060,  1871,   466,     0,
       0,     0,   486,     0,   484,   452,  1040,  1104,  1634,  1646,
       0,  1654,     0,     0,  1631,  1641,     0,     0,     0,  1640,
     249,     0,  2422,  2423,  2421,  1519,  1497,     0,     0,  1586,
       0,  1581,  1097,     0,  1108,  1107,     0,  2381,  2380,  2376,
    2375,  2377,  2358,     0,     0,  1727,  1522,  1517,  1723,     0,
    2548,  1482,  1415,  1411,  1386,  1411,  1397,     0,     0,  1411,
    1393,  1391,  1395,     0,  1489,     0,  1412,  1444,  1104,  1938,
    1511,  1514,   364,   917,     0,   856,   808,   809,   821,     0,
     821,   821,     0,     0,   904,     0,  1021,     0,   909,   765,
     571,   940,   939,   572,     0,   902,     0,  1515,  1516,  1507,
     447,   901,   922,   907,  1829,   933,   623,   968,   789,   707,
     656,   647,   726,   650,   649,   693,   726,   661,   711,   709,
     679,   711,   711,   686,   685,   703,   689,   669,   777,   777,
     668,   706,   777,   690,   688,   692,     0,   694,   711,   699,
     687,   691,   708,   684,   681,   705,   726,   726,   726,   665,
     704,   777,     0,   697,   726,   627,   730,   667,   777,   784,
       0,     0,   726,   728,  1948,   152,   140,     0,     0,   885,
     887,     0,     0,   888,  2603,     0,  2605,     0,  1067,     0,
       0,   100,   102,     0,   353,   418,   371,  2495,     0,   208,
    1104,     0,     0,   198,   200,   201,     0,     0,     0,   434,
    1873,  1872,   431,   530,   551,     0,     0,     0,  1686,  1681,
       0,  1677,     0,  1381,     0,     0,     0,     0,   771,   782,
     780,   774,     0,   778,   779,  1355,     0,     0,   729,  1367,
     726,  1188,   711,  1182,  1184,  1180,     0,   694,  1183,   726,
       0,   777,  1187,  1179,     0,  1328,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1215,     0,  1308,     0,     0,
       0,     0,     0,     0,  1244,  1242,  1243,  1519,  2542,   859,
    1136,     0,  1318,     0,     0,     0,  2507,  2507,  2507,  1659,
    1658,     0,  1657,  1661,  1061,  1069,     0,   464,   467,     0,
       0,     0,   483,     0,   528,     0,     0,     0,  1655,  1643,
    2539,  1632,  1635,  1943,  2424,  1088,     0,  1492,  1585,  1582,
       0,  1575,  1577,  1579,     0,  1937,  2340,  2342,  1729,  1001,
    1416,  1414,  1424,     0,  1382,  1411,  1411,     0,  1382,     0,
       0,     0,  1666,  1508,  1668,  1448,     0,  1426,     0,  1513,
       0,     0,   916,     0,     0,     0,     0,     0,     0,   946,
       0,   967,   906,   926,   948,   937,  1033,  1505,   921,   923,
    1009,     0,   605,     0,   793,   655,   648,   666,   664,   715,
     710,     0,   715,   715,   675,   693,   670,     0,   777,   683,
     674,   695,   698,   700,   702,   715,     0,   777,   663,   662,
     672,   659,   715,   738,     0,     0,     0,     0,   734,     0,
     787,     0,   741,     0,   628,   731,   733,     0,     0,     0,
     696,   777,   652,   785,   784,   654,   777,   784,   715,   715,
       0,   138,   143,   154,   155,   876,  2602,     0,  2600,     0,
    1063,  1454,    97,     0,     0,     0,   211,   209,   210,     0,
     204,   206,   201,  2613,     0,  2620,     0,     0,  2618,   433,
     436,   545,   531,     0,     0,  1514,   854,     0,     0,  2248,
    1534,  1252,   724,   722,   725,   723,   773,   772,   776,     0,
     775,   784,     0,     0,  1190,  1185,   695,  1189,  1181,  1186,
    1278,  1255,  1256,  1349,  1340,  1284,     0,  1232,  1309,     0,
       0,  1292,  1262,  1265,  1263,  1268,  1269,  1096,  1096,   597,
    2555,  1138,  1831,  2510,     0,     0,  2506,  2504,     0,  2505,
    2503,  2473,     0,  2428,  2429,  2427,  2414,     0,     0,     0,
    1104,   472,     0,   489,   488,   485,  1519,  1645,  1647,  1653,
    1642,     0,  1493,  1508,   758,  1578,     0,  1098,     0,  1398,
       0,  1402,  1407,  1403,     0,  1394,  1392,     0,  1533,  1436,
    1437,     0,     0,  1442,  1446,  1519,  1514,   919,     0,   622,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     945,  1914,   935,   967,   903,     0,   908,   567,     0,   792,
       0,   797,   719,   720,   721,   676,   716,   718,     0,   678,
     646,   671,   701,   677,     0,   673,   660,   744,   743,  1114,
     736,   751,   631,     0,     0,   742,     0,   732,   740,   735,
       0,   651,   653,   657,   658,   644,   645,  1947,   145,   889,
     285,  2604,  1079,     0,  2609,   101,   126,  2617,  2627,   208,
       0,     0,   149,     0,   199,   765,   202,  2539,   444,     0,
     439,   824,     0,   853,     0,   826,   828,  1535,     0,   783,
     781,     0,     0,  1311,  1313,  1422,   598,     0,  1807,  2479,
    2478,  2477,  2474,     0,     0,     0,     0,     0,     0,  2508,
    2512,  1656,     0,     0,     0,   480,     0,   476,   478,     0,
     514,   529,  1501,  1514,     0,  1519,     0,  1583,  1576,  1417,
       0,     0,     0,     0,     0,  1455,  1665,  1432,  1432,  1443,
    1427,  1512,   918,     0,     0,   610,     0,     0,  1916,  1915,
     938,     0,   790,     0,   794,   795,   796,     0,   788,   717,
       0,   860,     0,   750,  1114,   739,  1104,   748,   747,   745,
     746,     0,   147,   311,     0,   297,   283,     0,     0,     0,
     287,   156,   159,   157,     0,   158,   164,     0,   165,   166,
     167,   168,   169,   160,   309,   310,   163,   161,   162,     0,
    1963,     0,  1964,  2607,     0,     0,  2606,   175,   205,     0,
       0,   141,   150,  2621,   749,   437,  1871,     0,  2535,     0,
    1650,   113,   825,   845,   844,   830,     0,  1514,     0,     0,
     115,   827,   847,   834,   117,   829,   846,   832,  1536,   714,
    1230,     0,  2475,  2513,  2516,  2514,  2515,  1537,     0,  2517,
    2511,     0,  1861,  1105,     0,   473,   474,     0,   492,     0,
    1650,  1650,     0,     0,  1650,  1650,  1650,  1650,   507,   515,
     517,     0,  1502,  1503,     0,  1498,  1500,  1494,  1566,   759,
    1874,  2542,  1399,     0,  1404,     0,  1396,     0,     0,  1440,
    1438,     0,   616,   824,   612,   614,     0,   791,     0,     0,
     777,     0,   777,   737,     0,   146,     0,   139,     0,     0,
     296,   299,     0,     0,   302,   292,   291,   293,     0,   286,
     285,   285,   339,   290,   336,   335,   328,  2539,     0,     0,
       0,  2628,   207,  1104,   153,     0,   435,   441,   440,   839,
       0,   831,     0,   852,   855,     0,   835,   833,  1832,  1539,
    1538,  1662,  1670,     0,   758,     0,   481,   480,   477,     0,
     490,     0,     0,  1650,  1650,     0,     0,     0,     0,     0,
     487,   516,  1650,  1514,     0,  1087,     0,  1882,  1418,     0,
       0,  1456,     0,  1433,     0,     0,     0,   618,   824,   611,
     826,   828,     0,   803,     0,   802,     0,   799,   798,   680,
     861,   682,   632,   148,   312,   323,   326,   318,   298,     0,
       0,     0,   288,   285,     0,   272,   270,   271,   277,   278,
     279,   280,   281,   282,   273,   276,   274,   275,   285,     0,
     216,     0,     0,  2608,     0,  2610,     0,   185,   184,   176,
       0,   285,  2614,     0,  2622,  2539,   838,   843,   842,   840,
     841,   848,     0,     0,  1862,   468,   475,   500,   493,   496,
       0,   526,   520,     0,     0,   522,   523,   521,   518,   511,
       0,   509,     0,  1499,  1567,     0,     0,     0,     0,  1875,
    1877,     0,  1584,  1401,  1406,  1435,  1434,  1449,     0,   617,
     613,   615,   924,   805,   806,   804,     0,     0,   634,   633,
     635,     0,     0,   285,   319,     0,   294,     0,     0,     0,
       0,   214,   342,     0,   212,   330,   330,  2611,  2612,   186,
    2629,     0,   155,   175,   442,  1669,  1671,  1888,   500,     0,
     498,     0,   494,   491,   495,   524,   525,     0,   508,     0,
     519,     0,     0,     0,     0,     0,  1876,     0,     0,  1883,
    1885,     0,     0,     0,     0,     0,   639,   629,   636,   638,
     320,   326,   316,   324,   285,     0,     0,   284,   303,   338,
     215,     0,   340,     0,   285,     0,   329,   331,   333,     0,
     137,  2623,     0,  1874,   497,     0,   505,   501,   503,   506,
     514,   513,   510,  1104,  1880,  1881,     0,  1878,     0,     0,
    1884,  1441,  1439,   801,   800,   641,   640,   637,     0,   317,
       0,     0,   315,   295,   300,   285,     0,   285,   227,   226,
       0,   218,   266,   337,     0,   217,  2615,   285,     0,  1882,
     499,     0,     0,   512,     0,     0,  1570,  1572,  1879,  1887,
    1886,   321,     0,   285,     0,   285,     0,   285,     0,     0,
       0,     0,     0,   213,   285,  2624,     0,  1890,   504,   502,
    1105,  1568,  1104,     0,   313,   285,   301,   306,   343,     0,
     221,   267,   268,     0,   224,  2616,  1889,     0,  1894,  1573,
    1571,   285,   285,   302,   305,   341,     0,     0,   219,   220,
     232,   231,   223,     0,     0,     0,  1901,   285,   285,   307,
     240,   238,   285,   228,   236,   230,     0,   237,   269,   225,
    1892,  1893,  1891,  1896,     0,     0,  1898,  1899,     0,  1863,
       0,   222,   239,  1900,  1895,     0,  1902,  1904,     0,   229,
    1897,     0,  1104,  1903,     0,  1105,  1905
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,    58,   607,  1495,    59,    60,    61,    62,    63,  1339,
      64,   818,  1266,  1777,  1778,    65,   544,    66,  1534,  2114,
    2115,  3390,  3391,  2116,   579,   580,    67,  2150,  3096,  3097,
    3098,  1551,   514,   515,  2000,  2001,  1071,  3079,  3025,  3828,
    3029,  3942,  4077,  3981,  2076,  3383,  3829,  3830,  3951,   539,
    2148,  1509,  4101,  1980,  4209,  1981,    68,   642,  1044,  1531,
    1532,  3402,  3403,  3657,  3404,  3649,  3650,  3651,  3652,  4344,
    4183,  4284,  4345,  4420,  4456,  4462,  4463,  4390,  4472,  4473,
    4474,  4460,   890,  4475,    69,   567,   568,   892,  1368,  2393,
    1369,    70,  4391,  4458,  4184,  4185,  4084,  4186,  3954,  4187,
    4088,  4188,  3957,  4189,  4190,  4191,  4192,  4336,  4193,  4083,
    4383,  4180,  4181,  4385,  4437,  4454,  4194,  3964,  4078,  4271,
    3965,  4079,  4331,  4176,  4332,  4378,  4433,  4177,  4272,  4381,
    4275,  4195,  4201,  4346,  4196,  4202,  4197,  3969,  4095,  4200,
    4093,  4199,  4387,  4341,  2647,  3078,   625,   626,   653,  2138,
     627,  1060,  1018,  1511,  2013,  2014,  2512,  2513,  2629,  2630,
    2631,  2005,  2006,  2007,  2126,  2127,  2128,  1987,  1988,  1989,
    1515,  1984,  1985,   628,  1019,  1029,  2008,  2009,  2010,  2635,
    2130,  2131,  2132,  2133,  2011,  1770,  2012,  2913,  2653,  3089,
    3661,  3847,  3412,  3988,  4215,  3090,  3091,  2582,  2976,  2561,
      71,   556,   870,  1336,  2365,  1337,  2796,  2797,  2798,  1821,
    1822,  3731,  1826,  2364,  3885,  4127,  3886,  3887,  2800,  4025,
    2804,  3213,  3214,  3501,  3733,  3890,  4230,  4129,  4303,  4228,
    4299,  4229,  4301,  4402,  4357,  4358,  4140,  4240,  4241,  4307,
    4360,  4038,  4039,  4040,  2384,  2809,  3736,  3663,  2120,  1501,
    1502,   516,   517,   518,   650,  2654,  2062,  2655,  2656,  2993,
    2064,  2065,  2770,  1423,  2989,  2962,  3707,  3085,  2997,  2998,
    2999,  3000,  3001,  4063,  4160,  4161,  4158,  3007,  2929,  2521,
    2522,  2587,  3010,  3365,  3613,  4270,  4327,  4328,  4329,    72,
     867,  3845,  3581,  3596,  3367,  3368,  3369,  3370,  3371,  3372,
    3373,  3114,  3115,  3795,  3796,  3797,  3109,  3110,  3439,  3614,
    3615,  3616,  3846,  3810,  3432,  1390,  1391,  3897,  1401,  1402,
    2415,  1860,  2416,  1505,  3433,  3434,  3435,  3625,  3617,  3009,
    3574,  3788,  3791,  3928,  4167,  2523,  2930,  2524,  2933,   968,
     519,  2525,  2526,  1565,  1566,  3991,  4000,  4004,  3992,  4005,
    4001,  3993,  3994,  3995,  4007,  4003,  2660,  3664,  3665,  2922,
    3178,  3930,    73,  1519,  1012,  1021,  1017,  1036,   637,  1520,
    2077,  2594,  3635,   615,  2066,  3566,  3296,  3570,  2067,  2942,
    2068,  3283,  3552,  2069,  3312,  3568,  3785,  2943,  2944,  2070,
    2071,  2072,  3295,  3304,  3783,  2527,  1318,   126,   127,   633,
     634,   635,  2316,  3005,  2568,    74,  1947,  1946,  1941,    75,
     982,   983,   984,  1468,  1469,  1944,  1945,  2456,  2880,    76,
     645,  1538,    77,  1347,  2376,  2377,  2378,    78,  1037,    79,
      80,   646,  1545,  1546,  1547,    81,  1330,   134,    82,   878,
    1342,  1344,  1345,    83,   641,  1038,  1039,  1040,  1041,  2082,
      84,  1812,  2349,  2350,  2351,  2352,  1528,  2596,  1529,  1530,
    2091,  3206,    85,    86,   604,  2276,   573,   899,   574,   575,
    1854,  2406,  3708,   910,   911,   912,  2835,  1380,  1381,  1382,
    1818,  2840,  1125,  1122,   783,   784,   785,   786,  1214,  1215,
    3618,   787,  1224,  1736,  3126,  3453,  1596,  1597,   788,   789,
     790,   791,   792,   793,  1763,  3146,  3147,  3467,  2303,  2304,
    2305,   794,  2195,  3133,  2208,   795,  1207,  1721,  1654,  3459,
    3138,  1582,  2170,  2692,  3117,  2767,  2270,  1148,  1149,  1106,
    2177,  1588,  1953,  1954,  1955,  1956,  1957,  3540,  3539,  3541,
    3900,  3750,  3902,  3754,  2468,  1958,  1959,  2882,  3748,  4051,
    2271,  2272,  2273,  3477,  2883,  3263,  2901,  2902,  3765,  2459,
    1960,  2889,  4059,  3762,  3763,  4156,  4155,  3764,  3545,  3546,
    3276,  3277,  3034,  3035,  3036,  3904,  1645,  1646,  1652,  1313,
    1314,  1583,  2346,  2784,  3743,  3894,  2294,  3517,  3892,  4045,
    2073,  2968,  2969,  2408,  2409,  2905,  3280,  3309,  1426,  3709,
    2786,  1913,  2870,  2871,  3421,  4019,  4461,  2914,  2866,  3017,
    1616,  1617,  2975,  4145,  4311,  4405,  4406,  4407,  3239,  3240,
    3521,  3522,  2410,  2832,  3241,  3744,  4050,    87,   523,    88,
    1775,  2309,  1263,  2322,  1048,  1569,  1570,   806,   536,    89,
     545,  2347,    90,   563,  1839,   857,   882,  1350,  1351,  2385,
    2810,  2817,  2386,  2822,  3510,  2812,  3218,  3219,  2311,  2312,
    2813,  3221,  3507,  3491,  3492,  3201,  3728,    91,   592,  3274,
    2896,  2897,  4121,  4122,   883,    92,   522,  1093,  2159,  1575,
    2158,  1094,  1095,  2161,   671,   672,    93,   987,   588,  1448,
    1449,  1450,  1929,    94,   577,   969,  2867,  3257,  1907,   874,
    1259,  1430,   972,  1431,  1893,  2438,  1412,    95,  1008,  1007,
      96,   611,  1497,    97,   819,  1286,  1788,  2774,  3189,  1287,
    1288,  2323,  3868,    98,   564,   887,   888,  1353,  2388,    99,
     558,   875,  1832,   100,   548,   862,  1322,  1811,   101,   102,
     864,  3207,  4124,  4297,   552,  1814,  1326,  3413,  4147,  4249,
    4250,  4252,  4319,  4320,  4353,  4448,  4482,  4466,  4485,  4486,
    4489,  4496,  4497,   797,   995,   798,  3780,   799,   800,  2818,
    2819,  3281,   801,  2820,   802,  2923,  1049,  1572,   542,   494,
     622,   996,  2792,   804,  3971,  1015,  1064,   496,   497,   103,
     576,   926,  1406,  1396,  1405,  1880,  2432,  1884,  2434,  2435,
    3253,  2858,  3254,  2859,   974,  1876,  1881,  2860,   929,  1869,
    1870,  1871,  1872,  2851,  1866,  1890,   104,   865,   501,  1328,
    1329,  2358,   105,   591,   106,  1315,  1805,  1806,  2343,  2783,
    2344,   107,   895,   108,   844,  1799,   845,  1291,   846,   847,
    1305,  1299,  1308,  1302,  3873,  3720,  3721,  2331,  1262,  1065,
    2142,  3072,  1066,  1791,  2325,  2326,  3486,  3723,  3192,  3879,
    3880,   109,   135,   504,   648,  1055,  1374,   110,   111,   112,
     113,  1377,  1490,  2402,  1491,  2277,  1492,  1493,  1967,  1852,
    1717,  1718,  3176,  1204,  1205,  2280,  2743,  2744,   913,   657,
    1081,  1073,   128,   129,   130,   660,   661,   131,  1034,  1035,
    2595,  3031,  3385,  3638,  3639,  3834,  3976,  1075,  3841,  4291,
    4424,  1076,  1077,  3080,  3843,  4105,  4293,  4397,  1078,  2644,
    3399,  3977,  4211,   114,   997,   601,  1488,  1483,  1485,  1963,
    2475,   115,   116,   117
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -3779
static const int yypact[] =
{
    5149,  2356,    68, -3779,   389,   772, 49335,   716,   535,   535,
     431,  2929, -3779, -3779, -3779, -3779, -3779,  3001, -3779, 49335,
      68, -3779, 24210, -3779, -3779,   -41, -3779,    66,   535,    68,
     458, -3779, 49335, -3779,   586,  -152,    68, -3779, -3779, 44439,
   -3779,   431, 49335, -3779, -3779, -3779, 44439,   389,   284,   177,
     727,   -36, -3779, -3779, 49335,  2234, -3779,   655,  1369,   950,
   -3779, -3779,  1272, -3779, -3779, -3779, -3779, -3779, -3779, -3779,
   -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779,
   -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779,
   -3779, -3779, -3779, -3779, -3779, -3779, 24826, -3779, -3779, -3779,
   -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779,
   -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779,  1226, 49335,
    1317, 49335,  1501, 49335, 42603, 49335,  1151,    96,  1415, -3779,
   -3779,  1583, -3779, -3779,   535,   431, -3779, -3779, -3779, -3779,
   -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779,
   -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779,
   -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779,
   -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779,
   -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779,
   -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779,
   -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779,
   -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779,
   -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779,
   -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779,
   -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779,
   -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779,
   -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779,
   -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779,
   -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779,
   -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779,
   -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779,
   -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779,
   -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779,
   -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779,
   -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779,
   -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779,
   -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779,
   -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779,
   -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779,
   -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779,
   -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779,
   -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779,
   -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779,
   -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779,
   -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779,
   -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779,
   -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779,
   -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779,
   -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779,
   -3779, -3779, -3779, -3779, -3779,  1106, -3779, -3779,   389, -3779,
   -3779, -3779, -3779, -3779,  1732,  1578, -3779,  1589, 42603, -3779,
   49335, -3779, -3779, -3779,  1123, -3779,  1308, -3779,  1312,  1634,
    1637,  1642,  1089, 11063,  1663,  1663,  1663, 49335,  1685,  1663,
    1663, 49335, -3779,  1663, -3779,  1663,   535, -3779, -3779,  3986,
   49335,  1538,   822,   500, 42603,  1456, 49335,   389,    14, -3779,
    1701, -3779, -3779, -3779,   535, -3779,  1881,  1760,   220, 49335,
   -3779, -3779,   535,  1170,     8,  1370, -3779, -3779,  1495, -3779,
    4978,   149, -3779, -3779, -3779,  2757, 26674,  5912,  1495,  1340,
   -3779, -3779,  1478,   389,  -141,  1488,   389, -3779, -3779, 49335,
     389,   535,  1699, -3779, -3779,   226,   226,   226, -3779,   226,
   -3779,   226, -3779,   655,  1354, -3779, -3779,  1356, 49335,   829,
     895, -3779, -3779,  1364,   962, -3779,  1425, 39543, -3779, 49335,
   -3779, -3779, -3779, -3779,  1655, -3779, -3779, -3779,  1069, -3779,
   24210, -3779, -3779, -3779,    96, -3779, 49335,  1535, -3779, -3779,
   -3779, 24210,  1397, 49335,  1500, 24210, 24210,   136,    -7,  1315,
   49335, 49335,  1856, -3779,  2056, 39543,  1627, -3779,   265,   -99,
    1583,  2060, -3779,  1578, -3779, 49335, 49335, 49335, -3779, -3779,
   -3779, 45051,  1089,  1445,  1448,  1462, 16135, -3779,  1477,  1482,
    1484, 11063,  1487,  1492,  1515,  1517,  1526,  1529,  1531,  1539,
    1543,  1558,  1562,  1566,  1581,  1592,  1612,  1612,  1633,  1636,
    1672,  1678,   737,  1689, -3779,  1697,  1700,  1715, -3779, -3779,
    1721,  1725,  1731, -3779,  1734,  1745,  1763, 11697,  1766,  1768,
    1770, -3779, 21121,  1772,  1776,  1778,  1785,  1809,  1811,  1817,
    1821,  1832, -3779, -3779, 11063,  1633, -3779, -3779,  1834, -3779,
    1838,  1845,  1854,  1857,  1861,  1863,  1870,  1875,  1890,  1895,
    1897,  1900,  1909,  1915,  1918,  1633, -3779,  1421,  1924,  1929,
    1436,  1962, -3779,  1967, -3779,   257,  1973,  1612,  1633,  1633,
    1987,  1990,  1999,  2002,  2022, 16135, 16135, 16135, 11063, -3779,
   49335, -3779, 49335,   403,  3197, -3779,  2990, 16135,   269, -3779,
   -3779, -3779, -3779, -3779, -3779, -3779,  1499,  1594, -3779, -3779,
   -3779, -3779, -3779,  2034,  1575,  1961, 49335, 49335, 49335,  1885,
   49335, 49335, 42603,  1762, 49335, 39543, -3779,  1663,  1703,  4272,
    1889,  1724,  1922, -3779, -3779, -3779, -3779, -3779,  1945, -3779,
   -3779,  1848, -3779,  2050, -3779, -3779,   378, -3779,    76, -3779,
   -3779, -3779, -3779, -3779, -3779,  2059,  1758, -3779, -3779,   127,
   -3779, -3779, 49335, -3779, -3779, -3779, -3779,  2211,  2016, -3779,
   -3779, -3779,   796,  2421,   891, 24210, -3779,  1925, 11063,    60,
   -3779,  -208, -3779, -3779,  2336, -3779, -3779, 39543, 24210, -3779,
   -3779, -3779, 21739, -3779, -3779,  2590, -3779,  2038, -3779, -3779,
    1594,  2908, -3779,  1889,  2316, -3779,  2321,  2226,    -7,  2140,
   -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779,
    2096,  2757, -3779, -3779,   369,  2250,  2090,   407,   419, 35871,
     877,   420,   900, 27289, 36483,  2098, -3779, -3779, -3779,    81,
    2244, -3779,  2573, -3779, -3779,     5, -3779,  2120,  2431,     5,
   40155,  2490,  1486, -3779,   152, -3779,  2572, -3779, -3779, -3779,
   -3779, -3779,  2253,  2241, -3779, -3779,   324,  2519, -3779,   389,
   -3779,   700, -3779, -3779,  2265, -3779,  2490,     5,  1486, -3779,
    2505,  2627,   940,  2604,  -130, -3779, -3779, -3779, -3779, -3779,
     572,  2719, -3779,  2180, -3779, -3779, -3779, 24210, -3779, -3779,
   -3779,  2211, -3779, -3779, -3779,  2191, -3779,  2463,  2323, -3779,
   -3779,    31, -3779,  2222,   -30,  2697, -3779,   994, 40767, -3779,
   -3779, -3779,  2728,  2743,  1612,  2221, -3779, -3779, -3779,  2855,
   -3779, -3779,  2235,  2751,  2751,  2751,  2864, -3779, -3779, -3779,
   -3779, -3779, -3779,  2407,  2277, -3779,  1535, 24210,  2636,  2249,
   -3779, -3779,  2496, 11063, -3779, -3779, -3779,    21, -3779, -3779,
     209, -3779,  2830,  2457, -3779, -3779, -3779, -3779,  2725, -3779,
   -3779,  2855,  2779,  2751,  2680,  2271, -3779, -3779, -3779, -3779,
   -3779, -3779,   218, -3779, -3779, -3779, -3779, -3779, -3779, -3779,
    1383, -3779, -3779, -3779, -3779, -3779,  1535, -3779, 24210, -3779,
   -3779, -3779, 24210, -3779,  2274, -3779,  2275, -3779, 11063, 11063,
     322,  2845,  2907,  2907,  2907,   403,  2313, 11063, 11063, 11063,
   11063, 11063, 11063, 11063, 11063, 11063, 11063, 11063, 11063, 11063,
    1307,  2290, -3779, -3779,  1164, -3779,  2291, 11063, 11063,  2382,
   11063,  1594, 11063, 25442, -3779,  3922, 11063,   472,  2785, 11063,
   11063, 11063, 11063,  4098, 11063, 11063, 11063, 25442,  2920,  2301,
   -3779,  2297,  1331, 11063, 11063,  1434, 11063, 11063, 11063, 11063,
   11063, -3779, -3779, 11063, 11063, 11063, 11063, 16135, 11063, 11063,
   11063, 11063, 11063, 11063,  2907,  2907, 11063, 11063,  1446, -3779,
   11063,  1594,  1926,  1926, 11063,  1594,  7893, 11063, -3779, -3779,
   -3779,  2305, -3779, -3779, -3779, 25442,  2907,  2907, 11063, 11063,
    2845,  2845,  2845,   187,  2306,  1002, 11063, 27904,  2300, -3779,
   -3779, -3779, -3779, 11063, 11063, 11063, -3779, 16135, -3779, -3779,
    1931, -3779, -3779, -3779, 12331, 16135, 16135,  2310, 16135, 16135,
   16135, 16135, 16135,  2675, 16135, 16135, 16769, 17403, 16135, 16135,
   16135, 16135,   925,  2845, 42603, 16135, 11063, -3779, -3779, 49335,
   -3779, -3779, -3779,  2309, 24210,  1762, -3779, -3779,   565,  2789,
   -3779, -3779,  2318, 24210, -3779,  2307, -3779,  2674, -3779, -3779,
    2678,  2681,  2682, -3779, -3779, -3779, -3779, -3779,  2904,  2684,
   -3779,   389,  2690, -3779, -3779, -3779, -3779,  2342, -3779, -3779,
   -3779, -3779, -3779, -3779, -3779,  2446, -3779, -3779, -3779,  2348,
   -3779, 39543,  2348, -3779, -3779,  2348, -3779, -3779,  2348,    36,
    3590, -3779, -3779, 49335, -3779, 49947, -3779, -3779, 21739,   389,
   -3779, -3779, 12965, -3779, -3779, -3779,  2709,   130,  2351, -3779,
   24210, -3779,   403, -3779,    83,    83,  2596,   153, 42603, -3779,
   -3779,   139,  2354,  2439,  2362, -3779,  2441, 24210, 24210, -3779,
   -3779, -3779, -3779,   389,     8, -3779, -3779, -3779, -3779, -3779,
   -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779,  2364,  2843,
    2376, 39543,   744, -3779, 49335, -3779,  1542, -3779, -3779, -3779,
    2377, -3779, 11063, -3779, -3779, 49335, -3779, -3779, -3779, -3779,
   -3779,  2939, 11063, -3779, 39543,  1153,   987,   107,    81, -3779,
   -3779, -3779, -3779, -3779, 49335, 45663,  2384,  8527,  2502,  2782,
     389, 11063, -3779,  2410,  1578, 49335, 49335, 49335, 24210, 49335,
   24210, -3779,    23,    23, -3779, 37095, -3779, -3779, -3779, -3779,
       5, 49335, 49335,     5, 39543, -3779,  1486, 49335,     5, -3779,
    2798,  2515, -3779, -3779, -3779,  2865, -3779, -3779,  2858,  2417,
   -3779,  2884, -3779, -3779,  2544,  1486, -3779, -3779, 24210, -3779,
   -3779,  1486, -3779,  1486,  1486, 11063,     5,     5, -3779,  1107,
   -3779, -3779, -3779, -3779, -3779,  2568,  -141, -3779, -3779, -3779,
    -165,   226,  2666, -3779, -3779, -3779, -3779, -3779, -3779, -3779,
   -3779, -3779, -3779,    75, -3779, -3779, -3779, -3779, -3779, -3779,
   -3779,    51, -3779, -3779, -3779,  2010,  2923, -3779, 42603,  2699,
     771,   935,  2699,  2170,   389,   158, -3779,   158, -3779,  4719,
    2700,   203, 24210, -3779,  2433, 46275, 24210, -3779, -3779, -3779,
    1493,  2436,  2438,   403,  4772, -3779, -3779, 24210, -3779, -3779,
   -3779, -3779,  2488, -3779, -3779, -3779, -3779,  2014, -3779, -3779,
   -3779,   148,  2003,  2460,  2487,   183, 39543,  2880, 49335, 49335,
    1578, 49335, 49335, -3779, -3779,   736,  2713,  2717,  2720,  2450,
   -3779, -3779, -3779,  -229, 49335,  2892, 30975, -3779,   417,   380,
   -3779,  2907,  2456, -3779,  2466,  2467,  2470, 11063,    43,   961,
     953,  1236,  1288,  1006,   493,   507, -3779,  1347,   528,   530,
     581,  1057,   583,   210, -3779,  2473,  2485, -3779, -3779, -3779,
   -3779, -3779, -3779, -3779, -3779,  2482, -3779, -3779, -3779,   588,
     808,  1085,  1137,  2498,  2499, -3779, -3779, -3779, -3779, -3779,
   -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779,
   -3779, -3779, -3779, -3779, -3779,  2896, -3779,  1363, -3779, -3779,
   -3779, -3779,  2459, -3779, -3779,  1216,   833,   892,   313,  2492,
    1378,   916,  1452,  1466,  2508, 25442, 49335,  2907,  2510,  1253,
    1258,  2907,  2512,   933,  1276,  1496,  1521,  1552,  1286,  1318,
     948,  1559,  3155,  1366,   976,   988,   999,  1055,  1373,  2513,
    2514,  1081,   350,  2907,  2516,   352,  2517,  2520,  1426,  9161,
    9795, 10429,   480,  1098, -3779,  2528, -3779,  2297,  2529,  2530,
     356,  1451, -3779, 11063, -3779, -3779,  1062,    77,  2578,   131,
     107, -3779,  2670, 49335,  1998,   161, -3779, -3779, -3779, -3779,
   -3779, -3779,  1132, -3779,  2534, -3779,  2535,  2079,  2539, 11063,
     190,  2539,  3074,  1019,  1019, 16135,  2721,  2937, 11697,  1027,
   11697,  1027,  2539,  2539,  2539, -3779, 16135,  2538, 16135, 16135,
   -3779,  2845,   403,  2541,  1112, 49335, -3779,   565, -3779, -3779,
   -3779, -3779,    81, 39543,   106, 24210, 42603,  2545, -3779, -3779,
   -3779, -3779, -3779, -3779,   389, -3779, -3779,  3232, 24210, -3779,
   49335, -3779,  2618, -3779, -3779, -3779, 22355, 22355, -3779, 22355,
   -3779, -3779,   194,   302,  3545,  2575, -3779, -3779, -3779, 30361,
     403, -3779, 24210, -3779,  2942,    24, 24210,  2433, -3779,  2551,
   -3779, -3779, -3779, -3779, -3779,  1806,  2659, -3779,  2553, -3779,
   11063,   389, -3779, 39543, 39543, 24210, 24210,   377, -3779,  1465,
    3172, -3779,  2908, 18037,  2982,  2995, 22355, 22355, 22355, -3779,
   -3779, -3779, -3779, -3779,  1047,   403, -3779,  2550, -3779, 41379,
   -3779,   403,    81,  2559,  2562, -3779, -3779,  2930,   632, -3779,
    2565,  2570, -3779,  2566,  2569,  2576, 46887, 11063, -3779,   987,
   -3779, -3779,    81, -3779, -3779, -3779, 16135,  1697, -3779,   403,
   -3779, -3779,   389,  3018, -3779,   403,  2586, 49335, -3779, -3779,
   -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779,
   -3779,  3048, -3779,  2762,   587, -3779, -3779, -3779, -3779, -3779,
   -3779, -3779,     5, -3779, -3779, -3779, -3779, -3779,  2807,  2490,
    2519,  2782, -3779,     5,  1486, 24210,     5,     5,   403, -3779,
   -3779,  2645, -3779, -3779,  2594, -3779, -3779,  2645, -3779, -3779,
   -3779, -3779, 49335,  2639,  2752, -3779,  2597, -3779, -3779, 24210,
   -3779,  2600, -3779,  3045,  3189,  2490, -3779, -3779, -3779,    81,
      81,  2898, -3779,   389,  2733,  2738,  2745,  2746,  2747,  2783,
   -3779, -3779,   389,   389, -3779, -3779,    81, -3779,  1017, -3779,
   -3779, -3779, -3779,   389,   389,   389,   389,  2361,   389,   389,
    1570, -3779, -3779,    81,    81, -3779,   279, -3779, -3779, -3779,
   -3779, -3779, -3779, -3779,  1083, -3779,  2716,  3174,  2875,    81,
      81,  3174,    81,  2881,  2882,    81,    81,  2724,  3132,    81,
    3021,  2749,  2531,  3026,    81, -3779,  2754,  3146,    81,    81,
      81,    81,  3174,  2895,  3241,    81,    81, -3779,    81,  2903,
    2914,   174,  2913,  2915,    81,   929, 49335,    81,    81,  2918,
      81, -3779, -3779,  6242, -3779, -3779, -3779, -3779, -3779, -3779,
    -124, 22974, -3779, -3779,    81,   184, -3779,  2867, -3779, -3779,
   -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779,
    2664, -3779, -3779, 11063,  3148,  3152,  3153,  3154,  3163,  3165,
    3166,  3167,  3169,  3170,  3171,  3173,  3175,  3176,  3177,  3178,
    3179,  3190,  3192,  3194,  2701, -3779, -3779, -3779, -3779, -3779,
   -3779,   179,    81,    81,    81,    81, -3779,  2286, -3779, -3779,
   -3779, -3779, -3779, -3779, -3779, -3779, 42603,  3058,  2454,   -52,
   -3779, -3779, 42603, -3779, 49335, -3779,   381, 49335,  2726,  -153,
    2972,   406,   406, -3779, 24210, 24210, 24210, 49335,  2764,  2575,
   30975, -3779, -3779,  -165, -3779,  2722, 13599, -3779,  2730, -3779,
   11063, -3779, -3779, -3779,  1328, 11063, 11063,  3202,  2335, -3779,
   41991, -3779, -3779, -3779, 11063, 11063, -3779, 11063, 11063, 11063,
   11063, -3779, 11063, 41991,  2335, 11063, -3779,  2734, -3779,  3125,
    3127, -3779, -3779, -3779, -3779, 11063, -3779, 11063, 11063, -3779,
   11063, 11063, 11063, 11063, -3779, 11063, -3779, -3779, 16135, -3779,
    2731,  2737, -3779, -3779, -3779,  2739, -3779, 11063, -3779, -3779,
   -3779, -3779, -3779, -3779, 11063, -3779, 11063, -3779, 11063, 11063,
   11063, 11063, -3779, -3779, -3779, 14233, 11063, 11063,  2748, -3779,
   -3779, 11063, 11063, 11063, -3779, 11063,  1600, 11063,  1919, 11063,
    2077, 11063, -3779, 11063, -3779, -3779, -3779, -3779, 11063, -3779,
    1629, -3779, -3779,  2391, -3779,  1062,  2755, -3779, -3779,  1542,
   -3779, -3779, 42603, 11063, -3779, -3779, -3779, -3779, -3779, -3779,
   16135,   358,  2758, 16135, -3779,  3074,  4098,  4098,  2165, 11063,
     190,  3074, 11063,  2759,  2750, -3779, 11063, 49335, -3779, -3779,
   -3779, -3779, 42603, -3779, -3779, -3779, -3779,   106, -3779,  2307,
   -3779, -3779,  2433, -3779, -3779,  1641, -3779, 39543,  2756, -3779,
    2761,  2825,  2828,  2844, -3779, -3779, -3779, -3779, -3779, -3779,
   -3779, -3779, -3779, -3779, -3779, -3779,  2490,  1465, -3779, -3779,
    2753, -3779, -3779,  2496,  2862,  2795,  3135,  3324, -3779, -3779,
   49335, 16135, -3779,  3372,  2790,  2792, 49335,   403, -3779,  2873,
   -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779,    35, -3779,
   -3779,  2801,  2801, 19887, -3779, -3779, -3779, -3779, -3779,  3267,
     856,   856,   856, -3779, -3779, -3779, -3779,  3062, 39543,  3242,
    3243,  3244,   994, -3779,   447, -3779,  1327,  3198,  2490, -3779,
    3247, 43215, -3779, 31587, -3779, -3779, -3779, -3779,  1153,  2899,
    2901,   -27, -3779, -3779,  3199,  3031, -3779, -3779, -3779,    81,
     403, -3779,  2384,  8527,  2812, 28519, -3779,  1232, -3779,    54,
   -3779, 37707,  3280, 37707, 37707, -3779,  3093, -3779, -3779,  3018,
   -3779,  2575,  1486, -3779, -3779,  1837, -3779,  1107, -3779, -3779,
    1074,  3204,  3215, -3779,  3076,  1284,  3076,  1074,  1074, 25442,
    -165,  2504, -3779,  2361,  3150, -3779, -3779, -3779, 41379, 38319,
   -3779, -3779, -3779, -3779,  3356, -3779,  3359,  1481, -3779, -3779,
    1752,   935, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779,
   -3779, -3779, -3779, -3779, -3779, -3779, -3779,  2170,  1752,  1752,
     158, -3779,   116, -3779, -3779, -3779, -3779, -3779, 26058,    68,
   -3779,   211, -3779, 26058, -3779,  1493,  1493, -3779, 26058,    68,
    1232,  2361, 26058,  2361, 47499,    68,   389,   389,  2227,    81,
    2361, -3779, -3779,  3222, 49335,  3224, 26058, 26058, -3779, 42603,
   -3779,    81,   120,  2361,  1232,  1232, 26058,    68, 25442,  1688,
    1952, -3779,   389,    68, -3779, -3779, -3779, -3779, 24210,    68,
      68,  2213, -3779, -3779, -3779,  2361,  1952, 47499, -3779, -3779,
    6709, -3779, -3779, -3779, 19271, 49335,   274,   451, -3779,  2842,
   34035,    52,   944,  2932,  1361,  2851,  2857, 48111,   403,  2859,
    2361,   389,   389,  1232,   389,  2361,   389,   389,   389,   389,
     389,   389,   389,  2361,  2361,   389,  2296,   389,  2361,  4772,
     389,  1806,  1752,  1752,  2003, -3779,  3116,  3285,    81, -3779,
    1095, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779,
    2951, -3779,   167,  3043,  2866, -3779, -3779,   283, -3779, -3779,
    1139, 24210, 18655, -3779,  3105, -3779,  2905, -3779, -3779, -3779,
   -3779, -3779, -3779, -3779, -3779, -3779,  2860,  -165,  3128,  1186,
    2575,  2877, -3779, 11697,  1489, -3779,   403, 11063,   403,  1664,
   -3779,  2870,  2870,  2870, -3779,  2876, -3779, -3779,  2870,  3264,
    2870,  3266,  2878,  2885,  1665,  1741, -3779,  1673,  1541,  2083,
    1546,  2890,  2891,  1499, -3779, 11063, 11063,  1550,  1555,  -105,
    1102,  1115,   411, -3779,  1579,  3384, -3779, -3779,  1618,  1624,
    1646,  1648,  1119,  1659,  1692, 11697,  1668,   296,   460, -3779,
    1704,  1155,  1165,  1716, 11063,  1749, 11063,  1757, 11063,  1783,
    1788,  1795, -3779,  2096,  2391, -3779, -3779,  2893, -3779, -3779,
    2874,   403,  2894, -3779, -3779, 11063, -3779,   269, -3779, -3779,
   16135,   462,  2897, -3779,   403, -3779, -3779,  2900,  1499, -3779,
   -3779, -3779, -3779, -3779,  2906, -3779, 49335,  -222,  2910, 32199,
   39543, 39543, 39543,  2902, 11063, -3779, -3779,  3160, 24210, -3779,
    3290, -3779, -3779, -3779, -3779, -3779,  2909,  2911, -3779, -3779,
   -3779,  3074,  3262,  3149, -3779, -3779,  2917, 39543, -3779,  2757,
   25442, -3779,  2912, -3779,  2912,  1607,  2924,  1712, -3779, -3779,
   -3779,  2919,  2140, 18037,  3349,  2318, 39543, 39543, 39543, -3779,
    2575,  2575,   143,  2967,  3306, -3779, -3779, -3779, -3779, 48723,
   -3779, -3779, -3779, -3779,  1145, -3779,  2925,  2928,   242,  3151,
   -3779, -3779, -3779, -3779,  8527, -3779, -3779, -3779, -3779, -3779,
   -3779, -3779, -3779, -3779, -3779, -3779, -3779,  2490, -3779, -3779,
   -3779, -3779, 37707, -3779, -3779, -3779, -3779, -3779,     5, -3779,
    2934, -3779,  -223,    77, -3779,  1044, -3779, -3779, -3779,  3318,
    1074,  3076,  3076,  3320,  3210,   669,  2944, -3779,    81, -3779,
   -3779, -3779,  2757, -3779, -3779, 11063, -3779, -3779, -3779, -3779,
   -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779,
    1083, -3779, -3779, -3779, -3779,  2949,  3321,  3327,  1493, -3779,
   26058, -3779, -3779, 26058, 26058,    99, 47499, -3779, -3779, -3779,
   -3779, -3779, -3779,  2945, -3779, -3779,  1806, -3779, -3779, 38319,
     389, -3779, 26058,  2945, -3779, -3779,   422, -3779,   389, -3779,
   -3779, -3779, -3779, -3779, -3779, -3779, -3779, 47499,  2950, -3779,
     303, -3779, -3779, -3779, -3779, -3779,  1881, -3779, 47499, -3779,
   -3779, 47499, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779,
   -3779, -3779, -3779,  2955,  2254,  1141, -3779,  2957,  2954, -3779,
   -3779, -3779, -3779, 49335, -3779, -3779, 24210, -3779, -3779, -3779,
    6325, 49335, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779,
   -3779,  3180, -3779, 11063, 11063,  3227, 49335,  3228, -3779,  3510,
   49335,  3576, 47499, -3779,  2965, -3779,  2969, -3779,  2361, -3779,
   -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779,
   -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779,
   -3779, -3779, -3779, -3779,  2974, 49335,  1752,  2454, -3779, -3779,
   -3779, -3779,   389,  1139, -3779, -3779, -3779, -3779,  3236,  3245,
   49335, -3779, -3779, -3779, -3779,  3113, -3779, 24210,  3559, -3779,
    3140, -3779,  2978,   192,  4805, -3779,  2989,  2991,  2992, 30975,
    2575,  3353, -3779, -3779,  4098, -3779,   403, 11063,  1045, -3779,
   -3779,   239, -3779,  1048, -3779, -3779, -3779,  2993, -3779, -3779,
   -3779, -3779, -3779, -3779, -3779,  2698, -3779, -3779, -3779,  2335,
   -3779, -3779, -3779,  2994,  4098,  4098, -3779, -3779,  3157, -3779,
   11063, 11063, -3779, 11063, -3779,   215,  2997,  3022, -3779, -3779,
   -3779, -3779, 11063, -3779, -3779,  4098, -3779, 11063, -3779, -3779,
   11063, -3779, 11063, 11063, -3779,  1828, -3779,  1840, -3779,  1864,
   -3779, -3779, -3779,  2377, -3779, -3779,  1002, 49335, -3779, -3779,
    1718, -3779, -3779, 11063, -3779, 43215, -3779, -3779,  3212, -3779,
   -3779,  3429, -3779, -3779, -3779,  -151,  -151,  -151, 14867,   403,
    3487, -3779, -3779, -3779,  3290,  3377, -3779,    41, -3779, 49335,
    3007,  1154, -3779,  1751, -3779, -3779, -3779,  2096,  3008, -3779,
      81, 14867,  2801,  3140, -3779, -3779,  1607, 25442, 31587, -3779,
   -3779, 39543,  2318,  2318,  2318,  2490,  3436,  2862,  2862, -3779,
   29134, -3779, -3779,  3181, -3779, -3779, 32811, -3779, -3779, -3779,
   -3779, -3779, -3779, 28519, 46887, -3779, -3779,  2490, -3779,  1837,
    1542,  3829, -3779,  -165, -3779,  1074, -3779,  3392,  3393,  1074,
   -3779, -3779, -3779, 25442,  2575, 14867, -3779,   259,  2096,   403,
    3012,   303, -3779,  -129, 11063, 26058, -3779, -3779, -3779,  3016,
   -3779, -3779,  3519,  3520, -3779, 26058,  2014, 49335, -3779,  2939,
   -3779, -3779, -3779, -3779,  6325, -3779, 25442, -3779, -3779, -3779,
   -3779, -3779, 49335, -3779, 24210, -3779, 19271, -3779,  3019, -3779,
    2870,  2870,  2870, -3779, -3779, -3779,  2870, -3779,  2876,  3252,
   -3779,  2876,  2876, -3779, -3779, -3779, -3779, -3779,   239,  1374,
   -3779, -3779,   239, -3779, -3779, -3779,   168,  -198,  2876, -3779,
   -3779, -3779, -3779, -3779, -3779, -3779,  2870,  2870,  2870, -3779,
   -3779,   239,  2870, -3779,  2870, -3779,  2375, -3779,   191,   110,
    2870,  2870,  2870,  2993,  3014, -3779,   403,  4098,  3569, -3779,
   -3779,  3182,   389,  3512, -3779,  1755, -3779,  3028, -3779, 48111,
    1799, -3779, -3779,  2170, -3779, -3779, -3779, -3779,  3183,  1157,
   -3779,  3195,  3032,  3029, -3779, -3779,   389,  3033,  3034, -3779,
   -3779, -3779, -3779,  3643, -3779, 49335, 49335, 49335,  2722, -3779,
   38931, -3779,   642,   403,  3035,  3037,  3038,  3040,  3638,   186,
   -3779,  3640, 41991, -3779, -3779, -3779,  1801,  3319, -3779, -3779,
    2870, -3779,  2876, -3779, -3779, -3779,  3616, -3779, -3779,  2870,
    3438,   239, -3779, -3779,  3049, -3779,  3050,  3051,   226,  3052,
    1866,  1201,  1867,  3357,  3432, -3779,  3271, -3779,  1878,  1183,
    1939,  1964,  1984,  1991, -3779, -3779, -3779,  1410,    77, -3779,
   -3779,  1882, -3779,  3413,  3322,   609,  3083,  3083,  3083,  1697,
     403,  1902, -3779, -3779, -3779, -3779,  3451, -3779, -3779,  3064,
    3075, 49335, -3779,  3149,  2377, 25442, 14867,  3073,  3077, -3779,
     -30, -3779, -3779,  3069,  2318, -3779,  3661,  3500, -3779, -3779,
   42603,  3080, -3779, -3779,  3385, -3779, -3779, -3779, -3779, -3779,
   -3779, -3779,  2597,  2489,  3130,  1074,  1074,  2649,  3134, 11063,
   11063,  3084, -3779,  3128, -3779, -3779,   774,  2377, 11063, -3779,
    1806,  3149, -3779,  2009,  3091,  3094, 49335,  3095,  3097, -3779,
    3030,   274, -3779, -3779, -3779, -3779,    68, -3779, -3779,  2945,
      35,  3092, -3779, 49335,  3424, -3779, -3779, -3779, -3779,   816,
   -3779,  3100,   816,   816, -3779,  2250, -3779,  3136,   239, -3779,
   -3779,  3137, -3779, -3779, -3779,   816,  3101,   239, -3779, -3779,
   -3779, -3779,   816, -3779, 42603,   389,  2833,  3720, -3779,  3158,
   -3779,  3608,  3485,  3723, -3779,  3465, -3779,  3486,  3386,    81,
   -3779,   239, -3779, -3779,  3711, -3779,   239,  3711,   816,   816,
   49335, -3779, -3779, -3779, -3779, -3779, -3779, 49335, -3779,  1075,
   -3779, -3779, -3779,  2361,  1932,   389, -3779, -3779, -3779,  3115,
    3117, -3779, -3779, -3779,   944, -3779, 49335,  6325, -3779, -3779,
   -3779,  6242, -3779,  1078,  1934,   303,  3120,  1937,  1951,  3577,
    3296, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779, 41991,
   -3779,  3711,  3396,  3123, -3779, -3779, -3779, -3779, -3779, -3779,
   -3779, -3779, -3779, -3779, -3779, -3779, 11063, -3779, -3779,  3428,
    3583, -3779, -3779, -3779, -3779, -3779, -3779,  1327,  1327, -3779,
   -3779, -3779,  3742, -3779,  3219,  3229, -3779, -3779,  3230, -3779,
   -3779,   122,  2312, -3779, -3779, -3779, -3779, 14867,  3516,  3238,
   -3779, -3779, 49335,  3184, -3779, -3779,  1410, -3779, -3779, -3779,
   -3779, 11063, -3779,  3128,  2227, -3779, 29134, -3779,  1002, -3779,
    3200, -3779, -3779, -3779,  3205,   403,   403, 49335,  3353, -3779,
   -3779,  1493,  1493, -3779,   774,  1410,   303, -3779,  1954, -3779,
   49335, 49335,  1958, 49335, 49335,   856,   856,   856,  2296,  2296,
   -3779, -3779, -3779,   274, -3779,  3523, -3779, -3779,  1978, -3779,
     952,  3412, -3779, -3779, -3779, -3779,   816, -3779,   226, -3779,
   -3779, -3779, -3779, -3779,   226, -3779, -3779, -3779, -3779,  1612,
   -3779, -3779, -3779,  3431,  3201, -3779,  3164, -3779, -3779, -3779,
   34647, -3779, -3779, -3779, -3779, -3779, -3779, -3779,  3278, -3779,
   55455, -3779, -3779,   655,  3188, -3779, -3779, -3779, -3779,  1304,
   49335, 24210,  3227,  3340, -3779,  2939, -3779,   -30,  3105,  3140,
   -3779,  1398, 49335, -3779,  3439,    93,  2033, -3779,  3626, -3779,
   -3779,  3168,  2037, -3779, -3779, -3779, -3779,  3660, -3779, -3779,
   -3779, -3779, -3779,   133,  3430,  2361,  2361,  2361,   -95,  2312,
   -3779, -3779,  3225, 24210, 16135,  3283,  1981, -3779, -3779,  1393,
    2947, -3779,  1339,   303, 11063,  2490, 38319, -3779, -3779, -3779,
   11063,  3191, 11063,  3193,  2005, -3779, -3779,  3617,  3617, -3779,
   -3779, -3779, -3779,  2018,  2027, -3779,  2031,  2058, -3779, -3779,
   -3779,  3203, -3779, 49335, -3779, -3779, -3779,   261, -3779, -3779,
    2064, -3779,  2066, -3779,  1612, -3779, -3779, -3779, -3779, -3779,
   -3779, 11063,  3650,  3206, 49335,  1068, -3779, 56679, 56679, 49335,
   -3779, -3779, -3779, -3779,  5811, -3779, -3779,   725, -3779, -3779,
   -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779,  3778,
   -3779,  3185, -3779, -3779,  3187,  1220, -3779, -3779, -3779,  6325,
    3622,  1361, -3779, -3779, -3779, -3779,   192,  3196,  2140,   389,
      81, -3779,  1398, -3779, -3779, -3779,    81,   303,  3207,  3441,
   -3779,    93, -3779, -3779, -3779,  2033, -3779, -3779, -3779, -3779,
   -3779,  3752, -3779, -3779, -3779, -3779, -3779, -3779,   758, -3779,
   -3779, 25442, -3779, -3779,  1806, -3779, -3779, 49335, -3779,  3277,
      81,    81,  3692,  3694,    81,    81,    81,    81,  3209,  2947,
   -3779,  3673, -3779, -3779, 11063, -3779, -3779,   403,  3440, -3779,
    3763,    77,   403, 49335,   403, 49335, -3779, 49335,  1250, -3779,
   -3779,  3411, -3779,  1398, -3779, -3779,  3149, -3779,   805,   805,
     239,   226,   239, -3779,  3213,   403, 11063, -3779, 11063,  3239,
   -3779, -3779,  3655, 49335, -3779, -3779, -3779, -3779, 11063, -3779,
   55455, 55455, -3779, -3779, -3779, -3779,  3833,   -30,  3802,  3497,
    3808,  3666, -3779, -3779,  3510,  6325, -3779, -3779, -3779, -3779,
    2361, -3779, 35259, -3779, -3779,  1503, -3779, -3779, -3779, -3779,
   -3779,  3257, -3779,    81,  2227,  3248, -3779,  3283, -3779,  3246,
   -3779,   389,   389,    81,    81,  2634,  2634,  1806, 42603,  3350,
   -3779, -3779,    81,   303, 49335, -3779,   945,  3606, -3779,  2080,
    2085, -3779,  3844, -3779,  3845,  3273,  3286, -3779,  1398, -3779,
      93,  2033,  2092, -3779,  3889, -3779,   141,  3534,  3557, -3779,
   -3779, -3779,   487,   403,   403, -3779,    62, -3779, -3779,  3683,
    3769, 11063,   403, 52395,  3289, -3779, -3779, -3779, -3779, -3779,
   -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779, 56067, 11063,
   -3779,   725,  3778, -3779,  3560, -3779,  3561, -3779, -3779, -3779,
    3791, 55455, -3779,  3788, -3779,   -30, -3779, -3779, -3779, -3779,
   -3779, -3779, 25442, 14867, -3779, -3779, -3779,  3304, -3779, -3779,
     -65, -3779, -3779,   389,   389, -3779, -3779, -3779, -3779, -3779,
    2116, -3779, 42603, -3779, -3779,  3888,  3890,  3785,  3895,   945,
   -3779,   986, -3779, -3779, -3779, -3779, -3779, 48111, 48111, -3779,
   -3779, -3779, -3779, -3779, -3779, -3779,  3365,  3813, -3779, -3779,
     255,  3345, 11063, 55455, -3779,  3796, -3779,  3728,  1804,  3670,
    3325, -3779,  3315,   831,  3831, 56679, 56679, -3779, -3779, -3779,
   -3779,  3810, -3779, -3779, -3779, -3779, -3779,  3505, -3779,  2124,
   -3779, 15501, -3779, -3779, -3779, -3779, -3779, 42603, -3779,  3350,
   -3779,  3333,   226,   226,  3917,   226, -3779,  3918,  3928,   986,
   -3779,  3338,  2166,   805,   805,   389,  3731, -3779,   255, -3779,
   -3779,   227, -3779,   403, 53007,  3932, 49335, -3779, -3779, -3779,
   -3779, 11063, -3779, 43827, 53619,  3355, -3779, -3779, -3779,  3530,
   -3779,  3666,  3770,  3763, -3779,  3304, -3779,  3361, -3779,  3074,
    2947, -3779, -3779,  3363, -3779, -3779,   226, -3779,   226,   226,
   -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779, 11063, -3779,
    3842,  3456, -3779,  3369, -3779, 55455,  2102, 55455, -3779, -3779,
    3794,  3371,  1505, -3779,  3368, -3779, -3779, 55455,  3966,  3606,
   -3779, 15501,  3383, -3779, 11063,  3391,  3394, -3779, -3779, -3779,
   -3779,   403,  3970, 55455, 49335, 50559,  3585, 54231,  3837, 49335,
    6325,  3838,  3839, -3779, 55455, -3779,   226,  3805, -3779, -3779,
     403, -3779, -3779,  3489, -3779, 51171, -3779,  2648, -3779,  3442,
   -3779, -3779,  3907,   943, -3779, -3779, -3779,  3678,  3407, -3779,
   -3779, 55455, 55455, -3779, -3779, -3779, 33423, 11063, -3779, -3779,
   -3779, -3779, -3779,   994,   768, 20503,  3563, 51783, 54843, -3779,
   -3779, -3779, 29749, -3779, -3779, -3779,  3855, -3779,   403, -3779,
   -3779, -3779, -3779, -3779, 42603,  2183, -3779, -3779, 25442, -3779,
   33423, -3779, -3779, -3779, -3779, 23592,  3418, -3779,    81, -3779,
   -3779, 25442, -3779, -3779, 14867, -3779, -3779
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -3779, -3779, -3779, -3779, -3779,    98, -3779, -3779, -3779, -3779,
   -3779, -3779, -3779, -3779,  1736, -3779, -3779, -3779, -3779, -3779,
    1437, -3779,   410, -2333,  -428,  3098, -3779, -3779, -3779, -3779,
   -3779, -3779, -3779, -3779,   665,  1553,  3402, -3779,   409, -3779,
      84, -3779, -3779, -3779, -2911,   -38,  -225, -3779, -3779,   260,
      47,  3047,  -221, -3209, -3779, -3779, -3779, -3779, -3779, -3779,
   -3779, -3779, -3779,   421,   418, -3779, -3779,   236, -3779, -3779,
   -2245, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779,  -414,
    -365,  1792, -3779, -3779, -3779,  4035, -3779,  3506, -3779,  1260,
    2243, -3779, -3779, -3779,  -103,   256, -3779,   258, -3779,   262,
   -3779,   263, -3779,   264,   267,   268,   270, -3779,   271, -3779,
   -3779,  -366, -3779, -3779, -3779, -3779,   272, -3779, -3779, -3779,
   -3779, -3779, -3779, -3779,  -241, -3779, -3779,   -77, -3779, -3779,
    -228,   277, -3779,  -182,   280, -3779,   281, -3779,   -93, -3779,
     -89, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779,
   -3779, -3779, -3779,  3056, -3779, -3779, -3779, -2293, -3779, -3779,
   -2439,  2602, -3779, -1717, -3779, -3779, -1945, -3779, -3779, -1788,
     861, -3779, -3779,  -108,   432, -3779, -1428, -1874, -1860, -3779,
   -3779, -3779, -2015, -2008,  -772,  2346, -1228, -2252, -3779, -3779,
   -3779, -3779,   134, -3779, -3779, -2592,  2051,  2603, -3779,  2598,
   -3779, -3779,  1147, -3779, -3779,  1324,  1761, -3779,   919,  2794,
   -1270, -3779, -3779, -3779, -3779, -3779, -3779,   103,   249,     9,
   -3779, -3380,   634, -3779, -3779, -3779, -3779, -3779, -3779, -3779,
   -3779, -2601, -3779, -3779, -3779,  -258, -3779, -3779,  -164, -3779,
   -3779,  -216, -3779,   109, -2326, -3779, -3779, -3779, -3779,  2595,
   -1370, -3779,  3632, -3779,  -554,   490,  2089, -2251, -1437, -3779,
    -934,  -926, -2503, -3779, -3779, -3779, -3349,  1082,  1504, -3779,
     842,  2088, -1932, -3779, -3779, -3779, -3779, -3779,  1573, -3779,
   -3779,   866, -3779,   858, -3779, -3779, -3779, -3779,  -163, -3779,
     228, -2112, -3779, -3779, -3779, -1985,  1038,   827, -3779, -3779,
   -3779, -1633, -2223,  -475, -3779,   371, -2447, -2328,   800, -3779,
   -3779,   560, -3778, -3779,  -570, -2119, -2420,    55, -3779, -3779,
     574, -3125,  1698, -3779, -3779, -3779, -3166, -3263, -3779,   119,
   -3779, -3779, -3779, -3779, -3078, -3779, -3779, -1491, -2339, -3779,
   -3779,  4170,  4171, -1063, -2399, -2648,    25,    22, -3779, -3779,
   -3779,  2619, -1354,   195,   185,   193,  2036,  -649,   334, -2397,
   -3779,   387, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779,
   -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779,  2123,  -758,
   -3779, -3779, -3779, -3779, -3779, -3779, -3779, -2419,   898, -3779,
   -3779,  1619, -3779, -3779, -3779, -1889,  3214, -3779, -3779, -3779,
   -3779,  3564, -2188, -3289, -3779, -3779, -3779, -3779, -3779, -3779,
   -3779, -3779,  2727,  1756, -3779, -3779,  1744,  2257, -3779, -3779,
   -3779, -3779, -3779, -3779,   636,  1830, -3779, -3779, -3779, -3779,
   -3779, -3779,   913,  2665, -3779, -3779, -3779,    18, -3779, -3779,
   -3779, -3779,  2378, -3779, -3779, -3779, -3779,  2685, -3779, -3779,
   -3779, -3779, -3779, -3779,  1435, -3779,  1871, -3779, -1478, -3779,
   -3779,  1010, -1005,  1823,  -592,  1953,   394, -3779,  3627, -3779,
   -3779, -3779, -1691, -2470, -3779,  3326,  -882, -2576,  2379,  -552,
   -1824,  1050,  1557,  -692,  3493, -3779, -1161, -1138, -3779, -3779,
    -648, -3779, -3779, -3779, -3779, -3779,  2043,  2049,  -625, -3779,
   -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779,
    1472, -3779, -3779, -3779, -3779, -1733, -3779, -3779, -3779, -3779,
   -3779,  1314, -3779, -2089, -3779, -3779,  -452, -3779,  3102, -3779,
   -3779, -3779, -2323, -1958,  1769,   977, -3779, -3779, -3779, -3779,
   -3779, -3779, -3779, -3779, -3779, -2378, -3779, -3779, -3779, -3779,
   -3779,  1968, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -1680,
   -3779, -2260,   336, -3779,   484, -3779, -3779, -3779, -3779, -3779,
   -3779, -3779,    -4,   867,    -8, -2141, -1118,  1649, -3779, -3779,
   -1285,  3138, -2086, -3779, -3779, -3779,  1955, -3779, -3779, -3779,
   -3779, -3779,   951, -2591, -1433, -3779, -3779, -3170,  -944, -2288,
    -917, -3779, -1388,  1387,   502, -3779, -1864, -1110,  -769, -2877,
   -2538, -3779,  1687, -3779, -3779, -3779, -3779,  -168, -3779, -3779,
   -3779,   519,  1859, -3779, -3779, -3779, -3779, -3779, -3779, -3779,
   -3779, -3779, -3779,  -565,  -740, -3779,  2110,  2345, -3779, -3779,
   -3779, -3779, -3779, -3779, -3779, -3779, -3779,  2952,  2921,  1921,
   -3779, -3779, -2489, -3779, -3779,  1891, -3779,   767,  -911, -1805,
    1052, -3779, -3779,  1054, -3220, -3779, -3779, -3779, -3779, -3779,
   -3779,  1003, -3779,    56,  3685, -3779, -3779, -3779, -3779, -3779,
   -3779, -3779,  2705, -1076,  3609, -3779, -3779, -3779, -3779, -3779,
   -3779,  2350, -3779, -3779, -3779, -3779, -3779, -3779,  2861,  3706,
    -573, -1328, -3779,  -783,  2355,  1836,  -872, -3779, -3779, -3779,
    3710, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779,
    2501,   975, -3779, -3779, -3779, -3779,  2936, -3779, -3779, -3779,
   -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779,
   -3779, -3779, -3779, -3779, -3779, -3779, -3779,  1084,   -61, -3779,
      44,  -104, -3779,   -23, -3779, -3779, -3779, -3779, -3779,  -195,
   -3779, -3779,  -204,  -681,  -993, -1390,   696, -1798, -2550,  1076,
    2926, -3364,  -679, -1172, -1183, -1955,    63, -3779, -3779,  2742,
      65,   958,  -403,    -6, -2347,  -107,  -583, -3779, -2509, -3779,
   -3779, -3779, -3779, -3779, -3779, -3779, -3779,  1873, -3779, -3779,
   -3779,  1056, -3779,  3734, -3779,  2587,  1059,  3735, -1361,  2440,
    1898,  1896, -3779, -3779,  1904, -2041, -3779, -3779,   181, -3779,
    2509, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779, -3779,
   -3779, -3779, -3779, -3779, -3779,  2956,  3754,  3433, -3779,  3017,
   -3779, -3779, -3779, -3779, -3779,   463, -3779,   577, -2277, -1677,
   -3779, -3779,  2775,   595, -3779,  1564,  -357,  -644, -3779, -3779,
     454, -3779, -3779,   305,  3764,  3443, -3779, -3779, -3779, -3779,
   -3779, -2758,  -889, -3779, -3376, -2815, -1698, -3779, -3779, -2175,
   -3016, -3779, -3779, -1062, -3779, -3779, -3779, -3779, -2062, -3779,
   -3779, -3779,    30,  3824,  3828, -3779, -3779,  -162, -3779,  -167,
   -3779, -3779, -3779, -3779, -3779, -3779, -3779,  3684, -3779, -3779,
   -3779, -3779,  3686, -3779, -3779, -3779, -3779, -3779,  3688, -3779,
   -3779, -3779, -3779, -3779,  1507, -3779, -3779, -3779, -3779, -3779,
   -3779, -3779, -3779, -3779
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If zero, do what YYDEFACT says.
   If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -2597
static const yytype_int16 yytable[] =
{
     495,  1058,  1496,   868,   971,  1123,   924,   967,  1392,  1395,
    1378,  1003,  1706,   537,  1615,  1498,   543,   624,  1407,  2278,
    1577,  1131,  1456,  1705,  1427,  1659,   557,  1567,  1568,  1682,
    1771,  2411,  2412,   569,  1016,  1915,   572,  1914,   538,  2090,
     569,  1258,  1815,  1150,  1882,  2395,  2957,   554,   593,  1427,
    2087,  1101,  3018,   493,   562,  3544,  1727,  2816,  2785,  2907,
    1965,  2693,  3093,  1735,  3229,  1824,  3055,  1421,  3262,   137,
     644,   796,  1624,  2668,  2701,  1192,  1181,  3101,  1503,  1185,
    1047,  1050,  2063,  1990,  2520,   541,  1504,  1737,  1738,  2894,
     613,  1741,  1742,  1743,  1744,  1457,  1746,  1747,  1749,  1751,
    1752,  1753,  1754,  1755,  2749,  2702,  1072,  1080,  1922,  1088,
    2394,  3549,   581,   616,  3379,   495,  2588,   495,   623,   629,
    2837,  2825,  2879,  2636,  2129,  2953,  2931,  1933,  2528,  2772,
    2637,  1968,  2532,  2503,  3740,  1936,  1937,  2885,  1242,  3872,
    2515,  2003,  1349,  2547,  3623,  2895,  1311,  1209,  1210,  1311,
    1200,  1201,  1202,  2556,  2516,   979,  1819,  2314,   986,   612,
    3478,   638,  1243,  2407,  2478,  2479,   647,  3173,   618,  1830,
     620,  3768,  3584,  3589,  3564,  3989,  3590,  1209,  1210,  1500,
     549,  2490,  2625,  2003,  3766,  1458,  3070,  2934,  1306,   585,
     502,  3068,  1051,  2565,  2175,  3600,  1535,  3714,  2508,  2509,
    2492,  4102,  3622,  1209,  1210,  2670,  2893,  3677,  -865,   553,
    2373,  2745,  3428,  4273,  2530,  2531,   561,  2533,  2868,  2921,
    2536,  2537,  1432,   860,  2540,  3429,  1209,  1210,  3591,  2549,
    2139,  1796,  1261,  2552,  2553,  2554,  2555, -2544,  3116,  3430,
    2559,  2560,  1388,  2562,  3292,   933,   915,  1479,  4302,  2571,
     933,   915,  2575,  2576,   872,  2578,  2917,  2918,  3463,  3550,
    3428,  1244,   992,  4017,  2633,  2047,  3410,  1539,  1964,  4264,
    2591,  1410,  3782,  3429,  2925,  1068,  1500,   980,  2634, -2476,
    2472,  1486,  3003,  1992, -1485,  3689,  3738,  3430,  1312,  2511,
    3237,  1312,  3485,  1188,  1343,   550,   582,  2650,   933,   915,
     570,  1904,  1950,  2959,  2003,  -532,  1069,  1500,  2355,  1873,
     884,  2050,  1209,  1210,   262,   639,   264,  2620,  2621,  2622,
    2623,   631,  1507,  3307,  2135,  3249,  3224,  4214,  1333,  1209,
    1210,  1334,  2078,   136,  1580,  2566,  -533,  4325,  2640,  3217,
    1244,   132,  1425, -2544, -2544,  3990,   571,  1053,  1986,  -438,
    3260, -2407,   662,   546,  3111,  3112,  2293, -1686,   589,  1905,
    3118,  3822,  3120,  1827,  3824,  2877,  1209,  1210,  1209,  1210,
    3061,  3062,  1209,  1210,  1209,  1210,  2960,  3893,  4273,   499,
    1874,  3715,  1466,   500,  1540,  3191,  1560,  3891,  1541,  2645,
    1986,  2848,  2856,  4068,  1437,  3593,  1209,  1210,  3594,  1542,
    2926,   652,   654, -1686,  3021,  3095,  1828,  1033,  3261,  2160,
    1556,  2646,  2849,  1561, -1485,  3075,  3910,  3410,  3860,  1209,
    1210,   885,  3801,   813,   133,  2004,  1054,  1209,  1210,  1338,
     560,  3805,  3278,  1209,  1210,  1536,  3308,   853, -1773,   993,
     640,  1797,  2356,  2850,  1303,  2079,  2831, -1445,  1964,  2374,
   -2544,   547,  2657,  3022,  1623,  3821,   590,  3004,  1070, -2408,
    3823, -2407,   632,  1581,  1467,  1951,   981,  2004,  1150,  1952,
    1189,  3985,  1524,  2314,  2961,  1335,  1209,  1210,  1209,  1210,
    1487,  1556,  3411,  1767, -1445,   643,  3157,  1877,  1961,  2641,
    1052,  1074,  1082,   886,  3920,  3853,  1209,  1210,  4265,  1087,
   -2596,  3551,   623,  1211,   629,   861,  1212,  3881,  2580,  1209,
    1210,  1986,  3266,  1768,  2925,  2429,  1557,  1558,  1559,  3076,
    3238,   809,   873,  1209,  1210,   629,  1543,  1246,  4018,  3299,
   -1977,  1451,  3289,  3288,   848,  1906,  3290,  3291,   623,  1771,
     858,  2546,  2246,  1376,  1209,  1210,  1209,  1210, -1485,  3232,
    3233,  3234,  2373,   876,  2315,  3301,  3464,  1389,  1917,  1211,
    1990,  1920,  1212,   581,  1245,  4298,  1924,  1503, -2120, -2408,
     925,  1798,  1732,  2935,  3293,  1504,  1966,  2939,  1349,  1875,
   -2145, -2257,  1211,   988,  3103,  1212,  2514,  1648,  2004,  3287,
    1649,  2955,  2956,  2830,  1939,  1940,  3911,  1209,  1210,  1209,
    1210,  2966,  1006,  1740,  1209,  1210,  2451,  2295,  1349,  2903,
    1411,   623,   859,  1020,  2927,  2636,  2658,  1503,  2298,  2375,
    1761,  2301,  2637,  1544,   613,  1504,  2063,  3282,  3396,  2588,
     495,  3267,  3268,  3411,  1768,   613,  2357,  1045,  2515,   613,
     613,  3504,  4442,  1245,  1059,  1020,  2592,  2176,   581,   623,
    2777,   581,  2516,  1537,  3718,   989,  2869,  1591,  1592,  1089,
    1090,  1091,   586,  3710,  1433,  1096,  4175,  2938,  1211,  2940,
    1069,  1212,  2261,  3714,   962,  1307,  2951,  2292,  1935,  3063,
    4143,   551,  3174,  1032,  1647,  1211,  4162,  -865,  1212,  2963,
    1086,  1831,  1660,  1030,  1662,  2972,  2974,  2588,  1774,  2129,
    3999,   897,  3547,  2915,  1042,  1257,  1675,  1676,  1677,  3100,
    2632,  2990,  2974,  1820,  1681,  2362,  1151,   817,  1792,  2838,
    3984,  4203,  1211,  4046,  1211,  1212,  2567,  1212,  1211, -2476,
    1211,  1212,  3899,  1212,  2950,   866,  3039,  3511,  1537,  1991,
    3108,  3044, -1485,   879,  3235,  3236,  2958,  1213,  2920,  3052,
    3053,  1968,  1211,  3071,  3057,  1212,  2633,  3678, -2476,  1769,
    1992,  3592,  3431, -1485,  3408,  1817,  2281,   994,  3302,   583,
    2634,  1033,   990,   655,  1206,  1211,  1208,  1213,  1212,  2884,
    2134,  2140,  1837,  1211,  -532,  2928,  1212,  3620,  1845,  1211,
    2141,  2374,  1212,  2919,   815,   962,  2193,  2117,  1190, -2407,
    1251,   495,  1253,  1213,  1020,   495,   623,  3250,   495,   623,
    3431,  1862,  1393,  3252,  3395,  -533,  1398,  1403,  1712,  1713,
     877,  3108,  1070,  3066,  1209,  1210,  1213,  4113,  -438,  4326,
   -2407,  4330,  1211,  1424,  1211,  1212,  1438,  1212,   584,  4294,
    4069,  1537,  2194,  3414, -1445, -1977,  1316,  1209,  1210,  1209,
    1210,  1921,  1211,  1785,  1252,  1212,  4163,  3715,  1256,   613,
    1897,  1260,  3077,  1304, -2596,  1211,  2659, -1950,  1212,  1523,
    2315,   623,   613,  3575,  3576,  2790,   613,  3006,  4268,  1211,
    1769,  3116,  1212, -2120,  3116,  3116,  1320,  3534,  3554,  3555,
     850,  3538,  4208,  3569,  3438, -2145, -2257,  2816,  3366,  2135,
    1211,  3116,  1211,  1212,  4169,  1212,  4171, -2408,  1209,  1210,
    2639,  2510,  1213,   623,  1950,  3601,  1452,   623,   623,  1563,
    1768,  3621,  3624,  3626,  3627,  1840,  3529,  3158,  1327,  1213,
     136,  3982,  1209,  1210,   623,  1970,  1340,  1473, -2408,  1846,
    3185,  1346,  3533,  3938,  1712,  2212,  3537,  3515,  2443,  1209,
    1210,  2418,  3758,  1211,  3514,  1211,  1212,  1756,  1212,  3716,
    1211,  2375,  3759,  1212,  1209,  1210,  1213,  3023,  1213,  1209,
    1210,  2433,  1213,  4243,  1213,  4342,  3210,  1209,  1210,  1324,
    2178,   613,  2247,  2250,  2251,  2447,  2219,  2267,  2268,  2754,
    2755,  4168,  1209,  1210,  3577,  3116,  1213,  2422,  3578,  3760,
    1289,   138,  1499,  4296,  1209,  1210,  2147, -1977,  4090,  1537,
    2465,  2167,  1427,  1461,  3419,  1209,  1210,  1650,   498,  1213,
    1651,  2477,  1209,  1210,   581,  2395,   581,  1213,  3597,  3598,
    3599,   613,  3271,  1213,  2932,  2932,  3602,  4480,  1388,  4119,
    3454,   503,  3142,  3143,  3628, -2120,  2515,   559,  1427,  2166,
    2445,  1915,  2636,  1915,  1915,  2873,  2874, -2145, -2257,  2637,
    2516,  2450,  2520,  1990,  2453,  2454,   499,  1394,  2497,  2572,
     500,  1209,  1210,  1209,  1210,  1023,  1213,  1951,  1213,   732,
    2715,  1952,   613,  1061,  2514,  3530,  1573,  4269,   555,  2672,
    2394,  3159,  3160,  3182,  3183,  2805,  1213,  1209,  1210,  4245,
    1722,  1209,  1210,  3195,  3196,  3197,  2547,   606,  2003,  1213,
    4246,  2262,  3684,  3024,  1209,  1210,  4120,  3717,  1209,  1210,
    2003,  3687,   602,  1213,  2878,  2184,  1024,  1151,  2498,  2753,
    3718,  1209,  1210,  2300,   118,  1209,  1210,  1760,   852,  2185,
    3451,  1151,  4208,  2063,  1213,  3924,  1213, -2328,  2461,  1847,
    3438,  1564,  3895,  1209,  1210,  1571,  2499,  3751,  3752,  4164,
    2188,  1226,  2189,  2590,  2396,  4091,  1769,  1986,  1757,  1226,
    3424,  1209,  1210,  3424,  3392,  1325, -1773,  2122,  2758,  2759,
    1211,  1209,  1210,  1212,  1474,  2278,  2900,  1503,  3543,  1707,
    2313,  1758,  3366,  2633,  1982,  1504,  2129,  1213,   732,  1213,
    1706,   623,  2632,  1211,  1213,  1211,  1212,  2634,  1212,  1321,
    2317,  2302,  1453,  2190,  1025,  2192,  1991,  1209,  1210,  2444,
    2199,  2517,  3719,  2801,  2500,  4481,  2348,  2752,  3918,  3919,
    4108,  1829,  1209,  1210,  1867,  4218,  4148,  2762,   623,  2404,
     851,   136,  1255,  1764,  2423,  4373,  4374,  2573,   613,  1986,
    2369,  2370,   120,  4165, -1773,  3272,  3986,   613,  4235,  4236,
    4081,  1101,   587,  1992,  1211,  3081,  2213,  1212,  2361,  1209,
    1210,  2628,  4098,  3671,  1209,  1210,  3139,  2462,   756,  1798,
    4166,  1009,  3018,  4099,  4505,   603,  1706,  2405,  1211,  1608,
    1768,  1212,  1209,  1210,  2463,   623, -1795,  2898,  2151,  3792,
     880,  2501,  1209,  1210,  1129,  1211,  2464,  1801,  1212,  1804,
    2285,  3204,   613,  3681,   668,  1986,  4247,  1766, -2328,  1580,
    1211,  3972,  2152,  1212,   613,  1211,  3425,  1986,  1212,  3425,
    2543,  4092,   623,  1211,  1209,  1210,  1212,  3850,  3925,  1983,
    2588,   613,   613,  1580,  1209,  1210,   581,  1462,  1211,  1609,
    1229,  1212,  1759,  1389,  3587,  2134,  2320,  2861,  1229,  3761,
    1211,  2588, -1796,  1212,  3499,   623,  2638,  1130,  1849,   605,
    2088,  1211,  1768,   669,  1212,  1706,  1857,  1610,  1211,  1858,
    3082,  1212,  1209,  1210,  1808,  2465,  2970,   614,   623,  1209,
    1210,  3646,  2004,  3793,  2089,  3428,  2135,   756,  1878,   925,
    3647,  1972,  2639,  3426,  2004,  1868,  3436,  3500,  3429,   495,
     495,   495,   613,   495,   613,  4159,  4082,  2862,   581,  1916,
    1964,  1026,  3430,  1129,  1213,  1918,   495,  1211,   623,  1211,
    1212,   495,  1212,   933,  3585,  3794,  3926,  2932,  3972,  3972,
    2200,   565,  1209,  1210,  2123,  1611,  1580,  1213,  1604,  1213,
    1768,   962,   613,  1211,   881,  4152,  1212,  1211,  1580, -1795,
    1212,    43,  1898,  1899,  1900,  2210,  1902,  1209,  1210,  1715,
    1211,  1463,  1667,  1212,  1211,  1894,  4049,  1212,   617,  1919,
    3989,  1901,  1915,  1903,  1923,  4248,  1027,  1211,  1028,  2286,
    1212,  1211,  2514,  4100,  1212,  4317,  1464,  2466,   656,  3027,
    4153,  1010,   623,   670,  2546,  1209,  1210,  2502,  1213,  1211,
    4259,  3060,  1212,  2863,  3028,  1863,   613,  2833,  2854,  2083,
     613,  1934,  1612,  3987,  2211, -1796,  4318,  1211,  1011,  2274,
    1212,   613,  1213,   962,  2890,  3648,  1769,  1211,  3646,  1942,
    1212,  1950,  3832,  1864,  2545,  2379,  2891,  3647,  2215,  1213,
     623,  1560,   495,   495,  1850,  2149,   495,  1209,  1210,  3083,
    3859,  2467,  1209,  1210,  1213,  2227,  1209,  1210,  1096,  1213,
    2165,  1209,  1210,  1211,  3018,  1671,  1212,  1213,  1562,  2002,
    2234,  3972,  3972,   636,  2179,  2080,   854,  1693,  1211,  2085,
    2864,  1212,  1213,  3102,  4421,  1209,  1210,  3018,  3018,  3181,
    4085,  4086,  2404,  2834,  1213,  2145,  2146,  4048,  2238,  3427,
    2910,   962,  3427,  4422,  1943,  1213,  1209,  1210,  1769,   262,
    2239,   264,  1213,  4154,    57,  1211,  4300,  1706,  1212,  4304,
    1211,  2240,  1716,  1212,  1209,  1210,  4028,  2183,  3220,  2632,
    1209,  1210,  1236,  1237,  1238,  1239,  1240,  1241,  1211,  2491,
    3990,  1212,  1238,  1239,  1240,  1241,  4029,  3084,  1211,  1151,
    2220,  1212,  1209,  1210,  1209,  1210,  1056,  1057,  2757,  2318,
     855,  1213,   608,  1213,  3972,  1209,  1210,  1425,  1428,  3264,
    1209,  1210,  3648,  1851,  1209,  1210,   630,  2241,  2191,  3972,
    1211,  2287,  2275,  1212,  1865,  3579,  1769,  1213,  3582,  3583,
    1211,  1213,  3972,  1212,  1951,  3833,   619,  2288,  3849,  1131,
    1181,  1185,   120,  2245,  1213,  3595,  2201,  2284,  1213,  1991,
    1209,  1210,  2088,  2911,   262,  2790,   264,  3067,  1613,  1429,
    2263,  1213,  1209,  1210,  3140,  1213,  2697,  2892,  1211,  4310,
     856,  1212,  2306,  2703,   643,  1211,  2089,  3141,  1212,   647,
    2307,  3152,  2417,  1213,  4400,  1247,  2709,  1209,  1210,  2308,
    3125,  2937,  3781,   732,  3972,  1209,  1210,   623,  2202,   613,
     623,  1213, -1686,  1209,  1210,  2306,  3972,  3972,   732,  3392,
    2278,  1213,   613,  3246,  2324,  2964,  2965,  3162,  -203,  2724,
    2330,  2330,  2734,  2330,   651,  1614,  2865,  3163,  1211,  1209,
    1210,  1212,   649,   623,  1209,  1210,   613,  2213,  3781,  3685,
     613,  1209,  1210,  2497,  3702,  1261,  2971,  1213, -1686,  2992,
    1209,  1210,  2180,  1211,  2671,  3972,  1212,   623,   623,   613,
     613,   566,  1213,  3696,  3042,  3972,  3298,  1151,   566,  2639,
    2330,  2330,  2330,   663,  1209,  1210,  4198,  2209,  1355,   581,
     511,   976,  2134,   623,  2768,   977,  1209,  1210,  2638,  2329,
    2329,  1211,  2329,   665,  1212,   924,   666,  2181,  1246,  1213,
     925,   667,  2677,  2498,  1213,  2353,  3972,  1608,  3972,  1327,
    1209,  1210,  1209,  1210,  2223,  1516,  1517,   805,  3972,  2224,
     810,  2440,  1213,  1882,  1209,  1210,  2368,  1793,  1346,  2372,
    1794,  2499,  1213,  1795,  3972,   849,  3972,  2228,  3972,  2329,
    2329,  2329,  4149,  1211,  4150,  3972,  1212,  2232,  1211,  2182,
    1246,  1212,  1211,  3255,  1554,  1212,  3972,  1211,   869,   613,
    1212,  1608,  2379,  1378,  1213,  1209,  1210,  1609,  4347,  4347,
    2380,   863,  3972,  3972,  1213,  3431,  2460,  4042,  4043,  2233,
    1427,  1211,   871,   613,  1212,  1209,  1210,  2436,  3972,  3972,
    2151,   889,   756,  3972,   978,  1610,  3586,  3363,  2949,  2500,
     891,  4044,  1211,  2912,   985,  1212,  3531,   756,  2186,  2187,
    1209,  1210,  1213,   881,  2152,  1004,  3422,  3275,  1129,  1213,
    1211,  1609,  1005,  1212,  2206,  1246,  1211,  2237,  2452,  1212,
    1209,  1210,   852,  1129,  2242,  1013,  3258,  1209,  1210,  2214,
    1246,  4014,  4015,  4016,  1209,  1210,  3456,  3457,  1211,  1610,
    1211,  1212,  2471,  1212,  1022,  1209,  1210,  1043,  4334,  2626,
    1915,  1211,  3670,  1611,  1212,  2642,  1211,  3469,  2481,  1212,
    1211,  1033,  1213,  1212,  1706,  1062,  2501,  2488,  2489,  1629,
    2574,  1180,  1046,  1209,  1210,  2381,  2382,  2254,  2493,  2494,
    2495,  2496,  1063,  2504,  2505,  2589,  1184,  1213,  1067,   933,
     915,   118,  1539,  1393,  2379,  1098,  1211,  2497,  1099,  1212,
    2973,  1969,  2269,  2216,  1246,  2122,  1393,  1611,  1211,  1247,
    1706,  1212,  1100,  1209,  1210,  2383,  2290,  2217,  1665,  1209,
    1210,  2898,  3129,   998,   999,  1213,  1000,  1102,  1001,  1728,
    1612,  2736,  1103,  1211,  1104,  3989,  1212,  1107,  1209,  1210,
    3105,  1211,  1108,  1706,  1212,  2097,  2098,  2229,  1246,  1211,
     623,  1246,  1212,  1250,  2970,   994,   623,  2498,  2643,  1247,
    4415,   495,  4417,  1247,  2396,  1109,  1633,  1110,   613,   613,
     613,  2666,  2230,  1246,  2669,  1211,  1111,  1213,  1212,  1112,
    1211,  1113,  1213,  1212,  1612,  2499,  1213,  1211,  4435,  1114,
    1212,  1213,  3128,  1115,   623,  2750,  1211,  3130,  3294,  1212,
    1292,  3136,  2760,  2231,  1246,  4110,  3137,   623,  1116,  1540,
    2235,  1246,  1117,  1541,  2648,  1213,  1118,  2381,  2382,  4125,
    1211,  2506,  2507,  1212,  1542,  2771,  4467,  4468,  3107,  3305,
    3144,  1119,  1211,  1249,  2302,  1212,  1213,  2662,  2663,  2664,
    3311,  1226,  1120,  3313,  3216,  4131,  4132,  3557,  3558,  4135,
    4136,  4137,  4138,  2500,  1213,  1986,  1211,  3223,  1211,  1212,
    1213,  1212,  1121,  1261,  1261,  1261,  4216,  1634,  1254,  3148,
    1211,  1637,  2502,  1212,   262,  3149,   264,  4416,  1638,  3631,
    2742,  1246,  1213,  1124,  1213,   594,  1126,  2112,  2113,  2738,
    3907,  3908,  2775,  2776,  3387,  1213,   623,  3150,   962,  3151,
    1213,  1993,  1056,  1057,  1213,  3990,   933,   915,  1729,  1265,
    3153,  1211,  1162,  1290,  1212,  2638,  3124,  2187,  2982,  3156,
    2983,  2769,  1127,  3180,  3127,  1246,   623,  1226,  1128,  3506,
    2501,  1211,  1179,  3528,  1212,  1298,  1613,  -623,   595,  1132,
    1213,   623,  1706,  3154,  1246,  1193,  1194,  1133,  4233,  4234,
    1134,  1543,  1213,  3220,  2517,  3161,  1211,  4242,  1639,  1212,
    1427,  2984,  3102,  3226,  3227,  1135,  2518,  3164,  4338,  3480,
    1246,  1136,  2123,  2278,  2799,  1137,  1211,  1213,  1768,  1212,
    2799,  1138,  2985,  1211,  1139,  1213,  1212,   118,  2122,  2681,
    1613,  2417,  1393,  1213,  2332,  1140,  2333,  2821,  1293,  1300,
    3166,  1211,  3502,  3503,  1212,  1994,  3636,  3637,  3168,   596,
    1310,  1641,   623,  1141,  -630,  2682,  1144,  2986,  1145,  1213,
    1146,  3603,  1152,   900,  1213,  2842,  1153,  2844,  1154,  1211,
    1229,  1213,  1212,  1301,  3170,  1155,  1584,  1585,  1586,  3171,
    1213,   704,  1309,  2399,  2400,  2401,  3172,  2124,  1544,   925,
    3642,  3643,  3674,  3682,  1605,  1916,  1317,  1916,  1916,  1156,
    3767,  1157,  2771,  -623,  1213, -1773,  3604,  1158,   506,  1211,
    2683,  1159,  1212,  2684,  1294,  1211,  1213,  3605,  1212,  3474,
    1295,  2685,  1160,  1707,  1163,  3693,  1668,   119,  1164,  1672,
    1323,  3475,   623,   623,  1211,  1165,  2841,  1212,  2686,  2003,
    1213,   709,  1213,  2088,  1166,   120,  2497,  1167,  1689,  1690,
    1730,  1168,  1694,  1169,  1213,  3476,  1229,  3695,  3697,  1246,
    1170,  4002,  4006,  3606,  1296,  1171,  1731,  2089,  1319,  3701,
    1708,  1709,  2589,  3711,  1246,  3874,  2502,  2589,  1986,   962,
    1172,  1297,  2589,  1311, -2587,  1173,  2589,  1174,  2945,  1642,
    1175,  1439,   901,  3726,  3727,  1213,  2122,  2924,  2945,  1176,
    2589,  2589,  1414,   623,  1644,  1177,  2498,  2936,  1178,  1995,
    2589,   121,  1707,  2946,  1182,  1213,  1331,  1231,  1232,  1183,
    1996,  1440,   613,  3836,  2507,  3851,  3852,  1997,  3855,  3852,
    3703,  2945,  2125,  3607,  2499,  2967,  2687,   721,  2589,  3002,
    1213,  2978,  3856,  3852,  3020,  3912,  3503,  2980,  2981,  3915,
    3852,  3037,  1186,  2461,  2987,  3704,   262,  1187,   264,  1415,
    1213,  2947,  2948,  1191,  1769,   902,  4449,  1213, -1485,  3922,
    3923,  2517,  4026,  4027,  1341,  3705,  1441,  1195,  3875,  3876,
    1196,  1442,  3706,  3877,  3878,  1213,  1416,  2977,  -786,  1197,
    2628,  2979,  1198,   122,   597,  2123,  4056,  4057,  2988,  1352,
    3769,  1768,  2500,  1231,  1232,   613,  2589,  4002,  1261,  4061,
    3852,  4006,  1199,  1213,   737,  3019,   598,  -623,  4062,  3852,
    1998, -1485,  4064,  3852,  1248,  1312,  3040,  3041,  4010,  3043,
    1354,  3045,  3046,  3047,  3048,  3049,  3050,  3051,  2688,  1371,
    3054,  4506,  3056,   924,  1372,  3059,  1986,  1373,   599,  4065,
    3852,  3462, -1485,  1213, -1485,  4070,  4071,  4072,  4071,  1213,
    1234,  1235,  1236,  1237,  1238,  1239,  1240,  1241,  3820, -1485,
    2124,  4253,  4057,  1376,  3086, -1485,  4254,  4057,  1213,  2501,
    2543,  1379,  2462,  4262,  3503,  1384,  1056,  1057,  1385, -1485,
    1408,  3481,  3608,  1470,  1471,  1472,  1404, -1485,  3609,  2463,
    1409,  1477,  1478,  2461, -1485,   600,  2801,  4308,  4309,   509,
    1413,  2464,  1999,  2461, -1485,  4354,  4355,  1425,  3325,  1608,
    2088,   123,  1434,  2004,  1443,  1435, -1485,  3667,  3668,   900,
    2324, -1485,  1436,  1316,   623,   623,   623,  1455,  3610,  -623,
   -1485,  1973,   613,  1459,  2089,  1460,  1234,  1235,  1236,  1237,
    1238,  1239,  1240,  1241,  1465,  1974,  2517,  4372,  3389,  4452,
    4453,   623,   962,  2123,  1707,  3931,  4002,  4006,  2518,  1768,
    1475,  3931,  1476,  3440,  4494,  4495,  3441,  1151,  2689,  1609,
     623,   623,   623,  1481,  3442,  3865,  3866,  1482,  -623,   124,
    2465,  1696,  1697,  3245,  3518,  3519,  1417,  1444,  1706,  3487,
    3488,  3443,  1393,  3724,  3725, -1485,  3611,  3013,  3653,  4123,
    1484,  3203,  3749,  1489,  1494,  2125,  1500,  1506,  1508,  3679,
     764,  1510, -2587,  1226,  1514,  1513,  1916, -1485,  1518,   677,
     807,   808,  2462,  1521,   811,   812,  1522, -1485,   814,  1525,
     816,  1526,  2462,  2690,  3444,  1527,  1548,  1769,   125,  2463,
    1549,   903,   904,  1553,   906,  2168,   908,  1550,   901,  2463,
    1445,  2464,  1555,  1556,  3244,  -623,  1574,  3772,   909, -1485,
     506,  2464,  2691,  1576,  4126,  3014,  1244,  1587,  2624,  1580,
    2544,  1607,  1618,  1190,  2589,  2502,  1653,  2589,  2589,  1664,
    2945,  2019,  2020,  1665,  2545,  1666,  1704,  1714,  1723,  3445,
    1739,  1745,  2466,   623,  1776,  2088,  2589,  1765,  1772,  3612,
    1773,  3775,  1779,  1783,  1975, -2587,  1780, -1485,   704,  1781,
    1782,  2945,  1784,  1356,  -769,  -769,  1418,  2022,  1786,  2089,
     962,   902,  2945,  1357,  1787,  2945,  -769,  1789,  1790, -1485,
    2465,  2221,  1813,  1816,  1825,  2225,  1833,  2025,  1419,  1358,
    2465,  1834,  3015,  1836,  1835,  2026,  1842,  3317,  2019,  2020,
     613,  1359,  1360,  1361,  1843,  3374,  2467,  2248,  1844,  1853,
    1859,   708,  3753,  1446,  1891,  3300,  1883,  1362,   709,  2028,
     495, -1485,  1225,  3303,  3384,  1892,  2945,  4237,  1976,  4030,
    1420,  -769,  -769,  1500,  2022,  1896,  2029,  4031,  3446,  1706,
     505,  3447,  1925,  -769,  1926,  1927,   713,  1447,  1928,  1930,
    4123,  1931,  1229,  1977,  2025,  1769,  1932,  1948,  1962,  3394,
    1971,  4032,  2026,  2075,  2034,  1537,   677,  2092,  2118,  3318,
    2093,  2136,  2137,  3380,  3405,  2144,  2154, -1485,  4170,  1226,
    2155,   613,  2157,  2156,  2163,  4112,  2028,  2169,  2205, -1485,
   -1485,  2207,  2466,  3418,  1131,  1181,  1185,  2171,  2172,  1378,
    1500,  2173,  2466,  2029,  2196,  2519, -1773,  3799,  3800, -1485,
    2197, -1485,   524,  2198,   721,  1978,  2213,  3933,  3448,  -623,
    3803,  3913,  3914,   506,  3916,  3917,   262,  3806,   264,  2203,
    2204,  2034,  1226,  3523,  2037, -1485, -1485,  3397,  2218, -1485,
   -1485,  2222,  2038,  2226,  2243,  2244,  2283,  2249,  3775,  2252,
    3407,  2279,  2253,  3825,  3826,   704,  2467,  2039,  -817,  2264,
    2265,  2266,  1264,  4359, -1177,  2289,  2467,  1241,  2299,   525,
    2327,  3479, -1314,  2354,  3896,   732,  4033,  2319,  3884,  2842,
    2345,  2360,  2363,  2366,  2387,  2397,  3809,  2398,  2413,  2419,
     736,   737,  2420,   262,  2421,   264,   526,  2424,  3016,  1231,
    1232,  2037,  2425,  2799,  2426,  1979,   507,  2427,   708,  2038,
    2437,   509,  4223,  2040,  2428,   709,  1226,  2439,  2441,  2442,
    2446,  2821,  3513,  2455,  2039,   623,  2457,  2469,  1363,  2470,
     527,  2041,  2473,  1227,   623,  2474,  2476,  2480,  2651,  2482,
    2769,  3974,  4073,   713,  2483,  1364,  3449,   925,   925,  2487,
    2841,  2484,  2485,  2486,  2517,  4034,  1228,   903,   904,   905,
     906,   907,   908,  4359,  2529,   803,  1267,  1707,  1229,  2539,
    2534,  2535,  2541,  4035,   909,  3450,  2538,  2548,   528,  2589,
    2040,  2542,  1706,  2551,  2557,  2045,  2550,  2046,  2558,  2589,
    -623,  2945,  2563,  4487,  2597,  2048,  4036,  1226,  2041,  1268,
    1707,  2564,  2569,  2593,  2570,  1706,  2945,  2577,   613,  2599,
    2589,   721,  1706,  2600,  2601,  2602,  4498,  4041,  1706,  4364,
    4365,  1229,  4367,  4487,  2603,  1393,  2604,  2605,  2606,  4498,
    2607,  2608,  2609,  2619,  2610,  2627,  2611,  2612,  2613,  2614,
    2615,  1056,  1057,  1235,  1236,  1237,  1238,  1239,  1240,  1241,
    2667,  2616,  2045,  2617,  2046,  2618,  2649,  2680,  1216,  1217,
    2671,  2675,  2048,  2054,  2705,  2704,  2706,  1269,  2716,  2307,
    2717,  1365,   732,  4408,   756,  4409,  4410,  2780,  3776,  2729,
    2781,  3777,  2766,  3037,   868,  2788,  2748,   736,   737,  2756,
    2765,  1270,   762,  1218,  2778,  1271,  2782,   764,  2236,  2779,
     765,   -65,   508,  2791,  1219,  1229,   529,  2793,  2794,  3666,
    3666,  3666,  2795,  3745,  1916,  1231,  1232,  1230,   803,  2802,
    2803,  2055,  1820,   803,   509,  2807,   623,  1366,  2823,  1272,
    2054,  2811,  2824,  4446,  2826,  2827,  2828,  2056,  2405,  2404,
    2846,  2057,  2847,  1220,  2857,  1367,  1867,  3633,  1273,  1868,
    2872,  2875,  2888,  4210,  2886,  1221,  3778,  3779,  4479,   803,
    2058,   510,  1274,   962,  -538,  2887,  4041,   511,  1231,  1232,
    2908,  3658,  2904,  2909,   530,  2952,   803,  2954,  2060,  4037,
    3011,  3030,  1222,  1233,  3026,  3064,  1229,  3032,  2055,  3038,
    3065,  3603,  3069,  3073,  2047,  3734,  3074,  2417,  3099,  1707,
    3108,  1964,  2164,   512,  2056,  3119,  3113,  3121,  2057,  3122,
    1275,   513,  3177,  3188,   623,  3205,  3123,   803,   803,   803,
     803,  3131,  3132,  3200,  3175,  3179,  1226,  2058,  3184,   803,
    1333,  3187,  3198,   531,  1276,  3193,  3604,  3094,  3212,   532,
    3208,  3231,  1223,  3209,  3222,  2060,  3242,  3605,  3215,  3243,
    3666,  4212,  1231,  1232,  3896,  3225,  3247,  3228,   533,  3248,
    1236,  1237,  1238,  1239,  1240,  1241,  3259,  3789,  3265,  3251,
    3269,   756,  1393,  3270,  3285,  3776,  3273,  3297,  3777,  3284,
    3286,  3375,  3306,   534,  3784,  3314,  3316,  4502,  3315,   762,
    3378,  3381,  3382,  3606,   764,  3386,  3388,   765,   623,  3400,
     535,  3389,  2652,   821,  3393,  3406,  -448,  2379,  3401,  3409,
     803,  1234,  1235,  1236,  1237,  1238,  1239,  1240,  1241,  3415,
    3420,  3416,  3417,  3437,  3827,  3455,  3458,  3145,  3465,  3466,
    3483,  3831,  3484,  1231,  1232,  3493,  1277,  3495,  3498,  3523,
    3505,  3516,  3535,  3536,  3548,  1278,  3556,  3559,  3560,  3573,
    3405,  3580,  3630,  3778,  3779,  2591,  3634,  3654,  3524,  3640,
    1279,  3656,  3662,  3655,  3659,  3660,  3672,  3632,  3673,  3674,
    3808,  3675,  3676,   623,  3680,  3645,  3686,  3683,  1280,  3688,
    3690,  3691,  3692,  3694,  3700,  3698,   262,  3699,   264,  3712,
    3722,  3729,  3713,   822,  3730,  1234,  1235,  1236,  1237,  1238,
    1239,  1240,  1241,  4210,  3739,  3732,  2334,  3246,  3741,  3727,
    3837,  3742,  3746,  3747,  3757,  1229, -1400,  1281,  -786,  1282,
   -1405,  3770,   823,  3787,  3771,  3773,  3888,  3774,  2335,  3790,
    3798,  3804,  3620,  3802,  3812,   824,  3814,  3813,  3815,  3818,
     623,  2336,  3816,  3819,  1283,  3623,  3838,  3857,  1973,  3839,
    3854,  3905,  2337,  3858,  3861,  3682,  3863,  3864,   825,  3867,
    3869,   826,  1974,  3921,  3666,  3666,  1284,  3666,  3666,  3882,
    3870,  3871,   827,  3883,  3889,  3927,  1234,  1235,  1236,  1237,
    1238,  1239,  1240,  1241,  3934,   803,  3901,  4041,  3941,  1393,
    3983,  3903,  3935,   828,  3936,  3975,  4008,  3998,  4011,  4009,
    4013,  2338,  4207,  2339,  4021,  4024,  4076,  4058,  4476,  4094,
    -314,  4404,  4103,  4118,  3940,  1285,  1056,  1057,  4097,   829,
    4130,  4053,  3608,  4055,  4096,  4115,   830,  4107,  3609,  4133,
    2340,  4134,  4142,  4066,  3979,   613,  4146,  3006,  4114,  4139,
     803,   803,  4476,  4175,  4172,  4144,  3666,  4178,  1311,   803,
     803,   803,   803,   803,   803,   803,   803,   803,   803,   803,
     803,   803,  1231,  1232,  -332,  4204,   831,  4205,  3610,   803,
     803,  4206,   803,  4239,   803,  4251,  4227,   613,   803,  4225,
    4404,   803,   803,   803,   803,  3939,   803,   803,   803,  4222,
     623,  4255,  4256,  2341,  4263,   803,   803,  4266,   803,   803,
     803,   803,   803,  4257,  3980,   803,   803,   803,   803,   803,
     803,   803,   803,   803,   803,   803,  4258,  4067,   803,   803,
    4267,  1975,   803,  4276,  4277,  4281,   803,  4289,   803,   803,
    4287,  4288,  4292, -1485,  4298,  4312,  3611,  4313,  4080,  4314,
     803,   803,  4315,  4087,  4323,  4324,  4022,  2342,   803,  4330,
    4504,  4335,  4337,  4339, -2308,   803,   803,   803,  4343,   803,
    4349,  4340,  4352,  4363,  4366,  4368,   803,   803,   803,  4371,
     803,   803,   803,   803,   803,  4369,   803,   803,   803,   803,
     803,   803,   803,   803,  4376,  4382, -1485,   803,   803,  4396,
    1312,  4395,  4398,  4401, -1569,  1976,   832,  4412,   820,   821,
    4413,  4414,  4418,  4419,  4423,  1234,  1235,  1236,  1237,  1238,
    1239,  1240,  1241,  4426,  4429,  1707,   834,  1056,  1057, -1485,
    1977,  3888,  4431,  4434,   835,  4438,  4432,  4440,  4443,  4444,
    4447,  4238,   836,  4451, -1485,  4457,  4464,  4465,  4488,  3612,
   -1485,  1625,  1626,  1627,  1628,  1629,  4492,  3905,  4455,  3905,
    4501,  4151,  4089,  3835,  4109,  2773,  3058,   837,  3644,  1454,
    2916,  1079, -1485,  3842,   803,  4104,  4213,  4350,  1512, -1485,
     838,   839,  4351,  3840,  3844,  3978,  4499,  4179,  4459, -1485,
    4280,   578,  1978,  3230,   975,  2389,  3952,  4469,  3953,   822,
    4379, -1485,  3955,  3956,  3958,  4280, -1485,  3959,  3960,  4274,
    3961,  3962,  3963,  4380,  4348, -1485,  4220,  3966,  4290,  4286,
    3967,  3968,  4285,  2310,  1209,  1210,   840,  1552,   823,  2015,
    4106,  2581,  2061,  3310,   803,  2086,  3211,  2806,  3497,  1823,
    4128,   824,   623,  4023,   803,  2771,  4226,  3735,  4244,  1630,
    1631,  1632,  1633,  4428,  4403,  4362,  2121,   841,  4141,   803,
     664,  3848,  2579,   803,   825,  3398,  3092,   826,  3572,  2586,
    3008,  3561,  3565,  3452,  4074,  4377,  3588,  3929,   827,   842,
   -1485,   843,  1979,  3629,  1105,  3817,  2906,  4219,  3807,  4224,
    4157,   520,   521,  4261,  2153,  4260,  3997,  4111,  2661,   828,
    4117,  3932, -1485,  2583,  4116,  3563,  4231,  4232,  1031,  2996,
    4361,  2881, -1485,  1949,  2458,  1480,  3786,   803,  2808,  3562,
    1143,  2084,  2119,  2371,  3494,   829,  1707,  1625,  1626,  1627,
    1628,  1629,   830,  3202,  2789,  2829,  3973,  1161,  2747,  1002,
    2696,  4280,  2403,  2694, -1485,  3482,   623,  1383,  3186,  2899,
    3532,  4394,  2746,  1634,  4060,  1635,  1636,  1637,  3909,  1663,
    4322,  3037,  3037,  4321,  1638,  2763,  3641,  3567,  1606,  3256,
    3906,  2074,   831,  2991,  4450,  3898,  2836,  2665,  2787,  1838,
    1807,  1203,  3737,  2814,  3509,  3508,  3542,   991,  4295,  2162,
    2448,  1097, -1485,   970,  1908,  2876,  2449,   973,  2321,  3571,
    1841,  3496,  4399,  4316,  4425,  4427,  4370,  4503,  4305,  4306,
    4500,   623,  3811,  3512, -1485,  2855,  1267,  2282,  1856,  3526,
     927,   928,  4280,  3527,  4280,  1630,  1631,  1632,  1633,  2431,
    2852,  4445,  2845,  2853,   896,  2359,  1370,  1800,  1848,   803,
    4384,  2143,  4280,  4020,  1639,   898,  4012,  4392,   658,  1268,
    3190,  1375,   659,  1083,     0,  1084, -1485,  1085,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1332,     0,     0,  4280,  4280,     0,     0,     0,  4491,
       0,     0,     0,     0,     0,     0,     0,  4493,     0,     0,
       0,     0,     0,     0,     0,     0,  1640,  1641,     0,     0,
    4375,     0,   832,     0,     0,     0,   833,     0,     0,     0,
       0,     0, -1485,     0,     0,     0,     0,  1269,  4436,     0,
       0,     0,   834,  4441,     0, -1485,     0,     0,     0,  1634,
     835,  1635,  1636,  1637,     0,     0,     0,     0,   836,     0,
    1638,  1270,     0,     0, -1485,  1271, -1485,     0,     0,     0,
       0,   803,   803,   803,     0,     0,     0,     0,     0,     0,
    4477,     0,     0,   837,     0,   803,     0,     0,     0,  1707,
   -1485, -1485,     0,     0, -1485, -1485,   838,   839,     0,  1272,
    1211,     0,     0,  1212,     0,     0,     0,     0,   623,     0,
       0,   803,  1707,     0,  4477,     0,     0,   803,  1273,  1707,
     803,     0,   803,     0,     0,  1707,     0,     0,   803,     0,
     803,   803,  1274,     0,     0,     0,     0,     0,     0,     0,
    1639,     0,   840,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1642,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1533,     0,     0,  1643,
    1644,     0,     0,   841,     0,     0,     0,     0,     0,     0,
    1275,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1640,  1641,     0,   842,     0,   843,     0,     0,
       0,     0,   803,     0,  1276,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1578,  1579,     0,     0,     0,     0,     0,     0,     0,
    1589,  1590,     0,     0,  1593,  1594,  1595,  1598,  1599,  1600,
    1601,  1602,  1603,     0,     0,     0,     0,     0,     0,   803,
    1619,  1620,     0,  1621,     0,  1622,     0,     0,   803,     0,
       0,     0,  1655,  1656,  1657,  1658,     0,     0,  1661,     0,
       0,     0,     0,     0,     0,     0,  1669,  1670,     0,  1673,
    1674,     0,     0,     0,     0,     0,  1678,  1679,  1680,     0,
       0,  1683,  1684,  1685,  1686,  1687,  1688,     0,     0,  1691,
    1692,     0,     0,  1695,     0,     0,  1277,  1698,     0,  1702,
    1703,     0,     0,     0,     0,  1278,     0,     0,     0,     0,
       0,  1710,  1711,     0,     0,     0,     0,     0,     0,  1719,
    1279,  1642,     0,     0,     0,     0,  1724,  1725,  1726,     0,
       0,     0,     0,     0,  1213,  1643,  1644,     0,  1280,     0,
       0,     0,     0,     0,     0,  2016,     0,     0,     0,     0,
       0,     0,  2017,     0,  2018,     0,     0,     0,     0,  1762,
       0,     0,     0,     0,     0,  2019,  2020,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1281,     0,  1282,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2021,     0,     0,     0,
       0,  2022,  2023,     0,  1283,     0,     0,     0,  2024,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2025,     0,   499,     0,  2074,  1284,   500,     0,  2026,
       0,     0,     0,     0,     0,  1810,     0,     0,     0,  2027,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2019,  2020,  2028,     0,   803,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1500,     0,     0,
    2029,     0,     0,     0,     0,  1285,     0,  2030,  2031,     0,
       0,     0,     0,     0,  2032,     0,     0,  2022,     0,     0,
       0,     0,  2033,     0,     0,  1855,  -892,     0,  2034,     0,
       0,     0,     0,     0,     0,  1861,     0,  2025,     0,     0,
       0,     0,  2074,     0,     0,  2026,     0,     0,     0,     0,
    1889,     0,     0,     0,  1895,     0,     0,  2035,   803,     0,
       0,     0,   803,     0,     0,     0,     0,   803,   803,  2028,
       0,     0,     0,     0,     0,     0,   803,   803,     0,   803,
     803,   803,   803,  1500,   803,     0,  2029,   803,     0,     0,
     262,     0,   264,     0,     0,     0,  2036,   803,  2037,   803,
     803,     0,   803,   803,   803,   803,  2038,   803,  1938,     0,
     803,     0,     0,     0,  2034,     0,     0,     0,     0,   803,
       0,  2039,     0,     0,     0,     0,   803,     0,   803,     0,
     803,   803,   803,   803,     0,     0,     0,   803,   803,   803,
     893,   821,     0,   803,   803,   803,     0,   803,  2094,   803,
       0,   803,     0,   803,     0,   803,     0,     0,     0,     0,
     803,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   803,   262,  2040,   264,     0,
       0,     0,   803,     0,  2037,   803,     0,     0,     0,     0,
       0,   803,  2038,     0,   803,  2041,     0,     0,   803,  2042,
       0,     0,     0,     0,     0,     0,     0,  2039,  2095,  2096,
    2097,  2098,  2099,  2100,     0,  2101,  2102,  2103,  2104,  2105,
    2106,  2107,  2108,  2109,     0,  2110,  2111,     0,     0,     0,
    2174,   822,     0,     0,     0,     0,     0,  2043,     0,     0,
       0,     0,  2044,     0,     0,     0,     0,     0,     0,  2045,
       0,  2046,     0,   803,     0,     0,     0,     0,  2047,  2048,
     823,     0,     0,  2040,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   824,     0,     0,     0,     0,     0,     0,
       0,  2041,     0,     0,     0,     0,     0,     0,     0,     0,
    2049,     0,     0,     0,     0,     0,   825,     0,     0,   826,
       0,     0,     0,     0,  2050,  2051,  2052,  2053,     0,     0,
     827,     0,     1,     0,     2,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   803,     0,  2054,     0,     0,
       3,   828,     0,     0,     4,  2045,     0,  2046,     0,     0,
       0,     0,  2256,  2258,  2260,  2048,     0,     0,     5,     6,
       0,     0,  2112,  2113,     0,     0,     7,   829,     0,     0,
       0,     8,     9,     0,   830,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2291,    10,     0,  2055,     0,     0,     0,     0,
       0,  2296,     0,  2297,     0,     0,     0,     0,     0,     0,
       0,  2056,    11,     0,   831,  2057,     0,     0,     0,     0,
       0,     0,     0,  2054,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    12,  2058,     0,     0,     0,     0,  2059,
       0,    13,    14,    15,     0,     0,     0,     0,     0,     0,
       0,     0,  2060,    16,    17,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    18,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      19,  2055,  2074,  2367,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    20,  2056,     0,     0,
       0,  2057,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    21,     0,     0,  -892,     0,    22,     0,     0,
    2058,    23,     0,     0,     0,     0,     0,     0,     0,     0,
    2430,     0,     0,     0,     0,     0,     0,     0,  2060,     0,
       0,     0,     0,     0,   832,    24,     0,    25,   894,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2074,     0,
       0,     0,     0,    26,   834,     0,     0,     0,     0,     0,
       0,     0,   835,     0,     0,   803,     0,     0,     0,   803,
     836,    27,     0,     0,     0,    28,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   837,     0,   803,   803,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   838,   839,
       0,     0,     0,     0,     0,     0,     0,   803,     0,     0,
       0,     0,     0,     0,     0,     0,   803,     0,   803,     0,
     803,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   803,     0,     0,
       0,     0,   803,     0,   840,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    29,     0,     0,
       0,     0,     0,     0,     0,     0,   803,     0,     0,     0,
       0,     0,     0,     0,    30,   841,     0,     0,    31,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    32,
       0,     0,     0,     0,     0,     0,     0,   842,     0,   843,
      33,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    34,     0,     0,    35,  2598,    36,     0,     0,
      37,     0,     0,    38,    39,     0,   803,     0,     0,     0,
       0,    40,     0,    41,     0,     0,     0,     0,     0,     0,
      42,     0,     0,     0,     0,     0,    43,     0,     0,     0,
       0,     0,     0,     0,    44,     0,     0,     0,     0,    45,
       0,    46,     0,     0,    47,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   803,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2674,
      48,     0,     0,  2676,    49,     0,     0,     0,  2678,  2679,
       0,     0,     0,     0,     0,     0,     0,  1595,  2695,     0,
    1595,     0,  2698,  2699,     0,  2700,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2707,     0,
    2708,     0,     0,  2710,  2711,  2712,  2713,     0,  2714,    50,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2718,    51,     0,     0,     0,    52,     0,  2719,    53,  2720,
       0,  2721,  2722,  2723,    54,     0,     0,     0,  2726,  2727,
    2728,     0,     0,     0,  2730,  2731,  2732,     0,  2733,     0,
    2735,     0,  2737,     0,  2739,     0,  2740,     0,     0,     0,
       0,  2741,     0,    55,     0,   803,   803,     0,     0,    56,
       0,     0,     0,     0,     0,     0,  2751,     0,     0,    57,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2761,     0,     0,  2764,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     1,     0,     2,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2074,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     4,     0,     0,   803,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       5,     6,     0,     0,     0,     0,     0,     0,     7,     0,
       0,     0,     0,     8,     9,     0,     0,     0,     0,     0,
       0,     0,   803,   803,     0,   803,     0,     0,     0,     0,
       0,     0,     0,     0,   803,    10,     0,     0,     0,   803,
       0,     0,   803,     0,   803,   803,     0,     0,     0,     0,
       0,     0,     0,     0,    11,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   930,   803,  1889,     0,     0,     0,
       0,     0,     0,     0,     0,    12,   931,     0,     0,     0,
     803,     0,     0,    13,    14,    15,   872,   932,     0,     0,
       0,     0,     0,     0,     0,    16,    17,     0,     0,     0,
       0,     0,     0,   803,     0,     0,     0,     0,     0,     0,
       0,   933,   915,     0,     0,     0,     0,     0,     0,   934,
       0,     0,    19,     0,   935,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    20,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   936,     0,   937,    21,   938,     0,   803,     0,    22,
       0,     0,     0,    23,   939,     0,   803,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    14,    15,    24,     0,    25,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    26,     0,     0,     0,     0,
   -1773,   940,     0,     0,     0,     0,   941,     0,     0,   942,
       0,     0,     0,    27,     0,     0,     0,    28,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   943,     0,   944,  3619,     0,
       0,     0,     0,     0,   945,     0,   946,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     947,   948,   949,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   950,     0,     0,  3104,     0,     0,     0,
    3106,     0,     0,     0,     0,     0,     0,     0,     0,    29,
       0,     0,     0,     0,     0,   951,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    30,     0,  3134,  3135,
      31,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    32,     0,     0,   952,     0,     0,     0,  3155,     0,
       0,     0,    33,     0,     0,     0,     0,  3165,     0,  3167,
       0,  3169,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    34,     0,     0,    35,   803,    36,
       0,     0,    37,     0,     0,    38,    39,     0,     0,     0,
       0,     0,     0,    40,     0,    41,     0,     0,  2019,  2020,
       0,     0,    42,     0,     0,     0,     0,  3199,    43,   953,
       0,   803,   803,     0,     0,     0,    44,     0,     0,     0,
     803,    45,     0,    46,     0,     0,    47,     0,     0,     0,
       0,  -769,  -769,     0,  2022,   954,     0,     0,     0,     0,
       0,     0,     0,  -769,     0,     0,   955,   956,     0,     0,
     957,   958,    48,     0,  2025,     0,    49,     0,     0,     0,
       0,     0,  2026,     0,     0,     0,     0,     0,     0,     0,
       0,   959,     0,     0,     0,     0,     0,  1889,     0,     0,
       0,     0,     0,     0,     0,     0,  2028,  3619,  3319,  3320,
       0,     0,     0,     0,  3321,     0,  3322,     0,  3323,  3324,
    1500,    50,     0,  2029,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    51,   960,  3325,     0,    52,     0,     0,
      53,     0,     0,     0,     0,     0,    54,   961,  3279,     0,
       0,  2034,     0,  2074,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0, -2347,    55,     0,     0,   962,     0,
       0,    56,     0,     0,     0,     0,     0,     0,   803,     0,
    3326,    57,     0,  3327,     0,     0,   963,   964,     0,     0,
       0,  3328,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   262,     0,   264,     0,     0,  3329,   803,
       0,  2037,     0,     0,     0,     0,     0,     0,     0,  2038,
       0,     0,     0,   803,     0,  3330,     0,     0,     0,     0,
       0,     0,     0,     0,  2039,   965,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0, -2347,     0,     0,  3331,
       0,  3332,     0,     0,   966,     0,  3376,  3377,     0,     0,
       0,     0,     0,     0,  3333,  3334,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2040,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3335,     0,  2041,     0,
       0,     0,  3970,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3996,     0,  3336,     0,  3996,  3996,     0,
    3423,     0,     0,     0,  3337,  3338,     0,  3339,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2045,     0,  2046,     0,   803,     0,     0,     0,
       0,     0,  2048,  3460,  3461,     0,   803,     0,     0,  3340,
    3341,  3342,   803,     0,   803,  3468,     0,     0,     0,     0,
    3470,     0,     0,  3471,     0,  3472,  3473,     0,  3343,  3344,
    3345,     0,     0,     0,     0,  3346,     0,     0,  3347,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   803,  3348,  3349,     0,     0,     0,  3970,
    3970,  3490,     0,     0,     0,     0,     0,     0,     0,     0,
    2054,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3490,  2994,     0,     0,     0,     0,
    3350,  3351,  2017,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3996,  2019,  2020,     0,     0,     0,
       0,     0,     0,  3996,     0,  3352,     0,  3996,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2055,     0,
       0,     0,     0,     0,     0,     0,  2021,     0,  3490,     0,
       0,  2022,     0,     0,  2056,     0,     0,  3553,  2057,     0,
       0,     0,     0,     0,     0,     0,   803,     0,     0,     0,
       0,  2025,     0,     0,     0,     0,  3353,  2058,     0,  2026,
    3354,     0,     0,     0,     0,  3996,     0,     0,     0,  2027,
       0,     0,     0,  3355,     0,  2060,     0,     0,   803,     0,
     803,     0,     0,  2028,     0,     0,     0,     0,     0,     0,
     803,     0,  3970,  3970,     0,     0,     0,  1500,     0,     0,
    2029,     0,     0,     0,     0,     0,     0,  2030,     0,     0,
       0,     0,     0,     0,  2995,     0,     0,  4221,     0,     0,
       0,     0,  2033,     0,     0,     0,     0,  3356,  2034,     0,
    3357,     0,     0,  3358,  3359,  3360,  3361,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2035,     0,     0,
    3996,     0,  3996,  3996,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3362,  3363,     0,
       0,     0,     0,   803,     0,  3970,     0,     0,     0,     0,
     262,     0,   264,     0,     0,     0,     0,     0,  2037,     0,
    3970,   803,     0,  3364,     0,     0,  2038,     0,     0,     0,
       0,     0,     0,  3970,     0,     0,     0,     0,     0,     0,
       0,  2039,     0,     0,     0,   803,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3490,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   803,  3970,     0,  2040,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3970,  3970,     0,
       0,     0,  3755,  3756,     0,  2041,     0,     0,     0,  2042,
       0,  3279,     0,   803,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3970,     0,     0,     0,
       0,     0,  2044,   803,     0,     0,  3970,     0,     0,  2045,
       0,  2046,     0,     0,     0,     0,     0,     0,     0,  2048,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     803,     0,     0,     0,     0,     0,     0,  3970,     0,  3970,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3970,
       0,     0,     0,   803,     0,  2051,   803,     0,     0,     0,
       0,     0,     0,     0,     0,  3970,     0,  3970,     0,  3970,
       0,     0,     0,     0,     0,     0,  3970,  2054,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3970,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3862,
       0,     0,     0,  3970,  3970,     0,     0,     0,     0,   803,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3970,
    3970,     0,     0,     0,  3970,     0,     0,     0,     0,     0,
    3490,     0,     0,     0,     0,  2055,     0,     0,     0,     0,
       0,     0,     0,     0,  3279,     0,     0,     0,     0,     0,
       0,  2056,     0,     0,     0,  2057,   803,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2058,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2060,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  4047,     0,     0,
       0,     0,     0,  4052,     0,  4054,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  4075,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3279,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  4173,
       0,  4174,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  4182,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  4278,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  4283,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3490,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  4333,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  4386,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  4411,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  4430,   139,     0,
     673,   141,   142,   143,   144,     0,     0,   145,     0,     0,
       0,   146,     0,     0,   674,     0,   148,   149,   150,   151,
     152,   675,   154,     0,   155,     0,     0,   676,   156,   677,
     678,   679,   157,   680,     0,   158,   159,   160,  1699,   161,
       0,   162,   163,     0,     0,   164,   681,   682,   165,   166,
    4478,   167,   683,   684,   169,   170,     0,   171,   172,   173,
     174,   175,   685,   177,     0,   686,   179,   687,   688,   689,
     690,   691,   692,     0,   186,   187,   188,   189,   190,   191,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   693,
     200,     0,   201,   694,   695,   202,     0,  3490,   203,   696,
     697,     0,   204,   698,   699,     0,   205,   206,   207,   700,
     701,   702,     0,     0,     0,     0,   703,   210,   704,     0,
       0,   705,   211,     0,   212,     0,     0,     0,   213,     0,
     214,   215,   216,   217,     0,     0,     0,   218,     0,     0,
     219,   220,   221,     0,     0,     0,   222,     0,   223,   224,
       0,   225,   226,   227,     0,     0,   228,   229,     0,   230,
     231,   232,   233,   234,   235,   706,     0,   236,   237,   238,
     707,   708,   239,   240,     0,   241,   242,   243,   709,     0,
     244,     0,     0,     0,   245,     0,   246,     0,   247,     0,
     248,   249,   710,   251,   711,   253,     0,   254,     0,   712,
       0,   255,   256,   257,     0,   258,   713,     0,   259,   260,
       0,     0,     0,   714,   262,   263,   264,   715,     0,   265,
     266,   267,     0,   268,     0,   269,     0,     0,     0,   716,
     270,   271,   717,     0,     0,   272,     0,   273,   274,     0,
     275,   276,     0,     0,     0,   277,     0,     0,   278,   279,
     718,     0,  1700,   281,     0,   719,   282,   283,     0,     0,
       0,     0,     0,   720,   285,     0,   286,     0,   287,     0,
     288,   289,     0,     0,   721,     0,     0,     0,     0,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,     0,   305,   306,   307,   722,   308,
     309,   310,   311,   723,   312,   313,     0,     0,     0,     0,
     314,   315,   316,   317,   724,   319,     0,     0,   725,   321,
     726,   322,     0,   323,   727,   728,   729,   730,   731,   328,
     329,   330,   331,   332,     0,   732,   333,   334,     0,     0,
     335,   336,   337,   338,   733,   734,   735,   339,   340,     0,
     736,   737,     0,   341,   342,   738,     0,   344,   345,   346,
     347,     0,   348,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   349,   350,   351,     0,   739,   352,     0,   353,
     354,   355,   356,   740,   358,   359,   360,   361,   741,   742,
     364,   743,     0,   365,   366,   367,     0,   368,     0,   369,
     370,   371,   372,   373,     0,   744,   375,   376,     0,     0,
     377,     0,     0,     0,   378,   379,   380,   381,   382,     0,
       0,   383,   384,   385,   386,   387,     0,   388,   389,     0,
     390,   391,   392,   745,   746,   393,     0,   394,     0,   395,
     396,     0,   397,   398,     0,     0,   747,   399,   400,   401,
     402,   403,   748,   405,   406,   407,   408,     0,   749,   410,
       0,     0,     0,   411,   412,   413,   414,     0,     0,     0,
     415,     0,     0,     0,   416,     0,   417,   418,   419,   420,
     421,     0,   422,   423,   424,   425,   426,   427,     0,     0,
       0,     0,     0,     0,   428,   429,     0,   430,     0,     0,
     431,     0,     0,   432,   433,   434,   750,   751,   435,   436,
       0,   437,   438,   752,   440,   441,   442,   753,   754,   443,
     444,   445,   446,   755,   447,   448,     0,   449,     0,   450,
     451,   452,   453,     0,   756,   454,   455,     0,   757,   758,
     759,   760,     0,     0,     0,     0,  1701,   460,   461,   462,
       0,   761,   762,   763,   464,   465,   466,   764,   467,   468,
     765,   469,   470,     0,   471,   472,     0,     0,   473,     0,
       0,   474,     0,   475,     0,   766,   477,   478,     0,     0,
     767,   768,   769,   770,   479,     0,     0,   480,   771,     0,
     772,   481,   482,   483,   484,   485,   773,     0,     0,     0,
       0,     0,     0,   487,   488,     0,   489,   490,   491,     0,
       0,   774,     0,     0,     0,     0,   775,   776,     0,     0,
       0,     0,   777,   778,     0,     0,   779,   780,     0,     0,
     781,   782,   139,     0,   673,   141,   142,   143,   144,  1885,
       0,   145,     0,     0,     0,   146,     0,     0,   674,     0,
     148,   149,   150,   151,   152,   675,   154,     0,   155,     0,
       0,  1886,   156,   677,   678,   679,   157,   680,     0,   158,
     159,   160,     0,   161,     0,   162,   163,     0,     0,   164,
     681,   682,   165,   166,     0,   167,   683,   684,   169,   170,
       0,   171,   172,   173,   174,   175,   685,   177,     0,   686,
     179,   687,   688,   689,   690,   691,   692,     0,   186,   187,
     188,   189,   190,   191,   192,   193,     0,   194,   195,     0,
     196,   197,   198,   693,   200,     0,   201,   694,   695,   202,
       0,     0,   203,   696,   697,     0,   204,   698,   699,     0,
     205,   206,   207,   700,   701,   702,     0,     0,     0,     0,
     703,   210,   704,     0,     0,  1887,   211,     0,   212,     0,
       0,     0,   213,     0,   214,   215,   216,   217,     0,     0,
       0,   218,     0,     0,   219,   220,   221,     0,     0,     0,
     222,     0,   223,   224,     0,   225,   226,   227,     0,     0,
     228,   229,     0,   230,   231,   232,   233,   234,   235,   706,
       0,   236,   237,   238,   707,   708,   239,   240,     0,   241,
     242,   243,   709,     0,   244,     0,     0,     0,   245,     0,
     246,     0,   247,     0,   248,   249,   710,   251,   711,   253,
       0,   254,     0,   712,     0,   255,   256,   257,     0,   258,
     713,     0,   259,   260,     0,     0,     0,   714,   262,   263,
     264,   715,     0,   265,   266,   267,     0,   268,     0,   269,
       0,     0,     0,   716,   270,   271,   717,     0,     0,   272,
       0,   273,   274,     0,   275,   276,     0,     0,     0,   277,
       0,     0,   278,   279,   718,     0,     0,   281,     0,   719,
     282,   283,     0,     0,     0,     0,     0,   720,   285,     0,
     286,     0,   287,     0,   288,   289,     0,     0,   721,     0,
       0,     0,     0,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,     0,   305,
     306,   307,   722,   308,   309,   310,   311,   723,   312,   313,
       0,     0,     0,     0,   314,   315,   316,   317,   724,   319,
       0,     0,   725,   321,   726,   322,     0,   323,   727,   728,
     729,   730,   731,   328,   329,   330,   331,   332,     0,   732,
     333,   334,     0,     0,   335,   336,   337,   338,   733,   734,
     735,   339,   340,     0,   736,   737,     0,   341,   342,   738,
    1888,   344,   345,   346,   347,     0,   348,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   349,   350,   351,     0,
     739,   352,     0,   353,   354,   355,   356,   740,   358,   359,
     360,   361,   741,   742,   364,   743,     0,   365,   366,   367,
       0,   368,     0,   369,   370,   371,   372,   373,     0,   744,
     375,   376,     0,     0,   377,     0,     0,     0,   378,   379,
     380,   381,   382,     0,     0,   383,   384,   385,   386,   387,
       0,   388,   389,     0,   390,   391,   392,   745,   746,   393,
       0,   394,     0,   395,   396,     0,   397,   398,     0,     0,
     747,   399,   400,   401,   402,   403,   748,   405,   406,   407,
     408,     0,   749,   410,     0,     0,     0,   411,   412,   413,
     414,     0,     0,     0,   415,     0,     0,     0,   416,     0,
     417,   418,   419,   420,   421,     0,   422,   423,   424,   425,
     426,   427,     0,     0,     0,     0,     0,     0,   428,   429,
       0,   430,     0,     0,   431,     0,     0,   432,   433,   434,
     750,   751,   435,   436,     0,   437,   438,   752,   440,   441,
     442,   753,   754,   443,   444,   445,   446,   755,   447,   448,
       0,   449,     0,   450,   451,   452,   453,     0,   756,   454,
     455,     0,   757,   758,   759,   760,     0,     0,     0,     0,
       0,   460,   461,   462,     0,   761,   762,   763,   464,   465,
     466,   764,   467,   468,   765,   469,   470,     0,   471,   472,
       0,     0,   473,     0,     0,   474,     0,   475,     0,   766,
     477,   478,     0,     0,   767,   768,   769,   770,   479,     0,
       0,   480,   771,     0,   772,   481,   482,   483,   484,   485,
     773,     0,     0,     0,     0,     0,     0,   487,   488,     0,
     489,   490,   491,     0,     0,   774,     0,     0,     0,     0,
     775,   776,     0,     0,     0,     0,   777,   778,     0,     0,
     779,   780,     0,     0,   781,   782,   139,     0,   673,   141,
     142,   143,   144,     0,     0,   145,     0,     0,     0,   146,
       0,     0,   674,     0,   148,   149,   150,   151,   152,   675,
     154,     0,   155,     0,     0,   676,   156,   677,   678,   679,
     157,   680,     0,   158,   159,   160,     0,   161,     0,   162,
     163,     0,     0,   164,   681,   682,   165,   166,     0,   167,
     683,   684,   169,   170,     0,   171,   172,   173,   174,   175,
     685,   177,     0,   686,   179,   687,   688,   689,   690,   691,
     692,     0,   186,   187,   188,   189,   190,   191,   192,   193,
       0,   194,   195,     0,   196,   197,   198,   693,   200,     0,
     201,   694,   695,   202,     0,     0,   203,   696,   697,     0,
     204,   698,   699,     0,   205,   206,   207,   700,   701,   702,
       0,     0,     0,     0,   703,   210,   704,     0,     0,   705,
     211,     0,   212,     0,     0,     0,   213,     0,   214,   215,
     216,   217,     0,     0,     0,   218,     0,     0,   219,   220,
     221,     0,     0,     0,   222,     0,   223,   224,     0,   225,
     226,   227,     0,     0,   228,   229,     0,   230,   231,   232,
     233,   234,   235,   706,     0,   236,   237,   238,   707,   708,
     239,   240,     0,   241,   242,   243,   709,     0,   244,     0,
       0,     0,   245,  2255,   246,     0,   247,     0,   248,   249,
     710,   251,   711,   253,     0,   254,     0,   712,     0,   255,
     256,   257,     0,   258,   713,     0,   259,   260,     0,     0,
       0,   714,   262,   263,   264,   715,     0,   265,   266,   267,
       0,   268,     0,   269,     0,     0,     0,   716,   270,   271,
     717,     0,     0,   272,     0,   273,   274,     0,   275,   276,
       0,     0,     0,   277,     0,     0,   278,   279,   718,     0,
       0,   281,     0,   719,   282,   283,     0,     0,     0,     0,
       0,   720,   285,     0,   286,     0,   287,     0,   288,   289,
       0,     0,   721,     0,     0,     0,     0,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,     0,   305,   306,   307,   722,   308,   309,   310,
     311,   723,   312,   313,     0,     0,     0,     0,   314,   315,
     316,   317,   724,   319,     0,     0,   725,   321,   726,   322,
       0,   323,   727,   728,   729,   730,   731,   328,   329,   330,
     331,   332,     0,   732,   333,   334,     0,     0,   335,   336,
     337,   338,   733,   734,   735,   339,   340,     0,   736,   737,
       0,   341,   342,   738,     0,   344,   345,   346,   347,     0,
     348,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     349,   350,   351,     0,   739,   352,     0,   353,   354,   355,
     356,   740,   358,   359,   360,   361,   741,   742,   364,   743,
       0,   365,   366,   367,     0,   368,     0,   369,   370,   371,
     372,   373,     0,   744,   375,   376,     0,     0,   377,     0,
       0,     0,   378,   379,   380,   381,   382,     0,     0,   383,
     384,   385,   386,   387,     0,   388,   389,     0,   390,   391,
     392,   745,   746,   393,     0,   394,     0,   395,   396,     0,
     397,   398,     0,     0,   747,   399,   400,   401,   402,   403,
     748,   405,   406,   407,   408,     0,   749,   410,     0,     0,
       0,   411,   412,   413,   414,     0,     0,     0,   415,     0,
       0,     0,   416,     0,   417,   418,   419,   420,   421,     0,
     422,   423,   424,   425,   426,   427,     0,     0,     0,     0,
       0,     0,   428,   429,     0,   430,     0,     0,   431,     0,
       0,   432,   433,   434,   750,   751,   435,   436,     0,   437,
     438,   752,   440,   441,   442,   753,   754,   443,   444,   445,
     446,   755,   447,   448,     0,   449,     0,   450,   451,   452,
     453,     0,   756,   454,   455,     0,   757,   758,   759,   760,
       0,     0,     0,     0,     0,   460,   461,   462,     0,   761,
     762,   763,   464,   465,   466,   764,   467,   468,   765,   469,
     470,     0,   471,   472,     0,     0,   473,     0,     0,   474,
       0,   475,     0,   766,   477,   478,     0,     0,   767,   768,
     769,   770,   479,     0,     0,   480,   771,     0,   772,   481,
     482,   483,   484,   485,   773,     0,     0,     0,     0,     0,
       0,   487,   488,     0,   489,   490,   491,     0,     0,   774,
       0,     0,     0,     0,   775,   776,     0,     0,     0,     0,
     777,   778,     0,     0,   779,   780,     0,     0,   781,   782,
     139,     0,   673,   141,   142,   143,   144,     0,     0,   145,
       0,     0,     0,   146,     0,     0,   674,     0,   148,   149,
     150,   151,   152,   675,   154,     0,   155,     0,     0,   676,
     156,   677,   678,   679,   157,   680,     0,   158,   159,   160,
       0,   161,     0,   162,   163,     0,     0,   164,   681,   682,
     165,   166,     0,   167,   683,   684,   169,   170,     0,   171,
     172,   173,   174,   175,   685,   177,     0,   686,   179,   687,
     688,   689,   690,   691,   692,     0,   186,   187,   188,   189,
     190,   191,   192,   193,     0,   194,   195,     0,   196,   197,
     198,   693,   200,     0,   201,   694,   695,   202,     0,     0,
     203,   696,   697,     0,   204,   698,   699,     0,   205,   206,
     207,   700,   701,   702,     0,     0,     0,     0,   703,   210,
     704,     0,     0,   705,   211,     0,   212,     0,     0,     0,
     213,     0,   214,   215,   216,   217,     0,     0,     0,   218,
       0,     0,   219,   220,   221,     0,     0,     0,   222,     0,
     223,   224,     0,   225,   226,   227,     0,     0,   228,   229,
       0,   230,   231,   232,   233,   234,   235,   706,     0,   236,
     237,   238,   707,   708,   239,   240,     0,   241,   242,   243,
     709,     0,   244,     0,     0,     0,   245,  2257,   246,     0,
     247,     0,   248,   249,   710,   251,   711,   253,     0,   254,
       0,   712,     0,   255,   256,   257,     0,   258,   713,     0,
     259,   260,     0,     0,     0,   714,   262,   263,   264,   715,
       0,   265,   266,   267,     0,   268,     0,   269,     0,     0,
       0,   716,   270,   271,   717,     0,     0,   272,     0,   273,
     274,     0,   275,   276,     0,     0,     0,   277,     0,     0,
     278,   279,   718,     0,     0,   281,     0,   719,   282,   283,
       0,     0,     0,     0,     0,   720,   285,     0,   286,     0,
     287,     0,   288,   289,     0,     0,   721,     0,     0,     0,
       0,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,     0,   305,   306,   307,
     722,   308,   309,   310,   311,   723,   312,   313,     0,     0,
       0,     0,   314,   315,   316,   317,   724,   319,     0,     0,
     725,   321,   726,   322,     0,   323,   727,   728,   729,   730,
     731,   328,   329,   330,   331,   332,     0,   732,   333,   334,
       0,     0,   335,   336,   337,   338,   733,   734,   735,   339,
     340,     0,   736,   737,     0,   341,   342,   738,     0,   344,
     345,   346,   347,     0,   348,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   349,   350,   351,     0,   739,   352,
       0,   353,   354,   355,   356,   740,   358,   359,   360,   361,
     741,   742,   364,   743,     0,   365,   366,   367,     0,   368,
       0,   369,   370,   371,   372,   373,     0,   744,   375,   376,
       0,     0,   377,     0,     0,     0,   378,   379,   380,   381,
     382,     0,     0,   383,   384,   385,   386,   387,     0,   388,
     389,     0,   390,   391,   392,   745,   746,   393,     0,   394,
       0,   395,   396,     0,   397,   398,     0,     0,   747,   399,
     400,   401,   402,   403,   748,   405,   406,   407,   408,     0,
     749,   410,     0,     0,     0,   411,   412,   413,   414,     0,
       0,     0,   415,     0,     0,     0,   416,     0,   417,   418,
     419,   420,   421,     0,   422,   423,   424,   425,   426,   427,
       0,     0,     0,     0,     0,     0,   428,   429,     0,   430,
       0,     0,   431,     0,     0,   432,   433,   434,   750,   751,
     435,   436,     0,   437,   438,   752,   440,   441,   442,   753,
     754,   443,   444,   445,   446,   755,   447,   448,     0,   449,
       0,   450,   451,   452,   453,     0,   756,   454,   455,     0,
     757,   758,   759,   760,     0,     0,     0,     0,     0,   460,
     461,   462,     0,   761,   762,   763,   464,   465,   466,   764,
     467,   468,   765,   469,   470,     0,   471,   472,     0,     0,
     473,     0,     0,   474,     0,   475,     0,   766,   477,   478,
       0,     0,   767,   768,   769,   770,   479,     0,     0,   480,
     771,     0,   772,   481,   482,   483,   484,   485,   773,     0,
       0,     0,     0,     0,     0,   487,   488,     0,   489,   490,
     491,     0,     0,   774,     0,     0,     0,     0,   775,   776,
       0,     0,     0,     0,   777,   778,     0,     0,   779,   780,
       0,     0,   781,   782,   139,     0,   673,   141,   142,   143,
     144,     0,     0,   145,     0,     0,     0,   146,     0,     0,
     674,     0,   148,   149,   150,   151,   152,   675,   154,     0,
     155,     0,     0,   676,   156,   677,   678,   679,   157,   680,
       0,   158,   159,   160,     0,   161,     0,   162,   163,     0,
       0,   164,   681,   682,   165,   166,     0,   167,   683,   684,
     169,   170,     0,   171,   172,   173,   174,   175,   685,   177,
       0,   686,   179,   687,   688,   689,   690,   691,   692,     0,
     186,   187,   188,   189,   190,   191,   192,   193,     0,   194,
     195,     0,   196,   197,   198,   693,   200,     0,   201,   694,
     695,   202,     0,     0,   203,   696,   697,     0,   204,   698,
     699,     0,   205,   206,   207,   700,   701,   702,     0,     0,
       0,     0,   703,   210,   704,     0,     0,   705,   211,     0,
     212,     0,     0,     0,   213,     0,   214,   215,   216,   217,
       0,     0,     0,   218,     0,     0,   219,   220,   221,     0,
       0,     0,   222,     0,   223,   224,     0,   225,   226,   227,
       0,     0,   228,   229,     0,   230,   231,   232,   233,   234,
     235,   706,     0,   236,   237,   238,   707,   708,   239,   240,
       0,   241,   242,   243,   709,     0,   244,     0,     0,     0,
     245,  2259,   246,     0,   247,     0,   248,   249,   710,   251,
     711,   253,     0,   254,     0,   712,     0,   255,   256,   257,
       0,   258,   713,     0,   259,   260,     0,     0,     0,   714,
     262,   263,   264,   715,     0,   265,   266,   267,     0,   268,
       0,   269,     0,     0,     0,   716,   270,   271,   717,     0,
       0,   272,     0,   273,   274,     0,   275,   276,     0,     0,
       0,   277,     0,     0,   278,   279,   718,     0,     0,   281,
       0,   719,   282,   283,     0,     0,     0,     0,     0,   720,
     285,     0,   286,     0,   287,     0,   288,   289,     0,     0,
     721,     0,     0,     0,     0,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
       0,   305,   306,   307,   722,   308,   309,   310,   311,   723,
     312,   313,     0,     0,     0,     0,   314,   315,   316,   317,
     724,   319,     0,     0,   725,   321,   726,   322,     0,   323,
     727,   728,   729,   730,   731,   328,   329,   330,   331,   332,
       0,   732,   333,   334,     0,     0,   335,   336,   337,   338,
     733,   734,   735,   339,   340,     0,   736,   737,     0,   341,
     342,   738,     0,   344,   345,   346,   347,     0,   348,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   349,   350,
     351,     0,   739,   352,     0,   353,   354,   355,   356,   740,
     358,   359,   360,   361,   741,   742,   364,   743,     0,   365,
     366,   367,     0,   368,     0,   369,   370,   371,   372,   373,
       0,   744,   375,   376,     0,     0,   377,     0,     0,     0,
     378,   379,   380,   381,   382,     0,     0,   383,   384,   385,
     386,   387,     0,   388,   389,     0,   390,   391,   392,   745,
     746,   393,     0,   394,     0,   395,   396,     0,   397,   398,
       0,     0,   747,   399,   400,   401,   402,   403,   748,   405,
     406,   407,   408,     0,   749,   410,     0,     0,     0,   411,
     412,   413,   414,     0,     0,     0,   415,     0,     0,     0,
     416,     0,   417,   418,   419,   420,   421,     0,   422,   423,
     424,   425,   426,   427,     0,     0,     0,     0,     0,     0,
     428,   429,     0,   430,     0,     0,   431,     0,     0,   432,
     433,   434,   750,   751,   435,   436,     0,   437,   438,   752,
     440,   441,   442,   753,   754,   443,   444,   445,   446,   755,
     447,   448,     0,   449,     0,   450,   451,   452,   453,     0,
     756,   454,   455,     0,   757,   758,   759,   760,     0,     0,
       0,     0,     0,   460,   461,   462,     0,   761,   762,   763,
     464,   465,   466,   764,   467,   468,   765,   469,   470,     0,
     471,   472,     0,     0,   473,     0,     0,   474,     0,   475,
       0,   766,   477,   478,     0,     0,   767,   768,   769,   770,
     479,     0,     0,   480,   771,     0,   772,   481,   482,   483,
     484,   485,   773,     0,     0,     0,     0,     0,     0,   487,
     488,     0,   489,   490,   491,     0,     0,   774,     0,     0,
       0,     0,   775,   776,     0,     0,     0,     0,   777,   778,
       0,     0,   779,   780,     0,     0,   781,   782,   139,     0,
     673,   141,   142,   143,   144,     0,     0,   145,     0,     0,
       0,   146,     0,     0,   674,     0,   148,   149,   150,   151,
     152,   675,   154,     0,   155,     0,     0,   676,   156,   677,
     678,   679,   157,   680,     0,   158,   159,   160,     0,   161,
       0,   162,   163,     0,     0,   164,   681,   682,   165,   166,
       0,   167,   683,   684,   169,   170,     0,   171,   172,   173,
     174,   175,   685,   177,     0,   686,   179,   687,   688,   689,
     690,   691,   692,     0,   186,   187,   188,   189,   190,   191,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   693,
     200,     0,   201,   694,   695,   202,     0,     0,   203,   696,
     697,     0,   204,   698,   699,     0,   205,   206,   207,   700,
     701,   702,     0,     0,     0,     0,   703,   210,   704,     0,
       0,   705,   211,     0,   212,     0,     0,     0,   213,     0,
     214,   215,   216,   217,     0,     0,     0,   218,     0,     0,
     219,   220,   221,     0,     0,     0,   222,     0,   223,   224,
       0,   225,   226,   227,     0,     0,   228,   229,     0,   230,
     231,   232,   233,   234,   235,   706,     0,   236,   237,   238,
     707,   708,   239,   240,     0,   241,   242,   243,   709,     0,
     244,     0,     0,     0,   245,     0,   246,     0,   247,     0,
     248,   249,   710,   251,   711,   253,     0,   254,     0,   712,
       0,   255,   256,   257,     0,   258,   713,     0,   259,   260,
       0,     0,     0,   714,   262,   263,   264,   715,     0,   265,
     266,   267,     0,   268,     0,   269,     0,     0,     0,   716,
     270,   271,   717,     0,     0,   272,     0,   273,   274,     0,
     275,   276,     0,     0,     0,   277,     0,     0,   278,   279,
     718,     0,     0,   281,     0,   719,   282,   283,     0,     0,
       0,     0,     0,   720,   285,     0,   286,     0,   287,     0,
     288,   289,     0,     0,   721,     0,     0,     0,     0,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,     0,   305,   306,   307,   722,   308,
     309,   310,   311,   723,   312,   313,     0,     0,     0,     0,
     314,   315,   316,   317,   724,   319,     0,     0,   725,   321,
     726,   322,     0,   323,   727,   728,   729,   730,   731,   328,
     329,   330,   331,   332,     0,   732,   333,   334,     0,     0,
     335,   336,   337,   338,   733,   734,   735,   339,   340,     0,
     736,   737,     0,   341,   342,   738,     0,   344,   345,   346,
     347,     0,   348,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   349,   350,   351,     0,   739,   352,     0,   353,
     354,   355,   356,   740,   358,   359,   360,   361,   741,   742,
     364,   743,     0,   365,   366,   367,     0,   368,     0,   369,
     370,   371,   372,   373,     0,   744,   375,   376,     0,     0,
     377,     0,     0,     0,   378,   379,   380,   381,   382,     0,
       0,   383,   384,   385,   386,   387,     0,   388,   389,     0,
     390,   391,   392,   745,   746,   393,     0,   394,     0,   395,
     396,     0,   397,   398,     0,     0,   747,   399,   400,   401,
     402,   403,   748,   405,   406,   407,   408,     0,   749,   410,
       0,     0,     0,   411,   412,   413,   414,     0,     0,     0,
     415,     0,     0,     0,   416,     0,   417,   418,   419,   420,
     421,     0,   422,   423,   424,   425,   426,   427,     0,     0,
       0,     0,     0,     0,   428,   429,     0,   430,     0,     0,
     431,     0,     0,   432,   433,   434,   750,   751,   435,   436,
       0,   437,   438,   752,   440,   441,   442,   753,   754,   443,
     444,   445,   446,   755,   447,   448,     0,   449,     0,   450,
     451,   452,   453,     0,   756,   454,   455,     0,   757,   758,
     759,   760,     0,     0,     0,     0,     0,   460,   461,   462,
       0,   761,   762,   763,   464,   465,   466,   764,   467,   468,
     765,   469,   470,     0,   471,   472,     0,     0,   473,     0,
       0,   474,     0,   475,     0,   766,   477,   478,     0,     0,
     767,   768,   769,   770,   479,     0,     0,   480,   771,     0,
     772,   481,   482,   483,   484,   485,   773,     0,     0,     0,
       0,     0,     0,   487,   488,     0,   489,   490,   491,     0,
       0,   774,     0,     0,     0,     0,   775,   776,     0,     0,
       0,     0,   777,   778,     0,     0,   779,   780,     0,     0,
     781,   782,   139,     0,   673,   141,   142,   143,   144,     0,
       0,   145,     0,     0,     0,   146,     0,     0,   674,     0,
     148,   149,   150,   151,   152,   675,   154,     0,   155,     0,
       0,   676,   156,   677,   678,   679,   157,   680,     0,   158,
     159,   160,     0,   161,     0,   162,   163,     0,     0,   164,
     681,   682,   165,   166,     0,   167,   683,   684,   169,   170,
       0,   171,   172,   173,   174,   175,   685,   177,     0,   686,
     179,   687,   688,   689,   690,   691,   692,     0,   186,   187,
     188,   189,   190,   191,   192,   193,     0,   194,   195,     0,
     196,   197,   198,   693,   200,     0,   201,   694,   695,   202,
       0,     0,   203,   696,   697,     0,   204,   698,   699,     0,
     205,   206,   207,   700,   701,   702,     0,     0,     0,     0,
     703,   210,   704,     0,     0,   705,   211,     0,   212,     0,
       0,     0,   213,     0,   214,   215,   216,   217,     0,     0,
       0,   218,     0,     0,   219,   220,   221,     0,     0,     0,
     222,     0,   223,   224,     0,   225,   226,   227,     0,     0,
     228,   229,     0,   230,   231,   232,   233,   234,   235,   706,
       0,   236,   237,   238,   707,   708,   239,   240,     0,   241,
     242,   243,   709,     0,   244,     0,     0,     0,   245,     0,
     246,     0,   247,     0,   248,   249,   710,   251,   711,   253,
       0,   254,     0,   712,     0,   255,   256,   257,     0,   258,
     713,     0,   259,   260,     0,     0,     0,   714,   262,   263,
     264,   715,     0,   265,   266,   267,     0,   268,     0,   269,
       0,     0,     0,   716,   270,   271,   717,     0,     0,   272,
       0,   273,   274,     0,   275,   276,     0,     0,     0,   277,
       0,     0,   278,   279,   718,     0,     0,   281,     0,   719,
     282,   283,     0,     0,     0,     0,     0,   720,   285,     0,
     286,     0,   287,     0,   288,   289,     0,     0,   721,     0,
       0,     0,     0,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,     0,   305,
     306,   307,   722,   308,   309,   310,   311,   723,   312,   313,
       0,     0,     0,     0,   314,   315,   316,   317,   724,   319,
       0,     0,   725,   321,   726,   322,     0,   323,   727,   728,
     729,   730,   731,   328,   329,   330,   331,   332,     0,   732,
     333,   334,     0,     0,   335,   336,   337,   338,   733,   734,
     735,   339,   340,     0,   736,   737,     0,   341,   342,   738,
       0,   344,   345,   346,   347,     0,   348,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   349,   350,   351,     0,
     739,   352,     0,   353,   354,   355,   356,   740,   358,   359,
     360,   361,   741,   742,   364,   743,     0,   365,   366,   367,
       0,   368,     0,   369,   370,   371,   372,   373,     0,   744,
     375,   376,     0,     0,   377,     0,     0,     0,   378,   379,
     380,   381,   382,     0,     0,   383,   384,   385,   386,   387,
       0,   388,   389,     0,   390,   391,   392,   745,   746,   393,
       0,   394,     0,   395,   396,     0,   397,   398,     0,     0,
     747,   399,   400,   401,   402,   403,   748,   405,   406,   407,
     408,     0,   749,   410,     0,     0,     0,   411,   412,   413,
     414,     0,     0,     0,   415,     0,     0,     0,   416,     0,
     417,   418,   419,   420,   421,     0,   422,   423,   424,   425,
     426,   427,     0,     0,     0,     0,     0,     0,   428,   429,
       0,   430,     0,     0,   431,     0,     0,   432,   433,   434,
     750,   751,   435,   436,     0,   437,   438,   752,   440,   441,
     442,   753,   754,   443,   444,   445,   446,   755,   447,   448,
       0,   449,     0,   450,   451,   452,   453,     0,   756,   454,
     455,     0,   757,   758,   759,   760,     0,     0,     0,     0,
       0,   460,   461,   462,     0,   761,   762,   763,   464,   465,
     466,   764,   467,   468,   765,   469,   470,     0,   471,   472,
       0,     0,   473,     0,     0,   474,     0,   475,     0,   766,
     477,   478,     0,     0,   767,   768,   769,   770,   479,     0,
       0,   480,   771,     0,   772,   481,   482,   483,   484,   485,
     773,     0,     0,     0,     0,     0,     0,   487,   488,     0,
     489,   490,   491,     0,     0,   774,     0,     0,     0,     0,
     775,   776,     0,     0,     0,     0,   777,  1142,     0,     0,
     779,   780,     0,     0,   781,   782,   139,     0,   673,   141,
     142,   143,   144,  1733,     0,   145,     0,     0,     0,  1734,
       0,     0,   674,     0,   148,   149,   150,   151,   152,   675,
     154,     0,   155,     0,     0,   676,   156,   677,   678,   679,
     157,   680,     0,   158,   159,   160,     0,   161,     0,   162,
     163,     0,     0,   164,   681,   682,   165,   166,     0,   167,
     683,   684,   169,   170,     0,   171,   172,   173,   174,   175,
     685,   177,     0,   686,   179,   687,   688,   689,   690,   691,
     692,     0,   186,   187,   188,   189,   190,   191,   192,   193,
       0,   194,   195,     0,   196,   197,   198,   693,   200,     0,
     201,   694,   695,   202,     0,     0,   203,   696,   697,     0,
     204,   698,   699,     0,   205,   206,   207,   700,   701,   702,
       0,     0,     0,     0,   703,   210,   704,     0,     0,   705,
     211,     0,   212,     0,     0,     0,   213,     0,   214,   215,
     216,   217,     0,     0,     0,   218,     0,     0,   219,   220,
     221,     0,     0,     0,   222,     0,   223,   224,     0,   225,
     226,   227,     0,     0,   228,   229,     0,   230,   231,   232,
     233,   234,   235,   706,     0,   236,   237,   238,   707,   708,
     239,   240,     0,   241,   242,   243,   709,     0,   244,     0,
       0,     0,   245,     0,   246,     0,   247,     0,   248,   249,
     710,   251,   711,   253,     0,   254,     0,   712,     0,   255,
     256,   257,     0,   258,   713,     0,   259,   260,     0,     0,
       0,   714,   262,   263,   264,   715,     0,   265,   266,   267,
       0,   268,     0,   269,     0,     0,     0,   716,   270,   271,
     717,     0,     0,   272,     0,   273,   274,     0,   275,   276,
       0,     0,     0,   277,     0,     0,   278,   279,   718,     0,
       0,   281,     0,   719,   282,   283,     0,     0,     0,     0,
       0,   720,   285,     0,   286,     0,   287,     0,   288,   289,
       0,     0,   721,     0,     0,     0,     0,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,     0,   305,   306,   307,   722,   308,   309,   310,
     311,   723,   312,   313,     0,     0,     0,     0,   314,   315,
     316,   317,   724,   319,     0,     0,   725,   321,   726,   322,
       0,   323,   727,   728,   729,   730,   731,   328,   329,   330,
     331,   332,     0,   732,   333,   334,     0,     0,   335,   336,
     337,   338,   733,     0,   735,   339,   340,     0,   736,   737,
       0,   341,   342,   738,     0,   344,   345,   346,   347,     0,
     348,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     349,   350,   351,     0,   739,   352,     0,   353,   354,   355,
     356,   740,   358,   359,   360,   361,   741,   742,   364,   743,
       0,   365,   366,   367,     0,   368,     0,   369,   370,   371,
     372,   373,     0,   744,   375,   376,     0,     0,   377,     0,
       0,     0,   378,   379,   380,   381,   382,     0,     0,   383,
     384,   385,   386,   387,     0,   388,   389,     0,   390,   391,
     392,   745,   746,   393,     0,   394,     0,   395,   396,     0,
     397,   398,     0,     0,   747,   399,   400,   401,   402,   403,
     748,   405,   406,   407,   408,     0,   749,   410,     0,     0,
       0,   411,   412,   413,   414,     0,     0,     0,   415,     0,
       0,     0,   416,     0,   417,   418,   419,   420,   421,     0,
     422,   423,   424,   425,   426,   427,     0,     0,     0,     0,
       0,     0,   428,   429,     0,   430,     0,     0,   431,     0,
       0,   432,   433,   434,   750,   751,   435,   436,     0,   437,
     438,   752,   440,   441,   442,   753,   754,   443,   444,   445,
     446,   755,   447,   448,     0,   449,     0,   450,   451,   452,
     453,     0,   756,   454,   455,     0,   757,   758,   759,   760,
       0,     0,     0,     0,     0,   460,   461,   462,     0,   761,
     762,   763,   464,   465,   466,   764,   467,   468,   765,   469,
     470,     0,   471,   472,     0,     0,   473,     0,     0,   474,
       0,   475,     0,   766,   477,   478,     0,     0,   767,   768,
     769,   770,   479,     0,     0,   480,   771,     0,   772,   481,
     482,   483,   484,   485,   773,     0,     0,     0,     0,     0,
       0,   487,   488,     0,   489,   490,   491,     0,     0,   774,
       0,     0,     0,     0,   775,   776,     0,     0,     0,     0,
     777,   778,     0,     0,   779,   780,     0,     0,   781,   782,
     139,     0,   673,   141,   142,   143,   144,     0,     0,   145,
       0,     0,     0,   146,     0,     0,   674,     0,   148,   149,
     150,   151,   152,   675,   154,     0,   155,     0,     0,   676,
     156,   677,   678,   679,   157,   680,     0,   158,   159,   160,
       0,   161,     0,   162,   163,     0,     0,   164,   681,   682,
     165,   166,     0,   167,   683,   684,   169,   170,     0,   171,
     172,   173,   174,   175,   685,   177,     0,   686,   179,   687,
     688,   689,   690,   691,   692,     0,   186,   187,   188,   189,
     190,   191,   192,   193,     0,   194,   195,     0,   196,   197,
     198,   693,   200,     0,   201,   694,   695,   202,     0,     0,
     203,   696,   697,     0,   204,   698,   699,     0,   205,   206,
     207,   700,   701,   702,     0,     0,     0,     0,   703,   210,
     704,     0,     0,   705,   211,     0,   212,     0,     0,     0,
     213,     0,   214,   215,   216,   217,     0,     0,     0,   218,
       0,     0,   219,   220,   221,     0,     0,     0,   222,     0,
     223,   224,     0,   225,   226,   227,     0,     0,   228,   229,
       0,   230,   231,   232,   233,   234,   235,   706,     0,   236,
     237,   238,   707,   708,   239,   240,     0,   241,   242,   243,
     709,     0,   244,     0,     0,     0,   245,     0,   246,     0,
     247,     0,   248,   249,   710,   251,   711,   253,     0,   254,
       0,   712,     0,   255,   256,   257,     0,   258,   713,     0,
     259,   260,     0,     0,     0,   714,   262,   263,   264,   715,
       0,   265,   266,   267,     0,   268,     0,   269,     0,     0,
       0,   716,   270,   271,   717,     0,     0,   272,     0,   273,
     274,     0,   275,   276,     0,     0,     0,   277,     0,     0,
     278,   279,   718,     0,     0,   281,     0,   719,   282,   283,
       0,     0,     0,     0,     0,   720,   285,     0,   286,     0,
     287,     0,   288,   289,     0,     0,   721,     0,     0,     0,
       0,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,     0,   305,   306,   307,
     722,   308,   309,   310,   311,   723,   312,   313,     0,     0,
       0,     0,   314,   315,   316,   317,   724,   319,     0,     0,
     725,   321,   726,   322,     0,   323,   727,   728,   729,   730,
     731,   328,   329,   330,   331,   332,     0,   732,   333,   334,
       0,     0,   335,   336,   337,   338,   733,   734,   735,   339,
     340,     0,   736,   737,     0,   341,   342,   738,     0,   344,
     345,   346,   347,     0,   348,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   349,   350,   351,     0,   739,   352,
       0,   353,   354,   355,   356,   740,   358,   359,   360,   361,
     741,   742,   364,   743,     0,   365,   366,   367,     0,   368,
       0,   369,   370,   371,   372,   373,     0,   744,   375,   376,
       0,     0,   377,     0,     0,     0,   378,   379,   380,   381,
     382,     0,     0,   383,   384,   385,   386,   387,     0,   388,
     389,     0,   390,   391,   392,   745,   746,   393,     0,   394,
       0,   395,   396,     0,   397,   398,     0,     0,   747,   399,
     400,   401,   402,   403,   748,   405,   406,   407,   408,     0,
     749,   410,     0,     0,     0,   411,   412,   413,   414,     0,
       0,     0,   415,     0,     0,     0,   416,     0,   417,   418,
     419,   420,   421,     0,   422,   423,   424,   425,   426,   427,
       0,     0,     0,     0,     0,     0,   428,   429,     0,   430,
       0,     0,   431,     0,     0,   432,   433,   434,   750,   751,
     435,   436,     0,   437,   438,   752,   440,   441,   442,   753,
     754,   443,   444,   445,   446,   755,   447,   448,     0,   449,
       0,   450,   451,   452,   453,     0,   756,   454,   455,     0,
     757,   758,   759,   760,     0,     0,     0,     0,     0,   460,
     461,   462,     0,   761,   762,   763,   464,   465,   466,   764,
     467,   468,   765,   469,   470,     0,   471,   472,     0,     0,
     473,     0,     0,   474,     0,   475,     0,  1809,   477,   478,
       0,     0,   767,   768,   769,   770,   479,     0,     0,   480,
     771,     0,   772,   481,   482,   483,   484,   485,   773,     0,
       0,     0,     0,     0,     0,   487,   488,     0,   489,   490,
     491,     0,     0,   774,     0,     0,     0,     0,   775,   776,
       0,     0,     0,     0,   777,   778,     0,     0,   779,   780,
       0,     0,   781,   782,   139,     0,   673,   141,   142,   143,
     144,     0,     0,   145,     0,     0,     0,   146,     0,     0,
     674,     0,   148,   149,   150,   151,   152,   675,   154,     0,
     155,     0,     0,   676,   156,   677,   678,   679,   157,   680,
       0,   158,   159,   160,     0,   161,     0,   162,   163,     0,
       0,   164,   681,   682,   165,   166,     0,   167,   683,   684,
     169,   170,     0,   171,   172,   173,   174,   175,   685,   177,
       0,   686,   179,   687,   688,   689,   690,   691,   692,     0,
     186,   187,   188,   189,   190,   191,   192,   193,     0,   194,
     195,     0,   196,   197,   198,   693,   200,     0,   201,   694,
     695,   202,     0,     0,   203,   696,   697,     0,   204,   698,
     699,     0,   205,   206,   207,   700,   701,   702,     0,     0,
       0,     0,   703,   210,   704,     0,     0,   705,   211,     0,
     212,     0,     0,     0,   213,     0,   214,   215,   216,   217,
       0,     0,     0,   218,     0,     0,   219,   220,   221,     0,
       0,     0,   222,     0,   223,   224,     0,   225,   226,   227,
       0,     0,   228,   229,     0,   230,   231,   232,   233,   234,
     235,   706,     0,   236,   237,   238,   707,   708,   239,   240,
       0,   241,   242,   243,   709,     0,   244,     0,     0,     0,
     245,     0,   246,     0,   247,     0,   248,   249,   710,   251,
     711,   253,     0,   254,     0,   712,     0,   255,   256,   257,
       0,   258,   713,     0,   259,   260,     0,     0,     0,   714,
     262,   263,   264,   715,     0,   265,   266,   267,     0,   268,
       0,   269,     0,     0,     0,   716,   270,   271,  2673,     0,
       0,   272,     0,   273,   274,     0,   275,   276,     0,     0,
       0,   277,     0,     0,   278,   279,   718,     0,     0,   281,
       0,   719,   282,   283,     0,     0,     0,     0,     0,   720,
     285,     0,   286,     0,   287,     0,   288,   289,     0,     0,
     721,     0,     0,     0,     0,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
       0,   305,   306,   307,   722,   308,   309,   310,   311,   723,
     312,   313,     0,     0,     0,     0,   314,   315,   316,   317,
     724,   319,     0,     0,   725,   321,   726,   322,     0,   323,
     727,   728,   729,   730,   731,   328,   329,   330,   331,   332,
       0,   732,   333,   334,     0,     0,   335,   336,   337,   338,
     733,   734,   735,   339,   340,     0,   736,   737,     0,   341,
     342,   738,     0,   344,   345,   346,   347,     0,   348,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   349,   350,
     351,     0,   739,   352,     0,   353,   354,   355,   356,   740,
     358,   359,   360,   361,   741,   742,   364,   743,     0,   365,
     366,   367,     0,   368,     0,   369,   370,   371,   372,   373,
       0,   744,   375,   376,     0,     0,   377,     0,     0,     0,
     378,   379,   380,   381,   382,     0,     0,   383,   384,   385,
     386,   387,     0,   388,   389,     0,   390,   391,   392,   745,
     746,   393,     0,   394,     0,   395,   396,     0,   397,   398,
       0,     0,   747,   399,   400,   401,   402,   403,   748,   405,
     406,   407,   408,     0,   749,   410,     0,     0,     0,   411,
     412,   413,   414,     0,     0,     0,   415,     0,     0,     0,
     416,     0,   417,   418,   419,   420,   421,     0,   422,   423,
     424,   425,   426,   427,     0,     0,     0,     0,     0,     0,
     428,   429,     0,   430,     0,     0,   431,     0,     0,   432,
     433,   434,   750,   751,   435,   436,     0,   437,   438,   752,
     440,   441,   442,   753,   754,   443,   444,   445,   446,   755,
     447,   448,     0,   449,     0,   450,   451,   452,   453,     0,
     756,   454,   455,     0,   757,   758,   759,   760,     0,     0,
       0,     0,     0,   460,   461,   462,     0,   761,   762,   763,
     464,   465,   466,   764,   467,   468,   765,   469,   470,     0,
     471,   472,     0,     0,   473,     0,     0,   474,     0,   475,
       0,   766,   477,   478,     0,     0,   767,   768,   769,   770,
     479,     0,     0,   480,   771,     0,   772,   481,   482,   483,
     484,   485,   773,     0,     0,     0,     0,     0,     0,   487,
     488,     0,   489,   490,   491,     0,     0,   774,     0,     0,
       0,     0,   775,   776,     0,     0,     0,     0,   777,   778,
       0,     0,   779,   780,     0,     0,   781,   782,   139,     0,
     673,   141,   142,   143,   144,     0,     0,   145,     0,     0,
       0,   146,     0,     0,   674,     0,   148,   149,   150,   151,
     152,   675,   154,     0,   155,     0,     0,   676,   156,   677,
     678,   679,   157,   680,     0,   158,   159,   160,     0,   161,
       0,   162,   163,     0,     0,   164,   681,   682,   165,   166,
       0,   167,   683,   684,   169,   170,     0,   171,   172,   173,
     174,   175,   685,   177,     0,   686,   179,   687,   688,   689,
     690,   691,   692,     0,   186,   187,   188,   189,   190,   191,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   693,
     200,     0,   201,   694,   695,   202,     0,     0,   203,   696,
     697,     0,   204,   698,   699,     0,   205,   206,   207,   700,
     701,   702,     0,     0,     0,     0,   703,   210,   704,     0,
       0,   705,   211,     0,   212,     0,     0,     0,   213,     0,
     214,   215,   216,   217,     0,     0,     0,   218,     0,     0,
     219,   220,   221,     0,     0,     0,   222,     0,   223,   224,
       0,   225,   226,   227,     0,     0,   228,   229,     0,   230,
     231,   232,   233,   234,   235,   706,     0,   236,   237,   238,
     707,   708,   239,   240,     0,   241,   242,   243,   709,     0,
     244,     0,     0,     0,   245,     0,   246,     0,   247,     0,
     248,   249,   710,   251,   711,   253,     0,   254,     0,   712,
       0,   255,   256,   257,     0,   258,   713,     0,   259,   260,
       0,     0,     0,   714,   262,   263,   264,   715,     0,   265,
     266,   267,     0,   268,     0,   269,     0,     0,     0,   716,
     270,   271,  2725,     0,     0,   272,     0,   273,   274,     0,
     275,   276,     0,     0,     0,   277,     0,     0,   278,   279,
     718,     0,     0,   281,     0,   719,   282,   283,     0,     0,
       0,     0,     0,   720,   285,     0,   286,     0,   287,     0,
     288,   289,     0,     0,   721,     0,     0,     0,     0,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,     0,   305,   306,   307,   722,   308,
     309,   310,   311,   723,   312,   313,     0,     0,     0,     0,
     314,   315,   316,   317,   724,   319,     0,     0,   725,   321,
     726,   322,     0,   323,   727,   728,   729,   730,   731,   328,
     329,   330,   331,   332,     0,   732,   333,   334,     0,     0,
     335,   336,   337,   338,   733,   734,   735,   339,   340,     0,
     736,   737,     0,   341,   342,   738,     0,   344,   345,   346,
     347,     0,   348,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   349,   350,   351,     0,   739,   352,     0,   353,
     354,   355,   356,   740,   358,   359,   360,   361,   741,   742,
     364,   743,     0,   365,   366,   367,     0,   368,     0,   369,
     370,   371,   372,   373,     0,   744,   375,   376,     0,     0,
     377,     0,     0,     0,   378,   379,   380,   381,   382,     0,
       0,   383,   384,   385,   386,   387,     0,   388,   389,     0,
     390,   391,   392,   745,   746,   393,     0,   394,     0,   395,
     396,     0,   397,   398,     0,     0,   747,   399,   400,   401,
     402,   403,   748,   405,   406,   407,   408,     0,   749,   410,
       0,     0,     0,   411,   412,   413,   414,     0,     0,     0,
     415,     0,     0,     0,   416,     0,   417,   418,   419,   420,
     421,     0,   422,   423,   424,   425,   426,   427,     0,     0,
       0,     0,     0,     0,   428,   429,     0,   430,     0,     0,
     431,     0,     0,   432,   433,   434,   750,   751,   435,   436,
       0,   437,   438,   752,   440,   441,   442,   753,   754,   443,
     444,   445,   446,   755,   447,   448,     0,   449,     0,   450,
     451,   452,   453,     0,   756,   454,   455,     0,   757,   758,
     759,   760,     0,     0,     0,     0,     0,   460,   461,   462,
       0,   761,   762,   763,   464,   465,   466,   764,   467,   468,
     765,   469,   470,     0,   471,   472,     0,     0,   473,     0,
       0,   474,     0,   475,     0,   766,   477,   478,     0,     0,
     767,   768,   769,   770,   479,     0,     0,   480,   771,     0,
     772,   481,   482,   483,   484,   485,   773,     0,     0,     0,
       0,     0,     0,   487,   488,     0,   489,   490,   491,     0,
       0,   774,     0,     0,     0,     0,   775,   776,     0,     0,
       0,     0,   777,   778,     0,     0,   779,   780,     0,     0,
     781,   782,   139,     0,   673,   141,   142,   143,   144,     0,
       0,   145,     0,     0,     0,   146,     0,     0,   674,     0,
     148,   149,   150,   151,   152,   675,   154,     0,   155,     0,
       0,   676,   156,   677,   678,   679,   157,   680,     0,   158,
     159,   160,     0,   161,     0,   162,   163,     0,     0,   164,
     681,   682,   165,   166,     0,   167,   683,   684,   169,   170,
       0,   171,   172,   173,   174,   175,   685,   177,     0,   686,
     179,   687,   688,   689,   690,   691,   692,     0,   186,   187,
     188,   189,   190,   191,   192,   193,     0,   194,   195,     0,
     196,   197,   198,   693,   200,     0,   201,   694,   695,   202,
       0,     0,   203,   696,   697,     0,   204,   698,   699,     0,
     205,   206,   207,   700,   701,   702,     0,     0,     0,     0,
     703,   210,   704,     0,     0,  3489,   211,     0,   212,     0,
       0,     0,   213,     0,   214,   215,   216,   217,     0,     0,
       0,   218,     0,     0,   219,   220,   221,     0,     0,     0,
     222,     0,   223,   224,     0,   225,   226,   227,     0,     0,
     228,   229,     0,   230,   231,   232,   233,   234,   235,   706,
       0,   236,   237,   238,   707,   708,   239,   240,     0,   241,
     242,   243,   709,     0,   244,     0,     0,     0,   245,     0,
     246,     0,   247,     0,   248,   249,   710,   251,   711,   253,
       0,   254,     0,   712,     0,   255,   256,   257,     0,   258,
     713,     0,   259,   260,     0,     0,     0,   714,   262,   263,
     264,   715,     0,   265,   266,   267,     0,   268,     0,   269,
       0,     0,     0,   716,   270,   271,   717,     0,     0,   272,
       0,   273,   274,     0,   275,   276,     0,     0,     0,   277,
       0,     0,   278,   279,   718,     0,     0,   281,     0,   719,
     282,   283,     0,     0,     0,     0,     0,   720,   285,     0,
     286,     0,   287,     0,   288,   289,     0,     0,   721,     0,
       0,     0,     0,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,     0,   305,
     306,   307,   722,   308,   309,   310,   311,   723,   312,   313,
       0,     0,     0,     0,   314,   315,   316,   317,   724,   319,
       0,     0,   725,   321,   726,   322,     0,   323,   727,   728,
     729,   730,   731,   328,   329,   330,   331,   332,     0,   732,
     333,   334,     0,     0,   335,   336,   337,   338,   733,   734,
     735,   339,   340,     0,   736,   737,     0,   341,   342,   738,
       0,   344,   345,   346,   347,     0,   348,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   349,   350,   351,     0,
     739,   352,     0,   353,   354,   355,   356,   740,   358,   359,
     360,   361,   741,   742,   364,   743,     0,   365,   366,   367,
       0,   368,     0,   369,   370,   371,   372,   373,     0,   744,
     375,   376,     0,     0,   377,     0,     0,     0,   378,   379,
     380,   381,   382,     0,     0,   383,   384,   385,   386,   387,
       0,   388,   389,     0,   390,   391,   392,   745,   746,   393,
       0,   394,     0,   395,   396,     0,   397,   398,     0,     0,
     747,   399,   400,   401,   402,   403,   748,   405,   406,   407,
     408,     0,   749,   410,     0,     0,     0,   411,   412,   413,
     414,     0,     0,     0,   415,     0,     0,     0,   416,     0,
     417,   418,   419,   420,   421,     0,   422,   423,   424,   425,
     426,   427,     0,     0,     0,     0,     0,     0,   428,   429,
       0,   430,     0,     0,   431,     0,     0,   432,   433,   434,
     750,   751,   435,   436,     0,   437,   438,   752,   440,   441,
     442,   753,   754,   443,   444,   445,   446,   755,   447,   448,
       0,   449,     0,   450,   451,   452,   453,     0,   756,   454,
     455,     0,   757,   758,   759,   760,     0,     0,     0,     0,
       0,   460,   461,   462,     0,   761,   762,   763,   464,   465,
     466,   764,   467,   468,   765,   469,   470,     0,   471,   472,
       0,     0,   473,     0,     0,   474,     0,   475,     0,   766,
     477,   478,     0,     0,   767,   768,   769,   770,   479,     0,
       0,   480,   771,     0,   772,   481,   482,   483,   484,   485,
     773,     0,     0,     0,     0,     0,     0,   487,   488,     0,
     489,   490,   491,     0,     0,   774,     0,     0,     0,     0,
     775,   776,     0,     0,     0,     0,   777,   778,     0,     0,
     779,   780,     0,     0,   781,   782,   139,     0,   673,   141,
     142,   143,   144,     0,     0,   145,     0,     0,     0,   146,
       0,     0,   674,     0,   148,   149,   150,   151,   152,   675,
     154,     0,   155,     0,     0,   676,   156,   677,   678,   679,
     157,   680,     0,   158,   159,   160,     0,   161,     0,   162,
     163,     0,     0,   164,   681,   682,   165,   166,     0,   167,
     683,   684,   169,   170,     0,   171,   172,   173,   174,   175,
     685,   177,     0,   686,   179,   687,   688,   689,   690,   691,
     692,     0,   186,   187,   188,   189,   190,   191,   192,   193,
       0,   194,   195,     0,   196,   197,   198,   693,   200,     0,
     201,   694,   695,   202,     0,     0,   203,   696,   697,     0,
     204,   698,   699,     0,   205,   206,   207,   700,   701,   702,
       0,     0,     0,     0,   703,   210,   704,     0,     0,   705,
     211,     0,   212,     0,     0,     0,   213,     0,   214,   215,
     216,   217,     0,     0,     0,   218,     0,     0,   219,   220,
     221,     0,     0,     0,   222,     0,   223,   224,     0,   225,
     226,   227,     0,     0,   228,   229,     0,   230,   231,   232,
     233,   234,   235,   706,     0,   236,   237,   238,   707,   708,
     239,   240,     0,   241,   242,   243,   709,     0,   244,     0,
       0,     0,   245,     0,   246,     0,   247,     0,   248,   249,
     710,   251,   711,   253,     0,   254,     0,   712,     0,   255,
     256,   257,     0,   258,   713,     0,   259,   260,     0,     0,
       0,   714,   262,   263,   264,   715,     0,   265,   266,   267,
       0,   268,     0,   269,     0,     0,     0,   716,   270,   271,
     717,     0,     0,   272,     0,   273,   274,     0,   275,   276,
       0,     0,     0,   277,     0,     0,   278,   279,   718,     0,
       0,   281,     0,   719,   282,   283,     0,     0,     0,     0,
       0,   720,   285,     0,   286,     0,   287,     0,   288,   289,
       0,     0,   721,     0,     0,     0,     0,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,     0,   305,   306,   307,   722,   308,   309,   310,
     311,   723,   312,   313,  4356,     0,     0,     0,   314,   315,
     316,   317,   724,   319,     0,     0,   725,   321,   726,   322,
       0,   323,   727,   728,   729,   730,   731,   328,   329,   330,
     331,   332,     0,   732,   333,   334,     0,     0,   335,   336,
     337,   338,   733,     0,   735,   339,   340,     0,   736,   737,
       0,   341,   342,   738,     0,   344,   345,   346,   347,     0,
     348,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     349,   350,   351,     0,   739,   352,     0,   353,   354,   355,
     356,   740,   358,   359,   360,   361,   741,   742,   364,   743,
       0,   365,   366,   367,     0,   368,     0,   369,   370,   371,
     372,   373,     0,   744,   375,   376,     0,     0,   377,     0,
       0,     0,   378,   379,   380,   381,   382,     0,     0,   383,
     384,   385,   386,   387,     0,   388,   389,     0,   390,   391,
     392,   745,   746,   393,     0,   394,     0,   395,   396,     0,
     397,   398,     0,     0,   747,   399,   400,   401,   402,   403,
     748,   405,   406,   407,   408,     0,   749,   410,     0,     0,
       0,   411,   412,   413,   414,     0,     0,     0,   415,     0,
       0,     0,   416,     0,   417,   418,   419,   420,   421,     0,
     422,   423,   424,   425,   426,   427,     0,     0,     0,     0,
       0,     0,   428,   429,     0,   430,     0,     0,   431,     0,
       0,   432,   433,   434,   750,   751,   435,   436,     0,   437,
     438,   752,   440,   441,   442,   753,   754,   443,   444,   445,
     446,   755,   447,   448,     0,   449,     0,   450,   451,   452,
     453,     0,   756,   454,   455,     0,   757,   758,   759,   760,
       0,     0,     0,     0,     0,   460,   461,   462,     0,   761,
     762,   763,   464,   465,   466,   764,   467,   468,   765,   469,
     470,     0,   471,   472,     0,     0,   473,     0,     0,   474,
       0,   475,     0,   766,   477,   478,     0,     0,   767,   768,
     769,   770,   479,     0,     0,   480,   771,     0,   772,   481,
     482,   483,   484,   485,   773,     0,     0,     0,     0,     0,
       0,   487,   488,     0,   489,   490,   491,     0,     0,   774,
       0,     0,     0,     0,   775,   776,     0,     0,     0,     0,
     777,   778,     0,     0,   779,   780,     0,     0,   781,   782,
     139,     0,   673,   141,   142,   143,   144,     0,     0,   145,
       0,     0,     0,   146,     0,     0,   674,     0,   148,   149,
     150,   151,   152,   675,   154,     0,   155,     0,     0,   676,
     156,   677,   678,   679,   157,   680,     0,   158,   159,   160,
       0,   161,     0,   162,   163,     0,     0,   164,   681,   682,
     165,   166,     0,   167,   683,   684,   169,   170,     0,   171,
     172,   173,   174,   175,   685,   177,     0,   686,   179,   687,
     688,   689,   690,   691,   692,     0,   186,   187,   188,   189,
     190,   191,   192,   193,     0,   194,   195,     0,   196,   197,
     198,   693,   200,     0,   201,   694,   695,   202,     0,     0,
     203,   696,   697,     0,   204,   698,   699,     0,   205,   206,
     207,   700,   701,   702,     0,     0,     0,     0,   703,   210,
     704,     0,     0,   705,   211,     0,   212,     0,     0,     0,
     213,     0,   214,   215,   216,   217,     0,     0,     0,   218,
       0,     0,   219,   220,   221,     0,     0,     0,   222,     0,
     223,   224,     0,   225,   226,   227,     0,     0,   228,   229,
       0,   230,   231,   232,   233,   234,   235,   706,     0,   236,
     237,   238,   707,   708,   239,   240,     0,   241,   242,   243,
     709,     0,   244,     0,     0,     0,   245,     0,   246,     0,
     247,     0,   248,   249,   710,   251,   711,   253,     0,   254,
       0,   712,     0,   255,   256,   257,     0,   258,   713,     0,
     259,   260,     0,     0,     0,   714,   262,   263,   264,   715,
       0,   265,   266,   267,     0,   268,     0,   269,     0,     0,
       0,   716,   270,   271,   717,     0,     0,   272,     0,   273,
     274,     0,   275,   276,     0,     0,     0,   277,     0,     0,
     278,   279,   718,     0,     0,   281,     0,   719,   282,   283,
       0,     0,     0,     0,     0,   720,   285,     0,   286,     0,
     287,     0,   288,   289,     0,     0,   721,     0,     0,     0,
       0,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,     0,   305,   306,   307,
     722,   308,   309,   310,   311,   723,   312,   313,     0,     0,
       0,     0,   314,   315,   316,   317,   724,   319,     0,     0,
     725,   321,   726,   322,     0,   323,   727,   728,   729,   730,
     731,   328,   329,   330,   331,   332,     0,   732,   333,   334,
       0,     0,   335,   336,   337,   338,   733,     0,   735,   339,
     340,     0,   736,   737,     0,   341,   342,   738,     0,   344,
     345,   346,   347,     0,   348,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   349,   350,   351,     0,   739,   352,
       0,   353,   354,   355,   356,   740,   358,   359,   360,   361,
     741,   742,   364,   743,     0,   365,   366,   367,     0,   368,
       0,   369,   370,   371,   372,   373,     0,   744,   375,   376,
       0,     0,   377,     0,     0,     0,   378,   379,   380,   381,
     382,     0,     0,   383,   384,   385,   386,   387,     0,   388,
     389,     0,   390,   391,   392,   745,   746,   393,     0,   394,
       0,   395,   396,     0,   397,   398,     0,     0,   747,   399,
     400,   401,   402,   403,   748,   405,   406,   407,   408,     0,
     749,   410,     0,     0,     0,   411,   412,   413,   414,     0,
       0,     0,   415,     0,     0,     0,   416,     0,   417,   418,
     419,   420,   421,     0,   422,   423,   424,   425,   426,   427,
       0,     0,     0,     0,     0,     0,   428,   429,     0,   430,
       0,     0,   431,     0,     0,   432,   433,   434,   750,   751,
     435,   436,     0,   437,   438,   752,   440,   441,   442,   753,
     754,   443,   444,   445,   446,   755,   447,   448,     0,   449,
       0,   450,   451,   452,   453,     0,   756,   454,   455,     0,
     757,   758,   759,   760,     0,     0,     0,     0,     0,   460,
     461,   462,     0,   761,   762,   763,   464,   465,   466,   764,
     467,   468,   765,   469,   470,     0,   471,   472,     0,     0,
     473,     0,     0,   474,     0,   475,     0,   766,   477,   478,
       0,     0,   767,   768,   769,   770,   479,     0,     0,   480,
     771,     0,   772,   481,   482,   483,   484,   485,   773,     0,
       0,     0,     0,     0,     0,   487,   488,     0,   489,   490,
     491,     0,     0,   774,     0,     0,     0,     0,   775,   776,
       0,     0,     0,     0,   777,   778,     0,     0,   779,   780,
       0,     0,   781,   782,   139,     0,   673,   141,   142,   143,
     144,     0,     0,   145,     0,     0,     0,   146,     0,     0,
     674,     0,   148,   149,   150,   151,   152,   675,   154,     0,
     155,     0,     0,   676,   156,   677,   678,   679,   157,   680,
       0,   158,   159,   160,     0,   161,     0,   162,   163,     0,
       0,   164,   681,   682,   165,   166,     0,   167,   683,   684,
     169,   170,     0,   171,   172,   173,   174,   175,   685,   177,
       0,   686,   179,   687,   688,   689,   690,   691,   692,     0,
     186,   187,   188,   189,   190,   191,   192,   193,     0,   194,
     195,     0,   196,   197,   198,   693,   200,     0,   201,   694,
     695,   202,     0,     0,   203,   696,   697,     0,   204,   698,
     699,     0,   205,   206,   207,   700,   701,   702,     0,     0,
       0,     0,   703,   210,   704,     0,     0,   705,   211,     0,
     212,     0,     0,     0,   213,     0,   214,   215,   216,   217,
       0,     0,     0,   218,     0,     0,   219,   220,   221,     0,
       0,     0,   222,     0,   223,   224,     0,   225,   226,   227,
       0,     0,   228,   229,     0,   230,   231,   232,   233,   234,
     235,   706,     0,   236,   237,   238,   707,   708,   239,   240,
       0,   241,   242,   243,   709,     0,   244,     0,     0,     0,
     245,     0,   246,     0,   247,     0,   248,   249,   710,   251,
     711,   253,     0,   254,     0,   712,     0,   255,   256,   257,
       0,   258,   713,     0,   259,   260,     0,     0,     0,   714,
     262,   263,   264,   715,     0,   265,   266,   267,     0,   268,
       0,   269,     0,     0,     0,   716,   270,   271,  1748,     0,
       0,   272,     0,   273,   274,     0,   275,   276,     0,     0,
       0,   277,     0,     0,   278,   279,   718,     0,     0,   281,
       0,   719,   282,   283,     0,     0,     0,     0,     0,   720,
     285,     0,   286,     0,   287,     0,   288,   289,     0,     0,
     721,     0,     0,     0,     0,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
       0,   305,   306,   307,   722,   308,   309,   310,   311,   723,
     312,   313,     0,     0,     0,     0,   314,   315,   316,   317,
     724,   319,     0,     0,   725,   321,   726,   322,     0,   323,
     727,   728,   729,   730,   731,   328,   329,   330,   331,   332,
       0,   732,   333,   334,     0,     0,   335,   336,   337,   338,
     733,     0,   735,   339,   340,     0,   736,   737,     0,   341,
     342,   738,     0,   344,   345,   346,   347,     0,   348,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   349,   350,
     351,     0,   739,   352,     0,   353,   354,   355,   356,   740,
     358,   359,   360,   361,   741,   742,   364,   743,     0,   365,
     366,   367,     0,   368,     0,   369,   370,   371,   372,   373,
       0,   744,   375,   376,     0,     0,   377,     0,     0,     0,
     378,   379,   380,   381,   382,     0,     0,   383,   384,   385,
     386,   387,     0,   388,   389,     0,   390,   391,   392,   745,
     746,   393,     0,   394,     0,   395,   396,     0,   397,   398,
       0,     0,   747,   399,   400,   401,   402,   403,   748,   405,
     406,   407,   408,     0,   749,   410,     0,     0,     0,   411,
     412,   413,   414,     0,     0,     0,   415,     0,     0,     0,
     416,     0,   417,   418,   419,   420,   421,     0,   422,   423,
     424,   425,   426,   427,     0,     0,     0,     0,     0,     0,
     428,   429,     0,   430,     0,     0,   431,     0,     0,   432,
     433,   434,   750,   751,   435,   436,     0,   437,   438,   752,
     440,   441,   442,   753,   754,   443,   444,   445,   446,   755,
     447,   448,     0,   449,     0,   450,   451,   452,   453,     0,
     756,   454,   455,     0,   757,   758,   759,   760,     0,     0,
       0,     0,     0,   460,   461,   462,     0,   761,   762,   763,
     464,   465,   466,   764,   467,   468,   765,   469,   470,     0,
     471,   472,     0,     0,   473,     0,     0,   474,     0,   475,
       0,   766,   477,   478,     0,     0,   767,   768,   769,   770,
     479,     0,     0,   480,   771,     0,   772,   481,   482,   483,
     484,   485,   773,     0,     0,     0,     0,     0,     0,   487,
     488,     0,   489,   490,   491,     0,     0,   774,     0,     0,
       0,     0,   775,   776,     0,     0,     0,     0,   777,   778,
       0,     0,   779,   780,     0,     0,   781,   782,   139,     0,
     673,   141,   142,   143,   144,     0,     0,   145,     0,     0,
       0,   146,     0,     0,   674,     0,   148,   149,   150,   151,
     152,   675,   154,     0,   155,     0,     0,   676,   156,   677,
     678,   679,   157,   680,     0,   158,   159,   160,     0,   161,
       0,   162,   163,     0,     0,   164,   681,   682,   165,   166,
       0,   167,   683,   684,   169,   170,     0,   171,   172,   173,
     174,   175,   685,   177,     0,   686,   179,   687,   688,   689,
     690,   691,   692,     0,   186,   187,   188,   189,   190,   191,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   693,
     200,     0,   201,   694,   695,   202,     0,     0,   203,   696,
     697,     0,   204,   698,   699,     0,   205,   206,   207,   700,
     701,   702,     0,     0,     0,     0,   703,   210,   704,     0,
       0,   705,   211,     0,   212,     0,     0,     0,   213,     0,
     214,   215,   216,   217,     0,     0,     0,   218,     0,     0,
     219,   220,   221,     0,     0,     0,   222,     0,   223,   224,
       0,   225,   226,   227,     0,     0,   228,   229,     0,   230,
     231,   232,   233,   234,   235,   706,     0,   236,   237,   238,
     707,   708,   239,   240,     0,   241,   242,   243,   709,     0,
     244,     0,     0,     0,   245,     0,   246,     0,   247,     0,
     248,   249,   710,   251,   711,   253,     0,   254,     0,   712,
       0,   255,   256,   257,     0,   258,   713,     0,   259,   260,
       0,     0,     0,   714,   262,   263,   264,   715,     0,   265,
     266,   267,     0,   268,     0,   269,     0,     0,     0,   716,
     270,   271,  1750,     0,     0,   272,     0,   273,   274,     0,
     275,   276,     0,     0,     0,   277,     0,     0,   278,   279,
     718,     0,     0,   281,     0,   719,   282,   283,     0,     0,
       0,     0,     0,   720,   285,     0,   286,     0,   287,     0,
     288,   289,     0,     0,   721,     0,     0,     0,     0,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,     0,   305,   306,   307,   722,   308,
     309,   310,   311,   723,   312,   313,     0,     0,     0,     0,
     314,   315,   316,   317,   724,   319,     0,     0,   725,   321,
     726,   322,     0,   323,   727,   728,   729,   730,   731,   328,
     329,   330,   331,   332,     0,   732,   333,   334,     0,     0,
     335,   336,   337,   338,   733,     0,   735,   339,   340,     0,
     736,   737,     0,   341,   342,   738,     0,   344,   345,   346,
     347,     0,   348,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   349,   350,   351,     0,   739,   352,     0,   353,
     354,   355,   356,   740,   358,   359,   360,   361,   741,   742,
     364,   743,     0,   365,   366,   367,     0,   368,     0,   369,
     370,   371,   372,   373,     0,   744,   375,   376,     0,     0,
     377,     0,     0,     0,   378,   379,   380,   381,   382,     0,
       0,   383,   384,   385,   386,   387,     0,   388,   389,     0,
     390,   391,   392,   745,   746,   393,     0,   394,     0,   395,
     396,     0,   397,   398,     0,     0,   747,   399,   400,   401,
     402,   403,   748,   405,   406,   407,   408,     0,   749,   410,
       0,     0,     0,   411,   412,   413,   414,     0,     0,     0,
     415,     0,     0,     0,   416,     0,   417,   418,   419,   420,
     421,     0,   422,   423,   424,   425,   426,   427,     0,     0,
       0,     0,     0,     0,   428,   429,     0,   430,     0,     0,
     431,     0,     0,   432,   433,   434,   750,   751,   435,   436,
       0,   437,   438,   752,   440,   441,   442,   753,   754,   443,
     444,   445,   446,   755,   447,   448,     0,   449,     0,   450,
     451,   452,   453,     0,   756,   454,   455,     0,   757,   758,
     759,   760,     0,     0,     0,     0,     0,   460,   461,   462,
       0,   761,   762,   763,   464,   465,   466,   764,   467,   468,
     765,   469,   470,     0,   471,   472,     0,     0,   473,     0,
       0,   474,     0,   475,     0,   766,   477,   478,     0,     0,
     767,   768,   769,   770,   479,     0,     0,   480,   771,     0,
     772,   481,   482,   483,   484,   485,   773,     0,     0,     0,
       0,     0,     0,   487,   488,     0,   489,   490,   491,     0,
       0,   774,     0,     0,     0,     0,   775,   776,     0,     0,
       0,     0,   777,   778,     0,     0,   779,   780,     0,     0,
     781,   782,   139,     0,   140,   141,   142,   143,   144,     0,
       0,   145,     0,     0,     0,   146,     0,     0,   147,     0,
     148,   149,   150,   151,   152,   153,   154,     0,   155,     0,
       0,     0,   156,   677,     0,     0,   157,     0,     0,   158,
     159,   160,     0,   161,     0,   162,   163,     0,     0,   164,
       0,     0,   165,   166,     0,   167,   168,     0,   169,   170,
       0,   171,   172,   173,   174,   175,   176,   177,     0,   178,
     179,   180,   181,   182,   183,   184,   185,     0,   186,   187,
     188,   189,   190,   191,   192,   193,     0,   194,   195,     0,
     196,   197,   198,   199,   200,     0,   201,     0,     0,   202,
       0,     0,   203,     0,     0,     0,   204,     0,     0,     0,
     205,   206,   207,     0,     0,  2390,     0,     0,     0,     0,
     209,   210,   704,     0,     0,     0,   211,     0,   212,     0,
       0,     0,   213,     0,   214,   215,   216,   217,     0,     0,
       0,   218,     0,     0,   219,   220,   221,     0,     0,     0,
     222,     0,   223,   224,     0,   225,   226,   227,     0,     0,
     228,   229,     0,   230,   231,   232,   233,   234,   235,     0,
       0,   236,   237,   238,     0,   708,   239,   240,     0,   241,
     242,   243,   709,     0,   244,     0,     0,     0,   245,     0,
     246,     0,   247,     0,   248,   249,   250,   251,   252,   253,
       0,   254,     0,     0,     0,   255,   256,   257,     0,   258,
     713,     0,   259,   260,     0,     0,     0,   261,   262,   263,
     264,     0,     0,   265,   266,   267,     0,   268,     0,   269,
       0,     0,     0,     0,   270,   271,     0,     0,     0,   272,
       0,   273,   274,     0,   275,   276,     0,     0,     0,   277,
       0,     0,   278,   279,   280,     0,     0,   281,     0,     0,
     282,   283,     0,     0,     0,     0,     0,   284,   285,     0,
     286,     0,   287,     0,   288,   289,     0,     0,   721,     0,
       0,     0,     0,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,     0,   305,
     306,   307,     0,   308,   309,   310,   311,     0,   312,   313,
       0,     0,     0,     0,   314,   315,   316,   317,   318,   319,
       0,     0,   320,   321,     0,   322,     0,   323,     0,   324,
     325,   326,   327,   328,   329,   330,   331,   332,     0,   732,
     333,   334,     0,     0,   335,   336,   337,   338,     0,     0,
       0,   339,   340,     0,   736,   737,     0,   341,   342,   343,
       0,   344,   345,   346,   347,     0,   348,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   349,   350,   351,     0,
       0,   352,     0,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,     0,     0,   365,   366,   367,
       0,   368,     0,   369,   370,   371,   372,   373,     0,   374,
     375,   376,     0,     0,   377,     0,     0,     0,   378,   379,
     380,   381,   382,     0,     0,   383,   384,   385,   386,   387,
       0,   388,   389,     0,   390,   391,   392,     0,     0,   393,
       0,   394,     0,   395,   396,     0,   397,   398,     0,     0,
       0,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,     0,   409,   410,     0,     0,     0,   411,   412,   413,
     414,     0,     0,     0,   415,     0,     0,     0,   416,     0,
     417,   418,   419,   420,   421,     0,   422,   423,   424,   425,
     426,   427,     0,     0,     0,     0,     0,     0,   428,   429,
       0,   430,     0,     0,   431,     0,     0,   432,   433,   434,
       0,     0,   435,   436,     0,   437,   438,   439,   440,   441,
     442,     0,     0,   443,   444,   445,   446,     0,   447,   448,
       0,   449,     0,   450,   451,   452,   453,     0,   756,   454,
     455,     0,  2391,   457,   458,  2392,     0,     0,     0,     0,
       0,   460,   461,   462,     0,     0,   762,   463,   464,   465,
     466,   764,   467,   468,   765,   469,   470,     0,   471,   472,
       0,     0,   473,     0,     0,   474,     0,   475,     0,   476,
     477,   478,     0,     0,     0,     0,     0,     0,   479,     0,
       0,   480,     0,     0,     0,   481,   482,   483,   484,   485,
     486,     0,     0,     0,     0,     0,     0,   487,   488,     0,
     489,   490,   491,     0,     0,   492,     0,     0,     0,     0,
     139,     0,   140,   141,   142,   143,   144,     0,     0,   145,
       0,     0,     0,   146,   781,   782,   147,     0,   148,   149,
     150,   151,   152,   153,   154,     0,   155,     0,     0,     0,
     156,     0,     0,     0,   157,     0,     0,   158,   159,   160,
       0,   161,     0,   162,   163,     0,     0,   164,     0,     0,
     165,   166,     0,   167,   168,     0,   169,   170,     0,   171,
     172,   173,   174,   175,   176,   177,     0,   178,   179,   180,
     181,   182,   183,   184,   185,     0,   186,   187,   188,   189,
     190,   191,   192,   193,     0,   194,   195,  2518,   196,   197,
     198,   199,   200,     0,   201,     0,     0,   202,     0,     0,
     203,     0,     0,     0,   204,     0,     0,     0,   205,   206,
     207,     0,     0,   208,     0,     0,     0,     0,   209,   210,
       0,     0,     0,     0,   211,     0,   212,     0,     0,     0,
     213,     0,   214,   215,   216,   217,     0,     0,     0,   218,
       0,     0,   219,   220,   221,     0,     0,     0,   222,     0,
     223,   224,     0,   225,   226,   227,     0,     0,   228,   229,
       0,   230,   231,   232,   233,   234,   235,     0,     0,   236,
     237,   238,     0,     0,   239,   240,     0,   241,   242,   243,
       0,     0,   244,     0,     0,     0,   245,     0,   246,   506,
     247,     0,   248,   249,   250,   251,   252,   253,     0,   254,
       0,     0,     0,   255,   256,   257,     0,   258,     0,     0,
     259,   260,     0,     0,     0,   261,   262,   263,   264,     0,
       0,   265,   266,   267,  2088,   268,     0,   269,     0,     0,
       0,     0,   270,   271,     0,     0,     0,   272,     0,   273,
     274,     0,   275,   276,     0,     0,     0,   277,  2089,     0,
     278,   279,   280,     0,     0,   281,     0,     0,   282,   283,
       0,  3087,     0,     0,     0,   284,   285,     0,   286,     0,
     287,     0,   288,   289,     0,     0,     0,     0,     0,     0,
       0,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,     0,   305,   306,   307,
       0,   308,   309,   310,   311,     0,   312,   313,     0,     0,
       0,     0,   314,   315,   316,   317,   318,   319,     0,     0,
     320,   321,     0,   322,     0,   323,     0,   324,   325,   326,
     327,   328,   329,   330,   331,   332,     0,     0,   333,   334,
       0,     0,   335,   336,   337,   338,     0,     0,     0,   339,
     340,     0,     0,     0,     0,   341,   342,   343,     0,   344,
     345,   346,   347,     0,   348,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   349,   350,   351,     0,     0,   352,
       0,   353,   354,   355,  3088,   357,   358,   359,   360,   361,
     362,   363,   364,     0,     0,   365,   366,   367,     0,   368,
       0,   369,   370,   371,   372,   373,     0,   374,   375,   376,
       0,     0,   377,     0,     0,     0,   378,   379,   380,   381,
     382,     0,     0,   383,   384,   385,   386,   387,     0,   388,
     389,     0,   390,   391,   392,     0,     0,   393,     0,   394,
       0,   395,   396,     0,   397,   398,     0,     0,     0,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,     0,
     409,   410,  -444,     0,     0,   411,   412,   413,   414,     0,
       0,     0,   415,     0,     0,     0,   416,     0,   417,   418,
     419,   420,   421,     0,   422,   423,   424,   425,   426,   427,
     509,     0,     0,     0,     0,     0,   428,   429,     0,   430,
       0,     0,   431,     0,     0,   432,   433,   434,     0,     0,
     435,   436,     0,   437,   438,   439,   440,   441,   442,     0,
       0,   443,   444,   445,   446,     0,   447,   448,     0,   449,
       0,   450,   451,   452,   453,     0,     0,   454,   455,     0,
     456,   457,   458,   459,     0,     0,     0,     0,     0,   460,
     461,   462,     0,     0,     0,   463,   464,   465,   466,     0,
     467,   468,     0,   469,   470,     0,   471,   472,     0,     0,
     473,     0,     0,   474,     0,   475,     0,   476,   477,   478,
       0,     0,     0,     0,     0,     0,   479,     0,     0,   480,
       0,     0,     0,   481,   482,   483,   484,   485,   486,     0,
       0,     0,     0,     0,     0,   487,   488,     0,   489,   490,
     491,     0,     0,   492,     0,     0,   139,     0,   140,   141,
     142,   143,   144,     0,     0,   145,     0,     0,     0,   146,
       0,     0,   147,  2585,   148,   149,   150,   151,   152,   153,
     154,     0,   155,     0,     0,     0,   156,     0,     0,     0,
     157,     0,     0,   158,   159,   160,     0,   161,     0,   162,
     163,     0,     0,   164,     0,     0,   165,   166,     0,   167,
     168,     0,   169,   170,     0,   171,   172,   173,   174,   175,
     176,   177,     0,   178,   179,   180,   181,   182,   183,   184,
     185,     0,   186,   187,   188,   189,   190,   191,   192,   193,
       0,   194,   195,  2518,   196,   197,   198,   199,   200,     0,
     201,     0,     0,   202,     0,     0,   203,     0,     0,     0,
     204,     0,     0,     0,   205,   206,   207,     0,     0,   208,
       0,     0,     0,     0,   209,   210,     0,     0,     0,     0,
     211,     0,   212,     0,     0,     0,   213,     0,   214,   215,
     216,   217,     0,     0,     0,   218,     0,     0,   219,   220,
     221,     0,     0,     0,   222,     0,   223,   224,     0,   225,
     226,   227,     0,     0,   228,   229,     0,   230,   231,   232,
     233,   234,   235,     0,     0,   236,   237,   238,     0,     0,
     239,   240,     0,   241,   242,   243,     0,     0,   244,     0,
       0,     0,   245,     0,   246,   506,   247,     0,   248,   249,
     250,   251,   252,   253,     0,   254,     0,     0,     0,   255,
     256,   257,     0,   258,     0,     0,   259,   260,     0,     0,
       0,   261,   262,   263,   264,     0,     0,   265,   266,   267,
    2088,   268,     0,   269,     0,     0,     0,     0,   270,   271,
       0,     0,     0,   272,     0,   273,   274,     0,   275,   276,
       0,     0,     0,   277,  2089,     0,   278,   279,   280,     0,
       0,   281,     0,     0,   282,   283,     0,     0,     0,     0,
       0,   284,   285,     0,   286,     0,   287,     0,   288,   289,
       0,     0,     0,     0,     0,     0,     0,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,     0,   305,   306,   307,     0,   308,   309,   310,
     311,     0,   312,   313,     0,     0,     0,     0,   314,   315,
     316,   317,   318,   319,     0,     0,   320,   321,     0,   322,
       0,   323,     0,   324,   325,   326,   327,   328,   329,   330,
     331,   332,     0,     0,   333,   334,     0,     0,   335,   336,
     337,   338,     0,     0,     0,   339,   340,     0,     0,     0,
       0,   341,   342,   343,     0,   344,   345,   346,   347,     0,
     348,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     349,   350,   351,     0,     0,   352,     0,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,     0,
       0,   365,   366,   367,     0,   368,     0,   369,   370,   371,
     372,   373,     0,   374,   375,   376,     0,     0,   377,     0,
       0,     0,   378,   379,   380,   381,   382,     0,     0,   383,
     384,   385,   386,   387,     0,   388,   389,     0,   390,   391,
     392,     0,     0,   393,     0,   394,     0,   395,   396,     0,
     397,   398,     0,     0,     0,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,     0,   409,   410,     0,     0,
       0,   411,   412,   413,   414,     0,     0,     0,   415,     0,
       0,     0,   416,     0,   417,   418,   419,   420,   421,     0,
     422,   423,   424,   425,   426,   427,   509,     0,     0,     0,
       0,     0,   428,   429,     0,   430,     0,     0,   431,     0,
       0,   432,   433,   434,     0,     0,   435,   436,     0,   437,
     438,   439,   440,   441,   442,     0,     0,   443,   444,   445,
     446,     0,   447,   448,     0,   449,     0,   450,   451,   452,
     453,     0,     0,   454,   455,     0,   456,   457,   458,   459,
       0,     0,     0,     0,     0,   460,   461,   462,     0,     0,
       0,   463,   464,   465,   466,     0,   467,   468,     0,   469,
     470,     0,   471,   472,     0,     0,   473,     0,     0,   474,
       0,   475,     0,   476,   477,   478,     0,     0,     0,     0,
       0,     0,   479,     0,     0,   480,     0,     0,     0,   481,
     482,   483,   484,   485,   486,     0,     0,     0,     0,     0,
       0,   487,   488,     0,   489,   490,   491,     0,     0,   492,
       0,     0,   139,     0,   140,   141,   142,   143,   144,     0,
       0,   145,     0,     0,     0,   146,     0,     0,   147,  2585,
     148,   149,   150,   151,   152,   153,   154,     0,   155,     0,
       0,     0,   156,     0,     0,     0,   157,     0,     0,   158,
     159,   160,     0,   161,     0,   162,   163,     0,     0,   164,
       0,     0,   165,   166,     0,   167,   168,     0,   169,   170,
       0,   171,   172,   173,   174,   175,   176,   177,     0,   178,
     179,   180,   181,   182,   183,   184,   185,     0,   186,   187,
     188,   189,   190,   191,   192,   193,     0,   194,   195,     0,
     196,   197,   198,   199,   200,     0,   201,     0,     0,   202,
       0,     0,   203,     0,     0,     0,   204,     0,     0,     0,
     205,   206,   207,     0,     0,   208,     0,     0,     0,     0,
     209,   210,     0,     0,     0,     0,   211,     0,   212,     0,
       0,     0,   213,     0,   214,   215,   216,   217,     0,     0,
       0,   218,     0,     0,   219,   220,   221,     0,     0,     0,
     222,     0,   223,   224,     0,   225,   226,   227,     0,     0,
     228,   229,     0,   230,   231,   232,   233,   234,   235,     0,
       0,   236,   237,   238,     0,     0,   239,   240,     0,   241,
     242,   243,     0,     0,   244,     0,     0,     0,   245,     0,
     246,     0,   247,     0,   248,   249,   250,   251,   252,   253,
       0,   254,     0,     0,     0,   255,   256,   257,     0,   258,
       0,     0,   259,   260,     0,     0,     0,   261,   262,   263,
     264,     0,     0,   265,   266,   267,     0,   268,     0,   269,
       0,     0,     0,     0,   270,   271,     0,     0,     0,   272,
       0,   273,   274,     0,   275,   276,     0,     0,     0,   277,
       0,     0,   278,   279,   280,     0,     0,   281,     0,     0,
     282,   283,     0,     0,     0,     0,     0,   284,   285,     0,
     286,     0,   287,     0,   288,   289,     0,     0,     0,     0,
       0,     0,     0,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,     0,   305,
     306,   307,     0,   308,   309,   310,   311,     0,   312,   313,
       0,     0,     0,     0,   314,   315,   316,   317,   318,   319,
       0,     0,   320,   321,     0,   322,     0,   323,     0,   324,
     325,   326,   327,   328,   329,   330,   331,   332,     0,     0,
     333,   334,     0,     0,   335,   336,   337,   338,     0,     0,
       0,   339,   340,     0,     0,     0,     0,   341,   342,   343,
       0,   344,   345,   346,   347,     0,   348,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   349,   350,   351,     0,
       0,   352,     0,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,     0,     0,   365,   366,   367,
       0,   368,     0,   369,   370,   371,   372,   373,     0,   374,
     375,   376,     0,     0,   377,     0,     0,     0,   378,   379,
     380,   381,   382,     0,     0,   383,   384,   385,   386,   387,
       0,   388,   389,     0,   390,   391,   392,     0,     0,   393,
       0,   394,     0,   395,   396,     0,   397,   398,     0,     0,
       0,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,     0,   409,   410,  2379,     0,     0,   411,   412,   413,
     414,     0,     0,     0,   415,     0,     0,     0,   416,     0,
     417,   418,   419,   420,   421,     0,   422,   423,   424,   425,
     426,   427,     0,     0,     0,     0,     0,     0,   428,   429,
       0,   430,     0,     0,   431,     0,     0,   432,   433,   434,
       0,     0,   435,   436,     0,   437,   438,   439,   440,   441,
     442,     0,     0,   443,   444,   445,   446,     0,   447,   448,
       0,   449,     0,   450,   451,   452,   453,     0,     0,   454,
     455,     0,   456,   457,   458,   459,     0,     0,     0,     0,
       0,   460,   461,   462,     0,     0,     0,   463,   464,   465,
     466,     0,   467,   468,     0,   469,   470,     0,   471,   472,
       0,     0,   473,     0,     0,   474,     0,   475,     0,   476,
     477,   478,     0,     0,     0,     0,     0,     0,   479,     0,
       0,   480,     0,     0,     0,   481,   482,   483,   484,   485,
     486,     0,     0,     0,     0,     0,     0,   487,   488,     0,
     489,   490,   491,     0,     0,   492,     0,     0,   139,     0,
     140,   141,   142,   143,   144,     0,     0,   145,  2815,     0,
       0,   146,     0,     0,   147,   782,   148,   149,   150,   151,
     152,   153,   154,     0,   155,     0,     0,     0,   156,     0,
       0,     0,   157,     0,     0,   158,   159,   160,     0,   161,
       0,   162,   163,     0,     0,   164,     0,     0,   165,   166,
       0,   167,   168,     0,   169,   170,     0,   171,   172,   173,
     174,   175,   176,   177,     0,   178,   179,   180,   181,   182,
     183,   184,   185,     0,   186,   187,   188,   189,   190,   191,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   199,
     200,     0,   201,     0,     0,   202,     0,     0,   203,     0,
       0,     0,   204,     0,     0,     0,   205,   206,   207,     0,
       0,   208,     0,     0,     0,     0,   209,   210,     0,     0,
       0,     0,   211,     0,   212,     0,     0,     0,   213,     0,
     214,   215,   216,   217,     0,     0,     0,   218,     0,     0,
     219,   220,   221,     0,     0,     0,   222,     0,   223,   224,
       0,   225,   226,   227,     0,     0,   228,   229,     0,   230,
     231,   232,   233,   234,   235,     0,     0,   236,   237,   238,
       0,     0,   239,   240,     0,   241,   242,   243,     0,     0,
     244,     0,     0,     0,   245,     0,   246,     0,   247,     0,
     248,   249,   250,   251,   252,   253,     0,   254,     0,     0,
       0,   255,   256,   257,     0,   258,     0,     0,   259,   260,
       0,     0,     0,   261,   262,   263,   264,     0,     0,   265,
     266,   267,     0,   268,     0,   269,     0,     0,     0,     0,
     270,   271,     0,     0,     0,   272,     0,   273,   274,     0,
     275,   276,     0,     0,     0,   277,     0,     0,   278,   279,
     280,     0,     0,   281,     0,     0,   282,   283,     0,     0,
       0,     0,     0,   284,   285,     0,   286,     0,   287,     0,
     288,   289,     0,     0,     0,     0,     0,     0,     0,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,     0,   305,   306,   307,     0,   308,
     309,   310,   311,     0,   312,   313,     0,     0,     0,     0,
     314,   315,   316,   317,   318,   319,     0,     0,   320,   321,
       0,   322,     0,   323,     0,   324,   325,   326,   327,   328,
     329,   330,   331,   332,     0,     0,   333,   334,     0,     0,
     335,   336,   337,   338,     0,     0,     0,   339,   340,     0,
       0,     0,     0,   341,   342,   343,     0,   344,   345,   346,
     347,     0,   348,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   349,   350,   351,     0,     0,   352,     0,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,     0,     0,   365,   366,   367,     0,   368,     0,   369,
     370,   371,   372,   373,     0,   374,   375,   376,     0,     0,
     377,     0,     0,     0,   378,   379,   380,   381,   382,     0,
       0,   383,   384,   385,   386,   387,     0,   388,   389,     0,
     390,   391,   392,     0,     0,   393,     0,   394,     0,   395,
     396,     0,   397,   398,     0,     0,     0,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,     0,   409,   410,
       0,     0,     0,   411,   412,   413,   414,     0,     0,     0,
     415,     0,     0,     0,   416,     0,   417,   418,   419,   420,
     421,     0,   422,   423,   424,   425,   426,   427,     0,     0,
       0,     0,     0,     0,   428,   429,     0,   430,     0,     0,
     431,     0,     0,   432,   433,   434,     0,     0,   435,   436,
       0,   437,   438,   439,   440,   441,   442,     0,     0,   443,
     444,   445,   446,     0,   447,   448,     0,   449,     0,   450,
     451,   452,   453,     0,     0,   454,   455,     0,   456,   457,
     458,   459,     0,     0,     0,     0,     0,   460,   461,   462,
       0,     0,     0,   463,   464,   465,   466,     0,   467,   468,
       0,   469,   470,     0,   471,   472,     0,     0,   473,     0,
       0,   474,     0,   475,     0,   476,   477,   478,     0,     0,
       0,     0,     0,     0,   479,     0,     0,   480,     0,     0,
       0,   481,   482,   483,   484,   485,   486,     0,     0,     0,
       0,     0,     0,   487,   488,     0,   489,   490,   491,     0,
       0,   492,     0,     0,     0,     0,   139,     0,   140,   141,
     142,   143,   144,     0,  4483,   145,     0,     0,     0,   146,
    4484,   782,   147,     0,   148,   149,   150,   151,   152,   153,
     154,     0,   155,     0,     0,     0,   156,     0,     0,     0,
     157,     0,     0,   158,   159,   160,     0,   161,     0,   162,
     163,     0,     0,   164,     0,     0,   165,   166,     0,   167,
     168,     0,   169,   170,     0,   171,   172,   173,   174,   175,
     176,   177,     0,   178,   179,   180,   181,   182,   183,   184,
     185,     0,   186,   187,   188,   189,   190,   191,   192,   193,
       0,   194,   195,     0,   196,   197,   198,   199,   200,     0,
     201,     0,     0,   202,     0,     0,   203,     0,     0,     0,
     204,     0,     0,     0,   205,   206,   207,     0,     0,   208,
       0,     0,     0,     0,   209,   210,     0,     0,     0,     0,
     211,     0,   212,     0,     0,     0,   213,     0,   214,   215,
     216,   217,     0,     0,     0,   218,     0,     0,   219,   220,
     221,     0,     0,     0,   222,     0,   223,   224,     0,   225,
     226,   227,     0,     0,   228,   229,     0,   230,   231,   232,
     233,   234,   235,     0,     0,   236,   237,   238,     0,     0,
     239,   240,     0,   241,   242,   243,     0,     0,   244,     0,
       0,     0,   245,     0,   246,     0,   247,     0,   248,   249,
     250,   251,   252,   253,     0,   254,     0,     0,     0,   255,
     256,   257,     0,   258,     0,     0,   259,   260,     0,     0,
       0,   261,   262,   263,   264,     0,     0,   265,   266,   267,
       0,   268,     0,   269,     0,     0,     0,     0,   270,   271,
       0,     0,     0,   272,     0,   273,   274,     0,   275,   276,
       0,     0,     0,   277,     0,     0,   278,   279,   280,     0,
       0,   281,     0,     0,   282,   283,     0,     0,     0,     0,
       0,   284,   285,     0,   286,     0,   287,     0,   288,   289,
       0,     0,     0,     0,     0,     0,     0,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,     0,   305,   306,   307,     0,   308,   309,   310,
     311,     0,   312,   313,     0,     0,     0,     0,   314,   315,
     316,   317,   318,   319,     0,     0,   320,   321,     0,   322,
       0,   323,     0,   324,   325,   326,   327,   328,   329,   330,
     331,   332,     0,     0,   333,   334,     0,     0,   335,   336,
     337,   338,     0,     0,     0,   339,   340,     0,     0,     0,
       0,   341,   342,   343,     0,   344,   345,   346,   347,     0,
     348,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     349,   350,   351,     0,     0,   352,     0,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,     0,
       0,   365,   366,   367,     0,   368,     0,   369,   370,   371,
     372,   373,     0,   374,   375,   376,     0,     0,   377,     0,
       0,     0,   378,   379,   380,   381,   382,     0,     0,   383,
     384,   385,   386,   387,     0,   388,   389,     0,   390,   391,
     392,     0,     0,   393,     0,   394,     0,   395,   396,     0,
     397,   398,     0,     0,     0,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,     0,   409,   410,     0,     0,
       0,   411,   412,   413,   414,     0,     0,     0,   415,     0,
       0,     0,   416,     0,   417,   418,   419,   420,   421,     0,
     422,   423,   424,   425,   426,   427,     0,     0,     0,     0,
       0,     0,   428,   429,     0,   430,     0,     0,   431,     0,
       0,   432,   433,   434,     0,     0,   435,   436,     0,   437,
     438,   439,   440,   441,   442,     0,     0,   443,   444,   445,
     446,     0,   447,   448,     0,   449,     0,   450,   451,   452,
     453,     0,     0,   454,   455,     0,   456,   457,   458,   459,
       0,     0,     0,     0,     0,   460,   461,   462,     0,     0,
       0,   463,   464,   465,   466,     0,   467,   468,     0,   469,
     470,     0,   471,   472,     0,     0,   473,     0,     0,   474,
       0,   475,     0,   476,   477,   478,     0,     0,     0,     0,
       0,     0,   479,     0,     0,   480,     0,     0,     0,   481,
     482,   483,   484,   485,   486,     0,     0,     0,     0,     0,
       0,   487,   488,     0,   489,   490,   491,     0,     0,   492,
       0,     0,     0,     0,   139,     0,   140,   141,   142,   143,
     144,  1147,     0,   145,     0,     0,     0,   146,     0,   782,
     147,     0,   148,   149,   150,   151,   152,   153,   154,     0,
     155,     0,     0,     0,   156,     0,     0,     0,   157,     0,
       0,   158,   159,   160,     0,   161,     0,   162,   163,     0,
       0,   164,     0,     0,   165,   166,     0,   167,   168,     0,
     169,   170,     0,   171,   172,   173,   174,   175,   176,   177,
       0,   178,   179,   180,   181,   182,   183,   184,   185,     0,
     186,   187,   188,   189,   190,   191,   192,   193,     0,   194,
     195,     0,   196,   197,   198,   199,   200,     0,   201,     0,
       0,   202,     0,     0,   203,     0,     0,     0,   204,     0,
       0,     0,   205,   206,   207,     0,     0,   208,     0,     0,
       0,     0,   209,   210,     0,     0,     0,     0,   211,     0,
     212,     0,     0,     0,   213,     0,   214,   215,   216,   217,
       0,     0,     0,   218,     0,     0,   219,   220,   221,     0,
       0,     0,   222,     0,   223,   224,     0,   225,   226,   227,
       0,     0,   228,   229,     0,   230,   231,   232,   233,   234,
     235,     0,     0,   236,   237,   238,     0,     0,   239,   240,
       0,   241,   242,   243,     0,     0,   244,     0,     0,     0,
     245,     0,   246,     0,   247,     0,   248,   249,   250,   251,
     252,   253,     0,   254,     0,     0,     0,   255,   256,   257,
       0,   258,     0,     0,   259,   260,     0,     0,     0,   261,
     262,   263,   264,     0,     0,   265,   266,   267,     0,   268,
       0,   269,     0,     0,     0,     0,   270,   271,     0,  1348,
       0,   272,     0,   273,   274,     0,   275,   276,     0,     0,
       0,   277,     0,     0,   278,   279,   280,     0,     0,   281,
       0,     0,   282,   283,     0,     0,     0,     0,     0,   284,
     285,     0,   286,     0,   287,     0,   288,   289,     0,     0,
       0,     0,     0,     0,     0,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
       0,   305,   306,   307,     0,   308,   309,   310,   311,     0,
     312,   313,     0,     0,     0,     0,   314,   315,   316,   317,
     318,   319,     0,     0,   320,   321,     0,   322,     0,   323,
       0,   324,   325,   326,   327,   328,   329,   330,   331,   332,
       0,     0,   333,   334,     0,     0,   335,   336,   337,   338,
       0,     0,     0,   339,   340,     0,     0,     0,     0,   341,
     342,   343,     0,   344,   345,   346,   347,     0,   348,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   349,   350,
     351,     0,     0,   352,     0,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,     0,     0,   365,
     366,   367,     0,   368,     0,   369,   370,   371,   372,   373,
       0,   374,   375,   376,     0,     0,   377,     0,     0,     0,
     378,   379,   380,   381,   382,     0,     0,   383,   384,   385,
     386,   387,     0,   388,   389,     0,   390,   391,   392,     0,
       0,   393,     0,   394,     0,   395,   396,     0,   397,   398,
       0,     0,     0,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,     0,   409,   410,     0,     0,     0,   411,
     412,   413,   414,     0,     0,     0,   415,     0,     0,     0,
     416,     0,   417,   418,   419,   420,   421,     0,   422,   423,
     424,   425,   426,   427,     0,     0,     0,     0,     0,     0,
     428,   429,     0,   430,     0,     0,   431,     0,     0,   432,
     433,   434,     0,     0,   435,   436,     0,   437,   438,   439,
     440,   441,   442,     0,     0,   443,   444,   445,   446,     0,
     447,   448,     0,   449,     0,   450,   451,   452,   453,     0,
       0,   454,   455,     0,   456,   457,   458,   459,     0,     0,
       0,     0,     0,   460,   461,   462,     0,     0,     0,   463,
     464,   465,   466,     0,   467,   468,     0,   469,   470,     0,
     471,   472,     0,     0,   473,     0,     0,   474,     0,   475,
       0,   476,   477,   478,     0,     0,     0,     0,     0,     0,
     479,     0,     0,   480,     0,     0,     0,   481,   482,   483,
     484,   485,   486,     0,     0,     0,     0,     0,     0,   487,
     488,     0,   489,   490,   491,     0,     0,   492,     0,     0,
     139,     0,   140,   141,   142,   143,   144,     0,     0,   145,
       0,     0,     0,   146,     0,     0,   147,   540,   148,   149,
     150,   151,   152,   153,   154,     0,   155,     0,     0,     0,
     156,     0,     0,     0,   157,     0,     0,   158,   159,   160,
       0,   161,     0,   162,   163,     0,     0,   164,     0,     0,
     165,   166,     0,   167,   168,     0,   169,   170,     0,   171,
     172,   173,   174,   175,   176,   177,     0,   178,   179,   180,
     181,   182,   183,   184,   185,     0,   186,   187,   188,   189,
     190,   191,   192,   193,     0,   194,   195,     0,   196,   197,
     198,   199,   200,     0,   201,     0,     0,   202,     0,     0,
     203,     0,     0,     0,   204,     0,     0,     0,   205,   206,
     207,     0,     0,   208,     0,     0,     0,     0,   209,   210,
       0,     0,     0,     0,   211,     0,   212,     0,     0,     0,
     213,     0,   214,   215,   216,   217,     0,     0,     0,   218,
       0,     0,   219,   220,   221,     0,     0,     0,   222,     0,
     223,   224,     0,   225,   226,   227,     0,     0,   228,   229,
       0,   230,   231,   232,   233,   234,   235,     0,     0,   236,
     237,   238,     0,     0,   239,   240,     0,   241,   242,   243,
       0,     0,   244,     0,     0,     0,   245,     0,   246,     0,
     247,     0,   248,   249,   250,   251,   252,   253,     0,   254,
       0,     0,     0,   255,   256,   257,     0,   258,     0,     0,
     259,   260,     0,     0,     0,   261,   262,   263,   264,     0,
       0,   265,   266,   267,     0,   268,     0,   269,     0,     0,
       0,     0,   270,   271,     0,     0,     0,   272,     0,   273,
     274,     0,   275,   276,     0,     0,     0,   277,     0,     0,
     278,   279,   280,     0,     0,   281,     0,     0,   282,   283,
       0,     0,     0,     0,     0,   284,   285,     0,   286,     0,
     287,     0,   288,   289,     0,     0,     0,     0,     0,     0,
       0,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,     0,   305,   306,   307,
       0,   308,   309,   310,   311,     0,   312,   313,     0,     0,
       0,     0,   314,   315,   316,   317,   318,   319,     0,     0,
     320,   321,     0,   322,     0,   323,     0,   324,   325,   326,
     327,   328,   329,   330,   331,   332,     0,     0,   333,   334,
       0,     0,   335,   336,   337,   338,     0,     0,     0,   339,
     340,     0,     0,     0,     0,   341,   342,   343,     0,   344,
     345,   346,   347,     0,   348,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   349,   350,   351,     0,     0,   352,
       0,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,     0,     0,   365,   366,   367,     0,   368,
       0,   369,   370,   371,   372,   373,     0,   374,   375,   376,
       0,     0,   377,     0,     0,     0,   378,   379,   380,   381,
     382,     0,     0,   383,   384,   385,   386,   387,     0,   388,
     389,     0,   390,   391,   392,     0,     0,   393,     0,   394,
       0,   395,   396,     0,   397,   398,     0,     0,     0,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,     0,
     409,   410,     0,     0,     0,   411,   412,   413,   414,     0,
       0,     0,   415,     0,     0,     0,   416,     0,   417,   418,
     419,   420,   421,     0,   422,   423,   424,   425,   426,   427,
       0,     0,     0,     0,     0,     0,   428,   429,     0,   430,
       0,     0,   431,     0,     0,   432,   433,   434,     0,     0,
     435,   436,     0,   437,   438,   439,   440,   441,   442,     0,
       0,   443,   444,   445,   446,     0,   447,   448,     0,   449,
       0,   450,   451,   452,   453,     0,     0,   454,   455,     0,
     456,   457,   458,   459,     0,     0,     0,     0,     0,   460,
     461,   462,     0,     0,     0,   463,   464,   465,   466,     0,
     467,   468,     0,   469,   470,     0,   471,   472,     0,     0,
     473,     0,     0,   474,     0,   475,     0,   476,   477,   478,
       0,     0,     0,     0,     0,     0,   479,     0,     0,   480,
       0,     0,     0,   481,   482,   483,   484,   485,   486,     0,
       0,     0,     0,     0,     0,   487,   488,     0,   489,   490,
     491,     0,     0,   492,     0,     0,     0,     0,     0,   139,
    2328,   140,   141,   142,   143,   144,     0,     0,   145,     0,
       0,     0,   146,   540,     0,   147,     0,   148,   149,   150,
     151,   152,   153,   154,     0,   155,     0,     0,     0,   156,
       0,     0,     0,   157,     0,     0,   158,   159,   160,     0,
     161,     0,   162,   163,     0,     0,   164,     0,     0,   165,
     166,     0,   167,   168,     0,   169,   170,     0,   171,   172,
     173,   174,   175,   176,   177,     0,   178,   179,   180,   181,
     182,   183,   184,   185,     0,   186,   187,   188,   189,   190,
     191,   192,   193,     0,   194,   195,     0,   196,   197,   198,
     199,   200,     0,   201,     0,     0,   202,     0,     0,   203,
       0,     0,     0,   204,     0,     0,     0,   205,   206,   207,
       0,     0,   208,     0,     0,     0,     0,   209,   210,     0,
       0,     0,     0,   211,     0,   212,     0,     0,     0,   213,
       0,   214,   215,   216,   217,     0,     0,     0,   218,     0,
       0,   219,   220,   221,     0,     0,     0,   222,     0,   223,
     224,     0,   225,   226,   227,     0,     0,   228,   229,     0,
     230,   231,   232,   233,   234,   235,     0,     0,   236,   237,
     238,     0,     0,   239,   240,     0,   241,   242,   243,     0,
       0,   244,     0,     0,     0,   245,     0,   246,     0,   247,
       0,   248,   249,   250,   251,   252,   253,     0,   254,     0,
       0,     0,   255,   256,   257,     0,   258,     0,     0,   259,
     260,     0,     0,     0,   261,   262,   263,   264,     0,     0,
     265,   266,   267,     0,   268,     0,   269,     0,     0,     0,
       0,   270,   271,     0,     0,     0,   272,     0,   273,   274,
       0,   275,   276,     0,     0,     0,   277,     0,     0,   278,
     279,   280,     0,     0,   281,     0,     0,   282,   283,     0,
       0,     0,     0,     0,   284,   285,     0,   286,     0,   287,
       0,   288,   289,     0,     0,     0,     0,     0,     0,     0,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,     0,   305,   306,   307,     0,
     308,   309,   310,   311,     0,   312,   313,     0,     0,     0,
       0,   314,   315,   316,   317,   318,   319,     0,     0,   320,
     321,     0,   322,     0,   323,     0,   324,   325,   326,   327,
     328,   329,   330,   331,   332,     0,     0,   333,   334,     0,
       0,   335,   336,   337,   338,     0,     0,     0,   339,   340,
       0,     0,     0,     0,   341,   342,   343,     0,   344,   345,
     346,   347,     0,   348,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   349,   350,   351,     0,     0,   352,     0,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,     0,     0,   365,   366,   367,     0,   368,     0,
     369,   370,   371,   372,   373,     0,   374,   375,   376,     0,
       0,   377,     0,     0,     0,   378,   379,   380,   381,   382,
       0,     0,   383,   384,   385,   386,   387,     0,   388,   389,
       0,   390,   391,   392,     0,     0,   393,     0,   394,     0,
     395,   396,     0,   397,   398,     0,     0,     0,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,     0,   409,
     410,     0,     0,     0,   411,   412,   413,   414,     0,     0,
       0,   415,     0,     0,     0,   416,     0,   417,   418,   419,
     420,   421,     0,   422,   423,   424,   425,   426,   427,     0,
       0,     0,     0,     0,     0,   428,   429,     0,   430,     0,
       0,   431,     0,     0,   432,   433,   434,     0,     0,   435,
     436,     0,   437,   438,   439,   440,   441,   442,     0,     0,
     443,   444,   445,   446,     0,   447,   448,     0,   449,     0,
     450,   451,   452,   453,     0,     0,   454,   455,     0,   456,
     457,   458,   459,     0,     0,     0,     0,     0,   460,   461,
     462,     0,     0,     0,   463,   464,   465,   466,     0,   467,
     468,     0,   469,   470,     0,   471,   472,     0,     0,   473,
       0,     0,   474,     0,   475,     0,   476,   477,   478,     0,
       0,     0,     0,     0,     0,   479,     0,     0,   480,     0,
       0,     0,   481,   482,   483,   484,   485,   486,     0,     0,
       0,     0,     0,     0,   487,   488,     0,   489,   490,   491,
       0,     0,   492,     0,     0,     0,     0,   139,     0,   140,
     141,   142,   143,   144,  2584,     0,   145,     0,     0,     0,
     146,     0,  2585,   147,     0,   148,   149,   150,   151,   152,
     153,   154,     0,   155,     0,     0,     0,   156,     0,     0,
       0,   157,     0,     0,   158,   159,   160,     0,   161,     0,
     162,   163,     0,     0,   164,     0,     0,   165,   166,     0,
     167,   168,     0,   169,   170,     0,   171,   172,   173,   174,
     175,   176,   177,     0,   178,   179,   180,   181,   182,   183,
     184,   185,     0,   186,   187,   188,   189,   190,   191,   192,
     193,     0,   194,   195,     0,   196,   197,   198,   199,   200,
       0,   201,     0,     0,   202,     0,     0,   203,     0,     0,
       0,   204,     0,     0,     0,   205,   206,   207,     0,     0,
     208,     0,     0,     0,     0,   209,   210,     0,     0,     0,
       0,   211,     0,   212,     0,     0,     0,   213,     0,   214,
     215,   216,   217,     0,     0,     0,   218,     0,     0,   219,
     220,   221,     0,     0,     0,   222,     0,   223,   224,     0,
     225,   226,   227,     0,     0,   228,   229,     0,   230,   231,
     232,   233,   234,   235,     0,     0,   236,   237,   238,     0,
       0,   239,   240,     0,   241,   242,   243,     0,     0,   244,
       0,     0,     0,   245,     0,   246,     0,   247,     0,   248,
     249,   250,   251,   252,   253,     0,   254,     0,     0,     0,
     255,   256,   257,     0,   258,     0,     0,   259,   260,     0,
       0,     0,   261,   262,   263,   264,     0,     0,   265,   266,
     267,     0,   268,     0,   269,     0,     0,     0,     0,   270,
     271,     0,     0,     0,   272,     0,   273,   274,     0,   275,
     276,     0,     0,     0,   277,     0,     0,   278,   279,   280,
       0,     0,   281,     0,     0,   282,   283,     0,     0,     0,
       0,     0,   284,   285,     0,   286,     0,   287,     0,   288,
     289,     0,     0,     0,     0,     0,     0,     0,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,     0,   305,   306,   307,     0,   308,   309,
     310,   311,     0,   312,   313,     0,     0,     0,     0,   314,
     315,   316,   317,   318,   319,     0,     0,   320,   321,     0,
     322,     0,   323,     0,   324,   325,   326,   327,   328,   329,
     330,   331,   332,     0,     0,   333,   334,     0,     0,   335,
     336,   337,   338,     0,     0,     0,   339,   340,     0,     0,
       0,     0,   341,   342,   343,     0,   344,   345,   346,   347,
       0,   348,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   349,   350,   351,     0,     0,   352,     0,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
       0,     0,   365,   366,   367,     0,   368,     0,   369,   370,
     371,   372,   373,     0,   374,   375,   376,     0,     0,   377,
       0,     0,     0,   378,   379,   380,   381,   382,     0,     0,
     383,   384,   385,   386,   387,     0,   388,   389,     0,   390,
     391,   392,     0,     0,   393,     0,   394,     0,   395,   396,
       0,   397,   398,     0,     0,     0,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,     0,   409,   410,     0,
       0,     0,   411,   412,   413,   414,     0,     0,     0,   415,
       0,     0,     0,   416,     0,   417,   418,   419,   420,   421,
       0,   422,   423,   424,   425,   426,   427,     0,     0,     0,
       0,     0,     0,   428,   429,     0,   430,     0,     0,   431,
       0,     0,   432,   433,   434,     0,     0,   435,   436,     0,
     437,   438,   439,   440,   441,   442,     0,     0,   443,   444,
     445,   446,     0,   447,   448,     0,   449,     0,   450,   451,
     452,   453,     0,     0,   454,   455,     0,   456,   457,   458,
     459,     0,     0,     0,     0,     0,   460,   461,   462,     0,
       0,     0,   463,   464,   465,   466,     0,   467,   468,     0,
     469,   470,     0,   471,   472,     0,     0,   473,     0,     0,
     474,     0,   475,     0,   476,   477,   478,     0,     0,     0,
       0,     0,     0,   479,     0,     0,   480,     0,     0,     0,
     481,   482,   483,   484,   485,   486,     0,     0,     0,     0,
       0,     0,   487,   488,     0,   489,   490,   491,     0,     0,
     492,     0,     0,     0,     0,   139,     0,   140,   141,   142,
     143,   144,     0,     0,   145,     0,     0,     0,   146,  4484,
     782,   147,     0,   148,   149,   150,   151,   152,   153,   154,
       0,   155,     0,     0,     0,   156,     0,     0,     0,   157,
       0,     0,   158,   159,   160,     0,   161,     0,   162,   163,
       0,     0,   164,     0,     0,   165,   166,     0,   167,   168,
       0,   169,   170,     0,   171,   172,   173,   174,   175,   176,
     177,     0,   178,   179,   180,   181,   182,   183,   184,   185,
       0,   186,   187,   188,   189,   190,   191,   192,   193,     0,
     194,   195,     0,   196,   197,   198,   199,   200,     0,   201,
       0,     0,   202,     0,     0,   203,     0,     0,     0,   204,
       0,     0,     0,   205,   206,   207,     0,     0,   208,     0,
       0,     0,     0,   209,   210,     0,     0,     0,     0,   211,
       0,   212,     0,     0,     0,   213,     0,   214,   215,   216,
     217,     0,     0,     0,   218,     0,     0,   219,   220,   221,
       0,     0,     0,   222,     0,   223,   224,     0,   225,   226,
     227,     0,     0,   228,   229,     0,   230,   231,   232,   233,
     234,   235,     0,     0,   236,   237,   238,     0,     0,   239,
     240,     0,   241,   242,   243,     0,     0,   244,     0,     0,
       0,   245,     0,   246,     0,   247,     0,   248,   249,   250,
     251,   252,   253,     0,   254,     0,     0,     0,   255,   256,
     257,     0,   258,     0,     0,   259,   260,     0,     0,     0,
     261,   262,   263,   264,     0,     0,   265,   266,   267,     0,
     268,     0,   269,     0,     0,     0,     0,   270,   271,     0,
       0,     0,   272,     0,   273,   274,     0,   275,   276,     0,
       0,     0,   277,     0,     0,   278,   279,   280,     0,     0,
     281,     0,     0,   282,   283,     0,     0,     0,     0,     0,
     284,   285,     0,   286,     0,   287,     0,   288,   289,     0,
       0,     0,     0,     0,     0,     0,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,     0,   305,   306,   307,     0,   308,   309,   310,   311,
       0,   312,   313,     0,     0,     0,     0,   314,   315,   316,
     317,   318,   319,     0,     0,   320,   321,     0,   322,     0,
     323,     0,   324,   325,   326,   327,   328,   329,   330,   331,
     332,     0,     0,   333,   334,     0,     0,   335,   336,   337,
     338,     0,     0,     0,   339,   340,     0,     0,     0,     0,
     341,   342,   343,     0,   344,   345,   346,   347,     0,   348,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   349,
     350,   351,     0,     0,   352,     0,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,     0,     0,
     365,   366,   367,     0,   368,     0,   369,   370,   371,   372,
     373,     0,   374,   375,   376,     0,     0,   377,     0,     0,
       0,   378,   379,   380,   381,   382,     0,     0,   383,   384,
     385,   386,   387,     0,   388,   389,     0,   390,   391,   392,
       0,     0,   393,     0,   394,     0,   395,   396,     0,   397,
     398,     0,     0,     0,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,     0,   409,   410,     0,     0,     0,
     411,   412,   413,   414,     0,     0,     0,   415,     0,     0,
       0,   416,     0,   417,   418,   419,   420,   421,     0,   422,
     423,   424,   425,   426,   427,     0,     0,     0,     0,     0,
       0,   428,   429,     0,   430,     0,     0,   431,     0,     0,
     432,   433,   434,     0,     0,   435,   436,     0,   437,   438,
     439,   440,   441,   442,     0,     0,   443,   444,   445,   446,
       0,   447,   448,     0,   449,     0,   450,   451,   452,   453,
       0,     0,   454,   455,     0,   456,   457,   458,   459,     0,
       0,     0,     0,     0,   460,   461,   462,     0,     0,     0,
     463,   464,   465,   466,     0,   467,   468,     0,   469,   470,
       0,   471,   472,     0,     0,   473,     0,     0,   474,     0,
     475,     0,   476,   477,   478,     0,     0,     0,     0,     0,
       0,   479,     0,     0,   480,     0,     0,     0,   481,   482,
     483,   484,   485,   486,     0,     0,     0,     0,     0,     0,
     487,   488,     0,   489,   490,   491,     0,     0,   492,     0,
       0,   139,     0,   140,   141,   142,   143,   144,     0,     0,
     145,     0,     0,     0,   146,     0,     0,   147,   540,   148,
     149,   150,   151,   152,   153,   154,     0,   155,     0,     0,
       0,   156,     0,     0,     0,   157,     0,     0,   158,   159,
     160,     0,   161,     0,   162,   163,     0,     0,   164,     0,
       0,   165,   166,     0,   167,   168,     0,   169,   170,     0,
     171,   172,   173,   174,   175,   176,   177,     0,   178,   179,
     180,   181,   182,   183,   184,   185,     0,   186,   187,   188,
     189,   190,   191,   192,   193,     0,   194,   195,     0,   196,
     197,   198,   199,   200,     0,   201,     0,     0,   202,     0,
       0,   203,     0,     0,     0,   204,     0,     0,     0,   205,
     206,   207,     0,     0,   208,     0,     0,     0,     0,   209,
     210,     0,     0,     0,     0,   211,     0,   212,     0,     0,
       0,   213,     0,   214,   215,   216,   217,     0,     0,     0,
     218,     0,     0,   219,   220,   221,     0,     0,     0,   222,
       0,   223,   224,     0,   225,   226,   227,     0,     0,   228,
     229,     0,   230,   231,   232,   233,   234,   235,     0,     0,
     236,   609,   238,     0,     0,   239,   240,     0,   241,   242,
     243,     0,     0,   244,     0,     0,     0,   245,     0,   246,
       0,   247,     0,   248,   249,   250,   251,   252,   253,     0,
     254,     0,     0,     0,   255,   256,   257,     0,   258,     0,
       0,   259,   260,     0,     0,     0,   261,   262,   263,   264,
       0,     0,   265,   266,   267,     0,   268,     0,   269,     0,
       0,     0,     0,   270,   271,     0,     0,     0,   272,     0,
     273,   274,     0,   275,   276,     0,     0,     0,   277,     0,
       0,   278,   279,   280,     0,     0,   281,     0,     0,   282,
     283,     0,     0,     0,     0,     0,   284,   285,     0,   286,
       0,   287,     0,   288,   289,     0,     0,     0,     0,     0,
       0,     0,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,     0,   305,   306,
     307,     0,   308,   309,   310,   311,     0,   312,   313,     0,
       0,     0,     0,   314,   315,   316,   317,   318,   319,     0,
       0,   320,   321,     0,   322,     0,   323,     0,   324,   325,
     326,   327,   328,   329,   330,   331,   332,     0,     0,   333,
     334,     0,     0,   335,   336,   337,   338,     0,     0,     0,
     339,   340,     0,     0,     0,     0,   341,   342,   343,     0,
     344,   345,   346,   347,     0,   348,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   349,   350,   351,     0,     0,
     352,     0,   353,   354,   610,   356,   357,   358,   359,   360,
     361,   362,   363,   364,     0,     0,   365,   366,   367,     0,
     368,     0,   369,   370,   371,   372,   373,     0,   374,   375,
     376,     0,     0,   377,     0,     0,     0,   378,   379,   380,
     381,   382,     0,     0,   383,   384,   385,   386,   387,     0,
     388,   389,     0,   390,   391,   392,     0,     0,   393,     0,
     394,     0,   395,   396,     0,   397,   398,     0,     0,     0,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
       0,   409,   410,     0,     0,     0,   411,   412,   413,   414,
       0,     0,     0,   415,     0,     0,     0,   416,     0,   417,
     418,   419,   420,   421,     0,   422,   423,   424,   425,   426,
     427,     0,     0,     0,     0,     0,     0,   428,   429,     0,
     430,     0,     0,   431,     0,     0,   432,   433,   434,     0,
       0,   435,   436,     0,   437,   438,   439,   440,   441,   442,
       0,     0,   443,   444,   445,   446,     0,   447,   448,     0,
     449,     0,   450,   451,   452,   453,     0,     0,   454,   455,
       0,   456,   457,   458,   459,     0,     0,     0,     0,     0,
     460,   461,   462,     0,     0,     0,   463,   464,   465,   466,
       0,   467,   468,     0,   469,   470,     0,   471,   472,     0,
       0,   473,     0,     0,   474,     0,   475,     0,   476,   477,
     478,     0,     0,     0,     0,     0,     0,   479,     0,     0,
     480,     0,     0,     0,   481,   482,   483,   484,   485,   486,
       0,     0,     0,     0,     0,     0,   487,   488,     0,   489,
     490,   491,     0,     0,   492,     0,     0,   139,     0,   140,
     141,   142,   143,   144,     0,     0,   145,     0,     0,     0,
     146,     0,     0,   147,   540,   148,   149,   150,   151,   152,
     153,   154,     0,   155,     0,     0,     0,   156,     0,     0,
       0,   157,     0,     0,   158,   159,   160,     0,   161,     0,
     162,   163,     0,     0,   164,     0,     0,   165,   166,     0,
     167,   168,     0,   169,   170,     0,   171,   172,   173,   174,
     175,   176,   177,     0,   178,   179,   180,   181,   182,   183,
     184,   185,     0,   186,   187,   188,   189,   190,   191,   192,
     193,     0,   194,   195,     0,   196,   197,   198,   199,   200,
       0,   201,     0,     0,   202,     0,     0,   203,     0,     0,
       0,   204,     0,     0,     0,   205,   206,   207,     0,     0,
     208,     0,     0,     0,     0,   209,   210,     0,     0,     0,
       0,   211,     0,   212,     0,     0,     0,   213,     0,   214,
     215,   216,   217,     0,     0,     0,   218,     0,     0,   219,
     220,   221,     0,     0,     0,   222,     0,   223,   224,     0,
     225,   226,   227,     0,     0,   228,   229,     0,   230,   231,
     232,   233,   234,   235,     0,     0,   236,   237,   238,     0,
       0,   239,   240,     0,   241,   242,   243,     0,     0,   244,
       0,     0,     0,   245,     0,   246,     0,   247,     0,   248,
     249,   250,   251,   252,   253,     0,   254,     0,     0,     0,
     255,   256,   257,     0,   258,     0,     0,   259,   260,     0,
       0,     0,   261,   262,   263,   264,     0,     0,   265,   266,
     267,     0,   268,     0,   269,     0,     0,     0,     0,   270,
     271,     0,     0,     0,   272,     0,   273,   274,     0,   275,
     276,     0,     0,     0,   277,     0,     0,   278,   279,   280,
       0,     0,   281,     0,     0,   282,   283,     0,     0,     0,
       0,     0,   284,   285,     0,   286,     0,   287,     0,   288,
     289,     0,     0,     0,     0,     0,     0,     0,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,     0,   305,   306,   307,     0,   308,   309,
     310,   311,     0,   312,   313,     0,     0,     0,     0,   314,
     315,   316,   317,   318,   319,     0,     0,   320,   321,     0,
     322,     0,   323,     0,   324,   325,   326,   327,   328,   329,
     330,   331,   332,     0,     0,   333,   334,     0,     0,   335,
     336,   337,   338,     0,     0,     0,   339,   340,     0,     0,
       0,     0,   341,   342,   343,     0,   344,   345,   346,   347,
       0,   348,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   349,   350,   351,     0,     0,   352,     0,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
       0,     0,   365,   366,   367,     0,   368,     0,   369,   370,
     371,   372,   373,     0,   374,   375,   376,     0,     0,   377,
       0,     0,     0,   378,   379,   380,   381,   382,     0,     0,
     383,   384,   385,   386,   387,     0,   388,   389,     0,   390,
     391,   392,     0,     0,   393,     0,   394,     0,   395,   396,
       0,   397,   398,     0,     0,     0,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,     0,   409,   410,     0,
       0,     0,   411,   412,   413,   414,     0,     0,     0,   415,
       0,     0,     0,   416,     0,   417,   418,   419,   420,   421,
       0,   422,   423,   424,   425,   426,   427,     0,     0,     0,
       0,     0,     0,   428,   429,     0,   430,     0,     0,   431,
       0,     0,   432,   433,   434,     0,     0,   435,   436,     0,
     437,   438,   439,   440,   441,   442,     0,     0,   443,   444,
     445,   446,     0,   447,   448,     0,   449,     0,   450,   451,
     452,   453,     0,     0,   454,   455,     0,   456,   457,   458,
     459,     0,     0,     0,     0,     0,   460,   461,   462,     0,
       0,     0,   463,   464,   465,   466,     0,   467,   468,     0,
     469,   470,     0,   471,   472,     0,     0,   473,     0,     0,
     474,     0,   475,     0,   476,   477,   478,     0,     0,     0,
       0,     0,     0,   479,     0,     0,   480,     0,     0,     0,
     481,   482,   483,   484,   485,   486,     0,     0,     0,     0,
       0,     0,   487,   488,     0,   489,   490,   491,     0,     0,
     492,     0,     0,   139,     0,   140,   141,   142,   143,   144,
       0,     0,   145,     0,     0,     0,   146,     0,     0,   147,
     782,   148,   149,   150,   151,   152,   153,   154,     0,   155,
       0,     0,     0,   156,     0,     0,     0,   157,     0,     0,
     158,   159,   160,     0,   161,     0,   162,   163,     0,     0,
     164,     0,     0,   165,   166,     0,   167,   168,     0,   169,
     170,     0,   171,   172,   173,   174,   175,   176,   177,     0,
     178,   179,   180,   181,   182,   183,   184,   185,     0,   186,
     187,   188,   189,   190,   191,   192,   193,     0,   194,   195,
       0,   196,   197,   198,   199,   200,     0,   201,     0,     0,
     202,     0,     0,   203,     0,     0,     0,   204,     0,     0,
       0,   205,   206,   207,     0,     0,   208,     0,     0,     0,
       0,   209,   210,     0,     0,     0,     0,   211,     0,   212,
       0,     0,     0,   213,     0,   214,   215,   216,   217,     0,
       0,     0,   218,     0,     0,   219,   220,   221,     0,     0,
       0,   222,     0,   223,   224,     0,   225,   226,   227,     0,
       0,   228,   229,     0,   230,   231,   232,   233,   234,   235,
       0,     0,   236,   237,   238,     0,     0,   239,   240,     0,
     241,   242,   243,     0,     0,   244,     0,     0,     0,   245,
       0,   246,     0,   247,     0,   248,   249,   250,   251,   252,
     253,     0,   254,     0,     0,     0,   255,   256,   257,     0,
     258,     0,     0,   259,   260,     0,     0,     0,   261,   262,
     263,   264,     0,     0,   265,   266,   267,     0,   268,     0,
     269,     0,     0,     0,     0,   270,   271,     0,     0,     0,
     272,     0,   273,   274,     0,   275,   276,     0,     0,     0,
     277,     0,     0,   278,   279,   280,     0,     0,   281,     0,
       0,   282,   283,     0,     0,     0,     0,     0,   284,   285,
       0,   286,     0,   287,     0,   288,   289,     0,     0,     0,
       0,     0,     0,     0,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,     0,
     305,   306,   307,     0,   308,   309,   310,   311,     0,   312,
     313,     0,     0,     0,     0,   314,   315,   316,   317,   318,
     319,     0,     0,   320,   321,     0,   322,     0,   323,     0,
     324,   325,   326,   327,   328,   329,   330,   331,   332,     0,
       0,   333,   334,     0,     0,   335,   336,   337,   338,     0,
       0,     0,   339,   340,     0,     0,     0,     0,   341,   342,
     343,     0,   344,   345,   346,   347,     0,   348,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   349,   350,   351,
       0,     0,   352,     0,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,     0,     0,   365,   366,
     367,     0,   368,     0,   369,   370,   371,   372,   373,     0,
     374,   375,   376,     0,     0,   377,     0,     0,     0,   378,
     379,   380,   381,   382,     0,     0,   383,   384,   385,   386,
     387,     0,   388,   389,     0,   390,   391,   392,     0,     0,
     393,     0,   394,     0,   395,   396,     0,   397,   398,     0,
       0,     0,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,     0,   409,   410,     0,     0,     0,   411,   412,
     413,   414,     0,     0,     0,   415,     0,     0,     0,   416,
       0,   417,   418,   419,   420,   421,     0,   422,   423,   424,
     425,   426,   427,     0,     0,     0,     0,     0,     0,   428,
     429,     0,   430,     0,     0,   431,     0,     0,   432,   433,
     434,     0,     0,   435,   436,     0,   437,   438,   439,   440,
     441,   442,     0,     0,   443,   444,   445,   446,     0,   447,
     448,     0,   449,     0,   450,   451,   452,   453,     0,     0,
     454,   455,     0,   456,   457,   458,   459,     0,     0,     0,
       0,     0,   460,   461,   462,     0,     0,     0,   463,   464,
     465,   466,     0,   467,   468,     0,   469,   470,     0,   471,
     472,     0,     0,   473,     0,     0,   474,     0,   475,     0,
     476,   477,   478,     0,     0,     0,     0,     0,     0,   479,
       0,     0,   480,     0,     0,     0,   481,   482,   483,   484,
     485,   486,     0,     0,     0,     0,     0,     0,   487,   488,
       0,   489,   490,   491,     0,     0,   492,     0,     0,   139,
       0,   140,   141,   142,   143,   144,     0,     0,   145,     0,
       0,     0,   146,     0,     0,   147,  2585,   148,   149,   150,
     151,   152,   153,   154,     0,   155,     0,     0,     0,   156,
       0,     0,     0,   157,     0,     0,   158,   159,   160,     0,
     161,     0,   162,   163,     0,     0,   164,     0,     0,   165,
     166,     0,   167,   914,   915,   169,   170,     0,   171,   172,
     173,   174,   175,   176,   177,     0,   178,   179,   180,   181,
     182,   183,   184,   185,     0,   186,   187,   188,   189,   190,
     191,   192,   193,     0,   194,   195,     0,   196,   197,   198,
     199,   200,     0,   201,     0,     0,   202,     0,     0,   203,
       0,     0,     0,   204,     0,     0,     0,   205,   206,   207,
       0,     0,   208,     0,     0,     0,     0,   209,   210,     0,
       0,     0,   916,   211,     0,   212,     0,     0,     0,   213,
       0,   214,   215,   216,   217,     0,     0,     0,   218,     0,
       0,   219,   220,   221,     0,     0,     0,   222,     0,   223,
     224,     0,   225,   226,   227,     0,     0,   228,   229,     0,
     230,   231,   232,   233,   234,   235,     0,     0,   236,   237,
     238,     0,     0,   239,   240,     0,   241,   242,   243,     0,
       0,   244,     0,     0,     0,   245,     0,   246,     0,   247,
       0,   248,   249,   250,   251,   252,   917,     0,   254,     0,
       0,     0,   255,   256,   257,     0,   258,     0,     0,   259,
     260,     0,     0,     0,   261,   262,   263,   264,     0,     0,
     265,   266,   267,     0,   268,     0,   269,     0,     0,     0,
       0,   270,   271,     0,     0,     0,   272,     0,   273,   274,
       0,   275,   276,     0,     0,     0,   277,     0,     0,   278,
     279,   280,     0,     0,   281,     0,     0,   282,   283,     0,
       0,     0,     0,     0,   284,   285,     0,   918,     0,   287,
       0,   288,   289,     0,     0,     0,     0,     0,     0,     0,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,     0,   305,   306,   307,     0,
     308,   309,   310,   311,     0,   312,   313,     0,     0,     0,
       0,   314,   315,   316,   317,   318,   319,     0,     0,   320,
     321,     0,   322,     0,   323,     0,   324,   325,   326,   327,
     328,   329,   919,   331,   332,     0,     0,   333,   334,     0,
       0,   335,   336,   337,   338,     0,     0,     0,   339,   340,
       0,     0,     0,     0,   341,   342,   343,     0,   344,   345,
     346,   347,     0,   348,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   349,   350,   351,     0,     0,   352,     0,
     353,   354,   355,   356,   920,   358,   359,   360,   361,   362,
     363,   364,     0,     0,   365,   366,   367,     0,   368,     0,
     369,   370,   371,   372,   373,     0,   374,   375,   376,     0,
       0,   377,     0,     0,     0,   378,   379,   380,   381,   382,
       0,     0,   383,   384,   385,   386,   387,     0,   388,   389,
       0,   390,   391,   392,     0,     0,   393,     0,   394,     0,
     395,   396,     0,   397,   398,     0,     0,     0,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,     0,   409,
     410,     0,     0,     0,   411,   412,   921,   414,     0,     0,
       0,   415,     0,     0,     0,   416,     0,   417,   418,   419,
     420,   421,     0,   422,   423,   424,   425,   426,   427,     0,
       0,     0,     0,     0,     0,   428,   429,     0,   430,     0,
       0,   431,     0,     0,   432,   433,   434,     0,     0,   435,
     436,     0,   437,   438,   439,   440,   441,   442,     0,     0,
     443,   444,   445,   446,     0,   447,   448,     0,   449,     0,
     450,   451,   452,   453,     0,     0,   454,   455,     0,   456,
     457,   458,   459,     0,     0,     0,     0,     0,   922,   461,
     462,     0,     0,     0,   463,   464,   465,   466,     0,   467,
     468,     0,   469,   470,     0,   471,   472,     0,     0,   473,
       0,     0,   474,     0,   475,     0,   476,   477,   478,     0,
       0,     0,     0,     0,     0,   479,     0,     0,   480,     0,
       0,     0,   481,   482,   483,   484,   485,   486,     0,     0,
       0,     0,     0,     0,   487,   488,     0,   489,   490,   491,
       0,     0,   492,     0,   139,     0,   140,   141,   142,   143,
     144,     0,     0,   145,     0,     0,     0,   146,     0,     0,
     147,   923,   148,   149,   150,   151,   152,   153,   154,     0,
     155,     0,     0,     0,   156,     0,     0,     0,   157,     0,
       0,   158,   159,   160,     0,   161,     0,   162,   163,     0,
       0,   164,     0,     0,   165,   166,     0,   167,   168,     0,
     169,   170,     0,   171,   172,   173,   174,   175,   176,   177,
       0,   178,   179,   180,   181,   182,   183,   184,   185,     0,
     186,   187,   188,   189,   190,   191,   192,   193,     0,   194,
     195,     0,   196,   197,   198,   199,   200,     0,   201,     0,
       0,   202,     0,     0,   203,     0,     0,     0,   204,     0,
       0,     0,   205,   206,   207,     0,     0,   208,     0,     0,
       0,     0,   209,   210,     0,     0,     0,     0,   211,     0,
     212,     0,     0,     0,   213,     0,   214,   215,   216,   217,
       0,     0,     0,   218,     0,     0,   219,   220,   221,     0,
       0,     0,   222,     0,   223,   224,     0,   225,   226,   227,
       0,     0,   228,   229,     0,   230,   231,   232,   233,   234,
     235,     0,     0,   236,   237,   238,     0,     0,   239,   240,
       0,   241,   242,   243,     0,     0,   244,     0,     0,     0,
     245,     0,   246,     0,   247,     0,   248,   249,   250,   251,
     252,   253,     0,   254,     0,     0,     0,   255,   256,   257,
       0,   258,     0,     0,   259,   260,     0,     0,     0,   261,
     262,   263,   264,     0,     0,   265,   266,   267,     0,   268,
       0,   269,     0,     0,     0,     0,   270,   271,     0,     0,
       0,   272,     0,   273,   274,     0,   275,   276,     0,     0,
       0,   277,     0,     0,   278,   279,   280,     0,     0,   281,
       0,     0,   282,   283,   621,     0,     0,     0,     0,   284,
     285,     0,   286,     0,   287,     0,   288,   289,     0,     0,
       0,     0,     0,     0,     0,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
       0,   305,   306,   307,     0,   308,   309,   310,   311,     0,
     312,   313,     0,     0,     0,     0,   314,   315,   316,   317,
     318,   319,     0,     0,   320,   321,     0,   322,     0,   323,
       0,   324,   325,   326,   327,   328,   329,   330,   331,   332,
       0,     0,   333,   334,     0,     0,   335,   336,   337,   338,
       0,     0,     0,   339,   340,     0,     0,     0,     0,   341,
     342,   343,     0,   344,   345,   346,   347,     0,   348,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   349,   350,
     351,     0,     0,   352,     0,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,     0,     0,   365,
     366,   367,     0,   368,     0,   369,   370,   371,   372,   373,
       0,   374,   375,   376,     0,     0,   377,     0,     0,     0,
     378,   379,   380,   381,   382,     0,     0,   383,   384,   385,
     386,   387,     0,   388,   389,     0,   390,   391,   392,     0,
       0,   393,     0,   394,     0,   395,   396,     0,   397,   398,
       0,     0,     0,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,     0,   409,   410,     0,     0,     0,   411,
     412,   413,   414,     0,     0,     0,   415,     0,     0,     0,
     416,     0,   417,   418,   419,   420,   421,     0,   422,   423,
     424,   425,   426,   427,     0,     0,     0,     0,     0,     0,
     428,   429,     0,   430,     0,     0,   431,     0,     0,   432,
     433,   434,     0,     0,   435,   436,     0,   437,   438,   439,
     440,   441,   442,     0,     0,   443,   444,   445,   446,     0,
     447,   448,     0,   449,     0,   450,   451,   452,   453,     0,
     136,   454,   455,     0,   456,   457,   458,   459,     0,     0,
       0,     0,     0,   460,   461,   462,     0,     0,     0,   463,
     464,   465,   466,     0,   467,   468,     0,   469,   470,     0,
     471,   472,     0,     0,   473,     0,     0,   474,     0,   475,
       0,   476,   477,   478,     0,     0,     0,     0,     0,     0,
     479,     0,     0,   480,     0,     0,     0,   481,   482,   483,
     484,   485,   486,     0,     0,     0,     0,     0,     0,   487,
     488,     0,   489,   490,   491,     0,     0,   492,     0,   139,
       0,   140,   141,   142,   143,   144,     0,     0,   145,     0,
       0,     0,   146,     0,     0,   147,  1397,   148,   149,   150,
     151,   152,   153,   154,     0,   155,     0,     0,     0,   156,
       0,     0,     0,   157,     0,     0,   158,   159,   160,     0,
     161,     0,   162,   163,     0,     0,   164,     0,     0,   165,
     166,     0,   167,   168,     0,   169,   170,     0,   171,   172,
     173,   174,   175,   176,   177,     0,   178,   179,   180,   181,
     182,   183,   184,   185,     0,   186,   187,   188,   189,   190,
     191,   192,   193,     0,   194,   195,     0,   196,   197,   198,
     199,   200,     0,   201,     0,     0,   202,     0,     0,   203,
       0,     0,     0,   204,     0,     0,     0,   205,   206,   207,
       0,     0,   208,     0,     0,     0,     0,   209,   210,     0,
       0,     0,     0,   211,     0,   212,     0,     0,     0,   213,
       0,   214,   215,   216,   217,     0,     0,     0,   218,     0,
       0,   219,   220,   221,     0,     0,     0,   222,     0,   223,
     224,     0,   225,   226,   227,     0,     0,   228,   229,     0,
     230,   231,   232,   233,   234,   235,     0,     0,   236,   237,
     238,     0,     0,   239,   240,     0,   241,   242,   243,     0,
       0,   244,     0,     0,     0,   245,     0,   246,     0,   247,
       0,   248,   249,   250,   251,   252,   253,     0,   254,     0,
       0,     0,   255,   256,   257,     0,   258,     0,     0,   259,
     260,     0,     0,     0,   261,   262,   263,   264,     0,     0,
     265,   266,   267,     0,   268,     0,   269,     0,     0,     0,
       0,   270,   271,     0,     0,     0,   272,     0,   273,   274,
       0,   275,   276,     0,     0,     0,   277,     0,     0,   278,
     279,   280,     0,     0,   281,     0,     0,   282,   283,   621,
       0,     0,     0,     0,   284,   285,     0,   286,     0,   287,
       0,   288,   289,     0,     0,     0,     0,     0,     0,     0,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,     0,   305,   306,   307,     0,
     308,   309,   310,   311,     0,   312,   313,     0,     0,     0,
       0,   314,   315,   316,   317,   318,   319,     0,     0,   320,
     321,     0,   322,     0,   323,     0,   324,   325,   326,   327,
     328,   329,   330,   331,   332,     0,     0,   333,   334,     0,
       0,   335,   336,   337,   338,     0,     0,     0,   339,   340,
       0,     0,     0,     0,   341,   342,   343,     0,   344,   345,
     346,   347,     0,   348,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   349,   350,   351,     0,     0,   352,     0,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,     0,     0,   365,   366,   367,     0,   368,     0,
     369,   370,   371,   372,   373,     0,   374,   375,   376,     0,
       0,   377,     0,     0,     0,   378,   379,   380,   381,   382,
       0,     0,   383,   384,   385,   386,   387,     0,   388,   389,
       0,   390,   391,   392,     0,     0,   393,     0,   394,     0,
     395,   396,     0,   397,   398,     0,     0,     0,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,     0,   409,
     410,     0,     0,     0,   411,   412,   413,   414,     0,     0,
       0,   415,     0,     0,     0,   416,     0,   417,   418,   419,
     420,   421,     0,   422,   423,   424,   425,   426,   427,     0,
       0,     0,     0,     0,     0,   428,   429,     0,   430,     0,
       0,   431,     0,     0,   432,   433,   434,     0,     0,   435,
     436,     0,   437,   438,   439,   440,   441,   442,     0,     0,
     443,   444,   445,   446,     0,   447,   448,     0,   449,     0,
     450,   451,   452,   453,     0,   136,   454,   455,     0,   456,
     457,   458,   459,     0,     0,     0,     0,     0,   460,   461,
     462,     0,     0,     0,   463,   464,   465,   466,     0,   467,
     468,     0,   469,   470,     0,   471,   472,     0,     0,   473,
       0,     0,   474,     0,   475,     0,   476,   477,   478,     0,
       0,     0,     0,     0,     0,   479,     0,     0,   480,     0,
       0,     0,   481,   482,   483,   484,   485,   486,     0,     0,
       0,     0,     0,     0,   487,   488,     0,   489,   490,   491,
       0,     0,   492,     0,   139,     0,   140,   141,   142,   143,
     144,     0,     0,   145,     0,     0,     0,   146,     0,     0,
     147,  1720,   148,   149,   150,   151,   152,   153,   154,     0,
     155,     0,     0,     0,   156,     0,     0,     0,   157,     0,
       0,   158,   159,   160,     0,   161,     0,   162,   163,     0,
       0,   164,     0,     0,   165,   166,     0,   167,   914,   915,
     169,   170,     0,   171,   172,   173,   174,   175,   176,   177,
       0,   178,   179,   180,   181,   182,   183,   184,   185,     0,
     186,   187,   188,   189,   190,   191,   192,   193,     0,   194,
     195,     0,   196,   197,   198,   199,   200,     0,   201,     0,
       0,   202,     0,     0,   203,     0,     0,     0,   204,     0,
       0,     0,   205,   206,   207,     0,     0,   208,     0,     0,
       0,     0,   209,   210,     0,     0,     0,   916,   211,     0,
     212,     0,     0,     0,   213,     0,   214,   215,   216,   217,
       0,     0,     0,   218,     0,     0,   219,   220,   221,     0,
       0,     0,   222,     0,   223,   224,     0,   225,   226,   227,
       0,     0,   228,   229,     0,   230,   231,   232,   233,   234,
     235,     0,     0,   236,   237,   238,     0,     0,   239,   240,
       0,   241,   242,   243,     0,     0,   244,     0,     0,     0,
     245,     0,   246,     0,   247,     0,   248,   249,   250,   251,
     252,   917,     0,   254,     0,     0,     0,   255,   256,   257,
       0,   258,     0,     0,   259,   260,     0,     0,     0,   261,
     262,   263,   264,     0,     0,   265,   266,   267,     0,   268,
       0,   269,     0,     0,     0,     0,   270,   271,     0,     0,
       0,   272,     0,   273,   274,     0,   275,   276,     0,     0,
       0,   277,     0,     0,   278,   279,   280,     0,     0,   281,
       0,     0,   282,   283,     0,     0,     0,     0,     0,   284,
     285,     0,   918,     0,   287,     0,   288,   289,     0,     0,
       0,     0,     0,     0,     0,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
       0,   305,   306,   307,     0,   308,   309,   310,   311,     0,
     312,   313,     0,     0,     0,     0,   314,   315,   316,   317,
     318,   319,     0,     0,   320,   321,     0,   322,     0,   323,
       0,   324,   325,   326,   327,   328,   329,   919,   331,   332,
       0,     0,   333,   334,     0,     0,   335,   336,   337,   338,
       0,     0,     0,   339,   340,     0,     0,     0,     0,   341,
     342,   343,     0,   344,   345,   346,   347,     0,   348,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   349,   350,
     351,     0,     0,   352,     0,   353,   354,   355,   356,   920,
     358,   359,   360,   361,   362,   363,   364,     0,     0,   365,
     366,   367,     0,   368,     0,   369,   370,   371,   372,   373,
       0,   374,   375,   376,     0,     0,   377,     0,     0,     0,
     378,   379,   380,   381,   382,     0,     0,   383,   384,   385,
     386,   387,     0,   388,   389,     0,   390,   391,   392,     0,
       0,   393,     0,   394,     0,   395,   396,     0,   397,   398,
       0,     0,     0,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,     0,   409,   410,     0,     0,     0,   411,
     412,   921,   414,     0,     0,     0,   415,     0,     0,     0,
     416,     0,   417,   418,   419,   420,   421,     0,   422,   423,
     424,   425,   426,   427,     0,     0,     0,     0,     0,     0,
     428,   429,     0,   430,     0,     0,   431,     0,     0,   432,
     433,   434,     0,     0,   435,   436,     0,   437,   438,   439,
     440,   441,   442,     0,     0,   443,   444,   445,   446,     0,
     447,   448,     0,   449,     0,   450,   451,   452,   453,     0,
       0,   454,   455,     0,   456,   457,   458,   459,     0,     0,
       0,     0,     0,   460,   461,   462,     0,     0,     0,   463,
     464,   465,   466,     0,   467,   468,     0,   469,   470,     0,
     471,   472,     0,     0,   473,     0,     0,   474,     0,   475,
       0,   476,   477,   478,     0,     0,     0,     0,     0,     0,
     479,     0,     0,   480,     0,     0,     0,   481,   482,   483,
     484,   485,   486,     0,     0,     0,     0,     0,     0,   487,
     488,     0,   489,   490,   491,     0,     0,   492,     0,   139,
       0,   140,   141,   142,   143,   144,     0,     0,   145,     0,
       0,     0,   146,     0,     0,   147,   923,   148,   149,   150,
     151,   152,   153,   154,     0,   155,     0,     0,     0,   156,
       0,     0,     0,   157,     0,     0,   158,   159,   160,     0,
     161,     0,   162,   163,     0,     0,   164,     0,     0,   165,
     166,     0,   167,   168,     0,   169,   170,     0,   171,   172,
     173,   174,   175,   176,   177,     0,   178,   179,   180,   181,
     182,   183,   184,   185,     0,   186,   187,   188,   189,   190,
     191,   192,   193,     0,   194,   195,     0,   196,   197,   198,
     199,   200,     0,   201,     0,     0,   202,     0,     0,   203,
       0,     0,     0,   204,     0,     0,     0,   205,   206,   207,
       0,     0,   208,     0,     0,     0,     0,   209,   210,     0,
       0,     0,     0,   211,     0,   212,     0,     0,     0,   213,
       0,   214,   215,   216,   217,     0,     0,     0,   218,     0,
       0,   219,   220,   221,     0,     0,     0,   222,     0,   223,
     224,     0,   225,   226,   227,     0,     0,   228,   229,     0,
     230,   231,   232,   233,   234,   235,     0,     0,   236,   237,
     238,     0,     0,   239,   240,     0,   241,   242,   243,     0,
       0,   244,     0,     0,     0,   245,     0,   246,     0,   247,
       0,   248,   249,   250,   251,   252,   253,     0,   254,     0,
       0,     0,   255,   256,   257,     0,   258,     0,     0,   259,
     260,     0,     0,     0,   261,   262,   263,   264,     0,     0,
     265,   266,   267,     0,   268,     0,   269,     0,     0,     0,
       0,   270,   271,     0,     0,     0,   272,     0,   273,   274,
       0,   275,   276,     0,     0,     0,   277,     0,     0,   278,
     279,   280,     0,     0,   281,     0,     0,   282,   283,   621,
       0,     0,     0,     0,   284,   285,     0,   286,     0,   287,
       0,   288,   289,     0,     0,     0,     0,     0,     0,     0,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,     0,   305,   306,   307,     0,
     308,   309,   310,   311,     0,   312,   313,     0,     0,     0,
       0,   314,   315,   316,   317,   318,   319,     0,     0,   320,
     321,     0,   322,     0,   323,     0,   324,   325,   326,   327,
     328,   329,   330,   331,   332,     0,     0,   333,   334,     0,
       0,   335,   336,   337,   338,     0,     0,     0,   339,   340,
       0,     0,     0,     0,   341,   342,   343,     0,   344,   345,
     346,   347,     0,   348,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   349,   350,   351,     0,     0,   352,     0,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,     0,     0,   365,   366,   367,     0,   368,     0,
     369,   370,   371,   372,   373,     0,   374,   375,   376,     0,
       0,   377,     0,     0,     0,   378,   379,   380,   381,   382,
       0,     0,   383,   384,   385,   386,   387,     0,   388,   389,
       0,   390,   391,   392,     0,     0,   393,     0,   394,     0,
     395,   396,     0,   397,   398,     0,     0,     0,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,     0,   409,
     410,     0,     0,     0,   411,   412,   413,   414,     0,     0,
       0,   415,     0,     0,     0,   416,     0,   417,   418,   419,
     420,   421,     0,   422,   423,   424,   425,   426,   427,     0,
       0,     0,     0,     0,     0,   428,   429,     0,   430,     0,
       0,   431,     0,     0,   432,   433,   434,     0,     0,   435,
     436,     0,   437,   438,   439,   440,   441,   442,     0,     0,
     443,   444,   445,   446,     0,   447,   448,     0,   449,     0,
     450,   451,   452,   453,     0,   136,   454,   455,     0,   456,
     457,   458,   459,     0,     0,     0,     0,     0,   460,   461,
     462,     0,     0,     0,   463,   464,   465,   466,     0,   467,
     468,     0,   469,   470,     0,   471,   472,     0,     0,   473,
       0,     0,   474,     0,   475,     0,   476,   477,   478,     0,
       0,     0,     0,     0,     0,   479,     0,     0,   480,     0,
       0,     0,   481,   482,   483,   484,   485,   486,     0,     0,
       0,     0,     0,     0,   487,   488,     0,   489,   490,   491,
       0,     0,   492,     0,   139,     0,   140,   141,   142,   143,
     144,     0,     0,   145,     0,     0,     0,   146,     0,     0,
       0,  3520,   148,   149,   150,   151,   152,   153,     0,     0,
    -334,     0,     0,     0,   156,     0,     0,     0,   157,     0,
       0,   158,   159,   160,     0,   161,     0,     0,     0,     0,
       0,   164,  3943,     0,   165,   166,     0,   167,     0,     0,
       0,     0,     0,   171,   172,   173,   174,  3944,   176,   177,
       0,   178,   179,     0,     0,     0,     0,     0,     0,     0,
     186,     0,   188,     0,   190,   191,   192,   193,     0,   194,
     195,     0,   196,   197,   198,     0,   200,     0,   201,     0,
       0,   202,     0,     0,   203,     0,     0,     0,   204,     0,
       0,     0,   205,   206,   207,     0,     0,   208,     0,     0,
       0,     0,   209,     0,     0,     0,     0,     0,   211,     0,
     212,     0,     0,     0,   213,     0,   214,   215,   216,   217,
       0,     0,     0,     0,     0,     0,   219,   220,   221,     0,
       0,     0,   222,     0,     0,   224,     0,   225,   226,   227,
       0,     0,   228,   229,     0,   230,   231,   232,   233,     0,
       0,     0,     0,   236,   237,   238,     0,     0,   239,   240,
    3945,   241,   242,   243,     0,     0,     0,     0,     0,     0,
     245,     0,   246,     0,   247,     0,   248,   249,   250,   251,
     252,   253,     0,   254,     0,     0,     0,     0,   256,   257,
       0,     0,     0,     0,     0,   260,     0,     0,     0,   261,
     262,   263,   264,  3946,     0,   265,   266,   267,     0,   268,
       0,   269,     0,     0,     0,     0,   270,     0,     0,     0,
       0,   272,     0,   273,   274,     0,   275,   276,  3947,     0,
       0,   277,     0,     0,     0,   279,   280,     0,     0,   281,
    3948,     0,   282,   283,     0,     0,     0,     0,     0,   284,
     285,     0,   286,     0,   287,     0,   288,   289,     0,     0,
       0,     0,  -289,     0,     0,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
       0,   305,   306,   307,     0,   308,   309,   310,   311,     0,
     312,   313,     0,     0,     0,     0,   314,   315,   316,   317,
     318,   319,     0,     0,   320,   321,     0,   322,     0,   323,
       0,   324,   325,   326,   327,   328,   329,   330,   331,   332,
       0,     0,   333,   334,     0,     0,   335,   336,   337,   338,
       0,     0,     0,     0,   340,     0,     0,     0,     0,   341,
     342,   343,     0,   344,   345,   346,  3949,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   350,
     351,     0,     0,     0,     0,   353,   354,   355,     0,   357,
     358,   359,   360,   361,   362,   363,     0,     0,     0,     0,
     366,   367,     0,   368,     0,   369,   370,   371,   372,   373,
       0,   374,   375,   376,     0,     0,   377,     0,     0,     0,
     378,   379,   380,   381,   382,     0,     0,   383,   384,   385,
     386,   387,     0,   388,     0,     0,   390,     0,   392,  -289,
       0,   393,     0,     0,     0,   395,     0,     0,   397,   398,
    3950,     0,     0,     0,   400,   401,   402,   403,   404,   405,
       0,   407,   408,     0,   409,     0,     0,     0,     0,   411,
     412,   413,     0,     0,     0,     0,   415,     0,     0,     0,
     416,     0,     0,   418,     0,     0,   421,     0,   422,     0,
     424,     0,   426,   427,     0,     0,     0,     0,     0,     0,
     428,   429,     0,   430,     0,     0,   431,     0,     0,   432,
       0,   434,     0,     0,     0,   436,     0,   437,   438,   439,
     440,   441,   442,     0,     0,   443,   444,   445,   446,     0,
     447,   448,     0,   449,     0,   450,   451,   452,   453,     0,
       0,   454,   455,     0,   456,   457,   458,   459,     0,     0,
       0,     0,     0,   460,   461,   462,     0,     0,     0,     0,
     464,   465,   466,     0,   467,   468,     0,   469,   470,     0,
       0,     0,     0,     0,   473,     0,     0,   474,     0,     0,
       0,   476,   477,   478,     0,     0,     0,     0,     0,     0,
     479,     0,     0,   480,     0,     0,     0,   481,   482,   483,
     484,   485,   486,     0,     0,  -289,     0,     0,     0,   487,
       0,     0,   489,     0,   491,     0,   139,   492,   140,   141,
     142,   143,   144,     0,     0,   145,     0,     0,     0,   146,
       0,  4490,   147,     0,   148,   149,   150,   151,   152,   153,
     154,     0,   155,     0,     0,     0,   156,     0,     0,     0,
     157,     0,     0,   158,   159,   160,     0,   161,     0,   162,
     163,     0,     0,   164,     0,     0,   165,   166,     0,   167,
     168,     0,   169,   170,     0,   171,   172,   173,   174,   175,
     176,   177,     0,   178,   179,   180,   181,   182,   183,   184,
     185,     0,   186,   187,   188,   189,   190,   191,   192,   193,
       0,   194,   195,     0,   196,   197,   198,   199,   200,     0,
     201,     0,     0,   202,     0,     0,   203,     0,  1014,     0,
     204,     0,     0,     0,   205,   206,   207,     0,     0,   208,
       0,     0,     0,     0,   209,   210,     0,     0,     0,     0,
     211,     0,   212,     0,     0,     0,   213,     0,   214,   215,
     216,   217,     0,     0,     0,   218,     0,     0,   219,   220,
     221,     0,     0,     0,   222,     0,   223,   224,     0,   225,
     226,   227,     0,     0,   228,   229,     0,   230,   231,   232,
     233,   234,   235,     0,     0,   236,   237,   238,     0,     0,
     239,   240,     0,   241,   242,   243,     0,     0,   244,     0,
       0,     0,   245,     0,   246,     0,   247,     0,   248,   249,
     250,   251,   252,   253,     0,   254,     0,     0,     0,   255,
     256,   257,     0,   258,     0,     0,   259,   260,     0,     0,
       0,   261,   262,   263,   264,     0,     0,   265,   266,   267,
       0,   268,     0,   269,     0,     0,     0,     0,   270,   271,
       0,     0,     0,   272,     0,   273,   274,     0,   275,   276,
       0,     0,     0,   277,     0,     0,   278,   279,   280,     0,
       0,   281,     0,     0,   282,   283,   621,     0,     0,     0,
       0,   284,   285,     0,   286,     0,   287,     0,   288,   289,
       0,     0,     0,     0,     0,     0,     0,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,     0,   305,   306,   307,     0,   308,   309,   310,
     311,     0,   312,   313,     0,     0,     0,     0,   314,   315,
     316,   317,   318,   319,     0,     0,   320,   321,     0,   322,
       0,   323,     0,   324,   325,   326,   327,   328,   329,   330,
     331,   332,     0,     0,   333,   334,     0,     0,   335,   336,
     337,   338,     0,     0,     0,   339,   340,     0,     0,     0,
       0,   341,   342,   343,     0,   344,   345,   346,   347,     0,
     348,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     349,   350,   351,     0,     0,   352,     0,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,     0,
       0,   365,   366,   367,     0,   368,     0,   369,   370,   371,
     372,   373,     0,   374,   375,   376,     0,     0,   377,     0,
       0,     0,   378,   379,   380,   381,   382,     0,     0,   383,
     384,   385,   386,   387,     0,   388,   389,     0,   390,   391,
     392,     0,     0,   393,     0,   394,     0,   395,   396,     0,
     397,   398,     0,     0,     0,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,     0,   409,   410,     0,     0,
       0,   411,   412,   413,   414,     0,     0,     0,   415,     0,
       0,     0,   416,     0,   417,   418,   419,   420,   421,     0,
     422,   423,   424,   425,   426,   427,     0,     0,     0,     0,
       0,     0,   428,   429,     0,   430,     0,     0,   431,     0,
       0,   432,   433,   434,     0,     0,   435,   436,     0,   437,
     438,   439,   440,   441,   442,     0,     0,   443,   444,   445,
     446,     0,   447,   448,     0,   449,     0,   450,   451,   452,
     453,     0,   136,   454,   455,     0,   456,   457,   458,   459,
       0,     0,     0,     0,     0,   460,   461,   462,     0,     0,
       0,   463,   464,   465,   466,     0,   467,   468,     0,   469,
     470,     0,   471,   472,     0,     0,   473,     0,     0,   474,
       0,   475,     0,   476,   477,   478,     0,     0,     0,     0,
       0,     0,   479,     0,     0,   480,     0,     0,     0,   481,
     482,   483,   484,   485,   486,     0,     0,     0,     0,     0,
       0,   487,   488,     0,   489,   490,   491,     0,     0,   492,
     139,     0,   140,   141,   142,   143,   144,     0,     0,   145,
       0,  1191,     0,   146,     0,     0,   147,     0,   148,   149,
     150,   151,   152,   153,   154,     0,   155,     0,     0,     0,
     156,     0,     0,     0,   157,     0,     0,   158,   159,   160,
       0,   161,     0,   162,   163,     0,     0,   164,     0,     0,
     165,   166,     0,   167,   168,     0,   169,   170,     0,   171,
     172,   173,   174,   175,   176,   177,     0,   178,   179,   180,
     181,   182,   183,   184,   185,     0,   186,   187,   188,   189,
     190,   191,   192,   193,     0,   194,   195,     0,   196,   197,
     198,   199,   200,     0,   201,     0,     0,   202,     0,     0,
     203,     0,     0,     0,   204,     0,     0,     0,   205,   206,
     207,     0,     0,   208,     0,     0,     0,     0,   209,   210,
       0,     0,     0,     0,   211,     0,   212,     0,     0,     0,
     213,     0,   214,   215,   216,   217,     0,     0,     0,   218,
       0,     0,   219,   220,   221,     0,     0,     0,   222,     0,
     223,   224,     0,   225,   226,   227,     0,     0,   228,   229,
       0,   230,   231,   232,   233,   234,   235,     0,     0,   236,
     237,   238,     0,     0,   239,   240,     0,   241,   242,   243,
       0,     0,   244,     0,     0,     0,   245,     0,   246,     0,
     247,     0,   248,   249,   250,   251,   252,   253,     0,   254,
       0,     0,     0,   255,   256,   257,     0,   258,     0,     0,
     259,   260,     0,     0,     0,   261,   262,   263,   264,     0,
       0,   265,   266,   267,     0,   268,     0,   269,     0,     0,
       0,     0,   270,   271,     0,     0,     0,   272,     0,   273,
     274,     0,   275,   276,     0,     0,     0,   277,     0,     0,
     278,   279,   280,     0,     0,   281,     0,     0,   282,   283,
       0,     0,     0,     0,     0,   284,   285,     0,   286,     0,
     287,     0,   288,   289,     0,     0,     0,     0,     0,     0,
       0,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,     0,   305,   306,   307,
       0,   308,   309,   310,   311,     0,   312,   313,     0,     0,
       0,     0,   314,   315,   316,   317,   318,   319,     0,     0,
     320,   321,     0,   322,     0,   323,     0,   324,   325,   326,
     327,   328,   329,   330,   331,   332,     0,     0,   333,   334,
       0,     0,   335,   336,   337,   338,     0,     0,     0,   339,
     340,     0,     0,     0,     0,   341,   342,   343,     0,   344,
     345,   346,   347,     0,   348,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   349,   350,   351,     0,     0,   352,
       0,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,     0,     0,   365,   366,   367,     0,   368,
       0,   369,   370,   371,   372,   373,     0,   374,   375,   376,
       0,     0,   377,     0,     0,     0,   378,   379,   380,   381,
     382,     0,     0,   383,   384,   385,   386,   387,     0,   388,
     389,     0,   390,   391,   392,     0,     0,   393,     0,   394,
       0,   395,   396,     0,   397,   398,     0,     0,     0,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,     0,
     409,   410,     0,     0,     0,   411,   412,   413,   414,     0,
       0,     0,   415,     0,     0,     0,   416,     0,   417,   418,
     419,   420,   421,     0,   422,   423,   424,   425,   426,   427,
       0,     0,     0,     0,     0,     0,   428,   429,     0,   430,
       0,     0,   431,     0,     0,   432,   433,   434,     0,     0,
     435,   436,     0,   437,   438,   439,   440,   441,   442,     0,
       0,   443,   444,   445,   446,     0,   447,   448,     0,   449,
       0,   450,   451,   452,   453,     0,     0,   454,   455,     0,
     456,   457,   458,   459,     0,     0,     0,     0,     0,   460,
     461,   462,     0,     0,     0,   463,   464,   465,   466,     0,
     467,   468,     0,   469,   470,     0,   471,   472,     0,     0,
     473,     0,     0,   474,     0,   475,     0,   476,   477,   478,
       0,     0,     0,     0,     0,     0,   479,     0,     0,   480,
       0,     0,     0,   481,   482,   483,   484,   485,   486,     0,
       0,     0,     0,     0,     0,   487,   488,     0,   489,   490,
     491,     0,   139,   492,   140,   141,   142,   143,   144,     0,
    2164,   145,     0,     0,     0,   146,     0,     0,   147,     0,
     148,   149,   150,   151,   152,   153,   154,     0,   155,     0,
       0,     0,   156,     0,     0,     0,   157,     0,     0,   158,
     159,   160,     0,   161,     0,   162,   163,     0,     0,   164,
       0,     0,   165,   166,     0,   167,   168,     0,   169,   170,
       0,   171,   172,   173,   174,   175,   176,   177,     0,   178,
     179,   180,   181,   182,   183,   184,   185,     0,   186,   187,
     188,   189,   190,   191,   192,   193,     0,   194,   195,     0,
     196,   197,   198,   199,   200,     0,   201,     0,     0,   202,
       0,     0,   203,     0,     0,     0,   204,     0,     0,     0,
     205,   206,   207,     0,     0,   208,     0,     0,     0,     0,
     209,   210,     0,     0,     0,     0,   211,     0,   212,     0,
       0,     0,   213,     0,   214,   215,   216,   217,     0,     0,
       0,   218,     0,     0,   219,   220,   221,     0,     0,     0,
     222,     0,   223,   224,     0,   225,   226,   227,     0,     0,
     228,   229,     0,   230,   231,   232,   233,   234,   235,     0,
       0,   236,   237,   238,     0,     0,   239,   240,     0,   241,
     242,   243,     0,     0,   244,     0,     0,     0,   245,     0,
     246,     0,   247,     0,   248,   249,   250,   251,   252,   253,
       0,   254,     0,     0,     0,   255,   256,   257,     0,   258,
       0,     0,   259,   260,     0,     0,     0,   261,   262,   263,
     264,     0,     0,   265,   266,   267,     0,   268,     0,   269,
       0,     0,     0,     0,   270,   271,     0,     0,     0,   272,
       0,   273,   274,     0,   275,   276,     0,     0,     0,   277,
       0,     0,   278,   279,   280,     0,     0,   281,     0,     0,
     282,   283,     0,     0,     0,     0,     0,   284,   285,     0,
     286,     0,   287,     0,   288,   289,     0,     0,     0,     0,
       0,     0,     0,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,     0,   305,
     306,   307,     0,   308,   309,   310,   311,     0,   312,   313,
       0,     0,     0,     0,   314,   315,   316,   317,   318,   319,
       0,     0,   320,   321,     0,   322,     0,   323,     0,   324,
     325,   326,   327,   328,   329,   330,   331,   332,     0,     0,
     333,   334,     0,     0,   335,   336,   337,   338,     0,     0,
       0,   339,   340,     0,     0,     0,     0,   341,   342,   343,
       0,   344,   345,   346,   347,     0,   348,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   349,   350,   351,     0,
       0,   352,     0,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,     0,     0,   365,   366,   367,
       0,   368,     0,   369,   370,   371,   372,   373,     0,   374,
     375,   376,     0,     0,   377,     0,     0,     0,   378,   379,
     380,   381,   382,     0,     0,   383,   384,   385,   386,   387,
       0,   388,   389,     0,   390,   391,   392,     0,     0,   393,
       0,   394,     0,   395,   396,     0,   397,   398,     0,     0,
       0,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,     0,   409,   410,     0,     0,     0,   411,   412,   413,
     414,     0,     0,     0,   415,     0,     0,     0,   416,     0,
     417,   418,   419,   420,   421,     0,   422,   423,   424,   425,
     426,   427,     0,     0,     0,     0,     0,     0,   428,   429,
       0,   430,     0,     0,   431,     0,     0,   432,   433,   434,
       0,     0,   435,   436,     0,   437,   438,   439,   440,   441,
     442,     0,     0,   443,   444,   445,   446,     0,   447,   448,
       0,   449,     0,   450,   451,   452,   453,     0,     0,   454,
     455,     0,   456,   457,   458,   459,     0,     0,     0,     0,
       0,   460,   461,   462,     0,     0,     0,   463,   464,   465,
     466,     0,   467,   468,     0,   469,   470,     0,   471,   472,
       0,     0,   473,     0,     0,   474,     0,   475,     0,   476,
     477,   478,     0,     0,     0,     0,     0,     0,   479,     0,
       0,   480,     0,     0,     0,   481,   482,   483,   484,   485,
     486,     0,     0,     0,     0,     0,     0,   487,   488,     0,
     489,   490,   491,     0,   139,   492,   140,   141,   142,   143,
     144,     0,  2843,   145,     0,     0,     0,   146,     0,     0,
     147,     0,   148,   149,   150,   151,   152,   153,   154,     0,
     155,     0,     0,     0,   156,     0,     0,     0,   157,     0,
       0,   158,   159,   160,     0,   161,     0,   162,   163,     0,
       0,   164,     0,     0,   165,   166,     0,   167,   168,     0,
     169,   170,     0,   171,   172,   173,   174,   175,   176,   177,
       0,   178,   179,   180,   181,   182,   183,   184,   185,     0,
     186,   187,   188,   189,   190,   191,   192,   193,     0,   194,
     195,     0,   196,   197,   198,   199,   200,     0,   201,     0,
       0,   202,     0,     0,   203,     0,     0,     0,   204,     0,
       0,     0,   205,   206,   207,     0,     0,   208,     0,     0,
       0,     0,   209,   210,     0,     0,     0,     0,   211,     0,
     212,     0,     0,     0,   213,     0,   214,   215,   216,   217,
       0,     0,     0,   218,     0,     0,   219,   220,   221,     0,
       0,     0,   222,     0,   223,   224,     0,   225,   226,   227,
       0,     0,   228,   229,     0,   230,   231,   232,   233,   234,
     235,     0,     0,   236,   237,   238,     0,     0,   239,   240,
       0,   241,   242,   243,     0,     0,   244,     0,     0,     0,
     245,     0,   246,     0,   247,     0,   248,   249,   250,   251,
     252,   253,     0,   254,     0,     0,     0,   255,   256,   257,
       0,   258,     0,     0,   259,   260,     0,     0,     0,   261,
     262,   263,   264,     0,     0,   265,   266,   267,     0,   268,
       0,   269,     0,     0,     0,     0,   270,   271,     0,     0,
       0,   272,     0,   273,   274,     0,   275,   276,     0,     0,
       0,   277,     0,     0,   278,   279,   280,     0,     0,   281,
       0,     0,   282,   283,     0,     0,     0,     0,     0,   284,
     285,     0,   286,     0,   287,     0,   288,   289,     0,     0,
       0,     0,     0,     0,     0,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
       0,   305,   306,   307,     0,   308,   309,   310,   311,     0,
     312,   313,     0,     0,     0,     0,   314,   315,   316,   317,
     318,   319,     0,     0,   320,   321,     0,   322,     0,   323,
       0,   324,   325,   326,   327,   328,   329,   330,   331,   332,
       0,     0,   333,   334,     0,     0,   335,   336,   337,   338,
       0,     0,     0,   339,   340,     0,     0,     0,     0,   341,
     342,   343,     0,   344,   345,   346,   347,     0,   348,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   349,   350,
     351,     0,     0,   352,     0,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,     0,     0,   365,
     366,   367,     0,   368,     0,   369,   370,   371,   372,   373,
       0,   374,   375,   376,     0,     0,   377,     0,     0,     0,
     378,   379,   380,   381,   382,     0,     0,   383,   384,   385,
     386,   387,     0,   388,   389,     0,   390,   391,   392,     0,
       0,   393,     0,   394,     0,   395,   396,     0,   397,   398,
       0,     0,     0,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,     0,   409,   410,     0,     0,     0,   411,
     412,   413,   414,     0,     0,     0,   415,     0,     0,     0,
     416,     0,   417,   418,   419,   420,   421,     0,   422,   423,
     424,   425,   426,   427,     0,     0,     0,     0,     0,     0,
     428,   429,     0,   430,     0,     0,   431,     0,     0,   432,
     433,   434,     0,     0,   435,   436,     0,   437,   438,   439,
     440,   441,   442,     0,     0,   443,   444,   445,   446,     0,
     447,   448,     0,   449,     0,   450,   451,   452,   453,     0,
       0,   454,   455,     0,   456,   457,   458,   459,     0,     0,
       0,     0,     0,   460,   461,   462,     0,     0,     0,   463,
     464,   465,   466,     0,   467,   468,     0,   469,   470,     0,
     471,   472,     0,     0,   473,     0,     0,   474,     0,   475,
       0,   476,   477,   478,     0,     0,     0,     0,     0,     0,
     479,     0,     0,   480,     0,     0,     0,   481,   482,   483,
     484,   485,   486,     0,     0,     0,     0,     0,     0,   487,
     488,     0,   489,   490,   491,     0,   139,   492,   140,   141,
     142,   143,   144,     0,  3194,   145,     0,     0,     0,   146,
       0,     0,   147,     0,   148,   149,   150,   151,   152,   153,
     154,     0,   155,     0,     0,     0,   156,     0,     0,     0,
     157,     0,     0,   158,   159,   160,     0,   161,     0,   162,
     163,     0,     0,   164,     0,     0,   165,   166,     0,   167,
     168,     0,   169,   170,     0,   171,   172,   173,   174,   175,
     176,   177,     0,   178,   179,   180,   181,   182,   183,   184,
     185,     0,   186,   187,   188,   189,   190,   191,   192,   193,
       0,   194,   195,     0,   196,   197,   198,   199,   200,     0,
     201,     0,     0,   202,     0,     0,   203,     0,     0,     0,
     204,     0,     0,     0,   205,   206,   207,     0,     0,   208,
       0,     0,     0,     0,   209,   210,     0,     0,     0,     0,
     211,     0,   212,     0,     0,     0,   213,     0,   214,   215,
     216,   217,     0,     0,     0,   218,     0,     0,   219,   220,
     221,     0,     0,     0,   222,     0,   223,   224,     0,   225,
     226,   227,     0,     0,   228,   229,     0,   230,   231,   232,
     233,   234,   235,     0,     0,   236,   237,   238,     0,     0,
     239,   240,     0,   241,   242,   243,     0,     0,   244,     0,
       0,     0,   245,     0,   246,     0,   247,     0,   248,   249,
     250,   251,   252,   253,     0,   254,     0,     0,     0,   255,
     256,   257,     0,   258,     0,     0,   259,   260,     0,     0,
       0,   261,   262,   263,   264,     0,     0,   265,   266,   267,
       0,   268,     0,   269,     0,     0,     0,     0,   270,   271,
       0,     0,     0,   272,     0,   273,   274,     0,   275,   276,
       0,     0,     0,   277,     0,     0,   278,   279,   280,     0,
       0,   281,     0,     0,   282,   283,     0,     0,     0,     0,
       0,   284,   285,     0,   286,     0,   287,     0,   288,   289,
       0,     0,     0,     0,     0,     0,     0,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,     0,   305,   306,   307,     0,   308,   309,   310,
     311,     0,   312,   313,     0,     0,     0,     0,   314,   315,
     316,   317,   318,   319,     0,     0,   320,   321,     0,   322,
       0,   323,     0,   324,   325,   326,   327,   328,   329,   330,
     331,   332,     0,     0,   333,   334,     0,     0,   335,   336,
     337,   338,     0,     0,     0,   339,   340,     0,     0,     0,
       0,   341,   342,   343,     0,   344,   345,   346,   347,     0,
     348,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     349,   350,   351,     0,     0,   352,     0,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,     0,
       0,   365,   366,   367,     0,   368,     0,   369,   370,   371,
     372,   373,     0,   374,   375,   376,     0,     0,   377,     0,
       0,     0,   378,   379,   380,   381,   382,     0,     0,   383,
     384,   385,   386,   387,     0,   388,   389,     0,   390,   391,
     392,     0,     0,   393,     0,   394,     0,   395,   396,     0,
     397,   398,     0,     0,     0,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,     0,   409,   410,     0,     0,
       0,   411,   412,   413,   414,     0,     0,     0,   415,     0,
       0,     0,   416,     0,   417,   418,   419,   420,   421,     0,
     422,   423,   424,   425,   426,   427,     0,     0,     0,     0,
       0,     0,   428,   429,     0,   430,     0,     0,   431,     0,
       0,   432,   433,   434,     0,     0,   435,   436,     0,   437,
     438,   439,   440,   441,   442,     0,     0,   443,   444,   445,
     446,     0,   447,   448,     0,   449,     0,   450,   451,   452,
     453,     0,     0,   454,   455,     0,   456,   457,   458,   459,
       0,     0,     0,     0,     0,   460,   461,   462,     0,     0,
       0,   463,   464,   465,   466,     0,   467,   468,     0,   469,
     470,     0,   471,   472,     0,     0,   473,     0,     0,   474,
       0,   475,     0,   476,   477,   478,     0,     0,     0,     0,
       0,     0,   479,     0,     0,   480,     0,     0,     0,   481,
     482,   483,   484,   485,   486,     0,     0,     0,     0,     0,
       0,   487,   488,     0,   489,   490,   491,     0,   139,   492,
     140,   141,   142,   143,   144,     0,  3525,   145,     0,     0,
       0,   146,     0,     0,   147,     0,   148,   149,   150,   151,
     152,   153,   154,     0,   155,     0,     0,     0,   156,     0,
       0,     0,   157,     0,     0,   158,   159,   160,     0,   161,
       0,   162,   163,     0,     0,   164,     0,     0,   165,   166,
       0,   167,   168,     0,   169,   170,     0,   171,   172,   173,
     174,   175,   176,   177,     0,   178,   179,   180,   181,   182,
     183,   184,   185,     0,   186,   187,   188,   189,   190,   191,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   199,
     200,     0,   201,     0,     0,   202,     0,     0,   203,     0,
       0,     0,   204,     0,     0,     0,   205,   206,   207,     0,
       0,   208,     0,     0,     0,     0,   209,   210,  2497,     0,
       0,     0,   211,     0,   212,     0,     0,     0,   213,     0,
     214,   215,   216,   217,     0,     0,     0,   218,     0,     0,
     219,   220,   221,     0,     0,     0,   222,     0,   223,   224,
       0,   225,   226,   227,     0,     0,   228,   229,     0,   230,
     231,   232,   233,   234,   235,     0,     0,   236,   237,   238,
       0,     0,   239,   240,     0,   241,   242,   243,  2498,     0,
     244,     0,     0,     0,   245,     0,   246,     0,   247,     0,
     248,   249,   250,   251,   252,   253,     0,   254,     0,     0,
       0,   255,   256,   257,     0,   258,  2499,     0,   259,   260,
       0,     0,     0,   261,   262,   263,   264,     0,     0,   265,
     266,   267,     0,   268,     0,   269,     0,     0,     0,     0,
     270,   271,     0,     0,     0,   272,     0,   273,   274,     0,
     275,   276,     0,     0,     0,   277,     0,     0,   278,   279,
     280,     0,     0,   281,     0,     0,   282,   283,     0,     0,
       0,     0,     0,   284,   285,     0,   286,     0,   287,     0,
     288,   289,     0,     0,  2500,     0,     0,     0,     0,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,     0,   305,   306,   307,     0,   308,
     309,   310,   311,     0,   312,   313,     0,     0,     0,     0,
     314,   315,   316,   317,   318,   319,     0,     0,   320,   321,
       0,   322,     0,   323,     0,   324,   325,   326,   327,   328,
     329,   330,   331,   332,     0,     0,   333,   334,     0,     0,
     335,   336,   337,   338,  1056,  1057,     0,   339,   340,     0,
       0,  2501,     0,   341,   342,   343,     0,   344,   345,   346,
     347,     0,   348,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   349,   350,   351,     0,     0,   352,     0,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,     0,     0,   365,   366,   367,     0,   368,     0,   369,
     370,   371,   372,   373,     0,   374,   375,   376,     0,     0,
     377,     0,     0,     0,   378,   379,   380,   381,   382,     0,
       0,   383,   384,   385,   386,   387,     0,   388,   389,     0,
     390,   391,   392,     0,     0,   393,     0,   394,     0,   395,
     396,     0,   397,   398,     0,     0,     0,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,     0,   409,   410,
       0,     0,     0,   411,   412,   413,   414,     0,     0,     0,
     415,     0,     0,     0,   416,     0,   417,   418,   419,   420,
     421,     0,   422,   423,   424,   425,   426,   427,     0,     0,
    4470,   565,  4471,     0,   428,   429,     0,   430,     0,     0,
     431,     0,     0,   432,   433,   434,     0,     0,   435,   436,
       0,   437,   438,   439,   440,   441,   442,     0,     0,   443,
     444,   445,   446,     0,   447,   448,     0,   449,     0,   450,
     451,   452,   453,     0,     0,   454,   455,     0,   456,   457,
     458,   459,     0,     0,     0,     0,     0,   460,   461,   462,
       0,     0,     0,   463,   464,   465,   466,  2502,   467,   468,
       0,   469,   470,     0,   471,   472,     0,     0,   473,     0,
       0,   474,     0,   475,     0,   476,   477,   478,     0,     0,
       0,     0,     0,     0,   479,     0,     0,   480,     0,     0,
       0,   481,   482,   483,   484,   485,   486,     0,     0,     0,
       0,     0,     0,   487,   488,     0,   489,   490,   491,     0,
     139,   492,   140,   141,   142,   143,   144,     0,     0,   145,
       0,     0,     0,   146,     0,     0,   147,     0,   148,   149,
     150,   151,   152,   153,   154,     0,   155,     0,     0,     0,
     156,     0,     0,     0,   157,     0,     0,   158,   159,   160,
       0,   161,     0,   162,   163,     0,     0,   164,     0,     0,
     165,   166,     0,   167,   168,     0,   169,   170,     0,   171,
     172,   173,   174,   175,   176,   177,     0,   178,   179,   180,
     181,   182,   183,   184,   185,     0,   186,   187,   188,   189,
     190,   191,   192,   193,     0,   194,   195,     0,   196,   197,
     198,   199,   200,     0,   201,     0,     0,   202,     0,     0,
     203,     0,     0,     0,   204,     0,     0,     0,   205,   206,
     207,     0,     0,   208,     0,     0,     0,     0,   209,   210,
    1608,     0,     0,  3012,   211,     0,   212,     0,     0,     0,
     213,     0,   214,   215,   216,   217,     0,     0,     0,   218,
       0,     0,   219,   220,   221,     0,     0,     0,   222,     0,
     223,   224,     0,   225,   226,   227,     0,     0,   228,   229,
       0,   230,   231,   232,   233,   234,   235,     0,     0,   236,
     237,   238,     0,     0,   239,   240,     0,   241,   242,   243,
    1609,     0,   244,     0,     0,     0,   245,     0,   246,     0,
     247,     0,   248,   249,   250,   251,   252,   253,     0,   254,
       0,     0,     0,   255,   256,   257,     0,   258,  3013,     0,
     259,   260,     0,     0,     0,   261,   262,   263,   264,     0,
       0,   265,   266,   267,     0,   268,     0,   269,     0,     0,
       0,     0,   270,   271,     0,     0,     0,   272,     0,   273,
     274,     0,   275,   276,     0,     0,     0,   277,     0,     0,
     278,   279,   280,     0,     0,   281,     0,     0,   282,   283,
       0,     0,     0,     0,     0,   284,   285,     0,   286,     0,
     287,     0,   288,   289,     0,     0,  3014,     0,     0,     0,
       0,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,     0,   305,   306,   307,
       0,   308,   309,   310,   311,     0,   312,   313,     0,     0,
       0,     0,   314,   315,   316,   317,   318,   319,     0,     0,
     320,   321,     0,   322,     0,   323,     0,   324,   325,   326,
     327,   328,   329,   330,   331,   332,     0,     0,   333,   334,
       0,     0,   335,   336,   337,   338,     0,     0,     0,   339,
     340,     0,     0,  3015,     0,   341,   342,   343,     0,   344,
     345,   346,   347,     0,   348,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   349,   350,   351,     0,     0,   352,
       0,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,     0,     0,   365,   366,   367,     0,   368,
       0,   369,   370,   371,   372,   373,     0,   374,   375,   376,
       0,     0,   377,     0,     0,     0,   378,   379,   380,   381,
     382,     0,     0,   383,   384,   385,   386,   387,     0,   388,
     389,     0,   390,   391,   392,     0,     0,   393,     0,   394,
       0,   395,   396,     0,   397,   398,     0,     0,     0,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,     0,
     409,   410,     0,     0,     0,   411,   412,   413,   414,     0,
       0,     0,   415,     0,     0,     0,   416,     0,   417,   418,
     419,   420,   421,     0,   422,   423,   424,   425,   426,   427,
       0,     0,     0,     0,     0,     0,   428,   429,     0,   430,
       0,     0,   431,     0,     0,   432,   433,   434,     0,     0,
     435,   436,     0,   437,   438,   439,   440,   441,   442,     0,
       0,   443,   444,   445,   446,     0,   447,   448,     0,   449,
       0,   450,   451,   452,   453,     0,   136,   454,   455,     0,
     456,   457,   458,   459,     0,     0,     0,     0,     0,   460,
     461,   462,     0,     0,     0,   463,   464,   465,   466,  3016,
     467,   468,     0,   469,   470,     0,   471,   472,     0,     0,
     473,     0,     0,   474,     0,   475,     0,   476,   477,   478,
       0,     0,     0,     0,     0,     0,   479,     0,     0,   480,
       0,     0,     0,   481,   482,   483,   484,   485,   486,     0,
       0,     0,     0,     0,     0,   487,   488,     0,   489,   490,
     491,     0,   139,   492,   140,   141,   142,   143,   144,     0,
       0,   145,     0,     0,     0,   146,     0,     0,   147,     0,
     148,   149,   150,   151,   152,   153,   154,     0,   155,     0,
       0,     0,   156,     0,     0,     0,   157,     0,     0,   158,
     159,   160,     0,   161,     0,   162,   163,     0,     0,   164,
       0,     0,   165,   166,     0,   167,   168,     0,   169,   170,
       0,   171,   172,   173,   174,   175,   176,   177,     0,   178,
     179,   180,   181,   182,   183,   184,   185,     0,   186,   187,
     188,   189,   190,   191,   192,   193,     0,   194,   195,     0,
     196,   197,   198,   199,   200,     0,   201,     0,     0,   202,
       0,     0,   203,     0,     0,     0,   204,     0,     0,     0,
     205,   206,   207,     0,     0,   208,     0,     0,     0,     0,
     209,   210,  1608,     0,     0,  3937,   211,     0,   212,     0,
       0,     0,   213,     0,   214,   215,   216,   217,     0,     0,
       0,   218,     0,     0,   219,   220,   221,     0,     0,     0,
     222,     0,   223,   224,     0,   225,   226,   227,     0,     0,
     228,   229,     0,   230,   231,   232,   233,   234,   235,     0,
       0,   236,   237,   238,     0,     0,   239,   240,     0,   241,
     242,   243,  1609,     0,   244,     0,     0,     0,   245,     0,
     246,     0,   247,     0,   248,   249,   250,   251,   252,   253,
       0,   254,     0,     0,     0,   255,   256,   257,     0,   258,
    3013,     0,   259,   260,     0,     0,     0,   261,   262,   263,
     264,     0,     0,   265,   266,   267,     0,   268,     0,   269,
       0,     0,     0,     0,   270,   271,     0,     0,     0,   272,
       0,   273,   274,     0,   275,   276,     0,     0,     0,   277,
       0,     0,   278,   279,   280,     0,     0,   281,     0,     0,
     282,   283,     0,     0,     0,     0,     0,   284,   285,     0,
     286,     0,   287,     0,   288,   289,     0,     0,  3014,     0,
       0,     0,     0,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,     0,   305,
     306,   307,     0,   308,   309,   310,   311,     0,   312,   313,
       0,     0,     0,     0,   314,   315,   316,   317,   318,   319,
       0,     0,   320,   321,     0,   322,     0,   323,     0,   324,
     325,   326,   327,   328,   329,   330,   331,   332,     0,     0,
     333,   334,     0,     0,   335,   336,   337,   338,     0,     0,
       0,   339,   340,     0,     0,  3015,     0,   341,   342,   343,
       0,   344,   345,   346,   347,     0,   348,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   349,   350,   351,     0,
       0,   352,     0,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,     0,     0,   365,   366,   367,
       0,   368,     0,   369,   370,   371,   372,   373,     0,   374,
     375,   376,     0,     0,   377,     0,     0,     0,   378,   379,
     380,   381,   382,     0,     0,   383,   384,   385,   386,   387,
       0,   388,   389,     0,   390,   391,   392,     0,     0,   393,
       0,   394,     0,   395,   396,     0,   397,   398,     0,     0,
       0,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,     0,   409,   410,     0,     0,     0,   411,   412,   413,
     414,     0,     0,     0,   415,     0,     0,     0,   416,     0,
     417,   418,   419,   420,   421,     0,   422,   423,   424,   425,
     426,   427,     0,     0,     0,     0,     0,     0,   428,   429,
       0,   430,     0,     0,   431,     0,     0,   432,   433,   434,
       0,     0,   435,   436,     0,   437,   438,   439,   440,   441,
     442,     0,     0,   443,   444,   445,   446,     0,   447,   448,
       0,   449,     0,   450,   451,   452,   453,     0,   136,   454,
     455,     0,   456,   457,   458,   459,     0,     0,     0,     0,
       0,   460,   461,   462,     0,     0,     0,   463,   464,   465,
     466,  3016,   467,   468,     0,   469,   470,     0,   471,   472,
       0,     0,   473,     0,     0,   474,     0,   475,     0,   476,
     477,   478,     0,     0,     0,     0,     0,     0,   479,     0,
       0,   480,     0,     0,     0,   481,   482,   483,   484,   485,
     486,     0,     0,     0,     0,     0,     0,   487,   488,     0,
     489,   490,   491,     0,   139,   492,   140,   141,   142,   143,
     144,     0,     0,   145,     0,     0,     0,   146,     0,     0,
     147,     0,   148,   149,   150,   151,   152,   153,   154,     0,
     155,     0,     0,     0,   156,     0,     0,     0,   157,     0,
       0,   158,   159,   160,     0,   161,     0,   162,   163,     0,
       0,   164,     0,     0,   165,   166,     0,   167,   168,     0,
     169,   170,     0,   171,   172,   173,   174,   175,   176,   177,
       0,   178,   179,   180,   181,   182,   183,   184,   185,     0,
     186,   187,   188,   189,   190,   191,   192,   193,     0,   194,
     195,     0,   196,   197,   198,   199,   200,     0,   201,     0,
       0,   202,     0,     0,   203,     0,     0,     0,   204,     0,
       0,     0,   205,   206,   207,     0,     0,   208,     0,     0,
       0,     0,   209,   210,  1608,     0,     0,  4217,   211,     0,
     212,     0,     0,     0,   213,     0,   214,   215,   216,   217,
       0,     0,     0,   218,     0,     0,   219,   220,   221,     0,
       0,     0,   222,     0,   223,   224,     0,   225,   226,   227,
       0,     0,   228,   229,     0,   230,   231,   232,   233,   234,
     235,     0,     0,   236,   237,   238,     0,     0,   239,   240,
       0,   241,   242,   243,  1609,     0,   244,     0,     0,     0,
     245,     0,   246,     0,   247,     0,   248,   249,   250,   251,
     252,   253,     0,   254,     0,     0,     0,   255,   256,   257,
       0,   258,  3013,     0,   259,   260,     0,     0,     0,   261,
     262,   263,   264,     0,     0,   265,   266,   267,     0,   268,
       0,   269,     0,     0,     0,     0,   270,   271,     0,     0,
       0,   272,     0,   273,   274,     0,   275,   276,     0,     0,
       0,   277,     0,     0,   278,   279,   280,     0,     0,   281,
       0,     0,   282,   283,     0,     0,     0,     0,     0,   284,
     285,     0,   286,     0,   287,     0,   288,   289,     0,     0,
    3014,     0,     0,     0,     0,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
       0,   305,   306,   307,     0,   308,   309,   310,   311,     0,
     312,   313,     0,     0,     0,     0,   314,   315,   316,   317,
     318,   319,     0,     0,   320,   321,     0,   322,     0,   323,
       0,   324,   325,   326,   327,   328,   329,   330,   331,   332,
       0,     0,   333,   334,     0,     0,   335,   336,   337,   338,
       0,     0,     0,   339,   340,     0,     0,  3015,     0,   341,
     342,   343,     0,   344,   345,   346,   347,     0,   348,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   349,   350,
     351,     0,     0,   352,     0,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,     0,     0,   365,
     366,   367,     0,   368,     0,   369,   370,   371,   372,   373,
       0,   374,   375,   376,     0,     0,   377,     0,     0,     0,
     378,   379,   380,   381,   382,     0,     0,   383,   384,   385,
     386,   387,     0,   388,   389,     0,   390,   391,   392,     0,
       0,   393,     0,   394,     0,   395,   396,     0,   397,   398,
       0,     0,     0,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,     0,   409,   410,     0,     0,     0,   411,
     412,   413,   414,     0,     0,     0,   415,     0,     0,     0,
     416,     0,   417,   418,   419,   420,   421,     0,   422,   423,
     424,   425,   426,   427,     0,     0,     0,     0,     0,     0,
     428,   429,     0,   430,     0,     0,   431,     0,     0,   432,
     433,   434,     0,     0,   435,   436,     0,   437,   438,   439,
     440,   441,   442,     0,     0,   443,   444,   445,   446,     0,
     447,   448,     0,   449,     0,   450,   451,   452,   453,     0,
     136,   454,   455,     0,   456,   457,   458,   459,     0,     0,
       0,     0,     0,   460,   461,   462,     0,     0,     0,   463,
     464,   465,   466,  3016,   467,   468,     0,   469,   470,     0,
     471,   472,     0,     0,   473,     0,     0,   474,     0,   475,
       0,   476,   477,   478,     0,     0,     0,     0,     0,     0,
     479,     0,     0,   480,     0,     0,     0,   481,   482,   483,
     484,   485,   486,     0,     0,     0,     0,     0,     0,   487,
     488,     0,   489,   490,   491,     0,   139,   492,   140,   141,
     142,   143,   144,     0,     0,   145,     0,     0,     0,   146,
       0,     0,   147,     0,   148,   149,   150,   151,   152,   153,
     154,     0,   155,     0,     0,  1386,   156,     0,     0,     0,
     157,     0,     0,   158,   159,   160,     0,   161,     0,   162,
     163,     0,     0,   164,     0,     0,   165,   166,     0,   167,
     168,     0,   169,   170,     0,   171,   172,   173,   174,   175,
     176,   177,     0,   178,   179,   180,   181,   182,   183,   184,
     185,     0,   186,   187,   188,   189,   190,   191,   192,   193,
       0,   194,   195,     0,   196,   197,   198,   199,   200,     0,
     201,     0,     0,   202,     0,     0,   203,     0,     0,     0,
     204,     0,     0,     0,   205,   206,   207,     0,     0,   208,
       0,     0,     0,     0,   209,   210,     0,     0,     0,  1387,
     211,     0,   212,     0,     0,     0,   213,     0,   214,   215,
     216,   217,     0,     0,     0,   218,     0,     0,   219,   220,
     221,     0,     0,     0,   222,     0,   223,   224,     0,   225,
     226,   227,  1388,     0,   228,   229,     0,   230,   231,   232,
     233,   234,   235,     0,     0,   236,   237,   238,     0,     0,
     239,   240,     0,   241,   242,   243,     0,     0,   244,     0,
       0,     0,   245,     0,   246,     0,   247,     0,   248,   249,
     250,   251,   252,   253,     0,   254,     0,     0,     0,   255,
     256,   257,     0,   258,     0,     0,   259,   260,     0,     0,
       0,   261,   262,   263,   264,     0,     0,   265,   266,   267,
       0,   268,     0,   269,     0,     0,     0,     0,   270,   271,
       0,     0,     0,   272,     0,   273,   274,     0,   275,   276,
       0,     0,     0,   277,     0,     0,   278,   279,   280,     0,
       0,   281,     0,     0,   282,   283,   621,     0,     0,     0,
       0,   284,   285,     0,   286,     0,   287,     0,   288,   289,
       0,     0,     0,     0,     0,     0,     0,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,     0,   305,   306,   307,     0,   308,   309,   310,
     311,     0,   312,   313,     0,     0,     0,     0,   314,   315,
     316,   317,   318,   319,     0,     0,   320,   321,     0,   322,
       0,   323,     0,   324,   325,   326,   327,   328,   329,   330,
     331,   332,     0,     0,   333,   334,     0,     0,   335,   336,
     337,   338,     0,     0,     0,   339,   340,     0,     0,     0,
       0,   341,   342,   343,     0,   344,   345,   346,   347,     0,
     348,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     349,   350,   351,     0,     0,   352,     0,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,     0,
       0,   365,   366,   367,     0,   368,     0,   369,   370,   371,
     372,   373,     0,   374,   375,   376,     0,     0,   377,     0,
       0,     0,   378,   379,   380,   381,   382,     0,     0,   383,
     384,   385,   386,   387,     0,   388,   389,     0,   390,   391,
     392,     0,     0,   393,     0,   394,     0,   395,   396,     0,
     397,   398,     0,     0,     0,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,     0,   409,   410,     0,     0,
       0,   411,   412,   413,   414,     0,     0,  1389,   415,     0,
       0,     0,   416,     0,   417,   418,   419,   420,   421,     0,
     422,   423,   424,   425,   426,   427,     0,     0,     0,     0,
       0,     0,   428,   429,     0,   430,     0,     0,   431,     0,
       0,   432,   433,   434,     0,     0,   435,   436,     0,   437,
     438,   439,   440,   441,   442,     0,     0,   443,   444,   445,
     446,     0,   447,   448,     0,   449,     0,   450,   451,   452,
     453,     0,   136,   454,   455,     0,   456,   457,   458,   459,
       0,     0,     0,     0,     0,   460,   461,   462,     0,     0,
       0,   463,   464,   465,   466,     0,   467,   468,     0,   469,
     470,     0,   471,   472,     0,     0,   473,     0,     0,   474,
       0,   475,     0,   476,   477,   478,     0,     0,     0,     0,
       0,     0,   479,     0,     0,   480,     0,     0,     0,   481,
     482,   483,   484,   485,   486,     0,     0,     0,     0,     0,
       0,   487,   488,     0,   489,   490,   491,     0,   139,   492,
     140,   141,   142,   143,   144,     0,     0,   145,     0,     0,
       0,   146,     0,     0,   147,     0,   148,   149,   150,   151,
     152,   153,   154,     0,   155,     0,     0,  1399,   156,     0,
       0,     0,   157,     0,     0,   158,   159,   160,     0,   161,
       0,   162,   163,     0,     0,   164,     0,     0,   165,   166,
       0,   167,   168,     0,   169,   170,     0,   171,   172,   173,
     174,   175,   176,   177,     0,   178,   179,   180,   181,   182,
     183,   184,   185,     0,   186,   187,   188,   189,   190,   191,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   199,
     200,     0,   201,     0,     0,   202,     0,     0,   203,     0,
       0,     0,   204,     0,     0,     0,   205,   206,   207,     0,
       0,   208,     0,     0,     0,     0,   209,   210,     0,     0,
       0,  1400,   211,     0,   212,     0,     0,     0,   213,     0,
     214,   215,   216,   217,     0,     0,     0,   218,     0,     0,
     219,   220,   221,     0,     0,     0,   222,     0,   223,   224,
       0,   225,   226,   227,     0,     0,   228,   229,     0,   230,
     231,   232,   233,   234,   235,     0,     0,   236,   237,   238,
       0,     0,   239,   240,     0,   241,   242,   243,     0,     0,
     244,     0,     0,     0,   245,     0,   246,     0,   247,     0,
     248,   249,   250,   251,   252,   253,     0,   254,     0,     0,
       0,   255,   256,   257,     0,   258,     0,     0,   259,   260,
       0,     0,     0,   261,   262,   263,   264,     0,     0,   265,
     266,   267,     0,   268,     0,   269,     0,     0,     0,     0,
     270,   271,     0,     0,     0,   272,     0,   273,   274,     0,
     275,   276,     0,     0,     0,   277,     0,     0,   278,   279,
     280,     0,     0,   281,     0,     0,   282,   283,   621,     0,
       0,     0,     0,   284,   285,     0,   286,     0,   287,     0,
     288,   289,     0,     0,     0,     0,     0,     0,     0,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,     0,   305,   306,   307,     0,   308,
     309,   310,   311,     0,   312,   313,     0,     0,     0,     0,
     314,   315,   316,   317,   318,   319,     0,     0,   320,   321,
       0,   322,     0,   323,     0,   324,   325,   326,   327,   328,
     329,   330,   331,   332,     0,     0,   333,   334,     0,     0,
     335,   336,   337,   338,     0,     0,     0,   339,   340,     0,
       0,     0,     0,   341,   342,   343,     0,   344,   345,   346,
     347,     0,   348,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   349,   350,   351,     0,     0,   352,     0,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,     0,     0,   365,   366,   367,     0,   368,     0,   369,
     370,   371,   372,   373,     0,   374,   375,   376,     0,     0,
     377,     0,     0,     0,   378,   379,   380,   381,   382,     0,
       0,   383,   384,   385,   386,   387,     0,   388,   389,     0,
     390,   391,   392,     0,     0,   393,     0,   394,     0,   395,
     396,     0,   397,   398,     0,     0,     0,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,     0,   409,   410,
       0,     0,     0,   411,   412,   413,   414,     0,     0,     0,
     415,     0,     0,     0,   416,     0,   417,   418,   419,   420,
     421,     0,   422,   423,   424,   425,   426,   427,     0,     0,
       0,     0,     0,     0,   428,   429,     0,   430,     0,     0,
     431,     0,     0,   432,   433,   434,     0,     0,   435,   436,
       0,   437,   438,   439,   440,   441,   442,     0,     0,   443,
     444,   445,   446,     0,   447,   448,     0,   449,     0,   450,
     451,   452,   453,     0,   136,   454,   455,     0,   456,   457,
     458,   459,     0,     0,     0,     0,     0,   460,   461,   462,
       0,     0,     0,   463,   464,   465,   466,     0,   467,   468,
       0,   469,   470,     0,   471,   472,     0,     0,   473,     0,
       0,   474,     0,   475,     0,   476,   477,   478,     0,     0,
       0,     0,     0,     0,   479,     0,     0,   480,     0,     0,
       0,   481,   482,   483,   484,   485,   486,     0,     0,     0,
       0,     0,     0,   487,   488,     0,   489,   490,   491,     0,
     139,   492,   140,   141,   142,   143,   144,     0,     0,   145,
       0,     0,     0,   146,     0,     0,   147,     0,   148,   149,
     150,   151,   152,   153,   154,     0,   155,     0,     0,     0,
     156,     0,     0,     0,   157,     0,     0,   158,   159,   160,
       0,   161,     0,   162,   163,     0,     0,   164,     0,     0,
     165,   166,     0,   167,   168,     0,   169,   170,     0,   171,
     172,   173,   174,   175,   176,   177,     0,   178,   179,   180,
     181,   182,   183,   184,   185,     0,   186,   187,   188,   189,
     190,   191,   192,   193,     0,   194,   195,     0,   196,   197,
     198,   199,   200,     0,   201,     0,     0,   202,     0,     0,
     203,     0,     0,     0,   204,     0,     0,     0,   205,   206,
     207,     0,     0,   208,     0,     0,     0,     0,   209,   210,
       0,     0,     0,     0,   211,     0,   212,     0,     0,     0,
     213,     0,   214,   215,   216,   217,     0,     0,     0,   218,
       0,     0,   219,   220,   221,     0,     0,     0,   222,     0,
     223,   224,     0,   225,   226,   227,     0,     0,   228,   229,
       0,   230,   231,   232,   233,   234,   235,     0,     0,   236,
     237,   238,     0,     0,   239,   240,     0,   241,   242,   243,
       0,     0,   244,     0,     0,     0,   245,     0,   246,     0,
     247,     0,   248,   249,   250,   251,   252,   253,     0,   254,
       0,     0,     0,   255,   256,   257,     0,   258,     0,     0,
     259,   260,     0,     0,     0,   261,   262,   263,   264,     0,
       0,   265,   266,   267,     0,   268,     0,   269,     0,     0,
       0,     0,   270,   271,     0,     0,     0,   272,     0,   273,
     274,     0,   275,   276,     0,     0,     0,   277,     0,     0,
     278,   279,   280,     0,     0,   281,     0,     0,   282,   283,
       0,     0,     0,     0,     0,   284,   285,     0,   286,     0,
     287,     0,   288,   289,     0,     0,  1909,     0,     0,     0,
       0,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,     0,   305,   306,   307,
       0,   308,   309,   310,   311,     0,   312,   313,     0,     0,
       0,     0,   314,   315,   316,   317,   318,   319,     0,     0,
     320,   321,     0,   322,     0,   323,     0,   324,   325,   326,
     327,   328,   329,   330,   331,   332,     0,     0,   333,   334,
       0,     0,   335,   336,   337,   338,     0,     0,     0,   339,
     340,     0,     0,  1910,     0,   341,   342,   343,     0,   344,
     345,   346,   347,     0,   348,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   349,   350,   351,     0,   739,   352,
       0,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,     0,     0,   365,   366,   367,     0,   368,
       0,   369,   370,   371,   372,   373,     0,   374,   375,   376,
       0,     0,   377,     0,     0,     0,   378,   379,   380,   381,
     382,     0,     0,   383,   384,   385,   386,   387,     0,   388,
     389,     0,   390,   391,   392,     0,     0,   393,     0,   394,
       0,   395,   396,     0,   397,   398,     0,     0,     0,   399,
     400,   401,  1911,   403,   404,   405,   406,   407,   408,     0,
     409,   410,     0,     0,     0,   411,   412,   413,   414,     0,
       0,     0,   415,     0,     0,     0,   416,     0,   417,   418,
     419,   420,   421,     0,   422,   423,   424,   425,   426,   427,
       0,     0,     0,     0,     0,     0,   428,   429,     0,   430,
       0,     0,   431,     0,     0,   432,   433,   434,     0,     0,
     435,   436,     0,   437,   438,   439,   440,   441,   442,     0,
       0,   443,   444,   445,   446,     0,   447,   448,     0,   449,
       0,   450,   451,   452,   453,     0,     0,   454,   455,     0,
     456,   457,   458,   459,     0,     0,     0,     0,     0,   460,
     461,   462,     0,     0,     0,   463,   464,   465,   466,  1912,
     467,   468,     0,   469,   470,     0,   471,   472,     0,     0,
     473,     0,     0,   474,     0,   475,     0,   476,   477,   478,
       0,     0,     0,     0,     0,     0,   479,     0,     0,   480,
       0,     0,     0,   481,   482,   483,   484,   485,   486,     0,
       0,     0,     0,     0,     0,   487,   488,     0,   489,   490,
     491,     0,   139,   492,   140,   141,   142,   143,   144,     0,
       0,   145,     0,     0,     0,   146,     0,     0,   147,     0,
     148,   149,   150,   151,   152,   153,   154,     0,   155,     0,
       0,     0,   156,     0,     0,     0,   157,     0,     0,   158,
     159,   160,     0,   161,     0,   162,   163,     0,     0,   164,
       0,     0,   165,   166,     0,   167,   168,     0,   169,   170,
       0,   171,   172,   173,   174,   175,   176,   177,     0,   178,
     179,   180,   181,   182,   183,   184,   185,     0,   186,   187,
     188,   189,   190,   191,   192,   193,     0,   194,   195,     0,
     196,   197,   198,   199,   200,     0,   201,     0,     0,   202,
       0,     0,   203,     0,     0,     0,   204,     0,     0,     0,
     205,   206,   207,     0,     0,   208,     0,     0,     0,     0,
     209,   210,     0,     0,     0,     0,   211,     0,   212,     0,
       0,     0,   213,     0,   214,   215,   216,   217,     0,     0,
       0,   218,     0,     0,   219,   220,   221,     0,     0,     0,
     222,     0,   223,   224,     0,   225,   226,   227,     0,     0,
     228,   229,     0,   230,   231,   232,   233,   234,   235,     0,
       0,   236,   237,   238,     0,     0,   239,   240,     0,   241,
     242,   243,     0,     0,   244,     0,     0,     0,   245,     0,
     246,     0,   247,     0,   248,   249,   250,   251,   252,   253,
       0,   254,     0,     0,     0,   255,   256,   257,     0,   258,
       0,     0,   259,   260,     0,     0,     0,   261,   262,   263,
     264,     0,     0,   265,   266,   267,     0,   268,     0,   269,
       0,     0,     0,     0,   270,   271,     0,     0,     0,   272,
       0,   273,   274,     0,   275,   276,     0,     0,     0,   277,
       0,     0,   278,   279,   280,     0,     0,   281,     0,     0,
     282,   283,     0,     0,     0,     0,     0,   284,   285,     0,
     286,     0,   287,     0,   288,   289,     0,     0,  1909,     0,
       0,     0,     0,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,     0,   305,
     306,   307,     0,   308,   309,   310,   311,     0,   312,   313,
       0,     0,     0,     0,   314,   315,   316,   317,   318,   319,
       0,     0,   320,   321,     0,   322,     0,   323,     0,   324,
     325,   326,   327,   328,   329,   330,   331,   332,     0,     0,
     333,   334,     0,     0,   335,   336,   337,   338,     0,     0,
       0,   339,   340,     0,     0,  1910,     0,   341,   342,   343,
       0,   344,   345,   346,   347,     0,   348,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   349,   350,   351,     0,
     739,   352,     0,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,     0,     0,   365,   366,   367,
       0,   368,     0,   369,   370,   371,   372,   373,     0,   374,
     375,   376,     0,     0,   377,     0,     0,     0,   378,   379,
     380,   381,   382,     0,     0,   383,   384,   385,   386,   387,
       0,   388,   389,     0,   390,   391,   392,     0,     0,   393,
       0,   394,     0,   395,   396,     0,   397,   398,     0,     0,
       0,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,     0,   409,   410,     0,     0,     0,   411,   412,   413,
     414,     0,     0,     0,   415,     0,     0,     0,   416,     0,
     417,   418,   419,   420,   421,     0,   422,   423,   424,   425,
     426,   427,     0,     0,     0,     0,     0,     0,   428,   429,
       0,   430,     0,     0,   431,     0,     0,   432,   433,   434,
       0,     0,   435,   436,     0,   437,   438,   439,   440,   441,
     442,     0,     0,   443,   444,   445,   446,     0,   447,   448,
       0,   449,     0,   450,   451,   452,   453,     0,     0,   454,
     455,     0,   456,   457,   458,   459,     0,     0,     0,     0,
       0,   460,   461,   462,     0,     0,     0,   463,   464,   465,
     466,  1912,   467,   468,     0,   469,   470,     0,   471,   472,
       0,     0,   473,     0,     0,   474,     0,   475,     0,   476,
     477,   478,     0,     0,     0,     0,     0,     0,   479,     0,
       0,   480,     0,     0,     0,   481,   482,   483,   484,   485,
     486,     0,     0,     0,     0,     0,     0,   487,   488,     0,
     489,   490,   491,     0,   139,   492,   140,   141,   142,   143,
     144,     0,     0,   145,     0,     0,     0,   146,     0,     0,
     147,     0,   148,   149,   150,   151,   152,   153,   154,     0,
     155,     0,     0,  1386,   156,     0,     0,     0,   157,     0,
       0,   158,   159,   160,     0,   161,     0,   162,   163,     0,
       0,   164,     0,     0,   165,   166,     0,   167,   168,     0,
     169,   170,     0,   171,   172,   173,   174,   175,   176,   177,
       0,   178,   179,   180,   181,   182,   183,   184,   185,     0,
     186,   187,   188,   189,   190,   191,   192,   193,     0,   194,
     195,     0,   196,   197,   198,   199,   200,     0,   201,     0,
       0,   202,     0,     0,   203,     0,     0,     0,   204,     0,
       0,     0,   205,   206,   207,     0,     0,   208,     0,     0,
       0,     0,   209,   210,     0,     0,     0,  1387,   211,     0,
     212,     0,     0,     0,   213,     0,   214,   215,   216,   217,
       0,     0,     0,   218,     0,     0,   219,   220,   221,     0,
       0,     0,   222,     0,   223,   224,     0,   225,   226,   227,
       0,     0,   228,   229,     0,   230,   231,   232,   233,   234,
     235,     0,     0,   236,   237,   238,     0,     0,   239,   240,
       0,   241,   242,   243,     0,     0,   244,     0,     0,     0,
     245,     0,   246,     0,   247,     0,   248,   249,   250,   251,
     252,   253,     0,   254,     0,     0,     0,   255,   256,   257,
       0,   258,     0,     0,   259,   260,     0,     0,     0,   261,
     262,   263,   264,     0,     0,   265,   266,   267,     0,   268,
       0,   269,     0,     0,     0,     0,   270,   271,     0,     0,
       0,   272,     0,   273,   274,     0,   275,   276,     0,     0,
       0,   277,     0,     0,   278,   279,   280,     0,     0,   281,
       0,     0,   282,   283,   621,     0,     0,     0,     0,   284,
     285,     0,   286,     0,   287,     0,   288,   289,     0,     0,
       0,     0,     0,     0,     0,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
       0,   305,   306,   307,     0,   308,   309,   310,   311,     0,
     312,   313,     0,     0,     0,     0,   314,   315,   316,   317,
     318,   319,     0,     0,   320,   321,     0,   322,     0,   323,
       0,   324,   325,   326,   327,   328,   329,   330,   331,   332,
       0,     0,   333,   334,     0,     0,   335,   336,   337,   338,
       0,     0,     0,   339,   340,     0,     0,     0,     0,   341,
     342,   343,     0,   344,   345,   346,   347,     0,   348,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   349,   350,
     351,     0,     0,   352,     0,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,     0,     0,   365,
     366,   367,     0,   368,     0,   369,   370,   371,   372,   373,
       0,   374,   375,   376,     0,     0,   377,     0,     0,     0,
     378,   379,   380,   381,   382,     0,     0,   383,   384,   385,
     386,   387,     0,   388,   389,     0,   390,   391,   392,     0,
       0,   393,     0,   394,     0,   395,   396,     0,   397,   398,
       0,     0,     0,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,     0,   409,   410,     0,     0,     0,   411,
     412,   413,   414,     0,     0,     0,   415,     0,     0,     0,
     416,     0,   417,   418,   419,   420,   421,     0,   422,   423,
     424,   425,   426,   427,     0,     0,     0,     0,     0,     0,
     428,   429,     0,   430,     0,     0,   431,     0,     0,   432,
     433,   434,     0,     0,   435,   436,     0,   437,   438,   439,
     440,   441,   442,     0,     0,   443,   444,   445,   446,     0,
     447,   448,     0,   449,     0,   450,   451,   452,   453,     0,
     136,   454,   455,     0,   456,   457,   458,   459,     0,     0,
       0,     0,     0,   460,   461,   462,     0,     0,     0,   463,
     464,   465,   466,     0,   467,   468,     0,   469,   470,     0,
     471,   472,     0,     0,   473,     0,     0,   474,     0,   475,
       0,   476,   477,   478,     0,     0,     0,     0,     0,     0,
     479,     0,     0,   480,     0,     0,     0,   481,   482,   483,
     484,   485,   486,     0,     0,     0,     0,     0,     0,   487,
     488,     0,   489,   490,   491,     0,   139,   492,   140,   141,
     142,   143,   144,     0,     0,   145,     0,     0,     0,   146,
       0,     0,   147,     0,   148,   149,   150,   151,   152,   153,
     154,     0,   155,     0,     0,     0,   156,     0,     0,     0,
     157,     0,     0,   158,   159,   160,     0,   161,     0,   162,
     163,     0,     0,   164,     0,     0,   165,   166,     0,   167,
     168,     0,   169,   170,     0,   171,   172,   173,   174,   175,
     176,   177,     0,   178,   179,   180,   181,   182,   183,   184,
     185,     0,   186,   187,   188,   189,   190,   191,   192,   193,
       0,   194,   195,     0,   196,   197,   198,   199,   200,     0,
     201,     0,     0,   202,     0,     0,   203,     0,     0,     0,
     204,     0,     0,     0,   205,   206,   207,     0,     0,   208,
       0,     0,     0,     0,   209,   210,     0,     0,     0,     0,
     211,     0,   212,     0,     0,     0,   213,     0,   214,   215,
     216,   217,     0,     0,     0,   218,     0,     0,   219,   220,
     221,     0,     0,     0,   222,     0,   223,   224,     0,   225,
     226,   227,     0,     0,   228,   229,     0,   230,   231,   232,
     233,   234,   235,     0,     0,   236,   237,   238,     0,     0,
     239,   240,     0,   241,   242,   243,     0,     0,   244,     0,
       0,     0,   245,     0,   246,     0,   247,     0,   248,   249,
     250,   251,   252,   253,     0,   254,     0,     0,     0,   255,
     256,   257,     0,   258,     0,     0,   259,   260,     0,     0,
       0,   261,   262,   263,   264,     0,     0,   265,   266,   267,
       0,   268,     0,   269,     0,     0,     0,     0,   270,   271,
       0,     0,     0,   272,     0,   273,   274,     0,   275,   276,
       0,     0,     0,   277,     0,     0,   278,   279,   280,     0,
       0,   281,     0,     0,   282,   283,     0,     0,     0,     0,
       0,   284,   285,     0,   286,     0,   287,     0,   288,   289,
       0,     0,  1909,     0,     0,     0,     0,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,     0,   305,   306,   307,     0,   308,   309,   310,
     311,     0,   312,   313,     0,     0,     0,     0,   314,   315,
     316,   317,   318,   319,     0,     0,   320,   321,     0,   322,
       0,   323,     0,   324,   325,   326,   327,   328,   329,   330,
     331,   332,     0,     0,   333,   334,     0,     0,   335,   336,
     337,   338,     0,     0,     0,   339,   340,     0,     0,  1910,
       0,   341,   342,   343,     0,   344,   345,   346,   347,     0,
     348,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     349,   350,   351,     0,   739,   352,     0,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,     0,
       0,   365,   366,   367,     0,   368,     0,   369,   370,   371,
     372,   373,     0,   374,   375,   376,     0,     0,   377,     0,
       0,     0,   378,   379,   380,   381,   382,     0,     0,   383,
     384,   385,   386,   387,     0,   388,   389,     0,   390,   391,
     392,     0,     0,   393,     0,   394,     0,   395,   396,     0,
     397,   398,     0,     0,     0,   399,   400,   401,  3669,   403,
     404,   405,   406,   407,   408,     0,   409,   410,     0,     0,
       0,   411,   412,   413,   414,     0,     0,     0,   415,     0,
       0,     0,   416,     0,   417,   418,   419,   420,   421,     0,
     422,   423,   424,   425,   426,   427,     0,     0,     0,     0,
       0,     0,   428,   429,     0,   430,     0,     0,   431,     0,
       0,   432,   433,   434,     0,     0,   435,   436,     0,   437,
     438,   439,   440,   441,   442,     0,     0,   443,   444,   445,
     446,     0,   447,   448,     0,   449,     0,   450,   451,   452,
     453,     0,     0,   454,   455,     0,   456,   457,   458,   459,
       0,     0,     0,     0,     0,   460,   461,   462,     0,     0,
       0,   463,   464,   465,   466,  1912,   467,   468,     0,   469,
     470,     0,   471,   472,     0,     0,   473,     0,     0,   474,
       0,   475,     0,   476,   477,   478,     0,     0,     0,     0,
       0,     0,   479,     0,     0,   480,     0,     0,     0,   481,
     482,   483,   484,   485,   486,     0,     0,     0,     0,     0,
       0,   487,   488,     0,   489,   490,   491,     0,   139,   492,
     140,   141,   142,   143,   144,     0,     0,   145,     0,     0,
       0,   146,     0,     0,   147,     0,   148,   149,   150,   151,
     152,   153,   154,     0,   155,     0,     0,     0,   156,     0,
       0,     0,   157,     0,     0,   158,   159,   160,     0,   161,
       0,   162,   163,     0,     0,   164,     0,     0,   165,   166,
       0,   167,   168,     0,   169,   170,     0,   171,   172,   173,
     174,   175,   176,   177,     0,   178,   179,   180,   181,   182,
     183,   184,   185,     0,   186,   187,   188,   189,   190,   191,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   199,
     200,     0,   201,     0,     0,   202,     0,     0,   203,     0,
    1014,     0,   204,     0,     0,     0,   205,   206,   207,     0,
       0,   208,     0,     0,     0,     0,   209,   210,     0,     0,
       0,     0,   211,     0,   212,     0,     0,     0,   213,     0,
     214,   215,   216,   217,     0,     0,     0,   218,     0,     0,
     219,   220,   221,     0,     0,     0,   222,     0,   223,   224,
       0,   225,   226,   227,     0,     0,   228,   229,     0,   230,
     231,   232,   233,   234,   235,     0,     0,   236,   237,   238,
       0,     0,   239,   240,     0,   241,   242,   243,     0,     0,
     244,     0,     0,     0,   245,     0,   246,     0,   247,     0,
     248,   249,   250,   251,   252,   253,     0,   254,     0,     0,
       0,   255,   256,   257,     0,   258,     0,     0,   259,   260,
       0,     0,     0,   261,   262,   263,   264,     0,     0,   265,
     266,   267,     0,   268,     0,   269,     0,     0,     0,     0,
     270,   271,     0,     0,     0,   272,     0,   273,   274,     0,
     275,   276,     0,     0,     0,   277,     0,     0,   278,   279,
     280,     0,     0,   281,     0,     0,   282,   283,   621,     0,
       0,     0,     0,   284,   285,     0,   286,     0,   287,     0,
     288,   289,     0,     0,     0,     0,     0,     0,     0,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,     0,   305,   306,   307,     0,   308,
     309,   310,   311,     0,   312,   313,     0,     0,     0,     0,
     314,   315,   316,   317,   318,   319,     0,     0,   320,   321,
       0,   322,     0,   323,     0,   324,   325,   326,   327,   328,
     329,   330,   331,   332,     0,     0,   333,   334,     0,     0,
     335,   336,   337,   338,     0,     0,     0,   339,   340,     0,
       0,     0,     0,   341,   342,   343,     0,   344,   345,   346,
     347,     0,   348,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   349,   350,   351,     0,     0,   352,     0,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,     0,     0,   365,   366,   367,     0,   368,     0,   369,
     370,   371,   372,   373,     0,   374,   375,   376,     0,     0,
     377,     0,     0,     0,   378,   379,   380,   381,   382,     0,
       0,   383,   384,   385,   386,   387,     0,   388,   389,     0,
     390,   391,   392,     0,     0,   393,     0,   394,     0,   395,
     396,     0,   397,   398,     0,     0,     0,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,     0,   409,   410,
       0,     0,     0,   411,   412,   413,   414,     0,     0,     0,
     415,     0,     0,     0,   416,     0,   417,   418,   419,   420,
     421,     0,   422,   423,   424,   425,   426,   427,     0,     0,
       0,     0,     0,     0,   428,   429,     0,   430,     0,     0,
     431,     0,     0,   432,   433,   434,     0,     0,   435,   436,
       0,   437,   438,   439,   440,   441,   442,     0,     0,   443,
     444,   445,   446,     0,   447,   448,     0,   449,     0,   450,
     451,   452,   453,     0,   136,   454,   455,     0,   456,   457,
     458,   459,     0,     0,     0,     0,     0,   460,   461,   462,
       0,     0,     0,   463,   464,   465,   466,     0,   467,   468,
       0,   469,   470,     0,   471,   472,     0,     0,   473,     0,
       0,   474,     0,   475,     0,   476,   477,   478,     0,     0,
       0,     0,     0,     0,   479,     0,     0,   480,     0,     0,
       0,   481,   482,   483,   484,   485,   486,     0,     0,     0,
       0,     0,     0,   487,   488,     0,   489,   490,   491,     0,
     139,   492,   140,   141,   142,   143,   144,  1422,     0,   145,
       0,     0,     0,   146,     0,     0,   147,     0,   148,   149,
     150,   151,   152,   153,   154,     0,   155,     0,     0,     0,
     156,     0,     0,     0,   157,     0,     0,   158,   159,   160,
       0,   161,     0,   162,   163,     0,     0,   164,     0,     0,
     165,   166,     0,   167,   168,     0,   169,   170,     0,   171,
     172,   173,   174,   175,   176,   177,     0,   178,   179,   180,
     181,   182,   183,   184,   185,     0,   186,   187,   188,   189,
     190,   191,   192,   193,     0,   194,   195,     0,   196,   197,
     198,   199,   200,     0,   201,     0,     0,   202,     0,     0,
     203,     0,     0,     0,   204,     0,     0,     0,   205,   206,
     207,     0,     0,   208,     0,     0,     0,     0,   209,   210,
       0,     0,     0,     0,   211,     0,   212,     0,     0,     0,
     213,     0,   214,   215,   216,   217,     0,     0,     0,   218,
       0,     0,   219,   220,   221,     0,     0,     0,   222,     0,
     223,   224,     0,   225,   226,   227,     0,     0,   228,   229,
       0,   230,   231,   232,   233,   234,   235,     0,     0,   236,
     237,   238,     0,     0,   239,   240,     0,   241,   242,   243,
       0,     0,   244,     0,     0,     0,   245,     0,   246,     0,
     247,     0,   248,   249,   250,   251,   252,   253,     0,   254,
       0,     0,     0,   255,   256,   257,     0,   258,     0,     0,
     259,   260,     0,     0,     0,   261,   262,   263,   264,     0,
       0,   265,   266,   267,     0,   268,     0,   269,     0,     0,
       0,     0,   270,   271,     0,     0,     0,   272,     0,   273,
     274,     0,   275,   276,     0,     0,     0,   277,     0,     0,
     278,   279,   280,     0,     0,   281,     0,     0,   282,   283,
     621,     0,     0,     0,     0,   284,   285,     0,   286,     0,
     287,     0,   288,   289,     0,     0,     0,     0,     0,     0,
       0,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,     0,   305,   306,   307,
       0,   308,   309,   310,   311,     0,   312,   313,     0,     0,
       0,     0,   314,   315,   316,   317,   318,   319,     0,     0,
     320,   321,     0,   322,     0,   323,     0,   324,   325,   326,
     327,   328,   329,   330,   331,   332,     0,     0,   333,   334,
       0,     0,   335,   336,   337,   338,     0,     0,     0,   339,
     340,     0,     0,     0,     0,   341,   342,   343,     0,   344,
     345,   346,   347,     0,   348,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   349,   350,   351,     0,     0,   352,
       0,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,     0,     0,   365,   366,   367,     0,   368,
       0,   369,   370,   371,   372,   373,     0,   374,   375,   376,
       0,     0,   377,     0,     0,     0,   378,   379,   380,   381,
     382,     0,     0,   383,   384,   385,   386,   387,     0,   388,
     389,     0,   390,   391,   392,     0,     0,   393,     0,   394,
       0,   395,   396,     0,   397,   398,     0,     0,     0,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,     0,
     409,   410,     0,     0,     0,   411,   412,   413,   414,     0,
       0,     0,   415,     0,     0,     0,   416,     0,   417,   418,
     419,   420,   421,     0,   422,   423,   424,   425,   426,   427,
       0,     0,     0,     0,     0,     0,   428,   429,     0,   430,
       0,     0,   431,     0,     0,   432,   433,   434,     0,     0,
     435,   436,     0,   437,   438,   439,   440,   441,   442,     0,
       0,   443,   444,   445,   446,     0,   447,   448,     0,   449,
       0,   450,   451,   452,   453,     0,   136,   454,   455,     0,
     456,   457,   458,   459,     0,     0,     0,     0,     0,   460,
     461,   462,     0,     0,     0,   463,   464,   465,   466,     0,
     467,   468,     0,   469,   470,     0,   471,   472,     0,     0,
     473,     0,     0,   474,     0,   475,     0,   476,   477,   478,
       0,     0,     0,     0,     0,     0,   479,     0,     0,   480,
       0,     0,     0,   481,   482,   483,   484,   485,   486,     0,
       0,     0,     0,     0,     0,   487,   488,     0,   489,   490,
     491,     0,   139,   492,   140,   141,   142,   143,   144,     0,
       0,   145,     0,     0,     0,   146,     0,     0,   147,     0,
     148,   149,   150,   151,   152,   153,   154,     0,   155,     0,
       0,     0,   156,   992,     0,     0,   157,     0,     0,   158,
     159,   160,     0,   161,     0,   162,   163,     0,     0,   164,
       0,     0,   165,   166,     0,   167,   168,     0,   169,   170,
       0,   171,   172,   173,   174,   175,   176,   177,     0,   178,
     179,   180,   181,   182,   183,   184,   185,     0,   186,   187,
     188,   189,   190,   191,   192,   193,     0,   194,   195,     0,
     196,   197,   198,   199,   200,     0,   201,     0,     0,   202,
       0,     0,   203,     0,     0,     0,   204,     0,     0,     0,
     205,   206,   207,     0,     0,   208,     0,     0,     0,     0,
     209,   210,     0,     0,     0,     0,   211,     0,   212,     0,
       0,     0,   213,     0,   214,   215,   216,   217,     0,     0,
       0,   218,     0,     0,   219,   220,   221,     0,     0,     0,
     222,     0,   223,   224,     0,   225,   226,   227,     0,     0,
     228,   229,     0,   230,   231,   232,   233,   234,   235,     0,
       0,   236,   237,   238,     0,     0,   239,   240,     0,   241,
     242,   243,     0,     0,   244,     0,     0,     0,   245,     0,
     246,     0,   247,     0,   248,   249,   250,   251,   252,   253,
       0,   254,     0,     0,     0,   255,   256,   257,     0,   258,
     993,     0,   259,   260,     0,     0,     0,   261,   262,   263,
     264,     0,     0,   265,   266,   267,     0,   268,     0,   269,
       0,     0,     0,     0,   270,   271,     0,     0,     0,   272,
       0,   273,   274,     0,   275,   276,     0,     0,     0,   277,
       0,     0,   278,   279,   280,     0,     0,   281,     0,     0,
     282,   283,     0,     0,     0,     0,     0,   284,   285,     0,
     286,     0,   287,     0,   288,   289,     0,     0,     0,     0,
       0,     0,     0,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,     0,   305,
     306,   307,     0,   308,   309,   310,   311,     0,   312,   313,
       0,     0,     0,     0,   314,   315,   316,   317,   318,   319,
       0,     0,   320,   321,     0,   322,     0,   323,     0,   324,
     325,   326,   327,   328,   329,   330,   331,   332,     0,     0,
     333,   334,     0,     0,   335,   336,   337,   338,     0,     0,
       0,   339,   340,     0,     0,     0,     0,   341,   342,   343,
       0,   344,   345,   346,   347,     0,   348,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   349,   350,   351,     0,
       0,   352,     0,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,     0,     0,   365,   366,   367,
       0,   368,     0,   369,   370,   371,   372,   373,     0,   374,
     375,   376,     0,     0,   377,     0,     0,     0,   378,   379,
     380,   381,   382,     0,     0,   383,   384,   385,   386,   387,
       0,   388,   389,     0,   390,   391,   392,     0,     0,   393,
       0,   394,     0,   395,   396,     0,   397,   398,     0,     0,
       0,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,     0,   409,   410,     0,     0,     0,   411,   412,   413,
     414,     0,     0,     0,   415,     0,     0,     0,   416,     0,
     417,   418,   419,   420,   421,     0,   422,   423,   424,   425,
     426,   427,     0,     0,     0,     0,     0,     0,   428,   429,
       0,   430,     0,     0,   431,     0,     0,   432,   433,   434,
       0,     0,   435,   436,     0,   437,   438,   439,   440,   441,
     442,     0,     0,   443,   444,   445,   446,     0,   447,   448,
       0,   449,     0,   450,   451,   452,   453,     0,   994,   454,
     455,     0,   456,   457,   458,   459,     0,     0,     0,     0,
       0,   460,   461,   462,     0,     0,     0,   463,   464,   465,
     466,     0,   467,   468,     0,   469,   470,     0,   471,   472,
       0,     0,   473,     0,     0,   474,     0,   475,     0,   476,
     477,   478,     0,     0,     0,     0,     0,     0,   479,     0,
       0,   480,     0,     0,     0,   481,   482,   483,   484,   485,
     486,     0,     0,     0,     0,     0,     0,   487,   488,     0,
     489,   490,   491,     0,   139,   492,   140,   141,   142,   143,
     144,     0,     0,   145,     0,     0,     0,   146,     0,     0,
     147,     0,   148,   149,   150,   151,   152,   153,   154,     0,
     155,     0,     0,     0,   156,     0,     0,     0,   157,     0,
       0,   158,   159,   160,     0,   161,     0,   162,   163,     0,
       0,   164,     0,     0,   165,   166,     0,   167,   168,     0,
     169,   170,     0,   171,   172,   173,   174,   175,   176,   177,
       0,   178,   179,   180,   181,   182,   183,   184,   185,     0,
     186,   187,   188,   189,   190,   191,   192,   193,     0,   194,
     195,     0,   196,   197,   198,   199,   200,     0,   201,     0,
       0,   202,     0,     0,   203,     0,     0,     0,   204,     0,
       0,     0,   205,   206,   207,     0,     0,   208,     0,     0,
       0,     0,   209,   210,     0,     0,     0,  2414,   211,     0,
     212,     0,     0,     0,   213,     0,   214,   215,   216,   217,
       0,     0,     0,   218,     0,     0,   219,   220,   221,     0,
       0,     0,   222,     0,   223,   224,     0,   225,   226,   227,
       0,     0,   228,   229,     0,   230,   231,   232,   233,   234,
     235,     0,     0,   236,   237,   238,     0,     0,   239,   240,
       0,   241,   242,   243,     0,     0,   244,     0,     0,     0,
     245,     0,   246,     0,   247,     0,   248,   249,   250,   251,
     252,   253,     0,   254,     0,     0,     0,   255,   256,   257,
       0,   258,     0,     0,   259,   260,     0,     0,     0,   261,
     262,   263,   264,     0,     0,   265,   266,   267,     0,   268,
       0,   269,     0,     0,     0,     0,   270,   271,     0,     0,
       0,   272,     0,   273,   274,     0,   275,   276,     0,     0,
       0,   277,     0,     0,   278,   279,   280,     0,     0,   281,
       0,     0,   282,   283,   621,     0,     0,     0,     0,   284,
     285,     0,   286,     0,   287,     0,   288,   289,     0,     0,
       0,     0,     0,     0,     0,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
       0,   305,   306,   307,     0,   308,   309,   310,   311,     0,
     312,   313,     0,     0,     0,     0,   314,   315,   316,   317,
     318,   319,     0,     0,   320,   321,     0,   322,     0,   323,
       0,   324,   325,   326,   327,   328,   329,   330,   331,   332,
       0,     0,   333,   334,     0,     0,   335,   336,   337,   338,
       0,     0,     0,   339,   340,     0,     0,     0,     0,   341,
     342,   343,     0,   344,   345,   346,   347,     0,   348,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   349,   350,
     351,     0,     0,   352,     0,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,     0,     0,   365,
     366,   367,     0,   368,     0,   369,   370,   371,   372,   373,
       0,   374,   375,   376,     0,     0,   377,     0,     0,     0,
     378,   379,   380,   381,   382,     0,     0,   383,   384,   385,
     386,   387,     0,   388,   389,     0,   390,   391,   392,     0,
       0,   393,     0,   394,     0,   395,   396,     0,   397,   398,
       0,     0,     0,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,     0,   409,   410,     0,     0,     0,   411,
     412,   413,   414,     0,     0,     0,   415,     0,     0,     0,
     416,     0,   417,   418,   419,   420,   421,     0,   422,   423,
     424,   425,   426,   427,     0,     0,     0,     0,     0,     0,
     428,   429,     0,   430,     0,     0,   431,     0,     0,   432,
     433,   434,     0,     0,   435,   436,     0,   437,   438,   439,
     440,   441,   442,     0,     0,   443,   444,   445,   446,     0,
     447,   448,     0,   449,     0,   450,   451,   452,   453,     0,
     136,   454,   455,     0,   456,   457,   458,   459,     0,     0,
       0,     0,     0,   460,   461,   462,     0,     0,     0,   463,
     464,   465,   466,     0,   467,   468,     0,   469,   470,     0,
     471,   472,     0,     0,   473,     0,     0,   474,     0,   475,
       0,   476,   477,   478,     0,     0,     0,     0,     0,     0,
     479,     0,     0,   480,     0,     0,     0,   481,   482,   483,
     484,   485,   486,     0,     0,     0,     0,     0,     0,   487,
     488,     0,   489,   490,   491,     0,   139,   492,   140,   141,
     142,   143,   144,     0,     0,   145,     0,     0,     0,   146,
       0,     0,   147,     0,   148,   149,   150,   151,   152,   153,
     154,     0,   155,     0,     0,  1386,   156,     0,     0,     0,
     157,     0,     0,   158,   159,   160,     0,   161,     0,   162,
     163,     0,     0,   164,     0,     0,   165,   166,     0,   167,
     168,     0,   169,   170,     0,   171,   172,   173,   174,   175,
     176,   177,     0,   178,   179,   180,   181,   182,   183,   184,
     185,     0,   186,   187,   188,   189,   190,   191,   192,   193,
       0,   194,   195,     0,   196,   197,   198,   199,   200,     0,
     201,     0,     0,   202,     0,     0,   203,     0,     0,     0,
     204,     0,     0,     0,   205,   206,   207,     0,     0,   208,
       0,     0,     0,     0,   209,   210,     0,     0,     0,     0,
     211,     0,   212,     0,     0,     0,   213,     0,   214,   215,
     216,   217,     0,     0,     0,   218,     0,     0,   219,   220,
     221,     0,     0,     0,   222,     0,   223,   224,     0,   225,
     226,   227,     0,     0,   228,   229,     0,   230,   231,   232,
     233,   234,   235,     0,     0,   236,   237,   238,     0,     0,
     239,   240,     0,   241,   242,   243,     0,     0,   244,     0,
       0,     0,   245,     0,   246,     0,   247,     0,   248,   249,
     250,   251,   252,   253,     0,   254,     0,     0,     0,   255,
     256,   257,     0,   258,     0,     0,   259,   260,     0,     0,
       0,   261,   262,   263,   264,     0,     0,   265,   266,   267,
       0,   268,     0,   269,     0,     0,     0,     0,   270,   271,
       0,     0,     0,   272,     0,   273,   274,     0,   275,   276,
       0,     0,     0,   277,     0,     0,   278,   279,   280,     0,
       0,   281,     0,     0,   282,   283,   621,     0,     0,     0,
       0,   284,   285,     0,   286,     0,   287,     0,   288,   289,
       0,     0,     0,     0,     0,     0,     0,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,     0,   305,   306,   307,     0,   308,   309,   310,
     311,     0,   312,   313,     0,     0,     0,     0,   314,   315,
     316,   317,   318,   319,     0,     0,   320,   321,     0,   322,
       0,   323,     0,   324,   325,   326,   327,   328,   329,   330,
     331,   332,     0,     0,   333,   334,     0,     0,   335,   336,
     337,   338,     0,     0,     0,   339,   340,     0,     0,     0,
       0,   341,   342,   343,     0,   344,   345,   346,   347,     0,
     348,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     349,   350,   351,     0,     0,   352,     0,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,     0,
       0,   365,   366,   367,     0,   368,     0,   369,   370,   371,
     372,   373,     0,   374,   375,   376,     0,     0,   377,     0,
       0,     0,   378,   379,   380,   381,   382,     0,     0,   383,
     384,   385,   386,   387,     0,   388,   389,     0,   390,   391,
     392,     0,     0,   393,     0,   394,     0,   395,   396,     0,
     397,   398,     0,     0,     0,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,     0,   409,   410,     0,     0,
       0,   411,   412,   413,   414,     0,     0,     0,   415,     0,
       0,     0,   416,     0,   417,   418,   419,   420,   421,     0,
     422,   423,   424,   425,   426,   427,     0,     0,     0,     0,
       0,     0,   428,   429,     0,   430,     0,     0,   431,     0,
       0,   432,   433,   434,     0,     0,   435,   436,     0,   437,
     438,   439,   440,   441,   442,     0,     0,   443,   444,   445,
     446,     0,   447,   448,     0,   449,     0,   450,   451,   452,
     453,     0,   136,   454,   455,     0,   456,   457,   458,   459,
       0,     0,     0,     0,     0,   460,   461,   462,     0,     0,
       0,   463,   464,   465,   466,     0,   467,   468,     0,   469,
     470,     0,   471,   472,     0,     0,   473,     0,     0,   474,
       0,   475,     0,   476,   477,   478,     0,     0,     0,     0,
       0,     0,   479,     0,     0,   480,     0,     0,     0,   481,
     482,   483,   484,   485,   486,     0,     0,     0,     0,     0,
       0,   487,   488,     0,   489,   490,   491,     0,   139,   492,
     140,   141,   142,   143,   144,     0,     0,   145,     0,     0,
       0,   146,     0,     0,   147,     0,   148,   149,   150,   151,
     152,   153,   154,     0,   155,     0,     0,     0,   156,     0,
       0,     0,   157,     0,     0,   158,   159,   160,     0,   161,
       0,   162,   163,     0,     0,   164,     0,     0,   165,   166,
       0,   167,   168,     0,   169,   170,     0,   171,   172,   173,
     174,   175,   176,   177,     0,   178,   179,   180,   181,   182,
     183,   184,   185,     0,   186,   187,   188,   189,   190,   191,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   199,
     200,     0,   201,     0,     0,   202,     0,     0,   203,     0,
       0,     0,   204,     0,     0,     0,   205,   206,   207,     0,
       0,   208,     0,     0,     0,     0,   209,   210,     0,     0,
       0,     0,   211,     0,   212,     0,     0,     0,   213,     0,
     214,   215,   216,   217,     0,     0,     0,   218,     0,     0,
     219,   220,   221,     0,     0,     0,   222,     0,   223,   224,
       0,   225,   226,   227,     0,     0,   228,   229,     0,   230,
     231,   232,   233,   234,   235,     0,     0,   236,   237,   238,
       0,     0,   239,   240,     0,   241,   242,   243,     0,     0,
     244,     0,     0,     0,   245,     0,   246,     0,   247,     0,
     248,   249,   250,   251,   252,   253,     0,   254,     0,     0,
       0,   255,   256,   257,     0,   258,     0,     0,   259,   260,
       0,     0,     0,   261,   262,   263,   264,     0,     0,   265,
     266,   267,     0,   268,     0,   269,     0,     0,     0,     0,
     270,   271,     0,     0,     0,   272,     0,   273,   274,     0,
     275,   276,     0,     0,     0,   277,     0,     0,   278,   279,
     280,     0,     0,   281,     0,     0,   282,   283,   621,     0,
       0,     0,     0,   284,   285,     0,   286,     0,   287,     0,
     288,   289,     0,     0,     0,     0,     0,     0,     0,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,     0,   305,   306,   307,     0,   308,
     309,   310,   311,     0,   312,   313,     0,     0,     0,     0,
     314,   315,   316,   317,   318,   319,     0,     0,   320,   321,
       0,   322,     0,   323,     0,   324,   325,   326,   327,   328,
     329,   330,   331,   332,     0,     0,   333,   334,     0,     0,
     335,   336,   337,   338,     0,     0,     0,   339,   340,     0,
       0,     0,     0,   341,   342,   343,     0,   344,   345,   346,
     347,     0,   348,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   349,   350,   351,     0,     0,   352,     0,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,     0,     0,   365,   366,   367,     0,   368,     0,   369,
     370,   371,   372,   373,     0,   374,   375,   376,     0,     0,
     377,     0,     0,     0,   378,   379,   380,   381,   382,     0,
       0,   383,   384,   385,   386,   387,     0,   388,   389,     0,
     390,   391,   392,     0,     0,   393,     0,   394,     0,   395,
     396,     0,   397,   398,     0,     0,     0,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,     0,   409,   410,
       0,     0,     0,   411,   412,   413,   414,     0,     0,     0,
     415,     0,     0,     0,   416,     0,   417,   418,   419,   420,
     421,     0,   422,   423,   424,   425,   426,   427,     0,     0,
       0,     0,     0,     0,   428,   429,     0,   430,     0,     0,
     431,     0,     0,   432,   433,   434,     0,     0,   435,   436,
       0,   437,   438,   439,   440,   441,   442,     0,     0,   443,
     444,   445,   446,     0,   447,   448,     0,   449,     0,   450,
     451,   452,   453,     0,   136,   454,   455,     0,   456,   457,
     458,   459,     0,     0,     0,     0,     0,   460,   461,   462,
       0,     0,     0,   463,   464,   465,   466,     0,   467,   468,
       0,   469,   470,     0,   471,   472,     0,     0,   473,     0,
       0,   474,     0,   475,     0,   476,   477,   478,     0,     0,
       0,     0,     0,     0,   479,     0,     0,   480,     0,     0,
       0,   481,   482,   483,   484,   485,   486,     0,     0,     0,
       0,     0,     0,   487,   488,     0,   489,   490,   491,     0,
     139,   492,   140,   141,   142,   143,   144,     0,     0,   145,
       0,     0,     0,   146,  2839,     0,   147,     0,   148,   149,
     150,   151,   152,   153,   154,     0,   155,     0,     0,     0,
     156,     0,     0,     0,   157,     0,     0,   158,   159,   160,
       0,   161,     0,   162,   163,     0,     0,   164,     0,     0,
     165,   166,     0,   167,   168,     0,   169,   170,     0,   171,
     172,   173,   174,   175,   176,   177,     0,   178,   179,   180,
     181,   182,   183,   184,   185,     0,   186,   187,   188,   189,
     190,   191,   192,   193,     0,   194,   195,     0,   196,   197,
     198,   199,   200,     0,   201,     0,     0,   202,     0,     0,
     203,     0,     0,     0,   204,     0,     0,     0,   205,   206,
     207,     0,     0,   208,     0,     0,     0,     0,   209,   210,
       0,     0,     0,     0,   211,     0,   212,     0,     0,     0,
     213,     0,   214,   215,   216,   217,     0,     0,     0,   218,
       0,     0,   219,   220,   221,     0,     0,     0,   222,     0,
     223,   224,     0,   225,   226,   227,     0,     0,   228,   229,
       0,   230,   231,   232,   233,   234,   235,     0,     0,   236,
     237,   238,     0,     0,   239,   240,     0,   241,   242,   243,
       0,     0,   244,     0,     0,     0,   245,     0,   246,     0,
     247,     0,   248,   249,   250,   251,   252,   253,     0,   254,
       0,     0,     0,   255,   256,   257,     0,   258,     0,     0,
     259,   260,     0,     0,     0,   261,   262,   263,   264,     0,
       0,   265,   266,   267,     0,   268,     0,   269,     0,     0,
       0,     0,   270,   271,     0,     0,     0,   272,     0,   273,
     274,     0,   275,   276,     0,     0,     0,   277,     0,     0,
     278,   279,   280,     0,     0,   281,     0,     0,   282,   283,
       0,     0,     0,     0,     0,   284,   285,     0,   286,     0,
     287,     0,   288,   289,     0,     0,     0,     0,     0,     0,
       0,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,     0,   305,   306,   307,
       0,   308,   309,   310,   311,     0,   312,   313,     0,     0,
       0,     0,   314,   315,   316,   317,   318,   319,     0,     0,
     320,   321,     0,   322,     0,   323,     0,   324,   325,   326,
     327,   328,   329,   330,   331,   332,     0,     0,   333,   334,
       0,     0,   335,   336,   337,   338,     0,     0,     0,   339,
     340,     0,     0,     0,     0,   341,   342,   343,     0,   344,
     345,   346,   347,     0,   348,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   349,   350,   351,     0,     0,   352,
       0,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,     0,     0,   365,   366,   367,     0,   368,
       0,   369,   370,   371,   372,   373,     0,   374,   375,   376,
       0,     0,   377,     0,     0,     0,   378,   379,   380,   381,
     382,     0,     0,   383,   384,   385,   386,   387,     0,   388,
     389,     0,   390,   391,   392,     0,     0,   393,     0,   394,
       0,   395,   396,     0,   397,   398,     0,     0,     0,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,     0,
     409,   410,     0,     0,     0,   411,   412,   413,   414,     0,
       0,     0,   415,     0,     0,     0,   416,     0,   417,   418,
     419,   420,   421,     0,   422,   423,   424,   425,   426,   427,
       0,     0,     0,     0,     0,     0,   428,   429,     0,   430,
       0,     0,   431,     0,     0,   432,   433,   434,     0,     0,
     435,   436,     0,   437,   438,   439,   440,   441,   442,     0,
       0,   443,   444,   445,   446,     0,   447,   448,     0,   449,
       0,   450,   451,   452,   453,     0,   136,   454,   455,     0,
     456,   457,   458,   459,     0,     0,     0,     0,     0,   460,
     461,   462,     0,     0,     0,   463,   464,   465,   466,     0,
     467,   468,     0,   469,   470,     0,   471,   472,     0,     0,
     473,     0,     0,   474,     0,   475,     0,   476,   477,   478,
       0,     0,     0,     0,     0,     0,   479,     0,     0,   480,
       0,     0,     0,   481,   482,   483,   484,   485,   486,     0,
       0,     0,     0,     0,     0,   487,   488,     0,   489,   490,
     491,     0,   139,   492,   140,   141,   142,   143,   144,     0,
       0,   145,     0,     0,     0,   146,     0,     0,   147,     0,
     148,   149,   150,   151,   152,   153,   154,     0,   155,     0,
       0,     0,   156,     0,     0,     0,   157,     0,     0,   158,
     159,   160,     0,   161,     0,   162,   163,     0,     0,   164,
       0,     0,   165,   166,     0,   167,   168,     0,   169,   170,
       0,   171,   172,   173,   174,   175,   176,   177,     0,   178,
     179,   180,   181,   182,   183,   184,   185,     0,   186,   187,
     188,   189,   190,   191,   192,   193,     0,   194,   195,     0,
     196,   197,   198,   199,   200,  4388,   201,     0,     0,   202,
       0,     0,   203,     0,     0,     0,   204,     0,     0,     0,
     205,   206,   207,     0,     0,   208,     0,     0,     0,     0,
     209,   210,     0,     0,     0,     0,   211,     0,   212,     0,
       0,     0,   213,     0,   214,   215,   216,   217,     0,     0,
       0,   218,     0,     0,   219,   220,   221,     0,     0,     0,
     222,     0,   223,   224,     0,   225,   226,   227,     0,     0,
     228,   229,     0,   230,   231,   232,   233,   234,   235,     0,
    4389,   236,   237,   238,     0,     0,   239,   240,     0,   241,
     242,   243,     0,     0,   244,     0,     0,     0,   245,     0,
     246,     0,   247,     0,   248,   249,   250,   251,   252,   253,
       0,   254,     0,     0,     0,   255,   256,   257,     0,   258,
       0,     0,   259,   260,     0,     0,     0,   261,   262,   263,
     264,     0,     0,   265,   266,   267,     0,   268,     0,   269,
       0,     0,     0,     0,   270,   271,     0,     0,     0,   272,
       0,   273,   274,     0,   275,   276,     0,     0,     0,   277,
       0,     0,   278,   279,   280,     0,     0,   281,     0,     0,
     282,   283,     0,     0,     0,     0,     0,   284,   285,     0,
     286,     0,   287,     0,   288,   289,     0,     0,     0,     0,
       0,     0,     0,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,     0,   305,
     306,   307,     0,   308,   309,   310,   311,     0,   312,   313,
       0,     0,     0,     0,   314,   315,   316,   317,   318,   319,
       0,     0,   320,   321,     0,   322,     0,   323,     0,   324,
     325,   326,   327,   328,   329,   330,   331,   332,     0,     0,
     333,   334,     0,     0,   335,   336,   337,   338,     0,     0,
       0,   339,   340,     0,     0,     0,     0,   341,   342,   343,
       0,   344,   345,   346,   347,     0,   348,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   349,   350,   351,     0,
       0,   352,     0,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,     0,     0,   365,   366,   367,
       0,   368,     0,   369,   370,   371,   372,   373,     0,   374,
     375,   376,     0,     0,   377,     0,     0,     0,   378,   379,
     380,   381,   382,     0,     0,   383,   384,   385,   386,   387,
       0,   388,   389,     0,   390,   391,   392,     0,     0,   393,
       0,   394,     0,   395,   396,     0,   397,   398,     0,     0,
       0,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,     0,   409,   410,     0,     0,     0,   411,   412,   413,
     414,     0,     0,     0,   415,     0,     0,     0,   416,     0,
     417,   418,   419,   420,   421,     0,   422,   423,   424,   425,
     426,   427,     0,     0,     0,     0,     0,     0,   428,   429,
       0,   430,     0,     0,   431,     0,     0,   432,   433,   434,
       0,     0,   435,   436,     0,   437,   438,   439,   440,   441,
     442,     0,     0,   443,   444,   445,   446,     0,   447,   448,
       0,   449,     0,   450,   451,   452,   453,     0,     0,   454,
     455,     0,   456,   457,   458,   459,     0,     0,     0,     0,
       0,   460,   461,   462,     0,     0,     0,   463,   464,   465,
     466,     0,   467,   468,     0,   469,   470,     0,   471,   472,
       0,     0,   473,     0,     0,   474,     0,   475,     0,   476,
     477,   478,     0,     0,     0,     0,     0,     0,   479,     0,
       0,   480,     0,     0,     0,   481,   482,   483,   484,   485,
     486,     0,     0,     0,     0,     0,     0,   487,   488,     0,
     489,   490,   491,     0,   139,   492,   140,   141,   142,   143,
     144,     0,     0,   145,     0,     0,     0,   146,     0,     0,
     147,     0,   148,   149,   150,   151,   152,   153,   154,     0,
     155,     0,     0,     0,   156,     0,     0,     0,   157,     0,
       0,   158,   159,   160,     0,   161,     0,   162,   163,     0,
       0,   164,     0,     0,   165,   166,     0,   167,   168,     0,
     169,   170,     0,   171,   172,   173,   174,   175,   176,   177,
       0,   178,   179,   180,   181,   182,   183,   184,   185,     0,
     186,   187,   188,   189,   190,   191,   192,   193,     0,   194,
     195,     0,   196,   197,   198,   199,   200,     0,   201,     0,
       0,   202,     0,     0,   203,     0,     0,     0,   204,     0,
       0,     0,   205,   206,   207,     0,     0,   208,     0,     0,
       0,     0,   209,   210,     0,     0,     0,     0,   211,     0,
     212,     0,     0,     0,   213,     0,   214,   215,   216,   217,
       0,     0,     0,   218,     0,     0,   219,   220,   221,     0,
       0,     0,   222,     0,   223,   224,     0,   225,   226,   227,
       0,     0,   228,   229,     0,   230,   231,   232,   233,   234,
     235,     0,     0,   236,   237,   238,     0,     0,   239,   240,
       0,   241,   242,   243,     0,     0,   244,     0,     0,     0,
     245,     0,   246,     0,   247,     0,   248,   249,   250,   251,
     252,   253,     0,   254,     0,     0,     0,   255,   256,   257,
       0,   258,     0,     0,   259,   260,     0,     0,     0,   261,
     262,   263,   264,     0,     0,   265,   266,   267,     0,   268,
       0,   269,     0,     0,     0,     0,   270,   271,     0,     0,
       0,   272,     0,   273,   274,     0,   275,   276,     0,     0,
       0,   277,     0,     0,   278,   279,   280,     0,     0,   281,
       0,     0,   282,   283,     0,     0,     0,     0,     0,   284,
     285,     0,   286,     0,   287,     0,   288,   289,     0,     0,
       0,     0,     0,     0,     0,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
       0,   305,   306,   307,     0,   308,   309,   310,   311,     0,
     312,   313,     0,     0,     0,     0,   314,   315,   316,   317,
     318,   319,     0,     0,   320,   321,     0,   322,     0,   323,
       0,   324,   325,   326,   327,   328,   329,   330,   331,   332,
       0,     0,   333,   334,     0,     0,   335,   336,   337,   338,
       0,     0,     0,   339,   340,     0,     0,     0,     0,   341,
     342,   343,     0,   344,   345,   346,   347,     0,   348,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   349,   350,
     351,     0,     0,   352,     0,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,     0,     0,   365,
     366,   367,     0,   368,     0,   369,   370,   371,   372,   373,
       0,   374,   375,   376,     0,     0,   377,     0,     0,     0,
     378,   379,   380,   381,   382,     0,     0,   383,   384,   385,
     386,   387,     0,   388,   389,     0,   390,   391,   392,     0,
       0,   393,     0,   394,     0,   395,   396,     0,   397,   398,
       0,     0,     0,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,     0,   409,   410,     0,     0,     0,   411,
     412,   413,   414,     0,     0,     0,   415,     0,     0,     0,
     416,     0,   417,   418,   419,   420,   421,     0,   422,   423,
     424,   425,   426,   427,     0,     0,     0,   565,     0,     0,
     428,   429,     0,   430,     0,     0,   431,     0,     0,   432,
     433,   434,     0,     0,   435,   436,     0,   437,   438,   439,
     440,   441,   442,     0,     0,   443,   444,   445,   446,     0,
     447,   448,     0,   449,     0,   450,   451,   452,   453,     0,
       0,   454,   455,     0,   456,   457,   458,   459,     0,     0,
       0,     0,     0,   460,   461,   462,     0,     0,     0,   463,
     464,   465,   466,     0,   467,   468,     0,   469,   470,     0,
     471,   472,     0,     0,   473,     0,     0,   474,     0,   475,
       0,   476,   477,   478,     0,     0,     0,     0,     0,     0,
     479,     0,     0,   480,     0,     0,     0,   481,   482,   483,
     484,   485,   486,     0,     0,     0,     0,     0,     0,   487,
     488,     0,   489,   490,   491,     0,   139,   492,   140,   141,
     142,   143,   144,     0,     0,   145,     0,     0,     0,   146,
       0,     0,   147,     0,   148,   149,   150,   151,   152,   153,
     154,     0,   155,     0,     0,     0,   156,     0,     0,     0,
     157,     0,     0,   158,   159,   160,     0,   161,     0,   162,
     163,     0,     0,   164,     0,     0,   165,   166,     0,   167,
     168,     0,   169,   170,     0,   171,   172,   173,   174,   175,
     176,   177,     0,   178,   179,   180,   181,   182,   183,   184,
     185,     0,   186,   187,   188,   189,   190,   191,   192,   193,
       0,   194,   195,     0,   196,   197,   198,   199,   200,     0,
     201,     0,     0,   202,     0,     0,   203,     0,     0,     0,
     204,     0,     0,     0,   205,   206,   207,     0,     0,   208,
       0,     0,     0,     0,   209,   210,     0,     0,     0,     0,
     211,     0,   212,     0,     0,     0,   213,     0,   214,   215,
     216,   217,     0,     0,     0,   218,     0,     0,   219,   220,
     221,     0,     0,     0,   222,     0,   223,   224,     0,   225,
     226,   227,     0,     0,   228,   229,     0,   230,   231,   232,
     233,   234,   235,     0,     0,   236,   237,   238,     0,     0,
     239,   240,     0,   241,   242,   243,     0,     0,   244,     0,
       0,     0,   245,  1092,   246,     0,   247,     0,   248,   249,
     250,   251,   252,   253,     0,   254,     0,     0,     0,   255,
     256,   257,     0,   258,     0,     0,   259,   260,     0,     0,
       0,   261,   262,   263,   264,     0,     0,   265,   266,   267,
       0,   268,     0,   269,     0,     0,     0,     0,   270,   271,
       0,     0,     0,   272,     0,   273,   274,     0,   275,   276,
       0,     0,     0,   277,     0,     0,   278,   279,   280,     0,
       0,   281,     0,     0,   282,   283,     0,     0,     0,     0,
       0,   284,   285,     0,   286,     0,   287,     0,   288,   289,
       0,     0,     0,     0,     0,     0,     0,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,     0,   305,   306,   307,     0,   308,   309,   310,
     311,     0,   312,   313,     0,     0,     0,     0,   314,   315,
     316,   317,   318,   319,     0,     0,   320,   321,     0,   322,
       0,   323,     0,   324,   325,   326,   327,   328,   329,   330,
     331,   332,     0,     0,   333,   334,     0,     0,   335,   336,
     337,   338,     0,     0,     0,   339,   340,     0,     0,     0,
       0,   341,   342,   343,     0,   344,   345,   346,   347,     0,
     348,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     349,   350,   351,     0,     0,   352,     0,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,     0,
       0,   365,   366,   367,     0,   368,     0,   369,   370,   371,
     372,   373,     0,   374,   375,   376,     0,     0,   377,     0,
       0,     0,   378,   379,   380,   381,   382,     0,     0,   383,
     384,   385,   386,   387,     0,   388,   389,     0,   390,   391,
     392,     0,     0,   393,     0,   394,     0,   395,   396,     0,
     397,   398,     0,     0,     0,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,     0,   409,   410,     0,     0,
       0,   411,   412,   413,   414,     0,     0,     0,   415,     0,
       0,     0,   416,     0,   417,   418,   419,   420,   421,     0,
     422,   423,   424,   425,   426,   427,     0,     0,     0,     0,
       0,     0,   428,   429,     0,   430,     0,     0,   431,     0,
       0,   432,   433,   434,     0,     0,   435,   436,     0,   437,
     438,   439,   440,   441,   442,     0,     0,   443,   444,   445,
     446,     0,   447,   448,     0,   449,     0,   450,   451,   452,
     453,     0,     0,   454,   455,     0,   456,   457,   458,   459,
       0,     0,     0,     0,     0,   460,   461,   462,     0,     0,
       0,   463,   464,   465,   466,     0,   467,   468,     0,   469,
     470,     0,   471,   472,     0,     0,   473,     0,     0,   474,
       0,   475,     0,   476,   477,   478,     0,     0,     0,     0,
       0,     0,   479,     0,     0,   480,     0,     0,     0,   481,
     482,   483,   484,   485,   486,     0,     0,     0,     0,     0,
       0,   487,   488,     0,   489,   490,   491,     0,   139,   492,
     140,   141,   142,   143,   144,     0,     0,   145,     0,     0,
       0,   146,     0,     0,   147,     0,   148,   149,   150,   151,
     152,   153,   154,     0,   155,     0,     0,     0,   156,     0,
       0,     0,   157,     0,     0,   158,   159,   160,     0,   161,
       0,   162,   163,     0,     0,   164,     0,     0,   165,   166,
       0,   167,   168,     0,   169,   170,     0,   171,   172,   173,
     174,   175,   176,   177,     0,   178,   179,   180,   181,   182,
     183,   184,   185,     0,   186,   187,   188,   189,   190,   191,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   199,
     200,     0,   201,     0,     0,   202,     0,     0,   203,     0,
       0,     0,   204,     0,     0,     0,   205,   206,   207,     0,
       0,   208,     0,     0,     0,     0,   209,   210,     0,     0,
       0,   916,   211,     0,   212,     0,     0,     0,   213,     0,
     214,   215,   216,   217,     0,     0,     0,   218,     0,     0,
     219,   220,   221,     0,     0,     0,   222,     0,   223,   224,
       0,   225,   226,   227,     0,     0,   228,   229,     0,   230,
     231,   232,   233,   234,   235,     0,     0,   236,   237,   238,
       0,     0,   239,   240,     0,   241,   242,   243,     0,     0,
     244,     0,     0,     0,   245,     0,   246,     0,   247,     0,
     248,   249,   250,   251,   252,   253,     0,   254,     0,     0,
       0,   255,   256,   257,     0,   258,     0,     0,   259,   260,
       0,     0,     0,   261,   262,   263,   264,     0,     0,   265,
     266,   267,     0,   268,     0,   269,     0,     0,     0,     0,
     270,   271,     0,     0,     0,   272,     0,   273,   274,     0,
     275,   276,     0,     0,     0,   277,     0,     0,   278,   279,
     280,     0,     0,   281,     0,     0,   282,   283,     0,     0,
       0,     0,     0,   284,   285,     0,   286,     0,   287,     0,
     288,   289,     0,     0,     0,     0,     0,     0,     0,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,     0,   305,   306,   307,     0,   308,
     309,   310,   311,     0,   312,   313,     0,     0,     0,     0,
     314,   315,   316,   317,   318,   319,     0,     0,   320,   321,
       0,   322,     0,   323,     0,   324,   325,   326,   327,   328,
     329,   330,   331,   332,     0,     0,   333,   334,     0,     0,
     335,   336,   337,   338,     0,     0,     0,   339,   340,     0,
       0,     0,     0,   341,   342,   343,     0,   344,   345,   346,
     347,     0,   348,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   349,   350,   351,     0,     0,   352,     0,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,     0,     0,   365,   366,   367,     0,   368,     0,   369,
     370,   371,   372,   373,     0,   374,   375,   376,     0,     0,
     377,     0,     0,     0,   378,   379,   380,   381,   382,     0,
       0,   383,   384,   385,   386,   387,     0,   388,   389,     0,
     390,   391,   392,     0,     0,   393,     0,   394,     0,   395,
     396,     0,   397,   398,     0,     0,     0,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,     0,   409,   410,
       0,     0,     0,   411,   412,   413,   414,     0,     0,     0,
     415,     0,     0,     0,   416,     0,   417,   418,   419,   420,
     421,     0,   422,   423,   424,   425,   426,   427,     0,     0,
       0,     0,     0,     0,   428,   429,     0,   430,     0,     0,
     431,     0,     0,   432,   433,   434,     0,     0,   435,   436,
       0,   437,   438,   439,   440,   441,   442,     0,     0,   443,
     444,   445,   446,     0,   447,   448,     0,   449,     0,   450,
     451,   452,   453,     0,     0,   454,   455,     0,   456,   457,
     458,   459,     0,     0,     0,     0,     0,  1879,   461,   462,
       0,     0,     0,   463,   464,   465,   466,     0,   467,   468,
       0,   469,   470,     0,   471,   472,     0,     0,   473,     0,
       0,   474,     0,   475,     0,   476,   477,   478,     0,     0,
       0,     0,     0,     0,   479,     0,     0,   480,     0,     0,
       0,   481,   482,   483,   484,   485,   486,     0,     0,     0,
       0,     0,     0,   487,   488,     0,   489,   490,   491,     0,
     139,   492,   140,   141,   142,   143,   144,     0,     0,   145,
       0,     0,     0,   146,     0,     0,   147,     0,   148,   149,
     150,   151,   152,   153,   154,     0,   155,     0,     0,     0,
     156,     0,     0,     0,   157,     0,     0,   158,   159,   160,
       0,   161,     0,   162,   163,     0,     0,   164,     0,     0,
     165,   166,     0,   167,   168,     0,   169,   170,     0,   171,
     172,   173,   174,   175,   176,   177,     0,   178,   179,   180,
     181,   182,   183,   184,   185,     0,   186,   187,   188,   189,
     190,   191,   192,   193,     0,   194,   195,     0,   196,   197,
     198,   199,   200,     0,   201,     0,     0,   202,     0,     0,
     203,     0,     0,     0,   204,     0,     0,     0,   205,   206,
     207,     0,     0,   208,     0,     0,     0,     0,   209,   210,
       0,     0,     0,  2081,   211,     0,   212,     0,     0,     0,
     213,     0,   214,   215,   216,   217,     0,     0,     0,   218,
       0,     0,   219,   220,   221,     0,     0,     0,   222,     0,
     223,   224,     0,   225,   226,   227,     0,     0,   228,   229,
       0,   230,   231,   232,   233,   234,   235,     0,     0,   236,
     237,   238,     0,     0,   239,   240,     0,   241,   242,   243,
       0,     0,   244,     0,     0,     0,   245,     0,   246,     0,
     247,     0,   248,   249,   250,   251,   252,   253,     0,   254,
       0,     0,     0,   255,   256,   257,     0,   258,     0,     0,
     259,   260,     0,     0,     0,   261,   262,   263,   264,     0,
       0,   265,   266,   267,     0,   268,     0,   269,     0,     0,
       0,     0,   270,   271,     0,     0,     0,   272,     0,   273,
     274,     0,   275,   276,     0,     0,     0,   277,     0,     0,
     278,   279,   280,     0,     0,   281,     0,     0,   282,   283,
       0,     0,     0,     0,     0,   284,   285,     0,   286,     0,
     287,     0,   288,   289,     0,     0,     0,     0,     0,     0,
       0,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,     0,   305,   306,   307,
       0,   308,   309,   310,   311,     0,   312,   313,     0,     0,
       0,     0,   314,   315,   316,   317,   318,   319,     0,     0,
     320,   321,     0,   322,     0,   323,     0,   324,   325,   326,
     327,   328,   329,   330,   331,   332,     0,     0,   333,   334,
       0,     0,   335,   336,   337,   338,     0,     0,     0,   339,
     340,     0,     0,     0,     0,   341,   342,   343,     0,   344,
     345,   346,   347,     0,   348,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   349,   350,   351,     0,     0,   352,
       0,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,     0,     0,   365,   366,   367,     0,   368,
       0,   369,   370,   371,   372,   373,     0,   374,   375,   376,
       0,     0,   377,     0,     0,     0,   378,   379,   380,   381,
     382,     0,     0,   383,   384,   385,   386,   387,     0,   388,
     389,     0,   390,   391,   392,     0,     0,   393,     0,   394,
       0,   395,   396,     0,   397,   398,     0,     0,     0,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,     0,
     409,   410,     0,     0,     0,   411,   412,   413,   414,     0,
       0,     0,   415,     0,     0,     0,   416,     0,   417,   418,
     419,   420,   421,     0,   422,   423,   424,   425,   426,   427,
       0,     0,     0,     0,     0,     0,   428,   429,     0,   430,
       0,     0,   431,     0,     0,   432,   433,   434,     0,     0,
     435,   436,     0,   437,   438,   439,   440,   441,   442,     0,
       0,   443,   444,   445,   446,     0,   447,   448,     0,   449,
       0,   450,   451,   452,   453,     0,     0,   454,   455,     0,
     456,   457,   458,   459,     0,     0,     0,     0,     0,   460,
     461,   462,     0,     0,     0,   463,   464,   465,   466,     0,
     467,   468,     0,   469,   470,     0,   471,   472,     0,     0,
     473,     0,     0,   474,     0,   475,     0,   476,   477,   478,
       0,     0,     0,     0,     0,     0,   479,     0,     0,   480,
       0,     0,     0,   481,   482,   483,   484,   485,   486,     0,
       0,     0,     0,     0,     0,   487,   488,     0,   489,   490,
     491,     0,   139,   492,   140,   141,   142,   143,   144,     0,
       0,   145,     0,     0,     0,   146,     0,     0,   147,     0,
     148,   149,   150,   151,   152,   153,   154,     0,   155,     0,
       0,     0,   156,     0,     0,     0,   157,     0,     0,   158,
     159,   160,     0,   161,     0,   162,   163,     0,     0,   164,
       0,     0,   165,   166,     0,   167,   168,     0,   169,   170,
       0,   171,   172,   173,   174,   175,   176,   177,     0,   178,
     179,   180,   181,   182,   183,   184,   185,     0,   186,   187,
     188,   189,   190,   191,   192,   193,     0,   194,   195,     0,
     196,   197,   198,   199,   200,     0,   201,     0,     0,   202,
       0,     0,   203,     0,     0,     0,   204,     0,     0,     0,
     205,   206,   207,     0,     0,   208,     0,     0,     0,     0,
     209,   210,     0,     0,     0,   916,   211,     0,   212,     0,
       0,     0,   213,     0,   214,   215,   216,   217,     0,     0,
       0,   218,     0,     0,   219,   220,   221,     0,     0,     0,
     222,     0,   223,   224,     0,   225,   226,   227,     0,     0,
     228,   229,     0,   230,   231,   232,   233,   234,   235,     0,
       0,   236,   237,   238,     0,     0,   239,   240,     0,   241,
     242,   243,     0,     0,   244,     0,     0,     0,   245,     0,
     246,     0,   247,     0,   248,   249,   250,   251,   252,   253,
       0,   254,     0,     0,     0,   255,   256,   257,     0,   258,
       0,     0,   259,   260,     0,     0,     0,   261,   262,   263,
     264,     0,     0,   265,   266,   267,     0,   268,     0,   269,
       0,     0,     0,     0,   270,   271,     0,     0,     0,   272,
       0,   273,   274,     0,   275,   276,     0,     0,     0,   277,
       0,     0,   278,   279,   280,     0,     0,   281,     0,     0,
     282,   283,     0,     0,     0,     0,     0,   284,   285,     0,
     286,     0,   287,     0,   288,   289,     0,     0,     0,     0,
       0,     0,     0,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,     0,   305,
     306,   307,     0,   308,   309,   310,   311,     0,   312,   313,
       0,     0,     0,     0,   314,   315,   316,   317,   318,   319,
       0,     0,   320,   321,     0,   322,     0,   323,     0,   324,
     325,   326,   327,   328,   329,   330,   331,   332,     0,     0,
     333,   334,     0,     0,   335,   336,   337,   338,     0,     0,
       0,   339,   340,     0,     0,     0,     0,   341,   342,   343,
       0,   344,   345,   346,   347,     0,   348,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   349,   350,   351,     0,
       0,   352,     0,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,     0,     0,   365,   366,   367,
       0,   368,     0,   369,   370,   371,   372,   373,     0,   374,
     375,   376,     0,     0,   377,     0,     0,     0,   378,   379,
     380,   381,   382,     0,     0,   383,   384,   385,   386,   387,
       0,   388,   389,     0,   390,   391,   392,     0,     0,   393,
       0,   394,     0,   395,   396,     0,   397,   398,     0,     0,
       0,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,     0,   409,   410,     0,     0,     0,   411,   412,   413,
     414,     0,     0,     0,   415,     0,     0,     0,   416,     0,
     417,   418,   419,   420,   421,     0,   422,   423,   424,   425,
     426,   427,     0,     0,     0,     0,     0,     0,   428,   429,
       0,   430,     0,     0,   431,     0,     0,   432,   433,   434,
       0,     0,   435,   436,     0,   437,   438,   439,   440,   441,
     442,     0,     0,   443,   444,   445,   446,     0,   447,   448,
       0,   449,     0,   450,   451,   452,   453,     0,     0,   454,
     455,     0,   456,   457,   458,   459,     0,     0,     0,     0,
       0,   460,   461,   462,     0,     0,     0,   463,   464,   465,
     466,     0,   467,   468,     0,   469,   470,     0,   471,   472,
       0,     0,   473,     0,     0,   474,     0,   475,     0,   476,
     477,   478,     0,     0,     0,     0,     0,     0,   479,     0,
       0,   480,     0,     0,     0,   481,   482,   483,   484,   485,
     486,     0,     0,     0,     0,     0,     0,   487,   488,     0,
     489,   490,   491,     0,   139,   492,   140,   141,   142,   143,
     144,  2941,     0,   145,     0,     0,     0,   146,     0,     0,
     147,     0,   148,   149,   150,   151,   152,   153,   154,     0,
     155,     0,     0,     0,   156,     0,     0,     0,   157,     0,
       0,   158,   159,   160,     0,   161,     0,   162,   163,     0,
       0,   164,     0,     0,   165,   166,     0,   167,   168,     0,
     169,   170,     0,   171,   172,   173,   174,   175,   176,   177,
       0,   178,   179,   180,   181,   182,   183,   184,   185,     0,
     186,   187,   188,   189,   190,   191,   192,   193,     0,   194,
     195,     0,   196,   197,   198,   199,   200,     0,   201,     0,
       0,   202,     0,     0,   203,     0,     0,     0,   204,     0,
       0,     0,   205,   206,   207,     0,     0,   208,     0,     0,
       0,     0,   209,   210,     0,     0,     0,     0,   211,     0,
     212,     0,     0,     0,   213,     0,   214,   215,   216,   217,
       0,     0,     0,   218,     0,     0,   219,   220,   221,     0,
       0,     0,   222,     0,   223,   224,     0,   225,   226,   227,
       0,     0,   228,   229,     0,   230,   231,   232,   233,   234,
     235,     0,     0,   236,   237,   238,     0,     0,   239,   240,
       0,   241,   242,   243,     0,     0,   244,     0,     0,     0,
     245,     0,   246,     0,   247,     0,   248,   249,   250,   251,
     252,   253,     0,   254,     0,     0,     0,   255,   256,   257,
       0,   258,     0,     0,   259,   260,     0,     0,     0,   261,
     262,   263,   264,     0,     0,   265,   266,   267,     0,   268,
       0,   269,     0,     0,     0,     0,   270,   271,     0,     0,
       0,   272,     0,   273,   274,     0,   275,   276,     0,     0,
       0,   277,     0,     0,   278,   279,   280,     0,     0,   281,
       0,     0,   282,   283,     0,     0,     0,     0,     0,   284,
     285,     0,   286,     0,   287,     0,   288,   289,     0,     0,
       0,     0,     0,     0,     0,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
       0,   305,   306,   307,     0,   308,   309,   310,   311,     0,
     312,   313,     0,     0,     0,     0,   314,   315,   316,   317,
     318,   319,     0,     0,   320,   321,     0,   322,     0,   323,
       0,   324,   325,   326,   327,   328,   329,   330,   331,   332,
       0,     0,   333,   334,     0,     0,   335,   336,   337,   338,
       0,     0,     0,   339,   340,     0,     0,     0,     0,   341,
     342,   343,     0,   344,   345,   346,   347,     0,   348,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   349,   350,
     351,     0,     0,   352,     0,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,     0,     0,   365,
     366,   367,     0,   368,     0,   369,   370,   371,   372,   373,
       0,   374,   375,   376,     0,     0,   377,     0,     0,     0,
     378,   379,   380,   381,   382,     0,     0,   383,   384,   385,
     386,   387,     0,   388,   389,     0,   390,   391,   392,     0,
       0,   393,     0,   394,     0,   395,   396,     0,   397,   398,
       0,     0,     0,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,     0,   409,   410,     0,     0,     0,   411,
     412,   413,   414,     0,     0,     0,   415,     0,     0,     0,
     416,     0,   417,   418,   419,   420,   421,     0,   422,   423,
     424,   425,   426,   427,     0,     0,     0,     0,     0,     0,
     428,   429,     0,   430,     0,     0,   431,     0,     0,   432,
     433,   434,     0,     0,   435,   436,     0,   437,   438,   439,
     440,   441,   442,     0,     0,   443,   444,   445,   446,     0,
     447,   448,     0,   449,     0,   450,   451,   452,   453,     0,
       0,   454,   455,     0,   456,   457,   458,   459,     0,     0,
       0,     0,     0,   460,   461,   462,     0,     0,     0,   463,
     464,   465,   466,     0,   467,   468,     0,   469,   470,     0,
     471,   472,     0,     0,   473,     0,     0,   474,     0,   475,
       0,   476,   477,   478,     0,     0,     0,     0,     0,     0,
     479,     0,     0,   480,     0,     0,     0,   481,   482,   483,
     484,   485,   486,     0,     0,     0,     0,     0,     0,   487,
     488,     0,   489,   490,   491,     0,   139,   492,   140,   141,
     142,   143,   144,     0,     0,   145,     0,     0,     0,   146,
       0,     0,   147,     0,   148,   149,   150,   151,   152,   153,
     154,     0,   155,     0,     0,     0,   156,     0,     0,     0,
     157,     0,     0,   158,   159,   160,     0,   161,     0,   162,
     163,     0,     0,   164,     0,     0,   165,   166,     0,   167,
     168,     0,   169,   170,     0,   171,   172,   173,   174,   175,
     176,   177,     0,   178,   179,   180,   181,   182,   183,   184,
     185,     0,   186,   187,   188,   189,   190,   191,   192,   193,
       0,   194,   195,     0,   196,   197,   198,   199,   200,     0,
     201,     0,     0,   202,     0,     0,   203,     0,     0,     0,
     204,     0,     0,     0,   205,   206,   207,     0,     0,   208,
       0,     0,     0,     0,   209,   210,     0,     0,     0,     0,
     211,     0,   212,     0,     0,     0,   213,     0,   214,   215,
     216,   217,     0,     0,     0,   218,     0,     0,   219,   220,
     221,     0,     0,     0,   222,     0,   223,   224,     0,   225,
     226,   227,     0,     0,   228,   229,     0,   230,   231,   232,
     233,   234,   235,     0,     0,   236,   237,   238,     0,     0,
     239,   240,     0,   241,   242,   243,     0,     0,   244,     0,
       0,     0,   245,     0,   246,     0,   247,     0,   248,   249,
     250,   251,   252,   253,     0,   254,     0,     0,     0,   255,
     256,   257,     0,   258,     0,     0,   259,   260,     0,     0,
       0,   261,   262,   263,   264,     0,     0,   265,   266,   267,
       0,   268,     0,   269,     0,     0,     0,     0,   270,   271,
       0,     0,     0,   272,     0,   273,   274,     0,   275,   276,
       0,     0,     0,   277,     0,     0,   278,   279,   280,     0,
       0,   281,     0,     0,   282,   283,     0,     0,     0,     0,
       0,   284,   285,     0,   286,     0,   287,     0,   288,   289,
       0,     0,     0,     0,     0,     0,     0,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,     0,   305,   306,   307,     0,   308,   309,   310,
     311,     0,   312,   313,     0,     0,     0,     0,   314,   315,
     316,   317,   318,   319,     0,     0,   320,   321,     0,   322,
       0,   323,     0,   324,   325,   326,   327,   328,   329,   330,
     331,   332,     0,     0,   333,   334,     0,     0,   335,   336,
     337,   338,     0,     0,     0,   339,   340,     0,     0,     0,
       0,   341,   342,   343,     0,   344,   345,   346,   347,     0,
     348,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     349,   350,   351,     0,     0,   352,     0,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,     0,
       0,   365,   366,   367,  3033,   368,     0,   369,   370,   371,
     372,   373,     0,   374,   375,   376,     0,     0,   377,     0,
       0,     0,   378,   379,   380,   381,   382,     0,     0,   383,
     384,   385,   386,   387,     0,   388,   389,     0,   390,   391,
     392,     0,     0,   393,     0,   394,     0,   395,   396,     0,
     397,   398,     0,     0,     0,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,     0,   409,   410,     0,     0,
       0,   411,   412,   413,   414,     0,     0,     0,   415,     0,
       0,     0,   416,     0,   417,   418,   419,   420,   421,     0,
     422,   423,   424,   425,   426,   427,     0,     0,     0,     0,
       0,     0,   428,   429,     0,   430,     0,     0,   431,     0,
       0,   432,   433,   434,     0,     0,   435,   436,     0,   437,
     438,   439,   440,   441,   442,     0,     0,   443,   444,   445,
     446,     0,   447,   448,     0,   449,     0,   450,   451,   452,
     453,     0,     0,   454,   455,     0,   456,   457,   458,   459,
       0,     0,     0,     0,     0,   460,   461,   462,     0,     0,
       0,   463,   464,   465,   466,     0,   467,   468,     0,   469,
     470,     0,   471,   472,     0,     0,   473,     0,     0,   474,
       0,   475,     0,   476,   477,   478,     0,     0,     0,     0,
       0,     0,   479,     0,     0,   480,     0,     0,     0,   481,
     482,   483,   484,   485,   486,     0,     0,     0,     0,     0,
       0,   487,   488,     0,   489,   490,   491,     0,   139,   492,
     140,   141,   142,   143,   144,     0,     0,   145,     0,     0,
       0,   146,     0,     0,   147,     0,   148,   149,   150,   151,
     152,   153,   154,     0,   155,     0,     0,     0,   156,     0,
       0,     0,   157,     0,     0,   158,   159,   160,     0,   161,
       0,   162,   163,     0,     0,   164,     0,     0,   165,   166,
       0,   167,   168,     0,   169,   170,     0,   171,   172,   173,
     174,   175,   176,   177,     0,   178,   179,   180,   181,   182,
     183,   184,   185,     0,   186,   187,   188,   189,   190,   191,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   199,
     200,     0,   201,     0,     0,   202,     0,     0,   203,     0,
       0,     0,   204,     0,     0,     0,   205,   206,   207,     0,
       0,   208,     0,     0,     0,     0,   209,   210,     0,     0,
       0,     0,   211,     0,   212,     0,     0,     0,   213,     0,
     214,   215,   216,   217,     0,     0,     0,   218,     0,     0,
     219,   220,   221,     0,     0,     0,   222,     0,   223,   224,
       0,   225,   226,   227,     0,     0,   228,   229,     0,   230,
     231,   232,   233,   234,   235,     0,     0,   236,   237,   238,
       0,     0,   239,   240,     0,   241,   242,   243,     0,     0,
     244,     0,     0,     0,   245,     0,   246,     0,   247,     0,
     248,   249,   250,   251,   252,   253,     0,   254,     0,     0,
       0,   255,   256,   257,     0,   258,     0,     0,   259,   260,
       0,     0,     0,   261,   262,   263,   264,     0,     0,   265,
     266,   267,     0,   268,     0,   269,     0,     0,     0,     0,
     270,   271,     0,     0,     0,   272,     0,   273,   274,     0,
     275,   276,     0,     0,     0,   277,     0,     0,   278,   279,
     280,     0,     0,   281,     0,     0,   282,   283,     0,     0,
       0,     0,     0,   284,   285,     0,   286,     0,   287,     0,
     288,   289,     0,     0,     0,     0,     0,     0,     0,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,     0,   305,   306,   307,     0,   308,
     309,   310,   311,     0,   312,   313,     0,     0,     0,     0,
     314,   315,   316,   317,   318,   319,     0,     0,   320,   321,
       0,   322,     0,   323,     0,   324,   325,   326,   327,   328,
     329,   330,   331,   332,     0,     0,   333,   334,     0,     0,
     335,   336,   337,   338,     0,     0,     0,   339,   340,     0,
       0,     0,     0,   341,   342,   343,     0,   344,   345,   346,
     347,     0,   348,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   349,   350,   351,     0,     0,   352,     0,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,     0,     0,   365,   366,   367,     0,   368,     0,   369,
     370,   371,   372,   373,     0,   374,   375,   376,     0,     0,
     377,     0,     0,     0,   378,   379,   380,   381,   382,     0,
       0,   383,   384,   385,   386,   387,     0,   388,   389,     0,
     390,   391,   392,     0,     0,   393,     0,   394,     0,   395,
     396,     0,   397,   398,     0,     0,     0,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,     0,   409,   410,
       0,     0,     0,   411,   412,   413,   414,     0,     0,     0,
     415,     0,     0,     0,   416,     0,   417,   418,   419,   420,
     421,     0,   422,   423,   424,   425,   426,   427,     0,     0,
       0,     0,     0,     0,   428,   429,     0,   430,     0,     0,
     431,     0,     0,   432,   433,   434,     0,     0,   435,   436,
       0,   437,   438,   439,   440,   441,   442,     0,     0,   443,
     444,   445,   446,     0,   447,   448,     0,   449,     0,   450,
     451,   452,   453,     0,   136,   454,   455,     0,   456,   457,
     458,   459,     0,     0,     0,     0,     0,   460,   461,   462,
       0,     0,     0,   463,   464,   465,   466,     0,   467,   468,
       0,   469,   470,     0,   471,   472,     0,     0,   473,     0,
       0,   474,     0,   475,     0,   476,   477,   478,     0,     0,
       0,     0,     0,     0,   479,     0,     0,   480,     0,     0,
       0,   481,   482,   483,   484,   485,   486,     0,     0,     0,
       0,     0,     0,   487,   488,     0,   489,   490,   491,     0,
     139,   492,   140,   141,   142,   143,   144,     0,     0,   145,
       0,     0,     0,   146,     0,     0,   147,     0,   148,   149,
     150,   151,   152,   153,   154,     0,   155,     0,     0,     0,
     156,     0,     0,     0,   157,     0,     0,   158,   159,   160,
       0,   161,     0,   162,   163,     0,     0,   164,     0,     0,
     165,   166,     0,   167,   168,     0,   169,   170,     0,   171,
     172,   173,   174,   175,   176,   177,     0,   178,   179,   180,
     181,   182,   183,   184,   185,     0,   186,   187,   188,   189,
     190,   191,   192,   193,     0,   194,   195,     0,   196,   197,
     198,   199,   200,     0,   201,     0,     0,   202,     0,     0,
     203,     0,     0,     0,   204,     0,     0,     0,   205,   206,
     207,     0,     0,   208,     0,     0,     0,     0,   209,   210,
       0,     0,     0,     0,   211,     0,   212,     0,     0,     0,
     213,     0,   214,   215,   216,   217,     0,     0,     0,   218,
       0,     0,   219,   220,   221,     0,     0,     0,   222,     0,
     223,   224,     0,   225,   226,   227,     0,     0,   228,   229,
       0,   230,   231,   232,   233,   234,   235,     0,     0,   236,
     237,   238,     0,     0,   239,   240,     0,   241,   242,   243,
       0,     0,   244,     0,     0,     0,   245,     0,   246,     0,
     247,     0,   248,   249,   250,   251,   252,   253,     0,   254,
       0,     0,     0,   255,   256,   257,     0,   258,     0,     0,
     259,   260,     0,     0,     0,   261,   262,   263,   264,     0,
       0,   265,   266,   267,     0,   268,     0,   269,     0,     0,
       0,     0,   270,   271,     0,     0,     0,   272,     0,   273,
     274,     0,   275,   276,     0,     0,     0,   277,     0,     0,
     278,   279,   280,     0,     0,   281,     0,     0,   282,   283,
       0,     0,     0,     0,     0,   284,   285,     0,   286,     0,
     287,     0,   288,   289,     0,     0,     0,     0,     0,     0,
       0,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,     0,   305,   306,   307,
       0,   308,   309,   310,   311,     0,   312,   313,     0,     0,
       0,     0,   314,   315,   316,   317,   318,   319,     0,     0,
     320,   321,     0,   322,     0,   323,     0,   324,   325,   326,
     327,   328,   329,   330,   331,   332,     0,     0,   333,   334,
       0,     0,   335,   336,   337,   338,     0,     0,     0,   339,
     340,     0,     0,     0,     0,   341,   342,   343,     0,   344,
     345,   346,   347,     0,   348,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   349,   350,   351,     0,     0,   352,
       0,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,     0,     0,   365,   366,   367,     0,   368,
       0,   369,   370,   371,   372,   373,     0,   374,   375,   376,
       0,     0,   377,     0,     0,     0,   378,   379,   380,   381,
     382,     0,     0,   383,   384,   385,   386,   387,     0,   388,
     389,     0,   390,   391,   392,     0,     0,   393,     0,   394,
       0,   395,   396,     0,   397,   398,     0,     0,     0,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,     0,
     409,   410,     0,     0,     0,   411,   412,   413,   414,     0,
       0,     0,   415,     0,     0,     0,   416,     0,   417,   418,
     419,   420,   421,     0,   422,   423,   424,   425,   426,   427,
       0,     0,     0,     0,     0,     0,   428,   429,     0,   430,
       0,     0,   431,     0,     0,   432,   433,   434,     0,     0,
     435,   436,     0,   437,   438,   439,   440,   441,   442,     0,
       0,   443,   444,   445,   446,     0,   447,   448,     0,   449,
       0,   450,   451,   452,   453,     0,     0,   454,   455,     0,
     456,   457,   458,   459,     0,     0,     0,     0,     0,   460,
     461,   462,     0,     0,     0,   463,   464,   465,   466,     0,
     467,   468,     0,   469,   470,     0,   471,   472,     0,     0,
     473,     0,     0,   474,     0,   475,     0,   476,   477,   478,
       0,     0,     0,     0,     0,     0,   479,     0,     0,   480,
       0,     0,     0,   481,   482,   483,   484,   485,   486,     0,
       0,     0,     0,     0,     0,   487,   488,     0,   489,   490,
     491,     0,   139,   492,   140,   141,   142,   143,   144,     0,
       0,   145,     0,     0,     0,   146,     0,     0,   147,     0,
     148,   149,   150,   151,   152,   153,   154,     0,   155,     0,
       0,     0,   156,     0,     0,     0,   157,     0,     0,   158,
     159,   160,     0,   161,     0,   162,   163,     0,     0,   164,
       0,     0,   165,   166,     0,   167,   168,     0,   169,   170,
       0,   171,   172,   173,   174,   175,   176,   177,     0,   178,
     179,   180,   181,   182,   183,   184,   185,     0,   186,   187,
     188,   189,   190,   191,   192,   193,     0,   194,   195,     0,
     196,   197,   198,   199,   200,     0,   201,     0,     0,   202,
       0,     0,   203,     0,     0,     0,   204,     0,     0,     0,
     205,   206,   207,     0,     0,   208,     0,     0,     0,     0,
     209,   210,     0,     0,     0,     0,   211,     0,   212,     0,
       0,     0,   213,     0,   214,   215,   216,   217,     0,     0,
       0,   218,     0,     0,   219,   220,   221,     0,     0,     0,
     222,     0,   223,   224,     0,   225,   226,   227,     0,     0,
     228,   229,     0,   230,   231,   232,   233,   234,   235,     0,
       0,   236,   237,   238,     0,     0,   239,   240,     0,   241,
    1802,   243,     0,     0,   244,     0,     0,     0,   245,     0,
     246,     0,   247,     0,   248,   249,   250,   251,   252,   253,
       0,   254,     0,     0,     0,   255,   256,   257,     0,   258,
       0,     0,   259,   260,     0,     0,     0,   261,   262,   263,
     264,     0,     0,   265,   266,   267,     0,   268,     0,   269,
       0,     0,     0,     0,   270,   271,     0,     0,     0,   272,
       0,   273,   274,     0,   275,   276,     0,     0,     0,   277,
       0,     0,   278,   279,   280,     0,     0,   281,     0,     0,
     282,   283,     0,     0,     0,     0,     0,   284,   285,     0,
     286,     0,   287,     0,   288,   289,     0,     0,     0,     0,
       0,     0,     0,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,     0,   305,
     306,   307,     0,   308,   309,   310,   311,     0,   312,   313,
       0,     0,     0,     0,   314,   315,   316,   317,   318,   319,
       0,     0,   320,   321,     0,   322,     0,   323,     0,   324,
     325,   326,   327,   328,   329,   330,   331,   332,     0,     0,
     333,   334,     0,     0,   335,  1803,   337,   338,     0,     0,
       0,   339,   340,     0,     0,     0,     0,   341,   342,   343,
       0,   344,   345,   346,   347,     0,   348,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   349,   350,   351,     0,
       0,   352,     0,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,     0,     0,   365,   366,   367,
       0,   368,     0,   369,   370,   371,   372,   373,     0,   374,
     375,   376,     0,     0,   377,     0,     0,     0,   378,   379,
     380,   381,   382,     0,     0,   383,   384,   385,   386,   387,
       0,   388,   389,     0,   390,   391,   392,     0,     0,   393,
       0,   394,     0,   395,   396,     0,   397,   398,     0,     0,
       0,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,     0,   409,   410,     0,     0,     0,   411,   412,   413,
     414,     0,     0,     0,   415,     0,     0,     0,   416,     0,
     417,   418,   419,   420,   421,     0,   422,   423,   424,   425,
     426,   427,     0,     0,     0,     0,     0,     0,   428,   429,
       0,   430,     0,     0,   431,     0,     0,   432,   433,   434,
       0,     0,   435,   436,     0,   437,   438,   439,   440,   441,
     442,     0,     0,   443,   444,   445,   446,     0,   447,   448,
       0,   449,     0,   450,   451,   452,   453,     0,     0,   454,
     455,     0,   456,   457,   458,   459,     0,     0,     0,     0,
       0,   460,   461,   462,     0,     0,     0,   463,   464,   465,
     466,     0,   467,   468,     0,   469,   470,     0,   471,   472,
       0,     0,   473,     0,     0,   474,     0,   475,     0,   476,
     477,   478,     0,     0,     0,     0,     0,     0,   479,     0,
       0,   480,     0,     0,     0,   481,   482,   483,   484,   485,
     486,     0,     0,     0,     0,     0,     0,   487,   488,     0,
     489,   490,   491,     0,   139,   492,   140,   141,   142,   143,
     144,     0,     0,   145,     0,     0,     0,   146,     0,     0,
       0,     0,   148,   149,   150,   151,   152,   153,     0,     0,
    -334,     0,     0,     0,   156,     0,     0,     0,   157,     0,
       0,   158,   159,   160,     0,   161,     0,     0,     0,     0,
       0,   164,  3943,     0,   165,   166,     0,   167,     0,     0,
       0,     0,     0,   171,   172,   173,   174,  3944,   176,   177,
       0,   178,   179,     0,     0,     0,     0,     0,     0,     0,
     186,     0,   188,     0,   190,   191,   192,   193,     0,   194,
     195,     0,   196,   197,   198,     0,   200,     0,   201,     0,
       0,   202,     0,     0,   203,     0,     0,     0,   204,     0,
       0,     0,   205,   206,   207,     0,     0,   208,     0,     0,
       0,     0,   209,     0,     0,     0,     0,     0,   211,     0,
     212,     0,     0,     0,   213,     0,   214,   215,   216,   217,
       0,     0,     0,     0,     0,     0,   219,   220,   221,     0,
    -304,  -304,   222,     0,  -304,   224,     0,   225,   226,   227,
       0,     0,   228,   229,     0,   230,   231,   232,   233,     0,
       0,     0,     0,   236,   237,   238,     0,     0,   239,   240,
    3945,   241,   242,   243,     0,     0,     0,     0,     0,     0,
     245,     0,   246,     0,   247,     0,   248,   249,   250,   251,
     252,   253,     0,   254,     0,     0,     0,     0,   256,   257,
       0,     0,     0,     0,     0,   260,     0,     0,     0,   261,
     262,   263,   264,  3946,     0,   265,   266,   267,     0,   268,
       0,   269,     0,     0,     0,     0,   270,     0,     0,     0,
       0,   272,     0,   273,   274,     0,   275,   276,  3947,     0,
       0,   277,     0,     0,     0,   279,   280,     0,     0,   281,
    3948,     0,   282,   283,     0,     0,     0,     0,     0,   284,
     285,     0,   286,     0,   287,     0,   288,   289,     0,     0,
       0,     0,  -289,     0,     0,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
       0,   305,   306,   307,     0,   308,   309,   310,   311,     0,
     312,   313,     0,     0,     0,     0,   314,   315,   316,   317,
     318,   319,     0,     0,   320,   321,     0,   322,     0,   323,
       0,   324,   325,   326,   327,   328,   329,   330,   331,   332,
       0,     0,   333,   334,     0,     0,   335,   336,   337,   338,
       0,     0,     0,     0,   340,     0,     0,     0,     0,   341,
     342,   343,     0,   344,   345,   346,  3949,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   350,
     351,     0,     0,     0,     0,   353,   354,   355,     0,   357,
     358,   359,   360,   361,   362,   363,     0,     0,     0,     0,
     366,   367,     0,   368,     0,   369,   370,   371,   372,   373,
       0,   374,   375,   376,     0,     0,   377,     0,     0,     0,
     378,   379,   380,   381,   382,     0,     0,   383,   384,   385,
     386,   387,     0,   388,     0,     0,   390,     0,   392,  -289,
       0,   393,     0,     0,     0,   395,     0,     0,   397,   398,
    3950,     0,     0,     0,   400,   401,   402,   403,   404,   405,
       0,   407,   408,     0,   409,     0,     0,     0,     0,   411,
     412,   413,     0,     0,     0,     0,   415,     0,     0,     0,
     416,     0,     0,   418,     0,     0,   421,     0,   422,     0,
     424,     0,   426,   427,     0,     0,     0,     0,     0,     0,
     428,   429,     0,   430,     0,     0,   431,     0,     0,   432,
       0,   434,     0,     0,     0,   436,     0,   437,   438,   439,
     440,   441,   442,     0,     0,   443,   444,   445,   446,     0,
     447,   448,     0,   449,     0,   450,   451,   452,   453,     0,
       0,   454,   455,     0,   456,   457,   458,   459,     0,     0,
       0,     0,     0,   460,   461,   462,     0,     0,     0,     0,
     464,   465,   466,     0,   467,   468,     0,   469,   470,     0,
       0,     0,     0,     0,   473,     0,     0,   474,     0,     0,
       0,   476,   477,   478,     0,     0,     0,     0,     0,     0,
     479,     0,     0,   480,     0,     0,     0,   481,   482,   483,
     484,   485,   486,     0,     0,  -289,     0,     0,     0,   487,
       0,     0,   489,     0,   491,     0,   139,   492,   140,   141,
     142,   143,   144,     0,     0,   145,     0,     0,     0,   146,
       0,     0,     0,     0,   148,   149,   150,   151,   152,   153,
       0,     0,  -334,     0,     0,     0,   156,     0,     0,     0,
     157,     0,     0,   158,   159,   160,     0,   161,     0,     0,
       0,     0,     0,   164,  3943,     0,   165,   166,     0,   167,
       0,     0,     0,     0,     0,   171,   172,   173,   174,  3944,
     176,   177,     0,   178,   179,     0,     0,     0,     0,     0,
       0,     0,   186,     0,   188,     0,   190,   191,   192,   193,
       0,   194,   195,     0,   196,   197,   198,     0,   200,     0,
     201,     0,     0,   202,     0,     0,   203,     0,     0,     0,
     204,     0,     0,     0,   205,   206,   207,     0,     0,   208,
       0,     0,     0,     0,   209,     0,     0,     0,     0,     0,
     211,     0,   212,     0,     0,     0,   213,     0,   214,   215,
     216,   217,     0,     0,     0,     0,     0,     0,   219,   220,
     221,     0,  -325,     0,   222,     0,  -325,   224,     0,   225,
     226,   227,     0,     0,   228,   229,     0,   230,   231,   232,
     233,     0,     0,     0,     0,   236,   237,   238,     0,     0,
     239,   240,  3945,   241,   242,   243,     0,     0,     0,     0,
       0,     0,   245,     0,   246,     0,   247,     0,   248,   249,
     250,   251,   252,   253,     0,   254,     0,     0,     0,     0,
     256,   257,     0,     0,     0,     0,     0,   260,     0,     0,
       0,   261,   262,   263,   264,  3946,     0,   265,   266,   267,
       0,   268,     0,   269,     0,     0,     0,     0,   270,     0,
       0,     0,     0,   272,     0,   273,   274,     0,   275,   276,
    3947,     0,     0,   277,     0,     0,     0,   279,   280,     0,
       0,   281,  3948,     0,   282,   283,     0,     0,     0,     0,
       0,   284,   285,     0,   286,     0,   287,     0,   288,   289,
       0,     0,     0,     0,  -289,     0,     0,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,     0,   305,   306,   307,     0,   308,   309,   310,
     311,     0,   312,   313,     0,     0,     0,     0,   314,   315,
     316,   317,   318,   319,     0,     0,   320,   321,     0,   322,
       0,   323,     0,   324,   325,   326,   327,   328,   329,   330,
     331,   332,     0,     0,   333,   334,     0,     0,   335,   336,
     337,   338,     0,     0,     0,     0,   340,     0,     0,     0,
       0,   341,   342,   343,     0,   344,   345,   346,  3949,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   350,   351,     0,     0,     0,     0,   353,   354,   355,
       0,   357,   358,   359,   360,   361,   362,   363,     0,     0,
       0,     0,   366,   367,     0,   368,     0,   369,   370,   371,
     372,   373,     0,   374,   375,   376,     0,     0,   377,     0,
       0,     0,   378,   379,   380,   381,   382,     0,     0,   383,
     384,   385,   386,   387,     0,   388,     0,     0,   390,     0,
     392,  -289,     0,   393,     0,     0,     0,   395,     0,     0,
     397,   398,  3950,     0,     0,     0,   400,   401,   402,   403,
     404,   405,     0,   407,   408,     0,   409,     0,     0,     0,
       0,   411,   412,   413,     0,     0,     0,     0,   415,     0,
       0,     0,   416,     0,     0,   418,     0,     0,   421,     0,
     422,     0,   424,     0,   426,   427,     0,     0,     0,     0,
       0,     0,   428,   429,     0,   430,     0,     0,   431,     0,
       0,   432,     0,   434,     0,     0,     0,   436,     0,   437,
     438,   439,   440,   441,   442,     0,     0,   443,   444,   445,
     446,     0,   447,   448,     0,   449,     0,   450,   451,   452,
     453,     0,     0,   454,   455,     0,   456,   457,   458,   459,
       0,     0,     0,     0,     0,   460,   461,   462,     0,     0,
       0,     0,   464,   465,   466,     0,   467,   468,     0,   469,
     470,     0,     0,     0,     0,     0,   473,     0,     0,   474,
       0,     0,     0,   476,   477,   478,     0,     0,     0,     0,
       0,     0,   479,     0,     0,   480,     0,     0,     0,   481,
     482,   483,   484,   485,   486,  -325,     0,  -289,     0,     0,
       0,   487,     0,     0,   489,     0,   491,     0,   139,   492,
     140,   141,   142,   143,   144,     0,     0,   145,     0,     0,
       0,   146,     0,     0,     0,     0,   148,   149,   150,   151,
     152,   153,     0,     0,  -334,     0,     0,     0,   156,     0,
       0,     0,   157,     0,     0,   158,   159,   160,     0,   161,
       0,     0,     0,     0,     0,   164,  3943,     0,   165,   166,
       0,   167,     0,     0,     0,     0,     0,   171,   172,   173,
     174,  3944,   176,   177,     0,   178,   179,     0,     0,     0,
       0,     0,     0,     0,   186,     0,   188,     0,   190,   191,
     192,   193,     0,   194,   195,     0,   196,   197,   198,     0,
     200,     0,   201,     0,     0,   202,     0,     0,   203,     0,
       0,     0,   204,     0,     0,     0,   205,   206,   207,     0,
       0,   208,     0,     0,     0,     0,   209,     0,     0,     0,
       0,     0,   211,     0,   212,     0,     0,     0,   213,     0,
     214,   215,   216,   217,     0,     0,     0,     0,     0,     0,
     219,   220,   221,     0,  -322,     0,   222,     0,  -322,   224,
       0,   225,   226,   227,     0,     0,   228,   229,     0,   230,
     231,   232,   233,     0,     0,     0,     0,   236,   237,   238,
       0,     0,   239,   240,  3945,   241,   242,   243,     0,     0,
       0,     0,     0,     0,   245,     0,   246,     0,   247,     0,
     248,   249,   250,   251,   252,   253,     0,   254,     0,     0,
       0,     0,   256,   257,     0,     0,     0,     0,     0,   260,
       0,     0,     0,   261,   262,   263,   264,  3946,     0,   265,
     266,   267,     0,   268,     0,   269,     0,     0,     0,     0,
     270,     0,     0,     0,     0,   272,     0,   273,   274,     0,
     275,   276,  3947,     0,     0,   277,     0,     0,     0,   279,
     280,     0,     0,   281,  3948,     0,   282,   283,     0,     0,
       0,     0,     0,   284,   285,     0,   286,     0,   287,     0,
     288,   289,     0,     0,     0,     0,  -289,     0,     0,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,     0,   305,   306,   307,     0,   308,
     309,   310,   311,     0,   312,   313,     0,     0,     0,     0,
     314,   315,   316,   317,   318,   319,     0,     0,   320,   321,
       0,   322,     0,   323,     0,   324,   325,   326,   327,   328,
     329,   330,   331,   332,     0,     0,   333,   334,     0,     0,
     335,   336,   337,   338,     0,     0,     0,     0,   340,     0,
       0,     0,     0,   341,   342,   343,     0,   344,   345,   346,
    3949,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   350,   351,     0,     0,     0,     0,   353,
     354,   355,     0,   357,   358,   359,   360,   361,   362,   363,
       0,     0,     0,     0,   366,   367,     0,   368,     0,   369,
     370,   371,   372,   373,     0,   374,   375,   376,     0,     0,
     377,     0,     0,     0,   378,   379,   380,   381,   382,     0,
       0,   383,   384,   385,   386,   387,     0,   388,     0,     0,
     390,     0,   392,  -289,     0,   393,     0,     0,     0,   395,
       0,     0,   397,   398,  3950,     0,     0,     0,   400,   401,
     402,   403,   404,   405,     0,   407,   408,     0,   409,     0,
       0,     0,     0,   411,   412,   413,     0,     0,     0,     0,
     415,     0,     0,     0,   416,     0,     0,   418,     0,     0,
     421,     0,   422,     0,   424,     0,   426,   427,     0,     0,
       0,     0,     0,     0,   428,   429,     0,   430,     0,     0,
     431,     0,     0,   432,     0,   434,     0,     0,     0,   436,
       0,   437,   438,   439,   440,   441,   442,     0,     0,   443,
     444,   445,   446,     0,   447,   448,     0,   449,     0,   450,
     451,   452,   453,     0,     0,   454,   455,     0,   456,   457,
     458,   459,     0,     0,     0,     0,     0,   460,   461,   462,
       0,     0,     0,     0,   464,   465,   466,     0,   467,   468,
       0,   469,   470,     0,     0,     0,     0,     0,   473,     0,
       0,   474,     0,     0,     0,   476,   477,   478,     0,     0,
       0,     0,     0,     0,   479,     0,     0,   480,     0,     0,
       0,   481,   482,   483,   484,   485,   486,  -322,     0,  -289,
       0,     0,     0,   487,     0,     0,   489,     0,   491,     0,
     139,   492,   140,   141,   142,   143,   144,     0,     0,   145,
       0,     0,     0,   146,     0,     0,     0,     0,   148,   149,
     150,   151,   152,   153,     0,     0,  -334,     0,     0,     0,
     156,     0,     0,     0,   157,     0,     0,   158,   159,   160,
       0,   161,     0,     0,     0,     0,     0,   164,  3943,     0,
     165,   166,     0,   167,     0,     0,     0,     0,     0,   171,
     172,   173,   174,  3944,   176,   177,     0,   178,   179,     0,
       0,     0,     0,     0,     0,     0,   186,     0,   188,     0,
     190,   191,   192,   193,     0,   194,   195,     0,   196,   197,
     198,     0,   200,     0,   201,     0,     0,   202,     0,     0,
     203,     0,     0,     0,   204,     0,     0,     0,   205,   206,
     207,     0,     0,   208,     0,     0,     0,     0,   209,     0,
       0,     0,     0,     0,   211,     0,   212,     0,     0,     0,
     213,     0,   214,   215,   216,   217,     0,     0,     0,     0,
       0,     0,   219,   220,   221,     0,     0,     0,   222,     0,
    4279,   224,     0,   225,   226,   227,     0,     0,   228,   229,
       0,   230,   231,   232,   233,     0,     0,     0,     0,   236,
     237,   238,     0,     0,   239,   240,  3945,   241,   242,   243,
       0,     0,     0,     0,     0,     0,   245,     0,   246,     0,
     247,     0,   248,   249,   250,   251,   252,   253,     0,   254,
       0,     0,     0,     0,   256,   257,     0,     0,     0,     0,
       0,   260,     0,     0,     0,   261,   262,   263,   264,  3946,
       0,   265,   266,   267,     0,   268,     0,   269,     0,     0,
       0,     0,   270,     0,     0,     0,     0,   272,     0,   273,
     274,     0,   275,   276,  3947,     0,     0,   277,     0,     0,
       0,   279,   280,     0,     0,   281,  3948,     0,   282,   283,
       0,     0,     0,     0,     0,   284,   285,     0,   286,     0,
     287,     0,   288,   289,     0,     0,     0,     0,  -289,     0,
       0,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,     0,   305,   306,   307,
       0,   308,   309,   310,   311,     0,   312,   313,     0,     0,
       0,     0,   314,   315,   316,   317,   318,   319,     0,     0,
     320,   321,     0,   322,     0,   323,     0,   324,   325,   326,
     327,   328,   329,   330,   331,   332,     0,     0,   333,   334,
       0,     0,   335,   336,   337,   338,     0,     0,     0,     0,
     340,     0,     0,     0,     0,   341,   342,   343,     0,   344,
     345,   346,  3949,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   350,   351,     0,     0,     0,
       0,   353,   354,   355,     0,   357,   358,   359,   360,   361,
     362,   363,     0,     0,     0,     0,   366,   367,     0,   368,
       0,   369,   370,   371,   372,   373,     0,   374,   375,   376,
       0,     0,   377,     0,     0,     0,   378,   379,   380,   381,
     382,     0,     0,   383,   384,   385,   386,   387,     0,   388,
       0,     0,   390,     0,   392,  -289,     0,   393,     0,     0,
       0,   395,     0,     0,   397,   398,  3950,     0,     0,     0,
     400,   401,   402,   403,   404,   405,     0,   407,   408,     0,
     409,     0,     0,     0,     0,   411,   412,   413,     0,     0,
       0,     0,   415,     0,     0,     0,   416,     0,     0,   418,
       0,     0,   421,     0,   422,     0,   424,     0,   426,   427,
       0,     0,     0,     0,     0,     0,   428,   429,     0,   430,
       0,     0,   431,     0,     0,   432,     0,   434,     0,     0,
       0,   436,     0,   437,   438,   439,   440,   441,   442,     0,
       0,   443,   444,   445,   446,     0,   447,   448,     0,   449,
       0,   450,   451,   452,   453,     0,     0,   454,   455,     0,
     456,   457,   458,   459,     0,     0,     0,     0,     0,   460,
     461,   462,     0,     0,     0,     0,   464,   465,   466,     0,
     467,   468,     0,   469,   470,     0,     0,     0,     0,     0,
     473,     0,     0,   474,     0,     0,     0,   476,   477,   478,
       0,     0,     0,     0,     0,     0,   479,     0,     0,   480,
       0,     0,     0,   481,   482,   483,   484,   485,   486,     0,
       0,  -289,     0,     0,     0,   487,     0,     0,   489,     0,
     491,     0,   139,   492,   140,   141,   142,   143,   144,     0,
       0,   145,     0,     0,     0,   146,     0,     0,     0,     0,
     148,   149,   150,   151,   152,   153,     0,     0,  -334,     0,
       0,     0,   156,     0,     0,     0,   157,     0,     0,   158,
     159,   160,     0,   161,     0,     0,     0,     0,     0,   164,
    3943,     0,   165,   166,     0,   167,     0,     0,     0,     0,
       0,   171,   172,   173,   174,  3944,   176,   177,     0,   178,
     179,     0,     0,     0,     0,     0,     0,     0,   186,     0,
     188,     0,   190,   191,   192,   193,     0,   194,   195,     0,
     196,   197,   198,     0,   200,     0,   201,     0,     0,   202,
       0,     0,   203,     0,     0,     0,   204,     0,     0,     0,
     205,   206,   207,     0,     0,   208,     0,     0,     0,     0,
     209,     0,     0,     0,     0,     0,   211,     0,   212,     0,
       0,     0,   213,     0,   214,   215,   216,   217,     0,     0,
       0,     0,     0,     0,   219,   220,   221,     0,     0,     0,
     222,     0,  -327,   224,     0,   225,   226,   227,     0,     0,
     228,   229,     0,   230,   231,   232,   233,     0,     0,     0,
       0,   236,   237,   238,     0,     0,   239,   240,  3945,   241,
     242,   243,     0,     0,     0,     0,     0,     0,   245,     0,
     246,     0,   247,     0,   248,   249,   250,   251,   252,   253,
       0,   254,     0,     0,     0,     0,   256,   257,     0,     0,
       0,     0,     0,   260,     0,     0,     0,   261,   262,   263,
     264,  3946,     0,   265,   266,   267,     0,   268,     0,   269,
       0,     0,     0,     0,   270,     0,     0,     0,     0,   272,
       0,   273,   274,     0,   275,   276,  3947,     0,     0,   277,
       0,     0,     0,   279,   280,     0,     0,   281,  3948,     0,
     282,   283,     0,     0,     0,     0,     0,   284,   285,     0,
     286,     0,   287,     0,   288,   289,     0,     0,     0,     0,
    -289,     0,     0,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,     0,   305,
     306,   307,     0,   308,   309,   310,   311,     0,   312,   313,
       0,     0,     0,     0,   314,   315,   316,   317,   318,   319,
       0,     0,   320,   321,     0,   322,     0,   323,     0,   324,
     325,   326,   327,   328,   329,   330,   331,   332,     0,     0,
     333,   334,     0,     0,   335,   336,   337,   338,     0,     0,
       0,     0,   340,     0,     0,     0,     0,   341,   342,   343,
       0,   344,   345,   346,  3949,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   350,   351,     0,
       0,     0,     0,   353,   354,   355,     0,   357,   358,   359,
     360,   361,   362,   363,     0,     0,     0,     0,   366,   367,
       0,   368,     0,   369,   370,   371,   372,   373,     0,   374,
     375,   376,     0,     0,   377,     0,     0,     0,   378,   379,
     380,   381,   382,     0,     0,   383,   384,   385,   386,   387,
       0,   388,     0,     0,   390,     0,   392,  -289,     0,   393,
       0,     0,     0,   395,     0,     0,   397,   398,  3950,     0,
       0,     0,   400,   401,   402,   403,   404,   405,     0,   407,
     408,     0,   409,     0,     0,     0,     0,   411,   412,   413,
       0,     0,     0,     0,   415,     0,     0,     0,   416,     0,
       0,   418,     0,     0,   421,     0,   422,     0,   424,     0,
     426,   427,     0,     0,     0,     0,     0,     0,   428,   429,
       0,   430,     0,     0,   431,     0,     0,   432,     0,   434,
       0,     0,     0,   436,     0,   437,   438,   439,   440,   441,
     442,     0,     0,   443,   444,   445,   446,     0,   447,   448,
       0,   449,     0,   450,   451,   452,   453,     0,     0,   454,
     455,     0,   456,   457,   458,   459,     0,     0,     0,     0,
       0,   460,   461,   462,     0,     0,     0,     0,   464,   465,
     466,     0,   467,   468,     0,   469,   470,     0,     0,     0,
       0,     0,   473,     0,     0,   474,     0,     0,     0,   476,
     477,   478,     0,     0,     0,     0,     0,     0,   479,     0,
       0,   480,     0,     0,     0,   481,   482,   483,   484,   485,
     486,     0,     0,  -289,     0,     0,     0,   487,     0,     0,
     489,     0,   491,     0,   139,   492,   140,   141,   142,   143,
     144,     0,     0,   145,     0,     0,     0,   146,     0,     0,
       0,     0,   148,   149,   150,   151,   152,   153,     0,     0,
    -334,     0,     0,     0,   156,     0,     0,     0,   157,     0,
       0,   158,   159,   160,     0,   161,     0,     0,     0,     0,
       0,   164,  3943,     0,   165,   166,     0,   167,     0,     0,
       0,     0,     0,   171,   172,   173,   174,  3944,   176,   177,
       0,   178,   179,     0,     0,     0,     0,     0,     0,     0,
     186,     0,   188,     0,   190,   191,   192,   193,     0,   194,
     195,     0,   196,   197,   198,     0,   200,     0,   201,     0,
       0,   202,     0,     0,   203,     0,     0,     0,   204,     0,
       0,     0,   205,   206,   207,     0,     0,   208,     0,     0,
       0,     0,   209,     0,     0,     0,     0,     0,   211,     0,
     212,     0,     0,     0,   213,     0,   214,   215,   216,   217,
       0,     0,     0,     0,     0,     0,   219,   220,   221,     0,
       0,     0,   222,     0,  4393,   224,     0,   225,   226,   227,
       0,     0,   228,   229,     0,   230,   231,   232,   233,     0,
       0,     0,     0,   236,   237,   238,     0,     0,   239,   240,
    3945,   241,   242,   243,     0,     0,     0,     0,     0,     0,
     245,     0,   246,     0,   247,     0,   248,   249,   250,   251,
     252,   253,     0,   254,     0,     0,     0,     0,   256,   257,
       0,     0,     0,     0,     0,   260,     0,     0,     0,   261,
     262,   263,   264,  3946,     0,   265,   266,   267,     0,   268,
       0,   269,     0,     0,     0,     0,   270,     0,     0,     0,
       0,   272,     0,   273,   274,     0,   275,   276,  3947,     0,
       0,   277,     0,     0,     0,   279,   280,     0,     0,   281,
    3948,     0,   282,   283,     0,     0,     0,     0,     0,   284,
     285,     0,   286,     0,   287,     0,   288,   289,     0,     0,
       0,     0,  -289,     0,     0,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
       0,   305,   306,   307,     0,   308,   309,   310,   311,     0,
     312,   313,     0,     0,     0,     0,   314,   315,   316,   317,
     318,   319,     0,     0,   320,   321,     0,   322,     0,   323,
       0,   324,   325,   326,   327,   328,   329,   330,   331,   332,
       0,     0,   333,   334,     0,     0,   335,   336,   337,   338,
       0,     0,     0,     0,   340,     0,     0,     0,     0,   341,
     342,   343,     0,   344,   345,   346,  3949,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   350,
     351,     0,     0,     0,     0,   353,   354,   355,     0,   357,
     358,   359,   360,   361,   362,   363,     0,     0,     0,     0,
     366,   367,     0,   368,     0,   369,   370,   371,   372,   373,
       0,   374,   375,   376,     0,     0,   377,     0,     0,     0,
     378,   379,   380,   381,   382,     0,     0,   383,   384,   385,
     386,   387,     0,   388,     0,     0,   390,     0,   392,  -289,
       0,   393,     0,     0,     0,   395,     0,     0,   397,   398,
    3950,     0,     0,     0,   400,   401,   402,   403,   404,   405,
       0,   407,   408,     0,   409,     0,     0,     0,     0,   411,
     412,   413,     0,     0,     0,     0,   415,     0,     0,     0,
     416,     0,     0,   418,     0,     0,   421,     0,   422,     0,
     424,     0,   426,   427,     0,     0,     0,     0,     0,     0,
     428,   429,     0,   430,     0,     0,   431,     0,     0,   432,
       0,   434,     0,     0,     0,   436,     0,   437,   438,   439,
     440,   441,   442,     0,     0,   443,   444,   445,   446,     0,
     447,   448,     0,   449,     0,   450,   451,   452,   453,     0,
       0,   454,   455,     0,   456,   457,   458,   459,     0,     0,
       0,     0,     0,   460,   461,   462,     0,     0,     0,     0,
     464,   465,   466,     0,   467,   468,     0,   469,   470,     0,
       0,     0,     0,     0,   473,     0,     0,   474,     0,     0,
       0,   476,   477,   478,     0,     0,     0,     0,     0,     0,
     479,     0,     0,   480,     0,     0,     0,   481,   482,   483,
     484,   485,   486,     0,     0,  -289,     0,     0,     0,   487,
       0,     0,   489,     0,   491,     0,   139,   492,   140,   141,
     142,   143,   144,     0,     0,   145,     0,     0,     0,   146,
       0,     0,     0,     0,   148,   149,   150,   151,   152,   153,
       0,     0,  -334,     0,     0,     0,   156,     0,     0,     0,
     157,     0,     0,   158,   159,   160,     0,   161,     0,     0,
       0,     0,     0,   164,  3943,     0,   165,   166,     0,   167,
       0,     0,     0,     0,     0,   171,   172,   173,   174,  3944,
     176,   177,     0,   178,   179,     0,     0,     0,     0,     0,
       0,     0,   186,     0,   188,     0,   190,   191,   192,   193,
       0,   194,   195,     0,   196,   197,   198,     0,   200,     0,
     201,     0,     0,   202,     0,     0,   203,     0,     0,     0,
     204,     0,     0,     0,   205,   206,   207,     0,     0,   208,
       0,     0,     0,     0,   209,     0,     0,     0,     0,     0,
     211,     0,   212,     0,     0,     0,   213,     0,   214,   215,
     216,   217,     0,     0,     0,     0,     0,     0,   219,   220,
     221,     0,     0,     0,   222,     0,  4439,   224,     0,   225,
     226,   227,     0,     0,   228,   229,     0,   230,   231,   232,
     233,     0,     0,     0,     0,   236,   237,   238,     0,     0,
     239,   240,  3945,   241,   242,   243,     0,     0,     0,     0,
       0,     0,   245,     0,   246,     0,   247,     0,   248,   249,
     250,   251,   252,   253,     0,   254,     0,     0,     0,     0,
     256,   257,     0,     0,     0,     0,     0,   260,     0,     0,
       0,   261,   262,   263,   264,  3946,     0,   265,   266,   267,
       0,   268,     0,   269,     0,     0,     0,     0,   270,     0,
       0,     0,     0,   272,     0,   273,   274,     0,   275,   276,
    3947,     0,     0,   277,     0,     0,     0,   279,   280,     0,
       0,   281,  3948,     0,   282,   283,     0,     0,     0,     0,
       0,   284,   285,     0,   286,     0,   287,     0,   288,   289,
       0,     0,     0,     0,  -289,     0,     0,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,     0,   305,   306,   307,     0,   308,   309,   310,
     311,     0,   312,   313,     0,     0,     0,     0,   314,   315,
     316,   317,   318,   319,     0,     0,   320,   321,     0,   322,
       0,   323,     0,   324,   325,   326,   327,   328,   329,   330,
     331,   332,     0,     0,   333,   334,     0,     0,   335,   336,
     337,   338,     0,     0,     0,     0,   340,     0,     0,     0,
       0,   341,   342,   343,     0,   344,   345,   346,  3949,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   350,   351,     0,     0,     0,     0,   353,   354,   355,
       0,   357,   358,   359,   360,   361,   362,   363,     0,     0,
       0,     0,   366,   367,     0,   368,     0,   369,   370,   371,
     372,   373,     0,   374,   375,   376,     0,     0,   377,     0,
       0,     0,   378,   379,   380,   381,   382,     0,     0,   383,
     384,   385,   386,   387,     0,   388,     0,     0,   390,     0,
     392,  -289,     0,   393,     0,     0,     0,   395,     0,     0,
     397,   398,  3950,     0,     0,     0,   400,   401,   402,   403,
     404,   405,     0,   407,   408,     0,   409,     0,     0,     0,
       0,   411,   412,   413,     0,     0,     0,     0,   415,     0,
       0,     0,   416,     0,     0,   418,     0,     0,   421,     0,
     422,     0,   424,     0,   426,   427,     0,     0,     0,     0,
       0,     0,   428,   429,     0,   430,     0,     0,   431,     0,
       0,   432,     0,   434,     0,     0,     0,   436,     0,   437,
     438,   439,   440,   441,   442,     0,     0,   443,   444,   445,
     446,     0,   447,   448,     0,   449,     0,   450,   451,   452,
     453,     0,     0,   454,   455,     0,   456,   457,   458,   459,
       0,     0,     0,     0,     0,   460,   461,   462,     0,     0,
       0,     0,   464,   465,   466,     0,   467,   468,     0,   469,
     470,     0,     0,     0,     0,     0,   473,     0,     0,   474,
       0,     0,     0,   476,   477,   478,     0,     0,     0,     0,
       0,     0,   479,     0,     0,   480,     0,     0,     0,   481,
     482,   483,   484,   485,   486,     0,     0,  -289,     0,     0,
       0,   487,     0,     0,   489,     0,   491,     0,   139,   492,
     140,   141,   142,   143,   144,     0,     0,   145,     0,     0,
       0,   146,     0,     0,     0,     0,   148,   149,   150,   151,
     152,   153,     0,     0,  -334,     0,     0,     0,   156,     0,
       0,     0,   157,     0,     0,   158,   159,   160,     0,   161,
       0,     0,     0,     0,     0,   164,  3943,     0,   165,   166,
       0,   167,     0,     0,     0,     0,     0,   171,   172,   173,
     174,  3944,   176,   177,     0,   178,   179,     0,     0,     0,
       0,     0,     0,     0,   186,     0,   188,     0,   190,   191,
     192,   193,     0,   194,   195,     0,   196,   197,   198,     0,
     200,     0,   201,     0,     0,   202,     0,     0,   203,     0,
       0,     0,   204,     0,     0,     0,   205,   206,   207,     0,
       0,   208,     0,     0,     0,     0,   209,     0,     0,     0,
       0,     0,   211,     0,   212,     0,     0,     0,   213,     0,
     214,   215,   216,   217,     0,     0,     0,     0,     0,     0,
     219,   220,   221,     0,     0,     0,   222,     0,  -308,   224,
       0,   225,   226,   227,     0,     0,   228,   229,     0,   230,
     231,   232,   233,     0,     0,     0,     0,   236,   237,   238,
       0,     0,   239,   240,  3945,   241,   242,   243,     0,     0,
       0,     0,     0,     0,   245,     0,   246,     0,   247,     0,
     248,   249,   250,   251,   252,   253,     0,   254,     0,     0,
       0,     0,   256,   257,     0,     0,     0,     0,     0,   260,
       0,     0,     0,   261,   262,   263,   264,  3946,     0,   265,
     266,   267,     0,   268,     0,   269,     0,     0,     0,     0,
     270,     0,     0,     0,     0,   272,     0,   273,   274,     0,
     275,   276,  3947,     0,     0,   277,     0,     0,     0,   279,
     280,     0,     0,   281,  3948,     0,   282,   283,     0,     0,
       0,     0,     0,   284,   285,     0,   286,     0,   287,     0,
     288,   289,     0,     0,     0,     0,  -289,     0,     0,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,     0,   305,   306,   307,     0,   308,
     309,   310,   311,     0,   312,   313,     0,     0,     0,     0,
     314,   315,   316,   317,   318,   319,     0,     0,   320,   321,
       0,   322,     0,   323,     0,   324,   325,   326,   327,   328,
     329,   330,   331,   332,     0,     0,   333,   334,     0,     0,
     335,   336,   337,   338,     0,     0,     0,     0,   340,     0,
       0,     0,     0,   341,   342,   343,     0,   344,   345,   346,
    3949,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   350,   351,     0,     0,     0,     0,   353,
     354,   355,     0,   357,   358,   359,   360,   361,   362,   363,
       0,     0,     0,     0,   366,   367,     0,   368,     0,   369,
     370,   371,   372,   373,     0,   374,   375,   376,     0,     0,
     377,     0,     0,     0,   378,   379,   380,   381,   382,     0,
       0,   383,   384,   385,   386,   387,     0,   388,     0,     0,
     390,     0,   392,  -289,     0,   393,     0,     0,     0,   395,
       0,     0,   397,   398,  3950,     0,     0,     0,   400,   401,
     402,   403,   404,   405,     0,   407,   408,     0,   409,     0,
       0,     0,     0,   411,   412,   413,     0,     0,     0,     0,
     415,     0,     0,     0,   416,     0,     0,   418,     0,     0,
     421,     0,   422,     0,   424,     0,   426,   427,     0,     0,
       0,     0,     0,     0,   428,   429,     0,   430,     0,     0,
     431,     0,     0,   432,     0,   434,     0,     0,     0,   436,
       0,   437,   438,   439,   440,   441,   442,     0,     0,   443,
     444,   445,   446,     0,   447,   448,     0,   449,     0,   450,
     451,   452,   453,     0,     0,   454,   455,     0,   456,   457,
     458,   459,     0,     0,     0,     0,     0,   460,   461,   462,
       0,     0,     0,     0,   464,   465,   466,     0,   467,   468,
       0,   469,   470,     0,     0,     0,     0,     0,   473,     0,
       0,   474,     0,     0,     0,   476,   477,   478,     0,     0,
       0,     0,     0,     0,   479,     0,     0,   480,     0,     0,
       0,   481,   482,   483,   484,   485,   486,     0,     0,  -289,
       0,     0,     0,   487,     0,     0,   489,     0,   491,     0,
     139,   492,   140,   141,   142,   143,   144,     0,     0,   145,
       0,     0,     0,   146,     0,     0,     0,     0,   148,   149,
     150,   151,   152,   153,     0,     0,  -334,     0,     0,     0,
     156,     0,     0,     0,   157,     0,     0,   158,   159,   160,
       0,   161,     0,     0,     0,     0,     0,   164,  3943,     0,
     165,   166,     0,   167,     0,     0,     0,     0,     0,   171,
     172,   173,   174,  3944,   176,   177,     0,   178,   179,     0,
       0,     0,     0,     0,     0,     0,   186,     0,   188,     0,
     190,   191,   192,   193,     0,   194,   195,     0,   196,   197,
     198,     0,   200,     0,   201,     0,     0,   202,     0,     0,
     203,     0,     0,     0,   204,     0,     0,     0,   205,   206,
     207,     0,     0,   208,     0,     0,     0,     0,   209,     0,
       0,     0,     0,     0,   211,     0,   212,     0,     0,     0,
     213,     0,   214,   215,   216,   217,     0,     0,     0,     0,
       0,     0,   219,   220,   221,     0,     0,     0,   222,     0,
       0,   224,     0,   225,   226,   227,     0,     0,   228,   229,
       0,   230,   231,   232,   233,     0,     0,     0,     0,   236,
     237,   238,     0,     0,   239,   240,  3945,   241,   242,   243,
       0,     0,     0,     0,     0,     0,   245,     0,   246,     0,
     247,     0,   248,   249,   250,   251,   252,   253,     0,   254,
       0,     0,     0,     0,   256,   257,     0,     0,     0,     0,
       0,   260,     0,     0,     0,   261,   262,   263,   264,  3946,
       0,   265,   266,   267,     0,   268,     0,   269,     0,     0,
       0,     0,   270,     0,     0,     0,     0,   272,     0,   273,
     274,     0,   275,   276,  3947,     0,     0,   277,     0,     0,
       0,   279,   280,     0,     0,   281,  3948,     0,   282,   283,
       0,     0,     0,     0,     0,   284,   285,     0,   286,     0,
     287,     0,   288,   289,     0,     0,     0,     0,  -289,     0,
       0,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,     0,   305,   306,   307,
       0,   308,   309,   310,   311,     0,   312,   313,     0,     0,
       0,     0,   314,   315,   316,   317,   318,   319,     0,     0,
     320,   321,     0,   322,     0,   323,     0,   324,   325,   326,
     327,   328,   329,   330,   331,   332,     0,     0,   333,   334,
       0,     0,   335,   336,   337,   338,     0,     0,     0,     0,
     340,     0,     0,     0,     0,   341,   342,   343,     0,   344,
     345,   346,  3949,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   350,   351,     0,     0,     0,
       0,   353,   354,   355,     0,   357,   358,   359,   360,   361,
     362,   363,     0,     0,     0,     0,   366,   367,     0,   368,
       0,   369,   370,   371,   372,   373,     0,   374,   375,   376,
       0,     0,   377,     0,     0,     0,   378,   379,   380,   381,
     382,     0,     0,   383,   384,   385,   386,   387,     0,   388,
       0,     0,   390,     0,   392,  -289,     0,   393,     0,     0,
       0,   395,     0,     0,   397,   398,  3950,     0,     0,     0,
     400,   401,   402,   403,   404,   405,     0,   407,   408,     0,
     409,     0,     0,     0,     0,   411,   412,   413,     0,     0,
       0,     0,   415,     0,     0,     0,   416,     0,     0,   418,
       0,     0,   421,     0,   422,     0,   424,     0,   426,   427,
       0,     0,     0,     0,     0,     0,   428,   429,     0,   430,
       0,     0,   431,     0,     0,   432,     0,   434,     0,     0,
       0,   436,     0,   437,   438,   439,   440,   441,   442,     0,
       0,   443,   444,   445,   446,     0,   447,   448,     0,   449,
       0,   450,   451,   452,   453,     0,     0,   454,   455,     0,
     456,   457,   458,   459,     0,     0,     0,     0,     0,   460,
     461,   462,     0,     0,     0,     0,   464,   465,   466,     0,
     467,   468,     0,   469,   470,     0,     0,     0,     0,     0,
     473,     0,     0,   474,     0,     0,     0,   476,   477,   478,
       0,     0,     0,     0,     0,     0,   479,     0,     0,   480,
       0,     0,     0,   481,   482,   483,   484,   485,   486,     0,
       0,  -289,     0,     0,     0,   487,     0,     0,   489,     0,
     491,     0,   139,   492,   140,   141,   142,   143,   144,     0,
       0,   145,     0,     0,     0,   146,     0,     0,     0,     0,
     148,   149,   150,   151,   152,   153,     0,     0,  -334,     0,
       0,     0,   156,     0,     0,     0,   157,     0,     0,   158,
     159,   160,     0,   161,     0,     0,     0,     0,     0,   164,
    3943,     0,   165,   166,     0,   167,     0,     0,     0,     0,
       0,   171,   172,   173,   174,  3944,   176,   177,     0,   178,
     179,     0,     0,     0,     0,     0,     0,     0,   186,     0,
     188,     0,   190,   191,   192,   193,     0,   194,   195,     0,
     196,   197,   198,     0,   200,     0,   201,     0,     0,   202,
       0,     0,   203,     0,     0,     0,   204,     0,     0,     0,
     205,   206,   207,     0,     0,   208,     0,     0,     0,     0,
     209,     0,     0,     0,     0,     0,   211,     0,   212,     0,
       0,     0,   213,     0,   214,   215,   216,   217,     0,     0,
       0,     0,     0,     0,   219,   220,   221,     0,     0,     0,
     222,     0,     0,   224,     0,   225,   226,   227,     0,     0,
     228,   229,     0,   230,   231,   232,   233,     0,     0,     0,
       0,   236,   237,   238,     0,     0,   239,   240,  3945,   241,
     242,   243,     0,     0,     0,     0,     0,     0,   245,     0,
     246,     0,   247,     0,   248,   249,   250,   251,   252,   253,
       0,   254,     0,     0,     0,     0,   256,   257,     0,     0,
       0,     0,     0,   260,     0,     0,     0,   261,   262,   263,
     264,  3946,     0,   265,   266,   267,     0,   268,     0,   269,
       0,     0,     0,     0,   270,     0,     0,     0,     0,   272,
       0,   273,   274,     0,   275,   276,  3947,     0,     0,   277,
       0,     0,     0,   279,   280,     0,     0,   281,  3948,     0,
     282,   283,     0,     0,     0,     0,     0,   284,   285,     0,
     286,     0,   287,     0,   288,   289,     0,     0,     0,     0,
    -289,     0,     0,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,     0,   305,
     306,   307,     0,   308,   309,   310,   311,     0,   312,   313,
       0,     0,     0,     0,   314,   315,   316,   317,   318,   319,
       0,     0,   320,   321,     0,   322,     0,   323,     0,   324,
     325,   326,   327,   328,   329,   330,   331,   332,     0,     0,
     333,   334,     0,     0,   335,   336,   337,   338,     0,     0,
       0,     0,   340,     0,     0,     0,     0,   341,   342,   343,
       0,   344,   345,   346,  3949,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   350,   351,     0,
       0,     0,     0,   353,   354,   355,     0,   357,   358,   359,
     360,   361,   362,   363,     0,     0,     0,     0,   366,   367,
       0,   368,     0,   369,   370,   371,   372,   373,     0,   374,
     375,   376,     0,     0,   377,     0,     0,     0,   378,   379,
     380,   381,   382,     0,     0,   383,   384,   385,   386,   387,
       0,   388,     0,     0,   390,     0,   392,  -289,     0,   393,
       0,     0,     0,   395,     0,     0,   397,   398,  3950,     0,
       0,     0,   400,   401,   402,   403,   404,   405,     0,   407,
     408,     0,   409,     0,     0,     0,     0,   411,   412,   413,
       0,     0,     0,     0,   415,     0,     0,     0,   416,     0,
       0,   418,     0,     0,   421,     0,   422,     0,   424,     0,
     426,   427,     0,     0,     0,     0,     0,     0,   428,   429,
       0,   430,     0,     0,   431,     0,     0,   432,     0,   434,
       0,     0,     0,   436,     0,   437,   438,   439,   440,   441,
     442,     0,     0,   443,   444,   445,   446,     0,   447,   448,
       0,   449,     0,   450,   451,   452,   453,     0,     0,   454,
     455,     0,   456,   457,   458,   459,     0,     0,     0,     0,
       0,   460,   461,   462,     0,     0,     0,     0,   464,   465,
     466,     0,   467,   468,     0,   469,   470,     0,     0,     0,
       0,     0,   473,     0,     0,  4282,     0,     0,     0,   476,
     477,   478,     0,     0,     0,     0,     0,     0,   479,     0,
       0,   480,     0,     0,     0,   481,   482,   483,   484,   485,
     486,     0,     0,  -289,     0,     0,     0,   487,     0,     0,
     489,     0,   491,     0,   139,   492,   140,   141,   142,   143,
     144,     0,     0,   145,     0,     0,     0,   146,     0,     0,
       0,     0,   148,   149,   150,   151,   152,   153,     0,     0,
       0,     0,     0,     0,   156,     0,     0,     0,   157,     0,
       0,   158,   159,   160,     0,   161,     0,     0,     0,     0,
       0,   164,     0,     0,   165,   166,     0,   167,     0,     0,
       0,     0,     0,   171,   172,   173,   174,     0,   176,   177,
       0,   178,   179,     0,     0,     0,     0,     0,     0,     0,
     186,     0,   188,     0,   190,   191,   192,   193,     0,   194,
     195,     0,   196,   197,   198,     0,   200,     0,   201,     0,
       0,   202,     0,     0,   203,     0,     0,     0,   204,     0,
       0,     0,   205,   206,   207,     0,     0,   208,     0,     0,
       0,     0,   209,     0,     0,     0,     0,     0,   211,     0,
     212,     0,     0,     0,   213,     0,   214,   215,   216,   217,
       0,     0,     0,     0,     0,     0,   219,   220,   221,     0,
       0,     0,   222,     0,     0,   224,     0,   225,   226,   227,
       0,     0,   228,   229,     0,   230,   231,   232,   233,     0,
       0,     0,     0,   236,   237,   238,     0,     0,   239,   240,
       0,   241,   242,   243,     0,     0,     0,     0,     0,     0,
     245,     0,   246,     0,   247,     0,   248,   249,   250,   251,
     252,   253,     0,   254,     0,     0,     0,     0,   256,   257,
       0,     0,     0,     0,     0,   260,     0,     0,     0,   261,
     262,   263,   264,     0,     0,   265,   266,   267,     0,   268,
       0,   269,     0,     0,     0,     0,   270,     0,     0,     0,
       0,   272,     0,   273,   274,     0,   275,   276,     0,     0,
       0,   277,     0,     0,     0,   279,   280,     0,     0,   281,
       0,     0,   282,   283,     0,     0,     0,     0,     0,   284,
     285,     0,   286,     0,   287,     0,   288,   289,     0,     0,
       0,     0,     0,     0,     0,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
       0,   305,   306,   307,     0,   308,   309,   310,   311,     0,
     312,   313,     0,     0,     0,     0,   314,   315,   316,   317,
     318,   319,     0,     0,   320,   321,     0,   322,     0,   323,
       0,   324,   325,   326,   327,   328,   329,   330,   331,   332,
       0,     0,   333,   334,     0,     0,   335,   336,   337,   338,
       0,     0,     0,     0,   340,     0,     0,     0,     0,   341,
     342,   343,     0,   344,   345,   346,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   350,
     351,     0,     0,     0,     0,   353,   354,   355,     0,   357,
     358,   359,   360,   361,   362,   363,     0,     0,     0,     0,
     366,   367,     0,   368,     0,   369,   370,   371,   372,   373,
       0,   374,   375,   376,     0,     0,   377,     0,     0,     0,
     378,   379,   380,   381,   382,     0,     0,   383,   384,   385,
     386,   387,     0,   388,     0,     0,   390,     0,   392,     0,
       0,   393,     0,     0,     0,   395,     0,     0,   397,   398,
       0,     0,     0,     0,   400,   401,   402,   403,   404,   405,
       0,   407,   408,     0,   409,     0,     0,     0,     0,   411,
     412,   413,     0,     0,     0,     0,   415,     0,     0,     0,
     416,     0,     0,   418,     0,     0,   421,     0,   422,     0,
     424,     0,   426,   427,     0,     0,     0,     0,     0,     0,
     428,   429,     0,   430,     0,     0,   431,     0,     0,   432,
       0,   434,     0,     0,     0,   436,     0,   437,   438,   439,
     440,   441,   442,     0,     0,   443,   444,   445,   446,     0,
     447,   448,     0,   449,     0,   450,   451,   452,   453,     0,
       0,   454,   455,     0,   456,   457,   458,   459,     0,     0,
       0,     0,     0,   460,   461,   462,     0,     0,     0,     0,
     464,   465,   466,     0,   467,   468,     0,   469,   470,     0,
       0,     0,     0,     0,   473,     0,     0,   474,     0,     0,
       0,   476,   477,   478,     0,     0,     0,     0,     0,     0,
     479,     0,     0,   480,     0,     0,     0,   481,   482,   483,
     484,   485,   486,     0,     0,     0,     0,     0,     0,   487,
       0,     0,   489,     0,   491,     0,     0,   492
};

static const yytype_int16 yycheck[] =
{
       6,   649,  1007,   555,   577,   697,   576,   577,   919,   920,
     899,   603,  1195,    19,  1124,  1008,    22,   124,   929,  1717,
    1096,   702,   966,  1195,   941,  1143,    32,  1090,  1091,  1167,
    1258,  1855,  1856,    39,   617,  1425,    42,  1425,    20,  1530,
      46,   813,  1327,   722,  1405,  1843,  2549,    29,    54,   966,
    1528,   676,  2590,     6,    36,  3275,  1217,  2383,  2346,  2479,
    1493,  2180,  2654,  1224,  2822,  1335,  2616,   939,  2883,     4,
     498,   523,  1134,  2159,  2193,   767,   757,  2668,  1012,   760,
     645,   646,  1519,  1511,  2016,    22,  1012,  1225,  1226,  2467,
      96,  1229,  1230,  1231,  1232,   967,  1234,  1235,  1236,  1237,
    1238,  1239,  1240,  1241,  2279,  2194,   658,   659,  1436,   663,
    1843,  3281,    47,   119,  3025,   121,  2071,   123,   124,   125,
    2408,  2398,  2455,  2138,  1552,  2544,  2523,  1455,  2017,  2317,
    2138,  1501,  2021,  1997,  3510,  1463,  1464,  2460,   786,    17,
    2014,    25,   882,  2032,    34,  2468,    19,    16,    17,    19,
     775,   776,   777,  2042,  2014,   583,    73,    51,   586,    96,
    3176,   131,   787,  1854,  1969,  1970,    17,  2743,   121,    30,
     123,  3551,  3338,  3339,  3299,    82,  3342,    16,    17,   128,
     114,  1986,  2127,    25,  3548,   968,    19,  2526,   112,    12,
       9,  2630,    56,    19,   151,  3361,   175,    64,  2003,  2004,
    1988,  3979,  3368,    16,    17,  2163,  2466,    21,   157,    28,
     175,  2273,    21,   151,  2019,  2020,    35,  2022,   164,  2512,
    2025,  2026,    70,   209,  2029,    34,    16,    17,    60,  2034,
      47,   195,   815,  2038,  2039,  2040,  2041,   267,  2685,    48,
    2045,  2046,   161,  2048,   145,    59,    60,   987,   313,  2054,
      59,    60,  2057,  2058,    34,  2060,  2508,  2509,    43,   388,
      21,    71,    36,   358,  2138,   389,   225,    58,   373,   128,
      86,   266,  3561,    34,    63,    10,   128,   418,  2138,   157,
    1960,   250,     8,  1511,   157,  3451,  3506,    48,   161,  2006,
     147,   161,   443,    36,   877,   229,    12,   450,    59,    60,
      40,   278,   467,   183,    25,   157,   405,   128,   284,   202,
     302,   435,    16,    17,   221,   134,   223,  2122,  2123,  2124,
    2125,   225,  1014,    20,  1552,    83,  2815,  4105,   268,    16,
      17,   271,   129,   541,    12,   161,   157,    82,   390,  2809,
      71,   273,   267,   373,   267,   252,    41,   354,   232,   157,
     573,   157,   514,   394,  2682,  2683,   166,   586,   394,   336,
    2688,  3624,  2690,   210,  3627,  2451,    16,    17,    16,    17,
    2622,  2623,    16,    17,    16,    17,   256,  3741,   151,   531,
     273,   248,   512,   535,   175,   607,   168,  3736,   179,     8,
     232,   418,  2433,   132,    70,   593,    16,    17,   596,   190,
     189,   508,   510,   632,   352,  2656,   253,   506,   631,   638,
     632,    30,   439,   195,   284,   132,  3765,   225,  3681,    16,
      17,   413,  3588,   531,   356,   309,   433,    16,    17,   637,
     582,  3597,  2902,    16,    17,   414,   133,   544,   159,   213,
     135,   405,   418,   470,    66,   242,  2404,   188,   373,   414,
     373,   492,    46,   401,  1133,  3621,   492,   183,   557,   157,
    3626,   267,   366,   141,   594,   630,   607,   309,  1147,   634,
     213,  3847,  1037,    51,   354,   415,    16,    17,    16,    17,
     449,   632,   441,  1255,   225,   638,   190,  1398,  1481,   541,
     354,   658,   659,   485,  3783,  3665,    16,    17,   357,   661,
     599,   630,   508,   372,   510,   491,   375,  3727,   632,    16,
      17,   232,  2890,   355,    63,  1876,  1068,  1069,  1070,   236,
     377,   527,   302,    16,    17,   531,   317,   632,   623,  2949,
     161,   959,  2931,  2930,   540,   512,  2933,  2934,   544,  1767,
     546,  2032,   192,   573,    16,    17,    16,    17,   418,  2826,
    2827,  2828,   175,   559,   448,  2952,   341,   476,  1430,   372,
    1988,  1433,   375,   498,   374,   630,  1438,  1501,   161,   267,
     576,   535,  1220,  2528,   475,  1501,  1493,  2532,  1318,   472,
     161,   161,   372,   589,  2670,   375,  2014,   115,   309,  2928,
     118,  2546,  2547,   146,  1466,  1467,  3766,    16,    17,    16,
      17,  2556,   608,  1228,    16,    17,  1934,  1745,  1348,  2473,
     605,   617,   547,   619,   403,  2630,   210,  1551,  1756,   584,
    1245,  1759,  2630,   414,   630,  1551,  2063,  2920,  3067,  2584,
     636,  2891,  2892,   441,   355,   641,   612,   643,  2512,   645,
     646,  3217,  4420,   374,   650,   651,   462,   604,   583,   655,
    2327,   586,  2512,   632,   521,   590,   602,  1109,  1110,   665,
     666,   667,   485,  3478,   512,   671,   604,  2531,   372,  2533,
     405,   375,   192,    64,   516,   599,  2540,  1739,  1461,  2624,
    4044,   615,  2744,   636,  1136,   372,  4066,   636,   375,  2553,
     660,   552,  1144,   630,  1146,  2559,  2560,  2652,  1263,  2127,
     607,   552,  3278,  2491,   641,   812,  1158,  1159,  1160,  2667,
    2138,  2575,  2576,   630,  1166,  1825,   722,   536,  1301,  2410,
    3845,  4097,   372,  3893,   372,   375,   552,   375,   372,   607,
     372,   375,  3748,   375,  2539,   554,  2600,  3226,   632,  1511,
     630,  2605,   612,   562,  2830,  2831,  2551,   616,   632,  2613,
    2614,  2121,   372,   586,  2618,   375,  2630,   571,   636,   601,
    1988,   593,   571,   636,  3090,  1330,   635,   541,  2956,   485,
    2630,   506,   591,   513,   780,   372,   782,   616,   375,  2459,
    1552,   598,  1347,   372,   636,   574,   375,   596,  1371,   372,
     607,   414,   375,  2510,   534,   516,   586,  1537,   541,   605,
     806,   807,   808,   616,   810,   811,   812,   565,   814,   815,
     571,  1394,   919,  2854,  3066,   636,   923,   924,   631,   632,
     560,   630,   557,  2628,    16,    17,   616,  3997,   636,   574,
     636,   604,   372,   940,   372,   375,   512,   375,   554,  4215,
     579,   632,   632,  3094,   585,   476,   852,    16,    17,    16,
      17,  1434,   372,  1281,   807,   375,    51,   248,   811,   865,
    1414,   814,   579,   485,   599,   372,   460,   367,   375,  1036,
     448,   877,   878,  3320,  3321,  2353,   882,   426,   391,   372,
     601,  3328,   375,   476,  3331,  3332,    90,  3265,  3285,  3288,
      68,  3269,  4101,  3312,  3117,   476,   476,  3223,  3010,  2127,
     372,  3348,   372,   375,  4070,   375,  4072,   605,    16,    17,
    2138,   632,   616,   919,   467,  3362,   216,   923,   924,  1086,
     355,  3368,  3369,  3370,  3371,  1353,  3259,   631,   865,   616,
     541,  3842,    16,    17,   940,  1505,   871,   365,   636,   195,
    2764,   878,  3265,  3820,   631,   632,  3269,  3235,   361,    16,
      17,  1862,  3543,   372,  3231,   372,   375,    32,   375,   350,
     372,   584,   188,   375,    16,    17,   616,    23,   616,    16,
      17,  1882,   616,  4143,   616,   144,  2800,    16,    17,    88,
      19,   987,   632,   631,   632,  1929,  1665,   631,   632,   631,
     632,  4069,    16,    17,  3322,  3442,   616,   365,  3326,   225,
     819,   229,  1008,  4223,    16,    17,  1560,   638,   283,   632,
     341,   631,  1929,    73,  3100,    16,    17,   545,   302,   616,
     548,  1965,    16,    17,   959,  2823,   961,   616,  3356,  3357,
    3358,  1037,   363,   616,  2525,  2526,  3364,   269,   161,   281,
    3129,   610,   631,   632,  3372,   638,  2920,   461,  1965,   632,
    1922,  2441,  3067,  2443,  2444,  2443,  2444,   638,   638,  3067,
    2920,  1933,  2994,  2491,  1936,  1937,   531,   190,   125,   140,
     535,    16,    17,    16,    17,     6,   616,   630,   616,   342,
    2218,   634,  1088,   651,  2512,  3260,  1092,   600,   630,  2165,
    2823,   631,   632,   631,   632,  2365,   616,    16,    17,   154,
    1207,    16,    17,  2780,  2781,  2782,  2995,   157,    25,   616,
     165,   631,  3440,   169,    16,    17,   358,   508,    16,    17,
      25,  3449,   467,   616,  2452,   632,    57,  1133,   185,  2290,
     521,    16,    17,  1758,    11,    16,    17,  1244,   638,   632,
    3125,  1147,  4351,  2580,   616,   193,   616,   247,   104,   405,
    3373,  1088,  3743,    16,    17,  1092,   213,  3535,  3536,   354,
     632,   142,   632,  2074,  1843,   440,   601,   232,   243,   142,
     125,    16,    17,   125,  3038,   284,   159,    82,  2296,  2297,
     372,    16,    17,   375,   612,  2883,  2471,  2121,  3274,  1195,
    1773,   266,  3304,  3067,   423,  2121,  2624,   616,   342,   616,
    2383,  1207,  2630,   372,   616,   372,   375,  3067,   375,   413,
    1775,  1763,   512,   632,   145,   632,  1988,    16,    17,   632,
     632,    80,   613,  2361,   281,   457,  1809,  2289,  3778,  3779,
    3988,  1338,    16,    17,   247,  4112,  4051,  2299,  1244,   192,
     418,   541,   810,  1249,   612,  4323,  4324,   318,  1254,   232,
    1833,  1834,   129,   448,   159,   586,  3848,  1263,  4135,  4136,
     192,  1886,   535,  2491,   372,   126,   624,   375,  1820,    16,
      17,   176,    52,   631,    16,    17,  2709,   233,   541,   535,
     475,   319,  3820,    63,  4504,   630,  2469,   240,   372,   125,
     355,   375,    16,    17,   250,  1301,   467,  2469,   562,   483,
     130,   358,    16,    17,   567,   372,   262,  1313,   375,  1315,
     178,  2789,  1318,  3432,   225,   232,   371,  1254,   418,    12,
     372,  3830,   586,   375,  1330,   372,   281,   232,   375,   281,
     189,   606,  1338,   372,    16,    17,   375,  3663,   386,   568,
    3295,  1347,  1348,    12,    16,    17,  1281,   407,   372,   185,
     331,   375,   427,   476,  3339,  2127,  1784,   125,   331,   585,
     372,  3316,   467,   375,   210,  1371,  2138,   630,  1374,     0,
     229,   372,   355,   284,   375,  2558,  1382,   213,   372,  1385,
     241,   375,    16,    17,  1319,   341,  2558,   161,  1394,    16,
      17,   234,   309,   577,   253,    21,  2624,   541,  1404,  1405,
     243,  1508,  2630,   358,   309,   418,   358,   253,    34,  1415,
    1416,  1417,  1418,  1419,  1420,  4063,   348,   185,  1353,  1425,
     373,   352,    48,   567,   616,  1431,  1432,   372,  1434,   372,
     375,  1437,   375,    59,    60,   619,   484,  2928,  3947,  3948,
     632,   498,    16,    17,   349,   281,    12,   616,   141,   616,
     355,   516,  1458,   372,   284,   205,   375,   372,    12,   630,
     375,   467,  1415,  1416,  1417,   632,  1419,    16,    17,   467,
     372,   531,   141,   375,   372,  1410,  3896,   375,   161,  1432,
      82,  1418,  2872,  1420,  1437,   540,   417,   372,   419,   357,
     375,   372,  2920,   273,   375,   509,   556,   453,   375,   138,
     250,   539,  1508,   414,  2995,    16,    17,   564,   616,   372,
    4158,  2621,   375,   281,   153,   362,  1522,   190,  2429,  1525,
    1526,  1458,   358,  3849,   632,   630,   540,   372,   566,   467,
     375,  1537,   616,   516,   250,   378,   601,   372,   234,   432,
     375,   467,   467,   390,   403,   467,   262,   243,   632,   616,
    1556,   168,  1558,  1559,    12,  1561,  1562,    16,    17,   420,
    3679,   517,    16,    17,   616,   632,    16,    17,  1574,   616,
    1576,    16,    17,   372,  4112,   141,   375,   616,   195,  1514,
     632,  4090,  4091,   168,   631,  1522,   130,   141,   372,  1526,
     358,   375,   616,  2669,    89,    16,    17,  4135,  4136,  2760,
    3947,  3948,   192,   276,   616,  1558,  1559,  3895,   632,   564,
     129,   516,   564,   108,   507,   616,    16,    17,   601,   221,
     632,   223,   616,   373,   630,   372,  4227,  2810,   375,  4230,
     372,   632,   630,   375,    16,    17,   243,   631,  2810,  3067,
      16,    17,   623,   624,   625,   626,   627,   628,   372,   632,
     252,   375,   625,   626,   627,   628,   263,   518,   372,  1665,
    1666,   375,    16,    17,    16,    17,   351,   352,  2293,  1776,
     214,   616,   400,   616,  4183,    16,    17,   267,   192,   635,
      16,    17,   378,   141,    16,    17,   535,   632,   631,  4198,
     372,   559,   630,   375,   541,  3328,   601,   616,  3331,  3332,
     372,   616,  4211,   375,   630,   630,   205,   575,   630,  2390,
    2391,  2392,   129,   632,   616,  3348,   631,  1723,   616,  2491,
      16,    17,   229,   242,   221,  3203,   223,   632,   564,   243,
     632,   616,    16,    17,   632,   616,  2188,   453,   372,  4242,
     284,   375,   630,  2195,   638,   372,   253,   632,   375,    17,
     638,   632,  1859,   616,  4355,   797,  2208,    16,    17,  1765,
      19,  2530,  3560,   342,  4273,    16,    17,  1773,   631,  1775,
    1776,   616,   586,    16,    17,   630,  4285,  4286,   342,  3643,
    3478,   616,  1788,   638,  1790,  2554,  2555,   632,   631,  2241,
    1796,  1797,   192,  1799,   205,   631,   564,   632,   372,    16,
      17,   375,   224,  1809,    16,    17,  1812,   624,  3606,  3442,
    1816,    16,    17,   125,   631,  2398,   128,   616,   632,  2577,
      16,    17,   586,   372,   638,  4334,   375,  1833,  1834,  1835,
    1836,    39,   616,   632,  2603,  4344,  2946,  1843,    46,  3067,
    1846,  1847,  1848,   535,    16,    17,  4091,   631,   890,  1784,
     538,   511,  2624,  1859,  2306,   515,    16,    17,  2630,  1796,
    1797,   372,  1799,   229,   375,  2435,   229,   631,   632,   616,
    1876,   229,   544,   185,   616,  1812,  4385,   125,  4387,  1816,
      16,    17,    16,    17,   631,  1024,  1025,   224,  4397,   631,
     205,  1897,   616,  3254,    16,    17,  1831,  1302,  1835,  1836,
    1305,   213,   616,  1308,  4413,   367,  4415,   631,  4417,  1846,
    1847,  1848,  4053,   372,  4055,  4424,   375,   631,   372,   631,
     632,   375,   372,  2867,  1063,   375,  4435,   372,    47,  1935,
     375,   125,   467,  2822,   616,    16,    17,   185,  4285,  4286,
     475,   240,  4451,  4452,   616,   571,  1952,   608,   609,   631,
    2867,   372,   192,  1959,   375,    16,    17,  1892,  4467,  4468,
     562,   591,   541,  4472,   486,   213,   592,   593,  2538,   281,
     475,   632,   372,   221,   486,   375,  3261,   541,   631,   632,
      16,    17,   616,   284,   586,   631,  3104,  2898,   567,   616,
     372,   185,   636,   375,   631,   632,   372,   631,  1935,   375,
      16,    17,   638,   567,   631,   580,  2878,    16,    17,   631,
     632,  3875,  3876,  3877,    16,    17,  3134,  3135,   372,   213,
     372,   375,  1959,   375,   369,    16,    17,   630,  4273,  2136,
    3420,   372,  3420,   281,   375,  2142,   372,  3155,  1973,   375,
     372,   506,   616,   375,  3227,   189,   358,  1982,  1983,   123,
    2056,   630,   552,    16,    17,   590,   591,   631,  1993,  1994,
    1995,  1996,     6,  1998,  1999,  2071,   630,   616,   441,    59,
      60,    11,    58,  2180,   467,   630,   372,   125,   630,   375,
     128,    71,   631,   631,   632,    82,  2193,   281,   372,  1131,
    3273,   375,   630,    16,    17,   630,    17,   631,   632,    16,
      17,  3273,    19,   596,   597,   616,   599,   630,   601,   178,
     358,   192,   630,   372,   630,    82,   375,   630,    16,    17,
     631,   372,   630,  3306,   375,   288,   289,   631,   632,   372,
    2136,   632,   375,   172,  3306,   541,  2142,   185,  2144,  1181,
    4385,  2147,  4387,  1185,  2823,   630,   220,   630,  2154,  2155,
    2156,  2157,   631,   632,  2160,   372,   630,   616,   375,   630,
     372,   630,   616,   375,   358,   213,   616,   372,  4413,   630,
     375,   616,   631,   630,  2180,  2282,   372,   631,  2936,   375,
     456,   631,    17,   631,   632,  3990,   631,  2193,   630,   175,
     631,   632,   630,   179,  2147,   616,   630,   590,   591,  4023,
     372,   631,   632,   375,   190,  2312,  4451,  4452,   544,  2967,
     631,   630,   372,   638,  2766,   375,   616,  2154,  2155,  2156,
    2978,   142,   630,  2981,  2807,  4030,  4031,  3290,  3291,  4034,
    4035,  4036,  4037,   281,   616,   232,   372,   630,   372,   375,
     616,   375,   630,  2826,  2827,  2828,  4110,   321,   363,   631,
     372,   325,   564,   375,   221,   631,   223,   155,   332,  3377,
     631,   632,   616,   630,   616,    31,   630,   430,   431,   192,
    3761,  3762,   631,   632,  3032,   616,  2282,   631,   516,   631,
     616,   111,   351,   352,   616,   252,    59,    60,   357,   586,
     631,   372,   735,   404,   375,  3067,   631,   632,    85,   631,
      87,  2307,   630,  2755,   631,   632,  2312,   142,   630,  3220,
     358,   372,   755,  3257,   375,   370,   564,    63,    84,   630,
     616,  2327,  3505,   631,   632,   768,   769,   630,  4133,  4134,
     630,   317,   616,  3505,    80,   631,   372,  4142,   412,   375,
    3257,   128,  3418,   631,   632,   630,    92,   631,   544,   631,
     632,   630,   349,  4051,  2360,   630,   372,   616,   355,   375,
    2366,   630,   149,   372,   630,   616,   375,    11,    82,    34,
     564,  2478,  2479,   616,  1797,   630,  1799,  2383,   456,   531,
     631,   372,   631,   632,   375,   215,   631,   632,   631,   155,
     632,   465,  2398,   630,    19,    60,   630,   184,   630,   616,
     630,    26,   630,    12,   616,  2411,   630,  2413,   630,   372,
     331,   616,   375,   363,   631,   630,  1102,  1103,  1104,   631,
     616,   125,   363,  1846,  1847,  1848,   631,   424,   414,  2435,
     631,   632,   631,   632,  1120,  2441,   225,  2443,  2444,   630,
    3550,   630,  2549,   189,   616,   159,    71,   630,   194,   372,
     115,   630,   375,   118,   532,   372,   616,    82,   375,   631,
     538,   126,   630,  2469,   630,  3458,  1152,   111,   630,  1155,
      49,   631,  2478,  2479,   372,   630,  2411,   375,   143,    25,
     616,   185,   616,   229,   630,   129,   125,   630,  1174,  1175,
     559,   630,  1178,   630,   616,   631,   331,   631,   631,   632,
     630,  3855,  3856,   128,   582,   630,   575,   253,   492,   631,
    1196,  1197,  2518,   631,   632,   203,   564,  2523,   232,   516,
     630,   599,  2528,    19,   168,   630,  2532,   630,  2534,   603,
     630,    12,   141,   631,   632,   616,    82,  2519,  2544,   630,
    2546,  2547,   111,  2549,   618,   630,   185,  2529,   630,   379,
    2556,   195,  2558,  2535,   630,   616,   631,   478,   479,   630,
     390,    42,  2568,   631,   632,   631,   632,   397,   631,   632,
     631,  2577,   569,   198,   213,  2557,   241,   281,  2584,  2585,
     616,  2563,   631,   632,  2590,   631,   632,  2569,  2570,   631,
     632,  2597,   630,   104,   381,   631,   221,   630,   223,   168,
     616,  2536,  2537,   630,   601,   214,  4430,   616,   104,   631,
     632,    80,   631,   632,   278,   631,    97,   630,   306,   307,
     630,   102,   631,   311,   312,   616,   195,  2562,   253,   630,
     176,  2568,   630,   277,   400,   349,   631,   632,   425,    49,
     631,   355,   281,   478,   479,  2651,  2652,  4001,  3231,   631,
     632,  4005,   630,   616,   358,  2590,   422,   403,   631,   632,
     490,   157,   631,   632,   630,   161,  2601,  2602,   631,  2604,
     632,  2606,  2607,  2608,  2609,  2610,  2611,  2612,   343,   363,
    2615,  4505,  2617,  3253,   363,  2620,   232,   461,   454,   631,
     632,  3143,   188,   616,   190,   631,   632,   631,   632,   616,
     621,   622,   623,   624,   625,   626,   627,   628,  3619,   205,
     424,   631,   632,   573,  2651,   211,   631,   632,   616,   358,
     189,   625,   233,   631,   632,   475,   351,   352,   638,   225,
     486,  3183,   357,   977,   978,   979,   638,   233,   363,   250,
     167,   985,   986,   104,   240,   511,  3884,   631,   632,   495,
     630,   262,   582,   104,   250,   631,   632,   267,    60,   125,
     229,   405,   190,   309,   245,   512,   262,  3416,  3417,    12,
    2776,   267,   531,  2779,  2780,  2781,  2782,   512,   403,    63,
     276,    82,  2788,   278,   253,   158,   621,   622,   623,   624,
     625,   626,   627,   628,   190,    96,    80,   631,   632,   151,
     152,  2807,   516,   349,  2810,  3798,  4160,  4161,    92,   355,
      91,  3804,   632,   115,   631,   632,   118,  2823,   483,   185,
    2826,  2827,  2828,   632,   126,  3707,  3708,   364,   574,   473,
     341,  1182,  1183,  2839,  3237,  3238,   405,   318,  4021,  3196,
    3197,   143,  2949,  3487,  3488,   341,   471,   213,  3400,  4021,
     527,  2788,   363,   631,   157,   569,   128,   114,   637,  3429,
     564,     6,   506,   142,   113,   630,  2872,   363,     4,    36,
     525,   526,   233,   466,   529,   530,   599,   373,   533,   243,
     535,   632,   233,   548,   186,   389,    56,   601,   532,   250,
     433,   500,   501,   114,   503,  1581,   505,   172,   141,   250,
     381,   262,   222,   632,  2839,   189,   632,  3556,   517,   405,
     194,   262,   577,   638,  4024,   281,    71,   604,   632,    12,
     389,   631,   631,   541,  2930,   564,   141,  2933,  2934,     9,
    2936,    26,    27,   632,   403,   638,   631,   631,   638,   241,
     630,   266,   453,  2949,   637,   229,  2952,   638,   159,   574,
     632,   118,   278,    49,   255,   599,   278,   453,   125,   278,
     278,  2967,   278,    55,    59,    60,   535,    62,   278,   253,
     516,   214,  2978,    65,   632,  2981,    71,   531,   630,   475,
     341,  1667,   273,   632,   388,  1671,   632,    82,   557,    81,
     341,   552,   358,   552,   632,    90,   632,  3003,    26,    27,
    3006,    93,    94,    95,   161,  3011,   517,  1693,   632,   632,
      71,   178,   363,   494,   512,  2950,   632,   109,   185,   114,
    3026,   517,    32,  2958,  3030,   243,  3032,  4137,   329,    82,
     599,    59,    60,   128,    62,   625,   131,    90,   340,  4222,
     111,   343,   244,    71,   529,   180,   213,   528,   190,   632,
    4222,   167,   331,   354,    82,   601,   512,   489,   392,  3065,
     137,   114,    90,   363,   159,   632,    36,   631,   580,  3006,
     632,   611,   585,  3026,  3080,   195,   363,   573,  4071,   142,
     363,  3087,   632,   363,   192,  3996,   114,   631,   192,   585,
     586,   632,   453,  3099,  3775,  3776,  3777,   631,   631,  3988,
     128,   631,   453,   131,   631,   389,   159,  3582,  3583,   605,
     625,   607,   111,   631,   281,   416,   624,  3809,   420,   403,
    3595,  3770,  3771,   194,  3773,  3774,   221,  3602,   223,   631,
     631,   159,   142,  3240,   229,   631,   632,  3072,   630,   635,
     636,   631,   237,   631,   631,   631,   476,   631,   118,   632,
    3087,   573,   632,  3628,  3629,   125,   517,   252,   229,   631,
     631,   631,   817,  4301,   630,   630,   517,   628,   630,   168,
     552,  3177,   631,   231,  3744,   342,   229,   632,  3730,  3185,
     605,   630,   523,   630,    12,   203,   353,   192,   638,   630,
     357,   358,   630,   221,   264,   223,   195,   632,   564,   478,
     479,   229,   632,  3209,   638,   506,   277,   638,   178,   237,
     192,   495,  4123,   308,   638,   185,   142,   631,   170,   457,
     413,  3227,  3228,   578,   252,  3231,   632,   475,   320,   632,
     229,   326,   632,   243,  3240,   190,    47,   339,   266,   506,
    3246,  3833,  3934,   213,   506,   337,   548,  3253,  3254,   466,
    3185,   506,   506,   506,    80,   308,   266,   500,   501,   502,
     503,   504,   505,  4401,   389,   523,    34,  3273,   331,   137,
     389,   389,   251,   326,   517,   577,   552,   251,   277,  3285,
     308,   532,  4465,   137,   389,   380,   532,   382,    47,  3295,
     574,  3297,   389,  4465,   630,   390,   349,   142,   326,    67,
    3306,   387,   389,   436,   389,  4488,  3312,   389,  3314,   161,
    3316,   281,  4495,   161,   161,   161,  4488,  3890,  4501,  4312,
    4313,   331,  4315,  4495,   161,  3432,   161,   161,   161,  4501,
     161,   161,   161,   632,   161,   277,   161,   161,   161,   161,
     161,   351,   352,   622,   623,   624,   625,   626,   627,   628,
     586,   161,   380,   161,   382,   161,   630,   155,   161,   162,
     638,   631,   390,   458,   239,   631,   239,   135,   631,   638,
     631,   463,   342,  4366,   541,  4368,  4369,   552,   545,   631,
     552,   548,   632,  3389,  3936,   632,   631,   357,   358,   631,
     631,   159,   559,   196,   638,   163,   552,   564,   243,   638,
     567,   400,   473,   541,   207,   331,   405,   612,   273,  3415,
    3416,  3417,    88,  3520,  3420,   478,   479,   427,   676,    47,
     630,   516,   630,   681,   495,   552,  3432,   519,   161,   197,
     458,   630,   370,  4426,   192,   192,   192,   532,   240,   192,
     541,   536,   541,   246,   632,   537,   247,  3382,   216,   418,
     170,   358,   376,  4101,   250,   258,   623,   624,  4463,   717,
     555,   532,   230,   516,   535,   250,  4039,   538,   478,   479,
     114,  3406,   322,   114,   473,   253,   734,   253,   573,   532,
     638,   630,   285,   493,   552,   369,   331,   630,   516,   630,
     205,    26,   541,   450,   389,  3501,   630,  3604,   638,  3505,
     630,   373,   625,   574,   532,   241,   630,   241,   536,   631,
     278,   582,   638,   607,  3520,   225,   631,   775,   776,   777,
     778,   631,   631,   363,   631,   631,   142,   555,   631,   787,
     268,   631,   630,   532,   302,   625,    71,   632,   389,   538,
     631,   192,   345,   632,   632,   573,   579,    82,   631,   243,
    3556,  4103,   478,   479,  4124,   631,   631,   638,   557,   631,
     623,   624,   625,   626,   627,   628,   632,  3573,   250,   418,
     250,   541,  3679,   363,   253,   545,   632,   632,   548,   630,
     253,   401,   632,   582,  3566,   630,   632,  4498,   631,   559,
     363,   363,    82,   128,   564,    19,   631,   567,  3604,   363,
     599,   632,   630,    13,   630,   492,    47,   467,   363,   631,
     868,   621,   622,   623,   624,   625,   626,   627,   628,   630,
     267,   630,   630,   630,  3630,   631,   469,   243,   631,   607,
     418,  3637,   203,   478,   479,   148,   404,   260,   631,  3746,
     632,   205,   250,   250,   632,   413,   630,   128,   128,   630,
    3656,   399,   638,   623,   624,    86,   144,   462,   477,   631,
     428,   632,    19,   631,   631,   631,   631,   485,   631,   631,
    3605,   631,    34,  3679,    34,   492,    60,   358,   446,   241,
     631,   631,   631,   631,   413,   328,   221,   255,   223,   276,
     607,   240,   370,   103,   630,   621,   622,   623,   624,   625,
     626,   627,   628,  4351,   631,   630,   161,   638,    47,   632,
    3645,   211,   632,   328,   630,   331,   586,   485,   253,   487,
     586,   630,   132,   631,   630,   630,  3732,   630,   183,   305,
     630,   630,   596,   596,    14,   145,   128,   579,   253,   253,
    3746,   196,    19,   357,   512,    34,   631,   170,    82,   632,
     630,  3757,   207,   457,   358,   632,   328,   174,   168,    17,
     541,   171,    96,   240,  3770,  3771,   534,  3773,  3774,   253,
     541,   541,   182,   535,   590,   363,   621,   622,   623,   624,
     625,   626,   627,   628,   353,  1043,   586,  4360,   510,  3896,
     450,   586,   591,   203,   630,   607,   170,   358,   138,   631,
     370,   256,   136,   258,   579,   522,   156,   190,  4456,    31,
     604,  4363,   190,    61,  3820,   583,   351,   352,   631,   229,
     543,   630,   357,   630,   639,   384,   236,   631,   363,   137,
     285,   137,   159,   630,  3840,  3841,    73,   426,   631,   630,
    1098,  1099,  4490,   604,   631,   405,  3852,   192,    19,  1107,
    1108,  1109,  1110,  1111,  1112,  1113,  1114,  1115,  1116,  1117,
    1118,  1119,   478,   479,    31,    63,   276,   370,   403,  1127,
    1128,    63,  1130,   523,  1132,   269,   630,  3883,  1136,   631,
    4432,  1139,  1140,  1141,  1142,  3820,  1144,  1145,  1146,   632,
    3896,    47,    47,   348,     5,  1153,  1154,   363,  1156,  1157,
    1158,  1159,  1160,   630,  3841,  1163,  1164,  1165,  1166,  1167,
    1168,  1169,  1170,  1171,  1172,  1173,   630,  3923,  1176,  1177,
     363,   255,  1180,   240,   155,   636,  1184,   136,  1186,  1187,
     370,   370,   144,   104,   630,    47,   471,    47,  3944,   154,
    1198,  1199,    47,  3949,   579,   132,  3883,   402,  1206,   604,
    4502,   155,   224,   283,   639,  1213,  1214,  1215,   127,  1217,
     150,   636,   457,   630,    47,    47,  1224,  1225,  1226,   631,
    1228,  1229,  1230,  1231,  1232,    47,  1234,  1235,  1236,  1237,
    1238,  1239,  1240,  1241,   253,    53,   157,  1245,  1246,   459,
     161,   636,   222,   632,   631,   329,   406,   155,    12,    13,
     544,   632,   208,   632,   636,   621,   622,   623,   624,   625,
     626,   627,   628,    47,   631,  4021,   426,   351,   352,   190,
     354,  4027,   631,    53,   434,   440,   632,   190,   190,   190,
     225,  4138,   442,   544,   205,   128,   358,   630,   475,   574,
     211,   119,   120,   121,   122,   123,   191,  4053,   606,  4055,
     632,  4057,  3954,  3643,  3989,  2319,  2619,   467,  3393,   961,
    2507,   659,   233,  3654,  1322,  3981,  4104,  4292,  1021,   240,
     480,   481,  4293,  3652,  3656,  3839,  4490,  4083,  4443,   250,
    4183,    46,   416,  2823,   578,  1842,  3830,  4453,  3830,   103,
    4331,   262,  3830,  3830,  3830,  4198,   267,  3830,  3830,  4176,
    3830,  3830,  3830,  4331,  4286,   276,  4112,  3830,  4211,  4202,
    3830,  3830,  4201,  1767,    16,    17,   526,  1061,   132,  1517,
    3986,  2070,  1519,  2976,  1382,  1527,  2802,  2366,  3209,  1335,
    4027,   145,  4138,  3884,  1392,  4242,  4127,  3503,  4144,   217,
     218,   219,   220,  4401,  4360,  4309,  1551,   557,  4039,  1407,
     518,  3661,  2063,  1411,   168,  3073,  2652,   171,  3316,  2071,
    2587,  3295,  3304,  3125,  3936,  4328,  3339,  3796,   182,   579,
     341,   581,   506,  3373,   681,  3615,  2478,  4112,  3604,  4124,
    4061,    11,    11,  4161,  1565,  4160,  3852,  3992,  2152,   203,
    4005,  3804,   363,  2070,  4001,  3297,  4131,  4132,   634,  2580,
    4307,  2457,   373,  1476,  1947,   991,  3570,  1465,  2378,  3296,
     717,  1526,  1547,  1835,  3204,   229,  4222,   119,   120,   121,
     122,   123,   236,  2788,  2353,  2402,  3832,   734,  2275,   602,
    2187,  4334,  1853,  2184,   405,  3185,  4242,   911,  2766,  2470,
    3263,  4344,  2274,   321,  3908,   323,   324,   325,  3764,  1147,
    4258,  4257,  4258,  4257,   332,  2300,  3389,  3306,  1120,  2872,
    3758,  1519,   276,  2576,  4432,  3746,  2407,  2157,  2347,  1348,
    1318,   778,  3505,  2382,  3222,  3221,  3273,   592,  4222,  1574,
    1930,   672,   453,   577,  1423,  2449,  1931,   577,  1787,  3314,
    1354,  3207,  4353,  4249,  4397,  4399,  4319,  4501,  4233,  4234,
    4495,  4307,  3606,  3227,   475,  2432,    34,  1720,  1382,  3253,
     576,   576,  4415,  3254,  4417,   217,   218,   219,   220,  1879,
    2424,  4424,  2418,  2425,   570,  1816,   893,  1310,  1372,  1587,
    4336,  1556,  4435,  3879,   412,   571,  3873,  4343,   514,    67,
    2776,   898,   514,   659,    -1,   659,   517,   659,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   868,    -1,    -1,  4467,  4468,    -1,    -1,    -1,  4472,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4484,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   464,   465,    -1,    -1,
    4325,    -1,   406,    -1,    -1,    -1,   410,    -1,    -1,    -1,
      -1,    -1,   573,    -1,    -1,    -1,    -1,   135,  4414,    -1,
      -1,    -1,   426,  4419,    -1,   586,    -1,    -1,    -1,   321,
     434,   323,   324,   325,    -1,    -1,    -1,    -1,   442,    -1,
     332,   159,    -1,    -1,   605,   163,   607,    -1,    -1,    -1,
      -1,  1699,  1700,  1701,    -1,    -1,    -1,    -1,    -1,    -1,
    4456,    -1,    -1,   467,    -1,  1713,    -1,    -1,    -1,  4465,
     631,   632,    -1,    -1,   635,   636,   480,   481,    -1,   197,
     372,    -1,    -1,   375,    -1,    -1,    -1,    -1,  4484,    -1,
      -1,  1739,  4488,    -1,  4490,    -1,    -1,  1745,   216,  4495,
    1748,    -1,  1750,    -1,    -1,  4501,    -1,    -1,  1756,    -1,
    1758,  1759,   230,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     412,    -1,   526,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   603,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1043,    -1,    -1,   617,
     618,    -1,    -1,   557,    -1,    -1,    -1,    -1,    -1,    -1,
     278,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   464,   465,    -1,   579,    -1,   581,    -1,    -1,
      -1,    -1,  1830,    -1,   302,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1098,  1099,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1107,  1108,    -1,    -1,  1111,  1112,  1113,  1114,  1115,  1116,
    1117,  1118,  1119,    -1,    -1,    -1,    -1,    -1,    -1,  1877,
    1127,  1128,    -1,  1130,    -1,  1132,    -1,    -1,  1886,    -1,
      -1,    -1,  1139,  1140,  1141,  1142,    -1,    -1,  1145,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1153,  1154,    -1,  1156,
    1157,    -1,    -1,    -1,    -1,    -1,  1163,  1164,  1165,    -1,
      -1,  1168,  1169,  1170,  1171,  1172,  1173,    -1,    -1,  1176,
    1177,    -1,    -1,  1180,    -1,    -1,   404,  1184,    -1,  1186,
    1187,    -1,    -1,    -1,    -1,   413,    -1,    -1,    -1,    -1,
      -1,  1198,  1199,    -1,    -1,    -1,    -1,    -1,    -1,  1206,
     428,   603,    -1,    -1,    -1,    -1,  1213,  1214,  1215,    -1,
      -1,    -1,    -1,    -1,   616,   617,   618,    -1,   446,    -1,
      -1,    -1,    -1,    -1,    -1,     6,    -1,    -1,    -1,    -1,
      -1,    -1,    13,    -1,    15,    -1,    -1,    -1,    -1,  1246,
      -1,    -1,    -1,    -1,    -1,    26,    27,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   485,    -1,   487,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    57,    -1,    -1,    -1,
      -1,    62,    63,    -1,   512,    -1,    -1,    -1,    69,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    82,    -1,   531,    -1,  2063,   534,   535,    -1,    90,
      -1,    -1,    -1,    -1,    -1,  1322,    -1,    -1,    -1,   100,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    26,    27,   114,    -1,  2093,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   128,    -1,    -1,
     131,    -1,    -1,    -1,    -1,   583,    -1,   138,   139,    -1,
      -1,    -1,    -1,    -1,   145,    -1,    -1,    62,    -1,    -1,
      -1,    -1,   153,    -1,    -1,  1382,   157,    -1,   159,    -1,
      -1,    -1,    -1,    -1,    -1,  1392,    -1,    82,    -1,    -1,
      -1,    -1,  2150,    -1,    -1,    90,    -1,    -1,    -1,    -1,
    1407,    -1,    -1,    -1,  1411,    -1,    -1,   188,  2166,    -1,
      -1,    -1,  2170,    -1,    -1,    -1,    -1,  2175,  2176,   114,
      -1,    -1,    -1,    -1,    -1,    -1,  2184,  2185,    -1,  2187,
    2188,  2189,  2190,   128,  2192,    -1,   131,  2195,    -1,    -1,
     221,    -1,   223,    -1,    -1,    -1,   227,  2205,   229,  2207,
    2208,    -1,  2210,  2211,  2212,  2213,   237,  2215,  1465,    -1,
    2218,    -1,    -1,    -1,   159,    -1,    -1,    -1,    -1,  2227,
      -1,   252,    -1,    -1,    -1,    -1,  2234,    -1,  2236,    -1,
    2238,  2239,  2240,  2241,    -1,    -1,    -1,  2245,  2246,  2247,
      12,    13,    -1,  2251,  2252,  2253,    -1,  2255,   226,  2257,
      -1,  2259,    -1,  2261,    -1,  2263,    -1,    -1,    -1,    -1,
    2268,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2283,   221,   308,   223,    -1,
      -1,    -1,  2290,    -1,   229,  2293,    -1,    -1,    -1,    -1,
      -1,  2299,   237,    -1,  2302,   326,    -1,    -1,  2306,   330,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   252,   286,   287,
     288,   289,   290,   291,    -1,   293,   294,   295,   296,   297,
     298,   299,   300,   301,    -1,   303,   304,    -1,    -1,    -1,
    1587,   103,    -1,    -1,    -1,    -1,    -1,   368,    -1,    -1,
      -1,    -1,   373,    -1,    -1,    -1,    -1,    -1,    -1,   380,
      -1,   382,    -1,  2361,    -1,    -1,    -1,    -1,   389,   390,
     132,    -1,    -1,   308,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   145,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   326,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     421,    -1,    -1,    -1,    -1,    -1,   168,    -1,    -1,   171,
      -1,    -1,    -1,    -1,   435,   436,   437,   438,    -1,    -1,
     182,    -1,    13,    -1,    15,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2433,    -1,   458,    -1,    -1,
      31,   203,    -1,    -1,    35,   380,    -1,   382,    -1,    -1,
      -1,    -1,  1699,  1700,  1701,   390,    -1,    -1,    49,    50,
      -1,    -1,   430,   431,    -1,    -1,    57,   229,    -1,    -1,
      -1,    62,    63,    -1,   236,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1739,    84,    -1,   516,    -1,    -1,    -1,    -1,
      -1,  1748,    -1,  1750,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   532,   103,    -1,   276,   536,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   458,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   124,   555,    -1,    -1,    -1,    -1,   560,
      -1,   132,   133,   134,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   573,   144,   145,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   157,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     171,   516,  2580,  1830,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   187,   532,    -1,    -1,
      -1,   536,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   203,    -1,    -1,   636,    -1,   208,    -1,    -1,
     555,   212,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1877,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   573,    -1,
      -1,    -1,    -1,    -1,   406,   236,    -1,   238,   410,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2656,    -1,
      -1,    -1,    -1,   254,   426,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   434,    -1,    -1,  2673,    -1,    -1,    -1,  2677,
     442,   272,    -1,    -1,    -1,   276,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   467,    -1,  2705,  2706,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   480,   481,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2725,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2734,    -1,  2736,    -1,
    2738,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2755,    -1,    -1,
      -1,    -1,  2760,    -1,   526,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   368,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2784,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   385,   557,    -1,    -1,   389,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   400,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   579,    -1,   581,
     411,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   433,    -1,    -1,   436,  2093,   438,    -1,    -1,
     441,    -1,    -1,   444,   445,    -1,  2854,    -1,    -1,    -1,
      -1,   452,    -1,   454,    -1,    -1,    -1,    -1,    -1,    -1,
     461,    -1,    -1,    -1,    -1,    -1,   467,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   475,    -1,    -1,    -1,    -1,   480,
      -1,   482,    -1,    -1,   485,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2905,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2166,
     511,    -1,    -1,  2170,   515,    -1,    -1,    -1,  2175,  2176,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2184,  2185,    -1,
    2187,    -1,  2189,  2190,    -1,  2192,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2205,    -1,
    2207,    -1,    -1,  2210,  2211,  2212,  2213,    -1,  2215,   560,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2227,   572,    -1,    -1,    -1,   576,    -1,  2234,   579,  2236,
      -1,  2238,  2239,  2240,   585,    -1,    -1,    -1,  2245,  2246,
    2247,    -1,    -1,    -1,  2251,  2252,  2253,    -1,  2255,    -1,
    2257,    -1,  2259,    -1,  2261,    -1,  2263,    -1,    -1,    -1,
      -1,  2268,    -1,   614,    -1,  3023,  3024,    -1,    -1,   620,
      -1,    -1,    -1,    -1,    -1,    -1,  2283,    -1,    -1,   630,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2299,    -1,    -1,  2302,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    13,    -1,    15,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3094,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    35,    -1,    -1,  3107,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    57,    -1,
      -1,    -1,    -1,    62,    63,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3140,  3141,    -1,  3143,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3152,    84,    -1,    -1,    -1,  3157,
      -1,    -1,  3160,    -1,  3162,  3163,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   103,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    12,  3183,  2433,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   124,    24,    -1,    -1,    -1,
    3198,    -1,    -1,   132,   133,   134,    34,    35,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   144,   145,    -1,    -1,    -1,
      -1,    -1,    -1,  3221,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    59,    60,    -1,    -1,    -1,    -1,    -1,    -1,    67,
      -1,    -1,   171,    -1,    72,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   187,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    99,    -1,   101,   203,   103,    -1,  3275,    -1,   208,
      -1,    -1,    -1,   212,   112,    -1,  3284,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   133,   134,   236,    -1,   238,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   254,    -1,    -1,    -1,    -1,
     158,   159,    -1,    -1,    -1,    -1,   164,    -1,    -1,   167,
      -1,    -1,    -1,   272,    -1,    -1,    -1,   276,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   193,    -1,   195,  3366,    -1,
      -1,    -1,    -1,    -1,   202,    -1,   204,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     228,   229,   230,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   251,    -1,    -1,  2673,    -1,    -1,    -1,
    2677,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   368,
      -1,    -1,    -1,    -1,    -1,   273,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   385,    -1,  2705,  2706,
     389,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   400,    -1,    -1,   302,    -1,    -1,    -1,  2725,    -1,
      -1,    -1,   411,    -1,    -1,    -1,    -1,  2734,    -1,  2736,
      -1,  2738,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   433,    -1,    -1,   436,  3506,   438,
      -1,    -1,   441,    -1,    -1,   444,   445,    -1,    -1,    -1,
      -1,    -1,    -1,   452,    -1,   454,    -1,    -1,    26,    27,
      -1,    -1,   461,    -1,    -1,    -1,    -1,  2784,   467,   367,
      -1,  3539,  3540,    -1,    -1,    -1,   475,    -1,    -1,    -1,
    3548,   480,    -1,   482,    -1,    -1,   485,    -1,    -1,    -1,
      -1,    59,    60,    -1,    62,   393,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    71,    -1,    -1,   404,   405,    -1,    -1,
     408,   409,   511,    -1,    82,    -1,   515,    -1,    -1,    -1,
      -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   429,    -1,    -1,    -1,    -1,    -1,  2854,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   114,  3615,    33,    34,
      -1,    -1,    -1,    -1,    39,    -1,    41,    -1,    43,    44,
     128,   560,    -1,   131,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   572,   472,    60,    -1,   576,    -1,    -1,
     579,    -1,    -1,    -1,    -1,    -1,   585,   485,  2905,    -1,
      -1,   159,    -1,  3661,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   512,   614,    -1,    -1,   516,    -1,
      -1,   620,    -1,    -1,    -1,    -1,    -1,    -1,  3696,    -1,
     115,   630,    -1,   118,    -1,    -1,   534,   535,    -1,    -1,
      -1,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   221,    -1,   223,    -1,    -1,   143,  3727,
      -1,   229,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   237,
      -1,    -1,    -1,  3741,    -1,   160,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   252,   583,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   594,    -1,    -1,   184,
      -1,   186,    -1,    -1,   602,    -1,  3023,  3024,    -1,    -1,
      -1,    -1,    -1,    -1,   199,   200,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     308,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   241,    -1,   326,    -1,
      -1,    -1,  3830,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3851,    -1,   270,    -1,  3855,  3856,    -1,
    3107,    -1,    -1,    -1,   279,   280,    -1,   282,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   380,    -1,   382,    -1,  3884,    -1,    -1,    -1,
      -1,    -1,   390,  3140,  3141,    -1,  3894,    -1,    -1,   314,
     315,   316,  3900,    -1,  3902,  3152,    -1,    -1,    -1,    -1,
    3157,    -1,    -1,  3160,    -1,  3162,  3163,    -1,   333,   334,
     335,    -1,    -1,    -1,    -1,   340,    -1,    -1,   343,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3941,   359,   360,    -1,    -1,    -1,  3947,
    3948,  3198,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     458,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3221,     6,    -1,    -1,    -1,    -1,
     395,   396,    13,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3992,    26,    27,    -1,    -1,    -1,
      -1,    -1,    -1,  4001,    -1,   420,    -1,  4005,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   516,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    57,    -1,  3275,    -1,
      -1,    62,    -1,    -1,   532,    -1,    -1,  3284,   536,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  4044,    -1,    -1,    -1,
      -1,    82,    -1,    -1,    -1,    -1,   471,   555,    -1,    90,
     475,    -1,    -1,    -1,    -1,  4063,    -1,    -1,    -1,   100,
      -1,    -1,    -1,   488,    -1,   573,    -1,    -1,  4076,    -1,
    4078,    -1,    -1,   114,    -1,    -1,    -1,    -1,    -1,    -1,
    4088,    -1,  4090,  4091,    -1,    -1,    -1,   128,    -1,    -1,
     131,    -1,    -1,    -1,    -1,    -1,    -1,   138,    -1,    -1,
      -1,    -1,    -1,    -1,   145,    -1,    -1,  4115,    -1,    -1,
      -1,    -1,   153,    -1,    -1,    -1,    -1,   542,   159,    -1,
     545,    -1,    -1,   548,   549,   550,   551,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   188,    -1,    -1,
    4158,    -1,  4160,  4161,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   592,   593,    -1,
      -1,    -1,    -1,  4181,    -1,  4183,    -1,    -1,    -1,    -1,
     221,    -1,   223,    -1,    -1,    -1,    -1,    -1,   229,    -1,
    4198,  4199,    -1,   618,    -1,    -1,   237,    -1,    -1,    -1,
      -1,    -1,    -1,  4211,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   252,    -1,    -1,    -1,  4223,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3506,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4272,  4273,    -1,   308,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4285,  4286,    -1,
      -1,    -1,  3539,  3540,    -1,   326,    -1,    -1,    -1,   330,
      -1,  3548,    -1,  4301,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  4334,    -1,    -1,    -1,
      -1,    -1,   373,  4341,    -1,    -1,  4344,    -1,    -1,   380,
      -1,   382,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   390,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4378,    -1,    -1,    -1,    -1,    -1,    -1,  4385,    -1,  4387,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4397,
      -1,    -1,    -1,  4401,    -1,   436,  4404,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  4413,    -1,  4415,    -1,  4417,
      -1,    -1,    -1,    -1,    -1,    -1,  4424,   458,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4435,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3696,
      -1,    -1,    -1,  4451,  4452,    -1,    -1,    -1,    -1,  4457,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4467,
    4468,    -1,    -1,    -1,  4472,    -1,    -1,    -1,    -1,    -1,
    3727,    -1,    -1,    -1,    -1,   516,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3741,    -1,    -1,    -1,    -1,    -1,
      -1,   532,    -1,    -1,    -1,   536,  4504,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   555,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   573,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3894,    -1,    -1,
      -1,    -1,    -1,  3900,    -1,  3902,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3941,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4044,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4076,
      -1,  4078,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4088,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4181,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  4199,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  4223,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  4272,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4341,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4378,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4404,     5,    -1,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    -1,    -1,    34,    35,    36,
      37,    38,    39,    40,    -1,    42,    43,    44,    45,    46,
      -1,    48,    49,    -1,    -1,    52,    53,    54,    55,    56,
    4457,    58,    59,    60,    61,    62,    -1,    64,    65,    66,
      67,    68,    69,    70,    -1,    72,    73,    74,    75,    76,
      77,    78,    79,    -1,    81,    82,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    -1,    93,    94,    95,    96,
      97,    -1,    99,   100,   101,   102,    -1,  4504,   105,   106,
     107,    -1,   109,   110,   111,    -1,   113,   114,   115,   116,
     117,   118,    -1,    -1,    -1,    -1,   123,   124,   125,    -1,
      -1,   128,   129,    -1,   131,    -1,    -1,    -1,   135,    -1,
     137,   138,   139,   140,    -1,    -1,    -1,   144,    -1,    -1,
     147,   148,   149,    -1,    -1,    -1,   153,    -1,   155,   156,
      -1,   158,   159,   160,    -1,    -1,   163,   164,    -1,   166,
     167,   168,   169,   170,   171,   172,    -1,   174,   175,   176,
     177,   178,   179,   180,    -1,   182,   183,   184,   185,    -1,
     187,    -1,    -1,    -1,   191,    -1,   193,    -1,   195,    -1,
     197,   198,   199,   200,   201,   202,    -1,   204,    -1,   206,
      -1,   208,   209,   210,    -1,   212,   213,    -1,   215,   216,
      -1,    -1,    -1,   220,   221,   222,   223,   224,    -1,   226,
     227,   228,    -1,   230,    -1,   232,    -1,    -1,    -1,   236,
     237,   238,   239,    -1,    -1,   242,    -1,   244,   245,    -1,
     247,   248,    -1,    -1,    -1,   252,    -1,    -1,   255,   256,
     257,    -1,   259,   260,    -1,   262,   263,   264,    -1,    -1,
      -1,    -1,    -1,   270,   271,    -1,   273,    -1,   275,    -1,
     277,   278,    -1,    -1,   281,    -1,    -1,    -1,    -1,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,    -1,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,    -1,    -1,    -1,    -1,
     317,   318,   319,   320,   321,   322,    -1,    -1,   325,   326,
     327,   328,    -1,   330,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,    -1,   342,   343,   344,    -1,    -1,
     347,   348,   349,   350,   351,   352,   353,   354,   355,    -1,
     357,   358,    -1,   360,   361,   362,    -1,   364,   365,   366,
     367,    -1,   369,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   379,   380,   381,    -1,   383,   384,    -1,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,    -1,   400,   401,   402,    -1,   404,    -1,   406,
     407,   408,   409,   410,    -1,   412,   413,   414,    -1,    -1,
     417,    -1,    -1,    -1,   421,   422,   423,   424,   425,    -1,
      -1,   428,   429,   430,   431,   432,    -1,   434,   435,    -1,
     437,   438,   439,   440,   441,   442,    -1,   444,    -1,   446,
     447,    -1,   449,   450,    -1,    -1,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,    -1,   465,   466,
      -1,    -1,    -1,   470,   471,   472,   473,    -1,    -1,    -1,
     477,    -1,    -1,    -1,   481,    -1,   483,   484,   485,   486,
     487,    -1,   489,   490,   491,   492,   493,   494,    -1,    -1,
      -1,    -1,    -1,    -1,   501,   502,    -1,   504,    -1,    -1,
     507,    -1,    -1,   510,   511,   512,   513,   514,   515,   516,
      -1,   518,   519,   520,   521,   522,   523,   524,   525,   526,
     527,   528,   529,   530,   531,   532,    -1,   534,    -1,   536,
     537,   538,   539,    -1,   541,   542,   543,    -1,   545,   546,
     547,   548,    -1,    -1,    -1,    -1,   553,   554,   555,   556,
      -1,   558,   559,   560,   561,   562,   563,   564,   565,   566,
     567,   568,   569,    -1,   571,   572,    -1,    -1,   575,    -1,
      -1,   578,    -1,   580,    -1,   582,   583,   584,    -1,    -1,
     587,   588,   589,   590,   591,    -1,    -1,   594,   595,    -1,
     597,   598,   599,   600,   601,   602,   603,    -1,    -1,    -1,
      -1,    -1,    -1,   610,   611,    -1,   613,   614,   615,    -1,
      -1,   618,    -1,    -1,    -1,    -1,   623,   624,    -1,    -1,
      -1,    -1,   629,   630,    -1,    -1,   633,   634,    -1,    -1,
     637,   638,     5,    -1,     7,     8,     9,    10,    11,    12,
      -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    -1,
      -1,    34,    35,    36,    37,    38,    39,    40,    -1,    42,
      43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,
      53,    54,    55,    56,    -1,    58,    59,    60,    61,    62,
      -1,    64,    65,    66,    67,    68,    69,    70,    -1,    72,
      73,    74,    75,    76,    77,    78,    79,    -1,    81,    82,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    -1,
      93,    94,    95,    96,    97,    -1,    99,   100,   101,   102,
      -1,    -1,   105,   106,   107,    -1,   109,   110,   111,    -1,
     113,   114,   115,   116,   117,   118,    -1,    -1,    -1,    -1,
     123,   124,   125,    -1,    -1,   128,   129,    -1,   131,    -1,
      -1,    -1,   135,    -1,   137,   138,   139,   140,    -1,    -1,
      -1,   144,    -1,    -1,   147,   148,   149,    -1,    -1,    -1,
     153,    -1,   155,   156,    -1,   158,   159,   160,    -1,    -1,
     163,   164,    -1,   166,   167,   168,   169,   170,   171,   172,
      -1,   174,   175,   176,   177,   178,   179,   180,    -1,   182,
     183,   184,   185,    -1,   187,    -1,    -1,    -1,   191,    -1,
     193,    -1,   195,    -1,   197,   198,   199,   200,   201,   202,
      -1,   204,    -1,   206,    -1,   208,   209,   210,    -1,   212,
     213,    -1,   215,   216,    -1,    -1,    -1,   220,   221,   222,
     223,   224,    -1,   226,   227,   228,    -1,   230,    -1,   232,
      -1,    -1,    -1,   236,   237,   238,   239,    -1,    -1,   242,
      -1,   244,   245,    -1,   247,   248,    -1,    -1,    -1,   252,
      -1,    -1,   255,   256,   257,    -1,    -1,   260,    -1,   262,
     263,   264,    -1,    -1,    -1,    -1,    -1,   270,   271,    -1,
     273,    -1,   275,    -1,   277,   278,    -1,    -1,   281,    -1,
      -1,    -1,    -1,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,    -1,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
      -1,    -1,    -1,    -1,   317,   318,   319,   320,   321,   322,
      -1,    -1,   325,   326,   327,   328,    -1,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,    -1,   342,
     343,   344,    -1,    -1,   347,   348,   349,   350,   351,   352,
     353,   354,   355,    -1,   357,   358,    -1,   360,   361,   362,
     363,   364,   365,   366,   367,    -1,   369,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   379,   380,   381,    -1,
     383,   384,    -1,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,    -1,   400,   401,   402,
      -1,   404,    -1,   406,   407,   408,   409,   410,    -1,   412,
     413,   414,    -1,    -1,   417,    -1,    -1,    -1,   421,   422,
     423,   424,   425,    -1,    -1,   428,   429,   430,   431,   432,
      -1,   434,   435,    -1,   437,   438,   439,   440,   441,   442,
      -1,   444,    -1,   446,   447,    -1,   449,   450,    -1,    -1,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     463,    -1,   465,   466,    -1,    -1,    -1,   470,   471,   472,
     473,    -1,    -1,    -1,   477,    -1,    -1,    -1,   481,    -1,
     483,   484,   485,   486,   487,    -1,   489,   490,   491,   492,
     493,   494,    -1,    -1,    -1,    -1,    -1,    -1,   501,   502,
      -1,   504,    -1,    -1,   507,    -1,    -1,   510,   511,   512,
     513,   514,   515,   516,    -1,   518,   519,   520,   521,   522,
     523,   524,   525,   526,   527,   528,   529,   530,   531,   532,
      -1,   534,    -1,   536,   537,   538,   539,    -1,   541,   542,
     543,    -1,   545,   546,   547,   548,    -1,    -1,    -1,    -1,
      -1,   554,   555,   556,    -1,   558,   559,   560,   561,   562,
     563,   564,   565,   566,   567,   568,   569,    -1,   571,   572,
      -1,    -1,   575,    -1,    -1,   578,    -1,   580,    -1,   582,
     583,   584,    -1,    -1,   587,   588,   589,   590,   591,    -1,
      -1,   594,   595,    -1,   597,   598,   599,   600,   601,   602,
     603,    -1,    -1,    -1,    -1,    -1,    -1,   610,   611,    -1,
     613,   614,   615,    -1,    -1,   618,    -1,    -1,    -1,    -1,
     623,   624,    -1,    -1,    -1,    -1,   629,   630,    -1,    -1,
     633,   634,    -1,    -1,   637,   638,     5,    -1,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      -1,    -1,    21,    -1,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    -1,    -1,    34,    35,    36,    37,    38,
      39,    40,    -1,    42,    43,    44,    -1,    46,    -1,    48,
      49,    -1,    -1,    52,    53,    54,    55,    56,    -1,    58,
      59,    60,    61,    62,    -1,    64,    65,    66,    67,    68,
      69,    70,    -1,    72,    73,    74,    75,    76,    77,    78,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    -1,    93,    94,    95,    96,    97,    -1,
      99,   100,   101,   102,    -1,    -1,   105,   106,   107,    -1,
     109,   110,   111,    -1,   113,   114,   115,   116,   117,   118,
      -1,    -1,    -1,    -1,   123,   124,   125,    -1,    -1,   128,
     129,    -1,   131,    -1,    -1,    -1,   135,    -1,   137,   138,
     139,   140,    -1,    -1,    -1,   144,    -1,    -1,   147,   148,
     149,    -1,    -1,    -1,   153,    -1,   155,   156,    -1,   158,
     159,   160,    -1,    -1,   163,   164,    -1,   166,   167,   168,
     169,   170,   171,   172,    -1,   174,   175,   176,   177,   178,
     179,   180,    -1,   182,   183,   184,   185,    -1,   187,    -1,
      -1,    -1,   191,   192,   193,    -1,   195,    -1,   197,   198,
     199,   200,   201,   202,    -1,   204,    -1,   206,    -1,   208,
     209,   210,    -1,   212,   213,    -1,   215,   216,    -1,    -1,
      -1,   220,   221,   222,   223,   224,    -1,   226,   227,   228,
      -1,   230,    -1,   232,    -1,    -1,    -1,   236,   237,   238,
     239,    -1,    -1,   242,    -1,   244,   245,    -1,   247,   248,
      -1,    -1,    -1,   252,    -1,    -1,   255,   256,   257,    -1,
      -1,   260,    -1,   262,   263,   264,    -1,    -1,    -1,    -1,
      -1,   270,   271,    -1,   273,    -1,   275,    -1,   277,   278,
      -1,    -1,   281,    -1,    -1,    -1,    -1,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,    -1,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,    -1,    -1,    -1,    -1,   317,   318,
     319,   320,   321,   322,    -1,    -1,   325,   326,   327,   328,
      -1,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,    -1,   342,   343,   344,    -1,    -1,   347,   348,
     349,   350,   351,   352,   353,   354,   355,    -1,   357,   358,
      -1,   360,   361,   362,    -1,   364,   365,   366,   367,    -1,
     369,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     379,   380,   381,    -1,   383,   384,    -1,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
      -1,   400,   401,   402,    -1,   404,    -1,   406,   407,   408,
     409,   410,    -1,   412,   413,   414,    -1,    -1,   417,    -1,
      -1,    -1,   421,   422,   423,   424,   425,    -1,    -1,   428,
     429,   430,   431,   432,    -1,   434,   435,    -1,   437,   438,
     439,   440,   441,   442,    -1,   444,    -1,   446,   447,    -1,
     449,   450,    -1,    -1,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,    -1,   465,   466,    -1,    -1,
      -1,   470,   471,   472,   473,    -1,    -1,    -1,   477,    -1,
      -1,    -1,   481,    -1,   483,   484,   485,   486,   487,    -1,
     489,   490,   491,   492,   493,   494,    -1,    -1,    -1,    -1,
      -1,    -1,   501,   502,    -1,   504,    -1,    -1,   507,    -1,
      -1,   510,   511,   512,   513,   514,   515,   516,    -1,   518,
     519,   520,   521,   522,   523,   524,   525,   526,   527,   528,
     529,   530,   531,   532,    -1,   534,    -1,   536,   537,   538,
     539,    -1,   541,   542,   543,    -1,   545,   546,   547,   548,
      -1,    -1,    -1,    -1,    -1,   554,   555,   556,    -1,   558,
     559,   560,   561,   562,   563,   564,   565,   566,   567,   568,
     569,    -1,   571,   572,    -1,    -1,   575,    -1,    -1,   578,
      -1,   580,    -1,   582,   583,   584,    -1,    -1,   587,   588,
     589,   590,   591,    -1,    -1,   594,   595,    -1,   597,   598,
     599,   600,   601,   602,   603,    -1,    -1,    -1,    -1,    -1,
      -1,   610,   611,    -1,   613,   614,   615,    -1,    -1,   618,
      -1,    -1,    -1,    -1,   623,   624,    -1,    -1,    -1,    -1,
     629,   630,    -1,    -1,   633,   634,    -1,    -1,   637,   638,
       5,    -1,     7,     8,     9,    10,    11,    -1,    -1,    14,
      -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    -1,    -1,    34,
      35,    36,    37,    38,    39,    40,    -1,    42,    43,    44,
      -1,    46,    -1,    48,    49,    -1,    -1,    52,    53,    54,
      55,    56,    -1,    58,    59,    60,    61,    62,    -1,    64,
      65,    66,    67,    68,    69,    70,    -1,    72,    73,    74,
      75,    76,    77,    78,    79,    -1,    81,    82,    83,    84,
      85,    86,    87,    88,    -1,    90,    91,    -1,    93,    94,
      95,    96,    97,    -1,    99,   100,   101,   102,    -1,    -1,
     105,   106,   107,    -1,   109,   110,   111,    -1,   113,   114,
     115,   116,   117,   118,    -1,    -1,    -1,    -1,   123,   124,
     125,    -1,    -1,   128,   129,    -1,   131,    -1,    -1,    -1,
     135,    -1,   137,   138,   139,   140,    -1,    -1,    -1,   144,
      -1,    -1,   147,   148,   149,    -1,    -1,    -1,   153,    -1,
     155,   156,    -1,   158,   159,   160,    -1,    -1,   163,   164,
      -1,   166,   167,   168,   169,   170,   171,   172,    -1,   174,
     175,   176,   177,   178,   179,   180,    -1,   182,   183,   184,
     185,    -1,   187,    -1,    -1,    -1,   191,   192,   193,    -1,
     195,    -1,   197,   198,   199,   200,   201,   202,    -1,   204,
      -1,   206,    -1,   208,   209,   210,    -1,   212,   213,    -1,
     215,   216,    -1,    -1,    -1,   220,   221,   222,   223,   224,
      -1,   226,   227,   228,    -1,   230,    -1,   232,    -1,    -1,
      -1,   236,   237,   238,   239,    -1,    -1,   242,    -1,   244,
     245,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,    -1,
     255,   256,   257,    -1,    -1,   260,    -1,   262,   263,   264,
      -1,    -1,    -1,    -1,    -1,   270,   271,    -1,   273,    -1,
     275,    -1,   277,   278,    -1,    -1,   281,    -1,    -1,    -1,
      -1,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,    -1,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,    -1,    -1,
      -1,    -1,   317,   318,   319,   320,   321,   322,    -1,    -1,
     325,   326,   327,   328,    -1,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,    -1,   342,   343,   344,
      -1,    -1,   347,   348,   349,   350,   351,   352,   353,   354,
     355,    -1,   357,   358,    -1,   360,   361,   362,    -1,   364,
     365,   366,   367,    -1,   369,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   379,   380,   381,    -1,   383,   384,
      -1,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,    -1,   400,   401,   402,    -1,   404,
      -1,   406,   407,   408,   409,   410,    -1,   412,   413,   414,
      -1,    -1,   417,    -1,    -1,    -1,   421,   422,   423,   424,
     425,    -1,    -1,   428,   429,   430,   431,   432,    -1,   434,
     435,    -1,   437,   438,   439,   440,   441,   442,    -1,   444,
      -1,   446,   447,    -1,   449,   450,    -1,    -1,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,    -1,
     465,   466,    -1,    -1,    -1,   470,   471,   472,   473,    -1,
      -1,    -1,   477,    -1,    -1,    -1,   481,    -1,   483,   484,
     485,   486,   487,    -1,   489,   490,   491,   492,   493,   494,
      -1,    -1,    -1,    -1,    -1,    -1,   501,   502,    -1,   504,
      -1,    -1,   507,    -1,    -1,   510,   511,   512,   513,   514,
     515,   516,    -1,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,    -1,   534,
      -1,   536,   537,   538,   539,    -1,   541,   542,   543,    -1,
     545,   546,   547,   548,    -1,    -1,    -1,    -1,    -1,   554,
     555,   556,    -1,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,    -1,   571,   572,    -1,    -1,
     575,    -1,    -1,   578,    -1,   580,    -1,   582,   583,   584,
      -1,    -1,   587,   588,   589,   590,   591,    -1,    -1,   594,
     595,    -1,   597,   598,   599,   600,   601,   602,   603,    -1,
      -1,    -1,    -1,    -1,    -1,   610,   611,    -1,   613,   614,
     615,    -1,    -1,   618,    -1,    -1,    -1,    -1,   623,   624,
      -1,    -1,    -1,    -1,   629,   630,    -1,    -1,   633,   634,
      -1,    -1,   637,   638,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      21,    -1,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    -1,    -1,    34,    35,    36,    37,    38,    39,    40,
      -1,    42,    43,    44,    -1,    46,    -1,    48,    49,    -1,
      -1,    52,    53,    54,    55,    56,    -1,    58,    59,    60,
      61,    62,    -1,    64,    65,    66,    67,    68,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    79,    -1,
      81,    82,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    -1,    93,    94,    95,    96,    97,    -1,    99,   100,
     101,   102,    -1,    -1,   105,   106,   107,    -1,   109,   110,
     111,    -1,   113,   114,   115,   116,   117,   118,    -1,    -1,
      -1,    -1,   123,   124,   125,    -1,    -1,   128,   129,    -1,
     131,    -1,    -1,    -1,   135,    -1,   137,   138,   139,   140,
      -1,    -1,    -1,   144,    -1,    -1,   147,   148,   149,    -1,
      -1,    -1,   153,    -1,   155,   156,    -1,   158,   159,   160,
      -1,    -1,   163,   164,    -1,   166,   167,   168,   169,   170,
     171,   172,    -1,   174,   175,   176,   177,   178,   179,   180,
      -1,   182,   183,   184,   185,    -1,   187,    -1,    -1,    -1,
     191,   192,   193,    -1,   195,    -1,   197,   198,   199,   200,
     201,   202,    -1,   204,    -1,   206,    -1,   208,   209,   210,
      -1,   212,   213,    -1,   215,   216,    -1,    -1,    -1,   220,
     221,   222,   223,   224,    -1,   226,   227,   228,    -1,   230,
      -1,   232,    -1,    -1,    -1,   236,   237,   238,   239,    -1,
      -1,   242,    -1,   244,   245,    -1,   247,   248,    -1,    -1,
      -1,   252,    -1,    -1,   255,   256,   257,    -1,    -1,   260,
      -1,   262,   263,   264,    -1,    -1,    -1,    -1,    -1,   270,
     271,    -1,   273,    -1,   275,    -1,   277,   278,    -1,    -1,
     281,    -1,    -1,    -1,    -1,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
      -1,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,    -1,    -1,    -1,    -1,   317,   318,   319,   320,
     321,   322,    -1,    -1,   325,   326,   327,   328,    -1,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
      -1,   342,   343,   344,    -1,    -1,   347,   348,   349,   350,
     351,   352,   353,   354,   355,    -1,   357,   358,    -1,   360,
     361,   362,    -1,   364,   365,   366,   367,    -1,   369,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   379,   380,
     381,    -1,   383,   384,    -1,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,    -1,   400,
     401,   402,    -1,   404,    -1,   406,   407,   408,   409,   410,
      -1,   412,   413,   414,    -1,    -1,   417,    -1,    -1,    -1,
     421,   422,   423,   424,   425,    -1,    -1,   428,   429,   430,
     431,   432,    -1,   434,   435,    -1,   437,   438,   439,   440,
     441,   442,    -1,   444,    -1,   446,   447,    -1,   449,   450,
      -1,    -1,   453,   454,   455,   456,   457,   458,   459,   460,
     461,   462,   463,    -1,   465,   466,    -1,    -1,    -1,   470,
     471,   472,   473,    -1,    -1,    -1,   477,    -1,    -1,    -1,
     481,    -1,   483,   484,   485,   486,   487,    -1,   489,   490,
     491,   492,   493,   494,    -1,    -1,    -1,    -1,    -1,    -1,
     501,   502,    -1,   504,    -1,    -1,   507,    -1,    -1,   510,
     511,   512,   513,   514,   515,   516,    -1,   518,   519,   520,
     521,   522,   523,   524,   525,   526,   527,   528,   529,   530,
     531,   532,    -1,   534,    -1,   536,   537,   538,   539,    -1,
     541,   542,   543,    -1,   545,   546,   547,   548,    -1,    -1,
      -1,    -1,    -1,   554,   555,   556,    -1,   558,   559,   560,
     561,   562,   563,   564,   565,   566,   567,   568,   569,    -1,
     571,   572,    -1,    -1,   575,    -1,    -1,   578,    -1,   580,
      -1,   582,   583,   584,    -1,    -1,   587,   588,   589,   590,
     591,    -1,    -1,   594,   595,    -1,   597,   598,   599,   600,
     601,   602,   603,    -1,    -1,    -1,    -1,    -1,    -1,   610,
     611,    -1,   613,   614,   615,    -1,    -1,   618,    -1,    -1,
      -1,    -1,   623,   624,    -1,    -1,    -1,    -1,   629,   630,
      -1,    -1,   633,   634,    -1,    -1,   637,   638,     5,    -1,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    -1,    -1,    34,    35,    36,
      37,    38,    39,    40,    -1,    42,    43,    44,    -1,    46,
      -1,    48,    49,    -1,    -1,    52,    53,    54,    55,    56,
      -1,    58,    59,    60,    61,    62,    -1,    64,    65,    66,
      67,    68,    69,    70,    -1,    72,    73,    74,    75,    76,
      77,    78,    79,    -1,    81,    82,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    -1,    93,    94,    95,    96,
      97,    -1,    99,   100,   101,   102,    -1,    -1,   105,   106,
     107,    -1,   109,   110,   111,    -1,   113,   114,   115,   116,
     117,   118,    -1,    -1,    -1,    -1,   123,   124,   125,    -1,
      -1,   128,   129,    -1,   131,    -1,    -1,    -1,   135,    -1,
     137,   138,   139,   140,    -1,    -1,    -1,   144,    -1,    -1,
     147,   148,   149,    -1,    -1,    -1,   153,    -1,   155,   156,
      -1,   158,   159,   160,    -1,    -1,   163,   164,    -1,   166,
     167,   168,   169,   170,   171,   172,    -1,   174,   175,   176,
     177,   178,   179,   180,    -1,   182,   183,   184,   185,    -1,
     187,    -1,    -1,    -1,   191,    -1,   193,    -1,   195,    -1,
     197,   198,   199,   200,   201,   202,    -1,   204,    -1,   206,
      -1,   208,   209,   210,    -1,   212,   213,    -1,   215,   216,
      -1,    -1,    -1,   220,   221,   222,   223,   224,    -1,   226,
     227,   228,    -1,   230,    -1,   232,    -1,    -1,    -1,   236,
     237,   238,   239,    -1,    -1,   242,    -1,   244,   245,    -1,
     247,   248,    -1,    -1,    -1,   252,    -1,    -1,   255,   256,
     257,    -1,    -1,   260,    -1,   262,   263,   264,    -1,    -1,
      -1,    -1,    -1,   270,   271,    -1,   273,    -1,   275,    -1,
     277,   278,    -1,    -1,   281,    -1,    -1,    -1,    -1,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,    -1,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,    -1,    -1,    -1,    -1,
     317,   318,   319,   320,   321,   322,    -1,    -1,   325,   326,
     327,   328,    -1,   330,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,    -1,   342,   343,   344,    -1,    -1,
     347,   348,   349,   350,   351,   352,   353,   354,   355,    -1,
     357,   358,    -1,   360,   361,   362,    -1,   364,   365,   366,
     367,    -1,   369,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   379,   380,   381,    -1,   383,   384,    -1,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,    -1,   400,   401,   402,    -1,   404,    -1,   406,
     407,   408,   409,   410,    -1,   412,   413,   414,    -1,    -1,
     417,    -1,    -1,    -1,   421,   422,   423,   424,   425,    -1,
      -1,   428,   429,   430,   431,   432,    -1,   434,   435,    -1,
     437,   438,   439,   440,   441,   442,    -1,   444,    -1,   446,
     447,    -1,   449,   450,    -1,    -1,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,    -1,   465,   466,
      -1,    -1,    -1,   470,   471,   472,   473,    -1,    -1,    -1,
     477,    -1,    -1,    -1,   481,    -1,   483,   484,   485,   486,
     487,    -1,   489,   490,   491,   492,   493,   494,    -1,    -1,
      -1,    -1,    -1,    -1,   501,   502,    -1,   504,    -1,    -1,
     507,    -1,    -1,   510,   511,   512,   513,   514,   515,   516,
      -1,   518,   519,   520,   521,   522,   523,   524,   525,   526,
     527,   528,   529,   530,   531,   532,    -1,   534,    -1,   536,
     537,   538,   539,    -1,   541,   542,   543,    -1,   545,   546,
     547,   548,    -1,    -1,    -1,    -1,    -1,   554,   555,   556,
      -1,   558,   559,   560,   561,   562,   563,   564,   565,   566,
     567,   568,   569,    -1,   571,   572,    -1,    -1,   575,    -1,
      -1,   578,    -1,   580,    -1,   582,   583,   584,    -1,    -1,
     587,   588,   589,   590,   591,    -1,    -1,   594,   595,    -1,
     597,   598,   599,   600,   601,   602,   603,    -1,    -1,    -1,
      -1,    -1,    -1,   610,   611,    -1,   613,   614,   615,    -1,
      -1,   618,    -1,    -1,    -1,    -1,   623,   624,    -1,    -1,
      -1,    -1,   629,   630,    -1,    -1,   633,   634,    -1,    -1,
     637,   638,     5,    -1,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    -1,
      -1,    34,    35,    36,    37,    38,    39,    40,    -1,    42,
      43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,
      53,    54,    55,    56,    -1,    58,    59,    60,    61,    62,
      -1,    64,    65,    66,    67,    68,    69,    70,    -1,    72,
      73,    74,    75,    76,    77,    78,    79,    -1,    81,    82,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    -1,
      93,    94,    95,    96,    97,    -1,    99,   100,   101,   102,
      -1,    -1,   105,   106,   107,    -1,   109,   110,   111,    -1,
     113,   114,   115,   116,   117,   118,    -1,    -1,    -1,    -1,
     123,   124,   125,    -1,    -1,   128,   129,    -1,   131,    -1,
      -1,    -1,   135,    -1,   137,   138,   139,   140,    -1,    -1,
      -1,   144,    -1,    -1,   147,   148,   149,    -1,    -1,    -1,
     153,    -1,   155,   156,    -1,   158,   159,   160,    -1,    -1,
     163,   164,    -1,   166,   167,   168,   169,   170,   171,   172,
      -1,   174,   175,   176,   177,   178,   179,   180,    -1,   182,
     183,   184,   185,    -1,   187,    -1,    -1,    -1,   191,    -1,
     193,    -1,   195,    -1,   197,   198,   199,   200,   201,   202,
      -1,   204,    -1,   206,    -1,   208,   209,   210,    -1,   212,
     213,    -1,   215,   216,    -1,    -1,    -1,   220,   221,   222,
     223,   224,    -1,   226,   227,   228,    -1,   230,    -1,   232,
      -1,    -1,    -1,   236,   237,   238,   239,    -1,    -1,   242,
      -1,   244,   245,    -1,   247,   248,    -1,    -1,    -1,   252,
      -1,    -1,   255,   256,   257,    -1,    -1,   260,    -1,   262,
     263,   264,    -1,    -1,    -1,    -1,    -1,   270,   271,    -1,
     273,    -1,   275,    -1,   277,   278,    -1,    -1,   281,    -1,
      -1,    -1,    -1,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,    -1,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
      -1,    -1,    -1,    -1,   317,   318,   319,   320,   321,   322,
      -1,    -1,   325,   326,   327,   328,    -1,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,    -1,   342,
     343,   344,    -1,    -1,   347,   348,   349,   350,   351,   352,
     353,   354,   355,    -1,   357,   358,    -1,   360,   361,   362,
      -1,   364,   365,   366,   367,    -1,   369,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   379,   380,   381,    -1,
     383,   384,    -1,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,    -1,   400,   401,   402,
      -1,   404,    -1,   406,   407,   408,   409,   410,    -1,   412,
     413,   414,    -1,    -1,   417,    -1,    -1,    -1,   421,   422,
     423,   424,   425,    -1,    -1,   428,   429,   430,   431,   432,
      -1,   434,   435,    -1,   437,   438,   439,   440,   441,   442,
      -1,   444,    -1,   446,   447,    -1,   449,   450,    -1,    -1,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     463,    -1,   465,   466,    -1,    -1,    -1,   470,   471,   472,
     473,    -1,    -1,    -1,   477,    -1,    -1,    -1,   481,    -1,
     483,   484,   485,   486,   487,    -1,   489,   490,   491,   492,
     493,   494,    -1,    -1,    -1,    -1,    -1,    -1,   501,   502,
      -1,   504,    -1,    -1,   507,    -1,    -1,   510,   511,   512,
     513,   514,   515,   516,    -1,   518,   519,   520,   521,   522,
     523,   524,   525,   526,   527,   528,   529,   530,   531,   532,
      -1,   534,    -1,   536,   537,   538,   539,    -1,   541,   542,
     543,    -1,   545,   546,   547,   548,    -1,    -1,    -1,    -1,
      -1,   554,   555,   556,    -1,   558,   559,   560,   561,   562,
     563,   564,   565,   566,   567,   568,   569,    -1,   571,   572,
      -1,    -1,   575,    -1,    -1,   578,    -1,   580,    -1,   582,
     583,   584,    -1,    -1,   587,   588,   589,   590,   591,    -1,
      -1,   594,   595,    -1,   597,   598,   599,   600,   601,   602,
     603,    -1,    -1,    -1,    -1,    -1,    -1,   610,   611,    -1,
     613,   614,   615,    -1,    -1,   618,    -1,    -1,    -1,    -1,
     623,   624,    -1,    -1,    -1,    -1,   629,   630,    -1,    -1,
     633,   634,    -1,    -1,   637,   638,     5,    -1,     7,     8,
       9,    10,    11,    12,    -1,    14,    -1,    -1,    -1,    18,
      -1,    -1,    21,    -1,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    -1,    -1,    34,    35,    36,    37,    38,
      39,    40,    -1,    42,    43,    44,    -1,    46,    -1,    48,
      49,    -1,    -1,    52,    53,    54,    55,    56,    -1,    58,
      59,    60,    61,    62,    -1,    64,    65,    66,    67,    68,
      69,    70,    -1,    72,    73,    74,    75,    76,    77,    78,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    -1,    93,    94,    95,    96,    97,    -1,
      99,   100,   101,   102,    -1,    -1,   105,   106,   107,    -1,
     109,   110,   111,    -1,   113,   114,   115,   116,   117,   118,
      -1,    -1,    -1,    -1,   123,   124,   125,    -1,    -1,   128,
     129,    -1,   131,    -1,    -1,    -1,   135,    -1,   137,   138,
     139,   140,    -1,    -1,    -1,   144,    -1,    -1,   147,   148,
     149,    -1,    -1,    -1,   153,    -1,   155,   156,    -1,   158,
     159,   160,    -1,    -1,   163,   164,    -1,   166,   167,   168,
     169,   170,   171,   172,    -1,   174,   175,   176,   177,   178,
     179,   180,    -1,   182,   183,   184,   185,    -1,   187,    -1,
      -1,    -1,   191,    -1,   193,    -1,   195,    -1,   197,   198,
     199,   200,   201,   202,    -1,   204,    -1,   206,    -1,   208,
     209,   210,    -1,   212,   213,    -1,   215,   216,    -1,    -1,
      -1,   220,   221,   222,   223,   224,    -1,   226,   227,   228,
      -1,   230,    -1,   232,    -1,    -1,    -1,   236,   237,   238,
     239,    -1,    -1,   242,    -1,   244,   245,    -1,   247,   248,
      -1,    -1,    -1,   252,    -1,    -1,   255,   256,   257,    -1,
      -1,   260,    -1,   262,   263,   264,    -1,    -1,    -1,    -1,
      -1,   270,   271,    -1,   273,    -1,   275,    -1,   277,   278,
      -1,    -1,   281,    -1,    -1,    -1,    -1,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,    -1,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,    -1,    -1,    -1,    -1,   317,   318,
     319,   320,   321,   322,    -1,    -1,   325,   326,   327,   328,
      -1,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,    -1,   342,   343,   344,    -1,    -1,   347,   348,
     349,   350,   351,    -1,   353,   354,   355,    -1,   357,   358,
      -1,   360,   361,   362,    -1,   364,   365,   366,   367,    -1,
     369,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     379,   380,   381,    -1,   383,   384,    -1,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
      -1,   400,   401,   402,    -1,   404,    -1,   406,   407,   408,
     409,   410,    -1,   412,   413,   414,    -1,    -1,   417,    -1,
      -1,    -1,   421,   422,   423,   424,   425,    -1,    -1,   428,
     429,   430,   431,   432,    -1,   434,   435,    -1,   437,   438,
     439,   440,   441,   442,    -1,   444,    -1,   446,   447,    -1,
     449,   450,    -1,    -1,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,    -1,   465,   466,    -1,    -1,
      -1,   470,   471,   472,   473,    -1,    -1,    -1,   477,    -1,
      -1,    -1,   481,    -1,   483,   484,   485,   486,   487,    -1,
     489,   490,   491,   492,   493,   494,    -1,    -1,    -1,    -1,
      -1,    -1,   501,   502,    -1,   504,    -1,    -1,   507,    -1,
      -1,   510,   511,   512,   513,   514,   515,   516,    -1,   518,
     519,   520,   521,   522,   523,   524,   525,   526,   527,   528,
     529,   530,   531,   532,    -1,   534,    -1,   536,   537,   538,
     539,    -1,   541,   542,   543,    -1,   545,   546,   547,   548,
      -1,    -1,    -1,    -1,    -1,   554,   555,   556,    -1,   558,
     559,   560,   561,   562,   563,   564,   565,   566,   567,   568,
     569,    -1,   571,   572,    -1,    -1,   575,    -1,    -1,   578,
      -1,   580,    -1,   582,   583,   584,    -1,    -1,   587,   588,
     589,   590,   591,    -1,    -1,   594,   595,    -1,   597,   598,
     599,   600,   601,   602,   603,    -1,    -1,    -1,    -1,    -1,
      -1,   610,   611,    -1,   613,   614,   615,    -1,    -1,   618,
      -1,    -1,    -1,    -1,   623,   624,    -1,    -1,    -1,    -1,
     629,   630,    -1,    -1,   633,   634,    -1,    -1,   637,   638,
       5,    -1,     7,     8,     9,    10,    11,    -1,    -1,    14,
      -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    -1,    -1,    34,
      35,    36,    37,    38,    39,    40,    -1,    42,    43,    44,
      -1,    46,    -1,    48,    49,    -1,    -1,    52,    53,    54,
      55,    56,    -1,    58,    59,    60,    61,    62,    -1,    64,
      65,    66,    67,    68,    69,    70,    -1,    72,    73,    74,
      75,    76,    77,    78,    79,    -1,    81,    82,    83,    84,
      85,    86,    87,    88,    -1,    90,    91,    -1,    93,    94,
      95,    96,    97,    -1,    99,   100,   101,   102,    -1,    -1,
     105,   106,   107,    -1,   109,   110,   111,    -1,   113,   114,
     115,   116,   117,   118,    -1,    -1,    -1,    -1,   123,   124,
     125,    -1,    -1,   128,   129,    -1,   131,    -1,    -1,    -1,
     135,    -1,   137,   138,   139,   140,    -1,    -1,    -1,   144,
      -1,    -1,   147,   148,   149,    -1,    -1,    -1,   153,    -1,
     155,   156,    -1,   158,   159,   160,    -1,    -1,   163,   164,
      -1,   166,   167,   168,   169,   170,   171,   172,    -1,   174,
     175,   176,   177,   178,   179,   180,    -1,   182,   183,   184,
     185,    -1,   187,    -1,    -1,    -1,   191,    -1,   193,    -1,
     195,    -1,   197,   198,   199,   200,   201,   202,    -1,   204,
      -1,   206,    -1,   208,   209,   210,    -1,   212,   213,    -1,
     215,   216,    -1,    -1,    -1,   220,   221,   222,   223,   224,
      -1,   226,   227,   228,    -1,   230,    -1,   232,    -1,    -1,
      -1,   236,   237,   238,   239,    -1,    -1,   242,    -1,   244,
     245,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,    -1,
     255,   256,   257,    -1,    -1,   260,    -1,   262,   263,   264,
      -1,    -1,    -1,    -1,    -1,   270,   271,    -1,   273,    -1,
     275,    -1,   277,   278,    -1,    -1,   281,    -1,    -1,    -1,
      -1,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,    -1,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,    -1,    -1,
      -1,    -1,   317,   318,   319,   320,   321,   322,    -1,    -1,
     325,   326,   327,   328,    -1,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,    -1,   342,   343,   344,
      -1,    -1,   347,   348,   349,   350,   351,   352,   353,   354,
     355,    -1,   357,   358,    -1,   360,   361,   362,    -1,   364,
     365,   366,   367,    -1,   369,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   379,   380,   381,    -1,   383,   384,
      -1,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,    -1,   400,   401,   402,    -1,   404,
      -1,   406,   407,   408,   409,   410,    -1,   412,   413,   414,
      -1,    -1,   417,    -1,    -1,    -1,   421,   422,   423,   424,
     425,    -1,    -1,   428,   429,   430,   431,   432,    -1,   434,
     435,    -1,   437,   438,   439,   440,   441,   442,    -1,   444,
      -1,   446,   447,    -1,   449,   450,    -1,    -1,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,    -1,
     465,   466,    -1,    -1,    -1,   470,   471,   472,   473,    -1,
      -1,    -1,   477,    -1,    -1,    -1,   481,    -1,   483,   484,
     485,   486,   487,    -1,   489,   490,   491,   492,   493,   494,
      -1,    -1,    -1,    -1,    -1,    -1,   501,   502,    -1,   504,
      -1,    -1,   507,    -1,    -1,   510,   511,   512,   513,   514,
     515,   516,    -1,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,    -1,   534,
      -1,   536,   537,   538,   539,    -1,   541,   542,   543,    -1,
     545,   546,   547,   548,    -1,    -1,    -1,    -1,    -1,   554,
     555,   556,    -1,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,    -1,   571,   572,    -1,    -1,
     575,    -1,    -1,   578,    -1,   580,    -1,   582,   583,   584,
      -1,    -1,   587,   588,   589,   590,   591,    -1,    -1,   594,
     595,    -1,   597,   598,   599,   600,   601,   602,   603,    -1,
      -1,    -1,    -1,    -1,    -1,   610,   611,    -1,   613,   614,
     615,    -1,    -1,   618,    -1,    -1,    -1,    -1,   623,   624,
      -1,    -1,    -1,    -1,   629,   630,    -1,    -1,   633,   634,
      -1,    -1,   637,   638,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      21,    -1,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    -1,    -1,    34,    35,    36,    37,    38,    39,    40,
      -1,    42,    43,    44,    -1,    46,    -1,    48,    49,    -1,
      -1,    52,    53,    54,    55,    56,    -1,    58,    59,    60,
      61,    62,    -1,    64,    65,    66,    67,    68,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    79,    -1,
      81,    82,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    -1,    93,    94,    95,    96,    97,    -1,    99,   100,
     101,   102,    -1,    -1,   105,   106,   107,    -1,   109,   110,
     111,    -1,   113,   114,   115,   116,   117,   118,    -1,    -1,
      -1,    -1,   123,   124,   125,    -1,    -1,   128,   129,    -1,
     131,    -1,    -1,    -1,   135,    -1,   137,   138,   139,   140,
      -1,    -1,    -1,   144,    -1,    -1,   147,   148,   149,    -1,
      -1,    -1,   153,    -1,   155,   156,    -1,   158,   159,   160,
      -1,    -1,   163,   164,    -1,   166,   167,   168,   169,   170,
     171,   172,    -1,   174,   175,   176,   177,   178,   179,   180,
      -1,   182,   183,   184,   185,    -1,   187,    -1,    -1,    -1,
     191,    -1,   193,    -1,   195,    -1,   197,   198,   199,   200,
     201,   202,    -1,   204,    -1,   206,    -1,   208,   209,   210,
      -1,   212,   213,    -1,   215,   216,    -1,    -1,    -1,   220,
     221,   222,   223,   224,    -1,   226,   227,   228,    -1,   230,
      -1,   232,    -1,    -1,    -1,   236,   237,   238,   239,    -1,
      -1,   242,    -1,   244,   245,    -1,   247,   248,    -1,    -1,
      -1,   252,    -1,    -1,   255,   256,   257,    -1,    -1,   260,
      -1,   262,   263,   264,    -1,    -1,    -1,    -1,    -1,   270,
     271,    -1,   273,    -1,   275,    -1,   277,   278,    -1,    -1,
     281,    -1,    -1,    -1,    -1,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
      -1,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,    -1,    -1,    -1,    -1,   317,   318,   319,   320,
     321,   322,    -1,    -1,   325,   326,   327,   328,    -1,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
      -1,   342,   343,   344,    -1,    -1,   347,   348,   349,   350,
     351,   352,   353,   354,   355,    -1,   357,   358,    -1,   360,
     361,   362,    -1,   364,   365,   366,   367,    -1,   369,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   379,   380,
     381,    -1,   383,   384,    -1,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,    -1,   400,
     401,   402,    -1,   404,    -1,   406,   407,   408,   409,   410,
      -1,   412,   413,   414,    -1,    -1,   417,    -1,    -1,    -1,
     421,   422,   423,   424,   425,    -1,    -1,   428,   429,   430,
     431,   432,    -1,   434,   435,    -1,   437,   438,   439,   440,
     441,   442,    -1,   444,    -1,   446,   447,    -1,   449,   450,
      -1,    -1,   453,   454,   455,   456,   457,   458,   459,   460,
     461,   462,   463,    -1,   465,   466,    -1,    -1,    -1,   470,
     471,   472,   473,    -1,    -1,    -1,   477,    -1,    -1,    -1,
     481,    -1,   483,   484,   485,   486,   487,    -1,   489,   490,
     491,   492,   493,   494,    -1,    -1,    -1,    -1,    -1,    -1,
     501,   502,    -1,   504,    -1,    -1,   507,    -1,    -1,   510,
     511,   512,   513,   514,   515,   516,    -1,   518,   519,   520,
     521,   522,   523,   524,   525,   526,   527,   528,   529,   530,
     531,   532,    -1,   534,    -1,   536,   537,   538,   539,    -1,
     541,   542,   543,    -1,   545,   546,   547,   548,    -1,    -1,
      -1,    -1,    -1,   554,   555,   556,    -1,   558,   559,   560,
     561,   562,   563,   564,   565,   566,   567,   568,   569,    -1,
     571,   572,    -1,    -1,   575,    -1,    -1,   578,    -1,   580,
      -1,   582,   583,   584,    -1,    -1,   587,   588,   589,   590,
     591,    -1,    -1,   594,   595,    -1,   597,   598,   599,   600,
     601,   602,   603,    -1,    -1,    -1,    -1,    -1,    -1,   610,
     611,    -1,   613,   614,   615,    -1,    -1,   618,    -1,    -1,
      -1,    -1,   623,   624,    -1,    -1,    -1,    -1,   629,   630,
      -1,    -1,   633,   634,    -1,    -1,   637,   638,     5,    -1,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    -1,    -1,    34,    35,    36,
      37,    38,    39,    40,    -1,    42,    43,    44,    -1,    46,
      -1,    48,    49,    -1,    -1,    52,    53,    54,    55,    56,
      -1,    58,    59,    60,    61,    62,    -1,    64,    65,    66,
      67,    68,    69,    70,    -1,    72,    73,    74,    75,    76,
      77,    78,    79,    -1,    81,    82,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    -1,    93,    94,    95,    96,
      97,    -1,    99,   100,   101,   102,    -1,    -1,   105,   106,
     107,    -1,   109,   110,   111,    -1,   113,   114,   115,   116,
     117,   118,    -1,    -1,    -1,    -1,   123,   124,   125,    -1,
      -1,   128,   129,    -1,   131,    -1,    -1,    -1,   135,    -1,
     137,   138,   139,   140,    -1,    -1,    -1,   144,    -1,    -1,
     147,   148,   149,    -1,    -1,    -1,   153,    -1,   155,   156,
      -1,   158,   159,   160,    -1,    -1,   163,   164,    -1,   166,
     167,   168,   169,   170,   171,   172,    -1,   174,   175,   176,
     177,   178,   179,   180,    -1,   182,   183,   184,   185,    -1,
     187,    -1,    -1,    -1,   191,    -1,   193,    -1,   195,    -1,
     197,   198,   199,   200,   201,   202,    -1,   204,    -1,   206,
      -1,   208,   209,   210,    -1,   212,   213,    -1,   215,   216,
      -1,    -1,    -1,   220,   221,   222,   223,   224,    -1,   226,
     227,   228,    -1,   230,    -1,   232,    -1,    -1,    -1,   236,
     237,   238,   239,    -1,    -1,   242,    -1,   244,   245,    -1,
     247,   248,    -1,    -1,    -1,   252,    -1,    -1,   255,   256,
     257,    -1,    -1,   260,    -1,   262,   263,   264,    -1,    -1,
      -1,    -1,    -1,   270,   271,    -1,   273,    -1,   275,    -1,
     277,   278,    -1,    -1,   281,    -1,    -1,    -1,    -1,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,    -1,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,    -1,    -1,    -1,    -1,
     317,   318,   319,   320,   321,   322,    -1,    -1,   325,   326,
     327,   328,    -1,   330,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,    -1,   342,   343,   344,    -1,    -1,
     347,   348,   349,   350,   351,   352,   353,   354,   355,    -1,
     357,   358,    -1,   360,   361,   362,    -1,   364,   365,   366,
     367,    -1,   369,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   379,   380,   381,    -1,   383,   384,    -1,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,    -1,   400,   401,   402,    -1,   404,    -1,   406,
     407,   408,   409,   410,    -1,   412,   413,   414,    -1,    -1,
     417,    -1,    -1,    -1,   421,   422,   423,   424,   425,    -1,
      -1,   428,   429,   430,   431,   432,    -1,   434,   435,    -1,
     437,   438,   439,   440,   441,   442,    -1,   444,    -1,   446,
     447,    -1,   449,   450,    -1,    -1,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,    -1,   465,   466,
      -1,    -1,    -1,   470,   471,   472,   473,    -1,    -1,    -1,
     477,    -1,    -1,    -1,   481,    -1,   483,   484,   485,   486,
     487,    -1,   489,   490,   491,   492,   493,   494,    -1,    -1,
      -1,    -1,    -1,    -1,   501,   502,    -1,   504,    -1,    -1,
     507,    -1,    -1,   510,   511,   512,   513,   514,   515,   516,
      -1,   518,   519,   520,   521,   522,   523,   524,   525,   526,
     527,   528,   529,   530,   531,   532,    -1,   534,    -1,   536,
     537,   538,   539,    -1,   541,   542,   543,    -1,   545,   546,
     547,   548,    -1,    -1,    -1,    -1,    -1,   554,   555,   556,
      -1,   558,   559,   560,   561,   562,   563,   564,   565,   566,
     567,   568,   569,    -1,   571,   572,    -1,    -1,   575,    -1,
      -1,   578,    -1,   580,    -1,   582,   583,   584,    -1,    -1,
     587,   588,   589,   590,   591,    -1,    -1,   594,   595,    -1,
     597,   598,   599,   600,   601,   602,   603,    -1,    -1,    -1,
      -1,    -1,    -1,   610,   611,    -1,   613,   614,   615,    -1,
      -1,   618,    -1,    -1,    -1,    -1,   623,   624,    -1,    -1,
      -1,    -1,   629,   630,    -1,    -1,   633,   634,    -1,    -1,
     637,   638,     5,    -1,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    -1,
      -1,    34,    35,    36,    37,    38,    39,    40,    -1,    42,
      43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,
      53,    54,    55,    56,    -1,    58,    59,    60,    61,    62,
      -1,    64,    65,    66,    67,    68,    69,    70,    -1,    72,
      73,    74,    75,    76,    77,    78,    79,    -1,    81,    82,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    -1,
      93,    94,    95,    96,    97,    -1,    99,   100,   101,   102,
      -1,    -1,   105,   106,   107,    -1,   109,   110,   111,    -1,
     113,   114,   115,   116,   117,   118,    -1,    -1,    -1,    -1,
     123,   124,   125,    -1,    -1,   128,   129,    -1,   131,    -1,
      -1,    -1,   135,    -1,   137,   138,   139,   140,    -1,    -1,
      -1,   144,    -1,    -1,   147,   148,   149,    -1,    -1,    -1,
     153,    -1,   155,   156,    -1,   158,   159,   160,    -1,    -1,
     163,   164,    -1,   166,   167,   168,   169,   170,   171,   172,
      -1,   174,   175,   176,   177,   178,   179,   180,    -1,   182,
     183,   184,   185,    -1,   187,    -1,    -1,    -1,   191,    -1,
     193,    -1,   195,    -1,   197,   198,   199,   200,   201,   202,
      -1,   204,    -1,   206,    -1,   208,   209,   210,    -1,   212,
     213,    -1,   215,   216,    -1,    -1,    -1,   220,   221,   222,
     223,   224,    -1,   226,   227,   228,    -1,   230,    -1,   232,
      -1,    -1,    -1,   236,   237,   238,   239,    -1,    -1,   242,
      -1,   244,   245,    -1,   247,   248,    -1,    -1,    -1,   252,
      -1,    -1,   255,   256,   257,    -1,    -1,   260,    -1,   262,
     263,   264,    -1,    -1,    -1,    -1,    -1,   270,   271,    -1,
     273,    -1,   275,    -1,   277,   278,    -1,    -1,   281,    -1,
      -1,    -1,    -1,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,    -1,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
      -1,    -1,    -1,    -1,   317,   318,   319,   320,   321,   322,
      -1,    -1,   325,   326,   327,   328,    -1,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,    -1,   342,
     343,   344,    -1,    -1,   347,   348,   349,   350,   351,   352,
     353,   354,   355,    -1,   357,   358,    -1,   360,   361,   362,
      -1,   364,   365,   366,   367,    -1,   369,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   379,   380,   381,    -1,
     383,   384,    -1,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,    -1,   400,   401,   402,
      -1,   404,    -1,   406,   407,   408,   409,   410,    -1,   412,
     413,   414,    -1,    -1,   417,    -1,    -1,    -1,   421,   422,
     423,   424,   425,    -1,    -1,   428,   429,   430,   431,   432,
      -1,   434,   435,    -1,   437,   438,   439,   440,   441,   442,
      -1,   444,    -1,   446,   447,    -1,   449,   450,    -1,    -1,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     463,    -1,   465,   466,    -1,    -1,    -1,   470,   471,   472,
     473,    -1,    -1,    -1,   477,    -1,    -1,    -1,   481,    -1,
     483,   484,   485,   486,   487,    -1,   489,   490,   491,   492,
     493,   494,    -1,    -1,    -1,    -1,    -1,    -1,   501,   502,
      -1,   504,    -1,    -1,   507,    -1,    -1,   510,   511,   512,
     513,   514,   515,   516,    -1,   518,   519,   520,   521,   522,
     523,   524,   525,   526,   527,   528,   529,   530,   531,   532,
      -1,   534,    -1,   536,   537,   538,   539,    -1,   541,   542,
     543,    -1,   545,   546,   547,   548,    -1,    -1,    -1,    -1,
      -1,   554,   555,   556,    -1,   558,   559,   560,   561,   562,
     563,   564,   565,   566,   567,   568,   569,    -1,   571,   572,
      -1,    -1,   575,    -1,    -1,   578,    -1,   580,    -1,   582,
     583,   584,    -1,    -1,   587,   588,   589,   590,   591,    -1,
      -1,   594,   595,    -1,   597,   598,   599,   600,   601,   602,
     603,    -1,    -1,    -1,    -1,    -1,    -1,   610,   611,    -1,
     613,   614,   615,    -1,    -1,   618,    -1,    -1,    -1,    -1,
     623,   624,    -1,    -1,    -1,    -1,   629,   630,    -1,    -1,
     633,   634,    -1,    -1,   637,   638,     5,    -1,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      -1,    -1,    21,    -1,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    -1,    -1,    34,    35,    36,    37,    38,
      39,    40,    -1,    42,    43,    44,    -1,    46,    -1,    48,
      49,    -1,    -1,    52,    53,    54,    55,    56,    -1,    58,
      59,    60,    61,    62,    -1,    64,    65,    66,    67,    68,
      69,    70,    -1,    72,    73,    74,    75,    76,    77,    78,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    -1,    93,    94,    95,    96,    97,    -1,
      99,   100,   101,   102,    -1,    -1,   105,   106,   107,    -1,
     109,   110,   111,    -1,   113,   114,   115,   116,   117,   118,
      -1,    -1,    -1,    -1,   123,   124,   125,    -1,    -1,   128,
     129,    -1,   131,    -1,    -1,    -1,   135,    -1,   137,   138,
     139,   140,    -1,    -1,    -1,   144,    -1,    -1,   147,   148,
     149,    -1,    -1,    -1,   153,    -1,   155,   156,    -1,   158,
     159,   160,    -1,    -1,   163,   164,    -1,   166,   167,   168,
     169,   170,   171,   172,    -1,   174,   175,   176,   177,   178,
     179,   180,    -1,   182,   183,   184,   185,    -1,   187,    -1,
      -1,    -1,   191,    -1,   193,    -1,   195,    -1,   197,   198,
     199,   200,   201,   202,    -1,   204,    -1,   206,    -1,   208,
     209,   210,    -1,   212,   213,    -1,   215,   216,    -1,    -1,
      -1,   220,   221,   222,   223,   224,    -1,   226,   227,   228,
      -1,   230,    -1,   232,    -1,    -1,    -1,   236,   237,   238,
     239,    -1,    -1,   242,    -1,   244,   245,    -1,   247,   248,
      -1,    -1,    -1,   252,    -1,    -1,   255,   256,   257,    -1,
      -1,   260,    -1,   262,   263,   264,    -1,    -1,    -1,    -1,
      -1,   270,   271,    -1,   273,    -1,   275,    -1,   277,   278,
      -1,    -1,   281,    -1,    -1,    -1,    -1,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,    -1,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,    -1,    -1,    -1,   317,   318,
     319,   320,   321,   322,    -1,    -1,   325,   326,   327,   328,
      -1,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,    -1,   342,   343,   344,    -1,    -1,   347,   348,
     349,   350,   351,    -1,   353,   354,   355,    -1,   357,   358,
      -1,   360,   361,   362,    -1,   364,   365,   366,   367,    -1,
     369,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     379,   380,   381,    -1,   383,   384,    -1,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
      -1,   400,   401,   402,    -1,   404,    -1,   406,   407,   408,
     409,   410,    -1,   412,   413,   414,    -1,    -1,   417,    -1,
      -1,    -1,   421,   422,   423,   424,   425,    -1,    -1,   428,
     429,   430,   431,   432,    -1,   434,   435,    -1,   437,   438,
     439,   440,   441,   442,    -1,   444,    -1,   446,   447,    -1,
     449,   450,    -1,    -1,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,    -1,   465,   466,    -1,    -1,
      -1,   470,   471,   472,   473,    -1,    -1,    -1,   477,    -1,
      -1,    -1,   481,    -1,   483,   484,   485,   486,   487,    -1,
     489,   490,   491,   492,   493,   494,    -1,    -1,    -1,    -1,
      -1,    -1,   501,   502,    -1,   504,    -1,    -1,   507,    -1,
      -1,   510,   511,   512,   513,   514,   515,   516,    -1,   518,
     519,   520,   521,   522,   523,   524,   525,   526,   527,   528,
     529,   530,   531,   532,    -1,   534,    -1,   536,   537,   538,
     539,    -1,   541,   542,   543,    -1,   545,   546,   547,   548,
      -1,    -1,    -1,    -1,    -1,   554,   555,   556,    -1,   558,
     559,   560,   561,   562,   563,   564,   565,   566,   567,   568,
     569,    -1,   571,   572,    -1,    -1,   575,    -1,    -1,   578,
      -1,   580,    -1,   582,   583,   584,    -1,    -1,   587,   588,
     589,   590,   591,    -1,    -1,   594,   595,    -1,   597,   598,
     599,   600,   601,   602,   603,    -1,    -1,    -1,    -1,    -1,
      -1,   610,   611,    -1,   613,   614,   615,    -1,    -1,   618,
      -1,    -1,    -1,    -1,   623,   624,    -1,    -1,    -1,    -1,
     629,   630,    -1,    -1,   633,   634,    -1,    -1,   637,   638,
       5,    -1,     7,     8,     9,    10,    11,    -1,    -1,    14,
      -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    -1,    -1,    34,
      35,    36,    37,    38,    39,    40,    -1,    42,    43,    44,
      -1,    46,    -1,    48,    49,    -1,    -1,    52,    53,    54,
      55,    56,    -1,    58,    59,    60,    61,    62,    -1,    64,
      65,    66,    67,    68,    69,    70,    -1,    72,    73,    74,
      75,    76,    77,    78,    79,    -1,    81,    82,    83,    84,
      85,    86,    87,    88,    -1,    90,    91,    -1,    93,    94,
      95,    96,    97,    -1,    99,   100,   101,   102,    -1,    -1,
     105,   106,   107,    -1,   109,   110,   111,    -1,   113,   114,
     115,   116,   117,   118,    -1,    -1,    -1,    -1,   123,   124,
     125,    -1,    -1,   128,   129,    -1,   131,    -1,    -1,    -1,
     135,    -1,   137,   138,   139,   140,    -1,    -1,    -1,   144,
      -1,    -1,   147,   148,   149,    -1,    -1,    -1,   153,    -1,
     155,   156,    -1,   158,   159,   160,    -1,    -1,   163,   164,
      -1,   166,   167,   168,   169,   170,   171,   172,    -1,   174,
     175,   176,   177,   178,   179,   180,    -1,   182,   183,   184,
     185,    -1,   187,    -1,    -1,    -1,   191,    -1,   193,    -1,
     195,    -1,   197,   198,   199,   200,   201,   202,    -1,   204,
      -1,   206,    -1,   208,   209,   210,    -1,   212,   213,    -1,
     215,   216,    -1,    -1,    -1,   220,   221,   222,   223,   224,
      -1,   226,   227,   228,    -1,   230,    -1,   232,    -1,    -1,
      -1,   236,   237,   238,   239,    -1,    -1,   242,    -1,   244,
     245,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,    -1,
     255,   256,   257,    -1,    -1,   260,    -1,   262,   263,   264,
      -1,    -1,    -1,    -1,    -1,   270,   271,    -1,   273,    -1,
     275,    -1,   277,   278,    -1,    -1,   281,    -1,    -1,    -1,
      -1,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,    -1,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,    -1,    -1,
      -1,    -1,   317,   318,   319,   320,   321,   322,    -1,    -1,
     325,   326,   327,   328,    -1,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,    -1,   342,   343,   344,
      -1,    -1,   347,   348,   349,   350,   351,    -1,   353,   354,
     355,    -1,   357,   358,    -1,   360,   361,   362,    -1,   364,
     365,   366,   367,    -1,   369,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   379,   380,   381,    -1,   383,   384,
      -1,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,    -1,   400,   401,   402,    -1,   404,
      -1,   406,   407,   408,   409,   410,    -1,   412,   413,   414,
      -1,    -1,   417,    -1,    -1,    -1,   421,   422,   423,   424,
     425,    -1,    -1,   428,   429,   430,   431,   432,    -1,   434,
     435,    -1,   437,   438,   439,   440,   441,   442,    -1,   444,
      -1,   446,   447,    -1,   449,   450,    -1,    -1,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,    -1,
     465,   466,    -1,    -1,    -1,   470,   471,   472,   473,    -1,
      -1,    -1,   477,    -1,    -1,    -1,   481,    -1,   483,   484,
     485,   486,   487,    -1,   489,   490,   491,   492,   493,   494,
      -1,    -1,    -1,    -1,    -1,    -1,   501,   502,    -1,   504,
      -1,    -1,   507,    -1,    -1,   510,   511,   512,   513,   514,
     515,   516,    -1,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,    -1,   534,
      -1,   536,   537,   538,   539,    -1,   541,   542,   543,    -1,
     545,   546,   547,   548,    -1,    -1,    -1,    -1,    -1,   554,
     555,   556,    -1,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,    -1,   571,   572,    -1,    -1,
     575,    -1,    -1,   578,    -1,   580,    -1,   582,   583,   584,
      -1,    -1,   587,   588,   589,   590,   591,    -1,    -1,   594,
     595,    -1,   597,   598,   599,   600,   601,   602,   603,    -1,
      -1,    -1,    -1,    -1,    -1,   610,   611,    -1,   613,   614,
     615,    -1,    -1,   618,    -1,    -1,    -1,    -1,   623,   624,
      -1,    -1,    -1,    -1,   629,   630,    -1,    -1,   633,   634,
      -1,    -1,   637,   638,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      21,    -1,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    -1,    -1,    34,    35,    36,    37,    38,    39,    40,
      -1,    42,    43,    44,    -1,    46,    -1,    48,    49,    -1,
      -1,    52,    53,    54,    55,    56,    -1,    58,    59,    60,
      61,    62,    -1,    64,    65,    66,    67,    68,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    79,    -1,
      81,    82,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    -1,    93,    94,    95,    96,    97,    -1,    99,   100,
     101,   102,    -1,    -1,   105,   106,   107,    -1,   109,   110,
     111,    -1,   113,   114,   115,   116,   117,   118,    -1,    -1,
      -1,    -1,   123,   124,   125,    -1,    -1,   128,   129,    -1,
     131,    -1,    -1,    -1,   135,    -1,   137,   138,   139,   140,
      -1,    -1,    -1,   144,    -1,    -1,   147,   148,   149,    -1,
      -1,    -1,   153,    -1,   155,   156,    -1,   158,   159,   160,
      -1,    -1,   163,   164,    -1,   166,   167,   168,   169,   170,
     171,   172,    -1,   174,   175,   176,   177,   178,   179,   180,
      -1,   182,   183,   184,   185,    -1,   187,    -1,    -1,    -1,
     191,    -1,   193,    -1,   195,    -1,   197,   198,   199,   200,
     201,   202,    -1,   204,    -1,   206,    -1,   208,   209,   210,
      -1,   212,   213,    -1,   215,   216,    -1,    -1,    -1,   220,
     221,   222,   223,   224,    -1,   226,   227,   228,    -1,   230,
      -1,   232,    -1,    -1,    -1,   236,   237,   238,   239,    -1,
      -1,   242,    -1,   244,   245,    -1,   247,   248,    -1,    -1,
      -1,   252,    -1,    -1,   255,   256,   257,    -1,    -1,   260,
      -1,   262,   263,   264,    -1,    -1,    -1,    -1,    -1,   270,
     271,    -1,   273,    -1,   275,    -1,   277,   278,    -1,    -1,
     281,    -1,    -1,    -1,    -1,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
      -1,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,    -1,    -1,    -1,    -1,   317,   318,   319,   320,
     321,   322,    -1,    -1,   325,   326,   327,   328,    -1,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
      -1,   342,   343,   344,    -1,    -1,   347,   348,   349,   350,
     351,    -1,   353,   354,   355,    -1,   357,   358,    -1,   360,
     361,   362,    -1,   364,   365,   366,   367,    -1,   369,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   379,   380,
     381,    -1,   383,   384,    -1,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,    -1,   400,
     401,   402,    -1,   404,    -1,   406,   407,   408,   409,   410,
      -1,   412,   413,   414,    -1,    -1,   417,    -1,    -1,    -1,
     421,   422,   423,   424,   425,    -1,    -1,   428,   429,   430,
     431,   432,    -1,   434,   435,    -1,   437,   438,   439,   440,
     441,   442,    -1,   444,    -1,   446,   447,    -1,   449,   450,
      -1,    -1,   453,   454,   455,   456,   457,   458,   459,   460,
     461,   462,   463,    -1,   465,   466,    -1,    -1,    -1,   470,
     471,   472,   473,    -1,    -1,    -1,   477,    -1,    -1,    -1,
     481,    -1,   483,   484,   485,   486,   487,    -1,   489,   490,
     491,   492,   493,   494,    -1,    -1,    -1,    -1,    -1,    -1,
     501,   502,    -1,   504,    -1,    -1,   507,    -1,    -1,   510,
     511,   512,   513,   514,   515,   516,    -1,   518,   519,   520,
     521,   522,   523,   524,   525,   526,   527,   528,   529,   530,
     531,   532,    -1,   534,    -1,   536,   537,   538,   539,    -1,
     541,   542,   543,    -1,   545,   546,   547,   548,    -1,    -1,
      -1,    -1,    -1,   554,   555,   556,    -1,   558,   559,   560,
     561,   562,   563,   564,   565,   566,   567,   568,   569,    -1,
     571,   572,    -1,    -1,   575,    -1,    -1,   578,    -1,   580,
      -1,   582,   583,   584,    -1,    -1,   587,   588,   589,   590,
     591,    -1,    -1,   594,   595,    -1,   597,   598,   599,   600,
     601,   602,   603,    -1,    -1,    -1,    -1,    -1,    -1,   610,
     611,    -1,   613,   614,   615,    -1,    -1,   618,    -1,    -1,
      -1,    -1,   623,   624,    -1,    -1,    -1,    -1,   629,   630,
      -1,    -1,   633,   634,    -1,    -1,   637,   638,     5,    -1,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    -1,    -1,    34,    35,    36,
      37,    38,    39,    40,    -1,    42,    43,    44,    -1,    46,
      -1,    48,    49,    -1,    -1,    52,    53,    54,    55,    56,
      -1,    58,    59,    60,    61,    62,    -1,    64,    65,    66,
      67,    68,    69,    70,    -1,    72,    73,    74,    75,    76,
      77,    78,    79,    -1,    81,    82,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    -1,    93,    94,    95,    96,
      97,    -1,    99,   100,   101,   102,    -1,    -1,   105,   106,
     107,    -1,   109,   110,   111,    -1,   113,   114,   115,   116,
     117,   118,    -1,    -1,    -1,    -1,   123,   124,   125,    -1,
      -1,   128,   129,    -1,   131,    -1,    -1,    -1,   135,    -1,
     137,   138,   139,   140,    -1,    -1,    -1,   144,    -1,    -1,
     147,   148,   149,    -1,    -1,    -1,   153,    -1,   155,   156,
      -1,   158,   159,   160,    -1,    -1,   163,   164,    -1,   166,
     167,   168,   169,   170,   171,   172,    -1,   174,   175,   176,
     177,   178,   179,   180,    -1,   182,   183,   184,   185,    -1,
     187,    -1,    -1,    -1,   191,    -1,   193,    -1,   195,    -1,
     197,   198,   199,   200,   201,   202,    -1,   204,    -1,   206,
      -1,   208,   209,   210,    -1,   212,   213,    -1,   215,   216,
      -1,    -1,    -1,   220,   221,   222,   223,   224,    -1,   226,
     227,   228,    -1,   230,    -1,   232,    -1,    -1,    -1,   236,
     237,   238,   239,    -1,    -1,   242,    -1,   244,   245,    -1,
     247,   248,    -1,    -1,    -1,   252,    -1,    -1,   255,   256,
     257,    -1,    -1,   260,    -1,   262,   263,   264,    -1,    -1,
      -1,    -1,    -1,   270,   271,    -1,   273,    -1,   275,    -1,
     277,   278,    -1,    -1,   281,    -1,    -1,    -1,    -1,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,    -1,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,    -1,    -1,    -1,    -1,
     317,   318,   319,   320,   321,   322,    -1,    -1,   325,   326,
     327,   328,    -1,   330,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,    -1,   342,   343,   344,    -1,    -1,
     347,   348,   349,   350,   351,    -1,   353,   354,   355,    -1,
     357,   358,    -1,   360,   361,   362,    -1,   364,   365,   366,
     367,    -1,   369,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   379,   380,   381,    -1,   383,   384,    -1,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,    -1,   400,   401,   402,    -1,   404,    -1,   406,
     407,   408,   409,   410,    -1,   412,   413,   414,    -1,    -1,
     417,    -1,    -1,    -1,   421,   422,   423,   424,   425,    -1,
      -1,   428,   429,   430,   431,   432,    -1,   434,   435,    -1,
     437,   438,   439,   440,   441,   442,    -1,   444,    -1,   446,
     447,    -1,   449,   450,    -1,    -1,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,    -1,   465,   466,
      -1,    -1,    -1,   470,   471,   472,   473,    -1,    -1,    -1,
     477,    -1,    -1,    -1,   481,    -1,   483,   484,   485,   486,
     487,    -1,   489,   490,   491,   492,   493,   494,    -1,    -1,
      -1,    -1,    -1,    -1,   501,   502,    -1,   504,    -1,    -1,
     507,    -1,    -1,   510,   511,   512,   513,   514,   515,   516,
      -1,   518,   519,   520,   521,   522,   523,   524,   525,   526,
     527,   528,   529,   530,   531,   532,    -1,   534,    -1,   536,
     537,   538,   539,    -1,   541,   542,   543,    -1,   545,   546,
     547,   548,    -1,    -1,    -1,    -1,    -1,   554,   555,   556,
      -1,   558,   559,   560,   561,   562,   563,   564,   565,   566,
     567,   568,   569,    -1,   571,   572,    -1,    -1,   575,    -1,
      -1,   578,    -1,   580,    -1,   582,   583,   584,    -1,    -1,
     587,   588,   589,   590,   591,    -1,    -1,   594,   595,    -1,
     597,   598,   599,   600,   601,   602,   603,    -1,    -1,    -1,
      -1,    -1,    -1,   610,   611,    -1,   613,   614,   615,    -1,
      -1,   618,    -1,    -1,    -1,    -1,   623,   624,    -1,    -1,
      -1,    -1,   629,   630,    -1,    -1,   633,   634,    -1,    -1,
     637,   638,     5,    -1,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    -1,
      -1,    -1,    35,    36,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,
      -1,    -1,    55,    56,    -1,    58,    59,    -1,    61,    62,
      -1,    64,    65,    66,    67,    68,    69,    70,    -1,    72,
      73,    74,    75,    76,    77,    78,    79,    -1,    81,    82,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    -1,
      93,    94,    95,    96,    97,    -1,    99,    -1,    -1,   102,
      -1,    -1,   105,    -1,    -1,    -1,   109,    -1,    -1,    -1,
     113,   114,   115,    -1,    -1,   118,    -1,    -1,    -1,    -1,
     123,   124,   125,    -1,    -1,    -1,   129,    -1,   131,    -1,
      -1,    -1,   135,    -1,   137,   138,   139,   140,    -1,    -1,
      -1,   144,    -1,    -1,   147,   148,   149,    -1,    -1,    -1,
     153,    -1,   155,   156,    -1,   158,   159,   160,    -1,    -1,
     163,   164,    -1,   166,   167,   168,   169,   170,   171,    -1,
      -1,   174,   175,   176,    -1,   178,   179,   180,    -1,   182,
     183,   184,   185,    -1,   187,    -1,    -1,    -1,   191,    -1,
     193,    -1,   195,    -1,   197,   198,   199,   200,   201,   202,
      -1,   204,    -1,    -1,    -1,   208,   209,   210,    -1,   212,
     213,    -1,   215,   216,    -1,    -1,    -1,   220,   221,   222,
     223,    -1,    -1,   226,   227,   228,    -1,   230,    -1,   232,
      -1,    -1,    -1,    -1,   237,   238,    -1,    -1,    -1,   242,
      -1,   244,   245,    -1,   247,   248,    -1,    -1,    -1,   252,
      -1,    -1,   255,   256,   257,    -1,    -1,   260,    -1,    -1,
     263,   264,    -1,    -1,    -1,    -1,    -1,   270,   271,    -1,
     273,    -1,   275,    -1,   277,   278,    -1,    -1,   281,    -1,
      -1,    -1,    -1,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,    -1,   302,
     303,   304,    -1,   306,   307,   308,   309,    -1,   311,   312,
      -1,    -1,    -1,    -1,   317,   318,   319,   320,   321,   322,
      -1,    -1,   325,   326,    -1,   328,    -1,   330,    -1,   332,
     333,   334,   335,   336,   337,   338,   339,   340,    -1,   342,
     343,   344,    -1,    -1,   347,   348,   349,   350,    -1,    -1,
      -1,   354,   355,    -1,   357,   358,    -1,   360,   361,   362,
      -1,   364,   365,   366,   367,    -1,   369,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   379,   380,   381,    -1,
      -1,   384,    -1,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,    -1,    -1,   400,   401,   402,
      -1,   404,    -1,   406,   407,   408,   409,   410,    -1,   412,
     413,   414,    -1,    -1,   417,    -1,    -1,    -1,   421,   422,
     423,   424,   425,    -1,    -1,   428,   429,   430,   431,   432,
      -1,   434,   435,    -1,   437,   438,   439,    -1,    -1,   442,
      -1,   444,    -1,   446,   447,    -1,   449,   450,    -1,    -1,
      -1,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     463,    -1,   465,   466,    -1,    -1,    -1,   470,   471,   472,
     473,    -1,    -1,    -1,   477,    -1,    -1,    -1,   481,    -1,
     483,   484,   485,   486,   487,    -1,   489,   490,   491,   492,
     493,   494,    -1,    -1,    -1,    -1,    -1,    -1,   501,   502,
      -1,   504,    -1,    -1,   507,    -1,    -1,   510,   511,   512,
      -1,    -1,   515,   516,    -1,   518,   519,   520,   521,   522,
     523,    -1,    -1,   526,   527,   528,   529,    -1,   531,   532,
      -1,   534,    -1,   536,   537,   538,   539,    -1,   541,   542,
     543,    -1,   545,   546,   547,   548,    -1,    -1,    -1,    -1,
      -1,   554,   555,   556,    -1,    -1,   559,   560,   561,   562,
     563,   564,   565,   566,   567,   568,   569,    -1,   571,   572,
      -1,    -1,   575,    -1,    -1,   578,    -1,   580,    -1,   582,
     583,   584,    -1,    -1,    -1,    -1,    -1,    -1,   591,    -1,
      -1,   594,    -1,    -1,    -1,   598,   599,   600,   601,   602,
     603,    -1,    -1,    -1,    -1,    -1,    -1,   610,   611,    -1,
     613,   614,   615,    -1,    -1,   618,    -1,    -1,    -1,    -1,
       5,    -1,     7,     8,     9,    10,    11,    -1,    -1,    14,
      -1,    -1,    -1,    18,   637,   638,    21,    -1,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    -1,    -1,    -1,
      35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,
      -1,    46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,
      55,    56,    -1,    58,    59,    -1,    61,    62,    -1,    64,
      65,    66,    67,    68,    69,    70,    -1,    72,    73,    74,
      75,    76,    77,    78,    79,    -1,    81,    82,    83,    84,
      85,    86,    87,    88,    -1,    90,    91,    92,    93,    94,
      95,    96,    97,    -1,    99,    -1,    -1,   102,    -1,    -1,
     105,    -1,    -1,    -1,   109,    -1,    -1,    -1,   113,   114,
     115,    -1,    -1,   118,    -1,    -1,    -1,    -1,   123,   124,
      -1,    -1,    -1,    -1,   129,    -1,   131,    -1,    -1,    -1,
     135,    -1,   137,   138,   139,   140,    -1,    -1,    -1,   144,
      -1,    -1,   147,   148,   149,    -1,    -1,    -1,   153,    -1,
     155,   156,    -1,   158,   159,   160,    -1,    -1,   163,   164,
      -1,   166,   167,   168,   169,   170,   171,    -1,    -1,   174,
     175,   176,    -1,    -1,   179,   180,    -1,   182,   183,   184,
      -1,    -1,   187,    -1,    -1,    -1,   191,    -1,   193,   194,
     195,    -1,   197,   198,   199,   200,   201,   202,    -1,   204,
      -1,    -1,    -1,   208,   209,   210,    -1,   212,    -1,    -1,
     215,   216,    -1,    -1,    -1,   220,   221,   222,   223,    -1,
      -1,   226,   227,   228,   229,   230,    -1,   232,    -1,    -1,
      -1,    -1,   237,   238,    -1,    -1,    -1,   242,    -1,   244,
     245,    -1,   247,   248,    -1,    -1,    -1,   252,   253,    -1,
     255,   256,   257,    -1,    -1,   260,    -1,    -1,   263,   264,
      -1,   266,    -1,    -1,    -1,   270,   271,    -1,   273,    -1,
     275,    -1,   277,   278,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,    -1,   302,   303,   304,
      -1,   306,   307,   308,   309,    -1,   311,   312,    -1,    -1,
      -1,    -1,   317,   318,   319,   320,   321,   322,    -1,    -1,
     325,   326,    -1,   328,    -1,   330,    -1,   332,   333,   334,
     335,   336,   337,   338,   339,   340,    -1,    -1,   343,   344,
      -1,    -1,   347,   348,   349,   350,    -1,    -1,    -1,   354,
     355,    -1,    -1,    -1,    -1,   360,   361,   362,    -1,   364,
     365,   366,   367,    -1,   369,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   379,   380,   381,    -1,    -1,   384,
      -1,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,    -1,    -1,   400,   401,   402,    -1,   404,
      -1,   406,   407,   408,   409,   410,    -1,   412,   413,   414,
      -1,    -1,   417,    -1,    -1,    -1,   421,   422,   423,   424,
     425,    -1,    -1,   428,   429,   430,   431,   432,    -1,   434,
     435,    -1,   437,   438,   439,    -1,    -1,   442,    -1,   444,
      -1,   446,   447,    -1,   449,   450,    -1,    -1,    -1,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,    -1,
     465,   466,   467,    -1,    -1,   470,   471,   472,   473,    -1,
      -1,    -1,   477,    -1,    -1,    -1,   481,    -1,   483,   484,
     485,   486,   487,    -1,   489,   490,   491,   492,   493,   494,
     495,    -1,    -1,    -1,    -1,    -1,   501,   502,    -1,   504,
      -1,    -1,   507,    -1,    -1,   510,   511,   512,    -1,    -1,
     515,   516,    -1,   518,   519,   520,   521,   522,   523,    -1,
      -1,   526,   527,   528,   529,    -1,   531,   532,    -1,   534,
      -1,   536,   537,   538,   539,    -1,    -1,   542,   543,    -1,
     545,   546,   547,   548,    -1,    -1,    -1,    -1,    -1,   554,
     555,   556,    -1,    -1,    -1,   560,   561,   562,   563,    -1,
     565,   566,    -1,   568,   569,    -1,   571,   572,    -1,    -1,
     575,    -1,    -1,   578,    -1,   580,    -1,   582,   583,   584,
      -1,    -1,    -1,    -1,    -1,    -1,   591,    -1,    -1,   594,
      -1,    -1,    -1,   598,   599,   600,   601,   602,   603,    -1,
      -1,    -1,    -1,    -1,    -1,   610,   611,    -1,   613,   614,
     615,    -1,    -1,   618,    -1,    -1,     5,    -1,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      -1,    -1,    21,   638,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,
      49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,
      59,    -1,    61,    62,    -1,    64,    65,    66,    67,    68,
      69,    70,    -1,    72,    73,    74,    75,    76,    77,    78,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    92,    93,    94,    95,    96,    97,    -1,
      99,    -1,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,
     109,    -1,    -1,    -1,   113,   114,   115,    -1,    -1,   118,
      -1,    -1,    -1,    -1,   123,   124,    -1,    -1,    -1,    -1,
     129,    -1,   131,    -1,    -1,    -1,   135,    -1,   137,   138,
     139,   140,    -1,    -1,    -1,   144,    -1,    -1,   147,   148,
     149,    -1,    -1,    -1,   153,    -1,   155,   156,    -1,   158,
     159,   160,    -1,    -1,   163,   164,    -1,   166,   167,   168,
     169,   170,   171,    -1,    -1,   174,   175,   176,    -1,    -1,
     179,   180,    -1,   182,   183,   184,    -1,    -1,   187,    -1,
      -1,    -1,   191,    -1,   193,   194,   195,    -1,   197,   198,
     199,   200,   201,   202,    -1,   204,    -1,    -1,    -1,   208,
     209,   210,    -1,   212,    -1,    -1,   215,   216,    -1,    -1,
      -1,   220,   221,   222,   223,    -1,    -1,   226,   227,   228,
     229,   230,    -1,   232,    -1,    -1,    -1,    -1,   237,   238,
      -1,    -1,    -1,   242,    -1,   244,   245,    -1,   247,   248,
      -1,    -1,    -1,   252,   253,    -1,   255,   256,   257,    -1,
      -1,   260,    -1,    -1,   263,   264,    -1,    -1,    -1,    -1,
      -1,   270,   271,    -1,   273,    -1,   275,    -1,   277,   278,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,    -1,   302,   303,   304,    -1,   306,   307,   308,
     309,    -1,   311,   312,    -1,    -1,    -1,    -1,   317,   318,
     319,   320,   321,   322,    -1,    -1,   325,   326,    -1,   328,
      -1,   330,    -1,   332,   333,   334,   335,   336,   337,   338,
     339,   340,    -1,    -1,   343,   344,    -1,    -1,   347,   348,
     349,   350,    -1,    -1,    -1,   354,   355,    -1,    -1,    -1,
      -1,   360,   361,   362,    -1,   364,   365,   366,   367,    -1,
     369,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     379,   380,   381,    -1,    -1,   384,    -1,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,    -1,
      -1,   400,   401,   402,    -1,   404,    -1,   406,   407,   408,
     409,   410,    -1,   412,   413,   414,    -1,    -1,   417,    -1,
      -1,    -1,   421,   422,   423,   424,   425,    -1,    -1,   428,
     429,   430,   431,   432,    -1,   434,   435,    -1,   437,   438,
     439,    -1,    -1,   442,    -1,   444,    -1,   446,   447,    -1,
     449,   450,    -1,    -1,    -1,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,    -1,   465,   466,    -1,    -1,
      -1,   470,   471,   472,   473,    -1,    -1,    -1,   477,    -1,
      -1,    -1,   481,    -1,   483,   484,   485,   486,   487,    -1,
     489,   490,   491,   492,   493,   494,   495,    -1,    -1,    -1,
      -1,    -1,   501,   502,    -1,   504,    -1,    -1,   507,    -1,
      -1,   510,   511,   512,    -1,    -1,   515,   516,    -1,   518,
     519,   520,   521,   522,   523,    -1,    -1,   526,   527,   528,
     529,    -1,   531,   532,    -1,   534,    -1,   536,   537,   538,
     539,    -1,    -1,   542,   543,    -1,   545,   546,   547,   548,
      -1,    -1,    -1,    -1,    -1,   554,   555,   556,    -1,    -1,
      -1,   560,   561,   562,   563,    -1,   565,   566,    -1,   568,
     569,    -1,   571,   572,    -1,    -1,   575,    -1,    -1,   578,
      -1,   580,    -1,   582,   583,   584,    -1,    -1,    -1,    -1,
      -1,    -1,   591,    -1,    -1,   594,    -1,    -1,    -1,   598,
     599,   600,   601,   602,   603,    -1,    -1,    -1,    -1,    -1,
      -1,   610,   611,    -1,   613,   614,   615,    -1,    -1,   618,
      -1,    -1,     5,    -1,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,   638,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    -1,
      -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,
      -1,    -1,    55,    56,    -1,    58,    59,    -1,    61,    62,
      -1,    64,    65,    66,    67,    68,    69,    70,    -1,    72,
      73,    74,    75,    76,    77,    78,    79,    -1,    81,    82,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    -1,
      93,    94,    95,    96,    97,    -1,    99,    -1,    -1,   102,
      -1,    -1,   105,    -1,    -1,    -1,   109,    -1,    -1,    -1,
     113,   114,   115,    -1,    -1,   118,    -1,    -1,    -1,    -1,
     123,   124,    -1,    -1,    -1,    -1,   129,    -1,   131,    -1,
      -1,    -1,   135,    -1,   137,   138,   139,   140,    -1,    -1,
      -1,   144,    -1,    -1,   147,   148,   149,    -1,    -1,    -1,
     153,    -1,   155,   156,    -1,   158,   159,   160,    -1,    -1,
     163,   164,    -1,   166,   167,   168,   169,   170,   171,    -1,
      -1,   174,   175,   176,    -1,    -1,   179,   180,    -1,   182,
     183,   184,    -1,    -1,   187,    -1,    -1,    -1,   191,    -1,
     193,    -1,   195,    -1,   197,   198,   199,   200,   201,   202,
      -1,   204,    -1,    -1,    -1,   208,   209,   210,    -1,   212,
      -1,    -1,   215,   216,    -1,    -1,    -1,   220,   221,   222,
     223,    -1,    -1,   226,   227,   228,    -1,   230,    -1,   232,
      -1,    -1,    -1,    -1,   237,   238,    -1,    -1,    -1,   242,
      -1,   244,   245,    -1,   247,   248,    -1,    -1,    -1,   252,
      -1,    -1,   255,   256,   257,    -1,    -1,   260,    -1,    -1,
     263,   264,    -1,    -1,    -1,    -1,    -1,   270,   271,    -1,
     273,    -1,   275,    -1,   277,   278,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,    -1,   302,
     303,   304,    -1,   306,   307,   308,   309,    -1,   311,   312,
      -1,    -1,    -1,    -1,   317,   318,   319,   320,   321,   322,
      -1,    -1,   325,   326,    -1,   328,    -1,   330,    -1,   332,
     333,   334,   335,   336,   337,   338,   339,   340,    -1,    -1,
     343,   344,    -1,    -1,   347,   348,   349,   350,    -1,    -1,
      -1,   354,   355,    -1,    -1,    -1,    -1,   360,   361,   362,
      -1,   364,   365,   366,   367,    -1,   369,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   379,   380,   381,    -1,
      -1,   384,    -1,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,    -1,    -1,   400,   401,   402,
      -1,   404,    -1,   406,   407,   408,   409,   410,    -1,   412,
     413,   414,    -1,    -1,   417,    -1,    -1,    -1,   421,   422,
     423,   424,   425,    -1,    -1,   428,   429,   430,   431,   432,
      -1,   434,   435,    -1,   437,   438,   439,    -1,    -1,   442,
      -1,   444,    -1,   446,   447,    -1,   449,   450,    -1,    -1,
      -1,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     463,    -1,   465,   466,   467,    -1,    -1,   470,   471,   472,
     473,    -1,    -1,    -1,   477,    -1,    -1,    -1,   481,    -1,
     483,   484,   485,   486,   487,    -1,   489,   490,   491,   492,
     493,   494,    -1,    -1,    -1,    -1,    -1,    -1,   501,   502,
      -1,   504,    -1,    -1,   507,    -1,    -1,   510,   511,   512,
      -1,    -1,   515,   516,    -1,   518,   519,   520,   521,   522,
     523,    -1,    -1,   526,   527,   528,   529,    -1,   531,   532,
      -1,   534,    -1,   536,   537,   538,   539,    -1,    -1,   542,
     543,    -1,   545,   546,   547,   548,    -1,    -1,    -1,    -1,
      -1,   554,   555,   556,    -1,    -1,    -1,   560,   561,   562,
     563,    -1,   565,   566,    -1,   568,   569,    -1,   571,   572,
      -1,    -1,   575,    -1,    -1,   578,    -1,   580,    -1,   582,
     583,   584,    -1,    -1,    -1,    -1,    -1,    -1,   591,    -1,
      -1,   594,    -1,    -1,    -1,   598,   599,   600,   601,   602,
     603,    -1,    -1,    -1,    -1,    -1,    -1,   610,   611,    -1,
     613,   614,   615,    -1,    -1,   618,    -1,    -1,     5,    -1,
       7,     8,     9,    10,    11,    -1,    -1,    14,   631,    -1,
      -1,    18,    -1,    -1,    21,   638,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    -1,    -1,    -1,    35,    -1,
      -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,
      -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,    56,
      -1,    58,    59,    -1,    61,    62,    -1,    64,    65,    66,
      67,    68,    69,    70,    -1,    72,    73,    74,    75,    76,
      77,    78,    79,    -1,    81,    82,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    -1,    93,    94,    95,    96,
      97,    -1,    99,    -1,    -1,   102,    -1,    -1,   105,    -1,
      -1,    -1,   109,    -1,    -1,    -1,   113,   114,   115,    -1,
      -1,   118,    -1,    -1,    -1,    -1,   123,   124,    -1,    -1,
      -1,    -1,   129,    -1,   131,    -1,    -1,    -1,   135,    -1,
     137,   138,   139,   140,    -1,    -1,    -1,   144,    -1,    -1,
     147,   148,   149,    -1,    -1,    -1,   153,    -1,   155,   156,
      -1,   158,   159,   160,    -1,    -1,   163,   164,    -1,   166,
     167,   168,   169,   170,   171,    -1,    -1,   174,   175,   176,
      -1,    -1,   179,   180,    -1,   182,   183,   184,    -1,    -1,
     187,    -1,    -1,    -1,   191,    -1,   193,    -1,   195,    -1,
     197,   198,   199,   200,   201,   202,    -1,   204,    -1,    -1,
      -1,   208,   209,   210,    -1,   212,    -1,    -1,   215,   216,
      -1,    -1,    -1,   220,   221,   222,   223,    -1,    -1,   226,
     227,   228,    -1,   230,    -1,   232,    -1,    -1,    -1,    -1,
     237,   238,    -1,    -1,    -1,   242,    -1,   244,   245,    -1,
     247,   248,    -1,    -1,    -1,   252,    -1,    -1,   255,   256,
     257,    -1,    -1,   260,    -1,    -1,   263,   264,    -1,    -1,
      -1,    -1,    -1,   270,   271,    -1,   273,    -1,   275,    -1,
     277,   278,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,    -1,   302,   303,   304,    -1,   306,
     307,   308,   309,    -1,   311,   312,    -1,    -1,    -1,    -1,
     317,   318,   319,   320,   321,   322,    -1,    -1,   325,   326,
      -1,   328,    -1,   330,    -1,   332,   333,   334,   335,   336,
     337,   338,   339,   340,    -1,    -1,   343,   344,    -1,    -1,
     347,   348,   349,   350,    -1,    -1,    -1,   354,   355,    -1,
      -1,    -1,    -1,   360,   361,   362,    -1,   364,   365,   366,
     367,    -1,   369,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   379,   380,   381,    -1,    -1,   384,    -1,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,    -1,    -1,   400,   401,   402,    -1,   404,    -1,   406,
     407,   408,   409,   410,    -1,   412,   413,   414,    -1,    -1,
     417,    -1,    -1,    -1,   421,   422,   423,   424,   425,    -1,
      -1,   428,   429,   430,   431,   432,    -1,   434,   435,    -1,
     437,   438,   439,    -1,    -1,   442,    -1,   444,    -1,   446,
     447,    -1,   449,   450,    -1,    -1,    -1,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,    -1,   465,   466,
      -1,    -1,    -1,   470,   471,   472,   473,    -1,    -1,    -1,
     477,    -1,    -1,    -1,   481,    -1,   483,   484,   485,   486,
     487,    -1,   489,   490,   491,   492,   493,   494,    -1,    -1,
      -1,    -1,    -1,    -1,   501,   502,    -1,   504,    -1,    -1,
     507,    -1,    -1,   510,   511,   512,    -1,    -1,   515,   516,
      -1,   518,   519,   520,   521,   522,   523,    -1,    -1,   526,
     527,   528,   529,    -1,   531,   532,    -1,   534,    -1,   536,
     537,   538,   539,    -1,    -1,   542,   543,    -1,   545,   546,
     547,   548,    -1,    -1,    -1,    -1,    -1,   554,   555,   556,
      -1,    -1,    -1,   560,   561,   562,   563,    -1,   565,   566,
      -1,   568,   569,    -1,   571,   572,    -1,    -1,   575,    -1,
      -1,   578,    -1,   580,    -1,   582,   583,   584,    -1,    -1,
      -1,    -1,    -1,    -1,   591,    -1,    -1,   594,    -1,    -1,
      -1,   598,   599,   600,   601,   602,   603,    -1,    -1,    -1,
      -1,    -1,    -1,   610,   611,    -1,   613,   614,   615,    -1,
      -1,   618,    -1,    -1,    -1,    -1,     5,    -1,     7,     8,
       9,    10,    11,    -1,   631,    14,    -1,    -1,    -1,    18,
     637,   638,    21,    -1,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,
      49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,
      59,    -1,    61,    62,    -1,    64,    65,    66,    67,    68,
      69,    70,    -1,    72,    73,    74,    75,    76,    77,    78,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    -1,    93,    94,    95,    96,    97,    -1,
      99,    -1,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,
     109,    -1,    -1,    -1,   113,   114,   115,    -1,    -1,   118,
      -1,    -1,    -1,    -1,   123,   124,    -1,    -1,    -1,    -1,
     129,    -1,   131,    -1,    -1,    -1,   135,    -1,   137,   138,
     139,   140,    -1,    -1,    -1,   144,    -1,    -1,   147,   148,
     149,    -1,    -1,    -1,   153,    -1,   155,   156,    -1,   158,
     159,   160,    -1,    -1,   163,   164,    -1,   166,   167,   168,
     169,   170,   171,    -1,    -1,   174,   175,   176,    -1,    -1,
     179,   180,    -1,   182,   183,   184,    -1,    -1,   187,    -1,
      -1,    -1,   191,    -1,   193,    -1,   195,    -1,   197,   198,
     199,   200,   201,   202,    -1,   204,    -1,    -1,    -1,   208,
     209,   210,    -1,   212,    -1,    -1,   215,   216,    -1,    -1,
      -1,   220,   221,   222,   223,    -1,    -1,   226,   227,   228,
      -1,   230,    -1,   232,    -1,    -1,    -1,    -1,   237,   238,
      -1,    -1,    -1,   242,    -1,   244,   245,    -1,   247,   248,
      -1,    -1,    -1,   252,    -1,    -1,   255,   256,   257,    -1,
      -1,   260,    -1,    -1,   263,   264,    -1,    -1,    -1,    -1,
      -1,   270,   271,    -1,   273,    -1,   275,    -1,   277,   278,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,    -1,   302,   303,   304,    -1,   306,   307,   308,
     309,    -1,   311,   312,    -1,    -1,    -1,    -1,   317,   318,
     319,   320,   321,   322,    -1,    -1,   325,   326,    -1,   328,
      -1,   330,    -1,   332,   333,   334,   335,   336,   337,   338,
     339,   340,    -1,    -1,   343,   344,    -1,    -1,   347,   348,
     349,   350,    -1,    -1,    -1,   354,   355,    -1,    -1,    -1,
      -1,   360,   361,   362,    -1,   364,   365,   366,   367,    -1,
     369,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     379,   380,   381,    -1,    -1,   384,    -1,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,    -1,
      -1,   400,   401,   402,    -1,   404,    -1,   406,   407,   408,
     409,   410,    -1,   412,   413,   414,    -1,    -1,   417,    -1,
      -1,    -1,   421,   422,   423,   424,   425,    -1,    -1,   428,
     429,   430,   431,   432,    -1,   434,   435,    -1,   437,   438,
     439,    -1,    -1,   442,    -1,   444,    -1,   446,   447,    -1,
     449,   450,    -1,    -1,    -1,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,    -1,   465,   466,    -1,    -1,
      -1,   470,   471,   472,   473,    -1,    -1,    -1,   477,    -1,
      -1,    -1,   481,    -1,   483,   484,   485,   486,   487,    -1,
     489,   490,   491,   492,   493,   494,    -1,    -1,    -1,    -1,
      -1,    -1,   501,   502,    -1,   504,    -1,    -1,   507,    -1,
      -1,   510,   511,   512,    -1,    -1,   515,   516,    -1,   518,
     519,   520,   521,   522,   523,    -1,    -1,   526,   527,   528,
     529,    -1,   531,   532,    -1,   534,    -1,   536,   537,   538,
     539,    -1,    -1,   542,   543,    -1,   545,   546,   547,   548,
      -1,    -1,    -1,    -1,    -1,   554,   555,   556,    -1,    -1,
      -1,   560,   561,   562,   563,    -1,   565,   566,    -1,   568,
     569,    -1,   571,   572,    -1,    -1,   575,    -1,    -1,   578,
      -1,   580,    -1,   582,   583,   584,    -1,    -1,    -1,    -1,
      -1,    -1,   591,    -1,    -1,   594,    -1,    -1,    -1,   598,
     599,   600,   601,   602,   603,    -1,    -1,    -1,    -1,    -1,
      -1,   610,   611,    -1,   613,   614,   615,    -1,    -1,   618,
      -1,    -1,    -1,    -1,     5,    -1,     7,     8,     9,    10,
      11,   630,    -1,    14,    -1,    -1,    -1,    18,    -1,   638,
      21,    -1,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    -1,    -1,    -1,    35,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    -1,    48,    49,    -1,
      -1,    52,    -1,    -1,    55,    56,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    66,    67,    68,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    79,    -1,
      81,    82,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    -1,    93,    94,    95,    96,    97,    -1,    99,    -1,
      -1,   102,    -1,    -1,   105,    -1,    -1,    -1,   109,    -1,
      -1,    -1,   113,   114,   115,    -1,    -1,   118,    -1,    -1,
      -1,    -1,   123,   124,    -1,    -1,    -1,    -1,   129,    -1,
     131,    -1,    -1,    -1,   135,    -1,   137,   138,   139,   140,
      -1,    -1,    -1,   144,    -1,    -1,   147,   148,   149,    -1,
      -1,    -1,   153,    -1,   155,   156,    -1,   158,   159,   160,
      -1,    -1,   163,   164,    -1,   166,   167,   168,   169,   170,
     171,    -1,    -1,   174,   175,   176,    -1,    -1,   179,   180,
      -1,   182,   183,   184,    -1,    -1,   187,    -1,    -1,    -1,
     191,    -1,   193,    -1,   195,    -1,   197,   198,   199,   200,
     201,   202,    -1,   204,    -1,    -1,    -1,   208,   209,   210,
      -1,   212,    -1,    -1,   215,   216,    -1,    -1,    -1,   220,
     221,   222,   223,    -1,    -1,   226,   227,   228,    -1,   230,
      -1,   232,    -1,    -1,    -1,    -1,   237,   238,    -1,   240,
      -1,   242,    -1,   244,   245,    -1,   247,   248,    -1,    -1,
      -1,   252,    -1,    -1,   255,   256,   257,    -1,    -1,   260,
      -1,    -1,   263,   264,    -1,    -1,    -1,    -1,    -1,   270,
     271,    -1,   273,    -1,   275,    -1,   277,   278,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
      -1,   302,   303,   304,    -1,   306,   307,   308,   309,    -1,
     311,   312,    -1,    -1,    -1,    -1,   317,   318,   319,   320,
     321,   322,    -1,    -1,   325,   326,    -1,   328,    -1,   330,
      -1,   332,   333,   334,   335,   336,   337,   338,   339,   340,
      -1,    -1,   343,   344,    -1,    -1,   347,   348,   349,   350,
      -1,    -1,    -1,   354,   355,    -1,    -1,    -1,    -1,   360,
     361,   362,    -1,   364,   365,   366,   367,    -1,   369,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   379,   380,
     381,    -1,    -1,   384,    -1,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,    -1,    -1,   400,
     401,   402,    -1,   404,    -1,   406,   407,   408,   409,   410,
      -1,   412,   413,   414,    -1,    -1,   417,    -1,    -1,    -1,
     421,   422,   423,   424,   425,    -1,    -1,   428,   429,   430,
     431,   432,    -1,   434,   435,    -1,   437,   438,   439,    -1,
      -1,   442,    -1,   444,    -1,   446,   447,    -1,   449,   450,
      -1,    -1,    -1,   454,   455,   456,   457,   458,   459,   460,
     461,   462,   463,    -1,   465,   466,    -1,    -1,    -1,   470,
     471,   472,   473,    -1,    -1,    -1,   477,    -1,    -1,    -1,
     481,    -1,   483,   484,   485,   486,   487,    -1,   489,   490,
     491,   492,   493,   494,    -1,    -1,    -1,    -1,    -1,    -1,
     501,   502,    -1,   504,    -1,    -1,   507,    -1,    -1,   510,
     511,   512,    -1,    -1,   515,   516,    -1,   518,   519,   520,
     521,   522,   523,    -1,    -1,   526,   527,   528,   529,    -1,
     531,   532,    -1,   534,    -1,   536,   537,   538,   539,    -1,
      -1,   542,   543,    -1,   545,   546,   547,   548,    -1,    -1,
      -1,    -1,    -1,   554,   555,   556,    -1,    -1,    -1,   560,
     561,   562,   563,    -1,   565,   566,    -1,   568,   569,    -1,
     571,   572,    -1,    -1,   575,    -1,    -1,   578,    -1,   580,
      -1,   582,   583,   584,    -1,    -1,    -1,    -1,    -1,    -1,
     591,    -1,    -1,   594,    -1,    -1,    -1,   598,   599,   600,
     601,   602,   603,    -1,    -1,    -1,    -1,    -1,    -1,   610,
     611,    -1,   613,   614,   615,    -1,    -1,   618,    -1,    -1,
       5,    -1,     7,     8,     9,    10,    11,    -1,    -1,    14,
      -1,    -1,    -1,    18,    -1,    -1,    21,   638,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    -1,    -1,    -1,
      35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,
      -1,    46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,
      55,    56,    -1,    58,    59,    -1,    61,    62,    -1,    64,
      65,    66,    67,    68,    69,    70,    -1,    72,    73,    74,
      75,    76,    77,    78,    79,    -1,    81,    82,    83,    84,
      85,    86,    87,    88,    -1,    90,    91,    -1,    93,    94,
      95,    96,    97,    -1,    99,    -1,    -1,   102,    -1,    -1,
     105,    -1,    -1,    -1,   109,    -1,    -1,    -1,   113,   114,
     115,    -1,    -1,   118,    -1,    -1,    -1,    -1,   123,   124,
      -1,    -1,    -1,    -1,   129,    -1,   131,    -1,    -1,    -1,
     135,    -1,   137,   138,   139,   140,    -1,    -1,    -1,   144,
      -1,    -1,   147,   148,   149,    -1,    -1,    -1,   153,    -1,
     155,   156,    -1,   158,   159,   160,    -1,    -1,   163,   164,
      -1,   166,   167,   168,   169,   170,   171,    -1,    -1,   174,
     175,   176,    -1,    -1,   179,   180,    -1,   182,   183,   184,
      -1,    -1,   187,    -1,    -1,    -1,   191,    -1,   193,    -1,
     195,    -1,   197,   198,   199,   200,   201,   202,    -1,   204,
      -1,    -1,    -1,   208,   209,   210,    -1,   212,    -1,    -1,
     215,   216,    -1,    -1,    -1,   220,   221,   222,   223,    -1,
      -1,   226,   227,   228,    -1,   230,    -1,   232,    -1,    -1,
      -1,    -1,   237,   238,    -1,    -1,    -1,   242,    -1,   244,
     245,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,    -1,
     255,   256,   257,    -1,    -1,   260,    -1,    -1,   263,   264,
      -1,    -1,    -1,    -1,    -1,   270,   271,    -1,   273,    -1,
     275,    -1,   277,   278,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,    -1,   302,   303,   304,
      -1,   306,   307,   308,   309,    -1,   311,   312,    -1,    -1,
      -1,    -1,   317,   318,   319,   320,   321,   322,    -1,    -1,
     325,   326,    -1,   328,    -1,   330,    -1,   332,   333,   334,
     335,   336,   337,   338,   339,   340,    -1,    -1,   343,   344,
      -1,    -1,   347,   348,   349,   350,    -1,    -1,    -1,   354,
     355,    -1,    -1,    -1,    -1,   360,   361,   362,    -1,   364,
     365,   366,   367,    -1,   369,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   379,   380,   381,    -1,    -1,   384,
      -1,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,    -1,    -1,   400,   401,   402,    -1,   404,
      -1,   406,   407,   408,   409,   410,    -1,   412,   413,   414,
      -1,    -1,   417,    -1,    -1,    -1,   421,   422,   423,   424,
     425,    -1,    -1,   428,   429,   430,   431,   432,    -1,   434,
     435,    -1,   437,   438,   439,    -1,    -1,   442,    -1,   444,
      -1,   446,   447,    -1,   449,   450,    -1,    -1,    -1,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,    -1,
     465,   466,    -1,    -1,    -1,   470,   471,   472,   473,    -1,
      -1,    -1,   477,    -1,    -1,    -1,   481,    -1,   483,   484,
     485,   486,   487,    -1,   489,   490,   491,   492,   493,   494,
      -1,    -1,    -1,    -1,    -1,    -1,   501,   502,    -1,   504,
      -1,    -1,   507,    -1,    -1,   510,   511,   512,    -1,    -1,
     515,   516,    -1,   518,   519,   520,   521,   522,   523,    -1,
      -1,   526,   527,   528,   529,    -1,   531,   532,    -1,   534,
      -1,   536,   537,   538,   539,    -1,    -1,   542,   543,    -1,
     545,   546,   547,   548,    -1,    -1,    -1,    -1,    -1,   554,
     555,   556,    -1,    -1,    -1,   560,   561,   562,   563,    -1,
     565,   566,    -1,   568,   569,    -1,   571,   572,    -1,    -1,
     575,    -1,    -1,   578,    -1,   580,    -1,   582,   583,   584,
      -1,    -1,    -1,    -1,    -1,    -1,   591,    -1,    -1,   594,
      -1,    -1,    -1,   598,   599,   600,   601,   602,   603,    -1,
      -1,    -1,    -1,    -1,    -1,   610,   611,    -1,   613,   614,
     615,    -1,    -1,   618,    -1,    -1,    -1,    -1,    -1,     5,
     625,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,   638,    -1,    21,    -1,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    -1,    -1,    -1,    35,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,
      56,    -1,    58,    59,    -1,    61,    62,    -1,    64,    65,
      66,    67,    68,    69,    70,    -1,    72,    73,    74,    75,
      76,    77,    78,    79,    -1,    81,    82,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    -1,    93,    94,    95,
      96,    97,    -1,    99,    -1,    -1,   102,    -1,    -1,   105,
      -1,    -1,    -1,   109,    -1,    -1,    -1,   113,   114,   115,
      -1,    -1,   118,    -1,    -1,    -1,    -1,   123,   124,    -1,
      -1,    -1,    -1,   129,    -1,   131,    -1,    -1,    -1,   135,
      -1,   137,   138,   139,   140,    -1,    -1,    -1,   144,    -1,
      -1,   147,   148,   149,    -1,    -1,    -1,   153,    -1,   155,
     156,    -1,   158,   159,   160,    -1,    -1,   163,   164,    -1,
     166,   167,   168,   169,   170,   171,    -1,    -1,   174,   175,
     176,    -1,    -1,   179,   180,    -1,   182,   183,   184,    -1,
      -1,   187,    -1,    -1,    -1,   191,    -1,   193,    -1,   195,
      -1,   197,   198,   199,   200,   201,   202,    -1,   204,    -1,
      -1,    -1,   208,   209,   210,    -1,   212,    -1,    -1,   215,
     216,    -1,    -1,    -1,   220,   221,   222,   223,    -1,    -1,
     226,   227,   228,    -1,   230,    -1,   232,    -1,    -1,    -1,
      -1,   237,   238,    -1,    -1,    -1,   242,    -1,   244,   245,
      -1,   247,   248,    -1,    -1,    -1,   252,    -1,    -1,   255,
     256,   257,    -1,    -1,   260,    -1,    -1,   263,   264,    -1,
      -1,    -1,    -1,    -1,   270,   271,    -1,   273,    -1,   275,
      -1,   277,   278,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,    -1,   302,   303,   304,    -1,
     306,   307,   308,   309,    -1,   311,   312,    -1,    -1,    -1,
      -1,   317,   318,   319,   320,   321,   322,    -1,    -1,   325,
     326,    -1,   328,    -1,   330,    -1,   332,   333,   334,   335,
     336,   337,   338,   339,   340,    -1,    -1,   343,   344,    -1,
      -1,   347,   348,   349,   350,    -1,    -1,    -1,   354,   355,
      -1,    -1,    -1,    -1,   360,   361,   362,    -1,   364,   365,
     366,   367,    -1,   369,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   379,   380,   381,    -1,    -1,   384,    -1,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,    -1,    -1,   400,   401,   402,    -1,   404,    -1,
     406,   407,   408,   409,   410,    -1,   412,   413,   414,    -1,
      -1,   417,    -1,    -1,    -1,   421,   422,   423,   424,   425,
      -1,    -1,   428,   429,   430,   431,   432,    -1,   434,   435,
      -1,   437,   438,   439,    -1,    -1,   442,    -1,   444,    -1,
     446,   447,    -1,   449,   450,    -1,    -1,    -1,   454,   455,
     456,   457,   458,   459,   460,   461,   462,   463,    -1,   465,
     466,    -1,    -1,    -1,   470,   471,   472,   473,    -1,    -1,
      -1,   477,    -1,    -1,    -1,   481,    -1,   483,   484,   485,
     486,   487,    -1,   489,   490,   491,   492,   493,   494,    -1,
      -1,    -1,    -1,    -1,    -1,   501,   502,    -1,   504,    -1,
      -1,   507,    -1,    -1,   510,   511,   512,    -1,    -1,   515,
     516,    -1,   518,   519,   520,   521,   522,   523,    -1,    -1,
     526,   527,   528,   529,    -1,   531,   532,    -1,   534,    -1,
     536,   537,   538,   539,    -1,    -1,   542,   543,    -1,   545,
     546,   547,   548,    -1,    -1,    -1,    -1,    -1,   554,   555,
     556,    -1,    -1,    -1,   560,   561,   562,   563,    -1,   565,
     566,    -1,   568,   569,    -1,   571,   572,    -1,    -1,   575,
      -1,    -1,   578,    -1,   580,    -1,   582,   583,   584,    -1,
      -1,    -1,    -1,    -1,    -1,   591,    -1,    -1,   594,    -1,
      -1,    -1,   598,   599,   600,   601,   602,   603,    -1,    -1,
      -1,    -1,    -1,    -1,   610,   611,    -1,   613,   614,   615,
      -1,    -1,   618,    -1,    -1,    -1,    -1,     5,    -1,     7,
       8,     9,    10,    11,   630,    -1,    14,    -1,    -1,    -1,
      18,    -1,   638,    21,    -1,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,
      48,    49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,
      58,    59,    -1,    61,    62,    -1,    64,    65,    66,    67,
      68,    69,    70,    -1,    72,    73,    74,    75,    76,    77,
      78,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    -1,    90,    91,    -1,    93,    94,    95,    96,    97,
      -1,    99,    -1,    -1,   102,    -1,    -1,   105,    -1,    -1,
      -1,   109,    -1,    -1,    -1,   113,   114,   115,    -1,    -1,
     118,    -1,    -1,    -1,    -1,   123,   124,    -1,    -1,    -1,
      -1,   129,    -1,   131,    -1,    -1,    -1,   135,    -1,   137,
     138,   139,   140,    -1,    -1,    -1,   144,    -1,    -1,   147,
     148,   149,    -1,    -1,    -1,   153,    -1,   155,   156,    -1,
     158,   159,   160,    -1,    -1,   163,   164,    -1,   166,   167,
     168,   169,   170,   171,    -1,    -1,   174,   175,   176,    -1,
      -1,   179,   180,    -1,   182,   183,   184,    -1,    -1,   187,
      -1,    -1,    -1,   191,    -1,   193,    -1,   195,    -1,   197,
     198,   199,   200,   201,   202,    -1,   204,    -1,    -1,    -1,
     208,   209,   210,    -1,   212,    -1,    -1,   215,   216,    -1,
      -1,    -1,   220,   221,   222,   223,    -1,    -1,   226,   227,
     228,    -1,   230,    -1,   232,    -1,    -1,    -1,    -1,   237,
     238,    -1,    -1,    -1,   242,    -1,   244,   245,    -1,   247,
     248,    -1,    -1,    -1,   252,    -1,    -1,   255,   256,   257,
      -1,    -1,   260,    -1,    -1,   263,   264,    -1,    -1,    -1,
      -1,    -1,   270,   271,    -1,   273,    -1,   275,    -1,   277,
     278,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,    -1,   302,   303,   304,    -1,   306,   307,
     308,   309,    -1,   311,   312,    -1,    -1,    -1,    -1,   317,
     318,   319,   320,   321,   322,    -1,    -1,   325,   326,    -1,
     328,    -1,   330,    -1,   332,   333,   334,   335,   336,   337,
     338,   339,   340,    -1,    -1,   343,   344,    -1,    -1,   347,
     348,   349,   350,    -1,    -1,    -1,   354,   355,    -1,    -1,
      -1,    -1,   360,   361,   362,    -1,   364,   365,   366,   367,
      -1,   369,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   379,   380,   381,    -1,    -1,   384,    -1,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
      -1,    -1,   400,   401,   402,    -1,   404,    -1,   406,   407,
     408,   409,   410,    -1,   412,   413,   414,    -1,    -1,   417,
      -1,    -1,    -1,   421,   422,   423,   424,   425,    -1,    -1,
     428,   429,   430,   431,   432,    -1,   434,   435,    -1,   437,
     438,   439,    -1,    -1,   442,    -1,   444,    -1,   446,   447,
      -1,   449,   450,    -1,    -1,    -1,   454,   455,   456,   457,
     458,   459,   460,   461,   462,   463,    -1,   465,   466,    -1,
      -1,    -1,   470,   471,   472,   473,    -1,    -1,    -1,   477,
      -1,    -1,    -1,   481,    -1,   483,   484,   485,   486,   487,
      -1,   489,   490,   491,   492,   493,   494,    -1,    -1,    -1,
      -1,    -1,    -1,   501,   502,    -1,   504,    -1,    -1,   507,
      -1,    -1,   510,   511,   512,    -1,    -1,   515,   516,    -1,
     518,   519,   520,   521,   522,   523,    -1,    -1,   526,   527,
     528,   529,    -1,   531,   532,    -1,   534,    -1,   536,   537,
     538,   539,    -1,    -1,   542,   543,    -1,   545,   546,   547,
     548,    -1,    -1,    -1,    -1,    -1,   554,   555,   556,    -1,
      -1,    -1,   560,   561,   562,   563,    -1,   565,   566,    -1,
     568,   569,    -1,   571,   572,    -1,    -1,   575,    -1,    -1,
     578,    -1,   580,    -1,   582,   583,   584,    -1,    -1,    -1,
      -1,    -1,    -1,   591,    -1,    -1,   594,    -1,    -1,    -1,
     598,   599,   600,   601,   602,   603,    -1,    -1,    -1,    -1,
      -1,    -1,   610,   611,    -1,   613,   614,   615,    -1,    -1,
     618,    -1,    -1,    -1,    -1,     5,    -1,     7,     8,     9,
      10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,   637,
     638,    21,    -1,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,    39,
      -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,    49,
      -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,    59,
      -1,    61,    62,    -1,    64,    65,    66,    67,    68,    69,
      70,    -1,    72,    73,    74,    75,    76,    77,    78,    79,
      -1,    81,    82,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    -1,    93,    94,    95,    96,    97,    -1,    99,
      -1,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,   109,
      -1,    -1,    -1,   113,   114,   115,    -1,    -1,   118,    -1,
      -1,    -1,    -1,   123,   124,    -1,    -1,    -1,    -1,   129,
      -1,   131,    -1,    -1,    -1,   135,    -1,   137,   138,   139,
     140,    -1,    -1,    -1,   144,    -1,    -1,   147,   148,   149,
      -1,    -1,    -1,   153,    -1,   155,   156,    -1,   158,   159,
     160,    -1,    -1,   163,   164,    -1,   166,   167,   168,   169,
     170,   171,    -1,    -1,   174,   175,   176,    -1,    -1,   179,
     180,    -1,   182,   183,   184,    -1,    -1,   187,    -1,    -1,
      -1,   191,    -1,   193,    -1,   195,    -1,   197,   198,   199,
     200,   201,   202,    -1,   204,    -1,    -1,    -1,   208,   209,
     210,    -1,   212,    -1,    -1,   215,   216,    -1,    -1,    -1,
     220,   221,   222,   223,    -1,    -1,   226,   227,   228,    -1,
     230,    -1,   232,    -1,    -1,    -1,    -1,   237,   238,    -1,
      -1,    -1,   242,    -1,   244,   245,    -1,   247,   248,    -1,
      -1,    -1,   252,    -1,    -1,   255,   256,   257,    -1,    -1,
     260,    -1,    -1,   263,   264,    -1,    -1,    -1,    -1,    -1,
     270,   271,    -1,   273,    -1,   275,    -1,   277,   278,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,    -1,   302,   303,   304,    -1,   306,   307,   308,   309,
      -1,   311,   312,    -1,    -1,    -1,    -1,   317,   318,   319,
     320,   321,   322,    -1,    -1,   325,   326,    -1,   328,    -1,
     330,    -1,   332,   333,   334,   335,   336,   337,   338,   339,
     340,    -1,    -1,   343,   344,    -1,    -1,   347,   348,   349,
     350,    -1,    -1,    -1,   354,   355,    -1,    -1,    -1,    -1,
     360,   361,   362,    -1,   364,   365,   366,   367,    -1,   369,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   379,
     380,   381,    -1,    -1,   384,    -1,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,    -1,    -1,
     400,   401,   402,    -1,   404,    -1,   406,   407,   408,   409,
     410,    -1,   412,   413,   414,    -1,    -1,   417,    -1,    -1,
      -1,   421,   422,   423,   424,   425,    -1,    -1,   428,   429,
     430,   431,   432,    -1,   434,   435,    -1,   437,   438,   439,
      -1,    -1,   442,    -1,   444,    -1,   446,   447,    -1,   449,
     450,    -1,    -1,    -1,   454,   455,   456,   457,   458,   459,
     460,   461,   462,   463,    -1,   465,   466,    -1,    -1,    -1,
     470,   471,   472,   473,    -1,    -1,    -1,   477,    -1,    -1,
      -1,   481,    -1,   483,   484,   485,   486,   487,    -1,   489,
     490,   491,   492,   493,   494,    -1,    -1,    -1,    -1,    -1,
      -1,   501,   502,    -1,   504,    -1,    -1,   507,    -1,    -1,
     510,   511,   512,    -1,    -1,   515,   516,    -1,   518,   519,
     520,   521,   522,   523,    -1,    -1,   526,   527,   528,   529,
      -1,   531,   532,    -1,   534,    -1,   536,   537,   538,   539,
      -1,    -1,   542,   543,    -1,   545,   546,   547,   548,    -1,
      -1,    -1,    -1,    -1,   554,   555,   556,    -1,    -1,    -1,
     560,   561,   562,   563,    -1,   565,   566,    -1,   568,   569,
      -1,   571,   572,    -1,    -1,   575,    -1,    -1,   578,    -1,
     580,    -1,   582,   583,   584,    -1,    -1,    -1,    -1,    -1,
      -1,   591,    -1,    -1,   594,    -1,    -1,    -1,   598,   599,
     600,   601,   602,   603,    -1,    -1,    -1,    -1,    -1,    -1,
     610,   611,    -1,   613,   614,   615,    -1,    -1,   618,    -1,
      -1,     5,    -1,     7,     8,     9,    10,    11,    -1,    -1,
      14,    -1,    -1,    -1,    18,    -1,    -1,    21,   638,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    -1,    -1,
      -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,    -1,
      -1,    55,    56,    -1,    58,    59,    -1,    61,    62,    -1,
      64,    65,    66,    67,    68,    69,    70,    -1,    72,    73,
      74,    75,    76,    77,    78,    79,    -1,    81,    82,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    -1,    93,
      94,    95,    96,    97,    -1,    99,    -1,    -1,   102,    -1,
      -1,   105,    -1,    -1,    -1,   109,    -1,    -1,    -1,   113,
     114,   115,    -1,    -1,   118,    -1,    -1,    -1,    -1,   123,
     124,    -1,    -1,    -1,    -1,   129,    -1,   131,    -1,    -1,
      -1,   135,    -1,   137,   138,   139,   140,    -1,    -1,    -1,
     144,    -1,    -1,   147,   148,   149,    -1,    -1,    -1,   153,
      -1,   155,   156,    -1,   158,   159,   160,    -1,    -1,   163,
     164,    -1,   166,   167,   168,   169,   170,   171,    -1,    -1,
     174,   175,   176,    -1,    -1,   179,   180,    -1,   182,   183,
     184,    -1,    -1,   187,    -1,    -1,    -1,   191,    -1,   193,
      -1,   195,    -1,   197,   198,   199,   200,   201,   202,    -1,
     204,    -1,    -1,    -1,   208,   209,   210,    -1,   212,    -1,
      -1,   215,   216,    -1,    -1,    -1,   220,   221,   222,   223,
      -1,    -1,   226,   227,   228,    -1,   230,    -1,   232,    -1,
      -1,    -1,    -1,   237,   238,    -1,    -1,    -1,   242,    -1,
     244,   245,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,
      -1,   255,   256,   257,    -1,    -1,   260,    -1,    -1,   263,
     264,    -1,    -1,    -1,    -1,    -1,   270,   271,    -1,   273,
      -1,   275,    -1,   277,   278,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,    -1,   302,   303,
     304,    -1,   306,   307,   308,   309,    -1,   311,   312,    -1,
      -1,    -1,    -1,   317,   318,   319,   320,   321,   322,    -1,
      -1,   325,   326,    -1,   328,    -1,   330,    -1,   332,   333,
     334,   335,   336,   337,   338,   339,   340,    -1,    -1,   343,
     344,    -1,    -1,   347,   348,   349,   350,    -1,    -1,    -1,
     354,   355,    -1,    -1,    -1,    -1,   360,   361,   362,    -1,
     364,   365,   366,   367,    -1,   369,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   379,   380,   381,    -1,    -1,
     384,    -1,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,    -1,    -1,   400,   401,   402,    -1,
     404,    -1,   406,   407,   408,   409,   410,    -1,   412,   413,
     414,    -1,    -1,   417,    -1,    -1,    -1,   421,   422,   423,
     424,   425,    -1,    -1,   428,   429,   430,   431,   432,    -1,
     434,   435,    -1,   437,   438,   439,    -1,    -1,   442,    -1,
     444,    -1,   446,   447,    -1,   449,   450,    -1,    -1,    -1,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
      -1,   465,   466,    -1,    -1,    -1,   470,   471,   472,   473,
      -1,    -1,    -1,   477,    -1,    -1,    -1,   481,    -1,   483,
     484,   485,   486,   487,    -1,   489,   490,   491,   492,   493,
     494,    -1,    -1,    -1,    -1,    -1,    -1,   501,   502,    -1,
     504,    -1,    -1,   507,    -1,    -1,   510,   511,   512,    -1,
      -1,   515,   516,    -1,   518,   519,   520,   521,   522,   523,
      -1,    -1,   526,   527,   528,   529,    -1,   531,   532,    -1,
     534,    -1,   536,   537,   538,   539,    -1,    -1,   542,   543,
      -1,   545,   546,   547,   548,    -1,    -1,    -1,    -1,    -1,
     554,   555,   556,    -1,    -1,    -1,   560,   561,   562,   563,
      -1,   565,   566,    -1,   568,   569,    -1,   571,   572,    -1,
      -1,   575,    -1,    -1,   578,    -1,   580,    -1,   582,   583,
     584,    -1,    -1,    -1,    -1,    -1,    -1,   591,    -1,    -1,
     594,    -1,    -1,    -1,   598,   599,   600,   601,   602,   603,
      -1,    -1,    -1,    -1,    -1,    -1,   610,   611,    -1,   613,
     614,   615,    -1,    -1,   618,    -1,    -1,     5,    -1,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,    -1,    -1,    21,   638,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,
      48,    49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,
      58,    59,    -1,    61,    62,    -1,    64,    65,    66,    67,
      68,    69,    70,    -1,    72,    73,    74,    75,    76,    77,
      78,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    -1,    90,    91,    -1,    93,    94,    95,    96,    97,
      -1,    99,    -1,    -1,   102,    -1,    -1,   105,    -1,    -1,
      -1,   109,    -1,    -1,    -1,   113,   114,   115,    -1,    -1,
     118,    -1,    -1,    -1,    -1,   123,   124,    -1,    -1,    -1,
      -1,   129,    -1,   131,    -1,    -1,    -1,   135,    -1,   137,
     138,   139,   140,    -1,    -1,    -1,   144,    -1,    -1,   147,
     148,   149,    -1,    -1,    -1,   153,    -1,   155,   156,    -1,
     158,   159,   160,    -1,    -1,   163,   164,    -1,   166,   167,
     168,   169,   170,   171,    -1,    -1,   174,   175,   176,    -1,
      -1,   179,   180,    -1,   182,   183,   184,    -1,    -1,   187,
      -1,    -1,    -1,   191,    -1,   193,    -1,   195,    -1,   197,
     198,   199,   200,   201,   202,    -1,   204,    -1,    -1,    -1,
     208,   209,   210,    -1,   212,    -1,    -1,   215,   216,    -1,
      -1,    -1,   220,   221,   222,   223,    -1,    -1,   226,   227,
     228,    -1,   230,    -1,   232,    -1,    -1,    -1,    -1,   237,
     238,    -1,    -1,    -1,   242,    -1,   244,   245,    -1,   247,
     248,    -1,    -1,    -1,   252,    -1,    -1,   255,   256,   257,
      -1,    -1,   260,    -1,    -1,   263,   264,    -1,    -1,    -1,
      -1,    -1,   270,   271,    -1,   273,    -1,   275,    -1,   277,
     278,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,    -1,   302,   303,   304,    -1,   306,   307,
     308,   309,    -1,   311,   312,    -1,    -1,    -1,    -1,   317,
     318,   319,   320,   321,   322,    -1,    -1,   325,   326,    -1,
     328,    -1,   330,    -1,   332,   333,   334,   335,   336,   337,
     338,   339,   340,    -1,    -1,   343,   344,    -1,    -1,   347,
     348,   349,   350,    -1,    -1,    -1,   354,   355,    -1,    -1,
      -1,    -1,   360,   361,   362,    -1,   364,   365,   366,   367,
      -1,   369,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   379,   380,   381,    -1,    -1,   384,    -1,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
      -1,    -1,   400,   401,   402,    -1,   404,    -1,   406,   407,
     408,   409,   410,    -1,   412,   413,   414,    -1,    -1,   417,
      -1,    -1,    -1,   421,   422,   423,   424,   425,    -1,    -1,
     428,   429,   430,   431,   432,    -1,   434,   435,    -1,   437,
     438,   439,    -1,    -1,   442,    -1,   444,    -1,   446,   447,
      -1,   449,   450,    -1,    -1,    -1,   454,   455,   456,   457,
     458,   459,   460,   461,   462,   463,    -1,   465,   466,    -1,
      -1,    -1,   470,   471,   472,   473,    -1,    -1,    -1,   477,
      -1,    -1,    -1,   481,    -1,   483,   484,   485,   486,   487,
      -1,   489,   490,   491,   492,   493,   494,    -1,    -1,    -1,
      -1,    -1,    -1,   501,   502,    -1,   504,    -1,    -1,   507,
      -1,    -1,   510,   511,   512,    -1,    -1,   515,   516,    -1,
     518,   519,   520,   521,   522,   523,    -1,    -1,   526,   527,
     528,   529,    -1,   531,   532,    -1,   534,    -1,   536,   537,
     538,   539,    -1,    -1,   542,   543,    -1,   545,   546,   547,
     548,    -1,    -1,    -1,    -1,    -1,   554,   555,   556,    -1,
      -1,    -1,   560,   561,   562,   563,    -1,   565,   566,    -1,
     568,   569,    -1,   571,   572,    -1,    -1,   575,    -1,    -1,
     578,    -1,   580,    -1,   582,   583,   584,    -1,    -1,    -1,
      -1,    -1,    -1,   591,    -1,    -1,   594,    -1,    -1,    -1,
     598,   599,   600,   601,   602,   603,    -1,    -1,    -1,    -1,
      -1,    -1,   610,   611,    -1,   613,   614,   615,    -1,    -1,
     618,    -1,    -1,     5,    -1,     7,     8,     9,    10,    11,
      -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,
     638,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      -1,    -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,
      52,    -1,    -1,    55,    56,    -1,    58,    59,    -1,    61,
      62,    -1,    64,    65,    66,    67,    68,    69,    70,    -1,
      72,    73,    74,    75,    76,    77,    78,    79,    -1,    81,
      82,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      -1,    93,    94,    95,    96,    97,    -1,    99,    -1,    -1,
     102,    -1,    -1,   105,    -1,    -1,    -1,   109,    -1,    -1,
      -1,   113,   114,   115,    -1,    -1,   118,    -1,    -1,    -1,
      -1,   123,   124,    -1,    -1,    -1,    -1,   129,    -1,   131,
      -1,    -1,    -1,   135,    -1,   137,   138,   139,   140,    -1,
      -1,    -1,   144,    -1,    -1,   147,   148,   149,    -1,    -1,
      -1,   153,    -1,   155,   156,    -1,   158,   159,   160,    -1,
      -1,   163,   164,    -1,   166,   167,   168,   169,   170,   171,
      -1,    -1,   174,   175,   176,    -1,    -1,   179,   180,    -1,
     182,   183,   184,    -1,    -1,   187,    -1,    -1,    -1,   191,
      -1,   193,    -1,   195,    -1,   197,   198,   199,   200,   201,
     202,    -1,   204,    -1,    -1,    -1,   208,   209,   210,    -1,
     212,    -1,    -1,   215,   216,    -1,    -1,    -1,   220,   221,
     222,   223,    -1,    -1,   226,   227,   228,    -1,   230,    -1,
     232,    -1,    -1,    -1,    -1,   237,   238,    -1,    -1,    -1,
     242,    -1,   244,   245,    -1,   247,   248,    -1,    -1,    -1,
     252,    -1,    -1,   255,   256,   257,    -1,    -1,   260,    -1,
      -1,   263,   264,    -1,    -1,    -1,    -1,    -1,   270,   271,
      -1,   273,    -1,   275,    -1,   277,   278,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,    -1,
     302,   303,   304,    -1,   306,   307,   308,   309,    -1,   311,
     312,    -1,    -1,    -1,    -1,   317,   318,   319,   320,   321,
     322,    -1,    -1,   325,   326,    -1,   328,    -1,   330,    -1,
     332,   333,   334,   335,   336,   337,   338,   339,   340,    -1,
      -1,   343,   344,    -1,    -1,   347,   348,   349,   350,    -1,
      -1,    -1,   354,   355,    -1,    -1,    -1,    -1,   360,   361,
     362,    -1,   364,   365,   366,   367,    -1,   369,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   379,   380,   381,
      -1,    -1,   384,    -1,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,    -1,    -1,   400,   401,
     402,    -1,   404,    -1,   406,   407,   408,   409,   410,    -1,
     412,   413,   414,    -1,    -1,   417,    -1,    -1,    -1,   421,
     422,   423,   424,   425,    -1,    -1,   428,   429,   430,   431,
     432,    -1,   434,   435,    -1,   437,   438,   439,    -1,    -1,
     442,    -1,   444,    -1,   446,   447,    -1,   449,   450,    -1,
      -1,    -1,   454,   455,   456,   457,   458,   459,   460,   461,
     462,   463,    -1,   465,   466,    -1,    -1,    -1,   470,   471,
     472,   473,    -1,    -1,    -1,   477,    -1,    -1,    -1,   481,
      -1,   483,   484,   485,   486,   487,    -1,   489,   490,   491,
     492,   493,   494,    -1,    -1,    -1,    -1,    -1,    -1,   501,
     502,    -1,   504,    -1,    -1,   507,    -1,    -1,   510,   511,
     512,    -1,    -1,   515,   516,    -1,   518,   519,   520,   521,
     522,   523,    -1,    -1,   526,   527,   528,   529,    -1,   531,
     532,    -1,   534,    -1,   536,   537,   538,   539,    -1,    -1,
     542,   543,    -1,   545,   546,   547,   548,    -1,    -1,    -1,
      -1,    -1,   554,   555,   556,    -1,    -1,    -1,   560,   561,
     562,   563,    -1,   565,   566,    -1,   568,   569,    -1,   571,
     572,    -1,    -1,   575,    -1,    -1,   578,    -1,   580,    -1,
     582,   583,   584,    -1,    -1,    -1,    -1,    -1,    -1,   591,
      -1,    -1,   594,    -1,    -1,    -1,   598,   599,   600,   601,
     602,   603,    -1,    -1,    -1,    -1,    -1,    -1,   610,   611,
      -1,   613,   614,   615,    -1,    -1,   618,    -1,    -1,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    21,   638,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    -1,    -1,    -1,    35,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,
      56,    -1,    58,    59,    60,    61,    62,    -1,    64,    65,
      66,    67,    68,    69,    70,    -1,    72,    73,    74,    75,
      76,    77,    78,    79,    -1,    81,    82,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    -1,    93,    94,    95,
      96,    97,    -1,    99,    -1,    -1,   102,    -1,    -1,   105,
      -1,    -1,    -1,   109,    -1,    -1,    -1,   113,   114,   115,
      -1,    -1,   118,    -1,    -1,    -1,    -1,   123,   124,    -1,
      -1,    -1,   128,   129,    -1,   131,    -1,    -1,    -1,   135,
      -1,   137,   138,   139,   140,    -1,    -1,    -1,   144,    -1,
      -1,   147,   148,   149,    -1,    -1,    -1,   153,    -1,   155,
     156,    -1,   158,   159,   160,    -1,    -1,   163,   164,    -1,
     166,   167,   168,   169,   170,   171,    -1,    -1,   174,   175,
     176,    -1,    -1,   179,   180,    -1,   182,   183,   184,    -1,
      -1,   187,    -1,    -1,    -1,   191,    -1,   193,    -1,   195,
      -1,   197,   198,   199,   200,   201,   202,    -1,   204,    -1,
      -1,    -1,   208,   209,   210,    -1,   212,    -1,    -1,   215,
     216,    -1,    -1,    -1,   220,   221,   222,   223,    -1,    -1,
     226,   227,   228,    -1,   230,    -1,   232,    -1,    -1,    -1,
      -1,   237,   238,    -1,    -1,    -1,   242,    -1,   244,   245,
      -1,   247,   248,    -1,    -1,    -1,   252,    -1,    -1,   255,
     256,   257,    -1,    -1,   260,    -1,    -1,   263,   264,    -1,
      -1,    -1,    -1,    -1,   270,   271,    -1,   273,    -1,   275,
      -1,   277,   278,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,    -1,   302,   303,   304,    -1,
     306,   307,   308,   309,    -1,   311,   312,    -1,    -1,    -1,
      -1,   317,   318,   319,   320,   321,   322,    -1,    -1,   325,
     326,    -1,   328,    -1,   330,    -1,   332,   333,   334,   335,
     336,   337,   338,   339,   340,    -1,    -1,   343,   344,    -1,
      -1,   347,   348,   349,   350,    -1,    -1,    -1,   354,   355,
      -1,    -1,    -1,    -1,   360,   361,   362,    -1,   364,   365,
     366,   367,    -1,   369,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   379,   380,   381,    -1,    -1,   384,    -1,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,    -1,    -1,   400,   401,   402,    -1,   404,    -1,
     406,   407,   408,   409,   410,    -1,   412,   413,   414,    -1,
      -1,   417,    -1,    -1,    -1,   421,   422,   423,   424,   425,
      -1,    -1,   428,   429,   430,   431,   432,    -1,   434,   435,
      -1,   437,   438,   439,    -1,    -1,   442,    -1,   444,    -1,
     446,   447,    -1,   449,   450,    -1,    -1,    -1,   454,   455,
     456,   457,   458,   459,   460,   461,   462,   463,    -1,   465,
     466,    -1,    -1,    -1,   470,   471,   472,   473,    -1,    -1,
      -1,   477,    -1,    -1,    -1,   481,    -1,   483,   484,   485,
     486,   487,    -1,   489,   490,   491,   492,   493,   494,    -1,
      -1,    -1,    -1,    -1,    -1,   501,   502,    -1,   504,    -1,
      -1,   507,    -1,    -1,   510,   511,   512,    -1,    -1,   515,
     516,    -1,   518,   519,   520,   521,   522,   523,    -1,    -1,
     526,   527,   528,   529,    -1,   531,   532,    -1,   534,    -1,
     536,   537,   538,   539,    -1,    -1,   542,   543,    -1,   545,
     546,   547,   548,    -1,    -1,    -1,    -1,    -1,   554,   555,
     556,    -1,    -1,    -1,   560,   561,   562,   563,    -1,   565,
     566,    -1,   568,   569,    -1,   571,   572,    -1,    -1,   575,
      -1,    -1,   578,    -1,   580,    -1,   582,   583,   584,    -1,
      -1,    -1,    -1,    -1,    -1,   591,    -1,    -1,   594,    -1,
      -1,    -1,   598,   599,   600,   601,   602,   603,    -1,    -1,
      -1,    -1,    -1,    -1,   610,   611,    -1,   613,   614,   615,
      -1,    -1,   618,    -1,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      21,   637,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    -1,    -1,    -1,    35,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    -1,    48,    49,    -1,
      -1,    52,    -1,    -1,    55,    56,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    66,    67,    68,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    79,    -1,
      81,    82,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    -1,    93,    94,    95,    96,    97,    -1,    99,    -1,
      -1,   102,    -1,    -1,   105,    -1,    -1,    -1,   109,    -1,
      -1,    -1,   113,   114,   115,    -1,    -1,   118,    -1,    -1,
      -1,    -1,   123,   124,    -1,    -1,    -1,    -1,   129,    -1,
     131,    -1,    -1,    -1,   135,    -1,   137,   138,   139,   140,
      -1,    -1,    -1,   144,    -1,    -1,   147,   148,   149,    -1,
      -1,    -1,   153,    -1,   155,   156,    -1,   158,   159,   160,
      -1,    -1,   163,   164,    -1,   166,   167,   168,   169,   170,
     171,    -1,    -1,   174,   175,   176,    -1,    -1,   179,   180,
      -1,   182,   183,   184,    -1,    -1,   187,    -1,    -1,    -1,
     191,    -1,   193,    -1,   195,    -1,   197,   198,   199,   200,
     201,   202,    -1,   204,    -1,    -1,    -1,   208,   209,   210,
      -1,   212,    -1,    -1,   215,   216,    -1,    -1,    -1,   220,
     221,   222,   223,    -1,    -1,   226,   227,   228,    -1,   230,
      -1,   232,    -1,    -1,    -1,    -1,   237,   238,    -1,    -1,
      -1,   242,    -1,   244,   245,    -1,   247,   248,    -1,    -1,
      -1,   252,    -1,    -1,   255,   256,   257,    -1,    -1,   260,
      -1,    -1,   263,   264,   265,    -1,    -1,    -1,    -1,   270,
     271,    -1,   273,    -1,   275,    -1,   277,   278,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
      -1,   302,   303,   304,    -1,   306,   307,   308,   309,    -1,
     311,   312,    -1,    -1,    -1,    -1,   317,   318,   319,   320,
     321,   322,    -1,    -1,   325,   326,    -1,   328,    -1,   330,
      -1,   332,   333,   334,   335,   336,   337,   338,   339,   340,
      -1,    -1,   343,   344,    -1,    -1,   347,   348,   349,   350,
      -1,    -1,    -1,   354,   355,    -1,    -1,    -1,    -1,   360,
     361,   362,    -1,   364,   365,   366,   367,    -1,   369,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   379,   380,
     381,    -1,    -1,   384,    -1,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,    -1,    -1,   400,
     401,   402,    -1,   404,    -1,   406,   407,   408,   409,   410,
      -1,   412,   413,   414,    -1,    -1,   417,    -1,    -1,    -1,
     421,   422,   423,   424,   425,    -1,    -1,   428,   429,   430,
     431,   432,    -1,   434,   435,    -1,   437,   438,   439,    -1,
      -1,   442,    -1,   444,    -1,   446,   447,    -1,   449,   450,
      -1,    -1,    -1,   454,   455,   456,   457,   458,   459,   460,
     461,   462,   463,    -1,   465,   466,    -1,    -1,    -1,   470,
     471,   472,   473,    -1,    -1,    -1,   477,    -1,    -1,    -1,
     481,    -1,   483,   484,   485,   486,   487,    -1,   489,   490,
     491,   492,   493,   494,    -1,    -1,    -1,    -1,    -1,    -1,
     501,   502,    -1,   504,    -1,    -1,   507,    -1,    -1,   510,
     511,   512,    -1,    -1,   515,   516,    -1,   518,   519,   520,
     521,   522,   523,    -1,    -1,   526,   527,   528,   529,    -1,
     531,   532,    -1,   534,    -1,   536,   537,   538,   539,    -1,
     541,   542,   543,    -1,   545,   546,   547,   548,    -1,    -1,
      -1,    -1,    -1,   554,   555,   556,    -1,    -1,    -1,   560,
     561,   562,   563,    -1,   565,   566,    -1,   568,   569,    -1,
     571,   572,    -1,    -1,   575,    -1,    -1,   578,    -1,   580,
      -1,   582,   583,   584,    -1,    -1,    -1,    -1,    -1,    -1,
     591,    -1,    -1,   594,    -1,    -1,    -1,   598,   599,   600,
     601,   602,   603,    -1,    -1,    -1,    -1,    -1,    -1,   610,
     611,    -1,   613,   614,   615,    -1,    -1,   618,    -1,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    21,   637,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    -1,    -1,    -1,    35,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,
      56,    -1,    58,    59,    -1,    61,    62,    -1,    64,    65,
      66,    67,    68,    69,    70,    -1,    72,    73,    74,    75,
      76,    77,    78,    79,    -1,    81,    82,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    -1,    93,    94,    95,
      96,    97,    -1,    99,    -1,    -1,   102,    -1,    -1,   105,
      -1,    -1,    -1,   109,    -1,    -1,    -1,   113,   114,   115,
      -1,    -1,   118,    -1,    -1,    -1,    -1,   123,   124,    -1,
      -1,    -1,    -1,   129,    -1,   131,    -1,    -1,    -1,   135,
      -1,   137,   138,   139,   140,    -1,    -1,    -1,   144,    -1,
      -1,   147,   148,   149,    -1,    -1,    -1,   153,    -1,   155,
     156,    -1,   158,   159,   160,    -1,    -1,   163,   164,    -1,
     166,   167,   168,   169,   170,   171,    -1,    -1,   174,   175,
     176,    -1,    -1,   179,   180,    -1,   182,   183,   184,    -1,
      -1,   187,    -1,    -1,    -1,   191,    -1,   193,    -1,   195,
      -1,   197,   198,   199,   200,   201,   202,    -1,   204,    -1,
      -1,    -1,   208,   209,   210,    -1,   212,    -1,    -1,   215,
     216,    -1,    -1,    -1,   220,   221,   222,   223,    -1,    -1,
     226,   227,   228,    -1,   230,    -1,   232,    -1,    -1,    -1,
      -1,   237,   238,    -1,    -1,    -1,   242,    -1,   244,   245,
      -1,   247,   248,    -1,    -1,    -1,   252,    -1,    -1,   255,
     256,   257,    -1,    -1,   260,    -1,    -1,   263,   264,   265,
      -1,    -1,    -1,    -1,   270,   271,    -1,   273,    -1,   275,
      -1,   277,   278,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,    -1,   302,   303,   304,    -1,
     306,   307,   308,   309,    -1,   311,   312,    -1,    -1,    -1,
      -1,   317,   318,   319,   320,   321,   322,    -1,    -1,   325,
     326,    -1,   328,    -1,   330,    -1,   332,   333,   334,   335,
     336,   337,   338,   339,   340,    -1,    -1,   343,   344,    -1,
      -1,   347,   348,   349,   350,    -1,    -1,    -1,   354,   355,
      -1,    -1,    -1,    -1,   360,   361,   362,    -1,   364,   365,
     366,   367,    -1,   369,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   379,   380,   381,    -1,    -1,   384,    -1,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,    -1,    -1,   400,   401,   402,    -1,   404,    -1,
     406,   407,   408,   409,   410,    -1,   412,   413,   414,    -1,
      -1,   417,    -1,    -1,    -1,   421,   422,   423,   424,   425,
      -1,    -1,   428,   429,   430,   431,   432,    -1,   434,   435,
      -1,   437,   438,   439,    -1,    -1,   442,    -1,   444,    -1,
     446,   447,    -1,   449,   450,    -1,    -1,    -1,   454,   455,
     456,   457,   458,   459,   460,   461,   462,   463,    -1,   465,
     466,    -1,    -1,    -1,   470,   471,   472,   473,    -1,    -1,
      -1,   477,    -1,    -1,    -1,   481,    -1,   483,   484,   485,
     486,   487,    -1,   489,   490,   491,   492,   493,   494,    -1,
      -1,    -1,    -1,    -1,    -1,   501,   502,    -1,   504,    -1,
      -1,   507,    -1,    -1,   510,   511,   512,    -1,    -1,   515,
     516,    -1,   518,   519,   520,   521,   522,   523,    -1,    -1,
     526,   527,   528,   529,    -1,   531,   532,    -1,   534,    -1,
     536,   537,   538,   539,    -1,   541,   542,   543,    -1,   545,
     546,   547,   548,    -1,    -1,    -1,    -1,    -1,   554,   555,
     556,    -1,    -1,    -1,   560,   561,   562,   563,    -1,   565,
     566,    -1,   568,   569,    -1,   571,   572,    -1,    -1,   575,
      -1,    -1,   578,    -1,   580,    -1,   582,   583,   584,    -1,
      -1,    -1,    -1,    -1,    -1,   591,    -1,    -1,   594,    -1,
      -1,    -1,   598,   599,   600,   601,   602,   603,    -1,    -1,
      -1,    -1,    -1,    -1,   610,   611,    -1,   613,   614,   615,
      -1,    -1,   618,    -1,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      21,   637,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    -1,    -1,    -1,    35,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    -1,    48,    49,    -1,
      -1,    52,    -1,    -1,    55,    56,    -1,    58,    59,    60,
      61,    62,    -1,    64,    65,    66,    67,    68,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    79,    -1,
      81,    82,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    -1,    93,    94,    95,    96,    97,    -1,    99,    -1,
      -1,   102,    -1,    -1,   105,    -1,    -1,    -1,   109,    -1,
      -1,    -1,   113,   114,   115,    -1,    -1,   118,    -1,    -1,
      -1,    -1,   123,   124,    -1,    -1,    -1,   128,   129,    -1,
     131,    -1,    -1,    -1,   135,    -1,   137,   138,   139,   140,
      -1,    -1,    -1,   144,    -1,    -1,   147,   148,   149,    -1,
      -1,    -1,   153,    -1,   155,   156,    -1,   158,   159,   160,
      -1,    -1,   163,   164,    -1,   166,   167,   168,   169,   170,
     171,    -1,    -1,   174,   175,   176,    -1,    -1,   179,   180,
      -1,   182,   183,   184,    -1,    -1,   187,    -1,    -1,    -1,
     191,    -1,   193,    -1,   195,    -1,   197,   198,   199,   200,
     201,   202,    -1,   204,    -1,    -1,    -1,   208,   209,   210,
      -1,   212,    -1,    -1,   215,   216,    -1,    -1,    -1,   220,
     221,   222,   223,    -1,    -1,   226,   227,   228,    -1,   230,
      -1,   232,    -1,    -1,    -1,    -1,   237,   238,    -1,    -1,
      -1,   242,    -1,   244,   245,    -1,   247,   248,    -1,    -1,
      -1,   252,    -1,    -1,   255,   256,   257,    -1,    -1,   260,
      -1,    -1,   263,   264,    -1,    -1,    -1,    -1,    -1,   270,
     271,    -1,   273,    -1,   275,    -1,   277,   278,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
      -1,   302,   303,   304,    -1,   306,   307,   308,   309,    -1,
     311,   312,    -1,    -1,    -1,    -1,   317,   318,   319,   320,
     321,   322,    -1,    -1,   325,   326,    -1,   328,    -1,   330,
      -1,   332,   333,   334,   335,   336,   337,   338,   339,   340,
      -1,    -1,   343,   344,    -1,    -1,   347,   348,   349,   350,
      -1,    -1,    -1,   354,   355,    -1,    -1,    -1,    -1,   360,
     361,   362,    -1,   364,   365,   366,   367,    -1,   369,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   379,   380,
     381,    -1,    -1,   384,    -1,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,    -1,    -1,   400,
     401,   402,    -1,   404,    -1,   406,   407,   408,   409,   410,
      -1,   412,   413,   414,    -1,    -1,   417,    -1,    -1,    -1,
     421,   422,   423,   424,   425,    -1,    -1,   428,   429,   430,
     431,   432,    -1,   434,   435,    -1,   437,   438,   439,    -1,
      -1,   442,    -1,   444,    -1,   446,   447,    -1,   449,   450,
      -1,    -1,    -1,   454,   455,   456,   457,   458,   459,   460,
     461,   462,   463,    -1,   465,   466,    -1,    -1,    -1,   470,
     471,   472,   473,    -1,    -1,    -1,   477,    -1,    -1,    -1,
     481,    -1,   483,   484,   485,   486,   487,    -1,   489,   490,
     491,   492,   493,   494,    -1,    -1,    -1,    -1,    -1,    -1,
     501,   502,    -1,   504,    -1,    -1,   507,    -1,    -1,   510,
     511,   512,    -1,    -1,   515,   516,    -1,   518,   519,   520,
     521,   522,   523,    -1,    -1,   526,   527,   528,   529,    -1,
     531,   532,    -1,   534,    -1,   536,   537,   538,   539,    -1,
      -1,   542,   543,    -1,   545,   546,   547,   548,    -1,    -1,
      -1,    -1,    -1,   554,   555,   556,    -1,    -1,    -1,   560,
     561,   562,   563,    -1,   565,   566,    -1,   568,   569,    -1,
     571,   572,    -1,    -1,   575,    -1,    -1,   578,    -1,   580,
      -1,   582,   583,   584,    -1,    -1,    -1,    -1,    -1,    -1,
     591,    -1,    -1,   594,    -1,    -1,    -1,   598,   599,   600,
     601,   602,   603,    -1,    -1,    -1,    -1,    -1,    -1,   610,
     611,    -1,   613,   614,   615,    -1,    -1,   618,    -1,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    21,   637,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    -1,    -1,    -1,    35,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,
      56,    -1,    58,    59,    -1,    61,    62,    -1,    64,    65,
      66,    67,    68,    69,    70,    -1,    72,    73,    74,    75,
      76,    77,    78,    79,    -1,    81,    82,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    -1,    93,    94,    95,
      96,    97,    -1,    99,    -1,    -1,   102,    -1,    -1,   105,
      -1,    -1,    -1,   109,    -1,    -1,    -1,   113,   114,   115,
      -1,    -1,   118,    -1,    -1,    -1,    -1,   123,   124,    -1,
      -1,    -1,    -1,   129,    -1,   131,    -1,    -1,    -1,   135,
      -1,   137,   138,   139,   140,    -1,    -1,    -1,   144,    -1,
      -1,   147,   148,   149,    -1,    -1,    -1,   153,    -1,   155,
     156,    -1,   158,   159,   160,    -1,    -1,   163,   164,    -1,
     166,   167,   168,   169,   170,   171,    -1,    -1,   174,   175,
     176,    -1,    -1,   179,   180,    -1,   182,   183,   184,    -1,
      -1,   187,    -1,    -1,    -1,   191,    -1,   193,    -1,   195,
      -1,   197,   198,   199,   200,   201,   202,    -1,   204,    -1,
      -1,    -1,   208,   209,   210,    -1,   212,    -1,    -1,   215,
     216,    -1,    -1,    -1,   220,   221,   222,   223,    -1,    -1,
     226,   227,   228,    -1,   230,    -1,   232,    -1,    -1,    -1,
      -1,   237,   238,    -1,    -1,    -1,   242,    -1,   244,   245,
      -1,   247,   248,    -1,    -1,    -1,   252,    -1,    -1,   255,
     256,   257,    -1,    -1,   260,    -1,    -1,   263,   264,   265,
      -1,    -1,    -1,    -1,   270,   271,    -1,   273,    -1,   275,
      -1,   277,   278,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,    -1,   302,   303,   304,    -1,
     306,   307,   308,   309,    -1,   311,   312,    -1,    -1,    -1,
      -1,   317,   318,   319,   320,   321,   322,    -1,    -1,   325,
     326,    -1,   328,    -1,   330,    -1,   332,   333,   334,   335,
     336,   337,   338,   339,   340,    -1,    -1,   343,   344,    -1,
      -1,   347,   348,   349,   350,    -1,    -1,    -1,   354,   355,
      -1,    -1,    -1,    -1,   360,   361,   362,    -1,   364,   365,
     366,   367,    -1,   369,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   379,   380,   381,    -1,    -1,   384,    -1,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,    -1,    -1,   400,   401,   402,    -1,   404,    -1,
     406,   407,   408,   409,   410,    -1,   412,   413,   414,    -1,
      -1,   417,    -1,    -1,    -1,   421,   422,   423,   424,   425,
      -1,    -1,   428,   429,   430,   431,   432,    -1,   434,   435,
      -1,   437,   438,   439,    -1,    -1,   442,    -1,   444,    -1,
     446,   447,    -1,   449,   450,    -1,    -1,    -1,   454,   455,
     456,   457,   458,   459,   460,   461,   462,   463,    -1,   465,
     466,    -1,    -1,    -1,   470,   471,   472,   473,    -1,    -1,
      -1,   477,    -1,    -1,    -1,   481,    -1,   483,   484,   485,
     486,   487,    -1,   489,   490,   491,   492,   493,   494,    -1,
      -1,    -1,    -1,    -1,    -1,   501,   502,    -1,   504,    -1,
      -1,   507,    -1,    -1,   510,   511,   512,    -1,    -1,   515,
     516,    -1,   518,   519,   520,   521,   522,   523,    -1,    -1,
     526,   527,   528,   529,    -1,   531,   532,    -1,   534,    -1,
     536,   537,   538,   539,    -1,   541,   542,   543,    -1,   545,
     546,   547,   548,    -1,    -1,    -1,    -1,    -1,   554,   555,
     556,    -1,    -1,    -1,   560,   561,   562,   563,    -1,   565,
     566,    -1,   568,   569,    -1,   571,   572,    -1,    -1,   575,
      -1,    -1,   578,    -1,   580,    -1,   582,   583,   584,    -1,
      -1,    -1,    -1,    -1,    -1,   591,    -1,    -1,   594,    -1,
      -1,    -1,   598,   599,   600,   601,   602,   603,    -1,    -1,
      -1,    -1,    -1,    -1,   610,   611,    -1,   613,   614,   615,
      -1,    -1,   618,    -1,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      -1,   637,    23,    24,    25,    26,    27,    28,    -1,    -1,
      31,    -1,    -1,    -1,    35,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    -1,    -1,    -1,    -1,
      -1,    52,    53,    -1,    55,    56,    -1,    58,    -1,    -1,
      -1,    -1,    -1,    64,    65,    66,    67,    68,    69,    70,
      -1,    72,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      81,    -1,    83,    -1,    85,    86,    87,    88,    -1,    90,
      91,    -1,    93,    94,    95,    -1,    97,    -1,    99,    -1,
      -1,   102,    -1,    -1,   105,    -1,    -1,    -1,   109,    -1,
      -1,    -1,   113,   114,   115,    -1,    -1,   118,    -1,    -1,
      -1,    -1,   123,    -1,    -1,    -1,    -1,    -1,   129,    -1,
     131,    -1,    -1,    -1,   135,    -1,   137,   138,   139,   140,
      -1,    -1,    -1,    -1,    -1,    -1,   147,   148,   149,    -1,
      -1,    -1,   153,    -1,    -1,   156,    -1,   158,   159,   160,
      -1,    -1,   163,   164,    -1,   166,   167,   168,   169,    -1,
      -1,    -1,    -1,   174,   175,   176,    -1,    -1,   179,   180,
     181,   182,   183,   184,    -1,    -1,    -1,    -1,    -1,    -1,
     191,    -1,   193,    -1,   195,    -1,   197,   198,   199,   200,
     201,   202,    -1,   204,    -1,    -1,    -1,    -1,   209,   210,
      -1,    -1,    -1,    -1,    -1,   216,    -1,    -1,    -1,   220,
     221,   222,   223,   224,    -1,   226,   227,   228,    -1,   230,
      -1,   232,    -1,    -1,    -1,    -1,   237,    -1,    -1,    -1,
      -1,   242,    -1,   244,   245,    -1,   247,   248,   249,    -1,
      -1,   252,    -1,    -1,    -1,   256,   257,    -1,    -1,   260,
     261,    -1,   263,   264,    -1,    -1,    -1,    -1,    -1,   270,
     271,    -1,   273,    -1,   275,    -1,   277,   278,    -1,    -1,
      -1,    -1,   283,    -1,    -1,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
      -1,   302,   303,   304,    -1,   306,   307,   308,   309,    -1,
     311,   312,    -1,    -1,    -1,    -1,   317,   318,   319,   320,
     321,   322,    -1,    -1,   325,   326,    -1,   328,    -1,   330,
      -1,   332,   333,   334,   335,   336,   337,   338,   339,   340,
      -1,    -1,   343,   344,    -1,    -1,   347,   348,   349,   350,
      -1,    -1,    -1,    -1,   355,    -1,    -1,    -1,    -1,   360,
     361,   362,    -1,   364,   365,   366,   367,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   380,
     381,    -1,    -1,    -1,    -1,   386,   387,   388,    -1,   390,
     391,   392,   393,   394,   395,   396,    -1,    -1,    -1,    -1,
     401,   402,    -1,   404,    -1,   406,   407,   408,   409,   410,
      -1,   412,   413,   414,    -1,    -1,   417,    -1,    -1,    -1,
     421,   422,   423,   424,   425,    -1,    -1,   428,   429,   430,
     431,   432,    -1,   434,    -1,    -1,   437,    -1,   439,   440,
      -1,   442,    -1,    -1,    -1,   446,    -1,    -1,   449,   450,
     451,    -1,    -1,    -1,   455,   456,   457,   458,   459,   460,
      -1,   462,   463,    -1,   465,    -1,    -1,    -1,    -1,   470,
     471,   472,    -1,    -1,    -1,    -1,   477,    -1,    -1,    -1,
     481,    -1,    -1,   484,    -1,    -1,   487,    -1,   489,    -1,
     491,    -1,   493,   494,    -1,    -1,    -1,    -1,    -1,    -1,
     501,   502,    -1,   504,    -1,    -1,   507,    -1,    -1,   510,
      -1,   512,    -1,    -1,    -1,   516,    -1,   518,   519,   520,
     521,   522,   523,    -1,    -1,   526,   527,   528,   529,    -1,
     531,   532,    -1,   534,    -1,   536,   537,   538,   539,    -1,
      -1,   542,   543,    -1,   545,   546,   547,   548,    -1,    -1,
      -1,    -1,    -1,   554,   555,   556,    -1,    -1,    -1,    -1,
     561,   562,   563,    -1,   565,   566,    -1,   568,   569,    -1,
      -1,    -1,    -1,    -1,   575,    -1,    -1,   578,    -1,    -1,
      -1,   582,   583,   584,    -1,    -1,    -1,    -1,    -1,    -1,
     591,    -1,    -1,   594,    -1,    -1,    -1,   598,   599,   600,
     601,   602,   603,    -1,    -1,   606,    -1,    -1,    -1,   610,
      -1,    -1,   613,    -1,   615,    -1,     5,   618,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      -1,   632,    21,    -1,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,
      49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,
      59,    -1,    61,    62,    -1,    64,    65,    66,    67,    68,
      69,    70,    -1,    72,    73,    74,    75,    76,    77,    78,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    -1,    93,    94,    95,    96,    97,    -1,
      99,    -1,    -1,   102,    -1,    -1,   105,    -1,   107,    -1,
     109,    -1,    -1,    -1,   113,   114,   115,    -1,    -1,   118,
      -1,    -1,    -1,    -1,   123,   124,    -1,    -1,    -1,    -1,
     129,    -1,   131,    -1,    -1,    -1,   135,    -1,   137,   138,
     139,   140,    -1,    -1,    -1,   144,    -1,    -1,   147,   148,
     149,    -1,    -1,    -1,   153,    -1,   155,   156,    -1,   158,
     159,   160,    -1,    -1,   163,   164,    -1,   166,   167,   168,
     169,   170,   171,    -1,    -1,   174,   175,   176,    -1,    -1,
     179,   180,    -1,   182,   183,   184,    -1,    -1,   187,    -1,
      -1,    -1,   191,    -1,   193,    -1,   195,    -1,   197,   198,
     199,   200,   201,   202,    -1,   204,    -1,    -1,    -1,   208,
     209,   210,    -1,   212,    -1,    -1,   215,   216,    -1,    -1,
      -1,   220,   221,   222,   223,    -1,    -1,   226,   227,   228,
      -1,   230,    -1,   232,    -1,    -1,    -1,    -1,   237,   238,
      -1,    -1,    -1,   242,    -1,   244,   245,    -1,   247,   248,
      -1,    -1,    -1,   252,    -1,    -1,   255,   256,   257,    -1,
      -1,   260,    -1,    -1,   263,   264,   265,    -1,    -1,    -1,
      -1,   270,   271,    -1,   273,    -1,   275,    -1,   277,   278,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,    -1,   302,   303,   304,    -1,   306,   307,   308,
     309,    -1,   311,   312,    -1,    -1,    -1,    -1,   317,   318,
     319,   320,   321,   322,    -1,    -1,   325,   326,    -1,   328,
      -1,   330,    -1,   332,   333,   334,   335,   336,   337,   338,
     339,   340,    -1,    -1,   343,   344,    -1,    -1,   347,   348,
     349,   350,    -1,    -1,    -1,   354,   355,    -1,    -1,    -1,
      -1,   360,   361,   362,    -1,   364,   365,   366,   367,    -1,
     369,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     379,   380,   381,    -1,    -1,   384,    -1,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,    -1,
      -1,   400,   401,   402,    -1,   404,    -1,   406,   407,   408,
     409,   410,    -1,   412,   413,   414,    -1,    -1,   417,    -1,
      -1,    -1,   421,   422,   423,   424,   425,    -1,    -1,   428,
     429,   430,   431,   432,    -1,   434,   435,    -1,   437,   438,
     439,    -1,    -1,   442,    -1,   444,    -1,   446,   447,    -1,
     449,   450,    -1,    -1,    -1,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,    -1,   465,   466,    -1,    -1,
      -1,   470,   471,   472,   473,    -1,    -1,    -1,   477,    -1,
      -1,    -1,   481,    -1,   483,   484,   485,   486,   487,    -1,
     489,   490,   491,   492,   493,   494,    -1,    -1,    -1,    -1,
      -1,    -1,   501,   502,    -1,   504,    -1,    -1,   507,    -1,
      -1,   510,   511,   512,    -1,    -1,   515,   516,    -1,   518,
     519,   520,   521,   522,   523,    -1,    -1,   526,   527,   528,
     529,    -1,   531,   532,    -1,   534,    -1,   536,   537,   538,
     539,    -1,   541,   542,   543,    -1,   545,   546,   547,   548,
      -1,    -1,    -1,    -1,    -1,   554,   555,   556,    -1,    -1,
      -1,   560,   561,   562,   563,    -1,   565,   566,    -1,   568,
     569,    -1,   571,   572,    -1,    -1,   575,    -1,    -1,   578,
      -1,   580,    -1,   582,   583,   584,    -1,    -1,    -1,    -1,
      -1,    -1,   591,    -1,    -1,   594,    -1,    -1,    -1,   598,
     599,   600,   601,   602,   603,    -1,    -1,    -1,    -1,    -1,
      -1,   610,   611,    -1,   613,   614,   615,    -1,    -1,   618,
       5,    -1,     7,     8,     9,    10,    11,    -1,    -1,    14,
      -1,   630,    -1,    18,    -1,    -1,    21,    -1,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    -1,    -1,    -1,
      35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,
      -1,    46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,
      55,    56,    -1,    58,    59,    -1,    61,    62,    -1,    64,
      65,    66,    67,    68,    69,    70,    -1,    72,    73,    74,
      75,    76,    77,    78,    79,    -1,    81,    82,    83,    84,
      85,    86,    87,    88,    -1,    90,    91,    -1,    93,    94,
      95,    96,    97,    -1,    99,    -1,    -1,   102,    -1,    -1,
     105,    -1,    -1,    -1,   109,    -1,    -1,    -1,   113,   114,
     115,    -1,    -1,   118,    -1,    -1,    -1,    -1,   123,   124,
      -1,    -1,    -1,    -1,   129,    -1,   131,    -1,    -1,    -1,
     135,    -1,   137,   138,   139,   140,    -1,    -1,    -1,   144,
      -1,    -1,   147,   148,   149,    -1,    -1,    -1,   153,    -1,
     155,   156,    -1,   158,   159,   160,    -1,    -1,   163,   164,
      -1,   166,   167,   168,   169,   170,   171,    -1,    -1,   174,
     175,   176,    -1,    -1,   179,   180,    -1,   182,   183,   184,
      -1,    -1,   187,    -1,    -1,    -1,   191,    -1,   193,    -1,
     195,    -1,   197,   198,   199,   200,   201,   202,    -1,   204,
      -1,    -1,    -1,   208,   209,   210,    -1,   212,    -1,    -1,
     215,   216,    -1,    -1,    -1,   220,   221,   222,   223,    -1,
      -1,   226,   227,   228,    -1,   230,    -1,   232,    -1,    -1,
      -1,    -1,   237,   238,    -1,    -1,    -1,   242,    -1,   244,
     245,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,    -1,
     255,   256,   257,    -1,    -1,   260,    -1,    -1,   263,   264,
      -1,    -1,    -1,    -1,    -1,   270,   271,    -1,   273,    -1,
     275,    -1,   277,   278,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,    -1,   302,   303,   304,
      -1,   306,   307,   308,   309,    -1,   311,   312,    -1,    -1,
      -1,    -1,   317,   318,   319,   320,   321,   322,    -1,    -1,
     325,   326,    -1,   328,    -1,   330,    -1,   332,   333,   334,
     335,   336,   337,   338,   339,   340,    -1,    -1,   343,   344,
      -1,    -1,   347,   348,   349,   350,    -1,    -1,    -1,   354,
     355,    -1,    -1,    -1,    -1,   360,   361,   362,    -1,   364,
     365,   366,   367,    -1,   369,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   379,   380,   381,    -1,    -1,   384,
      -1,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,    -1,    -1,   400,   401,   402,    -1,   404,
      -1,   406,   407,   408,   409,   410,    -1,   412,   413,   414,
      -1,    -1,   417,    -1,    -1,    -1,   421,   422,   423,   424,
     425,    -1,    -1,   428,   429,   430,   431,   432,    -1,   434,
     435,    -1,   437,   438,   439,    -1,    -1,   442,    -1,   444,
      -1,   446,   447,    -1,   449,   450,    -1,    -1,    -1,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,    -1,
     465,   466,    -1,    -1,    -1,   470,   471,   472,   473,    -1,
      -1,    -1,   477,    -1,    -1,    -1,   481,    -1,   483,   484,
     485,   486,   487,    -1,   489,   490,   491,   492,   493,   494,
      -1,    -1,    -1,    -1,    -1,    -1,   501,   502,    -1,   504,
      -1,    -1,   507,    -1,    -1,   510,   511,   512,    -1,    -1,
     515,   516,    -1,   518,   519,   520,   521,   522,   523,    -1,
      -1,   526,   527,   528,   529,    -1,   531,   532,    -1,   534,
      -1,   536,   537,   538,   539,    -1,    -1,   542,   543,    -1,
     545,   546,   547,   548,    -1,    -1,    -1,    -1,    -1,   554,
     555,   556,    -1,    -1,    -1,   560,   561,   562,   563,    -1,
     565,   566,    -1,   568,   569,    -1,   571,   572,    -1,    -1,
     575,    -1,    -1,   578,    -1,   580,    -1,   582,   583,   584,
      -1,    -1,    -1,    -1,    -1,    -1,   591,    -1,    -1,   594,
      -1,    -1,    -1,   598,   599,   600,   601,   602,   603,    -1,
      -1,    -1,    -1,    -1,    -1,   610,   611,    -1,   613,   614,
     615,    -1,     5,   618,     7,     8,     9,    10,    11,    -1,
     625,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    -1,
      -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,
      -1,    -1,    55,    56,    -1,    58,    59,    -1,    61,    62,
      -1,    64,    65,    66,    67,    68,    69,    70,    -1,    72,
      73,    74,    75,    76,    77,    78,    79,    -1,    81,    82,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    -1,
      93,    94,    95,    96,    97,    -1,    99,    -1,    -1,   102,
      -1,    -1,   105,    -1,    -1,    -1,   109,    -1,    -1,    -1,
     113,   114,   115,    -1,    -1,   118,    -1,    -1,    -1,    -1,
     123,   124,    -1,    -1,    -1,    -1,   129,    -1,   131,    -1,
      -1,    -1,   135,    -1,   137,   138,   139,   140,    -1,    -1,
      -1,   144,    -1,    -1,   147,   148,   149,    -1,    -1,    -1,
     153,    -1,   155,   156,    -1,   158,   159,   160,    -1,    -1,
     163,   164,    -1,   166,   167,   168,   169,   170,   171,    -1,
      -1,   174,   175,   176,    -1,    -1,   179,   180,    -1,   182,
     183,   184,    -1,    -1,   187,    -1,    -1,    -1,   191,    -1,
     193,    -1,   195,    -1,   197,   198,   199,   200,   201,   202,
      -1,   204,    -1,    -1,    -1,   208,   209,   210,    -1,   212,
      -1,    -1,   215,   216,    -1,    -1,    -1,   220,   221,   222,
     223,    -1,    -1,   226,   227,   228,    -1,   230,    -1,   232,
      -1,    -1,    -1,    -1,   237,   238,    -1,    -1,    -1,   242,
      -1,   244,   245,    -1,   247,   248,    -1,    -1,    -1,   252,
      -1,    -1,   255,   256,   257,    -1,    -1,   260,    -1,    -1,
     263,   264,    -1,    -1,    -1,    -1,    -1,   270,   271,    -1,
     273,    -1,   275,    -1,   277,   278,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,    -1,   302,
     303,   304,    -1,   306,   307,   308,   309,    -1,   311,   312,
      -1,    -1,    -1,    -1,   317,   318,   319,   320,   321,   322,
      -1,    -1,   325,   326,    -1,   328,    -1,   330,    -1,   332,
     333,   334,   335,   336,   337,   338,   339,   340,    -1,    -1,
     343,   344,    -1,    -1,   347,   348,   349,   350,    -1,    -1,
      -1,   354,   355,    -1,    -1,    -1,    -1,   360,   361,   362,
      -1,   364,   365,   366,   367,    -1,   369,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   379,   380,   381,    -1,
      -1,   384,    -1,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,    -1,    -1,   400,   401,   402,
      -1,   404,    -1,   406,   407,   408,   409,   410,    -1,   412,
     413,   414,    -1,    -1,   417,    -1,    -1,    -1,   421,   422,
     423,   424,   425,    -1,    -1,   428,   429,   430,   431,   432,
      -1,   434,   435,    -1,   437,   438,   439,    -1,    -1,   442,
      -1,   444,    -1,   446,   447,    -1,   449,   450,    -1,    -1,
      -1,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     463,    -1,   465,   466,    -1,    -1,    -1,   470,   471,   472,
     473,    -1,    -1,    -1,   477,    -1,    -1,    -1,   481,    -1,
     483,   484,   485,   486,   487,    -1,   489,   490,   491,   492,
     493,   494,    -1,    -1,    -1,    -1,    -1,    -1,   501,   502,
      -1,   504,    -1,    -1,   507,    -1,    -1,   510,   511,   512,
      -1,    -1,   515,   516,    -1,   518,   519,   520,   521,   522,
     523,    -1,    -1,   526,   527,   528,   529,    -1,   531,   532,
      -1,   534,    -1,   536,   537,   538,   539,    -1,    -1,   542,
     543,    -1,   545,   546,   547,   548,    -1,    -1,    -1,    -1,
      -1,   554,   555,   556,    -1,    -1,    -1,   560,   561,   562,
     563,    -1,   565,   566,    -1,   568,   569,    -1,   571,   572,
      -1,    -1,   575,    -1,    -1,   578,    -1,   580,    -1,   582,
     583,   584,    -1,    -1,    -1,    -1,    -1,    -1,   591,    -1,
      -1,   594,    -1,    -1,    -1,   598,   599,   600,   601,   602,
     603,    -1,    -1,    -1,    -1,    -1,    -1,   610,   611,    -1,
     613,   614,   615,    -1,     5,   618,     7,     8,     9,    10,
      11,    -1,   625,    14,    -1,    -1,    -1,    18,    -1,    -1,
      21,    -1,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    -1,    -1,    -1,    35,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    -1,    48,    49,    -1,
      -1,    52,    -1,    -1,    55,    56,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    66,    67,    68,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    79,    -1,
      81,    82,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    -1,    93,    94,    95,    96,    97,    -1,    99,    -1,
      -1,   102,    -1,    -1,   105,    -1,    -1,    -1,   109,    -1,
      -1,    -1,   113,   114,   115,    -1,    -1,   118,    -1,    -1,
      -1,    -1,   123,   124,    -1,    -1,    -1,    -1,   129,    -1,
     131,    -1,    -1,    -1,   135,    -1,   137,   138,   139,   140,
      -1,    -1,    -1,   144,    -1,    -1,   147,   148,   149,    -1,
      -1,    -1,   153,    -1,   155,   156,    -1,   158,   159,   160,
      -1,    -1,   163,   164,    -1,   166,   167,   168,   169,   170,
     171,    -1,    -1,   174,   175,   176,    -1,    -1,   179,   180,
      -1,   182,   183,   184,    -1,    -1,   187,    -1,    -1,    -1,
     191,    -1,   193,    -1,   195,    -1,   197,   198,   199,   200,
     201,   202,    -1,   204,    -1,    -1,    -1,   208,   209,   210,
      -1,   212,    -1,    -1,   215,   216,    -1,    -1,    -1,   220,
     221,   222,   223,    -1,    -1,   226,   227,   228,    -1,   230,
      -1,   232,    -1,    -1,    -1,    -1,   237,   238,    -1,    -1,
      -1,   242,    -1,   244,   245,    -1,   247,   248,    -1,    -1,
      -1,   252,    -1,    -1,   255,   256,   257,    -1,    -1,   260,
      -1,    -1,   263,   264,    -1,    -1,    -1,    -1,    -1,   270,
     271,    -1,   273,    -1,   275,    -1,   277,   278,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
      -1,   302,   303,   304,    -1,   306,   307,   308,   309,    -1,
     311,   312,    -1,    -1,    -1,    -1,   317,   318,   319,   320,
     321,   322,    -1,    -1,   325,   326,    -1,   328,    -1,   330,
      -1,   332,   333,   334,   335,   336,   337,   338,   339,   340,
      -1,    -1,   343,   344,    -1,    -1,   347,   348,   349,   350,
      -1,    -1,    -1,   354,   355,    -1,    -1,    -1,    -1,   360,
     361,   362,    -1,   364,   365,   366,   367,    -1,   369,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   379,   380,
     381,    -1,    -1,   384,    -1,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,    -1,    -1,   400,
     401,   402,    -1,   404,    -1,   406,   407,   408,   409,   410,
      -1,   412,   413,   414,    -1,    -1,   417,    -1,    -1,    -1,
     421,   422,   423,   424,   425,    -1,    -1,   428,   429,   430,
     431,   432,    -1,   434,   435,    -1,   437,   438,   439,    -1,
      -1,   442,    -1,   444,    -1,   446,   447,    -1,   449,   450,
      -1,    -1,    -1,   454,   455,   456,   457,   458,   459,   460,
     461,   462,   463,    -1,   465,   466,    -1,    -1,    -1,   470,
     471,   472,   473,    -1,    -1,    -1,   477,    -1,    -1,    -1,
     481,    -1,   483,   484,   485,   486,   487,    -1,   489,   490,
     491,   492,   493,   494,    -1,    -1,    -1,    -1,    -1,    -1,
     501,   502,    -1,   504,    -1,    -1,   507,    -1,    -1,   510,
     511,   512,    -1,    -1,   515,   516,    -1,   518,   519,   520,
     521,   522,   523,    -1,    -1,   526,   527,   528,   529,    -1,
     531,   532,    -1,   534,    -1,   536,   537,   538,   539,    -1,
      -1,   542,   543,    -1,   545,   546,   547,   548,    -1,    -1,
      -1,    -1,    -1,   554,   555,   556,    -1,    -1,    -1,   560,
     561,   562,   563,    -1,   565,   566,    -1,   568,   569,    -1,
     571,   572,    -1,    -1,   575,    -1,    -1,   578,    -1,   580,
      -1,   582,   583,   584,    -1,    -1,    -1,    -1,    -1,    -1,
     591,    -1,    -1,   594,    -1,    -1,    -1,   598,   599,   600,
     601,   602,   603,    -1,    -1,    -1,    -1,    -1,    -1,   610,
     611,    -1,   613,   614,   615,    -1,     5,   618,     7,     8,
       9,    10,    11,    -1,   625,    14,    -1,    -1,    -1,    18,
      -1,    -1,    21,    -1,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,
      49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,
      59,    -1,    61,    62,    -1,    64,    65,    66,    67,    68,
      69,    70,    -1,    72,    73,    74,    75,    76,    77,    78,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    -1,    93,    94,    95,    96,    97,    -1,
      99,    -1,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,
     109,    -1,    -1,    -1,   113,   114,   115,    -1,    -1,   118,
      -1,    -1,    -1,    -1,   123,   124,    -1,    -1,    -1,    -1,
     129,    -1,   131,    -1,    -1,    -1,   135,    -1,   137,   138,
     139,   140,    -1,    -1,    -1,   144,    -1,    -1,   147,   148,
     149,    -1,    -1,    -1,   153,    -1,   155,   156,    -1,   158,
     159,   160,    -1,    -1,   163,   164,    -1,   166,   167,   168,
     169,   170,   171,    -1,    -1,   174,   175,   176,    -1,    -1,
     179,   180,    -1,   182,   183,   184,    -1,    -1,   187,    -1,
      -1,    -1,   191,    -1,   193,    -1,   195,    -1,   197,   198,
     199,   200,   201,   202,    -1,   204,    -1,    -1,    -1,   208,
     209,   210,    -1,   212,    -1,    -1,   215,   216,    -1,    -1,
      -1,   220,   221,   222,   223,    -1,    -1,   226,   227,   228,
      -1,   230,    -1,   232,    -1,    -1,    -1,    -1,   237,   238,
      -1,    -1,    -1,   242,    -1,   244,   245,    -1,   247,   248,
      -1,    -1,    -1,   252,    -1,    -1,   255,   256,   257,    -1,
      -1,   260,    -1,    -1,   263,   264,    -1,    -1,    -1,    -1,
      -1,   270,   271,    -1,   273,    -1,   275,    -1,   277,   278,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,    -1,   302,   303,   304,    -1,   306,   307,   308,
     309,    -1,   311,   312,    -1,    -1,    -1,    -1,   317,   318,
     319,   320,   321,   322,    -1,    -1,   325,   326,    -1,   328,
      -1,   330,    -1,   332,   333,   334,   335,   336,   337,   338,
     339,   340,    -1,    -1,   343,   344,    -1,    -1,   347,   348,
     349,   350,    -1,    -1,    -1,   354,   355,    -1,    -1,    -1,
      -1,   360,   361,   362,    -1,   364,   365,   366,   367,    -1,
     369,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     379,   380,   381,    -1,    -1,   384,    -1,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,    -1,
      -1,   400,   401,   402,    -1,   404,    -1,   406,   407,   408,
     409,   410,    -1,   412,   413,   414,    -1,    -1,   417,    -1,
      -1,    -1,   421,   422,   423,   424,   425,    -1,    -1,   428,
     429,   430,   431,   432,    -1,   434,   435,    -1,   437,   438,
     439,    -1,    -1,   442,    -1,   444,    -1,   446,   447,    -1,
     449,   450,    -1,    -1,    -1,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,    -1,   465,   466,    -1,    -1,
      -1,   470,   471,   472,   473,    -1,    -1,    -1,   477,    -1,
      -1,    -1,   481,    -1,   483,   484,   485,   486,   487,    -1,
     489,   490,   491,   492,   493,   494,    -1,    -1,    -1,    -1,
      -1,    -1,   501,   502,    -1,   504,    -1,    -1,   507,    -1,
      -1,   510,   511,   512,    -1,    -1,   515,   516,    -1,   518,
     519,   520,   521,   522,   523,    -1,    -1,   526,   527,   528,
     529,    -1,   531,   532,    -1,   534,    -1,   536,   537,   538,
     539,    -1,    -1,   542,   543,    -1,   545,   546,   547,   548,
      -1,    -1,    -1,    -1,    -1,   554,   555,   556,    -1,    -1,
      -1,   560,   561,   562,   563,    -1,   565,   566,    -1,   568,
     569,    -1,   571,   572,    -1,    -1,   575,    -1,    -1,   578,
      -1,   580,    -1,   582,   583,   584,    -1,    -1,    -1,    -1,
      -1,    -1,   591,    -1,    -1,   594,    -1,    -1,    -1,   598,
     599,   600,   601,   602,   603,    -1,    -1,    -1,    -1,    -1,
      -1,   610,   611,    -1,   613,   614,   615,    -1,     5,   618,
       7,     8,     9,    10,    11,    -1,   625,    14,    -1,    -1,
      -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    -1,    -1,    -1,    35,    -1,
      -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,
      -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,    56,
      -1,    58,    59,    -1,    61,    62,    -1,    64,    65,    66,
      67,    68,    69,    70,    -1,    72,    73,    74,    75,    76,
      77,    78,    79,    -1,    81,    82,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    -1,    93,    94,    95,    96,
      97,    -1,    99,    -1,    -1,   102,    -1,    -1,   105,    -1,
      -1,    -1,   109,    -1,    -1,    -1,   113,   114,   115,    -1,
      -1,   118,    -1,    -1,    -1,    -1,   123,   124,   125,    -1,
      -1,    -1,   129,    -1,   131,    -1,    -1,    -1,   135,    -1,
     137,   138,   139,   140,    -1,    -1,    -1,   144,    -1,    -1,
     147,   148,   149,    -1,    -1,    -1,   153,    -1,   155,   156,
      -1,   158,   159,   160,    -1,    -1,   163,   164,    -1,   166,
     167,   168,   169,   170,   171,    -1,    -1,   174,   175,   176,
      -1,    -1,   179,   180,    -1,   182,   183,   184,   185,    -1,
     187,    -1,    -1,    -1,   191,    -1,   193,    -1,   195,    -1,
     197,   198,   199,   200,   201,   202,    -1,   204,    -1,    -1,
      -1,   208,   209,   210,    -1,   212,   213,    -1,   215,   216,
      -1,    -1,    -1,   220,   221,   222,   223,    -1,    -1,   226,
     227,   228,    -1,   230,    -1,   232,    -1,    -1,    -1,    -1,
     237,   238,    -1,    -1,    -1,   242,    -1,   244,   245,    -1,
     247,   248,    -1,    -1,    -1,   252,    -1,    -1,   255,   256,
     257,    -1,    -1,   260,    -1,    -1,   263,   264,    -1,    -1,
      -1,    -1,    -1,   270,   271,    -1,   273,    -1,   275,    -1,
     277,   278,    -1,    -1,   281,    -1,    -1,    -1,    -1,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,    -1,   302,   303,   304,    -1,   306,
     307,   308,   309,    -1,   311,   312,    -1,    -1,    -1,    -1,
     317,   318,   319,   320,   321,   322,    -1,    -1,   325,   326,
      -1,   328,    -1,   330,    -1,   332,   333,   334,   335,   336,
     337,   338,   339,   340,    -1,    -1,   343,   344,    -1,    -1,
     347,   348,   349,   350,   351,   352,    -1,   354,   355,    -1,
      -1,   358,    -1,   360,   361,   362,    -1,   364,   365,   366,
     367,    -1,   369,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   379,   380,   381,    -1,    -1,   384,    -1,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,    -1,    -1,   400,   401,   402,    -1,   404,    -1,   406,
     407,   408,   409,   410,    -1,   412,   413,   414,    -1,    -1,
     417,    -1,    -1,    -1,   421,   422,   423,   424,   425,    -1,
      -1,   428,   429,   430,   431,   432,    -1,   434,   435,    -1,
     437,   438,   439,    -1,    -1,   442,    -1,   444,    -1,   446,
     447,    -1,   449,   450,    -1,    -1,    -1,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,    -1,   465,   466,
      -1,    -1,    -1,   470,   471,   472,   473,    -1,    -1,    -1,
     477,    -1,    -1,    -1,   481,    -1,   483,   484,   485,   486,
     487,    -1,   489,   490,   491,   492,   493,   494,    -1,    -1,
     497,   498,   499,    -1,   501,   502,    -1,   504,    -1,    -1,
     507,    -1,    -1,   510,   511,   512,    -1,    -1,   515,   516,
      -1,   518,   519,   520,   521,   522,   523,    -1,    -1,   526,
     527,   528,   529,    -1,   531,   532,    -1,   534,    -1,   536,
     537,   538,   539,    -1,    -1,   542,   543,    -1,   545,   546,
     547,   548,    -1,    -1,    -1,    -1,    -1,   554,   555,   556,
      -1,    -1,    -1,   560,   561,   562,   563,   564,   565,   566,
      -1,   568,   569,    -1,   571,   572,    -1,    -1,   575,    -1,
      -1,   578,    -1,   580,    -1,   582,   583,   584,    -1,    -1,
      -1,    -1,    -1,    -1,   591,    -1,    -1,   594,    -1,    -1,
      -1,   598,   599,   600,   601,   602,   603,    -1,    -1,    -1,
      -1,    -1,    -1,   610,   611,    -1,   613,   614,   615,    -1,
       5,   618,     7,     8,     9,    10,    11,    -1,    -1,    14,
      -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    -1,    -1,    -1,
      35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,
      -1,    46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,
      55,    56,    -1,    58,    59,    -1,    61,    62,    -1,    64,
      65,    66,    67,    68,    69,    70,    -1,    72,    73,    74,
      75,    76,    77,    78,    79,    -1,    81,    82,    83,    84,
      85,    86,    87,    88,    -1,    90,    91,    -1,    93,    94,
      95,    96,    97,    -1,    99,    -1,    -1,   102,    -1,    -1,
     105,    -1,    -1,    -1,   109,    -1,    -1,    -1,   113,   114,
     115,    -1,    -1,   118,    -1,    -1,    -1,    -1,   123,   124,
     125,    -1,    -1,   128,   129,    -1,   131,    -1,    -1,    -1,
     135,    -1,   137,   138,   139,   140,    -1,    -1,    -1,   144,
      -1,    -1,   147,   148,   149,    -1,    -1,    -1,   153,    -1,
     155,   156,    -1,   158,   159,   160,    -1,    -1,   163,   164,
      -1,   166,   167,   168,   169,   170,   171,    -1,    -1,   174,
     175,   176,    -1,    -1,   179,   180,    -1,   182,   183,   184,
     185,    -1,   187,    -1,    -1,    -1,   191,    -1,   193,    -1,
     195,    -1,   197,   198,   199,   200,   201,   202,    -1,   204,
      -1,    -1,    -1,   208,   209,   210,    -1,   212,   213,    -1,
     215,   216,    -1,    -1,    -1,   220,   221,   222,   223,    -1,
      -1,   226,   227,   228,    -1,   230,    -1,   232,    -1,    -1,
      -1,    -1,   237,   238,    -1,    -1,    -1,   242,    -1,   244,
     245,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,    -1,
     255,   256,   257,    -1,    -1,   260,    -1,    -1,   263,   264,
      -1,    -1,    -1,    -1,    -1,   270,   271,    -1,   273,    -1,
     275,    -1,   277,   278,    -1,    -1,   281,    -1,    -1,    -1,
      -1,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,    -1,   302,   303,   304,
      -1,   306,   307,   308,   309,    -1,   311,   312,    -1,    -1,
      -1,    -1,   317,   318,   319,   320,   321,   322,    -1,    -1,
     325,   326,    -1,   328,    -1,   330,    -1,   332,   333,   334,
     335,   336,   337,   338,   339,   340,    -1,    -1,   343,   344,
      -1,    -1,   347,   348,   349,   350,    -1,    -1,    -1,   354,
     355,    -1,    -1,   358,    -1,   360,   361,   362,    -1,   364,
     365,   366,   367,    -1,   369,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   379,   380,   381,    -1,    -1,   384,
      -1,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,    -1,    -1,   400,   401,   402,    -1,   404,
      -1,   406,   407,   408,   409,   410,    -1,   412,   413,   414,
      -1,    -1,   417,    -1,    -1,    -1,   421,   422,   423,   424,
     425,    -1,    -1,   428,   429,   430,   431,   432,    -1,   434,
     435,    -1,   437,   438,   439,    -1,    -1,   442,    -1,   444,
      -1,   446,   447,    -1,   449,   450,    -1,    -1,    -1,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,    -1,
     465,   466,    -1,    -1,    -1,   470,   471,   472,   473,    -1,
      -1,    -1,   477,    -1,    -1,    -1,   481,    -1,   483,   484,
     485,   486,   487,    -1,   489,   490,   491,   492,   493,   494,
      -1,    -1,    -1,    -1,    -1,    -1,   501,   502,    -1,   504,
      -1,    -1,   507,    -1,    -1,   510,   511,   512,    -1,    -1,
     515,   516,    -1,   518,   519,   520,   521,   522,   523,    -1,
      -1,   526,   527,   528,   529,    -1,   531,   532,    -1,   534,
      -1,   536,   537,   538,   539,    -1,   541,   542,   543,    -1,
     545,   546,   547,   548,    -1,    -1,    -1,    -1,    -1,   554,
     555,   556,    -1,    -1,    -1,   560,   561,   562,   563,   564,
     565,   566,    -1,   568,   569,    -1,   571,   572,    -1,    -1,
     575,    -1,    -1,   578,    -1,   580,    -1,   582,   583,   584,
      -1,    -1,    -1,    -1,    -1,    -1,   591,    -1,    -1,   594,
      -1,    -1,    -1,   598,   599,   600,   601,   602,   603,    -1,
      -1,    -1,    -1,    -1,    -1,   610,   611,    -1,   613,   614,
     615,    -1,     5,   618,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    -1,
      -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,
      -1,    -1,    55,    56,    -1,    58,    59,    -1,    61,    62,
      -1,    64,    65,    66,    67,    68,    69,    70,    -1,    72,
      73,    74,    75,    76,    77,    78,    79,    -1,    81,    82,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    -1,
      93,    94,    95,    96,    97,    -1,    99,    -1,    -1,   102,
      -1,    -1,   105,    -1,    -1,    -1,   109,    -1,    -1,    -1,
     113,   114,   115,    -1,    -1,   118,    -1,    -1,    -1,    -1,
     123,   124,   125,    -1,    -1,   128,   129,    -1,   131,    -1,
      -1,    -1,   135,    -1,   137,   138,   139,   140,    -1,    -1,
      -1,   144,    -1,    -1,   147,   148,   149,    -1,    -1,    -1,
     153,    -1,   155,   156,    -1,   158,   159,   160,    -1,    -1,
     163,   164,    -1,   166,   167,   168,   169,   170,   171,    -1,
      -1,   174,   175,   176,    -1,    -1,   179,   180,    -1,   182,
     183,   184,   185,    -1,   187,    -1,    -1,    -1,   191,    -1,
     193,    -1,   195,    -1,   197,   198,   199,   200,   201,   202,
      -1,   204,    -1,    -1,    -1,   208,   209,   210,    -1,   212,
     213,    -1,   215,   216,    -1,    -1,    -1,   220,   221,   222,
     223,    -1,    -1,   226,   227,   228,    -1,   230,    -1,   232,
      -1,    -1,    -1,    -1,   237,   238,    -1,    -1,    -1,   242,
      -1,   244,   245,    -1,   247,   248,    -1,    -1,    -1,   252,
      -1,    -1,   255,   256,   257,    -1,    -1,   260,    -1,    -1,
     263,   264,    -1,    -1,    -1,    -1,    -1,   270,   271,    -1,
     273,    -1,   275,    -1,   277,   278,    -1,    -1,   281,    -1,
      -1,    -1,    -1,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,    -1,   302,
     303,   304,    -1,   306,   307,   308,   309,    -1,   311,   312,
      -1,    -1,    -1,    -1,   317,   318,   319,   320,   321,   322,
      -1,    -1,   325,   326,    -1,   328,    -1,   330,    -1,   332,
     333,   334,   335,   336,   337,   338,   339,   340,    -1,    -1,
     343,   344,    -1,    -1,   347,   348,   349,   350,    -1,    -1,
      -1,   354,   355,    -1,    -1,   358,    -1,   360,   361,   362,
      -1,   364,   365,   366,   367,    -1,   369,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   379,   380,   381,    -1,
      -1,   384,    -1,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,    -1,    -1,   400,   401,   402,
      -1,   404,    -1,   406,   407,   408,   409,   410,    -1,   412,
     413,   414,    -1,    -1,   417,    -1,    -1,    -1,   421,   422,
     423,   424,   425,    -1,    -1,   428,   429,   430,   431,   432,
      -1,   434,   435,    -1,   437,   438,   439,    -1,    -1,   442,
      -1,   444,    -1,   446,   447,    -1,   449,   450,    -1,    -1,
      -1,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     463,    -1,   465,   466,    -1,    -1,    -1,   470,   471,   472,
     473,    -1,    -1,    -1,   477,    -1,    -1,    -1,   481,    -1,
     483,   484,   485,   486,   487,    -1,   489,   490,   491,   492,
     493,   494,    -1,    -1,    -1,    -1,    -1,    -1,   501,   502,
      -1,   504,    -1,    -1,   507,    -1,    -1,   510,   511,   512,
      -1,    -1,   515,   516,    -1,   518,   519,   520,   521,   522,
     523,    -1,    -1,   526,   527,   528,   529,    -1,   531,   532,
      -1,   534,    -1,   536,   537,   538,   539,    -1,   541,   542,
     543,    -1,   545,   546,   547,   548,    -1,    -1,    -1,    -1,
      -1,   554,   555,   556,    -1,    -1,    -1,   560,   561,   562,
     563,   564,   565,   566,    -1,   568,   569,    -1,   571,   572,
      -1,    -1,   575,    -1,    -1,   578,    -1,   580,    -1,   582,
     583,   584,    -1,    -1,    -1,    -1,    -1,    -1,   591,    -1,
      -1,   594,    -1,    -1,    -1,   598,   599,   600,   601,   602,
     603,    -1,    -1,    -1,    -1,    -1,    -1,   610,   611,    -1,
     613,   614,   615,    -1,     5,   618,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      21,    -1,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    -1,    -1,    -1,    35,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    -1,    48,    49,    -1,
      -1,    52,    -1,    -1,    55,    56,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    66,    67,    68,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    79,    -1,
      81,    82,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    -1,    93,    94,    95,    96,    97,    -1,    99,    -1,
      -1,   102,    -1,    -1,   105,    -1,    -1,    -1,   109,    -1,
      -1,    -1,   113,   114,   115,    -1,    -1,   118,    -1,    -1,
      -1,    -1,   123,   124,   125,    -1,    -1,   128,   129,    -1,
     131,    -1,    -1,    -1,   135,    -1,   137,   138,   139,   140,
      -1,    -1,    -1,   144,    -1,    -1,   147,   148,   149,    -1,
      -1,    -1,   153,    -1,   155,   156,    -1,   158,   159,   160,
      -1,    -1,   163,   164,    -1,   166,   167,   168,   169,   170,
     171,    -1,    -1,   174,   175,   176,    -1,    -1,   179,   180,
      -1,   182,   183,   184,   185,    -1,   187,    -1,    -1,    -1,
     191,    -1,   193,    -1,   195,    -1,   197,   198,   199,   200,
     201,   202,    -1,   204,    -1,    -1,    -1,   208,   209,   210,
      -1,   212,   213,    -1,   215,   216,    -1,    -1,    -1,   220,
     221,   222,   223,    -1,    -1,   226,   227,   228,    -1,   230,
      -1,   232,    -1,    -1,    -1,    -1,   237,   238,    -1,    -1,
      -1,   242,    -1,   244,   245,    -1,   247,   248,    -1,    -1,
      -1,   252,    -1,    -1,   255,   256,   257,    -1,    -1,   260,
      -1,    -1,   263,   264,    -1,    -1,    -1,    -1,    -1,   270,
     271,    -1,   273,    -1,   275,    -1,   277,   278,    -1,    -1,
     281,    -1,    -1,    -1,    -1,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
      -1,   302,   303,   304,    -1,   306,   307,   308,   309,    -1,
     311,   312,    -1,    -1,    -1,    -1,   317,   318,   319,   320,
     321,   322,    -1,    -1,   325,   326,    -1,   328,    -1,   330,
      -1,   332,   333,   334,   335,   336,   337,   338,   339,   340,
      -1,    -1,   343,   344,    -1,    -1,   347,   348,   349,   350,
      -1,    -1,    -1,   354,   355,    -1,    -1,   358,    -1,   360,
     361,   362,    -1,   364,   365,   366,   367,    -1,   369,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   379,   380,
     381,    -1,    -1,   384,    -1,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,    -1,    -1,   400,
     401,   402,    -1,   404,    -1,   406,   407,   408,   409,   410,
      -1,   412,   413,   414,    -1,    -1,   417,    -1,    -1,    -1,
     421,   422,   423,   424,   425,    -1,    -1,   428,   429,   430,
     431,   432,    -1,   434,   435,    -1,   437,   438,   439,    -1,
      -1,   442,    -1,   444,    -1,   446,   447,    -1,   449,   450,
      -1,    -1,    -1,   454,   455,   456,   457,   458,   459,   460,
     461,   462,   463,    -1,   465,   466,    -1,    -1,    -1,   470,
     471,   472,   473,    -1,    -1,    -1,   477,    -1,    -1,    -1,
     481,    -1,   483,   484,   485,   486,   487,    -1,   489,   490,
     491,   492,   493,   494,    -1,    -1,    -1,    -1,    -1,    -1,
     501,   502,    -1,   504,    -1,    -1,   507,    -1,    -1,   510,
     511,   512,    -1,    -1,   515,   516,    -1,   518,   519,   520,
     521,   522,   523,    -1,    -1,   526,   527,   528,   529,    -1,
     531,   532,    -1,   534,    -1,   536,   537,   538,   539,    -1,
     541,   542,   543,    -1,   545,   546,   547,   548,    -1,    -1,
      -1,    -1,    -1,   554,   555,   556,    -1,    -1,    -1,   560,
     561,   562,   563,   564,   565,   566,    -1,   568,   569,    -1,
     571,   572,    -1,    -1,   575,    -1,    -1,   578,    -1,   580,
      -1,   582,   583,   584,    -1,    -1,    -1,    -1,    -1,    -1,
     591,    -1,    -1,   594,    -1,    -1,    -1,   598,   599,   600,
     601,   602,   603,    -1,    -1,    -1,    -1,    -1,    -1,   610,
     611,    -1,   613,   614,   615,    -1,     5,   618,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      -1,    -1,    21,    -1,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    -1,    -1,    34,    35,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,
      49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,
      59,    -1,    61,    62,    -1,    64,    65,    66,    67,    68,
      69,    70,    -1,    72,    73,    74,    75,    76,    77,    78,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    -1,    93,    94,    95,    96,    97,    -1,
      99,    -1,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,
     109,    -1,    -1,    -1,   113,   114,   115,    -1,    -1,   118,
      -1,    -1,    -1,    -1,   123,   124,    -1,    -1,    -1,   128,
     129,    -1,   131,    -1,    -1,    -1,   135,    -1,   137,   138,
     139,   140,    -1,    -1,    -1,   144,    -1,    -1,   147,   148,
     149,    -1,    -1,    -1,   153,    -1,   155,   156,    -1,   158,
     159,   160,   161,    -1,   163,   164,    -1,   166,   167,   168,
     169,   170,   171,    -1,    -1,   174,   175,   176,    -1,    -1,
     179,   180,    -1,   182,   183,   184,    -1,    -1,   187,    -1,
      -1,    -1,   191,    -1,   193,    -1,   195,    -1,   197,   198,
     199,   200,   201,   202,    -1,   204,    -1,    -1,    -1,   208,
     209,   210,    -1,   212,    -1,    -1,   215,   216,    -1,    -1,
      -1,   220,   221,   222,   223,    -1,    -1,   226,   227,   228,
      -1,   230,    -1,   232,    -1,    -1,    -1,    -1,   237,   238,
      -1,    -1,    -1,   242,    -1,   244,   245,    -1,   247,   248,
      -1,    -1,    -1,   252,    -1,    -1,   255,   256,   257,    -1,
      -1,   260,    -1,    -1,   263,   264,   265,    -1,    -1,    -1,
      -1,   270,   271,    -1,   273,    -1,   275,    -1,   277,   278,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,    -1,   302,   303,   304,    -1,   306,   307,   308,
     309,    -1,   311,   312,    -1,    -1,    -1,    -1,   317,   318,
     319,   320,   321,   322,    -1,    -1,   325,   326,    -1,   328,
      -1,   330,    -1,   332,   333,   334,   335,   336,   337,   338,
     339,   340,    -1,    -1,   343,   344,    -1,    -1,   347,   348,
     349,   350,    -1,    -1,    -1,   354,   355,    -1,    -1,    -1,
      -1,   360,   361,   362,    -1,   364,   365,   366,   367,    -1,
     369,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     379,   380,   381,    -1,    -1,   384,    -1,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,    -1,
      -1,   400,   401,   402,    -1,   404,    -1,   406,   407,   408,
     409,   410,    -1,   412,   413,   414,    -1,    -1,   417,    -1,
      -1,    -1,   421,   422,   423,   424,   425,    -1,    -1,   428,
     429,   430,   431,   432,    -1,   434,   435,    -1,   437,   438,
     439,    -1,    -1,   442,    -1,   444,    -1,   446,   447,    -1,
     449,   450,    -1,    -1,    -1,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,    -1,   465,   466,    -1,    -1,
      -1,   470,   471,   472,   473,    -1,    -1,   476,   477,    -1,
      -1,    -1,   481,    -1,   483,   484,   485,   486,   487,    -1,
     489,   490,   491,   492,   493,   494,    -1,    -1,    -1,    -1,
      -1,    -1,   501,   502,    -1,   504,    -1,    -1,   507,    -1,
      -1,   510,   511,   512,    -1,    -1,   515,   516,    -1,   518,
     519,   520,   521,   522,   523,    -1,    -1,   526,   527,   528,
     529,    -1,   531,   532,    -1,   534,    -1,   536,   537,   538,
     539,    -1,   541,   542,   543,    -1,   545,   546,   547,   548,
      -1,    -1,    -1,    -1,    -1,   554,   555,   556,    -1,    -1,
      -1,   560,   561,   562,   563,    -1,   565,   566,    -1,   568,
     569,    -1,   571,   572,    -1,    -1,   575,    -1,    -1,   578,
      -1,   580,    -1,   582,   583,   584,    -1,    -1,    -1,    -1,
      -1,    -1,   591,    -1,    -1,   594,    -1,    -1,    -1,   598,
     599,   600,   601,   602,   603,    -1,    -1,    -1,    -1,    -1,
      -1,   610,   611,    -1,   613,   614,   615,    -1,     5,   618,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    -1,    -1,    34,    35,    -1,
      -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,
      -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,    56,
      -1,    58,    59,    -1,    61,    62,    -1,    64,    65,    66,
      67,    68,    69,    70,    -1,    72,    73,    74,    75,    76,
      77,    78,    79,    -1,    81,    82,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    -1,    93,    94,    95,    96,
      97,    -1,    99,    -1,    -1,   102,    -1,    -1,   105,    -1,
      -1,    -1,   109,    -1,    -1,    -1,   113,   114,   115,    -1,
      -1,   118,    -1,    -1,    -1,    -1,   123,   124,    -1,    -1,
      -1,   128,   129,    -1,   131,    -1,    -1,    -1,   135,    -1,
     137,   138,   139,   140,    -1,    -1,    -1,   144,    -1,    -1,
     147,   148,   149,    -1,    -1,    -1,   153,    -1,   155,   156,
      -1,   158,   159,   160,    -1,    -1,   163,   164,    -1,   166,
     167,   168,   169,   170,   171,    -1,    -1,   174,   175,   176,
      -1,    -1,   179,   180,    -1,   182,   183,   184,    -1,    -1,
     187,    -1,    -1,    -1,   191,    -1,   193,    -1,   195,    -1,
     197,   198,   199,   200,   201,   202,    -1,   204,    -1,    -1,
      -1,   208,   209,   210,    -1,   212,    -1,    -1,   215,   216,
      -1,    -1,    -1,   220,   221,   222,   223,    -1,    -1,   226,
     227,   228,    -1,   230,    -1,   232,    -1,    -1,    -1,    -1,
     237,   238,    -1,    -1,    -1,   242,    -1,   244,   245,    -1,
     247,   248,    -1,    -1,    -1,   252,    -1,    -1,   255,   256,
     257,    -1,    -1,   260,    -1,    -1,   263,   264,   265,    -1,
      -1,    -1,    -1,   270,   271,    -1,   273,    -1,   275,    -1,
     277,   278,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,    -1,   302,   303,   304,    -1,   306,
     307,   308,   309,    -1,   311,   312,    -1,    -1,    -1,    -1,
     317,   318,   319,   320,   321,   322,    -1,    -1,   325,   326,
      -1,   328,    -1,   330,    -1,   332,   333,   334,   335,   336,
     337,   338,   339,   340,    -1,    -1,   343,   344,    -1,    -1,
     347,   348,   349,   350,    -1,    -1,    -1,   354,   355,    -1,
      -1,    -1,    -1,   360,   361,   362,    -1,   364,   365,   366,
     367,    -1,   369,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   379,   380,   381,    -1,    -1,   384,    -1,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,    -1,    -1,   400,   401,   402,    -1,   404,    -1,   406,
     407,   408,   409,   410,    -1,   412,   413,   414,    -1,    -1,
     417,    -1,    -1,    -1,   421,   422,   423,   424,   425,    -1,
      -1,   428,   429,   430,   431,   432,    -1,   434,   435,    -1,
     437,   438,   439,    -1,    -1,   442,    -1,   444,    -1,   446,
     447,    -1,   449,   450,    -1,    -1,    -1,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,    -1,   465,   466,
      -1,    -1,    -1,   470,   471,   472,   473,    -1,    -1,    -1,
     477,    -1,    -1,    -1,   481,    -1,   483,   484,   485,   486,
     487,    -1,   489,   490,   491,   492,   493,   494,    -1,    -1,
      -1,    -1,    -1,    -1,   501,   502,    -1,   504,    -1,    -1,
     507,    -1,    -1,   510,   511,   512,    -1,    -1,   515,   516,
      -1,   518,   519,   520,   521,   522,   523,    -1,    -1,   526,
     527,   528,   529,    -1,   531,   532,    -1,   534,    -1,   536,
     537,   538,   539,    -1,   541,   542,   543,    -1,   545,   546,
     547,   548,    -1,    -1,    -1,    -1,    -1,   554,   555,   556,
      -1,    -1,    -1,   560,   561,   562,   563,    -1,   565,   566,
      -1,   568,   569,    -1,   571,   572,    -1,    -1,   575,    -1,
      -1,   578,    -1,   580,    -1,   582,   583,   584,    -1,    -1,
      -1,    -1,    -1,    -1,   591,    -1,    -1,   594,    -1,    -1,
      -1,   598,   599,   600,   601,   602,   603,    -1,    -1,    -1,
      -1,    -1,    -1,   610,   611,    -1,   613,   614,   615,    -1,
       5,   618,     7,     8,     9,    10,    11,    -1,    -1,    14,
      -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    -1,    -1,    -1,
      35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,
      -1,    46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,
      55,    56,    -1,    58,    59,    -1,    61,    62,    -1,    64,
      65,    66,    67,    68,    69,    70,    -1,    72,    73,    74,
      75,    76,    77,    78,    79,    -1,    81,    82,    83,    84,
      85,    86,    87,    88,    -1,    90,    91,    -1,    93,    94,
      95,    96,    97,    -1,    99,    -1,    -1,   102,    -1,    -1,
     105,    -1,    -1,    -1,   109,    -1,    -1,    -1,   113,   114,
     115,    -1,    -1,   118,    -1,    -1,    -1,    -1,   123,   124,
      -1,    -1,    -1,    -1,   129,    -1,   131,    -1,    -1,    -1,
     135,    -1,   137,   138,   139,   140,    -1,    -1,    -1,   144,
      -1,    -1,   147,   148,   149,    -1,    -1,    -1,   153,    -1,
     155,   156,    -1,   158,   159,   160,    -1,    -1,   163,   164,
      -1,   166,   167,   168,   169,   170,   171,    -1,    -1,   174,
     175,   176,    -1,    -1,   179,   180,    -1,   182,   183,   184,
      -1,    -1,   187,    -1,    -1,    -1,   191,    -1,   193,    -1,
     195,    -1,   197,   198,   199,   200,   201,   202,    -1,   204,
      -1,    -1,    -1,   208,   209,   210,    -1,   212,    -1,    -1,
     215,   216,    -1,    -1,    -1,   220,   221,   222,   223,    -1,
      -1,   226,   227,   228,    -1,   230,    -1,   232,    -1,    -1,
      -1,    -1,   237,   238,    -1,    -1,    -1,   242,    -1,   244,
     245,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,    -1,
     255,   256,   257,    -1,    -1,   260,    -1,    -1,   263,   264,
      -1,    -1,    -1,    -1,    -1,   270,   271,    -1,   273,    -1,
     275,    -1,   277,   278,    -1,    -1,   281,    -1,    -1,    -1,
      -1,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,    -1,   302,   303,   304,
      -1,   306,   307,   308,   309,    -1,   311,   312,    -1,    -1,
      -1,    -1,   317,   318,   319,   320,   321,   322,    -1,    -1,
     325,   326,    -1,   328,    -1,   330,    -1,   332,   333,   334,
     335,   336,   337,   338,   339,   340,    -1,    -1,   343,   344,
      -1,    -1,   347,   348,   349,   350,    -1,    -1,    -1,   354,
     355,    -1,    -1,   358,    -1,   360,   361,   362,    -1,   364,
     365,   366,   367,    -1,   369,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   379,   380,   381,    -1,   383,   384,
      -1,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,    -1,    -1,   400,   401,   402,    -1,   404,
      -1,   406,   407,   408,   409,   410,    -1,   412,   413,   414,
      -1,    -1,   417,    -1,    -1,    -1,   421,   422,   423,   424,
     425,    -1,    -1,   428,   429,   430,   431,   432,    -1,   434,
     435,    -1,   437,   438,   439,    -1,    -1,   442,    -1,   444,
      -1,   446,   447,    -1,   449,   450,    -1,    -1,    -1,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,    -1,
     465,   466,    -1,    -1,    -1,   470,   471,   472,   473,    -1,
      -1,    -1,   477,    -1,    -1,    -1,   481,    -1,   483,   484,
     485,   486,   487,    -1,   489,   490,   491,   492,   493,   494,
      -1,    -1,    -1,    -1,    -1,    -1,   501,   502,    -1,   504,
      -1,    -1,   507,    -1,    -1,   510,   511,   512,    -1,    -1,
     515,   516,    -1,   518,   519,   520,   521,   522,   523,    -1,
      -1,   526,   527,   528,   529,    -1,   531,   532,    -1,   534,
      -1,   536,   537,   538,   539,    -1,    -1,   542,   543,    -1,
     545,   546,   547,   548,    -1,    -1,    -1,    -1,    -1,   554,
     555,   556,    -1,    -1,    -1,   560,   561,   562,   563,   564,
     565,   566,    -1,   568,   569,    -1,   571,   572,    -1,    -1,
     575,    -1,    -1,   578,    -1,   580,    -1,   582,   583,   584,
      -1,    -1,    -1,    -1,    -1,    -1,   591,    -1,    -1,   594,
      -1,    -1,    -1,   598,   599,   600,   601,   602,   603,    -1,
      -1,    -1,    -1,    -1,    -1,   610,   611,    -1,   613,   614,
     615,    -1,     5,   618,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    -1,
      -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,
      -1,    -1,    55,    56,    -1,    58,    59,    -1,    61,    62,
      -1,    64,    65,    66,    67,    68,    69,    70,    -1,    72,
      73,    74,    75,    76,    77,    78,    79,    -1,    81,    82,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    -1,
      93,    94,    95,    96,    97,    -1,    99,    -1,    -1,   102,
      -1,    -1,   105,    -1,    -1,    -1,   109,    -1,    -1,    -1,
     113,   114,   115,    -1,    -1,   118,    -1,    -1,    -1,    -1,
     123,   124,    -1,    -1,    -1,    -1,   129,    -1,   131,    -1,
      -1,    -1,   135,    -1,   137,   138,   139,   140,    -1,    -1,
      -1,   144,    -1,    -1,   147,   148,   149,    -1,    -1,    -1,
     153,    -1,   155,   156,    -1,   158,   159,   160,    -1,    -1,
     163,   164,    -1,   166,   167,   168,   169,   170,   171,    -1,
      -1,   174,   175,   176,    -1,    -1,   179,   180,    -1,   182,
     183,   184,    -1,    -1,   187,    -1,    -1,    -1,   191,    -1,
     193,    -1,   195,    -1,   197,   198,   199,   200,   201,   202,
      -1,   204,    -1,    -1,    -1,   208,   209,   210,    -1,   212,
      -1,    -1,   215,   216,    -1,    -1,    -1,   220,   221,   222,
     223,    -1,    -1,   226,   227,   228,    -1,   230,    -1,   232,
      -1,    -1,    -1,    -1,   237,   238,    -1,    -1,    -1,   242,
      -1,   244,   245,    -1,   247,   248,    -1,    -1,    -1,   252,
      -1,    -1,   255,   256,   257,    -1,    -1,   260,    -1,    -1,
     263,   264,    -1,    -1,    -1,    -1,    -1,   270,   271,    -1,
     273,    -1,   275,    -1,   277,   278,    -1,    -1,   281,    -1,
      -1,    -1,    -1,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,    -1,   302,
     303,   304,    -1,   306,   307,   308,   309,    -1,   311,   312,
      -1,    -1,    -1,    -1,   317,   318,   319,   320,   321,   322,
      -1,    -1,   325,   326,    -1,   328,    -1,   330,    -1,   332,
     333,   334,   335,   336,   337,   338,   339,   340,    -1,    -1,
     343,   344,    -1,    -1,   347,   348,   349,   350,    -1,    -1,
      -1,   354,   355,    -1,    -1,   358,    -1,   360,   361,   362,
      -1,   364,   365,   366,   367,    -1,   369,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   379,   380,   381,    -1,
     383,   384,    -1,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,    -1,    -1,   400,   401,   402,
      -1,   404,    -1,   406,   407,   408,   409,   410,    -1,   412,
     413,   414,    -1,    -1,   417,    -1,    -1,    -1,   421,   422,
     423,   424,   425,    -1,    -1,   428,   429,   430,   431,   432,
      -1,   434,   435,    -1,   437,   438,   439,    -1,    -1,   442,
      -1,   444,    -1,   446,   447,    -1,   449,   450,    -1,    -1,
      -1,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     463,    -1,   465,   466,    -1,    -1,    -1,   470,   471,   472,
     473,    -1,    -1,    -1,   477,    -1,    -1,    -1,   481,    -1,
     483,   484,   485,   486,   487,    -1,   489,   490,   491,   492,
     493,   494,    -1,    -1,    -1,    -1,    -1,    -1,   501,   502,
      -1,   504,    -1,    -1,   507,    -1,    -1,   510,   511,   512,
      -1,    -1,   515,   516,    -1,   518,   519,   520,   521,   522,
     523,    -1,    -1,   526,   527,   528,   529,    -1,   531,   532,
      -1,   534,    -1,   536,   537,   538,   539,    -1,    -1,   542,
     543,    -1,   545,   546,   547,   548,    -1,    -1,    -1,    -1,
      -1,   554,   555,   556,    -1,    -1,    -1,   560,   561,   562,
     563,   564,   565,   566,    -1,   568,   569,    -1,   571,   572,
      -1,    -1,   575,    -1,    -1,   578,    -1,   580,    -1,   582,
     583,   584,    -1,    -1,    -1,    -1,    -1,    -1,   591,    -1,
      -1,   594,    -1,    -1,    -1,   598,   599,   600,   601,   602,
     603,    -1,    -1,    -1,    -1,    -1,    -1,   610,   611,    -1,
     613,   614,   615,    -1,     5,   618,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      21,    -1,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    -1,    -1,    34,    35,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    -1,    48,    49,    -1,
      -1,    52,    -1,    -1,    55,    56,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    66,    67,    68,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    79,    -1,
      81,    82,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    -1,    93,    94,    95,    96,    97,    -1,    99,    -1,
      -1,   102,    -1,    -1,   105,    -1,    -1,    -1,   109,    -1,
      -1,    -1,   113,   114,   115,    -1,    -1,   118,    -1,    -1,
      -1,    -1,   123,   124,    -1,    -1,    -1,   128,   129,    -1,
     131,    -1,    -1,    -1,   135,    -1,   137,   138,   139,   140,
      -1,    -1,    -1,   144,    -1,    -1,   147,   148,   149,    -1,
      -1,    -1,   153,    -1,   155,   156,    -1,   158,   159,   160,
      -1,    -1,   163,   164,    -1,   166,   167,   168,   169,   170,
     171,    -1,    -1,   174,   175,   176,    -1,    -1,   179,   180,
      -1,   182,   183,   184,    -1,    -1,   187,    -1,    -1,    -1,
     191,    -1,   193,    -1,   195,    -1,   197,   198,   199,   200,
     201,   202,    -1,   204,    -1,    -1,    -1,   208,   209,   210,
      -1,   212,    -1,    -1,   215,   216,    -1,    -1,    -1,   220,
     221,   222,   223,    -1,    -1,   226,   227,   228,    -1,   230,
      -1,   232,    -1,    -1,    -1,    -1,   237,   238,    -1,    -1,
      -1,   242,    -1,   244,   245,    -1,   247,   248,    -1,    -1,
      -1,   252,    -1,    -1,   255,   256,   257,    -1,    -1,   260,
      -1,    -1,   263,   264,   265,    -1,    -1,    -1,    -1,   270,
     271,    -1,   273,    -1,   275,    -1,   277,   278,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
      -1,   302,   303,   304,    -1,   306,   307,   308,   309,    -1,
     311,   312,    -1,    -1,    -1,    -1,   317,   318,   319,   320,
     321,   322,    -1,    -1,   325,   326,    -1,   328,    -1,   330,
      -1,   332,   333,   334,   335,   336,   337,   338,   339,   340,
      -1,    -1,   343,   344,    -1,    -1,   347,   348,   349,   350,
      -1,    -1,    -1,   354,   355,    -1,    -1,    -1,    -1,   360,
     361,   362,    -1,   364,   365,   366,   367,    -1,   369,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   379,   380,
     381,    -1,    -1,   384,    -1,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,    -1,    -1,   400,
     401,   402,    -1,   404,    -1,   406,   407,   408,   409,   410,
      -1,   412,   413,   414,    -1,    -1,   417,    -1,    -1,    -1,
     421,   422,   423,   424,   425,    -1,    -1,   428,   429,   430,
     431,   432,    -1,   434,   435,    -1,   437,   438,   439,    -1,
      -1,   442,    -1,   444,    -1,   446,   447,    -1,   449,   450,
      -1,    -1,    -1,   454,   455,   456,   457,   458,   459,   460,
     461,   462,   463,    -1,   465,   466,    -1,    -1,    -1,   470,
     471,   472,   473,    -1,    -1,    -1,   477,    -1,    -1,    -1,
     481,    -1,   483,   484,   485,   486,   487,    -1,   489,   490,
     491,   492,   493,   494,    -1,    -1,    -1,    -1,    -1,    -1,
     501,   502,    -1,   504,    -1,    -1,   507,    -1,    -1,   510,
     511,   512,    -1,    -1,   515,   516,    -1,   518,   519,   520,
     521,   522,   523,    -1,    -1,   526,   527,   528,   529,    -1,
     531,   532,    -1,   534,    -1,   536,   537,   538,   539,    -1,
     541,   542,   543,    -1,   545,   546,   547,   548,    -1,    -1,
      -1,    -1,    -1,   554,   555,   556,    -1,    -1,    -1,   560,
     561,   562,   563,    -1,   565,   566,    -1,   568,   569,    -1,
     571,   572,    -1,    -1,   575,    -1,    -1,   578,    -1,   580,
      -1,   582,   583,   584,    -1,    -1,    -1,    -1,    -1,    -1,
     591,    -1,    -1,   594,    -1,    -1,    -1,   598,   599,   600,
     601,   602,   603,    -1,    -1,    -1,    -1,    -1,    -1,   610,
     611,    -1,   613,   614,   615,    -1,     5,   618,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      -1,    -1,    21,    -1,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,
      49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,
      59,    -1,    61,    62,    -1,    64,    65,    66,    67,    68,
      69,    70,    -1,    72,    73,    74,    75,    76,    77,    78,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    -1,    93,    94,    95,    96,    97,    -1,
      99,    -1,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,
     109,    -1,    -1,    -1,   113,   114,   115,    -1,    -1,   118,
      -1,    -1,    -1,    -1,   123,   124,    -1,    -1,    -1,    -1,
     129,    -1,   131,    -1,    -1,    -1,   135,    -1,   137,   138,
     139,   140,    -1,    -1,    -1,   144,    -1,    -1,   147,   148,
     149,    -1,    -1,    -1,   153,    -1,   155,   156,    -1,   158,
     159,   160,    -1,    -1,   163,   164,    -1,   166,   167,   168,
     169,   170,   171,    -1,    -1,   174,   175,   176,    -1,    -1,
     179,   180,    -1,   182,   183,   184,    -1,    -1,   187,    -1,
      -1,    -1,   191,    -1,   193,    -1,   195,    -1,   197,   198,
     199,   200,   201,   202,    -1,   204,    -1,    -1,    -1,   208,
     209,   210,    -1,   212,    -1,    -1,   215,   216,    -1,    -1,
      -1,   220,   221,   222,   223,    -1,    -1,   226,   227,   228,
      -1,   230,    -1,   232,    -1,    -1,    -1,    -1,   237,   238,
      -1,    -1,    -1,   242,    -1,   244,   245,    -1,   247,   248,
      -1,    -1,    -1,   252,    -1,    -1,   255,   256,   257,    -1,
      -1,   260,    -1,    -1,   263,   264,    -1,    -1,    -1,    -1,
      -1,   270,   271,    -1,   273,    -1,   275,    -1,   277,   278,
      -1,    -1,   281,    -1,    -1,    -1,    -1,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,    -1,   302,   303,   304,    -1,   306,   307,   308,
     309,    -1,   311,   312,    -1,    -1,    -1,    -1,   317,   318,
     319,   320,   321,   322,    -1,    -1,   325,   326,    -1,   328,
      -1,   330,    -1,   332,   333,   334,   335,   336,   337,   338,
     339,   340,    -1,    -1,   343,   344,    -1,    -1,   347,   348,
     349,   350,    -1,    -1,    -1,   354,   355,    -1,    -1,   358,
      -1,   360,   361,   362,    -1,   364,   365,   366,   367,    -1,
     369,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     379,   380,   381,    -1,   383,   384,    -1,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,    -1,
      -1,   400,   401,   402,    -1,   404,    -1,   406,   407,   408,
     409,   410,    -1,   412,   413,   414,    -1,    -1,   417,    -1,
      -1,    -1,   421,   422,   423,   424,   425,    -1,    -1,   428,
     429,   430,   431,   432,    -1,   434,   435,    -1,   437,   438,
     439,    -1,    -1,   442,    -1,   444,    -1,   446,   447,    -1,
     449,   450,    -1,    -1,    -1,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,    -1,   465,   466,    -1,    -1,
      -1,   470,   471,   472,   473,    -1,    -1,    -1,   477,    -1,
      -1,    -1,   481,    -1,   483,   484,   485,   486,   487,    -1,
     489,   490,   491,   492,   493,   494,    -1,    -1,    -1,    -1,
      -1,    -1,   501,   502,    -1,   504,    -1,    -1,   507,    -1,
      -1,   510,   511,   512,    -1,    -1,   515,   516,    -1,   518,
     519,   520,   521,   522,   523,    -1,    -1,   526,   527,   528,
     529,    -1,   531,   532,    -1,   534,    -1,   536,   537,   538,
     539,    -1,    -1,   542,   543,    -1,   545,   546,   547,   548,
      -1,    -1,    -1,    -1,    -1,   554,   555,   556,    -1,    -1,
      -1,   560,   561,   562,   563,   564,   565,   566,    -1,   568,
     569,    -1,   571,   572,    -1,    -1,   575,    -1,    -1,   578,
      -1,   580,    -1,   582,   583,   584,    -1,    -1,    -1,    -1,
      -1,    -1,   591,    -1,    -1,   594,    -1,    -1,    -1,   598,
     599,   600,   601,   602,   603,    -1,    -1,    -1,    -1,    -1,
      -1,   610,   611,    -1,   613,   614,   615,    -1,     5,   618,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    -1,    -1,    -1,    35,    -1,
      -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,
      -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,    56,
      -1,    58,    59,    -1,    61,    62,    -1,    64,    65,    66,
      67,    68,    69,    70,    -1,    72,    73,    74,    75,    76,
      77,    78,    79,    -1,    81,    82,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    -1,    93,    94,    95,    96,
      97,    -1,    99,    -1,    -1,   102,    -1,    -1,   105,    -1,
     107,    -1,   109,    -1,    -1,    -1,   113,   114,   115,    -1,
      -1,   118,    -1,    -1,    -1,    -1,   123,   124,    -1,    -1,
      -1,    -1,   129,    -1,   131,    -1,    -1,    -1,   135,    -1,
     137,   138,   139,   140,    -1,    -1,    -1,   144,    -1,    -1,
     147,   148,   149,    -1,    -1,    -1,   153,    -1,   155,   156,
      -1,   158,   159,   160,    -1,    -1,   163,   164,    -1,   166,
     167,   168,   169,   170,   171,    -1,    -1,   174,   175,   176,
      -1,    -1,   179,   180,    -1,   182,   183,   184,    -1,    -1,
     187,    -1,    -1,    -1,   191,    -1,   193,    -1,   195,    -1,
     197,   198,   199,   200,   201,   202,    -1,   204,    -1,    -1,
      -1,   208,   209,   210,    -1,   212,    -1,    -1,   215,   216,
      -1,    -1,    -1,   220,   221,   222,   223,    -1,    -1,   226,
     227,   228,    -1,   230,    -1,   232,    -1,    -1,    -1,    -1,
     237,   238,    -1,    -1,    -1,   242,    -1,   244,   245,    -1,
     247,   248,    -1,    -1,    -1,   252,    -1,    -1,   255,   256,
     257,    -1,    -1,   260,    -1,    -1,   263,   264,   265,    -1,
      -1,    -1,    -1,   270,   271,    -1,   273,    -1,   275,    -1,
     277,   278,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,    -1,   302,   303,   304,    -1,   306,
     307,   308,   309,    -1,   311,   312,    -1,    -1,    -1,    -1,
     317,   318,   319,   320,   321,   322,    -1,    -1,   325,   326,
      -1,   328,    -1,   330,    -1,   332,   333,   334,   335,   336,
     337,   338,   339,   340,    -1,    -1,   343,   344,    -1,    -1,
     347,   348,   349,   350,    -1,    -1,    -1,   354,   355,    -1,
      -1,    -1,    -1,   360,   361,   362,    -1,   364,   365,   366,
     367,    -1,   369,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   379,   380,   381,    -1,    -1,   384,    -1,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,    -1,    -1,   400,   401,   402,    -1,   404,    -1,   406,
     407,   408,   409,   410,    -1,   412,   413,   414,    -1,    -1,
     417,    -1,    -1,    -1,   421,   422,   423,   424,   425,    -1,
      -1,   428,   429,   430,   431,   432,    -1,   434,   435,    -1,
     437,   438,   439,    -1,    -1,   442,    -1,   444,    -1,   446,
     447,    -1,   449,   450,    -1,    -1,    -1,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,    -1,   465,   466,
      -1,    -1,    -1,   470,   471,   472,   473,    -1,    -1,    -1,
     477,    -1,    -1,    -1,   481,    -1,   483,   484,   485,   486,
     487,    -1,   489,   490,   491,   492,   493,   494,    -1,    -1,
      -1,    -1,    -1,    -1,   501,   502,    -1,   504,    -1,    -1,
     507,    -1,    -1,   510,   511,   512,    -1,    -1,   515,   516,
      -1,   518,   519,   520,   521,   522,   523,    -1,    -1,   526,
     527,   528,   529,    -1,   531,   532,    -1,   534,    -1,   536,
     537,   538,   539,    -1,   541,   542,   543,    -1,   545,   546,
     547,   548,    -1,    -1,    -1,    -1,    -1,   554,   555,   556,
      -1,    -1,    -1,   560,   561,   562,   563,    -1,   565,   566,
      -1,   568,   569,    -1,   571,   572,    -1,    -1,   575,    -1,
      -1,   578,    -1,   580,    -1,   582,   583,   584,    -1,    -1,
      -1,    -1,    -1,    -1,   591,    -1,    -1,   594,    -1,    -1,
      -1,   598,   599,   600,   601,   602,   603,    -1,    -1,    -1,
      -1,    -1,    -1,   610,   611,    -1,   613,   614,   615,    -1,
       5,   618,     7,     8,     9,    10,    11,    12,    -1,    14,
      -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    -1,    -1,    -1,
      35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,
      -1,    46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,
      55,    56,    -1,    58,    59,    -1,    61,    62,    -1,    64,
      65,    66,    67,    68,    69,    70,    -1,    72,    73,    74,
      75,    76,    77,    78,    79,    -1,    81,    82,    83,    84,
      85,    86,    87,    88,    -1,    90,    91,    -1,    93,    94,
      95,    96,    97,    -1,    99,    -1,    -1,   102,    -1,    -1,
     105,    -1,    -1,    -1,   109,    -1,    -1,    -1,   113,   114,
     115,    -1,    -1,   118,    -1,    -1,    -1,    -1,   123,   124,
      -1,    -1,    -1,    -1,   129,    -1,   131,    -1,    -1,    -1,
     135,    -1,   137,   138,   139,   140,    -1,    -1,    -1,   144,
      -1,    -1,   147,   148,   149,    -1,    -1,    -1,   153,    -1,
     155,   156,    -1,   158,   159,   160,    -1,    -1,   163,   164,
      -1,   166,   167,   168,   169,   170,   171,    -1,    -1,   174,
     175,   176,    -1,    -1,   179,   180,    -1,   182,   183,   184,
      -1,    -1,   187,    -1,    -1,    -1,   191,    -1,   193,    -1,
     195,    -1,   197,   198,   199,   200,   201,   202,    -1,   204,
      -1,    -1,    -1,   208,   209,   210,    -1,   212,    -1,    -1,
     215,   216,    -1,    -1,    -1,   220,   221,   222,   223,    -1,
      -1,   226,   227,   228,    -1,   230,    -1,   232,    -1,    -1,
      -1,    -1,   237,   238,    -1,    -1,    -1,   242,    -1,   244,
     245,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,    -1,
     255,   256,   257,    -1,    -1,   260,    -1,    -1,   263,   264,
     265,    -1,    -1,    -1,    -1,   270,   271,    -1,   273,    -1,
     275,    -1,   277,   278,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,    -1,   302,   303,   304,
      -1,   306,   307,   308,   309,    -1,   311,   312,    -1,    -1,
      -1,    -1,   317,   318,   319,   320,   321,   322,    -1,    -1,
     325,   326,    -1,   328,    -1,   330,    -1,   332,   333,   334,
     335,   336,   337,   338,   339,   340,    -1,    -1,   343,   344,
      -1,    -1,   347,   348,   349,   350,    -1,    -1,    -1,   354,
     355,    -1,    -1,    -1,    -1,   360,   361,   362,    -1,   364,
     365,   366,   367,    -1,   369,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   379,   380,   381,    -1,    -1,   384,
      -1,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,    -1,    -1,   400,   401,   402,    -1,   404,
      -1,   406,   407,   408,   409,   410,    -1,   412,   413,   414,
      -1,    -1,   417,    -1,    -1,    -1,   421,   422,   423,   424,
     425,    -1,    -1,   428,   429,   430,   431,   432,    -1,   434,
     435,    -1,   437,   438,   439,    -1,    -1,   442,    -1,   444,
      -1,   446,   447,    -1,   449,   450,    -1,    -1,    -1,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,    -1,
     465,   466,    -1,    -1,    -1,   470,   471,   472,   473,    -1,
      -1,    -1,   477,    -1,    -1,    -1,   481,    -1,   483,   484,
     485,   486,   487,    -1,   489,   490,   491,   492,   493,   494,
      -1,    -1,    -1,    -1,    -1,    -1,   501,   502,    -1,   504,
      -1,    -1,   507,    -1,    -1,   510,   511,   512,    -1,    -1,
     515,   516,    -1,   518,   519,   520,   521,   522,   523,    -1,
      -1,   526,   527,   528,   529,    -1,   531,   532,    -1,   534,
      -1,   536,   537,   538,   539,    -1,   541,   542,   543,    -1,
     545,   546,   547,   548,    -1,    -1,    -1,    -1,    -1,   554,
     555,   556,    -1,    -1,    -1,   560,   561,   562,   563,    -1,
     565,   566,    -1,   568,   569,    -1,   571,   572,    -1,    -1,
     575,    -1,    -1,   578,    -1,   580,    -1,   582,   583,   584,
      -1,    -1,    -1,    -1,    -1,    -1,   591,    -1,    -1,   594,
      -1,    -1,    -1,   598,   599,   600,   601,   602,   603,    -1,
      -1,    -1,    -1,    -1,    -1,   610,   611,    -1,   613,   614,
     615,    -1,     5,   618,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    -1,
      -1,    -1,    35,    36,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,
      -1,    -1,    55,    56,    -1,    58,    59,    -1,    61,    62,
      -1,    64,    65,    66,    67,    68,    69,    70,    -1,    72,
      73,    74,    75,    76,    77,    78,    79,    -1,    81,    82,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    -1,
      93,    94,    95,    96,    97,    -1,    99,    -1,    -1,   102,
      -1,    -1,   105,    -1,    -1,    -1,   109,    -1,    -1,    -1,
     113,   114,   115,    -1,    -1,   118,    -1,    -1,    -1,    -1,
     123,   124,    -1,    -1,    -1,    -1,   129,    -1,   131,    -1,
      -1,    -1,   135,    -1,   137,   138,   139,   140,    -1,    -1,
      -1,   144,    -1,    -1,   147,   148,   149,    -1,    -1,    -1,
     153,    -1,   155,   156,    -1,   158,   159,   160,    -1,    -1,
     163,   164,    -1,   166,   167,   168,   169,   170,   171,    -1,
      -1,   174,   175,   176,    -1,    -1,   179,   180,    -1,   182,
     183,   184,    -1,    -1,   187,    -1,    -1,    -1,   191,    -1,
     193,    -1,   195,    -1,   197,   198,   199,   200,   201,   202,
      -1,   204,    -1,    -1,    -1,   208,   209,   210,    -1,   212,
     213,    -1,   215,   216,    -1,    -1,    -1,   220,   221,   222,
     223,    -1,    -1,   226,   227,   228,    -1,   230,    -1,   232,
      -1,    -1,    -1,    -1,   237,   238,    -1,    -1,    -1,   242,
      -1,   244,   245,    -1,   247,   248,    -1,    -1,    -1,   252,
      -1,    -1,   255,   256,   257,    -1,    -1,   260,    -1,    -1,
     263,   264,    -1,    -1,    -1,    -1,    -1,   270,   271,    -1,
     273,    -1,   275,    -1,   277,   278,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,    -1,   302,
     303,   304,    -1,   306,   307,   308,   309,    -1,   311,   312,
      -1,    -1,    -1,    -1,   317,   318,   319,   320,   321,   322,
      -1,    -1,   325,   326,    -1,   328,    -1,   330,    -1,   332,
     333,   334,   335,   336,   337,   338,   339,   340,    -1,    -1,
     343,   344,    -1,    -1,   347,   348,   349,   350,    -1,    -1,
      -1,   354,   355,    -1,    -1,    -1,    -1,   360,   361,   362,
      -1,   364,   365,   366,   367,    -1,   369,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   379,   380,   381,    -1,
      -1,   384,    -1,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,    -1,    -1,   400,   401,   402,
      -1,   404,    -1,   406,   407,   408,   409,   410,    -1,   412,
     413,   414,    -1,    -1,   417,    -1,    -1,    -1,   421,   422,
     423,   424,   425,    -1,    -1,   428,   429,   430,   431,   432,
      -1,   434,   435,    -1,   437,   438,   439,    -1,    -1,   442,
      -1,   444,    -1,   446,   447,    -1,   449,   450,    -1,    -1,
      -1,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     463,    -1,   465,   466,    -1,    -1,    -1,   470,   471,   472,
     473,    -1,    -1,    -1,   477,    -1,    -1,    -1,   481,    -1,
     483,   484,   485,   486,   487,    -1,   489,   490,   491,   492,
     493,   494,    -1,    -1,    -1,    -1,    -1,    -1,   501,   502,
      -1,   504,    -1,    -1,   507,    -1,    -1,   510,   511,   512,
      -1,    -1,   515,   516,    -1,   518,   519,   520,   521,   522,
     523,    -1,    -1,   526,   527,   528,   529,    -1,   531,   532,
      -1,   534,    -1,   536,   537,   538,   539,    -1,   541,   542,
     543,    -1,   545,   546,   547,   548,    -1,    -1,    -1,    -1,
      -1,   554,   555,   556,    -1,    -1,    -1,   560,   561,   562,
     563,    -1,   565,   566,    -1,   568,   569,    -1,   571,   572,
      -1,    -1,   575,    -1,    -1,   578,    -1,   580,    -1,   582,
     583,   584,    -1,    -1,    -1,    -1,    -1,    -1,   591,    -1,
      -1,   594,    -1,    -1,    -1,   598,   599,   600,   601,   602,
     603,    -1,    -1,    -1,    -1,    -1,    -1,   610,   611,    -1,
     613,   614,   615,    -1,     5,   618,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      21,    -1,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    -1,    -1,    -1,    35,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    -1,    48,    49,    -1,
      -1,    52,    -1,    -1,    55,    56,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    66,    67,    68,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    79,    -1,
      81,    82,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    -1,    93,    94,    95,    96,    97,    -1,    99,    -1,
      -1,   102,    -1,    -1,   105,    -1,    -1,    -1,   109,    -1,
      -1,    -1,   113,   114,   115,    -1,    -1,   118,    -1,    -1,
      -1,    -1,   123,   124,    -1,    -1,    -1,   128,   129,    -1,
     131,    -1,    -1,    -1,   135,    -1,   137,   138,   139,   140,
      -1,    -1,    -1,   144,    -1,    -1,   147,   148,   149,    -1,
      -1,    -1,   153,    -1,   155,   156,    -1,   158,   159,   160,
      -1,    -1,   163,   164,    -1,   166,   167,   168,   169,   170,
     171,    -1,    -1,   174,   175,   176,    -1,    -1,   179,   180,
      -1,   182,   183,   184,    -1,    -1,   187,    -1,    -1,    -1,
     191,    -1,   193,    -1,   195,    -1,   197,   198,   199,   200,
     201,   202,    -1,   204,    -1,    -1,    -1,   208,   209,   210,
      -1,   212,    -1,    -1,   215,   216,    -1,    -1,    -1,   220,
     221,   222,   223,    -1,    -1,   226,   227,   228,    -1,   230,
      -1,   232,    -1,    -1,    -1,    -1,   237,   238,    -1,    -1,
      -1,   242,    -1,   244,   245,    -1,   247,   248,    -1,    -1,
      -1,   252,    -1,    -1,   255,   256,   257,    -1,    -1,   260,
      -1,    -1,   263,   264,   265,    -1,    -1,    -1,    -1,   270,
     271,    -1,   273,    -1,   275,    -1,   277,   278,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
      -1,   302,   303,   304,    -1,   306,   307,   308,   309,    -1,
     311,   312,    -1,    -1,    -1,    -1,   317,   318,   319,   320,
     321,   322,    -1,    -1,   325,   326,    -1,   328,    -1,   330,
      -1,   332,   333,   334,   335,   336,   337,   338,   339,   340,
      -1,    -1,   343,   344,    -1,    -1,   347,   348,   349,   350,
      -1,    -1,    -1,   354,   355,    -1,    -1,    -1,    -1,   360,
     361,   362,    -1,   364,   365,   366,   367,    -1,   369,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   379,   380,
     381,    -1,    -1,   384,    -1,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,    -1,    -1,   400,
     401,   402,    -1,   404,    -1,   406,   407,   408,   409,   410,
      -1,   412,   413,   414,    -1,    -1,   417,    -1,    -1,    -1,
     421,   422,   423,   424,   425,    -1,    -1,   428,   429,   430,
     431,   432,    -1,   434,   435,    -1,   437,   438,   439,    -1,
      -1,   442,    -1,   444,    -1,   446,   447,    -1,   449,   450,
      -1,    -1,    -1,   454,   455,   456,   457,   458,   459,   460,
     461,   462,   463,    -1,   465,   466,    -1,    -1,    -1,   470,
     471,   472,   473,    -1,    -1,    -1,   477,    -1,    -1,    -1,
     481,    -1,   483,   484,   485,   486,   487,    -1,   489,   490,
     491,   492,   493,   494,    -1,    -1,    -1,    -1,    -1,    -1,
     501,   502,    -1,   504,    -1,    -1,   507,    -1,    -1,   510,
     511,   512,    -1,    -1,   515,   516,    -1,   518,   519,   520,
     521,   522,   523,    -1,    -1,   526,   527,   528,   529,    -1,
     531,   532,    -1,   534,    -1,   536,   537,   538,   539,    -1,
     541,   542,   543,    -1,   545,   546,   547,   548,    -1,    -1,
      -1,    -1,    -1,   554,   555,   556,    -1,    -1,    -1,   560,
     561,   562,   563,    -1,   565,   566,    -1,   568,   569,    -1,
     571,   572,    -1,    -1,   575,    -1,    -1,   578,    -1,   580,
      -1,   582,   583,   584,    -1,    -1,    -1,    -1,    -1,    -1,
     591,    -1,    -1,   594,    -1,    -1,    -1,   598,   599,   600,
     601,   602,   603,    -1,    -1,    -1,    -1,    -1,    -1,   610,
     611,    -1,   613,   614,   615,    -1,     5,   618,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      -1,    -1,    21,    -1,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    -1,    -1,    34,    35,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,
      49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,
      59,    -1,    61,    62,    -1,    64,    65,    66,    67,    68,
      69,    70,    -1,    72,    73,    74,    75,    76,    77,    78,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    -1,    93,    94,    95,    96,    97,    -1,
      99,    -1,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,
     109,    -1,    -1,    -1,   113,   114,   115,    -1,    -1,   118,
      -1,    -1,    -1,    -1,   123,   124,    -1,    -1,    -1,    -1,
     129,    -1,   131,    -1,    -1,    -1,   135,    -1,   137,   138,
     139,   140,    -1,    -1,    -1,   144,    -1,    -1,   147,   148,
     149,    -1,    -1,    -1,   153,    -1,   155,   156,    -1,   158,
     159,   160,    -1,    -1,   163,   164,    -1,   166,   167,   168,
     169,   170,   171,    -1,    -1,   174,   175,   176,    -1,    -1,
     179,   180,    -1,   182,   183,   184,    -1,    -1,   187,    -1,
      -1,    -1,   191,    -1,   193,    -1,   195,    -1,   197,   198,
     199,   200,   201,   202,    -1,   204,    -1,    -1,    -1,   208,
     209,   210,    -1,   212,    -1,    -1,   215,   216,    -1,    -1,
      -1,   220,   221,   222,   223,    -1,    -1,   226,   227,   228,
      -1,   230,    -1,   232,    -1,    -1,    -1,    -1,   237,   238,
      -1,    -1,    -1,   242,    -1,   244,   245,    -1,   247,   248,
      -1,    -1,    -1,   252,    -1,    -1,   255,   256,   257,    -1,
      -1,   260,    -1,    -1,   263,   264,   265,    -1,    -1,    -1,
      -1,   270,   271,    -1,   273,    -1,   275,    -1,   277,   278,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,    -1,   302,   303,   304,    -1,   306,   307,   308,
     309,    -1,   311,   312,    -1,    -1,    -1,    -1,   317,   318,
     319,   320,   321,   322,    -1,    -1,   325,   326,    -1,   328,
      -1,   330,    -1,   332,   333,   334,   335,   336,   337,   338,
     339,   340,    -1,    -1,   343,   344,    -1,    -1,   347,   348,
     349,   350,    -1,    -1,    -1,   354,   355,    -1,    -1,    -1,
      -1,   360,   361,   362,    -1,   364,   365,   366,   367,    -1,
     369,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     379,   380,   381,    -1,    -1,   384,    -1,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,    -1,
      -1,   400,   401,   402,    -1,   404,    -1,   406,   407,   408,
     409,   410,    -1,   412,   413,   414,    -1,    -1,   417,    -1,
      -1,    -1,   421,   422,   423,   424,   425,    -1,    -1,   428,
     429,   430,   431,   432,    -1,   434,   435,    -1,   437,   438,
     439,    -1,    -1,   442,    -1,   444,    -1,   446,   447,    -1,
     449,   450,    -1,    -1,    -1,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,    -1,   465,   466,    -1,    -1,
      -1,   470,   471,   472,   473,    -1,    -1,    -1,   477,    -1,
      -1,    -1,   481,    -1,   483,   484,   485,   486,   487,    -1,
     489,   490,   491,   492,   493,   494,    -1,    -1,    -1,    -1,
      -1,    -1,   501,   502,    -1,   504,    -1,    -1,   507,    -1,
      -1,   510,   511,   512,    -1,    -1,   515,   516,    -1,   518,
     519,   520,   521,   522,   523,    -1,    -1,   526,   527,   528,
     529,    -1,   531,   532,    -1,   534,    -1,   536,   537,   538,
     539,    -1,   541,   542,   543,    -1,   545,   546,   547,   548,
      -1,    -1,    -1,    -1,    -1,   554,   555,   556,    -1,    -1,
      -1,   560,   561,   562,   563,    -1,   565,   566,    -1,   568,
     569,    -1,   571,   572,    -1,    -1,   575,    -1,    -1,   578,
      -1,   580,    -1,   582,   583,   584,    -1,    -1,    -1,    -1,
      -1,    -1,   591,    -1,    -1,   594,    -1,    -1,    -1,   598,
     599,   600,   601,   602,   603,    -1,    -1,    -1,    -1,    -1,
      -1,   610,   611,    -1,   613,   614,   615,    -1,     5,   618,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    -1,    -1,    -1,    35,    -1,
      -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,
      -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,    56,
      -1,    58,    59,    -1,    61,    62,    -1,    64,    65,    66,
      67,    68,    69,    70,    -1,    72,    73,    74,    75,    76,
      77,    78,    79,    -1,    81,    82,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    -1,    93,    94,    95,    96,
      97,    -1,    99,    -1,    -1,   102,    -1,    -1,   105,    -1,
      -1,    -1,   109,    -1,    -1,    -1,   113,   114,   115,    -1,
      -1,   118,    -1,    -1,    -1,    -1,   123,   124,    -1,    -1,
      -1,    -1,   129,    -1,   131,    -1,    -1,    -1,   135,    -1,
     137,   138,   139,   140,    -1,    -1,    -1,   144,    -1,    -1,
     147,   148,   149,    -1,    -1,    -1,   153,    -1,   155,   156,
      -1,   158,   159,   160,    -1,    -1,   163,   164,    -1,   166,
     167,   168,   169,   170,   171,    -1,    -1,   174,   175,   176,
      -1,    -1,   179,   180,    -1,   182,   183,   184,    -1,    -1,
     187,    -1,    -1,    -1,   191,    -1,   193,    -1,   195,    -1,
     197,   198,   199,   200,   201,   202,    -1,   204,    -1,    -1,
      -1,   208,   209,   210,    -1,   212,    -1,    -1,   215,   216,
      -1,    -1,    -1,   220,   221,   222,   223,    -1,    -1,   226,
     227,   228,    -1,   230,    -1,   232,    -1,    -1,    -1,    -1,
     237,   238,    -1,    -1,    -1,   242,    -1,   244,   245,    -1,
     247,   248,    -1,    -1,    -1,   252,    -1,    -1,   255,   256,
     257,    -1,    -1,   260,    -1,    -1,   263,   264,   265,    -1,
      -1,    -1,    -1,   270,   271,    -1,   273,    -1,   275,    -1,
     277,   278,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,    -1,   302,   303,   304,    -1,   306,
     307,   308,   309,    -1,   311,   312,    -1,    -1,    -1,    -1,
     317,   318,   319,   320,   321,   322,    -1,    -1,   325,   326,
      -1,   328,    -1,   330,    -1,   332,   333,   334,   335,   336,
     337,   338,   339,   340,    -1,    -1,   343,   344,    -1,    -1,
     347,   348,   349,   350,    -1,    -1,    -1,   354,   355,    -1,
      -1,    -1,    -1,   360,   361,   362,    -1,   364,   365,   366,
     367,    -1,   369,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   379,   380,   381,    -1,    -1,   384,    -1,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,    -1,    -1,   400,   401,   402,    -1,   404,    -1,   406,
     407,   408,   409,   410,    -1,   412,   413,   414,    -1,    -1,
     417,    -1,    -1,    -1,   421,   422,   423,   424,   425,    -1,
      -1,   428,   429,   430,   431,   432,    -1,   434,   435,    -1,
     437,   438,   439,    -1,    -1,   442,    -1,   444,    -1,   446,
     447,    -1,   449,   450,    -1,    -1,    -1,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,    -1,   465,   466,
      -1,    -1,    -1,   470,   471,   472,   473,    -1,    -1,    -1,
     477,    -1,    -1,    -1,   481,    -1,   483,   484,   485,   486,
     487,    -1,   489,   490,   491,   492,   493,   494,    -1,    -1,
      -1,    -1,    -1,    -1,   501,   502,    -1,   504,    -1,    -1,
     507,    -1,    -1,   510,   511,   512,    -1,    -1,   515,   516,
      -1,   518,   519,   520,   521,   522,   523,    -1,    -1,   526,
     527,   528,   529,    -1,   531,   532,    -1,   534,    -1,   536,
     537,   538,   539,    -1,   541,   542,   543,    -1,   545,   546,
     547,   548,    -1,    -1,    -1,    -1,    -1,   554,   555,   556,
      -1,    -1,    -1,   560,   561,   562,   563,    -1,   565,   566,
      -1,   568,   569,    -1,   571,   572,    -1,    -1,   575,    -1,
      -1,   578,    -1,   580,    -1,   582,   583,   584,    -1,    -1,
      -1,    -1,    -1,    -1,   591,    -1,    -1,   594,    -1,    -1,
      -1,   598,   599,   600,   601,   602,   603,    -1,    -1,    -1,
      -1,    -1,    -1,   610,   611,    -1,   613,   614,   615,    -1,
       5,   618,     7,     8,     9,    10,    11,    -1,    -1,    14,
      -1,    -1,    -1,    18,    19,    -1,    21,    -1,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    -1,    -1,    -1,
      35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,
      -1,    46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,
      55,    56,    -1,    58,    59,    -1,    61,    62,    -1,    64,
      65,    66,    67,    68,    69,    70,    -1,    72,    73,    74,
      75,    76,    77,    78,    79,    -1,    81,    82,    83,    84,
      85,    86,    87,    88,    -1,    90,    91,    -1,    93,    94,
      95,    96,    97,    -1,    99,    -1,    -1,   102,    -1,    -1,
     105,    -1,    -1,    -1,   109,    -1,    -1,    -1,   113,   114,
     115,    -1,    -1,   118,    -1,    -1,    -1,    -1,   123,   124,
      -1,    -1,    -1,    -1,   129,    -1,   131,    -1,    -1,    -1,
     135,    -1,   137,   138,   139,   140,    -1,    -1,    -1,   144,
      -1,    -1,   147,   148,   149,    -1,    -1,    -1,   153,    -1,
     155,   156,    -1,   158,   159,   160,    -1,    -1,   163,   164,
      -1,   166,   167,   168,   169,   170,   171,    -1,    -1,   174,
     175,   176,    -1,    -1,   179,   180,    -1,   182,   183,   184,
      -1,    -1,   187,    -1,    -1,    -1,   191,    -1,   193,    -1,
     195,    -1,   197,   198,   199,   200,   201,   202,    -1,   204,
      -1,    -1,    -1,   208,   209,   210,    -1,   212,    -1,    -1,
     215,   216,    -1,    -1,    -1,   220,   221,   222,   223,    -1,
      -1,   226,   227,   228,    -1,   230,    -1,   232,    -1,    -1,
      -1,    -1,   237,   238,    -1,    -1,    -1,   242,    -1,   244,
     245,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,    -1,
     255,   256,   257,    -1,    -1,   260,    -1,    -1,   263,   264,
      -1,    -1,    -1,    -1,    -1,   270,   271,    -1,   273,    -1,
     275,    -1,   277,   278,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,    -1,   302,   303,   304,
      -1,   306,   307,   308,   309,    -1,   311,   312,    -1,    -1,
      -1,    -1,   317,   318,   319,   320,   321,   322,    -1,    -1,
     325,   326,    -1,   328,    -1,   330,    -1,   332,   333,   334,
     335,   336,   337,   338,   339,   340,    -1,    -1,   343,   344,
      -1,    -1,   347,   348,   349,   350,    -1,    -1,    -1,   354,
     355,    -1,    -1,    -1,    -1,   360,   361,   362,    -1,   364,
     365,   366,   367,    -1,   369,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   379,   380,   381,    -1,    -1,   384,
      -1,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,    -1,    -1,   400,   401,   402,    -1,   404,
      -1,   406,   407,   408,   409,   410,    -1,   412,   413,   414,
      -1,    -1,   417,    -1,    -1,    -1,   421,   422,   423,   424,
     425,    -1,    -1,   428,   429,   430,   431,   432,    -1,   434,
     435,    -1,   437,   438,   439,    -1,    -1,   442,    -1,   444,
      -1,   446,   447,    -1,   449,   450,    -1,    -1,    -1,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,    -1,
     465,   466,    -1,    -1,    -1,   470,   471,   472,   473,    -1,
      -1,    -1,   477,    -1,    -1,    -1,   481,    -1,   483,   484,
     485,   486,   487,    -1,   489,   490,   491,   492,   493,   494,
      -1,    -1,    -1,    -1,    -1,    -1,   501,   502,    -1,   504,
      -1,    -1,   507,    -1,    -1,   510,   511,   512,    -1,    -1,
     515,   516,    -1,   518,   519,   520,   521,   522,   523,    -1,
      -1,   526,   527,   528,   529,    -1,   531,   532,    -1,   534,
      -1,   536,   537,   538,   539,    -1,   541,   542,   543,    -1,
     545,   546,   547,   548,    -1,    -1,    -1,    -1,    -1,   554,
     555,   556,    -1,    -1,    -1,   560,   561,   562,   563,    -1,
     565,   566,    -1,   568,   569,    -1,   571,   572,    -1,    -1,
     575,    -1,    -1,   578,    -1,   580,    -1,   582,   583,   584,
      -1,    -1,    -1,    -1,    -1,    -1,   591,    -1,    -1,   594,
      -1,    -1,    -1,   598,   599,   600,   601,   602,   603,    -1,
      -1,    -1,    -1,    -1,    -1,   610,   611,    -1,   613,   614,
     615,    -1,     5,   618,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    -1,
      -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,
      -1,    -1,    55,    56,    -1,    58,    59,    -1,    61,    62,
      -1,    64,    65,    66,    67,    68,    69,    70,    -1,    72,
      73,    74,    75,    76,    77,    78,    79,    -1,    81,    82,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    -1,
      93,    94,    95,    96,    97,    98,    99,    -1,    -1,   102,
      -1,    -1,   105,    -1,    -1,    -1,   109,    -1,    -1,    -1,
     113,   114,   115,    -1,    -1,   118,    -1,    -1,    -1,    -1,
     123,   124,    -1,    -1,    -1,    -1,   129,    -1,   131,    -1,
      -1,    -1,   135,    -1,   137,   138,   139,   140,    -1,    -1,
      -1,   144,    -1,    -1,   147,   148,   149,    -1,    -1,    -1,
     153,    -1,   155,   156,    -1,   158,   159,   160,    -1,    -1,
     163,   164,    -1,   166,   167,   168,   169,   170,   171,    -1,
     173,   174,   175,   176,    -1,    -1,   179,   180,    -1,   182,
     183,   184,    -1,    -1,   187,    -1,    -1,    -1,   191,    -1,
     193,    -1,   195,    -1,   197,   198,   199,   200,   201,   202,
      -1,   204,    -1,    -1,    -1,   208,   209,   210,    -1,   212,
      -1,    -1,   215,   216,    -1,    -1,    -1,   220,   221,   222,
     223,    -1,    -1,   226,   227,   228,    -1,   230,    -1,   232,
      -1,    -1,    -1,    -1,   237,   238,    -1,    -1,    -1,   242,
      -1,   244,   245,    -1,   247,   248,    -1,    -1,    -1,   252,
      -1,    -1,   255,   256,   257,    -1,    -1,   260,    -1,    -1,
     263,   264,    -1,    -1,    -1,    -1,    -1,   270,   271,    -1,
     273,    -1,   275,    -1,   277,   278,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,    -1,   302,
     303,   304,    -1,   306,   307,   308,   309,    -1,   311,   312,
      -1,    -1,    -1,    -1,   317,   318,   319,   320,   321,   322,
      -1,    -1,   325,   326,    -1,   328,    -1,   330,    -1,   332,
     333,   334,   335,   336,   337,   338,   339,   340,    -1,    -1,
     343,   344,    -1,    -1,   347,   348,   349,   350,    -1,    -1,
      -1,   354,   355,    -1,    -1,    -1,    -1,   360,   361,   362,
      -1,   364,   365,   366,   367,    -1,   369,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   379,   380,   381,    -1,
      -1,   384,    -1,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,    -1,    -1,   400,   401,   402,
      -1,   404,    -1,   406,   407,   408,   409,   410,    -1,   412,
     413,   414,    -1,    -1,   417,    -1,    -1,    -1,   421,   422,
     423,   424,   425,    -1,    -1,   428,   429,   430,   431,   432,
      -1,   434,   435,    -1,   437,   438,   439,    -1,    -1,   442,
      -1,   444,    -1,   446,   447,    -1,   449,   450,    -1,    -1,
      -1,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     463,    -1,   465,   466,    -1,    -1,    -1,   470,   471,   472,
     473,    -1,    -1,    -1,   477,    -1,    -1,    -1,   481,    -1,
     483,   484,   485,   486,   487,    -1,   489,   490,   491,   492,
     493,   494,    -1,    -1,    -1,    -1,    -1,    -1,   501,   502,
      -1,   504,    -1,    -1,   507,    -1,    -1,   510,   511,   512,
      -1,    -1,   515,   516,    -1,   518,   519,   520,   521,   522,
     523,    -1,    -1,   526,   527,   528,   529,    -1,   531,   532,
      -1,   534,    -1,   536,   537,   538,   539,    -1,    -1,   542,
     543,    -1,   545,   546,   547,   548,    -1,    -1,    -1,    -1,
      -1,   554,   555,   556,    -1,    -1,    -1,   560,   561,   562,
     563,    -1,   565,   566,    -1,   568,   569,    -1,   571,   572,
      -1,    -1,   575,    -1,    -1,   578,    -1,   580,    -1,   582,
     583,   584,    -1,    -1,    -1,    -1,    -1,    -1,   591,    -1,
      -1,   594,    -1,    -1,    -1,   598,   599,   600,   601,   602,
     603,    -1,    -1,    -1,    -1,    -1,    -1,   610,   611,    -1,
     613,   614,   615,    -1,     5,   618,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      21,    -1,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    -1,    -1,    -1,    35,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    -1,    48,    49,    -1,
      -1,    52,    -1,    -1,    55,    56,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    66,    67,    68,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    79,    -1,
      81,    82,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    -1,    93,    94,    95,    96,    97,    -1,    99,    -1,
      -1,   102,    -1,    -1,   105,    -1,    -1,    -1,   109,    -1,
      -1,    -1,   113,   114,   115,    -1,    -1,   118,    -1,    -1,
      -1,    -1,   123,   124,    -1,    -1,    -1,    -1,   129,    -1,
     131,    -1,    -1,    -1,   135,    -1,   137,   138,   139,   140,
      -1,    -1,    -1,   144,    -1,    -1,   147,   148,   149,    -1,
      -1,    -1,   153,    -1,   155,   156,    -1,   158,   159,   160,
      -1,    -1,   163,   164,    -1,   166,   167,   168,   169,   170,
     171,    -1,    -1,   174,   175,   176,    -1,    -1,   179,   180,
      -1,   182,   183,   184,    -1,    -1,   187,    -1,    -1,    -1,
     191,    -1,   193,    -1,   195,    -1,   197,   198,   199,   200,
     201,   202,    -1,   204,    -1,    -1,    -1,   208,   209,   210,
      -1,   212,    -1,    -1,   215,   216,    -1,    -1,    -1,   220,
     221,   222,   223,    -1,    -1,   226,   227,   228,    -1,   230,
      -1,   232,    -1,    -1,    -1,    -1,   237,   238,    -1,    -1,
      -1,   242,    -1,   244,   245,    -1,   247,   248,    -1,    -1,
      -1,   252,    -1,    -1,   255,   256,   257,    -1,    -1,   260,
      -1,    -1,   263,   264,    -1,    -1,    -1,    -1,    -1,   270,
     271,    -1,   273,    -1,   275,    -1,   277,   278,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
      -1,   302,   303,   304,    -1,   306,   307,   308,   309,    -1,
     311,   312,    -1,    -1,    -1,    -1,   317,   318,   319,   320,
     321,   322,    -1,    -1,   325,   326,    -1,   328,    -1,   330,
      -1,   332,   333,   334,   335,   336,   337,   338,   339,   340,
      -1,    -1,   343,   344,    -1,    -1,   347,   348,   349,   350,
      -1,    -1,    -1,   354,   355,    -1,    -1,    -1,    -1,   360,
     361,   362,    -1,   364,   365,   366,   367,    -1,   369,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   379,   380,
     381,    -1,    -1,   384,    -1,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,    -1,    -1,   400,
     401,   402,    -1,   404,    -1,   406,   407,   408,   409,   410,
      -1,   412,   413,   414,    -1,    -1,   417,    -1,    -1,    -1,
     421,   422,   423,   424,   425,    -1,    -1,   428,   429,   430,
     431,   432,    -1,   434,   435,    -1,   437,   438,   439,    -1,
      -1,   442,    -1,   444,    -1,   446,   447,    -1,   449,   450,
      -1,    -1,    -1,   454,   455,   456,   457,   458,   459,   460,
     461,   462,   463,    -1,   465,   466,    -1,    -1,    -1,   470,
     471,   472,   473,    -1,    -1,    -1,   477,    -1,    -1,    -1,
     481,    -1,   483,   484,   485,   486,   487,    -1,   489,   490,
     491,   492,   493,   494,    -1,    -1,    -1,   498,    -1,    -1,
     501,   502,    -1,   504,    -1,    -1,   507,    -1,    -1,   510,
     511,   512,    -1,    -1,   515,   516,    -1,   518,   519,   520,
     521,   522,   523,    -1,    -1,   526,   527,   528,   529,    -1,
     531,   532,    -1,   534,    -1,   536,   537,   538,   539,    -1,
      -1,   542,   543,    -1,   545,   546,   547,   548,    -1,    -1,
      -1,    -1,    -1,   554,   555,   556,    -1,    -1,    -1,   560,
     561,   562,   563,    -1,   565,   566,    -1,   568,   569,    -1,
     571,   572,    -1,    -1,   575,    -1,    -1,   578,    -1,   580,
      -1,   582,   583,   584,    -1,    -1,    -1,    -1,    -1,    -1,
     591,    -1,    -1,   594,    -1,    -1,    -1,   598,   599,   600,
     601,   602,   603,    -1,    -1,    -1,    -1,    -1,    -1,   610,
     611,    -1,   613,   614,   615,    -1,     5,   618,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      -1,    -1,    21,    -1,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,
      49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,
      59,    -1,    61,    62,    -1,    64,    65,    66,    67,    68,
      69,    70,    -1,    72,    73,    74,    75,    76,    77,    78,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    -1,    93,    94,    95,    96,    97,    -1,
      99,    -1,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,
     109,    -1,    -1,    -1,   113,   114,   115,    -1,    -1,   118,
      -1,    -1,    -1,    -1,   123,   124,    -1,    -1,    -1,    -1,
     129,    -1,   131,    -1,    -1,    -1,   135,    -1,   137,   138,
     139,   140,    -1,    -1,    -1,   144,    -1,    -1,   147,   148,
     149,    -1,    -1,    -1,   153,    -1,   155,   156,    -1,   158,
     159,   160,    -1,    -1,   163,   164,    -1,   166,   167,   168,
     169,   170,   171,    -1,    -1,   174,   175,   176,    -1,    -1,
     179,   180,    -1,   182,   183,   184,    -1,    -1,   187,    -1,
      -1,    -1,   191,   192,   193,    -1,   195,    -1,   197,   198,
     199,   200,   201,   202,    -1,   204,    -1,    -1,    -1,   208,
     209,   210,    -1,   212,    -1,    -1,   215,   216,    -1,    -1,
      -1,   220,   221,   222,   223,    -1,    -1,   226,   227,   228,
      -1,   230,    -1,   232,    -1,    -1,    -1,    -1,   237,   238,
      -1,    -1,    -1,   242,    -1,   244,   245,    -1,   247,   248,
      -1,    -1,    -1,   252,    -1,    -1,   255,   256,   257,    -1,
      -1,   260,    -1,    -1,   263,   264,    -1,    -1,    -1,    -1,
      -1,   270,   271,    -1,   273,    -1,   275,    -1,   277,   278,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,    -1,   302,   303,   304,    -1,   306,   307,   308,
     309,    -1,   311,   312,    -1,    -1,    -1,    -1,   317,   318,
     319,   320,   321,   322,    -1,    -1,   325,   326,    -1,   328,
      -1,   330,    -1,   332,   333,   334,   335,   336,   337,   338,
     339,   340,    -1,    -1,   343,   344,    -1,    -1,   347,   348,
     349,   350,    -1,    -1,    -1,   354,   355,    -1,    -1,    -1,
      -1,   360,   361,   362,    -1,   364,   365,   366,   367,    -1,
     369,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     379,   380,   381,    -1,    -1,   384,    -1,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,    -1,
      -1,   400,   401,   402,    -1,   404,    -1,   406,   407,   408,
     409,   410,    -1,   412,   413,   414,    -1,    -1,   417,    -1,
      -1,    -1,   421,   422,   423,   424,   425,    -1,    -1,   428,
     429,   430,   431,   432,    -1,   434,   435,    -1,   437,   438,
     439,    -1,    -1,   442,    -1,   444,    -1,   446,   447,    -1,
     449,   450,    -1,    -1,    -1,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,    -1,   465,   466,    -1,    -1,
      -1,   470,   471,   472,   473,    -1,    -1,    -1,   477,    -1,
      -1,    -1,   481,    -1,   483,   484,   485,   486,   487,    -1,
     489,   490,   491,   492,   493,   494,    -1,    -1,    -1,    -1,
      -1,    -1,   501,   502,    -1,   504,    -1,    -1,   507,    -1,
      -1,   510,   511,   512,    -1,    -1,   515,   516,    -1,   518,
     519,   520,   521,   522,   523,    -1,    -1,   526,   527,   528,
     529,    -1,   531,   532,    -1,   534,    -1,   536,   537,   538,
     539,    -1,    -1,   542,   543,    -1,   545,   546,   547,   548,
      -1,    -1,    -1,    -1,    -1,   554,   555,   556,    -1,    -1,
      -1,   560,   561,   562,   563,    -1,   565,   566,    -1,   568,
     569,    -1,   571,   572,    -1,    -1,   575,    -1,    -1,   578,
      -1,   580,    -1,   582,   583,   584,    -1,    -1,    -1,    -1,
      -1,    -1,   591,    -1,    -1,   594,    -1,    -1,    -1,   598,
     599,   600,   601,   602,   603,    -1,    -1,    -1,    -1,    -1,
      -1,   610,   611,    -1,   613,   614,   615,    -1,     5,   618,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    -1,    -1,    -1,    35,    -1,
      -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,
      -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,    56,
      -1,    58,    59,    -1,    61,    62,    -1,    64,    65,    66,
      67,    68,    69,    70,    -1,    72,    73,    74,    75,    76,
      77,    78,    79,    -1,    81,    82,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    -1,    93,    94,    95,    96,
      97,    -1,    99,    -1,    -1,   102,    -1,    -1,   105,    -1,
      -1,    -1,   109,    -1,    -1,    -1,   113,   114,   115,    -1,
      -1,   118,    -1,    -1,    -1,    -1,   123,   124,    -1,    -1,
      -1,   128,   129,    -1,   131,    -1,    -1,    -1,   135,    -1,
     137,   138,   139,   140,    -1,    -1,    -1,   144,    -1,    -1,
     147,   148,   149,    -1,    -1,    -1,   153,    -1,   155,   156,
      -1,   158,   159,   160,    -1,    -1,   163,   164,    -1,   166,
     167,   168,   169,   170,   171,    -1,    -1,   174,   175,   176,
      -1,    -1,   179,   180,    -1,   182,   183,   184,    -1,    -1,
     187,    -1,    -1,    -1,   191,    -1,   193,    -1,   195,    -1,
     197,   198,   199,   200,   201,   202,    -1,   204,    -1,    -1,
      -1,   208,   209,   210,    -1,   212,    -1,    -1,   215,   216,
      -1,    -1,    -1,   220,   221,   222,   223,    -1,    -1,   226,
     227,   228,    -1,   230,    -1,   232,    -1,    -1,    -1,    -1,
     237,   238,    -1,    -1,    -1,   242,    -1,   244,   245,    -1,
     247,   248,    -1,    -1,    -1,   252,    -1,    -1,   255,   256,
     257,    -1,    -1,   260,    -1,    -1,   263,   264,    -1,    -1,
      -1,    -1,    -1,   270,   271,    -1,   273,    -1,   275,    -1,
     277,   278,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,    -1,   302,   303,   304,    -1,   306,
     307,   308,   309,    -1,   311,   312,    -1,    -1,    -1,    -1,
     317,   318,   319,   320,   321,   322,    -1,    -1,   325,   326,
      -1,   328,    -1,   330,    -1,   332,   333,   334,   335,   336,
     337,   338,   339,   340,    -1,    -1,   343,   344,    -1,    -1,
     347,   348,   349,   350,    -1,    -1,    -1,   354,   355,    -1,
      -1,    -1,    -1,   360,   361,   362,    -1,   364,   365,   366,
     367,    -1,   369,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   379,   380,   381,    -1,    -1,   384,    -1,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,    -1,    -1,   400,   401,   402,    -1,   404,    -1,   406,
     407,   408,   409,   410,    -1,   412,   413,   414,    -1,    -1,
     417,    -1,    -1,    -1,   421,   422,   423,   424,   425,    -1,
      -1,   428,   429,   430,   431,   432,    -1,   434,   435,    -1,
     437,   438,   439,    -1,    -1,   442,    -1,   444,    -1,   446,
     447,    -1,   449,   450,    -1,    -1,    -1,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,    -1,   465,   466,
      -1,    -1,    -1,   470,   471,   472,   473,    -1,    -1,    -1,
     477,    -1,    -1,    -1,   481,    -1,   483,   484,   485,   486,
     487,    -1,   489,   490,   491,   492,   493,   494,    -1,    -1,
      -1,    -1,    -1,    -1,   501,   502,    -1,   504,    -1,    -1,
     507,    -1,    -1,   510,   511,   512,    -1,    -1,   515,   516,
      -1,   518,   519,   520,   521,   522,   523,    -1,    -1,   526,
     527,   528,   529,    -1,   531,   532,    -1,   534,    -1,   536,
     537,   538,   539,    -1,    -1,   542,   543,    -1,   545,   546,
     547,   548,    -1,    -1,    -1,    -1,    -1,   554,   555,   556,
      -1,    -1,    -1,   560,   561,   562,   563,    -1,   565,   566,
      -1,   568,   569,    -1,   571,   572,    -1,    -1,   575,    -1,
      -1,   578,    -1,   580,    -1,   582,   583,   584,    -1,    -1,
      -1,    -1,    -1,    -1,   591,    -1,    -1,   594,    -1,    -1,
      -1,   598,   599,   600,   601,   602,   603,    -1,    -1,    -1,
      -1,    -1,    -1,   610,   611,    -1,   613,   614,   615,    -1,
       5,   618,     7,     8,     9,    10,    11,    -1,    -1,    14,
      -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    -1,    -1,    -1,
      35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,
      -1,    46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,
      55,    56,    -1,    58,    59,    -1,    61,    62,    -1,    64,
      65,    66,    67,    68,    69,    70,    -1,    72,    73,    74,
      75,    76,    77,    78,    79,    -1,    81,    82,    83,    84,
      85,    86,    87,    88,    -1,    90,    91,    -1,    93,    94,
      95,    96,    97,    -1,    99,    -1,    -1,   102,    -1,    -1,
     105,    -1,    -1,    -1,   109,    -1,    -1,    -1,   113,   114,
     115,    -1,    -1,   118,    -1,    -1,    -1,    -1,   123,   124,
      -1,    -1,    -1,   128,   129,    -1,   131,    -1,    -1,    -1,
     135,    -1,   137,   138,   139,   140,    -1,    -1,    -1,   144,
      -1,    -1,   147,   148,   149,    -1,    -1,    -1,   153,    -1,
     155,   156,    -1,   158,   159,   160,    -1,    -1,   163,   164,
      -1,   166,   167,   168,   169,   170,   171,    -1,    -1,   174,
     175,   176,    -1,    -1,   179,   180,    -1,   182,   183,   184,
      -1,    -1,   187,    -1,    -1,    -1,   191,    -1,   193,    -1,
     195,    -1,   197,   198,   199,   200,   201,   202,    -1,   204,
      -1,    -1,    -1,   208,   209,   210,    -1,   212,    -1,    -1,
     215,   216,    -1,    -1,    -1,   220,   221,   222,   223,    -1,
      -1,   226,   227,   228,    -1,   230,    -1,   232,    -1,    -1,
      -1,    -1,   237,   238,    -1,    -1,    -1,   242,    -1,   244,
     245,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,    -1,
     255,   256,   257,    -1,    -1,   260,    -1,    -1,   263,   264,
      -1,    -1,    -1,    -1,    -1,   270,   271,    -1,   273,    -1,
     275,    -1,   277,   278,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,    -1,   302,   303,   304,
      -1,   306,   307,   308,   309,    -1,   311,   312,    -1,    -1,
      -1,    -1,   317,   318,   319,   320,   321,   322,    -1,    -1,
     325,   326,    -1,   328,    -1,   330,    -1,   332,   333,   334,
     335,   336,   337,   338,   339,   340,    -1,    -1,   343,   344,
      -1,    -1,   347,   348,   349,   350,    -1,    -1,    -1,   354,
     355,    -1,    -1,    -1,    -1,   360,   361,   362,    -1,   364,
     365,   366,   367,    -1,   369,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   379,   380,   381,    -1,    -1,   384,
      -1,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,    -1,    -1,   400,   401,   402,    -1,   404,
      -1,   406,   407,   408,   409,   410,    -1,   412,   413,   414,
      -1,    -1,   417,    -1,    -1,    -1,   421,   422,   423,   424,
     425,    -1,    -1,   428,   429,   430,   431,   432,    -1,   434,
     435,    -1,   437,   438,   439,    -1,    -1,   442,    -1,   444,
      -1,   446,   447,    -1,   449,   450,    -1,    -1,    -1,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,    -1,
     465,   466,    -1,    -1,    -1,   470,   471,   472,   473,    -1,
      -1,    -1,   477,    -1,    -1,    -1,   481,    -1,   483,   484,
     485,   486,   487,    -1,   489,   490,   491,   492,   493,   494,
      -1,    -1,    -1,    -1,    -1,    -1,   501,   502,    -1,   504,
      -1,    -1,   507,    -1,    -1,   510,   511,   512,    -1,    -1,
     515,   516,    -1,   518,   519,   520,   521,   522,   523,    -1,
      -1,   526,   527,   528,   529,    -1,   531,   532,    -1,   534,
      -1,   536,   537,   538,   539,    -1,    -1,   542,   543,    -1,
     545,   546,   547,   548,    -1,    -1,    -1,    -1,    -1,   554,
     555,   556,    -1,    -1,    -1,   560,   561,   562,   563,    -1,
     565,   566,    -1,   568,   569,    -1,   571,   572,    -1,    -1,
     575,    -1,    -1,   578,    -1,   580,    -1,   582,   583,   584,
      -1,    -1,    -1,    -1,    -1,    -1,   591,    -1,    -1,   594,
      -1,    -1,    -1,   598,   599,   600,   601,   602,   603,    -1,
      -1,    -1,    -1,    -1,    -1,   610,   611,    -1,   613,   614,
     615,    -1,     5,   618,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    -1,
      -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,
      -1,    -1,    55,    56,    -1,    58,    59,    -1,    61,    62,
      -1,    64,    65,    66,    67,    68,    69,    70,    -1,    72,
      73,    74,    75,    76,    77,    78,    79,    -1,    81,    82,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    -1,
      93,    94,    95,    96,    97,    -1,    99,    -1,    -1,   102,
      -1,    -1,   105,    -1,    -1,    -1,   109,    -1,    -1,    -1,
     113,   114,   115,    -1,    -1,   118,    -1,    -1,    -1,    -1,
     123,   124,    -1,    -1,    -1,   128,   129,    -1,   131,    -1,
      -1,    -1,   135,    -1,   137,   138,   139,   140,    -1,    -1,
      -1,   144,    -1,    -1,   147,   148,   149,    -1,    -1,    -1,
     153,    -1,   155,   156,    -1,   158,   159,   160,    -1,    -1,
     163,   164,    -1,   166,   167,   168,   169,   170,   171,    -1,
      -1,   174,   175,   176,    -1,    -1,   179,   180,    -1,   182,
     183,   184,    -1,    -1,   187,    -1,    -1,    -1,   191,    -1,
     193,    -1,   195,    -1,   197,   198,   199,   200,   201,   202,
      -1,   204,    -1,    -1,    -1,   208,   209,   210,    -1,   212,
      -1,    -1,   215,   216,    -1,    -1,    -1,   220,   221,   222,
     223,    -1,    -1,   226,   227,   228,    -1,   230,    -1,   232,
      -1,    -1,    -1,    -1,   237,   238,    -1,    -1,    -1,   242,
      -1,   244,   245,    -1,   247,   248,    -1,    -1,    -1,   252,
      -1,    -1,   255,   256,   257,    -1,    -1,   260,    -1,    -1,
     263,   264,    -1,    -1,    -1,    -1,    -1,   270,   271,    -1,
     273,    -1,   275,    -1,   277,   278,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,    -1,   302,
     303,   304,    -1,   306,   307,   308,   309,    -1,   311,   312,
      -1,    -1,    -1,    -1,   317,   318,   319,   320,   321,   322,
      -1,    -1,   325,   326,    -1,   328,    -1,   330,    -1,   332,
     333,   334,   335,   336,   337,   338,   339,   340,    -1,    -1,
     343,   344,    -1,    -1,   347,   348,   349,   350,    -1,    -1,
      -1,   354,   355,    -1,    -1,    -1,    -1,   360,   361,   362,
      -1,   364,   365,   366,   367,    -1,   369,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   379,   380,   381,    -1,
      -1,   384,    -1,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,    -1,    -1,   400,   401,   402,
      -1,   404,    -1,   406,   407,   408,   409,   410,    -1,   412,
     413,   414,    -1,    -1,   417,    -1,    -1,    -1,   421,   422,
     423,   424,   425,    -1,    -1,   428,   429,   430,   431,   432,
      -1,   434,   435,    -1,   437,   438,   439,    -1,    -1,   442,
      -1,   444,    -1,   446,   447,    -1,   449,   450,    -1,    -1,
      -1,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     463,    -1,   465,   466,    -1,    -1,    -1,   470,   471,   472,
     473,    -1,    -1,    -1,   477,    -1,    -1,    -1,   481,    -1,
     483,   484,   485,   486,   487,    -1,   489,   490,   491,   492,
     493,   494,    -1,    -1,    -1,    -1,    -1,    -1,   501,   502,
      -1,   504,    -1,    -1,   507,    -1,    -1,   510,   511,   512,
      -1,    -1,   515,   516,    -1,   518,   519,   520,   521,   522,
     523,    -1,    -1,   526,   527,   528,   529,    -1,   531,   532,
      -1,   534,    -1,   536,   537,   538,   539,    -1,    -1,   542,
     543,    -1,   545,   546,   547,   548,    -1,    -1,    -1,    -1,
      -1,   554,   555,   556,    -1,    -1,    -1,   560,   561,   562,
     563,    -1,   565,   566,    -1,   568,   569,    -1,   571,   572,
      -1,    -1,   575,    -1,    -1,   578,    -1,   580,    -1,   582,
     583,   584,    -1,    -1,    -1,    -1,    -1,    -1,   591,    -1,
      -1,   594,    -1,    -1,    -1,   598,   599,   600,   601,   602,
     603,    -1,    -1,    -1,    -1,    -1,    -1,   610,   611,    -1,
     613,   614,   615,    -1,     5,   618,     7,     8,     9,    10,
      11,    12,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      21,    -1,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    -1,    -1,    -1,    35,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    -1,    48,    49,    -1,
      -1,    52,    -1,    -1,    55,    56,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    66,    67,    68,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    79,    -1,
      81,    82,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    -1,    93,    94,    95,    96,    97,    -1,    99,    -1,
      -1,   102,    -1,    -1,   105,    -1,    -1,    -1,   109,    -1,
      -1,    -1,   113,   114,   115,    -1,    -1,   118,    -1,    -1,
      -1,    -1,   123,   124,    -1,    -1,    -1,    -1,   129,    -1,
     131,    -1,    -1,    -1,   135,    -1,   137,   138,   139,   140,
      -1,    -1,    -1,   144,    -1,    -1,   147,   148,   149,    -1,
      -1,    -1,   153,    -1,   155,   156,    -1,   158,   159,   160,
      -1,    -1,   163,   164,    -1,   166,   167,   168,   169,   170,
     171,    -1,    -1,   174,   175,   176,    -1,    -1,   179,   180,
      -1,   182,   183,   184,    -1,    -1,   187,    -1,    -1,    -1,
     191,    -1,   193,    -1,   195,    -1,   197,   198,   199,   200,
     201,   202,    -1,   204,    -1,    -1,    -1,   208,   209,   210,
      -1,   212,    -1,    -1,   215,   216,    -1,    -1,    -1,   220,
     221,   222,   223,    -1,    -1,   226,   227,   228,    -1,   230,
      -1,   232,    -1,    -1,    -1,    -1,   237,   238,    -1,    -1,
      -1,   242,    -1,   244,   245,    -1,   247,   248,    -1,    -1,
      -1,   252,    -1,    -1,   255,   256,   257,    -1,    -1,   260,
      -1,    -1,   263,   264,    -1,    -1,    -1,    -1,    -1,   270,
     271,    -1,   273,    -1,   275,    -1,   277,   278,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
      -1,   302,   303,   304,    -1,   306,   307,   308,   309,    -1,
     311,   312,    -1,    -1,    -1,    -1,   317,   318,   319,   320,
     321,   322,    -1,    -1,   325,   326,    -1,   328,    -1,   330,
      -1,   332,   333,   334,   335,   336,   337,   338,   339,   340,
      -1,    -1,   343,   344,    -1,    -1,   347,   348,   349,   350,
      -1,    -1,    -1,   354,   355,    -1,    -1,    -1,    -1,   360,
     361,   362,    -1,   364,   365,   366,   367,    -1,   369,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   379,   380,
     381,    -1,    -1,   384,    -1,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,    -1,    -1,   400,
     401,   402,    -1,   404,    -1,   406,   407,   408,   409,   410,
      -1,   412,   413,   414,    -1,    -1,   417,    -1,    -1,    -1,
     421,   422,   423,   424,   425,    -1,    -1,   428,   429,   430,
     431,   432,    -1,   434,   435,    -1,   437,   438,   439,    -1,
      -1,   442,    -1,   444,    -1,   446,   447,    -1,   449,   450,
      -1,    -1,    -1,   454,   455,   456,   457,   458,   459,   460,
     461,   462,   463,    -1,   465,   466,    -1,    -1,    -1,   470,
     471,   472,   473,    -1,    -1,    -1,   477,    -1,    -1,    -1,
     481,    -1,   483,   484,   485,   486,   487,    -1,   489,   490,
     491,   492,   493,   494,    -1,    -1,    -1,    -1,    -1,    -1,
     501,   502,    -1,   504,    -1,    -1,   507,    -1,    -1,   510,
     511,   512,    -1,    -1,   515,   516,    -1,   518,   519,   520,
     521,   522,   523,    -1,    -1,   526,   527,   528,   529,    -1,
     531,   532,    -1,   534,    -1,   536,   537,   538,   539,    -1,
      -1,   542,   543,    -1,   545,   546,   547,   548,    -1,    -1,
      -1,    -1,    -1,   554,   555,   556,    -1,    -1,    -1,   560,
     561,   562,   563,    -1,   565,   566,    -1,   568,   569,    -1,
     571,   572,    -1,    -1,   575,    -1,    -1,   578,    -1,   580,
      -1,   582,   583,   584,    -1,    -1,    -1,    -1,    -1,    -1,
     591,    -1,    -1,   594,    -1,    -1,    -1,   598,   599,   600,
     601,   602,   603,    -1,    -1,    -1,    -1,    -1,    -1,   610,
     611,    -1,   613,   614,   615,    -1,     5,   618,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      -1,    -1,    21,    -1,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,
      49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,
      59,    -1,    61,    62,    -1,    64,    65,    66,    67,    68,
      69,    70,    -1,    72,    73,    74,    75,    76,    77,    78,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    -1,    93,    94,    95,    96,    97,    -1,
      99,    -1,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,
     109,    -1,    -1,    -1,   113,   114,   115,    -1,    -1,   118,
      -1,    -1,    -1,    -1,   123,   124,    -1,    -1,    -1,    -1,
     129,    -1,   131,    -1,    -1,    -1,   135,    -1,   137,   138,
     139,   140,    -1,    -1,    -1,   144,    -1,    -1,   147,   148,
     149,    -1,    -1,    -1,   153,    -1,   155,   156,    -1,   158,
     159,   160,    -1,    -1,   163,   164,    -1,   166,   167,   168,
     169,   170,   171,    -1,    -1,   174,   175,   176,    -1,    -1,
     179,   180,    -1,   182,   183,   184,    -1,    -1,   187,    -1,
      -1,    -1,   191,    -1,   193,    -1,   195,    -1,   197,   198,
     199,   200,   201,   202,    -1,   204,    -1,    -1,    -1,   208,
     209,   210,    -1,   212,    -1,    -1,   215,   216,    -1,    -1,
      -1,   220,   221,   222,   223,    -1,    -1,   226,   227,   228,
      -1,   230,    -1,   232,    -1,    -1,    -1,    -1,   237,   238,
      -1,    -1,    -1,   242,    -1,   244,   245,    -1,   247,   248,
      -1,    -1,    -1,   252,    -1,    -1,   255,   256,   257,    -1,
      -1,   260,    -1,    -1,   263,   264,    -1,    -1,    -1,    -1,
      -1,   270,   271,    -1,   273,    -1,   275,    -1,   277,   278,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,    -1,   302,   303,   304,    -1,   306,   307,   308,
     309,    -1,   311,   312,    -1,    -1,    -1,    -1,   317,   318,
     319,   320,   321,   322,    -1,    -1,   325,   326,    -1,   328,
      -1,   330,    -1,   332,   333,   334,   335,   336,   337,   338,
     339,   340,    -1,    -1,   343,   344,    -1,    -1,   347,   348,
     349,   350,    -1,    -1,    -1,   354,   355,    -1,    -1,    -1,
      -1,   360,   361,   362,    -1,   364,   365,   366,   367,    -1,
     369,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     379,   380,   381,    -1,    -1,   384,    -1,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,    -1,
      -1,   400,   401,   402,   403,   404,    -1,   406,   407,   408,
     409,   410,    -1,   412,   413,   414,    -1,    -1,   417,    -1,
      -1,    -1,   421,   422,   423,   424,   425,    -1,    -1,   428,
     429,   430,   431,   432,    -1,   434,   435,    -1,   437,   438,
     439,    -1,    -1,   442,    -1,   444,    -1,   446,   447,    -1,
     449,   450,    -1,    -1,    -1,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,    -1,   465,   466,    -1,    -1,
      -1,   470,   471,   472,   473,    -1,    -1,    -1,   477,    -1,
      -1,    -1,   481,    -1,   483,   484,   485,   486,   487,    -1,
     489,   490,   491,   492,   493,   494,    -1,    -1,    -1,    -1,
      -1,    -1,   501,   502,    -1,   504,    -1,    -1,   507,    -1,
      -1,   510,   511,   512,    -1,    -1,   515,   516,    -1,   518,
     519,   520,   521,   522,   523,    -1,    -1,   526,   527,   528,
     529,    -1,   531,   532,    -1,   534,    -1,   536,   537,   538,
     539,    -1,    -1,   542,   543,    -1,   545,   546,   547,   548,
      -1,    -1,    -1,    -1,    -1,   554,   555,   556,    -1,    -1,
      -1,   560,   561,   562,   563,    -1,   565,   566,    -1,   568,
     569,    -1,   571,   572,    -1,    -1,   575,    -1,    -1,   578,
      -1,   580,    -1,   582,   583,   584,    -1,    -1,    -1,    -1,
      -1,    -1,   591,    -1,    -1,   594,    -1,    -1,    -1,   598,
     599,   600,   601,   602,   603,    -1,    -1,    -1,    -1,    -1,
      -1,   610,   611,    -1,   613,   614,   615,    -1,     5,   618,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    -1,    -1,    -1,    35,    -1,
      -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,
      -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,    56,
      -1,    58,    59,    -1,    61,    62,    -1,    64,    65,    66,
      67,    68,    69,    70,    -1,    72,    73,    74,    75,    76,
      77,    78,    79,    -1,    81,    82,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    -1,    93,    94,    95,    96,
      97,    -1,    99,    -1,    -1,   102,    -1,    -1,   105,    -1,
      -1,    -1,   109,    -1,    -1,    -1,   113,   114,   115,    -1,
      -1,   118,    -1,    -1,    -1,    -1,   123,   124,    -1,    -1,
      -1,    -1,   129,    -1,   131,    -1,    -1,    -1,   135,    -1,
     137,   138,   139,   140,    -1,    -1,    -1,   144,    -1,    -1,
     147,   148,   149,    -1,    -1,    -1,   153,    -1,   155,   156,
      -1,   158,   159,   160,    -1,    -1,   163,   164,    -1,   166,
     167,   168,   169,   170,   171,    -1,    -1,   174,   175,   176,
      -1,    -1,   179,   180,    -1,   182,   183,   184,    -1,    -1,
     187,    -1,    -1,    -1,   191,    -1,   193,    -1,   195,    -1,
     197,   198,   199,   200,   201,   202,    -1,   204,    -1,    -1,
      -1,   208,   209,   210,    -1,   212,    -1,    -1,   215,   216,
      -1,    -1,    -1,   220,   221,   222,   223,    -1,    -1,   226,
     227,   228,    -1,   230,    -1,   232,    -1,    -1,    -1,    -1,
     237,   238,    -1,    -1,    -1,   242,    -1,   244,   245,    -1,
     247,   248,    -1,    -1,    -1,   252,    -1,    -1,   255,   256,
     257,    -1,    -1,   260,    -1,    -1,   263,   264,    -1,    -1,
      -1,    -1,    -1,   270,   271,    -1,   273,    -1,   275,    -1,
     277,   278,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,    -1,   302,   303,   304,    -1,   306,
     307,   308,   309,    -1,   311,   312,    -1,    -1,    -1,    -1,
     317,   318,   319,   320,   321,   322,    -1,    -1,   325,   326,
      -1,   328,    -1,   330,    -1,   332,   333,   334,   335,   336,
     337,   338,   339,   340,    -1,    -1,   343,   344,    -1,    -1,
     347,   348,   349,   350,    -1,    -1,    -1,   354,   355,    -1,
      -1,    -1,    -1,   360,   361,   362,    -1,   364,   365,   366,
     367,    -1,   369,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   379,   380,   381,    -1,    -1,   384,    -1,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,    -1,    -1,   400,   401,   402,    -1,   404,    -1,   406,
     407,   408,   409,   410,    -1,   412,   413,   414,    -1,    -1,
     417,    -1,    -1,    -1,   421,   422,   423,   424,   425,    -1,
      -1,   428,   429,   430,   431,   432,    -1,   434,   435,    -1,
     437,   438,   439,    -1,    -1,   442,    -1,   444,    -1,   446,
     447,    -1,   449,   450,    -1,    -1,    -1,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,    -1,   465,   466,
      -1,    -1,    -1,   470,   471,   472,   473,    -1,    -1,    -1,
     477,    -1,    -1,    -1,   481,    -1,   483,   484,   485,   486,
     487,    -1,   489,   490,   491,   492,   493,   494,    -1,    -1,
      -1,    -1,    -1,    -1,   501,   502,    -1,   504,    -1,    -1,
     507,    -1,    -1,   510,   511,   512,    -1,    -1,   515,   516,
      -1,   518,   519,   520,   521,   522,   523,    -1,    -1,   526,
     527,   528,   529,    -1,   531,   532,    -1,   534,    -1,   536,
     537,   538,   539,    -1,   541,   542,   543,    -1,   545,   546,
     547,   548,    -1,    -1,    -1,    -1,    -1,   554,   555,   556,
      -1,    -1,    -1,   560,   561,   562,   563,    -1,   565,   566,
      -1,   568,   569,    -1,   571,   572,    -1,    -1,   575,    -1,
      -1,   578,    -1,   580,    -1,   582,   583,   584,    -1,    -1,
      -1,    -1,    -1,    -1,   591,    -1,    -1,   594,    -1,    -1,
      -1,   598,   599,   600,   601,   602,   603,    -1,    -1,    -1,
      -1,    -1,    -1,   610,   611,    -1,   613,   614,   615,    -1,
       5,   618,     7,     8,     9,    10,    11,    -1,    -1,    14,
      -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    -1,    -1,    -1,
      35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,
      -1,    46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,
      55,    56,    -1,    58,    59,    -1,    61,    62,    -1,    64,
      65,    66,    67,    68,    69,    70,    -1,    72,    73,    74,
      75,    76,    77,    78,    79,    -1,    81,    82,    83,    84,
      85,    86,    87,    88,    -1,    90,    91,    -1,    93,    94,
      95,    96,    97,    -1,    99,    -1,    -1,   102,    -1,    -1,
     105,    -1,    -1,    -1,   109,    -1,    -1,    -1,   113,   114,
     115,    -1,    -1,   118,    -1,    -1,    -1,    -1,   123,   124,
      -1,    -1,    -1,    -1,   129,    -1,   131,    -1,    -1,    -1,
     135,    -1,   137,   138,   139,   140,    -1,    -1,    -1,   144,
      -1,    -1,   147,   148,   149,    -1,    -1,    -1,   153,    -1,
     155,   156,    -1,   158,   159,   160,    -1,    -1,   163,   164,
      -1,   166,   167,   168,   169,   170,   171,    -1,    -1,   174,
     175,   176,    -1,    -1,   179,   180,    -1,   182,   183,   184,
      -1,    -1,   187,    -1,    -1,    -1,   191,    -1,   193,    -1,
     195,    -1,   197,   198,   199,   200,   201,   202,    -1,   204,
      -1,    -1,    -1,   208,   209,   210,    -1,   212,    -1,    -1,
     215,   216,    -1,    -1,    -1,   220,   221,   222,   223,    -1,
      -1,   226,   227,   228,    -1,   230,    -1,   232,    -1,    -1,
      -1,    -1,   237,   238,    -1,    -1,    -1,   242,    -1,   244,
     245,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,    -1,
     255,   256,   257,    -1,    -1,   260,    -1,    -1,   263,   264,
      -1,    -1,    -1,    -1,    -1,   270,   271,    -1,   273,    -1,
     275,    -1,   277,   278,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,    -1,   302,   303,   304,
      -1,   306,   307,   308,   309,    -1,   311,   312,    -1,    -1,
      -1,    -1,   317,   318,   319,   320,   321,   322,    -1,    -1,
     325,   326,    -1,   328,    -1,   330,    -1,   332,   333,   334,
     335,   336,   337,   338,   339,   340,    -1,    -1,   343,   344,
      -1,    -1,   347,   348,   349,   350,    -1,    -1,    -1,   354,
     355,    -1,    -1,    -1,    -1,   360,   361,   362,    -1,   364,
     365,   366,   367,    -1,   369,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   379,   380,   381,    -1,    -1,   384,
      -1,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,    -1,    -1,   400,   401,   402,    -1,   404,
      -1,   406,   407,   408,   409,   410,    -1,   412,   413,   414,
      -1,    -1,   417,    -1,    -1,    -1,   421,   422,   423,   424,
     425,    -1,    -1,   428,   429,   430,   431,   432,    -1,   434,
     435,    -1,   437,   438,   439,    -1,    -1,   442,    -1,   444,
      -1,   446,   447,    -1,   449,   450,    -1,    -1,    -1,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,    -1,
     465,   466,    -1,    -1,    -1,   470,   471,   472,   473,    -1,
      -1,    -1,   477,    -1,    -1,    -1,   481,    -1,   483,   484,
     485,   486,   487,    -1,   489,   490,   491,   492,   493,   494,
      -1,    -1,    -1,    -1,    -1,    -1,   501,   502,    -1,   504,
      -1,    -1,   507,    -1,    -1,   510,   511,   512,    -1,    -1,
     515,   516,    -1,   518,   519,   520,   521,   522,   523,    -1,
      -1,   526,   527,   528,   529,    -1,   531,   532,    -1,   534,
      -1,   536,   537,   538,   539,    -1,    -1,   542,   543,    -1,
     545,   546,   547,   548,    -1,    -1,    -1,    -1,    -1,   554,
     555,   556,    -1,    -1,    -1,   560,   561,   562,   563,    -1,
     565,   566,    -1,   568,   569,    -1,   571,   572,    -1,    -1,
     575,    -1,    -1,   578,    -1,   580,    -1,   582,   583,   584,
      -1,    -1,    -1,    -1,    -1,    -1,   591,    -1,    -1,   594,
      -1,    -1,    -1,   598,   599,   600,   601,   602,   603,    -1,
      -1,    -1,    -1,    -1,    -1,   610,   611,    -1,   613,   614,
     615,    -1,     5,   618,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    -1,
      -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,
      -1,    -1,    55,    56,    -1,    58,    59,    -1,    61,    62,
      -1,    64,    65,    66,    67,    68,    69,    70,    -1,    72,
      73,    74,    75,    76,    77,    78,    79,    -1,    81,    82,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    -1,
      93,    94,    95,    96,    97,    -1,    99,    -1,    -1,   102,
      -1,    -1,   105,    -1,    -1,    -1,   109,    -1,    -1,    -1,
     113,   114,   115,    -1,    -1,   118,    -1,    -1,    -1,    -1,
     123,   124,    -1,    -1,    -1,    -1,   129,    -1,   131,    -1,
      -1,    -1,   135,    -1,   137,   138,   139,   140,    -1,    -1,
      -1,   144,    -1,    -1,   147,   148,   149,    -1,    -1,    -1,
     153,    -1,   155,   156,    -1,   158,   159,   160,    -1,    -1,
     163,   164,    -1,   166,   167,   168,   169,   170,   171,    -1,
      -1,   174,   175,   176,    -1,    -1,   179,   180,    -1,   182,
     183,   184,    -1,    -1,   187,    -1,    -1,    -1,   191,    -1,
     193,    -1,   195,    -1,   197,   198,   199,   200,   201,   202,
      -1,   204,    -1,    -1,    -1,   208,   209,   210,    -1,   212,
      -1,    -1,   215,   216,    -1,    -1,    -1,   220,   221,   222,
     223,    -1,    -1,   226,   227,   228,    -1,   230,    -1,   232,
      -1,    -1,    -1,    -1,   237,   238,    -1,    -1,    -1,   242,
      -1,   244,   245,    -1,   247,   248,    -1,    -1,    -1,   252,
      -1,    -1,   255,   256,   257,    -1,    -1,   260,    -1,    -1,
     263,   264,    -1,    -1,    -1,    -1,    -1,   270,   271,    -1,
     273,    -1,   275,    -1,   277,   278,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,    -1,   302,
     303,   304,    -1,   306,   307,   308,   309,    -1,   311,   312,
      -1,    -1,    -1,    -1,   317,   318,   319,   320,   321,   322,
      -1,    -1,   325,   326,    -1,   328,    -1,   330,    -1,   332,
     333,   334,   335,   336,   337,   338,   339,   340,    -1,    -1,
     343,   344,    -1,    -1,   347,   348,   349,   350,    -1,    -1,
      -1,   354,   355,    -1,    -1,    -1,    -1,   360,   361,   362,
      -1,   364,   365,   366,   367,    -1,   369,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   379,   380,   381,    -1,
      -1,   384,    -1,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,    -1,    -1,   400,   401,   402,
      -1,   404,    -1,   406,   407,   408,   409,   410,    -1,   412,
     413,   414,    -1,    -1,   417,    -1,    -1,    -1,   421,   422,
     423,   424,   425,    -1,    -1,   428,   429,   430,   431,   432,
      -1,   434,   435,    -1,   437,   438,   439,    -1,    -1,   442,
      -1,   444,    -1,   446,   447,    -1,   449,   450,    -1,    -1,
      -1,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     463,    -1,   465,   466,    -1,    -1,    -1,   470,   471,   472,
     473,    -1,    -1,    -1,   477,    -1,    -1,    -1,   481,    -1,
     483,   484,   485,   486,   487,    -1,   489,   490,   491,   492,
     493,   494,    -1,    -1,    -1,    -1,    -1,    -1,   501,   502,
      -1,   504,    -1,    -1,   507,    -1,    -1,   510,   511,   512,
      -1,    -1,   515,   516,    -1,   518,   519,   520,   521,   522,
     523,    -1,    -1,   526,   527,   528,   529,    -1,   531,   532,
      -1,   534,    -1,   536,   537,   538,   539,    -1,    -1,   542,
     543,    -1,   545,   546,   547,   548,    -1,    -1,    -1,    -1,
      -1,   554,   555,   556,    -1,    -1,    -1,   560,   561,   562,
     563,    -1,   565,   566,    -1,   568,   569,    -1,   571,   572,
      -1,    -1,   575,    -1,    -1,   578,    -1,   580,    -1,   582,
     583,   584,    -1,    -1,    -1,    -1,    -1,    -1,   591,    -1,
      -1,   594,    -1,    -1,    -1,   598,   599,   600,   601,   602,
     603,    -1,    -1,    -1,    -1,    -1,    -1,   610,   611,    -1,
     613,   614,   615,    -1,     5,   618,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      -1,    -1,    23,    24,    25,    26,    27,    28,    -1,    -1,
      31,    -1,    -1,    -1,    35,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    -1,    -1,    -1,    -1,
      -1,    52,    53,    -1,    55,    56,    -1,    58,    -1,    -1,
      -1,    -1,    -1,    64,    65,    66,    67,    68,    69,    70,
      -1,    72,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      81,    -1,    83,    -1,    85,    86,    87,    88,    -1,    90,
      91,    -1,    93,    94,    95,    -1,    97,    -1,    99,    -1,
      -1,   102,    -1,    -1,   105,    -1,    -1,    -1,   109,    -1,
      -1,    -1,   113,   114,   115,    -1,    -1,   118,    -1,    -1,
      -1,    -1,   123,    -1,    -1,    -1,    -1,    -1,   129,    -1,
     131,    -1,    -1,    -1,   135,    -1,   137,   138,   139,   140,
      -1,    -1,    -1,    -1,    -1,    -1,   147,   148,   149,    -1,
     151,   152,   153,    -1,   155,   156,    -1,   158,   159,   160,
      -1,    -1,   163,   164,    -1,   166,   167,   168,   169,    -1,
      -1,    -1,    -1,   174,   175,   176,    -1,    -1,   179,   180,
     181,   182,   183,   184,    -1,    -1,    -1,    -1,    -1,    -1,
     191,    -1,   193,    -1,   195,    -1,   197,   198,   199,   200,
     201,   202,    -1,   204,    -1,    -1,    -1,    -1,   209,   210,
      -1,    -1,    -1,    -1,    -1,   216,    -1,    -1,    -1,   220,
     221,   222,   223,   224,    -1,   226,   227,   228,    -1,   230,
      -1,   232,    -1,    -1,    -1,    -1,   237,    -1,    -1,    -1,
      -1,   242,    -1,   244,   245,    -1,   247,   248,   249,    -1,
      -1,   252,    -1,    -1,    -1,   256,   257,    -1,    -1,   260,
     261,    -1,   263,   264,    -1,    -1,    -1,    -1,    -1,   270,
     271,    -1,   273,    -1,   275,    -1,   277,   278,    -1,    -1,
      -1,    -1,   283,    -1,    -1,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
      -1,   302,   303,   304,    -1,   306,   307,   308,   309,    -1,
     311,   312,    -1,    -1,    -1,    -1,   317,   318,   319,   320,
     321,   322,    -1,    -1,   325,   326,    -1,   328,    -1,   330,
      -1,   332,   333,   334,   335,   336,   337,   338,   339,   340,
      -1,    -1,   343,   344,    -1,    -1,   347,   348,   349,   350,
      -1,    -1,    -1,    -1,   355,    -1,    -1,    -1,    -1,   360,
     361,   362,    -1,   364,   365,   366,   367,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   380,
     381,    -1,    -1,    -1,    -1,   386,   387,   388,    -1,   390,
     391,   392,   393,   394,   395,   396,    -1,    -1,    -1,    -1,
     401,   402,    -1,   404,    -1,   406,   407,   408,   409,   410,
      -1,   412,   413,   414,    -1,    -1,   417,    -1,    -1,    -1,
     421,   422,   423,   424,   425,    -1,    -1,   428,   429,   430,
     431,   432,    -1,   434,    -1,    -1,   437,    -1,   439,   440,
      -1,   442,    -1,    -1,    -1,   446,    -1,    -1,   449,   450,
     451,    -1,    -1,    -1,   455,   456,   457,   458,   459,   460,
      -1,   462,   463,    -1,   465,    -1,    -1,    -1,    -1,   470,
     471,   472,    -1,    -1,    -1,    -1,   477,    -1,    -1,    -1,
     481,    -1,    -1,   484,    -1,    -1,   487,    -1,   489,    -1,
     491,    -1,   493,   494,    -1,    -1,    -1,    -1,    -1,    -1,
     501,   502,    -1,   504,    -1,    -1,   507,    -1,    -1,   510,
      -1,   512,    -1,    -1,    -1,   516,    -1,   518,   519,   520,
     521,   522,   523,    -1,    -1,   526,   527,   528,   529,    -1,
     531,   532,    -1,   534,    -1,   536,   537,   538,   539,    -1,
      -1,   542,   543,    -1,   545,   546,   547,   548,    -1,    -1,
      -1,    -1,    -1,   554,   555,   556,    -1,    -1,    -1,    -1,
     561,   562,   563,    -1,   565,   566,    -1,   568,   569,    -1,
      -1,    -1,    -1,    -1,   575,    -1,    -1,   578,    -1,    -1,
      -1,   582,   583,   584,    -1,    -1,    -1,    -1,    -1,    -1,
     591,    -1,    -1,   594,    -1,    -1,    -1,   598,   599,   600,
     601,   602,   603,    -1,    -1,   606,    -1,    -1,    -1,   610,
      -1,    -1,   613,    -1,   615,    -1,     5,   618,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      -1,    -1,    -1,    -1,    23,    24,    25,    26,    27,    28,
      -1,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,    -1,
      -1,    -1,    -1,    52,    53,    -1,    55,    56,    -1,    58,
      -1,    -1,    -1,    -1,    -1,    64,    65,    66,    67,    68,
      69,    70,    -1,    72,    73,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    81,    -1,    83,    -1,    85,    86,    87,    88,
      -1,    90,    91,    -1,    93,    94,    95,    -1,    97,    -1,
      99,    -1,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,
     109,    -1,    -1,    -1,   113,   114,   115,    -1,    -1,   118,
      -1,    -1,    -1,    -1,   123,    -1,    -1,    -1,    -1,    -1,
     129,    -1,   131,    -1,    -1,    -1,   135,    -1,   137,   138,
     139,   140,    -1,    -1,    -1,    -1,    -1,    -1,   147,   148,
     149,    -1,   151,    -1,   153,    -1,   155,   156,    -1,   158,
     159,   160,    -1,    -1,   163,   164,    -1,   166,   167,   168,
     169,    -1,    -1,    -1,    -1,   174,   175,   176,    -1,    -1,
     179,   180,   181,   182,   183,   184,    -1,    -1,    -1,    -1,
      -1,    -1,   191,    -1,   193,    -1,   195,    -1,   197,   198,
     199,   200,   201,   202,    -1,   204,    -1,    -1,    -1,    -1,
     209,   210,    -1,    -1,    -1,    -1,    -1,   216,    -1,    -1,
      -1,   220,   221,   222,   223,   224,    -1,   226,   227,   228,
      -1,   230,    -1,   232,    -1,    -1,    -1,    -1,   237,    -1,
      -1,    -1,    -1,   242,    -1,   244,   245,    -1,   247,   248,
     249,    -1,    -1,   252,    -1,    -1,    -1,   256,   257,    -1,
      -1,   260,   261,    -1,   263,   264,    -1,    -1,    -1,    -1,
      -1,   270,   271,    -1,   273,    -1,   275,    -1,   277,   278,
      -1,    -1,    -1,    -1,   283,    -1,    -1,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,    -1,   302,   303,   304,    -1,   306,   307,   308,
     309,    -1,   311,   312,    -1,    -1,    -1,    -1,   317,   318,
     319,   320,   321,   322,    -1,    -1,   325,   326,    -1,   328,
      -1,   330,    -1,   332,   333,   334,   335,   336,   337,   338,
     339,   340,    -1,    -1,   343,   344,    -1,    -1,   347,   348,
     349,   350,    -1,    -1,    -1,    -1,   355,    -1,    -1,    -1,
      -1,   360,   361,   362,    -1,   364,   365,   366,   367,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   380,   381,    -1,    -1,    -1,    -1,   386,   387,   388,
      -1,   390,   391,   392,   393,   394,   395,   396,    -1,    -1,
      -1,    -1,   401,   402,    -1,   404,    -1,   406,   407,   408,
     409,   410,    -1,   412,   413,   414,    -1,    -1,   417,    -1,
      -1,    -1,   421,   422,   423,   424,   425,    -1,    -1,   428,
     429,   430,   431,   432,    -1,   434,    -1,    -1,   437,    -1,
     439,   440,    -1,   442,    -1,    -1,    -1,   446,    -1,    -1,
     449,   450,   451,    -1,    -1,    -1,   455,   456,   457,   458,
     459,   460,    -1,   462,   463,    -1,   465,    -1,    -1,    -1,
      -1,   470,   471,   472,    -1,    -1,    -1,    -1,   477,    -1,
      -1,    -1,   481,    -1,    -1,   484,    -1,    -1,   487,    -1,
     489,    -1,   491,    -1,   493,   494,    -1,    -1,    -1,    -1,
      -1,    -1,   501,   502,    -1,   504,    -1,    -1,   507,    -1,
      -1,   510,    -1,   512,    -1,    -1,    -1,   516,    -1,   518,
     519,   520,   521,   522,   523,    -1,    -1,   526,   527,   528,
     529,    -1,   531,   532,    -1,   534,    -1,   536,   537,   538,
     539,    -1,    -1,   542,   543,    -1,   545,   546,   547,   548,
      -1,    -1,    -1,    -1,    -1,   554,   555,   556,    -1,    -1,
      -1,    -1,   561,   562,   563,    -1,   565,   566,    -1,   568,
     569,    -1,    -1,    -1,    -1,    -1,   575,    -1,    -1,   578,
      -1,    -1,    -1,   582,   583,   584,    -1,    -1,    -1,    -1,
      -1,    -1,   591,    -1,    -1,   594,    -1,    -1,    -1,   598,
     599,   600,   601,   602,   603,   604,    -1,   606,    -1,    -1,
      -1,   610,    -1,    -1,   613,    -1,   615,    -1,     5,   618,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    -1,    -1,    -1,    -1,    23,    24,    25,    26,
      27,    28,    -1,    -1,    31,    -1,    -1,    -1,    35,    -1,
      -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,
      -1,    -1,    -1,    -1,    -1,    52,    53,    -1,    55,    56,
      -1,    58,    -1,    -1,    -1,    -1,    -1,    64,    65,    66,
      67,    68,    69,    70,    -1,    72,    73,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    81,    -1,    83,    -1,    85,    86,
      87,    88,    -1,    90,    91,    -1,    93,    94,    95,    -1,
      97,    -1,    99,    -1,    -1,   102,    -1,    -1,   105,    -1,
      -1,    -1,   109,    -1,    -1,    -1,   113,   114,   115,    -1,
      -1,   118,    -1,    -1,    -1,    -1,   123,    -1,    -1,    -1,
      -1,    -1,   129,    -1,   131,    -1,    -1,    -1,   135,    -1,
     137,   138,   139,   140,    -1,    -1,    -1,    -1,    -1,    -1,
     147,   148,   149,    -1,   151,    -1,   153,    -1,   155,   156,
      -1,   158,   159,   160,    -1,    -1,   163,   164,    -1,   166,
     167,   168,   169,    -1,    -1,    -1,    -1,   174,   175,   176,
      -1,    -1,   179,   180,   181,   182,   183,   184,    -1,    -1,
      -1,    -1,    -1,    -1,   191,    -1,   193,    -1,   195,    -1,
     197,   198,   199,   200,   201,   202,    -1,   204,    -1,    -1,
      -1,    -1,   209,   210,    -1,    -1,    -1,    -1,    -1,   216,
      -1,    -1,    -1,   220,   221,   222,   223,   224,    -1,   226,
     227,   228,    -1,   230,    -1,   232,    -1,    -1,    -1,    -1,
     237,    -1,    -1,    -1,    -1,   242,    -1,   244,   245,    -1,
     247,   248,   249,    -1,    -1,   252,    -1,    -1,    -1,   256,
     257,    -1,    -1,   260,   261,    -1,   263,   264,    -1,    -1,
      -1,    -1,    -1,   270,   271,    -1,   273,    -1,   275,    -1,
     277,   278,    -1,    -1,    -1,    -1,   283,    -1,    -1,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,    -1,   302,   303,   304,    -1,   306,
     307,   308,   309,    -1,   311,   312,    -1,    -1,    -1,    -1,
     317,   318,   319,   320,   321,   322,    -1,    -1,   325,   326,
      -1,   328,    -1,   330,    -1,   332,   333,   334,   335,   336,
     337,   338,   339,   340,    -1,    -1,   343,   344,    -1,    -1,
     347,   348,   349,   350,    -1,    -1,    -1,    -1,   355,    -1,
      -1,    -1,    -1,   360,   361,   362,    -1,   364,   365,   366,
     367,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   380,   381,    -1,    -1,    -1,    -1,   386,
     387,   388,    -1,   390,   391,   392,   393,   394,   395,   396,
      -1,    -1,    -1,    -1,   401,   402,    -1,   404,    -1,   406,
     407,   408,   409,   410,    -1,   412,   413,   414,    -1,    -1,
     417,    -1,    -1,    -1,   421,   422,   423,   424,   425,    -1,
      -1,   428,   429,   430,   431,   432,    -1,   434,    -1,    -1,
     437,    -1,   439,   440,    -1,   442,    -1,    -1,    -1,   446,
      -1,    -1,   449,   450,   451,    -1,    -1,    -1,   455,   456,
     457,   458,   459,   460,    -1,   462,   463,    -1,   465,    -1,
      -1,    -1,    -1,   470,   471,   472,    -1,    -1,    -1,    -1,
     477,    -1,    -1,    -1,   481,    -1,    -1,   484,    -1,    -1,
     487,    -1,   489,    -1,   491,    -1,   493,   494,    -1,    -1,
      -1,    -1,    -1,    -1,   501,   502,    -1,   504,    -1,    -1,
     507,    -1,    -1,   510,    -1,   512,    -1,    -1,    -1,   516,
      -1,   518,   519,   520,   521,   522,   523,    -1,    -1,   526,
     527,   528,   529,    -1,   531,   532,    -1,   534,    -1,   536,
     537,   538,   539,    -1,    -1,   542,   543,    -1,   545,   546,
     547,   548,    -1,    -1,    -1,    -1,    -1,   554,   555,   556,
      -1,    -1,    -1,    -1,   561,   562,   563,    -1,   565,   566,
      -1,   568,   569,    -1,    -1,    -1,    -1,    -1,   575,    -1,
      -1,   578,    -1,    -1,    -1,   582,   583,   584,    -1,    -1,
      -1,    -1,    -1,    -1,   591,    -1,    -1,   594,    -1,    -1,
      -1,   598,   599,   600,   601,   602,   603,   604,    -1,   606,
      -1,    -1,    -1,   610,    -1,    -1,   613,    -1,   615,    -1,
       5,   618,     7,     8,     9,    10,    11,    -1,    -1,    14,
      -1,    -1,    -1,    18,    -1,    -1,    -1,    -1,    23,    24,
      25,    26,    27,    28,    -1,    -1,    31,    -1,    -1,    -1,
      35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,
      -1,    46,    -1,    -1,    -1,    -1,    -1,    52,    53,    -1,
      55,    56,    -1,    58,    -1,    -1,    -1,    -1,    -1,    64,
      65,    66,    67,    68,    69,    70,    -1,    72,    73,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    81,    -1,    83,    -1,
      85,    86,    87,    88,    -1,    90,    91,    -1,    93,    94,
      95,    -1,    97,    -1,    99,    -1,    -1,   102,    -1,    -1,
     105,    -1,    -1,    -1,   109,    -1,    -1,    -1,   113,   114,
     115,    -1,    -1,   118,    -1,    -1,    -1,    -1,   123,    -1,
      -1,    -1,    -1,    -1,   129,    -1,   131,    -1,    -1,    -1,
     135,    -1,   137,   138,   139,   140,    -1,    -1,    -1,    -1,
      -1,    -1,   147,   148,   149,    -1,    -1,    -1,   153,    -1,
     155,   156,    -1,   158,   159,   160,    -1,    -1,   163,   164,
      -1,   166,   167,   168,   169,    -1,    -1,    -1,    -1,   174,
     175,   176,    -1,    -1,   179,   180,   181,   182,   183,   184,
      -1,    -1,    -1,    -1,    -1,    -1,   191,    -1,   193,    -1,
     195,    -1,   197,   198,   199,   200,   201,   202,    -1,   204,
      -1,    -1,    -1,    -1,   209,   210,    -1,    -1,    -1,    -1,
      -1,   216,    -1,    -1,    -1,   220,   221,   222,   223,   224,
      -1,   226,   227,   228,    -1,   230,    -1,   232,    -1,    -1,
      -1,    -1,   237,    -1,    -1,    -1,    -1,   242,    -1,   244,
     245,    -1,   247,   248,   249,    -1,    -1,   252,    -1,    -1,
      -1,   256,   257,    -1,    -1,   260,   261,    -1,   263,   264,
      -1,    -1,    -1,    -1,    -1,   270,   271,    -1,   273,    -1,
     275,    -1,   277,   278,    -1,    -1,    -1,    -1,   283,    -1,
      -1,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,    -1,   302,   303,   304,
      -1,   306,   307,   308,   309,    -1,   311,   312,    -1,    -1,
      -1,    -1,   317,   318,   319,   320,   321,   322,    -1,    -1,
     325,   326,    -1,   328,    -1,   330,    -1,   332,   333,   334,
     335,   336,   337,   338,   339,   340,    -1,    -1,   343,   344,
      -1,    -1,   347,   348,   349,   350,    -1,    -1,    -1,    -1,
     355,    -1,    -1,    -1,    -1,   360,   361,   362,    -1,   364,
     365,   366,   367,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   380,   381,    -1,    -1,    -1,
      -1,   386,   387,   388,    -1,   390,   391,   392,   393,   394,
     395,   396,    -1,    -1,    -1,    -1,   401,   402,    -1,   404,
      -1,   406,   407,   408,   409,   410,    -1,   412,   413,   414,
      -1,    -1,   417,    -1,    -1,    -1,   421,   422,   423,   424,
     425,    -1,    -1,   428,   429,   430,   431,   432,    -1,   434,
      -1,    -1,   437,    -1,   439,   440,    -1,   442,    -1,    -1,
      -1,   446,    -1,    -1,   449,   450,   451,    -1,    -1,    -1,
     455,   456,   457,   458,   459,   460,    -1,   462,   463,    -1,
     465,    -1,    -1,    -1,    -1,   470,   471,   472,    -1,    -1,
      -1,    -1,   477,    -1,    -1,    -1,   481,    -1,    -1,   484,
      -1,    -1,   487,    -1,   489,    -1,   491,    -1,   493,   494,
      -1,    -1,    -1,    -1,    -1,    -1,   501,   502,    -1,   504,
      -1,    -1,   507,    -1,    -1,   510,    -1,   512,    -1,    -1,
      -1,   516,    -1,   518,   519,   520,   521,   522,   523,    -1,
      -1,   526,   527,   528,   529,    -1,   531,   532,    -1,   534,
      -1,   536,   537,   538,   539,    -1,    -1,   542,   543,    -1,
     545,   546,   547,   548,    -1,    -1,    -1,    -1,    -1,   554,
     555,   556,    -1,    -1,    -1,    -1,   561,   562,   563,    -1,
     565,   566,    -1,   568,   569,    -1,    -1,    -1,    -1,    -1,
     575,    -1,    -1,   578,    -1,    -1,    -1,   582,   583,   584,
      -1,    -1,    -1,    -1,    -1,    -1,   591,    -1,    -1,   594,
      -1,    -1,    -1,   598,   599,   600,   601,   602,   603,    -1,
      -1,   606,    -1,    -1,    -1,   610,    -1,    -1,   613,    -1,
     615,    -1,     5,   618,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    -1,    -1,
      23,    24,    25,    26,    27,    28,    -1,    -1,    31,    -1,
      -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    -1,    -1,    -1,    -1,    -1,    52,
      53,    -1,    55,    56,    -1,    58,    -1,    -1,    -1,    -1,
      -1,    64,    65,    66,    67,    68,    69,    70,    -1,    72,
      73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    81,    -1,
      83,    -1,    85,    86,    87,    88,    -1,    90,    91,    -1,
      93,    94,    95,    -1,    97,    -1,    99,    -1,    -1,   102,
      -1,    -1,   105,    -1,    -1,    -1,   109,    -1,    -1,    -1,
     113,   114,   115,    -1,    -1,   118,    -1,    -1,    -1,    -1,
     123,    -1,    -1,    -1,    -1,    -1,   129,    -1,   131,    -1,
      -1,    -1,   135,    -1,   137,   138,   139,   140,    -1,    -1,
      -1,    -1,    -1,    -1,   147,   148,   149,    -1,    -1,    -1,
     153,    -1,   155,   156,    -1,   158,   159,   160,    -1,    -1,
     163,   164,    -1,   166,   167,   168,   169,    -1,    -1,    -1,
      -1,   174,   175,   176,    -1,    -1,   179,   180,   181,   182,
     183,   184,    -1,    -1,    -1,    -1,    -1,    -1,   191,    -1,
     193,    -1,   195,    -1,   197,   198,   199,   200,   201,   202,
      -1,   204,    -1,    -1,    -1,    -1,   209,   210,    -1,    -1,
      -1,    -1,    -1,   216,    -1,    -1,    -1,   220,   221,   222,
     223,   224,    -1,   226,   227,   228,    -1,   230,    -1,   232,
      -1,    -1,    -1,    -1,   237,    -1,    -1,    -1,    -1,   242,
      -1,   244,   245,    -1,   247,   248,   249,    -1,    -1,   252,
      -1,    -1,    -1,   256,   257,    -1,    -1,   260,   261,    -1,
     263,   264,    -1,    -1,    -1,    -1,    -1,   270,   271,    -1,
     273,    -1,   275,    -1,   277,   278,    -1,    -1,    -1,    -1,
     283,    -1,    -1,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,    -1,   302,
     303,   304,    -1,   306,   307,   308,   309,    -1,   311,   312,
      -1,    -1,    -1,    -1,   317,   318,   319,   320,   321,   322,
      -1,    -1,   325,   326,    -1,   328,    -1,   330,    -1,   332,
     333,   334,   335,   336,   337,   338,   339,   340,    -1,    -1,
     343,   344,    -1,    -1,   347,   348,   349,   350,    -1,    -1,
      -1,    -1,   355,    -1,    -1,    -1,    -1,   360,   361,   362,
      -1,   364,   365,   366,   367,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   380,   381,    -1,
      -1,    -1,    -1,   386,   387,   388,    -1,   390,   391,   392,
     393,   394,   395,   396,    -1,    -1,    -1,    -1,   401,   402,
      -1,   404,    -1,   406,   407,   408,   409,   410,    -1,   412,
     413,   414,    -1,    -1,   417,    -1,    -1,    -1,   421,   422,
     423,   424,   425,    -1,    -1,   428,   429,   430,   431,   432,
      -1,   434,    -1,    -1,   437,    -1,   439,   440,    -1,   442,
      -1,    -1,    -1,   446,    -1,    -1,   449,   450,   451,    -1,
      -1,    -1,   455,   456,   457,   458,   459,   460,    -1,   462,
     463,    -1,   465,    -1,    -1,    -1,    -1,   470,   471,   472,
      -1,    -1,    -1,    -1,   477,    -1,    -1,    -1,   481,    -1,
      -1,   484,    -1,    -1,   487,    -1,   489,    -1,   491,    -1,
     493,   494,    -1,    -1,    -1,    -1,    -1,    -1,   501,   502,
      -1,   504,    -1,    -1,   507,    -1,    -1,   510,    -1,   512,
      -1,    -1,    -1,   516,    -1,   518,   519,   520,   521,   522,
     523,    -1,    -1,   526,   527,   528,   529,    -1,   531,   532,
      -1,   534,    -1,   536,   537,   538,   539,    -1,    -1,   542,
     543,    -1,   545,   546,   547,   548,    -1,    -1,    -1,    -1,
      -1,   554,   555,   556,    -1,    -1,    -1,    -1,   561,   562,
     563,    -1,   565,   566,    -1,   568,   569,    -1,    -1,    -1,
      -1,    -1,   575,    -1,    -1,   578,    -1,    -1,    -1,   582,
     583,   584,    -1,    -1,    -1,    -1,    -1,    -1,   591,    -1,
      -1,   594,    -1,    -1,    -1,   598,   599,   600,   601,   602,
     603,    -1,    -1,   606,    -1,    -1,    -1,   610,    -1,    -1,
     613,    -1,   615,    -1,     5,   618,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      -1,    -1,    23,    24,    25,    26,    27,    28,    -1,    -1,
      31,    -1,    -1,    -1,    35,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    -1,    -1,    -1,    -1,
      -1,    52,    53,    -1,    55,    56,    -1,    58,    -1,    -1,
      -1,    -1,    -1,    64,    65,    66,    67,    68,    69,    70,
      -1,    72,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      81,    -1,    83,    -1,    85,    86,    87,    88,    -1,    90,
      91,    -1,    93,    94,    95,    -1,    97,    -1,    99,    -1,
      -1,   102,    -1,    -1,   105,    -1,    -1,    -1,   109,    -1,
      -1,    -1,   113,   114,   115,    -1,    -1,   118,    -1,    -1,
      -1,    -1,   123,    -1,    -1,    -1,    -1,    -1,   129,    -1,
     131,    -1,    -1,    -1,   135,    -1,   137,   138,   139,   140,
      -1,    -1,    -1,    -1,    -1,    -1,   147,   148,   149,    -1,
      -1,    -1,   153,    -1,   155,   156,    -1,   158,   159,   160,
      -1,    -1,   163,   164,    -1,   166,   167,   168,   169,    -1,
      -1,    -1,    -1,   174,   175,   176,    -1,    -1,   179,   180,
     181,   182,   183,   184,    -1,    -1,    -1,    -1,    -1,    -1,
     191,    -1,   193,    -1,   195,    -1,   197,   198,   199,   200,
     201,   202,    -1,   204,    -1,    -1,    -1,    -1,   209,   210,
      -1,    -1,    -1,    -1,    -1,   216,    -1,    -1,    -1,   220,
     221,   222,   223,   224,    -1,   226,   227,   228,    -1,   230,
      -1,   232,    -1,    -1,    -1,    -1,   237,    -1,    -1,    -1,
      -1,   242,    -1,   244,   245,    -1,   247,   248,   249,    -1,
      -1,   252,    -1,    -1,    -1,   256,   257,    -1,    -1,   260,
     261,    -1,   263,   264,    -1,    -1,    -1,    -1,    -1,   270,
     271,    -1,   273,    -1,   275,    -1,   277,   278,    -1,    -1,
      -1,    -1,   283,    -1,    -1,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
      -1,   302,   303,   304,    -1,   306,   307,   308,   309,    -1,
     311,   312,    -1,    -1,    -1,    -1,   317,   318,   319,   320,
     321,   322,    -1,    -1,   325,   326,    -1,   328,    -1,   330,
      -1,   332,   333,   334,   335,   336,   337,   338,   339,   340,
      -1,    -1,   343,   344,    -1,    -1,   347,   348,   349,   350,
      -1,    -1,    -1,    -1,   355,    -1,    -1,    -1,    -1,   360,
     361,   362,    -1,   364,   365,   366,   367,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   380,
     381,    -1,    -1,    -1,    -1,   386,   387,   388,    -1,   390,
     391,   392,   393,   394,   395,   396,    -1,    -1,    -1,    -1,
     401,   402,    -1,   404,    -1,   406,   407,   408,   409,   410,
      -1,   412,   413,   414,    -1,    -1,   417,    -1,    -1,    -1,
     421,   422,   423,   424,   425,    -1,    -1,   428,   429,   430,
     431,   432,    -1,   434,    -1,    -1,   437,    -1,   439,   440,
      -1,   442,    -1,    -1,    -1,   446,    -1,    -1,   449,   450,
     451,    -1,    -1,    -1,   455,   456,   457,   458,   459,   460,
      -1,   462,   463,    -1,   465,    -1,    -1,    -1,    -1,   470,
     471,   472,    -1,    -1,    -1,    -1,   477,    -1,    -1,    -1,
     481,    -1,    -1,   484,    -1,    -1,   487,    -1,   489,    -1,
     491,    -1,   493,   494,    -1,    -1,    -1,    -1,    -1,    -1,
     501,   502,    -1,   504,    -1,    -1,   507,    -1,    -1,   510,
      -1,   512,    -1,    -1,    -1,   516,    -1,   518,   519,   520,
     521,   522,   523,    -1,    -1,   526,   527,   528,   529,    -1,
     531,   532,    -1,   534,    -1,   536,   537,   538,   539,    -1,
      -1,   542,   543,    -1,   545,   546,   547,   548,    -1,    -1,
      -1,    -1,    -1,   554,   555,   556,    -1,    -1,    -1,    -1,
     561,   562,   563,    -1,   565,   566,    -1,   568,   569,    -1,
      -1,    -1,    -1,    -1,   575,    -1,    -1,   578,    -1,    -1,
      -1,   582,   583,   584,    -1,    -1,    -1,    -1,    -1,    -1,
     591,    -1,    -1,   594,    -1,    -1,    -1,   598,   599,   600,
     601,   602,   603,    -1,    -1,   606,    -1,    -1,    -1,   610,
      -1,    -1,   613,    -1,   615,    -1,     5,   618,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      -1,    -1,    -1,    -1,    23,    24,    25,    26,    27,    28,
      -1,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,    -1,
      -1,    -1,    -1,    52,    53,    -1,    55,    56,    -1,    58,
      -1,    -1,    -1,    -1,    -1,    64,    65,    66,    67,    68,
      69,    70,    -1,    72,    73,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    81,    -1,    83,    -1,    85,    86,    87,    88,
      -1,    90,    91,    -1,    93,    94,    95,    -1,    97,    -1,
      99,    -1,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,
     109,    -1,    -1,    -1,   113,   114,   115,    -1,    -1,   118,
      -1,    -1,    -1,    -1,   123,    -1,    -1,    -1,    -1,    -1,
     129,    -1,   131,    -1,    -1,    -1,   135,    -1,   137,   138,
     139,   140,    -1,    -1,    -1,    -1,    -1,    -1,   147,   148,
     149,    -1,    -1,    -1,   153,    -1,   155,   156,    -1,   158,
     159,   160,    -1,    -1,   163,   164,    -1,   166,   167,   168,
     169,    -1,    -1,    -1,    -1,   174,   175,   176,    -1,    -1,
     179,   180,   181,   182,   183,   184,    -1,    -1,    -1,    -1,
      -1,    -1,   191,    -1,   193,    -1,   195,    -1,   197,   198,
     199,   200,   201,   202,    -1,   204,    -1,    -1,    -1,    -1,
     209,   210,    -1,    -1,    -1,    -1,    -1,   216,    -1,    -1,
      -1,   220,   221,   222,   223,   224,    -1,   226,   227,   228,
      -1,   230,    -1,   232,    -1,    -1,    -1,    -1,   237,    -1,
      -1,    -1,    -1,   242,    -1,   244,   245,    -1,   247,   248,
     249,    -1,    -1,   252,    -1,    -1,    -1,   256,   257,    -1,
      -1,   260,   261,    -1,   263,   264,    -1,    -1,    -1,    -1,
      -1,   270,   271,    -1,   273,    -1,   275,    -1,   277,   278,
      -1,    -1,    -1,    -1,   283,    -1,    -1,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,    -1,   302,   303,   304,    -1,   306,   307,   308,
     309,    -1,   311,   312,    -1,    -1,    -1,    -1,   317,   318,
     319,   320,   321,   322,    -1,    -1,   325,   326,    -1,   328,
      -1,   330,    -1,   332,   333,   334,   335,   336,   337,   338,
     339,   340,    -1,    -1,   343,   344,    -1,    -1,   347,   348,
     349,   350,    -1,    -1,    -1,    -1,   355,    -1,    -1,    -1,
      -1,   360,   361,   362,    -1,   364,   365,   366,   367,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   380,   381,    -1,    -1,    -1,    -1,   386,   387,   388,
      -1,   390,   391,   392,   393,   394,   395,   396,    -1,    -1,
      -1,    -1,   401,   402,    -1,   404,    -1,   406,   407,   408,
     409,   410,    -1,   412,   413,   414,    -1,    -1,   417,    -1,
      -1,    -1,   421,   422,   423,   424,   425,    -1,    -1,   428,
     429,   430,   431,   432,    -1,   434,    -1,    -1,   437,    -1,
     439,   440,    -1,   442,    -1,    -1,    -1,   446,    -1,    -1,
     449,   450,   451,    -1,    -1,    -1,   455,   456,   457,   458,
     459,   460,    -1,   462,   463,    -1,   465,    -1,    -1,    -1,
      -1,   470,   471,   472,    -1,    -1,    -1,    -1,   477,    -1,
      -1,    -1,   481,    -1,    -1,   484,    -1,    -1,   487,    -1,
     489,    -1,   491,    -1,   493,   494,    -1,    -1,    -1,    -1,
      -1,    -1,   501,   502,    -1,   504,    -1,    -1,   507,    -1,
      -1,   510,    -1,   512,    -1,    -1,    -1,   516,    -1,   518,
     519,   520,   521,   522,   523,    -1,    -1,   526,   527,   528,
     529,    -1,   531,   532,    -1,   534,    -1,   536,   537,   538,
     539,    -1,    -1,   542,   543,    -1,   545,   546,   547,   548,
      -1,    -1,    -1,    -1,    -1,   554,   555,   556,    -1,    -1,
      -1,    -1,   561,   562,   563,    -1,   565,   566,    -1,   568,
     569,    -1,    -1,    -1,    -1,    -1,   575,    -1,    -1,   578,
      -1,    -1,    -1,   582,   583,   584,    -1,    -1,    -1,    -1,
      -1,    -1,   591,    -1,    -1,   594,    -1,    -1,    -1,   598,
     599,   600,   601,   602,   603,    -1,    -1,   606,    -1,    -1,
      -1,   610,    -1,    -1,   613,    -1,   615,    -1,     5,   618,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    -1,    -1,    -1,    -1,    23,    24,    25,    26,
      27,    28,    -1,    -1,    31,    -1,    -1,    -1,    35,    -1,
      -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,
      -1,    -1,    -1,    -1,    -1,    52,    53,    -1,    55,    56,
      -1,    58,    -1,    -1,    -1,    -1,    -1,    64,    65,    66,
      67,    68,    69,    70,    -1,    72,    73,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    81,    -1,    83,    -1,    85,    86,
      87,    88,    -1,    90,    91,    -1,    93,    94,    95,    -1,
      97,    -1,    99,    -1,    -1,   102,    -1,    -1,   105,    -1,
      -1,    -1,   109,    -1,    -1,    -1,   113,   114,   115,    -1,
      -1,   118,    -1,    -1,    -1,    -1,   123,    -1,    -1,    -1,
      -1,    -1,   129,    -1,   131,    -1,    -1,    -1,   135,    -1,
     137,   138,   139,   140,    -1,    -1,    -1,    -1,    -1,    -1,
     147,   148,   149,    -1,    -1,    -1,   153,    -1,   155,   156,
      -1,   158,   159,   160,    -1,    -1,   163,   164,    -1,   166,
     167,   168,   169,    -1,    -1,    -1,    -1,   174,   175,   176,
      -1,    -1,   179,   180,   181,   182,   183,   184,    -1,    -1,
      -1,    -1,    -1,    -1,   191,    -1,   193,    -1,   195,    -1,
     197,   198,   199,   200,   201,   202,    -1,   204,    -1,    -1,
      -1,    -1,   209,   210,    -1,    -1,    -1,    -1,    -1,   216,
      -1,    -1,    -1,   220,   221,   222,   223,   224,    -1,   226,
     227,   228,    -1,   230,    -1,   232,    -1,    -1,    -1,    -1,
     237,    -1,    -1,    -1,    -1,   242,    -1,   244,   245,    -1,
     247,   248,   249,    -1,    -1,   252,    -1,    -1,    -1,   256,
     257,    -1,    -1,   260,   261,    -1,   263,   264,    -1,    -1,
      -1,    -1,    -1,   270,   271,    -1,   273,    -1,   275,    -1,
     277,   278,    -1,    -1,    -1,    -1,   283,    -1,    -1,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,    -1,   302,   303,   304,    -1,   306,
     307,   308,   309,    -1,   311,   312,    -1,    -1,    -1,    -1,
     317,   318,   319,   320,   321,   322,    -1,    -1,   325,   326,
      -1,   328,    -1,   330,    -1,   332,   333,   334,   335,   336,
     337,   338,   339,   340,    -1,    -1,   343,   344,    -1,    -1,
     347,   348,   349,   350,    -1,    -1,    -1,    -1,   355,    -1,
      -1,    -1,    -1,   360,   361,   362,    -1,   364,   365,   366,
     367,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   380,   381,    -1,    -1,    -1,    -1,   386,
     387,   388,    -1,   390,   391,   392,   393,   394,   395,   396,
      -1,    -1,    -1,    -1,   401,   402,    -1,   404,    -1,   406,
     407,   408,   409,   410,    -1,   412,   413,   414,    -1,    -1,
     417,    -1,    -1,    -1,   421,   422,   423,   424,   425,    -1,
      -1,   428,   429,   430,   431,   432,    -1,   434,    -1,    -1,
     437,    -1,   439,   440,    -1,   442,    -1,    -1,    -1,   446,
      -1,    -1,   449,   450,   451,    -1,    -1,    -1,   455,   456,
     457,   458,   459,   460,    -1,   462,   463,    -1,   465,    -1,
      -1,    -1,    -1,   470,   471,   472,    -1,    -1,    -1,    -1,
     477,    -1,    -1,    -1,   481,    -1,    -1,   484,    -1,    -1,
     487,    -1,   489,    -1,   491,    -1,   493,   494,    -1,    -1,
      -1,    -1,    -1,    -1,   501,   502,    -1,   504,    -1,    -1,
     507,    -1,    -1,   510,    -1,   512,    -1,    -1,    -1,   516,
      -1,   518,   519,   520,   521,   522,   523,    -1,    -1,   526,
     527,   528,   529,    -1,   531,   532,    -1,   534,    -1,   536,
     537,   538,   539,    -1,    -1,   542,   543,    -1,   545,   546,
     547,   548,    -1,    -1,    -1,    -1,    -1,   554,   555,   556,
      -1,    -1,    -1,    -1,   561,   562,   563,    -1,   565,   566,
      -1,   568,   569,    -1,    -1,    -1,    -1,    -1,   575,    -1,
      -1,   578,    -1,    -1,    -1,   582,   583,   584,    -1,    -1,
      -1,    -1,    -1,    -1,   591,    -1,    -1,   594,    -1,    -1,
      -1,   598,   599,   600,   601,   602,   603,    -1,    -1,   606,
      -1,    -1,    -1,   610,    -1,    -1,   613,    -1,   615,    -1,
       5,   618,     7,     8,     9,    10,    11,    -1,    -1,    14,
      -1,    -1,    -1,    18,    -1,    -1,    -1,    -1,    23,    24,
      25,    26,    27,    28,    -1,    -1,    31,    -1,    -1,    -1,
      35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,
      -1,    46,    -1,    -1,    -1,    -1,    -1,    52,    53,    -1,
      55,    56,    -1,    58,    -1,    -1,    -1,    -1,    -1,    64,
      65,    66,    67,    68,    69,    70,    -1,    72,    73,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    81,    -1,    83,    -1,
      85,    86,    87,    88,    -1,    90,    91,    -1,    93,    94,
      95,    -1,    97,    -1,    99,    -1,    -1,   102,    -1,    -1,
     105,    -1,    -1,    -1,   109,    -1,    -1,    -1,   113,   114,
     115,    -1,    -1,   118,    -1,    -1,    -1,    -1,   123,    -1,
      -1,    -1,    -1,    -1,   129,    -1,   131,    -1,    -1,    -1,
     135,    -1,   137,   138,   139,   140,    -1,    -1,    -1,    -1,
      -1,    -1,   147,   148,   149,    -1,    -1,    -1,   153,    -1,
      -1,   156,    -1,   158,   159,   160,    -1,    -1,   163,   164,
      -1,   166,   167,   168,   169,    -1,    -1,    -1,    -1,   174,
     175,   176,    -1,    -1,   179,   180,   181,   182,   183,   184,
      -1,    -1,    -1,    -1,    -1,    -1,   191,    -1,   193,    -1,
     195,    -1,   197,   198,   199,   200,   201,   202,    -1,   204,
      -1,    -1,    -1,    -1,   209,   210,    -1,    -1,    -1,    -1,
      -1,   216,    -1,    -1,    -1,   220,   221,   222,   223,   224,
      -1,   226,   227,   228,    -1,   230,    -1,   232,    -1,    -1,
      -1,    -1,   237,    -1,    -1,    -1,    -1,   242,    -1,   244,
     245,    -1,   247,   248,   249,    -1,    -1,   252,    -1,    -1,
      -1,   256,   257,    -1,    -1,   260,   261,    -1,   263,   264,
      -1,    -1,    -1,    -1,    -1,   270,   271,    -1,   273,    -1,
     275,    -1,   277,   278,    -1,    -1,    -1,    -1,   283,    -1,
      -1,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,    -1,   302,   303,   304,
      -1,   306,   307,   308,   309,    -1,   311,   312,    -1,    -1,
      -1,    -1,   317,   318,   319,   320,   321,   322,    -1,    -1,
     325,   326,    -1,   328,    -1,   330,    -1,   332,   333,   334,
     335,   336,   337,   338,   339,   340,    -1,    -1,   343,   344,
      -1,    -1,   347,   348,   349,   350,    -1,    -1,    -1,    -1,
     355,    -1,    -1,    -1,    -1,   360,   361,   362,    -1,   364,
     365,   366,   367,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   380,   381,    -1,    -1,    -1,
      -1,   386,   387,   388,    -1,   390,   391,   392,   393,   394,
     395,   396,    -1,    -1,    -1,    -1,   401,   402,    -1,   404,
      -1,   406,   407,   408,   409,   410,    -1,   412,   413,   414,
      -1,    -1,   417,    -1,    -1,    -1,   421,   422,   423,   424,
     425,    -1,    -1,   428,   429,   430,   431,   432,    -1,   434,
      -1,    -1,   437,    -1,   439,   440,    -1,   442,    -1,    -1,
      -1,   446,    -1,    -1,   449,   450,   451,    -1,    -1,    -1,
     455,   456,   457,   458,   459,   460,    -1,   462,   463,    -1,
     465,    -1,    -1,    -1,    -1,   470,   471,   472,    -1,    -1,
      -1,    -1,   477,    -1,    -1,    -1,   481,    -1,    -1,   484,
      -1,    -1,   487,    -1,   489,    -1,   491,    -1,   493,   494,
      -1,    -1,    -1,    -1,    -1,    -1,   501,   502,    -1,   504,
      -1,    -1,   507,    -1,    -1,   510,    -1,   512,    -1,    -1,
      -1,   516,    -1,   518,   519,   520,   521,   522,   523,    -1,
      -1,   526,   527,   528,   529,    -1,   531,   532,    -1,   534,
      -1,   536,   537,   538,   539,    -1,    -1,   542,   543,    -1,
     545,   546,   547,   548,    -1,    -1,    -1,    -1,    -1,   554,
     555,   556,    -1,    -1,    -1,    -1,   561,   562,   563,    -1,
     565,   566,    -1,   568,   569,    -1,    -1,    -1,    -1,    -1,
     575,    -1,    -1,   578,    -1,    -1,    -1,   582,   583,   584,
      -1,    -1,    -1,    -1,    -1,    -1,   591,    -1,    -1,   594,
      -1,    -1,    -1,   598,   599,   600,   601,   602,   603,    -1,
      -1,   606,    -1,    -1,    -1,   610,    -1,    -1,   613,    -1,
     615,    -1,     5,   618,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    -1,    -1,
      23,    24,    25,    26,    27,    28,    -1,    -1,    31,    -1,
      -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    -1,    -1,    -1,    -1,    -1,    52,
      53,    -1,    55,    56,    -1,    58,    -1,    -1,    -1,    -1,
      -1,    64,    65,    66,    67,    68,    69,    70,    -1,    72,
      73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    81,    -1,
      83,    -1,    85,    86,    87,    88,    -1,    90,    91,    -1,
      93,    94,    95,    -1,    97,    -1,    99,    -1,    -1,   102,
      -1,    -1,   105,    -1,    -1,    -1,   109,    -1,    -1,    -1,
     113,   114,   115,    -1,    -1,   118,    -1,    -1,    -1,    -1,
     123,    -1,    -1,    -1,    -1,    -1,   129,    -1,   131,    -1,
      -1,    -1,   135,    -1,   137,   138,   139,   140,    -1,    -1,
      -1,    -1,    -1,    -1,   147,   148,   149,    -1,    -1,    -1,
     153,    -1,    -1,   156,    -1,   158,   159,   160,    -1,    -1,
     163,   164,    -1,   166,   167,   168,   169,    -1,    -1,    -1,
      -1,   174,   175,   176,    -1,    -1,   179,   180,   181,   182,
     183,   184,    -1,    -1,    -1,    -1,    -1,    -1,   191,    -1,
     193,    -1,   195,    -1,   197,   198,   199,   200,   201,   202,
      -1,   204,    -1,    -1,    -1,    -1,   209,   210,    -1,    -1,
      -1,    -1,    -1,   216,    -1,    -1,    -1,   220,   221,   222,
     223,   224,    -1,   226,   227,   228,    -1,   230,    -1,   232,
      -1,    -1,    -1,    -1,   237,    -1,    -1,    -1,    -1,   242,
      -1,   244,   245,    -1,   247,   248,   249,    -1,    -1,   252,
      -1,    -1,    -1,   256,   257,    -1,    -1,   260,   261,    -1,
     263,   264,    -1,    -1,    -1,    -1,    -1,   270,   271,    -1,
     273,    -1,   275,    -1,   277,   278,    -1,    -1,    -1,    -1,
     283,    -1,    -1,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,    -1,   302,
     303,   304,    -1,   306,   307,   308,   309,    -1,   311,   312,
      -1,    -1,    -1,    -1,   317,   318,   319,   320,   321,   322,
      -1,    -1,   325,   326,    -1,   328,    -1,   330,    -1,   332,
     333,   334,   335,   336,   337,   338,   339,   340,    -1,    -1,
     343,   344,    -1,    -1,   347,   348,   349,   350,    -1,    -1,
      -1,    -1,   355,    -1,    -1,    -1,    -1,   360,   361,   362,
      -1,   364,   365,   366,   367,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   380,   381,    -1,
      -1,    -1,    -1,   386,   387,   388,    -1,   390,   391,   392,
     393,   394,   395,   396,    -1,    -1,    -1,    -1,   401,   402,
      -1,   404,    -1,   406,   407,   408,   409,   410,    -1,   412,
     413,   414,    -1,    -1,   417,    -1,    -1,    -1,   421,   422,
     423,   424,   425,    -1,    -1,   428,   429,   430,   431,   432,
      -1,   434,    -1,    -1,   437,    -1,   439,   440,    -1,   442,
      -1,    -1,    -1,   446,    -1,    -1,   449,   450,   451,    -1,
      -1,    -1,   455,   456,   457,   458,   459,   460,    -1,   462,
     463,    -1,   465,    -1,    -1,    -1,    -1,   470,   471,   472,
      -1,    -1,    -1,    -1,   477,    -1,    -1,    -1,   481,    -1,
      -1,   484,    -1,    -1,   487,    -1,   489,    -1,   491,    -1,
     493,   494,    -1,    -1,    -1,    -1,    -1,    -1,   501,   502,
      -1,   504,    -1,    -1,   507,    -1,    -1,   510,    -1,   512,
      -1,    -1,    -1,   516,    -1,   518,   519,   520,   521,   522,
     523,    -1,    -1,   526,   527,   528,   529,    -1,   531,   532,
      -1,   534,    -1,   536,   537,   538,   539,    -1,    -1,   542,
     543,    -1,   545,   546,   547,   548,    -1,    -1,    -1,    -1,
      -1,   554,   555,   556,    -1,    -1,    -1,    -1,   561,   562,
     563,    -1,   565,   566,    -1,   568,   569,    -1,    -1,    -1,
      -1,    -1,   575,    -1,    -1,   578,    -1,    -1,    -1,   582,
     583,   584,    -1,    -1,    -1,    -1,    -1,    -1,   591,    -1,
      -1,   594,    -1,    -1,    -1,   598,   599,   600,   601,   602,
     603,    -1,    -1,   606,    -1,    -1,    -1,   610,    -1,    -1,
     613,    -1,   615,    -1,     5,   618,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      -1,    -1,    23,    24,    25,    26,    27,    28,    -1,    -1,
      -1,    -1,    -1,    -1,    35,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    -1,    -1,    -1,    -1,
      -1,    52,    -1,    -1,    55,    56,    -1,    58,    -1,    -1,
      -1,    -1,    -1,    64,    65,    66,    67,    -1,    69,    70,
      -1,    72,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      81,    -1,    83,    -1,    85,    86,    87,    88,    -1,    90,
      91,    -1,    93,    94,    95,    -1,    97,    -1,    99,    -1,
      -1,   102,    -1,    -1,   105,    -1,    -1,    -1,   109,    -1,
      -1,    -1,   113,   114,   115,    -1,    -1,   118,    -1,    -1,
      -1,    -1,   123,    -1,    -1,    -1,    -1,    -1,   129,    -1,
     131,    -1,    -1,    -1,   135,    -1,   137,   138,   139,   140,
      -1,    -1,    -1,    -1,    -1,    -1,   147,   148,   149,    -1,
      -1,    -1,   153,    -1,    -1,   156,    -1,   158,   159,   160,
      -1,    -1,   163,   164,    -1,   166,   167,   168,   169,    -1,
      -1,    -1,    -1,   174,   175,   176,    -1,    -1,   179,   180,
      -1,   182,   183,   184,    -1,    -1,    -1,    -1,    -1,    -1,
     191,    -1,   193,    -1,   195,    -1,   197,   198,   199,   200,
     201,   202,    -1,   204,    -1,    -1,    -1,    -1,   209,   210,
      -1,    -1,    -1,    -1,    -1,   216,    -1,    -1,    -1,   220,
     221,   222,   223,    -1,    -1,   226,   227,   228,    -1,   230,
      -1,   232,    -1,    -1,    -1,    -1,   237,    -1,    -1,    -1,
      -1,   242,    -1,   244,   245,    -1,   247,   248,    -1,    -1,
      -1,   252,    -1,    -1,    -1,   256,   257,    -1,    -1,   260,
      -1,    -1,   263,   264,    -1,    -1,    -1,    -1,    -1,   270,
     271,    -1,   273,    -1,   275,    -1,   277,   278,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
      -1,   302,   303,   304,    -1,   306,   307,   308,   309,    -1,
     311,   312,    -1,    -1,    -1,    -1,   317,   318,   319,   320,
     321,   322,    -1,    -1,   325,   326,    -1,   328,    -1,   330,
      -1,   332,   333,   334,   335,   336,   337,   338,   339,   340,
      -1,    -1,   343,   344,    -1,    -1,   347,   348,   349,   350,
      -1,    -1,    -1,    -1,   355,    -1,    -1,    -1,    -1,   360,
     361,   362,    -1,   364,   365,   366,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   380,
     381,    -1,    -1,    -1,    -1,   386,   387,   388,    -1,   390,
     391,   392,   393,   394,   395,   396,    -1,    -1,    -1,    -1,
     401,   402,    -1,   404,    -1,   406,   407,   408,   409,   410,
      -1,   412,   413,   414,    -1,    -1,   417,    -1,    -1,    -1,
     421,   422,   423,   424,   425,    -1,    -1,   428,   429,   430,
     431,   432,    -1,   434,    -1,    -1,   437,    -1,   439,    -1,
      -1,   442,    -1,    -1,    -1,   446,    -1,    -1,   449,   450,
      -1,    -1,    -1,    -1,   455,   456,   457,   458,   459,   460,
      -1,   462,   463,    -1,   465,    -1,    -1,    -1,    -1,   470,
     471,   472,    -1,    -1,    -1,    -1,   477,    -1,    -1,    -1,
     481,    -1,    -1,   484,    -1,    -1,   487,    -1,   489,    -1,
     491,    -1,   493,   494,    -1,    -1,    -1,    -1,    -1,    -1,
     501,   502,    -1,   504,    -1,    -1,   507,    -1,    -1,   510,
      -1,   512,    -1,    -1,    -1,   516,    -1,   518,   519,   520,
     521,   522,   523,    -1,    -1,   526,   527,   528,   529,    -1,
     531,   532,    -1,   534,    -1,   536,   537,   538,   539,    -1,
      -1,   542,   543,    -1,   545,   546,   547,   548,    -1,    -1,
      -1,    -1,    -1,   554,   555,   556,    -1,    -1,    -1,    -1,
     561,   562,   563,    -1,   565,   566,    -1,   568,   569,    -1,
      -1,    -1,    -1,    -1,   575,    -1,    -1,   578,    -1,    -1,
      -1,   582,   583,   584,    -1,    -1,    -1,    -1,    -1,    -1,
     591,    -1,    -1,   594,    -1,    -1,    -1,   598,   599,   600,
     601,   602,   603,    -1,    -1,    -1,    -1,    -1,    -1,   610,
      -1,    -1,   613,    -1,   615,    -1,    -1,   618
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const yytype_uint16 yystos[] =
{
       0,    13,    15,    31,    35,    49,    50,    57,    62,    63,
      84,   103,   124,   132,   133,   134,   144,   145,   157,   171,
     187,   203,   208,   212,   236,   238,   254,   272,   276,   368,
     385,   389,   400,   411,   433,   436,   438,   441,   444,   445,
     452,   454,   461,   467,   475,   480,   482,   485,   511,   515,
     560,   572,   576,   579,   585,   614,   620,   630,   641,   644,
     645,   646,   647,   648,   650,   655,   657,   666,   696,   724,
     731,   840,   929,  1002,  1045,  1049,  1059,  1062,  1067,  1069,
    1070,  1075,  1078,  1083,  1090,  1102,  1103,  1267,  1269,  1279,
    1282,  1307,  1315,  1326,  1333,  1347,  1350,  1353,  1363,  1369,
    1373,  1378,  1379,  1429,  1456,  1462,  1464,  1471,  1473,  1501,
    1507,  1508,  1509,  1510,  1563,  1571,  1572,  1573,    11,   111,
     129,   195,   277,   405,   473,   532,  1037,  1038,  1532,  1533,
    1534,  1537,   273,   356,  1077,  1502,   541,  1420,   229,     5,
       7,     8,     9,    10,    11,    14,    18,    21,    23,    24,
      25,    26,    27,    28,    29,    31,    35,    39,    42,    43,
      44,    46,    48,    49,    52,    55,    56,    58,    59,    61,
      62,    64,    65,    66,    67,    68,    69,    70,    72,    73,
      74,    75,    76,    77,    78,    79,    81,    82,    83,    84,
      85,    86,    87,    88,    90,    91,    93,    94,    95,    96,
      97,    99,   102,   105,   109,   113,   114,   115,   118,   123,
     124,   129,   131,   135,   137,   138,   139,   140,   144,   147,
     148,   149,   153,   155,   156,   158,   159,   160,   163,   164,
     166,   167,   168,   169,   170,   171,   174,   175,   176,   179,
     180,   182,   183,   184,   187,   191,   193,   195,   197,   198,
     199,   200,   201,   202,   204,   208,   209,   210,   212,   215,
     216,   220,   221,   222,   223,   226,   227,   228,   230,   232,
     237,   238,   242,   244,   245,   247,   248,   252,   255,   256,
     257,   260,   263,   264,   270,   271,   273,   275,   277,   278,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   302,   303,   304,   306,   307,
     308,   309,   311,   312,   317,   318,   319,   320,   321,   322,
     325,   326,   328,   330,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   343,   344,   347,   348,   349,   350,   354,
     355,   360,   361,   362,   364,   365,   366,   367,   369,   379,
     380,   381,   384,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   400,   401,   402,   404,   406,
     407,   408,   409,   410,   412,   413,   414,   417,   421,   422,
     423,   424,   425,   428,   429,   430,   431,   432,   434,   435,
     437,   438,   439,   442,   444,   446,   447,   449,   450,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   465,
     466,   470,   471,   472,   473,   477,   481,   483,   484,   485,
     486,   487,   489,   490,   491,   492,   493,   494,   501,   502,
     504,   507,   510,   511,   512,   515,   516,   518,   519,   520,
     521,   522,   523,   526,   527,   528,   529,   531,   532,   534,
     536,   537,   538,   539,   542,   543,   545,   546,   547,   548,
     554,   555,   556,   560,   561,   562,   563,   565,   566,   568,
     569,   571,   572,   575,   578,   580,   582,   583,   584,   591,
     594,   598,   599,   600,   601,   602,   603,   610,   611,   613,
     614,   615,   618,   690,  1419,  1423,  1427,  1428,   302,   531,
     535,  1458,  1458,   610,  1503,   111,   194,   277,   473,   495,
     532,   538,   574,   582,   672,   673,   891,   892,   893,   980,
     981,   982,  1316,  1268,   111,   168,   195,   229,   277,   405,
     473,   532,   538,   557,   582,   599,  1278,  1423,  1077,   689,
     638,  1416,  1418,  1423,   656,  1280,   394,   492,  1374,   114,
     229,   615,  1384,  1458,  1077,   630,   841,  1423,  1370,   461,
     582,  1458,  1077,  1283,  1364,   498,   721,   725,   726,  1423,
     689,  1503,  1423,  1106,  1108,  1109,  1430,  1334,   725,   664,
     665,  1420,    12,   485,   554,    12,   485,   535,  1328,   394,
     492,  1463,  1308,  1423,    31,    84,   155,   400,   422,   454,
     511,  1565,   467,   630,  1104,     0,   157,   642,   400,   175,
     388,  1351,  1416,  1423,   161,  1013,  1423,   161,   690,   205,
     690,   265,  1420,  1423,  1425,   786,   787,   790,   813,  1423,
     535,   225,   366,  1039,  1040,  1041,   168,  1008,  1532,  1458,
    1503,  1084,   697,   638,   664,  1060,  1071,    17,  1504,   224,
     894,   205,  1425,   788,   813,   689,   375,  1529,  1533,  1534,
    1535,  1536,  1537,   535,   892,   229,   229,   229,   225,   284,
     414,  1324,  1325,     7,    21,    28,    34,    36,    37,    38,
      40,    53,    54,    59,    60,    69,    72,    74,    75,    76,
      77,    78,    79,    96,   100,   101,   106,   107,   110,   111,
     116,   117,   118,   123,   125,   128,   172,   177,   178,   185,
     199,   201,   206,   213,   220,   224,   236,   239,   257,   262,
     270,   281,   305,   310,   321,   325,   327,   331,   332,   333,
     334,   335,   342,   351,   352,   353,   357,   358,   362,   383,
     390,   395,   396,   398,   412,   440,   441,   453,   459,   465,
     513,   514,   520,   524,   525,   530,   541,   545,   546,   547,
     548,   558,   559,   560,   564,   567,   582,   587,   588,   589,
     590,   595,   597,   603,   618,   623,   624,   629,   630,   633,
     634,   637,   638,  1124,  1125,  1126,  1127,  1131,  1138,  1139,
    1140,  1141,  1142,  1143,  1151,  1155,  1166,  1403,  1405,  1407,
    1408,  1412,  1414,  1419,  1423,   224,  1277,  1277,  1277,  1423,
     205,  1277,  1277,   813,  1277,   689,  1277,  1458,   651,  1354,
      12,    13,   103,   132,   145,   168,   171,   182,   203,   229,
     236,   276,   406,   410,   426,   434,   442,   467,   480,   481,
     526,   557,   579,   581,  1474,  1476,  1478,  1479,  1423,   367,
      68,   418,   638,  1425,   130,   214,   284,  1285,  1423,  1420,
     209,   491,  1375,   240,  1380,  1457,  1458,   930,  1119,    47,
     842,   192,    34,   302,  1339,  1371,  1423,   689,  1079,  1458,
     130,   284,  1286,  1314,   302,   413,   485,  1365,  1366,   591,
     722,   475,   727,    12,   410,  1472,  1476,   552,  1504,  1107,
      12,   141,   214,   500,   501,   502,   503,   504,   505,   517,
    1113,  1114,  1115,  1528,    59,    60,   128,   202,   273,   338,
     390,   472,   554,   637,   954,  1423,  1431,  1443,  1447,  1448,
      12,    24,    35,    59,    67,    72,    99,   101,   103,   112,
     159,   164,   167,   193,   195,   202,   204,   228,   229,   230,
     251,   273,   302,   367,   393,   404,   405,   408,   409,   429,
     472,   485,   516,   534,   535,   583,   602,   954,   979,  1335,
    1339,  1340,  1342,  1350,  1444,   727,   511,   515,   486,   664,
     418,   607,  1050,  1051,  1052,   486,   664,  1327,  1423,  1420,
    1458,  1314,    36,   213,   541,  1404,  1421,  1564,  1564,  1564,
    1564,  1564,  1108,  1104,   631,   636,  1423,  1349,  1348,   319,
     539,   566,  1004,   580,   107,  1425,  1426,  1006,   792,   814,
    1423,  1005,   369,     6,    57,   145,   352,   417,   419,   815,
    1416,  1041,   690,   506,  1538,  1539,  1007,  1068,  1085,  1086,
    1087,  1088,  1416,   630,   698,  1423,   552,  1273,  1274,  1416,
    1273,    56,   354,   354,   433,  1505,   351,   352,  1130,  1423,
     791,   814,   189,     6,  1426,  1489,  1492,   441,    10,   405,
     557,   676,  1119,  1531,  1539,  1547,  1551,  1552,  1558,   676,
    1119,  1530,  1539,  1547,  1552,  1558,  1532,  1537,   894,  1423,
    1423,  1423,   192,  1317,  1321,  1322,  1423,  1324,   630,   630,
     630,  1138,   630,   630,   630,  1124,  1169,   630,   630,   630,
     630,   630,   630,   630,   630,   630,   630,   630,   630,   630,
     630,   630,  1123,  1123,   630,  1122,   630,   630,   630,   567,
     630,  1403,   630,   630,   630,   630,   630,   630,   630,   630,
     630,   630,   630,  1124,   630,   630,   630,   630,  1167,  1168,
    1412,  1423,   630,   630,   630,   630,   630,   630,   630,   630,
     630,  1124,  1122,   630,   630,   630,   630,   630,   630,   630,
     630,   630,   630,   630,   630,   630,   630,   630,   630,  1122,
     630,  1403,   630,   630,   630,  1403,   630,   630,    36,   213,
     541,   630,  1123,  1122,  1122,   630,   630,   630,   630,   630,
    1138,  1138,  1138,  1124,  1523,  1524,  1423,  1156,  1423,    16,
      17,   372,   375,   616,  1128,  1129,   161,   162,   196,   207,
     246,   258,   285,   345,  1132,    32,   142,   243,   266,   331,
     427,   478,   479,   493,   621,   622,   623,   624,   625,   626,
     627,   628,  1130,  1138,    71,   374,   632,  1421,   630,   638,
     172,  1423,   690,  1423,   363,   814,   690,  1425,   824,  1340,
     690,  1426,  1488,  1272,  1277,   586,   652,    34,    67,   135,
     159,   163,   197,   216,   230,   278,   302,   404,   413,   428,
     446,   485,   487,   512,   534,   583,  1355,  1359,  1360,  1458,
     404,  1477,   456,   456,   532,   538,   582,   599,   370,  1481,
     531,   363,  1483,    66,   485,  1480,   112,   599,  1482,   363,
     632,    19,   161,  1219,  1220,  1465,  1423,   225,  1036,   492,
      90,   413,  1376,    49,    88,   284,  1386,  1416,  1459,  1460,
    1076,   631,  1124,   268,   271,   415,   843,   845,   637,   649,
    1420,   278,  1080,  1426,  1081,  1082,  1416,  1063,   240,  1274,
    1287,  1288,    49,  1367,   632,  1421,    55,    65,    81,    93,
      94,    95,   109,   320,   337,   463,   519,   537,   728,   730,
    1477,   363,   363,   461,  1506,  1505,   573,  1511,  1512,   625,
    1117,  1118,  1119,  1115,   475,   638,    34,   128,   161,   476,
     955,   956,  1298,  1425,   190,  1298,  1433,   637,  1425,    34,
     128,   958,   959,  1425,   638,  1434,  1432,  1298,   486,   167,
     266,   605,  1346,   630,   111,   168,   195,   405,   535,   557,
     599,  1346,    12,   903,  1425,   267,  1238,  1240,   192,   243,
    1341,  1343,    70,   512,   190,   512,   531,    70,   512,    12,
      42,    97,   102,   245,   318,   381,   494,   528,  1329,  1330,
    1331,   664,   216,   512,   665,   512,  1238,  1346,  1343,   278,
     158,    73,   407,   531,   556,   190,   512,   594,  1053,  1054,
    1053,  1053,  1053,   365,   612,    91,   632,  1053,  1053,  1274,
    1036,   632,   364,  1567,   527,  1568,   250,   449,  1566,   631,
    1512,  1514,  1516,  1517,   157,   643,  1102,  1352,  1404,  1423,
     128,   889,   890,   900,   901,   963,   114,  1123,   637,   691,
       6,   793,   691,   630,   113,   810,   810,   810,     4,  1003,
    1009,   466,   599,  1539,  1273,   243,   632,   389,  1096,  1098,
    1099,   699,   700,  1124,   658,   175,   414,   632,  1061,    58,
     175,   179,   190,   317,   414,  1072,  1073,  1074,    56,   433,
     172,   671,   793,   114,   810,   222,   632,  1119,  1119,  1119,
     168,   195,   195,  1539,  1416,   983,   984,   983,   983,  1275,
    1276,  1416,  1417,  1423,   632,  1319,   638,  1323,  1124,  1124,
      12,   141,  1161,  1221,  1161,  1161,  1161,   604,  1171,  1124,
    1124,  1166,  1166,  1124,  1124,  1124,  1136,  1137,  1124,  1124,
    1124,  1124,  1124,  1124,   141,  1161,  1221,   631,   125,   185,
     213,   281,   358,   564,   631,  1247,  1250,  1251,   631,  1124,
    1124,  1124,  1124,  1412,  1523,   119,   120,   121,   122,   123,
     217,   218,   219,   220,   321,   323,   324,   325,   332,   412,
     464,   465,   603,   617,   618,  1216,  1217,  1166,   115,   118,
     545,   548,  1218,   141,  1158,  1124,  1124,  1124,  1124,  1216,
    1166,  1124,  1166,  1168,     9,   632,   638,   141,  1161,  1124,
    1124,   141,  1161,  1124,  1124,  1166,  1166,  1166,  1124,  1124,
    1124,  1166,  1127,  1124,  1124,  1124,  1124,  1124,  1124,  1161,
    1161,  1124,  1124,   141,  1161,  1124,  1217,  1217,  1124,    45,
     259,   553,  1124,  1124,   631,  1413,  1414,  1423,  1161,  1161,
    1124,  1124,   631,   632,   631,   467,   630,  1520,  1521,  1124,
     637,  1157,  1425,   638,  1124,  1124,  1124,  1126,   178,   357,
     559,   575,  1130,    12,    18,  1126,  1133,  1127,  1127,   630,
    1138,  1127,  1127,  1127,  1127,   266,  1127,  1127,   239,  1127,
     239,  1127,  1127,  1127,  1127,  1127,    32,   243,   266,   427,
    1425,  1138,  1124,  1144,  1423,   638,  1416,   824,   355,   601,
     825,   826,   159,   632,  1273,  1270,   637,   653,   654,   278,
     278,   278,   278,    49,   278,   664,   278,   632,  1356,   531,
     630,  1493,  1426,  1493,  1493,  1493,   195,   405,   535,  1475,
    1479,  1423,   183,   348,  1423,  1466,  1467,  1287,  1420,   582,
    1124,  1377,  1091,   273,  1385,  1220,   632,  1273,  1120,    73,
     630,   849,   850,   849,   850,   388,   852,   210,   253,  1425,
      30,   552,  1372,   632,   552,   632,   552,  1273,  1288,  1284,
     664,  1366,   632,   161,   632,  1426,   195,   405,  1475,  1423,
      12,   141,  1519,   632,  1110,  1124,  1410,  1423,  1423,    71,
     961,  1124,  1426,   362,   390,   541,  1454,   247,   418,  1449,
    1450,  1451,  1452,   202,   273,   472,  1445,  1298,  1423,   554,
    1435,  1446,  1448,   632,  1437,    12,    34,   128,   363,  1124,
    1455,   512,   243,  1344,  1420,  1124,   625,   894,   690,   690,
     690,  1416,   690,  1416,   278,   336,   512,  1338,  1338,   281,
     358,   457,   564,  1241,  1242,  1405,  1423,  1346,  1423,   690,
    1346,  1426,  1341,   690,  1346,   244,   529,   180,   190,  1332,
     632,   167,   512,  1341,  1416,  1343,  1341,  1341,  1124,  1346,
    1346,  1048,   432,   507,  1055,  1056,  1047,  1046,   489,  1052,
     467,   630,   634,  1172,  1173,  1174,  1175,  1176,  1185,  1186,
    1200,  1404,   392,  1569,   373,  1234,  1240,  1518,   890,    71,
     954,   137,  1425,    82,    96,   255,   329,   354,   416,   506,
     693,   695,   423,   568,   811,   812,   232,   807,   808,   809,
     816,   824,   826,   111,   215,   379,   390,   397,   490,   582,
     674,   675,  1420,    25,   309,   801,   802,   803,   816,   817,
     818,   824,   826,   794,   795,   801,     6,    13,    15,    26,
      27,    57,    62,    63,    69,    82,    90,   100,   114,   131,
     138,   139,   145,   153,   159,   188,   227,   229,   237,   252,
     308,   326,   330,   368,   373,   380,   382,   389,   390,   421,
     435,   436,   437,   438,   458,   516,   532,   536,   555,   560,
     573,   837,   896,   898,   900,   901,  1014,  1018,  1020,  1023,
    1029,  1030,  1031,  1230,  1419,   363,   684,  1010,   129,   242,
    1416,   128,  1089,  1423,  1087,  1416,   839,  1098,   229,   253,
     977,  1100,   631,   632,   226,   286,   287,   288,   289,   290,
     291,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     303,   304,   430,   431,   659,   660,   663,  1274,   580,  1073,
     888,   889,    82,   349,   424,   569,   804,   805,   806,   816,
     820,   821,   822,   823,   824,   826,   611,   585,   789,    47,
     598,   607,  1490,  1492,   195,   690,   690,   894,   690,  1423,
     667,   562,   586,   991,   363,   363,   363,   632,  1320,  1318,
     638,  1323,  1322,   192,   625,  1423,   632,   631,  1161,   631,
    1162,   631,   631,   631,  1124,   151,   604,  1170,    19,   631,
     586,   631,   631,   631,   632,   632,   631,   632,   632,   632,
     632,   631,   632,   586,   632,  1152,   631,   625,   631,   632,
     632,   631,   631,   631,   631,   192,   631,   632,  1154,   631,
     632,   632,   632,   624,   631,   632,   631,   631,   630,  1412,
    1423,  1161,   631,   631,   631,  1161,   631,   632,   631,   631,
     631,   631,   631,   631,   632,   631,   243,   631,   632,   632,
     632,   632,   631,   631,   631,   632,   192,   632,  1161,   631,
     631,   632,   632,   632,   631,   192,  1124,   192,  1124,   192,
    1124,   192,   631,   632,   631,   631,   631,   631,   632,   631,
    1166,  1190,  1191,  1192,   467,   630,  1105,  1515,  1516,   573,
    1525,   635,  1445,   476,  1423,   178,   357,   559,   575,   630,
      17,  1124,  1523,   166,  1226,  1127,  1124,  1124,  1127,   630,
    1138,  1127,  1119,  1148,  1149,  1150,   630,   638,  1423,  1271,
     825,  1298,  1299,  1426,    51,   448,  1042,  1273,  1425,   632,
     664,  1360,  1273,  1361,  1423,  1494,  1495,   552,   625,  1416,
    1423,  1487,  1487,  1487,   161,   183,   196,   207,   256,   258,
     285,   348,   402,  1468,  1470,   605,  1222,  1281,  1426,  1092,
    1093,  1094,  1095,  1416,   231,   284,   418,   612,  1461,  1460,
     630,  1119,  1247,   523,   853,   844,   630,  1124,  1420,  1426,
    1426,  1082,  1416,   175,   414,   584,  1064,  1065,  1066,   467,
     475,   590,   591,   630,   884,  1289,  1292,    12,  1368,   730,
     118,   545,   548,   729,  1155,  1407,  1412,   203,   192,  1487,
    1487,  1487,  1513,  1118,   192,   240,  1111,  1112,  1233,  1234,
    1262,  1120,  1120,   638,   128,   960,   962,  1425,  1298,   630,
     630,   264,   365,   612,   632,   632,   638,   638,   638,  1448,
    1124,  1449,  1436,  1298,  1438,  1439,  1420,   192,  1345,   631,
    1423,   170,   457,   361,   632,  1346,   413,  1238,  1331,  1344,
    1346,  1341,  1416,  1346,  1346,   578,  1057,   632,  1057,  1199,
    1423,   104,   233,   250,   262,   341,   453,   517,  1184,   475,
     632,  1416,  1199,   632,   190,  1570,    47,  1238,  1299,  1299,
     339,  1420,   506,   506,   506,   506,   506,   466,  1420,  1420,
    1299,   632,   809,  1420,  1420,  1420,  1420,   125,   185,   213,
     281,   358,   564,  1246,  1420,  1420,   631,   632,  1299,  1299,
     632,   803,   796,   797,   816,   817,   818,    80,    92,   389,
     912,   919,   920,   975,   977,   981,   982,  1035,  1035,   389,
    1299,  1299,  1035,  1299,   389,   389,  1299,  1299,   552,   137,
    1299,   251,   532,   189,   389,   403,   977,  1035,   251,  1299,
     532,   137,  1299,  1299,  1299,  1299,  1035,   389,    47,  1299,
    1299,   839,  1299,   389,   387,    19,   161,   552,  1044,   389,
     389,  1299,   140,   318,  1423,  1299,  1299,   389,  1299,   896,
     632,   836,   837,  1018,   630,   638,   911,   921,  1415,  1423,
    1298,    86,   462,   436,  1011,  1540,  1097,   630,  1124,   161,
     161,   161,   161,   161,   161,   161,   161,   161,   161,   161,
     161,   161,   161,   161,   161,   161,   161,   161,   161,   632,
    1299,  1299,  1299,  1299,   632,   806,  1425,   277,   176,   798,
     799,   800,   816,   817,   818,   819,   822,   823,   824,   826,
     390,   541,  1425,  1423,  1559,     8,    30,   784,   690,   630,
     450,   266,   630,   828,   895,   897,   898,    46,   210,   460,
     996,   996,  1416,  1416,  1416,  1276,  1423,   586,  1222,  1423,
    1173,   638,  1323,   239,  1124,   631,  1124,   544,  1124,  1124,
     155,    34,    60,   115,   118,   126,   143,   241,   343,   483,
     548,   577,  1163,   955,  1137,  1124,  1136,  1166,  1124,  1124,
    1124,   955,  1163,  1166,   631,   239,   239,  1124,  1124,  1166,
    1124,  1124,  1124,  1124,  1124,  1127,   631,   631,  1124,  1124,
    1124,  1124,  1124,  1124,  1166,   239,  1124,  1124,  1124,   631,
    1124,  1124,  1124,  1124,   192,  1124,   192,  1124,   192,  1124,
    1124,  1124,   631,  1526,  1527,  1528,  1191,  1105,   631,  1519,
    1425,  1124,  1523,  1126,   631,   632,   631,  1138,  1216,  1216,
      17,  1124,  1523,  1226,  1124,   631,   632,  1165,  1166,  1423,
     902,  1425,  1042,   654,  1357,   631,   632,  1489,   638,   638,
     552,   552,   552,  1469,  1223,  1239,  1240,  1289,   632,  1096,
    1098,   541,  1422,   612,   273,    88,   846,   847,   848,  1423,
     858,  1127,    47,   630,   860,   850,   846,   552,  1065,   885,
    1290,   630,  1295,  1300,  1295,   631,   884,  1291,  1409,  1410,
    1413,  1423,  1293,   161,   370,  1488,   192,   192,   192,  1103,
     146,  1173,  1263,   190,   276,  1116,  1262,  1239,  1112,    19,
    1121,  1420,  1423,   625,  1423,  1454,   541,   541,   418,   439,
     470,  1453,  1451,  1450,  1298,  1437,  1455,   632,  1441,  1443,
    1447,   125,   185,   281,   358,   564,  1248,  1336,   164,   602,
    1242,  1243,   170,  1242,  1242,   358,  1345,  1222,  1341,   663,
    1058,  1056,  1187,  1194,  1199,  1172,   250,   250,   376,  1201,
     250,   262,   453,  1201,  1185,  1172,  1310,  1311,  1413,  1174,
    1220,  1196,  1197,  1246,   322,  1235,   962,   956,   114,   114,
     129,   242,   221,   827,  1247,   809,   675,   827,   827,   803,
     632,   797,   999,  1415,  1077,    63,   189,   403,   574,   918,
     976,   999,   977,   978,   978,  1415,  1077,  1248,  1246,  1415,
    1246,    12,  1019,  1027,  1028,  1423,  1077,  1420,  1420,   954,
    1299,  1246,   253,  1027,   253,  1415,  1415,   902,  1299,   183,
     256,   354,   905,  1246,  1248,  1248,  1415,  1077,  1231,  1232,
    1413,   128,  1246,   128,  1246,  1252,   838,  1420,  1077,  1416,
    1077,  1077,    85,    87,   128,   149,   184,   381,   425,   904,
    1246,  1252,  1019,   899,     6,   145,  1031,   908,   909,   910,
     911,   912,  1423,     8,   183,  1043,   426,   917,   918,   969,
     922,   638,   128,   213,   281,   358,   564,  1249,  1250,  1420,
    1423,   352,   401,    23,   169,   678,   552,   138,   153,   680,
     630,  1541,   630,   403,  1212,  1213,  1214,  1423,   630,  1246,
    1420,  1420,  1248,  1420,  1246,  1420,  1420,  1420,  1420,  1420,
    1420,  1420,  1246,  1246,  1420,  1408,  1420,  1246,   660,  1420,
    1247,   827,   827,   806,   369,   205,  1299,   632,   800,   541,
      19,   586,  1491,   450,   630,   132,   236,   579,   785,   677,
    1553,   126,   241,   420,   518,   907,  1416,   266,   389,   829,
     835,   836,   908,   835,   632,   897,   668,   669,   670,   638,
    1173,  1233,  1323,  1222,  1124,   631,  1124,   544,   630,   946,
     947,   947,   947,   630,   941,   942,   946,  1164,   947,   241,
     947,   241,   631,   631,   631,    19,  1134,   631,   631,    19,
     631,   631,   631,  1153,  1124,  1124,   631,   631,  1160,  1234,
     632,   632,   631,   632,   631,   243,  1145,  1146,   631,   631,
     631,   631,   632,   631,   631,  1124,   631,   190,   631,   631,
     632,   631,   632,   632,   631,  1124,   631,  1124,   631,  1124,
     631,   631,   631,  1117,  1528,   631,  1522,   638,  1000,   631,
    1166,  1126,   631,   632,   631,  1120,  1150,   631,   607,  1358,
    1495,   607,  1498,   625,   625,  1489,  1489,  1489,   630,  1124,
     363,  1305,  1094,  1416,  1098,   225,  1101,  1381,   631,   632,
    1120,   845,   389,   861,   862,   631,  1426,  1113,  1296,  1297,
    1413,  1301,   632,   630,  1292,   631,   631,   632,   638,  1511,
     729,   192,  1488,  1488,  1488,  1222,  1222,   147,   377,  1258,
    1259,  1264,   579,   243,  1420,  1423,   638,   631,   631,    83,
     565,   418,  1455,  1440,  1442,  1238,  1243,  1337,  1346,   632,
     573,   631,  1515,  1195,   635,   250,  1185,  1201,  1201,   250,
     363,   363,   586,   632,  1309,  1298,  1210,  1211,  1113,  1124,
    1236,  1411,   797,  1021,   630,   253,   253,   978,   999,   984,
     999,   999,   145,   475,  1019,  1032,  1016,   632,  1247,   956,
    1420,   999,  1042,  1420,  1033,  1019,   632,    20,   133,  1237,
     842,  1019,  1024,  1019,   630,   631,   632,  1423,  1416,    33,
      34,    39,    41,    43,    44,    60,   115,   118,   126,   143,
     160,   184,   186,   199,   200,   241,   270,   279,   280,   282,
     314,   315,   316,   333,   334,   335,   340,   343,   359,   360,
     395,   396,   420,   471,   475,   488,   542,   545,   548,   549,
     550,   551,   592,   593,   618,   923,   931,   934,   935,   936,
     937,   938,   939,   940,  1423,   401,  1124,  1124,   363,   684,
     690,   363,    82,   685,  1423,  1542,    19,  1019,   631,   632,
     661,   662,  1246,   630,  1423,   827,   800,  1420,   907,  1560,
     363,   363,   701,   702,   704,  1423,   492,  1416,   884,   631,
     225,   441,   832,  1387,   897,   630,   630,   630,  1423,  1222,
     267,  1244,  1216,  1124,   125,   281,   358,   564,    21,    34,
      48,   571,   954,   964,   965,   966,   358,   630,   942,   948,
     115,   118,   126,   143,   186,   241,   340,   343,   420,   548,
     577,   935,   936,  1135,  1163,   631,  1216,  1216,   469,  1159,
    1124,  1124,  1166,    43,   341,   631,   607,  1147,  1124,  1216,
    1124,  1124,  1124,  1124,   631,   631,   631,  1193,  1520,  1423,
     631,  1166,  1121,   418,   203,   443,  1496,  1496,  1496,   128,
    1124,  1303,  1304,   148,  1101,   260,  1387,   848,   631,   210,
     253,   863,   631,   632,  1117,   632,  1298,  1302,  1303,  1300,
    1294,  1292,  1409,  1423,  1488,  1239,   205,  1227,  1422,  1422,
     637,  1260,  1261,  1425,   477,   625,  1441,  1446,  1238,   663,
    1519,  1220,  1175,  1172,  1185,   250,   250,  1172,  1185,  1178,
    1177,  1179,  1311,  1222,  1304,  1208,  1209,  1117,   632,  1237,
     388,   630,  1022,  1124,   999,   984,   630,   983,   983,   128,
     128,   921,  1072,  1028,   961,   923,  1015,  1232,  1025,  1027,
    1017,  1361,   910,   630,   970,   946,   946,   947,   947,   941,
     399,   932,   941,   941,   966,    60,   592,   935,   937,   966,
     966,    60,   593,   593,   596,   941,   933,   947,   947,   947,
     966,   946,   947,    26,    71,    82,   128,   198,   357,   363,
     403,   471,   574,   924,   949,   950,   951,   968,  1130,  1419,
     596,   946,   966,    34,   946,   967,   946,   946,   947,   948,
     638,  1216,   485,  1420,   144,  1012,   631,   632,  1543,  1544,
     631,  1213,   631,   632,   674,   492,   234,   243,   378,   705,
     706,   707,   708,  1119,   462,   631,   632,   703,  1420,   631,
     631,   830,    19,   887,   997,   998,  1423,   997,   997,   457,
    1242,   631,   631,   631,   631,   631,    34,    21,   571,   954,
      34,   955,   632,   358,   947,   941,    60,   947,   241,   966,
     631,   631,   631,  1404,   631,   631,   632,   631,   328,   255,
     413,   631,   631,   631,   631,   631,   631,   906,  1112,  1239,
    1515,   631,   276,   370,    64,   248,   350,   508,   521,   613,
    1485,  1486,   607,  1497,  1497,  1497,   631,   632,  1306,   240,
     630,   851,   630,   864,  1423,   862,   886,  1297,  1304,   631,
    1514,    47,   211,  1224,  1265,  1425,   632,   328,  1188,   363,
    1181,  1185,  1185,   363,  1183,  1124,  1124,   630,  1233,   188,
     225,   585,  1203,  1204,  1207,  1198,  1411,  1247,   861,   631,
     630,   630,   997,   630,   630,   118,   545,   548,   623,   624,
    1406,  1407,  1043,  1034,  1077,  1026,  1064,   631,   971,  1423,
     305,   972,   483,   577,   619,   943,   944,   945,   630,   943,
     943,   966,   596,   943,   630,   966,   943,   960,  1420,   353,
     953,  1406,    14,   579,   128,   253,    19,   951,   253,   357,
    1298,   966,   967,   966,   967,   943,   943,  1423,   679,   686,
     687,  1423,   467,   630,  1545,   662,   631,  1420,   631,   632,
     703,  1548,   678,  1554,   704,   931,   952,   831,   895,   630,
     884,   631,   632,  1237,   630,   631,   631,   170,   457,   955,
     967,   358,  1124,   328,   174,  1116,  1116,    17,  1362,   541,
     541,   541,    17,  1484,   203,   306,   307,   311,   312,  1499,
    1500,  1304,   253,   535,  1119,   854,   856,   857,  1423,   590,
     865,   906,  1228,  1411,  1225,  1233,   954,   957,  1261,  1520,
    1180,   586,  1182,   586,  1215,  1423,  1244,   977,   977,  1204,
     906,  1237,   631,   997,   997,   631,   997,   997,  1408,  1408,
    1043,   240,   631,   632,   193,   386,   484,   363,   973,   945,
    1001,  1404,  1001,  1123,   353,   591,   630,   128,  1249,  1420,
    1423,   510,   681,    53,    68,   181,   224,   249,   261,   367,
     451,   688,   735,   737,   738,   739,   741,   742,   743,   744,
     745,   746,   748,   756,   757,   760,   771,   774,   776,   777,
    1419,  1424,  1428,  1106,  1104,   607,  1546,  1561,   707,  1423,
    1416,   683,   684,   450,   961,  1514,   835,   884,   833,    82,
     252,   985,   988,   991,   992,   993,  1419,   998,   358,   607,
     986,   990,   992,   995,   987,   989,   992,   994,   170,   631,
     631,   138,  1485,   370,  1246,  1246,  1246,   358,   623,  1245,
    1500,   579,  1416,   858,   522,   859,   631,   632,   243,   263,
      82,    90,   114,   229,   308,   326,   349,   532,   881,   882,
     883,  1340,   608,   609,   632,  1229,  1237,  1124,  1239,   956,
    1266,  1189,  1124,   630,  1124,   630,   631,   632,   190,  1202,
    1202,   631,   631,   913,   631,   631,   630,  1423,   132,   579,
     631,   632,   631,  1123,   930,  1124,   156,   682,   758,   761,
    1423,   192,   348,   749,   736,  1424,  1424,  1423,   740,   645,
     283,   440,   606,   780,    31,   778,   639,   631,    52,    63,
     273,   692,   952,   190,   680,  1555,   832,   631,  1511,  1420,
    1299,   993,  1298,  1237,   631,   384,   995,   994,    61,   281,
     358,  1312,  1313,  1413,  1382,  1120,  1247,   855,   857,   867,
     543,  1299,  1299,   137,   137,  1299,  1299,  1299,  1299,   630,
     876,   883,   159,  1411,   405,  1253,    73,  1388,  1515,  1215,
    1215,  1423,   205,   250,   373,  1206,  1205,   969,   916,   985,
     914,   915,   861,    51,   354,   448,   475,   974,   974,   966,
    1404,   966,   631,  1124,  1124,   604,   763,   767,   192,  1423,
     751,   752,  1124,   710,   734,   735,   737,   739,   741,   743,
     744,   745,   746,   748,   756,   771,   774,   776,   710,   781,
     779,   772,   775,  1514,    63,   370,    63,   136,   693,   694,
    1130,  1562,  1119,   685,   952,   834,  1246,   128,  1249,  1420,
    1423,  1419,   632,  1298,   957,   631,   859,   630,   869,   871,
     866,  1420,  1420,  1299,  1299,  1249,  1249,  1247,  1425,   523,
     877,   878,  1299,  1237,  1423,   154,   165,   371,   540,  1389,
    1390,   269,  1391,   631,   631,    47,    47,   630,   630,   985,
     986,   987,   631,     5,   128,   357,   363,   363,   391,   600,
     925,   759,   768,   151,   767,   770,   240,   155,  1124,   155,
     734,   636,   578,  1124,   711,   780,   778,   370,   370,   136,
     734,  1549,   144,  1556,  1514,  1313,  1304,  1383,   630,   870,
     871,   872,   313,   868,   871,  1420,  1420,   879,   631,   632,
     902,  1254,    47,    47,   154,    47,  1390,   509,   540,  1392,
    1393,  1212,  1214,   579,   132,    82,   574,   926,   927,   928,
     604,   762,   764,  1124,   710,   155,   747,   224,   544,   283,
     636,   783,   144,   127,   709,   712,   773,  1424,   773,   150,
     686,   692,   457,  1394,   631,   632,   313,   874,   875,  1127,
     880,  1425,   878,   630,  1404,  1404,    47,  1404,    47,    47,
    1393,   631,   631,   974,   974,  1420,   253,   928,   765,   764,
     770,   769,    53,   750,  1423,   753,  1124,   782,    98,   173,
     717,   732,  1423,   155,   734,   636,   459,  1557,   222,  1388,
     871,   632,   873,   881,  1119,  1255,  1256,  1257,  1404,  1404,
    1404,  1124,   155,   544,   632,   710,   155,   710,   208,   632,
     713,    89,   108,   636,  1550,   734,    47,  1391,   875,   631,
    1124,   631,   632,   766,    53,   710,  1423,   754,   440,   155,
     190,  1423,   952,   190,   190,   734,  1404,   225,  1395,  1120,
    1257,   544,   151,   152,   755,   606,   714,   128,   733,   720,
     721,  1246,   715,   716,   358,   630,  1397,   710,   710,   751,
     497,   499,   718,   719,   720,   723,  1130,  1423,  1124,  1102,
     269,   457,  1396,   631,   637,  1398,  1399,  1413,   475,  1400,
     632,   734,   191,  1425,   631,   632,  1401,  1402,  1413,   719,
    1399,   632,  1298,  1402,  1119,  1304,  1120
};

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		(-2)
#define YYEOF		0

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrorlab


/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */

#define YYFAIL		goto yyerrlab

#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yytoken = YYTRANSLATE (yychar);				\
      YYPOPSTACK (1);						\
      goto yybackup;						\
    }								\
  else								\
    {								\
      yyerror (YY_("syntax error: cannot back up")); \
      YYERROR;							\
    }								\
while (YYID (0))


#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#define YYRHSLOC(Rhs, K) ((Rhs)[K])
#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)				\
    do									\
      if (YYID (N))                                                    \
	{								\
	  (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;	\
	  (Current).first_column = YYRHSLOC (Rhs, 1).first_column;	\
	  (Current).last_line    = YYRHSLOC (Rhs, N).last_line;		\
	  (Current).last_column  = YYRHSLOC (Rhs, N).last_column;	\
	}								\
      else								\
	{								\
	  (Current).first_line   = (Current).last_line   =		\
	    YYRHSLOC (Rhs, 0).last_line;				\
	  (Current).first_column = (Current).last_column =		\
	    YYRHSLOC (Rhs, 0).last_column;				\
	}								\
    while (YYID (0))
#endif


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if YYLTYPE_IS_TRIVIAL
#  define YY_LOCATION_PRINT(File, Loc)			\
     fprintf (File, "%d.%d-%d.%d",			\
	      (Loc).first_line, (Loc).first_column,	\
	      (Loc).last_line,  (Loc).last_column)
# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#ifdef YYLEX_PARAM
# define YYLEX yylex (&yylval, YYLEX_PARAM)
#else
# define YYLEX yylex (&yylval)
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (YYID (0))

# define YY_SYMBOL_PRINT(Title, Type, Value, Location)			  \
do {									  \
  if (yydebug)								  \
    {									  \
      YYFPRINTF (stderr, "%s ", Title);					  \
      yy_symbol_print (stderr,						  \
		  Type, Value); \
      YYFPRINTF (stderr, "\n");						  \
    }									  \
} while (YYID (0))


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)
#else
static void
yy_symbol_value_print (yyoutput, yytype, yyvaluep)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
#endif
{
  if (!yyvaluep)
    return;
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# else
  YYUSE (yyoutput);
# endif
  switch (yytype)
    {
      default:
	break;
    }
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)
#else
static void
yy_symbol_print (yyoutput, yytype, yyvaluep)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
#endif
{
  if (yytype < YYNTOKENS)
    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);

  yy_symbol_value_print (yyoutput, yytype, yyvaluep);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
#else
static void
yy_stack_print (yybottom, yytop)
    yytype_int16 *yybottom;
    yytype_int16 *yytop;
#endif
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)				\
do {								\
  if (yydebug)							\
    yy_stack_print ((Bottom), (Top));				\
} while (YYID (0))


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_reduce_print (YYSTYPE *yyvsp, int yyrule)
#else
static void
yy_reduce_print (yyvsp, yyrule)
    YYSTYPE *yyvsp;
    int yyrule;
#endif
{
  int yynrhs = yyr2[yyrule];
  int yyi;
  unsigned long int yylno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
	     yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
		       &(yyvsp[(yyi + 1) - (yynrhs)])
		       		       );
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug)				\
    yy_reduce_print (yyvsp, Rule); \
} while (YYID (0))

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif



#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static YYSIZE_T
yystrlen (const char *yystr)
#else
static YYSIZE_T
yystrlen (yystr)
    const char *yystr;
#endif
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static char *
yystpcpy (char *yydest, const char *yysrc)
#else
static char *
yystpcpy (yydest, yysrc)
    char *yydest;
    const char *yysrc;
#endif
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
	switch (*++yyp)
	  {
	  case '\'':
	  case ',':
	    goto do_not_strip_quotes;

	  case '\\':
	    if (*++yyp != '\\')
	      goto do_not_strip_quotes;
	    /* Fall through.  */
	  default:
	    if (yyres)
	      yyres[yyn] = *yyp;
	    yyn++;
	    break;

	  case '"':
	    if (yyres)
	      yyres[yyn] = '\0';
	    return yyn;
	  }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into YYRESULT an error message about the unexpected token
   YYCHAR while in state YYSTATE.  Return the number of bytes copied,
   including the terminating null byte.  If YYRESULT is null, do not
   copy anything; just return the number of bytes that would be
   copied.  As a special case, return 0 if an ordinary "syntax error"
   message will do.  Return YYSIZE_MAXIMUM if overflow occurs during
   size calculation.  */
static YYSIZE_T
yysyntax_error (char *yyresult, int yystate, int yychar)
{
  int yyn = yypact[yystate];

  if (! (YYPACT_NINF < yyn && yyn <= YYLAST))
    return 0;
  else
    {
      int yytype = YYTRANSLATE (yychar);
      YYSIZE_T yysize0 = yytnamerr (0, yytname[yytype]);
      YYSIZE_T yysize = yysize0;
      YYSIZE_T yysize1;
      int yysize_overflow = 0;
      enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
      char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
      int yyx;

# if 0
      /* This is so xgettext sees the translatable formats that are
	 constructed on the fly.  */
      YY_("syntax error, unexpected %s");
      YY_("syntax error, unexpected %s, expecting %s");
      YY_("syntax error, unexpected %s, expecting %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s");
# endif
      char *yyfmt;
      char const *yyf;
      static char const yyunexpected[] = "syntax error, unexpected %s";
      static char const yyexpecting[] = ", expecting %s";
      static char const yyor[] = " or %s";
      char yyformat[sizeof yyunexpected
		    + sizeof yyexpecting - 1
		    + ((YYERROR_VERBOSE_ARGS_MAXIMUM - 2)
		       * (sizeof yyor - 1))];
      char const *yyprefix = yyexpecting;

      /* Start YYX at -YYN if negative to avoid negative indexes in
	 YYCHECK.  */
      int yyxbegin = yyn < 0 ? -yyn : 0;

      /* Stay within bounds of both yycheck and yytname.  */
      int yychecklim = YYLAST - yyn + 1;
      int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
      int yycount = 1;

      yyarg[0] = yytname[yytype];
      yyfmt = yystpcpy (yyformat, yyunexpected);

      for (yyx = yyxbegin; yyx < yyxend; ++yyx)
	if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
	  {
	    if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
	      {
		yycount = 1;
		yysize = yysize0;
		yyformat[sizeof yyunexpected - 1] = '\0';
		break;
	      }
	    yyarg[yycount++] = yytname[yyx];
	    yysize1 = yysize + yytnamerr (0, yytname[yyx]);
	    yysize_overflow |= (yysize1 < yysize);
	    yysize = yysize1;
	    yyfmt = yystpcpy (yyfmt, yyprefix);
	    yyprefix = yyor;
	  }

      yyf = YY_(yyformat);
      yysize1 = yysize + yystrlen (yyf);
      yysize_overflow |= (yysize1 < yysize);
      yysize = yysize1;

      if (yysize_overflow)
	return YYSIZE_MAXIMUM;

      if (yyresult)
	{
	  /* Avoid sprintf, as that infringes on the user's name space.
	     Don't have undefined behavior even if the translation
	     produced a string with the wrong number of "%s"s.  */
	  char *yyp = yyresult;
	  int yyi = 0;
	  while ((*yyp = *yyf) != '\0')
	    {
	      if (*yyp == '%' && yyf[1] == 's' && yyi < yycount)
		{
		  yyp += yytnamerr (yyp, yyarg[yyi++]);
		  yyf += 2;
		}
	      else
		{
		  yyp++;
		  yyf++;
		}
	    }
	}
      return yysize;
    }
}
#endif /* YYERROR_VERBOSE */


/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep)
#else
static void
yydestruct (yymsg, yytype, yyvaluep)
    const char *yymsg;
    int yytype;
    YYSTYPE *yyvaluep;
#endif
{
  YYUSE (yyvaluep);

  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  switch (yytype)
    {

      default:
	break;
    }
}

/* Prevent warnings from -Wmissing-prototypes.  */
#ifdef YYPARSE_PARAM
#if defined __STDC__ || defined __cplusplus
int yyparse (void *YYPARSE_PARAM);
#else
int yyparse ();
#endif
#else /* ! YYPARSE_PARAM */
#if defined __STDC__ || defined __cplusplus
int yyparse (void);
#else
int yyparse ();
#endif
#endif /* ! YYPARSE_PARAM */





/*-------------------------.
| yyparse or yypush_parse.  |
`-------------------------*/

#ifdef YYPARSE_PARAM
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void *YYPARSE_PARAM)
#else
int
yyparse (YYPARSE_PARAM)
    void *YYPARSE_PARAM;
#endif
#else /* ! YYPARSE_PARAM */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void)
#else
int
yyparse ()

#endif
#endif
{
/* The lookahead symbol.  */
int yychar;

/* The semantic value of the lookahead symbol.  */
YYSTYPE yylval;

    /* Number of syntax errors so far.  */
    int yynerrs;

    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       `yyss': related to states.
       `yyvs': related to semantic values.

       Refer to the stacks thru separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    YYSIZE_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yytoken = 0;
  yyss = yyssa;
  yyvs = yyvsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */
  yyssp = yyss;
  yyvsp = yyvs;

  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack.  Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	yytype_int16 *yyss1 = yyss;

	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
	yyoverflow (YY_("memory exhausted"),
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yystacksize);

	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
	goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
	yystacksize = YYMAXDEPTH;

      {
	yytype_int16 *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyexhaustedlab;
	YYSTACK_RELOCATE (yyss_alloc, yyss);
	YYSTACK_RELOCATE (yyvs_alloc, yyvs);
#  undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yyn == YYPACT_NINF)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yyn == 0 || yyn == YYTABLE_NINF)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token.  */
  yychar = YYEMPTY;

  yystate = yyn;
  *++yyvsp = yylval;

  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];


  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 2:

/* Line 1455 of yacc.c  */
#line 1822 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            if (!thd->bootstrap &&
              (!(thd->lex->select_lex.options & OPTION_FOUND_COMMENT)))
            {
              my_message(ER_EMPTY_QUERY, ER(ER_EMPTY_QUERY), MYF(0));
              MYSQL_YYABORT;
            }
            thd->lex->sql_command= SQLCOM_EMPTY_QUERY;
            YYLIP->found_semicolon= NULL;
          }
    break;

  case 3:

/* Line 1455 of yacc.c  */
#line 1834 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex_input_stream *lip = YYLIP;

            if ((YYTHD->client_capabilities & CLIENT_MULTI_QUERIES) &&
                lip->multi_statements &&
                ! lip->eof())
            {
              /*
                We found a well formed query, and multi queries are allowed:
                - force the parser to stop after the ';'
                - mark the start of the next query for the next invocation
                  of the parser.
              */
              lip->next_state= MY_LEX_END;
              lip->found_semicolon= lip->get_ptr();
            }
            else
            {
              /* Single query, terminated. */
              lip->found_semicolon= NULL;
            }
          }
    break;

  case 5:

/* Line 1455 of yacc.c  */
#line 1859 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* Single query, not terminated. */
            YYLIP->found_semicolon= NULL;
          }
    break;

  case 63:

/* Line 1455 of yacc.c  */
#line 1934 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_DEALLOCATE_PREPARE;
            lex->prepared_stmt_name= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 66:

/* Line 1455 of yacc.c  */
#line 1949 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_PREPARE;
            lex->prepared_stmt_name= (yyvsp[(2) - (4)].lex_str);
          }
    break;

  case 67:

/* Line 1455 of yacc.c  */
#line 1959 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->prepared_stmt_code= (yyvsp[(1) - (1)].lex_str);
            lex->prepared_stmt_code_is_varref= FALSE;
          }
    break;

  case 68:

/* Line 1455 of yacc.c  */
#line 1966 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->prepared_stmt_code= (yyvsp[(2) - (2)].lex_str);
            lex->prepared_stmt_code_is_varref= TRUE;
          }
    break;

  case 69:

/* Line 1455 of yacc.c  */
#line 1976 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_EXECUTE;
            lex->prepared_stmt_name= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 70:

/* Line 1455 of yacc.c  */
#line 1983 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 75:

/* Line 1455 of yacc.c  */
#line 1998 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            LEX_STRING *lexstr= (LEX_STRING*)sql_memdup(&(yyvsp[(2) - (2)].lex_str), sizeof(LEX_STRING));
            if (!lexstr || lex->prepared_stmt_params.push_back(lexstr))
              MYSQL_YYABORT;
          }
    break;

  case 76:

/* Line 1455 of yacc.c  */
#line 2010 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HELP");
              MYSQL_YYABORT;
            }
          }
    break;

  case 77:

/* Line 1455 of yacc.c  */
#line 2018 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_HELP;
            lex->help_arg= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 78:

/* Line 1455 of yacc.c  */
#line 2029 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_CHANGE_MASTER;
          }
    break;

  case 79:

/* Line 1455 of yacc.c  */
#line 2033 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 82:

/* Line 1455 of yacc.c  */
#line 2043 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.host = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 83:

/* Line 1455 of yacc.c  */
#line 2047 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.user = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 84:

/* Line 1455 of yacc.c  */
#line 2051 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.password = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 85:

/* Line 1455 of yacc.c  */
#line 2055 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.port = (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 86:

/* Line 1455 of yacc.c  */
#line 2059 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.connect_retry = (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 87:

/* Line 1455 of yacc.c  */
#line 2063 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.ssl= (yyvsp[(3) - (3)].ulong_num) ? 
              LEX_MASTER_INFO::LEX_MI_ENABLE : LEX_MASTER_INFO::LEX_MI_DISABLE;
          }
    break;

  case 88:

/* Line 1455 of yacc.c  */
#line 2068 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_ca= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 89:

/* Line 1455 of yacc.c  */
#line 2072 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_capath= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 90:

/* Line 1455 of yacc.c  */
#line 2076 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_cert= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 91:

/* Line 1455 of yacc.c  */
#line 2080 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_cipher= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 92:

/* Line 1455 of yacc.c  */
#line 2084 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_key= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 93:

/* Line 1455 of yacc.c  */
#line 2088 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_verify_server_cert= (yyvsp[(3) - (3)].ulong_num) ?
              LEX_MASTER_INFO::LEX_MI_ENABLE : LEX_MASTER_INFO::LEX_MI_DISABLE;
          }
    break;

  case 94:

/* Line 1455 of yacc.c  */
#line 2093 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_crl= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 95:

/* Line 1455 of yacc.c  */
#line 2097 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_crlpath= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 96:

/* Line 1455 of yacc.c  */
#line 2102 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.heartbeat_period= (float) (yyvsp[(3) - (3)].item_num)->val_real();
            if (Lex->mi.heartbeat_period > SLAVE_MAX_HEARTBEAT_PERIOD ||
                Lex->mi.heartbeat_period < 0.0)
            {
               const char format[]= "%d";
               char buf[4*sizeof(SLAVE_MAX_HEARTBEAT_PERIOD) + sizeof(format)];
               sprintf(buf, format, SLAVE_MAX_HEARTBEAT_PERIOD);
               my_error(ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE, MYF(0), buf);
               MYSQL_YYABORT;
            }
            if (Lex->mi.heartbeat_period > slave_net_timeout)
            {
              push_warning_printf(YYTHD, MYSQL_ERROR::WARN_LEVEL_WARN,
                                  ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MAX,
                                  ER(ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MAX));
            }
            if (Lex->mi.heartbeat_period < 0.001)
            {
              if (Lex->mi.heartbeat_period != 0.0)
              {
                push_warning_printf(YYTHD, MYSQL_ERROR::WARN_LEVEL_WARN,
                                    ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MIN,
                                    ER(ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MIN));
                Lex->mi.heartbeat_period= 0.0;
              }
              Lex->mi.heartbeat_opt=  LEX_MASTER_INFO::LEX_MI_DISABLE;
            }
            Lex->mi.heartbeat_opt=  LEX_MASTER_INFO::LEX_MI_ENABLE;
          }
    break;

  case 97:

/* Line 1455 of yacc.c  */
#line 2133 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.repl_ignore_server_ids_opt= LEX_MASTER_INFO::LEX_MI_ENABLE;
           }
    break;

  case 102:

/* Line 1455 of yacc.c  */
#line 2148 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            insert_dynamic(&Lex->mi.repl_ignore_server_ids, (uchar*) &((yyvsp[(1) - (1)].ulong_num)));
          }
    break;

  case 103:

/* Line 1455 of yacc.c  */
#line 2154 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.log_file_name = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 104:

/* Line 1455 of yacc.c  */
#line 2158 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.pos = (yyvsp[(3) - (3)].ulonglong_number);
            /* 
               If the user specified a value < BIN_LOG_HEADER_SIZE, adjust it
               instead of causing subsequent errors. 
               We need to do it in this file, because only there we know that 
               MASTER_LOG_POS has been explicitely specified. On the contrary
               in change_master() (sql_repl.cc) we cannot distinguish between 0
               (MASTER_LOG_POS explicitely specified as 0) and 0 (unspecified),
               whereas we want to distinguish (specified 0 means "read the binlog
               from 0" (4 in fact), unspecified means "don't change the position
               (keep the preceding value)").
            */
            Lex->mi.pos = max(BIN_LOG_HEADER_SIZE, Lex->mi.pos);
          }
    break;

  case 105:

/* Line 1455 of yacc.c  */
#line 2174 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.relay_log_name = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 106:

/* Line 1455 of yacc.c  */
#line 2178 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.relay_log_pos = (yyvsp[(3) - (3)].ulong_num);
            /* Adjust if < BIN_LOG_HEADER_SIZE (same comment as Lex->mi.pos) */
            Lex->mi.relay_log_pos = max(BIN_LOG_HEADER_SIZE, Lex->mi.relay_log_pos);
          }
    break;

  case 107:

/* Line 1455 of yacc.c  */
#line 2187 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->mi.connection_name= thd->variables.default_master_connection;
          }
    break;

  case 109:

/* Line 1455 of yacc.c  */
#line 2197 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
           Lex->mi.connection_name= (yyvsp[(1) - (1)].lex_str);
#ifdef HAVE_REPLICATION
           if (check_master_connection_name(&(yyvsp[(1) - (1)].lex_str)))
           {
              my_error(ER_WRONG_ARGUMENTS, MYF(0), "MASTER_CONNECTION_NAME");
              MYSQL_YYABORT;
           }
#endif
         }
    break;

  case 110:

/* Line 1455 of yacc.c  */
#line 2212 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_CREATE_TABLE;
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(5) - (5)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_WRITE, MDL_EXCLUSIVE))
              MYSQL_YYABORT;
            /*
              For CREATE TABLE, an non-existing table is not an error.
              Instruct open_tables() to just take an MDL lock if the
              table does not exist.
            */
            lex->query_tables->open_strategy= TABLE_LIST::OPEN_IF_EXISTS;
            lex->alter_info.reset();
            lex->col_list.empty();
            lex->change=NullS;
            bzero((char*) &lex->create_info,sizeof(lex->create_info));
            lex->create_info.options=(yyvsp[(2) - (5)].num) | (yyvsp[(4) - (5)].num);
            lex->create_info.default_table_charset= NULL;
            lex->name.str= 0;
            lex->name.length= 0;
            lex->create_last_non_select_table= lex->last_table();
          }
    break;

  case 111:

/* Line 1455 of yacc.c  */
#line 2237 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= YYTHD->lex;
            lex->current_select= &lex->select_lex; 
            if ((lex->create_info.used_fields & HA_CREATE_USED_ENGINE) &&
                !lex->create_info.db_type)
            {
              lex->create_info.db_type= ha_default_handlerton(YYTHD);
              push_warning_printf(YYTHD, MYSQL_ERROR::WARN_LEVEL_WARN,
                                  ER_WARN_USING_OTHER_HANDLER,
                                  ER(ER_WARN_USING_OTHER_HANDLER),
                                  hton_name(lex->create_info.db_type)->str,
                                  (yyvsp[(5) - (7)].table)->table.str);
            }
            create_table_set_open_action_and_adjust_tables(lex);
          }
    break;

  case 112:

/* Line 1455 of yacc.c  */
#line 2253 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_create_index_prepare(Lex, (yyvsp[(7) - (7)].table)))
              MYSQL_YYABORT;
          }
    break;

  case 113:

/* Line 1455 of yacc.c  */
#line 2258 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_create_index(Lex, (yyvsp[(2) - (12)].key_type), (yyvsp[(4) - (12)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 114:

/* Line 1455 of yacc.c  */
#line 2264 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_create_index_prepare(Lex, (yyvsp[(7) - (7)].table)))
              MYSQL_YYABORT;
          }
    break;

  case 115:

/* Line 1455 of yacc.c  */
#line 2269 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_create_index(Lex, (yyvsp[(2) - (12)].key_type), (yyvsp[(4) - (12)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 116:

/* Line 1455 of yacc.c  */
#line 2275 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_create_index_prepare(Lex, (yyvsp[(7) - (7)].table)))
              MYSQL_YYABORT;
          }
    break;

  case 117:

/* Line 1455 of yacc.c  */
#line 2280 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_create_index(Lex, (yyvsp[(2) - (12)].key_type), (yyvsp[(4) - (12)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 118:

/* Line 1455 of yacc.c  */
#line 2285 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.default_table_charset= NULL;
            Lex->create_info.used_fields= 0;
          }
    break;

  case 119:

/* Line 1455 of yacc.c  */
#line 2290 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_CREATE_DB;
            lex->name= (yyvsp[(4) - (6)].lex_str);
            lex->create_info.options=(yyvsp[(3) - (6)].num);
          }
    break;

  case 120:

/* Line 1455 of yacc.c  */
#line 2297 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_view_mode= VIEW_CREATE_NEW;
            Lex->create_view_algorithm= DTYPE_ALGORITHM_UNDEFINED;
            Lex->create_view_suid= TRUE;
          }
    break;

  case 121:

/* Line 1455 of yacc.c  */
#line 2303 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 122:

/* Line 1455 of yacc.c  */
#line 2305 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_CREATE_USER;
          }
    break;

  case 123:

/* Line 1455 of yacc.c  */
#line 2309 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->alter_tablespace_info->ts_cmd_type= CREATE_LOGFILE_GROUP;
          }
    break;

  case 124:

/* Line 1455 of yacc.c  */
#line 2313 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->alter_tablespace_info->ts_cmd_type= CREATE_TABLESPACE;
          }
    break;

  case 125:

/* Line 1455 of yacc.c  */
#line 2317 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_CREATE_SERVER;
          }
    break;

  case 126:

/* Line 1455 of yacc.c  */
#line 2328 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->server_options.server_name= (yyvsp[(2) - (10)].lex_str).str;
            Lex->server_options.server_name_length= (yyvsp[(2) - (10)].lex_str).length;
            Lex->server_options.scheme= (yyvsp[(6) - (10)].lex_str).str;
          }
    break;

  case 129:

/* Line 1455 of yacc.c  */
#line 2342 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->server_options.username= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 130:

/* Line 1455 of yacc.c  */
#line 2346 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->server_options.host= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 131:

/* Line 1455 of yacc.c  */
#line 2350 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->server_options.db= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 132:

/* Line 1455 of yacc.c  */
#line 2354 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->server_options.owner= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 133:

/* Line 1455 of yacc.c  */
#line 2358 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->server_options.password= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 134:

/* Line 1455 of yacc.c  */
#line 2362 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->server_options.socket= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 135:

/* Line 1455 of yacc.c  */
#line 2366 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->server_options.port= (yyvsp[(2) - (2)].ulong_num);
          }
    break;

  case 136:

/* Line 1455 of yacc.c  */
#line 2373 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex=Lex;

            lex->stmt_definition_begin= (yyvsp[(1) - (4)].simple_string);
            lex->create_info.options= (yyvsp[(3) - (4)].num);
            if (!(lex->event_parse_data= Event_parse_data::new_instance(thd)))
              MYSQL_YYABORT;
            lex->event_parse_data->identifier= (yyvsp[(4) - (4)].spname);
            lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_DROP;

            lex->sql_command= SQLCOM_CREATE_EVENT;
            /* We need that for disallowing subqueries */
          }
    break;

  case 137:

/* Line 1455 of yacc.c  */
#line 2393 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              sql_command is set here because some rules in ev_sql_stmt
              can overwrite it
            */
            Lex->sql_command= SQLCOM_CREATE_EVENT;
          }
    break;

  case 138:

/* Line 1455 of yacc.c  */
#line 2404 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_expression= (yyvsp[(2) - (3)].item);
            Lex->event_parse_data->interval= (yyvsp[(3) - (3)].interval);
          }
    break;

  case 140:

/* Line 1455 of yacc.c  */
#line 2411 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_execute_at= (yyvsp[(2) - (2)].item);
          }
    break;

  case 141:

/* Line 1455 of yacc.c  */
#line 2417 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 142:

/* Line 1455 of yacc.c  */
#line 2419 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::ENABLED;
            Lex->event_parse_data->status_changed= true;
            (yyval.num)= 1;
          }
    break;

  case 143:

/* Line 1455 of yacc.c  */
#line 2425 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::SLAVESIDE_DISABLED;
            Lex->event_parse_data->status_changed= true; 
            (yyval.num)= 1;
          }
    break;

  case 144:

/* Line 1455 of yacc.c  */
#line 2431 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::DISABLED;
            Lex->event_parse_data->status_changed= true;
            (yyval.num)= 1;
          }
    break;

  case 145:

/* Line 1455 of yacc.c  */
#line 2440 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_func_now_local(0);
            if (item == NULL)
              MYSQL_YYABORT;
            Lex->event_parse_data->item_starts= item;
          }
    break;

  case 146:

/* Line 1455 of yacc.c  */
#line 2447 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_starts= (yyvsp[(2) - (2)].item);
          }
    break;

  case 148:

/* Line 1455 of yacc.c  */
#line 2455 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_ends= (yyvsp[(2) - (2)].item);
          }
    break;

  case 149:

/* Line 1455 of yacc.c  */
#line 2461 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 151:

/* Line 1455 of yacc.c  */
#line 2467 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_PRESERVE;
            (yyval.num)= 1;
          }
    break;

  case 152:

/* Line 1455 of yacc.c  */
#line 2473 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_DROP;
            (yyval.num)= 1;
          }
    break;

  case 153:

/* Line 1455 of yacc.c  */
#line 2481 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 154:

/* Line 1455 of yacc.c  */
#line 2483 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->comment= Lex->event_parse_data->comment= (yyvsp[(2) - (2)].lex_str);
            (yyval.num)= 1;
          }
    break;

  case 155:

/* Line 1455 of yacc.c  */
#line 2490 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            /*
              This stops the following :
              - CREATE EVENT ... DO CREATE EVENT ...;
              - ALTER  EVENT ... DO CREATE EVENT ...;
              - CREATE EVENT ... DO ALTER EVENT DO ....;
              - CREATE PROCEDURE ... BEGIN CREATE EVENT ... END|
              This allows:
              - CREATE EVENT ... DO DROP EVENT yyy;
              - CREATE EVENT ... DO ALTER EVENT yyy;
                (the nested ALTER EVENT can have anything but DO clause)
              - ALTER  EVENT ... DO ALTER EVENT yyy;
                (the nested ALTER EVENT can have anything but DO clause)
              - ALTER  EVENT ... DO DROP EVENT yyy;
              - CREATE PROCEDURE ... BEGIN ALTER EVENT ... END|
                (the nested ALTER EVENT can have anything but DO clause)
              - CREATE PROCEDURE ... BEGIN DROP EVENT ... END|
            */
            if (lex->sphead)
            {
              my_error(ER_EVENT_RECURSION_FORBIDDEN, MYF(0));
              MYSQL_YYABORT;
            }
              
            if (!(lex->sphead= new sp_head()))
              MYSQL_YYABORT;

            lex->sphead->reset_thd_mem_root(thd);
            lex->sphead->init(lex);
            lex->sphead->init_sp_name(thd, lex->event_parse_data->identifier);

            lex->sphead->m_type= TYPE_ENUM_PROCEDURE;

            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
            lex->sphead->m_chistics= &lex->sp_chistics;

            lex->sphead->set_body_start(thd, lip->get_cpp_ptr());
          }
    break;

  case 156:

/* Line 1455 of yacc.c  */
#line 2533 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            /* return back to the original memory root ASAP */
            lex->sphead->set_stmt_end(thd);
            lex->sphead->restore_thd_mem_root(thd);

            lex->sp_chistics.suid= SP_IS_SUID;  //always the definer!

            lex->event_parse_data->body_changed= TRUE;
          }
    break;

  case 170:

/* Line 1455 of yacc.c  */
#line 2565 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
           LEX *lex=Lex;
           lex->users_list.empty();
           lex->columns.empty();
           lex->grant= lex->grant_tot_col= 0;
           lex->all_privileges= 0;
           lex->select_lex.db= 0;
           lex->ssl_type= SSL_TYPE_NOT_SPECIFIED;
           lex->ssl_cipher= lex->x509_subject= lex->x509_issuer= 0;
           bzero((char *)&(lex->mqh),sizeof(lex->mqh));
         }
    break;

  case 171:

/* Line 1455 of yacc.c  */
#line 2580 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!(yyvsp[(1) - (3)].lex_str).str || check_db_name(&(yyvsp[(1) - (3)].lex_str)))
            {
              my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[(1) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (check_routine_name(&(yyvsp[(3) - (3)].lex_str)))
            {
              MYSQL_YYABORT;
            }
            (yyval.spname)= new sp_name((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), true);
            if ((yyval.spname) == NULL)
              MYSQL_YYABORT;
            (yyval.spname)->init_qname(YYTHD);
          }
    break;

  case 172:

/* Line 1455 of yacc.c  */
#line 2596 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            LEX_STRING db;
            if (check_routine_name(&(yyvsp[(1) - (1)].lex_str)))
            {
              MYSQL_YYABORT;
            }
            if (lex->copy_db_to(&db.str, &db.length))
              MYSQL_YYABORT;
            (yyval.spname)= new sp_name(db, (yyvsp[(1) - (1)].lex_str), false);
            if ((yyval.spname) == NULL)
              MYSQL_YYABORT;
            (yyval.spname)->init_qname(thd);
          }
    break;

  case 173:

/* Line 1455 of yacc.c  */
#line 2614 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 174:

/* Line 1455 of yacc.c  */
#line 2615 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 175:

/* Line 1455 of yacc.c  */
#line 2619 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 176:

/* Line 1455 of yacc.c  */
#line 2620 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 177:

/* Line 1455 of yacc.c  */
#line 2626 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sp_chistics.comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 178:

/* Line 1455 of yacc.c  */
#line 2628 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* Just parse it, we only have one language for now. */ }
    break;

  case 179:

/* Line 1455 of yacc.c  */
#line 2630 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_NO_SQL; }
    break;

  case 180:

/* Line 1455 of yacc.c  */
#line 2632 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_CONTAINS_SQL; }
    break;

  case 181:

/* Line 1455 of yacc.c  */
#line 2634 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_READS_SQL_DATA; }
    break;

  case 182:

/* Line 1455 of yacc.c  */
#line 2636 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_MODIFIES_SQL_DATA; }
    break;

  case 183:

/* Line 1455 of yacc.c  */
#line 2638 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 184:

/* Line 1455 of yacc.c  */
#line 2643 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { }
    break;

  case 185:

/* Line 1455 of yacc.c  */
#line 2644 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sp_chistics.detistic= TRUE; }
    break;

  case 186:

/* Line 1455 of yacc.c  */
#line 2645 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sp_chistics.detistic= FALSE; }
    break;

  case 187:

/* Line 1455 of yacc.c  */
#line 2650 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sp_chistics.suid= SP_IS_SUID;
          }
    break;

  case 188:

/* Line 1455 of yacc.c  */
#line 2654 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sp_chistics.suid= SP_IS_NOT_SUID;
          }
    break;

  case 189:

/* Line 1455 of yacc.c  */
#line 2661 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex = Lex;

            lex->sql_command= SQLCOM_CALL;
            lex->spname= (yyvsp[(2) - (2)].spname);
            lex->value_list.empty();
            sp_add_used_routine(lex, YYTHD, (yyvsp[(2) - (2)].spname), TYPE_ENUM_PROCEDURE);
          }
    break;

  case 190:

/* Line 1455 of yacc.c  */
#line 2669 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 195:

/* Line 1455 of yacc.c  */
#line 2685 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
           Lex->value_list.push_back((yyvsp[(3) - (3)].item));
          }
    break;

  case 196:

/* Line 1455 of yacc.c  */
#line 2689 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->value_list.push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 201:

/* Line 1455 of yacc.c  */
#line 2707 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->length= 0;
            lex->dec= 0;
            lex->type= 0;

            lex->default_value= 0;
            lex->on_update_value= 0;

            lex->comment= null_lex_str;
            lex->charset= NULL;

            lex->interval_list.empty();
            lex->uint_geom_type= 0;
            lex->vcol_info= 0;
          }
    break;

  case 202:

/* Line 1455 of yacc.c  */
#line 2728 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable(&(yyvsp[(1) - (3)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_PARAM, MYF(0), (yyvsp[(1) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            sp_variable_t *spvar= spc->push_variable(&(yyvsp[(1) - (3)].lex_str),
                                                     (enum enum_field_types)(yyvsp[(3) - (3)].num),
                                                     sp_param_in);

            if (lex->sphead->fill_field_definition(YYTHD, lex,
                                                   (enum enum_field_types) (yyvsp[(3) - (3)].num),
                                                   &spvar->field_def))
            {
              MYSQL_YYABORT;
            }
            spvar->field_def.field_name= spvar->name.str;
            spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;
          }
    break;

  case 207:

/* Line 1455 of yacc.c  */
#line 2765 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable(&(yyvsp[(3) - (4)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_PARAM, MYF(0), (yyvsp[(3) - (4)].lex_str).str);
              MYSQL_YYABORT;
            }
            sp_variable_t *spvar= spc->push_variable(&(yyvsp[(3) - (4)].lex_str),
                                                     (enum enum_field_types)(yyvsp[(4) - (4)].num),
                                                     (sp_param_mode_t)(yyvsp[(1) - (4)].num));

            if (lex->sphead->fill_field_definition(YYTHD, lex,
                                                   (enum enum_field_types) (yyvsp[(4) - (4)].num),
                                                   &spvar->field_def))
            {
              MYSQL_YYABORT;
            }
            spvar->field_def.field_name= spvar->name.str;
            spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;
          }
    break;

  case 208:

/* Line 1455 of yacc.c  */
#line 2790 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= sp_param_in; }
    break;

  case 209:

/* Line 1455 of yacc.c  */
#line 2791 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= sp_param_in; }
    break;

  case 210:

/* Line 1455 of yacc.c  */
#line 2792 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= sp_param_out; }
    break;

  case 211:

/* Line 1455 of yacc.c  */
#line 2793 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= sp_param_inout; }
    break;

  case 212:

/* Line 1455 of yacc.c  */
#line 2797 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 214:

/* Line 1455 of yacc.c  */
#line 2802 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 216:

/* Line 1455 of yacc.c  */
#line 2808 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
          }
    break;

  case 217:

/* Line 1455 of yacc.c  */
#line 2812 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* We check for declarations out of (standard) order this way
              because letting the grammar rules reflect it caused tricky
               shift/reduce conflicts with the wrong result. (And we get
               better error handling this way.) */
            if (((yyvsp[(2) - (3)].spblock).vars || (yyvsp[(2) - (3)].spblock).conds) && ((yyvsp[(1) - (3)].spblock).curs || (yyvsp[(1) - (3)].spblock).hndlrs))
            { /* Variable or condition following cursor or handler */
              my_message(ER_SP_VARCOND_AFTER_CURSHNDLR,
                         ER(ER_SP_VARCOND_AFTER_CURSHNDLR), MYF(0));
              MYSQL_YYABORT;
            }
            if ((yyvsp[(2) - (3)].spblock).curs && (yyvsp[(1) - (3)].spblock).hndlrs)
            { /* Cursor following handler */
              my_message(ER_SP_CURSOR_AFTER_HANDLER,
                         ER(ER_SP_CURSOR_AFTER_HANDLER), MYF(0));
              MYSQL_YYABORT;
            }
            (yyval.spblock).vars= (yyvsp[(1) - (3)].spblock).vars + (yyvsp[(2) - (3)].spblock).vars;
            (yyval.spblock).conds= (yyvsp[(1) - (3)].spblock).conds + (yyvsp[(2) - (3)].spblock).conds;
            (yyval.spblock).hndlrs= (yyvsp[(1) - (3)].spblock).hndlrs + (yyvsp[(2) - (3)].spblock).hndlrs;
            (yyval.spblock).curs= (yyvsp[(1) - (3)].spblock).curs + (yyvsp[(2) - (3)].spblock).curs;
          }
    break;

  case 218:

/* Line 1455 of yacc.c  */
#line 2838 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sphead->reset_lex(YYTHD);
            lex->spcont->declare_var_boundary((yyvsp[(2) - (2)].num));
          }
    break;

  case 219:

/* Line 1455 of yacc.c  */
#line 2846 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_pcontext *pctx= lex->spcont;
            uint num_vars= pctx->context_var_count();
            enum enum_field_types var_type= (enum enum_field_types) (yyvsp[(4) - (5)].num);
            Item *dflt_value_item= (yyvsp[(5) - (5)].item);
            
            if (!dflt_value_item)
            {
              dflt_value_item= new (thd->mem_root) Item_null();
              if (dflt_value_item == NULL)
                MYSQL_YYABORT;
              /* QQ Set to the var_type with null_value? */
            }
            
            for (uint i = num_vars-(yyvsp[(2) - (5)].num) ; i < num_vars ; i++)
            {
              uint var_idx= pctx->var_context2runtime(i);
              sp_variable_t *spvar= pctx->find_variable(var_idx);
            
              if (!spvar)
                MYSQL_YYABORT;
            
              spvar->type= var_type;
              spvar->dflt= dflt_value_item;
            
              if (lex->sphead->fill_field_definition(YYTHD, lex, var_type,
                                                     &spvar->field_def))
              {
                MYSQL_YYABORT;
              }
            
              spvar->field_def.field_name= spvar->name.str;
              spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;
            
              /* The last instruction is responsible for freeing LEX. */

              sp_instr_set *is= new sp_instr_set(lex->sphead->instructions(),
                                                 pctx,
                                                 var_idx,
                                                 dflt_value_item,
                                                 var_type,
                                                 lex,
                                                 (i == num_vars - 1));
              if (is == NULL ||
                  lex->sphead->add_instr(is))
                MYSQL_YYABORT;
            }

            pctx->declare_var_boundary(0);
            if (lex->sphead->restore_lex(YYTHD))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyvsp[(2) - (5)].num);
            (yyval.spblock).conds= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
          }
    break;

  case 220:

/* Line 1455 of yacc.c  */
#line 2903 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_cond(&(yyvsp[(2) - (5)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_COND, MYF(0), (yyvsp[(2) - (5)].lex_str).str);
              MYSQL_YYABORT;
            }
            if(YYTHD->lex->spcont->push_cond(&(yyvsp[(2) - (5)].lex_str), (yyvsp[(5) - (5)].spcondtype)))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
            (yyval.spblock).conds= 1;
          }
    break;

  case 221:

/* Line 1455 of yacc.c  */
#line 2918 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            lex->spcont= lex->spcont->push_context(LABEL_HANDLER_SCOPE);

            sp_pcontext *ctx= lex->spcont;
            sp_instr_hpush_jump *i=
              new sp_instr_hpush_jump(sp->instructions(), ctx, (yyvsp[(2) - (4)].num),
                                      ctx->current_var_count());
            if (i == NULL || sp->add_instr(i))
              MYSQL_YYABORT;

            /* For continue handlers, mark end of handler scope. */
            if ((yyvsp[(2) - (4)].num) == SP_HANDLER_CONTINUE &&
                sp->push_backpatch(i, ctx->last_label()))
              MYSQL_YYABORT;

            if (sp->push_backpatch(i, ctx->push_label(empty_c_string, 0)))
              MYSQL_YYABORT;
          }
    break;

  case 222:

/* Line 1455 of yacc.c  */
#line 2940 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_label_t *hlab= lex->spcont->pop_label(); /* After this hdlr */
            sp_instr_hreturn *i;

            if ((yyvsp[(2) - (7)].num) == SP_HANDLER_CONTINUE)
            {
              i= new sp_instr_hreturn(sp->instructions(), ctx,
                                      ctx->current_var_count());
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
            else
            {  /* EXIT or UNDO handler, just jump to the end of the block */
              i= new sp_instr_hreturn(sp->instructions(), ctx, 0);
              if (i == NULL ||
                  sp->add_instr(i) ||
                  sp->push_backpatch(i, lex->spcont->last_label())) /* Block end */
                MYSQL_YYABORT;
            }
            lex->sphead->backpatch(hlab);

            lex->spcont= ctx->pop_context();

            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).curs= 0;
            (yyval.spblock).hndlrs= (yyvsp[(6) - (7)].num);
            lex->spcont->add_handlers((yyvsp[(6) - (7)].num));
          }
    break;

  case 223:

/* Line 1455 of yacc.c  */
#line 2972 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            uint offp;
            sp_instr_cpush *i;

            if (ctx->find_cursor(&(yyvsp[(2) - (5)].lex_str), &offp, TRUE))
            {
              my_error(ER_SP_DUP_CURS, MYF(0), (yyvsp[(2) - (5)].lex_str).str);
              delete (yyvsp[(5) - (5)].lex);
              MYSQL_YYABORT;
            }
            i= new sp_instr_cpush(sp->instructions(), ctx, (yyvsp[(5) - (5)].lex),
                                  ctx->current_cursor_count());
            if (i == NULL ||
                sp->add_instr(i) ||
                ctx->push_cursor(&(yyvsp[(2) - (5)].lex_str)))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).hndlrs= 0;
            (yyval.spblock).curs= 1;
          }
    break;

  case 224:

/* Line 1455 of yacc.c  */
#line 2997 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sphead->reset_lex(YYTHD);
          }
    break;

  case 225:

/* Line 1455 of yacc.c  */
#line 3001 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            DBUG_ASSERT(lex->sql_command == SQLCOM_SELECT);

            if (lex->result)
            {
              my_message(ER_SP_BAD_CURSOR_SELECT, ER(ER_SP_BAD_CURSOR_SELECT),
                         MYF(0));
              MYSQL_YYABORT;
            }
            lex->sp_lex_in_use= TRUE;
            (yyval.lex)= lex;
            if (lex->sphead->restore_lex(YYTHD))
              MYSQL_YYABORT;
          }
    break;

  case 226:

/* Line 1455 of yacc.c  */
#line 3020 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= SP_HANDLER_EXIT; }
    break;

  case 227:

/* Line 1455 of yacc.c  */
#line 3021 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= SP_HANDLER_CONTINUE; }
    break;

  case 228:

/* Line 1455 of yacc.c  */
#line 3027 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 229:

/* Line 1455 of yacc.c  */
#line 3029 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)+= 1; }
    break;

  case 230:

/* Line 1455 of yacc.c  */
#line 3034 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont->parent_context();

            if (ctx->find_handler((yyvsp[(1) - (1)].spcondtype)))
            {
              my_message(ER_SP_DUP_HANDLER, ER(ER_SP_DUP_HANDLER), MYF(0));
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_hpush_jump *i=
                (sp_instr_hpush_jump *)sp->last_instruction();

              i->add_condition((yyvsp[(1) - (1)].spcondtype));
              ctx->push_handler((yyvsp[(1) - (1)].spcondtype));
            }
          }
    break;

  case 231:

/* Line 1455 of yacc.c  */
#line 3057 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* mysql errno */
            if ((yyvsp[(1) - (1)].ulong_num) == 0)
            {
              my_error(ER_WRONG_VALUE, MYF(0), "CONDITION", "0");
              MYSQL_YYABORT;
            }
            (yyval.spcondtype)= (sp_cond_type_t *)YYTHD->alloc(sizeof(sp_cond_type_t));
            if ((yyval.spcondtype) == NULL)
              MYSQL_YYABORT;
            (yyval.spcondtype)->type= sp_cond_type_t::number;
            (yyval.spcondtype)->mysqlerr= (yyvsp[(1) - (1)].ulong_num);
          }
    break;

  case 233:

/* Line 1455 of yacc.c  */
#line 3074 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* SQLSTATE */
            if (!sp_cond_check(&(yyvsp[(3) - (3)].lex_str)))
            {
              my_error(ER_SP_BAD_SQLSTATE, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.spcondtype)= (sp_cond_type_t *)YYTHD->alloc(sizeof(sp_cond_type_t));
            if ((yyval.spcondtype) == NULL)
              MYSQL_YYABORT;
            (yyval.spcondtype)->type= sp_cond_type_t::state;
            memcpy((yyval.spcondtype)->sqlstate, (yyvsp[(3) - (3)].lex_str).str, SQLSTATE_LENGTH);
            (yyval.spcondtype)->sqlstate[SQLSTATE_LENGTH]= '\0';
          }
    break;

  case 234:

/* Line 1455 of yacc.c  */
#line 3090 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 235:

/* Line 1455 of yacc.c  */
#line 3091 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 236:

/* Line 1455 of yacc.c  */
#line 3096 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.spcondtype)= (yyvsp[(1) - (1)].spcondtype);
          }
    break;

  case 237:

/* Line 1455 of yacc.c  */
#line 3100 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.spcondtype)= Lex->spcont->find_cond(&(yyvsp[(1) - (1)].lex_str));
            if ((yyval.spcondtype) == NULL)
            {
              my_error(ER_SP_COND_MISMATCH, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 238:

/* Line 1455 of yacc.c  */
#line 3109 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.spcondtype)= (sp_cond_type_t *)YYTHD->alloc(sizeof(sp_cond_type_t));
            if ((yyval.spcondtype) == NULL)
              MYSQL_YYABORT;
            (yyval.spcondtype)->type= sp_cond_type_t::warning;
          }
    break;

  case 239:

/* Line 1455 of yacc.c  */
#line 3116 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.spcondtype)= (sp_cond_type_t *)YYTHD->alloc(sizeof(sp_cond_type_t));
            if ((yyval.spcondtype) == NULL)
              MYSQL_YYABORT;
            (yyval.spcondtype)->type= sp_cond_type_t::notfound;
          }
    break;

  case 240:

/* Line 1455 of yacc.c  */
#line 3123 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.spcondtype)= (sp_cond_type_t *)YYTHD->alloc(sizeof(sp_cond_type_t));
            if ((yyval.spcondtype) == NULL)
              MYSQL_YYABORT;
            (yyval.spcondtype)->type= sp_cond_type_t::exception;
          }
    break;

  case 241:

/* Line 1455 of yacc.c  */
#line 3133 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Yacc_state *state= & thd->m_parser_state->m_yacc;

            lex->sql_command= SQLCOM_SIGNAL;
            lex->m_stmt= new (thd->mem_root) Signal_statement(lex, (yyvsp[(2) - (3)].spcondtype),
                                                      state->m_set_signal_info);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 242:

/* Line 1455 of yacc.c  */
#line 3148 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_cond_type_t *cond;
            if (lex->spcont == NULL)
            {
              /* SIGNAL foo cannot be used outside of stored programs */
              my_error(ER_SP_COND_MISMATCH, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            cond= lex->spcont->find_cond(&(yyvsp[(1) - (1)].lex_str));
            if (cond == NULL)
            {
              my_error(ER_SP_COND_MISMATCH, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (cond->type != sp_cond_type_t::state)
            {
              my_error(ER_SIGNAL_BAD_CONDITION_TYPE, MYF(0));
              MYSQL_YYABORT;
            }
            (yyval.spcondtype)= cond;
          }
    break;

  case 243:

/* Line 1455 of yacc.c  */
#line 3171 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.spcondtype)= (yyvsp[(1) - (1)].spcondtype); }
    break;

  case 244:

/* Line 1455 of yacc.c  */
#line 3176 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.spcondtype)= NULL; }
    break;

  case 245:

/* Line 1455 of yacc.c  */
#line 3178 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.spcondtype)= (yyvsp[(1) - (1)].spcondtype); }
    break;

  case 246:

/* Line 1455 of yacc.c  */
#line 3183 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            YYTHD->m_parser_state->m_yacc.m_set_signal_info.clear();
          }
    break;

  case 248:

/* Line 1455 of yacc.c  */
#line 3191 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Set_signal_information *info;
            info= & YYTHD->m_parser_state->m_yacc.m_set_signal_info;
            int index= (int) (yyvsp[(1) - (3)].diag_condition_item_name);
            info->clear();
            info->m_item[index]= (yyvsp[(3) - (3)].item);
          }
    break;

  case 249:

/* Line 1455 of yacc.c  */
#line 3200 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Set_signal_information *info;
            info= & YYTHD->m_parser_state->m_yacc.m_set_signal_info;
            int index= (int) (yyvsp[(3) - (5)].diag_condition_item_name);
            if (info->m_item[index] != NULL)
            {
              my_error(ER_DUP_SIGNAL_SET, MYF(0),
                       Diag_condition_item_names[index].str);
              MYSQL_YYABORT;
            }
            info->m_item[index]= (yyvsp[(5) - (5)].item);
          }
    break;

  case 250:

/* Line 1455 of yacc.c  */
#line 3219 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 251:

/* Line 1455 of yacc.c  */
#line 3221 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if ((yyvsp[(1) - (1)].item)->type() == Item::FUNC_ITEM)
            {
              Item_func *item= (Item_func*) (yyvsp[(1) - (1)].item);
              if (item->functype() == Item_func::SUSERVAR_FUNC)
              {
                /*
                  Don't allow the following syntax:
                    SIGNAL/RESIGNAL ...
                    SET <signal condition item name> = @foo := expr
                */
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
            }
            (yyval.item)= (yyvsp[(1) - (1)].item);
          }
    break;

  case 252:

/* Line 1455 of yacc.c  */
#line 3239 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 253:

/* Line 1455 of yacc.c  */
#line 3245 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CLASS_ORIGIN; }
    break;

  case 254:

/* Line 1455 of yacc.c  */
#line 3247 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_SUBCLASS_ORIGIN; }
    break;

  case 255:

/* Line 1455 of yacc.c  */
#line 3249 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CONSTRAINT_CATALOG; }
    break;

  case 256:

/* Line 1455 of yacc.c  */
#line 3251 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CONSTRAINT_SCHEMA; }
    break;

  case 257:

/* Line 1455 of yacc.c  */
#line 3253 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CONSTRAINT_NAME; }
    break;

  case 258:

/* Line 1455 of yacc.c  */
#line 3255 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CATALOG_NAME; }
    break;

  case 259:

/* Line 1455 of yacc.c  */
#line 3257 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_SCHEMA_NAME; }
    break;

  case 260:

/* Line 1455 of yacc.c  */
#line 3259 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_TABLE_NAME; }
    break;

  case 261:

/* Line 1455 of yacc.c  */
#line 3261 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_COLUMN_NAME; }
    break;

  case 262:

/* Line 1455 of yacc.c  */
#line 3263 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CURSOR_NAME; }
    break;

  case 263:

/* Line 1455 of yacc.c  */
#line 3265 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_MESSAGE_TEXT; }
    break;

  case 264:

/* Line 1455 of yacc.c  */
#line 3267 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_MYSQL_ERRNO; }
    break;

  case 265:

/* Line 1455 of yacc.c  */
#line 3272 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Yacc_state *state= & thd->m_parser_state->m_yacc;

            lex->sql_command= SQLCOM_RESIGNAL;
            lex->m_stmt= new (thd->mem_root) Resignal_statement(lex, (yyvsp[(2) - (3)].spcondtype),
                                                      state->m_set_signal_info);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 266:

/* Line 1455 of yacc.c  */
#line 3287 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* NOTE: field definition is filled in sp_decl section. */

            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable(&(yyvsp[(1) - (1)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            spc->push_variable(&(yyvsp[(1) - (1)].lex_str), (enum_field_types)0, sp_param_in);
            (yyval.num)= 1;
          }
    break;

  case 267:

/* Line 1455 of yacc.c  */
#line 3302 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* NOTE: field definition is filled in sp_decl section. */

            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable(&(yyvsp[(3) - (3)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_VAR, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            spc->push_variable(&(yyvsp[(3) - (3)].lex_str), (enum_field_types)0, sp_param_in);
            (yyval.num)= (yyvsp[(1) - (3)].num) + 1;
          }
    break;

  case 268:

/* Line 1455 of yacc.c  */
#line 3319 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item) = NULL; }
    break;

  case 269:

/* Line 1455 of yacc.c  */
#line 3320 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item); }
    break;

  case 283:

/* Line 1455 of yacc.c  */
#line 3341 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sphead->new_cont_backpatch(NULL); }
    break;

  case 284:

/* Line 1455 of yacc.c  */
#line 3343 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sphead->do_cont_backpatch(); }
    break;

  case 285:

/* Line 1455 of yacc.c  */
#line 3347 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            lex->sphead->reset_lex(thd);
            lex->sphead->m_tmp_query= lip->get_tok_start();
          }
    break;

  case 286:

/* Line 1455 of yacc.c  */
#line 3356 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_head *sp= lex->sphead;

            sp->m_flags|= sp_get_flags_for_command(lex);
            if (lex->sql_command == SQLCOM_CHANGE_DB)
            { /* "USE db" doesn't work in a procedure */
              my_error(ER_SP_BADSTATEMENT, MYF(0), "USE");
              MYSQL_YYABORT;
            }
            /*
              Don't add an instruction for SET statements, since all
              instructions for them were already added during processing
              of "set" rule.
            */
            DBUG_ASSERT(lex->sql_command != SQLCOM_SET_OPTION ||
                        lex->var_list.is_empty());
            if (lex->sql_command != SQLCOM_SET_OPTION)
            {
              sp_instr_stmt *i=new sp_instr_stmt(sp->instructions(),
                                                 lex->spcont, lex);
              if (i == NULL)
                MYSQL_YYABORT;

              /*
                Extract the query statement from the tokenizer.  The
                end is either lex->ptr, if there was no lookahead,
                lex->tok_end otherwise.
              */
              if (yychar == YYEMPTY)
                i->m_query.length= lip->get_ptr() - sp->m_tmp_query;
              else
                i->m_query.length= lip->get_tok_end() - sp->m_tmp_query;
              if (!(i->m_query.str= strmake_root(thd->mem_root,
                                                 sp->m_tmp_query,
                                                 i->m_query.length)) ||
                    sp->add_instr(i))
                MYSQL_YYABORT;
            }
            if (sp->restore_lex(thd))
              MYSQL_YYABORT;
          }
    break;

  case 287:

/* Line 1455 of yacc.c  */
#line 3404 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sphead->reset_lex(YYTHD); }
    break;

  case 288:

/* Line 1455 of yacc.c  */
#line 3406 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            if (sp->m_type != TYPE_ENUM_FUNCTION)
            {
              my_message(ER_SP_BADRETURN, ER(ER_SP_BADRETURN), MYF(0));
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_freturn *i;

              i= new sp_instr_freturn(sp->instructions(), lex->spcont, (yyvsp[(3) - (3)].item),
                                      sp->m_return_field_def.sql_type, lex);
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
              sp->m_flags|= sp_head::HAS_RETURN;
            }
            if (sp->restore_lex(YYTHD))
              MYSQL_YYABORT;
          }
    break;

  case 289:

/* Line 1455 of yacc.c  */
#line 3432 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* Unlabeled controls get a secret label. */
            LEX *lex= Lex;

            lex->spcont->push_label((char *)"", lex->sphead->instructions());
          }
    break;

  case 290:

/* Line 1455 of yacc.c  */
#line 3438 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sphead->backpatch(lex->spcont->pop_label());
          }
    break;

  case 291:

/* Line 1455 of yacc.c  */
#line 3447 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp = lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_label_t *lab= ctx->find_label((yyvsp[(2) - (2)].lex_str).str);

            if (! lab)
            {
              my_error(ER_SP_LILABEL_MISMATCH, MYF(0), "LEAVE", (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_jump *i;
              uint ip= sp->instructions();
              uint n;
              /*
                When jumping to a BEGIN-END block end, the target jump
                points to the block hpop/cpop cleanup instructions,
                so we should exclude the block context here.
                When jumping to something else (i.e., SP_LAB_ITER),
                there are no hpop/cpop at the jump destination,
                so we should include the block context here for cleanup.
              */
              bool exclusive= (lab->type == SP_LAB_BEGIN);

              n= ctx->diff_handlers(lab->ctx, exclusive);
              if (n)
              {
                sp_instr_hpop *hpop= new sp_instr_hpop(ip++, ctx, n);
                if (hpop == NULL)
                  MYSQL_YYABORT;
                sp->add_instr(hpop);
              }
              n= ctx->diff_cursors(lab->ctx, exclusive);
              if (n)
              {
                sp_instr_cpop *cpop= new sp_instr_cpop(ip++, ctx, n);
                if (cpop == NULL)
                  MYSQL_YYABORT;
                sp->add_instr(cpop);
              }
              i= new sp_instr_jump(ip, ctx);
              if (i == NULL)
                MYSQL_YYABORT;
              sp->push_backpatch(i, lab);  /* Jumping forward */
              sp->add_instr(i);
            }
          }
    break;

  case 292:

/* Line 1455 of yacc.c  */
#line 3500 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_label_t *lab= ctx->find_label((yyvsp[(2) - (2)].lex_str).str);

            if (! lab || lab->type != SP_LAB_ITER)
            {
              my_error(ER_SP_LILABEL_MISMATCH, MYF(0), "ITERATE", (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_jump *i;
              uint ip= sp->instructions();
              uint n;

              n= ctx->diff_handlers(lab->ctx, FALSE);  /* Inclusive the dest. */
              if (n)
              {
                sp_instr_hpop *hpop= new sp_instr_hpop(ip++, ctx, n);
                if (hpop == NULL ||
                    sp->add_instr(hpop))
                  MYSQL_YYABORT;
              }
              n= ctx->diff_cursors(lab->ctx, FALSE);  /* Inclusive the dest. */
              if (n)
              {
                sp_instr_cpop *cpop= new sp_instr_cpop(ip++, ctx, n);
                if (cpop == NULL ||
                    sp->add_instr(cpop))
                  MYSQL_YYABORT;
              }
              i= new sp_instr_jump(ip, ctx, lab->ip); /* Jump back */
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
          }
    break;

  case 293:

/* Line 1455 of yacc.c  */
#line 3543 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint offset;
            sp_instr_copen *i;

            if (! lex->spcont->find_cursor(&(yyvsp[(2) - (2)].lex_str), &offset))
            {
              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            i= new sp_instr_copen(sp->instructions(), lex->spcont, offset);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 294:

/* Line 1455 of yacc.c  */
#line 3563 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint offset;
            sp_instr_cfetch *i;

            if (! lex->spcont->find_cursor(&(yyvsp[(3) - (4)].lex_str), &offset))
            {
              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(3) - (4)].lex_str).str);
              MYSQL_YYABORT;
            }
            i= new sp_instr_cfetch(sp->instructions(), lex->spcont, offset);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 295:

/* Line 1455 of yacc.c  */
#line 3580 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 296:

/* Line 1455 of yacc.c  */
#line 3585 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint offset;
            sp_instr_cclose *i;

            if (! lex->spcont->find_cursor(&(yyvsp[(2) - (2)].lex_str), &offset))
            {
              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            i= new sp_instr_cclose(sp->instructions(), lex->spcont,  offset);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 300:

/* Line 1455 of yacc.c  */
#line 3611 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *spc= lex->spcont;
            sp_variable_t *spv;

            if (!spc || !(spv = spc->find_variable(&(yyvsp[(1) - (1)].lex_str))))
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              /* An SP local variable */
              sp_instr_cfetch *i= (sp_instr_cfetch *)sp->last_instruction();

              i->add_to_varlist(spv);
            }
          }
    break;

  case 301:

/* Line 1455 of yacc.c  */
#line 3631 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *spc= lex->spcont;
            sp_variable_t *spv;

            if (!spc || !(spv = spc->find_variable(&(yyvsp[(3) - (3)].lex_str))))
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              /* An SP local variable */
              sp_instr_cfetch *i= (sp_instr_cfetch *)sp->last_instruction();

              i->add_to_varlist(spv);
            }
          }
    break;

  case 302:

/* Line 1455 of yacc.c  */
#line 3653 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sphead->reset_lex(YYTHD); }
    break;

  case 303:

/* Line 1455 of yacc.c  */
#line 3655 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            uint ip= sp->instructions();
            sp_instr_jump_if_not *i = new sp_instr_jump_if_not(ip, ctx,
                                                               (yyvsp[(2) - (3)].item), lex);
            if (i == NULL ||
                sp->push_backpatch(i, ctx->push_label((char *)"", 0)) ||
                sp->add_cont_backpatch(i) ||
                sp->add_instr(i))
              MYSQL_YYABORT;
            if (sp->restore_lex(YYTHD))
              MYSQL_YYABORT;
          }
    break;

  case 304:

/* Line 1455 of yacc.c  */
#line 3671 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            sp_head *sp= Lex->sphead;
            sp_pcontext *ctx= Lex->spcont;
            uint ip= sp->instructions();
            sp_instr_jump *i = new sp_instr_jump(ip, ctx);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
            sp->backpatch(ctx->pop_label());
            sp->push_backpatch(i, ctx->push_label((char *)"", 0));
          }
    break;

  case 305:

/* Line 1455 of yacc.c  */
#line 3683 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sphead->backpatch(lex->spcont->pop_label());
          }
    break;

  case 311:

/* Line 1455 of yacc.c  */
#line 3703 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            case_stmt_action_case(lex);
            lex->sphead->reset_lex(YYTHD); /* For expr $3 */
          }
    break;

  case 312:

/* Line 1455 of yacc.c  */
#line 3709 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (case_stmt_action_expr(lex, (yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;

            /* For expr $3 */
            if (lex->sphead->restore_lex(YYTHD))
              MYSQL_YYABORT;
          }
    break;

  case 313:

/* Line 1455 of yacc.c  */
#line 3722 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            case_stmt_action_end_case(lex, true);
          }
    break;

  case 314:

/* Line 1455 of yacc.c  */
#line 3730 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            case_stmt_action_case(lex);
          }
    break;

  case 315:

/* Line 1455 of yacc.c  */
#line 3738 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            case_stmt_action_end_case(lex, false);
          }
    break;

  case 320:

/* Line 1455 of yacc.c  */
#line 3756 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sphead->reset_lex(YYTHD); /* For expr $3 */
          }
    break;

  case 321:

/* Line 1455 of yacc.c  */
#line 3760 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* Simple case: <caseval> = <whenval> */

            LEX *lex= Lex;
            if (case_stmt_action_when(lex, (yyvsp[(3) - (3)].item), true))
              MYSQL_YYABORT;
            /* For expr $3 */
            if (lex->sphead->restore_lex(YYTHD))
              MYSQL_YYABORT;
          }
    break;

  case 322:

/* Line 1455 of yacc.c  */
#line 3772 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (case_stmt_action_then(lex))
              MYSQL_YYABORT;
          }
    break;

  case 323:

/* Line 1455 of yacc.c  */
#line 3781 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sphead->reset_lex(YYTHD); /* For expr $3 */
          }
    break;

  case 324:

/* Line 1455 of yacc.c  */
#line 3785 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (case_stmt_action_when(lex, (yyvsp[(3) - (3)].item), false))
              MYSQL_YYABORT;
            /* For expr $3 */
            if (lex->sphead->restore_lex(YYTHD))
              MYSQL_YYABORT;
          }
    break;

  case 325:

/* Line 1455 of yacc.c  */
#line 3795 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (case_stmt_action_then(lex))
              MYSQL_YYABORT;
          }
    break;

  case 326:

/* Line 1455 of yacc.c  */
#line 3804 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint ip= sp->instructions();
            sp_instr_error *i= new sp_instr_error(ip, lex->spcont,
                                                  ER_SP_CASE_NOT_FOUND);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 328:

/* Line 1455 of yacc.c  */
#line 3819 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *ctx= lex->spcont;
            sp_label_t *lab= ctx->find_label((yyvsp[(1) - (2)].lex_str).str);

            if (lab)
            {
              my_error(ER_SP_LABEL_REDEFINE, MYF(0), (yyvsp[(1) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              lab= lex->spcont->push_label((yyvsp[(1) - (2)].lex_str).str,
                                           lex->sphead->instructions());
              lab->type= SP_LAB_ITER;
            }
          }
    break;

  case 329:

/* Line 1455 of yacc.c  */
#line 3837 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_label_t *lab= lex->spcont->pop_label();

            if ((yyvsp[(5) - (5)].lex_str).str)
            {
              if (my_strcasecmp(system_charset_info, (yyvsp[(5) - (5)].lex_str).str, lab->name) != 0)
              {
                my_error(ER_SP_LABEL_MISMATCH, MYF(0), (yyvsp[(5) - (5)].lex_str).str);
                MYSQL_YYABORT;
              }
            }
            lex->sphead->backpatch(lab);
          }
    break;

  case 330:

/* Line 1455 of yacc.c  */
#line 3854 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 331:

/* Line 1455 of yacc.c  */
#line 3855 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 332:

/* Line 1455 of yacc.c  */
#line 3860 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *ctx= lex->spcont;
            sp_label_t *lab= ctx->find_label((yyvsp[(1) - (2)].lex_str).str);

            if (lab)
            {
              my_error(ER_SP_LABEL_REDEFINE, MYF(0), (yyvsp[(1) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }

            lab= lex->spcont->push_label((yyvsp[(1) - (2)].lex_str).str,
                                         lex->sphead->instructions());
            lab->type= SP_LAB_BEGIN;
          }
    break;

  case 333:

/* Line 1455 of yacc.c  */
#line 3876 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_label_t *lab= lex->spcont->pop_label();

            if ((yyvsp[(5) - (5)].lex_str).str)
            {
              if (my_strcasecmp(system_charset_info, (yyvsp[(5) - (5)].lex_str).str, lab->name) != 0)
              {
                my_error(ER_SP_LABEL_MISMATCH, MYF(0), (yyvsp[(5) - (5)].lex_str).str);
                MYSQL_YYABORT;
              }
            }
          }
    break;

  case 334:

/* Line 1455 of yacc.c  */
#line 3892 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* Unlabeled blocks get a secret label. */
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label_t *lab= lex->spcont->push_label((char *)"", ip);
            lab->type= SP_LAB_BEGIN;
          }
    break;

  case 335:

/* Line 1455 of yacc.c  */
#line 3899 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->spcont->pop_label();
          }
    break;

  case 336:

/* Line 1455 of yacc.c  */
#line 3907 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* QQ This is just a dummy for grouping declarations and statements
              together. No [[NOT] ATOMIC] yet, and we need to figure out how
              make it coexist with the existing BEGIN COMMIT/ROLLBACK. */
            LEX *lex= Lex;
            lex->spcont= lex->spcont->push_context(LABEL_DEFAULT_SCOPE);
          }
    break;

  case 337:

/* Line 1455 of yacc.c  */
#line 3916 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_instr *i;

            sp->backpatch(ctx->last_label()); /* We always have a label */
            if ((yyvsp[(3) - (5)].spblock).hndlrs)
            {
              i= new sp_instr_hpop(sp->instructions(), ctx, (yyvsp[(3) - (5)].spblock).hndlrs);
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
            if ((yyvsp[(3) - (5)].spblock).curs)
            {
              i= new sp_instr_cpop(sp->instructions(), ctx, (yyvsp[(3) - (5)].spblock).curs);
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
            lex->spcont= ctx->pop_context();
          }
    break;

  case 338:

/* Line 1455 of yacc.c  */
#line 3944 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label_t *lab= lex->spcont->last_label();  /* Jumping back */
            sp_instr_jump *i = new sp_instr_jump(ip, lex->spcont, lab->ip);
            if (i == NULL ||
                lex->sphead->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 339:

/* Line 1455 of yacc.c  */
#line 3954 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sphead->reset_lex(YYTHD); }
    break;

  case 340:

/* Line 1455 of yacc.c  */
#line 3956 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint ip= sp->instructions();
            sp_instr_jump_if_not *i = new sp_instr_jump_if_not(ip, lex->spcont,
                                                               (yyvsp[(3) - (4)].item), lex);
            if (i == NULL ||
                /* Jumping forward */
                sp->push_backpatch(i, lex->spcont->last_label()) ||
                sp->new_cont_backpatch(i) ||
                sp->add_instr(i))
              MYSQL_YYABORT;
            if (sp->restore_lex(YYTHD))
              MYSQL_YYABORT;
          }
    break;

  case 341:

/* Line 1455 of yacc.c  */
#line 3972 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label_t *lab= lex->spcont->last_label();  /* Jumping back */
            sp_instr_jump *i = new sp_instr_jump(ip, lex->spcont, lab->ip);
            if (i == NULL ||
                lex->sphead->add_instr(i))
              MYSQL_YYABORT;
            lex->sphead->do_cont_backpatch();
          }
    break;

  case 342:

/* Line 1455 of yacc.c  */
#line 3983 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sphead->reset_lex(YYTHD); }
    break;

  case 343:

/* Line 1455 of yacc.c  */
#line 3985 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label_t *lab= lex->spcont->last_label();  /* Jumping back */
            sp_instr_jump_if_not *i = new sp_instr_jump_if_not(ip, lex->spcont,
                                                               (yyvsp[(5) - (7)].item), lab->ip,
                                                               lex);
            if (i == NULL ||
                lex->sphead->add_instr(i))
              MYSQL_YYABORT;
            if (lex->sphead->restore_lex(YYTHD))
              MYSQL_YYABORT;
            /* We can shortcut the cont_backpatch here */
            i->m_cont_dest= ip+1;
          }
    break;

  case 344:

/* Line 1455 of yacc.c  */
#line 4004 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->trg_chistics.action_time= TRG_ACTION_BEFORE; }
    break;

  case 345:

/* Line 1455 of yacc.c  */
#line 4006 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->trg_chistics.action_time= TRG_ACTION_AFTER; }
    break;

  case 346:

/* Line 1455 of yacc.c  */
#line 4011 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->trg_chistics.event= TRG_EVENT_INSERT; }
    break;

  case 347:

/* Line 1455 of yacc.c  */
#line 4013 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->trg_chistics.event= TRG_EVENT_UPDATE; }
    break;

  case 348:

/* Line 1455 of yacc.c  */
#line 4015 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->trg_chistics.event= TRG_EVENT_DELETE; }
    break;

  case 352:

/* Line 1455 of yacc.c  */
#line 4049 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 353:

/* Line 1455 of yacc.c  */
#line 4051 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->logfile_group_name= (yyvsp[(4) - (4)].lex_str).str;
          }
    break;

  case 354:

/* Line 1455 of yacc.c  */
#line 4061 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            Lex->alter_tablespace_info->ts_alter_tablespace_type= ALTER_TABLESPACE_ADD_FILE; 
          }
    break;

  case 355:

/* Line 1455 of yacc.c  */
#line 4067 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            Lex->alter_tablespace_info->ts_alter_tablespace_type= ALTER_TABLESPACE_DROP_FILE; 
          }
    break;

  case 360:

/* Line 1455 of yacc.c  */
#line 4090 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 407:

/* Line 1455 of yacc.c  */
#line 4184 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->data_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 408:

/* Line 1455 of yacc.c  */
#line 4192 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->undo_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 409:

/* Line 1455 of yacc.c  */
#line 4200 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->redo_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 410:

/* Line 1455 of yacc.c  */
#line 4208 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info= new st_alter_tablespace();
            if (lex->alter_tablespace_info == NULL)
              MYSQL_YYABORT;
            lex->alter_tablespace_info->tablespace_name= (yyvsp[(1) - (1)].lex_str).str;
            lex->sql_command= SQLCOM_ALTER_TABLESPACE;
          }
    break;

  case 411:

/* Line 1455 of yacc.c  */
#line 4220 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info= new st_alter_tablespace();
            if (lex->alter_tablespace_info == NULL)
              MYSQL_YYABORT;
            lex->alter_tablespace_info->logfile_group_name= (yyvsp[(1) - (1)].lex_str).str;
            lex->sql_command= SQLCOM_ALTER_TABLESPACE;
          }
    break;

  case 412:

/* Line 1455 of yacc.c  */
#line 4232 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_READ_ONLY;
          }
    break;

  case 413:

/* Line 1455 of yacc.c  */
#line 4237 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_READ_WRITE;
          }
    break;

  case 414:

/* Line 1455 of yacc.c  */
#line 4242 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_NOT_ACCESSIBLE;
          }
    break;

  case 415:

/* Line 1455 of yacc.c  */
#line 4250 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->initial_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 416:

/* Line 1455 of yacc.c  */
#line 4258 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->autoextend_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 417:

/* Line 1455 of yacc.c  */
#line 4266 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->max_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 418:

/* Line 1455 of yacc.c  */
#line 4274 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->extent_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 419:

/* Line 1455 of yacc.c  */
#line 4282 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->undo_buffer_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 420:

/* Line 1455 of yacc.c  */
#line 4290 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->redo_buffer_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 421:

/* Line 1455 of yacc.c  */
#line 4298 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->nodegroup_id != UNDEF_NODEGROUP)
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"NODEGROUP");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->nodegroup_id= (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 422:

/* Line 1455 of yacc.c  */
#line 4311 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->ts_comment != NULL)
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"COMMENT");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->ts_comment= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 423:

/* Line 1455 of yacc.c  */
#line 4324 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->storage_engine != NULL)
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),
                       "STORAGE ENGINE");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->storage_engine= (yyvsp[(4) - (4)].db_type);
          }
    break;

  case 426:

/* Line 1455 of yacc.c  */
#line 4343 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->wait_until_completed= TRUE;
          }
    break;

  case 427:

/* Line 1455 of yacc.c  */
#line 4348 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!(lex->alter_tablespace_info->wait_until_completed))
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"NO_WAIT");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->wait_until_completed= FALSE;
          }
    break;

  case 428:

/* Line 1455 of yacc.c  */
#line 4360 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ulonglong_number)= (yyvsp[(1) - (1)].ulong_num);}
    break;

  case 429:

/* Line 1455 of yacc.c  */
#line 4362 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            ulonglong number;
            uint text_shift_number= 0;
            longlong prefix_number;
            char *start_ptr= (yyvsp[(1) - (1)].lex_str).str;
            uint str_len= (yyvsp[(1) - (1)].lex_str).length;
            char *end_ptr= start_ptr + str_len;
            int error;
            prefix_number= my_strtoll10(start_ptr, &end_ptr, &error);
            if ((start_ptr + str_len - 1) == end_ptr)
            {
              switch (end_ptr[0])
              {
                case 'g':
                case 'G':
                  text_shift_number+=10;
                case 'm':
                case 'M':
                  text_shift_number+=10;
                case 'k':
                case 'K':
                  text_shift_number+=10;
                  break;
                default:
                {
                  my_error(ER_WRONG_SIZE_NUMBER, MYF(0));
                  MYSQL_YYABORT;
                }
              }
              if (prefix_number >> 31)
              {
                my_error(ER_SIZE_OVERFLOW_ERROR, MYF(0));
                MYSQL_YYABORT;
              }
              number= prefix_number << text_shift_number;
            }
            else
            {
              my_error(ER_WRONG_SIZE_NUMBER, MYF(0));
              MYSQL_YYABORT;
            }
            (yyval.ulonglong_number)= number;
          }
    break;

  case 430:

/* Line 1455 of yacc.c  */
#line 4412 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 431:

/* Line 1455 of yacc.c  */
#line 4415 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 432:

/* Line 1455 of yacc.c  */
#line 4417 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            TABLE_LIST *src_table;
            LEX *lex= thd->lex;

            lex->create_info.options|= HA_LEX_CREATE_TABLE_LIKE;
            src_table= lex->select_lex.add_table_to_list(thd, (yyvsp[(2) - (2)].table), NULL, 0,
                                                         TL_READ,
                                                         MDL_SHARED_READ);
            if (! src_table)
              MYSQL_YYABORT;
            /* CREATE TABLE ... LIKE is not allowed for views. */
            src_table->required_type= FRMTYPE_TABLE;
          }
    break;

  case 433:

/* Line 1455 of yacc.c  */
#line 4432 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            TABLE_LIST *src_table;
            LEX *lex= thd->lex;

            lex->create_info.options|= HA_LEX_CREATE_TABLE_LIKE;
            src_table= lex->select_lex.add_table_to_list(thd, (yyvsp[(3) - (4)].table), NULL, 0,
                                                         TL_READ,
                                                         MDL_SHARED_READ);
            if (! src_table)
              MYSQL_YYABORT;
            /* CREATE TABLE ... LIKE is not allowed for views. */
            src_table->required_type= FRMTYPE_TABLE;
          }
    break;

  case 434:

/* Line 1455 of yacc.c  */
#line 4450 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.option_list= NULL;
          }
    break;

  case 435:

/* Line 1455 of yacc.c  */
#line 4455 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 436:

/* Line 1455 of yacc.c  */
#line 4458 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 437:

/* Line 1455 of yacc.c  */
#line 4459 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 438:

/* Line 1455 of yacc.c  */
#line 4463 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 439:

/* Line 1455 of yacc.c  */
#line 4465 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->set_braces(0);}
    break;

  case 440:

/* Line 1455 of yacc.c  */
#line 4466 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 441:

/* Line 1455 of yacc.c  */
#line 4468 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 442:

/* Line 1455 of yacc.c  */
#line 4469 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 443:

/* Line 1455 of yacc.c  */
#line 4474 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              Remove all tables used in PARTITION clause from the global table
              list. Partitioning with subqueries is not allowed anyway.
            */
            TABLE_LIST *last_non_sel_table= Lex->create_last_non_select_table;
            last_non_sel_table->next_global= 0;
            Lex->query_tables_last= &last_non_sel_table->next_global;
          }
    break;

  case 444:

/* Line 1455 of yacc.c  */
#line 4510 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 446:

/* Line 1455 of yacc.c  */
#line 4516 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info= new partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            if (lex->sql_command == SQLCOM_ALTER_TABLE)
            {
              lex->alter_info.flags|= ALTER_PARTITION;
            }
          }
    break;

  case 448:

/* Line 1455 of yacc.c  */
#line 4534 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
#ifdef WITH_PARTITION_STORAGE_ENGINE
            LEX_STRING partition_name={C_STRING_WITH_LEN("partition")};
            if (!plugin_is_ready(&partition_name, MYSQL_STORAGE_ENGINE_PLUGIN))
            {
              my_error(ER_OPTION_PREVENTS_STATEMENT, MYF(0),
                      "--skip-partition");
              MYSQL_YYABORT;
            }
#else
            my_error(ER_FEATURE_DISABLED, MYF(0), "partitioning",
                    "--with-plugin-partition");
            MYSQL_YYABORT;
#endif
          }
    break;

  case 449:

/* Line 1455 of yacc.c  */
#line 4553 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!lex->part_info)
            {
              my_parse_error(ER(ER_PARTITION_ENTRY_ERROR));
              MYSQL_YYABORT;
            }
            /*
              We enter here when opening the frm file to translate
              partition info string into part_info data structure.
            */
          }
    break;

  case 450:

/* Line 1455 of yacc.c  */
#line 4565 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 452:

/* Line 1455 of yacc.c  */
#line 4574 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->list_of_part_fields= TRUE;
            part_info->column_list= FALSE;
            part_info->part_type= HASH_PARTITION;
          }
    break;

  case 453:

/* Line 1455 of yacc.c  */
#line 4581 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->part_type= HASH_PARTITION; }
    break;

  case 454:

/* Line 1455 of yacc.c  */
#line 4582 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 455:

/* Line 1455 of yacc.c  */
#line 4584 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->part_type= RANGE_PARTITION; }
    break;

  case 456:

/* Line 1455 of yacc.c  */
#line 4586 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->part_type= RANGE_PARTITION; }
    break;

  case 457:

/* Line 1455 of yacc.c  */
#line 4588 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->part_type= LIST_PARTITION; }
    break;

  case 458:

/* Line 1455 of yacc.c  */
#line 4590 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->part_type= LIST_PARTITION; }
    break;

  case 459:

/* Line 1455 of yacc.c  */
#line 4594 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 460:

/* Line 1455 of yacc.c  */
#line 4596 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->linear_hash_ind= TRUE;}
    break;

  case 461:

/* Line 1455 of yacc.c  */
#line 4600 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 462:

/* Line 1455 of yacc.c  */
#line 4601 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 463:

/* Line 1455 of yacc.c  */
#line 4605 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 464:

/* Line 1455 of yacc.c  */
#line 4606 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 465:

/* Line 1455 of yacc.c  */
#line 4611 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->num_columns++;
            if (part_info->part_field_list.push_back((yyvsp[(1) - (1)].lex_str).str))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
            if (part_info->num_columns > MAX_REF_PARTS)
            {
              my_error(ER_TOO_MANY_PARTITION_FUNC_FIELDS_ERROR, MYF(0),
                       "list of partition fields");
              MYSQL_YYABORT;
            }
          }
    break;

  case 466:

/* Line 1455 of yacc.c  */
#line 4630 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->column_list= TRUE;
            part_info->list_of_part_fields= TRUE;
          }
    break;

  case 467:

/* Line 1455 of yacc.c  */
#line 4640 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->set_part_expr((yyvsp[(2) - (5)].simple_string)+1, (yyvsp[(3) - (5)].item), (yyvsp[(4) - (5)].simple_string), FALSE))
            { MYSQL_YYABORT; }
            part_info->num_columns= 1;
            part_info->column_list= FALSE;
          }
    break;

  case 468:

/* Line 1455 of yacc.c  */
#line 4651 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->part_info->set_part_expr((yyvsp[(2) - (5)].simple_string)+1, (yyvsp[(3) - (5)].item), (yyvsp[(4) - (5)].simple_string), TRUE))
            { MYSQL_YYABORT; }
          }
    break;

  case 469:

/* Line 1455 of yacc.c  */
#line 4659 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 470:

/* Line 1455 of yacc.c  */
#line 4661 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            uint num_parts= (yyvsp[(2) - (2)].ulong_num);
            partition_info *part_info= Lex->part_info;
            if (num_parts == 0)
            {
              my_error(ER_NO_PARTS_ERROR, MYF(0), "partitions");
              MYSQL_YYABORT;
            }

            part_info->num_parts= num_parts;
            part_info->use_default_num_partitions= FALSE;
          }
    break;

  case 471:

/* Line 1455 of yacc.c  */
#line 4676 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 472:

/* Line 1455 of yacc.c  */
#line 4678 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->subpart_type= HASH_PARTITION; }
    break;

  case 473:

/* Line 1455 of yacc.c  */
#line 4679 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 474:

/* Line 1455 of yacc.c  */
#line 4682 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->subpart_type= HASH_PARTITION;
            part_info->list_of_subpart_fields= TRUE;
          }
    break;

  case 475:

/* Line 1455 of yacc.c  */
#line 4687 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 476:

/* Line 1455 of yacc.c  */
#line 4691 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 477:

/* Line 1455 of yacc.c  */
#line 4692 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 478:

/* Line 1455 of yacc.c  */
#line 4697 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->subpart_field_list.push_back((yyvsp[(1) - (1)].lex_str).str))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
            if (part_info->subpart_field_list.elements > MAX_REF_PARTS)
            {
              my_error(ER_TOO_MANY_PARTITION_FUNC_FIELDS_ERROR, MYF(0),
                       "list of subpartition fields");
              MYSQL_YYABORT;
            }
          }
    break;

  case 479:

/* Line 1455 of yacc.c  */
#line 4715 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            bool not_corr_func;
            not_corr_func= !lex->safe_to_cache_query;
            lex->safe_to_cache_query= 1;
            if (not_corr_func)
            {
              my_parse_error(ER(ER_WRONG_EXPR_IN_PARTITION_FUNC_ERROR));
              MYSQL_YYABORT;
            }
            (yyval.item)=(yyvsp[(1) - (1)].item);
          }
    break;

  case 480:

/* Line 1455 of yacc.c  */
#line 4730 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 481:

/* Line 1455 of yacc.c  */
#line 4732 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            uint num_parts= (yyvsp[(2) - (2)].ulong_num);
            LEX *lex= Lex;
            if (num_parts == 0)
            {
              my_error(ER_NO_PARTS_ERROR, MYF(0), "subpartitions");
              MYSQL_YYABORT;
            }
            lex->part_info->num_subparts= num_parts;
            lex->part_info->use_default_num_subpartitions= FALSE;
          }
    break;

  case 482:

/* Line 1455 of yacc.c  */
#line 4747 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->part_type == RANGE_PARTITION)
            {
              my_error(ER_PARTITIONS_MUST_BE_DEFINED_ERROR, MYF(0),
                       "RANGE");
              MYSQL_YYABORT;
            }
            else if (part_info->part_type == LIST_PARTITION)
            {
              my_error(ER_PARTITIONS_MUST_BE_DEFINED_ERROR, MYF(0),
                       "LIST");
              MYSQL_YYABORT;
            }
          }
    break;

  case 483:

/* Line 1455 of yacc.c  */
#line 4763 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            uint count_curr_parts= part_info->partitions.elements;
            if (part_info->num_parts != 0)
            {
              if (part_info->num_parts !=
                  count_curr_parts)
              {
                my_parse_error(ER(ER_PARTITION_WRONG_NO_PART_ERROR));
                MYSQL_YYABORT;
              }
            }
            else if (count_curr_parts > 0)
            {
              part_info->num_parts= count_curr_parts;
            }
            part_info->count_curr_subparts= 0;
          }
    break;

  case 484:

/* Line 1455 of yacc.c  */
#line 4784 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 485:

/* Line 1455 of yacc.c  */
#line 4785 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 486:

/* Line 1455 of yacc.c  */
#line 4790 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            partition_element *p_elem= new partition_element();

            if (!p_elem || part_info->partitions.push_back(p_elem))
            {
              mem_alloc_error(sizeof(partition_element));
              MYSQL_YYABORT;
            }
            p_elem->part_state= PART_NORMAL;
            part_info->curr_part_elem= p_elem;
            part_info->current_partition= p_elem;
            part_info->use_default_partitions= FALSE;
            part_info->use_default_num_partitions= FALSE;
          }
    break;

  case 487:

/* Line 1455 of yacc.c  */
#line 4809 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 488:

/* Line 1455 of yacc.c  */
#line 4814 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            partition_element *p_elem= part_info->curr_part_elem;
            p_elem->partition_name= (yyvsp[(1) - (1)].lex_str).str;
          }
    break;

  case 489:

/* Line 1455 of yacc.c  */
#line 4823 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->part_type == RANGE_PARTITION)
              {
                my_error(ER_PARTITION_REQUIRES_VALUES_ERROR, MYF(0),
                         "RANGE", "LESS THAN");
                MYSQL_YYABORT;
              }
              if (part_info->part_type == LIST_PARTITION)
              {
                my_error(ER_PARTITION_REQUIRES_VALUES_ERROR, MYF(0),
                         "LIST", "IN");
                MYSQL_YYABORT;
              }
            }
            else
              part_info->part_type= HASH_PARTITION;
          }
    break;

  case 490:

/* Line 1455 of yacc.c  */
#line 4845 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->part_type != RANGE_PARTITION)
              {
                my_error(ER_PARTITION_WRONG_VALUES_ERROR, MYF(0),
                         "RANGE", "LESS THAN");
                MYSQL_YYABORT;
              }
            }
            else
              part_info->part_type= RANGE_PARTITION;
          }
    break;

  case 491:

/* Line 1455 of yacc.c  */
#line 4860 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 492:

/* Line 1455 of yacc.c  */
#line 4862 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->part_type != LIST_PARTITION)
              {
                my_error(ER_PARTITION_WRONG_VALUES_ERROR, MYF(0),
                               "LIST", "IN");
                MYSQL_YYABORT;
              }
            }
            else
              part_info->part_type= LIST_PARTITION;
          }
    break;

  case 493:

/* Line 1455 of yacc.c  */
#line 4877 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 494:

/* Line 1455 of yacc.c  */
#line 4882 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;

            if (part_info->num_columns &&
                part_info->num_columns != 1U)
            {
              part_info->print_debug("Kilroy II", NULL);
              my_parse_error(ER(ER_PARTITION_COLUMN_LIST_ERROR));
              MYSQL_YYABORT;
            }
            else
              part_info->num_columns= 1U;
            if (part_info->init_column_part())
            {
              MYSQL_YYABORT;
            }
            if (part_info->add_max_value())
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 495:

/* Line 1455 of yacc.c  */
#line 4903 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 496:

/* Line 1455 of yacc.c  */
#line 4908 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            part_info->print_debug("part_values_in: part_value_item", NULL);

            if (part_info->num_columns != 1U)
            {
              if (!lex->is_partition_management() ||
                  part_info->num_columns == 0 ||
                  part_info->num_columns > MAX_REF_PARTS)
              {
                part_info->print_debug("Kilroy III", NULL);
                my_parse_error(ER(ER_PARTITION_COLUMN_LIST_ERROR));
                MYSQL_YYABORT;
              }
              /*
                Reorganize the current large array into a list of small
                arrays with one entry in each array. This can happen
                in the first partition of an ALTER TABLE statement where
                we ADD or REORGANIZE partitions. Also can only happen
                for LIST partitions.
              */
              if (part_info->reorganize_into_single_field_col_val())
              {
                MYSQL_YYABORT;
              }
            }
          }
    break;

  case 497:

/* Line 1455 of yacc.c  */
#line 4937 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->num_columns < 2U)
            {
              my_parse_error(ER(ER_ROW_SINGLE_PARTITION_FIELD_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 498:

/* Line 1455 of yacc.c  */
#line 4948 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 499:

/* Line 1455 of yacc.c  */
#line 4949 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 500:

/* Line 1455 of yacc.c  */
#line 4954 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->print_debug("( part_value_item", NULL);
            /* Initialisation code needed for each list of value expressions */
            if (!(part_info->part_type == LIST_PARTITION &&
                  part_info->num_columns == 1U) &&
                 part_info->init_column_part())
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 501:

/* Line 1455 of yacc.c  */
#line 4965 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 502:

/* Line 1455 of yacc.c  */
#line 4967 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->print_debug(") part_value_item", NULL);
            if (part_info->num_columns == 0)
              part_info->num_columns= part_info->curr_list_object;
            if (part_info->num_columns != part_info->curr_list_object)
            {
              /*
                All value items lists must be of equal length, in some cases
                which is covered by the above if-statement we don't know yet
                how many columns is in the partition so the assignment above
                ensures that we only report errors when we know we have an
                error.
              */
              part_info->print_debug("Kilroy I", NULL);
              my_parse_error(ER(ER_PARTITION_COLUMN_LIST_ERROR));
              MYSQL_YYABORT;
            }
            part_info->curr_list_object= 0;
          }
    break;

  case 503:

/* Line 1455 of yacc.c  */
#line 4990 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 504:

/* Line 1455 of yacc.c  */
#line 4991 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 505:

/* Line 1455 of yacc.c  */
#line 4996 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->part_type == LIST_PARTITION)
            {
              my_parse_error(ER(ER_MAXVALUE_IN_VALUES_IN));
              MYSQL_YYABORT;
            }
            if (part_info->add_max_value())
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 506:

/* Line 1455 of yacc.c  */
#line 5009 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            Item *part_expr= (yyvsp[(1) - (1)].item);

            if (!lex->safe_to_cache_query)
            {
              my_parse_error(ER(ER_WRONG_EXPR_IN_PARTITION_FUNC_ERROR));
              MYSQL_YYABORT;
            }
            if (part_info->add_column_list_value(YYTHD, part_expr))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 507:

/* Line 1455 of yacc.c  */
#line 5029 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->num_subparts != 0 &&
                !part_info->use_default_subpartitions)
            {
              /*
                We come here when we have defined subpartitions on the first
                partition but not on all the subsequent partitions. 
              */
              my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 508:

/* Line 1455 of yacc.c  */
#line 5043 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->num_subparts != 0)
            {
              if (part_info->num_subparts !=
                  part_info->count_curr_subparts)
              {
                my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
                MYSQL_YYABORT;
              }
            }
            else if (part_info->count_curr_subparts > 0)
            {
              if (part_info->partitions.elements > 1)
              {
                my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
                MYSQL_YYABORT;
              }
              part_info->num_subparts= part_info->count_curr_subparts;
            }
            part_info->count_curr_subparts= 0;
          }
    break;

  case 509:

/* Line 1455 of yacc.c  */
#line 5068 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 510:

/* Line 1455 of yacc.c  */
#line 5069 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 511:

/* Line 1455 of yacc.c  */
#line 5074 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            partition_element *curr_part= part_info->current_partition;
            partition_element *sub_p_elem= new partition_element(curr_part);
            if (part_info->use_default_subpartitions &&
                part_info->partitions.elements >= 2)
            {
              /*
                create table t1 (a int)
                partition by list (a) subpartition by hash (a)
                (partition p0 values in (1),
                 partition p1 values in (2) subpartition sp11);
                causes use to arrive since we are on the second
                partition, but still use_default_subpartitions
                is set. When we come here we're processing at least
                the second partition (the current partition processed
                have already been put into the partitions list.
              */
              my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
              MYSQL_YYABORT;
            }
            if (!sub_p_elem ||
             curr_part->subpartitions.push_back(sub_p_elem))
            {
              mem_alloc_error(sizeof(partition_element));
              MYSQL_YYABORT;
            }
            part_info->curr_part_elem= sub_p_elem;
            part_info->use_default_subpartitions= FALSE;
            part_info->use_default_num_subpartitions= FALSE;
            part_info->count_curr_subparts++;
          }
    break;

  case 512:

/* Line 1455 of yacc.c  */
#line 5106 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 513:

/* Line 1455 of yacc.c  */
#line 5111 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->partition_name= (yyvsp[(1) - (1)].lex_str).str; }
    break;

  case 514:

/* Line 1455 of yacc.c  */
#line 5115 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 515:

/* Line 1455 of yacc.c  */
#line 5116 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 516:

/* Line 1455 of yacc.c  */
#line 5120 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 517:

/* Line 1455 of yacc.c  */
#line 5121 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 518:

/* Line 1455 of yacc.c  */
#line 5126 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->tablespace_name= (yyvsp[(3) - (3)].lex_str).str; }
    break;

  case 519:

/* Line 1455 of yacc.c  */
#line 5128 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->curr_part_elem->engine_type= (yyvsp[(4) - (4)].db_type);
            part_info->default_engine_type= (yyvsp[(4) - (4)].db_type);
          }
    break;

  case 520:

/* Line 1455 of yacc.c  */
#line 5134 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info->curr_part_elem->connect_string.str= (yyvsp[(3) - (3)].lex_str).str;
            lex->part_info->curr_part_elem->connect_string.length= (yyvsp[(3) - (3)].lex_str).length;
          }
    break;

  case 521:

/* Line 1455 of yacc.c  */
#line 5140 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->nodegroup_id= (uint16) (yyvsp[(3) - (3)].ulong_num); }
    break;

  case 522:

/* Line 1455 of yacc.c  */
#line 5142 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_max_rows= (ha_rows) (yyvsp[(3) - (3)].ulonglong_number); }
    break;

  case 523:

/* Line 1455 of yacc.c  */
#line 5144 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_min_rows= (ha_rows) (yyvsp[(3) - (3)].ulonglong_number); }
    break;

  case 524:

/* Line 1455 of yacc.c  */
#line 5146 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->data_file_name= (yyvsp[(4) - (4)].lex_str).str; }
    break;

  case 525:

/* Line 1455 of yacc.c  */
#line 5148 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->index_file_name= (yyvsp[(4) - (4)].lex_str).str; }
    break;

  case 526:

/* Line 1455 of yacc.c  */
#line 5150 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_comment= (yyvsp[(3) - (3)].lex_str).str; }
    break;

  case 527:

/* Line 1455 of yacc.c  */
#line 5159 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->sql_command == SQLCOM_INSERT)
              lex->sql_command= SQLCOM_INSERT_SELECT;
            else if (lex->sql_command == SQLCOM_REPLACE)
              lex->sql_command= SQLCOM_REPLACE_SELECT;
            /*
              The following work only with the local list, the global list
              is created correctly in this case
            */
            lex->current_select->table_list.save_and_clear(&lex->save_list);
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 528:

/* Line 1455 of yacc.c  */
#line 5174 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 529:

/* Line 1455 of yacc.c  */
#line 5178 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              The following work only with the local list, the global list
              is created correctly in this case
            */
            Lex->current_select->table_list.push_front(&Lex->save_list);
          }
    break;

  case 530:

/* Line 1455 of yacc.c  */
#line 5188 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 531:

/* Line 1455 of yacc.c  */
#line 5189 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 532:

/* Line 1455 of yacc.c  */
#line 5193 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 533:

/* Line 1455 of yacc.c  */
#line 5194 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 534:

/* Line 1455 of yacc.c  */
#line 5198 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 535:

/* Line 1455 of yacc.c  */
#line 5199 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 536:

/* Line 1455 of yacc.c  */
#line 5203 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 537:

/* Line 1455 of yacc.c  */
#line 5204 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 538:

/* Line 1455 of yacc.c  */
#line 5208 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 539:

/* Line 1455 of yacc.c  */
#line 5209 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(1) - (1)].num);}
    break;

  case 540:

/* Line 1455 of yacc.c  */
#line 5213 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=(yyvsp[(1) - (1)].num); }
    break;

  case 541:

/* Line 1455 of yacc.c  */
#line 5214 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(1) - (2)].num) | (yyvsp[(2) - (2)].num); }
    break;

  case 542:

/* Line 1455 of yacc.c  */
#line 5218 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=HA_LEX_CREATE_TMP_TABLE; }
    break;

  case 543:

/* Line 1455 of yacc.c  */
#line 5222 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 544:

/* Line 1455 of yacc.c  */
#line 5223 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=HA_LEX_CREATE_IF_NOT_EXISTS; }
    break;

  case 552:

/* Line 1455 of yacc.c  */
#line 5244 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.db_type= (yyvsp[(3) - (3)].db_type);
            Lex->create_info.used_fields|= HA_CREATE_USED_ENGINE;
          }
    break;

  case 553:

/* Line 1455 of yacc.c  */
#line 5249 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.max_rows= (yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_MAX_ROWS;
          }
    break;

  case 554:

/* Line 1455 of yacc.c  */
#line 5254 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.min_rows= (yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_MIN_ROWS;
          }
    break;

  case 555:

/* Line 1455 of yacc.c  */
#line 5259 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.avg_row_length=(yyvsp[(3) - (3)].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_AVG_ROW_LENGTH;
          }
    break;

  case 556:

/* Line 1455 of yacc.c  */
#line 5264 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.password=(yyvsp[(3) - (3)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_PASSWORD;
          }
    break;

  case 557:

/* Line 1455 of yacc.c  */
#line 5269 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.comment=(yyvsp[(3) - (3)].lex_str);
            Lex->create_info.used_fields|= HA_CREATE_USED_COMMENT;
          }
    break;

  case 558:

/* Line 1455 of yacc.c  */
#line 5274 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.auto_increment_value=(yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_AUTO;
          }
    break;

  case 559:

/* Line 1455 of yacc.c  */
#line 5279 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            switch((yyvsp[(3) - (3)].ulong_num)) {
            case 0:
                Lex->create_info.table_options|= HA_OPTION_NO_PACK_KEYS;
                break;
            case 1:
                Lex->create_info.table_options|= HA_OPTION_PACK_KEYS;
                break;
            default:
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
            }
            Lex->create_info.used_fields|= HA_CREATE_USED_PACK_KEYS;
          }
    break;

  case 560:

/* Line 1455 of yacc.c  */
#line 5294 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.table_options&=
              ~(HA_OPTION_PACK_KEYS | HA_OPTION_NO_PACK_KEYS);
            Lex->create_info.used_fields|= HA_CREATE_USED_PACK_KEYS;
          }
    break;

  case 561:

/* Line 1455 of yacc.c  */
#line 5300 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_CHECKSUM : HA_OPTION_NO_CHECKSUM;
            Lex->create_info.used_fields|= HA_CREATE_USED_CHECKSUM;
          }
    break;

  case 562:

/* Line 1455 of yacc.c  */
#line 5305 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
             Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_CHECKSUM : HA_OPTION_NO_CHECKSUM;
             Lex->create_info.used_fields|= HA_CREATE_USED_CHECKSUM;
          }
    break;

  case 563:

/* Line 1455 of yacc.c  */
#line 5310 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.used_fields|= HA_CREATE_USED_PAGE_CHECKSUM;
            Lex->create_info.page_checksum= (yyvsp[(3) - (3)].choice);
          }
    break;

  case 564:

/* Line 1455 of yacc.c  */
#line 5315 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_DELAY_KEY_WRITE : HA_OPTION_NO_DELAY_KEY_WRITE;
            Lex->create_info.used_fields|= HA_CREATE_USED_DELAY_KEY_WRITE;
          }
    break;

  case 565:

/* Line 1455 of yacc.c  */
#line 5320 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.row_type= (yyvsp[(3) - (3)].row_type);
            Lex->create_info.used_fields|= HA_CREATE_USED_ROW_FORMAT;
          }
    break;

  case 566:

/* Line 1455 of yacc.c  */
#line 5325 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->select_lex.table_list.save_and_clear(&Lex->save_list);
          }
    break;

  case 567:

/* Line 1455 of yacc.c  */
#line 5329 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              Move the union list to the merge_list and exclude its tables
              from the global list.
            */
            LEX *lex=Lex;
            lex->create_info.merge_list= lex->select_lex.table_list;
            lex->select_lex.table_list= lex->save_list;
            /*
              When excluding union list from the global list we assume that
              elements of the former immediately follow elements which represent
              table being created/altered and parent tables.
            */
            TABLE_LIST *last_non_sel_table= lex->create_last_non_select_table;
            DBUG_ASSERT(last_non_sel_table->next_global ==
                        lex->create_info.merge_list.first);
            last_non_sel_table->next_global= 0;
            Lex->query_tables_last= &last_non_sel_table->next_global;

            lex->create_info.used_fields|= HA_CREATE_USED_UNION;
          }
    break;

  case 570:

/* Line 1455 of yacc.c  */
#line 5353 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.merge_insert_method= (yyvsp[(3) - (3)].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_INSERT_METHOD;
          }
    break;

  case 571:

/* Line 1455 of yacc.c  */
#line 5358 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.data_file_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_DATADIR;
          }
    break;

  case 572:

/* Line 1455 of yacc.c  */
#line 5363 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.index_file_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_INDEXDIR;
          }
    break;

  case 573:

/* Line 1455 of yacc.c  */
#line 5368 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {Lex->create_info.tablespace= (yyvsp[(2) - (2)].lex_str).str;}
    break;

  case 574:

/* Line 1455 of yacc.c  */
#line 5370 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {Lex->create_info.storage_media= HA_SM_DISK;}
    break;

  case 575:

/* Line 1455 of yacc.c  */
#line 5372 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {Lex->create_info.storage_media= HA_SM_MEMORY;}
    break;

  case 576:

/* Line 1455 of yacc.c  */
#line 5374 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.connect_string.str= (yyvsp[(3) - (3)].lex_str).str;
            Lex->create_info.connect_string.length= (yyvsp[(3) - (3)].lex_str).length;
            Lex->create_info.used_fields|= HA_CREATE_USED_CONNECTION;
          }
    break;

  case 577:

/* Line 1455 of yacc.c  */
#line 5380 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.used_fields|= HA_CREATE_USED_KEY_BLOCK_SIZE;
            Lex->create_info.key_block_size= (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 578:

/* Line 1455 of yacc.c  */
#line 5385 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
	    Lex->create_info.used_fields|= HA_CREATE_USED_TRANSACTIONAL;
            Lex->create_info.transactional= (yyvsp[(3) - (3)].choice);
          }
    break;

  case 579:

/* Line 1455 of yacc.c  */
#line 5390 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            new (YYTHD->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), true, &Lex->create_info.option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 580:

/* Line 1455 of yacc.c  */
#line 5396 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            new (YYTHD->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), false, &Lex->create_info.option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 581:

/* Line 1455 of yacc.c  */
#line 5402 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            new (YYTHD->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].ulonglong_number), &Lex->create_info.option_list,
                                  &Lex->option_list_last, YYTHD->mem_root);
          }
    break;

  case 582:

/* Line 1455 of yacc.c  */
#line 5408 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            new (YYTHD->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), &Lex->create_info.option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 583:

/* Line 1455 of yacc.c  */
#line 5417 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            HA_CREATE_INFO *cinfo= &Lex->create_info;
            if ((cinfo->used_fields & HA_CREATE_USED_DEFAULT_CHARSET) &&
                 cinfo->default_table_charset && (yyvsp[(4) - (4)].charset) &&
                 !my_charset_same(cinfo->default_table_charset,(yyvsp[(4) - (4)].charset)))
            {
              my_error(ER_CONFLICTING_DECLARATIONS, MYF(0),
                       "CHARACTER SET ", cinfo->default_table_charset->csname,
                       "CHARACTER SET ", (yyvsp[(4) - (4)].charset)->csname);
              MYSQL_YYABORT;
            }
            Lex->create_info.default_table_charset= (yyvsp[(4) - (4)].charset);
            Lex->create_info.used_fields|= HA_CREATE_USED_DEFAULT_CHARSET;
          }
    break;

  case 584:

/* Line 1455 of yacc.c  */
#line 5435 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            HA_CREATE_INFO *cinfo= &Lex->create_info;
            if ((cinfo->used_fields & HA_CREATE_USED_DEFAULT_CHARSET) &&
                 cinfo->default_table_charset && (yyvsp[(4) - (4)].charset) &&
                 !((yyvsp[(4) - (4)].charset)= merge_charset_and_collation(cinfo->default_table_charset,
                                                   (yyvsp[(4) - (4)].charset))))
            {
              MYSQL_YYABORT;
            }

            Lex->create_info.default_table_charset= (yyvsp[(4) - (4)].charset);
            Lex->create_info.used_fields|= HA_CREATE_USED_DEFAULT_CHARSET;
          }
    break;

  case 585:

/* Line 1455 of yacc.c  */
#line 5452 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            plugin_ref plugin= ha_resolve_by_name(YYTHD, &(yyvsp[(1) - (1)].lex_str));

            if (plugin)
              (yyval.db_type)= plugin_data(plugin, handlerton*);
            else
            {
              if (YYTHD->variables.sql_mode & MODE_NO_ENGINE_SUBSTITUTION)
              {
                my_error(ER_UNKNOWN_STORAGE_ENGINE, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
                MYSQL_YYABORT;
              }
              (yyval.db_type)= 0;
              push_warning_printf(YYTHD, MYSQL_ERROR::WARN_LEVEL_WARN,
                                  ER_UNKNOWN_STORAGE_ENGINE,
                                  ER(ER_UNKNOWN_STORAGE_ENGINE),
                                  (yyvsp[(1) - (1)].lex_str).str);
            }
          }
    break;

  case 586:

/* Line 1455 of yacc.c  */
#line 5475 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            plugin_ref plugin;
            if ((plugin= ha_resolve_by_name(YYTHD, &(yyvsp[(1) - (1)].lex_str))))
              (yyval.db_type)= plugin_data(plugin, handlerton*);
            else
            {
              my_error(ER_UNKNOWN_STORAGE_ENGINE, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 587:

/* Line 1455 of yacc.c  */
#line 5488 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_DEFAULT; }
    break;

  case 588:

/* Line 1455 of yacc.c  */
#line 5489 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_FIXED; }
    break;

  case 589:

/* Line 1455 of yacc.c  */
#line 5490 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_DYNAMIC; }
    break;

  case 590:

/* Line 1455 of yacc.c  */
#line 5491 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_COMPRESSED; }
    break;

  case 591:

/* Line 1455 of yacc.c  */
#line 5492 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_REDUNDANT; }
    break;

  case 592:

/* Line 1455 of yacc.c  */
#line 5493 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_COMPACT; }
    break;

  case 593:

/* Line 1455 of yacc.c  */
#line 5494 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_PAGE; }
    break;

  case 594:

/* Line 1455 of yacc.c  */
#line 5498 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_DISABLED; }
    break;

  case 595:

/* Line 1455 of yacc.c  */
#line 5499 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_TO_FIRST; }
    break;

  case 596:

/* Line 1455 of yacc.c  */
#line 5500 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_TO_LAST; }
    break;

  case 597:

/* Line 1455 of yacc.c  */
#line 5504 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 599:

/* Line 1455 of yacc.c  */
#line 5509 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {(yyval.num) = (int) STRING_RESULT; }
    break;

  case 600:

/* Line 1455 of yacc.c  */
#line 5510 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {(yyval.num) = (int) REAL_RESULT; }
    break;

  case 601:

/* Line 1455 of yacc.c  */
#line 5511 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {(yyval.num) = (int) DECIMAL_RESULT; }
    break;

  case 602:

/* Line 1455 of yacc.c  */
#line 5512 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {(yyval.num) = (int) INT_RESULT; }
    break;

  case 603:

/* Line 1455 of yacc.c  */
#line 5518 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
          Lex->create_last_non_select_table= Lex->last_table();
        }
    break;

  case 609:

/* Line 1455 of yacc.c  */
#line 5536 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->col_list.empty(); /* Alloced by sql_alloc */
          }
    break;

  case 610:

/* Line 1455 of yacc.c  */
#line 5543 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->option_list= NULL; }
    break;

  case 611:

/* Line 1455 of yacc.c  */
#line 5545 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(1) - (8)].key_type), (yyvsp[(2) - (8)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 612:

/* Line 1455 of yacc.c  */
#line 5551 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->option_list= NULL; }
    break;

  case 613:

/* Line 1455 of yacc.c  */
#line 5553 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(1) - (9)].key_type), (yyvsp[(3) - (9)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 614:

/* Line 1455 of yacc.c  */
#line 5559 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->option_list= NULL; }
    break;

  case 615:

/* Line 1455 of yacc.c  */
#line 5561 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(1) - (9)].key_type), (yyvsp[(3) - (9)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 616:

/* Line 1455 of yacc.c  */
#line 5567 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->option_list= NULL; }
    break;

  case 617:

/* Line 1455 of yacc.c  */
#line 5569 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(2) - (9)].key_type), (yyvsp[(3) - (9)].lex_str).str ? (yyvsp[(3) - (9)].lex_str) : (yyvsp[(1) - (9)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 618:

/* Line 1455 of yacc.c  */
#line 5574 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Key *key= new Foreign_key((yyvsp[(4) - (8)].lex_str).str ? (yyvsp[(4) - (8)].lex_str) : (yyvsp[(1) - (8)].lex_str), lex->col_list,
                                      (yyvsp[(8) - (8)].table),
                                      lex->ref_list,
                                      lex->fk_delete_opt,
                                      lex->fk_update_opt,
                                      lex->fk_match_option);
            if (key == NULL)
              MYSQL_YYABORT;
            lex->alter_info.key_list.push_back(key);
            lex->option_list= NULL;
            if (add_create_index (lex, Key::MULTIPLE, (yyvsp[(1) - (8)].lex_str).str ? (yyvsp[(1) - (8)].lex_str) : (yyvsp[(4) - (8)].lex_str),
                                  &default_key_create_info, 1))
              MYSQL_YYABORT;
            /* Only used for ALTER TABLE. Ignored otherwise. */
            lex->alter_info.flags|= ALTER_FOREIGN_KEY;
          }
    break;

  case 619:

/* Line 1455 of yacc.c  */
#line 5593 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->col_list.empty(); /* Alloced by sql_alloc */
          }
    break;

  case 623:

/* Line 1455 of yacc.c  */
#line 5608 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 624:

/* Line 1455 of yacc.c  */
#line 5609 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 625:

/* Line 1455 of yacc.c  */
#line 5613 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str); }
    break;

  case 626:

/* Line 1455 of yacc.c  */
#line 5618 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->length=lex->dec=0;
            lex->type=0;
            lex->default_value= lex->on_update_value= 0;
            lex->comment=null_lex_str;
            lex->charset=NULL;
	    lex->vcol_info= 0;
            lex->option_list= NULL;
          }
    break;

  case 627:

/* Line 1455 of yacc.c  */
#line 5629 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (add_field_to_list(lex->thd, &(yyvsp[(1) - (3)].lex_str), (enum enum_field_types) (yyvsp[(3) - (3)].num),
                                  lex->length,lex->dec,lex->type,
                                  lex->default_value, lex->on_update_value, 
                                  &lex->comment,
                                  lex->change,&lex->interval_list,lex->charset,
                                  lex->uint_geom_type,
                                  lex->vcol_info, lex->option_list))
              MYSQL_YYABORT;
          }
    break;

  case 628:

/* Line 1455 of yacc.c  */
#line 5643 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 629:

/* Line 1455 of yacc.c  */
#line 5647 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= (enum enum_field_types)MYSQL_TYPE_VIRTUAL;
            Lex->vcol_info->set_field_type((enum enum_field_types) (yyvsp[(1) - (8)].num));
          }
    break;

  case 631:

/* Line 1455 of yacc.c  */
#line 5655 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 632:

/* Line 1455 of yacc.c  */
#line 5660 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->vcol_info->set_stored_in_db_flag(FALSE);
          }
    break;

  case 633:

/* Line 1455 of yacc.c  */
#line 5664 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->vcol_info->set_stored_in_db_flag(FALSE);
          }
    break;

  case 634:

/* Line 1455 of yacc.c  */
#line 5668 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->vcol_info->set_stored_in_db_flag(TRUE);
          }
    break;

  case 635:

/* Line 1455 of yacc.c  */
#line 5674 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 636:

/* Line 1455 of yacc.c  */
#line 5675 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 637:

/* Line 1455 of yacc.c  */
#line 5679 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 639:

/* Line 1455 of yacc.c  */
#line 5685 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= UNIQUE_FLAG;
            lex->alter_info.flags|= ALTER_ADD_INDEX;
          }
    break;

  case 640:

/* Line 1455 of yacc.c  */
#line 5691 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= UNIQUE_KEY_FLAG;
            lex->alter_info.flags|= ALTER_ADD_INDEX;
          }
    break;

  case 641:

/* Line 1455 of yacc.c  */
#line 5696 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 642:

/* Line 1455 of yacc.c  */
#line 5701 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              "PARSE_VCOL_EXPR" can only be used by the SQL server
              when reading a '*.frm' file.
              Prevent the end user from invoking this command.
            */
            if (!Lex->parse_vcol_expr)
            {
              my_message(ER_SYNTAX_ERROR, ER(ER_SYNTAX_ERROR), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 643:

/* Line 1455 of yacc.c  */
#line 5717 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->vcol_info= new Virtual_column_info();
            if (!Lex->vcol_info)
            {
              mem_alloc_error(sizeof(Virtual_column_info));
              MYSQL_YYABORT;
            }
            uint expr_len= (uint)((yyvsp[(3) - (3)].simple_string) - (yyvsp[(1) - (3)].simple_string)) - 1;
            Lex->vcol_info->expr_str.str= (char* ) sql_memdup((yyvsp[(1) - (3)].simple_string) + 1, expr_len);
            Lex->vcol_info->expr_str.length= expr_len;
            Lex->vcol_info->expr_item= (yyvsp[(2) - (3)].item);
          }
    break;

  case 644:

/* Line 1455 of yacc.c  */
#line 5732 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=(yyvsp[(1) - (3)].num); }
    break;

  case 645:

/* Line 1455 of yacc.c  */
#line 5733 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=(yyvsp[(1) - (3)].num); }
    break;

  case 646:

/* Line 1455 of yacc.c  */
#line 5734 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_FLOAT; }
    break;

  case 647:

/* Line 1455 of yacc.c  */
#line 5736 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_BIT;
          }
    break;

  case 648:

/* Line 1455 of yacc.c  */
#line 5741 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_BIT;
          }
    break;

  case 649:

/* Line 1455 of yacc.c  */
#line 5745 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_TINY;
          }
    break;

  case 650:

/* Line 1455 of yacc.c  */
#line 5750 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_TINY;
          }
    break;

  case 651:

/* Line 1455 of yacc.c  */
#line 5755 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 652:

/* Line 1455 of yacc.c  */
#line 5759 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 653:

/* Line 1455 of yacc.c  */
#line 5764 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_STRING;
            Lex->charset=national_charset_info;
          }
    break;

  case 654:

/* Line 1455 of yacc.c  */
#line 5769 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_STRING;
            Lex->charset=national_charset_info;
          }
    break;

  case 655:

/* Line 1455 of yacc.c  */
#line 5775 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 656:

/* Line 1455 of yacc.c  */
#line 5780 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 657:

/* Line 1455 of yacc.c  */
#line 5786 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_TYPE_VARCHAR;
          }
    break;

  case 658:

/* Line 1455 of yacc.c  */
#line 5790 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_TYPE_VARCHAR;
            Lex->charset=national_charset_info;
          }
    break;

  case 659:

/* Line 1455 of yacc.c  */
#line 5795 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)= MYSQL_TYPE_VARCHAR;
          }
    break;

  case 660:

/* Line 1455 of yacc.c  */
#line 5800 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->length)
            {
              errno= 0;
              ulong length= strtoul(Lex->length, NULL, 10);
              if (errno == 0 && length <= MAX_FIELD_BLOBLENGTH && length != 4)
              {
                char buff[sizeof("YEAR()") + MY_INT64_NUM_DECIMAL_DIGITS + 1];
                my_snprintf(buff, sizeof(buff), "YEAR(%lu)", length);
                push_warning_printf(YYTHD, MYSQL_ERROR::WARN_LEVEL_NOTE,
                                    ER_WARN_DEPRECATED_SYNTAX,
                                    ER(ER_WARN_DEPRECATED_SYNTAX),
                                    buff, "YEAR(4)");
              }
            }
            (yyval.num)=MYSQL_TYPE_YEAR;
          }
    break;

  case 661:

/* Line 1455 of yacc.c  */
#line 5818 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DATE; }
    break;

  case 662:

/* Line 1455 of yacc.c  */
#line 5820 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_TIME; }
    break;

  case 663:

/* Line 1455 of yacc.c  */
#line 5822 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (YYTHD->variables.sql_mode & MODE_MAXDB)
              (yyval.num)=MYSQL_TYPE_DATETIME;
            else
            {
              /* 
                Unlike other types TIMESTAMP fields are NOT NULL by default.
              */
              Lex->type|= NOT_NULL_FLAG;
              (yyval.num)=MYSQL_TYPE_TIMESTAMP;
            }
          }
    break;

  case 664:

/* Line 1455 of yacc.c  */
#line 5835 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DATETIME; }
    break;

  case 665:

/* Line 1455 of yacc.c  */
#line 5837 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_TINY_BLOB;
          }
    break;

  case 666:

/* Line 1455 of yacc.c  */
#line 5842 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_BLOB;
          }
    break;

  case 667:

/* Line 1455 of yacc.c  */
#line 5847 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            Lex->charset=&my_charset_bin;
            Lex->uint_geom_type= (uint)(yyvsp[(1) - (1)].num);
            (yyval.num)=MYSQL_TYPE_GEOMETRY;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
    break;

  case 668:

/* Line 1455 of yacc.c  */
#line 5859 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB;
          }
    break;

  case 669:

/* Line 1455 of yacc.c  */
#line 5864 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_LONG_BLOB;
          }
    break;

  case 670:

/* Line 1455 of yacc.c  */
#line 5869 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB;
          }
    break;

  case 671:

/* Line 1455 of yacc.c  */
#line 5874 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB; }
    break;

  case 672:

/* Line 1455 of yacc.c  */
#line 5876 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_TINY_BLOB; }
    break;

  case 673:

/* Line 1455 of yacc.c  */
#line 5878 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_BLOB; }
    break;

  case 674:

/* Line 1455 of yacc.c  */
#line 5880 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB; }
    break;

  case 675:

/* Line 1455 of yacc.c  */
#line 5882 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_LONG_BLOB; }
    break;

  case 676:

/* Line 1455 of yacc.c  */
#line 5884 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_NEWDECIMAL;}
    break;

  case 677:

/* Line 1455 of yacc.c  */
#line 5886 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_NEWDECIMAL;}
    break;

  case 678:

/* Line 1455 of yacc.c  */
#line 5888 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_NEWDECIMAL;}
    break;

  case 679:

/* Line 1455 of yacc.c  */
#line 5890 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {Lex->interval_list.empty();}
    break;

  case 680:

/* Line 1455 of yacc.c  */
#line 5892 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_ENUM; }
    break;

  case 681:

/* Line 1455 of yacc.c  */
#line 5894 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->interval_list.empty();}
    break;

  case 682:

/* Line 1455 of yacc.c  */
#line 5896 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_SET; }
    break;

  case 683:

/* Line 1455 of yacc.c  */
#line 5898 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB; }
    break;

  case 684:

/* Line 1455 of yacc.c  */
#line 5900 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_LONGLONG;
            Lex->type|= (AUTO_INCREMENT_FLAG | NOT_NULL_FLAG | UNSIGNED_FLAG |
              UNIQUE_FLAG);
          }
    break;

  case 685:

/* Line 1455 of yacc.c  */
#line 5908 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_GEOMETRY; }
    break;

  case 686:

/* Line 1455 of yacc.c  */
#line 5909 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_GEOMETRYCOLLECTION; }
    break;

  case 687:

/* Line 1455 of yacc.c  */
#line 5911 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->length= (char*)"25";
            (yyval.num)= Field::GEOM_POINT;
          }
    break;

  case 688:

/* Line 1455 of yacc.c  */
#line 5915 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_MULTIPOINT; }
    break;

  case 689:

/* Line 1455 of yacc.c  */
#line 5916 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_LINESTRING; }
    break;

  case 690:

/* Line 1455 of yacc.c  */
#line 5917 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_MULTILINESTRING; }
    break;

  case 691:

/* Line 1455 of yacc.c  */
#line 5918 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_POLYGON; }
    break;

  case 692:

/* Line 1455 of yacc.c  */
#line 5919 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_MULTIPOLYGON; }
    break;

  case 693:

/* Line 1455 of yacc.c  */
#line 5923 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 694:

/* Line 1455 of yacc.c  */
#line 5927 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 695:

/* Line 1455 of yacc.c  */
#line 5928 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 696:

/* Line 1455 of yacc.c  */
#line 5932 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 697:

/* Line 1455 of yacc.c  */
#line 5933 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 698:

/* Line 1455 of yacc.c  */
#line 5937 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 699:

/* Line 1455 of yacc.c  */
#line 5938 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 700:

/* Line 1455 of yacc.c  */
#line 5939 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 701:

/* Line 1455 of yacc.c  */
#line 5940 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 702:

/* Line 1455 of yacc.c  */
#line 5941 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 703:

/* Line 1455 of yacc.c  */
#line 5945 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_LONG; }
    break;

  case 704:

/* Line 1455 of yacc.c  */
#line 5946 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_TINY; }
    break;

  case 705:

/* Line 1455 of yacc.c  */
#line 5947 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_SHORT; }
    break;

  case 706:

/* Line 1455 of yacc.c  */
#line 5948 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_INT24; }
    break;

  case 707:

/* Line 1455 of yacc.c  */
#line 5949 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_LONGLONG; }
    break;

  case 708:

/* Line 1455 of yacc.c  */
#line 5954 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= YYTHD->variables.sql_mode & MODE_REAL_AS_FLOAT ?
              MYSQL_TYPE_FLOAT : MYSQL_TYPE_DOUBLE;
          }
    break;

  case 709:

/* Line 1455 of yacc.c  */
#line 5959 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DOUBLE; }
    break;

  case 710:

/* Line 1455 of yacc.c  */
#line 5961 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DOUBLE; }
    break;

  case 711:

/* Line 1455 of yacc.c  */
#line 5966 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->dec=Lex->length= (char*)0; }
    break;

  case 712:

/* Line 1455 of yacc.c  */
#line 5968 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->dec= (char*)0; }
    break;

  case 713:

/* Line 1455 of yacc.c  */
#line 5970 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 714:

/* Line 1455 of yacc.c  */
#line 5975 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->length=(yyvsp[(2) - (5)].lex_str).str;
            lex->dec=(yyvsp[(4) - (5)].lex_str).str;
          }
    break;

  case 715:

/* Line 1455 of yacc.c  */
#line 5983 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 716:

/* Line 1455 of yacc.c  */
#line 5984 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 717:

/* Line 1455 of yacc.c  */
#line 5988 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 718:

/* Line 1455 of yacc.c  */
#line 5989 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 719:

/* Line 1455 of yacc.c  */
#line 5993 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 720:

/* Line 1455 of yacc.c  */
#line 5994 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= UNSIGNED_FLAG;}
    break;

  case 721:

/* Line 1455 of yacc.c  */
#line 5995 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= UNSIGNED_FLAG | ZEROFILL_FLAG; }
    break;

  case 722:

/* Line 1455 of yacc.c  */
#line 5999 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 723:

/* Line 1455 of yacc.c  */
#line 6000 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 724:

/* Line 1455 of yacc.c  */
#line 6001 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 725:

/* Line 1455 of yacc.c  */
#line 6002 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 726:

/* Line 1455 of yacc.c  */
#line 6005 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->length=(char*) 0; /* use default length */ }
    break;

  case 727:

/* Line 1455 of yacc.c  */
#line 6006 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { }
    break;

  case 728:

/* Line 1455 of yacc.c  */
#line 6010 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 729:

/* Line 1455 of yacc.c  */
#line 6011 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 730:

/* Line 1455 of yacc.c  */
#line 6015 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 731:

/* Line 1455 of yacc.c  */
#line 6016 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 732:

/* Line 1455 of yacc.c  */
#line 6020 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 734:

/* Line 1455 of yacc.c  */
#line 6025 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type&= ~ NOT_NULL_FLAG; }
    break;

  case 735:

/* Line 1455 of yacc.c  */
#line 6026 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= NOT_NULL_FLAG; }
    break;

  case 736:

/* Line 1455 of yacc.c  */
#line 6027 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->default_value=(yyvsp[(2) - (2)].item); }
    break;

  case 737:

/* Line 1455 of yacc.c  */
#line 6029 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_func_now_local(6);
            if (item == NULL)
              MYSQL_YYABORT;
            Lex->on_update_value= item;
          }
    break;

  case 738:

/* Line 1455 of yacc.c  */
#line 6035 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= AUTO_INCREMENT_FLAG | NOT_NULL_FLAG; }
    break;

  case 739:

/* Line 1455 of yacc.c  */
#line 6037 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            LEX *lex=Lex;
            lex->type|= AUTO_INCREMENT_FLAG | NOT_NULL_FLAG | UNIQUE_FLAG;
            lex->alter_info.flags|= ALTER_ADD_INDEX;
          }
    break;

  case 740:

/* Line 1455 of yacc.c  */
#line 6043 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= PRI_KEY_FLAG | NOT_NULL_FLAG;
            lex->alter_info.flags|= ALTER_ADD_INDEX;
          }
    break;

  case 741:

/* Line 1455 of yacc.c  */
#line 6049 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= UNIQUE_FLAG; 
            lex->alter_info.flags|= ALTER_ADD_INDEX;
          }
    break;

  case 742:

/* Line 1455 of yacc.c  */
#line 6055 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= UNIQUE_KEY_FLAG; 
            lex->alter_info.flags|= ALTER_ADD_INDEX; 
          }
    break;

  case 743:

/* Line 1455 of yacc.c  */
#line 6060 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 744:

/* Line 1455 of yacc.c  */
#line 6062 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->charset && !my_charset_same(Lex->charset,(yyvsp[(2) - (2)].charset)))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       (yyvsp[(2) - (2)].charset)->name,Lex->charset->csname);
              MYSQL_YYABORT;
            }
            else
            {
              Lex->charset=(yyvsp[(2) - (2)].charset);
            }
          }
    break;

  case 745:

/* Line 1455 of yacc.c  */
#line 6075 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            new (YYTHD->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), true, &Lex->option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 746:

/* Line 1455 of yacc.c  */
#line 6081 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            new (YYTHD->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), false, &Lex->option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 747:

/* Line 1455 of yacc.c  */
#line 6087 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            new (YYTHD->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].ulonglong_number), &Lex->option_list,
                                  &Lex->option_list_last, YYTHD->mem_root);
          }
    break;

  case 748:

/* Line 1455 of yacc.c  */
#line 6093 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            new (YYTHD->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), &Lex->option_list, &Lex->option_list_last);
          }
    break;

  case 749:

/* Line 1455 of yacc.c  */
#line 6102 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
          (yyval.num)= (yyvsp[(1) - (2)].num);

          if (Lex->charset) /* Lex->charset is scanned in "type" */
          {
            if (!(Lex->charset= merge_charset_and_collation(Lex->charset, (yyvsp[(2) - (2)].charset))))
              MYSQL_YYABORT;
          }
          else if ((yyvsp[(2) - (2)].charset))
          {
            my_error(ER_NOT_SUPPORTED_YET, MYF(0),
                     "COLLATE with no CHARACTER SET "
                     "in SP parameters, RETURNS, DECLARE");
            MYSQL_YYABORT;
          }
        }
    break;

  case 750:

/* Line 1455 of yacc.c  */
#line 6123 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_now_local(6);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 751:

/* Line 1455 of yacc.c  */
#line 6129 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 752:

/* Line 1455 of yacc.c  */
#line 6133 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 753:

/* Line 1455 of yacc.c  */
#line 6134 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 754:

/* Line 1455 of yacc.c  */
#line 6139 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!((yyval.charset)=get_charset_by_csname((yyvsp[(1) - (1)].lex_str).str,MY_CS_PRIMARY,MYF(0))))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 755:

/* Line 1455 of yacc.c  */
#line 6146 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.charset)= &my_charset_bin; }
    break;

  case 756:

/* Line 1455 of yacc.c  */
#line 6150 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset);   }
    break;

  case 757:

/* Line 1455 of yacc.c  */
#line 6151 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 758:

/* Line 1455 of yacc.c  */
#line 6155 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.charset)= NULL; }
    break;

  case 759:

/* Line 1455 of yacc.c  */
#line 6156 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.charset)= (yyvsp[(2) - (2)].charset); }
    break;

  case 760:

/* Line 1455 of yacc.c  */
#line 6161 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!((yyval.charset)=get_charset_by_csname((yyvsp[(1) - (1)].lex_str).str,MY_CS_PRIMARY,MYF(0))) &&
                !((yyval.charset)=get_old_charset_by_name((yyvsp[(1) - (1)].lex_str).str)))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 761:

/* Line 1455 of yacc.c  */
#line 6169 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.charset)= &my_charset_bin; }
    break;

  case 762:

/* Line 1455 of yacc.c  */
#line 6173 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset);   }
    break;

  case 763:

/* Line 1455 of yacc.c  */
#line 6174 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 764:

/* Line 1455 of yacc.c  */
#line 6179 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!((yyval.charset)=get_charset_by_name((yyvsp[(1) - (1)].lex_str).str,MYF(0))))
            {
              my_error(ER_UNKNOWN_COLLATION, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 765:

/* Line 1455 of yacc.c  */
#line 6189 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 766:

/* Line 1455 of yacc.c  */
#line 6190 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(2) - (2)].charset); }
    break;

  case 767:

/* Line 1455 of yacc.c  */
#line 6194 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset); }
    break;

  case 768:

/* Line 1455 of yacc.c  */
#line 6195 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 769:

/* Line 1455 of yacc.c  */
#line 6199 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 770:

/* Line 1455 of yacc.c  */
#line 6200 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 771:

/* Line 1455 of yacc.c  */
#line 6205 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->charset= &my_charset_latin1; }
    break;

  case 772:

/* Line 1455 of yacc.c  */
#line 6207 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->charset= &my_charset_latin1_bin;
          }
    break;

  case 773:

/* Line 1455 of yacc.c  */
#line 6211 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->charset= &my_charset_latin1_bin;
          }
    break;

  case 774:

/* Line 1455 of yacc.c  */
#line 6218 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!(Lex->charset=get_charset_by_csname("ucs2",
                                                     MY_CS_PRIMARY,MYF(0))))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), "ucs2");
              MYSQL_YYABORT;
            }
          }
    break;

  case 775:

/* Line 1455 of yacc.c  */
#line 6227 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!(Lex->charset=get_charset_by_name("ucs2_bin", MYF(0))))
            {
              my_error(ER_UNKNOWN_COLLATION, MYF(0), "ucs2_bin");
              MYSQL_YYABORT;
            }
          }
    break;

  case 776:

/* Line 1455 of yacc.c  */
#line 6235 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!(Lex->charset=get_charset_by_name("ucs2_bin", MYF(0))))
            {
              my_error(ER_UNKNOWN_COLLATION, MYF(0), "ucs2_bin");
              MYSQL_YYABORT;
            }
          }
    break;

  case 777:

/* Line 1455 of yacc.c  */
#line 6245 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->charset=NULL; }
    break;

  case 780:

/* Line 1455 of yacc.c  */
#line 6248 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->charset=&my_charset_bin; }
    break;

  case 781:

/* Line 1455 of yacc.c  */
#line 6249 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->charset=(yyvsp[(2) - (3)].charset); }
    break;

  case 782:

/* Line 1455 of yacc.c  */
#line 6251 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->charset= NULL;
            Lex->type|= BINCMP_FLAG;
          }
    break;

  case 783:

/* Line 1455 of yacc.c  */
#line 6256 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->charset= (yyvsp[(3) - (3)].charset);
            Lex->type|= BINCMP_FLAG;
          }
    break;

  case 784:

/* Line 1455 of yacc.c  */
#line 6263 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { }
    break;

  case 785:

/* Line 1455 of yacc.c  */
#line 6264 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= BINCMP_FLAG; }
    break;

  case 788:

/* Line 1455 of yacc.c  */
#line 6279 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.table)=(yyvsp[(2) - (5)].table);
          }
    break;

  case 789:

/* Line 1455 of yacc.c  */
#line 6286 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ref_list.empty(); }
    break;

  case 791:

/* Line 1455 of yacc.c  */
#line 6292 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Key_part_spec *key= new Key_part_spec((yyvsp[(3) - (3)].lex_str), 0);
            if (key == NULL)
              MYSQL_YYABORT;
            Lex->ref_list.push_back(key);
          }
    break;

  case 792:

/* Line 1455 of yacc.c  */
#line 6299 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Key_part_spec *key= new Key_part_spec((yyvsp[(1) - (1)].lex_str), 0);
            if (key == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->ref_list.empty();
            lex->ref_list.push_back(key);
          }
    break;

  case 793:

/* Line 1455 of yacc.c  */
#line 6311 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_UNDEF; }
    break;

  case 794:

/* Line 1455 of yacc.c  */
#line 6313 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_FULL; }
    break;

  case 795:

/* Line 1455 of yacc.c  */
#line 6315 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_PARTIAL; }
    break;

  case 796:

/* Line 1455 of yacc.c  */
#line 6317 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_SIMPLE; }
    break;

  case 797:

/* Line 1455 of yacc.c  */
#line 6322 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= Foreign_key::FK_OPTION_UNDEF;
            lex->fk_delete_opt= Foreign_key::FK_OPTION_UNDEF;
          }
    break;

  case 798:

/* Line 1455 of yacc.c  */
#line 6328 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= (yyvsp[(3) - (3)].m_fk_option);
            lex->fk_delete_opt= Foreign_key::FK_OPTION_UNDEF;
          }
    break;

  case 799:

/* Line 1455 of yacc.c  */
#line 6334 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= Foreign_key::FK_OPTION_UNDEF;
            lex->fk_delete_opt= (yyvsp[(3) - (3)].m_fk_option);
          }
    break;

  case 800:

/* Line 1455 of yacc.c  */
#line 6341 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= (yyvsp[(3) - (6)].m_fk_option);
            lex->fk_delete_opt= (yyvsp[(6) - (6)].m_fk_option);
          }
    break;

  case 801:

/* Line 1455 of yacc.c  */
#line 6348 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= (yyvsp[(6) - (6)].m_fk_option);
            lex->fk_delete_opt= (yyvsp[(3) - (6)].m_fk_option);
          }
    break;

  case 802:

/* Line 1455 of yacc.c  */
#line 6356 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_RESTRICT; }
    break;

  case 803:

/* Line 1455 of yacc.c  */
#line 6357 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_CASCADE; }
    break;

  case 804:

/* Line 1455 of yacc.c  */
#line 6358 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_SET_NULL; }
    break;

  case 805:

/* Line 1455 of yacc.c  */
#line 6359 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_NO_ACTION; }
    break;

  case 806:

/* Line 1455 of yacc.c  */
#line 6360 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_DEFAULT;  }
    break;

  case 807:

/* Line 1455 of yacc.c  */
#line 6364 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::MULTIPLE; }
    break;

  case 808:

/* Line 1455 of yacc.c  */
#line 6368 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::PRIMARY; }
    break;

  case 809:

/* Line 1455 of yacc.c  */
#line 6369 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::UNIQUE; }
    break;

  case 810:

/* Line 1455 of yacc.c  */
#line 6373 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 811:

/* Line 1455 of yacc.c  */
#line 6374 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 812:

/* Line 1455 of yacc.c  */
#line 6378 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 814:

/* Line 1455 of yacc.c  */
#line 6383 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 815:

/* Line 1455 of yacc.c  */
#line 6384 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 816:

/* Line 1455 of yacc.c  */
#line 6385 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 817:

/* Line 1455 of yacc.c  */
#line 6389 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::MULTIPLE; }
    break;

  case 818:

/* Line 1455 of yacc.c  */
#line 6390 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::UNIQUE; }
    break;

  case 819:

/* Line 1455 of yacc.c  */
#line 6394 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::FULLTEXT;}
    break;

  case 820:

/* Line 1455 of yacc.c  */
#line 6399 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            (yyval.key_type)= Key::SPATIAL;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
    break;

  case 821:

/* Line 1455 of yacc.c  */
#line 6411 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->key_create_info= default_key_create_info;
          }
    break;

  case 824:

/* Line 1455 of yacc.c  */
#line 6428 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 826:

/* Line 1455 of yacc.c  */
#line 6433 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 828:

/* Line 1455 of yacc.c  */
#line 6438 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 836:

/* Line 1455 of yacc.c  */
#line 6458 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->key_create_info.algorithm= (yyvsp[(2) - (2)].key_alg); }
    break;

  case 837:

/* Line 1455 of yacc.c  */
#line 6459 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->key_create_info.algorithm= (yyvsp[(2) - (2)].key_alg); }
    break;

  case 838:

/* Line 1455 of yacc.c  */
#line 6464 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->key_create_info.block_size= (yyvsp[(3) - (3)].ulong_num); }
    break;

  case 839:

/* Line 1455 of yacc.c  */
#line 6465 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->key_create_info.comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 840:

/* Line 1455 of yacc.c  */
#line 6467 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            new (YYTHD->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), true, &Lex->option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 841:

/* Line 1455 of yacc.c  */
#line 6473 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            new (YYTHD->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), false, &Lex->option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 842:

/* Line 1455 of yacc.c  */
#line 6479 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            new (YYTHD->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].ulonglong_number), &Lex->option_list,
                                  &Lex->option_list_last, YYTHD->mem_root);
          }
    break;

  case 843:

/* Line 1455 of yacc.c  */
#line 6485 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            new (YYTHD->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), &Lex->option_list, &Lex->option_list_last);
          }
    break;

  case 848:

/* Line 1455 of yacc.c  */
#line 6503 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (plugin_is_ready(&(yyvsp[(3) - (3)].lex_str), MYSQL_FTPARSER_PLUGIN))
              Lex->key_create_info.parser_name= (yyvsp[(3) - (3)].lex_str);
            else
            {
              my_error(ER_FUNCTION_NOT_DEFINED, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 849:

/* Line 1455 of yacc.c  */
#line 6515 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_BTREE; }
    break;

  case 850:

/* Line 1455 of yacc.c  */
#line 6516 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_RTREE; }
    break;

  case 851:

/* Line 1455 of yacc.c  */
#line 6517 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_HASH; }
    break;

  case 852:

/* Line 1455 of yacc.c  */
#line 6521 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->col_list.push_back((yyvsp[(3) - (4)].key_part)); }
    break;

  case 853:

/* Line 1455 of yacc.c  */
#line 6522 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->col_list.push_back((yyvsp[(1) - (2)].key_part)); }
    break;

  case 854:

/* Line 1455 of yacc.c  */
#line 6527 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.key_part)= new Key_part_spec((yyvsp[(1) - (1)].lex_str), 0);
            if ((yyval.key_part) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 855:

/* Line 1455 of yacc.c  */
#line 6533 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            int key_part_len= atoi((yyvsp[(3) - (4)].lex_str).str);
            if (!key_part_len)
            {
              my_error(ER_KEY_PART_0, MYF(0), (yyvsp[(1) - (4)].lex_str).str);
            }
            (yyval.key_part)= new Key_part_spec((yyvsp[(1) - (4)].lex_str), (uint) key_part_len);
            if ((yyval.key_part) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 856:

/* Line 1455 of yacc.c  */
#line 6546 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 857:

/* Line 1455 of yacc.c  */
#line 6547 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 858:

/* Line 1455 of yacc.c  */
#line 6551 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 859:

/* Line 1455 of yacc.c  */
#line 6552 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 860:

/* Line 1455 of yacc.c  */
#line 6556 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->interval_list.push_back((yyvsp[(1) - (1)].string)); }
    break;

  case 861:

/* Line 1455 of yacc.c  */
#line 6557 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->interval_list.push_back((yyvsp[(3) - (3)].string)); }
    break;

  case 862:

/* Line 1455 of yacc.c  */
#line 6565 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->name.str= 0;
            lex->name.length= 0;
            lex->sql_command= SQLCOM_ALTER_TABLE;
            lex->duplicates= DUP_ERROR; 
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(4) - (4)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_READ_NO_INSERT,
                                                   MDL_SHARED_NO_WRITE))
              MYSQL_YYABORT;
            lex->col_list.empty();
            lex->select_lex.init_order();
            lex->select_lex.db= (lex->select_lex.table_list.first)->db;
            bzero((char*) &lex->create_info,sizeof(lex->create_info));
            lex->create_info.db_type= 0;
            lex->create_info.default_table_charset= NULL;
            lex->create_info.row_type= ROW_TYPE_NOT_USED;
            lex->alter_info.reset();
            lex->no_write_to_binlog= 0;
            lex->create_info.storage_media= HA_SM_DEFAULT;
            lex->create_last_non_select_table= lex->last_table();
            DBUG_ASSERT(!lex->m_stmt);
          }
    break;

  case 863:

/* Line 1455 of yacc.c  */
#line 6591 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            if (!lex->m_stmt)
            {
              /* Create a generic ALTER TABLE statment. */
              lex->m_stmt= new (thd->mem_root) Alter_table_statement(lex);
              if (lex->m_stmt == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 864:

/* Line 1455 of yacc.c  */
#line 6603 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.default_table_charset= NULL;
            Lex->create_info.used_fields= 0;
          }
    break;

  case 865:

/* Line 1455 of yacc.c  */
#line 6608 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_ALTER_DB;
            lex->name= (yyvsp[(3) - (5)].lex_str);
            if (lex->name.str == NULL &&
                lex->copy_db_to(&lex->name.str, &lex->name.length))
              MYSQL_YYABORT;
          }
    break;

  case 866:

/* Line 1455 of yacc.c  */
#line 6617 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "DATABASE");
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_ALTER_DB_UPGRADE;
            lex->name= (yyvsp[(3) - (7)].lex_str);
          }
    break;

  case 867:

/* Line 1455 of yacc.c  */
#line 6628 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }
            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
    break;

  case 868:

/* Line 1455 of yacc.c  */
#line 6639 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->sql_command= SQLCOM_ALTER_PROCEDURE;
            lex->spname= (yyvsp[(3) - (5)].spname);
          }
    break;

  case 869:

/* Line 1455 of yacc.c  */
#line 6646 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
    break;

  case 870:

/* Line 1455 of yacc.c  */
#line 6657 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->sql_command= SQLCOM_ALTER_FUNCTION;
            lex->spname= (yyvsp[(3) - (5)].spname);
          }
    break;

  case 871:

/* Line 1455 of yacc.c  */
#line 6664 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "ALTER VIEW");
              MYSQL_YYABORT;
            }
            lex->create_view_mode= VIEW_ALTER;
          }
    break;

  case 872:

/* Line 1455 of yacc.c  */
#line 6675 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 873:

/* Line 1455 of yacc.c  */
#line 6682 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "ALTER VIEW");
              MYSQL_YYABORT;
            }
            lex->create_view_algorithm= DTYPE_ALGORITHM_UNDEFINED;
            lex->create_view_mode= VIEW_ALTER;
          }
    break;

  case 874:

/* Line 1455 of yacc.c  */
#line 6694 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 875:

/* Line 1455 of yacc.c  */
#line 6696 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* 
              It is safe to use Lex->spname because
              ALTER EVENT xxx RENATE TO yyy DO ALTER EVENT RENAME TO
              is not allowed. Lex->spname is used in the case of RENAME TO
              If it had to be supported spname had to be added to
              Event_parse_data.
            */

            if (!(Lex->event_parse_data= Event_parse_data::new_instance(YYTHD)))
              MYSQL_YYABORT;
            Lex->event_parse_data->identifier= (yyvsp[(4) - (4)].spname);

            Lex->sql_command= SQLCOM_ALTER_EVENT;
          }
    break;

  case 876:

/* Line 1455 of yacc.c  */
#line 6716 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!((yyvsp[(6) - (10)].num) || (yyvsp[(7) - (10)].num) || (yyvsp[(8) - (10)].num) || (yyvsp[(9) - (10)].num) || (yyvsp[(10) - (10)].num)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            /*
              sql_command is set here because some rules in ev_sql_stmt
              can overwrite it
            */
            Lex->sql_command= SQLCOM_ALTER_EVENT;
          }
    break;

  case 877:

/* Line 1455 of yacc.c  */
#line 6729 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_TABLESPACE;
          }
    break;

  case 878:

/* Line 1455 of yacc.c  */
#line 6734 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_LOGFILE_GROUP;
          }
    break;

  case 879:

/* Line 1455 of yacc.c  */
#line 6739 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= CHANGE_FILE_TABLESPACE;
          }
    break;

  case 880:

/* Line 1455 of yacc.c  */
#line 6744 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_ACCESS_MODE_TABLESPACE;
          }
    break;

  case 881:

/* Line 1455 of yacc.c  */
#line 6749 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_ALTER_SERVER;
            lex->server_options.server_name= (yyvsp[(3) - (7)].lex_str).str;
            lex->server_options.server_name_length= (yyvsp[(3) - (7)].lex_str).length;
          }
    break;

  case 882:

/* Line 1455 of yacc.c  */
#line 6758 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 883:

/* Line 1455 of yacc.c  */
#line 6759 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 884:

/* Line 1455 of yacc.c  */
#line 6760 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 885:

/* Line 1455 of yacc.c  */
#line 6761 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 886:

/* Line 1455 of yacc.c  */
#line 6765 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 887:

/* Line 1455 of yacc.c  */
#line 6767 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              Use lex's spname to hold the new name.
              The original name is in the Event_parse_data object
            */
            Lex->spname= (yyvsp[(3) - (3)].spname); 
            (yyval.num)= 1;
          }
    break;

  case 888:

/* Line 1455 of yacc.c  */
#line 6778 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 889:

/* Line 1455 of yacc.c  */
#line 6779 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 890:

/* Line 1455 of yacc.c  */
#line 6783 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str).str= 0; (yyval.lex_str).length= 0; }
    break;

  case 891:

/* Line 1455 of yacc.c  */
#line 6784 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 893:

/* Line 1455 of yacc.c  */
#line 6789 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->alter_info.tablespace_op= DISCARD_TABLESPACE; }
    break;

  case 894:

/* Line 1455 of yacc.c  */
#line 6790 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->alter_info.tablespace_op= IMPORT_TABLESPACE; }
    break;

  case 900:

/* Line 1455 of yacc.c  */
#line 6807 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_DROP_PARTITION;
          }
    break;

  case 901:

/* Line 1455 of yacc.c  */
#line 6812 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_info.flags|= ALTER_REBUILD_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
          }
    break;

  case 902:

/* Line 1455 of yacc.c  */
#line 6819 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root)
                          Alter_table_optimize_partition_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 904:

/* Line 1455 of yacc.c  */
#line 6833 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root)
                          Alter_table_analyze_partition_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 905:

/* Line 1455 of yacc.c  */
#line 6845 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root)
                          Alter_table_check_partition_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 907:

/* Line 1455 of yacc.c  */
#line 6858 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root)
                          Alter_table_repair_partition_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 909:

/* Line 1455 of yacc.c  */
#line 6871 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_info.flags|= ALTER_COALESCE_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->alter_info.num_parts= (yyvsp[(4) - (4)].ulong_num);
          }
    break;

  case 910:

/* Line 1455 of yacc.c  */
#line 6878 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root)
                          Alter_table_truncate_partition_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 912:

/* Line 1455 of yacc.c  */
#line 6893 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_REMOVE_PARTITIONING;
          }
    break;

  case 913:

/* Line 1455 of yacc.c  */
#line 6900 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_ALL_PARTITION;
          }
    break;

  case 915:

/* Line 1455 of yacc.c  */
#line 6908 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info= new partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            lex->alter_info.flags|= ALTER_ADD_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (3)].num);
          }
    break;

  case 916:

/* Line 1455 of yacc.c  */
#line 6920 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 918:

/* Line 1455 of yacc.c  */
#line 6926 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info->num_parts= lex->part_info->partitions.elements;
          }
    break;

  case 919:

/* Line 1455 of yacc.c  */
#line 6931 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->part_info->num_parts= (yyvsp[(2) - (2)].ulong_num);
          }
    break;

  case 920:

/* Line 1455 of yacc.c  */
#line 6938 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info= new partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            lex->no_write_to_binlog= (yyvsp[(3) - (3)].num);
          }
    break;

  case 922:

/* Line 1455 of yacc.c  */
#line 6953 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_TABLE_REORG;
          }
    break;

  case 923:

/* Line 1455 of yacc.c  */
#line 6957 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_REORGANIZE_PARTITION;
          }
    break;

  case 924:

/* Line 1455 of yacc.c  */
#line 6961 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->num_parts= part_info->partitions.elements;
          }
    break;

  case 925:

/* Line 1455 of yacc.c  */
#line 6968 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 926:

/* Line 1455 of yacc.c  */
#line 6969 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 927:

/* Line 1455 of yacc.c  */
#line 6974 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->alter_info.partition_names.push_back((yyvsp[(1) - (1)].lex_str).str))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
          }
    break;

  case 930:

/* Line 1455 of yacc.c  */
#line 6994 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->change=0;
            lex->alter_info.flags|= ALTER_ADD_COLUMN;
          }
    break;

  case 931:

/* Line 1455 of yacc.c  */
#line 7003 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
          }
    break;

  case 932:

/* Line 1455 of yacc.c  */
#line 7007 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
            Lex->alter_info.flags|= ALTER_ADD_INDEX;
          }
    break;

  case 933:

/* Line 1455 of yacc.c  */
#line 7012 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_ADD_COLUMN | ALTER_ADD_INDEX;
          }
    break;

  case 934:

/* Line 1455 of yacc.c  */
#line 7016 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->change= (yyvsp[(3) - (3)].lex_str).str;
            lex->alter_info.flags|= ALTER_CHANGE_COLUMN;
            lex->option_list= NULL;
          }
    break;

  case 935:

/* Line 1455 of yacc.c  */
#line 7023 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
          }
    break;

  case 936:

/* Line 1455 of yacc.c  */
#line 7027 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->length=lex->dec=0; lex->type=0;
            lex->default_value= lex->on_update_value= 0;
            lex->comment=null_lex_str;
            lex->charset= NULL;
            lex->alter_info.flags|= ALTER_CHANGE_COLUMN;
	    lex->vcol_info= 0;
            lex->option_list= NULL;
          }
    break;

  case 937:

/* Line 1455 of yacc.c  */
#line 7038 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (add_field_to_list(lex->thd,&(yyvsp[(3) - (5)].lex_str),
                                  (enum enum_field_types) (yyvsp[(5) - (5)].num),
                                  lex->length,lex->dec,lex->type,
                                  lex->default_value, lex->on_update_value,
                                  &lex->comment,
                                  (yyvsp[(3) - (5)].lex_str).str, &lex->interval_list, lex->charset,
                                  lex->uint_geom_type,
                                  lex->vcol_info, lex->option_list))
              MYSQL_YYABORT;
          }
    break;

  case 938:

/* Line 1455 of yacc.c  */
#line 7051 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
          }
    break;

  case 939:

/* Line 1455 of yacc.c  */
#line 7055 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::COLUMN, (yyvsp[(3) - (4)].lex_str).str);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= ALTER_DROP_COLUMN;
          }
    break;

  case 940:

/* Line 1455 of yacc.c  */
#line 7064 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_DROP_INDEX | ALTER_FOREIGN_KEY;
          }
    break;

  case 941:

/* Line 1455 of yacc.c  */
#line 7068 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, primary_key_name);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= ALTER_DROP_INDEX;
          }
    break;

  case 942:

/* Line 1455 of yacc.c  */
#line 7077 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, (yyvsp[(3) - (3)].lex_str).str);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= ALTER_DROP_INDEX;
          }
    break;

  case 943:

/* Line 1455 of yacc.c  */
#line 7086 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.keys_onoff= DISABLE;
            lex->alter_info.flags|= ALTER_KEYS_ONOFF;
          }
    break;

  case 944:

/* Line 1455 of yacc.c  */
#line 7092 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.keys_onoff= ENABLE;
            lex->alter_info.flags|= ALTER_KEYS_ONOFF;
          }
    break;

  case 945:

/* Line 1455 of yacc.c  */
#line 7098 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_column *ac= new Alter_column((yyvsp[(3) - (6)].lex_str).str,(yyvsp[(6) - (6)].item));
            if (ac == NULL)
              MYSQL_YYABORT;
            lex->alter_info.alter_list.push_back(ac);
            lex->alter_info.flags|= ALTER_CHANGE_COLUMN_DEFAULT;
          }
    break;

  case 946:

/* Line 1455 of yacc.c  */
#line 7107 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_column *ac= new Alter_column((yyvsp[(3) - (5)].lex_str).str, (Item*) 0);
            if (ac == NULL)
              MYSQL_YYABORT;
            lex->alter_info.alter_list.push_back(ac);
            lex->alter_info.flags|= ALTER_CHANGE_COLUMN_DEFAULT;
          }
    break;

  case 947:

/* Line 1455 of yacc.c  */
#line 7116 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            size_t dummy;
            lex->select_lex.db=(yyvsp[(3) - (3)].table)->db.str;
            if (lex->select_lex.db == NULL &&
                lex->copy_db_to(&lex->select_lex.db, &dummy))
            {
              MYSQL_YYABORT;
            }
            if (check_table_name((yyvsp[(3) - (3)].table)->table.str,(yyvsp[(3) - (3)].table)->table.length, FALSE) ||
                ((yyvsp[(3) - (3)].table)->db.str && check_db_name(&(yyvsp[(3) - (3)].table)->db)))
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(3) - (3)].table)->table.str);
              MYSQL_YYABORT;
            }
            lex->name= (yyvsp[(3) - (3)].table)->table;
            lex->alter_info.flags|= ALTER_RENAME;
          }
    break;

  case 948:

/* Line 1455 of yacc.c  */
#line 7135 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!(yyvsp[(4) - (5)].charset))
            {
              THD *thd= YYTHD;
              (yyvsp[(4) - (5)].charset)= thd->variables.collation_database;
            }
            (yyvsp[(5) - (5)].charset)= (yyvsp[(5) - (5)].charset) ? (yyvsp[(5) - (5)].charset) : (yyvsp[(4) - (5)].charset);
            if (!my_charset_same((yyvsp[(4) - (5)].charset),(yyvsp[(5) - (5)].charset)))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       (yyvsp[(5) - (5)].charset)->name, (yyvsp[(4) - (5)].charset)->csname);
              MYSQL_YYABORT;
            }
            LEX *lex= Lex;
            lex->create_info.table_charset=
            lex->create_info.default_table_charset= (yyvsp[(5) - (5)].charset);
            lex->create_info.used_fields|= (HA_CREATE_USED_CHARSET |
              HA_CREATE_USED_DEFAULT_CHARSET);
            lex->alter_info.flags|= ALTER_CONVERT;
          }
    break;

  case 949:

/* Line 1455 of yacc.c  */
#line 7156 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.flags|= ALTER_OPTIONS;
            if ((lex->create_info.used_fields & HA_CREATE_USED_ENGINE) &&
                !lex->create_info.db_type)
            {
              lex->create_info.used_fields&= ~HA_CREATE_USED_ENGINE;
            }
          }
    break;

  case 950:

/* Line 1455 of yacc.c  */
#line 7166 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_RECREATE;
          }
    break;

  case 951:

/* Line 1455 of yacc.c  */
#line 7170 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.flags|= ALTER_ORDER;
          }
    break;

  case 952:

/* Line 1455 of yacc.c  */
#line 7177 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 953:

/* Line 1455 of yacc.c  */
#line 7178 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 954:

/* Line 1455 of yacc.c  */
#line 7182 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ignore= 0;}
    break;

  case 955:

/* Line 1455 of yacc.c  */
#line 7183 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ignore= 1;}
    break;

  case 956:

/* Line 1455 of yacc.c  */
#line 7187 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ignore= Lex->online= 0;}
    break;

  case 962:

/* Line 1455 of yacc.c  */
#line 7201 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ignore= 1;}
    break;

  case 963:

/* Line 1455 of yacc.c  */
#line 7202 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->online= 1;}
    break;

  case 964:

/* Line 1455 of yacc.c  */
#line 7206 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->drop_mode= DROP_DEFAULT; }
    break;

  case 965:

/* Line 1455 of yacc.c  */
#line 7207 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->drop_mode= DROP_RESTRICT; }
    break;

  case 966:

/* Line 1455 of yacc.c  */
#line 7208 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->drop_mode= DROP_CASCADE; }
    break;

  case 967:

/* Line 1455 of yacc.c  */
#line 7212 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 968:

/* Line 1455 of yacc.c  */
#line 7213 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { store_position_for_column((yyvsp[(2) - (2)].lex_str).str); }
    break;

  case 969:

/* Line 1455 of yacc.c  */
#line 7214 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { store_position_for_column(first_keyword); }
    break;

  case 970:

/* Line 1455 of yacc.c  */
#line 7218 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 971:

/* Line 1455 of yacc.c  */
#line 7219 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 972:

/* Line 1455 of yacc.c  */
#line 7220 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 973:

/* Line 1455 of yacc.c  */
#line 7221 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 974:

/* Line 1455 of yacc.c  */
#line 7230 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_START;
            lex->type = 0;
            /* If you change this code don't forget to update SLAVE START too */
          }
    break;

  case 975:

/* Line 1455 of yacc.c  */
#line 7237 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 976:

/* Line 1455 of yacc.c  */
#line 7239 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_ALL_START;
            lex->type = 0;
          }
    break;

  case 977:

/* Line 1455 of yacc.c  */
#line 7244 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 978:

/* Line 1455 of yacc.c  */
#line 7246 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_STOP;
            lex->type = 0;
            /* If you change this code don't forget to update SLAVE STOP too */
          }
    break;

  case 979:

/* Line 1455 of yacc.c  */
#line 7253 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_ALL_STOP;
            lex->type = 0;
            /* If you change this code don't forget to update SLAVE STOP too */
          }
    break;

  case 980:

/* Line 1455 of yacc.c  */
#line 7260 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_START;
            lex->type = 0;
          }
    break;

  case 981:

/* Line 1455 of yacc.c  */
#line 7266 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 982:

/* Line 1455 of yacc.c  */
#line 7268 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_STOP;
            lex->type = 0;
          }
    break;

  case 983:

/* Line 1455 of yacc.c  */
#line 7277 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_BEGIN;
            /* READ ONLY and READ WRITE are mutually exclusive. */
            if (((yyvsp[(3) - (3)].num) & MYSQL_START_TRANS_OPT_READ_WRITE) &&
                ((yyvsp[(3) - (3)].num) & MYSQL_START_TRANS_OPT_READ_ONLY))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->start_transaction_opt= (yyvsp[(3) - (3)].num);
          }
    break;

  case 984:

/* Line 1455 of yacc.c  */
#line 7293 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= 0;
          }
    break;

  case 985:

/* Line 1455 of yacc.c  */
#line 7297 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= (yyvsp[(1) - (1)].num);
          }
    break;

  case 986:

/* Line 1455 of yacc.c  */
#line 7304 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= (yyvsp[(1) - (1)].num);
          }
    break;

  case 987:

/* Line 1455 of yacc.c  */
#line 7308 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= (yyvsp[(1) - (3)].num) | (yyvsp[(3) - (3)].num);
          }
    break;

  case 988:

/* Line 1455 of yacc.c  */
#line 7315 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_START_TRANS_OPT_WITH_CONS_SNAPSHOT;
          }
    break;

  case 989:

/* Line 1455 of yacc.c  */
#line 7319 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_START_TRANS_OPT_READ_ONLY;
          }
    break;

  case 990:

/* Line 1455 of yacc.c  */
#line 7323 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_START_TRANS_OPT_READ_WRITE;
          }
    break;

  case 991:

/* Line 1455 of yacc.c  */
#line 7329 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->slave_thd_opt= 0; }
    break;

  case 992:

/* Line 1455 of yacc.c  */
#line 7331 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 995:

/* Line 1455 of yacc.c  */
#line 7340 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 996:

/* Line 1455 of yacc.c  */
#line 7341 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->slave_thd_opt|=SLAVE_SQL; }
    break;

  case 997:

/* Line 1455 of yacc.c  */
#line 7342 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->slave_thd_opt|=SLAVE_IO; }
    break;

  case 998:

/* Line 1455 of yacc.c  */
#line 7346 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 999:

/* Line 1455 of yacc.c  */
#line 7348 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (((lex->mi.log_file_name || lex->mi.pos) &&
                 (lex->mi.relay_log_name || lex->mi.relay_log_pos)) ||
                !((lex->mi.log_file_name && lex->mi.pos) ||
                  (lex->mi.relay_log_name && lex->mi.relay_log_pos)))
            {
               my_message(ER_BAD_SLAVE_UNTIL_COND,
                          ER(ER_BAD_SLAVE_UNTIL_COND), MYF(0));
               MYSQL_YYABORT;
            }
          }
    break;

  case 1002:

/* Line 1455 of yacc.c  */
#line 7369 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_CHECKSUM;
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1003:

/* Line 1455 of yacc.c  */
#line 7376 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1004:

/* Line 1455 of yacc.c  */
#line 7380 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.flags= 0; }
    break;

  case 1005:

/* Line 1455 of yacc.c  */
#line 7381 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.flags= T_QUICK; }
    break;

  case 1006:

/* Line 1455 of yacc.c  */
#line 7382 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.flags= T_EXTEND; }
    break;

  case 1007:

/* Line 1455 of yacc.c  */
#line 7387 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_REPAIR;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1008:

/* Line 1455 of yacc.c  */
#line 7397 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root) Repair_table_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1009:

/* Line 1455 of yacc.c  */
#line 7408 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.flags = T_MEDIUM; }
    break;

  case 1010:

/* Line 1455 of yacc.c  */
#line 7409 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1011:

/* Line 1455 of yacc.c  */
#line 7413 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1012:

/* Line 1455 of yacc.c  */
#line 7414 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1013:

/* Line 1455 of yacc.c  */
#line 7418 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_QUICK; }
    break;

  case 1014:

/* Line 1455 of yacc.c  */
#line 7419 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_EXTEND; }
    break;

  case 1015:

/* Line 1455 of yacc.c  */
#line 7420 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.sql_flags|= TT_USEFRM; }
    break;

  case 1016:

/* Line 1455 of yacc.c  */
#line 7425 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_ANALYZE;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1017:

/* Line 1455 of yacc.c  */
#line 7435 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root) Analyze_table_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1018:

/* Line 1455 of yacc.c  */
#line 7447 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_BINLOG_BASE64_EVENT;
            Lex->comment= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 1019:

/* Line 1455 of yacc.c  */
#line 7455 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "CHECK");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_CHECK;
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1020:

/* Line 1455 of yacc.c  */
#line 7470 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root) Check_table_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1021:

/* Line 1455 of yacc.c  */
#line 7481 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.flags = T_MEDIUM; }
    break;

  case 1022:

/* Line 1455 of yacc.c  */
#line 7482 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1023:

/* Line 1455 of yacc.c  */
#line 7486 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1024:

/* Line 1455 of yacc.c  */
#line 7487 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1025:

/* Line 1455 of yacc.c  */
#line 7491 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_QUICK; }
    break;

  case 1026:

/* Line 1455 of yacc.c  */
#line 7492 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_FAST; }
    break;

  case 1027:

/* Line 1455 of yacc.c  */
#line 7493 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_MEDIUM; }
    break;

  case 1028:

/* Line 1455 of yacc.c  */
#line 7494 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_EXTEND; }
    break;

  case 1029:

/* Line 1455 of yacc.c  */
#line 7495 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_CHECK_ONLY_CHANGED; }
    break;

  case 1030:

/* Line 1455 of yacc.c  */
#line 7496 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.sql_flags|= TT_FOR_UPGRADE; }
    break;

  case 1031:

/* Line 1455 of yacc.c  */
#line 7501 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_OPTIMIZE;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1032:

/* Line 1455 of yacc.c  */
#line 7511 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root) Optimize_table_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1033:

/* Line 1455 of yacc.c  */
#line 7522 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1034:

/* Line 1455 of yacc.c  */
#line 7523 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1035:

/* Line 1455 of yacc.c  */
#line 7524 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1036:

/* Line 1455 of yacc.c  */
#line 7529 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_RENAME_TABLE;
          }
    break;

  case 1037:

/* Line 1455 of yacc.c  */
#line 7533 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1038:

/* Line 1455 of yacc.c  */
#line 7535 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_RENAME_USER;
          }
    break;

  case 1039:

/* Line 1455 of yacc.c  */
#line 7542 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (3)].lex_user)) || Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 1040:

/* Line 1455 of yacc.c  */
#line 7547 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (5)].lex_user)) || Lex->users_list.push_back((yyvsp[(5) - (5)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 1043:

/* Line 1455 of yacc.c  */
#line 7560 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            SELECT_LEX *sl= lex->current_select;
            if (!sl->add_table_to_list(lex->thd, (yyvsp[(1) - (3)].table),NULL,TL_OPTION_UPDATING,
                                       TL_IGNORE, MDL_EXCLUSIVE) ||
                !sl->add_table_to_list(lex->thd, (yyvsp[(3) - (3)].table),NULL,TL_OPTION_UPDATING,
                                       TL_IGNORE, MDL_EXCLUSIVE))
              MYSQL_YYABORT;
          }
    break;

  case 1044:

/* Line 1455 of yacc.c  */
#line 7573 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->alter_info.reset();
          }
    break;

  case 1045:

/* Line 1455 of yacc.c  */
#line 7577 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ASSIGN_TO_KEYCACHE;
            lex->ident= (yyvsp[(6) - (6)].lex_str);
          }
    break;

  case 1050:

/* Line 1455 of yacc.c  */
#line 7596 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (2)].table), NULL, 0, TL_READ,
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1051:

/* Line 1455 of yacc.c  */
#line 7606 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (3)].table), NULL, 0, TL_READ, 
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1052:

/* Line 1455 of yacc.c  */
#line 7615 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 1053:

/* Line 1455 of yacc.c  */
#line 7616 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str) = default_key_cache_base; }
    break;

  case 1054:

/* Line 1455 of yacc.c  */
#line 7621 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_PRELOAD_KEYS;
            lex->alter_info.reset();
          }
    break;

  case 1055:

/* Line 1455 of yacc.c  */
#line 7627 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1060:

/* Line 1455 of yacc.c  */
#line 7642 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (3)].table), NULL, (yyvsp[(3) - (3)].num), TL_READ,
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1061:

/* Line 1455 of yacc.c  */
#line 7652 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (4)].table), NULL, (yyvsp[(4) - (4)].num), TL_READ,
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1062:

/* Line 1455 of yacc.c  */
#line 7662 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_ADMIN_PARTITION;
          }
    break;

  case 1064:

/* Line 1455 of yacc.c  */
#line 7669 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->select_lex.alloc_index_hints(YYTHD);
            Select->set_index_hint_type(INDEX_HINT_USE, 
                                        INDEX_HINT_MASK_ALL);
          }
    break;

  case 1066:

/* Line 1455 of yacc.c  */
#line 7678 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { }
    break;

  case 1068:

/* Line 1455 of yacc.c  */
#line 7684 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1069:

/* Line 1455 of yacc.c  */
#line 7685 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= TL_OPTION_IGNORE_LEAVES; }
    break;

  case 1070:

/* Line 1455 of yacc.c  */
#line 7695 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SELECT;
          }
    break;

  case 1073:

/* Line 1455 of yacc.c  */
#line 7709 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (setup_select_in_parentheses(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1075:

/* Line 1455 of yacc.c  */
#line 7719 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (setup_select_in_parentheses(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1077:

/* Line 1455 of yacc.c  */
#line 7728 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX * sel= lex->current_select;
            if (lex->current_select->set_braces(0))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (sel->linkage == UNION_TYPE &&
                sel->master_unit()->first_select()->braces)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1079:

/* Line 1455 of yacc.c  */
#line 7747 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->linkage != UNION_TYPE)
              mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 1080:

/* Line 1455 of yacc.c  */
#line 7755 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1082:

/* Line 1455 of yacc.c  */
#line 7762 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1087:

/* Line 1455 of yacc.c  */
#line 7772 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->context.table_list=
              Select->context.first_name_resolution_table=
                Select->table_list.first;
          }
    break;

  case 1090:

/* Line 1455 of yacc.c  */
#line 7787 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Select->options & SELECT_DISTINCT && Select->options & SELECT_ALL)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "ALL", "DISTINCT");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1094:

/* Line 1455 of yacc.c  */
#line 7804 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* 
              Allow this flag only on the first top-level SELECT statement, if
              SQL_CACHE wasn't specified, and only once per query.
             */
            if (Lex->current_select != &Lex->select_lex)
            {
              my_error(ER_CANT_USE_OPTION_HERE, MYF(0), "SQL_NO_CACHE");
              MYSQL_YYABORT;
            }
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_CACHE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "SQL_CACHE", "SQL_NO_CACHE");
              MYSQL_YYABORT;
            }
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_NO_CACHE)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "SQL_NO_CACHE");
              MYSQL_YYABORT;
            }
            else
            {
              Lex->safe_to_cache_query=0;
              Lex->select_lex.options&= ~OPTION_TO_QUERY_CACHE;
              Lex->select_lex.sql_cache= SELECT_LEX::SQL_NO_CACHE;
            }
          }
    break;

  case 1095:

/* Line 1455 of yacc.c  */
#line 7832 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* 
              Allow this flag only on the first top-level SELECT statement, if
              SQL_NO_CACHE wasn't specified, and only once per query.
             */
            if (Lex->current_select != &Lex->select_lex)
            {
              my_error(ER_CANT_USE_OPTION_HERE, MYF(0), "SQL_CACHE");
              MYSQL_YYABORT;
            }         
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_NO_CACHE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "SQL_NO_CACHE", "SQL_CACHE");
              MYSQL_YYABORT;
            }
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_CACHE)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "SQL_CACHE");
              MYSQL_YYABORT;
            }
            else
            {
              Lex->safe_to_cache_query=1;
              Lex->select_lex.options|= OPTION_TO_QUERY_CACHE;
              Lex->select_lex.sql_cache= SELECT_LEX::SQL_CACHE;
            }
          }
    break;

  case 1097:

/* Line 1455 of yacc.c  */
#line 7864 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->current_select->set_lock_for_tables(TL_WRITE);
            lex->safe_to_cache_query=0;
          }
    break;

  case 1098:

/* Line 1455 of yacc.c  */
#line 7870 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->current_select->
              set_lock_for_tables(TL_READ_WITH_SHARED_LOCKS);
            lex->safe_to_cache_query=0;
          }
    break;

  case 1101:

/* Line 1455 of yacc.c  */
#line 7882 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *item= new (thd->mem_root)
                          Item_field(&thd->lex->current_select->context,
                                     NULL, NULL, "*");
            if (item == NULL)
              MYSQL_YYABORT;
            if (add_item_to_list(thd, item))
              MYSQL_YYABORT;
            (thd->lex->current_select->with_wild)++;
          }
    break;

  case 1102:

/* Line 1455 of yacc.c  */
#line 7897 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (add_item_to_list(thd, (yyvsp[(2) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1103:

/* Line 1455 of yacc.c  */
#line 7904 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            DBUG_ASSERT((yyvsp[(1) - (4)].simple_string) < (yyvsp[(3) - (4)].simple_string));

            if (add_item_to_list(thd, (yyvsp[(2) - (4)].item)))
              MYSQL_YYABORT;
            if ((yyvsp[(4) - (4)].lex_str).str)
            {
              if (Lex->sql_command == SQLCOM_CREATE_VIEW &&
                  check_column_name((yyvsp[(4) - (4)].lex_str).str))
              {
                my_error(ER_WRONG_COLUMN_NAME, MYF(0), (yyvsp[(4) - (4)].lex_str).str);
                MYSQL_YYABORT;
              }
              (yyvsp[(2) - (4)].item)->is_autogenerated_name= FALSE;
              (yyvsp[(2) - (4)].item)->set_name((yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length, system_charset_info);
            }
            else if (!(yyvsp[(2) - (4)].item)->name)
            {
              (yyvsp[(2) - (4)].item)->set_name((yyvsp[(1) - (4)].simple_string), (uint) ((yyvsp[(3) - (4)].simple_string) - (yyvsp[(1) - (4)].simple_string)), thd->charset());
            }
          }
    break;

  case 1104:

/* Line 1455 of yacc.c  */
#line 7929 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.simple_string)= (char*) YYLIP->get_cpp_tok_start();
          }
    break;

  case 1105:

/* Line 1455 of yacc.c  */
#line 7935 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.simple_string)= (char*) YYLIP->get_cpp_tok_end();
          }
    break;

  case 1106:

/* Line 1455 of yacc.c  */
#line 7941 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)=null_lex_str;}
    break;

  case 1107:

/* Line 1455 of yacc.c  */
#line 7942 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str); }
    break;

  case 1108:

/* Line 1455 of yacc.c  */
#line 7943 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str); }
    break;

  case 1109:

/* Line 1455 of yacc.c  */
#line 7944 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1110:

/* Line 1455 of yacc.c  */
#line 7945 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1111:

/* Line 1455 of yacc.c  */
#line 7949 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0;  }
    break;

  case 1112:

/* Line 1455 of yacc.c  */
#line 7950 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0;  }
    break;

  case 1113:

/* Line 1455 of yacc.c  */
#line 7951 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(2) - (3)].ulong_num); }
    break;

  case 1114:

/* Line 1455 of yacc.c  */
#line 7955 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1115:

/* Line 1455 of yacc.c  */
#line 7956 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1116:

/* Line 1455 of yacc.c  */
#line 7962 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              Design notes:
              Do not use a manually maintained stack like thd->lex->xxx_list,
              but use the internal bison stack ($$, $1 and $3) instead.
              Using the bison stack is:
              - more robust to changes in the grammar,
              - guaranteed to be in sync with the parser state,
              - better for performances (no memory allocation).
            */
            Item_cond_or *item1;
            Item_cond_or *item3;
            if (is_cond_or((yyvsp[(1) - (3)].item)))
            {
              item1= (Item_cond_or*) (yyvsp[(1) - (3)].item);
              if (is_cond_or((yyvsp[(3) - (3)].item)))
              {
                item3= (Item_cond_or*) (yyvsp[(3) - (3)].item);
                /*
                  (X1 OR X2) OR (Y1 OR Y2) ==> OR (X1, X2, Y1, Y2)
                */
                item3->add_at_head(item1->argument_list());
                (yyval.item) = (yyvsp[(3) - (3)].item);
              }
              else
              {
                /*
                  (X1 OR X2) OR Y ==> OR (X1, X2, Y)
                */
                item1->add((yyvsp[(3) - (3)].item));
                (yyval.item) = (yyvsp[(1) - (3)].item);
              }
            }
            else if (is_cond_or((yyvsp[(3) - (3)].item)))
            {
              item3= (Item_cond_or*) (yyvsp[(3) - (3)].item);
              /*
                X OR (Y1 OR Y2) ==> OR (X, Y1, Y2)
              */
              item3->add_at_head((yyvsp[(1) - (3)].item));
              (yyval.item) = (yyvsp[(3) - (3)].item);
            }
            else
            {
              /* X OR Y */
              (yyval.item) = new (YYTHD->mem_root) Item_cond_or((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1117:

/* Line 1455 of yacc.c  */
#line 8013 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* XOR is a proprietary extension */
            (yyval.item) = new (YYTHD->mem_root) Item_func_xor((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1118:

/* Line 1455 of yacc.c  */
#line 8020 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* See comments in rule expr: expr or expr */
            Item_cond_and *item1;
            Item_cond_and *item3;
            if (is_cond_and((yyvsp[(1) - (3)].item)))
            {
              item1= (Item_cond_and*) (yyvsp[(1) - (3)].item);
              if (is_cond_and((yyvsp[(3) - (3)].item)))
              {
                item3= (Item_cond_and*) (yyvsp[(3) - (3)].item);
                /*
                  (X1 AND X2) AND (Y1 AND Y2) ==> AND (X1, X2, Y1, Y2)
                */
                item3->add_at_head(item1->argument_list());
                (yyval.item) = (yyvsp[(3) - (3)].item);
              }
              else
              {
                /*
                  (X1 AND X2) AND Y ==> AND (X1, X2, Y)
                */
                item1->add((yyvsp[(3) - (3)].item));
                (yyval.item) = (yyvsp[(1) - (3)].item);
              }
            }
            else if (is_cond_and((yyvsp[(3) - (3)].item)))
            {
              item3= (Item_cond_and*) (yyvsp[(3) - (3)].item);
              /*
                X AND (Y1 AND Y2) ==> AND (X, Y1, Y2)
              */
              item3->add_at_head((yyvsp[(1) - (3)].item));
              (yyval.item) = (yyvsp[(3) - (3)].item);
            }
            else
            {
              /* X AND Y */
              (yyval.item) = new (YYTHD->mem_root) Item_cond_and((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1119:

/* Line 1455 of yacc.c  */
#line 8063 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= negate_expression(YYTHD, (yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1120:

/* Line 1455 of yacc.c  */
#line 8069 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_istrue((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1121:

/* Line 1455 of yacc.c  */
#line 8075 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnottrue((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1122:

/* Line 1455 of yacc.c  */
#line 8081 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isfalse((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1123:

/* Line 1455 of yacc.c  */
#line 8087 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnotfalse((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1124:

/* Line 1455 of yacc.c  */
#line 8093 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnull((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1125:

/* Line 1455 of yacc.c  */
#line 8099 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnotnull((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1127:

/* Line 1455 of yacc.c  */
#line 8109 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnull((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1128:

/* Line 1455 of yacc.c  */
#line 8115 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnotnull((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1129:

/* Line 1455 of yacc.c  */
#line 8121 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_equal((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1130:

/* Line 1455 of yacc.c  */
#line 8127 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= (*(yyvsp[(2) - (3)].boolfunc2creator))(0)->create((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1131:

/* Line 1455 of yacc.c  */
#line 8133 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= all_any_subquery_creator((yyvsp[(1) - (6)].item), (yyvsp[(2) - (6)].boolfunc2creator), (yyvsp[(3) - (6)].num), (yyvsp[(5) - (6)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1133:

/* Line 1455 of yacc.c  */
#line 8143 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_in_subselect((yyvsp[(1) - (5)].item), (yyvsp[(4) - (5)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1134:

/* Line 1455 of yacc.c  */
#line 8149 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *item= new (thd->mem_root) Item_in_subselect((yyvsp[(1) - (6)].item), (yyvsp[(5) - (6)].select_lex));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= negate_expression(thd, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1135:

/* Line 1455 of yacc.c  */
#line 8159 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= handle_sql2003_note184_exception(YYTHD, (yyvsp[(1) - (5)].item), true, (yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1136:

/* Line 1455 of yacc.c  */
#line 8165 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            (yyvsp[(6) - (7)].item_list)->push_front((yyvsp[(4) - (7)].item));
            (yyvsp[(6) - (7)].item_list)->push_front((yyvsp[(1) - (7)].item));
            (yyval.item)= new (YYTHD->mem_root) Item_func_in(*(yyvsp[(6) - (7)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1137:

/* Line 1455 of yacc.c  */
#line 8173 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= handle_sql2003_note184_exception(YYTHD, (yyvsp[(1) - (6)].item), false, (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1138:

/* Line 1455 of yacc.c  */
#line 8179 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(5) - (8)].item));
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(1) - (8)].item));
            Item_func_in *item = new (YYTHD->mem_root) Item_func_in(*(yyvsp[(7) - (8)].item_list));
            if (item == NULL)
              MYSQL_YYABORT;
            item->negate();
            (yyval.item)= item;
          }
    break;

  case 1139:

/* Line 1455 of yacc.c  */
#line 8189 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_between((yyvsp[(1) - (5)].item),(yyvsp[(3) - (5)].item),(yyvsp[(5) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1140:

/* Line 1455 of yacc.c  */
#line 8195 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item_func_between *item;
            item= new (YYTHD->mem_root) Item_func_between((yyvsp[(1) - (6)].item),(yyvsp[(4) - (6)].item),(yyvsp[(6) - (6)].item));
            if (item == NULL)
              MYSQL_YYABORT;
            item->negate();
            (yyval.item)= item;
          }
    break;

  case 1141:

/* Line 1455 of yacc.c  */
#line 8204 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item *item1= new (YYTHD->mem_root) Item_func_soundex((yyvsp[(1) - (4)].item));
            Item *item4= new (YYTHD->mem_root) Item_func_soundex((yyvsp[(4) - (4)].item));
            if ((item1 == NULL) || (item4 == NULL))
              MYSQL_YYABORT;
            (yyval.item)= new (YYTHD->mem_root) Item_func_eq(item1, item4);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1142:

/* Line 1455 of yacc.c  */
#line 8214 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_like((yyvsp[(1) - (4)].item),(yyvsp[(3) - (4)].item),(yyvsp[(4) - (4)].item),Lex->escape_used);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1143:

/* Line 1455 of yacc.c  */
#line 8220 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_func_like((yyvsp[(1) - (5)].item),(yyvsp[(4) - (5)].item),(yyvsp[(5) - (5)].item),
                                                             Lex->escape_used);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (YYTHD->mem_root) Item_func_not(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1144:

/* Line 1455 of yacc.c  */
#line 8230 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_regex((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1145:

/* Line 1455 of yacc.c  */
#line 8236 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_func_regex((yyvsp[(1) - (4)].item),(yyvsp[(4) - (4)].item));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= negate_expression(YYTHD, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1147:

/* Line 1455 of yacc.c  */
#line 8249 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_or((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1148:

/* Line 1455 of yacc.c  */
#line 8255 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_and((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1149:

/* Line 1455 of yacc.c  */
#line 8261 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_shift_left((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1150:

/* Line 1455 of yacc.c  */
#line 8267 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_shift_right((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1151:

/* Line 1455 of yacc.c  */
#line 8273 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_plus((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1152:

/* Line 1455 of yacc.c  */
#line 8279 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_minus((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1153:

/* Line 1455 of yacc.c  */
#line 8285 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(1) - (5)].item),(yyvsp[(4) - (5)].item),(yyvsp[(5) - (5)].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1154:

/* Line 1455 of yacc.c  */
#line 8291 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(1) - (5)].item),(yyvsp[(4) - (5)].item),(yyvsp[(5) - (5)].interval),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1155:

/* Line 1455 of yacc.c  */
#line 8297 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_mul((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1156:

/* Line 1455 of yacc.c  */
#line 8303 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_div((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1157:

/* Line 1455 of yacc.c  */
#line 8309 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_mod((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1158:

/* Line 1455 of yacc.c  */
#line 8315 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_int_div((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1159:

/* Line 1455 of yacc.c  */
#line 8321 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_mod((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1160:

/* Line 1455 of yacc.c  */
#line 8327 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_xor((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1170:

/* Line 1455 of yacc.c  */
#line 8356 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_eq_creator; }
    break;

  case 1171:

/* Line 1455 of yacc.c  */
#line 8357 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_ge_creator; }
    break;

  case 1172:

/* Line 1455 of yacc.c  */
#line 8358 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_gt_creator; }
    break;

  case 1173:

/* Line 1455 of yacc.c  */
#line 8359 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_le_creator; }
    break;

  case 1174:

/* Line 1455 of yacc.c  */
#line 8360 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_lt_creator; }
    break;

  case 1175:

/* Line 1455 of yacc.c  */
#line 8361 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_ne_creator; }
    break;

  case 1176:

/* Line 1455 of yacc.c  */
#line 8365 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num) = 1; }
    break;

  case 1177:

/* Line 1455 of yacc.c  */
#line 8366 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1178:

/* Line 1455 of yacc.c  */
#line 8371 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
	    (yyval.num)= DYN_COL_NULL; /* automatic type */
            lex->charset= NULL;
            lex->length= lex->dec= 0;
	  }
    break;

  case 1179:

/* Line 1455 of yacc.c  */
#line 8377 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(2) - (2)].num); }
    break;

  case 1180:

/* Line 1455 of yacc.c  */
#line 8382 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_INT;
            lex->charset= NULL;
            lex->length= lex->dec= 0;
          }
    break;

  case 1181:

/* Line 1455 of yacc.c  */
#line 8389 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_UINT;
            lex->charset= NULL;
            lex->length= lex->dec= 0;
          }
    break;

  case 1182:

/* Line 1455 of yacc.c  */
#line 8396 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_DOUBLE;
            lex->charset= NULL;
            lex->length= lex->dec= 0;
          }
    break;

  case 1183:

/* Line 1455 of yacc.c  */
#line 8403 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_DOUBLE;
            lex->charset= NULL;
            lex->length= lex->dec= 0;
          }
    break;

  case 1184:

/* Line 1455 of yacc.c  */
#line 8410 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_DOUBLE;
            lex->charset= NULL;
            lex->length= lex->dec= 0;
          }
    break;

  case 1185:

/* Line 1455 of yacc.c  */
#line 8417 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= DYN_COL_DECIMAL;
            Lex->charset= NULL;
          }
    break;

  case 1186:

/* Line 1455 of yacc.c  */
#line 8422 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_STRING;
            lex->length= lex->dec= 0;
          }
    break;

  case 1187:

/* Line 1455 of yacc.c  */
#line 8428 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_STRING;
            lex->charset= national_charset_info;
            lex->length= lex->dec= 0;
          }
    break;

  case 1188:

/* Line 1455 of yacc.c  */
#line 8435 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_DATE;
            lex->charset= NULL;
            lex->length= lex->dec= 0;
          }
    break;

  case 1189:

/* Line 1455 of yacc.c  */
#line 8442 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_TIME;
            lex->charset= NULL;
            lex->dec= lex->length;
            lex->length= 0;
          }
    break;

  case 1190:

/* Line 1455 of yacc.c  */
#line 8450 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_DATETIME;
            lex->charset= NULL;
            lex->dec= lex->length;
            lex->length= 0;
          }
    break;

  case 1191:

/* Line 1455 of yacc.c  */
#line 8461 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
     LEX *lex= Lex;
     (yyval.dyncol_def)= (DYNCALL_CREATE_DEF *)
       alloc_root(YYTHD->mem_root, sizeof(DYNCALL_CREATE_DEF));
     if ((yyval.dyncol_def) == NULL)
       MYSQL_YYABORT;
     (yyval.dyncol_def)->num= (yyvsp[(1) - (4)].item);
     (yyval.dyncol_def)->value= (yyvsp[(3) - (4)].item);
     (yyval.dyncol_def)->type= (DYNAMIC_COLUMN_TYPE)(yyvsp[(4) - (4)].num);
     (yyval.dyncol_def)->cs= lex->charset;
     if (lex->length)
       (yyval.dyncol_def)->len= strtoul(lex->length, NULL, 10);
     else
       (yyval.dyncol_def)->len= 0;
     if (lex->dec)
       (yyval.dyncol_def)->frac= strtoul(lex->dec, NULL, 10);
     else
       (yyval.dyncol_def)->len= 0;
   }
    break;

  case 1192:

/* Line 1455 of yacc.c  */
#line 8483 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
         (yyval.dyncol_def_list)= new (YYTHD->mem_root) List<DYNCALL_CREATE_DEF>;
         if ((yyval.dyncol_def_list) == NULL)
           MYSQL_YYABORT;
         (yyval.dyncol_def_list)->push_back((yyvsp[(1) - (1)].dyncol_def));
       }
    break;

  case 1193:

/* Line 1455 of yacc.c  */
#line 8490 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
         (yyvsp[(1) - (3)].dyncol_def_list)->push_back((yyvsp[(3) - (3)].dyncol_def));
         (yyval.dyncol_def_list)= (yyvsp[(1) - (3)].dyncol_def_list);
       }
    break;

  case 1199:

/* Line 1455 of yacc.c  */
#line 8503 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *i1= new (thd->mem_root) Item_string((yyvsp[(3) - (3)].lex_str).str,
                                                      (yyvsp[(3) - (3)].lex_str).length,
                                                      thd->charset());
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_set_collation((yyvsp[(1) - (3)].item), i1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1204:

/* Line 1455 of yacc.c  */
#line 8519 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_concat((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1205:

/* Line 1455 of yacc.c  */
#line 8525 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= (yyvsp[(2) - (2)].item);
          }
    break;

  case 1206:

/* Line 1455 of yacc.c  */
#line 8529 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_neg((yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1207:

/* Line 1455 of yacc.c  */
#line 8535 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_neg((yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1208:

/* Line 1455 of yacc.c  */
#line 8541 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= negate_expression(YYTHD, (yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1209:

/* Line 1455 of yacc.c  */
#line 8547 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            (yyval.item)= new (YYTHD->mem_root) Item_singlerow_subselect((yyvsp[(2) - (3)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1210:

/* Line 1455 of yacc.c  */
#line 8553 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(2) - (3)].item); }
    break;

  case 1211:

/* Line 1455 of yacc.c  */
#line 8555 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyvsp[(4) - (5)].item_list)->push_front((yyvsp[(2) - (5)].item));
            (yyval.item)= new (YYTHD->mem_root) Item_row(*(yyvsp[(4) - (5)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1212:

/* Line 1455 of yacc.c  */
#line 8562 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyvsp[(5) - (6)].item_list)->push_front((yyvsp[(3) - (6)].item));
            (yyval.item)= new (YYTHD->mem_root) Item_row(*(yyvsp[(5) - (6)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1213:

/* Line 1455 of yacc.c  */
#line 8569 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_exists_subselect((yyvsp[(3) - (4)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1214:

/* Line 1455 of yacc.c  */
#line 8575 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(3) - (4)].item); }
    break;

  case 1215:

/* Line 1455 of yacc.c  */
#line 8577 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyvsp[(2) - (7)].item_list)->push_front((yyvsp[(5) - (7)].item));
            Item_func_match *i1= new (YYTHD->mem_root) Item_func_match(*(yyvsp[(2) - (7)].item_list), (yyvsp[(6) - (7)].num));
            if (i1 == NULL)
              MYSQL_YYABORT;
            Select->add_ftfunc_to_list(i1);
            (yyval.item)= i1;
          }
    break;

  case 1216:

/* Line 1455 of yacc.c  */
#line 8586 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= create_func_cast(YYTHD, (yyvsp[(2) - (2)].item), ITEM_CAST_CHAR, NULL, NULL,
                                 &my_charset_bin);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1217:

/* Line 1455 of yacc.c  */
#line 8593 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.item)= create_func_cast(YYTHD, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].cast_type), lex->length, lex->dec,
                                 lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1218:

/* Line 1455 of yacc.c  */
#line 8601 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_case(* (yyvsp[(3) - (5)].item_list), (yyvsp[(2) - (5)].item), (yyvsp[(4) - (5)].item) );
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1219:

/* Line 1455 of yacc.c  */
#line 8607 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= create_func_cast(YYTHD, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].cast_type), Lex->length, Lex->dec,
                                 Lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1220:

/* Line 1455 of yacc.c  */
#line 8614 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_conv_charset((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].charset));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1221:

/* Line 1455 of yacc.c  */
#line 8620 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if ((yyvsp[(3) - (4)].item)->is_splocal())
            {
              Item_splocal *il= static_cast<Item_splocal *>((yyvsp[(3) - (4)].item));

              my_error(ER_WRONG_COLUMN_NAME, MYF(0), il->my_name()->str);
              MYSQL_YYABORT;
            }
            (yyval.item)= new (YYTHD->mem_root) Item_default_value(Lex->current_context(),
                                                         (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1222:

/* Line 1455 of yacc.c  */
#line 8634 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_insert_value(Lex->current_context(),
                                                        (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1223:

/* Line 1455 of yacc.c  */
#line 8642 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(5) - (5)].item),(yyvsp[(2) - (5)].item),(yyvsp[(3) - (5)].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1224:

/* Line 1455 of yacc.c  */
#line 8657 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_char(*(yyvsp[(3) - (4)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1225:

/* Line 1455 of yacc.c  */
#line 8663 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_char(*(yyvsp[(3) - (6)].item_list), (yyvsp[(5) - (6)].charset));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1226:

/* Line 1455 of yacc.c  */
#line 8669 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_current_user(Lex->current_context());
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query= 0;
          }
    break;

  case 1227:

/* Line 1455 of yacc.c  */
#line 8677 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_typecast((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1228:

/* Line 1455 of yacc.c  */
#line 8683 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_dayofmonth((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1229:

/* Line 1455 of yacc.c  */
#line 8689 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_hour((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1230:

/* Line 1455 of yacc.c  */
#line 8695 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_insert((yyvsp[(3) - (10)].item),(yyvsp[(5) - (10)].item),(yyvsp[(7) - (10)].item),(yyvsp[(9) - (10)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1231:

/* Line 1455 of yacc.c  */
#line 8701 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            List<Item> *list= new (thd->mem_root) List<Item>;
            if (list == NULL)
              MYSQL_YYABORT;
            list->push_front((yyvsp[(5) - (6)].item));
            list->push_front((yyvsp[(3) - (6)].item));
            Item_row *item= new (thd->mem_root) Item_row(*list);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_interval(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1232:

/* Line 1455 of yacc.c  */
#line 8716 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(5) - (8)].item));
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(3) - (8)].item));
            Item_row *item= new (thd->mem_root) Item_row(*(yyvsp[(7) - (8)].item_list));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_interval(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1233:

/* Line 1455 of yacc.c  */
#line 8728 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_left((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1234:

/* Line 1455 of yacc.c  */
#line 8734 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_minute((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1235:

/* Line 1455 of yacc.c  */
#line 8740 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_month((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1236:

/* Line 1455 of yacc.c  */
#line 8746 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_right((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1237:

/* Line 1455 of yacc.c  */
#line 8752 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_second((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1238:

/* Line 1455 of yacc.c  */
#line 8758 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_time_typecast((yyvsp[(3) - (4)].item), AUTO_SEC_PART_DIGITS);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1239:

/* Line 1455 of yacc.c  */
#line 8764 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_datetime_typecast((yyvsp[(3) - (4)].item), AUTO_SEC_PART_DIGITS);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1240:

/* Line 1455 of yacc.c  */
#line 8770 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_add_time((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item), 1, 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1241:

/* Line 1455 of yacc.c  */
#line 8776 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1242:

/* Line 1455 of yacc.c  */
#line 8782 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_ltrim((yyvsp[(6) - (7)].item),(yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1243:

/* Line 1455 of yacc.c  */
#line 8788 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_rtrim((yyvsp[(6) - (7)].item),(yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1244:

/* Line 1455 of yacc.c  */
#line 8794 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(6) - (7)].item),(yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1245:

/* Line 1455 of yacc.c  */
#line 8800 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_ltrim((yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1246:

/* Line 1455 of yacc.c  */
#line 8806 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_rtrim((yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1247:

/* Line 1455 of yacc.c  */
#line 8812 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1248:

/* Line 1455 of yacc.c  */
#line 8818 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(5) - (6)].item),(yyvsp[(3) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1249:

/* Line 1455 of yacc.c  */
#line 8824 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_user();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1250:

/* Line 1455 of yacc.c  */
#line 8832 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_year((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1251:

/* Line 1455 of yacc.c  */
#line 8853 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                                             INTERVAL_DAY, 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1252:

/* Line 1455 of yacc.c  */
#line 8860 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item), (yyvsp[(6) - (8)].item), (yyvsp[(7) - (8)].interval), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1253:

/* Line 1455 of yacc.c  */
#line 8866 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curdate_local();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1254:

/* Line 1455 of yacc.c  */
#line 8873 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curtime_local((yyvsp[(2) - (2)].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1255:

/* Line 1455 of yacc.c  */
#line 8881 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item),(yyvsp[(6) - (8)].item),(yyvsp[(7) - (8)].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1256:

/* Line 1455 of yacc.c  */
#line 8888 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item),(yyvsp[(6) - (8)].item),(yyvsp[(7) - (8)].interval),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1257:

/* Line 1455 of yacc.c  */
#line 8894 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_extract( (yyvsp[(3) - (6)].interval), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1258:

/* Line 1455 of yacc.c  */
#line 8900 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_get_format((yyvsp[(3) - (6)].date_time_type), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1259:

/* Line 1455 of yacc.c  */
#line 8906 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_now_local((yyvsp[(2) - (2)].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1260:

/* Line 1455 of yacc.c  */
#line 8913 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_func_locate((yyvsp[(5) - (6)].item),(yyvsp[(3) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1261:

/* Line 1455 of yacc.c  */
#line 8919 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                                             INTERVAL_DAY, 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1262:

/* Line 1455 of yacc.c  */
#line 8926 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item), (yyvsp[(6) - (8)].item), (yyvsp[(7) - (8)].interval), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1263:

/* Line 1455 of yacc.c  */
#line 8932 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1264:

/* Line 1455 of yacc.c  */
#line 8938 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1265:

/* Line 1455 of yacc.c  */
#line 8944 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1266:

/* Line 1455 of yacc.c  */
#line 8950 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1267:

/* Line 1455 of yacc.c  */
#line 8956 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              Unlike other time-related functions, SYSDATE() is
              replication-unsafe because it is not affected by the
              TIMESTAMP variable.  It is unsafe even if
              sysdate_is_now=1, because the slave may have
              sysdate_is_now=0.
            */
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            if (global_system_variables.sysdate_is_now == 0)
              (yyval.item)= new (YYTHD->mem_root) Item_func_sysdate_local((yyvsp[(2) - (2)].num));
            else
              (yyval.item)= new (YYTHD->mem_root) Item_func_now_local((yyvsp[(2) - (2)].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1268:

/* Line 1455 of yacc.c  */
#line 8974 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(7) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(3) - (8)].interval_time_st),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1269:

/* Line 1455 of yacc.c  */
#line 8980 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_timestamp_diff((yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item),(yyvsp[(3) - (8)].interval_time_st));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1270:

/* Line 1455 of yacc.c  */
#line 8986 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curdate_utc();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1271:

/* Line 1455 of yacc.c  */
#line 8993 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curtime_utc((yyvsp[(2) - (2)].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1272:

/* Line 1455 of yacc.c  */
#line 9000 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_now_utc((yyvsp[(2) - (2)].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1273:

/* Line 1455 of yacc.c  */
#line 9008 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= create_func_dyncol_add(YYTHD, (yyvsp[(3) - (6)].item), *(yyvsp[(5) - (6)].dyncol_def_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1274:

/* Line 1455 of yacc.c  */
#line 9015 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= create_func_dyncol_delete(YYTHD, (yyvsp[(3) - (6)].item), *(yyvsp[(5) - (6)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1275:

/* Line 1455 of yacc.c  */
#line 9022 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_dyncol_exists((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1276:

/* Line 1455 of yacc.c  */
#line 9029 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_dyncol_list((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1277:

/* Line 1455 of yacc.c  */
#line 9036 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= create_func_dyncol_create(YYTHD, *(yyvsp[(3) - (4)].dyncol_def_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1278:

/* Line 1455 of yacc.c  */
#line 9043 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.item)= create_func_dyncol_get(YYTHD, (yyvsp[(3) - (8)].item), (yyvsp[(5) - (8)].item), (yyvsp[(7) - (8)].cast_type),
                                        lex->length, lex->dec,
                                        lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1279:

/* Line 1455 of yacc.c  */
#line 9060 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_ascii((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1280:

/* Line 1455 of yacc.c  */
#line 9066 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_charset((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1281:

/* Line 1455 of yacc.c  */
#line 9072 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_coalesce(* (yyvsp[(3) - (4)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1282:

/* Line 1455 of yacc.c  */
#line 9078 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_collation((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1283:

/* Line 1455 of yacc.c  */
#line 9084 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_database();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1284:

/* Line 1455 of yacc.c  */
#line 9091 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_if((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1285:

/* Line 1455 of yacc.c  */
#line 9097 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_last_value(* (yyvsp[(3) - (4)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1286:

/* Line 1455 of yacc.c  */
#line 9103 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_microsecond((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1287:

/* Line 1455 of yacc.c  */
#line 9109 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_func_mod((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1288:

/* Line 1455 of yacc.c  */
#line 9115 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)=  new (YYTHD->mem_root) Item_func_old_password((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1289:

/* Line 1455 of yacc.c  */
#line 9121 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item* i1;
            if (thd->variables.old_passwords)
              i1= new (thd->mem_root) Item_func_old_password((yyvsp[(3) - (4)].item));
            else
              i1= new (thd->mem_root) Item_func_password((yyvsp[(3) - (4)].item));
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= i1;
          }
    break;

  case 1290:

/* Line 1455 of yacc.c  */
#line 9133 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_func_quarter((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1291:

/* Line 1455 of yacc.c  */
#line 9139 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_repeat((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1292:

/* Line 1455 of yacc.c  */
#line 9145 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_replace((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1293:

/* Line 1455 of yacc.c  */
#line 9151 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_round((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1294:

/* Line 1455 of yacc.c  */
#line 9157 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *i1= new (thd->mem_root) Item_int((char*) "0",
                                           thd->variables.default_week_format,
                                                   1);
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_week((yyvsp[(3) - (4)].item), i1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1295:

/* Line 1455 of yacc.c  */
#line 9169 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_week((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1296:

/* Line 1455 of yacc.c  */
#line 9175 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            (yyval.item)= (yyvsp[(1) - (1)].item);
            /* $1 may be NULL, GEOM_NEW not tested for out of memory */
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
    break;

  case 1297:

/* Line 1455 of yacc.c  */
#line 9191 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_rel((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                               Item_func::SP_CONTAINS_FUNC));
          }
    break;

  case 1298:

/* Line 1455 of yacc.c  */
#line 9197 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_geometrycollection,
                           Geometry::wkb_point));
          }
    break;

  case 1299:

/* Line 1455 of yacc.c  */
#line 9204 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_linestring,
                           Geometry::wkb_point));
          }
    break;

  case 1300:

/* Line 1455 of yacc.c  */
#line 9211 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multilinestring,
                           Geometry::wkb_linestring));
          }
    break;

  case 1301:

/* Line 1455 of yacc.c  */
#line 9218 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multipoint,
                           Geometry::wkb_point));
          }
    break;

  case 1302:

/* Line 1455 of yacc.c  */
#line 9225 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multipolygon,
                           Geometry::wkb_polygon));
          }
    break;

  case 1303:

/* Line 1455 of yacc.c  */
#line 9232 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD, Item_func_point((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item)));
          }
    break;

  case 1304:

/* Line 1455 of yacc.c  */
#line 9236 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_polygon,
                           Geometry::wkb_linestring));
          }
    break;

  case 1305:

/* Line 1455 of yacc.c  */
#line 9255 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
#ifdef HAVE_DLOPEN
            udf_func *udf= 0;
            LEX *lex= Lex;
            if (using_udf_functions &&
                (udf= find_udf((yyvsp[(1) - (2)].lex_str).str, (yyvsp[(1) - (2)].lex_str).length)) &&
                udf->type == UDFTYPE_AGGREGATE)
            {
              if (lex->current_select->inc_in_sum_expr())
              {
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
            }
            /* Temporary placing the result of find_udf in $3 */
            (yyval.udf)= udf;
#endif
          }
    break;

  case 1306:

/* Line 1455 of yacc.c  */
#line 9274 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Create_func *builder;
            Item *item= NULL;

            if (check_routine_name(&(yyvsp[(1) - (5)].lex_str)))
            {
              MYSQL_YYABORT;
            }

            /*
              Implementation note:
              names are resolved with the following order:
              - MySQL native functions,
              - User Defined Functions,
              - Stored Functions (assuming the current <use> database)

              This will be revised with WL#2128 (SQL PATH)
            */
            builder= find_native_function_builder(thd, (yyvsp[(1) - (5)].lex_str));
            if (builder)
            {
              item= builder->create_func(thd, (yyvsp[(1) - (5)].lex_str), (yyvsp[(4) - (5)].item_list));
            }
            else
            {
#ifdef HAVE_DLOPEN
              /* Retrieving the result of find_udf */
              udf_func *udf= (yyvsp[(3) - (5)].udf);

              if (udf)
              {
                if (udf->type == UDFTYPE_AGGREGATE)
                {
                  Select->in_sum_expr--;
                }

                item= Create_udf_func::s_singleton.create(thd, udf, (yyvsp[(4) - (5)].item_list));
              }
              else
#endif
              {
                builder= find_qualified_function_builder(thd);
                DBUG_ASSERT(builder);
                item= builder->create_func(thd, (yyvsp[(1) - (5)].lex_str), (yyvsp[(4) - (5)].item_list));
              }
            }

            if (! ((yyval.item)= item))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1307:

/* Line 1455 of yacc.c  */
#line 9328 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Create_qfunc *builder;
            Item *item= NULL;

            /*
              The following in practice calls:
              <code>Create_sp_func::create()</code>
              and builds a stored function.

              However, it's important to maintain the interface between the
              parser and the implementation in item_create.cc clean,
              since this will change with WL#2128 (SQL PATH):
              - INFORMATION_SCHEMA.version() is the SQL 99 syntax for the native
              function version(),
              - MySQL.version() is the SQL 2003 syntax for the native function
              version() (a vendor can specify any schema).
            */

            if (!(yyvsp[(1) - (6)].lex_str).str || check_db_name(&(yyvsp[(1) - (6)].lex_str)))
            {
              my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[(1) - (6)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (check_routine_name(&(yyvsp[(3) - (6)].lex_str)))
            {
              MYSQL_YYABORT;
            }

            builder= find_qualified_function_builder(thd);
            DBUG_ASSERT(builder);
            item= builder->create_with_db(thd, (yyvsp[(1) - (6)].lex_str), (yyvsp[(3) - (6)].lex_str), true, (yyvsp[(5) - (6)].item_list));

            if (! ((yyval.item)= item))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1308:

/* Line 1455 of yacc.c  */
#line 9370 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(1) - (2)].num) | (yyvsp[(2) - (2)].num); }
    break;

  case 1309:

/* Line 1455 of yacc.c  */
#line 9372 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= FT_BOOL; }
    break;

  case 1310:

/* Line 1455 of yacc.c  */
#line 9376 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= FT_NL; }
    break;

  case 1311:

/* Line 1455 of yacc.c  */
#line 9377 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= FT_NL; }
    break;

  case 1312:

/* Line 1455 of yacc.c  */
#line 9381 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0;         }
    break;

  case 1313:

/* Line 1455 of yacc.c  */
#line 9382 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= FT_EXPAND; }
    break;

  case 1314:

/* Line 1455 of yacc.c  */
#line 9386 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item_list)= NULL; }
    break;

  case 1315:

/* Line 1455 of yacc.c  */
#line 9387 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list); }
    break;

  case 1316:

/* Line 1455 of yacc.c  */
#line 9392 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new (YYTHD->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 1317:

/* Line 1455 of yacc.c  */
#line 9399 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item));
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1318:

/* Line 1455 of yacc.c  */
#line 9407 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
             Use Item::name as a storage for the attribute value of user
             defined function argument. It is safe to use Item::name
             because the syntax will not allow having an explicit name here.
             See WL#1017 re. udf attributes.
            */
            if ((yyvsp[(4) - (4)].lex_str).str)
            {
              (yyvsp[(2) - (4)].item)->is_autogenerated_name= FALSE;
              (yyvsp[(2) - (4)].item)->set_name((yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length, system_charset_info);
            }
            /* 
               A field has to have its proper name in order for name
               resolution to work, something we are only guaranteed if we
               parse it out. If we hijack the input stream with
               remember_name we may get quoted or escaped names.
            */
            else if ((yyvsp[(2) - (4)].item)->type() != Item::FIELD_ITEM)
              (yyvsp[(2) - (4)].item)->set_name((yyvsp[(1) - (4)].simple_string), (uint) ((yyvsp[(3) - (4)].simple_string) - (yyvsp[(1) - (4)].simple_string)), YYTHD->charset());
            (yyval.item)= (yyvsp[(2) - (4)].item);
          }
    break;

  case 1319:

/* Line 1455 of yacc.c  */
#line 9433 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_avg((yyvsp[(3) - (4)].item), FALSE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1320:

/* Line 1455 of yacc.c  */
#line 9439 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_avg((yyvsp[(4) - (5)].item), TRUE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1321:

/* Line 1455 of yacc.c  */
#line 9445 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_and((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1322:

/* Line 1455 of yacc.c  */
#line 9451 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_or((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1323:

/* Line 1455 of yacc.c  */
#line 9457 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_xor((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1324:

/* Line 1455 of yacc.c  */
#line 9463 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_int((int32) 0L,1);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (YYTHD->mem_root) Item_sum_count(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1325:

/* Line 1455 of yacc.c  */
#line 9472 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_count((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1326:

/* Line 1455 of yacc.c  */
#line 9478 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->in_sum_expr++; }
    break;

  case 1327:

/* Line 1455 of yacc.c  */
#line 9480 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->in_sum_expr--; }
    break;

  case 1328:

/* Line 1455 of yacc.c  */
#line 9482 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_count(* (yyvsp[(5) - (7)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1329:

/* Line 1455 of yacc.c  */
#line 9488 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_min((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1330:

/* Line 1455 of yacc.c  */
#line 9499 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_min((yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1331:

/* Line 1455 of yacc.c  */
#line 9505 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_max((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1332:

/* Line 1455 of yacc.c  */
#line 9511 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_max((yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1333:

/* Line 1455 of yacc.c  */
#line 9517 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_std((yyvsp[(3) - (4)].item), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1334:

/* Line 1455 of yacc.c  */
#line 9523 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_variance((yyvsp[(3) - (4)].item), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1335:

/* Line 1455 of yacc.c  */
#line 9529 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_std((yyvsp[(3) - (4)].item), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1336:

/* Line 1455 of yacc.c  */
#line 9535 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_variance((yyvsp[(3) - (4)].item), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1337:

/* Line 1455 of yacc.c  */
#line 9541 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_sum((yyvsp[(3) - (4)].item), FALSE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1338:

/* Line 1455 of yacc.c  */
#line 9547 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_sum((yyvsp[(4) - (5)].item), TRUE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1339:

/* Line 1455 of yacc.c  */
#line 9553 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->in_sum_expr++; }
    break;

  case 1340:

/* Line 1455 of yacc.c  */
#line 9557 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->in_sum_expr--;
            (yyval.item)= new (YYTHD->mem_root)
                  Item_func_group_concat(Lex->current_context(), (yyvsp[(3) - (8)].num), (yyvsp[(5) - (8)].item_list),
                                         sel->gorder_list, (yyvsp[(7) - (8)].string));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            (yyvsp[(5) - (8)].item_list)->empty();
          }
    break;

  case 1341:

/* Line 1455 of yacc.c  */
#line 9571 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (! Lex->parsing_options.allows_variable)
            {
              my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1342:

/* Line 1455 of yacc.c  */
#line 9579 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= (yyvsp[(3) - (3)].item);
          }
    break;

  case 1343:

/* Line 1455 of yacc.c  */
#line 9586 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item_func_set_user_var *item;
            (yyval.item)= item= new (YYTHD->mem_root) Item_func_set_user_var((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_RAND);
            lex->set_var_list.push_back(item);
          }
    break;

  case 1344:

/* Line 1455 of yacc.c  */
#line 9596 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_get_user_var((yyvsp[(1) - (1)].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_RAND);
          }
    break;

  case 1345:

/* Line 1455 of yacc.c  */
#line 9604 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* disallow "SELECT @@global.global.variable" */
            if ((yyvsp[(3) - (4)].lex_str).str && (yyvsp[(4) - (4)].lex_str).str && check_reserved_words(&(yyvsp[(3) - (4)].lex_str)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (!((yyval.item)= get_system_var(YYTHD, (yyvsp[(2) - (4)].var_type), (yyvsp[(3) - (4)].lex_str), (yyvsp[(4) - (4)].lex_str))))
              MYSQL_YYABORT;
            if (!((Item_func_get_system_var*) (yyval.item))->is_written_to_binlog())
              Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_VARIABLE);
          }
    break;

  case 1346:

/* Line 1455 of yacc.c  */
#line 9619 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1347:

/* Line 1455 of yacc.c  */
#line 9620 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num) = 1; }
    break;

  case 1348:

/* Line 1455 of yacc.c  */
#line 9625 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.string)= new (YYTHD->mem_root) String(",", 1, &my_charset_latin1);
            if ((yyval.string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1349:

/* Line 1455 of yacc.c  */
#line 9630 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.string) = (yyvsp[(2) - (2)].string); }
    break;

  case 1350:

/* Line 1455 of yacc.c  */
#line 9635 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->gorder_list = NULL;
          }
    break;

  case 1351:

/* Line 1455 of yacc.c  */
#line 9639 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            SELECT_LEX *select= Select;
            select->gorder_list= new (YYTHD->mem_root)
                                   SQL_I_List<ORDER>(select->order_list);
            if (select->gorder_list == NULL)
              MYSQL_YYABORT;
            select->order_list.empty();
          }
    break;

  case 1352:

/* Line 1455 of yacc.c  */
#line 9651 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->current_select->inc_in_sum_expr())
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1353:

/* Line 1455 of yacc.c  */
#line 9660 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->in_sum_expr--;
            (yyval.item)= (yyvsp[(3) - (3)].item);
          }
    break;

  case 1354:

/* Line 1455 of yacc.c  */
#line 9668 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->charset= &my_charset_bin; Lex->dec= 0; }
    break;

  case 1355:

/* Line 1455 of yacc.c  */
#line 9670 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->dec= 0; }
    break;

  case 1356:

/* Line 1455 of yacc.c  */
#line 9672 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->charset= national_charset_info; Lex->dec=0; }
    break;

  case 1357:

/* Line 1455 of yacc.c  */
#line 9674 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_SIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1358:

/* Line 1455 of yacc.c  */
#line 9676 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_SIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1359:

/* Line 1455 of yacc.c  */
#line 9678 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_SIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1360:

/* Line 1455 of yacc.c  */
#line 9680 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_UNSIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1361:

/* Line 1455 of yacc.c  */
#line 9682 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_UNSIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1362:

/* Line 1455 of yacc.c  */
#line 9684 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_DATE; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1363:

/* Line 1455 of yacc.c  */
#line 9686 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.cast_type)=ITEM_CAST_TIME;
            LEX *lex= Lex;
            lex->charset= NULL; lex->dec= lex->length; lex->length= (char*)0;
           }
    break;

  case 1364:

/* Line 1455 of yacc.c  */
#line 9692 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.cast_type)=ITEM_CAST_DATETIME;
            LEX *lex= Lex;
            lex->charset= NULL; lex->dec= lex->length; lex->length= (char*)0;
           }
    break;

  case 1365:

/* Line 1455 of yacc.c  */
#line 9698 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_DECIMAL; Lex->charset= NULL; }
    break;

  case 1366:

/* Line 1455 of yacc.c  */
#line 9700 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->charset= NULL; Lex->length= Lex->dec= 0;}
    break;

  case 1367:

/* Line 1455 of yacc.c  */
#line 9702 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_DOUBLE; }
    break;

  case 1368:

/* Line 1455 of yacc.c  */
#line 9705 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item_list)= NULL; }
    break;

  case 1369:

/* Line 1455 of yacc.c  */
#line 9706 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list);}
    break;

  case 1370:

/* Line 1455 of yacc.c  */
#line 9711 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new (YYTHD->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 1371:

/* Line 1455 of yacc.c  */
#line 9718 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item));
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1372:

/* Line 1455 of yacc.c  */
#line 9725 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list); }
    break;

  case 1373:

/* Line 1455 of yacc.c  */
#line 9726 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(2) - (3)].item_list); }
    break;

  case 1374:

/* Line 1455 of yacc.c  */
#line 9731 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new (YYTHD->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 1375:

/* Line 1455 of yacc.c  */
#line 9738 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item));
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1376:

/* Line 1455 of yacc.c  */
#line 9745 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)= NULL; }
    break;

  case 1377:

/* Line 1455 of yacc.c  */
#line 9746 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 1378:

/* Line 1455 of yacc.c  */
#line 9750 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)= NULL; }
    break;

  case 1379:

/* Line 1455 of yacc.c  */
#line 9751 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(2) - (2)].item); }
    break;

  case 1380:

/* Line 1455 of yacc.c  */
#line 9756 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(2) - (4)].item));
            (yyval.item_list)->push_back((yyvsp[(4) - (4)].item));
          }
    break;

  case 1381:

/* Line 1455 of yacc.c  */
#line 9764 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (5)].item_list)->push_back((yyvsp[(3) - (5)].item));
            (yyvsp[(1) - (5)].item_list)->push_back((yyvsp[(5) - (5)].item));
            (yyval.item_list)= (yyvsp[(1) - (5)].item_list);
          }
    break;

  case 1382:

/* Line 1455 of yacc.c  */
#line 9774 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1383:

/* Line 1455 of yacc.c  */
#line 9776 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->nest_last_join(lex->thd)))
              MYSQL_YYABORT;
          }
    break;

  case 1384:

/* Line 1455 of yacc.c  */
#line 9784 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { MYSQL_YYABORT_UNLESS((yyval.table_list)=(yyvsp[(1) - (1)].table_list)); }
    break;

  case 1385:

/* Line 1455 of yacc.c  */
#line 9795 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1386:

/* Line 1455 of yacc.c  */
#line 9796 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(3) - (4)].table_list); }
    break;

  case 1387:

/* Line 1455 of yacc.c  */
#line 9802 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1388:

/* Line 1455 of yacc.c  */
#line 9804 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].table_list) && ((yyval.table_list)=(yyvsp[(3) - (3)].table_list)));
          }
    break;

  case 1389:

/* Line 1455 of yacc.c  */
#line 9824 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].table_list) && ((yyval.table_list)=(yyvsp[(3) - (3)].table_list))); }
    break;

  case 1390:

/* Line 1455 of yacc.c  */
#line 9826 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].table_list) && ((yyval.table_list)=(yyvsp[(3) - (3)].table_list))); (yyvsp[(3) - (3)].table_list)->straight=1; }
    break;

  case 1391:

/* Line 1455 of yacc.c  */
#line 9829 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && (yyvsp[(3) - (4)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (4)].table_list), (yyvsp[(3) - (4)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1392:

/* Line 1455 of yacc.c  */
#line 9837 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            add_join_on((yyvsp[(3) - (6)].table_list),(yyvsp[(6) - (6)].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1393:

/* Line 1455 of yacc.c  */
#line 9844 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && (yyvsp[(3) - (4)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (4)].table_list), (yyvsp[(3) - (4)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1394:

/* Line 1455 of yacc.c  */
#line 9852 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyvsp[(3) - (6)].table_list)->straight=1;
            add_join_on((yyvsp[(3) - (6)].table_list),(yyvsp[(6) - (6)].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1395:

/* Line 1455 of yacc.c  */
#line 9860 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && (yyvsp[(3) - (4)].table_list));
          }
    break;

  case 1396:

/* Line 1455 of yacc.c  */
#line 9864 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { add_join_natural((yyvsp[(1) - (8)].table_list),(yyvsp[(3) - (8)].table_list),(yyvsp[(7) - (8)].string_list),Select); (yyval.table_list)=(yyvsp[(3) - (8)].table_list); }
    break;

  case 1397:

/* Line 1455 of yacc.c  */
#line 9866 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && ((yyval.table_list)=(yyvsp[(4) - (4)].table_list)));
            add_join_natural((yyvsp[(1) - (4)].table_list),(yyvsp[(4) - (4)].table_list),NULL,Select);
          }
    break;

  case 1398:

/* Line 1455 of yacc.c  */
#line 9874 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(5) - (6)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (6)].table_list), (yyvsp[(5) - (6)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1399:

/* Line 1455 of yacc.c  */
#line 9882 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            add_join_on((yyvsp[(5) - (8)].table_list),(yyvsp[(8) - (8)].item));
            Lex->pop_context();
            (yyvsp[(5) - (8)].table_list)->outer_join|=JOIN_TYPE_LEFT;
            (yyval.table_list)=(yyvsp[(5) - (8)].table_list);
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1400:

/* Line 1455 of yacc.c  */
#line 9890 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].table_list) && (yyvsp[(5) - (5)].table_list));
          }
    break;

  case 1401:

/* Line 1455 of yacc.c  */
#line 9894 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            add_join_natural((yyvsp[(1) - (10)].table_list),(yyvsp[(5) - (10)].table_list),(yyvsp[(9) - (10)].string_list),Select); 
            (yyvsp[(5) - (10)].table_list)->outer_join|=JOIN_TYPE_LEFT; 
            (yyval.table_list)=(yyvsp[(5) - (10)].table_list); 
          }
    break;

  case 1402:

/* Line 1455 of yacc.c  */
#line 9900 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(6) - (6)].table_list));
            add_join_natural((yyvsp[(1) - (6)].table_list),(yyvsp[(6) - (6)].table_list),NULL,Select);
            (yyvsp[(6) - (6)].table_list)->outer_join|=JOIN_TYPE_LEFT;
            (yyval.table_list)=(yyvsp[(6) - (6)].table_list);
          }
    break;

  case 1403:

/* Line 1455 of yacc.c  */
#line 9910 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(5) - (6)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (6)].table_list), (yyvsp[(5) - (6)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1404:

/* Line 1455 of yacc.c  */
#line 9918 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
            add_join_on((yyval.table_list), (yyvsp[(8) - (8)].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1405:

/* Line 1455 of yacc.c  */
#line 9927 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].table_list) && (yyvsp[(5) - (5)].table_list));
          }
    break;

  case 1406:

/* Line 1455 of yacc.c  */
#line 9931 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
            add_join_natural((yyval.table_list),(yyvsp[(5) - (10)].table_list),(yyvsp[(9) - (10)].string_list),Select);
          }
    break;

  case 1407:

/* Line 1455 of yacc.c  */
#line 9938 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(6) - (6)].table_list));
            add_join_natural((yyvsp[(6) - (6)].table_list),(yyvsp[(1) - (6)].table_list),NULL,Select);
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
          }
    break;

  case 1408:

/* Line 1455 of yacc.c  */
#line 9948 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1409:

/* Line 1455 of yacc.c  */
#line 9949 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1410:

/* Line 1455 of yacc.c  */
#line 9950 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1411:

/* Line 1455 of yacc.c  */
#line 9962 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->table_join_options= 0;
          }
    break;

  case 1412:

/* Line 1455 of yacc.c  */
#line 9967 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!((yyval.table_list)= Select->add_table_to_list(YYTHD, (yyvsp[(2) - (4)].table), (yyvsp[(3) - (4)].lex_str_ptr),
                                                Select->get_table_join_options(),
                                                YYPS->m_lock_type,
                                                YYPS->m_mdl_type,
                                                Select->pop_index_hints())))
              MYSQL_YYABORT;
            Select->add_joined_table((yyval.table_list));
          }
    break;

  case 1413:

/* Line 1455 of yacc.c  */
#line 9977 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if ((yyvsp[(1) - (3)].num))
            {
              if (sel->set_braces(1))
              {
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
              /* select in braces, can't contain global parameters */
              if (sel->master_unit()->fake_select_lex)
                sel->master_unit()->global_parameters=
                   sel->master_unit()->fake_select_lex;
            }
            if ((yyvsp[(2) - (3)].select_lex)->init_nested_join(lex->thd))
              MYSQL_YYABORT;
            (yyval.table_list)= 0;
            /* incomplete derived tables return NULL, we must be
               nested in select_derived rule to be here. */
          }
    break;

  case 1414:

/* Line 1455 of yacc.c  */
#line 10017 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* Use $2 instead of Lex->current_select as derived table will
               alter value of Lex->current_select. */
            if (!((yyvsp[(3) - (5)].table_list) || (yyvsp[(5) - (5)].lex_str_ptr)) && (yyvsp[(2) - (5)].select_lex)->embedding &&
                !(yyvsp[(2) - (5)].select_lex)->embedding->nested_join->join_list.elements)
            {
              /* we have a derived table ($3 == NULL) but no alias,
                 Since we are nested in further parentheses so we
                 can pass NULL to the outer level parentheses
                 Permits parsing of "((((select ...))) as xyz)" */
              (yyval.table_list)= 0;
            }
            else if (!(yyvsp[(3) - (5)].table_list))
            {
              /* Handle case of derived table, alias may be NULL if there
                 are no outer parentheses, add_table_to_list() will throw
                 error in this case */
              LEX *lex=Lex;
              SELECT_LEX *sel= lex->current_select;
              SELECT_LEX_UNIT *unit= sel->master_unit();
              lex->current_select= sel= unit->outer_select();
              Table_ident *ti= new Table_ident(unit);
              if (ti == NULL)
                MYSQL_YYABORT;
              if (!((yyval.table_list)= sel->add_table_to_list(lex->thd,
                                               new Table_ident(unit), (yyvsp[(5) - (5)].lex_str_ptr), 0,
                                               TL_READ, MDL_SHARED_READ)))

                MYSQL_YYABORT;
              sel->add_joined_table((yyval.table_list));
              lex->pop_context();
              lex->nest_level--;
            }
            else if (((yyvsp[(3) - (5)].table_list)->select_lex &&
                      (yyvsp[(3) - (5)].table_list)->select_lex->master_unit()->is_union() &&
                      ((yyvsp[(3) - (5)].table_list)->select_lex->master_unit()->first_select() ==
                       (yyvsp[(3) - (5)].table_list)->select_lex || !(yyvsp[(3) - (5)].table_list)->lifted)) || (yyvsp[(5) - (5)].lex_str_ptr))
            {
              /* simple nested joins cannot have aliases or unions */
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            else
            {
              /* nested join: FROM (t1 JOIN t2 ...),
                 nest_level is the same as in the outer query */
              (yyval.table_list)= (yyvsp[(3) - (5)].table_list);
            }
          }
    break;

  case 1416:

/* Line 1455 of yacc.c  */
#line 10073 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_select_to_union_list(Lex, (bool)(yyvsp[(3) - (3)].num), FALSE))
              MYSQL_YYABORT;
          }
    break;

  case 1417:

/* Line 1455 of yacc.c  */
#line 10078 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              Remove from the name resolution context stack the context of the
              last select in the union.
             */
            Lex->pop_context();
          }
    break;

  case 1419:

/* Line 1455 of yacc.c  */
#line 10091 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX * sel= lex->current_select;
            if (lex->current_select->set_braces(0))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (sel->linkage == UNION_TYPE &&
                sel->master_unit()->first_select()->braces)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1420:

/* Line 1455 of yacc.c  */
#line 10110 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->linkage != UNION_TYPE)
              mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 1421:

/* Line 1455 of yacc.c  */
#line 10118 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1423:

/* Line 1455 of yacc.c  */
#line 10127 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if ((yyvsp[(1) - (1)].select_lex)->init_nested_join(lex->thd))
              MYSQL_YYABORT;
          }
    break;

  case 1424:

/* Line 1455 of yacc.c  */
#line 10133 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            /* for normal joins, $3 != NULL and end_nested_join() != NULL,
               for derived tables, both must equal NULL */

            if (!((yyval.table_list)= (yyvsp[(1) - (3)].select_lex)->end_nested_join(lex->thd)) && (yyvsp[(3) - (3)].table_list))
              MYSQL_YYABORT;
            if (!(yyvsp[(3) - (3)].table_list) && (yyval.table_list))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1425:

/* Line 1455 of yacc.c  */
#line 10149 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->derived_tables|= DERIVED_SUBQUERY;
            if (!lex->expr_allows_subselect ||
                lex->sql_command == (int)SQLCOM_PURGE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE ||
                mysql_new_select(lex, 1))
              MYSQL_YYABORT;
            mysql_init_select(lex);
            lex->current_select->linkage= DERIVED_TABLE_TYPE;
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 1426:

/* Line 1455 of yacc.c  */
#line 10166 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1428:

/* Line 1455 of yacc.c  */
#line 10173 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.select_lex)= Select; }
    break;

  case 1429:

/* Line 1455 of yacc.c  */
#line 10178 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (! lex->parsing_options.allows_derived)
            {
              my_error(ER_VIEW_SELECT_DERIVED, MYF(0));
              MYSQL_YYABORT;
            }

            SELECT_LEX *sel= lex->current_select;
            TABLE_LIST *embedding;
            if (!sel->embedding || sel->end_nested_join(lex->thd))
            {
              /* we are not in parentheses */
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            embedding= Select->embedding;
            (yyval.num)= embedding &&
                !embedding->nested_join->join_list.elements;
            /* return true if we are deeply nested */
          }
    break;

  case 1430:

/* Line 1455 of yacc.c  */
#line 10203 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1431:

/* Line 1455 of yacc.c  */
#line 10204 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1432:

/* Line 1455 of yacc.c  */
#line 10209 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= YYTHD->variables.old_mode ?  INDEX_HINT_MASK_JOIN : INDEX_HINT_MASK_ALL; 
          }
    break;

  case 1433:

/* Line 1455 of yacc.c  */
#line 10212 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_JOIN;  }
    break;

  case 1434:

/* Line 1455 of yacc.c  */
#line 10213 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_ORDER; }
    break;

  case 1435:

/* Line 1455 of yacc.c  */
#line 10214 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_GROUP; }
    break;

  case 1436:

/* Line 1455 of yacc.c  */
#line 10218 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.index_hint)= INDEX_HINT_FORCE; }
    break;

  case 1437:

/* Line 1455 of yacc.c  */
#line 10219 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.index_hint)= INDEX_HINT_IGNORE; }
    break;

  case 1438:

/* Line 1455 of yacc.c  */
#line 10224 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->set_index_hint_type((yyvsp[(1) - (3)].index_hint), (yyvsp[(3) - (3)].num));
          }
    break;

  case 1440:

/* Line 1455 of yacc.c  */
#line 10229 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->set_index_hint_type(INDEX_HINT_USE, (yyvsp[(3) - (3)].num));
          }
    break;

  case 1445:

/* Line 1455 of yacc.c  */
#line 10242 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->alloc_index_hints(YYTHD); }
    break;

  case 1447:

/* Line 1455 of yacc.c  */
#line 10246 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {  Select->clear_index_hints(); }
    break;

  case 1449:

/* Line 1455 of yacc.c  */
#line 10251 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->add_index_hint(YYTHD, NULL, 0); }
    break;

  case 1450:

/* Line 1455 of yacc.c  */
#line 10252 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1451:

/* Line 1455 of yacc.c  */
#line 10257 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->add_index_hint(YYTHD, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length); }
    break;

  case 1452:

/* Line 1455 of yacc.c  */
#line 10259 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->add_index_hint(YYTHD, (char *)"PRIMARY", 7); }
    break;

  case 1455:

/* Line 1455 of yacc.c  */
#line 10269 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!((yyval.string_list)= new List<String>))
              MYSQL_YYABORT;
            String *s= new (YYTHD->mem_root) String((const char *) (yyvsp[(1) - (1)].lex_str).str,
                                                    (yyvsp[(1) - (1)].lex_str).length,
                                                    system_charset_info);
            if (s == NULL)
              MYSQL_YYABORT;
            (yyval.string_list)->push_back(s);
          }
    break;

  case 1456:

/* Line 1455 of yacc.c  */
#line 10280 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            String *s= new (YYTHD->mem_root) String((const char *) (yyvsp[(3) - (3)].lex_str).str,
                                                    (yyvsp[(3) - (3)].lex_str).length,
                                                    system_charset_info);
            if (s == NULL)
              MYSQL_YYABORT;
            (yyvsp[(1) - (3)].string_list)->push_back(s);
            (yyval.string_list)= (yyvsp[(1) - (3)].string_list);
          }
    break;

  case 1457:

/* Line 1455 of yacc.c  */
#line 10292 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1458:

/* Line 1455 of yacc.c  */
#line 10293 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_HOUR; }
    break;

  case 1459:

/* Line 1455 of yacc.c  */
#line 10294 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_MICROSECOND; }
    break;

  case 1460:

/* Line 1455 of yacc.c  */
#line 10295 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_MINUTE; }
    break;

  case 1461:

/* Line 1455 of yacc.c  */
#line 10296 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_SECOND; }
    break;

  case 1462:

/* Line 1455 of yacc.c  */
#line 10297 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_MICROSECOND; }
    break;

  case 1463:

/* Line 1455 of yacc.c  */
#line 10298 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_MINUTE; }
    break;

  case 1464:

/* Line 1455 of yacc.c  */
#line 10299 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_SECOND; }
    break;

  case 1465:

/* Line 1455 of yacc.c  */
#line 10300 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_MINUTE_MICROSECOND; }
    break;

  case 1466:

/* Line 1455 of yacc.c  */
#line 10301 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_MINUTE_SECOND; }
    break;

  case 1467:

/* Line 1455 of yacc.c  */
#line 10302 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_SECOND_MICROSECOND; }
    break;

  case 1468:

/* Line 1455 of yacc.c  */
#line 10303 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_YEAR_MONTH; }
    break;

  case 1469:

/* Line 1455 of yacc.c  */
#line 10307 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_DAY; }
    break;

  case 1470:

/* Line 1455 of yacc.c  */
#line 10308 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_WEEK; }
    break;

  case 1471:

/* Line 1455 of yacc.c  */
#line 10309 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_HOUR; }
    break;

  case 1472:

/* Line 1455 of yacc.c  */
#line 10310 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MINUTE; }
    break;

  case 1473:

/* Line 1455 of yacc.c  */
#line 10311 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MONTH; }
    break;

  case 1474:

/* Line 1455 of yacc.c  */
#line 10312 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_QUARTER; }
    break;

  case 1475:

/* Line 1455 of yacc.c  */
#line 10313 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_SECOND; }
    break;

  case 1476:

/* Line 1455 of yacc.c  */
#line 10314 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MICROSECOND; }
    break;

  case 1477:

/* Line 1455 of yacc.c  */
#line 10315 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_YEAR; }
    break;

  case 1478:

/* Line 1455 of yacc.c  */
#line 10319 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_DATE;}
    break;

  case 1479:

/* Line 1455 of yacc.c  */
#line 10320 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_TIME;}
    break;

  case 1480:

/* Line 1455 of yacc.c  */
#line 10321 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_DATETIME;}
    break;

  case 1481:

/* Line 1455 of yacc.c  */
#line 10322 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_DATETIME;}
    break;

  case 1485:

/* Line 1455 of yacc.c  */
#line 10332 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str_ptr)=0; }
    break;

  case 1486:

/* Line 1455 of yacc.c  */
#line 10334 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.lex_str_ptr)= (LEX_STRING*) sql_memdup(&(yyvsp[(2) - (2)].lex_str),sizeof(LEX_STRING));
            if ((yyval.lex_str_ptr) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1489:

/* Line 1455 of yacc.c  */
#line 10347 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->where= 0; }
    break;

  case 1490:

/* Line 1455 of yacc.c  */
#line 10349 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->parsing_place= IN_WHERE;
          }
    break;

  case 1491:

/* Line 1455 of yacc.c  */
#line 10353 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            SELECT_LEX *select= Select;
            select->where= normalize_cond((yyvsp[(3) - (3)].item));
            select->parsing_place= NO_MATTER;
            if ((yyvsp[(3) - (3)].item))
              (yyvsp[(3) - (3)].item)->top_level_item();
          }
    break;

  case 1493:

/* Line 1455 of yacc.c  */
#line 10365 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->parsing_place= IN_HAVING;
          }
    break;

  case 1494:

/* Line 1455 of yacc.c  */
#line 10369 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->having= normalize_cond((yyvsp[(3) - (3)].item));
            sel->parsing_place= NO_MATTER;
            if ((yyvsp[(3) - (3)].item))
              (yyvsp[(3) - (3)].item)->top_level_item();
          }
    break;

  case 1495:

/* Line 1455 of yacc.c  */
#line 10380 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->escape_used= TRUE;
            (yyval.item)= (yyvsp[(2) - (2)].item);
          }
    break;

  case 1496:

/* Line 1455 of yacc.c  */
#line 10385 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Lex->escape_used= FALSE;
            (yyval.item)= ((thd->variables.sql_mode & MODE_NO_BACKSLASH_ESCAPES) ?
                 new (thd->mem_root) Item_string("", 0, &my_charset_latin1) :
                 new (thd->mem_root) Item_string("\\", 1, &my_charset_latin1));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1499:

/* Line 1455 of yacc.c  */
#line 10407 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { if (add_group_to_list(YYTHD, (yyvsp[(3) - (4)].item),(bool) (yyvsp[(4) - (4)].num))) MYSQL_YYABORT; }
    break;

  case 1500:

/* Line 1455 of yacc.c  */
#line 10409 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { if (add_group_to_list(YYTHD, (yyvsp[(1) - (2)].item),(bool) (yyvsp[(2) - (2)].num))) MYSQL_YYABORT; }
    break;

  case 1501:

/* Line 1455 of yacc.c  */
#line 10413 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1502:

/* Line 1455 of yacc.c  */
#line 10415 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              'WITH CUBE' is reserved in the MySQL syntax, but not implemented,
              and cause LALR(2) conflicts.
              This syntax is not standard.
              MySQL syntax: GROUP BY col1, col2, col3 WITH CUBE
              SQL-2003: GROUP BY ... CUBE(col1, col2, col3)
            */
            LEX *lex=Lex;
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "WITH CUBE",
                       "global union parameters");
              MYSQL_YYABORT;
            }
            lex->current_select->olap= CUBE_TYPE;
            my_error(ER_NOT_SUPPORTED_YET, MYF(0), "CUBE");
            MYSQL_YYABORT;
          }
    break;

  case 1503:

/* Line 1455 of yacc.c  */
#line 10435 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              'WITH ROLLUP' is needed for backward compatibility,
              and cause LALR(2) conflicts.
              This syntax is not standard.
              MySQL syntax: GROUP BY col1, col2, col3 WITH ROLLUP
              SQL-2003: GROUP BY ... ROLLUP(col1, col2, col3)
            */
            LEX *lex= Lex;
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "WITH ROLLUP",
                       "global union parameters");
              MYSQL_YYABORT;
            }
            lex->current_select->olap= ROLLUP_TYPE;
          }
    break;

  case 1507:

/* Line 1455 of yacc.c  */
#line 10469 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            bool ascending= ((yyvsp[(2) - (2)].num) == 1) ? true : false;
            if (add_order_to_list(thd, (yyvsp[(1) - (2)].item), ascending))
              MYSQL_YYABORT;
          }
    break;

  case 1510:

/* Line 1455 of yacc.c  */
#line 10488 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            SELECT_LEX *sel= lex->current_select;
            SELECT_LEX_UNIT *unit= sel-> master_unit();
            if (sel->linkage != GLOBAL_OPTIONS_TYPE &&
                sel->olap != UNSPECIFIED_OLAP_TYPE &&
                (sel->linkage != UNION_TYPE || sel->braces))
            {
              my_error(ER_WRONG_USAGE, MYF(0),
                       "CUBE/ROLLUP", "ORDER BY");
              MYSQL_YYABORT;
            }
            if (lex->sql_command != SQLCOM_ALTER_TABLE && !unit->fake_select_lex)
            {
              /*
                A query of the of the form (SELECT ...) ORDER BY order_list is
                executed in the same way as the query
                SELECT ... ORDER BY order_list
                unless the SELECT construct contains ORDER BY or LIMIT clauses.
                Otherwise we create a fake SELECT_LEX if it has not been created
                yet.
              */
              SELECT_LEX *first_sl= unit->first_select();
              if (!unit->is_union() &&
                  (first_sl->order_list.elements || 
                   first_sl->select_limit) &&            
                  unit->add_fake_select_lex(lex->thd))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1512:

/* Line 1455 of yacc.c  */
#line 10523 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { if (add_order_to_list(YYTHD, (yyvsp[(3) - (4)].item),(bool) (yyvsp[(4) - (4)].num))) MYSQL_YYABORT; }
    break;

  case 1513:

/* Line 1455 of yacc.c  */
#line 10525 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { if (add_order_to_list(YYTHD, (yyvsp[(1) - (2)].item),(bool) (yyvsp[(2) - (2)].num))) MYSQL_YYABORT; }
    break;

  case 1514:

/* Line 1455 of yacc.c  */
#line 10529 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num) =  1; }
    break;

  case 1515:

/* Line 1455 of yacc.c  */
#line 10530 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num) =1; }
    break;

  case 1516:

/* Line 1455 of yacc.c  */
#line 10531 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num) =0; }
    break;

  case 1517:

/* Line 1455 of yacc.c  */
#line 10536 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            sel->offset_limit= 0;
            sel->select_limit= 0;
	    lex->limit_rows_examined= 0;
          }
    break;

  case 1518:

/* Line 1455 of yacc.c  */
#line 10543 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1519:

/* Line 1455 of yacc.c  */
#line 10547 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1520:

/* Line 1455 of yacc.c  */
#line 10548 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1521:

/* Line 1455 of yacc.c  */
#line 10553 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
          }
    break;

  case 1522:

/* Line 1455 of yacc.c  */
#line 10557 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
          }
    break;

  case 1523:

/* Line 1455 of yacc.c  */
#line 10561 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
          }
    break;

  case 1524:

/* Line 1455 of yacc.c  */
#line 10568 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(1) - (1)].item);
            sel->offset_limit= 0;
            sel->explicit_limit= 1;
          }
    break;

  case 1525:

/* Line 1455 of yacc.c  */
#line 10575 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(3) - (3)].item);
            sel->offset_limit= (yyvsp[(1) - (3)].item);
            sel->explicit_limit= 1;
          }
    break;

  case 1526:

/* Line 1455 of yacc.c  */
#line 10582 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(1) - (3)].item);
            sel->offset_limit= (yyvsp[(3) - (3)].item);
            sel->explicit_limit= 1;
          }
    break;

  case 1527:

/* Line 1455 of yacc.c  */
#line 10592 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
          Item_splocal *splocal;
          THD *thd= YYTHD;
          LEX *lex= thd->lex;
          Lex_input_stream *lip= & thd->m_parser_state->m_lip;
          sp_variable_t *spv;
          sp_pcontext *spc = lex->spcont;
          if (spc && (spv = spc->find_variable(&(yyvsp[(1) - (1)].lex_str))))
          {
            splocal= new (thd->mem_root)
              Item_splocal((yyvsp[(1) - (1)].lex_str), spv->offset, spv->type,
                  lip->get_tok_start() - lex->sphead->m_tmp_query,
                  lip->get_ptr() - lip->get_tok_start());
            if (splocal == NULL)
              MYSQL_YYABORT;
#ifndef DBUG_OFF
            splocal->m_sp= lex->sphead;
#endif
            lex->safe_to_cache_query=0;
          }
          else
          {
            my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
            MYSQL_YYABORT;
          }
          if (splocal->type() != Item::INT_ITEM)
          {
            my_error(ER_WRONG_SPVAR_TYPE_IN_LIMIT, MYF(0));
            MYSQL_YYABORT;
          }
          splocal->limit_clause_param= TRUE;
          (yyval.item)= splocal;
        }
    break;

  case 1528:

/* Line 1455 of yacc.c  */
#line 10626 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
          ((Item_param *) (yyvsp[(1) - (1)].item))->limit_clause_param= TRUE;
        }
    break;

  case 1529:

/* Line 1455 of yacc.c  */
#line 10630 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1530:

/* Line 1455 of yacc.c  */
#line 10636 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1531:

/* Line 1455 of yacc.c  */
#line 10642 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1532:

/* Line 1455 of yacc.c  */
#line 10651 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            LEX *lex=Lex;
            lex->limit_rows_examined= (yyvsp[(1) - (1)].item);
          }
    break;

  case 1533:

/* Line 1455 of yacc.c  */
#line 10658 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->current_select->select_limit= 0;
          }
    break;

  case 1534:

/* Line 1455 of yacc.c  */
#line 10663 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(2) - (2)].item);
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
            sel->explicit_limit= 1;
          }
    break;

  case 1535:

/* Line 1455 of yacc.c  */
#line 10669 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { my_parse_error(ER(ER_SYNTAX_ERROR)); MYSQL_YYABORT; }
    break;

  case 1536:

/* Line 1455 of yacc.c  */
#line 10670 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { my_parse_error(ER(ER_SYNTAX_ERROR)); MYSQL_YYABORT; }
    break;

  case 1537:

/* Line 1455 of yacc.c  */
#line 10674 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.num)= (int) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1538:

/* Line 1455 of yacc.c  */
#line 10675 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.num)= -(int) my_strtoll10((yyvsp[(2) - (2)].lex_str).str, (char**) 0, &error); }
    break;

  case 1539:

/* Line 1455 of yacc.c  */
#line 10676 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.num)= -(int) my_strtoll10((yyvsp[(2) - (2)].lex_str).str, (char**) 0, &error); }
    break;

  case 1540:

/* Line 1455 of yacc.c  */
#line 10680 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1541:

/* Line 1455 of yacc.c  */
#line 10681 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (ulong) strtol((yyvsp[(1) - (1)].lex_str).str, (char**) 0, 16); }
    break;

  case 1542:

/* Line 1455 of yacc.c  */
#line 10682 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1543:

/* Line 1455 of yacc.c  */
#line 10683 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1544:

/* Line 1455 of yacc.c  */
#line 10684 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1545:

/* Line 1455 of yacc.c  */
#line 10685 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1546:

/* Line 1455 of yacc.c  */
#line 10689 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1547:

/* Line 1455 of yacc.c  */
#line 10690 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (ulong) strtol((yyvsp[(1) - (1)].lex_str).str, (char**) 0, 16); }
    break;

  case 1548:

/* Line 1455 of yacc.c  */
#line 10691 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1549:

/* Line 1455 of yacc.c  */
#line 10692 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1550:

/* Line 1455 of yacc.c  */
#line 10693 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { MYSQL_YYABORT; }
    break;

  case 1551:

/* Line 1455 of yacc.c  */
#line 10697 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1552:

/* Line 1455 of yacc.c  */
#line 10698 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1553:

/* Line 1455 of yacc.c  */
#line 10699 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1554:

/* Line 1455 of yacc.c  */
#line 10700 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1555:

/* Line 1455 of yacc.c  */
#line 10701 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1556:

/* Line 1455 of yacc.c  */
#line 10705 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1557:

/* Line 1455 of yacc.c  */
#line 10706 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1558:

/* Line 1455 of yacc.c  */
#line 10707 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ulonglong_number)= strtoull((yyvsp[(1) - (1)].lex_str).str, (char**) 0, 16); }
    break;

  case 1559:

/* Line 1455 of yacc.c  */
#line 10708 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1560:

/* Line 1455 of yacc.c  */
#line 10709 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { MYSQL_YYABORT; }
    break;

  case 1561:

/* Line 1455 of yacc.c  */
#line 10714 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { my_parse_error(ER(ER_ONLY_INTEGERS_ALLOWED)); }
    break;

  case 1564:

/* Line 1455 of yacc.c  */
#line 10723 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.choice)= (yyvsp[(1) - (1)].ulong_num) != 0 ? HA_CHOICE_YES : HA_CHOICE_NO; }
    break;

  case 1565:

/* Line 1455 of yacc.c  */
#line 10724 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.choice)= HA_CHOICE_UNDEF; }
    break;

  case 1567:

/* Line 1455 of yacc.c  */
#line 10730 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            if (! lex->parsing_options.allows_select_procedure)
            {
              my_error(ER_VIEW_SELECT_CLAUSE, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }

            if (&lex->select_lex != lex->current_select)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "PROCEDURE", "subquery");
              MYSQL_YYABORT;
            }
            lex->proc_list.elements=0;
            lex->proc_list.first=0;
            lex->proc_list.next= &lex->proc_list.first;
            Item_field *item= new (YYTHD->mem_root)
                                Item_field(&lex->current_select->context,
                                           NULL, NULL, (yyvsp[(2) - (2)].lex_str).str);
            if (item == NULL)
              MYSQL_YYABORT;
            if (add_proc_to_list(lex->thd, item))
              MYSQL_YYABORT;
            Lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
          }
    break;

  case 1569:

/* Line 1455 of yacc.c  */
#line 10760 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1570:

/* Line 1455 of yacc.c  */
#line 10761 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1573:

/* Line 1455 of yacc.c  */
#line 10771 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (add_proc_to_list(thd, (yyvsp[(2) - (3)].item)))
              MYSQL_YYABORT;
            if (!(yyvsp[(2) - (3)].item)->name)
              (yyvsp[(2) - (3)].item)->set_name((yyvsp[(1) - (3)].simple_string), (uint) ((yyvsp[(3) - (3)].simple_string) - (yyvsp[(1) - (3)].simple_string)), thd->charset());
          }
    break;

  case 1574:

/* Line 1455 of yacc.c  */
#line 10782 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->describe && (!(lex->result= new select_dumpvar())))
              MYSQL_YYABORT;
          }
    break;

  case 1575:

/* Line 1455 of yacc.c  */
#line 10788 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1577:

/* Line 1455 of yacc.c  */
#line 10793 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1578:

/* Line 1455 of yacc.c  */
#line 10798 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->result) 
            {
              my_var *var= new my_var((yyvsp[(2) - (2)].lex_str),0,0,(enum_field_types)0);
              if (var == NULL)
                MYSQL_YYABORT;
              ((select_dumpvar *)lex->result)->var_list.push_back(var);
            }
            else
            {
              /*
                The parser won't create select_result instance only
                if it's an EXPLAIN.
              */
              DBUG_ASSERT(lex->describe);
            }
          }
    break;

  case 1579:

/* Line 1455 of yacc.c  */
#line 10817 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            sp_variable_t *t;

            if (!lex->spcont || !(t=lex->spcont->find_variable(&(yyvsp[(1) - (1)].lex_str))))
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (lex->result)
            {
              my_var *var= new my_var((yyvsp[(1) - (1)].lex_str),1,t->offset,t->type);
              if (var == NULL)
                MYSQL_YYABORT;
              ((select_dumpvar *)lex->result)->var_list.push_back(var);
#ifndef DBUG_OFF
              var->sp= lex->sphead;
#endif
            }
            else
            {
              /*
                The parser won't create select_result instance only
                if it's an EXPLAIN.
              */
              DBUG_ASSERT(lex->describe);
            }
          }
    break;

  case 1580:

/* Line 1455 of yacc.c  */
#line 10849 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (! Lex->parsing_options.allows_select_into)
            {
              my_error(ER_VIEW_SELECT_CLAUSE, MYF(0), "INTO");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1582:

/* Line 1455 of yacc.c  */
#line 10861 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
            if (!(lex->exchange= new sql_exchange((yyvsp[(2) - (2)].lex_str).str, 0)) ||
                !(lex->result= new select_export(lex->exchange)))
              MYSQL_YYABORT;
          }
    break;

  case 1583:

/* Line 1455 of yacc.c  */
#line 10869 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->exchange->cs= (yyvsp[(4) - (4)].charset); }
    break;

  case 1585:

/* Line 1455 of yacc.c  */
#line 10872 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->describe)
            {
              lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
              if (!(lex->exchange= new sql_exchange((yyvsp[(2) - (2)].lex_str).str,1)))
                MYSQL_YYABORT;
              if (!(lex->result= new select_dump(lex->exchange)))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1586:

/* Line 1455 of yacc.c  */
#line 10884 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
          }
    break;

  case 1587:

/* Line 1455 of yacc.c  */
#line 10895 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_DO;
            mysql_init_select(lex);
          }
    break;

  case 1588:

/* Line 1455 of yacc.c  */
#line 10901 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->insert_list= (yyvsp[(3) - (3)].item_list);
          }
    break;

  case 1589:

/* Line 1455 of yacc.c  */
#line 10912 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_DROP_TABLE;
            lex->drop_temporary= (yyvsp[(2) - (4)].num);
            lex->drop_if_exists= (yyvsp[(4) - (4)].num);
            YYPS->m_lock_type= TL_UNLOCK;
            YYPS->m_mdl_type= MDL_EXCLUSIVE;
          }
    break;

  case 1590:

/* Line 1455 of yacc.c  */
#line 10921 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1591:

/* Line 1455 of yacc.c  */
#line 10922 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1592:

/* Line 1455 of yacc.c  */
#line 10923 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, (yyvsp[(3) - (6)].lex_str).str);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->sql_command= SQLCOM_DROP_INDEX;
            lex->alter_info.reset();
            lex->alter_info.flags= ALTER_DROP_INDEX;
            lex->alter_info.drop_list.push_back(ad);
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(5) - (6)].table), NULL,
                                                        TL_OPTION_UPDATING,
                                                        TL_READ_NO_INSERT,
                                                        MDL_SHARED_NO_WRITE))
              MYSQL_YYABORT;
          }
    break;

  case 1593:

/* Line 1455 of yacc.c  */
#line 10939 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_DROP_DB;
            lex->drop_if_exists=(yyvsp[(3) - (4)].num);
            lex->name= (yyvsp[(4) - (4)].lex_str);
          }
    break;

  case 1594:

/* Line 1455 of yacc.c  */
#line 10946 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_name *spname;
            if ((yyvsp[(4) - (6)].lex_str).str && check_db_name(&(yyvsp[(4) - (6)].lex_str)))
            {
               my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[(4) - (6)].lex_str).str);
               MYSQL_YYABORT;
            }
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_DROP_FUNCTION;
            lex->drop_if_exists= (yyvsp[(3) - (6)].num);
            spname= new sp_name((yyvsp[(4) - (6)].lex_str), (yyvsp[(6) - (6)].lex_str), true);
            if (spname == NULL)
              MYSQL_YYABORT;
            spname->init_qname(thd);
            lex->spname= spname;
          }
    break;

  case 1595:

/* Line 1455 of yacc.c  */
#line 10969 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            LEX_STRING db= {0, 0};
            sp_name *spname;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            if (thd->db && lex->copy_db_to(&db.str, &db.length))
              MYSQL_YYABORT;
            lex->sql_command = SQLCOM_DROP_FUNCTION;
            lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            spname= new sp_name(db, (yyvsp[(4) - (4)].lex_str), false);
            if (spname == NULL)
              MYSQL_YYABORT;
            spname->init_qname(thd);
            lex->spname= spname;
          }
    break;

  case 1596:

/* Line 1455 of yacc.c  */
#line 10990 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_DROP_PROCEDURE;
            lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            lex->spname= (yyvsp[(4) - (4)].spname);
          }
    break;

  case 1597:

/* Line 1455 of yacc.c  */
#line 11002 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_DROP_USER;
          }
    break;

  case 1598:

/* Line 1455 of yacc.c  */
#line 11006 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DROP_VIEW;
            lex->drop_if_exists= (yyvsp[(3) - (3)].num);
            YYPS->m_lock_type= TL_UNLOCK;
            YYPS->m_mdl_type= MDL_EXCLUSIVE;
          }
    break;

  case 1599:

/* Line 1455 of yacc.c  */
#line 11014 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1600:

/* Line 1455 of yacc.c  */
#line 11016 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            Lex->spname= (yyvsp[(4) - (4)].spname);
            Lex->sql_command = SQLCOM_DROP_EVENT;
          }
    break;

  case 1601:

/* Line 1455 of yacc.c  */
#line 11022 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DROP_TRIGGER;
            lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            lex->spname= (yyvsp[(4) - (4)].spname);
          }
    break;

  case 1602:

/* Line 1455 of yacc.c  */
#line 11029 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= DROP_TABLESPACE;
          }
    break;

  case 1603:

/* Line 1455 of yacc.c  */
#line 11034 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= DROP_LOGFILE_GROUP;
          }
    break;

  case 1604:

/* Line 1455 of yacc.c  */
#line 11039 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_DROP_SERVER;
            Lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            Lex->server_options.server_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->server_options.server_name_length= (yyvsp[(4) - (4)].lex_str).length;
          }
    break;

  case 1607:

/* Line 1455 of yacc.c  */
#line 11054 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (1)].table), NULL,
                                           TL_OPTION_UPDATING,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1610:

/* Line 1455 of yacc.c  */
#line 11070 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (1)].table), NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1611:

/* Line 1455 of yacc.c  */
#line 11080 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1612:

/* Line 1455 of yacc.c  */
#line 11081 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1613:

/* Line 1455 of yacc.c  */
#line 11085 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1614:

/* Line 1455 of yacc.c  */
#line 11086 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1615:

/* Line 1455 of yacc.c  */
#line 11094 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_INSERT;
            lex->duplicates= DUP_ERROR; 
            mysql_init_select(lex);
          }
    break;

  case 1616:

/* Line 1455 of yacc.c  */
#line 11102 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->set_lock_for_tables((yyvsp[(3) - (5)].lock_type));
            Lex->current_select= &Lex->select_lex;
          }
    break;

  case 1617:

/* Line 1455 of yacc.c  */
#line 11107 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1618:

/* Line 1455 of yacc.c  */
#line 11112 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_REPLACE;
            lex->duplicates= DUP_REPLACE;
            mysql_init_select(lex);
          }
    break;

  case 1619:

/* Line 1455 of yacc.c  */
#line 11119 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->set_lock_for_tables((yyvsp[(3) - (4)].lock_type));
            Lex->current_select= &Lex->select_lex;
          }
    break;

  case 1620:

/* Line 1455 of yacc.c  */
#line 11124 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1621:

/* Line 1455 of yacc.c  */
#line 11129 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              If it is SP we do not allow insert optimisation when result of
              insert visible only after the table unlocking but everyone can
              read table.
            */
            (yyval.lock_type)= (Lex->sphead ? TL_WRITE_DEFAULT : TL_WRITE_CONCURRENT_INSERT);
          }
    break;

  case 1622:

/* Line 1455 of yacc.c  */
#line 11137 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1623:

/* Line 1455 of yacc.c  */
#line 11139 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
          Lex->keyword_delayed_begin_offset= (uint)(YYLIP->get_tok_start() -
                                                    YYTHD->query());
          Lex->keyword_delayed_end_offset= Lex->keyword_delayed_begin_offset +
                                           YYLIP->yyLength() + 1;
          (yyval.lock_type)= TL_WRITE_DELAYED;
        }
    break;

  case 1624:

/* Line 1455 of yacc.c  */
#line 11146 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE; }
    break;

  case 1625:

/* Line 1455 of yacc.c  */
#line 11150 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lock_type)= (yyvsp[(1) - (1)].lock_type); }
    break;

  case 1626:

/* Line 1455 of yacc.c  */
#line 11152 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
          Lex->keyword_delayed_begin_offset= (uint)(YYLIP->get_tok_start() -
                                                    YYTHD->query());
          Lex->keyword_delayed_end_offset= Lex->keyword_delayed_begin_offset +
                                           YYLIP->yyLength() + 1;
          (yyval.lock_type)= TL_WRITE_DELAYED;
        }
    break;

  case 1627:

/* Line 1455 of yacc.c  */
#line 11162 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1628:

/* Line 1455 of yacc.c  */
#line 11163 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1629:

/* Line 1455 of yacc.c  */
#line 11168 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->field_list.empty();
            lex->many_values.empty();
            lex->insert_list=0;
          }
    break;

  case 1630:

/* Line 1455 of yacc.c  */
#line 11176 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1631:

/* Line 1455 of yacc.c  */
#line 11177 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1632:

/* Line 1455 of yacc.c  */
#line 11178 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1633:

/* Line 1455 of yacc.c  */
#line 11180 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!(lex->insert_list = new List_item) ||
                lex->many_values.push_back(lex->insert_list))
              MYSQL_YYABORT;
          }
    break;

  case 1635:

/* Line 1455 of yacc.c  */
#line 11190 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(3) - (3)].item)); }
    break;

  case 1636:

/* Line 1455 of yacc.c  */
#line 11191 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(1) - (1)].item)); }
    break;

  case 1637:

/* Line 1455 of yacc.c  */
#line 11195 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1638:

/* Line 1455 of yacc.c  */
#line 11196 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1639:

/* Line 1455 of yacc.c  */
#line 11198 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->set_braces(0);}
    break;

  case 1640:

/* Line 1455 of yacc.c  */
#line 11199 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1641:

/* Line 1455 of yacc.c  */
#line 11201 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 1642:

/* Line 1455 of yacc.c  */
#line 11202 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1647:

/* Line 1455 of yacc.c  */
#line 11217 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->field_list.push_back((yyvsp[(1) - (3)].item)) ||
                lex->insert_list->push_back((yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1648:

/* Line 1455 of yacc.c  */
#line 11226 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1649:

/* Line 1455 of yacc.c  */
#line 11227 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1650:

/* Line 1455 of yacc.c  */
#line 11231 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1651:

/* Line 1455 of yacc.c  */
#line 11232 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1652:

/* Line 1455 of yacc.c  */
#line 11237 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
              if (!(Lex->insert_list = new List_item))
                MYSQL_YYABORT;
          }
    break;

  case 1653:

/* Line 1455 of yacc.c  */
#line 11242 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->many_values.push_back(lex->insert_list))
              MYSQL_YYABORT;
          }
    break;

  case 1654:

/* Line 1455 of yacc.c  */
#line 11250 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1656:

/* Line 1455 of yacc.c  */
#line 11256 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->insert_list->push_back((yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1657:

/* Line 1455 of yacc.c  */
#line 11261 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->insert_list->push_back((yyvsp[(1) - (1)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1658:

/* Line 1455 of yacc.c  */
#line 11268 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item);}
    break;

  case 1659:

/* Line 1455 of yacc.c  */
#line 11270 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_default_value(Lex->current_context());
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1661:

/* Line 1455 of yacc.c  */
#line 11279 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->duplicates= DUP_UPDATE; }
    break;

  case 1663:

/* Line 1455 of yacc.c  */
#line 11287 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            mysql_init_select(lex);
            lex->sql_command= SQLCOM_UPDATE;
            lex->duplicates= DUP_ERROR; 
          }
    break;

  case 1664:

/* Line 1455 of yacc.c  */
#line 11295 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->select_lex.table_list.elements > 1)
              lex->sql_command= SQLCOM_UPDATE_MULTI;
            else if (lex->select_lex.get_table_list()->derived)
            {
              /* it is single table update and it is update of derived table */
              my_error(ER_NON_UPDATABLE_TABLE, MYF(0),
                       lex->select_lex.get_table_list()->alias, "UPDATE");
              MYSQL_YYABORT;
            }
            /*
              In case of multi-update setting write lock for all tables may
              be too pessimistic. We will decrease lock level if possible in
              mysql_multi_update().
            */
            Select->set_lock_for_tables((yyvsp[(3) - (7)].lock_type));
          }
    break;

  case 1665:

/* Line 1455 of yacc.c  */
#line 11313 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1668:

/* Line 1455 of yacc.c  */
#line 11323 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_item_to_list(YYTHD, (yyvsp[(1) - (3)].item)) || add_value_to_list(YYTHD, (yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1671:

/* Line 1455 of yacc.c  */
#line 11336 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
          LEX *lex= Lex;
          if (lex->update_list.push_back((yyvsp[(1) - (3)].item)) || 
              lex->value_list.push_back((yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1672:

/* Line 1455 of yacc.c  */
#line 11345 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_DEFAULT; }
    break;

  case 1673:

/* Line 1455 of yacc.c  */
#line 11346 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1674:

/* Line 1455 of yacc.c  */
#line 11353 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DELETE;
            mysql_init_select(lex);
            YYPS->m_lock_type= TL_WRITE_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_WRITE;

            lex->ignore= 0;
            lex->select_lex.init_order();
          }
    break;

  case 1676:

/* Line 1455 of yacc.c  */
#line 11368 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(2) - (2)].table), NULL, TL_OPTION_UPDATING,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
            YYPS->m_lock_type= TL_READ_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_READ;
          }
    break;

  case 1677:

/* Line 1455 of yacc.c  */
#line 11377 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1678:

/* Line 1455 of yacc.c  */
#line 11379 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            mysql_init_multi_delete(Lex);
            YYPS->m_lock_type= TL_READ_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_READ;
          }
    break;

  case 1679:

/* Line 1455 of yacc.c  */
#line 11385 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (multi_delete_set_locks_and_link_aux_tables(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1680:

/* Line 1455 of yacc.c  */
#line 11390 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            mysql_init_multi_delete(Lex);
            YYPS->m_lock_type= TL_READ_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_READ;
          }
    break;

  case 1681:

/* Line 1455 of yacc.c  */
#line 11396 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (multi_delete_set_locks_and_link_aux_tables(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1684:

/* Line 1455 of yacc.c  */
#line 11409 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Table_ident *ti= new Table_ident((yyvsp[(1) - (2)].lex_str));
            if (ti == NULL)
              MYSQL_YYABORT;
            if (!Select->add_table_to_list(YYTHD,
                                           ti,
                                           NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1685:

/* Line 1455 of yacc.c  */
#line 11422 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Table_ident *ti= new Table_ident(YYTHD, (yyvsp[(1) - (4)].lex_str), (yyvsp[(3) - (4)].lex_str), 0);
            if (ti == NULL)
              MYSQL_YYABORT;
            if (!Select->add_table_to_list(YYTHD,
                                           ti,
                                           NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1686:

/* Line 1455 of yacc.c  */
#line 11437 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1687:

/* Line 1455 of yacc.c  */
#line 11438 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1688:

/* Line 1455 of yacc.c  */
#line 11442 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1689:

/* Line 1455 of yacc.c  */
#line 11443 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1690:

/* Line 1455 of yacc.c  */
#line 11447 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->options|= OPTION_QUICK; }
    break;

  case 1691:

/* Line 1455 of yacc.c  */
#line 11448 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { YYPS->m_lock_type= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1692:

/* Line 1455 of yacc.c  */
#line 11449 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ignore= 1; }
    break;

  case 1693:

/* Line 1455 of yacc.c  */
#line 11454 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX* lex= Lex;
            lex->sql_command= SQLCOM_TRUNCATE;
            lex->alter_info.reset();
            lex->select_lex.options= 0;
            lex->select_lex.sql_cache= SELECT_LEX::SQL_CACHE_UNSPECIFIED;
            lex->select_lex.init_order();
            YYPS->m_lock_type= TL_WRITE;
            YYPS->m_mdl_type= MDL_EXCLUSIVE;
          }
    break;

  case 1694:

/* Line 1455 of yacc.c  */
#line 11465 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root) Truncate_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1701:

/* Line 1455 of yacc.c  */
#line 11490 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_CPU;
    }
    break;

  case 1702:

/* Line 1455 of yacc.c  */
#line 11494 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_MEMORY;
    }
    break;

  case 1703:

/* Line 1455 of yacc.c  */
#line 11498 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_BLOCK_IO;
    }
    break;

  case 1704:

/* Line 1455 of yacc.c  */
#line 11502 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_CONTEXT;
    }
    break;

  case 1705:

/* Line 1455 of yacc.c  */
#line 11506 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_PAGE_FAULTS;
    }
    break;

  case 1706:

/* Line 1455 of yacc.c  */
#line 11510 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_IPC;
    }
    break;

  case 1707:

/* Line 1455 of yacc.c  */
#line 11514 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_SWAPS;
    }
    break;

  case 1708:

/* Line 1455 of yacc.c  */
#line 11518 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_SOURCE;
    }
    break;

  case 1709:

/* Line 1455 of yacc.c  */
#line 11522 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_ALL;
    }
    break;

  case 1710:

/* Line 1455 of yacc.c  */
#line 11529 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
      Lex->profile_query_id= 0;
    }
    break;

  case 1711:

/* Line 1455 of yacc.c  */
#line 11533 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
      Lex->profile_query_id= atoi((yyvsp[(3) - (3)].lex_str).str);
    }
    break;

  case 1712:

/* Line 1455 of yacc.c  */
#line 11542 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->wild=0;
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
            bzero((char*) &lex->create_info,sizeof(lex->create_info));
          }
    break;

  case 1713:

/* Line 1455 of yacc.c  */
#line 11550 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1714:

/* Line 1455 of yacc.c  */
#line 11555 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_DATABASES;
             if (prepare_schema_table(YYTHD, lex, 0, SCH_SCHEMATA))
               MYSQL_YYABORT;
           }
    break;

  case 1715:

/* Line 1455 of yacc.c  */
#line 11562 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TABLES;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_TABLE_NAMES))
               MYSQL_YYABORT;
           }
    break;

  case 1716:

/* Line 1455 of yacc.c  */
#line 11570 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TRIGGERS;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_TRIGGERS))
               MYSQL_YYABORT;
           }
    break;

  case 1717:

/* Line 1455 of yacc.c  */
#line 11578 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_EVENTS;
             lex->select_lex.db= (yyvsp[(2) - (3)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_EVENTS))
               MYSQL_YYABORT;
           }
    break;

  case 1718:

/* Line 1455 of yacc.c  */
#line 11586 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TABLE_STATUS;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_TABLES))
               MYSQL_YYABORT;
           }
    break;

  case 1719:

/* Line 1455 of yacc.c  */
#line 11594 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_OPEN_TABLES;
            lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
            if (prepare_schema_table(YYTHD, lex, 0, SCH_OPEN_TABLES))
              MYSQL_YYABORT;
          }
    break;

  case 1720:

/* Line 1455 of yacc.c  */
#line 11602 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_PLUGINS;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_PLUGINS))
              MYSQL_YYABORT;
          }
    break;

  case 1721:

/* Line 1455 of yacc.c  */
#line 11609 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_info.db_type= (yyvsp[(2) - (3)].db_type); }
    break;

  case 1722:

/* Line 1455 of yacc.c  */
#line 11611 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_info.db_type= NULL; }
    break;

  case 1723:

/* Line 1455 of yacc.c  */
#line 11613 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_FIELDS;
            if ((yyvsp[(5) - (6)].simple_string))
              (yyvsp[(4) - (6)].table)->change_db((yyvsp[(5) - (6)].simple_string));
            if (prepare_schema_table(YYTHD, lex, (yyvsp[(4) - (6)].table), SCH_COLUMNS))
              MYSQL_YYABORT;
          }
    break;

  case 1724:

/* Line 1455 of yacc.c  */
#line 11622 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_BINLOGS;
          }
    break;

  case 1725:

/* Line 1455 of yacc.c  */
#line 11626 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_SLAVE_HOSTS;
          }
    break;

  case 1726:

/* Line 1455 of yacc.c  */
#line 11630 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_BINLOG_EVENTS;
          }
    break;

  case 1728:

/* Line 1455 of yacc.c  */
#line 11635 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_RELAYLOG_EVENTS;
          }
    break;

  case 1730:

/* Line 1455 of yacc.c  */
#line 11640 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_KEYS;
            if ((yyvsp[(4) - (5)].simple_string))
              (yyvsp[(3) - (5)].table)->change_db((yyvsp[(4) - (5)].simple_string));
            if (prepare_schema_table(YYTHD, lex, (yyvsp[(3) - (5)].table), SCH_STATISTICS))
              MYSQL_YYABORT;
          }
    break;

  case 1731:

/* Line 1455 of yacc.c  */
#line 11649 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_STORAGE_ENGINES;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_ENGINES))
              MYSQL_YYABORT;
          }
    break;

  case 1732:

/* Line 1455 of yacc.c  */
#line 11656 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_AUTHORS;
          }
    break;

  case 1733:

/* Line 1455 of yacc.c  */
#line 11661 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_CONTRIBUTORS;
          }
    break;

  case 1734:

/* Line 1455 of yacc.c  */
#line 11666 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_PRIVILEGES;
          }
    break;

  case 1735:

/* Line 1455 of yacc.c  */
#line 11671 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (void) create_select_for_variable("warning_count"); }
    break;

  case 1736:

/* Line 1455 of yacc.c  */
#line 11673 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (void) create_select_for_variable("error_count"); }
    break;

  case 1737:

/* Line 1455 of yacc.c  */
#line 11675 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sql_command = SQLCOM_SHOW_WARNS;}
    break;

  case 1738:

/* Line 1455 of yacc.c  */
#line 11677 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sql_command = SQLCOM_SHOW_ERRORS;}
    break;

  case 1739:

/* Line 1455 of yacc.c  */
#line 11679 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sql_command = SQLCOM_SHOW_PROFILES; }
    break;

  case 1740:

/* Line 1455 of yacc.c  */
#line 11681 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_PROFILE;
            if (prepare_schema_table(YYTHD, lex, NULL, SCH_PROFILES) != 0)
              YYABORT;
          }
    break;

  case 1741:

/* Line 1455 of yacc.c  */
#line 11688 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS;
            lex->option_type= (yyvsp[(1) - (3)].var_type);
            if (prepare_schema_table(YYTHD, lex, 0, SCH_STATUS))
              MYSQL_YYABORT;
          }
    break;

  case 1742:

/* Line 1455 of yacc.c  */
#line 11696 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_PROCESSLIST;}
    break;

  case 1743:

/* Line 1455 of yacc.c  */
#line 11698 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_VARIABLES;
            lex->option_type= (yyvsp[(1) - (3)].var_type);
            if (prepare_schema_table(YYTHD, lex, 0, SCH_VARIABLES))
              MYSQL_YYABORT;
          }
    break;

  case 1744:

/* Line 1455 of yacc.c  */
#line 11706 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_CHARSETS;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_CHARSETS))
              MYSQL_YYABORT;
          }
    break;

  case 1745:

/* Line 1455 of yacc.c  */
#line 11713 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_COLLATIONS;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_COLLATIONS))
              MYSQL_YYABORT;
          }
    break;

  case 1746:

/* Line 1455 of yacc.c  */
#line 11720 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_GRANTS;
            LEX_USER *curr_user;
            if (!(curr_user= (LEX_USER*) lex->thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            bzero(curr_user, sizeof(st_lex_user));
            lex->grant_user= curr_user;
          }
    break;

  case 1747:

/* Line 1455 of yacc.c  */
#line 11730 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_GRANTS;
            lex->grant_user=(yyvsp[(3) - (3)].lex_user);
            lex->grant_user->password=null_lex_str;
          }
    break;

  case 1748:

/* Line 1455 of yacc.c  */
#line 11737 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command=SQLCOM_SHOW_CREATE_DB;
            Lex->create_info.options=(yyvsp[(3) - (4)].num);
            Lex->name= (yyvsp[(4) - (4)].lex_str);
          }
    break;

  case 1749:

/* Line 1455 of yacc.c  */
#line 11743 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_SHOW_CREATE;
            if (!lex->select_lex.add_table_to_list(YYTHD, (yyvsp[(3) - (3)].table), NULL,0))
              MYSQL_YYABORT;
            lex->only_view= 0;
            lex->create_info.storage_media= HA_SM_DEFAULT;
          }
    break;

  case 1750:

/* Line 1455 of yacc.c  */
#line 11752 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_SHOW_CREATE;
            if (!lex->select_lex.add_table_to_list(YYTHD, (yyvsp[(3) - (3)].table), NULL, 0))
              MYSQL_YYABORT;
            lex->only_view= 1;
          }
    break;

  case 1751:

/* Line 1455 of yacc.c  */
#line 11760 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_MASTER_STAT;
          }
    break;

  case 1752:

/* Line 1455 of yacc.c  */
#line 11764 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_SLAVE_STAT;
            Lex->verbose= 1;
          }
    break;

  case 1753:

/* Line 1455 of yacc.c  */
#line 11769 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->mi.connection_name= thd->variables.default_master_connection;
            lex->sql_command = SQLCOM_SHOW_SLAVE_STAT;
            lex->verbose= 0;
          }
    break;

  case 1754:

/* Line 1455 of yacc.c  */
#line 11777 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_SLAVE_STAT;
            Lex->verbose= 0;
          }
    break;

  case 1755:

/* Line 1455 of yacc.c  */
#line 11782 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
           LEX *lex= Lex;
           lex->sql_command= SQLCOM_SHOW_CLIENT_STATS;
           if (prepare_schema_table(YYTHD, lex, 0, SCH_CLIENT_STATS))
             MYSQL_YYABORT;
          }
    break;

  case 1756:

/* Line 1455 of yacc.c  */
#line 11789 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_USER_STATS;
             if (prepare_schema_table(YYTHD, lex, 0, SCH_USER_STATS))
               MYSQL_YYABORT;
          }
    break;

  case 1757:

/* Line 1455 of yacc.c  */
#line 11796 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TABLE_STATS;
             if (prepare_schema_table(YYTHD, lex, 0, SCH_TABLE_STATS))
               MYSQL_YYABORT;
          }
    break;

  case 1758:

/* Line 1455 of yacc.c  */
#line 11803 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_INDEX_STATS;
             if (prepare_schema_table(YYTHD, lex, 0, SCH_INDEX_STATS))
               MYSQL_YYABORT;
          }
    break;

  case 1759:

/* Line 1455 of yacc.c  */
#line 11810 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sql_command = SQLCOM_SHOW_CREATE_PROC;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1760:

/* Line 1455 of yacc.c  */
#line 11817 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sql_command = SQLCOM_SHOW_CREATE_FUNC;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1761:

/* Line 1455 of yacc.c  */
#line 11824 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_CREATE_TRIGGER;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1762:

/* Line 1455 of yacc.c  */
#line 11830 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS_PROC;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_PROCEDURES))
              MYSQL_YYABORT;
          }
    break;

  case 1763:

/* Line 1455 of yacc.c  */
#line 11837 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS_FUNC;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_PROCEDURES))
              MYSQL_YYABORT;
          }
    break;

  case 1764:

/* Line 1455 of yacc.c  */
#line 11844 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_SHOW_PROC_CODE;
            Lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1765:

/* Line 1455 of yacc.c  */
#line 11849 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_SHOW_FUNC_CODE;
            Lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1766:

/* Line 1455 of yacc.c  */
#line 11854 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->spname= (yyvsp[(3) - (3)].spname);
            Lex->sql_command = SQLCOM_SHOW_CREATE_EVENT;
          }
    break;

  case 1767:

/* Line 1455 of yacc.c  */
#line 11859 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Lex->sql_command= SQLCOM_SHOW_EXPLAIN;
            if (prepare_schema_table(thd, Lex, 0, SCH_EXPLAIN))
              MYSQL_YYABORT;
            add_value_to_list(thd, (yyvsp[(3) - (3)].item));
          }
    break;

  case 1768:

/* Line 1455 of yacc.c  */
#line 11870 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_STATUS; }
    break;

  case 1769:

/* Line 1455 of yacc.c  */
#line 11872 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_MUTEX; }
    break;

  case 1770:

/* Line 1455 of yacc.c  */
#line 11874 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_LOGS; }
    break;

  case 1775:

/* Line 1455 of yacc.c  */
#line 11888 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.simple_string)= 0; }
    break;

  case 1776:

/* Line 1455 of yacc.c  */
#line 11889 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.simple_string)= (yyvsp[(2) - (2)].lex_str).str; }
    break;

  case 1777:

/* Line 1455 of yacc.c  */
#line 11893 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->verbose=0; }
    break;

  case 1778:

/* Line 1455 of yacc.c  */
#line 11894 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->verbose=1; }
    break;

  case 1781:

/* Line 1455 of yacc.c  */
#line 11903 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->mi.log_file_name = 0; }
    break;

  case 1782:

/* Line 1455 of yacc.c  */
#line 11904 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->mi.log_file_name = (yyvsp[(2) - (2)].lex_str).str; }
    break;

  case 1783:

/* Line 1455 of yacc.c  */
#line 11908 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->mi.pos = 4; /* skip magic number */ }
    break;

  case 1784:

/* Line 1455 of yacc.c  */
#line 11909 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->mi.pos = (yyvsp[(2) - (2)].ulonglong_number); }
    break;

  case 1786:

/* Line 1455 of yacc.c  */
#line 11915 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->wild= new (YYTHD->mem_root) String((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length,
                                                    system_charset_info);
            if (Lex->wild == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1787:

/* Line 1455 of yacc.c  */
#line 11922 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->where= normalize_cond((yyvsp[(2) - (2)].item));
            if ((yyvsp[(2) - (2)].item))
              (yyvsp[(2) - (2)].item)->top_level_item();
          }
    break;

  case 1788:

/* Line 1455 of yacc.c  */
#line 11932 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
            lex->sql_command= SQLCOM_SHOW_FIELDS;
            lex->select_lex.db= 0;
            lex->verbose= 0;
            if (prepare_schema_table(YYTHD, lex, (yyvsp[(2) - (2)].table), SCH_COLUMNS))
              MYSQL_YYABORT;
          }
    break;

  case 1789:

/* Line 1455 of yacc.c  */
#line 11942 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1790:

/* Line 1455 of yacc.c  */
#line 11944 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->describe|= DESCRIBE_NORMAL; }
    break;

  case 1791:

/* Line 1455 of yacc.c  */
#line 11946 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->select_lex.options|= SELECT_DESCRIBE;
          }
    break;

  case 1794:

/* Line 1455 of yacc.c  */
#line 11958 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1795:

/* Line 1455 of yacc.c  */
#line 11959 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->describe|= DESCRIBE_EXTENDED; }
    break;

  case 1796:

/* Line 1455 of yacc.c  */
#line 11960 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->describe|= DESCRIBE_PARTITIONS; }
    break;

  case 1797:

/* Line 1455 of yacc.c  */
#line 11964 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1798:

/* Line 1455 of yacc.c  */
#line 11965 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->wild= (yyvsp[(1) - (1)].string); }
    break;

  case 1799:

/* Line 1455 of yacc.c  */
#line 11967 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->wild= new (YYTHD->mem_root) String((const char*) (yyvsp[(1) - (1)].lex_str).str,
                                                    (yyvsp[(1) - (1)].lex_str).length,
                                                    system_charset_info);
            if (Lex->wild == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1800:

/* Line 1455 of yacc.c  */
#line 11981 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_FLUSH;
            lex->type= 0;
            lex->no_write_to_binlog= (yyvsp[(2) - (2)].num);
          }
    break;

  case 1801:

/* Line 1455 of yacc.c  */
#line 11988 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1802:

/* Line 1455 of yacc.c  */
#line 11993 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->type|= REFRESH_TABLES;
            /*
              Set type of metadata and table locks for
              FLUSH TABLES table_list [WITH READ LOCK].
            */
            YYPS->m_lock_type= TL_READ_NO_INSERT;
            YYPS->m_mdl_type= MDL_SHARED_HIGH_PRIO;
          }
    break;

  case 1803:

/* Line 1455 of yacc.c  */
#line 12002 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1804:

/* Line 1455 of yacc.c  */
#line 12003 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1806:

/* Line 1455 of yacc.c  */
#line 12008 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1807:

/* Line 1455 of yacc.c  */
#line 12010 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            TABLE_LIST *tables= Lex->query_tables;
            Lex->type|= REFRESH_READ_LOCK | (yyvsp[(4) - (4)].num);
            for (; tables; tables= tables->next_global)
            {
              tables->mdl_request.set_type(MDL_SHARED_NO_WRITE);
              tables->required_type= FRMTYPE_TABLE; /* Don't try to flush views. */
              tables->open_type= OT_BASE_ONLY;      /* Ignore temporary tables. */
            }
          }
    break;

  case 1809:

/* Line 1455 of yacc.c  */
#line 12025 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1810:

/* Line 1455 of yacc.c  */
#line 12030 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_ERROR_LOG; }
    break;

  case 1811:

/* Line 1455 of yacc.c  */
#line 12032 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_ENGINE_LOG; }
    break;

  case 1812:

/* Line 1455 of yacc.c  */
#line 12034 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_GENERAL_LOG; }
    break;

  case 1813:

/* Line 1455 of yacc.c  */
#line 12036 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_SLOW_LOG; }
    break;

  case 1814:

/* Line 1455 of yacc.c  */
#line 12038 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_BINARY_LOG; }
    break;

  case 1815:

/* Line 1455 of yacc.c  */
#line 12040 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->type & REFRESH_RELAY_LOG)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "FLUSH", "RELAY LOGS");
              MYSQL_YYABORT;
	    }
            lex->type|= REFRESH_RELAY_LOG;
            lex->relay_log_connection_name= lex->mi.connection_name;
           }
    break;

  case 1816:

/* Line 1455 of yacc.c  */
#line 12051 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_QUERY_CACHE_FREE; }
    break;

  case 1817:

/* Line 1455 of yacc.c  */
#line 12053 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_HOSTS; }
    break;

  case 1818:

/* Line 1455 of yacc.c  */
#line 12055 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_GRANT; }
    break;

  case 1819:

/* Line 1455 of yacc.c  */
#line 12057 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->type|= REFRESH_LOG;
            Lex->relay_log_connection_name.str= (char*) "";
            Lex->relay_log_connection_name.length= 0;
          }
    break;

  case 1820:

/* Line 1455 of yacc.c  */
#line 12063 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_STATUS; }
    break;

  case 1821:

/* Line 1455 of yacc.c  */
#line 12065 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            LEX *lex= Lex;
            if (lex->type & REFRESH_SLAVE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "FLUSH","SLAVE");
              MYSQL_YYABORT;
	    }
            lex->type|= REFRESH_SLAVE;
            lex->reset_slave_info.all= false;
          }
    break;

  case 1822:

/* Line 1455 of yacc.c  */
#line 12076 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_CLIENT_STATS; }
    break;

  case 1823:

/* Line 1455 of yacc.c  */
#line 12078 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_USER_STATS; }
    break;

  case 1824:

/* Line 1455 of yacc.c  */
#line 12080 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_TABLE_STATS; }
    break;

  case 1825:

/* Line 1455 of yacc.c  */
#line 12082 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_INDEX_STATS; }
    break;

  case 1826:

/* Line 1455 of yacc.c  */
#line 12084 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_MASTER; }
    break;

  case 1827:

/* Line 1455 of yacc.c  */
#line 12086 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_DES_KEY_FILE; }
    break;

  case 1828:

/* Line 1455 of yacc.c  */
#line 12088 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_USER_RESOURCES; }
    break;

  case 1829:

/* Line 1455 of yacc.c  */
#line 12092 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1830:

/* Line 1455 of yacc.c  */
#line 12093 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1831:

/* Line 1455 of yacc.c  */
#line 12097 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {(yyval.num)= 0;}
    break;

  case 1832:

/* Line 1455 of yacc.c  */
#line 12098 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {(yyval.num)= REFRESH_CHECKPOINT; }
    break;

  case 1833:

/* Line 1455 of yacc.c  */
#line 12102 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_RESET; lex->type=0;
          }
    break;

  case 1834:

/* Line 1455 of yacc.c  */
#line 12107 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1837:

/* Line 1455 of yacc.c  */
#line 12116 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_SLAVE; }
    break;

  case 1838:

/* Line 1455 of yacc.c  */
#line 12118 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { }
    break;

  case 1839:

/* Line 1455 of yacc.c  */
#line 12119 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_MASTER; }
    break;

  case 1840:

/* Line 1455 of yacc.c  */
#line 12120 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_QUERY_CACHE;}
    break;

  case 1841:

/* Line 1455 of yacc.c  */
#line 12124 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->reset_slave_info.all= false; }
    break;

  case 1842:

/* Line 1455 of yacc.c  */
#line 12125 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->reset_slave_info.all= true; }
    break;

  case 1843:

/* Line 1455 of yacc.c  */
#line 12130 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type=0;
            lex->sql_command = SQLCOM_PURGE;
          }
    break;

  case 1844:

/* Line 1455 of yacc.c  */
#line 12136 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1846:

/* Line 1455 of yacc.c  */
#line 12145 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->to_log = (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 1847:

/* Line 1455 of yacc.c  */
#line 12149 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->value_list.empty();
            lex->value_list.push_front((yyvsp[(2) - (2)].item));
            lex->sql_command= SQLCOM_PURGE_BEFORE;
          }
    break;

  case 1848:

/* Line 1455 of yacc.c  */
#line 12161 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->value_list.empty();
            lex->users_list.empty();
            lex->sql_command= SQLCOM_KILL;
          }
    break;

  case 1849:

/* Line 1455 of yacc.c  */
#line 12168 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->kill_signal= (killed_state) ((yyvsp[(3) - (5)].num) | (yyvsp[(4) - (5)].num));
          }
    break;

  case 1850:

/* Line 1455 of yacc.c  */
#line 12174 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= (int) KILL_HARD_BIT; }
    break;

  case 1851:

/* Line 1455 of yacc.c  */
#line 12175 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= (int) KILL_HARD_BIT; }
    break;

  case 1852:

/* Line 1455 of yacc.c  */
#line 12176 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1853:

/* Line 1455 of yacc.c  */
#line 12179 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= (int) KILL_CONNECTION; }
    break;

  case 1854:

/* Line 1455 of yacc.c  */
#line 12180 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= (int) KILL_CONNECTION; }
    break;

  case 1855:

/* Line 1455 of yacc.c  */
#line 12181 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= (int) KILL_QUERY; }
    break;

  case 1856:

/* Line 1455 of yacc.c  */
#line 12186 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
          Lex->value_list.push_front((yyval.item));
          Lex->kill_type= KILL_TYPE_ID;
         }
    break;

  case 1857:

/* Line 1455 of yacc.c  */
#line 12191 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->users_list.push_back((yyvsp[(2) - (2)].lex_user));
            Lex->kill_type= KILL_TYPE_USER;
          }
    break;

  case 1858:

/* Line 1455 of yacc.c  */
#line 12201 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_CHANGE_DB;
            lex->select_lex.db= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 1859:

/* Line 1455 of yacc.c  */
#line 12212 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), 
                       (yyvsp[(2) - (2)].filetype) == FILETYPE_CSV ? "LOAD DATA" : "LOAD XML");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1860:

/* Line 1455 of yacc.c  */
#line 12224 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_LOAD;
            lex->local_file=  (yyvsp[(5) - (7)].num);
            lex->duplicates= DUP_ERROR;
            lex->ignore= 0;
            if (!(lex->exchange= new sql_exchange((yyvsp[(7) - (7)].lex_str).str, 0, (yyvsp[(2) - (7)].filetype))))
              MYSQL_YYABORT;
          }
    break;

  case 1861:

/* Line 1455 of yacc.c  */
#line 12234 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(12) - (12)].table), NULL, TL_OPTION_UPDATING,
                                           (yyvsp[(4) - (12)].lock_type), MDL_SHARED_WRITE))
              MYSQL_YYABORT;
            lex->field_list.empty();
            lex->update_list.empty();
            lex->value_list.empty();
          }
    break;

  case 1862:

/* Line 1455 of yacc.c  */
#line 12244 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->exchange->cs= (yyvsp[(14) - (14)].charset); }
    break;

  case 1863:

/* Line 1455 of yacc.c  */
#line 12248 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1864:

/* Line 1455 of yacc.c  */
#line 12252 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.filetype)= FILETYPE_CSV; }
    break;

  case 1865:

/* Line 1455 of yacc.c  */
#line 12253 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.filetype)= FILETYPE_XML; }
    break;

  case 1866:

/* Line 1455 of yacc.c  */
#line 12257 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=0;}
    break;

  case 1867:

/* Line 1455 of yacc.c  */
#line 12258 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=1;}
    break;

  case 1868:

/* Line 1455 of yacc.c  */
#line 12262 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_DEFAULT; }
    break;

  case 1869:

/* Line 1455 of yacc.c  */
#line 12264 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              Ignore this option in SP to avoid problem with query cache and
              triggers with non default priority locks
            */
            (yyval.lock_type)= (Lex->sphead ? TL_WRITE_DEFAULT : TL_WRITE_CONCURRENT_INSERT);
          }
    break;

  case 1870:

/* Line 1455 of yacc.c  */
#line 12271 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1871:

/* Line 1455 of yacc.c  */
#line 12275 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->duplicates=DUP_ERROR; }
    break;

  case 1872:

/* Line 1455 of yacc.c  */
#line 12276 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->duplicates=DUP_REPLACE; }
    break;

  case 1873:

/* Line 1455 of yacc.c  */
#line 12277 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ignore= 1; }
    break;

  case 1878:

/* Line 1455 of yacc.c  */
#line 12292 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->field_term= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1879:

/* Line 1455 of yacc.c  */
#line 12297 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            DBUG_ASSERT(lex->exchange != 0);
            lex->exchange->enclosed= (yyvsp[(4) - (4)].string);
            lex->exchange->opt_enclosed= 1;
          }
    break;

  case 1880:

/* Line 1455 of yacc.c  */
#line 12304 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->enclosed= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1881:

/* Line 1455 of yacc.c  */
#line 12309 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->escaped= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1886:

/* Line 1455 of yacc.c  */
#line 12327 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->line_term= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1887:

/* Line 1455 of yacc.c  */
#line 12332 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->line_start= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1888:

/* Line 1455 of yacc.c  */
#line 12339 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { }
    break;

  case 1889:

/* Line 1455 of yacc.c  */
#line 12341 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->exchange->line_term = (yyvsp[(4) - (4)].string); }
    break;

  case 1891:

/* Line 1455 of yacc.c  */
#line 12346 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->skip_lines= atol((yyvsp[(2) - (3)].lex_str).str);
          }
    break;

  case 1892:

/* Line 1455 of yacc.c  */
#line 12353 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { }
    break;

  case 1893:

/* Line 1455 of yacc.c  */
#line 12355 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { }
    break;

  case 1894:

/* Line 1455 of yacc.c  */
#line 12359 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1895:

/* Line 1455 of yacc.c  */
#line 12360 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1896:

/* Line 1455 of yacc.c  */
#line 12361 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1897:

/* Line 1455 of yacc.c  */
#line 12366 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(3) - (3)].item)); }
    break;

  case 1898:

/* Line 1455 of yacc.c  */
#line 12368 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(1) - (1)].item)); }
    break;

  case 1899:

/* Line 1455 of yacc.c  */
#line 12372 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {(yyval.item)= (yyvsp[(1) - (1)].item);}
    break;

  case 1900:

/* Line 1455 of yacc.c  */
#line 12374 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_user_var_as_out_param((yyvsp[(2) - (2)].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1901:

/* Line 1455 of yacc.c  */
#line 12382 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1902:

/* Line 1455 of yacc.c  */
#line 12383 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1905:

/* Line 1455 of yacc.c  */
#line 12393 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->update_list.push_back((yyvsp[(1) - (5)].item)) || 
                lex->value_list.push_back((yyvsp[(4) - (5)].item)))
                MYSQL_YYABORT;
            (yyvsp[(4) - (5)].item)->set_name_no_truncate((yyvsp[(3) - (5)].simple_string), (uint) ((yyvsp[(5) - (5)].simple_string) - (yyvsp[(3) - (5)].simple_string)), YYTHD->charset());
          }
    break;

  case 1906:

/* Line 1455 of yacc.c  */
#line 12406 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX_STRING tmp;
            THD *thd= YYTHD;
            CHARSET_INFO *cs_con= thd->variables.collation_connection;
            CHARSET_INFO *cs_cli= thd->variables.character_set_client;
            uint repertoire= thd->lex->text_string_is_7bit &&
                             my_charset_is_ascii_based(cs_cli) ?
                             MY_REPERTOIRE_ASCII : MY_REPERTOIRE_UNICODE30;
            if (thd->charset_is_collation_connection ||
                (repertoire == MY_REPERTOIRE_ASCII &&
                 my_charset_is_ascii_based(cs_con)))
              tmp= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&tmp, cs_con, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, cs_cli))
                MYSQL_YYABORT;
            }
            (yyval.item)= new (thd->mem_root) Item_string(tmp.str, tmp.length, cs_con,
                                                DERIVATION_COERCIBLE,
                                                repertoire);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1907:

/* Line 1455 of yacc.c  */
#line 12430 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            uint repertoire= Lex->text_string_is_7bit ?
                             MY_REPERTOIRE_ASCII : MY_REPERTOIRE_UNICODE30;
            DBUG_ASSERT(my_charset_is_ascii_based(national_charset_info));
            (yyval.item)= new (YYTHD->mem_root) Item_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length,
                                                  national_charset_info,
                                                  DERIVATION_COERCIBLE,
                                                  repertoire);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1908:

/* Line 1455 of yacc.c  */
#line 12442 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item_string *str= new (YYTHD->mem_root) Item_string((yyvsp[(2) - (2)].lex_str).str,
                                                                (yyvsp[(2) - (2)].lex_str).length, (yyvsp[(1) - (2)].charset));
            if (str == NULL)
              MYSQL_YYABORT;
            str->set_repertoire_from_value();
            str->set_cs_specified(TRUE);

            (yyval.item)= str;
          }
    break;

  case 1909:

/* Line 1455 of yacc.c  */
#line 12453 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item_string* item= (Item_string*) (yyvsp[(1) - (2)].item);
            item->append((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (!(item->collation.repertoire & MY_REPERTOIRE_EXTENDED))
            {
              /*
                 If the string has been pure ASCII so far,
                 check the new part.
              */
              CHARSET_INFO *cs= YYTHD->variables.collation_connection;
              item->collation.repertoire|= my_string_repertoire(cs,
                                                                (yyvsp[(2) - (2)].lex_str).str,
                                                                (yyvsp[(2) - (2)].lex_str).length);
            }
          }
    break;

  case 1910:

/* Line 1455 of yacc.c  */
#line 12472 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.string)= new (YYTHD->mem_root) String((yyvsp[(1) - (1)].lex_str).str,
                                             (yyvsp[(1) - (1)].lex_str).length,
                                             YYTHD->variables.collation_connection);
            if ((yyval.string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1911:

/* Line 1455 of yacc.c  */
#line 12480 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_hex_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fields, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            (yyval.string)= tmp->val_str((String*) 0);
          }
    break;

  case 1912:

/* Line 1455 of yacc.c  */
#line 12492 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_bin_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fields, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            (yyval.string)= tmp->val_str((String*) 0);
          }
    break;

  case 1913:

/* Line 1455 of yacc.c  */
#line 12507 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            Item_param *item;
            if (! lex->parsing_options.allows_variable)
            {
              my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
              MYSQL_YYABORT;
            }
            item= new (thd->mem_root) Item_param((uint) (lip->get_tok_start() - thd->query()));
            if (!((yyval.item)= item) || lex->param_list.push_back(item))
            {
              my_message(ER_OUT_OF_RESOURCES, ER(ER_OUT_OF_RESOURCES), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1914:

/* Line 1455 of yacc.c  */
#line 12527 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item); }
    break;

  case 1915:

/* Line 1455 of yacc.c  */
#line 12528 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item_num); }
    break;

  case 1916:

/* Line 1455 of yacc.c  */
#line 12530 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyvsp[(2) - (2)].item_num)->max_length++;
            (yyval.item)= (yyvsp[(2) - (2)].item_num)->neg();
          }
    break;

  case 1917:

/* Line 1455 of yacc.c  */
#line 12537 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item); }
    break;

  case 1918:

/* Line 1455 of yacc.c  */
#line 12538 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item_num); }
    break;

  case 1919:

/* Line 1455 of yacc.c  */
#line 12540 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_null();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            YYLIP->next_state= MY_LEX_OPERATOR_OR_IDENT;
          }
    break;

  case 1920:

/* Line 1455 of yacc.c  */
#line 12547 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_int((char*) "FALSE",0,1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1921:

/* Line 1455 of yacc.c  */
#line 12553 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_int((char*) "TRUE",1,1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1922:

/* Line 1455 of yacc.c  */
#line 12559 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_hex_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1923:

/* Line 1455 of yacc.c  */
#line 12565 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_bin_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1924:

/* Line 1455 of yacc.c  */
#line 12571 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_hex_string((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fieds, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            String *str= tmp->val_str((String*) 0);

            Item_string *item_str;
            item_str= new (YYTHD->mem_root)
                        Item_string(NULL, /* name will be set in select_item */
                                    str ? str->ptr() : "",
                                    str ? str->length() : 0,
                                    (yyvsp[(1) - (2)].charset));
            if (!item_str ||
                !item_str->check_well_formed_result(&item_str->str_value, TRUE))
            {
              MYSQL_YYABORT;
            }

            item_str->set_repertoire_from_value();
            item_str->set_cs_specified(TRUE);

            (yyval.item)= item_str;
          }
    break;

  case 1925:

/* Line 1455 of yacc.c  */
#line 12600 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_bin_string((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fieds, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            String *str= tmp->val_str((String*) 0);

            Item_string *item_str;
            item_str= new (YYTHD->mem_root)
                        Item_string(NULL, /* name will be set in select_item */
                                    str ? str->ptr() : "",
                                    str ? str->length() : 0,
                                    (yyvsp[(1) - (2)].charset));
            if (!item_str ||
                !item_str->check_well_formed_result(&item_str->str_value, TRUE))
            {
              MYSQL_YYABORT;
            }

            item_str->set_cs_specified(TRUE);

            (yyval.item)= item_str;
          }
    break;

  case 1926:

/* Line 1455 of yacc.c  */
#line 12627 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item); }
    break;

  case 1927:

/* Line 1455 of yacc.c  */
#line 12628 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item); }
    break;

  case 1928:

/* Line 1455 of yacc.c  */
#line 12629 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item); }
    break;

  case 1929:

/* Line 1455 of yacc.c  */
#line 12634 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            int error;
            (yyval.item_num)= new (YYTHD->mem_root)
                  Item_int((yyvsp[(1) - (1)].lex_str).str,
                           (longlong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, NULL, &error),
                           (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1930:

/* Line 1455 of yacc.c  */
#line 12644 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            int error;
            (yyval.item_num)= new (YYTHD->mem_root)
                  Item_int((yyvsp[(1) - (1)].lex_str).str,
                           (longlong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, NULL, &error),
                           (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1931:

/* Line 1455 of yacc.c  */
#line 12654 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item_num)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1932:

/* Line 1455 of yacc.c  */
#line 12660 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item_num)= new (YYTHD->mem_root) Item_decimal((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length,
                                                   YYTHD->charset());
            if (((yyval.item_num) == NULL) || (YYTHD->is_error()))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1933:

/* Line 1455 of yacc.c  */
#line 12669 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item_num)= new (YYTHD->mem_root) Item_float((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (((yyval.item_num) == NULL) || (YYTHD->is_error()))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1934:

/* Line 1455 of yacc.c  */
#line 12683 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 1935:

/* Line 1455 of yacc.c  */
#line 12684 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 1936:

/* Line 1455 of yacc.c  */
#line 12689 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            (yyval.item)= new (YYTHD->mem_root) Item_field(Lex->current_context(),
                                                 NullS, (yyvsp[(1) - (3)].lex_str).str, "*");
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            sel->with_wild++;
          }
    break;

  case 1937:

/* Line 1455 of yacc.c  */
#line 12698 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            SELECT_LEX *sel= Select;
            const char* schema= thd->client_capabilities & CLIENT_NO_SCHEMA ?
                                  NullS : (yyvsp[(1) - (5)].lex_str).str;
            (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                               schema,
                                               (yyvsp[(3) - (5)].lex_str).str,"*");
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            sel->with_wild++;
          }
    break;

  case 1938:

/* Line 1455 of yacc.c  */
#line 12713 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 1939:

/* Line 1455 of yacc.c  */
#line 12718 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_variable_t *spv;
            sp_pcontext *spc = lex->spcont;
            if (spc && (spv = spc->find_variable(&(yyvsp[(1) - (1)].lex_str))))
            {
              /* We're compiling a stored procedure and found a variable */
              if (! lex->parsing_options.allows_variable)
              {
                my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
                MYSQL_YYABORT;
              }

              Item_splocal *splocal;
              splocal= new (thd->mem_root)
                         Item_splocal((yyvsp[(1) - (1)].lex_str), spv->offset, spv->type,
                                      lip->get_tok_start_prev() - lex->sphead->m_tmp_query,
                                      lip->get_tok_end() - lip->get_tok_start_prev());
              if (splocal == NULL)
                MYSQL_YYABORT;
#ifndef DBUG_OFF
              splocal->m_sp= lex->sphead;
#endif
              (yyval.item)= splocal;
              lex->safe_to_cache_query=0;
            }
            else
            {
              SELECT_LEX *sel=Select;
              if ((sel->parsing_place != IN_HAVING) ||
                  (sel->get_in_sum_expr() > 0))
              {
                (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                   NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
              }
              else
              {
                (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                                 NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
              }
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1940:

/* Line 1455 of yacc.c  */
#line 12764 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 1941:

/* Line 1455 of yacc.c  */
#line 12769 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            SELECT_LEX *sel=Select;
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                               NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1942:

/* Line 1455 of yacc.c  */
#line 12786 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 1943:

/* Line 1455 of yacc.c  */
#line 12791 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            /*
              FIXME This will work ok in simple_ident_nospvar case because
              we can't meet simple_ident_nospvar in trigger now. But it
              should be changed in future.
            */
            if (lex->sphead && lex->sphead->m_type == TYPE_ENUM_TRIGGER &&
                (!my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "NEW") ||
                 !my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "OLD")))
            {
              Item_trigger_field *trg_fld;
              bool new_row= ((yyvsp[(1) - (3)].lex_str).str[0]=='N' || (yyvsp[(1) - (3)].lex_str).str[0]=='n');

              if (lex->trg_chistics.event == TRG_EVENT_INSERT &&
                  !new_row)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0), "OLD", "on INSERT");
                MYSQL_YYABORT;
              }

              if (lex->trg_chistics.event == TRG_EVENT_DELETE &&
                  new_row)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0), "NEW", "on DELETE");
                MYSQL_YYABORT;
              }

              DBUG_ASSERT(!new_row ||
                          (lex->trg_chistics.event == TRG_EVENT_INSERT ||
                           lex->trg_chistics.event == TRG_EVENT_UPDATE));
              const bool read_only=
                !(new_row && lex->trg_chistics.action_time == TRG_ACTION_BEFORE);
              trg_fld= new (thd->mem_root)
                         Item_trigger_field(Lex->current_context(),
                                            new_row ?
                                              Item_trigger_field::NEW_ROW:
                                              Item_trigger_field::OLD_ROW,
                                            (yyvsp[(3) - (3)].lex_str).str,
                                            SELECT_ACL,
                                            read_only);
              if (trg_fld == NULL)
                MYSQL_YYABORT;

              /*
                Let us add this item to list of all Item_trigger_field objects
                in trigger.
              */
              lex->trg_table_fields.link_in_list(trg_fld,
                                                 &trg_fld->next_trg_field);

              (yyval.item)= trg_fld;
            }
            else
            {
              SELECT_LEX *sel= lex->current_select;
              if (sel->no_table_names_allowed)
              {
                my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                         MYF(0), (yyvsp[(1) - (3)].lex_str).str, thd->where);
              }
              if ((sel->parsing_place != IN_HAVING) ||
                  (sel->get_in_sum_expr() > 0))
              {
                (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                   NullS, (yyvsp[(1) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).str);
              }
              else
              {
                (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                                 NullS, (yyvsp[(1) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).str);
              }
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1944:

/* Line 1455 of yacc.c  */
#line 12870 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->no_table_names_allowed)
            {
              my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                       MYF(0), (yyvsp[(2) - (4)].lex_str).str, thd->where);
            }
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 NullS, (yyvsp[(2) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).str);

            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                               NullS, (yyvsp[(2) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1945:

/* Line 1455 of yacc.c  */
#line 12895 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            SELECT_LEX *sel= lex->current_select;
            const char* schema= (thd->client_capabilities & CLIENT_NO_SCHEMA ?
                                 NullS : (yyvsp[(1) - (5)].lex_str).str);
            if (sel->no_table_names_allowed)
            {
              my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                       MYF(0), (yyvsp[(3) - (5)].lex_str).str, thd->where);
            }
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 schema,
                                                 (yyvsp[(3) - (5)].lex_str).str, (yyvsp[(5) - (5)].lex_str).str);
            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                               schema,
                                               (yyvsp[(3) - (5)].lex_str).str, (yyvsp[(5) - (5)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1946:

/* Line 1455 of yacc.c  */
#line 12925 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 1947:

/* Line 1455 of yacc.c  */
#line 12927 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            TABLE_LIST *table= Select->table_list.first;
            if (my_strcasecmp(table_alias_charset, (yyvsp[(1) - (5)].lex_str).str, table->db))
            {
              my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[(1) - (5)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (my_strcasecmp(table_alias_charset, (yyvsp[(3) - (5)].lex_str).str,
                              table->table_name))
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(3) - (5)].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.lex_str)=(yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 1948:

/* Line 1455 of yacc.c  */
#line 12943 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            TABLE_LIST *table= Select->table_list.first;
            if (my_strcasecmp(table_alias_charset, (yyvsp[(1) - (3)].lex_str).str, table->alias))
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(1) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.lex_str)=(yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 1949:

/* Line 1455 of yacc.c  */
#line 12952 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str);}
    break;

  case 1950:

/* Line 1455 of yacc.c  */
#line 12957 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.table)= new Table_ident((yyvsp[(1) - (1)].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1951:

/* Line 1455 of yacc.c  */
#line 12963 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.table)= new Table_ident(YYTHD, (yyvsp[(1) - (3)].lex_str),(yyvsp[(3) - (3)].lex_str),0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1952:

/* Line 1455 of yacc.c  */
#line 12969 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* For Delphi */
            (yyval.table)= new Table_ident((yyvsp[(2) - (2)].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1953:

/* Line 1455 of yacc.c  */
#line 12979 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.table)= new Table_ident((yyvsp[(1) - (2)].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1954:

/* Line 1455 of yacc.c  */
#line 12985 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.table)= new Table_ident(YYTHD, (yyvsp[(1) - (4)].lex_str),(yyvsp[(3) - (4)].lex_str),0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1955:

/* Line 1455 of yacc.c  */
#line 12994 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX_STRING db={(char*) any_db,3};
            (yyval.table)= new Table_ident(YYTHD, db,(yyvsp[(1) - (1)].lex_str),0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1956:

/* Line 1455 of yacc.c  */
#line 13003 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 1957:

/* Line 1455 of yacc.c  */
#line 13005 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_system_charset)
            {
              CHARSET_INFO *cs= system_charset_info;
              int dummy_error;
              uint wlen= cs->cset->well_formed_len(cs, (yyvsp[(1) - (1)].lex_str).str,
                                                   (yyvsp[(1) - (1)].lex_str).str+(yyvsp[(1) - (1)].lex_str).length,
                                                   (yyvsp[(1) - (1)].lex_str).length, &dummy_error);
              if (wlen < (yyvsp[(1) - (1)].lex_str).length)
              {
                ErrConvString err((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, &my_charset_bin);
                my_error(ER_INVALID_CHARACTER_STRING, MYF(0),
                         cs->csname, err.ptr());
                MYSQL_YYABORT;
              }
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            }
            else
            {
              if (thd->convert_string(&(yyval.lex_str), system_charset_info,
                                  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1958:

/* Line 1455 of yacc.c  */
#line 13035 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_system_charset)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str), system_charset_info,
                                  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1959:

/* Line 1455 of yacc.c  */
#line 13051 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_collation_connection)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str), thd->variables.collation_connection,
                                  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            } 
          }
    break;

  case 1960:

/* Line 1455 of yacc.c  */
#line 13067 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_character_set_filesystem)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str),
                                      thd->variables.character_set_filesystem,
                                      (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1961:

/* Line 1455 of yacc.c  */
#line 13083 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1962:

/* Line 1455 of yacc.c  */
#line 13085 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            (yyval.lex_str).str= thd->strmake((yyvsp[(1) - (1)].symbol).str, (yyvsp[(1) - (1)].symbol).length);
            if ((yyval.lex_str).str == NULL)
              MYSQL_YYABORT;
            (yyval.lex_str).length= (yyvsp[(1) - (1)].symbol).length;
          }
    break;

  case 1963:

/* Line 1455 of yacc.c  */
#line 13095 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1964:

/* Line 1455 of yacc.c  */
#line 13097 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            (yyval.lex_str).str= thd->strmake((yyvsp[(1) - (1)].symbol).str, (yyvsp[(1) - (1)].symbol).length);
            if ((yyval.lex_str).str == NULL)
              MYSQL_YYABORT;
            (yyval.lex_str).length= (yyvsp[(1) - (1)].symbol).length;
          }
    break;

  case 1965:

/* Line 1455 of yacc.c  */
#line 13107 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 1966:

/* Line 1455 of yacc.c  */
#line 13108 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 1967:

/* Line 1455 of yacc.c  */
#line 13109 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 1968:

/* Line 1455 of yacc.c  */
#line 13114 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            if (!((yyval.lex_user)=(LEX_USER*) thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user = (yyvsp[(1) - (1)].lex_str);
            (yyval.lex_user)->host.str= (char *) "%";
            (yyval.lex_user)->host.length= 1;
            (yyval.lex_user)->password= null_lex_str; 
            (yyval.lex_user)->plugin= empty_lex_str;
            (yyval.lex_user)->auth= empty_lex_str;

            if (check_string_char_length(&(yyval.lex_user)->user, ER(ER_USERNAME),
                                         USERNAME_CHAR_LENGTH,
                                         system_charset_info, 0))
              MYSQL_YYABORT;
          }
    break;

  case 1969:

/* Line 1455 of yacc.c  */
#line 13131 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            if (!((yyval.lex_user)=(LEX_USER*) thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user = (yyvsp[(1) - (3)].lex_str); (yyval.lex_user)->host=(yyvsp[(3) - (3)].lex_str);
            (yyval.lex_user)->password= null_lex_str; 
            (yyval.lex_user)->plugin= empty_lex_str;
            (yyval.lex_user)->auth= empty_lex_str;

            if (check_string_char_length(&(yyval.lex_user)->user, ER(ER_USERNAME),
                                         USERNAME_CHAR_LENGTH,
                                         system_charset_info, 0) ||
                check_host_name(&(yyval.lex_user)->host))
              MYSQL_YYABORT;
            /*
              Convert hostname part of username to lowercase.
              It's OK to use in-place lowercase as long as
              the character set is utf8.
            */
            my_casedn_str(system_charset_info, (yyval.lex_user)->host.str);
          }
    break;

  case 1970:

/* Line 1455 of yacc.c  */
#line 13153 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!((yyval.lex_user)=(LEX_USER*) YYTHD->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            /* 
              empty LEX_USER means current_user and 
              will be handled in the  get_current_user() function
              later
            */
            bzero((yyval.lex_user), sizeof(LEX_USER));
          }
    break;

  case 1971:

/* Line 1455 of yacc.c  */
#line 13167 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1972:

/* Line 1455 of yacc.c  */
#line 13168 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1973:

/* Line 1455 of yacc.c  */
#line 13169 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1974:

/* Line 1455 of yacc.c  */
#line 13170 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1975:

/* Line 1455 of yacc.c  */
#line 13171 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1976:

/* Line 1455 of yacc.c  */
#line 13172 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1977:

/* Line 1455 of yacc.c  */
#line 13173 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1978:

/* Line 1455 of yacc.c  */
#line 13174 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1979:

/* Line 1455 of yacc.c  */
#line 13175 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1980:

/* Line 1455 of yacc.c  */
#line 13176 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1981:

/* Line 1455 of yacc.c  */
#line 13177 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1982:

/* Line 1455 of yacc.c  */
#line 13178 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1983:

/* Line 1455 of yacc.c  */
#line 13179 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1984:

/* Line 1455 of yacc.c  */
#line 13180 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1985:

/* Line 1455 of yacc.c  */
#line 13181 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1986:

/* Line 1455 of yacc.c  */
#line 13182 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1987:

/* Line 1455 of yacc.c  */
#line 13183 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1988:

/* Line 1455 of yacc.c  */
#line 13184 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1989:

/* Line 1455 of yacc.c  */
#line 13185 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1990:

/* Line 1455 of yacc.c  */
#line 13186 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1991:

/* Line 1455 of yacc.c  */
#line 13187 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1992:

/* Line 1455 of yacc.c  */
#line 13188 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1993:

/* Line 1455 of yacc.c  */
#line 13189 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1994:

/* Line 1455 of yacc.c  */
#line 13190 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1995:

/* Line 1455 of yacc.c  */
#line 13191 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1996:

/* Line 1455 of yacc.c  */
#line 13192 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1997:

/* Line 1455 of yacc.c  */
#line 13193 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1998:

/* Line 1455 of yacc.c  */
#line 13194 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1999:

/* Line 1455 of yacc.c  */
#line 13195 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2000:

/* Line 1455 of yacc.c  */
#line 13196 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2001:

/* Line 1455 of yacc.c  */
#line 13197 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2002:

/* Line 1455 of yacc.c  */
#line 13198 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2003:

/* Line 1455 of yacc.c  */
#line 13199 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2004:

/* Line 1455 of yacc.c  */
#line 13200 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2005:

/* Line 1455 of yacc.c  */
#line 13201 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2006:

/* Line 1455 of yacc.c  */
#line 13202 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2007:

/* Line 1455 of yacc.c  */
#line 13203 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2008:

/* Line 1455 of yacc.c  */
#line 13204 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2009:

/* Line 1455 of yacc.c  */
#line 13205 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2010:

/* Line 1455 of yacc.c  */
#line 13206 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2011:

/* Line 1455 of yacc.c  */
#line 13207 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2012:

/* Line 1455 of yacc.c  */
#line 13208 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2013:

/* Line 1455 of yacc.c  */
#line 13209 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2014:

/* Line 1455 of yacc.c  */
#line 13210 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2015:

/* Line 1455 of yacc.c  */
#line 13211 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2016:

/* Line 1455 of yacc.c  */
#line 13212 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2017:

/* Line 1455 of yacc.c  */
#line 13213 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2018:

/* Line 1455 of yacc.c  */
#line 13214 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2019:

/* Line 1455 of yacc.c  */
#line 13215 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2020:

/* Line 1455 of yacc.c  */
#line 13216 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2021:

/* Line 1455 of yacc.c  */
#line 13217 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2022:

/* Line 1455 of yacc.c  */
#line 13218 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2023:

/* Line 1455 of yacc.c  */
#line 13219 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2024:

/* Line 1455 of yacc.c  */
#line 13220 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2025:

/* Line 1455 of yacc.c  */
#line 13221 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2026:

/* Line 1455 of yacc.c  */
#line 13222 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2027:

/* Line 1455 of yacc.c  */
#line 13223 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2028:

/* Line 1455 of yacc.c  */
#line 13224 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2029:

/* Line 1455 of yacc.c  */
#line 13225 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2030:

/* Line 1455 of yacc.c  */
#line 13235 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2031:

/* Line 1455 of yacc.c  */
#line 13236 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2032:

/* Line 1455 of yacc.c  */
#line 13237 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2033:

/* Line 1455 of yacc.c  */
#line 13238 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2034:

/* Line 1455 of yacc.c  */
#line 13239 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2035:

/* Line 1455 of yacc.c  */
#line 13240 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2036:

/* Line 1455 of yacc.c  */
#line 13241 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2037:

/* Line 1455 of yacc.c  */
#line 13242 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2038:

/* Line 1455 of yacc.c  */
#line 13243 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2039:

/* Line 1455 of yacc.c  */
#line 13244 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2040:

/* Line 1455 of yacc.c  */
#line 13245 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2041:

/* Line 1455 of yacc.c  */
#line 13246 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2042:

/* Line 1455 of yacc.c  */
#line 13247 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2043:

/* Line 1455 of yacc.c  */
#line 13248 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2044:

/* Line 1455 of yacc.c  */
#line 13249 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2045:

/* Line 1455 of yacc.c  */
#line 13250 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2046:

/* Line 1455 of yacc.c  */
#line 13251 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2047:

/* Line 1455 of yacc.c  */
#line 13252 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2048:

/* Line 1455 of yacc.c  */
#line 13253 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2049:

/* Line 1455 of yacc.c  */
#line 13254 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2050:

/* Line 1455 of yacc.c  */
#line 13255 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2051:

/* Line 1455 of yacc.c  */
#line 13256 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2052:

/* Line 1455 of yacc.c  */
#line 13257 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2053:

/* Line 1455 of yacc.c  */
#line 13258 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2054:

/* Line 1455 of yacc.c  */
#line 13259 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2055:

/* Line 1455 of yacc.c  */
#line 13260 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2056:

/* Line 1455 of yacc.c  */
#line 13261 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2057:

/* Line 1455 of yacc.c  */
#line 13262 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2058:

/* Line 1455 of yacc.c  */
#line 13263 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2059:

/* Line 1455 of yacc.c  */
#line 13264 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2060:

/* Line 1455 of yacc.c  */
#line 13265 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2061:

/* Line 1455 of yacc.c  */
#line 13266 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2062:

/* Line 1455 of yacc.c  */
#line 13267 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2063:

/* Line 1455 of yacc.c  */
#line 13268 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2064:

/* Line 1455 of yacc.c  */
#line 13269 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2065:

/* Line 1455 of yacc.c  */
#line 13270 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2066:

/* Line 1455 of yacc.c  */
#line 13271 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2067:

/* Line 1455 of yacc.c  */
#line 13272 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2068:

/* Line 1455 of yacc.c  */
#line 13273 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2069:

/* Line 1455 of yacc.c  */
#line 13274 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2070:

/* Line 1455 of yacc.c  */
#line 13275 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2071:

/* Line 1455 of yacc.c  */
#line 13276 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2072:

/* Line 1455 of yacc.c  */
#line 13277 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2073:

/* Line 1455 of yacc.c  */
#line 13278 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2074:

/* Line 1455 of yacc.c  */
#line 13279 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2075:

/* Line 1455 of yacc.c  */
#line 13280 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2076:

/* Line 1455 of yacc.c  */
#line 13281 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2077:

/* Line 1455 of yacc.c  */
#line 13282 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2078:

/* Line 1455 of yacc.c  */
#line 13283 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2079:

/* Line 1455 of yacc.c  */
#line 13284 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2080:

/* Line 1455 of yacc.c  */
#line 13285 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2081:

/* Line 1455 of yacc.c  */
#line 13286 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2082:

/* Line 1455 of yacc.c  */
#line 13287 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2083:

/* Line 1455 of yacc.c  */
#line 13288 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2084:

/* Line 1455 of yacc.c  */
#line 13289 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2085:

/* Line 1455 of yacc.c  */
#line 13290 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2086:

/* Line 1455 of yacc.c  */
#line 13291 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2087:

/* Line 1455 of yacc.c  */
#line 13292 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2088:

/* Line 1455 of yacc.c  */
#line 13293 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2089:

/* Line 1455 of yacc.c  */
#line 13294 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2090:

/* Line 1455 of yacc.c  */
#line 13295 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2091:

/* Line 1455 of yacc.c  */
#line 13296 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2092:

/* Line 1455 of yacc.c  */
#line 13297 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2093:

/* Line 1455 of yacc.c  */
#line 13298 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2094:

/* Line 1455 of yacc.c  */
#line 13299 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2095:

/* Line 1455 of yacc.c  */
#line 13300 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2096:

/* Line 1455 of yacc.c  */
#line 13301 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2097:

/* Line 1455 of yacc.c  */
#line 13302 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2098:

/* Line 1455 of yacc.c  */
#line 13303 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2099:

/* Line 1455 of yacc.c  */
#line 13304 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2100:

/* Line 1455 of yacc.c  */
#line 13305 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2101:

/* Line 1455 of yacc.c  */
#line 13306 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2102:

/* Line 1455 of yacc.c  */
#line 13307 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2103:

/* Line 1455 of yacc.c  */
#line 13308 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2104:

/* Line 1455 of yacc.c  */
#line 13309 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2105:

/* Line 1455 of yacc.c  */
#line 13310 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2106:

/* Line 1455 of yacc.c  */
#line 13311 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2107:

/* Line 1455 of yacc.c  */
#line 13312 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2108:

/* Line 1455 of yacc.c  */
#line 13313 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2109:

/* Line 1455 of yacc.c  */
#line 13314 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2110:

/* Line 1455 of yacc.c  */
#line 13315 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2111:

/* Line 1455 of yacc.c  */
#line 13316 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2112:

/* Line 1455 of yacc.c  */
#line 13317 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2113:

/* Line 1455 of yacc.c  */
#line 13318 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2114:

/* Line 1455 of yacc.c  */
#line 13319 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2115:

/* Line 1455 of yacc.c  */
#line 13320 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2116:

/* Line 1455 of yacc.c  */
#line 13321 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2117:

/* Line 1455 of yacc.c  */
#line 13322 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2118:

/* Line 1455 of yacc.c  */
#line 13323 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2119:

/* Line 1455 of yacc.c  */
#line 13324 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2120:

/* Line 1455 of yacc.c  */
#line 13325 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2121:

/* Line 1455 of yacc.c  */
#line 13326 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2122:

/* Line 1455 of yacc.c  */
#line 13327 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2123:

/* Line 1455 of yacc.c  */
#line 13328 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2124:

/* Line 1455 of yacc.c  */
#line 13329 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2125:

/* Line 1455 of yacc.c  */
#line 13330 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2126:

/* Line 1455 of yacc.c  */
#line 13331 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2127:

/* Line 1455 of yacc.c  */
#line 13332 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2128:

/* Line 1455 of yacc.c  */
#line 13333 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2129:

/* Line 1455 of yacc.c  */
#line 13334 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2130:

/* Line 1455 of yacc.c  */
#line 13335 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2131:

/* Line 1455 of yacc.c  */
#line 13336 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2132:

/* Line 1455 of yacc.c  */
#line 13337 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2133:

/* Line 1455 of yacc.c  */
#line 13338 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2134:

/* Line 1455 of yacc.c  */
#line 13339 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2135:

/* Line 1455 of yacc.c  */
#line 13340 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2136:

/* Line 1455 of yacc.c  */
#line 13341 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2137:

/* Line 1455 of yacc.c  */
#line 13342 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2138:

/* Line 1455 of yacc.c  */
#line 13343 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2139:

/* Line 1455 of yacc.c  */
#line 13344 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2140:

/* Line 1455 of yacc.c  */
#line 13345 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2141:

/* Line 1455 of yacc.c  */
#line 13346 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2142:

/* Line 1455 of yacc.c  */
#line 13347 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2143:

/* Line 1455 of yacc.c  */
#line 13348 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2144:

/* Line 1455 of yacc.c  */
#line 13349 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2145:

/* Line 1455 of yacc.c  */
#line 13350 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2146:

/* Line 1455 of yacc.c  */
#line 13351 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2147:

/* Line 1455 of yacc.c  */
#line 13352 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2148:

/* Line 1455 of yacc.c  */
#line 13353 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2149:

/* Line 1455 of yacc.c  */
#line 13354 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2150:

/* Line 1455 of yacc.c  */
#line 13355 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2151:

/* Line 1455 of yacc.c  */
#line 13356 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2152:

/* Line 1455 of yacc.c  */
#line 13357 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2153:

/* Line 1455 of yacc.c  */
#line 13358 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2154:

/* Line 1455 of yacc.c  */
#line 13359 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2155:

/* Line 1455 of yacc.c  */
#line 13360 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2156:

/* Line 1455 of yacc.c  */
#line 13361 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2157:

/* Line 1455 of yacc.c  */
#line 13362 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2158:

/* Line 1455 of yacc.c  */
#line 13363 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2159:

/* Line 1455 of yacc.c  */
#line 13364 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2160:

/* Line 1455 of yacc.c  */
#line 13365 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2161:

/* Line 1455 of yacc.c  */
#line 13366 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2162:

/* Line 1455 of yacc.c  */
#line 13367 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2163:

/* Line 1455 of yacc.c  */
#line 13368 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2164:

/* Line 1455 of yacc.c  */
#line 13369 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2165:

/* Line 1455 of yacc.c  */
#line 13370 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2166:

/* Line 1455 of yacc.c  */
#line 13371 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2167:

/* Line 1455 of yacc.c  */
#line 13372 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2168:

/* Line 1455 of yacc.c  */
#line 13373 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2169:

/* Line 1455 of yacc.c  */
#line 13374 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2170:

/* Line 1455 of yacc.c  */
#line 13375 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2171:

/* Line 1455 of yacc.c  */
#line 13376 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2172:

/* Line 1455 of yacc.c  */
#line 13377 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2173:

/* Line 1455 of yacc.c  */
#line 13378 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2174:

/* Line 1455 of yacc.c  */
#line 13379 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2175:

/* Line 1455 of yacc.c  */
#line 13380 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2176:

/* Line 1455 of yacc.c  */
#line 13381 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2177:

/* Line 1455 of yacc.c  */
#line 13382 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2178:

/* Line 1455 of yacc.c  */
#line 13383 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2179:

/* Line 1455 of yacc.c  */
#line 13384 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2180:

/* Line 1455 of yacc.c  */
#line 13385 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2181:

/* Line 1455 of yacc.c  */
#line 13386 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2182:

/* Line 1455 of yacc.c  */
#line 13387 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2183:

/* Line 1455 of yacc.c  */
#line 13388 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2184:

/* Line 1455 of yacc.c  */
#line 13389 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2185:

/* Line 1455 of yacc.c  */
#line 13390 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2186:

/* Line 1455 of yacc.c  */
#line 13391 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2187:

/* Line 1455 of yacc.c  */
#line 13392 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2188:

/* Line 1455 of yacc.c  */
#line 13393 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2189:

/* Line 1455 of yacc.c  */
#line 13394 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2190:

/* Line 1455 of yacc.c  */
#line 13395 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2191:

/* Line 1455 of yacc.c  */
#line 13396 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2192:

/* Line 1455 of yacc.c  */
#line 13397 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2193:

/* Line 1455 of yacc.c  */
#line 13398 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2194:

/* Line 1455 of yacc.c  */
#line 13399 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2195:

/* Line 1455 of yacc.c  */
#line 13400 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2196:

/* Line 1455 of yacc.c  */
#line 13401 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2197:

/* Line 1455 of yacc.c  */
#line 13402 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2198:

/* Line 1455 of yacc.c  */
#line 13403 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2199:

/* Line 1455 of yacc.c  */
#line 13404 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2200:

/* Line 1455 of yacc.c  */
#line 13405 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2201:

/* Line 1455 of yacc.c  */
#line 13406 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2202:

/* Line 1455 of yacc.c  */
#line 13407 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2203:

/* Line 1455 of yacc.c  */
#line 13408 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2204:

/* Line 1455 of yacc.c  */
#line 13409 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2205:

/* Line 1455 of yacc.c  */
#line 13410 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2206:

/* Line 1455 of yacc.c  */
#line 13411 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2207:

/* Line 1455 of yacc.c  */
#line 13412 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2208:

/* Line 1455 of yacc.c  */
#line 13413 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2209:

/* Line 1455 of yacc.c  */
#line 13414 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2210:

/* Line 1455 of yacc.c  */
#line 13415 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2211:

/* Line 1455 of yacc.c  */
#line 13416 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2212:

/* Line 1455 of yacc.c  */
#line 13417 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2213:

/* Line 1455 of yacc.c  */
#line 13418 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2214:

/* Line 1455 of yacc.c  */
#line 13419 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2215:

/* Line 1455 of yacc.c  */
#line 13420 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2216:

/* Line 1455 of yacc.c  */
#line 13421 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2217:

/* Line 1455 of yacc.c  */
#line 13422 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2218:

/* Line 1455 of yacc.c  */
#line 13423 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2219:

/* Line 1455 of yacc.c  */
#line 13424 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2220:

/* Line 1455 of yacc.c  */
#line 13425 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2221:

/* Line 1455 of yacc.c  */
#line 13426 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2222:

/* Line 1455 of yacc.c  */
#line 13427 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2223:

/* Line 1455 of yacc.c  */
#line 13428 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2224:

/* Line 1455 of yacc.c  */
#line 13429 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2225:

/* Line 1455 of yacc.c  */
#line 13430 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2226:

/* Line 1455 of yacc.c  */
#line 13431 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2227:

/* Line 1455 of yacc.c  */
#line 13432 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2228:

/* Line 1455 of yacc.c  */
#line 13433 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2229:

/* Line 1455 of yacc.c  */
#line 13434 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2230:

/* Line 1455 of yacc.c  */
#line 13435 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2231:

/* Line 1455 of yacc.c  */
#line 13436 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2232:

/* Line 1455 of yacc.c  */
#line 13437 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2233:

/* Line 1455 of yacc.c  */
#line 13438 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2234:

/* Line 1455 of yacc.c  */
#line 13439 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2235:

/* Line 1455 of yacc.c  */
#line 13440 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2236:

/* Line 1455 of yacc.c  */
#line 13441 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2237:

/* Line 1455 of yacc.c  */
#line 13442 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2238:

/* Line 1455 of yacc.c  */
#line 13443 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2239:

/* Line 1455 of yacc.c  */
#line 13444 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2240:

/* Line 1455 of yacc.c  */
#line 13445 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2241:

/* Line 1455 of yacc.c  */
#line 13446 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2242:

/* Line 1455 of yacc.c  */
#line 13447 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2243:

/* Line 1455 of yacc.c  */
#line 13448 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2244:

/* Line 1455 of yacc.c  */
#line 13449 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2245:

/* Line 1455 of yacc.c  */
#line 13450 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2246:

/* Line 1455 of yacc.c  */
#line 13451 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2247:

/* Line 1455 of yacc.c  */
#line 13452 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2248:

/* Line 1455 of yacc.c  */
#line 13453 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2249:

/* Line 1455 of yacc.c  */
#line 13454 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2250:

/* Line 1455 of yacc.c  */
#line 13455 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2251:

/* Line 1455 of yacc.c  */
#line 13456 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2252:

/* Line 1455 of yacc.c  */
#line 13457 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2253:

/* Line 1455 of yacc.c  */
#line 13458 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2254:

/* Line 1455 of yacc.c  */
#line 13459 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2255:

/* Line 1455 of yacc.c  */
#line 13460 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2256:

/* Line 1455 of yacc.c  */
#line 13461 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2257:

/* Line 1455 of yacc.c  */
#line 13462 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2258:

/* Line 1455 of yacc.c  */
#line 13463 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2259:

/* Line 1455 of yacc.c  */
#line 13464 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2260:

/* Line 1455 of yacc.c  */
#line 13465 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2261:

/* Line 1455 of yacc.c  */
#line 13466 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2262:

/* Line 1455 of yacc.c  */
#line 13467 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2263:

/* Line 1455 of yacc.c  */
#line 13468 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2264:

/* Line 1455 of yacc.c  */
#line 13469 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2265:

/* Line 1455 of yacc.c  */
#line 13470 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2266:

/* Line 1455 of yacc.c  */
#line 13471 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2267:

/* Line 1455 of yacc.c  */
#line 13472 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2268:

/* Line 1455 of yacc.c  */
#line 13473 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2269:

/* Line 1455 of yacc.c  */
#line 13474 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2270:

/* Line 1455 of yacc.c  */
#line 13475 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2271:

/* Line 1455 of yacc.c  */
#line 13476 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2272:

/* Line 1455 of yacc.c  */
#line 13477 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2273:

/* Line 1455 of yacc.c  */
#line 13478 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2274:

/* Line 1455 of yacc.c  */
#line 13479 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2275:

/* Line 1455 of yacc.c  */
#line 13480 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2276:

/* Line 1455 of yacc.c  */
#line 13481 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2277:

/* Line 1455 of yacc.c  */
#line 13482 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2278:

/* Line 1455 of yacc.c  */
#line 13483 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2279:

/* Line 1455 of yacc.c  */
#line 13484 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2280:

/* Line 1455 of yacc.c  */
#line 13485 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2281:

/* Line 1455 of yacc.c  */
#line 13486 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2282:

/* Line 1455 of yacc.c  */
#line 13487 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2283:

/* Line 1455 of yacc.c  */
#line 13488 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2284:

/* Line 1455 of yacc.c  */
#line 13489 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2285:

/* Line 1455 of yacc.c  */
#line 13490 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2286:

/* Line 1455 of yacc.c  */
#line 13491 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2287:

/* Line 1455 of yacc.c  */
#line 13492 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2288:

/* Line 1455 of yacc.c  */
#line 13493 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2289:

/* Line 1455 of yacc.c  */
#line 13494 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2290:

/* Line 1455 of yacc.c  */
#line 13495 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2291:

/* Line 1455 of yacc.c  */
#line 13496 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2292:

/* Line 1455 of yacc.c  */
#line 13497 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2293:

/* Line 1455 of yacc.c  */
#line 13498 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2294:

/* Line 1455 of yacc.c  */
#line 13499 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2295:

/* Line 1455 of yacc.c  */
#line 13500 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2296:

/* Line 1455 of yacc.c  */
#line 13501 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2297:

/* Line 1455 of yacc.c  */
#line 13502 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2298:

/* Line 1455 of yacc.c  */
#line 13503 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2299:

/* Line 1455 of yacc.c  */
#line 13504 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2300:

/* Line 1455 of yacc.c  */
#line 13505 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2301:

/* Line 1455 of yacc.c  */
#line 13506 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2302:

/* Line 1455 of yacc.c  */
#line 13507 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2303:

/* Line 1455 of yacc.c  */
#line 13508 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2304:

/* Line 1455 of yacc.c  */
#line 13509 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2305:

/* Line 1455 of yacc.c  */
#line 13510 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2306:

/* Line 1455 of yacc.c  */
#line 13511 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2307:

/* Line 1455 of yacc.c  */
#line 13512 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2308:

/* Line 1455 of yacc.c  */
#line 13513 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2309:

/* Line 1455 of yacc.c  */
#line 13514 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2310:

/* Line 1455 of yacc.c  */
#line 13515 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2311:

/* Line 1455 of yacc.c  */
#line 13516 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2312:

/* Line 1455 of yacc.c  */
#line 13517 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2313:

/* Line 1455 of yacc.c  */
#line 13518 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2314:

/* Line 1455 of yacc.c  */
#line 13519 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2315:

/* Line 1455 of yacc.c  */
#line 13520 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2316:

/* Line 1455 of yacc.c  */
#line 13521 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2317:

/* Line 1455 of yacc.c  */
#line 13522 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2318:

/* Line 1455 of yacc.c  */
#line 13523 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2319:

/* Line 1455 of yacc.c  */
#line 13524 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2320:

/* Line 1455 of yacc.c  */
#line 13525 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2321:

/* Line 1455 of yacc.c  */
#line 13526 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2322:

/* Line 1455 of yacc.c  */
#line 13527 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2323:

/* Line 1455 of yacc.c  */
#line 13528 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2324:

/* Line 1455 of yacc.c  */
#line 13540 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SET_OPTION;
            mysql_init_select(lex);
            lex->option_type=OPT_SESSION;
            lex->var_list.empty();
            lex->one_shot_set= 0;
            lex->autocommit= 0;
            sp_create_assignment_lex(YYTHD, yychar == YYEMPTY);
          }
    break;

  case 2325:

/* Line 1455 of yacc.c  */
#line 13551 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2326:

/* Line 1455 of yacc.c  */
#line 13558 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(YYTHD, yychar == YYEMPTY))
              MYSQL_YYABORT;
          }
    break;

  case 2328:

/* Line 1455 of yacc.c  */
#line 13564 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->option_type= OPT_DEFAULT;
          }
    break;

  case 2329:

/* Line 1455 of yacc.c  */
#line 13568 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(YYTHD, yychar == YYEMPTY))
              MYSQL_YYABORT;
          }
    break;

  case 2330:

/* Line 1455 of yacc.c  */
#line 13573 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->option_type= (yyvsp[(1) - (1)].var_type);
          }
    break;

  case 2332:

/* Line 1455 of yacc.c  */
#line 13583 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(YYTHD, yychar == YYEMPTY))
              MYSQL_YYABORT; 
          }
    break;

  case 2334:

/* Line 1455 of yacc.c  */
#line 13589 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(YYTHD, yychar == YYEMPTY))
              MYSQL_YYABORT; 
          }
    break;

  case 2337:

/* Line 1455 of yacc.c  */
#line 13603 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            sp_create_assignment_lex(YYTHD, yychar == YYEMPTY);
          }
    break;

  case 2338:

/* Line 1455 of yacc.c  */
#line 13607 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(YYTHD, yychar == YYEMPTY))
              MYSQL_YYABORT; 
          }
    break;

  case 2339:

/* Line 1455 of yacc.c  */
#line 13612 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            sp_create_assignment_lex(YYTHD, yychar == YYEMPTY);
          }
    break;

  case 2340:

/* Line 1455 of yacc.c  */
#line 13616 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(YYTHD, yychar == YYEMPTY))
              MYSQL_YYABORT; 
          }
    break;

  case 2341:

/* Line 1455 of yacc.c  */
#line 13625 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->option_type= (yyvsp[(1) - (1)].var_type);
          }
    break;

  case 2344:

/* Line 1455 of yacc.c  */
#line 13633 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2345:

/* Line 1455 of yacc.c  */
#line 13634 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2346:

/* Line 1455 of yacc.c  */
#line 13635 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2347:

/* Line 1455 of yacc.c  */
#line 13639 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2348:

/* Line 1455 of yacc.c  */
#line 13640 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2349:

/* Line 1455 of yacc.c  */
#line 13641 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2350:

/* Line 1455 of yacc.c  */
#line 13642 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2351:

/* Line 1455 of yacc.c  */
#line 13646 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_DEFAULT; }
    break;

  case 2352:

/* Line 1455 of yacc.c  */
#line 13647 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2353:

/* Line 1455 of yacc.c  */
#line 13648 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2354:

/* Line 1455 of yacc.c  */
#line 13649 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2355:

/* Line 1455 of yacc.c  */
#line 13655 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;

            if ((yyvsp[(1) - (3)].variable).var && (yyvsp[(1) - (3)].variable).var != trg_new_row_fake_var)
            {
              /* It is a system variable. */
              if (set_system_variable(thd, &(yyvsp[(1) - (3)].variable), lex->option_type, (yyvsp[(3) - (3)].item)))
                MYSQL_YYABORT;
            }
            else
            {
              /*
                Not in trigger assigning value to new row,
                and option_type preceeding local variable is illegal.
              */
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2356:

/* Line 1455 of yacc.c  */
#line 13680 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            LEX_STRING *name= &(yyvsp[(1) - (3)].variable).base_name;

            if ((yyvsp[(1) - (3)].variable).var == trg_new_row_fake_var)
            {
              /* We are in trigger and assigning value to field of new row */
              if (set_trigger_new_row(YYTHD, name, (yyvsp[(3) - (3)].item)))
                MYSQL_YYABORT;
            }
            else if ((yyvsp[(1) - (3)].variable).var)
            {
              /* It is a system variable. */
              if (set_system_variable(thd, &(yyvsp[(1) - (3)].variable), lex->option_type, (yyvsp[(3) - (3)].item)))
                MYSQL_YYABORT;
            }
            else
            {
              sp_pcontext *spc= lex->spcont;
              sp_variable *spv= spc->find_variable(name, false);

              /* It is a local variable. */
              if (set_local_variable(thd, spv, (yyvsp[(3) - (3)].item)))
                MYSQL_YYABORT;
            }
          }
    break;

  case 2357:

/* Line 1455 of yacc.c  */
#line 13708 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item_func_set_user_var *item;
            item= new (YYTHD->mem_root) Item_func_set_user_var((yyvsp[(2) - (4)].lex_str), (yyvsp[(4) - (4)].item));
            if (item == NULL)
              MYSQL_YYABORT;
            set_var_user *var= new set_var_user(item);
            if (var == NULL)
              MYSQL_YYABORT;
            Lex->var_list.push_back(var);
          }
    break;

  case 2358:

/* Line 1455 of yacc.c  */
#line 13719 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            struct sys_var_with_base tmp= (yyvsp[(4) - (6)].variable);
            /* Lookup if necessary: must be a system variable. */
            if (tmp.var == NULL)
            {
              if (find_sys_var_null_base(thd, &tmp))
                MYSQL_YYABORT;
            }
            if (set_system_variable(thd, &tmp, (yyvsp[(3) - (6)].var_type), (yyvsp[(6) - (6)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 2359:

/* Line 1455 of yacc.c  */
#line 13732 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            CHARSET_INFO *cs2;
            cs2= (yyvsp[(2) - (2)].charset) ? (yyvsp[(2) - (2)].charset): global_system_variables.character_set_client;
            set_var_collation_client *var;
            var= new set_var_collation_client(cs2,
                                              thd->variables.collation_database,
                                              cs2);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2360:

/* Line 1455 of yacc.c  */
#line 13746 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;
            LEX_STRING names;

            names.str= (char *)"names";
            names.length= 5;
            if (spc && spc->find_variable(&names, false))
              my_error(ER_SP_BAD_VAR_SHADOW, MYF(0), names.str);
            else
              my_parse_error(ER(ER_SYNTAX_ERROR));

            MYSQL_YYABORT;
          }
    break;

  case 2361:

/* Line 1455 of yacc.c  */
#line 13761 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            CHARSET_INFO *cs2;
            CHARSET_INFO *cs3;
            cs2= (yyvsp[(2) - (3)].charset) ? (yyvsp[(2) - (3)].charset) : global_system_variables.character_set_client;
            cs3= (yyvsp[(3) - (3)].charset) ? (yyvsp[(3) - (3)].charset) : cs2;
            if (!my_charset_same(cs2, cs3))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       cs3->name, cs2->csname);
              MYSQL_YYABORT;
            }
            set_var_collation_client *var;
            var= new set_var_collation_client(cs3, cs3, cs3);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2362:

/* Line 1455 of yacc.c  */
#line 13780 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            LEX_USER *user;
            sp_pcontext *spc= lex->spcont;
            LEX_STRING pw;

            pw.str= (char *)"password";
            pw.length= 8;
            if (spc && spc->find_variable(&pw, false))
            {
              my_error(ER_SP_BAD_VAR_SHADOW, MYF(0), pw.str);
              MYSQL_YYABORT;
            }
            if (!(user=(LEX_USER*) thd->alloc(sizeof(LEX_USER))))
              MYSQL_YYABORT;
            user->host=null_lex_str;
            user->user.str=thd->security_ctx->user;
            user->user.length= strlen(thd->security_ctx->user);
            set_var_password *var= new set_var_password(user, (yyvsp[(3) - (3)].simple_string));
            if (var == NULL)
              MYSQL_YYABORT;
            thd->lex->var_list.push_back(var);
            thd->lex->autocommit= TRUE;
            if (lex->sphead)
              lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;
          }
    break;

  case 2363:

/* Line 1455 of yacc.c  */
#line 13808 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            set_var_password *var= new set_var_password((yyvsp[(3) - (5)].lex_user),(yyvsp[(5) - (5)].simple_string));
            if (var == NULL)
              MYSQL_YYABORT;
            Lex->var_list.push_back(var);
            Lex->autocommit= TRUE;
            if (Lex->sphead)
              Lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;
          }
    break;

  case 2364:

/* Line 1455 of yacc.c  */
#line 13821 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            sp_pcontext *spc= thd->lex->spcont;
            sp_variable_t *spv;

            /* Best effort lookup for system variable. */
            if (!spc || !(spv = spc->find_variable(&(yyvsp[(1) - (1)].lex_str))))
            {
              struct sys_var_with_base tmp= {NULL, (yyvsp[(1) - (1)].lex_str)};

              /* Not an SP local variable */
              if (find_sys_var_null_base(thd, &tmp))
                MYSQL_YYABORT;

              (yyval.variable)= tmp;
            }
            else
            {
              /*
                Possibly an SP local variable (or a shadowed sysvar).
                Will depend on the context of the SET statement.
              */
              (yyval.variable).var= NULL;
              (yyval.variable).base_name= (yyvsp[(1) - (1)].lex_str);
            }
          }
    break;

  case 2365:

/* Line 1455 of yacc.c  */
#line 13848 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (check_reserved_words(&(yyvsp[(1) - (3)].lex_str)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (lex->sphead && lex->sphead->m_type == TYPE_ENUM_TRIGGER &&
                (!my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "NEW") || 
                 !my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "OLD")))
            {
              if ((yyvsp[(1) - (3)].lex_str).str[0]=='O' || (yyvsp[(1) - (3)].lex_str).str[0]=='o')
              {
                my_error(ER_TRG_CANT_CHANGE_ROW, MYF(0), "OLD", "");
                MYSQL_YYABORT;
              }
              if (lex->trg_chistics.event == TRG_EVENT_DELETE)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0),
                         "NEW", "on DELETE");
                MYSQL_YYABORT;
              }
              if (lex->trg_chistics.action_time == TRG_ACTION_AFTER)
              {
                my_error(ER_TRG_CANT_CHANGE_ROW, MYF(0), "NEW", "after ");
                MYSQL_YYABORT;
              }
              /* This special combination will denote field of NEW row */
              (yyval.variable).var= trg_new_row_fake_var;
              (yyval.variable).base_name= (yyvsp[(3) - (3)].lex_str);
            }
            else
            {
              sys_var *tmp=find_sys_var(YYTHD, (yyvsp[(3) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).length);
              if (!tmp)
                MYSQL_YYABORT;
              if (!tmp->is_struct())
                my_error(ER_VARIABLE_IS_NOT_STRUCT, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              (yyval.variable).var= tmp;
              (yyval.variable).base_name= (yyvsp[(1) - (3)].lex_str);
            }
          }
    break;

  case 2366:

/* Line 1455 of yacc.c  */
#line 13891 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            sys_var *tmp=find_sys_var(YYTHD, (yyvsp[(3) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).length);
            if (!tmp)
              MYSQL_YYABORT;
            if (!tmp->is_struct())
              my_error(ER_VARIABLE_IS_NOT_STRUCT, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
            (yyval.variable).var= tmp;
            (yyval.variable).base_name.str=    (char*) "default";
            (yyval.variable).base_name.length= 7;
          }
    break;

  case 2371:

/* Line 1455 of yacc.c  */
#line 13912 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex=Lex;
            Item *item= new (thd->mem_root) Item_int((int32) (yyvsp[(1) - (1)].num));
            if (item == NULL)
              MYSQL_YYABORT;
            set_var *var= new set_var(lex->option_type,
                                      find_sys_var(thd, "tx_read_only"),
                                      &null_lex_str,
                                      item);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2372:

/* Line 1455 of yacc.c  */
#line 13930 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex=Lex;
            Item *item= new (thd->mem_root) Item_int((int32) (yyvsp[(3) - (3)].tx_isolation));
            if (item == NULL)
              MYSQL_YYABORT;
            set_var *var= new set_var(lex->option_type,
                                      find_sys_var(thd, "tx_isolation"),
                                      &null_lex_str,
                                      item);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2373:

/* Line 1455 of yacc.c  */
#line 13947 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= true; }
    break;

  case 2374:

/* Line 1455 of yacc.c  */
#line 13948 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= false; }
    break;

  case 2375:

/* Line 1455 of yacc.c  */
#line 13952 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_READ_UNCOMMITTED; }
    break;

  case 2376:

/* Line 1455 of yacc.c  */
#line 13953 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_READ_COMMITTED; }
    break;

  case 2377:

/* Line 1455 of yacc.c  */
#line 13954 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_REPEATABLE_READ; }
    break;

  case 2378:

/* Line 1455 of yacc.c  */
#line 13955 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_SERIALIZABLE; }
    break;

  case 2379:

/* Line 1455 of yacc.c  */
#line 13959 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.simple_string)=(yyvsp[(1) - (1)].lex_str).str;}
    break;

  case 2380:

/* Line 1455 of yacc.c  */
#line 13961 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.simple_string)= (yyvsp[(3) - (4)].lex_str).length ? YYTHD->variables.old_passwords ?
              Item_func_old_password::alloc(YYTHD, (yyvsp[(3) - (4)].lex_str).str, (yyvsp[(3) - (4)].lex_str).length) :
              Item_func_password::alloc(YYTHD, (yyvsp[(3) - (4)].lex_str).str, (yyvsp[(3) - (4)].lex_str).length) :
              (yyvsp[(3) - (4)].lex_str).str;
            if ((yyval.simple_string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2381:

/* Line 1455 of yacc.c  */
#line 13970 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.simple_string)= (yyvsp[(3) - (4)].lex_str).length ? Item_func_old_password::alloc(YYTHD, (yyvsp[(3) - (4)].lex_str).str,
                                                          (yyvsp[(3) - (4)].lex_str).length) :
              (yyvsp[(3) - (4)].lex_str).str;
            if ((yyval.simple_string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2382:

/* Line 1455 of yacc.c  */
#line 13981 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 2383:

/* Line 1455 of yacc.c  */
#line 13982 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)=0; }
    break;

  case 2384:

/* Line 1455 of yacc.c  */
#line 13984 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_string("ON",  2, system_charset_info);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2385:

/* Line 1455 of yacc.c  */
#line 13990 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_string("ALL", 3, system_charset_info);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2386:

/* Line 1455 of yacc.c  */
#line 13996 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_string("binary", 6, system_charset_info);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2387:

/* Line 1455 of yacc.c  */
#line 14007 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "LOCK");
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_LOCK_TABLES;
          }
    break;

  case 2388:

/* Line 1455 of yacc.c  */
#line 14018 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2393:

/* Line 1455 of yacc.c  */
#line 14033 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            thr_lock_type lock_type= (thr_lock_type) (yyvsp[(3) - (3)].num);
            bool lock_for_write= (lock_type >= TL_WRITE_ALLOW_WRITE);
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (3)].table), (yyvsp[(2) - (3)].lex_str_ptr), 0, lock_type,
                                           (lock_for_write ?
                                            lock_type == TL_WRITE_CONCURRENT_INSERT ?
                                            MDL_SHARED_WRITE :
                                            MDL_SHARED_NO_READ_WRITE :
                                            MDL_SHARED_READ)))
              MYSQL_YYABORT;
          }
    break;

  case 2394:

/* Line 1455 of yacc.c  */
#line 14047 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= TL_READ_NO_INSERT; }
    break;

  case 2395:

/* Line 1455 of yacc.c  */
#line 14048 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= TL_WRITE_DEFAULT; }
    break;

  case 2396:

/* Line 1455 of yacc.c  */
#line 14050 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= (Lex->sphead ? TL_WRITE_DEFAULT : TL_WRITE_CONCURRENT_INSERT);
          }
    break;

  case 2397:

/* Line 1455 of yacc.c  */
#line 14054 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 2398:

/* Line 1455 of yacc.c  */
#line 14055 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= TL_READ; }
    break;

  case 2399:

/* Line 1455 of yacc.c  */
#line 14060 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "UNLOCK");
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_UNLOCK_TABLES;
          }
    break;

  case 2400:

/* Line 1455 of yacc.c  */
#line 14071 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2401:

/* Line 1455 of yacc.c  */
#line 14080 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_HA_OPEN;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(2) - (4)].table), (yyvsp[(4) - (4)].lex_str_ptr), 0))
              MYSQL_YYABORT;
          }
    break;

  case 2402:

/* Line 1455 of yacc.c  */
#line 14092 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_HA_CLOSE;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(2) - (3)].table), 0, 0))
              MYSQL_YYABORT;
          }
    break;

  case 2403:

/* Line 1455 of yacc.c  */
#line 14104 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
              MYSQL_YYABORT;
            }
            lex->expr_allows_subselect= FALSE;
            lex->sql_command = SQLCOM_HA_READ;
            lex->ha_rkey_mode= HA_READ_KEY_EXACT; /* Avoid purify warnings */
            Item *one= new (YYTHD->mem_root) Item_int((int32) 1);
            if (one == NULL)
              MYSQL_YYABORT;
            lex->current_select->select_limit= one;
            lex->current_select->offset_limit= 0;
            lex->limit_rows_examined= 0;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(2) - (3)].table), 0, 0))
              MYSQL_YYABORT;
          }
    break;

  case 2404:

/* Line 1455 of yacc.c  */
#line 14124 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->expr_allows_subselect= TRUE;
            /* Stored functions are not supported for HANDLER READ. */
            if (Lex->uses_stored_routines())
            {
              my_error(ER_NOT_SUPPORTED_YET, MYF(0),
                       "stored functions in HANDLER ... READ");
              MYSQL_YYABORT;
            }
          }
    break;

  case 2405:

/* Line 1455 of yacc.c  */
#line 14137 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ident= null_lex_str; }
    break;

  case 2406:

/* Line 1455 of yacc.c  */
#line 14138 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ident= (yyvsp[(1) - (2)].lex_str); }
    break;

  case 2407:

/* Line 1455 of yacc.c  */
#line 14142 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RFIRST; }
    break;

  case 2408:

/* Line 1455 of yacc.c  */
#line 14143 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RNEXT;  }
    break;

  case 2409:

/* Line 1455 of yacc.c  */
#line 14147 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RFIRST; }
    break;

  case 2410:

/* Line 1455 of yacc.c  */
#line 14148 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RNEXT;  }
    break;

  case 2411:

/* Line 1455 of yacc.c  */
#line 14149 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RPREV;  }
    break;

  case 2412:

/* Line 1455 of yacc.c  */
#line 14150 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RLAST;  }
    break;

  case 2413:

/* Line 1455 of yacc.c  */
#line 14152 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->ha_read_mode = RKEY;
            lex->ha_rkey_mode=(yyvsp[(1) - (1)].ha_rkey_mode);
            if (!(lex->insert_list = new List_item))
              MYSQL_YYABORT;
          }
    break;

  case 2414:

/* Line 1455 of yacc.c  */
#line 14160 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2415:

/* Line 1455 of yacc.c  */
#line 14164 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_EXACT;   }
    break;

  case 2416:

/* Line 1455 of yacc.c  */
#line 14165 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_OR_NEXT; }
    break;

  case 2417:

/* Line 1455 of yacc.c  */
#line 14166 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_OR_PREV; }
    break;

  case 2418:

/* Line 1455 of yacc.c  */
#line 14167 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_AFTER_KEY;   }
    break;

  case 2419:

/* Line 1455 of yacc.c  */
#line 14168 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_BEFORE_KEY;  }
    break;

  case 2420:

/* Line 1455 of yacc.c  */
#line 14175 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2421:

/* Line 1455 of yacc.c  */
#line 14180 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= 0;
          }
    break;

  case 2422:

/* Line 1455 of yacc.c  */
#line 14186 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= TYPE_ENUM_FUNCTION;
          }
    break;

  case 2423:

/* Line 1455 of yacc.c  */
#line 14197 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= TYPE_ENUM_PROCEDURE;
          }
    break;

  case 2424:

/* Line 1455 of yacc.c  */
#line 14208 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_REVOKE_ALL;
          }
    break;

  case 2425:

/* Line 1455 of yacc.c  */
#line 14212 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->users_list.push_front ((yyvsp[(3) - (5)].lex_user));
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= TYPE_ENUM_PROXY;
          }
    break;

  case 2426:

/* Line 1455 of yacc.c  */
#line 14222 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2427:

/* Line 1455 of yacc.c  */
#line 14228 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_GRANT;
            lex->type= 0;
          }
    break;

  case 2428:

/* Line 1455 of yacc.c  */
#line 14235 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_GRANT;
            lex->type= TYPE_ENUM_FUNCTION;
          }
    break;

  case 2429:

/* Line 1455 of yacc.c  */
#line 14247 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_GRANT;
            lex->type= TYPE_ENUM_PROCEDURE;
          }
    break;

  case 2430:

/* Line 1455 of yacc.c  */
#line 14258 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->users_list.push_front ((yyvsp[(3) - (6)].lex_user));
            lex->sql_command= SQLCOM_GRANT;
            lex->type= TYPE_ENUM_PROXY;
          }
    break;

  case 2433:

/* Line 1455 of yacc.c  */
#line 14272 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2434:

/* Line 1455 of yacc.c  */
#line 14274 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            Lex->all_privileges= 1; 
            Lex->grant= GLOBAL_ACLS;
          }
    break;

  case 2439:

/* Line 1455 of yacc.c  */
#line 14292 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->which_columns = SELECT_ACL;}
    break;

  case 2440:

/* Line 1455 of yacc.c  */
#line 14293 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2441:

/* Line 1455 of yacc.c  */
#line 14295 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->which_columns = INSERT_ACL;}
    break;

  case 2442:

/* Line 1455 of yacc.c  */
#line 14296 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2443:

/* Line 1455 of yacc.c  */
#line 14298 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->which_columns = UPDATE_ACL; }
    break;

  case 2444:

/* Line 1455 of yacc.c  */
#line 14299 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2445:

/* Line 1455 of yacc.c  */
#line 14301 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->which_columns = REFERENCES_ACL;}
    break;

  case 2446:

/* Line 1455 of yacc.c  */
#line 14302 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2447:

/* Line 1455 of yacc.c  */
#line 14303 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= DELETE_ACL;}
    break;

  case 2448:

/* Line 1455 of yacc.c  */
#line 14304 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2449:

/* Line 1455 of yacc.c  */
#line 14305 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= INDEX_ACL;}
    break;

  case 2450:

/* Line 1455 of yacc.c  */
#line 14306 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= ALTER_ACL;}
    break;

  case 2451:

/* Line 1455 of yacc.c  */
#line 14307 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_ACL;}
    break;

  case 2452:

/* Line 1455 of yacc.c  */
#line 14308 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= DROP_ACL;}
    break;

  case 2453:

/* Line 1455 of yacc.c  */
#line 14309 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= EXECUTE_ACL;}
    break;

  case 2454:

/* Line 1455 of yacc.c  */
#line 14310 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= RELOAD_ACL;}
    break;

  case 2455:

/* Line 1455 of yacc.c  */
#line 14311 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= SHUTDOWN_ACL;}
    break;

  case 2456:

/* Line 1455 of yacc.c  */
#line 14312 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= PROCESS_ACL;}
    break;

  case 2457:

/* Line 1455 of yacc.c  */
#line 14313 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= FILE_ACL;}
    break;

  case 2458:

/* Line 1455 of yacc.c  */
#line 14314 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= GRANT_ACL;}
    break;

  case 2459:

/* Line 1455 of yacc.c  */
#line 14315 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= SHOW_DB_ACL;}
    break;

  case 2460:

/* Line 1455 of yacc.c  */
#line 14316 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= SUPER_ACL;}
    break;

  case 2461:

/* Line 1455 of yacc.c  */
#line 14317 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_TMP_ACL;}
    break;

  case 2462:

/* Line 1455 of yacc.c  */
#line 14318 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= LOCK_TABLES_ACL; }
    break;

  case 2463:

/* Line 1455 of yacc.c  */
#line 14319 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= REPL_SLAVE_ACL; }
    break;

  case 2464:

/* Line 1455 of yacc.c  */
#line 14320 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= REPL_CLIENT_ACL; }
    break;

  case 2465:

/* Line 1455 of yacc.c  */
#line 14321 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_VIEW_ACL; }
    break;

  case 2466:

/* Line 1455 of yacc.c  */
#line 14322 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= SHOW_VIEW_ACL; }
    break;

  case 2467:

/* Line 1455 of yacc.c  */
#line 14323 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_PROC_ACL; }
    break;

  case 2468:

/* Line 1455 of yacc.c  */
#line 14324 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= ALTER_PROC_ACL; }
    break;

  case 2469:

/* Line 1455 of yacc.c  */
#line 14325 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_USER_ACL; }
    break;

  case 2470:

/* Line 1455 of yacc.c  */
#line 14326 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= EVENT_ACL;}
    break;

  case 2471:

/* Line 1455 of yacc.c  */
#line 14327 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= TRIGGER_ACL; }
    break;

  case 2472:

/* Line 1455 of yacc.c  */
#line 14328 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_TABLESPACE_ACL; }
    break;

  case 2473:

/* Line 1455 of yacc.c  */
#line 14332 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2474:

/* Line 1455 of yacc.c  */
#line 14333 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2477:

/* Line 1455 of yacc.c  */
#line 14343 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->x509_subject)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "SUBJECT");
              MYSQL_YYABORT;
            }
            lex->x509_subject=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2478:

/* Line 1455 of yacc.c  */
#line 14353 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->x509_issuer)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "ISSUER");
              MYSQL_YYABORT;
            }
            lex->x509_issuer=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2479:

/* Line 1455 of yacc.c  */
#line 14363 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->ssl_cipher)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "CIPHER");
              MYSQL_YYABORT;
            }
            lex->ssl_cipher=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2480:

/* Line 1455 of yacc.c  */
#line 14376 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            size_t dummy;
            if (lex->copy_db_to(&lex->current_select->db, &dummy))
              MYSQL_YYABORT;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant = DB_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
            {
              my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2481:

/* Line 1455 of yacc.c  */
#line 14391 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->current_select->db = (yyvsp[(1) - (3)].lex_str).str;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant = DB_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
            {
              my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2482:

/* Line 1455 of yacc.c  */
#line 14404 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->current_select->db = NULL;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant= GLOBAL_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
            {
              my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2483:

/* Line 1455 of yacc.c  */
#line 14417 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(1) - (1)].table),NULL,
                                                        TL_OPTION_UPDATING))
              MYSQL_YYABORT;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant =  TABLE_ACLS & ~GRANT_ACL;
          }
    break;

  case 2484:

/* Line 1455 of yacc.c  */
#line 14429 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (1)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2485:

/* Line 1455 of yacc.c  */
#line 14434 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2486:

/* Line 1455 of yacc.c  */
#line 14442 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (1)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2487:

/* Line 1455 of yacc.c  */
#line 14447 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2492:

/* Line 1455 of yacc.c  */
#line 14458 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.lex_user)=(yyvsp[(1) - (4)].lex_user); (yyvsp[(1) - (4)].lex_user)->password=(yyvsp[(4) - (4)].lex_str);
            if ((yyvsp[(4) - (4)].lex_str).length)
            {
              if (YYTHD->variables.old_passwords)
              {
                char *buff= 
                  (char *) YYTHD->alloc(SCRAMBLED_PASSWORD_CHAR_LENGTH_323+1);
                if (buff == NULL)
                  MYSQL_YYABORT;
                my_make_scrambled_password_323(buff, (yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length);
                (yyvsp[(1) - (4)].lex_user)->password.str= buff;
                (yyvsp[(1) - (4)].lex_user)->password.length= SCRAMBLED_PASSWORD_CHAR_LENGTH_323;
              }
              else
              {
                char *buff= 
                  (char *) YYTHD->alloc(SCRAMBLED_PASSWORD_CHAR_LENGTH+1);
                if (buff == NULL)
                  MYSQL_YYABORT;
                my_make_scrambled_password(buff, (yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length);
                (yyvsp[(1) - (4)].lex_user)->password.str= buff;
                (yyvsp[(1) - (4)].lex_user)->password.length= SCRAMBLED_PASSWORD_CHAR_LENGTH;
              }
            }
          }
    break;

  case 2493:

/* Line 1455 of yacc.c  */
#line 14485 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            (yyval.lex_user)= (yyvsp[(1) - (5)].lex_user); 
            (yyvsp[(1) - (5)].lex_user)->password= (yyvsp[(5) - (5)].lex_str); 
          }
    break;

  case 2494:

/* Line 1455 of yacc.c  */
#line 14490 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.lex_user)= (yyvsp[(1) - (4)].lex_user);
            (yyvsp[(1) - (4)].lex_user)->plugin= (yyvsp[(4) - (4)].lex_str);
            (yyvsp[(1) - (4)].lex_user)->auth= empty_lex_str;
          }
    break;

  case 2495:

/* Line 1455 of yacc.c  */
#line 14496 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.lex_user)= (yyvsp[(1) - (6)].lex_user);
            (yyvsp[(1) - (6)].lex_user)->plugin= (yyvsp[(4) - (6)].lex_str);
            (yyvsp[(1) - (6)].lex_user)->auth= (yyvsp[(6) - (6)].lex_str);
          }
    break;

  case 2496:

/* Line 1455 of yacc.c  */
#line 14502 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_user)= (yyvsp[(1) - (1)].lex_user); (yyvsp[(1) - (1)].lex_user)->password= null_lex_str; }
    break;

  case 2497:

/* Line 1455 of yacc.c  */
#line 14507 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->grant |= lex->which_columns;
          }
    break;

  case 2501:

/* Line 1455 of yacc.c  */
#line 14521 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            String *new_str = new (YYTHD->mem_root) String((const char*) (yyvsp[(1) - (1)].lex_str).str,(yyvsp[(1) - (1)].lex_str).length,system_charset_info);
            if (new_str == NULL)
              MYSQL_YYABORT;
            List_iterator <LEX_COLUMN> iter(Lex->columns);
            class LEX_COLUMN *point;
            LEX *lex=Lex;
            while ((point=iter++))
            {
              if (!my_strcasecmp(system_charset_info,
                                 point->column.c_ptr(), new_str->c_ptr()))
                break;
            }
            lex->grant_tot_col|= lex->which_columns;
            if (point)
              point->rights |= lex->which_columns;
            else
            {
              LEX_COLUMN *col= new LEX_COLUMN (*new_str,lex->which_columns);
              if (col == NULL)
                MYSQL_YYABORT;
              lex->columns.push_back(col);
            }
          }
    break;

  case 2503:

/* Line 1455 of yacc.c  */
#line 14550 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_SPECIFIED;
          }
    break;

  case 2504:

/* Line 1455 of yacc.c  */
#line 14554 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_ANY;
          }
    break;

  case 2505:

/* Line 1455 of yacc.c  */
#line 14558 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_X509;
          }
    break;

  case 2506:

/* Line 1455 of yacc.c  */
#line 14562 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_NONE;
          }
    break;

  case 2507:

/* Line 1455 of yacc.c  */
#line 14568 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2509:

/* Line 1455 of yacc.c  */
#line 14573 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2510:

/* Line 1455 of yacc.c  */
#line 14574 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= GRANT_ACL;}
    break;

  case 2511:

/* Line 1455 of yacc.c  */
#line 14578 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2512:

/* Line 1455 of yacc.c  */
#line 14579 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2513:

/* Line 1455 of yacc.c  */
#line 14583 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= GRANT_ACL;}
    break;

  case 2514:

/* Line 1455 of yacc.c  */
#line 14585 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.questions=(yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::QUERIES_PER_HOUR;
          }
    break;

  case 2515:

/* Line 1455 of yacc.c  */
#line 14591 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.updates=(yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::UPDATES_PER_HOUR;
          }
    break;

  case 2516:

/* Line 1455 of yacc.c  */
#line 14597 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.conn_per_hour= (yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::CONNECTIONS_PER_HOUR;
          }
    break;

  case 2517:

/* Line 1455 of yacc.c  */
#line 14603 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.user_conn= (yyvsp[(2) - (2)].num);
            lex->mqh.specified_limits|= USER_RESOURCES::USER_CONNECTIONS;
          }
    break;

  case 2518:

/* Line 1455 of yacc.c  */
#line 14612 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_BEGIN;
            lex->start_transaction_opt= 0;
          }
    break;

  case 2519:

/* Line 1455 of yacc.c  */
#line 14617 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2520:

/* Line 1455 of yacc.c  */
#line 14621 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2521:

/* Line 1455 of yacc.c  */
#line 14622 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2522:

/* Line 1455 of yacc.c  */
#line 14627 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_UNKNOWN; }
    break;

  case 2523:

/* Line 1455 of yacc.c  */
#line 14628 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_NO; }
    break;

  case 2524:

/* Line 1455 of yacc.c  */
#line 14629 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_YES; }
    break;

  case 2525:

/* Line 1455 of yacc.c  */
#line 14634 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_UNKNOWN; }
    break;

  case 2526:

/* Line 1455 of yacc.c  */
#line 14635 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_YES; }
    break;

  case 2527:

/* Line 1455 of yacc.c  */
#line 14636 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_NO; }
    break;

  case 2528:

/* Line 1455 of yacc.c  */
#line 14640 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2529:

/* Line 1455 of yacc.c  */
#line 14641 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2530:

/* Line 1455 of yacc.c  */
#line 14646 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_COMMIT;
            /* Don't allow AND CHAIN RELEASE. */
            MYSQL_YYABORT_UNLESS((yyvsp[(3) - (4)].m_yes_no_unk) != TVL_YES || (yyvsp[(4) - (4)].m_yes_no_unk) != TVL_YES);
            lex->tx_chain= (yyvsp[(3) - (4)].m_yes_no_unk);
            lex->tx_release= (yyvsp[(4) - (4)].m_yes_no_unk);
          }
    break;

  case 2531:

/* Line 1455 of yacc.c  */
#line 14658 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ROLLBACK;
            /* Don't allow AND CHAIN RELEASE. */
            MYSQL_YYABORT_UNLESS((yyvsp[(3) - (4)].m_yes_no_unk) != TVL_YES || (yyvsp[(4) - (4)].m_yes_no_unk) != TVL_YES);
            lex->tx_chain= (yyvsp[(3) - (4)].m_yes_no_unk);
            lex->tx_release= (yyvsp[(4) - (4)].m_yes_no_unk);
          }
    break;

  case 2532:

/* Line 1455 of yacc.c  */
#line 14668 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ROLLBACK_TO_SAVEPOINT;
            lex->ident= (yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 2533:

/* Line 1455 of yacc.c  */
#line 14677 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SAVEPOINT;
            lex->ident= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 2534:

/* Line 1455 of yacc.c  */
#line 14686 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_RELEASE_SAVEPOINT;
            lex->ident= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 2535:

/* Line 1455 of yacc.c  */
#line 14699 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2537:

/* Line 1455 of yacc.c  */
#line 14705 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_select_to_union_list(Lex, (bool)(yyvsp[(2) - (2)].num), TRUE))
              MYSQL_YYABORT;
          }
    break;

  case 2538:

/* Line 1455 of yacc.c  */
#line 14710 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              Remove from the name resolution context stack the context of the
              last select in the union.
            */
            Lex->pop_context();
          }
    break;

  case 2539:

/* Line 1455 of yacc.c  */
#line 14720 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 2540:

/* Line 1455 of yacc.c  */
#line 14721 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 2541:

/* Line 1455 of yacc.c  */
#line 14722 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 2544:

/* Line 1455 of yacc.c  */
#line 14731 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            DBUG_ASSERT(lex->current_select->linkage != GLOBAL_OPTIONS_TYPE);
            SELECT_LEX *sel= lex->current_select;
            SELECT_LEX_UNIT *unit= sel->master_unit();
            SELECT_LEX *fake= unit->fake_select_lex;
            if (fake)
            {
              unit->global_parameters= fake;
              fake->no_table_names_allowed= 1;
              lex->current_select= fake;
            }
            thd->where= "global ORDER clause";
          }
    break;

  case 2545:

/* Line 1455 of yacc.c  */
#line 14747 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            thd->lex->current_select->no_table_names_allowed= 0;
            thd->where= "";
          }
    break;

  case 2548:

/* Line 1455 of yacc.c  */
#line 14760 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=1; }
    break;

  case 2549:

/* Line 1455 of yacc.c  */
#line 14761 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=1; }
    break;

  case 2550:

/* Line 1455 of yacc.c  */
#line 14762 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=0; }
    break;

  case 2551:

/* Line 1455 of yacc.c  */
#line 14767 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            (yyval.select_lex)= Lex->current_select->master_unit()->first_select();
          }
    break;

  case 2552:

/* Line 1455 of yacc.c  */
#line 14771 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.select_lex)= Lex->current_select->master_unit()->first_select();
          }
    break;

  case 2554:

/* Line 1455 of yacc.c  */
#line 14780 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_select_to_union_list(Lex, (bool)(yyvsp[(3) - (3)].num), FALSE))
              MYSQL_YYABORT;
          }
    break;

  case 2555:

/* Line 1455 of yacc.c  */
#line 14786 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->pop_context();
            (yyval.select_lex)= (yyvsp[(1) - (6)].select_lex);
          }
    break;

  case 2556:

/* Line 1455 of yacc.c  */
#line 14795 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            (yyval.select_lex)= (yyvsp[(2) - (3)].select_lex);
          }
    break;

  case 2557:

/* Line 1455 of yacc.c  */
#line 14801 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->expr_allows_subselect ||
               lex->sql_command == (int)SQLCOM_PURGE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            /* 
              we are making a "derived table" for the parenthesis
              as we need to have a lex level to fit the union 
              after the parenthesis, e.g. 
              (SELECT .. ) UNION ...  becomes 
              SELECT * FROM ((SELECT ...) UNION ...)
            */
            if (mysql_new_select(Lex, 1))
              MYSQL_YYABORT;
          }
    break;

  case 2558:

/* Line 1455 of yacc.c  */
#line 14822 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->pop_context();
            SELECT_LEX *child= lex->current_select;
            lex->current_select = lex->current_select->return_after_parsing();
            lex->nest_level--;
            lex->current_select->n_child_sum_items += child->n_sum_items;
            /*
              A subselect can add fields to an outer select. Reserve space for
              them.
            */
            lex->current_select->select_n_where_fields+=
            child->select_n_where_fields;
          }
    break;

  case 2563:

/* Line 1455 of yacc.c  */
#line 14850 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->options|= SELECT_STRAIGHT_JOIN; }
    break;

  case 2564:

/* Line 1455 of yacc.c  */
#line 14852 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            YYPS->m_lock_type= TL_READ_HIGH_PRIORITY;
            YYPS->m_mdl_type= MDL_SHARED_READ;
            Select->options|= SELECT_HIGH_PRIORITY;
          }
    break;

  case 2565:

/* Line 1455 of yacc.c  */
#line 14859 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->options|= SELECT_DISTINCT; }
    break;

  case 2566:

/* Line 1455 of yacc.c  */
#line 14860 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->options|= SELECT_SMALL_RESULT; }
    break;

  case 2567:

/* Line 1455 of yacc.c  */
#line 14861 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->options|= SELECT_BIG_RESULT; }
    break;

  case 2568:

/* Line 1455 of yacc.c  */
#line 14863 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            Select->options|= OPTION_BUFFER_RESULT;
          }
    break;

  case 2569:

/* Line 1455 of yacc.c  */
#line 14869 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            Select->options|= OPTION_FOUND_ROWS;
          }
    break;

  case 2570:

/* Line 1455 of yacc.c  */
#line 14874 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->options|= SELECT_ALL; }
    break;

  case 2571:

/* Line 1455 of yacc.c  */
#line 14885 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2572:

/* Line 1455 of yacc.c  */
#line 14887 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2573:

/* Line 1455 of yacc.c  */
#line 14889 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2587:

/* Line 1455 of yacc.c  */
#line 14922 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              We have to distinguish missing DEFINER-clause from case when
              CURRENT_USER specified as definer explicitly in order to properly
              handle CREATE TRIGGER statements which come to replication thread
              from older master servers (i.e. to create non-suid trigger in this
              case).
            */
            YYTHD->lex->definer= 0;
          }
    break;

  case 2588:

/* Line 1455 of yacc.c  */
#line 14936 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            YYTHD->lex->definer= get_current_user(YYTHD, (yyvsp[(3) - (3)].lex_user));
          }
    break;

  case 2589:

/* Line 1455 of yacc.c  */
#line 14949 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2590:

/* Line 1455 of yacc.c  */
#line 14951 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2591:

/* Line 1455 of yacc.c  */
#line 14953 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2592:

/* Line 1455 of yacc.c  */
#line 14958 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_view_mode= VIEW_CREATE_OR_REPLACE; }
    break;

  case 2593:

/* Line 1455 of yacc.c  */
#line 14963 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_view_algorithm= DTYPE_ALGORITHM_UNDEFINED; }
    break;

  case 2594:

/* Line 1455 of yacc.c  */
#line 14965 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_view_algorithm= VIEW_ALGORITHM_MERGE; }
    break;

  case 2595:

/* Line 1455 of yacc.c  */
#line 14967 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_view_algorithm= VIEW_ALGORITHM_TMPTABLE; }
    break;

  case 2596:

/* Line 1455 of yacc.c  */
#line 14972 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_DEFAULT; }
    break;

  case 2597:

/* Line 1455 of yacc.c  */
#line 14974 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_DEFINER; }
    break;

  case 2598:

/* Line 1455 of yacc.c  */
#line 14976 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_INVOKER; }
    break;

  case 2599:

/* Line 1455 of yacc.c  */
#line 14981 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_CREATE_VIEW;
            /* first table in list is target VIEW name */
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(3) - (3)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_IGNORE,
                                                   MDL_EXCLUSIVE))
              MYSQL_YYABORT;
            lex->query_tables->open_strategy= TABLE_LIST::OPEN_STUB;
          }
    break;

  case 2601:

/* Line 1455 of yacc.c  */
#line 14998 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2603:

/* Line 1455 of yacc.c  */
#line 15004 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
              Lex->view_list.push_back((LEX_STRING*)
              sql_memdup(&(yyvsp[(1) - (1)].lex_str), sizeof(LEX_STRING)));
            }
    break;

  case 2604:

/* Line 1455 of yacc.c  */
#line 15009 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
              Lex->view_list.push_back((LEX_STRING*)
              sql_memdup(&(yyvsp[(3) - (3)].lex_str), sizeof(LEX_STRING)));
            }
    break;

  case 2605:

/* Line 1455 of yacc.c  */
#line 15016 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->parsing_options.allows_variable= FALSE;
            lex->parsing_options.allows_select_into= FALSE;
            lex->parsing_options.allows_select_procedure= FALSE;
            lex->parsing_options.allows_derived= FALSE;
            lex->create_view_select.str= (char *) YYLIP->get_cpp_ptr();
          }
    break;

  case 2606:

/* Line 1455 of yacc.c  */
#line 15025 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            uint len= YYLIP->get_cpp_ptr() - lex->create_view_select.str;
            void *create_view_select= thd->memdup(lex->create_view_select.str, len);
            lex->create_view_select.length= len;
            lex->create_view_select.str= (char *) create_view_select;
            trim_whitespace(thd->charset(), &lex->create_view_select);
            lex->parsing_options.allows_variable= TRUE;
            lex->parsing_options.allows_select_into= TRUE;
            lex->parsing_options.allows_select_procedure= TRUE;
            lex->parsing_options.allows_derived= TRUE;
          }
    break;

  case 2609:

/* Line 1455 of yacc.c  */
#line 15047 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_NONE; }
    break;

  case 2610:

/* Line 1455 of yacc.c  */
#line 15049 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_CASCADED; }
    break;

  case 2611:

/* Line 1455 of yacc.c  */
#line 15051 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_CASCADED; }
    break;

  case 2612:

/* Line 1455 of yacc.c  */
#line 15053 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_LOCAL; }
    break;

  case 2613:

/* Line 1455 of yacc.c  */
#line 15070 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* $8 */
            Lex->raw_trg_on_table_name_begin= YYLIP->get_tok_start();
          }
    break;

  case 2614:

/* Line 1455 of yacc.c  */
#line 15076 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* $12 */
            Lex->raw_trg_on_table_name_end= YYLIP->get_tok_start();
          }
    break;

  case 2615:

/* Line 1455 of yacc.c  */
#line 15081 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* $15 */
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_head *sp;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "TRIGGER");
              MYSQL_YYABORT;
            }

            if (!(sp= new sp_head()))
              MYSQL_YYABORT;
            sp->reset_thd_mem_root(thd);
            sp->init(lex);
            sp->m_type= TYPE_ENUM_TRIGGER;
            sp->init_sp_name(thd, (yyvsp[(3) - (14)].spname));
            lex->stmt_definition_begin= (yyvsp[(2) - (14)].simple_string);
            lex->ident.str= (yyvsp[(7) - (14)].simple_string);
            lex->ident.length= (yyvsp[(11) - (14)].simple_string) - (yyvsp[(7) - (14)].simple_string);

            lex->sphead= sp;
            lex->spname= (yyvsp[(3) - (14)].spname);

            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
            lex->sphead->m_chistics= &lex->sp_chistics;
            lex->sphead->set_body_start(thd, lip->get_cpp_ptr());
          }
    break;

  case 2616:

/* Line 1455 of yacc.c  */
#line 15111 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* $17 */
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            lex->sql_command= SQLCOM_CREATE_TRIGGER;
            sp->set_stmt_end(YYTHD);
            sp->restore_thd_mem_root(YYTHD);

            if (sp->is_not_allowed_in_function("trigger"))
              MYSQL_YYABORT;

            /*
              We have to do it after parsing trigger body, because some of
              sp_proc_stmt alternatives are not saving/restoring LEX, so
              lex->query_tables can be wiped out.
            */
            if (!lex->select_lex.add_table_to_list(YYTHD, (yyvsp[(9) - (16)].table),
                                                   (LEX_STRING*) 0,
                                                   TL_OPTION_UPDATING,
                                                   TL_READ_NO_INSERT,
                                                   MDL_SHARED_NO_WRITE))
              MYSQL_YYABORT;
          }
    break;

  case 2617:

/* Line 1455 of yacc.c  */
#line 15145 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            if (is_native_function(thd, & (yyvsp[(4) - (8)].lex_str)))
            {
              my_error(ER_NATIVE_FCT_NAME_COLLISION, MYF(0),
                       (yyvsp[(4) - (8)].lex_str).str);
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_CREATE_FUNCTION;
            lex->udf.type= UDFTYPE_AGGREGATE;
            lex->stmt_definition_begin= (yyvsp[(2) - (8)].simple_string);
            lex->udf.name = (yyvsp[(4) - (8)].lex_str);
            lex->udf.returns=(Item_result) (yyvsp[(6) - (8)].num);
            lex->udf.dl=(yyvsp[(8) - (8)].lex_str).str;
          }
    break;

  case 2618:

/* Line 1455 of yacc.c  */
#line 15163 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            if (is_native_function(thd, & (yyvsp[(3) - (7)].lex_str)))
            {
              my_error(ER_NATIVE_FCT_NAME_COLLISION, MYF(0),
                       (yyvsp[(3) - (7)].lex_str).str);
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_CREATE_FUNCTION;
            lex->udf.type= UDFTYPE_FUNCTION;
            lex->stmt_definition_begin= (yyvsp[(1) - (7)].simple_string);
            lex->udf.name = (yyvsp[(3) - (7)].lex_str);
            lex->udf.returns=(Item_result) (yyvsp[(5) - (7)].num);
            lex->udf.dl=(yyvsp[(7) - (7)].lex_str).str;
          }
    break;

  case 2619:

/* Line 1455 of yacc.c  */
#line 15186 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* $5 */
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_head *sp;
            const char* tmp_param_begin;

            lex->stmt_definition_begin= (yyvsp[(1) - (4)].simple_string);
            lex->spname= (yyvsp[(3) - (4)].spname);

            if (lex->sphead)
            {
              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            /* Order is important here: new - reset - init */
            sp= new sp_head();
            if (sp == NULL)
              MYSQL_YYABORT;
            sp->reset_thd_mem_root(thd);
            sp->init(lex);
            sp->init_sp_name(thd, lex->spname);

            sp->m_type= TYPE_ENUM_FUNCTION;
            lex->sphead= sp;

            tmp_param_begin= lip->get_cpp_tok_start();
            tmp_param_begin++;
            lex->sphead->m_param_begin= tmp_param_begin;
          }
    break;

  case 2620:

/* Line 1455 of yacc.c  */
#line 15218 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* $8 */
            Lex->sphead->m_param_end= YYLIP->get_cpp_tok_start();
          }
    break;

  case 2621:

/* Line 1455 of yacc.c  */
#line 15222 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* $10 */
            LEX *lex= Lex;
            lex->charset= NULL;
            lex->length= lex->dec= NULL;
            lex->interval_list.empty();
            lex->type= 0;
            lex->vcol_info= 0;
          }
    break;

  case 2622:

/* Line 1455 of yacc.c  */
#line 15231 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* $12 */
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            /*
              This was disabled in 5.1.12. See bug #20701
              When collation support in SP is implemented, then this test
              should be removed.
            */
            if (((yyvsp[(11) - (11)].num) == MYSQL_TYPE_STRING || (yyvsp[(11) - (11)].num) == MYSQL_TYPE_VARCHAR)
                && (lex->type & BINCMP_FLAG))
            {
              my_error(ER_NOT_SUPPORTED_YET, MYF(0), "return value collation");
              MYSQL_YYABORT;
            }

            if (sp->fill_field_definition(YYTHD, lex,
                                          (enum enum_field_types) (yyvsp[(11) - (11)].num),
                                          &sp->m_return_field_def))
              MYSQL_YYABORT;

            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
    break;

  case 2623:

/* Line 1455 of yacc.c  */
#line 15254 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* $14 */
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            lex->sphead->m_chistics= &lex->sp_chistics;
            lex->sphead->set_body_start(thd, lip->get_cpp_tok_start());
          }
    break;

  case 2624:

/* Line 1455 of yacc.c  */
#line 15263 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            if (sp->is_not_allowed_in_function("function"))
              MYSQL_YYABORT;

            lex->sql_command= SQLCOM_CREATE_SPFUNCTION;
            sp->set_stmt_end(thd);
            if (!(sp->m_flags & sp_head::HAS_RETURN))
            {
              my_error(ER_SP_NORETURN, MYF(0), sp->m_qname.str);
              MYSQL_YYABORT;
            }
            if (is_native_function(thd, & sp->m_name))
            {
              /*
                This warning will be printed when
                [1] A client query is parsed,
                [2] A stored function is loaded by db_load_routine.
                Printing the warning for [2] is intentional, to cover the
                following scenario:
                - A user define a SF 'foo' using MySQL 5.N
                - An application uses select foo(), and works.
                - MySQL 5.{N+1} defines a new native function 'foo', as
                part of a new feature.
                - MySQL 5.{N+1} documentation is updated, and should mention
                that there is a potential incompatible change in case of
                existing stored function named 'foo'.
                - The user deploys 5.{N+1}. At this point, 'select foo()'
                means something different, and the user code is most likely
                broken (it's only safe if the code is 'select db.foo()').
                With a warning printed when the SF is loaded (which has to occur
                before the call), the warning will provide a hint explaining
                the root cause of a later failure of 'select foo()'.
                With no warning printed, the user code will fail with no
                apparent reason.
                Printing a warning each time db_load_routine is executed for
                an ambiguous function is annoying, since that can happen a lot,
                but in practice should not happen unless there *are* name
                collisions.
                If a collision exists, it should not be silenced but fixed.
              */
              push_warning_printf(thd,
                                  MYSQL_ERROR::WARN_LEVEL_NOTE,
                                  ER_NATIVE_FCT_NAME_COLLISION,
                                  ER(ER_NATIVE_FCT_NAME_COLLISION),
                                  sp->m_name.str);
            }
            sp->restore_thd_mem_root(thd);
          }
    break;

  case 2625:

/* Line 1455 of yacc.c  */
#line 15319 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }

            lex->stmt_definition_begin= (yyvsp[(2) - (3)].simple_string);

            /* Order is important here: new - reset - init */
            sp= new sp_head();
            if (sp == NULL)
              MYSQL_YYABORT;
            sp->reset_thd_mem_root(YYTHD);
            sp->init(lex);
            sp->m_type= TYPE_ENUM_PROCEDURE;
            sp->init_sp_name(YYTHD, (yyvsp[(3) - (3)].spname));

            lex->sphead= sp;
          }
    break;

  case 2626:

/* Line 1455 of yacc.c  */
#line 15343 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            const char* tmp_param_begin;

            tmp_param_begin= YYLIP->get_cpp_tok_start();
            tmp_param_begin++;
            Lex->sphead->m_param_begin= tmp_param_begin;
          }
    break;

  case 2627:

/* Line 1455 of yacc.c  */
#line 15352 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            lex->sphead->m_param_end= YYLIP->get_cpp_tok_start();
            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
    break;

  case 2628:

/* Line 1455 of yacc.c  */
#line 15360 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            lex->sphead->m_chistics= &lex->sp_chistics;
            lex->sphead->set_body_start(thd, YYLIP->get_cpp_tok_start());
          }
    break;

  case 2629:

/* Line 1455 of yacc.c  */
#line 15368 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            sp->set_stmt_end(YYTHD);
            lex->sql_command= SQLCOM_CREATE_PROCEDURE;
            sp->restore_thd_mem_root(YYTHD);
          }
    break;

  case 2630:

/* Line 1455 of yacc.c  */
#line 15382 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_START;
          }
    break;

  case 2631:

/* Line 1455 of yacc.c  */
#line 15386 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_END;
          }
    break;

  case 2632:

/* Line 1455 of yacc.c  */
#line 15390 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_PREPARE;
          }
    break;

  case 2633:

/* Line 1455 of yacc.c  */
#line 15394 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_COMMIT;
          }
    break;

  case 2634:

/* Line 1455 of yacc.c  */
#line 15398 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_ROLLBACK;
          }
    break;

  case 2635:

/* Line 1455 of yacc.c  */
#line 15402 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_RECOVER;
          }
    break;

  case 2636:

/* Line 1455 of yacc.c  */
#line 15409 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (1)].string)->length() <= MAXGTRIDSIZE);
            if (!(Lex->xid=(XID *)YYTHD->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set(1L, (yyvsp[(1) - (1)].string)->ptr(), (yyvsp[(1) - (1)].string)->length(), 0, 0);
          }
    break;

  case 2637:

/* Line 1455 of yacc.c  */
#line 15416 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].string)->length() <= MAXGTRIDSIZE && (yyvsp[(3) - (3)].string)->length() <= MAXBQUALSIZE);
            if (!(Lex->xid=(XID *)YYTHD->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set(1L, (yyvsp[(1) - (3)].string)->ptr(), (yyvsp[(1) - (3)].string)->length(), (yyvsp[(3) - (3)].string)->ptr(), (yyvsp[(3) - (3)].string)->length());
          }
    break;

  case 2638:

/* Line 1455 of yacc.c  */
#line 15423 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].string)->length() <= MAXGTRIDSIZE && (yyvsp[(3) - (5)].string)->length() <= MAXBQUALSIZE);
            if (!(Lex->xid=(XID *)YYTHD->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set((yyvsp[(5) - (5)].ulong_num), (yyvsp[(1) - (5)].string)->ptr(), (yyvsp[(1) - (5)].string)->length(), (yyvsp[(3) - (5)].string)->ptr(), (yyvsp[(3) - (5)].string)->length());
          }
    break;

  case 2639:

/* Line 1455 of yacc.c  */
#line 15432 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2640:

/* Line 1455 of yacc.c  */
#line 15433 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2641:

/* Line 1455 of yacc.c  */
#line 15437 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2642:

/* Line 1455 of yacc.c  */
#line 15438 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_JOIN;        }
    break;

  case 2643:

/* Line 1455 of yacc.c  */
#line 15439 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_RESUME;      }
    break;

  case 2644:

/* Line 1455 of yacc.c  */
#line 15443 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2645:

/* Line 1455 of yacc.c  */
#line 15444 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_ONE_PHASE;   }
    break;

  case 2646:

/* Line 1455 of yacc.c  */
#line 15449 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2647:

/* Line 1455 of yacc.c  */
#line 15451 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_SUSPEND;     }
    break;

  case 2649:

/* Line 1455 of yacc.c  */
#line 15456 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2650:

/* Line 1455 of yacc.c  */
#line 15457 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_FOR_MIGRATE; }
    break;

  case 2651:

/* Line 1455 of yacc.c  */
#line 15462 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_INSTALL_PLUGIN;
            lex->comment= (yyvsp[(3) - (5)].lex_str);
            lex->ident= (yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 2652:

/* Line 1455 of yacc.c  */
#line 15469 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_INSTALL_PLUGIN;
            lex->comment= null_lex_str;
            lex->ident= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 2653:

/* Line 1455 of yacc.c  */
#line 15479 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_UNINSTALL_PLUGIN;
            lex->comment= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 2654:

/* Line 1455 of yacc.c  */
#line 15485 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_UNINSTALL_PLUGIN;
            lex->comment= null_lex_str;
            lex->ident= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 2655:

/* Line 1455 of yacc.c  */
#line 15496 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
	  YYERROR;
	}
    break;



/* Line 1455 of yacc.c  */
#line 41332 "/home/buildbot/buildbot/build/mkdist/sql/sql_yacc.cc"
      default: break;
    }
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;

  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (YY_("syntax error"));
#else
      {
	YYSIZE_T yysize = yysyntax_error (0, yystate, yychar);
	if (yymsg_alloc < yysize && yymsg_alloc < YYSTACK_ALLOC_MAXIMUM)
	  {
	    YYSIZE_T yyalloc = 2 * yysize;
	    if (! (yysize <= yyalloc && yyalloc <= YYSTACK_ALLOC_MAXIMUM))
	      yyalloc = YYSTACK_ALLOC_MAXIMUM;
	    if (yymsg != yymsgbuf)
	      YYSTACK_FREE (yymsg);
	    yymsg = (char *) YYSTACK_ALLOC (yyalloc);
	    if (yymsg)
	      yymsg_alloc = yyalloc;
	    else
	      {
		yymsg = yymsgbuf;
		yymsg_alloc = sizeof yymsgbuf;
	      }
	  }

	if (0 < yysize && yysize <= yymsg_alloc)
	  {
	    (void) yysyntax_error (yymsg, yystate, yychar);
	    yyerror (yymsg);
	  }
	else
	  {
	    yyerror (YY_("syntax error"));
	    if (yysize != 0)
	      goto yyexhaustedlab;
	  }
      }
#endif
    }



  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */

      if (yychar <= YYEOF)
	{
	  /* Return failure if at end of input.  */
	  if (yychar == YYEOF)
	    YYABORT;
	}
      else
	{
	  yydestruct ("Error: discarding",
		      yytoken, &yylval);
	  yychar = YYEMPTY;
	}
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  /* Do not reclaim the symbols of the rule which action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (yyn != YYPACT_NINF)
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
	YYABORT;


      yydestruct ("Error: popping",
		  yystos[yystate], yyvsp);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  *++yyvsp = yylval;


  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#if !defined(yyoverflow) || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEMPTY)
     yydestruct ("Cleanup: discarding lookahead",
		 yytoken, &yylval);
  /* Do not reclaim the symbols of the rule which action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
		  yystos[*yyssp], yyvsp);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  /* Make sure YYID is used.  */
  return YYID (yyresult);
}



