
/* A Bison parser, made by GNU Bison 2.4.1.  */

/* Skeleton implementation for Bison's Yacc-like parsers in C
   
      Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003, 2004, 2005, 2006
   Free Software Foundation, Inc.
   
   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.
   
   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "2.4.1"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1

/* Using locations.  */
#define YYLSP_NEEDED 0

/* Substitute the variable and function names.  */
#define yyparse         MYSQLparse
#define yylex           MYSQLlex
#define yyerror         MYSQLerror
#define yylval          MYSQLlval
#define yychar          MYSQLchar
#define yydebug         MYSQLdebug
#define yynerrs         MYSQLnerrs


/* Copy the first part of user declarations.  */

/* Line 189 of yacc.c  */
#line 25 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"

/* thd is passed as an argument to yyparse(), and subsequently to yylex().
** The type will be void*, so it must be  cast to (THD*) when used.
** Use the YYTHD macro for this.
*/
#define YYPARSE_PARAM yythd
#define YYLEX_PARAM yythd
#define YYTHD ((THD *)yythd)
#define YYLIP (& YYTHD->m_parser_state->m_lip)
#define YYPS (& YYTHD->m_parser_state->m_yacc)
#define YYCSCL  YYTHD->variables.character_set_client

#define MYSQL_YACC
#define YYINITDEPTH 100
#define YYMAXDEPTH 3200                        /* Because of 64K stack */
#define Lex (YYTHD->lex)

#define Select Lex->current_select
#include "sql_priv.h"
#include "unireg.h"                    // REQUIRED: for other includes
#include "sql_parse.h"                        /* comp_*_creator */
#include "sql_table.h"                        /* primary_key_name */
#include "sql_partition.h"  /* mem_alloc_error, partition_info, HASH_PARTITION */
#include "sql_acl.h"                          /* *_ACL */
#include "password.h"       /* my_make_scrambled_password_323, my_make_scrambled_password */
#include "sql_class.h"      /* Key_part_spec, enum_filetype, Diag_condition_item_name */
#include "slave.h"
#include "lex_symbol.h"
#include "item_create.h"
#include "sp_head.h"
#include "sp_pcontext.h"
#include "sp_rcontext.h"
#include "sp.h"
#include "sql_alter.h"                         // Sql_cmd_alter_table*
#include "sql_truncate.h"                      // Sql_cmd_truncate_table
#include "sql_admin.h"                         // Sql_cmd_analyze/Check..._table
#include "sql_partition_admin.h"               // Sql_cmd_alter_table_*_part.
#include "sql_handler.h"                       // Sql_cmd_handler_*
#include "sql_signal.h"
#include "sql_get_diagnostics.h"               // Sql_cmd_get_diagnostics
#include "event_parse_data.h"
#include "create_options.h"
#include <myisam.h>
#include <myisammrg.h>
#include "keycaches.h"
#include "set_var.h"
#include "rpl_mi.h"

/* this is to get the bison compilation windows warnings out */
#ifdef _MSC_VER
/* warning C4065: switch statement contains 'default' but no 'case' labels */
#pragma warning (disable : 4065)
#endif

int yylex(void *yylval, void *yythd);

#define yyoverflow(A,B,C,D,E,F)               \
  {                                           \
    ulong val= *(F);                          \
    if (my_yyoverflow((B), (D), &val))        \
    {                                         \
      yyerror((char*) (A));                   \
      return 2;                               \
    }                                         \
    else                                      \
    {                                         \
      *(F)= (YYSIZE_T)val;                    \
    }                                         \
  }

#define MYSQL_YYABORT                         \
  do                                          \
  {                                           \
    LEX::cleanup_lex_after_parse_error(YYTHD);\
    YYABORT;                                  \
  } while (0)

#define MYSQL_YYABORT_UNLESS(A)         \
  if (!(A))                             \
  {                                     \
    my_parse_error(ER(ER_SYNTAX_ERROR));\
    MYSQL_YYABORT;                      \
  }

/*
  Work around for broken code generated by bison 1.875.

  The code generated by bison 1.875a and later, bison 2.1 and bison 2.2 is ok.
  With bison 1.875 however, the generated code contains:
<pre>
  yyerrlab1:
  #if defined (__GNUC_MINOR__) && 2093 <= (__GNUC__ * 1000 + __GNUC_MINOR__)
    __attribute__ ((__unused__))
  #endif
</pre>
  This usage of __attribute__ is illegal, so we remove it.
  See the following references for details:
  http://lists.gnu.org/archive/html/bug-bison/2004-02/msg00014.html
  http://gcc.gnu.org/bugzilla/show_bug.cgi?id=14273
*/

#if defined (__GNUC_MINOR__) && 2093 <= (__GNUC__ * 1000 + __GNUC_MINOR__)
#undef __attribute__
#define __attribute__(X)
#endif


#ifndef DBUG_OFF
#define YYDEBUG 1
#else
#define YYDEBUG 0
#endif

/**
  @brief Push an error message into MySQL error stack with line
  and position information.

  This function provides semantic action implementers with a way
  to push the famous "You have a syntax error near..." error
  message into the error stack, which is normally produced only if
  a parse error is discovered internally by the Bison generated
  parser.
*/

void my_parse_error(const char *s)
{
  THD *thd= current_thd;
  Lex_input_stream *lip= & thd->m_parser_state->m_lip;

  const char *yytext= lip->get_tok_start();
  if (!yytext)
    yytext= "";

  /* Push an error into the error stack */
  ErrConvString err(yytext, strlen(yytext), thd->variables.character_set_client);
  my_printf_error(ER_PARSE_ERROR,  ER(ER_PARSE_ERROR), MYF(0), s,
                  err.ptr(), lip->yylineno);
}

/**
  @brief Bison callback to report a syntax/OOM error

  This function is invoked by the bison-generated parser
  when a syntax error, a parse error or an out-of-memory
  condition occurs. This function is not invoked when the
  parser is requested to abort by semantic action code
  by means of YYABORT or YYACCEPT macros. This is why these
  macros should not be used (use MYSQL_YYABORT/MYSQL_YYACCEPT
  instead).

  The parser will abort immediately after invoking this callback.

  This function is not for use in semantic actions and is internal to
  the parser, as it performs some pre-return cleanup. 
  In semantic actions, please use my_parse_error or my_error to
  push an error into the error stack and MYSQL_YYABORT
  to abort from the parser.
*/

void MYSQLerror(const char *s)
{
  THD *thd= current_thd;

  /*
    Restore the original LEX if it was replaced when parsing
    a stored procedure. We must ensure that a parsing error
    does not leave any side effects in the THD.
  */
  LEX::cleanup_lex_after_parse_error(thd);

  /* "parse error" changed into "syntax error" between bison 1.75 and 1.875 */
  if (strcmp(s,"parse error") == 0 || strcmp(s,"syntax error") == 0)
    s= ER(ER_SYNTAX_ERROR);
  my_parse_error(s);
}


#ifndef DBUG_OFF
void turn_parser_debug_on()
{
  /*
     MYSQLdebug is in sql/sql_yacc.cc, in bison generated code.
     Turning this option on is **VERY** verbose, and should be
     used when investigating a syntax error problem only.

     The syntax to run with bison traces is as follows :
     - Starting a server manually :
       mysqld --debug-dbug="d,parser_debug" ...
     - Running a test :
       mysql-test-run.pl --mysqld="--debug-dbug=d,parser_debug" ...

     The result will be in the process stderr (var/log/master.err)
   */

  extern int yydebug;
  yydebug= 1;
}
#endif

static bool is_native_function(THD *thd, const LEX_STRING *name)
{
  if (find_native_function_builder(thd, *name))
    return true;

  if (is_lex_native_function(name))
    return true;

  return false;
}


/**
  Helper action for a case statement (entering the CASE).
  This helper is used for both 'simple' and 'searched' cases.
  This helper, with the other case_stmt_action_..., is executed when
  the following SQL code is parsed:
<pre>
CREATE PROCEDURE proc_19194_simple(i int)
BEGIN
  DECLARE str CHAR(10);

  CASE i
    WHEN 1 THEN SET str="1";
    WHEN 2 THEN SET str="2";
    WHEN 3 THEN SET str="3";
    ELSE SET str="unknown";
  END CASE;

  SELECT str;
END
</pre>
  The actions are used to generate the following code:
<pre>
SHOW PROCEDURE CODE proc_19194_simple;
Pos     Instruction
0       set str@1 NULL
1       set_case_expr (12) 0 i@0
2       jump_if_not 5(12) (case_expr@0 = 1)
3       set str@1 _latin1'1'
4       jump 12
5       jump_if_not 8(12) (case_expr@0 = 2)
6       set str@1 _latin1'2'
7       jump 12
8       jump_if_not 11(12) (case_expr@0 = 3)
9       set str@1 _latin1'3'
10      jump 12
11      set str@1 _latin1'unknown'
12      stmt 0 "SELECT str"
</pre>

  @param lex the parser lex context
*/

void case_stmt_action_case(LEX *lex)
{
  lex->sphead->new_cont_backpatch(NULL);

  /*
    BACKPATCH: Creating target label for the jump to
    "case_stmt_action_end_case"
    (Instruction 12 in the example)
  */

  lex->spcont->push_label(current_thd, EMPTY_STR, lex->sphead->instructions());
}

/**
  Helper action for a case expression statement (the expr in 'CASE expr').
  This helper is used for 'searched' cases only.
  @param lex the parser lex context
  @param expr the parsed expression
  @return 0 on success
*/

int case_stmt_action_expr(LEX *lex, Item* expr)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *parsing_ctx= lex->spcont;
  int case_expr_id= parsing_ctx->register_case_expr();
  sp_instr_set_case_expr *i;

  if (parsing_ctx->push_case_expr_id(case_expr_id))
    return 1;

  i= new sp_instr_set_case_expr(sp->instructions(),
                                parsing_ctx, case_expr_id, expr, lex);

  sp->add_cont_backpatch(i);
  return sp->add_instr(i);
}

/**
  Helper action for a case when condition.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
  @param when the parsed expression for the WHEN clause
  @param simple true for simple cases, false for searched cases
*/

int case_stmt_action_when(LEX *lex, Item *when, bool simple)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *ctx= lex->spcont;
  uint ip= sp->instructions();
  sp_instr_jump_if_not *i;
  Item_case_expr *var;
  Item *expr;

  if (simple)
  {
    var= new Item_case_expr(ctx->get_current_case_expr_id());

#ifndef DBUG_OFF
    if (var)
    {
      var->m_sp= sp;
    }
#endif

    expr= new Item_func_eq(var, when);
    i= new sp_instr_jump_if_not(ip, ctx, expr, lex);
  }
  else
    i= new sp_instr_jump_if_not(ip, ctx, when, lex);

  /*
    BACKPATCH: Registering forward jump from
    "case_stmt_action_when" to "case_stmt_action_then"
    (jump_if_not from instruction 2 to 5, 5 to 8 ... in the example)
  */

  return !test(i) ||
         sp->push_backpatch(i, ctx->push_label(current_thd, EMPTY_STR, 0)) ||
         sp->add_cont_backpatch(i) ||
         sp->add_instr(i);
}

/**
  Helper action for a case then statements.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
*/

int case_stmt_action_then(LEX *lex)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *ctx= lex->spcont;
  uint ip= sp->instructions();
  sp_instr_jump *i = new sp_instr_jump(ip, ctx);
  if (!test(i) || sp->add_instr(i))
    return 1;

  /*
    BACKPATCH: Resolving forward jump from
    "case_stmt_action_when" to "case_stmt_action_then"
    (jump_if_not from instruction 2 to 5, 5 to 8 ... in the example)
  */

  sp->backpatch(ctx->pop_label());

  /*
    BACKPATCH: Registering forward jump from
    "case_stmt_action_then" to "case_stmt_action_end_case"
    (jump from instruction 4 to 12, 7 to 12 ... in the example)
  */

  return sp->push_backpatch(i, ctx->last_label());
}

/**
  Helper action for an end case.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
  @param simple true for simple cases, false for searched cases
*/

void case_stmt_action_end_case(LEX *lex, bool simple)
{
  /*
    BACKPATCH: Resolving forward jump from
    "case_stmt_action_then" to "case_stmt_action_end_case"
    (jump from instruction 4 to 12, 7 to 12 ... in the example)
  */
  lex->sphead->backpatch(lex->spcont->pop_label());

  if (simple)
    lex->spcont->pop_case_expr_id();

  lex->sphead->do_cont_backpatch();
}


static bool
find_sys_var_null_base(THD *thd, struct sys_var_with_base *tmp)
{
  tmp->var= find_sys_var(thd, tmp->base_name.str, tmp->base_name.length);

  if (tmp->var == NULL)
    my_error(ER_UNKNOWN_SYSTEM_VARIABLE, MYF(0), tmp->base_name.str);
  else
    tmp->base_name= null_lex_str;

  return thd->is_error();
}


/**
  Helper action for a SET statement.
  Used to push a system variable into the assignment list.

  @param thd      the current thread
  @param tmp      the system variable with base name
  @param var_type the scope of the variable
  @param val      the value being assigned to the variable

  @return TRUE if error, FALSE otherwise.
*/

static bool
set_system_variable(THD *thd, struct sys_var_with_base *tmp,
                    enum enum_var_type var_type, Item *val)
{
  set_var *var;
  LEX *lex= thd->lex;

  /* No AUTOCOMMIT from a stored function or trigger. */
  if (lex->spcont && tmp->var == Sys_autocommit_ptr)
    lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;

  if (! (var= new set_var(var_type, tmp->var, &tmp->base_name, val)))
    return TRUE;

  return lex->var_list.push_back(var);
}


/**
  Helper action for a SET statement.
  Used to push a SP local variable into the assignment list.

  @param thd      the current thread
  @param var_type the SP local variable
  @param val      the value being assigned to the variable

  @return TRUE if error, FALSE otherwise.
*/

static bool
set_local_variable(THD *thd, sp_variable *spv, Item *val)
{
  Item *it;
  LEX *lex= thd->lex;
  sp_instr_set *sp_set;

  if (val)
    it= val;
  else if (spv->default_value)
    it= spv->default_value;
  else
  {
    it= new (thd->mem_root) Item_null();
    if (it == NULL)
      return TRUE;
  }

  sp_set= new sp_instr_set(lex->sphead->instructions(), lex->spcont,
                           spv->offset, it, spv->type, lex, TRUE);

  return (sp_set == NULL || lex->sphead->add_instr(sp_set));
}


/**
  Helper action for a SET statement.
  Used to SET a field of NEW row.

  @param thd      the current thread
  @param name     the field name
  @param val      the value being assigned to the row

  @return TRUE if error, FALSE otherwise.
*/

static bool
set_trigger_new_row(THD *thd, LEX_STRING *name, Item *val)
{
  LEX *lex= thd->lex;
  Item_trigger_field *trg_fld;
  sp_instr_set_trigger_field *sp_fld;

  /* QQ: Shouldn't this be field's default value ? */
  if (! val)
    val= new Item_null();

  DBUG_ASSERT(lex->trg_chistics.action_time == TRG_ACTION_BEFORE &&
              (lex->trg_chistics.event == TRG_EVENT_INSERT ||
               lex->trg_chistics.event == TRG_EVENT_UPDATE));

  trg_fld= new (thd->mem_root)
            Item_trigger_field(lex->current_context(),
                               Item_trigger_field::NEW_ROW,
                               name->str, UPDATE_ACL, FALSE);

  if (trg_fld == NULL)
    return TRUE;

  sp_fld= new sp_instr_set_trigger_field(lex->sphead->instructions(),
                                         lex->spcont, trg_fld, val, lex);

  if (sp_fld == NULL)
    return TRUE;

  /*
    Let us add this item to list of all Item_trigger_field
    objects in trigger.
  */
  lex->trg_table_fields.link_in_list(trg_fld, &trg_fld->next_trg_field);

  return lex->sphead->add_instr(sp_fld);
}


/**
  Create an object to represent a SP variable in the Item-hierarchy.

  @param  thd         The current thread.
  @param  name        The SP variable name.
  @param  spvar       The SP variable (optional).
  @param  start_in_q  Start position of the SP variable name in the query.
  @param  end_in_q    End position of the SP variable name in the query.

  @remark If spvar is not specified, the name is used to search for the
          variable in the parse-time context. If the variable does not
          exist, a error is set and NULL is returned to the caller.

  @return An Item_splocal object representing the SP variable, or NULL on error.
*/
static Item_splocal*
create_item_for_sp_var(THD *thd, LEX_STRING name, sp_variable *spvar,
                       const char *start_in_q, const char *end_in_q)
{
  Item_splocal *item;
  LEX *lex= thd->lex;
  uint pos_in_q, len_in_q;
  sp_pcontext *spc = lex->spcont;

  /* If necessary, look for the variable. */
  if (spc && !spvar)
    spvar= spc->find_variable(name, false);

  if (!spvar)
  {
    my_error(ER_SP_UNDECLARED_VAR, MYF(0), name.str);
    return NULL;
  }

  DBUG_ASSERT(spc && spvar);

  /* Position and length of the SP variable name in the query. */
  pos_in_q= start_in_q - lex->sphead->m_tmp_query;
  len_in_q= end_in_q - start_in_q;

  item= new (thd->mem_root)
    Item_splocal(name, spvar->offset, spvar->type, pos_in_q, len_in_q);

#ifndef DBUG_OFF
  if (item)
    item->m_sp= lex->sphead;
#endif

  return item;
}

/**
  Helper to resolve the SQL:2003 Syntax exception 1) in <in predicate>.
  See SQL:2003, Part 2, section 8.4 <in predicate>, Note 184, page 383.
  This function returns the proper item for the SQL expression
  <code>left [NOT] IN ( expr )</code>
  @param thd the current thread
  @param left the in predicand
  @param equal true for IN predicates, false for NOT IN predicates
  @param expr first and only expression of the in value list
  @return an expression representing the IN predicate.
*/
Item* handle_sql2003_note184_exception(THD *thd, Item* left, bool equal,
                                       Item *expr)
{
  /*
    Relevant references for this issue:
    - SQL:2003, Part 2, section 8.4 <in predicate>, page 383,
    - SQL:2003, Part 2, section 7.2 <row value expression>, page 296,
    - SQL:2003, Part 2, section 6.3 <value expression primary>, page 174,
    - SQL:2003, Part 2, section 7.15 <subquery>, page 370,
    - SQL:2003 Feature F561, "Full value expressions".

    The exception in SQL:2003 Note 184 means:
    Item_singlerow_subselect, which corresponds to a <scalar subquery>,
    should be re-interpreted as an Item_in_subselect, which corresponds
    to a <table subquery> when used inside an <in predicate>.

    Our reading of Note 184 is reccursive, so that all:
    - IN (( <subquery> ))
    - IN ((( <subquery> )))
    - IN '('^N <subquery> ')'^N
    - etc
    should be interpreted as a <table subquery>, no matter how deep in the
    expression the <subquery> is.
  */

  Item *result;

  DBUG_ENTER("handle_sql2003_note184_exception");

  if (expr->type() == Item::SUBSELECT_ITEM)
  {
    Item_subselect *expr2 = (Item_subselect*) expr;

    if (expr2->substype() == Item_subselect::SINGLEROW_SUBS)
    {
      Item_singlerow_subselect *expr3 = (Item_singlerow_subselect*) expr2;
      st_select_lex *subselect;

      /*
        Implement the mandated change, by altering the semantic tree:
          left IN Item_singlerow_subselect(subselect)
        is modified to
          left IN (subselect)
        which is represented as
          Item_in_subselect(left, subselect)
      */
      subselect= expr3->invalidate_and_restore_select_lex();
      result= new (thd->mem_root) Item_in_subselect(left, subselect);

      if (! equal)
        result = negate_expression(thd, result);

      DBUG_RETURN(result);
    }
  }

  if (equal)
    result= new (thd->mem_root) Item_func_eq(left, expr);
  else
    result= new (thd->mem_root) Item_func_ne(left, expr);

  DBUG_RETURN(result);
}

/**
   @brief Creates a new SELECT_LEX for a UNION branch.

   Sets up and initializes a SELECT_LEX structure for a query once the parser
   discovers a UNION token. The current SELECT_LEX is pushed on the stack and
   the new SELECT_LEX becomes the current one.

   @param lex The parser state.

   @param is_union_distinct True if the union preceding the new select statement
   uses UNION DISTINCT.

   @param is_top_level This should be @c TRUE if the newly created SELECT_LEX
   is a non-nested statement.

   @return <code>false</code> if successful, <code>true</code> if an error was
   reported. In the latter case parsing should stop.
 */
bool add_select_to_union_list(LEX *lex, bool is_union_distinct, 
                              bool is_top_level)
{
  /* 
     Only the last SELECT can have INTO. Since the grammar won't allow INTO in
     a nested SELECT, we make this check only when creating a top-level SELECT.
  */
  if (is_top_level && lex->result)
  {
    my_error(ER_WRONG_USAGE, MYF(0), "UNION", "INTO");
    return TRUE;
  }
  if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
  {
    my_parse_error(ER(ER_SYNTAX_ERROR));
    return TRUE;
  }
  /* This counter shouldn't be incremented for UNION parts */
  lex->nest_level--;
  if (mysql_new_select(lex, 0))
    return TRUE;
  mysql_init_select(lex);
  lex->current_select->linkage=UNION_TYPE;
  if (is_union_distinct) /* UNION DISTINCT - remember position */
    lex->current_select->master_unit()->union_distinct=
      lex->current_select;
  return FALSE;
}

/**
   @brief Initializes a SELECT_LEX for a query within parentheses (aka
   braces).

   @return false if successful, true if an error was reported. In the latter
   case parsing should stop.
 */
bool setup_select_in_parentheses(LEX *lex) 
{
  SELECT_LEX * sel= lex->current_select;
  if (sel->set_braces(1))
  {
    my_parse_error(ER(ER_SYNTAX_ERROR));
    return TRUE;
  }
  if (sel->linkage == UNION_TYPE &&
      !sel->master_unit()->first_select()->braces &&
      sel->master_unit()->first_select()->linkage ==
      UNION_TYPE)
  {
    my_parse_error(ER(ER_SYNTAX_ERROR));
    return TRUE;
  }
  if (sel->linkage == UNION_TYPE &&
      sel->olap != UNSPECIFIED_OLAP_TYPE &&
      sel->master_unit()->fake_select_lex)
  {
    my_error(ER_WRONG_USAGE, MYF(0), "CUBE/ROLLUP", "ORDER BY");
    return TRUE;
  }
  /* select in braces, can't contain global parameters */
  if (sel->master_unit()->fake_select_lex)
    sel->master_unit()->global_parameters=
      sel->master_unit()->fake_select_lex;
  return FALSE;
}

static bool add_create_index_prepare (LEX *lex, Table_ident *table)
{
  lex->sql_command= SQLCOM_CREATE_INDEX;
  if (!lex->current_select->add_table_to_list(lex->thd, table, NULL,
                                              TL_OPTION_UPDATING,
                                              TL_READ_NO_INSERT,
                                              MDL_SHARED_UPGRADABLE))
    return TRUE;
  lex->alter_info.reset();
  lex->alter_info.flags= Alter_info::ALTER_ADD_INDEX;
  lex->col_list.empty();
  lex->change= NullS;
  lex->option_list= NULL;
  return FALSE;
}

static bool add_create_index (LEX *lex, Key::Keytype type,
                              const LEX_STRING &name,
                              KEY_CREATE_INFO *info= NULL, bool generated= 0)
{
  Key *key;
  key= new Key(type, name, info ? info : &lex->key_create_info, generated, 
               lex->col_list, lex->option_list, lex->check_exists);
  if (key == NULL)
    return TRUE;

  lex->alter_info.key_list.push_back(key);
  lex->col_list.empty();
  return FALSE;
}


/**
  Create a separate LEX for each assignment if in SP.

  If we are in SP we want have own LEX for each assignment.
  This is mostly because it is hard for several sp_instr_set
  and sp_instr_set_trigger instructions share one LEX.
  (Well, it is theoretically possible but adds some extra
  overhead on preparation for execution stage and IMO less
  robust).

  QQ: May be we should simply prohibit group assignments in SP?

  @see sp_create_assignment_instr

  @param thd           Thread context
  @param no_lookahead  True if the parser has no lookahead
*/

static void sp_create_assignment_lex(THD *thd, bool no_lookahead)
{
  LEX *lex= thd->lex;

  if (lex->sphead)
  {
    Lex_input_stream *lip= &thd->m_parser_state->m_lip;
    LEX *old_lex= lex;
    lex->sphead->reset_lex(thd);
    lex= thd->lex;

    /* Set new LEX as if we at start of set rule. */
    lex->sql_command= SQLCOM_SET_OPTION;
    mysql_init_select(lex);
    lex->var_list.empty();
    lex->one_shot_set= 0;
    lex->autocommit= 0;
    /* get_ptr() is only correct with no lookahead. */
    DBUG_ASSERT(no_lookahead);
    lex->sphead->m_tmp_query= lip->get_ptr();
    /* Inherit from outer lex. */
    lex->option_type= old_lex->option_type;
  }
}


/**
  Create a SP instruction for a SET assignment.

  @see sp_create_assignment_lex

  @param thd           Thread context
  @param no_lookahead  True if the parser has no lookahead

  @return false if success, true otherwise.
*/

static bool sp_create_assignment_instr(THD *thd, bool no_lookahead)
{
  LEX *lex= thd->lex;

  if (lex->sphead)
  {
    sp_head *sp= lex->sphead;

    if (!lex->var_list.is_empty())
    {
      /*
        We have assignment to user or system variable or
        option setting, so we should construct sp_instr_stmt
        for it.
      */
      LEX_STRING qbuff;
      sp_instr_stmt *i;
      Lex_input_stream *lip= &thd->m_parser_state->m_lip;

      if (!(i= new sp_instr_stmt(sp->instructions(), lex->spcont,
                                 lex)))
        return true;

      /*
        Extract the query statement from the tokenizer.  The
        end is either lip->ptr, if there was no lookahead,
        lip->tok_end otherwise.
      */
      if (no_lookahead)
        qbuff.length= lip->get_ptr() - sp->m_tmp_query;
      else
        qbuff.length= lip->get_tok_end() - sp->m_tmp_query;

      if (!(qbuff.str= (char*) alloc_root(thd->mem_root,
                                          qbuff.length + 5)))
        return true;

      strmake(strmake(qbuff.str, "SET ", 4), sp->m_tmp_query,
              qbuff.length);
      qbuff.length+= 4;
      i->m_query= qbuff;
      if (sp->add_instr(i))
        return true;
    }
    enum_var_type inner_option_type= lex->option_type;
    if (lex->sphead->restore_lex(thd))
      return true;
    /* Copy option_type to outer lex in case it has changed. */
    thd->lex->option_type= inner_option_type;
  }
  return false;
}




/* Line 189 of yacc.c  */
#line 957 "/home/buildbot/buildbot/build/mkdist/sql/sql_yacc.cc"

/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* Enabling the token table.  */
#ifndef YYTOKEN_TABLE
# define YYTOKEN_TABLE 0
#endif


/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     ABORT_SYM = 258,
     ACCESSIBLE_SYM = 259,
     ACTION = 260,
     ADD = 261,
     ADDDATE_SYM = 262,
     AFTER_SYM = 263,
     AGAINST = 264,
     AGGREGATE_SYM = 265,
     ALGORITHM_SYM = 266,
     ALL = 267,
     ALTER = 268,
     ALWAYS_SYM = 269,
     ANALYZE_SYM = 270,
     AND_AND_SYM = 271,
     AND_SYM = 272,
     ANY_SYM = 273,
     AS = 274,
     ASC = 275,
     ASCII_SYM = 276,
     ASENSITIVE_SYM = 277,
     AT_SYM = 278,
     AUTHORS_SYM = 279,
     AUTOEXTEND_SIZE_SYM = 280,
     AUTO_INC = 281,
     AUTO_SYM = 282,
     AVG_ROW_LENGTH = 283,
     AVG_SYM = 284,
     BACKUP_SYM = 285,
     BEFORE_SYM = 286,
     BEGIN_SYM = 287,
     BETWEEN_SYM = 288,
     BIGINT = 289,
     BINARY = 290,
     BINLOG_SYM = 291,
     BIN_NUM = 292,
     BIT_AND = 293,
     BIT_OR = 294,
     BIT_SYM = 295,
     BIT_XOR = 296,
     BLOB_SYM = 297,
     BLOCK_SYM = 298,
     BOOLEAN_SYM = 299,
     BOOL_SYM = 300,
     BOTH = 301,
     BTREE_SYM = 302,
     BY = 303,
     BYTE_SYM = 304,
     CACHE_SYM = 305,
     CALL_SYM = 306,
     CASCADE = 307,
     CASCADED = 308,
     CASE_SYM = 309,
     CAST_SYM = 310,
     CATALOG_NAME_SYM = 311,
     CHAIN_SYM = 312,
     CHANGE = 313,
     CHANGED = 314,
     CHARSET = 315,
     CHAR_SYM = 316,
     CHECKPOINT_SYM = 317,
     CHECKSUM_SYM = 318,
     CHECK_SYM = 319,
     CIPHER_SYM = 320,
     CLASS_ORIGIN_SYM = 321,
     CLIENT_SYM = 322,
     CLIENT_STATS_SYM = 323,
     CLOSE_SYM = 324,
     COALESCE = 325,
     CODE_SYM = 326,
     COLLATE_SYM = 327,
     COLLATION_SYM = 328,
     COLUMNS = 329,
     COLUMN_ADD_SYM = 330,
     COLUMN_CHECK_SYM = 331,
     COLUMN_CREATE_SYM = 332,
     COLUMN_DELETE_SYM = 333,
     COLUMN_GET_SYM = 334,
     COLUMN_SYM = 335,
     COLUMN_NAME_SYM = 336,
     COMMENT_SYM = 337,
     COMMITTED_SYM = 338,
     COMMIT_SYM = 339,
     COMPACT_SYM = 340,
     COMPLETION_SYM = 341,
     COMPRESSED_SYM = 342,
     CONCURRENT = 343,
     CONDITION_SYM = 344,
     CONNECTION_SYM = 345,
     CONSISTENT_SYM = 346,
     CONSTRAINT = 347,
     CONSTRAINT_CATALOG_SYM = 348,
     CONSTRAINT_NAME_SYM = 349,
     CONSTRAINT_SCHEMA_SYM = 350,
     CONTAINS_SYM = 351,
     CONTEXT_SYM = 352,
     CONTINUE_SYM = 353,
     CONTRIBUTORS_SYM = 354,
     CONVERT_SYM = 355,
     COUNT_SYM = 356,
     CPU_SYM = 357,
     CREATE = 358,
     CROSS = 359,
     CUBE_SYM = 360,
     CURDATE = 361,
     CURRENT_SYM = 362,
     CURRENT_USER = 363,
     CURRENT_POS_SYM = 364,
     CURSOR_SYM = 365,
     CURSOR_NAME_SYM = 366,
     CURTIME = 367,
     DATABASE = 368,
     DATABASES = 369,
     DATAFILE_SYM = 370,
     DATA_SYM = 371,
     DATETIME = 372,
     DATE_ADD_INTERVAL = 373,
     DATE_SUB_INTERVAL = 374,
     DATE_SYM = 375,
     DAY_HOUR_SYM = 376,
     DAY_MICROSECOND_SYM = 377,
     DAY_MINUTE_SYM = 378,
     DAY_SECOND_SYM = 379,
     DAY_SYM = 380,
     DEALLOCATE_SYM = 381,
     DECIMAL_NUM = 382,
     DECIMAL_SYM = 383,
     DECLARE_SYM = 384,
     DEFAULT = 385,
     DEFINER_SYM = 386,
     DELAYED_SYM = 387,
     DELAY_KEY_WRITE_SYM = 388,
     DELETE_SYM = 389,
     DESC = 390,
     DESCRIBE = 391,
     DES_KEY_FILE = 392,
     DETERMINISTIC_SYM = 393,
     DIAGNOSTICS_SYM = 394,
     DIRECTORY_SYM = 395,
     DISABLE_SYM = 396,
     DISCARD = 397,
     DISK_SYM = 398,
     DISTINCT = 399,
     DIV_SYM = 400,
     DOUBLE_SYM = 401,
     DO_SYM = 402,
     DROP = 403,
     DUAL_SYM = 404,
     DUMPFILE = 405,
     DUPLICATE_SYM = 406,
     DYNAMIC_SYM = 407,
     EACH_SYM = 408,
     ELSE = 409,
     ELSEIF_SYM = 410,
     ENABLE_SYM = 411,
     ENCLOSED = 412,
     END = 413,
     ENDS_SYM = 414,
     END_OF_INPUT = 415,
     ENGINES_SYM = 416,
     ENGINE_SYM = 417,
     ENUM = 418,
     EQ = 419,
     EQUAL_SYM = 420,
     ERROR_SYM = 421,
     ERRORS = 422,
     ESCAPED = 423,
     ESCAPE_SYM = 424,
     EVENTS_SYM = 425,
     EVENT_SYM = 426,
     EVERY_SYM = 427,
     EXCHANGE_SYM = 428,
     EXAMINED_SYM = 429,
     EXECUTE_SYM = 430,
     EXISTS = 431,
     EXIT_SYM = 432,
     EXPANSION_SYM = 433,
     EXTENDED_SYM = 434,
     EXTENT_SIZE_SYM = 435,
     EXTRACT_SYM = 436,
     FALSE_SYM = 437,
     FAST_SYM = 438,
     FAULTS_SYM = 439,
     FETCH_SYM = 440,
     FILE_SYM = 441,
     FIRST_SYM = 442,
     FIXED_SYM = 443,
     FLOAT_NUM = 444,
     FLOAT_SYM = 445,
     FLUSH_SYM = 446,
     FORCE_SYM = 447,
     FOREIGN = 448,
     FOR_SYM = 449,
     FOUND_SYM = 450,
     FROM = 451,
     FULL = 452,
     FULLTEXT_SYM = 453,
     FUNCTION_SYM = 454,
     GE = 455,
     GENERAL = 456,
     GENERATED_SYM = 457,
     GEOMETRYCOLLECTION = 458,
     GEOMETRY_SYM = 459,
     GET_FORMAT = 460,
     GET_SYM = 461,
     GLOBAL_SYM = 462,
     GRANT = 463,
     GRANTS = 464,
     GROUP_SYM = 465,
     GROUP_CONCAT_SYM = 466,
     GT_SYM = 467,
     HANDLER_SYM = 468,
     HARD_SYM = 469,
     HASH_SYM = 470,
     HAVING = 471,
     HELP_SYM = 472,
     HEX_NUM = 473,
     HEX_STRING = 474,
     HIGH_PRIORITY = 475,
     HOST_SYM = 476,
     HOSTS_SYM = 477,
     HOUR_MICROSECOND_SYM = 478,
     HOUR_MINUTE_SYM = 479,
     HOUR_SECOND_SYM = 480,
     HOUR_SYM = 481,
     IDENT = 482,
     IDENTIFIED_SYM = 483,
     IDENT_QUOTED = 484,
     IF = 485,
     IGNORE_SYM = 486,
     IGNORE_SERVER_IDS_SYM = 487,
     IMPORT = 488,
     INDEXES = 489,
     INDEX_SYM = 490,
     INDEX_STATS_SYM = 491,
     INFILE = 492,
     INITIAL_SIZE_SYM = 493,
     INNER_SYM = 494,
     INOUT_SYM = 495,
     INSENSITIVE_SYM = 496,
     INSERT = 497,
     INSERT_METHOD = 498,
     INSTALL_SYM = 499,
     INTERVAL_SYM = 500,
     INTO = 501,
     INT_SYM = 502,
     INVOKER_SYM = 503,
     IN_SYM = 504,
     IO_SYM = 505,
     IPC_SYM = 506,
     IS = 507,
     ISOLATION = 508,
     ISSUER_SYM = 509,
     ITERATE_SYM = 510,
     JOIN_SYM = 511,
     KEYS = 512,
     KEY_BLOCK_SIZE = 513,
     KEY_SYM = 514,
     KILL_SYM = 515,
     LANGUAGE_SYM = 516,
     LAST_SYM = 517,
     LAST_VALUE = 518,
     LE = 519,
     LEADING = 520,
     LEAVES = 521,
     LEAVE_SYM = 522,
     LEFT = 523,
     LESS_SYM = 524,
     LEVEL_SYM = 525,
     LEX_HOSTNAME = 526,
     LIKE = 527,
     LIMIT = 528,
     LINEAR_SYM = 529,
     LINES = 530,
     LINESTRING = 531,
     LIST_SYM = 532,
     LOAD = 533,
     LOCAL_SYM = 534,
     LOCATOR_SYM = 535,
     LOCKS_SYM = 536,
     LOCK_SYM = 537,
     LOGFILE_SYM = 538,
     LOGS_SYM = 539,
     LONGBLOB = 540,
     LONGTEXT = 541,
     LONG_NUM = 542,
     LONG_SYM = 543,
     LOOP_SYM = 544,
     LOW_PRIORITY = 545,
     LT = 546,
     MASTER_CONNECT_RETRY_SYM = 547,
     MASTER_GTID_POS_SYM = 548,
     MASTER_HOST_SYM = 549,
     MASTER_LOG_FILE_SYM = 550,
     MASTER_LOG_POS_SYM = 551,
     MASTER_PASSWORD_SYM = 552,
     MASTER_PORT_SYM = 553,
     MASTER_SERVER_ID_SYM = 554,
     MASTER_SSL_CAPATH_SYM = 555,
     MASTER_SSL_CA_SYM = 556,
     MASTER_SSL_CERT_SYM = 557,
     MASTER_SSL_CIPHER_SYM = 558,
     MASTER_SSL_CRL_SYM = 559,
     MASTER_SSL_CRLPATH_SYM = 560,
     MASTER_SSL_KEY_SYM = 561,
     MASTER_SSL_SYM = 562,
     MASTER_SSL_VERIFY_SERVER_CERT_SYM = 563,
     MASTER_SYM = 564,
     MASTER_USER_SYM = 565,
     MASTER_USE_GTID_SYM = 566,
     MASTER_HEARTBEAT_PERIOD_SYM = 567,
     MATCH = 568,
     MAX_CONNECTIONS_PER_HOUR = 569,
     MAX_QUERIES_PER_HOUR = 570,
     MAX_ROWS = 571,
     MAX_SIZE_SYM = 572,
     MAX_SYM = 573,
     MAX_UPDATES_PER_HOUR = 574,
     MAX_USER_CONNECTIONS_SYM = 575,
     MAX_VALUE_SYM = 576,
     MEDIUMBLOB = 577,
     MEDIUMINT = 578,
     MEDIUMTEXT = 579,
     MEDIUM_SYM = 580,
     MEMORY_SYM = 581,
     MERGE_SYM = 582,
     MESSAGE_TEXT_SYM = 583,
     MICROSECOND_SYM = 584,
     MIGRATE_SYM = 585,
     MINUTE_MICROSECOND_SYM = 586,
     MINUTE_SECOND_SYM = 587,
     MINUTE_SYM = 588,
     MIN_ROWS = 589,
     MIN_SYM = 590,
     MODE_SYM = 591,
     MODIFIES_SYM = 592,
     MODIFY_SYM = 593,
     MOD_SYM = 594,
     MONTH_SYM = 595,
     MULTILINESTRING = 596,
     MULTIPOINT = 597,
     MULTIPOLYGON = 598,
     MUTEX_SYM = 599,
     MYSQL_ERRNO_SYM = 600,
     NAMES_SYM = 601,
     NAME_SYM = 602,
     NATIONAL_SYM = 603,
     NATURAL = 604,
     NCHAR_STRING = 605,
     NCHAR_SYM = 606,
     NDBCLUSTER_SYM = 607,
     NE = 608,
     NEG = 609,
     NEW_SYM = 610,
     NEXT_SYM = 611,
     NODEGROUP_SYM = 612,
     NONE_SYM = 613,
     NOT2_SYM = 614,
     NOT_SYM = 615,
     NOW_SYM = 616,
     NO_SYM = 617,
     NO_WAIT_SYM = 618,
     NO_WRITE_TO_BINLOG = 619,
     NULL_SYM = 620,
     NUM = 621,
     NUMBER_SYM = 622,
     NUMERIC_SYM = 623,
     NVARCHAR_SYM = 624,
     OFFSET_SYM = 625,
     OLD_PASSWORD = 626,
     ON = 627,
     ONE_SYM = 628,
     ONLY_SYM = 629,
     ONLINE_SYM = 630,
     OPEN_SYM = 631,
     OPTIMIZE = 632,
     OPTIONS_SYM = 633,
     OPTION = 634,
     OPTIONALLY = 635,
     OR2_SYM = 636,
     ORDER_SYM = 637,
     OR_OR_SYM = 638,
     OR_SYM = 639,
     OUTER = 640,
     OUTFILE = 641,
     OUT_SYM = 642,
     OWNER_SYM = 643,
     PACK_KEYS_SYM = 644,
     PAGE_SYM = 645,
     PAGE_CHECKSUM_SYM = 646,
     PARAM_MARKER = 647,
     PARSER_SYM = 648,
     PARSE_VCOL_EXPR_SYM = 649,
     PARTIAL = 650,
     PARTITION_SYM = 651,
     PARTITIONS_SYM = 652,
     PARTITIONING_SYM = 653,
     PASSWORD = 654,
     PERSISTENT_SYM = 655,
     PHASE_SYM = 656,
     PLUGINS_SYM = 657,
     PLUGIN_SYM = 658,
     POINT_SYM = 659,
     POLYGON = 660,
     PORT_SYM = 661,
     POSITION_SYM = 662,
     PRECISION = 663,
     PREPARE_SYM = 664,
     PRESERVE_SYM = 665,
     PREV_SYM = 666,
     PRIMARY_SYM = 667,
     PRIVILEGES = 668,
     PROCEDURE_SYM = 669,
     PROCESS = 670,
     PROCESSLIST_SYM = 671,
     PROFILE_SYM = 672,
     PROFILES_SYM = 673,
     PROXY_SYM = 674,
     PURGE = 675,
     QUARTER_SYM = 676,
     QUERY_SYM = 677,
     QUICK = 678,
     RANGE_SYM = 679,
     READS_SYM = 680,
     READ_ONLY_SYM = 681,
     READ_SYM = 682,
     READ_WRITE_SYM = 683,
     REAL = 684,
     REBUILD_SYM = 685,
     RECOVER_SYM = 686,
     REDOFILE_SYM = 687,
     REDO_BUFFER_SIZE_SYM = 688,
     REDUNDANT_SYM = 689,
     REFERENCES = 690,
     REGEXP = 691,
     RELAY = 692,
     RELAYLOG_SYM = 693,
     RELAY_LOG_FILE_SYM = 694,
     RELAY_LOG_POS_SYM = 695,
     RELAY_THREAD = 696,
     RELEASE_SYM = 697,
     RELOAD = 698,
     REMOVE_SYM = 699,
     RENAME = 700,
     REORGANIZE_SYM = 701,
     REPAIR = 702,
     REPEATABLE_SYM = 703,
     REPEAT_SYM = 704,
     REPLACE = 705,
     REPLICATION = 706,
     REQUIRE_SYM = 707,
     RESET_SYM = 708,
     RESIGNAL_SYM = 709,
     RESOURCES = 710,
     RESTORE_SYM = 711,
     RESTRICT = 712,
     RESUME_SYM = 713,
     RETURNED_SQLSTATE_SYM = 714,
     RETURNS_SYM = 715,
     RETURN_SYM = 716,
     REVOKE = 717,
     RIGHT = 718,
     ROLLBACK_SYM = 719,
     ROLLUP_SYM = 720,
     ROUTINE_SYM = 721,
     ROWS_SYM = 722,
     ROW_FORMAT_SYM = 723,
     ROW_SYM = 724,
     ROW_COUNT_SYM = 725,
     RTREE_SYM = 726,
     SAVEPOINT_SYM = 727,
     SCHEDULE_SYM = 728,
     SCHEMA_NAME_SYM = 729,
     SECOND_MICROSECOND_SYM = 730,
     SECOND_SYM = 731,
     SECURITY_SYM = 732,
     SELECT_SYM = 733,
     SENSITIVE_SYM = 734,
     SEPARATOR_SYM = 735,
     SERIALIZABLE_SYM = 736,
     SERIAL_SYM = 737,
     SESSION_SYM = 738,
     SERVER_SYM = 739,
     SERVER_OPTIONS = 740,
     SET = 741,
     SET_VAR = 742,
     SHARE_SYM = 743,
     SHIFT_LEFT = 744,
     SHIFT_RIGHT = 745,
     SHOW = 746,
     SHUTDOWN = 747,
     SIGNAL_SYM = 748,
     SIGNED_SYM = 749,
     SIMPLE_SYM = 750,
     SLAVE = 751,
     SLAVES = 752,
     SLAVE_POS_SYM = 753,
     SLOW = 754,
     SMALLINT = 755,
     SNAPSHOT_SYM = 756,
     SOCKET_SYM = 757,
     SOFT_SYM = 758,
     SONAME_SYM = 759,
     SOUNDS_SYM = 760,
     SOURCE_SYM = 761,
     SPATIAL_SYM = 762,
     SPECIFIC_SYM = 763,
     SQLEXCEPTION_SYM = 764,
     SQLSTATE_SYM = 765,
     SQLWARNING_SYM = 766,
     SQL_BIG_RESULT = 767,
     SQL_BUFFER_RESULT = 768,
     SQL_CACHE_SYM = 769,
     SQL_CALC_FOUND_ROWS = 770,
     SQL_NO_CACHE_SYM = 771,
     SQL_SMALL_RESULT = 772,
     SQL_SYM = 773,
     SQL_THREAD = 774,
     SSL_SYM = 775,
     STARTING = 776,
     STARTS_SYM = 777,
     START_SYM = 778,
     STATS_AUTO_RECALC_SYM = 779,
     STATS_PERSISTENT_SYM = 780,
     STATS_SAMPLE_PAGES_SYM = 781,
     STATUS_SYM = 782,
     STDDEV_SAMP_SYM = 783,
     STD_SYM = 784,
     STOP_SYM = 785,
     STORAGE_SYM = 786,
     STRAIGHT_JOIN = 787,
     STRING_SYM = 788,
     SUBCLASS_ORIGIN_SYM = 789,
     SUBDATE_SYM = 790,
     SUBJECT_SYM = 791,
     SUBPARTITIONS_SYM = 792,
     SUBPARTITION_SYM = 793,
     SUBSTRING = 794,
     SUM_SYM = 795,
     SUPER_SYM = 796,
     SUSPEND_SYM = 797,
     SWAPS_SYM = 798,
     SWITCHES_SYM = 799,
     SYSDATE = 800,
     TABLES = 801,
     TABLESPACE = 802,
     TABLE_REF_PRIORITY = 803,
     TABLE_STATS_SYM = 804,
     TABLE_SYM = 805,
     TABLE_CHECKSUM_SYM = 806,
     TABLE_NAME_SYM = 807,
     TEMPORARY = 808,
     TEMPTABLE_SYM = 809,
     TERMINATED = 810,
     TEXT_STRING = 811,
     TEXT_SYM = 812,
     THAN_SYM = 813,
     THEN_SYM = 814,
     TIMESTAMP = 815,
     TIMESTAMP_ADD = 816,
     TIMESTAMP_DIFF = 817,
     TIME_SYM = 818,
     TINYBLOB = 819,
     TINYINT = 820,
     TINYTEXT = 821,
     TO_SYM = 822,
     TRAILING = 823,
     TRANSACTION_SYM = 824,
     TRANSACTIONAL_SYM = 825,
     TRIGGERS_SYM = 826,
     TRIGGER_SYM = 827,
     TRIM = 828,
     TRUE_SYM = 829,
     TRUNCATE_SYM = 830,
     TYPES_SYM = 831,
     TYPE_SYM = 832,
     UDF_RETURNS_SYM = 833,
     ULONGLONG_NUM = 834,
     UNCOMMITTED_SYM = 835,
     UNDEFINED_SYM = 836,
     UNDERSCORE_CHARSET = 837,
     UNDOFILE_SYM = 838,
     UNDO_BUFFER_SIZE_SYM = 839,
     UNDO_SYM = 840,
     UNICODE_SYM = 841,
     UNINSTALL_SYM = 842,
     UNION_SYM = 843,
     UNIQUE_SYM = 844,
     UNKNOWN_SYM = 845,
     UNLOCK_SYM = 846,
     UNSIGNED = 847,
     UNTIL_SYM = 848,
     UPDATE_SYM = 849,
     UPGRADE_SYM = 850,
     USAGE = 851,
     USER = 852,
     USER_STATS_SYM = 853,
     USE_FRM = 854,
     USE_SYM = 855,
     USING = 856,
     UTC_DATE_SYM = 857,
     UTC_TIMESTAMP_SYM = 858,
     UTC_TIME_SYM = 859,
     VALUES = 860,
     VALUE_SYM = 861,
     VARBINARY = 862,
     VARCHAR = 863,
     VARIABLES = 864,
     VARIANCE_SYM = 865,
     VARYING = 866,
     VAR_SAMP_SYM = 867,
     VIA_SYM = 868,
     VIEW_SYM = 869,
     VIRTUAL_SYM = 870,
     WAIT_SYM = 871,
     WARNINGS = 872,
     WEEK_SYM = 873,
     WHEN_SYM = 874,
     WHERE = 875,
     WHILE_SYM = 876,
     WITH = 877,
     WITH_CUBE_SYM = 878,
     WITH_ROLLUP_SYM = 879,
     WORK_SYM = 880,
     WRAPPER_SYM = 881,
     WRITE_SYM = 882,
     X509_SYM = 883,
     XA_SYM = 884,
     XML_SYM = 885,
     XOR = 886,
     YEAR_MONTH_SYM = 887,
     YEAR_SYM = 888,
     ZEROFILL = 889,
     IMPOSSIBLE_ACTION = 890
   };
#endif
/* Tokens.  */
#define ABORT_SYM 258
#define ACCESSIBLE_SYM 259
#define ACTION 260
#define ADD 261
#define ADDDATE_SYM 262
#define AFTER_SYM 263
#define AGAINST 264
#define AGGREGATE_SYM 265
#define ALGORITHM_SYM 266
#define ALL 267
#define ALTER 268
#define ALWAYS_SYM 269
#define ANALYZE_SYM 270
#define AND_AND_SYM 271
#define AND_SYM 272
#define ANY_SYM 273
#define AS 274
#define ASC 275
#define ASCII_SYM 276
#define ASENSITIVE_SYM 277
#define AT_SYM 278
#define AUTHORS_SYM 279
#define AUTOEXTEND_SIZE_SYM 280
#define AUTO_INC 281
#define AUTO_SYM 282
#define AVG_ROW_LENGTH 283
#define AVG_SYM 284
#define BACKUP_SYM 285
#define BEFORE_SYM 286
#define BEGIN_SYM 287
#define BETWEEN_SYM 288
#define BIGINT 289
#define BINARY 290
#define BINLOG_SYM 291
#define BIN_NUM 292
#define BIT_AND 293
#define BIT_OR 294
#define BIT_SYM 295
#define BIT_XOR 296
#define BLOB_SYM 297
#define BLOCK_SYM 298
#define BOOLEAN_SYM 299
#define BOOL_SYM 300
#define BOTH 301
#define BTREE_SYM 302
#define BY 303
#define BYTE_SYM 304
#define CACHE_SYM 305
#define CALL_SYM 306
#define CASCADE 307
#define CASCADED 308
#define CASE_SYM 309
#define CAST_SYM 310
#define CATALOG_NAME_SYM 311
#define CHAIN_SYM 312
#define CHANGE 313
#define CHANGED 314
#define CHARSET 315
#define CHAR_SYM 316
#define CHECKPOINT_SYM 317
#define CHECKSUM_SYM 318
#define CHECK_SYM 319
#define CIPHER_SYM 320
#define CLASS_ORIGIN_SYM 321
#define CLIENT_SYM 322
#define CLIENT_STATS_SYM 323
#define CLOSE_SYM 324
#define COALESCE 325
#define CODE_SYM 326
#define COLLATE_SYM 327
#define COLLATION_SYM 328
#define COLUMNS 329
#define COLUMN_ADD_SYM 330
#define COLUMN_CHECK_SYM 331
#define COLUMN_CREATE_SYM 332
#define COLUMN_DELETE_SYM 333
#define COLUMN_GET_SYM 334
#define COLUMN_SYM 335
#define COLUMN_NAME_SYM 336
#define COMMENT_SYM 337
#define COMMITTED_SYM 338
#define COMMIT_SYM 339
#define COMPACT_SYM 340
#define COMPLETION_SYM 341
#define COMPRESSED_SYM 342
#define CONCURRENT 343
#define CONDITION_SYM 344
#define CONNECTION_SYM 345
#define CONSISTENT_SYM 346
#define CONSTRAINT 347
#define CONSTRAINT_CATALOG_SYM 348
#define CONSTRAINT_NAME_SYM 349
#define CONSTRAINT_SCHEMA_SYM 350
#define CONTAINS_SYM 351
#define CONTEXT_SYM 352
#define CONTINUE_SYM 353
#define CONTRIBUTORS_SYM 354
#define CONVERT_SYM 355
#define COUNT_SYM 356
#define CPU_SYM 357
#define CREATE 358
#define CROSS 359
#define CUBE_SYM 360
#define CURDATE 361
#define CURRENT_SYM 362
#define CURRENT_USER 363
#define CURRENT_POS_SYM 364
#define CURSOR_SYM 365
#define CURSOR_NAME_SYM 366
#define CURTIME 367
#define DATABASE 368
#define DATABASES 369
#define DATAFILE_SYM 370
#define DATA_SYM 371
#define DATETIME 372
#define DATE_ADD_INTERVAL 373
#define DATE_SUB_INTERVAL 374
#define DATE_SYM 375
#define DAY_HOUR_SYM 376
#define DAY_MICROSECOND_SYM 377
#define DAY_MINUTE_SYM 378
#define DAY_SECOND_SYM 379
#define DAY_SYM 380
#define DEALLOCATE_SYM 381
#define DECIMAL_NUM 382
#define DECIMAL_SYM 383
#define DECLARE_SYM 384
#define DEFAULT 385
#define DEFINER_SYM 386
#define DELAYED_SYM 387
#define DELAY_KEY_WRITE_SYM 388
#define DELETE_SYM 389
#define DESC 390
#define DESCRIBE 391
#define DES_KEY_FILE 392
#define DETERMINISTIC_SYM 393
#define DIAGNOSTICS_SYM 394
#define DIRECTORY_SYM 395
#define DISABLE_SYM 396
#define DISCARD 397
#define DISK_SYM 398
#define DISTINCT 399
#define DIV_SYM 400
#define DOUBLE_SYM 401
#define DO_SYM 402
#define DROP 403
#define DUAL_SYM 404
#define DUMPFILE 405
#define DUPLICATE_SYM 406
#define DYNAMIC_SYM 407
#define EACH_SYM 408
#define ELSE 409
#define ELSEIF_SYM 410
#define ENABLE_SYM 411
#define ENCLOSED 412
#define END 413
#define ENDS_SYM 414
#define END_OF_INPUT 415
#define ENGINES_SYM 416
#define ENGINE_SYM 417
#define ENUM 418
#define EQ 419
#define EQUAL_SYM 420
#define ERROR_SYM 421
#define ERRORS 422
#define ESCAPED 423
#define ESCAPE_SYM 424
#define EVENTS_SYM 425
#define EVENT_SYM 426
#define EVERY_SYM 427
#define EXCHANGE_SYM 428
#define EXAMINED_SYM 429
#define EXECUTE_SYM 430
#define EXISTS 431
#define EXIT_SYM 432
#define EXPANSION_SYM 433
#define EXTENDED_SYM 434
#define EXTENT_SIZE_SYM 435
#define EXTRACT_SYM 436
#define FALSE_SYM 437
#define FAST_SYM 438
#define FAULTS_SYM 439
#define FETCH_SYM 440
#define FILE_SYM 441
#define FIRST_SYM 442
#define FIXED_SYM 443
#define FLOAT_NUM 444
#define FLOAT_SYM 445
#define FLUSH_SYM 446
#define FORCE_SYM 447
#define FOREIGN 448
#define FOR_SYM 449
#define FOUND_SYM 450
#define FROM 451
#define FULL 452
#define FULLTEXT_SYM 453
#define FUNCTION_SYM 454
#define GE 455
#define GENERAL 456
#define GENERATED_SYM 457
#define GEOMETRYCOLLECTION 458
#define GEOMETRY_SYM 459
#define GET_FORMAT 460
#define GET_SYM 461
#define GLOBAL_SYM 462
#define GRANT 463
#define GRANTS 464
#define GROUP_SYM 465
#define GROUP_CONCAT_SYM 466
#define GT_SYM 467
#define HANDLER_SYM 468
#define HARD_SYM 469
#define HASH_SYM 470
#define HAVING 471
#define HELP_SYM 472
#define HEX_NUM 473
#define HEX_STRING 474
#define HIGH_PRIORITY 475
#define HOST_SYM 476
#define HOSTS_SYM 477
#define HOUR_MICROSECOND_SYM 478
#define HOUR_MINUTE_SYM 479
#define HOUR_SECOND_SYM 480
#define HOUR_SYM 481
#define IDENT 482
#define IDENTIFIED_SYM 483
#define IDENT_QUOTED 484
#define IF 485
#define IGNORE_SYM 486
#define IGNORE_SERVER_IDS_SYM 487
#define IMPORT 488
#define INDEXES 489
#define INDEX_SYM 490
#define INDEX_STATS_SYM 491
#define INFILE 492
#define INITIAL_SIZE_SYM 493
#define INNER_SYM 494
#define INOUT_SYM 495
#define INSENSITIVE_SYM 496
#define INSERT 497
#define INSERT_METHOD 498
#define INSTALL_SYM 499
#define INTERVAL_SYM 500
#define INTO 501
#define INT_SYM 502
#define INVOKER_SYM 503
#define IN_SYM 504
#define IO_SYM 505
#define IPC_SYM 506
#define IS 507
#define ISOLATION 508
#define ISSUER_SYM 509
#define ITERATE_SYM 510
#define JOIN_SYM 511
#define KEYS 512
#define KEY_BLOCK_SIZE 513
#define KEY_SYM 514
#define KILL_SYM 515
#define LANGUAGE_SYM 516
#define LAST_SYM 517
#define LAST_VALUE 518
#define LE 519
#define LEADING 520
#define LEAVES 521
#define LEAVE_SYM 522
#define LEFT 523
#define LESS_SYM 524
#define LEVEL_SYM 525
#define LEX_HOSTNAME 526
#define LIKE 527
#define LIMIT 528
#define LINEAR_SYM 529
#define LINES 530
#define LINESTRING 531
#define LIST_SYM 532
#define LOAD 533
#define LOCAL_SYM 534
#define LOCATOR_SYM 535
#define LOCKS_SYM 536
#define LOCK_SYM 537
#define LOGFILE_SYM 538
#define LOGS_SYM 539
#define LONGBLOB 540
#define LONGTEXT 541
#define LONG_NUM 542
#define LONG_SYM 543
#define LOOP_SYM 544
#define LOW_PRIORITY 545
#define LT 546
#define MASTER_CONNECT_RETRY_SYM 547
#define MASTER_GTID_POS_SYM 548
#define MASTER_HOST_SYM 549
#define MASTER_LOG_FILE_SYM 550
#define MASTER_LOG_POS_SYM 551
#define MASTER_PASSWORD_SYM 552
#define MASTER_PORT_SYM 553
#define MASTER_SERVER_ID_SYM 554
#define MASTER_SSL_CAPATH_SYM 555
#define MASTER_SSL_CA_SYM 556
#define MASTER_SSL_CERT_SYM 557
#define MASTER_SSL_CIPHER_SYM 558
#define MASTER_SSL_CRL_SYM 559
#define MASTER_SSL_CRLPATH_SYM 560
#define MASTER_SSL_KEY_SYM 561
#define MASTER_SSL_SYM 562
#define MASTER_SSL_VERIFY_SERVER_CERT_SYM 563
#define MASTER_SYM 564
#define MASTER_USER_SYM 565
#define MASTER_USE_GTID_SYM 566
#define MASTER_HEARTBEAT_PERIOD_SYM 567
#define MATCH 568
#define MAX_CONNECTIONS_PER_HOUR 569
#define MAX_QUERIES_PER_HOUR 570
#define MAX_ROWS 571
#define MAX_SIZE_SYM 572
#define MAX_SYM 573
#define MAX_UPDATES_PER_HOUR 574
#define MAX_USER_CONNECTIONS_SYM 575
#define MAX_VALUE_SYM 576
#define MEDIUMBLOB 577
#define MEDIUMINT 578
#define MEDIUMTEXT 579
#define MEDIUM_SYM 580
#define MEMORY_SYM 581
#define MERGE_SYM 582
#define MESSAGE_TEXT_SYM 583
#define MICROSECOND_SYM 584
#define MIGRATE_SYM 585
#define MINUTE_MICROSECOND_SYM 586
#define MINUTE_SECOND_SYM 587
#define MINUTE_SYM 588
#define MIN_ROWS 589
#define MIN_SYM 590
#define MODE_SYM 591
#define MODIFIES_SYM 592
#define MODIFY_SYM 593
#define MOD_SYM 594
#define MONTH_SYM 595
#define MULTILINESTRING 596
#define MULTIPOINT 597
#define MULTIPOLYGON 598
#define MUTEX_SYM 599
#define MYSQL_ERRNO_SYM 600
#define NAMES_SYM 601
#define NAME_SYM 602
#define NATIONAL_SYM 603
#define NATURAL 604
#define NCHAR_STRING 605
#define NCHAR_SYM 606
#define NDBCLUSTER_SYM 607
#define NE 608
#define NEG 609
#define NEW_SYM 610
#define NEXT_SYM 611
#define NODEGROUP_SYM 612
#define NONE_SYM 613
#define NOT2_SYM 614
#define NOT_SYM 615
#define NOW_SYM 616
#define NO_SYM 617
#define NO_WAIT_SYM 618
#define NO_WRITE_TO_BINLOG 619
#define NULL_SYM 620
#define NUM 621
#define NUMBER_SYM 622
#define NUMERIC_SYM 623
#define NVARCHAR_SYM 624
#define OFFSET_SYM 625
#define OLD_PASSWORD 626
#define ON 627
#define ONE_SYM 628
#define ONLY_SYM 629
#define ONLINE_SYM 630
#define OPEN_SYM 631
#define OPTIMIZE 632
#define OPTIONS_SYM 633
#define OPTION 634
#define OPTIONALLY 635
#define OR2_SYM 636
#define ORDER_SYM 637
#define OR_OR_SYM 638
#define OR_SYM 639
#define OUTER 640
#define OUTFILE 641
#define OUT_SYM 642
#define OWNER_SYM 643
#define PACK_KEYS_SYM 644
#define PAGE_SYM 645
#define PAGE_CHECKSUM_SYM 646
#define PARAM_MARKER 647
#define PARSER_SYM 648
#define PARSE_VCOL_EXPR_SYM 649
#define PARTIAL 650
#define PARTITION_SYM 651
#define PARTITIONS_SYM 652
#define PARTITIONING_SYM 653
#define PASSWORD 654
#define PERSISTENT_SYM 655
#define PHASE_SYM 656
#define PLUGINS_SYM 657
#define PLUGIN_SYM 658
#define POINT_SYM 659
#define POLYGON 660
#define PORT_SYM 661
#define POSITION_SYM 662
#define PRECISION 663
#define PREPARE_SYM 664
#define PRESERVE_SYM 665
#define PREV_SYM 666
#define PRIMARY_SYM 667
#define PRIVILEGES 668
#define PROCEDURE_SYM 669
#define PROCESS 670
#define PROCESSLIST_SYM 671
#define PROFILE_SYM 672
#define PROFILES_SYM 673
#define PROXY_SYM 674
#define PURGE 675
#define QUARTER_SYM 676
#define QUERY_SYM 677
#define QUICK 678
#define RANGE_SYM 679
#define READS_SYM 680
#define READ_ONLY_SYM 681
#define READ_SYM 682
#define READ_WRITE_SYM 683
#define REAL 684
#define REBUILD_SYM 685
#define RECOVER_SYM 686
#define REDOFILE_SYM 687
#define REDO_BUFFER_SIZE_SYM 688
#define REDUNDANT_SYM 689
#define REFERENCES 690
#define REGEXP 691
#define RELAY 692
#define RELAYLOG_SYM 693
#define RELAY_LOG_FILE_SYM 694
#define RELAY_LOG_POS_SYM 695
#define RELAY_THREAD 696
#define RELEASE_SYM 697
#define RELOAD 698
#define REMOVE_SYM 699
#define RENAME 700
#define REORGANIZE_SYM 701
#define REPAIR 702
#define REPEATABLE_SYM 703
#define REPEAT_SYM 704
#define REPLACE 705
#define REPLICATION 706
#define REQUIRE_SYM 707
#define RESET_SYM 708
#define RESIGNAL_SYM 709
#define RESOURCES 710
#define RESTORE_SYM 711
#define RESTRICT 712
#define RESUME_SYM 713
#define RETURNED_SQLSTATE_SYM 714
#define RETURNS_SYM 715
#define RETURN_SYM 716
#define REVOKE 717
#define RIGHT 718
#define ROLLBACK_SYM 719
#define ROLLUP_SYM 720
#define ROUTINE_SYM 721
#define ROWS_SYM 722
#define ROW_FORMAT_SYM 723
#define ROW_SYM 724
#define ROW_COUNT_SYM 725
#define RTREE_SYM 726
#define SAVEPOINT_SYM 727
#define SCHEDULE_SYM 728
#define SCHEMA_NAME_SYM 729
#define SECOND_MICROSECOND_SYM 730
#define SECOND_SYM 731
#define SECURITY_SYM 732
#define SELECT_SYM 733
#define SENSITIVE_SYM 734
#define SEPARATOR_SYM 735
#define SERIALIZABLE_SYM 736
#define SERIAL_SYM 737
#define SESSION_SYM 738
#define SERVER_SYM 739
#define SERVER_OPTIONS 740
#define SET 741
#define SET_VAR 742
#define SHARE_SYM 743
#define SHIFT_LEFT 744
#define SHIFT_RIGHT 745
#define SHOW 746
#define SHUTDOWN 747
#define SIGNAL_SYM 748
#define SIGNED_SYM 749
#define SIMPLE_SYM 750
#define SLAVE 751
#define SLAVES 752
#define SLAVE_POS_SYM 753
#define SLOW 754
#define SMALLINT 755
#define SNAPSHOT_SYM 756
#define SOCKET_SYM 757
#define SOFT_SYM 758
#define SONAME_SYM 759
#define SOUNDS_SYM 760
#define SOURCE_SYM 761
#define SPATIAL_SYM 762
#define SPECIFIC_SYM 763
#define SQLEXCEPTION_SYM 764
#define SQLSTATE_SYM 765
#define SQLWARNING_SYM 766
#define SQL_BIG_RESULT 767
#define SQL_BUFFER_RESULT 768
#define SQL_CACHE_SYM 769
#define SQL_CALC_FOUND_ROWS 770
#define SQL_NO_CACHE_SYM 771
#define SQL_SMALL_RESULT 772
#define SQL_SYM 773
#define SQL_THREAD 774
#define SSL_SYM 775
#define STARTING 776
#define STARTS_SYM 777
#define START_SYM 778
#define STATS_AUTO_RECALC_SYM 779
#define STATS_PERSISTENT_SYM 780
#define STATS_SAMPLE_PAGES_SYM 781
#define STATUS_SYM 782
#define STDDEV_SAMP_SYM 783
#define STD_SYM 784
#define STOP_SYM 785
#define STORAGE_SYM 786
#define STRAIGHT_JOIN 787
#define STRING_SYM 788
#define SUBCLASS_ORIGIN_SYM 789
#define SUBDATE_SYM 790
#define SUBJECT_SYM 791
#define SUBPARTITIONS_SYM 792
#define SUBPARTITION_SYM 793
#define SUBSTRING 794
#define SUM_SYM 795
#define SUPER_SYM 796
#define SUSPEND_SYM 797
#define SWAPS_SYM 798
#define SWITCHES_SYM 799
#define SYSDATE 800
#define TABLES 801
#define TABLESPACE 802
#define TABLE_REF_PRIORITY 803
#define TABLE_STATS_SYM 804
#define TABLE_SYM 805
#define TABLE_CHECKSUM_SYM 806
#define TABLE_NAME_SYM 807
#define TEMPORARY 808
#define TEMPTABLE_SYM 809
#define TERMINATED 810
#define TEXT_STRING 811
#define TEXT_SYM 812
#define THAN_SYM 813
#define THEN_SYM 814
#define TIMESTAMP 815
#define TIMESTAMP_ADD 816
#define TIMESTAMP_DIFF 817
#define TIME_SYM 818
#define TINYBLOB 819
#define TINYINT 820
#define TINYTEXT 821
#define TO_SYM 822
#define TRAILING 823
#define TRANSACTION_SYM 824
#define TRANSACTIONAL_SYM 825
#define TRIGGERS_SYM 826
#define TRIGGER_SYM 827
#define TRIM 828
#define TRUE_SYM 829
#define TRUNCATE_SYM 830
#define TYPES_SYM 831
#define TYPE_SYM 832
#define UDF_RETURNS_SYM 833
#define ULONGLONG_NUM 834
#define UNCOMMITTED_SYM 835
#define UNDEFINED_SYM 836
#define UNDERSCORE_CHARSET 837
#define UNDOFILE_SYM 838
#define UNDO_BUFFER_SIZE_SYM 839
#define UNDO_SYM 840
#define UNICODE_SYM 841
#define UNINSTALL_SYM 842
#define UNION_SYM 843
#define UNIQUE_SYM 844
#define UNKNOWN_SYM 845
#define UNLOCK_SYM 846
#define UNSIGNED 847
#define UNTIL_SYM 848
#define UPDATE_SYM 849
#define UPGRADE_SYM 850
#define USAGE 851
#define USER 852
#define USER_STATS_SYM 853
#define USE_FRM 854
#define USE_SYM 855
#define USING 856
#define UTC_DATE_SYM 857
#define UTC_TIMESTAMP_SYM 858
#define UTC_TIME_SYM 859
#define VALUES 860
#define VALUE_SYM 861
#define VARBINARY 862
#define VARCHAR 863
#define VARIABLES 864
#define VARIANCE_SYM 865
#define VARYING 866
#define VAR_SAMP_SYM 867
#define VIA_SYM 868
#define VIEW_SYM 869
#define VIRTUAL_SYM 870
#define WAIT_SYM 871
#define WARNINGS 872
#define WEEK_SYM 873
#define WHEN_SYM 874
#define WHERE 875
#define WHILE_SYM 876
#define WITH 877
#define WITH_CUBE_SYM 878
#define WITH_ROLLUP_SYM 879
#define WORK_SYM 880
#define WRAPPER_SYM 881
#define WRITE_SYM 882
#define X509_SYM 883
#define XA_SYM 884
#define XML_SYM 885
#define XOR 886
#define YEAR_MONTH_SYM 887
#define YEAR_SYM 888
#define ZEROFILL 889
#define IMPOSSIBLE_ACTION 890




#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
typedef union YYSTYPE
{

/* Line 214 of yacc.c  */
#line 899 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"

  int  num;
  ulong ulong_num;
  ulonglong ulonglong_number;
  longlong longlong_number;
  LEX_STRING lex_str;
  LEX_STRING *lex_str_ptr;
  LEX_SYMBOL symbol;
  Table_ident *table;
  char *simple_string;
  Item *item;
  Item_num *item_num;
  List<Item> *item_list;
  List<String> *string_list;
  String *string;
  Key_part_spec *key_part;
  TABLE_LIST *table_list;
  udf_func *udf;
  LEX_USER *lex_user;
  struct sys_var_with_base variable;
  enum enum_var_type var_type;
  Key::Keytype key_type;
  enum ha_key_alg key_alg;
  handlerton *db_type;
  enum row_type row_type;
  enum ha_rkey_function ha_rkey_mode;
  enum enum_tx_isolation tx_isolation;
  enum Cast_target cast_type;
  enum Item_udftype udf_type;
  enum ha_choice choice;
  CHARSET_INFO *charset;
  thr_lock_type lock_type;
  interval_type interval, interval_time_st;
  timestamp_type date_time_type;
  st_select_lex *select_lex;
  chooser_compare_func_creator boolfunc2creator;
  class sp_condition_value *spcondvalue;
  struct { int vars, conds, hndlrs, curs; } spblock;
  sp_name *spname;
  LEX *lex;
  sp_head *sphead;
  struct p_elem_val *p_elem_value;
  enum index_hint_type index_hint;
  enum enum_filetype filetype;
  enum Foreign_key::fk_option m_fk_option;
  enum enum_yes_no_unknown m_yes_no_unk;
  Diag_condition_item_name diag_condition_item_name;
  Diagnostics_information::Which_area diag_area;
  Diagnostics_information *diag_info;
  Statement_information_item *stmt_info_item;
  Statement_information_item::Name stmt_info_item_name;
  List<Statement_information_item> *stmt_info_list;
  Condition_information_item *cond_info_item;
  Condition_information_item::Name cond_info_item_name;
  List<Condition_information_item> *cond_info_list;
  DYNCALL_CREATE_DEF *dyncol_def;
  List<DYNCALL_CREATE_DEF> *dyncol_def_list;
  bool is_not_empty;



/* Line 214 of yacc.c  */
#line 2325 "/home/buildbot/buildbot/build/mkdist/sql/sql_yacc.cc"
} YYSTYPE;
# define YYSTYPE_IS_TRIVIAL 1
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
#endif


/* Copy the second part of user declarations.  */

/* Line 264 of yacc.c  */
#line 959 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"

bool my_yyoverflow(short **a, YYSTYPE **b, ulong *yystacksize);


/* Line 264 of yacc.c  */
#line 2342 "/home/buildbot/buildbot/build/mkdist/sql/sql_yacc.cc"

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#elif (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
typedef signed char yytype_int8;
#else
typedef short int yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(msgid) dgettext ("bison-runtime", msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(msgid) msgid
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(e) ((void) (e))
#else
# define YYUSE(e) /* empty */
#endif

/* Identity function, used to suppress warnings about constant conditions.  */
#ifndef lint
# define YYID(n) (n)
#else
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static int
YYID (int yyi)
#else
static int
YYID (yyi)
    int yyi;
#endif
{
  return yyi;
}
#endif

#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#     ifndef _STDLIB_H
#      define _STDLIB_H 1
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (YYID (0))
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined _STDLIB_H \
       && ! ((defined YYMALLOC || defined malloc) \
	     && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef _STDLIB_H
#    define _STDLIB_H 1
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
	 || (defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss_alloc;
  YYSTYPE yyvs_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE)) \
      + YYSTACK_GAP_MAXIMUM)

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  YYSIZE_T yyi;				\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (YYID (0))
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)				\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack_alloc, Stack, yysize);			\
	Stack = &yyptr->Stack_alloc;					\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (YYID (0))

#endif

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  616
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   62557

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  655
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  972
/* YYNRULES -- Number of rules.  */
#define YYNRULES  2758
/* YYNRULES -- Number of states.  */
#define YYNSTATES  4667

/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   890

#define YYTRANSLATE(YYX)						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const yytype_uint16 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   648,     2,     2,     2,   642,   637,     2,
     645,   646,   640,   639,   647,   638,   653,   641,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   654,   651,
       2,     2,     2,     2,   652,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,   643,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   649,   636,   650,   644,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const yytype_uint16 yyprhs[] =
{
       0,     0,     3,     5,     6,    11,    14,    15,    17,    19,
      21,    23,    25,    27,    29,    31,    33,    35,    37,    39,
      41,    43,    45,    47,    49,    51,    53,    55,    57,    59,
      61,    63,    65,    67,    69,    71,    73,    75,    77,    79,
      81,    83,    85,    87,    89,    91,    93,    95,    97,    99,
     101,   103,   105,   107,   109,   111,   113,   115,   117,   119,
     121,   123,   125,   127,   129,   131,   135,   137,   139,   144,
     146,   149,   150,   155,   156,   159,   163,   165,   168,   169,
     173,   174,   181,   183,   187,   191,   195,   199,   203,   207,
     211,   215,   219,   223,   227,   231,   235,   239,   243,   247,
     253,   255,   256,   258,   262,   264,   268,   272,   276,   280,
     284,   288,   292,   293,   295,   297,   298,   306,   307,   308,
     324,   325,   326,   342,   343,   344,   360,   361,   368,   369,
     373,   378,   383,   387,   390,   401,   403,   407,   410,   413,
     416,   419,   422,   425,   428,   429,   443,   444,   451,   454,
     455,   457,   461,   463,   464,   467,   468,   471,   472,   474,
     478,   483,   484,   487,   488,   491,   493,   495,   497,   499,
     501,   503,   505,   507,   509,   511,   513,   515,   517,   518,
     522,   524,   525,   528,   529,   532,   535,   538,   541,   544,
     548,   552,   554,   556,   558,   561,   565,   569,   570,   575,
     576,   580,   581,   583,   587,   589,   590,   592,   596,   598,
     599,   603,   604,   606,   610,   612,   617,   618,   620,   622,
     624,   625,   629,   632,   636,   637,   641,   642,   648,   654,
     655,   663,   669,   670,   673,   675,   677,   679,   683,   685,
     687,   689,   693,   694,   696,   698,   700,   702,   705,   707,
     711,   713,   715,   716,   718,   719,   722,   726,   732,   734,
     736,   738,   740,   742,   744,   746,   748,   750,   752,   754,
     756,   758,   760,   762,   766,   771,   772,   774,   776,   780,
     782,   786,   790,   792,   795,   797,   799,   801,   803,   807,
     811,   813,   815,   817,   819,   821,   823,   825,   827,   829,
     831,   833,   835,   837,   839,   843,   844,   847,   849,   851,
     853,   855,   857,   859,   861,   863,   865,   867,   869,   871,
     873,   874,   880,   881,   884,   885,   889,   890,   893,   896,
     899,   902,   903,   910,   913,   914,   917,   919,   921,   925,
     926,   927,   928,   936,   937,   940,   943,   945,   947,   948,
     949,   958,   959,   966,   968,   971,   973,   976,   977,   978,
     985,   986,   987,   994,   995,   998,   999,  1005,  1006,  1008,
    1009,  1015,  1016,  1019,  1020,  1026,  1031,  1032,  1033,  1042,
    1043,  1051,  1053,  1055,  1057,  1059,  1061,  1064,  1069,  1075,
    1076,  1081,  1086,  1091,  1095,  1099,  1102,  1105,  1106,  1109,
    1111,  1114,  1118,  1120,  1122,  1124,  1126,  1128,  1131,  1135,
    1137,  1139,  1141,  1143,  1145,  1147,  1149,  1151,  1153,  1155,
    1158,  1162,  1164,  1166,  1168,  1170,  1172,  1174,  1176,  1179,
    1183,  1185,  1187,  1189,  1191,  1193,  1195,  1197,  1199,  1201,
    1204,  1208,  1210,  1212,  1214,  1217,  1220,  1223,  1225,  1227,
    1229,  1231,  1234,  1238,  1242,  1246,  1250,  1254,  1258,  1262,
    1266,  1271,  1272,  1274,  1276,  1278,  1280,  1282,  1283,  1291,
    1295,  1296,  1302,  1304,  1307,  1312,  1313,  1314,  1320,  1321,
    1329,  1331,  1332,  1334,  1335,  1340,  1341,  1342,  1346,  1352,
    1358,  1359,  1364,  1367,  1370,  1373,  1376,  1377,  1379,  1380,
    1382,  1384,  1388,  1390,  1395,  1401,  1407,  1408,  1411,  1412,
    1413,  1421,  1422,  1432,  1434,  1438,  1440,  1442,  1443,  1446,
    1447,  1451,  1453,  1457,  1458,  1465,  1467,  1468,  1469,  1475,
    1476,  1481,  1483,  1485,  1487,  1491,  1493,  1497,  1498,  1499,
    1505,  1507,  1511,  1513,  1515,  1516,  1520,  1522,  1526,  1527,
    1532,  1534,  1535,  1537,  1540,  1542,  1546,  1551,  1555,  1559,
    1563,  1567,  1572,  1577,  1581,  1582,  1583,  1590,  1591,  1593,
    1594,  1596,  1598,  1601,  1603,  1605,  1606,  1608,  1610,  1613,
    1615,  1616,  1620,  1621,  1623,  1625,  1628,  1630,  1633,  1637,
    1641,  1645,  1649,  1653,  1657,  1661,  1665,  1669,  1673,  1677,
    1681,  1685,  1689,  1693,  1697,  1701,  1705,  1709,  1713,  1717,
    1718,  1725,  1727,  1729,  1733,  1738,  1743,  1746,  1749,  1752,
    1756,  1760,  1764,  1768,  1772,  1776,  1780,  1785,  1790,  1792,
    1794,  1796,  1798,  1800,  1802,  1804,  1806,  1808,  1810,  1812,
    1814,  1816,  1819,  1821,  1823,  1825,  1827,  1829,  1831,  1835,
    1837,  1839,  1842,  1845,  1846,  1855,  1856,  1866,  1867,  1877,
    1878,  1888,  1897,  1900,  1901,  1903,  1908,  1909,  1911,  1914,
    1915,  1919,  1922,  1931,  1932,  1935,  1936,  1938,  1940,  1941,
    1943,  1946,  1948,  1950,  1953,  1956,  1961,  1965,  1969,  1973,
    1977,  1979,  1982,  1984,  1986,  1990,  1993,  1997,  2000,  2003,
    2005,  2009,  2013,  2016,  2020,  2022,  2025,  2028,  2031,  2033,
    2036,  2038,  2040,  2042,  2045,  2049,  2052,  2056,  2059,  2062,
    2066,  2070,  2074,  2075,  2082,  2083,  2090,  2093,  2095,  2097,
    2099,  2101,  2103,  2105,  2107,  2109,  2111,  2113,  2115,  2118,
    2121,  2123,  2126,  2128,  2131,  2135,  2138,  2140,  2142,  2144,
    2146,  2148,  2150,  2152,  2155,  2156,  2158,  2160,  2166,  2167,
    2169,  2172,  2174,  2176,  2178,  2180,  2184,  2188,  2192,  2196,
    2197,  2199,  2200,  2202,  2203,  2205,  2208,  2210,  2212,  2215,
    2218,  2223,  2225,  2229,  2232,  2234,  2237,  2240,  2243,  2247,
    2251,  2255,  2259,  2262,  2265,  2267,  2269,  2271,  2274,  2276,
    2278,  2280,  2282,  2284,  2285,  2288,  2290,  2292,  2294,  2296,
    2298,  2299,  2302,  2304,  2306,  2307,  2309,  2311,  2314,  2317,
    2319,  2322,  2325,  2326,  2328,  2330,  2332,  2336,  2338,  2342,
    2343,  2345,  2346,  2348,  2354,  2355,  2359,  2363,  2365,  2366,
    2369,  2372,  2375,  2376,  2380,  2384,  2391,  2398,  2400,  2402,
    2405,  2408,  2411,  2413,  2416,  2419,  2421,  2423,  2424,  2426,
    2428,  2430,  2432,  2433,  2435,  2437,  2439,  2440,  2442,  2445,
    2446,  2448,  2449,  2451,  2452,  2454,  2456,  2459,  2461,  2464,
    2466,  2469,  2472,  2475,  2479,  2482,  2486,  2490,  2494,  2498,
    2500,  2502,  2504,  2506,  2510,  2512,  2514,  2516,  2521,  2524,
    2526,  2531,  2532,  2534,  2537,  2538,  2541,  2543,  2547,  2548,
    2549,  2557,  2558,  2564,  2572,  2573,  2579,  2580,  2586,  2587,
    2593,  2594,  2599,  2600,  2611,  2615,  2620,  2624,  2628,  2636,
    2637,  2641,  2643,  2648,  2649,  2653,  2654,  2657,  2658,  2660,
    2661,  2664,  2667,  2670,  2673,  2675,  2677,  2679,  2684,  2689,
    2690,  2697,  2702,  2703,  2709,  2710,  2717,  2722,  2726,  2728,
    2736,  2739,  2741,  2743,  2744,  2751,  2752,  2756,  2759,  2760,
    2766,  2767,  2768,  2775,  2777,  2781,  2783,  2785,  2789,  2793,
    2797,  2800,  2805,  2806,  2814,  2815,  2816,  2825,  2831,  2837,
    2841,  2846,  2849,  2852,  2859,  2865,  2869,  2875,  2877,  2879,
    2881,  2883,  2885,  2886,  2888,  2890,  2893,  2896,  2900,  2904,
    2908,  2912,  2913,  2915,  2916,  2918,  2919,  2922,  2923,  2925,
    2928,  2930,  2932,  2934,  2935,  2937,  2939,  2940,  2943,  2945,
    2946,  2948,  2950,  2952,  2953,  2960,  2961,  2967,  2972,  2977,
    2981,  2982,  2984,  2986,  2990,  2994,  2997,  3000,  3001,  3004,
    3006,  3010,  3011,  3013,  3015,  3016,  3019,  3024,  3026,  3030,
    3031,  3037,  3038,  3040,  3042,  3043,  3050,  3051,  3053,  3055,
    3058,  3060,  3062,  3064,  3065,  3071,  3073,  3077,  3080,  3081,
    3085,  3087,  3092,  3094,  3095,  3100,  3102,  3103,  3108,  3109,
    3111,  3115,  3116,  3118,  3122,  3124,  3126,  3129,  3130,  3136,
    3137,  3139,  3141,  3144,  3146,  3148,  3150,  3152,  3154,  3157,
    3158,  3164,  3165,  3167,  3169,  3170,  3175,  3180,  3184,  3190,
    3192,  3196,  3200,  3201,  3208,  3210,  3212,  3214,  3218,  3221,
    3225,  3227,  3229,  3230,  3237,  3239,  3241,  3243,  3247,  3251,
    3256,  3257,  3264,  3265,  3268,  3269,  3274,  3275,  3278,  3280,
    3283,  3288,  3291,  3295,  3298,  3302,  3303,  3307,  3308,  3309,
    3316,  3319,  3321,  3323,  3326,  3329,  3338,  3343,  3344,  3346,
    3349,  3351,  3353,  3355,  3357,  3358,  3361,  3366,  3370,  3372,
    3374,  3378,  3383,  3384,  3385,  3386,  3389,  3392,  3394,  3396,
    3397,  3400,  3404,  3405,  3408,  3412,  3413,  3416,  3420,  3424,
    3428,  3431,  3435,  3440,  3444,  3449,  3453,  3458,  3460,  3464,
    3469,  3473,  3477,  3484,  3486,  3492,  3499,  3505,  3513,  3520,
    3529,  3535,  3542,  3547,  3552,  3558,  3562,  3567,  3569,  3573,
    3577,  3581,  3585,  3589,  3593,  3599,  3605,  3609,  3613,  3617,
    3621,  3625,  3629,  3631,  3633,  3635,  3637,  3639,  3641,  3643,
    3645,  3647,  3649,  3651,  3653,  3655,  3657,  3659,  3661,  3663,
    3664,  3667,  3669,  3672,  3674,  3676,  3678,  3681,  3684,  3686,
    3688,  3691,  3694,  3699,  3701,  3705,  3707,  3709,  3711,  3713,
    3715,  3719,  3721,  3723,  3725,  3727,  3731,  3734,  3737,  3740,
    3743,  3747,  3751,  3757,  3764,  3769,  3774,  3782,  3785,  3792,
    3798,  3805,  3812,  3817,  3822,  3828,  3833,  3840,  3843,  3848,
    3853,  3858,  3869,  3876,  3885,  3892,  3897,  3902,  3909,  3914,
    3919,  3924,  3931,  3936,  3944,  3952,  3960,  3967,  3974,  3981,
    3988,  3992,  3997,  4004,  4013,  4016,  4019,  4028,  4037,  4044,
    4051,  4054,  4061,  4068,  4077,  4086,  4093,  4102,  4109,  4112,
    4121,  4130,  4133,  4136,  4139,  4146,  4153,  4158,  4163,  4172,
    4177,  4182,  4187,  4192,  4196,  4205,  4210,  4215,  4222,  4227,
    4232,  4237,  4244,  4253,  4257,  4264,  4269,  4276,  4278,  4285,
    4290,  4295,  4300,  4305,  4310,  4317,  4322,  4323,  4329,  4336,
    4339,  4343,  4344,  4349,  4350,  4354,  4355,  4357,  4359,  4363,
    4368,  4373,  4379,  4384,  4389,  4394,  4400,  4405,  4406,  4407,
    4415,  4420,  4426,  4431,  4437,  4442,  4447,  4452,  4457,  4462,
    4468,  4469,  4478,  4479,  4483,  4487,  4489,  4494,  4495,  4497,
    4498,  4501,  4502,  4503,  4508,  4513,  4516,  4517,  4521,  4524,
    4528,  4531,  4533,  4535,  4538,  4540,  4543,  4545,  4548,  4551,
    4554,  4555,  4559,  4560,  4562,  4564,  4568,  4570,  4574,  4576,
    4580,  4581,  4583,  4584,  4587,  4592,  4598,  4600,  4602,  4604,
    4606,  4611,  4613,  4617,  4621,  4622,  4629,  4630,  4639,  4644,
    4645,  4654,  4655,  4666,  4673,  4674,  4683,  4684,  4695,  4702,
    4704,  4707,  4709,  4711,  4714,  4715,  4717,  4723,  4724,  4730,
    4734,  4740,  4743,  4744,  4745,  4753,  4755,  4756,  4757,  4764,
    4765,  4769,  4770,  4771,  4777,  4778,  4780,  4781,  4783,  4784,
    4787,  4791,  4795,  4797,  4799,  4800,  4808,  4809,  4817,  4819,
    4822,  4823,  4824,  4827,  4828,  4831,  4832,  4834,  4836,  4838,
    4840,  4844,  4846,  4850,  4852,  4854,  4856,  4858,  4860,  4862,
    4864,  4866,  4868,  4870,  4872,  4874,  4876,  4878,  4880,  4882,
    4884,  4886,  4888,  4890,  4892,  4894,  4896,  4898,  4900,  4901,
    4903,  4905,  4906,  4909,  4910,  4912,  4913,  4914,  4918,  4919,
    4920,  4924,  4927,  4928,  4929,  4934,  4939,  4942,  4943,  4945,
    4947,  4951,  4955,  4957,  4960,  4961,  4963,  4964,  4969,  4974,
    4977,  4978,  4980,  4982,  4983,  4985,  4986,  4988,  4991,  4997,
    5002,  5004,  5008,  5012,  5014,  5016,  5018,  5020,  5022,  5024,
    5025,  5028,  5032,  5037,  5039,  5042,  5045,  5047,  5049,  5051,
    5053,  5055,  5057,  5059,  5061,  5063,  5065,  5067,  5069,  5071,
    5073,  5075,  5077,  5079,  5081,  5083,  5085,  5087,  5089,  5091,
    5093,  5095,  5097,  5098,  5099,  5106,  5107,  5109,  5113,  5115,
    5119,  5120,  5123,  5127,  5129,  5132,  5134,  5135,  5139,  5140,
    5141,  5149,  5152,  5154,  5155,  5159,  5160,  5168,  5169,  5177,
    5182,  5189,  5194,  5199,  5204,  5205,  5212,  5217,  5222,  5228,
    5235,  5240,  5242,  5246,  5248,  5251,  5253,  5257,  5259,  5260,
    5263,  5264,  5266,  5267,  5268,  5277,  5278,  5279,  5286,  5287,
    5289,  5291,  5293,  5295,  5297,  5300,  5302,  5304,  5306,  5310,
    5315,  5316,  5320,  5324,  5326,  5329,  5332,  5333,  5337,  5338,
    5344,  5348,  5350,  5354,  5356,  5360,  5362,  5364,  5365,  5367,
    5368,  5373,  5374,  5376,  5380,  5382,  5384,  5386,  5387,  5388,
    5395,  5396,  5397,  5409,  5413,  5415,  5419,  5423,  5425,  5429,
    5430,  5432,  5433,  5438,  5439,  5447,  5448,  5454,  5455,  5462,
    5464,  5468,  5471,  5476,  5477,  5480,  5481,  5484,  5486,  5488,
    5490,  5491,  5496,  5497,  5499,  5500,  5502,  5504,  5508,  5510,
    5512,  5515,  5518,  5521,  5523,  5525,  5527,  5529,  5530,  5534,
    5535,  5539,  5542,  5547,  5552,  5556,  5561,  5566,  5568,  5572,
    5576,  5580,  5584,  5591,  5594,  5597,  5598,  5605,  5606,  5614,
    5620,  5623,  5625,  5627,  5629,  5635,  5641,  5644,  5647,  5649,
    5654,  5658,  5661,  5665,  5668,  5671,  5673,  5677,  5682,  5686,
    5690,  5693,  5697,  5700,  5704,  5706,  5708,  5710,  5712,  5716,
    5720,  5724,  5728,  5732,  5736,  5740,  5744,  5748,  5750,  5752,
    5754,  5756,  5758,  5759,  5761,  5762,  5765,  5766,  5768,  5770,
    5772,  5773,  5776,  5777,  5780,  5781,  5784,  5787,  5788,  5793,
    5794,  5799,  5801,  5803,  5804,  5806,  5808,  5809,  5811,  5813,
    5814,  5819,  5820,  5821,  5827,  5829,  5830,  5835,  5839,  5841,
    5844,  5847,  5850,  5853,  5856,  5860,  5863,  5865,  5867,  5869,
    5871,  5874,  5876,  5878,  5880,  5882,  5884,  5886,  5888,  5889,
    5891,  5892,  5896,  5897,  5901,  5905,  5907,  5908,  5913,  5915,
    5918,  5919,  5921,  5922,  5926,  5930,  5933,  5936,  5937,  5943,
    5944,  5946,  5948,  5949,  5951,  5953,  5955,  5958,  5960,  5963,
    5964,  5965,  5966,  5967,  5990,  5992,  5994,  5995,  5997,  5998,
    6000,  6002,  6003,  6005,  6007,  6008,  6011,  6014,  6016,  6020,
    6025,  6029,  6033,  6034,  6037,  6040,  6042,  6046,  6050,  6051,
    6056,  6057,  6061,  6063,  6065,  6066,  6070,  6073,  6077,  6079,
    6081,  6084,  6085,  6088,  6092,  6094,  6100,  6102,  6104,  6107,
    6110,  6112,  6114,  6116,  6118,  6120,  6122,  6125,  6128,  6130,
    6132,  6134,  6136,  6138,  6140,  6142,  6144,  6146,  6149,  6152,
    6154,  6156,  6158,  6160,  6162,  6165,  6168,  6171,  6173,  6175,
    6179,  6185,  6187,  6189,  6191,  6193,  6195,  6199,  6204,  6210,
    6212,  6218,  6222,  6225,  6227,  6231,  6234,  6237,  6242,  6244,
    6246,  6248,  6250,  6252,  6254,  6256,  6258,  6260,  6262,  6264,
    6266,  6268,  6270,  6274,  6277,  6279,  6281,  6283,  6285,  6287,
    6289,  6291,  6293,  6295,  6297,  6299,  6301,  6303,  6305,  6307,
    6309,  6311,  6313,  6315,  6317,  6319,  6321,  6323,  6325,  6327,
    6329,  6331,  6333,  6335,  6337,  6339,  6341,  6343,  6345,  6347,
    6349,  6351,  6353,  6355,  6357,  6359,  6361,  6363,  6365,  6367,
    6369,  6371,  6373,  6375,  6377,  6379,  6381,  6383,  6385,  6387,
    6389,  6391,  6393,  6395,  6397,  6399,  6401,  6403,  6405,  6407,
    6409,  6411,  6413,  6415,  6417,  6419,  6421,  6423,  6425,  6427,
    6429,  6431,  6433,  6435,  6437,  6439,  6441,  6443,  6445,  6447,
    6449,  6451,  6453,  6455,  6457,  6459,  6461,  6463,  6465,  6467,
    6469,  6471,  6473,  6475,  6477,  6479,  6481,  6483,  6485,  6487,
    6489,  6491,  6493,  6495,  6497,  6499,  6501,  6503,  6505,  6507,
    6509,  6511,  6513,  6515,  6517,  6519,  6521,  6523,  6525,  6527,
    6529,  6531,  6533,  6535,  6537,  6539,  6541,  6543,  6545,  6547,
    6549,  6551,  6553,  6555,  6557,  6559,  6561,  6563,  6565,  6567,
    6569,  6571,  6573,  6575,  6577,  6579,  6581,  6583,  6585,  6587,
    6589,  6591,  6593,  6595,  6597,  6599,  6601,  6603,  6605,  6607,
    6609,  6611,  6613,  6615,  6617,  6619,  6621,  6623,  6625,  6627,
    6629,  6631,  6633,  6635,  6637,  6639,  6641,  6643,  6645,  6647,
    6649,  6651,  6653,  6655,  6657,  6659,  6661,  6663,  6665,  6667,
    6669,  6671,  6673,  6675,  6677,  6679,  6681,  6683,  6685,  6687,
    6689,  6691,  6693,  6695,  6697,  6699,  6701,  6703,  6705,  6707,
    6709,  6711,  6713,  6715,  6717,  6719,  6721,  6723,  6725,  6727,
    6729,  6731,  6733,  6735,  6737,  6739,  6741,  6743,  6745,  6747,
    6749,  6751,  6753,  6755,  6757,  6759,  6761,  6763,  6765,  6767,
    6769,  6771,  6773,  6775,  6777,  6779,  6781,  6783,  6785,  6787,
    6789,  6791,  6793,  6795,  6797,  6799,  6801,  6803,  6805,  6807,
    6809,  6811,  6813,  6815,  6817,  6819,  6821,  6823,  6825,  6827,
    6829,  6831,  6833,  6835,  6837,  6839,  6841,  6843,  6845,  6847,
    6849,  6851,  6853,  6855,  6857,  6859,  6861,  6863,  6865,  6867,
    6869,  6871,  6873,  6875,  6877,  6879,  6881,  6883,  6885,  6887,
    6889,  6891,  6893,  6895,  6897,  6899,  6901,  6903,  6905,  6907,
    6909,  6911,  6913,  6915,  6917,  6919,  6921,  6923,  6925,  6927,
    6929,  6931,  6933,  6935,  6937,  6939,  6941,  6943,  6945,  6947,
    6949,  6951,  6953,  6955,  6957,  6959,  6961,  6963,  6965,  6967,
    6969,  6971,  6973,  6975,  6977,  6979,  6981,  6983,  6985,  6987,
    6989,  6991,  6993,  6995,  6997,  6999,  7001,  7003,  7004,  7008,
    7009,  7013,  7014,  7018,  7019,  7023,  7024,  7028,  7031,  7032,
    7035,  7036,  7039,  7040,  7045,  7046,  7050,  7052,  7054,  7056,
    7058,  7059,  7061,  7063,  7065,  7066,  7069,  7072,  7075,  7079,
    7083,  7088,  7095,  7098,  7102,  7106,  7110,  7116,  7118,  7122,
    7126,  7128,  7130,  7134,  7138,  7140,  7144,  7147,  7150,  7153,
    7156,  7159,  7161,  7163,  7168,  7173,  7175,  7177,  7179,  7181,
    7183,  7184,  7189,  7191,  7193,  7195,  7199,  7203,  7205,  7207,
    7210,  7213,  7216,  7217,  7221,  7226,  7230,  7231,  7239,  7241,
    7244,  7246,  7248,  7250,  7252,  7254,  7256,  7257,  7263,  7265,
    7267,  7269,  7271,  7273,  7277,  7284,  7291,  7298,  7306,  7312,
    7316,  7325,  7334,  7343,  7350,  7351,  7353,  7355,  7358,  7359,
    7361,  7363,  7367,  7368,  7372,  7373,  7377,  7378,  7382,  7383,
    7387,  7389,  7391,  7393,  7395,  7397,  7399,  7401,  7403,  7405,
    7407,  7409,  7412,  7415,  7417,  7421,  7424,  7427,  7430,  7433,
    7436,  7439,  7442,  7445,  7447,  7449,  7452,  7453,  7455,  7459,
    7461,  7464,  7467,  7470,  7472,  7476,  7480,  7482,  7484,  7488,
    7490,  7494,  7496,  7498,  7500,  7502,  7507,  7513,  7518,  7525,
    7527,  7528,  7532,  7536,  7538,  7540,  7541,  7544,  7547,  7550,
    7553,  7554,  7557,  7558,  7562,  7565,  7567,  7570,  7573,  7576,
    7579,  7582,  7583,  7587,  7588,  7590,  7591,  7595,  7598,  7599,
    7601,  7604,  7605,  7607,  7612,  7617,  7623,  7626,  7630,  7631,
    7633,  7634,  7639,  7640,  7642,  7644,  7645,  7647,  7648,  7651,
    7654,  7656,  7657,  7659,  7661,  7664,  7668,  7671,  7672,  7679,
    7683,  7684,  7685,  7686,  7688,  7691,  7693,  7695,  7697,  7699,
    7701,  7703,  7705,  7707,  7709,  7712,  7715,  7719,  7721,  7723,
    7725,  7727,  7729,  7731,  7733,  7735,  7737,  7739,  7741,  7743,
    7745,  7746,  7750,  7752,  7755,  7757,  7760,  7764,  7768,  7772,
    7773,  7777,  7781,  7782,  7790,  7791,  7795,  7797,  7801,  7802,
    7806,  7809,  7814,  7815,  7819,  7824,  7829,  7830,  7831,  7832,
    7849,  7858,  7866,  7867,  7868,  7869,  7870,  7871,  7887,  7888,
    7889,  7890,  7891,  7904,  7909,  7914,  7918,  7923,  7927,  7930,
    7932,  7936,  7942,  7944,  7946,  7947,  7949,  7951,  7952,  7955,
    7956,  7957,  7961,  7962,  7965,  7971,  7975,  7979,  7983
};

/* YYRHS -- A `-1'-separated list of the rules' RHS.  */
static const yytype_int16 yyrhs[] =
{
     656,     0,    -1,   160,    -1,    -1,   659,   657,   651,   658,
      -1,   659,   160,    -1,    -1,   160,    -1,   660,    -1,  1554,
      -1,  1033,    -1,  1101,    -1,  1114,    -1,   714,    -1,   672,
      -1,  1115,    -1,  1093,    -1,  1560,    -1,   681,    -1,   661,
      -1,  1366,    -1,  1398,    -1,  1317,    -1,  1319,    -1,   665,
      -1,  1404,    -1,   750,    -1,  1526,    -1,  1517,    -1,   670,
      -1,  1330,    -1,  1624,    -1,  1626,    -1,  1128,    -1,  1424,
      -1,  1431,    -1,  1509,    -1,  1120,    -1,   958,    -1,   869,
      -1,  1135,    -1,   663,    -1,  1420,    -1,  1563,    -1,  1123,
      -1,  1096,    -1,  1333,    -1,  1414,    -1,   749,    -1,  1524,
      -1,  1561,    -1,  1562,    -1,  1147,    -1,  1482,    -1,   742,
      -1,  1384,    -1,  1429,    -1,  1080,    -1,  1083,    -1,  1377,
      -1,  1625,    -1,  1515,    -1,  1358,    -1,  1430,    -1,  1616,
      -1,   662,   409,  1476,    -1,   126,    -1,   148,    -1,   409,
    1476,   196,   664,    -1,  1473,    -1,   652,  1478,    -1,    -1,
     175,  1476,   666,   667,    -1,    -1,   601,   668,    -1,   668,
     647,   669,    -1,   669,    -1,   652,  1478,    -1,    -1,   217,
     671,  1478,    -1,    -1,    58,   309,   679,   567,   673,   674,
      -1,   675,    -1,   674,   647,   675,    -1,   294,   164,  1473,
      -1,   310,   164,  1473,    -1,   297,   164,  1473,    -1,   298,
     164,  1296,    -1,   292,   164,  1296,    -1,   307,   164,  1296,
      -1,   301,   164,  1473,    -1,   300,   164,  1473,    -1,   302,
     164,  1473,    -1,   303,   164,  1473,    -1,   306,   164,  1473,
      -1,   308,   164,  1296,    -1,   304,   164,  1473,    -1,   305,
     164,  1473,    -1,   312,   164,  1460,    -1,   232,   164,   645,
     676,   646,    -1,   678,    -1,    -1,   677,    -1,   676,   647,
     677,    -1,  1296,    -1,   295,   164,  1473,    -1,   296,   164,
    1298,    -1,   439,   164,  1473,    -1,   440,   164,  1296,    -1,
     311,   164,   109,    -1,   311,   164,   498,    -1,   311,   164,
     362,    -1,    -1,   680,    -1,  1473,    -1,    -1,   103,   920,
     550,   923,  1469,   682,   857,    -1,    -1,    -1,   103,  1010,
     235,   923,  1476,  1014,   372,  1469,   683,   645,  1027,   646,
    1015,   684,  1067,    -1,    -1,    -1,   103,  1011,   235,   923,
    1476,  1013,   372,  1469,   685,   645,  1027,   646,  1016,   686,
    1067,    -1,    -1,    -1,   103,  1012,   235,   923,  1476,  1013,
     372,  1469,   687,   645,  1027,   646,  1017,   688,  1067,    -1,
      -1,   103,   113,   923,  1476,   689,   917,    -1,    -1,   103,
     690,  1582,    -1,   103,   597,   707,  1542,    -1,   103,   283,
     210,   820,    -1,   103,   547,   817,    -1,   103,   691,    -1,
     484,  1478,   193,   116,   626,  1478,   378,   645,   692,   646,
      -1,   693,    -1,   692,   647,   693,    -1,   597,  1473,    -1,
     221,  1473,    -1,   113,  1473,    -1,   388,  1473,    -1,   399,
    1473,    -1,   502,  1473,    -1,   406,  1296,    -1,    -1,  1164,
     171,   923,   708,   695,   372,   473,   696,   701,   698,   703,
     147,   704,    -1,    -1,   172,  1170,  1266,   697,   699,   700,
      -1,    23,  1170,    -1,    -1,   156,    -1,   141,   372,   496,
      -1,   141,    -1,    -1,   522,  1170,    -1,    -1,   159,  1170,
      -1,    -1,   702,    -1,   372,    86,   410,    -1,   372,    86,
     360,   410,    -1,    -1,    82,  1473,    -1,    -1,   705,   706,
      -1,   766,    -1,   768,    -1,   764,    -1,   785,    -1,   803,
      -1,   805,    -1,   800,    -1,   770,    -1,   772,    -1,   773,
      -1,   774,    -1,   775,    -1,   777,    -1,    -1,  1476,   653,
    1476,    -1,  1476,    -1,    -1,   709,   711,    -1,    -1,   710,
     712,    -1,    82,  1473,    -1,   261,   518,    -1,   362,   518,
      -1,    96,   518,    -1,   425,   518,   116,    -1,   337,   518,
     116,    -1,   713,    -1,   711,    -1,   138,    -1,  1176,   138,
      -1,   518,   477,   131,    -1,   518,   477,   248,    -1,    -1,
      51,   708,   715,   716,    -1,    -1,   645,   717,   646,    -1,
      -1,   718,    -1,   718,   647,  1170,    -1,  1170,    -1,    -1,
     720,    -1,   720,   647,   722,    -1,   722,    -1,    -1,  1476,
     721,   981,    -1,    -1,   724,    -1,   724,   647,   725,    -1,
     725,    -1,   726,   721,  1476,   981,    -1,    -1,   249,    -1,
     387,    -1,   240,    -1,    -1,   727,   763,   651,    -1,   763,
     651,    -1,   728,   763,   651,    -1,    -1,   729,   730,   651,
      -1,    -1,   129,   761,   731,   981,   762,    -1,   129,  1476,
      89,   194,   738,    -1,    -1,   129,   735,   213,   194,   732,
     736,   763,    -1,   129,  1476,   110,   194,   733,    -1,    -1,
     734,  1147,    -1,   177,    -1,    98,    -1,   737,    -1,   736,
     647,   737,    -1,   741,    -1,  1296,    -1,   739,    -1,   510,
     740,  1474,    -1,    -1,   606,    -1,   738,    -1,  1476,    -1,
     511,    -1,  1176,   195,    -1,   509,    -1,   493,   743,   745,
      -1,  1476,    -1,   739,    -1,    -1,   743,    -1,    -1,   486,
     746,    -1,   748,   164,   747,    -1,   746,   647,   748,   164,
     747,    -1,  1459,    -1,  1201,    -1,  1465,    -1,    66,    -1,
     534,    -1,    93,    -1,    95,    -1,    94,    -1,    56,    -1,
     474,    -1,   552,    -1,    81,    -1,   111,    -1,   328,    -1,
     345,    -1,   454,   744,   745,    -1,   206,   751,   139,   752,
      -1,    -1,   107,    -1,   753,    -1,    89,   757,   758,    -1,
     754,    -1,   753,   647,   754,    -1,   755,   164,   756,    -1,
    1476,    -1,   652,  1478,    -1,   367,    -1,   470,    -1,   747,
      -1,   759,    -1,   758,   647,   759,    -1,   755,   164,   760,
      -1,    66,    -1,   534,    -1,    93,    -1,    95,    -1,    94,
      -1,    56,    -1,   474,    -1,   552,    -1,    81,    -1,   111,
      -1,   328,    -1,   345,    -1,   459,    -1,  1476,    -1,   761,
     647,  1476,    -1,    -1,   130,  1170,    -1,   766,    -1,   768,
      -1,   764,    -1,   785,    -1,   803,    -1,   805,    -1,   800,
      -1,   770,    -1,   772,    -1,   773,    -1,   774,    -1,   775,
      -1,   777,    -1,    -1,   230,   765,   780,   158,   230,    -1,
      -1,   767,   660,    -1,    -1,   461,   769,  1170,    -1,    -1,
     771,   809,    -1,   267,  1477,    -1,   255,  1477,    -1,   376,
    1476,    -1,    -1,   185,   778,  1476,   246,   776,   779,    -1,
      69,  1476,    -1,    -1,   356,   196,    -1,   196,    -1,  1476,
      -1,   779,   647,  1476,    -1,    -1,    -1,    -1,   781,  1170,
     559,   782,   728,   783,   784,    -1,    -1,   155,   780,    -1,
     154,   728,    -1,   786,    -1,   789,    -1,    -1,    -1,    54,
     787,  1170,   788,   791,   799,   158,    54,    -1,    -1,    54,
     790,   792,   799,   158,    54,    -1,   793,    -1,   791,   793,
      -1,   796,    -1,   792,   796,    -1,    -1,    -1,   619,   794,
    1170,   795,   559,   728,    -1,    -1,    -1,   619,   797,  1170,
     798,   559,   728,    -1,    -1,   154,   728,    -1,    -1,  1477,
     654,   801,   809,   802,    -1,    -1,  1477,    -1,    -1,  1477,
     654,   804,   807,   802,    -1,    -1,   806,   807,    -1,    -1,
      32,   808,   729,   727,   158,    -1,   289,   728,   158,   289,
      -1,    -1,    -1,   621,   810,  1170,   147,   811,   728,   158,
     621,    -1,    -1,   449,   728,   593,   812,  1170,   158,   449,
      -1,    31,    -1,     8,    -1,   242,    -1,   594,    -1,   134,
      -1,   842,   844,    -1,   842,    58,   839,   823,    -1,   842,
       6,   839,   818,   827,    -1,    -1,   600,   283,   210,  1476,
      -1,   842,     6,   839,   830,    -1,   842,   148,   839,   830,
      -1,   843,   822,   833,    -1,   843,   822,   836,    -1,     6,
     840,    -1,     6,   841,    -1,    -1,   824,   825,    -1,   826,
      -1,   825,   826,    -1,   825,   647,   826,    -1,   845,    -1,
     846,    -1,   847,    -1,   828,    -1,   829,    -1,   828,   829,
      -1,   828,   647,   829,    -1,   845,    -1,   846,    -1,   847,
      -1,   848,    -1,   851,    -1,   853,    -1,   855,    -1,   852,
      -1,   831,    -1,   832,    -1,   831,   832,    -1,   831,   647,
     832,    -1,   845,    -1,   846,    -1,   847,    -1,   853,    -1,
     855,    -1,   834,    -1,   835,    -1,   834,   835,    -1,   834,
     647,   835,    -1,   845,    -1,   849,    -1,   850,    -1,   851,
      -1,   853,    -1,   855,    -1,   852,    -1,   837,    -1,   838,
      -1,   837,   838,    -1,   837,   647,   838,    -1,   845,    -1,
     853,    -1,   855,    -1,   115,  1473,    -1,   583,  1473,    -1,
     432,  1473,    -1,  1476,    -1,  1476,    -1,   426,    -1,   428,
      -1,   360,     4,    -1,   238,  1350,   856,    -1,    25,  1350,
     856,    -1,   317,  1350,   856,    -1,   180,  1350,   856,    -1,
     584,  1350,   856,    -1,   433,  1350,   856,    -1,   357,  1350,
    1297,    -1,    82,  1350,  1473,    -1,  1391,   162,  1350,   931,
      -1,    -1,   855,    -1,   616,    -1,   363,    -1,  1297,    -1,
     227,    -1,    -1,   645,   937,   646,   858,   924,   864,   861,
      -1,   924,   864,   861,    -1,    -1,   645,   913,   646,   859,
    1567,    -1,   860,    -1,   272,  1469,    -1,   645,   272,  1469,
     646,    -1,    -1,    -1,  1439,   916,   913,   862,  1564,    -1,
      -1,  1439,   916,   645,   913,   646,   863,  1567,    -1,   865,
      -1,    -1,   866,    -1,    -1,   396,   868,   867,   871,    -1,
      -1,    -1,   396,   870,   871,    -1,    48,   872,   881,   882,
     889,    -1,   874,   259,   645,   875,   646,    -1,    -1,   874,
     215,   873,   879,    -1,   424,   879,    -1,   424,   878,    -1,
     277,   879,    -1,   277,   878,    -1,    -1,   274,    -1,    -1,
     876,    -1,   877,    -1,   876,   647,   877,    -1,  1476,    -1,
      74,   645,   875,   646,    -1,   645,  1164,   887,  1165,   646,
      -1,   645,  1164,   887,  1165,   646,    -1,    -1,   397,  1297,
      -1,    -1,    -1,   538,    48,   874,   215,   880,   883,   888,
      -1,    -1,   538,    48,   874,   259,   645,   885,   646,   884,
     888,    -1,   886,    -1,   885,   647,   886,    -1,  1476,    -1,
    1173,    -1,    -1,   537,  1297,    -1,    -1,   645,   890,   646,
      -1,   891,    -1,   890,   647,   891,    -1,    -1,   396,   892,
     893,   894,   910,   905,    -1,  1476,    -1,    -1,    -1,   605,
     269,   558,   895,   897,    -1,    -1,   605,   249,   896,   898,
      -1,   321,    -1,   900,    -1,   900,    -1,   645,   899,   646,
      -1,   900,    -1,   899,   647,   900,    -1,    -1,    -1,   645,
     901,   903,   902,   646,    -1,   904,    -1,   903,   647,   904,
      -1,   321,    -1,  1173,    -1,    -1,   645,   906,   646,    -1,
     907,    -1,   906,   647,   907,    -1,    -1,   538,   908,   909,
     910,    -1,  1478,    -1,    -1,   911,    -1,   911,   912,    -1,
     912,    -1,   547,  1350,  1478,    -1,  1391,   162,  1350,   931,
      -1,    90,  1350,  1473,    -1,   357,  1350,  1297,    -1,   316,
    1350,  1299,    -1,   334,  1350,  1299,    -1,   116,   140,  1350,
    1473,    -1,   235,   140,  1350,  1473,    -1,    82,  1350,  1473,
      -1,    -1,    -1,   478,   914,  1158,  1162,   915,   935,    -1,
      -1,    19,    -1,    -1,   918,    -1,   919,    -1,   918,   919,
      -1,   930,    -1,   929,    -1,    -1,   921,    -1,   922,    -1,
     922,   921,    -1,   553,    -1,    -1,   230,  1176,   176,    -1,
      -1,   926,    -1,   927,    -1,   927,   925,    -1,   927,    -1,
     927,   926,    -1,   927,   647,   926,    -1,   162,  1350,   931,
      -1,   316,  1350,  1298,    -1,   334,  1350,  1298,    -1,    28,
    1350,  1296,    -1,   399,  1350,  1473,    -1,    82,  1350,  1473,
      -1,    26,  1350,  1298,    -1,   389,  1350,  1296,    -1,   389,
    1350,   130,    -1,   524,  1350,  1296,    -1,   524,  1350,   130,
      -1,   525,  1350,  1296,    -1,   525,  1350,   130,    -1,   526,
    1350,  1296,    -1,   526,  1350,   130,    -1,    63,  1350,  1296,
      -1,   551,  1350,  1296,    -1,   391,  1350,  1302,    -1,   133,
    1350,  1296,    -1,   468,  1350,   933,    -1,    -1,   588,  1350,
     928,   645,  1412,   646,    -1,   929,    -1,   930,    -1,   243,
    1350,   934,    -1,   116,   140,  1350,  1473,    -1,   235,   140,
    1350,  1473,    -1,   547,  1476,    -1,   531,   143,    -1,   531,
     326,    -1,    90,  1350,  1473,    -1,   258,  1350,  1296,    -1,
     570,  1350,  1302,    -1,  1472,  1349,  1473,    -1,  1472,  1349,
    1476,    -1,  1472,  1349,  1299,    -1,  1472,  1349,   130,    -1,
     993,   984,  1350,   986,    -1,   993,    72,  1350,   992,    -1,
    1478,    -1,  1478,    -1,   130,    -1,   188,    -1,   152,    -1,
      87,    -1,   434,    -1,    85,    -1,   390,    -1,   362,    -1,
     187,    -1,   262,    -1,  1289,    -1,  1157,  1161,    -1,   533,
      -1,   429,    -1,   128,    -1,   247,    -1,   938,    -1,   939,
      -1,   938,   647,   939,    -1,   940,    -1,   941,    -1,   950,
     946,    -1,   950,   999,    -1,    -1,  1005,  1030,  1014,   645,
    1027,   646,   942,  1015,    -1,    -1,  1011,  1008,  1030,  1013,
     645,  1027,   646,   943,  1016,    -1,    -1,  1012,  1008,  1030,
    1013,   645,  1027,   646,   944,  1017,    -1,    -1,   948,  1006,
    1029,  1014,   645,  1027,   646,   945,  1015,    -1,   948,   193,
     259,  1030,   645,  1027,   646,   999,    -1,   948,   947,    -1,
      -1,   947,    -1,    64,   645,  1170,   646,    -1,    -1,   949,
      -1,    92,  1029,    -1,    -1,  1468,   951,   952,    -1,   960,
     978,    -1,   960,   953,    19,   645,   959,   646,   954,   955,
      -1,    -1,   202,    14,    -1,    -1,   615,    -1,   400,    -1,
      -1,   956,    -1,   956,   957,    -1,   957,    -1,   589,    -1,
     589,   259,    -1,    82,  1473,    -1,   394,   645,   959,   646,
      -1,  1164,  1170,  1165,    -1,   968,   976,   972,    -1,   969,
     977,   972,    -1,   190,   970,   972,    -1,    40,    -1,    40,
     975,    -1,    45,    -1,    44,    -1,   964,   975,   996,    -1,
     964,   996,    -1,   965,   975,   997,    -1,   965,   997,    -1,
      35,   975,    -1,    35,    -1,   966,   975,   996,    -1,   967,
     975,   997,    -1,   607,   975,    -1,   633,   976,   972,    -1,
     120,    -1,   563,   976,    -1,   560,   976,    -1,   117,   976,
      -1,   564,    -1,    42,   976,    -1,   963,    -1,   322,    -1,
     285,    -1,   288,   607,    -1,   288,   966,   996,    -1,   566,
     996,    -1,   557,   976,   996,    -1,   324,   996,    -1,   286,
     996,    -1,   128,   970,   972,    -1,   368,   970,   972,    -1,
     188,   970,   972,    -1,    -1,   163,   961,   645,  1032,   646,
     996,    -1,    -1,   486,   962,   645,  1032,   646,   996,    -1,
     288,   996,    -1,   482,    -1,   204,    -1,   203,    -1,   404,
      -1,   342,    -1,   276,    -1,   341,    -1,   405,    -1,   343,
      -1,    61,    -1,   351,    -1,   348,    61,    -1,   964,   611,
      -1,   608,    -1,   348,   608,    -1,   369,    -1,   351,   608,
      -1,   348,    61,   611,    -1,   351,   611,    -1,   247,    -1,
     565,    -1,   500,    -1,   323,    -1,    34,    -1,   429,    -1,
     146,    -1,   146,   408,    -1,    -1,   975,    -1,   971,    -1,
     645,   366,   647,   366,   646,    -1,    -1,   973,    -1,   973,
     974,    -1,   974,    -1,   494,    -1,   592,    -1,   634,    -1,
     645,   287,   646,    -1,   645,   579,   646,    -1,   645,   127,
     646,    -1,   645,   366,   646,    -1,    -1,   975,    -1,    -1,
     971,    -1,    -1,   979,    -1,   979,   980,    -1,   980,    -1,
     365,    -1,  1176,   365,    -1,   130,   982,    -1,   372,   594,
     361,  1167,    -1,    26,    -1,   482,   130,   606,    -1,   998,
     259,    -1,   589,    -1,   589,   259,    -1,    82,  1473,    -1,
      72,   990,    -1,  1472,  1349,  1473,    -1,  1472,  1349,  1476,
      -1,  1472,  1349,  1299,    -1,  1472,  1349,   130,    -1,   960,
     991,    -1,   361,  1167,    -1,  1458,    -1,   218,    -1,   219,
      -1,    61,   486,    -1,    60,    -1,  1478,    -1,    35,    -1,
     985,    -1,   130,    -1,    -1,   984,   986,    -1,  1478,    -1,
      35,    -1,   988,    -1,   130,    -1,  1478,    -1,    -1,    72,
     992,    -1,   990,    -1,   130,    -1,    -1,   130,    -1,    21,
      -1,    35,    21,    -1,    21,    35,    -1,   586,    -1,   586,
      35,    -1,    35,   586,    -1,    -1,   994,    -1,   995,    -1,
      49,    -1,   984,   985,   997,    -1,    35,    -1,    35,   984,
     985,    -1,    -1,    35,    -1,    -1,   412,    -1,   435,  1469,
    1000,  1002,  1003,    -1,    -1,   645,  1001,   646,    -1,  1001,
     647,  1476,    -1,  1476,    -1,    -1,   313,   197,    -1,   313,
     395,    -1,   313,   495,    -1,    -1,   372,   594,  1004,    -1,
     372,   134,  1004,    -1,   372,   594,  1004,   372,   134,  1004,
      -1,   372,   134,  1004,   372,   594,  1004,    -1,   457,    -1,
      52,    -1,   486,   365,    -1,   362,     5,    -1,   486,   130,
      -1,  1007,    -1,   412,   259,    -1,   589,  1008,    -1,   259,
      -1,   235,    -1,    -1,  1007,    -1,   257,    -1,   235,    -1,
     234,    -1,    -1,   589,    -1,   198,    -1,   507,    -1,    -1,
    1013,    -1,  1013,  1021,    -1,    -1,  1018,    -1,    -1,  1020,
      -1,    -1,  1019,    -1,  1023,    -1,  1018,  1023,    -1,  1024,
      -1,  1019,  1024,    -1,  1025,    -1,  1020,  1025,    -1,   601,
    1026,    -1,   577,  1026,    -1,   258,  1350,  1296,    -1,    82,
    1473,    -1,  1472,  1349,  1473,    -1,  1472,  1349,  1476,    -1,
    1472,  1349,  1299,    -1,  1472,  1349,   130,    -1,  1022,    -1,
    1021,    -1,  1022,    -1,  1022,    -1,   622,   393,  1472,    -1,
      47,    -1,   471,    -1,   215,    -1,  1027,   647,  1028,  1287,
      -1,  1028,  1287,    -1,  1476,    -1,  1476,   645,   366,   646,
      -1,    -1,  1468,    -1,   923,  1029,    -1,    -1,   653,  1476,
      -1,  1456,    -1,  1032,   647,  1456,    -1,    -1,    -1,    13,
    1034,  1072,   550,  1469,  1035,  1046,    -1,    -1,    13,   113,
    1045,  1036,   918,    -1,    13,   113,  1476,   595,   116,   140,
     347,    -1,    -1,    13,   414,   708,  1037,   709,    -1,    -1,
      13,   199,   708,  1038,   709,    -1,    -1,    13,  1590,  1585,
    1039,  1592,    -1,    -1,    13,  1585,  1040,  1592,    -1,    -1,
      13,  1585,   171,   708,  1041,  1042,  1043,   698,   703,  1044,
      -1,    13,   547,   819,    -1,    13,   283,   210,   821,    -1,
      13,   547,   816,    -1,    13,   547,   815,    -1,    13,   484,
    1478,   378,   645,   692,   646,    -1,    -1,   372,   473,   696,
      -1,   702,    -1,   372,   473,   696,   702,    -1,    -1,   445,
     567,   708,    -1,    -1,   147,   704,    -1,    -1,  1476,    -1,
      -1,   142,   547,    -1,   233,   547,    -1,  1061,   865,    -1,
    1061,  1050,    -1,  1050,    -1,   866,    -1,  1052,    -1,   148,
     396,  1328,  1059,    -1,   430,   396,  1122,  1051,    -1,    -1,
     377,   396,  1122,  1051,  1047,  1122,    -1,    15,   396,  1122,
    1051,    -1,    -1,    64,   396,  1051,  1048,  1117,    -1,    -1,
     447,   396,  1122,  1051,  1049,  1098,    -1,    70,   396,  1122,
    1297,    -1,   575,   396,  1051,    -1,  1055,    -1,   173,   396,
    1060,   622,   550,  1469,   868,    -1,   444,   398,    -1,    12,
      -1,  1059,    -1,    -1,     6,   396,   923,  1122,  1053,  1054,
      -1,    -1,   645,   890,   646,    -1,   397,  1297,    -1,    -1,
     446,   396,  1122,  1056,  1057,    -1,    -1,    -1,  1059,  1058,
     246,   645,   890,   646,    -1,  1060,    -1,  1059,   647,  1060,
      -1,  1476,    -1,  1063,    -1,  1061,   647,  1063,    -1,     6,
    1070,   923,    -1,  1062,   940,  1078,    -1,     6,   941,    -1,
    1062,   645,   937,   646,    -1,    -1,    58,  1070,  1328,  1468,
    1064,   950,  1078,    -1,    -1,    -1,   338,  1070,  1328,  1468,
    1065,   952,  1066,  1078,    -1,   148,  1070,  1328,  1468,  1077,
      -1,   148,   193,   259,  1328,  1468,    -1,   148,   412,   259,
      -1,   148,  1007,  1328,  1468,    -1,   141,   257,    -1,   156,
     257,    -1,    13,  1070,  1468,   486,   130,  1458,    -1,    13,
    1070,  1468,   148,   130,    -1,   445,  1079,  1469,    -1,   100,
     567,   984,   986,   991,    -1,   925,    -1,   192,    -1,  1280,
      -1,  1068,    -1,  1069,    -1,    -1,  1069,    -1,  1068,    -1,
    1069,  1068,    -1,  1068,  1069,    -1,    11,  1350,   130,    -1,
      11,  1350,  1476,    -1,   282,  1350,   130,    -1,   282,  1350,
    1476,    -1,    -1,    80,    -1,    -1,   231,    -1,    -1,  1073,
    1074,    -1,    -1,  1075,    -1,  1075,  1076,    -1,  1076,    -1,
     231,    -1,   375,    -1,    -1,   457,    -1,    52,    -1,    -1,
       8,  1476,    -1,   187,    -1,    -1,   567,    -1,   164,    -1,
      19,    -1,    -1,   523,   496,   679,  1087,  1081,  1091,    -1,
      -1,   523,    12,   497,  1087,  1082,    -1,   530,   496,   679,
    1087,    -1,   530,    12,   497,  1087,    -1,   523,   569,  1084,
      -1,    -1,  1085,    -1,  1086,    -1,  1085,   647,  1086,    -1,
     622,    91,   501,    -1,   427,   374,    -1,   427,   627,    -1,
      -1,  1088,  1089,    -1,  1090,    -1,  1089,   647,  1090,    -1,
      -1,   519,    -1,   441,    -1,    -1,   593,  1092,    -1,   593,
     293,   164,  1473,    -1,   678,    -1,  1092,   647,   678,    -1,
      -1,    63,  1511,  1094,  1323,  1095,    -1,    -1,   423,    -1,
     179,    -1,    -1,   447,  1122,  1511,  1097,  1323,  1098,    -1,
      -1,  1099,    -1,  1100,    -1,  1100,  1099,    -1,   423,    -1,
     179,    -1,   599,    -1,    -1,    15,  1122,  1511,  1102,  1103,
      -1,  1104,    -1,  1103,   647,  1104,    -1,  1324,  1105,    -1,
      -1,   400,   194,  1106,    -1,    12,    -1,    74,  1107,   234,
    1109,    -1,    12,    -1,    -1,   645,  1108,  1111,   646,    -1,
      12,    -1,    -1,   645,  1110,  1112,   646,    -1,    -1,  1476,
      -1,  1111,   647,  1476,    -1,    -1,  1113,    -1,  1112,   647,
    1113,    -1,  1476,    -1,   412,    -1,    36,  1473,    -1,    -1,
      64,  1511,  1116,  1323,  1117,    -1,    -1,  1118,    -1,  1119,
      -1,  1119,  1118,    -1,   423,    -1,   183,    -1,   325,    -1,
     179,    -1,    59,    -1,   194,   595,    -1,    -1,   377,  1122,
    1511,  1121,  1323,    -1,    -1,   364,    -1,   279,    -1,    -1,
     445,  1511,  1124,  1126,    -1,   445,   597,   707,  1125,    -1,
    1479,   567,  1479,    -1,  1125,   647,  1479,   567,  1479,    -1,
    1127,    -1,  1126,   647,  1127,    -1,  1469,   567,  1469,    -1,
      -1,    50,   235,  1129,  1130,   249,  1134,    -1,  1131,    -1,
    1133,    -1,  1132,    -1,  1131,   647,  1132,    -1,  1469,  1143,
      -1,  1469,  1141,  1143,    -1,  1476,    -1,   130,    -1,    -1,
     278,   235,   246,    50,  1136,  1137,    -1,  1140,    -1,  1138,
      -1,  1139,    -1,  1138,   647,  1139,    -1,  1469,  1143,  1146,
      -1,  1469,  1141,  1143,  1146,    -1,    -1,   396,   868,  1142,
     645,  1051,   646,    -1,    -1,  1144,  1145,    -1,    -1,  1007,
     645,  1262,   646,    -1,    -1,   231,   266,    -1,  1148,    -1,
     478,  1151,    -1,   645,  1149,   646,  1567,    -1,   478,  1153,
      -1,   645,  1149,   646,    -1,   478,  1241,    -1,   645,  1150,
     646,    -1,    -1,  1153,  1152,  1564,    -1,    -1,    -1,  1154,
    1158,  1162,  1155,  1156,  1161,    -1,  1283,  1289,    -1,  1312,
      -1,  1157,    -1,  1312,  1157,    -1,  1157,  1312,    -1,   196,
    1221,  1272,  1277,  1274,  1283,  1289,  1303,    -1,   196,   149,
    1272,  1289,    -1,    -1,  1159,    -1,  1159,  1160,    -1,  1160,
      -1,  1581,    -1,   516,    -1,   514,    -1,    -1,   194,   594,
      -1,   282,   249,   488,   336,    -1,  1162,   647,  1163,    -1,
    1163,    -1,   640,    -1,  1164,  1463,  1165,    -1,  1164,  1170,
    1165,  1166,    -1,    -1,    -1,    -1,    19,  1476,    -1,    19,
    1473,    -1,  1476,    -1,  1473,    -1,    -1,   645,   646,    -1,
     645,  1297,   646,    -1,    -1,   645,   646,    -1,   645,  1297,
     646,    -1,    -1,   645,   646,    -1,  1170,  1174,  1170,    -1,
    1170,   631,  1170,    -1,  1170,  1175,  1170,    -1,   360,  1170,
      -1,  1171,   252,   574,    -1,  1171,   252,  1176,   574,    -1,
    1171,   252,   182,    -1,  1171,   252,  1176,   182,    -1,  1171,
     252,   590,    -1,  1171,   252,  1176,   590,    -1,  1171,    -1,
    1171,   252,   365,    -1,  1171,   252,  1176,   365,    -1,  1171,
     165,  1172,    -1,  1171,  1178,  1172,    -1,  1171,  1178,  1179,
     645,  1576,   646,    -1,  1172,    -1,  1173,   249,   645,  1576,
     646,    -1,  1173,  1176,   249,   645,  1576,   646,    -1,  1173,
     249,   645,  1170,   646,    -1,  1173,   249,   645,  1170,   647,
    1214,   646,    -1,  1173,  1176,   249,   645,  1170,   646,    -1,
    1173,  1176,   249,   645,  1170,   647,  1214,   646,    -1,  1173,
      33,  1173,    17,  1172,    -1,  1173,  1176,    33,  1173,    17,
    1172,    -1,  1173,   505,   272,  1173,    -1,  1173,   272,  1184,
    1276,    -1,  1173,  1176,   272,  1184,  1276,    -1,  1173,   436,
    1173,    -1,  1173,  1176,   436,  1173,    -1,  1173,    -1,  1173,
     636,  1173,    -1,  1173,   637,  1173,    -1,  1173,   489,  1173,
      -1,  1173,   490,  1173,    -1,  1173,   639,  1173,    -1,  1173,
     638,  1173,    -1,  1173,   639,   245,  1170,  1266,    -1,  1173,
     638,   245,  1170,  1266,    -1,  1173,   640,  1173,    -1,  1173,
     641,  1173,    -1,  1173,   642,  1173,    -1,  1173,   145,  1173,
      -1,  1173,   339,  1173,    -1,  1173,   643,  1173,    -1,  1184,
      -1,   384,    -1,   381,    -1,    17,    -1,    16,    -1,   360,
      -1,   359,    -1,   648,    -1,   359,    -1,   164,    -1,   200,
      -1,   212,    -1,   264,    -1,   291,    -1,   353,    -1,    12,
      -1,    18,    -1,    -1,    19,  1181,    -1,   247,    -1,   592,
     247,    -1,   146,    -1,   429,    -1,   190,    -1,   128,   970,
      -1,   964,   996,    -1,   965,    -1,   120,    -1,   563,   976,
      -1,   117,   976,    -1,  1170,   647,  1170,  1180,    -1,  1182,
      -1,  1183,   647,  1182,    -1,  1465,    -1,  1185,    -1,  1186,
      -1,  1189,    -1,  1187,    -1,  1184,    72,  1478,    -1,  1459,
      -1,  1457,    -1,  1201,    -1,  1197,    -1,  1184,   383,  1184,
      -1,   639,  1184,    -1,   638,  1184,    -1,   644,  1184,    -1,
    1177,  1184,    -1,   645,  1576,   646,    -1,   645,  1170,   646,
      -1,   645,  1170,   647,  1214,   646,    -1,   469,   645,  1170,
     647,  1214,   646,    -1,   176,   645,  1576,   646,    -1,   649,
    1476,  1170,   650,    -1,   313,  1215,     9,   645,  1173,  1191,
     646,    -1,    35,  1184,    -1,    55,   645,  1170,    19,  1211,
     646,    -1,    54,  1217,  1219,  1218,   158,    -1,   100,   645,
    1170,   647,  1211,   646,    -1,   100,   645,  1170,   601,   985,
     646,    -1,   130,   645,  1465,   646,    -1,   605,   645,  1466,
     646,    -1,   245,  1170,  1266,   639,  1170,    -1,    61,   645,
    1214,   646,    -1,    61,   645,  1214,   601,   985,   646,    -1,
     108,  1169,    -1,   120,   645,  1170,   646,    -1,   125,   645,
    1170,   646,    -1,   226,   645,  1170,   646,    -1,   242,   645,
    1170,   647,  1170,   647,  1170,   647,  1170,   646,    -1,   245,
     645,  1170,   647,  1170,   646,    -1,   245,   645,  1170,   647,
    1170,   647,  1214,   646,    -1,   268,   645,  1170,   647,  1170,
     646,    -1,   333,   645,  1170,   646,    -1,   340,   645,  1170,
     646,    -1,   463,   645,  1170,   647,  1170,   646,    -1,   476,
     645,  1170,   646,    -1,   563,   645,  1170,   646,    -1,   560,
     645,  1170,   646,    -1,   560,   645,  1170,   647,  1170,   646,
      -1,   573,   645,  1170,   646,    -1,   573,   645,   265,  1170,
     196,  1170,   646,    -1,   573,   645,   568,  1170,   196,  1170,
     646,    -1,   573,   645,    46,  1170,   196,  1170,   646,    -1,
     573,   645,   265,   196,  1170,   646,    -1,   573,   645,   568,
     196,  1170,   646,    -1,   573,   645,    46,   196,  1170,   646,
      -1,   573,   645,  1170,   196,  1170,   646,    -1,   597,   645,
     646,    -1,   633,   645,  1170,   646,    -1,     7,   645,  1170,
     647,  1170,   646,    -1,     7,   645,  1170,   647,   245,  1170,
    1266,   646,    -1,   106,  1169,    -1,   112,  1168,    -1,   118,
     645,  1170,   647,   245,  1170,  1266,   646,    -1,   119,   645,
    1170,   647,   245,  1170,  1266,   646,    -1,   181,   645,  1266,
     196,  1170,   646,    -1,   205,   645,  1268,   647,  1170,   646,
      -1,   361,  1168,    -1,   407,   645,  1173,   249,  1170,   646,
      -1,   535,   645,  1170,   647,  1170,   646,    -1,   535,   645,
    1170,   647,   245,  1170,  1266,   646,    -1,   539,   645,  1170,
     647,  1170,   647,  1170,   646,    -1,   539,   645,  1170,   647,
    1170,   646,    -1,   539,   645,  1170,   196,  1170,   194,  1170,
     646,    -1,   539,   645,  1170,   196,  1170,   646,    -1,   545,
    1168,    -1,   561,   645,  1267,   647,  1170,   647,  1170,   646,
      -1,   562,   645,  1267,   647,  1170,   647,  1170,   646,    -1,
     602,  1169,    -1,   604,  1168,    -1,   603,  1168,    -1,    75,
     645,  1170,   647,  1183,   646,    -1,    78,   645,  1170,   647,
    1214,   646,    -1,    76,   645,  1170,   646,    -1,    77,   645,
    1183,   646,    -1,    79,   645,  1170,   647,  1170,    19,  1211,
     646,    -1,    21,   645,  1170,   646,    -1,    60,   645,  1170,
     646,    -1,    70,   645,  1214,   646,    -1,    73,   645,  1170,
     646,    -1,   113,   645,   646,    -1,   230,   645,  1170,   647,
    1170,   647,  1170,   646,    -1,   263,   645,  1214,   646,    -1,
     329,   645,  1170,   646,    -1,   339,   645,  1170,   647,  1170,
     646,    -1,   371,   645,  1170,   646,    -1,   399,   645,  1170,
     646,    -1,   421,   645,  1170,   646,    -1,   449,   645,  1170,
     647,  1170,   646,    -1,   450,   645,  1170,   647,  1170,   647,
    1170,   646,    -1,   470,   645,   646,    -1,   575,   645,  1170,
     647,  1170,   646,    -1,   618,   645,  1170,   646,    -1,   618,
     645,  1170,   647,  1170,   646,    -1,  1188,    -1,    96,   645,
    1170,   647,  1170,   646,    -1,   203,   645,  1214,   646,    -1,
     276,   645,  1214,   646,    -1,   341,   645,  1214,   646,    -1,
     342,   645,  1214,   646,    -1,   343,   645,  1214,   646,    -1,
     404,   645,  1170,   647,  1170,   646,    -1,   405,   645,  1214,
     646,    -1,    -1,  1472,   645,  1190,  1194,   646,    -1,  1476,
     653,  1476,   645,  1213,   646,    -1,  1192,  1193,    -1,   249,
      44,   336,    -1,    -1,   249,   349,   261,   336,    -1,    -1,
     622,   422,   178,    -1,    -1,  1195,    -1,  1196,    -1,  1195,
     647,  1196,    -1,  1164,  1170,  1165,  1166,    -1,    29,   645,
    1209,   646,    -1,    29,   645,   144,  1209,   646,    -1,    38,
     645,  1209,   646,    -1,    39,   645,  1209,   646,    -1,    41,
     645,  1209,   646,    -1,   101,   645,  1271,   640,   646,    -1,
     101,   645,  1209,   646,    -1,    -1,    -1,   101,   645,   144,
    1198,  1214,  1199,   646,    -1,   335,   645,  1209,   646,    -1,
     335,   645,   144,  1209,   646,    -1,   318,   645,  1209,   646,
      -1,   318,   645,   144,  1209,   646,    -1,   529,   645,  1209,
     646,    -1,   610,   645,  1209,   646,    -1,   528,   645,  1209,
     646,    -1,   612,   645,  1209,   646,    -1,   540,   645,  1209,
     646,    -1,   540,   645,   144,  1209,   646,    -1,    -1,   211,
     645,  1204,  1200,  1214,  1206,  1205,   646,    -1,    -1,   652,
    1202,  1203,    -1,  1478,   487,  1170,    -1,  1478,    -1,   652,
    1498,  1478,  1031,    -1,    -1,   144,    -1,    -1,   480,  1456,
      -1,    -1,    -1,   382,    48,  1207,  1208,    -1,  1208,   647,
    1464,  1287,    -1,  1464,  1287,    -1,    -1,  1271,  1210,  1170,
      -1,    35,   976,    -1,    61,   976,   996,    -1,   351,   976,
      -1,   247,    -1,   494,    -1,   494,   247,    -1,   592,    -1,
     592,   247,    -1,   120,    -1,   563,   976,    -1,   117,   976,
      -1,   128,   970,    -1,    -1,   146,  1212,   977,    -1,    -1,
    1214,    -1,  1170,    -1,  1214,   647,  1170,    -1,  1216,    -1,
     645,  1216,   646,    -1,  1465,    -1,  1216,   647,  1465,    -1,
      -1,  1170,    -1,    -1,   154,  1170,    -1,   619,  1170,   559,
    1170,    -1,  1219,   619,  1170,   559,  1170,    -1,  1235,    -1,
    1224,    -1,  1223,    -1,  1220,    -1,   649,  1476,  1220,   650,
      -1,  1222,    -1,  1223,   647,  1222,    -1,  1220,  1232,  1220,
      -1,    -1,  1220,  1232,  1220,   372,  1225,  1170,    -1,    -1,
    1220,  1232,  1220,   601,  1226,   645,  1265,   646,    -1,  1220,
     349,  1231,  1235,    -1,    -1,  1220,   268,  1251,   256,  1220,
     372,  1227,  1170,    -1,    -1,  1220,   268,  1251,   256,  1235,
    1228,   601,   645,  1265,   646,    -1,  1220,   349,   268,  1251,
     256,  1235,    -1,    -1,  1220,   463,  1251,   256,  1220,   372,
    1229,  1170,    -1,    -1,  1220,   463,  1251,   256,  1235,  1230,
     601,   645,  1265,   646,    -1,  1220,   349,   463,  1251,   256,
    1235,    -1,   256,    -1,   239,   256,    -1,   532,    -1,  1231,
      -1,   104,   256,    -1,    -1,  1234,    -1,   396,   645,  1265,
     646,   868,    -1,    -1,  1236,  1469,  1233,  1270,  1260,    -1,
    1250,  1249,  1246,    -1,   645,  1249,  1237,   646,  1270,    -1,
    1244,  1568,    -1,    -1,    -1,  1237,   588,  1572,  1238,  1573,
    1239,  1568,    -1,  1241,    -1,    -1,    -1,  1242,  1579,  1162,
    1243,   935,  1161,    -1,    -1,  1249,  1245,  1223,    -1,    -1,
      -1,  1247,  1158,  1162,  1248,   935,    -1,    -1,   478,    -1,
      -1,   385,    -1,    -1,   194,   256,    -1,   194,   382,    48,
      -1,   194,   210,    48,    -1,   192,    -1,   231,    -1,    -1,
    1253,  1007,  1252,  1255,   645,  1264,   646,    -1,    -1,   600,
    1007,  1252,  1256,   645,  1262,   646,    -1,  1254,    -1,  1257,
    1254,    -1,    -1,    -1,  1259,  1257,    -1,    -1,  1261,  1258,
      -1,    -1,  1264,    -1,  1476,    -1,   412,    -1,  1263,    -1,
    1264,   647,  1263,    -1,  1476,    -1,  1265,   647,  1476,    -1,
    1267,    -1,   121,    -1,   122,    -1,   123,    -1,   124,    -1,
     223,    -1,   224,    -1,   225,    -1,   331,    -1,   332,    -1,
     475,    -1,   632,    -1,   125,    -1,   618,    -1,   226,    -1,
     333,    -1,   340,    -1,   421,    -1,   476,    -1,   329,    -1,
     633,    -1,   120,    -1,   563,    -1,   117,    -1,   560,    -1,
      -1,    19,    -1,   164,    -1,    -1,  1269,  1476,    -1,    -1,
      12,    -1,    -1,    -1,   620,  1273,  1170,    -1,    -1,    -1,
     216,  1275,  1170,    -1,   169,  1184,    -1,    -1,    -1,   210,
      48,  1278,  1279,    -1,  1278,   647,  1464,  1287,    -1,  1464,
    1287,    -1,    -1,   623,    -1,   624,    -1,   382,    48,  1281,
      -1,  1281,   647,  1282,    -1,  1282,    -1,  1466,  1287,    -1,
      -1,  1284,    -1,    -1,   382,    48,  1285,  1286,    -1,  1286,
     647,  1464,  1287,    -1,  1464,  1287,    -1,    -1,    20,    -1,
     135,    -1,    -1,  1290,    -1,    -1,  1290,    -1,   273,  1291,
      -1,   273,  1291,   467,   174,  1293,    -1,   273,   467,   174,
    1293,    -1,  1292,    -1,  1292,   647,  1292,    -1,  1292,   370,
    1292,    -1,  1476,    -1,  1457,    -1,   579,    -1,   287,    -1,
     366,    -1,  1292,    -1,    -1,   273,  1292,    -1,   273,   467,
     174,    -1,   273,  1292,   467,   174,    -1,   366,    -1,   638,
     366,    -1,   638,   287,    -1,   366,    -1,   218,    -1,   287,
      -1,   579,    -1,   127,    -1,   189,    -1,   366,    -1,   218,
      -1,   287,    -1,   579,    -1,  1300,    -1,   366,    -1,   579,
      -1,   287,    -1,   127,    -1,   189,    -1,   366,    -1,   579,
      -1,   218,    -1,   287,    -1,  1300,    -1,  1301,    -1,   127,
      -1,   189,    -1,  1296,    -1,   130,    -1,    -1,    -1,   414,
    1476,  1304,   645,  1305,   646,    -1,    -1,  1306,    -1,  1306,
     647,  1307,    -1,  1307,    -1,  1164,  1170,  1165,    -1,    -1,
    1309,  1310,    -1,  1310,   647,  1311,    -1,  1311,    -1,   652,
    1478,    -1,  1478,    -1,    -1,   246,  1313,  1314,    -1,    -1,
      -1,   386,  1475,  1315,   987,  1316,  1440,  1443,    -1,   150,
    1475,    -1,  1308,    -1,    -1,   147,  1318,  1214,    -1,    -1,
     148,  1329,  1511,  1328,  1320,  1323,  1077,    -1,    -1,   148,
     235,  1328,  1476,   372,  1469,  1321,    -1,   148,   113,  1328,
    1476,    -1,   148,   199,  1328,  1476,   653,  1476,    -1,   148,
     199,  1328,  1476,    -1,   148,   414,  1328,   708,    -1,   148,
     597,   707,  1541,    -1,    -1,   148,   614,  1328,  1322,  1323,
    1077,    -1,   148,   171,  1328,   708,    -1,   148,   572,  1328,
     708,    -1,   148,   547,   842,   853,   854,    -1,   148,   283,
     210,   843,   853,   854,    -1,   148,   484,  1328,  1478,    -1,
    1324,    -1,  1323,   647,  1324,    -1,  1469,    -1,  1469,  1233,
      -1,  1327,    -1,  1326,   647,  1327,    -1,  1470,    -1,    -1,
     230,   176,    -1,    -1,   553,    -1,    -1,    -1,   242,  1331,
    1336,  1071,  1338,  1332,  1340,  1356,    -1,    -1,    -1,   450,
    1334,  1337,  1338,  1335,  1340,    -1,    -1,   290,    -1,   132,
      -1,   220,    -1,  1365,    -1,   132,    -1,   246,  1339,    -1,
    1339,    -1,  1325,    -1,  1343,    -1,   645,   646,  1343,    -1,
     645,  1342,   646,  1343,    -1,    -1,   486,  1341,  1347,    -1,
    1342,   647,  1462,    -1,  1462,    -1,   605,  1346,    -1,   606,
    1346,    -1,    -1,   913,  1344,  1564,    -1,    -1,   645,   913,
     646,  1345,  1567,    -1,  1346,   647,  1351,    -1,  1351,    -1,
    1347,   647,  1348,    -1,  1348,    -1,  1466,  1349,  1355,    -1,
     164,    -1,   487,    -1,    -1,  1349,    -1,    -1,   645,  1352,
    1353,   646,    -1,    -1,  1354,    -1,  1354,   647,  1355,    -1,
    1355,    -1,  1170,    -1,   130,    -1,    -1,    -1,   372,   151,
    1357,   259,   594,  1363,    -1,    -1,    -1,   594,  1359,  1365,
    1071,  1221,   486,  1361,  1360,  1272,  1283,  1294,    -1,  1361,
     647,  1362,    -1,  1362,    -1,  1466,  1349,  1355,    -1,  1363,
     647,  1364,    -1,  1364,    -1,  1466,  1349,  1355,    -1,    -1,
     290,    -1,    -1,   134,  1367,  1375,  1368,    -1,    -1,   196,
    1469,  1233,  1369,  1272,  1283,  1294,    -1,    -1,  1372,  1370,
     196,  1221,  1272,    -1,    -1,   196,  1326,  1371,   601,  1221,
    1272,    -1,  1373,    -1,  1372,   647,  1373,    -1,  1476,  1374,
      -1,  1476,   653,  1476,  1374,    -1,    -1,   653,   640,    -1,
      -1,  1376,  1375,    -1,   423,    -1,   290,    -1,   231,    -1,
      -1,   575,  1379,  1378,  1324,    -1,    -1,   550,    -1,    -1,
    1381,    -1,  1382,    -1,  1381,   647,  1382,    -1,   102,    -1,
     326,    -1,    43,   250,    -1,    97,   544,    -1,   390,   184,
      -1,   251,    -1,   543,    -1,   506,    -1,    12,    -1,    -1,
     194,   422,   366,    -1,    -1,   491,  1385,  1386,    -1,   114,
    1397,    -1,  1393,   546,  1392,  1397,    -1,  1393,   571,  1392,
    1397,    -1,   170,  1392,  1397,    -1,   550,   527,  1392,  1397,
      -1,   376,   546,  1392,  1397,    -1,   402,    -1,   402,   504,
    1473,    -1,   402,   504,  1397,    -1,   162,   932,  1389,    -1,
     162,    12,  1389,    -1,  1393,    74,  1394,  1469,  1392,  1397,
      -1,  1390,   284,    -1,   496,   222,    -1,    -1,    36,   170,
    1395,  1396,  1387,  1288,    -1,    -1,   438,   679,   170,  1395,
    1396,  1388,  1288,    -1,  1009,  1394,  1469,  1392,  1272,    -1,
    1391,   161,    -1,    24,    -1,    99,    -1,   413,    -1,   101,
     645,   640,   646,   617,    -1,   101,   645,   640,   646,   167,
      -1,   617,  1288,    -1,   167,  1288,    -1,   418,    -1,   417,
    1380,  1383,  1288,    -1,  1497,   527,  1397,    -1,  1393,   416,
      -1,  1497,   609,  1397,    -1,   984,  1397,    -1,    73,  1397,
      -1,   209,    -1,   209,   194,  1479,    -1,   103,   113,   923,
    1476,    -1,   103,   550,  1469,    -1,   103,   614,  1469,    -1,
     309,   527,    -1,    12,   497,   527,    -1,   496,   527,    -1,
     496,   680,   527,    -1,    68,    -1,   598,    -1,   549,    -1,
     236,    -1,   103,   414,   708,    -1,   103,   199,   708,    -1,
     103,   572,   708,    -1,   414,   527,  1397,    -1,   199,   527,
    1397,    -1,   414,    71,   708,    -1,   199,    71,   708,    -1,
     103,   171,   708,    -1,  1401,   194,  1170,    -1,   527,    -1,
     344,    -1,   284,    -1,   309,    -1,    35,    -1,    -1,   531,
      -1,    -1,  1394,  1476,    -1,    -1,   197,    -1,   196,    -1,
     249,    -1,    -1,   249,  1473,    -1,    -1,   196,  1298,    -1,
      -1,   272,  1473,    -1,   620,  1170,    -1,    -1,  1401,  1469,
    1399,  1403,    -1,    -1,  1401,  1402,  1400,  1147,    -1,   135,
      -1,   136,    -1,    -1,   179,    -1,   397,    -1,    -1,  1456,
      -1,  1476,    -1,    -1,   191,  1122,  1405,  1406,    -1,    -1,
      -1,  1511,  1407,  1412,  1408,  1409,    -1,  1410,    -1,    -1,
     622,   427,   282,  1413,    -1,  1410,   647,  1411,    -1,  1411,
      -1,   166,   284,    -1,   162,   284,    -1,   201,   284,    -1,
     499,   284,    -1,    35,   284,    -1,   437,   284,   679,    -1,
     422,    50,    -1,   222,    -1,   413,    -1,   284,    -1,   527,
      -1,   496,   679,    -1,    68,    -1,   598,    -1,   549,    -1,
     236,    -1,   309,    -1,   137,    -1,   455,    -1,    -1,  1323,
      -1,    -1,    17,   141,    62,    -1,    -1,   453,  1415,  1416,
      -1,  1416,   647,  1417,    -1,  1417,    -1,    -1,   496,  1418,
     679,  1419,    -1,   309,    -1,   422,    50,    -1,    -1,    12,
      -1,    -1,   420,  1421,  1422,    -1,  1390,   284,  1423,    -1,
     567,  1473,    -1,    31,  1170,    -1,    -1,   260,  1425,  1426,
    1427,  1428,    -1,    -1,   214,    -1,   503,    -1,    -1,    90,
      -1,   422,    -1,  1170,    -1,   597,  1479,    -1,   492,    -1,
     600,  1476,    -1,    -1,    -1,    -1,    -1,   278,  1436,  1432,
    1438,  1437,   237,  1475,  1433,  1439,   246,   550,  1469,  1233,
    1434,   987,  1435,  1446,  1440,  1443,  1447,  1449,  1452,    -1,
     116,    -1,   630,    -1,    -1,   279,    -1,    -1,    88,    -1,
     290,    -1,    -1,   450,    -1,   231,    -1,    -1,    74,  1441,
      -1,  1441,  1442,    -1,  1442,    -1,   555,    48,  1456,    -1,
     380,   157,    48,  1456,    -1,   157,    48,  1456,    -1,   168,
      48,  1456,    -1,    -1,   275,  1444,    -1,  1444,  1445,    -1,
    1445,    -1,   555,    48,  1456,    -1,   521,    48,  1456,    -1,
      -1,   467,   228,    48,  1456,    -1,    -1,   231,   366,  1448,
      -1,   275,    -1,   467,    -1,    -1,   645,  1450,   646,    -1,
     645,   646,    -1,  1450,   647,  1451,    -1,  1451,    -1,  1466,
      -1,   652,  1478,    -1,    -1,   486,  1453,    -1,  1453,   647,
    1454,    -1,  1454,    -1,  1466,  1349,  1164,  1355,  1165,    -1,
     556,    -1,   350,    -1,   582,   556,    -1,  1455,  1474,    -1,
    1474,    -1,   218,    -1,   219,    -1,    37,    -1,   392,    -1,
    1459,    -1,   639,  1460,    -1,   638,  1460,    -1,  1455,    -1,
    1460,    -1,  1461,    -1,   365,    -1,   182,    -1,   574,    -1,
     218,    -1,   219,    -1,    37,    -1,   582,   983,    -1,   582,
      37,    -1,   366,    -1,   287,    -1,   579,    -1,   127,    -1,
     189,    -1,   120,   556,    -1,   563,   556,    -1,   560,   556,
      -1,  1466,    -1,  1463,    -1,  1476,   653,   640,    -1,  1476,
     653,  1476,   653,   640,    -1,  1170,    -1,  1476,    -1,  1467,
      -1,  1476,    -1,  1467,    -1,  1476,   653,  1476,    -1,   653,
    1476,   653,  1476,    -1,  1476,   653,  1476,   653,  1476,    -1,
    1476,    -1,  1476,   653,  1476,   653,  1476,    -1,  1476,   653,
    1476,    -1,   653,  1476,    -1,  1476,    -1,  1476,   653,  1476,
      -1,   653,  1476,    -1,  1476,  1374,    -1,  1476,   653,  1476,
    1374,    -1,  1476,    -1,   227,    -1,   229,    -1,   556,    -1,
     556,    -1,   556,    -1,  1472,    -1,  1480,    -1,  1472,    -1,
    1481,    -1,  1476,    -1,  1473,    -1,   271,    -1,  1478,    -1,
    1478,   652,  1478,    -1,   108,  1169,    -1,  1481,    -1,    21,
      -1,    30,    -1,    32,    -1,    49,    -1,    50,    -1,    60,
      -1,    63,    -1,    62,    -1,    69,    -1,    75,    -1,    76,
      -1,    77,    -1,    78,    -1,    79,    -1,    82,    -1,    84,
      -1,    96,    -1,   126,    -1,   147,    -1,   158,    -1,   174,
      -1,   175,    -1,   191,    -1,   213,    -1,   217,    -1,   221,
      -1,   244,    -1,   261,    -1,   362,    -1,   376,    -1,   379,
      -1,   378,    -1,   388,    -1,   393,    -1,   406,    -1,   409,
      -1,   444,    -1,   447,    -1,   453,    -1,   456,    -1,   464,
      -1,   472,    -1,   477,    -1,   484,    -1,   494,    -1,   502,
      -1,   496,    -1,   497,    -1,   504,    -1,   523,    -1,   530,
      -1,   575,    -1,   586,    -1,   587,    -1,   626,    -1,   629,
      -1,   595,    -1,     5,    -1,     7,    -1,     8,    -1,     9,
      -1,    10,    -1,    11,    -1,    14,    -1,    18,    -1,    23,
      -1,    24,    -1,    26,    -1,    25,    -1,    27,    -1,    28,
      -1,    29,    -1,    36,    -1,    40,    -1,    43,    -1,    45,
      -1,    44,    -1,    47,    -1,    53,    -1,    56,    -1,    57,
      -1,    59,    -1,    65,    -1,    68,    -1,    67,    -1,    66,
      -1,    70,    -1,    71,    -1,    73,    -1,    81,    -1,    74,
      -1,    83,    -1,    85,    -1,    86,    -1,    87,    -1,    88,
      -1,    90,    -1,    91,    -1,    93,    -1,    95,    -1,    94,
      -1,    97,    -1,    99,    -1,   109,    -1,   102,    -1,   105,
      -1,   107,    -1,   111,    -1,   116,    -1,   115,    -1,   117,
      -1,   120,    -1,   125,    -1,   131,    -1,   133,    -1,   137,
      -1,   139,    -1,   140,    -1,   141,    -1,   142,    -1,   143,
      -1,   150,    -1,   151,    -1,   152,    -1,   159,    -1,   163,
      -1,   162,    -1,   161,    -1,   166,    -1,   167,    -1,   169,
      -1,   171,    -1,   170,    -1,   172,    -1,   173,    -1,   178,
      -1,   179,    -1,   180,    -1,   184,    -1,   183,    -1,   195,
      -1,   156,    -1,   197,    -1,   186,    -1,   187,    -1,   188,
      -1,   201,    -1,   202,    -1,   204,    -1,   203,    -1,   205,
      -1,   209,    -1,   207,    -1,   215,    -1,   214,    -1,   222,
      -1,   226,    -1,   228,    -1,   232,    -1,   236,    -1,   248,
      -1,   233,    -1,   234,    -1,   238,    -1,   250,    -1,   251,
      -1,   253,    -1,   254,    -1,   243,    -1,   258,    -1,   263,
      -1,   262,    -1,   266,    -1,   269,    -1,   270,    -1,   276,
      -1,   277,    -1,   279,    -1,   281,    -1,   283,    -1,   284,
      -1,   316,    -1,   309,    -1,   312,    -1,   293,    -1,   294,
      -1,   298,    -1,   295,    -1,   296,    -1,   310,    -1,   311,
      -1,   297,    -1,   299,    -1,   292,    -1,   307,    -1,   301,
      -1,   300,    -1,   302,    -1,   303,    -1,   304,    -1,   305,
      -1,   306,    -1,   314,    -1,   315,    -1,   317,    -1,   319,
      -1,   320,    -1,   325,    -1,   326,    -1,   327,    -1,   328,
      -1,   329,    -1,   330,    -1,   333,    -1,   334,    -1,   338,
      -1,   336,    -1,   340,    -1,   341,    -1,   342,    -1,   343,
      -1,   344,    -1,   345,    -1,   347,    -1,   346,    -1,   348,
      -1,   351,    -1,   352,    -1,   356,    -1,   355,    -1,   363,
      -1,   357,    -1,   358,    -1,   367,    -1,   369,    -1,   370,
      -1,   371,    -1,   373,    -1,   375,    -1,   374,    -1,   389,
      -1,   390,    -1,   395,    -1,   398,    -1,   397,    -1,   399,
      -1,   400,    -1,   401,    -1,   403,    -1,   402,    -1,   404,
      -1,   405,    -1,   410,    -1,   411,    -1,   413,    -1,   415,
      -1,   416,    -1,   417,    -1,   418,    -1,   419,    -1,   421,
      -1,   422,    -1,   423,    -1,   426,    -1,   430,    -1,   431,
      -1,   433,    -1,   432,    -1,   434,    -1,   437,    -1,   438,
      -1,   439,    -1,   440,    -1,   441,    -1,   443,    -1,   446,
      -1,   448,    -1,   451,    -1,   455,    -1,   458,    -1,   459,
      -1,   460,    -1,   465,    -1,   466,    -1,   467,    -1,   470,
      -1,   468,    -1,   469,    -1,   471,    -1,   473,    -1,   474,
      -1,   476,    -1,   482,    -1,   481,    -1,   483,    -1,   495,
      -1,   488,    -1,   492,    -1,   498,    -1,   499,    -1,   501,
      -1,   503,    -1,   505,    -1,   506,    -1,   514,    -1,   513,
      -1,   516,    -1,   519,    -1,   522,    -1,   527,    -1,   531,
      -1,   533,    -1,   534,    -1,   535,    -1,   536,    -1,   538,
      -1,   537,    -1,   541,    -1,   542,    -1,   543,    -1,   544,
      -1,   552,    -1,   549,    -1,   546,    -1,   551,    -1,   547,
      -1,   553,    -1,   554,    -1,   557,    -1,   558,    -1,   569,
      -1,   570,    -1,   571,    -1,   560,    -1,   561,    -1,   562,
      -1,   563,    -1,   576,    -1,   577,    -1,   578,    -1,   199,
      -1,   580,    -1,   581,    -1,   584,    -1,   583,    -1,   590,
      -1,   593,    -1,   597,    -1,   598,    -1,   599,    -1,   609,
      -1,   614,    -1,   615,    -1,   606,    -1,   617,    -1,   616,
      -1,   618,    -1,   625,    -1,   628,    -1,   630,    -1,   633,
      -1,   613,    -1,    -1,   486,  1483,  1484,    -1,    -1,  1500,
    1485,  1490,    -1,    -1,   569,  1486,  1502,    -1,    -1,  1496,
    1487,  1488,    -1,    -1,  1499,  1489,  1490,    -1,   569,  1502,
      -1,    -1,   647,  1491,    -1,    -1,  1492,  1494,    -1,    -1,
    1491,   647,  1493,  1494,    -1,    -1,  1496,  1495,  1499,    -1,
    1500,    -1,   207,    -1,   279,    -1,   483,    -1,    -1,   207,
      -1,   279,    -1,   483,    -1,    -1,   207,   653,    -1,   279,
     653,    -1,   483,   653,    -1,  1501,  1349,  1508,    -1,  1501,
    1349,  1508,    -1,   652,  1478,  1349,  1170,    -1,   652,   652,
    1498,  1501,  1349,  1508,    -1,   984,   989,    -1,   346,  1349,
    1170,    -1,   346,   986,   991,    -1,   399,  1349,  1507,    -1,
     399,   194,  1479,  1349,  1507,    -1,  1476,    -1,  1476,   653,
    1476,    -1,   130,   653,  1476,    -1,  1503,    -1,  1504,    -1,
    1503,   647,  1504,    -1,  1504,   647,  1503,    -1,  1505,    -1,
     253,   270,  1506,    -1,   427,   374,    -1,   427,   627,    -1,
     427,   580,    -1,   427,    83,    -1,   448,   427,    -1,   481,
      -1,   556,    -1,   399,   645,   556,   646,    -1,   371,   645,
     556,   646,    -1,  1170,    -1,   130,    -1,   372,    -1,    12,
      -1,    35,    -1,    -1,   282,  1511,  1510,  1512,    -1,   550,
      -1,   546,    -1,  1513,    -1,  1512,   647,  1513,    -1,  1469,
    1270,  1514,    -1,   427,    -1,   627,    -1,   627,    88,    -1,
     290,   627,    -1,   427,   279,    -1,    -1,   591,  1516,  1511,
      -1,   213,  1469,   376,  1270,    -1,   213,  1471,    69,    -1,
      -1,   213,  1471,   427,  1518,  1519,  1272,  1289,    -1,  1520,
      -1,  1476,  1521,    -1,   187,    -1,   356,    -1,   187,    -1,
     356,    -1,   411,    -1,   262,    -1,    -1,  1523,  1522,   645,
    1354,   646,    -1,   164,    -1,   200,    -1,   264,    -1,   212,
      -1,   291,    -1,   462,   707,  1525,    -1,  1529,   372,  1528,
    1540,   196,  1541,    -1,  1529,   372,   199,  1540,   196,  1541,
      -1,  1529,   372,   414,  1540,   196,  1541,    -1,    12,  1530,
     647,   208,   379,   196,  1541,    -1,   419,   372,  1479,   196,
    1541,    -1,   208,   707,  1527,    -1,  1529,   372,  1528,  1540,
     567,  1542,  1549,  1550,    -1,  1529,   372,   199,  1540,   567,
    1542,  1549,  1550,    -1,  1529,   372,   414,  1540,   567,  1542,
    1549,  1550,    -1,   419,   372,  1479,   567,  1542,  1551,    -1,
      -1,   550,    -1,  1531,    -1,    12,  1530,    -1,    -1,   413,
      -1,  1532,    -1,  1531,   647,  1532,    -1,    -1,   478,  1533,
    1546,    -1,    -1,   242,  1534,  1546,    -1,    -1,   594,  1535,
    1546,    -1,    -1,   435,  1536,  1546,    -1,   134,    -1,   596,
      -1,   235,    -1,    13,    -1,   103,    -1,   148,    -1,   175,
      -1,   443,    -1,   492,    -1,   415,    -1,   186,    -1,   208,
     379,    -1,   491,   114,    -1,   541,    -1,   103,   553,   546,
      -1,   282,   546,    -1,   451,   496,    -1,   451,    67,    -1,
     103,   614,    -1,   491,   614,    -1,   103,   466,    -1,    13,
     466,    -1,   103,   597,    -1,   171,    -1,   572,    -1,   103,
     547,    -1,    -1,    17,    -1,  1539,  1537,  1538,    -1,  1539,
      -1,   536,   556,    -1,   254,   556,    -1,    65,   556,    -1,
     640,    -1,  1476,   653,   640,    -1,   640,   653,   640,    -1,
    1469,    -1,  1479,    -1,  1541,   647,  1479,    -1,  1545,    -1,
    1542,   647,  1545,    -1,   613,    -1,   622,    -1,   601,    -1,
      19,    -1,  1479,   228,    48,   556,    -1,  1479,   228,    48,
     399,   556,    -1,  1479,   228,  1543,  1478,    -1,  1479,   228,
    1543,  1478,  1544,  1473,    -1,  1479,    -1,    -1,   645,  1547,
     646,    -1,  1547,   647,  1548,    -1,  1548,    -1,  1476,    -1,
      -1,   452,  1538,    -1,   452,   520,    -1,   452,   628,    -1,
     452,   358,    -1,    -1,   622,  1552,    -1,    -1,   622,   208,
     379,    -1,  1552,  1553,    -1,  1553,    -1,   208,   379,    -1,
     315,  1296,    -1,   319,  1296,    -1,   314,  1296,    -1,   320,
    1295,    -1,    -1,    32,  1555,  1556,    -1,    -1,   625,    -1,
      -1,    17,   362,    57,    -1,    17,    57,    -1,    -1,   442,
      -1,   362,   442,    -1,    -1,   472,    -1,    84,  1556,  1557,
    1558,    -1,   464,  1556,  1557,  1558,    -1,   464,  1556,   567,
    1559,  1476,    -1,   472,  1476,    -1,   442,   472,  1476,    -1,
      -1,  1565,    -1,    -1,   588,  1572,  1566,  1148,    -1,    -1,
    1565,    -1,  1569,    -1,    -1,  1569,    -1,    -1,  1570,  1571,
      -1,  1284,  1288,    -1,  1290,    -1,    -1,   144,    -1,    12,
      -1,   478,  1240,    -1,   645,  1150,   646,    -1,  1573,  1568,
      -1,    -1,  1574,   588,  1572,  1575,  1573,  1568,    -1,  1577,
    1574,  1578,    -1,    -1,    -1,    -1,  1580,    -1,  1580,  1581,
      -1,  1581,    -1,   532,    -1,   220,    -1,   144,    -1,   517,
      -1,   512,    -1,   513,    -1,   515,    -1,    12,    -1,  1587,
    1583,    -1,  1586,  1584,    -1,  1588,  1585,  1592,    -1,  1592,
      -1,  1600,    -1,  1611,    -1,  1605,    -1,   694,    -1,  1592,
      -1,  1600,    -1,  1611,    -1,  1605,    -1,  1604,    -1,   694,
      -1,  1586,    -1,  1587,    -1,    -1,   131,   164,  1479,    -1,
    1589,    -1,  1589,  1590,    -1,  1590,    -1,   384,   450,    -1,
      11,   164,   581,    -1,    11,   164,   327,    -1,    11,   164,
     554,    -1,    -1,   518,   477,   131,    -1,   518,   477,   248,
      -1,    -1,  1591,   614,  1469,  1593,  1594,    19,  1596,    -1,
      -1,   645,  1595,   646,    -1,  1476,    -1,  1595,   647,  1476,
      -1,    -1,  1597,  1598,  1599,    -1,   478,  1151,    -1,   645,
    1149,   646,  1567,    -1,    -1,   622,    64,   379,    -1,   622,
      53,    64,   379,    -1,   622,   279,    64,   379,    -1,    -1,
      -1,    -1,   572,  1164,   708,   813,   814,   372,  1164,  1601,
    1469,   194,  1164,  1602,   153,   469,  1603,   763,    -1,    10,
    1164,   199,  1476,   460,   936,   504,  1473,    -1,  1164,   199,
    1476,   460,   936,   504,  1473,    -1,    -1,    -1,    -1,    -1,
      -1,  1164,   199,   708,   645,  1606,   719,   646,  1607,   460,
    1608,   981,  1609,   710,  1610,   763,    -1,    -1,    -1,    -1,
      -1,   414,  1164,   708,  1612,   645,  1613,   723,   646,  1614,
     710,  1615,   763,    -1,   629,  1618,  1617,  1619,    -1,   629,
     158,  1617,  1621,    -1,   629,   409,  1617,    -1,   629,    84,
    1617,  1620,    -1,   629,   464,  1617,    -1,   629,   431,    -1,
    1456,    -1,  1456,   647,  1456,    -1,  1456,   647,  1456,   647,
    1296,    -1,    32,    -1,   523,    -1,    -1,   256,    -1,   458,
      -1,    -1,   373,   401,    -1,    -1,    -1,   542,  1622,  1623,
      -1,    -1,   194,   330,    -1,   244,   403,  1476,   504,  1473,
      -1,   244,   504,  1473,    -1,   587,   403,  1476,    -1,   587,
     504,  1473,    -1,   635,    -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,  1921,  1921,  1934,  1933,  1958,  1965,  1967,  1971,  1972,
    1977,  1978,  1979,  1980,  1981,  1982,  1983,  1984,  1985,  1986,
    1987,  1988,  1989,  1990,  1991,  1992,  1993,  1994,  1995,  1996,
    1997,  1998,  1999,  2000,  2001,  2002,  2003,  2004,  2005,  2006,
    2007,  2008,  2009,  2010,  2011,  2012,  2013,  2014,  2015,  2016,
    2017,  2018,  2019,  2020,  2021,  2022,  2023,  2024,  2025,  2026,
    2027,  2028,  2029,  2030,  2031,  2035,  2045,  2046,  2050,  2060,
    2067,  2078,  2077,  2088,  2090,  2094,  2095,  2099,  2112,  2111,
    2131,  2130,  2139,  2140,  2144,  2148,  2152,  2157,  2161,  2165,
    2170,  2174,  2178,  2182,  2186,  2190,  2195,  2199,  2204,  2235,
    2240,  2243,  2245,  2246,  2250,  2256,  2260,  2276,  2280,  2286,
    2296,  2306,  2319,  2324,  2328,  2344,  2343,  2385,  2390,  2384,
    2397,  2402,  2395,  2409,  2414,  2407,  2420,  2419,  2432,  2431,
    2439,  2443,  2447,  2451,  2458,  2471,  2472,  2476,  2480,  2484,
    2488,  2492,  2497,  2501,  2509,  2508,  2540,  2539,  2546,  2553,
    2554,  2560,  2566,  2576,  2582,  2588,  2590,  2597,  2598,  2602,
    2608,  2617,  2618,  2626,  2626,  2684,  2685,  2686,  2687,  2688,
    2689,  2690,  2691,  2692,  2693,  2694,  2695,  2696,  2701,  2715,
    2731,  2750,  2751,  2755,  2756,  2761,  2763,  2765,  2767,  2769,
    2771,  2773,  2779,  2780,  2781,  2785,  2789,  2797,  2796,  2809,
    2811,  2814,  2816,  2820,  2824,  2831,  2833,  2837,  2838,  2843,
    2863,  2891,  2893,  2897,  2898,  2902,  2929,  2930,  2931,  2932,
    2936,  2937,  2941,  2942,  2947,  2950,  2977,  2976,  3041,  3057,
    3056,  3113,  3139,  3139,  3162,  3163,  3168,  3170,  3175,  3197,
    3208,  3212,  3234,  3235,  3239,  3243,  3252,  3258,  3264,  3274,
    3289,  3312,  3318,  3319,  3325,  3328,  3332,  3340,  3360,  3362,
    3380,  3386,  3388,  3390,  3392,  3394,  3396,  3398,  3400,  3402,
    3404,  3406,  3408,  3413,  3429,  3445,  3446,  3451,  3457,  3466,
    3472,  3481,  3489,  3498,  3507,  3509,  3518,  3523,  3529,  3538,
    3546,  3548,  3550,  3552,  3554,  3556,  3558,  3560,  3562,  3564,
    3566,  3568,  3570,  3575,  3593,  3614,  3615,  3619,  3620,  3621,
    3622,  3623,  3624,  3625,  3626,  3627,  3628,  3629,  3630,  3631,
    3636,  3635,  3642,  3642,  3699,  3698,  3727,  3727,  3743,  3796,
    3839,  3860,  3859,  3881,  3900,  3902,  3903,  3907,  3927,  3950,
    3952,  3968,  3950,  3987,  3989,  3990,  3994,  3995,  4000,  4006,
    3999,  4027,  4026,  4042,  4043,  4047,  4048,  4053,  4057,  4052,
    4078,  4082,  4077,  4101,  4111,  4116,  4115,  4150,  4151,  4156,
    4155,  4187,  4187,  4202,  4201,  4238,  4250,  4252,  4249,  4279,
    4278,  4299,  4301,  4306,  4308,  4310,  4327,  4332,  4338,  4345,
    4346,  4354,  4360,  4369,  4375,  4381,  4382,  4386,  4386,  4391,
    4392,  4393,  4397,  4398,  4399,  4403,  4407,  4408,  4409,  4413,
    4414,  4415,  4416,  4417,  4418,  4419,  4420,  4424,  4428,  4429,
    4430,  4434,  4435,  4436,  4437,  4438,  4442,  4446,  4447,  4448,
    4452,  4453,  4454,  4455,  4456,  4457,  4458,  4462,  4466,  4467,
    4468,  4472,  4473,  4474,  4479,  4487,  4495,  4503,  4515,  4527,
    4532,  4537,  4545,  4553,  4561,  4569,  4577,  4585,  4593,  4606,
    4619,  4632,  4634,  4638,  4643,  4656,  4657,  4709,  4708,  4711,
    4717,  4717,  4718,  4732,  4733,  4737,  4739,  4738,  4742,  4741,
    4747,  4784,  4785,  4790,  4789,  4808,  4827,  4826,  4843,  4847,
    4855,  4854,  4857,  4859,  4861,  4863,  4868,  4869,  4874,  4875,
    4879,  4880,  4884,  4903,  4913,  4924,  4933,  4934,  4950,  4952,
    4951,  4956,  4954,  4965,  4966,  4970,  4988,  5004,  5005,  5021,
    5036,  5058,  5059,  5064,  5063,  5087,  5097,  5119,  5118,  5136,
    5135,  5155,  5177,  5181,  5210,  5222,  5223,  5228,  5239,  5227,
    5264,  5265,  5269,  5282,  5303,  5316,  5342,  5343,  5348,  5347,
    5384,  5389,  5390,  5394,  5395,  5399,  5401,  5407,  5413,  5415,
    5417,  5419,  5421,  5423,  5433,  5448,  5432,  5462,  5463,  5467,
    5468,  5472,  5473,  5477,  5478,  5482,  5483,  5487,  5488,  5492,
    5497,  5501,  5508,  5510,  5514,  5515,  5519,  5520,  5521,  5525,
    5530,  5535,  5540,  5545,  5550,  5555,  5560,  5575,  5581,  5596,
    5601,  5616,  5622,  5640,  5645,  5650,  5655,  5660,  5665,  5671,
    5670,  5696,  5697,  5698,  5703,  5708,  5713,  5715,  5717,  5719,
    5725,  5730,  5735,  5741,  5747,  5753,  5762,  5780,  5797,  5820,
    5834,  5835,  5836,  5837,  5838,  5839,  5840,  5844,  5845,  5846,
    5850,  5851,  5855,  5856,  5857,  5858,  5863,  5870,  5871,  5875,
    5876,  5880,  5881,  5889,  5888,  5897,  5895,  5905,  5903,  5913,
    5911,  5919,  5940,  5946,  5948,  5952,  5956,  5957,  5961,  5966,
    5965,  5991,  5992,  6001,  6003,  6008,  6011,  6015,  6022,  6023,
    6027,  6028,  6032,  6038,  6044,  6048,  6064,  6080,  6081,  6082,
    6083,  6088,  6092,  6097,  6102,  6106,  6111,  6116,  6122,  6127,
    6133,  6137,  6142,  6147,  6165,  6167,  6169,  6182,  6184,  6189,
    6194,  6206,  6211,  6216,  6221,  6223,  6225,  6227,  6229,  6231,
    6233,  6235,  6238,  6237,  6242,  6241,  6245,  6247,  6256,  6257,
    6258,  6263,  6264,  6265,  6266,  6267,  6271,  6275,  6276,  6280,
    6281,  6285,  6286,  6287,  6288,  6289,  6293,  6294,  6295,  6296,
    6297,  6301,  6306,  6308,  6314,  6315,  6317,  6322,  6331,  6332,
    6336,  6337,  6341,  6342,  6343,  6347,  6348,  6349,  6350,  6353,
    6354,  6358,  6359,  6363,  6364,  6368,  6369,  6373,  6374,  6375,
    6376,  6383,  6384,  6390,  6396,  6402,  6408,  6409,  6422,  6428,
    6434,  6440,  6449,  6470,  6476,  6481,  6482,  6486,  6487,  6491,
    6499,  6503,  6504,  6508,  6509,  6513,  6522,  6526,  6527,  6531,
    6542,  6543,  6547,  6548,  6552,  6553,  6558,  6559,  6563,  6570,
    6579,  6587,  6598,  6599,  6600,  6601,  6602,  6603,  6608,  6616,
    6617,  6620,  6622,  6626,  6638,  6639,  6643,  6650,  6663,  6664,
    6666,  6668,  6674,  6679,  6685,  6691,  6698,  6708,  6709,  6710,
    6711,  6712,  6716,  6720,  6721,  6725,  6726,  6730,  6731,  6735,
    6736,  6737,  6741,  6742,  6746,  6750,  6763,  6775,  6776,  6780,
    6781,  6785,  6786,  6790,  6791,  6795,  6796,  6800,  6801,  6805,
    6806,  6810,  6811,  6815,  6817,  6818,  6824,  6830,  6836,  6844,
    6845,  6849,  6853,  6854,  6867,  6868,  6869,  6873,  6874,  6878,
    6884,  6898,  6899,  6903,  6915,  6916,  6920,  6921,  6929,  6946,
    6928,  6966,  6965,  6979,  6991,  6990,  7009,  7008,  7027,  7026,
    7045,  7039,  7059,  7058,  7091,  7096,  7101,  7106,  7111,  7121,
    7122,  7123,  7124,  7128,  7129,  7141,  7142,  7146,  7147,  7150,
    7152,  7160,  7168,  7170,  7172,  7173,  7181,  7182,  7186,  7195,
    7193,  7207,  7221,  7220,  7234,  7232,  7246,  7253,  7264,  7265,
    7293,  7300,  7304,  7309,  7308,  7324,  7326,  7331,  7339,  7338,
    7354,  7358,  7357,  7369,  7370,  7374,  7389,  7390,  7394,  7403,
    7407,  7412,  7418,  7417,  7429,  7440,  7428,  7456,  7465,  7474,
    7484,  7493,  7499,  7505,  7514,  7523,  7542,  7563,  7573,  7577,
    7582,  7583,  7586,  7588,  7589,  7590,  7591,  7594,  7599,  7610,
    7615,  7626,  7627,  7631,  7632,  7636,  7636,  7639,  7641,  7645,
    7646,  7650,  7651,  7659,  7660,  7661,  7665,  7666,  7671,  7679,
    7680,  7681,  7682,  7687,  7686,  7696,  7695,  7702,  7709,  7719,
    7736,  7739,  7746,  7750,  7757,  7761,  7765,  7772,  7772,  7778,
    7779,  7783,  7784,  7785,  7789,  7790,  7803,  7810,  7811,  7816,
    7815,  7827,  7828,  7829,  7834,  7833,  7855,  7856,  7860,  7861,
    7865,  7866,  7867,  7872,  7871,  7893,  7894,  7898,  7903,  7904,
    7912,  7914,  7918,  7920,  7919,  7932,  7934,  7933,  7947,  7948,
    7953,  7962,  7963,  7964,  7968,  7974,  7983,  7992,  7991,  8018,
    8019,  8023,  8024,  8028,  8029,  8030,  8031,  8032,  8033,  8038,
    8037,  8059,  8060,  8061,  8066,  8065,  8071,  8078,  8083,  8091,
    8092,  8096,  8110,  8109,  8122,  8123,  8127,  8128,  8132,  8142,
    8152,  8153,  8158,  8157,  8168,  8169,  8173,  8174,  8178,  8188,
    8199,  8198,  8206,  8206,  8215,  8216,  8221,  8222,  8231,  8240,
    8241,  8245,  8250,  8255,  8260,  8265,  8264,  8284,  8292,  8284,
    8299,  8300,  8301,  8302,  8303,  8307,  8314,  8321,  8323,  8334,
    8335,  8339,  8340,  8368,  8398,  8400,  8406,  8416,  8417,  8418,
    8433,  8440,  8466,  8472,  8478,  8479,  8480,  8481,  8482,  8486,
    8487,  8488,  8492,  8493,  8494,  8498,  8499,  8504,  8555,  8562,
    8605,  8611,  8617,  8623,  8629,  8635,  8641,  8647,  8651,  8657,
    8663,  8669,  8675,  8681,  8685,  8691,  8701,  8707,  8715,  8721,
    8731,  8737,  8746,  8756,  8762,  8772,  8778,  8787,  8791,  8797,
    8803,  8809,  8815,  8821,  8827,  8833,  8839,  8845,  8851,  8857,
    8863,  8869,  8875,  8879,  8880,  8884,  8885,  8889,  8890,  8894,
    8895,  8899,  8900,  8901,  8902,  8903,  8904,  8908,  8909,  8914,
    8920,  8924,  8931,  8938,  8945,  8952,  8959,  8964,  8970,  8977,
    8984,  8992,  9003,  9025,  9032,  9040,  9041,  9042,  9043,  9044,
    9045,  9057,  9058,  9059,  9060,  9061,  9067,  9071,  9077,  9083,
    9089,  9095,  9097,  9104,  9111,  9117,  9160,  9169,  9176,  9184,
    9190,  9197,  9203,  9217,  9224,  9240,  9246,  9252,  9260,  9266,
    9272,  9278,  9284,  9299,  9311,  9317,  9323,  9329,  9335,  9341,
    9347,  9353,  9359,  9365,  9371,  9377,  9383,  9389,  9395,  9401,
    9407,  9415,  9436,  9443,  9449,  9456,  9463,  9470,  9477,  9483,
    9489,  9496,  9502,  9509,  9515,  9521,  9527,  9533,  9539,  9557,
    9563,  9569,  9576,  9583,  9591,  9598,  9605,  9612,  9619,  9636,
    9642,  9648,  9654,  9660,  9667,  9673,  9679,  9685,  9691,  9698,
    9711,  9717,  9723,  9729,  9737,  9743,  9755,  9761,  9777,  9783,
    9790,  9797,  9804,  9811,  9818,  9822,  9842,  9841,  9914,  9956,
    9958,  9963,  9964,  9968,  9969,  9973,  9974,  9978,  9985,  9993,
   10019, 10025, 10031, 10037, 10043, 10049, 10058, 10065, 10067, 10064,
   10074, 10085, 10091, 10097, 10103, 10109, 10115, 10121, 10127, 10133,
   10140, 10139, 10159, 10158, 10173, 10183, 10191, 10207, 10208, 10213,
   10218, 10221, 10224, 10223, 10240, 10242, 10248, 10247, 10264, 10266,
   10268, 10270, 10272, 10274, 10276, 10278, 10280, 10282, 10288, 10294,
   10297, 10296, 10302, 10303, 10307, 10314, 10322, 10323, 10327, 10334,
   10342, 10343, 10347, 10348, 10352, 10360, 10371, 10372, 10384, 10395,
   10396, 10402, 10403, 10423, 10427, 10425, 10443, 10441, 10452, 10462,
   10460, 10478, 10477, 10487, 10498, 10496, 10515, 10514, 10525, 10537,
   10538, 10539, 10543, 10544, 10552, 10553, 10557, 10572, 10572, 10587,
   10627, 10703, 10714, 10719, 10711, 10738, 10758, 10766, 10758, 10775,
   10774, 10797, 10814, 10797, 10821, 10825, 10851, 10852, 10857, 10860,
   10861, 10862, 10866, 10867, 10872, 10871, 10877, 10876, 10884, 10885,
   10888, 10890, 10890, 10894, 10894, 10899, 10900, 10904, 10906, 10911,
   10912, 10916, 10927, 10940, 10941, 10942, 10943, 10944, 10945, 10946,
   10947, 10948, 10949, 10950, 10951, 10955, 10956, 10957, 10958, 10959,
   10960, 10961, 10962, 10963, 10967, 10968, 10969, 10970, 10973, 10975,
   10976, 10980, 10981, 10989, 10991, 10995, 10997, 10996, 11010, 11013,
   11012, 11027, 11033, 11048, 11050, 11054, 11056, 11061, 11062, 11082,
   11107, 11111, 11112, 11116, 11129, 11131, 11136, 11135, 11170, 11172,
   11177, 11178, 11179, 11184, 11191, 11195, 11196, 11200, 11204, 11208,
   11215, 11222, 11229, 11239, 11273, 11277, 11283, 11289, 11298, 11306,
   11310, 11317, 11318, 11322, 11323, 11324, 11328, 11329, 11330, 11331,
   11332, 11333, 11337, 11338, 11339, 11340, 11341, 11345, 11346, 11347,
   11348, 11349, 11353, 11354, 11355, 11356, 11357, 11361, 11366, 11367,
   11371, 11372, 11375, 11378, 11377, 11408, 11409, 11413, 11414, 11418,
   11430, 11430, 11440, 11441, 11445, 11464, 11497, 11496, 11509, 11517,
   11508, 11519, 11531, 11543, 11542, 11560, 11559, 11570, 11570, 11586,
   11593, 11616, 11637, 11649, 11654, 11653, 11663, 11669, 11676, 11681,
   11686, 11696, 11697, 11701, 11712, 11725, 11726, 11730, 11742, 11746,
   11754, 11755, 11763, 11771, 11762, 11781, 11788, 11780, 11798, 11806,
   11807, 11815, 11819, 11820, 11831, 11832, 11836, 11845, 11846, 11847,
   11849, 11848, 11859, 11860, 11864, 11865, 11867, 11866, 11870, 11869,
   11875, 11876, 11880, 11881, 11885, 11895, 11896, 11900, 11901, 11906,
   11905, 11919, 11920, 11924, 11929, 11937, 11938, 11946, 11948, 11948,
   11956, 11964, 11955, 11986, 11987, 11991, 11999, 12000, 12004, 12014,
   12015, 12022, 12021, 12037, 12036, 12050, 12049, 12061, 12060, 12074,
   12075, 12079, 12092, 12108, 12109, 12113, 12114, 12118, 12119, 12120,
   12125, 12124, 12146, 12148, 12151, 12153, 12156, 12157, 12160, 12164,
   12168, 12172, 12176, 12180, 12184, 12188, 12192, 12200, 12203, 12213,
   12212, 12228, 12235, 12243, 12251, 12259, 12267, 12275, 12282, 12289,
   12295, 12297, 12299, 12308, 12312, 12317, 12316, 12322, 12321, 12326,
   12335, 12342, 12351, 12360, 12365, 12367, 12369, 12371, 12373, 12375,
   12382, 12390, 12392, 12400, 12407, 12414, 12424, 12431, 12437, 12446,
   12454, 12458, 12463, 12471, 12476, 12483, 12490, 12497, 12504, 12511,
   12518, 12524, 12531, 12538, 12543, 12548, 12553, 12564, 12566, 12568,
   12573, 12574, 12577, 12579, 12583, 12584, 12588, 12589, 12593, 12594,
   12598, 12599, 12603, 12604, 12607, 12609, 12616, 12627, 12626, 12642,
   12641, 12651, 12652, 12656, 12657, 12658, 12662, 12663, 12664, 12679,
   12678, 12691, 12700, 12690, 12702, 12706, 12707, 12721, 12722, 12727,
   12729, 12731, 12733, 12735, 12737, 12748, 12750, 12752, 12754, 12760,
   12762, 12773, 12775, 12777, 12779, 12781, 12783, 12785, 12790, 12791,
   12795, 12796, 12800, 12799, 12809, 12810, 12814, 12814, 12817, 12818,
   12822, 12823, 12828, 12827, 12838, 12842, 12846, 12859, 12858, 12872,
   12873, 12874, 12877, 12878, 12879, 12883, 12888, 12897, 12903, 12915,
   12927, 12937, 12947, 12914, 12955, 12956, 12960, 12961, 12965, 12966,
   12974, 12978, 12979, 12980, 12983, 12985, 12989, 12990, 12994, 12999,
   13006, 13011, 13018, 13020, 13024, 13025, 13029, 13034, 13042, 13043,
   13046, 13048, 13056, 13058, 13062, 13063, 13064, 13068, 13070, 13075,
   13076, 13085, 13086, 13090, 13091, 13095, 13108, 13132, 13144, 13155,
   13174, 13182, 13194, 13202, 13217, 13238, 13239, 13240, 13248, 13249,
   13250, 13251, 13258, 13264, 13270, 13276, 13282, 13288, 13317, 13348,
   13358, 13368, 13374, 13383, 13395, 13401, 13407, 13423, 13424, 13428,
   13437, 13453, 13457, 13504, 13508, 13526, 13530, 13609, 13634, 13665,
   13666, 13682, 13692, 13696, 13702, 13708, 13718, 13724, 13733, 13743,
   13744, 13774, 13790, 13806, 13823, 13824, 13835, 13836, 13847, 13848,
   13849, 13853, 13870, 13892, 13907, 13908, 13909, 13910, 13911, 13912,
   13913, 13914, 13915, 13916, 13917, 13918, 13919, 13920, 13921, 13922,
   13923, 13924, 13925, 13926, 13927, 13928, 13929, 13930, 13931, 13932,
   13933, 13934, 13935, 13936, 13937, 13938, 13939, 13940, 13941, 13942,
   13943, 13944, 13945, 13946, 13947, 13948, 13949, 13950, 13951, 13952,
   13953, 13954, 13955, 13956, 13957, 13958, 13959, 13960, 13961, 13962,
   13963, 13964, 13974, 13975, 13976, 13977, 13978, 13979, 13980, 13981,
   13982, 13983, 13984, 13985, 13986, 13987, 13988, 13989, 13990, 13991,
   13992, 13993, 13994, 13995, 13996, 13997, 13998, 13999, 14000, 14001,
   14002, 14003, 14004, 14005, 14006, 14007, 14008, 14009, 14010, 14011,
   14012, 14013, 14014, 14015, 14016, 14017, 14018, 14019, 14020, 14021,
   14022, 14027, 14028, 14029, 14030, 14031, 14032, 14033, 14034, 14035,
   14036, 14037, 14038, 14039, 14040, 14041, 14042, 14043, 14044, 14045,
   14046, 14047, 14048, 14049, 14050, 14051, 14052, 14053, 14054, 14055,
   14056, 14057, 14058, 14059, 14060, 14061, 14062, 14063, 14064, 14065,
   14066, 14067, 14068, 14069, 14070, 14071, 14072, 14073, 14074, 14075,
   14076, 14077, 14078, 14079, 14080, 14081, 14082, 14083, 14084, 14085,
   14086, 14087, 14088, 14089, 14090, 14091, 14092, 14093, 14094, 14095,
   14096, 14097, 14098, 14099, 14100, 14101, 14102, 14103, 14104, 14105,
   14106, 14107, 14108, 14109, 14110, 14111, 14112, 14113, 14114, 14115,
   14116, 14117, 14118, 14119, 14120, 14121, 14122, 14123, 14124, 14125,
   14126, 14127, 14128, 14129, 14130, 14131, 14132, 14133, 14134, 14135,
   14136, 14137, 14138, 14139, 14140, 14141, 14142, 14143, 14144, 14145,
   14146, 14147, 14148, 14149, 14150, 14151, 14152, 14153, 14154, 14155,
   14156, 14157, 14158, 14159, 14160, 14161, 14162, 14163, 14164, 14165,
   14166, 14167, 14168, 14169, 14170, 14171, 14172, 14173, 14174, 14175,
   14176, 14177, 14178, 14179, 14180, 14181, 14182, 14183, 14184, 14185,
   14186, 14187, 14188, 14189, 14190, 14191, 14192, 14193, 14194, 14195,
   14196, 14197, 14198, 14199, 14200, 14201, 14202, 14203, 14204, 14205,
   14206, 14207, 14208, 14209, 14210, 14211, 14212, 14213, 14214, 14215,
   14216, 14217, 14218, 14219, 14220, 14221, 14222, 14223, 14224, 14225,
   14226, 14227, 14228, 14229, 14230, 14231, 14232, 14233, 14234, 14235,
   14236, 14237, 14238, 14239, 14240, 14241, 14242, 14243, 14244, 14245,
   14246, 14247, 14248, 14249, 14250, 14251, 14252, 14253, 14254, 14255,
   14256, 14257, 14258, 14259, 14260, 14261, 14262, 14263, 14264, 14265,
   14266, 14267, 14268, 14269, 14270, 14271, 14272, 14273, 14274, 14275,
   14276, 14277, 14278, 14279, 14280, 14281, 14282, 14294, 14293, 14312,
   14311, 14318, 14317, 14327, 14326, 14337, 14336, 14342, 14350, 14352,
   14357, 14357, 14366, 14365, 14379, 14378, 14383, 14387, 14388, 14389,
   14393, 14394, 14395, 14396, 14400, 14401, 14402, 14403, 14408, 14433,
   14460, 14471, 14484, 14498, 14513, 14532, 14560, 14573, 14600, 14643,
   14657, 14658, 14659, 14660, 14664, 14682, 14700, 14701, 14705, 14706,
   14707, 14708, 14712, 14713, 14731, 14743, 14744, 14745, 14751, 14757,
   14769, 14768, 14784, 14785, 14789, 14790, 14794, 14809, 14810, 14811,
   14816, 14817, 14822, 14821, 14841, 14853, 14866, 14865, 14899, 14900,
   14904, 14905, 14909, 14910, 14911, 14912, 14914, 14913, 14926, 14927,
   14928, 14929, 14930, 14936, 14941, 14947, 14958, 14969, 14973, 14983,
   14988, 14995, 15007, 15019, 15028, 15030, 15034, 15035, 15042, 15044,
   15048, 15049, 15054, 15053, 15057, 15056, 15060, 15059, 15063, 15062,
   15065, 15066, 15067, 15068, 15069, 15070, 15071, 15072, 15073, 15074,
   15075, 15076, 15077, 15078, 15079, 15080, 15081, 15082, 15083, 15084,
   15085, 15086, 15087, 15088, 15089, 15090, 15094, 15095, 15099, 15100,
   15104, 15114, 15124, 15137, 15152, 15165, 15178, 15190, 15195, 15203,
   15208, 15215, 15215, 15216, 15216, 15219, 15248, 15253, 15259, 15265,
   15271, 15275, 15279, 15280, 15284, 15311, 15313, 15317, 15321, 15325,
   15332, 15333, 15337, 15338, 15342, 15343, 15347, 15348, 15354, 15360,
   15366, 15376, 15375, 15385, 15386, 15391, 15392, 15393, 15398, 15399,
   15400, 15404, 15405, 15409, 15421, 15430, 15440, 15449, 15463, 15464,
   15469, 15468, 15484, 15485, 15486, 15490, 15491, 15495, 15495, 15519,
   15520, 15524, 15525, 15526, 15530, 15534, 15541, 15544, 15542, 15558,
   15565, 15586, 15603, 15605, 15609, 15610, 15614, 15615, 15623, 15624,
   15625, 15626, 15632, 15638, 15648, 15650, 15652, 15657, 15658, 15659,
   15660, 15661, 15665, 15666, 15667, 15668, 15669, 15670, 15680, 15681,
   15686, 15699, 15712, 15714, 15716, 15721, 15726, 15728, 15730, 15736,
   15737, 15739, 15745, 15744, 15762, 15763, 15767, 15772, 15780, 15780,
   15805, 15806, 15811, 15812, 15814, 15816, 15834, 15840, 15845, 15827,
   15907, 15925, 15950, 15982, 15986, 15995, 16018, 15946, 16083, 16107,
   16116, 16124, 16082, 16145, 16149, 16153, 16157, 16161, 16165, 16172,
   16179, 16186, 16196, 16197, 16201, 16202, 16203, 16207, 16208, 16213,
   16215, 16214, 16220, 16221, 16225, 16232, 16242, 16248, 16259
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || YYTOKEN_TABLE
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "ABORT_SYM", "ACCESSIBLE_SYM", "ACTION",
  "ADD", "ADDDATE_SYM", "AFTER_SYM", "AGAINST", "AGGREGATE_SYM",
  "ALGORITHM_SYM", "ALL", "ALTER", "ALWAYS_SYM", "ANALYZE_SYM",
  "AND_AND_SYM", "AND_SYM", "ANY_SYM", "AS", "ASC", "ASCII_SYM",
  "ASENSITIVE_SYM", "AT_SYM", "AUTHORS_SYM", "AUTOEXTEND_SIZE_SYM",
  "AUTO_INC", "AUTO_SYM", "AVG_ROW_LENGTH", "AVG_SYM", "BACKUP_SYM",
  "BEFORE_SYM", "BEGIN_SYM", "BETWEEN_SYM", "BIGINT", "BINARY",
  "BINLOG_SYM", "BIN_NUM", "BIT_AND", "BIT_OR", "BIT_SYM", "BIT_XOR",
  "BLOB_SYM", "BLOCK_SYM", "BOOLEAN_SYM", "BOOL_SYM", "BOTH", "BTREE_SYM",
  "BY", "BYTE_SYM", "CACHE_SYM", "CALL_SYM", "CASCADE", "CASCADED",
  "CASE_SYM", "CAST_SYM", "CATALOG_NAME_SYM", "CHAIN_SYM", "CHANGE",
  "CHANGED", "CHARSET", "CHAR_SYM", "CHECKPOINT_SYM", "CHECKSUM_SYM",
  "CHECK_SYM", "CIPHER_SYM", "CLASS_ORIGIN_SYM", "CLIENT_SYM",
  "CLIENT_STATS_SYM", "CLOSE_SYM", "COALESCE", "CODE_SYM", "COLLATE_SYM",
  "COLLATION_SYM", "COLUMNS", "COLUMN_ADD_SYM", "COLUMN_CHECK_SYM",
  "COLUMN_CREATE_SYM", "COLUMN_DELETE_SYM", "COLUMN_GET_SYM", "COLUMN_SYM",
  "COLUMN_NAME_SYM", "COMMENT_SYM", "COMMITTED_SYM", "COMMIT_SYM",
  "COMPACT_SYM", "COMPLETION_SYM", "COMPRESSED_SYM", "CONCURRENT",
  "CONDITION_SYM", "CONNECTION_SYM", "CONSISTENT_SYM", "CONSTRAINT",
  "CONSTRAINT_CATALOG_SYM", "CONSTRAINT_NAME_SYM", "CONSTRAINT_SCHEMA_SYM",
  "CONTAINS_SYM", "CONTEXT_SYM", "CONTINUE_SYM", "CONTRIBUTORS_SYM",
  "CONVERT_SYM", "COUNT_SYM", "CPU_SYM", "CREATE", "CROSS", "CUBE_SYM",
  "CURDATE", "CURRENT_SYM", "CURRENT_USER", "CURRENT_POS_SYM",
  "CURSOR_SYM", "CURSOR_NAME_SYM", "CURTIME", "DATABASE", "DATABASES",
  "DATAFILE_SYM", "DATA_SYM", "DATETIME", "DATE_ADD_INTERVAL",
  "DATE_SUB_INTERVAL", "DATE_SYM", "DAY_HOUR_SYM", "DAY_MICROSECOND_SYM",
  "DAY_MINUTE_SYM", "DAY_SECOND_SYM", "DAY_SYM", "DEALLOCATE_SYM",
  "DECIMAL_NUM", "DECIMAL_SYM", "DECLARE_SYM", "DEFAULT", "DEFINER_SYM",
  "DELAYED_SYM", "DELAY_KEY_WRITE_SYM", "DELETE_SYM", "DESC", "DESCRIBE",
  "DES_KEY_FILE", "DETERMINISTIC_SYM", "DIAGNOSTICS_SYM", "DIRECTORY_SYM",
  "DISABLE_SYM", "DISCARD", "DISK_SYM", "DISTINCT", "DIV_SYM",
  "DOUBLE_SYM", "DO_SYM", "DROP", "DUAL_SYM", "DUMPFILE", "DUPLICATE_SYM",
  "DYNAMIC_SYM", "EACH_SYM", "ELSE", "ELSEIF_SYM", "ENABLE_SYM",
  "ENCLOSED", "END", "ENDS_SYM", "END_OF_INPUT", "ENGINES_SYM",
  "ENGINE_SYM", "ENUM", "EQ", "EQUAL_SYM", "ERROR_SYM", "ERRORS",
  "ESCAPED", "ESCAPE_SYM", "EVENTS_SYM", "EVENT_SYM", "EVERY_SYM",
  "EXCHANGE_SYM", "EXAMINED_SYM", "EXECUTE_SYM", "EXISTS", "EXIT_SYM",
  "EXPANSION_SYM", "EXTENDED_SYM", "EXTENT_SIZE_SYM", "EXTRACT_SYM",
  "FALSE_SYM", "FAST_SYM", "FAULTS_SYM", "FETCH_SYM", "FILE_SYM",
  "FIRST_SYM", "FIXED_SYM", "FLOAT_NUM", "FLOAT_SYM", "FLUSH_SYM",
  "FORCE_SYM", "FOREIGN", "FOR_SYM", "FOUND_SYM", "FROM", "FULL",
  "FULLTEXT_SYM", "FUNCTION_SYM", "GE", "GENERAL", "GENERATED_SYM",
  "GEOMETRYCOLLECTION", "GEOMETRY_SYM", "GET_FORMAT", "GET_SYM",
  "GLOBAL_SYM", "GRANT", "GRANTS", "GROUP_SYM", "GROUP_CONCAT_SYM",
  "GT_SYM", "HANDLER_SYM", "HARD_SYM", "HASH_SYM", "HAVING", "HELP_SYM",
  "HEX_NUM", "HEX_STRING", "HIGH_PRIORITY", "HOST_SYM", "HOSTS_SYM",
  "HOUR_MICROSECOND_SYM", "HOUR_MINUTE_SYM", "HOUR_SECOND_SYM", "HOUR_SYM",
  "IDENT", "IDENTIFIED_SYM", "IDENT_QUOTED", "IF", "IGNORE_SYM",
  "IGNORE_SERVER_IDS_SYM", "IMPORT", "INDEXES", "INDEX_SYM",
  "INDEX_STATS_SYM", "INFILE", "INITIAL_SIZE_SYM", "INNER_SYM",
  "INOUT_SYM", "INSENSITIVE_SYM", "INSERT", "INSERT_METHOD", "INSTALL_SYM",
  "INTERVAL_SYM", "INTO", "INT_SYM", "INVOKER_SYM", "IN_SYM", "IO_SYM",
  "IPC_SYM", "IS", "ISOLATION", "ISSUER_SYM", "ITERATE_SYM", "JOIN_SYM",
  "KEYS", "KEY_BLOCK_SIZE", "KEY_SYM", "KILL_SYM", "LANGUAGE_SYM",
  "LAST_SYM", "LAST_VALUE", "LE", "LEADING", "LEAVES", "LEAVE_SYM", "LEFT",
  "LESS_SYM", "LEVEL_SYM", "LEX_HOSTNAME", "LIKE", "LIMIT", "LINEAR_SYM",
  "LINES", "LINESTRING", "LIST_SYM", "LOAD", "LOCAL_SYM", "LOCATOR_SYM",
  "LOCKS_SYM", "LOCK_SYM", "LOGFILE_SYM", "LOGS_SYM", "LONGBLOB",
  "LONGTEXT", "LONG_NUM", "LONG_SYM", "LOOP_SYM", "LOW_PRIORITY", "LT",
  "MASTER_CONNECT_RETRY_SYM", "MASTER_GTID_POS_SYM", "MASTER_HOST_SYM",
  "MASTER_LOG_FILE_SYM", "MASTER_LOG_POS_SYM", "MASTER_PASSWORD_SYM",
  "MASTER_PORT_SYM", "MASTER_SERVER_ID_SYM", "MASTER_SSL_CAPATH_SYM",
  "MASTER_SSL_CA_SYM", "MASTER_SSL_CERT_SYM", "MASTER_SSL_CIPHER_SYM",
  "MASTER_SSL_CRL_SYM", "MASTER_SSL_CRLPATH_SYM", "MASTER_SSL_KEY_SYM",
  "MASTER_SSL_SYM", "MASTER_SSL_VERIFY_SERVER_CERT_SYM", "MASTER_SYM",
  "MASTER_USER_SYM", "MASTER_USE_GTID_SYM", "MASTER_HEARTBEAT_PERIOD_SYM",
  "MATCH", "MAX_CONNECTIONS_PER_HOUR", "MAX_QUERIES_PER_HOUR", "MAX_ROWS",
  "MAX_SIZE_SYM", "MAX_SYM", "MAX_UPDATES_PER_HOUR",
  "MAX_USER_CONNECTIONS_SYM", "MAX_VALUE_SYM", "MEDIUMBLOB", "MEDIUMINT",
  "MEDIUMTEXT", "MEDIUM_SYM", "MEMORY_SYM", "MERGE_SYM",
  "MESSAGE_TEXT_SYM", "MICROSECOND_SYM", "MIGRATE_SYM",
  "MINUTE_MICROSECOND_SYM", "MINUTE_SECOND_SYM", "MINUTE_SYM", "MIN_ROWS",
  "MIN_SYM", "MODE_SYM", "MODIFIES_SYM", "MODIFY_SYM", "MOD_SYM",
  "MONTH_SYM", "MULTILINESTRING", "MULTIPOINT", "MULTIPOLYGON",
  "MUTEX_SYM", "MYSQL_ERRNO_SYM", "NAMES_SYM", "NAME_SYM", "NATIONAL_SYM",
  "NATURAL", "NCHAR_STRING", "NCHAR_SYM", "NDBCLUSTER_SYM", "NE", "NEG",
  "NEW_SYM", "NEXT_SYM", "NODEGROUP_SYM", "NONE_SYM", "NOT2_SYM",
  "NOT_SYM", "NOW_SYM", "NO_SYM", "NO_WAIT_SYM", "NO_WRITE_TO_BINLOG",
  "NULL_SYM", "NUM", "NUMBER_SYM", "NUMERIC_SYM", "NVARCHAR_SYM",
  "OFFSET_SYM", "OLD_PASSWORD", "ON", "ONE_SYM", "ONLY_SYM", "ONLINE_SYM",
  "OPEN_SYM", "OPTIMIZE", "OPTIONS_SYM", "OPTION", "OPTIONALLY", "OR2_SYM",
  "ORDER_SYM", "OR_OR_SYM", "OR_SYM", "OUTER", "OUTFILE", "OUT_SYM",
  "OWNER_SYM", "PACK_KEYS_SYM", "PAGE_SYM", "PAGE_CHECKSUM_SYM",
  "PARAM_MARKER", "PARSER_SYM", "PARSE_VCOL_EXPR_SYM", "PARTIAL",
  "PARTITION_SYM", "PARTITIONS_SYM", "PARTITIONING_SYM", "PASSWORD",
  "PERSISTENT_SYM", "PHASE_SYM", "PLUGINS_SYM", "PLUGIN_SYM", "POINT_SYM",
  "POLYGON", "PORT_SYM", "POSITION_SYM", "PRECISION", "PREPARE_SYM",
  "PRESERVE_SYM", "PREV_SYM", "PRIMARY_SYM", "PRIVILEGES", "PROCEDURE_SYM",
  "PROCESS", "PROCESSLIST_SYM", "PROFILE_SYM", "PROFILES_SYM", "PROXY_SYM",
  "PURGE", "QUARTER_SYM", "QUERY_SYM", "QUICK", "RANGE_SYM", "READS_SYM",
  "READ_ONLY_SYM", "READ_SYM", "READ_WRITE_SYM", "REAL", "REBUILD_SYM",
  "RECOVER_SYM", "REDOFILE_SYM", "REDO_BUFFER_SIZE_SYM", "REDUNDANT_SYM",
  "REFERENCES", "REGEXP", "RELAY", "RELAYLOG_SYM", "RELAY_LOG_FILE_SYM",
  "RELAY_LOG_POS_SYM", "RELAY_THREAD", "RELEASE_SYM", "RELOAD",
  "REMOVE_SYM", "RENAME", "REORGANIZE_SYM", "REPAIR", "REPEATABLE_SYM",
  "REPEAT_SYM", "REPLACE", "REPLICATION", "REQUIRE_SYM", "RESET_SYM",
  "RESIGNAL_SYM", "RESOURCES", "RESTORE_SYM", "RESTRICT", "RESUME_SYM",
  "RETURNED_SQLSTATE_SYM", "RETURNS_SYM", "RETURN_SYM", "REVOKE", "RIGHT",
  "ROLLBACK_SYM", "ROLLUP_SYM", "ROUTINE_SYM", "ROWS_SYM",
  "ROW_FORMAT_SYM", "ROW_SYM", "ROW_COUNT_SYM", "RTREE_SYM",
  "SAVEPOINT_SYM", "SCHEDULE_SYM", "SCHEMA_NAME_SYM",
  "SECOND_MICROSECOND_SYM", "SECOND_SYM", "SECURITY_SYM", "SELECT_SYM",
  "SENSITIVE_SYM", "SEPARATOR_SYM", "SERIALIZABLE_SYM", "SERIAL_SYM",
  "SESSION_SYM", "SERVER_SYM", "SERVER_OPTIONS", "SET", "SET_VAR",
  "SHARE_SYM", "SHIFT_LEFT", "SHIFT_RIGHT", "SHOW", "SHUTDOWN",
  "SIGNAL_SYM", "SIGNED_SYM", "SIMPLE_SYM", "SLAVE", "SLAVES",
  "SLAVE_POS_SYM", "SLOW", "SMALLINT", "SNAPSHOT_SYM", "SOCKET_SYM",
  "SOFT_SYM", "SONAME_SYM", "SOUNDS_SYM", "SOURCE_SYM", "SPATIAL_SYM",
  "SPECIFIC_SYM", "SQLEXCEPTION_SYM", "SQLSTATE_SYM", "SQLWARNING_SYM",
  "SQL_BIG_RESULT", "SQL_BUFFER_RESULT", "SQL_CACHE_SYM",
  "SQL_CALC_FOUND_ROWS", "SQL_NO_CACHE_SYM", "SQL_SMALL_RESULT", "SQL_SYM",
  "SQL_THREAD", "SSL_SYM", "STARTING", "STARTS_SYM", "START_SYM",
  "STATS_AUTO_RECALC_SYM", "STATS_PERSISTENT_SYM",
  "STATS_SAMPLE_PAGES_SYM", "STATUS_SYM", "STDDEV_SAMP_SYM", "STD_SYM",
  "STOP_SYM", "STORAGE_SYM", "STRAIGHT_JOIN", "STRING_SYM",
  "SUBCLASS_ORIGIN_SYM", "SUBDATE_SYM", "SUBJECT_SYM", "SUBPARTITIONS_SYM",
  "SUBPARTITION_SYM", "SUBSTRING", "SUM_SYM", "SUPER_SYM", "SUSPEND_SYM",
  "SWAPS_SYM", "SWITCHES_SYM", "SYSDATE", "TABLES", "TABLESPACE",
  "TABLE_REF_PRIORITY", "TABLE_STATS_SYM", "TABLE_SYM",
  "TABLE_CHECKSUM_SYM", "TABLE_NAME_SYM", "TEMPORARY", "TEMPTABLE_SYM",
  "TERMINATED", "TEXT_STRING", "TEXT_SYM", "THAN_SYM", "THEN_SYM",
  "TIMESTAMP", "TIMESTAMP_ADD", "TIMESTAMP_DIFF", "TIME_SYM", "TINYBLOB",
  "TINYINT", "TINYTEXT", "TO_SYM", "TRAILING", "TRANSACTION_SYM",
  "TRANSACTIONAL_SYM", "TRIGGERS_SYM", "TRIGGER_SYM", "TRIM", "TRUE_SYM",
  "TRUNCATE_SYM", "TYPES_SYM", "TYPE_SYM", "UDF_RETURNS_SYM",
  "ULONGLONG_NUM", "UNCOMMITTED_SYM", "UNDEFINED_SYM",
  "UNDERSCORE_CHARSET", "UNDOFILE_SYM", "UNDO_BUFFER_SIZE_SYM", "UNDO_SYM",
  "UNICODE_SYM", "UNINSTALL_SYM", "UNION_SYM", "UNIQUE_SYM", "UNKNOWN_SYM",
  "UNLOCK_SYM", "UNSIGNED", "UNTIL_SYM", "UPDATE_SYM", "UPGRADE_SYM",
  "USAGE", "USER", "USER_STATS_SYM", "USE_FRM", "USE_SYM", "USING",
  "UTC_DATE_SYM", "UTC_TIMESTAMP_SYM", "UTC_TIME_SYM", "VALUES",
  "VALUE_SYM", "VARBINARY", "VARCHAR", "VARIABLES", "VARIANCE_SYM",
  "VARYING", "VAR_SAMP_SYM", "VIA_SYM", "VIEW_SYM", "VIRTUAL_SYM",
  "WAIT_SYM", "WARNINGS", "WEEK_SYM", "WHEN_SYM", "WHERE", "WHILE_SYM",
  "WITH", "WITH_CUBE_SYM", "WITH_ROLLUP_SYM", "WORK_SYM", "WRAPPER_SYM",
  "WRITE_SYM", "X509_SYM", "XA_SYM", "XML_SYM", "XOR", "YEAR_MONTH_SYM",
  "YEAR_SYM", "ZEROFILL", "IMPOSSIBLE_ACTION", "'|'", "'&'", "'-'", "'+'",
  "'*'", "'/'", "'%'", "'^'", "'~'", "'('", "')'", "','", "'!'", "'{'",
  "'}'", "';'", "'@'", "'.'", "':'", "$accept", "query", "$@1",
  "opt_end_of_input", "verb_clause", "statement", "deallocate",
  "deallocate_or_drop", "prepare", "prepare_src", "execute", "$@2",
  "execute_using", "execute_var_list", "execute_var_ident", "help", "$@3",
  "change", "$@4", "master_defs", "master_def", "ignore_server_id_list",
  "ignore_server_id", "master_file_def", "optional_connection_name",
  "connection_name", "create", "$@5", "$@6", "$@7", "$@8", "$@9", "$@10",
  "$@11", "$@12", "$@13", "server_def", "server_options_list",
  "server_option", "event_tail", "$@14", "ev_schedule_time", "$@15",
  "opt_ev_status", "ev_starts", "ev_ends", "opt_ev_on_completion",
  "ev_on_completion", "opt_ev_comment", "ev_sql_stmt", "$@16",
  "ev_sql_stmt_inner", "clear_privileges", "sp_name", "sp_a_chistics",
  "sp_c_chistics", "sp_chistic", "sp_c_chistic", "sp_suid", "call", "$@17",
  "opt_sp_cparam_list", "opt_sp_cparams", "sp_cparams", "sp_fdparam_list",
  "sp_fdparams", "sp_init_param", "sp_fdparam", "sp_pdparam_list",
  "sp_pdparams", "sp_pdparam", "sp_opt_inout", "sp_proc_stmts",
  "sp_proc_stmts1", "sp_decls", "sp_decl", "$@18", "$@19",
  "sp_cursor_stmt", "$@20", "sp_handler_type", "sp_hcond_list",
  "sp_hcond_element", "sp_cond", "sqlstate", "opt_value", "sp_hcond",
  "signal_stmt", "signal_value", "opt_signal_value",
  "opt_set_signal_information", "signal_information_item_list",
  "signal_allowed_expr", "signal_condition_information_item_name",
  "resignal_stmt", "get_diagnostics", "which_area",
  "diagnostics_information", "statement_information",
  "statement_information_item", "simple_target_specification",
  "statement_information_item_name", "condition_number",
  "condition_information", "condition_information_item",
  "condition_information_item_name", "sp_decl_idents", "sp_opt_default",
  "sp_proc_stmt", "sp_proc_stmt_if", "$@21", "sp_proc_stmt_statement",
  "$@22", "sp_proc_stmt_return", "$@23", "sp_proc_stmt_unlabeled", "$@24",
  "sp_proc_stmt_leave", "sp_proc_stmt_iterate", "sp_proc_stmt_open",
  "sp_proc_stmt_fetch", "$@25", "sp_proc_stmt_close", "sp_opt_fetch_noise",
  "sp_fetch_list", "sp_if", "$@26", "$@27", "$@28", "sp_elseifs",
  "case_stmt_specification", "simple_case_stmt", "$@29", "$@30",
  "searched_case_stmt", "$@31", "simple_when_clause_list",
  "searched_when_clause_list", "simple_when_clause", "$@32", "$@33",
  "searched_when_clause", "$@34", "$@35", "else_clause_opt",
  "sp_labeled_control", "$@36", "sp_opt_label", "sp_labeled_block", "$@37",
  "sp_unlabeled_block", "$@38", "sp_block_content", "$@39",
  "sp_unlabeled_control", "$@40", "$@41", "$@42", "trg_action_time",
  "trg_event", "change_tablespace_access", "change_tablespace_info",
  "tablespace_info", "opt_logfile_group_name", "alter_tablespace_info",
  "logfile_group_info", "alter_logfile_group_info", "add_log_file",
  "change_ts_option_list", "$@43", "change_ts_options", "change_ts_option",
  "tablespace_option_list", "tablespace_options", "tablespace_option",
  "alter_tablespace_option_list", "alter_tablespace_options",
  "alter_tablespace_option", "logfile_group_option_list",
  "logfile_group_options", "logfile_group_option",
  "alter_logfile_group_option_list", "alter_logfile_group_options",
  "alter_logfile_group_option", "ts_datafile", "lg_undofile",
  "lg_redofile", "tablespace_name", "logfile_group_name", "ts_access_mode",
  "opt_ts_initial_size", "opt_ts_autoextend_size", "opt_ts_max_size",
  "opt_ts_extent_size", "opt_ts_undo_buffer_size",
  "opt_ts_redo_buffer_size", "opt_ts_nodegroup", "opt_ts_comment",
  "opt_ts_engine", "opt_ts_wait", "ts_wait", "size_number", "create_body",
  "$@44", "$@45", "create_like", "opt_create_select", "$@46", "$@47",
  "opt_create_partitioning", "opt_partitioning", "partitioning", "$@48",
  "have_partitioning", "partition_entry", "$@49", "partition",
  "part_type_def", "$@50", "opt_linear", "part_field_list",
  "part_field_item_list", "part_field_item", "part_column_list",
  "part_func", "sub_part_func", "opt_num_parts", "opt_sub_part", "$@51",
  "$@52", "sub_part_field_list", "sub_part_field_item", "part_func_expr",
  "opt_num_subparts", "part_defs", "part_def_list", "part_definition",
  "$@53", "part_name", "opt_part_values", "$@54", "$@55", "part_func_max",
  "part_values_in", "part_value_list", "part_value_item", "$@56", "$@57",
  "part_value_item_list", "part_value_expr_item", "opt_sub_partition",
  "sub_part_list", "sub_part_definition", "$@58", "sub_name",
  "opt_part_options", "opt_part_option_list", "opt_part_option",
  "create_select", "$@59", "$@60", "opt_as", "opt_create_database_options",
  "create_database_options", "create_database_option", "opt_table_options",
  "table_options", "table_option", "opt_if_not_exists",
  "opt_create_table_options", "create_table_options_space_separated",
  "create_table_options", "create_table_option", "$@61", "default_charset",
  "default_collation", "storage_engines", "known_storage_engines",
  "row_types", "merge_insert_types", "opt_select_from", "udf_type",
  "create_field_list", "field_list", "field_list_item", "column_def",
  "key_def", "$@62", "$@63", "$@64", "$@65", "opt_check_constraint",
  "check_constraint", "opt_constraint", "constraint", "field_spec", "$@66",
  "field_def", "opt_generated_always", "vcol_opt_specifier",
  "vcol_opt_attribute", "vcol_opt_attribute_list", "vcol_attribute",
  "parse_vcol_expr", "virtual_column_func", "type", "$@67", "$@68",
  "spatial_type", "char", "nchar", "varchar", "nvarchar", "int_type",
  "real_type", "float_options", "precision", "field_options",
  "field_opt_list", "field_option", "field_length", "opt_field_length",
  "opt_precision", "opt_attribute", "opt_attribute_list", "attribute",
  "type_with_opt_collate", "now_or_signed_literal", "hex_num_or_string",
  "charset", "charset_name", "charset_name_or_default",
  "opt_load_data_charset", "old_or_new_charset_name",
  "old_or_new_charset_name_or_default", "collation_name", "opt_collate",
  "collation_name_or_default", "opt_default", "ascii", "unicode",
  "opt_binary", "opt_bin_mod", "opt_primary", "references", "opt_ref_list",
  "ref_list", "opt_match_clause", "opt_on_update_delete", "delete_option",
  "normal_key_type", "constraint_key_type", "key_or_index",
  "opt_key_or_index", "keys_or_index", "opt_unique", "fulltext", "spatial",
  "init_key_options", "key_alg", "normal_key_options",
  "fulltext_key_options", "spatial_key_options", "normal_key_opts",
  "spatial_key_opts", "fulltext_key_opts", "key_using_alg", "all_key_opt",
  "normal_key_opt", "spatial_key_opt", "fulltext_key_opt",
  "btree_or_rtree", "key_list", "key_part", "opt_ident",
  "opt_if_not_exists_ident", "opt_component", "string_list", "alter",
  "$@69", "$@70", "$@71", "$@72", "$@73", "$@74", "$@75", "$@76",
  "ev_alter_on_schedule_completion", "opt_ev_rename_to", "opt_ev_sql_stmt",
  "ident_or_empty", "alter_commands", "$@77", "$@78", "$@79",
  "remove_partitioning", "all_or_alt_part_name_list", "add_partition_rule",
  "$@80", "add_part_extra", "reorg_partition_rule", "$@81",
  "reorg_parts_rule", "$@82", "alt_part_name_list", "alt_part_name_item",
  "alter_list", "add_column", "alter_list_item", "$@83", "$@84", "$@85",
  "opt_index_lock_algorithm", "alter_algorithm_option",
  "alter_lock_option", "opt_column", "opt_ignore", "alter_options", "$@86",
  "alter_options_part2", "alter_option_list", "alter_option",
  "opt_restrict", "opt_place", "opt_to", "slave", "$@87", "$@88", "start",
  "opt_start_transaction_option_list", "start_transaction_option_list",
  "start_transaction_option", "slave_thread_opts", "$@89",
  "slave_thread_opt_list", "slave_thread_opt", "slave_until",
  "slave_until_opts", "checksum", "$@90", "opt_checksum_type", "repair",
  "$@91", "opt_mi_repair_type", "mi_repair_types", "mi_repair_type",
  "analyze", "$@92", "analyze_table_list", "analyze_table_elem_spec",
  "opt_persistent_stat_clause", "persistent_stat_spec",
  "persistent_column_stat_spec", "$@93", "persistent_index_stat_spec",
  "$@94", "table_column_list", "table_index_list", "table_index_name",
  "binlog_base64_event", "check", "$@95", "opt_mi_check_type",
  "mi_check_types", "mi_check_type", "optimize", "$@96",
  "opt_no_write_to_binlog", "rename", "$@97", "rename_list",
  "table_to_table_list", "table_to_table", "keycache", "$@98",
  "keycache_list_or_parts", "keycache_list", "assign_to_keycache",
  "assign_to_keycache_parts", "key_cache_name", "preload", "$@99",
  "preload_list_or_parts", "preload_list", "preload_keys",
  "preload_keys_parts", "adm_partition", "$@100", "cache_keys_spec",
  "$@101", "cache_key_list_or_empty", "opt_ignore_leaves", "select",
  "select_init", "select_paren", "select_paren_derived", "select_init2",
  "$@102", "select_part2", "$@103", "$@104", "select_into", "select_from",
  "select_options", "select_option_list", "select_option",
  "select_lock_type", "select_item_list", "select_item", "remember_name",
  "remember_end", "select_alias", "opt_default_time_precision",
  "opt_time_precision", "optional_braces", "expr", "bool_pri", "predicate",
  "bit_expr", "or", "and", "not", "not2", "comp_op", "all_or_any",
  "opt_dyncol_type", "dyncol_type", "dyncall_create_element",
  "dyncall_create_list", "simple_expr", "function_call_keyword",
  "function_call_nonkeyword", "function_call_conflict",
  "geometry_function", "function_call_generic", "@105", "fulltext_options",
  "opt_natural_language_mode", "opt_query_expansion", "opt_udf_expr_list",
  "udf_expr_list", "udf_expr", "sum_expr", "$@106", "$@107", "$@108",
  "variable", "$@109", "variable_aux", "opt_distinct",
  "opt_gconcat_separator", "opt_gorder_clause", "$@110", "gorder_list",
  "in_sum_expr", "$@111", "cast_type", "$@112", "opt_expr_list",
  "expr_list", "ident_list_arg", "ident_list", "opt_expr", "opt_else",
  "when_list", "table_ref", "join_table_list", "esc_table_ref",
  "derived_table_list", "join_table", "$@113", "$@114", "$@115", "$@116",
  "$@117", "$@118", "inner_join", "normal_join", "opt_use_partition",
  "use_partition", "table_factor", "$@119", "select_derived_union",
  "$@120", "$@121", "select_init2_derived", "select_part2_derived",
  "$@122", "$@123", "select_derived", "$@124", "select_derived2", "$@125",
  "$@126", "get_select_lex", "select_derived_init", "opt_outer",
  "index_hint_clause", "index_hint_type", "index_hint_definition", "$@127",
  "$@128", "index_hints_list", "opt_index_hints_list", "$@129",
  "opt_key_definition", "$@130", "opt_key_usage_list", "key_usage_element",
  "key_usage_list", "using_list", "interval", "interval_time_stamp",
  "date_time_type", "table_alias", "opt_table_alias", "opt_all",
  "where_clause", "$@131", "having_clause", "$@132", "opt_escape",
  "group_clause", "group_list", "olap_opt", "alter_order_clause",
  "alter_order_list", "alter_order_item", "opt_order_clause",
  "order_clause", "$@133", "order_list", "order_dir",
  "opt_limit_clause_init", "opt_limit_clause", "limit_clause",
  "limit_options", "limit_option", "limit_rows_option",
  "delete_limit_clause", "int_num", "ulong_num", "real_ulong_num",
  "ulonglong_num", "real_ulonglong_num", "dec_num_error", "dec_num",
  "choice", "procedure_clause", "$@134", "procedure_list",
  "procedure_list2", "procedure_item", "select_var_list_init", "$@135",
  "select_var_list", "select_var_ident", "into", "$@136",
  "into_destination", "$@137", "$@138", "do", "$@139", "drop", "$@140",
  "$@141", "$@142", "table_list", "table_name",
  "table_name_with_opt_use_partition", "table_alias_ref_list",
  "table_alias_ref", "opt_if_exists", "opt_temporary", "insert", "$@143",
  "$@144", "replace", "$@145", "$@146", "insert_lock_option",
  "replace_lock_option", "insert2", "insert_table", "insert_field_spec",
  "$@147", "fields", "insert_values", "$@148", "$@149", "values_list",
  "ident_eq_list", "ident_eq_value", "equal", "opt_equal", "no_braces",
  "$@150", "opt_values", "values", "expr_or_default", "opt_insert_update",
  "$@151", "update", "$@152", "$@153", "update_list", "update_elem",
  "insert_update_list", "insert_update_elem", "opt_low_priority", "delete",
  "$@154", "single_multi", "$@155", "$@156", "$@157", "table_wild_list",
  "table_wild_one", "opt_wild", "opt_delete_options", "opt_delete_option",
  "truncate", "$@158", "opt_table_sym", "opt_profile_defs", "profile_defs",
  "profile_def", "opt_profile_args", "show", "$@159", "show_param",
  "$@160", "$@161", "show_engine_param", "master_or_binary", "opt_storage",
  "opt_db", "opt_full", "from_or_in", "binlog_in", "binlog_from",
  "wild_and_where", "describe", "$@162", "$@163", "describe_command",
  "opt_extended_describe", "opt_describe_column", "flush", "$@164",
  "flush_options", "$@165", "$@166", "opt_with_read_lock",
  "flush_options_list", "flush_option", "opt_table_list",
  "optional_flush_tables_arguments", "reset", "$@167", "reset_options",
  "reset_option", "$@168", "slave_reset_options", "purge", "$@169",
  "purge_options", "purge_option", "kill", "$@170", "kill_type",
  "kill_option", "kill_expr", "shutdown", "use", "load", "$@171", "$@172",
  "$@173", "$@174", "data_or_xml", "opt_local", "load_data_lock",
  "opt_duplicate", "opt_field_term", "field_term_list", "field_term",
  "opt_line_term", "line_term_list", "line_term",
  "opt_xml_rows_identified_by", "opt_ignore_lines", "lines_or_rows",
  "opt_field_or_var_spec", "fields_or_vars", "field_or_var",
  "opt_load_data_set_spec", "load_data_set_list", "load_data_set_elem",
  "text_literal", "text_string", "param_marker", "signed_literal",
  "literal", "NUM_literal", "temporal_literal", "insert_ident",
  "table_wild", "order_ident", "simple_ident", "simple_ident_nospvar",
  "simple_ident_q", "field_ident", "table_ident", "table_ident_opt_wild",
  "table_ident_nodb", "IDENT_sys", "TEXT_STRING_sys",
  "TEXT_STRING_literal", "TEXT_STRING_filesystem", "ident", "label_ident",
  "ident_or_text", "user", "keyword", "keyword_sp", "set", "$@175",
  "start_option_value_list", "$@176", "$@177", "$@178",
  "start_option_value_list_following_option_type", "$@179",
  "option_value_list_continued", "option_value_list", "$@180", "$@181",
  "option_value", "$@182", "option_type", "opt_var_type",
  "opt_var_ident_type", "option_value_following_option_type",
  "option_value_no_option_type", "internal_variable_name",
  "transaction_characteristics", "transaction_access_mode",
  "isolation_level", "transaction_access_mode_types", "isolation_types",
  "text_or_password", "set_expr_or_default", "lock", "$@183",
  "table_or_tables", "table_lock_list", "table_lock", "lock_option",
  "unlock", "$@184", "handler", "$@185", "handler_read_or_scan",
  "handler_scan_function", "handler_rkey_function", "$@186",
  "handler_rkey_mode", "revoke", "revoke_command", "grant",
  "grant_command", "opt_table", "grant_privileges", "opt_privileges",
  "object_privilege_list", "object_privilege", "$@187", "$@188", "$@189",
  "$@190", "opt_and", "require_list", "require_list_element",
  "grant_ident", "user_list", "grant_list", "via_or_with", "using_or_as",
  "grant_user", "opt_column_list", "column_list", "column_list_id",
  "require_clause", "grant_options", "opt_grant_option",
  "grant_option_list", "grant_option", "begin", "$@191", "opt_work",
  "opt_chain", "opt_release", "opt_savepoint", "commit", "rollback",
  "savepoint", "release", "union_clause", "union_list", "$@192",
  "union_opt", "opt_union_order_or_limit", "union_order_or_limit", "$@193",
  "order_or_limit", "union_option", "query_specification",
  "query_expression_body", "$@194", "subselect", "subselect_start",
  "subselect_end", "opt_query_expression_options",
  "query_expression_option_list", "query_expression_option",
  "view_or_trigger_or_sp_or_event", "definer_tail", "no_definer_tail",
  "definer_opt", "no_definer", "definer", "view_replace_or_algorithm",
  "view_replace", "view_algorithm", "view_suid", "view_tail", "$@195",
  "view_list_opt", "view_list", "view_select", "$@196", "view_select_aux",
  "view_check_option", "trigger_tail", "$@197", "$@198", "$@199",
  "udf_tail", "sf_tail", "$@200", "$@201", "$@202", "$@203", "$@204",
  "sp_tail", "$@205", "$@206", "$@207", "$@208", "xa", "xid",
  "begin_or_start", "opt_join_or_resume", "opt_one_phase", "opt_suspend",
  "$@209", "opt_migrate", "install", "uninstall", "keep_gcc_happy", 0
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,   636,   637,   638,   639,   640,   641,   642,   643,   644,
     645,   646,   647,   648,   649,   650,   651,   652,   653,   654,
     655,   656,   657,   658,   659,   660,   661,   662,   663,   664,
     665,   666,   667,   668,   669,   670,   671,   672,   673,   674,
     675,   676,   677,   678,   679,   680,   681,   682,   683,   684,
     685,   686,   687,   688,   689,   690,   691,   692,   693,   694,
     695,   696,   697,   698,   699,   700,   701,   702,   703,   704,
     705,   706,   707,   708,   709,   710,   711,   712,   713,   714,
     715,   716,   717,   718,   719,   720,   721,   722,   723,   724,
     725,   726,   727,   728,   729,   730,   731,   732,   733,   734,
     735,   736,   737,   738,   739,   740,   741,   742,   743,   744,
     745,   746,   747,   748,   749,   750,   751,   752,   753,   754,
     755,   756,   757,   758,   759,   760,   761,   762,   763,   764,
     765,   766,   767,   768,   769,   770,   771,   772,   773,   774,
     775,   776,   777,   778,   779,   780,   781,   782,   783,   784,
     785,   786,   787,   788,   789,   790,   791,   792,   793,   794,
     795,   796,   797,   798,   799,   800,   801,   802,   803,   804,
     805,   806,   807,   808,   809,   810,   811,   812,   813,   814,
     815,   816,   817,   818,   819,   820,   821,   822,   823,   824,
     825,   826,   827,   828,   829,   830,   831,   832,   833,   834,
     835,   836,   837,   838,   839,   840,   841,   842,   843,   844,
     845,   846,   847,   848,   849,   850,   851,   852,   853,   854,
     855,   856,   857,   858,   859,   860,   861,   862,   863,   864,
     865,   866,   867,   868,   869,   870,   871,   872,   873,   874,
     875,   876,   877,   878,   879,   880,   881,   882,   883,   884,
     885,   886,   887,   888,   889,   890,   124,    38,    45,    43,
      42,    47,    37,    94,   126,    40,    41,    44,    33,   123,
     125,    59,    64,    46,    58
};
# endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint16 yyr1[] =
{
       0,   655,   656,   657,   656,   656,   658,   658,   659,   659,
     660,   660,   660,   660,   660,   660,   660,   660,   660,   660,
     660,   660,   660,   660,   660,   660,   660,   660,   660,   660,
     660,   660,   660,   660,   660,   660,   660,   660,   660,   660,
     660,   660,   660,   660,   660,   660,   660,   660,   660,   660,
     660,   660,   660,   660,   660,   660,   660,   660,   660,   660,
     660,   660,   660,   660,   660,   661,   662,   662,   663,   664,
     664,   666,   665,   667,   667,   668,   668,   669,   671,   670,
     673,   672,   674,   674,   675,   675,   675,   675,   675,   675,
     675,   675,   675,   675,   675,   675,   675,   675,   675,   675,
     675,   676,   676,   676,   677,   678,   678,   678,   678,   678,
     678,   678,   679,   679,   680,   682,   681,   683,   684,   681,
     685,   686,   681,   687,   688,   681,   689,   681,   690,   681,
     681,   681,   681,   681,   691,   692,   692,   693,   693,   693,
     693,   693,   693,   693,   695,   694,   697,   696,   696,   698,
     698,   698,   698,   699,   699,   700,   700,   701,   701,   702,
     702,   703,   703,   705,   704,   706,   706,   706,   706,   706,
     706,   706,   706,   706,   706,   706,   706,   706,   707,   708,
     708,   709,   709,   710,   710,   711,   711,   711,   711,   711,
     711,   711,   712,   712,   712,   713,   713,   715,   714,   716,
     716,   717,   717,   718,   718,   719,   719,   720,   720,   721,
     722,   723,   723,   724,   724,   725,   726,   726,   726,   726,
     727,   727,   728,   728,   729,   729,   731,   730,   730,   732,
     730,   730,   734,   733,   735,   735,   736,   736,   737,   738,
     738,   739,   740,   740,   741,   741,   741,   741,   741,   742,
     743,   743,   744,   744,   745,   745,   746,   746,   747,   747,
     747,   748,   748,   748,   748,   748,   748,   748,   748,   748,
     748,   748,   748,   749,   750,   751,   751,   752,   752,   753,
     753,   754,   755,   755,   756,   756,   757,   758,   758,   759,
     760,   760,   760,   760,   760,   760,   760,   760,   760,   760,
     760,   760,   760,   761,   761,   762,   762,   763,   763,   763,
     763,   763,   763,   763,   763,   763,   763,   763,   763,   763,
     765,   764,   767,   766,   769,   768,   771,   770,   772,   773,
     774,   776,   775,   777,   778,   778,   778,   779,   779,   781,
     782,   783,   780,   784,   784,   784,   785,   785,   787,   788,
     786,   790,   789,   791,   791,   792,   792,   794,   795,   793,
     797,   798,   796,   799,   799,   801,   800,   802,   802,   804,
     803,   806,   805,   808,   807,   809,   810,   811,   809,   812,
     809,   813,   813,   814,   814,   814,   815,   816,   817,   818,
     818,   819,   819,   820,   821,   822,   822,   824,   823,   825,
     825,   825,   826,   826,   826,   827,   828,   828,   828,   829,
     829,   829,   829,   829,   829,   829,   829,   830,   831,   831,
     831,   832,   832,   832,   832,   832,   833,   834,   834,   834,
     835,   835,   835,   835,   835,   835,   835,   836,   837,   837,
     837,   838,   838,   838,   839,   840,   841,   842,   843,   844,
     844,   844,   845,   846,   847,   848,   849,   850,   851,   852,
     853,   854,   854,   855,   855,   856,   856,   858,   857,   857,
     859,   857,   857,   860,   860,   861,   862,   861,   863,   861,
     864,   865,   865,   867,   866,   868,   870,   869,   871,   872,
     873,   872,   872,   872,   872,   872,   874,   874,   875,   875,
     876,   876,   877,   878,   879,   880,   881,   881,   882,   883,
     882,   884,   882,   885,   885,   886,   887,   888,   888,   889,
     889,   890,   890,   892,   891,   893,   894,   895,   894,   896,
     894,   897,   897,   898,   898,   899,   899,   901,   902,   900,
     903,   903,   904,   904,   905,   905,   906,   906,   908,   907,
     909,   910,   910,   911,   911,   912,   912,   912,   912,   912,
     912,   912,   912,   912,   914,   915,   913,   916,   916,   917,
     917,   918,   918,   919,   919,   920,   920,   921,   921,   922,
     923,   923,   924,   924,   925,   925,   926,   926,   926,   927,
     927,   927,   927,   927,   927,   927,   927,   927,   927,   927,
     927,   927,   927,   927,   927,   927,   927,   927,   927,   928,
     927,   927,   927,   927,   927,   927,   927,   927,   927,   927,
     927,   927,   927,   927,   927,   927,   929,   930,   931,   932,
     933,   933,   933,   933,   933,   933,   933,   934,   934,   934,
     935,   935,   936,   936,   936,   936,   937,   938,   938,   939,
     939,   940,   940,   942,   941,   943,   941,   944,   941,   945,
     941,   941,   941,   946,   946,   947,   948,   948,   949,   951,
     950,   952,   952,   953,   953,   954,   954,   954,   955,   955,
     956,   956,   957,   957,   957,   958,   959,   960,   960,   960,
     960,   960,   960,   960,   960,   960,   960,   960,   960,   960,
     960,   960,   960,   960,   960,   960,   960,   960,   960,   960,
     960,   960,   960,   960,   960,   960,   960,   960,   960,   960,
     960,   960,   961,   960,   962,   960,   960,   960,   963,   963,
     963,   963,   963,   963,   963,   963,   964,   965,   965,   966,
     966,   967,   967,   967,   967,   967,   968,   968,   968,   968,
     968,   969,   969,   969,   970,   970,   970,   971,   972,   972,
     973,   973,   974,   974,   974,   975,   975,   975,   975,   976,
     976,   977,   977,   978,   978,   979,   979,   980,   980,   980,
     980,   980,   980,   980,   980,   980,   980,   980,   980,   980,
     980,   980,   981,   982,   982,   983,   983,   984,   984,   985,
     985,   986,   986,   987,   987,   988,   988,   989,   989,   990,
     991,   991,   992,   992,   993,   993,   994,   994,   994,   995,
     995,   995,   996,   996,   996,   996,   996,   996,   996,   997,
     997,   998,   998,   999,  1000,  1000,  1001,  1001,  1002,  1002,
    1002,  1002,  1003,  1003,  1003,  1003,  1003,  1004,  1004,  1004,
    1004,  1004,  1005,  1006,  1006,  1007,  1007,  1008,  1008,  1009,
    1009,  1009,  1010,  1010,  1011,  1012,  1013,  1014,  1014,  1015,
    1015,  1016,  1016,  1017,  1017,  1018,  1018,  1019,  1019,  1020,
    1020,  1021,  1021,  1022,  1022,  1022,  1022,  1022,  1022,  1023,
    1023,  1024,  1025,  1025,  1026,  1026,  1026,  1027,  1027,  1028,
    1028,  1029,  1029,  1030,  1031,  1031,  1032,  1032,  1034,  1035,
    1033,  1036,  1033,  1033,  1037,  1033,  1038,  1033,  1039,  1033,
    1040,  1033,  1041,  1033,  1033,  1033,  1033,  1033,  1033,  1042,
    1042,  1042,  1042,  1043,  1043,  1044,  1044,  1045,  1045,  1046,
    1046,  1046,  1046,  1046,  1046,  1046,  1046,  1046,  1046,  1047,
    1046,  1046,  1048,  1046,  1049,  1046,  1046,  1046,  1046,  1046,
    1050,  1051,  1051,  1053,  1052,  1054,  1054,  1054,  1056,  1055,
    1057,  1058,  1057,  1059,  1059,  1060,  1061,  1061,  1062,  1063,
    1063,  1063,  1064,  1063,  1065,  1066,  1063,  1063,  1063,  1063,
    1063,  1063,  1063,  1063,  1063,  1063,  1063,  1063,  1063,  1063,
    1063,  1063,  1067,  1067,  1067,  1067,  1067,  1068,  1068,  1069,
    1069,  1070,  1070,  1071,  1071,  1073,  1072,  1074,  1074,  1075,
    1075,  1076,  1076,  1077,  1077,  1077,  1078,  1078,  1078,  1079,
    1079,  1079,  1079,  1081,  1080,  1082,  1080,  1080,  1080,  1083,
    1084,  1084,  1085,  1085,  1086,  1086,  1086,  1088,  1087,  1089,
    1089,  1090,  1090,  1090,  1091,  1091,  1091,  1092,  1092,  1094,
    1093,  1095,  1095,  1095,  1097,  1096,  1098,  1098,  1099,  1099,
    1100,  1100,  1100,  1102,  1101,  1103,  1103,  1104,  1105,  1105,
    1106,  1106,  1107,  1108,  1107,  1109,  1110,  1109,  1111,  1111,
    1111,  1112,  1112,  1112,  1113,  1113,  1114,  1116,  1115,  1117,
    1117,  1118,  1118,  1119,  1119,  1119,  1119,  1119,  1119,  1121,
    1120,  1122,  1122,  1122,  1124,  1123,  1123,  1125,  1125,  1126,
    1126,  1127,  1129,  1128,  1130,  1130,  1131,  1131,  1132,  1133,
    1134,  1134,  1136,  1135,  1137,  1137,  1138,  1138,  1139,  1140,
    1142,  1141,  1144,  1143,  1145,  1145,  1146,  1146,  1147,  1148,
    1148,  1149,  1149,  1150,  1150,  1152,  1151,  1154,  1155,  1153,
    1156,  1156,  1156,  1156,  1156,  1157,  1157,  1158,  1158,  1159,
    1159,  1160,  1160,  1160,  1161,  1161,  1161,  1162,  1162,  1162,
    1163,  1163,  1164,  1165,  1166,  1166,  1166,  1166,  1166,  1167,
    1167,  1167,  1168,  1168,  1168,  1169,  1169,  1170,  1170,  1170,
    1170,  1170,  1170,  1170,  1170,  1170,  1170,  1170,  1171,  1171,
    1171,  1171,  1171,  1171,  1172,  1172,  1172,  1172,  1172,  1172,
    1172,  1172,  1172,  1172,  1172,  1172,  1172,  1172,  1173,  1173,
    1173,  1173,  1173,  1173,  1173,  1173,  1173,  1173,  1173,  1173,
    1173,  1173,  1173,  1174,  1174,  1175,  1175,  1176,  1176,  1177,
    1177,  1178,  1178,  1178,  1178,  1178,  1178,  1179,  1179,  1180,
    1180,  1181,  1181,  1181,  1181,  1181,  1181,  1181,  1181,  1181,
    1181,  1181,  1182,  1183,  1183,  1184,  1184,  1184,  1184,  1184,
    1184,  1184,  1184,  1184,  1184,  1184,  1184,  1184,  1184,  1184,
    1184,  1184,  1184,  1184,  1184,  1184,  1184,  1184,  1184,  1184,
    1184,  1184,  1184,  1184,  1184,  1185,  1185,  1185,  1185,  1185,
    1185,  1185,  1185,  1185,  1185,  1185,  1185,  1185,  1185,  1185,
    1185,  1185,  1185,  1185,  1185,  1185,  1185,  1185,  1185,  1185,
    1185,  1185,  1186,  1186,  1186,  1186,  1186,  1186,  1186,  1186,
    1186,  1186,  1186,  1186,  1186,  1186,  1186,  1186,  1186,  1186,
    1186,  1186,  1186,  1186,  1186,  1186,  1186,  1186,  1186,  1187,
    1187,  1187,  1187,  1187,  1187,  1187,  1187,  1187,  1187,  1187,
    1187,  1187,  1187,  1187,  1187,  1187,  1187,  1187,  1188,  1188,
    1188,  1188,  1188,  1188,  1188,  1188,  1190,  1189,  1189,  1191,
    1191,  1192,  1192,  1193,  1193,  1194,  1194,  1195,  1195,  1196,
    1197,  1197,  1197,  1197,  1197,  1197,  1197,  1198,  1199,  1197,
    1197,  1197,  1197,  1197,  1197,  1197,  1197,  1197,  1197,  1197,
    1200,  1197,  1202,  1201,  1203,  1203,  1203,  1204,  1204,  1205,
    1205,  1206,  1207,  1206,  1208,  1208,  1210,  1209,  1211,  1211,
    1211,  1211,  1211,  1211,  1211,  1211,  1211,  1211,  1211,  1211,
    1212,  1211,  1213,  1213,  1214,  1214,  1215,  1215,  1216,  1216,
    1217,  1217,  1218,  1218,  1219,  1219,  1220,  1220,  1221,  1222,
    1222,  1223,  1223,  1224,  1225,  1224,  1226,  1224,  1224,  1227,
    1224,  1228,  1224,  1224,  1229,  1224,  1230,  1224,  1224,  1231,
    1231,  1231,  1232,  1232,  1233,  1233,  1234,  1236,  1235,  1235,
    1235,  1237,  1238,  1239,  1237,  1240,  1242,  1243,  1241,  1245,
    1244,  1247,  1248,  1246,  1249,  1250,  1251,  1251,  1252,  1252,
    1252,  1252,  1253,  1253,  1255,  1254,  1256,  1254,  1257,  1257,
    1258,  1259,  1258,  1261,  1260,  1262,  1262,  1263,  1263,  1264,
    1264,  1265,  1265,  1266,  1266,  1266,  1266,  1266,  1266,  1266,
    1266,  1266,  1266,  1266,  1266,  1267,  1267,  1267,  1267,  1267,
    1267,  1267,  1267,  1267,  1268,  1268,  1268,  1268,  1269,  1269,
    1269,  1270,  1270,  1271,  1271,  1272,  1273,  1272,  1274,  1275,
    1274,  1276,  1276,  1277,  1277,  1278,  1278,  1279,  1279,  1279,
    1280,  1281,  1281,  1282,  1283,  1283,  1285,  1284,  1286,  1286,
    1287,  1287,  1287,  1288,  1288,  1289,  1289,  1290,  1290,  1290,
    1291,  1291,  1291,  1292,  1292,  1292,  1292,  1292,  1293,  1294,
    1294,  1294,  1294,  1295,  1295,  1295,  1296,  1296,  1296,  1296,
    1296,  1296,  1297,  1297,  1297,  1297,  1297,  1298,  1298,  1298,
    1298,  1298,  1299,  1299,  1299,  1299,  1299,  1300,  1301,  1301,
    1302,  1302,  1303,  1304,  1303,  1305,  1305,  1306,  1306,  1307,
    1309,  1308,  1310,  1310,  1311,  1311,  1313,  1312,  1315,  1316,
    1314,  1314,  1314,  1318,  1317,  1320,  1319,  1321,  1319,  1319,
    1319,  1319,  1319,  1319,  1322,  1319,  1319,  1319,  1319,  1319,
    1319,  1323,  1323,  1324,  1325,  1326,  1326,  1327,  1328,  1328,
    1329,  1329,  1331,  1332,  1330,  1334,  1335,  1333,  1336,  1336,
    1336,  1336,  1337,  1337,  1338,  1338,  1339,  1340,  1340,  1340,
    1341,  1340,  1342,  1342,  1343,  1343,  1344,  1343,  1345,  1343,
    1346,  1346,  1347,  1347,  1348,  1349,  1349,  1350,  1350,  1352,
    1351,  1353,  1353,  1354,  1354,  1355,  1355,  1356,  1357,  1356,
    1359,  1360,  1358,  1361,  1361,  1362,  1363,  1363,  1364,  1365,
    1365,  1367,  1366,  1369,  1368,  1370,  1368,  1371,  1368,  1372,
    1372,  1373,  1373,  1374,  1374,  1375,  1375,  1376,  1376,  1376,
    1378,  1377,  1379,  1379,  1380,  1380,  1381,  1381,  1382,  1382,
    1382,  1382,  1382,  1382,  1382,  1382,  1382,  1383,  1383,  1385,
    1384,  1386,  1386,  1386,  1386,  1386,  1386,  1386,  1386,  1386,
    1386,  1386,  1386,  1386,  1386,  1387,  1386,  1388,  1386,  1386,
    1386,  1386,  1386,  1386,  1386,  1386,  1386,  1386,  1386,  1386,
    1386,  1386,  1386,  1386,  1386,  1386,  1386,  1386,  1386,  1386,
    1386,  1386,  1386,  1386,  1386,  1386,  1386,  1386,  1386,  1386,
    1386,  1386,  1386,  1386,  1386,  1386,  1386,  1389,  1389,  1389,
    1390,  1390,  1391,  1391,  1392,  1392,  1393,  1393,  1394,  1394,
    1395,  1395,  1396,  1396,  1397,  1397,  1397,  1399,  1398,  1400,
    1398,  1401,  1401,  1402,  1402,  1402,  1403,  1403,  1403,  1405,
    1404,  1407,  1408,  1406,  1406,  1409,  1409,  1410,  1410,  1411,
    1411,  1411,  1411,  1411,  1411,  1411,  1411,  1411,  1411,  1411,
    1411,  1411,  1411,  1411,  1411,  1411,  1411,  1411,  1412,  1412,
    1413,  1413,  1415,  1414,  1416,  1416,  1418,  1417,  1417,  1417,
    1419,  1419,  1421,  1420,  1422,  1423,  1423,  1425,  1424,  1426,
    1426,  1426,  1427,  1427,  1427,  1428,  1428,  1429,  1430,  1432,
    1433,  1434,  1435,  1431,  1436,  1436,  1437,  1437,  1438,  1438,
    1438,  1439,  1439,  1439,  1440,  1440,  1441,  1441,  1442,  1442,
    1442,  1442,  1443,  1443,  1444,  1444,  1445,  1445,  1446,  1446,
    1447,  1447,  1448,  1448,  1449,  1449,  1449,  1450,  1450,  1451,
    1451,  1452,  1452,  1453,  1453,  1454,  1455,  1455,  1455,  1455,
    1456,  1456,  1456,  1456,  1457,  1458,  1458,  1458,  1459,  1459,
    1459,  1459,  1459,  1459,  1459,  1459,  1459,  1459,  1459,  1460,
    1460,  1460,  1460,  1460,  1461,  1461,  1461,  1462,  1462,  1463,
    1463,  1464,  1465,  1465,  1466,  1466,  1467,  1467,  1467,  1468,
    1468,  1468,  1468,  1469,  1469,  1469,  1470,  1470,  1471,  1472,
    1472,  1473,  1474,  1475,  1476,  1476,  1477,  1477,  1478,  1478,
    1478,  1479,  1479,  1479,  1480,  1480,  1480,  1480,  1480,  1480,
    1480,  1480,  1480,  1480,  1480,  1480,  1480,  1480,  1480,  1480,
    1480,  1480,  1480,  1480,  1480,  1480,  1480,  1480,  1480,  1480,
    1480,  1480,  1480,  1480,  1480,  1480,  1480,  1480,  1480,  1480,
    1480,  1480,  1480,  1480,  1480,  1480,  1480,  1480,  1480,  1480,
    1480,  1480,  1480,  1480,  1480,  1480,  1480,  1480,  1480,  1480,
    1480,  1480,  1481,  1481,  1481,  1481,  1481,  1481,  1481,  1481,
    1481,  1481,  1481,  1481,  1481,  1481,  1481,  1481,  1481,  1481,
    1481,  1481,  1481,  1481,  1481,  1481,  1481,  1481,  1481,  1481,
    1481,  1481,  1481,  1481,  1481,  1481,  1481,  1481,  1481,  1481,
    1481,  1481,  1481,  1481,  1481,  1481,  1481,  1481,  1481,  1481,
    1481,  1481,  1481,  1481,  1481,  1481,  1481,  1481,  1481,  1481,
    1481,  1481,  1481,  1481,  1481,  1481,  1481,  1481,  1481,  1481,
    1481,  1481,  1481,  1481,  1481,  1481,  1481,  1481,  1481,  1481,
    1481,  1481,  1481,  1481,  1481,  1481,  1481,  1481,  1481,  1481,
    1481,  1481,  1481,  1481,  1481,  1481,  1481,  1481,  1481,  1481,
    1481,  1481,  1481,  1481,  1481,  1481,  1481,  1481,  1481,  1481,
    1481,  1481,  1481,  1481,  1481,  1481,  1481,  1481,  1481,  1481,
    1481,  1481,  1481,  1481,  1481,  1481,  1481,  1481,  1481,  1481,
    1481,  1481,  1481,  1481,  1481,  1481,  1481,  1481,  1481,  1481,
    1481,  1481,  1481,  1481,  1481,  1481,  1481,  1481,  1481,  1481,
    1481,  1481,  1481,  1481,  1481,  1481,  1481,  1481,  1481,  1481,
    1481,  1481,  1481,  1481,  1481,  1481,  1481,  1481,  1481,  1481,
    1481,  1481,  1481,  1481,  1481,  1481,  1481,  1481,  1481,  1481,
    1481,  1481,  1481,  1481,  1481,  1481,  1481,  1481,  1481,  1481,
    1481,  1481,  1481,  1481,  1481,  1481,  1481,  1481,  1481,  1481,
    1481,  1481,  1481,  1481,  1481,  1481,  1481,  1481,  1481,  1481,
    1481,  1481,  1481,  1481,  1481,  1481,  1481,  1481,  1481,  1481,
    1481,  1481,  1481,  1481,  1481,  1481,  1481,  1481,  1481,  1481,
    1481,  1481,  1481,  1481,  1481,  1481,  1481,  1481,  1481,  1481,
    1481,  1481,  1481,  1481,  1481,  1481,  1481,  1481,  1481,  1481,
    1481,  1481,  1481,  1481,  1481,  1481,  1481,  1481,  1481,  1481,
    1481,  1481,  1481,  1481,  1481,  1481,  1481,  1481,  1481,  1481,
    1481,  1481,  1481,  1481,  1481,  1481,  1481,  1481,  1481,  1481,
    1481,  1481,  1481,  1481,  1481,  1481,  1481,  1481,  1481,  1481,
    1481,  1481,  1481,  1481,  1481,  1481,  1481,  1481,  1481,  1481,
    1481,  1481,  1481,  1481,  1481,  1481,  1481,  1483,  1482,  1485,
    1484,  1486,  1484,  1487,  1484,  1489,  1488,  1488,  1490,  1490,
    1492,  1491,  1493,  1491,  1495,  1494,  1494,  1496,  1496,  1496,
    1497,  1497,  1497,  1497,  1498,  1498,  1498,  1498,  1499,  1500,
    1500,  1500,  1500,  1500,  1500,  1500,  1500,  1501,  1501,  1501,
    1502,  1502,  1502,  1502,  1503,  1504,  1505,  1505,  1506,  1506,
    1506,  1506,  1507,  1507,  1507,  1508,  1508,  1508,  1508,  1508,
    1510,  1509,  1511,  1511,  1512,  1512,  1513,  1514,  1514,  1514,
    1514,  1514,  1516,  1515,  1517,  1517,  1518,  1517,  1519,  1519,
    1520,  1520,  1521,  1521,  1521,  1521,  1522,  1521,  1523,  1523,
    1523,  1523,  1523,  1524,  1525,  1525,  1525,  1525,  1525,  1526,
    1527,  1527,  1527,  1527,  1528,  1528,  1529,  1529,  1530,  1530,
    1531,  1531,  1533,  1532,  1534,  1532,  1535,  1532,  1536,  1532,
    1532,  1532,  1532,  1532,  1532,  1532,  1532,  1532,  1532,  1532,
    1532,  1532,  1532,  1532,  1532,  1532,  1532,  1532,  1532,  1532,
    1532,  1532,  1532,  1532,  1532,  1532,  1537,  1537,  1538,  1538,
    1539,  1539,  1539,  1540,  1540,  1540,  1540,  1541,  1541,  1542,
    1542,  1543,  1543,  1544,  1544,  1545,  1545,  1545,  1545,  1545,
    1546,  1546,  1547,  1547,  1548,  1549,  1549,  1549,  1549,  1549,
    1550,  1550,  1551,  1551,  1552,  1552,  1553,  1553,  1553,  1553,
    1553,  1555,  1554,  1556,  1556,  1557,  1557,  1557,  1558,  1558,
    1558,  1559,  1559,  1560,  1561,  1561,  1562,  1563,  1564,  1564,
    1566,  1565,  1567,  1567,  1567,  1568,  1568,  1570,  1569,  1571,
    1571,  1572,  1572,  1572,  1573,  1573,  1574,  1575,  1574,  1576,
    1577,  1578,  1579,  1579,  1580,  1580,  1581,  1581,  1581,  1581,
    1581,  1581,  1581,  1581,  1582,  1582,  1582,  1583,  1583,  1583,
    1583,  1583,  1584,  1584,  1584,  1584,  1584,  1584,  1585,  1585,
    1586,  1587,  1588,  1588,  1588,  1589,  1590,  1590,  1590,  1591,
    1591,  1591,  1593,  1592,  1594,  1594,  1595,  1595,  1597,  1596,
    1598,  1598,  1599,  1599,  1599,  1599,  1601,  1602,  1603,  1600,
    1604,  1604,  1606,  1607,  1608,  1609,  1610,  1605,  1612,  1613,
    1614,  1615,  1611,  1616,  1616,  1616,  1616,  1616,  1616,  1617,
    1617,  1617,  1618,  1618,  1619,  1619,  1619,  1620,  1620,  1621,
    1622,  1621,  1623,  1623,  1624,  1624,  1625,  1625,  1626
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     1,     0,     4,     2,     0,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     3,     1,     1,     4,     1,
       2,     0,     4,     0,     2,     3,     1,     2,     0,     3,
       0,     6,     1,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     5,
       1,     0,     1,     3,     1,     3,     3,     3,     3,     3,
       3,     3,     0,     1,     1,     0,     7,     0,     0,    15,
       0,     0,    15,     0,     0,    15,     0,     6,     0,     3,
       4,     4,     3,     2,    10,     1,     3,     2,     2,     2,
       2,     2,     2,     2,     0,    13,     0,     6,     2,     0,
       1,     3,     1,     0,     2,     0,     2,     0,     1,     3,
       4,     0,     2,     0,     2,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     0,     3,
       1,     0,     2,     0,     2,     2,     2,     2,     2,     3,
       3,     1,     1,     1,     2,     3,     3,     0,     4,     0,
       3,     0,     1,     3,     1,     0,     1,     3,     1,     0,
       3,     0,     1,     3,     1,     4,     0,     1,     1,     1,
       0,     3,     2,     3,     0,     3,     0,     5,     5,     0,
       7,     5,     0,     2,     1,     1,     1,     3,     1,     1,
       1,     3,     0,     1,     1,     1,     1,     2,     1,     3,
       1,     1,     0,     1,     0,     2,     3,     5,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     3,     4,     0,     1,     1,     3,     1,
       3,     3,     1,     2,     1,     1,     1,     1,     3,     3,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     3,     0,     2,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       0,     5,     0,     2,     0,     3,     0,     2,     2,     2,
       2,     0,     6,     2,     0,     2,     1,     1,     3,     0,
       0,     0,     7,     0,     2,     2,     1,     1,     0,     0,
       8,     0,     6,     1,     2,     1,     2,     0,     0,     6,
       0,     0,     6,     0,     2,     0,     5,     0,     1,     0,
       5,     0,     2,     0,     5,     4,     0,     0,     8,     0,
       7,     1,     1,     1,     1,     1,     2,     4,     5,     0,
       4,     4,     4,     3,     3,     2,     2,     0,     2,     1,
       2,     3,     1,     1,     1,     1,     1,     2,     3,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     2,
       3,     1,     1,     1,     1,     1,     1,     1,     2,     3,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     2,
       3,     1,     1,     1,     2,     2,     2,     1,     1,     1,
       1,     2,     3,     3,     3,     3,     3,     3,     3,     3,
       4,     0,     1,     1,     1,     1,     1,     0,     7,     3,
       0,     5,     1,     2,     4,     0,     0,     5,     0,     7,
       1,     0,     1,     0,     4,     0,     0,     3,     5,     5,
       0,     4,     2,     2,     2,     2,     0,     1,     0,     1,
       1,     3,     1,     4,     5,     5,     0,     2,     0,     0,
       7,     0,     9,     1,     3,     1,     1,     0,     2,     0,
       3,     1,     3,     0,     6,     1,     0,     0,     5,     0,
       4,     1,     1,     1,     3,     1,     3,     0,     0,     5,
       1,     3,     1,     1,     0,     3,     1,     3,     0,     4,
       1,     0,     1,     2,     1,     3,     4,     3,     3,     3,
       3,     4,     4,     3,     0,     0,     6,     0,     1,     0,
       1,     1,     2,     1,     1,     0,     1,     1,     2,     1,
       0,     3,     0,     1,     1,     2,     1,     2,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     0,
       6,     1,     1,     3,     4,     4,     2,     2,     2,     3,
       3,     3,     3,     3,     3,     3,     4,     4,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     2,     1,     1,     1,     1,     1,     1,     3,     1,
       1,     2,     2,     0,     8,     0,     9,     0,     9,     0,
       9,     8,     2,     0,     1,     4,     0,     1,     2,     0,
       3,     2,     8,     0,     2,     0,     1,     1,     0,     1,
       2,     1,     1,     2,     2,     4,     3,     3,     3,     3,
       1,     2,     1,     1,     3,     2,     3,     2,     2,     1,
       3,     3,     2,     3,     1,     2,     2,     2,     1,     2,
       1,     1,     1,     2,     3,     2,     3,     2,     2,     3,
       3,     3,     0,     6,     0,     6,     2,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     2,     2,
       1,     2,     1,     2,     3,     2,     1,     1,     1,     1,
       1,     1,     1,     2,     0,     1,     1,     5,     0,     1,
       2,     1,     1,     1,     1,     3,     3,     3,     3,     0,
       1,     0,     1,     0,     1,     2,     1,     1,     2,     2,
       4,     1,     3,     2,     1,     2,     2,     2,     3,     3,
       3,     3,     2,     2,     1,     1,     1,     2,     1,     1,
       1,     1,     1,     0,     2,     1,     1,     1,     1,     1,
       0,     2,     1,     1,     0,     1,     1,     2,     2,     1,
       2,     2,     0,     1,     1,     1,     3,     1,     3,     0,
       1,     0,     1,     5,     0,     3,     3,     1,     0,     2,
       2,     2,     0,     3,     3,     6,     6,     1,     1,     2,
       2,     2,     1,     2,     2,     1,     1,     0,     1,     1,
       1,     1,     0,     1,     1,     1,     0,     1,     2,     0,
       1,     0,     1,     0,     1,     1,     2,     1,     2,     1,
       2,     2,     2,     3,     2,     3,     3,     3,     3,     1,
       1,     1,     1,     3,     1,     1,     1,     4,     2,     1,
       4,     0,     1,     2,     0,     2,     1,     3,     0,     0,
       7,     0,     5,     7,     0,     5,     0,     5,     0,     5,
       0,     4,     0,    10,     3,     4,     3,     3,     7,     0,
       3,     1,     4,     0,     3,     0,     2,     0,     1,     0,
       2,     2,     2,     2,     1,     1,     1,     4,     4,     0,
       6,     4,     0,     5,     0,     6,     4,     3,     1,     7,
       2,     1,     1,     0,     6,     0,     3,     2,     0,     5,
       0,     0,     6,     1,     3,     1,     1,     3,     3,     3,
       2,     4,     0,     7,     0,     0,     8,     5,     5,     3,
       4,     2,     2,     6,     5,     3,     5,     1,     1,     1,
       1,     1,     0,     1,     1,     2,     2,     3,     3,     3,
       3,     0,     1,     0,     1,     0,     2,     0,     1,     2,
       1,     1,     1,     0,     1,     1,     0,     2,     1,     0,
       1,     1,     1,     0,     6,     0,     5,     4,     4,     3,
       0,     1,     1,     3,     3,     2,     2,     0,     2,     1,
       3,     0,     1,     1,     0,     2,     4,     1,     3,     0,
       5,     0,     1,     1,     0,     6,     0,     1,     1,     2,
       1,     1,     1,     0,     5,     1,     3,     2,     0,     3,
       1,     4,     1,     0,     4,     1,     0,     4,     0,     1,
       3,     0,     1,     3,     1,     1,     2,     0,     5,     0,
       1,     1,     2,     1,     1,     1,     1,     1,     2,     0,
       5,     0,     1,     1,     0,     4,     4,     3,     5,     1,
       3,     3,     0,     6,     1,     1,     1,     3,     2,     3,
       1,     1,     0,     6,     1,     1,     1,     3,     3,     4,
       0,     6,     0,     2,     0,     4,     0,     2,     1,     2,
       4,     2,     3,     2,     3,     0,     3,     0,     0,     6,
       2,     1,     1,     2,     2,     8,     4,     0,     1,     2,
       1,     1,     1,     1,     0,     2,     4,     3,     1,     1,
       3,     4,     0,     0,     0,     2,     2,     1,     1,     0,
       2,     3,     0,     2,     3,     0,     2,     3,     3,     3,
       2,     3,     4,     3,     4,     3,     4,     1,     3,     4,
       3,     3,     6,     1,     5,     6,     5,     7,     6,     8,
       5,     6,     4,     4,     5,     3,     4,     1,     3,     3,
       3,     3,     3,     3,     5,     5,     3,     3,     3,     3,
       3,     3,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     0,
       2,     1,     2,     1,     1,     1,     2,     2,     1,     1,
       2,     2,     4,     1,     3,     1,     1,     1,     1,     1,
       3,     1,     1,     1,     1,     3,     2,     2,     2,     2,
       3,     3,     5,     6,     4,     4,     7,     2,     6,     5,
       6,     6,     4,     4,     5,     4,     6,     2,     4,     4,
       4,    10,     6,     8,     6,     4,     4,     6,     4,     4,
       4,     6,     4,     7,     7,     7,     6,     6,     6,     6,
       3,     4,     6,     8,     2,     2,     8,     8,     6,     6,
       2,     6,     6,     8,     8,     6,     8,     6,     2,     8,
       8,     2,     2,     2,     6,     6,     4,     4,     8,     4,
       4,     4,     4,     3,     8,     4,     4,     6,     4,     4,
       4,     6,     8,     3,     6,     4,     6,     1,     6,     4,
       4,     4,     4,     4,     6,     4,     0,     5,     6,     2,
       3,     0,     4,     0,     3,     0,     1,     1,     3,     4,
       4,     5,     4,     4,     4,     5,     4,     0,     0,     7,
       4,     5,     4,     5,     4,     4,     4,     4,     4,     5,
       0,     8,     0,     3,     3,     1,     4,     0,     1,     0,
       2,     0,     0,     4,     4,     2,     0,     3,     2,     3,
       2,     1,     1,     2,     1,     2,     1,     2,     2,     2,
       0,     3,     0,     1,     1,     3,     1,     3,     1,     3,
       0,     1,     0,     2,     4,     5,     1,     1,     1,     1,
       4,     1,     3,     3,     0,     6,     0,     8,     4,     0,
       8,     0,    10,     6,     0,     8,     0,    10,     6,     1,
       2,     1,     1,     2,     0,     1,     5,     0,     5,     3,
       5,     2,     0,     0,     7,     1,     0,     0,     6,     0,
       3,     0,     0,     5,     0,     1,     0,     1,     0,     2,
       3,     3,     1,     1,     0,     7,     0,     7,     1,     2,
       0,     0,     2,     0,     2,     0,     1,     1,     1,     1,
       3,     1,     3,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     0,     1,
       1,     0,     2,     0,     1,     0,     0,     3,     0,     0,
       3,     2,     0,     0,     4,     4,     2,     0,     1,     1,
       3,     3,     1,     2,     0,     1,     0,     4,     4,     2,
       0,     1,     1,     0,     1,     0,     1,     2,     5,     4,
       1,     3,     3,     1,     1,     1,     1,     1,     1,     0,
       2,     3,     4,     1,     2,     2,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     0,     0,     6,     0,     1,     3,     1,     3,
       0,     2,     3,     1,     2,     1,     0,     3,     0,     0,
       7,     2,     1,     0,     3,     0,     7,     0,     7,     4,
       6,     4,     4,     4,     0,     6,     4,     4,     5,     6,
       4,     1,     3,     1,     2,     1,     3,     1,     0,     2,
       0,     1,     0,     0,     8,     0,     0,     6,     0,     1,
       1,     1,     1,     1,     2,     1,     1,     1,     3,     4,
       0,     3,     3,     1,     2,     2,     0,     3,     0,     5,
       3,     1,     3,     1,     3,     1,     1,     0,     1,     0,
       4,     0,     1,     3,     1,     1,     1,     0,     0,     6,
       0,     0,    11,     3,     1,     3,     3,     1,     3,     0,
       1,     0,     4,     0,     7,     0,     5,     0,     6,     1,
       3,     2,     4,     0,     2,     0,     2,     1,     1,     1,
       0,     4,     0,     1,     0,     1,     1,     3,     1,     1,
       2,     2,     2,     1,     1,     1,     1,     0,     3,     0,
       3,     2,     4,     4,     3,     4,     4,     1,     3,     3,
       3,     3,     6,     2,     2,     0,     6,     0,     7,     5,
       2,     1,     1,     1,     5,     5,     2,     2,     1,     4,
       3,     2,     3,     2,     2,     1,     3,     4,     3,     3,
       2,     3,     2,     3,     1,     1,     1,     1,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     1,     1,     1,
       1,     1,     0,     1,     0,     2,     0,     1,     1,     1,
       0,     2,     0,     2,     0,     2,     2,     0,     4,     0,
       4,     1,     1,     0,     1,     1,     0,     1,     1,     0,
       4,     0,     0,     5,     1,     0,     4,     3,     1,     2,
       2,     2,     2,     2,     3,     2,     1,     1,     1,     1,
       2,     1,     1,     1,     1,     1,     1,     1,     0,     1,
       0,     3,     0,     3,     3,     1,     0,     4,     1,     2,
       0,     1,     0,     3,     3,     2,     2,     0,     5,     0,
       1,     1,     0,     1,     1,     1,     2,     1,     2,     0,
       0,     0,     0,    22,     1,     1,     0,     1,     0,     1,
       1,     0,     1,     1,     0,     2,     2,     1,     3,     4,
       3,     3,     0,     2,     2,     1,     3,     3,     0,     4,
       0,     3,     1,     1,     0,     3,     2,     3,     1,     1,
       2,     0,     2,     3,     1,     5,     1,     1,     2,     2,
       1,     1,     1,     1,     1,     1,     2,     2,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     2,     2,     1,
       1,     1,     1,     1,     2,     2,     2,     1,     1,     3,
       5,     1,     1,     1,     1,     1,     3,     4,     5,     1,
       5,     3,     2,     1,     3,     2,     2,     4,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     3,     2,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     0,     3,     0,
       3,     0,     3,     0,     3,     0,     3,     2,     0,     2,
       0,     2,     0,     4,     0,     3,     1,     1,     1,     1,
       0,     1,     1,     1,     0,     2,     2,     2,     3,     3,
       4,     6,     2,     3,     3,     3,     5,     1,     3,     3,
       1,     1,     3,     3,     1,     3,     2,     2,     2,     2,
       2,     1,     1,     4,     4,     1,     1,     1,     1,     1,
       0,     4,     1,     1,     1,     3,     3,     1,     1,     2,
       2,     2,     0,     3,     4,     3,     0,     7,     1,     2,
       1,     1,     1,     1,     1,     1,     0,     5,     1,     1,
       1,     1,     1,     3,     6,     6,     6,     7,     5,     3,
       8,     8,     8,     6,     0,     1,     1,     2,     0,     1,
       1,     3,     0,     3,     0,     3,     0,     3,     0,     3,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     2,     2,     1,     3,     2,     2,     2,     2,     2,
       2,     2,     2,     1,     1,     2,     0,     1,     3,     1,
       2,     2,     2,     1,     3,     3,     1,     1,     3,     1,
       3,     1,     1,     1,     1,     4,     5,     4,     6,     1,
       0,     3,     3,     1,     1,     0,     2,     2,     2,     2,
       0,     2,     0,     3,     2,     1,     2,     2,     2,     2,
       2,     0,     3,     0,     1,     0,     3,     2,     0,     1,
       2,     0,     1,     4,     4,     5,     2,     3,     0,     1,
       0,     4,     0,     1,     1,     0,     1,     0,     2,     2,
       1,     0,     1,     1,     2,     3,     2,     0,     6,     3,
       0,     0,     0,     1,     2,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     2,     2,     3,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       0,     3,     1,     2,     1,     2,     3,     3,     3,     0,
       3,     3,     0,     7,     0,     3,     1,     3,     0,     3,
       2,     4,     0,     3,     4,     4,     0,     0,     0,    16,
       8,     7,     0,     0,     0,     0,     0,    15,     0,     0,
       0,     0,    12,     4,     4,     3,     4,     3,     2,     1,
       3,     5,     1,     1,     0,     1,     1,     0,     2,     0,
       0,     3,     0,     2,     5,     3,     3,     3,     1
};

/* YYDEFACT[STATE-NAME] -- Default rule to reduce with in state
   STATE-NUM when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
       0,   908,  1111,  2621,     0,     0,     0,     0,     0,     0,
    2623,   128,    66,  1761,  1881,  1882,  1673,  1700,     2,     0,
    1111,   275,   178,     0,    78,  1702,     0,  1937,     0,     0,
    1111,     0,   486,     0,  1932,     0,     0,  1111,  1705,  1922,
     252,   178,  2623,     0,  1157,  2427,  1799,  1947,     0,     0,
       0,  1782,     0,  2502,  1750,     0,     0,  2758,     0,     0,
       3,     8,    19,     0,    41,    24,    29,    14,    18,    13,
      54,    48,    26,    39,    38,    10,    57,    58,    16,    45,
      11,    12,    15,    37,    44,    33,    40,    52,  1148,    22,
      23,    30,    46,    62,    20,    59,    55,    21,  1883,    25,
      47,    42,    34,    56,    63,    35,    53,    36,    61,    28,
      49,    27,     9,    17,    50,    51,    43,    64,    31,    60,
      32,     0,   937,     0,     0,     0,     0,     0,     0,  1015,
     920,  2688,  2689,  2690,  1113,  1112,     0,  2623,  2051,  1096,
    1122,  2122,  2123,  2124,  2125,  2126,  2127,  2128,  2129,  2065,
    2130,  2131,  2133,  2132,  2134,  2135,  2136,  2066,  2067,  2137,
    2138,  2139,  2141,  2140,  2142,  2068,  2069,  2143,  2144,  2145,
    2146,  2070,  2072,  2071,  2147,  2150,  2149,  2148,  2073,  2151,
    2152,  2153,  2155,  2074,  2075,  2076,  2077,  2078,  2154,  2079,
    2156,  2080,  2157,  2158,  2159,  2160,  2161,  2162,  2163,  2165,
    2164,  2081,  2166,  2167,  2169,  2170,  2171,  2168,  2172,  2174,
    2173,  2175,  2176,  2177,  2082,  2178,  2179,  2180,  2181,  2182,
    2183,  2184,  2185,  2083,  2186,  2187,  2188,  2206,  2084,  2189,
    2192,  2191,  2190,  2193,  2194,  2195,  2197,  2196,  2198,  2199,
    2085,  2086,  2200,  2201,  2202,  2204,  2203,  2208,  2209,  2210,
    2087,  2205,  2207,  2405,  2211,  2212,  2214,  2213,  2215,  2217,
    2216,  2088,  2219,  2218,  2089,  2090,  2220,  2221,  2049,  2222,
    2050,  2223,  2226,  2227,  2224,  2228,  2233,  2091,  2225,  2229,
    2230,  2231,  2232,  2234,  2092,  2236,  2235,  2237,  2238,  2239,
    2240,  2241,  2242,  2243,  2244,  2245,  2258,  2249,  2250,  2252,
    2253,  2256,  2251,  2257,  2261,  2260,  2262,  2263,  2264,  2265,
    2266,  2259,  2247,  2254,  2255,  2248,  2267,  2268,  2246,  2269,
    2270,  2271,  2272,  2273,  2274,  2275,  2276,  2277,  2278,  2279,
    2281,  2280,  2282,  2283,  2284,  2285,  2286,  2287,  2289,  2288,
    2290,  2291,  2292,  2294,  2293,  2296,  2297,  2093,  2295,  2298,
    2299,  2300,  2301,  2302,  2304,  2303,  2094,  2096,  2095,  2097,
    2305,  2306,  2098,  2307,  2309,  2308,  2310,  2311,  2312,  2314,
    2313,  2315,  2316,  2099,  2100,  2317,  2318,  2319,  2320,  2321,
    2322,  2323,  2324,  2325,  2326,  2327,  2328,  2329,  2330,  2332,
    2331,  2333,  2334,  2335,  2336,  2337,  2338,  2339,  2101,  2340,
    2102,  2341,  2342,  2103,  2343,  2104,  2344,  2345,  2346,  2105,
    2347,  2348,  2349,  2351,  2352,  2350,  2353,  2106,  2354,  2355,
    2356,  2107,  2358,  2357,  2359,  2108,  2361,  2362,  2109,  2360,
    2111,  2112,  2363,  2364,  2365,  2110,  2366,  2113,  2367,  2368,
    2370,  2369,  2371,  2372,  2373,  2114,  2374,  2115,  2375,  2376,
    2377,  2378,  2379,  2381,  2380,  2382,  2383,  2384,  2385,  2388,
    2390,  2387,  2389,  2386,  2391,  2392,  2393,  2394,  2398,  2399,
    2400,  2401,  2395,  2396,  2397,  2116,  2402,  2403,  2404,  2406,
    2407,  2409,  2408,  2117,  2118,  2410,  2411,  2121,  2412,  2413,
    2414,  2418,  2415,  2426,  2416,  2417,  2420,  2419,  2421,  2422,
    2119,  2423,  2120,  2424,  2425,   197,  2054,   180,  2055,  2064,
     112,  2493,  2492,  1059,  1097,  2624,  2625,   580,   864,     0,
       0,   865,     0,   579,   863,   178,  2690,   133,     0,   576,
     577,     0,     0,     0,  1775,     0,  1698,  1698,  1698,  1698,
       0,  1698,  1698,     0,  1701,  1698,   178,  1698,     0,    71,
    1889,   276,     0,     0,     0,     0,     0,  2048,     0,  1708,
       0,     0,  1939,  1954,     0,  1955,  1949,  2490,     0,  1182,
       0,     0,     0,     0,   178,  1114,     0,  1759,     0,   242,
     251,   253,   254,   250,     0,  2625,  2636,  1149,  1155,  1167,
       0,  1866,   254,     0,   112,  1040,     0,   112,  1783,  1780,
       0,     0,     0,  1759,  1948,  2742,     0,     0,     0,  2738,
       0,  2743,     0,  1157,     0,     0,     1,     5,     0,     0,
    2201,  2309,  1879,  1877,  2043,     0,   911,   938,     0,   916,
       0,   914,  2060,  2059,  2058,     0,   927,   926,   924,     0,
     447,     0,  1017,     0,  2699,   918,  1073,  2622,     0,   199,
       0,     0,   113,   114,     0,     0,     0,  2628,     0,     0,
       0,     0,   132,     0,     0,     0,   129,  1182,  1182,  2690,
    2692,  2694,   580,   578,   580,   580,   580,  1779,  1778,  1777,
       0,  1775,  2123,  2065,  2136,     0,  2016,     0,     0,     0,
    1460,     0,  2070,     0,  2151,  2153,  2074,  2075,  2076,  2077,
    2078,  2081,     0,     0,  1195,  1195,  1192,     0,     0,     0,
    2176,  2177,  2022,     0,     0,     0,  2012,  2023,  2214,  2215,
       0,  2014,  2015,  2221,     0,     0,     0,  2235,     0,  2240,
    2020,     0,     0,  2276,  2278,     0,     0,  2282,  2283,  2284,
    2285,  1997,  1250,     0,  1192,  2011,  2019,  2301,  2004,  2310,
    2315,  2316,     0,  2325,     0,     0,     0,  2352,  2350,  2356,
       0,     0,  2378,     0,     0,  1192,  1996,  2398,  2399,  2400,
    2401,     0,  2013,  2116,  2021,     0,  2412,  1195,  1192,  1192,
       0,     0,     0,  2421,  2425,     0,     0,     0,  2660,  1249,
       0,  1422,     0,  1454,  1207,  1213,  1227,     0,  1242,  1276,
    1277,  1279,  1377,  1278,  1284,  1283,  1674,  2008,  1282,  1281,
    2009,  2010,  1275,  2033,  2054,  2032,     0,     0,     0,     0,
       0,     0,     0,     0,  1862,     0,     0,  1684,  1698,    73,
       0,     0,  2538,  2553,  2554,  2550,  2555,  2573,  2556,  2560,
       0,  2552,  2544,     0,  2559,     0,  2548,  2557,     0,  2542,
       0,  2558,  2563,  2574,  2546,  2551,  2529,     0,  2536,  2540,
    2045,  1568,  2505,  2506,     0,    79,  1710,  1711,  1709,  1013,
       0,  2755,  1940,  1941,  1942,     0,  1958,     0,  1109,     0,
       0,   496,   487,     0,  1861,  1860,     0,  1933,  2637,     0,
       0,  1064,  1713,  1760,     0,  1712,  1928,     0,  1926,  1923,
    1925,   243,     0,     0,   273,  2538,     0,  2523,     0,  2631,
    2628,  2638,  2673,  2668,  2667,  2670,  2671,  1173,  2672,  1172,
    2669,  2666,  1182,  1168,  1170,  1171,   798,     0,     0,  2447,
    2448,  2289,  2310,  2449,  2395,     0,     0,  2467,  2428,  2433,
    2429,     0,     0,  1821,     0,   798,  1844,  1874,  1822,     0,
       0,  1874,     0,  1603,  1864,  1867,     0,  2451,  1835,   861,
     860,  1847,   859,  2452,  1860,     0,  1807,  1823,     0,  1784,
    1828,   112,  2453,     0,  1863,  1846,     0,  1845,  1603,  1874,
       0,  1800,     0,     0,     0,     0,     0,   249,  1047,  1047,
       0,     0,  1039,  1041,  1042,  1047,  1047,     0,  2756,  2757,
    2503,  1013,  2003,  2001,  2002,  2052,  2739,  2000,  2747,  2749,
    2735,  2737,  2744,  1151,     0,  2642,     6,    65,     0,  1886,
    2697,  2698,  2696,   814,     0,  1195,  2061,  2691,   181,   925,
       0,   448,   181,     0,     0,     0,     0,     0,   449,   450,
     386,     0,  1021,  1022,  1016,  1018,  1020,   922,     0,     0,
     921,  2699,     0,     0,  1124,  1126,  1125,  1142,   201,   198,
     179,    80,  1061,  1691,  1693,  1099,  2627,     0,     0,  2629,
    2633,  1248,  1247,     0,   126,   131,     0,     0,     0,  2599,
     130,  2589,  2695,  1182,  1182,  1182,  2687,     0,  2675,  2682,
    2683,  2686,  2685,  2684,  2681,     0,  2674,  2677,  2678,  2680,
    2679,  2699,  2693,     0,     0,     0,     0,     0,  1762,  1765,
    1769,  1773,  1776,     0,     0,  1573,  1297,  1573,  1573,  1573,
    1461,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1573,     0,  1334,  1307,     0,  1335,
       0,     0,     0,  2024,     0,     0,     0,  2660,     0,     0,
       0,  1427,     0,     0,     0,  2660,     0,     0,     0,     0,
       0,     0,  1456,  1458,  2032,  1573,     0,     0,  1573,     0,
       0,     0,     0,     0,  1200,  1340,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1573,  1573,
       0,     0,  1573,  1348,  2026,     0,     0,     0,  2025,     0,
       0,     0,  2018,   795,   796,  1998,  2017,     0,  1351,  1353,
    1352,     0,  1573,  1573,     0,     0,  1287,  1286,  1288,     0,
       0,     0,     0,     0,     0,  1246,  1245,  1244,  1243,     0,
       0,     0,  1251,     0,  1252,  1253,     0,  1254,  1255,  1256,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1289,
       0,     0,     0,  1999,  1386,     0,  1699,  1679,  1686,  1681,
       0,  1862,  1682,  1690,   461,     0,  1687,  2587,  1683,     0,
    1675,     0,    72,     0,  1911,  1916,     0,     0,     0,  1906,
    1914,  1908,  1915,  1907,     0,     0,  1917,   112,     0,  1909,
    1913,  1912,  1890,  1894,  1898,  1891,     0,     0,   274,   277,
     279,     0,   282,  2539,  2537,  2571,  2570,  2575,     0,  2572,
    2568,  2561,  2600,  2565,     0,  2600,  2567,  2566,  2600,  2562,
    2569,  2600,  2534,     0,  1569,  1570,     0,  2504,     0,  2044,
    1014,     0,     0,  1943,  1944,     0,  1132,  1959,  1960,  1956,
    1568,  2491,  2494,     0,   685,  1183,   497,     0,     0,   506,
       0,     0,    68,    69,     0,  1116,     0,  1115,  1119,     0,
       0,     0,  1716,  1706,  1715,  1494,  1929,   112,     0,   241,
     266,   261,   269,   263,   265,   264,   270,   271,   272,   267,
     262,   268,   255,     0,  2537,     0,  2534,  2632,     0,  2634,
    2651,  1156,  2639,  1179,  1158,  1178,     0,  1169,   797,     0,
     800,   802,  1735,  1736,   801,   810,     0,   799,     0,     0,
       0,  2454,     0,   806,   808,   807,  2462,   805,     0,     0,
    2438,     0,     0,  1870,     0,     0,  1834,     0,   580,     0,
       0,     0,     0,     0,     0,  1801,     0,     0,   629,     0,
    1827,  1604,  1868,  1869,  1874,     0,     0,  1874,     0,  1840,
    1864,  1874,     0,  1874,  1796,     0,     0,  1788,  1793,  1789,
       0,  1795,  1794,  1797,  1785,  1786,     0,  1814,  1842,     0,
    1864,  1826,  1833,     0,  1813,  1820,     0,  1831,  1864,  1864,
       0,  1874,  1874,  1035,  1051,  1033,  1045,  1046,     0,     0,
    1038,  1037,  1781,  1497,     0,     0,  2736,  2750,  2734,  2745,
    2746,  2733,  1152,  2643,  1150,  2644,     0,     7,     4,  1880,
    1878,  1887,  1888,   815,   814,   571,   574,   573,     0,     0,
    2063,     0,   917,     0,  1862,   915,     0,     0,  1862,   397,
    1862,   451,   909,  1019,   929,     0,     0,   919,  1074,  1075,
    1078,     0,     0,   485,  1142,  1128,  1144,     0,   202,   204,
       0,  1063,  1062,     0,  1060,  1107,  1106,  1104,     0,  1105,
    1103,  1098,  1100,  1101,  2626,  2630,   581,   814,  1862,     0,
     389,     0,     0,     0,     0,     0,   580,     0,     0,  2676,
     115,   866,   866,   866,  1767,  1695,  1494,  1697,  2043,     0,
       0,     0,  1771,     0,     0,  1574,  1573,     0,  1436,     0,
       0,     0,     0,  1462,     0,     0,     0,     0,     0,     0,
       0,     0,  1273,     0,     0,     0,     0,     0,  1407,     0,
    1436,  1196,  1648,  1649,  1633,  1634,  1632,  1635,  1193,     0,
    1636,  1647,  1363,     0,     0,     0,     0,     0,     0,  1544,
    1545,  1546,  1547,  1555,  1548,  1549,  1550,  1557,  1562,  1551,
    1552,  1558,  1559,  1560,  1553,  1561,  1556,  1554,  1563,     0,
    1543,     0,  1566,  1564,  1567,  1565,     0,  1428,  1420,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1573,     0,     0,     0,  1573,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1373,     0,     0,     0,     0,     0,  1573,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1330,
       0,  2035,  2034,     0,     0,     0,     0,  1291,     0,  1290,
    1506,     0,  2645,  2661,     0,  2454,  1423,  1425,     0,  1198,
    1197,  1199,  1210,  1203,  1208,  1201,  1205,     0,  1257,  2129,
    1211,     0,     0,  1239,  2660,  1582,  1240,  1225,  1230,  1231,
       0,  1228,  1229,     0,  1233,     0,  1232,  1236,  1237,  1238,
    1241,     0,     0,     0,     0,  1280,  1285,  1455,  1182,  2036,
       0,     0,   461,   464,   463,  1688,   462,  1737,     0,  1023,
       0,     0,    74,    76,  1903,  1900,  1899,  1901,  1905,   112,
    1910,  1902,     0,  1918,  2176,  2398,  2401,   286,     0,   259,
     258,   260,   283,     0,     0,  2564,     0,  2545,     0,  2549,
    2543,  2547,     0,     0,  2535,     0,  2541,  1572,  2209,  2293,
       0,  1575,  2508,  1703,  2754,  2412,  1945,  1938,     0,  1957,
       0,     0,     0,  1110,   686,     0,  1182,   495,   494,   493,
     492,     0,   508,   490,     0,    70,     0,     0,  1934,     0,
       0,     0,     0,  1066,  1714,     0,     0,  1694,  1495,  1930,
    1924,     0,     0,     0,     0,     0,     0,     0,  2635,  2653,
    2652,  2640,  1182,  1594,  1183,  1183,  2032,  2469,     0,  2464,
    2463,     0,     0,     0,  2482,  2465,     0,     0,  2432,  2470,
    2471,  2474,     0,     0,     0,     0,     0,  2468,  2395,  2434,
    2435,     0,  2440,  2430,  2488,  2489,  2486,  2487,  2485,  2459,
    1841,     0,  1872,  1875,  1876,     0,     0,  1855,  1849,  1848,
    1838,  1850,  1839,  1859,  1858,  1857,  1811,  1810,  1616,  1617,
    2349,  1615,  1607,  1610,  1614,  1613,  1804,  1865,  1854,  1852,
    1836,  1874,  1809,  1808,  1853,  1851,  1790,  1791,  1792,     0,
    1603,     0,  1870,  1843,  1874,  1864,     0,  1874,  1874,  1856,
    1830,  1832,  1036,  1053,  1052,  1048,  1049,  1054,  1044,  1043,
    1515,  1514,     0,  1469,     0,  1471,  1468,  1467,  1466,     0,
    1514,  2740,  2748,  2752,     0,  1603,  2650,  2648,   572,  1737,
    1737,     0,  2062,     0,     0,     0,     0,     0,     0,     0,
     182,   191,     0,     0,   395,   396,  1737,   394,   437,   438,
     441,   442,   443,     0,     0,     0,     0,     0,     0,     0,
       0,   135,   444,  1737,  1737,   391,   417,   418,   421,   422,
     423,   424,   425,   387,     0,   392,   814,     0,   931,   933,
    2700,  2701,  2702,     0,     0,  1077,  1131,  1123,  1130,  1127,
    1142,  1140,  1129,   856,   855,     0,  1143,   200,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      81,    82,   100,  1692,  1108,  1102,   127,   814,  1737,  1737,
    1737,  1737,   393,   426,   427,   430,   431,   432,   433,   436,
     434,   435,     0,     0,  1862,     0,  2591,  2592,     0,  2590,
       0,  2728,     0,     0,     0,   180,   582,   867,     0,     0,
       0,     0,     0,  1763,     0,  2046,  1770,  1497,  1774,  1773,
       0,  1359,     0,  1400,     0,  1402,  1403,  1404,     0,     0,
       0,     0,     0,  1360,     0,  1305,  1361,  1362,     0,  1356,
       0,  1357,     0,     0,     0,     0,     0,     0,     0,  1406,
       0,  1194,     0,     0,  1308,  1309,  1302,  1294,     0,  1379,
       0,     0,  1310,     0,     0,     0,     0,  1365,     0,  1380,
    1457,     0,  1459,  2036,     0,  1412,  1366,  1315,     0,  1410,
       0,  1316,  1381,  1382,  1383,  1368,  1369,     0,  1385,     0,
    1370,     0,     0,     0,     0,  1318,  1416,  1414,     0,     0,
       0,     0,  1418,  1320,     0,     0,     0,  1319,     0,     0,
       0,     0,     0,     0,     0,  1322,     0,  1303,  1415,  1417,
    1375,     0,  1331,     0,  2654,  1505,  2662,  1506,     0,     0,
    2656,  2646,  2651,  2659,  1295,     0,     0,  2037,  1204,  1209,
    1202,  1206,  2660,     0,     0,     0,     0,  1223,  1222,     0,
       0,     0,  2660,  1582,  1226,     0,     0,  1396,  1397,  1452,
       0,  1680,  1677,  1689,  1738,     0,  2588,  1025,  1024,  1685,
    1023,    77,     0,  1904,  1897,  1919,  1892,     0,   278,   287,
     280,   284,   285,   281,  2604,     0,  2603,     0,  2583,  2586,
    2043,     0,     0,     0,  2518,  2512,  2519,  2521,  2515,  2520,
    2522,  2513,  2514,  2509,  2516,  1576,  1605,     0,  1946,  1133,
    1135,  1136,  1134,  1142,     0,     0,  2497,  2498,  2496,  2495,
     498,     0,   507,     0,   519,     0,   498,  1936,  1935,     0,
    1117,  1120,  1121,  1071,  1070,  1072,  1065,  1067,  1068,   564,
    1720,     0,     0,     0,  1726,  1707,  1717,     0,  1931,  1927,
       0,   256,     0,     0,     0,     0,     0,     0,  1177,  1497,
    1666,  1174,  1162,  1605,  1595,  1161,  1184,  1180,     0,   813,
     812,   811,   809,     0,     0,     0,     0,  2476,  2477,     0,
       0,  2455,  2456,  2457,     0,  2460,  2437,  2438,     0,  2439,
       0,  1871,     0,  1815,     0,  1837,     0,     0,     0,     0,
    1806,     0,  1829,  1787,  1872,  1805,  1575,  1864,  1802,  1803,
    1051,     0,  1034,  1514,  1497,     0,     0,  1489,  1516,     0,
    1516,  1491,  1492,  1497,     0,  1497,  1494,  1511,     0,     0,
    2751,  1596,  2649,     0,     0,   913,   185,   188,   186,     0,
     187,     0,     0,   446,   445,     0,  1862,   439,   139,   138,
     140,   141,  1630,  1631,  1627,  1628,  1626,  1629,   143,   142,
     137,   928,     0,     0,     0,  1862,   419,   398,   399,   402,
     403,   404,  1011,  1737,  1011,     0,  1737,  1737,  1011,  1737,
       0,     0,  1737,  1737,     0,     0,  1737,     0,     0,  1011,
       0,  1737,     0,   998,     0,     0,  1737,  1737,  1737,  1737,
    1737,  1011,     0,     0,  1737,  1737,   485,  1737,     0,     0,
    1029,     0,     0,  1737,  1737,  1737,  1737,     0,     0,  1737,
    1737,     0,  1737,   945,   997,   584,   611,   612,   910,   944,
     946,   958,   481,     0,   976,  1000,  1001,   999,     0,     0,
       0,     0,   149,  2704,  1076,     0,     0,  1535,   203,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1862,   428,     0,     0,  1737,
     388,   405,   406,   409,   410,   411,   412,   413,   416,   414,
     415,     0,  2595,  2597,     0,     0,   382,   381,     0,   144,
    2722,     0,     0,   666,   116,   472,   481,   583,   586,     0,
       0,   868,     0,     0,     0,  1696,  1773,  1497,  1575,  2044,
    1575,     0,  1772,     0,     0,  1401,  1437,     0,  1463,     0,
    1299,   769,   769,   769,  1446,   754,  1450,  1441,   769,  1442,
     769,  1444,     0,     0,     0,  1259,  1274,     0,     0,     0,
       0,     0,  1408,  1405,     0,     0,     0,     0,  1431,     0,
       0,     0,  1304,     0,  1391,  1413,  1411,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1419,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1292,  1182,  2663,  2665,  1153,     0,  2655,  2657,   904,
    1424,     0,  1220,  1216,     0,  1214,  1581,  1235,  1234,     0,
       0,     0,  1224,  1183,  1387,  1182,     0,  1453,  2038,  1678,
     460,   628,  1676,    75,  1895,     0,     0,  2601,     0,  2612,
       0,     0,     0,     0,     0,     0,     0,  2507,  1606,  1747,
       0,  1142,  1146,  2053,  1950,  2500,  2501,  2499,     0,   499,
     500,   502,  1183,   516,   496,     0,   488,   491,     0,     0,
    1069,  1167,     0,  1739,  1724,  1731,  1725,     0,     0,     0,
    1723,  2028,  2027,  2034,  2638,     0,  1541,     0,     0,  2528,
       0,     0,     0,  2641,  1575,  1575,  1660,     0,     0,  1159,
    1164,  1160,  1163,     0,  1181,  1188,  1187,  2029,  2036,  2466,
       0,     0,     0,     0,  2481,  2475,  2472,  2473,     0,  2436,
    2458,  2442,  2441,  2444,  2446,  1640,  1641,  1639,  1637,  1638,
    1873,  1603,  1825,  1824,  1618,  1609,     0,  1612,  1611,  1798,
    1817,  1819,  1874,  1050,     0,  1057,  1055,     0,  2645,  1509,
       0,  1493,  1490,  1517,     0,  1516,  1516,  1497,     0,  1473,
    1751,  1754,     0,  1472,  1568,  1499,  1167,  2741,  2753,     0,
     627,   626,   190,   189,   195,   196,   466,   452,   465,   440,
     136,   453,   454,   420,     0,   400,  1012,   901,   580,   980,
       0,   667,   580,   852,   857,   857,   580,     0,     0,  1111,
       0,     0,  1698,     0,     0,  1111,     0,     0,     0,  1737,
       0,   991,   940,     0,  1698,     0,  1698,  1698,   992,     0,
       0,   941,  1737,     0,     0,     0,     0,     0,  1698,  1111,
       0,     0,     0,   483,     0,  1111,   960,  1032,  1031,  1030,
       0,  1111,  1111,     0,     0,     0,     0,   617,   618,   616,
       0,     0,     0,   609,   585,   814,   942,   482,   943,   666,
       0,  1026,   663,   669,  2039,     0,     0,   159,     0,     0,
     930,     0,   152,   150,   161,     0,     0,  1080,     0,  1079,
       0,  1538,     0,  1539,  1536,  1537,   101,    88,    84,   105,
     106,    86,    87,    91,    90,    92,    93,    96,    97,    94,
      89,    95,    85,   109,   111,   110,    98,   107,   108,    83,
     459,   458,   457,   456,   429,     0,     0,     0,  1862,   407,
    2596,  2594,  2593,     0,     0,  2729,   385,   383,   384,     0,
       0,   205,   644,   645,   643,   642,     0,   473,     0,     0,
       0,   646,   647,   649,   650,  1961,   480,   814,   587,   894,
     896,   895,   882,   881,   117,   120,   123,     0,  1575,  1594,
    2047,  1766,     0,  1332,  1464,     0,     0,   770,  1438,   822,
    1448,     0,  1449,   756,   755,   771,  1440,  1443,  1447,  1445,
    1298,  1306,  1354,     0,  1272,  1355,     0,  1378,  1301,  1300,
       0,     0,     0,  1338,  1339,     0,  1429,     0,     0,  1312,
       0,  1314,     0,     0,  1393,  1367,  1384,  1341,  1371,     0,
    1317,  1293,     0,  1342,     0,  1347,  1345,     0,  1321,     0,
       0,  1328,     0,  1326,     0,  1327,     0,  1329,  1374,  1376,
    1507,  2664,  1154,     0,     0,  1426,  1212,     0,  1221,  1218,
       0,  1215,  1184,  1398,  1388,     0,  1893,   295,   290,   298,
     292,   294,   293,   299,   300,   301,   302,   296,   291,   297,
     289,   288,  2602,     0,  2533,  2585,  2584,  2605,  2605,  2605,
       0,  1577,     0,  1704,  1137,  1142,  1146,     0,  1138,  1961,
     503,     0,     0,     0,   523,     0,   521,   489,  1118,  1182,
    1721,  1733,     0,  1741,     0,     0,  1718,  1728,     0,     0,
       0,  1727,   485,     0,   257,     0,  2525,  2526,  2524,  1605,
    1583,     0,     0,  1672,     0,  1667,  1175,     0,  1186,  1185,
       0,  2484,  2483,  2479,  2478,  2480,  2461,     0,     0,  1816,
    1608,  1603,  1812,     0,     0,  2651,  1568,  1501,  1497,  1470,
    1497,     0,     0,  1478,  1497,  1474,  1476,     0,  1575,     0,
    1533,  1182,  2031,  1597,  1600,   401,   668,   902,  1111,     0,
       0,     0,   857,   662,   901,   901,   866,   858,   580,   580,
     978,  1007,  1008,     0,     0,   595,   592,     0,   604,   961,
     952,   962,   973,   975,     0,   594,   619,     0,     0,   607,
    1698,     0,   989,     0,     0,   589,     0,     0,   638,   639,
     637,   613,   620,  1009,  1010,   590,   591,     0,     0,  1590,
    1592,  1600,   597,   596,  1651,  1650,   606,     0,   593,     0,
     995,   968,     0,   635,   633,   630,   632,   631,   636,   634,
     608,   599,   598,   601,   600,   603,   602,   605,   621,   957,
       0,  1011,  1011,   977,     0,  2042,     0,  1028,   979,     0,
     651,   664,   652,     0,     0,   625,  1644,  1645,  1642,  1643,
     624,  1646,   622,   623,   160,   148,     0,     0,   932,   934,
       0,     0,   935,  2706,     0,  2708,  1082,  1083,     0,     0,
    1145,     0,     0,   102,   104,     0,   390,   455,   408,  2598,
       0,   216,  1182,     0,     0,   206,   208,   209,     0,     0,
     470,   467,   666,  1963,  1962,   469,   567,   588,     0,     0,
       0,  1773,  1768,  1619,     0,  1465,     0,     0,     0,     0,
     816,   827,   825,   819,     0,   823,   824,  1439,     0,     0,
     772,  1451,   736,   769,  1269,   754,  1263,  1265,  1261,     0,
     737,  1264,   769,     0,   822,  1268,  1260,     0,  1409,     0,
       0,  1432,     0,     0,     0,     0,     0,     0,     0,  1296,
       0,  1389,     0,     0,     0,     0,     0,     0,  1325,  1323,
    1324,  1605,  2645,   905,  1217,     0,  1399,     0,     0,     0,
    2610,  2610,  2610,  1746,  1745,     0,  1744,  1748,  1139,  1147,
       0,   501,   504,     0,     0,     0,   520,     0,   565,     0,
       0,     0,  1742,  1730,  2642,  1719,  1722,  2036,  1496,  1542,
    2527,  1166,     0,  1578,  1671,  1668,     0,  1661,  1663,  1665,
       0,  2030,  2443,  2445,  1818,  1056,  1058,  1502,  1500,  1510,
       0,  1466,  1497,  1497,     0,  1466,     0,     0,  1753,  1594,
    1755,  1498,  1530,  1512,     0,  1601,  1602,  1599,   963,     0,
     580,   853,   854,   866,   903,     0,   866,   866,     0,     0,
     951,   982,  1099,     0,   956,   810,   614,     0,   947,   990,
    1023,     0,   615,   984,   949,     0,  1593,   484,   948,   970,
     954,  1918,   981,  1027,   834,   750,   699,   690,   769,   693,
     692,   769,   704,   754,   752,   722,   754,   754,   729,   728,
     746,   732,   712,   822,   822,   711,   749,   822,   733,   731,
     735,     0,   737,   754,   742,   730,   734,   751,   727,   724,
     748,   769,   769,   769,   708,   747,   822,     0,   740,   769,
     670,   773,   710,   822,   829,     0,     0,   769,   771,  2041,
     146,   151,   162,   163,   923,  2705,     0,  2703,     0,  1088,
       0,  1141,  1540,    99,     0,     0,     0,   219,   217,   218,
       0,   212,   214,   209,  2716,     0,  2723,     0,     0,  2721,
     474,  2642,   582,   648,   568,     0,     0,     0,     0,     0,
    1764,  1333,   767,   765,   768,   766,   818,   817,   821,     0,
     820,   829,     0,     0,  1271,  1266,   738,  1270,  1262,  1267,
    1358,  1336,  1337,     0,  1430,  1421,  1364,     0,  1313,  1390,
       0,     0,  1372,  1343,  1346,  1344,  1349,  1350,  1174,  1174,
     640,  2658,  1219,  1920,  2613,     0,     0,  2609,  2607,     0,
    2608,  2606,  2576,     0,  2531,  2532,  2530,  2517,     0,     0,
       0,  1182,   509,     0,   526,   525,   522,  1605,  1732,  1734,
    1740,  1729,     0,  1579,  1594,   803,  1664,     0,  1176,     0,
    1479,     0,  1483,  1488,  1484,     0,  1475,     0,  1619,  1534,
       0,  1605,  1600,   965,     0,     0,     0,     0,     0,     0,
     994,     0,     0,   953,   974,   996,   988,   987,     0,     0,
    1111,  1591,   969,   971,  1066,     0,     0,   838,   698,   691,
     709,   707,   758,   753,     0,   758,   758,   718,   736,   713,
       0,   822,   726,   717,   738,   741,   743,   745,   758,     0,
     822,   706,   705,   715,   702,   758,   781,     0,     0,     0,
       0,   777,     0,   832,     0,   784,     0,   671,   774,   776,
       0,     0,     0,   739,   822,   695,   830,   829,   697,   822,
     829,   758,   758,     0,   153,   936,   322,  2707,  1157,     0,
    2712,     0,  1089,  1085,  1086,  1081,   103,   134,  2720,  2730,
     216,     0,     0,   157,     0,   207,   810,   210,   471,   481,
       0,   476,     0,  1600,   899,     0,     0,  2349,  1620,   828,
     826,     0,  1433,  1600,     0,  1392,  1394,  1508,   641,     0,
    1896,  2582,  2581,  2580,  2577,     0,     0,     0,     0,     0,
       0,  2611,  2615,  1743,     0,     0,     0,   517,     0,   513,
     515,     0,   551,   566,  1587,  1600,     0,  1605,     0,  1669,
    1662,  1503,     0,     0,     0,     0,     0,  1752,  1522,  1523,
       0,     0,  1528,  1532,  1513,  1598,     0,     0,   964,   665,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     993,  2005,  1026,   485,   985,   950,     0,   955,   610,     0,
     837,     0,   842,   762,   763,   764,   719,   759,   761,     0,
     721,   689,   714,   744,   720,     0,   716,   703,   787,   786,
    1189,   779,   794,   674,     0,     0,   785,     0,   775,   783,
     778,     0,   694,   696,   700,   701,   687,   688,  2040,     0,
     155,   348,     0,   334,   320,     0,     0,     0,   324,   164,
     167,   165,     0,   166,   172,     0,   173,   174,   175,   176,
     177,   168,   346,   347,   171,   169,   170,     0,  2056,     0,
    2057,  2710,     0,     0,  2709,  1084,     0,  1091,   183,   213,
       0,     0,   149,   158,  2724,   792,  1961,     0,  2638,   869,
       0,   898,     0,   871,   873,  1621,     0,   757,     0,  1435,
    1311,     0,  2578,  2616,  2619,  2617,  2618,  1623,     0,  2620,
    2614,     0,  1494,  1183,     0,   510,   511,     0,   529,     0,
    1737,  1737,     0,     0,  1737,  1737,  1737,  1737,   544,   552,
     554,     0,  1588,  1589,     0,  1584,  1586,  1580,  1652,   804,
    1964,  2645,  1480,     0,  1485,     0,  1477,  1518,  1518,  1529,
     967,     0,     0,     0,   653,     0,     0,  2007,  2006,   983,
     959,  1026,     0,   835,     0,   839,   840,   841,     0,   833,
     760,     0,   906,     0,     0,   793,  1189,   782,  1182,   791,
     790,   788,   789,   154,     0,   147,     0,     0,   333,   336,
       0,     0,   339,   329,   328,   330,     0,   323,   322,   322,
     376,   327,   373,   372,   365,  2642,     0,     0,     0,  1090,
    1095,     0,  1092,  1094,  2731,   215,  1182,   161,     0,   468,
     478,   477,     0,  1737,   118,   870,   890,   889,   875,     0,
    1600,     0,     0,   121,   872,   892,   879,   124,   874,   891,
     877,  1622,  1600,  1921,  1625,  1624,  1749,  1757,     0,  1951,
       0,   518,   517,   514,     0,   527,     0,     0,  1737,  1737,
       0,     0,     0,     0,     0,   524,   553,  1737,  1600,     0,
    1165,     0,  1972,  1504,     0,     0,     0,  1526,  1524,   966,
       0,   659,   869,   655,   657,   986,     0,   836,     0,     0,
     822,     0,   822,  1190,     0,   780,     0,   156,   349,   360,
     363,   355,   335,     0,     0,     0,   325,   322,     0,   309,
     307,   308,   314,   315,   316,   317,   318,   319,   310,   313,
     311,   312,   322,     0,   224,     0,     0,  2711,     0,  2713,
       0,  1087,     0,   193,   192,   184,     0,   322,  2717,     0,
    2725,  2642,   884,     0,  1002,   876,     0,   897,   900,     0,
    1002,   880,  1002,   878,  1434,     0,     0,   803,   505,   512,
     537,   530,   533,     0,   563,   557,     0,     0,   559,   560,
     558,   555,   548,     0,   546,     0,  1585,  1653,     0,     0,
       0,     0,  1965,  1967,     0,  1670,  1482,  1487,     0,  1519,
       0,     0,     0,   661,   869,   654,   871,   873,     0,   848,
       0,   847,     0,   844,   843,   723,   907,   725,  1191,   675,
       0,     0,   322,   356,     0,   331,     0,     0,     0,     0,
     222,   379,     0,   220,   367,   367,  2714,  2715,  1093,   194,
    2732,     0,   163,   183,   479,   883,   119,  1004,  1003,   888,
     887,   885,   886,   893,   122,   125,  1756,  1758,  1952,   537,
       0,   535,     0,   531,   528,   532,   561,   562,     0,   545,
       0,   556,     0,     0,     0,     0,     0,  1966,     0,     0,
    1973,  1975,  1521,  1520,  1535,     0,   660,   656,   658,   972,
     850,   851,   849,     0,     0,   677,   676,   678,   357,   363,
     353,   361,   322,     0,     0,   321,   340,   375,   223,     0,
     377,     0,   322,     0,   366,   368,   370,     0,   145,  2726,
    1006,  1005,  1978,   534,     0,   542,   538,   540,   543,   551,
     550,   547,  1182,  1970,  1971,     0,  1968,     0,     0,  1974,
       0,     0,     0,     0,     0,   682,   672,   679,   681,     0,
     354,     0,     0,   352,   332,   337,   322,     0,   322,   235,
     234,     0,   226,   303,   374,     0,   225,  2718,   322,     0,
    1964,   536,     0,     0,   549,     0,     0,  1656,  1658,  1969,
    1977,  1976,  1527,  1525,   846,   845,   684,   683,   680,   358,
       0,   322,     0,   322,     0,   322,     0,     0,     0,     0,
       0,   221,   322,  2727,     0,  1972,   541,   539,  1183,  1654,
    1182,     0,   350,   322,   338,   343,   380,     0,   229,   304,
     305,     0,   232,  2719,     0,  1980,  1659,  1657,   322,   322,
     339,   342,   378,     0,     0,   227,   228,   240,   239,   231,
       0,  1979,     0,  1984,   322,   322,   344,   248,   246,   322,
     236,   244,   238,     0,   245,   306,   233,     0,     0,  1991,
       0,   230,   247,  1982,  1983,  1981,  1986,     0,     0,  1988,
    1989,     0,  1953,   237,  1990,  1985,     0,  1992,  1994,     0,
    1987,     0,  1182,  1993,     0,  1183,  1995
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,    59,   618,  1518,    60,    61,    62,    63,    64,  1362,
      65,   829,  1282,  1802,  1803,    66,   558,    67,  1560,  2100,
    2101,  3402,  3403,  2102,   651,   652,    68,  2136,  3428,  4334,
    3429,  4340,  3430,  4342,  1577,   526,   527,  2040,  2041,  1086,
    3050,  2990,  3874,  2994,  4030,  4175,  4072,  2058,  3392,  3875,
    3876,  4039,   553,  2134,  1532,  4204,  2020,  4325,  2021,    69,
     649,  1059,  1557,  1558,  3414,  3415,  3688,  3416,  3680,  3681,
    3682,  3683,  4492,  4297,  4413,  4493,  4578,  4613,  4619,  4620,
    4541,  4629,  4630,  4631,  4617,   902,  4632,    70,   581,   582,
     904,  1392,  1817,  1393,    71,    72,   552,  1308,  1309,  1310,
    1311,  2313,  1818,  2308,  2309,  3180,  4542,  4615,  4298,  4299,
    4182,  4300,  4042,  4301,  4186,  4302,  4045,  4303,  4304,  4305,
    4306,  4484,  4307,  4181,  4534,  4294,  4295,  4536,  4595,  4611,
    4308,  4052,  4176,  4400,  4053,  4177,  4479,  4290,  4480,  4529,
    4591,  4291,  4401,  4532,  4404,  4309,  4315,  4494,  4310,  4316,
    4311,  4057,  4193,  4314,  4191,  4313,  4538,  4489,  2628,  3049,
     636,   637,   662,  2124,   638,  1075,  1029,  1534,  2053,  2054,
    2497,  2498,  2610,  2611,  2612,  2045,  2046,  2047,  2112,  2113,
    2114,  2027,  2028,  2029,  1538,  2024,  2025,   639,  1030,  1040,
    2048,  2049,  2050,  2616,  2116,  2117,  2118,  2119,  2051,  1795,
    2052,  2897,  2634,  3692,  3691,  2635,  3425,  4078,  4331,  3065,
    3066,  2977,  3337,  2071,    73,   570,   882,  1359,  2355,  1360,
    2778,  2779,  2780,  1857,  1858,  3762,  1862,  2354,  3937,  4242,
    3938,  3939,  2782,  4105,  2786,  3205,  3206,  3515,  3764,  3942,
    4353,  4244,  4444,  4351,  4440,  4352,  4442,  4553,  4506,  4507,
    4255,  4363,  4364,  4448,  4509,  4118,  4119,  4120,  2374,  2791,
    3767,  3695,  2106,  1524,  1525,   528,   529,   530,  3285,  2636,
    2554,  2637,  2638,  3360,  2556,  2557,  2750,  1447,  3350,  3321,
    3738,  3056,  3060,  3061,  3062,  3063,  3064,  4272,  4386,  4387,
    4384,  3370,  3283,  2910,  2911,  2982,  3373,  3650,  3856,  4477,
    4526,  4527,  4528,    74,   879,  3896,  3824,  3839,  3652,  3653,
    3654,  3655,  3656,  3657,  3658,  3092,  3093,  3996,  3997,  3998,
    3087,  3088,  3451,  3857,  3858,  3859,  3897,  4011,  1206,  3444,
    1414,  1415,  3949,  1425,  1426,  2400,  1899,  2401,  1528,  3445,
    3446,  3447,  3868,  3860,  3372,  3817,  3989,  3992,  4159,  4393,
    2912,  3284,  2913,  3288,   980,   531,  2914,  2915,  2137,  2138,
    4214,  4223,  4227,  4215,  4228,  4224,  4216,  4217,  4218,  4230,
    4226,  3072,  3902,  3903,  3276,  3286,  3155,  4161,    75,   129,
    2056,  1023,  1032,  1028,  1051,   644,  1544,  2059,  2572,  3664,
     626,  2558,  3810,  3582,  3814,  2559,  3300,  2560,  3793,  3968,
    2561,  3599,  3812,  3986,  3301,  3302,  2562,  2563,  2564,  3802,
    3809,  4151,  4426,  4427,  4428,  2916,  1341,   641,   642,  1044,
    1045,  1046,  2299,  3368,  2960,    76,  1987,  1982,    77,   992,
     993,   994,  1493,  1494,  1985,  1986,  2442,  2866,    78,   654,
    1564,    79,  1370,  2366,  2367,  2368,    80,  1052,  1548,  1549,
    2065,  2999,  3398,  3669,  3885,  4067,  3881,  4201,  4202,    81,
      82,   655,  1571,  1572,  1573,    83,  1353,   136,    84,   890,
    1365,  1367,  1368,    85,   648,  1053,  1054,  1055,  1056,  2067,
      86,  1848,  2339,  2340,  2341,  2342,  1554,  2576,  1555,  1556,
    2076,  3198,    87,    88,   615,  2259,   587,   911,   588,   589,
    1893,  2391,  3739,   922,   923,   924,  2819,  1404,  1405,  1406,
    1854,  2824,  4165,  1139,  1136,   793,   794,   795,   796,  1230,
    1231,  3861,   797,  1240,  1761,  3104,  3466,  1622,  1623,   798,
     799,   800,   801,   802,   803,  1788,  3123,  3124,  3481,  2286,
    2287,  2288,   804,  2178,  3110,  2191,   805,  1223,  1746,  1678,
    3473,  3116,  3723,  3912,  1607,  2154,  2672,  3095,  2746,  2253,
    1161,  1162,  1121,  2161,  1613,  1993,  1994,  1995,  1996,  1997,
    3556,  3557,  3952,  3781,  3954,  3785,  2452,  2453,  1877,  1878,
    1998,  1999,  2867,  3779,  4131,  2254,  2255,  2256,  3491,  2868,
    3258,  2885,  2886,  3791,  2443,  2000,  2874,  4267,  3961,  3962,
    4382,  4381,  3963,  3789,  3790,  3561,  3562,  3002,  3003,  3004,
    2805,  1669,  1670,  1676,  1336,  1337,  1608,  2336,  2766,  3774,
    3946,  2277,  3533,  3944,  4125,  2567,  3329,  3330,  2393,  2394,
    2889,  3273,  3567,  1450,  3740,  2768,  1952,  2854,  2855,  3700,
    4099,  4618,  2898,  2850,  3380,  1640,  1641,  3336,  4260,  4452,
    4556,  4557,  4558,  3233,  3234,  3537,  3538,  2395,  2816,  3235,
    3775,  4130,    89,   535,    90,  1800,  2749,  1279,  2305,  1063,
    1372,  1594,  1595,   817,   548,    91,   559,  2337,    92,   577,
    1875,   869,   894,  1373,  1374,  2375,  2792,  2799,  2376,  2804,
    3524,  2794,  3210,  3211,  2294,  2295,  2795,  3213,  3521,  3505,
    3506,  3193,  3759,    93,   603,  3268,  2880,  2881,  4236,  4237,
     895,    94,   534,  1108,  2648,  1600,  2142,  1109,  1110,  2145,
     680,   681,    95,   997,   599,  1473,  1474,  1475,  1970,    96,
     591,   981,  2851,  3251,  1946,   886,  1275,  1454,   984,  1455,
    1932,  2423,  1436,    97,  1019,  1018,    98,   622,  1520,    99,
     830,  1302,  1813,  2754,  3166,  1303,  1304,  2306,  3920,   100,
     578,   899,   900,  1377,  2379,   101,   572,   887,  1868,   102,
     562,   874,  1345,  1847,   103,   104,   105,   876,  3199,  4347,
    4502,   566,  1850,  1349,  3426,  4262,  4372,  4373,  4375,  4460,
    4461,  4550,  4623,  4645,  4639,  4648,  4649,  4652,  4657,  4658,
     807,  1006,   808,  3980,   809,   810,   811,  2800,  2801,  3274,
     812,  2802,   813,  2983,  1064,  1597,   556,   506,   633,  1007,
    2774,   815,  4059,  1026,  1079,   508,   509,   106,   590,   938,
    1430,  1420,  1429,  1919,  2417,  1923,  2419,  2420,  3247,  2842,
    3248,  2843,   986,  1915,  1920,  2844,   941,  1908,  1909,  1910,
    1911,  2835,  1905,  1929,   107,   877,   513,  1351,  1352,  2348,
     108,   602,   109,  1338,  1841,  1842,  2333,  2765,  2334,   110,
     907,   111,   856,  1835,   857,  1314,   858,   859,  1328,  1322,
    1331,  1325,  3925,  3751,  3752,  2321,  1278,  1080,  2128,  3043,
    1081,  1827,  2315,  2316,  3500,  3754,  3184,  3931,  3932,   112,
     137,   516,   657,  1070,  1398,   113,   114,   115,   116,  1401,
    1513,  2387,  1514,  2260,  1515,  1516,  2007,  1891,  1742,  1743,
    3153,  1220,  1221,  2263,  2722,  2723,   925,   666,  1096,  1088,
     130,   131,   132,   669,   670,   133,  1049,  1050,  2573,  2996,
    3394,  3667,  3668,  3880,  4064,  1090,  3892,  4421,  4582,  1091,
    1092,  3051,  3894,  4208,  4423,  4548,  1093,  2625,  3411,  4068,
    4327,   117,  1008,   612,  1511,  1506,  1508,  2003,  2460,   118,
     119,   120
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -3938
static const int yypact[] =
{
    5430,  2384,    71, -3938,  -161,   752, 54400,   100,   646,   646,
    -184,  2655, -3938, -3938, -3938, -3938, -3938,  3054, -3938, 54400,
      71,   967, -3938, 25519, -3938, -3938,   -64, -3938,    59,   646,
      71,   434, -3938, 54400, -3938,   705,  1228,    71, -3938, -3938,
   47503, -3938,  -184, 54400, -3938, -3938, -3938, -3938, 47503,   249,
     228,   616,   -52, -3938, -3938, 54400,  2366, -3938,  -180,  1214,
    1065, -3938, -3938,   931, -3938, -3938, -3938, -3938, -3938, -3938,
   -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938,
   -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938,
   -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, 26150, -3938,
   -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938,
   -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938,
   -3938,  1189, 54400,  1247, 54400,  1411, 54400, 45622, 54400, -3938,
    1460, -3938, -3938,  1531, -3938, -3938,   646,  -184, -3938, -3938,
   -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938,
   -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938,
   -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938,
   -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938,
   -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938,
   -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938,
   -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938,
   -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938,
   -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938,
   -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938,
   -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938,
   -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938,
   -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938,
   -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938,
   -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938,
   -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938,
   -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938,
   -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938,
   -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938,
   -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938,
   -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938,
   -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938,
   -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938,
   -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938,
   -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938,
   -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938,
   -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938,
   -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938,
   -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938,
   -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938,
   -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938,
   -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938,
   -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938,
   -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938,
   -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938,
   -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938,
   -3938, -3938, -3938, -3938, -3938, -3938, -3938,  1044, -3938, -3938,
    -161, -3938, -3938, -3938, -3938, -3938,  1663,  1481, -3938,  1529,
   45622, -3938, 54400, -3938, -3938, -3938,   206, -3938,  1219, -3938,
    1238,  1564,  1617,  1625,   879, 12057,  1653,  1653,  1653,  1653,
    1638,  1653,  1653, 54400, -3938,  1653, -3938,  1653,   646, -3938,
   -3938, -3938,  1754,  3210, 54400,  1522,   153,  -117, 45622,  1068,
   54400,  -161,    36, -3938,  1695, -3938, -3938, -3938,   646, -3938,
    1883,  1705,   986, 54400, -3938, -3938,   646,  1062,   -16,  1322,
   -3938, -3938,  1482, -3938,  3508,   185, -3938, -3938, -3938,  2048,
   28043,  5634,  1482,  1466,  -161,  -121,  1485,  -161, -3938, -3938,
   54400,  -161,   646,  1724, -3938, -3938,   253,   253,   253, -3938,
     253, -3938,   253, -3938,  -180,  1374, -3938, -3938,  1386, 54400,
     567,  1145, -3938, -3938,  1376,   -71, -3938,  1459, 43114, -3938,
   54400, -3938, -3938, -3938, -3938,  1673, -3938, -3938, -3938,  2314,
   -3938,  1514,    84, 54400,  1550, -3938, -3938, -3938, 25519,  1426,
   54400,  1506, -3938, -3938, 25519, 25519,   189,   935,  1473, 54400,
   54400,  1891, -3938,  2089, 43114,  1636, -3938,   179,  1210,  1531,
    2086, -3938,  1481, -3938,  1481,  1481,  1481, -3938, -3938, -3938,
   48130,   879,  1446,  1465,  1468, 17249, -3938,  1480,  1494,  1501,
   12057,  1507,  1509,  1512,  1523,  1530,  1532,  1540,  1543,  1554,
    1565,  1576,  1590,  1595,  1597,  1597,  1600,  1624,  1626,  1630,
    -209,  1635, -3938,  1642,  1650,  1665, -3938, -3938,  1669,  1680,
    1692, -3938, -3938,  1728,  1730,  1738, 12706,  1766,  1768,  1770,
   -3938, 22355,  1772,  1776,  1780,  1782,  1792,  1794,  1808,  1811,
    1819, -3938, -3938, 12057,  1600, -3938, -3938,  1833, -3938,  1841,
    1864,  1871,  1874,  1884,  1888,  1905,  1909,  1914,  1928,  1937,
    1939,  1943,  1968,  1970,  1977,  1600, -3938,   651,  1986,  1995,
    1018,  2017, -3938,  2020, -3938,   323,  2030,  1597,  1600,  1600,
    2032,  2047,  2061,  2067,  2069, 17249, 17249, 17249, 12057, -3938,
   54400, -3938, 54400,   478,  3012, -3938,  2546, 17249,  1001, -3938,
   -3938, -3938, -3938, -3938, -3938, -3938,  1458,  1559, -3938, -3938,
   -3938, -3938, -3938, -3938,  2072,  1479,  1985, 54400, 54400, 54400,
   54400, 54400, 54400, 45622,  1664, 54400, 43114, -3938,  1653,  1702,
    4331, 31193,  1852,  1715,  1762, -3938, -3938, -3938, -3938, -3938,
    2026, -3938, -3938,  1737, -3938,  1946, -3938, -3938,   402, -3938,
     130, -3938, -3938, -3938, -3938, -3938, -3938,  2027,  1851, -3938,
   -3938,   132, -3938, -3938, 54400, -3938, -3938, -3938, -3938,  2270,
    2190, -3938, -3938, -3938,   159,  2471,   187, 25519, -3938,  2078,
   12057,  1682, -3938,  -177, -3938, -3938,  2451, -3938, -3938, 43114,
   25519, -3938, -3938, -3938, 22988, -3938, -3938,  2687, -3938,  2094,
   -3938, -3938,  1559,  2966, -3938,  1852,  2377, -3938,  2379,  2282,
     935,  2172, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938,
   -3938, -3938,  2127,  2048, -3938, -3938,   424,  2284,  2121,   465,
     743, 38725,  1076,   746,    51, 28673, 39352,  2131, -3938, -3938,
   -3938,    75,  2294, -3938,  2632, -3938, -3938,   876, -3938,  2170,
    1075,   876, 43741,  2549,   174, -3938,   136, -3938,  2630, -3938,
   -3938, -3938, -3938, -3938,  2299,  2293,  2338, -3938,   144,  2447,
   -3938,  -161, -3938,   864, -3938, -3938,  2342, -3938,  2549,   876,
     174, -3938,  2589,  2713,   549,  2681,   817, -3938, -3938, -3938,
    -114,  2785, -3938,  2231, -3938, -3938, -3938, 25519, -3938, -3938,
   -3938,  2270, -3938, -3938, -3938, -3938,  2234, -3938,  2511,  2344,
   -3938, -3938,   858, -3938,  2241,   989,  2731, -3938,  1155, 39979,
   -3938, -3938, -3938,  2763,  2780,  1597,  2252, -3938, -3938, -3938,
    2902, -3938, -3938,  2264,  2801,  2801,  2801,  2915, -3938, -3938,
   -3938, 25519, -3938, -3938, -3938,    84, -3938, -3938,  2444,  2308,
   -3938,  1550, 25519,  2677,  2278, -3938, -3938,  2534, 12057, -3938,
   -3938, -3938,     4, -3938, -3938,  1231, -3938,  2888,  2504, -3938,
   -3938, -3938, -3938,  2771, -3938, -3938,  2902,  2832,  2801,  2723,
    2309, -3938, -3938, -3938, -3938, -3938, -3938,   229, -3938, -3938,
   -3938, -3938, -3938, -3938, -3938,   230, -3938, -3938, -3938, -3938,
   -3938,  1550, -3938, 25519, 54400, 54400, 54400, 25519, -3938,  2312,
   -3938,  2302, -3938, 12057, 12057,   320,  2895,  2948,  2948,  2948,
     478,  2349, 12057, 12057, 12057, 12057, 12057, 12057, 12057, 12057,
   12057, 12057, 12057, 12057,   324,  2323, -3938, -3938,  1586, -3938,
    2329, 12057, 12057, -3938, 12057, 12057, 26781, -3938,  3782, 12057,
     333,  2833, 12057, 12057, 12057, 12057,  2496, 12057, 12057, 12057,
   26781,  2967,  2334, -3938,  2330,  1104, 12057, 12057,  1578, 12057,
   12057, 12057, 12057, 12057, -3938, -3938, 12057, 12057, 12057, 12057,
   17249, 12057, 12057, 12057, 12057, 12057,  2354, 12057,  2948,  2948,
   12057, 12057,  1582, -3938, -3938, 12057,  2154,  2154, -3938, 12057,
    8812, 12057, -3938, -3938, -3938, -3938, -3938,  2356, -3938, -3938,
   -3938, 26781,  2948,  2948, 12057, 12057,  2895,  2895,  2895,   177,
    2357,  1173, 12057, 29303,  2331, -3938, -3938, -3938, -3938, 12057,
   12057, 12057, -3938, 17249, -3938, -3938,    83, -3938, -3938, -3938,
   13355, 17249, 17249,  2343, 17249, 17249, 17249, 17249, 17249,  2733,
   17249, 17249, 17898, 18547, 17249, 17249, 17249, 17249,  1315,  2895,
   45622, 17249, 12057, -3938, -3938, 54400, -3938, -3938, -3938,  2353,
    2623,  1664, -3938, -3938,   -85,  2845, -3938, -3938,  2361, 25519,
   -3938,  2358, -3938,  2725, -3938, -3938,  2727,  2732,  2734, -3938,
   -3938, -3938, -3938, -3938,  2971,  2740, -3938,  -161,  2741, -3938,
   -3938, -3938, -3938,  2370, -3938, -3938, 19196, 45622, -3938,  2382,
   -3938,  2876, -3938, -3938, -3938, -3938, -3938, -3938,  2507, -3938,
   -3938, -3938,  2409, -3938, 43114,  2409, -3938, -3938,  2409, -3938,
   -3938,  2409,   890,  3898, -3938, -3938, 54400, -3938, 55027, -3938,
   -3938, 22988,  -161, -3938, -3938, 14004, -3938, -3938, -3938,  2776,
     180,  2411, -3938, 25519, -3938,   478, -3938,   113,   113,  2667,
    1283, 45622, -3938, -3938,   196,  2418,  2508,  2427, -3938,  2515,
   25519, 25519, -3938, -3938, -3938,  2682, -3938,  -161,   -16, -3938,
   -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938,
   -3938, -3938,  2436,  2921,  2445, 43114,   940, -3938, 54400, -3938,
    1591, -3938, -3938, -3938,  2449, -3938, 12057, -3938, -3938, 54400,
   -3938, -3938, -3938, -3938, -3938,  3026, 12057, -3938, 43114,  1117,
     811,    41,    75, -3938, -3938, -3938, -3938, -3938, 54400, 48757,
    2452,  9461,  2573,  2852,  -161, 12057, -3938,  2467,  1481, 54400,
   54400, 54400, 25519, 54400, 25519, -3938,  1335,  1335, -3938, 40606,
   -3938, -3938, -3938, -3938,   876, 54400, 54400,   876, 43114, -3938,
     174,   713, 54400,   876, -3938,  2861,  2572, -3938, -3938, -3938,
    2935, -3938, -3938,  2926,  2474, -3938,  2952, -3938, -3938,  2597,
     174, -3938, -3938, 25519, -3938, -3938,   174, -3938,   174,   174,
   12057,   876,   876, -3938,  1126, -3938, -3938, -3938,  2629,  -121,
   -3938, -3938, -3938,  1032,   253,  2730, -3938, -3938, -3938, -3938,
   -3938, -3938, -3938, -3938, -3938, -3938,    57, -3938, -3938, -3938,
   -3938, -3938, -3938, -3938,   124, -3938, -3938, -3938,  1875,  2996,
   -3938, 45622,  3149,  -129,  1118,  3149,  1832,  -161,   344, -3938,
     344, -3938, -3938, -3938,  2769,   183, 25519, -3938,  2495, -3938,
    2743, 49384, 25519, -3938, -3938, -3938,   969,  2499,  2500,   478,
    4398, -3938, -3938, 25519, -3938, -3938, -3938, -3938,  2551, -3938,
   -3938, -3938, -3938,  1230, -3938, -3938, -3938,   197,  2336,  2525,
    2552,   175, 43114,  2954, 54400, 54400,  1481, 54400, 54400, -3938,
   -3938, -3938, -3938, -3938,  2510, -3938,  2682, -3938,  -227, 54400,
    2959, 33709, -3938,   302,   401, -3938,  2948,  2513, -3938,  2514,
    2518,  2522, 12057,    76,   342,   829,  -214,  1264,   903,   325,
     958,   369, -3938,  1308,   381,   445,   457,   202, -3938,  2524,
    2531, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938,  2526,
   -3938, -3938, -3938,   488,   505,  1116,  1133,  2528,  2533, -3938,
   -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938,
   -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938,  2994,
   -3938,  1366, -3938, -3938, -3938, -3938,  2544, -3938, -3938,  1157,
     540,   580,   219,  2554,  1400,   614,  1537,  1562,  2556, 26781,
   54400,  2948,  2548,  1167,  1236,  2948,  2561,   694,  1259,  1580,
    1611,  1658,  1276,  1294,   750,  1661,  2709,  1357,   774,   784,
     840,   860, -3938,  1359,  2563,  2564,   884,   208,  2948,  2565,
     221,  2550,  2568,  1369, 10110, 10759, 11408,   373,   896, -3938,
    2574, -3938,  2330,  2583,  2587,   271,  1377, -3938, 12057, -3938,
   -3938,  1183,    67,  2628,   146,    41, -3938,  2751, 54400,  2319,
     161, -3938, -3938, -3938, -3938, -3938, -3938,  1141, -3938,  2598,
   -3938,  2601,  1834,  2575, 12057,  1070,  2575,  2784,  1027,  1027,
   17249,  2045,  2062, 12706,   968, 12706,   968,  2575,  2575,  2575,
   -3938, 17249,  2602, 17249, 17249, -3938,  2895,   478,  2603,   597,
   54400, 25519,   -85, -3938, -3938, -3938, -3938,    75, 43114,   134,
   25519, 45622,  2610, -3938, -3938, -3938, -3938, -3938, -3938,  -161,
   -3938, -3938,  3906, 25519,  2692,  2703,  2704, -3938, 31823, -3938,
   -3938, -3938, -3938, 31823,   -19, -3938, 54400, -3938,  2695, -3938,
   -3938, -3938, 23619, 23619, -3938, 23619, -3938, -3938,   265,   277,
    3568,  2643, -3938, -3938, -3938, 33080,   478, -3938, 25519, -3938,
    3028,   763, 25519,  2621, -3938,  2625, -3938, -3938, -3938, -3938,
   -3938,  2570,  2737, -3938,  2627, -3938, 12057,  -161, -3938, 43114,
   43114, 25519, 25519,   684, -3938,  1693,  2635, -3938, -3938,  3269,
   -3938,  2966, 19196,  3074,  3087, 23619, 23619, 23619, -3938, -3938,
   -3938, -3938, -3938,  1325,   478, -3938,  2631, -3938, 44368, -3938,
     478,    75,  2640,  2641, -3938, -3938,  3020,   697, -3938,  2645,
    2649, -3938,  2646,  2647,  2651, 50011, 12057, -3938,   811, -3938,
   -3938,    75, -3938, -3938, -3938, 17249,  1642, -3938,   478, -3938,
   -3938,  -161,  3102, -3938,   478,  2660, 54400, -3938, -3938, -3938,
   -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938,
    3128, -3938,  2853,   792, -3938, -3938, -3938, -3938, -3938, -3938,
   -3938,   876, -3938, -3938, -3938, -3938, -3938, -3938, -3938,  2890,
    2549,  2447,  2852, -3938,   876,   174, 25519,   876,   876,   478,
   -3938, -3938, -3938, -3938, -3938,  2672, -3938,  2735, -3938, -3938,
   -3938, -3938, 54400,  3284,  2837, -3938,  2679, -3938, -3938, 25519,
   -3938,  2680, -3938,  3130,  3281,  2549, -3938, -3938, -3938,    75,
      75,  2983, -3938,  -161,  2816,  2817,  2821,  2822,  2823,  2865,
   -3938, -3938,  -161,  -161, -3938, -3938,    75, -3938,  1418, -3938,
   -3938, -3938, -3938,  -161,  -161,  -161,  -161,  2838,  -161,  -161,
    1709, -3938, -3938,    75,    75, -3938,   248, -3938, -3938, -3938,
   -3938, -3938, -3938, -3938,  1206, -3938,  4454,   148, -3938,  2908,
   -3938, -3938, -3938, 25519,  3162, -3938, -3938, -3938, -3938, -3938,
   -3938, -3938, -3938, -3938, -3938,  2712, -3938, -3938, 12057,  3195,
    3198,  3200,  3202,  3205,  3206,  3215,  3219,  3220,  3222,  3226,
    3227,  3228,  3229,  3234,  3235,  3237,  3238,  3239,  3240,  3241,
    2761, -3938, -3938, -3938, -3938, -3938, -3938,   222,    75,    75,
      75,    75, -3938,  2276, -3938, -3938, -3938, -3938, -3938, -3938,
   -3938, -3938, 45622,  3091,   186,   604, -3938, -3938, 45622, -3938,
   54400, -3938,   391, 54400,  2764,  -171,  5777,  1153,  3039,  3041,
    3042, 54400,  2811, -3938, 33709, -3938, -3938,  1032, -3938,  2762,
   14653, -3938,  2773, -3938, 12057, -3938, -3938, -3938,   347, 12057,
   12057,  3271,  2365, -3938, 44995, -3938, -3938, -3938, 12057, -3938,
   12057, -3938, 12057, 12057, 12057, 12057, 44995,  2365, 12057, -3938,
    2788, -3938,  3185,  3191, -3938, -3938, -3938, -3938, 12057, -3938,
   12057, 12057, -3938, 12057, 12057, 12057, 12057, -3938, 12057, -3938,
   -3938, 17249, -3938,  2786,  2791, -3938, -3938, -3938,  2800, -3938,
   12057, -3938, -3938, -3938, -3938, -3938, -3938, 12057, -3938, 12057,
   -3938, 12057, 12057, 12057, 12057, -3938, -3938, -3938, 15302, 12057,
   12057,  2803, -3938, -3938, 12057, 12057, 12057, -3938, 12057,   898,
   12057,  1312, 12057,  1430, 12057, -3938, 12057, -3938, -3938, -3938,
   -3938, 12057, -3938,  1714, -3938, -3938,  2221, -3938,  1183,  2812,
   -3938, -3938,  1591, -3938, -3938, 45622, 12057, -3938, -3938, -3938,
   -3938, -3938, -3938, 17249,   291,  2813, 17249, -3938,  2784,  2496,
    2496,  1957, 12057,  1070,  2784, 12057,  2826,  2810, -3938, 12057,
   54400, -3938, -3938, -3938, -3938, 45622, -3938, -3938, -3938, -3938,
     134, -3938,  2358, -3938, -3938,  2621, -3938,  3297,  2820, -3938,
   -3938, -3938, -3938, -3938, -3938,  1722, -3938, 43114,  2828, -3938,
    2829,  2906,  2912,  2918, -3938, -3938, -3938, -3938, -3938, -3938,
   -3938, -3938, -3938, -3938, -3938, -3938,  2549,  1693, -3938, -3938,
    2841, -3938, -3938,  2534,  2919,  2866,  3217,  3406, -3938, -3938,
   54400, 17249, -3938,  3449,  2859,  2863, 54400,   478, -3938,  2945,
   -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938,   744, -3938,
   -3938,  2870,  2870, 21091, -3938, -3938, -3938, 54400, -3938, -3938,
    3352, -3938,  3131, 43114,  3321,  3323,  3329,  1155, -3938,    -2,
   -3938,   173,  3280,  2549, -3938,  3331, 46249, -3938, 34336, -3938,
   -3938, -3938, -3938,  1117,  2972,  2973,   -65, -3938, -3938,  3279,
    3106, -3938, -3938, -3938,    75,   478, -3938,  2452,  9461,  2887,
   29933, -3938,  1470, -3938,    43, -3938, 41233,  3363, 41233, 41233,
   -3938,  3173, -3938, -3938,  3102, -3938,  2643,   174, -3938, -3938,
    1126,  2604, -3938, -3938,  1196,  3286,  3287, -3938,  3159,  2118,
    3159, -3938, -3938,  1196, 26781,  1032,  2682, -3938,  2838,  3218,
   -3938, -3938, -3938, 44368, 41860, -3938, -3938, -3938, -3938,  3429,
   -3938,  3433,   198, -3938, -3938,  2596,  1118, -3938, -3938, -3938,
   -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938,
   -3938, -3938,  1832,  2596,  2596,   344, -3938,   127, -3938, -3938,
   -3938, -3938,  2584,    75,  3471,  3165,    75,    75,  3471,    75,
    3169,  3170,    75,    75,  3000,  3428,    75,  3312,  3023,  1952,
    3315,    75,  3180, -3938,  3031,  3439,    75,    75,    75,    75,
      75,  3471,  3186,  3535,    75,    75, -3938,    75,  3188,  3189,
     182,  3190,  3201,    75,    75,    75,    75,   170, 54400,    75,
      75,  3203,    75, -3938, -3938,  7119, -3938, -3938, -3938, -3938,
   -3938, -3938,   755, 24253, -3938, -3938, -3938, -3938,    75,    24,
     286,  3027,   255,  2951, -3938,   356,  2953, 50638,   478,  2955,
    2838,  -161,  -161,  1470,  -161,  2838,  -161,  -161,  -161,  -161,
    -161,  -161,  -161,  2838,  2838,  -161,  1020,  1856,  -161,  2838,
    4398,  -161,  2570,  2596,  2596,  2336, -3938,  3231,  3396,    75,
   -3938,  2092, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938,
   -3938,  3056, -3938,   137,  3150,  2970, -3938, -3938,   311, -3938,
   -3938,  1185, 25519, 19829, -3938, -3938,  3223, -3938,  4779,   970,
     970, -3938, 25519, 25519, 25519, -3938,  2963,  1032,  2643,  1345,
    2643,  2978, -3938, 12706,  1402, -3938,   478, 12057,   478,  1583,
   -3938,  2976,  2976,  2976, -3938,  2979, -3938, -3938,  2976,  3381,
    2976,  3383,  2989,  2990,  1732,  1450, -3938,  1742,  1516,  1412,
    2991,  2992,  1458, -3938, 12057, 12057,  1463,  1477,  -130,   928,
     965,   337, -3938,  1487,  2917, -3938, -3938,  1503,  1536,  1545,
    1567,  1017,  1569,  1750, 12706,  1618,   688,   355, -3938,  1620,
    1067,  1074,  1655, 12057,  1671, 12057,  1675, 12057,  1685,  1708,
    1756, -3938,  2127,  2221, -3938, -3938,  2997, -3938, -3938,  2993,
     478,  2998, -3938, -3938, 12057, -3938,  1001, -3938, -3938, 17249,
     359,  3001, -3938,   478, -3938, -3938,  3002,  1458, -3938, -3938,
   -3938, -3938, -3938, -3938,  3030,  3603, 31823, -3938, 54400,  -242,
    3009, 34963, 43114, 43114, 43114,  3010, 12057, -3938, -3938,  3282,
   25519, -3938,  3427, -3938, -3938, -3938, -3938, -3938,  3016,  3018,
   -3938, -3938, -3938,  2784,  3392,  3274, -3938, -3938,  3025, 43114,
   -3938,  2048, 26781, -3938,  3033, -3938,  3033,  1161,  3029,  1842,
   -3938, -3938, -3938,  3019,  2172,  1845, -3938, 19196,  3477,  2361,
   43114, 43114, 43114, -3938,  2643,  2643,   107,  3080,  3437, -3938,
   -3938, -3938, -3938, 51265, -3938, -3938, -3938, -3938,  1037, -3938,
    3032,  3043,   214,  3250, -3938, -3938, -3938, -3938,  9461, -3938,
   -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938,
   -3938,  2549, -3938, -3938, -3938, -3938, 41233, -3938, -3938, -3938,
   -3938, -3938,   876, -3938,  3536, -3938,  3052,  -232,    67, -3938,
    1059, -3938, -3938, -3938,  3431,  3159,  3159,  1196,  3448,  1188,
    3058, -3938,    75, -3938,  1880, -3938,  2048, -3938, -3938, 12057,
   -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938,
   -3938, -3938, -3938, -3938,  1206, -3938, -3938, 27412,  1481, -3938,
     200, -3938,  1481, -3938,   969,   969,  1481, 51892, 27412,    71,
    1470,  2838,  1653,  2838, 52519,    71,  -161,  -161,  2435,    75,
    2838, -3938, -3938,  3447,  1653,  3450,  1653,  1653, -3938, 45622,
   54400, -3938,    75,  1454,  2838, 53146,  1470,  1470,  1653,    71,
   26781,  1528,  2192, -3938,  -161,    71, -3938, -3938, -3938, -3938,
   25519,    71,    71,  2927,  2714,  2752,  2797, -3938, -3938, -3938,
    2838,  2192, 52519, -3938, -3938,  6699, -3938, -3938, -3938, 20460,
   54400,   269,   576, -3938,  3055, 36844,  3300, -3938, 12057, 12057,
    3335, 54400,  3339, -3938,  3630, 54400,  3694, -3938,   128, -3938,
   52519, -3938,  3069, -3938,  3070, -3938,  2838, -3938, -3938, -3938,
   -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938,
   -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938,
   -3938, -3938, -3938, -3938, -3938,  3077, 54400,  2596,   186, -3938,
   -3938, -3938, -3938,  -161,  1185, -3938, -3938, -3938, -3938,  3347,
    3351, 54400, -3938, -3938, -3938, -3938,  3224, -3938, 25519,  3078,
    3081,  3082, -3938, -3938, -3938,   766, -3938,  7268, -3938, -3938,
   -3938, -3938, -3938, -3938, -3938, -3938, -3938, 33709,  2643,  3353,
   -3938, -3938,  2496, -3938,   478, 12057,   979, -3938, -3938,   250,
   -3938,  1181, -3938, -3938, -3938,  3089, -3938, -3938, -3938, -3938,
   -3938, -3938, -3938,  2903, -3938, -3938,  2365, -3938, -3938, -3938,
    3090,  2496,  2496, -3938, -3938,  3690,  3262, 12057, 12057, -3938,
   12057, -3938,   284,  3098,  3123, -3938, -3938, -3938, -3938, 12057,
   -3938, -3938,  2496, -3938, 12057, -3938, -3938, 12057, -3938, 12057,
   12057, -3938,  1760, -3938,  1785, -3938,  1805, -3938, -3938, -3938,
    2449, -3938, -3938,  1173, 54400, -3938, -3938,  1858, -3938, -3938,
   12057, -3938, 46249, -3938, -3938,  3322, -3938, -3938, -3938, -3938,
   -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938,
   -3938, -3938, -3938,  3540, -3938, -3938, -3938,  -135,  -135,  -135,
   15951,   478,  3602, -3938, -3938, -3938,  3427,  3490, -3938,    39,
   -3938, 54400,  3114,  1657, -3938,  1861, -3938, -3938, -3938,  2127,
    3115, -3938,    75, 15951,  2870,  3283, -3938, -3938,  1161, 26781,
   34336, -3938, -3938, 54400, -3938, 43114,  2361,  2361,  2361,  2549,
    3553,  2919,  2919, -3938, 30563, -3938, -3938,  3288, -3938, -3938,
   35590, -3938, -3938, -3938, -3938, -3938, -3938, 29933, 50011, -3938,
   -3938,  2549, -3938,  -161,  1901,  1591,  3268, -3938,  1032, -3938,
    1196,  3511,  3513, -3938,  1196, -3938, -3938, 26781,  2643, 15951,
   -3938,  2127,   478,  3127,  1060, -3938, -3938, -3938,    71,  3133,
    3516,  3520,   969, -3938, 27412, 27412, -3938, -3938,  1481,  1481,
   -3938, -3938, -3938,    99, 52519, -3938, -3938, 27412, -3938, -3938,
   -3938,  3137, -3938, -3938,  2570, -3938, -3938, 41860,  -161, -3938,
    1653, 54400, -3938, 27412, 27412, -3938,  3166,  -161, -3938, -3938,
   -3938, -3938, -3938, -3938, -3938, -3938, -3938, 27412, 52519,  3140,
   -3938,  1060, -3938, -3938, -3938, -3938, -3938,  1883, -3938, 52519,
   -3938, -3938, 52519, -3938, -3938, -3938, -3938, -3938, -3938, -3938,
   -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938,
    3144,  1958,  2313, -3938,  3146, -3938, 54400, -3938, -3938, 25519,
   -3938, -3938, -3938,  6655, 54400, -3938, -3938, -3938, -3938, -3938,
   -3938, -3938, -3938, -3938, -3938,   478,  2496,  3707, -3938, -3938,
    3298,  -161,  3648, -3938,  1876, -3938, -3938, -3938,  3563,  3153,
   -3938, 50638,  1890, -3938, -3938,  1832, -3938, -3938, -3938, -3938,
    3299,  1077, -3938,  3328,  3161,  3158, -3938, -3938,  -161,  3167,
   -3938, -3938, 20460, -3938, -3938, -3938,  3789, -3938,  3174,  3175,
    3176,  2762, -3938,  3538,  1110,   478,  3168,  3172,  3177,  3178,
    3777,   143, -3938,  3780, 44995, -3938, -3938, -3938,  1899,  3456,
   -3938, -3938, -3938,  2976, -3938,  2979, -3938, -3938, -3938,  3768,
   -3938, -3938,  2976,  3584,   250, -3938, -3938,  3187, -3938,  3192,
    3194, -3938,   253,  3199,  1821,  1121,  1921,  3498,  3574, -3938,
    3414, -3938,  1853,  1184,  1879,  1886,  1897,  1907, -3938, -3938,
   -3938,  1456,    67, -3938, -3938,  1931, -3938,  3562,  3467,   650,
    3230,  3230,  3230,  1642,   478,  1955, -3938, -3938, -3938, -3938,
    3604, -3938, -3938,  3204,  3208, 54400, -3938,  3274,  2449, 26781,
   15951,  3209,  3207, -3938,   989, -3938, -3938,  3211, -3938, -3938,
    2361, -3938,  3800,  3635, -3938, -3938, 45622,  3213, -3938, -3938,
    3522, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938,  2679,
    3099,  3260,  1196,  1196,  3346,  3261, 12057,  3221, -3938,  3353,
   -3938, -3938,   340,  2449, 12057, -3938, -3938, -3938, -3938, 12057,
    1481, -3938, -3938, -3938, -3938,  3225, -3938, -3938,  3733,  3735,
   -3938, -3938,  1230, 54400, -3938,  3026, -3938, 27412,  3137, -3938,
     477,  3318, -3938, -3938, -3938, 26781, -3938, -3938, -3938, 54400,
   -3938, 25519, -3938, -3938,  3232, -3938,  2976,  2976,  2976, -3938,
   -3938,  2976, -3938,  2979,  3463, -3938,  2979,  2979, -3938, -3938,
   -3938, -3938, -3938,   250,   220, -3938, -3938,   250, -3938, -3938,
   -3938,   147,  1242,  2979, -3938, -3938, -3938, -3938, -3938, -3938,
   -3938,  2976,  2976,  2976, -3938, -3938,   250,  2976, -3938,  2976,
   -3938,  3361, -3938,   160,   123,  2976,  2976,  2976,  3089,  3236,
   -3938, -3938, -3938, -3938, -3938, -3938, 54400, -3938,  1198, 54400,
     131, -3938, -3938, -3938,  2838,  1959,  -161, -3938, -3938, -3938,
    3233,  3244, -3938, -3938, -3938,   286, -3938, 54400,  6655, -3938,
   -3938,   989,  7119, -3938, -3938,  1241, 54400, 54400, 54400, 42487,
   -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, 44995,
   -3938,  3837,  3507,  3245, -3938, -3938, -3938, -3938, -3938, -3938,
   -3938, -3938, -3938, 12057, -3938, -3938, -3938, 12057, -3938, -3938,
    3539,  3696, -3938, -3938, -3938, -3938, -3938, -3938,   173,   173,
   -3938, -3938, -3938,  3859, -3938,  3325,  3326, -3938, -3938,  3327,
   -3938, -3938,   119,  1904, -3938, -3938, -3938, -3938, 15951,  3625,
    3343, -3938, -3938, 54400,  3290, -3938, -3938,  1456, -3938, -3938,
   -3938, -3938, 12057, -3938,  3353,  2435, -3938, 30563, -3938,  1173,
   -3938,  3295, -3938, -3938, -3938,  3296,   478, 54400,  3538, -3938,
     913,  1456,  1060,  -134,  1945,  3253,  3254, 54400,  3255,  3256,
   -3938,  2815, 27412, -3938, -3938, -3938, -3938, -3938, 25519,  6655,
      71, -3938, -3938,  3137,   744,  3263, 54400,  3589, -3938, -3938,
   -3938, -3938,  1293, -3938,  3265,  1293,  1293, -3938,  2284, -3938,
    3301,   250, -3938, -3938,  3305, -3938, -3938, -3938,  1293,  3272,
     250, -3938, -3938, -3938, -3938,  1293, -3938, 45622,  -161,  2676,
    3894, -3938,  3332, -3938,  3792,  3666,  3909, -3938,  3405, -3938,
    3671,  3567,    75, -3938,   250, -3938, -3938,  3837, -3938,   250,
    3837,  1293,  1293, 54400,  3411, -3938, 60670, -3938, -3938,  -180,
    3313,  1962, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938,
    1378, 54400, 25519,  3335,  3474, -3938,  3026, -3938, -3938,  3223,
    3283, -3938,  1978,  1060,  3291,  1982,  1996,  3763,  3472, -3938,
   -3938,  3292,  3293,  1060,  1961, -3938, -3938, -3938, -3938,  3803,
   -3938, -3938, -3938, -3938, -3938,   167,  3566,  2838,  2838,  2838,
     699,  1904, -3938, -3938,  3355, 25519, 17249,  3409,  1998, -3938,
   -3938,  1373,  3523, -3938,  1383,  1060, 12057,  2549, 41860, -3938,
   -3938, -3938, 12057,  3307, 12057,  3308,  2012, -3938, -3938, -3938,
     969,   969, -3938,   913, -3938, -3938,  2570,  3274, -3938, -3938,
   54400, 54400,  2033, 54400, 54400,  2692,  2703,  2704,  1856,  1856,
   -3938, -3938,   269, -3938, -3938, -3938,  3708, -3938, -3938,  2043,
   -3938,   825,  3583, -3938, -3938, -3938, -3938,  1293, -3938,   253,
   -3938, -3938, -3938, -3938, -3938,   253, -3938, -3938, -3938, -3938,
    3316, -3938, -3938, -3938,  3596,  3354, -3938,  3317, -3938, -3938,
   -3938, 37471, -3938, -3938, -3938, -3938, -3938, -3938, -3938, 12057,
    3799,  3344, 54400,   104, -3938, 61924, 61924, 54400, -3938, -3938,
   -3938, -3938,  6191, -3938, -3938,   -47, -3938, -3938, -3938, -3938,
   -3938, -3938, -3938, -3938, -3938, -3938, -3938,  3934, -3938,  3319,
   -3938, -3938,  3324,  1448, -3938, -3938, 54400, 53773, -3938, -3938,
    6655,  3775,   255, -3938, -3938, -3938,   766,  3330,  2172,  1109,
   54400, -3938,  3605,    97,  1758, -3938,  3798, -3938, 12057, -3938,
   -3938,  3913, -3938, -3938, -3938, -3938, -3938, -3938,  1108, -3938,
   -3938, 26781,  2682, -3938,  2570, -3938, -3938, 54400, -3938,  3419,
      75,    75,  3840,  3841,    75,    75,    75,    75,  3337,  3523,
   -3938,  3822, -3938, -3938, 12057, -3938, -3938,   478,  3571, -3938,
    3914,    67,   478, 54400,   478, 54400, -3938,  3793,  3793, -3938,
   -3938,  2049,  2064,  2080, -3938,  2085,  2097, -3938, -3938, -3938,
   -3938,   269,  3345, -3938, 54400, -3938, -3938, -3938,    82, -3938,
   -3938,  2099, -3938,  2116,  1748, -3938,  3316, -3938, -3938, -3938,
   -3938, -3938, -3938,   478, 12057, -3938, 12057,  3370, -3938, -3938,
    3795, 54400, -3938, -3938, -3938, -3938, 12057, -3938, 60670, 60670,
   -3938, -3938, -3938, -3938,  3960,   989,  3929,  3616,  3932, -3938,
   -3938,  2119, -3938, -3938,  3139, -3938, -3938,  3630,  6655, -3938,
   -3938, -3938,  -161,    75, -3938,  1109, -3938, -3938, -3938,    75,
    1060,  3356,  3610, -3938,    97, -3938, -3938, -3938,  1758, -3938,
   -3938, -3938,  1060, -3938, -3938, -3938,  3350, -3938,    75, -3938,
    3358, -3938,  3409, -3938,  3364, -3938,  -161,  -161,    75,    75,
    2943,  2943,  2570, 45622,  3460, -3938, -3938,    75,  1060, 54400,
   -3938,  1193,  3736, -3938,  2132,  2134,  1388, -3938, -3938, -3938,
    3575, -3938,  1109, -3938, -3938, -3938,  3274, -3938,  1251,  1251,
     250,   253,   250, -3938,  3366, -3938,  3367,   478,   478, -3938,
     223, -3938, -3938,  3770,  3856, 12057,   478, 57535,  3368, -3938,
   -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938,
   -3938, -3938, 61297, 12057, -3938,   -47,  3934, -3938,  3638, -3938,
    3639, -3938, 53773, -3938, -3938, -3938,  3882, 60670, -3938,  3875,
   -3938,   989, -3938,  2838,   947, -3938, 38098, -3938, -3938,  1679,
     947, -3938,   947, -3938, -3938, 26781, 15951,  2435, -3938, -3938,
    3378, -3938, -3938,   641, -3938, -3938,  -161,  -161, -3938, -3938,
   -3938, -3938, -3938,  2143, -3938, 45622, -3938, -3938,  3976,  3979,
    3871,  3981,  1193, -3938,  -140, -3938, -3938, -3938,  3982, -3938,
    3985,  3389,  3390, -3938,  1109, -3938,    97,  1758,  2147, -3938,
    4031, -3938,   142,  3665,  3667, -3938, -3938, -3938, -3938,  -109,
    3421, 12057, 60670, -3938,  3880, -3938,  3811,  1613,  3753,  3393,
   -3938,  3391,  1872,  3918, 61924, 61924, -3938, -3938, -3938, -3938,
   -3938,  3895, -3938, -3938, -3938, -3938, -3938,  3769,  4039, -3938,
   -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938,
    2153, -3938, 16600, -3938, -3938, -3938, -3938, -3938, 45622, -3938,
    3460, -3938,  3407,   253,   253,  4005,   253, -3938,  4007,  4008,
    -140, -3938, -3938, -3938, 50638, 50638, -3938, -3938, -3938, -3938,
   -3938, -3938, -3938,  3464,  3923, -3938, -3938,    98, -3938,   234,
   -3938,   478, 58162,  4009, 54400, -3938, -3938, -3938, -3938, 12057,
   -3938, 46876, 58789,  3408, -3938, -3938, -3938,  3595, -3938,  3139,
   -3938, -3938,  3598, -3938,  3378, -3938,  3420, -3938,  2784,  3523,
   -3938, -3938,  3425, -3938, -3938,   253, -3938,   253,   253, -3938,
    3430,  2162,  1251,  1251,  -161,  3807, -3938,    98, -3938, 12057,
   -3938,  3917,  3519, -3938,  3432, -3938, 60670,  2001, 60670, -3938,
   -3938,  3868,  3435,   303, -3938,  3434, -3938, -3938, 60670,  3855,
    3914, -3938, 16600,  3441, -3938, 12057,  3442,  3443, -3938, -3938,
   -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938,   478,
    4035, 60670, 54400, 55654,  3642, 59416,  3899, 54400,  6655,  3900,
    3902, -3938, 60670, -3938,  4044,  3736, -3938, -3938,   478, -3938,
   -3938,  3541, -3938, 56281, -3938,  2656, -3938,  3478, -3938, -3938,
    3973,  2489, -3938, -3938,   253,  3874, -3938, -3938, 60670, 60670,
   -3938, -3938, -3938, 36217, 12057, -3938, -3938, -3938, -3938, -3938,
    1155, -3938,  3742,  3465, 56908, 60043, -3938, -3938, -3938, 32453,
   -3938, -3938, -3938,  3921, -3938,   478, -3938,    -1, 21722,  3623,
   36217, -3938, -3938, -3938, -3938, -3938, -3938, 45622,  2166, -3938,
   -3938, 26781, -3938, -3938, -3938, -3938, 24886,  3470, -3938,    75,
   -3938, 26781, -3938, -3938, 15951, -3938, -3938
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -3938, -3938, -3938, -3938, -3938,    70, -3938, -3938, -3938, -3938,
   -3938, -3938, -3938, -3938,  1816, -3938, -3938, -3938, -3938, -3938,
    1519, -3938,   446, -2311,  -487,  3148, -3938, -3938, -3938, -3938,
   -3938, -3938, -3938, -3938, -3938, -3938, -3938,   718,  1632,  3457,
   -3938,   441, -3938,    58, -3938, -3938, -3938, -2879,   -76,  -290,
   -3938, -3938,   362,    22,  3103,  -289, -3235, -3938, -3938, -3938,
   -3938, -3938, -3938, -3938, -3938, -3938,   453,   451, -3938, -3938,
     251, -3938, -3938, -2335, -3938, -3938, -3938, -3938, -3938, -3938,
   -3938, -3938,  -501,  -458,  1696, -3938, -3938, -3938,  4096, -3938,
    3554, -3938, -1757,  2266, -3938, -3938, -3938, -3938, -3938,  2322,
   -1717, -3938, -3938, -3938,  1393, -3938, -3938, -3938, -1002,   274,
   -3938,   275, -3938,   280, -3938,   281, -3938,   282,   283,   285,
     298, -3938,   300, -3938, -3938,  -450, -3938, -3938, -3938, -3938,
     301, -3938, -3938, -3938, -3938, -3938, -3938, -3938,  -301, -3938,
   -3938,  -111, -3938, -3938,  -296,   310, -3938,  -228,   312, -3938,
     315, -3938,  -120, -3938,  -115, -3938, -3938, -3938, -3938, -3938,
   -3938, -3938, -3938, -3938, -3938, -3938, -3938,  3125, -3938, -3938,
   -3938, -1972, -3938, -3938, -2382,  2662, -3938, -1697, -3938, -3938,
   -1907, -3938, -3938, -1797,  1085, -3938, -3938,  -131,  -358, -3938,
   -1488, -1927, -1910, -3938, -3938, -3938, -1983, -1979,  -756,  2412,
   -1233, -2281, -3938, -3938, -3938, -3938,   129, -3938, -3938,   309,
    1652,  2173, -3938, -2474, -3938, -3938,   889, -3938, -3938,  1444,
    1877, -3938,  1031,  2878, -1259, -3938, -3938, -3938, -3938, -3938,
   -3938,   135,   307,    -8, -3938, -3716,   720, -3938, -3938, -3938,
   -3938, -3938, -3938, -3938, -3938, -2411, -3938, -3938, -3938,  -314,
   -3938, -3938,  -206, -3938, -3938,  -264, -3938,   133, -2312, -3938,
   -3938, -3938, -3938,  2669, -1374, -3938,  3718, -3938,  -484,   557,
    1701, -2136, -1921, -3938,  -910,  -909, -2854, -3938, -3938, -3938,
   -1876,  1207,  1271, -3938,   837,  1697, -2390, -3938, -3938, -3938,
   -3938, -3938,  1279, -3938, -3938,   461, -3938,   456, -3938, -3938,
   -3938, -3938,  -261, -3938,   106, -3140, -3938, -3938, -3938, -2837,
    1164,   644, -3938, -3938, -3938,  -782, -2899,   -86, -3938,   278,
   -2398, -2496,   618, -3938, -3938,   414, -3865, -3938, -3938,  -575,
   -2081, -2380,   -69, -3938, -3938,   432, -2442,  1820, -3938, -3938,
   -3938, -3341, -2331, -3938,    19, -3938, -3938, -3938, -3938, -2714,
   -3938, -3938, -1527, -1968, -3938, -3938,  4287,  4288, -1535, -2279,
   -3937,   -83,   -87, -3938, -3938, -3938,  2167, -1639,    90,    78,
      85,  1667,  -836,   235,  -464, -2087, -3938,   305, -3938, -3938,
   -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938,
   -3938, -3938, -3938, -3938, -3938,  1746,  -102, -3938, -3938, -3938,
   -3938, -3938, -3938, -3938, -3066, -2811, -3938, -3938,  1339, -3938,
   -3938, -3938, -2351, -2025, -2020, -2366,  3320, -3938, -3938, -3938,
   -3938,  3273, -2211, -3666, -3938, -3938, -3938, -3938, -3938, -3938,
   -3938,  2818,   980, -3938, -3938,  1882, -3938, -3938, -3938, -3938,
   -3938, -3938, -3938,   506,  1956, -3938, -3938, -3938, -3938,  2260,
   -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938,     3, -3938,
   -3938, -3938,   745,  2753, -3938, -3938, -3938,   -12, -3938, -3938,
   -3938, -3938,  2458, -3938, -3938, -3938, -3938,  2779, -3938, -3938,
   -3938, -3938, -3938, -3938,  1566, -3938,  1989, -3938, -1500, -3938,
   -3938,  1139, -1016,  1947,  -608,  2079,   460, -3938,  3727, -3938,
   -3938, -3938, -1693, -1706, -3938,  3422,  -906, -2524,  2450,  -565,
   -1873,  1182,   184,  -371,   470,  4270, -3938, -1147, -1175, -3938,
   -3938,  -657, -3938, -3938, -3938, -3938, -3938,  2174,  2180,  -626,
   -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938,
   -3938,  1606, -3938, -3938, -3938, -3938, -1241, -3938, -3938, -3938,
   -3938, -3938, -3938, -3938,  1422, -3938, -2069, -3938, -3938,  -479,
   -3938,  3193, -3938, -3938, -3938, -2271, -1769,  1900,  1094, -3938,
   -3938, -3938, -3938, -3938, -3938, -3938,  1908, -3938, -1582, -3938,
   -2692, -3938, -3938, -3938, -3938, -3938,  2101, -3938, -3938, -3938,
   -3938, -3938, -3938, -3938, -1562, -3938, -1390,   216, -3938,   393,
   -3938, -3938, -3938, -3938, -3938, -3938, -3938,  -104,   961,  -100,
   -2729, -1101,  1649, -3938, -3938, -1312,  3243, -2317, -3938, -3938,
   -3938,  2081, -3938, -3938, -3938, -3938, -3938,   768, -2942,  2851,
   -3938, -3938, -3176,  -939, -2262,  -918, -3938, -1399,  1513,   582,
   -3938, -1903, -1126, -1214, -3763, -2891, -3938,  1397, -3938, -3938,
   -3938, -3938,  -219, -3938, -3938, -3938,   595,  1981, -3938, -3938,
   -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938,  -549,  -882,
   -3938, -3938,  2233,  -494, -3938, -3938, -3938, -3938, -3938, -3938,
   -3938, -3938, -3938,  3034,  3007,  2042, -3938, -3938, -2554, -3938,
   -3938,  2008, -3938,   862,  -922,   560,  1168, -3938, -3938,  1170,
   -3182, -3938, -3938, -3938, -3938, -3938, -3938,  1119, -3938,    42,
    3781, -3938, -3938, -3938, -3938, -3938, -3938, -3938,  2789, -1079,
    3710, -3938, -3938, -3938, -3938, -3938, -3938,  2421, -3938, -3938,
   -3938, -3938, -3938, -3938,  2946,  3804,  -588, -1356, -3938,  -754,
    2422,  1963,  -853, -3938, -3938, -3938,  3805, -3938, -3938, -3938,
   -3938, -3938, -3938, -3938, -3938, -3938,  2586,   802, -3938, -3938,
   -3938, -3938,  3035, -3938, -3938, -3938, -3938, -3938, -3938, -3938,
   -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938,
   -3938, -3938, -3938, -3938,  1205,  -144, -3938,    35,  -176, -3938,
     -50, -3938, -3938, -3938, -3938, -3938,  -248, -3938, -3938,  -250,
   -3938, -1012, -1386,   563, -1283, -2506, -3938,  1197,  3011, -3073,
    -679, -1187, -1191, -2750,    86, -3938, -3938,  3040,    65,   419,
    -383,    -6, -2799,  -101,  -564, -3938, -2332, -3938, -3938, -3938,
   -3938, -3938, -3938, -3938, -3938,  2002, -3938, -3938, -3938,  1171,
   -3938,  3830, -3938,  2678,  1176,  3835, -1389,  2509,  2016,  2019,
   -3938, -3938,  2028, -1939, -3938, -3938,   140, -3938,  2577, -3938,
   -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938, -3938,
   -3938, -3938, -3938,  3036,  3846,  3529, -3938,  3104, -3938, -3938,
   -3938, -3938, -3938,   510, -3938,   244, -2266, -1739, -3938, -3938,
    2854,  1138, -3938,  1683,  -325,  -630, -3938, -3938,   507, -3938,
   -3938,  1417,  3858,  3530, -3938, -3938, -3938, -3938, -3938, -2708,
    -900, -3938, -3396, -2780, -1712, -3938, -3938, -2162, -2999, -3938,
   -3938, -1050, -3938, -3938, -3938, -3938, -2003, -3938, -3938, -3938,
      95,  3919,  3922, -3938, -3938,   615, -3938,  -159, -3938, -3938,
   -3938, -3938, -3938, -3938, -3938,  3776, -3938, -3938, -3938, -3938,
    3779, -3938, -3938, -3938, -3938, -3938,  3783, -3938, -3938, -3938,
   -3938, -3938,  1739, -3938, -3938, -3938, -3938, -3938, -3938, -3938,
   -3938, -3938
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If zero, do what YYDEFACT says.
   If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -2700
static const yytype_int16 yytable[] =
{
     507,  1073,  1519,   983,   880,  1706,  1014,  1521,   550,  1416,
    1419,  1402,  1639,   549,  2143,   936,   979,   557,   568,  1431,
    1731,  2396,  2397,  1820,  1730,   576,   635,   571,   505,  2075,
    2261,  2565,  1602,   659,   583,  1451,  2566,   586,  1851,  1481,
    1921,  1796,   583,   818,   819,   820,  2030,   822,   823,   604,
    1953,   825,  1163,   827,  2072,  1683,   806,  2139,  2140,  1116,
    1451,  2798,  2953,  1954,  1027,  1819,  1762,  1763,  1274,   139,
    1766,  1767,  1768,  1769,  2767,  1771,  1772,  1774,  1776,  1777,
    1778,  1779,  1780,  2673,  2891,  3315,  1752,  3560,  3257,  2752,
    2115,  3026,   624,  1760,  3381,  2680,  3221,  1648,  1445,  1860,
    2728,  2307,  1087,  1095,  1961,  1062,  1065,   989,  2681,   555,
     996,  3388,  2909,  1526,  1527,  1502,   627,  2809,   507,  2861,
     507,   634,   640,  3719,  1974,  2381,  1482,  2500,  3771,  3316,
    2865,  2821,  1977,  1978,  2488,  2555,  3924,  3433,  2918,  1258,
    3396,  2617,  2922,  3883,  2501,  2618,   629,  2814,   631,   514,
    2008,  1334,  2043,  2937,  3492,  3596,  3041,  3277,  3866,  1216,
    1217,  1218,  1225,  1226,  3707,  2948,  3089,  3090,  3293,   567,
    1550,  1259,  3096,  2870,  3098,   563,   575,  1225,  1226,  4212,
    4524,  3440,  2879,  1561,   623,  3263,  2297,  1855,  1103,  1083,
    1104,  1105,  1106,  1225,  1226,  3441,  3450,  2614,  3150,  1334,
    2392,  2957,   656,   945,   927,  4205,  2606,  1456,  3834,  3442,
    2852,  2043,  2901,  2902,  2615,  1462,  4278,   121,  1225,  1226,
     945,   927,   862,  2125,  1225,  1226,  1483,  1866,   645,  3039,
    2159,  2477,  3745,  3651,  2569,  1225,  1226,  1225,  1226,  1412,
     596,  3440,  4188,  3216,  1329,  3588,  1066,  3578,  1912,  1343,
     872,  4141,  3115,  2724,  1523,  3441,  1020,  3231,  4170, -2043,
    1496,   593,  1277,  3966,  3279,  1753,  3464,  3094,  2108,  3442,
    3423,  3440,  4471,  2043,  4643,  1347,   646,  3366,  1793, -2579,
     945,  3828,  3827,  3832,  -912,  3441,  3833,  1225,  1226,  2631,
    1002,  4475, -1571,   896,   564,  3898,  1335,  3243,   613,  3442,
    4179,  2032,  1076,  2022, -2431,  3843,   990,  1225,  1226,  2988,
     945,   927,  3865,  2967,  2060,  1042,  4149,  3499,  1225,  1226,
    1913,  3059,  3032,  3033,   268,  1366,   270,  1523,  3477,  2894,
    1449,  3079,  1605,  3081,  1280,  4385,  1605,   123,  3769,   560,
   -2647,  1225,  1226,  4330,  1335,  2121,  2958,  1143,  2311,  2496,
     134,   600,  1523,  1225,  1226,  4213,  3255,  -569,  1225,  1226,
    1202,  2162,  2832,  1225,  1226,  2026,  2609,  2817,  2997,  2043,
    1452,  1225,  1226,  1175, -1773,  1225,  1226,  4402,  2650,   138,
    3183,  4458,  -570,  2833,  2986,  1225,  1226,  2164,  4402,  1225,
    1226,   663,  4579,  3280,  1193,   138,  2992,  1225,  1226,  2626,
    1586,  1586,  4189,   584,  2229,  1582,   897,  1209,  1210,   510,
   -1862,  2993,   824,  4580,  3256,  4459,  2834,  1225,  1226,   661,
   -1773,  3746,  2627,  1453,  2026, -2510,  2144,  1562,  1587,  1588,
    2998,  2061,  2165,  1262,  2987,   135,  1144, -2511,  2457,  2004,
     561,   515,  1071,  1072,  2044,  3046,  2895,  4466,  1754, -2647,
    1672,  2312,   601,  1673,  2023,  2818,  3367,   865,  2989,  1043,
    4180,  1225,  1226,  1271,  1606,   614,  4644,  1647,  1628,  1326,
   -1571,  1003,  1004,  1225,  1226,  1361,  1990,  1348, -2431,  2840,
     898,  1163,   650,  1021,  1476,  4275,  2026,  4358,  4359,  3424,
    4002,  3792,  2001,  3232,  1225,  1226,  2968,  3229,  3230,  4006,
    1916,   991,  3068,  2044,  1225,  1226,  4476,  4472,  1089,  1097,
    1022,  3967,  1582,  1497,   634,  1792,   640,  1262,  1583,  1584,
    1585,  1225,  1226,  4022,  1914,  2905,  2414,  1227,  4024,  2297,
    1228,  1794, -1531,  3813,  3277,  3277,   864,   640, -2510,   873,
    2030,  1203,  1204,  2109,  3226,  3227,  3228,  3581,   860,  1793,
   -2511,  1067,   634,  3047,   870,  2887,  1225,  1226,  1227,  1796,
    4388,  1228,  1413,  3589,  3590,  2044,  2499,   888,  3551,  2244,
    2500, -1531,  3555,  4430,  4190,   653,  3933,  3593,  2759,  1757,
     863,  1344,  2026,  1227,   937,  3579,  1228,  2501, -2070,  1227,
     665,  2298,  1228,  1084,   998,  2278,  1225,  1226,  2006,  1820,
    1227,  1956,  1227,  1228,  1959,  1228,  2281, -1571,  1962,  2284,
    1965,  1793,  3281,  1017,  1526,  1527,  3965,  3788,  1765,  2436,
    2815,  2570,   634,  1486,  1031,  2115,   871,  1821,  2617, -2217,
    1225,  1226,  2618,  3478,  2555,  1786,  2613,   507,  1980,  1981,
    3279,  1819,   624,  1991,  1060,  1616,  1617,  1992,   624,   624,
    3913,  1563,  1227,  1074,  1031,  1228,  3408,  1755,   634,   653,
    2853,  2044,   653,  1457,  3525,  1047,   999,  1526,  1527,  3651,
    1671,  1463,  1227,  1756,  1111,  1228,  4279,  3007,  1684,  2899,
    1686,  2103,  3012,  1227,  2614,  3518,  1228,  4525,   828,   565,
    3020,  3021,  1699,  1700,  1701,  2160,  3028,  1048,  3034,  3945,
    1705,  2615,  2822,  3749,  1225,  1226,  1227,  1793,   878,  1228,
    1225,  1226,  3741,  4600,  2275,  3745,   891,   974,  1227,  4222,
    3151,  1228,  1273,  1227,   597,  1164,  1228,  4081,  1227,  3708,
    1799,  1228,  1976,  2008,  1057,  2352,  1227,  4089,  3042,  1228,
    1227, -2579,  1000,  1228,  1330,   594,  3443,  3563,  3528,  2959,
    1227,  1085,   909,  1228,  1227,  3835,  3407,  1228,  1856,  3450,
    1828,  3432,  1227,  1867,  1101,  1228,  1225,  1226,  3086,  4126,
   -2579,  3863,  3804,  3397,  2904,  -912,  3884,  1229,  2031,   974,
    3951,  1563,  1227, -1571,  1222,  1228,  1224,  3830,  2126,  3282,
    1225,  1226,  1229, -2699,  3244,  2032,  2264,  2127,  2903,  4317,
    1225,  1226,  1794,  2176,  1853,  3086,  3443, -1571,  1229,  1005,
    1810,  1267,   507,  1269,  1270,  1031,   507,   634,   595,   507,
     634,  1873,  2120,  1737,  1738,  1312,  1227,  3829,  3648,  1228,
    1417,  1884,  3947,  1229,  1422,  1427,  3443,  3806,  1227,  1229,
    1268,  1228,  4289,  2772,  1272,  1225,  1226,  1276,  -569,  2177,
    1229,  1448,  1229,  4478,  1901,  2230,  1225,  1226,  1339,  1227,
    3782,  3783,  1228,  2363,  1794,  1737,  2195,  2233,  2234,  1227,
    3162,   624,  1228,  -570,  2884,   974,  1225,  1226,  3078,  1205,
    2121,  2869,  3134,   634,   624, -2510,  1227,   664,   624,  1228,
    1879,  2620,  1547,  1674,  1960,  2495,  1675, -2511,  1327,  3246,
    1225,  1226,  1229,  2798,  3746,  3048,  2657, -2242,   826,  3202,
   -2359, -2070,  1225,  1226,  1225,  1226, -2510,  2250,  2251,  1225,
    1226,  1227,  1229,  2363,  1228,   634,  -475,  3585, -2511,   634,
     634,  3427,  3275,  1229,  2298,  4424,   889,  2733,  2734,  4395,
   -1531,  4397,  1589,  3546,  1225,  1226,   634,  3289,  1363,  2150,
    2565,  3559, -2217,  2010,  1936,  2566,  1229,  3714,  2503,  3530,
    1794,  1227,  4443,  1350,  1228,  1487,  3717,  3531,  1229,  4324,
    1305,  2909,  2168,  1229,  1225,  1226,  1369,  2500,  1229,  2403,
    1375,  1225,  1226,  3119,  3120,  1434,  1229,   140,  2030,  3550,
    1229,   624,  2936,  3554,  2501,  1227,  2937,  3423,  1228,  2418,
    1229,  3136,  3137,  2621,  1229,  3159,  3160,  3575,  3747,  2499,
    2202,  3369,  1229,  1522,  4073,  4232,  2170,  3069,  3296,  2245,
    3298,   884,  4155,  3187,  3188,  3189,  2694,  3309,  2173,  2857,
    2858,  2432,  1229,  1225,  1226,   624,   653,  3467,   653,  2307,
    1954,  3322,  1954,  1954,  4337, -1884,   624,  2151,  3333,  3335,
    3224,  4258,  1451,  2345,  2555,  2617,  4344,  3094,  3956,  2618,
    2878,  3352,  3354,  3356,  1906,  4097,  2462,  3357,  3335,  1227,
    2652,  2407,  1228,  1260,   551,  1227,  1229, -2070,  1228,   569,
    3565,  2862,  4366,  1225,  1226,  3209,  1477,  1451,  1229,  1832,
    1225,  1226,  2174,  3547,  2713,  1488,  2787,   624,  1591,  1592,
    1593,  1598,  2133,  3404,  2175,  3958,  3436,  2364,  2430,  1229,
     677,  2614,  3820,  1242,  1509,  3821,  1605,  2115, -2217,  1229,
    1489,  2435,  1747,  2613,  2438,  2439,  2732,  1542,  2615,  3023,
    3381,  1227,  1225,  1226,  1228,  2182,  1229,  1225,  1226,  1885,
    1164,   671,  1260,  3805,  3959,  3840,  3841,  3842,  1434,  1225,
    1226,  2536,  2183,  3845,  1164,  1227,  2261,  2283,  1228,  1785,
    2622,  3871,  2428,  2445,  4437,  1227,   598,  2364,  1228,   678,
    3748,  1229,  1242,  1225,  1226,  1137,  2783,   573,  2737,  2738,
    3271,  1550,  1731,  1225,  1226,  3070,  3749,  2193,  1438,  1590,
    2346,  4212,   511,  1596,   892,  3566,   512,  1526,  1527,  2539,
     866,  3576,  3577,  1821,  2073,  1732,  1822,  1194,  3818,  3819,
    1227,  1229, -1884,  1228,   616,  3094,  3424,   634,  3094,  3094,
    4156,  1227,  2731,  2285,  1228,   617,  1263,  2194,  2074,  2528,
   -2242,  2043,  2741, -2359,  2296,  3094,  4183,  4184,  1907,  2276,
    1412,  1227,  2289,  2032,  1228,  1229,  1439,  1208,  1691,  3844,
    2290,  2300,  1225,  1226,   634,  3864,  3867,  3869,  3870,  1789,
    1865,  2198, -2647,  1731,  4324,  1227,  3437,  2882,  1228,   138,
    1418,  3196,  2031,   624,  1440,  1225,  1226,  1227,  3750,  1227,
    1228,  2338,  1228,  2365,  1227,  1102,  4439,  1228,   867,  1565,
    1565,  2351,  1225,  1226,  3796,   885,  1195,  1068,  2446,  1116,
    1164,   634,   679,  4389,  1833,  2359,  2360,  1245,  3436,  1227,
    1225,  1226,  1228,  3052,  3572,  2447,  1510,  3677,   634,  1229,
    4157,  1379,  2303,  2268,  2408,  1229,  3678,  2448,  1225,  1226,
    1837,  1563,  1840,  1435,  3135,   624,   268,  4098,   270,  1227,
     619,  2210,  1228,  2365,  1491,  3438,  1227,   624,  1781,  1228,
    4368,  4263,   893,   625,  1886,   634,  2026,  2120,   868,  3381,
    3381,  4369,   653,  3711,   624,   624,  1245,  4213,  2619,  3010,
    4211, -2647,  2121,  1225,  1226,  1225,  1226,  1069,  2620,  3807,
    3910,  1229,  3024,  3901,  1261,  1225,  1226,  3287,  3287,   634,
    2347,  1478,  1888,  1225,  1226,  4234, -2242,  2217,  1227, -2359,
    1896,  1228,  2975,  1897,  4264,  1229,  4265,  1844,  2449,  1566,
    1566,   628,   634,  1567,  1567,  1229,  2499,  -475,  1225,  1226,
     138,  2221,  1917,   937,  1568,  1568,  1492,  1375,  1225,  1226,
    2012,  2222,  3053,   507,   507,   507,   624,   507,   624,  2429,
    1834,  3071,   653,  1955,  2026,  3381,  1225,  1226,  1227,  1957,
     507,  1228,   634,  1261,  4075,  1227,   507,  1375,  1228,   585,
    1229,  1937,  1938,  1939,  3679,  1941,  1225,  1226,  3437,  3103,
    1954,  1229,  4147,  4148,  4235,  2163,  3031,   624,  1958,  1225,
    1226,  1793,  4665,  3795,  1964,  3261,  3262,  2223,  1902,  1441,
    1834,  1229,  2838,  1225,  1226,  1530,  1435,  1227,  1863,  1933,
    1228,  4196,  1227,  1225,  1226,  1228,  2269,  2224,  2715,  4150,
    1990,  4451,  4197,  3960,  1227,  1229,  1903,  1228,  3025,  1225,
    1226,  2389,  2450,  2044,  1820,   634,  1963,  1229,  1940,  1229,
    1942,  2228,  1225,  1226,  1229,  3106,  4023,  2449,  1227,  4025,
     624,  1228,  1864,  2246,  4060,  2068,   624,  3448,  1227,  2167,
    2613,  1228,  1225,  1226,   647,  1569,  1569,   624,  3439,  1229,
    3265,  1225,  1226,  1413,  1782,  4394,  1819,  1983,  4129,  1975,
    3080,  2390,  3270,  4370,  1198,  3117,   634,  1400,   507,   507,
   -1862,  2135,   507,  1225,  1226,  1225,  1226,  1783,  4077,  1229,
    1605,  2451,  3158,  1111,  1605,  2149,  1229,  2845,  4378,  1225,
    1226,  1731,  2042,  1889,  2169,  3212,  2131,  2132,  1254,  1255,
    1256,  1257,  3118,  4390,  3054,  4495,  4495,  1227,  3677,  1943,
    1228,   630,  4108, -1885,  1084,  1442,  2717,  3678,  3909,  1225,
    1226,   643,  2062,    44,  1225,  1226,  1225,  1226,  2070,  2369,
    1227,  3318,  4109,  1228,  4379,  1984,  2985,  1443,  1229,   974,
    2736,  1740,  2389,  1570,  1570,  2482,  2026,  1227,  3332,  2846,
    1228,  2257,   123,  1199,  3129,  1252,  1253,  1254,  1255,  1256,
    1257,  1225,  1226,  1904,  1990,  1227,  3878,  1991,  1228,  1944,
     656,  1992,  2289,  1164,  2203,  4128,  2639,  1225,  1226,  1444,
    3240,  1225,  1226,  1227,  2677,  2772,  1228,   650,  1229,  2682,
    2301,  1225,  1226,  4060,  4060,  1229,  3295,  2004,  4391,  3259,
    2640,   658,  2688,  1632,  3139,  2270,  3319,  2483,  3055,  2369,
    2031,  3140,  1695,  -211,  1225,  1226,  1718,  4198,  1048,  1449,
    2639,  2271,  3325,  3326,  1794,  1890,   580,  4392,  1227,   660,
    1227,  1228,  2267,  1228,   580,  2703,  2484,  1229,  4371,  2196,
    1227,  1784,  1229,  1228,  2640,  3287,  3701,  2847,  1227,  1731,
    3439,  1228,  2184,  3331,  1229,  3679,  2371,  2372,  3727,   672,
    4380,  3404,  1225,  1226,   511,  1633,  1225,  1226,   512,  2185,
    2261,  1793,  1085,  1227,  2291,   624,  1228,  3993,  1229,  3266,
   -1885,   523,   634,  1227,   624,   634,  1228,  2402,  1229,   674,
      58,  1225,  1226,  2192,  1634,  2620,  3215,   624,  4564,  4565,
    2747,  1227,  1312,  2206,  1228,  2485,  3320,  1312,  1741,  1277,
    2314,  1225,  1226,  2196, -2699,   574,  2320,  2320,  2258,  2320,
    3733,  1227,  1071,  1072,  1228,  2936,  2848,  1225,  1226,   634,
    4212,  1991,   624,  3879,  1227,   936,   624,  1228,   821,  2120,
    3836,  2273,   675,  3837,  4312,  2619,  4060,  4060,  1227,  1921,
     676,  1228,  1945,   634,   634,   624,   624,  1229,  1227,  1225,
    1226,  1228,  3513,  1635,   653,  1632,  1164,  2292,  1563,  2320,
    2320,  2320,  2207,   816,  1227,  3994,  3900,  1228,  1225,  1226,
    1229,  3943,   634,   831,  2486,  1225,  1226,  1227,   861,  1334,
    1228,   883,  1225,  1226,  1402,  2211,   268,  1229,   270,   937,
    2166,  1262,  3249,  1225,  1226,  3964,  3514,  1227,  2319,  2319,
    1228,  2319,  2215,  1225,  1226,  1229,  1227,  3995,   901,  1228,
    2425,   881,  2358,  1451,  2343,   945,   927,  1633,  1350,  4441,
    2216,   875,  4445,  1229,  3548,  2033, -1773,  2009,  1227,   974,
    1227,  1228,  1636,  1228,  2171,  2172,  1356,  1369,  2362,  1357,
    3269,  1225,  1226,   988,  1227,  4060,  1634,  1228,   903,  1495,
     624,  2319,  2319,  2319,  2739,  1500,  1501,  1225,  1226,  1242,
    4060,  3434,   995,   712, -1571,   268,  2444,   270,  1229,  4434,
    1229,  4435, -1773,   624,  1227,  4060,  2421,  1228,  2651,  1227,
    1229,  1227,  1228,  2220,  1228,  2225,  4122,  4123,  1229,  3252,
    3469,  3470,  2189,  1262,   893,  2237,  4213,  1225,  1226,  4490,
    1015,  2607,  -666,  2252,  4094,  4095,  4096,  2623,  1731,   864,
    4124,  3483,  2906,  1229,  1794,  1635,  1227,  1016,  2906,  1228,
   -1571,  3798,  3799,  1229,  1335,   717,  2197,  1262,  3083,  2849,
    2907,  1033,  1227,  2034,  1024,  1228,  1227,   624,  3107,  1228,
     912,  1229,  2437,  1417,  1041,  2476,  1227,  4482,  1048,  1228,
    4060,  1058, -1571,  1061, -1571,  1417,  1731,  2322,  2466,  2323,
    2882,  1229,  4060,  4060,  1077,  2456,  1082,  2473,  2474,  1227,
   -1571,  1113,  1228,  4551,  1229,  1078, -1571,   121,  2478,  2479,
    2480,  2481,  1242,  2489,  2490,  1262,  1358,  2487,  1229,  3113,
    1114, -1571,  3926,  1115,  1636,  1005,   634,  2043,  1229, -1571,
    1539,  1540,   634,  3114,  2624,  1117, -1571,   507,  1821,  2384,
    2385,  2386,  1265,  3121,  1229,  2646, -1571,  1227,  2649,  1118,
    1228,  1227,  3085,   730,  1228,  2933,  1119,  1229, -1571,  3125,
    4060,  -666,  1122, -1571,  1123,  2629,   518,  1124,   634,  4574,
    4060,  1266, -1571,  1580,  2729,  1637,  1227,  1229,  1125,  1228,
     634,  2369,  4486,  1245,  2108,  1126,  1229,  1127,  3584,  2370,
    2285,  1315,  3126,  2199,  1262,  1128,  1227,  2073,  1129,  1228,
    1242,  3127,   913,  2073,  2751,   974,  2082,  2083,  1229,  1130,
    1229,  4573,  1227,  4575,  4060,  1228,  4060,  1242,  2200,  1689,
    1131,  2074,  2096,  3128,  1229,  3130,  4060,  2074,  3927,  3928,
    2035,  1132,   746,  3929,  3930,  3208,  2212,  1262,  1316, -1571,
    4240,  2036,  1638,   912,  1227,  1133,  4593,  1228,  2037,  4060,
    1134,  4060,  1135,  4060,  1229,  1138,  1277,  1277,  1277,  1229,
    4060,  1229, -1571,  1227, -1862,  3157,  1228,  2213,  1262,   634,
    1227,  4060, -1571,  1228,  3133,  1313,  3138,  1227,   914,  1140,
    1228,  1141,  2609,  4624,  4625,  1142,  4060,  4060,  1227,  1653,
    1145,  1228,  2619,  1323,  2748,  3660,  1229,  1146,  1227,   634,
    3520,  1228,  4060,  4060, -1571,  1147,  1245,  4060,  2371,  2372,
    3908,  3141,  1229,  1281,  2214,  1262,  1229,  2218,  1262,  1317,
    1148,   634,  3544,  1954,  1149,  1318,  1229,  3143,  1324,  2482,
    1034,  3145,  3334,  1247,  1248,  1150,  1227,  1637,  1731,  1228,
    2026,  3147,  3212,  1451,  2038,  1225,  1226,  1151,  2373,  1229,
    2098,  2099,  1227, -1571,  2781,  1228,  1009,  1010,  2934,  1011,
    2781,  1012,  3080,  3307,  3148,  2491,  2492,  2446,  2108,  1319,
    2721,  1262,  2402,  1417,  2935,   913, -1571,  2803,  2757,  2758,
    -666,  2806,  1035,  1152,  2447,  1153,  1320,   634,  3102,  2172,
    1657,  2483,  1227,  1154,  1245,  1228,  2875,  1229,  3105,  1262,
    2826,  1229,  2828,  2906,  4283,   121,  3131,  1262,   605,  1332,
    2661,  1245,  3149,  4501,  1731,  1321,  3488,  4500,  3331,  2044,
    2484,  1157, -1571,  1158,   937,  1159,  1229,  1165,  2108,  2261,
    1955,  1166,  1955,  1955,  3278,  1167,  2662,  1168,  3297,  2039,
    4425,  3489,  3290,  4137,  4138,   774,  1229,  1169, -1862,  1170,
    3311,   914,  3313,  3314,  4225,  4229,  1247,  1248,  1732,  2109,
     606,  3490,  1229,  1171,  3327,  1793,  1172,   634,   634,  1464,
    3724,  2825,  1036,  1829,  1173,   521,  1830,  3726, -1571,  1831,
    1250,  1251,  1252,  1253,  1254,  1255,  1256,  1257,  1176,  2485,
   -1571, -1571,  2663,  1658,  1229,  2664,  1177,  1661,  3218,  3219,
    1465,  3222,  3223,  2665,  1662,   945,   927,   122,  1333,  3732,
   -1571,  1340, -1571,  1229,  3494,  1262,  2933,  3516,  3517,  1178,
    1229,  2666,  1225,  1226,  2026,   123,  1179,  1229,  3981,  1180,
    4239,  1346,  3665,  3666,   607,  3734, -1571, -1571,  1229,  1181,
   -1571, -1571,  3735,  1182,  1247,  1248,  3673,  3674,  1229,  1609,
    1610,  1611,  2969,  3736,  1466,  3704,  3712,  -666,  2073,  1467,
    1183,  1247,  1248,  3737,  1184, -2690,  1629,  2984,  2486,  1185,
     915,   916,   917,   918,   919,   920,  3981,  3728,  1262,  2463,
    2464,  3005,  2074,  1186,  2026,  1663,  1229,  3742,  1262,  1241,
     921,  2876,  1187,   124,  1188,  4225,  2475,  1692,  1189,  4229,
    1696,  3969,  1229,  1250,  1251,  1252,  1253,  1254,  1255,  1256,
    1257,  3757,  3758,  2493,  2494,  3887,  2492,  4090,  4065,  4066,
    1714,  1715,  2667,  1190,  1719,  1191,  2482,  1649,  1650,  1651,
    1652,  1653,  1192,   974,  4079,  4080,   624,  2984,  4083,  4080,
    1665,  1196,  1229,  2109,  1733,  1734,   624,   624,   624,  1793,
    1197,  3476,  4084,  4080,  4106,  4107,  3008,  3009,  -666,  3011,
    2451,  3013,  3014,  3015,  3016,  3017,  3018,  3019,  4136,  3223,
    3022,  1277,  1200,  3027,  2906,  1201,  3030,   125,  2601,  2602,
    2603,  2604,   936,  3715,  1037,  1207,  2907,  1211,  2483,  4144,
    4080,  3495,  1251,  1252,  1253,  1254,  1255,  1256,  1257,  4153,
    4154,  1242,  1212,  2109,  1342,  4269,  3517,  1632,  1468,  1793,
    1252,  1253,  1254,  1255,  1256,  1257,  1213,  2484,  1794,  2110,
    4270,  4080,  1214,   686,  1215,  4606,  2668,  1264,  3057,  1654,
    1655,  1656,  1657,  1632,  1354,  2935,  4271,  4080,  3074,  3075,
    3076,  4273,  4080,   915,   916,  1364,   918,  1376,   920,  3038,
    1038,  1378,  1039,  4274,  4080,  4280,  4281,  4225,  4229,  1395,
    1312,  1396,  2314,   921,  1397,  1339,   634,   634,   634,  1633,
    1400,  2783,  4282,  4281,   624,  4321,  4322,  1403,   517,  2110,
    1408,  2487,  1666,  1469,  1409,   608,  2485,  -666,  4376,  3223,
    4377,  3223,   518,   634,  1428,  1633,  1732,  1668,  1634,  4449,
    4450,  1432,  4666,  4469,  3517,  1243,  3975,   609,   126,  4503,
    4504,  1164,  1433,   712,   634,   634,   634,   974,  4563,  3401,
    4609,  4610,  4655,  4656,  1634,  1437,  3587,  3239,  1244,  2073,
    3573,  3574,  1449,  2896,  1458,  1658,  1459,  1659,  1660,  1661,
     610,  3822,  3917,  3918,  3825,  3826,  1662,  1470,  2751,  1460,
    4140,  2482,  1461,  2074,  3351,  1721,  1722,  3684,  3534,  3535,
    1955,  3838,   686,   518,  1242,  2486,  3195,  1635,   716,  2669,
    2111,  3905,  3906,  3501,  3502,   717,  3709,   974,   127,  1480,
    3359,  3755,  3756,  1484,  1485,  1490,  1498,  1227,  1499,  2482,
    1228,  1504,  3353,  1635,  1505,  1245,  1507,  1512,  3238,   611,
    -862,  1517,  1794,  1523,   721,   722,  1529,  2864,  3399,  2082,
    2083,  2984, -2690,  2483,  1531,  1071,  1072,  3294,  1533,  1536,
    1731,  3292,  2984,  3304,  4238,  2096,  1537,  1663,  3303,  1541,
    2111,  1545,  1546,  2605,  2482,  1552,  1551,  3355,  2670,  1242,
    1553,   128,  2484,   634,  3303,  3975,  1636,  3328,   519,  3324,
    4021,  2483,   712,  3339,  1732,  1574,  1575,  1576,  1579,  3341,
    3342,  1581,  1794,  1471,   624,  1601,  1582,  2671,  2219,  1599,
    1605,  3972,  1636,   730,  3452,  2482,  3303,  1260,  1612,  1631,
    2484,  1664,  1665,  2984,  3365,  1642,  1688,  1677,  4241,  3383,
    2908,  1689,  1246,  1690,  1748,   507,  2483,  4162,  1764,  3393,
    1472,  3305,  3306,  4162,  3303,  1791,  -666,   716, -2690,   579,
    1712,  2485,  1729,  1739,   717,  1770,  1790,  1797,  1798,  1804,
    1801,  1805,  3343,  3389,  3344,  2484,  1806,  1812,  1807,  3338,
    3453,  1808,  1380,  3454,  1809,  1811,   741,  2483,  2152,  1823,
    3406,  3455,  1381,   721,   722,  1247,  1248,  4010,  4284,  2485,
    1824,   745,   746,  2098,  2099,  3417,  3340,  1382,  1245,  3456,
    3382,  1249,   624,  1825,  1826,  1849,  2484,  3345,  1852,  1383,
    1384,  1385,  1242,  2917,  1861,  1869,  2920,  2921,  2487,  2923,
    1632,  3431,  2926,  2927,  1871,  1870,  2930,  1386,  1876,  3346,
    2486,  2939,  1872,  1881,  2485,  1882,  2943,  2944,  2945,  2946,
    2947,   521,  1883,  3457,  2951,  2952,  1892,  2954,  1898,  1922,
    1930,  1931,   730,  2963,  2964,  2965,  2966,  1935,  3409,  2970,
    2971,  1966,  2973,  2204,  1666,  3347,  1967,  2208,  2486,  1968,
    1969,  1971,  1972,  1245,  1973,  2485,  4360,  1229,  1667,  1668,
    1988,  2002,  1633,  3539,  4142,  4143,  2011,  4145,  4146,   520,
    2231,  2057,  2063,  2064,  3419,  2077,  2104,  2078,  3493,  1637,
    3458,  2122,  2123,  2130,  1731,  2147,  2826,  2141,  4238,  2153,
    2155,  3376,   521,  2486,  2156,   741,  3122,   536,  2157,  3037,
    2179,  2180,  2181,  -666,  2186,  1637,  1232,  1233,  1402,  2187,
     745,   746,  1250,  1251,  1252,  1253,  1254,  1255,  1256,  1257,
    2188,  2190,  3580,  2196,  2205,  2781,  3936,  2235,  1247,  1248,
    3948,  2201,   522,  2445,  2486,  -575,  1417,  2209,   523,  2226,
    2227,  2232,  1234,  2803,  3527,  2236,  2262,  3529,  1257,   634,
    2247,  2013,   832,   833,  1235,   537,  3594,  2825,   634,  2248,
    3377,  2013,   766,  2249,  2748,  2014,  3976,  3598,  2266,  3977,
    3600,   937,   937, -1258,   524,  2014,  2272,  2282,  1143, -1395,
     772,  3459,   525,   538,  3460,   774,  1245,  2302,   775,  1194,
    1198,  1732,  2317,  2335,  1236,  2344,  3568,  4508,  1563,  4396,
    2350,  4062,  2356,  1247,  1248,  2353,  1237,  4323,  2984,  2984,
    2377,  2378,  2382,  2383,  2398,  2404,  2405,  1334,  3303,   539,
    2406,  2984,  2409,  2487,  1387,  4409,  2410,  4336,  2422,  2411,
    2412,   634,  2426,  1238,  2413,  3303,  2424,  2984,  2984,  3378,
    4409,  1388,  2431,   834,  3978,  3979,  4346,  3348,  3545,  2440,
    2427,  2984,  3303,  2454,  2459,  4420,  2455,  2458,  2441,  2461,
    2465,  2487,  3461,  3303,  2467,  2468,  3303,   540,  2446,  2469,
    2470,  2471,  2472,  1417,   835,  1250,  1251,  1252,  1253,  1254,
    1255,  1256,  1257,  2571,  4121,  2447,  2575,  2577,   836,  2579,
    3603,  3349,  2580,   624,  2581,  1239,  2582,  2448,  3659,  2583,
    2584,   766, -1571,  3586,  2608,  3976,  2487,  4508,  3977,  2585,
    -673,   837,  3592,  2586,  2587,   838,  2588,  3846,  2445,   772,
    2589,  2590,  2591,  2592,   774,  3005,   839,   775,  2593,  2594,
    2015,  2595,  2596,  2597,  2598,  2599,  1247,  1248,  2600,  2630,
    2015,  2642,  2647,  2643,  2644,  2651,  2984,  2487,   840,  2655,
    1250,  1251,  1252,  1253,  1254,  1255,  1256,  1257, -1571,  2660,
    2684,  3846,  1335,  3847,  2683,  3776,  2685,  2695,   634,  2290,
    1389,  4513,  4514,  3848,  4516,   841,  2696,  1731,  2449,  2708,
    2445,  4650,   842,  3978,  3979,  3604,  3662,  2745,  2727,  2735,
    1731,  2755, -1571,   -67,  4659,  1731,  3462,  2756,   541,  4650,
    1731,  3780,  2744,  2762,  4659,  2773,  2016,  3847, -1571,  2763,
    4409,  2760,  2761,  3689, -1571,  2764,  2016,  3848,  2770,  3308,
    4545,  3849,   843,  2775,  2777,  3463,  2776,  2784,  1071,  1072,
    1390,  2017,  3317,  4559,  2785,  4560,  4561, -1571,  1856,  3765,
    2808,  2017,  2789,  1732, -1571,  2793,  2807,  2810,  1391,  2811,
     905,   833,  3379,  2446, -1571,  2812,  2390,  2389,  2830,  2831,
     634,  4121,  1906,  1907,  2841,  3849, -1571,  2856,   542,  2859,
    2447, -1571,  2871,  2872,  2873,  2892,  4583,  4326,  2888,  2893,
   -1571,  2906,  2448,  1250,  1251,  1252,  1253,  1254,  1255,  1256,
    1257,  2919,  2450,  3850,  2018,  2924,  2925,  2928,  2929,  2931,
    2932,  4409,  2938,  4409,  2018,   814,  2940,  3303,  2941,  2942,
    4603,  2984,  2949,  2950,  2955,  2446,  2961,  2956,   268,  1732,
     270,  4409,  4621,  3303,  2991,   624,  2995,  2962,  3000,  2972,
    3006,   543,  2447,   880,  4636,  4110,  3036,   544,  1417,  3035,
    3044,   834,  3040,  4111,  2448,  3045,  3077, -1571,  2148,  2536,
    -831,  3086,  4409,  4409,  3091,   844,   545,  4641,  3097,   845,
    3099,  2451,   268,  2449,   270,  3100,  3101,  3108,  3109,  4112,
   -1571,  4328,   835,  3152,  3156,   846,  3154,  3161,  3164,  3185,
   -1571,   546,  3165,   847,  3192,  3190,   836,  2019,  3197,  3167,
    3877,   848,  3200,  3882,  -831,  3201,  1356,  2019,   547,  3168,
    3204,  3207,  3220,  3225,  3236,  3217,  3539,  3245,  3241,   837,
    3214,  3417, -1571,   838,  3169, -1862,  3237,  3260,   849,  3242,
    3904,  3904,  3904,  1955,   839,  2449,  3170,  3171,  3172,  3254,
    3253,   850,   851,   634,  3264,  3267,  3310,  3387,  3374,  3312,
    3384,  3390,  3391,  3395,  3173,  3400,   840,  3401,  3784,  3412,
    1071,  1072,  3405,  3413,  3420,   814,  3851,  3421,  3418,  3422,
     814, -1571,  2324,  3852,  3449,  2004,  3468,  4662,  3471,  4000,
    4001,  3888,  3472,   841,  3479,  3480,  2402,  2450,  3498,  3497,
     842,   852,  4004,  3507, -1571,  2325,  3509,  3940,  4113,  4007,
    3512,  2369,  3519,  3532,  1071,  1072,   814,  3552,  2326,  3553,
    3851,   634,  3948,  3853,  3564,  3570,  3540,  3852,  3569,  3571,
    2327,  2806,   853,   814,  3583,  4026,  4027,  3595,  3591,  3601,
     843,  3904,  3602,  2569,  3661,  3663,  2984,  3670,  3985,  3671,
   -1571,  3685,   624,  3676,   854,  3687,   855,  3686,  3694,  2450,
    3990,  3699,  3706,  3690,  3702,  3710,  2451,  3853,  3703,  3696,
    3697,  3698,  3713,  3704,  3705,   814,   814,   814,   814,  3716,
    2328,  3718,  2329,  3720,  3729,  3730,  3731,   814,  3721,  4114,
    3722,   634,  4326,  3854,  3743,  3725,  3744,  1417,  3772,  3761,
    3760,  3773,  3753,  3763,  3758,  3770, -1571,  4115,  3778,  2330,
    3777, -1481, -1486,  3800,  3240,  3801,  3787,  4028,  3808, -1571,
    3797,  3823,  3866,  3911,  3916,  3915,  3919,  3816,  2451,  3889,
    4116,  3921,  3922,  3923,  3934,  4070,   624,  3854, -1571,  3873,
   -1571,  3890,  3712,  3935,  3983,  3941,  3953,  3955,  3970,  3971,
    3973,  3974,  3991,  1649,  1650,  1651,  1652,  1653,  4013,  3988,
    3999,   833,  3863,  4009, -1571, -1571,  4003,  4005, -1571, -1571,
     814,  4121,  4015,   844,  2331,  4016,  4014,   906,  4017,   624,
    4019,  3174,  4020,  4029,  4074,  4063,  4082,  4085,  4087,  4086,
    4088,  1283,   634,   846,  4091,  4093,  4104,  4555,  3175,  4101,
    3855,   847,  4133,  4135,  4152,  4158,  4633,  4166,  4174,   848,
    4167,  4164,  4168,  -351,  3904,  3904,  4192,  3904,  3904,  4206,
    4195,  4221,  4231,  4194,  1284,  4233,  4210,  4245,  4071,  2332,
    4248,  4249,  4254,  4633,  4257,  4259,   849,  4266,  4261,  4289,
    4276,  4292,  -369,  4318,  3855,  4319,  4320,  4345,  4362,   850,
     851,   834,  4338,  4339,  4348,  1654,  1655,  1656,  1657,  4350,
    3369,  4374,  4398,  4399,  4406,  4172,  4405,  4416,  4417,  4410,
    4419,  4102,  4422,  4439,  4453,  4555,  4178,  4454,  4455,  4456,
    4462,  4185,   835,  4463,  4464,  4465,  4470,  4473,  4483,  4474,
    4478,  4485,  4487,  1285,  4488, -2411,   836,  4491,  4497,   852,
    2503,  2528,  4512,  4515,   974,  4517,  4518,  4523,  4522,  4546,
    4199,  4203,  3176,  4533,  4547,  4549,  4567,  4552,  1286,   837,
    4117, -1655,  1287,   838,  3904,  4570,  4562,  3177,  4571,  4572,
     853,  4576,  4577,  4584,   839,  4581,  4171,  4587,  4589,  4592,
    4590,  4596,  4604,  4598,  4601,  1732,  4602,  4664,   814,  4612,
    4608,  3940,   854,  4614,   855,  4622,   840,  1288,  4637,  4651,
    4638,  1658,  4187,  1659,  1660,  1661,  4642,  4661,  2753,  3029,
    3886,  1479,  1662,  3675,  2900,  1094,  3893,  2806,  1289,  2806,
    4207,  4329,  4498,   841,  4499,  1535,  3891,  3178,  3895,  4653,
     842,  4069,  1290,  4616,   592,  2310,   987,  2380,  4277,  3181,
    4040,  4041,  4361,   814,   814,  3179,  4043,  4044,  4046,  4047,
    4626,  4048,   814,   814,   814,   814,   814,   814,   814,   814,
     814,   814,   814,   814,  4049,  4293,  4050,  4051,  4530,  4403,
     843,   814,   814,  4531,   814,   814,  4054,  4496,  4055,   814,
    1291,  4056,   814,   814,   814,   814,  4415,   814,   814,   814,
    4414,  1578,  2055,  1663,  2293,  4209,   814,   814,  4076,   814,
     814,   814,   814,   814,  2976,  1292,   814,   814,   814,   814,
     814,   814,   814,   814,   814,   814,  3597,   814,  3203,  2553,
     814,   814,  3511,  2788,  4349,   814,  1859,  3766,  4586,   814,
     814,   814,  4243,  4103,  4511,  4554,  2107,   634,   673,  3899,
    3364,  3410,  4256,  4367,   814,   814,  2974,  1664,  1665,  3693,
    2981,  3371,   814,  3982,  2751,  3984,  4568,  3465,  3831,   814,
     814,   814,  4018,   814,  4286,  4160,  3872,  4332,  4438,  4008,
     814,   814,   814,  2890,   814,   814,   814,   814,   814,  4383,
     814,   814,   814,   814,   814,   814,   814,   814,   532,   533,
    4468,   814,   814,  4467,  2641,  4335,  4343,  3073,  2978,  4341,
    4163,  4354,  4355,   844,  3363,  4220,  4203,  1989,  1543,  1293,
    3987,  1503,  2863,  2574,  2790,  4418,  2105,  3803,  1294,  2361,
    4432,  2069,  2771,   846,  2813,  3508,  3194,  2726,  4061,  1732,
    1013,   847,  2388,  1295,  3496,  1407,  2676,  4510,  2674,   848,
    4285,  3163,  3549,  1687,  4268,  2883,  4139,  2877,  2725,   634,
    4520,  1296,  3672,  3811,  2742,  4521,  1283,  2005,  3358,  3250,
    3957,  4607,  3950,  2820,  2645,  1843,   849,  1630,  1874,  2769,
    2796,  3768,  3523,  3522,  1001,   814,  3558,  4436,  2146,   850,
     851,  1112,  2433,  1947,  2434,   982,   985,  2860,  2304,  1284,
    1666,  4431,  1297,  3815,  3510,  1298,  4585,  4457,  4660,  4605,
    4519,  4663,  4012,  1880,  1667,  1668,  3526,  1895,  3542,  2839,
     939,  4446,  4447,  2265,  3543,   940,  2837,  2416,  2836,  2349,
     908,  2829,  1887,  1299,  1394,  4092,  2129,  1836,  4100,   852,
    1399,  3182,   634,   910,  1098,   667,   814,  1099,   668,     0,
       0,  1100,     0,     0,     0,  1300,   814,     0,  3005,  3005,
    2502,     0,     0,     0,     0,  2503,     0,  2504,  1285,  2505,
     853,   814,     0,     0,     0,   814,     0,     0,  4535,     0,
    2506,     0,  2507,     0,     0,  4543,     0,     0,     0,     0,
       0,     0,   854,  1286,   855,     0,     0,  1287,     0,     0,
       0,     0,     0,     0,  1301,     0,     0,     0,     0,     0,
       0,     0,  2508,     0,     0,     0,     0,  2509,  2510,     0,
       0,     0,     0,     0,  2511,     0,     0,     0,     0,     0,
     814,     0,  1288,     0,     0,     0,  2512,     0,     0,     0,
       0,     0,     0,     0,  2513,     0,  4654,     0,     0,     0,
       0,     0,     0,  1289,  2514,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  4594,  1290,     0,     0,
    2515,  4599,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1523,     0,     0,  2516,     0,  4566,
       0,     0,     0,     0,     0,  2517,  2518,     0,     0,     0,
       0,     0,  2519,     0,     0,     0,     0,  4634,     0,     0,
    2520,     0,     0,     0,  -939,  1291,  2521,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2522,     0,     0,
    2079,     0,  1732,     0,  4634,     0,     0,     0,     0,     0,
    1292,   634,     0,     0,     0,  1732,  2523,     0,     0,     0,
    1732,     0,   814,     0,     0,  1732,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    4246,  4247,     0,     0,  4250,  4251,  4252,  4253,     0,     0,
       0,   268,     0,   270,     0,     0,     0,  2524,     0,  2525,
    2080,     0,  2081,  2082,  2083,  2084,  2085,  2526,  2086,  2087,
    2088,  2089,  2090,  2091,  2092,  2093,  2094,     0,  2095,  2096,
    2097,     0,  2527,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2528,     0,     0,     0,
       0,     0,     0,     0,  1293,     0,     0,     0,     0,     0,
       0,     0,     0,  1294,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   814,   814,   814,     0,  1295,     0,
    2529,     0,     0,  4333,     0,     0,     0,     0,   814,     0,
       0,     0,     0,     0,     0,     0,  1296,     0,  2530,     0,
       0,     0,  2531,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   814,  2506,     0,  2507,  4356,  4357,
     814,     0,     0,   814,     0,   814,     0,  4365,     0,     0,
       0,   814,     0,   814,   814,     0,     0,  1297,     0,     0,
    1298,  2532,     0,     0,     0,     0,  2533,  2098,  2099,  -814,
    -814,     0,  2509,  2534,     0,  2535,     0,     0,     0,     0,
    2536,  -814,     0,  2537,     0,     0,     0,     0,  1299,     0,
       0,  2512,     0,     0,     0,     0,     0,     0,     0,  2513,
       0,     0,     0,     0,     0,     0,     0,   511,     0,     0,
    1300,   512,     0,     0,  2538,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2515,     0,     0,  2539,  2540,
    2541,  2542,     0,     0,     0,     0,   814,     0,     0,  1523,
       0,     0,  2516,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2543,     0,     0,     0,     0,     0,     0,  1301,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2521,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   814,     0,     0,     0,
    1120,     0,     0,     0,     0,   814,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2544,  2545,
    2546,     0,     0,     0,     0,  2547,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1156,     0,     0,     0,
       0,  2548,     0,     0,     0,  2549,   268,     0,   270,     0,
       0,     0,     0,  1174,  2525,     0,     0,     0,     0,     0,
       0,     0,  2526,     0,  2550,     0,     0,     0,     0,  2551,
       0,     0,     0,     0,     0,     0,     0,  2527,     0,     0,
       0,     0,  2552,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1219,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2529,  2568,     0,     0,     0,
       0,     0,     0,     0,     0,  -939,     0,     0,     0,     0,
       0,     0,     0,  2530,     0,     0,     0,     0,   814,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1355,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2534,     0,
    2535,     0,     0,     0,     0,     0,  2568,     0,  2537,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     814,     0,     0,     0,   814,     0,     0,     0,     0,   814,
     814,     0,     0,     0,     0,     0,     0,     0,   814,     0,
     814,     0,   814,   814,   814,   814,     0,     0,   814,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   814,     0,
     814,   814,     0,   814,   814,   814,   814,     0,   814,     0,
       0,   814,     0,     0,     0,     0,     0,  2543,     0,     0,
     814,     0,     0,     0,     0,     0,     0,   814,     0,   814,
       0,   814,   814,   814,   814,     0,     0,     0,   814,   814,
     814,     0,     0,     0,   814,   814,   814,     0,   814,     0,
     814,     0,   814,     0,   814,     0,   814,     0,     0,     0,
       0,   814,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2544,  2545,  2546,   814,     0,     0,     0,
    2547,     0,     0,   814,     0,     0,   814,     0,     0,     0,
       0,     0,   814,     0,     0,   814,  2548,     0,  1559,   814,
    2549,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2550,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2552,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1603,  1604,     0,     0,     0,     0,     0,
       0,   814,  1614,  1615,     0,     0,  1618,  1619,  1620,  1621,
    1624,  1625,  1626,  1627,     0,     0,     0,     0,     0,     0,
       0,  1643,  1644,     0,  1645,  1646,     0,     0,     0,     0,
       0,     0,  1679,  1680,  1681,  1682,  3067,     0,  1685,     0,
       0,     0,     0,     0,     0,     0,  1693,  1694,     0,  1697,
    1698,     0,     0,     1,     0,     2,  1702,  1703,  1704,     0,
       0,  1707,  1708,  1709,  1710,  1711,     0,  1713,   814,     0,
    1716,  1717,     3,     0,     0,  1720,     4,     0,     0,  1723,
    1727,  1728,     0,     0,     0,     0,     0,     0,     0,     0,
       5,     6,     0,     0,  1735,  1736,     0,     0,     7,     0,
       0,     0,  1744,     8,     9,     0,     0,     0,     0,  1749,
    1750,  1751,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    10,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1787,    11,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    12,     0,     0,     0,
       0,     0,     0,     0,    13,    14,    15,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    16,    17,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      18,     0,     0,     0,     0,  2568,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    19,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1846,     0,     0,     0,     0,
       0,    20,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    21,     0,    22,     0,
       0,     0,     0,    23,     0,     0,   942,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   943,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   884,
     944,     0,    25,     0,    26,     0,  1894,     0,  2568,     0,
       0,     0,     0,     0,     0,     0,  1900,     0,     0,     0,
      27,     0,     0,   814,   945,   927,     0,   814,     0,     0,
       0,  1928,   946,     0,     0,  1934,     0,   947,    28,     0,
       0,     0,    29,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   814,   814,     0,     0,     0,     0,
       0,     0,     0,   948,     0,   949,     0,   950,     0,     0,
       0,     0,     0,     0,   814,     0,     0,     0,   951,     0,
       0,     0,     0,   814,     0,   814,     0,   814,     0,     0,
    1979,     0,     0,     0,     0,     0,     0,     0,     0,    14,
      15,     0,     0,     0,   814,     0,     0,     0,     0,   814,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0, -1862,   952,     0,     0,     0,
       0,   953,     0,  2506,   954,  2507,   814,    30,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    31,     0,    32,     0,     0,     0,
       0,   955,     0,   956,     0,     0,     0,  -814,  -814,    33,
    2509,   957,     0,   958,     0,     0,     0,     0,     0,  -814,
      34,     0,     0,     0,     0,     0,     0,     0,     0,  2512,
       0,     0,     0,     0,     0,     0,     0,  2513,   959,   960,
     961,     0,    35,     0,     0,    36,     0,    37,   814,     0,
      38,     0,  2158,    39,    40,     0,     0,     0,     0,     0,
       0,   962,    41,  2515,    42,     0,     0,     0,     0,     0,
       0,     0,    43,     0,     0,     0,     0,  1523,    44,     0,
    2516,     0,     0,   963,     0,     0,    45,     0,     0,     0,
       0,    46,    47,    48,     0,     0,     0,     0,     0,   814,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2521,
       0,     0,     0,   964,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    49,     0,     0,     0,     0,     0,     0,
      50,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2239,  2241,  2243,     0,     0,     0,
       0,     0,     0,     0,   268,    51,   270,     0,     0,     0,
     965,     0,  2525,     0,     0,  2568,     0,    52,     0,     0,
    2526,    53,     0,     0,    54,     0,     0,     0,   814,   814,
      55,     0,     0,     0,  2274,  2527,   966,     0,     0,     0,
       0,     0,     0,  2279,     0,  2280,     0,   967,   968,  2632,
       0,   969,   970,     0,     0,     0,     0,     0,     0,    56,
       0,     0,     0,     0,     0,    57,     0,     0,     0,     0,
       0,     0,   971,     0,     0,    58,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2529,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2568,     0,     0,
       0,  2530,     0,     0,     0,     0,     0,   972,     0,     0,
       0,     0,     0,     0,     0,   814,     0,     0,     0,     0,
     973,     0,     0,     0,     0,     0,  2357,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   814,   814,     0,
     814, -2450,     0,     0,     0,   974,  2534,     0,  2535,   814,
       0,     0,     0,     0,   814,     0,  2537,   814,     0,   814,
     814,     0,     0,   975,   976,     0,  2415,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     814,     0,     0,     0,     1,     0,     2,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     4,     0,     0,
     814,     0,   977,     0,     0,     0,     0,     0,     0,     0,
       0,     5,     6, -2450,     0,  2543,     0,     0,     0,     7,
       0,   978,     0,   814,     8,     9,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    10,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    11,     0,     0,     0,     0,     0,
       0,  2544,  2545,  2546,     0,     0,     0,     0,  2547,   814,
       0,     0,     0,     0,     0,     0,     0,    12,     0,     0,
       0,     0,     0,     0,  2548,    13,    14,    15,  2549,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    16,    17,
       0,     0,     0,     0,     0,     0,     0,  2550,  2578,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2552,    19,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    20,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    21,     0,    22,
       0,     0,     0,     0,    23,     0,     0,     0,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2654,     0,  2633,     0,  2656,     0,     0,     0,     0,  2658,
    2659,     0,     0,    25,     0,    26,     0,     0,  1621,     0,
    2675,     0,  1621,     0,  2678,  2679,     0,     0,     0,     0,
       0,    27,     0,     0,     0,     0,     0,     0,  2686,     0,
    2687,     0,     0,  2689,  2690,  2691,  2692,     0,  2693,    28,
       0,     0,     0,    29,     0,     0,     0,     0,     0,     0,
    2697,     0,     0,     0,     0,     0,     0,  2698,     0,  2699,
       0,  2700,  2701,  2702,     0,     0,     0,     0,  2705,  2706,
    2707,     0,     0,     0,  2709,  2710,  2711,     0,  2712,     0,
    2714,     0,  2716,     0,  2718,     0,  2719,     0,     0,     0,
       0,  2720,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2730,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2740,     0,     0,  2743,     0,     0,     0,     0,
     814,     0,     0,     0,     0,     0,     0,     0,    30,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    31,     0,    32,     0,     0,
       0,     0,     0,     0,     0,     0,   814,     0,     0,     0,
      33,     0,     0,     0,   814,     0,     0,     0,     0,   814,
       0,    34,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    35,     0,     0,    36,     0,    37,     0,
       0,    38,     0,     0,    39,    40,     0,     0,     0,     0,
       0,     0,     0,    41,     0,    42,     0,     0,     0,     0,
       0,     0,     0,    43,     0,     0,     0,     0,     0,    44,
       0,     0,     0,     0,     0,     0,     0,    45,     0,     0,
       0,     0,    46,    47,    48,     0,     0,     0,  1928,  3605,
    3606,  3862,     0,     0,     0,  3607,     0,  3608,     0,  3609,
    3610,     0,     0,     0,     0,  3361,     0,     0,     0,     0,
    2503,     0,  2504,     0,    49,     0,  3452,     0,     0,     0,
       0,    50,     0,     0,     0,  2506,     0,  2507,     0,     0,
       0,     0,  2568,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2508,     0,     0,
       0,     0,  2509,   814,     0,     0,    51,   814,     0,     0,
       0,     0,  3611,     0,     0,  3612,     0,     0,    52,     0,
       0,  2512,    53,  3613,     0,    54,     0,     0,     0,  2513,
       0,    55,     0,     0,     0,     0,     0,     0,   814,  2514,
       0,  3614,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   814,     0,     0,  2515,     0,     0,  3615,     0,
      56,     0,     0,     0,     0,     0,    57,     0,     0,  1523,
       0,     0,  2516,     0,     0,     0,    58,     0,     0,     0,
    2517,     0,     0,  3616,     0,  3617,     0,  3362,     0,     0,
       0,     0,     0,     0,     0,  2520,     0,     0,  3618,  3619,
       0,  2521,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2523,     0,     0,     0,     0,     0,     0,  3862,     0,
       0,     0,  3620,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  4058,     0,     0,     0,
       0,     0,     0,  3082,     0,     0,   268,  3084,   270,     0,
       0,  3621,     0,     0,  2525,     0,     0,     0,     0,     0,
    3622,  3623,  2526,  3624,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3111,  3112,     0,  2527,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3132,     0,   814,  3625,  3626,  3627,
       0,  2528,     0,  3142,     0,  3144,   814,  3146,     0,     0,
       0,     0,   814,     0,   814,     0,  3628,  3629,  3630,     0,
       0,     0,     0,  3631,     0,     0,  3632,     0,     0,     0,
       0,     0,     0,     0,     0,  2529,     0,     0,     0,     0,
       0,     0,     0,  3633,  3634,     0,     0,     0,     0,     0,
       0,     0,     0,  2530,     0,     0,  3191,  2531,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3635,
    3636,     0,     0,     0,     0,     0,     0,     0,     0,   814,
       0,     0,     0,     0,     0,  4058,  4058,     0,     0,     0,
       0,  2533,     0,     0,  3637,     0,     0,     0,  2534,     0,
    2535,     0,     0,     0,     0,     0,     0,     0,  2537,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1928,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  4219,
       0,     0,     0,  4219,  4219,     0,     0,     0,   814,     0,
       0,     0,     0,     0,     0,     0,     0,  3638,     0,     0,
       0,  3639,     0,     0,  2540,  2506,     0,  2507,     0,     0,
       0,     0,     0,     0,     0,  3640,     0,     0,     0,  3272,
       0,     0,     0,     0,   814,     0,     0,  2543,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  -814,
    -814,     0,  2509,     0,     0,     0,     0,     0,     0,     0,
       0,  -814,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2512,     0,     0,     0,     0,     0,     0,     0,  2513,
       0,     0,  3641,     0,   814,  3642,   814,     0,  3643,  3644,
    3645,  3646,     0,  2544,  2545,  2546,   814,     0,  4058,  4058,
    2547,     0,     0,     0,     0,  2515,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2548,     0,     0,  1523,
    2549,     0,  2516,     0,     0,  4219,     0,     0,  3385,  3386,
       0,     0,  3647,  3648,  4219,     0,     0,     0,  4219,  2550,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2521,     0,     0,     0,     0,     0,  2552,  3649,     0,
       0,     0,     0,     0,  2506,     0,  2507,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  4219,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2509,     0,     0,     0,   814,     0,  4058,     0,     0,
       0,     0,     0,     0,     0,     0,   268,     0,   270,     0,
    2512,     0,  4058,   814,  2525,  3435,     0,     0,  2513,     0,
       0,     0,  2526,     0,     0,     0,     0,  4058,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2527,     0,  4433,
       0,     0,     0,     0,  2515,     0,   814,  3474,  3475,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1523,  3482,
       0,  2516,     0,     0,  3484,     0,     0,  3485,     0,  3486,
    3487,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  4219,     0,  4219,  4219,     0,     0,
    2521,     0,     0,     0,     0,  2529,     0,     0,     0,     0,
       0,   814,  4058,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2530,  4058,  4058,     0,     0,     0,     0,
    3504,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   814,  3504,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   268,     0,   270,     0,     0,
       0,     0,     0,  2525,     0,     0,     0,     0,  2534,     0,
    2535,  2526,     0,     0,     0,     0,     0,     0,  2537,     0,
       0,     0,  4058,     0,     0,     0,  2527,     0,     0,   814,
       0,     0,  4058,     0,     0,     0,     0,     0,     0,  3504,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   814,
       0,     0,     0,     0,     0,     0,  4058,     0,  4058,     0,
       0,     0,     0,     0,  2529,     0,     0,  2543,  4058,     0,
       0,     0,   814,     0,     0,   814,     0,     0,     0,     0,
       0,     0,  2530,     0,     0,     0,     0,     0,     0,     0,
       0,  4058,     0,  4058,     0,  4058,     0,     0,     0,     0,
       0,     0,  4058,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  4058,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2544,  2545,  2546,     0,     0,  4058,  4058,
    2547,     0,     0,     0,   814,     0,     0,  2534,     0,  2535,
       0,     0,     0,     0,  4058,  4058,  2548,  2537,     0,  4058,
    2549,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2550,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   814,     0,     0,  2552,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2543,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3504,     0,  2544,  2545,  2546,     0,     0,     0,     0,  2547,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2548,     0,     0,     0,  2549,
       0,     0,     0,     0,     0,     0,  3786,     0,     0,     0,
       0,     0,     0,     0,  3272,     0,     0,     0,  2550,  3794,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2552,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3272,     0,     0,     0,  3914,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3504,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3272,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  4127,     0,     0,     0,
       0,     0,  4132,     0,  4134,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  4173,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3272,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3272,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  4287,     0,  4288,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  4296,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  4407,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  4412,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3504,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  4481,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  4537,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  4569,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   141,     0,   682,
     143,   144,   145,   146,     0,  4588,   147,     0,     0,     0,
     148,     0,     0,   683,     0,   150,   151,   152,   153,   154,
     155,   684,   157,     0,   158,     0,     0,   685,   159,   686,
     687,   688,   160,   689,     0,   161,   162,   163,  1724,   164,
       0,   165,   166,     0,     0,   167,   690,   691,   168,   169,
       0,   170,   692,   693,   172,   173,     0,   174,   175,   176,
     177,   178,   694,   180,  4635,   695,   182,   696,   697,   698,
     699,   700,     0,   188,   189,   190,   191,   192,   193,   194,
     195,     0,   196,   197,     0,   198,   199,   200,   701,   202,
       0,   203,   702,   703,   204,     0,     0,   205,   704,   206,
     705,   207,     0,   208,   706,   707,     0,   209,   210,   211,
     708,   709,   710,     0,  3504,     0,     0,   711,   214,   712,
       0,     0,   713,   215,     0,   216,     0,     0,     0,   217,
       0,   218,   219,   220,   221,   222,     0,     0,     0,   223,
       0,     0,   224,   225,   226,     0,     0,     0,   227,     0,
     228,   229,     0,   230,   231,   232,     0,     0,   233,   234,
       0,   235,   236,   237,   238,   239,   240,   241,   714,     0,
     242,   243,   244,   715,   716,   245,   246,     0,   247,   248,
     249,   717,     0,   250,     0,     0,     0,   251,     0,   252,
       0,   253,     0,   254,   255,   718,   257,   719,     0,   259,
       0,   260,     0,   720,     0,   261,   262,   263,     0,   264,
     721,   722,     0,   265,   266,     0,     0,     0,   723,   268,
     269,   270,   724,     0,   271,   272,   273,     0,   274,     0,
     275,     0,     0,     0,   725,   276,   277,   726,     0,     0,
     278,     0,   279,   280,     0,   281,   282,     0,     0,     0,
     283,     0,     0,   284,   285,   727,     0,  1725,   287,     0,
     728,   288,   289,     0,     0,     0,     0,     0,   729,   291,
       0,   292,     0,   293,     0,   294,   295,     0,     0,   730,
       0,     0,     0,     0,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
       0,   312,   313,   314,   315,   731,   316,   317,   318,   319,
     732,   320,   321,     0,     0,     0,     0,   322,   323,   324,
     325,   733,   327,     0,     0,   734,   329,   735,   330,     0,
     331,   736,   737,   738,   739,   740,   336,   337,   338,   339,
     340,     0,   741,   341,   342,     0,     0,   343,   344,   345,
     346,   742,   743,   744,   347,   348,     0,   745,   746,   349,
       0,   350,   351,   747,     0,   353,   354,   355,   356,     0,
     357,   358,     0,     0,     0,     0,     0,     0,     0,     0,
     359,   360,   361,     0,   748,   362,     0,   363,     0,   364,
     365,   749,   367,   368,   369,   370,   750,   751,   373,   752,
       0,   374,   375,   376,     0,   377,     0,   378,   379,   380,
     381,   382,     0,   753,   384,   385,     0,     0,   386,     0,
       0,     0,   387,   388,   389,   390,   391,     0,     0,   392,
     393,   394,   395,   396,     0,   397,   398,     0,   399,   400,
     401,   754,   755,   402,     0,   403,     0,   404,   405,     0,
     406,   407,   408,     0,     0,   756,   409,   410,   411,   412,
     413,   757,   758,   416,   417,   418,   419,     0,   759,   421,
       0,     0,     0,   422,   423,   424,   425,     0,     0,     0,
     426,     0,     0,     0,   427,     0,   428,   429,   430,   431,
     432,   433,     0,   434,   435,   436,   437,   438,   439,     0,
       0,     0,     0,     0,     0,   440,   441,     0,   442,     0,
       0,   443,     0,     0,   444,   445,     0,     0,     0,   446,
     760,   761,   447,   448,     0,   449,   450,   762,   452,   453,
     454,   763,   764,   455,   456,   457,   458,   765,   459,   460,
       0,   461,     0,   462,   463,   464,   465,     0,   766,   466,
     467,     0,   767,   768,   769,   770,     0,     0,     0,     0,
    1726,   472,   473,   474,     0,   771,   772,   773,   476,   477,
     478,   774,   479,   480,   775,   481,   482,     0,   483,   484,
       0,     0,   485,     0,     0,   486,     0,   487,     0,   776,
     489,   490,     0,     0,   777,   778,   779,   780,   491,     0,
       0,   492,   781,     0,   782,   493,   494,   495,   496,   497,
     783,     0,     0,     0,     0,     0,     0,   499,   500,     0,
     501,   502,   503,     0,     0,   784,     0,     0,     0,     0,
     785,   786,     0,     0,     0,     0,   787,   788,     0,     0,
     789,   790,     0,     0,   791,   792,   141,     0,   682,   143,
     144,   145,   146,  1924,     0,   147,     0,     0,     0,   148,
       0,     0,   683,     0,   150,   151,   152,   153,   154,   155,
     684,   157,     0,   158,     0,     0,  1925,   159,   686,   687,
     688,   160,   689,     0,   161,   162,   163,     0,   164,     0,
     165,   166,     0,     0,   167,   690,   691,   168,   169,     0,
     170,   692,   693,   172,   173,     0,   174,   175,   176,   177,
     178,   694,   180,     0,   695,   182,   696,   697,   698,   699,
     700,     0,   188,   189,   190,   191,   192,   193,   194,   195,
       0,   196,   197,     0,   198,   199,   200,   701,   202,     0,
     203,   702,   703,   204,     0,     0,   205,   704,   206,   705,
     207,     0,   208,   706,   707,     0,   209,   210,   211,   708,
     709,   710,     0,     0,     0,     0,   711,   214,   712,     0,
       0,  1926,   215,     0,   216,     0,     0,     0,   217,     0,
     218,   219,   220,   221,   222,     0,     0,     0,   223,     0,
       0,   224,   225,   226,     0,     0,     0,   227,     0,   228,
     229,     0,   230,   231,   232,     0,     0,   233,   234,     0,
     235,   236,   237,   238,   239,   240,   241,   714,     0,   242,
     243,   244,   715,   716,   245,   246,     0,   247,   248,   249,
     717,     0,   250,     0,     0,     0,   251,     0,   252,     0,
     253,     0,   254,   255,   718,   257,   719,     0,   259,     0,
     260,     0,   720,     0,   261,   262,   263,     0,   264,   721,
     722,     0,   265,   266,     0,     0,     0,   723,   268,   269,
     270,   724,     0,   271,   272,   273,     0,   274,     0,   275,
       0,     0,     0,   725,   276,   277,   726,     0,     0,   278,
       0,   279,   280,     0,   281,   282,     0,     0,     0,   283,
       0,     0,   284,   285,   727,     0,     0,   287,     0,   728,
     288,   289,     0,     0,     0,     0,     0,   729,   291,     0,
     292,     0,   293,     0,   294,   295,     0,     0,   730,     0,
       0,     0,     0,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,     0,
     312,   313,   314,   315,   731,   316,   317,   318,   319,   732,
     320,   321,     0,     0,     0,     0,   322,   323,   324,   325,
     733,   327,     0,     0,   734,   329,   735,   330,     0,   331,
     736,   737,   738,   739,   740,   336,   337,   338,   339,   340,
       0,   741,   341,   342,     0,     0,   343,   344,   345,   346,
     742,   743,   744,   347,   348,     0,   745,   746,   349,     0,
     350,   351,   747,  1927,   353,   354,   355,   356,     0,   357,
     358,     0,     0,     0,     0,     0,     0,     0,     0,   359,
     360,   361,     0,   748,   362,     0,   363,     0,   364,   365,
     749,   367,   368,   369,   370,   750,   751,   373,   752,     0,
     374,   375,   376,     0,   377,     0,   378,   379,   380,   381,
     382,     0,   753,   384,   385,     0,     0,   386,     0,     0,
       0,   387,   388,   389,   390,   391,     0,     0,   392,   393,
     394,   395,   396,     0,   397,   398,     0,   399,   400,   401,
     754,   755,   402,     0,   403,     0,   404,   405,     0,   406,
     407,   408,     0,     0,   756,   409,   410,   411,   412,   413,
     757,   758,   416,   417,   418,   419,     0,   759,   421,     0,
       0,     0,   422,   423,   424,   425,     0,     0,     0,   426,
       0,     0,     0,   427,     0,   428,   429,   430,   431,   432,
     433,     0,   434,   435,   436,   437,   438,   439,     0,     0,
       0,     0,     0,     0,   440,   441,     0,   442,     0,     0,
     443,     0,     0,   444,   445,     0,     0,     0,   446,   760,
     761,   447,   448,     0,   449,   450,   762,   452,   453,   454,
     763,   764,   455,   456,   457,   458,   765,   459,   460,     0,
     461,     0,   462,   463,   464,   465,     0,   766,   466,   467,
       0,   767,   768,   769,   770,     0,     0,     0,     0,     0,
     472,   473,   474,     0,   771,   772,   773,   476,   477,   478,
     774,   479,   480,   775,   481,   482,     0,   483,   484,     0,
       0,   485,     0,     0,   486,     0,   487,     0,   776,   489,
     490,     0,     0,   777,   778,   779,   780,   491,     0,     0,
     492,   781,     0,   782,   493,   494,   495,   496,   497,   783,
       0,     0,     0,     0,     0,     0,   499,   500,     0,   501,
     502,   503,     0,     0,   784,     0,     0,     0,     0,   785,
     786,     0,     0,     0,     0,   787,   788,     0,     0,   789,
     790,     0,     0,   791,   792,   141,     0,   682,   143,   144,
     145,   146,     0,     0,   147,     0,     0,     0,   148,     0,
       0,   683,     0,   150,   151,   152,   153,   154,   155,   684,
     157,     0,   158,     0,     0,   685,   159,   686,   687,   688,
     160,   689,     0,   161,   162,   163,     0,   164,     0,   165,
     166,     0,     0,   167,   690,   691,   168,   169,     0,   170,
     692,   693,   172,   173,     0,   174,   175,   176,   177,   178,
     694,   180,     0,   695,   182,   696,   697,   698,   699,   700,
       0,   188,   189,   190,   191,   192,   193,   194,   195,     0,
     196,   197,     0,   198,   199,   200,   701,   202,     0,   203,
     702,   703,   204,     0,     0,   205,   704,   206,   705,   207,
       0,   208,   706,   707,     0,   209,   210,   211,   708,   709,
     710,     0,     0,     0,     0,   711,   214,   712,     0,     0,
     713,   215,     0,   216,     0,     0,     0,   217,     0,   218,
     219,   220,   221,   222,     0,     0,     0,   223,     0,     0,
     224,   225,   226,     0,     0,     0,   227,     0,   228,   229,
       0,   230,   231,   232,     0,     0,   233,   234,     0,   235,
     236,   237,   238,   239,   240,   241,   714,     0,   242,   243,
     244,   715,   716,   245,   246,     0,   247,   248,   249,   717,
       0,   250,     0,     0,     0,   251,  2238,   252,     0,   253,
       0,   254,   255,   718,   257,   719,     0,   259,     0,   260,
       0,   720,     0,   261,   262,   263,     0,   264,   721,   722,
       0,   265,   266,     0,     0,     0,   723,   268,   269,   270,
     724,     0,   271,   272,   273,     0,   274,     0,   275,     0,
       0,     0,   725,   276,   277,   726,     0,     0,   278,     0,
     279,   280,     0,   281,   282,     0,     0,     0,   283,     0,
       0,   284,   285,   727,     0,     0,   287,     0,   728,   288,
     289,     0,     0,     0,     0,     0,   729,   291,     0,   292,
       0,   293,     0,   294,   295,     0,     0,   730,     0,     0,
       0,     0,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,     0,   312,
     313,   314,   315,   731,   316,   317,   318,   319,   732,   320,
     321,     0,     0,     0,     0,   322,   323,   324,   325,   733,
     327,     0,     0,   734,   329,   735,   330,     0,   331,   736,
     737,   738,   739,   740,   336,   337,   338,   339,   340,     0,
     741,   341,   342,     0,     0,   343,   344,   345,   346,   742,
     743,   744,   347,   348,     0,   745,   746,   349,     0,   350,
     351,   747,     0,   353,   354,   355,   356,     0,   357,   358,
       0,     0,     0,     0,     0,     0,     0,     0,   359,   360,
     361,     0,   748,   362,     0,   363,     0,   364,   365,   749,
     367,   368,   369,   370,   750,   751,   373,   752,     0,   374,
     375,   376,     0,   377,     0,   378,   379,   380,   381,   382,
       0,   753,   384,   385,     0,     0,   386,     0,     0,     0,
     387,   388,   389,   390,   391,     0,     0,   392,   393,   394,
     395,   396,     0,   397,   398,     0,   399,   400,   401,   754,
     755,   402,     0,   403,     0,   404,   405,     0,   406,   407,
     408,     0,     0,   756,   409,   410,   411,   412,   413,   757,
     758,   416,   417,   418,   419,     0,   759,   421,     0,     0,
       0,   422,   423,   424,   425,     0,     0,     0,   426,     0,
       0,     0,   427,     0,   428,   429,   430,   431,   432,   433,
       0,   434,   435,   436,   437,   438,   439,     0,     0,     0,
       0,     0,     0,   440,   441,     0,   442,     0,     0,   443,
       0,     0,   444,   445,     0,     0,     0,   446,   760,   761,
     447,   448,     0,   449,   450,   762,   452,   453,   454,   763,
     764,   455,   456,   457,   458,   765,   459,   460,     0,   461,
       0,   462,   463,   464,   465,     0,   766,   466,   467,     0,
     767,   768,   769,   770,     0,     0,     0,     0,     0,   472,
     473,   474,     0,   771,   772,   773,   476,   477,   478,   774,
     479,   480,   775,   481,   482,     0,   483,   484,     0,     0,
     485,     0,     0,   486,     0,   487,     0,   776,   489,   490,
       0,     0,   777,   778,   779,   780,   491,     0,     0,   492,
     781,     0,   782,   493,   494,   495,   496,   497,   783,     0,
       0,     0,     0,     0,     0,   499,   500,     0,   501,   502,
     503,     0,     0,   784,     0,     0,     0,     0,   785,   786,
       0,     0,     0,     0,   787,   788,     0,     0,   789,   790,
       0,     0,   791,   792,   141,     0,   682,   143,   144,   145,
     146,     0,     0,   147,     0,     0,     0,   148,     0,     0,
     683,     0,   150,   151,   152,   153,   154,   155,   684,   157,
       0,   158,     0,     0,   685,   159,   686,   687,   688,   160,
     689,     0,   161,   162,   163,     0,   164,     0,   165,   166,
       0,     0,   167,   690,   691,   168,   169,     0,   170,   692,
     693,   172,   173,     0,   174,   175,   176,   177,   178,   694,
     180,     0,   695,   182,   696,   697,   698,   699,   700,     0,
     188,   189,   190,   191,   192,   193,   194,   195,     0,   196,
     197,     0,   198,   199,   200,   701,   202,     0,   203,   702,
     703,   204,     0,     0,   205,   704,   206,   705,   207,     0,
     208,   706,   707,     0,   209,   210,   211,   708,   709,   710,
       0,     0,     0,     0,   711,   214,   712,     0,     0,   713,
     215,     0,   216,     0,     0,     0,   217,     0,   218,   219,
     220,   221,   222,     0,     0,     0,   223,     0,     0,   224,
     225,   226,     0,     0,     0,   227,     0,   228,   229,     0,
     230,   231,   232,     0,     0,   233,   234,     0,   235,   236,
     237,   238,   239,   240,   241,   714,     0,   242,   243,   244,
     715,   716,   245,   246,     0,   247,   248,   249,   717,     0,
     250,     0,     0,     0,   251,  2240,   252,     0,   253,     0,
     254,   255,   718,   257,   719,     0,   259,     0,   260,     0,
     720,     0,   261,   262,   263,     0,   264,   721,   722,     0,
     265,   266,     0,     0,     0,   723,   268,   269,   270,   724,
       0,   271,   272,   273,     0,   274,     0,   275,     0,     0,
       0,   725,   276,   277,   726,     0,     0,   278,     0,   279,
     280,     0,   281,   282,     0,     0,     0,   283,     0,     0,
     284,   285,   727,     0,     0,   287,     0,   728,   288,   289,
       0,     0,     0,     0,     0,   729,   291,     0,   292,     0,
     293,     0,   294,   295,     0,     0,   730,     0,     0,     0,
       0,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,     0,   312,   313,
     314,   315,   731,   316,   317,   318,   319,   732,   320,   321,
       0,     0,     0,     0,   322,   323,   324,   325,   733,   327,
       0,     0,   734,   329,   735,   330,     0,   331,   736,   737,
     738,   739,   740,   336,   337,   338,   339,   340,     0,   741,
     341,   342,     0,     0,   343,   344,   345,   346,   742,   743,
     744,   347,   348,     0,   745,   746,   349,     0,   350,   351,
     747,     0,   353,   354,   355,   356,     0,   357,   358,     0,
       0,     0,     0,     0,     0,     0,     0,   359,   360,   361,
       0,   748,   362,     0,   363,     0,   364,   365,   749,   367,
     368,   369,   370,   750,   751,   373,   752,     0,   374,   375,
     376,     0,   377,     0,   378,   379,   380,   381,   382,     0,
     753,   384,   385,     0,     0,   386,     0,     0,     0,   387,
     388,   389,   390,   391,     0,     0,   392,   393,   394,   395,
     396,     0,   397,   398,     0,   399,   400,   401,   754,   755,
     402,     0,   403,     0,   404,   405,     0,   406,   407,   408,
       0,     0,   756,   409,   410,   411,   412,   413,   757,   758,
     416,   417,   418,   419,     0,   759,   421,     0,     0,     0,
     422,   423,   424,   425,     0,     0,     0,   426,     0,     0,
       0,   427,     0,   428,   429,   430,   431,   432,   433,     0,
     434,   435,   436,   437,   438,   439,     0,     0,     0,     0,
       0,     0,   440,   441,     0,   442,     0,     0,   443,     0,
       0,   444,   445,     0,     0,     0,   446,   760,   761,   447,
     448,     0,   449,   450,   762,   452,   453,   454,   763,   764,
     455,   456,   457,   458,   765,   459,   460,     0,   461,     0,
     462,   463,   464,   465,     0,   766,   466,   467,     0,   767,
     768,   769,   770,     0,     0,     0,     0,     0,   472,   473,
     474,     0,   771,   772,   773,   476,   477,   478,   774,   479,
     480,   775,   481,   482,     0,   483,   484,     0,     0,   485,
       0,     0,   486,     0,   487,     0,   776,   489,   490,     0,
       0,   777,   778,   779,   780,   491,     0,     0,   492,   781,
       0,   782,   493,   494,   495,   496,   497,   783,     0,     0,
       0,     0,     0,     0,   499,   500,     0,   501,   502,   503,
       0,     0,   784,     0,     0,     0,     0,   785,   786,     0,
       0,     0,     0,   787,   788,     0,     0,   789,   790,     0,
       0,   791,   792,   141,     0,   682,   143,   144,   145,   146,
       0,     0,   147,     0,     0,     0,   148,     0,     0,   683,
       0,   150,   151,   152,   153,   154,   155,   684,   157,     0,
     158,     0,     0,   685,   159,   686,   687,   688,   160,   689,
       0,   161,   162,   163,     0,   164,     0,   165,   166,     0,
       0,   167,   690,   691,   168,   169,     0,   170,   692,   693,
     172,   173,     0,   174,   175,   176,   177,   178,   694,   180,
       0,   695,   182,   696,   697,   698,   699,   700,     0,   188,
     189,   190,   191,   192,   193,   194,   195,     0,   196,   197,
       0,   198,   199,   200,   701,   202,     0,   203,   702,   703,
     204,     0,     0,   205,   704,   206,   705,   207,     0,   208,
     706,   707,     0,   209,   210,   211,   708,   709,   710,     0,
       0,     0,     0,   711,   214,   712,     0,     0,   713,   215,
       0,   216,     0,     0,     0,   217,     0,   218,   219,   220,
     221,   222,     0,     0,     0,   223,     0,     0,   224,   225,
     226,     0,     0,     0,   227,     0,   228,   229,     0,   230,
     231,   232,     0,     0,   233,   234,     0,   235,   236,   237,
     238,   239,   240,   241,   714,     0,   242,   243,   244,   715,
     716,   245,   246,     0,   247,   248,   249,   717,     0,   250,
       0,     0,     0,   251,  2242,   252,     0,   253,     0,   254,
     255,   718,   257,   719,     0,   259,     0,   260,     0,   720,
       0,   261,   262,   263,     0,   264,   721,   722,     0,   265,
     266,     0,     0,     0,   723,   268,   269,   270,   724,     0,
     271,   272,   273,     0,   274,     0,   275,     0,     0,     0,
     725,   276,   277,   726,     0,     0,   278,     0,   279,   280,
       0,   281,   282,     0,     0,     0,   283,     0,     0,   284,
     285,   727,     0,     0,   287,     0,   728,   288,   289,     0,
       0,     0,     0,     0,   729,   291,     0,   292,     0,   293,
       0,   294,   295,     0,     0,   730,     0,     0,     0,     0,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,     0,   312,   313,   314,
     315,   731,   316,   317,   318,   319,   732,   320,   321,     0,
       0,     0,     0,   322,   323,   324,   325,   733,   327,     0,
       0,   734,   329,   735,   330,     0,   331,   736,   737,   738,
     739,   740,   336,   337,   338,   339,   340,     0,   741,   341,
     342,     0,     0,   343,   344,   345,   346,   742,   743,   744,
     347,   348,     0,   745,   746,   349,     0,   350,   351,   747,
       0,   353,   354,   355,   356,     0,   357,   358,     0,     0,
       0,     0,     0,     0,     0,     0,   359,   360,   361,     0,
     748,   362,     0,   363,     0,   364,   365,   749,   367,   368,
     369,   370,   750,   751,   373,   752,     0,   374,   375,   376,
       0,   377,     0,   378,   379,   380,   381,   382,     0,   753,
     384,   385,     0,     0,   386,     0,     0,     0,   387,   388,
     389,   390,   391,     0,     0,   392,   393,   394,   395,   396,
       0,   397,   398,     0,   399,   400,   401,   754,   755,   402,
       0,   403,     0,   404,   405,     0,   406,   407,   408,     0,
       0,   756,   409,   410,   411,   412,   413,   757,   758,   416,
     417,   418,   419,     0,   759,   421,     0,     0,     0,   422,
     423,   424,   425,     0,     0,     0,   426,     0,     0,     0,
     427,     0,   428,   429,   430,   431,   432,   433,     0,   434,
     435,   436,   437,   438,   439,     0,     0,     0,     0,     0,
       0,   440,   441,     0,   442,     0,     0,   443,     0,     0,
     444,   445,     0,     0,     0,   446,   760,   761,   447,   448,
       0,   449,   450,   762,   452,   453,   454,   763,   764,   455,
     456,   457,   458,   765,   459,   460,     0,   461,     0,   462,
     463,   464,   465,     0,   766,   466,   467,     0,   767,   768,
     769,   770,     0,     0,     0,     0,     0,   472,   473,   474,
       0,   771,   772,   773,   476,   477,   478,   774,   479,   480,
     775,   481,   482,     0,   483,   484,     0,     0,   485,     0,
       0,   486,     0,   487,     0,   776,   489,   490,     0,     0,
     777,   778,   779,   780,   491,     0,     0,   492,   781,     0,
     782,   493,   494,   495,   496,   497,   783,     0,     0,     0,
       0,     0,     0,   499,   500,     0,   501,   502,   503,     0,
       0,   784,     0,     0,     0,     0,   785,   786,     0,     0,
       0,     0,   787,   788,     0,     0,   789,   790,     0,     0,
     791,   792,   141,     0,   682,   143,   144,   145,   146,     0,
       0,   147,     0,     0,     0,   148,     0,     0,   683,     0,
     150,   151,   152,   153,   154,   155,   684,   157,     0,   158,
       0,     0,   685,   159,   686,   687,   688,   160,   689,     0,
     161,   162,   163,     0,   164,     0,   165,   166,     0,     0,
     167,   690,   691,   168,   169,     0,   170,   692,   693,   172,
     173,     0,   174,   175,   176,   177,   178,   694,   180,     0,
     695,   182,   696,   697,   698,   699,   700,     0,   188,   189,
     190,   191,   192,   193,   194,   195,     0,   196,   197,     0,
     198,   199,   200,   701,   202,     0,   203,   702,   703,   204,
       0,     0,   205,   704,   206,   705,   207,     0,   208,   706,
     707,     0,   209,   210,   211,   708,   709,   710,     0,     0,
       0,     0,   711,   214,   712,     0,     0,   713,   215,     0,
     216,     0,     0,     0,   217,     0,   218,   219,   220,   221,
     222,     0,     0,     0,   223,     0,     0,   224,   225,   226,
       0,     0,     0,   227,     0,   228,   229,     0,   230,   231,
     232,     0,     0,   233,   234,     0,   235,   236,   237,   238,
     239,   240,   241,   714,     0,   242,   243,   244,   715,   716,
     245,   246,     0,   247,   248,   249,   717,     0,   250,     0,
       0,     0,   251,     0,   252,     0,   253,     0,   254,   255,
     718,   257,   719,     0,   259,     0,   260,     0,   720,     0,
     261,   262,   263,     0,   264,   721,   722,     0,   265,   266,
       0,     0,     0,   723,   268,   269,   270,   724,     0,   271,
     272,   273,     0,   274,     0,   275,     0,     0,     0,   725,
     276,   277,   726,     0,     0,   278,     0,   279,   280,     0,
     281,   282,     0,     0,     0,   283,     0,     0,   284,   285,
     727,     0,     0,   287,     0,   728,   288,   289,     0,     0,
       0,     0,     0,   729,   291,     0,   292,     0,   293,     0,
     294,   295,     0,     0,   730,     0,     0,     0,     0,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,     0,   312,   313,   314,   315,
     731,   316,   317,   318,   319,   732,   320,   321,     0,     0,
       0,     0,   322,   323,   324,   325,   733,   327,     0,     0,
     734,   329,   735,   330,     0,   331,   736,   737,   738,   739,
     740,   336,   337,   338,   339,   340,     0,   741,   341,   342,
       0,     0,   343,   344,   345,   346,   742,   743,   744,   347,
     348,     0,   745,   746,   349,     0,   350,   351,   747,     0,
     353,   354,   355,   356,     0,   357,   358,     0,     0,     0,
       0,     0,     0,     0,     0,   359,   360,   361,     0,   748,
     362,     0,   363,     0,   364,   365,   749,   367,   368,   369,
     370,   750,   751,   373,   752,     0,   374,   375,   376,     0,
     377,     0,   378,   379,   380,   381,   382,     0,   753,   384,
     385,     0,     0,   386,     0,     0,     0,   387,   388,   389,
     390,   391,     0,     0,   392,   393,   394,   395,   396,     0,
     397,   398,     0,   399,   400,   401,   754,   755,   402,     0,
     403,     0,   404,   405,     0,   406,   407,   408,     0,     0,
     756,   409,   410,   411,   412,   413,   757,   758,   416,   417,
     418,   419,     0,   759,   421,     0,     0,     0,   422,   423,
     424,   425,     0,     0,     0,   426,     0,     0,     0,   427,
       0,   428,   429,   430,   431,   432,   433,     0,   434,   435,
     436,   437,   438,   439,     0,     0,     0,     0,     0,     0,
     440,   441,     0,   442,     0,     0,   443,     0,     0,   444,
     445,     0,     0,     0,   446,   760,   761,   447,   448,     0,
     449,   450,   762,   452,   453,   454,   763,   764,   455,   456,
     457,   458,   765,   459,   460,     0,   461,     0,   462,   463,
     464,   465,     0,   766,   466,   467,     0,   767,   768,   769,
     770,     0,     0,     0,     0,     0,   472,   473,   474,     0,
     771,   772,   773,   476,   477,   478,   774,   479,   480,   775,
     481,   482,     0,   483,   484,     0,     0,   485,     0,     0,
     486,     0,   487,     0,   776,   489,   490,     0,     0,   777,
     778,   779,   780,   491,     0,     0,   492,   781,     0,   782,
     493,   494,   495,   496,   497,   783,     0,     0,     0,     0,
       0,     0,   499,   500,     0,   501,   502,   503,     0,     0,
     784,     0,     0,     0,     0,   785,   786,     0,     0,     0,
       0,   787,   788,     0,     0,   789,   790,     0,     0,   791,
     792,   141,     0,   682,   143,   144,   145,   146,     0,     0,
     147,     0,     0,     0,   148,     0,     0,   683,     0,   150,
     151,   152,   153,   154,   155,   684,   157,     0,   158,     0,
       0,   685,   159,   686,   687,   688,   160,   689,     0,   161,
     162,   163,     0,   164,     0,   165,   166,     0,     0,   167,
     690,   691,   168,   169,     0,   170,   692,   693,   172,   173,
       0,   174,   175,   176,   177,   178,   694,   180,     0,   695,
     182,   696,   697,   698,   699,   700,     0,   188,   189,   190,
     191,   192,   193,   194,   195,     0,   196,   197,     0,   198,
     199,   200,   701,   202,     0,   203,   702,   703,   204,     0,
       0,   205,   704,   206,   705,   207,     0,   208,   706,   707,
       0,   209,   210,   211,   708,   709,   710,     0,     0,     0,
       0,   711,   214,   712,     0,     0,   713,   215,     0,   216,
       0,     0,     0,   217,     0,   218,   219,   220,   221,   222,
       0,     0,     0,   223,     0,     0,   224,   225,   226,     0,
       0,     0,   227,     0,   228,   229,     0,   230,   231,   232,
       0,     0,   233,   234,     0,   235,   236,   237,   238,   239,
     240,   241,   714,     0,   242,   243,   244,   715,   716,   245,
     246,     0,   247,   248,   249,   717,     0,   250,     0,     0,
       0,   251,     0,   252,     0,   253,     0,   254,   255,   718,
     257,   719,     0,   259,     0,   260,     0,   720,     0,   261,
     262,   263,     0,   264,   721,   722,     0,   265,   266,     0,
       0,     0,   723,   268,   269,   270,   724,     0,   271,   272,
     273,     0,   274,     0,   275,     0,     0,     0,   725,   276,
     277,   726,     0,     0,   278,     0,   279,   280,     0,   281,
     282,     0,     0,     0,   283,     0,     0,   284,   285,   727,
       0,     0,   287,     0,   728,   288,   289,     0,     0,     0,
       0,     0,   729,   291,     0,   292,     0,   293,     0,   294,
     295,     0,     0,   730,     0,     0,     0,     0,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,     0,   312,   313,   314,   315,   731,
     316,   317,   318,   319,   732,   320,   321,     0,     0,     0,
       0,   322,   323,   324,   325,   733,   327,     0,     0,   734,
     329,   735,   330,     0,   331,   736,   737,   738,   739,   740,
     336,   337,   338,   339,   340,     0,   741,   341,   342,     0,
       0,   343,   344,   345,   346,   742,   743,   744,   347,   348,
       0,   745,   746,   349,     0,   350,   351,   747,     0,   353,
     354,   355,   356,     0,   357,   358,     0,     0,     0,     0,
       0,     0,     0,     0,   359,   360,   361,     0,   748,   362,
       0,   363,     0,   364,   365,   749,   367,   368,   369,   370,
     750,   751,   373,   752,     0,   374,   375,   376,     0,   377,
       0,   378,   379,   380,   381,   382,     0,   753,   384,   385,
       0,     0,   386,     0,     0,     0,   387,   388,   389,   390,
     391,     0,     0,   392,   393,   394,   395,   396,     0,   397,
     398,     0,   399,   400,   401,   754,   755,   402,     0,   403,
       0,   404,   405,     0,   406,   407,   408,     0,     0,   756,
     409,   410,   411,   412,   413,   757,   758,   416,   417,   418,
     419,     0,   759,   421,     0,     0,     0,   422,   423,   424,
     425,     0,     0,     0,   426,     0,     0,     0,   427,     0,
     428,   429,   430,   431,   432,   433,     0,   434,   435,   436,
     437,   438,   439,     0,     0,     0,     0,     0,     0,   440,
     441,     0,   442,     0,     0,   443,     0,     0,   444,   445,
       0,     0,     0,   446,   760,   761,   447,   448,     0,   449,
     450,   762,   452,   453,   454,   763,   764,   455,   456,   457,
     458,   765,   459,   460,     0,   461,     0,   462,   463,   464,
     465,     0,   766,   466,   467,     0,   767,   768,   769,   770,
       0,     0,     0,     0,     0,   472,   473,   474,     0,   771,
     772,   773,   476,   477,   478,   774,   479,   480,   775,   481,
     482,     0,   483,   484,     0,     0,   485,     0,     0,   486,
       0,   487,     0,   776,   489,   490,     0,     0,   777,   778,
     779,   780,   491,     0,     0,   492,   781,     0,   782,   493,
     494,   495,   496,   497,   783,     0,     0,     0,     0,     0,
       0,   499,   500,     0,   501,   502,   503,     0,     0,   784,
       0,     0,     0,     0,   785,   786,     0,     0,     0,     0,
     787,  1155,     0,     0,   789,   790,     0,     0,   791,   792,
     141,     0,   682,   143,   144,   145,   146,  1758,     0,   147,
       0,     0,     0,  1759,     0,     0,   683,     0,   150,   151,
     152,   153,   154,   155,   684,   157,     0,   158,     0,     0,
     685,   159,   686,   687,   688,   160,   689,     0,   161,   162,
     163,     0,   164,     0,   165,   166,     0,     0,   167,   690,
     691,   168,   169,     0,   170,   692,   693,   172,   173,     0,
     174,   175,   176,   177,   178,   694,   180,     0,   695,   182,
     696,   697,   698,   699,   700,     0,   188,   189,   190,   191,
     192,   193,   194,   195,     0,   196,   197,     0,   198,   199,
     200,   701,   202,     0,   203,   702,   703,   204,     0,     0,
     205,   704,   206,   705,   207,     0,   208,   706,   707,     0,
     209,   210,   211,   708,   709,   710,     0,     0,     0,     0,
     711,   214,   712,     0,     0,   713,   215,     0,   216,     0,
       0,     0,   217,     0,   218,   219,   220,   221,   222,     0,
       0,     0,   223,     0,     0,   224,   225,   226,     0,     0,
       0,   227,     0,   228,   229,     0,   230,   231,   232,     0,
       0,   233,   234,     0,   235,   236,   237,   238,   239,   240,
     241,   714,     0,   242,   243,   244,   715,   716,   245,   246,
       0,   247,   248,   249,   717,     0,   250,     0,     0,     0,
     251,     0,   252,     0,   253,     0,   254,   255,   718,   257,
     719,     0,   259,     0,   260,     0,   720,     0,   261,   262,
     263,     0,   264,   721,   722,     0,   265,   266,     0,     0,
       0,   723,   268,   269,   270,   724,     0,   271,   272,   273,
       0,   274,     0,   275,     0,     0,     0,   725,   276,   277,
     726,     0,     0,   278,     0,   279,   280,     0,   281,   282,
       0,     0,     0,   283,     0,     0,   284,   285,   727,     0,
       0,   287,     0,   728,   288,   289,     0,     0,     0,     0,
       0,   729,   291,     0,   292,     0,   293,     0,   294,   295,
       0,     0,   730,     0,     0,     0,     0,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,     0,   312,   313,   314,   315,   731,   316,
     317,   318,   319,   732,   320,   321,     0,     0,     0,     0,
     322,   323,   324,   325,   733,   327,     0,     0,   734,   329,
     735,   330,     0,   331,   736,   737,   738,   739,   740,   336,
     337,   338,   339,   340,     0,   741,   341,   342,     0,     0,
     343,   344,   345,   346,   742,     0,   744,   347,   348,     0,
     745,   746,   349,     0,   350,   351,   747,     0,   353,   354,
     355,   356,     0,   357,   358,     0,     0,     0,     0,     0,
       0,     0,     0,   359,   360,   361,     0,   748,   362,     0,
     363,     0,   364,   365,   749,   367,   368,   369,   370,   750,
     751,   373,   752,     0,   374,   375,   376,     0,   377,     0,
     378,   379,   380,   381,   382,     0,   753,   384,   385,     0,
       0,   386,     0,     0,     0,   387,   388,   389,   390,   391,
       0,     0,   392,   393,   394,   395,   396,     0,   397,   398,
       0,   399,   400,   401,   754,   755,   402,     0,   403,     0,
     404,   405,     0,   406,   407,   408,     0,     0,   756,   409,
     410,   411,   412,   413,   757,   758,   416,   417,   418,   419,
       0,   759,   421,     0,     0,     0,   422,   423,   424,   425,
       0,     0,     0,   426,     0,     0,     0,   427,     0,   428,
     429,   430,   431,   432,   433,     0,   434,   435,   436,   437,
     438,   439,     0,     0,     0,     0,     0,     0,   440,   441,
       0,   442,     0,     0,   443,     0,     0,   444,   445,     0,
       0,     0,   446,   760,   761,   447,   448,     0,   449,   450,
     762,   452,   453,   454,   763,   764,   455,   456,   457,   458,
     765,   459,   460,     0,   461,     0,   462,   463,   464,   465,
       0,   766,   466,   467,     0,   767,   768,   769,   770,     0,
       0,     0,     0,     0,   472,   473,   474,     0,   771,   772,
     773,   476,   477,   478,   774,   479,   480,   775,   481,   482,
       0,   483,   484,     0,     0,   485,     0,     0,   486,     0,
     487,     0,   776,   489,   490,     0,     0,   777,   778,   779,
     780,   491,     0,     0,   492,   781,     0,   782,   493,   494,
     495,   496,   497,   783,     0,     0,     0,     0,     0,     0,
     499,   500,     0,   501,   502,   503,     0,     0,   784,     0,
       0,     0,     0,   785,   786,     0,     0,     0,     0,   787,
     788,     0,     0,   789,   790,     0,     0,   791,   792,   141,
       0,   682,   143,   144,   145,   146,     0,     0,   147,     0,
       0,     0,   148,     0,     0,   683,     0,   150,   151,   152,
     153,   154,   155,   684,   157,     0,   158,     0,     0,   685,
     159,   686,   687,   688,   160,   689,     0,   161,   162,   163,
       0,   164,     0,   165,   166,     0,     0,   167,   690,   691,
     168,   169,     0,   170,   692,   693,   172,   173,     0,   174,
     175,   176,   177,   178,   694,   180,     0,   695,   182,   696,
     697,   698,   699,   700,     0,   188,   189,   190,   191,   192,
     193,   194,   195,     0,   196,   197,     0,   198,   199,   200,
     701,   202,     0,   203,   702,   703,   204,     0,     0,   205,
     704,   206,   705,   207,     0,   208,   706,   707,     0,   209,
     210,   211,   708,   709,   710,     0,     0,     0,     0,   711,
     214,   712,     0,     0,   713,   215,     0,   216,     0,     0,
       0,   217,     0,   218,   219,   220,   221,   222,     0,     0,
       0,   223,     0,     0,   224,   225,   226,     0,     0,     0,
     227,     0,   228,   229,     0,   230,   231,   232,     0,     0,
     233,   234,     0,   235,   236,   237,   238,   239,   240,   241,
     714,     0,   242,   243,   244,   715,   716,   245,   246,     0,
     247,   248,   249,   717,     0,   250,     0,     0,     0,   251,
       0,   252,     0,   253,     0,   254,   255,   718,   257,   719,
       0,   259,     0,   260,     0,   720,     0,   261,   262,   263,
       0,   264,   721,   722,     0,   265,   266,     0,     0,     0,
     723,   268,   269,   270,   724,     0,   271,   272,   273,     0,
     274,     0,   275,     0,     0,     0,   725,   276,   277,   726,
       0,     0,   278,     0,   279,   280,     0,   281,   282,     0,
       0,     0,   283,     0,     0,   284,   285,   727,     0,     0,
     287,     0,   728,   288,   289,     0,     0,     0,     0,     0,
     729,   291,     0,   292,     0,   293,     0,   294,   295,     0,
       0,   730,     0,     0,     0,     0,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,     0,   312,   313,   314,   315,   731,   316,   317,
     318,   319,   732,   320,   321,     0,     0,     0,     0,   322,
     323,   324,   325,   733,   327,     0,     0,   734,   329,   735,
     330,     0,   331,   736,   737,   738,   739,   740,   336,   337,
     338,   339,   340,     0,   741,   341,   342,     0,     0,   343,
     344,   345,   346,   742,   743,   744,   347,   348,     0,   745,
     746,   349,     0,   350,   351,   747,     0,   353,   354,   355,
     356,     0,   357,   358,     0,     0,     0,     0,     0,     0,
       0,     0,   359,   360,   361,     0,   748,   362,     0,   363,
       0,   364,   365,   749,   367,   368,   369,   370,   750,   751,
     373,   752,     0,   374,   375,   376,     0,   377,     0,   378,
     379,   380,   381,   382,     0,   753,   384,   385,     0,     0,
     386,     0,     0,     0,   387,   388,   389,   390,   391,     0,
       0,   392,   393,   394,   395,   396,     0,   397,   398,     0,
     399,   400,   401,   754,   755,   402,     0,   403,     0,   404,
     405,     0,   406,   407,   408,     0,     0,   756,   409,   410,
     411,   412,   413,   757,   758,   416,   417,   418,   419,     0,
     759,   421,     0,     0,     0,   422,   423,   424,   425,     0,
       0,     0,   426,     0,     0,     0,   427,     0,   428,   429,
     430,   431,   432,   433,     0,   434,   435,   436,   437,   438,
     439,     0,     0,     0,     0,     0,     0,   440,   441,     0,
     442,     0,     0,   443,     0,     0,   444,   445,     0,     0,
       0,   446,   760,   761,   447,   448,     0,   449,   450,   762,
     452,   453,   454,   763,   764,   455,   456,   457,   458,   765,
     459,   460,     0,   461,     0,   462,   463,   464,   465,     0,
     766,   466,   467,     0,   767,   768,   769,   770,     0,     0,
       0,     0,     0,   472,   473,   474,     0,   771,   772,   773,
     476,   477,   478,   774,   479,   480,   775,   481,   482,     0,
     483,   484,     0,     0,   485,     0,     0,   486,     0,   487,
       0,  1845,   489,   490,     0,     0,   777,   778,   779,   780,
     491,     0,     0,   492,   781,     0,   782,   493,   494,   495,
     496,   497,   783,     0,     0,     0,     0,     0,     0,   499,
     500,     0,   501,   502,   503,     0,     0,   784,     0,     0,
       0,     0,   785,   786,     0,     0,     0,     0,   787,   788,
       0,     0,   789,   790,     0,     0,   791,   792,   141,     0,
     682,   143,   144,   145,   146,     0,     0,   147,     0,     0,
       0,   148,     0,     0,   683,     0,   150,   151,   152,   153,
     154,   155,   684,   157,     0,   158,     0,     0,   685,   159,
     686,   687,   688,   160,   689,     0,   161,   162,   163,     0,
     164,     0,   165,   166,     0,     0,   167,   690,   691,   168,
     169,     0,   170,   692,   693,   172,   173,     0,   174,   175,
     176,   177,   178,   694,   180,     0,   695,   182,   696,   697,
     698,   699,   700,     0,   188,   189,   190,   191,   192,   193,
     194,   195,     0,   196,   197,     0,   198,   199,   200,   701,
     202,     0,   203,   702,   703,   204,     0,     0,   205,   704,
     206,   705,   207,     0,   208,   706,   707,     0,   209,   210,
     211,   708,   709,   710,     0,     0,     0,     0,   711,   214,
     712,     0,     0,   713,   215,     0,   216,     0,     0,     0,
     217,     0,   218,   219,   220,   221,   222,     0,     0,     0,
     223,     0,     0,   224,   225,   226,     0,     0,     0,   227,
       0,   228,   229,     0,   230,   231,   232,     0,     0,   233,
     234,     0,   235,   236,   237,   238,   239,   240,   241,   714,
       0,   242,   243,   244,   715,   716,   245,   246,     0,   247,
     248,   249,   717,     0,   250,     0,     0,     0,   251,     0,
     252,     0,   253,     0,   254,   255,   718,   257,   719,     0,
     259,     0,   260,     0,   720,     0,   261,   262,   263,     0,
     264,   721,   722,     0,   265,   266,     0,     0,     0,   723,
     268,   269,   270,   724,     0,   271,   272,   273,     0,   274,
       0,   275,     0,     0,     0,   725,   276,   277,  2653,     0,
       0,   278,     0,   279,   280,     0,   281,   282,     0,     0,
       0,   283,     0,     0,   284,   285,   727,     0,     0,   287,
       0,   728,   288,   289,     0,     0,     0,     0,     0,   729,
     291,     0,   292,     0,   293,     0,   294,   295,     0,     0,
     730,     0,     0,     0,     0,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,     0,   312,   313,   314,   315,   731,   316,   317,   318,
     319,   732,   320,   321,     0,     0,     0,     0,   322,   323,
     324,   325,   733,   327,     0,     0,   734,   329,   735,   330,
       0,   331,   736,   737,   738,   739,   740,   336,   337,   338,
     339,   340,     0,   741,   341,   342,     0,     0,   343,   344,
     345,   346,   742,   743,   744,   347,   348,     0,   745,   746,
     349,     0,   350,   351,   747,     0,   353,   354,   355,   356,
       0,   357,   358,     0,     0,     0,     0,     0,     0,     0,
       0,   359,   360,   361,     0,   748,   362,     0,   363,     0,
     364,   365,   749,   367,   368,   369,   370,   750,   751,   373,
     752,     0,   374,   375,   376,     0,   377,     0,   378,   379,
     380,   381,   382,     0,   753,   384,   385,     0,     0,   386,
       0,     0,     0,   387,   388,   389,   390,   391,     0,     0,
     392,   393,   394,   395,   396,     0,   397,   398,     0,   399,
     400,   401,   754,   755,   402,     0,   403,     0,   404,   405,
       0,   406,   407,   408,     0,     0,   756,   409,   410,   411,
     412,   413,   757,   758,   416,   417,   418,   419,     0,   759,
     421,     0,     0,     0,   422,   423,   424,   425,     0,     0,
       0,   426,     0,     0,     0,   427,     0,   428,   429,   430,
     431,   432,   433,     0,   434,   435,   436,   437,   438,   439,
       0,     0,     0,     0,     0,     0,   440,   441,     0,   442,
       0,     0,   443,     0,     0,   444,   445,     0,     0,     0,
     446,   760,   761,   447,   448,     0,   449,   450,   762,   452,
     453,   454,   763,   764,   455,   456,   457,   458,   765,   459,
     460,     0,   461,     0,   462,   463,   464,   465,     0,   766,
     466,   467,     0,   767,   768,   769,   770,     0,     0,     0,
       0,     0,   472,   473,   474,     0,   771,   772,   773,   476,
     477,   478,   774,   479,   480,   775,   481,   482,     0,   483,
     484,     0,     0,   485,     0,     0,   486,     0,   487,     0,
     776,   489,   490,     0,     0,   777,   778,   779,   780,   491,
       0,     0,   492,   781,     0,   782,   493,   494,   495,   496,
     497,   783,     0,     0,     0,     0,     0,     0,   499,   500,
       0,   501,   502,   503,     0,     0,   784,     0,     0,     0,
       0,   785,   786,     0,     0,     0,     0,   787,   788,     0,
       0,   789,   790,     0,     0,   791,   792,   141,     0,   682,
     143,   144,   145,   146,     0,     0,   147,     0,     0,     0,
     148,     0,     0,   683,     0,   150,   151,   152,   153,   154,
     155,   684,   157,     0,   158,     0,     0,   685,   159,   686,
     687,   688,   160,   689,     0,   161,   162,   163,     0,   164,
       0,   165,   166,     0,     0,   167,   690,   691,   168,   169,
       0,   170,   692,   693,   172,   173,     0,   174,   175,   176,
     177,   178,   694,   180,     0,   695,   182,   696,   697,   698,
     699,   700,     0,   188,   189,   190,   191,   192,   193,   194,
     195,     0,   196,   197,     0,   198,   199,   200,   701,   202,
       0,   203,   702,   703,   204,     0,     0,   205,   704,   206,
     705,   207,     0,   208,   706,   707,     0,   209,   210,   211,
     708,   709,   710,     0,     0,     0,     0,   711,   214,   712,
       0,     0,   713,   215,     0,   216,     0,     0,     0,   217,
       0,   218,   219,   220,   221,   222,     0,     0,     0,   223,
       0,     0,   224,   225,   226,     0,     0,     0,   227,     0,
     228,   229,     0,   230,   231,   232,     0,     0,   233,   234,
       0,   235,   236,   237,   238,   239,   240,   241,   714,     0,
     242,   243,   244,   715,   716,   245,   246,     0,   247,   248,
     249,   717,     0,   250,     0,     0,     0,   251,     0,   252,
       0,   253,     0,   254,   255,   718,   257,   719,     0,   259,
       0,   260,     0,   720,     0,   261,   262,   263,     0,   264,
     721,   722,     0,   265,   266,     0,     0,     0,   723,   268,
     269,   270,   724,     0,   271,   272,   273,     0,   274,     0,
     275,     0,     0,     0,   725,   276,   277,  2704,     0,     0,
     278,     0,   279,   280,     0,   281,   282,     0,     0,     0,
     283,     0,     0,   284,   285,   727,     0,     0,   287,     0,
     728,   288,   289,     0,     0,     0,     0,     0,   729,   291,
       0,   292,     0,   293,     0,   294,   295,     0,     0,   730,
       0,     0,     0,     0,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
       0,   312,   313,   314,   315,   731,   316,   317,   318,   319,
     732,   320,   321,     0,     0,     0,     0,   322,   323,   324,
     325,   733,   327,     0,     0,   734,   329,   735,   330,     0,
     331,   736,   737,   738,   739,   740,   336,   337,   338,   339,
     340,     0,   741,   341,   342,     0,     0,   343,   344,   345,
     346,   742,   743,   744,   347,   348,     0,   745,   746,   349,
       0,   350,   351,   747,     0,   353,   354,   355,   356,     0,
     357,   358,     0,     0,     0,     0,     0,     0,     0,     0,
     359,   360,   361,     0,   748,   362,     0,   363,     0,   364,
     365,   749,   367,   368,   369,   370,   750,   751,   373,   752,
       0,   374,   375,   376,     0,   377,     0,   378,   379,   380,
     381,   382,     0,   753,   384,   385,     0,     0,   386,     0,
       0,     0,   387,   388,   389,   390,   391,     0,     0,   392,
     393,   394,   395,   396,     0,   397,   398,     0,   399,   400,
     401,   754,   755,   402,     0,   403,     0,   404,   405,     0,
     406,   407,   408,     0,     0,   756,   409,   410,   411,   412,
     413,   757,   758,   416,   417,   418,   419,     0,   759,   421,
       0,     0,     0,   422,   423,   424,   425,     0,     0,     0,
     426,     0,     0,     0,   427,     0,   428,   429,   430,   431,
     432,   433,     0,   434,   435,   436,   437,   438,   439,     0,
       0,     0,     0,     0,     0,   440,   441,     0,   442,     0,
       0,   443,     0,     0,   444,   445,     0,     0,     0,   446,
     760,   761,   447,   448,     0,   449,   450,   762,   452,   453,
     454,   763,   764,   455,   456,   457,   458,   765,   459,   460,
       0,   461,     0,   462,   463,   464,   465,     0,   766,   466,
     467,     0,   767,   768,   769,   770,     0,     0,     0,     0,
       0,   472,   473,   474,     0,   771,   772,   773,   476,   477,
     478,   774,   479,   480,   775,   481,   482,     0,   483,   484,
       0,     0,   485,     0,     0,   486,     0,   487,     0,   776,
     489,   490,     0,     0,   777,   778,   779,   780,   491,     0,
       0,   492,   781,     0,   782,   493,   494,   495,   496,   497,
     783,     0,     0,     0,     0,     0,     0,   499,   500,     0,
     501,   502,   503,     0,     0,   784,     0,     0,     0,     0,
     785,   786,     0,     0,     0,     0,   787,   788,     0,     0,
     789,   790,     0,     0,   791,   792,   141,     0,   682,   143,
     144,   145,   146,     0,     0,   147,     0,     0,     0,   148,
       0,     0,   683,     0,   150,   151,   152,   153,   154,   155,
     684,   157,     0,   158,     0,     0,   685,   159,   686,   687,
     688,   160,   689,     0,   161,   162,   163,     0,   164,     0,
     165,   166,     0,     0,   167,   690,   691,   168,   169,     0,
     170,   692,   693,   172,   173,     0,   174,   175,   176,   177,
     178,   694,   180,     0,   695,   182,   696,   697,   698,   699,
     700,     0,   188,   189,   190,   191,   192,   193,   194,   195,
       0,   196,   197,     0,   198,   199,   200,   701,   202,     0,
     203,   702,   703,   204,     0,     0,   205,   704,   206,   705,
     207,     0,   208,   706,   707,     0,   209,   210,   211,   708,
     709,   710,     0,     0,     0,     0,   711,   214,   712,     0,
       0,  3503,   215,     0,   216,     0,     0,     0,   217,     0,
     218,   219,   220,   221,   222,     0,     0,     0,   223,     0,
       0,   224,   225,   226,     0,     0,     0,   227,     0,   228,
     229,     0,   230,   231,   232,     0,     0,   233,   234,     0,
     235,   236,   237,   238,   239,   240,   241,   714,     0,   242,
     243,   244,   715,   716,   245,   246,     0,   247,   248,   249,
     717,     0,   250,     0,     0,     0,   251,     0,   252,     0,
     253,     0,   254,   255,   718,   257,   719,     0,   259,     0,
     260,     0,   720,     0,   261,   262,   263,     0,   264,   721,
     722,     0,   265,   266,     0,     0,     0,   723,   268,   269,
     270,   724,     0,   271,   272,   273,     0,   274,     0,   275,
       0,     0,     0,   725,   276,   277,   726,     0,     0,   278,
       0,   279,   280,     0,   281,   282,     0,     0,     0,   283,
       0,     0,   284,   285,   727,     0,     0,   287,     0,   728,
     288,   289,     0,     0,     0,     0,     0,   729,   291,     0,
     292,     0,   293,     0,   294,   295,     0,     0,   730,     0,
       0,     0,     0,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,     0,
     312,   313,   314,   315,   731,   316,   317,   318,   319,   732,
     320,   321,     0,     0,     0,     0,   322,   323,   324,   325,
     733,   327,     0,     0,   734,   329,   735,   330,     0,   331,
     736,   737,   738,   739,   740,   336,   337,   338,   339,   340,
       0,   741,   341,   342,     0,     0,   343,   344,   345,   346,
     742,   743,   744,   347,   348,     0,   745,   746,   349,     0,
     350,   351,   747,     0,   353,   354,   355,   356,     0,   357,
     358,     0,     0,     0,     0,     0,     0,     0,     0,   359,
     360,   361,     0,   748,   362,     0,   363,     0,   364,   365,
     749,   367,   368,   369,   370,   750,   751,   373,   752,     0,
     374,   375,   376,     0,   377,     0,   378,   379,   380,   381,
     382,     0,   753,   384,   385,     0,     0,   386,     0,     0,
       0,   387,   388,   389,   390,   391,     0,     0,   392,   393,
     394,   395,   396,     0,   397,   398,     0,   399,   400,   401,
     754,   755,   402,     0,   403,     0,   404,   405,     0,   406,
     407,   408,     0,     0,   756,   409,   410,   411,   412,   413,
     757,   758,   416,   417,   418,   419,     0,   759,   421,     0,
       0,     0,   422,   423,   424,   425,     0,     0,     0,   426,
       0,     0,     0,   427,     0,   428,   429,   430,   431,   432,
     433,     0,   434,   435,   436,   437,   438,   439,     0,     0,
       0,     0,     0,     0,   440,   441,     0,   442,     0,     0,
     443,     0,     0,   444,   445,     0,     0,     0,   446,   760,
     761,   447,   448,     0,   449,   450,   762,   452,   453,   454,
     763,   764,   455,   456,   457,   458,   765,   459,   460,     0,
     461,     0,   462,   463,   464,   465,     0,   766,   466,   467,
       0,   767,   768,   769,   770,     0,     0,     0,     0,     0,
     472,   473,   474,     0,   771,   772,   773,   476,   477,   478,
     774,   479,   480,   775,   481,   482,     0,   483,   484,     0,
       0,   485,     0,     0,   486,     0,   487,     0,   776,   489,
     490,     0,     0,   777,   778,   779,   780,   491,     0,     0,
     492,   781,     0,   782,   493,   494,   495,   496,   497,   783,
       0,     0,     0,     0,     0,     0,   499,   500,     0,   501,
     502,   503,     0,     0,   784,     0,     0,     0,     0,   785,
     786,     0,     0,     0,     0,   787,   788,     0,     0,   789,
     790,     0,     0,   791,   792,   141,     0,   682,   143,   144,
     145,   146,     0,     0,   147,     0,     0,     0,   148,     0,
       0,   683,     0,   150,   151,   152,   153,   154,   155,   684,
     157,     0,   158,     0,     0,   685,   159,   686,   687,   688,
     160,   689,     0,   161,   162,   163,     0,   164,     0,   165,
     166,     0,     0,   167,   690,   691,   168,   169,     0,   170,
     692,   693,   172,   173,     0,   174,   175,   176,   177,   178,
     694,   180,     0,   695,   182,   696,   697,   698,   699,   700,
       0,   188,   189,   190,   191,   192,   193,   194,   195,     0,
     196,   197,     0,   198,   199,   200,   701,   202,     0,   203,
     702,   703,   204,     0,     0,   205,   704,   206,   705,   207,
       0,   208,   706,   707,     0,   209,   210,   211,   708,   709,
     710,     0,     0,     0,     0,   711,   214,   712,     0,     0,
     713,   215,     0,   216,     0,     0,     0,   217,     0,   218,
     219,   220,   221,   222,     0,     0,     0,   223,     0,     0,
     224,   225,   226,     0,     0,     0,   227,     0,   228,   229,
       0,   230,   231,   232,     0,     0,   233,   234,     0,   235,
     236,   237,   238,   239,   240,   241,   714,     0,   242,   243,
     244,   715,   716,   245,   246,     0,   247,   248,   249,   717,
       0,   250,     0,     0,     0,   251,     0,   252,     0,   253,
       0,   254,   255,   718,   257,   719,     0,   259,     0,   260,
       0,   720,     0,   261,   262,   263,     0,   264,   721,   722,
       0,   265,   266,     0,     0,     0,   723,   268,   269,   270,
     724,     0,   271,   272,   273,     0,   274,     0,   275,     0,
       0,     0,   725,   276,   277,   726,     0,     0,   278,     0,
     279,   280,     0,   281,   282,     0,     0,     0,   283,     0,
       0,   284,   285,   727,     0,     0,   287,     0,   728,   288,
     289,     0,     0,     0,     0,     0,   729,   291,     0,   292,
       0,   293,     0,   294,   295,     0,     0,   730,     0,     0,
       0,     0,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,     0,   312,
     313,   314,   315,   731,   316,   317,   318,   319,   732,   320,
     321,  4505,     0,     0,     0,   322,   323,   324,   325,   733,
     327,     0,     0,   734,   329,   735,   330,     0,   331,   736,
     737,   738,   739,   740,   336,   337,   338,   339,   340,     0,
     741,   341,   342,     0,     0,   343,   344,   345,   346,   742,
       0,   744,   347,   348,     0,   745,   746,   349,     0,   350,
     351,   747,     0,   353,   354,   355,   356,     0,   357,   358,
       0,     0,     0,     0,     0,     0,     0,     0,   359,   360,
     361,     0,   748,   362,     0,   363,     0,   364,   365,   749,
     367,   368,   369,   370,   750,   751,   373,   752,     0,   374,
     375,   376,     0,   377,     0,   378,   379,   380,   381,   382,
       0,   753,   384,   385,     0,     0,   386,     0,     0,     0,
     387,   388,   389,   390,   391,     0,     0,   392,   393,   394,
     395,   396,     0,   397,   398,     0,   399,   400,   401,   754,
     755,   402,     0,   403,     0,   404,   405,     0,   406,   407,
     408,     0,     0,   756,   409,   410,   411,   412,   413,   757,
     758,   416,   417,   418,   419,     0,   759,   421,     0,     0,
       0,   422,   423,   424,   425,     0,     0,     0,   426,     0,
       0,     0,   427,     0,   428,   429,   430,   431,   432,   433,
       0,   434,   435,   436,   437,   438,   439,     0,     0,     0,
       0,     0,     0,   440,   441,     0,   442,     0,     0,   443,
       0,     0,   444,   445,     0,     0,     0,   446,   760,   761,
     447,   448,     0,   449,   450,   762,   452,   453,   454,   763,
     764,   455,   456,   457,   458,   765,   459,   460,     0,   461,
       0,   462,   463,   464,   465,     0,   766,   466,   467,     0,
     767,   768,   769,   770,     0,     0,     0,     0,     0,   472,
     473,   474,     0,   771,   772,   773,   476,   477,   478,   774,
     479,   480,   775,   481,   482,     0,   483,   484,     0,     0,
     485,     0,     0,   486,     0,   487,     0,   776,   489,   490,
       0,     0,   777,   778,   779,   780,   491,     0,     0,   492,
     781,     0,   782,   493,   494,   495,   496,   497,   783,     0,
       0,     0,     0,     0,     0,   499,   500,     0,   501,   502,
     503,     0,     0,   784,     0,     0,     0,     0,   785,   786,
       0,     0,     0,     0,   787,   788,     0,     0,   789,   790,
       0,     0,   791,   792,   141,     0,   682,   143,   144,   145,
     146,     0,     0,   147,     0,     0,     0,   148,     0,     0,
     683,     0,   150,   151,   152,   153,   154,   155,   684,   157,
       0,   158,     0,     0,   685,   159,   686,   687,   688,   160,
     689,     0,   161,   162,   163,     0,   164,     0,   165,   166,
       0,     0,   167,   690,   691,   168,   169,     0,   170,   692,
     693,   172,   173,     0,   174,   175,   176,   177,   178,   694,
     180,     0,   695,   182,   696,   697,   698,   699,   700,     0,
     188,   189,   190,   191,   192,   193,   194,   195,     0,   196,
     197,     0,   198,   199,   200,   701,   202,     0,   203,   702,
     703,   204,     0,     0,   205,   704,   206,   705,   207,     0,
     208,   706,   707,     0,   209,   210,   211,   708,   709,   710,
       0,     0,     0,     0,   711,   214,   712,     0,     0,   713,
     215,     0,   216,     0,     0,     0,   217,     0,   218,   219,
     220,   221,   222,     0,     0,     0,   223,     0,     0,   224,
     225,   226,     0,     0,     0,   227,     0,   228,   229,     0,
     230,   231,   232,     0,     0,   233,   234,     0,   235,   236,
     237,   238,   239,   240,   241,   714,     0,   242,   243,   244,
     715,   716,   245,   246,     0,   247,   248,   249,   717,     0,
     250,     0,     0,     0,   251,     0,   252,     0,   253,     0,
     254,   255,   718,   257,   719,     0,   259,     0,   260,     0,
     720,     0,   261,   262,   263,     0,   264,   721,   722,     0,
     265,   266,     0,     0,     0,   723,   268,   269,   270,   724,
       0,   271,   272,   273,     0,   274,     0,   275,     0,     0,
       0,   725,   276,   277,   726,     0,     0,   278,     0,   279,
     280,     0,   281,   282,     0,     0,     0,   283,     0,     0,
     284,   285,   727,     0,     0,   287,     0,   728,   288,   289,
       0,     0,     0,     0,     0,   729,   291,     0,   292,     0,
     293,     0,   294,   295,     0,     0,   730,     0,     0,     0,
       0,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,     0,   312,   313,
     314,   315,   731,   316,   317,   318,   319,   732,   320,   321,
       0,     0,     0,     0,   322,   323,   324,   325,   733,   327,
       0,     0,   734,   329,   735,   330,     0,   331,   736,   737,
     738,   739,   740,   336,   337,   338,   339,   340,     0,   741,
     341,   342,     0,     0,   343,   344,   345,   346,   742,     0,
     744,   347,   348,     0,   745,   746,   349,     0,   350,   351,
     747,     0,   353,   354,   355,   356,     0,   357,   358,     0,
       0,     0,     0,     0,     0,     0,     0,   359,   360,   361,
       0,   748,   362,     0,   363,     0,   364,   365,   749,   367,
     368,   369,   370,   750,   751,   373,   752,     0,   374,   375,
     376,     0,   377,     0,   378,   379,   380,   381,   382,     0,
     753,   384,   385,     0,     0,   386,     0,     0,     0,   387,
     388,   389,   390,   391,     0,     0,   392,   393,   394,   395,
     396,     0,   397,   398,     0,   399,   400,   401,   754,   755,
     402,     0,   403,     0,   404,   405,     0,   406,   407,   408,
       0,     0,   756,   409,   410,   411,   412,   413,   757,   758,
     416,   417,   418,   419,     0,   759,   421,     0,     0,     0,
     422,   423,   424,   425,     0,     0,     0,   426,     0,     0,
       0,   427,     0,   428,   429,   430,   431,   432,   433,     0,
     434,   435,   436,   437,   438,   439,     0,     0,     0,     0,
       0,     0,   440,   441,     0,   442,     0,     0,   443,     0,
       0,   444,   445,     0,     0,     0,   446,   760,   761,   447,
     448,     0,   449,   450,   762,   452,   453,   454,   763,   764,
     455,   456,   457,   458,   765,   459,   460,     0,   461,     0,
     462,   463,   464,   465,     0,   766,   466,   467,     0,   767,
     768,   769,   770,     0,     0,     0,     0,     0,   472,   473,
     474,     0,   771,   772,   773,   476,   477,   478,   774,   479,
     480,   775,   481,   482,     0,   483,   484,     0,     0,   485,
       0,     0,   486,     0,   487,     0,   776,   489,   490,     0,
       0,   777,   778,   779,   780,   491,     0,     0,   492,   781,
       0,   782,   493,   494,   495,   496,   497,   783,     0,     0,
       0,     0,     0,     0,   499,   500,     0,   501,   502,   503,
       0,     0,   784,     0,     0,     0,     0,   785,   786,     0,
       0,     0,     0,   787,   788,     0,     0,   789,   790,     0,
       0,   791,   792,   141,     0,   682,   143,   144,   145,   146,
       0,     0,   147,     0,     0,     0,   148,     0,     0,   683,
       0,   150,   151,   152,   153,   154,   155,   684,   157,     0,
     158,     0,     0,   685,   159,   686,   687,   688,   160,   689,
       0,   161,   162,   163,     0,   164,     0,   165,   166,     0,
       0,   167,   690,   691,   168,   169,     0,   170,   692,   693,
     172,   173,     0,   174,   175,   176,   177,   178,   694,   180,
       0,   695,   182,   696,   697,   698,   699,   700,     0,   188,
     189,   190,   191,   192,   193,   194,   195,     0,   196,   197,
       0,   198,   199,   200,   701,   202,     0,   203,   702,   703,
     204,     0,     0,   205,   704,   206,   705,   207,     0,   208,
     706,   707,     0,   209,   210,   211,   708,   709,   710,     0,
       0,     0,     0,   711,   214,   712,     0,     0,   713,   215,
       0,   216,     0,     0,     0,   217,     0,   218,   219,   220,
     221,   222,     0,     0,     0,   223,     0,     0,   224,   225,
     226,     0,     0,     0,   227,     0,   228,   229,     0,   230,
     231,   232,     0,     0,   233,   234,     0,   235,   236,   237,
     238,   239,   240,   241,   714,     0,   242,   243,   244,   715,
     716,   245,   246,     0,   247,   248,   249,   717,     0,   250,
       0,     0,     0,   251,     0,   252,     0,   253,     0,   254,
     255,   718,   257,   719,     0,   259,     0,   260,     0,   720,
       0,   261,   262,   263,     0,   264,   721,   722,     0,   265,
     266,     0,     0,     0,   723,   268,   269,   270,   724,     0,
     271,   272,   273,     0,   274,     0,   275,     0,     0,     0,
     725,   276,   277,  1773,     0,     0,   278,     0,   279,   280,
       0,   281,   282,     0,     0,     0,   283,     0,     0,   284,
     285,   727,     0,     0,   287,     0,   728,   288,   289,     0,
       0,     0,     0,     0,   729,   291,     0,   292,     0,   293,
       0,   294,   295,     0,     0,   730,     0,     0,     0,     0,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,     0,   312,   313,   314,
     315,   731,   316,   317,   318,   319,   732,   320,   321,     0,
       0,     0,     0,   322,   323,   324,   325,   733,   327,     0,
       0,   734,   329,   735,   330,     0,   331,   736,   737,   738,
     739,   740,   336,   337,   338,   339,   340,     0,   741,   341,
     342,     0,     0,   343,   344,   345,   346,   742,     0,   744,
     347,   348,     0,   745,   746,   349,     0,   350,   351,   747,
       0,   353,   354,   355,   356,     0,   357,   358,     0,     0,
       0,     0,     0,     0,     0,     0,   359,   360,   361,     0,
     748,   362,     0,   363,     0,   364,   365,   749,   367,   368,
     369,   370,   750,   751,   373,   752,     0,   374,   375,   376,
       0,   377,     0,   378,   379,   380,   381,   382,     0,   753,
     384,   385,     0,     0,   386,     0,     0,     0,   387,   388,
     389,   390,   391,     0,     0,   392,   393,   394,   395,   396,
       0,   397,   398,     0,   399,   400,   401,   754,   755,   402,
       0,   403,     0,   404,   405,     0,   406,   407,   408,     0,
       0,   756,   409,   410,   411,   412,   413,   757,   758,   416,
     417,   418,   419,     0,   759,   421,     0,     0,     0,   422,
     423,   424,   425,     0,     0,     0,   426,     0,     0,     0,
     427,     0,   428,   429,   430,   431,   432,   433,     0,   434,
     435,   436,   437,   438,   439,     0,     0,     0,     0,     0,
       0,   440,   441,     0,   442,     0,     0,   443,     0,     0,
     444,   445,     0,     0,     0,   446,   760,   761,   447,   448,
       0,   449,   450,   762,   452,   453,   454,   763,   764,   455,
     456,   457,   458,   765,   459,   460,     0,   461,     0,   462,
     463,   464,   465,     0,   766,   466,   467,     0,   767,   768,
     769,   770,     0,     0,     0,     0,     0,   472,   473,   474,
       0,   771,   772,   773,   476,   477,   478,   774,   479,   480,
     775,   481,   482,     0,   483,   484,     0,     0,   485,     0,
       0,   486,     0,   487,     0,   776,   489,   490,     0,     0,
     777,   778,   779,   780,   491,     0,     0,   492,   781,     0,
     782,   493,   494,   495,   496,   497,   783,     0,     0,     0,
       0,     0,     0,   499,   500,     0,   501,   502,   503,     0,
       0,   784,     0,     0,     0,     0,   785,   786,     0,     0,
       0,     0,   787,   788,     0,     0,   789,   790,     0,     0,
     791,   792,   141,     0,   682,   143,   144,   145,   146,     0,
       0,   147,     0,     0,     0,   148,     0,     0,   683,     0,
     150,   151,   152,   153,   154,   155,   684,   157,     0,   158,
       0,     0,   685,   159,   686,   687,   688,   160,   689,     0,
     161,   162,   163,     0,   164,     0,   165,   166,     0,     0,
     167,   690,   691,   168,   169,     0,   170,   692,   693,   172,
     173,     0,   174,   175,   176,   177,   178,   694,   180,     0,
     695,   182,   696,   697,   698,   699,   700,     0,   188,   189,
     190,   191,   192,   193,   194,   195,     0,   196,   197,     0,
     198,   199,   200,   701,   202,     0,   203,   702,   703,   204,
       0,     0,   205,   704,   206,   705,   207,     0,   208,   706,
     707,     0,   209,   210,   211,   708,   709,   710,     0,     0,
       0,     0,   711,   214,   712,     0,     0,   713,   215,     0,
     216,     0,     0,     0,   217,     0,   218,   219,   220,   221,
     222,     0,     0,     0,   223,     0,     0,   224,   225,   226,
       0,     0,     0,   227,     0,   228,   229,     0,   230,   231,
     232,     0,     0,   233,   234,     0,   235,   236,   237,   238,
     239,   240,   241,   714,     0,   242,   243,   244,   715,   716,
     245,   246,     0,   247,   248,   249,   717,     0,   250,     0,
       0,     0,   251,     0,   252,     0,   253,     0,   254,   255,
     718,   257,   719,     0,   259,     0,   260,     0,   720,     0,
     261,   262,   263,     0,   264,   721,   722,     0,   265,   266,
       0,     0,     0,   723,   268,   269,   270,   724,     0,   271,
     272,   273,     0,   274,     0,   275,     0,     0,     0,   725,
     276,   277,  1775,     0,     0,   278,     0,   279,   280,     0,
     281,   282,     0,     0,     0,   283,     0,     0,   284,   285,
     727,     0,     0,   287,     0,   728,   288,   289,     0,     0,
       0,     0,     0,   729,   291,     0,   292,     0,   293,     0,
     294,   295,     0,     0,   730,     0,     0,     0,     0,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,     0,   312,   313,   314,   315,
     731,   316,   317,   318,   319,   732,   320,   321,     0,     0,
       0,     0,   322,   323,   324,   325,   733,   327,     0,     0,
     734,   329,   735,   330,     0,   331,   736,   737,   738,   739,
     740,   336,   337,   338,   339,   340,     0,   741,   341,   342,
       0,     0,   343,   344,   345,   346,   742,     0,   744,   347,
     348,     0,   745,   746,   349,     0,   350,   351,   747,     0,
     353,   354,   355,   356,     0,   357,   358,     0,     0,     0,
       0,     0,     0,     0,     0,   359,   360,   361,     0,   748,
     362,     0,   363,     0,   364,   365,   749,   367,   368,   369,
     370,   750,   751,   373,   752,     0,   374,   375,   376,     0,
     377,     0,   378,   379,   380,   381,   382,     0,   753,   384,
     385,     0,     0,   386,     0,     0,     0,   387,   388,   389,
     390,   391,     0,     0,   392,   393,   394,   395,   396,     0,
     397,   398,     0,   399,   400,   401,   754,   755,   402,     0,
     403,     0,   404,   405,     0,   406,   407,   408,     0,     0,
     756,   409,   410,   411,   412,   413,   757,   758,   416,   417,
     418,   419,     0,   759,   421,     0,     0,     0,   422,   423,
     424,   425,     0,     0,     0,   426,     0,     0,     0,   427,
       0,   428,   429,   430,   431,   432,   433,     0,   434,   435,
     436,   437,   438,   439,     0,     0,     0,     0,     0,     0,
     440,   441,     0,   442,     0,     0,   443,     0,     0,   444,
     445,     0,     0,     0,   446,   760,   761,   447,   448,     0,
     449,   450,   762,   452,   453,   454,   763,   764,   455,   456,
     457,   458,   765,   459,   460,     0,   461,     0,   462,   463,
     464,   465,     0,   766,   466,   467,     0,   767,   768,   769,
     770,     0,     0,     0,     0,     0,   472,   473,   474,     0,
     771,   772,   773,   476,   477,   478,   774,   479,   480,   775,
     481,   482,     0,   483,   484,     0,     0,   485,     0,     0,
     486,     0,   487,     0,   776,   489,   490,     0,     0,   777,
     778,   779,   780,   491,     0,     0,   492,   781,     0,   782,
     493,   494,   495,   496,   497,   783,     0,     0,     0,     0,
       0,     0,   499,   500,     0,   501,   502,   503,     0,     0,
     784,     0,     0,     0,     0,   785,   786,     0,     0,     0,
       0,   787,   788,     0,     0,   789,   790,     0,     0,   791,
     792,   141,     0,   142,   143,   144,   145,   146,     0,     0,
     147,     0,     0,     0,   148,     0,     0,   149,     0,   150,
     151,   152,   153,   154,   155,   156,   157,     0,   158,     0,
       0,     0,   159,   686,     0,     0,   160,     0,     0,   161,
     162,   163,     0,   164,     0,   165,   166,     0,     0,   167,
       0,     0,   168,   169,     0,   170,   171,     0,   172,   173,
       0,   174,   175,   176,   177,   178,   179,   180,     0,   181,
     182,   183,   184,   185,   186,   187,     0,   188,   189,   190,
     191,   192,   193,   194,   195,     0,   196,   197,     0,   198,
     199,   200,   201,   202,     0,   203,     0,     0,   204,     0,
       0,   205,     0,   206,     0,   207,     0,   208,     0,     0,
       0,   209,   210,   211,     0,     0,  1814,     0,     0,     0,
       0,   213,   214,   712,     0,     0,     0,   215,     0,   216,
       0,     0,     0,   217,     0,   218,   219,   220,   221,   222,
       0,     0,     0,   223,     0,     0,   224,   225,   226,     0,
       0,     0,   227,     0,   228,   229,     0,   230,   231,   232,
       0,     0,   233,   234,     0,   235,   236,   237,   238,   239,
     240,   241,     0,     0,   242,   243,   244,     0,   716,   245,
     246,     0,   247,   248,   249,   717,     0,   250,     0,     0,
       0,   251,     0,   252,     0,   253,     0,   254,   255,   256,
     257,   258,     0,   259,     0,   260,     0,     0,     0,   261,
     262,   263,     0,   264,   721,   722,     0,   265,   266,     0,
       0,     0,   267,   268,   269,   270,     0,     0,   271,   272,
     273,     0,   274,     0,   275,     0,     0,     0,     0,   276,
     277,     0,     0,     0,   278,     0,   279,   280,     0,   281,
     282,     0,     0,     0,   283,     0,     0,   284,   285,   286,
       0,     0,   287,     0,     0,   288,   289,     0,     0,     0,
       0,     0,   290,   291,     0,   292,     0,   293,     0,   294,
     295,     0,     0,   730,     0,     0,     0,     0,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,     0,   312,   313,   314,   315,     0,
     316,   317,   318,   319,     0,   320,   321,     0,     0,     0,
       0,   322,   323,   324,   325,   326,   327,     0,     0,   328,
     329,     0,   330,     0,   331,     0,   332,   333,   334,   335,
     336,   337,   338,   339,   340,     0,   741,   341,   342,     0,
       0,   343,   344,   345,   346,     0,     0,     0,   347,   348,
       0,   745,   746,   349,     0,   350,   351,   352,     0,   353,
     354,   355,   356,     0,   357,   358,     0,     0,     0,     0,
       0,     0,     0,     0,   359,   360,   361,     0,     0,   362,
       0,   363,     0,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,     0,     0,   374,   375,   376,     0,   377,
       0,   378,   379,   380,   381,   382,     0,   383,   384,   385,
       0,     0,   386,     0,     0,     0,   387,   388,   389,   390,
     391,     0,     0,   392,   393,   394,   395,   396,     0,   397,
     398,     0,   399,   400,   401,     0,     0,   402,     0,   403,
       0,   404,   405,     0,   406,   407,   408,     0,     0,     0,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,     0,   420,   421,     0,     0,     0,   422,   423,   424,
     425,     0,     0,     0,   426,     0,     0,     0,   427,     0,
     428,   429,   430,   431,   432,   433,     0,   434,   435,   436,
     437,   438,   439,     0,     0,     0,     0,     0,     0,   440,
     441,     0,   442,     0,     0,   443,     0,     0,   444,   445,
       0,     0,     0,   446,     0,     0,   447,   448,     0,   449,
     450,   451,   452,   453,   454,     0,     0,   455,   456,   457,
     458,     0,   459,   460,     0,   461,     0,   462,   463,   464,
     465,     0,   766,   466,   467,     0,  1815,   469,   470,  1816,
       0,     0,     0,     0,     0,   472,   473,   474,     0,     0,
     772,   475,   476,   477,   478,   774,   479,   480,   775,   481,
     482,     0,   483,   484,     0,     0,   485,     0,     0,   486,
       0,   487,     0,   488,   489,   490,     0,     0,     0,     0,
       0,     0,   491,     0,     0,   492,     0,     0,     0,   493,
     494,   495,   496,   497,   498,     0,     0,     0,     0,     0,
       0,   499,   500,     0,   501,   502,   503,     0,     0,   504,
       0,     0,     0,     0,   141,     0,   142,   143,   144,   145,
     146,     0,     0,   147,     0,     0,     0,   148,   791,   792,
     149,     0,   150,   151,   152,   153,   154,   155,   156,   157,
       0,   158,     0,     0,     0,   159,     0,     0,     0,   160,
       0,     0,   161,   162,   163,     0,   164,     0,   165,   166,
       0,     0,   167,     0,     0,   168,   169,     0,   170,   171,
       0,   172,   173,     0,   174,   175,   176,   177,   178,   179,
     180,     0,   181,   182,   183,   184,   185,   186,   187,     0,
     188,   189,   190,   191,   192,   193,   194,   195,     0,   196,
     197,  2907,   198,   199,   200,   201,   202,     0,   203,     0,
       0,   204,     0,     0,   205,     0,   206,     0,   207,     0,
     208,     0,     0,     0,   209,   210,   211,     0,     0,   212,
       0,     0,     0,     0,   213,   214,     0,     0,     0,     0,
     215,     0,   216,     0,     0,     0,   217,     0,   218,   219,
     220,   221,   222,     0,     0,     0,   223,     0,     0,   224,
     225,   226,     0,     0,     0,   227,     0,   228,   229,     0,
     230,   231,   232,     0,     0,   233,   234,     0,   235,   236,
     237,   238,   239,   240,   241,     0,     0,   242,   243,   244,
       0,     0,   245,   246,     0,   247,   248,   249,     0,     0,
     250,     0,     0,     0,   251,     0,   252,   518,   253,     0,
     254,   255,   256,   257,   258,     0,   259,     0,   260,     0,
       0,     0,   261,   262,   263,     0,   264,     0,     0,     0,
     265,   266,     0,     0,     0,   267,   268,   269,   270,     0,
       0,   271,   272,   273,  2073,   274,     0,   275,     0,     0,
       0,     0,   276,   277,     0,     0,     0,   278,     0,   279,
     280,     0,   281,   282,     0,     0,     0,   283,  2074,     0,
     284,   285,   286,     0,     0,   287,     0,     0,   288,   289,
       0,  3058,     0,     0,     0,   290,   291,     0,   292,     0,
     293,     0,   294,   295,     0,     0,     0,     0,     0,     0,
       0,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,     0,   312,   313,
     314,   315,     0,   316,   317,   318,   319,     0,   320,   321,
       0,     0,     0,     0,   322,   323,   324,   325,   326,   327,
       0,     0,   328,   329,     0,   330,     0,   331,     0,   332,
     333,   334,   335,   336,   337,   338,   339,   340,     0,     0,
     341,   342,     0,     0,   343,   344,   345,   346,     0,     0,
       0,   347,   348,     0,     0,     0,   349,     0,   350,   351,
     352,     0,   353,   354,   355,   356,     0,   357,   358,     0,
       0,     0,     0,     0,     0,     0,     0,   359,   360,   361,
       0,     0,   362,     0,   363,     0,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,     0,     0,   374,   375,
     376,     0,   377,     0,   378,   379,   380,   381,   382,     0,
     383,   384,   385,     0,     0,   386,     0,     0,     0,   387,
     388,   389,   390,   391,     0,     0,   392,   393,   394,   395,
     396,     0,   397,   398,     0,   399,   400,   401,     0,     0,
     402,     0,   403,     0,   404,   405,     0,   406,   407,   408,
       0,     0,     0,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,     0,   420,   421,  2369,     0,     0,
     422,   423,   424,   425,     0,     0,     0,   426,     0,     0,
       0,   427,     0,   428,   429,   430,   431,   432,   433,     0,
     434,   435,   436,   437,   438,   439,   521,     0,     0,     0,
       0,     0,   440,   441,     0,   442,     0,     0,   443,     0,
       0,   444,   445,     0,     0,     0,   446,     0,     0,   447,
     448,     0,   449,   450,   451,   452,   453,   454,     0,     0,
     455,   456,   457,   458,     0,   459,   460,     0,   461,     0,
     462,   463,   464,   465,     0,     0,   466,   467,     0,   468,
     469,   470,   471,     0,     0,     0,     0,     0,   472,   473,
     474,     0,     0,     0,   475,   476,   477,   478,     0,   479,
     480,     0,   481,   482,     0,   483,   484,     0,     0,   485,
       0,     0,   486,     0,   487,     0,   488,   489,   490,     0,
       0,     0,     0,     0,     0,   491,     0,     0,   492,     0,
       0,     0,   493,   494,   495,   496,   497,   498,     0,     0,
       0,     0,     0,     0,   499,   500,     0,   501,   502,   503,
       0,     0,   504,     0,     0,   141,     0,   142,   143,   144,
     145,   146,     0,     0,   147,     0,     0,     0,   148,     0,
       0,   149,  2980,   150,   151,   152,   153,   154,   155,   156,
     157,     0,   158,     0,     0,     0,   159,     0,     0,     0,
     160,     0,     0,   161,   162,   163,     0,   164,     0,   165,
     166,     0,     0,   167,     0,     0,   168,   169,     0,   170,
     171,     0,   172,   173,     0,   174,   175,   176,   177,   178,
     179,   180,     0,   181,   182,   183,   184,   185,   186,   187,
       0,   188,   189,   190,   191,   192,   193,   194,   195,     0,
     196,   197,  2907,   198,   199,   200,   201,   202,     0,   203,
       0,     0,   204,     0,     0,   205,     0,   206,     0,   207,
       0,   208,     0,     0,     0,   209,   210,   211,     0,     0,
     212,     0,     0,     0,     0,   213,   214,     0,     0,     0,
       0,   215,     0,   216,     0,     0,     0,   217,     0,   218,
     219,   220,   221,   222,     0,     0,     0,   223,     0,     0,
     224,   225,   226,     0,     0,     0,   227,     0,   228,   229,
       0,   230,   231,   232,     0,     0,   233,   234,     0,   235,
     236,   237,   238,   239,   240,   241,     0,     0,   242,   243,
     244,     0,     0,   245,   246,     0,   247,   248,   249,     0,
       0,   250,     0,     0,     0,   251,     0,   252,   518,   253,
       0,   254,   255,   256,   257,   258,     0,   259,     0,   260,
       0,     0,     0,   261,   262,   263,     0,   264,     0,     0,
       0,   265,   266,     0,     0,     0,   267,   268,   269,   270,
       0,     0,   271,   272,   273,  2073,   274,     0,   275,     0,
       0,     0,     0,   276,   277,     0,     0,     0,   278,     0,
     279,   280,     0,   281,   282,     0,     0,     0,   283,  2074,
       0,   284,   285,   286,     0,     0,   287,     0,     0,   288,
     289,     0,     0,     0,     0,     0,   290,   291,     0,   292,
       0,   293,     0,   294,   295,     0,     0,     0,     0,     0,
       0,     0,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,     0,   312,
     313,   314,   315,     0,   316,   317,   318,   319,     0,   320,
     321,     0,     0,     0,     0,   322,   323,   324,   325,   326,
     327,     0,     0,   328,   329,     0,   330,     0,   331,     0,
     332,   333,   334,   335,   336,   337,   338,   339,   340,     0,
       0,   341,   342,     0,     0,   343,   344,   345,   346,     0,
       0,     0,   347,   348,     0,     0,     0,   349,     0,   350,
     351,   352,     0,   353,   354,   355,   356,     0,   357,   358,
       0,     0,     0,     0,     0,     0,     0,     0,   359,   360,
     361,     0,     0,   362,     0,   363,     0,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,     0,     0,   374,
     375,   376,     0,   377,     0,   378,   379,   380,   381,   382,
       0,   383,   384,   385,     0,     0,   386,     0,     0,     0,
     387,   388,   389,   390,   391,     0,     0,   392,   393,   394,
     395,   396,     0,   397,   398,     0,   399,   400,   401,     0,
       0,   402,     0,   403,     0,   404,   405,     0,   406,   407,
     408,     0,     0,     0,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,     0,   420,   421,     0,     0,
       0,   422,   423,   424,   425,     0,     0,     0,   426,     0,
       0,     0,   427,     0,   428,   429,   430,   431,   432,   433,
       0,   434,   435,   436,   437,   438,   439,   521,     0,     0,
       0,     0,     0,   440,   441,     0,   442,     0,     0,   443,
       0,     0,   444,   445,     0,     0,     0,   446,     0,     0,
     447,   448,     0,   449,   450,   451,   452,   453,   454,     0,
       0,   455,   456,   457,   458,     0,   459,   460,     0,   461,
       0,   462,   463,   464,   465,     0,     0,   466,   467,     0,
     468,   469,   470,   471,     0,     0,     0,     0,     0,   472,
     473,   474,     0,     0,     0,   475,   476,   477,   478,     0,
     479,   480,     0,   481,   482,     0,   483,   484,     0,     0,
     485,     0,     0,   486,     0,   487,     0,   488,   489,   490,
       0,     0,     0,     0,     0,     0,   491,     0,     0,   492,
       0,     0,     0,   493,   494,   495,   496,   497,   498,     0,
       0,     0,     0,     0,     0,   499,   500,     0,   501,   502,
     503,     0,     0,   504,     0,     0,   141,     0,   142,   143,
     144,   145,   146,     0,     0,   147,     0,     0,     0,   148,
       0,     0,   149,  2980,   150,   151,   152,   153,   154,   155,
     156,   157,     0,   158,     0,     0,     0,   159,     0,     0,
       0,   160,     0,     0,   161,   162,   163,     0,   164,     0,
     165,   166,     0,     0,   167,     0,     0,   168,   169,     0,
     170,   171,     0,   172,   173,     0,   174,   175,   176,   177,
     178,   179,   180,     0,   181,   182,   183,   184,   185,   186,
     187,     0,   188,   189,   190,   191,   192,   193,   194,   195,
       0,   196,   197,     0,   198,   199,   200,   201,   202,     0,
     203,     0,     0,   204,     0,     0,   205,     0,   206,     0,
     207,     0,   208,     0,     0,     0,   209,   210,   211,     0,
       0,   212,     0,     0,     0,     0,   213,   214,     0,     0,
       0,     0,   215,     0,   216,     0,     0,     0,   217,     0,
     218,   219,   220,   221,   222,     0,     0,     0,   223,     0,
       0,   224,   225,   226,     0,     0,     0,   227,     0,   228,
     229,     0,   230,   231,   232,     0,     0,   233,   234,     0,
     235,   236,   237,   238,   239,   240,   241,     0,     0,   242,
     243,   244,     0,     0,   245,   246,     0,   247,   248,   249,
       0,     0,   250,     0,     0,     0,   251,     0,   252,     0,
     253,     0,   254,   255,   256,   257,   258,     0,   259,     0,
     260,     0,     0,     0,   261,   262,   263,     0,   264,     0,
       0,     0,   265,   266,     0,     0,     0,   267,   268,   269,
     270,     0,     0,   271,   272,   273,     0,   274,     0,   275,
       0,     0,     0,     0,   276,   277,     0,     0,     0,   278,
       0,   279,   280,     0,   281,   282,     0,     0,     0,   283,
       0,     0,   284,   285,   286,     0,     0,   287,     0,     0,
     288,   289,     0,     0,     0,     0,     0,   290,   291,     0,
     292,     0,   293,     0,   294,   295,     0,     0,     0,     0,
       0,     0,     0,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,     0,
     312,   313,   314,   315,     0,   316,   317,   318,   319,     0,
     320,   321,     0,     0,     0,     0,   322,   323,   324,   325,
     326,   327,     0,     0,   328,   329,     0,   330,     0,   331,
       0,   332,   333,   334,   335,   336,   337,   338,   339,   340,
       0,     0,   341,   342,     0,     0,   343,   344,   345,   346,
       0,     0,     0,   347,   348,     0,     0,     0,   349,     0,
     350,   351,   352,     0,   353,   354,   355,   356,     0,   357,
     358,     0,     0,     0,     0,     0,     0,     0,     0,   359,
     360,   361,     0,     0,   362,     0,   363,     0,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,     0,     0,
     374,   375,   376,     0,   377,     0,   378,   379,   380,   381,
     382,     0,   383,   384,   385,     0,     0,   386,     0,     0,
       0,   387,   388,   389,   390,   391,     0,     0,   392,   393,
     394,   395,   396,     0,   397,   398,     0,   399,   400,   401,
       0,     0,   402,     0,   403,     0,   404,   405,     0,   406,
     407,   408,     0,     0,     0,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,     0,   420,   421,  2369,
       0,     0,   422,   423,   424,   425,     0,     0,     0,   426,
       0,     0,     0,   427,     0,   428,   429,   430,   431,   432,
     433,     0,   434,   435,   436,   437,   438,   439,     0,     0,
       0,     0,     0,     0,   440,   441,     0,   442,     0,     0,
     443,     0,     0,   444,   445,     0,     0,     0,   446,     0,
       0,   447,   448,     0,   449,   450,   451,   452,   453,   454,
       0,     0,   455,   456,   457,   458,     0,   459,   460,     0,
     461,     0,   462,   463,   464,   465,     0,     0,   466,   467,
       0,   468,   469,   470,   471,     0,     0,     0,     0,     0,
     472,   473,   474,     0,     0,     0,   475,   476,   477,   478,
       0,   479,   480,     0,   481,   482,     0,   483,   484,     0,
       0,   485,     0,     0,   486,     0,   487,     0,   488,   489,
     490,     0,     0,     0,     0,     0,     0,   491,     0,     0,
     492,     0,     0,     0,   493,   494,   495,   496,   497,   498,
       0,     0,     0,     0,     0,     0,   499,   500,     0,   501,
     502,   503,     0,     0,   504,     0,     0,   141,     0,   142,
     143,   144,   145,   146,     0,     0,   147,  2797,     0,     0,
     148,     0,     0,   149,   792,   150,   151,   152,   153,   154,
     155,   156,   157,     0,   158,     0,     0,     0,   159,     0,
       0,     0,   160,     0,     0,   161,   162,   163,     0,   164,
       0,   165,   166,     0,     0,   167,     0,     0,   168,   169,
       0,   170,   171,     0,   172,   173,     0,   174,   175,   176,
     177,   178,   179,   180,     0,   181,   182,   183,   184,   185,
     186,   187,     0,   188,   189,   190,   191,   192,   193,   194,
     195,     0,   196,   197,     0,   198,   199,   200,   201,   202,
       0,   203,     0,     0,   204,     0,     0,   205,     0,   206,
       0,   207,     0,   208,     0,     0,     0,   209,   210,   211,
       0,     0,   212,     0,     0,     0,     0,   213,   214,     0,
       0,     0,     0,   215,     0,   216,     0,     0,     0,   217,
       0,   218,   219,   220,   221,   222,     0,     0,     0,   223,
       0,     0,   224,   225,   226,     0,     0,     0,   227,     0,
     228,   229,     0,   230,   231,   232,     0,     0,   233,   234,
       0,   235,   236,   237,   238,   239,   240,   241,     0,     0,
     242,   243,   244,     0,     0,   245,   246,     0,   247,   248,
     249,     0,     0,   250,     0,     0,     0,   251,     0,   252,
       0,   253,     0,   254,   255,   256,   257,   258,     0,   259,
       0,   260,     0,     0,     0,   261,   262,   263,     0,   264,
       0,     0,     0,   265,   266,     0,     0,     0,   267,   268,
     269,   270,     0,     0,   271,   272,   273,     0,   274,     0,
     275,     0,     0,     0,     0,   276,   277,     0,     0,     0,
     278,     0,   279,   280,     0,   281,   282,     0,     0,     0,
     283,     0,     0,   284,   285,   286,     0,     0,   287,     0,
       0,   288,   289,     0,     0,     0,     0,     0,   290,   291,
       0,   292,     0,   293,     0,   294,   295,     0,     0,     0,
       0,     0,     0,     0,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
       0,   312,   313,   314,   315,     0,   316,   317,   318,   319,
       0,   320,   321,     0,     0,     0,     0,   322,   323,   324,
     325,   326,   327,     0,     0,   328,   329,     0,   330,     0,
     331,     0,   332,   333,   334,   335,   336,   337,   338,   339,
     340,     0,     0,   341,   342,     0,     0,   343,   344,   345,
     346,     0,     0,     0,   347,   348,     0,     0,     0,   349,
       0,   350,   351,   352,     0,   353,   354,   355,   356,     0,
     357,   358,     0,     0,     0,     0,     0,     0,     0,     0,
     359,   360,   361,     0,     0,   362,     0,   363,     0,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,     0,
       0,   374,   375,   376,     0,   377,     0,   378,   379,   380,
     381,   382,     0,   383,   384,   385,     0,     0,   386,     0,
       0,     0,   387,   388,   389,   390,   391,     0,     0,   392,
     393,   394,   395,   396,     0,   397,   398,     0,   399,   400,
     401,     0,     0,   402,     0,   403,     0,   404,   405,     0,
     406,   407,   408,     0,     0,     0,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,     0,   420,   421,
       0,     0,     0,   422,   423,   424,   425,     0,     0,     0,
     426,     0,     0,     0,   427,     0,   428,   429,   430,   431,
     432,   433,     0,   434,   435,   436,   437,   438,   439,     0,
       0,     0,     0,     0,     0,   440,   441,     0,   442,     0,
       0,   443,     0,     0,   444,   445,     0,     0,     0,   446,
       0,     0,   447,   448,     0,   449,   450,   451,   452,   453,
     454,     0,     0,   455,   456,   457,   458,     0,   459,   460,
       0,   461,     0,   462,   463,   464,   465,     0,     0,   466,
     467,     0,   468,   469,   470,   471,     0,     0,     0,     0,
       0,   472,   473,   474,     0,     0,     0,   475,   476,   477,
     478,     0,   479,   480,     0,   481,   482,     0,   483,   484,
       0,     0,   485,     0,     0,   486,     0,   487,     0,   488,
     489,   490,     0,     0,     0,     0,     0,     0,   491,     0,
       0,   492,     0,     0,     0,   493,   494,   495,   496,   497,
     498,     0,     0,     0,     0,     0,     0,   499,   500,     0,
     501,   502,   503,     0,     0,   504,     0,     0,     0,     0,
     141,     0,   142,   143,   144,   145,   146,     0,  4646,   147,
       0,     0,     0,   148,  4647,   792,   149,     0,   150,   151,
     152,   153,   154,   155,   156,   157,     0,   158,     0,     0,
       0,   159,     0,     0,     0,   160,     0,     0,   161,   162,
     163,     0,   164,     0,   165,   166,     0,     0,   167,     0,
       0,   168,   169,     0,   170,   171,     0,   172,   173,     0,
     174,   175,   176,   177,   178,   179,   180,     0,   181,   182,
     183,   184,   185,   186,   187,     0,   188,   189,   190,   191,
     192,   193,   194,   195,     0,   196,   197,     0,   198,   199,
     200,   201,   202,     0,   203,     0,     0,   204,     0,     0,
     205,     0,   206,     0,   207,     0,   208,     0,     0,     0,
     209,   210,   211,     0,     0,   212,     0,     0,     0,     0,
     213,   214,     0,     0,     0,     0,   215,     0,   216,     0,
       0,     0,   217,     0,   218,   219,   220,   221,   222,     0,
       0,     0,   223,     0,     0,   224,   225,   226,     0,     0,
       0,   227,     0,   228,   229,     0,   230,   231,   232,     0,
       0,   233,   234,     0,   235,   236,   237,   238,   239,   240,
     241,     0,     0,   242,   243,   244,     0,     0,   245,   246,
       0,   247,   248,   249,     0,     0,   250,     0,     0,     0,
     251,     0,   252,     0,   253,     0,   254,   255,   256,   257,
     258,     0,   259,     0,   260,     0,     0,     0,   261,   262,
     263,     0,   264,     0,     0,     0,   265,   266,     0,     0,
       0,   267,   268,   269,   270,     0,     0,   271,   272,   273,
       0,   274,     0,   275,     0,     0,     0,     0,   276,   277,
       0,     0,     0,   278,     0,   279,   280,     0,   281,   282,
       0,     0,     0,   283,     0,     0,   284,   285,   286,     0,
       0,   287,     0,     0,   288,   289,     0,     0,     0,     0,
       0,   290,   291,     0,   292,     0,   293,     0,   294,   295,
       0,     0,     0,     0,     0,     0,     0,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,     0,   312,   313,   314,   315,     0,   316,
     317,   318,   319,     0,   320,   321,     0,     0,     0,     0,
     322,   323,   324,   325,   326,   327,     0,     0,   328,   329,
       0,   330,     0,   331,     0,   332,   333,   334,   335,   336,
     337,   338,   339,   340,     0,     0,   341,   342,     0,     0,
     343,   344,   345,   346,     0,     0,     0,   347,   348,     0,
       0,     0,   349,     0,   350,   351,   352,     0,   353,   354,
     355,   356,     0,   357,   358,     0,     0,     0,     0,     0,
       0,     0,     0,   359,   360,   361,     0,     0,   362,     0,
     363,     0,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,     0,     0,   374,   375,   376,     0,   377,     0,
     378,   379,   380,   381,   382,     0,   383,   384,   385,     0,
       0,   386,     0,     0,     0,   387,   388,   389,   390,   391,
       0,     0,   392,   393,   394,   395,   396,     0,   397,   398,
       0,   399,   400,   401,     0,     0,   402,     0,   403,     0,
     404,   405,     0,   406,   407,   408,     0,     0,     0,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
       0,   420,   421,     0,     0,     0,   422,   423,   424,   425,
       0,     0,     0,   426,     0,     0,     0,   427,     0,   428,
     429,   430,   431,   432,   433,     0,   434,   435,   436,   437,
     438,   439,     0,     0,     0,     0,     0,     0,   440,   441,
       0,   442,     0,     0,   443,     0,     0,   444,   445,     0,
       0,     0,   446,     0,     0,   447,   448,     0,   449,   450,
     451,   452,   453,   454,     0,     0,   455,   456,   457,   458,
       0,   459,   460,     0,   461,     0,   462,   463,   464,   465,
       0,     0,   466,   467,     0,   468,   469,   470,   471,     0,
       0,     0,     0,     0,   472,   473,   474,     0,     0,     0,
     475,   476,   477,   478,     0,   479,   480,     0,   481,   482,
       0,   483,   484,     0,     0,   485,     0,     0,   486,     0,
     487,     0,   488,   489,   490,     0,     0,     0,     0,     0,
       0,   491,     0,     0,   492,     0,     0,     0,   493,   494,
     495,   496,   497,   498,     0,     0,     0,     0,     0,     0,
     499,   500,     0,   501,   502,   503,     0,     0,   504,     0,
       0,     0,     0,   141,     0,   142,   143,   144,   145,   146,
    1160,     0,   147,     0,     0,     0,   148,     0,   792,   149,
       0,   150,   151,   152,   153,   154,   155,   156,   157,     0,
     158,     0,     0,     0,   159,     0,     0,     0,   160,     0,
       0,   161,   162,   163,     0,   164,     0,   165,   166,     0,
       0,   167,     0,     0,   168,   169,     0,   170,   171,     0,
     172,   173,     0,   174,   175,   176,   177,   178,   179,   180,
       0,   181,   182,   183,   184,   185,   186,   187,     0,   188,
     189,   190,   191,   192,   193,   194,   195,     0,   196,   197,
       0,   198,   199,   200,   201,   202,     0,   203,     0,     0,
     204,     0,     0,   205,     0,   206,     0,   207,     0,   208,
       0,     0,     0,   209,   210,   211,     0,     0,   212,     0,
       0,     0,     0,   213,   214,     0,     0,     0,     0,   215,
       0,   216,     0,     0,     0,   217,     0,   218,   219,   220,
     221,   222,     0,     0,     0,   223,     0,     0,   224,   225,
     226,     0,     0,     0,   227,     0,   228,   229,     0,   230,
     231,   232,     0,     0,   233,   234,     0,   235,   236,   237,
     238,   239,   240,   241,     0,     0,   242,   243,   244,     0,
       0,   245,   246,     0,   247,   248,   249,     0,     0,   250,
       0,     0,     0,   251,     0,   252,     0,   253,     0,   254,
     255,   256,   257,   258,     0,   259,     0,   260,     0,     0,
       0,   261,   262,   263,     0,   264,     0,     0,     0,   265,
     266,     0,     0,     0,   267,   268,   269,   270,     0,     0,
     271,   272,   273,     0,   274,     0,   275,     0,     0,     0,
       0,   276,   277,     0,  1371,     0,   278,     0,   279,   280,
       0,   281,   282,     0,     0,     0,   283,     0,     0,   284,
     285,   286,     0,     0,   287,     0,     0,   288,   289,     0,
       0,     0,     0,     0,   290,   291,     0,   292,     0,   293,
       0,   294,   295,     0,     0,     0,     0,     0,     0,     0,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,     0,   312,   313,   314,
     315,     0,   316,   317,   318,   319,     0,   320,   321,     0,
       0,     0,     0,   322,   323,   324,   325,   326,   327,     0,
       0,   328,   329,     0,   330,     0,   331,     0,   332,   333,
     334,   335,   336,   337,   338,   339,   340,     0,     0,   341,
     342,     0,     0,   343,   344,   345,   346,     0,     0,     0,
     347,   348,     0,     0,     0,   349,     0,   350,   351,   352,
       0,   353,   354,   355,   356,     0,   357,   358,     0,     0,
       0,     0,     0,     0,     0,     0,   359,   360,   361,     0,
       0,   362,     0,   363,     0,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,     0,     0,   374,   375,   376,
       0,   377,     0,   378,   379,   380,   381,   382,     0,   383,
     384,   385,     0,     0,   386,     0,     0,     0,   387,   388,
     389,   390,   391,     0,     0,   392,   393,   394,   395,   396,
       0,   397,   398,     0,   399,   400,   401,     0,     0,   402,
       0,   403,     0,   404,   405,     0,   406,   407,   408,     0,
       0,     0,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,     0,   420,   421,     0,     0,     0,   422,
     423,   424,   425,     0,     0,     0,   426,     0,     0,     0,
     427,     0,   428,   429,   430,   431,   432,   433,     0,   434,
     435,   436,   437,   438,   439,     0,     0,     0,     0,     0,
       0,   440,   441,     0,   442,     0,     0,   443,     0,     0,
     444,   445,     0,     0,     0,   446,     0,     0,   447,   448,
       0,   449,   450,   451,   452,   453,   454,     0,     0,   455,
     456,   457,   458,     0,   459,   460,     0,   461,     0,   462,
     463,   464,   465,     0,     0,   466,   467,     0,   468,   469,
     470,   471,     0,     0,     0,     0,     0,   472,   473,   474,
       0,     0,     0,   475,   476,   477,   478,     0,   479,   480,
       0,   481,   482,     0,   483,   484,     0,     0,   485,     0,
       0,   486,     0,   487,     0,   488,   489,   490,     0,     0,
       0,     0,     0,     0,   491,     0,     0,   492,     0,     0,
       0,   493,   494,   495,   496,   497,   498,     0,     0,     0,
       0,     0,     0,   499,   500,     0,   501,   502,   503,     0,
       0,   504,     0,     0,   141,     0,   142,   143,   144,   145,
     146,     0,     0,   147,     0,     0,     0,   148,     0,     0,
     149,   554,   150,   151,   152,   153,   154,   155,   156,   157,
       0,   158,     0,     0,     0,   159,     0,     0,     0,   160,
       0,     0,   161,   162,   163,     0,   164,     0,   165,   166,
       0,     0,   167,     0,     0,   168,   169,     0,   170,   171,
       0,   172,   173,     0,   174,   175,   176,   177,   178,   179,
     180,     0,   181,   182,   183,   184,   185,   186,   187,     0,
     188,   189,   190,   191,   192,   193,   194,   195,     0,   196,
     197,     0,   198,   199,   200,   201,   202,     0,   203,     0,
       0,   204,     0,     0,   205,     0,   206,     0,   207,     0,
     208,     0,     0,     0,   209,   210,   211,     0,     0,   212,
       0,     0,     0,     0,   213,   214,     0,     0,     0,     0,
     215,     0,   216,     0,     0,     0,   217,     0,   218,   219,
     220,   221,   222,     0,     0,     0,   223,     0,     0,   224,
     225,   226,     0,     0,     0,   227,     0,   228,   229,     0,
     230,   231,   232,     0,     0,   233,   234,     0,   235,   236,
     237,   238,   239,   240,   241,     0,     0,   242,   243,   244,
       0,     0,   245,   246,     0,   247,   248,   249,     0,     0,
     250,     0,     0,     0,   251,     0,   252,     0,   253,     0,
     254,   255,   256,   257,   258,     0,   259,     0,   260,     0,
       0,     0,   261,   262,   263,     0,   264,     0,     0,     0,
     265,   266,     0,     0,     0,   267,   268,   269,   270,     0,
       0,   271,   272,   273,     0,   274,     0,   275,     0,     0,
       0,     0,   276,   277,     0,     0,     0,   278,     0,   279,
     280,     0,   281,   282,     0,     0,     0,   283,     0,     0,
     284,   285,   286,     0,     0,   287,     0,     0,   288,   289,
       0,     0,     0,     0,     0,   290,   291,     0,   292,     0,
     293,     0,   294,   295,     0,     0,     0,     0,     0,     0,
       0,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,     0,   312,   313,
     314,   315,     0,   316,   317,   318,   319,     0,   320,   321,
       0,     0,     0,     0,   322,   323,   324,   325,   326,   327,
       0,     0,   328,   329,     0,   330,     0,   331,     0,   332,
     333,   334,   335,   336,   337,   338,   339,   340,     0,     0,
     341,   342,     0,     0,   343,   344,   345,   346,     0,     0,
       0,   347,   348,     0,     0,     0,   349,     0,   350,   351,
     352,     0,   353,   354,   355,   356,     0,   357,   358,     0,
       0,     0,     0,     0,     0,     0,     0,   359,   360,   361,
       0,     0,   362,     0,   363,     0,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,     0,     0,   374,   375,
     376,     0,   377,     0,   378,   379,   380,   381,   382,     0,
     383,   384,   385,     0,     0,   386,     0,     0,     0,   387,
     388,   389,   390,   391,     0,     0,   392,   393,   394,   395,
     396,     0,   397,   398,     0,   399,   400,   401,     0,     0,
     402,     0,   403,     0,   404,   405,     0,   406,   407,   408,
       0,     0,     0,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,     0,   420,   421,     0,     0,     0,
     422,   423,   424,   425,     0,     0,     0,   426,     0,     0,
       0,   427,     0,   428,   429,   430,   431,   432,   433,     0,
     434,   435,   436,   437,   438,   439,     0,     0,     0,     0,
       0,     0,   440,   441,     0,   442,     0,     0,   443,     0,
       0,   444,   445,     0,     0,     0,   446,     0,     0,   447,
     448,     0,   449,   450,   451,   452,   453,   454,     0,     0,
     455,   456,   457,   458,     0,   459,   460,     0,   461,     0,
     462,   463,   464,   465,     0,     0,   466,   467,     0,   468,
     469,   470,   471,     0,     0,     0,     0,     0,   472,   473,
     474,     0,     0,     0,   475,   476,   477,   478,     0,   479,
     480,     0,   481,   482,     0,   483,   484,     0,     0,   485,
       0,     0,   486,     0,   487,     0,   488,   489,   490,     0,
       0,     0,     0,     0,     0,   491,     0,     0,   492,     0,
       0,     0,   493,   494,   495,   496,   497,   498,     0,     0,
       0,     0,     0,     0,   499,   500,     0,   501,   502,   503,
       0,     0,   504,     0,     0,     0,     0,     0,   141,  2318,
     142,   143,   144,   145,   146,     0,     0,   147,     0,     0,
       0,   148,   554,     0,   149,     0,   150,   151,   152,   153,
     154,   155,   156,   157,     0,   158,     0,     0,     0,   159,
       0,     0,     0,   160,     0,     0,   161,   162,   163,     0,
     164,     0,   165,   166,     0,     0,   167,     0,     0,   168,
     169,     0,   170,   171,     0,   172,   173,     0,   174,   175,
     176,   177,   178,   179,   180,     0,   181,   182,   183,   184,
     185,   186,   187,     0,   188,   189,   190,   191,   192,   193,
     194,   195,     0,   196,   197,     0,   198,   199,   200,   201,
     202,     0,   203,     0,     0,   204,     0,     0,   205,     0,
     206,     0,   207,     0,   208,     0,     0,     0,   209,   210,
     211,     0,     0,   212,     0,     0,     0,     0,   213,   214,
       0,     0,     0,     0,   215,     0,   216,     0,     0,     0,
     217,     0,   218,   219,   220,   221,   222,     0,     0,     0,
     223,     0,     0,   224,   225,   226,     0,     0,     0,   227,
       0,   228,   229,     0,   230,   231,   232,     0,     0,   233,
     234,     0,   235,   236,   237,   238,   239,   240,   241,     0,
       0,   242,   243,   244,     0,     0,   245,   246,     0,   247,
     248,   249,     0,     0,   250,     0,     0,     0,   251,     0,
     252,     0,   253,     0,   254,   255,   256,   257,   258,     0,
     259,     0,   260,     0,     0,     0,   261,   262,   263,     0,
     264,     0,     0,     0,   265,   266,     0,     0,     0,   267,
     268,   269,   270,     0,     0,   271,   272,   273,     0,   274,
       0,   275,     0,     0,     0,     0,   276,   277,     0,     0,
       0,   278,     0,   279,   280,     0,   281,   282,     0,     0,
       0,   283,     0,     0,   284,   285,   286,     0,     0,   287,
       0,     0,   288,   289,     0,     0,     0,     0,     0,   290,
     291,     0,   292,     0,   293,     0,   294,   295,     0,     0,
       0,     0,     0,     0,     0,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,     0,   312,   313,   314,   315,     0,   316,   317,   318,
     319,     0,   320,   321,     0,     0,     0,     0,   322,   323,
     324,   325,   326,   327,     0,     0,   328,   329,     0,   330,
       0,   331,     0,   332,   333,   334,   335,   336,   337,   338,
     339,   340,     0,     0,   341,   342,     0,     0,   343,   344,
     345,   346,     0,     0,     0,   347,   348,     0,     0,     0,
     349,     0,   350,   351,   352,     0,   353,   354,   355,   356,
       0,   357,   358,     0,     0,     0,     0,     0,     0,     0,
       0,   359,   360,   361,     0,     0,   362,     0,   363,     0,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
       0,     0,   374,   375,   376,     0,   377,     0,   378,   379,
     380,   381,   382,     0,   383,   384,   385,     0,     0,   386,
       0,     0,     0,   387,   388,   389,   390,   391,     0,     0,
     392,   393,   394,   395,   396,     0,   397,   398,     0,   399,
     400,   401,     0,     0,   402,     0,   403,     0,   404,   405,
       0,   406,   407,   408,     0,     0,     0,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,     0,   420,
     421,     0,     0,     0,   422,   423,   424,   425,     0,     0,
       0,   426,     0,     0,     0,   427,     0,   428,   429,   430,
     431,   432,   433,     0,   434,   435,   436,   437,   438,   439,
       0,     0,     0,     0,     0,     0,   440,   441,     0,   442,
       0,     0,   443,     0,     0,   444,   445,     0,     0,     0,
     446,     0,     0,   447,   448,     0,   449,   450,   451,   452,
     453,   454,     0,     0,   455,   456,   457,   458,     0,   459,
     460,     0,   461,     0,   462,   463,   464,   465,     0,     0,
     466,   467,     0,   468,   469,   470,   471,     0,     0,     0,
       0,     0,   472,   473,   474,     0,     0,     0,   475,   476,
     477,   478,     0,   479,   480,     0,   481,   482,     0,   483,
     484,     0,     0,   485,     0,     0,   486,     0,   487,     0,
     488,   489,   490,     0,     0,     0,     0,     0,     0,   491,
       0,     0,   492,     0,     0,     0,   493,   494,   495,   496,
     497,   498,     0,     0,     0,     0,     0,     0,   499,   500,
       0,   501,   502,   503,     0,     0,   504,     0,     0,     0,
       0,   141,     0,   142,   143,   144,   145,   146,  2979,     0,
     147,     0,     0,     0,   148,     0,  2980,   149,     0,   150,
     151,   152,   153,   154,   155,   156,   157,     0,   158,     0,
       0,     0,   159,     0,     0,     0,   160,     0,     0,   161,
     162,   163,     0,   164,     0,   165,   166,     0,     0,   167,
       0,     0,   168,   169,     0,   170,   171,     0,   172,   173,
       0,   174,   175,   176,   177,   178,   179,   180,     0,   181,
     182,   183,   184,   185,   186,   187,     0,   188,   189,   190,
     191,   192,   193,   194,   195,     0,   196,   197,     0,   198,
     199,   200,   201,   202,     0,   203,     0,     0,   204,     0,
       0,   205,     0,   206,     0,   207,     0,   208,     0,     0,
       0,   209,   210,   211,     0,     0,   212,     0,     0,     0,
       0,   213,   214,     0,     0,     0,     0,   215,     0,   216,
       0,     0,     0,   217,     0,   218,   219,   220,   221,   222,
       0,     0,     0,   223,     0,     0,   224,   225,   226,     0,
       0,     0,   227,     0,   228,   229,     0,   230,   231,   232,
       0,     0,   233,   234,     0,   235,   236,   237,   238,   239,
     240,   241,     0,     0,   242,   243,   244,     0,     0,   245,
     246,     0,   247,   248,   249,     0,     0,   250,     0,     0,
       0,   251,     0,   252,     0,   253,     0,   254,   255,   256,
     257,   258,     0,   259,     0,   260,     0,     0,     0,   261,
     262,   263,     0,   264,     0,     0,     0,   265,   266,     0,
       0,     0,   267,   268,   269,   270,     0,     0,   271,   272,
     273,     0,   274,     0,   275,     0,     0,     0,     0,   276,
     277,     0,     0,     0,   278,     0,   279,   280,     0,   281,
     282,     0,     0,     0,   283,     0,     0,   284,   285,   286,
       0,     0,   287,     0,     0,   288,   289,     0,     0,     0,
       0,     0,   290,   291,     0,   292,     0,   293,     0,   294,
     295,     0,     0,     0,     0,     0,     0,     0,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,     0,   312,   313,   314,   315,     0,
     316,   317,   318,   319,     0,   320,   321,     0,     0,     0,
       0,   322,   323,   324,   325,   326,   327,     0,     0,   328,
     329,     0,   330,     0,   331,     0,   332,   333,   334,   335,
     336,   337,   338,   339,   340,     0,     0,   341,   342,     0,
       0,   343,   344,   345,   346,     0,     0,     0,   347,   348,
       0,     0,     0,   349,     0,   350,   351,   352,     0,   353,
     354,   355,   356,     0,   357,   358,     0,     0,     0,     0,
       0,     0,     0,     0,   359,   360,   361,     0,     0,   362,
       0,   363,     0,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,     0,     0,   374,   375,   376,     0,   377,
       0,   378,   379,   380,   381,   382,     0,   383,   384,   385,
       0,     0,   386,     0,     0,     0,   387,   388,   389,   390,
     391,     0,     0,   392,   393,   394,   395,   396,     0,   397,
     398,     0,   399,   400,   401,     0,     0,   402,     0,   403,
       0,   404,   405,     0,   406,   407,   408,     0,     0,     0,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,     0,   420,   421,     0,     0,     0,   422,   423,   424,
     425,     0,     0,     0,   426,     0,     0,     0,   427,     0,
     428,   429,   430,   431,   432,   433,     0,   434,   435,   436,
     437,   438,   439,     0,     0,     0,     0,     0,     0,   440,
     441,     0,   442,     0,     0,   443,     0,     0,   444,   445,
       0,     0,     0,   446,     0,     0,   447,   448,     0,   449,
     450,   451,   452,   453,   454,     0,     0,   455,   456,   457,
     458,     0,   459,   460,     0,   461,     0,   462,   463,   464,
     465,     0,     0,   466,   467,     0,   468,   469,   470,   471,
       0,     0,     0,     0,     0,   472,   473,   474,     0,     0,
       0,   475,   476,   477,   478,     0,   479,   480,     0,   481,
     482,     0,   483,   484,     0,     0,   485,     0,     0,   486,
       0,   487,     0,   488,   489,   490,     0,     0,     0,     0,
       0,     0,   491,     0,     0,   492,     0,     0,     0,   493,
     494,   495,   496,   497,   498,     0,     0,     0,     0,     0,
       0,   499,   500,     0,   501,   502,   503,     0,     0,   504,
       0,     0,     0,     0,   141,     0,   142,   143,   144,   145,
     146,     0,     0,   147,     0,     0,     0,   148,  4647,   792,
     149,     0,   150,   151,   152,   153,   154,   155,   156,   157,
       0,   158,     0,     0,     0,   159,     0,     0,     0,   160,
       0,     0,   161,   162,   163,     0,   164,     0,   165,   166,
       0,     0,   167,     0,     0,   168,   169,     0,   170,   171,
       0,   172,   173,     0,   174,   175,   176,   177,   178,   179,
     180,     0,   181,   182,   183,   184,   185,   186,   187,     0,
     188,   189,   190,   191,   192,   193,   194,   195,     0,   196,
     197,     0,   198,   199,   200,   201,   202,     0,   203,     0,
       0,   204,     0,     0,   205,     0,   206,     0,   207,     0,
     208,     0,     0,     0,   209,   210,   211,     0,     0,   212,
       0,     0,     0,     0,   213,   214,     0,     0,     0,     0,
     215,     0,   216,     0,     0,     0,   217,     0,   218,   219,
     220,   221,   222,     0,     0,     0,   223,     0,     0,   224,
     225,   226,     0,     0,     0,   227,     0,   228,   229,     0,
     230,   231,   232,     0,     0,   233,   234,     0,   235,   236,
     237,   238,   239,   240,   241,     0,     0,   242,   243,   244,
       0,     0,   245,   246,     0,   247,   248,   249,     0,     0,
     250,     0,     0,     0,   251,     0,   252,     0,   253,     0,
     254,   255,   256,   257,   258,     0,   259,     0,   260,     0,
       0,     0,   261,   262,   263,     0,   264,     0,     0,     0,
     265,   266,     0,     0,     0,   267,   268,   269,   270,     0,
       0,   271,   272,   273,     0,   274,     0,   275,     0,     0,
       0,     0,   276,   277,     0,     0,     0,   278,     0,   279,
     280,     0,   281,   282,     0,     0,     0,   283,     0,     0,
     284,   285,   286,     0,     0,   287,     0,     0,   288,   289,
       0,     0,     0,     0,     0,   290,   291,     0,   292,     0,
     293,     0,   294,   295,     0,     0,     0,     0,     0,     0,
       0,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,     0,   312,   313,
     314,   315,     0,   316,   317,   318,   319,     0,   320,   321,
       0,     0,     0,     0,   322,   323,   324,   325,   326,   327,
       0,     0,   328,   329,     0,   330,     0,   331,     0,   332,
     333,   334,   335,   336,   337,   338,   339,   340,     0,     0,
     341,   342,     0,     0,   343,   344,   345,   346,     0,     0,
       0,   347,   348,     0,     0,     0,   349,     0,   350,   351,
     352,     0,   353,   354,   355,   356,     0,   357,   358,     0,
       0,     0,     0,     0,     0,     0,     0,   359,   360,   361,
       0,     0,   362,     0,   363,     0,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,     0,     0,   374,   375,
     376,     0,   377,     0,   378,   379,   380,   381,   382,     0,
     383,   384,   385,     0,     0,   386,     0,     0,     0,   387,
     388,   389,   390,   391,     0,     0,   392,   393,   394,   395,
     396,     0,   397,   398,     0,   399,   400,   401,     0,     0,
     402,     0,   403,     0,   404,   405,     0,   406,   407,   408,
       0,     0,     0,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,     0,   420,   421,     0,     0,     0,
     422,   423,   424,   425,     0,     0,     0,   426,     0,     0,
       0,   427,     0,   428,   429,   430,   431,   432,   433,     0,
     434,   435,   436,   437,   438,   439,     0,     0,     0,     0,
       0,     0,   440,   441,     0,   442,     0,     0,   443,     0,
       0,   444,   445,     0,     0,     0,   446,     0,     0,   447,
     448,     0,   449,   450,   451,   452,   453,   454,     0,     0,
     455,   456,   457,   458,     0,   459,   460,     0,   461,     0,
     462,   463,   464,   465,     0,     0,   466,   467,     0,   468,
     469,   470,   471,     0,     0,     0,     0,     0,   472,   473,
     474,     0,     0,     0,   475,   476,   477,   478,     0,   479,
     480,     0,   481,   482,     0,   483,   484,     0,     0,   485,
       0,     0,   486,     0,   487,     0,   488,   489,   490,     0,
       0,     0,     0,     0,     0,   491,     0,     0,   492,     0,
       0,     0,   493,   494,   495,   496,   497,   498,     0,     0,
       0,     0,     0,     0,   499,   500,     0,   501,   502,   503,
       0,     0,   504,     0,     0,   141,     0,   142,   143,   144,
     145,   146,     0,     0,   147,     0,     0,     0,   148,     0,
       0,   149,   554,   150,   151,   152,   153,   154,   155,   156,
     157,     0,   158,     0,     0,     0,   159,     0,     0,     0,
     160,     0,     0,   161,   162,   163,     0,   164,     0,   165,
     166,     0,     0,   167,     0,     0,   168,   169,     0,   170,
     171,     0,   172,   173,     0,   174,   175,   176,   177,   178,
     179,   180,     0,   181,   182,   183,   184,   185,   186,   187,
       0,   188,   189,   190,   191,   192,   193,   194,   195,     0,
     196,   197,     0,   198,   199,   200,   201,   202,     0,   203,
       0,     0,   204,     0,     0,   205,     0,   206,     0,   207,
       0,   208,     0,     0,     0,   209,   210,   211,     0,     0,
     212,     0,     0,     0,     0,   213,   214,     0,     0,     0,
       0,   215,     0,   216,     0,     0,     0,   217,     0,   218,
     219,   220,   221,   222,     0,     0,     0,   223,     0,     0,
     224,   225,   226,     0,     0,     0,   227,     0,   228,   229,
       0,   230,   231,   232,     0,     0,   233,   234,     0,   235,
     236,   237,   238,   239,   240,   241,     0,     0,   242,   620,
     244,     0,     0,   245,   246,     0,   247,   248,   249,     0,
       0,   250,     0,     0,     0,   251,     0,   252,     0,   253,
       0,   254,   255,   256,   257,   258,     0,   259,     0,   260,
       0,     0,     0,   261,   262,   263,     0,   264,     0,     0,
       0,   265,   266,     0,     0,     0,   267,   268,   269,   270,
       0,     0,   271,   272,   273,     0,   274,     0,   275,     0,
       0,     0,     0,   276,   277,     0,     0,     0,   278,     0,
     279,   280,     0,   281,   282,     0,     0,     0,   283,     0,
       0,   284,   285,   286,     0,     0,   287,     0,     0,   288,
     289,     0,     0,     0,     0,     0,   290,   291,     0,   292,
       0,   293,     0,   294,   295,     0,     0,     0,     0,     0,
       0,     0,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,     0,   312,
     313,   314,   315,     0,   316,   317,   318,   319,     0,   320,
     321,     0,     0,     0,     0,   322,   323,   324,   325,   326,
     327,     0,     0,   328,   329,     0,   330,     0,   331,     0,
     332,   333,   334,   335,   336,   337,   338,   339,   340,     0,
       0,   341,   342,     0,     0,   343,   344,   345,   346,     0,
       0,     0,   347,   348,     0,     0,     0,   349,     0,   350,
     351,   352,     0,   353,   354,   355,   356,     0,   357,   358,
       0,     0,     0,     0,     0,     0,     0,     0,   359,   360,
     361,     0,     0,   362,     0,   363,     0,   621,   365,   366,
     367,   368,   369,   370,   371,   372,   373,     0,     0,   374,
     375,   376,     0,   377,     0,   378,   379,   380,   381,   382,
       0,   383,   384,   385,     0,     0,   386,     0,     0,     0,
     387,   388,   389,   390,   391,     0,     0,   392,   393,   394,
     395,   396,     0,   397,   398,     0,   399,   400,   401,     0,
       0,   402,     0,   403,     0,   404,   405,     0,   406,   407,
     408,     0,     0,     0,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,     0,   420,   421,     0,     0,
       0,   422,   423,   424,   425,     0,     0,     0,   426,     0,
       0,     0,   427,     0,   428,   429,   430,   431,   432,   433,
       0,   434,   435,   436,   437,   438,   439,     0,     0,     0,
       0,     0,     0,   440,   441,     0,   442,     0,     0,   443,
       0,     0,   444,   445,     0,     0,     0,   446,     0,     0,
     447,   448,     0,   449,   450,   451,   452,   453,   454,     0,
       0,   455,   456,   457,   458,     0,   459,   460,     0,   461,
       0,   462,   463,   464,   465,     0,     0,   466,   467,     0,
     468,   469,   470,   471,     0,     0,     0,     0,     0,   472,
     473,   474,     0,     0,     0,   475,   476,   477,   478,     0,
     479,   480,     0,   481,   482,     0,   483,   484,     0,     0,
     485,     0,     0,   486,     0,   487,     0,   488,   489,   490,
       0,     0,     0,     0,     0,     0,   491,     0,     0,   492,
       0,     0,     0,   493,   494,   495,   496,   497,   498,     0,
       0,     0,     0,     0,     0,   499,   500,     0,   501,   502,
     503,     0,     0,   504,     0,     0,   141,     0,   142,   143,
     144,   145,   146,     0,     0,   147,     0,     0,     0,   148,
       0,     0,   149,   554,   150,   151,   152,   153,   154,   155,
     156,   157,     0,   158,     0,     0,     0,   159,     0,     0,
       0,   160,     0,     0,   161,   162,   163,     0,   164,     0,
     165,   166,     0,     0,   167,     0,     0,   168,   169,     0,
     170,   171,     0,   172,   173,     0,   174,   175,   176,   177,
     178,   179,   180,     0,   181,   182,   183,   184,   185,   186,
     187,     0,   188,   189,   190,   191,   192,   193,   194,   195,
       0,   196,   197,     0,   198,   199,   200,   201,   202,     0,
     203,     0,     0,   204,     0,     0,   205,     0,   206,     0,
     207,     0,   208,     0,     0,     0,   209,   210,   211,     0,
       0,   212,     0,     0,     0,     0,   213,   214,     0,     0,
       0,     0,   215,     0,   216,     0,     0,     0,   217,     0,
     218,   219,   220,   221,   222,     0,     0,     0,   223,     0,
       0,   224,   225,   226,     0,     0,     0,   227,     0,   228,
     229,     0,   230,   231,   232,     0,     0,   233,   234,     0,
     235,   236,   237,   238,   239,   240,   241,     0,     0,   242,
     243,   244,     0,     0,   245,   246,     0,   247,   248,   249,
       0,     0,   250,     0,     0,     0,   251,     0,   252,     0,
     253,     0,   254,   255,   256,   257,   258,     0,   259,     0,
     260,     0,     0,     0,   261,   262,   263,     0,   264,     0,
       0,     0,   265,   266,     0,     0,     0,   267,   268,   269,
     270,     0,     0,   271,   272,   273,     0,   274,     0,   275,
       0,     0,     0,     0,   276,   277,     0,     0,     0,   278,
       0,   279,   280,     0,   281,   282,     0,     0,     0,   283,
       0,     0,   284,   285,   286,     0,     0,   287,     0,     0,
     288,   289,     0,     0,     0,     0,     0,   290,   291,     0,
     292,     0,   293,     0,   294,   295,     0,     0,     0,     0,
       0,     0,     0,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,     0,
     312,   313,   314,   315,     0,   316,   317,   318,   319,     0,
     320,   321,     0,     0,     0,     0,   322,   323,   324,   325,
     326,   327,     0,     0,   328,   329,     0,   330,     0,   331,
       0,   332,   333,   334,   335,   336,   337,   338,   339,   340,
       0,     0,   341,   342,     0,     0,   343,   344,   345,   346,
       0,     0,     0,   347,   348,     0,     0,     0,   349,     0,
     350,   351,   352,     0,   353,   354,   355,   356,     0,   357,
     358,     0,     0,     0,     0,     0,     0,     0,     0,   359,
     360,   361,     0,     0,   362,     0,   363,     0,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,     0,     0,
     374,   375,   376,     0,   377,     0,   378,   379,   380,   381,
     382,     0,   383,   384,   385,     0,     0,   386,     0,     0,
       0,   387,   388,   389,   390,   391,     0,     0,   392,   393,
     394,   395,   396,     0,   397,   398,     0,   399,   400,   401,
       0,     0,   402,     0,   403,     0,   404,   405,     0,   406,
     407,   408,     0,     0,     0,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,     0,   420,   421,     0,
       0,     0,   422,   423,   424,   425,     0,     0,     0,   426,
       0,     0,     0,   427,     0,   428,   429,   430,   431,   432,
     433,     0,   434,   435,   436,   437,   438,   439,     0,     0,
       0,     0,     0,     0,   440,   441,     0,   442,     0,     0,
     443,     0,     0,   444,   445,     0,     0,     0,   446,     0,
       0,   447,   448,     0,   449,   450,   451,   452,   453,   454,
       0,     0,   455,   456,   457,   458,     0,   459,   460,     0,
     461,     0,   462,   463,   464,   465,     0,     0,   466,   467,
       0,   468,   469,   470,   471,     0,     0,     0,     0,     0,
     472,   473,   474,     0,     0,     0,   475,   476,   477,   478,
       0,   479,   480,     0,   481,   482,     0,   483,   484,     0,
       0,   485,     0,     0,   486,     0,   487,     0,   488,   489,
     490,     0,     0,     0,     0,     0,     0,   491,     0,     0,
     492,     0,     0,     0,   493,   494,   495,   496,   497,   498,
       0,     0,     0,     0,     0,     0,   499,   500,     0,   501,
     502,   503,     0,     0,   504,     0,     0,   141,     0,   142,
     143,   144,   145,   146,     0,     0,   147,     0,     0,     0,
     148,     0,     0,   149,   792,   150,   151,   152,   153,   154,
     155,   156,   157,     0,   158,     0,     0,     0,   159,     0,
       0,     0,   160,     0,     0,   161,   162,   163,     0,   164,
       0,   165,   166,     0,     0,   167,     0,     0,   168,   169,
       0,   170,   171,     0,   172,   173,     0,   174,   175,   176,
     177,   178,   179,   180,     0,   181,   182,   183,   184,   185,
     186,   187,     0,   188,   189,   190,   191,   192,   193,   194,
     195,     0,   196,   197,     0,   198,   199,   200,   201,   202,
       0,   203,     0,     0,   204,     0,     0,   205,     0,   206,
       0,   207,     0,   208,     0,     0,     0,   209,   210,   211,
       0,     0,   212,     0,     0,     0,     0,   213,   214,     0,
       0,     0,     0,   215,     0,   216,     0,     0,     0,   217,
       0,   218,   219,   220,   221,   222,     0,     0,     0,   223,
       0,     0,   224,   225,   226,     0,     0,     0,   227,     0,
     228,   229,     0,   230,   231,   232,     0,     0,   233,   234,
       0,   235,   236,   237,   238,   239,   240,   241,     0,     0,
     242,   243,   244,     0,     0,   245,   246,     0,   247,   248,
     249,     0,     0,   250,     0,     0,     0,   251,     0,   252,
       0,   253,     0,   254,   255,   256,   257,   258,     0,   259,
       0,   260,     0,     0,     0,   261,   262,   263,     0,   264,
       0,     0,     0,   265,   266,     0,     0,     0,   267,   268,
     269,   270,     0,     0,   271,   272,   273,     0,   274,     0,
     275,     0,     0,     0,     0,   276,   277,     0,     0,     0,
     278,     0,   279,   280,     0,   281,   282,     0,     0,     0,
     283,     0,     0,   284,   285,   286,     0,     0,   287,     0,
       0,   288,   289,     0,     0,     0,     0,     0,   290,   291,
       0,   292,     0,   293,     0,   294,   295,     0,     0,     0,
       0,     0,     0,     0,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
       0,   312,   313,   314,   315,     0,   316,   317,   318,   319,
       0,   320,   321,     0,     0,     0,     0,   322,   323,   324,
     325,   326,   327,     0,     0,   328,   329,     0,   330,     0,
     331,     0,   332,   333,   334,   335,   336,   337,   338,   339,
     340,     0,     0,   341,   342,     0,     0,   343,   344,   345,
     346,     0,     0,     0,   347,   348,     0,     0,     0,   349,
       0,   350,   351,   352,     0,   353,   354,   355,   356,     0,
     357,   358,     0,     0,     0,     0,     0,     0,     0,     0,
     359,   360,   361,     0,     0,   362,     0,   363,     0,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,     0,
       0,   374,   375,   376,     0,   377,     0,   378,   379,   380,
     381,   382,     0,   383,   384,   385,     0,     0,   386,     0,
       0,     0,   387,   388,   389,   390,   391,     0,     0,   392,
     393,   394,   395,   396,     0,   397,   398,     0,   399,   400,
     401,     0,     0,   402,     0,   403,     0,   404,   405,     0,
     406,   407,   408,     0,     0,     0,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,     0,   420,   421,
       0,     0,     0,   422,   423,   424,   425,     0,     0,     0,
     426,     0,     0,     0,   427,     0,   428,   429,   430,   431,
     432,   433,     0,   434,   435,   436,   437,   438,   439,     0,
       0,     0,     0,     0,     0,   440,   441,     0,   442,     0,
       0,   443,     0,     0,   444,   445,     0,     0,     0,   446,
       0,     0,   447,   448,     0,   449,   450,   451,   452,   453,
     454,     0,     0,   455,   456,   457,   458,     0,   459,   460,
       0,   461,     0,   462,   463,   464,   465,     0,     0,   466,
     467,     0,   468,   469,   470,   471,     0,     0,     0,     0,
       0,   472,   473,   474,     0,     0,     0,   475,   476,   477,
     478,     0,   479,   480,     0,   481,   482,     0,   483,   484,
       0,     0,   485,     0,     0,   486,     0,   487,     0,   488,
     489,   490,     0,     0,     0,     0,     0,     0,   491,     0,
       0,   492,     0,     0,     0,   493,   494,   495,   496,   497,
     498,     0,     0,     0,     0,     0,     0,   499,   500,     0,
     501,   502,   503,     0,     0,   504,     0,     0,   141,     0,
     142,   143,   144,   145,   146,     0,     0,   147,     0,     0,
       0,   148,     0,     0,   149,  2980,   150,   151,   152,   153,
     154,   155,   156,   157,     0,   158,     0,     0,     0,   159,
       0,     0,     0,   160,     0,     0,   161,   162,   163,     0,
     164,     0,   165,   166,     0,     0,   167,     0,     0,   168,
     169,     0,   170,   926,   927,   172,   173,     0,   174,   175,
     176,   177,   178,   179,   180,     0,   181,   182,   183,   184,
     185,   186,   187,     0,   188,   189,   190,   191,   192,   193,
     194,   195,     0,   196,   197,     0,   198,   199,   200,   201,
     202,     0,   203,     0,     0,   204,     0,     0,   205,     0,
     206,     0,   207,     0,   208,     0,     0,     0,   209,   210,
     211,     0,     0,   212,     0,     0,     0,     0,   213,   214,
       0,     0,     0,   928,   215,     0,   216,     0,     0,     0,
     217,     0,   218,   219,   220,   221,   222,     0,     0,     0,
     223,     0,     0,   224,   225,   226,     0,     0,     0,   227,
       0,   228,   229,     0,   230,   231,   232,     0,     0,   233,
     234,     0,   235,   236,   237,   238,   239,   240,   241,     0,
       0,   242,   243,   244,     0,     0,   245,   246,     0,   247,
     248,   249,     0,     0,   250,     0,     0,     0,   251,     0,
     252,     0,   253,     0,   254,   255,   256,   257,   258,     0,
     929,     0,   260,     0,     0,     0,   261,   262,   263,     0,
     264,     0,     0,     0,   265,   266,     0,     0,     0,   267,
     268,   269,   270,     0,     0,   271,   272,   273,     0,   274,
       0,   275,     0,     0,     0,     0,   276,   277,     0,     0,
       0,   278,     0,   279,   280,     0,   281,   282,     0,     0,
       0,   283,     0,     0,   284,   285,   286,     0,     0,   287,
       0,     0,   288,   289,     0,     0,     0,     0,     0,   290,
     291,     0,   930,     0,   293,     0,   294,   295,     0,     0,
       0,     0,     0,     0,     0,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,     0,   312,   313,   314,   315,     0,   316,   317,   318,
     319,     0,   320,   321,     0,     0,     0,     0,   322,   323,
     324,   325,   326,   327,     0,     0,   328,   329,     0,   330,
       0,   331,     0,   332,   333,   334,   335,   336,   337,   931,
     339,   340,     0,     0,   341,   342,     0,     0,   343,   344,
     345,   346,     0,     0,     0,   347,   348,     0,     0,     0,
     349,     0,   350,   351,   352,     0,   353,   354,   355,   356,
       0,   357,   358,     0,     0,     0,     0,     0,     0,     0,
       0,   359,   360,   361,     0,     0,   362,     0,   363,     0,
     364,   365,   932,   367,   368,   369,   370,   371,   372,   373,
       0,     0,   374,   375,   376,     0,   377,     0,   378,   379,
     380,   381,   382,     0,   383,   384,   385,     0,     0,   386,
       0,     0,     0,   387,   388,   389,   390,   391,     0,     0,
     392,   393,   394,   395,   396,     0,   397,   398,     0,   399,
     400,   401,     0,     0,   402,     0,   403,     0,   404,   405,
       0,   406,   407,   408,     0,     0,     0,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,     0,   420,
     421,     0,     0,     0,   422,   423,   933,   425,     0,     0,
       0,   426,     0,     0,     0,   427,     0,   428,   429,   430,
     431,   432,   433,     0,   434,   435,   436,   437,   438,   439,
       0,     0,     0,     0,     0,     0,   440,   441,     0,   442,
       0,     0,   443,     0,     0,   444,   445,     0,     0,     0,
     446,     0,     0,   447,   448,     0,   449,   450,   451,   452,
     453,   454,     0,     0,   455,   456,   457,   458,     0,   459,
     460,     0,   461,     0,   462,   463,   464,   465,     0,     0,
     466,   467,     0,   468,   469,   470,   471,     0,     0,     0,
       0,     0,   934,   473,   474,     0,     0,     0,   475,   476,
     477,   478,     0,   479,   480,     0,   481,   482,     0,   483,
     484,     0,     0,   485,     0,     0,   486,     0,   487,     0,
     488,   489,   490,     0,     0,     0,     0,     0,     0,   491,
       0,     0,   492,     0,     0,     0,   493,   494,   495,   496,
     497,   498,     0,     0,     0,     0,     0,     0,   499,   500,
       0,   501,   502,   503,     0,     0,   504,     0,   141,     0,
     142,   143,   144,   145,   146,     0,     0,   147,     0,     0,
       0,   148,     0,     0,   149,   935,   150,   151,   152,   153,
     154,   155,   156,   157,     0,   158,     0,     0,     0,   159,
       0,     0,     0,   160,     0,     0,   161,   162,   163,     0,
     164,     0,   165,   166,     0,     0,   167,     0,     0,   168,
     169,     0,   170,   171,     0,   172,   173,     0,   174,   175,
     176,   177,   178,   179,   180,     0,   181,   182,   183,   184,
     185,   186,   187,     0,   188,   189,   190,   191,   192,   193,
     194,   195,     0,   196,   197,     0,   198,   199,   200,   201,
     202,     0,   203,     0,     0,   204,     0,     0,   205,     0,
     206,     0,   207,     0,   208,     0,     0,     0,   209,   210,
     211,     0,     0,   212,     0,     0,     0,     0,   213,   214,
       0,     0,     0,     0,   215,     0,   216,     0,     0,     0,
     217,     0,   218,   219,   220,   221,   222,     0,     0,     0,
     223,     0,     0,   224,   225,   226,     0,     0,     0,   227,
       0,   228,   229,     0,   230,   231,   232,     0,     0,   233,
     234,     0,   235,   236,   237,   238,   239,   240,   241,     0,
       0,   242,   243,   244,     0,     0,   245,   246,     0,   247,
     248,   249,     0,     0,   250,     0,     0,     0,   251,     0,
     252,     0,   253,     0,   254,   255,   256,   257,   258,     0,
     259,     0,   260,     0,     0,     0,   261,   262,   263,     0,
     264,     0,     0,     0,   265,   266,     0,     0,     0,   267,
     268,   269,   270,     0,     0,   271,   272,   273,     0,   274,
       0,   275,     0,     0,     0,     0,   276,   277,     0,     0,
       0,   278,     0,   279,   280,     0,   281,   282,     0,     0,
       0,   283,     0,     0,   284,   285,   286,     0,     0,   287,
       0,     0,   288,   289,   632,     0,     0,     0,     0,   290,
     291,     0,   292,     0,   293,     0,   294,   295,     0,     0,
       0,     0,     0,     0,     0,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,     0,   312,   313,   314,   315,     0,   316,   317,   318,
     319,     0,   320,   321,     0,     0,     0,     0,   322,   323,
     324,   325,   326,   327,     0,     0,   328,   329,     0,   330,
       0,   331,     0,   332,   333,   334,   335,   336,   337,   338,
     339,   340,     0,     0,   341,   342,     0,     0,   343,   344,
     345,   346,     0,     0,     0,   347,   348,     0,     0,     0,
     349,     0,   350,   351,   352,     0,   353,   354,   355,   356,
       0,   357,   358,     0,     0,     0,     0,     0,     0,     0,
       0,   359,   360,   361,     0,     0,   362,     0,   363,     0,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
       0,     0,   374,   375,   376,     0,   377,     0,   378,   379,
     380,   381,   382,     0,   383,   384,   385,     0,     0,   386,
       0,     0,     0,   387,   388,   389,   390,   391,     0,     0,
     392,   393,   394,   395,   396,     0,   397,   398,     0,   399,
     400,   401,     0,     0,   402,     0,   403,     0,   404,   405,
       0,   406,   407,   408,     0,     0,     0,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,     0,   420,
     421,     0,     0,     0,   422,   423,   424,   425,     0,     0,
       0,   426,     0,     0,     0,   427,     0,   428,   429,   430,
     431,   432,   433,     0,   434,   435,   436,   437,   438,   439,
       0,     0,     0,     0,     0,     0,   440,   441,     0,   442,
       0,     0,   443,     0,     0,   444,   445,     0,     0,     0,
     446,     0,     0,   447,   448,     0,   449,   450,   451,   452,
     453,   454,     0,     0,   455,   456,   457,   458,     0,   459,
     460,     0,   461,     0,   462,   463,   464,   465,     0,   138,
     466,   467,     0,   468,   469,   470,   471,     0,     0,     0,
       0,     0,   472,   473,   474,     0,     0,     0,   475,   476,
     477,   478,     0,   479,   480,     0,   481,   482,     0,   483,
     484,     0,     0,   485,     0,     0,   486,     0,   487,     0,
     488,   489,   490,     0,     0,     0,     0,     0,     0,   491,
       0,     0,   492,     0,     0,     0,   493,   494,   495,   496,
     497,   498,     0,     0,     0,     0,     0,     0,   499,   500,
       0,   501,   502,   503,     0,     0,   504,     0,   141,     0,
     142,   143,   144,   145,   146,     0,     0,   147,     0,     0,
       0,   148,     0,     0,   149,  1421,   150,   151,   152,   153,
     154,   155,   156,   157,     0,   158,     0,     0,     0,   159,
       0,     0,     0,   160,     0,     0,   161,   162,   163,     0,
     164,     0,   165,   166,     0,     0,   167,     0,     0,   168,
     169,     0,   170,   171,     0,   172,   173,     0,   174,   175,
     176,   177,   178,   179,   180,     0,   181,   182,   183,   184,
     185,   186,   187,     0,   188,   189,   190,   191,   192,   193,
     194,   195,     0,   196,   197,     0,   198,   199,   200,   201,
     202,     0,   203,     0,     0,   204,     0,     0,   205,     0,
     206,     0,   207,     0,   208,     0,     0,     0,   209,   210,
     211,     0,     0,   212,     0,     0,     0,     0,   213,   214,
       0,     0,     0,     0,   215,     0,   216,     0,     0,     0,
     217,     0,   218,   219,   220,   221,   222,     0,     0,     0,
     223,     0,     0,   224,   225,   226,     0,     0,     0,   227,
       0,   228,   229,     0,   230,   231,   232,     0,     0,   233,
     234,     0,   235,   236,   237,   238,   239,   240,   241,     0,
       0,   242,   243,   244,     0,     0,   245,   246,     0,   247,
     248,   249,     0,     0,   250,     0,     0,     0,   251,     0,
     252,     0,   253,     0,   254,   255,   256,   257,   258,     0,
     259,     0,   260,     0,     0,     0,   261,   262,   263,     0,
     264,     0,     0,     0,   265,   266,     0,     0,     0,   267,
     268,   269,   270,     0,     0,   271,   272,   273,     0,   274,
       0,   275,     0,     0,     0,     0,   276,   277,     0,     0,
       0,   278,     0,   279,   280,     0,   281,   282,     0,     0,
       0,   283,     0,     0,   284,   285,   286,     0,     0,   287,
       0,     0,   288,   289,   632,     0,     0,     0,     0,   290,
     291,     0,   292,     0,   293,     0,   294,   295,     0,     0,
       0,     0,     0,     0,     0,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,     0,   312,   313,   314,   315,     0,   316,   317,   318,
     319,     0,   320,   321,     0,     0,     0,     0,   322,   323,
     324,   325,   326,   327,     0,     0,   328,   329,     0,   330,
       0,   331,     0,   332,   333,   334,   335,   336,   337,   338,
     339,   340,     0,     0,   341,   342,     0,     0,   343,   344,
     345,   346,     0,     0,     0,   347,   348,     0,     0,     0,
     349,     0,   350,   351,   352,     0,   353,   354,   355,   356,
       0,   357,   358,     0,     0,     0,     0,     0,     0,     0,
       0,   359,   360,   361,     0,     0,   362,     0,   363,     0,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
       0,     0,   374,   375,   376,     0,   377,     0,   378,   379,
     380,   381,   382,     0,   383,   384,   385,     0,     0,   386,
       0,     0,     0,   387,   388,   389,   390,   391,     0,     0,
     392,   393,   394,   395,   396,     0,   397,   398,     0,   399,
     400,   401,     0,     0,   402,     0,   403,     0,   404,   405,
       0,   406,   407,   408,     0,     0,     0,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,     0,   420,
     421,     0,     0,     0,   422,   423,   424,   425,     0,     0,
       0,   426,     0,     0,     0,   427,     0,   428,   429,   430,
     431,   432,   433,     0,   434,   435,   436,   437,   438,   439,
       0,     0,     0,     0,     0,     0,   440,   441,     0,   442,
       0,     0,   443,     0,     0,   444,   445,     0,     0,     0,
     446,     0,     0,   447,   448,     0,   449,   450,   451,   452,
     453,   454,     0,     0,   455,   456,   457,   458,     0,   459,
     460,     0,   461,     0,   462,   463,   464,   465,     0,   138,
     466,   467,     0,   468,   469,   470,   471,     0,     0,     0,
       0,     0,   472,   473,   474,     0,     0,     0,   475,   476,
     477,   478,     0,   479,   480,     0,   481,   482,     0,   483,
     484,     0,     0,   485,     0,     0,   486,     0,   487,     0,
     488,   489,   490,     0,     0,     0,     0,     0,     0,   491,
       0,     0,   492,     0,     0,     0,   493,   494,   495,   496,
     497,   498,     0,     0,     0,     0,     0,     0,   499,   500,
       0,   501,   502,   503,     0,     0,   504,     0,   141,     0,
     142,   143,   144,   145,   146,     0,     0,   147,     0,     0,
       0,   148,     0,     0,   149,  1745,   150,   151,   152,   153,
     154,   155,   156,   157,     0,   158,     0,     0,     0,   159,
       0,     0,     0,   160,     0,     0,   161,   162,   163,     0,
     164,     0,   165,   166,     0,     0,   167,     0,     0,   168,
     169,     0,   170,   926,   927,   172,   173,     0,   174,   175,
     176,   177,   178,   179,   180,     0,   181,   182,   183,   184,
     185,   186,   187,     0,   188,   189,   190,   191,   192,   193,
     194,   195,     0,   196,   197,     0,   198,   199,   200,   201,
     202,     0,   203,     0,     0,   204,     0,     0,   205,     0,
     206,     0,   207,     0,   208,     0,     0,     0,   209,   210,
     211,     0,     0,   212,     0,     0,     0,     0,   213,   214,
       0,     0,     0,   928,   215,     0,   216,     0,     0,     0,
     217,     0,   218,   219,   220,   221,   222,     0,     0,     0,
     223,     0,     0,   224,   225,   226,     0,     0,     0,   227,
       0,   228,   229,     0,   230,   231,   232,     0,     0,   233,
     234,     0,   235,   236,   237,   238,   239,   240,   241,     0,
       0,   242,   243,   244,     0,     0,   245,   246,     0,   247,
     248,   249,     0,     0,   250,     0,     0,     0,   251,     0,
     252,     0,   253,     0,   254,   255,   256,   257,   258,     0,
     929,     0,   260,     0,     0,     0,   261,   262,   263,     0,
     264,     0,     0,     0,   265,   266,     0,     0,     0,   267,
     268,   269,   270,     0,     0,   271,   272,   273,     0,   274,
       0,   275,     0,     0,     0,     0,   276,   277,     0,     0,
       0,   278,     0,   279,   280,     0,   281,   282,     0,     0,
       0,   283,     0,     0,   284,   285,   286,     0,     0,   287,
       0,     0,   288,   289,     0,     0,     0,     0,     0,   290,
     291,     0,   930,     0,   293,     0,   294,   295,     0,     0,
       0,     0,     0,     0,     0,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,     0,   312,   313,   314,   315,     0,   316,   317,   318,
     319,     0,   320,   321,     0,     0,     0,     0,   322,   323,
     324,   325,   326,   327,     0,     0,   328,   329,     0,   330,
       0,   331,     0,   332,   333,   334,   335,   336,   337,   931,
     339,   340,     0,     0,   341,   342,     0,     0,   343,   344,
     345,   346,     0,     0,     0,   347,   348,     0,     0,     0,
     349,     0,   350,   351,   352,     0,   353,   354,   355,   356,
       0,   357,   358,     0,     0,     0,     0,     0,     0,     0,
       0,   359,   360,   361,     0,     0,   362,     0,   363,     0,
     364,   365,   932,   367,   368,   369,   370,   371,   372,   373,
       0,     0,   374,   375,   376,     0,   377,     0,   378,   379,
     380,   381,   382,     0,   383,   384,   385,     0,     0,   386,
       0,     0,     0,   387,   388,   389,   390,   391,     0,     0,
     392,   393,   394,   395,   396,     0,   397,   398,     0,   399,
     400,   401,     0,     0,   402,     0,   403,     0,   404,   405,
       0,   406,   407,   408,     0,     0,     0,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,     0,   420,
     421,     0,     0,     0,   422,   423,   933,   425,     0,     0,
       0,   426,     0,     0,     0,   427,     0,   428,   429,   430,
     431,   432,   433,     0,   434,   435,   436,   437,   438,   439,
       0,     0,     0,     0,     0,     0,   440,   441,     0,   442,
       0,     0,   443,     0,     0,   444,   445,     0,     0,     0,
     446,     0,     0,   447,   448,     0,   449,   450,   451,   452,
     453,   454,     0,     0,   455,   456,   457,   458,     0,   459,
     460,     0,   461,     0,   462,   463,   464,   465,     0,     0,
     466,   467,     0,   468,   469,   470,   471,     0,     0,     0,
       0,     0,   472,   473,   474,     0,     0,     0,   475,   476,
     477,   478,     0,   479,   480,     0,   481,   482,     0,   483,
     484,     0,     0,   485,     0,     0,   486,     0,   487,     0,
     488,   489,   490,     0,     0,     0,     0,     0,     0,   491,
       0,     0,   492,     0,     0,     0,   493,   494,   495,   496,
     497,   498,     0,     0,     0,     0,     0,     0,   499,   500,
       0,   501,   502,   503,     0,     0,   504,     0,   141,     0,
     142,   143,   144,   145,   146,     0,     0,   147,     0,     0,
       0,   148,     0,     0,   149,   935,   150,   151,   152,   153,
     154,   155,   156,   157,     0,   158,     0,     0,     0,   159,
       0,     0,     0,   160,     0,     0,   161,   162,   163,     0,
     164,     0,   165,   166,     0,     0,   167,     0,     0,   168,
     169,     0,   170,   171,     0,   172,   173,     0,   174,   175,
     176,   177,   178,   179,   180,     0,   181,   182,   183,   184,
     185,   186,   187,     0,   188,   189,   190,   191,   192,   193,
     194,   195,     0,   196,   197,     0,   198,   199,   200,   201,
     202,     0,   203,     0,     0,   204,     0,     0,   205,     0,
     206,     0,   207,     0,   208,     0,     0,     0,   209,   210,
     211,     0,     0,   212,     0,     0,     0,     0,   213,   214,
       0,     0,     0,     0,   215,     0,   216,     0,     0,     0,
     217,     0,   218,   219,   220,   221,   222,     0,     0,     0,
     223,     0,     0,   224,   225,   226,     0,     0,     0,   227,
       0,   228,   229,     0,   230,   231,   232,     0,     0,   233,
     234,     0,   235,   236,   237,   238,   239,   240,   241,     0,
       0,   242,   243,   244,     0,     0,   245,   246,     0,   247,
     248,   249,     0,     0,   250,     0,     0,     0,   251,     0,
     252,     0,   253,     0,   254,   255,   256,   257,   258,     0,
     259,     0,   260,     0,     0,     0,   261,   262,   263,     0,
     264,     0,     0,     0,   265,   266,     0,     0,     0,   267,
     268,   269,   270,     0,     0,   271,   272,   273,     0,   274,
       0,   275,     0,     0,     0,     0,   276,   277,     0,     0,
       0,   278,     0,   279,   280,     0,   281,   282,     0,     0,
       0,   283,     0,     0,   284,   285,   286,     0,     0,   287,
       0,     0,   288,   289,   632,     0,     0,     0,     0,   290,
     291,     0,   292,     0,   293,     0,   294,   295,     0,     0,
       0,     0,     0,     0,     0,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,     0,   312,   313,   314,   315,     0,   316,   317,   318,
     319,     0,   320,   321,     0,     0,     0,     0,   322,   323,
     324,   325,   326,   327,     0,     0,   328,   329,     0,   330,
       0,   331,     0,   332,   333,   334,   335,   336,   337,   338,
     339,   340,     0,     0,   341,   342,     0,     0,   343,   344,
     345,   346,     0,     0,     0,   347,   348,     0,     0,     0,
     349,     0,   350,   351,   352,     0,   353,   354,   355,   356,
       0,   357,   358,     0,     0,     0,     0,     0,     0,     0,
       0,   359,   360,   361,     0,     0,   362,     0,   363,     0,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
       0,     0,   374,   375,   376,     0,   377,     0,   378,   379,
     380,   381,   382,     0,   383,   384,   385,     0,     0,   386,
       0,     0,     0,   387,   388,   389,   390,   391,     0,     0,
     392,   393,   394,   395,   396,     0,   397,   398,     0,   399,
     400,   401,     0,     0,   402,     0,   403,     0,   404,   405,
       0,   406,   407,   408,     0,     0,     0,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,     0,   420,
     421,     0,     0,     0,   422,   423,   424,   425,     0,     0,
       0,   426,     0,     0,     0,   427,     0,   428,   429,   430,
     431,   432,   433,     0,   434,   435,   436,   437,   438,   439,
       0,     0,     0,     0,     0,     0,   440,   441,     0,   442,
       0,     0,   443,     0,     0,   444,   445,     0,     0,     0,
     446,     0,     0,   447,   448,     0,   449,   450,   451,   452,
     453,   454,     0,     0,   455,   456,   457,   458,     0,   459,
     460,     0,   461,     0,   462,   463,   464,   465,     0,   138,
     466,   467,     0,   468,   469,   470,   471,     0,     0,     0,
       0,     0,   472,   473,   474,     0,     0,     0,   475,   476,
     477,   478,     0,   479,   480,     0,   481,   482,     0,   483,
     484,     0,     0,   485,     0,     0,   486,     0,   487,     0,
     488,   489,   490,     0,     0,     0,     0,     0,     0,   491,
       0,     0,   492,     0,     0,     0,   493,   494,   495,   496,
     497,   498,     0,     0,     0,     0,     0,     0,   499,   500,
       0,   501,   502,   503,     0,     0,   504,     0,   141,     0,
     142,   143,   144,   145,   146,     0,     0,   147,     0,     0,
       0,   148,     0,     0,   149,  3536,   150,   151,   152,   153,
     154,   155,   156,   157,     0,   158,     0,     0,     0,   159,
       0,     0,     0,   160,     0,     0,   161,   162,   163,     0,
     164,     0,   165,   166,     0,     0,   167,     0,     0,   168,
     169,     0,   170,   171,     0,   172,   173,     0,   174,   175,
     176,   177,   178,   179,   180,     0,   181,   182,   183,   184,
     185,   186,   187,     0,   188,   189,   190,   191,   192,   193,
     194,   195,  1306,   196,   197,     0,   198,   199,   200,   201,
     202,     0,   203,     0,     0,   204,     0,     0,   205,     0,
     206,     0,   207,     0,   208,     0,     0,     0,   209,   210,
     211,     0,     0,   212,     0,     0,     0,     0,   213,   214,
       0,     0,     0,     0,   215,     0,   216,     0,     0,     0,
     217,     0,   218,   219,   220,   221,   222,     0,     0,     0,
     223,     0,     0,   224,   225,   226,     0,     0,     0,   227,
       0,   228,   229,     0,   230,   231,   232,     0,     0,   233,
     234,     0,   235,   236,   237,   238,   239,   240,   241,     0,
       0,   242,   243,   244,     0,     0,   245,   246,     0,   247,
     248,   249,     0,     0,   250,     0,     0,     0,   251,     0,
     252,     0,   253,     0,   254,   255,   256,   257,   258,     0,
     259,     0,   260,     0,     0,     0,   261,   262,   263,     0,
     264,     0,     0,     0,   265,   266,     0,     0,     0,   267,
     268,   269,   270,     0,     0,   271,   272,   273,     0,   274,
       0,   275,     0,     0,     0,     0,   276,   277,     0,     0,
       0,   278,     0,   279,   280,     0,   281,   282,     0,     0,
       0,   283,     0,     0,   284,   285,   286,     0,     0,   287,
       0,     0,   288,   289,     0,     0,     0,     0,     0,   290,
     291,     0,   292,     0,   293,     0,   294,   295,     0,     0,
       0,     0,     0,     0,     0,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,     0,   312,   313,   314,   315,     0,   316,   317,   318,
     319,     0,   320,   321,     0,     0,     0,     0,   322,   323,
     324,   325,   326,   327,     0,     0,   328,   329,     0,   330,
       0,   331,     0,   332,   333,   334,   335,   336,   337,   338,
     339,   340,     0,     0,   341,   342,     0,     0,   343,   344,
     345,   346,     0,     0,     0,   347,   348,     0,     0,     0,
     349,     0,   350,   351,   352,     0,   353,   354,   355,   356,
       0,   357,   358,     0,     0,     0,     0,     0,     0,     0,
       0,   359,   360,   361,     0,     0,   362,     0,   363,     0,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
       0,     0,   374,   375,   376,     0,   377,     0,   378,   379,
     380,   381,   382,     0,   383,   384,   385,     0,     0,   386,
       0,     0,     0,   387,   388,   389,   390,   391,     0,     0,
     392,   393,   394,   395,   396,     0,   397,   398,     0,   399,
     400,   401,     0,     0,   402,     0,   403,     0,   404,   405,
       0,   406,   407,   408,     0,     0,     0,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,     0,   420,
     421,     0,     0,     0,   422,   423,   424,   425,     0,     0,
       0,   426,     0,     0,     0,   427,     0,   428,   429,   430,
     431,   432,   433,     0,   434,   435,   436,   437,   438,   439,
       0,     0,     0,     0,     0,     0,   440,   441,     0,   442,
       0,     0,   443,     0,     0,   444,   445,     0,     0,     0,
     446,     0,     0,   447,   448,     0,   449,   450,   451,   452,
     453,   454,     0,     0,   455,   456,   457,   458,     0,   459,
     460,     0,   461,     0,   462,   463,   464,   465,     0,     0,
     466,   467,     0,   468,   469,   470,   471,     0,     0,     0,
       0,     0,   472,   473,   474,     0,     0,     0,   475,   476,
     477,   478,     0,   479,   480,     0,   481,   482,     0,   483,
     484,     0,     0,   485,     0,     0,   486,     0,   487,     0,
     488,   489,   490,     0,     0,     0,     0,     0,     0,   491,
       0,     0,   492,     0,     0,     0,   493,   494,   495,   496,
     497,   498,     0,     0,     0,     0,     0,     0,   499,   500,
       0,   501,   502,   503,     0,     0,   504,     0,   141,     0,
     142,   143,   144,   145,   146,     0,     0,   147,     0,     0,
       0,   148,     0,     0,   149,  1307,   150,   151,   152,   153,
     154,   155,   156,   157,     0,   158,     0,     0,     0,   159,
       0,     0,     0,   160,     0,     0,   161,   162,   163,     0,
     164,     0,   165,   166,     0,     0,   167,     0,     0,   168,
     169,     0,   170,   171,     0,   172,   173,     0,   174,   175,
     176,   177,   178,   179,   180,     0,   181,   182,   183,   184,
     185,   186,   187,     0,   188,   189,   190,   191,   192,   193,
     194,   195,     0,   196,   197,     0,   198,   199,   200,   201,
     202,     0,   203,     0,     0,   204,     0,     0,   205,     0,
     206,     0,   207,     0,   208,     0,     0,     0,   209,   210,
     211,     0,     0,   212,     0,     0,     0,     0,   213,   214,
       0,     0,     0,     0,   215,     0,   216,     0,     0,     0,
     217,     0,   218,   219,   220,   221,   222,     0,     0,     0,
     223,     0,     0,   224,   225,   226,     0,     0,     0,   227,
       0,   228,   229,     0,   230,   231,   232,     0,     0,   233,
     234,     0,   235,   236,   237,   238,   239,   240,   241,     0,
       0,   242,   243,   244,     0,     0,   245,   246,     0,   247,
     248,   249,     0,     0,   250,     0,     0,     0,   251,     0,
     252,     0,   253,     0,   254,   255,   256,   257,   258,     0,
     259,     0,   260,     0,     0,     0,   261,   262,   263,     0,
     264,     0,     0,     0,   265,   266,     0,     0,     0,   267,
     268,   269,   270,     0,     0,   271,   272,   273,     0,   274,
       0,   275,     0,     0,     0,     0,   276,   277,     0,     0,
       0,   278,     0,   279,   280,     0,   281,   282,     0,     0,
       0,   283,     0,     0,   284,   285,   286,     0,     0,   287,
       0,     0,   288,   289,     0,     0,     0,     0,     0,   290,
     291,     0,   292,     0,   293,     0,   294,   295,     0,     0,
       0,     0,     0,     0,     0,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,     0,   312,   313,   314,   315,     0,   316,   317,   318,
     319,     0,   320,   321,     0,     0,     0,     0,   322,   323,
     324,   325,   326,   327,     0,     0,   328,   329,     0,   330,
       0,   331,     0,   332,   333,   334,   335,   336,   337,   338,
     339,   340,     0,     0,   341,   342,     0,     0,   343,   344,
     345,   346,     0,     0,     0,   347,   348,     0,     0,     0,
     349,     0,   350,   351,   352,     0,   353,   354,   355,   356,
       0,   357,   358,     0,     0,     0,     0,     0,     0,     0,
       0,   359,   360,   361,     0,     0,   362,     0,   363,     0,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
       0,     0,   374,   375,   376,     0,   377,     0,   378,   379,
     380,   381,   382,     0,   383,   384,   385,     0,     0,   386,
       0,     0,     0,   387,   388,   389,   390,   391,     0,     0,
     392,   393,   394,   395,   396,     0,   397,   398,     0,   399,
     400,   401,     0,     0,   402,     0,   403,     0,   404,   405,
       0,   406,   407,   408,     0,     0,     0,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,     0,   420,
     421,     0,     0,     0,   422,   423,   424,   425,     0,     0,
       0,   426,     0,     0,     0,   427,     0,   428,   429,   430,
     431,   432,   433,     0,   434,   435,   436,   437,   438,   439,
       0,     0,     0,     0,     0,     0,   440,   441,     0,   442,
       0,     0,   443,     0,     0,   444,   445,     0,     0,     0,
     446,     0,     0,   447,   448,     0,   449,   450,   451,   452,
     453,   454,     0,     0,   455,   456,   457,   458,     0,   459,
     460,     0,   461,     0,   462,   463,   464,   465,     0,     0,
     466,   467,     0,   468,   469,   470,   471,     0,     0,     0,
       0,     0,   472,   473,   474,     0,     0,     0,   475,   476,
     477,   478,     0,   479,   480,     0,   481,   482,     0,   483,
     484,     0,     0,   485,     0,     0,   486,     0,   487,     0,
     488,   489,   490,     0,     0,     0,     0,     0,     0,   491,
       0,     0,   492,     0,     0,     0,   493,   494,   495,   496,
     497,   498,     0,     0,     0,     0,     0,     0,   499,   500,
       0,   501,   502,   503,     0,     0,   504,     0,   141,     0,
     142,   143,   144,   145,   146,     0,     0,   147,     0,     0,
       0,   148,     0,     0,     0,  1307,   150,   151,   152,   153,
     154,   155,   156,     0,     0,  -371,     0,     0,     0,   159,
       0,     0,     0,   160,     0,     0,   161,   162,   163,     0,
     164,     0,     0,     0,     0,     0,   167,  4031,     0,   168,
     169,     0,   170,     0,     0,     0,     0,     0,   174,   175,
     176,   177,  4032,   179,   180,     0,   181,   182,     0,     0,
       0,     0,     0,     0,   188,     0,   190,     0,   192,   193,
     194,   195,     0,   196,   197,     0,   198,   199,   200,     0,
     202,     0,   203,     0,     0,   204,     0,     0,   205,     0,
     206,     0,   207,     0,   208,     0,     0,     0,   209,   210,
     211,     0,     0,   212,     0,     0,     0,     0,   213,     0,
       0,     0,     0,     0,   215,     0,   216,     0,     0,     0,
     217,     0,   218,   219,   220,   221,   222,     0,     0,     0,
       0,     0,     0,   224,   225,   226,     0,     0,     0,   227,
       0,     0,   229,     0,   230,   231,   232,     0,     0,   233,
     234,     0,   235,   236,   237,   238,   239,     0,     0,     0,
       0,   242,   243,   244,     0,     0,   245,   246,  4033,   247,
     248,   249,     0,     0,     0,     0,     0,     0,   251,     0,
     252,     0,   253,     0,   254,   255,   256,   257,   258,     0,
     259,     0,   260,     0,     0,     0,     0,   262,   263,     0,
       0,     0,     0,     0,     0,   266,     0,     0,     0,   267,
     268,   269,   270,  4034,     0,   271,   272,   273,     0,   274,
       0,   275,     0,     0,     0,     0,   276,     0,     0,     0,
       0,   278,     0,   279,   280,     0,   281,   282,  4035,     0,
       0,   283,     0,     0,     0,   285,   286,     0,     0,   287,
    4036,     0,   288,   289,     0,     0,     0,     0,     0,   290,
     291,     0,   292,     0,   293,     0,   294,   295,     0,     0,
       0,     0,  -326,     0,     0,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,     0,   312,   313,   314,   315,     0,   316,   317,   318,
     319,     0,   320,   321,     0,     0,     0,     0,   322,   323,
     324,   325,   326,   327,     0,     0,   328,   329,     0,   330,
       0,   331,     0,   332,   333,   334,   335,   336,   337,   338,
     339,   340,     0,     0,   341,   342,     0,     0,   343,   344,
     345,   346,     0,     0,     0,     0,   348,     0,     0,     0,
     349,     0,   350,   351,   352,     0,   353,   354,   355,  4037,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   360,   361,     0,     0,     0,     0,   363,     0,
     364,   365,   366,   367,   368,   369,   370,   371,   372,     0,
       0,     0,     0,   375,   376,     0,   377,     0,   378,   379,
     380,   381,   382,     0,   383,   384,   385,     0,     0,   386,
       0,     0,     0,   387,   388,   389,   390,   391,     0,     0,
     392,   393,   394,   395,   396,     0,   397,     0,     0,   399,
       0,   401,  -326,     0,   402,     0,     0,     0,   404,     0,
       0,   406,   407,   408,  4038,     0,     0,     0,   410,   411,
     412,   413,   414,   415,   416,     0,   418,   419,     0,   420,
       0,     0,     0,     0,   422,   423,   424,     0,     0,     0,
       0,   426,     0,     0,     0,   427,     0,     0,   429,     0,
       0,   432,   433,     0,   434,     0,   436,     0,   438,   439,
       0,     0,     0,     0,     0,     0,   440,   441,     0,   442,
       0,     0,   443,     0,     0,   444,     0,     0,     0,     0,
     446,     0,     0,     0,   448,     0,   449,   450,   451,   452,
     453,   454,     0,     0,   455,   456,   457,   458,     0,   459,
     460,     0,   461,     0,   462,   463,   464,   465,     0,     0,
     466,   467,     0,   468,   469,   470,   471,     0,     0,     0,
       0,     0,   472,   473,   474,     0,     0,     0,     0,   476,
     477,   478,     0,   479,   480,     0,   481,   482,     0,     0,
       0,     0,     0,   485,     0,     0,   486,     0,     0,     0,
     488,   489,   490,     0,     0,     0,     0,     0,     0,   491,
       0,     0,   492,     0,     0,     0,   493,   494,   495,   496,
     497,   498,     0,     0,  -326,     0,     0,     0,   499,     0,
       0,   501,     0,   503,     0,   141,   504,   142,   143,   144,
     145,   146,     0,     0,   147,     0,     0,     0,   148,     0,
    4640,   149,     0,   150,   151,   152,   153,   154,   155,   156,
     157,     0,   158,     0,     0,     0,   159,     0,     0,     0,
     160,     0,     0,   161,   162,   163,     0,   164,     0,   165,
     166,     0,     0,   167,     0,     0,   168,   169,     0,   170,
     171,     0,   172,   173,     0,   174,   175,   176,   177,   178,
     179,   180,     0,   181,   182,   183,   184,   185,   186,   187,
       0,   188,   189,   190,   191,   192,   193,   194,   195,     0,
     196,   197,     0,   198,   199,   200,   201,   202,     0,   203,
       0,     0,   204,     0,     0,   205,     0,   206,  1025,   207,
       0,   208,     0,     0,     0,   209,   210,   211,     0,     0,
     212,     0,     0,     0,     0,   213,   214,     0,     0,     0,
       0,   215,     0,   216,     0,     0,     0,   217,     0,   218,
     219,   220,   221,   222,     0,     0,     0,   223,     0,     0,
     224,   225,   226,     0,     0,     0,   227,     0,   228,   229,
       0,   230,   231,   232,     0,     0,   233,   234,     0,   235,
     236,   237,   238,   239,   240,   241,     0,     0,   242,   243,
     244,     0,     0,   245,   246,     0,   247,   248,   249,     0,
       0,   250,     0,     0,     0,   251,     0,   252,     0,   253,
       0,   254,   255,   256,   257,   258,     0,   259,     0,   260,
       0,     0,     0,   261,   262,   263,     0,   264,     0,     0,
       0,   265,   266,     0,     0,     0,   267,   268,   269,   270,
       0,     0,   271,   272,   273,     0,   274,     0,   275,     0,
       0,     0,     0,   276,   277,     0,     0,     0,   278,     0,
     279,   280,     0,   281,   282,     0,     0,     0,   283,     0,
       0,   284,   285,   286,     0,     0,   287,     0,     0,   288,
     289,   632,     0,     0,     0,     0,   290,   291,     0,   292,
       0,   293,     0,   294,   295,     0,     0,     0,     0,     0,
       0,     0,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,     0,   312,
     313,   314,   315,     0,   316,   317,   318,   319,     0,   320,
     321,     0,     0,     0,     0,   322,   323,   324,   325,   326,
     327,     0,     0,   328,   329,     0,   330,     0,   331,     0,
     332,   333,   334,   335,   336,   337,   338,   339,   340,     0,
       0,   341,   342,     0,     0,   343,   344,   345,   346,     0,
       0,     0,   347,   348,     0,     0,     0,   349,     0,   350,
     351,   352,     0,   353,   354,   355,   356,     0,   357,   358,
       0,     0,     0,     0,     0,     0,     0,     0,   359,   360,
     361,     0,     0,   362,     0,   363,     0,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,     0,     0,   374,
     375,   376,     0,   377,     0,   378,   379,   380,   381,   382,
       0,   383,   384,   385,     0,     0,   386,     0,     0,     0,
     387,   388,   389,   390,   391,     0,     0,   392,   393,   394,
     395,   396,     0,   397,   398,     0,   399,   400,   401,     0,
       0,   402,     0,   403,     0,   404,   405,     0,   406,   407,
     408,     0,     0,     0,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,     0,   420,   421,     0,     0,
       0,   422,   423,   424,   425,     0,     0,     0,   426,     0,
       0,     0,   427,     0,   428,   429,   430,   431,   432,   433,
       0,   434,   435,   436,   437,   438,   439,     0,     0,     0,
       0,     0,     0,   440,   441,     0,   442,     0,     0,   443,
       0,     0,   444,   445,     0,     0,     0,   446,     0,     0,
     447,   448,     0,   449,   450,   451,   452,   453,   454,     0,
       0,   455,   456,   457,   458,     0,   459,   460,     0,   461,
       0,   462,   463,   464,   465,     0,   138,   466,   467,     0,
     468,   469,   470,   471,     0,     0,     0,     0,     0,   472,
     473,   474,     0,     0,     0,   475,   476,   477,   478,     0,
     479,   480,     0,   481,   482,     0,   483,   484,     0,     0,
     485,     0,     0,   486,     0,   487,     0,   488,   489,   490,
       0,     0,     0,     0,     0,     0,   491,     0,     0,   492,
       0,     0,     0,   493,   494,   495,   496,   497,   498,     0,
       0,     0,     0,     0,     0,   499,   500,     0,   501,   502,
     503,     0,     0,   504,   141,     0,   142,   143,   144,   145,
     146,     0,     0,   147,     0,  1207,     0,   148,     0,     0,
     149,     0,   150,   151,   152,   153,   154,   155,   156,   157,
       0,   158,     0,     0,     0,   159,     0,     0,     0,   160,
       0,     0,   161,   162,   163,     0,   164,     0,   165,   166,
       0,     0,   167,     0,     0,   168,   169,     0,   170,   171,
       0,   172,   173,     0,   174,   175,   176,   177,   178,   179,
     180,     0,   181,   182,   183,   184,   185,   186,   187,     0,
     188,   189,   190,   191,   192,   193,   194,   195,     0,   196,
     197,     0,   198,   199,   200,   201,   202,     0,   203,     0,
       0,   204,     0,     0,   205,     0,   206,     0,   207,     0,
     208,     0,     0,     0,   209,   210,   211,     0,     0,   212,
       0,     0,     0,     0,   213,   214,     0,     0,     0,     0,
     215,     0,   216,     0,     0,     0,   217,     0,   218,   219,
     220,   221,   222,     0,     0,     0,   223,     0,     0,   224,
     225,   226,     0,     0,     0,   227,     0,   228,   229,     0,
     230,   231,   232,     0,     0,   233,   234,     0,   235,   236,
     237,   238,   239,   240,   241,     0,     0,   242,   243,   244,
       0,     0,   245,   246,     0,   247,   248,   249,     0,     0,
     250,     0,     0,     0,   251,     0,   252,     0,   253,     0,
     254,   255,   256,   257,   258,     0,   259,     0,   260,     0,
       0,     0,   261,   262,   263,     0,   264,     0,     0,     0,
     265,   266,     0,     0,     0,   267,   268,   269,   270,     0,
       0,   271,   272,   273,     0,   274,     0,   275,     0,     0,
       0,     0,   276,   277,     0,     0,     0,   278,     0,   279,
     280,     0,   281,   282,     0,     0,     0,   283,     0,     0,
     284,   285,   286,     0,     0,   287,     0,     0,   288,   289,
       0,     0,     0,     0,     0,   290,   291,     0,   292,     0,
     293,     0,   294,   295,     0,     0,     0,     0,     0,     0,
       0,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,     0,   312,   313,
     314,   315,     0,   316,   317,   318,   319,     0,   320,   321,
       0,     0,     0,     0,   322,   323,   324,   325,   326,   327,
       0,     0,   328,   329,     0,   330,     0,   331,     0,   332,
     333,   334,   335,   336,   337,   338,   339,   340,     0,     0,
     341,   342,     0,     0,   343,   344,   345,   346,     0,     0,
       0,   347,   348,     0,     0,     0,   349,     0,   350,   351,
     352,     0,   353,   354,   355,   356,     0,   357,   358,     0,
       0,     0,     0,     0,     0,     0,     0,   359,   360,   361,
       0,     0,   362,     0,   363,     0,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,     0,     0,   374,   375,
     376,     0,   377,     0,   378,   379,   380,   381,   382,     0,
     383,   384,   385,     0,     0,   386,     0,     0,     0,   387,
     388,   389,   390,   391,     0,     0,   392,   393,   394,   395,
     396,     0,   397,   398,     0,   399,   400,   401,     0,     0,
     402,     0,   403,     0,   404,   405,     0,   406,   407,   408,
       0,     0,     0,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,     0,   420,   421,     0,     0,     0,
     422,   423,   424,   425,     0,     0,     0,   426,     0,     0,
       0,   427,     0,   428,   429,   430,   431,   432,   433,     0,
     434,   435,   436,   437,   438,   439,     0,     0,     0,     0,
       0,     0,   440,   441,     0,   442,     0,     0,   443,     0,
       0,   444,   445,     0,     0,     0,   446,     0,     0,   447,
     448,     0,   449,   450,   451,   452,   453,   454,     0,     0,
     455,   456,   457,   458,     0,   459,   460,     0,   461,     0,
     462,   463,   464,   465,     0,     0,   466,   467,     0,   468,
     469,   470,   471,     0,     0,     0,     0,     0,   472,   473,
     474,     0,     0,     0,   475,   476,   477,   478,     0,   479,
     480,     0,   481,   482,     0,   483,   484,     0,     0,   485,
       0,     0,   486,     0,   487,     0,   488,   489,   490,     0,
       0,     0,     0,     0,     0,   491,     0,     0,   492,     0,
       0,     0,   493,   494,   495,   496,   497,   498,     0,     0,
       0,     0,     0,     0,   499,   500,     0,   501,   502,   503,
       0,   141,   504,   142,   143,   144,   145,   146,     0,  2148,
     147,     0,     0,     0,   148,     0,     0,   149,     0,   150,
     151,   152,   153,   154,   155,   156,   157,     0,   158,     0,
       0,     0,   159,     0,     0,     0,   160,     0,     0,   161,
     162,   163,     0,   164,     0,   165,   166,     0,     0,   167,
       0,     0,   168,   169,     0,   170,   171,     0,   172,   173,
       0,   174,   175,   176,   177,   178,   179,   180,     0,   181,
     182,   183,   184,   185,   186,   187,     0,   188,   189,   190,
     191,   192,   193,   194,   195,     0,   196,   197,     0,   198,
     199,   200,   201,   202,     0,   203,     0,     0,   204,     0,
       0,   205,     0,   206,     0,   207,     0,   208,     0,     0,
       0,   209,   210,   211,     0,     0,   212,     0,     0,     0,
       0,   213,   214,     0,     0,     0,     0,   215,     0,   216,
       0,     0,     0,   217,     0,   218,   219,   220,   221,   222,
       0,     0,     0,   223,     0,     0,   224,   225,   226,     0,
       0,     0,   227,     0,   228,   229,     0,   230,   231,   232,
       0,     0,   233,   234,     0,   235,   236,   237,   238,   239,
     240,   241,     0,     0,   242,   243,   244,     0,     0,   245,
     246,     0,   247,   248,   249,     0,     0,   250,     0,     0,
       0,   251,     0,   252,     0,   253,     0,   254,   255,   256,
     257,   258,     0,   259,     0,   260,     0,     0,     0,   261,
     262,   263,     0,   264,     0,     0,     0,   265,   266,     0,
       0,     0,   267,   268,   269,   270,     0,     0,   271,   272,
     273,     0,   274,     0,   275,     0,     0,     0,     0,   276,
     277,     0,     0,     0,   278,     0,   279,   280,     0,   281,
     282,     0,     0,     0,   283,     0,     0,   284,   285,   286,
       0,     0,   287,     0,     0,   288,   289,     0,     0,     0,
       0,     0,   290,   291,     0,   292,     0,   293,     0,   294,
     295,     0,     0,     0,     0,     0,     0,     0,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,     0,   312,   313,   314,   315,     0,
     316,   317,   318,   319,     0,   320,   321,     0,     0,     0,
       0,   322,   323,   324,   325,   326,   327,     0,     0,   328,
     329,     0,   330,     0,   331,     0,   332,   333,   334,   335,
     336,   337,   338,   339,   340,     0,     0,   341,   342,     0,
       0,   343,   344,   345,   346,     0,     0,     0,   347,   348,
       0,     0,     0,   349,     0,   350,   351,   352,     0,   353,
     354,   355,   356,     0,   357,   358,     0,     0,     0,     0,
       0,     0,     0,     0,   359,   360,   361,     0,     0,   362,
       0,   363,     0,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,     0,     0,   374,   375,   376,     0,   377,
       0,   378,   379,   380,   381,   382,     0,   383,   384,   385,
       0,     0,   386,     0,     0,     0,   387,   388,   389,   390,
     391,     0,     0,   392,   393,   394,   395,   396,     0,   397,
     398,     0,   399,   400,   401,     0,     0,   402,     0,   403,
       0,   404,   405,     0,   406,   407,   408,     0,     0,     0,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,     0,   420,   421,     0,     0,     0,   422,   423,   424,
     425,     0,     0,     0,   426,     0,     0,     0,   427,     0,
     428,   429,   430,   431,   432,   433,     0,   434,   435,   436,
     437,   438,   439,     0,     0,     0,     0,     0,     0,   440,
     441,     0,   442,     0,     0,   443,     0,     0,   444,   445,
       0,     0,     0,   446,     0,     0,   447,   448,     0,   449,
     450,   451,   452,   453,   454,     0,     0,   455,   456,   457,
     458,     0,   459,   460,     0,   461,     0,   462,   463,   464,
     465,     0,     0,   466,   467,     0,   468,   469,   470,   471,
       0,     0,     0,     0,     0,   472,   473,   474,     0,     0,
       0,   475,   476,   477,   478,     0,   479,   480,     0,   481,
     482,     0,   483,   484,     0,     0,   485,     0,     0,   486,
       0,   487,     0,   488,   489,   490,     0,     0,     0,     0,
       0,     0,   491,     0,     0,   492,     0,     0,     0,   493,
     494,   495,   496,   497,   498,     0,     0,     0,     0,     0,
       0,   499,   500,     0,   501,   502,   503,     0,   141,   504,
     142,   143,   144,   145,   146,     0,  2827,   147,     0,     0,
       0,   148,     0,     0,   149,     0,   150,   151,   152,   153,
     154,   155,   156,   157,     0,   158,     0,     0,     0,   159,
       0,     0,     0,   160,     0,     0,   161,   162,   163,     0,
     164,     0,   165,   166,     0,     0,   167,     0,     0,   168,
     169,     0,   170,   171,     0,   172,   173,     0,   174,   175,
     176,   177,   178,   179,   180,     0,   181,   182,   183,   184,
     185,   186,   187,     0,   188,   189,   190,   191,   192,   193,
     194,   195,     0,   196,   197,     0,   198,   199,   200,   201,
     202,     0,   203,     0,     0,   204,     0,     0,   205,     0,
     206,     0,   207,     0,   208,     0,     0,     0,   209,   210,
     211,     0,     0,   212,     0,     0,     0,     0,   213,   214,
       0,     0,     0,     0,   215,     0,   216,     0,     0,     0,
     217,     0,   218,   219,   220,   221,   222,     0,     0,     0,
     223,     0,     0,   224,   225,   226,     0,     0,     0,   227,
       0,   228,   229,     0,   230,   231,   232,     0,     0,   233,
     234,     0,   235,   236,   237,   238,   239,   240,   241,     0,
       0,   242,   243,   244,     0,     0,   245,   246,     0,   247,
     248,   249,     0,     0,   250,     0,     0,     0,   251,     0,
     252,     0,   253,     0,   254,   255,   256,   257,   258,     0,
     259,     0,   260,     0,     0,     0,   261,   262,   263,     0,
     264,     0,     0,     0,   265,   266,     0,     0,     0,   267,
     268,   269,   270,     0,     0,   271,   272,   273,     0,   274,
       0,   275,     0,     0,     0,     0,   276,   277,     0,     0,
       0,   278,     0,   279,   280,     0,   281,   282,     0,     0,
       0,   283,     0,     0,   284,   285,   286,     0,     0,   287,
       0,     0,   288,   289,     0,     0,     0,     0,     0,   290,
     291,     0,   292,     0,   293,     0,   294,   295,     0,     0,
       0,     0,     0,     0,     0,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,     0,   312,   313,   314,   315,     0,   316,   317,   318,
     319,     0,   320,   321,     0,     0,     0,     0,   322,   323,
     324,   325,   326,   327,     0,     0,   328,   329,     0,   330,
       0,   331,     0,   332,   333,   334,   335,   336,   337,   338,
     339,   340,     0,     0,   341,   342,     0,     0,   343,   344,
     345,   346,     0,     0,     0,   347,   348,     0,     0,     0,
     349,     0,   350,   351,   352,     0,   353,   354,   355,   356,
       0,   357,   358,     0,     0,     0,     0,     0,     0,     0,
       0,   359,   360,   361,     0,     0,   362,     0,   363,     0,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
       0,     0,   374,   375,   376,     0,   377,     0,   378,   379,
     380,   381,   382,     0,   383,   384,   385,     0,     0,   386,
       0,     0,     0,   387,   388,   389,   390,   391,     0,     0,
     392,   393,   394,   395,   396,     0,   397,   398,     0,   399,
     400,   401,     0,     0,   402,     0,   403,     0,   404,   405,
       0,   406,   407,   408,     0,     0,     0,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,     0,   420,
     421,     0,     0,     0,   422,   423,   424,   425,     0,     0,
       0,   426,     0,     0,     0,   427,     0,   428,   429,   430,
     431,   432,   433,     0,   434,   435,   436,   437,   438,   439,
       0,     0,     0,     0,     0,     0,   440,   441,     0,   442,
       0,     0,   443,     0,     0,   444,   445,     0,     0,     0,
     446,     0,     0,   447,   448,     0,   449,   450,   451,   452,
     453,   454,     0,     0,   455,   456,   457,   458,     0,   459,
     460,     0,   461,     0,   462,   463,   464,   465,     0,     0,
     466,   467,     0,   468,   469,   470,   471,     0,     0,     0,
       0,     0,   472,   473,   474,     0,     0,     0,   475,   476,
     477,   478,     0,   479,   480,     0,   481,   482,     0,   483,
     484,     0,     0,   485,     0,     0,   486,     0,   487,     0,
     488,   489,   490,     0,     0,     0,     0,     0,     0,   491,
       0,     0,   492,     0,     0,     0,   493,   494,   495,   496,
     497,   498,     0,     0,     0,     0,     0,     0,   499,   500,
       0,   501,   502,   503,     0,   141,   504,   142,   143,   144,
     145,   146,     0,  3186,   147,     0,     0,     0,   148,     0,
       0,   149,     0,   150,   151,   152,   153,   154,   155,   156,
     157,     0,   158,     0,     0,     0,   159,     0,     0,     0,
     160,     0,     0,   161,   162,   163,     0,   164,     0,   165,
     166,     0,     0,   167,     0,     0,   168,   169,     0,   170,
     171,     0,   172,   173,     0,   174,   175,   176,   177,   178,
     179,   180,     0,   181,   182,   183,   184,   185,   186,   187,
       0,   188,   189,   190,   191,   192,   193,   194,   195,     0,
     196,   197,     0,   198,   199,   200,   201,   202,     0,   203,
       0,     0,   204,     0,     0,   205,     0,   206,     0,   207,
       0,   208,     0,     0,     0,   209,   210,   211,     0,     0,
     212,     0,     0,     0,     0,   213,   214,     0,     0,     0,
       0,   215,     0,   216,     0,     0,     0,   217,     0,   218,
     219,   220,   221,   222,     0,     0,     0,   223,     0,     0,
     224,   225,   226,     0,     0,     0,   227,     0,   228,   229,
       0,   230,   231,   232,     0,     0,   233,   234,     0,   235,
     236,   237,   238,   239,   240,   241,     0,     0,   242,   243,
     244,     0,     0,   245,   246,     0,   247,   248,   249,     0,
       0,   250,     0,     0,     0,   251,     0,   252,     0,   253,
       0,   254,   255,   256,   257,   258,     0,   259,     0,   260,
       0,     0,     0,   261,   262,   263,     0,   264,     0,     0,
       0,   265,   266,     0,     0,     0,   267,   268,   269,   270,
       0,     0,   271,   272,   273,     0,   274,     0,   275,     0,
       0,     0,     0,   276,   277,     0,     0,     0,   278,     0,
     279,   280,     0,   281,   282,     0,     0,     0,   283,     0,
       0,   284,   285,   286,     0,     0,   287,     0,     0,   288,
     289,     0,     0,     0,     0,     0,   290,   291,     0,   292,
       0,   293,     0,   294,   295,     0,     0,     0,     0,     0,
       0,     0,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,     0,   312,
     313,   314,   315,     0,   316,   317,   318,   319,     0,   320,
     321,     0,     0,     0,     0,   322,   323,   324,   325,   326,
     327,     0,     0,   328,   329,     0,   330,     0,   331,     0,
     332,   333,   334,   335,   336,   337,   338,   339,   340,     0,
       0,   341,   342,     0,     0,   343,   344,   345,   346,     0,
       0,     0,   347,   348,     0,     0,     0,   349,     0,   350,
     351,   352,     0,   353,   354,   355,   356,     0,   357,   358,
       0,     0,     0,     0,     0,     0,     0,     0,   359,   360,
     361,     0,     0,   362,     0,   363,     0,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,     0,     0,   374,
     375,   376,     0,   377,     0,   378,   379,   380,   381,   382,
       0,   383,   384,   385,     0,     0,   386,     0,     0,     0,
     387,   388,   389,   390,   391,     0,     0,   392,   393,   394,
     395,   396,     0,   397,   398,     0,   399,   400,   401,     0,
       0,   402,     0,   403,     0,   404,   405,     0,   406,   407,
     408,     0,     0,     0,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,     0,   420,   421,     0,     0,
       0,   422,   423,   424,   425,     0,     0,     0,   426,     0,
       0,     0,   427,     0,   428,   429,   430,   431,   432,   433,
       0,   434,   435,   436,   437,   438,   439,     0,     0,     0,
       0,     0,     0,   440,   441,     0,   442,     0,     0,   443,
       0,     0,   444,   445,     0,     0,     0,   446,     0,     0,
     447,   448,     0,   449,   450,   451,   452,   453,   454,     0,
       0,   455,   456,   457,   458,     0,   459,   460,     0,   461,
       0,   462,   463,   464,   465,     0,     0,   466,   467,     0,
     468,   469,   470,   471,     0,     0,     0,     0,     0,   472,
     473,   474,     0,     0,     0,   475,   476,   477,   478,     0,
     479,   480,     0,   481,   482,     0,   483,   484,     0,     0,
     485,     0,     0,   486,     0,   487,     0,   488,   489,   490,
       0,     0,     0,     0,     0,     0,   491,     0,     0,   492,
       0,     0,     0,   493,   494,   495,   496,   497,   498,     0,
       0,     0,     0,     0,     0,   499,   500,     0,   501,   502,
     503,     0,   141,   504,   142,   143,   144,   145,   146,     0,
    3541,   147,     0,     0,     0,   148,     0,     0,   149,     0,
     150,   151,   152,   153,   154,   155,   156,   157,     0,   158,
       0,     0,     0,   159,     0,     0,     0,   160,     0,     0,
     161,   162,   163,     0,   164,     0,   165,   166,     0,     0,
     167,     0,     0,   168,   169,     0,   170,   171,     0,   172,
     173,     0,   174,   175,   176,   177,   178,   179,   180,     0,
     181,   182,   183,   184,   185,   186,   187,     0,   188,   189,
     190,   191,   192,   193,   194,   195,     0,   196,   197,     0,
     198,   199,   200,   201,   202,     0,   203,     0,     0,   204,
       0,     0,   205,     0,   206,     0,   207,     0,   208,     0,
       0,     0,   209,   210,   211,     0,     0,   212,     0,     0,
       0,     0,   213,   214,  2482,     0,     0,     0,   215,     0,
     216,     0,     0,     0,   217,     0,   218,   219,   220,   221,
     222,     0,     0,     0,   223,     0,     0,   224,   225,   226,
       0,     0,     0,   227,     0,   228,   229,     0,   230,   231,
     232,     0,     0,   233,   234,     0,   235,   236,   237,   238,
     239,   240,   241,     0,     0,   242,   243,   244,     0,     0,
     245,   246,     0,   247,   248,   249,  2483,     0,   250,     0,
       0,     0,   251,     0,   252,     0,   253,     0,   254,   255,
     256,   257,   258,     0,   259,     0,   260,     0,     0,     0,
     261,   262,   263,     0,   264,  2484,     0,     0,   265,   266,
       0,     0,     0,   267,   268,   269,   270,     0,     0,   271,
     272,   273,     0,   274,     0,   275,     0,     0,     0,     0,
     276,   277,     0,     0,     0,   278,     0,   279,   280,     0,
     281,   282,     0,     0,     0,   283,     0,     0,   284,   285,
     286,     0,     0,   287,     0,     0,   288,   289,     0,     0,
       0,     0,     0,   290,   291,     0,   292,     0,   293,     0,
     294,   295,     0,     0,  2485,     0,     0,     0,     0,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,     0,   312,   313,   314,   315,
       0,   316,   317,   318,   319,     0,   320,   321,     0,     0,
       0,     0,   322,   323,   324,   325,   326,   327,     0,     0,
     328,   329,     0,   330,     0,   331,     0,   332,   333,   334,
     335,   336,   337,   338,   339,   340,     0,     0,   341,   342,
       0,     0,   343,   344,   345,   346,  1071,  1072,     0,   347,
     348,     0,     0,  2486,   349,     0,   350,   351,   352,     0,
     353,   354,   355,   356,     0,   357,   358,     0,     0,     0,
       0,     0,     0,     0,     0,   359,   360,   361,     0,     0,
     362,     0,   363,     0,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,     0,     0,   374,   375,   376,     0,
     377,     0,   378,   379,   380,   381,   382,     0,   383,   384,
     385,     0,     0,   386,     0,     0,     0,   387,   388,   389,
     390,   391,     0,     0,   392,   393,   394,   395,   396,     0,
     397,   398,     0,   399,   400,   401,     0,     0,   402,     0,
     403,     0,   404,   405,     0,   406,   407,   408,     0,     0,
       0,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,     0,   420,   421,     0,     0,     0,   422,   423,
     424,   425,     0,     0,     0,   426,     0,     0,     0,   427,
       0,   428,   429,   430,   431,   432,   433,     0,   434,   435,
     436,   437,   438,   439,     0,     0,  4627,   579,  4628,     0,
     440,   441,     0,   442,     0,     0,   443,     0,     0,   444,
     445,     0,     0,     0,   446,     0,     0,   447,   448,     0,
     449,   450,   451,   452,   453,   454,     0,     0,   455,   456,
     457,   458,     0,   459,   460,     0,   461,     0,   462,   463,
     464,   465,     0,     0,   466,   467,     0,   468,   469,   470,
     471,     0,     0,     0,     0,     0,   472,   473,   474,     0,
       0,     0,   475,   476,   477,   478,  2487,   479,   480,     0,
     481,   482,     0,   483,   484,     0,     0,   485,     0,     0,
     486,     0,   487,     0,   488,   489,   490,     0,     0,     0,
       0,     0,     0,   491,     0,     0,   492,     0,     0,     0,
     493,   494,   495,   496,   497,   498,     0,     0,     0,     0,
       0,     0,   499,   500,     0,   501,   502,   503,     0,   141,
     504,   142,   143,   144,   145,   146,     0,     0,   147,     0,
       0,     0,   148,     0,     0,   149,     0,   150,   151,   152,
     153,   154,   155,   156,   157,     0,   158,     0,     0,     0,
     159,     0,     0,     0,   160,     0,     0,   161,   162,   163,
       0,   164,     0,   165,   166,     0,     0,   167,     0,     0,
     168,   169,     0,   170,   171,     0,   172,   173,     0,   174,
     175,   176,   177,   178,   179,   180,     0,   181,   182,   183,
     184,   185,   186,   187,     0,   188,   189,   190,   191,   192,
     193,   194,   195,     0,   196,   197,     0,   198,   199,   200,
     201,   202,     0,   203,     0,     0,   204,     0,     0,   205,
       0,   206,     0,   207,     0,   208,     0,     0,     0,   209,
     210,   211,     0,     0,   212,     0,     0,     0,     0,   213,
     214,  1632,     0,     0,  3375,   215,     0,   216,     0,     0,
       0,   217,     0,   218,   219,   220,   221,   222,     0,     0,
       0,   223,     0,     0,   224,   225,   226,     0,     0,     0,
     227,     0,   228,   229,     0,   230,   231,   232,     0,     0,
     233,   234,     0,   235,   236,   237,   238,   239,   240,   241,
       0,     0,   242,   243,   244,     0,     0,   245,   246,     0,
     247,   248,   249,  1633,     0,   250,     0,     0,     0,   251,
       0,   252,     0,   253,     0,   254,   255,   256,   257,   258,
       0,   259,     0,   260,     0,     0,     0,   261,   262,   263,
       0,   264,  3376,     0,     0,   265,   266,     0,     0,     0,
     267,   268,   269,   270,     0,     0,   271,   272,   273,     0,
     274,     0,   275,     0,     0,     0,     0,   276,   277,     0,
       0,     0,   278,     0,   279,   280,     0,   281,   282,     0,
       0,     0,   283,     0,     0,   284,   285,   286,     0,     0,
     287,     0,     0,   288,   289,     0,     0,     0,     0,     0,
     290,   291,     0,   292,     0,   293,     0,   294,   295,     0,
       0,  3377,     0,     0,     0,     0,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,     0,   312,   313,   314,   315,     0,   316,   317,
     318,   319,     0,   320,   321,     0,     0,     0,     0,   322,
     323,   324,   325,   326,   327,     0,     0,   328,   329,     0,
     330,     0,   331,     0,   332,   333,   334,   335,   336,   337,
     338,   339,   340,     0,     0,   341,   342,     0,     0,   343,
     344,   345,   346,     0,     0,     0,   347,   348,     0,     0,
    3378,   349,     0,   350,   351,   352,     0,   353,   354,   355,
     356,     0,   357,   358,     0,     0,     0,     0,     0,     0,
       0,     0,   359,   360,   361,     0,     0,   362,     0,   363,
       0,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,     0,     0,   374,   375,   376,     0,   377,     0,   378,
     379,   380,   381,   382,     0,   383,   384,   385,     0,     0,
     386,     0,     0,     0,   387,   388,   389,   390,   391,     0,
       0,   392,   393,   394,   395,   396,     0,   397,   398,     0,
     399,   400,   401,     0,     0,   402,     0,   403,     0,   404,
     405,     0,   406,   407,   408,     0,     0,     0,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,     0,
     420,   421,     0,     0,     0,   422,   423,   424,   425,     0,
       0,     0,   426,     0,     0,     0,   427,     0,   428,   429,
     430,   431,   432,   433,     0,   434,   435,   436,   437,   438,
     439,     0,     0,     0,     0,     0,     0,   440,   441,     0,
     442,     0,     0,   443,     0,     0,   444,   445,     0,     0,
       0,   446,     0,     0,   447,   448,     0,   449,   450,   451,
     452,   453,   454,     0,     0,   455,   456,   457,   458,     0,
     459,   460,     0,   461,     0,   462,   463,   464,   465,     0,
     138,   466,   467,     0,   468,   469,   470,   471,     0,     0,
       0,     0,     0,   472,   473,   474,     0,     0,     0,   475,
     476,   477,   478,  3379,   479,   480,     0,   481,   482,     0,
     483,   484,     0,     0,   485,     0,     0,   486,     0,   487,
       0,   488,   489,   490,     0,     0,     0,     0,     0,     0,
     491,     0,     0,   492,     0,     0,     0,   493,   494,   495,
     496,   497,   498,     0,     0,     0,     0,     0,     0,   499,
     500,     0,   501,   502,   503,     0,   141,   504,   142,   143,
     144,   145,   146,     0,     0,   147,     0,     0,     0,   148,
       0,     0,   149,     0,   150,   151,   152,   153,   154,   155,
     156,   157,     0,   158,     0,     0,     0,   159,     0,     0,
       0,   160,     0,     0,   161,   162,   163,     0,   164,     0,
     165,   166,     0,     0,   167,     0,     0,   168,   169,     0,
     170,   171,     0,   172,   173,     0,   174,   175,   176,   177,
     178,   179,   180,     0,   181,   182,   183,   184,   185,   186,
     187,     0,   188,   189,   190,   191,   192,   193,   194,   195,
       0,   196,   197,     0,   198,   199,   200,   201,   202,     0,
     203,     0,     0,   204,     0,     0,   205,     0,   206,     0,
     207,     0,   208,     0,     0,     0,   209,   210,   211,     0,
       0,   212,     0,     0,     0,     0,   213,   214,  1632,     0,
       0,  4169,   215,     0,   216,     0,     0,     0,   217,     0,
     218,   219,   220,   221,   222,     0,     0,     0,   223,     0,
       0,   224,   225,   226,     0,     0,     0,   227,     0,   228,
     229,     0,   230,   231,   232,     0,     0,   233,   234,     0,
     235,   236,   237,   238,   239,   240,   241,     0,     0,   242,
     243,   244,     0,     0,   245,   246,     0,   247,   248,   249,
    1633,     0,   250,     0,     0,     0,   251,     0,   252,     0,
     253,     0,   254,   255,   256,   257,   258,     0,   259,     0,
     260,     0,     0,     0,   261,   262,   263,     0,   264,  3376,
       0,     0,   265,   266,     0,     0,     0,   267,   268,   269,
     270,     0,     0,   271,   272,   273,     0,   274,     0,   275,
       0,     0,     0,     0,   276,   277,     0,     0,     0,   278,
       0,   279,   280,     0,   281,   282,     0,     0,     0,   283,
       0,     0,   284,   285,   286,     0,     0,   287,     0,     0,
     288,   289,     0,     0,     0,     0,     0,   290,   291,     0,
     292,     0,   293,     0,   294,   295,     0,     0,  3377,     0,
       0,     0,     0,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,     0,
     312,   313,   314,   315,     0,   316,   317,   318,   319,     0,
     320,   321,     0,     0,     0,     0,   322,   323,   324,   325,
     326,   327,     0,     0,   328,   329,     0,   330,     0,   331,
       0,   332,   333,   334,   335,   336,   337,   338,   339,   340,
       0,     0,   341,   342,     0,     0,   343,   344,   345,   346,
       0,     0,     0,   347,   348,     0,     0,  3378,   349,     0,
     350,   351,   352,     0,   353,   354,   355,   356,     0,   357,
     358,     0,     0,     0,     0,     0,     0,     0,     0,   359,
     360,   361,     0,     0,   362,     0,   363,     0,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,     0,     0,
     374,   375,   376,     0,   377,     0,   378,   379,   380,   381,
     382,     0,   383,   384,   385,     0,     0,   386,     0,     0,
       0,   387,   388,   389,   390,   391,     0,     0,   392,   393,
     394,   395,   396,     0,   397,   398,     0,   399,   400,   401,
       0,     0,   402,     0,   403,     0,   404,   405,     0,   406,
     407,   408,     0,     0,     0,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,     0,   420,   421,     0,
       0,     0,   422,   423,   424,   425,     0,     0,     0,   426,
       0,     0,     0,   427,     0,   428,   429,   430,   431,   432,
     433,     0,   434,   435,   436,   437,   438,   439,     0,     0,
       0,     0,     0,     0,   440,   441,     0,   442,     0,     0,
     443,     0,     0,   444,   445,     0,     0,     0,   446,     0,
       0,   447,   448,     0,   449,   450,   451,   452,   453,   454,
       0,     0,   455,   456,   457,   458,     0,   459,   460,     0,
     461,     0,   462,   463,   464,   465,     0,   138,   466,   467,
       0,   468,   469,   470,   471,     0,     0,     0,     0,     0,
     472,   473,   474,     0,     0,     0,   475,   476,   477,   478,
    3379,   479,   480,     0,   481,   482,     0,   483,   484,     0,
       0,   485,     0,     0,   486,     0,   487,     0,   488,   489,
     490,     0,     0,     0,     0,     0,     0,   491,     0,     0,
     492,     0,     0,     0,   493,   494,   495,   496,   497,   498,
       0,     0,     0,     0,     0,     0,   499,   500,     0,   501,
     502,   503,     0,   141,   504,   142,   143,   144,   145,   146,
       0,     0,   147,     0,     0,     0,   148,     0,     0,   149,
       0,   150,   151,   152,   153,   154,   155,   156,   157,     0,
     158,     0,     0,     0,   159,     0,     0,     0,   160,     0,
       0,   161,   162,   163,     0,   164,     0,   165,   166,     0,
       0,   167,     0,     0,   168,   169,     0,   170,   171,     0,
     172,   173,     0,   174,   175,   176,   177,   178,   179,   180,
       0,   181,   182,   183,   184,   185,   186,   187,     0,   188,
     189,   190,   191,   192,   193,   194,   195,     0,   196,   197,
       0,   198,   199,   200,   201,   202,     0,   203,     0,     0,
     204,     0,     0,   205,     0,   206,     0,   207,     0,   208,
       0,     0,     0,   209,   210,   211,     0,     0,   212,     0,
       0,     0,     0,   213,   214,  1632,     0,     0,  4429,   215,
       0,   216,     0,     0,     0,   217,     0,   218,   219,   220,
     221,   222,     0,     0,     0,   223,     0,     0,   224,   225,
     226,     0,     0,     0,   227,     0,   228,   229,     0,   230,
     231,   232,     0,     0,   233,   234,     0,   235,   236,   237,
     238,   239,   240,   241,     0,     0,   242,   243,   244,     0,
       0,   245,   246,     0,   247,   248,   249,  1633,     0,   250,
       0,     0,     0,   251,     0,   252,     0,   253,     0,   254,
     255,   256,   257,   258,     0,   259,     0,   260,     0,     0,
       0,   261,   262,   263,     0,   264,  3376,     0,     0,   265,
     266,     0,     0,     0,   267,   268,   269,   270,     0,     0,
     271,   272,   273,     0,   274,     0,   275,     0,     0,     0,
       0,   276,   277,     0,     0,     0,   278,     0,   279,   280,
       0,   281,   282,     0,     0,     0,   283,     0,     0,   284,
     285,   286,     0,     0,   287,     0,     0,   288,   289,     0,
       0,     0,     0,     0,   290,   291,     0,   292,     0,   293,
       0,   294,   295,     0,     0,  3377,     0,     0,     0,     0,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,     0,   312,   313,   314,
     315,     0,   316,   317,   318,   319,     0,   320,   321,     0,
       0,     0,     0,   322,   323,   324,   325,   326,   327,     0,
       0,   328,   329,     0,   330,     0,   331,     0,   332,   333,
     334,   335,   336,   337,   338,   339,   340,     0,     0,   341,
     342,     0,     0,   343,   344,   345,   346,     0,     0,     0,
     347,   348,     0,     0,  3378,   349,     0,   350,   351,   352,
       0,   353,   354,   355,   356,     0,   357,   358,     0,     0,
       0,     0,     0,     0,     0,     0,   359,   360,   361,     0,
       0,   362,     0,   363,     0,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,     0,     0,   374,   375,   376,
       0,   377,     0,   378,   379,   380,   381,   382,     0,   383,
     384,   385,     0,     0,   386,     0,     0,     0,   387,   388,
     389,   390,   391,     0,     0,   392,   393,   394,   395,   396,
       0,   397,   398,     0,   399,   400,   401,     0,     0,   402,
       0,   403,     0,   404,   405,     0,   406,   407,   408,     0,
       0,     0,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,     0,   420,   421,     0,     0,     0,   422,
     423,   424,   425,     0,     0,     0,   426,     0,     0,     0,
     427,     0,   428,   429,   430,   431,   432,   433,     0,   434,
     435,   436,   437,   438,   439,     0,     0,     0,     0,     0,
       0,   440,   441,     0,   442,     0,     0,   443,     0,     0,
     444,   445,     0,     0,     0,   446,     0,     0,   447,   448,
       0,   449,   450,   451,   452,   453,   454,     0,     0,   455,
     456,   457,   458,     0,   459,   460,     0,   461,     0,   462,
     463,   464,   465,     0,   138,   466,   467,     0,   468,   469,
     470,   471,     0,     0,     0,     0,     0,   472,   473,   474,
       0,     0,     0,   475,   476,   477,   478,  3379,   479,   480,
       0,   481,   482,     0,   483,   484,     0,     0,   485,     0,
       0,   486,     0,   487,     0,   488,   489,   490,     0,     0,
       0,     0,     0,     0,   491,     0,     0,   492,     0,     0,
       0,   493,   494,   495,   496,   497,   498,     0,     0,     0,
       0,     0,     0,   499,   500,     0,   501,   502,   503,     0,
     141,   504,   142,   143,   144,   145,   146,     0,     0,   147,
       0,     0,     0,   148,     0,     0,   149,     0,   150,   151,
     152,   153,   154,   155,   156,   157,     0,   158,     0,     0,
    1410,   159,     0,     0,     0,   160,     0,     0,   161,   162,
     163,     0,   164,     0,   165,   166,     0,     0,   167,     0,
       0,   168,   169,     0,   170,   171,     0,   172,   173,     0,
     174,   175,   176,   177,   178,   179,   180,     0,   181,   182,
     183,   184,   185,   186,   187,     0,   188,   189,   190,   191,
     192,   193,   194,   195,     0,   196,   197,     0,   198,   199,
     200,   201,   202,     0,   203,     0,     0,   204,     0,     0,
     205,     0,   206,     0,   207,     0,   208,     0,     0,     0,
     209,   210,   211,     0,     0,   212,     0,     0,     0,     0,
     213,   214,     0,     0,     0,  1411,   215,     0,   216,     0,
       0,     0,   217,     0,   218,   219,   220,   221,   222,     0,
       0,     0,   223,     0,     0,   224,   225,   226,     0,     0,
       0,   227,     0,   228,   229,     0,   230,   231,   232,  1412,
       0,   233,   234,     0,   235,   236,   237,   238,   239,   240,
     241,     0,     0,   242,   243,   244,     0,     0,   245,   246,
       0,   247,   248,   249,     0,     0,   250,     0,     0,     0,
     251,     0,   252,     0,   253,     0,   254,   255,   256,   257,
     258,     0,   259,     0,   260,     0,     0,     0,   261,   262,
     263,     0,   264,     0,     0,     0,   265,   266,     0,     0,
       0,   267,   268,   269,   270,     0,     0,   271,   272,   273,
       0,   274,     0,   275,     0,     0,     0,     0,   276,   277,
       0,     0,     0,   278,     0,   279,   280,     0,   281,   282,
       0,     0,     0,   283,     0,     0,   284,   285,   286,     0,
       0,   287,     0,     0,   288,   289,   632,     0,     0,     0,
       0,   290,   291,     0,   292,     0,   293,     0,   294,   295,
       0,     0,     0,     0,     0,     0,     0,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,     0,   312,   313,   314,   315,     0,   316,
     317,   318,   319,     0,   320,   321,     0,     0,     0,     0,
     322,   323,   324,   325,   326,   327,     0,     0,   328,   329,
       0,   330,     0,   331,     0,   332,   333,   334,   335,   336,
     337,   338,   339,   340,     0,     0,   341,   342,     0,     0,
     343,   344,   345,   346,     0,     0,     0,   347,   348,     0,
       0,     0,   349,     0,   350,   351,   352,     0,   353,   354,
     355,   356,     0,   357,   358,     0,     0,     0,     0,     0,
       0,     0,     0,   359,   360,   361,     0,     0,   362,     0,
     363,     0,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,     0,     0,   374,   375,   376,     0,   377,     0,
     378,   379,   380,   381,   382,     0,   383,   384,   385,     0,
       0,   386,     0,     0,     0,   387,   388,   389,   390,   391,
       0,     0,   392,   393,   394,   395,   396,     0,   397,   398,
       0,   399,   400,   401,     0,     0,   402,     0,   403,     0,
     404,   405,     0,   406,   407,   408,     0,     0,     0,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
       0,   420,   421,     0,     0,     0,   422,   423,   424,   425,
       0,     0,  1413,   426,     0,     0,     0,   427,     0,   428,
     429,   430,   431,   432,   433,     0,   434,   435,   436,   437,
     438,   439,     0,     0,     0,     0,     0,     0,   440,   441,
       0,   442,     0,     0,   443,     0,     0,   444,   445,     0,
       0,     0,   446,     0,     0,   447,   448,     0,   449,   450,
     451,   452,   453,   454,     0,     0,   455,   456,   457,   458,
       0,   459,   460,     0,   461,     0,   462,   463,   464,   465,
       0,   138,   466,   467,     0,   468,   469,   470,   471,     0,
       0,     0,     0,     0,   472,   473,   474,     0,     0,     0,
     475,   476,   477,   478,     0,   479,   480,     0,   481,   482,
       0,   483,   484,     0,     0,   485,     0,     0,   486,     0,
     487,     0,   488,   489,   490,     0,     0,     0,     0,     0,
       0,   491,     0,     0,   492,     0,     0,     0,   493,   494,
     495,   496,   497,   498,     0,     0,     0,     0,     0,     0,
     499,   500,     0,   501,   502,   503,     0,   141,   504,   142,
     143,   144,   145,   146,     0,     0,   147,     0,     0,     0,
     148,     0,     0,   149,     0,   150,   151,   152,   153,   154,
     155,   156,   157,     0,   158,     0,     0,  1423,   159,     0,
       0,     0,   160,     0,     0,   161,   162,   163,     0,   164,
       0,   165,   166,     0,     0,   167,     0,     0,   168,   169,
       0,   170,   171,     0,   172,   173,     0,   174,   175,   176,
     177,   178,   179,   180,     0,   181,   182,   183,   184,   185,
     186,   187,     0,   188,   189,   190,   191,   192,   193,   194,
     195,     0,   196,   197,     0,   198,   199,   200,   201,   202,
       0,   203,     0,     0,   204,     0,     0,   205,     0,   206,
       0,   207,     0,   208,     0,     0,     0,   209,   210,   211,
       0,     0,   212,     0,     0,     0,     0,   213,   214,     0,
       0,     0,  1424,   215,     0,   216,     0,     0,     0,   217,
       0,   218,   219,   220,   221,   222,     0,     0,     0,   223,
       0,     0,   224,   225,   226,     0,     0,     0,   227,     0,
     228,   229,     0,   230,   231,   232,     0,     0,   233,   234,
       0,   235,   236,   237,   238,   239,   240,   241,     0,     0,
     242,   243,   244,     0,     0,   245,   246,     0,   247,   248,
     249,     0,     0,   250,     0,     0,     0,   251,     0,   252,
       0,   253,     0,   254,   255,   256,   257,   258,     0,   259,
       0,   260,     0,     0,     0,   261,   262,   263,     0,   264,
       0,     0,     0,   265,   266,     0,     0,     0,   267,   268,
     269,   270,     0,     0,   271,   272,   273,     0,   274,     0,
     275,     0,     0,     0,     0,   276,   277,     0,     0,     0,
     278,     0,   279,   280,     0,   281,   282,     0,     0,     0,
     283,     0,     0,   284,   285,   286,     0,     0,   287,     0,
       0,   288,   289,   632,     0,     0,     0,     0,   290,   291,
       0,   292,     0,   293,     0,   294,   295,     0,     0,     0,
       0,     0,     0,     0,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
       0,   312,   313,   314,   315,     0,   316,   317,   318,   319,
       0,   320,   321,     0,     0,     0,     0,   322,   323,   324,
     325,   326,   327,     0,     0,   328,   329,     0,   330,     0,
     331,     0,   332,   333,   334,   335,   336,   337,   338,   339,
     340,     0,     0,   341,   342,     0,     0,   343,   344,   345,
     346,     0,     0,     0,   347,   348,     0,     0,     0,   349,
       0,   350,   351,   352,     0,   353,   354,   355,   356,     0,
     357,   358,     0,     0,     0,     0,     0,     0,     0,     0,
     359,   360,   361,     0,     0,   362,     0,   363,     0,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,     0,
       0,   374,   375,   376,     0,   377,     0,   378,   379,   380,
     381,   382,     0,   383,   384,   385,     0,     0,   386,     0,
       0,     0,   387,   388,   389,   390,   391,     0,     0,   392,
     393,   394,   395,   396,     0,   397,   398,     0,   399,   400,
     401,     0,     0,   402,     0,   403,     0,   404,   405,     0,
     406,   407,   408,     0,     0,     0,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,     0,   420,   421,
       0,     0,     0,   422,   423,   424,   425,     0,     0,     0,
     426,     0,     0,     0,   427,     0,   428,   429,   430,   431,
     432,   433,     0,   434,   435,   436,   437,   438,   439,     0,
       0,     0,     0,     0,     0,   440,   441,     0,   442,     0,
       0,   443,     0,     0,   444,   445,     0,     0,     0,   446,
       0,     0,   447,   448,     0,   449,   450,   451,   452,   453,
     454,     0,     0,   455,   456,   457,   458,     0,   459,   460,
       0,   461,     0,   462,   463,   464,   465,     0,   138,   466,
     467,     0,   468,   469,   470,   471,     0,     0,     0,     0,
       0,   472,   473,   474,     0,     0,     0,   475,   476,   477,
     478,     0,   479,   480,     0,   481,   482,     0,   483,   484,
       0,     0,   485,     0,     0,   486,     0,   487,     0,   488,
     489,   490,     0,     0,     0,     0,     0,     0,   491,     0,
       0,   492,     0,     0,     0,   493,   494,   495,   496,   497,
     498,     0,     0,     0,     0,     0,     0,   499,   500,     0,
     501,   502,   503,     0,   141,   504,   142,   143,   144,   145,
     146,     0,     0,   147,     0,     0,     0,   148,     0,     0,
     149,     0,   150,   151,   152,   153,   154,   155,   156,   157,
       0,   158,     0,     0,     0,   159,  1002,     0,     0,   160,
       0,     0,   161,   162,   163,     0,   164,     0,   165,   166,
       0,     0,   167,     0,     0,   168,   169,     0,   170,   171,
       0,   172,   173,     0,   174,   175,   176,   177,   178,   179,
     180,     0,   181,   182,   183,   184,   185,   186,   187,     0,
     188,   189,   190,   191,   192,   193,   194,   195,     0,   196,
     197,     0,   198,   199,   200,   201,   202,     0,   203,     0,
       0,   204,     0,     0,   205,     0,   206,     0,   207,     0,
     208,     0,     0,     0,   209,   210,   211,     0,     0,   212,
       0,     0,     0,     0,   213,   214,     0,     0,     0,     0,
     215,     0,   216,     0,     0,     0,   217,     0,   218,   219,
     220,   221,   222,     0,     0,     0,   223,     0,     0,   224,
     225,   226,     0,     0,     0,   227,     0,   228,   229,     0,
     230,   231,   232,     0,     0,   233,   234,     0,   235,   236,
     237,   238,   239,   240,   241,     0,     0,   242,   243,   244,
       0,     0,   245,   246,     0,   247,   248,   249,     0,     0,
     250,     0,     0,     0,   251,     0,   252,     0,   253,     0,
     254,   255,   256,   257,   258,     0,   259,     0,   260,     0,
       0,     0,   261,   262,   263,     0,   264,  1003,  1004,     0,
     265,   266,     0,     0,     0,   267,   268,   269,   270,     0,
       0,   271,   272,   273,     0,   274,     0,   275,     0,     0,
       0,     0,   276,   277,     0,     0,     0,   278,     0,   279,
     280,     0,   281,   282,     0,     0,     0,   283,     0,     0,
     284,   285,   286,     0,     0,   287,     0,     0,   288,   289,
       0,     0,     0,     0,     0,   290,   291,     0,   292,     0,
     293,     0,   294,   295,     0,     0,     0,     0,     0,     0,
       0,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,     0,   312,   313,
     314,   315,     0,   316,   317,   318,   319,     0,   320,   321,
       0,     0,     0,     0,   322,   323,   324,   325,   326,   327,
       0,     0,   328,   329,     0,   330,     0,   331,     0,   332,
     333,   334,   335,   336,   337,   338,   339,   340,     0,     0,
     341,   342,     0,     0,   343,   344,   345,   346,     0,     0,
       0,   347,   348,     0,     0,     0,   349,     0,   350,   351,
     352,     0,   353,   354,   355,   356,     0,   357,   358,     0,
       0,     0,     0,     0,     0,     0,     0,   359,   360,   361,
       0,     0,   362,     0,   363,     0,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,     0,     0,   374,   375,
     376,     0,   377,     0,   378,   379,   380,   381,   382,     0,
     383,   384,   385,     0,     0,   386,     0,     0,     0,   387,
     388,   389,   390,   391,     0,     0,   392,   393,   394,   395,
     396,     0,   397,   398,     0,   399,   400,   401,     0,     0,
     402,     0,   403,     0,   404,   405,     0,   406,   407,   408,
       0,     0,     0,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,     0,   420,   421,     0,     0,     0,
     422,   423,   424,   425,     0,     0,     0,   426,     0,     0,
       0,   427,     0,   428,   429,   430,   431,   432,   433,     0,
     434,   435,   436,   437,   438,   439,     0,     0,     0,     0,
       0,     0,   440,   441,     0,   442,     0,     0,   443,     0,
       0,   444,   445,     0,     0,     0,   446,     0,     0,   447,
     448,     0,   449,   450,   451,   452,   453,   454,     0,     0,
     455,   456,   457,   458,     0,   459,   460,     0,   461,     0,
     462,   463,   464,   465,     0,  1005,   466,   467,     0,   468,
     469,   470,   471,     0,     0,     0,     0,     0,   472,   473,
     474,     0,     0,     0,   475,   476,   477,   478,     0,   479,
     480,     0,   481,   482,     0,   483,   484,     0,     0,   485,
       0,     0,   486,     0,   487,     0,   488,   489,   490,     0,
       0,     0,     0,     0,     0,   491,     0,     0,   492,     0,
       0,     0,   493,   494,   495,   496,   497,   498,     0,     0,
       0,     0,     0,     0,   499,   500,     0,   501,   502,   503,
       0,   141,   504,   142,   143,   144,   145,   146,     0,     0,
     147,     0,     0,     0,   148,     0,     0,   149,     0,   150,
     151,   152,   153,   154,   155,   156,   157,     0,   158,     0,
       0,     0,   159,     0,     0,     0,   160,     0,     0,   161,
     162,   163,     0,   164,     0,   165,   166,     0,     0,   167,
       0,     0,   168,   169,     0,   170,   171,     0,   172,   173,
       0,   174,   175,   176,   177,   178,   179,   180,     0,   181,
     182,   183,   184,   185,   186,   187,     0,   188,   189,   190,
     191,   192,   193,   194,   195,     0,   196,   197,     0,   198,
     199,   200,   201,   202,     0,   203,     0,     0,   204,     0,
       0,   205,     0,   206,     0,   207,     0,   208,     0,     0,
       0,   209,   210,   211,     0,     0,   212,     0,     0,     0,
       0,   213,   214,     0,     0,     0,     0,   215,     0,   216,
       0,     0,     0,   217,     0,   218,   219,   220,   221,   222,
       0,     0,     0,   223,     0,     0,   224,   225,   226,     0,
       0,     0,   227,     0,   228,   229,     0,   230,   231,   232,
       0,     0,   233,   234,     0,   235,   236,   237,   238,   239,
     240,   241,     0,     0,   242,   243,   244,     0,     0,   245,
     246,     0,   247,   248,   249,     0,     0,   250,     0,     0,
       0,   251,     0,   252,     0,   253,     0,   254,   255,   256,
     257,   258,     0,   259,     0,   260,     0,     0,     0,   261,
     262,   263,     0,   264,     0,     0,     0,   265,   266,     0,
       0,     0,   267,   268,   269,   270,     0,     0,   271,   272,
     273,     0,   274,     0,   275,     0,     0,     0,     0,   276,
     277,     0,     0,     0,   278,     0,   279,   280,     0,   281,
     282,     0,     0,     0,   283,     0,     0,   284,   285,   286,
       0,     0,   287,     0,     0,   288,   289,     0,     0,     0,
       0,     0,   290,   291,     0,   292,     0,   293,     0,   294,
     295,     0,     0,  1948,     0,     0,     0,     0,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,     0,   312,   313,   314,   315,     0,
     316,   317,   318,   319,     0,   320,   321,     0,     0,     0,
       0,   322,   323,   324,   325,   326,   327,     0,     0,   328,
     329,     0,   330,     0,   331,     0,   332,   333,   334,   335,
     336,   337,   338,   339,   340,     0,     0,   341,   342,     0,
       0,   343,   344,   345,   346,     0,     0,     0,   347,   348,
       0,     0,  1949,   349,     0,   350,   351,   352,     0,   353,
     354,   355,   356,     0,   357,   358,     0,     0,     0,     0,
       0,     0,     0,     0,   359,   360,   361,     0,   748,   362,
       0,   363,     0,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,     0,     0,   374,   375,   376,     0,   377,
       0,   378,   379,   380,   381,   382,     0,   383,   384,   385,
       0,     0,   386,     0,     0,     0,   387,   388,   389,   390,
     391,     0,     0,   392,   393,   394,   395,   396,     0,   397,
     398,     0,   399,   400,   401,     0,     0,   402,     0,   403,
       0,   404,   405,     0,   406,   407,   408,     0,     0,     0,
     409,   410,   411,  1950,   413,   414,   415,   416,   417,   418,
     419,     0,   420,   421,     0,     0,     0,   422,   423,   424,
     425,     0,     0,     0,   426,     0,     0,     0,   427,     0,
     428,   429,   430,   431,   432,   433,     0,   434,   435,   436,
     437,   438,   439,     0,     0,     0,     0,     0,     0,   440,
     441,     0,   442,     0,     0,   443,     0,     0,   444,   445,
       0,     0,     0,   446,     0,     0,   447,   448,     0,   449,
     450,   451,   452,   453,   454,     0,     0,   455,   456,   457,
     458,     0,   459,   460,     0,   461,     0,   462,   463,   464,
     465,     0,     0,   466,   467,     0,   468,   469,   470,   471,
       0,     0,     0,     0,     0,   472,   473,   474,     0,     0,
       0,   475,   476,   477,   478,  1951,   479,   480,     0,   481,
     482,     0,   483,   484,     0,     0,   485,     0,     0,   486,
       0,   487,     0,   488,   489,   490,     0,     0,     0,     0,
       0,     0,   491,     0,     0,   492,     0,     0,     0,   493,
     494,   495,   496,   497,   498,     0,     0,     0,     0,     0,
       0,   499,   500,     0,   501,   502,   503,     0,   141,   504,
     142,   143,   144,   145,   146,     0,     0,   147,     0,     0,
       0,   148,     0,     0,   149,     0,   150,   151,   152,   153,
     154,   155,   156,   157,     0,   158,     0,     0,     0,   159,
       0,     0,     0,   160,     0,     0,   161,   162,   163,     0,
     164,     0,   165,   166,     0,     0,   167,     0,     0,   168,
     169,     0,   170,   171,     0,   172,   173,     0,   174,   175,
     176,   177,   178,   179,   180,     0,   181,   182,   183,   184,
     185,   186,   187,     0,   188,   189,   190,   191,   192,   193,
     194,   195,     0,   196,   197,     0,   198,   199,   200,   201,
     202,     0,   203,     0,     0,   204,     0,     0,   205,     0,
     206,     0,   207,     0,   208,     0,     0,     0,   209,   210,
     211,     0,     0,   212,     0,     0,     0,     0,   213,   214,
       0,     0,     0,     0,   215,     0,   216,     0,     0,     0,
     217,     0,   218,   219,   220,   221,   222,     0,     0,     0,
     223,     0,     0,   224,   225,   226,     0,     0,     0,   227,
       0,   228,   229,     0,   230,   231,   232,     0,     0,   233,
     234,     0,   235,   236,   237,   238,   239,   240,   241,     0,
       0,   242,   243,   244,     0,     0,   245,   246,     0,   247,
     248,   249,     0,     0,   250,     0,     0,     0,   251,     0,
     252,     0,   253,     0,   254,   255,   256,   257,   258,     0,
     259,     0,   260,     0,     0,     0,   261,   262,   263,     0,
     264,     0,     0,     0,   265,   266,     0,     0,     0,   267,
     268,   269,   270,     0,     0,   271,   272,   273,     0,   274,
       0,   275,     0,     0,     0,     0,   276,   277,     0,     0,
       0,   278,     0,   279,   280,     0,   281,   282,     0,     0,
       0,   283,     0,     0,   284,   285,   286,     0,     0,   287,
       0,     0,   288,   289,     0,     0,     0,     0,     0,   290,
     291,     0,   292,     0,   293,     0,   294,   295,     0,     0,
    1948,     0,     0,     0,     0,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,     0,   312,   313,   314,   315,     0,   316,   317,   318,
     319,     0,   320,   321,     0,     0,     0,     0,   322,   323,
     324,   325,   326,   327,     0,     0,   328,   329,     0,   330,
       0,   331,     0,   332,   333,   334,   335,   336,   337,   338,
     339,   340,     0,     0,   341,   342,     0,     0,   343,   344,
     345,   346,     0,     0,     0,   347,   348,     0,     0,  1949,
     349,     0,   350,   351,   352,     0,   353,   354,   355,   356,
       0,   357,   358,     0,     0,     0,     0,     0,     0,     0,
       0,   359,   360,   361,     0,   748,   362,     0,   363,     0,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
       0,     0,   374,   375,   376,     0,   377,     0,   378,   379,
     380,   381,   382,     0,   383,   384,   385,     0,     0,   386,
       0,     0,     0,   387,   388,   389,   390,   391,     0,     0,
     392,   393,   394,   395,   396,     0,   397,   398,     0,   399,
     400,   401,     0,     0,   402,     0,   403,     0,   404,   405,
       0,   406,   407,   408,     0,     0,     0,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,     0,   420,
     421,     0,     0,     0,   422,   423,   424,   425,     0,     0,
       0,   426,     0,     0,     0,   427,     0,   428,   429,   430,
     431,   432,   433,     0,   434,   435,   436,   437,   438,   439,
       0,     0,     0,     0,     0,     0,   440,   441,     0,   442,
       0,     0,   443,     0,     0,   444,   445,     0,     0,     0,
     446,     0,     0,   447,   448,     0,   449,   450,   451,   452,
     453,   454,     0,     0,   455,   456,   457,   458,     0,   459,
     460,     0,   461,     0,   462,   463,   464,   465,     0,     0,
     466,   467,     0,   468,   469,   470,   471,     0,     0,     0,
       0,     0,   472,   473,   474,     0,     0,     0,   475,   476,
     477,   478,  1951,   479,   480,     0,   481,   482,     0,   483,
     484,     0,     0,   485,     0,     0,   486,     0,   487,     0,
     488,   489,   490,     0,     0,     0,     0,     0,     0,   491,
       0,     0,   492,     0,     0,     0,   493,   494,   495,   496,
     497,   498,     0,     0,     0,     0,     0,     0,   499,   500,
       0,   501,   502,   503,     0,   141,   504,   142,   143,   144,
     145,   146,     0,     0,   147,     0,     0,     0,   148,     0,
       0,   149,     0,   150,   151,   152,   153,   154,   155,   156,
     157,     0,   158,     0,     0,  1410,   159,     0,     0,     0,
     160,     0,     0,   161,   162,   163,     0,   164,     0,   165,
     166,     0,     0,   167,     0,     0,   168,   169,     0,   170,
     171,     0,   172,   173,     0,   174,   175,   176,   177,   178,
     179,   180,     0,   181,   182,   183,   184,   185,   186,   187,
       0,   188,   189,   190,   191,   192,   193,   194,   195,     0,
     196,   197,     0,   198,   199,   200,   201,   202,     0,   203,
       0,     0,   204,     0,     0,   205,     0,   206,     0,   207,
       0,   208,     0,     0,     0,   209,   210,   211,     0,     0,
     212,     0,     0,     0,     0,   213,   214,     0,     0,     0,
    1411,   215,     0,   216,     0,     0,     0,   217,     0,   218,
     219,   220,   221,   222,     0,     0,     0,   223,     0,     0,
     224,   225,   226,     0,     0,     0,   227,     0,   228,   229,
       0,   230,   231,   232,     0,     0,   233,   234,     0,   235,
     236,   237,   238,   239,   240,   241,     0,     0,   242,   243,
     244,     0,     0,   245,   246,     0,   247,   248,   249,     0,
       0,   250,     0,     0,     0,   251,     0,   252,     0,   253,
       0,   254,   255,   256,   257,   258,     0,   259,     0,   260,
       0,     0,     0,   261,   262,   263,     0,   264,     0,     0,
       0,   265,   266,     0,     0,     0,   267,   268,   269,   270,
       0,     0,   271,   272,   273,     0,   274,     0,   275,     0,
       0,     0,     0,   276,   277,     0,     0,     0,   278,     0,
     279,   280,     0,   281,   282,     0,     0,     0,   283,     0,
       0,   284,   285,   286,     0,     0,   287,     0,     0,   288,
     289,   632,     0,     0,     0,     0,   290,   291,     0,   292,
       0,   293,     0,   294,   295,     0,     0,     0,     0,     0,
       0,     0,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,     0,   312,
     313,   314,   315,     0,   316,   317,   318,   319,     0,   320,
     321,     0,     0,     0,     0,   322,   323,   324,   325,   326,
     327,     0,     0,   328,   329,     0,   330,     0,   331,     0,
     332,   333,   334,   335,   336,   337,   338,   339,   340,     0,
       0,   341,   342,     0,     0,   343,   344,   345,   346,     0,
       0,     0,   347,   348,     0,     0,     0,   349,     0,   350,
     351,   352,     0,   353,   354,   355,   356,     0,   357,   358,
       0,     0,     0,     0,     0,     0,     0,     0,   359,   360,
     361,     0,     0,   362,     0,   363,     0,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,     0,     0,   374,
     375,   376,     0,   377,     0,   378,   379,   380,   381,   382,
       0,   383,   384,   385,     0,     0,   386,     0,     0,     0,
     387,   388,   389,   390,   391,     0,     0,   392,   393,   394,
     395,   396,     0,   397,   398,     0,   399,   400,   401,     0,
       0,   402,     0,   403,     0,   404,   405,     0,   406,   407,
     408,     0,     0,     0,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,     0,   420,   421,     0,     0,
       0,   422,   423,   424,   425,     0,     0,     0,   426,     0,
       0,     0,   427,     0,   428,   429,   430,   431,   432,   433,
       0,   434,   435,   436,   437,   438,   439,     0,     0,     0,
       0,     0,     0,   440,   441,     0,   442,     0,     0,   443,
       0,     0,   444,   445,     0,     0,     0,   446,     0,     0,
     447,   448,     0,   449,   450,   451,   452,   453,   454,     0,
       0,   455,   456,   457,   458,     0,   459,   460,     0,   461,
       0,   462,   463,   464,   465,     0,   138,   466,   467,     0,
     468,   469,   470,   471,     0,     0,     0,     0,     0,   472,
     473,   474,     0,     0,     0,   475,   476,   477,   478,     0,
     479,   480,     0,   481,   482,     0,   483,   484,     0,     0,
     485,     0,     0,   486,     0,   487,     0,   488,   489,   490,
       0,     0,     0,     0,     0,     0,   491,     0,     0,   492,
       0,     0,     0,   493,   494,   495,   496,   497,   498,     0,
       0,     0,     0,     0,     0,   499,   500,     0,   501,   502,
     503,     0,   141,   504,   142,   143,   144,   145,   146,     0,
       0,   147,     0,     0,     0,   148,     0,     0,   149,     0,
     150,   151,   152,   153,   154,   155,   156,   157,     0,   158,
       0,     0,     0,   159,     0,     0,     0,   160,     0,     0,
     161,   162,   163,     0,   164,     0,   165,   166,     0,     0,
     167,     0,     0,   168,   169,     0,   170,   171,     0,   172,
     173,     0,   174,   175,   176,   177,   178,   179,   180,     0,
     181,   182,   183,   184,   185,   186,   187,     0,   188,   189,
     190,   191,   192,   193,   194,   195,     0,   196,   197,     0,
     198,   199,   200,   201,   202,     0,   203,     0,     0,   204,
       0,     0,   205,     0,   206,     0,   207,     0,   208,     0,
       0,     0,   209,   210,   211,     0,     0,   212,     0,     0,
       0,     0,   213,   214,     0,     0,     0,     0,   215,     0,
     216,     0,     0,     0,   217,     0,   218,   219,   220,   221,
     222,     0,     0,     0,   223,     0,     0,   224,   225,   226,
       0,     0,     0,   227,     0,   228,   229,     0,   230,   231,
     232,     0,     0,   233,   234,     0,   235,   236,   237,   238,
     239,   240,   241,     0,     0,   242,   243,   244,     0,     0,
     245,   246,     0,   247,   248,   249,     0,     0,   250,     0,
       0,     0,   251,     0,   252,     0,   253,     0,   254,   255,
     256,   257,   258,     0,   259,     0,   260,     0,     0,     0,
     261,   262,   263,     0,   264,     0,     0,     0,   265,   266,
       0,     0,     0,   267,   268,   269,   270,     0,     0,   271,
     272,   273,     0,   274,     0,   275,     0,     0,     0,     0,
     276,   277,     0,     0,     0,   278,     0,   279,   280,     0,
     281,   282,     0,     0,     0,   283,     0,     0,   284,   285,
     286,     0,     0,   287,     0,     0,   288,   289,     0,     0,
       0,     0,     0,   290,   291,     0,   292,     0,   293,     0,
     294,   295,     0,     0,  1948,     0,     0,     0,     0,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,     0,   312,   313,   314,   315,
       0,   316,   317,   318,   319,     0,   320,   321,     0,     0,
       0,     0,   322,   323,   324,   325,   326,   327,     0,     0,
     328,   329,     0,   330,     0,   331,     0,   332,   333,   334,
     335,   336,   337,   338,   339,   340,     0,     0,   341,   342,
       0,     0,   343,   344,   345,   346,     0,     0,     0,   347,
     348,     0,     0,  1949,   349,     0,   350,   351,   352,     0,
     353,   354,   355,   356,     0,   357,   358,     0,     0,     0,
       0,     0,     0,     0,     0,   359,   360,   361,     0,   748,
     362,     0,   363,     0,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,     0,     0,   374,   375,   376,     0,
     377,     0,   378,   379,   380,   381,   382,     0,   383,   384,
     385,     0,     0,   386,     0,     0,     0,   387,   388,   389,
     390,   391,     0,     0,   392,   393,   394,   395,   396,     0,
     397,   398,     0,   399,   400,   401,     0,     0,   402,     0,
     403,     0,   404,   405,     0,   406,   407,   408,     0,     0,
       0,   409,   410,   411,  3907,   413,   414,   415,   416,   417,
     418,   419,     0,   420,   421,     0,     0,     0,   422,   423,
     424,   425,     0,     0,     0,   426,     0,     0,     0,   427,
       0,   428,   429,   430,   431,   432,   433,     0,   434,   435,
     436,   437,   438,   439,     0,     0,     0,     0,     0,     0,
     440,   441,     0,   442,     0,     0,   443,     0,     0,   444,
     445,     0,     0,     0,   446,     0,     0,   447,   448,     0,
     449,   450,   451,   452,   453,   454,     0,     0,   455,   456,
     457,   458,     0,   459,   460,     0,   461,     0,   462,   463,
     464,   465,     0,     0,   466,   467,     0,   468,   469,   470,
     471,     0,     0,     0,     0,     0,   472,   473,   474,     0,
       0,     0,   475,   476,   477,   478,  1951,   479,   480,     0,
     481,   482,     0,   483,   484,     0,     0,   485,     0,     0,
     486,     0,   487,     0,   488,   489,   490,     0,     0,     0,
       0,     0,     0,   491,     0,     0,   492,     0,     0,     0,
     493,   494,   495,   496,   497,   498,     0,     0,     0,     0,
       0,     0,   499,   500,     0,   501,   502,   503,     0,   141,
     504,   142,   143,   144,   145,   146,     0,     0,   147,     0,
       0,     0,   148,     0,     0,   149,     0,   150,   151,   152,
     153,   154,   155,   156,   157,     0,   158,     0,     0,     0,
     159,     0,     0,     0,   160,     0,     0,   161,   162,   163,
       0,   164,     0,   165,   166,     0,     0,   167,     0,     0,
     168,   169,     0,   170,   171,     0,   172,   173,     0,   174,
     175,   176,   177,   178,   179,   180,     0,   181,   182,   183,
     184,   185,   186,   187,     0,   188,   189,   190,   191,   192,
     193,   194,   195,     0,   196,   197,     0,   198,   199,   200,
     201,   202,     0,   203,     0,     0,   204,     0,     0,   205,
       0,   206,  1025,   207,     0,   208,     0,     0,     0,   209,
     210,   211,     0,     0,   212,     0,     0,     0,     0,   213,
     214,     0,     0,     0,     0,   215,     0,   216,     0,     0,
       0,   217,     0,   218,   219,   220,   221,   222,     0,     0,
       0,   223,     0,     0,   224,   225,   226,     0,     0,     0,
     227,     0,   228,   229,     0,   230,   231,   232,     0,     0,
     233,   234,     0,   235,   236,   237,   238,   239,   240,   241,
       0,     0,   242,   243,   244,     0,     0,   245,   246,     0,
     247,   248,   249,     0,     0,   250,     0,     0,     0,   251,
       0,   252,     0,   253,     0,   254,   255,   256,   257,   258,
       0,   259,     0,   260,     0,     0,     0,   261,   262,   263,
       0,   264,     0,     0,     0,   265,   266,     0,     0,     0,
     267,   268,   269,   270,     0,     0,   271,   272,   273,     0,
     274,     0,   275,     0,     0,     0,     0,   276,   277,     0,
       0,     0,   278,     0,   279,   280,     0,   281,   282,     0,
       0,     0,   283,     0,     0,   284,   285,   286,     0,     0,
     287,     0,     0,   288,   289,   632,     0,     0,     0,     0,
     290,   291,     0,   292,     0,   293,     0,   294,   295,     0,
       0,     0,     0,     0,     0,     0,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,     0,   312,   313,   314,   315,     0,   316,   317,
     318,   319,     0,   320,   321,     0,     0,     0,     0,   322,
     323,   324,   325,   326,   327,     0,     0,   328,   329,     0,
     330,     0,   331,     0,   332,   333,   334,   335,   336,   337,
     338,   339,   340,     0,     0,   341,   342,     0,     0,   343,
     344,   345,   346,     0,     0,     0,   347,   348,     0,     0,
       0,   349,     0,   350,   351,   352,     0,   353,   354,   355,
     356,     0,   357,   358,     0,     0,     0,     0,     0,     0,
       0,     0,   359,   360,   361,     0,     0,   362,     0,   363,
       0,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,     0,     0,   374,   375,   376,     0,   377,     0,   378,
     379,   380,   381,   382,     0,   383,   384,   385,     0,     0,
     386,     0,     0,     0,   387,   388,   389,   390,   391,     0,
       0,   392,   393,   394,   395,   396,     0,   397,   398,     0,
     399,   400,   401,     0,     0,   402,     0,   403,     0,   404,
     405,     0,   406,   407,   408,     0,     0,     0,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,     0,
     420,   421,     0,     0,     0,   422,   423,   424,   425,     0,
       0,     0,   426,     0,     0,     0,   427,     0,   428,   429,
     430,   431,   432,   433,     0,   434,   435,   436,   437,   438,
     439,     0,     0,     0,     0,     0,     0,   440,   441,     0,
     442,     0,     0,   443,     0,     0,   444,   445,     0,     0,
       0,   446,     0,     0,   447,   448,     0,   449,   450,   451,
     452,   453,   454,     0,     0,   455,   456,   457,   458,     0,
     459,   460,     0,   461,     0,   462,   463,   464,   465,     0,
     138,   466,   467,     0,   468,   469,   470,   471,     0,     0,
       0,     0,     0,   472,   473,   474,     0,     0,     0,   475,
     476,   477,   478,     0,   479,   480,     0,   481,   482,     0,
     483,   484,     0,     0,   485,     0,     0,   486,     0,   487,
       0,   488,   489,   490,     0,     0,     0,     0,     0,     0,
     491,     0,     0,   492,     0,     0,     0,   493,   494,   495,
     496,   497,   498,     0,     0,     0,     0,     0,     0,   499,
     500,     0,   501,   502,   503,     0,   141,   504,   142,   143,
     144,   145,   146,  1446,     0,   147,     0,     0,     0,   148,
       0,     0,   149,     0,   150,   151,   152,   153,   154,   155,
     156,   157,     0,   158,     0,     0,     0,   159,     0,     0,
       0,   160,     0,     0,   161,   162,   163,     0,   164,     0,
     165,   166,     0,     0,   167,     0,     0,   168,   169,     0,
     170,   171,     0,   172,   173,     0,   174,   175,   176,   177,
     178,   179,   180,     0,   181,   182,   183,   184,   185,   186,
     187,     0,   188,   189,   190,   191,   192,   193,   194,   195,
       0,   196,   197,     0,   198,   199,   200,   201,   202,     0,
     203,     0,     0,   204,     0,     0,   205,     0,   206,     0,
     207,     0,   208,     0,     0,     0,   209,   210,   211,     0,
       0,   212,     0,     0,     0,     0,   213,   214,     0,     0,
       0,     0,   215,     0,   216,     0,     0,     0,   217,     0,
     218,   219,   220,   221,   222,     0,     0,     0,   223,     0,
       0,   224,   225,   226,     0,     0,     0,   227,     0,   228,
     229,     0,   230,   231,   232,     0,     0,   233,   234,     0,
     235,   236,   237,   238,   239,   240,   241,     0,     0,   242,
     243,   244,     0,     0,   245,   246,     0,   247,   248,   249,
       0,     0,   250,     0,     0,     0,   251,     0,   252,     0,
     253,     0,   254,   255,   256,   257,   258,     0,   259,     0,
     260,     0,     0,     0,   261,   262,   263,     0,   264,     0,
       0,     0,   265,   266,     0,     0,     0,   267,   268,   269,
     270,     0,     0,   271,   272,   273,     0,   274,     0,   275,
       0,     0,     0,     0,   276,   277,     0,     0,     0,   278,
       0,   279,   280,     0,   281,   282,     0,     0,     0,   283,
       0,     0,   284,   285,   286,     0,     0,   287,     0,     0,
     288,   289,   632,     0,     0,     0,     0,   290,   291,     0,
     292,     0,   293,     0,   294,   295,     0,     0,     0,     0,
       0,     0,     0,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,     0,
     312,   313,   314,   315,     0,   316,   317,   318,   319,     0,
     320,   321,     0,     0,     0,     0,   322,   323,   324,   325,
     326,   327,     0,     0,   328,   329,     0,   330,     0,   331,
       0,   332,   333,   334,   335,   336,   337,   338,   339,   340,
       0,     0,   341,   342,     0,     0,   343,   344,   345,   346,
       0,     0,     0,   347,   348,     0,     0,     0,   349,     0,
     350,   351,   352,     0,   353,   354,   355,   356,     0,   357,
     358,     0,     0,     0,     0,     0,     0,     0,     0,   359,
     360,   361,     0,     0,   362,     0,   363,     0,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,     0,     0,
     374,   375,   376,     0,   377,     0,   378,   379,   380,   381,
     382,     0,   383,   384,   385,     0,     0,   386,     0,     0,
       0,   387,   388,   389,   390,   391,     0,     0,   392,   393,
     394,   395,   396,     0,   397,   398,     0,   399,   400,   401,
       0,     0,   402,     0,   403,     0,   404,   405,     0,   406,
     407,   408,     0,     0,     0,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,     0,   420,   421,     0,
       0,     0,   422,   423,   424,   425,     0,     0,     0,   426,
       0,     0,     0,   427,     0,   428,   429,   430,   431,   432,
     433,     0,   434,   435,   436,   437,   438,   439,     0,     0,
       0,     0,     0,     0,   440,   441,     0,   442,     0,     0,
     443,     0,     0,   444,   445,     0,     0,     0,   446,     0,
       0,   447,   448,     0,   449,   450,   451,   452,   453,   454,
       0,     0,   455,   456,   457,   458,     0,   459,   460,     0,
     461,     0,   462,   463,   464,   465,     0,   138,   466,   467,
       0,   468,   469,   470,   471,     0,     0,     0,     0,     0,
     472,   473,   474,     0,     0,     0,   475,   476,   477,   478,
       0,   479,   480,     0,   481,   482,     0,   483,   484,     0,
       0,   485,     0,     0,   486,     0,   487,     0,   488,   489,
     490,     0,     0,     0,     0,     0,     0,   491,     0,     0,
     492,     0,     0,     0,   493,   494,   495,   496,   497,   498,
       0,     0,     0,     0,     0,     0,   499,   500,     0,   501,
     502,   503,     0,   141,   504,   142,   143,   144,   145,   146,
       0,     0,   147,     0,     0,     0,   148,     0,     0,   149,
       0,   150,   151,   152,   153,   154,   155,   156,   157,     0,
     158,     0,     0,     0,   159,     0,     0,     0,   160,     0,
       0,   161,   162,   163,     0,   164,     0,   165,   166,     0,
       0,   167,     0,     0,   168,   169,     0,   170,   171,     0,
     172,   173,     0,   174,   175,   176,   177,   178,   179,   180,
       0,   181,   182,   183,   184,   185,   186,   187,     0,   188,
     189,   190,   191,   192,   193,   194,   195,     0,   196,   197,
       0,   198,   199,   200,   201,   202,     0,   203,     0,     0,
     204,     0,     0,   205,     0,   206,     0,   207,     0,   208,
       0,     0,     0,   209,   210,   211,     0,     0,   212,     0,
       0,     0,     0,   213,   214,     0,     0,     0,  2399,   215,
       0,   216,     0,     0,     0,   217,     0,   218,   219,   220,
     221,   222,     0,     0,     0,   223,     0,     0,   224,   225,
     226,     0,     0,     0,   227,     0,   228,   229,     0,   230,
     231,   232,     0,     0,   233,   234,     0,   235,   236,   237,
     238,   239,   240,   241,     0,     0,   242,   243,   244,     0,
       0,   245,   246,     0,   247,   248,   249,     0,     0,   250,
       0,     0,     0,   251,     0,   252,     0,   253,     0,   254,
     255,   256,   257,   258,     0,   259,     0,   260,     0,     0,
       0,   261,   262,   263,     0,   264,     0,     0,     0,   265,
     266,     0,     0,     0,   267,   268,   269,   270,     0,     0,
     271,   272,   273,     0,   274,     0,   275,     0,     0,     0,
       0,   276,   277,     0,     0,     0,   278,     0,   279,   280,
       0,   281,   282,     0,     0,     0,   283,     0,     0,   284,
     285,   286,     0,     0,   287,     0,     0,   288,   289,   632,
       0,     0,     0,     0,   290,   291,     0,   292,     0,   293,
       0,   294,   295,     0,     0,     0,     0,     0,     0,     0,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,     0,   312,   313,   314,
     315,     0,   316,   317,   318,   319,     0,   320,   321,     0,
       0,     0,     0,   322,   323,   324,   325,   326,   327,     0,
       0,   328,   329,     0,   330,     0,   331,     0,   332,   333,
     334,   335,   336,   337,   338,   339,   340,     0,     0,   341,
     342,     0,     0,   343,   344,   345,   346,     0,     0,     0,
     347,   348,     0,     0,     0,   349,     0,   350,   351,   352,
       0,   353,   354,   355,   356,     0,   357,   358,     0,     0,
       0,     0,     0,     0,     0,     0,   359,   360,   361,     0,
       0,   362,     0,   363,     0,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,     0,     0,   374,   375,   376,
       0,   377,     0,   378,   379,   380,   381,   382,     0,   383,
     384,   385,     0,     0,   386,     0,     0,     0,   387,   388,
     389,   390,   391,     0,     0,   392,   393,   394,   395,   396,
       0,   397,   398,     0,   399,   400,   401,     0,     0,   402,
       0,   403,     0,   404,   405,     0,   406,   407,   408,     0,
       0,     0,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,     0,   420,   421,     0,     0,     0,   422,
     423,   424,   425,     0,     0,     0,   426,     0,     0,     0,
     427,     0,   428,   429,   430,   431,   432,   433,     0,   434,
     435,   436,   437,   438,   439,     0,     0,     0,     0,     0,
       0,   440,   441,     0,   442,     0,     0,   443,     0,     0,
     444,   445,     0,     0,     0,   446,     0,     0,   447,   448,
       0,   449,   450,   451,   452,   453,   454,     0,     0,   455,
     456,   457,   458,     0,   459,   460,     0,   461,     0,   462,
     463,   464,   465,     0,   138,   466,   467,     0,   468,   469,
     470,   471,     0,     0,     0,     0,     0,   472,   473,   474,
       0,     0,     0,   475,   476,   477,   478,     0,   479,   480,
       0,   481,   482,     0,   483,   484,     0,     0,   485,     0,
       0,   486,     0,   487,     0,   488,   489,   490,     0,     0,
       0,     0,     0,     0,   491,     0,     0,   492,     0,     0,
       0,   493,   494,   495,   496,   497,   498,     0,     0,     0,
       0,     0,     0,   499,   500,     0,   501,   502,   503,     0,
     141,   504,   142,   143,   144,   145,   146,     0,     0,   147,
       0,     0,     0,   148,     0,     0,   149,     0,   150,   151,
     152,   153,   154,   155,   156,   157,     0,   158,     0,     0,
    1410,   159,     0,     0,     0,   160,     0,     0,   161,   162,
     163,     0,   164,     0,   165,   166,     0,     0,   167,     0,
       0,   168,   169,     0,   170,   171,     0,   172,   173,     0,
     174,   175,   176,   177,   178,   179,   180,     0,   181,   182,
     183,   184,   185,   186,   187,     0,   188,   189,   190,   191,
     192,   193,   194,   195,     0,   196,   197,     0,   198,   199,
     200,   201,   202,     0,   203,     0,     0,   204,     0,     0,
     205,     0,   206,     0,   207,     0,   208,     0,     0,     0,
     209,   210,   211,     0,     0,   212,     0,     0,     0,     0,
     213,   214,     0,     0,     0,     0,   215,     0,   216,     0,
       0,     0,   217,     0,   218,   219,   220,   221,   222,     0,
       0,     0,   223,     0,     0,   224,   225,   226,     0,     0,
       0,   227,     0,   228,   229,     0,   230,   231,   232,     0,
       0,   233,   234,     0,   235,   236,   237,   238,   239,   240,
     241,     0,     0,   242,   243,   244,     0,     0,   245,   246,
       0,   247,   248,   249,     0,     0,   250,     0,     0,     0,
     251,     0,   252,     0,   253,     0,   254,   255,   256,   257,
     258,     0,   259,     0,   260,     0,     0,     0,   261,   262,
     263,     0,   264,     0,     0,     0,   265,   266,     0,     0,
       0,   267,   268,   269,   270,     0,     0,   271,   272,   273,
       0,   274,     0,   275,     0,     0,     0,     0,   276,   277,
       0,     0,     0,   278,     0,   279,   280,     0,   281,   282,
       0,     0,     0,   283,     0,     0,   284,   285,   286,     0,
       0,   287,     0,     0,   288,   289,   632,     0,     0,     0,
       0,   290,   291,     0,   292,     0,   293,     0,   294,   295,
       0,     0,     0,     0,     0,     0,     0,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,     0,   312,   313,   314,   315,     0,   316,
     317,   318,   319,     0,   320,   321,     0,     0,     0,     0,
     322,   323,   324,   325,   326,   327,     0,     0,   328,   329,
       0,   330,     0,   331,     0,   332,   333,   334,   335,   336,
     337,   338,   339,   340,     0,     0,   341,   342,     0,     0,
     343,   344,   345,   346,     0,     0,     0,   347,   348,     0,
       0,     0,   349,     0,   350,   351,   352,     0,   353,   354,
     355,   356,     0,   357,   358,     0,     0,     0,     0,     0,
       0,     0,     0,   359,   360,   361,     0,     0,   362,     0,
     363,     0,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,     0,     0,   374,   375,   376,     0,   377,     0,
     378,   379,   380,   381,   382,     0,   383,   384,   385,     0,
       0,   386,     0,     0,     0,   387,   388,   389,   390,   391,
       0,     0,   392,   393,   394,   395,   396,     0,   397,   398,
       0,   399,   400,   401,     0,     0,   402,     0,   403,     0,
     404,   405,     0,   406,   407,   408,     0,     0,     0,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
       0,   420,   421,     0,     0,     0,   422,   423,   424,   425,
       0,     0,     0,   426,     0,     0,     0,   427,     0,   428,
     429,   430,   431,   432,   433,     0,   434,   435,   436,   437,
     438,   439,     0,     0,     0,     0,     0,     0,   440,   441,
       0,   442,     0,     0,   443,     0,     0,   444,   445,     0,
       0,     0,   446,     0,     0,   447,   448,     0,   449,   450,
     451,   452,   453,   454,     0,     0,   455,   456,   457,   458,
       0,   459,   460,     0,   461,     0,   462,   463,   464,   465,
       0,   138,   466,   467,     0,   468,   469,   470,   471,     0,
       0,     0,     0,     0,   472,   473,   474,     0,     0,     0,
     475,   476,   477,   478,     0,   479,   480,     0,   481,   482,
       0,   483,   484,     0,     0,   485,     0,     0,   486,     0,
     487,     0,   488,   489,   490,     0,     0,     0,     0,     0,
       0,   491,     0,     0,   492,     0,     0,     0,   493,   494,
     495,   496,   497,   498,     0,     0,     0,     0,     0,     0,
     499,   500,     0,   501,   502,   503,     0,   141,   504,   142,
     143,   144,   145,   146,     0,     0,   147,     0,     0,     0,
     148,     0,     0,   149,     0,   150,   151,   152,   153,   154,
     155,   156,   157,     0,   158,     0,     0,     0,   159,     0,
       0,     0,   160,     0,     0,   161,   162,   163,     0,   164,
       0,   165,   166,     0,     0,   167,     0,     0,   168,   169,
       0,   170,   171,     0,   172,   173,     0,   174,   175,   176,
     177,   178,   179,   180,     0,   181,   182,   183,   184,   185,
     186,   187,     0,   188,   189,   190,   191,   192,   193,   194,
     195,     0,   196,   197,     0,   198,   199,   200,   201,   202,
       0,   203,     0,     0,   204,     0,     0,   205,     0,   206,
       0,   207,     0,   208,     0,     0,     0,   209,   210,   211,
       0,     0,   212,     0,     0,     0,     0,   213,   214,     0,
       0,     0,     0,   215,     0,   216,     0,     0,     0,   217,
       0,   218,   219,   220,   221,   222,     0,     0,     0,   223,
       0,     0,   224,   225,   226,     0,     0,     0,   227,     0,
     228,   229,     0,   230,   231,   232,     0,     0,   233,   234,
       0,   235,   236,   237,   238,   239,   240,   241,     0,     0,
     242,   243,   244,     0,     0,   245,   246,     0,   247,   248,
     249,     0,     0,   250,     0,     0,     0,   251,     0,   252,
       0,   253,     0,   254,   255,   256,   257,   258,     0,   259,
       0,   260,     0,     0,     0,   261,   262,   263,     0,   264,
       0,     0,     0,   265,   266,     0,     0,     0,   267,   268,
     269,   270,     0,     0,   271,   272,   273,     0,   274,     0,
     275,     0,     0,     0,     0,   276,   277,     0,     0,     0,
     278,     0,   279,   280,     0,   281,   282,     0,     0,     0,
     283,     0,     0,   284,   285,   286,     0,     0,   287,     0,
       0,   288,   289,   632,     0,     0,     0,     0,   290,   291,
       0,   292,     0,   293,     0,   294,   295,     0,     0,     0,
       0,     0,     0,     0,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
       0,   312,   313,   314,   315,     0,   316,   317,   318,   319,
       0,   320,   321,     0,     0,     0,     0,   322,   323,   324,
     325,   326,   327,     0,     0,   328,   329,     0,   330,     0,
     331,     0,   332,   333,   334,   335,   336,   337,   338,   339,
     340,     0,     0,   341,   342,     0,     0,   343,   344,   345,
     346,     0,     0,     0,   347,   348,     0,     0,     0,   349,
       0,   350,   351,   352,     0,   353,   354,   355,   356,     0,
     357,   358,     0,     0,     0,     0,     0,     0,     0,     0,
     359,   360,   361,     0,     0,   362,     0,   363,     0,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,     0,
       0,   374,   375,   376,     0,   377,     0,   378,   379,   380,
     381,   382,     0,   383,   384,   385,     0,     0,   386,     0,
       0,     0,   387,   388,   389,   390,   391,     0,     0,   392,
     393,   394,   395,   396,     0,   397,   398,     0,   399,   400,
     401,     0,     0,   402,     0,   403,     0,   404,   405,     0,
     406,   407,   408,     0,     0,     0,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,     0,   420,   421,
       0,     0,     0,   422,   423,   424,   425,     0,     0,     0,
     426,     0,     0,     0,   427,     0,   428,   429,   430,   431,
     432,   433,     0,   434,   435,   436,   437,   438,   439,     0,
       0,     0,     0,     0,     0,   440,   441,     0,   442,     0,
       0,   443,     0,     0,   444,   445,     0,     0,     0,   446,
       0,     0,   447,   448,     0,   449,   450,   451,   452,   453,
     454,     0,     0,   455,   456,   457,   458,     0,   459,   460,
       0,   461,     0,   462,   463,   464,   465,     0,   138,   466,
     467,     0,   468,   469,   470,   471,     0,     0,     0,     0,
       0,   472,   473,   474,     0,     0,     0,   475,   476,   477,
     478,     0,   479,   480,     0,   481,   482,     0,   483,   484,
       0,     0,   485,     0,     0,   486,     0,   487,     0,   488,
     489,   490,     0,     0,     0,     0,     0,     0,   491,     0,
       0,   492,     0,     0,     0,   493,   494,   495,   496,   497,
     498,     0,     0,     0,     0,     0,     0,   499,   500,     0,
     501,   502,   503,     0,   141,   504,   142,   143,   144,   145,
     146,     0,     0,   147,     0,     0,     0,   148,  2823,     0,
     149,     0,   150,   151,   152,   153,   154,   155,   156,   157,
       0,   158,     0,     0,     0,   159,     0,     0,     0,   160,
       0,     0,   161,   162,   163,     0,   164,     0,   165,   166,
       0,     0,   167,     0,     0,   168,   169,     0,   170,   171,
       0,   172,   173,     0,   174,   175,   176,   177,   178,   179,
     180,     0,   181,   182,   183,   184,   185,   186,   187,     0,
     188,   189,   190,   191,   192,   193,   194,   195,     0,   196,
     197,     0,   198,   199,   200,   201,   202,     0,   203,     0,
       0,   204,     0,     0,   205,     0,   206,     0,   207,     0,
     208,     0,     0,     0,   209,   210,   211,     0,     0,   212,
       0,     0,     0,     0,   213,   214,     0,     0,     0,     0,
     215,     0,   216,     0,     0,     0,   217,     0,   218,   219,
     220,   221,   222,     0,     0,     0,   223,     0,     0,   224,
     225,   226,     0,     0,     0,   227,     0,   228,   229,     0,
     230,   231,   232,     0,     0,   233,   234,     0,   235,   236,
     237,   238,   239,   240,   241,     0,     0,   242,   243,   244,
       0,     0,   245,   246,     0,   247,   248,   249,     0,     0,
     250,     0,     0,     0,   251,     0,   252,     0,   253,     0,
     254,   255,   256,   257,   258,     0,   259,     0,   260,     0,
       0,     0,   261,   262,   263,     0,   264,     0,     0,     0,
     265,   266,     0,     0,     0,   267,   268,   269,   270,     0,
       0,   271,   272,   273,     0,   274,     0,   275,     0,     0,
       0,     0,   276,   277,     0,     0,     0,   278,     0,   279,
     280,     0,   281,   282,     0,     0,     0,   283,     0,     0,
     284,   285,   286,     0,     0,   287,     0,     0,   288,   289,
       0,     0,     0,     0,     0,   290,   291,     0,   292,     0,
     293,     0,   294,   295,     0,     0,     0,     0,     0,     0,
       0,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,     0,   312,   313,
     314,   315,     0,   316,   317,   318,   319,     0,   320,   321,
       0,     0,     0,     0,   322,   323,   324,   325,   326,   327,
       0,     0,   328,   329,     0,   330,     0,   331,     0,   332,
     333,   334,   335,   336,   337,   338,   339,   340,     0,     0,
     341,   342,     0,     0,   343,   344,   345,   346,     0,     0,
       0,   347,   348,     0,     0,     0,   349,     0,   350,   351,
     352,     0,   353,   354,   355,   356,     0,   357,   358,     0,
       0,     0,     0,     0,     0,     0,     0,   359,   360,   361,
       0,     0,   362,     0,   363,     0,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,     0,     0,   374,   375,
     376,     0,   377,     0,   378,   379,   380,   381,   382,     0,
     383,   384,   385,     0,     0,   386,     0,     0,     0,   387,
     388,   389,   390,   391,     0,     0,   392,   393,   394,   395,
     396,     0,   397,   398,     0,   399,   400,   401,     0,     0,
     402,     0,   403,     0,   404,   405,     0,   406,   407,   408,
       0,     0,     0,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,     0,   420,   421,     0,     0,     0,
     422,   423,   424,   425,     0,     0,     0,   426,     0,     0,
       0,   427,     0,   428,   429,   430,   431,   432,   433,     0,
     434,   435,   436,   437,   438,   439,     0,     0,     0,     0,
       0,     0,   440,   441,     0,   442,     0,     0,   443,     0,
       0,   444,   445,     0,     0,     0,   446,     0,     0,   447,
     448,     0,   449,   450,   451,   452,   453,   454,     0,     0,
     455,   456,   457,   458,     0,   459,   460,     0,   461,     0,
     462,   463,   464,   465,     0,   138,   466,   467,     0,   468,
     469,   470,   471,     0,     0,     0,     0,     0,   472,   473,
     474,     0,     0,     0,   475,   476,   477,   478,     0,   479,
     480,     0,   481,   482,     0,   483,   484,     0,     0,   485,
       0,     0,   486,     0,   487,     0,   488,   489,   490,     0,
       0,     0,     0,     0,     0,   491,     0,     0,   492,     0,
       0,     0,   493,   494,   495,   496,   497,   498,     0,     0,
       0,     0,     0,     0,   499,   500,     0,   501,   502,   503,
       0,   141,   504,   142,   143,   144,   145,   146,     0,     0,
     147,     0,     0,     0,   148,     0,     0,   149,     0,   150,
     151,   152,   153,   154,   155,   156,   157,     0,   158,     0,
       0,     0,   159,     0,     0,     0,   160,     0,     0,   161,
     162,   163,     0,   164,     0,   165,   166,     0,     0,   167,
       0,     0,   168,   169,     0,   170,   171,     0,   172,   173,
       0,   174,   175,   176,   177,   178,   179,   180,     0,   181,
     182,   183,   184,   185,   186,   187,     0,   188,   189,   190,
     191,   192,   193,   194,   195,     0,   196,   197,     0,   198,
     199,   200,   201,   202,  4539,   203,     0,     0,   204,     0,
       0,   205,     0,   206,     0,   207,     0,   208,     0,     0,
       0,   209,   210,   211,     0,     0,   212,     0,     0,     0,
       0,   213,   214,     0,     0,     0,     0,   215,     0,   216,
       0,     0,     0,   217,     0,   218,   219,   220,   221,   222,
       0,     0,     0,   223,     0,     0,   224,   225,   226,     0,
       0,     0,   227,     0,   228,   229,     0,   230,   231,   232,
       0,     0,   233,   234,     0,   235,   236,   237,   238,   239,
     240,   241,     0,  4540,   242,   243,   244,     0,     0,   245,
     246,     0,   247,   248,   249,     0,     0,   250,     0,     0,
       0,   251,     0,   252,     0,   253,     0,   254,   255,   256,
     257,   258,     0,   259,     0,   260,     0,     0,     0,   261,
     262,   263,     0,   264,     0,     0,     0,   265,   266,     0,
       0,     0,   267,   268,   269,   270,     0,     0,   271,   272,
     273,     0,   274,     0,   275,     0,     0,     0,     0,   276,
     277,     0,     0,     0,   278,     0,   279,   280,     0,   281,
     282,     0,     0,     0,   283,     0,     0,   284,   285,   286,
       0,     0,   287,     0,     0,   288,   289,     0,     0,     0,
       0,     0,   290,   291,     0,   292,     0,   293,     0,   294,
     295,     0,     0,     0,     0,     0,     0,     0,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,     0,   312,   313,   314,   315,     0,
     316,   317,   318,   319,     0,   320,   321,     0,     0,     0,
       0,   322,   323,   324,   325,   326,   327,     0,     0,   328,
     329,     0,   330,     0,   331,     0,   332,   333,   334,   335,
     336,   337,   338,   339,   340,     0,     0,   341,   342,     0,
       0,   343,   344,   345,   346,     0,     0,     0,   347,   348,
       0,     0,     0,   349,     0,   350,   351,   352,     0,   353,
     354,   355,   356,     0,   357,   358,     0,     0,     0,     0,
       0,     0,     0,     0,   359,   360,   361,     0,     0,   362,
       0,   363,     0,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,     0,     0,   374,   375,   376,     0,   377,
       0,   378,   379,   380,   381,   382,     0,   383,   384,   385,
       0,     0,   386,     0,     0,     0,   387,   388,   389,   390,
     391,     0,     0,   392,   393,   394,   395,   396,     0,   397,
     398,     0,   399,   400,   401,     0,     0,   402,     0,   403,
       0,   404,   405,     0,   406,   407,   408,     0,     0,     0,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,     0,   420,   421,     0,     0,     0,   422,   423,   424,
     425,     0,     0,     0,   426,     0,     0,     0,   427,     0,
     428,   429,   430,   431,   432,   433,     0,   434,   435,   436,
     437,   438,   439,     0,     0,     0,     0,     0,     0,   440,
     441,     0,   442,     0,     0,   443,     0,     0,   444,   445,
       0,     0,     0,   446,     0,     0,   447,   448,     0,   449,
     450,   451,   452,   453,   454,     0,     0,   455,   456,   457,
     458,     0,   459,   460,     0,   461,     0,   462,   463,   464,
     465,     0,     0,   466,   467,     0,   468,   469,   470,   471,
       0,     0,     0,     0,     0,   472,   473,   474,     0,     0,
       0,   475,   476,   477,   478,     0,   479,   480,     0,   481,
     482,     0,   483,   484,     0,     0,   485,     0,     0,   486,
       0,   487,     0,   488,   489,   490,     0,     0,     0,     0,
       0,     0,   491,     0,     0,   492,     0,     0,     0,   493,
     494,   495,   496,   497,   498,     0,     0,     0,     0,     0,
       0,   499,   500,     0,   501,   502,   503,     0,   141,   504,
     142,   143,   144,   145,   146,     0,     0,   147,     0,     0,
       0,   148,     0,     0,   149,     0,   150,   151,   152,   153,
     154,   155,   156,   157,     0,   158,     0,     0,     0,   159,
       0,     0,     0,   160,     0,     0,   161,   162,   163,     0,
     164,     0,   165,   166,     0,     0,   167,     0,     0,   168,
     169,     0,   170,   171,     0,   172,   173,     0,   174,   175,
     176,   177,   178,   179,   180,     0,   181,   182,   183,   184,
     185,   186,   187,     0,   188,   189,   190,   191,   192,   193,
     194,   195,     0,   196,   197,     0,   198,   199,   200,   201,
     202,     0,   203,     0,     0,   204,     0,     0,   205,     0,
     206,     0,   207,     0,   208,     0,     0,     0,   209,   210,
     211,     0,     0,   212,     0,     0,     0,     0,   213,   214,
       0,     0,     0,     0,   215,     0,   216,     0,     0,     0,
     217,     0,   218,   219,   220,   221,   222,     0,     0,     0,
     223,     0,     0,   224,   225,   226,     0,     0,     0,   227,
       0,   228,   229,     0,   230,   231,   232,     0,     0,   233,
     234,     0,   235,   236,   237,   238,   239,   240,   241,     0,
       0,   242,   243,   244,     0,     0,   245,   246,     0,   247,
     248,   249,     0,     0,   250,     0,     0,     0,   251,     0,
     252,     0,   253,     0,   254,   255,   256,   257,   258,     0,
     259,     0,   260,     0,     0,     0,   261,   262,   263,     0,
     264,     0,     0,     0,   265,   266,     0,     0,     0,   267,
     268,   269,   270,     0,     0,   271,   272,   273,     0,   274,
       0,   275,     0,     0,     0,     0,   276,   277,     0,     0,
       0,   278,     0,   279,   280,     0,   281,   282,     0,     0,
       0,   283,     0,     0,   284,   285,   286,     0,     0,   287,
       0,     0,   288,   289,     0,     0,     0,     0,     0,   290,
     291,     0,   292,     0,   293,     0,   294,   295,     0,     0,
       0,     0,     0,     0,     0,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,     0,   312,   313,   314,   315,     0,   316,   317,   318,
     319,     0,   320,   321,     0,     0,     0,     0,   322,   323,
     324,   325,   326,   327,     0,     0,   328,   329,     0,   330,
       0,   331,     0,   332,   333,   334,   335,   336,   337,   338,
     339,   340,     0,     0,   341,   342,     0,     0,   343,   344,
     345,   346,     0,     0,     0,   347,   348,     0,     0,     0,
     349,     0,   350,   351,   352,     0,   353,   354,   355,   356,
       0,   357,   358,     0,     0,     0,     0,     0,     0,     0,
       0,   359,   360,   361,     0,     0,   362,     0,   363,     0,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
       0,     0,   374,   375,   376,     0,   377,     0,   378,   379,
     380,   381,   382,     0,   383,   384,   385,     0,     0,   386,
       0,     0,     0,   387,   388,   389,   390,   391,     0,     0,
     392,   393,   394,   395,   396,     0,   397,   398,     0,   399,
     400,   401,     0,     0,   402,     0,   403,     0,   404,   405,
       0,   406,   407,   408,     0,     0,     0,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,     0,   420,
     421,     0,     0,     0,   422,   423,   424,   425,     0,     0,
       0,   426,     0,     0,     0,   427,     0,   428,   429,   430,
     431,   432,   433,     0,   434,   435,   436,   437,   438,   439,
       0,     0,     0,   579,     0,     0,   440,   441,     0,   442,
       0,     0,   443,     0,     0,   444,   445,     0,     0,     0,
     446,     0,     0,   447,   448,     0,   449,   450,   451,   452,
     453,   454,     0,     0,   455,   456,   457,   458,     0,   459,
     460,     0,   461,     0,   462,   463,   464,   465,     0,     0,
     466,   467,     0,   468,   469,   470,   471,     0,     0,     0,
       0,     0,   472,   473,   474,     0,     0,     0,   475,   476,
     477,   478,     0,   479,   480,     0,   481,   482,     0,   483,
     484,     0,     0,   485,     0,     0,   486,     0,   487,     0,
     488,   489,   490,     0,     0,     0,     0,     0,     0,   491,
       0,     0,   492,     0,     0,     0,   493,   494,   495,   496,
     497,   498,     0,     0,     0,     0,     0,     0,   499,   500,
       0,   501,   502,   503,     0,   141,   504,   142,   143,   144,
     145,   146,     0,     0,   147,     0,     0,     0,   148,     0,
       0,   149,     0,   150,   151,   152,   153,   154,   155,   156,
     157,     0,   158,     0,     0,     0,   159,     0,     0,     0,
     160,     0,     0,   161,   162,   163,     0,   164,     0,   165,
     166,     0,     0,   167,     0,     0,   168,   169,     0,   170,
     171,     0,   172,   173,     0,   174,   175,   176,   177,   178,
     179,   180,     0,   181,   182,   183,   184,   185,   186,   187,
       0,   188,   189,   190,   191,   192,   193,   194,   195,     0,
     196,   197,     0,   198,   199,   200,   201,   202,     0,   203,
       0,     0,   204,     0,     0,   205,     0,   206,     0,   207,
       0,   208,     0,     0,     0,   209,   210,   211,     0,     0,
     212,     0,     0,     0,     0,   213,   214,     0,     0,     0,
       0,   215,     0,   216,     0,     0,     0,   217,     0,   218,
     219,   220,   221,   222,     0,     0,     0,   223,     0,     0,
     224,   225,   226,     0,     0,     0,   227,     0,   228,   229,
       0,   230,   231,   232,     0,     0,   233,   234,     0,   235,
     236,   237,   238,   239,   240,   241,     0,     0,   242,   243,
     244,     0,     0,   245,   246,     0,   247,   248,   249,     0,
       0,   250,     0,     0,     0,   251,  1107,   252,     0,   253,
       0,   254,   255,   256,   257,   258,     0,   259,     0,   260,
       0,     0,     0,   261,   262,   263,     0,   264,     0,     0,
       0,   265,   266,     0,     0,     0,   267,   268,   269,   270,
       0,     0,   271,   272,   273,     0,   274,     0,   275,     0,
       0,     0,     0,   276,   277,     0,     0,     0,   278,     0,
     279,   280,     0,   281,   282,     0,     0,     0,   283,     0,
       0,   284,   285,   286,     0,     0,   287,     0,     0,   288,
     289,     0,     0,     0,     0,     0,   290,   291,     0,   292,
       0,   293,     0,   294,   295,     0,     0,     0,     0,     0,
       0,     0,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,     0,   312,
     313,   314,   315,     0,   316,   317,   318,   319,     0,   320,
     321,     0,     0,     0,     0,   322,   323,   324,   325,   326,
     327,     0,     0,   328,   329,     0,   330,     0,   331,     0,
     332,   333,   334,   335,   336,   337,   338,   339,   340,     0,
       0,   341,   342,     0,     0,   343,   344,   345,   346,     0,
       0,     0,   347,   348,     0,     0,     0,   349,     0,   350,
     351,   352,     0,   353,   354,   355,   356,     0,   357,   358,
       0,     0,     0,     0,     0,     0,     0,     0,   359,   360,
     361,     0,     0,   362,     0,   363,     0,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,     0,     0,   374,
     375,   376,     0,   377,     0,   378,   379,   380,   381,   382,
       0,   383,   384,   385,     0,     0,   386,     0,     0,     0,
     387,   388,   389,   390,   391,     0,     0,   392,   393,   394,
     395,   396,     0,   397,   398,     0,   399,   400,   401,     0,
       0,   402,     0,   403,     0,   404,   405,     0,   406,   407,
     408,     0,     0,     0,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,     0,   420,   421,     0,     0,
       0,   422,   423,   424,   425,     0,     0,     0,   426,     0,
       0,     0,   427,     0,   428,   429,   430,   431,   432,   433,
       0,   434,   435,   436,   437,   438,   439,     0,     0,     0,
       0,     0,     0,   440,   441,     0,   442,     0,     0,   443,
       0,     0,   444,   445,     0,     0,     0,   446,     0,     0,
     447,   448,     0,   449,   450,   451,   452,   453,   454,     0,
       0,   455,   456,   457,   458,     0,   459,   460,     0,   461,
       0,   462,   463,   464,   465,     0,     0,   466,   467,     0,
     468,   469,   470,   471,     0,     0,     0,     0,     0,   472,
     473,   474,     0,     0,     0,   475,   476,   477,   478,     0,
     479,   480,     0,   481,   482,     0,   483,   484,     0,     0,
     485,     0,     0,   486,     0,   487,     0,   488,   489,   490,
       0,     0,     0,     0,     0,     0,   491,     0,     0,   492,
       0,     0,     0,   493,   494,   495,   496,   497,   498,     0,
       0,     0,     0,     0,     0,   499,   500,     0,   501,   502,
     503,     0,   141,   504,   142,   143,   144,   145,   146,     0,
       0,   147,     0,     0,     0,   148,     0,     0,   149,     0,
     150,   151,   152,   153,   154,   155,   156,   157,     0,   158,
       0,     0,     0,   159,     0,     0,     0,   160,     0,     0,
     161,   162,   163,     0,   164,     0,   165,   166,     0,     0,
     167,     0,     0,   168,   169,     0,   170,   171,     0,   172,
     173,     0,   174,   175,   176,   177,   178,   179,   180,     0,
     181,   182,   183,   184,   185,   186,   187,     0,   188,   189,
     190,   191,   192,   193,   194,   195,     0,   196,   197,     0,
     198,   199,   200,   201,   202,     0,   203,     0,     0,   204,
       0,     0,   205,     0,   206,     0,   207,     0,   208,     0,
       0,     0,   209,   210,   211,     0,     0,   212,     0,     0,
       0,     0,   213,   214,     0,     0,     0,   928,   215,     0,
     216,     0,     0,     0,   217,     0,   218,   219,   220,   221,
     222,     0,     0,     0,   223,     0,     0,   224,   225,   226,
       0,     0,     0,   227,     0,   228,   229,     0,   230,   231,
     232,     0,     0,   233,   234,     0,   235,   236,   237,   238,
     239,   240,   241,     0,     0,   242,   243,   244,     0,     0,
     245,   246,     0,   247,   248,   249,     0,     0,   250,     0,
       0,     0,   251,     0,   252,     0,   253,     0,   254,   255,
     256,   257,   258,     0,   259,     0,   260,     0,     0,     0,
     261,   262,   263,     0,   264,     0,     0,     0,   265,   266,
       0,     0,     0,   267,   268,   269,   270,     0,     0,   271,
     272,   273,     0,   274,     0,   275,     0,     0,     0,     0,
     276,   277,     0,     0,     0,   278,     0,   279,   280,     0,
     281,   282,     0,     0,     0,   283,     0,     0,   284,   285,
     286,     0,     0,   287,     0,     0,   288,   289,     0,     0,
       0,     0,     0,   290,   291,     0,   292,     0,   293,     0,
     294,   295,     0,     0,     0,     0,     0,     0,     0,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,     0,   312,   313,   314,   315,
       0,   316,   317,   318,   319,     0,   320,   321,     0,     0,
       0,     0,   322,   323,   324,   325,   326,   327,     0,     0,
     328,   329,     0,   330,     0,   331,     0,   332,   333,   334,
     335,   336,   337,   338,   339,   340,     0,     0,   341,   342,
       0,     0,   343,   344,   345,   346,     0,     0,     0,   347,
     348,     0,     0,     0,   349,     0,   350,   351,   352,     0,
     353,   354,   355,   356,     0,   357,   358,     0,     0,     0,
       0,     0,     0,     0,     0,   359,   360,   361,     0,     0,
     362,     0,   363,     0,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,     0,     0,   374,   375,   376,     0,
     377,     0,   378,   379,   380,   381,   382,     0,   383,   384,
     385,     0,     0,   386,     0,     0,     0,   387,   388,   389,
     390,   391,     0,     0,   392,   393,   394,   395,   396,     0,
     397,   398,     0,   399,   400,   401,     0,     0,   402,     0,
     403,     0,   404,   405,     0,   406,   407,   408,     0,     0,
       0,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,     0,   420,   421,     0,     0,     0,   422,   423,
     424,   425,     0,     0,     0,   426,     0,     0,     0,   427,
       0,   428,   429,   430,   431,   432,   433,     0,   434,   435,
     436,   437,   438,   439,     0,     0,     0,     0,     0,     0,
     440,   441,     0,   442,     0,     0,   443,     0,     0,   444,
     445,     0,     0,     0,   446,     0,     0,   447,   448,     0,
     449,   450,   451,   452,   453,   454,     0,     0,   455,   456,
     457,   458,     0,   459,   460,     0,   461,     0,   462,   463,
     464,   465,     0,     0,   466,   467,     0,   468,   469,   470,
     471,     0,     0,     0,     0,     0,  1918,   473,   474,     0,
       0,     0,   475,   476,   477,   478,     0,   479,   480,     0,
     481,   482,     0,   483,   484,     0,     0,   485,     0,     0,
     486,     0,   487,     0,   488,   489,   490,     0,     0,     0,
       0,     0,     0,   491,     0,     0,   492,     0,     0,     0,
     493,   494,   495,   496,   497,   498,     0,     0,     0,     0,
       0,     0,   499,   500,     0,   501,   502,   503,     0,   141,
     504,   142,   143,   144,   145,   146,     0,     0,   147,     0,
       0,     0,   148,     0,     0,   149,     0,   150,   151,   152,
     153,   154,   155,   156,   157,     0,   158,     0,     0,     0,
     159,     0,     0,     0,   160,     0,     0,   161,   162,   163,
       0,   164,     0,   165,   166,     0,     0,   167,     0,     0,
     168,   169,     0,   170,   171,     0,   172,   173,     0,   174,
     175,   176,   177,   178,   179,   180,     0,   181,   182,   183,
     184,   185,   186,   187,     0,   188,   189,   190,   191,   192,
     193,   194,   195,     0,   196,   197,     0,   198,   199,   200,
     201,   202,     0,   203,     0,     0,   204,     0,     0,   205,
       0,   206,     0,   207,     0,   208,     0,     0,     0,   209,
     210,   211,     0,     0,   212,     0,     0,     0,     0,   213,
     214,     0,     0,     0,  2066,   215,     0,   216,     0,     0,
       0,   217,     0,   218,   219,   220,   221,   222,     0,     0,
       0,   223,     0,     0,   224,   225,   226,     0,     0,     0,
     227,     0,   228,   229,     0,   230,   231,   232,     0,     0,
     233,   234,     0,   235,   236,   237,   238,   239,   240,   241,
       0,     0,   242,   243,   244,     0,     0,   245,   246,     0,
     247,   248,   249,     0,     0,   250,     0,     0,     0,   251,
       0,   252,     0,   253,     0,   254,   255,   256,   257,   258,
       0,   259,     0,   260,     0,     0,     0,   261,   262,   263,
       0,   264,     0,     0,     0,   265,   266,     0,     0,     0,
     267,   268,   269,   270,     0,     0,   271,   272,   273,     0,
     274,     0,   275,     0,     0,     0,     0,   276,   277,     0,
       0,     0,   278,     0,   279,   280,     0,   281,   282,     0,
       0,     0,   283,     0,     0,   284,   285,   286,     0,     0,
     287,     0,     0,   288,   289,     0,     0,     0,     0,     0,
     290,   291,     0,   292,     0,   293,     0,   294,   295,     0,
       0,     0,     0,     0,     0,     0,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,     0,   312,   313,   314,   315,     0,   316,   317,
     318,   319,     0,   320,   321,     0,     0,     0,     0,   322,
     323,   324,   325,   326,   327,     0,     0,   328,   329,     0,
     330,     0,   331,     0,   332,   333,   334,   335,   336,   337,
     338,   339,   340,     0,     0,   341,   342,     0,     0,   343,
     344,   345,   346,     0,     0,     0,   347,   348,     0,     0,
       0,   349,     0,   350,   351,   352,     0,   353,   354,   355,
     356,     0,   357,   358,     0,     0,     0,     0,     0,     0,
       0,     0,   359,   360,   361,     0,     0,   362,     0,   363,
       0,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,     0,     0,   374,   375,   376,     0,   377,     0,   378,
     379,   380,   381,   382,     0,   383,   384,   385,     0,     0,
     386,     0,     0,     0,   387,   388,   389,   390,   391,     0,
       0,   392,   393,   394,   395,   396,     0,   397,   398,     0,
     399,   400,   401,     0,     0,   402,     0,   403,     0,   404,
     405,     0,   406,   407,   408,     0,     0,     0,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,     0,
     420,   421,     0,     0,     0,   422,   423,   424,   425,     0,
       0,     0,   426,     0,     0,     0,   427,     0,   428,   429,
     430,   431,   432,   433,     0,   434,   435,   436,   437,   438,
     439,     0,     0,     0,     0,     0,     0,   440,   441,     0,
     442,     0,     0,   443,     0,     0,   444,   445,     0,     0,
       0,   446,     0,     0,   447,   448,     0,   449,   450,   451,
     452,   453,   454,     0,     0,   455,   456,   457,   458,     0,
     459,   460,     0,   461,     0,   462,   463,   464,   465,     0,
       0,   466,   467,     0,   468,   469,   470,   471,     0,     0,
       0,     0,     0,   472,   473,   474,     0,     0,     0,   475,
     476,   477,   478,     0,   479,   480,     0,   481,   482,     0,
     483,   484,     0,     0,   485,     0,     0,   486,     0,   487,
       0,   488,   489,   490,     0,     0,     0,     0,     0,     0,
     491,     0,     0,   492,     0,     0,     0,   493,   494,   495,
     496,   497,   498,     0,     0,     0,     0,     0,     0,   499,
     500,     0,   501,   502,   503,     0,   141,   504,   142,   143,
     144,   145,   146,     0,     0,   147,     0,     0,     0,   148,
       0,     0,   149,     0,   150,   151,   152,   153,   154,   155,
     156,   157,     0,   158,     0,     0,     0,   159,     0,     0,
       0,   160,     0,     0,   161,   162,   163,     0,   164,     0,
     165,   166,     0,     0,   167,     0,     0,   168,   169,     0,
     170,   171,     0,   172,   173,     0,   174,   175,   176,   177,
     178,   179,   180,     0,   181,   182,   183,   184,   185,   186,
     187,     0,   188,   189,   190,   191,   192,   193,   194,   195,
       0,   196,   197,     0,   198,   199,   200,   201,   202,     0,
     203,     0,     0,   204,     0,     0,   205,     0,   206,     0,
     207,     0,   208,     0,     0,     0,   209,   210,   211,     0,
       0,   212,     0,     0,     0,     0,   213,   214,     0,     0,
       0,   928,   215,     0,   216,     0,     0,     0,   217,     0,
     218,   219,   220,   221,   222,     0,     0,     0,   223,     0,
       0,   224,   225,   226,     0,     0,     0,   227,     0,   228,
     229,     0,   230,   231,   232,     0,     0,   233,   234,     0,
     235,   236,   237,   238,   239,   240,   241,     0,     0,   242,
     243,   244,     0,     0,   245,   246,     0,   247,   248,   249,
       0,     0,   250,     0,     0,     0,   251,     0,   252,     0,
     253,     0,   254,   255,   256,   257,   258,     0,   259,     0,
     260,     0,     0,     0,   261,   262,   263,     0,   264,     0,
       0,     0,   265,   266,     0,     0,     0,   267,   268,   269,
     270,     0,     0,   271,   272,   273,     0,   274,     0,   275,
       0,     0,     0,     0,   276,   277,     0,     0,     0,   278,
       0,   279,   280,     0,   281,   282,     0,     0,     0,   283,
       0,     0,   284,   285,   286,     0,     0,   287,     0,     0,
     288,   289,     0,     0,     0,     0,     0,   290,   291,     0,
     292,     0,   293,     0,   294,   295,     0,     0,     0,     0,
       0,     0,     0,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,     0,
     312,   313,   314,   315,     0,   316,   317,   318,   319,     0,
     320,   321,     0,     0,     0,     0,   322,   323,   324,   325,
     326,   327,     0,     0,   328,   329,     0,   330,     0,   331,
       0,   332,   333,   334,   335,   336,   337,   338,   339,   340,
       0,     0,   341,   342,     0,     0,   343,   344,   345,   346,
       0,     0,     0,   347,   348,     0,     0,     0,   349,     0,
     350,   351,   352,     0,   353,   354,   355,   356,     0,   357,
     358,     0,     0,     0,     0,     0,     0,     0,     0,   359,
     360,   361,     0,     0,   362,     0,   363,     0,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,     0,     0,
     374,   375,   376,     0,   377,     0,   378,   379,   380,   381,
     382,     0,   383,   384,   385,     0,     0,   386,     0,     0,
       0,   387,   388,   389,   390,   391,     0,     0,   392,   393,
     394,   395,   396,     0,   397,   398,     0,   399,   400,   401,
       0,     0,   402,     0,   403,     0,   404,   405,     0,   406,
     407,   408,     0,     0,     0,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,     0,   420,   421,     0,
       0,     0,   422,   423,   424,   425,     0,     0,     0,   426,
       0,     0,     0,   427,     0,   428,   429,   430,   431,   432,
     433,     0,   434,   435,   436,   437,   438,   439,     0,     0,
       0,     0,     0,     0,   440,   441,     0,   442,     0,     0,
     443,     0,     0,   444,   445,     0,     0,     0,   446,     0,
       0,   447,   448,     0,   449,   450,   451,   452,   453,   454,
       0,     0,   455,   456,   457,   458,     0,   459,   460,     0,
     461,     0,   462,   463,   464,   465,     0,     0,   466,   467,
       0,   468,   469,   470,   471,     0,     0,     0,     0,     0,
     472,   473,   474,     0,     0,     0,   475,   476,   477,   478,
       0,   479,   480,     0,   481,   482,     0,   483,   484,     0,
       0,   485,     0,     0,   486,     0,   487,     0,   488,   489,
     490,     0,     0,     0,     0,     0,     0,   491,     0,     0,
     492,     0,     0,     0,   493,   494,   495,   496,   497,   498,
       0,     0,     0,     0,     0,     0,   499,   500,     0,   501,
     502,   503,     0,   141,   504,   142,   143,   144,   145,   146,
       0,     0,   147,     0,     0,     0,   148,     0,     0,   149,
       0,   150,   151,   152,   153,   154,   155,   156,   157,     0,
     158,     0,     0,     0,   159,     0,     0,     0,   160,     0,
       0,   161,   162,   163,     0,   164,     0,   165,   166,     0,
       0,   167,     0,     0,   168,   169,     0,   170,   171,     0,
     172,   173,     0,   174,   175,   176,   177,   178,   179,   180,
       0,   181,   182,   183,   184,   185,   186,   187,     0,   188,
     189,   190,   191,   192,   193,   194,   195,     0,   196,   197,
       0,   198,   199,   200,   201,   202,     0,   203,     0,     0,
     204,     0,     0,   205,     0,   206,     0,   207,     0,   208,
       0,     0,     0,   209,   210,   211,     0,     0,   212,     0,
       0,     0,     0,   213,   214,     0,     0,     0,     0,   215,
       0,   216,     0,     0,     0,   217,     0,   218,   219,   220,
     221,   222,     0,     0,     0,   223,     0,     0,   224,   225,
     226,     0,     0,     0,   227,     0,   228,   229,     0,   230,
     231,   232,     0,     0,   233,   234,     0,   235,   236,   237,
     238,   239,   240,   241,     0,     0,   242,   243,   244,     0,
       0,   245,   246,     0,   247,   248,   249,     0,     0,   250,
       0,     0,     0,   251,     0,   252,     0,   253,     0,   254,
     255,   256,   257,   258,     0,   259,     0,   260,     0,     0,
       0,   261,   262,   263,     0,   264,     0,     0,     0,   265,
     266,     0,     0,     0,   267,   268,   269,   270,     0,     0,
     271,   272,   273,     0,   274,     0,   275,     0,     0,     0,
       0,   276,   277,     0,     0,     0,   278,     0,   279,   280,
       0,   281,   282,     0,     0,     0,   283,     0,     0,   284,
     285,   286,     0,     0,   287,     0,     0,   288,   289,     0,
       0,     0,     0,     0,   290,   291,     0,   292,     0,   293,
       0,   294,   295,     0,     0,     0,     0,     0,     0,     0,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,     0,   312,   313,   314,
     315,     0,   316,   317,   318,   319,     0,   320,   321,     0,
       0,     0,     0,   322,   323,   324,   325,   326,   327,     0,
       0,   328,   329,     0,   330,     0,   331,     0,   332,   333,
     334,   335,   336,   337,   338,   339,   340,     0,     0,   341,
     342,     0,     0,   343,   344,   345,   346,     0,     0,     0,
     347,   348,     0,     0,     0,   349,     0,   350,   351,   352,
       0,   353,   354,   355,   356,     0,   357,   358,     0,     0,
       0,     0,     0,     0,     0,     0,   359,   360,   361,     0,
       0,   362,     0,   363,     0,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,     0,     0,   374,   375,   376,
    3001,   377,     0,   378,   379,   380,   381,   382,     0,   383,
     384,   385,     0,     0,   386,     0,     0,     0,   387,   388,
     389,   390,   391,     0,     0,   392,   393,   394,   395,   396,
       0,   397,   398,     0,   399,   400,   401,     0,     0,   402,
       0,   403,     0,   404,   405,     0,   406,   407,   408,     0,
       0,     0,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,     0,   420,   421,     0,     0,     0,   422,
     423,   424,   425,     0,     0,     0,   426,     0,     0,     0,
     427,     0,   428,   429,   430,   431,   432,   433,     0,   434,
     435,   436,   437,   438,   439,     0,     0,     0,     0,     0,
       0,   440,   441,     0,   442,     0,     0,   443,     0,     0,
     444,   445,     0,     0,     0,   446,     0,     0,   447,   448,
       0,   449,   450,   451,   452,   453,   454,     0,     0,   455,
     456,   457,   458,     0,   459,   460,     0,   461,     0,   462,
     463,   464,   465,     0,     0,   466,   467,     0,   468,   469,
     470,   471,     0,     0,     0,     0,     0,   472,   473,   474,
       0,     0,     0,   475,   476,   477,   478,     0,   479,   480,
       0,   481,   482,     0,   483,   484,     0,     0,   485,     0,
       0,   486,     0,   487,     0,   488,   489,   490,     0,     0,
       0,     0,     0,     0,   491,     0,     0,   492,     0,     0,
       0,   493,   494,   495,   496,   497,   498,     0,     0,     0,
       0,     0,     0,   499,   500,     0,   501,   502,   503,     0,
     141,   504,   142,   143,   144,   145,   146,     0,     0,   147,
       0,     0,     0,   148,     0,     0,   149,     0,   150,   151,
     152,   153,   154,   155,   156,   157,     0,   158,     0,     0,
       0,   159,     0,     0,     0,   160,     0,     0,   161,   162,
     163,     0,   164,     0,   165,   166,     0,     0,   167,     0,
       0,   168,   169,     0,   170,   171,     0,   172,   173,     0,
     174,   175,   176,   177,   178,   179,   180,     0,   181,   182,
     183,   184,   185,   186,   187,     0,   188,   189,   190,   191,
     192,   193,   194,   195,     0,   196,   197,     0,   198,   199,
     200,   201,   202,     0,   203,     0,     0,   204,     0,     0,
     205,     0,   206,     0,   207,     0,   208,     0,     0,     0,
     209,   210,   211,     0,     0,   212,     0,     0,     0,     0,
     213,   214,     0,     0,     0,     0,   215,     0,   216,     0,
       0,     0,   217,     0,   218,   219,   220,   221,   222,     0,
       0,     0,   223,     0,     0,   224,   225,   226,     0,     0,
       0,   227,     0,   228,   229,     0,   230,   231,   232,     0,
       0,   233,   234,     0,   235,   236,   237,   238,   239,   240,
     241,     0,     0,   242,   243,   244,     0,     0,   245,   246,
       0,   247,   248,   249,     0,     0,   250,     0,     0,     0,
     251,     0,   252,     0,   253,     0,   254,   255,   256,   257,
     258,     0,   259,     0,   260,     0,     0,     0,   261,   262,
     263,     0,   264,     0,     0,     0,   265,   266,     0,     0,
       0,   267,   268,   269,   270,     0,     0,   271,   272,   273,
       0,   274,     0,   275,     0,     0,     0,     0,   276,   277,
       0,     0,     0,   278,     0,   279,   280,     0,   281,   282,
       0,     0,     0,   283,     0,     0,   284,   285,   286,     0,
       0,   287,     0,     0,   288,   289,     0,     0,     0,     0,
       0,   290,   291,     0,   292,     0,   293,     0,   294,   295,
       0,     0,     0,     0,     0,     0,     0,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,     0,   312,   313,   314,   315,     0,   316,
     317,   318,   319,     0,   320,   321,     0,     0,     0,     0,
     322,   323,   324,   325,   326,   327,     0,     0,   328,   329,
       0,   330,     0,   331,     0,   332,   333,   334,   335,   336,
     337,   338,   339,   340,     0,     0,   341,   342,     0,     0,
     343,   344,   345,   346,     0,     0,     0,   347,   348,     0,
       0,     0,   349,     0,   350,   351,   352,     0,   353,   354,
     355,   356,     0,   357,   358,     0,     0,     0,     0,     0,
       0,     0,     0,   359,   360,   361,     0,     0,   362,     0,
     363,     0,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,     0,     0,   374,   375,   376,     0,   377,     0,
     378,   379,   380,   381,   382,     0,   383,   384,   385,     0,
       0,   386,     0,     0,     0,   387,   388,   389,   390,   391,
       0,     0,   392,   393,   394,   395,   396,     0,   397,   398,
       0,   399,   400,   401,     0,     0,   402,     0,   403,     0,
     404,   405,     0,   406,   407,   408,     0,     0,     0,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
       0,   420,   421,     0,     0,     0,   422,   423,   424,   425,
       0,     0,     0,   426,     0,     0,     0,   427,     0,   428,
     429,   430,   431,   432,   433,     0,   434,   435,   436,   437,
     438,   439,     0,     0,     0,     0,     0,     0,   440,   441,
       0,   442,     0,     0,   443,     0,     0,   444,   445,     0,
       0,     0,   446,     0,     0,   447,   448,     0,   449,   450,
     451,   452,   453,   454,     0,     0,   455,   456,   457,   458,
       0,   459,   460,     0,   461,     0,   462,   463,   464,   465,
       0,   138,   466,   467,     0,   468,   469,   470,   471,     0,
       0,     0,     0,     0,   472,   473,   474,     0,     0,     0,
     475,   476,   477,   478,     0,   479,   480,     0,   481,   482,
       0,   483,   484,     0,     0,   485,     0,     0,   486,     0,
     487,     0,   488,   489,   490,     0,     0,     0,     0,     0,
       0,   491,     0,     0,   492,     0,     0,     0,   493,   494,
     495,   496,   497,   498,     0,     0,     0,     0,     0,     0,
     499,   500,     0,   501,   502,   503,     0,   141,   504,   142,
     143,   144,   145,   146,     0,     0,   147,     0,     0,     0,
     148,     0,     0,   149,     0,   150,   151,   152,   153,   154,
     155,   156,   157,     0,   158,     0,     0,     0,   159,     0,
       0,     0,   160,     0,     0,   161,   162,   163,     0,   164,
       0,   165,   166,     0,     0,   167,     0,     0,   168,   169,
       0,   170,   171,     0,   172,   173,     0,   174,   175,   176,
     177,   178,   179,   180,     0,   181,   182,   183,   184,   185,
     186,   187,     0,   188,   189,   190,   191,   192,   193,   194,
     195,     0,   196,   197,     0,   198,   199,   200,   201,   202,
       0,   203,     0,     0,   204,     0,     0,   205,     0,   206,
       0,   207,     0,   208,     0,     0,     0,   209,   210,   211,
       0,     0,   212,     0,     0,     0,     0,   213,   214,     0,
       0,     0,  3291,   215,     0,   216,     0,     0,     0,   217,
       0,   218,   219,   220,   221,   222,     0,     0,     0,   223,
       0,     0,   224,   225,   226,     0,     0,     0,   227,     0,
     228,   229,     0,   230,   231,   232,     0,     0,   233,   234,
       0,   235,   236,   237,   238,   239,   240,   241,     0,     0,
     242,   243,   244,     0,     0,   245,   246,     0,   247,   248,
     249,     0,     0,   250,     0,     0,     0,   251,     0,   252,
       0,   253,     0,   254,   255,   256,   257,   258,     0,   259,
       0,   260,     0,     0,     0,   261,   262,   263,     0,   264,
       0,     0,     0,   265,   266,     0,     0,     0,   267,   268,
     269,   270,     0,     0,   271,   272,   273,     0,   274,     0,
     275,     0,     0,     0,     0,   276,   277,     0,     0,     0,
     278,     0,   279,   280,     0,   281,   282,     0,     0,     0,
     283,     0,     0,   284,   285,   286,     0,     0,   287,     0,
       0,   288,   289,     0,     0,     0,     0,     0,   290,   291,
       0,   292,     0,   293,     0,   294,   295,     0,     0,     0,
       0,     0,     0,     0,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
       0,   312,   313,   314,   315,     0,   316,   317,   318,   319,
       0,   320,   321,     0,     0,     0,     0,   322,   323,   324,
     325,   326,   327,     0,     0,   328,   329,     0,   330,     0,
     331,     0,   332,   333,   334,   335,   336,   337,   338,   339,
     340,     0,     0,   341,   342,     0,     0,   343,   344,   345,
     346,     0,     0,     0,   347,   348,     0,     0,     0,   349,
       0,   350,   351,   352,     0,   353,   354,   355,   356,     0,
     357,   358,     0,     0,     0,     0,     0,     0,     0,     0,
     359,   360,   361,     0,     0,   362,     0,   363,     0,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,     0,
       0,   374,   375,   376,     0,   377,     0,   378,   379,   380,
     381,   382,     0,   383,   384,   385,     0,     0,   386,     0,
       0,     0,   387,   388,   389,   390,   391,     0,     0,   392,
     393,   394,   395,   396,     0,   397,   398,     0,   399,   400,
     401,     0,     0,   402,     0,   403,     0,   404,   405,     0,
     406,   407,   408,     0,     0,     0,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,     0,   420,   421,
       0,     0,     0,   422,   423,   424,   425,     0,     0,     0,
     426,     0,     0,     0,   427,     0,   428,   429,   430,   431,
     432,   433,     0,   434,   435,   436,   437,   438,   439,     0,
       0,     0,     0,     0,     0,   440,   441,     0,   442,     0,
       0,   443,     0,     0,   444,   445,     0,     0,     0,   446,
       0,     0,   447,   448,     0,   449,   450,   451,   452,   453,
     454,     0,     0,   455,   456,   457,   458,     0,   459,   460,
       0,   461,     0,   462,   463,   464,   465,     0,     0,   466,
     467,     0,   468,   469,   470,   471,     0,     0,     0,     0,
       0,   472,   473,   474,     0,     0,     0,   475,   476,   477,
     478,     0,   479,   480,     0,   481,   482,     0,   483,   484,
       0,     0,   485,     0,     0,   486,     0,   487,     0,   488,
     489,   490,     0,     0,     0,     0,     0,     0,   491,     0,
       0,   492,     0,     0,     0,   493,   494,   495,   496,   497,
     498,     0,     0,     0,     0,     0,     0,   499,   500,     0,
     501,   502,   503,     0,   141,   504,   142,   143,   144,   145,
     146,  3299,     0,   147,     0,     0,     0,   148,     0,     0,
     149,     0,   150,   151,   152,   153,   154,   155,   156,   157,
       0,   158,     0,     0,     0,   159,     0,     0,     0,   160,
       0,     0,   161,   162,   163,     0,   164,     0,   165,   166,
       0,     0,   167,     0,     0,   168,   169,     0,   170,   171,
       0,   172,   173,     0,   174,   175,   176,   177,   178,   179,
     180,     0,   181,   182,   183,   184,   185,   186,   187,     0,
     188,   189,   190,   191,   192,   193,   194,   195,     0,   196,
     197,     0,   198,   199,   200,   201,   202,     0,   203,     0,
       0,   204,     0,     0,   205,     0,   206,     0,   207,     0,
     208,     0,     0,     0,   209,   210,   211,     0,     0,   212,
       0,     0,     0,     0,   213,   214,     0,     0,     0,     0,
     215,     0,   216,     0,     0,     0,   217,     0,   218,   219,
     220,   221,   222,     0,     0,     0,   223,     0,     0,   224,
     225,   226,     0,     0,     0,   227,     0,   228,   229,     0,
     230,   231,   232,     0,     0,   233,   234,     0,   235,   236,
     237,   238,   239,   240,   241,     0,     0,   242,   243,   244,
       0,     0,   245,   246,     0,   247,   248,   249,     0,     0,
     250,     0,     0,     0,   251,     0,   252,     0,   253,     0,
     254,   255,   256,   257,   258,     0,   259,     0,   260,     0,
       0,     0,   261,   262,   263,     0,   264,     0,     0,     0,
     265,   266,     0,     0,     0,   267,   268,   269,   270,     0,
       0,   271,   272,   273,     0,   274,     0,   275,     0,     0,
       0,     0,   276,   277,     0,     0,     0,   278,     0,   279,
     280,     0,   281,   282,     0,     0,     0,   283,     0,     0,
     284,   285,   286,     0,     0,   287,     0,     0,   288,   289,
       0,     0,     0,     0,     0,   290,   291,     0,   292,     0,
     293,     0,   294,   295,     0,     0,     0,     0,     0,     0,
       0,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,     0,   312,   313,
     314,   315,     0,   316,   317,   318,   319,     0,   320,   321,
       0,     0,     0,     0,   322,   323,   324,   325,   326,   327,
       0,     0,   328,   329,     0,   330,     0,   331,     0,   332,
     333,   334,   335,   336,   337,   338,   339,   340,     0,     0,
     341,   342,     0,     0,   343,   344,   345,   346,     0,     0,
       0,   347,   348,     0,     0,     0,   349,     0,   350,   351,
     352,     0,   353,   354,   355,   356,     0,   357,   358,     0,
       0,     0,     0,     0,     0,     0,     0,   359,   360,   361,
       0,     0,   362,     0,   363,     0,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,     0,     0,   374,   375,
     376,     0,   377,     0,   378,   379,   380,   381,   382,     0,
     383,   384,   385,     0,     0,   386,     0,     0,     0,   387,
     388,   389,   390,   391,     0,     0,   392,   393,   394,   395,
     396,     0,   397,   398,     0,   399,   400,   401,     0,     0,
     402,     0,   403,     0,   404,   405,     0,   406,   407,   408,
       0,     0,     0,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,     0,   420,   421,     0,     0,     0,
     422,   423,   424,   425,     0,     0,     0,   426,     0,     0,
       0,   427,     0,   428,   429,   430,   431,   432,   433,     0,
     434,   435,   436,   437,   438,   439,     0,     0,     0,     0,
       0,     0,   440,   441,     0,   442,     0,     0,   443,     0,
       0,   444,   445,     0,     0,     0,   446,     0,     0,   447,
     448,     0,   449,   450,   451,   452,   453,   454,     0,     0,
     455,   456,   457,   458,     0,   459,   460,     0,   461,     0,
     462,   463,   464,   465,     0,     0,   466,   467,     0,   468,
     469,   470,   471,     0,     0,     0,     0,     0,   472,   473,
     474,     0,     0,     0,   475,   476,   477,   478,     0,   479,
     480,     0,   481,   482,     0,   483,   484,     0,     0,   485,
       0,     0,   486,     0,   487,     0,   488,   489,   490,     0,
       0,     0,     0,     0,     0,   491,     0,     0,   492,     0,
       0,     0,   493,   494,   495,   496,   497,   498,     0,     0,
       0,     0,     0,     0,   499,   500,     0,   501,   502,   503,
       0,   141,   504,   142,   143,   144,   145,   146,     0,     0,
     147,     0,     0,     0,   148,     0,     0,   149,     0,   150,
     151,   152,   153,   154,   155,   156,   157,     0,   158,     0,
       0,     0,   159,     0,     0,     0,   160,     0,     0,   161,
     162,   163,     0,   164,     0,   165,   166,     0,     0,   167,
       0,     0,   168,   169,     0,   170,   171,     0,   172,   173,
       0,   174,   175,   176,   177,   178,   179,   180,     0,   181,
     182,   183,   184,   185,   186,   187,     0,   188,   189,   190,
     191,   192,   193,   194,   195,     0,   196,   197,     0,   198,
     199,   200,   201,   202,     0,   203,     0,     0,   204,     0,
       0,   205,     0,   206,     0,   207,     0,   208,     0,     0,
       0,   209,   210,   211,     0,     0,   212,     0,     0,     0,
       0,   213,   214,     0,     0,     0,  3323,   215,     0,   216,
       0,     0,     0,   217,     0,   218,   219,   220,   221,   222,
       0,     0,     0,   223,     0,     0,   224,   225,   226,     0,
       0,     0,   227,     0,   228,   229,     0,   230,   231,   232,
       0,     0,   233,   234,     0,   235,   236,   237,   238,   239,
     240,   241,     0,     0,   242,   243,   244,     0,     0,   245,
     246,     0,   247,   248,   249,     0,     0,   250,     0,     0,
       0,   251,     0,   252,     0,   253,     0,   254,   255,   256,
     257,   258,     0,   259,     0,   260,     0,     0,     0,   261,
     262,   263,     0,   264,     0,     0,     0,   265,   266,     0,
       0,     0,   267,   268,   269,   270,     0,     0,   271,   272,
     273,     0,   274,     0,   275,     0,     0,     0,     0,   276,
     277,     0,     0,     0,   278,     0,   279,   280,     0,   281,
     282,     0,     0,     0,   283,     0,     0,   284,   285,   286,
       0,     0,   287,     0,     0,   288,   289,     0,     0,     0,
       0,     0,   290,   291,     0,   292,     0,   293,     0,   294,
     295,     0,     0,     0,     0,     0,     0,     0,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,     0,   312,   313,   314,   315,     0,
     316,   317,   318,   319,     0,   320,   321,     0,     0,     0,
       0,   322,   323,   324,   325,   326,   327,     0,     0,   328,
     329,     0,   330,     0,   331,     0,   332,   333,   334,   335,
     336,   337,   338,   339,   340,     0,     0,   341,   342,     0,
       0,   343,   344,   345,   346,     0,     0,     0,   347,   348,
       0,     0,     0,   349,     0,   350,   351,   352,     0,   353,
     354,   355,   356,     0,   357,   358,     0,     0,     0,     0,
       0,     0,     0,     0,   359,   360,   361,     0,     0,   362,
       0,   363,     0,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,     0,     0,   374,   375,   376,     0,   377,
       0,   378,   379,   380,   381,   382,     0,   383,   384,   385,
       0,     0,   386,     0,     0,     0,   387,   388,   389,   390,
     391,     0,     0,   392,   393,   394,   395,   396,     0,   397,
     398,     0,   399,   400,   401,     0,     0,   402,     0,   403,
       0,   404,   405,     0,   406,   407,   408,     0,     0,     0,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,     0,   420,   421,     0,     0,     0,   422,   423,   424,
     425,     0,     0,     0,   426,     0,     0,     0,   427,     0,
     428,   429,   430,   431,   432,   433,     0,   434,   435,   436,
     437,   438,   439,     0,     0,     0,     0,     0,     0,   440,
     441,     0,   442,     0,     0,   443,     0,     0,   444,   445,
       0,     0,     0,   446,     0,     0,   447,   448,     0,   449,
     450,   451,   452,   453,   454,     0,     0,   455,   456,   457,
     458,     0,   459,   460,     0,   461,     0,   462,   463,   464,
     465,     0,     0,   466,   467,     0,   468,   469,   470,   471,
       0,     0,     0,     0,     0,   472,   473,   474,     0,     0,
       0,   475,   476,   477,   478,     0,   479,   480,     0,   481,
     482,     0,   483,   484,     0,     0,   485,     0,     0,   486,
       0,   487,     0,   488,   489,   490,     0,     0,     0,     0,
       0,     0,   491,     0,     0,   492,     0,     0,     0,   493,
     494,   495,   496,   497,   498,     0,     0,     0,     0,     0,
       0,   499,   500,     0,   501,   502,   503,     0,   141,   504,
     142,   143,   144,   145,   146,     0,     0,   147,     0,     0,
       0,   148,     0,     0,   149,     0,   150,   151,   152,   153,
     154,   155,   156,   157,     0,   158,     0,     0,     0,   159,
       0,     0,     0,   160,     0,     0,   161,   162,   163,     0,
     164,     0,   165,   166,     0,     0,   167,     0,     0,   168,
     169,     0,   170,   171,     0,   172,   173,     0,   174,   175,
     176,   177,   178,   179,   180,     0,   181,   182,   183,   184,
     185,   186,   187,     0,   188,   189,   190,   191,   192,   193,
     194,   195,     0,   196,   197,     0,   198,   199,   200,   201,
     202,     0,   203,     0,     0,   204,     0,     0,   205,     0,
     206,     0,   207,     0,   208,     0,     0,     0,   209,   210,
     211,     0,     0,   212,     0,     0,     0,     0,   213,   214,
       0,     0,     0,     0,   215,     0,   216,     0,     0,     0,
     217,     0,   218,   219,   220,   221,   222,     0,     0,     0,
     223,     0,     0,   224,   225,   226,     0,     0,     0,   227,
       0,   228,   229,     0,   230,   231,   232,     0,     0,   233,
     234,     0,   235,   236,   237,   238,   239,   240,   241,     0,
       0,   242,   243,   244,     0,     0,   245,   246,     0,   247,
     248,   249,     0,     0,   250,     0,     0,     0,   251,     0,
     252,     0,   253,     0,   254,   255,   256,   257,   258,     0,
     259,     0,   260,     0,     0,     0,   261,   262,   263,     0,
     264,     0,     0,     0,   265,   266,     0,     0,     0,   267,
     268,   269,   270,     0,     0,   271,   272,   273,     0,   274,
       0,   275,     0,     0,     0,     0,   276,   277,     0,     0,
       0,   278,     0,   279,   280,     0,   281,   282,     0,     0,
       0,   283,     0,     0,   284,   285,   286,     0,     0,   287,
       0,     0,   288,   289,     0,     0,     0,     0,     0,   290,
     291,     0,   292,     0,   293,     0,   294,   295,     0,     0,
       0,     0,     0,     0,     0,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,     0,   312,   313,   314,   315,     0,   316,   317,   318,
     319,     0,   320,   321,     0,     0,     0,     0,   322,   323,
     324,   325,   326,   327,     0,     0,   328,   329,     0,   330,
       0,   331,     0,   332,   333,   334,   335,   336,   337,   338,
     339,   340,     0,     0,   341,   342,     0,     0,   343,   344,
     345,   346,     0,     0,     0,   347,   348,     0,     0,     0,
     349,     0,   350,   351,   352,     0,   353,   354,   355,   356,
       0,   357,   358,     0,     0,     0,     0,     0,     0,     0,
       0,   359,   360,   361,     0,     0,   362,     0,   363,     0,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
       0,     0,   374,   375,   376,  4200,   377,     0,   378,   379,
     380,   381,   382,     0,   383,   384,   385,     0,     0,   386,
       0,     0,     0,   387,   388,   389,   390,   391,     0,     0,
     392,   393,   394,   395,   396,     0,   397,   398,     0,   399,
     400,   401,     0,     0,   402,     0,   403,     0,   404,   405,
       0,   406,   407,   408,     0,     0,     0,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,     0,   420,
     421,     0,     0,     0,   422,   423,   424,   425,     0,     0,
       0,   426,     0,     0,     0,   427,     0,   428,   429,   430,
     431,   432,   433,     0,   434,   435,   436,   437,   438,   439,
       0,     0,     0,     0,     0,     0,   440,   441,     0,   442,
       0,     0,   443,     0,     0,   444,   445,     0,     0,     0,
     446,     0,     0,   447,   448,     0,   449,   450,   451,   452,
     453,   454,     0,     0,   455,   456,   457,   458,     0,   459,
     460,     0,   461,     0,   462,   463,   464,   465,     0,     0,
     466,   467,     0,   468,   469,   470,   471,     0,     0,     0,
       0,     0,   472,   473,   474,     0,     0,     0,   475,   476,
     477,   478,     0,   479,   480,     0,   481,   482,     0,   483,
     484,     0,     0,   485,     0,     0,   486,     0,   487,     0,
     488,   489,   490,     0,     0,     0,     0,     0,     0,   491,
       0,     0,   492,     0,     0,     0,   493,   494,   495,   496,
     497,   498,     0,     0,     0,     0,     0,     0,   499,   500,
       0,   501,   502,   503,     0,   141,   504,   142,   143,   144,
     145,   146,     0,     0,   147,     0,     0,     0,   148,     0,
       0,   149,     0,   150,   151,   152,   153,   154,   155,   156,
     157,     0,   158,     0,     0,     0,   159,     0,     0,     0,
     160,     0,     0,   161,   162,   163,     0,   164,     0,   165,
     166,     0,     0,   167,     0,     0,   168,   169,     0,   170,
     171,     0,   172,   173,     0,   174,   175,   176,   177,   178,
     179,   180,     0,   181,   182,   183,   184,   185,   186,   187,
       0,   188,   189,   190,   191,   192,   193,   194,   195,     0,
     196,   197,     0,   198,   199,   200,   201,   202,     0,   203,
       0,     0,   204,     0,     0,   205,     0,   206,     0,   207,
       0,   208,     0,     0,     0,   209,   210,   211,     0,     0,
     212,     0,     0,     0,     0,   213,   214,     0,     0,     0,
       0,   215,     0,   216,     0,     0,     0,   217,     0,   218,
     219,   220,   221,   222,     0,     0,     0,   223,     0,     0,
     224,   225,   226,     0,     0,     0,   227,     0,   228,   229,
       0,   230,   231,   232,     0,     0,   233,   234,     0,   235,
     236,   237,   238,   239,   240,   241,     0,     0,   242,   243,
     244,     0,     0,   245,   246,     0,   247,   248,   249,     0,
       0,   250,     0,     0,     0,   251,     0,   252,     0,   253,
       0,   254,   255,   256,   257,   258,     0,   259,     0,   260,
       0,     0,     0,   261,   262,   263,     0,   264,     0,     0,
       0,   265,   266,     0,     0,     0,   267,   268,   269,   270,
       0,     0,   271,   272,   273,     0,   274,     0,   275,     0,
       0,     0,     0,   276,   277,     0,     0,     0,   278,     0,
     279,   280,     0,   281,   282,     0,     0,     0,   283,     0,
       0,   284,   285,   286,     0,     0,   287,     0,     0,   288,
     289,     0,     0,     0,     0,     0,   290,   291,     0,   292,
       0,   293,     0,   294,   295,     0,     0,     0,     0,     0,
       0,     0,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,     0,   312,
     313,   314,   315,     0,   316,   317,   318,   319,     0,   320,
     321,     0,     0,     0,     0,   322,   323,   324,   325,   326,
     327,     0,     0,   328,   329,     0,   330,     0,   331,     0,
     332,   333,   334,   335,   336,   337,   338,   339,   340,     0,
       0,   341,   342,     0,     0,   343,   344,   345,   346,     0,
       0,     0,   347,   348,     0,     0,     0,   349,     0,   350,
     351,   352,     0,   353,   354,   355,   356,     0,   357,   358,
       0,     0,     0,     0,     0,     0,     0,     0,   359,   360,
     361,     0,     0,   362,     0,   363,     0,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,     0,     0,   374,
     375,   376,     0,   377,     0,   378,   379,   380,   381,   382,
       0,   383,   384,   385,     0,     0,   386,     0,     0,     0,
     387,   388,   389,   390,   391,     0,     0,   392,   393,   394,
     395,   396,     0,   397,   398,     0,   399,   400,   401,     0,
       0,   402,     0,   403,     0,   404,   405,     0,   406,   407,
     408,     0,     0,     0,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,     0,   420,   421,     0,     0,
       0,   422,   423,   424,   425,     0,     0,     0,   426,     0,
       0,     0,   427,     0,   428,   429,   430,   431,   432,   433,
       0,   434,   435,   436,   437,   438,   439,     0,     0,     0,
       0,     0,     0,   440,   441,     0,   442,     0,     0,   443,
       0,     0,   444,   445,     0,     0,     0,   446,     0,     0,
     447,   448,     0,   449,   450,   451,   452,   453,   454,     0,
       0,   455,   456,   457,   458,     0,   459,   460,     0,   461,
       0,   462,   463,   464,   465,     0,     0,   466,   467,     0,
     468,   469,   470,   471,     0,     0,     0,     0,     0,   472,
     473,   474,     0,     0,     0,   475,   476,   477,   478,     0,
     479,   480,     0,   481,   482,     0,   483,   484,     0,     0,
     485,     0,     0,   486,     0,   487,     0,   488,   489,   490,
       0,     0,     0,     0,     0,     0,   491,     0,     0,   492,
       0,     0,     0,   493,   494,   495,   496,   497,   498,     0,
       0,     0,     0,     0,     0,   499,   500,     0,   501,   502,
     503,     0,   141,   504,   142,   143,   144,   145,   146,     0,
       0,   147,     0,     0,     0,   148,     0,     0,   149,     0,
     150,   151,   152,   153,   154,   155,   156,   157,     0,   158,
       0,     0,     0,   159,     0,     0,     0,   160,     0,     0,
     161,   162,   163,     0,   164,     0,   165,   166,     0,     0,
     167,     0,     0,   168,   169,     0,   170,   171,     0,   172,
     173,     0,   174,   175,   176,   177,   178,   179,   180,     0,
     181,   182,   183,   184,   185,   186,   187,     0,   188,   189,
     190,   191,   192,   193,   194,   195,     0,   196,   197,     0,
     198,   199,   200,   201,   202,     0,   203,     0,     0,   204,
       0,     0,   205,     0,   206,     0,   207,     0,   208,     0,
       0,     0,   209,   210,   211,     0,     0,   212,     0,     0,
       0,     0,   213,   214,     0,     0,     0,     0,   215,     0,
     216,     0,     0,     0,   217,     0,   218,   219,   220,   221,
     222,     0,     0,     0,   223,     0,     0,   224,   225,   226,
       0,     0,     0,   227,     0,   228,   229,     0,   230,   231,
     232,     0,     0,   233,   234,     0,   235,   236,   237,   238,
     239,   240,   241,     0,     0,   242,   243,   244,     0,     0,
     245,   246,     0,   247,  1838,   249,     0,     0,   250,     0,
       0,     0,   251,     0,   252,     0,   253,     0,   254,   255,
     256,   257,   258,     0,   259,     0,   260,     0,     0,     0,
     261,   262,   263,     0,   264,     0,     0,     0,   265,   266,
       0,     0,     0,   267,   268,   269,   270,     0,     0,   271,
     272,   273,     0,   274,     0,   275,     0,     0,     0,     0,
     276,   277,     0,     0,     0,   278,     0,   279,   280,     0,
     281,   282,     0,     0,     0,   283,     0,     0,   284,   285,
     286,     0,     0,   287,     0,     0,   288,   289,     0,     0,
       0,     0,     0,   290,   291,     0,   292,     0,   293,     0,
     294,   295,     0,     0,     0,     0,     0,     0,     0,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,     0,   312,   313,   314,   315,
       0,   316,   317,   318,   319,     0,   320,   321,     0,     0,
       0,     0,   322,   323,   324,   325,   326,   327,     0,     0,
     328,   329,     0,   330,     0,   331,     0,   332,   333,   334,
     335,   336,   337,   338,   339,   340,     0,     0,   341,   342,
       0,     0,   343,  1839,   345,   346,     0,     0,     0,   347,
     348,     0,     0,     0,   349,     0,   350,   351,   352,     0,
     353,   354,   355,   356,     0,   357,   358,     0,     0,     0,
       0,     0,     0,     0,     0,   359,   360,   361,     0,     0,
     362,     0,   363,     0,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,     0,     0,   374,   375,   376,     0,
     377,     0,   378,   379,   380,   381,   382,     0,   383,   384,
     385,     0,     0,   386,     0,     0,     0,   387,   388,   389,
     390,   391,     0,     0,   392,   393,   394,   395,   396,     0,
     397,   398,     0,   399,   400,   401,     0,     0,   402,     0,
     403,     0,   404,   405,     0,   406,   407,   408,     0,     0,
       0,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,     0,   420,   421,     0,     0,     0,   422,   423,
     424,   425,     0,     0,     0,   426,     0,     0,     0,   427,
       0,   428,   429,   430,   431,   432,   433,     0,   434,   435,
     436,   437,   438,   439,     0,     0,     0,     0,     0,     0,
     440,   441,     0,   442,     0,     0,   443,     0,     0,   444,
     445,     0,     0,     0,   446,     0,     0,   447,   448,     0,
     449,   450,   451,   452,   453,   454,     0,     0,   455,   456,
     457,   458,     0,   459,   460,     0,   461,     0,   462,   463,
     464,   465,     0,     0,   466,   467,     0,   468,   469,   470,
     471,     0,     0,     0,     0,     0,   472,   473,   474,     0,
       0,     0,   475,   476,   477,   478,     0,   479,   480,     0,
     481,   482,     0,   483,   484,     0,     0,   485,     0,     0,
     486,     0,   487,     0,   488,   489,   490,     0,     0,     0,
       0,     0,     0,   491,     0,     0,   492,     0,     0,     0,
     493,   494,   495,   496,   497,   498,     0,     0,     0,     0,
       0,     0,   499,   500,     0,   501,   502,   503,     0,   141,
     504,   142,   143,   144,   145,   146,     0,     0,   147,     0,
       0,     0,   148,     0,     0,     0,     0,   150,   151,   152,
     153,   154,   155,   156,     0,     0,  -371,     0,     0,     0,
     159,     0,     0,     0,   160,     0,     0,   161,   162,   163,
       0,   164,     0,     0,     0,     0,     0,   167,  4031,     0,
     168,   169,     0,   170,     0,     0,     0,     0,     0,   174,
     175,   176,   177,  4032,   179,   180,     0,   181,   182,     0,
       0,     0,     0,     0,     0,   188,     0,   190,     0,   192,
     193,   194,   195,     0,   196,   197,     0,   198,   199,   200,
       0,   202,     0,   203,     0,     0,   204,     0,     0,   205,
       0,   206,     0,   207,     0,   208,     0,     0,     0,   209,
     210,   211,     0,     0,   212,     0,     0,     0,     0,   213,
       0,     0,     0,     0,     0,   215,     0,   216,     0,     0,
       0,   217,     0,   218,   219,   220,   221,   222,     0,     0,
       0,     0,     0,     0,   224,   225,   226,     0,  -341,  -341,
     227,     0,  -341,   229,     0,   230,   231,   232,     0,     0,
     233,   234,     0,   235,   236,   237,   238,   239,     0,     0,
       0,     0,   242,   243,   244,     0,     0,   245,   246,  4033,
     247,   248,   249,     0,     0,     0,     0,     0,     0,   251,
       0,   252,     0,   253,     0,   254,   255,   256,   257,   258,
       0,   259,     0,   260,     0,     0,     0,     0,   262,   263,
       0,     0,     0,     0,     0,     0,   266,     0,     0,     0,
     267,   268,   269,   270,  4034,     0,   271,   272,   273,     0,
     274,     0,   275,     0,     0,     0,     0,   276,     0,     0,
       0,     0,   278,     0,   279,   280,     0,   281,   282,  4035,
       0,     0,   283,     0,     0,     0,   285,   286,     0,     0,
     287,  4036,     0,   288,   289,     0,     0,     0,     0,     0,
     290,   291,     0,   292,     0,   293,     0,   294,   295,     0,
       0,     0,     0,  -326,     0,     0,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,     0,   312,   313,   314,   315,     0,   316,   317,
     318,   319,     0,   320,   321,     0,     0,     0,     0,   322,
     323,   324,   325,   326,   327,     0,     0,   328,   329,     0,
     330,     0,   331,     0,   332,   333,   334,   335,   336,   337,
     338,   339,   340,     0,     0,   341,   342,     0,     0,   343,
     344,   345,   346,     0,     0,     0,     0,   348,     0,     0,
       0,   349,     0,   350,   351,   352,     0,   353,   354,   355,
    4037,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   360,   361,     0,     0,     0,     0,   363,
       0,   364,   365,   366,   367,   368,   369,   370,   371,   372,
       0,     0,     0,     0,   375,   376,     0,   377,     0,   378,
     379,   380,   381,   382,     0,   383,   384,   385,     0,     0,
     386,     0,     0,     0,   387,   388,   389,   390,   391,     0,
       0,   392,   393,   394,   395,   396,     0,   397,     0,     0,
     399,     0,   401,  -326,     0,   402,     0,     0,     0,   404,
       0,     0,   406,   407,   408,  4038,     0,     0,     0,   410,
     411,   412,   413,   414,   415,   416,     0,   418,   419,     0,
     420,     0,     0,     0,     0,   422,   423,   424,     0,     0,
       0,     0,   426,     0,     0,     0,   427,     0,     0,   429,
       0,     0,   432,   433,     0,   434,     0,   436,     0,   438,
     439,     0,     0,     0,     0,     0,     0,   440,   441,     0,
     442,     0,     0,   443,     0,     0,   444,     0,     0,     0,
       0,   446,     0,     0,     0,   448,     0,   449,   450,   451,
     452,   453,   454,     0,     0,   455,   456,   457,   458,     0,
     459,   460,     0,   461,     0,   462,   463,   464,   465,     0,
       0,   466,   467,     0,   468,   469,   470,   471,     0,     0,
       0,     0,     0,   472,   473,   474,     0,     0,     0,     0,
     476,   477,   478,     0,   479,   480,     0,   481,   482,     0,
       0,     0,     0,     0,   485,     0,     0,   486,     0,     0,
       0,   488,   489,   490,     0,     0,     0,     0,     0,     0,
     491,     0,     0,   492,     0,     0,     0,   493,   494,   495,
     496,   497,   498,     0,     0,  -326,     0,     0,     0,   499,
       0,     0,   501,     0,   503,     0,   141,   504,   142,   143,
     144,   145,   146,     0,     0,   147,     0,     0,     0,   148,
       0,     0,     0,     0,   150,   151,   152,   153,   154,   155,
     156,     0,     0,  -371,     0,     0,     0,   159,     0,     0,
       0,   160,     0,     0,   161,   162,   163,     0,   164,     0,
       0,     0,     0,     0,   167,  4031,     0,   168,   169,     0,
     170,     0,     0,     0,     0,     0,   174,   175,   176,   177,
    4032,   179,   180,     0,   181,   182,     0,     0,     0,     0,
       0,     0,   188,     0,   190,     0,   192,   193,   194,   195,
       0,   196,   197,     0,   198,   199,   200,     0,   202,     0,
     203,     0,     0,   204,     0,     0,   205,     0,   206,     0,
     207,     0,   208,     0,     0,     0,   209,   210,   211,     0,
       0,   212,     0,     0,     0,     0,   213,     0,     0,     0,
       0,     0,   215,     0,   216,     0,     0,     0,   217,     0,
     218,   219,   220,   221,   222,     0,     0,     0,     0,     0,
       0,   224,   225,   226,     0,  -362,     0,   227,     0,  -362,
     229,     0,   230,   231,   232,     0,     0,   233,   234,     0,
     235,   236,   237,   238,   239,     0,     0,     0,     0,   242,
     243,   244,     0,     0,   245,   246,  4033,   247,   248,   249,
       0,     0,     0,     0,     0,     0,   251,     0,   252,     0,
     253,     0,   254,   255,   256,   257,   258,     0,   259,     0,
     260,     0,     0,     0,     0,   262,   263,     0,     0,     0,
       0,     0,     0,   266,     0,     0,     0,   267,   268,   269,
     270,  4034,     0,   271,   272,   273,     0,   274,     0,   275,
       0,     0,     0,     0,   276,     0,     0,     0,     0,   278,
       0,   279,   280,     0,   281,   282,  4035,     0,     0,   283,
       0,     0,     0,   285,   286,     0,     0,   287,  4036,     0,
     288,   289,     0,     0,     0,     0,     0,   290,   291,     0,
     292,     0,   293,     0,   294,   295,     0,     0,     0,     0,
    -326,     0,     0,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,     0,
     312,   313,   314,   315,     0,   316,   317,   318,   319,     0,
     320,   321,     0,     0,     0,     0,   322,   323,   324,   325,
     326,   327,     0,     0,   328,   329,     0,   330,     0,   331,
       0,   332,   333,   334,   335,   336,   337,   338,   339,   340,
       0,     0,   341,   342,     0,     0,   343,   344,   345,   346,
       0,     0,     0,     0,   348,     0,     0,     0,   349,     0,
     350,   351,   352,     0,   353,   354,   355,  4037,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     360,   361,     0,     0,     0,     0,   363,     0,   364,   365,
     366,   367,   368,   369,   370,   371,   372,     0,     0,     0,
       0,   375,   376,     0,   377,     0,   378,   379,   380,   381,
     382,     0,   383,   384,   385,     0,     0,   386,     0,     0,
       0,   387,   388,   389,   390,   391,     0,     0,   392,   393,
     394,   395,   396,     0,   397,     0,     0,   399,     0,   401,
    -326,     0,   402,     0,     0,     0,   404,     0,     0,   406,
     407,   408,  4038,     0,     0,     0,   410,   411,   412,   413,
     414,   415,   416,     0,   418,   419,     0,   420,     0,     0,
       0,     0,   422,   423,   424,     0,     0,     0,     0,   426,
       0,     0,     0,   427,     0,     0,   429,     0,     0,   432,
     433,     0,   434,     0,   436,     0,   438,   439,     0,     0,
       0,     0,     0,     0,   440,   441,     0,   442,     0,     0,
     443,     0,     0,   444,     0,     0,     0,     0,   446,     0,
       0,     0,   448,     0,   449,   450,   451,   452,   453,   454,
       0,     0,   455,   456,   457,   458,     0,   459,   460,     0,
     461,     0,   462,   463,   464,   465,     0,     0,   466,   467,
       0,   468,   469,   470,   471,     0,     0,     0,     0,     0,
     472,   473,   474,     0,     0,     0,     0,   476,   477,   478,
       0,   479,   480,     0,   481,   482,     0,     0,     0,     0,
       0,   485,     0,     0,   486,     0,     0,     0,   488,   489,
     490,     0,     0,     0,     0,     0,     0,   491,     0,     0,
     492,     0,     0,     0,   493,   494,   495,   496,   497,   498,
    -362,     0,  -326,     0,     0,     0,   499,     0,     0,   501,
       0,   503,     0,   141,   504,   142,   143,   144,   145,   146,
       0,     0,   147,     0,     0,     0,   148,     0,     0,     0,
       0,   150,   151,   152,   153,   154,   155,   156,     0,     0,
    -371,     0,     0,     0,   159,     0,     0,     0,   160,     0,
       0,   161,   162,   163,     0,   164,     0,     0,     0,     0,
       0,   167,  4031,     0,   168,   169,     0,   170,     0,     0,
       0,     0,     0,   174,   175,   176,   177,  4032,   179,   180,
       0,   181,   182,     0,     0,     0,     0,     0,     0,   188,
       0,   190,     0,   192,   193,   194,   195,     0,   196,   197,
       0,   198,   199,   200,     0,   202,     0,   203,     0,     0,
     204,     0,     0,   205,     0,   206,     0,   207,     0,   208,
       0,     0,     0,   209,   210,   211,     0,     0,   212,     0,
       0,     0,     0,   213,     0,     0,     0,     0,     0,   215,
       0,   216,     0,     0,     0,   217,     0,   218,   219,   220,
     221,   222,     0,     0,     0,     0,     0,     0,   224,   225,
     226,     0,  -359,     0,   227,     0,  -359,   229,     0,   230,
     231,   232,     0,     0,   233,   234,     0,   235,   236,   237,
     238,   239,     0,     0,     0,     0,   242,   243,   244,     0,
       0,   245,   246,  4033,   247,   248,   249,     0,     0,     0,
       0,     0,     0,   251,     0,   252,     0,   253,     0,   254,
     255,   256,   257,   258,     0,   259,     0,   260,     0,     0,
       0,     0,   262,   263,     0,     0,     0,     0,     0,     0,
     266,     0,     0,     0,   267,   268,   269,   270,  4034,     0,
     271,   272,   273,     0,   274,     0,   275,     0,     0,     0,
       0,   276,     0,     0,     0,     0,   278,     0,   279,   280,
       0,   281,   282,  4035,     0,     0,   283,     0,     0,     0,
     285,   286,     0,     0,   287,  4036,     0,   288,   289,     0,
       0,     0,     0,     0,   290,   291,     0,   292,     0,   293,
       0,   294,   295,     0,     0,     0,     0,  -326,     0,     0,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,     0,   312,   313,   314,
     315,     0,   316,   317,   318,   319,     0,   320,   321,     0,
       0,     0,     0,   322,   323,   324,   325,   326,   327,     0,
       0,   328,   329,     0,   330,     0,   331,     0,   332,   333,
     334,   335,   336,   337,   338,   339,   340,     0,     0,   341,
     342,     0,     0,   343,   344,   345,   346,     0,     0,     0,
       0,   348,     0,     0,     0,   349,     0,   350,   351,   352,
       0,   353,   354,   355,  4037,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   360,   361,     0,
       0,     0,     0,   363,     0,   364,   365,   366,   367,   368,
     369,   370,   371,   372,     0,     0,     0,     0,   375,   376,
       0,   377,     0,   378,   379,   380,   381,   382,     0,   383,
     384,   385,     0,     0,   386,     0,     0,     0,   387,   388,
     389,   390,   391,     0,     0,   392,   393,   394,   395,   396,
       0,   397,     0,     0,   399,     0,   401,  -326,     0,   402,
       0,     0,     0,   404,     0,     0,   406,   407,   408,  4038,
       0,     0,     0,   410,   411,   412,   413,   414,   415,   416,
       0,   418,   419,     0,   420,     0,     0,     0,     0,   422,
     423,   424,     0,     0,     0,     0,   426,     0,     0,     0,
     427,     0,     0,   429,     0,     0,   432,   433,     0,   434,
       0,   436,     0,   438,   439,     0,     0,     0,     0,     0,
       0,   440,   441,     0,   442,     0,     0,   443,     0,     0,
     444,     0,     0,     0,     0,   446,     0,     0,     0,   448,
       0,   449,   450,   451,   452,   453,   454,     0,     0,   455,
     456,   457,   458,     0,   459,   460,     0,   461,     0,   462,
     463,   464,   465,     0,     0,   466,   467,     0,   468,   469,
     470,   471,     0,     0,     0,     0,     0,   472,   473,   474,
       0,     0,     0,     0,   476,   477,   478,     0,   479,   480,
       0,   481,   482,     0,     0,     0,     0,     0,   485,     0,
       0,   486,     0,     0,     0,   488,   489,   490,     0,     0,
       0,     0,     0,     0,   491,     0,     0,   492,     0,     0,
       0,   493,   494,   495,   496,   497,   498,  -359,     0,  -326,
       0,     0,     0,   499,     0,     0,   501,     0,   503,     0,
     141,   504,   142,   143,   144,   145,   146,     0,     0,   147,
       0,     0,     0,   148,     0,     0,     0,     0,   150,   151,
     152,   153,   154,   155,   156,     0,     0,  -371,     0,     0,
       0,   159,     0,     0,     0,   160,     0,     0,   161,   162,
     163,     0,   164,     0,     0,     0,     0,     0,   167,  4031,
       0,   168,   169,     0,   170,     0,     0,     0,     0,     0,
     174,   175,   176,   177,  4032,   179,   180,     0,   181,   182,
       0,     0,     0,     0,     0,     0,   188,     0,   190,     0,
     192,   193,   194,   195,     0,   196,   197,     0,   198,   199,
     200,     0,   202,     0,   203,     0,     0,   204,     0,     0,
     205,     0,   206,     0,   207,     0,   208,     0,     0,     0,
     209,   210,   211,     0,     0,   212,     0,     0,     0,     0,
     213,     0,     0,     0,     0,     0,   215,     0,   216,     0,
       0,     0,   217,     0,   218,   219,   220,   221,   222,     0,
       0,     0,     0,     0,     0,   224,   225,   226,     0,     0,
       0,   227,     0,  4408,   229,     0,   230,   231,   232,     0,
       0,   233,   234,     0,   235,   236,   237,   238,   239,     0,
       0,     0,     0,   242,   243,   244,     0,     0,   245,   246,
    4033,   247,   248,   249,     0,     0,     0,     0,     0,     0,
     251,     0,   252,     0,   253,     0,   254,   255,   256,   257,
     258,     0,   259,     0,   260,     0,     0,     0,     0,   262,
     263,     0,     0,     0,     0,     0,     0,   266,     0,     0,
       0,   267,   268,   269,   270,  4034,     0,   271,   272,   273,
       0,   274,     0,   275,     0,     0,     0,     0,   276,     0,
       0,     0,     0,   278,     0,   279,   280,     0,   281,   282,
    4035,     0,     0,   283,     0,     0,     0,   285,   286,     0,
       0,   287,  4036,     0,   288,   289,     0,     0,     0,     0,
       0,   290,   291,     0,   292,     0,   293,     0,   294,   295,
       0,     0,     0,     0,  -326,     0,     0,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,     0,   312,   313,   314,   315,     0,   316,
     317,   318,   319,     0,   320,   321,     0,     0,     0,     0,
     322,   323,   324,   325,   326,   327,     0,     0,   328,   329,
       0,   330,     0,   331,     0,   332,   333,   334,   335,   336,
     337,   338,   339,   340,     0,     0,   341,   342,     0,     0,
     343,   344,   345,   346,     0,     0,     0,     0,   348,     0,
       0,     0,   349,     0,   350,   351,   352,     0,   353,   354,
     355,  4037,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   360,   361,     0,     0,     0,     0,
     363,     0,   364,   365,   366,   367,   368,   369,   370,   371,
     372,     0,     0,     0,     0,   375,   376,     0,   377,     0,
     378,   379,   380,   381,   382,     0,   383,   384,   385,     0,
       0,   386,     0,     0,     0,   387,   388,   389,   390,   391,
       0,     0,   392,   393,   394,   395,   396,     0,   397,     0,
       0,   399,     0,   401,  -326,     0,   402,     0,     0,     0,
     404,     0,     0,   406,   407,   408,  4038,     0,     0,     0,
     410,   411,   412,   413,   414,   415,   416,     0,   418,   419,
       0,   420,     0,     0,     0,     0,   422,   423,   424,     0,
       0,     0,     0,   426,     0,     0,     0,   427,     0,     0,
     429,     0,     0,   432,   433,     0,   434,     0,   436,     0,
     438,   439,     0,     0,     0,     0,     0,     0,   440,   441,
       0,   442,     0,     0,   443,     0,     0,   444,     0,     0,
       0,     0,   446,     0,     0,     0,   448,     0,   449,   450,
     451,   452,   453,   454,     0,     0,   455,   456,   457,   458,
       0,   459,   460,     0,   461,     0,   462,   463,   464,   465,
       0,     0,   466,   467,     0,   468,   469,   470,   471,     0,
       0,     0,     0,     0,   472,   473,   474,     0,     0,     0,
       0,   476,   477,   478,     0,   479,   480,     0,   481,   482,
       0,     0,     0,     0,     0,   485,     0,     0,   486,     0,
       0,     0,   488,   489,   490,     0,     0,     0,     0,     0,
       0,   491,     0,     0,   492,     0,     0,     0,   493,   494,
     495,   496,   497,   498,     0,     0,  -326,     0,     0,     0,
     499,     0,     0,   501,     0,   503,     0,   141,   504,   142,
     143,   144,   145,   146,     0,     0,   147,     0,     0,     0,
     148,     0,     0,     0,     0,   150,   151,   152,   153,   154,
     155,   156,     0,     0,  -371,     0,     0,     0,   159,     0,
       0,     0,   160,     0,     0,   161,   162,   163,     0,   164,
       0,     0,     0,     0,     0,   167,  4031,     0,   168,   169,
       0,   170,     0,     0,     0,     0,     0,   174,   175,   176,
     177,  4032,   179,   180,     0,   181,   182,     0,     0,     0,
       0,     0,     0,   188,     0,   190,     0,   192,   193,   194,
     195,     0,   196,   197,     0,   198,   199,   200,     0,   202,
       0,   203,     0,     0,   204,     0,     0,   205,     0,   206,
       0,   207,     0,   208,     0,     0,     0,   209,   210,   211,
       0,     0,   212,     0,     0,     0,     0,   213,     0,     0,
       0,     0,     0,   215,     0,   216,     0,     0,     0,   217,
       0,   218,   219,   220,   221,   222,     0,     0,     0,     0,
       0,     0,   224,   225,   226,     0,     0,     0,   227,     0,
    -364,   229,     0,   230,   231,   232,     0,     0,   233,   234,
       0,   235,   236,   237,   238,   239,     0,     0,     0,     0,
     242,   243,   244,     0,     0,   245,   246,  4033,   247,   248,
     249,     0,     0,     0,     0,     0,     0,   251,     0,   252,
       0,   253,     0,   254,   255,   256,   257,   258,     0,   259,
       0,   260,     0,     0,     0,     0,   262,   263,     0,     0,
       0,     0,     0,     0,   266,     0,     0,     0,   267,   268,
     269,   270,  4034,     0,   271,   272,   273,     0,   274,     0,
     275,     0,     0,     0,     0,   276,     0,     0,     0,     0,
     278,     0,   279,   280,     0,   281,   282,  4035,     0,     0,
     283,     0,     0,     0,   285,   286,     0,     0,   287,  4036,
       0,   288,   289,     0,     0,     0,     0,     0,   290,   291,
       0,   292,     0,   293,     0,   294,   295,     0,     0,     0,
       0,  -326,     0,     0,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
       0,   312,   313,   314,   315,     0,   316,   317,   318,   319,
       0,   320,   321,     0,     0,     0,     0,   322,   323,   324,
     325,   326,   327,     0,     0,   328,   329,     0,   330,     0,
     331,     0,   332,   333,   334,   335,   336,   337,   338,   339,
     340,     0,     0,   341,   342,     0,     0,   343,   344,   345,
     346,     0,     0,     0,     0,   348,     0,     0,     0,   349,
       0,   350,   351,   352,     0,   353,   354,   355,  4037,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   360,   361,     0,     0,     0,     0,   363,     0,   364,
     365,   366,   367,   368,   369,   370,   371,   372,     0,     0,
       0,     0,   375,   376,     0,   377,     0,   378,   379,   380,
     381,   382,     0,   383,   384,   385,     0,     0,   386,     0,
       0,     0,   387,   388,   389,   390,   391,     0,     0,   392,
     393,   394,   395,   396,     0,   397,     0,     0,   399,     0,
     401,  -326,     0,   402,     0,     0,     0,   404,     0,     0,
     406,   407,   408,  4038,     0,     0,     0,   410,   411,   412,
     413,   414,   415,   416,     0,   418,   419,     0,   420,     0,
       0,     0,     0,   422,   423,   424,     0,     0,     0,     0,
     426,     0,     0,     0,   427,     0,     0,   429,     0,     0,
     432,   433,     0,   434,     0,   436,     0,   438,   439,     0,
       0,     0,     0,     0,     0,   440,   441,     0,   442,     0,
       0,   443,     0,     0,   444,     0,     0,     0,     0,   446,
       0,     0,     0,   448,     0,   449,   450,   451,   452,   453,
     454,     0,     0,   455,   456,   457,   458,     0,   459,   460,
       0,   461,     0,   462,   463,   464,   465,     0,     0,   466,
     467,     0,   468,   469,   470,   471,     0,     0,     0,     0,
       0,   472,   473,   474,     0,     0,     0,     0,   476,   477,
     478,     0,   479,   480,     0,   481,   482,     0,     0,     0,
       0,     0,   485,     0,     0,   486,     0,     0,     0,   488,
     489,   490,     0,     0,     0,     0,     0,     0,   491,     0,
       0,   492,     0,     0,     0,   493,   494,   495,   496,   497,
     498,     0,     0,  -326,     0,     0,     0,   499,     0,     0,
     501,     0,   503,     0,   141,   504,   142,   143,   144,   145,
     146,     0,     0,   147,     0,     0,     0,   148,     0,     0,
       0,     0,   150,   151,   152,   153,   154,   155,   156,     0,
       0,  -371,     0,     0,     0,   159,     0,     0,     0,   160,
       0,     0,   161,   162,   163,     0,   164,     0,     0,     0,
       0,     0,   167,  4031,     0,   168,   169,     0,   170,     0,
       0,     0,     0,     0,   174,   175,   176,   177,  4032,   179,
     180,     0,   181,   182,     0,     0,     0,     0,     0,     0,
     188,     0,   190,     0,   192,   193,   194,   195,     0,   196,
     197,     0,   198,   199,   200,     0,   202,     0,   203,     0,
       0,   204,     0,     0,   205,     0,   206,     0,   207,     0,
     208,     0,     0,     0,   209,   210,   211,     0,     0,   212,
       0,     0,     0,     0,   213,     0,     0,     0,     0,     0,
     215,     0,   216,     0,     0,     0,   217,     0,   218,   219,
     220,   221,   222,     0,     0,     0,     0,     0,     0,   224,
     225,   226,     0,     0,     0,   227,     0,  4544,   229,     0,
     230,   231,   232,     0,     0,   233,   234,     0,   235,   236,
     237,   238,   239,     0,     0,     0,     0,   242,   243,   244,
       0,     0,   245,   246,  4033,   247,   248,   249,     0,     0,
       0,     0,     0,     0,   251,     0,   252,     0,   253,     0,
     254,   255,   256,   257,   258,     0,   259,     0,   260,     0,
       0,     0,     0,   262,   263,     0,     0,     0,     0,     0,
       0,   266,     0,     0,     0,   267,   268,   269,   270,  4034,
       0,   271,   272,   273,     0,   274,     0,   275,     0,     0,
       0,     0,   276,     0,     0,     0,     0,   278,     0,   279,
     280,     0,   281,   282,  4035,     0,     0,   283,     0,     0,
       0,   285,   286,     0,     0,   287,  4036,     0,   288,   289,
       0,     0,     0,     0,     0,   290,   291,     0,   292,     0,
     293,     0,   294,   295,     0,     0,     0,     0,  -326,     0,
       0,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,     0,   312,   313,
     314,   315,     0,   316,   317,   318,   319,     0,   320,   321,
       0,     0,     0,     0,   322,   323,   324,   325,   326,   327,
       0,     0,   328,   329,     0,   330,     0,   331,     0,   332,
     333,   334,   335,   336,   337,   338,   339,   340,     0,     0,
     341,   342,     0,     0,   343,   344,   345,   346,     0,     0,
       0,     0,   348,     0,     0,     0,   349,     0,   350,   351,
     352,     0,   353,   354,   355,  4037,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   360,   361,
       0,     0,     0,     0,   363,     0,   364,   365,   366,   367,
     368,   369,   370,   371,   372,     0,     0,     0,     0,   375,
     376,     0,   377,     0,   378,   379,   380,   381,   382,     0,
     383,   384,   385,     0,     0,   386,     0,     0,     0,   387,
     388,   389,   390,   391,     0,     0,   392,   393,   394,   395,
     396,     0,   397,     0,     0,   399,     0,   401,  -326,     0,
     402,     0,     0,     0,   404,     0,     0,   406,   407,   408,
    4038,     0,     0,     0,   410,   411,   412,   413,   414,   415,
     416,     0,   418,   419,     0,   420,     0,     0,     0,     0,
     422,   423,   424,     0,     0,     0,     0,   426,     0,     0,
       0,   427,     0,     0,   429,     0,     0,   432,   433,     0,
     434,     0,   436,     0,   438,   439,     0,     0,     0,     0,
       0,     0,   440,   441,     0,   442,     0,     0,   443,     0,
       0,   444,     0,     0,     0,     0,   446,     0,     0,     0,
     448,     0,   449,   450,   451,   452,   453,   454,     0,     0,
     455,   456,   457,   458,     0,   459,   460,     0,   461,     0,
     462,   463,   464,   465,     0,     0,   466,   467,     0,   468,
     469,   470,   471,     0,     0,     0,     0,     0,   472,   473,
     474,     0,     0,     0,     0,   476,   477,   478,     0,   479,
     480,     0,   481,   482,     0,     0,     0,     0,     0,   485,
       0,     0,   486,     0,     0,     0,   488,   489,   490,     0,
       0,     0,     0,     0,     0,   491,     0,     0,   492,     0,
       0,     0,   493,   494,   495,   496,   497,   498,     0,     0,
    -326,     0,     0,     0,   499,     0,     0,   501,     0,   503,
       0,   141,   504,   142,   143,   144,   145,   146,     0,     0,
     147,     0,     0,     0,   148,     0,     0,     0,     0,   150,
     151,   152,   153,   154,   155,   156,     0,     0,  -371,     0,
       0,     0,   159,     0,     0,     0,   160,     0,     0,   161,
     162,   163,     0,   164,     0,     0,     0,     0,     0,   167,
    4031,     0,   168,   169,     0,   170,     0,     0,     0,     0,
       0,   174,   175,   176,   177,  4032,   179,   180,     0,   181,
     182,     0,     0,     0,     0,     0,     0,   188,     0,   190,
       0,   192,   193,   194,   195,     0,   196,   197,     0,   198,
     199,   200,     0,   202,     0,   203,     0,     0,   204,     0,
       0,   205,     0,   206,     0,   207,     0,   208,     0,     0,
       0,   209,   210,   211,     0,     0,   212,     0,     0,     0,
       0,   213,     0,     0,     0,     0,     0,   215,     0,   216,
       0,     0,     0,   217,     0,   218,   219,   220,   221,   222,
       0,     0,     0,     0,     0,     0,   224,   225,   226,     0,
       0,     0,   227,     0,  4597,   229,     0,   230,   231,   232,
       0,     0,   233,   234,     0,   235,   236,   237,   238,   239,
       0,     0,     0,     0,   242,   243,   244,     0,     0,   245,
     246,  4033,   247,   248,   249,     0,     0,     0,     0,     0,
       0,   251,     0,   252,     0,   253,     0,   254,   255,   256,
     257,   258,     0,   259,     0,   260,     0,     0,     0,     0,
     262,   263,     0,     0,     0,     0,     0,     0,   266,     0,
       0,     0,   267,   268,   269,   270,  4034,     0,   271,   272,
     273,     0,   274,     0,   275,     0,     0,     0,     0,   276,
       0,     0,     0,     0,   278,     0,   279,   280,     0,   281,
     282,  4035,     0,     0,   283,     0,     0,     0,   285,   286,
       0,     0,   287,  4036,     0,   288,   289,     0,     0,     0,
       0,     0,   290,   291,     0,   292,     0,   293,     0,   294,
     295,     0,     0,     0,     0,  -326,     0,     0,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,     0,   312,   313,   314,   315,     0,
     316,   317,   318,   319,     0,   320,   321,     0,     0,     0,
       0,   322,   323,   324,   325,   326,   327,     0,     0,   328,
     329,     0,   330,     0,   331,     0,   332,   333,   334,   335,
     336,   337,   338,   339,   340,     0,     0,   341,   342,     0,
       0,   343,   344,   345,   346,     0,     0,     0,     0,   348,
       0,     0,     0,   349,     0,   350,   351,   352,     0,   353,
     354,   355,  4037,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   360,   361,     0,     0,     0,
       0,   363,     0,   364,   365,   366,   367,   368,   369,   370,
     371,   372,     0,     0,     0,     0,   375,   376,     0,   377,
       0,   378,   379,   380,   381,   382,     0,   383,   384,   385,
       0,     0,   386,     0,     0,     0,   387,   388,   389,   390,
     391,     0,     0,   392,   393,   394,   395,   396,     0,   397,
       0,     0,   399,     0,   401,  -326,     0,   402,     0,     0,
       0,   404,     0,     0,   406,   407,   408,  4038,     0,     0,
       0,   410,   411,   412,   413,   414,   415,   416,     0,   418,
     419,     0,   420,     0,     0,     0,     0,   422,   423,   424,
       0,     0,     0,     0,   426,     0,     0,     0,   427,     0,
       0,   429,     0,     0,   432,   433,     0,   434,     0,   436,
       0,   438,   439,     0,     0,     0,     0,     0,     0,   440,
     441,     0,   442,     0,     0,   443,     0,     0,   444,     0,
       0,     0,     0,   446,     0,     0,     0,   448,     0,   449,
     450,   451,   452,   453,   454,     0,     0,   455,   456,   457,
     458,     0,   459,   460,     0,   461,     0,   462,   463,   464,
     465,     0,     0,   466,   467,     0,   468,   469,   470,   471,
       0,     0,     0,     0,     0,   472,   473,   474,     0,     0,
       0,     0,   476,   477,   478,     0,   479,   480,     0,   481,
     482,     0,     0,     0,     0,     0,   485,     0,     0,   486,
       0,     0,     0,   488,   489,   490,     0,     0,     0,     0,
       0,     0,   491,     0,     0,   492,     0,     0,     0,   493,
     494,   495,   496,   497,   498,     0,     0,  -326,     0,     0,
       0,   499,     0,     0,   501,     0,   503,     0,   141,   504,
     142,   143,   144,   145,   146,     0,     0,   147,     0,     0,
       0,   148,     0,     0,     0,     0,   150,   151,   152,   153,
     154,   155,   156,     0,     0,  -371,     0,     0,     0,   159,
       0,     0,     0,   160,     0,     0,   161,   162,   163,     0,
     164,     0,     0,     0,     0,     0,   167,  4031,     0,   168,
     169,     0,   170,     0,     0,     0,     0,     0,   174,   175,
     176,   177,  4032,   179,   180,     0,   181,   182,     0,     0,
       0,     0,     0,     0,   188,     0,   190,     0,   192,   193,
     194,   195,     0,   196,   197,     0,   198,   199,   200,     0,
     202,     0,   203,     0,     0,   204,     0,     0,   205,     0,
     206,     0,   207,     0,   208,     0,     0,     0,   209,   210,
     211,     0,     0,   212,     0,     0,     0,     0,   213,     0,
       0,     0,     0,     0,   215,     0,   216,     0,     0,     0,
     217,     0,   218,   219,   220,   221,   222,     0,     0,     0,
       0,     0,     0,   224,   225,   226,     0,     0,     0,   227,
       0,  -345,   229,     0,   230,   231,   232,     0,     0,   233,
     234,     0,   235,   236,   237,   238,   239,     0,     0,     0,
       0,   242,   243,   244,     0,     0,   245,   246,  4033,   247,
     248,   249,     0,     0,     0,     0,     0,     0,   251,     0,
     252,     0,   253,     0,   254,   255,   256,   257,   258,     0,
     259,     0,   260,     0,     0,     0,     0,   262,   263,     0,
       0,     0,     0,     0,     0,   266,     0,     0,     0,   267,
     268,   269,   270,  4034,     0,   271,   272,   273,     0,   274,
       0,   275,     0,     0,     0,     0,   276,     0,     0,     0,
       0,   278,     0,   279,   280,     0,   281,   282,  4035,     0,
       0,   283,     0,     0,     0,   285,   286,     0,     0,   287,
    4036,     0,   288,   289,     0,     0,     0,     0,     0,   290,
     291,     0,   292,     0,   293,     0,   294,   295,     0,     0,
       0,     0,  -326,     0,     0,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,     0,   312,   313,   314,   315,     0,   316,   317,   318,
     319,     0,   320,   321,     0,     0,     0,     0,   322,   323,
     324,   325,   326,   327,     0,     0,   328,   329,     0,   330,
       0,   331,     0,   332,   333,   334,   335,   336,   337,   338,
     339,   340,     0,     0,   341,   342,     0,     0,   343,   344,
     345,   346,     0,     0,     0,     0,   348,     0,     0,     0,
     349,     0,   350,   351,   352,     0,   353,   354,   355,  4037,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   360,   361,     0,     0,     0,     0,   363,     0,
     364,   365,   366,   367,   368,   369,   370,   371,   372,     0,
       0,     0,     0,   375,   376,     0,   377,     0,   378,   379,
     380,   381,   382,     0,   383,   384,   385,     0,     0,   386,
       0,     0,     0,   387,   388,   389,   390,   391,     0,     0,
     392,   393,   394,   395,   396,     0,   397,     0,     0,   399,
       0,   401,  -326,     0,   402,     0,     0,     0,   404,     0,
       0,   406,   407,   408,  4038,     0,     0,     0,   410,   411,
     412,   413,   414,   415,   416,     0,   418,   419,     0,   420,
       0,     0,     0,     0,   422,   423,   424,     0,     0,     0,
       0,   426,     0,     0,     0,   427,     0,     0,   429,     0,
       0,   432,   433,     0,   434,     0,   436,     0,   438,   439,
       0,     0,     0,     0,     0,     0,   440,   441,     0,   442,
       0,     0,   443,     0,     0,   444,     0,     0,     0,     0,
     446,     0,     0,     0,   448,     0,   449,   450,   451,   452,
     453,   454,     0,     0,   455,   456,   457,   458,     0,   459,
     460,     0,   461,     0,   462,   463,   464,   465,     0,     0,
     466,   467,     0,   468,   469,   470,   471,     0,     0,     0,
       0,     0,   472,   473,   474,     0,     0,     0,     0,   476,
     477,   478,     0,   479,   480,     0,   481,   482,     0,     0,
       0,     0,     0,   485,     0,     0,   486,     0,     0,     0,
     488,   489,   490,     0,     0,     0,     0,     0,     0,   491,
       0,     0,   492,     0,     0,     0,   493,   494,   495,   496,
     497,   498,     0,     0,  -326,     0,     0,     0,   499,     0,
       0,   501,     0,   503,     0,   141,   504,   142,   143,   144,
     145,   146,     0,     0,   147,     0,     0,     0,   148,     0,
       0,     0,     0,   150,   151,   152,   153,   154,   155,   156,
       0,     0,  -371,     0,     0,     0,   159,     0,     0,     0,
     160,     0,     0,   161,   162,   163,     0,   164,     0,     0,
       0,     0,     0,   167,  4031,     0,   168,   169,     0,   170,
       0,     0,     0,     0,     0,   174,   175,   176,   177,  4032,
     179,   180,     0,   181,   182,     0,     0,     0,     0,     0,
       0,   188,     0,   190,     0,   192,   193,   194,   195,     0,
     196,   197,     0,   198,   199,   200,     0,   202,     0,   203,
       0,     0,   204,     0,     0,   205,     0,   206,     0,   207,
       0,   208,     0,     0,     0,   209,   210,   211,     0,     0,
     212,     0,     0,     0,     0,   213,     0,     0,     0,     0,
       0,   215,     0,   216,     0,     0,     0,   217,     0,   218,
     219,   220,   221,   222,     0,     0,     0,     0,     0,     0,
     224,   225,   226,     0,     0,     0,   227,     0,     0,   229,
       0,   230,   231,   232,     0,     0,   233,   234,     0,   235,
     236,   237,   238,   239,     0,     0,     0,     0,   242,   243,
     244,     0,     0,   245,   246,  4033,   247,   248,   249,     0,
       0,     0,     0,     0,     0,   251,     0,   252,     0,   253,
       0,   254,   255,   256,   257,   258,     0,   259,     0,   260,
       0,     0,     0,     0,   262,   263,     0,     0,     0,     0,
       0,     0,   266,     0,     0,     0,   267,   268,   269,   270,
    4034,     0,   271,   272,   273,     0,   274,     0,   275,     0,
       0,     0,     0,   276,     0,     0,     0,     0,   278,     0,
     279,   280,     0,   281,   282,  4035,     0,     0,   283,     0,
       0,     0,   285,   286,     0,     0,   287,  4036,     0,   288,
     289,     0,     0,     0,     0,     0,   290,   291,     0,   292,
       0,   293,     0,   294,   295,     0,     0,     0,     0,  -326,
       0,     0,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,     0,   312,
     313,   314,   315,     0,   316,   317,   318,   319,     0,   320,
     321,     0,     0,     0,     0,   322,   323,   324,   325,   326,
     327,     0,     0,   328,   329,     0,   330,     0,   331,     0,
     332,   333,   334,   335,   336,   337,   338,   339,   340,     0,
       0,   341,   342,     0,     0,   343,   344,   345,   346,     0,
       0,     0,     0,   348,     0,     0,     0,   349,     0,   350,
     351,   352,     0,   353,   354,   355,  4037,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   360,
     361,     0,     0,     0,     0,   363,     0,   364,   365,   366,
     367,   368,   369,   370,   371,   372,     0,     0,     0,     0,
     375,   376,     0,   377,     0,   378,   379,   380,   381,   382,
       0,   383,   384,   385,     0,     0,   386,     0,     0,     0,
     387,   388,   389,   390,   391,     0,     0,   392,   393,   394,
     395,   396,     0,   397,     0,     0,   399,     0,   401,  -326,
       0,   402,     0,     0,     0,   404,     0,     0,   406,   407,
     408,  4038,     0,     0,     0,   410,   411,   412,   413,   414,
     415,   416,     0,   418,   419,     0,   420,     0,     0,     0,
       0,   422,   423,   424,     0,     0,     0,     0,   426,     0,
       0,     0,   427,     0,     0,   429,     0,     0,   432,   433,
       0,   434,     0,   436,     0,   438,   439,     0,     0,     0,
       0,     0,     0,   440,   441,     0,   442,     0,     0,   443,
       0,     0,   444,     0,     0,     0,     0,   446,     0,     0,
       0,   448,     0,   449,   450,   451,   452,   453,   454,     0,
       0,   455,   456,   457,   458,     0,   459,   460,     0,   461,
       0,   462,   463,   464,   465,     0,     0,   466,   467,     0,
     468,   469,   470,   471,     0,     0,     0,     0,     0,   472,
     473,   474,     0,     0,     0,     0,   476,   477,   478,     0,
     479,   480,     0,   481,   482,     0,     0,     0,     0,     0,
     485,     0,     0,   486,     0,     0,     0,   488,   489,   490,
       0,     0,     0,     0,     0,     0,   491,     0,     0,   492,
       0,     0,     0,   493,   494,   495,   496,   497,   498,     0,
       0,  -326,     0,     0,     0,   499,     0,     0,   501,     0,
     503,     0,   141,   504,   142,   143,   144,   145,   146,     0,
       0,   147,     0,     0,     0,   148,     0,     0,     0,     0,
     150,   151,   152,   153,   154,   155,   156,     0,     0,  -371,
       0,     0,     0,   159,     0,     0,     0,   160,     0,     0,
     161,   162,   163,     0,   164,     0,     0,     0,     0,     0,
     167,  4031,     0,   168,   169,     0,   170,     0,     0,     0,
       0,     0,   174,   175,   176,   177,  4032,   179,   180,     0,
     181,   182,     0,     0,     0,     0,     0,     0,   188,     0,
     190,     0,   192,   193,   194,   195,     0,   196,   197,     0,
     198,   199,   200,     0,   202,     0,   203,     0,     0,   204,
       0,     0,   205,     0,   206,     0,   207,     0,   208,     0,
       0,     0,   209,   210,   211,     0,     0,   212,     0,     0,
       0,     0,   213,     0,     0,     0,     0,     0,   215,     0,
     216,     0,     0,     0,   217,     0,   218,   219,   220,   221,
     222,     0,     0,     0,     0,     0,     0,   224,   225,   226,
       0,     0,     0,   227,     0,     0,   229,     0,   230,   231,
     232,     0,     0,   233,   234,     0,   235,   236,   237,   238,
     239,     0,     0,     0,     0,   242,   243,   244,     0,     0,
     245,   246,  4033,   247,   248,   249,     0,     0,     0,     0,
       0,     0,   251,     0,   252,     0,   253,     0,   254,   255,
     256,   257,   258,     0,   259,     0,   260,     0,     0,     0,
       0,   262,   263,     0,     0,     0,     0,     0,     0,   266,
       0,     0,     0,   267,   268,   269,   270,  4034,     0,   271,
     272,   273,     0,   274,     0,   275,     0,     0,     0,     0,
     276,     0,     0,     0,     0,   278,     0,   279,   280,     0,
     281,   282,  4035,     0,     0,   283,     0,     0,     0,   285,
     286,     0,     0,   287,  4036,     0,   288,   289,     0,     0,
       0,     0,     0,   290,   291,     0,   292,     0,   293,     0,
     294,   295,     0,     0,     0,     0,  -326,     0,     0,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,     0,   312,   313,   314,   315,
       0,   316,   317,   318,   319,     0,   320,   321,     0,     0,
       0,     0,   322,   323,   324,   325,   326,   327,     0,     0,
     328,   329,     0,   330,     0,   331,     0,   332,   333,   334,
     335,   336,   337,   338,   339,   340,     0,     0,   341,   342,
       0,     0,   343,   344,   345,   346,     0,     0,     0,     0,
     348,     0,     0,     0,   349,     0,   350,   351,   352,     0,
     353,   354,   355,  4037,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   360,   361,     0,     0,
       0,     0,   363,     0,   364,   365,   366,   367,   368,   369,
     370,   371,   372,     0,     0,     0,     0,   375,   376,     0,
     377,     0,   378,   379,   380,   381,   382,     0,   383,   384,
     385,     0,     0,   386,     0,     0,     0,   387,   388,   389,
     390,   391,     0,     0,   392,   393,   394,   395,   396,     0,
     397,     0,     0,   399,     0,   401,  -326,     0,   402,     0,
       0,     0,   404,     0,     0,   406,   407,   408,  4038,     0,
       0,     0,   410,   411,   412,   413,   414,   415,   416,     0,
     418,   419,     0,   420,     0,     0,     0,     0,   422,   423,
     424,     0,     0,     0,     0,   426,     0,     0,     0,   427,
       0,     0,   429,     0,     0,   432,   433,     0,   434,     0,
     436,     0,   438,   439,     0,     0,     0,     0,     0,     0,
     440,   441,     0,   442,     0,     0,   443,     0,     0,   444,
       0,     0,     0,     0,   446,     0,     0,     0,   448,     0,
     449,   450,   451,   452,   453,   454,     0,     0,   455,   456,
     457,   458,     0,   459,   460,     0,   461,     0,   462,   463,
     464,   465,     0,     0,   466,   467,     0,   468,   469,   470,
     471,     0,     0,     0,     0,     0,   472,   473,   474,     0,
       0,     0,     0,   476,   477,   478,     0,   479,   480,     0,
     481,   482,     0,     0,     0,     0,     0,   485,     0,     0,
    4411,     0,     0,     0,   488,   489,   490,     0,     0,     0,
       0,     0,     0,   491,     0,     0,   492,     0,     0,     0,
     493,   494,   495,   496,   497,   498,     0,     0,  -326,     0,
       0,     0,   499,     0,     0,   501,     0,   503,     0,   141,
     504,   142,   143,   144,   145,   146,     0,     0,   147,     0,
       0,     0,   148,     0,     0,     0,     0,   150,   151,   152,
     153,   154,   155,   156,     0,     0,     0,     0,     0,     0,
     159,     0,     0,     0,   160,     0,     0,   161,   162,   163,
       0,   164,     0,     0,     0,     0,     0,   167,     0,     0,
     168,   169,     0,   170,     0,     0,     0,     0,     0,   174,
     175,   176,   177,     0,   179,   180,     0,   181,   182,     0,
       0,     0,     0,     0,     0,   188,     0,   190,     0,   192,
     193,   194,   195,     0,   196,   197,     0,   198,   199,   200,
       0,   202,     0,   203,     0,     0,   204,     0,     0,   205,
       0,   206,     0,   207,     0,   208,     0,     0,     0,   209,
     210,   211,     0,     0,   212,     0,     0,     0,     0,   213,
       0,     0,     0,     0,     0,   215,     0,   216,     0,     0,
       0,   217,     0,   218,   219,   220,   221,   222,     0,     0,
       0,     0,     0,     0,   224,   225,   226,     0,     0,     0,
     227,     0,     0,   229,     0,   230,   231,   232,     0,     0,
     233,   234,     0,   235,   236,   237,   238,   239,     0,     0,
       0,     0,   242,   243,   244,     0,     0,   245,   246,     0,
     247,   248,   249,     0,     0,     0,     0,     0,     0,   251,
       0,   252,     0,   253,     0,   254,   255,   256,   257,   258,
       0,   259,     0,   260,     0,     0,     0,     0,   262,   263,
       0,     0,     0,     0,     0,     0,   266,     0,     0,     0,
     267,   268,   269,   270,     0,     0,   271,   272,   273,     0,
     274,     0,   275,     0,     0,     0,     0,   276,     0,     0,
       0,     0,   278,     0,   279,   280,     0,   281,   282,     0,
       0,     0,   283,     0,     0,     0,   285,   286,     0,     0,
     287,     0,     0,   288,   289,     0,     0,     0,     0,     0,
     290,   291,     0,   292,     0,   293,     0,   294,   295,     0,
       0,     0,     0,     0,     0,     0,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,     0,   312,   313,   314,   315,     0,   316,   317,
     318,   319,     0,   320,   321,     0,     0,     0,     0,   322,
     323,   324,   325,   326,   327,     0,     0,   328,   329,     0,
     330,     0,   331,     0,   332,   333,   334,   335,   336,   337,
     338,   339,   340,     0,     0,   341,   342,     0,     0,   343,
     344,   345,   346,     0,     0,     0,     0,   348,     0,     0,
       0,   349,     0,   350,   351,   352,     0,   353,   354,   355,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   360,   361,     0,     0,     0,     0,   363,
       0,   364,   365,   366,   367,   368,   369,   370,   371,   372,
       0,     0,     0,     0,   375,   376,     0,   377,     0,   378,
     379,   380,   381,   382,     0,   383,   384,   385,     0,     0,
     386,     0,     0,     0,   387,   388,   389,   390,   391,     0,
       0,   392,   393,   394,   395,   396,     0,   397,     0,     0,
     399,     0,   401,     0,     0,   402,     0,     0,     0,   404,
       0,     0,   406,   407,   408,     0,     0,     0,     0,   410,
     411,   412,   413,   414,   415,   416,     0,   418,   419,     0,
     420,     0,     0,     0,     0,   422,   423,   424,     0,     0,
       0,     0,   426,     0,     0,     0,   427,     0,     0,   429,
       0,     0,   432,   433,     0,   434,     0,   436,     0,   438,
     439,     0,     0,     0,     0,     0,     0,   440,   441,     0,
     442,     0,     0,   443,     0,     0,   444,     0,     0,     0,
       0,   446,     0,     0,     0,   448,     0,   449,   450,   451,
     452,   453,   454,     0,     0,   455,   456,   457,   458,     0,
     459,   460,     0,   461,     0,   462,   463,   464,   465,     0,
       0,   466,   467,     0,   468,   469,   470,   471,     0,     0,
       0,     0,     0,   472,   473,   474,     0,     0,     0,     0,
     476,   477,   478,     0,   479,   480,     0,   481,   482,     0,
       0,     0,     0,     0,   485,     0,     0,   486,     0,     0,
       0,   488,   489,   490,     0,     0,     0,     0,     0,     0,
     491,     0,     0,   492,     0,     0,     0,   493,   494,   495,
     496,   497,   498,     0,     0,     0,     0,     0,     0,   499,
       0,     0,   501,     0,   503,     0,     0,   504
};

static const yytype_int16 yycheck[] =
{
       6,   658,  1018,   591,   569,  1180,   614,  1019,    20,   931,
     932,   911,  1138,    19,  1596,   590,   591,    23,    30,   941,
    1211,  1894,  1895,  1306,  1211,    37,   127,    33,     6,  1556,
    1742,  2056,  1111,   517,    40,   953,  2056,    43,  1350,   978,
    1429,  1274,    48,   537,   538,   539,  1534,   541,   542,    55,
    1449,   545,   731,   547,  1554,  1156,   535,  1592,  1593,   685,
     978,  2373,  2536,  1449,   628,  1306,  1241,  1242,   824,     4,
    1245,  1246,  1247,  1248,  2336,  1250,  1251,  1252,  1253,  1254,
    1255,  1256,  1257,  2164,  2464,  2939,  1233,  3269,  2868,  2300,
    1578,  2597,    98,  1240,  2985,  2176,  2804,  1147,   951,  1358,
    2262,  1818,   667,   668,  1460,   654,   655,   594,  2177,    23,
     597,  2990,  2502,  1023,  1023,   997,   122,  2383,   124,  2436,
     126,   127,   128,  3464,  1480,  1882,   979,  2054,  3524,  2940,
    2441,  2393,  1488,  1489,  2037,  2056,    17,  3079,  2504,   796,
      12,  2124,  2508,    12,  2054,  2124,   124,   149,   126,     9,
    1524,    19,    25,  2519,  3153,  3331,    19,  2907,    35,   785,
     786,   787,    16,    17,    21,  2531,  2662,  2663,  2918,    29,
    1052,   797,  2668,  2444,  2670,   116,    36,    16,    17,    82,
      82,    21,  2453,   179,    98,  2877,    52,    74,   672,    10,
     674,   675,   676,    16,    17,    35,  3095,  2124,  2722,    19,
    1893,    19,    17,    60,    61,  4070,  2113,    71,    61,    49,
     167,    25,  2493,  2494,  2124,    71,   134,    11,    16,    17,
      60,    61,    69,    48,    16,    17,   980,    31,   133,  2611,
     154,  2028,    65,  3373,    86,    16,    17,    16,    17,   164,
      12,    21,   289,  2797,   114,  3311,    57,   148,   207,    90,
     214,  3967,   382,  2256,   130,    35,   327,   150,  4021,   376,
     374,    12,   826,   397,    64,   182,  3103,  2665,    82,    49,
     231,    21,   130,    25,   275,    88,   136,     8,   363,   160,
      60,    61,  3623,  3624,   160,    35,  3627,    16,    17,   460,
      37,   400,   160,   309,   235,  3691,   164,    83,   478,    49,
     196,  1534,   660,   432,   253,  3646,   427,    16,    17,    23,
      60,    61,  3653,   143,   131,   231,  3982,   452,    16,    17,
     279,  2633,  2603,  2604,   227,   889,   229,   130,    44,   131,
     273,  2648,    12,  2650,   828,  4272,    12,   131,  3520,   403,
     273,    16,    17,  4208,   164,  1578,   164,   556,   367,  2046,
     279,   403,   130,    16,    17,   258,   588,   160,    16,    17,
      37,    19,   427,    16,    17,   238,   180,   194,    12,    25,
     196,    16,    17,   744,   601,    16,    17,   154,  2147,   556,
     622,   521,   160,   448,   360,    16,    17,   601,   154,    16,
      17,   522,    89,   193,   765,   556,   141,    16,    17,     8,
     171,   171,   449,    41,   196,   647,   422,   778,   779,   309,
     162,   156,   543,   110,   646,   555,   481,    16,    17,   520,
     647,   254,    31,   249,   238,   160,   653,   423,   199,   199,
      74,   248,   646,   647,   410,   364,   645,   160,  2000,   382,
     504,   625,   359,   360,   317,   134,   248,  4384,   365,   382,
     117,   470,   504,   120,   583,   282,   187,   558,   172,   375,
     356,    16,    17,   821,   144,   645,   467,  1146,   144,    67,
     290,   218,   219,    16,    17,   652,   478,   290,   427,  2418,
     496,  1160,   653,   554,   971,  4151,   238,  4250,  4251,   450,
    3831,  3564,  1504,   386,    16,    17,   326,  2814,  2815,  3840,
    1422,   622,  2638,   317,    16,    17,   615,   365,   667,   668,
     581,   645,   647,   627,   520,  1271,   522,   647,  1083,  1084,
    1085,    16,    17,  3864,   483,  2497,  1915,   381,  3869,    52,
     384,   616,   192,  3599,  3284,  3285,   653,   543,   273,   503,
    2028,   218,   219,   357,  2810,  2811,  2812,  3297,   554,   363,
     273,   362,   558,   242,   560,  2458,    16,    17,   381,  1792,
    4276,   384,   487,  3313,  3314,   317,  2054,   573,  3260,   196,
    2497,   231,  3264,  4336,   621,   510,  3758,  3327,  2317,  1236,
     427,   422,   238,   381,   590,   486,   384,  2497,   164,   381,
     384,   457,   384,   414,   600,  1770,    16,    17,  1516,  1882,
     381,  1454,   381,   384,  1457,   384,  1781,   427,  1461,  1784,
    1463,   363,   412,   619,  1524,  1524,  3792,  3559,  1244,  1975,
    2389,   473,   628,    74,   630,  2113,   561,  1306,  2611,   164,
      16,    17,  2611,   349,  2555,  1261,  2124,   643,  1491,  1492,
      64,  1882,   648,   645,   650,  1124,  1125,   649,   654,   655,
    3723,   647,   381,   659,   660,   384,  3038,   574,   664,   594,
     617,   317,   597,   527,  3218,   643,   601,  1577,  1577,  3809,
    1149,   527,   381,   590,   680,   384,   594,  2580,  1157,  2476,
    1159,  1563,  2585,   381,  2611,  3209,   384,   589,   548,   630,
    2593,  2594,  1171,  1172,  1173,   619,  2599,   518,  2605,  3772,
    1179,  2611,  2395,   536,    16,    17,   381,   363,   568,   384,
      16,    17,  3492,  4578,  1764,    65,   576,   531,   381,   622,
    2723,   384,   823,   381,   496,   731,   384,  3903,   381,   586,
    1279,   384,  1486,  2107,   648,  1861,   381,  3913,   601,   384,
     381,   622,   602,   384,   614,   496,   586,  3271,  3222,   567,
     381,   572,   567,   384,   381,   608,  3037,   384,   645,  3658,
    1324,  3078,   381,   567,   669,   384,    16,    17,   645,  3945,
     651,   611,  3583,   645,   647,   651,   645,   631,  1534,   531,
    3779,   647,   381,   651,   790,   384,   792,  3624,   613,   589,
      16,    17,   631,   614,   580,  2028,   650,   622,  2495,  4195,
      16,    17,   616,   601,  1353,   645,   586,   627,   631,   556,
    1297,   817,   818,   819,   820,   821,   822,   823,   569,   825,
     826,  1370,  1578,   646,   647,   831,   381,   607,   608,   384,
     931,  1395,  3774,   631,   935,   936,   586,  3587,   381,   631,
     818,   384,   619,  2343,   822,    16,    17,   825,   651,   647,
     631,   952,   631,   619,  1418,   647,    16,    17,   864,   381,
    3552,  3553,   384,   179,   616,   646,   647,   646,   647,   381,
    2743,   877,   384,   651,  2456,   531,    16,    17,  2647,   556,
    2113,  2443,   194,   889,   890,   620,   381,   525,   894,   384,
    1377,  2124,  1051,   560,  1458,   647,   563,   620,   496,  2838,
      16,    17,   631,  3215,   254,   594,   559,   164,   546,  2782,
     164,   487,    16,    17,    16,    17,   651,   646,   647,    16,
      17,   381,   631,   179,   384,   931,   160,  3307,   651,   935,
     936,  3067,  2904,   631,   457,  4331,   574,   646,   647,  4280,
     600,  4282,  1101,  3254,    16,    17,   952,  2915,   883,   647,
    2975,  3268,   487,  1528,  1438,  2975,   631,  3453,    11,  3225,
     616,   381,   321,   877,   384,   416,  3462,  3229,   631,  4204,
     830,  3361,   647,   631,    16,    17,   890,  2904,   631,  1901,
     894,    16,    17,   646,   647,   272,   631,   235,  2476,  3260,
     631,   997,  2519,  3264,  2904,   381,  3362,   231,   384,  1921,
     631,   646,   647,   399,   631,   646,   647,  3286,   358,  2497,
    1689,   435,   631,  1019,  3893,  4088,   647,    47,  2921,   646,
    2923,    35,   197,  2762,  2763,  2764,  2201,  2930,   647,  2428,
    2429,  1970,   631,    16,    17,  1041,   971,  3106,   973,  2756,
    2426,  2944,  2428,  2429,  4220,   478,  1052,   646,  2951,  2952,
    2807,  4124,  1970,   290,  2975,  3038,  4232,  3455,  3787,  3038,
    2450,  2964,  2965,  2966,   253,   366,  2005,  2970,  2971,   381,
    2149,   374,   384,    72,   107,   381,   631,   653,   384,   645,
      20,  2437,  4258,    16,    17,  2791,   222,  2005,   631,   199,
      16,    17,   647,  3255,   196,   546,  2355,  1103,  1104,  1105,
    1106,  1107,  1586,  3006,   647,   192,   127,   423,  1961,   631,
     231,  3038,  3608,   145,   256,  3611,    12,  2605,   653,   631,
     571,  1974,  1223,  2611,  1977,  1978,  2273,  1041,  3038,   109,
    4021,   381,    16,    17,   384,   647,   631,    16,    17,   199,
    1146,   526,    72,  3585,   231,  3641,  3642,  3643,   272,    16,
      17,   396,   647,  3649,  1160,   381,  2868,  1783,   384,  1260,
     556,  3657,   370,   104,  4346,   381,   550,   423,   384,   290,
     520,   631,   145,    16,    17,   705,  2351,   472,  2279,  2280,
    2886,  2063,  2373,    16,    17,   215,   536,   647,   113,  1103,
     427,    82,   546,  1107,   132,   135,   550,  2107,  2107,   444,
     132,  3288,  3289,  1882,   235,  1211,  1307,   556,  3606,  3607,
     381,   631,   645,   384,     0,  3613,   450,  1223,  3616,  3617,
     395,   381,  2272,  1788,   384,   160,   807,   647,   259,   282,
     487,    25,  2282,   487,  1798,  3633,  4035,  4036,   427,   169,
     164,   381,   645,  2476,   384,   631,   171,   777,   144,  3647,
     653,  1800,    16,    17,  1260,  3653,  3654,  3655,  3656,  1265,
    1361,   647,   273,  2454,  4499,   381,   287,  2454,   384,   556,
     194,  2771,  2028,  1279,   199,    16,    17,   381,   628,   381,
     384,  1845,   384,   599,   381,   670,   645,   384,   220,    59,
      59,  1856,    16,    17,  3573,   309,   645,   362,   239,  1925,
    1306,  1307,   423,    52,   414,  1869,  1870,   339,   127,   381,
      16,    17,   384,   128,  3282,   256,   458,   240,  1324,   631,
     495,   902,  1809,   182,   627,   631,   249,   268,    16,    17,
    1336,   647,  1338,   620,   646,  1341,   227,   638,   229,   381,
     409,   647,   384,   599,   527,   366,   381,  1353,    33,   384,
     157,  4131,   290,   164,   414,  1361,   238,  2113,   290,  4250,
    4251,   168,  1297,  3444,  1370,  1371,   339,   258,  2124,  2583,
    4078,   382,  2605,    16,    17,    16,    17,   442,  2611,  3590,
    3711,   631,   362,  3695,   383,    16,    17,  2914,  2915,  1395,
     627,   527,  1398,    16,    17,   287,   653,   647,   381,   653,
    1406,   384,   647,  1409,  4133,   631,  4135,  1342,   349,   179,
     179,   164,  1418,   183,   183,   631,  2904,   651,    16,    17,
     556,   647,  1428,  1429,   194,   194,   609,  1341,    16,    17,
    1531,   647,   247,  1439,  1440,  1441,  1442,  1443,  1444,   647,
     550,   471,  1377,  1449,   238,  4336,    16,    17,   381,  1455,
    1456,   384,  1458,   383,  3896,   381,  1462,  1371,   384,    42,
     631,  1439,  1440,  1441,   387,  1443,    16,    17,   287,    19,
    2856,   631,  3978,  3979,   366,   646,  2602,  1483,  1456,    16,
      17,   363,  4664,  3570,  1462,  2875,  2876,   647,   371,   414,
     550,   631,  2414,    16,    17,  1025,   620,   381,   215,  1434,
     384,    53,   381,    16,    17,   384,   365,   647,   196,  3983,
     478,  4365,    64,   600,   381,   631,   399,   384,   498,    16,
      17,   196,   463,   317,  2807,  1531,  1461,   631,  1442,   631,
    1444,   647,    16,    17,   631,    19,  3867,   349,   381,  3870,
    1546,   384,   259,   647,  3876,  1551,  1552,   366,   381,   646,
    3038,   384,    16,    17,   137,   325,   325,  1563,   579,   631,
     372,    16,    17,   487,   249,  4279,  2807,   441,  3948,  1483,
    2649,   246,  2884,   380,   556,   647,  1582,   588,  1584,  1585,
     162,  1587,  1588,    16,    17,    16,    17,   272,  3900,   631,
      12,   532,  2739,  1599,    12,  1601,   631,   127,   210,    16,
      17,  2792,  1537,    12,   646,  2792,  1584,  1585,   640,   641,
     642,   643,   647,   362,   429,  4414,  4415,   381,   240,   284,
     384,   210,   249,   478,   414,   550,   196,   249,  3709,    16,
      17,   171,  1546,   478,    16,    17,    16,    17,  1552,   478,
     381,   187,   269,   384,   256,   519,  2568,   572,   631,   531,
    2276,   478,   196,   423,   423,   127,   238,   381,   130,   189,
     384,   478,   131,   645,   647,   638,   639,   640,   641,   642,
     643,    16,    17,   556,   478,   381,   478,   645,   384,   344,
      17,   649,   645,  1689,  1690,  3947,   577,    16,    17,   614,
     653,    16,    17,   381,  2173,  3195,   384,   653,   631,  2178,
    1801,    16,    17,  4035,  4036,   631,  2920,   382,   457,   650,
     601,   230,  2191,   127,   647,   574,   262,   189,   533,   478,
    2476,   647,   144,   646,    16,    17,   144,   279,   518,   273,
     577,   590,  2946,  2947,   616,   144,    40,   486,   381,   210,
     381,   384,  1748,   384,    48,  2224,   218,   631,   555,   639,
     381,   436,   631,   384,   601,  3282,   646,   287,   381,  2950,
     579,   384,   646,  2950,   631,   387,   605,   606,   647,   550,
     382,  3674,    16,    17,   546,   189,    16,    17,   550,   646,
    3492,   363,   572,   381,  1790,  1791,   384,   494,   631,   601,
     645,   553,  1798,   381,  1800,  1801,   384,  1898,   631,   235,
     645,    16,    17,   646,   218,  3038,   645,  1813,  4522,  4523,
    2289,   381,  1818,   646,   384,   287,   362,  1823,   645,  2383,
    1826,    16,    17,   639,   614,   597,  1832,  1833,   645,  1835,
     646,   381,   359,   360,   384,  3362,   366,    16,    17,  1845,
      82,   645,  1848,   645,   381,  2420,  1852,   384,   210,  2605,
     608,    17,   235,   611,  4189,  2611,  4188,  4189,   381,  3248,
     235,   384,   527,  1869,  1870,  1871,  1872,   631,   381,    16,
      17,   384,   215,   287,  1809,   127,  1882,  1791,   647,  1885,
    1886,  1887,   646,   230,   381,   592,   645,   384,    16,    17,
     631,  3767,  1898,   139,   366,    16,    17,   381,   376,    19,
     384,   196,    16,    17,  2804,   646,   227,   631,   229,  1915,
     646,   647,  2851,    16,    17,  3791,   259,   381,  1832,  1833,
     384,  1835,   646,    16,    17,   631,   381,   634,   606,   384,
    1936,    48,  1867,  2851,  1848,    60,    61,   189,  1852,  4350,
     646,   246,  4353,   631,  3256,   113,   601,    72,   381,   531,
     381,   384,   366,   384,   646,   647,   274,  1871,  1872,   277,
    2882,    16,    17,   497,   381,  4297,   218,   384,   486,   989,
    1976,  1885,  1886,  1887,    17,   995,   996,    16,    17,   145,
    4312,  3082,   497,   127,   104,   227,  1992,   229,   631,  4340,
     631,  4342,   647,  1999,   381,  4327,  1931,   384,   653,   381,
     631,   381,   384,   646,   384,   646,   623,   624,   631,  2862,
    3111,  3112,   646,   647,   290,   646,   258,    16,    17,   147,
     646,  2122,    64,   646,  3927,  3928,  3929,  2128,  3219,   653,
     647,  3132,    80,   631,   616,   287,   381,   651,    80,   384,
     160,  3576,  3577,   631,   164,   189,   646,   647,   646,   579,
      92,   378,   381,   221,   595,   384,   381,  2063,   646,   384,
      12,   631,  1976,  2164,   550,   647,   381,  4402,   518,   384,
    4402,   645,   192,   567,   194,  2176,  3267,  1833,  2013,  1835,
    3267,   631,  4414,  4415,   193,  1999,   450,  2022,  2023,   381,
     210,   645,   384,  4504,   631,     6,   216,    11,  2033,  2034,
    2035,  2036,   145,  2038,  2039,   647,   424,   579,   631,   646,
     645,   231,   208,   645,   366,   556,  2122,    25,   631,   239,
    1035,  1036,  2128,   646,  2130,   645,   246,  2133,  2807,  1885,
    1886,  1887,   653,   646,   631,  2141,   256,   381,  2144,   645,
     384,   381,   559,   287,   384,   193,   645,   631,   268,   646,
    4482,   193,   645,   273,   645,  2133,   198,   645,  2164,   158,
    4492,   176,   282,  1078,  2265,   579,   381,   631,   645,   384,
    2176,   478,   559,   339,    82,   645,   631,   645,  3304,   486,
    2745,   466,   646,   646,   647,   645,   381,   235,   645,   384,
     145,   646,   144,   235,  2295,   531,   295,   296,   631,   645,
     631,  4536,   381,  4538,  4536,   384,  4538,   145,   646,   647,
     645,   259,   311,   646,   631,   646,  4548,   259,   314,   315,
     388,   645,   366,   319,   320,  2789,   646,   647,   466,   349,
    4103,   399,   646,    12,   381,   645,  4571,   384,   406,  4571,
     645,  4573,   645,  4575,   631,   645,  2810,  2811,  2812,   631,
    4582,   631,   372,   381,   162,  2734,   384,   646,   647,  2265,
     381,  4593,   382,   384,   646,   413,   646,   381,   220,   645,
     384,   645,   180,  4608,  4609,   645,  4608,  4609,   381,   125,
     645,   384,  3038,   546,  2290,  3386,   631,   645,   381,  2295,
    3212,   384,  4624,  4625,   414,   645,   339,  4629,   605,   606,
    3699,   646,   631,   601,   646,   647,   631,   646,   647,   547,
     645,  2317,  3251,  3699,   645,   553,   631,   646,   372,   127,
       6,   646,   130,   489,   490,   645,   381,   579,  3519,   384,
     238,   646,  3519,  3251,   502,    16,    17,   645,   645,   631,
     439,   440,   381,   463,  2350,   384,   607,   608,   396,   610,
    2356,   612,  3431,  2928,   646,   646,   647,   239,    82,   597,
     646,   647,  2463,  2464,   412,   144,   486,  2373,   646,   647,
     412,  2377,    58,   645,   256,   645,   614,  2383,   646,   647,
     226,   189,   381,   645,   339,   384,   268,   631,   646,   647,
    2396,   631,  2398,    80,   646,    11,   646,   647,    32,   372,
      35,   339,   646,  4428,  3595,   379,   646,  4427,  3595,   317,
     218,   645,   532,   645,  2420,   645,   631,   645,    82,  4131,
    2426,   645,  2428,  2429,  2908,   645,    61,   645,  2922,   597,
    4333,   646,  2916,  3960,  3961,   579,   631,   645,   162,   645,
    2934,   220,  2936,  2937,  4083,  4084,   489,   490,  2454,   357,
      84,   646,   631,   645,  2948,   363,   645,  2463,  2464,    12,
    3472,  2396,   148,  1325,   645,   507,  1328,   646,   588,  1331,
     636,   637,   638,   639,   640,   641,   642,   643,   645,   287,
     600,   601,   117,   329,   631,   120,   645,   333,   646,   647,
      43,   646,   647,   128,   340,    60,    61,   113,   647,   646,
     620,   231,   622,   631,   646,   647,   193,   646,   647,   645,
     631,   146,    16,    17,   238,   131,   645,   631,  3801,   645,
    4102,    50,   646,   647,   158,   646,   646,   647,   631,   645,
     650,   651,   646,   645,   489,   490,   646,   647,   631,  1117,
    1118,  1119,  2548,   646,    97,   646,   647,   589,   235,   102,
     645,   489,   490,   646,   645,   171,  1134,  2563,   366,   645,
     512,   513,   514,   515,   516,   517,  3849,   646,   647,  2009,
    2010,  2577,   259,   645,   238,   421,   631,   646,   647,    33,
     532,   463,   645,   199,   645,  4224,  2026,  1165,   645,  4228,
    1168,   646,   631,   636,   637,   638,   639,   640,   641,   642,
     643,   646,   647,  2043,  2044,   646,   647,   646,   646,   647,
    1188,  1189,   247,   645,  1192,   645,   127,   121,   122,   123,
     124,   125,   645,   531,   646,   647,  2632,  2633,   646,   647,
     476,   645,   631,   357,  1212,  1213,  2642,  2643,  2644,   363,
     645,  3120,   646,   647,   646,   647,  2581,  2582,    64,  2584,
     532,  2586,  2587,  2588,  2589,  2590,  2591,  2592,   646,   647,
    2595,  3225,   645,  2598,    80,   645,  2601,   283,  2108,  2109,
    2110,  2111,  3247,  3455,   360,   645,    92,   645,   189,   646,
     647,  3160,   637,   638,   639,   640,   641,   642,   643,   646,
     647,   145,   645,   357,   504,   646,   647,   127,   251,   363,
     638,   639,   640,   641,   642,   643,   645,   218,   616,   433,
     646,   647,   645,    37,   645,  4588,   351,   645,  2632,   223,
     224,   225,   226,   127,   646,   412,   646,   647,  2642,  2643,
    2644,   646,   647,   512,   513,   284,   515,    50,   517,   647,
     426,   647,   428,   646,   647,   646,   647,  4386,  4387,   372,
    2756,   372,  2758,   532,   472,  2761,  2762,  2763,  2764,   189,
     588,  3936,   646,   647,  2770,   646,   647,   640,   113,   433,
     486,   579,   618,   326,   653,   409,   287,   193,   646,   647,
     646,   647,   198,  2789,   653,   189,  2792,   633,   218,   646,
     647,   497,  4665,   646,   647,   249,   120,   431,   414,   646,
     647,  2807,   170,   127,  2810,  2811,  2812,   531,   646,   647,
     154,   155,   646,   647,   218,   645,  3310,  2823,   272,   235,
    3284,  3285,   273,   227,   194,   329,   527,   331,   332,   333,
     464,  3613,  3738,  3739,  3616,  3617,   340,   390,  2939,   546,
    3966,   127,   504,   259,   130,  1196,  1197,  3412,  3231,  3232,
    2856,  3633,    37,   198,   145,   366,  2770,   287,   182,   494,
     584,  3697,  3698,  3188,  3189,   189,  3441,   531,   484,   527,
    2972,  3501,  3502,   284,   161,   194,    91,   381,   647,   127,
     384,   647,   130,   287,   373,   339,   542,   646,  2823,   523,
     235,   160,   616,   130,   218,   219,   116,   293,  3000,   295,
     296,  2907,   518,   189,   652,   359,   360,  2919,     6,   645,
    4101,  2917,  2918,  2925,  4101,   311,   115,   421,  2924,     4,
     584,   477,   614,   647,   127,   647,   249,   130,   563,   145,
     396,   547,   218,  2939,  2940,   120,   366,  2949,   283,  2945,
    3862,   189,   127,  2955,  2950,    57,   442,   176,   116,  2961,
    2962,   228,   616,   506,  2960,   653,   647,   592,   249,   647,
      12,  3797,   366,   287,    61,   127,  2972,    72,   619,   646,
     218,   475,   476,  2979,  2980,   646,     9,   144,  4104,  2985,
     396,   647,   436,   653,   653,  2991,   189,  3999,   645,  2995,
     543,  2926,  2927,  4005,  3000,   372,   412,   182,   614,   510,
     646,   287,   646,   646,   189,   272,   653,   162,   647,   284,
     652,   284,    85,  2991,    87,   218,   284,   647,   284,  2954,
     117,    50,    56,   120,   284,   284,   350,   189,  1606,   647,
    3036,   128,    66,   218,   219,   489,   490,   361,  4164,   287,
     164,   365,   366,   439,   440,  3051,  2960,    81,   339,   146,
    2985,   505,  3058,   546,   645,   279,   218,   130,   647,    93,
      94,    95,   145,  2503,   397,   647,  2506,  2507,   579,  2509,
     127,  3077,  2512,  2513,   647,   567,  2516,   111,   396,   152,
     366,  2521,   567,   647,   287,   164,  2526,  2527,  2528,  2529,
    2530,   507,   647,   190,  2534,  2535,   647,  2537,    72,   647,
     527,   249,   287,  2543,  2544,  2545,  2546,   640,  3043,  2549,
    2550,   250,  2552,  1691,   618,   188,   544,  1695,   366,   184,
     194,   647,   170,   339,   527,   287,  4252,   631,   632,   633,
     501,   401,   189,  3234,  3970,  3971,   140,  3973,  3974,   484,
    1718,   372,   647,   400,  3058,   646,   595,   647,  3154,   579,
     247,   626,   600,   199,  4345,   196,  3162,   647,  4345,   646,
     646,   218,   507,   366,   646,   350,   249,   113,   646,  2609,
     646,   640,   646,   589,   646,   579,   164,   165,  4078,   646,
     365,   366,   636,   637,   638,   639,   640,   641,   642,   643,
     196,   647,  3294,   639,   646,  3201,  3761,   647,   489,   490,
    3775,   645,   547,   104,   366,   550,  3307,   646,   553,   646,
     646,   646,   200,  3219,  3220,   647,   588,  3223,   643,  3225,
     646,    82,    12,    13,   212,   171,  3328,  3162,  3234,   646,
     287,    82,   556,   646,  3240,    96,   560,  3339,   487,   563,
    3342,  3247,  3248,   645,   589,    96,   645,   645,   556,   646,
     574,   348,   597,   199,   351,   579,   339,   647,   582,   556,
     556,  3267,   567,   620,   252,   237,  3278,  4442,   647,  4281,
     645,  3879,   645,   489,   490,   538,   264,   138,  3284,  3285,
     645,    12,   208,   196,   653,   645,   645,    19,  3294,   235,
     270,  3297,   647,   579,   328,  4297,   647,  4219,   196,   653,
     653,  3307,   174,   291,   653,  3311,   646,  3313,  3314,   366,
    4312,   345,   422,   103,   638,   639,  4238,   390,  3253,   647,
     467,  3327,  3328,   486,   194,  4327,   647,   647,   593,    48,
     347,   579,   429,  3339,   518,   518,  3342,   283,   239,   518,
     518,   518,   477,  3444,   134,   636,   637,   638,   639,   640,
     641,   642,   643,   445,  3942,   256,   194,   645,   148,   164,
    3366,   434,   164,  3369,   164,   353,   164,   268,  3374,   164,
     164,   556,   104,  3308,   283,   560,   579,  4552,   563,   164,
      19,   171,  3317,   164,   164,   175,   164,    26,   104,   574,
     164,   164,   164,   164,   579,  3401,   186,   582,   164,   164,
     261,   164,   164,   164,   164,   164,   489,   490,   647,   645,
     261,   372,   601,   372,   372,   653,  3422,   579,   208,   646,
     636,   637,   638,   639,   640,   641,   642,   643,   160,   158,
     245,    26,   164,    72,   646,  3536,   245,   646,  3444,   653,
     474,  4453,  4454,    82,  4456,   235,   646,  4638,   349,   646,
     104,  4638,   242,   638,   639,  3369,  3391,   647,   646,   646,
    4651,   164,   194,   409,  4651,  4656,   563,   647,   414,  4656,
    4661,   372,   646,   567,  4661,   556,   337,    72,   210,   567,
    4482,   653,   653,  3418,   216,   567,   337,    82,   647,  2929,
    4492,   130,   282,   627,    88,   592,   279,    48,   359,   360,
     534,   362,  2942,  4515,   645,  4517,  4518,   239,   645,  3515,
     379,   362,   567,  3519,   246,   645,   164,   196,   552,   196,
      12,    13,   579,   239,   256,   196,   246,   196,   556,   556,
    3536,  4119,   253,   427,   647,   130,   268,   174,   484,   366,
     256,   273,   256,   256,   385,   116,  4548,  4204,   330,   116,
     282,    80,   268,   636,   637,   638,   639,   640,   641,   642,
     643,   396,   463,   202,   425,   396,   396,   567,   140,   257,
     547,  4573,   257,  4575,   425,   535,   396,  3583,   547,   140,
    4582,  3587,   396,    48,   396,   239,   396,   398,   227,  3595,
     229,  4593,  4604,  3599,   567,  3601,   645,   396,   645,   396,
     645,   547,   256,  4168,  4620,    82,   210,   553,  3709,   378,
     460,   103,   556,    90,   268,   645,   653,   349,   640,   396,
     259,   645,  4624,  4625,   645,   415,   572,  4629,   247,   419,
     247,   532,   227,   349,   229,   646,   646,   646,   646,   116,
     372,  4206,   134,   646,   646,   435,   653,   646,   646,   640,
     382,   597,   622,   443,   372,   645,   148,   518,   231,    56,
    3666,   451,   646,  3669,   259,   647,   274,   518,   614,    66,
     396,   646,   653,   196,   594,   646,  3777,   427,   646,   171,
     647,  3687,   414,   175,    81,   162,   249,   256,   478,   646,
    3696,  3697,  3698,  3699,   186,   349,    93,    94,    95,   647,
     164,   491,   492,  3709,   256,   647,   259,   372,   653,   259,
     410,   372,    82,    19,   111,   646,   208,   647,   372,   372,
     359,   360,   645,   372,   646,   685,   365,   646,   504,   647,
     690,   463,   164,   372,   645,   382,   646,  4659,    48,  3825,
    3826,  3676,   480,   235,   646,   622,  3847,   463,   208,   427,
     242,   541,  3838,   151,   486,   187,   266,  3763,   235,  3845,
     646,   478,   647,   210,   359,   360,   726,   256,   200,   256,
     365,  3777,  4347,   412,   647,   259,   488,   372,   645,   259,
     212,  3787,   572,   743,   647,  3871,  3872,   647,   622,   645,
     282,  3797,   646,    86,   496,   147,  3802,   234,  3810,   646,
     532,   473,  3808,   504,   594,   647,   596,   646,    19,   463,
    3816,   273,    35,   646,   646,    35,   532,   412,   646,   645,
     645,   645,   366,   646,   646,   785,   786,   787,   788,    61,
     262,   247,   264,   646,   336,   261,   422,   797,   646,   316,
     646,  3847,  4499,   482,   282,   646,   379,  3948,    48,   645,
     246,   216,   622,   645,   647,   646,   588,   334,   336,   291,
     647,   601,   601,   130,   653,   130,   645,  3873,   550,   601,
     645,   408,    35,   366,   178,   336,    17,   645,   532,   646,
     357,   556,   556,   556,   259,  3891,  3892,   482,   620,   653,
     622,   647,   647,   550,  3808,   605,   601,   601,   645,   645,
     645,   645,   313,   121,   122,   123,   124,   125,    14,   646,
     645,    13,   611,  3848,   646,   647,   611,   645,   650,   651,
     880,  4509,   130,   415,   356,   259,   594,   419,    19,  3935,
     259,   328,   365,   522,   460,   622,   645,   174,   646,   467,
     647,    35,  3948,   435,   141,   379,   537,  4512,   345,   594,
     589,   443,   645,   645,   246,   372,  4613,   361,   159,   451,
     606,   645,   645,   619,  3970,  3971,    32,  3973,  3974,   194,
     646,   366,   174,   654,    68,    62,   646,   558,  3892,   411,
     140,   140,   645,  4640,   162,   414,   478,   194,    74,   619,
     645,   196,    32,    64,   589,   379,    64,   647,   538,   491,
     492,   103,   646,   393,   646,   223,   224,   225,   226,   645,
     435,   275,   646,   646,   158,  4021,   246,   379,   379,   651,
     138,  3935,   147,   645,    48,  4590,  4032,    48,   157,    48,
      48,  4037,   134,    48,   645,   645,     5,   372,   158,   372,
     619,   230,   289,   137,   651,   654,   148,   129,   153,   541,
      11,   282,   645,    48,   531,    48,    48,   134,   594,   651,
    4066,  4067,   459,    54,   469,   467,   259,   647,   162,   171,
     547,   646,   166,   175,  4080,   158,   646,   474,   559,   647,
     572,   213,   647,   228,   186,   651,  4021,   646,   646,    54,
     647,   449,    48,   194,   194,  4101,   194,  4662,  1058,   621,
     559,  4107,   594,   130,   596,   231,   208,   201,   366,   486,
     645,   329,  4042,   331,   332,   333,   195,   647,  2302,  2600,
    3674,   973,   340,  3405,  2492,   668,  3685,  4133,   222,  4135,
    4072,  4207,  4422,   235,  4423,  1032,  3683,   534,  3687,  4640,
     242,  3890,   236,  4601,    48,  1823,   592,  1881,  4154,  2756,
    3876,  3876,  4253,  1113,  1114,   552,  3876,  3876,  3876,  3876,
    4610,  3876,  1122,  1123,  1124,  1125,  1126,  1127,  1128,  1129,
    1130,  1131,  1132,  1133,  3876,  4181,  3876,  3876,  4479,  4290,
     282,  1141,  1142,  4479,  1144,  1145,  3876,  4415,  3876,  1149,
     284,  3876,  1152,  1153,  1154,  1155,  4316,  1157,  1158,  1159,
    4315,  1076,  1540,   421,  1792,  4076,  1166,  1167,  3899,  1169,
    1170,  1171,  1172,  1173,  2562,   309,  1176,  1177,  1178,  1179,
    1180,  1181,  1182,  1183,  1184,  1185,  3337,  1187,  2784,  2056,
    1190,  1191,  3201,  2356,  4242,  1195,  1358,  3517,  4552,  1199,
    1200,  1201,  4107,  3936,  4450,  4509,  1577,  4253,   530,  3692,
    2979,  3044,  4119,  4259,  1214,  1215,  2555,   475,   476,  3422,
    2563,  2982,  1222,  3802,  4365,  3809,  4527,  3103,  3624,  1229,
    1230,  1231,  3858,  1233,  4168,  3997,  3658,  4212,  4347,  3847,
    1240,  1241,  1242,  2463,  1244,  1245,  1246,  1247,  1248,  4270,
    1250,  1251,  1252,  1253,  1254,  1255,  1256,  1257,    11,    11,
    4387,  1261,  1262,  4386,  2137,  4215,  4228,  2640,  2562,  4224,
    4005,  4246,  4247,   415,  2975,  4080,  4322,  1499,  1045,   413,
    3814,  1001,  2440,  2063,  2368,  4322,  1573,  3582,   422,  1871,
    4336,  1552,  2343,   435,  2387,  3196,  2770,  2258,  3878,  4345,
     613,   443,  1892,   437,  3162,   923,  2172,  4448,  2168,   451,
    4166,  2745,  3258,  1160,  4138,  2455,  3963,  2449,  2257,  4365,
    4464,   455,  3401,  3595,  2283,  4465,    35,  1516,  2971,  2856,
    3788,  4590,  3777,  2392,  2141,  1341,   478,  1134,  1371,  2337,
    2372,  3519,  3214,  3213,   603,  1345,  3267,  4345,  1599,   491,
     492,   681,  1971,  1447,  1972,   591,   591,  2434,  1812,    68,
     618,  4336,   496,  3601,  3199,   499,  4550,  4372,  4656,  4585,
    4460,  4661,  3849,  1378,   632,   633,  3219,  1406,  3247,  2417,
     590,  4356,  4357,  1745,  3248,   590,  2410,  1918,  2409,  1852,
     584,  2403,  1396,   527,   905,  3925,  1582,  1333,  3931,   541,
     910,  2758,  4448,   585,   668,   526,  1406,   668,   526,    -1,
      -1,   668,    -1,    -1,    -1,   549,  1416,    -1,  4464,  4465,
       6,    -1,    -1,    -1,    -1,    11,    -1,    13,   137,    15,
     572,  1431,    -1,    -1,    -1,  1435,    -1,    -1,  4484,    -1,
      26,    -1,    28,    -1,    -1,  4491,    -1,    -1,    -1,    -1,
      -1,    -1,   594,   162,   596,    -1,    -1,   166,    -1,    -1,
      -1,    -1,    -1,    -1,   598,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    58,    -1,    -1,    -1,    -1,    63,    64,    -1,
      -1,    -1,    -1,    -1,    70,    -1,    -1,    -1,    -1,    -1,
    1490,    -1,   201,    -1,    -1,    -1,    82,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    90,    -1,  4647,    -1,    -1,    -1,
      -1,    -1,    -1,   222,   100,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  4572,   236,    -1,    -1,
     116,  4577,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   130,    -1,    -1,   133,    -1,  4524,
      -1,    -1,    -1,    -1,    -1,   141,   142,    -1,    -1,    -1,
      -1,    -1,   148,    -1,    -1,    -1,    -1,  4613,    -1,    -1,
     156,    -1,    -1,    -1,   160,   284,   162,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   173,    -1,    -1,
     232,    -1,  4638,    -1,  4640,    -1,    -1,    -1,    -1,    -1,
     309,  4647,    -1,    -1,    -1,  4651,   192,    -1,    -1,    -1,
    4656,    -1,  1612,    -1,    -1,  4661,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4110,  4111,    -1,    -1,  4114,  4115,  4116,  4117,    -1,    -1,
      -1,   227,    -1,   229,    -1,    -1,    -1,   233,    -1,   235,
     292,    -1,   294,   295,   296,   297,   298,   243,   300,   301,
     302,   303,   304,   305,   306,   307,   308,    -1,   310,   311,
     312,    -1,   258,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   282,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   413,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   422,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1724,  1725,  1726,    -1,   437,    -1,
     316,    -1,    -1,  4213,    -1,    -1,    -1,    -1,  1738,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   455,    -1,   334,    -1,
      -1,    -1,   338,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1764,    26,    -1,    28,  4248,  4249,
    1770,    -1,    -1,  1773,    -1,  1775,    -1,  4257,    -1,    -1,
      -1,  1781,    -1,  1783,  1784,    -1,    -1,   496,    -1,    -1,
     499,   377,    -1,    -1,    -1,    -1,   382,   439,   440,    60,
      61,    -1,    63,   389,    -1,   391,    -1,    -1,    -1,    -1,
     396,    72,    -1,   399,    -1,    -1,    -1,    -1,   527,    -1,
      -1,    82,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    90,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   546,    -1,    -1,
     549,   550,    -1,    -1,   430,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   116,    -1,    -1,   444,   445,
     446,   447,    -1,    -1,    -1,    -1,  1866,    -1,    -1,   130,
      -1,    -1,   133,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   468,    -1,    -1,    -1,    -1,    -1,    -1,   598,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   162,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1916,    -1,    -1,    -1,
     690,    -1,    -1,    -1,    -1,  1925,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   524,   525,
     526,    -1,    -1,    -1,    -1,   531,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   726,    -1,    -1,    -1,
      -1,   547,    -1,    -1,    -1,   551,   227,    -1,   229,    -1,
      -1,    -1,    -1,   743,   235,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   243,    -1,   570,    -1,    -1,    -1,    -1,   575,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   258,    -1,    -1,
      -1,    -1,   588,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   788,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   316,  2056,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   651,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   334,    -1,    -1,    -1,    -1,  2078,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     880,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   389,    -1,
     391,    -1,    -1,    -1,    -1,    -1,  2136,    -1,   399,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2150,    -1,    -1,    -1,  2154,    -1,    -1,    -1,    -1,  2159,
    2160,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2168,    -1,
    2170,    -1,  2172,  2173,  2174,  2175,    -1,    -1,  2178,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2188,    -1,
    2190,  2191,    -1,  2193,  2194,  2195,  2196,    -1,  2198,    -1,
      -1,  2201,    -1,    -1,    -1,    -1,    -1,   468,    -1,    -1,
    2210,    -1,    -1,    -1,    -1,    -1,    -1,  2217,    -1,  2219,
      -1,  2221,  2222,  2223,  2224,    -1,    -1,    -1,  2228,  2229,
    2230,    -1,    -1,    -1,  2234,  2235,  2236,    -1,  2238,    -1,
    2240,    -1,  2242,    -1,  2244,    -1,  2246,    -1,    -1,    -1,
      -1,  2251,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   524,   525,   526,  2266,    -1,    -1,    -1,
     531,    -1,    -1,  2273,    -1,    -1,  2276,    -1,    -1,    -1,
      -1,    -1,  2282,    -1,    -1,  2285,   547,    -1,  1058,  2289,
     551,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   570,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   588,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1113,  1114,    -1,    -1,    -1,    -1,    -1,
      -1,  2351,  1122,  1123,    -1,    -1,  1126,  1127,  1128,  1129,
    1130,  1131,  1132,  1133,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1141,  1142,    -1,  1144,  1145,    -1,    -1,    -1,    -1,
      -1,    -1,  1152,  1153,  1154,  1155,   647,    -1,  1158,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1166,  1167,    -1,  1169,
    1170,    -1,    -1,    13,    -1,    15,  1176,  1177,  1178,    -1,
      -1,  1181,  1182,  1183,  1184,  1185,    -1,  1187,  2418,    -1,
    1190,  1191,    32,    -1,    -1,  1195,    36,    -1,    -1,  1199,
    1200,  1201,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      50,    51,    -1,    -1,  1214,  1215,    -1,    -1,    58,    -1,
      -1,    -1,  1222,    63,    64,    -1,    -1,    -1,    -1,  1229,
    1230,  1231,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    84,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1262,   103,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   134,   135,   136,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   147,   148,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     160,    -1,    -1,    -1,    -1,  2555,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   175,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1345,    -1,    -1,    -1,    -1,
      -1,   191,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   206,    -1,   208,    -1,
      -1,    -1,    -1,   213,    -1,    -1,    12,   217,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    24,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    35,
      36,    -1,   242,    -1,   244,    -1,  1406,    -1,  2638,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1416,    -1,    -1,    -1,
     260,    -1,    -1,  2653,    60,    61,    -1,  2657,    -1,    -1,
      -1,  1431,    68,    -1,    -1,  1435,    -1,    73,   278,    -1,
      -1,    -1,   282,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2684,  2685,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    99,    -1,   101,    -1,   103,    -1,    -1,
      -1,    -1,    -1,    -1,  2704,    -1,    -1,    -1,   114,    -1,
      -1,    -1,    -1,  2713,    -1,  2715,    -1,  2717,    -1,    -1,
    1490,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   135,
     136,    -1,    -1,    -1,  2734,    -1,    -1,    -1,    -1,  2739,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   161,   162,    -1,    -1,    -1,
      -1,   167,    -1,    26,   170,    28,  2766,   377,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   394,    -1,   396,    -1,    -1,    -1,
      -1,   197,    -1,   199,    -1,    -1,    -1,    60,    61,   409,
      63,   207,    -1,   209,    -1,    -1,    -1,    -1,    -1,    72,
     420,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    82,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    90,   234,   235,
     236,    -1,   442,    -1,    -1,   445,    -1,   447,  2838,    -1,
     450,    -1,  1612,   453,   454,    -1,    -1,    -1,    -1,    -1,
      -1,   257,   462,   116,   464,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   472,    -1,    -1,    -1,    -1,   130,   478,    -1,
     133,    -1,    -1,   279,    -1,    -1,   486,    -1,    -1,    -1,
      -1,   491,   492,   493,    -1,    -1,    -1,    -1,    -1,  2889,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   162,
      -1,    -1,    -1,   309,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   523,    -1,    -1,    -1,    -1,    -1,    -1,
     530,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1724,  1725,  1726,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   227,   575,   229,    -1,    -1,    -1,
     376,    -1,   235,    -1,    -1,  2975,    -1,   587,    -1,    -1,
     243,   591,    -1,    -1,   594,    -1,    -1,    -1,  2988,  2989,
     600,    -1,    -1,    -1,  1764,   258,   402,    -1,    -1,    -1,
      -1,    -1,    -1,  1773,    -1,  1775,    -1,   413,   414,   272,
      -1,   417,   418,    -1,    -1,    -1,    -1,    -1,    -1,   629,
      -1,    -1,    -1,    -1,    -1,   635,    -1,    -1,    -1,    -1,
      -1,    -1,   438,    -1,    -1,   645,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   316,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3067,    -1,    -1,
      -1,   334,    -1,    -1,    -1,    -1,    -1,   483,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3085,    -1,    -1,    -1,    -1,
     496,    -1,    -1,    -1,    -1,    -1,  1866,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3117,  3118,    -1,
    3120,   527,    -1,    -1,    -1,   531,   389,    -1,   391,  3129,
      -1,    -1,    -1,    -1,  3134,    -1,   399,  3137,    -1,  3139,
    3140,    -1,    -1,   549,   550,    -1,  1916,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3160,    -1,    -1,    -1,    13,    -1,    15,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,    -1,
    3190,    -1,   598,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    50,    51,   609,    -1,   468,    -1,    -1,    -1,    58,
      -1,   617,    -1,  3213,    63,    64,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    84,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   103,    -1,    -1,    -1,    -1,    -1,
      -1,   524,   525,   526,    -1,    -1,    -1,    -1,   531,  3269,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   126,    -1,    -1,
      -1,    -1,    -1,    -1,   547,   134,   135,   136,   551,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   147,   148,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   570,  2078,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   588,   175,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   191,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   206,    -1,   208,
      -1,    -1,    -1,    -1,   213,    -1,    -1,    -1,   217,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2150,    -1,   645,    -1,  2154,    -1,    -1,    -1,    -1,  2159,
    2160,    -1,    -1,   242,    -1,   244,    -1,    -1,  2168,    -1,
    2170,    -1,  2172,    -1,  2174,  2175,    -1,    -1,    -1,    -1,
      -1,   260,    -1,    -1,    -1,    -1,    -1,    -1,  2188,    -1,
    2190,    -1,    -1,  2193,  2194,  2195,  2196,    -1,  2198,   278,
      -1,    -1,    -1,   282,    -1,    -1,    -1,    -1,    -1,    -1,
    2210,    -1,    -1,    -1,    -1,    -1,    -1,  2217,    -1,  2219,
      -1,  2221,  2222,  2223,    -1,    -1,    -1,    -1,  2228,  2229,
    2230,    -1,    -1,    -1,  2234,  2235,  2236,    -1,  2238,    -1,
    2240,    -1,  2242,    -1,  2244,    -1,  2246,    -1,    -1,    -1,
      -1,  2251,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2266,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2282,    -1,    -1,  2285,    -1,    -1,    -1,    -1,
    3520,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   377,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   394,    -1,   396,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3556,    -1,    -1,    -1,
     409,    -1,    -1,    -1,  3564,    -1,    -1,    -1,    -1,  3569,
      -1,   420,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   442,    -1,    -1,   445,    -1,   447,    -1,
      -1,   450,    -1,    -1,   453,   454,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   462,    -1,   464,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   472,    -1,    -1,    -1,    -1,    -1,   478,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   486,    -1,    -1,
      -1,    -1,   491,   492,   493,    -1,    -1,    -1,  2418,    34,
      35,  3651,    -1,    -1,    -1,    40,    -1,    42,    -1,    44,
      45,    -1,    -1,    -1,    -1,     6,    -1,    -1,    -1,    -1,
      11,    -1,    13,    -1,   523,    -1,    61,    -1,    -1,    -1,
      -1,   530,    -1,    -1,    -1,    26,    -1,    28,    -1,    -1,
      -1,    -1,  3692,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    -1,    -1,
      -1,    -1,    63,  3723,    -1,    -1,   575,  3727,    -1,    -1,
      -1,    -1,   117,    -1,    -1,   120,    -1,    -1,   587,    -1,
      -1,    82,   591,   128,    -1,   594,    -1,    -1,    -1,    90,
      -1,   600,    -1,    -1,    -1,    -1,    -1,    -1,  3758,   100,
      -1,   146,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3772,    -1,    -1,   116,    -1,    -1,   163,    -1,
     629,    -1,    -1,    -1,    -1,    -1,   635,    -1,    -1,   130,
      -1,    -1,   133,    -1,    -1,    -1,   645,    -1,    -1,    -1,
     141,    -1,    -1,   188,    -1,   190,    -1,   148,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   156,    -1,    -1,   203,   204,
      -1,   162,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   192,    -1,    -1,    -1,    -1,    -1,    -1,  3858,    -1,
      -1,    -1,   247,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3876,    -1,    -1,    -1,
      -1,    -1,    -1,  2653,    -1,    -1,   227,  2657,   229,    -1,
      -1,   276,    -1,    -1,   235,    -1,    -1,    -1,    -1,    -1,
     285,   286,   243,   288,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2684,  2685,    -1,   258,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2704,    -1,  3936,   322,   323,   324,
      -1,   282,    -1,  2713,    -1,  2715,  3946,  2717,    -1,    -1,
      -1,    -1,  3952,    -1,  3954,    -1,   341,   342,   343,    -1,
      -1,    -1,    -1,   348,    -1,    -1,   351,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   316,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   368,   369,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   334,    -1,    -1,  2766,   338,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   404,
     405,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4029,
      -1,    -1,    -1,    -1,    -1,  4035,  4036,    -1,    -1,    -1,
      -1,   382,    -1,    -1,   429,    -1,    -1,    -1,   389,    -1,
     391,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   399,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2838,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4079,
      -1,    -1,    -1,  4083,  4084,    -1,    -1,    -1,  4088,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   482,    -1,    -1,
      -1,   486,    -1,    -1,   445,    26,    -1,    28,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   500,    -1,    -1,    -1,  2889,
      -1,    -1,    -1,    -1,  4124,    -1,    -1,   468,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    60,
      61,    -1,    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    72,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    82,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    90,
      -1,    -1,   557,    -1,  4174,   560,  4176,    -1,   563,   564,
     565,   566,    -1,   524,   525,   526,  4186,    -1,  4188,  4189,
     531,    -1,    -1,    -1,    -1,   116,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   547,    -1,    -1,   130,
     551,    -1,   133,    -1,    -1,  4215,    -1,    -1,  2988,  2989,
      -1,    -1,   607,   608,  4224,    -1,    -1,    -1,  4228,   570,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   162,    -1,    -1,    -1,    -1,    -1,   588,   633,    -1,
      -1,    -1,    -1,    -1,    26,    -1,    28,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  4272,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    63,    -1,    -1,    -1,  4295,    -1,  4297,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   227,    -1,   229,    -1,
      82,    -1,  4312,  4313,   235,  3085,    -1,    -1,    90,    -1,
      -1,    -1,   243,    -1,    -1,    -1,    -1,  4327,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   258,    -1,  4339,
      -1,    -1,    -1,    -1,   116,    -1,  4346,  3117,  3118,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   130,  3129,
      -1,   133,    -1,    -1,  3134,    -1,    -1,  3137,    -1,  3139,
    3140,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4384,    -1,  4386,  4387,    -1,    -1,
     162,    -1,    -1,    -1,    -1,   316,    -1,    -1,    -1,    -1,
      -1,  4401,  4402,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   334,  4414,  4415,    -1,    -1,    -1,    -1,
    3190,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  4442,  3213,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   227,    -1,   229,    -1,    -1,
      -1,    -1,    -1,   235,    -1,    -1,    -1,    -1,   389,    -1,
     391,   243,    -1,    -1,    -1,    -1,    -1,    -1,   399,    -1,
      -1,    -1,  4482,    -1,    -1,    -1,   258,    -1,    -1,  4489,
      -1,    -1,  4492,    -1,    -1,    -1,    -1,    -1,    -1,  3269,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4529,
      -1,    -1,    -1,    -1,    -1,    -1,  4536,    -1,  4538,    -1,
      -1,    -1,    -1,    -1,   316,    -1,    -1,   468,  4548,    -1,
      -1,    -1,  4552,    -1,    -1,  4555,    -1,    -1,    -1,    -1,
      -1,    -1,   334,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4571,    -1,  4573,    -1,  4575,    -1,    -1,    -1,    -1,
      -1,    -1,  4582,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  4593,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   524,   525,   526,    -1,    -1,  4608,  4609,
     531,    -1,    -1,    -1,  4614,    -1,    -1,   389,    -1,   391,
      -1,    -1,    -1,    -1,  4624,  4625,   547,   399,    -1,  4629,
     551,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   570,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4664,    -1,    -1,   588,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   468,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3520,    -1,   524,   525,   526,    -1,    -1,    -1,    -1,   531,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   547,    -1,    -1,    -1,   551,
      -1,    -1,    -1,    -1,    -1,    -1,  3556,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3564,    -1,    -1,    -1,   570,  3569,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   588,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3723,    -1,    -1,    -1,  3727,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3758,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3772,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3946,    -1,    -1,    -1,
      -1,    -1,  3952,    -1,  3954,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4029,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4088,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4124,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4174,    -1,  4176,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  4186,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  4295,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  4313,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  4346,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4401,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4489,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4529,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     5,    -1,     7,
       8,     9,    10,    11,    -1,  4555,    14,    -1,    -1,    -1,
      18,    -1,    -1,    21,    -1,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    32,    -1,    -1,    35,    36,    37,
      38,    39,    40,    41,    -1,    43,    44,    45,    46,    47,
      -1,    49,    50,    -1,    -1,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    -1,    65,    66,    67,
      68,    69,    70,    71,  4614,    73,    74,    75,    76,    77,
      78,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    -1,    90,    91,    -1,    93,    94,    95,    96,    97,
      -1,    99,   100,   101,   102,    -1,    -1,   105,   106,   107,
     108,   109,    -1,   111,   112,   113,    -1,   115,   116,   117,
     118,   119,   120,    -1,  4664,    -1,    -1,   125,   126,   127,
      -1,    -1,   130,   131,    -1,   133,    -1,    -1,    -1,   137,
      -1,   139,   140,   141,   142,   143,    -1,    -1,    -1,   147,
      -1,    -1,   150,   151,   152,    -1,    -1,    -1,   156,    -1,
     158,   159,    -1,   161,   162,   163,    -1,    -1,   166,   167,
      -1,   169,   170,   171,   172,   173,   174,   175,   176,    -1,
     178,   179,   180,   181,   182,   183,   184,    -1,   186,   187,
     188,   189,    -1,   191,    -1,    -1,    -1,   195,    -1,   197,
      -1,   199,    -1,   201,   202,   203,   204,   205,    -1,   207,
      -1,   209,    -1,   211,    -1,   213,   214,   215,    -1,   217,
     218,   219,    -1,   221,   222,    -1,    -1,    -1,   226,   227,
     228,   229,   230,    -1,   232,   233,   234,    -1,   236,    -1,
     238,    -1,    -1,    -1,   242,   243,   244,   245,    -1,    -1,
     248,    -1,   250,   251,    -1,   253,   254,    -1,    -1,    -1,
     258,    -1,    -1,   261,   262,   263,    -1,   265,   266,    -1,
     268,   269,   270,    -1,    -1,    -1,    -1,    -1,   276,   277,
      -1,   279,    -1,   281,    -1,   283,   284,    -1,    -1,   287,
      -1,    -1,    -1,    -1,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
      -1,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,    -1,    -1,    -1,    -1,   325,   326,   327,
     328,   329,   330,    -1,    -1,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,    -1,   350,   351,   352,    -1,    -1,   355,   356,   357,
     358,   359,   360,   361,   362,   363,    -1,   365,   366,   367,
      -1,   369,   370,   371,    -1,   373,   374,   375,   376,    -1,
     378,   379,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     388,   389,   390,    -1,   392,   393,    -1,   395,    -1,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
      -1,   409,   410,   411,    -1,   413,    -1,   415,   416,   417,
     418,   419,    -1,   421,   422,   423,    -1,    -1,   426,    -1,
      -1,    -1,   430,   431,   432,   433,   434,    -1,    -1,   437,
     438,   439,   440,   441,    -1,   443,   444,    -1,   446,   447,
     448,   449,   450,   451,    -1,   453,    -1,   455,   456,    -1,
     458,   459,   460,    -1,    -1,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,    -1,   476,   477,
      -1,    -1,    -1,   481,   482,   483,   484,    -1,    -1,    -1,
     488,    -1,    -1,    -1,   492,    -1,   494,   495,   496,   497,
     498,   499,    -1,   501,   502,   503,   504,   505,   506,    -1,
      -1,    -1,    -1,    -1,    -1,   513,   514,    -1,   516,    -1,
      -1,   519,    -1,    -1,   522,   523,    -1,    -1,    -1,   527,
     528,   529,   530,   531,    -1,   533,   534,   535,   536,   537,
     538,   539,   540,   541,   542,   543,   544,   545,   546,   547,
      -1,   549,    -1,   551,   552,   553,   554,    -1,   556,   557,
     558,    -1,   560,   561,   562,   563,    -1,    -1,    -1,    -1,
     568,   569,   570,   571,    -1,   573,   574,   575,   576,   577,
     578,   579,   580,   581,   582,   583,   584,    -1,   586,   587,
      -1,    -1,   590,    -1,    -1,   593,    -1,   595,    -1,   597,
     598,   599,    -1,    -1,   602,   603,   604,   605,   606,    -1,
      -1,   609,   610,    -1,   612,   613,   614,   615,   616,   617,
     618,    -1,    -1,    -1,    -1,    -1,    -1,   625,   626,    -1,
     628,   629,   630,    -1,    -1,   633,    -1,    -1,    -1,    -1,
     638,   639,    -1,    -1,    -1,    -1,   644,   645,    -1,    -1,
     648,   649,    -1,    -1,   652,   653,     5,    -1,     7,     8,
       9,    10,    11,    12,    -1,    14,    -1,    -1,    -1,    18,
      -1,    -1,    21,    -1,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    32,    -1,    -1,    35,    36,    37,    38,
      39,    40,    41,    -1,    43,    44,    45,    -1,    47,    -1,
      49,    50,    -1,    -1,    53,    54,    55,    56,    57,    -1,
      59,    60,    61,    62,    63,    -1,    65,    66,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    78,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    -1,    93,    94,    95,    96,    97,    -1,
      99,   100,   101,   102,    -1,    -1,   105,   106,   107,   108,
     109,    -1,   111,   112,   113,    -1,   115,   116,   117,   118,
     119,   120,    -1,    -1,    -1,    -1,   125,   126,   127,    -1,
      -1,   130,   131,    -1,   133,    -1,    -1,    -1,   137,    -1,
     139,   140,   141,   142,   143,    -1,    -1,    -1,   147,    -1,
      -1,   150,   151,   152,    -1,    -1,    -1,   156,    -1,   158,
     159,    -1,   161,   162,   163,    -1,    -1,   166,   167,    -1,
     169,   170,   171,   172,   173,   174,   175,   176,    -1,   178,
     179,   180,   181,   182,   183,   184,    -1,   186,   187,   188,
     189,    -1,   191,    -1,    -1,    -1,   195,    -1,   197,    -1,
     199,    -1,   201,   202,   203,   204,   205,    -1,   207,    -1,
     209,    -1,   211,    -1,   213,   214,   215,    -1,   217,   218,
     219,    -1,   221,   222,    -1,    -1,    -1,   226,   227,   228,
     229,   230,    -1,   232,   233,   234,    -1,   236,    -1,   238,
      -1,    -1,    -1,   242,   243,   244,   245,    -1,    -1,   248,
      -1,   250,   251,    -1,   253,   254,    -1,    -1,    -1,   258,
      -1,    -1,   261,   262,   263,    -1,    -1,   266,    -1,   268,
     269,   270,    -1,    -1,    -1,    -1,    -1,   276,   277,    -1,
     279,    -1,   281,    -1,   283,   284,    -1,    -1,   287,    -1,
      -1,    -1,    -1,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,    -1,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,    -1,    -1,    -1,    -1,   325,   326,   327,   328,
     329,   330,    -1,    -1,   333,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
      -1,   350,   351,   352,    -1,    -1,   355,   356,   357,   358,
     359,   360,   361,   362,   363,    -1,   365,   366,   367,    -1,
     369,   370,   371,   372,   373,   374,   375,   376,    -1,   378,
     379,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   388,
     389,   390,    -1,   392,   393,    -1,   395,    -1,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,    -1,
     409,   410,   411,    -1,   413,    -1,   415,   416,   417,   418,
     419,    -1,   421,   422,   423,    -1,    -1,   426,    -1,    -1,
      -1,   430,   431,   432,   433,   434,    -1,    -1,   437,   438,
     439,   440,   441,    -1,   443,   444,    -1,   446,   447,   448,
     449,   450,   451,    -1,   453,    -1,   455,   456,    -1,   458,
     459,   460,    -1,    -1,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,    -1,   476,   477,    -1,
      -1,    -1,   481,   482,   483,   484,    -1,    -1,    -1,   488,
      -1,    -1,    -1,   492,    -1,   494,   495,   496,   497,   498,
     499,    -1,   501,   502,   503,   504,   505,   506,    -1,    -1,
      -1,    -1,    -1,    -1,   513,   514,    -1,   516,    -1,    -1,
     519,    -1,    -1,   522,   523,    -1,    -1,    -1,   527,   528,
     529,   530,   531,    -1,   533,   534,   535,   536,   537,   538,
     539,   540,   541,   542,   543,   544,   545,   546,   547,    -1,
     549,    -1,   551,   552,   553,   554,    -1,   556,   557,   558,
      -1,   560,   561,   562,   563,    -1,    -1,    -1,    -1,    -1,
     569,   570,   571,    -1,   573,   574,   575,   576,   577,   578,
     579,   580,   581,   582,   583,   584,    -1,   586,   587,    -1,
      -1,   590,    -1,    -1,   593,    -1,   595,    -1,   597,   598,
     599,    -1,    -1,   602,   603,   604,   605,   606,    -1,    -1,
     609,   610,    -1,   612,   613,   614,   615,   616,   617,   618,
      -1,    -1,    -1,    -1,    -1,    -1,   625,   626,    -1,   628,
     629,   630,    -1,    -1,   633,    -1,    -1,    -1,    -1,   638,
     639,    -1,    -1,    -1,    -1,   644,   645,    -1,    -1,   648,
     649,    -1,    -1,   652,   653,     5,    -1,     7,     8,     9,
      10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,
      -1,    21,    -1,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    -1,    -1,    35,    36,    37,    38,    39,
      40,    41,    -1,    43,    44,    45,    -1,    47,    -1,    49,
      50,    -1,    -1,    53,    54,    55,    56,    57,    -1,    59,
      60,    61,    62,    63,    -1,    65,    66,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    77,    78,    79,
      -1,    81,    82,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    -1,    93,    94,    95,    96,    97,    -1,    99,
     100,   101,   102,    -1,    -1,   105,   106,   107,   108,   109,
      -1,   111,   112,   113,    -1,   115,   116,   117,   118,   119,
     120,    -1,    -1,    -1,    -1,   125,   126,   127,    -1,    -1,
     130,   131,    -1,   133,    -1,    -1,    -1,   137,    -1,   139,
     140,   141,   142,   143,    -1,    -1,    -1,   147,    -1,    -1,
     150,   151,   152,    -1,    -1,    -1,   156,    -1,   158,   159,
      -1,   161,   162,   163,    -1,    -1,   166,   167,    -1,   169,
     170,   171,   172,   173,   174,   175,   176,    -1,   178,   179,
     180,   181,   182,   183,   184,    -1,   186,   187,   188,   189,
      -1,   191,    -1,    -1,    -1,   195,   196,   197,    -1,   199,
      -1,   201,   202,   203,   204,   205,    -1,   207,    -1,   209,
      -1,   211,    -1,   213,   214,   215,    -1,   217,   218,   219,
      -1,   221,   222,    -1,    -1,    -1,   226,   227,   228,   229,
     230,    -1,   232,   233,   234,    -1,   236,    -1,   238,    -1,
      -1,    -1,   242,   243,   244,   245,    -1,    -1,   248,    -1,
     250,   251,    -1,   253,   254,    -1,    -1,    -1,   258,    -1,
      -1,   261,   262,   263,    -1,    -1,   266,    -1,   268,   269,
     270,    -1,    -1,    -1,    -1,    -1,   276,   277,    -1,   279,
      -1,   281,    -1,   283,   284,    -1,    -1,   287,    -1,    -1,
      -1,    -1,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,    -1,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,    -1,    -1,    -1,    -1,   325,   326,   327,   328,   329,
     330,    -1,    -1,   333,   334,   335,   336,    -1,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,    -1,
     350,   351,   352,    -1,    -1,   355,   356,   357,   358,   359,
     360,   361,   362,   363,    -1,   365,   366,   367,    -1,   369,
     370,   371,    -1,   373,   374,   375,   376,    -1,   378,   379,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   388,   389,
     390,    -1,   392,   393,    -1,   395,    -1,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,    -1,   409,
     410,   411,    -1,   413,    -1,   415,   416,   417,   418,   419,
      -1,   421,   422,   423,    -1,    -1,   426,    -1,    -1,    -1,
     430,   431,   432,   433,   434,    -1,    -1,   437,   438,   439,
     440,   441,    -1,   443,   444,    -1,   446,   447,   448,   449,
     450,   451,    -1,   453,    -1,   455,   456,    -1,   458,   459,
     460,    -1,    -1,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,    -1,   476,   477,    -1,    -1,
      -1,   481,   482,   483,   484,    -1,    -1,    -1,   488,    -1,
      -1,    -1,   492,    -1,   494,   495,   496,   497,   498,   499,
      -1,   501,   502,   503,   504,   505,   506,    -1,    -1,    -1,
      -1,    -1,    -1,   513,   514,    -1,   516,    -1,    -1,   519,
      -1,    -1,   522,   523,    -1,    -1,    -1,   527,   528,   529,
     530,   531,    -1,   533,   534,   535,   536,   537,   538,   539,
     540,   541,   542,   543,   544,   545,   546,   547,    -1,   549,
      -1,   551,   552,   553,   554,    -1,   556,   557,   558,    -1,
     560,   561,   562,   563,    -1,    -1,    -1,    -1,    -1,   569,
     570,   571,    -1,   573,   574,   575,   576,   577,   578,   579,
     580,   581,   582,   583,   584,    -1,   586,   587,    -1,    -1,
     590,    -1,    -1,   593,    -1,   595,    -1,   597,   598,   599,
      -1,    -1,   602,   603,   604,   605,   606,    -1,    -1,   609,
     610,    -1,   612,   613,   614,   615,   616,   617,   618,    -1,
      -1,    -1,    -1,    -1,    -1,   625,   626,    -1,   628,   629,
     630,    -1,    -1,   633,    -1,    -1,    -1,    -1,   638,   639,
      -1,    -1,    -1,    -1,   644,   645,    -1,    -1,   648,   649,
      -1,    -1,   652,   653,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      21,    -1,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    32,    -1,    -1,    35,    36,    37,    38,    39,    40,
      41,    -1,    43,    44,    45,    -1,    47,    -1,    49,    50,
      -1,    -1,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    -1,    65,    66,    67,    68,    69,    70,
      71,    -1,    73,    74,    75,    76,    77,    78,    79,    -1,
      81,    82,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    -1,    93,    94,    95,    96,    97,    -1,    99,   100,
     101,   102,    -1,    -1,   105,   106,   107,   108,   109,    -1,
     111,   112,   113,    -1,   115,   116,   117,   118,   119,   120,
      -1,    -1,    -1,    -1,   125,   126,   127,    -1,    -1,   130,
     131,    -1,   133,    -1,    -1,    -1,   137,    -1,   139,   140,
     141,   142,   143,    -1,    -1,    -1,   147,    -1,    -1,   150,
     151,   152,    -1,    -1,    -1,   156,    -1,   158,   159,    -1,
     161,   162,   163,    -1,    -1,   166,   167,    -1,   169,   170,
     171,   172,   173,   174,   175,   176,    -1,   178,   179,   180,
     181,   182,   183,   184,    -1,   186,   187,   188,   189,    -1,
     191,    -1,    -1,    -1,   195,   196,   197,    -1,   199,    -1,
     201,   202,   203,   204,   205,    -1,   207,    -1,   209,    -1,
     211,    -1,   213,   214,   215,    -1,   217,   218,   219,    -1,
     221,   222,    -1,    -1,    -1,   226,   227,   228,   229,   230,
      -1,   232,   233,   234,    -1,   236,    -1,   238,    -1,    -1,
      -1,   242,   243,   244,   245,    -1,    -1,   248,    -1,   250,
     251,    -1,   253,   254,    -1,    -1,    -1,   258,    -1,    -1,
     261,   262,   263,    -1,    -1,   266,    -1,   268,   269,   270,
      -1,    -1,    -1,    -1,    -1,   276,   277,    -1,   279,    -1,
     281,    -1,   283,   284,    -1,    -1,   287,    -1,    -1,    -1,
      -1,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,    -1,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
      -1,    -1,    -1,    -1,   325,   326,   327,   328,   329,   330,
      -1,    -1,   333,   334,   335,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,    -1,   350,
     351,   352,    -1,    -1,   355,   356,   357,   358,   359,   360,
     361,   362,   363,    -1,   365,   366,   367,    -1,   369,   370,
     371,    -1,   373,   374,   375,   376,    -1,   378,   379,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   388,   389,   390,
      -1,   392,   393,    -1,   395,    -1,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,    -1,   409,   410,
     411,    -1,   413,    -1,   415,   416,   417,   418,   419,    -1,
     421,   422,   423,    -1,    -1,   426,    -1,    -1,    -1,   430,
     431,   432,   433,   434,    -1,    -1,   437,   438,   439,   440,
     441,    -1,   443,   444,    -1,   446,   447,   448,   449,   450,
     451,    -1,   453,    -1,   455,   456,    -1,   458,   459,   460,
      -1,    -1,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,    -1,   476,   477,    -1,    -1,    -1,
     481,   482,   483,   484,    -1,    -1,    -1,   488,    -1,    -1,
      -1,   492,    -1,   494,   495,   496,   497,   498,   499,    -1,
     501,   502,   503,   504,   505,   506,    -1,    -1,    -1,    -1,
      -1,    -1,   513,   514,    -1,   516,    -1,    -1,   519,    -1,
      -1,   522,   523,    -1,    -1,    -1,   527,   528,   529,   530,
     531,    -1,   533,   534,   535,   536,   537,   538,   539,   540,
     541,   542,   543,   544,   545,   546,   547,    -1,   549,    -1,
     551,   552,   553,   554,    -1,   556,   557,   558,    -1,   560,
     561,   562,   563,    -1,    -1,    -1,    -1,    -1,   569,   570,
     571,    -1,   573,   574,   575,   576,   577,   578,   579,   580,
     581,   582,   583,   584,    -1,   586,   587,    -1,    -1,   590,
      -1,    -1,   593,    -1,   595,    -1,   597,   598,   599,    -1,
      -1,   602,   603,   604,   605,   606,    -1,    -1,   609,   610,
      -1,   612,   613,   614,   615,   616,   617,   618,    -1,    -1,
      -1,    -1,    -1,    -1,   625,   626,    -1,   628,   629,   630,
      -1,    -1,   633,    -1,    -1,    -1,    -1,   638,   639,    -1,
      -1,    -1,    -1,   644,   645,    -1,    -1,   648,   649,    -1,
      -1,   652,   653,     5,    -1,     7,     8,     9,    10,    11,
      -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,
      -1,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      32,    -1,    -1,    35,    36,    37,    38,    39,    40,    41,
      -1,    43,    44,    45,    -1,    47,    -1,    49,    50,    -1,
      -1,    53,    54,    55,    56,    57,    -1,    59,    60,    61,
      62,    63,    -1,    65,    66,    67,    68,    69,    70,    71,
      -1,    73,    74,    75,    76,    77,    78,    79,    -1,    81,
      82,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      -1,    93,    94,    95,    96,    97,    -1,    99,   100,   101,
     102,    -1,    -1,   105,   106,   107,   108,   109,    -1,   111,
     112,   113,    -1,   115,   116,   117,   118,   119,   120,    -1,
      -1,    -1,    -1,   125,   126,   127,    -1,    -1,   130,   131,
      -1,   133,    -1,    -1,    -1,   137,    -1,   139,   140,   141,
     142,   143,    -1,    -1,    -1,   147,    -1,    -1,   150,   151,
     152,    -1,    -1,    -1,   156,    -1,   158,   159,    -1,   161,
     162,   163,    -1,    -1,   166,   167,    -1,   169,   170,   171,
     172,   173,   174,   175,   176,    -1,   178,   179,   180,   181,
     182,   183,   184,    -1,   186,   187,   188,   189,    -1,   191,
      -1,    -1,    -1,   195,   196,   197,    -1,   199,    -1,   201,
     202,   203,   204,   205,    -1,   207,    -1,   209,    -1,   211,
      -1,   213,   214,   215,    -1,   217,   218,   219,    -1,   221,
     222,    -1,    -1,    -1,   226,   227,   228,   229,   230,    -1,
     232,   233,   234,    -1,   236,    -1,   238,    -1,    -1,    -1,
     242,   243,   244,   245,    -1,    -1,   248,    -1,   250,   251,
      -1,   253,   254,    -1,    -1,    -1,   258,    -1,    -1,   261,
     262,   263,    -1,    -1,   266,    -1,   268,   269,   270,    -1,
      -1,    -1,    -1,    -1,   276,   277,    -1,   279,    -1,   281,
      -1,   283,   284,    -1,    -1,   287,    -1,    -1,    -1,    -1,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,    -1,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,    -1,
      -1,    -1,    -1,   325,   326,   327,   328,   329,   330,    -1,
      -1,   333,   334,   335,   336,    -1,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,
     352,    -1,    -1,   355,   356,   357,   358,   359,   360,   361,
     362,   363,    -1,   365,   366,   367,    -1,   369,   370,   371,
      -1,   373,   374,   375,   376,    -1,   378,   379,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   388,   389,   390,    -1,
     392,   393,    -1,   395,    -1,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,    -1,   409,   410,   411,
      -1,   413,    -1,   415,   416,   417,   418,   419,    -1,   421,
     422,   423,    -1,    -1,   426,    -1,    -1,    -1,   430,   431,
     432,   433,   434,    -1,    -1,   437,   438,   439,   440,   441,
      -1,   443,   444,    -1,   446,   447,   448,   449,   450,   451,
      -1,   453,    -1,   455,   456,    -1,   458,   459,   460,    -1,
      -1,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,    -1,   476,   477,    -1,    -1,    -1,   481,
     482,   483,   484,    -1,    -1,    -1,   488,    -1,    -1,    -1,
     492,    -1,   494,   495,   496,   497,   498,   499,    -1,   501,
     502,   503,   504,   505,   506,    -1,    -1,    -1,    -1,    -1,
      -1,   513,   514,    -1,   516,    -1,    -1,   519,    -1,    -1,
     522,   523,    -1,    -1,    -1,   527,   528,   529,   530,   531,
      -1,   533,   534,   535,   536,   537,   538,   539,   540,   541,
     542,   543,   544,   545,   546,   547,    -1,   549,    -1,   551,
     552,   553,   554,    -1,   556,   557,   558,    -1,   560,   561,
     562,   563,    -1,    -1,    -1,    -1,    -1,   569,   570,   571,
      -1,   573,   574,   575,   576,   577,   578,   579,   580,   581,
     582,   583,   584,    -1,   586,   587,    -1,    -1,   590,    -1,
      -1,   593,    -1,   595,    -1,   597,   598,   599,    -1,    -1,
     602,   603,   604,   605,   606,    -1,    -1,   609,   610,    -1,
     612,   613,   614,   615,   616,   617,   618,    -1,    -1,    -1,
      -1,    -1,    -1,   625,   626,    -1,   628,   629,   630,    -1,
      -1,   633,    -1,    -1,    -1,    -1,   638,   639,    -1,    -1,
      -1,    -1,   644,   645,    -1,    -1,   648,   649,    -1,    -1,
     652,   653,     5,    -1,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,
      23,    24,    25,    26,    27,    28,    29,    30,    -1,    32,
      -1,    -1,    35,    36,    37,    38,    39,    40,    41,    -1,
      43,    44,    45,    -1,    47,    -1,    49,    50,    -1,    -1,
      53,    54,    55,    56,    57,    -1,    59,    60,    61,    62,
      63,    -1,    65,    66,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    78,    79,    -1,    81,    82,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    -1,
      93,    94,    95,    96,    97,    -1,    99,   100,   101,   102,
      -1,    -1,   105,   106,   107,   108,   109,    -1,   111,   112,
     113,    -1,   115,   116,   117,   118,   119,   120,    -1,    -1,
      -1,    -1,   125,   126,   127,    -1,    -1,   130,   131,    -1,
     133,    -1,    -1,    -1,   137,    -1,   139,   140,   141,   142,
     143,    -1,    -1,    -1,   147,    -1,    -1,   150,   151,   152,
      -1,    -1,    -1,   156,    -1,   158,   159,    -1,   161,   162,
     163,    -1,    -1,   166,   167,    -1,   169,   170,   171,   172,
     173,   174,   175,   176,    -1,   178,   179,   180,   181,   182,
     183,   184,    -1,   186,   187,   188,   189,    -1,   191,    -1,
      -1,    -1,   195,    -1,   197,    -1,   199,    -1,   201,   202,
     203,   204,   205,    -1,   207,    -1,   209,    -1,   211,    -1,
     213,   214,   215,    -1,   217,   218,   219,    -1,   221,   222,
      -1,    -1,    -1,   226,   227,   228,   229,   230,    -1,   232,
     233,   234,    -1,   236,    -1,   238,    -1,    -1,    -1,   242,
     243,   244,   245,    -1,    -1,   248,    -1,   250,   251,    -1,
     253,   254,    -1,    -1,    -1,   258,    -1,    -1,   261,   262,
     263,    -1,    -1,   266,    -1,   268,   269,   270,    -1,    -1,
      -1,    -1,    -1,   276,   277,    -1,   279,    -1,   281,    -1,
     283,   284,    -1,    -1,   287,    -1,    -1,    -1,    -1,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,    -1,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,    -1,    -1,
      -1,    -1,   325,   326,   327,   328,   329,   330,    -1,    -1,
     333,   334,   335,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,    -1,   350,   351,   352,
      -1,    -1,   355,   356,   357,   358,   359,   360,   361,   362,
     363,    -1,   365,   366,   367,    -1,   369,   370,   371,    -1,
     373,   374,   375,   376,    -1,   378,   379,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   388,   389,   390,    -1,   392,
     393,    -1,   395,    -1,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,    -1,   409,   410,   411,    -1,
     413,    -1,   415,   416,   417,   418,   419,    -1,   421,   422,
     423,    -1,    -1,   426,    -1,    -1,    -1,   430,   431,   432,
     433,   434,    -1,    -1,   437,   438,   439,   440,   441,    -1,
     443,   444,    -1,   446,   447,   448,   449,   450,   451,    -1,
     453,    -1,   455,   456,    -1,   458,   459,   460,    -1,    -1,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,    -1,   476,   477,    -1,    -1,    -1,   481,   482,
     483,   484,    -1,    -1,    -1,   488,    -1,    -1,    -1,   492,
      -1,   494,   495,   496,   497,   498,   499,    -1,   501,   502,
     503,   504,   505,   506,    -1,    -1,    -1,    -1,    -1,    -1,
     513,   514,    -1,   516,    -1,    -1,   519,    -1,    -1,   522,
     523,    -1,    -1,    -1,   527,   528,   529,   530,   531,    -1,
     533,   534,   535,   536,   537,   538,   539,   540,   541,   542,
     543,   544,   545,   546,   547,    -1,   549,    -1,   551,   552,
     553,   554,    -1,   556,   557,   558,    -1,   560,   561,   562,
     563,    -1,    -1,    -1,    -1,    -1,   569,   570,   571,    -1,
     573,   574,   575,   576,   577,   578,   579,   580,   581,   582,
     583,   584,    -1,   586,   587,    -1,    -1,   590,    -1,    -1,
     593,    -1,   595,    -1,   597,   598,   599,    -1,    -1,   602,
     603,   604,   605,   606,    -1,    -1,   609,   610,    -1,   612,
     613,   614,   615,   616,   617,   618,    -1,    -1,    -1,    -1,
      -1,    -1,   625,   626,    -1,   628,   629,   630,    -1,    -1,
     633,    -1,    -1,    -1,    -1,   638,   639,    -1,    -1,    -1,
      -1,   644,   645,    -1,    -1,   648,   649,    -1,    -1,   652,
     653,     5,    -1,     7,     8,     9,    10,    11,    -1,    -1,
      14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    -1,
      -1,    35,    36,    37,    38,    39,    40,    41,    -1,    43,
      44,    45,    -1,    47,    -1,    49,    50,    -1,    -1,    53,
      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,
      -1,    65,    66,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    78,    79,    -1,    81,    82,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    -1,    93,
      94,    95,    96,    97,    -1,    99,   100,   101,   102,    -1,
      -1,   105,   106,   107,   108,   109,    -1,   111,   112,   113,
      -1,   115,   116,   117,   118,   119,   120,    -1,    -1,    -1,
      -1,   125,   126,   127,    -1,    -1,   130,   131,    -1,   133,
      -1,    -1,    -1,   137,    -1,   139,   140,   141,   142,   143,
      -1,    -1,    -1,   147,    -1,    -1,   150,   151,   152,    -1,
      -1,    -1,   156,    -1,   158,   159,    -1,   161,   162,   163,
      -1,    -1,   166,   167,    -1,   169,   170,   171,   172,   173,
     174,   175,   176,    -1,   178,   179,   180,   181,   182,   183,
     184,    -1,   186,   187,   188,   189,    -1,   191,    -1,    -1,
      -1,   195,    -1,   197,    -1,   199,    -1,   201,   202,   203,
     204,   205,    -1,   207,    -1,   209,    -1,   211,    -1,   213,
     214,   215,    -1,   217,   218,   219,    -1,   221,   222,    -1,
      -1,    -1,   226,   227,   228,   229,   230,    -1,   232,   233,
     234,    -1,   236,    -1,   238,    -1,    -1,    -1,   242,   243,
     244,   245,    -1,    -1,   248,    -1,   250,   251,    -1,   253,
     254,    -1,    -1,    -1,   258,    -1,    -1,   261,   262,   263,
      -1,    -1,   266,    -1,   268,   269,   270,    -1,    -1,    -1,
      -1,    -1,   276,   277,    -1,   279,    -1,   281,    -1,   283,
     284,    -1,    -1,   287,    -1,    -1,    -1,    -1,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,    -1,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,    -1,    -1,    -1,
      -1,   325,   326,   327,   328,   329,   330,    -1,    -1,   333,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,    -1,   350,   351,   352,    -1,
      -1,   355,   356,   357,   358,   359,   360,   361,   362,   363,
      -1,   365,   366,   367,    -1,   369,   370,   371,    -1,   373,
     374,   375,   376,    -1,   378,   379,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   388,   389,   390,    -1,   392,   393,
      -1,   395,    -1,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,    -1,   409,   410,   411,    -1,   413,
      -1,   415,   416,   417,   418,   419,    -1,   421,   422,   423,
      -1,    -1,   426,    -1,    -1,    -1,   430,   431,   432,   433,
     434,    -1,    -1,   437,   438,   439,   440,   441,    -1,   443,
     444,    -1,   446,   447,   448,   449,   450,   451,    -1,   453,
      -1,   455,   456,    -1,   458,   459,   460,    -1,    -1,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,    -1,   476,   477,    -1,    -1,    -1,   481,   482,   483,
     484,    -1,    -1,    -1,   488,    -1,    -1,    -1,   492,    -1,
     494,   495,   496,   497,   498,   499,    -1,   501,   502,   503,
     504,   505,   506,    -1,    -1,    -1,    -1,    -1,    -1,   513,
     514,    -1,   516,    -1,    -1,   519,    -1,    -1,   522,   523,
      -1,    -1,    -1,   527,   528,   529,   530,   531,    -1,   533,
     534,   535,   536,   537,   538,   539,   540,   541,   542,   543,
     544,   545,   546,   547,    -1,   549,    -1,   551,   552,   553,
     554,    -1,   556,   557,   558,    -1,   560,   561,   562,   563,
      -1,    -1,    -1,    -1,    -1,   569,   570,   571,    -1,   573,
     574,   575,   576,   577,   578,   579,   580,   581,   582,   583,
     584,    -1,   586,   587,    -1,    -1,   590,    -1,    -1,   593,
      -1,   595,    -1,   597,   598,   599,    -1,    -1,   602,   603,
     604,   605,   606,    -1,    -1,   609,   610,    -1,   612,   613,
     614,   615,   616,   617,   618,    -1,    -1,    -1,    -1,    -1,
      -1,   625,   626,    -1,   628,   629,   630,    -1,    -1,   633,
      -1,    -1,    -1,    -1,   638,   639,    -1,    -1,    -1,    -1,
     644,   645,    -1,    -1,   648,   649,    -1,    -1,   652,   653,
       5,    -1,     7,     8,     9,    10,    11,    12,    -1,    14,
      -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,
      25,    26,    27,    28,    29,    30,    -1,    32,    -1,    -1,
      35,    36,    37,    38,    39,    40,    41,    -1,    43,    44,
      45,    -1,    47,    -1,    49,    50,    -1,    -1,    53,    54,
      55,    56,    57,    -1,    59,    60,    61,    62,    63,    -1,
      65,    66,    67,    68,    69,    70,    71,    -1,    73,    74,
      75,    76,    77,    78,    79,    -1,    81,    82,    83,    84,
      85,    86,    87,    88,    -1,    90,    91,    -1,    93,    94,
      95,    96,    97,    -1,    99,   100,   101,   102,    -1,    -1,
     105,   106,   107,   108,   109,    -1,   111,   112,   113,    -1,
     115,   116,   117,   118,   119,   120,    -1,    -1,    -1,    -1,
     125,   126,   127,    -1,    -1,   130,   131,    -1,   133,    -1,
      -1,    -1,   137,    -1,   139,   140,   141,   142,   143,    -1,
      -1,    -1,   147,    -1,    -1,   150,   151,   152,    -1,    -1,
      -1,   156,    -1,   158,   159,    -1,   161,   162,   163,    -1,
      -1,   166,   167,    -1,   169,   170,   171,   172,   173,   174,
     175,   176,    -1,   178,   179,   180,   181,   182,   183,   184,
      -1,   186,   187,   188,   189,    -1,   191,    -1,    -1,    -1,
     195,    -1,   197,    -1,   199,    -1,   201,   202,   203,   204,
     205,    -1,   207,    -1,   209,    -1,   211,    -1,   213,   214,
     215,    -1,   217,   218,   219,    -1,   221,   222,    -1,    -1,
      -1,   226,   227,   228,   229,   230,    -1,   232,   233,   234,
      -1,   236,    -1,   238,    -1,    -1,    -1,   242,   243,   244,
     245,    -1,    -1,   248,    -1,   250,   251,    -1,   253,   254,
      -1,    -1,    -1,   258,    -1,    -1,   261,   262,   263,    -1,
      -1,   266,    -1,   268,   269,   270,    -1,    -1,    -1,    -1,
      -1,   276,   277,    -1,   279,    -1,   281,    -1,   283,   284,
      -1,    -1,   287,    -1,    -1,    -1,    -1,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,    -1,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,    -1,    -1,    -1,    -1,
     325,   326,   327,   328,   329,   330,    -1,    -1,   333,   334,
     335,   336,    -1,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,    -1,   350,   351,   352,    -1,    -1,
     355,   356,   357,   358,   359,    -1,   361,   362,   363,    -1,
     365,   366,   367,    -1,   369,   370,   371,    -1,   373,   374,
     375,   376,    -1,   378,   379,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   388,   389,   390,    -1,   392,   393,    -1,
     395,    -1,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,    -1,   409,   410,   411,    -1,   413,    -1,
     415,   416,   417,   418,   419,    -1,   421,   422,   423,    -1,
      -1,   426,    -1,    -1,    -1,   430,   431,   432,   433,   434,
      -1,    -1,   437,   438,   439,   440,   441,    -1,   443,   444,
      -1,   446,   447,   448,   449,   450,   451,    -1,   453,    -1,
     455,   456,    -1,   458,   459,   460,    -1,    -1,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
      -1,   476,   477,    -1,    -1,    -1,   481,   482,   483,   484,
      -1,    -1,    -1,   488,    -1,    -1,    -1,   492,    -1,   494,
     495,   496,   497,   498,   499,    -1,   501,   502,   503,   504,
     505,   506,    -1,    -1,    -1,    -1,    -1,    -1,   513,   514,
      -1,   516,    -1,    -1,   519,    -1,    -1,   522,   523,    -1,
      -1,    -1,   527,   528,   529,   530,   531,    -1,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,    -1,   549,    -1,   551,   552,   553,   554,
      -1,   556,   557,   558,    -1,   560,   561,   562,   563,    -1,
      -1,    -1,    -1,    -1,   569,   570,   571,    -1,   573,   574,
     575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
      -1,   586,   587,    -1,    -1,   590,    -1,    -1,   593,    -1,
     595,    -1,   597,   598,   599,    -1,    -1,   602,   603,   604,
     605,   606,    -1,    -1,   609,   610,    -1,   612,   613,   614,
     615,   616,   617,   618,    -1,    -1,    -1,    -1,    -1,    -1,
     625,   626,    -1,   628,   629,   630,    -1,    -1,   633,    -1,
      -1,    -1,    -1,   638,   639,    -1,    -1,    -1,    -1,   644,
     645,    -1,    -1,   648,   649,    -1,    -1,   652,   653,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,
      26,    27,    28,    29,    30,    -1,    32,    -1,    -1,    35,
      36,    37,    38,    39,    40,    41,    -1,    43,    44,    45,
      -1,    47,    -1,    49,    50,    -1,    -1,    53,    54,    55,
      56,    57,    -1,    59,    60,    61,    62,    63,    -1,    65,
      66,    67,    68,    69,    70,    71,    -1,    73,    74,    75,
      76,    77,    78,    79,    -1,    81,    82,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    -1,    93,    94,    95,
      96,    97,    -1,    99,   100,   101,   102,    -1,    -1,   105,
     106,   107,   108,   109,    -1,   111,   112,   113,    -1,   115,
     116,   117,   118,   119,   120,    -1,    -1,    -1,    -1,   125,
     126,   127,    -1,    -1,   130,   131,    -1,   133,    -1,    -1,
      -1,   137,    -1,   139,   140,   141,   142,   143,    -1,    -1,
      -1,   147,    -1,    -1,   150,   151,   152,    -1,    -1,    -1,
     156,    -1,   158,   159,    -1,   161,   162,   163,    -1,    -1,
     166,   167,    -1,   169,   170,   171,   172,   173,   174,   175,
     176,    -1,   178,   179,   180,   181,   182,   183,   184,    -1,
     186,   187,   188,   189,    -1,   191,    -1,    -1,    -1,   195,
      -1,   197,    -1,   199,    -1,   201,   202,   203,   204,   205,
      -1,   207,    -1,   209,    -1,   211,    -1,   213,   214,   215,
      -1,   217,   218,   219,    -1,   221,   222,    -1,    -1,    -1,
     226,   227,   228,   229,   230,    -1,   232,   233,   234,    -1,
     236,    -1,   238,    -1,    -1,    -1,   242,   243,   244,   245,
      -1,    -1,   248,    -1,   250,   251,    -1,   253,   254,    -1,
      -1,    -1,   258,    -1,    -1,   261,   262,   263,    -1,    -1,
     266,    -1,   268,   269,   270,    -1,    -1,    -1,    -1,    -1,
     276,   277,    -1,   279,    -1,   281,    -1,   283,   284,    -1,
      -1,   287,    -1,    -1,    -1,    -1,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,    -1,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,    -1,    -1,    -1,    -1,   325,
     326,   327,   328,   329,   330,    -1,    -1,   333,   334,   335,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,   350,   351,   352,    -1,    -1,   355,
     356,   357,   358,   359,   360,   361,   362,   363,    -1,   365,
     366,   367,    -1,   369,   370,   371,    -1,   373,   374,   375,
     376,    -1,   378,   379,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   388,   389,   390,    -1,   392,   393,    -1,   395,
      -1,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,    -1,   409,   410,   411,    -1,   413,    -1,   415,
     416,   417,   418,   419,    -1,   421,   422,   423,    -1,    -1,
     426,    -1,    -1,    -1,   430,   431,   432,   433,   434,    -1,
      -1,   437,   438,   439,   440,   441,    -1,   443,   444,    -1,
     446,   447,   448,   449,   450,   451,    -1,   453,    -1,   455,
     456,    -1,   458,   459,   460,    -1,    -1,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,    -1,
     476,   477,    -1,    -1,    -1,   481,   482,   483,   484,    -1,
      -1,    -1,   488,    -1,    -1,    -1,   492,    -1,   494,   495,
     496,   497,   498,   499,    -1,   501,   502,   503,   504,   505,
     506,    -1,    -1,    -1,    -1,    -1,    -1,   513,   514,    -1,
     516,    -1,    -1,   519,    -1,    -1,   522,   523,    -1,    -1,
      -1,   527,   528,   529,   530,   531,    -1,   533,   534,   535,
     536,   537,   538,   539,   540,   541,   542,   543,   544,   545,
     546,   547,    -1,   549,    -1,   551,   552,   553,   554,    -1,
     556,   557,   558,    -1,   560,   561,   562,   563,    -1,    -1,
      -1,    -1,    -1,   569,   570,   571,    -1,   573,   574,   575,
     576,   577,   578,   579,   580,   581,   582,   583,   584,    -1,
     586,   587,    -1,    -1,   590,    -1,    -1,   593,    -1,   595,
      -1,   597,   598,   599,    -1,    -1,   602,   603,   604,   605,
     606,    -1,    -1,   609,   610,    -1,   612,   613,   614,   615,
     616,   617,   618,    -1,    -1,    -1,    -1,    -1,    -1,   625,
     626,    -1,   628,   629,   630,    -1,    -1,   633,    -1,    -1,
      -1,    -1,   638,   639,    -1,    -1,    -1,    -1,   644,   645,
      -1,    -1,   648,   649,    -1,    -1,   652,   653,     5,    -1,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    32,    -1,    -1,    35,    36,
      37,    38,    39,    40,    41,    -1,    43,    44,    45,    -1,
      47,    -1,    49,    50,    -1,    -1,    53,    54,    55,    56,
      57,    -1,    59,    60,    61,    62,    63,    -1,    65,    66,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      77,    78,    79,    -1,    81,    82,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    -1,    93,    94,    95,    96,
      97,    -1,    99,   100,   101,   102,    -1,    -1,   105,   106,
     107,   108,   109,    -1,   111,   112,   113,    -1,   115,   116,
     117,   118,   119,   120,    -1,    -1,    -1,    -1,   125,   126,
     127,    -1,    -1,   130,   131,    -1,   133,    -1,    -1,    -1,
     137,    -1,   139,   140,   141,   142,   143,    -1,    -1,    -1,
     147,    -1,    -1,   150,   151,   152,    -1,    -1,    -1,   156,
      -1,   158,   159,    -1,   161,   162,   163,    -1,    -1,   166,
     167,    -1,   169,   170,   171,   172,   173,   174,   175,   176,
      -1,   178,   179,   180,   181,   182,   183,   184,    -1,   186,
     187,   188,   189,    -1,   191,    -1,    -1,    -1,   195,    -1,
     197,    -1,   199,    -1,   201,   202,   203,   204,   205,    -1,
     207,    -1,   209,    -1,   211,    -1,   213,   214,   215,    -1,
     217,   218,   219,    -1,   221,   222,    -1,    -1,    -1,   226,
     227,   228,   229,   230,    -1,   232,   233,   234,    -1,   236,
      -1,   238,    -1,    -1,    -1,   242,   243,   244,   245,    -1,
      -1,   248,    -1,   250,   251,    -1,   253,   254,    -1,    -1,
      -1,   258,    -1,    -1,   261,   262,   263,    -1,    -1,   266,
      -1,   268,   269,   270,    -1,    -1,    -1,    -1,    -1,   276,
     277,    -1,   279,    -1,   281,    -1,   283,   284,    -1,    -1,
     287,    -1,    -1,    -1,    -1,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,    -1,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,    -1,    -1,    -1,    -1,   325,   326,
     327,   328,   329,   330,    -1,    -1,   333,   334,   335,   336,
      -1,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,    -1,   350,   351,   352,    -1,    -1,   355,   356,
     357,   358,   359,   360,   361,   362,   363,    -1,   365,   366,
     367,    -1,   369,   370,   371,    -1,   373,   374,   375,   376,
      -1,   378,   379,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   388,   389,   390,    -1,   392,   393,    -1,   395,    -1,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,    -1,   409,   410,   411,    -1,   413,    -1,   415,   416,
     417,   418,   419,    -1,   421,   422,   423,    -1,    -1,   426,
      -1,    -1,    -1,   430,   431,   432,   433,   434,    -1,    -1,
     437,   438,   439,   440,   441,    -1,   443,   444,    -1,   446,
     447,   448,   449,   450,   451,    -1,   453,    -1,   455,   456,
      -1,   458,   459,   460,    -1,    -1,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,    -1,   476,
     477,    -1,    -1,    -1,   481,   482,   483,   484,    -1,    -1,
      -1,   488,    -1,    -1,    -1,   492,    -1,   494,   495,   496,
     497,   498,   499,    -1,   501,   502,   503,   504,   505,   506,
      -1,    -1,    -1,    -1,    -1,    -1,   513,   514,    -1,   516,
      -1,    -1,   519,    -1,    -1,   522,   523,    -1,    -1,    -1,
     527,   528,   529,   530,   531,    -1,   533,   534,   535,   536,
     537,   538,   539,   540,   541,   542,   543,   544,   545,   546,
     547,    -1,   549,    -1,   551,   552,   553,   554,    -1,   556,
     557,   558,    -1,   560,   561,   562,   563,    -1,    -1,    -1,
      -1,    -1,   569,   570,   571,    -1,   573,   574,   575,   576,
     577,   578,   579,   580,   581,   582,   583,   584,    -1,   586,
     587,    -1,    -1,   590,    -1,    -1,   593,    -1,   595,    -1,
     597,   598,   599,    -1,    -1,   602,   603,   604,   605,   606,
      -1,    -1,   609,   610,    -1,   612,   613,   614,   615,   616,
     617,   618,    -1,    -1,    -1,    -1,    -1,    -1,   625,   626,
      -1,   628,   629,   630,    -1,    -1,   633,    -1,    -1,    -1,
      -1,   638,   639,    -1,    -1,    -1,    -1,   644,   645,    -1,
      -1,   648,   649,    -1,    -1,   652,   653,     5,    -1,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,    -1,    -1,    21,    -1,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    32,    -1,    -1,    35,    36,    37,
      38,    39,    40,    41,    -1,    43,    44,    45,    -1,    47,
      -1,    49,    50,    -1,    -1,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    -1,    65,    66,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      78,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    -1,    90,    91,    -1,    93,    94,    95,    96,    97,
      -1,    99,   100,   101,   102,    -1,    -1,   105,   106,   107,
     108,   109,    -1,   111,   112,   113,    -1,   115,   116,   117,
     118,   119,   120,    -1,    -1,    -1,    -1,   125,   126,   127,
      -1,    -1,   130,   131,    -1,   133,    -1,    -1,    -1,   137,
      -1,   139,   140,   141,   142,   143,    -1,    -1,    -1,   147,
      -1,    -1,   150,   151,   152,    -1,    -1,    -1,   156,    -1,
     158,   159,    -1,   161,   162,   163,    -1,    -1,   166,   167,
      -1,   169,   170,   171,   172,   173,   174,   175,   176,    -1,
     178,   179,   180,   181,   182,   183,   184,    -1,   186,   187,
     188,   189,    -1,   191,    -1,    -1,    -1,   195,    -1,   197,
      -1,   199,    -1,   201,   202,   203,   204,   205,    -1,   207,
      -1,   209,    -1,   211,    -1,   213,   214,   215,    -1,   217,
     218,   219,    -1,   221,   222,    -1,    -1,    -1,   226,   227,
     228,   229,   230,    -1,   232,   233,   234,    -1,   236,    -1,
     238,    -1,    -1,    -1,   242,   243,   244,   245,    -1,    -1,
     248,    -1,   250,   251,    -1,   253,   254,    -1,    -1,    -1,
     258,    -1,    -1,   261,   262,   263,    -1,    -1,   266,    -1,
     268,   269,   270,    -1,    -1,    -1,    -1,    -1,   276,   277,
      -1,   279,    -1,   281,    -1,   283,   284,    -1,    -1,   287,
      -1,    -1,    -1,    -1,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
      -1,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,    -1,    -1,    -1,    -1,   325,   326,   327,
     328,   329,   330,    -1,    -1,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,    -1,   350,   351,   352,    -1,    -1,   355,   356,   357,
     358,   359,   360,   361,   362,   363,    -1,   365,   366,   367,
      -1,   369,   370,   371,    -1,   373,   374,   375,   376,    -1,
     378,   379,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     388,   389,   390,    -1,   392,   393,    -1,   395,    -1,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
      -1,   409,   410,   411,    -1,   413,    -1,   415,   416,   417,
     418,   419,    -1,   421,   422,   423,    -1,    -1,   426,    -1,
      -1,    -1,   430,   431,   432,   433,   434,    -1,    -1,   437,
     438,   439,   440,   441,    -1,   443,   444,    -1,   446,   447,
     448,   449,   450,   451,    -1,   453,    -1,   455,   456,    -1,
     458,   459,   460,    -1,    -1,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,    -1,   476,   477,
      -1,    -1,    -1,   481,   482,   483,   484,    -1,    -1,    -1,
     488,    -1,    -1,    -1,   492,    -1,   494,   495,   496,   497,
     498,   499,    -1,   501,   502,   503,   504,   505,   506,    -1,
      -1,    -1,    -1,    -1,    -1,   513,   514,    -1,   516,    -1,
      -1,   519,    -1,    -1,   522,   523,    -1,    -1,    -1,   527,
     528,   529,   530,   531,    -1,   533,   534,   535,   536,   537,
     538,   539,   540,   541,   542,   543,   544,   545,   546,   547,
      -1,   549,    -1,   551,   552,   553,   554,    -1,   556,   557,
     558,    -1,   560,   561,   562,   563,    -1,    -1,    -1,    -1,
      -1,   569,   570,   571,    -1,   573,   574,   575,   576,   577,
     578,   579,   580,   581,   582,   583,   584,    -1,   586,   587,
      -1,    -1,   590,    -1,    -1,   593,    -1,   595,    -1,   597,
     598,   599,    -1,    -1,   602,   603,   604,   605,   606,    -1,
      -1,   609,   610,    -1,   612,   613,   614,   615,   616,   617,
     618,    -1,    -1,    -1,    -1,    -1,    -1,   625,   626,    -1,
     628,   629,   630,    -1,    -1,   633,    -1,    -1,    -1,    -1,
     638,   639,    -1,    -1,    -1,    -1,   644,   645,    -1,    -1,
     648,   649,    -1,    -1,   652,   653,     5,    -1,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      -1,    -1,    21,    -1,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    32,    -1,    -1,    35,    36,    37,    38,
      39,    40,    41,    -1,    43,    44,    45,    -1,    47,    -1,
      49,    50,    -1,    -1,    53,    54,    55,    56,    57,    -1,
      59,    60,    61,    62,    63,    -1,    65,    66,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    78,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    -1,    93,    94,    95,    96,    97,    -1,
      99,   100,   101,   102,    -1,    -1,   105,   106,   107,   108,
     109,    -1,   111,   112,   113,    -1,   115,   116,   117,   118,
     119,   120,    -1,    -1,    -1,    -1,   125,   126,   127,    -1,
      -1,   130,   131,    -1,   133,    -1,    -1,    -1,   137,    -1,
     139,   140,   141,   142,   143,    -1,    -1,    -1,   147,    -1,
      -1,   150,   151,   152,    -1,    -1,    -1,   156,    -1,   158,
     159,    -1,   161,   162,   163,    -1,    -1,   166,   167,    -1,
     169,   170,   171,   172,   173,   174,   175,   176,    -1,   178,
     179,   180,   181,   182,   183,   184,    -1,   186,   187,   188,
     189,    -1,   191,    -1,    -1,    -1,   195,    -1,   197,    -1,
     199,    -1,   201,   202,   203,   204,   205,    -1,   207,    -1,
     209,    -1,   211,    -1,   213,   214,   215,    -1,   217,   218,
     219,    -1,   221,   222,    -1,    -1,    -1,   226,   227,   228,
     229,   230,    -1,   232,   233,   234,    -1,   236,    -1,   238,
      -1,    -1,    -1,   242,   243,   244,   245,    -1,    -1,   248,
      -1,   250,   251,    -1,   253,   254,    -1,    -1,    -1,   258,
      -1,    -1,   261,   262,   263,    -1,    -1,   266,    -1,   268,
     269,   270,    -1,    -1,    -1,    -1,    -1,   276,   277,    -1,
     279,    -1,   281,    -1,   283,   284,    -1,    -1,   287,    -1,
      -1,    -1,    -1,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,    -1,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,    -1,    -1,    -1,    -1,   325,   326,   327,   328,
     329,   330,    -1,    -1,   333,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
      -1,   350,   351,   352,    -1,    -1,   355,   356,   357,   358,
     359,   360,   361,   362,   363,    -1,   365,   366,   367,    -1,
     369,   370,   371,    -1,   373,   374,   375,   376,    -1,   378,
     379,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   388,
     389,   390,    -1,   392,   393,    -1,   395,    -1,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,    -1,
     409,   410,   411,    -1,   413,    -1,   415,   416,   417,   418,
     419,    -1,   421,   422,   423,    -1,    -1,   426,    -1,    -1,
      -1,   430,   431,   432,   433,   434,    -1,    -1,   437,   438,
     439,   440,   441,    -1,   443,   444,    -1,   446,   447,   448,
     449,   450,   451,    -1,   453,    -1,   455,   456,    -1,   458,
     459,   460,    -1,    -1,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,    -1,   476,   477,    -1,
      -1,    -1,   481,   482,   483,   484,    -1,    -1,    -1,   488,
      -1,    -1,    -1,   492,    -1,   494,   495,   496,   497,   498,
     499,    -1,   501,   502,   503,   504,   505,   506,    -1,    -1,
      -1,    -1,    -1,    -1,   513,   514,    -1,   516,    -1,    -1,
     519,    -1,    -1,   522,   523,    -1,    -1,    -1,   527,   528,
     529,   530,   531,    -1,   533,   534,   535,   536,   537,   538,
     539,   540,   541,   542,   543,   544,   545,   546,   547,    -1,
     549,    -1,   551,   552,   553,   554,    -1,   556,   557,   558,
      -1,   560,   561,   562,   563,    -1,    -1,    -1,    -1,    -1,
     569,   570,   571,    -1,   573,   574,   575,   576,   577,   578,
     579,   580,   581,   582,   583,   584,    -1,   586,   587,    -1,
      -1,   590,    -1,    -1,   593,    -1,   595,    -1,   597,   598,
     599,    -1,    -1,   602,   603,   604,   605,   606,    -1,    -1,
     609,   610,    -1,   612,   613,   614,   615,   616,   617,   618,
      -1,    -1,    -1,    -1,    -1,    -1,   625,   626,    -1,   628,
     629,   630,    -1,    -1,   633,    -1,    -1,    -1,    -1,   638,
     639,    -1,    -1,    -1,    -1,   644,   645,    -1,    -1,   648,
     649,    -1,    -1,   652,   653,     5,    -1,     7,     8,     9,
      10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,
      -1,    21,    -1,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    -1,    -1,    35,    36,    37,    38,    39,
      40,    41,    -1,    43,    44,    45,    -1,    47,    -1,    49,
      50,    -1,    -1,    53,    54,    55,    56,    57,    -1,    59,
      60,    61,    62,    63,    -1,    65,    66,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    77,    78,    79,
      -1,    81,    82,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    -1,    93,    94,    95,    96,    97,    -1,    99,
     100,   101,   102,    -1,    -1,   105,   106,   107,   108,   109,
      -1,   111,   112,   113,    -1,   115,   116,   117,   118,   119,
     120,    -1,    -1,    -1,    -1,   125,   126,   127,    -1,    -1,
     130,   131,    -1,   133,    -1,    -1,    -1,   137,    -1,   139,
     140,   141,   142,   143,    -1,    -1,    -1,   147,    -1,    -1,
     150,   151,   152,    -1,    -1,    -1,   156,    -1,   158,   159,
      -1,   161,   162,   163,    -1,    -1,   166,   167,    -1,   169,
     170,   171,   172,   173,   174,   175,   176,    -1,   178,   179,
     180,   181,   182,   183,   184,    -1,   186,   187,   188,   189,
      -1,   191,    -1,    -1,    -1,   195,    -1,   197,    -1,   199,
      -1,   201,   202,   203,   204,   205,    -1,   207,    -1,   209,
      -1,   211,    -1,   213,   214,   215,    -1,   217,   218,   219,
      -1,   221,   222,    -1,    -1,    -1,   226,   227,   228,   229,
     230,    -1,   232,   233,   234,    -1,   236,    -1,   238,    -1,
      -1,    -1,   242,   243,   244,   245,    -1,    -1,   248,    -1,
     250,   251,    -1,   253,   254,    -1,    -1,    -1,   258,    -1,
      -1,   261,   262,   263,    -1,    -1,   266,    -1,   268,   269,
     270,    -1,    -1,    -1,    -1,    -1,   276,   277,    -1,   279,
      -1,   281,    -1,   283,   284,    -1,    -1,   287,    -1,    -1,
      -1,    -1,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,    -1,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,    -1,    -1,    -1,   325,   326,   327,   328,   329,
     330,    -1,    -1,   333,   334,   335,   336,    -1,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,    -1,
     350,   351,   352,    -1,    -1,   355,   356,   357,   358,   359,
      -1,   361,   362,   363,    -1,   365,   366,   367,    -1,   369,
     370,   371,    -1,   373,   374,   375,   376,    -1,   378,   379,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   388,   389,
     390,    -1,   392,   393,    -1,   395,    -1,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,    -1,   409,
     410,   411,    -1,   413,    -1,   415,   416,   417,   418,   419,
      -1,   421,   422,   423,    -1,    -1,   426,    -1,    -1,    -1,
     430,   431,   432,   433,   434,    -1,    -1,   437,   438,   439,
     440,   441,    -1,   443,   444,    -1,   446,   447,   448,   449,
     450,   451,    -1,   453,    -1,   455,   456,    -1,   458,   459,
     460,    -1,    -1,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,    -1,   476,   477,    -1,    -1,
      -1,   481,   482,   483,   484,    -1,    -1,    -1,   488,    -1,
      -1,    -1,   492,    -1,   494,   495,   496,   497,   498,   499,
      -1,   501,   502,   503,   504,   505,   506,    -1,    -1,    -1,
      -1,    -1,    -1,   513,   514,    -1,   516,    -1,    -1,   519,
      -1,    -1,   522,   523,    -1,    -1,    -1,   527,   528,   529,
     530,   531,    -1,   533,   534,   535,   536,   537,   538,   539,
     540,   541,   542,   543,   544,   545,   546,   547,    -1,   549,
      -1,   551,   552,   553,   554,    -1,   556,   557,   558,    -1,
     560,   561,   562,   563,    -1,    -1,    -1,    -1,    -1,   569,
     570,   571,    -1,   573,   574,   575,   576,   577,   578,   579,
     580,   581,   582,   583,   584,    -1,   586,   587,    -1,    -1,
     590,    -1,    -1,   593,    -1,   595,    -1,   597,   598,   599,
      -1,    -1,   602,   603,   604,   605,   606,    -1,    -1,   609,
     610,    -1,   612,   613,   614,   615,   616,   617,   618,    -1,
      -1,    -1,    -1,    -1,    -1,   625,   626,    -1,   628,   629,
     630,    -1,    -1,   633,    -1,    -1,    -1,    -1,   638,   639,
      -1,    -1,    -1,    -1,   644,   645,    -1,    -1,   648,   649,
      -1,    -1,   652,   653,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      21,    -1,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    32,    -1,    -1,    35,    36,    37,    38,    39,    40,
      41,    -1,    43,    44,    45,    -1,    47,    -1,    49,    50,
      -1,    -1,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    -1,    65,    66,    67,    68,    69,    70,
      71,    -1,    73,    74,    75,    76,    77,    78,    79,    -1,
      81,    82,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    -1,    93,    94,    95,    96,    97,    -1,    99,   100,
     101,   102,    -1,    -1,   105,   106,   107,   108,   109,    -1,
     111,   112,   113,    -1,   115,   116,   117,   118,   119,   120,
      -1,    -1,    -1,    -1,   125,   126,   127,    -1,    -1,   130,
     131,    -1,   133,    -1,    -1,    -1,   137,    -1,   139,   140,
     141,   142,   143,    -1,    -1,    -1,   147,    -1,    -1,   150,
     151,   152,    -1,    -1,    -1,   156,    -1,   158,   159,    -1,
     161,   162,   163,    -1,    -1,   166,   167,    -1,   169,   170,
     171,   172,   173,   174,   175,   176,    -1,   178,   179,   180,
     181,   182,   183,   184,    -1,   186,   187,   188,   189,    -1,
     191,    -1,    -1,    -1,   195,    -1,   197,    -1,   199,    -1,
     201,   202,   203,   204,   205,    -1,   207,    -1,   209,    -1,
     211,    -1,   213,   214,   215,    -1,   217,   218,   219,    -1,
     221,   222,    -1,    -1,    -1,   226,   227,   228,   229,   230,
      -1,   232,   233,   234,    -1,   236,    -1,   238,    -1,    -1,
      -1,   242,   243,   244,   245,    -1,    -1,   248,    -1,   250,
     251,    -1,   253,   254,    -1,    -1,    -1,   258,    -1,    -1,
     261,   262,   263,    -1,    -1,   266,    -1,   268,   269,   270,
      -1,    -1,    -1,    -1,    -1,   276,   277,    -1,   279,    -1,
     281,    -1,   283,   284,    -1,    -1,   287,    -1,    -1,    -1,
      -1,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,    -1,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
      -1,    -1,    -1,    -1,   325,   326,   327,   328,   329,   330,
      -1,    -1,   333,   334,   335,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,    -1,   350,
     351,   352,    -1,    -1,   355,   356,   357,   358,   359,    -1,
     361,   362,   363,    -1,   365,   366,   367,    -1,   369,   370,
     371,    -1,   373,   374,   375,   376,    -1,   378,   379,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   388,   389,   390,
      -1,   392,   393,    -1,   395,    -1,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,    -1,   409,   410,
     411,    -1,   413,    -1,   415,   416,   417,   418,   419,    -1,
     421,   422,   423,    -1,    -1,   426,    -1,    -1,    -1,   430,
     431,   432,   433,   434,    -1,    -1,   437,   438,   439,   440,
     441,    -1,   443,   444,    -1,   446,   447,   448,   449,   450,
     451,    -1,   453,    -1,   455,   456,    -1,   458,   459,   460,
      -1,    -1,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,    -1,   476,   477,    -1,    -1,    -1,
     481,   482,   483,   484,    -1,    -1,    -1,   488,    -1,    -1,
      -1,   492,    -1,   494,   495,   496,   497,   498,   499,    -1,
     501,   502,   503,   504,   505,   506,    -1,    -1,    -1,    -1,
      -1,    -1,   513,   514,    -1,   516,    -1,    -1,   519,    -1,
      -1,   522,   523,    -1,    -1,    -1,   527,   528,   529,   530,
     531,    -1,   533,   534,   535,   536,   537,   538,   539,   540,
     541,   542,   543,   544,   545,   546,   547,    -1,   549,    -1,
     551,   552,   553,   554,    -1,   556,   557,   558,    -1,   560,
     561,   562,   563,    -1,    -1,    -1,    -1,    -1,   569,   570,
     571,    -1,   573,   574,   575,   576,   577,   578,   579,   580,
     581,   582,   583,   584,    -1,   586,   587,    -1,    -1,   590,
      -1,    -1,   593,    -1,   595,    -1,   597,   598,   599,    -1,
      -1,   602,   603,   604,   605,   606,    -1,    -1,   609,   610,
      -1,   612,   613,   614,   615,   616,   617,   618,    -1,    -1,
      -1,    -1,    -1,    -1,   625,   626,    -1,   628,   629,   630,
      -1,    -1,   633,    -1,    -1,    -1,    -1,   638,   639,    -1,
      -1,    -1,    -1,   644,   645,    -1,    -1,   648,   649,    -1,
      -1,   652,   653,     5,    -1,     7,     8,     9,    10,    11,
      -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,
      -1,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      32,    -1,    -1,    35,    36,    37,    38,    39,    40,    41,
      -1,    43,    44,    45,    -1,    47,    -1,    49,    50,    -1,
      -1,    53,    54,    55,    56,    57,    -1,    59,    60,    61,
      62,    63,    -1,    65,    66,    67,    68,    69,    70,    71,
      -1,    73,    74,    75,    76,    77,    78,    79,    -1,    81,
      82,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      -1,    93,    94,    95,    96,    97,    -1,    99,   100,   101,
     102,    -1,    -1,   105,   106,   107,   108,   109,    -1,   111,
     112,   113,    -1,   115,   116,   117,   118,   119,   120,    -1,
      -1,    -1,    -1,   125,   126,   127,    -1,    -1,   130,   131,
      -1,   133,    -1,    -1,    -1,   137,    -1,   139,   140,   141,
     142,   143,    -1,    -1,    -1,   147,    -1,    -1,   150,   151,
     152,    -1,    -1,    -1,   156,    -1,   158,   159,    -1,   161,
     162,   163,    -1,    -1,   166,   167,    -1,   169,   170,   171,
     172,   173,   174,   175,   176,    -1,   178,   179,   180,   181,
     182,   183,   184,    -1,   186,   187,   188,   189,    -1,   191,
      -1,    -1,    -1,   195,    -1,   197,    -1,   199,    -1,   201,
     202,   203,   204,   205,    -1,   207,    -1,   209,    -1,   211,
      -1,   213,   214,   215,    -1,   217,   218,   219,    -1,   221,
     222,    -1,    -1,    -1,   226,   227,   228,   229,   230,    -1,
     232,   233,   234,    -1,   236,    -1,   238,    -1,    -1,    -1,
     242,   243,   244,   245,    -1,    -1,   248,    -1,   250,   251,
      -1,   253,   254,    -1,    -1,    -1,   258,    -1,    -1,   261,
     262,   263,    -1,    -1,   266,    -1,   268,   269,   270,    -1,
      -1,    -1,    -1,    -1,   276,   277,    -1,   279,    -1,   281,
      -1,   283,   284,    -1,    -1,   287,    -1,    -1,    -1,    -1,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,    -1,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,    -1,
      -1,    -1,    -1,   325,   326,   327,   328,   329,   330,    -1,
      -1,   333,   334,   335,   336,    -1,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,
     352,    -1,    -1,   355,   356,   357,   358,   359,    -1,   361,
     362,   363,    -1,   365,   366,   367,    -1,   369,   370,   371,
      -1,   373,   374,   375,   376,    -1,   378,   379,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   388,   389,   390,    -1,
     392,   393,    -1,   395,    -1,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,    -1,   409,   410,   411,
      -1,   413,    -1,   415,   416,   417,   418,   419,    -1,   421,
     422,   423,    -1,    -1,   426,    -1,    -1,    -1,   430,   431,
     432,   433,   434,    -1,    -1,   437,   438,   439,   440,   441,
      -1,   443,   444,    -1,   446,   447,   448,   449,   450,   451,
      -1,   453,    -1,   455,   456,    -1,   458,   459,   460,    -1,
      -1,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,    -1,   476,   477,    -1,    -1,    -1,   481,
     482,   483,   484,    -1,    -1,    -1,   488,    -1,    -1,    -1,
     492,    -1,   494,   495,   496,   497,   498,   499,    -1,   501,
     502,   503,   504,   505,   506,    -1,    -1,    -1,    -1,    -1,
      -1,   513,   514,    -1,   516,    -1,    -1,   519,    -1,    -1,
     522,   523,    -1,    -1,    -1,   527,   528,   529,   530,   531,
      -1,   533,   534,   535,   536,   537,   538,   539,   540,   541,
     542,   543,   544,   545,   546,   547,    -1,   549,    -1,   551,
     552,   553,   554,    -1,   556,   557,   558,    -1,   560,   561,
     562,   563,    -1,    -1,    -1,    -1,    -1,   569,   570,   571,
      -1,   573,   574,   575,   576,   577,   578,   579,   580,   581,
     582,   583,   584,    -1,   586,   587,    -1,    -1,   590,    -1,
      -1,   593,    -1,   595,    -1,   597,   598,   599,    -1,    -1,
     602,   603,   604,   605,   606,    -1,    -1,   609,   610,    -1,
     612,   613,   614,   615,   616,   617,   618,    -1,    -1,    -1,
      -1,    -1,    -1,   625,   626,    -1,   628,   629,   630,    -1,
      -1,   633,    -1,    -1,    -1,    -1,   638,   639,    -1,    -1,
      -1,    -1,   644,   645,    -1,    -1,   648,   649,    -1,    -1,
     652,   653,     5,    -1,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,
      23,    24,    25,    26,    27,    28,    29,    30,    -1,    32,
      -1,    -1,    35,    36,    37,    38,    39,    40,    41,    -1,
      43,    44,    45,    -1,    47,    -1,    49,    50,    -1,    -1,
      53,    54,    55,    56,    57,    -1,    59,    60,    61,    62,
      63,    -1,    65,    66,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    78,    79,    -1,    81,    82,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    -1,
      93,    94,    95,    96,    97,    -1,    99,   100,   101,   102,
      -1,    -1,   105,   106,   107,   108,   109,    -1,   111,   112,
     113,    -1,   115,   116,   117,   118,   119,   120,    -1,    -1,
      -1,    -1,   125,   126,   127,    -1,    -1,   130,   131,    -1,
     133,    -1,    -1,    -1,   137,    -1,   139,   140,   141,   142,
     143,    -1,    -1,    -1,   147,    -1,    -1,   150,   151,   152,
      -1,    -1,    -1,   156,    -1,   158,   159,    -1,   161,   162,
     163,    -1,    -1,   166,   167,    -1,   169,   170,   171,   172,
     173,   174,   175,   176,    -1,   178,   179,   180,   181,   182,
     183,   184,    -1,   186,   187,   188,   189,    -1,   191,    -1,
      -1,    -1,   195,    -1,   197,    -1,   199,    -1,   201,   202,
     203,   204,   205,    -1,   207,    -1,   209,    -1,   211,    -1,
     213,   214,   215,    -1,   217,   218,   219,    -1,   221,   222,
      -1,    -1,    -1,   226,   227,   228,   229,   230,    -1,   232,
     233,   234,    -1,   236,    -1,   238,    -1,    -1,    -1,   242,
     243,   244,   245,    -1,    -1,   248,    -1,   250,   251,    -1,
     253,   254,    -1,    -1,    -1,   258,    -1,    -1,   261,   262,
     263,    -1,    -1,   266,    -1,   268,   269,   270,    -1,    -1,
      -1,    -1,    -1,   276,   277,    -1,   279,    -1,   281,    -1,
     283,   284,    -1,    -1,   287,    -1,    -1,    -1,    -1,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,    -1,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,    -1,    -1,
      -1,    -1,   325,   326,   327,   328,   329,   330,    -1,    -1,
     333,   334,   335,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,    -1,   350,   351,   352,
      -1,    -1,   355,   356,   357,   358,   359,    -1,   361,   362,
     363,    -1,   365,   366,   367,    -1,   369,   370,   371,    -1,
     373,   374,   375,   376,    -1,   378,   379,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   388,   389,   390,    -1,   392,
     393,    -1,   395,    -1,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,    -1,   409,   410,   411,    -1,
     413,    -1,   415,   416,   417,   418,   419,    -1,   421,   422,
     423,    -1,    -1,   426,    -1,    -1,    -1,   430,   431,   432,
     433,   434,    -1,    -1,   437,   438,   439,   440,   441,    -1,
     443,   444,    -1,   446,   447,   448,   449,   450,   451,    -1,
     453,    -1,   455,   456,    -1,   458,   459,   460,    -1,    -1,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,    -1,   476,   477,    -1,    -1,    -1,   481,   482,
     483,   484,    -1,    -1,    -1,   488,    -1,    -1,    -1,   492,
      -1,   494,   495,   496,   497,   498,   499,    -1,   501,   502,
     503,   504,   505,   506,    -1,    -1,    -1,    -1,    -1,    -1,
     513,   514,    -1,   516,    -1,    -1,   519,    -1,    -1,   522,
     523,    -1,    -1,    -1,   527,   528,   529,   530,   531,    -1,
     533,   534,   535,   536,   537,   538,   539,   540,   541,   542,
     543,   544,   545,   546,   547,    -1,   549,    -1,   551,   552,
     553,   554,    -1,   556,   557,   558,    -1,   560,   561,   562,
     563,    -1,    -1,    -1,    -1,    -1,   569,   570,   571,    -1,
     573,   574,   575,   576,   577,   578,   579,   580,   581,   582,
     583,   584,    -1,   586,   587,    -1,    -1,   590,    -1,    -1,
     593,    -1,   595,    -1,   597,   598,   599,    -1,    -1,   602,
     603,   604,   605,   606,    -1,    -1,   609,   610,    -1,   612,
     613,   614,   615,   616,   617,   618,    -1,    -1,    -1,    -1,
      -1,    -1,   625,   626,    -1,   628,   629,   630,    -1,    -1,
     633,    -1,    -1,    -1,    -1,   638,   639,    -1,    -1,    -1,
      -1,   644,   645,    -1,    -1,   648,   649,    -1,    -1,   652,
     653,     5,    -1,     7,     8,     9,    10,    11,    -1,    -1,
      14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    -1,
      -1,    -1,    36,    37,    -1,    -1,    40,    -1,    -1,    43,
      44,    45,    -1,    47,    -1,    49,    50,    -1,    -1,    53,
      -1,    -1,    56,    57,    -1,    59,    60,    -1,    62,    63,
      -1,    65,    66,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    78,    79,    -1,    81,    82,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    -1,    93,
      94,    95,    96,    97,    -1,    99,    -1,    -1,   102,    -1,
      -1,   105,    -1,   107,    -1,   109,    -1,   111,    -1,    -1,
      -1,   115,   116,   117,    -1,    -1,   120,    -1,    -1,    -1,
      -1,   125,   126,   127,    -1,    -1,    -1,   131,    -1,   133,
      -1,    -1,    -1,   137,    -1,   139,   140,   141,   142,   143,
      -1,    -1,    -1,   147,    -1,    -1,   150,   151,   152,    -1,
      -1,    -1,   156,    -1,   158,   159,    -1,   161,   162,   163,
      -1,    -1,   166,   167,    -1,   169,   170,   171,   172,   173,
     174,   175,    -1,    -1,   178,   179,   180,    -1,   182,   183,
     184,    -1,   186,   187,   188,   189,    -1,   191,    -1,    -1,
      -1,   195,    -1,   197,    -1,   199,    -1,   201,   202,   203,
     204,   205,    -1,   207,    -1,   209,    -1,    -1,    -1,   213,
     214,   215,    -1,   217,   218,   219,    -1,   221,   222,    -1,
      -1,    -1,   226,   227,   228,   229,    -1,    -1,   232,   233,
     234,    -1,   236,    -1,   238,    -1,    -1,    -1,    -1,   243,
     244,    -1,    -1,    -1,   248,    -1,   250,   251,    -1,   253,
     254,    -1,    -1,    -1,   258,    -1,    -1,   261,   262,   263,
      -1,    -1,   266,    -1,    -1,   269,   270,    -1,    -1,    -1,
      -1,    -1,   276,   277,    -1,   279,    -1,   281,    -1,   283,
     284,    -1,    -1,   287,    -1,    -1,    -1,    -1,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,    -1,   309,   310,   311,   312,    -1,
     314,   315,   316,   317,    -1,   319,   320,    -1,    -1,    -1,
      -1,   325,   326,   327,   328,   329,   330,    -1,    -1,   333,
     334,    -1,   336,    -1,   338,    -1,   340,   341,   342,   343,
     344,   345,   346,   347,   348,    -1,   350,   351,   352,    -1,
      -1,   355,   356,   357,   358,    -1,    -1,    -1,   362,   363,
      -1,   365,   366,   367,    -1,   369,   370,   371,    -1,   373,
     374,   375,   376,    -1,   378,   379,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   388,   389,   390,    -1,    -1,   393,
      -1,   395,    -1,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,    -1,    -1,   409,   410,   411,    -1,   413,
      -1,   415,   416,   417,   418,   419,    -1,   421,   422,   423,
      -1,    -1,   426,    -1,    -1,    -1,   430,   431,   432,   433,
     434,    -1,    -1,   437,   438,   439,   440,   441,    -1,   443,
     444,    -1,   446,   447,   448,    -1,    -1,   451,    -1,   453,
      -1,   455,   456,    -1,   458,   459,   460,    -1,    -1,    -1,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,    -1,   476,   477,    -1,    -1,    -1,   481,   482,   483,
     484,    -1,    -1,    -1,   488,    -1,    -1,    -1,   492,    -1,
     494,   495,   496,   497,   498,   499,    -1,   501,   502,   503,
     504,   505,   506,    -1,    -1,    -1,    -1,    -1,    -1,   513,
     514,    -1,   516,    -1,    -1,   519,    -1,    -1,   522,   523,
      -1,    -1,    -1,   527,    -1,    -1,   530,   531,    -1,   533,
     534,   535,   536,   537,   538,    -1,    -1,   541,   542,   543,
     544,    -1,   546,   547,    -1,   549,    -1,   551,   552,   553,
     554,    -1,   556,   557,   558,    -1,   560,   561,   562,   563,
      -1,    -1,    -1,    -1,    -1,   569,   570,   571,    -1,    -1,
     574,   575,   576,   577,   578,   579,   580,   581,   582,   583,
     584,    -1,   586,   587,    -1,    -1,   590,    -1,    -1,   593,
      -1,   595,    -1,   597,   598,   599,    -1,    -1,    -1,    -1,
      -1,    -1,   606,    -1,    -1,   609,    -1,    -1,    -1,   613,
     614,   615,   616,   617,   618,    -1,    -1,    -1,    -1,    -1,
      -1,   625,   626,    -1,   628,   629,   630,    -1,    -1,   633,
      -1,    -1,    -1,    -1,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,   652,   653,
      21,    -1,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    32,    -1,    -1,    -1,    36,    -1,    -1,    -1,    40,
      -1,    -1,    43,    44,    45,    -1,    47,    -1,    49,    50,
      -1,    -1,    53,    -1,    -1,    56,    57,    -1,    59,    60,
      -1,    62,    63,    -1,    65,    66,    67,    68,    69,    70,
      71,    -1,    73,    74,    75,    76,    77,    78,    79,    -1,
      81,    82,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    92,    93,    94,    95,    96,    97,    -1,    99,    -1,
      -1,   102,    -1,    -1,   105,    -1,   107,    -1,   109,    -1,
     111,    -1,    -1,    -1,   115,   116,   117,    -1,    -1,   120,
      -1,    -1,    -1,    -1,   125,   126,    -1,    -1,    -1,    -1,
     131,    -1,   133,    -1,    -1,    -1,   137,    -1,   139,   140,
     141,   142,   143,    -1,    -1,    -1,   147,    -1,    -1,   150,
     151,   152,    -1,    -1,    -1,   156,    -1,   158,   159,    -1,
     161,   162,   163,    -1,    -1,   166,   167,    -1,   169,   170,
     171,   172,   173,   174,   175,    -1,    -1,   178,   179,   180,
      -1,    -1,   183,   184,    -1,   186,   187,   188,    -1,    -1,
     191,    -1,    -1,    -1,   195,    -1,   197,   198,   199,    -1,
     201,   202,   203,   204,   205,    -1,   207,    -1,   209,    -1,
      -1,    -1,   213,   214,   215,    -1,   217,    -1,    -1,    -1,
     221,   222,    -1,    -1,    -1,   226,   227,   228,   229,    -1,
      -1,   232,   233,   234,   235,   236,    -1,   238,    -1,    -1,
      -1,    -1,   243,   244,    -1,    -1,    -1,   248,    -1,   250,
     251,    -1,   253,   254,    -1,    -1,    -1,   258,   259,    -1,
     261,   262,   263,    -1,    -1,   266,    -1,    -1,   269,   270,
      -1,   272,    -1,    -1,    -1,   276,   277,    -1,   279,    -1,
     281,    -1,   283,   284,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,    -1,   309,   310,
     311,   312,    -1,   314,   315,   316,   317,    -1,   319,   320,
      -1,    -1,    -1,    -1,   325,   326,   327,   328,   329,   330,
      -1,    -1,   333,   334,    -1,   336,    -1,   338,    -1,   340,
     341,   342,   343,   344,   345,   346,   347,   348,    -1,    -1,
     351,   352,    -1,    -1,   355,   356,   357,   358,    -1,    -1,
      -1,   362,   363,    -1,    -1,    -1,   367,    -1,   369,   370,
     371,    -1,   373,   374,   375,   376,    -1,   378,   379,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   388,   389,   390,
      -1,    -1,   393,    -1,   395,    -1,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,    -1,    -1,   409,   410,
     411,    -1,   413,    -1,   415,   416,   417,   418,   419,    -1,
     421,   422,   423,    -1,    -1,   426,    -1,    -1,    -1,   430,
     431,   432,   433,   434,    -1,    -1,   437,   438,   439,   440,
     441,    -1,   443,   444,    -1,   446,   447,   448,    -1,    -1,
     451,    -1,   453,    -1,   455,   456,    -1,   458,   459,   460,
      -1,    -1,    -1,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,    -1,   476,   477,   478,    -1,    -1,
     481,   482,   483,   484,    -1,    -1,    -1,   488,    -1,    -1,
      -1,   492,    -1,   494,   495,   496,   497,   498,   499,    -1,
     501,   502,   503,   504,   505,   506,   507,    -1,    -1,    -1,
      -1,    -1,   513,   514,    -1,   516,    -1,    -1,   519,    -1,
      -1,   522,   523,    -1,    -1,    -1,   527,    -1,    -1,   530,
     531,    -1,   533,   534,   535,   536,   537,   538,    -1,    -1,
     541,   542,   543,   544,    -1,   546,   547,    -1,   549,    -1,
     551,   552,   553,   554,    -1,    -1,   557,   558,    -1,   560,
     561,   562,   563,    -1,    -1,    -1,    -1,    -1,   569,   570,
     571,    -1,    -1,    -1,   575,   576,   577,   578,    -1,   580,
     581,    -1,   583,   584,    -1,   586,   587,    -1,    -1,   590,
      -1,    -1,   593,    -1,   595,    -1,   597,   598,   599,    -1,
      -1,    -1,    -1,    -1,    -1,   606,    -1,    -1,   609,    -1,
      -1,    -1,   613,   614,   615,   616,   617,   618,    -1,    -1,
      -1,    -1,    -1,    -1,   625,   626,    -1,   628,   629,   630,
      -1,    -1,   633,    -1,    -1,     5,    -1,     7,     8,     9,
      10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,
      -1,    21,   653,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    -1,    -1,    -1,    36,    -1,    -1,    -1,
      40,    -1,    -1,    43,    44,    45,    -1,    47,    -1,    49,
      50,    -1,    -1,    53,    -1,    -1,    56,    57,    -1,    59,
      60,    -1,    62,    63,    -1,    65,    66,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    77,    78,    79,
      -1,    81,    82,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    92,    93,    94,    95,    96,    97,    -1,    99,
      -1,    -1,   102,    -1,    -1,   105,    -1,   107,    -1,   109,
      -1,   111,    -1,    -1,    -1,   115,   116,   117,    -1,    -1,
     120,    -1,    -1,    -1,    -1,   125,   126,    -1,    -1,    -1,
      -1,   131,    -1,   133,    -1,    -1,    -1,   137,    -1,   139,
     140,   141,   142,   143,    -1,    -1,    -1,   147,    -1,    -1,
     150,   151,   152,    -1,    -1,    -1,   156,    -1,   158,   159,
      -1,   161,   162,   163,    -1,    -1,   166,   167,    -1,   169,
     170,   171,   172,   173,   174,   175,    -1,    -1,   178,   179,
     180,    -1,    -1,   183,   184,    -1,   186,   187,   188,    -1,
      -1,   191,    -1,    -1,    -1,   195,    -1,   197,   198,   199,
      -1,   201,   202,   203,   204,   205,    -1,   207,    -1,   209,
      -1,    -1,    -1,   213,   214,   215,    -1,   217,    -1,    -1,
      -1,   221,   222,    -1,    -1,    -1,   226,   227,   228,   229,
      -1,    -1,   232,   233,   234,   235,   236,    -1,   238,    -1,
      -1,    -1,    -1,   243,   244,    -1,    -1,    -1,   248,    -1,
     250,   251,    -1,   253,   254,    -1,    -1,    -1,   258,   259,
      -1,   261,   262,   263,    -1,    -1,   266,    -1,    -1,   269,
     270,    -1,    -1,    -1,    -1,    -1,   276,   277,    -1,   279,
      -1,   281,    -1,   283,   284,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,    -1,   309,
     310,   311,   312,    -1,   314,   315,   316,   317,    -1,   319,
     320,    -1,    -1,    -1,    -1,   325,   326,   327,   328,   329,
     330,    -1,    -1,   333,   334,    -1,   336,    -1,   338,    -1,
     340,   341,   342,   343,   344,   345,   346,   347,   348,    -1,
      -1,   351,   352,    -1,    -1,   355,   356,   357,   358,    -1,
      -1,    -1,   362,   363,    -1,    -1,    -1,   367,    -1,   369,
     370,   371,    -1,   373,   374,   375,   376,    -1,   378,   379,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   388,   389,
     390,    -1,    -1,   393,    -1,   395,    -1,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,    -1,    -1,   409,
     410,   411,    -1,   413,    -1,   415,   416,   417,   418,   419,
      -1,   421,   422,   423,    -1,    -1,   426,    -1,    -1,    -1,
     430,   431,   432,   433,   434,    -1,    -1,   437,   438,   439,
     440,   441,    -1,   443,   444,    -1,   446,   447,   448,    -1,
      -1,   451,    -1,   453,    -1,   455,   456,    -1,   458,   459,
     460,    -1,    -1,    -1,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,    -1,   476,   477,    -1,    -1,
      -1,   481,   482,   483,   484,    -1,    -1,    -1,   488,    -1,
      -1,    -1,   492,    -1,   494,   495,   496,   497,   498,   499,
      -1,   501,   502,   503,   504,   505,   506,   507,    -1,    -1,
      -1,    -1,    -1,   513,   514,    -1,   516,    -1,    -1,   519,
      -1,    -1,   522,   523,    -1,    -1,    -1,   527,    -1,    -1,
     530,   531,    -1,   533,   534,   535,   536,   537,   538,    -1,
      -1,   541,   542,   543,   544,    -1,   546,   547,    -1,   549,
      -1,   551,   552,   553,   554,    -1,    -1,   557,   558,    -1,
     560,   561,   562,   563,    -1,    -1,    -1,    -1,    -1,   569,
     570,   571,    -1,    -1,    -1,   575,   576,   577,   578,    -1,
     580,   581,    -1,   583,   584,    -1,   586,   587,    -1,    -1,
     590,    -1,    -1,   593,    -1,   595,    -1,   597,   598,   599,
      -1,    -1,    -1,    -1,    -1,    -1,   606,    -1,    -1,   609,
      -1,    -1,    -1,   613,   614,   615,   616,   617,   618,    -1,
      -1,    -1,    -1,    -1,    -1,   625,   626,    -1,   628,   629,
     630,    -1,    -1,   633,    -1,    -1,     5,    -1,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      -1,    -1,    21,   653,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    32,    -1,    -1,    -1,    36,    -1,    -1,
      -1,    40,    -1,    -1,    43,    44,    45,    -1,    47,    -1,
      49,    50,    -1,    -1,    53,    -1,    -1,    56,    57,    -1,
      59,    60,    -1,    62,    63,    -1,    65,    66,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    78,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    -1,    93,    94,    95,    96,    97,    -1,
      99,    -1,    -1,   102,    -1,    -1,   105,    -1,   107,    -1,
     109,    -1,   111,    -1,    -1,    -1,   115,   116,   117,    -1,
      -1,   120,    -1,    -1,    -1,    -1,   125,   126,    -1,    -1,
      -1,    -1,   131,    -1,   133,    -1,    -1,    -1,   137,    -1,
     139,   140,   141,   142,   143,    -1,    -1,    -1,   147,    -1,
      -1,   150,   151,   152,    -1,    -1,    -1,   156,    -1,   158,
     159,    -1,   161,   162,   163,    -1,    -1,   166,   167,    -1,
     169,   170,   171,   172,   173,   174,   175,    -1,    -1,   178,
     179,   180,    -1,    -1,   183,   184,    -1,   186,   187,   188,
      -1,    -1,   191,    -1,    -1,    -1,   195,    -1,   197,    -1,
     199,    -1,   201,   202,   203,   204,   205,    -1,   207,    -1,
     209,    -1,    -1,    -1,   213,   214,   215,    -1,   217,    -1,
      -1,    -1,   221,   222,    -1,    -1,    -1,   226,   227,   228,
     229,    -1,    -1,   232,   233,   234,    -1,   236,    -1,   238,
      -1,    -1,    -1,    -1,   243,   244,    -1,    -1,    -1,   248,
      -1,   250,   251,    -1,   253,   254,    -1,    -1,    -1,   258,
      -1,    -1,   261,   262,   263,    -1,    -1,   266,    -1,    -1,
     269,   270,    -1,    -1,    -1,    -1,    -1,   276,   277,    -1,
     279,    -1,   281,    -1,   283,   284,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,    -1,
     309,   310,   311,   312,    -1,   314,   315,   316,   317,    -1,
     319,   320,    -1,    -1,    -1,    -1,   325,   326,   327,   328,
     329,   330,    -1,    -1,   333,   334,    -1,   336,    -1,   338,
      -1,   340,   341,   342,   343,   344,   345,   346,   347,   348,
      -1,    -1,   351,   352,    -1,    -1,   355,   356,   357,   358,
      -1,    -1,    -1,   362,   363,    -1,    -1,    -1,   367,    -1,
     369,   370,   371,    -1,   373,   374,   375,   376,    -1,   378,
     379,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   388,
     389,   390,    -1,    -1,   393,    -1,   395,    -1,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,    -1,    -1,
     409,   410,   411,    -1,   413,    -1,   415,   416,   417,   418,
     419,    -1,   421,   422,   423,    -1,    -1,   426,    -1,    -1,
      -1,   430,   431,   432,   433,   434,    -1,    -1,   437,   438,
     439,   440,   441,    -1,   443,   444,    -1,   446,   447,   448,
      -1,    -1,   451,    -1,   453,    -1,   455,   456,    -1,   458,
     459,   460,    -1,    -1,    -1,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,    -1,   476,   477,   478,
      -1,    -1,   481,   482,   483,   484,    -1,    -1,    -1,   488,
      -1,    -1,    -1,   492,    -1,   494,   495,   496,   497,   498,
     499,    -1,   501,   502,   503,   504,   505,   506,    -1,    -1,
      -1,    -1,    -1,    -1,   513,   514,    -1,   516,    -1,    -1,
     519,    -1,    -1,   522,   523,    -1,    -1,    -1,   527,    -1,
      -1,   530,   531,    -1,   533,   534,   535,   536,   537,   538,
      -1,    -1,   541,   542,   543,   544,    -1,   546,   547,    -1,
     549,    -1,   551,   552,   553,   554,    -1,    -1,   557,   558,
      -1,   560,   561,   562,   563,    -1,    -1,    -1,    -1,    -1,
     569,   570,   571,    -1,    -1,    -1,   575,   576,   577,   578,
      -1,   580,   581,    -1,   583,   584,    -1,   586,   587,    -1,
      -1,   590,    -1,    -1,   593,    -1,   595,    -1,   597,   598,
     599,    -1,    -1,    -1,    -1,    -1,    -1,   606,    -1,    -1,
     609,    -1,    -1,    -1,   613,   614,   615,   616,   617,   618,
      -1,    -1,    -1,    -1,    -1,    -1,   625,   626,    -1,   628,
     629,   630,    -1,    -1,   633,    -1,    -1,     5,    -1,     7,
       8,     9,    10,    11,    -1,    -1,    14,   646,    -1,    -1,
      18,    -1,    -1,    21,   653,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    32,    -1,    -1,    -1,    36,    -1,
      -1,    -1,    40,    -1,    -1,    43,    44,    45,    -1,    47,
      -1,    49,    50,    -1,    -1,    53,    -1,    -1,    56,    57,
      -1,    59,    60,    -1,    62,    63,    -1,    65,    66,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      78,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    -1,    90,    91,    -1,    93,    94,    95,    96,    97,
      -1,    99,    -1,    -1,   102,    -1,    -1,   105,    -1,   107,
      -1,   109,    -1,   111,    -1,    -1,    -1,   115,   116,   117,
      -1,    -1,   120,    -1,    -1,    -1,    -1,   125,   126,    -1,
      -1,    -1,    -1,   131,    -1,   133,    -1,    -1,    -1,   137,
      -1,   139,   140,   141,   142,   143,    -1,    -1,    -1,   147,
      -1,    -1,   150,   151,   152,    -1,    -1,    -1,   156,    -1,
     158,   159,    -1,   161,   162,   163,    -1,    -1,   166,   167,
      -1,   169,   170,   171,   172,   173,   174,   175,    -1,    -1,
     178,   179,   180,    -1,    -1,   183,   184,    -1,   186,   187,
     188,    -1,    -1,   191,    -1,    -1,    -1,   195,    -1,   197,
      -1,   199,    -1,   201,   202,   203,   204,   205,    -1,   207,
      -1,   209,    -1,    -1,    -1,   213,   214,   215,    -1,   217,
      -1,    -1,    -1,   221,   222,    -1,    -1,    -1,   226,   227,
     228,   229,    -1,    -1,   232,   233,   234,    -1,   236,    -1,
     238,    -1,    -1,    -1,    -1,   243,   244,    -1,    -1,    -1,
     248,    -1,   250,   251,    -1,   253,   254,    -1,    -1,    -1,
     258,    -1,    -1,   261,   262,   263,    -1,    -1,   266,    -1,
      -1,   269,   270,    -1,    -1,    -1,    -1,    -1,   276,   277,
      -1,   279,    -1,   281,    -1,   283,   284,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
      -1,   309,   310,   311,   312,    -1,   314,   315,   316,   317,
      -1,   319,   320,    -1,    -1,    -1,    -1,   325,   326,   327,
     328,   329,   330,    -1,    -1,   333,   334,    -1,   336,    -1,
     338,    -1,   340,   341,   342,   343,   344,   345,   346,   347,
     348,    -1,    -1,   351,   352,    -1,    -1,   355,   356,   357,
     358,    -1,    -1,    -1,   362,   363,    -1,    -1,    -1,   367,
      -1,   369,   370,   371,    -1,   373,   374,   375,   376,    -1,
     378,   379,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     388,   389,   390,    -1,    -1,   393,    -1,   395,    -1,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,    -1,
      -1,   409,   410,   411,    -1,   413,    -1,   415,   416,   417,
     418,   419,    -1,   421,   422,   423,    -1,    -1,   426,    -1,
      -1,    -1,   430,   431,   432,   433,   434,    -1,    -1,   437,
     438,   439,   440,   441,    -1,   443,   444,    -1,   446,   447,
     448,    -1,    -1,   451,    -1,   453,    -1,   455,   456,    -1,
     458,   459,   460,    -1,    -1,    -1,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,    -1,   476,   477,
      -1,    -1,    -1,   481,   482,   483,   484,    -1,    -1,    -1,
     488,    -1,    -1,    -1,   492,    -1,   494,   495,   496,   497,
     498,   499,    -1,   501,   502,   503,   504,   505,   506,    -1,
      -1,    -1,    -1,    -1,    -1,   513,   514,    -1,   516,    -1,
      -1,   519,    -1,    -1,   522,   523,    -1,    -1,    -1,   527,
      -1,    -1,   530,   531,    -1,   533,   534,   535,   536,   537,
     538,    -1,    -1,   541,   542,   543,   544,    -1,   546,   547,
      -1,   549,    -1,   551,   552,   553,   554,    -1,    -1,   557,
     558,    -1,   560,   561,   562,   563,    -1,    -1,    -1,    -1,
      -1,   569,   570,   571,    -1,    -1,    -1,   575,   576,   577,
     578,    -1,   580,   581,    -1,   583,   584,    -1,   586,   587,
      -1,    -1,   590,    -1,    -1,   593,    -1,   595,    -1,   597,
     598,   599,    -1,    -1,    -1,    -1,    -1,    -1,   606,    -1,
      -1,   609,    -1,    -1,    -1,   613,   614,   615,   616,   617,
     618,    -1,    -1,    -1,    -1,    -1,    -1,   625,   626,    -1,
     628,   629,   630,    -1,    -1,   633,    -1,    -1,    -1,    -1,
       5,    -1,     7,     8,     9,    10,    11,    -1,   646,    14,
      -1,    -1,    -1,    18,   652,   653,    21,    -1,    23,    24,
      25,    26,    27,    28,    29,    30,    -1,    32,    -1,    -1,
      -1,    36,    -1,    -1,    -1,    40,    -1,    -1,    43,    44,
      45,    -1,    47,    -1,    49,    50,    -1,    -1,    53,    -1,
      -1,    56,    57,    -1,    59,    60,    -1,    62,    63,    -1,
      65,    66,    67,    68,    69,    70,    71,    -1,    73,    74,
      75,    76,    77,    78,    79,    -1,    81,    82,    83,    84,
      85,    86,    87,    88,    -1,    90,    91,    -1,    93,    94,
      95,    96,    97,    -1,    99,    -1,    -1,   102,    -1,    -1,
     105,    -1,   107,    -1,   109,    -1,   111,    -1,    -1,    -1,
     115,   116,   117,    -1,    -1,   120,    -1,    -1,    -1,    -1,
     125,   126,    -1,    -1,    -1,    -1,   131,    -1,   133,    -1,
      -1,    -1,   137,    -1,   139,   140,   141,   142,   143,    -1,
      -1,    -1,   147,    -1,    -1,   150,   151,   152,    -1,    -1,
      -1,   156,    -1,   158,   159,    -1,   161,   162,   163,    -1,
      -1,   166,   167,    -1,   169,   170,   171,   172,   173,   174,
     175,    -1,    -1,   178,   179,   180,    -1,    -1,   183,   184,
      -1,   186,   187,   188,    -1,    -1,   191,    -1,    -1,    -1,
     195,    -1,   197,    -1,   199,    -1,   201,   202,   203,   204,
     205,    -1,   207,    -1,   209,    -1,    -1,    -1,   213,   214,
     215,    -1,   217,    -1,    -1,    -1,   221,   222,    -1,    -1,
      -1,   226,   227,   228,   229,    -1,    -1,   232,   233,   234,
      -1,   236,    -1,   238,    -1,    -1,    -1,    -1,   243,   244,
      -1,    -1,    -1,   248,    -1,   250,   251,    -1,   253,   254,
      -1,    -1,    -1,   258,    -1,    -1,   261,   262,   263,    -1,
      -1,   266,    -1,    -1,   269,   270,    -1,    -1,    -1,    -1,
      -1,   276,   277,    -1,   279,    -1,   281,    -1,   283,   284,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,    -1,   309,   310,   311,   312,    -1,   314,
     315,   316,   317,    -1,   319,   320,    -1,    -1,    -1,    -1,
     325,   326,   327,   328,   329,   330,    -1,    -1,   333,   334,
      -1,   336,    -1,   338,    -1,   340,   341,   342,   343,   344,
     345,   346,   347,   348,    -1,    -1,   351,   352,    -1,    -1,
     355,   356,   357,   358,    -1,    -1,    -1,   362,   363,    -1,
      -1,    -1,   367,    -1,   369,   370,   371,    -1,   373,   374,
     375,   376,    -1,   378,   379,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   388,   389,   390,    -1,    -1,   393,    -1,
     395,    -1,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,    -1,    -1,   409,   410,   411,    -1,   413,    -1,
     415,   416,   417,   418,   419,    -1,   421,   422,   423,    -1,
      -1,   426,    -1,    -1,    -1,   430,   431,   432,   433,   434,
      -1,    -1,   437,   438,   439,   440,   441,    -1,   443,   444,
      -1,   446,   447,   448,    -1,    -1,   451,    -1,   453,    -1,
     455,   456,    -1,   458,   459,   460,    -1,    -1,    -1,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
      -1,   476,   477,    -1,    -1,    -1,   481,   482,   483,   484,
      -1,    -1,    -1,   488,    -1,    -1,    -1,   492,    -1,   494,
     495,   496,   497,   498,   499,    -1,   501,   502,   503,   504,
     505,   506,    -1,    -1,    -1,    -1,    -1,    -1,   513,   514,
      -1,   516,    -1,    -1,   519,    -1,    -1,   522,   523,    -1,
      -1,    -1,   527,    -1,    -1,   530,   531,    -1,   533,   534,
     535,   536,   537,   538,    -1,    -1,   541,   542,   543,   544,
      -1,   546,   547,    -1,   549,    -1,   551,   552,   553,   554,
      -1,    -1,   557,   558,    -1,   560,   561,   562,   563,    -1,
      -1,    -1,    -1,    -1,   569,   570,   571,    -1,    -1,    -1,
     575,   576,   577,   578,    -1,   580,   581,    -1,   583,   584,
      -1,   586,   587,    -1,    -1,   590,    -1,    -1,   593,    -1,
     595,    -1,   597,   598,   599,    -1,    -1,    -1,    -1,    -1,
      -1,   606,    -1,    -1,   609,    -1,    -1,    -1,   613,   614,
     615,   616,   617,   618,    -1,    -1,    -1,    -1,    -1,    -1,
     625,   626,    -1,   628,   629,   630,    -1,    -1,   633,    -1,
      -1,    -1,    -1,     5,    -1,     7,     8,     9,    10,    11,
     645,    -1,    14,    -1,    -1,    -1,    18,    -1,   653,    21,
      -1,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      32,    -1,    -1,    -1,    36,    -1,    -1,    -1,    40,    -1,
      -1,    43,    44,    45,    -1,    47,    -1,    49,    50,    -1,
      -1,    53,    -1,    -1,    56,    57,    -1,    59,    60,    -1,
      62,    63,    -1,    65,    66,    67,    68,    69,    70,    71,
      -1,    73,    74,    75,    76,    77,    78,    79,    -1,    81,
      82,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      -1,    93,    94,    95,    96,    97,    -1,    99,    -1,    -1,
     102,    -1,    -1,   105,    -1,   107,    -1,   109,    -1,   111,
      -1,    -1,    -1,   115,   116,   117,    -1,    -1,   120,    -1,
      -1,    -1,    -1,   125,   126,    -1,    -1,    -1,    -1,   131,
      -1,   133,    -1,    -1,    -1,   137,    -1,   139,   140,   141,
     142,   143,    -1,    -1,    -1,   147,    -1,    -1,   150,   151,
     152,    -1,    -1,    -1,   156,    -1,   158,   159,    -1,   161,
     162,   163,    -1,    -1,   166,   167,    -1,   169,   170,   171,
     172,   173,   174,   175,    -1,    -1,   178,   179,   180,    -1,
      -1,   183,   184,    -1,   186,   187,   188,    -1,    -1,   191,
      -1,    -1,    -1,   195,    -1,   197,    -1,   199,    -1,   201,
     202,   203,   204,   205,    -1,   207,    -1,   209,    -1,    -1,
      -1,   213,   214,   215,    -1,   217,    -1,    -1,    -1,   221,
     222,    -1,    -1,    -1,   226,   227,   228,   229,    -1,    -1,
     232,   233,   234,    -1,   236,    -1,   238,    -1,    -1,    -1,
      -1,   243,   244,    -1,   246,    -1,   248,    -1,   250,   251,
      -1,   253,   254,    -1,    -1,    -1,   258,    -1,    -1,   261,
     262,   263,    -1,    -1,   266,    -1,    -1,   269,   270,    -1,
      -1,    -1,    -1,    -1,   276,   277,    -1,   279,    -1,   281,
      -1,   283,   284,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,    -1,   309,   310,   311,
     312,    -1,   314,   315,   316,   317,    -1,   319,   320,    -1,
      -1,    -1,    -1,   325,   326,   327,   328,   329,   330,    -1,
      -1,   333,   334,    -1,   336,    -1,   338,    -1,   340,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,    -1,   351,
     352,    -1,    -1,   355,   356,   357,   358,    -1,    -1,    -1,
     362,   363,    -1,    -1,    -1,   367,    -1,   369,   370,   371,
      -1,   373,   374,   375,   376,    -1,   378,   379,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   388,   389,   390,    -1,
      -1,   393,    -1,   395,    -1,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,    -1,    -1,   409,   410,   411,
      -1,   413,    -1,   415,   416,   417,   418,   419,    -1,   421,
     422,   423,    -1,    -1,   426,    -1,    -1,    -1,   430,   431,
     432,   433,   434,    -1,    -1,   437,   438,   439,   440,   441,
      -1,   443,   444,    -1,   446,   447,   448,    -1,    -1,   451,
      -1,   453,    -1,   455,   456,    -1,   458,   459,   460,    -1,
      -1,    -1,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,    -1,   476,   477,    -1,    -1,    -1,   481,
     482,   483,   484,    -1,    -1,    -1,   488,    -1,    -1,    -1,
     492,    -1,   494,   495,   496,   497,   498,   499,    -1,   501,
     502,   503,   504,   505,   506,    -1,    -1,    -1,    -1,    -1,
      -1,   513,   514,    -1,   516,    -1,    -1,   519,    -1,    -1,
     522,   523,    -1,    -1,    -1,   527,    -1,    -1,   530,   531,
      -1,   533,   534,   535,   536,   537,   538,    -1,    -1,   541,
     542,   543,   544,    -1,   546,   547,    -1,   549,    -1,   551,
     552,   553,   554,    -1,    -1,   557,   558,    -1,   560,   561,
     562,   563,    -1,    -1,    -1,    -1,    -1,   569,   570,   571,
      -1,    -1,    -1,   575,   576,   577,   578,    -1,   580,   581,
      -1,   583,   584,    -1,   586,   587,    -1,    -1,   590,    -1,
      -1,   593,    -1,   595,    -1,   597,   598,   599,    -1,    -1,
      -1,    -1,    -1,    -1,   606,    -1,    -1,   609,    -1,    -1,
      -1,   613,   614,   615,   616,   617,   618,    -1,    -1,    -1,
      -1,    -1,    -1,   625,   626,    -1,   628,   629,   630,    -1,
      -1,   633,    -1,    -1,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      21,   653,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    32,    -1,    -1,    -1,    36,    -1,    -1,    -1,    40,
      -1,    -1,    43,    44,    45,    -1,    47,    -1,    49,    50,
      -1,    -1,    53,    -1,    -1,    56,    57,    -1,    59,    60,
      -1,    62,    63,    -1,    65,    66,    67,    68,    69,    70,
      71,    -1,    73,    74,    75,    76,    77,    78,    79,    -1,
      81,    82,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    -1,    93,    94,    95,    96,    97,    -1,    99,    -1,
      -1,   102,    -1,    -1,   105,    -1,   107,    -1,   109,    -1,
     111,    -1,    -1,    -1,   115,   116,   117,    -1,    -1,   120,
      -1,    -1,    -1,    -1,   125,   126,    -1,    -1,    -1,    -1,
     131,    -1,   133,    -1,    -1,    -1,   137,    -1,   139,   140,
     141,   142,   143,    -1,    -1,    -1,   147,    -1,    -1,   150,
     151,   152,    -1,    -1,    -1,   156,    -1,   158,   159,    -1,
     161,   162,   163,    -1,    -1,   166,   167,    -1,   169,   170,
     171,   172,   173,   174,   175,    -1,    -1,   178,   179,   180,
      -1,    -1,   183,   184,    -1,   186,   187,   188,    -1,    -1,
     191,    -1,    -1,    -1,   195,    -1,   197,    -1,   199,    -1,
     201,   202,   203,   204,   205,    -1,   207,    -1,   209,    -1,
      -1,    -1,   213,   214,   215,    -1,   217,    -1,    -1,    -1,
     221,   222,    -1,    -1,    -1,   226,   227,   228,   229,    -1,
      -1,   232,   233,   234,    -1,   236,    -1,   238,    -1,    -1,
      -1,    -1,   243,   244,    -1,    -1,    -1,   248,    -1,   250,
     251,    -1,   253,   254,    -1,    -1,    -1,   258,    -1,    -1,
     261,   262,   263,    -1,    -1,   266,    -1,    -1,   269,   270,
      -1,    -1,    -1,    -1,    -1,   276,   277,    -1,   279,    -1,
     281,    -1,   283,   284,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,    -1,   309,   310,
     311,   312,    -1,   314,   315,   316,   317,    -1,   319,   320,
      -1,    -1,    -1,    -1,   325,   326,   327,   328,   329,   330,
      -1,    -1,   333,   334,    -1,   336,    -1,   338,    -1,   340,
     341,   342,   343,   344,   345,   346,   347,   348,    -1,    -1,
     351,   352,    -1,    -1,   355,   356,   357,   358,    -1,    -1,
      -1,   362,   363,    -1,    -1,    -1,   367,    -1,   369,   370,
     371,    -1,   373,   374,   375,   376,    -1,   378,   379,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   388,   389,   390,
      -1,    -1,   393,    -1,   395,    -1,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,    -1,    -1,   409,   410,
     411,    -1,   413,    -1,   415,   416,   417,   418,   419,    -1,
     421,   422,   423,    -1,    -1,   426,    -1,    -1,    -1,   430,
     431,   432,   433,   434,    -1,    -1,   437,   438,   439,   440,
     441,    -1,   443,   444,    -1,   446,   447,   448,    -1,    -1,
     451,    -1,   453,    -1,   455,   456,    -1,   458,   459,   460,
      -1,    -1,    -1,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,    -1,   476,   477,    -1,    -1,    -1,
     481,   482,   483,   484,    -1,    -1,    -1,   488,    -1,    -1,
      -1,   492,    -1,   494,   495,   496,   497,   498,   499,    -1,
     501,   502,   503,   504,   505,   506,    -1,    -1,    -1,    -1,
      -1,    -1,   513,   514,    -1,   516,    -1,    -1,   519,    -1,
      -1,   522,   523,    -1,    -1,    -1,   527,    -1,    -1,   530,
     531,    -1,   533,   534,   535,   536,   537,   538,    -1,    -1,
     541,   542,   543,   544,    -1,   546,   547,    -1,   549,    -1,
     551,   552,   553,   554,    -1,    -1,   557,   558,    -1,   560,
     561,   562,   563,    -1,    -1,    -1,    -1,    -1,   569,   570,
     571,    -1,    -1,    -1,   575,   576,   577,   578,    -1,   580,
     581,    -1,   583,   584,    -1,   586,   587,    -1,    -1,   590,
      -1,    -1,   593,    -1,   595,    -1,   597,   598,   599,    -1,
      -1,    -1,    -1,    -1,    -1,   606,    -1,    -1,   609,    -1,
      -1,    -1,   613,   614,   615,   616,   617,   618,    -1,    -1,
      -1,    -1,    -1,    -1,   625,   626,    -1,   628,   629,   630,
      -1,    -1,   633,    -1,    -1,    -1,    -1,    -1,     5,   640,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,   653,    -1,    21,    -1,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    32,    -1,    -1,    -1,    36,
      -1,    -1,    -1,    40,    -1,    -1,    43,    44,    45,    -1,
      47,    -1,    49,    50,    -1,    -1,    53,    -1,    -1,    56,
      57,    -1,    59,    60,    -1,    62,    63,    -1,    65,    66,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      77,    78,    79,    -1,    81,    82,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    -1,    93,    94,    95,    96,
      97,    -1,    99,    -1,    -1,   102,    -1,    -1,   105,    -1,
     107,    -1,   109,    -1,   111,    -1,    -1,    -1,   115,   116,
     117,    -1,    -1,   120,    -1,    -1,    -1,    -1,   125,   126,
      -1,    -1,    -1,    -1,   131,    -1,   133,    -1,    -1,    -1,
     137,    -1,   139,   140,   141,   142,   143,    -1,    -1,    -1,
     147,    -1,    -1,   150,   151,   152,    -1,    -1,    -1,   156,
      -1,   158,   159,    -1,   161,   162,   163,    -1,    -1,   166,
     167,    -1,   169,   170,   171,   172,   173,   174,   175,    -1,
      -1,   178,   179,   180,    -1,    -1,   183,   184,    -1,   186,
     187,   188,    -1,    -1,   191,    -1,    -1,    -1,   195,    -1,
     197,    -1,   199,    -1,   201,   202,   203,   204,   205,    -1,
     207,    -1,   209,    -1,    -1,    -1,   213,   214,   215,    -1,
     217,    -1,    -1,    -1,   221,   222,    -1,    -1,    -1,   226,
     227,   228,   229,    -1,    -1,   232,   233,   234,    -1,   236,
      -1,   238,    -1,    -1,    -1,    -1,   243,   244,    -1,    -1,
      -1,   248,    -1,   250,   251,    -1,   253,   254,    -1,    -1,
      -1,   258,    -1,    -1,   261,   262,   263,    -1,    -1,   266,
      -1,    -1,   269,   270,    -1,    -1,    -1,    -1,    -1,   276,
     277,    -1,   279,    -1,   281,    -1,   283,   284,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,    -1,   309,   310,   311,   312,    -1,   314,   315,   316,
     317,    -1,   319,   320,    -1,    -1,    -1,    -1,   325,   326,
     327,   328,   329,   330,    -1,    -1,   333,   334,    -1,   336,
      -1,   338,    -1,   340,   341,   342,   343,   344,   345,   346,
     347,   348,    -1,    -1,   351,   352,    -1,    -1,   355,   356,
     357,   358,    -1,    -1,    -1,   362,   363,    -1,    -1,    -1,
     367,    -1,   369,   370,   371,    -1,   373,   374,   375,   376,
      -1,   378,   379,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   388,   389,   390,    -1,    -1,   393,    -1,   395,    -1,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
      -1,    -1,   409,   410,   411,    -1,   413,    -1,   415,   416,
     417,   418,   419,    -1,   421,   422,   423,    -1,    -1,   426,
      -1,    -1,    -1,   430,   431,   432,   433,   434,    -1,    -1,
     437,   438,   439,   440,   441,    -1,   443,   444,    -1,   446,
     447,   448,    -1,    -1,   451,    -1,   453,    -1,   455,   456,
      -1,   458,   459,   460,    -1,    -1,    -1,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,    -1,   476,
     477,    -1,    -1,    -1,   481,   482,   483,   484,    -1,    -1,
      -1,   488,    -1,    -1,    -1,   492,    -1,   494,   495,   496,
     497,   498,   499,    -1,   501,   502,   503,   504,   505,   506,
      -1,    -1,    -1,    -1,    -1,    -1,   513,   514,    -1,   516,
      -1,    -1,   519,    -1,    -1,   522,   523,    -1,    -1,    -1,
     527,    -1,    -1,   530,   531,    -1,   533,   534,   535,   536,
     537,   538,    -1,    -1,   541,   542,   543,   544,    -1,   546,
     547,    -1,   549,    -1,   551,   552,   553,   554,    -1,    -1,
     557,   558,    -1,   560,   561,   562,   563,    -1,    -1,    -1,
      -1,    -1,   569,   570,   571,    -1,    -1,    -1,   575,   576,
     577,   578,    -1,   580,   581,    -1,   583,   584,    -1,   586,
     587,    -1,    -1,   590,    -1,    -1,   593,    -1,   595,    -1,
     597,   598,   599,    -1,    -1,    -1,    -1,    -1,    -1,   606,
      -1,    -1,   609,    -1,    -1,    -1,   613,   614,   615,   616,
     617,   618,    -1,    -1,    -1,    -1,    -1,    -1,   625,   626,
      -1,   628,   629,   630,    -1,    -1,   633,    -1,    -1,    -1,
      -1,     5,    -1,     7,     8,     9,    10,    11,   645,    -1,
      14,    -1,    -1,    -1,    18,    -1,   653,    21,    -1,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    -1,
      -1,    -1,    36,    -1,    -1,    -1,    40,    -1,    -1,    43,
      44,    45,    -1,    47,    -1,    49,    50,    -1,    -1,    53,
      -1,    -1,    56,    57,    -1,    59,    60,    -1,    62,    63,
      -1,    65,    66,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    78,    79,    -1,    81,    82,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    -1,    93,
      94,    95,    96,    97,    -1,    99,    -1,    -1,   102,    -1,
      -1,   105,    -1,   107,    -1,   109,    -1,   111,    -1,    -1,
      -1,   115,   116,   117,    -1,    -1,   120,    -1,    -1,    -1,
      -1,   125,   126,    -1,    -1,    -1,    -1,   131,    -1,   133,
      -1,    -1,    -1,   137,    -1,   139,   140,   141,   142,   143,
      -1,    -1,    -1,   147,    -1,    -1,   150,   151,   152,    -1,
      -1,    -1,   156,    -1,   158,   159,    -1,   161,   162,   163,
      -1,    -1,   166,   167,    -1,   169,   170,   171,   172,   173,
     174,   175,    -1,    -1,   178,   179,   180,    -1,    -1,   183,
     184,    -1,   186,   187,   188,    -1,    -1,   191,    -1,    -1,
      -1,   195,    -1,   197,    -1,   199,    -1,   201,   202,   203,
     204,   205,    -1,   207,    -1,   209,    -1,    -1,    -1,   213,
     214,   215,    -1,   217,    -1,    -1,    -1,   221,   222,    -1,
      -1,    -1,   226,   227,   228,   229,    -1,    -1,   232,   233,
     234,    -1,   236,    -1,   238,    -1,    -1,    -1,    -1,   243,
     244,    -1,    -1,    -1,   248,    -1,   250,   251,    -1,   253,
     254,    -1,    -1,    -1,   258,    -1,    -1,   261,   262,   263,
      -1,    -1,   266,    -1,    -1,   269,   270,    -1,    -1,    -1,
      -1,    -1,   276,   277,    -1,   279,    -1,   281,    -1,   283,
     284,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,    -1,   309,   310,   311,   312,    -1,
     314,   315,   316,   317,    -1,   319,   320,    -1,    -1,    -1,
      -1,   325,   326,   327,   328,   329,   330,    -1,    -1,   333,
     334,    -1,   336,    -1,   338,    -1,   340,   341,   342,   343,
     344,   345,   346,   347,   348,    -1,    -1,   351,   352,    -1,
      -1,   355,   356,   357,   358,    -1,    -1,    -1,   362,   363,
      -1,    -1,    -1,   367,    -1,   369,   370,   371,    -1,   373,
     374,   375,   376,    -1,   378,   379,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   388,   389,   390,    -1,    -1,   393,
      -1,   395,    -1,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,    -1,    -1,   409,   410,   411,    -1,   413,
      -1,   415,   416,   417,   418,   419,    -1,   421,   422,   423,
      -1,    -1,   426,    -1,    -1,    -1,   430,   431,   432,   433,
     434,    -1,    -1,   437,   438,   439,   440,   441,    -1,   443,
     444,    -1,   446,   447,   448,    -1,    -1,   451,    -1,   453,
      -1,   455,   456,    -1,   458,   459,   460,    -1,    -1,    -1,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,    -1,   476,   477,    -1,    -1,    -1,   481,   482,   483,
     484,    -1,    -1,    -1,   488,    -1,    -1,    -1,   492,    -1,
     494,   495,   496,   497,   498,   499,    -1,   501,   502,   503,
     504,   505,   506,    -1,    -1,    -1,    -1,    -1,    -1,   513,
     514,    -1,   516,    -1,    -1,   519,    -1,    -1,   522,   523,
      -1,    -1,    -1,   527,    -1,    -1,   530,   531,    -1,   533,
     534,   535,   536,   537,   538,    -1,    -1,   541,   542,   543,
     544,    -1,   546,   547,    -1,   549,    -1,   551,   552,   553,
     554,    -1,    -1,   557,   558,    -1,   560,   561,   562,   563,
      -1,    -1,    -1,    -1,    -1,   569,   570,   571,    -1,    -1,
      -1,   575,   576,   577,   578,    -1,   580,   581,    -1,   583,
     584,    -1,   586,   587,    -1,    -1,   590,    -1,    -1,   593,
      -1,   595,    -1,   597,   598,   599,    -1,    -1,    -1,    -1,
      -1,    -1,   606,    -1,    -1,   609,    -1,    -1,    -1,   613,
     614,   615,   616,   617,   618,    -1,    -1,    -1,    -1,    -1,
      -1,   625,   626,    -1,   628,   629,   630,    -1,    -1,   633,
      -1,    -1,    -1,    -1,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,   652,   653,
      21,    -1,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    32,    -1,    -1,    -1,    36,    -1,    -1,    -1,    40,
      -1,    -1,    43,    44,    45,    -1,    47,    -1,    49,    50,
      -1,    -1,    53,    -1,    -1,    56,    57,    -1,    59,    60,
      -1,    62,    63,    -1,    65,    66,    67,    68,    69,    70,
      71,    -1,    73,    74,    75,    76,    77,    78,    79,    -1,
      81,    82,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    -1,    93,    94,    95,    96,    97,    -1,    99,    -1,
      -1,   102,    -1,    -1,   105,    -1,   107,    -1,   109,    -1,
     111,    -1,    -1,    -1,   115,   116,   117,    -1,    -1,   120,
      -1,    -1,    -1,    -1,   125,   126,    -1,    -1,    -1,    -1,
     131,    -1,   133,    -1,    -1,    -1,   137,    -1,   139,   140,
     141,   142,   143,    -1,    -1,    -1,   147,    -1,    -1,   150,
     151,   152,    -1,    -1,    -1,   156,    -1,   158,   159,    -1,
     161,   162,   163,    -1,    -1,   166,   167,    -1,   169,   170,
     171,   172,   173,   174,   175,    -1,    -1,   178,   179,   180,
      -1,    -1,   183,   184,    -1,   186,   187,   188,    -1,    -1,
     191,    -1,    -1,    -1,   195,    -1,   197,    -1,   199,    -1,
     201,   202,   203,   204,   205,    -1,   207,    -1,   209,    -1,
      -1,    -1,   213,   214,   215,    -1,   217,    -1,    -1,    -1,
     221,   222,    -1,    -1,    -1,   226,   227,   228,   229,    -1,
      -1,   232,   233,   234,    -1,   236,    -1,   238,    -1,    -1,
      -1,    -1,   243,   244,    -1,    -1,    -1,   248,    -1,   250,
     251,    -1,   253,   254,    -1,    -1,    -1,   258,    -1,    -1,
     261,   262,   263,    -1,    -1,   266,    -1,    -1,   269,   270,
      -1,    -1,    -1,    -1,    -1,   276,   277,    -1,   279,    -1,
     281,    -1,   283,   284,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,    -1,   309,   310,
     311,   312,    -1,   314,   315,   316,   317,    -1,   319,   320,
      -1,    -1,    -1,    -1,   325,   326,   327,   328,   329,   330,
      -1,    -1,   333,   334,    -1,   336,    -1,   338,    -1,   340,
     341,   342,   343,   344,   345,   346,   347,   348,    -1,    -1,
     351,   352,    -1,    -1,   355,   356,   357,   358,    -1,    -1,
      -1,   362,   363,    -1,    -1,    -1,   367,    -1,   369,   370,
     371,    -1,   373,   374,   375,   376,    -1,   378,   379,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   388,   389,   390,
      -1,    -1,   393,    -1,   395,    -1,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,    -1,    -1,   409,   410,
     411,    -1,   413,    -1,   415,   416,   417,   418,   419,    -1,
     421,   422,   423,    -1,    -1,   426,    -1,    -1,    -1,   430,
     431,   432,   433,   434,    -1,    -1,   437,   438,   439,   440,
     441,    -1,   443,   444,    -1,   446,   447,   448,    -1,    -1,
     451,    -1,   453,    -1,   455,   456,    -1,   458,   459,   460,
      -1,    -1,    -1,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,    -1,   476,   477,    -1,    -1,    -1,
     481,   482,   483,   484,    -1,    -1,    -1,   488,    -1,    -1,
      -1,   492,    -1,   494,   495,   496,   497,   498,   499,    -1,
     501,   502,   503,   504,   505,   506,    -1,    -1,    -1,    -1,
      -1,    -1,   513,   514,    -1,   516,    -1,    -1,   519,    -1,
      -1,   522,   523,    -1,    -1,    -1,   527,    -1,    -1,   530,
     531,    -1,   533,   534,   535,   536,   537,   538,    -1,    -1,
     541,   542,   543,   544,    -1,   546,   547,    -1,   549,    -1,
     551,   552,   553,   554,    -1,    -1,   557,   558,    -1,   560,
     561,   562,   563,    -1,    -1,    -1,    -1,    -1,   569,   570,
     571,    -1,    -1,    -1,   575,   576,   577,   578,    -1,   580,
     581,    -1,   583,   584,    -1,   586,   587,    -1,    -1,   590,
      -1,    -1,   593,    -1,   595,    -1,   597,   598,   599,    -1,
      -1,    -1,    -1,    -1,    -1,   606,    -1,    -1,   609,    -1,
      -1,    -1,   613,   614,   615,   616,   617,   618,    -1,    -1,
      -1,    -1,    -1,    -1,   625,   626,    -1,   628,   629,   630,
      -1,    -1,   633,    -1,    -1,     5,    -1,     7,     8,     9,
      10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,
      -1,    21,   653,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    -1,    -1,    -1,    36,    -1,    -1,    -1,
      40,    -1,    -1,    43,    44,    45,    -1,    47,    -1,    49,
      50,    -1,    -1,    53,    -1,    -1,    56,    57,    -1,    59,
      60,    -1,    62,    63,    -1,    65,    66,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    77,    78,    79,
      -1,    81,    82,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    -1,    93,    94,    95,    96,    97,    -1,    99,
      -1,    -1,   102,    -1,    -1,   105,    -1,   107,    -1,   109,
      -1,   111,    -1,    -1,    -1,   115,   116,   117,    -1,    -1,
     120,    -1,    -1,    -1,    -1,   125,   126,    -1,    -1,    -1,
      -1,   131,    -1,   133,    -1,    -1,    -1,   137,    -1,   139,
     140,   141,   142,   143,    -1,    -1,    -1,   147,    -1,    -1,
     150,   151,   152,    -1,    -1,    -1,   156,    -1,   158,   159,
      -1,   161,   162,   163,    -1,    -1,   166,   167,    -1,   169,
     170,   171,   172,   173,   174,   175,    -1,    -1,   178,   179,
     180,    -1,    -1,   183,   184,    -1,   186,   187,   188,    -1,
      -1,   191,    -1,    -1,    -1,   195,    -1,   197,    -1,   199,
      -1,   201,   202,   203,   204,   205,    -1,   207,    -1,   209,
      -1,    -1,    -1,   213,   214,   215,    -1,   217,    -1,    -1,
      -1,   221,   222,    -1,    -1,    -1,   226,   227,   228,   229,
      -1,    -1,   232,   233,   234,    -1,   236,    -1,   238,    -1,
      -1,    -1,    -1,   243,   244,    -1,    -1,    -1,   248,    -1,
     250,   251,    -1,   253,   254,    -1,    -1,    -1,   258,    -1,
      -1,   261,   262,   263,    -1,    -1,   266,    -1,    -1,   269,
     270,    -1,    -1,    -1,    -1,    -1,   276,   277,    -1,   279,
      -1,   281,    -1,   283,   284,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,    -1,   309,
     310,   311,   312,    -1,   314,   315,   316,   317,    -1,   319,
     320,    -1,    -1,    -1,    -1,   325,   326,   327,   328,   329,
     330,    -1,    -1,   333,   334,    -1,   336,    -1,   338,    -1,
     340,   341,   342,   343,   344,   345,   346,   347,   348,    -1,
      -1,   351,   352,    -1,    -1,   355,   356,   357,   358,    -1,
      -1,    -1,   362,   363,    -1,    -1,    -1,   367,    -1,   369,
     370,   371,    -1,   373,   374,   375,   376,    -1,   378,   379,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   388,   389,
     390,    -1,    -1,   393,    -1,   395,    -1,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,    -1,    -1,   409,
     410,   411,    -1,   413,    -1,   415,   416,   417,   418,   419,
      -1,   421,   422,   423,    -1,    -1,   426,    -1,    -1,    -1,
     430,   431,   432,   433,   434,    -1,    -1,   437,   438,   439,
     440,   441,    -1,   443,   444,    -1,   446,   447,   448,    -1,
      -1,   451,    -1,   453,    -1,   455,   456,    -1,   458,   459,
     460,    -1,    -1,    -1,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,    -1,   476,   477,    -1,    -1,
      -1,   481,   482,   483,   484,    -1,    -1,    -1,   488,    -1,
      -1,    -1,   492,    -1,   494,   495,   496,   497,   498,   499,
      -1,   501,   502,   503,   504,   505,   506,    -1,    -1,    -1,
      -1,    -1,    -1,   513,   514,    -1,   516,    -1,    -1,   519,
      -1,    -1,   522,   523,    -1,    -1,    -1,   527,    -1,    -1,
     530,   531,    -1,   533,   534,   535,   536,   537,   538,    -1,
      -1,   541,   542,   543,   544,    -1,   546,   547,    -1,   549,
      -1,   551,   552,   553,   554,    -1,    -1,   557,   558,    -1,
     560,   561,   562,   563,    -1,    -1,    -1,    -1,    -1,   569,
     570,   571,    -1,    -1,    -1,   575,   576,   577,   578,    -1,
     580,   581,    -1,   583,   584,    -1,   586,   587,    -1,    -1,
     590,    -1,    -1,   593,    -1,   595,    -1,   597,   598,   599,
      -1,    -1,    -1,    -1,    -1,    -1,   606,    -1,    -1,   609,
      -1,    -1,    -1,   613,   614,   615,   616,   617,   618,    -1,
      -1,    -1,    -1,    -1,    -1,   625,   626,    -1,   628,   629,
     630,    -1,    -1,   633,    -1,    -1,     5,    -1,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      -1,    -1,    21,   653,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    32,    -1,    -1,    -1,    36,    -1,    -1,
      -1,    40,    -1,    -1,    43,    44,    45,    -1,    47,    -1,
      49,    50,    -1,    -1,    53,    -1,    -1,    56,    57,    -1,
      59,    60,    -1,    62,    63,    -1,    65,    66,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    78,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    -1,    93,    94,    95,    96,    97,    -1,
      99,    -1,    -1,   102,    -1,    -1,   105,    -1,   107,    -1,
     109,    -1,   111,    -1,    -1,    -1,   115,   116,   117,    -1,
      -1,   120,    -1,    -1,    -1,    -1,   125,   126,    -1,    -1,
      -1,    -1,   131,    -1,   133,    -1,    -1,    -1,   137,    -1,
     139,   140,   141,   142,   143,    -1,    -1,    -1,   147,    -1,
      -1,   150,   151,   152,    -1,    -1,    -1,   156,    -1,   158,
     159,    -1,   161,   162,   163,    -1,    -1,   166,   167,    -1,
     169,   170,   171,   172,   173,   174,   175,    -1,    -1,   178,
     179,   180,    -1,    -1,   183,   184,    -1,   186,   187,   188,
      -1,    -1,   191,    -1,    -1,    -1,   195,    -1,   197,    -1,
     199,    -1,   201,   202,   203,   204,   205,    -1,   207,    -1,
     209,    -1,    -1,    -1,   213,   214,   215,    -1,   217,    -1,
      -1,    -1,   221,   222,    -1,    -1,    -1,   226,   227,   228,
     229,    -1,    -1,   232,   233,   234,    -1,   236,    -1,   238,
      -1,    -1,    -1,    -1,   243,   244,    -1,    -1,    -1,   248,
      -1,   250,   251,    -1,   253,   254,    -1,    -1,    -1,   258,
      -1,    -1,   261,   262,   263,    -1,    -1,   266,    -1,    -1,
     269,   270,    -1,    -1,    -1,    -1,    -1,   276,   277,    -1,
     279,    -1,   281,    -1,   283,   284,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,    -1,
     309,   310,   311,   312,    -1,   314,   315,   316,   317,    -1,
     319,   320,    -1,    -1,    -1,    -1,   325,   326,   327,   328,
     329,   330,    -1,    -1,   333,   334,    -1,   336,    -1,   338,
      -1,   340,   341,   342,   343,   344,   345,   346,   347,   348,
      -1,    -1,   351,   352,    -1,    -1,   355,   356,   357,   358,
      -1,    -1,    -1,   362,   363,    -1,    -1,    -1,   367,    -1,
     369,   370,   371,    -1,   373,   374,   375,   376,    -1,   378,
     379,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   388,
     389,   390,    -1,    -1,   393,    -1,   395,    -1,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,    -1,    -1,
     409,   410,   411,    -1,   413,    -1,   415,   416,   417,   418,
     419,    -1,   421,   422,   423,    -1,    -1,   426,    -1,    -1,
      -1,   430,   431,   432,   433,   434,    -1,    -1,   437,   438,
     439,   440,   441,    -1,   443,   444,    -1,   446,   447,   448,
      -1,    -1,   451,    -1,   453,    -1,   455,   456,    -1,   458,
     459,   460,    -1,    -1,    -1,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,    -1,   476,   477,    -1,
      -1,    -1,   481,   482,   483,   484,    -1,    -1,    -1,   488,
      -1,    -1,    -1,   492,    -1,   494,   495,   496,   497,   498,
     499,    -1,   501,   502,   503,   504,   505,   506,    -1,    -1,
      -1,    -1,    -1,    -1,   513,   514,    -1,   516,    -1,    -1,
     519,    -1,    -1,   522,   523,    -1,    -1,    -1,   527,    -1,
      -1,   530,   531,    -1,   533,   534,   535,   536,   537,   538,
      -1,    -1,   541,   542,   543,   544,    -1,   546,   547,    -1,
     549,    -1,   551,   552,   553,   554,    -1,    -1,   557,   558,
      -1,   560,   561,   562,   563,    -1,    -1,    -1,    -1,    -1,
     569,   570,   571,    -1,    -1,    -1,   575,   576,   577,   578,
      -1,   580,   581,    -1,   583,   584,    -1,   586,   587,    -1,
      -1,   590,    -1,    -1,   593,    -1,   595,    -1,   597,   598,
     599,    -1,    -1,    -1,    -1,    -1,    -1,   606,    -1,    -1,
     609,    -1,    -1,    -1,   613,   614,   615,   616,   617,   618,
      -1,    -1,    -1,    -1,    -1,    -1,   625,   626,    -1,   628,
     629,   630,    -1,    -1,   633,    -1,    -1,     5,    -1,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,    -1,    -1,    21,   653,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    32,    -1,    -1,    -1,    36,    -1,
      -1,    -1,    40,    -1,    -1,    43,    44,    45,    -1,    47,
      -1,    49,    50,    -1,    -1,    53,    -1,    -1,    56,    57,
      -1,    59,    60,    -1,    62,    63,    -1,    65,    66,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      78,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    -1,    90,    91,    -1,    93,    94,    95,    96,    97,
      -1,    99,    -1,    -1,   102,    -1,    -1,   105,    -1,   107,
      -1,   109,    -1,   111,    -1,    -1,    -1,   115,   116,   117,
      -1,    -1,   120,    -1,    -1,    -1,    -1,   125,   126,    -1,
      -1,    -1,    -1,   131,    -1,   133,    -1,    -1,    -1,   137,
      -1,   139,   140,   141,   142,   143,    -1,    -1,    -1,   147,
      -1,    -1,   150,   151,   152,    -1,    -1,    -1,   156,    -1,
     158,   159,    -1,   161,   162,   163,    -1,    -1,   166,   167,
      -1,   169,   170,   171,   172,   173,   174,   175,    -1,    -1,
     178,   179,   180,    -1,    -1,   183,   184,    -1,   186,   187,
     188,    -1,    -1,   191,    -1,    -1,    -1,   195,    -1,   197,
      -1,   199,    -1,   201,   202,   203,   204,   205,    -1,   207,
      -1,   209,    -1,    -1,    -1,   213,   214,   215,    -1,   217,
      -1,    -1,    -1,   221,   222,    -1,    -1,    -1,   226,   227,
     228,   229,    -1,    -1,   232,   233,   234,    -1,   236,    -1,
     238,    -1,    -1,    -1,    -1,   243,   244,    -1,    -1,    -1,
     248,    -1,   250,   251,    -1,   253,   254,    -1,    -1,    -1,
     258,    -1,    -1,   261,   262,   263,    -1,    -1,   266,    -1,
      -1,   269,   270,    -1,    -1,    -1,    -1,    -1,   276,   277,
      -1,   279,    -1,   281,    -1,   283,   284,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
      -1,   309,   310,   311,   312,    -1,   314,   315,   316,   317,
      -1,   319,   320,    -1,    -1,    -1,    -1,   325,   326,   327,
     328,   329,   330,    -1,    -1,   333,   334,    -1,   336,    -1,
     338,    -1,   340,   341,   342,   343,   344,   345,   346,   347,
     348,    -1,    -1,   351,   352,    -1,    -1,   355,   356,   357,
     358,    -1,    -1,    -1,   362,   363,    -1,    -1,    -1,   367,
      -1,   369,   370,   371,    -1,   373,   374,   375,   376,    -1,
     378,   379,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     388,   389,   390,    -1,    -1,   393,    -1,   395,    -1,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,    -1,
      -1,   409,   410,   411,    -1,   413,    -1,   415,   416,   417,
     418,   419,    -1,   421,   422,   423,    -1,    -1,   426,    -1,
      -1,    -1,   430,   431,   432,   433,   434,    -1,    -1,   437,
     438,   439,   440,   441,    -1,   443,   444,    -1,   446,   447,
     448,    -1,    -1,   451,    -1,   453,    -1,   455,   456,    -1,
     458,   459,   460,    -1,    -1,    -1,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,    -1,   476,   477,
      -1,    -1,    -1,   481,   482,   483,   484,    -1,    -1,    -1,
     488,    -1,    -1,    -1,   492,    -1,   494,   495,   496,   497,
     498,   499,    -1,   501,   502,   503,   504,   505,   506,    -1,
      -1,    -1,    -1,    -1,    -1,   513,   514,    -1,   516,    -1,
      -1,   519,    -1,    -1,   522,   523,    -1,    -1,    -1,   527,
      -1,    -1,   530,   531,    -1,   533,   534,   535,   536,   537,
     538,    -1,    -1,   541,   542,   543,   544,    -1,   546,   547,
      -1,   549,    -1,   551,   552,   553,   554,    -1,    -1,   557,
     558,    -1,   560,   561,   562,   563,    -1,    -1,    -1,    -1,
      -1,   569,   570,   571,    -1,    -1,    -1,   575,   576,   577,
     578,    -1,   580,   581,    -1,   583,   584,    -1,   586,   587,
      -1,    -1,   590,    -1,    -1,   593,    -1,   595,    -1,   597,
     598,   599,    -1,    -1,    -1,    -1,    -1,    -1,   606,    -1,
      -1,   609,    -1,    -1,    -1,   613,   614,   615,   616,   617,
     618,    -1,    -1,    -1,    -1,    -1,    -1,   625,   626,    -1,
     628,   629,   630,    -1,    -1,   633,    -1,    -1,     5,    -1,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    -1,    -1,    21,   653,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    32,    -1,    -1,    -1,    36,
      -1,    -1,    -1,    40,    -1,    -1,    43,    44,    45,    -1,
      47,    -1,    49,    50,    -1,    -1,    53,    -1,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    -1,    65,    66,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      77,    78,    79,    -1,    81,    82,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    -1,    93,    94,    95,    96,
      97,    -1,    99,    -1,    -1,   102,    -1,    -1,   105,    -1,
     107,    -1,   109,    -1,   111,    -1,    -1,    -1,   115,   116,
     117,    -1,    -1,   120,    -1,    -1,    -1,    -1,   125,   126,
      -1,    -1,    -1,   130,   131,    -1,   133,    -1,    -1,    -1,
     137,    -1,   139,   140,   141,   142,   143,    -1,    -1,    -1,
     147,    -1,    -1,   150,   151,   152,    -1,    -1,    -1,   156,
      -1,   158,   159,    -1,   161,   162,   163,    -1,    -1,   166,
     167,    -1,   169,   170,   171,   172,   173,   174,   175,    -1,
      -1,   178,   179,   180,    -1,    -1,   183,   184,    -1,   186,
     187,   188,    -1,    -1,   191,    -1,    -1,    -1,   195,    -1,
     197,    -1,   199,    -1,   201,   202,   203,   204,   205,    -1,
     207,    -1,   209,    -1,    -1,    -1,   213,   214,   215,    -1,
     217,    -1,    -1,    -1,   221,   222,    -1,    -1,    -1,   226,
     227,   228,   229,    -1,    -1,   232,   233,   234,    -1,   236,
      -1,   238,    -1,    -1,    -1,    -1,   243,   244,    -1,    -1,
      -1,   248,    -1,   250,   251,    -1,   253,   254,    -1,    -1,
      -1,   258,    -1,    -1,   261,   262,   263,    -1,    -1,   266,
      -1,    -1,   269,   270,    -1,    -1,    -1,    -1,    -1,   276,
     277,    -1,   279,    -1,   281,    -1,   283,   284,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,    -1,   309,   310,   311,   312,    -1,   314,   315,   316,
     317,    -1,   319,   320,    -1,    -1,    -1,    -1,   325,   326,
     327,   328,   329,   330,    -1,    -1,   333,   334,    -1,   336,
      -1,   338,    -1,   340,   341,   342,   343,   344,   345,   346,
     347,   348,    -1,    -1,   351,   352,    -1,    -1,   355,   356,
     357,   358,    -1,    -1,    -1,   362,   363,    -1,    -1,    -1,
     367,    -1,   369,   370,   371,    -1,   373,   374,   375,   376,
      -1,   378,   379,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   388,   389,   390,    -1,    -1,   393,    -1,   395,    -1,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
      -1,    -1,   409,   410,   411,    -1,   413,    -1,   415,   416,
     417,   418,   419,    -1,   421,   422,   423,    -1,    -1,   426,
      -1,    -1,    -1,   430,   431,   432,   433,   434,    -1,    -1,
     437,   438,   439,   440,   441,    -1,   443,   444,    -1,   446,
     447,   448,    -1,    -1,   451,    -1,   453,    -1,   455,   456,
      -1,   458,   459,   460,    -1,    -1,    -1,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,    -1,   476,
     477,    -1,    -1,    -1,   481,   482,   483,   484,    -1,    -1,
      -1,   488,    -1,    -1,    -1,   492,    -1,   494,   495,   496,
     497,   498,   499,    -1,   501,   502,   503,   504,   505,   506,
      -1,    -1,    -1,    -1,    -1,    -1,   513,   514,    -1,   516,
      -1,    -1,   519,    -1,    -1,   522,   523,    -1,    -1,    -1,
     527,    -1,    -1,   530,   531,    -1,   533,   534,   535,   536,
     537,   538,    -1,    -1,   541,   542,   543,   544,    -1,   546,
     547,    -1,   549,    -1,   551,   552,   553,   554,    -1,    -1,
     557,   558,    -1,   560,   561,   562,   563,    -1,    -1,    -1,
      -1,    -1,   569,   570,   571,    -1,    -1,    -1,   575,   576,
     577,   578,    -1,   580,   581,    -1,   583,   584,    -1,   586,
     587,    -1,    -1,   590,    -1,    -1,   593,    -1,   595,    -1,
     597,   598,   599,    -1,    -1,    -1,    -1,    -1,    -1,   606,
      -1,    -1,   609,    -1,    -1,    -1,   613,   614,   615,   616,
     617,   618,    -1,    -1,    -1,    -1,    -1,    -1,   625,   626,
      -1,   628,   629,   630,    -1,    -1,   633,    -1,     5,    -1,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    -1,    -1,    21,   652,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    32,    -1,    -1,    -1,    36,
      -1,    -1,    -1,    40,    -1,    -1,    43,    44,    45,    -1,
      47,    -1,    49,    50,    -1,    -1,    53,    -1,    -1,    56,
      57,    -1,    59,    60,    -1,    62,    63,    -1,    65,    66,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      77,    78,    79,    -1,    81,    82,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    -1,    93,    94,    95,    96,
      97,    -1,    99,    -1,    -1,   102,    -1,    -1,   105,    -1,
     107,    -1,   109,    -1,   111,    -1,    -1,    -1,   115,   116,
     117,    -1,    -1,   120,    -1,    -1,    -1,    -1,   125,   126,
      -1,    -1,    -1,    -1,   131,    -1,   133,    -1,    -1,    -1,
     137,    -1,   139,   140,   141,   142,   143,    -1,    -1,    -1,
     147,    -1,    -1,   150,   151,   152,    -1,    -1,    -1,   156,
      -1,   158,   159,    -1,   161,   162,   163,    -1,    -1,   166,
     167,    -1,   169,   170,   171,   172,   173,   174,   175,    -1,
      -1,   178,   179,   180,    -1,    -1,   183,   184,    -1,   186,
     187,   188,    -1,    -1,   191,    -1,    -1,    -1,   195,    -1,
     197,    -1,   199,    -1,   201,   202,   203,   204,   205,    -1,
     207,    -1,   209,    -1,    -1,    -1,   213,   214,   215,    -1,
     217,    -1,    -1,    -1,   221,   222,    -1,    -1,    -1,   226,
     227,   228,   229,    -1,    -1,   232,   233,   234,    -1,   236,
      -1,   238,    -1,    -1,    -1,    -1,   243,   244,    -1,    -1,
      -1,   248,    -1,   250,   251,    -1,   253,   254,    -1,    -1,
      -1,   258,    -1,    -1,   261,   262,   263,    -1,    -1,   266,
      -1,    -1,   269,   270,   271,    -1,    -1,    -1,    -1,   276,
     277,    -1,   279,    -1,   281,    -1,   283,   284,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,    -1,   309,   310,   311,   312,    -1,   314,   315,   316,
     317,    -1,   319,   320,    -1,    -1,    -1,    -1,   325,   326,
     327,   328,   329,   330,    -1,    -1,   333,   334,    -1,   336,
      -1,   338,    -1,   340,   341,   342,   343,   344,   345,   346,
     347,   348,    -1,    -1,   351,   352,    -1,    -1,   355,   356,
     357,   358,    -1,    -1,    -1,   362,   363,    -1,    -1,    -1,
     367,    -1,   369,   370,   371,    -1,   373,   374,   375,   376,
      -1,   378,   379,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   388,   389,   390,    -1,    -1,   393,    -1,   395,    -1,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
      -1,    -1,   409,   410,   411,    -1,   413,    -1,   415,   416,
     417,   418,   419,    -1,   421,   422,   423,    -1,    -1,   426,
      -1,    -1,    -1,   430,   431,   432,   433,   434,    -1,    -1,
     437,   438,   439,   440,   441,    -1,   443,   444,    -1,   446,
     447,   448,    -1,    -1,   451,    -1,   453,    -1,   455,   456,
      -1,   458,   459,   460,    -1,    -1,    -1,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,    -1,   476,
     477,    -1,    -1,    -1,   481,   482,   483,   484,    -1,    -1,
      -1,   488,    -1,    -1,    -1,   492,    -1,   494,   495,   496,
     497,   498,   499,    -1,   501,   502,   503,   504,   505,   506,
      -1,    -1,    -1,    -1,    -1,    -1,   513,   514,    -1,   516,
      -1,    -1,   519,    -1,    -1,   522,   523,    -1,    -1,    -1,
     527,    -1,    -1,   530,   531,    -1,   533,   534,   535,   536,
     537,   538,    -1,    -1,   541,   542,   543,   544,    -1,   546,
     547,    -1,   549,    -1,   551,   552,   553,   554,    -1,   556,
     557,   558,    -1,   560,   561,   562,   563,    -1,    -1,    -1,
      -1,    -1,   569,   570,   571,    -1,    -1,    -1,   575,   576,
     577,   578,    -1,   580,   581,    -1,   583,   584,    -1,   586,
     587,    -1,    -1,   590,    -1,    -1,   593,    -1,   595,    -1,
     597,   598,   599,    -1,    -1,    -1,    -1,    -1,    -1,   606,
      -1,    -1,   609,    -1,    -1,    -1,   613,   614,   615,   616,
     617,   618,    -1,    -1,    -1,    -1,    -1,    -1,   625,   626,
      -1,   628,   629,   630,    -1,    -1,   633,    -1,     5,    -1,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    -1,    -1,    21,   652,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    32,    -1,    -1,    -1,    36,
      -1,    -1,    -1,    40,    -1,    -1,    43,    44,    45,    -1,
      47,    -1,    49,    50,    -1,    -1,    53,    -1,    -1,    56,
      57,    -1,    59,    60,    -1,    62,    63,    -1,    65,    66,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      77,    78,    79,    -1,    81,    82,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    -1,    93,    94,    95,    96,
      97,    -1,    99,    -1,    -1,   102,    -1,    -1,   105,    -1,
     107,    -1,   109,    -1,   111,    -1,    -1,    -1,   115,   116,
     117,    -1,    -1,   120,    -1,    -1,    -1,    -1,   125,   126,
      -1,    -1,    -1,    -1,   131,    -1,   133,    -1,    -1,    -1,
     137,    -1,   139,   140,   141,   142,   143,    -1,    -1,    -1,
     147,    -1,    -1,   150,   151,   152,    -1,    -1,    -1,   156,
      -1,   158,   159,    -1,   161,   162,   163,    -1,    -1,   166,
     167,    -1,   169,   170,   171,   172,   173,   174,   175,    -1,
      -1,   178,   179,   180,    -1,    -1,   183,   184,    -1,   186,
     187,   188,    -1,    -1,   191,    -1,    -1,    -1,   195,    -1,
     197,    -1,   199,    -1,   201,   202,   203,   204,   205,    -1,
     207,    -1,   209,    -1,    -1,    -1,   213,   214,   215,    -1,
     217,    -1,    -1,    -1,   221,   222,    -1,    -1,    -1,   226,
     227,   228,   229,    -1,    -1,   232,   233,   234,    -1,   236,
      -1,   238,    -1,    -1,    -1,    -1,   243,   244,    -1,    -1,
      -1,   248,    -1,   250,   251,    -1,   253,   254,    -1,    -1,
      -1,   258,    -1,    -1,   261,   262,   263,    -1,    -1,   266,
      -1,    -1,   269,   270,   271,    -1,    -1,    -1,    -1,   276,
     277,    -1,   279,    -1,   281,    -1,   283,   284,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,    -1,   309,   310,   311,   312,    -1,   314,   315,   316,
     317,    -1,   319,   320,    -1,    -1,    -1,    -1,   325,   326,
     327,   328,   329,   330,    -1,    -1,   333,   334,    -1,   336,
      -1,   338,    -1,   340,   341,   342,   343,   344,   345,   346,
     347,   348,    -1,    -1,   351,   352,    -1,    -1,   355,   356,
     357,   358,    -1,    -1,    -1,   362,   363,    -1,    -1,    -1,
     367,    -1,   369,   370,   371,    -1,   373,   374,   375,   376,
      -1,   378,   379,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   388,   389,   390,    -1,    -1,   393,    -1,   395,    -1,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
      -1,    -1,   409,   410,   411,    -1,   413,    -1,   415,   416,
     417,   418,   419,    -1,   421,   422,   423,    -1,    -1,   426,
      -1,    -1,    -1,   430,   431,   432,   433,   434,    -1,    -1,
     437,   438,   439,   440,   441,    -1,   443,   444,    -1,   446,
     447,   448,    -1,    -1,   451,    -1,   453,    -1,   455,   456,
      -1,   458,   459,   460,    -1,    -1,    -1,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,    -1,   476,
     477,    -1,    -1,    -1,   481,   482,   483,   484,    -1,    -1,
      -1,   488,    -1,    -1,    -1,   492,    -1,   494,   495,   496,
     497,   498,   499,    -1,   501,   502,   503,   504,   505,   506,
      -1,    -1,    -1,    -1,    -1,    -1,   513,   514,    -1,   516,
      -1,    -1,   519,    -1,    -1,   522,   523,    -1,    -1,    -1,
     527,    -1,    -1,   530,   531,    -1,   533,   534,   535,   536,
     537,   538,    -1,    -1,   541,   542,   543,   544,    -1,   546,
     547,    -1,   549,    -1,   551,   552,   553,   554,    -1,   556,
     557,   558,    -1,   560,   561,   562,   563,    -1,    -1,    -1,
      -1,    -1,   569,   570,   571,    -1,    -1,    -1,   575,   576,
     577,   578,    -1,   580,   581,    -1,   583,   584,    -1,   586,
     587,    -1,    -1,   590,    -1,    -1,   593,    -1,   595,    -1,
     597,   598,   599,    -1,    -1,    -1,    -1,    -1,    -1,   606,
      -1,    -1,   609,    -1,    -1,    -1,   613,   614,   615,   616,
     617,   618,    -1,    -1,    -1,    -1,    -1,    -1,   625,   626,
      -1,   628,   629,   630,    -1,    -1,   633,    -1,     5,    -1,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    -1,    -1,    21,   652,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    32,    -1,    -1,    -1,    36,
      -1,    -1,    -1,    40,    -1,    -1,    43,    44,    45,    -1,
      47,    -1,    49,    50,    -1,    -1,    53,    -1,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    -1,    65,    66,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      77,    78,    79,    -1,    81,    82,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    -1,    93,    94,    95,    96,
      97,    -1,    99,    -1,    -1,   102,    -1,    -1,   105,    -1,
     107,    -1,   109,    -1,   111,    -1,    -1,    -1,   115,   116,
     117,    -1,    -1,   120,    -1,    -1,    -1,    -1,   125,   126,
      -1,    -1,    -1,   130,   131,    -1,   133,    -1,    -1,    -1,
     137,    -1,   139,   140,   141,   142,   143,    -1,    -1,    -1,
     147,    -1,    -1,   150,   151,   152,    -1,    -1,    -1,   156,
      -1,   158,   159,    -1,   161,   162,   163,    -1,    -1,   166,
     167,    -1,   169,   170,   171,   172,   173,   174,   175,    -1,
      -1,   178,   179,   180,    -1,    -1,   183,   184,    -1,   186,
     187,   188,    -1,    -1,   191,    -1,    -1,    -1,   195,    -1,
     197,    -1,   199,    -1,   201,   202,   203,   204,   205,    -1,
     207,    -1,   209,    -1,    -1,    -1,   213,   214,   215,    -1,
     217,    -1,    -1,    -1,   221,   222,    -1,    -1,    -1,   226,
     227,   228,   229,    -1,    -1,   232,   233,   234,    -1,   236,
      -1,   238,    -1,    -1,    -1,    -1,   243,   244,    -1,    -1,
      -1,   248,    -1,   250,   251,    -1,   253,   254,    -1,    -1,
      -1,   258,    -1,    -1,   261,   262,   263,    -1,    -1,   266,
      -1,    -1,   269,   270,    -1,    -1,    -1,    -1,    -1,   276,
     277,    -1,   279,    -1,   281,    -1,   283,   284,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,    -1,   309,   310,   311,   312,    -1,   314,   315,   316,
     317,    -1,   319,   320,    -1,    -1,    -1,    -1,   325,   326,
     327,   328,   329,   330,    -1,    -1,   333,   334,    -1,   336,
      -1,   338,    -1,   340,   341,   342,   343,   344,   345,   346,
     347,   348,    -1,    -1,   351,   352,    -1,    -1,   355,   356,
     357,   358,    -1,    -1,    -1,   362,   363,    -1,    -1,    -1,
     367,    -1,   369,   370,   371,    -1,   373,   374,   375,   376,
      -1,   378,   379,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   388,   389,   390,    -1,    -1,   393,    -1,   395,    -1,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
      -1,    -1,   409,   410,   411,    -1,   413,    -1,   415,   416,
     417,   418,   419,    -1,   421,   422,   423,    -1,    -1,   426,
      -1,    -1,    -1,   430,   431,   432,   433,   434,    -1,    -1,
     437,   438,   439,   440,   441,    -1,   443,   444,    -1,   446,
     447,   448,    -1,    -1,   451,    -1,   453,    -1,   455,   456,
      -1,   458,   459,   460,    -1,    -1,    -1,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,    -1,   476,
     477,    -1,    -1,    -1,   481,   482,   483,   484,    -1,    -1,
      -1,   488,    -1,    -1,    -1,   492,    -1,   494,   495,   496,
     497,   498,   499,    -1,   501,   502,   503,   504,   505,   506,
      -1,    -1,    -1,    -1,    -1,    -1,   513,   514,    -1,   516,
      -1,    -1,   519,    -1,    -1,   522,   523,    -1,    -1,    -1,
     527,    -1,    -1,   530,   531,    -1,   533,   534,   535,   536,
     537,   538,    -1,    -1,   541,   542,   543,   544,    -1,   546,
     547,    -1,   549,    -1,   551,   552,   553,   554,    -1,    -1,
     557,   558,    -1,   560,   561,   562,   563,    -1,    -1,    -1,
      -1,    -1,   569,   570,   571,    -1,    -1,    -1,   575,   576,
     577,   578,    -1,   580,   581,    -1,   583,   584,    -1,   586,
     587,    -1,    -1,   590,    -1,    -1,   593,    -1,   595,    -1,
     597,   598,   599,    -1,    -1,    -1,    -1,    -1,    -1,   606,
      -1,    -1,   609,    -1,    -1,    -1,   613,   614,   615,   616,
     617,   618,    -1,    -1,    -1,    -1,    -1,    -1,   625,   626,
      -1,   628,   629,   630,    -1,    -1,   633,    -1,     5,    -1,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    -1,    -1,    21,   652,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    32,    -1,    -1,    -1,    36,
      -1,    -1,    -1,    40,    -1,    -1,    43,    44,    45,    -1,
      47,    -1,    49,    50,    -1,    -1,    53,    -1,    -1,    56,
      57,    -1,    59,    60,    -1,    62,    63,    -1,    65,    66,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      77,    78,    79,    -1,    81,    82,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    -1,    93,    94,    95,    96,
      97,    -1,    99,    -1,    -1,   102,    -1,    -1,   105,    -1,
     107,    -1,   109,    -1,   111,    -1,    -1,    -1,   115,   116,
     117,    -1,    -1,   120,    -1,    -1,    -1,    -1,   125,   126,
      -1,    -1,    -1,    -1,   131,    -1,   133,    -1,    -1,    -1,
     137,    -1,   139,   140,   141,   142,   143,    -1,    -1,    -1,
     147,    -1,    -1,   150,   151,   152,    -1,    -1,    -1,   156,
      -1,   158,   159,    -1,   161,   162,   163,    -1,    -1,   166,
     167,    -1,   169,   170,   171,   172,   173,   174,   175,    -1,
      -1,   178,   179,   180,    -1,    -1,   183,   184,    -1,   186,
     187,   188,    -1,    -1,   191,    -1,    -1,    -1,   195,    -1,
     197,    -1,   199,    -1,   201,   202,   203,   204,   205,    -1,
     207,    -1,   209,    -1,    -1,    -1,   213,   214,   215,    -1,
     217,    -1,    -1,    -1,   221,   222,    -1,    -1,    -1,   226,
     227,   228,   229,    -1,    -1,   232,   233,   234,    -1,   236,
      -1,   238,    -1,    -1,    -1,    -1,   243,   244,    -1,    -1,
      -1,   248,    -1,   250,   251,    -1,   253,   254,    -1,    -1,
      -1,   258,    -1,    -1,   261,   262,   263,    -1,    -1,   266,
      -1,    -1,   269,   270,   271,    -1,    -1,    -1,    -1,   276,
     277,    -1,   279,    -1,   281,    -1,   283,   284,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,    -1,   309,   310,   311,   312,    -1,   314,   315,   316,
     317,    -1,   319,   320,    -1,    -1,    -1,    -1,   325,   326,
     327,   328,   329,   330,    -1,    -1,   333,   334,    -1,   336,
      -1,   338,    -1,   340,   341,   342,   343,   344,   345,   346,
     347,   348,    -1,    -1,   351,   352,    -1,    -1,   355,   356,
     357,   358,    -1,    -1,    -1,   362,   363,    -1,    -1,    -1,
     367,    -1,   369,   370,   371,    -1,   373,   374,   375,   376,
      -1,   378,   379,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   388,   389,   390,    -1,    -1,   393,    -1,   395,    -1,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
      -1,    -1,   409,   410,   411,    -1,   413,    -1,   415,   416,
     417,   418,   419,    -1,   421,   422,   423,    -1,    -1,   426,
      -1,    -1,    -1,   430,   431,   432,   433,   434,    -1,    -1,
     437,   438,   439,   440,   441,    -1,   443,   444,    -1,   446,
     447,   448,    -1,    -1,   451,    -1,   453,    -1,   455,   456,
      -1,   458,   459,   460,    -1,    -1,    -1,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,    -1,   476,
     477,    -1,    -1,    -1,   481,   482,   483,   484,    -1,    -1,
      -1,   488,    -1,    -1,    -1,   492,    -1,   494,   495,   496,
     497,   498,   499,    -1,   501,   502,   503,   504,   505,   506,
      -1,    -1,    -1,    -1,    -1,    -1,   513,   514,    -1,   516,
      -1,    -1,   519,    -1,    -1,   522,   523,    -1,    -1,    -1,
     527,    -1,    -1,   530,   531,    -1,   533,   534,   535,   536,
     537,   538,    -1,    -1,   541,   542,   543,   544,    -1,   546,
     547,    -1,   549,    -1,   551,   552,   553,   554,    -1,   556,
     557,   558,    -1,   560,   561,   562,   563,    -1,    -1,    -1,
      -1,    -1,   569,   570,   571,    -1,    -1,    -1,   575,   576,
     577,   578,    -1,   580,   581,    -1,   583,   584,    -1,   586,
     587,    -1,    -1,   590,    -1,    -1,   593,    -1,   595,    -1,
     597,   598,   599,    -1,    -1,    -1,    -1,    -1,    -1,   606,
      -1,    -1,   609,    -1,    -1,    -1,   613,   614,   615,   616,
     617,   618,    -1,    -1,    -1,    -1,    -1,    -1,   625,   626,
      -1,   628,   629,   630,    -1,    -1,   633,    -1,     5,    -1,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    -1,    -1,    21,   652,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    32,    -1,    -1,    -1,    36,
      -1,    -1,    -1,    40,    -1,    -1,    43,    44,    45,    -1,
      47,    -1,    49,    50,    -1,    -1,    53,    -1,    -1,    56,
      57,    -1,    59,    60,    -1,    62,    63,    -1,    65,    66,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      77,    78,    79,    -1,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    -1,    93,    94,    95,    96,
      97,    -1,    99,    -1,    -1,   102,    -1,    -1,   105,    -1,
     107,    -1,   109,    -1,   111,    -1,    -1,    -1,   115,   116,
     117,    -1,    -1,   120,    -1,    -1,    -1,    -1,   125,   126,
      -1,    -1,    -1,    -1,   131,    -1,   133,    -1,    -1,    -1,
     137,    -1,   139,   140,   141,   142,   143,    -1,    -1,    -1,
     147,    -1,    -1,   150,   151,   152,    -1,    -1,    -1,   156,
      -1,   158,   159,    -1,   161,   162,   163,    -1,    -1,   166,
     167,    -1,   169,   170,   171,   172,   173,   174,   175,    -1,
      -1,   178,   179,   180,    -1,    -1,   183,   184,    -1,   186,
     187,   188,    -1,    -1,   191,    -1,    -1,    -1,   195,    -1,
     197,    -1,   199,    -1,   201,   202,   203,   204,   205,    -1,
     207,    -1,   209,    -1,    -1,    -1,   213,   214,   215,    -1,
     217,    -1,    -1,    -1,   221,   222,    -1,    -1,    -1,   226,
     227,   228,   229,    -1,    -1,   232,   233,   234,    -1,   236,
      -1,   238,    -1,    -1,    -1,    -1,   243,   244,    -1,    -1,
      -1,   248,    -1,   250,   251,    -1,   253,   254,    -1,    -1,
      -1,   258,    -1,    -1,   261,   262,   263,    -1,    -1,   266,
      -1,    -1,   269,   270,    -1,    -1,    -1,    -1,    -1,   276,
     277,    -1,   279,    -1,   281,    -1,   283,   284,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,    -1,   309,   310,   311,   312,    -1,   314,   315,   316,
     317,    -1,   319,   320,    -1,    -1,    -1,    -1,   325,   326,
     327,   328,   329,   330,    -1,    -1,   333,   334,    -1,   336,
      -1,   338,    -1,   340,   341,   342,   343,   344,   345,   346,
     347,   348,    -1,    -1,   351,   352,    -1,    -1,   355,   356,
     357,   358,    -1,    -1,    -1,   362,   363,    -1,    -1,    -1,
     367,    -1,   369,   370,   371,    -1,   373,   374,   375,   376,
      -1,   378,   379,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   388,   389,   390,    -1,    -1,   393,    -1,   395,    -1,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
      -1,    -1,   409,   410,   411,    -1,   413,    -1,   415,   416,
     417,   418,   419,    -1,   421,   422,   423,    -1,    -1,   426,
      -1,    -1,    -1,   430,   431,   432,   433,   434,    -1,    -1,
     437,   438,   439,   440,   441,    -1,   443,   444,    -1,   446,
     447,   448,    -1,    -1,   451,    -1,   453,    -1,   455,   456,
      -1,   458,   459,   460,    -1,    -1,    -1,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,    -1,   476,
     477,    -1,    -1,    -1,   481,   482,   483,   484,    -1,    -1,
      -1,   488,    -1,    -1,    -1,   492,    -1,   494,   495,   496,
     497,   498,   499,    -1,   501,   502,   503,   504,   505,   506,
      -1,    -1,    -1,    -1,    -1,    -1,   513,   514,    -1,   516,
      -1,    -1,   519,    -1,    -1,   522,   523,    -1,    -1,    -1,
     527,    -1,    -1,   530,   531,    -1,   533,   534,   535,   536,
     537,   538,    -1,    -1,   541,   542,   543,   544,    -1,   546,
     547,    -1,   549,    -1,   551,   552,   553,   554,    -1,    -1,
     557,   558,    -1,   560,   561,   562,   563,    -1,    -1,    -1,
      -1,    -1,   569,   570,   571,    -1,    -1,    -1,   575,   576,
     577,   578,    -1,   580,   581,    -1,   583,   584,    -1,   586,
     587,    -1,    -1,   590,    -1,    -1,   593,    -1,   595,    -1,
     597,   598,   599,    -1,    -1,    -1,    -1,    -1,    -1,   606,
      -1,    -1,   609,    -1,    -1,    -1,   613,   614,   615,   616,
     617,   618,    -1,    -1,    -1,    -1,    -1,    -1,   625,   626,
      -1,   628,   629,   630,    -1,    -1,   633,    -1,     5,    -1,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    -1,    -1,    21,   652,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    32,    -1,    -1,    -1,    36,
      -1,    -1,    -1,    40,    -1,    -1,    43,    44,    45,    -1,
      47,    -1,    49,    50,    -1,    -1,    53,    -1,    -1,    56,
      57,    -1,    59,    60,    -1,    62,    63,    -1,    65,    66,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      77,    78,    79,    -1,    81,    82,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    -1,    93,    94,    95,    96,
      97,    -1,    99,    -1,    -1,   102,    -1,    -1,   105,    -1,
     107,    -1,   109,    -1,   111,    -1,    -1,    -1,   115,   116,
     117,    -1,    -1,   120,    -1,    -1,    -1,    -1,   125,   126,
      -1,    -1,    -1,    -1,   131,    -1,   133,    -1,    -1,    -1,
     137,    -1,   139,   140,   141,   142,   143,    -1,    -1,    -1,
     147,    -1,    -1,   150,   151,   152,    -1,    -1,    -1,   156,
      -1,   158,   159,    -1,   161,   162,   163,    -1,    -1,   166,
     167,    -1,   169,   170,   171,   172,   173,   174,   175,    -1,
      -1,   178,   179,   180,    -1,    -1,   183,   184,    -1,   186,
     187,   188,    -1,    -1,   191,    -1,    -1,    -1,   195,    -1,
     197,    -1,   199,    -1,   201,   202,   203,   204,   205,    -1,
     207,    -1,   209,    -1,    -1,    -1,   213,   214,   215,    -1,
     217,    -1,    -1,    -1,   221,   222,    -1,    -1,    -1,   226,
     227,   228,   229,    -1,    -1,   232,   233,   234,    -1,   236,
      -1,   238,    -1,    -1,    -1,    -1,   243,   244,    -1,    -1,
      -1,   248,    -1,   250,   251,    -1,   253,   254,    -1,    -1,
      -1,   258,    -1,    -1,   261,   262,   263,    -1,    -1,   266,
      -1,    -1,   269,   270,    -1,    -1,    -1,    -1,    -1,   276,
     277,    -1,   279,    -1,   281,    -1,   283,   284,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,    -1,   309,   310,   311,   312,    -1,   314,   315,   316,
     317,    -1,   319,   320,    -1,    -1,    -1,    -1,   325,   326,
     327,   328,   329,   330,    -1,    -1,   333,   334,    -1,   336,
      -1,   338,    -1,   340,   341,   342,   343,   344,   345,   346,
     347,   348,    -1,    -1,   351,   352,    -1,    -1,   355,   356,
     357,   358,    -1,    -1,    -1,   362,   363,    -1,    -1,    -1,
     367,    -1,   369,   370,   371,    -1,   373,   374,   375,   376,
      -1,   378,   379,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   388,   389,   390,    -1,    -1,   393,    -1,   395,    -1,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
      -1,    -1,   409,   410,   411,    -1,   413,    -1,   415,   416,
     417,   418,   419,    -1,   421,   422,   423,    -1,    -1,   426,
      -1,    -1,    -1,   430,   431,   432,   433,   434,    -1,    -1,
     437,   438,   439,   440,   441,    -1,   443,   444,    -1,   446,
     447,   448,    -1,    -1,   451,    -1,   453,    -1,   455,   456,
      -1,   458,   459,   460,    -1,    -1,    -1,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,    -1,   476,
     477,    -1,    -1,    -1,   481,   482,   483,   484,    -1,    -1,
      -1,   488,    -1,    -1,    -1,   492,    -1,   494,   495,   496,
     497,   498,   499,    -1,   501,   502,   503,   504,   505,   506,
      -1,    -1,    -1,    -1,    -1,    -1,   513,   514,    -1,   516,
      -1,    -1,   519,    -1,    -1,   522,   523,    -1,    -1,    -1,
     527,    -1,    -1,   530,   531,    -1,   533,   534,   535,   536,
     537,   538,    -1,    -1,   541,   542,   543,   544,    -1,   546,
     547,    -1,   549,    -1,   551,   552,   553,   554,    -1,    -1,
     557,   558,    -1,   560,   561,   562,   563,    -1,    -1,    -1,
      -1,    -1,   569,   570,   571,    -1,    -1,    -1,   575,   576,
     577,   578,    -1,   580,   581,    -1,   583,   584,    -1,   586,
     587,    -1,    -1,   590,    -1,    -1,   593,    -1,   595,    -1,
     597,   598,   599,    -1,    -1,    -1,    -1,    -1,    -1,   606,
      -1,    -1,   609,    -1,    -1,    -1,   613,   614,   615,   616,
     617,   618,    -1,    -1,    -1,    -1,    -1,    -1,   625,   626,
      -1,   628,   629,   630,    -1,    -1,   633,    -1,     5,    -1,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    -1,    -1,    -1,   652,    23,    24,    25,    26,
      27,    28,    29,    -1,    -1,    32,    -1,    -1,    -1,    36,
      -1,    -1,    -1,    40,    -1,    -1,    43,    44,    45,    -1,
      47,    -1,    -1,    -1,    -1,    -1,    53,    54,    -1,    56,
      57,    -1,    59,    -1,    -1,    -1,    -1,    -1,    65,    66,
      67,    68,    69,    70,    71,    -1,    73,    74,    -1,    -1,
      -1,    -1,    -1,    -1,    81,    -1,    83,    -1,    85,    86,
      87,    88,    -1,    90,    91,    -1,    93,    94,    95,    -1,
      97,    -1,    99,    -1,    -1,   102,    -1,    -1,   105,    -1,
     107,    -1,   109,    -1,   111,    -1,    -1,    -1,   115,   116,
     117,    -1,    -1,   120,    -1,    -1,    -1,    -1,   125,    -1,
      -1,    -1,    -1,    -1,   131,    -1,   133,    -1,    -1,    -1,
     137,    -1,   139,   140,   141,   142,   143,    -1,    -1,    -1,
      -1,    -1,    -1,   150,   151,   152,    -1,    -1,    -1,   156,
      -1,    -1,   159,    -1,   161,   162,   163,    -1,    -1,   166,
     167,    -1,   169,   170,   171,   172,   173,    -1,    -1,    -1,
      -1,   178,   179,   180,    -1,    -1,   183,   184,   185,   186,
     187,   188,    -1,    -1,    -1,    -1,    -1,    -1,   195,    -1,
     197,    -1,   199,    -1,   201,   202,   203,   204,   205,    -1,
     207,    -1,   209,    -1,    -1,    -1,    -1,   214,   215,    -1,
      -1,    -1,    -1,    -1,    -1,   222,    -1,    -1,    -1,   226,
     227,   228,   229,   230,    -1,   232,   233,   234,    -1,   236,
      -1,   238,    -1,    -1,    -1,    -1,   243,    -1,    -1,    -1,
      -1,   248,    -1,   250,   251,    -1,   253,   254,   255,    -1,
      -1,   258,    -1,    -1,    -1,   262,   263,    -1,    -1,   266,
     267,    -1,   269,   270,    -1,    -1,    -1,    -1,    -1,   276,
     277,    -1,   279,    -1,   281,    -1,   283,   284,    -1,    -1,
      -1,    -1,   289,    -1,    -1,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,    -1,   309,   310,   311,   312,    -1,   314,   315,   316,
     317,    -1,   319,   320,    -1,    -1,    -1,    -1,   325,   326,
     327,   328,   329,   330,    -1,    -1,   333,   334,    -1,   336,
      -1,   338,    -1,   340,   341,   342,   343,   344,   345,   346,
     347,   348,    -1,    -1,   351,   352,    -1,    -1,   355,   356,
     357,   358,    -1,    -1,    -1,    -1,   363,    -1,    -1,    -1,
     367,    -1,   369,   370,   371,    -1,   373,   374,   375,   376,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   389,   390,    -1,    -1,    -1,    -1,   395,    -1,
     397,   398,   399,   400,   401,   402,   403,   404,   405,    -1,
      -1,    -1,    -1,   410,   411,    -1,   413,    -1,   415,   416,
     417,   418,   419,    -1,   421,   422,   423,    -1,    -1,   426,
      -1,    -1,    -1,   430,   431,   432,   433,   434,    -1,    -1,
     437,   438,   439,   440,   441,    -1,   443,    -1,    -1,   446,
      -1,   448,   449,    -1,   451,    -1,    -1,    -1,   455,    -1,
      -1,   458,   459,   460,   461,    -1,    -1,    -1,   465,   466,
     467,   468,   469,   470,   471,    -1,   473,   474,    -1,   476,
      -1,    -1,    -1,    -1,   481,   482,   483,    -1,    -1,    -1,
      -1,   488,    -1,    -1,    -1,   492,    -1,    -1,   495,    -1,
      -1,   498,   499,    -1,   501,    -1,   503,    -1,   505,   506,
      -1,    -1,    -1,    -1,    -1,    -1,   513,   514,    -1,   516,
      -1,    -1,   519,    -1,    -1,   522,    -1,    -1,    -1,    -1,
     527,    -1,    -1,    -1,   531,    -1,   533,   534,   535,   536,
     537,   538,    -1,    -1,   541,   542,   543,   544,    -1,   546,
     547,    -1,   549,    -1,   551,   552,   553,   554,    -1,    -1,
     557,   558,    -1,   560,   561,   562,   563,    -1,    -1,    -1,
      -1,    -1,   569,   570,   571,    -1,    -1,    -1,    -1,   576,
     577,   578,    -1,   580,   581,    -1,   583,   584,    -1,    -1,
      -1,    -1,    -1,   590,    -1,    -1,   593,    -1,    -1,    -1,
     597,   598,   599,    -1,    -1,    -1,    -1,    -1,    -1,   606,
      -1,    -1,   609,    -1,    -1,    -1,   613,   614,   615,   616,
     617,   618,    -1,    -1,   621,    -1,    -1,    -1,   625,    -1,
      -1,   628,    -1,   630,    -1,     5,   633,     7,     8,     9,
      10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,
     647,    21,    -1,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    -1,    -1,    -1,    36,    -1,    -1,    -1,
      40,    -1,    -1,    43,    44,    45,    -1,    47,    -1,    49,
      50,    -1,    -1,    53,    -1,    -1,    56,    57,    -1,    59,
      60,    -1,    62,    63,    -1,    65,    66,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    77,    78,    79,
      -1,    81,    82,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    -1,    93,    94,    95,    96,    97,    -1,    99,
      -1,    -1,   102,    -1,    -1,   105,    -1,   107,   108,   109,
      -1,   111,    -1,    -1,    -1,   115,   116,   117,    -1,    -1,
     120,    -1,    -1,    -1,    -1,   125,   126,    -1,    -1,    -1,
      -1,   131,    -1,   133,    -1,    -1,    -1,   137,    -1,   139,
     140,   141,   142,   143,    -1,    -1,    -1,   147,    -1,    -1,
     150,   151,   152,    -1,    -1,    -1,   156,    -1,   158,   159,
      -1,   161,   162,   163,    -1,    -1,   166,   167,    -1,   169,
     170,   171,   172,   173,   174,   175,    -1,    -1,   178,   179,
     180,    -1,    -1,   183,   184,    -1,   186,   187,   188,    -1,
      -1,   191,    -1,    -1,    -1,   195,    -1,   197,    -1,   199,
      -1,   201,   202,   203,   204,   205,    -1,   207,    -1,   209,
      -1,    -1,    -1,   213,   214,   215,    -1,   217,    -1,    -1,
      -1,   221,   222,    -1,    -1,    -1,   226,   227,   228,   229,
      -1,    -1,   232,   233,   234,    -1,   236,    -1,   238,    -1,
      -1,    -1,    -1,   243,   244,    -1,    -1,    -1,   248,    -1,
     250,   251,    -1,   253,   254,    -1,    -1,    -1,   258,    -1,
      -1,   261,   262,   263,    -1,    -1,   266,    -1,    -1,   269,
     270,   271,    -1,    -1,    -1,    -1,   276,   277,    -1,   279,
      -1,   281,    -1,   283,   284,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,    -1,   309,
     310,   311,   312,    -1,   314,   315,   316,   317,    -1,   319,
     320,    -1,    -1,    -1,    -1,   325,   326,   327,   328,   329,
     330,    -1,    -1,   333,   334,    -1,   336,    -1,   338,    -1,
     340,   341,   342,   343,   344,   345,   346,   347,   348,    -1,
      -1,   351,   352,    -1,    -1,   355,   356,   357,   358,    -1,
      -1,    -1,   362,   363,    -1,    -1,    -1,   367,    -1,   369,
     370,   371,    -1,   373,   374,   375,   376,    -1,   378,   379,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   388,   389,
     390,    -1,    -1,   393,    -1,   395,    -1,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,    -1,    -1,   409,
     410,   411,    -1,   413,    -1,   415,   416,   417,   418,   419,
      -1,   421,   422,   423,    -1,    -1,   426,    -1,    -1,    -1,
     430,   431,   432,   433,   434,    -1,    -1,   437,   438,   439,
     440,   441,    -1,   443,   444,    -1,   446,   447,   448,    -1,
      -1,   451,    -1,   453,    -1,   455,   456,    -1,   458,   459,
     460,    -1,    -1,    -1,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,    -1,   476,   477,    -1,    -1,
      -1,   481,   482,   483,   484,    -1,    -1,    -1,   488,    -1,
      -1,    -1,   492,    -1,   494,   495,   496,   497,   498,   499,
      -1,   501,   502,   503,   504,   505,   506,    -1,    -1,    -1,
      -1,    -1,    -1,   513,   514,    -1,   516,    -1,    -1,   519,
      -1,    -1,   522,   523,    -1,    -1,    -1,   527,    -1,    -1,
     530,   531,    -1,   533,   534,   535,   536,   537,   538,    -1,
      -1,   541,   542,   543,   544,    -1,   546,   547,    -1,   549,
      -1,   551,   552,   553,   554,    -1,   556,   557,   558,    -1,
     560,   561,   562,   563,    -1,    -1,    -1,    -1,    -1,   569,
     570,   571,    -1,    -1,    -1,   575,   576,   577,   578,    -1,
     580,   581,    -1,   583,   584,    -1,   586,   587,    -1,    -1,
     590,    -1,    -1,   593,    -1,   595,    -1,   597,   598,   599,
      -1,    -1,    -1,    -1,    -1,    -1,   606,    -1,    -1,   609,
      -1,    -1,    -1,   613,   614,   615,   616,   617,   618,    -1,
      -1,    -1,    -1,    -1,    -1,   625,   626,    -1,   628,   629,
     630,    -1,    -1,   633,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,   645,    -1,    18,    -1,    -1,
      21,    -1,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    32,    -1,    -1,    -1,    36,    -1,    -1,    -1,    40,
      -1,    -1,    43,    44,    45,    -1,    47,    -1,    49,    50,
      -1,    -1,    53,    -1,    -1,    56,    57,    -1,    59,    60,
      -1,    62,    63,    -1,    65,    66,    67,    68,    69,    70,
      71,    -1,    73,    74,    75,    76,    77,    78,    79,    -1,
      81,    82,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    -1,    93,    94,    95,    96,    97,    -1,    99,    -1,
      -1,   102,    -1,    -1,   105,    -1,   107,    -1,   109,    -1,
     111,    -1,    -1,    -1,   115,   116,   117,    -1,    -1,   120,
      -1,    -1,    -1,    -1,   125,   126,    -1,    -1,    -1,    -1,
     131,    -1,   133,    -1,    -1,    -1,   137,    -1,   139,   140,
     141,   142,   143,    -1,    -1,    -1,   147,    -1,    -1,   150,
     151,   152,    -1,    -1,    -1,   156,    -1,   158,   159,    -1,
     161,   162,   163,    -1,    -1,   166,   167,    -1,   169,   170,
     171,   172,   173,   174,   175,    -1,    -1,   178,   179,   180,
      -1,    -1,   183,   184,    -1,   186,   187,   188,    -1,    -1,
     191,    -1,    -1,    -1,   195,    -1,   197,    -1,   199,    -1,
     201,   202,   203,   204,   205,    -1,   207,    -1,   209,    -1,
      -1,    -1,   213,   214,   215,    -1,   217,    -1,    -1,    -1,
     221,   222,    -1,    -1,    -1,   226,   227,   228,   229,    -1,
      -1,   232,   233,   234,    -1,   236,    -1,   238,    -1,    -1,
      -1,    -1,   243,   244,    -1,    -1,    -1,   248,    -1,   250,
     251,    -1,   253,   254,    -1,    -1,    -1,   258,    -1,    -1,
     261,   262,   263,    -1,    -1,   266,    -1,    -1,   269,   270,
      -1,    -1,    -1,    -1,    -1,   276,   277,    -1,   279,    -1,
     281,    -1,   283,   284,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,    -1,   309,   310,
     311,   312,    -1,   314,   315,   316,   317,    -1,   319,   320,
      -1,    -1,    -1,    -1,   325,   326,   327,   328,   329,   330,
      -1,    -1,   333,   334,    -1,   336,    -1,   338,    -1,   340,
     341,   342,   343,   344,   345,   346,   347,   348,    -1,    -1,
     351,   352,    -1,    -1,   355,   356,   357,   358,    -1,    -1,
      -1,   362,   363,    -1,    -1,    -1,   367,    -1,   369,   370,
     371,    -1,   373,   374,   375,   376,    -1,   378,   379,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   388,   389,   390,
      -1,    -1,   393,    -1,   395,    -1,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,    -1,    -1,   409,   410,
     411,    -1,   413,    -1,   415,   416,   417,   418,   419,    -1,
     421,   422,   423,    -1,    -1,   426,    -1,    -1,    -1,   430,
     431,   432,   433,   434,    -1,    -1,   437,   438,   439,   440,
     441,    -1,   443,   444,    -1,   446,   447,   448,    -1,    -1,
     451,    -1,   453,    -1,   455,   456,    -1,   458,   459,   460,
      -1,    -1,    -1,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,    -1,   476,   477,    -1,    -1,    -1,
     481,   482,   483,   484,    -1,    -1,    -1,   488,    -1,    -1,
      -1,   492,    -1,   494,   495,   496,   497,   498,   499,    -1,
     501,   502,   503,   504,   505,   506,    -1,    -1,    -1,    -1,
      -1,    -1,   513,   514,    -1,   516,    -1,    -1,   519,    -1,
      -1,   522,   523,    -1,    -1,    -1,   527,    -1,    -1,   530,
     531,    -1,   533,   534,   535,   536,   537,   538,    -1,    -1,
     541,   542,   543,   544,    -1,   546,   547,    -1,   549,    -1,
     551,   552,   553,   554,    -1,    -1,   557,   558,    -1,   560,
     561,   562,   563,    -1,    -1,    -1,    -1,    -1,   569,   570,
     571,    -1,    -1,    -1,   575,   576,   577,   578,    -1,   580,
     581,    -1,   583,   584,    -1,   586,   587,    -1,    -1,   590,
      -1,    -1,   593,    -1,   595,    -1,   597,   598,   599,    -1,
      -1,    -1,    -1,    -1,    -1,   606,    -1,    -1,   609,    -1,
      -1,    -1,   613,   614,   615,   616,   617,   618,    -1,    -1,
      -1,    -1,    -1,    -1,   625,   626,    -1,   628,   629,   630,
      -1,     5,   633,     7,     8,     9,    10,    11,    -1,   640,
      14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    -1,
      -1,    -1,    36,    -1,    -1,    -1,    40,    -1,    -1,    43,
      44,    45,    -1,    47,    -1,    49,    50,    -1,    -1,    53,
      -1,    -1,    56,    57,    -1,    59,    60,    -1,    62,    63,
      -1,    65,    66,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    78,    79,    -1,    81,    82,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    -1,    93,
      94,    95,    96,    97,    -1,    99,    -1,    -1,   102,    -1,
      -1,   105,    -1,   107,    -1,   109,    -1,   111,    -1,    -1,
      -1,   115,   116,   117,    -1,    -1,   120,    -1,    -1,    -1,
      -1,   125,   126,    -1,    -1,    -1,    -1,   131,    -1,   133,
      -1,    -1,    -1,   137,    -1,   139,   140,   141,   142,   143,
      -1,    -1,    -1,   147,    -1,    -1,   150,   151,   152,    -1,
      -1,    -1,   156,    -1,   158,   159,    -1,   161,   162,   163,
      -1,    -1,   166,   167,    -1,   169,   170,   171,   172,   173,
     174,   175,    -1,    -1,   178,   179,   180,    -1,    -1,   183,
     184,    -1,   186,   187,   188,    -1,    -1,   191,    -1,    -1,
      -1,   195,    -1,   197,    -1,   199,    -1,   201,   202,   203,
     204,   205,    -1,   207,    -1,   209,    -1,    -1,    -1,   213,
     214,   215,    -1,   217,    -1,    -1,    -1,   221,   222,    -1,
      -1,    -1,   226,   227,   228,   229,    -1,    -1,   232,   233,
     234,    -1,   236,    -1,   238,    -1,    -1,    -1,    -1,   243,
     244,    -1,    -1,    -1,   248,    -1,   250,   251,    -1,   253,
     254,    -1,    -1,    -1,   258,    -1,    -1,   261,   262,   263,
      -1,    -1,   266,    -1,    -1,   269,   270,    -1,    -1,    -1,
      -1,    -1,   276,   277,    -1,   279,    -1,   281,    -1,   283,
     284,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,    -1,   309,   310,   311,   312,    -1,
     314,   315,   316,   317,    -1,   319,   320,    -1,    -1,    -1,
      -1,   325,   326,   327,   328,   329,   330,    -1,    -1,   333,
     334,    -1,   336,    -1,   338,    -1,   340,   341,   342,   343,
     344,   345,   346,   347,   348,    -1,    -1,   351,   352,    -1,
      -1,   355,   356,   357,   358,    -1,    -1,    -1,   362,   363,
      -1,    -1,    -1,   367,    -1,   369,   370,   371,    -1,   373,
     374,   375,   376,    -1,   378,   379,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   388,   389,   390,    -1,    -1,   393,
      -1,   395,    -1,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,    -1,    -1,   409,   410,   411,    -1,   413,
      -1,   415,   416,   417,   418,   419,    -1,   421,   422,   423,
      -1,    -1,   426,    -1,    -1,    -1,   430,   431,   432,   433,
     434,    -1,    -1,   437,   438,   439,   440,   441,    -1,   443,
     444,    -1,   446,   447,   448,    -1,    -1,   451,    -1,   453,
      -1,   455,   456,    -1,   458,   459,   460,    -1,    -1,    -1,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,    -1,   476,   477,    -1,    -1,    -1,   481,   482,   483,
     484,    -1,    -1,    -1,   488,    -1,    -1,    -1,   492,    -1,
     494,   495,   496,   497,   498,   499,    -1,   501,   502,   503,
     504,   505,   506,    -1,    -1,    -1,    -1,    -1,    -1,   513,
     514,    -1,   516,    -1,    -1,   519,    -1,    -1,   522,   523,
      -1,    -1,    -1,   527,    -1,    -1,   530,   531,    -1,   533,
     534,   535,   536,   537,   538,    -1,    -1,   541,   542,   543,
     544,    -1,   546,   547,    -1,   549,    -1,   551,   552,   553,
     554,    -1,    -1,   557,   558,    -1,   560,   561,   562,   563,
      -1,    -1,    -1,    -1,    -1,   569,   570,   571,    -1,    -1,
      -1,   575,   576,   577,   578,    -1,   580,   581,    -1,   583,
     584,    -1,   586,   587,    -1,    -1,   590,    -1,    -1,   593,
      -1,   595,    -1,   597,   598,   599,    -1,    -1,    -1,    -1,
      -1,    -1,   606,    -1,    -1,   609,    -1,    -1,    -1,   613,
     614,   615,   616,   617,   618,    -1,    -1,    -1,    -1,    -1,
      -1,   625,   626,    -1,   628,   629,   630,    -1,     5,   633,
       7,     8,     9,    10,    11,    -1,   640,    14,    -1,    -1,
      -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    32,    -1,    -1,    -1,    36,
      -1,    -1,    -1,    40,    -1,    -1,    43,    44,    45,    -1,
      47,    -1,    49,    50,    -1,    -1,    53,    -1,    -1,    56,
      57,    -1,    59,    60,    -1,    62,    63,    -1,    65,    66,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      77,    78,    79,    -1,    81,    82,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    -1,    93,    94,    95,    96,
      97,    -1,    99,    -1,    -1,   102,    -1,    -1,   105,    -1,
     107,    -1,   109,    -1,   111,    -1,    -1,    -1,   115,   116,
     117,    -1,    -1,   120,    -1,    -1,    -1,    -1,   125,   126,
      -1,    -1,    -1,    -1,   131,    -1,   133,    -1,    -1,    -1,
     137,    -1,   139,   140,   141,   142,   143,    -1,    -1,    -1,
     147,    -1,    -1,   150,   151,   152,    -1,    -1,    -1,   156,
      -1,   158,   159,    -1,   161,   162,   163,    -1,    -1,   166,
     167,    -1,   169,   170,   171,   172,   173,   174,   175,    -1,
      -1,   178,   179,   180,    -1,    -1,   183,   184,    -1,   186,
     187,   188,    -1,    -1,   191,    -1,    -1,    -1,   195,    -1,
     197,    -1,   199,    -1,   201,   202,   203,   204,   205,    -1,
     207,    -1,   209,    -1,    -1,    -1,   213,   214,   215,    -1,
     217,    -1,    -1,    -1,   221,   222,    -1,    -1,    -1,   226,
     227,   228,   229,    -1,    -1,   232,   233,   234,    -1,   236,
      -1,   238,    -1,    -1,    -1,    -1,   243,   244,    -1,    -1,
      -1,   248,    -1,   250,   251,    -1,   253,   254,    -1,    -1,
      -1,   258,    -1,    -1,   261,   262,   263,    -1,    -1,   266,
      -1,    -1,   269,   270,    -1,    -1,    -1,    -1,    -1,   276,
     277,    -1,   279,    -1,   281,    -1,   283,   284,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,    -1,   309,   310,   311,   312,    -1,   314,   315,   316,
     317,    -1,   319,   320,    -1,    -1,    -1,    -1,   325,   326,
     327,   328,   329,   330,    -1,    -1,   333,   334,    -1,   336,
      -1,   338,    -1,   340,   341,   342,   343,   344,   345,   346,
     347,   348,    -1,    -1,   351,   352,    -1,    -1,   355,   356,
     357,   358,    -1,    -1,    -1,   362,   363,    -1,    -1,    -1,
     367,    -1,   369,   370,   371,    -1,   373,   374,   375,   376,
      -1,   378,   379,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   388,   389,   390,    -1,    -1,   393,    -1,   395,    -1,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
      -1,    -1,   409,   410,   411,    -1,   413,    -1,   415,   416,
     417,   418,   419,    -1,   421,   422,   423,    -1,    -1,   426,
      -1,    -1,    -1,   430,   431,   432,   433,   434,    -1,    -1,
     437,   438,   439,   440,   441,    -1,   443,   444,    -1,   446,
     447,   448,    -1,    -1,   451,    -1,   453,    -1,   455,   456,
      -1,   458,   459,   460,    -1,    -1,    -1,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,    -1,   476,
     477,    -1,    -1,    -1,   481,   482,   483,   484,    -1,    -1,
      -1,   488,    -1,    -1,    -1,   492,    -1,   494,   495,   496,
     497,   498,   499,    -1,   501,   502,   503,   504,   505,   506,
      -1,    -1,    -1,    -1,    -1,    -1,   513,   514,    -1,   516,
      -1,    -1,   519,    -1,    -1,   522,   523,    -1,    -1,    -1,
     527,    -1,    -1,   530,   531,    -1,   533,   534,   535,   536,
     537,   538,    -1,    -1,   541,   542,   543,   544,    -1,   546,
     547,    -1,   549,    -1,   551,   552,   553,   554,    -1,    -1,
     557,   558,    -1,   560,   561,   562,   563,    -1,    -1,    -1,
      -1,    -1,   569,   570,   571,    -1,    -1,    -1,   575,   576,
     577,   578,    -1,   580,   581,    -1,   583,   584,    -1,   586,
     587,    -1,    -1,   590,    -1,    -1,   593,    -1,   595,    -1,
     597,   598,   599,    -1,    -1,    -1,    -1,    -1,    -1,   606,
      -1,    -1,   609,    -1,    -1,    -1,   613,   614,   615,   616,
     617,   618,    -1,    -1,    -1,    -1,    -1,    -1,   625,   626,
      -1,   628,   629,   630,    -1,     5,   633,     7,     8,     9,
      10,    11,    -1,   640,    14,    -1,    -1,    -1,    18,    -1,
      -1,    21,    -1,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    -1,    -1,    -1,    36,    -1,    -1,    -1,
      40,    -1,    -1,    43,    44,    45,    -1,    47,    -1,    49,
      50,    -1,    -1,    53,    -1,    -1,    56,    57,    -1,    59,
      60,    -1,    62,    63,    -1,    65,    66,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    77,    78,    79,
      -1,    81,    82,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    -1,    93,    94,    95,    96,    97,    -1,    99,
      -1,    -1,   102,    -1,    -1,   105,    -1,   107,    -1,   109,
      -1,   111,    -1,    -1,    -1,   115,   116,   117,    -1,    -1,
     120,    -1,    -1,    -1,    -1,   125,   126,    -1,    -1,    -1,
      -1,   131,    -1,   133,    -1,    -1,    -1,   137,    -1,   139,
     140,   141,   142,   143,    -1,    -1,    -1,   147,    -1,    -1,
     150,   151,   152,    -1,    -1,    -1,   156,    -1,   158,   159,
      -1,   161,   162,   163,    -1,    -1,   166,   167,    -1,   169,
     170,   171,   172,   173,   174,   175,    -1,    -1,   178,   179,
     180,    -1,    -1,   183,   184,    -1,   186,   187,   188,    -1,
      -1,   191,    -1,    -1,    -1,   195,    -1,   197,    -1,   199,
      -1,   201,   202,   203,   204,   205,    -1,   207,    -1,   209,
      -1,    -1,    -1,   213,   214,   215,    -1,   217,    -1,    -1,
      -1,   221,   222,    -1,    -1,    -1,   226,   227,   228,   229,
      -1,    -1,   232,   233,   234,    -1,   236,    -1,   238,    -1,
      -1,    -1,    -1,   243,   244,    -1,    -1,    -1,   248,    -1,
     250,   251,    -1,   253,   254,    -1,    -1,    -1,   258,    -1,
      -1,   261,   262,   263,    -1,    -1,   266,    -1,    -1,   269,
     270,    -1,    -1,    -1,    -1,    -1,   276,   277,    -1,   279,
      -1,   281,    -1,   283,   284,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,    -1,   309,
     310,   311,   312,    -1,   314,   315,   316,   317,    -1,   319,
     320,    -1,    -1,    -1,    -1,   325,   326,   327,   328,   329,
     330,    -1,    -1,   333,   334,    -1,   336,    -1,   338,    -1,
     340,   341,   342,   343,   344,   345,   346,   347,   348,    -1,
      -1,   351,   352,    -1,    -1,   355,   356,   357,   358,    -1,
      -1,    -1,   362,   363,    -1,    -1,    -1,   367,    -1,   369,
     370,   371,    -1,   373,   374,   375,   376,    -1,   378,   379,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   388,   389,
     390,    -1,    -1,   393,    -1,   395,    -1,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,    -1,    -1,   409,
     410,   411,    -1,   413,    -1,   415,   416,   417,   418,   419,
      -1,   421,   422,   423,    -1,    -1,   426,    -1,    -1,    -1,
     430,   431,   432,   433,   434,    -1,    -1,   437,   438,   439,
     440,   441,    -1,   443,   444,    -1,   446,   447,   448,    -1,
      -1,   451,    -1,   453,    -1,   455,   456,    -1,   458,   459,
     460,    -1,    -1,    -1,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,    -1,   476,   477,    -1,    -1,
      -1,   481,   482,   483,   484,    -1,    -1,    -1,   488,    -1,
      -1,    -1,   492,    -1,   494,   495,   496,   497,   498,   499,
      -1,   501,   502,   503,   504,   505,   506,    -1,    -1,    -1,
      -1,    -1,    -1,   513,   514,    -1,   516,    -1,    -1,   519,
      -1,    -1,   522,   523,    -1,    -1,    -1,   527,    -1,    -1,
     530,   531,    -1,   533,   534,   535,   536,   537,   538,    -1,
      -1,   541,   542,   543,   544,    -1,   546,   547,    -1,   549,
      -1,   551,   552,   553,   554,    -1,    -1,   557,   558,    -1,
     560,   561,   562,   563,    -1,    -1,    -1,    -1,    -1,   569,
     570,   571,    -1,    -1,    -1,   575,   576,   577,   578,    -1,
     580,   581,    -1,   583,   584,    -1,   586,   587,    -1,    -1,
     590,    -1,    -1,   593,    -1,   595,    -1,   597,   598,   599,
      -1,    -1,    -1,    -1,    -1,    -1,   606,    -1,    -1,   609,
      -1,    -1,    -1,   613,   614,   615,   616,   617,   618,    -1,
      -1,    -1,    -1,    -1,    -1,   625,   626,    -1,   628,   629,
     630,    -1,     5,   633,     7,     8,     9,    10,    11,    -1,
     640,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,
      23,    24,    25,    26,    27,    28,    29,    30,    -1,    32,
      -1,    -1,    -1,    36,    -1,    -1,    -1,    40,    -1,    -1,
      43,    44,    45,    -1,    47,    -1,    49,    50,    -1,    -1,
      53,    -1,    -1,    56,    57,    -1,    59,    60,    -1,    62,
      63,    -1,    65,    66,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    78,    79,    -1,    81,    82,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    -1,
      93,    94,    95,    96,    97,    -1,    99,    -1,    -1,   102,
      -1,    -1,   105,    -1,   107,    -1,   109,    -1,   111,    -1,
      -1,    -1,   115,   116,   117,    -1,    -1,   120,    -1,    -1,
      -1,    -1,   125,   126,   127,    -1,    -1,    -1,   131,    -1,
     133,    -1,    -1,    -1,   137,    -1,   139,   140,   141,   142,
     143,    -1,    -1,    -1,   147,    -1,    -1,   150,   151,   152,
      -1,    -1,    -1,   156,    -1,   158,   159,    -1,   161,   162,
     163,    -1,    -1,   166,   167,    -1,   169,   170,   171,   172,
     173,   174,   175,    -1,    -1,   178,   179,   180,    -1,    -1,
     183,   184,    -1,   186,   187,   188,   189,    -1,   191,    -1,
      -1,    -1,   195,    -1,   197,    -1,   199,    -1,   201,   202,
     203,   204,   205,    -1,   207,    -1,   209,    -1,    -1,    -1,
     213,   214,   215,    -1,   217,   218,    -1,    -1,   221,   222,
      -1,    -1,    -1,   226,   227,   228,   229,    -1,    -1,   232,
     233,   234,    -1,   236,    -1,   238,    -1,    -1,    -1,    -1,
     243,   244,    -1,    -1,    -1,   248,    -1,   250,   251,    -1,
     253,   254,    -1,    -1,    -1,   258,    -1,    -1,   261,   262,
     263,    -1,    -1,   266,    -1,    -1,   269,   270,    -1,    -1,
      -1,    -1,    -1,   276,   277,    -1,   279,    -1,   281,    -1,
     283,   284,    -1,    -1,   287,    -1,    -1,    -1,    -1,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,    -1,   309,   310,   311,   312,
      -1,   314,   315,   316,   317,    -1,   319,   320,    -1,    -1,
      -1,    -1,   325,   326,   327,   328,   329,   330,    -1,    -1,
     333,   334,    -1,   336,    -1,   338,    -1,   340,   341,   342,
     343,   344,   345,   346,   347,   348,    -1,    -1,   351,   352,
      -1,    -1,   355,   356,   357,   358,   359,   360,    -1,   362,
     363,    -1,    -1,   366,   367,    -1,   369,   370,   371,    -1,
     373,   374,   375,   376,    -1,   378,   379,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   388,   389,   390,    -1,    -1,
     393,    -1,   395,    -1,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,    -1,    -1,   409,   410,   411,    -1,
     413,    -1,   415,   416,   417,   418,   419,    -1,   421,   422,
     423,    -1,    -1,   426,    -1,    -1,    -1,   430,   431,   432,
     433,   434,    -1,    -1,   437,   438,   439,   440,   441,    -1,
     443,   444,    -1,   446,   447,   448,    -1,    -1,   451,    -1,
     453,    -1,   455,   456,    -1,   458,   459,   460,    -1,    -1,
      -1,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,    -1,   476,   477,    -1,    -1,    -1,   481,   482,
     483,   484,    -1,    -1,    -1,   488,    -1,    -1,    -1,   492,
      -1,   494,   495,   496,   497,   498,   499,    -1,   501,   502,
     503,   504,   505,   506,    -1,    -1,   509,   510,   511,    -1,
     513,   514,    -1,   516,    -1,    -1,   519,    -1,    -1,   522,
     523,    -1,    -1,    -1,   527,    -1,    -1,   530,   531,    -1,
     533,   534,   535,   536,   537,   538,    -1,    -1,   541,   542,
     543,   544,    -1,   546,   547,    -1,   549,    -1,   551,   552,
     553,   554,    -1,    -1,   557,   558,    -1,   560,   561,   562,
     563,    -1,    -1,    -1,    -1,    -1,   569,   570,   571,    -1,
      -1,    -1,   575,   576,   577,   578,   579,   580,   581,    -1,
     583,   584,    -1,   586,   587,    -1,    -1,   590,    -1,    -1,
     593,    -1,   595,    -1,   597,   598,   599,    -1,    -1,    -1,
      -1,    -1,    -1,   606,    -1,    -1,   609,    -1,    -1,    -1,
     613,   614,   615,   616,   617,   618,    -1,    -1,    -1,    -1,
      -1,    -1,   625,   626,    -1,   628,   629,   630,    -1,     5,
     633,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,
      26,    27,    28,    29,    30,    -1,    32,    -1,    -1,    -1,
      36,    -1,    -1,    -1,    40,    -1,    -1,    43,    44,    45,
      -1,    47,    -1,    49,    50,    -1,    -1,    53,    -1,    -1,
      56,    57,    -1,    59,    60,    -1,    62,    63,    -1,    65,
      66,    67,    68,    69,    70,    71,    -1,    73,    74,    75,
      76,    77,    78,    79,    -1,    81,    82,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    -1,    93,    94,    95,
      96,    97,    -1,    99,    -1,    -1,   102,    -1,    -1,   105,
      -1,   107,    -1,   109,    -1,   111,    -1,    -1,    -1,   115,
     116,   117,    -1,    -1,   120,    -1,    -1,    -1,    -1,   125,
     126,   127,    -1,    -1,   130,   131,    -1,   133,    -1,    -1,
      -1,   137,    -1,   139,   140,   141,   142,   143,    -1,    -1,
      -1,   147,    -1,    -1,   150,   151,   152,    -1,    -1,    -1,
     156,    -1,   158,   159,    -1,   161,   162,   163,    -1,    -1,
     166,   167,    -1,   169,   170,   171,   172,   173,   174,   175,
      -1,    -1,   178,   179,   180,    -1,    -1,   183,   184,    -1,
     186,   187,   188,   189,    -1,   191,    -1,    -1,    -1,   195,
      -1,   197,    -1,   199,    -1,   201,   202,   203,   204,   205,
      -1,   207,    -1,   209,    -1,    -1,    -1,   213,   214,   215,
      -1,   217,   218,    -1,    -1,   221,   222,    -1,    -1,    -1,
     226,   227,   228,   229,    -1,    -1,   232,   233,   234,    -1,
     236,    -1,   238,    -1,    -1,    -1,    -1,   243,   244,    -1,
      -1,    -1,   248,    -1,   250,   251,    -1,   253,   254,    -1,
      -1,    -1,   258,    -1,    -1,   261,   262,   263,    -1,    -1,
     266,    -1,    -1,   269,   270,    -1,    -1,    -1,    -1,    -1,
     276,   277,    -1,   279,    -1,   281,    -1,   283,   284,    -1,
      -1,   287,    -1,    -1,    -1,    -1,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,    -1,   309,   310,   311,   312,    -1,   314,   315,
     316,   317,    -1,   319,   320,    -1,    -1,    -1,    -1,   325,
     326,   327,   328,   329,   330,    -1,    -1,   333,   334,    -1,
     336,    -1,   338,    -1,   340,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,    -1,   351,   352,    -1,    -1,   355,
     356,   357,   358,    -1,    -1,    -1,   362,   363,    -1,    -1,
     366,   367,    -1,   369,   370,   371,    -1,   373,   374,   375,
     376,    -1,   378,   379,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   388,   389,   390,    -1,    -1,   393,    -1,   395,
      -1,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,    -1,    -1,   409,   410,   411,    -1,   413,    -1,   415,
     416,   417,   418,   419,    -1,   421,   422,   423,    -1,    -1,
     426,    -1,    -1,    -1,   430,   431,   432,   433,   434,    -1,
      -1,   437,   438,   439,   440,   441,    -1,   443,   444,    -1,
     446,   447,   448,    -1,    -1,   451,    -1,   453,    -1,   455,
     456,    -1,   458,   459,   460,    -1,    -1,    -1,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,    -1,
     476,   477,    -1,    -1,    -1,   481,   482,   483,   484,    -1,
      -1,    -1,   488,    -1,    -1,    -1,   492,    -1,   494,   495,
     496,   497,   498,   499,    -1,   501,   502,   503,   504,   505,
     506,    -1,    -1,    -1,    -1,    -1,    -1,   513,   514,    -1,
     516,    -1,    -1,   519,    -1,    -1,   522,   523,    -1,    -1,
      -1,   527,    -1,    -1,   530,   531,    -1,   533,   534,   535,
     536,   537,   538,    -1,    -1,   541,   542,   543,   544,    -1,
     546,   547,    -1,   549,    -1,   551,   552,   553,   554,    -1,
     556,   557,   558,    -1,   560,   561,   562,   563,    -1,    -1,
      -1,    -1,    -1,   569,   570,   571,    -1,    -1,    -1,   575,
     576,   577,   578,   579,   580,   581,    -1,   583,   584,    -1,
     586,   587,    -1,    -1,   590,    -1,    -1,   593,    -1,   595,
      -1,   597,   598,   599,    -1,    -1,    -1,    -1,    -1,    -1,
     606,    -1,    -1,   609,    -1,    -1,    -1,   613,   614,   615,
     616,   617,   618,    -1,    -1,    -1,    -1,    -1,    -1,   625,
     626,    -1,   628,   629,   630,    -1,     5,   633,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      -1,    -1,    21,    -1,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    32,    -1,    -1,    -1,    36,    -1,    -1,
      -1,    40,    -1,    -1,    43,    44,    45,    -1,    47,    -1,
      49,    50,    -1,    -1,    53,    -1,    -1,    56,    57,    -1,
      59,    60,    -1,    62,    63,    -1,    65,    66,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    78,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    -1,    93,    94,    95,    96,    97,    -1,
      99,    -1,    -1,   102,    -1,    -1,   105,    -1,   107,    -1,
     109,    -1,   111,    -1,    -1,    -1,   115,   116,   117,    -1,
      -1,   120,    -1,    -1,    -1,    -1,   125,   126,   127,    -1,
      -1,   130,   131,    -1,   133,    -1,    -1,    -1,   137,    -1,
     139,   140,   141,   142,   143,    -1,    -1,    -1,   147,    -1,
      -1,   150,   151,   152,    -1,    -1,    -1,   156,    -1,   158,
     159,    -1,   161,   162,   163,    -1,    -1,   166,   167,    -1,
     169,   170,   171,   172,   173,   174,   175,    -1,    -1,   178,
     179,   180,    -1,    -1,   183,   184,    -1,   186,   187,   188,
     189,    -1,   191,    -1,    -1,    -1,   195,    -1,   197,    -1,
     199,    -1,   201,   202,   203,   204,   205,    -1,   207,    -1,
     209,    -1,    -1,    -1,   213,   214,   215,    -1,   217,   218,
      -1,    -1,   221,   222,    -1,    -1,    -1,   226,   227,   228,
     229,    -1,    -1,   232,   233,   234,    -1,   236,    -1,   238,
      -1,    -1,    -1,    -1,   243,   244,    -1,    -1,    -1,   248,
      -1,   250,   251,    -1,   253,   254,    -1,    -1,    -1,   258,
      -1,    -1,   261,   262,   263,    -1,    -1,   266,    -1,    -1,
     269,   270,    -1,    -1,    -1,    -1,    -1,   276,   277,    -1,
     279,    -1,   281,    -1,   283,   284,    -1,    -1,   287,    -1,
      -1,    -1,    -1,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,    -1,
     309,   310,   311,   312,    -1,   314,   315,   316,   317,    -1,
     319,   320,    -1,    -1,    -1,    -1,   325,   326,   327,   328,
     329,   330,    -1,    -1,   333,   334,    -1,   336,    -1,   338,
      -1,   340,   341,   342,   343,   344,   345,   346,   347,   348,
      -1,    -1,   351,   352,    -1,    -1,   355,   356,   357,   358,
      -1,    -1,    -1,   362,   363,    -1,    -1,   366,   367,    -1,
     369,   370,   371,    -1,   373,   374,   375,   376,    -1,   378,
     379,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   388,
     389,   390,    -1,    -1,   393,    -1,   395,    -1,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,    -1,    -1,
     409,   410,   411,    -1,   413,    -1,   415,   416,   417,   418,
     419,    -1,   421,   422,   423,    -1,    -1,   426,    -1,    -1,
      -1,   430,   431,   432,   433,   434,    -1,    -1,   437,   438,
     439,   440,   441,    -1,   443,   444,    -1,   446,   447,   448,
      -1,    -1,   451,    -1,   453,    -1,   455,   456,    -1,   458,
     459,   460,    -1,    -1,    -1,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,    -1,   476,   477,    -1,
      -1,    -1,   481,   482,   483,   484,    -1,    -1,    -1,   488,
      -1,    -1,    -1,   492,    -1,   494,   495,   496,   497,   498,
     499,    -1,   501,   502,   503,   504,   505,   506,    -1,    -1,
      -1,    -1,    -1,    -1,   513,   514,    -1,   516,    -1,    -1,
     519,    -1,    -1,   522,   523,    -1,    -1,    -1,   527,    -1,
      -1,   530,   531,    -1,   533,   534,   535,   536,   537,   538,
      -1,    -1,   541,   542,   543,   544,    -1,   546,   547,    -1,
     549,    -1,   551,   552,   553,   554,    -1,   556,   557,   558,
      -1,   560,   561,   562,   563,    -1,    -1,    -1,    -1,    -1,
     569,   570,   571,    -1,    -1,    -1,   575,   576,   577,   578,
     579,   580,   581,    -1,   583,   584,    -1,   586,   587,    -1,
      -1,   590,    -1,    -1,   593,    -1,   595,    -1,   597,   598,
     599,    -1,    -1,    -1,    -1,    -1,    -1,   606,    -1,    -1,
     609,    -1,    -1,    -1,   613,   614,   615,   616,   617,   618,
      -1,    -1,    -1,    -1,    -1,    -1,   625,   626,    -1,   628,
     629,   630,    -1,     5,   633,     7,     8,     9,    10,    11,
      -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,
      -1,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      32,    -1,    -1,    -1,    36,    -1,    -1,    -1,    40,    -1,
      -1,    43,    44,    45,    -1,    47,    -1,    49,    50,    -1,
      -1,    53,    -1,    -1,    56,    57,    -1,    59,    60,    -1,
      62,    63,    -1,    65,    66,    67,    68,    69,    70,    71,
      -1,    73,    74,    75,    76,    77,    78,    79,    -1,    81,
      82,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      -1,    93,    94,    95,    96,    97,    -1,    99,    -1,    -1,
     102,    -1,    -1,   105,    -1,   107,    -1,   109,    -1,   111,
      -1,    -1,    -1,   115,   116,   117,    -1,    -1,   120,    -1,
      -1,    -1,    -1,   125,   126,   127,    -1,    -1,   130,   131,
      -1,   133,    -1,    -1,    -1,   137,    -1,   139,   140,   141,
     142,   143,    -1,    -1,    -1,   147,    -1,    -1,   150,   151,
     152,    -1,    -1,    -1,   156,    -1,   158,   159,    -1,   161,
     162,   163,    -1,    -1,   166,   167,    -1,   169,   170,   171,
     172,   173,   174,   175,    -1,    -1,   178,   179,   180,    -1,
      -1,   183,   184,    -1,   186,   187,   188,   189,    -1,   191,
      -1,    -1,    -1,   195,    -1,   197,    -1,   199,    -1,   201,
     202,   203,   204,   205,    -1,   207,    -1,   209,    -1,    -1,
      -1,   213,   214,   215,    -1,   217,   218,    -1,    -1,   221,
     222,    -1,    -1,    -1,   226,   227,   228,   229,    -1,    -1,
     232,   233,   234,    -1,   236,    -1,   238,    -1,    -1,    -1,
      -1,   243,   244,    -1,    -1,    -1,   248,    -1,   250,   251,
      -1,   253,   254,    -1,    -1,    -1,   258,    -1,    -1,   261,
     262,   263,    -1,    -1,   266,    -1,    -1,   269,   270,    -1,
      -1,    -1,    -1,    -1,   276,   277,    -1,   279,    -1,   281,
      -1,   283,   284,    -1,    -1,   287,    -1,    -1,    -1,    -1,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,    -1,   309,   310,   311,
     312,    -1,   314,   315,   316,   317,    -1,   319,   320,    -1,
      -1,    -1,    -1,   325,   326,   327,   328,   329,   330,    -1,
      -1,   333,   334,    -1,   336,    -1,   338,    -1,   340,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,    -1,   351,
     352,    -1,    -1,   355,   356,   357,   358,    -1,    -1,    -1,
     362,   363,    -1,    -1,   366,   367,    -1,   369,   370,   371,
      -1,   373,   374,   375,   376,    -1,   378,   379,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   388,   389,   390,    -1,
      -1,   393,    -1,   395,    -1,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,    -1,    -1,   409,   410,   411,
      -1,   413,    -1,   415,   416,   417,   418,   419,    -1,   421,
     422,   423,    -1,    -1,   426,    -1,    -1,    -1,   430,   431,
     432,   433,   434,    -1,    -1,   437,   438,   439,   440,   441,
      -1,   443,   444,    -1,   446,   447,   448,    -1,    -1,   451,
      -1,   453,    -1,   455,   456,    -1,   458,   459,   460,    -1,
      -1,    -1,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,    -1,   476,   477,    -1,    -1,    -1,   481,
     482,   483,   484,    -1,    -1,    -1,   488,    -1,    -1,    -1,
     492,    -1,   494,   495,   496,   497,   498,   499,    -1,   501,
     502,   503,   504,   505,   506,    -1,    -1,    -1,    -1,    -1,
      -1,   513,   514,    -1,   516,    -1,    -1,   519,    -1,    -1,
     522,   523,    -1,    -1,    -1,   527,    -1,    -1,   530,   531,
      -1,   533,   534,   535,   536,   537,   538,    -1,    -1,   541,
     542,   543,   544,    -1,   546,   547,    -1,   549,    -1,   551,
     552,   553,   554,    -1,   556,   557,   558,    -1,   560,   561,
     562,   563,    -1,    -1,    -1,    -1,    -1,   569,   570,   571,
      -1,    -1,    -1,   575,   576,   577,   578,   579,   580,   581,
      -1,   583,   584,    -1,   586,   587,    -1,    -1,   590,    -1,
      -1,   593,    -1,   595,    -1,   597,   598,   599,    -1,    -1,
      -1,    -1,    -1,    -1,   606,    -1,    -1,   609,    -1,    -1,
      -1,   613,   614,   615,   616,   617,   618,    -1,    -1,    -1,
      -1,    -1,    -1,   625,   626,    -1,   628,   629,   630,    -1,
       5,   633,     7,     8,     9,    10,    11,    -1,    -1,    14,
      -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,
      25,    26,    27,    28,    29,    30,    -1,    32,    -1,    -1,
      35,    36,    -1,    -1,    -1,    40,    -1,    -1,    43,    44,
      45,    -1,    47,    -1,    49,    50,    -1,    -1,    53,    -1,
      -1,    56,    57,    -1,    59,    60,    -1,    62,    63,    -1,
      65,    66,    67,    68,    69,    70,    71,    -1,    73,    74,
      75,    76,    77,    78,    79,    -1,    81,    82,    83,    84,
      85,    86,    87,    88,    -1,    90,    91,    -1,    93,    94,
      95,    96,    97,    -1,    99,    -1,    -1,   102,    -1,    -1,
     105,    -1,   107,    -1,   109,    -1,   111,    -1,    -1,    -1,
     115,   116,   117,    -1,    -1,   120,    -1,    -1,    -1,    -1,
     125,   126,    -1,    -1,    -1,   130,   131,    -1,   133,    -1,
      -1,    -1,   137,    -1,   139,   140,   141,   142,   143,    -1,
      -1,    -1,   147,    -1,    -1,   150,   151,   152,    -1,    -1,
      -1,   156,    -1,   158,   159,    -1,   161,   162,   163,   164,
      -1,   166,   167,    -1,   169,   170,   171,   172,   173,   174,
     175,    -1,    -1,   178,   179,   180,    -1,    -1,   183,   184,
      -1,   186,   187,   188,    -1,    -1,   191,    -1,    -1,    -1,
     195,    -1,   197,    -1,   199,    -1,   201,   202,   203,   204,
     205,    -1,   207,    -1,   209,    -1,    -1,    -1,   213,   214,
     215,    -1,   217,    -1,    -1,    -1,   221,   222,    -1,    -1,
      -1,   226,   227,   228,   229,    -1,    -1,   232,   233,   234,
      -1,   236,    -1,   238,    -1,    -1,    -1,    -1,   243,   244,
      -1,    -1,    -1,   248,    -1,   250,   251,    -1,   253,   254,
      -1,    -1,    -1,   258,    -1,    -1,   261,   262,   263,    -1,
      -1,   266,    -1,    -1,   269,   270,   271,    -1,    -1,    -1,
      -1,   276,   277,    -1,   279,    -1,   281,    -1,   283,   284,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,    -1,   309,   310,   311,   312,    -1,   314,
     315,   316,   317,    -1,   319,   320,    -1,    -1,    -1,    -1,
     325,   326,   327,   328,   329,   330,    -1,    -1,   333,   334,
      -1,   336,    -1,   338,    -1,   340,   341,   342,   343,   344,
     345,   346,   347,   348,    -1,    -1,   351,   352,    -1,    -1,
     355,   356,   357,   358,    -1,    -1,    -1,   362,   363,    -1,
      -1,    -1,   367,    -1,   369,   370,   371,    -1,   373,   374,
     375,   376,    -1,   378,   379,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   388,   389,   390,    -1,    -1,   393,    -1,
     395,    -1,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,    -1,    -1,   409,   410,   411,    -1,   413,    -1,
     415,   416,   417,   418,   419,    -1,   421,   422,   423,    -1,
      -1,   426,    -1,    -1,    -1,   430,   431,   432,   433,   434,
      -1,    -1,   437,   438,   439,   440,   441,    -1,   443,   444,
      -1,   446,   447,   448,    -1,    -1,   451,    -1,   453,    -1,
     455,   456,    -1,   458,   459,   460,    -1,    -1,    -1,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
      -1,   476,   477,    -1,    -1,    -1,   481,   482,   483,   484,
      -1,    -1,   487,   488,    -1,    -1,    -1,   492,    -1,   494,
     495,   496,   497,   498,   499,    -1,   501,   502,   503,   504,
     505,   506,    -1,    -1,    -1,    -1,    -1,    -1,   513,   514,
      -1,   516,    -1,    -1,   519,    -1,    -1,   522,   523,    -1,
      -1,    -1,   527,    -1,    -1,   530,   531,    -1,   533,   534,
     535,   536,   537,   538,    -1,    -1,   541,   542,   543,   544,
      -1,   546,   547,    -1,   549,    -1,   551,   552,   553,   554,
      -1,   556,   557,   558,    -1,   560,   561,   562,   563,    -1,
      -1,    -1,    -1,    -1,   569,   570,   571,    -1,    -1,    -1,
     575,   576,   577,   578,    -1,   580,   581,    -1,   583,   584,
      -1,   586,   587,    -1,    -1,   590,    -1,    -1,   593,    -1,
     595,    -1,   597,   598,   599,    -1,    -1,    -1,    -1,    -1,
      -1,   606,    -1,    -1,   609,    -1,    -1,    -1,   613,   614,
     615,   616,   617,   618,    -1,    -1,    -1,    -1,    -1,    -1,
     625,   626,    -1,   628,   629,   630,    -1,     5,   633,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,    -1,    -1,    21,    -1,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    32,    -1,    -1,    35,    36,    -1,
      -1,    -1,    40,    -1,    -1,    43,    44,    45,    -1,    47,
      -1,    49,    50,    -1,    -1,    53,    -1,    -1,    56,    57,
      -1,    59,    60,    -1,    62,    63,    -1,    65,    66,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      78,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    -1,    90,    91,    -1,    93,    94,    95,    96,    97,
      -1,    99,    -1,    -1,   102,    -1,    -1,   105,    -1,   107,
      -1,   109,    -1,   111,    -1,    -1,    -1,   115,   116,   117,
      -1,    -1,   120,    -1,    -1,    -1,    -1,   125,   126,    -1,
      -1,    -1,   130,   131,    -1,   133,    -1,    -1,    -1,   137,
      -1,   139,   140,   141,   142,   143,    -1,    -1,    -1,   147,
      -1,    -1,   150,   151,   152,    -1,    -1,    -1,   156,    -1,
     158,   159,    -1,   161,   162,   163,    -1,    -1,   166,   167,
      -1,   169,   170,   171,   172,   173,   174,   175,    -1,    -1,
     178,   179,   180,    -1,    -1,   183,   184,    -1,   186,   187,
     188,    -1,    -1,   191,    -1,    -1,    -1,   195,    -1,   197,
      -1,   199,    -1,   201,   202,   203,   204,   205,    -1,   207,
      -1,   209,    -1,    -1,    -1,   213,   214,   215,    -1,   217,
      -1,    -1,    -1,   221,   222,    -1,    -1,    -1,   226,   227,
     228,   229,    -1,    -1,   232,   233,   234,    -1,   236,    -1,
     238,    -1,    -1,    -1,    -1,   243,   244,    -1,    -1,    -1,
     248,    -1,   250,   251,    -1,   253,   254,    -1,    -1,    -1,
     258,    -1,    -1,   261,   262,   263,    -1,    -1,   266,    -1,
      -1,   269,   270,   271,    -1,    -1,    -1,    -1,   276,   277,
      -1,   279,    -1,   281,    -1,   283,   284,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
      -1,   309,   310,   311,   312,    -1,   314,   315,   316,   317,
      -1,   319,   320,    -1,    -1,    -1,    -1,   325,   326,   327,
     328,   329,   330,    -1,    -1,   333,   334,    -1,   336,    -1,
     338,    -1,   340,   341,   342,   343,   344,   345,   346,   347,
     348,    -1,    -1,   351,   352,    -1,    -1,   355,   356,   357,
     358,    -1,    -1,    -1,   362,   363,    -1,    -1,    -1,   367,
      -1,   369,   370,   371,    -1,   373,   374,   375,   376,    -1,
     378,   379,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     388,   389,   390,    -1,    -1,   393,    -1,   395,    -1,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,    -1,
      -1,   409,   410,   411,    -1,   413,    -1,   415,   416,   417,
     418,   419,    -1,   421,   422,   423,    -1,    -1,   426,    -1,
      -1,    -1,   430,   431,   432,   433,   434,    -1,    -1,   437,
     438,   439,   440,   441,    -1,   443,   444,    -1,   446,   447,
     448,    -1,    -1,   451,    -1,   453,    -1,   455,   456,    -1,
     458,   459,   460,    -1,    -1,    -1,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,    -1,   476,   477,
      -1,    -1,    -1,   481,   482,   483,   484,    -1,    -1,    -1,
     488,    -1,    -1,    -1,   492,    -1,   494,   495,   496,   497,
     498,   499,    -1,   501,   502,   503,   504,   505,   506,    -1,
      -1,    -1,    -1,    -1,    -1,   513,   514,    -1,   516,    -1,
      -1,   519,    -1,    -1,   522,   523,    -1,    -1,    -1,   527,
      -1,    -1,   530,   531,    -1,   533,   534,   535,   536,   537,
     538,    -1,    -1,   541,   542,   543,   544,    -1,   546,   547,
      -1,   549,    -1,   551,   552,   553,   554,    -1,   556,   557,
     558,    -1,   560,   561,   562,   563,    -1,    -1,    -1,    -1,
      -1,   569,   570,   571,    -1,    -1,    -1,   575,   576,   577,
     578,    -1,   580,   581,    -1,   583,   584,    -1,   586,   587,
      -1,    -1,   590,    -1,    -1,   593,    -1,   595,    -1,   597,
     598,   599,    -1,    -1,    -1,    -1,    -1,    -1,   606,    -1,
      -1,   609,    -1,    -1,    -1,   613,   614,   615,   616,   617,
     618,    -1,    -1,    -1,    -1,    -1,    -1,   625,   626,    -1,
     628,   629,   630,    -1,     5,   633,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      21,    -1,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    32,    -1,    -1,    -1,    36,    37,    -1,    -1,    40,
      -1,    -1,    43,    44,    45,    -1,    47,    -1,    49,    50,
      -1,    -1,    53,    -1,    -1,    56,    57,    -1,    59,    60,
      -1,    62,    63,    -1,    65,    66,    67,    68,    69,    70,
      71,    -1,    73,    74,    75,    76,    77,    78,    79,    -1,
      81,    82,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    -1,    93,    94,    95,    96,    97,    -1,    99,    -1,
      -1,   102,    -1,    -1,   105,    -1,   107,    -1,   109,    -1,
     111,    -1,    -1,    -1,   115,   116,   117,    -1,    -1,   120,
      -1,    -1,    -1,    -1,   125,   126,    -1,    -1,    -1,    -1,
     131,    -1,   133,    -1,    -1,    -1,   137,    -1,   139,   140,
     141,   142,   143,    -1,    -1,    -1,   147,    -1,    -1,   150,
     151,   152,    -1,    -1,    -1,   156,    -1,   158,   159,    -1,
     161,   162,   163,    -1,    -1,   166,   167,    -1,   169,   170,
     171,   172,   173,   174,   175,    -1,    -1,   178,   179,   180,
      -1,    -1,   183,   184,    -1,   186,   187,   188,    -1,    -1,
     191,    -1,    -1,    -1,   195,    -1,   197,    -1,   199,    -1,
     201,   202,   203,   204,   205,    -1,   207,    -1,   209,    -1,
      -1,    -1,   213,   214,   215,    -1,   217,   218,   219,    -1,
     221,   222,    -1,    -1,    -1,   226,   227,   228,   229,    -1,
      -1,   232,   233,   234,    -1,   236,    -1,   238,    -1,    -1,
      -1,    -1,   243,   244,    -1,    -1,    -1,   248,    -1,   250,
     251,    -1,   253,   254,    -1,    -1,    -1,   258,    -1,    -1,
     261,   262,   263,    -1,    -1,   266,    -1,    -1,   269,   270,
      -1,    -1,    -1,    -1,    -1,   276,   277,    -1,   279,    -1,
     281,    -1,   283,   284,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,    -1,   309,   310,
     311,   312,    -1,   314,   315,   316,   317,    -1,   319,   320,
      -1,    -1,    -1,    -1,   325,   326,   327,   328,   329,   330,
      -1,    -1,   333,   334,    -1,   336,    -1,   338,    -1,   340,
     341,   342,   343,   344,   345,   346,   347,   348,    -1,    -1,
     351,   352,    -1,    -1,   355,   356,   357,   358,    -1,    -1,
      -1,   362,   363,    -1,    -1,    -1,   367,    -1,   369,   370,
     371,    -1,   373,   374,   375,   376,    -1,   378,   379,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   388,   389,   390,
      -1,    -1,   393,    -1,   395,    -1,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,    -1,    -1,   409,   410,
     411,    -1,   413,    -1,   415,   416,   417,   418,   419,    -1,
     421,   422,   423,    -1,    -1,   426,    -1,    -1,    -1,   430,
     431,   432,   433,   434,    -1,    -1,   437,   438,   439,   440,
     441,    -1,   443,   444,    -1,   446,   447,   448,    -1,    -1,
     451,    -1,   453,    -1,   455,   456,    -1,   458,   459,   460,
      -1,    -1,    -1,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,    -1,   476,   477,    -1,    -1,    -1,
     481,   482,   483,   484,    -1,    -1,    -1,   488,    -1,    -1,
      -1,   492,    -1,   494,   495,   496,   497,   498,   499,    -1,
     501,   502,   503,   504,   505,   506,    -1,    -1,    -1,    -1,
      -1,    -1,   513,   514,    -1,   516,    -1,    -1,   519,    -1,
      -1,   522,   523,    -1,    -1,    -1,   527,    -1,    -1,   530,
     531,    -1,   533,   534,   535,   536,   537,   538,    -1,    -1,
     541,   542,   543,   544,    -1,   546,   547,    -1,   549,    -1,
     551,   552,   553,   554,    -1,   556,   557,   558,    -1,   560,
     561,   562,   563,    -1,    -1,    -1,    -1,    -1,   569,   570,
     571,    -1,    -1,    -1,   575,   576,   577,   578,    -1,   580,
     581,    -1,   583,   584,    -1,   586,   587,    -1,    -1,   590,
      -1,    -1,   593,    -1,   595,    -1,   597,   598,   599,    -1,
      -1,    -1,    -1,    -1,    -1,   606,    -1,    -1,   609,    -1,
      -1,    -1,   613,   614,   615,   616,   617,   618,    -1,    -1,
      -1,    -1,    -1,    -1,   625,   626,    -1,   628,   629,   630,
      -1,     5,   633,     7,     8,     9,    10,    11,    -1,    -1,
      14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    -1,
      -1,    -1,    36,    -1,    -1,    -1,    40,    -1,    -1,    43,
      44,    45,    -1,    47,    -1,    49,    50,    -1,    -1,    53,
      -1,    -1,    56,    57,    -1,    59,    60,    -1,    62,    63,
      -1,    65,    66,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    78,    79,    -1,    81,    82,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    -1,    93,
      94,    95,    96,    97,    -1,    99,    -1,    -1,   102,    -1,
      -1,   105,    -1,   107,    -1,   109,    -1,   111,    -1,    -1,
      -1,   115,   116,   117,    -1,    -1,   120,    -1,    -1,    -1,
      -1,   125,   126,    -1,    -1,    -1,    -1,   131,    -1,   133,
      -1,    -1,    -1,   137,    -1,   139,   140,   141,   142,   143,
      -1,    -1,    -1,   147,    -1,    -1,   150,   151,   152,    -1,
      -1,    -1,   156,    -1,   158,   159,    -1,   161,   162,   163,
      -1,    -1,   166,   167,    -1,   169,   170,   171,   172,   173,
     174,   175,    -1,    -1,   178,   179,   180,    -1,    -1,   183,
     184,    -1,   186,   187,   188,    -1,    -1,   191,    -1,    -1,
      -1,   195,    -1,   197,    -1,   199,    -1,   201,   202,   203,
     204,   205,    -1,   207,    -1,   209,    -1,    -1,    -1,   213,
     214,   215,    -1,   217,    -1,    -1,    -1,   221,   222,    -1,
      -1,    -1,   226,   227,   228,   229,    -1,    -1,   232,   233,
     234,    -1,   236,    -1,   238,    -1,    -1,    -1,    -1,   243,
     244,    -1,    -1,    -1,   248,    -1,   250,   251,    -1,   253,
     254,    -1,    -1,    -1,   258,    -1,    -1,   261,   262,   263,
      -1,    -1,   266,    -1,    -1,   269,   270,    -1,    -1,    -1,
      -1,    -1,   276,   277,    -1,   279,    -1,   281,    -1,   283,
     284,    -1,    -1,   287,    -1,    -1,    -1,    -1,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,    -1,   309,   310,   311,   312,    -1,
     314,   315,   316,   317,    -1,   319,   320,    -1,    -1,    -1,
      -1,   325,   326,   327,   328,   329,   330,    -1,    -1,   333,
     334,    -1,   336,    -1,   338,    -1,   340,   341,   342,   343,
     344,   345,   346,   347,   348,    -1,    -1,   351,   352,    -1,
      -1,   355,   356,   357,   358,    -1,    -1,    -1,   362,   363,
      -1,    -1,   366,   367,    -1,   369,   370,   371,    -1,   373,
     374,   375,   376,    -1,   378,   379,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   388,   389,   390,    -1,   392,   393,
      -1,   395,    -1,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,    -1,    -1,   409,   410,   411,    -1,   413,
      -1,   415,   416,   417,   418,   419,    -1,   421,   422,   423,
      -1,    -1,   426,    -1,    -1,    -1,   430,   431,   432,   433,
     434,    -1,    -1,   437,   438,   439,   440,   441,    -1,   443,
     444,    -1,   446,   447,   448,    -1,    -1,   451,    -1,   453,
      -1,   455,   456,    -1,   458,   459,   460,    -1,    -1,    -1,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,    -1,   476,   477,    -1,    -1,    -1,   481,   482,   483,
     484,    -1,    -1,    -1,   488,    -1,    -1,    -1,   492,    -1,
     494,   495,   496,   497,   498,   499,    -1,   501,   502,   503,
     504,   505,   506,    -1,    -1,    -1,    -1,    -1,    -1,   513,
     514,    -1,   516,    -1,    -1,   519,    -1,    -1,   522,   523,
      -1,    -1,    -1,   527,    -1,    -1,   530,   531,    -1,   533,
     534,   535,   536,   537,   538,    -1,    -1,   541,   542,   543,
     544,    -1,   546,   547,    -1,   549,    -1,   551,   552,   553,
     554,    -1,    -1,   557,   558,    -1,   560,   561,   562,   563,
      -1,    -1,    -1,    -1,    -1,   569,   570,   571,    -1,    -1,
      -1,   575,   576,   577,   578,   579,   580,   581,    -1,   583,
     584,    -1,   586,   587,    -1,    -1,   590,    -1,    -1,   593,
      -1,   595,    -1,   597,   598,   599,    -1,    -1,    -1,    -1,
      -1,    -1,   606,    -1,    -1,   609,    -1,    -1,    -1,   613,
     614,   615,   616,   617,   618,    -1,    -1,    -1,    -1,    -1,
      -1,   625,   626,    -1,   628,   629,   630,    -1,     5,   633,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    32,    -1,    -1,    -1,    36,
      -1,    -1,    -1,    40,    -1,    -1,    43,    44,    45,    -1,
      47,    -1,    49,    50,    -1,    -1,    53,    -1,    -1,    56,
      57,    -1,    59,    60,    -1,    62,    63,    -1,    65,    66,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      77,    78,    79,    -1,    81,    82,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    -1,    93,    94,    95,    96,
      97,    -1,    99,    -1,    -1,   102,    -1,    -1,   105,    -1,
     107,    -1,   109,    -1,   111,    -1,    -1,    -1,   115,   116,
     117,    -1,    -1,   120,    -1,    -1,    -1,    -1,   125,   126,
      -1,    -1,    -1,    -1,   131,    -1,   133,    -1,    -1,    -1,
     137,    -1,   139,   140,   141,   142,   143,    -1,    -1,    -1,
     147,    -1,    -1,   150,   151,   152,    -1,    -1,    -1,   156,
      -1,   158,   159,    -1,   161,   162,   163,    -1,    -1,   166,
     167,    -1,   169,   170,   171,   172,   173,   174,   175,    -1,
      -1,   178,   179,   180,    -1,    -1,   183,   184,    -1,   186,
     187,   188,    -1,    -1,   191,    -1,    -1,    -1,   195,    -1,
     197,    -1,   199,    -1,   201,   202,   203,   204,   205,    -1,
     207,    -1,   209,    -1,    -1,    -1,   213,   214,   215,    -1,
     217,    -1,    -1,    -1,   221,   222,    -1,    -1,    -1,   226,
     227,   228,   229,    -1,    -1,   232,   233,   234,    -1,   236,
      -1,   238,    -1,    -1,    -1,    -1,   243,   244,    -1,    -1,
      -1,   248,    -1,   250,   251,    -1,   253,   254,    -1,    -1,
      -1,   258,    -1,    -1,   261,   262,   263,    -1,    -1,   266,
      -1,    -1,   269,   270,    -1,    -1,    -1,    -1,    -1,   276,
     277,    -1,   279,    -1,   281,    -1,   283,   284,    -1,    -1,
     287,    -1,    -1,    -1,    -1,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,    -1,   309,   310,   311,   312,    -1,   314,   315,   316,
     317,    -1,   319,   320,    -1,    -1,    -1,    -1,   325,   326,
     327,   328,   329,   330,    -1,    -1,   333,   334,    -1,   336,
      -1,   338,    -1,   340,   341,   342,   343,   344,   345,   346,
     347,   348,    -1,    -1,   351,   352,    -1,    -1,   355,   356,
     357,   358,    -1,    -1,    -1,   362,   363,    -1,    -1,   366,
     367,    -1,   369,   370,   371,    -1,   373,   374,   375,   376,
      -1,   378,   379,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   388,   389,   390,    -1,   392,   393,    -1,   395,    -1,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
      -1,    -1,   409,   410,   411,    -1,   413,    -1,   415,   416,
     417,   418,   419,    -1,   421,   422,   423,    -1,    -1,   426,
      -1,    -1,    -1,   430,   431,   432,   433,   434,    -1,    -1,
     437,   438,   439,   440,   441,    -1,   443,   444,    -1,   446,
     447,   448,    -1,    -1,   451,    -1,   453,    -1,   455,   456,
      -1,   458,   459,   460,    -1,    -1,    -1,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,    -1,   476,
     477,    -1,    -1,    -1,   481,   482,   483,   484,    -1,    -1,
      -1,   488,    -1,    -1,    -1,   492,    -1,   494,   495,   496,
     497,   498,   499,    -1,   501,   502,   503,   504,   505,   506,
      -1,    -1,    -1,    -1,    -1,    -1,   513,   514,    -1,   516,
      -1,    -1,   519,    -1,    -1,   522,   523,    -1,    -1,    -1,
     527,    -1,    -1,   530,   531,    -1,   533,   534,   535,   536,
     537,   538,    -1,    -1,   541,   542,   543,   544,    -1,   546,
     547,    -1,   549,    -1,   551,   552,   553,   554,    -1,    -1,
     557,   558,    -1,   560,   561,   562,   563,    -1,    -1,    -1,
      -1,    -1,   569,   570,   571,    -1,    -1,    -1,   575,   576,
     577,   578,   579,   580,   581,    -1,   583,   584,    -1,   586,
     587,    -1,    -1,   590,    -1,    -1,   593,    -1,   595,    -1,
     597,   598,   599,    -1,    -1,    -1,    -1,    -1,    -1,   606,
      -1,    -1,   609,    -1,    -1,    -1,   613,   614,   615,   616,
     617,   618,    -1,    -1,    -1,    -1,    -1,    -1,   625,   626,
      -1,   628,   629,   630,    -1,     5,   633,     7,     8,     9,
      10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,
      -1,    21,    -1,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    -1,    -1,    35,    36,    -1,    -1,    -1,
      40,    -1,    -1,    43,    44,    45,    -1,    47,    -1,    49,
      50,    -1,    -1,    53,    -1,    -1,    56,    57,    -1,    59,
      60,    -1,    62,    63,    -1,    65,    66,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    77,    78,    79,
      -1,    81,    82,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    -1,    93,    94,    95,    96,    97,    -1,    99,
      -1,    -1,   102,    -1,    -1,   105,    -1,   107,    -1,   109,
      -1,   111,    -1,    -1,    -1,   115,   116,   117,    -1,    -1,
     120,    -1,    -1,    -1,    -1,   125,   126,    -1,    -1,    -1,
     130,   131,    -1,   133,    -1,    -1,    -1,   137,    -1,   139,
     140,   141,   142,   143,    -1,    -1,    -1,   147,    -1,    -1,
     150,   151,   152,    -1,    -1,    -1,   156,    -1,   158,   159,
      -1,   161,   162,   163,    -1,    -1,   166,   167,    -1,   169,
     170,   171,   172,   173,   174,   175,    -1,    -1,   178,   179,
     180,    -1,    -1,   183,   184,    -1,   186,   187,   188,    -1,
      -1,   191,    -1,    -1,    -1,   195,    -1,   197,    -1,   199,
      -1,   201,   202,   203,   204,   205,    -1,   207,    -1,   209,
      -1,    -1,    -1,   213,   214,   215,    -1,   217,    -1,    -1,
      -1,   221,   222,    -1,    -1,    -1,   226,   227,   228,   229,
      -1,    -1,   232,   233,   234,    -1,   236,    -1,   238,    -1,
      -1,    -1,    -1,   243,   244,    -1,    -1,    -1,   248,    -1,
     250,   251,    -1,   253,   254,    -1,    -1,    -1,   258,    -1,
      -1,   261,   262,   263,    -1,    -1,   266,    -1,    -1,   269,
     270,   271,    -1,    -1,    -1,    -1,   276,   277,    -1,   279,
      -1,   281,    -1,   283,   284,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,    -1,   309,
     310,   311,   312,    -1,   314,   315,   316,   317,    -1,   319,
     320,    -1,    -1,    -1,    -1,   325,   326,   327,   328,   329,
     330,    -1,    -1,   333,   334,    -1,   336,    -1,   338,    -1,
     340,   341,   342,   343,   344,   345,   346,   347,   348,    -1,
      -1,   351,   352,    -1,    -1,   355,   356,   357,   358,    -1,
      -1,    -1,   362,   363,    -1,    -1,    -1,   367,    -1,   369,
     370,   371,    -1,   373,   374,   375,   376,    -1,   378,   379,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   388,   389,
     390,    -1,    -1,   393,    -1,   395,    -1,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,    -1,    -1,   409,
     410,   411,    -1,   413,    -1,   415,   416,   417,   418,   419,
      -1,   421,   422,   423,    -1,    -1,   426,    -1,    -1,    -1,
     430,   431,   432,   433,   434,    -1,    -1,   437,   438,   439,
     440,   441,    -1,   443,   444,    -1,   446,   447,   448,    -1,
      -1,   451,    -1,   453,    -1,   455,   456,    -1,   458,   459,
     460,    -1,    -1,    -1,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,    -1,   476,   477,    -1,    -1,
      -1,   481,   482,   483,   484,    -1,    -1,    -1,   488,    -1,
      -1,    -1,   492,    -1,   494,   495,   496,   497,   498,   499,
      -1,   501,   502,   503,   504,   505,   506,    -1,    -1,    -1,
      -1,    -1,    -1,   513,   514,    -1,   516,    -1,    -1,   519,
      -1,    -1,   522,   523,    -1,    -1,    -1,   527,    -1,    -1,
     530,   531,    -1,   533,   534,   535,   536,   537,   538,    -1,
      -1,   541,   542,   543,   544,    -1,   546,   547,    -1,   549,
      -1,   551,   552,   553,   554,    -1,   556,   557,   558,    -1,
     560,   561,   562,   563,    -1,    -1,    -1,    -1,    -1,   569,
     570,   571,    -1,    -1,    -1,   575,   576,   577,   578,    -1,
     580,   581,    -1,   583,   584,    -1,   586,   587,    -1,    -1,
     590,    -1,    -1,   593,    -1,   595,    -1,   597,   598,   599,
      -1,    -1,    -1,    -1,    -1,    -1,   606,    -1,    -1,   609,
      -1,    -1,    -1,   613,   614,   615,   616,   617,   618,    -1,
      -1,    -1,    -1,    -1,    -1,   625,   626,    -1,   628,   629,
     630,    -1,     5,   633,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,
      23,    24,    25,    26,    27,    28,    29,    30,    -1,    32,
      -1,    -1,    -1,    36,    -1,    -1,    -1,    40,    -1,    -1,
      43,    44,    45,    -1,    47,    -1,    49,    50,    -1,    -1,
      53,    -1,    -1,    56,    57,    -1,    59,    60,    -1,    62,
      63,    -1,    65,    66,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    78,    79,    -1,    81,    82,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    -1,
      93,    94,    95,    96,    97,    -1,    99,    -1,    -1,   102,
      -1,    -1,   105,    -1,   107,    -1,   109,    -1,   111,    -1,
      -1,    -1,   115,   116,   117,    -1,    -1,   120,    -1,    -1,
      -1,    -1,   125,   126,    -1,    -1,    -1,    -1,   131,    -1,
     133,    -1,    -1,    -1,   137,    -1,   139,   140,   141,   142,
     143,    -1,    -1,    -1,   147,    -1,    -1,   150,   151,   152,
      -1,    -1,    -1,   156,    -1,   158,   159,    -1,   161,   162,
     163,    -1,    -1,   166,   167,    -1,   169,   170,   171,   172,
     173,   174,   175,    -1,    -1,   178,   179,   180,    -1,    -1,
     183,   184,    -1,   186,   187,   188,    -1,    -1,   191,    -1,
      -1,    -1,   195,    -1,   197,    -1,   199,    -1,   201,   202,
     203,   204,   205,    -1,   207,    -1,   209,    -1,    -1,    -1,
     213,   214,   215,    -1,   217,    -1,    -1,    -1,   221,   222,
      -1,    -1,    -1,   226,   227,   228,   229,    -1,    -1,   232,
     233,   234,    -1,   236,    -1,   238,    -1,    -1,    -1,    -1,
     243,   244,    -1,    -1,    -1,   248,    -1,   250,   251,    -1,
     253,   254,    -1,    -1,    -1,   258,    -1,    -1,   261,   262,
     263,    -1,    -1,   266,    -1,    -1,   269,   270,    -1,    -1,
      -1,    -1,    -1,   276,   277,    -1,   279,    -1,   281,    -1,
     283,   284,    -1,    -1,   287,    -1,    -1,    -1,    -1,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,    -1,   309,   310,   311,   312,
      -1,   314,   315,   316,   317,    -1,   319,   320,    -1,    -1,
      -1,    -1,   325,   326,   327,   328,   329,   330,    -1,    -1,
     333,   334,    -1,   336,    -1,   338,    -1,   340,   341,   342,
     343,   344,   345,   346,   347,   348,    -1,    -1,   351,   352,
      -1,    -1,   355,   356,   357,   358,    -1,    -1,    -1,   362,
     363,    -1,    -1,   366,   367,    -1,   369,   370,   371,    -1,
     373,   374,   375,   376,    -1,   378,   379,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   388,   389,   390,    -1,   392,
     393,    -1,   395,    -1,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,    -1,    -1,   409,   410,   411,    -1,
     413,    -1,   415,   416,   417,   418,   419,    -1,   421,   422,
     423,    -1,    -1,   426,    -1,    -1,    -1,   430,   431,   432,
     433,   434,    -1,    -1,   437,   438,   439,   440,   441,    -1,
     443,   444,    -1,   446,   447,   448,    -1,    -1,   451,    -1,
     453,    -1,   455,   456,    -1,   458,   459,   460,    -1,    -1,
      -1,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,    -1,   476,   477,    -1,    -1,    -1,   481,   482,
     483,   484,    -1,    -1,    -1,   488,    -1,    -1,    -1,   492,
      -1,   494,   495,   496,   497,   498,   499,    -1,   501,   502,
     503,   504,   505,   506,    -1,    -1,    -1,    -1,    -1,    -1,
     513,   514,    -1,   516,    -1,    -1,   519,    -1,    -1,   522,
     523,    -1,    -1,    -1,   527,    -1,    -1,   530,   531,    -1,
     533,   534,   535,   536,   537,   538,    -1,    -1,   541,   542,
     543,   544,    -1,   546,   547,    -1,   549,    -1,   551,   552,
     553,   554,    -1,    -1,   557,   558,    -1,   560,   561,   562,
     563,    -1,    -1,    -1,    -1,    -1,   569,   570,   571,    -1,
      -1,    -1,   575,   576,   577,   578,   579,   580,   581,    -1,
     583,   584,    -1,   586,   587,    -1,    -1,   590,    -1,    -1,
     593,    -1,   595,    -1,   597,   598,   599,    -1,    -1,    -1,
      -1,    -1,    -1,   606,    -1,    -1,   609,    -1,    -1,    -1,
     613,   614,   615,   616,   617,   618,    -1,    -1,    -1,    -1,
      -1,    -1,   625,   626,    -1,   628,   629,   630,    -1,     5,
     633,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,
      26,    27,    28,    29,    30,    -1,    32,    -1,    -1,    -1,
      36,    -1,    -1,    -1,    40,    -1,    -1,    43,    44,    45,
      -1,    47,    -1,    49,    50,    -1,    -1,    53,    -1,    -1,
      56,    57,    -1,    59,    60,    -1,    62,    63,    -1,    65,
      66,    67,    68,    69,    70,    71,    -1,    73,    74,    75,
      76,    77,    78,    79,    -1,    81,    82,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    -1,    93,    94,    95,
      96,    97,    -1,    99,    -1,    -1,   102,    -1,    -1,   105,
      -1,   107,   108,   109,    -1,   111,    -1,    -1,    -1,   115,
     116,   117,    -1,    -1,   120,    -1,    -1,    -1,    -1,   125,
     126,    -1,    -1,    -1,    -1,   131,    -1,   133,    -1,    -1,
      -1,   137,    -1,   139,   140,   141,   142,   143,    -1,    -1,
      -1,   147,    -1,    -1,   150,   151,   152,    -1,    -1,    -1,
     156,    -1,   158,   159,    -1,   161,   162,   163,    -1,    -1,
     166,   167,    -1,   169,   170,   171,   172,   173,   174,   175,
      -1,    -1,   178,   179,   180,    -1,    -1,   183,   184,    -1,
     186,   187,   188,    -1,    -1,   191,    -1,    -1,    -1,   195,
      -1,   197,    -1,   199,    -1,   201,   202,   203,   204,   205,
      -1,   207,    -1,   209,    -1,    -1,    -1,   213,   214,   215,
      -1,   217,    -1,    -1,    -1,   221,   222,    -1,    -1,    -1,
     226,   227,   228,   229,    -1,    -1,   232,   233,   234,    -1,
     236,    -1,   238,    -1,    -1,    -1,    -1,   243,   244,    -1,
      -1,    -1,   248,    -1,   250,   251,    -1,   253,   254,    -1,
      -1,    -1,   258,    -1,    -1,   261,   262,   263,    -1,    -1,
     266,    -1,    -1,   269,   270,   271,    -1,    -1,    -1,    -1,
     276,   277,    -1,   279,    -1,   281,    -1,   283,   284,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,    -1,   309,   310,   311,   312,    -1,   314,   315,
     316,   317,    -1,   319,   320,    -1,    -1,    -1,    -1,   325,
     326,   327,   328,   329,   330,    -1,    -1,   333,   334,    -1,
     336,    -1,   338,    -1,   340,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,    -1,   351,   352,    -1,    -1,   355,
     356,   357,   358,    -1,    -1,    -1,   362,   363,    -1,    -1,
      -1,   367,    -1,   369,   370,   371,    -1,   373,   374,   375,
     376,    -1,   378,   379,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   388,   389,   390,    -1,    -1,   393,    -1,   395,
      -1,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,    -1,    -1,   409,   410,   411,    -1,   413,    -1,   415,
     416,   417,   418,   419,    -1,   421,   422,   423,    -1,    -1,
     426,    -1,    -1,    -1,   430,   431,   432,   433,   434,    -1,
      -1,   437,   438,   439,   440,   441,    -1,   443,   444,    -1,
     446,   447,   448,    -1,    -1,   451,    -1,   453,    -1,   455,
     456,    -1,   458,   459,   460,    -1,    -1,    -1,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,    -1,
     476,   477,    -1,    -1,    -1,   481,   482,   483,   484,    -1,
      -1,    -1,   488,    -1,    -1,    -1,   492,    -1,   494,   495,
     496,   497,   498,   499,    -1,   501,   502,   503,   504,   505,
     506,    -1,    -1,    -1,    -1,    -1,    -1,   513,   514,    -1,
     516,    -1,    -1,   519,    -1,    -1,   522,   523,    -1,    -1,
      -1,   527,    -1,    -1,   530,   531,    -1,   533,   534,   535,
     536,   537,   538,    -1,    -1,   541,   542,   543,   544,    -1,
     546,   547,    -1,   549,    -1,   551,   552,   553,   554,    -1,
     556,   557,   558,    -1,   560,   561,   562,   563,    -1,    -1,
      -1,    -1,    -1,   569,   570,   571,    -1,    -1,    -1,   575,
     576,   577,   578,    -1,   580,   581,    -1,   583,   584,    -1,
     586,   587,    -1,    -1,   590,    -1,    -1,   593,    -1,   595,
      -1,   597,   598,   599,    -1,    -1,    -1,    -1,    -1,    -1,
     606,    -1,    -1,   609,    -1,    -1,    -1,   613,   614,   615,
     616,   617,   618,    -1,    -1,    -1,    -1,    -1,    -1,   625,
     626,    -1,   628,   629,   630,    -1,     5,   633,     7,     8,
       9,    10,    11,    12,    -1,    14,    -1,    -1,    -1,    18,
      -1,    -1,    21,    -1,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    32,    -1,    -1,    -1,    36,    -1,    -1,
      -1,    40,    -1,    -1,    43,    44,    45,    -1,    47,    -1,
      49,    50,    -1,    -1,    53,    -1,    -1,    56,    57,    -1,
      59,    60,    -1,    62,    63,    -1,    65,    66,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    78,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    -1,    93,    94,    95,    96,    97,    -1,
      99,    -1,    -1,   102,    -1,    -1,   105,    -1,   107,    -1,
     109,    -1,   111,    -1,    -1,    -1,   115,   116,   117,    -1,
      -1,   120,    -1,    -1,    -1,    -1,   125,   126,    -1,    -1,
      -1,    -1,   131,    -1,   133,    -1,    -1,    -1,   137,    -1,
     139,   140,   141,   142,   143,    -1,    -1,    -1,   147,    -1,
      -1,   150,   151,   152,    -1,    -1,    -1,   156,    -1,   158,
     159,    -1,   161,   162,   163,    -1,    -1,   166,   167,    -1,
     169,   170,   171,   172,   173,   174,   175,    -1,    -1,   178,
     179,   180,    -1,    -1,   183,   184,    -1,   186,   187,   188,
      -1,    -1,   191,    -1,    -1,    -1,   195,    -1,   197,    -1,
     199,    -1,   201,   202,   203,   204,   205,    -1,   207,    -1,
     209,    -1,    -1,    -1,   213,   214,   215,    -1,   217,    -1,
      -1,    -1,   221,   222,    -1,    -1,    -1,   226,   227,   228,
     229,    -1,    -1,   232,   233,   234,    -1,   236,    -1,   238,
      -1,    -1,    -1,    -1,   243,   244,    -1,    -1,    -1,   248,
      -1,   250,   251,    -1,   253,   254,    -1,    -1,    -1,   258,
      -1,    -1,   261,   262,   263,    -1,    -1,   266,    -1,    -1,
     269,   270,   271,    -1,    -1,    -1,    -1,   276,   277,    -1,
     279,    -1,   281,    -1,   283,   284,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,    -1,
     309,   310,   311,   312,    -1,   314,   315,   316,   317,    -1,
     319,   320,    -1,    -1,    -1,    -1,   325,   326,   327,   328,
     329,   330,    -1,    -1,   333,   334,    -1,   336,    -1,   338,
      -1,   340,   341,   342,   343,   344,   345,   346,   347,   348,
      -1,    -1,   351,   352,    -1,    -1,   355,   356,   357,   358,
      -1,    -1,    -1,   362,   363,    -1,    -1,    -1,   367,    -1,
     369,   370,   371,    -1,   373,   374,   375,   376,    -1,   378,
     379,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   388,
     389,   390,    -1,    -1,   393,    -1,   395,    -1,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,    -1,    -1,
     409,   410,   411,    -1,   413,    -1,   415,   416,   417,   418,
     419,    -1,   421,   422,   423,    -1,    -1,   426,    -1,    -1,
      -1,   430,   431,   432,   433,   434,    -1,    -1,   437,   438,
     439,   440,   441,    -1,   443,   444,    -1,   446,   447,   448,
      -1,    -1,   451,    -1,   453,    -1,   455,   456,    -1,   458,
     459,   460,    -1,    -1,    -1,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,    -1,   476,   477,    -1,
      -1,    -1,   481,   482,   483,   484,    -1,    -1,    -1,   488,
      -1,    -1,    -1,   492,    -1,   494,   495,   496,   497,   498,
     499,    -1,   501,   502,   503,   504,   505,   506,    -1,    -1,
      -1,    -1,    -1,    -1,   513,   514,    -1,   516,    -1,    -1,
     519,    -1,    -1,   522,   523,    -1,    -1,    -1,   527,    -1,
      -1,   530,   531,    -1,   533,   534,   535,   536,   537,   538,
      -1,    -1,   541,   542,   543,   544,    -1,   546,   547,    -1,
     549,    -1,   551,   552,   553,   554,    -1,   556,   557,   558,
      -1,   560,   561,   562,   563,    -1,    -1,    -1,    -1,    -1,
     569,   570,   571,    -1,    -1,    -1,   575,   576,   577,   578,
      -1,   580,   581,    -1,   583,   584,    -1,   586,   587,    -1,
      -1,   590,    -1,    -1,   593,    -1,   595,    -1,   597,   598,
     599,    -1,    -1,    -1,    -1,    -1,    -1,   606,    -1,    -1,
     609,    -1,    -1,    -1,   613,   614,   615,   616,   617,   618,
      -1,    -1,    -1,    -1,    -1,    -1,   625,   626,    -1,   628,
     629,   630,    -1,     5,   633,     7,     8,     9,    10,    11,
      -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,
      -1,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      32,    -1,    -1,    -1,    36,    -1,    -1,    -1,    40,    -1,
      -1,    43,    44,    45,    -1,    47,    -1,    49,    50,    -1,
      -1,    53,    -1,    -1,    56,    57,    -1,    59,    60,    -1,
      62,    63,    -1,    65,    66,    67,    68,    69,    70,    71,
      -1,    73,    74,    75,    76,    77,    78,    79,    -1,    81,
      82,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      -1,    93,    94,    95,    96,    97,    -1,    99,    -1,    -1,
     102,    -1,    -1,   105,    -1,   107,    -1,   109,    -1,   111,
      -1,    -1,    -1,   115,   116,   117,    -1,    -1,   120,    -1,
      -1,    -1,    -1,   125,   126,    -1,    -1,    -1,   130,   131,
      -1,   133,    -1,    -1,    -1,   137,    -1,   139,   140,   141,
     142,   143,    -1,    -1,    -1,   147,    -1,    -1,   150,   151,
     152,    -1,    -1,    -1,   156,    -1,   158,   159,    -1,   161,
     162,   163,    -1,    -1,   166,   167,    -1,   169,   170,   171,
     172,   173,   174,   175,    -1,    -1,   178,   179,   180,    -1,
      -1,   183,   184,    -1,   186,   187,   188,    -1,    -1,   191,
      -1,    -1,    -1,   195,    -1,   197,    -1,   199,    -1,   201,
     202,   203,   204,   205,    -1,   207,    -1,   209,    -1,    -1,
      -1,   213,   214,   215,    -1,   217,    -1,    -1,    -1,   221,
     222,    -1,    -1,    -1,   226,   227,   228,   229,    -1,    -1,
     232,   233,   234,    -1,   236,    -1,   238,    -1,    -1,    -1,
      -1,   243,   244,    -1,    -1,    -1,   248,    -1,   250,   251,
      -1,   253,   254,    -1,    -1,    -1,   258,    -1,    -1,   261,
     262,   263,    -1,    -1,   266,    -1,    -1,   269,   270,   271,
      -1,    -1,    -1,    -1,   276,   277,    -1,   279,    -1,   281,
      -1,   283,   284,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,    -1,   309,   310,   311,
     312,    -1,   314,   315,   316,   317,    -1,   319,   320,    -1,
      -1,    -1,    -1,   325,   326,   327,   328,   329,   330,    -1,
      -1,   333,   334,    -1,   336,    -1,   338,    -1,   340,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,    -1,   351,
     352,    -1,    -1,   355,   356,   357,   358,    -1,    -1,    -1,
     362,   363,    -1,    -1,    -1,   367,    -1,   369,   370,   371,
      -1,   373,   374,   375,   376,    -1,   378,   379,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   388,   389,   390,    -1,
      -1,   393,    -1,   395,    -1,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,    -1,    -1,   409,   410,   411,
      -1,   413,    -1,   415,   416,   417,   418,   419,    -1,   421,
     422,   423,    -1,    -1,   426,    -1,    -1,    -1,   430,   431,
     432,   433,   434,    -1,    -1,   437,   438,   439,   440,   441,
      -1,   443,   444,    -1,   446,   447,   448,    -1,    -1,   451,
      -1,   453,    -1,   455,   456,    -1,   458,   459,   460,    -1,
      -1,    -1,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,    -1,   476,   477,    -1,    -1,    -1,   481,
     482,   483,   484,    -1,    -1,    -1,   488,    -1,    -1,    -1,
     492,    -1,   494,   495,   496,   497,   498,   499,    -1,   501,
     502,   503,   504,   505,   506,    -1,    -1,    -1,    -1,    -1,
      -1,   513,   514,    -1,   516,    -1,    -1,   519,    -1,    -1,
     522,   523,    -1,    -1,    -1,   527,    -1,    -1,   530,   531,
      -1,   533,   534,   535,   536,   537,   538,    -1,    -1,   541,
     542,   543,   544,    -1,   546,   547,    -1,   549,    -1,   551,
     552,   553,   554,    -1,   556,   557,   558,    -1,   560,   561,
     562,   563,    -1,    -1,    -1,    -1,    -1,   569,   570,   571,
      -1,    -1,    -1,   575,   576,   577,   578,    -1,   580,   581,
      -1,   583,   584,    -1,   586,   587,    -1,    -1,   590,    -1,
      -1,   593,    -1,   595,    -1,   597,   598,   599,    -1,    -1,
      -1,    -1,    -1,    -1,   606,    -1,    -1,   609,    -1,    -1,
      -1,   613,   614,   615,   616,   617,   618,    -1,    -1,    -1,
      -1,    -1,    -1,   625,   626,    -1,   628,   629,   630,    -1,
       5,   633,     7,     8,     9,    10,    11,    -1,    -1,    14,
      -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,
      25,    26,    27,    28,    29,    30,    -1,    32,    -1,    -1,
      35,    36,    -1,    -1,    -1,    40,    -1,    -1,    43,    44,
      45,    -1,    47,    -1,    49,    50,    -1,    -1,    53,    -1,
      -1,    56,    57,    -1,    59,    60,    -1,    62,    63,    -1,
      65,    66,    67,    68,    69,    70,    71,    -1,    73,    74,
      75,    76,    77,    78,    79,    -1,    81,    82,    83,    84,
      85,    86,    87,    88,    -1,    90,    91,    -1,    93,    94,
      95,    96,    97,    -1,    99,    -1,    -1,   102,    -1,    -1,
     105,    -1,   107,    -1,   109,    -1,   111,    -1,    -1,    -1,
     115,   116,   117,    -1,    -1,   120,    -1,    -1,    -1,    -1,
     125,   126,    -1,    -1,    -1,    -1,   131,    -1,   133,    -1,
      -1,    -1,   137,    -1,   139,   140,   141,   142,   143,    -1,
      -1,    -1,   147,    -1,    -1,   150,   151,   152,    -1,    -1,
      -1,   156,    -1,   158,   159,    -1,   161,   162,   163,    -1,
      -1,   166,   167,    -1,   169,   170,   171,   172,   173,   174,
     175,    -1,    -1,   178,   179,   180,    -1,    -1,   183,   184,
      -1,   186,   187,   188,    -1,    -1,   191,    -1,    -1,    -1,
     195,    -1,   197,    -1,   199,    -1,   201,   202,   203,   204,
     205,    -1,   207,    -1,   209,    -1,    -1,    -1,   213,   214,
     215,    -1,   217,    -1,    -1,    -1,   221,   222,    -1,    -1,
      -1,   226,   227,   228,   229,    -1,    -1,   232,   233,   234,
      -1,   236,    -1,   238,    -1,    -1,    -1,    -1,   243,   244,
      -1,    -1,    -1,   248,    -1,   250,   251,    -1,   253,   254,
      -1,    -1,    -1,   258,    -1,    -1,   261,   262,   263,    -1,
      -1,   266,    -1,    -1,   269,   270,   271,    -1,    -1,    -1,
      -1,   276,   277,    -1,   279,    -1,   281,    -1,   283,   284,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,    -1,   309,   310,   311,   312,    -1,   314,
     315,   316,   317,    -1,   319,   320,    -1,    -1,    -1,    -1,
     325,   326,   327,   328,   329,   330,    -1,    -1,   333,   334,
      -1,   336,    -1,   338,    -1,   340,   341,   342,   343,   344,
     345,   346,   347,   348,    -1,    -1,   351,   352,    -1,    -1,
     355,   356,   357,   358,    -1,    -1,    -1,   362,   363,    -1,
      -1,    -1,   367,    -1,   369,   370,   371,    -1,   373,   374,
     375,   376,    -1,   378,   379,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   388,   389,   390,    -1,    -1,   393,    -1,
     395,    -1,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,    -1,    -1,   409,   410,   411,    -1,   413,    -1,
     415,   416,   417,   418,   419,    -1,   421,   422,   423,    -1,
      -1,   426,    -1,    -1,    -1,   430,   431,   432,   433,   434,
      -1,    -1,   437,   438,   439,   440,   441,    -1,   443,   444,
      -1,   446,   447,   448,    -1,    -1,   451,    -1,   453,    -1,
     455,   456,    -1,   458,   459,   460,    -1,    -1,    -1,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
      -1,   476,   477,    -1,    -1,    -1,   481,   482,   483,   484,
      -1,    -1,    -1,   488,    -1,    -1,    -1,   492,    -1,   494,
     495,   496,   497,   498,   499,    -1,   501,   502,   503,   504,
     505,   506,    -1,    -1,    -1,    -1,    -1,    -1,   513,   514,
      -1,   516,    -1,    -1,   519,    -1,    -1,   522,   523,    -1,
      -1,    -1,   527,    -1,    -1,   530,   531,    -1,   533,   534,
     535,   536,   537,   538,    -1,    -1,   541,   542,   543,   544,
      -1,   546,   547,    -1,   549,    -1,   551,   552,   553,   554,
      -1,   556,   557,   558,    -1,   560,   561,   562,   563,    -1,
      -1,    -1,    -1,    -1,   569,   570,   571,    -1,    -1,    -1,
     575,   576,   577,   578,    -1,   580,   581,    -1,   583,   584,
      -1,   586,   587,    -1,    -1,   590,    -1,    -1,   593,    -1,
     595,    -1,   597,   598,   599,    -1,    -1,    -1,    -1,    -1,
      -1,   606,    -1,    -1,   609,    -1,    -1,    -1,   613,   614,
     615,   616,   617,   618,    -1,    -1,    -1,    -1,    -1,    -1,
     625,   626,    -1,   628,   629,   630,    -1,     5,   633,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,    -1,    -1,    21,    -1,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    32,    -1,    -1,    -1,    36,    -1,
      -1,    -1,    40,    -1,    -1,    43,    44,    45,    -1,    47,
      -1,    49,    50,    -1,    -1,    53,    -1,    -1,    56,    57,
      -1,    59,    60,    -1,    62,    63,    -1,    65,    66,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      78,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    -1,    90,    91,    -1,    93,    94,    95,    96,    97,
      -1,    99,    -1,    -1,   102,    -1,    -1,   105,    -1,   107,
      -1,   109,    -1,   111,    -1,    -1,    -1,   115,   116,   117,
      -1,    -1,   120,    -1,    -1,    -1,    -1,   125,   126,    -1,
      -1,    -1,    -1,   131,    -1,   133,    -1,    -1,    -1,   137,
      -1,   139,   140,   141,   142,   143,    -1,    -1,    -1,   147,
      -1,    -1,   150,   151,   152,    -1,    -1,    -1,   156,    -1,
     158,   159,    -1,   161,   162,   163,    -1,    -1,   166,   167,
      -1,   169,   170,   171,   172,   173,   174,   175,    -1,    -1,
     178,   179,   180,    -1,    -1,   183,   184,    -1,   186,   187,
     188,    -1,    -1,   191,    -1,    -1,    -1,   195,    -1,   197,
      -1,   199,    -1,   201,   202,   203,   204,   205,    -1,   207,
      -1,   209,    -1,    -1,    -1,   213,   214,   215,    -1,   217,
      -1,    -1,    -1,   221,   222,    -1,    -1,    -1,   226,   227,
     228,   229,    -1,    -1,   232,   233,   234,    -1,   236,    -1,
     238,    -1,    -1,    -1,    -1,   243,   244,    -1,    -1,    -1,
     248,    -1,   250,   251,    -1,   253,   254,    -1,    -1,    -1,
     258,    -1,    -1,   261,   262,   263,    -1,    -1,   266,    -1,
      -1,   269,   270,   271,    -1,    -1,    -1,    -1,   276,   277,
      -1,   279,    -1,   281,    -1,   283,   284,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
      -1,   309,   310,   311,   312,    -1,   314,   315,   316,   317,
      -1,   319,   320,    -1,    -1,    -1,    -1,   325,   326,   327,
     328,   329,   330,    -1,    -1,   333,   334,    -1,   336,    -1,
     338,    -1,   340,   341,   342,   343,   344,   345,   346,   347,
     348,    -1,    -1,   351,   352,    -1,    -1,   355,   356,   357,
     358,    -1,    -1,    -1,   362,   363,    -1,    -1,    -1,   367,
      -1,   369,   370,   371,    -1,   373,   374,   375,   376,    -1,
     378,   379,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     388,   389,   390,    -1,    -1,   393,    -1,   395,    -1,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,    -1,
      -1,   409,   410,   411,    -1,   413,    -1,   415,   416,   417,
     418,   419,    -1,   421,   422,   423,    -1,    -1,   426,    -1,
      -1,    -1,   430,   431,   432,   433,   434,    -1,    -1,   437,
     438,   439,   440,   441,    -1,   443,   444,    -1,   446,   447,
     448,    -1,    -1,   451,    -1,   453,    -1,   455,   456,    -1,
     458,   459,   460,    -1,    -1,    -1,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,    -1,   476,   477,
      -1,    -1,    -1,   481,   482,   483,   484,    -1,    -1,    -1,
     488,    -1,    -1,    -1,   492,    -1,   494,   495,   496,   497,
     498,   499,    -1,   501,   502,   503,   504,   505,   506,    -1,
      -1,    -1,    -1,    -1,    -1,   513,   514,    -1,   516,    -1,
      -1,   519,    -1,    -1,   522,   523,    -1,    -1,    -1,   527,
      -1,    -1,   530,   531,    -1,   533,   534,   535,   536,   537,
     538,    -1,    -1,   541,   542,   543,   544,    -1,   546,   547,
      -1,   549,    -1,   551,   552,   553,   554,    -1,   556,   557,
     558,    -1,   560,   561,   562,   563,    -1,    -1,    -1,    -1,
      -1,   569,   570,   571,    -1,    -1,    -1,   575,   576,   577,
     578,    -1,   580,   581,    -1,   583,   584,    -1,   586,   587,
      -1,    -1,   590,    -1,    -1,   593,    -1,   595,    -1,   597,
     598,   599,    -1,    -1,    -1,    -1,    -1,    -1,   606,    -1,
      -1,   609,    -1,    -1,    -1,   613,   614,   615,   616,   617,
     618,    -1,    -1,    -1,    -1,    -1,    -1,   625,   626,    -1,
     628,   629,   630,    -1,     5,   633,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    19,    -1,
      21,    -1,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    32,    -1,    -1,    -1,    36,    -1,    -1,    -1,    40,
      -1,    -1,    43,    44,    45,    -1,    47,    -1,    49,    50,
      -1,    -1,    53,    -1,    -1,    56,    57,    -1,    59,    60,
      -1,    62,    63,    -1,    65,    66,    67,    68,    69,    70,
      71,    -1,    73,    74,    75,    76,    77,    78,    79,    -1,
      81,    82,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    -1,    93,    94,    95,    96,    97,    -1,    99,    -1,
      -1,   102,    -1,    -1,   105,    -1,   107,    -1,   109,    -1,
     111,    -1,    -1,    -1,   115,   116,   117,    -1,    -1,   120,
      -1,    -1,    -1,    -1,   125,   126,    -1,    -1,    -1,    -1,
     131,    -1,   133,    -1,    -1,    -1,   137,    -1,   139,   140,
     141,   142,   143,    -1,    -1,    -1,   147,    -1,    -1,   150,
     151,   152,    -1,    -1,    -1,   156,    -1,   158,   159,    -1,
     161,   162,   163,    -1,    -1,   166,   167,    -1,   169,   170,
     171,   172,   173,   174,   175,    -1,    -1,   178,   179,   180,
      -1,    -1,   183,   184,    -1,   186,   187,   188,    -1,    -1,
     191,    -1,    -1,    -1,   195,    -1,   197,    -1,   199,    -1,
     201,   202,   203,   204,   205,    -1,   207,    -1,   209,    -1,
      -1,    -1,   213,   214,   215,    -1,   217,    -1,    -1,    -1,
     221,   222,    -1,    -1,    -1,   226,   227,   228,   229,    -1,
      -1,   232,   233,   234,    -1,   236,    -1,   238,    -1,    -1,
      -1,    -1,   243,   244,    -1,    -1,    -1,   248,    -1,   250,
     251,    -1,   253,   254,    -1,    -1,    -1,   258,    -1,    -1,
     261,   262,   263,    -1,    -1,   266,    -1,    -1,   269,   270,
      -1,    -1,    -1,    -1,    -1,   276,   277,    -1,   279,    -1,
     281,    -1,   283,   284,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,    -1,   309,   310,
     311,   312,    -1,   314,   315,   316,   317,    -1,   319,   320,
      -1,    -1,    -1,    -1,   325,   326,   327,   328,   329,   330,
      -1,    -1,   333,   334,    -1,   336,    -1,   338,    -1,   340,
     341,   342,   343,   344,   345,   346,   347,   348,    -1,    -1,
     351,   352,    -1,    -1,   355,   356,   357,   358,    -1,    -1,
      -1,   362,   363,    -1,    -1,    -1,   367,    -1,   369,   370,
     371,    -1,   373,   374,   375,   376,    -1,   378,   379,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   388,   389,   390,
      -1,    -1,   393,    -1,   395,    -1,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,    -1,    -1,   409,   410,
     411,    -1,   413,    -1,   415,   416,   417,   418,   419,    -1,
     421,   422,   423,    -1,    -1,   426,    -1,    -1,    -1,   430,
     431,   432,   433,   434,    -1,    -1,   437,   438,   439,   440,
     441,    -1,   443,   444,    -1,   446,   447,   448,    -1,    -1,
     451,    -1,   453,    -1,   455,   456,    -1,   458,   459,   460,
      -1,    -1,    -1,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,    -1,   476,   477,    -1,    -1,    -1,
     481,   482,   483,   484,    -1,    -1,    -1,   488,    -1,    -1,
      -1,   492,    -1,   494,   495,   496,   497,   498,   499,    -1,
     501,   502,   503,   504,   505,   506,    -1,    -1,    -1,    -1,
      -1,    -1,   513,   514,    -1,   516,    -1,    -1,   519,    -1,
      -1,   522,   523,    -1,    -1,    -1,   527,    -1,    -1,   530,
     531,    -1,   533,   534,   535,   536,   537,   538,    -1,    -1,
     541,   542,   543,   544,    -1,   546,   547,    -1,   549,    -1,
     551,   552,   553,   554,    -1,   556,   557,   558,    -1,   560,
     561,   562,   563,    -1,    -1,    -1,    -1,    -1,   569,   570,
     571,    -1,    -1,    -1,   575,   576,   577,   578,    -1,   580,
     581,    -1,   583,   584,    -1,   586,   587,    -1,    -1,   590,
      -1,    -1,   593,    -1,   595,    -1,   597,   598,   599,    -1,
      -1,    -1,    -1,    -1,    -1,   606,    -1,    -1,   609,    -1,
      -1,    -1,   613,   614,   615,   616,   617,   618,    -1,    -1,
      -1,    -1,    -1,    -1,   625,   626,    -1,   628,   629,   630,
      -1,     5,   633,     7,     8,     9,    10,    11,    -1,    -1,
      14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    -1,
      -1,    -1,    36,    -1,    -1,    -1,    40,    -1,    -1,    43,
      44,    45,    -1,    47,    -1,    49,    50,    -1,    -1,    53,
      -1,    -1,    56,    57,    -1,    59,    60,    -1,    62,    63,
      -1,    65,    66,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    78,    79,    -1,    81,    82,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    -1,    93,
      94,    95,    96,    97,    98,    99,    -1,    -1,   102,    -1,
      -1,   105,    -1,   107,    -1,   109,    -1,   111,    -1,    -1,
      -1,   115,   116,   117,    -1,    -1,   120,    -1,    -1,    -1,
      -1,   125,   126,    -1,    -1,    -1,    -1,   131,    -1,   133,
      -1,    -1,    -1,   137,    -1,   139,   140,   141,   142,   143,
      -1,    -1,    -1,   147,    -1,    -1,   150,   151,   152,    -1,
      -1,    -1,   156,    -1,   158,   159,    -1,   161,   162,   163,
      -1,    -1,   166,   167,    -1,   169,   170,   171,   172,   173,
     174,   175,    -1,   177,   178,   179,   180,    -1,    -1,   183,
     184,    -1,   186,   187,   188,    -1,    -1,   191,    -1,    -1,
      -1,   195,    -1,   197,    -1,   199,    -1,   201,   202,   203,
     204,   205,    -1,   207,    -1,   209,    -1,    -1,    -1,   213,
     214,   215,    -1,   217,    -1,    -1,    -1,   221,   222,    -1,
      -1,    -1,   226,   227,   228,   229,    -1,    -1,   232,   233,
     234,    -1,   236,    -1,   238,    -1,    -1,    -1,    -1,   243,
     244,    -1,    -1,    -1,   248,    -1,   250,   251,    -1,   253,
     254,    -1,    -1,    -1,   258,    -1,    -1,   261,   262,   263,
      -1,    -1,   266,    -1,    -1,   269,   270,    -1,    -1,    -1,
      -1,    -1,   276,   277,    -1,   279,    -1,   281,    -1,   283,
     284,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,    -1,   309,   310,   311,   312,    -1,
     314,   315,   316,   317,    -1,   319,   320,    -1,    -1,    -1,
      -1,   325,   326,   327,   328,   329,   330,    -1,    -1,   333,
     334,    -1,   336,    -1,   338,    -1,   340,   341,   342,   343,
     344,   345,   346,   347,   348,    -1,    -1,   351,   352,    -1,
      -1,   355,   356,   357,   358,    -1,    -1,    -1,   362,   363,
      -1,    -1,    -1,   367,    -1,   369,   370,   371,    -1,   373,
     374,   375,   376,    -1,   378,   379,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   388,   389,   390,    -1,    -1,   393,
      -1,   395,    -1,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,    -1,    -1,   409,   410,   411,    -1,   413,
      -1,   415,   416,   417,   418,   419,    -1,   421,   422,   423,
      -1,    -1,   426,    -1,    -1,    -1,   430,   431,   432,   433,
     434,    -1,    -1,   437,   438,   439,   440,   441,    -1,   443,
     444,    -1,   446,   447,   448,    -1,    -1,   451,    -1,   453,
      -1,   455,   456,    -1,   458,   459,   460,    -1,    -1,    -1,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,    -1,   476,   477,    -1,    -1,    -1,   481,   482,   483,
     484,    -1,    -1,    -1,   488,    -1,    -1,    -1,   492,    -1,
     494,   495,   496,   497,   498,   499,    -1,   501,   502,   503,
     504,   505,   506,    -1,    -1,    -1,    -1,    -1,    -1,   513,
     514,    -1,   516,    -1,    -1,   519,    -1,    -1,   522,   523,
      -1,    -1,    -1,   527,    -1,    -1,   530,   531,    -1,   533,
     534,   535,   536,   537,   538,    -1,    -1,   541,   542,   543,
     544,    -1,   546,   547,    -1,   549,    -1,   551,   552,   553,
     554,    -1,    -1,   557,   558,    -1,   560,   561,   562,   563,
      -1,    -1,    -1,    -1,    -1,   569,   570,   571,    -1,    -1,
      -1,   575,   576,   577,   578,    -1,   580,   581,    -1,   583,
     584,    -1,   586,   587,    -1,    -1,   590,    -1,    -1,   593,
      -1,   595,    -1,   597,   598,   599,    -1,    -1,    -1,    -1,
      -1,    -1,   606,    -1,    -1,   609,    -1,    -1,    -1,   613,
     614,   615,   616,   617,   618,    -1,    -1,    -1,    -1,    -1,
      -1,   625,   626,    -1,   628,   629,   630,    -1,     5,   633,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    32,    -1,    -1,    -1,    36,
      -1,    -1,    -1,    40,    -1,    -1,    43,    44,    45,    -1,
      47,    -1,    49,    50,    -1,    -1,    53,    -1,    -1,    56,
      57,    -1,    59,    60,    -1,    62,    63,    -1,    65,    66,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      77,    78,    79,    -1,    81,    82,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    -1,    93,    94,    95,    96,
      97,    -1,    99,    -1,    -1,   102,    -1,    -1,   105,    -1,
     107,    -1,   109,    -1,   111,    -1,    -1,    -1,   115,   116,
     117,    -1,    -1,   120,    -1,    -1,    -1,    -1,   125,   126,
      -1,    -1,    -1,    -1,   131,    -1,   133,    -1,    -1,    -1,
     137,    -1,   139,   140,   141,   142,   143,    -1,    -1,    -1,
     147,    -1,    -1,   150,   151,   152,    -1,    -1,    -1,   156,
      -1,   158,   159,    -1,   161,   162,   163,    -1,    -1,   166,
     167,    -1,   169,   170,   171,   172,   173,   174,   175,    -1,
      -1,   178,   179,   180,    -1,    -1,   183,   184,    -1,   186,
     187,   188,    -1,    -1,   191,    -1,    -1,    -1,   195,    -1,
     197,    -1,   199,    -1,   201,   202,   203,   204,   205,    -1,
     207,    -1,   209,    -1,    -1,    -1,   213,   214,   215,    -1,
     217,    -1,    -1,    -1,   221,   222,    -1,    -1,    -1,   226,
     227,   228,   229,    -1,    -1,   232,   233,   234,    -1,   236,
      -1,   238,    -1,    -1,    -1,    -1,   243,   244,    -1,    -1,
      -1,   248,    -1,   250,   251,    -1,   253,   254,    -1,    -1,
      -1,   258,    -1,    -1,   261,   262,   263,    -1,    -1,   266,
      -1,    -1,   269,   270,    -1,    -1,    -1,    -1,    -1,   276,
     277,    -1,   279,    -1,   281,    -1,   283,   284,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,    -1,   309,   310,   311,   312,    -1,   314,   315,   316,
     317,    -1,   319,   320,    -1,    -1,    -1,    -1,   325,   326,
     327,   328,   329,   330,    -1,    -1,   333,   334,    -1,   336,
      -1,   338,    -1,   340,   341,   342,   343,   344,   345,   346,
     347,   348,    -1,    -1,   351,   352,    -1,    -1,   355,   356,
     357,   358,    -1,    -1,    -1,   362,   363,    -1,    -1,    -1,
     367,    -1,   369,   370,   371,    -1,   373,   374,   375,   376,
      -1,   378,   379,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   388,   389,   390,    -1,    -1,   393,    -1,   395,    -1,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
      -1,    -1,   409,   410,   411,    -1,   413,    -1,   415,   416,
     417,   418,   419,    -1,   421,   422,   423,    -1,    -1,   426,
      -1,    -1,    -1,   430,   431,   432,   433,   434,    -1,    -1,
     437,   438,   439,   440,   441,    -1,   443,   444,    -1,   446,
     447,   448,    -1,    -1,   451,    -1,   453,    -1,   455,   456,
      -1,   458,   459,   460,    -1,    -1,    -1,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,    -1,   476,
     477,    -1,    -1,    -1,   481,   482,   483,   484,    -1,    -1,
      -1,   488,    -1,    -1,    -1,   492,    -1,   494,   495,   496,
     497,   498,   499,    -1,   501,   502,   503,   504,   505,   506,
      -1,    -1,    -1,   510,    -1,    -1,   513,   514,    -1,   516,
      -1,    -1,   519,    -1,    -1,   522,   523,    -1,    -1,    -1,
     527,    -1,    -1,   530,   531,    -1,   533,   534,   535,   536,
     537,   538,    -1,    -1,   541,   542,   543,   544,    -1,   546,
     547,    -1,   549,    -1,   551,   552,   553,   554,    -1,    -1,
     557,   558,    -1,   560,   561,   562,   563,    -1,    -1,    -1,
      -1,    -1,   569,   570,   571,    -1,    -1,    -1,   575,   576,
     577,   578,    -1,   580,   581,    -1,   583,   584,    -1,   586,
     587,    -1,    -1,   590,    -1,    -1,   593,    -1,   595,    -1,
     597,   598,   599,    -1,    -1,    -1,    -1,    -1,    -1,   606,
      -1,    -1,   609,    -1,    -1,    -1,   613,   614,   615,   616,
     617,   618,    -1,    -1,    -1,    -1,    -1,    -1,   625,   626,
      -1,   628,   629,   630,    -1,     5,   633,     7,     8,     9,
      10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,
      -1,    21,    -1,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    -1,    -1,    -1,    36,    -1,    -1,    -1,
      40,    -1,    -1,    43,    44,    45,    -1,    47,    -1,    49,
      50,    -1,    -1,    53,    -1,    -1,    56,    57,    -1,    59,
      60,    -1,    62,    63,    -1,    65,    66,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    77,    78,    79,
      -1,    81,    82,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    -1,    93,    94,    95,    96,    97,    -1,    99,
      -1,    -1,   102,    -1,    -1,   105,    -1,   107,    -1,   109,
      -1,   111,    -1,    -1,    -1,   115,   116,   117,    -1,    -1,
     120,    -1,    -1,    -1,    -1,   125,   126,    -1,    -1,    -1,
      -1,   131,    -1,   133,    -1,    -1,    -1,   137,    -1,   139,
     140,   141,   142,   143,    -1,    -1,    -1,   147,    -1,    -1,
     150,   151,   152,    -1,    -1,    -1,   156,    -1,   158,   159,
      -1,   161,   162,   163,    -1,    -1,   166,   167,    -1,   169,
     170,   171,   172,   173,   174,   175,    -1,    -1,   178,   179,
     180,    -1,    -1,   183,   184,    -1,   186,   187,   188,    -1,
      -1,   191,    -1,    -1,    -1,   195,   196,   197,    -1,   199,
      -1,   201,   202,   203,   204,   205,    -1,   207,    -1,   209,
      -1,    -1,    -1,   213,   214,   215,    -1,   217,    -1,    -1,
      -1,   221,   222,    -1,    -1,    -1,   226,   227,   228,   229,
      -1,    -1,   232,   233,   234,    -1,   236,    -1,   238,    -1,
      -1,    -1,    -1,   243,   244,    -1,    -1,    -1,   248,    -1,
     250,   251,    -1,   253,   254,    -1,    -1,    -1,   258,    -1,
      -1,   261,   262,   263,    -1,    -1,   266,    -1,    -1,   269,
     270,    -1,    -1,    -1,    -1,    -1,   276,   277,    -1,   279,
      -1,   281,    -1,   283,   284,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,    -1,   309,
     310,   311,   312,    -1,   314,   315,   316,   317,    -1,   319,
     320,    -1,    -1,    -1,    -1,   325,   326,   327,   328,   329,
     330,    -1,    -1,   333,   334,    -1,   336,    -1,   338,    -1,
     340,   341,   342,   343,   344,   345,   346,   347,   348,    -1,
      -1,   351,   352,    -1,    -1,   355,   356,   357,   358,    -1,
      -1,    -1,   362,   363,    -1,    -1,    -1,   367,    -1,   369,
     370,   371,    -1,   373,   374,   375,   376,    -1,   378,   379,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   388,   389,
     390,    -1,    -1,   393,    -1,   395,    -1,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,    -1,    -1,   409,
     410,   411,    -1,   413,    -1,   415,   416,   417,   418,   419,
      -1,   421,   422,   423,    -1,    -1,   426,    -1,    -1,    -1,
     430,   431,   432,   433,   434,    -1,    -1,   437,   438,   439,
     440,   441,    -1,   443,   444,    -1,   446,   447,   448,    -1,
      -1,   451,    -1,   453,    -1,   455,   456,    -1,   458,   459,
     460,    -1,    -1,    -1,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,    -1,   476,   477,    -1,    -1,
      -1,   481,   482,   483,   484,    -1,    -1,    -1,   488,    -1,
      -1,    -1,   492,    -1,   494,   495,   496,   497,   498,   499,
      -1,   501,   502,   503,   504,   505,   506,    -1,    -1,    -1,
      -1,    -1,    -1,   513,   514,    -1,   516,    -1,    -1,   519,
      -1,    -1,   522,   523,    -1,    -1,    -1,   527,    -1,    -1,
     530,   531,    -1,   533,   534,   535,   536,   537,   538,    -1,
      -1,   541,   542,   543,   544,    -1,   546,   547,    -1,   549,
      -1,   551,   552,   553,   554,    -1,    -1,   557,   558,    -1,
     560,   561,   562,   563,    -1,    -1,    -1,    -1,    -1,   569,
     570,   571,    -1,    -1,    -1,   575,   576,   577,   578,    -1,
     580,   581,    -1,   583,   584,    -1,   586,   587,    -1,    -1,
     590,    -1,    -1,   593,    -1,   595,    -1,   597,   598,   599,
      -1,    -1,    -1,    -1,    -1,    -1,   606,    -1,    -1,   609,
      -1,    -1,    -1,   613,   614,   615,   616,   617,   618,    -1,
      -1,    -1,    -1,    -1,    -1,   625,   626,    -1,   628,   629,
     630,    -1,     5,   633,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,
      23,    24,    25,    26,    27,    28,    29,    30,    -1,    32,
      -1,    -1,    -1,    36,    -1,    -1,    -1,    40,    -1,    -1,
      43,    44,    45,    -1,    47,    -1,    49,    50,    -1,    -1,
      53,    -1,    -1,    56,    57,    -1,    59,    60,    -1,    62,
      63,    -1,    65,    66,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    78,    79,    -1,    81,    82,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    -1,
      93,    94,    95,    96,    97,    -1,    99,    -1,    -1,   102,
      -1,    -1,   105,    -1,   107,    -1,   109,    -1,   111,    -1,
      -1,    -1,   115,   116,   117,    -1,    -1,   120,    -1,    -1,
      -1,    -1,   125,   126,    -1,    -1,    -1,   130,   131,    -1,
     133,    -1,    -1,    -1,   137,    -1,   139,   140,   141,   142,
     143,    -1,    -1,    -1,   147,    -1,    -1,   150,   151,   152,
      -1,    -1,    -1,   156,    -1,   158,   159,    -1,   161,   162,
     163,    -1,    -1,   166,   167,    -1,   169,   170,   171,   172,
     173,   174,   175,    -1,    -1,   178,   179,   180,    -1,    -1,
     183,   184,    -1,   186,   187,   188,    -1,    -1,   191,    -1,
      -1,    -1,   195,    -1,   197,    -1,   199,    -1,   201,   202,
     203,   204,   205,    -1,   207,    -1,   209,    -1,    -1,    -1,
     213,   214,   215,    -1,   217,    -1,    -1,    -1,   221,   222,
      -1,    -1,    -1,   226,   227,   228,   229,    -1,    -1,   232,
     233,   234,    -1,   236,    -1,   238,    -1,    -1,    -1,    -1,
     243,   244,    -1,    -1,    -1,   248,    -1,   250,   251,    -1,
     253,   254,    -1,    -1,    -1,   258,    -1,    -1,   261,   262,
     263,    -1,    -1,   266,    -1,    -1,   269,   270,    -1,    -1,
      -1,    -1,    -1,   276,   277,    -1,   279,    -1,   281,    -1,
     283,   284,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,    -1,   309,   310,   311,   312,
      -1,   314,   315,   316,   317,    -1,   319,   320,    -1,    -1,
      -1,    -1,   325,   326,   327,   328,   329,   330,    -1,    -1,
     333,   334,    -1,   336,    -1,   338,    -1,   340,   341,   342,
     343,   344,   345,   346,   347,   348,    -1,    -1,   351,   352,
      -1,    -1,   355,   356,   357,   358,    -1,    -1,    -1,   362,
     363,    -1,    -1,    -1,   367,    -1,   369,   370,   371,    -1,
     373,   374,   375,   376,    -1,   378,   379,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   388,   389,   390,    -1,    -1,
     393,    -1,   395,    -1,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,    -1,    -1,   409,   410,   411,    -1,
     413,    -1,   415,   416,   417,   418,   419,    -1,   421,   422,
     423,    -1,    -1,   426,    -1,    -1,    -1,   430,   431,   432,
     433,   434,    -1,    -1,   437,   438,   439,   440,   441,    -1,
     443,   444,    -1,   446,   447,   448,    -1,    -1,   451,    -1,
     453,    -1,   455,   456,    -1,   458,   459,   460,    -1,    -1,
      -1,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,    -1,   476,   477,    -1,    -1,    -1,   481,   482,
     483,   484,    -1,    -1,    -1,   488,    -1,    -1,    -1,   492,
      -1,   494,   495,   496,   497,   498,   499,    -1,   501,   502,
     503,   504,   505,   506,    -1,    -1,    -1,    -1,    -1,    -1,
     513,   514,    -1,   516,    -1,    -1,   519,    -1,    -1,   522,
     523,    -1,    -1,    -1,   527,    -1,    -1,   530,   531,    -1,
     533,   534,   535,   536,   537,   538,    -1,    -1,   541,   542,
     543,   544,    -1,   546,   547,    -1,   549,    -1,   551,   552,
     553,   554,    -1,    -1,   557,   558,    -1,   560,   561,   562,
     563,    -1,    -1,    -1,    -1,    -1,   569,   570,   571,    -1,
      -1,    -1,   575,   576,   577,   578,    -1,   580,   581,    -1,
     583,   584,    -1,   586,   587,    -1,    -1,   590,    -1,    -1,
     593,    -1,   595,    -1,   597,   598,   599,    -1,    -1,    -1,
      -1,    -1,    -1,   606,    -1,    -1,   609,    -1,    -1,    -1,
     613,   614,   615,   616,   617,   618,    -1,    -1,    -1,    -1,
      -1,    -1,   625,   626,    -1,   628,   629,   630,    -1,     5,
     633,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,
      26,    27,    28,    29,    30,    -1,    32,    -1,    -1,    -1,
      36,    -1,    -1,    -1,    40,    -1,    -1,    43,    44,    45,
      -1,    47,    -1,    49,    50,    -1,    -1,    53,    -1,    -1,
      56,    57,    -1,    59,    60,    -1,    62,    63,    -1,    65,
      66,    67,    68,    69,    70,    71,    -1,    73,    74,    75,
      76,    77,    78,    79,    -1,    81,    82,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    -1,    93,    94,    95,
      96,    97,    -1,    99,    -1,    -1,   102,    -1,    -1,   105,
      -1,   107,    -1,   109,    -1,   111,    -1,    -1,    -1,   115,
     116,   117,    -1,    -1,   120,    -1,    -1,    -1,    -1,   125,
     126,    -1,    -1,    -1,   130,   131,    -1,   133,    -1,    -1,
      -1,   137,    -1,   139,   140,   141,   142,   143,    -1,    -1,
      -1,   147,    -1,    -1,   150,   151,   152,    -1,    -1,    -1,
     156,    -1,   158,   159,    -1,   161,   162,   163,    -1,    -1,
     166,   167,    -1,   169,   170,   171,   172,   173,   174,   175,
      -1,    -1,   178,   179,   180,    -1,    -1,   183,   184,    -1,
     186,   187,   188,    -1,    -1,   191,    -1,    -1,    -1,   195,
      -1,   197,    -1,   199,    -1,   201,   202,   203,   204,   205,
      -1,   207,    -1,   209,    -1,    -1,    -1,   213,   214,   215,
      -1,   217,    -1,    -1,    -1,   221,   222,    -1,    -1,    -1,
     226,   227,   228,   229,    -1,    -1,   232,   233,   234,    -1,
     236,    -1,   238,    -1,    -1,    -1,    -1,   243,   244,    -1,
      -1,    -1,   248,    -1,   250,   251,    -1,   253,   254,    -1,
      -1,    -1,   258,    -1,    -1,   261,   262,   263,    -1,    -1,
     266,    -1,    -1,   269,   270,    -1,    -1,    -1,    -1,    -1,
     276,   277,    -1,   279,    -1,   281,    -1,   283,   284,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,    -1,   309,   310,   311,   312,    -1,   314,   315,
     316,   317,    -1,   319,   320,    -1,    -1,    -1,    -1,   325,
     326,   327,   328,   329,   330,    -1,    -1,   333,   334,    -1,
     336,    -1,   338,    -1,   340,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,    -1,   351,   352,    -1,    -1,   355,
     356,   357,   358,    -1,    -1,    -1,   362,   363,    -1,    -1,
      -1,   367,    -1,   369,   370,   371,    -1,   373,   374,   375,
     376,    -1,   378,   379,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   388,   389,   390,    -1,    -1,   393,    -1,   395,
      -1,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,    -1,    -1,   409,   410,   411,    -1,   413,    -1,   415,
     416,   417,   418,   419,    -1,   421,   422,   423,    -1,    -1,
     426,    -1,    -1,    -1,   430,   431,   432,   433,   434,    -1,
      -1,   437,   438,   439,   440,   441,    -1,   443,   444,    -1,
     446,   447,   448,    -1,    -1,   451,    -1,   453,    -1,   455,
     456,    -1,   458,   459,   460,    -1,    -1,    -1,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,    -1,
     476,   477,    -1,    -1,    -1,   481,   482,   483,   484,    -1,
      -1,    -1,   488,    -1,    -1,    -1,   492,    -1,   494,   495,
     496,   497,   498,   499,    -1,   501,   502,   503,   504,   505,
     506,    -1,    -1,    -1,    -1,    -1,    -1,   513,   514,    -1,
     516,    -1,    -1,   519,    -1,    -1,   522,   523,    -1,    -1,
      -1,   527,    -1,    -1,   530,   531,    -1,   533,   534,   535,
     536,   537,   538,    -1,    -1,   541,   542,   543,   544,    -1,
     546,   547,    -1,   549,    -1,   551,   552,   553,   554,    -1,
      -1,   557,   558,    -1,   560,   561,   562,   563,    -1,    -1,
      -1,    -1,    -1,   569,   570,   571,    -1,    -1,    -1,   575,
     576,   577,   578,    -1,   580,   581,    -1,   583,   584,    -1,
     586,   587,    -1,    -1,   590,    -1,    -1,   593,    -1,   595,
      -1,   597,   598,   599,    -1,    -1,    -1,    -1,    -1,    -1,
     606,    -1,    -1,   609,    -1,    -1,    -1,   613,   614,   615,
     616,   617,   618,    -1,    -1,    -1,    -1,    -1,    -1,   625,
     626,    -1,   628,   629,   630,    -1,     5,   633,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      -1,    -1,    21,    -1,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    32,    -1,    -1,    -1,    36,    -1,    -1,
      -1,    40,    -1,    -1,    43,    44,    45,    -1,    47,    -1,
      49,    50,    -1,    -1,    53,    -1,    -1,    56,    57,    -1,
      59,    60,    -1,    62,    63,    -1,    65,    66,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    78,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    -1,    93,    94,    95,    96,    97,    -1,
      99,    -1,    -1,   102,    -1,    -1,   105,    -1,   107,    -1,
     109,    -1,   111,    -1,    -1,    -1,   115,   116,   117,    -1,
      -1,   120,    -1,    -1,    -1,    -1,   125,   126,    -1,    -1,
      -1,   130,   131,    -1,   133,    -1,    -1,    -1,   137,    -1,
     139,   140,   141,   142,   143,    -1,    -1,    -1,   147,    -1,
      -1,   150,   151,   152,    -1,    -1,    -1,   156,    -1,   158,
     159,    -1,   161,   162,   163,    -1,    -1,   166,   167,    -1,
     169,   170,   171,   172,   173,   174,   175,    -1,    -1,   178,
     179,   180,    -1,    -1,   183,   184,    -1,   186,   187,   188,
      -1,    -1,   191,    -1,    -1,    -1,   195,    -1,   197,    -1,
     199,    -1,   201,   202,   203,   204,   205,    -1,   207,    -1,
     209,    -1,    -1,    -1,   213,   214,   215,    -1,   217,    -1,
      -1,    -1,   221,   222,    -1,    -1,    -1,   226,   227,   228,
     229,    -1,    -1,   232,   233,   234,    -1,   236,    -1,   238,
      -1,    -1,    -1,    -1,   243,   244,    -1,    -1,    -1,   248,
      -1,   250,   251,    -1,   253,   254,    -1,    -1,    -1,   258,
      -1,    -1,   261,   262,   263,    -1,    -1,   266,    -1,    -1,
     269,   270,    -1,    -1,    -1,    -1,    -1,   276,   277,    -1,
     279,    -1,   281,    -1,   283,   284,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,    -1,
     309,   310,   311,   312,    -1,   314,   315,   316,   317,    -1,
     319,   320,    -1,    -1,    -1,    -1,   325,   326,   327,   328,
     329,   330,    -1,    -1,   333,   334,    -1,   336,    -1,   338,
      -1,   340,   341,   342,   343,   344,   345,   346,   347,   348,
      -1,    -1,   351,   352,    -1,    -1,   355,   356,   357,   358,
      -1,    -1,    -1,   362,   363,    -1,    -1,    -1,   367,    -1,
     369,   370,   371,    -1,   373,   374,   375,   376,    -1,   378,
     379,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   388,
     389,   390,    -1,    -1,   393,    -1,   395,    -1,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,    -1,    -1,
     409,   410,   411,    -1,   413,    -1,   415,   416,   417,   418,
     419,    -1,   421,   422,   423,    -1,    -1,   426,    -1,    -1,
      -1,   430,   431,   432,   433,   434,    -1,    -1,   437,   438,
     439,   440,   441,    -1,   443,   444,    -1,   446,   447,   448,
      -1,    -1,   451,    -1,   453,    -1,   455,   456,    -1,   458,
     459,   460,    -1,    -1,    -1,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,    -1,   476,   477,    -1,
      -1,    -1,   481,   482,   483,   484,    -1,    -1,    -1,   488,
      -1,    -1,    -1,   492,    -1,   494,   495,   496,   497,   498,
     499,    -1,   501,   502,   503,   504,   505,   506,    -1,    -1,
      -1,    -1,    -1,    -1,   513,   514,    -1,   516,    -1,    -1,
     519,    -1,    -1,   522,   523,    -1,    -1,    -1,   527,    -1,
      -1,   530,   531,    -1,   533,   534,   535,   536,   537,   538,
      -1,    -1,   541,   542,   543,   544,    -1,   546,   547,    -1,
     549,    -1,   551,   552,   553,   554,    -1,    -1,   557,   558,
      -1,   560,   561,   562,   563,    -1,    -1,    -1,    -1,    -1,
     569,   570,   571,    -1,    -1,    -1,   575,   576,   577,   578,
      -1,   580,   581,    -1,   583,   584,    -1,   586,   587,    -1,
      -1,   590,    -1,    -1,   593,    -1,   595,    -1,   597,   598,
     599,    -1,    -1,    -1,    -1,    -1,    -1,   606,    -1,    -1,
     609,    -1,    -1,    -1,   613,   614,   615,   616,   617,   618,
      -1,    -1,    -1,    -1,    -1,    -1,   625,   626,    -1,   628,
     629,   630,    -1,     5,   633,     7,     8,     9,    10,    11,
      -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,
      -1,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      32,    -1,    -1,    -1,    36,    -1,    -1,    -1,    40,    -1,
      -1,    43,    44,    45,    -1,    47,    -1,    49,    50,    -1,
      -1,    53,    -1,    -1,    56,    57,    -1,    59,    60,    -1,
      62,    63,    -1,    65,    66,    67,    68,    69,    70,    71,
      -1,    73,    74,    75,    76,    77,    78,    79,    -1,    81,
      82,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      -1,    93,    94,    95,    96,    97,    -1,    99,    -1,    -1,
     102,    -1,    -1,   105,    -1,   107,    -1,   109,    -1,   111,
      -1,    -1,    -1,   115,   116,   117,    -1,    -1,   120,    -1,
      -1,    -1,    -1,   125,   126,    -1,    -1,    -1,    -1,   131,
      -1,   133,    -1,    -1,    -1,   137,    -1,   139,   140,   141,
     142,   143,    -1,    -1,    -1,   147,    -1,    -1,   150,   151,
     152,    -1,    -1,    -1,   156,    -1,   158,   159,    -1,   161,
     162,   163,    -1,    -1,   166,   167,    -1,   169,   170,   171,
     172,   173,   174,   175,    -1,    -1,   178,   179,   180,    -1,
      -1,   183,   184,    -1,   186,   187,   188,    -1,    -1,   191,
      -1,    -1,    -1,   195,    -1,   197,    -1,   199,    -1,   201,
     202,   203,   204,   205,    -1,   207,    -1,   209,    -1,    -1,
      -1,   213,   214,   215,    -1,   217,    -1,    -1,    -1,   221,
     222,    -1,    -1,    -1,   226,   227,   228,   229,    -1,    -1,
     232,   233,   234,    -1,   236,    -1,   238,    -1,    -1,    -1,
      -1,   243,   244,    -1,    -1,    -1,   248,    -1,   250,   251,
      -1,   253,   254,    -1,    -1,    -1,   258,    -1,    -1,   261,
     262,   263,    -1,    -1,   266,    -1,    -1,   269,   270,    -1,
      -1,    -1,    -1,    -1,   276,   277,    -1,   279,    -1,   281,
      -1,   283,   284,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,    -1,   309,   310,   311,
     312,    -1,   314,   315,   316,   317,    -1,   319,   320,    -1,
      -1,    -1,    -1,   325,   326,   327,   328,   329,   330,    -1,
      -1,   333,   334,    -1,   336,    -1,   338,    -1,   340,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,    -1,   351,
     352,    -1,    -1,   355,   356,   357,   358,    -1,    -1,    -1,
     362,   363,    -1,    -1,    -1,   367,    -1,   369,   370,   371,
      -1,   373,   374,   375,   376,    -1,   378,   379,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   388,   389,   390,    -1,
      -1,   393,    -1,   395,    -1,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,    -1,    -1,   409,   410,   411,
     412,   413,    -1,   415,   416,   417,   418,   419,    -1,   421,
     422,   423,    -1,    -1,   426,    -1,    -1,    -1,   430,   431,
     432,   433,   434,    -1,    -1,   437,   438,   439,   440,   441,
      -1,   443,   444,    -1,   446,   447,   448,    -1,    -1,   451,
      -1,   453,    -1,   455,   456,    -1,   458,   459,   460,    -1,
      -1,    -1,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,    -1,   476,   477,    -1,    -1,    -1,   481,
     482,   483,   484,    -1,    -1,    -1,   488,    -1,    -1,    -1,
     492,    -1,   494,   495,   496,   497,   498,   499,    -1,   501,
     502,   503,   504,   505,   506,    -1,    -1,    -1,    -1,    -1,
      -1,   513,   514,    -1,   516,    -1,    -1,   519,    -1,    -1,
     522,   523,    -1,    -1,    -1,   527,    -1,    -1,   530,   531,
      -1,   533,   534,   535,   536,   537,   538,    -1,    -1,   541,
     542,   543,   544,    -1,   546,   547,    -1,   549,    -1,   551,
     552,   553,   554,    -1,    -1,   557,   558,    -1,   560,   561,
     562,   563,    -1,    -1,    -1,    -1,    -1,   569,   570,   571,
      -1,    -1,    -1,   575,   576,   577,   578,    -1,   580,   581,
      -1,   583,   584,    -1,   586,   587,    -1,    -1,   590,    -1,
      -1,   593,    -1,   595,    -1,   597,   598,   599,    -1,    -1,
      -1,    -1,    -1,    -1,   606,    -1,    -1,   609,    -1,    -1,
      -1,   613,   614,   615,   616,   617,   618,    -1,    -1,    -1,
      -1,    -1,    -1,   625,   626,    -1,   628,   629,   630,    -1,
       5,   633,     7,     8,     9,    10,    11,    -1,    -1,    14,
      -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,
      25,    26,    27,    28,    29,    30,    -1,    32,    -1,    -1,
      -1,    36,    -1,    -1,    -1,    40,    -1,    -1,    43,    44,
      45,    -1,    47,    -1,    49,    50,    -1,    -1,    53,    -1,
      -1,    56,    57,    -1,    59,    60,    -1,    62,    63,    -1,
      65,    66,    67,    68,    69,    70,    71,    -1,    73,    74,
      75,    76,    77,    78,    79,    -1,    81,    82,    83,    84,
      85,    86,    87,    88,    -1,    90,    91,    -1,    93,    94,
      95,    96,    97,    -1,    99,    -1,    -1,   102,    -1,    -1,
     105,    -1,   107,    -1,   109,    -1,   111,    -1,    -1,    -1,
     115,   116,   117,    -1,    -1,   120,    -1,    -1,    -1,    -1,
     125,   126,    -1,    -1,    -1,    -1,   131,    -1,   133,    -1,
      -1,    -1,   137,    -1,   139,   140,   141,   142,   143,    -1,
      -1,    -1,   147,    -1,    -1,   150,   151,   152,    -1,    -1,
      -1,   156,    -1,   158,   159,    -1,   161,   162,   163,    -1,
      -1,   166,   167,    -1,   169,   170,   171,   172,   173,   174,
     175,    -1,    -1,   178,   179,   180,    -1,    -1,   183,   184,
      -1,   186,   187,   188,    -1,    -1,   191,    -1,    -1,    -1,
     195,    -1,   197,    -1,   199,    -1,   201,   202,   203,   204,
     205,    -1,   207,    -1,   209,    -1,    -1,    -1,   213,   214,
     215,    -1,   217,    -1,    -1,    -1,   221,   222,    -1,    -1,
      -1,   226,   227,   228,   229,    -1,    -1,   232,   233,   234,
      -1,   236,    -1,   238,    -1,    -1,    -1,    -1,   243,   244,
      -1,    -1,    -1,   248,    -1,   250,   251,    -1,   253,   254,
      -1,    -1,    -1,   258,    -1,    -1,   261,   262,   263,    -1,
      -1,   266,    -1,    -1,   269,   270,    -1,    -1,    -1,    -1,
      -1,   276,   277,    -1,   279,    -1,   281,    -1,   283,   284,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,    -1,   309,   310,   311,   312,    -1,   314,
     315,   316,   317,    -1,   319,   320,    -1,    -1,    -1,    -1,
     325,   326,   327,   328,   329,   330,    -1,    -1,   333,   334,
      -1,   336,    -1,   338,    -1,   340,   341,   342,   343,   344,
     345,   346,   347,   348,    -1,    -1,   351,   352,    -1,    -1,
     355,   356,   357,   358,    -1,    -1,    -1,   362,   363,    -1,
      -1,    -1,   367,    -1,   369,   370,   371,    -1,   373,   374,
     375,   376,    -1,   378,   379,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   388,   389,   390,    -1,    -1,   393,    -1,
     395,    -1,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,    -1,    -1,   409,   410,   411,    -1,   413,    -1,
     415,   416,   417,   418,   419,    -1,   421,   422,   423,    -1,
      -1,   426,    -1,    -1,    -1,   430,   431,   432,   433,   434,
      -1,    -1,   437,   438,   439,   440,   441,    -1,   443,   444,
      -1,   446,   447,   448,    -1,    -1,   451,    -1,   453,    -1,
     455,   456,    -1,   458,   459,   460,    -1,    -1,    -1,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
      -1,   476,   477,    -1,    -1,    -1,   481,   482,   483,   484,
      -1,    -1,    -1,   488,    -1,    -1,    -1,   492,    -1,   494,
     495,   496,   497,   498,   499,    -1,   501,   502,   503,   504,
     505,   506,    -1,    -1,    -1,    -1,    -1,    -1,   513,   514,
      -1,   516,    -1,    -1,   519,    -1,    -1,   522,   523,    -1,
      -1,    -1,   527,    -1,    -1,   530,   531,    -1,   533,   534,
     535,   536,   537,   538,    -1,    -1,   541,   542,   543,   544,
      -1,   546,   547,    -1,   549,    -1,   551,   552,   553,   554,
      -1,   556,   557,   558,    -1,   560,   561,   562,   563,    -1,
      -1,    -1,    -1,    -1,   569,   570,   571,    -1,    -1,    -1,
     575,   576,   577,   578,    -1,   580,   581,    -1,   583,   584,
      -1,   586,   587,    -1,    -1,   590,    -1,    -1,   593,    -1,
     595,    -1,   597,   598,   599,    -1,    -1,    -1,    -1,    -1,
      -1,   606,    -1,    -1,   609,    -1,    -1,    -1,   613,   614,
     615,   616,   617,   618,    -1,    -1,    -1,    -1,    -1,    -1,
     625,   626,    -1,   628,   629,   630,    -1,     5,   633,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,    -1,    -1,    21,    -1,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    32,    -1,    -1,    -1,    36,    -1,
      -1,    -1,    40,    -1,    -1,    43,    44,    45,    -1,    47,
      -1,    49,    50,    -1,    -1,    53,    -1,    -1,    56,    57,
      -1,    59,    60,    -1,    62,    63,    -1,    65,    66,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      78,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    -1,    90,    91,    -1,    93,    94,    95,    96,    97,
      -1,    99,    -1,    -1,   102,    -1,    -1,   105,    -1,   107,
      -1,   109,    -1,   111,    -1,    -1,    -1,   115,   116,   117,
      -1,    -1,   120,    -1,    -1,    -1,    -1,   125,   126,    -1,
      -1,    -1,   130,   131,    -1,   133,    -1,    -1,    -1,   137,
      -1,   139,   140,   141,   142,   143,    -1,    -1,    -1,   147,
      -1,    -1,   150,   151,   152,    -1,    -1,    -1,   156,    -1,
     158,   159,    -1,   161,   162,   163,    -1,    -1,   166,   167,
      -1,   169,   170,   171,   172,   173,   174,   175,    -1,    -1,
     178,   179,   180,    -1,    -1,   183,   184,    -1,   186,   187,
     188,    -1,    -1,   191,    -1,    -1,    -1,   195,    -1,   197,
      -1,   199,    -1,   201,   202,   203,   204,   205,    -1,   207,
      -1,   209,    -1,    -1,    -1,   213,   214,   215,    -1,   217,
      -1,    -1,    -1,   221,   222,    -1,    -1,    -1,   226,   227,
     228,   229,    -1,    -1,   232,   233,   234,    -1,   236,    -1,
     238,    -1,    -1,    -1,    -1,   243,   244,    -1,    -1,    -1,
     248,    -1,   250,   251,    -1,   253,   254,    -1,    -1,    -1,
     258,    -1,    -1,   261,   262,   263,    -1,    -1,   266,    -1,
      -1,   269,   270,    -1,    -1,    -1,    -1,    -1,   276,   277,
      -1,   279,    -1,   281,    -1,   283,   284,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
      -1,   309,   310,   311,   312,    -1,   314,   315,   316,   317,
      -1,   319,   320,    -1,    -1,    -1,    -1,   325,   326,   327,
     328,   329,   330,    -1,    -1,   333,   334,    -1,   336,    -1,
     338,    -1,   340,   341,   342,   343,   344,   345,   346,   347,
     348,    -1,    -1,   351,   352,    -1,    -1,   355,   356,   357,
     358,    -1,    -1,    -1,   362,   363,    -1,    -1,    -1,   367,
      -1,   369,   370,   371,    -1,   373,   374,   375,   376,    -1,
     378,   379,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     388,   389,   390,    -1,    -1,   393,    -1,   395,    -1,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,    -1,
      -1,   409,   410,   411,    -1,   413,    -1,   415,   416,   417,
     418,   419,    -1,   421,   422,   423,    -1,    -1,   426,    -1,
      -1,    -1,   430,   431,   432,   433,   434,    -1,    -1,   437,
     438,   439,   440,   441,    -1,   443,   444,    -1,   446,   447,
     448,    -1,    -1,   451,    -1,   453,    -1,   455,   456,    -1,
     458,   459,   460,    -1,    -1,    -1,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,    -1,   476,   477,
      -1,    -1,    -1,   481,   482,   483,   484,    -1,    -1,    -1,
     488,    -1,    -1,    -1,   492,    -1,   494,   495,   496,   497,
     498,   499,    -1,   501,   502,   503,   504,   505,   506,    -1,
      -1,    -1,    -1,    -1,    -1,   513,   514,    -1,   516,    -1,
      -1,   519,    -1,    -1,   522,   523,    -1,    -1,    -1,   527,
      -1,    -1,   530,   531,    -1,   533,   534,   535,   536,   537,
     538,    -1,    -1,   541,   542,   543,   544,    -1,   546,   547,
      -1,   549,    -1,   551,   552,   553,   554,    -1,    -1,   557,
     558,    -1,   560,   561,   562,   563,    -1,    -1,    -1,    -1,
      -1,   569,   570,   571,    -1,    -1,    -1,   575,   576,   577,
     578,    -1,   580,   581,    -1,   583,   584,    -1,   586,   587,
      -1,    -1,   590,    -1,    -1,   593,    -1,   595,    -1,   597,
     598,   599,    -1,    -1,    -1,    -1,    -1,    -1,   606,    -1,
      -1,   609,    -1,    -1,    -1,   613,   614,   615,   616,   617,
     618,    -1,    -1,    -1,    -1,    -1,    -1,   625,   626,    -1,
     628,   629,   630,    -1,     5,   633,     7,     8,     9,    10,
      11,    12,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      21,    -1,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    32,    -1,    -1,    -1,    36,    -1,    -1,    -1,    40,
      -1,    -1,    43,    44,    45,    -1,    47,    -1,    49,    50,
      -1,    -1,    53,    -1,    -1,    56,    57,    -1,    59,    60,
      -1,    62,    63,    -1,    65,    66,    67,    68,    69,    70,
      71,    -1,    73,    74,    75,    76,    77,    78,    79,    -1,
      81,    82,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    -1,    93,    94,    95,    96,    97,    -1,    99,    -1,
      -1,   102,    -1,    -1,   105,    -1,   107,    -1,   109,    -1,
     111,    -1,    -1,    -1,   115,   116,   117,    -1,    -1,   120,
      -1,    -1,    -1,    -1,   125,   126,    -1,    -1,    -1,    -1,
     131,    -1,   133,    -1,    -1,    -1,   137,    -1,   139,   140,
     141,   142,   143,    -1,    -1,    -1,   147,    -1,    -1,   150,
     151,   152,    -1,    -1,    -1,   156,    -1,   158,   159,    -1,
     161,   162,   163,    -1,    -1,   166,   167,    -1,   169,   170,
     171,   172,   173,   174,   175,    -1,    -1,   178,   179,   180,
      -1,    -1,   183,   184,    -1,   186,   187,   188,    -1,    -1,
     191,    -1,    -1,    -1,   195,    -1,   197,    -1,   199,    -1,
     201,   202,   203,   204,   205,    -1,   207,    -1,   209,    -1,
      -1,    -1,   213,   214,   215,    -1,   217,    -1,    -1,    -1,
     221,   222,    -1,    -1,    -1,   226,   227,   228,   229,    -1,
      -1,   232,   233,   234,    -1,   236,    -1,   238,    -1,    -1,
      -1,    -1,   243,   244,    -1,    -1,    -1,   248,    -1,   250,
     251,    -1,   253,   254,    -1,    -1,    -1,   258,    -1,    -1,
     261,   262,   263,    -1,    -1,   266,    -1,    -1,   269,   270,
      -1,    -1,    -1,    -1,    -1,   276,   277,    -1,   279,    -1,
     281,    -1,   283,   284,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,    -1,   309,   310,
     311,   312,    -1,   314,   315,   316,   317,    -1,   319,   320,
      -1,    -1,    -1,    -1,   325,   326,   327,   328,   329,   330,
      -1,    -1,   333,   334,    -1,   336,    -1,   338,    -1,   340,
     341,   342,   343,   344,   345,   346,   347,   348,    -1,    -1,
     351,   352,    -1,    -1,   355,   356,   357,   358,    -1,    -1,
      -1,   362,   363,    -1,    -1,    -1,   367,    -1,   369,   370,
     371,    -1,   373,   374,   375,   376,    -1,   378,   379,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   388,   389,   390,
      -1,    -1,   393,    -1,   395,    -1,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,    -1,    -1,   409,   410,
     411,    -1,   413,    -1,   415,   416,   417,   418,   419,    -1,
     421,   422,   423,    -1,    -1,   426,    -1,    -1,    -1,   430,
     431,   432,   433,   434,    -1,    -1,   437,   438,   439,   440,
     441,    -1,   443,   444,    -1,   446,   447,   448,    -1,    -1,
     451,    -1,   453,    -1,   455,   456,    -1,   458,   459,   460,
      -1,    -1,    -1,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,    -1,   476,   477,    -1,    -1,    -1,
     481,   482,   483,   484,    -1,    -1,    -1,   488,    -1,    -1,
      -1,   492,    -1,   494,   495,   496,   497,   498,   499,    -1,
     501,   502,   503,   504,   505,   506,    -1,    -1,    -1,    -1,
      -1,    -1,   513,   514,    -1,   516,    -1,    -1,   519,    -1,
      -1,   522,   523,    -1,    -1,    -1,   527,    -1,    -1,   530,
     531,    -1,   533,   534,   535,   536,   537,   538,    -1,    -1,
     541,   542,   543,   544,    -1,   546,   547,    -1,   549,    -1,
     551,   552,   553,   554,    -1,    -1,   557,   558,    -1,   560,
     561,   562,   563,    -1,    -1,    -1,    -1,    -1,   569,   570,
     571,    -1,    -1,    -1,   575,   576,   577,   578,    -1,   580,
     581,    -1,   583,   584,    -1,   586,   587,    -1,    -1,   590,
      -1,    -1,   593,    -1,   595,    -1,   597,   598,   599,    -1,
      -1,    -1,    -1,    -1,    -1,   606,    -1,    -1,   609,    -1,
      -1,    -1,   613,   614,   615,   616,   617,   618,    -1,    -1,
      -1,    -1,    -1,    -1,   625,   626,    -1,   628,   629,   630,
      -1,     5,   633,     7,     8,     9,    10,    11,    -1,    -1,
      14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    -1,
      -1,    -1,    36,    -1,    -1,    -1,    40,    -1,    -1,    43,
      44,    45,    -1,    47,    -1,    49,    50,    -1,    -1,    53,
      -1,    -1,    56,    57,    -1,    59,    60,    -1,    62,    63,
      -1,    65,    66,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    78,    79,    -1,    81,    82,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    -1,    93,
      94,    95,    96,    97,    -1,    99,    -1,    -1,   102,    -1,
      -1,   105,    -1,   107,    -1,   109,    -1,   111,    -1,    -1,
      -1,   115,   116,   117,    -1,    -1,   120,    -1,    -1,    -1,
      -1,   125,   126,    -1,    -1,    -1,   130,   131,    -1,   133,
      -1,    -1,    -1,   137,    -1,   139,   140,   141,   142,   143,
      -1,    -1,    -1,   147,    -1,    -1,   150,   151,   152,    -1,
      -1,    -1,   156,    -1,   158,   159,    -1,   161,   162,   163,
      -1,    -1,   166,   167,    -1,   169,   170,   171,   172,   173,
     174,   175,    -1,    -1,   178,   179,   180,    -1,    -1,   183,
     184,    -1,   186,   187,   188,    -1,    -1,   191,    -1,    -1,
      -1,   195,    -1,   197,    -1,   199,    -1,   201,   202,   203,
     204,   205,    -1,   207,    -1,   209,    -1,    -1,    -1,   213,
     214,   215,    -1,   217,    -1,    -1,    -1,   221,   222,    -1,
      -1,    -1,   226,   227,   228,   229,    -1,    -1,   232,   233,
     234,    -1,   236,    -1,   238,    -1,    -1,    -1,    -1,   243,
     244,    -1,    -1,    -1,   248,    -1,   250,   251,    -1,   253,
     254,    -1,    -1,    -1,   258,    -1,    -1,   261,   262,   263,
      -1,    -1,   266,    -1,    -1,   269,   270,    -1,    -1,    -1,
      -1,    -1,   276,   277,    -1,   279,    -1,   281,    -1,   283,
     284,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,    -1,   309,   310,   311,   312,    -1,
     314,   315,   316,   317,    -1,   319,   320,    -1,    -1,    -1,
      -1,   325,   326,   327,   328,   329,   330,    -1,    -1,   333,
     334,    -1,   336,    -1,   338,    -1,   340,   341,   342,   343,
     344,   345,   346,   347,   348,    -1,    -1,   351,   352,    -1,
      -1,   355,   356,   357,   358,    -1,    -1,    -1,   362,   363,
      -1,    -1,    -1,   367,    -1,   369,   370,   371,    -1,   373,
     374,   375,   376,    -1,   378,   379,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   388,   389,   390,    -1,    -1,   393,
      -1,   395,    -1,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,    -1,    -1,   409,   410,   411,    -1,   413,
      -1,   415,   416,   417,   418,   419,    -1,   421,   422,   423,
      -1,    -1,   426,    -1,    -1,    -1,   430,   431,   432,   433,
     434,    -1,    -1,   437,   438,   439,   440,   441,    -1,   443,
     444,    -1,   446,   447,   448,    -1,    -1,   451,    -1,   453,
      -1,   455,   456,    -1,   458,   459,   460,    -1,    -1,    -1,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,    -1,   476,   477,    -1,    -1,    -1,   481,   482,   483,
     484,    -1,    -1,    -1,   488,    -1,    -1,    -1,   492,    -1,
     494,   495,   496,   497,   498,   499,    -1,   501,   502,   503,
     504,   505,   506,    -1,    -1,    -1,    -1,    -1,    -1,   513,
     514,    -1,   516,    -1,    -1,   519,    -1,    -1,   522,   523,
      -1,    -1,    -1,   527,    -1,    -1,   530,   531,    -1,   533,
     534,   535,   536,   537,   538,    -1,    -1,   541,   542,   543,
     544,    -1,   546,   547,    -1,   549,    -1,   551,   552,   553,
     554,    -1,    -1,   557,   558,    -1,   560,   561,   562,   563,
      -1,    -1,    -1,    -1,    -1,   569,   570,   571,    -1,    -1,
      -1,   575,   576,   577,   578,    -1,   580,   581,    -1,   583,
     584,    -1,   586,   587,    -1,    -1,   590,    -1,    -1,   593,
      -1,   595,    -1,   597,   598,   599,    -1,    -1,    -1,    -1,
      -1,    -1,   606,    -1,    -1,   609,    -1,    -1,    -1,   613,
     614,   615,   616,   617,   618,    -1,    -1,    -1,    -1,    -1,
      -1,   625,   626,    -1,   628,   629,   630,    -1,     5,   633,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    32,    -1,    -1,    -1,    36,
      -1,    -1,    -1,    40,    -1,    -1,    43,    44,    45,    -1,
      47,    -1,    49,    50,    -1,    -1,    53,    -1,    -1,    56,
      57,    -1,    59,    60,    -1,    62,    63,    -1,    65,    66,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      77,    78,    79,    -1,    81,    82,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    -1,    93,    94,    95,    96,
      97,    -1,    99,    -1,    -1,   102,    -1,    -1,   105,    -1,
     107,    -1,   109,    -1,   111,    -1,    -1,    -1,   115,   116,
     117,    -1,    -1,   120,    -1,    -1,    -1,    -1,   125,   126,
      -1,    -1,    -1,    -1,   131,    -1,   133,    -1,    -1,    -1,
     137,    -1,   139,   140,   141,   142,   143,    -1,    -1,    -1,
     147,    -1,    -1,   150,   151,   152,    -1,    -1,    -1,   156,
      -1,   158,   159,    -1,   161,   162,   163,    -1,    -1,   166,
     167,    -1,   169,   170,   171,   172,   173,   174,   175,    -1,
      -1,   178,   179,   180,    -1,    -1,   183,   184,    -1,   186,
     187,   188,    -1,    -1,   191,    -1,    -1,    -1,   195,    -1,
     197,    -1,   199,    -1,   201,   202,   203,   204,   205,    -1,
     207,    -1,   209,    -1,    -1,    -1,   213,   214,   215,    -1,
     217,    -1,    -1,    -1,   221,   222,    -1,    -1,    -1,   226,
     227,   228,   229,    -1,    -1,   232,   233,   234,    -1,   236,
      -1,   238,    -1,    -1,    -1,    -1,   243,   244,    -1,    -1,
      -1,   248,    -1,   250,   251,    -1,   253,   254,    -1,    -1,
      -1,   258,    -1,    -1,   261,   262,   263,    -1,    -1,   266,
      -1,    -1,   269,   270,    -1,    -1,    -1,    -1,    -1,   276,
     277,    -1,   279,    -1,   281,    -1,   283,   284,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,    -1,   309,   310,   311,   312,    -1,   314,   315,   316,
     317,    -1,   319,   320,    -1,    -1,    -1,    -1,   325,   326,
     327,   328,   329,   330,    -1,    -1,   333,   334,    -1,   336,
      -1,   338,    -1,   340,   341,   342,   343,   344,   345,   346,
     347,   348,    -1,    -1,   351,   352,    -1,    -1,   355,   356,
     357,   358,    -1,    -1,    -1,   362,   363,    -1,    -1,    -1,
     367,    -1,   369,   370,   371,    -1,   373,   374,   375,   376,
      -1,   378,   379,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   388,   389,   390,    -1,    -1,   393,    -1,   395,    -1,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
      -1,    -1,   409,   410,   411,   412,   413,    -1,   415,   416,
     417,   418,   419,    -1,   421,   422,   423,    -1,    -1,   426,
      -1,    -1,    -1,   430,   431,   432,   433,   434,    -1,    -1,
     437,   438,   439,   440,   441,    -1,   443,   444,    -1,   446,
     447,   448,    -1,    -1,   451,    -1,   453,    -1,   455,   456,
      -1,   458,   459,   460,    -1,    -1,    -1,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,    -1,   476,
     477,    -1,    -1,    -1,   481,   482,   483,   484,    -1,    -1,
      -1,   488,    -1,    -1,    -1,   492,    -1,   494,   495,   496,
     497,   498,   499,    -1,   501,   502,   503,   504,   505,   506,
      -1,    -1,    -1,    -1,    -1,    -1,   513,   514,    -1,   516,
      -1,    -1,   519,    -1,    -1,   522,   523,    -1,    -1,    -1,
     527,    -1,    -1,   530,   531,    -1,   533,   534,   535,   536,
     537,   538,    -1,    -1,   541,   542,   543,   544,    -1,   546,
     547,    -1,   549,    -1,   551,   552,   553,   554,    -1,    -1,
     557,   558,    -1,   560,   561,   562,   563,    -1,    -1,    -1,
      -1,    -1,   569,   570,   571,    -1,    -1,    -1,   575,   576,
     577,   578,    -1,   580,   581,    -1,   583,   584,    -1,   586,
     587,    -1,    -1,   590,    -1,    -1,   593,    -1,   595,    -1,
     597,   598,   599,    -1,    -1,    -1,    -1,    -1,    -1,   606,
      -1,    -1,   609,    -1,    -1,    -1,   613,   614,   615,   616,
     617,   618,    -1,    -1,    -1,    -1,    -1,    -1,   625,   626,
      -1,   628,   629,   630,    -1,     5,   633,     7,     8,     9,
      10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,
      -1,    21,    -1,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    -1,    -1,    -1,    36,    -1,    -1,    -1,
      40,    -1,    -1,    43,    44,    45,    -1,    47,    -1,    49,
      50,    -1,    -1,    53,    -1,    -1,    56,    57,    -1,    59,
      60,    -1,    62,    63,    -1,    65,    66,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    77,    78,    79,
      -1,    81,    82,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    -1,    93,    94,    95,    96,    97,    -1,    99,
      -1,    -1,   102,    -1,    -1,   105,    -1,   107,    -1,   109,
      -1,   111,    -1,    -1,    -1,   115,   116,   117,    -1,    -1,
     120,    -1,    -1,    -1,    -1,   125,   126,    -1,    -1,    -1,
      -1,   131,    -1,   133,    -1,    -1,    -1,   137,    -1,   139,
     140,   141,   142,   143,    -1,    -1,    -1,   147,    -1,    -1,
     150,   151,   152,    -1,    -1,    -1,   156,    -1,   158,   159,
      -1,   161,   162,   163,    -1,    -1,   166,   167,    -1,   169,
     170,   171,   172,   173,   174,   175,    -1,    -1,   178,   179,
     180,    -1,    -1,   183,   184,    -1,   186,   187,   188,    -1,
      -1,   191,    -1,    -1,    -1,   195,    -1,   197,    -1,   199,
      -1,   201,   202,   203,   204,   205,    -1,   207,    -1,   209,
      -1,    -1,    -1,   213,   214,   215,    -1,   217,    -1,    -1,
      -1,   221,   222,    -1,    -1,    -1,   226,   227,   228,   229,
      -1,    -1,   232,   233,   234,    -1,   236,    -1,   238,    -1,
      -1,    -1,    -1,   243,   244,    -1,    -1,    -1,   248,    -1,
     250,   251,    -1,   253,   254,    -1,    -1,    -1,   258,    -1,
      -1,   261,   262,   263,    -1,    -1,   266,    -1,    -1,   269,
     270,    -1,    -1,    -1,    -1,    -1,   276,   277,    -1,   279,
      -1,   281,    -1,   283,   284,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,    -1,   309,
     310,   311,   312,    -1,   314,   315,   316,   317,    -1,   319,
     320,    -1,    -1,    -1,    -1,   325,   326,   327,   328,   329,
     330,    -1,    -1,   333,   334,    -1,   336,    -1,   338,    -1,
     340,   341,   342,   343,   344,   345,   346,   347,   348,    -1,
      -1,   351,   352,    -1,    -1,   355,   356,   357,   358,    -1,
      -1,    -1,   362,   363,    -1,    -1,    -1,   367,    -1,   369,
     370,   371,    -1,   373,   374,   375,   376,    -1,   378,   379,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   388,   389,
     390,    -1,    -1,   393,    -1,   395,    -1,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,    -1,    -1,   409,
     410,   411,    -1,   413,    -1,   415,   416,   417,   418,   419,
      -1,   421,   422,   423,    -1,    -1,   426,    -1,    -1,    -1,
     430,   431,   432,   433,   434,    -1,    -1,   437,   438,   439,
     440,   441,    -1,   443,   444,    -1,   446,   447,   448,    -1,
      -1,   451,    -1,   453,    -1,   455,   456,    -1,   458,   459,
     460,    -1,    -1,    -1,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,    -1,   476,   477,    -1,    -1,
      -1,   481,   482,   483,   484,    -1,    -1,    -1,   488,    -1,
      -1,    -1,   492,    -1,   494,   495,   496,   497,   498,   499,
      -1,   501,   502,   503,   504,   505,   506,    -1,    -1,    -1,
      -1,    -1,    -1,   513,   514,    -1,   516,    -1,    -1,   519,
      -1,    -1,   522,   523,    -1,    -1,    -1,   527,    -1,    -1,
     530,   531,    -1,   533,   534,   535,   536,   537,   538,    -1,
      -1,   541,   542,   543,   544,    -1,   546,   547,    -1,   549,
      -1,   551,   552,   553,   554,    -1,    -1,   557,   558,    -1,
     560,   561,   562,   563,    -1,    -1,    -1,    -1,    -1,   569,
     570,   571,    -1,    -1,    -1,   575,   576,   577,   578,    -1,
     580,   581,    -1,   583,   584,    -1,   586,   587,    -1,    -1,
     590,    -1,    -1,   593,    -1,   595,    -1,   597,   598,   599,
      -1,    -1,    -1,    -1,    -1,    -1,   606,    -1,    -1,   609,
      -1,    -1,    -1,   613,   614,   615,   616,   617,   618,    -1,
      -1,    -1,    -1,    -1,    -1,   625,   626,    -1,   628,   629,
     630,    -1,     5,   633,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,
      23,    24,    25,    26,    27,    28,    29,    30,    -1,    32,
      -1,    -1,    -1,    36,    -1,    -1,    -1,    40,    -1,    -1,
      43,    44,    45,    -1,    47,    -1,    49,    50,    -1,    -1,
      53,    -1,    -1,    56,    57,    -1,    59,    60,    -1,    62,
      63,    -1,    65,    66,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    78,    79,    -1,    81,    82,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    -1,
      93,    94,    95,    96,    97,    -1,    99,    -1,    -1,   102,
      -1,    -1,   105,    -1,   107,    -1,   109,    -1,   111,    -1,
      -1,    -1,   115,   116,   117,    -1,    -1,   120,    -1,    -1,
      -1,    -1,   125,   126,    -1,    -1,    -1,    -1,   131,    -1,
     133,    -1,    -1,    -1,   137,    -1,   139,   140,   141,   142,
     143,    -1,    -1,    -1,   147,    -1,    -1,   150,   151,   152,
      -1,    -1,    -1,   156,    -1,   158,   159,    -1,   161,   162,
     163,    -1,    -1,   166,   167,    -1,   169,   170,   171,   172,
     173,   174,   175,    -1,    -1,   178,   179,   180,    -1,    -1,
     183,   184,    -1,   186,   187,   188,    -1,    -1,   191,    -1,
      -1,    -1,   195,    -1,   197,    -1,   199,    -1,   201,   202,
     203,   204,   205,    -1,   207,    -1,   209,    -1,    -1,    -1,
     213,   214,   215,    -1,   217,    -1,    -1,    -1,   221,   222,
      -1,    -1,    -1,   226,   227,   228,   229,    -1,    -1,   232,
     233,   234,    -1,   236,    -1,   238,    -1,    -1,    -1,    -1,
     243,   244,    -1,    -1,    -1,   248,    -1,   250,   251,    -1,
     253,   254,    -1,    -1,    -1,   258,    -1,    -1,   261,   262,
     263,    -1,    -1,   266,    -1,    -1,   269,   270,    -1,    -1,
      -1,    -1,    -1,   276,   277,    -1,   279,    -1,   281,    -1,
     283,   284,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,    -1,   309,   310,   311,   312,
      -1,   314,   315,   316,   317,    -1,   319,   320,    -1,    -1,
      -1,    -1,   325,   326,   327,   328,   329,   330,    -1,    -1,
     333,   334,    -1,   336,    -1,   338,    -1,   340,   341,   342,
     343,   344,   345,   346,   347,   348,    -1,    -1,   351,   352,
      -1,    -1,   355,   356,   357,   358,    -1,    -1,    -1,   362,
     363,    -1,    -1,    -1,   367,    -1,   369,   370,   371,    -1,
     373,   374,   375,   376,    -1,   378,   379,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   388,   389,   390,    -1,    -1,
     393,    -1,   395,    -1,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,    -1,    -1,   409,   410,   411,    -1,
     413,    -1,   415,   416,   417,   418,   419,    -1,   421,   422,
     423,    -1,    -1,   426,    -1,    -1,    -1,   430,   431,   432,
     433,   434,    -1,    -1,   437,   438,   439,   440,   441,    -1,
     443,   444,    -1,   446,   447,   448,    -1,    -1,   451,    -1,
     453,    -1,   455,   456,    -1,   458,   459,   460,    -1,    -1,
      -1,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,    -1,   476,   477,    -1,    -1,    -1,   481,   482,
     483,   484,    -1,    -1,    -1,   488,    -1,    -1,    -1,   492,
      -1,   494,   495,   496,   497,   498,   499,    -1,   501,   502,
     503,   504,   505,   506,    -1,    -1,    -1,    -1,    -1,    -1,
     513,   514,    -1,   516,    -1,    -1,   519,    -1,    -1,   522,
     523,    -1,    -1,    -1,   527,    -1,    -1,   530,   531,    -1,
     533,   534,   535,   536,   537,   538,    -1,    -1,   541,   542,
     543,   544,    -1,   546,   547,    -1,   549,    -1,   551,   552,
     553,   554,    -1,    -1,   557,   558,    -1,   560,   561,   562,
     563,    -1,    -1,    -1,    -1,    -1,   569,   570,   571,    -1,
      -1,    -1,   575,   576,   577,   578,    -1,   580,   581,    -1,
     583,   584,    -1,   586,   587,    -1,    -1,   590,    -1,    -1,
     593,    -1,   595,    -1,   597,   598,   599,    -1,    -1,    -1,
      -1,    -1,    -1,   606,    -1,    -1,   609,    -1,    -1,    -1,
     613,   614,   615,   616,   617,   618,    -1,    -1,    -1,    -1,
      -1,    -1,   625,   626,    -1,   628,   629,   630,    -1,     5,
     633,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    -1,    -1,    23,    24,    25,
      26,    27,    28,    29,    -1,    -1,    32,    -1,    -1,    -1,
      36,    -1,    -1,    -1,    40,    -1,    -1,    43,    44,    45,
      -1,    47,    -1,    -1,    -1,    -1,    -1,    53,    54,    -1,
      56,    57,    -1,    59,    -1,    -1,    -1,    -1,    -1,    65,
      66,    67,    68,    69,    70,    71,    -1,    73,    74,    -1,
      -1,    -1,    -1,    -1,    -1,    81,    -1,    83,    -1,    85,
      86,    87,    88,    -1,    90,    91,    -1,    93,    94,    95,
      -1,    97,    -1,    99,    -1,    -1,   102,    -1,    -1,   105,
      -1,   107,    -1,   109,    -1,   111,    -1,    -1,    -1,   115,
     116,   117,    -1,    -1,   120,    -1,    -1,    -1,    -1,   125,
      -1,    -1,    -1,    -1,    -1,   131,    -1,   133,    -1,    -1,
      -1,   137,    -1,   139,   140,   141,   142,   143,    -1,    -1,
      -1,    -1,    -1,    -1,   150,   151,   152,    -1,   154,   155,
     156,    -1,   158,   159,    -1,   161,   162,   163,    -1,    -1,
     166,   167,    -1,   169,   170,   171,   172,   173,    -1,    -1,
      -1,    -1,   178,   179,   180,    -1,    -1,   183,   184,   185,
     186,   187,   188,    -1,    -1,    -1,    -1,    -1,    -1,   195,
      -1,   197,    -1,   199,    -1,   201,   202,   203,   204,   205,
      -1,   207,    -1,   209,    -1,    -1,    -1,    -1,   214,   215,
      -1,    -1,    -1,    -1,    -1,    -1,   222,    -1,    -1,    -1,
     226,   227,   228,   229,   230,    -1,   232,   233,   234,    -1,
     236,    -1,   238,    -1,    -1,    -1,    -1,   243,    -1,    -1,
      -1,    -1,   248,    -1,   250,   251,    -1,   253,   254,   255,
      -1,    -1,   258,    -1,    -1,    -1,   262,   263,    -1,    -1,
     266,   267,    -1,   269,   270,    -1,    -1,    -1,    -1,    -1,
     276,   277,    -1,   279,    -1,   281,    -1,   283,   284,    -1,
      -1,    -1,    -1,   289,    -1,    -1,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,    -1,   309,   310,   311,   312,    -1,   314,   315,
     316,   317,    -1,   319,   320,    -1,    -1,    -1,    -1,   325,
     326,   327,   328,   329,   330,    -1,    -1,   333,   334,    -1,
     336,    -1,   338,    -1,   340,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,    -1,   351,   352,    -1,    -1,   355,
     356,   357,   358,    -1,    -1,    -1,    -1,   363,    -1,    -1,
      -1,   367,    -1,   369,   370,   371,    -1,   373,   374,   375,
     376,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   389,   390,    -1,    -1,    -1,    -1,   395,
      -1,   397,   398,   399,   400,   401,   402,   403,   404,   405,
      -1,    -1,    -1,    -1,   410,   411,    -1,   413,    -1,   415,
     416,   417,   418,   419,    -1,   421,   422,   423,    -1,    -1,
     426,    -1,    -1,    -1,   430,   431,   432,   433,   434,    -1,
      -1,   437,   438,   439,   440,   441,    -1,   443,    -1,    -1,
     446,    -1,   448,   449,    -1,   451,    -1,    -1,    -1,   455,
      -1,    -1,   458,   459,   460,   461,    -1,    -1,    -1,   465,
     466,   467,   468,   469,   470,   471,    -1,   473,   474,    -1,
     476,    -1,    -1,    -1,    -1,   481,   482,   483,    -1,    -1,
      -1,    -1,   488,    -1,    -1,    -1,   492,    -1,    -1,   495,
      -1,    -1,   498,   499,    -1,   501,    -1,   503,    -1,   505,
     506,    -1,    -1,    -1,    -1,    -1,    -1,   513,   514,    -1,
     516,    -1,    -1,   519,    -1,    -1,   522,    -1,    -1,    -1,
      -1,   527,    -1,    -1,    -1,   531,    -1,   533,   534,   535,
     536,   537,   538,    -1,    -1,   541,   542,   543,   544,    -1,
     546,   547,    -1,   549,    -1,   551,   552,   553,   554,    -1,
      -1,   557,   558,    -1,   560,   561,   562,   563,    -1,    -1,
      -1,    -1,    -1,   569,   570,   571,    -1,    -1,    -1,    -1,
     576,   577,   578,    -1,   580,   581,    -1,   583,   584,    -1,
      -1,    -1,    -1,    -1,   590,    -1,    -1,   593,    -1,    -1,
      -1,   597,   598,   599,    -1,    -1,    -1,    -1,    -1,    -1,
     606,    -1,    -1,   609,    -1,    -1,    -1,   613,   614,   615,
     616,   617,   618,    -1,    -1,   621,    -1,    -1,    -1,   625,
      -1,    -1,   628,    -1,   630,    -1,     5,   633,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      -1,    -1,    -1,    -1,    23,    24,    25,    26,    27,    28,
      29,    -1,    -1,    32,    -1,    -1,    -1,    36,    -1,    -1,
      -1,    40,    -1,    -1,    43,    44,    45,    -1,    47,    -1,
      -1,    -1,    -1,    -1,    53,    54,    -1,    56,    57,    -1,
      59,    -1,    -1,    -1,    -1,    -1,    65,    66,    67,    68,
      69,    70,    71,    -1,    73,    74,    -1,    -1,    -1,    -1,
      -1,    -1,    81,    -1,    83,    -1,    85,    86,    87,    88,
      -1,    90,    91,    -1,    93,    94,    95,    -1,    97,    -1,
      99,    -1,    -1,   102,    -1,    -1,   105,    -1,   107,    -1,
     109,    -1,   111,    -1,    -1,    -1,   115,   116,   117,    -1,
      -1,   120,    -1,    -1,    -1,    -1,   125,    -1,    -1,    -1,
      -1,    -1,   131,    -1,   133,    -1,    -1,    -1,   137,    -1,
     139,   140,   141,   142,   143,    -1,    -1,    -1,    -1,    -1,
      -1,   150,   151,   152,    -1,   154,    -1,   156,    -1,   158,
     159,    -1,   161,   162,   163,    -1,    -1,   166,   167,    -1,
     169,   170,   171,   172,   173,    -1,    -1,    -1,    -1,   178,
     179,   180,    -1,    -1,   183,   184,   185,   186,   187,   188,
      -1,    -1,    -1,    -1,    -1,    -1,   195,    -1,   197,    -1,
     199,    -1,   201,   202,   203,   204,   205,    -1,   207,    -1,
     209,    -1,    -1,    -1,    -1,   214,   215,    -1,    -1,    -1,
      -1,    -1,    -1,   222,    -1,    -1,    -1,   226,   227,   228,
     229,   230,    -1,   232,   233,   234,    -1,   236,    -1,   238,
      -1,    -1,    -1,    -1,   243,    -1,    -1,    -1,    -1,   248,
      -1,   250,   251,    -1,   253,   254,   255,    -1,    -1,   258,
      -1,    -1,    -1,   262,   263,    -1,    -1,   266,   267,    -1,
     269,   270,    -1,    -1,    -1,    -1,    -1,   276,   277,    -1,
     279,    -1,   281,    -1,   283,   284,    -1,    -1,    -1,    -1,
     289,    -1,    -1,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,    -1,
     309,   310,   311,   312,    -1,   314,   315,   316,   317,    -1,
     319,   320,    -1,    -1,    -1,    -1,   325,   326,   327,   328,
     329,   330,    -1,    -1,   333,   334,    -1,   336,    -1,   338,
      -1,   340,   341,   342,   343,   344,   345,   346,   347,   348,
      -1,    -1,   351,   352,    -1,    -1,   355,   356,   357,   358,
      -1,    -1,    -1,    -1,   363,    -1,    -1,    -1,   367,    -1,
     369,   370,   371,    -1,   373,   374,   375,   376,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     389,   390,    -1,    -1,    -1,    -1,   395,    -1,   397,   398,
     399,   400,   401,   402,   403,   404,   405,    -1,    -1,    -1,
      -1,   410,   411,    -1,   413,    -1,   415,   416,   417,   418,
     419,    -1,   421,   422,   423,    -1,    -1,   426,    -1,    -1,
      -1,   430,   431,   432,   433,   434,    -1,    -1,   437,   438,
     439,   440,   441,    -1,   443,    -1,    -1,   446,    -1,   448,
     449,    -1,   451,    -1,    -1,    -1,   455,    -1,    -1,   458,
     459,   460,   461,    -1,    -1,    -1,   465,   466,   467,   468,
     469,   470,   471,    -1,   473,   474,    -1,   476,    -1,    -1,
      -1,    -1,   481,   482,   483,    -1,    -1,    -1,    -1,   488,
      -1,    -1,    -1,   492,    -1,    -1,   495,    -1,    -1,   498,
     499,    -1,   501,    -1,   503,    -1,   505,   506,    -1,    -1,
      -1,    -1,    -1,    -1,   513,   514,    -1,   516,    -1,    -1,
     519,    -1,    -1,   522,    -1,    -1,    -1,    -1,   527,    -1,
      -1,    -1,   531,    -1,   533,   534,   535,   536,   537,   538,
      -1,    -1,   541,   542,   543,   544,    -1,   546,   547,    -1,
     549,    -1,   551,   552,   553,   554,    -1,    -1,   557,   558,
      -1,   560,   561,   562,   563,    -1,    -1,    -1,    -1,    -1,
     569,   570,   571,    -1,    -1,    -1,    -1,   576,   577,   578,
      -1,   580,   581,    -1,   583,   584,    -1,    -1,    -1,    -1,
      -1,   590,    -1,    -1,   593,    -1,    -1,    -1,   597,   598,
     599,    -1,    -1,    -1,    -1,    -1,    -1,   606,    -1,    -1,
     609,    -1,    -1,    -1,   613,   614,   615,   616,   617,   618,
     619,    -1,   621,    -1,    -1,    -1,   625,    -1,    -1,   628,
      -1,   630,    -1,     5,   633,     7,     8,     9,    10,    11,
      -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    -1,
      -1,    23,    24,    25,    26,    27,    28,    29,    -1,    -1,
      32,    -1,    -1,    -1,    36,    -1,    -1,    -1,    40,    -1,
      -1,    43,    44,    45,    -1,    47,    -1,    -1,    -1,    -1,
      -1,    53,    54,    -1,    56,    57,    -1,    59,    -1,    -1,
      -1,    -1,    -1,    65,    66,    67,    68,    69,    70,    71,
      -1,    73,    74,    -1,    -1,    -1,    -1,    -1,    -1,    81,
      -1,    83,    -1,    85,    86,    87,    88,    -1,    90,    91,
      -1,    93,    94,    95,    -1,    97,    -1,    99,    -1,    -1,
     102,    -1,    -1,   105,    -1,   107,    -1,   109,    -1,   111,
      -1,    -1,    -1,   115,   116,   117,    -1,    -1,   120,    -1,
      -1,    -1,    -1,   125,    -1,    -1,    -1,    -1,    -1,   131,
      -1,   133,    -1,    -1,    -1,   137,    -1,   139,   140,   141,
     142,   143,    -1,    -1,    -1,    -1,    -1,    -1,   150,   151,
     152,    -1,   154,    -1,   156,    -1,   158,   159,    -1,   161,
     162,   163,    -1,    -1,   166,   167,    -1,   169,   170,   171,
     172,   173,    -1,    -1,    -1,    -1,   178,   179,   180,    -1,
      -1,   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,
      -1,    -1,    -1,   195,    -1,   197,    -1,   199,    -1,   201,
     202,   203,   204,   205,    -1,   207,    -1,   209,    -1,    -1,
      -1,    -1,   214,   215,    -1,    -1,    -1,    -1,    -1,    -1,
     222,    -1,    -1,    -1,   226,   227,   228,   229,   230,    -1,
     232,   233,   234,    -1,   236,    -1,   238,    -1,    -1,    -1,
      -1,   243,    -1,    -1,    -1,    -1,   248,    -1,   250,   251,
      -1,   253,   254,   255,    -1,    -1,   258,    -1,    -1,    -1,
     262,   263,    -1,    -1,   266,   267,    -1,   269,   270,    -1,
      -1,    -1,    -1,    -1,   276,   277,    -1,   279,    -1,   281,
      -1,   283,   284,    -1,    -1,    -1,    -1,   289,    -1,    -1,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,    -1,   309,   310,   311,
     312,    -1,   314,   315,   316,   317,    -1,   319,   320,    -1,
      -1,    -1,    -1,   325,   326,   327,   328,   329,   330,    -1,
      -1,   333,   334,    -1,   336,    -1,   338,    -1,   340,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,    -1,   351,
     352,    -1,    -1,   355,   356,   357,   358,    -1,    -1,    -1,
      -1,   363,    -1,    -1,    -1,   367,    -1,   369,   370,   371,
      -1,   373,   374,   375,   376,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   389,   390,    -1,
      -1,    -1,    -1,   395,    -1,   397,   398,   399,   400,   401,
     402,   403,   404,   405,    -1,    -1,    -1,    -1,   410,   411,
      -1,   413,    -1,   415,   416,   417,   418,   419,    -1,   421,
     422,   423,    -1,    -1,   426,    -1,    -1,    -1,   430,   431,
     432,   433,   434,    -1,    -1,   437,   438,   439,   440,   441,
      -1,   443,    -1,    -1,   446,    -1,   448,   449,    -1,   451,
      -1,    -1,    -1,   455,    -1,    -1,   458,   459,   460,   461,
      -1,    -1,    -1,   465,   466,   467,   468,   469,   470,   471,
      -1,   473,   474,    -1,   476,    -1,    -1,    -1,    -1,   481,
     482,   483,    -1,    -1,    -1,    -1,   488,    -1,    -1,    -1,
     492,    -1,    -1,   495,    -1,    -1,   498,   499,    -1,   501,
      -1,   503,    -1,   505,   506,    -1,    -1,    -1,    -1,    -1,
      -1,   513,   514,    -1,   516,    -1,    -1,   519,    -1,    -1,
     522,    -1,    -1,    -1,    -1,   527,    -1,    -1,    -1,   531,
      -1,   533,   534,   535,   536,   537,   538,    -1,    -1,   541,
     542,   543,   544,    -1,   546,   547,    -1,   549,    -1,   551,
     552,   553,   554,    -1,    -1,   557,   558,    -1,   560,   561,
     562,   563,    -1,    -1,    -1,    -1,    -1,   569,   570,   571,
      -1,    -1,    -1,    -1,   576,   577,   578,    -1,   580,   581,
      -1,   583,   584,    -1,    -1,    -1,    -1,    -1,   590,    -1,
      -1,   593,    -1,    -1,    -1,   597,   598,   599,    -1,    -1,
      -1,    -1,    -1,    -1,   606,    -1,    -1,   609,    -1,    -1,
      -1,   613,   614,   615,   616,   617,   618,   619,    -1,   621,
      -1,    -1,    -1,   625,    -1,    -1,   628,    -1,   630,    -1,
       5,   633,     7,     8,     9,    10,    11,    -1,    -1,    14,
      -1,    -1,    -1,    18,    -1,    -1,    -1,    -1,    23,    24,
      25,    26,    27,    28,    29,    -1,    -1,    32,    -1,    -1,
      -1,    36,    -1,    -1,    -1,    40,    -1,    -1,    43,    44,
      45,    -1,    47,    -1,    -1,    -1,    -1,    -1,    53,    54,
      -1,    56,    57,    -1,    59,    -1,    -1,    -1,    -1,    -1,
      65,    66,    67,    68,    69,    70,    71,    -1,    73,    74,
      -1,    -1,    -1,    -1,    -1,    -1,    81,    -1,    83,    -1,
      85,    86,    87,    88,    -1,    90,    91,    -1,    93,    94,
      95,    -1,    97,    -1,    99,    -1,    -1,   102,    -1,    -1,
     105,    -1,   107,    -1,   109,    -1,   111,    -1,    -1,    -1,
     115,   116,   117,    -1,    -1,   120,    -1,    -1,    -1,    -1,
     125,    -1,    -1,    -1,    -1,    -1,   131,    -1,   133,    -1,
      -1,    -1,   137,    -1,   139,   140,   141,   142,   143,    -1,
      -1,    -1,    -1,    -1,    -1,   150,   151,   152,    -1,    -1,
      -1,   156,    -1,   158,   159,    -1,   161,   162,   163,    -1,
      -1,   166,   167,    -1,   169,   170,   171,   172,   173,    -1,
      -1,    -1,    -1,   178,   179,   180,    -1,    -1,   183,   184,
     185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,    -1,
     195,    -1,   197,    -1,   199,    -1,   201,   202,   203,   204,
     205,    -1,   207,    -1,   209,    -1,    -1,    -1,    -1,   214,
     215,    -1,    -1,    -1,    -1,    -1,    -1,   222,    -1,    -1,
      -1,   226,   227,   228,   229,   230,    -1,   232,   233,   234,
      -1,   236,    -1,   238,    -1,    -1,    -1,    -1,   243,    -1,
      -1,    -1,    -1,   248,    -1,   250,   251,    -1,   253,   254,
     255,    -1,    -1,   258,    -1,    -1,    -1,   262,   263,    -1,
      -1,   266,   267,    -1,   269,   270,    -1,    -1,    -1,    -1,
      -1,   276,   277,    -1,   279,    -1,   281,    -1,   283,   284,
      -1,    -1,    -1,    -1,   289,    -1,    -1,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,    -1,   309,   310,   311,   312,    -1,   314,
     315,   316,   317,    -1,   319,   320,    -1,    -1,    -1,    -1,
     325,   326,   327,   328,   329,   330,    -1,    -1,   333,   334,
      -1,   336,    -1,   338,    -1,   340,   341,   342,   343,   344,
     345,   346,   347,   348,    -1,    -1,   351,   352,    -1,    -1,
     355,   356,   357,   358,    -1,    -1,    -1,    -1,   363,    -1,
      -1,    -1,   367,    -1,   369,   370,   371,    -1,   373,   374,
     375,   376,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   389,   390,    -1,    -1,    -1,    -1,
     395,    -1,   397,   398,   399,   400,   401,   402,   403,   404,
     405,    -1,    -1,    -1,    -1,   410,   411,    -1,   413,    -1,
     415,   416,   417,   418,   419,    -1,   421,   422,   423,    -1,
      -1,   426,    -1,    -1,    -1,   430,   431,   432,   433,   434,
      -1,    -1,   437,   438,   439,   440,   441,    -1,   443,    -1,
      -1,   446,    -1,   448,   449,    -1,   451,    -1,    -1,    -1,
     455,    -1,    -1,   458,   459,   460,   461,    -1,    -1,    -1,
     465,   466,   467,   468,   469,   470,   471,    -1,   473,   474,
      -1,   476,    -1,    -1,    -1,    -1,   481,   482,   483,    -1,
      -1,    -1,    -1,   488,    -1,    -1,    -1,   492,    -1,    -1,
     495,    -1,    -1,   498,   499,    -1,   501,    -1,   503,    -1,
     505,   506,    -1,    -1,    -1,    -1,    -1,    -1,   513,   514,
      -1,   516,    -1,    -1,   519,    -1,    -1,   522,    -1,    -1,
      -1,    -1,   527,    -1,    -1,    -1,   531,    -1,   533,   534,
     535,   536,   537,   538,    -1,    -1,   541,   542,   543,   544,
      -1,   546,   547,    -1,   549,    -1,   551,   552,   553,   554,
      -1,    -1,   557,   558,    -1,   560,   561,   562,   563,    -1,
      -1,    -1,    -1,    -1,   569,   570,   571,    -1,    -1,    -1,
      -1,   576,   577,   578,    -1,   580,   581,    -1,   583,   584,
      -1,    -1,    -1,    -1,    -1,   590,    -1,    -1,   593,    -1,
      -1,    -1,   597,   598,   599,    -1,    -1,    -1,    -1,    -1,
      -1,   606,    -1,    -1,   609,    -1,    -1,    -1,   613,   614,
     615,   616,   617,   618,    -1,    -1,   621,    -1,    -1,    -1,
     625,    -1,    -1,   628,    -1,   630,    -1,     5,   633,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,    -1,    -1,    -1,    -1,    23,    24,    25,    26,    27,
      28,    29,    -1,    -1,    32,    -1,    -1,    -1,    36,    -1,
      -1,    -1,    40,    -1,    -1,    43,    44,    45,    -1,    47,
      -1,    -1,    -1,    -1,    -1,    53,    54,    -1,    56,    57,
      -1,    59,    -1,    -1,    -1,    -1,    -1,    65,    66,    67,
      68,    69,    70,    71,    -1,    73,    74,    -1,    -1,    -1,
      -1,    -1,    -1,    81,    -1,    83,    -1,    85,    86,    87,
      88,    -1,    90,    91,    -1,    93,    94,    95,    -1,    97,
      -1,    99,    -1,    -1,   102,    -1,    -1,   105,    -1,   107,
      -1,   109,    -1,   111,    -1,    -1,    -1,   115,   116,   117,
      -1,    -1,   120,    -1,    -1,    -1,    -1,   125,    -1,    -1,
      -1,    -1,    -1,   131,    -1,   133,    -1,    -1,    -1,   137,
      -1,   139,   140,   141,   142,   143,    -1,    -1,    -1,    -1,
      -1,    -1,   150,   151,   152,    -1,    -1,    -1,   156,    -1,
     158,   159,    -1,   161,   162,   163,    -1,    -1,   166,   167,
      -1,   169,   170,   171,   172,   173,    -1,    -1,    -1,    -1,
     178,   179,   180,    -1,    -1,   183,   184,   185,   186,   187,
     188,    -1,    -1,    -1,    -1,    -1,    -1,   195,    -1,   197,
      -1,   199,    -1,   201,   202,   203,   204,   205,    -1,   207,
      -1,   209,    -1,    -1,    -1,    -1,   214,   215,    -1,    -1,
      -1,    -1,    -1,    -1,   222,    -1,    -1,    -1,   226,   227,
     228,   229,   230,    -1,   232,   233,   234,    -1,   236,    -1,
     238,    -1,    -1,    -1,    -1,   243,    -1,    -1,    -1,    -1,
     248,    -1,   250,   251,    -1,   253,   254,   255,    -1,    -1,
     258,    -1,    -1,    -1,   262,   263,    -1,    -1,   266,   267,
      -1,   269,   270,    -1,    -1,    -1,    -1,    -1,   276,   277,
      -1,   279,    -1,   281,    -1,   283,   284,    -1,    -1,    -1,
      -1,   289,    -1,    -1,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
      -1,   309,   310,   311,   312,    -1,   314,   315,   316,   317,
      -1,   319,   320,    -1,    -1,    -1,    -1,   325,   326,   327,
     328,   329,   330,    -1,    -1,   333,   334,    -1,   336,    -1,
     338,    -1,   340,   341,   342,   343,   344,   345,   346,   347,
     348,    -1,    -1,   351,   352,    -1,    -1,   355,   356,   357,
     358,    -1,    -1,    -1,    -1,   363,    -1,    -1,    -1,   367,
      -1,   369,   370,   371,    -1,   373,   374,   375,   376,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   389,   390,    -1,    -1,    -1,    -1,   395,    -1,   397,
     398,   399,   400,   401,   402,   403,   404,   405,    -1,    -1,
      -1,    -1,   410,   411,    -1,   413,    -1,   415,   416,   417,
     418,   419,    -1,   421,   422,   423,    -1,    -1,   426,    -1,
      -1,    -1,   430,   431,   432,   433,   434,    -1,    -1,   437,
     438,   439,   440,   441,    -1,   443,    -1,    -1,   446,    -1,
     448,   449,    -1,   451,    -1,    -1,    -1,   455,    -1,    -1,
     458,   459,   460,   461,    -1,    -1,    -1,   465,   466,   467,
     468,   469,   470,   471,    -1,   473,   474,    -1,   476,    -1,
      -1,    -1,    -1,   481,   482,   483,    -1,    -1,    -1,    -1,
     488,    -1,    -1,    -1,   492,    -1,    -1,   495,    -1,    -1,
     498,   499,    -1,   501,    -1,   503,    -1,   505,   506,    -1,
      -1,    -1,    -1,    -1,    -1,   513,   514,    -1,   516,    -1,
      -1,   519,    -1,    -1,   522,    -1,    -1,    -1,    -1,   527,
      -1,    -1,    -1,   531,    -1,   533,   534,   535,   536,   537,
     538,    -1,    -1,   541,   542,   543,   544,    -1,   546,   547,
      -1,   549,    -1,   551,   552,   553,   554,    -1,    -1,   557,
     558,    -1,   560,   561,   562,   563,    -1,    -1,    -1,    -1,
      -1,   569,   570,   571,    -1,    -1,    -1,    -1,   576,   577,
     578,    -1,   580,   581,    -1,   583,   584,    -1,    -1,    -1,
      -1,    -1,   590,    -1,    -1,   593,    -1,    -1,    -1,   597,
     598,   599,    -1,    -1,    -1,    -1,    -1,    -1,   606,    -1,
      -1,   609,    -1,    -1,    -1,   613,   614,   615,   616,   617,
     618,    -1,    -1,   621,    -1,    -1,    -1,   625,    -1,    -1,
     628,    -1,   630,    -1,     5,   633,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      -1,    -1,    23,    24,    25,    26,    27,    28,    29,    -1,
      -1,    32,    -1,    -1,    -1,    36,    -1,    -1,    -1,    40,
      -1,    -1,    43,    44,    45,    -1,    47,    -1,    -1,    -1,
      -1,    -1,    53,    54,    -1,    56,    57,    -1,    59,    -1,
      -1,    -1,    -1,    -1,    65,    66,    67,    68,    69,    70,
      71,    -1,    73,    74,    -1,    -1,    -1,    -1,    -1,    -1,
      81,    -1,    83,    -1,    85,    86,    87,    88,    -1,    90,
      91,    -1,    93,    94,    95,    -1,    97,    -1,    99,    -1,
      -1,   102,    -1,    -1,   105,    -1,   107,    -1,   109,    -1,
     111,    -1,    -1,    -1,   115,   116,   117,    -1,    -1,   120,
      -1,    -1,    -1,    -1,   125,    -1,    -1,    -1,    -1,    -1,
     131,    -1,   133,    -1,    -1,    -1,   137,    -1,   139,   140,
     141,   142,   143,    -1,    -1,    -1,    -1,    -1,    -1,   150,
     151,   152,    -1,    -1,    -1,   156,    -1,   158,   159,    -1,
     161,   162,   163,    -1,    -1,   166,   167,    -1,   169,   170,
     171,   172,   173,    -1,    -1,    -1,    -1,   178,   179,   180,
      -1,    -1,   183,   184,   185,   186,   187,   188,    -1,    -1,
      -1,    -1,    -1,    -1,   195,    -1,   197,    -1,   199,    -1,
     201,   202,   203,   204,   205,    -1,   207,    -1,   209,    -1,
      -1,    -1,    -1,   214,   215,    -1,    -1,    -1,    -1,    -1,
      -1,   222,    -1,    -1,    -1,   226,   227,   228,   229,   230,
      -1,   232,   233,   234,    -1,   236,    -1,   238,    -1,    -1,
      -1,    -1,   243,    -1,    -1,    -1,    -1,   248,    -1,   250,
     251,    -1,   253,   254,   255,    -1,    -1,   258,    -1,    -1,
      -1,   262,   263,    -1,    -1,   266,   267,    -1,   269,   270,
      -1,    -1,    -1,    -1,    -1,   276,   277,    -1,   279,    -1,
     281,    -1,   283,   284,    -1,    -1,    -1,    -1,   289,    -1,
      -1,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,    -1,   309,   310,
     311,   312,    -1,   314,   315,   316,   317,    -1,   319,   320,
      -1,    -1,    -1,    -1,   325,   326,   327,   328,   329,   330,
      -1,    -1,   333,   334,    -1,   336,    -1,   338,    -1,   340,
     341,   342,   343,   344,   345,   346,   347,   348,    -1,    -1,
     351,   352,    -1,    -1,   355,   356,   357,   358,    -1,    -1,
      -1,    -1,   363,    -1,    -1,    -1,   367,    -1,   369,   370,
     371,    -1,   373,   374,   375,   376,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   389,   390,
      -1,    -1,    -1,    -1,   395,    -1,   397,   398,   399,   400,
     401,   402,   403,   404,   405,    -1,    -1,    -1,    -1,   410,
     411,    -1,   413,    -1,   415,   416,   417,   418,   419,    -1,
     421,   422,   423,    -1,    -1,   426,    -1,    -1,    -1,   430,
     431,   432,   433,   434,    -1,    -1,   437,   438,   439,   440,
     441,    -1,   443,    -1,    -1,   446,    -1,   448,   449,    -1,
     451,    -1,    -1,    -1,   455,    -1,    -1,   458,   459,   460,
     461,    -1,    -1,    -1,   465,   466,   467,   468,   469,   470,
     471,    -1,   473,   474,    -1,   476,    -1,    -1,    -1,    -1,
     481,   482,   483,    -1,    -1,    -1,    -1,   488,    -1,    -1,
      -1,   492,    -1,    -1,   495,    -1,    -1,   498,   499,    -1,
     501,    -1,   503,    -1,   505,   506,    -1,    -1,    -1,    -1,
      -1,    -1,   513,   514,    -1,   516,    -1,    -1,   519,    -1,
      -1,   522,    -1,    -1,    -1,    -1,   527,    -1,    -1,    -1,
     531,    -1,   533,   534,   535,   536,   537,   538,    -1,    -1,
     541,   542,   543,   544,    -1,   546,   547,    -1,   549,    -1,
     551,   552,   553,   554,    -1,    -1,   557,   558,    -1,   560,
     561,   562,   563,    -1,    -1,    -1,    -1,    -1,   569,   570,
     571,    -1,    -1,    -1,    -1,   576,   577,   578,    -1,   580,
     581,    -1,   583,   584,    -1,    -1,    -1,    -1,    -1,   590,
      -1,    -1,   593,    -1,    -1,    -1,   597,   598,   599,    -1,
      -1,    -1,    -1,    -1,    -1,   606,    -1,    -1,   609,    -1,
      -1,    -1,   613,   614,   615,   616,   617,   618,    -1,    -1,
     621,    -1,    -1,    -1,   625,    -1,    -1,   628,    -1,   630,
      -1,     5,   633,     7,     8,     9,    10,    11,    -1,    -1,
      14,    -1,    -1,    -1,    18,    -1,    -1,    -1,    -1,    23,
      24,    25,    26,    27,    28,    29,    -1,    -1,    32,    -1,
      -1,    -1,    36,    -1,    -1,    -1,    40,    -1,    -1,    43,
      44,    45,    -1,    47,    -1,    -1,    -1,    -1,    -1,    53,
      54,    -1,    56,    57,    -1,    59,    -1,    -1,    -1,    -1,
      -1,    65,    66,    67,    68,    69,    70,    71,    -1,    73,
      74,    -1,    -1,    -1,    -1,    -1,    -1,    81,    -1,    83,
      -1,    85,    86,    87,    88,    -1,    90,    91,    -1,    93,
      94,    95,    -1,    97,    -1,    99,    -1,    -1,   102,    -1,
      -1,   105,    -1,   107,    -1,   109,    -1,   111,    -1,    -1,
      -1,   115,   116,   117,    -1,    -1,   120,    -1,    -1,    -1,
      -1,   125,    -1,    -1,    -1,    -1,    -1,   131,    -1,   133,
      -1,    -1,    -1,   137,    -1,   139,   140,   141,   142,   143,
      -1,    -1,    -1,    -1,    -1,    -1,   150,   151,   152,    -1,
      -1,    -1,   156,    -1,   158,   159,    -1,   161,   162,   163,
      -1,    -1,   166,   167,    -1,   169,   170,   171,   172,   173,
      -1,    -1,    -1,    -1,   178,   179,   180,    -1,    -1,   183,
     184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,
      -1,   195,    -1,   197,    -1,   199,    -1,   201,   202,   203,
     204,   205,    -1,   207,    -1,   209,    -1,    -1,    -1,    -1,
     214,   215,    -1,    -1,    -1,    -1,    -1,    -1,   222,    -1,
      -1,    -1,   226,   227,   228,   229,   230,    -1,   232,   233,
     234,    -1,   236,    -1,   238,    -1,    -1,    -1,    -1,   243,
      -1,    -1,    -1,    -1,   248,    -1,   250,   251,    -1,   253,
     254,   255,    -1,    -1,   258,    -1,    -1,    -1,   262,   263,
      -1,    -1,   266,   267,    -1,   269,   270,    -1,    -1,    -1,
      -1,    -1,   276,   277,    -1,   279,    -1,   281,    -1,   283,
     284,    -1,    -1,    -1,    -1,   289,    -1,    -1,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,    -1,   309,   310,   311,   312,    -1,
     314,   315,   316,   317,    -1,   319,   320,    -1,    -1,    -1,
      -1,   325,   326,   327,   328,   329,   330,    -1,    -1,   333,
     334,    -1,   336,    -1,   338,    -1,   340,   341,   342,   343,
     344,   345,   346,   347,   348,    -1,    -1,   351,   352,    -1,
      -1,   355,   356,   357,   358,    -1,    -1,    -1,    -1,   363,
      -1,    -1,    -1,   367,    -1,   369,   370,   371,    -1,   373,
     374,   375,   376,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   389,   390,    -1,    -1,    -1,
      -1,   395,    -1,   397,   398,   399,   400,   401,   402,   403,
     404,   405,    -1,    -1,    -1,    -1,   410,   411,    -1,   413,
      -1,   415,   416,   417,   418,   419,    -1,   421,   422,   423,
      -1,    -1,   426,    -1,    -1,    -1,   430,   431,   432,   433,
     434,    -1,    -1,   437,   438,   439,   440,   441,    -1,   443,
      -1,    -1,   446,    -1,   448,   449,    -1,   451,    -1,    -1,
      -1,   455,    -1,    -1,   458,   459,   460,   461,    -1,    -1,
      -1,   465,   466,   467,   468,   469,   470,   471,    -1,   473,
     474,    -1,   476,    -1,    -1,    -1,    -1,   481,   482,   483,
      -1,    -1,    -1,    -1,   488,    -1,    -1,    -1,   492,    -1,
      -1,   495,    -1,    -1,   498,   499,    -1,   501,    -1,   503,
      -1,   505,   506,    -1,    -1,    -1,    -1,    -1,    -1,   513,
     514,    -1,   516,    -1,    -1,   519,    -1,    -1,   522,    -1,
      -1,    -1,    -1,   527,    -1,    -1,    -1,   531,    -1,   533,
     534,   535,   536,   537,   538,    -1,    -1,   541,   542,   543,
     544,    -1,   546,   547,    -1,   549,    -1,   551,   552,   553,
     554,    -1,    -1,   557,   558,    -1,   560,   561,   562,   563,
      -1,    -1,    -1,    -1,    -1,   569,   570,   571,    -1,    -1,
      -1,    -1,   576,   577,   578,    -1,   580,   581,    -1,   583,
     584,    -1,    -1,    -1,    -1,    -1,   590,    -1,    -1,   593,
      -1,    -1,    -1,   597,   598,   599,    -1,    -1,    -1,    -1,
      -1,    -1,   606,    -1,    -1,   609,    -1,    -1,    -1,   613,
     614,   615,   616,   617,   618,    -1,    -1,   621,    -1,    -1,
      -1,   625,    -1,    -1,   628,    -1,   630,    -1,     5,   633,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    -1,    -1,    -1,    -1,    23,    24,    25,    26,
      27,    28,    29,    -1,    -1,    32,    -1,    -1,    -1,    36,
      -1,    -1,    -1,    40,    -1,    -1,    43,    44,    45,    -1,
      47,    -1,    -1,    -1,    -1,    -1,    53,    54,    -1,    56,
      57,    -1,    59,    -1,    -1,    -1,    -1,    -1,    65,    66,
      67,    68,    69,    70,    71,    -1,    73,    74,    -1,    -1,
      -1,    -1,    -1,    -1,    81,    -1,    83,    -1,    85,    86,
      87,    88,    -1,    90,    91,    -1,    93,    94,    95,    -1,
      97,    -1,    99,    -1,    -1,   102,    -1,    -1,   105,    -1,
     107,    -1,   109,    -1,   111,    -1,    -1,    -1,   115,   116,
     117,    -1,    -1,   120,    -1,    -1,    -1,    -1,   125,    -1,
      -1,    -1,    -1,    -1,   131,    -1,   133,    -1,    -1,    -1,
     137,    -1,   139,   140,   141,   142,   143,    -1,    -1,    -1,
      -1,    -1,    -1,   150,   151,   152,    -1,    -1,    -1,   156,
      -1,   158,   159,    -1,   161,   162,   163,    -1,    -1,   166,
     167,    -1,   169,   170,   171,   172,   173,    -1,    -1,    -1,
      -1,   178,   179,   180,    -1,    -1,   183,   184,   185,   186,
     187,   188,    -1,    -1,    -1,    -1,    -1,    -1,   195,    -1,
     197,    -1,   199,    -1,   201,   202,   203,   204,   205,    -1,
     207,    -1,   209,    -1,    -1,    -1,    -1,   214,   215,    -1,
      -1,    -1,    -1,    -1,    -1,   222,    -1,    -1,    -1,   226,
     227,   228,   229,   230,    -1,   232,   233,   234,    -1,   236,
      -1,   238,    -1,    -1,    -1,    -1,   243,    -1,    -1,    -1,
      -1,   248,    -1,   250,   251,    -1,   253,   254,   255,    -1,
      -1,   258,    -1,    -1,    -1,   262,   263,    -1,    -1,   266,
     267,    -1,   269,   270,    -1,    -1,    -1,    -1,    -1,   276,
     277,    -1,   279,    -1,   281,    -1,   283,   284,    -1,    -1,
      -1,    -1,   289,    -1,    -1,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,    -1,   309,   310,   311,   312,    -1,   314,   315,   316,
     317,    -1,   319,   320,    -1,    -1,    -1,    -1,   325,   326,
     327,   328,   329,   330,    -1,    -1,   333,   334,    -1,   336,
      -1,   338,    -1,   340,   341,   342,   343,   344,   345,   346,
     347,   348,    -1,    -1,   351,   352,    -1,    -1,   355,   356,
     357,   358,    -1,    -1,    -1,    -1,   363,    -1,    -1,    -1,
     367,    -1,   369,   370,   371,    -1,   373,   374,   375,   376,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   389,   390,    -1,    -1,    -1,    -1,   395,    -1,
     397,   398,   399,   400,   401,   402,   403,   404,   405,    -1,
      -1,    -1,    -1,   410,   411,    -1,   413,    -1,   415,   416,
     417,   418,   419,    -1,   421,   422,   423,    -1,    -1,   426,
      -1,    -1,    -1,   430,   431,   432,   433,   434,    -1,    -1,
     437,   438,   439,   440,   441,    -1,   443,    -1,    -1,   446,
      -1,   448,   449,    -1,   451,    -1,    -1,    -1,   455,    -1,
      -1,   458,   459,   460,   461,    -1,    -1,    -1,   465,   466,
     467,   468,   469,   470,   471,    -1,   473,   474,    -1,   476,
      -1,    -1,    -1,    -1,   481,   482,   483,    -1,    -1,    -1,
      -1,   488,    -1,    -1,    -1,   492,    -1,    -1,   495,    -1,
      -1,   498,   499,    -1,   501,    -1,   503,    -1,   505,   506,
      -1,    -1,    -1,    -1,    -1,    -1,   513,   514,    -1,   516,
      -1,    -1,   519,    -1,    -1,   522,    -1,    -1,    -1,    -1,
     527,    -1,    -1,    -1,   531,    -1,   533,   534,   535,   536,
     537,   538,    -1,    -1,   541,   542,   543,   544,    -1,   546,
     547,    -1,   549,    -1,   551,   552,   553,   554,    -1,    -1,
     557,   558,    -1,   560,   561,   562,   563,    -1,    -1,    -1,
      -1,    -1,   569,   570,   571,    -1,    -1,    -1,    -1,   576,
     577,   578,    -1,   580,   581,    -1,   583,   584,    -1,    -1,
      -1,    -1,    -1,   590,    -1,    -1,   593,    -1,    -1,    -1,
     597,   598,   599,    -1,    -1,    -1,    -1,    -1,    -1,   606,
      -1,    -1,   609,    -1,    -1,    -1,   613,   614,   615,   616,
     617,   618,    -1,    -1,   621,    -1,    -1,    -1,   625,    -1,
      -1,   628,    -1,   630,    -1,     5,   633,     7,     8,     9,
      10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,
      -1,    -1,    -1,    23,    24,    25,    26,    27,    28,    29,
      -1,    -1,    32,    -1,    -1,    -1,    36,    -1,    -1,    -1,
      40,    -1,    -1,    43,    44,    45,    -1,    47,    -1,    -1,
      -1,    -1,    -1,    53,    54,    -1,    56,    57,    -1,    59,
      -1,    -1,    -1,    -1,    -1,    65,    66,    67,    68,    69,
      70,    71,    -1,    73,    74,    -1,    -1,    -1,    -1,    -1,
      -1,    81,    -1,    83,    -1,    85,    86,    87,    88,    -1,
      90,    91,    -1,    93,    94,    95,    -1,    97,    -1,    99,
      -1,    -1,   102,    -1,    -1,   105,    -1,   107,    -1,   109,
      -1,   111,    -1,    -1,    -1,   115,   116,   117,    -1,    -1,
     120,    -1,    -1,    -1,    -1,   125,    -1,    -1,    -1,    -1,
      -1,   131,    -1,   133,    -1,    -1,    -1,   137,    -1,   139,
     140,   141,   142,   143,    -1,    -1,    -1,    -1,    -1,    -1,
     150,   151,   152,    -1,    -1,    -1,   156,    -1,    -1,   159,
      -1,   161,   162,   163,    -1,    -1,   166,   167,    -1,   169,
     170,   171,   172,   173,    -1,    -1,    -1,    -1,   178,   179,
     180,    -1,    -1,   183,   184,   185,   186,   187,   188,    -1,
      -1,    -1,    -1,    -1,    -1,   195,    -1,   197,    -1,   199,
      -1,   201,   202,   203,   204,   205,    -1,   207,    -1,   209,
      -1,    -1,    -1,    -1,   214,   215,    -1,    -1,    -1,    -1,
      -1,    -1,   222,    -1,    -1,    -1,   226,   227,   228,   229,
     230,    -1,   232,   233,   234,    -1,   236,    -1,   238,    -1,
      -1,    -1,    -1,   243,    -1,    -1,    -1,    -1,   248,    -1,
     250,   251,    -1,   253,   254,   255,    -1,    -1,   258,    -1,
      -1,    -1,   262,   263,    -1,    -1,   266,   267,    -1,   269,
     270,    -1,    -1,    -1,    -1,    -1,   276,   277,    -1,   279,
      -1,   281,    -1,   283,   284,    -1,    -1,    -1,    -1,   289,
      -1,    -1,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,    -1,   309,
     310,   311,   312,    -1,   314,   315,   316,   317,    -1,   319,
     320,    -1,    -1,    -1,    -1,   325,   326,   327,   328,   329,
     330,    -1,    -1,   333,   334,    -1,   336,    -1,   338,    -1,
     340,   341,   342,   343,   344,   345,   346,   347,   348,    -1,
      -1,   351,   352,    -1,    -1,   355,   356,   357,   358,    -1,
      -1,    -1,    -1,   363,    -1,    -1,    -1,   367,    -1,   369,
     370,   371,    -1,   373,   374,   375,   376,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   389,
     390,    -1,    -1,    -1,    -1,   395,    -1,   397,   398,   399,
     400,   401,   402,   403,   404,   405,    -1,    -1,    -1,    -1,
     410,   411,    -1,   413,    -1,   415,   416,   417,   418,   419,
      -1,   421,   422,   423,    -1,    -1,   426,    -1,    -1,    -1,
     430,   431,   432,   433,   434,    -1,    -1,   437,   438,   439,
     440,   441,    -1,   443,    -1,    -1,   446,    -1,   448,   449,
      -1,   451,    -1,    -1,    -1,   455,    -1,    -1,   458,   459,
     460,   461,    -1,    -1,    -1,   465,   466,   467,   468,   469,
     470,   471,    -1,   473,   474,    -1,   476,    -1,    -1,    -1,
      -1,   481,   482,   483,    -1,    -1,    -1,    -1,   488,    -1,
      -1,    -1,   492,    -1,    -1,   495,    -1,    -1,   498,   499,
      -1,   501,    -1,   503,    -1,   505,   506,    -1,    -1,    -1,
      -1,    -1,    -1,   513,   514,    -1,   516,    -1,    -1,   519,
      -1,    -1,   522,    -1,    -1,    -1,    -1,   527,    -1,    -1,
      -1,   531,    -1,   533,   534,   535,   536,   537,   538,    -1,
      -1,   541,   542,   543,   544,    -1,   546,   547,    -1,   549,
      -1,   551,   552,   553,   554,    -1,    -1,   557,   558,    -1,
     560,   561,   562,   563,    -1,    -1,    -1,    -1,    -1,   569,
     570,   571,    -1,    -1,    -1,    -1,   576,   577,   578,    -1,
     580,   581,    -1,   583,   584,    -1,    -1,    -1,    -1,    -1,
     590,    -1,    -1,   593,    -1,    -1,    -1,   597,   598,   599,
      -1,    -1,    -1,    -1,    -1,    -1,   606,    -1,    -1,   609,
      -1,    -1,    -1,   613,   614,   615,   616,   617,   618,    -1,
      -1,   621,    -1,    -1,    -1,   625,    -1,    -1,   628,    -1,
     630,    -1,     5,   633,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    -1,    -1,
      23,    24,    25,    26,    27,    28,    29,    -1,    -1,    32,
      -1,    -1,    -1,    36,    -1,    -1,    -1,    40,    -1,    -1,
      43,    44,    45,    -1,    47,    -1,    -1,    -1,    -1,    -1,
      53,    54,    -1,    56,    57,    -1,    59,    -1,    -1,    -1,
      -1,    -1,    65,    66,    67,    68,    69,    70,    71,    -1,
      73,    74,    -1,    -1,    -1,    -1,    -1,    -1,    81,    -1,
      83,    -1,    85,    86,    87,    88,    -1,    90,    91,    -1,
      93,    94,    95,    -1,    97,    -1,    99,    -1,    -1,   102,
      -1,    -1,   105,    -1,   107,    -1,   109,    -1,   111,    -1,
      -1,    -1,   115,   116,   117,    -1,    -1,   120,    -1,    -1,
      -1,    -1,   125,    -1,    -1,    -1,    -1,    -1,   131,    -1,
     133,    -1,    -1,    -1,   137,    -1,   139,   140,   141,   142,
     143,    -1,    -1,    -1,    -1,    -1,    -1,   150,   151,   152,
      -1,    -1,    -1,   156,    -1,    -1,   159,    -1,   161,   162,
     163,    -1,    -1,   166,   167,    -1,   169,   170,   171,   172,
     173,    -1,    -1,    -1,    -1,   178,   179,   180,    -1,    -1,
     183,   184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,
      -1,    -1,   195,    -1,   197,    -1,   199,    -1,   201,   202,
     203,   204,   205,    -1,   207,    -1,   209,    -1,    -1,    -1,
      -1,   214,   215,    -1,    -1,    -1,    -1,    -1,    -1,   222,
      -1,    -1,    -1,   226,   227,   228,   229,   230,    -1,   232,
     233,   234,    -1,   236,    -1,   238,    -1,    -1,    -1,    -1,
     243,    -1,    -1,    -1,    -1,   248,    -1,   250,   251,    -1,
     253,   254,   255,    -1,    -1,   258,    -1,    -1,    -1,   262,
     263,    -1,    -1,   266,   267,    -1,   269,   270,    -1,    -1,
      -1,    -1,    -1,   276,   277,    -1,   279,    -1,   281,    -1,
     283,   284,    -1,    -1,    -1,    -1,   289,    -1,    -1,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,    -1,   309,   310,   311,   312,
      -1,   314,   315,   316,   317,    -1,   319,   320,    -1,    -1,
      -1,    -1,   325,   326,   327,   328,   329,   330,    -1,    -1,
     333,   334,    -1,   336,    -1,   338,    -1,   340,   341,   342,
     343,   344,   345,   346,   347,   348,    -1,    -1,   351,   352,
      -1,    -1,   355,   356,   357,   358,    -1,    -1,    -1,    -1,
     363,    -1,    -1,    -1,   367,    -1,   369,   370,   371,    -1,
     373,   374,   375,   376,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   389,   390,    -1,    -1,
      -1,    -1,   395,    -1,   397,   398,   399,   400,   401,   402,
     403,   404,   405,    -1,    -1,    -1,    -1,   410,   411,    -1,
     413,    -1,   415,   416,   417,   418,   419,    -1,   421,   422,
     423,    -1,    -1,   426,    -1,    -1,    -1,   430,   431,   432,
     433,   434,    -1,    -1,   437,   438,   439,   440,   441,    -1,
     443,    -1,    -1,   446,    -1,   448,   449,    -1,   451,    -1,
      -1,    -1,   455,    -1,    -1,   458,   459,   460,   461,    -1,
      -1,    -1,   465,   466,   467,   468,   469,   470,   471,    -1,
     473,   474,    -1,   476,    -1,    -1,    -1,    -1,   481,   482,
     483,    -1,    -1,    -1,    -1,   488,    -1,    -1,    -1,   492,
      -1,    -1,   495,    -1,    -1,   498,   499,    -1,   501,    -1,
     503,    -1,   505,   506,    -1,    -1,    -1,    -1,    -1,    -1,
     513,   514,    -1,   516,    -1,    -1,   519,    -1,    -1,   522,
      -1,    -1,    -1,    -1,   527,    -1,    -1,    -1,   531,    -1,
     533,   534,   535,   536,   537,   538,    -1,    -1,   541,   542,
     543,   544,    -1,   546,   547,    -1,   549,    -1,   551,   552,
     553,   554,    -1,    -1,   557,   558,    -1,   560,   561,   562,
     563,    -1,    -1,    -1,    -1,    -1,   569,   570,   571,    -1,
      -1,    -1,    -1,   576,   577,   578,    -1,   580,   581,    -1,
     583,   584,    -1,    -1,    -1,    -1,    -1,   590,    -1,    -1,
     593,    -1,    -1,    -1,   597,   598,   599,    -1,    -1,    -1,
      -1,    -1,    -1,   606,    -1,    -1,   609,    -1,    -1,    -1,
     613,   614,   615,   616,   617,   618,    -1,    -1,   621,    -1,
      -1,    -1,   625,    -1,    -1,   628,    -1,   630,    -1,     5,
     633,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    -1,    -1,    23,    24,    25,
      26,    27,    28,    29,    -1,    -1,    -1,    -1,    -1,    -1,
      36,    -1,    -1,    -1,    40,    -1,    -1,    43,    44,    45,
      -1,    47,    -1,    -1,    -1,    -1,    -1,    53,    -1,    -1,
      56,    57,    -1,    59,    -1,    -1,    -1,    -1,    -1,    65,
      66,    67,    68,    -1,    70,    71,    -1,    73,    74,    -1,
      -1,    -1,    -1,    -1,    -1,    81,    -1,    83,    -1,    85,
      86,    87,    88,    -1,    90,    91,    -1,    93,    94,    95,
      -1,    97,    -1,    99,    -1,    -1,   102,    -1,    -1,   105,
      -1,   107,    -1,   109,    -1,   111,    -1,    -1,    -1,   115,
     116,   117,    -1,    -1,   120,    -1,    -1,    -1,    -1,   125,
      -1,    -1,    -1,    -1,    -1,   131,    -1,   133,    -1,    -1,
      -1,   137,    -1,   139,   140,   141,   142,   143,    -1,    -1,
      -1,    -1,    -1,    -1,   150,   151,   152,    -1,    -1,    -1,
     156,    -1,    -1,   159,    -1,   161,   162,   163,    -1,    -1,
     166,   167,    -1,   169,   170,   171,   172,   173,    -1,    -1,
      -1,    -1,   178,   179,   180,    -1,    -1,   183,   184,    -1,
     186,   187,   188,    -1,    -1,    -1,    -1,    -1,    -1,   195,
      -1,   197,    -1,   199,    -1,   201,   202,   203,   204,   205,
      -1,   207,    -1,   209,    -1,    -1,    -1,    -1,   214,   215,
      -1,    -1,    -1,    -1,    -1,    -1,   222,    -1,    -1,    -1,
     226,   227,   228,   229,    -1,    -1,   232,   233,   234,    -1,
     236,    -1,   238,    -1,    -1,    -1,    -1,   243,    -1,    -1,
      -1,    -1,   248,    -1,   250,   251,    -1,   253,   254,    -1,
      -1,    -1,   258,    -1,    -1,    -1,   262,   263,    -1,    -1,
     266,    -1,    -1,   269,   270,    -1,    -1,    -1,    -1,    -1,
     276,   277,    -1,   279,    -1,   281,    -1,   283,   284,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,    -1,   309,   310,   311,   312,    -1,   314,   315,
     316,   317,    -1,   319,   320,    -1,    -1,    -1,    -1,   325,
     326,   327,   328,   329,   330,    -1,    -1,   333,   334,    -1,
     336,    -1,   338,    -1,   340,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,    -1,   351,   352,    -1,    -1,   355,
     356,   357,   358,    -1,    -1,    -1,    -1,   363,    -1,    -1,
      -1,   367,    -1,   369,   370,   371,    -1,   373,   374,   375,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   389,   390,    -1,    -1,    -1,    -1,   395,
      -1,   397,   398,   399,   400,   401,   402,   403,   404,   405,
      -1,    -1,    -1,    -1,   410,   411,    -1,   413,    -1,   415,
     416,   417,   418,   419,    -1,   421,   422,   423,    -1,    -1,
     426,    -1,    -1,    -1,   430,   431,   432,   433,   434,    -1,
      -1,   437,   438,   439,   440,   441,    -1,   443,    -1,    -1,
     446,    -1,   448,    -1,    -1,   451,    -1,    -1,    -1,   455,
      -1,    -1,   458,   459,   460,    -1,    -1,    -1,    -1,   465,
     466,   467,   468,   469,   470,   471,    -1,   473,   474,    -1,
     476,    -1,    -1,    -1,    -1,   481,   482,   483,    -1,    -1,
      -1,    -1,   488,    -1,    -1,    -1,   492,    -1,    -1,   495,
      -1,    -1,   498,   499,    -1,   501,    -1,   503,    -1,   505,
     506,    -1,    -1,    -1,    -1,    -1,    -1,   513,   514,    -1,
     516,    -1,    -1,   519,    -1,    -1,   522,    -1,    -1,    -1,
      -1,   527,    -1,    -1,    -1,   531,    -1,   533,   534,   535,
     536,   537,   538,    -1,    -1,   541,   542,   543,   544,    -1,
     546,   547,    -1,   549,    -1,   551,   552,   553,   554,    -1,
      -1,   557,   558,    -1,   560,   561,   562,   563,    -1,    -1,
      -1,    -1,    -1,   569,   570,   571,    -1,    -1,    -1,    -1,
     576,   577,   578,    -1,   580,   581,    -1,   583,   584,    -1,
      -1,    -1,    -1,    -1,   590,    -1,    -1,   593,    -1,    -1,
      -1,   597,   598,   599,    -1,    -1,    -1,    -1,    -1,    -1,
     606,    -1,    -1,   609,    -1,    -1,    -1,   613,   614,   615,
     616,   617,   618,    -1,    -1,    -1,    -1,    -1,    -1,   625,
      -1,    -1,   628,    -1,   630,    -1,    -1,   633
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const yytype_uint16 yystos[] =
{
       0,    13,    15,    32,    36,    50,    51,    58,    63,    64,
      84,   103,   126,   134,   135,   136,   147,   148,   160,   175,
     191,   206,   208,   213,   217,   242,   244,   260,   278,   282,
     377,   394,   396,   409,   420,   442,   445,   447,   450,   453,
     454,   462,   464,   472,   478,   486,   491,   492,   493,   523,
     530,   575,   587,   591,   594,   600,   629,   635,   645,   656,
     659,   660,   661,   662,   663,   665,   670,   672,   681,   714,
     742,   749,   750,   869,   958,  1033,  1080,  1083,  1093,  1096,
    1101,  1114,  1115,  1120,  1123,  1128,  1135,  1147,  1148,  1317,
    1319,  1330,  1333,  1358,  1366,  1377,  1384,  1398,  1401,  1404,
    1414,  1420,  1424,  1429,  1430,  1431,  1482,  1509,  1515,  1517,
    1524,  1526,  1554,  1560,  1561,  1562,  1563,  1616,  1624,  1625,
    1626,    11,   113,   131,   199,   283,   414,   484,   547,  1034,
    1585,  1586,  1587,  1590,   279,   364,  1122,  1555,   556,  1473,
     235,     5,     7,     8,     9,    10,    11,    14,    18,    21,
      23,    24,    25,    26,    27,    28,    29,    30,    32,    36,
      40,    43,    44,    45,    47,    49,    50,    53,    56,    57,
      59,    60,    62,    63,    65,    66,    67,    68,    69,    70,
      71,    73,    74,    75,    76,    77,    78,    79,    81,    82,
      83,    84,    85,    86,    87,    88,    90,    91,    93,    94,
      95,    96,    97,    99,   102,   105,   107,   109,   111,   115,
     116,   117,   120,   125,   126,   131,   133,   137,   139,   140,
     141,   142,   143,   147,   150,   151,   152,   156,   158,   159,
     161,   162,   163,   166,   167,   169,   170,   171,   172,   173,
     174,   175,   178,   179,   180,   183,   184,   186,   187,   188,
     191,   195,   197,   199,   201,   202,   203,   204,   205,   207,
     209,   213,   214,   215,   217,   221,   222,   226,   227,   228,
     229,   232,   233,   234,   236,   238,   243,   244,   248,   250,
     251,   253,   254,   258,   261,   262,   263,   266,   269,   270,
     276,   277,   279,   281,   283,   284,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   309,   310,   311,   312,   314,   315,   316,   317,
     319,   320,   325,   326,   327,   328,   329,   330,   333,   334,
     336,   338,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   351,   352,   355,   356,   357,   358,   362,   363,   367,
     369,   370,   371,   373,   374,   375,   376,   378,   379,   388,
     389,   390,   393,   395,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   409,   410,   411,   413,   415,   416,
     417,   418,   419,   421,   422,   423,   426,   430,   431,   432,
     433,   434,   437,   438,   439,   440,   441,   443,   444,   446,
     447,   448,   451,   453,   455,   456,   458,   459,   460,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     476,   477,   481,   482,   483,   484,   488,   492,   494,   495,
     496,   497,   498,   499,   501,   502,   503,   504,   505,   506,
     513,   514,   516,   519,   522,   523,   527,   530,   531,   533,
     534,   535,   536,   537,   538,   541,   542,   543,   544,   546,
     547,   549,   551,   552,   553,   554,   557,   558,   560,   561,
     562,   563,   569,   570,   571,   575,   576,   577,   578,   580,
     581,   583,   584,   586,   587,   590,   593,   595,   597,   598,
     599,   606,   609,   613,   614,   615,   616,   617,   618,   625,
     626,   628,   629,   630,   633,   708,  1472,  1476,  1480,  1481,
     309,   546,   550,  1511,  1511,   625,  1556,   113,   198,   283,
     484,   507,   547,   553,   589,   597,   690,   691,   920,   921,
     922,  1010,  1011,  1012,  1367,  1318,   113,   171,   199,   235,
     283,   414,   484,   547,   553,   572,   597,   614,  1329,  1476,
    1122,   107,   751,   707,   653,  1469,  1471,  1476,   671,  1331,
     403,   504,  1425,   116,   235,   630,  1436,  1511,  1122,   645,
     870,  1476,  1421,   472,   597,  1511,  1122,  1334,  1415,   510,
     739,   743,   744,  1476,   707,  1556,  1476,  1151,  1153,  1154,
    1483,  1385,   743,    12,   496,   569,    12,   496,   550,  1379,
     403,   504,  1516,  1359,  1476,    32,    84,   158,   409,   431,
     464,   523,  1618,   478,   645,  1149,     0,   160,   657,   409,
     179,   397,  1402,  1469,  1476,   164,  1045,  1476,   164,   708,
     210,   708,   271,  1473,  1476,  1478,   815,   816,   819,   842,
    1476,  1072,  1073,   171,  1040,  1585,  1511,  1556,  1129,   715,
     653,   679,   680,  1473,  1094,  1116,    17,  1557,   230,   923,
     210,  1478,   817,   842,   707,   384,  1582,  1586,  1587,  1588,
    1589,  1590,   550,   921,   235,   235,   235,   231,   290,   423,
    1375,  1376,     7,    21,    29,    35,    37,    38,    39,    41,
      54,    55,    60,    61,    70,    73,    75,    76,    77,    78,
      79,    96,   100,   101,   106,   108,   112,   113,   118,   119,
     120,   125,   127,   130,   176,   181,   182,   189,   203,   205,
     211,   218,   219,   226,   230,   242,   245,   263,   268,   276,
     287,   313,   318,   329,   333,   335,   339,   340,   341,   342,
     343,   350,   359,   360,   361,   365,   366,   371,   392,   399,
     404,   405,   407,   421,   449,   450,   463,   469,   470,   476,
     528,   529,   535,   539,   540,   545,   556,   560,   561,   562,
     563,   573,   574,   575,   579,   582,   597,   602,   603,   604,
     605,   610,   612,   618,   633,   638,   639,   644,   645,   648,
     649,   652,   653,  1170,  1171,  1172,  1173,  1177,  1184,  1185,
    1186,  1187,  1188,  1189,  1197,  1201,  1214,  1455,  1457,  1459,
    1460,  1461,  1465,  1467,  1472,  1476,   230,  1328,  1328,  1328,
    1328,   210,  1328,  1328,   842,  1328,   707,  1328,  1511,   666,
    1405,   139,    12,    13,   103,   134,   148,   171,   175,   186,
     208,   235,   242,   282,   415,   419,   435,   443,   451,   478,
     491,   492,   541,   572,   594,   596,  1527,  1529,  1531,  1532,
    1476,   376,    69,   427,   653,  1478,   132,   220,   290,  1336,
    1476,  1473,   214,   503,  1426,   246,  1432,  1510,  1511,   959,
    1164,    48,   871,   196,    35,   309,  1390,  1422,  1476,   707,
    1124,  1511,   132,   290,  1337,  1365,   309,   422,   496,  1416,
    1417,   606,   740,   486,   745,    12,   419,  1525,  1529,   567,
    1557,  1152,    12,   144,   220,   512,   513,   514,   515,   516,
     517,   532,  1158,  1159,  1160,  1581,    60,    61,   130,   207,
     279,   346,   399,   483,   569,   652,   984,  1476,  1484,  1496,
    1500,  1501,    12,    24,    36,    60,    68,    73,    99,   101,
     103,   114,   162,   167,   170,   197,   199,   207,   209,   234,
     235,   236,   257,   279,   309,   376,   402,   413,   414,   417,
     418,   438,   483,   496,   531,   549,   550,   598,   617,   984,
    1009,  1386,  1390,  1391,  1393,  1401,  1497,   745,   497,   679,
     427,   622,  1084,  1085,  1086,   497,   679,  1378,  1476,  1473,
    1511,  1365,    37,   218,   219,   556,  1456,  1474,  1617,  1617,
    1617,  1617,  1617,  1153,  1149,   646,   651,  1476,  1400,  1399,
     327,   554,   581,  1036,   595,   108,  1478,  1479,  1038,   821,
     843,  1476,  1037,   378,     6,    58,   148,   360,   426,   428,
     844,   550,   231,   375,  1074,  1075,  1076,   708,   518,  1591,
    1592,  1039,  1102,  1130,  1131,  1132,  1133,  1469,   645,   716,
    1476,   567,  1323,  1324,  1469,  1323,    57,   362,   362,   442,
    1558,   359,   360,  1176,  1476,   820,   843,   193,     6,  1479,
    1542,  1545,   450,    10,   414,   572,   694,  1164,  1584,  1592,
    1600,  1604,  1605,  1611,   694,  1164,  1583,  1592,  1600,  1605,
    1611,  1585,  1590,   923,   923,   923,   923,   196,  1368,  1372,
    1373,  1476,  1375,   645,   645,   645,  1184,   645,   645,   645,
    1170,  1217,   645,   645,   645,   645,   645,   645,   645,   645,
     645,   645,   645,   645,   645,   645,  1169,  1169,   645,  1168,
     645,   645,   645,   556,   645,   645,   645,   645,   645,   645,
     645,   645,   645,   645,   645,   645,  1170,   645,   645,   645,
     645,  1215,  1216,  1465,  1476,   645,   645,   645,   645,   645,
     645,   645,   645,   645,  1170,  1168,   645,   645,   645,   645,
     645,   645,   645,   645,   645,   645,   645,   645,   645,   645,
     645,   645,   645,  1168,   556,   645,   645,   645,   556,   645,
     645,   645,    37,   218,   219,   556,   983,   645,  1169,  1168,
    1168,   645,   645,   645,   645,   645,  1184,  1184,  1184,  1170,
    1576,  1577,  1476,  1202,  1476,    16,    17,   381,   384,   631,
    1174,  1175,   164,   165,   200,   212,   252,   264,   291,   353,
    1178,    33,   145,   249,   272,   339,   436,   489,   490,   505,
     636,   637,   638,   639,   640,   641,   642,   643,  1176,  1184,
      72,   383,   647,  1474,   645,   653,   176,  1476,   708,  1476,
    1476,   843,   708,  1478,   853,  1391,   708,  1479,  1541,  1322,
    1328,   601,   667,    35,    68,   137,   162,   166,   201,   222,
     236,   284,   309,   413,   422,   437,   455,   496,   499,   527,
     549,   598,  1406,  1410,  1411,  1511,    89,   652,   752,   753,
     754,   755,  1476,   413,  1530,   466,   466,   547,   553,   597,
     614,   379,  1534,   546,   372,  1536,    67,   496,  1533,   114,
     614,  1535,   372,   647,    19,   164,  1269,  1270,  1518,  1476,
     231,  1071,   504,    90,   422,  1427,    50,    88,   290,  1438,
    1469,  1512,  1513,  1121,   646,  1170,   274,   277,   424,   872,
     874,   652,   664,  1473,   284,  1125,  1479,  1126,  1127,  1469,
    1097,   246,  1325,  1338,  1339,  1469,    50,  1418,   647,  1474,
      56,    66,    81,    93,    94,    95,   111,   328,   345,   474,
     534,   552,   746,   748,  1530,   372,   372,   472,  1559,  1558,
     588,  1564,  1565,   640,  1162,  1163,  1164,  1160,   486,   653,
      35,   130,   164,   487,   985,   986,  1349,  1478,   194,  1349,
    1486,   652,  1478,    35,   130,   988,   989,  1478,   653,  1487,
    1485,  1349,   497,   170,   272,   620,  1397,   645,   113,   171,
     199,   414,   550,   572,   614,  1397,    12,   932,  1478,   273,
    1288,  1290,   196,   249,  1392,  1394,    71,   527,   194,   527,
     546,   504,    71,   527,    12,    43,    97,   102,   251,   326,
     390,   506,   543,  1380,  1381,  1382,   679,   222,   527,   680,
     527,  1288,  1397,  1394,   284,   161,    74,   416,   546,   571,
     194,   527,   609,  1087,  1088,  1087,   374,   627,    91,   647,
    1087,  1087,  1324,  1071,   647,   373,  1620,   542,  1621,   256,
     458,  1619,   646,  1565,  1567,  1569,  1570,   160,   658,  1147,
    1403,  1456,  1476,   130,   918,   919,   929,   930,   993,   116,
    1169,   652,   709,     6,   822,   709,   645,   115,   839,   839,
     839,     4,  1469,  1076,  1041,   477,   614,  1592,  1103,  1104,
    1324,   249,   647,   396,  1141,  1143,  1144,   717,   718,  1170,
     673,   179,   423,   647,  1095,    59,   179,   183,   194,   325,
     423,  1117,  1118,  1119,    57,   442,   176,   689,   822,   116,
     839,   228,   647,  1164,  1164,  1164,   171,   199,   199,  1592,
    1469,  1476,  1476,  1476,  1326,  1327,  1469,  1470,  1476,   647,
    1370,   653,  1374,  1170,  1170,    12,   144,  1209,  1271,  1209,
    1209,  1209,   619,  1219,  1170,  1170,  1214,  1214,  1170,  1170,
    1170,  1170,  1182,  1183,  1170,  1170,  1170,  1170,   144,  1209,
    1271,   646,   127,   189,   218,   287,   366,   579,   646,  1297,
    1300,  1301,   646,  1170,  1170,  1170,  1170,  1465,  1576,   121,
     122,   123,   124,   125,   223,   224,   225,   226,   329,   331,
     332,   333,   340,   421,   475,   476,   618,   632,   633,  1266,
    1267,  1214,   117,   120,   560,   563,  1268,   144,  1204,  1170,
    1170,  1170,  1170,  1266,  1214,  1170,  1214,  1216,     9,   647,
     653,   144,  1209,  1170,  1170,   144,  1209,  1170,  1170,  1214,
    1214,  1214,  1170,  1170,  1170,  1214,  1173,  1170,  1170,  1170,
    1170,  1170,   646,  1170,  1209,  1209,  1170,  1170,   144,  1209,
    1170,  1267,  1267,  1170,    46,   265,   568,  1170,  1170,   646,
    1466,  1467,  1476,  1209,  1209,  1170,  1170,   646,   647,   646,
     478,   645,  1573,  1574,  1170,   652,  1203,  1478,   653,  1170,
    1170,  1170,  1172,   182,   365,   574,   590,  1176,    12,    18,
    1172,  1179,  1173,  1173,   645,  1184,  1173,  1173,  1173,  1173,
     272,  1173,  1173,   245,  1173,   245,  1173,  1173,  1173,  1173,
    1173,    33,   249,   272,   436,  1478,  1184,  1170,  1190,  1476,
     653,   372,   853,   363,   616,   854,   855,   162,   647,  1323,
    1320,   652,   668,   669,   284,   284,   284,   284,    50,   284,
     679,   284,   647,  1407,   120,   560,   563,   747,   757,  1201,
    1459,  1465,  1478,   647,   164,   546,   645,  1546,  1479,  1546,
    1546,  1546,   199,   414,   550,  1528,  1532,  1476,   187,   356,
    1476,  1519,  1520,  1338,  1473,   597,  1170,  1428,  1136,   279,
    1437,  1270,   647,  1323,  1165,    74,   645,   878,   879,   878,
     879,   397,   881,   215,   259,  1478,    31,   567,  1423,   647,
     567,   647,   567,  1323,  1339,  1335,   396,  1233,  1234,   679,
    1417,   647,   164,   647,  1479,   199,   414,  1528,  1476,    12,
     144,  1572,   647,  1155,  1170,  1463,  1476,  1476,    72,   991,
    1170,  1479,   371,   399,   556,  1507,   253,   427,  1502,  1503,
    1504,  1505,   207,   279,   483,  1498,  1349,  1476,   569,  1488,
    1499,  1501,   647,  1490,    12,    35,   130,   372,  1170,  1508,
     527,   249,  1395,  1473,  1170,   640,   923,   708,   708,   708,
    1469,   708,  1469,   284,   344,   527,  1389,  1389,   287,   366,
     467,   579,  1291,  1292,  1457,  1476,  1397,  1476,   708,  1397,
    1479,  1392,  1397,  1473,   708,  1397,   250,   544,   184,   194,
    1383,   647,   170,   527,  1392,  1469,  1394,  1392,  1392,  1170,
    1397,  1397,  1082,   441,   519,  1089,  1090,  1081,   501,  1086,
     478,   645,   649,  1220,  1221,  1222,  1223,  1224,  1235,  1236,
    1250,  1456,   401,  1622,   382,  1284,  1290,  1571,   919,    72,
     984,   140,  1478,    82,    96,   261,   337,   362,   425,   518,
     711,   713,   432,   583,   840,   841,   238,   836,   837,   838,
     845,   853,   855,   113,   221,   388,   399,   406,   502,   597,
     692,   693,  1473,    25,   317,   830,   831,   832,   845,   846,
     847,   853,   855,   823,   824,   830,  1035,   372,   702,  1042,
     131,   248,  1469,   647,   400,  1105,   130,  1134,  1476,  1132,
    1469,   868,  1143,   235,   259,  1007,  1145,   646,   647,   232,
     292,   294,   295,   296,   297,   298,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   310,   311,   312,   439,   440,
     674,   675,   678,  1324,   595,  1118,   917,   918,    82,   357,
     433,   584,   833,   834,   835,   845,   849,   850,   851,   852,
     853,   855,   626,   600,   818,    48,   613,   622,  1543,  1545,
     199,   708,   708,   923,   708,  1476,   682,  1013,  1014,  1013,
    1013,   647,  1371,  1233,   653,  1374,  1373,   196,   640,  1476,
     647,   646,  1209,   646,  1210,   646,   646,   646,  1170,   154,
     619,  1218,    19,   646,   601,   646,   646,   646,   647,   646,
     647,   646,   647,   647,   647,   647,   601,   647,  1198,   646,
     640,   646,   647,   647,   646,   646,   646,   646,   196,   646,
     647,  1200,   646,   647,   647,   647,   639,   646,   647,   646,
     646,   645,  1465,  1476,  1209,   646,   646,   646,  1209,   646,
     647,   646,   646,   646,   646,   646,   646,   647,   646,   249,
     646,   647,   647,   647,   647,   646,   646,   646,   647,   196,
     647,  1209,   646,   646,   647,   647,   647,   646,   196,  1170,
     196,  1170,   196,  1170,   196,   646,   647,   646,   646,   646,
     646,   647,   646,  1214,  1240,  1241,  1242,   478,   645,  1150,
    1568,  1569,   588,  1578,   650,  1498,   487,  1476,   182,   365,
     574,   590,   645,    17,  1170,  1576,   169,  1276,  1173,  1170,
    1170,  1173,   645,  1184,  1173,  1164,  1194,  1195,  1196,   645,
     653,  1476,  1469,   854,  1349,  1350,  1479,    52,   457,  1077,
    1323,  1478,   647,   679,  1411,  1323,  1412,   755,   758,   759,
     754,   367,   470,   756,  1476,  1547,  1548,   567,   640,  1469,
    1476,  1540,  1540,  1540,   164,   187,   200,   212,   262,   264,
     291,   356,   411,  1521,  1523,   620,  1272,  1332,  1479,  1137,
    1138,  1139,  1140,  1469,   237,   290,   427,   627,  1514,  1513,
     645,  1164,  1297,   538,   882,   873,   645,  1170,  1473,  1479,
    1479,  1127,  1469,   179,   423,   599,  1098,  1099,  1100,   478,
     486,   605,   606,   645,   913,  1340,  1343,   645,    12,  1419,
     748,   747,   208,   196,  1540,  1540,  1540,  1566,  1163,   196,
     246,  1156,  1157,  1283,  1284,  1312,  1165,  1165,   653,   130,
     990,   992,  1478,  1349,   645,   645,   270,   374,   627,   647,
     647,   653,   653,   653,  1501,  1170,  1502,  1489,  1349,  1491,
    1492,  1473,   196,  1396,   646,  1476,   174,   467,   370,   647,
    1397,   422,  1288,  1382,  1395,  1397,  1392,  1469,  1397,  1397,
     647,   593,  1091,  1249,  1476,   104,   239,   256,   268,   349,
     463,   532,  1231,  1232,   486,   647,  1469,  1249,   647,   194,
    1623,    48,  1288,  1350,  1350,   347,  1473,   518,   518,   518,
     518,   518,   477,  1473,  1473,  1350,   647,   838,  1473,  1473,
    1473,  1473,   127,   189,   218,   287,   366,   579,  1296,  1473,
    1473,   646,   647,  1350,  1350,   647,   832,   825,   826,   845,
     846,   847,     6,    11,    13,    15,    26,    28,    58,    63,
      64,    70,    82,    90,   100,   116,   133,   141,   142,   148,
     156,   162,   173,   192,   233,   235,   243,   258,   282,   316,
     334,   338,   377,   382,   389,   391,   396,   399,   430,   444,
     445,   446,   447,   468,   524,   525,   526,   531,   547,   551,
     570,   575,   588,   866,   925,   927,   929,   930,  1046,  1050,
    1052,  1055,  1061,  1062,  1063,  1068,  1069,  1280,  1472,    86,
     473,   445,  1043,  1593,  1104,   194,  1142,   645,  1170,   164,
     164,   164,   164,   164,   164,   164,   164,   164,   164,   164,
     164,   164,   164,   164,   164,   164,   164,   164,   164,   164,
     647,  1350,  1350,  1350,  1350,   647,   835,  1478,   283,   180,
     827,   828,   829,   845,   846,   847,   848,   851,   852,   853,
     855,   399,   556,  1478,  1476,  1612,     8,    31,   813,   708,
     645,   460,   272,   645,   857,   860,   924,   926,   927,   577,
     601,  1021,   372,   372,   372,  1327,  1476,   601,  1369,  1476,
    1221,   653,  1374,   245,  1170,   646,  1170,   559,  1170,  1170,
     158,    35,    61,   117,   120,   128,   146,   247,   351,   494,
     563,   592,  1211,   985,  1183,  1170,  1182,  1214,  1170,  1170,
     985,  1211,  1214,   646,   245,   245,  1170,  1170,  1214,  1170,
    1170,  1170,  1170,  1170,  1173,   646,   646,  1170,  1170,  1170,
    1170,  1170,  1170,  1214,   245,  1170,  1170,  1170,   646,  1170,
    1170,  1170,  1170,   196,  1170,   196,  1170,   196,  1170,  1170,
    1170,   646,  1579,  1580,  1581,  1241,  1150,   646,  1572,  1478,
    1170,  1576,  1172,   646,   647,   646,  1184,  1266,  1266,    17,
    1170,  1576,  1276,  1170,   646,   647,  1213,  1214,  1476,  1321,
     931,  1478,  1077,   669,  1408,   164,   647,   646,   647,  1542,
     653,   653,   567,   567,   567,  1522,  1273,  1289,  1290,  1340,
     647,  1141,  1143,   556,  1475,   627,   279,    88,   875,   876,
     877,  1476,   887,  1173,    48,   645,   889,   879,   875,   567,
    1099,   914,  1341,   645,  1346,  1351,  1346,   646,   913,  1342,
    1462,  1463,  1466,  1476,  1344,  1265,  1476,   164,   379,  1541,
     196,   196,   196,  1148,   149,  1221,  1313,   194,   282,  1161,
    1312,  1289,  1157,    19,  1166,  1473,  1476,   640,  1476,  1507,
     556,   556,   427,   448,   481,  1506,  1504,  1503,  1349,  1490,
    1508,   647,  1494,  1496,  1500,   127,   189,   287,   366,   579,
    1298,  1387,   167,   617,  1292,  1293,   174,  1292,  1292,   366,
    1396,  1272,  1392,  1090,   293,   678,  1092,  1237,  1244,  1249,
    1220,   256,   256,   385,  1251,   268,   463,  1231,  1251,  1220,
    1361,  1362,  1466,  1222,  1233,  1246,  1247,  1296,   330,  1285,
     992,   986,   116,   116,   131,   248,   227,   856,  1297,   838,
     693,   856,   856,   832,   647,   826,    80,    92,   396,   941,
     948,   949,  1005,  1007,  1011,  1012,  1070,  1350,  1070,   396,
    1350,  1350,  1070,  1350,   396,   396,  1350,  1350,   567,   140,
    1350,   257,   547,   193,   396,   412,  1007,  1070,   257,  1350,
     396,   547,   140,  1350,  1350,  1350,  1350,  1350,  1070,   396,
      48,  1350,  1350,   868,  1350,   396,   398,    19,   164,   567,
    1079,   396,   396,  1350,  1350,  1350,  1350,   143,   326,  1476,
    1350,  1350,   396,  1350,   925,   647,   865,   866,  1050,   645,
     653,   940,   950,  1468,  1476,  1349,   360,   410,    23,   172,
     696,   567,   141,   156,   698,   645,  1594,    12,    74,  1106,
     645,   412,  1262,  1263,  1264,  1476,   645,  1296,  1473,  1473,
    1298,  1473,  1296,  1473,  1473,  1473,  1473,  1473,  1473,  1473,
    1296,  1296,  1473,   109,   362,   498,  1460,  1473,  1296,   675,
    1473,  1297,   856,   856,   835,   378,   210,  1350,   647,   829,
     556,    19,   601,  1544,   460,   645,   134,   242,   594,   814,
     695,  1606,   128,   247,   429,   533,   936,  1469,   272,   913,
     937,   938,   939,   940,   941,   864,   865,   647,   926,    47,
     215,   471,  1026,  1026,  1469,  1469,  1469,   653,  1221,  1272,
    1374,  1272,  1170,   646,  1170,   559,   645,   975,   976,   976,
     976,   645,   970,   971,   975,  1212,   976,   247,   976,   247,
     646,   646,   646,    19,  1180,   646,    19,   646,   646,   646,
    1199,  1170,  1170,   646,   646,   382,  1206,   647,   647,   646,
     647,   646,   249,  1191,  1192,   646,   646,   646,   646,   647,
     646,   646,  1170,   646,   194,   646,   646,   647,   646,   647,
     647,   646,  1170,   646,  1170,   646,  1170,   646,   646,   646,
    1162,  1581,   646,  1575,   653,  1031,   646,  1214,  1172,   646,
     647,   646,  1165,  1196,   646,   622,  1409,    56,    66,    81,
      93,    94,    95,   111,   328,   345,   459,   474,   534,   552,
     760,   759,  1548,   622,  1551,   640,   640,  1542,  1542,  1542,
     645,  1170,   372,  1356,  1139,  1469,  1143,   231,  1146,  1433,
     646,   647,  1165,   874,   396,   890,   891,   646,  1479,  1158,
    1347,  1348,  1466,  1352,   647,   645,  1343,   646,   646,   647,
     653,  1564,   646,   647,   747,   196,  1541,  1541,  1541,  1272,
    1272,   150,   386,  1308,  1309,  1314,   594,   249,  1473,  1476,
     653,   646,   646,    83,   580,   427,  1508,  1493,  1495,  1288,
    1293,  1388,  1397,   164,   647,   588,   646,  1568,  1245,   650,
     256,  1251,  1251,  1235,   256,   372,   601,   647,  1360,  1349,
    1270,  1158,  1170,  1286,  1464,   826,  1029,  1468,   923,    64,
     193,   412,   589,   947,  1006,   923,  1030,  1007,  1008,  1008,
     923,   130,  1476,  1468,  1122,  1298,  1296,  1328,  1296,    12,
    1051,  1059,  1060,  1476,  1122,  1473,  1473,   984,  1350,  1296,
     259,  1328,   259,  1328,  1328,   931,  1060,  1350,   187,   262,
     362,   934,  1296,   130,  1476,  1298,  1298,  1328,  1122,  1281,
    1282,  1466,   130,  1296,   130,  1296,  1302,   867,  1473,  1122,
    1469,  1122,  1122,    85,    87,   130,   152,   188,   390,   434,
     933,   130,  1296,   130,  1296,   130,  1296,  1296,  1302,  1051,
     928,     6,   148,  1063,   937,  1476,     8,   187,  1078,   435,
     946,   947,   999,   951,   653,   130,   218,   287,   366,   579,
    1299,  1300,  1473,  1476,   410,  1170,  1170,   372,   702,   708,
     372,    82,   703,  1476,  1595,    19,    12,   645,  1107,  1051,
     646,   647,   676,   677,  1296,   645,  1476,   856,   829,  1473,
     936,  1613,   372,   372,   719,   720,   722,  1476,   504,  1469,
     646,   646,   647,   231,   450,   861,  1439,   926,   683,   685,
     687,  1476,  1272,  1283,  1266,  1170,   127,   287,   366,   579,
      21,    35,    49,   586,   984,   994,   995,   996,   366,   645,
     971,   977,    61,   117,   120,   128,   146,   190,   247,   348,
     351,   429,   563,   592,   964,   965,  1181,  1211,   646,  1266,
    1266,    48,   480,  1205,  1170,  1170,  1214,    44,   349,   646,
     622,  1193,  1170,  1266,  1170,  1170,  1170,  1170,   646,   646,
     646,  1243,  1573,  1476,   646,  1214,  1166,   427,   208,   452,
    1549,  1549,  1549,   130,  1170,  1354,  1355,   151,  1146,   266,
    1439,   877,   646,   215,   259,   892,   646,   647,  1162,   647,
    1349,  1353,  1354,  1351,  1345,  1343,  1462,  1476,   868,  1476,
    1541,  1289,   210,  1277,  1475,  1475,   652,  1310,  1311,  1478,
     488,   640,  1494,  1499,  1288,  1473,   678,  1572,  1270,  1223,
    1220,  1235,   256,   256,  1220,  1235,  1225,  1226,  1362,  1272,
    1355,  1260,  1261,  1162,   647,    20,   135,  1287,  1122,   645,
     259,   259,  1008,  1029,  1029,  1014,  1030,  1030,   148,   486,
    1051,  1468,  1048,   647,  1297,   986,  1473,  1328,  1059,  1468,
    1468,   622,  1473,  1468,  1051,   647,  1287,   871,  1051,  1056,
    1051,   645,   646,  1476,  1469,    34,    35,    40,    42,    44,
      45,   117,   120,   128,   146,   163,   188,   190,   203,   204,
     247,   276,   285,   286,   288,   322,   323,   324,   341,   342,
     343,   348,   351,   368,   369,   404,   405,   429,   482,   486,
     500,   557,   560,   563,   564,   565,   566,   607,   608,   633,
     952,   960,   963,   964,   965,   966,   967,   968,   969,  1476,
    1266,   496,  1473,   147,  1044,   646,   647,  1596,  1597,  1108,
     234,   646,  1263,   646,   647,   692,   504,   240,   249,   387,
     723,   724,   725,   726,  1164,   473,   646,   647,   721,  1473,
     646,   859,   858,   939,    19,   916,   645,   645,   645,   273,
    1294,   646,   646,   646,   646,   646,    35,    21,   586,   984,
      35,   985,   647,   366,   976,   970,    61,   976,   247,   996,
     646,   646,   646,  1207,  1456,   646,   646,   647,   646,   336,
     261,   422,   646,   646,   646,   646,   646,   646,   935,  1157,
    1289,  1568,   646,   282,   379,    65,   254,   358,   520,   536,
     628,  1538,  1539,   622,  1550,  1550,  1550,   646,   647,  1357,
     246,   645,   880,   645,   893,  1476,   891,   915,  1348,  1355,
     646,  1567,    48,   216,  1274,  1315,  1478,   647,   336,  1238,
     372,  1228,  1235,  1235,   372,  1230,  1170,   645,  1283,  1258,
    1259,  1248,  1464,  1053,  1170,  1030,  1014,   645,  1013,  1013,
     130,   130,  1064,  1117,  1060,   991,  1468,  1077,   550,  1065,
    1047,  1282,  1057,  1059,  1049,  1412,   645,  1000,   975,   975,
     976,   976,   970,   408,   961,   970,   970,   996,    61,   607,
     964,   966,   996,   996,    61,   608,   608,   611,   970,   962,
     976,   976,   976,   996,   975,   976,    26,    72,    82,   130,
     202,   365,   372,   412,   482,   589,   953,   978,   979,   980,
     998,  1176,  1472,   611,   975,   996,    35,   975,   997,   975,
     975,   976,   977,   653,   697,   704,   705,  1476,   478,   645,
    1598,  1111,  1476,    12,   645,  1109,   677,   646,  1473,   646,
     647,   721,  1601,   696,  1607,   722,   960,   981,  1567,   924,
     645,   913,  1027,  1028,  1476,  1027,  1027,   467,  1292,   985,
     997,   366,  1208,  1464,  1170,   336,   178,  1161,  1161,    17,
    1413,   556,   556,   556,    17,  1537,   208,   314,   315,   319,
     320,  1552,  1553,  1355,   259,   550,  1164,   883,   885,   886,
    1476,   605,   894,   935,  1278,  1464,  1275,  1283,   984,   987,
    1311,  1573,  1227,   601,  1229,   601,  1265,  1294,   192,   231,
     600,  1253,  1254,  1257,   935,  1287,   397,   645,  1054,   646,
     645,   645,  1027,   645,   645,   120,   560,   563,   638,   639,
    1458,  1459,   950,  1469,   952,  1122,  1058,  1098,   646,  1001,
    1476,   313,  1002,   494,   592,   634,   972,   973,   974,   645,
     972,   972,   996,   611,   972,   645,   996,   972,   990,  1473,
     361,   982,  1458,    14,   594,   130,   259,    19,   980,   259,
     365,  1349,   996,   997,   996,   997,   972,   972,  1476,   522,
     699,    54,    69,   185,   230,   255,   267,   376,   461,   706,
     764,   766,   767,   768,   770,   771,   772,   773,   774,   775,
     777,   785,   786,   789,   800,   803,   805,   806,  1472,  1477,
    1481,  1151,  1149,   622,  1599,   646,   647,  1110,  1614,   725,
    1476,  1469,   701,   702,   460,   991,   864,   913,   862,   646,
     647,  1287,   645,   646,   646,   174,   467,   646,   647,  1287,
     646,   141,  1538,   379,  1296,  1296,  1296,   366,   638,  1295,
    1553,   594,  1469,   887,   537,   888,   646,   647,   249,   269,
      82,    90,   116,   235,   316,   334,   357,   547,   910,   911,
     912,  1391,   623,   624,   647,  1279,  1287,  1170,  1289,   986,
    1316,  1239,  1170,   645,  1170,   645,   646,  1007,  1007,  1254,
    1297,   890,  1027,  1027,   646,  1027,  1027,  1460,  1460,  1078,
     868,  1066,   246,   646,   647,   197,   395,   495,   372,  1003,
     974,  1032,  1456,  1032,   645,  1167,   361,   606,   645,   130,
    1299,  1473,  1476,  1170,   159,   700,   787,   790,  1476,   196,
     356,   778,   765,  1477,  1477,  1476,   769,   660,   289,   449,
     621,   809,    32,   807,   654,   646,    53,    64,   279,  1476,
     412,  1112,  1113,  1476,   710,   981,   194,   698,  1608,   861,
     646,  1564,    82,   258,  1015,  1018,  1021,  1022,  1023,  1472,
    1028,   366,   622,  1016,  1020,  1022,  1025,  1017,  1019,  1022,
    1024,   174,  1464,    62,   287,   366,  1363,  1364,  1466,  1233,
    1165,  1297,   884,   886,   896,   558,  1350,  1350,   140,   140,
    1350,  1350,  1350,  1350,   645,   905,   912,   162,  1464,   414,
    1303,    74,  1440,  1568,  1265,  1265,   194,  1252,  1252,   646,
     646,   646,   942,   646,   646,  1078,   645,  1476,   134,   594,
     646,   647,   646,   646,  1297,  1167,   959,  1170,  1170,   619,
     792,   796,   196,  1476,   780,   781,  1170,   728,   763,   764,
     766,   768,   770,   772,   773,   774,   775,   777,   785,   800,
     803,   805,   728,   810,   808,   801,   804,  1567,    64,   379,
      64,   646,   647,   138,   711,   712,  1176,  1615,  1164,   703,
     981,   863,  1473,  1350,   684,  1023,  1349,  1287,   646,   393,
     686,  1025,   688,  1024,  1287,   647,  1349,  1434,   646,   888,
     645,   898,   900,   895,  1473,  1473,  1350,  1350,  1299,  1299,
    1297,  1478,   538,   906,   907,  1350,  1287,  1476,   157,   168,
     380,   555,  1441,  1442,   275,  1443,   646,   646,   210,   256,
     382,  1256,  1255,   999,   945,  1015,   943,   944,   890,    52,
     362,   457,   486,  1004,  1004,   996,  1456,   996,   646,   646,
     788,   797,   154,   796,   799,   246,   158,  1170,   158,   763,
     651,   593,  1170,   729,   809,   807,   379,   379,  1113,   138,
     763,  1602,   147,  1609,  1567,  1296,  1067,  1068,  1069,   130,
    1299,  1473,  1476,  1472,  1067,  1067,  1364,  1355,   987,   645,
     899,   900,   901,   321,   897,   900,  1473,  1473,   908,   646,
     647,   931,  1304,    48,    48,   157,    48,  1442,   521,   555,
    1444,  1445,    48,    48,   645,   645,  1015,  1016,  1017,   646,
       5,   130,   365,   372,   372,   400,   615,   954,   619,   791,
     793,  1170,   728,   158,   776,   230,   559,   289,   651,   812,
     147,   129,   727,   730,   802,  1477,   802,   153,   704,   710,
    1069,  1068,  1435,   646,   647,   321,   903,   904,  1173,   909,
    1478,   907,   645,  1456,  1456,    48,  1456,    48,    48,  1445,
    1262,  1264,   594,   134,    82,   589,   955,   956,   957,   794,
     793,   799,   798,    54,   779,  1476,   782,  1170,   811,    98,
     177,   735,   761,  1476,   158,   763,   651,   469,  1610,   467,
    1446,   900,   647,   902,   910,  1164,  1305,  1306,  1307,  1456,
    1456,  1456,   646,   646,  1004,  1004,  1473,   259,   957,  1170,
     158,   559,   647,   728,   158,   728,   213,   647,   731,    89,
     110,   651,  1603,   763,   228,  1440,   904,   646,  1170,   646,
     647,   795,    54,   728,  1476,   783,   449,   158,   194,  1476,
     981,   194,   194,   763,    48,  1443,  1165,  1307,   559,   154,
     155,   784,   621,   732,   130,   762,   738,   739,  1296,   733,
     734,  1456,   231,  1447,   728,   728,   780,   509,   511,   736,
     737,   738,   741,  1176,  1476,  1170,  1147,   366,   645,  1449,
     647,   763,   195,   275,   467,  1448,   646,   652,  1450,  1451,
    1466,   486,  1452,   737,  1478,   646,   647,  1453,  1454,  1466,
    1451,   647,  1349,  1454,  1164,  1355,  1165
};

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		(-2)
#define YYEOF		0

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrorlab


/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */

#define YYFAIL		goto yyerrlab

#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yytoken = YYTRANSLATE (yychar);				\
      YYPOPSTACK (1);						\
      goto yybackup;						\
    }								\
  else								\
    {								\
      yyerror (YY_("syntax error: cannot back up")); \
      YYERROR;							\
    }								\
while (YYID (0))


#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#define YYRHSLOC(Rhs, K) ((Rhs)[K])
#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)				\
    do									\
      if (YYID (N))                                                    \
	{								\
	  (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;	\
	  (Current).first_column = YYRHSLOC (Rhs, 1).first_column;	\
	  (Current).last_line    = YYRHSLOC (Rhs, N).last_line;		\
	  (Current).last_column  = YYRHSLOC (Rhs, N).last_column;	\
	}								\
      else								\
	{								\
	  (Current).first_line   = (Current).last_line   =		\
	    YYRHSLOC (Rhs, 0).last_line;				\
	  (Current).first_column = (Current).last_column =		\
	    YYRHSLOC (Rhs, 0).last_column;				\
	}								\
    while (YYID (0))
#endif


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if YYLTYPE_IS_TRIVIAL
#  define YY_LOCATION_PRINT(File, Loc)			\
     fprintf (File, "%d.%d-%d.%d",			\
	      (Loc).first_line, (Loc).first_column,	\
	      (Loc).last_line,  (Loc).last_column)
# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#ifdef YYLEX_PARAM
# define YYLEX yylex (&yylval, YYLEX_PARAM)
#else
# define YYLEX yylex (&yylval)
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (YYID (0))

# define YY_SYMBOL_PRINT(Title, Type, Value, Location)			  \
do {									  \
  if (yydebug)								  \
    {									  \
      YYFPRINTF (stderr, "%s ", Title);					  \
      yy_symbol_print (stderr,						  \
		  Type, Value); \
      YYFPRINTF (stderr, "\n");						  \
    }									  \
} while (YYID (0))


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)
#else
static void
yy_symbol_value_print (yyoutput, yytype, yyvaluep)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
#endif
{
  if (!yyvaluep)
    return;
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# else
  YYUSE (yyoutput);
# endif
  switch (yytype)
    {
      default:
	break;
    }
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)
#else
static void
yy_symbol_print (yyoutput, yytype, yyvaluep)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
#endif
{
  if (yytype < YYNTOKENS)
    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);

  yy_symbol_value_print (yyoutput, yytype, yyvaluep);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
#else
static void
yy_stack_print (yybottom, yytop)
    yytype_int16 *yybottom;
    yytype_int16 *yytop;
#endif
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)				\
do {								\
  if (yydebug)							\
    yy_stack_print ((Bottom), (Top));				\
} while (YYID (0))


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_reduce_print (YYSTYPE *yyvsp, int yyrule)
#else
static void
yy_reduce_print (yyvsp, yyrule)
    YYSTYPE *yyvsp;
    int yyrule;
#endif
{
  int yynrhs = yyr2[yyrule];
  int yyi;
  unsigned long int yylno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
	     yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
		       &(yyvsp[(yyi + 1) - (yynrhs)])
		       		       );
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug)				\
    yy_reduce_print (yyvsp, Rule); \
} while (YYID (0))

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif



#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static YYSIZE_T
yystrlen (const char *yystr)
#else
static YYSIZE_T
yystrlen (yystr)
    const char *yystr;
#endif
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static char *
yystpcpy (char *yydest, const char *yysrc)
#else
static char *
yystpcpy (yydest, yysrc)
    char *yydest;
    const char *yysrc;
#endif
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
	switch (*++yyp)
	  {
	  case '\'':
	  case ',':
	    goto do_not_strip_quotes;

	  case '\\':
	    if (*++yyp != '\\')
	      goto do_not_strip_quotes;
	    /* Fall through.  */
	  default:
	    if (yyres)
	      yyres[yyn] = *yyp;
	    yyn++;
	    break;

	  case '"':
	    if (yyres)
	      yyres[yyn] = '\0';
	    return yyn;
	  }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into YYRESULT an error message about the unexpected token
   YYCHAR while in state YYSTATE.  Return the number of bytes copied,
   including the terminating null byte.  If YYRESULT is null, do not
   copy anything; just return the number of bytes that would be
   copied.  As a special case, return 0 if an ordinary "syntax error"
   message will do.  Return YYSIZE_MAXIMUM if overflow occurs during
   size calculation.  */
static YYSIZE_T
yysyntax_error (char *yyresult, int yystate, int yychar)
{
  int yyn = yypact[yystate];

  if (! (YYPACT_NINF < yyn && yyn <= YYLAST))
    return 0;
  else
    {
      int yytype = YYTRANSLATE (yychar);
      YYSIZE_T yysize0 = yytnamerr (0, yytname[yytype]);
      YYSIZE_T yysize = yysize0;
      YYSIZE_T yysize1;
      int yysize_overflow = 0;
      enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
      char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
      int yyx;

# if 0
      /* This is so xgettext sees the translatable formats that are
	 constructed on the fly.  */
      YY_("syntax error, unexpected %s");
      YY_("syntax error, unexpected %s, expecting %s");
      YY_("syntax error, unexpected %s, expecting %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s");
# endif
      char *yyfmt;
      char const *yyf;
      static char const yyunexpected[] = "syntax error, unexpected %s";
      static char const yyexpecting[] = ", expecting %s";
      static char const yyor[] = " or %s";
      char yyformat[sizeof yyunexpected
		    + sizeof yyexpecting - 1
		    + ((YYERROR_VERBOSE_ARGS_MAXIMUM - 2)
		       * (sizeof yyor - 1))];
      char const *yyprefix = yyexpecting;

      /* Start YYX at -YYN if negative to avoid negative indexes in
	 YYCHECK.  */
      int yyxbegin = yyn < 0 ? -yyn : 0;

      /* Stay within bounds of both yycheck and yytname.  */
      int yychecklim = YYLAST - yyn + 1;
      int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
      int yycount = 1;

      yyarg[0] = yytname[yytype];
      yyfmt = yystpcpy (yyformat, yyunexpected);

      for (yyx = yyxbegin; yyx < yyxend; ++yyx)
	if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
	  {
	    if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
	      {
		yycount = 1;
		yysize = yysize0;
		yyformat[sizeof yyunexpected - 1] = '\0';
		break;
	      }
	    yyarg[yycount++] = yytname[yyx];
	    yysize1 = yysize + yytnamerr (0, yytname[yyx]);
	    yysize_overflow |= (yysize1 < yysize);
	    yysize = yysize1;
	    yyfmt = yystpcpy (yyfmt, yyprefix);
	    yyprefix = yyor;
	  }

      yyf = YY_(yyformat);
      yysize1 = yysize + yystrlen (yyf);
      yysize_overflow |= (yysize1 < yysize);
      yysize = yysize1;

      if (yysize_overflow)
	return YYSIZE_MAXIMUM;

      if (yyresult)
	{
	  /* Avoid sprintf, as that infringes on the user's name space.
	     Don't have undefined behavior even if the translation
	     produced a string with the wrong number of "%s"s.  */
	  char *yyp = yyresult;
	  int yyi = 0;
	  while ((*yyp = *yyf) != '\0')
	    {
	      if (*yyp == '%' && yyf[1] == 's' && yyi < yycount)
		{
		  yyp += yytnamerr (yyp, yyarg[yyi++]);
		  yyf += 2;
		}
	      else
		{
		  yyp++;
		  yyf++;
		}
	    }
	}
      return yysize;
    }
}
#endif /* YYERROR_VERBOSE */


/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep)
#else
static void
yydestruct (yymsg, yytype, yyvaluep)
    const char *yymsg;
    int yytype;
    YYSTYPE *yyvaluep;
#endif
{
  YYUSE (yyvaluep);

  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  switch (yytype)
    {

      default:
	break;
    }
}

/* Prevent warnings from -Wmissing-prototypes.  */
#ifdef YYPARSE_PARAM
#if defined __STDC__ || defined __cplusplus
int yyparse (void *YYPARSE_PARAM);
#else
int yyparse ();
#endif
#else /* ! YYPARSE_PARAM */
#if defined __STDC__ || defined __cplusplus
int yyparse (void);
#else
int yyparse ();
#endif
#endif /* ! YYPARSE_PARAM */





/*-------------------------.
| yyparse or yypush_parse.  |
`-------------------------*/

#ifdef YYPARSE_PARAM
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void *YYPARSE_PARAM)
#else
int
yyparse (YYPARSE_PARAM)
    void *YYPARSE_PARAM;
#endif
#else /* ! YYPARSE_PARAM */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void)
#else
int
yyparse ()

#endif
#endif
{
/* The lookahead symbol.  */
int yychar;

/* The semantic value of the lookahead symbol.  */
YYSTYPE yylval;

    /* Number of syntax errors so far.  */
    int yynerrs;

    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       `yyss': related to states.
       `yyvs': related to semantic values.

       Refer to the stacks thru separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    YYSIZE_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yytoken = 0;
  yyss = yyssa;
  yyvs = yyvsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */
  yyssp = yyss;
  yyvsp = yyvs;

  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack.  Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	yytype_int16 *yyss1 = yyss;

	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
	yyoverflow (YY_("memory exhausted"),
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yystacksize);

	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
	goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
	yystacksize = YYMAXDEPTH;

      {
	yytype_int16 *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyexhaustedlab;
	YYSTACK_RELOCATE (yyss_alloc, yyss);
	YYSTACK_RELOCATE (yyvs_alloc, yyvs);
#  undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yyn == YYPACT_NINF)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yyn == 0 || yyn == YYTABLE_NINF)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token.  */
  yychar = YYEMPTY;

  yystate = yyn;
  *++yyvsp = yylval;

  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];


  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 2:

/* Line 1455 of yacc.c  */
#line 1922 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            if (!thd->bootstrap &&
              (!(thd->lex->select_lex.options & OPTION_FOUND_COMMENT)))
            {
              my_message(ER_EMPTY_QUERY, ER(ER_EMPTY_QUERY), MYF(0));
              MYSQL_YYABORT;
            }
            thd->lex->sql_command= SQLCOM_EMPTY_QUERY;
            YYLIP->found_semicolon= NULL;
          }
    break;

  case 3:

/* Line 1455 of yacc.c  */
#line 1934 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex_input_stream *lip = YYLIP;

            if ((YYTHD->client_capabilities & CLIENT_MULTI_QUERIES) &&
                lip->multi_statements &&
                ! lip->eof())
            {
              /*
                We found a well formed query, and multi queries are allowed:
                - force the parser to stop after the ';'
                - mark the start of the next query for the next invocation
                  of the parser.
              */
              lip->next_state= MY_LEX_END;
              lip->found_semicolon= lip->get_ptr();
            }
            else
            {
              /* Single query, terminated. */
              lip->found_semicolon= NULL;
            }
          }
    break;

  case 5:

/* Line 1455 of yacc.c  */
#line 1959 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* Single query, not terminated. */
            YYLIP->found_semicolon= NULL;
          }
    break;

  case 65:

/* Line 1455 of yacc.c  */
#line 2036 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_DEALLOCATE_PREPARE;
            lex->prepared_stmt_name= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 68:

/* Line 1455 of yacc.c  */
#line 2051 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_PREPARE;
            lex->prepared_stmt_name= (yyvsp[(2) - (4)].lex_str);
          }
    break;

  case 69:

/* Line 1455 of yacc.c  */
#line 2061 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->prepared_stmt_code= (yyvsp[(1) - (1)].lex_str);
            lex->prepared_stmt_code_is_varref= FALSE;
          }
    break;

  case 70:

/* Line 1455 of yacc.c  */
#line 2068 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->prepared_stmt_code= (yyvsp[(2) - (2)].lex_str);
            lex->prepared_stmt_code_is_varref= TRUE;
          }
    break;

  case 71:

/* Line 1455 of yacc.c  */
#line 2078 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_EXECUTE;
            lex->prepared_stmt_name= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 72:

/* Line 1455 of yacc.c  */
#line 2085 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 77:

/* Line 1455 of yacc.c  */
#line 2100 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            LEX_STRING *lexstr= (LEX_STRING*)sql_memdup(&(yyvsp[(2) - (2)].lex_str), sizeof(LEX_STRING));
            if (!lexstr || lex->prepared_stmt_params.push_back(lexstr))
              MYSQL_YYABORT;
          }
    break;

  case 78:

/* Line 1455 of yacc.c  */
#line 2112 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HELP");
              MYSQL_YYABORT;
            }
          }
    break;

  case 79:

/* Line 1455 of yacc.c  */
#line 2120 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_HELP;
            lex->help_arg= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 80:

/* Line 1455 of yacc.c  */
#line 2131 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_CHANGE_MASTER;
          }
    break;

  case 81:

/* Line 1455 of yacc.c  */
#line 2135 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 84:

/* Line 1455 of yacc.c  */
#line 2145 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.host = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 85:

/* Line 1455 of yacc.c  */
#line 2149 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.user = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 86:

/* Line 1455 of yacc.c  */
#line 2153 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.password = (yyvsp[(3) - (3)].lex_str).str;
            Lex->contains_plaintext_password= true;
          }
    break;

  case 87:

/* Line 1455 of yacc.c  */
#line 2158 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.port = (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 88:

/* Line 1455 of yacc.c  */
#line 2162 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.connect_retry = (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 89:

/* Line 1455 of yacc.c  */
#line 2166 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.ssl= (yyvsp[(3) - (3)].ulong_num) ? 
              LEX_MASTER_INFO::LEX_MI_ENABLE : LEX_MASTER_INFO::LEX_MI_DISABLE;
          }
    break;

  case 90:

/* Line 1455 of yacc.c  */
#line 2171 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_ca= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 91:

/* Line 1455 of yacc.c  */
#line 2175 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_capath= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 92:

/* Line 1455 of yacc.c  */
#line 2179 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_cert= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 93:

/* Line 1455 of yacc.c  */
#line 2183 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_cipher= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 94:

/* Line 1455 of yacc.c  */
#line 2187 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_key= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 95:

/* Line 1455 of yacc.c  */
#line 2191 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_verify_server_cert= (yyvsp[(3) - (3)].ulong_num) ?
              LEX_MASTER_INFO::LEX_MI_ENABLE : LEX_MASTER_INFO::LEX_MI_DISABLE;
          }
    break;

  case 96:

/* Line 1455 of yacc.c  */
#line 2196 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_crl= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 97:

/* Line 1455 of yacc.c  */
#line 2200 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_crlpath= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 98:

/* Line 1455 of yacc.c  */
#line 2205 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.heartbeat_period= (float) (yyvsp[(3) - (3)].item_num)->val_real();
            if (Lex->mi.heartbeat_period > SLAVE_MAX_HEARTBEAT_PERIOD ||
                Lex->mi.heartbeat_period < 0.0)
            {
               const char format[]= "%d";
               char buf[4*sizeof(SLAVE_MAX_HEARTBEAT_PERIOD) + sizeof(format)];
               sprintf(buf, format, SLAVE_MAX_HEARTBEAT_PERIOD);
               my_error(ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE, MYF(0), buf);
               MYSQL_YYABORT;
            }
            if (Lex->mi.heartbeat_period > slave_net_timeout)
            {
              push_warning_printf(YYTHD, Sql_condition::WARN_LEVEL_WARN,
                                  ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MAX,
                                  ER(ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MAX));
            }
            if (Lex->mi.heartbeat_period < 0.001)
            {
              if (Lex->mi.heartbeat_period != 0.0)
              {
                push_warning_printf(YYTHD, Sql_condition::WARN_LEVEL_WARN,
                                    ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MIN,
                                    ER(ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MIN));
                Lex->mi.heartbeat_period= 0.0;
              }
              Lex->mi.heartbeat_opt=  LEX_MASTER_INFO::LEX_MI_DISABLE;
            }
            Lex->mi.heartbeat_opt=  LEX_MASTER_INFO::LEX_MI_ENABLE;
          }
    break;

  case 99:

/* Line 1455 of yacc.c  */
#line 2236 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.repl_ignore_server_ids_opt= LEX_MASTER_INFO::LEX_MI_ENABLE;
           }
    break;

  case 104:

/* Line 1455 of yacc.c  */
#line 2251 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            insert_dynamic(&Lex->mi.repl_ignore_server_ids, (uchar*) &((yyvsp[(1) - (1)].ulong_num)));
          }
    break;

  case 105:

/* Line 1455 of yacc.c  */
#line 2257 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.log_file_name = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 106:

/* Line 1455 of yacc.c  */
#line 2261 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.pos = (yyvsp[(3) - (3)].ulonglong_number);
            /* 
               If the user specified a value < BIN_LOG_HEADER_SIZE, adjust it
               instead of causing subsequent errors. 
               We need to do it in this file, because only there we know that 
               MASTER_LOG_POS has been explicitely specified. On the contrary
               in change_master() (sql_repl.cc) we cannot distinguish between 0
               (MASTER_LOG_POS explicitely specified as 0) and 0 (unspecified),
               whereas we want to distinguish (specified 0 means "read the binlog
               from 0" (4 in fact), unspecified means "don't change the position
               (keep the preceding value)").
            */
            Lex->mi.pos= MY_MAX(BIN_LOG_HEADER_SIZE, Lex->mi.pos);
          }
    break;

  case 107:

/* Line 1455 of yacc.c  */
#line 2277 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.relay_log_name = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 108:

/* Line 1455 of yacc.c  */
#line 2281 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.relay_log_pos = (yyvsp[(3) - (3)].ulong_num);
            /* Adjust if < BIN_LOG_HEADER_SIZE (same comment as Lex->mi.pos) */
            Lex->mi.relay_log_pos= MY_MAX(BIN_LOG_HEADER_SIZE, Lex->mi.relay_log_pos);
          }
    break;

  case 109:

/* Line 1455 of yacc.c  */
#line 2287 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->mi.use_gtid_opt != LEX_MASTER_INFO::LEX_GTID_UNCHANGED)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "MASTER_use_gtid");
              MYSQL_YYABORT;
            }
            Lex->mi.use_gtid_opt= LEX_MASTER_INFO::LEX_GTID_CURRENT_POS;
          }
    break;

  case 110:

/* Line 1455 of yacc.c  */
#line 2297 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->mi.use_gtid_opt != LEX_MASTER_INFO::LEX_GTID_UNCHANGED)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "MASTER_use_gtid");
              MYSQL_YYABORT;
            }
            Lex->mi.use_gtid_opt= LEX_MASTER_INFO::LEX_GTID_SLAVE_POS;
          }
    break;

  case 111:

/* Line 1455 of yacc.c  */
#line 2307 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->mi.use_gtid_opt != LEX_MASTER_INFO::LEX_GTID_UNCHANGED)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "MASTER_use_gtid");
              MYSQL_YYABORT;
            }
            Lex->mi.use_gtid_opt= LEX_MASTER_INFO::LEX_GTID_NO;
          }
    break;

  case 112:

/* Line 1455 of yacc.c  */
#line 2319 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->mi.connection_name= thd->variables.default_master_connection;
          }
    break;

  case 114:

/* Line 1455 of yacc.c  */
#line 2329 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
           Lex->mi.connection_name= (yyvsp[(1) - (1)].lex_str);
#ifdef HAVE_REPLICATION
           if (check_master_connection_name(&(yyvsp[(1) - (1)].lex_str)))
           {
              my_error(ER_WRONG_ARGUMENTS, MYF(0), "MASTER_CONNECTION_NAME");
              MYSQL_YYABORT;
           }
#endif
         }
    break;

  case 115:

/* Line 1455 of yacc.c  */
#line 2344 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_CREATE_TABLE;
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(5) - (5)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_WRITE, MDL_EXCLUSIVE))
              MYSQL_YYABORT;
            /*
              For CREATE TABLE, an non-existing table is not an error.
              Instruct open_tables() to just take an MDL lock if the
              table does not exist.
            */
            lex->query_tables->open_strategy= TABLE_LIST::OPEN_IF_EXISTS;
            lex->alter_info.reset();
            lex->col_list.empty();
            lex->change=NullS;
            bzero((char*) &lex->create_info,sizeof(lex->create_info));
            lex->create_info.options=(yyvsp[(2) - (5)].num) | (yyvsp[(4) - (5)].num);
            lex->create_info.default_table_charset= NULL;
            lex->name.str= 0;
            lex->name.length= 0;
            lex->create_last_non_select_table= lex->last_table();
          }
    break;

  case 116:

/* Line 1455 of yacc.c  */
#line 2369 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= YYTHD->lex;
            lex->current_select= &lex->select_lex; 
            if ((lex->create_info.used_fields & HA_CREATE_USED_ENGINE) &&
                !lex->create_info.db_type)
            {
              lex->create_info.db_type= ha_default_handlerton(YYTHD);
              push_warning_printf(YYTHD, Sql_condition::WARN_LEVEL_WARN,
                                  ER_WARN_USING_OTHER_HANDLER,
                                  ER(ER_WARN_USING_OTHER_HANDLER),
                                  hton_name(lex->create_info.db_type)->str,
                                  (yyvsp[(5) - (7)].table)->table.str);
            }
            create_table_set_open_action_and_adjust_tables(lex);
          }
    break;

  case 117:

/* Line 1455 of yacc.c  */
#line 2385 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_create_index_prepare(Lex, (yyvsp[(8) - (8)].table)))
              MYSQL_YYABORT;
          }
    break;

  case 118:

/* Line 1455 of yacc.c  */
#line 2390 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_create_index(Lex, (yyvsp[(2) - (13)].key_type), (yyvsp[(5) - (13)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 119:

/* Line 1455 of yacc.c  */
#line 2394 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { }
    break;

  case 120:

/* Line 1455 of yacc.c  */
#line 2397 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_create_index_prepare(Lex, (yyvsp[(8) - (8)].table)))
              MYSQL_YYABORT;
          }
    break;

  case 121:

/* Line 1455 of yacc.c  */
#line 2402 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_create_index(Lex, (yyvsp[(2) - (13)].key_type), (yyvsp[(5) - (13)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 122:

/* Line 1455 of yacc.c  */
#line 2406 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { }
    break;

  case 123:

/* Line 1455 of yacc.c  */
#line 2409 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_create_index_prepare(Lex, (yyvsp[(8) - (8)].table)))
              MYSQL_YYABORT;
          }
    break;

  case 124:

/* Line 1455 of yacc.c  */
#line 2414 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_create_index(Lex, (yyvsp[(2) - (13)].key_type), (yyvsp[(5) - (13)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 125:

/* Line 1455 of yacc.c  */
#line 2418 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { }
    break;

  case 126:

/* Line 1455 of yacc.c  */
#line 2420 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.default_table_charset= NULL;
            Lex->create_info.used_fields= 0;
          }
    break;

  case 127:

/* Line 1455 of yacc.c  */
#line 2425 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_CREATE_DB;
            lex->name= (yyvsp[(4) - (6)].lex_str);
            lex->create_info.options=(yyvsp[(3) - (6)].num);
          }
    break;

  case 128:

/* Line 1455 of yacc.c  */
#line 2432 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_view_mode= VIEW_CREATE_NEW;
            Lex->create_view_algorithm= DTYPE_ALGORITHM_UNDEFINED;
            Lex->create_view_suid= TRUE;
          }
    break;

  case 129:

/* Line 1455 of yacc.c  */
#line 2438 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 130:

/* Line 1455 of yacc.c  */
#line 2440 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_CREATE_USER;
          }
    break;

  case 131:

/* Line 1455 of yacc.c  */
#line 2444 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->alter_tablespace_info->ts_cmd_type= CREATE_LOGFILE_GROUP;
          }
    break;

  case 132:

/* Line 1455 of yacc.c  */
#line 2448 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->alter_tablespace_info->ts_cmd_type= CREATE_TABLESPACE;
          }
    break;

  case 133:

/* Line 1455 of yacc.c  */
#line 2452 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_CREATE_SERVER;
          }
    break;

  case 134:

/* Line 1455 of yacc.c  */
#line 2463 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->server_options.server_name= (yyvsp[(2) - (10)].lex_str).str;
            Lex->server_options.server_name_length= (yyvsp[(2) - (10)].lex_str).length;
            Lex->server_options.scheme= (yyvsp[(6) - (10)].lex_str).str;
          }
    break;

  case 137:

/* Line 1455 of yacc.c  */
#line 2477 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->server_options.username= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 138:

/* Line 1455 of yacc.c  */
#line 2481 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->server_options.host= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 139:

/* Line 1455 of yacc.c  */
#line 2485 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->server_options.db= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 140:

/* Line 1455 of yacc.c  */
#line 2489 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->server_options.owner= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 141:

/* Line 1455 of yacc.c  */
#line 2493 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->server_options.password= (yyvsp[(2) - (2)].lex_str).str;
            Lex->contains_plaintext_password= true;
          }
    break;

  case 142:

/* Line 1455 of yacc.c  */
#line 2498 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->server_options.socket= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 143:

/* Line 1455 of yacc.c  */
#line 2502 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->server_options.port= (yyvsp[(2) - (2)].ulong_num);
          }
    break;

  case 144:

/* Line 1455 of yacc.c  */
#line 2509 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex=Lex;

            lex->stmt_definition_begin= (yyvsp[(1) - (4)].simple_string);
            lex->create_info.options= (yyvsp[(3) - (4)].num);
            if (!(lex->event_parse_data= Event_parse_data::new_instance(thd)))
              MYSQL_YYABORT;
            lex->event_parse_data->identifier= (yyvsp[(4) - (4)].spname);
            lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_DROP;

            lex->sql_command= SQLCOM_CREATE_EVENT;
            /* We need that for disallowing subqueries */
          }
    break;

  case 145:

/* Line 1455 of yacc.c  */
#line 2529 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              sql_command is set here because some rules in ev_sql_stmt
              can overwrite it
            */
            Lex->sql_command= SQLCOM_CREATE_EVENT;
          }
    break;

  case 146:

/* Line 1455 of yacc.c  */
#line 2540 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_expression= (yyvsp[(2) - (3)].item);
            Lex->event_parse_data->interval= (yyvsp[(3) - (3)].interval);
          }
    break;

  case 148:

/* Line 1455 of yacc.c  */
#line 2547 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_execute_at= (yyvsp[(2) - (2)].item);
          }
    break;

  case 149:

/* Line 1455 of yacc.c  */
#line 2553 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 150:

/* Line 1455 of yacc.c  */
#line 2555 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::ENABLED;
            Lex->event_parse_data->status_changed= true;
            (yyval.num)= 1;
          }
    break;

  case 151:

/* Line 1455 of yacc.c  */
#line 2561 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::SLAVESIDE_DISABLED;
            Lex->event_parse_data->status_changed= true; 
            (yyval.num)= 1;
          }
    break;

  case 152:

/* Line 1455 of yacc.c  */
#line 2567 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::DISABLED;
            Lex->event_parse_data->status_changed= true;
            (yyval.num)= 1;
          }
    break;

  case 153:

/* Line 1455 of yacc.c  */
#line 2576 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_func_now_local(0);
            if (item == NULL)
              MYSQL_YYABORT;
            Lex->event_parse_data->item_starts= item;
          }
    break;

  case 154:

/* Line 1455 of yacc.c  */
#line 2583 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_starts= (yyvsp[(2) - (2)].item);
          }
    break;

  case 156:

/* Line 1455 of yacc.c  */
#line 2591 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_ends= (yyvsp[(2) - (2)].item);
          }
    break;

  case 157:

/* Line 1455 of yacc.c  */
#line 2597 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 159:

/* Line 1455 of yacc.c  */
#line 2603 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_PRESERVE;
            (yyval.num)= 1;
          }
    break;

  case 160:

/* Line 1455 of yacc.c  */
#line 2609 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_DROP;
            (yyval.num)= 1;
          }
    break;

  case 161:

/* Line 1455 of yacc.c  */
#line 2617 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 162:

/* Line 1455 of yacc.c  */
#line 2619 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->comment= Lex->event_parse_data->comment= (yyvsp[(2) - (2)].lex_str);
            (yyval.num)= 1;
          }
    break;

  case 163:

/* Line 1455 of yacc.c  */
#line 2626 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            /*
              This stops the following :
              - CREATE EVENT ... DO CREATE EVENT ...;
              - ALTER  EVENT ... DO CREATE EVENT ...;
              - CREATE EVENT ... DO ALTER EVENT DO ....;
              - CREATE PROCEDURE ... BEGIN CREATE EVENT ... END|
              This allows:
              - CREATE EVENT ... DO DROP EVENT yyy;
              - CREATE EVENT ... DO ALTER EVENT yyy;
                (the nested ALTER EVENT can have anything but DO clause)
              - ALTER  EVENT ... DO ALTER EVENT yyy;
                (the nested ALTER EVENT can have anything but DO clause)
              - ALTER  EVENT ... DO DROP EVENT yyy;
              - CREATE PROCEDURE ... BEGIN ALTER EVENT ... END|
                (the nested ALTER EVENT can have anything but DO clause)
              - CREATE PROCEDURE ... BEGIN DROP EVENT ... END|
            */
            if (lex->sphead)
            {
              my_error(ER_EVENT_RECURSION_FORBIDDEN, MYF(0));
              MYSQL_YYABORT;
            }
              
            if (!(lex->sphead= new sp_head()))
              MYSQL_YYABORT;

            lex->sphead->reset_thd_mem_root(thd);
            lex->sphead->init(lex);
            lex->sphead->init_sp_name(thd, lex->event_parse_data->identifier);

            lex->sphead->m_type= TYPE_ENUM_PROCEDURE;

            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
            lex->sphead->m_chistics= &lex->sp_chistics;

            lex->sphead->set_body_start(thd, lip->get_cpp_ptr());
          }
    break;

  case 164:

/* Line 1455 of yacc.c  */
#line 2669 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            /* return back to the original memory root ASAP */
            lex->sphead->set_stmt_end(thd);
            lex->sphead->restore_thd_mem_root(thd);

            lex->sp_chistics.suid= SP_IS_SUID;  //always the definer!

            lex->event_parse_data->body_changed= TRUE;
          }
    break;

  case 178:

/* Line 1455 of yacc.c  */
#line 2701 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
           LEX *lex=Lex;
           lex->users_list.empty();
           lex->columns.empty();
           lex->grant= lex->grant_tot_col= 0;
           lex->all_privileges= 0;
           lex->select_lex.db= 0;
           lex->ssl_type= SSL_TYPE_NOT_SPECIFIED;
           lex->ssl_cipher= lex->x509_subject= lex->x509_issuer= 0;
           bzero((char *)&(lex->mqh),sizeof(lex->mqh));
         }
    break;

  case 179:

/* Line 1455 of yacc.c  */
#line 2716 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!(yyvsp[(1) - (3)].lex_str).str || check_db_name(&(yyvsp[(1) - (3)].lex_str)))
            {
              my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[(1) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (check_routine_name(&(yyvsp[(3) - (3)].lex_str)))
            {
              MYSQL_YYABORT;
            }
            (yyval.spname)= new sp_name((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), true);
            if ((yyval.spname) == NULL)
              MYSQL_YYABORT;
            (yyval.spname)->init_qname(YYTHD);
          }
    break;

  case 180:

/* Line 1455 of yacc.c  */
#line 2732 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            LEX_STRING db;
            if (check_routine_name(&(yyvsp[(1) - (1)].lex_str)))
            {
              MYSQL_YYABORT;
            }
            if (lex->copy_db_to(&db.str, &db.length))
              MYSQL_YYABORT;
            (yyval.spname)= new sp_name(db, (yyvsp[(1) - (1)].lex_str), false);
            if ((yyval.spname) == NULL)
              MYSQL_YYABORT;
            (yyval.spname)->init_qname(thd);
          }
    break;

  case 181:

/* Line 1455 of yacc.c  */
#line 2750 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 182:

/* Line 1455 of yacc.c  */
#line 2751 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 183:

/* Line 1455 of yacc.c  */
#line 2755 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 184:

/* Line 1455 of yacc.c  */
#line 2756 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 185:

/* Line 1455 of yacc.c  */
#line 2762 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sp_chistics.comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 186:

/* Line 1455 of yacc.c  */
#line 2764 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* Just parse it, we only have one language for now. */ }
    break;

  case 187:

/* Line 1455 of yacc.c  */
#line 2766 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_NO_SQL; }
    break;

  case 188:

/* Line 1455 of yacc.c  */
#line 2768 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_CONTAINS_SQL; }
    break;

  case 189:

/* Line 1455 of yacc.c  */
#line 2770 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_READS_SQL_DATA; }
    break;

  case 190:

/* Line 1455 of yacc.c  */
#line 2772 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_MODIFIES_SQL_DATA; }
    break;

  case 191:

/* Line 1455 of yacc.c  */
#line 2774 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 192:

/* Line 1455 of yacc.c  */
#line 2779 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { }
    break;

  case 193:

/* Line 1455 of yacc.c  */
#line 2780 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sp_chistics.detistic= TRUE; }
    break;

  case 194:

/* Line 1455 of yacc.c  */
#line 2781 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sp_chistics.detistic= FALSE; }
    break;

  case 195:

/* Line 1455 of yacc.c  */
#line 2786 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sp_chistics.suid= SP_IS_SUID;
          }
    break;

  case 196:

/* Line 1455 of yacc.c  */
#line 2790 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sp_chistics.suid= SP_IS_NOT_SUID;
          }
    break;

  case 197:

/* Line 1455 of yacc.c  */
#line 2797 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex = Lex;

            lex->sql_command= SQLCOM_CALL;
            lex->spname= (yyvsp[(2) - (2)].spname);
            lex->value_list.empty();
            sp_add_used_routine(lex, YYTHD, (yyvsp[(2) - (2)].spname), TYPE_ENUM_PROCEDURE);
          }
    break;

  case 198:

/* Line 1455 of yacc.c  */
#line 2805 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 203:

/* Line 1455 of yacc.c  */
#line 2821 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
           Lex->value_list.push_back((yyvsp[(3) - (3)].item));
          }
    break;

  case 204:

/* Line 1455 of yacc.c  */
#line 2825 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->value_list.push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 209:

/* Line 1455 of yacc.c  */
#line 2843 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->length= 0;
            lex->dec= 0;
            lex->type= 0;

            lex->default_value= 0;
            lex->on_update_value= 0;

            lex->comment= null_lex_str;
            lex->charset= NULL;

            lex->interval_list.empty();
            lex->uint_geom_type= 0;
            lex->vcol_info= 0;
          }
    break;

  case 210:

/* Line 1455 of yacc.c  */
#line 2864 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable((yyvsp[(1) - (3)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_PARAM, MYF(0), (yyvsp[(1) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }

            sp_variable *spvar= spc->add_variable(YYTHD,
                                                  (yyvsp[(1) - (3)].lex_str),
                                                  (enum enum_field_types) (yyvsp[(3) - (3)].num),
                                                  sp_variable::MODE_IN);

            if (lex->sphead->fill_field_definition(YYTHD, lex,
                                                   (enum enum_field_types) (yyvsp[(3) - (3)].num),
                                                   &spvar->field_def))
            {
              MYSQL_YYABORT;
            }
            spvar->field_def.field_name= spvar->name.str;
            spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;
          }
    break;

  case 215:

/* Line 1455 of yacc.c  */
#line 2903 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable((yyvsp[(3) - (4)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_PARAM, MYF(0), (yyvsp[(3) - (4)].lex_str).str);
              MYSQL_YYABORT;
            }
            sp_variable *spvar= spc->add_variable(YYTHD,
                                                  (yyvsp[(3) - (4)].lex_str),
                                                  (enum enum_field_types) (yyvsp[(4) - (4)].num),
                                                  (sp_variable::enum_mode) (yyvsp[(1) - (4)].num));

            if (lex->sphead->fill_field_definition(YYTHD, lex,
                                                   (enum enum_field_types) (yyvsp[(4) - (4)].num),
                                                   &spvar->field_def))
            {
              MYSQL_YYABORT;
            }
            spvar->field_def.field_name= spvar->name.str;
            spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;
          }
    break;

  case 216:

/* Line 1455 of yacc.c  */
#line 2929 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= sp_variable::MODE_IN; }
    break;

  case 217:

/* Line 1455 of yacc.c  */
#line 2930 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= sp_variable::MODE_IN; }
    break;

  case 218:

/* Line 1455 of yacc.c  */
#line 2931 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= sp_variable::MODE_OUT; }
    break;

  case 219:

/* Line 1455 of yacc.c  */
#line 2932 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= sp_variable::MODE_INOUT; }
    break;

  case 220:

/* Line 1455 of yacc.c  */
#line 2936 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 222:

/* Line 1455 of yacc.c  */
#line 2941 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 224:

/* Line 1455 of yacc.c  */
#line 2947 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
          }
    break;

  case 225:

/* Line 1455 of yacc.c  */
#line 2951 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* We check for declarations out of (standard) order this way
              because letting the grammar rules reflect it caused tricky
               shift/reduce conflicts with the wrong result. (And we get
               better error handling this way.) */
            if (((yyvsp[(2) - (3)].spblock).vars || (yyvsp[(2) - (3)].spblock).conds) && ((yyvsp[(1) - (3)].spblock).curs || (yyvsp[(1) - (3)].spblock).hndlrs))
            { /* Variable or condition following cursor or handler */
              my_message(ER_SP_VARCOND_AFTER_CURSHNDLR,
                         ER(ER_SP_VARCOND_AFTER_CURSHNDLR), MYF(0));
              MYSQL_YYABORT;
            }
            if ((yyvsp[(2) - (3)].spblock).curs && (yyvsp[(1) - (3)].spblock).hndlrs)
            { /* Cursor following handler */
              my_message(ER_SP_CURSOR_AFTER_HANDLER,
                         ER(ER_SP_CURSOR_AFTER_HANDLER), MYF(0));
              MYSQL_YYABORT;
            }
            (yyval.spblock).vars= (yyvsp[(1) - (3)].spblock).vars + (yyvsp[(2) - (3)].spblock).vars;
            (yyval.spblock).conds= (yyvsp[(1) - (3)].spblock).conds + (yyvsp[(2) - (3)].spblock).conds;
            (yyval.spblock).hndlrs= (yyvsp[(1) - (3)].spblock).hndlrs + (yyvsp[(2) - (3)].spblock).hndlrs;
            (yyval.spblock).curs= (yyvsp[(1) - (3)].spblock).curs + (yyvsp[(2) - (3)].spblock).curs;
          }
    break;

  case 226:

/* Line 1455 of yacc.c  */
#line 2977 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sphead->reset_lex(YYTHD);
            lex->spcont->declare_var_boundary((yyvsp[(2) - (2)].num));
          }
    break;

  case 227:

/* Line 1455 of yacc.c  */
#line 2985 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_pcontext *pctx= lex->spcont;
            uint num_vars= pctx->context_var_count();
            enum enum_field_types var_type= (enum enum_field_types) (yyvsp[(4) - (5)].num);
            Item *dflt_value_item= (yyvsp[(5) - (5)].item);
            
            if (!dflt_value_item)
            {
              dflt_value_item= new (thd->mem_root) Item_null();
              if (dflt_value_item == NULL)
                MYSQL_YYABORT;
              /* QQ Set to the var_type with null_value? */
            }
            
            for (uint i = num_vars-(yyvsp[(2) - (5)].num) ; i < num_vars ; i++)
            {
              uint var_idx= pctx->var_context2runtime(i);
              sp_variable *spvar= pctx->find_variable(var_idx);
            
              if (!spvar)
                MYSQL_YYABORT;
            
              spvar->type= var_type;
              spvar->default_value= dflt_value_item;
            
              if (lex->sphead->fill_field_definition(YYTHD, lex, var_type,
                                                     &spvar->field_def))
              {
                MYSQL_YYABORT;
              }
            
              spvar->field_def.field_name= spvar->name.str;
              spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;
            
              /* The last instruction is responsible for freeing LEX. */

              sp_instr_set *is= new sp_instr_set(lex->sphead->instructions(),
                                                 pctx,
                                                 var_idx,
                                                 dflt_value_item,
                                                 var_type,
                                                 lex,
                                                 (i == num_vars - 1));
              if (is == NULL ||
                  lex->sphead->add_instr(is))
                MYSQL_YYABORT;
            }

            pctx->declare_var_boundary(0);
            if (lex->sphead->restore_lex(YYTHD))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyvsp[(2) - (5)].num);
            (yyval.spblock).conds= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
          }
    break;

  case 228:

/* Line 1455 of yacc.c  */
#line 3042 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_condition((yyvsp[(2) - (5)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_COND, MYF(0), (yyvsp[(2) - (5)].lex_str).str);
              MYSQL_YYABORT;
            }
            if(spc->add_condition(YYTHD, (yyvsp[(2) - (5)].lex_str), (yyvsp[(5) - (5)].spcondvalue)))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
            (yyval.spblock).conds= 1;
          }
    break;

  case 229:

/* Line 1455 of yacc.c  */
#line 3057 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            sp_handler *h= lex->spcont->add_handler(thd,
                                                    (sp_handler::enum_type) (yyvsp[(2) - (4)].num));

            lex->spcont= lex->spcont->push_context(thd,
                                                   sp_pcontext::HANDLER_SCOPE);

            sp_pcontext *ctx= lex->spcont;
            sp_instr_hpush_jump *i=
              new sp_instr_hpush_jump(sp->instructions(), ctx, h);

            if (i == NULL || sp->add_instr(i))
              MYSQL_YYABORT;

            /* For continue handlers, mark end of handler scope. */
            if ((yyvsp[(2) - (4)].num) == sp_handler::CONTINUE &&
                sp->push_backpatch(i, ctx->last_label()))
              MYSQL_YYABORT;

            if (sp->push_backpatch(i, ctx->push_label(thd, EMPTY_STR, 0)))
              MYSQL_YYABORT;
          }
    break;

  case 230:

/* Line 1455 of yacc.c  */
#line 3084 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_label *hlab= lex->spcont->pop_label(); /* After this hdlr */
            sp_instr_hreturn *i;

            if ((yyvsp[(2) - (7)].num) == sp_handler::CONTINUE)
            {
              i= new sp_instr_hreturn(sp->instructions(), ctx);
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
            else
            {  /* EXIT or UNDO handler, just jump to the end of the block */
              i= new sp_instr_hreturn(sp->instructions(), ctx);
              if (i == NULL ||
                  sp->add_instr(i) ||
                  sp->push_backpatch(i, lex->spcont->last_label())) /* Block end */
                MYSQL_YYABORT;
            }
            lex->sphead->backpatch(hlab);

            lex->spcont= ctx->pop_context();

            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).curs= 0;
            (yyval.spblock).hndlrs= 1;
          }
    break;

  case 231:

/* Line 1455 of yacc.c  */
#line 3114 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            uint offp;
            sp_instr_cpush *i;

            if (ctx->find_cursor((yyvsp[(2) - (5)].lex_str), &offp, TRUE))
            {
              my_error(ER_SP_DUP_CURS, MYF(0), (yyvsp[(2) - (5)].lex_str).str);
              delete (yyvsp[(5) - (5)].lex);
              MYSQL_YYABORT;
            }
            i= new sp_instr_cpush(sp->instructions(), ctx, (yyvsp[(5) - (5)].lex),
                                  ctx->current_cursor_count());
            if (i == NULL ||
                sp->add_instr(i) ||
                ctx->add_cursor((yyvsp[(2) - (5)].lex_str)))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).hndlrs= 0;
            (yyval.spblock).curs= 1;
          }
    break;

  case 232:

/* Line 1455 of yacc.c  */
#line 3139 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sphead->reset_lex(YYTHD);
          }
    break;

  case 233:

/* Line 1455 of yacc.c  */
#line 3143 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            DBUG_ASSERT(lex->sql_command == SQLCOM_SELECT);

            if (lex->result)
            {
              my_message(ER_SP_BAD_CURSOR_SELECT, ER(ER_SP_BAD_CURSOR_SELECT),
                         MYF(0));
              MYSQL_YYABORT;
            }
            lex->sp_lex_in_use= TRUE;
            (yyval.lex)= lex;
            if (lex->sphead->restore_lex(YYTHD))
              MYSQL_YYABORT;
          }
    break;

  case 234:

/* Line 1455 of yacc.c  */
#line 3162 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= sp_handler::EXIT; }
    break;

  case 235:

/* Line 1455 of yacc.c  */
#line 3163 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= sp_handler::CONTINUE; }
    break;

  case 236:

/* Line 1455 of yacc.c  */
#line 3169 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 237:

/* Line 1455 of yacc.c  */
#line 3171 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)+= 1; }
    break;

  case 238:

/* Line 1455 of yacc.c  */
#line 3176 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont->parent_context();

            if (ctx->check_duplicate_handler((yyvsp[(1) - (1)].spcondvalue)))
            {
              my_message(ER_SP_DUP_HANDLER, ER(ER_SP_DUP_HANDLER), MYF(0));
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_hpush_jump *i=
                (sp_instr_hpush_jump *)sp->last_instruction();

              i->add_condition((yyvsp[(1) - (1)].spcondvalue));
            }
          }
    break;

  case 239:

/* Line 1455 of yacc.c  */
#line 3198 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* mysql errno */
            if ((yyvsp[(1) - (1)].ulong_num) == 0)
            {
              my_error(ER_WRONG_VALUE, MYF(0), "CONDITION", "0");
              MYSQL_YYABORT;
            }
            (yyval.spcondvalue)= new (YYTHD->mem_root) sp_condition_value((yyvsp[(1) - (1)].ulong_num));
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 241:

/* Line 1455 of yacc.c  */
#line 3213 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* SQLSTATE */

            /*
              An error is triggered:
                - if the specified string is not a valid SQLSTATE,
                - or if it represents the completion condition -- it is not
                  allowed to SIGNAL, or declare a handler for the completion
                  condition.
            */
            if (!is_sqlstate_valid(&(yyvsp[(3) - (3)].lex_str)) || is_sqlstate_completion((yyvsp[(3) - (3)].lex_str).str))
            {
              my_error(ER_SP_BAD_SQLSTATE, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.spcondvalue)= new (YYTHD->mem_root) sp_condition_value((yyvsp[(3) - (3)].lex_str).str);
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 242:

/* Line 1455 of yacc.c  */
#line 3234 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 243:

/* Line 1455 of yacc.c  */
#line 3235 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 244:

/* Line 1455 of yacc.c  */
#line 3240 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.spcondvalue)= (yyvsp[(1) - (1)].spcondvalue);
          }
    break;

  case 245:

/* Line 1455 of yacc.c  */
#line 3244 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.spcondvalue)= Lex->spcont->find_condition((yyvsp[(1) - (1)].lex_str), false);
            if ((yyval.spcondvalue) == NULL)
            {
              my_error(ER_SP_COND_MISMATCH, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 246:

/* Line 1455 of yacc.c  */
#line 3253 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.spcondvalue)= new (YYTHD->mem_root) sp_condition_value(sp_condition_value::WARNING);
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 247:

/* Line 1455 of yacc.c  */
#line 3259 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.spcondvalue)= new (YYTHD->mem_root) sp_condition_value(sp_condition_value::NOT_FOUND);
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 248:

/* Line 1455 of yacc.c  */
#line 3265 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.spcondvalue)= (sp_condition_value *)YYTHD->alloc(sizeof(sp_condition_value));
            (yyval.spcondvalue)= new (YYTHD->mem_root) sp_condition_value(sp_condition_value::EXCEPTION);
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 249:

/* Line 1455 of yacc.c  */
#line 3275 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Yacc_state *state= & thd->m_parser_state->m_yacc;

            lex->sql_command= SQLCOM_SIGNAL;
            lex->m_sql_cmd=
              new (thd->mem_root) Sql_cmd_signal((yyvsp[(2) - (3)].spcondvalue), state->m_set_signal_info);
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 250:

/* Line 1455 of yacc.c  */
#line 3290 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_condition_value *cond;
            if (lex->spcont == NULL)
            {
              /* SIGNAL foo cannot be used outside of stored programs */
              my_error(ER_SP_COND_MISMATCH, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            cond= lex->spcont->find_condition((yyvsp[(1) - (1)].lex_str), false);
            if (cond == NULL)
            {
              my_error(ER_SP_COND_MISMATCH, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (cond->type != sp_condition_value::SQLSTATE)
            {
              my_error(ER_SIGNAL_BAD_CONDITION_TYPE, MYF(0));
              MYSQL_YYABORT;
            }
            (yyval.spcondvalue)= cond;
          }
    break;

  case 251:

/* Line 1455 of yacc.c  */
#line 3313 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.spcondvalue)= (yyvsp[(1) - (1)].spcondvalue); }
    break;

  case 252:

/* Line 1455 of yacc.c  */
#line 3318 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.spcondvalue)= NULL; }
    break;

  case 253:

/* Line 1455 of yacc.c  */
#line 3320 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.spcondvalue)= (yyvsp[(1) - (1)].spcondvalue); }
    break;

  case 254:

/* Line 1455 of yacc.c  */
#line 3325 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            YYTHD->m_parser_state->m_yacc.m_set_signal_info.clear();
          }
    break;

  case 256:

/* Line 1455 of yacc.c  */
#line 3333 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Set_signal_information *info;
            info= & YYTHD->m_parser_state->m_yacc.m_set_signal_info;
            int index= (int) (yyvsp[(1) - (3)].diag_condition_item_name);
            info->clear();
            info->m_item[index]= (yyvsp[(3) - (3)].item);
          }
    break;

  case 257:

/* Line 1455 of yacc.c  */
#line 3342 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Set_signal_information *info;
            info= & YYTHD->m_parser_state->m_yacc.m_set_signal_info;
            int index= (int) (yyvsp[(3) - (5)].diag_condition_item_name);
            if (info->m_item[index] != NULL)
            {
              my_error(ER_DUP_SIGNAL_SET, MYF(0),
                       Diag_condition_item_names[index].str);
              MYSQL_YYABORT;
            }
            info->m_item[index]= (yyvsp[(5) - (5)].item);
          }
    break;

  case 258:

/* Line 1455 of yacc.c  */
#line 3361 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 259:

/* Line 1455 of yacc.c  */
#line 3363 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if ((yyvsp[(1) - (1)].item)->type() == Item::FUNC_ITEM)
            {
              Item_func *item= (Item_func*) (yyvsp[(1) - (1)].item);
              if (item->functype() == Item_func::SUSERVAR_FUNC)
              {
                /*
                  Don't allow the following syntax:
                    SIGNAL/RESIGNAL ...
                    SET <signal condition item name> = @foo := expr
                */
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
            }
            (yyval.item)= (yyvsp[(1) - (1)].item);
          }
    break;

  case 260:

/* Line 1455 of yacc.c  */
#line 3381 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 261:

/* Line 1455 of yacc.c  */
#line 3387 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CLASS_ORIGIN; }
    break;

  case 262:

/* Line 1455 of yacc.c  */
#line 3389 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_SUBCLASS_ORIGIN; }
    break;

  case 263:

/* Line 1455 of yacc.c  */
#line 3391 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CONSTRAINT_CATALOG; }
    break;

  case 264:

/* Line 1455 of yacc.c  */
#line 3393 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CONSTRAINT_SCHEMA; }
    break;

  case 265:

/* Line 1455 of yacc.c  */
#line 3395 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CONSTRAINT_NAME; }
    break;

  case 266:

/* Line 1455 of yacc.c  */
#line 3397 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CATALOG_NAME; }
    break;

  case 267:

/* Line 1455 of yacc.c  */
#line 3399 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_SCHEMA_NAME; }
    break;

  case 268:

/* Line 1455 of yacc.c  */
#line 3401 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_TABLE_NAME; }
    break;

  case 269:

/* Line 1455 of yacc.c  */
#line 3403 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_COLUMN_NAME; }
    break;

  case 270:

/* Line 1455 of yacc.c  */
#line 3405 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CURSOR_NAME; }
    break;

  case 271:

/* Line 1455 of yacc.c  */
#line 3407 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_MESSAGE_TEXT; }
    break;

  case 272:

/* Line 1455 of yacc.c  */
#line 3409 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_MYSQL_ERRNO; }
    break;

  case 273:

/* Line 1455 of yacc.c  */
#line 3414 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Yacc_state *state= & thd->m_parser_state->m_yacc;

            lex->sql_command= SQLCOM_RESIGNAL;
            lex->m_sql_cmd=
              new (thd->mem_root) Sql_cmd_resignal((yyvsp[(2) - (3)].spcondvalue),
                                                   state->m_set_signal_info);
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 274:

/* Line 1455 of yacc.c  */
#line 3430 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Diagnostics_information *info= (yyvsp[(4) - (4)].diag_info);

            info->set_which_da((yyvsp[(2) - (4)].diag_area));

            Lex->sql_command= SQLCOM_GET_DIAGNOSTICS;
            Lex->m_sql_cmd= new (YYTHD->mem_root) Sql_cmd_get_diagnostics(info);

            if (Lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 275:

/* Line 1455 of yacc.c  */
#line 3445 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.diag_area)= Diagnostics_information::CURRENT_AREA; }
    break;

  case 276:

/* Line 1455 of yacc.c  */
#line 3447 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.diag_area)= Diagnostics_information::CURRENT_AREA; }
    break;

  case 277:

/* Line 1455 of yacc.c  */
#line 3452 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.diag_info)= new (YYTHD->mem_root) Statement_information((yyvsp[(1) - (1)].stmt_info_list));
            if ((yyval.diag_info) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 278:

/* Line 1455 of yacc.c  */
#line 3458 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.diag_info)= new (YYTHD->mem_root) Condition_information((yyvsp[(2) - (3)].item), (yyvsp[(3) - (3)].cond_info_list));
            if ((yyval.diag_info) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 279:

/* Line 1455 of yacc.c  */
#line 3467 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.stmt_info_list)= new (YYTHD->mem_root) List<Statement_information_item>;
            if ((yyval.stmt_info_list) == NULL || (yyval.stmt_info_list)->push_back((yyvsp[(1) - (1)].stmt_info_item)))
              MYSQL_YYABORT;
          }
    break;

  case 280:

/* Line 1455 of yacc.c  */
#line 3473 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if ((yyvsp[(1) - (3)].stmt_info_list)->push_back((yyvsp[(3) - (3)].stmt_info_item)))
              MYSQL_YYABORT;
            (yyval.stmt_info_list)= (yyvsp[(1) - (3)].stmt_info_list);
          }
    break;

  case 281:

/* Line 1455 of yacc.c  */
#line 3482 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.stmt_info_item)= new (YYTHD->mem_root) Statement_information_item((yyvsp[(3) - (3)].stmt_info_item_name), (yyvsp[(1) - (3)].item));
            if ((yyval.stmt_info_item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 282:

/* Line 1455 of yacc.c  */
#line 3490 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex_input_stream *lip= &YYTHD->m_parser_state->m_lip;
            (yyval.item)= create_item_for_sp_var(YYTHD, (yyvsp[(1) - (1)].lex_str), NULL,
                                       lip->get_tok_start(), lip->get_ptr());

            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 283:

/* Line 1455 of yacc.c  */
#line 3499 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_get_user_var((yyvsp[(2) - (2)].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 284:

/* Line 1455 of yacc.c  */
#line 3508 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.stmt_info_item_name)= Statement_information_item::NUMBER; }
    break;

  case 285:

/* Line 1455 of yacc.c  */
#line 3510 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.stmt_info_item_name)= Statement_information_item::ROW_COUNT; }
    break;

  case 286:

/* Line 1455 of yacc.c  */
#line 3519 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 287:

/* Line 1455 of yacc.c  */
#line 3524 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.cond_info_list)= new (YYTHD->mem_root) List<Condition_information_item>;
            if ((yyval.cond_info_list) == NULL || (yyval.cond_info_list)->push_back((yyvsp[(1) - (1)].cond_info_item)))
              MYSQL_YYABORT;
          }
    break;

  case 288:

/* Line 1455 of yacc.c  */
#line 3530 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if ((yyvsp[(1) - (3)].cond_info_list)->push_back((yyvsp[(3) - (3)].cond_info_item)))
              MYSQL_YYABORT;
            (yyval.cond_info_list)= (yyvsp[(1) - (3)].cond_info_list);
          }
    break;

  case 289:

/* Line 1455 of yacc.c  */
#line 3539 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.cond_info_item)= new (YYTHD->mem_root) Condition_information_item((yyvsp[(3) - (3)].cond_info_item_name), (yyvsp[(1) - (3)].item));
            if ((yyval.cond_info_item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 290:

/* Line 1455 of yacc.c  */
#line 3547 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::CLASS_ORIGIN; }
    break;

  case 291:

/* Line 1455 of yacc.c  */
#line 3549 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::SUBCLASS_ORIGIN; }
    break;

  case 292:

/* Line 1455 of yacc.c  */
#line 3551 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::CONSTRAINT_CATALOG; }
    break;

  case 293:

/* Line 1455 of yacc.c  */
#line 3553 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::CONSTRAINT_SCHEMA; }
    break;

  case 294:

/* Line 1455 of yacc.c  */
#line 3555 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::CONSTRAINT_NAME; }
    break;

  case 295:

/* Line 1455 of yacc.c  */
#line 3557 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::CATALOG_NAME; }
    break;

  case 296:

/* Line 1455 of yacc.c  */
#line 3559 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::SCHEMA_NAME; }
    break;

  case 297:

/* Line 1455 of yacc.c  */
#line 3561 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::TABLE_NAME; }
    break;

  case 298:

/* Line 1455 of yacc.c  */
#line 3563 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::COLUMN_NAME; }
    break;

  case 299:

/* Line 1455 of yacc.c  */
#line 3565 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::CURSOR_NAME; }
    break;

  case 300:

/* Line 1455 of yacc.c  */
#line 3567 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::MESSAGE_TEXT; }
    break;

  case 301:

/* Line 1455 of yacc.c  */
#line 3569 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::MYSQL_ERRNO; }
    break;

  case 302:

/* Line 1455 of yacc.c  */
#line 3571 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::RETURNED_SQLSTATE; }
    break;

  case 303:

/* Line 1455 of yacc.c  */
#line 3576 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* NOTE: field definition is filled in sp_decl section. */

            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable((yyvsp[(1) - (1)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            spc->add_variable(YYTHD,
                              (yyvsp[(1) - (1)].lex_str),
                              MYSQL_TYPE_DECIMAL,
                              sp_variable::MODE_IN);
            (yyval.num)= 1;
          }
    break;

  case 304:

/* Line 1455 of yacc.c  */
#line 3594 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* NOTE: field definition is filled in sp_decl section. */

            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable((yyvsp[(3) - (3)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_VAR, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            spc->add_variable(YYTHD,
                              (yyvsp[(3) - (3)].lex_str),
                              MYSQL_TYPE_DECIMAL,
                              sp_variable::MODE_IN);
            (yyval.num)= (yyvsp[(1) - (3)].num) + 1;
          }
    break;

  case 305:

/* Line 1455 of yacc.c  */
#line 3614 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item) = NULL; }
    break;

  case 306:

/* Line 1455 of yacc.c  */
#line 3615 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item); }
    break;

  case 320:

/* Line 1455 of yacc.c  */
#line 3636 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sphead->new_cont_backpatch(NULL); }
    break;

  case 321:

/* Line 1455 of yacc.c  */
#line 3638 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sphead->do_cont_backpatch(); }
    break;

  case 322:

/* Line 1455 of yacc.c  */
#line 3642 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            lex->sphead->reset_lex(thd);
            lex->sphead->m_tmp_query= lip->get_tok_start();
          }
    break;

  case 323:

/* Line 1455 of yacc.c  */
#line 3651 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_head *sp= lex->sphead;

            sp->m_flags|= sp_get_flags_for_command(lex);
            if (lex->sql_command == SQLCOM_CHANGE_DB)
            { /* "USE db" doesn't work in a procedure */
              my_error(ER_SP_BADSTATEMENT, MYF(0), "USE");
              MYSQL_YYABORT;
            }
            /*
              Don't add an instruction for SET statements, since all
              instructions for them were already added during processing
              of "set" rule.
            */
            DBUG_ASSERT(lex->sql_command != SQLCOM_SET_OPTION ||
                        lex->var_list.is_empty());
            if (lex->sql_command != SQLCOM_SET_OPTION)
            {
              sp_instr_stmt *i=new sp_instr_stmt(sp->instructions(),
                                                 lex->spcont, lex);
              if (i == NULL)
                MYSQL_YYABORT;

              /*
                Extract the query statement from the tokenizer.  The
                end is either lex->ptr, if there was no lookahead,
                lex->tok_end otherwise.
              */
              if (yychar == YYEMPTY)
                i->m_query.length= lip->get_ptr() - sp->m_tmp_query;
              else
                i->m_query.length= lip->get_tok_end() - sp->m_tmp_query;
              if (!(i->m_query.str= strmake_root(thd->mem_root,
                                                 sp->m_tmp_query,
                                                 i->m_query.length)) ||
                    sp->add_instr(i))
                MYSQL_YYABORT;
            }
            if (sp->restore_lex(thd))
              MYSQL_YYABORT;
          }
    break;

  case 324:

/* Line 1455 of yacc.c  */
#line 3699 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sphead->reset_lex(YYTHD); }
    break;

  case 325:

/* Line 1455 of yacc.c  */
#line 3701 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            if (sp->m_type != TYPE_ENUM_FUNCTION)
            {
              my_message(ER_SP_BADRETURN, ER(ER_SP_BADRETURN), MYF(0));
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_freturn *i;

              i= new sp_instr_freturn(sp->instructions(), lex->spcont, (yyvsp[(3) - (3)].item),
                                      sp->m_return_field_def.sql_type, lex);
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
              sp->m_flags|= sp_head::HAS_RETURN;
            }
            if (sp->restore_lex(YYTHD))
              MYSQL_YYABORT;
          }
    break;

  case 326:

/* Line 1455 of yacc.c  */
#line 3727 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* Unlabeled controls get a secret label. */
            LEX *lex= Lex;

            lex->spcont->push_label(YYTHD,
                                    EMPTY_STR,
                                    lex->sphead->instructions());
          }
    break;

  case 327:

/* Line 1455 of yacc.c  */
#line 3735 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sphead->backpatch(lex->spcont->pop_label());
          }
    break;

  case 328:

/* Line 1455 of yacc.c  */
#line 3744 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp = lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_label *lab= ctx->find_label((yyvsp[(2) - (2)].lex_str));

            if (! lab)
            {
              my_error(ER_SP_LILABEL_MISMATCH, MYF(0), "LEAVE", (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_jump *i;
              uint ip= sp->instructions();
              uint n;
              /*
                When jumping to a BEGIN-END block end, the target jump
                points to the block hpop/cpop cleanup instructions,
                so we should exclude the block context here.
                When jumping to something else (i.e., SP_LAB_ITER),
                there are no hpop/cpop at the jump destination,
                so we should include the block context here for cleanup.
              */
              bool exclusive= (lab->type == sp_label::BEGIN);

              n= ctx->diff_handlers(lab->ctx, exclusive);
              if (n)
              {
                sp_instr_hpop *hpop= new sp_instr_hpop(ip++, ctx, n);
                if (hpop == NULL)
                  MYSQL_YYABORT;
                sp->add_instr(hpop);
              }
              n= ctx->diff_cursors(lab->ctx, exclusive);
              if (n)
              {
                sp_instr_cpop *cpop= new sp_instr_cpop(ip++, ctx, n);
                if (cpop == NULL)
                  MYSQL_YYABORT;
                sp->add_instr(cpop);
              }
              i= new sp_instr_jump(ip, ctx);
              if (i == NULL)
                MYSQL_YYABORT;
              sp->push_backpatch(i, lab);  /* Jumping forward */
              sp->add_instr(i);
            }
          }
    break;

  case 329:

/* Line 1455 of yacc.c  */
#line 3797 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_label *lab= ctx->find_label((yyvsp[(2) - (2)].lex_str));

            if (! lab || lab->type != sp_label::ITERATION)
            {
              my_error(ER_SP_LILABEL_MISMATCH, MYF(0), "ITERATE", (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_jump *i;
              uint ip= sp->instructions();
              uint n;

              n= ctx->diff_handlers(lab->ctx, FALSE);  /* Inclusive the dest. */
              if (n)
              {
                sp_instr_hpop *hpop= new sp_instr_hpop(ip++, ctx, n);
                if (hpop == NULL ||
                    sp->add_instr(hpop))
                  MYSQL_YYABORT;
              }
              n= ctx->diff_cursors(lab->ctx, FALSE);  /* Inclusive the dest. */
              if (n)
              {
                sp_instr_cpop *cpop= new sp_instr_cpop(ip++, ctx, n);
                if (cpop == NULL ||
                    sp->add_instr(cpop))
                  MYSQL_YYABORT;
              }
              i= new sp_instr_jump(ip, ctx, lab->ip); /* Jump back */
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
          }
    break;

  case 330:

/* Line 1455 of yacc.c  */
#line 3840 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint offset;
            sp_instr_copen *i;

            if (! lex->spcont->find_cursor((yyvsp[(2) - (2)].lex_str), &offset, false))
            {
              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            i= new sp_instr_copen(sp->instructions(), lex->spcont, offset);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 331:

/* Line 1455 of yacc.c  */
#line 3860 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint offset;
            sp_instr_cfetch *i;

            if (! lex->spcont->find_cursor((yyvsp[(3) - (4)].lex_str), &offset, false))
            {
              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(3) - (4)].lex_str).str);
              MYSQL_YYABORT;
            }
            i= new sp_instr_cfetch(sp->instructions(), lex->spcont, offset);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 332:

/* Line 1455 of yacc.c  */
#line 3877 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 333:

/* Line 1455 of yacc.c  */
#line 3882 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint offset;
            sp_instr_cclose *i;

            if (! lex->spcont->find_cursor((yyvsp[(2) - (2)].lex_str), &offset, false))
            {
              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            i= new sp_instr_cclose(sp->instructions(), lex->spcont,  offset);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 337:

/* Line 1455 of yacc.c  */
#line 3908 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *spc= lex->spcont;
            sp_variable *spv;

            if (!spc || !(spv = spc->find_variable((yyvsp[(1) - (1)].lex_str), false)))
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              /* An SP local variable */
              sp_instr_cfetch *i= (sp_instr_cfetch *)sp->last_instruction();

              i->add_to_varlist(spv);
            }
          }
    break;

  case 338:

/* Line 1455 of yacc.c  */
#line 3928 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *spc= lex->spcont;
            sp_variable *spv;

            if (!spc || !(spv = spc->find_variable((yyvsp[(3) - (3)].lex_str), false)))
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              /* An SP local variable */
              sp_instr_cfetch *i= (sp_instr_cfetch *)sp->last_instruction();

              i->add_to_varlist(spv);
            }
          }
    break;

  case 339:

/* Line 1455 of yacc.c  */
#line 3950 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sphead->reset_lex(YYTHD); }
    break;

  case 340:

/* Line 1455 of yacc.c  */
#line 3952 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            uint ip= sp->instructions();
            sp_instr_jump_if_not *i = new sp_instr_jump_if_not(ip, ctx,
                                                               (yyvsp[(2) - (3)].item), lex);
            if (i == NULL ||
                sp->push_backpatch(i, ctx->push_label(YYTHD, EMPTY_STR, 0)) ||
                sp->add_cont_backpatch(i) ||
                sp->add_instr(i))
              MYSQL_YYABORT;
            if (sp->restore_lex(YYTHD))
              MYSQL_YYABORT;
          }
    break;

  case 341:

/* Line 1455 of yacc.c  */
#line 3968 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            sp_head *sp= Lex->sphead;
            sp_pcontext *ctx= Lex->spcont;
            uint ip= sp->instructions();
            sp_instr_jump *i = new sp_instr_jump(ip, ctx);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
            sp->backpatch(ctx->pop_label());
            sp->push_backpatch(i, ctx->push_label(YYTHD, EMPTY_STR, 0));
          }
    break;

  case 342:

/* Line 1455 of yacc.c  */
#line 3980 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sphead->backpatch(lex->spcont->pop_label());
          }
    break;

  case 348:

/* Line 1455 of yacc.c  */
#line 4000 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            case_stmt_action_case(lex);
            lex->sphead->reset_lex(YYTHD); /* For expr $3 */
          }
    break;

  case 349:

/* Line 1455 of yacc.c  */
#line 4006 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (case_stmt_action_expr(lex, (yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;

            /* For expr $3 */
            if (lex->sphead->restore_lex(YYTHD))
              MYSQL_YYABORT;
          }
    break;

  case 350:

/* Line 1455 of yacc.c  */
#line 4019 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            case_stmt_action_end_case(lex, true);
          }
    break;

  case 351:

/* Line 1455 of yacc.c  */
#line 4027 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            case_stmt_action_case(lex);
          }
    break;

  case 352:

/* Line 1455 of yacc.c  */
#line 4035 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            case_stmt_action_end_case(lex, false);
          }
    break;

  case 357:

/* Line 1455 of yacc.c  */
#line 4053 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sphead->reset_lex(YYTHD); /* For expr $3 */
          }
    break;

  case 358:

/* Line 1455 of yacc.c  */
#line 4057 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* Simple case: <caseval> = <whenval> */

            LEX *lex= Lex;
            if (case_stmt_action_when(lex, (yyvsp[(3) - (3)].item), true))
              MYSQL_YYABORT;
            /* For expr $3 */
            if (lex->sphead->restore_lex(YYTHD))
              MYSQL_YYABORT;
          }
    break;

  case 359:

/* Line 1455 of yacc.c  */
#line 4069 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (case_stmt_action_then(lex))
              MYSQL_YYABORT;
          }
    break;

  case 360:

/* Line 1455 of yacc.c  */
#line 4078 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sphead->reset_lex(YYTHD); /* For expr $3 */
          }
    break;

  case 361:

/* Line 1455 of yacc.c  */
#line 4082 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (case_stmt_action_when(lex, (yyvsp[(3) - (3)].item), false))
              MYSQL_YYABORT;
            /* For expr $3 */
            if (lex->sphead->restore_lex(YYTHD))
              MYSQL_YYABORT;
          }
    break;

  case 362:

/* Line 1455 of yacc.c  */
#line 4092 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (case_stmt_action_then(lex))
              MYSQL_YYABORT;
          }
    break;

  case 363:

/* Line 1455 of yacc.c  */
#line 4101 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint ip= sp->instructions();
            sp_instr_error *i= new sp_instr_error(ip, lex->spcont,
                                                  ER_SP_CASE_NOT_FOUND);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 365:

/* Line 1455 of yacc.c  */
#line 4116 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *ctx= lex->spcont;
            sp_label *lab= ctx->find_label((yyvsp[(1) - (2)].lex_str));

            if (lab)
            {
              my_error(ER_SP_LABEL_REDEFINE, MYF(0), (yyvsp[(1) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              lab= lex->spcont->push_label(YYTHD, (yyvsp[(1) - (2)].lex_str), lex->sphead->instructions());
              lab->type= sp_label::ITERATION;
            }
          }
    break;

  case 366:

/* Line 1455 of yacc.c  */
#line 4133 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_label *lab= lex->spcont->pop_label();

            if ((yyvsp[(5) - (5)].lex_str).str)
            {
              if (my_strcasecmp(system_charset_info, (yyvsp[(5) - (5)].lex_str).str, lab->name.str) != 0)
              {
                my_error(ER_SP_LABEL_MISMATCH, MYF(0), (yyvsp[(5) - (5)].lex_str).str);
                MYSQL_YYABORT;
              }
            }
            lex->sphead->backpatch(lab);
          }
    break;

  case 367:

/* Line 1455 of yacc.c  */
#line 4150 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 368:

/* Line 1455 of yacc.c  */
#line 4151 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 369:

/* Line 1455 of yacc.c  */
#line 4156 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *ctx= lex->spcont;
            sp_label *lab= ctx->find_label((yyvsp[(1) - (2)].lex_str));

            if (lab)
            {
              my_error(ER_SP_LABEL_REDEFINE, MYF(0), (yyvsp[(1) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }

            lab= lex->spcont->push_label(YYTHD, (yyvsp[(1) - (2)].lex_str), lex->sphead->instructions());
            lab->type= sp_label::BEGIN;
          }
    break;

  case 370:

/* Line 1455 of yacc.c  */
#line 4171 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_label *lab= lex->spcont->pop_label();

            if ((yyvsp[(5) - (5)].lex_str).str)
            {
              if (my_strcasecmp(system_charset_info, (yyvsp[(5) - (5)].lex_str).str, lab->name.str) != 0)
              {
                my_error(ER_SP_LABEL_MISMATCH, MYF(0), (yyvsp[(5) - (5)].lex_str).str);
                MYSQL_YYABORT;
              }
            }
          }
    break;

  case 371:

/* Line 1455 of yacc.c  */
#line 4187 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* Unlabeled blocks get a secret label. */
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label *lab= lex->spcont->push_label(YYTHD, EMPTY_STR, ip);
            lab->type= sp_label::BEGIN;
          }
    break;

  case 372:

/* Line 1455 of yacc.c  */
#line 4194 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->spcont->pop_label();
          }
    break;

  case 373:

/* Line 1455 of yacc.c  */
#line 4202 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* QQ This is just a dummy for grouping declarations and statements
              together. No [[NOT] ATOMIC] yet, and we need to figure out how
              make it coexist with the existing BEGIN COMMIT/ROLLBACK. */
            LEX *lex= Lex;
            lex->spcont= lex->spcont->push_context(YYTHD,
                                                   sp_pcontext::REGULAR_SCOPE);
          }
    break;

  case 374:

/* Line 1455 of yacc.c  */
#line 4212 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_instr *i;

            sp->backpatch(ctx->last_label()); /* We always have a label */
            if ((yyvsp[(3) - (5)].spblock).hndlrs)
            {
              i= new sp_instr_hpop(sp->instructions(), ctx, (yyvsp[(3) - (5)].spblock).hndlrs);
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
            if ((yyvsp[(3) - (5)].spblock).curs)
            {
              i= new sp_instr_cpop(sp->instructions(), ctx, (yyvsp[(3) - (5)].spblock).curs);
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
            lex->spcont= ctx->pop_context();
          }
    break;

  case 375:

/* Line 1455 of yacc.c  */
#line 4240 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label *lab= lex->spcont->last_label();  /* Jumping back */
            sp_instr_jump *i = new sp_instr_jump(ip, lex->spcont, lab->ip);
            if (i == NULL ||
                lex->sphead->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 376:

/* Line 1455 of yacc.c  */
#line 4250 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sphead->reset_lex(YYTHD); }
    break;

  case 377:

/* Line 1455 of yacc.c  */
#line 4252 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint ip= sp->instructions();
            sp_instr_jump_if_not *i = new sp_instr_jump_if_not(ip, lex->spcont,
                                                               (yyvsp[(3) - (4)].item), lex);
            if (i == NULL ||
                /* Jumping forward */
                sp->push_backpatch(i, lex->spcont->last_label()) ||
                sp->new_cont_backpatch(i) ||
                sp->add_instr(i))
              MYSQL_YYABORT;
            if (sp->restore_lex(YYTHD))
              MYSQL_YYABORT;
          }
    break;

  case 378:

/* Line 1455 of yacc.c  */
#line 4268 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label *lab= lex->spcont->last_label();  /* Jumping back */
            sp_instr_jump *i = new sp_instr_jump(ip, lex->spcont, lab->ip);
            if (i == NULL ||
                lex->sphead->add_instr(i))
              MYSQL_YYABORT;
            lex->sphead->do_cont_backpatch();
          }
    break;

  case 379:

/* Line 1455 of yacc.c  */
#line 4279 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sphead->reset_lex(YYTHD); }
    break;

  case 380:

/* Line 1455 of yacc.c  */
#line 4281 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label *lab= lex->spcont->last_label();  /* Jumping back */
            sp_instr_jump_if_not *i = new sp_instr_jump_if_not(ip, lex->spcont,
                                                               (yyvsp[(5) - (7)].item), lab->ip,
                                                               lex);
            if (i == NULL ||
                lex->sphead->add_instr(i))
              MYSQL_YYABORT;
            if (lex->sphead->restore_lex(YYTHD))
              MYSQL_YYABORT;
            /* We can shortcut the cont_backpatch here */
            i->m_cont_dest= ip+1;
          }
    break;

  case 381:

/* Line 1455 of yacc.c  */
#line 4300 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->trg_chistics.action_time= TRG_ACTION_BEFORE; }
    break;

  case 382:

/* Line 1455 of yacc.c  */
#line 4302 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->trg_chistics.action_time= TRG_ACTION_AFTER; }
    break;

  case 383:

/* Line 1455 of yacc.c  */
#line 4307 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->trg_chistics.event= TRG_EVENT_INSERT; }
    break;

  case 384:

/* Line 1455 of yacc.c  */
#line 4309 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->trg_chistics.event= TRG_EVENT_UPDATE; }
    break;

  case 385:

/* Line 1455 of yacc.c  */
#line 4311 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->trg_chistics.event= TRG_EVENT_DELETE; }
    break;

  case 389:

/* Line 1455 of yacc.c  */
#line 4345 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 390:

/* Line 1455 of yacc.c  */
#line 4347 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->logfile_group_name= (yyvsp[(4) - (4)].lex_str).str;
          }
    break;

  case 391:

/* Line 1455 of yacc.c  */
#line 4357 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            Lex->alter_tablespace_info->ts_alter_tablespace_type= ALTER_TABLESPACE_ADD_FILE; 
          }
    break;

  case 392:

/* Line 1455 of yacc.c  */
#line 4363 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            Lex->alter_tablespace_info->ts_alter_tablespace_type= ALTER_TABLESPACE_DROP_FILE; 
          }
    break;

  case 397:

/* Line 1455 of yacc.c  */
#line 4386 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 444:

/* Line 1455 of yacc.c  */
#line 4480 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->data_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 445:

/* Line 1455 of yacc.c  */
#line 4488 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->undo_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 446:

/* Line 1455 of yacc.c  */
#line 4496 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->redo_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 447:

/* Line 1455 of yacc.c  */
#line 4504 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info= new st_alter_tablespace();
            if (lex->alter_tablespace_info == NULL)
              MYSQL_YYABORT;
            lex->alter_tablespace_info->tablespace_name= (yyvsp[(1) - (1)].lex_str).str;
            lex->sql_command= SQLCOM_ALTER_TABLESPACE;
          }
    break;

  case 448:

/* Line 1455 of yacc.c  */
#line 4516 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info= new st_alter_tablespace();
            if (lex->alter_tablespace_info == NULL)
              MYSQL_YYABORT;
            lex->alter_tablespace_info->logfile_group_name= (yyvsp[(1) - (1)].lex_str).str;
            lex->sql_command= SQLCOM_ALTER_TABLESPACE;
          }
    break;

  case 449:

/* Line 1455 of yacc.c  */
#line 4528 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_READ_ONLY;
          }
    break;

  case 450:

/* Line 1455 of yacc.c  */
#line 4533 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_READ_WRITE;
          }
    break;

  case 451:

/* Line 1455 of yacc.c  */
#line 4538 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_NOT_ACCESSIBLE;
          }
    break;

  case 452:

/* Line 1455 of yacc.c  */
#line 4546 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->initial_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 453:

/* Line 1455 of yacc.c  */
#line 4554 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->autoextend_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 454:

/* Line 1455 of yacc.c  */
#line 4562 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->max_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 455:

/* Line 1455 of yacc.c  */
#line 4570 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->extent_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 456:

/* Line 1455 of yacc.c  */
#line 4578 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->undo_buffer_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 457:

/* Line 1455 of yacc.c  */
#line 4586 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->redo_buffer_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 458:

/* Line 1455 of yacc.c  */
#line 4594 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->nodegroup_id != UNDEF_NODEGROUP)
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"NODEGROUP");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->nodegroup_id= (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 459:

/* Line 1455 of yacc.c  */
#line 4607 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->ts_comment != NULL)
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"COMMENT");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->ts_comment= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 460:

/* Line 1455 of yacc.c  */
#line 4620 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->storage_engine != NULL)
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),
                       "STORAGE ENGINE");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->storage_engine= (yyvsp[(4) - (4)].db_type);
          }
    break;

  case 463:

/* Line 1455 of yacc.c  */
#line 4639 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->wait_until_completed= TRUE;
          }
    break;

  case 464:

/* Line 1455 of yacc.c  */
#line 4644 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!(lex->alter_tablespace_info->wait_until_completed))
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"NO_WAIT");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->wait_until_completed= FALSE;
          }
    break;

  case 465:

/* Line 1455 of yacc.c  */
#line 4656 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ulonglong_number)= (yyvsp[(1) - (1)].ulong_num);}
    break;

  case 466:

/* Line 1455 of yacc.c  */
#line 4658 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            ulonglong number;
            uint text_shift_number= 0;
            longlong prefix_number;
            char *start_ptr= (yyvsp[(1) - (1)].lex_str).str;
            uint str_len= (yyvsp[(1) - (1)].lex_str).length;
            char *end_ptr= start_ptr + str_len;
            int error;
            prefix_number= my_strtoll10(start_ptr, &end_ptr, &error);
            if ((start_ptr + str_len - 1) == end_ptr)
            {
              switch (end_ptr[0])
              {
                case 'g':
                case 'G':
                  text_shift_number+=10;
                case 'm':
                case 'M':
                  text_shift_number+=10;
                case 'k':
                case 'K':
                  text_shift_number+=10;
                  break;
                default:
                {
                  my_error(ER_WRONG_SIZE_NUMBER, MYF(0));
                  MYSQL_YYABORT;
                }
              }
              if (prefix_number >> 31)
              {
                my_error(ER_SIZE_OVERFLOW_ERROR, MYF(0));
                MYSQL_YYABORT;
              }
              number= prefix_number << text_shift_number;
            }
            else
            {
              my_error(ER_WRONG_SIZE_NUMBER, MYF(0));
              MYSQL_YYABORT;
            }
            (yyval.ulonglong_number)= number;
          }
    break;

  case 467:

/* Line 1455 of yacc.c  */
#line 4709 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_info.option_list= NULL; }
    break;

  case 468:

/* Line 1455 of yacc.c  */
#line 4710 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 469:

/* Line 1455 of yacc.c  */
#line 4711 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 470:

/* Line 1455 of yacc.c  */
#line 4717 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 471:

/* Line 1455 of yacc.c  */
#line 4717 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 472:

/* Line 1455 of yacc.c  */
#line 4719 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {

            Lex->create_info.options|= HA_LEX_CREATE_TABLE_LIKE;
            TABLE_LIST *src_table= Lex->select_lex.add_table_to_list(YYTHD,
                                        (yyvsp[(1) - (1)].table), NULL, 0, TL_READ, MDL_SHARED_READ);
            if (! src_table)
              MYSQL_YYABORT;
            /* CREATE TABLE ... LIKE is not allowed for views. */
            src_table->required_type= FRMTYPE_TABLE;
          }
    break;

  case 473:

/* Line 1455 of yacc.c  */
#line 4732 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.table)= (yyvsp[(2) - (2)].table); }
    break;

  case 474:

/* Line 1455 of yacc.c  */
#line 4733 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.table)= (yyvsp[(3) - (4)].table); }
    break;

  case 475:

/* Line 1455 of yacc.c  */
#line 4737 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 476:

/* Line 1455 of yacc.c  */
#line 4739 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->set_braces(0);}
    break;

  case 477:

/* Line 1455 of yacc.c  */
#line 4740 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 478:

/* Line 1455 of yacc.c  */
#line 4742 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 479:

/* Line 1455 of yacc.c  */
#line 4743 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 480:

/* Line 1455 of yacc.c  */
#line 4748 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              Remove all tables used in PARTITION clause from the global table
              list. Partitioning with subqueries is not allowed anyway.
            */
            TABLE_LIST *last_non_sel_table= Lex->create_last_non_select_table;
            last_non_sel_table->next_global= 0;
            Lex->query_tables_last= &last_non_sel_table->next_global;
          }
    break;

  case 481:

/* Line 1455 of yacc.c  */
#line 4784 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 483:

/* Line 1455 of yacc.c  */
#line 4790 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info= new partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            if (lex->sql_command == SQLCOM_ALTER_TABLE)
            {
              lex->alter_info.flags|= Alter_info::ALTER_PARTITION;
            }
          }
    break;

  case 485:

/* Line 1455 of yacc.c  */
#line 4808 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
#ifdef WITH_PARTITION_STORAGE_ENGINE
            LEX_STRING partition_name={C_STRING_WITH_LEN("partition")};
            if (!plugin_is_ready(&partition_name, MYSQL_STORAGE_ENGINE_PLUGIN))
            {
              my_error(ER_OPTION_PREVENTS_STATEMENT, MYF(0),
                      "--skip-partition");
              MYSQL_YYABORT;
            }
#else
            my_error(ER_FEATURE_DISABLED, MYF(0), "partitioning",
                    "--with-plugin-partition");
            MYSQL_YYABORT;
#endif
          }
    break;

  case 486:

/* Line 1455 of yacc.c  */
#line 4827 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!lex->part_info)
            {
              my_parse_error(ER(ER_PARTITION_ENTRY_ERROR));
              MYSQL_YYABORT;
            }
            /*
              We enter here when opening the frm file to translate
              partition info string into part_info data structure.
            */
          }
    break;

  case 487:

/* Line 1455 of yacc.c  */
#line 4839 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 489:

/* Line 1455 of yacc.c  */
#line 4848 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->list_of_part_fields= TRUE;
            part_info->column_list= FALSE;
            part_info->part_type= HASH_PARTITION;
          }
    break;

  case 490:

/* Line 1455 of yacc.c  */
#line 4855 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->part_type= HASH_PARTITION; }
    break;

  case 491:

/* Line 1455 of yacc.c  */
#line 4856 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 492:

/* Line 1455 of yacc.c  */
#line 4858 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->part_type= RANGE_PARTITION; }
    break;

  case 493:

/* Line 1455 of yacc.c  */
#line 4860 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->part_type= RANGE_PARTITION; }
    break;

  case 494:

/* Line 1455 of yacc.c  */
#line 4862 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->part_type= LIST_PARTITION; }
    break;

  case 495:

/* Line 1455 of yacc.c  */
#line 4864 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->part_type= LIST_PARTITION; }
    break;

  case 496:

/* Line 1455 of yacc.c  */
#line 4868 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 497:

/* Line 1455 of yacc.c  */
#line 4870 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->linear_hash_ind= TRUE;}
    break;

  case 498:

/* Line 1455 of yacc.c  */
#line 4874 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 499:

/* Line 1455 of yacc.c  */
#line 4875 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 500:

/* Line 1455 of yacc.c  */
#line 4879 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 501:

/* Line 1455 of yacc.c  */
#line 4880 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 502:

/* Line 1455 of yacc.c  */
#line 4885 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->num_columns++;
            if (part_info->part_field_list.push_back((yyvsp[(1) - (1)].lex_str).str))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
            if (part_info->num_columns > MAX_REF_PARTS)
            {
              my_error(ER_TOO_MANY_PARTITION_FUNC_FIELDS_ERROR, MYF(0),
                       "list of partition fields");
              MYSQL_YYABORT;
            }
          }
    break;

  case 503:

/* Line 1455 of yacc.c  */
#line 4904 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->column_list= TRUE;
            part_info->list_of_part_fields= TRUE;
          }
    break;

  case 504:

/* Line 1455 of yacc.c  */
#line 4914 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->set_part_expr((yyvsp[(2) - (5)].simple_string)+1, (yyvsp[(3) - (5)].item), (yyvsp[(4) - (5)].simple_string), FALSE))
            { MYSQL_YYABORT; }
            part_info->num_columns= 1;
            part_info->column_list= FALSE;
          }
    break;

  case 505:

/* Line 1455 of yacc.c  */
#line 4925 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->part_info->set_part_expr((yyvsp[(2) - (5)].simple_string)+1, (yyvsp[(3) - (5)].item), (yyvsp[(4) - (5)].simple_string), TRUE))
            { MYSQL_YYABORT; }
          }
    break;

  case 506:

/* Line 1455 of yacc.c  */
#line 4933 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 507:

/* Line 1455 of yacc.c  */
#line 4935 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            uint num_parts= (yyvsp[(2) - (2)].ulong_num);
            partition_info *part_info= Lex->part_info;
            if (num_parts == 0)
            {
              my_error(ER_NO_PARTS_ERROR, MYF(0), "partitions");
              MYSQL_YYABORT;
            }

            part_info->num_parts= num_parts;
            part_info->use_default_num_partitions= FALSE;
          }
    break;

  case 508:

/* Line 1455 of yacc.c  */
#line 4950 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 509:

/* Line 1455 of yacc.c  */
#line 4952 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->subpart_type= HASH_PARTITION; }
    break;

  case 510:

/* Line 1455 of yacc.c  */
#line 4953 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 511:

/* Line 1455 of yacc.c  */
#line 4956 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->subpart_type= HASH_PARTITION;
            part_info->list_of_subpart_fields= TRUE;
          }
    break;

  case 512:

/* Line 1455 of yacc.c  */
#line 4961 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 513:

/* Line 1455 of yacc.c  */
#line 4965 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 514:

/* Line 1455 of yacc.c  */
#line 4966 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 515:

/* Line 1455 of yacc.c  */
#line 4971 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->subpart_field_list.push_back((yyvsp[(1) - (1)].lex_str).str))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
            if (part_info->subpart_field_list.elements > MAX_REF_PARTS)
            {
              my_error(ER_TOO_MANY_PARTITION_FUNC_FIELDS_ERROR, MYF(0),
                       "list of subpartition fields");
              MYSQL_YYABORT;
            }
          }
    break;

  case 516:

/* Line 1455 of yacc.c  */
#line 4989 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            bool not_corr_func;
            not_corr_func= !lex->safe_to_cache_query;
            lex->safe_to_cache_query= 1;
            if (not_corr_func)
            {
              my_parse_error(ER(ER_WRONG_EXPR_IN_PARTITION_FUNC_ERROR));
              MYSQL_YYABORT;
            }
            (yyval.item)=(yyvsp[(1) - (1)].item);
          }
    break;

  case 517:

/* Line 1455 of yacc.c  */
#line 5004 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 518:

/* Line 1455 of yacc.c  */
#line 5006 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            uint num_parts= (yyvsp[(2) - (2)].ulong_num);
            LEX *lex= Lex;
            if (num_parts == 0)
            {
              my_error(ER_NO_PARTS_ERROR, MYF(0), "subpartitions");
              MYSQL_YYABORT;
            }
            lex->part_info->num_subparts= num_parts;
            lex->part_info->use_default_num_subpartitions= FALSE;
          }
    break;

  case 519:

/* Line 1455 of yacc.c  */
#line 5021 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->part_type == RANGE_PARTITION)
            {
              my_error(ER_PARTITIONS_MUST_BE_DEFINED_ERROR, MYF(0),
                       "RANGE");
              MYSQL_YYABORT;
            }
            else if (part_info->part_type == LIST_PARTITION)
            {
              my_error(ER_PARTITIONS_MUST_BE_DEFINED_ERROR, MYF(0),
                       "LIST");
              MYSQL_YYABORT;
            }
          }
    break;

  case 520:

/* Line 1455 of yacc.c  */
#line 5037 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            uint count_curr_parts= part_info->partitions.elements;
            if (part_info->num_parts != 0)
            {
              if (part_info->num_parts !=
                  count_curr_parts)
              {
                my_parse_error(ER(ER_PARTITION_WRONG_NO_PART_ERROR));
                MYSQL_YYABORT;
              }
            }
            else if (count_curr_parts > 0)
            {
              part_info->num_parts= count_curr_parts;
            }
            part_info->count_curr_subparts= 0;
          }
    break;

  case 521:

/* Line 1455 of yacc.c  */
#line 5058 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 522:

/* Line 1455 of yacc.c  */
#line 5059 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 523:

/* Line 1455 of yacc.c  */
#line 5064 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            partition_element *p_elem= new partition_element();

            if (!p_elem || part_info->partitions.push_back(p_elem))
            {
              mem_alloc_error(sizeof(partition_element));
              MYSQL_YYABORT;
            }
            p_elem->part_state= PART_NORMAL;
            part_info->curr_part_elem= p_elem;
            part_info->current_partition= p_elem;
            part_info->use_default_partitions= FALSE;
            part_info->use_default_num_partitions= FALSE;
          }
    break;

  case 524:

/* Line 1455 of yacc.c  */
#line 5083 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 525:

/* Line 1455 of yacc.c  */
#line 5088 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            partition_element *p_elem= part_info->curr_part_elem;
            p_elem->partition_name= (yyvsp[(1) - (1)].lex_str).str;
          }
    break;

  case 526:

/* Line 1455 of yacc.c  */
#line 5097 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->part_type == RANGE_PARTITION)
              {
                my_error(ER_PARTITION_REQUIRES_VALUES_ERROR, MYF(0),
                         "RANGE", "LESS THAN");
                MYSQL_YYABORT;
              }
              if (part_info->part_type == LIST_PARTITION)
              {
                my_error(ER_PARTITION_REQUIRES_VALUES_ERROR, MYF(0),
                         "LIST", "IN");
                MYSQL_YYABORT;
              }
            }
            else
              part_info->part_type= HASH_PARTITION;
          }
    break;

  case 527:

/* Line 1455 of yacc.c  */
#line 5119 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->part_type != RANGE_PARTITION)
              {
                my_error(ER_PARTITION_WRONG_VALUES_ERROR, MYF(0),
                         "RANGE", "LESS THAN");
                MYSQL_YYABORT;
              }
            }
            else
              part_info->part_type= RANGE_PARTITION;
          }
    break;

  case 528:

/* Line 1455 of yacc.c  */
#line 5134 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 529:

/* Line 1455 of yacc.c  */
#line 5136 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->part_type != LIST_PARTITION)
              {
                my_error(ER_PARTITION_WRONG_VALUES_ERROR, MYF(0),
                               "LIST", "IN");
                MYSQL_YYABORT;
              }
            }
            else
              part_info->part_type= LIST_PARTITION;
          }
    break;

  case 530:

/* Line 1455 of yacc.c  */
#line 5151 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 531:

/* Line 1455 of yacc.c  */
#line 5156 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;

            if (part_info->num_columns &&
                part_info->num_columns != 1U)
            {
              part_info->print_debug("Kilroy II", NULL);
              my_parse_error(ER(ER_PARTITION_COLUMN_LIST_ERROR));
              MYSQL_YYABORT;
            }
            else
              part_info->num_columns= 1U;
            if (part_info->init_column_part())
            {
              MYSQL_YYABORT;
            }
            if (part_info->add_max_value())
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 532:

/* Line 1455 of yacc.c  */
#line 5177 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 533:

/* Line 1455 of yacc.c  */
#line 5182 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            part_info->print_debug("part_values_in: part_value_item", NULL);

            if (part_info->num_columns != 1U)
            {
              if (!lex->is_partition_management() ||
                  part_info->num_columns == 0 ||
                  part_info->num_columns > MAX_REF_PARTS)
              {
                part_info->print_debug("Kilroy III", NULL);
                my_parse_error(ER(ER_PARTITION_COLUMN_LIST_ERROR));
                MYSQL_YYABORT;
              }
              /*
                Reorganize the current large array into a list of small
                arrays with one entry in each array. This can happen
                in the first partition of an ALTER TABLE statement where
                we ADD or REORGANIZE partitions. Also can only happen
                for LIST partitions.
              */
              if (part_info->reorganize_into_single_field_col_val())
              {
                MYSQL_YYABORT;
              }
            }
          }
    break;

  case 534:

/* Line 1455 of yacc.c  */
#line 5211 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->num_columns < 2U)
            {
              my_parse_error(ER(ER_ROW_SINGLE_PARTITION_FIELD_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 535:

/* Line 1455 of yacc.c  */
#line 5222 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 536:

/* Line 1455 of yacc.c  */
#line 5223 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 537:

/* Line 1455 of yacc.c  */
#line 5228 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->print_debug("( part_value_item", NULL);
            /* Initialisation code needed for each list of value expressions */
            if (!(part_info->part_type == LIST_PARTITION &&
                  part_info->num_columns == 1U) &&
                 part_info->init_column_part())
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 538:

/* Line 1455 of yacc.c  */
#line 5239 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 539:

/* Line 1455 of yacc.c  */
#line 5241 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->print_debug(") part_value_item", NULL);
            if (part_info->num_columns == 0)
              part_info->num_columns= part_info->curr_list_object;
            if (part_info->num_columns != part_info->curr_list_object)
            {
              /*
                All value items lists must be of equal length, in some cases
                which is covered by the above if-statement we don't know yet
                how many columns is in the partition so the assignment above
                ensures that we only report errors when we know we have an
                error.
              */
              part_info->print_debug("Kilroy I", NULL);
              my_parse_error(ER(ER_PARTITION_COLUMN_LIST_ERROR));
              MYSQL_YYABORT;
            }
            part_info->curr_list_object= 0;
          }
    break;

  case 540:

/* Line 1455 of yacc.c  */
#line 5264 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 541:

/* Line 1455 of yacc.c  */
#line 5265 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 542:

/* Line 1455 of yacc.c  */
#line 5270 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->part_type == LIST_PARTITION)
            {
              my_parse_error(ER(ER_MAXVALUE_IN_VALUES_IN));
              MYSQL_YYABORT;
            }
            if (part_info->add_max_value())
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 543:

/* Line 1455 of yacc.c  */
#line 5283 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            Item *part_expr= (yyvsp[(1) - (1)].item);

            if (!lex->safe_to_cache_query)
            {
              my_parse_error(ER(ER_WRONG_EXPR_IN_PARTITION_FUNC_ERROR));
              MYSQL_YYABORT;
            }
            if (part_info->add_column_list_value(YYTHD, part_expr))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 544:

/* Line 1455 of yacc.c  */
#line 5303 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->num_subparts != 0 &&
                !part_info->use_default_subpartitions)
            {
              /*
                We come here when we have defined subpartitions on the first
                partition but not on all the subsequent partitions. 
              */
              my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 545:

/* Line 1455 of yacc.c  */
#line 5317 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->num_subparts != 0)
            {
              if (part_info->num_subparts !=
                  part_info->count_curr_subparts)
              {
                my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
                MYSQL_YYABORT;
              }
            }
            else if (part_info->count_curr_subparts > 0)
            {
              if (part_info->partitions.elements > 1)
              {
                my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
                MYSQL_YYABORT;
              }
              part_info->num_subparts= part_info->count_curr_subparts;
            }
            part_info->count_curr_subparts= 0;
          }
    break;

  case 546:

/* Line 1455 of yacc.c  */
#line 5342 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 547:

/* Line 1455 of yacc.c  */
#line 5343 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 548:

/* Line 1455 of yacc.c  */
#line 5348 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            partition_element *curr_part= part_info->current_partition;
            partition_element *sub_p_elem= new partition_element(curr_part);
            if (part_info->use_default_subpartitions &&
                part_info->partitions.elements >= 2)
            {
              /*
                create table t1 (a int)
                partition by list (a) subpartition by hash (a)
                (partition p0 values in (1),
                 partition p1 values in (2) subpartition sp11);
                causes use to arrive since we are on the second
                partition, but still use_default_subpartitions
                is set. When we come here we're processing at least
                the second partition (the current partition processed
                have already been put into the partitions list.
              */
              my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
              MYSQL_YYABORT;
            }
            if (!sub_p_elem ||
             curr_part->subpartitions.push_back(sub_p_elem))
            {
              mem_alloc_error(sizeof(partition_element));
              MYSQL_YYABORT;
            }
            part_info->curr_part_elem= sub_p_elem;
            part_info->use_default_subpartitions= FALSE;
            part_info->use_default_num_subpartitions= FALSE;
            part_info->count_curr_subparts++;
          }
    break;

  case 549:

/* Line 1455 of yacc.c  */
#line 5380 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 550:

/* Line 1455 of yacc.c  */
#line 5385 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->partition_name= (yyvsp[(1) - (1)].lex_str).str; }
    break;

  case 551:

/* Line 1455 of yacc.c  */
#line 5389 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 552:

/* Line 1455 of yacc.c  */
#line 5390 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 553:

/* Line 1455 of yacc.c  */
#line 5394 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 554:

/* Line 1455 of yacc.c  */
#line 5395 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 555:

/* Line 1455 of yacc.c  */
#line 5400 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->tablespace_name= (yyvsp[(3) - (3)].lex_str).str; }
    break;

  case 556:

/* Line 1455 of yacc.c  */
#line 5402 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->curr_part_elem->engine_type= (yyvsp[(4) - (4)].db_type);
            part_info->default_engine_type= (yyvsp[(4) - (4)].db_type);
          }
    break;

  case 557:

/* Line 1455 of yacc.c  */
#line 5408 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info->curr_part_elem->connect_string.str= (yyvsp[(3) - (3)].lex_str).str;
            lex->part_info->curr_part_elem->connect_string.length= (yyvsp[(3) - (3)].lex_str).length;
          }
    break;

  case 558:

/* Line 1455 of yacc.c  */
#line 5414 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->nodegroup_id= (uint16) (yyvsp[(3) - (3)].ulong_num); }
    break;

  case 559:

/* Line 1455 of yacc.c  */
#line 5416 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_max_rows= (ha_rows) (yyvsp[(3) - (3)].ulonglong_number); }
    break;

  case 560:

/* Line 1455 of yacc.c  */
#line 5418 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_min_rows= (ha_rows) (yyvsp[(3) - (3)].ulonglong_number); }
    break;

  case 561:

/* Line 1455 of yacc.c  */
#line 5420 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->data_file_name= (yyvsp[(4) - (4)].lex_str).str; }
    break;

  case 562:

/* Line 1455 of yacc.c  */
#line 5422 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->index_file_name= (yyvsp[(4) - (4)].lex_str).str; }
    break;

  case 563:

/* Line 1455 of yacc.c  */
#line 5424 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_comment= (yyvsp[(3) - (3)].lex_str).str; }
    break;

  case 564:

/* Line 1455 of yacc.c  */
#line 5433 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->sql_command == SQLCOM_INSERT)
              lex->sql_command= SQLCOM_INSERT_SELECT;
            else if (lex->sql_command == SQLCOM_REPLACE)
              lex->sql_command= SQLCOM_REPLACE_SELECT;
            /*
              The following work only with the local list, the global list
              is created correctly in this case
            */
            lex->current_select->table_list.save_and_clear(&lex->save_list);
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 565:

/* Line 1455 of yacc.c  */
#line 5448 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 566:

/* Line 1455 of yacc.c  */
#line 5452 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              The following work only with the local list, the global list
              is created correctly in this case
            */
            Lex->current_select->table_list.push_front(&Lex->save_list);
          }
    break;

  case 567:

/* Line 1455 of yacc.c  */
#line 5462 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 568:

/* Line 1455 of yacc.c  */
#line 5463 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 569:

/* Line 1455 of yacc.c  */
#line 5467 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 570:

/* Line 1455 of yacc.c  */
#line 5468 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 571:

/* Line 1455 of yacc.c  */
#line 5472 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 572:

/* Line 1455 of yacc.c  */
#line 5473 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 573:

/* Line 1455 of yacc.c  */
#line 5477 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 574:

/* Line 1455 of yacc.c  */
#line 5478 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 575:

/* Line 1455 of yacc.c  */
#line 5482 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 576:

/* Line 1455 of yacc.c  */
#line 5483 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(1) - (1)].num);}
    break;

  case 577:

/* Line 1455 of yacc.c  */
#line 5487 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=(yyvsp[(1) - (1)].num); }
    break;

  case 578:

/* Line 1455 of yacc.c  */
#line 5488 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(1) - (2)].num) | (yyvsp[(2) - (2)].num); }
    break;

  case 579:

/* Line 1455 of yacc.c  */
#line 5492 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=HA_LEX_CREATE_TMP_TABLE; }
    break;

  case 580:

/* Line 1455 of yacc.c  */
#line 5497 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->check_exists= FALSE;
            (yyval.num)= 0;
          }
    break;

  case 581:

/* Line 1455 of yacc.c  */
#line 5502 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->check_exists= TRUE;
            (yyval.num)=HA_LEX_CREATE_IF_NOT_EXISTS;
          }
    break;

  case 589:

/* Line 1455 of yacc.c  */
#line 5526 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.db_type= (yyvsp[(3) - (3)].db_type);
            Lex->create_info.used_fields|= HA_CREATE_USED_ENGINE;
          }
    break;

  case 590:

/* Line 1455 of yacc.c  */
#line 5531 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.max_rows= (yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_MAX_ROWS;
          }
    break;

  case 591:

/* Line 1455 of yacc.c  */
#line 5536 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.min_rows= (yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_MIN_ROWS;
          }
    break;

  case 592:

/* Line 1455 of yacc.c  */
#line 5541 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.avg_row_length=(yyvsp[(3) - (3)].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_AVG_ROW_LENGTH;
          }
    break;

  case 593:

/* Line 1455 of yacc.c  */
#line 5546 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.password=(yyvsp[(3) - (3)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_PASSWORD;
          }
    break;

  case 594:

/* Line 1455 of yacc.c  */
#line 5551 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.comment=(yyvsp[(3) - (3)].lex_str);
            Lex->create_info.used_fields|= HA_CREATE_USED_COMMENT;
          }
    break;

  case 595:

/* Line 1455 of yacc.c  */
#line 5556 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.auto_increment_value=(yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_AUTO;
          }
    break;

  case 596:

/* Line 1455 of yacc.c  */
#line 5561 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            switch((yyvsp[(3) - (3)].ulong_num)) {
            case 0:
                Lex->create_info.table_options|= HA_OPTION_NO_PACK_KEYS;
                break;
            case 1:
                Lex->create_info.table_options|= HA_OPTION_PACK_KEYS;
                break;
            default:
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
            }
            Lex->create_info.used_fields|= HA_CREATE_USED_PACK_KEYS;
          }
    break;

  case 597:

/* Line 1455 of yacc.c  */
#line 5576 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.table_options&=
              ~(HA_OPTION_PACK_KEYS | HA_OPTION_NO_PACK_KEYS);
            Lex->create_info.used_fields|= HA_CREATE_USED_PACK_KEYS;
          }
    break;

  case 598:

/* Line 1455 of yacc.c  */
#line 5582 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            switch((yyvsp[(3) - (3)].ulong_num)) {
            case 0:
                Lex->create_info.stats_auto_recalc= HA_STATS_AUTO_RECALC_OFF;
                break;
            case 1:
                Lex->create_info.stats_auto_recalc= HA_STATS_AUTO_RECALC_ON;
                break;
            default:
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
            }
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_AUTO_RECALC;
          }
    break;

  case 599:

/* Line 1455 of yacc.c  */
#line 5597 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.stats_auto_recalc= HA_STATS_AUTO_RECALC_DEFAULT;
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_AUTO_RECALC;
          }
    break;

  case 600:

/* Line 1455 of yacc.c  */
#line 5602 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            switch((yyvsp[(3) - (3)].ulong_num)) {
            case 0:
                Lex->create_info.table_options|= HA_OPTION_NO_STATS_PERSISTENT;
                break;
            case 1:
                Lex->create_info.table_options|= HA_OPTION_STATS_PERSISTENT;
                break;
            default:
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
            }
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_PERSISTENT;
          }
    break;

  case 601:

/* Line 1455 of yacc.c  */
#line 5617 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.table_options&=
              ~(HA_OPTION_STATS_PERSISTENT | HA_OPTION_NO_STATS_PERSISTENT);
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_PERSISTENT;
          }
    break;

  case 602:

/* Line 1455 of yacc.c  */
#line 5623 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* From user point of view STATS_SAMPLE_PAGES can be specified as
            STATS_SAMPLE_PAGES=N (where 0<N<=65535, it does not make sense to
            scan 0 pages) or STATS_SAMPLE_PAGES=default. Internally we record
            =default as 0. See create_frm() in sql/table.cc, we use only two
            bytes for stats_sample_pages and this is why we do not allow
            larger values. 65535 pages, 16kb each means to sample 1GB, which
            is impractical. If at some point this needs to be extended, then
            we can store the higher bits from stats_sample_pages in .frm too. */
            if ((yyvsp[(3) - (3)].ulong_num) == 0 || (yyvsp[(3) - (3)].ulong_num) > 0xffff)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            Lex->create_info.stats_sample_pages=(yyvsp[(3) - (3)].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_SAMPLE_PAGES;
          }
    break;

  case 603:

/* Line 1455 of yacc.c  */
#line 5641 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.stats_sample_pages=0;
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_SAMPLE_PAGES;
          }
    break;

  case 604:

/* Line 1455 of yacc.c  */
#line 5646 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_CHECKSUM : HA_OPTION_NO_CHECKSUM;
            Lex->create_info.used_fields|= HA_CREATE_USED_CHECKSUM;
          }
    break;

  case 605:

/* Line 1455 of yacc.c  */
#line 5651 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
             Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_CHECKSUM : HA_OPTION_NO_CHECKSUM;
             Lex->create_info.used_fields|= HA_CREATE_USED_CHECKSUM;
          }
    break;

  case 606:

/* Line 1455 of yacc.c  */
#line 5656 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.used_fields|= HA_CREATE_USED_PAGE_CHECKSUM;
            Lex->create_info.page_checksum= (yyvsp[(3) - (3)].choice);
          }
    break;

  case 607:

/* Line 1455 of yacc.c  */
#line 5661 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_DELAY_KEY_WRITE : HA_OPTION_NO_DELAY_KEY_WRITE;
            Lex->create_info.used_fields|= HA_CREATE_USED_DELAY_KEY_WRITE;
          }
    break;

  case 608:

/* Line 1455 of yacc.c  */
#line 5666 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.row_type= (yyvsp[(3) - (3)].row_type);
            Lex->create_info.used_fields|= HA_CREATE_USED_ROW_FORMAT;
          }
    break;

  case 609:

/* Line 1455 of yacc.c  */
#line 5671 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->select_lex.table_list.save_and_clear(&Lex->save_list);
          }
    break;

  case 610:

/* Line 1455 of yacc.c  */
#line 5675 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              Move the union list to the merge_list and exclude its tables
              from the global list.
            */
            LEX *lex=Lex;
            lex->create_info.merge_list= lex->select_lex.table_list;
            lex->select_lex.table_list= lex->save_list;
            /*
              When excluding union list from the global list we assume that
              elements of the former immediately follow elements which represent
              table being created/altered and parent tables.
            */
            TABLE_LIST *last_non_sel_table= lex->create_last_non_select_table;
            DBUG_ASSERT(last_non_sel_table->next_global ==
                        lex->create_info.merge_list.first);
            last_non_sel_table->next_global= 0;
            Lex->query_tables_last= &last_non_sel_table->next_global;

            lex->create_info.used_fields|= HA_CREATE_USED_UNION;
          }
    break;

  case 613:

/* Line 1455 of yacc.c  */
#line 5699 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.merge_insert_method= (yyvsp[(3) - (3)].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_INSERT_METHOD;
          }
    break;

  case 614:

/* Line 1455 of yacc.c  */
#line 5704 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.data_file_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_DATADIR;
          }
    break;

  case 615:

/* Line 1455 of yacc.c  */
#line 5709 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.index_file_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_INDEXDIR;
          }
    break;

  case 616:

/* Line 1455 of yacc.c  */
#line 5714 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {Lex->create_info.tablespace= (yyvsp[(2) - (2)].lex_str).str;}
    break;

  case 617:

/* Line 1455 of yacc.c  */
#line 5716 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {Lex->create_info.storage_media= HA_SM_DISK;}
    break;

  case 618:

/* Line 1455 of yacc.c  */
#line 5718 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {Lex->create_info.storage_media= HA_SM_MEMORY;}
    break;

  case 619:

/* Line 1455 of yacc.c  */
#line 5720 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.connect_string.str= (yyvsp[(3) - (3)].lex_str).str;
            Lex->create_info.connect_string.length= (yyvsp[(3) - (3)].lex_str).length;
            Lex->create_info.used_fields|= HA_CREATE_USED_CONNECTION;
          }
    break;

  case 620:

/* Line 1455 of yacc.c  */
#line 5726 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.used_fields|= HA_CREATE_USED_KEY_BLOCK_SIZE;
            Lex->create_info.key_block_size= (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 621:

/* Line 1455 of yacc.c  */
#line 5731 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
	    Lex->create_info.used_fields|= HA_CREATE_USED_TRANSACTIONAL;
            Lex->create_info.transactional= (yyvsp[(3) - (3)].choice);
          }
    break;

  case 622:

/* Line 1455 of yacc.c  */
#line 5736 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            new (YYTHD->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), true, &Lex->create_info.option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 623:

/* Line 1455 of yacc.c  */
#line 5742 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            new (YYTHD->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), false, &Lex->create_info.option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 624:

/* Line 1455 of yacc.c  */
#line 5748 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            new (YYTHD->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].ulonglong_number), &Lex->create_info.option_list,
                                  &Lex->option_list_last, YYTHD->mem_root);
          }
    break;

  case 625:

/* Line 1455 of yacc.c  */
#line 5754 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            new (YYTHD->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), &Lex->create_info.option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 626:

/* Line 1455 of yacc.c  */
#line 5763 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            HA_CREATE_INFO *cinfo= &Lex->create_info;
            if ((cinfo->used_fields & HA_CREATE_USED_DEFAULT_CHARSET) &&
                 cinfo->default_table_charset && (yyvsp[(4) - (4)].charset) &&
                 !my_charset_same(cinfo->default_table_charset,(yyvsp[(4) - (4)].charset)))
            {
              my_error(ER_CONFLICTING_DECLARATIONS, MYF(0),
                       "CHARACTER SET ", cinfo->default_table_charset->csname,
                       "CHARACTER SET ", (yyvsp[(4) - (4)].charset)->csname);
              MYSQL_YYABORT;
            }
            Lex->create_info.default_table_charset= (yyvsp[(4) - (4)].charset);
            Lex->create_info.used_fields|= HA_CREATE_USED_DEFAULT_CHARSET;
          }
    break;

  case 627:

/* Line 1455 of yacc.c  */
#line 5781 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            HA_CREATE_INFO *cinfo= &Lex->create_info;
            if ((cinfo->used_fields & HA_CREATE_USED_DEFAULT_CHARSET) &&
                 cinfo->default_table_charset && (yyvsp[(4) - (4)].charset) &&
                 !((yyvsp[(4) - (4)].charset)= merge_charset_and_collation(cinfo->default_table_charset,
                                                   (yyvsp[(4) - (4)].charset))))
            {
              MYSQL_YYABORT;
            }

            Lex->create_info.default_table_charset= (yyvsp[(4) - (4)].charset);
            Lex->create_info.used_fields|= HA_CREATE_USED_DEFAULT_CHARSET;
          }
    break;

  case 628:

/* Line 1455 of yacc.c  */
#line 5798 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            plugin_ref plugin= ha_resolve_by_name(YYTHD, &(yyvsp[(1) - (1)].lex_str));

            if (plugin)
              (yyval.db_type)= plugin_hton(plugin);
            else
            {
              if (YYTHD->variables.sql_mode & MODE_NO_ENGINE_SUBSTITUTION)
              {
                my_error(ER_UNKNOWN_STORAGE_ENGINE, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
                MYSQL_YYABORT;
              }
              (yyval.db_type)= 0;
              push_warning_printf(YYTHD, Sql_condition::WARN_LEVEL_WARN,
                                  ER_UNKNOWN_STORAGE_ENGINE,
                                  ER(ER_UNKNOWN_STORAGE_ENGINE),
                                  (yyvsp[(1) - (1)].lex_str).str);
            }
          }
    break;

  case 629:

/* Line 1455 of yacc.c  */
#line 5821 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            plugin_ref plugin;
            if ((plugin= ha_resolve_by_name(YYTHD, &(yyvsp[(1) - (1)].lex_str))))
              (yyval.db_type)= plugin_hton(plugin);
            else
            {
              my_error(ER_UNKNOWN_STORAGE_ENGINE, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 630:

/* Line 1455 of yacc.c  */
#line 5834 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_DEFAULT; }
    break;

  case 631:

/* Line 1455 of yacc.c  */
#line 5835 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_FIXED; }
    break;

  case 632:

/* Line 1455 of yacc.c  */
#line 5836 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_DYNAMIC; }
    break;

  case 633:

/* Line 1455 of yacc.c  */
#line 5837 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_COMPRESSED; }
    break;

  case 634:

/* Line 1455 of yacc.c  */
#line 5838 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_REDUNDANT; }
    break;

  case 635:

/* Line 1455 of yacc.c  */
#line 5839 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_COMPACT; }
    break;

  case 636:

/* Line 1455 of yacc.c  */
#line 5840 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_PAGE; }
    break;

  case 637:

/* Line 1455 of yacc.c  */
#line 5844 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_DISABLED; }
    break;

  case 638:

/* Line 1455 of yacc.c  */
#line 5845 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_TO_FIRST; }
    break;

  case 639:

/* Line 1455 of yacc.c  */
#line 5846 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_TO_LAST; }
    break;

  case 640:

/* Line 1455 of yacc.c  */
#line 5850 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 642:

/* Line 1455 of yacc.c  */
#line 5855 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {(yyval.num) = (int) STRING_RESULT; }
    break;

  case 643:

/* Line 1455 of yacc.c  */
#line 5856 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {(yyval.num) = (int) REAL_RESULT; }
    break;

  case 644:

/* Line 1455 of yacc.c  */
#line 5857 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {(yyval.num) = (int) DECIMAL_RESULT; }
    break;

  case 645:

/* Line 1455 of yacc.c  */
#line 5858 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {(yyval.num) = (int) INT_RESULT; }
    break;

  case 646:

/* Line 1455 of yacc.c  */
#line 5864 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
          Lex->create_last_non_select_table= Lex->last_table();
        }
    break;

  case 652:

/* Line 1455 of yacc.c  */
#line 5882 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->col_list.empty(); /* Alloced by sql_alloc */
          }
    break;

  case 653:

/* Line 1455 of yacc.c  */
#line 5889 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->option_list= NULL; }
    break;

  case 654:

/* Line 1455 of yacc.c  */
#line 5891 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(1) - (8)].key_type), (yyvsp[(2) - (8)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 655:

/* Line 1455 of yacc.c  */
#line 5897 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->option_list= NULL; }
    break;

  case 656:

/* Line 1455 of yacc.c  */
#line 5899 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(1) - (9)].key_type), (yyvsp[(3) - (9)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 657:

/* Line 1455 of yacc.c  */
#line 5905 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->option_list= NULL; }
    break;

  case 658:

/* Line 1455 of yacc.c  */
#line 5907 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(1) - (9)].key_type), (yyvsp[(3) - (9)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 659:

/* Line 1455 of yacc.c  */
#line 5913 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->option_list= NULL; }
    break;

  case 660:

/* Line 1455 of yacc.c  */
#line 5915 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(2) - (9)].key_type), (yyvsp[(3) - (9)].lex_str).str ? (yyvsp[(3) - (9)].lex_str) : (yyvsp[(1) - (9)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 661:

/* Line 1455 of yacc.c  */
#line 5920 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Key *key= new Foreign_key((yyvsp[(4) - (8)].lex_str).str ? (yyvsp[(4) - (8)].lex_str) : (yyvsp[(1) - (8)].lex_str), lex->col_list,
                                      (yyvsp[(8) - (8)].table)->db,
                                      (yyvsp[(8) - (8)].table)->table,
                                      lex->ref_list,
                                      lex->fk_delete_opt,
                                      lex->fk_update_opt,
                                      lex->fk_match_option,
                                      lex->check_exists);
            if (key == NULL)
              MYSQL_YYABORT;
            lex->alter_info.key_list.push_back(key);
            lex->option_list= NULL;
            if (add_create_index (lex, Key::MULTIPLE, (yyvsp[(1) - (8)].lex_str).str ? (yyvsp[(1) - (8)].lex_str) : (yyvsp[(4) - (8)].lex_str),
                                  &default_key_create_info, 1))
              MYSQL_YYABORT;
            /* Only used for ALTER TABLE. Ignored otherwise. */
            lex->alter_info.flags|= Alter_info::ADD_FOREIGN_KEY;
          }
    break;

  case 662:

/* Line 1455 of yacc.c  */
#line 5941 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->col_list.empty(); /* Alloced by sql_alloc */
          }
    break;

  case 666:

/* Line 1455 of yacc.c  */
#line 5956 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 667:

/* Line 1455 of yacc.c  */
#line 5957 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 668:

/* Line 1455 of yacc.c  */
#line 5961 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str); }
    break;

  case 669:

/* Line 1455 of yacc.c  */
#line 5966 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->length=lex->dec=0;
            lex->type=0;
            lex->default_value= lex->on_update_value= 0;
            lex->comment=null_lex_str;
            lex->charset=NULL;
	    lex->vcol_info= 0;
            lex->option_list= NULL;
          }
    break;

  case 670:

/* Line 1455 of yacc.c  */
#line 5977 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (add_field_to_list(lex->thd, &(yyvsp[(1) - (3)].lex_str), (enum enum_field_types) (yyvsp[(3) - (3)].num),
                                  lex->length,lex->dec,lex->type,
                                  lex->default_value, lex->on_update_value, 
                                  &lex->comment,
                                  lex->change,&lex->interval_list,lex->charset,
                                  lex->uint_geom_type,
                                  lex->vcol_info, lex->option_list))
              MYSQL_YYABORT;
          }
    break;

  case 671:

/* Line 1455 of yacc.c  */
#line 5991 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 672:

/* Line 1455 of yacc.c  */
#line 5995 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= (enum enum_field_types)MYSQL_TYPE_VIRTUAL;
            Lex->vcol_info->set_field_type((enum enum_field_types) (yyvsp[(1) - (8)].num));
          }
    break;

  case 674:

/* Line 1455 of yacc.c  */
#line 6003 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 675:

/* Line 1455 of yacc.c  */
#line 6008 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->vcol_info->set_stored_in_db_flag(FALSE);
          }
    break;

  case 676:

/* Line 1455 of yacc.c  */
#line 6012 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->vcol_info->set_stored_in_db_flag(FALSE);
          }
    break;

  case 677:

/* Line 1455 of yacc.c  */
#line 6016 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->vcol_info->set_stored_in_db_flag(TRUE);
          }
    break;

  case 678:

/* Line 1455 of yacc.c  */
#line 6022 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 679:

/* Line 1455 of yacc.c  */
#line 6023 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 680:

/* Line 1455 of yacc.c  */
#line 6027 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 682:

/* Line 1455 of yacc.c  */
#line 6033 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= UNIQUE_FLAG;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 683:

/* Line 1455 of yacc.c  */
#line 6039 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= UNIQUE_KEY_FLAG;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 684:

/* Line 1455 of yacc.c  */
#line 6044 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 685:

/* Line 1455 of yacc.c  */
#line 6049 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              "PARSE_VCOL_EXPR" can only be used by the SQL server
              when reading a '*.frm' file.
              Prevent the end user from invoking this command.
            */
            if (!Lex->parse_vcol_expr)
            {
              my_message(ER_SYNTAX_ERROR, ER(ER_SYNTAX_ERROR), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 686:

/* Line 1455 of yacc.c  */
#line 6065 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->vcol_info= new Virtual_column_info();
            if (!Lex->vcol_info)
            {
              mem_alloc_error(sizeof(Virtual_column_info));
              MYSQL_YYABORT;
            }
            uint expr_len= (uint)((yyvsp[(3) - (3)].simple_string) - (yyvsp[(1) - (3)].simple_string)) - 1;
            Lex->vcol_info->expr_str.str= (char* ) sql_memdup((yyvsp[(1) - (3)].simple_string) + 1, expr_len);
            Lex->vcol_info->expr_str.length= expr_len;
            Lex->vcol_info->expr_item= (yyvsp[(2) - (3)].item);
          }
    break;

  case 687:

/* Line 1455 of yacc.c  */
#line 6080 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=(yyvsp[(1) - (3)].num); }
    break;

  case 688:

/* Line 1455 of yacc.c  */
#line 6081 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=(yyvsp[(1) - (3)].num); }
    break;

  case 689:

/* Line 1455 of yacc.c  */
#line 6082 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_FLOAT; }
    break;

  case 690:

/* Line 1455 of yacc.c  */
#line 6084 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_BIT;
          }
    break;

  case 691:

/* Line 1455 of yacc.c  */
#line 6089 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_BIT;
          }
    break;

  case 692:

/* Line 1455 of yacc.c  */
#line 6093 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_TINY;
          }
    break;

  case 693:

/* Line 1455 of yacc.c  */
#line 6098 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_TINY;
          }
    break;

  case 694:

/* Line 1455 of yacc.c  */
#line 6103 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 695:

/* Line 1455 of yacc.c  */
#line 6107 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 696:

/* Line 1455 of yacc.c  */
#line 6112 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_STRING;
            Lex->charset=national_charset_info;
          }
    break;

  case 697:

/* Line 1455 of yacc.c  */
#line 6117 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_STRING;
            Lex->charset=national_charset_info;
          }
    break;

  case 698:

/* Line 1455 of yacc.c  */
#line 6123 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 699:

/* Line 1455 of yacc.c  */
#line 6128 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 700:

/* Line 1455 of yacc.c  */
#line 6134 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_TYPE_VARCHAR;
          }
    break;

  case 701:

/* Line 1455 of yacc.c  */
#line 6138 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_TYPE_VARCHAR;
            Lex->charset=national_charset_info;
          }
    break;

  case 702:

/* Line 1455 of yacc.c  */
#line 6143 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)= MYSQL_TYPE_VARCHAR;
          }
    break;

  case 703:

/* Line 1455 of yacc.c  */
#line 6148 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->length)
            {
              errno= 0;
              ulong length= strtoul(Lex->length, NULL, 10);
              if (errno == 0 && length <= MAX_FIELD_BLOBLENGTH && length != 4)
              {
                char buff[sizeof("YEAR()") + MY_INT64_NUM_DECIMAL_DIGITS + 1];
                my_snprintf(buff, sizeof(buff), "YEAR(%lu)", length);
                push_warning_printf(YYTHD, Sql_condition::WARN_LEVEL_NOTE,
                                    ER_WARN_DEPRECATED_SYNTAX,
                                    ER(ER_WARN_DEPRECATED_SYNTAX),
                                    buff, "YEAR(4)");
              }
            }
            (yyval.num)=MYSQL_TYPE_YEAR;
          }
    break;

  case 704:

/* Line 1455 of yacc.c  */
#line 6166 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DATE; }
    break;

  case 705:

/* Line 1455 of yacc.c  */
#line 6168 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_TIME; }
    break;

  case 706:

/* Line 1455 of yacc.c  */
#line 6170 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (YYTHD->variables.sql_mode & MODE_MAXDB)
              (yyval.num)=MYSQL_TYPE_DATETIME;
            else
            {
              /* 
                Unlike other types TIMESTAMP fields are NOT NULL by default.
              */
              Lex->type|= NOT_NULL_FLAG;
              (yyval.num)=MYSQL_TYPE_TIMESTAMP;
            }
          }
    break;

  case 707:

/* Line 1455 of yacc.c  */
#line 6183 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DATETIME; }
    break;

  case 708:

/* Line 1455 of yacc.c  */
#line 6185 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_TINY_BLOB;
          }
    break;

  case 709:

/* Line 1455 of yacc.c  */
#line 6190 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_BLOB;
          }
    break;

  case 710:

/* Line 1455 of yacc.c  */
#line 6195 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            Lex->charset=&my_charset_bin;
            Lex->uint_geom_type= (uint)(yyvsp[(1) - (1)].num);
            (yyval.num)=MYSQL_TYPE_GEOMETRY;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
    break;

  case 711:

/* Line 1455 of yacc.c  */
#line 6207 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB;
          }
    break;

  case 712:

/* Line 1455 of yacc.c  */
#line 6212 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_LONG_BLOB;
          }
    break;

  case 713:

/* Line 1455 of yacc.c  */
#line 6217 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB;
          }
    break;

  case 714:

/* Line 1455 of yacc.c  */
#line 6222 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB; }
    break;

  case 715:

/* Line 1455 of yacc.c  */
#line 6224 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_TINY_BLOB; }
    break;

  case 716:

/* Line 1455 of yacc.c  */
#line 6226 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_BLOB; }
    break;

  case 717:

/* Line 1455 of yacc.c  */
#line 6228 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB; }
    break;

  case 718:

/* Line 1455 of yacc.c  */
#line 6230 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_LONG_BLOB; }
    break;

  case 719:

/* Line 1455 of yacc.c  */
#line 6232 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_NEWDECIMAL;}
    break;

  case 720:

/* Line 1455 of yacc.c  */
#line 6234 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_NEWDECIMAL;}
    break;

  case 721:

/* Line 1455 of yacc.c  */
#line 6236 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_NEWDECIMAL;}
    break;

  case 722:

/* Line 1455 of yacc.c  */
#line 6238 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {Lex->interval_list.empty();}
    break;

  case 723:

/* Line 1455 of yacc.c  */
#line 6240 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_ENUM; }
    break;

  case 724:

/* Line 1455 of yacc.c  */
#line 6242 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->interval_list.empty();}
    break;

  case 725:

/* Line 1455 of yacc.c  */
#line 6244 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_SET; }
    break;

  case 726:

/* Line 1455 of yacc.c  */
#line 6246 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB; }
    break;

  case 727:

/* Line 1455 of yacc.c  */
#line 6248 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_LONGLONG;
            Lex->type|= (AUTO_INCREMENT_FLAG | NOT_NULL_FLAG | UNSIGNED_FLAG |
              UNIQUE_FLAG);
          }
    break;

  case 728:

/* Line 1455 of yacc.c  */
#line 6256 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_GEOMETRY; }
    break;

  case 729:

/* Line 1455 of yacc.c  */
#line 6257 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_GEOMETRYCOLLECTION; }
    break;

  case 730:

/* Line 1455 of yacc.c  */
#line 6259 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->length= (char*)"25";
            (yyval.num)= Field::GEOM_POINT;
          }
    break;

  case 731:

/* Line 1455 of yacc.c  */
#line 6263 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_MULTIPOINT; }
    break;

  case 732:

/* Line 1455 of yacc.c  */
#line 6264 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_LINESTRING; }
    break;

  case 733:

/* Line 1455 of yacc.c  */
#line 6265 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_MULTILINESTRING; }
    break;

  case 734:

/* Line 1455 of yacc.c  */
#line 6266 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_POLYGON; }
    break;

  case 735:

/* Line 1455 of yacc.c  */
#line 6267 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_MULTIPOLYGON; }
    break;

  case 736:

/* Line 1455 of yacc.c  */
#line 6271 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 737:

/* Line 1455 of yacc.c  */
#line 6275 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 738:

/* Line 1455 of yacc.c  */
#line 6276 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 739:

/* Line 1455 of yacc.c  */
#line 6280 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 740:

/* Line 1455 of yacc.c  */
#line 6281 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 741:

/* Line 1455 of yacc.c  */
#line 6285 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 742:

/* Line 1455 of yacc.c  */
#line 6286 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 743:

/* Line 1455 of yacc.c  */
#line 6287 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 744:

/* Line 1455 of yacc.c  */
#line 6288 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 745:

/* Line 1455 of yacc.c  */
#line 6289 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 746:

/* Line 1455 of yacc.c  */
#line 6293 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_LONG; }
    break;

  case 747:

/* Line 1455 of yacc.c  */
#line 6294 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_TINY; }
    break;

  case 748:

/* Line 1455 of yacc.c  */
#line 6295 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_SHORT; }
    break;

  case 749:

/* Line 1455 of yacc.c  */
#line 6296 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_INT24; }
    break;

  case 750:

/* Line 1455 of yacc.c  */
#line 6297 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_LONGLONG; }
    break;

  case 751:

/* Line 1455 of yacc.c  */
#line 6302 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= YYTHD->variables.sql_mode & MODE_REAL_AS_FLOAT ?
              MYSQL_TYPE_FLOAT : MYSQL_TYPE_DOUBLE;
          }
    break;

  case 752:

/* Line 1455 of yacc.c  */
#line 6307 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DOUBLE; }
    break;

  case 753:

/* Line 1455 of yacc.c  */
#line 6309 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DOUBLE; }
    break;

  case 754:

/* Line 1455 of yacc.c  */
#line 6314 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->dec=Lex->length= (char*)0; }
    break;

  case 755:

/* Line 1455 of yacc.c  */
#line 6316 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->dec= (char*)0; }
    break;

  case 756:

/* Line 1455 of yacc.c  */
#line 6318 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 757:

/* Line 1455 of yacc.c  */
#line 6323 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->length=(yyvsp[(2) - (5)].lex_str).str;
            lex->dec=(yyvsp[(4) - (5)].lex_str).str;
          }
    break;

  case 758:

/* Line 1455 of yacc.c  */
#line 6331 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 759:

/* Line 1455 of yacc.c  */
#line 6332 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 760:

/* Line 1455 of yacc.c  */
#line 6336 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 761:

/* Line 1455 of yacc.c  */
#line 6337 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 762:

/* Line 1455 of yacc.c  */
#line 6341 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 763:

/* Line 1455 of yacc.c  */
#line 6342 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= UNSIGNED_FLAG;}
    break;

  case 764:

/* Line 1455 of yacc.c  */
#line 6343 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= UNSIGNED_FLAG | ZEROFILL_FLAG; }
    break;

  case 765:

/* Line 1455 of yacc.c  */
#line 6347 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 766:

/* Line 1455 of yacc.c  */
#line 6348 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 767:

/* Line 1455 of yacc.c  */
#line 6349 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 768:

/* Line 1455 of yacc.c  */
#line 6350 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 769:

/* Line 1455 of yacc.c  */
#line 6353 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->length=(char*) 0; /* use default length */ }
    break;

  case 770:

/* Line 1455 of yacc.c  */
#line 6354 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { }
    break;

  case 771:

/* Line 1455 of yacc.c  */
#line 6358 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 772:

/* Line 1455 of yacc.c  */
#line 6359 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 773:

/* Line 1455 of yacc.c  */
#line 6363 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 774:

/* Line 1455 of yacc.c  */
#line 6364 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 775:

/* Line 1455 of yacc.c  */
#line 6368 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 777:

/* Line 1455 of yacc.c  */
#line 6373 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type&= ~ NOT_NULL_FLAG; }
    break;

  case 778:

/* Line 1455 of yacc.c  */
#line 6374 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= NOT_NULL_FLAG; }
    break;

  case 779:

/* Line 1455 of yacc.c  */
#line 6375 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->default_value=(yyvsp[(2) - (2)].item); }
    break;

  case 780:

/* Line 1455 of yacc.c  */
#line 6377 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_func_now_local((yyvsp[(4) - (4)].num));
            if (item == NULL)
              MYSQL_YYABORT;
            Lex->on_update_value= item;
          }
    break;

  case 781:

/* Line 1455 of yacc.c  */
#line 6383 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= AUTO_INCREMENT_FLAG | NOT_NULL_FLAG; }
    break;

  case 782:

/* Line 1455 of yacc.c  */
#line 6385 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            LEX *lex=Lex;
            lex->type|= AUTO_INCREMENT_FLAG | NOT_NULL_FLAG | UNIQUE_FLAG;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 783:

/* Line 1455 of yacc.c  */
#line 6391 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= PRI_KEY_FLAG | NOT_NULL_FLAG;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 784:

/* Line 1455 of yacc.c  */
#line 6397 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= UNIQUE_FLAG; 
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 785:

/* Line 1455 of yacc.c  */
#line 6403 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= UNIQUE_KEY_FLAG; 
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX; 
          }
    break;

  case 786:

/* Line 1455 of yacc.c  */
#line 6408 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 787:

/* Line 1455 of yacc.c  */
#line 6410 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->charset && !my_charset_same(Lex->charset,(yyvsp[(2) - (2)].charset)))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       (yyvsp[(2) - (2)].charset)->name,Lex->charset->csname);
              MYSQL_YYABORT;
            }
            else
            {
              Lex->charset=(yyvsp[(2) - (2)].charset);
            }
          }
    break;

  case 788:

/* Line 1455 of yacc.c  */
#line 6423 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            new (YYTHD->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), true, &Lex->option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 789:

/* Line 1455 of yacc.c  */
#line 6429 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            new (YYTHD->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), false, &Lex->option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 790:

/* Line 1455 of yacc.c  */
#line 6435 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            new (YYTHD->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].ulonglong_number), &Lex->option_list,
                                  &Lex->option_list_last, YYTHD->mem_root);
          }
    break;

  case 791:

/* Line 1455 of yacc.c  */
#line 6441 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            new (YYTHD->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), &Lex->option_list, &Lex->option_list_last);
          }
    break;

  case 792:

/* Line 1455 of yacc.c  */
#line 6450 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
          (yyval.num)= (yyvsp[(1) - (2)].num);

          if (Lex->charset) /* Lex->charset is scanned in "type" */
          {
            if (!(Lex->charset= merge_charset_and_collation(Lex->charset, (yyvsp[(2) - (2)].charset))))
              MYSQL_YYABORT;
          }
          else if ((yyvsp[(2) - (2)].charset))
          {
            my_error(ER_NOT_SUPPORTED_YET, MYF(0),
                     "COLLATE with no CHARACTER SET "
                     "in SP parameters, RETURNS, DECLARE");
            MYSQL_YYABORT;
          }
        }
    break;

  case 793:

/* Line 1455 of yacc.c  */
#line 6471 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_now_local((yyvsp[(2) - (2)].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 794:

/* Line 1455 of yacc.c  */
#line 6477 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 795:

/* Line 1455 of yacc.c  */
#line 6481 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 796:

/* Line 1455 of yacc.c  */
#line 6482 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 797:

/* Line 1455 of yacc.c  */
#line 6486 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 798:

/* Line 1455 of yacc.c  */
#line 6487 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 799:

/* Line 1455 of yacc.c  */
#line 6492 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!((yyval.charset)=get_charset_by_csname((yyvsp[(1) - (1)].lex_str).str,MY_CS_PRIMARY,MYF(0))))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 800:

/* Line 1455 of yacc.c  */
#line 6499 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.charset)= &my_charset_bin; }
    break;

  case 801:

/* Line 1455 of yacc.c  */
#line 6503 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset);   }
    break;

  case 802:

/* Line 1455 of yacc.c  */
#line 6504 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 803:

/* Line 1455 of yacc.c  */
#line 6508 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.charset)= NULL; }
    break;

  case 804:

/* Line 1455 of yacc.c  */
#line 6509 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.charset)= (yyvsp[(2) - (2)].charset); }
    break;

  case 805:

/* Line 1455 of yacc.c  */
#line 6514 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!((yyval.charset)=get_charset_by_csname((yyvsp[(1) - (1)].lex_str).str,MY_CS_PRIMARY,MYF(0))) &&
                !((yyval.charset)=get_old_charset_by_name((yyvsp[(1) - (1)].lex_str).str)))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 806:

/* Line 1455 of yacc.c  */
#line 6522 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.charset)= &my_charset_bin; }
    break;

  case 807:

/* Line 1455 of yacc.c  */
#line 6526 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset);   }
    break;

  case 808:

/* Line 1455 of yacc.c  */
#line 6527 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 809:

/* Line 1455 of yacc.c  */
#line 6532 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!((yyval.charset)=get_charset_by_name((yyvsp[(1) - (1)].lex_str).str,MYF(0))))
            {
              my_error(ER_UNKNOWN_COLLATION, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 810:

/* Line 1455 of yacc.c  */
#line 6542 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 811:

/* Line 1455 of yacc.c  */
#line 6543 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(2) - (2)].charset); }
    break;

  case 812:

/* Line 1455 of yacc.c  */
#line 6547 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset); }
    break;

  case 813:

/* Line 1455 of yacc.c  */
#line 6548 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 814:

/* Line 1455 of yacc.c  */
#line 6552 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 815:

/* Line 1455 of yacc.c  */
#line 6553 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 816:

/* Line 1455 of yacc.c  */
#line 6558 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->charset= &my_charset_latin1; }
    break;

  case 817:

/* Line 1455 of yacc.c  */
#line 6560 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->charset= &my_charset_latin1_bin;
          }
    break;

  case 818:

/* Line 1455 of yacc.c  */
#line 6564 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->charset= &my_charset_latin1_bin;
          }
    break;

  case 819:

/* Line 1455 of yacc.c  */
#line 6571 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!(Lex->charset=get_charset_by_csname("ucs2",
                                                     MY_CS_PRIMARY,MYF(0))))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), "ucs2");
              MYSQL_YYABORT;
            }
          }
    break;

  case 820:

/* Line 1455 of yacc.c  */
#line 6580 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!(Lex->charset=get_charset_by_name("ucs2_bin", MYF(0))))
            {
              my_error(ER_UNKNOWN_COLLATION, MYF(0), "ucs2_bin");
              MYSQL_YYABORT;
            }
          }
    break;

  case 821:

/* Line 1455 of yacc.c  */
#line 6588 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!(Lex->charset=get_charset_by_name("ucs2_bin", MYF(0))))
            {
              my_error(ER_UNKNOWN_COLLATION, MYF(0), "ucs2_bin");
              MYSQL_YYABORT;
            }
          }
    break;

  case 822:

/* Line 1455 of yacc.c  */
#line 6598 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->charset=NULL; }
    break;

  case 825:

/* Line 1455 of yacc.c  */
#line 6601 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->charset=&my_charset_bin; }
    break;

  case 826:

/* Line 1455 of yacc.c  */
#line 6602 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->charset=(yyvsp[(2) - (3)].charset); }
    break;

  case 827:

/* Line 1455 of yacc.c  */
#line 6604 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->charset= NULL;
            Lex->type|= BINCMP_FLAG;
          }
    break;

  case 828:

/* Line 1455 of yacc.c  */
#line 6609 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->charset= (yyvsp[(3) - (3)].charset);
            Lex->type|= BINCMP_FLAG;
          }
    break;

  case 829:

/* Line 1455 of yacc.c  */
#line 6616 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { }
    break;

  case 830:

/* Line 1455 of yacc.c  */
#line 6617 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= BINCMP_FLAG; }
    break;

  case 833:

/* Line 1455 of yacc.c  */
#line 6631 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.table)=(yyvsp[(2) - (5)].table);
          }
    break;

  case 834:

/* Line 1455 of yacc.c  */
#line 6638 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ref_list.empty(); }
    break;

  case 836:

/* Line 1455 of yacc.c  */
#line 6644 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Key_part_spec *key= new Key_part_spec((yyvsp[(3) - (3)].lex_str), 0);
            if (key == NULL)
              MYSQL_YYABORT;
            Lex->ref_list.push_back(key);
          }
    break;

  case 837:

/* Line 1455 of yacc.c  */
#line 6651 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Key_part_spec *key= new Key_part_spec((yyvsp[(1) - (1)].lex_str), 0);
            if (key == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->ref_list.empty();
            lex->ref_list.push_back(key);
          }
    break;

  case 838:

/* Line 1455 of yacc.c  */
#line 6663 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_UNDEF; }
    break;

  case 839:

/* Line 1455 of yacc.c  */
#line 6665 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_FULL; }
    break;

  case 840:

/* Line 1455 of yacc.c  */
#line 6667 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_PARTIAL; }
    break;

  case 841:

/* Line 1455 of yacc.c  */
#line 6669 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_SIMPLE; }
    break;

  case 842:

/* Line 1455 of yacc.c  */
#line 6674 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= Foreign_key::FK_OPTION_UNDEF;
            lex->fk_delete_opt= Foreign_key::FK_OPTION_UNDEF;
          }
    break;

  case 843:

/* Line 1455 of yacc.c  */
#line 6680 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= (yyvsp[(3) - (3)].m_fk_option);
            lex->fk_delete_opt= Foreign_key::FK_OPTION_UNDEF;
          }
    break;

  case 844:

/* Line 1455 of yacc.c  */
#line 6686 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= Foreign_key::FK_OPTION_UNDEF;
            lex->fk_delete_opt= (yyvsp[(3) - (3)].m_fk_option);
          }
    break;

  case 845:

/* Line 1455 of yacc.c  */
#line 6693 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= (yyvsp[(3) - (6)].m_fk_option);
            lex->fk_delete_opt= (yyvsp[(6) - (6)].m_fk_option);
          }
    break;

  case 846:

/* Line 1455 of yacc.c  */
#line 6700 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= (yyvsp[(6) - (6)].m_fk_option);
            lex->fk_delete_opt= (yyvsp[(3) - (6)].m_fk_option);
          }
    break;

  case 847:

/* Line 1455 of yacc.c  */
#line 6708 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_RESTRICT; }
    break;

  case 848:

/* Line 1455 of yacc.c  */
#line 6709 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_CASCADE; }
    break;

  case 849:

/* Line 1455 of yacc.c  */
#line 6710 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_SET_NULL; }
    break;

  case 850:

/* Line 1455 of yacc.c  */
#line 6711 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_NO_ACTION; }
    break;

  case 851:

/* Line 1455 of yacc.c  */
#line 6712 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_DEFAULT;  }
    break;

  case 852:

/* Line 1455 of yacc.c  */
#line 6716 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::MULTIPLE; }
    break;

  case 853:

/* Line 1455 of yacc.c  */
#line 6720 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::PRIMARY; }
    break;

  case 854:

/* Line 1455 of yacc.c  */
#line 6721 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::UNIQUE; }
    break;

  case 855:

/* Line 1455 of yacc.c  */
#line 6725 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 856:

/* Line 1455 of yacc.c  */
#line 6726 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 857:

/* Line 1455 of yacc.c  */
#line 6730 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 859:

/* Line 1455 of yacc.c  */
#line 6735 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 860:

/* Line 1455 of yacc.c  */
#line 6736 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 861:

/* Line 1455 of yacc.c  */
#line 6737 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 862:

/* Line 1455 of yacc.c  */
#line 6741 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::MULTIPLE; }
    break;

  case 863:

/* Line 1455 of yacc.c  */
#line 6742 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::UNIQUE; }
    break;

  case 864:

/* Line 1455 of yacc.c  */
#line 6746 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::FULLTEXT;}
    break;

  case 865:

/* Line 1455 of yacc.c  */
#line 6751 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            (yyval.key_type)= Key::SPATIAL;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
    break;

  case 866:

/* Line 1455 of yacc.c  */
#line 6763 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->key_create_info= default_key_create_info;
          }
    break;

  case 869:

/* Line 1455 of yacc.c  */
#line 6780 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 871:

/* Line 1455 of yacc.c  */
#line 6785 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 873:

/* Line 1455 of yacc.c  */
#line 6790 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 881:

/* Line 1455 of yacc.c  */
#line 6810 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->key_create_info.algorithm= (yyvsp[(2) - (2)].key_alg); }
    break;

  case 882:

/* Line 1455 of yacc.c  */
#line 6811 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->key_create_info.algorithm= (yyvsp[(2) - (2)].key_alg); }
    break;

  case 883:

/* Line 1455 of yacc.c  */
#line 6816 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->key_create_info.block_size= (yyvsp[(3) - (3)].ulong_num); }
    break;

  case 884:

/* Line 1455 of yacc.c  */
#line 6817 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->key_create_info.comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 885:

/* Line 1455 of yacc.c  */
#line 6819 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            new (YYTHD->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), true, &Lex->option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 886:

/* Line 1455 of yacc.c  */
#line 6825 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            new (YYTHD->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), false, &Lex->option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 887:

/* Line 1455 of yacc.c  */
#line 6831 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            new (YYTHD->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].ulonglong_number), &Lex->option_list,
                                  &Lex->option_list_last, YYTHD->mem_root);
          }
    break;

  case 888:

/* Line 1455 of yacc.c  */
#line 6837 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            new (YYTHD->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), &Lex->option_list, &Lex->option_list_last);
          }
    break;

  case 893:

/* Line 1455 of yacc.c  */
#line 6855 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (plugin_is_ready(&(yyvsp[(3) - (3)].lex_str), MYSQL_FTPARSER_PLUGIN))
              Lex->key_create_info.parser_name= (yyvsp[(3) - (3)].lex_str);
            else
            {
              my_error(ER_FUNCTION_NOT_DEFINED, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 894:

/* Line 1455 of yacc.c  */
#line 6867 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_BTREE; }
    break;

  case 895:

/* Line 1455 of yacc.c  */
#line 6868 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_RTREE; }
    break;

  case 896:

/* Line 1455 of yacc.c  */
#line 6869 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_HASH; }
    break;

  case 897:

/* Line 1455 of yacc.c  */
#line 6873 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->col_list.push_back((yyvsp[(3) - (4)].key_part)); }
    break;

  case 898:

/* Line 1455 of yacc.c  */
#line 6874 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->col_list.push_back((yyvsp[(1) - (2)].key_part)); }
    break;

  case 899:

/* Line 1455 of yacc.c  */
#line 6879 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.key_part)= new Key_part_spec((yyvsp[(1) - (1)].lex_str), 0);
            if ((yyval.key_part) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 900:

/* Line 1455 of yacc.c  */
#line 6885 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            int key_part_len= atoi((yyvsp[(3) - (4)].lex_str).str);
            if (!key_part_len)
            {
              my_error(ER_KEY_PART_0, MYF(0), (yyvsp[(1) - (4)].lex_str).str);
            }
            (yyval.key_part)= new Key_part_spec((yyvsp[(1) - (4)].lex_str), (uint) key_part_len);
            if ((yyval.key_part) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 901:

/* Line 1455 of yacc.c  */
#line 6898 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 902:

/* Line 1455 of yacc.c  */
#line 6899 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 903:

/* Line 1455 of yacc.c  */
#line 6904 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
          LEX *lex= Lex;
          if (lex->check_exists && lex->sql_command != SQLCOM_ALTER_TABLE)
          {
            my_parse_error(ER(ER_SYNTAX_ERROR));
            MYSQL_YYABORT;
          }
          (yyval.lex_str)= (yyvsp[(2) - (2)].lex_str);
        }
    break;

  case 904:

/* Line 1455 of yacc.c  */
#line 6915 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 905:

/* Line 1455 of yacc.c  */
#line 6916 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 906:

/* Line 1455 of yacc.c  */
#line 6920 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->interval_list.push_back((yyvsp[(1) - (1)].string)); }
    break;

  case 907:

/* Line 1455 of yacc.c  */
#line 6921 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->interval_list.push_back((yyvsp[(3) - (3)].string)); }
    break;

  case 908:

/* Line 1455 of yacc.c  */
#line 6929 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->name.str= 0;
            Lex->name.length= 0;
            Lex->sql_command= SQLCOM_ALTER_TABLE;
            Lex->duplicates= DUP_ERROR; 
            Lex->col_list.empty();
            Lex->select_lex.init_order();
            bzero(&Lex->create_info, sizeof(Lex->create_info));
            Lex->create_info.db_type= 0;
            Lex->create_info.default_table_charset= NULL;
            Lex->create_info.row_type= ROW_TYPE_NOT_USED;
            Lex->alter_info.reset();
            Lex->no_write_to_binlog= 0;
            Lex->create_info.storage_media= HA_SM_DEFAULT;
            DBUG_ASSERT(!Lex->m_sql_cmd);
          }
    break;

  case 909:

/* Line 1455 of yacc.c  */
#line 6946 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!Lex->select_lex.add_table_to_list(YYTHD, (yyvsp[(5) - (5)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_READ_NO_INSERT,
                                                   MDL_SHARED_UPGRADABLE))
              MYSQL_YYABORT;
            Lex->select_lex.db= (Lex->select_lex.table_list.first)->db;
            Lex->create_last_non_select_table= Lex->last_table();
          }
    break;

  case 910:

/* Line 1455 of yacc.c  */
#line 6956 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!Lex->m_sql_cmd)
            {
              /* Create a generic ALTER TABLE statment. */
              Lex->m_sql_cmd= new (YYTHD->mem_root) Sql_cmd_alter_table();
              if (Lex->m_sql_cmd == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 911:

/* Line 1455 of yacc.c  */
#line 6966 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.default_table_charset= NULL;
            Lex->create_info.used_fields= 0;
          }
    break;

  case 912:

/* Line 1455 of yacc.c  */
#line 6971 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_ALTER_DB;
            lex->name= (yyvsp[(3) - (5)].lex_str);
            if (lex->name.str == NULL &&
                lex->copy_db_to(&lex->name.str, &lex->name.length))
              MYSQL_YYABORT;
          }
    break;

  case 913:

/* Line 1455 of yacc.c  */
#line 6980 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "DATABASE");
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_ALTER_DB_UPGRADE;
            lex->name= (yyvsp[(3) - (7)].lex_str);
          }
    break;

  case 914:

/* Line 1455 of yacc.c  */
#line 6991 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }
            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
    break;

  case 915:

/* Line 1455 of yacc.c  */
#line 7002 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->sql_command= SQLCOM_ALTER_PROCEDURE;
            lex->spname= (yyvsp[(3) - (5)].spname);
          }
    break;

  case 916:

/* Line 1455 of yacc.c  */
#line 7009 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
    break;

  case 917:

/* Line 1455 of yacc.c  */
#line 7020 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->sql_command= SQLCOM_ALTER_FUNCTION;
            lex->spname= (yyvsp[(3) - (5)].spname);
          }
    break;

  case 918:

/* Line 1455 of yacc.c  */
#line 7027 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "ALTER VIEW");
              MYSQL_YYABORT;
            }
            lex->create_view_mode= VIEW_ALTER;
          }
    break;

  case 919:

/* Line 1455 of yacc.c  */
#line 7038 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 920:

/* Line 1455 of yacc.c  */
#line 7045 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "ALTER VIEW");
              MYSQL_YYABORT;
            }
            lex->create_view_algorithm= DTYPE_ALGORITHM_UNDEFINED;
            lex->create_view_mode= VIEW_ALTER;
          }
    break;

  case 921:

/* Line 1455 of yacc.c  */
#line 7057 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 922:

/* Line 1455 of yacc.c  */
#line 7059 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* 
              It is safe to use Lex->spname because
              ALTER EVENT xxx RENATE TO yyy DO ALTER EVENT RENAME TO
              is not allowed. Lex->spname is used in the case of RENAME TO
              If it had to be supported spname had to be added to
              Event_parse_data.
            */

            if (!(Lex->event_parse_data= Event_parse_data::new_instance(YYTHD)))
              MYSQL_YYABORT;
            Lex->event_parse_data->identifier= (yyvsp[(4) - (4)].spname);

            Lex->sql_command= SQLCOM_ALTER_EVENT;
          }
    break;

  case 923:

/* Line 1455 of yacc.c  */
#line 7079 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!((yyvsp[(6) - (10)].num) || (yyvsp[(7) - (10)].num) || (yyvsp[(8) - (10)].num) || (yyvsp[(9) - (10)].num) || (yyvsp[(10) - (10)].num)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            /*
              sql_command is set here because some rules in ev_sql_stmt
              can overwrite it
            */
            Lex->sql_command= SQLCOM_ALTER_EVENT;
          }
    break;

  case 924:

/* Line 1455 of yacc.c  */
#line 7092 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_TABLESPACE;
          }
    break;

  case 925:

/* Line 1455 of yacc.c  */
#line 7097 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_LOGFILE_GROUP;
          }
    break;

  case 926:

/* Line 1455 of yacc.c  */
#line 7102 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= CHANGE_FILE_TABLESPACE;
          }
    break;

  case 927:

/* Line 1455 of yacc.c  */
#line 7107 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_ACCESS_MODE_TABLESPACE;
          }
    break;

  case 928:

/* Line 1455 of yacc.c  */
#line 7112 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_ALTER_SERVER;
            lex->server_options.server_name= (yyvsp[(3) - (7)].lex_str).str;
            lex->server_options.server_name_length= (yyvsp[(3) - (7)].lex_str).length;
          }
    break;

  case 929:

/* Line 1455 of yacc.c  */
#line 7121 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 930:

/* Line 1455 of yacc.c  */
#line 7122 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 931:

/* Line 1455 of yacc.c  */
#line 7123 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 932:

/* Line 1455 of yacc.c  */
#line 7124 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 933:

/* Line 1455 of yacc.c  */
#line 7128 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 934:

/* Line 1455 of yacc.c  */
#line 7130 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              Use lex's spname to hold the new name.
              The original name is in the Event_parse_data object
            */
            Lex->spname= (yyvsp[(3) - (3)].spname); 
            (yyval.num)= 1;
          }
    break;

  case 935:

/* Line 1455 of yacc.c  */
#line 7141 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 936:

/* Line 1455 of yacc.c  */
#line 7142 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 937:

/* Line 1455 of yacc.c  */
#line 7146 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str).str= 0; (yyval.lex_str).length= 0; }
    break;

  case 938:

/* Line 1455 of yacc.c  */
#line 7147 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 940:

/* Line 1455 of yacc.c  */
#line 7153 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->m_sql_cmd= new (YYTHD->mem_root)
              Sql_cmd_discard_import_tablespace(
                Sql_cmd_discard_import_tablespace::DISCARD_TABLESPACE);
            if (Lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 941:

/* Line 1455 of yacc.c  */
#line 7161 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->m_sql_cmd= new (YYTHD->mem_root)
              Sql_cmd_discard_import_tablespace(
                Sql_cmd_discard_import_tablespace::IMPORT_TABLESPACE);
            if (Lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 947:

/* Line 1455 of yacc.c  */
#line 7183 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_DROP_PARTITION;
          }
    break;

  case 948:

/* Line 1455 of yacc.c  */
#line 7188 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_info.flags|= Alter_info::ALTER_REBUILD_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
          }
    break;

  case 949:

/* Line 1455 of yacc.c  */
#line 7195 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_optimize_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 951:

/* Line 1455 of yacc.c  */
#line 7209 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_analyze_partition();
            if (lex->m_sql_cmd == NULL)
               MYSQL_YYABORT;
          }
    break;

  case 952:

/* Line 1455 of yacc.c  */
#line 7221 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_check_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 954:

/* Line 1455 of yacc.c  */
#line 7234 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_repair_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 956:

/* Line 1455 of yacc.c  */
#line 7247 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_info.flags|= Alter_info::ALTER_COALESCE_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->alter_info.num_parts= (yyvsp[(4) - (4)].ulong_num);
          }
    break;

  case 957:

/* Line 1455 of yacc.c  */
#line 7254 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_truncate_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 959:

/* Line 1455 of yacc.c  */
#line 7267 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            size_t dummy;
            lex->select_lex.db=(yyvsp[(6) - (7)].table)->db.str;
            if (lex->select_lex.db == NULL &&
                lex->copy_db_to(&lex->select_lex.db, &dummy))
            {
              MYSQL_YYABORT;
            }
            lex->name= (yyvsp[(6) - (7)].table)->table;
            lex->alter_info.flags|= Alter_info::ALTER_EXCHANGE_PARTITION;
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(6) - (7)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_READ_NO_INSERT,
                                                   MDL_SHARED_NO_WRITE))
              MYSQL_YYABORT;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                               Sql_cmd_alter_table_exchange_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 960:

/* Line 1455 of yacc.c  */
#line 7294 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_REMOVE_PARTITIONING;
          }
    break;

  case 961:

/* Line 1455 of yacc.c  */
#line 7301 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_ALL_PARTITION;
          }
    break;

  case 963:

/* Line 1455 of yacc.c  */
#line 7309 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info= new partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            lex->alter_info.flags|= Alter_info::ALTER_ADD_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(4) - (4)].num);
          }
    break;

  case 964:

/* Line 1455 of yacc.c  */
#line 7321 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 966:

/* Line 1455 of yacc.c  */
#line 7327 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info->num_parts= lex->part_info->partitions.elements;
          }
    break;

  case 967:

/* Line 1455 of yacc.c  */
#line 7332 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->part_info->num_parts= (yyvsp[(2) - (2)].ulong_num);
          }
    break;

  case 968:

/* Line 1455 of yacc.c  */
#line 7339 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info= new partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            lex->no_write_to_binlog= (yyvsp[(3) - (3)].num);
          }
    break;

  case 970:

/* Line 1455 of yacc.c  */
#line 7354 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_TABLE_REORG;
          }
    break;

  case 971:

/* Line 1455 of yacc.c  */
#line 7358 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_REORGANIZE_PARTITION;
          }
    break;

  case 972:

/* Line 1455 of yacc.c  */
#line 7362 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->num_parts= part_info->partitions.elements;
          }
    break;

  case 973:

/* Line 1455 of yacc.c  */
#line 7369 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 974:

/* Line 1455 of yacc.c  */
#line 7370 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 975:

/* Line 1455 of yacc.c  */
#line 7375 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->alter_info.partition_names.push_back((yyvsp[(1) - (1)].lex_str).str))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
          }
    break;

  case 978:

/* Line 1455 of yacc.c  */
#line 7395 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->change=0;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_COLUMN;
          }
    break;

  case 979:

/* Line 1455 of yacc.c  */
#line 7404 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
          }
    break;

  case 980:

/* Line 1455 of yacc.c  */
#line 7408 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
            Lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 981:

/* Line 1455 of yacc.c  */
#line 7413 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_ADD_COLUMN |
                                    Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 982:

/* Line 1455 of yacc.c  */
#line 7418 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->change= (yyvsp[(4) - (4)].lex_str).str;
            lex->alter_info.flags|= Alter_info::ALTER_CHANGE_COLUMN;
            lex->option_list= NULL;
          }
    break;

  case 983:

/* Line 1455 of yacc.c  */
#line 7425 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
          }
    break;

  case 984:

/* Line 1455 of yacc.c  */
#line 7429 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->length=lex->dec=0; lex->type=0;
            lex->default_value= lex->on_update_value= 0;
            lex->comment=null_lex_str;
            lex->charset= NULL;
            lex->alter_info.flags|= Alter_info::ALTER_CHANGE_COLUMN;
	    lex->vcol_info= 0;
            lex->option_list= NULL;
          }
    break;

  case 985:

/* Line 1455 of yacc.c  */
#line 7440 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (add_field_to_list(lex->thd,&(yyvsp[(4) - (6)].lex_str),
                                  (enum enum_field_types) (yyvsp[(6) - (6)].num),
                                  lex->length,lex->dec,lex->type,
                                  lex->default_value, lex->on_update_value,
                                  &lex->comment,
                                  (yyvsp[(4) - (6)].lex_str).str, &lex->interval_list, lex->charset,
                                  lex->uint_geom_type,
                                  lex->vcol_info, lex->option_list))
              MYSQL_YYABORT;
          }
    break;

  case 986:

/* Line 1455 of yacc.c  */
#line 7453 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
          }
    break;

  case 987:

/* Line 1455 of yacc.c  */
#line 7457 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::COLUMN, (yyvsp[(4) - (5)].lex_str).str, (yyvsp[(3) - (5)].num));
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= Alter_info::ALTER_DROP_COLUMN;
          }
    break;

  case 988:

/* Line 1455 of yacc.c  */
#line 7466 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::FOREIGN_KEY, (yyvsp[(5) - (5)].lex_str).str, (yyvsp[(4) - (5)].num));
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= Alter_info::DROP_FOREIGN_KEY;
          }
    break;

  case 989:

/* Line 1455 of yacc.c  */
#line 7475 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, primary_key_name,
                                           FALSE);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= Alter_info::ALTER_DROP_INDEX;
          }
    break;

  case 990:

/* Line 1455 of yacc.c  */
#line 7485 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, (yyvsp[(4) - (4)].lex_str).str, (yyvsp[(3) - (4)].num));
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= Alter_info::ALTER_DROP_INDEX;
          }
    break;

  case 991:

/* Line 1455 of yacc.c  */
#line 7494 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.keys_onoff= Alter_info::DISABLE;
            lex->alter_info.flags|= Alter_info::ALTER_KEYS_ONOFF;
          }
    break;

  case 992:

/* Line 1455 of yacc.c  */
#line 7500 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.keys_onoff= Alter_info::ENABLE;
            lex->alter_info.flags|= Alter_info::ALTER_KEYS_ONOFF;
          }
    break;

  case 993:

/* Line 1455 of yacc.c  */
#line 7506 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_column *ac= new Alter_column((yyvsp[(3) - (6)].lex_str).str,(yyvsp[(6) - (6)].item));
            if (ac == NULL)
              MYSQL_YYABORT;
            lex->alter_info.alter_list.push_back(ac);
            lex->alter_info.flags|= Alter_info::ALTER_CHANGE_COLUMN_DEFAULT;
          }
    break;

  case 994:

/* Line 1455 of yacc.c  */
#line 7515 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_column *ac= new Alter_column((yyvsp[(3) - (5)].lex_str).str, (Item*) 0);
            if (ac == NULL)
              MYSQL_YYABORT;
            lex->alter_info.alter_list.push_back(ac);
            lex->alter_info.flags|= Alter_info::ALTER_CHANGE_COLUMN_DEFAULT;
          }
    break;

  case 995:

/* Line 1455 of yacc.c  */
#line 7524 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            size_t dummy;
            lex->select_lex.db=(yyvsp[(3) - (3)].table)->db.str;
            if (lex->select_lex.db == NULL &&
                lex->copy_db_to(&lex->select_lex.db, &dummy))
            {
              MYSQL_YYABORT;
            }
            if (check_table_name((yyvsp[(3) - (3)].table)->table.str,(yyvsp[(3) - (3)].table)->table.length, FALSE) ||
                ((yyvsp[(3) - (3)].table)->db.str && check_db_name(&(yyvsp[(3) - (3)].table)->db)))
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(3) - (3)].table)->table.str);
              MYSQL_YYABORT;
            }
            lex->name= (yyvsp[(3) - (3)].table)->table;
            lex->alter_info.flags|= Alter_info::ALTER_RENAME;
          }
    break;

  case 996:

/* Line 1455 of yacc.c  */
#line 7543 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!(yyvsp[(4) - (5)].charset))
            {
              THD *thd= YYTHD;
              (yyvsp[(4) - (5)].charset)= thd->variables.collation_database;
            }
            (yyvsp[(5) - (5)].charset)= (yyvsp[(5) - (5)].charset) ? (yyvsp[(5) - (5)].charset) : (yyvsp[(4) - (5)].charset);
            if (!my_charset_same((yyvsp[(4) - (5)].charset),(yyvsp[(5) - (5)].charset)))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       (yyvsp[(5) - (5)].charset)->name, (yyvsp[(4) - (5)].charset)->csname);
              MYSQL_YYABORT;
            }
            LEX *lex= Lex;
            lex->create_info.table_charset=
            lex->create_info.default_table_charset= (yyvsp[(5) - (5)].charset);
            lex->create_info.used_fields|= (HA_CREATE_USED_CHARSET |
              HA_CREATE_USED_DEFAULT_CHARSET);
            lex->alter_info.flags|= Alter_info::ALTER_CONVERT;
          }
    break;

  case 997:

/* Line 1455 of yacc.c  */
#line 7564 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.flags|= Alter_info::ALTER_OPTIONS;
            if ((lex->create_info.used_fields & HA_CREATE_USED_ENGINE) &&
                !lex->create_info.db_type)
            {
              lex->create_info.used_fields&= ~HA_CREATE_USED_ENGINE;
            }
          }
    break;

  case 998:

/* Line 1455 of yacc.c  */
#line 7574 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_RECREATE;
          }
    break;

  case 999:

/* Line 1455 of yacc.c  */
#line 7578 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.flags|= Alter_info::ALTER_ORDER;
          }
    break;

  case 1007:

/* Line 1455 of yacc.c  */
#line 7595 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->alter_info.requested_algorithm=
              Alter_info::ALTER_TABLE_ALGORITHM_DEFAULT;
          }
    break;

  case 1008:

/* Line 1455 of yacc.c  */
#line 7600 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->alter_info.set_requested_algorithm(&(yyvsp[(3) - (3)].lex_str)))
            {
              my_error(ER_UNKNOWN_ALTER_ALGORITHM, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 1009:

/* Line 1455 of yacc.c  */
#line 7611 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->alter_info.requested_lock=
              Alter_info::ALTER_TABLE_LOCK_DEFAULT;
          }
    break;

  case 1010:

/* Line 1455 of yacc.c  */
#line 7616 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->alter_info.set_requested_lock(&(yyvsp[(3) - (3)].lex_str)))
            {
              my_error(ER_UNKNOWN_ALTER_LOCK, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 1011:

/* Line 1455 of yacc.c  */
#line 7626 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1012:

/* Line 1455 of yacc.c  */
#line 7627 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1013:

/* Line 1455 of yacc.c  */
#line 7631 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ignore= 0;}
    break;

  case 1014:

/* Line 1455 of yacc.c  */
#line 7632 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ignore= 1;}
    break;

  case 1015:

/* Line 1455 of yacc.c  */
#line 7636 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ignore= 0;}
    break;

  case 1021:

/* Line 1455 of yacc.c  */
#line 7650 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ignore= 1;}
    break;

  case 1022:

/* Line 1455 of yacc.c  */
#line 7652 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->alter_info.requested_algorithm=
              Alter_info::ALTER_TABLE_ALGORITHM_INPLACE;
          }
    break;

  case 1023:

/* Line 1455 of yacc.c  */
#line 7659 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->drop_mode= DROP_DEFAULT; }
    break;

  case 1024:

/* Line 1455 of yacc.c  */
#line 7660 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->drop_mode= DROP_RESTRICT; }
    break;

  case 1025:

/* Line 1455 of yacc.c  */
#line 7661 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->drop_mode= DROP_CASCADE; }
    break;

  case 1026:

/* Line 1455 of yacc.c  */
#line 7665 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1027:

/* Line 1455 of yacc.c  */
#line 7667 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            store_position_for_column((yyvsp[(2) - (2)].lex_str).str);
            Lex->alter_info.flags |= Alter_info::ALTER_COLUMN_ORDER;
          }
    break;

  case 1028:

/* Line 1455 of yacc.c  */
#line 7672 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            store_position_for_column(first_keyword);
            Lex->alter_info.flags |= Alter_info::ALTER_COLUMN_ORDER;
          }
    break;

  case 1029:

/* Line 1455 of yacc.c  */
#line 7679 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1030:

/* Line 1455 of yacc.c  */
#line 7680 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1031:

/* Line 1455 of yacc.c  */
#line 7681 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1032:

/* Line 1455 of yacc.c  */
#line 7682 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1033:

/* Line 1455 of yacc.c  */
#line 7687 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_START;
            lex->type = 0;
            /* If you change this code don't forget to update SLAVE START too */
          }
    break;

  case 1034:

/* Line 1455 of yacc.c  */
#line 7694 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1035:

/* Line 1455 of yacc.c  */
#line 7696 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_ALL_START;
            lex->type = 0;
          }
    break;

  case 1036:

/* Line 1455 of yacc.c  */
#line 7701 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1037:

/* Line 1455 of yacc.c  */
#line 7703 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_STOP;
            lex->type = 0;
            /* If you change this code don't forget to update SLAVE STOP too */
          }
    break;

  case 1038:

/* Line 1455 of yacc.c  */
#line 7710 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_ALL_STOP;
            lex->type = 0;
            /* If you change this code don't forget to update SLAVE STOP too */
          }
    break;

  case 1039:

/* Line 1455 of yacc.c  */
#line 7720 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_BEGIN;
            /* READ ONLY and READ WRITE are mutually exclusive. */
            if (((yyvsp[(3) - (3)].num) & MYSQL_START_TRANS_OPT_READ_WRITE) &&
                ((yyvsp[(3) - (3)].num) & MYSQL_START_TRANS_OPT_READ_ONLY))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->start_transaction_opt= (yyvsp[(3) - (3)].num);
          }
    break;

  case 1040:

/* Line 1455 of yacc.c  */
#line 7736 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= 0;
          }
    break;

  case 1041:

/* Line 1455 of yacc.c  */
#line 7740 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= (yyvsp[(1) - (1)].num);
          }
    break;

  case 1042:

/* Line 1455 of yacc.c  */
#line 7747 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= (yyvsp[(1) - (1)].num);
          }
    break;

  case 1043:

/* Line 1455 of yacc.c  */
#line 7751 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= (yyvsp[(1) - (3)].num) | (yyvsp[(3) - (3)].num);
          }
    break;

  case 1044:

/* Line 1455 of yacc.c  */
#line 7758 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_START_TRANS_OPT_WITH_CONS_SNAPSHOT;
          }
    break;

  case 1045:

/* Line 1455 of yacc.c  */
#line 7762 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_START_TRANS_OPT_READ_ONLY;
          }
    break;

  case 1046:

/* Line 1455 of yacc.c  */
#line 7766 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_START_TRANS_OPT_READ_WRITE;
          }
    break;

  case 1047:

/* Line 1455 of yacc.c  */
#line 7772 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->slave_thd_opt= 0; }
    break;

  case 1048:

/* Line 1455 of yacc.c  */
#line 7774 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1051:

/* Line 1455 of yacc.c  */
#line 7783 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1052:

/* Line 1455 of yacc.c  */
#line 7784 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->slave_thd_opt|=SLAVE_SQL; }
    break;

  case 1053:

/* Line 1455 of yacc.c  */
#line 7785 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->slave_thd_opt|=SLAVE_IO; }
    break;

  case 1054:

/* Line 1455 of yacc.c  */
#line 7789 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1055:

/* Line 1455 of yacc.c  */
#line 7791 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (((lex->mi.log_file_name || lex->mi.pos) &&
                 (lex->mi.relay_log_name || lex->mi.relay_log_pos)) ||
                !((lex->mi.log_file_name && lex->mi.pos) ||
                  (lex->mi.relay_log_name && lex->mi.relay_log_pos)))
            {
               my_message(ER_BAD_SLAVE_UNTIL_COND,
                          ER(ER_BAD_SLAVE_UNTIL_COND), MYF(0));
               MYSQL_YYABORT;
            }
          }
    break;

  case 1056:

/* Line 1455 of yacc.c  */
#line 7804 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.gtid_pos_str = (yyvsp[(4) - (4)].lex_str);
          }
    break;

  case 1059:

/* Line 1455 of yacc.c  */
#line 7816 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_CHECKSUM;
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1060:

/* Line 1455 of yacc.c  */
#line 7823 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1061:

/* Line 1455 of yacc.c  */
#line 7827 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.flags= 0; }
    break;

  case 1062:

/* Line 1455 of yacc.c  */
#line 7828 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.flags= T_QUICK; }
    break;

  case 1063:

/* Line 1455 of yacc.c  */
#line 7829 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.flags= T_EXTEND; }
    break;

  case 1064:

/* Line 1455 of yacc.c  */
#line 7834 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_REPAIR;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1065:

/* Line 1455 of yacc.c  */
#line 7844 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_repair_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1066:

/* Line 1455 of yacc.c  */
#line 7855 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.flags = T_MEDIUM; }
    break;

  case 1067:

/* Line 1455 of yacc.c  */
#line 7856 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1068:

/* Line 1455 of yacc.c  */
#line 7860 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1069:

/* Line 1455 of yacc.c  */
#line 7861 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1070:

/* Line 1455 of yacc.c  */
#line 7865 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_QUICK; }
    break;

  case 1071:

/* Line 1455 of yacc.c  */
#line 7866 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_EXTEND; }
    break;

  case 1072:

/* Line 1455 of yacc.c  */
#line 7867 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.sql_flags|= TT_USEFRM; }
    break;

  case 1073:

/* Line 1455 of yacc.c  */
#line 7872 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_ANALYZE;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1074:

/* Line 1455 of yacc.c  */
#line 7882 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_analyze_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1078:

/* Line 1455 of yacc.c  */
#line 7903 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1079:

/* Line 1455 of yacc.c  */
#line 7905 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            THD *thd= YYTHD;
            thd->lex->with_persistent_for_clause= TRUE;
          }
    break;

  case 1080:

/* Line 1455 of yacc.c  */
#line 7913 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1081:

/* Line 1455 of yacc.c  */
#line 7915 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1082:

/* Line 1455 of yacc.c  */
#line 7918 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1083:

/* Line 1455 of yacc.c  */
#line 7920 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            lex->column_list= new List<LEX_STRING>;
            if (lex->column_list == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1085:

/* Line 1455 of yacc.c  */
#line 7932 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1086:

/* Line 1455 of yacc.c  */
#line 7934 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            lex->index_list= new List<LEX_STRING>;
            if (lex->index_list == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1088:

/* Line 1455 of yacc.c  */
#line 7947 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1089:

/* Line 1455 of yacc.c  */
#line 7949 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->column_list->push_back((LEX_STRING*)
            sql_memdup(&(yyvsp[(1) - (1)].lex_str), sizeof(LEX_STRING)));
          }
    break;

  case 1090:

/* Line 1455 of yacc.c  */
#line 7954 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->column_list->push_back((LEX_STRING*)
            sql_memdup(&(yyvsp[(3) - (3)].lex_str), sizeof(LEX_STRING)));
          }
    break;

  case 1091:

/* Line 1455 of yacc.c  */
#line 7962 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1094:

/* Line 1455 of yacc.c  */
#line 7969 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->index_list->push_back(
              (LEX_STRING*) sql_memdup(&(yyvsp[(1) - (1)].lex_str), sizeof(LEX_STRING)));
          }
    break;

  case 1095:

/* Line 1455 of yacc.c  */
#line 7975 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX_STRING str= {(char*) "PRIMARY", 7};
            Lex->index_list->push_back(
              (LEX_STRING*) sql_memdup(&str, sizeof(LEX_STRING)));
          }
    break;

  case 1096:

/* Line 1455 of yacc.c  */
#line 7984 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_BINLOG_BASE64_EVENT;
            Lex->comment= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 1097:

/* Line 1455 of yacc.c  */
#line 7992 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "CHECK");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_CHECK;
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1098:

/* Line 1455 of yacc.c  */
#line 8007 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_check_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1099:

/* Line 1455 of yacc.c  */
#line 8018 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.flags = T_MEDIUM; }
    break;

  case 1100:

/* Line 1455 of yacc.c  */
#line 8019 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1101:

/* Line 1455 of yacc.c  */
#line 8023 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1102:

/* Line 1455 of yacc.c  */
#line 8024 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1103:

/* Line 1455 of yacc.c  */
#line 8028 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_QUICK; }
    break;

  case 1104:

/* Line 1455 of yacc.c  */
#line 8029 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_FAST; }
    break;

  case 1105:

/* Line 1455 of yacc.c  */
#line 8030 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_MEDIUM; }
    break;

  case 1106:

/* Line 1455 of yacc.c  */
#line 8031 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_EXTEND; }
    break;

  case 1107:

/* Line 1455 of yacc.c  */
#line 8032 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_CHECK_ONLY_CHANGED; }
    break;

  case 1108:

/* Line 1455 of yacc.c  */
#line 8033 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.sql_flags|= TT_FOR_UPGRADE; }
    break;

  case 1109:

/* Line 1455 of yacc.c  */
#line 8038 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_OPTIMIZE;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1110:

/* Line 1455 of yacc.c  */
#line 8048 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_optimize_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1111:

/* Line 1455 of yacc.c  */
#line 8059 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1112:

/* Line 1455 of yacc.c  */
#line 8060 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1113:

/* Line 1455 of yacc.c  */
#line 8061 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1114:

/* Line 1455 of yacc.c  */
#line 8066 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_RENAME_TABLE;
          }
    break;

  case 1115:

/* Line 1455 of yacc.c  */
#line 8070 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1116:

/* Line 1455 of yacc.c  */
#line 8072 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_RENAME_USER;
          }
    break;

  case 1117:

/* Line 1455 of yacc.c  */
#line 8079 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (3)].lex_user)) || Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 1118:

/* Line 1455 of yacc.c  */
#line 8084 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (5)].lex_user)) || Lex->users_list.push_back((yyvsp[(5) - (5)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 1121:

/* Line 1455 of yacc.c  */
#line 8097 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            SELECT_LEX *sl= lex->current_select;
            if (!sl->add_table_to_list(lex->thd, (yyvsp[(1) - (3)].table),NULL,TL_OPTION_UPDATING,
                                       TL_IGNORE, MDL_EXCLUSIVE) ||
                !sl->add_table_to_list(lex->thd, (yyvsp[(3) - (3)].table),NULL,TL_OPTION_UPDATING,
                                       TL_IGNORE, MDL_EXCLUSIVE))
              MYSQL_YYABORT;
          }
    break;

  case 1122:

/* Line 1455 of yacc.c  */
#line 8110 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->alter_info.reset();
          }
    break;

  case 1123:

/* Line 1455 of yacc.c  */
#line 8114 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ASSIGN_TO_KEYCACHE;
            lex->ident= (yyvsp[(6) - (6)].lex_str);
          }
    break;

  case 1128:

/* Line 1455 of yacc.c  */
#line 8133 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (2)].table), NULL, 0, TL_READ,
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1129:

/* Line 1455 of yacc.c  */
#line 8143 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (3)].table), NULL, 0, TL_READ, 
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1130:

/* Line 1455 of yacc.c  */
#line 8152 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 1131:

/* Line 1455 of yacc.c  */
#line 8153 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str) = default_key_cache_base; }
    break;

  case 1132:

/* Line 1455 of yacc.c  */
#line 8158 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_PRELOAD_KEYS;
            lex->alter_info.reset();
          }
    break;

  case 1133:

/* Line 1455 of yacc.c  */
#line 8164 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1138:

/* Line 1455 of yacc.c  */
#line 8179 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (3)].table), NULL, (yyvsp[(3) - (3)].num), TL_READ,
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1139:

/* Line 1455 of yacc.c  */
#line 8189 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (4)].table), NULL, (yyvsp[(4) - (4)].num), TL_READ,
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1140:

/* Line 1455 of yacc.c  */
#line 8199 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_ADMIN_PARTITION;
          }
    break;

  case 1142:

/* Line 1455 of yacc.c  */
#line 8206 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->select_lex.alloc_index_hints(YYTHD);
            Select->set_index_hint_type(INDEX_HINT_USE, 
                                        INDEX_HINT_MASK_ALL);
          }
    break;

  case 1144:

/* Line 1455 of yacc.c  */
#line 8215 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { }
    break;

  case 1146:

/* Line 1455 of yacc.c  */
#line 8221 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1147:

/* Line 1455 of yacc.c  */
#line 8222 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= TL_OPTION_IGNORE_LEAVES; }
    break;

  case 1148:

/* Line 1455 of yacc.c  */
#line 8232 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SELECT;
          }
    break;

  case 1151:

/* Line 1455 of yacc.c  */
#line 8246 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (setup_select_in_parentheses(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1153:

/* Line 1455 of yacc.c  */
#line 8256 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (setup_select_in_parentheses(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1155:

/* Line 1455 of yacc.c  */
#line 8265 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX * sel= lex->current_select;
            if (lex->current_select->set_braces(0))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (sel->linkage == UNION_TYPE &&
                sel->master_unit()->first_select()->braces)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1157:

/* Line 1455 of yacc.c  */
#line 8284 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->linkage != UNION_TYPE)
              mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 1158:

/* Line 1455 of yacc.c  */
#line 8292 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1160:

/* Line 1455 of yacc.c  */
#line 8299 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1165:

/* Line 1455 of yacc.c  */
#line 8309 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->context.table_list=
              Select->context.first_name_resolution_table=
                Select->table_list.first;
          }
    break;

  case 1168:

/* Line 1455 of yacc.c  */
#line 8324 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Select->options & SELECT_DISTINCT && Select->options & SELECT_ALL)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "ALL", "DISTINCT");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1172:

/* Line 1455 of yacc.c  */
#line 8341 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* 
              Allow this flag only on the first top-level SELECT statement, if
              SQL_CACHE wasn't specified, and only once per query.
             */
            if (Lex->current_select != &Lex->select_lex)
            {
              my_error(ER_CANT_USE_OPTION_HERE, MYF(0), "SQL_NO_CACHE");
              MYSQL_YYABORT;
            }
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_CACHE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "SQL_CACHE", "SQL_NO_CACHE");
              MYSQL_YYABORT;
            }
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_NO_CACHE)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "SQL_NO_CACHE");
              MYSQL_YYABORT;
            }
            else
            {
              Lex->safe_to_cache_query=0;
              Lex->select_lex.options&= ~OPTION_TO_QUERY_CACHE;
              Lex->select_lex.sql_cache= SELECT_LEX::SQL_NO_CACHE;
            }
          }
    break;

  case 1173:

/* Line 1455 of yacc.c  */
#line 8369 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* 
              Allow this flag only on the first top-level SELECT statement, if
              SQL_NO_CACHE wasn't specified, and only once per query.
             */
            if (Lex->current_select != &Lex->select_lex)
            {
              my_error(ER_CANT_USE_OPTION_HERE, MYF(0), "SQL_CACHE");
              MYSQL_YYABORT;
            }         
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_NO_CACHE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "SQL_NO_CACHE", "SQL_CACHE");
              MYSQL_YYABORT;
            }
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_CACHE)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "SQL_CACHE");
              MYSQL_YYABORT;
            }
            else
            {
              Lex->safe_to_cache_query=1;
              Lex->select_lex.options|= OPTION_TO_QUERY_CACHE;
              Lex->select_lex.sql_cache= SELECT_LEX::SQL_CACHE;
            }
          }
    break;

  case 1175:

/* Line 1455 of yacc.c  */
#line 8401 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->current_select->set_lock_for_tables(TL_WRITE);
            lex->safe_to_cache_query=0;
          }
    break;

  case 1176:

/* Line 1455 of yacc.c  */
#line 8407 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->current_select->
              set_lock_for_tables(TL_READ_WITH_SHARED_LOCKS);
            lex->safe_to_cache_query=0;
          }
    break;

  case 1179:

/* Line 1455 of yacc.c  */
#line 8419 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *item= new (thd->mem_root)
                          Item_field(&thd->lex->current_select->context,
                                     NULL, NULL, "*");
            if (item == NULL)
              MYSQL_YYABORT;
            if (add_item_to_list(thd, item))
              MYSQL_YYABORT;
            (thd->lex->current_select->with_wild)++;
          }
    break;

  case 1180:

/* Line 1455 of yacc.c  */
#line 8434 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (add_item_to_list(thd, (yyvsp[(2) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1181:

/* Line 1455 of yacc.c  */
#line 8441 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            DBUG_ASSERT((yyvsp[(1) - (4)].simple_string) < (yyvsp[(3) - (4)].simple_string));

            if (add_item_to_list(thd, (yyvsp[(2) - (4)].item)))
              MYSQL_YYABORT;
            if ((yyvsp[(4) - (4)].lex_str).str)
            {
              if (Lex->sql_command == SQLCOM_CREATE_VIEW &&
                  check_column_name((yyvsp[(4) - (4)].lex_str).str))
              {
                my_error(ER_WRONG_COLUMN_NAME, MYF(0), (yyvsp[(4) - (4)].lex_str).str);
                MYSQL_YYABORT;
              }
              (yyvsp[(2) - (4)].item)->is_autogenerated_name= FALSE;
              (yyvsp[(2) - (4)].item)->set_name((yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length, system_charset_info);
            }
            else if (!(yyvsp[(2) - (4)].item)->name)
            {
              (yyvsp[(2) - (4)].item)->set_name((yyvsp[(1) - (4)].simple_string), (uint) ((yyvsp[(3) - (4)].simple_string) - (yyvsp[(1) - (4)].simple_string)), thd->charset());
            }
          }
    break;

  case 1182:

/* Line 1455 of yacc.c  */
#line 8466 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.simple_string)= (char*) YYLIP->get_cpp_tok_start();
          }
    break;

  case 1183:

/* Line 1455 of yacc.c  */
#line 8472 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.simple_string)= (char*) YYLIP->get_cpp_tok_end();
          }
    break;

  case 1184:

/* Line 1455 of yacc.c  */
#line 8478 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)=null_lex_str;}
    break;

  case 1185:

/* Line 1455 of yacc.c  */
#line 8479 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str); }
    break;

  case 1186:

/* Line 1455 of yacc.c  */
#line 8480 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str); }
    break;

  case 1187:

/* Line 1455 of yacc.c  */
#line 8481 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1188:

/* Line 1455 of yacc.c  */
#line 8482 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1189:

/* Line 1455 of yacc.c  */
#line 8486 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= NOT_FIXED_DEC;  }
    break;

  case 1190:

/* Line 1455 of yacc.c  */
#line 8487 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= NOT_FIXED_DEC;  }
    break;

  case 1191:

/* Line 1455 of yacc.c  */
#line 8488 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(2) - (3)].ulong_num); }
    break;

  case 1192:

/* Line 1455 of yacc.c  */
#line 8492 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0;  }
    break;

  case 1193:

/* Line 1455 of yacc.c  */
#line 8493 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0;  }
    break;

  case 1194:

/* Line 1455 of yacc.c  */
#line 8494 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(2) - (3)].ulong_num); }
    break;

  case 1195:

/* Line 1455 of yacc.c  */
#line 8498 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1196:

/* Line 1455 of yacc.c  */
#line 8499 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1197:

/* Line 1455 of yacc.c  */
#line 8505 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              Design notes:
              Do not use a manually maintained stack like thd->lex->xxx_list,
              but use the internal bison stack ($$, $1 and $3) instead.
              Using the bison stack is:
              - more robust to changes in the grammar,
              - guaranteed to be in sync with the parser state,
              - better for performances (no memory allocation).
            */
            Item_cond_or *item1;
            Item_cond_or *item3;
            if (is_cond_or((yyvsp[(1) - (3)].item)))
            {
              item1= (Item_cond_or*) (yyvsp[(1) - (3)].item);
              if (is_cond_or((yyvsp[(3) - (3)].item)))
              {
                item3= (Item_cond_or*) (yyvsp[(3) - (3)].item);
                /*
                  (X1 OR X2) OR (Y1 OR Y2) ==> OR (X1, X2, Y1, Y2)
                */
                item3->add_at_head(item1->argument_list());
                (yyval.item) = (yyvsp[(3) - (3)].item);
              }
              else
              {
                /*
                  (X1 OR X2) OR Y ==> OR (X1, X2, Y)
                */
                item1->add((yyvsp[(3) - (3)].item));
                (yyval.item) = (yyvsp[(1) - (3)].item);
              }
            }
            else if (is_cond_or((yyvsp[(3) - (3)].item)))
            {
              item3= (Item_cond_or*) (yyvsp[(3) - (3)].item);
              /*
                X OR (Y1 OR Y2) ==> OR (X, Y1, Y2)
              */
              item3->add_at_head((yyvsp[(1) - (3)].item));
              (yyval.item) = (yyvsp[(3) - (3)].item);
            }
            else
            {
              /* X OR Y */
              (yyval.item) = new (YYTHD->mem_root) Item_cond_or((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1198:

/* Line 1455 of yacc.c  */
#line 8556 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* XOR is a proprietary extension */
            (yyval.item) = new (YYTHD->mem_root) Item_func_xor((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1199:

/* Line 1455 of yacc.c  */
#line 8563 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* See comments in rule expr: expr or expr */
            Item_cond_and *item1;
            Item_cond_and *item3;
            if (is_cond_and((yyvsp[(1) - (3)].item)))
            {
              item1= (Item_cond_and*) (yyvsp[(1) - (3)].item);
              if (is_cond_and((yyvsp[(3) - (3)].item)))
              {
                item3= (Item_cond_and*) (yyvsp[(3) - (3)].item);
                /*
                  (X1 AND X2) AND (Y1 AND Y2) ==> AND (X1, X2, Y1, Y2)
                */
                item3->add_at_head(item1->argument_list());
                (yyval.item) = (yyvsp[(3) - (3)].item);
              }
              else
              {
                /*
                  (X1 AND X2) AND Y ==> AND (X1, X2, Y)
                */
                item1->add((yyvsp[(3) - (3)].item));
                (yyval.item) = (yyvsp[(1) - (3)].item);
              }
            }
            else if (is_cond_and((yyvsp[(3) - (3)].item)))
            {
              item3= (Item_cond_and*) (yyvsp[(3) - (3)].item);
              /*
                X AND (Y1 AND Y2) ==> AND (X, Y1, Y2)
              */
              item3->add_at_head((yyvsp[(1) - (3)].item));
              (yyval.item) = (yyvsp[(3) - (3)].item);
            }
            else
            {
              /* X AND Y */
              (yyval.item) = new (YYTHD->mem_root) Item_cond_and((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1200:

/* Line 1455 of yacc.c  */
#line 8606 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= negate_expression(YYTHD, (yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1201:

/* Line 1455 of yacc.c  */
#line 8612 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_istrue((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1202:

/* Line 1455 of yacc.c  */
#line 8618 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnottrue((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1203:

/* Line 1455 of yacc.c  */
#line 8624 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isfalse((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1204:

/* Line 1455 of yacc.c  */
#line 8630 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnotfalse((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1205:

/* Line 1455 of yacc.c  */
#line 8636 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnull((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1206:

/* Line 1455 of yacc.c  */
#line 8642 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnotnull((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1208:

/* Line 1455 of yacc.c  */
#line 8652 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnull((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1209:

/* Line 1455 of yacc.c  */
#line 8658 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnotnull((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1210:

/* Line 1455 of yacc.c  */
#line 8664 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_equal((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1211:

/* Line 1455 of yacc.c  */
#line 8670 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= (*(yyvsp[(2) - (3)].boolfunc2creator))(0)->create((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1212:

/* Line 1455 of yacc.c  */
#line 8676 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= all_any_subquery_creator((yyvsp[(1) - (6)].item), (yyvsp[(2) - (6)].boolfunc2creator), (yyvsp[(3) - (6)].num), (yyvsp[(5) - (6)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1214:

/* Line 1455 of yacc.c  */
#line 8686 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_in_subselect((yyvsp[(1) - (5)].item), (yyvsp[(4) - (5)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1215:

/* Line 1455 of yacc.c  */
#line 8692 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *item= new (thd->mem_root) Item_in_subselect((yyvsp[(1) - (6)].item), (yyvsp[(5) - (6)].select_lex));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= negate_expression(thd, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1216:

/* Line 1455 of yacc.c  */
#line 8702 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= handle_sql2003_note184_exception(YYTHD, (yyvsp[(1) - (5)].item), true, (yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1217:

/* Line 1455 of yacc.c  */
#line 8708 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            (yyvsp[(6) - (7)].item_list)->push_front((yyvsp[(4) - (7)].item));
            (yyvsp[(6) - (7)].item_list)->push_front((yyvsp[(1) - (7)].item));
            (yyval.item)= new (YYTHD->mem_root) Item_func_in(*(yyvsp[(6) - (7)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1218:

/* Line 1455 of yacc.c  */
#line 8716 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= handle_sql2003_note184_exception(YYTHD, (yyvsp[(1) - (6)].item), false, (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1219:

/* Line 1455 of yacc.c  */
#line 8722 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(5) - (8)].item));
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(1) - (8)].item));
            Item_func_in *item = new (YYTHD->mem_root) Item_func_in(*(yyvsp[(7) - (8)].item_list));
            if (item == NULL)
              MYSQL_YYABORT;
            item->negate();
            (yyval.item)= item;
          }
    break;

  case 1220:

/* Line 1455 of yacc.c  */
#line 8732 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_between((yyvsp[(1) - (5)].item),(yyvsp[(3) - (5)].item),(yyvsp[(5) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1221:

/* Line 1455 of yacc.c  */
#line 8738 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item_func_between *item;
            item= new (YYTHD->mem_root) Item_func_between((yyvsp[(1) - (6)].item),(yyvsp[(4) - (6)].item),(yyvsp[(6) - (6)].item));
            if (item == NULL)
              MYSQL_YYABORT;
            item->negate();
            (yyval.item)= item;
          }
    break;

  case 1222:

/* Line 1455 of yacc.c  */
#line 8747 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item *item1= new (YYTHD->mem_root) Item_func_soundex((yyvsp[(1) - (4)].item));
            Item *item4= new (YYTHD->mem_root) Item_func_soundex((yyvsp[(4) - (4)].item));
            if ((item1 == NULL) || (item4 == NULL))
              MYSQL_YYABORT;
            (yyval.item)= new (YYTHD->mem_root) Item_func_eq(item1, item4);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1223:

/* Line 1455 of yacc.c  */
#line 8757 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_like((yyvsp[(1) - (4)].item),(yyvsp[(3) - (4)].item),(yyvsp[(4) - (4)].item),Lex->escape_used);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1224:

/* Line 1455 of yacc.c  */
#line 8763 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_func_like((yyvsp[(1) - (5)].item),(yyvsp[(4) - (5)].item),(yyvsp[(5) - (5)].item),
                                                             Lex->escape_used);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (YYTHD->mem_root) Item_func_not(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1225:

/* Line 1455 of yacc.c  */
#line 8773 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_regex((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1226:

/* Line 1455 of yacc.c  */
#line 8779 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_func_regex((yyvsp[(1) - (4)].item),(yyvsp[(4) - (4)].item));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= negate_expression(YYTHD, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1228:

/* Line 1455 of yacc.c  */
#line 8792 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_or((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1229:

/* Line 1455 of yacc.c  */
#line 8798 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_and((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1230:

/* Line 1455 of yacc.c  */
#line 8804 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_shift_left((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1231:

/* Line 1455 of yacc.c  */
#line 8810 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_shift_right((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1232:

/* Line 1455 of yacc.c  */
#line 8816 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_plus((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1233:

/* Line 1455 of yacc.c  */
#line 8822 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_minus((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1234:

/* Line 1455 of yacc.c  */
#line 8828 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(1) - (5)].item),(yyvsp[(4) - (5)].item),(yyvsp[(5) - (5)].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1235:

/* Line 1455 of yacc.c  */
#line 8834 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(1) - (5)].item),(yyvsp[(4) - (5)].item),(yyvsp[(5) - (5)].interval),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1236:

/* Line 1455 of yacc.c  */
#line 8840 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_mul((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1237:

/* Line 1455 of yacc.c  */
#line 8846 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_div((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1238:

/* Line 1455 of yacc.c  */
#line 8852 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_mod((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1239:

/* Line 1455 of yacc.c  */
#line 8858 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_int_div((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1240:

/* Line 1455 of yacc.c  */
#line 8864 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_mod((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1241:

/* Line 1455 of yacc.c  */
#line 8870 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_xor((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1251:

/* Line 1455 of yacc.c  */
#line 8899 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_eq_creator; }
    break;

  case 1252:

/* Line 1455 of yacc.c  */
#line 8900 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_ge_creator; }
    break;

  case 1253:

/* Line 1455 of yacc.c  */
#line 8901 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_gt_creator; }
    break;

  case 1254:

/* Line 1455 of yacc.c  */
#line 8902 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_le_creator; }
    break;

  case 1255:

/* Line 1455 of yacc.c  */
#line 8903 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_lt_creator; }
    break;

  case 1256:

/* Line 1455 of yacc.c  */
#line 8904 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_ne_creator; }
    break;

  case 1257:

/* Line 1455 of yacc.c  */
#line 8908 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num) = 1; }
    break;

  case 1258:

/* Line 1455 of yacc.c  */
#line 8909 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1259:

/* Line 1455 of yacc.c  */
#line 8914 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
	    (yyval.num)= DYN_COL_NULL; /* automatic type */
            lex->charset= NULL;
            lex->length= lex->dec= 0;
	  }
    break;

  case 1260:

/* Line 1455 of yacc.c  */
#line 8920 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(2) - (2)].num); }
    break;

  case 1261:

/* Line 1455 of yacc.c  */
#line 8925 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_INT;
            lex->charset= NULL;
            lex->length= lex->dec= 0;
          }
    break;

  case 1262:

/* Line 1455 of yacc.c  */
#line 8932 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_UINT;
            lex->charset= NULL;
            lex->length= lex->dec= 0;
          }
    break;

  case 1263:

/* Line 1455 of yacc.c  */
#line 8939 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_DOUBLE;
            lex->charset= NULL;
            lex->length= lex->dec= 0;
          }
    break;

  case 1264:

/* Line 1455 of yacc.c  */
#line 8946 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_DOUBLE;
            lex->charset= NULL;
            lex->length= lex->dec= 0;
          }
    break;

  case 1265:

/* Line 1455 of yacc.c  */
#line 8953 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_DOUBLE;
            lex->charset= NULL;
            lex->length= lex->dec= 0;
          }
    break;

  case 1266:

/* Line 1455 of yacc.c  */
#line 8960 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= DYN_COL_DECIMAL;
            Lex->charset= NULL;
          }
    break;

  case 1267:

/* Line 1455 of yacc.c  */
#line 8965 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_STRING;
            lex->length= lex->dec= 0;
          }
    break;

  case 1268:

/* Line 1455 of yacc.c  */
#line 8971 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_STRING;
            lex->charset= national_charset_info;
            lex->length= lex->dec= 0;
          }
    break;

  case 1269:

/* Line 1455 of yacc.c  */
#line 8978 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_DATE;
            lex->charset= NULL;
            lex->length= lex->dec= 0;
          }
    break;

  case 1270:

/* Line 1455 of yacc.c  */
#line 8985 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_TIME;
            lex->charset= NULL;
            lex->dec= lex->length;
            lex->length= 0;
          }
    break;

  case 1271:

/* Line 1455 of yacc.c  */
#line 8993 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_DATETIME;
            lex->charset= NULL;
            lex->dec= lex->length;
            lex->length= 0;
          }
    break;

  case 1272:

/* Line 1455 of yacc.c  */
#line 9004 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
     LEX *lex= Lex;
     (yyval.dyncol_def)= (DYNCALL_CREATE_DEF *)
       alloc_root(YYTHD->mem_root, sizeof(DYNCALL_CREATE_DEF));
     if ((yyval.dyncol_def) == NULL)
       MYSQL_YYABORT;
     (yyval.dyncol_def)->key= (yyvsp[(1) - (4)].item);
     (yyval.dyncol_def)->value= (yyvsp[(3) - (4)].item);
     (yyval.dyncol_def)->type= (DYNAMIC_COLUMN_TYPE)(yyvsp[(4) - (4)].num);
     (yyval.dyncol_def)->cs= lex->charset;
     if (lex->length)
       (yyval.dyncol_def)->len= strtoul(lex->length, NULL, 10);
     else
       (yyval.dyncol_def)->len= 0;
     if (lex->dec)
       (yyval.dyncol_def)->frac= strtoul(lex->dec, NULL, 10);
     else
       (yyval.dyncol_def)->len= 0;
   }
    break;

  case 1273:

/* Line 1455 of yacc.c  */
#line 9026 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
         (yyval.dyncol_def_list)= new (YYTHD->mem_root) List<DYNCALL_CREATE_DEF>;
         if ((yyval.dyncol_def_list) == NULL)
           MYSQL_YYABORT;
         (yyval.dyncol_def_list)->push_back((yyvsp[(1) - (1)].dyncol_def));
       }
    break;

  case 1274:

/* Line 1455 of yacc.c  */
#line 9033 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
         (yyvsp[(1) - (3)].dyncol_def_list)->push_back((yyvsp[(3) - (3)].dyncol_def));
         (yyval.dyncol_def_list)= (yyvsp[(1) - (3)].dyncol_def_list);
       }
    break;

  case 1280:

/* Line 1455 of yacc.c  */
#line 9046 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *i1= new (thd->mem_root) Item_string((yyvsp[(3) - (3)].lex_str).str,
                                                      (yyvsp[(3) - (3)].lex_str).length,
                                                      thd->charset());
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_set_collation((yyvsp[(1) - (3)].item), i1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1285:

/* Line 1455 of yacc.c  */
#line 9062 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_concat((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1286:

/* Line 1455 of yacc.c  */
#line 9068 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= (yyvsp[(2) - (2)].item);
          }
    break;

  case 1287:

/* Line 1455 of yacc.c  */
#line 9072 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_neg((yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1288:

/* Line 1455 of yacc.c  */
#line 9078 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_neg((yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1289:

/* Line 1455 of yacc.c  */
#line 9084 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= negate_expression(YYTHD, (yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1290:

/* Line 1455 of yacc.c  */
#line 9090 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            (yyval.item)= new (YYTHD->mem_root) Item_singlerow_subselect((yyvsp[(2) - (3)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1291:

/* Line 1455 of yacc.c  */
#line 9096 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(2) - (3)].item); }
    break;

  case 1292:

/* Line 1455 of yacc.c  */
#line 9098 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyvsp[(4) - (5)].item_list)->push_front((yyvsp[(2) - (5)].item));
            (yyval.item)= new (YYTHD->mem_root) Item_row(*(yyvsp[(4) - (5)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1293:

/* Line 1455 of yacc.c  */
#line 9105 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyvsp[(5) - (6)].item_list)->push_front((yyvsp[(3) - (6)].item));
            (yyval.item)= new (YYTHD->mem_root) Item_row(*(yyvsp[(5) - (6)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1294:

/* Line 1455 of yacc.c  */
#line 9112 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_exists_subselect((yyvsp[(3) - (4)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1295:

/* Line 1455 of yacc.c  */
#line 9118 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item_string *item;
            (yyval.item)= NULL;
            /*
              If "expr" is reasonably short pure ASCII string literal,
              try to parse known ODBC style date, time or timestamp literals,
              e.g:
              SELECT {d'2001-01-01'};
              SELECT {t'10:20:30'};
              SELECT {ts'2001-01-01 10:20:30'};
            */
            if ((yyvsp[(3) - (4)].item)->type() == Item::STRING_ITEM &&
               (item= (Item_string *) (yyvsp[(3) - (4)].item)) &&
                item->collation.repertoire == MY_REPERTOIRE_ASCII &&
                item->str_value.length() < MAX_DATE_STRING_REP_LENGTH * 4)
            {
              enum_field_types type= MYSQL_TYPE_STRING;
              LEX_STRING *ls= &(yyvsp[(2) - (4)].lex_str);
              if (ls->length == 1)
              {
                if (ls->str[0] == 'd')  /* {d'2001-01-01'} */
                  type= MYSQL_TYPE_DATE;
                else if (ls->str[0] == 't') /* {t'10:20:30'} */
                  type= MYSQL_TYPE_TIME;
              }
              else if (ls->length == 2) /* {ts'2001-01-01 10:20:30'} */
              {
                if (ls->str[0] == 't' && ls->str[1] == 's')
                  type= MYSQL_TYPE_DATETIME;
              }
              if (type != MYSQL_TYPE_STRING)
              {
                (yyval.item)= create_temporal_literal(YYTHD,
                                            item->str_value.ptr(),
                                            item->str_value.length(),
                                            item->str_value.charset(),
                                            type, false);
              }
            }
            if ((yyval.item) == NULL)
              (yyval.item)= (yyvsp[(3) - (4)].item);
          }
    break;

  case 1296:

/* Line 1455 of yacc.c  */
#line 9161 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyvsp[(2) - (7)].item_list)->push_front((yyvsp[(5) - (7)].item));
            Item_func_match *i1= new (YYTHD->mem_root) Item_func_match(*(yyvsp[(2) - (7)].item_list), (yyvsp[(6) - (7)].num));
            if (i1 == NULL)
              MYSQL_YYABORT;
            Select->add_ftfunc_to_list(i1);
            (yyval.item)= i1;
          }
    break;

  case 1297:

/* Line 1455 of yacc.c  */
#line 9170 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= create_func_cast(YYTHD, (yyvsp[(2) - (2)].item), ITEM_CAST_CHAR, NULL, NULL,
                                 &my_charset_bin);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1298:

/* Line 1455 of yacc.c  */
#line 9177 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.item)= create_func_cast(YYTHD, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].cast_type), lex->length, lex->dec,
                                 lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1299:

/* Line 1455 of yacc.c  */
#line 9185 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_case(* (yyvsp[(3) - (5)].item_list), (yyvsp[(2) - (5)].item), (yyvsp[(4) - (5)].item) );
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1300:

/* Line 1455 of yacc.c  */
#line 9191 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= create_func_cast(YYTHD, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].cast_type), Lex->length, Lex->dec,
                                 Lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1301:

/* Line 1455 of yacc.c  */
#line 9198 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_conv_charset((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].charset));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1302:

/* Line 1455 of yacc.c  */
#line 9204 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if ((yyvsp[(3) - (4)].item)->is_splocal())
            {
              Item_splocal *il= static_cast<Item_splocal *>((yyvsp[(3) - (4)].item));

              my_error(ER_WRONG_COLUMN_NAME, MYF(0), il->my_name()->str);
              MYSQL_YYABORT;
            }
            (yyval.item)= new (YYTHD->mem_root) Item_default_value(Lex->current_context(),
                                                         (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1303:

/* Line 1455 of yacc.c  */
#line 9218 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_insert_value(Lex->current_context(),
                                                        (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1304:

/* Line 1455 of yacc.c  */
#line 9226 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(5) - (5)].item),(yyvsp[(2) - (5)].item),(yyvsp[(3) - (5)].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1305:

/* Line 1455 of yacc.c  */
#line 9241 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_char(*(yyvsp[(3) - (4)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1306:

/* Line 1455 of yacc.c  */
#line 9247 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_char(*(yyvsp[(3) - (6)].item_list), (yyvsp[(5) - (6)].charset));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1307:

/* Line 1455 of yacc.c  */
#line 9253 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_current_user(Lex->current_context());
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query= 0;
          }
    break;

  case 1308:

/* Line 1455 of yacc.c  */
#line 9261 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_typecast((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1309:

/* Line 1455 of yacc.c  */
#line 9267 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_dayofmonth((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1310:

/* Line 1455 of yacc.c  */
#line 9273 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_hour((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1311:

/* Line 1455 of yacc.c  */
#line 9279 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_insert((yyvsp[(3) - (10)].item),(yyvsp[(5) - (10)].item),(yyvsp[(7) - (10)].item),(yyvsp[(9) - (10)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1312:

/* Line 1455 of yacc.c  */
#line 9285 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            List<Item> *list= new (thd->mem_root) List<Item>;
            if (list == NULL)
              MYSQL_YYABORT;
            list->push_front((yyvsp[(5) - (6)].item));
            list->push_front((yyvsp[(3) - (6)].item));
            Item_row *item= new (thd->mem_root) Item_row(*list);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_interval(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1313:

/* Line 1455 of yacc.c  */
#line 9300 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(5) - (8)].item));
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(3) - (8)].item));
            Item_row *item= new (thd->mem_root) Item_row(*(yyvsp[(7) - (8)].item_list));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_interval(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1314:

/* Line 1455 of yacc.c  */
#line 9312 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_left((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1315:

/* Line 1455 of yacc.c  */
#line 9318 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_minute((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1316:

/* Line 1455 of yacc.c  */
#line 9324 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_month((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1317:

/* Line 1455 of yacc.c  */
#line 9330 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_right((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1318:

/* Line 1455 of yacc.c  */
#line 9336 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_second((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1319:

/* Line 1455 of yacc.c  */
#line 9342 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_time_typecast((yyvsp[(3) - (4)].item), AUTO_SEC_PART_DIGITS);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1320:

/* Line 1455 of yacc.c  */
#line 9348 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_datetime_typecast((yyvsp[(3) - (4)].item), AUTO_SEC_PART_DIGITS);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1321:

/* Line 1455 of yacc.c  */
#line 9354 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_add_time((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item), 1, 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1322:

/* Line 1455 of yacc.c  */
#line 9360 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1323:

/* Line 1455 of yacc.c  */
#line 9366 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_ltrim((yyvsp[(6) - (7)].item),(yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1324:

/* Line 1455 of yacc.c  */
#line 9372 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_rtrim((yyvsp[(6) - (7)].item),(yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1325:

/* Line 1455 of yacc.c  */
#line 9378 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(6) - (7)].item),(yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1326:

/* Line 1455 of yacc.c  */
#line 9384 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_ltrim((yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1327:

/* Line 1455 of yacc.c  */
#line 9390 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_rtrim((yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1328:

/* Line 1455 of yacc.c  */
#line 9396 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1329:

/* Line 1455 of yacc.c  */
#line 9402 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(5) - (6)].item),(yyvsp[(3) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1330:

/* Line 1455 of yacc.c  */
#line 9408 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_user();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1331:

/* Line 1455 of yacc.c  */
#line 9416 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_year((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1332:

/* Line 1455 of yacc.c  */
#line 9437 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                                             INTERVAL_DAY, 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1333:

/* Line 1455 of yacc.c  */
#line 9444 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item), (yyvsp[(6) - (8)].item), (yyvsp[(7) - (8)].interval), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1334:

/* Line 1455 of yacc.c  */
#line 9450 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curdate_local();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1335:

/* Line 1455 of yacc.c  */
#line 9457 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curtime_local((yyvsp[(2) - (2)].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1336:

/* Line 1455 of yacc.c  */
#line 9465 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item),(yyvsp[(6) - (8)].item),(yyvsp[(7) - (8)].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1337:

/* Line 1455 of yacc.c  */
#line 9472 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item),(yyvsp[(6) - (8)].item),(yyvsp[(7) - (8)].interval),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1338:

/* Line 1455 of yacc.c  */
#line 9478 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_extract( (yyvsp[(3) - (6)].interval), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1339:

/* Line 1455 of yacc.c  */
#line 9484 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_get_format((yyvsp[(3) - (6)].date_time_type), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1340:

/* Line 1455 of yacc.c  */
#line 9490 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_now_local((yyvsp[(2) - (2)].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1341:

/* Line 1455 of yacc.c  */
#line 9497 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_func_locate((yyvsp[(5) - (6)].item),(yyvsp[(3) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1342:

/* Line 1455 of yacc.c  */
#line 9503 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                                             INTERVAL_DAY, 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1343:

/* Line 1455 of yacc.c  */
#line 9510 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item), (yyvsp[(6) - (8)].item), (yyvsp[(7) - (8)].interval), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1344:

/* Line 1455 of yacc.c  */
#line 9516 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1345:

/* Line 1455 of yacc.c  */
#line 9522 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1346:

/* Line 1455 of yacc.c  */
#line 9528 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1347:

/* Line 1455 of yacc.c  */
#line 9534 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1348:

/* Line 1455 of yacc.c  */
#line 9540 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              Unlike other time-related functions, SYSDATE() is
              replication-unsafe because it is not affected by the
              TIMESTAMP variable.  It is unsafe even if
              sysdate_is_now=1, because the slave may have
              sysdate_is_now=0.
            */
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            if (global_system_variables.sysdate_is_now == 0)
              (yyval.item)= new (YYTHD->mem_root) Item_func_sysdate_local((yyvsp[(2) - (2)].num));
            else
              (yyval.item)= new (YYTHD->mem_root) Item_func_now_local((yyvsp[(2) - (2)].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1349:

/* Line 1455 of yacc.c  */
#line 9558 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(7) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(3) - (8)].interval_time_st),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1350:

/* Line 1455 of yacc.c  */
#line 9564 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_timestamp_diff((yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item),(yyvsp[(3) - (8)].interval_time_st));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1351:

/* Line 1455 of yacc.c  */
#line 9570 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curdate_utc();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1352:

/* Line 1455 of yacc.c  */
#line 9577 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curtime_utc((yyvsp[(2) - (2)].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1353:

/* Line 1455 of yacc.c  */
#line 9584 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_now_utc((yyvsp[(2) - (2)].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1354:

/* Line 1455 of yacc.c  */
#line 9592 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= create_func_dyncol_add(YYTHD, (yyvsp[(3) - (6)].item), *(yyvsp[(5) - (6)].dyncol_def_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1355:

/* Line 1455 of yacc.c  */
#line 9599 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= create_func_dyncol_delete(YYTHD, (yyvsp[(3) - (6)].item), *(yyvsp[(5) - (6)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1356:

/* Line 1455 of yacc.c  */
#line 9606 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_dyncol_check((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1357:

/* Line 1455 of yacc.c  */
#line 9613 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= create_func_dyncol_create(YYTHD, *(yyvsp[(3) - (4)].dyncol_def_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1358:

/* Line 1455 of yacc.c  */
#line 9620 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.item)= create_func_dyncol_get(YYTHD, (yyvsp[(3) - (8)].item), (yyvsp[(5) - (8)].item), (yyvsp[(7) - (8)].cast_type),
                                        lex->length, lex->dec,
                                        lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1359:

/* Line 1455 of yacc.c  */
#line 9637 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_ascii((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1360:

/* Line 1455 of yacc.c  */
#line 9643 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_charset((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1361:

/* Line 1455 of yacc.c  */
#line 9649 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_coalesce(* (yyvsp[(3) - (4)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1362:

/* Line 1455 of yacc.c  */
#line 9655 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_collation((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1363:

/* Line 1455 of yacc.c  */
#line 9661 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_database();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1364:

/* Line 1455 of yacc.c  */
#line 9668 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_if((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1365:

/* Line 1455 of yacc.c  */
#line 9674 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_last_value(* (yyvsp[(3) - (4)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1366:

/* Line 1455 of yacc.c  */
#line 9680 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_microsecond((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1367:

/* Line 1455 of yacc.c  */
#line 9686 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_func_mod((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1368:

/* Line 1455 of yacc.c  */
#line 9692 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)=  new (YYTHD->mem_root) Item_func_old_password((yyvsp[(3) - (4)].item));
            Lex->contains_plaintext_password= true;
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1369:

/* Line 1455 of yacc.c  */
#line 9699 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item* i1;
            Lex->contains_plaintext_password= true;
            if (thd->variables.old_passwords == 1)
              i1= new (thd->mem_root) Item_func_old_password((yyvsp[(3) - (4)].item));
            else
              i1= new (thd->mem_root) Item_func_password((yyvsp[(3) - (4)].item));
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= i1;
          }
    break;

  case 1370:

/* Line 1455 of yacc.c  */
#line 9712 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_func_quarter((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1371:

/* Line 1455 of yacc.c  */
#line 9718 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_repeat((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1372:

/* Line 1455 of yacc.c  */
#line 9724 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_replace((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1373:

/* Line 1455 of yacc.c  */
#line 9730 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_row_count();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query= 0;
          }
    break;

  case 1374:

/* Line 1455 of yacc.c  */
#line 9738 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_round((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1375:

/* Line 1455 of yacc.c  */
#line 9744 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *i1= new (thd->mem_root) Item_int((char*) "0",
                                           thd->variables.default_week_format,
                                                   1);
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_week((yyvsp[(3) - (4)].item), i1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1376:

/* Line 1455 of yacc.c  */
#line 9756 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_week((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1377:

/* Line 1455 of yacc.c  */
#line 9762 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            (yyval.item)= (yyvsp[(1) - (1)].item);
            /* $1 may be NULL, GEOM_NEW not tested for out of memory */
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
    break;

  case 1378:

/* Line 1455 of yacc.c  */
#line 9778 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_rel((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                               Item_func::SP_CONTAINS_FUNC));
          }
    break;

  case 1379:

/* Line 1455 of yacc.c  */
#line 9784 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_geometrycollection,
                           Geometry::wkb_point));
          }
    break;

  case 1380:

/* Line 1455 of yacc.c  */
#line 9791 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_linestring,
                           Geometry::wkb_point));
          }
    break;

  case 1381:

/* Line 1455 of yacc.c  */
#line 9798 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multilinestring,
                           Geometry::wkb_linestring));
          }
    break;

  case 1382:

/* Line 1455 of yacc.c  */
#line 9805 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multipoint,
                           Geometry::wkb_point));
          }
    break;

  case 1383:

/* Line 1455 of yacc.c  */
#line 9812 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multipolygon,
                           Geometry::wkb_polygon));
          }
    break;

  case 1384:

/* Line 1455 of yacc.c  */
#line 9819 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD, Item_func_point((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item)));
          }
    break;

  case 1385:

/* Line 1455 of yacc.c  */
#line 9823 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_polygon,
                           Geometry::wkb_linestring));
          }
    break;

  case 1386:

/* Line 1455 of yacc.c  */
#line 9842 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
#ifdef HAVE_DLOPEN
            udf_func *udf= 0;
            LEX *lex= Lex;
            if (using_udf_functions &&
                (udf= find_udf((yyvsp[(1) - (2)].lex_str).str, (yyvsp[(1) - (2)].lex_str).length)) &&
                udf->type == UDFTYPE_AGGREGATE)
            {
              if (lex->current_select->inc_in_sum_expr())
              {
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
            }
            /* Temporary placing the result of find_udf in $3 */
            (yyval.udf)= udf;
#endif
          }
    break;

  case 1387:

/* Line 1455 of yacc.c  */
#line 9861 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Create_func *builder;
            Item *item= NULL;

            if (check_routine_name(&(yyvsp[(1) - (5)].lex_str)))
            {
              MYSQL_YYABORT;
            }

            /*
              Implementation note:
              names are resolved with the following order:
              - MySQL native functions,
              - User Defined Functions,
              - Stored Functions (assuming the current <use> database)

              This will be revised with WL#2128 (SQL PATH)
            */
            builder= find_native_function_builder(thd, (yyvsp[(1) - (5)].lex_str));
            if (builder)
            {
              item= builder->create_func(thd, (yyvsp[(1) - (5)].lex_str), (yyvsp[(4) - (5)].item_list));
            }
            else
            {
#ifdef HAVE_DLOPEN
              /* Retrieving the result of find_udf */
              udf_func *udf= (yyvsp[(3) - (5)].udf);

              if (udf)
              {
                if (udf->type == UDFTYPE_AGGREGATE)
                {
                  Select->in_sum_expr--;
                }

                item= Create_udf_func::s_singleton.create(thd, udf, (yyvsp[(4) - (5)].item_list));
              }
              else
#endif
              {
                builder= find_qualified_function_builder(thd);
                DBUG_ASSERT(builder);
                item= builder->create_func(thd, (yyvsp[(1) - (5)].lex_str), (yyvsp[(4) - (5)].item_list));
              }
            }

            if (! ((yyval.item)= item))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1388:

/* Line 1455 of yacc.c  */
#line 9915 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Create_qfunc *builder;
            Item *item= NULL;

            /*
              The following in practice calls:
              <code>Create_sp_func::create()</code>
              and builds a stored function.

              However, it's important to maintain the interface between the
              parser and the implementation in item_create.cc clean,
              since this will change with WL#2128 (SQL PATH):
              - INFORMATION_SCHEMA.version() is the SQL 99 syntax for the native
              function version(),
              - MySQL.version() is the SQL 2003 syntax for the native function
              version() (a vendor can specify any schema).
            */

            if (!(yyvsp[(1) - (6)].lex_str).str || check_db_name(&(yyvsp[(1) - (6)].lex_str)))
            {
              my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[(1) - (6)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (check_routine_name(&(yyvsp[(3) - (6)].lex_str)))
            {
              MYSQL_YYABORT;
            }

            builder= find_qualified_function_builder(thd);
            DBUG_ASSERT(builder);
            item= builder->create_with_db(thd, (yyvsp[(1) - (6)].lex_str), (yyvsp[(3) - (6)].lex_str), true, (yyvsp[(5) - (6)].item_list));

            if (! ((yyval.item)= item))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1389:

/* Line 1455 of yacc.c  */
#line 9957 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(1) - (2)].num) | (yyvsp[(2) - (2)].num); }
    break;

  case 1390:

/* Line 1455 of yacc.c  */
#line 9959 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= FT_BOOL; }
    break;

  case 1391:

/* Line 1455 of yacc.c  */
#line 9963 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= FT_NL; }
    break;

  case 1392:

/* Line 1455 of yacc.c  */
#line 9964 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= FT_NL; }
    break;

  case 1393:

/* Line 1455 of yacc.c  */
#line 9968 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0;         }
    break;

  case 1394:

/* Line 1455 of yacc.c  */
#line 9969 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= FT_EXPAND; }
    break;

  case 1395:

/* Line 1455 of yacc.c  */
#line 9973 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item_list)= NULL; }
    break;

  case 1396:

/* Line 1455 of yacc.c  */
#line 9974 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list); }
    break;

  case 1397:

/* Line 1455 of yacc.c  */
#line 9979 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new (YYTHD->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 1398:

/* Line 1455 of yacc.c  */
#line 9986 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item));
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1399:

/* Line 1455 of yacc.c  */
#line 9994 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
             Use Item::name as a storage for the attribute value of user
             defined function argument. It is safe to use Item::name
             because the syntax will not allow having an explicit name here.
             See WL#1017 re. udf attributes.
            */
            if ((yyvsp[(4) - (4)].lex_str).str)
            {
              (yyvsp[(2) - (4)].item)->is_autogenerated_name= FALSE;
              (yyvsp[(2) - (4)].item)->set_name((yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length, system_charset_info);
            }
            /* 
               A field has to have its proper name in order for name
               resolution to work, something we are only guaranteed if we
               parse it out. If we hijack the input stream with
               remember_name we may get quoted or escaped names.
            */
            else if ((yyvsp[(2) - (4)].item)->type() != Item::FIELD_ITEM)
              (yyvsp[(2) - (4)].item)->set_name((yyvsp[(1) - (4)].simple_string), (uint) ((yyvsp[(3) - (4)].simple_string) - (yyvsp[(1) - (4)].simple_string)), YYTHD->charset());
            (yyval.item)= (yyvsp[(2) - (4)].item);
          }
    break;

  case 1400:

/* Line 1455 of yacc.c  */
#line 10020 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_avg((yyvsp[(3) - (4)].item), FALSE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1401:

/* Line 1455 of yacc.c  */
#line 10026 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_avg((yyvsp[(4) - (5)].item), TRUE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1402:

/* Line 1455 of yacc.c  */
#line 10032 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_and((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1403:

/* Line 1455 of yacc.c  */
#line 10038 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_or((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1404:

/* Line 1455 of yacc.c  */
#line 10044 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_xor((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1405:

/* Line 1455 of yacc.c  */
#line 10050 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_int((int32) 0L,1);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (YYTHD->mem_root) Item_sum_count(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1406:

/* Line 1455 of yacc.c  */
#line 10059 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_count((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1407:

/* Line 1455 of yacc.c  */
#line 10065 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->in_sum_expr++; }
    break;

  case 1408:

/* Line 1455 of yacc.c  */
#line 10067 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->in_sum_expr--; }
    break;

  case 1409:

/* Line 1455 of yacc.c  */
#line 10069 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_count(* (yyvsp[(5) - (7)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1410:

/* Line 1455 of yacc.c  */
#line 10075 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_min((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1411:

/* Line 1455 of yacc.c  */
#line 10086 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_min((yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1412:

/* Line 1455 of yacc.c  */
#line 10092 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_max((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1413:

/* Line 1455 of yacc.c  */
#line 10098 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_max((yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1414:

/* Line 1455 of yacc.c  */
#line 10104 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_std((yyvsp[(3) - (4)].item), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1415:

/* Line 1455 of yacc.c  */
#line 10110 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_variance((yyvsp[(3) - (4)].item), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1416:

/* Line 1455 of yacc.c  */
#line 10116 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_std((yyvsp[(3) - (4)].item), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1417:

/* Line 1455 of yacc.c  */
#line 10122 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_variance((yyvsp[(3) - (4)].item), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1418:

/* Line 1455 of yacc.c  */
#line 10128 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_sum((yyvsp[(3) - (4)].item), FALSE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1419:

/* Line 1455 of yacc.c  */
#line 10134 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_sum((yyvsp[(4) - (5)].item), TRUE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1420:

/* Line 1455 of yacc.c  */
#line 10140 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->in_sum_expr++; }
    break;

  case 1421:

/* Line 1455 of yacc.c  */
#line 10144 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->in_sum_expr--;
            (yyval.item)= new (YYTHD->mem_root)
                  Item_func_group_concat(Lex->current_context(), (yyvsp[(3) - (8)].num), (yyvsp[(5) - (8)].item_list),
                                         sel->gorder_list, (yyvsp[(7) - (8)].string));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            (yyvsp[(5) - (8)].item_list)->empty();
            sel->gorder_list.empty();
          }
    break;

  case 1422:

/* Line 1455 of yacc.c  */
#line 10159 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (! Lex->parsing_options.allows_variable)
            {
              my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1423:

/* Line 1455 of yacc.c  */
#line 10167 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= (yyvsp[(3) - (3)].item);
          }
    break;

  case 1424:

/* Line 1455 of yacc.c  */
#line 10174 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item_func_set_user_var *item;
            (yyval.item)= item= new (YYTHD->mem_root) Item_func_set_user_var((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_RAND);
            lex->set_var_list.push_back(item);
          }
    break;

  case 1425:

/* Line 1455 of yacc.c  */
#line 10184 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_get_user_var((yyvsp[(1) - (1)].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_RAND);
          }
    break;

  case 1426:

/* Line 1455 of yacc.c  */
#line 10192 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* disallow "SELECT @@global.global.variable" */
            if ((yyvsp[(3) - (4)].lex_str).str && (yyvsp[(4) - (4)].lex_str).str && check_reserved_words(&(yyvsp[(3) - (4)].lex_str)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (!((yyval.item)= get_system_var(YYTHD, (yyvsp[(2) - (4)].var_type), (yyvsp[(3) - (4)].lex_str), (yyvsp[(4) - (4)].lex_str))))
              MYSQL_YYABORT;
            if (!((Item_func_get_system_var*) (yyval.item))->is_written_to_binlog())
              Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_VARIABLE);
          }
    break;

  case 1427:

/* Line 1455 of yacc.c  */
#line 10207 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1428:

/* Line 1455 of yacc.c  */
#line 10208 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num) = 1; }
    break;

  case 1429:

/* Line 1455 of yacc.c  */
#line 10213 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.string)= new (YYTHD->mem_root) String(",", 1, &my_charset_latin1);
            if ((yyval.string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1430:

/* Line 1455 of yacc.c  */
#line 10218 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.string) = (yyvsp[(2) - (2)].string); }
    break;

  case 1432:

/* Line 1455 of yacc.c  */
#line 10224 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->linkage != GLOBAL_OPTIONS_TYPE &&
                sel->olap != UNSPECIFIED_OLAP_TYPE &&
                (sel->linkage != UNION_TYPE || sel->braces))
            {
              my_error(ER_WRONG_USAGE, MYF(0),
                       "CUBE/ROLLUP", "ORDER BY");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1434:

/* Line 1455 of yacc.c  */
#line 10241 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { if (add_gorder_to_list(YYTHD, (yyvsp[(3) - (4)].item),(bool) (yyvsp[(4) - (4)].num))) MYSQL_YYABORT; }
    break;

  case 1435:

/* Line 1455 of yacc.c  */
#line 10243 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { if (add_gorder_to_list(YYTHD, (yyvsp[(1) - (2)].item),(bool) (yyvsp[(2) - (2)].num))) MYSQL_YYABORT; }
    break;

  case 1436:

/* Line 1455 of yacc.c  */
#line 10248 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->current_select->inc_in_sum_expr())
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1437:

/* Line 1455 of yacc.c  */
#line 10257 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->in_sum_expr--;
            (yyval.item)= (yyvsp[(3) - (3)].item);
          }
    break;

  case 1438:

/* Line 1455 of yacc.c  */
#line 10265 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->charset= &my_charset_bin; Lex->dec= 0; }
    break;

  case 1439:

/* Line 1455 of yacc.c  */
#line 10267 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->dec= 0; }
    break;

  case 1440:

/* Line 1455 of yacc.c  */
#line 10269 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->charset= national_charset_info; Lex->dec=0; }
    break;

  case 1441:

/* Line 1455 of yacc.c  */
#line 10271 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_SIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1442:

/* Line 1455 of yacc.c  */
#line 10273 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_SIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1443:

/* Line 1455 of yacc.c  */
#line 10275 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_SIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1444:

/* Line 1455 of yacc.c  */
#line 10277 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_UNSIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1445:

/* Line 1455 of yacc.c  */
#line 10279 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_UNSIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1446:

/* Line 1455 of yacc.c  */
#line 10281 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_DATE; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1447:

/* Line 1455 of yacc.c  */
#line 10283 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.cast_type)=ITEM_CAST_TIME;
            LEX *lex= Lex;
            lex->charset= NULL; lex->dec= lex->length; lex->length= (char*)0;
           }
    break;

  case 1448:

/* Line 1455 of yacc.c  */
#line 10289 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.cast_type)=ITEM_CAST_DATETIME;
            LEX *lex= Lex;
            lex->charset= NULL; lex->dec= lex->length; lex->length= (char*)0;
           }
    break;

  case 1449:

/* Line 1455 of yacc.c  */
#line 10295 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_DECIMAL; Lex->charset= NULL; }
    break;

  case 1450:

/* Line 1455 of yacc.c  */
#line 10297 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->charset= NULL; Lex->length= Lex->dec= 0;}
    break;

  case 1451:

/* Line 1455 of yacc.c  */
#line 10299 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_DOUBLE; }
    break;

  case 1452:

/* Line 1455 of yacc.c  */
#line 10302 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item_list)= NULL; }
    break;

  case 1453:

/* Line 1455 of yacc.c  */
#line 10303 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list);}
    break;

  case 1454:

/* Line 1455 of yacc.c  */
#line 10308 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new (YYTHD->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 1455:

/* Line 1455 of yacc.c  */
#line 10315 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item));
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1456:

/* Line 1455 of yacc.c  */
#line 10322 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list); }
    break;

  case 1457:

/* Line 1455 of yacc.c  */
#line 10323 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(2) - (3)].item_list); }
    break;

  case 1458:

/* Line 1455 of yacc.c  */
#line 10328 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new (YYTHD->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 1459:

/* Line 1455 of yacc.c  */
#line 10335 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item));
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1460:

/* Line 1455 of yacc.c  */
#line 10342 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)= NULL; }
    break;

  case 1461:

/* Line 1455 of yacc.c  */
#line 10343 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 1462:

/* Line 1455 of yacc.c  */
#line 10347 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)= NULL; }
    break;

  case 1463:

/* Line 1455 of yacc.c  */
#line 10348 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(2) - (2)].item); }
    break;

  case 1464:

/* Line 1455 of yacc.c  */
#line 10353 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(2) - (4)].item));
            (yyval.item_list)->push_back((yyvsp[(4) - (4)].item));
          }
    break;

  case 1465:

/* Line 1455 of yacc.c  */
#line 10361 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (5)].item_list)->push_back((yyvsp[(3) - (5)].item));
            (yyvsp[(1) - (5)].item_list)->push_back((yyvsp[(5) - (5)].item));
            (yyval.item_list)= (yyvsp[(1) - (5)].item_list);
          }
    break;

  case 1466:

/* Line 1455 of yacc.c  */
#line 10371 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1467:

/* Line 1455 of yacc.c  */
#line 10373 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->nest_last_join(lex->thd)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1468:

/* Line 1455 of yacc.c  */
#line 10384 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { MYSQL_YYABORT_UNLESS((yyval.table_list)=(yyvsp[(1) - (1)].table_list)); }
    break;

  case 1469:

/* Line 1455 of yacc.c  */
#line 10395 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1470:

/* Line 1455 of yacc.c  */
#line 10396 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(3) - (4)].table_list); }
    break;

  case 1471:

/* Line 1455 of yacc.c  */
#line 10402 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1472:

/* Line 1455 of yacc.c  */
#line 10404 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].table_list) && ((yyval.table_list)=(yyvsp[(3) - (3)].table_list)));
          }
    break;

  case 1473:

/* Line 1455 of yacc.c  */
#line 10424 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].table_list) && ((yyval.table_list)=(yyvsp[(3) - (3)].table_list))); (yyvsp[(3) - (3)].table_list)->straight=(yyvsp[(2) - (3)].num); }
    break;

  case 1474:

/* Line 1455 of yacc.c  */
#line 10427 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && (yyvsp[(3) - (4)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (4)].table_list), (yyvsp[(3) - (4)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1475:

/* Line 1455 of yacc.c  */
#line 10435 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
	    (yyvsp[(3) - (6)].table_list)->straight=(yyvsp[(2) - (6)].num);
            add_join_on((yyvsp[(3) - (6)].table_list),(yyvsp[(6) - (6)].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1476:

/* Line 1455 of yacc.c  */
#line 10443 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && (yyvsp[(3) - (4)].table_list));
          }
    break;

  case 1477:

/* Line 1455 of yacc.c  */
#line 10447 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
	    (yyvsp[(3) - (8)].table_list)->straight=(yyvsp[(2) - (8)].num);
            add_join_natural((yyvsp[(1) - (8)].table_list),(yyvsp[(3) - (8)].table_list),(yyvsp[(7) - (8)].string_list),Select); 
	    (yyval.table_list)=(yyvsp[(3) - (8)].table_list); 
          }
    break;

  case 1478:

/* Line 1455 of yacc.c  */
#line 10453 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && ((yyval.table_list)=(yyvsp[(4) - (4)].table_list)));
	    (yyvsp[(4) - (4)].table_list)->straight=(yyvsp[(3) - (4)].num);
            add_join_natural((yyvsp[(1) - (4)].table_list),(yyvsp[(4) - (4)].table_list),NULL,Select);
          }
    break;

  case 1479:

/* Line 1455 of yacc.c  */
#line 10462 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(5) - (6)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (6)].table_list), (yyvsp[(5) - (6)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1480:

/* Line 1455 of yacc.c  */
#line 10470 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            add_join_on((yyvsp[(5) - (8)].table_list),(yyvsp[(8) - (8)].item));
            Lex->pop_context();
            (yyvsp[(5) - (8)].table_list)->outer_join|=JOIN_TYPE_LEFT;
            (yyval.table_list)=(yyvsp[(5) - (8)].table_list);
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1481:

/* Line 1455 of yacc.c  */
#line 10478 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].table_list) && (yyvsp[(5) - (5)].table_list));
          }
    break;

  case 1482:

/* Line 1455 of yacc.c  */
#line 10482 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            add_join_natural((yyvsp[(1) - (10)].table_list),(yyvsp[(5) - (10)].table_list),(yyvsp[(9) - (10)].string_list),Select); 
            (yyvsp[(5) - (10)].table_list)->outer_join|=JOIN_TYPE_LEFT; 
            (yyval.table_list)=(yyvsp[(5) - (10)].table_list); 
          }
    break;

  case 1483:

/* Line 1455 of yacc.c  */
#line 10488 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(6) - (6)].table_list));
            add_join_natural((yyvsp[(1) - (6)].table_list),(yyvsp[(6) - (6)].table_list),NULL,Select);
            (yyvsp[(6) - (6)].table_list)->outer_join|=JOIN_TYPE_LEFT;
            (yyval.table_list)=(yyvsp[(6) - (6)].table_list);
          }
    break;

  case 1484:

/* Line 1455 of yacc.c  */
#line 10498 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(5) - (6)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (6)].table_list), (yyvsp[(5) - (6)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1485:

/* Line 1455 of yacc.c  */
#line 10506 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
            add_join_on((yyval.table_list), (yyvsp[(8) - (8)].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1486:

/* Line 1455 of yacc.c  */
#line 10515 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].table_list) && (yyvsp[(5) - (5)].table_list));
          }
    break;

  case 1487:

/* Line 1455 of yacc.c  */
#line 10519 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
            add_join_natural((yyval.table_list),(yyvsp[(5) - (10)].table_list),(yyvsp[(9) - (10)].string_list),Select);
          }
    break;

  case 1488:

/* Line 1455 of yacc.c  */
#line 10526 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(6) - (6)].table_list));
            add_join_natural((yyvsp[(6) - (6)].table_list),(yyvsp[(1) - (6)].table_list),NULL,Select);
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
          }
    break;

  case 1489:

/* Line 1455 of yacc.c  */
#line 10537 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1490:

/* Line 1455 of yacc.c  */
#line 10538 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1491:

/* Line 1455 of yacc.c  */
#line 10539 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num) = 1; }
    break;

  case 1492:

/* Line 1455 of yacc.c  */
#line 10543 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num) = (yyvsp[(1) - (1)].num); }
    break;

  case 1493:

/* Line 1455 of yacc.c  */
#line 10544 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1494:

/* Line 1455 of yacc.c  */
#line 10552 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.string_list)= 0;}
    break;

  case 1496:

/* Line 1455 of yacc.c  */
#line 10558 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.string_list)= (yyvsp[(3) - (5)].string_list);
          }
    break;

  case 1497:

/* Line 1455 of yacc.c  */
#line 10572 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->table_join_options= 0;
          }
    break;

  case 1498:

/* Line 1455 of yacc.c  */
#line 10577 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!((yyval.table_list)= Select->add_table_to_list(YYTHD, (yyvsp[(2) - (5)].table), (yyvsp[(4) - (5)].lex_str_ptr),
                                                Select->get_table_join_options(),
                                                YYPS->m_lock_type,
                                                YYPS->m_mdl_type,
                                                Select->pop_index_hints(),
                                                (yyvsp[(3) - (5)].string_list))))
              MYSQL_YYABORT;
            Select->add_joined_table((yyval.table_list));
          }
    break;

  case 1499:

/* Line 1455 of yacc.c  */
#line 10588 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if ((yyvsp[(1) - (3)].num))
            {
              if (sel->set_braces(1))
              {
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
              /* select in braces, can't contain global parameters */
              if (sel->master_unit()->fake_select_lex)
                sel->master_unit()->global_parameters=
                   sel->master_unit()->fake_select_lex;
            }
            if ((yyvsp[(2) - (3)].select_lex)->init_nested_join(lex->thd))
              MYSQL_YYABORT;
            (yyval.table_list)= 0;
            /* incomplete derived tables return NULL, we must be
               nested in select_derived rule to be here. */
          }
    break;

  case 1500:

/* Line 1455 of yacc.c  */
#line 10628 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* Use $2 instead of Lex->current_select as derived table will
               alter value of Lex->current_select. */
            if (!((yyvsp[(3) - (5)].table_list) || (yyvsp[(5) - (5)].lex_str_ptr)) && (yyvsp[(2) - (5)].select_lex)->embedding &&
                !(yyvsp[(2) - (5)].select_lex)->embedding->nested_join->join_list.elements)
            {
              /* we have a derived table ($3 == NULL) but no alias,
                 Since we are nested in further parentheses so we
                 can pass NULL to the outer level parentheses
                 Permits parsing of "((((select ...))) as xyz)" */
              (yyval.table_list)= 0;
            }
            else if (!(yyvsp[(3) - (5)].table_list))
            {
              /* Handle case of derived table, alias may be NULL if there
                 are no outer parentheses, add_table_to_list() will throw
                 error in this case */
              LEX *lex=Lex;
              SELECT_LEX *sel= lex->current_select;
              SELECT_LEX_UNIT *unit= sel->master_unit();
              lex->current_select= sel= unit->outer_select();
              Table_ident *ti= new Table_ident(unit);
              if (ti == NULL)
                MYSQL_YYABORT;
              if (!((yyval.table_list)= sel->add_table_to_list(lex->thd,
                                               ti, (yyvsp[(5) - (5)].lex_str_ptr), 0,
                                               TL_READ, MDL_SHARED_READ)))

                MYSQL_YYABORT;
              sel->add_joined_table((yyval.table_list));
              lex->pop_context();
              lex->nest_level--;
            }
            /*else if (($3->select_lex &&
                      $3->select_lex->master_unit()->is_union() &&
                      ($3->select_lex->master_unit()->first_select() ==
                       $3->select_lex || !$3->lifted)) || $5)*/
            else if ((yyvsp[(5) - (5)].lex_str_ptr) != NULL)
            {
              /*
                Tables with or without joins within parentheses cannot
                have aliases, and we ruled out derived tables above.
              */
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            else
            {
              /* nested join: FROM (t1 JOIN t2 ...),
                 nest_level is the same as in the outer query */
              (yyval.table_list)= (yyvsp[(3) - (5)].table_list);
            }
          }
    break;

  case 1501:

/* Line 1455 of yacc.c  */
#line 10704 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if ((yyvsp[(1) - (2)].table_list) && (yyvsp[(2) - (2)].is_not_empty))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1502:

/* Line 1455 of yacc.c  */
#line 10714 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_select_to_union_list(Lex, (bool)(yyvsp[(3) - (3)].num), FALSE))
              MYSQL_YYABORT;
          }
    break;

  case 1503:

/* Line 1455 of yacc.c  */
#line 10719 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              Remove from the name resolution context stack the context of the
              last select in the union.
             */
            Lex->pop_context();
          }
    break;

  case 1504:

/* Line 1455 of yacc.c  */
#line 10727 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if ((yyvsp[(1) - (7)].table_list) != NULL)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1505:

/* Line 1455 of yacc.c  */
#line 10739 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX * sel= lex->current_select;
            if (lex->current_select->set_braces(0))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (sel->linkage == UNION_TYPE &&
                sel->master_unit()->first_select()->braces)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1506:

/* Line 1455 of yacc.c  */
#line 10758 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->linkage != UNION_TYPE)
              mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 1507:

/* Line 1455 of yacc.c  */
#line 10766 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1509:

/* Line 1455 of yacc.c  */
#line 10775 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if ((yyvsp[(1) - (1)].select_lex)->init_nested_join(lex->thd))
              MYSQL_YYABORT;
          }
    break;

  case 1510:

/* Line 1455 of yacc.c  */
#line 10781 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            /* for normal joins, $3 != NULL and end_nested_join() != NULL,
               for derived tables, both must equal NULL */

            if (!((yyval.table_list)= (yyvsp[(1) - (3)].select_lex)->end_nested_join(lex->thd)) && (yyvsp[(3) - (3)].table_list))
              MYSQL_YYABORT;
            if (!(yyvsp[(3) - (3)].table_list) && (yyval.table_list))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1511:

/* Line 1455 of yacc.c  */
#line 10797 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->derived_tables|= DERIVED_SUBQUERY;
            if (!lex->expr_allows_subselect ||
                lex->sql_command == (int)SQLCOM_PURGE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE ||
                mysql_new_select(lex, 1))
              MYSQL_YYABORT;
            mysql_init_select(lex);
            lex->current_select->linkage= DERIVED_TABLE_TYPE;
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 1512:

/* Line 1455 of yacc.c  */
#line 10814 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1514:

/* Line 1455 of yacc.c  */
#line 10821 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.select_lex)= Select; }
    break;

  case 1515:

/* Line 1455 of yacc.c  */
#line 10826 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (! lex->parsing_options.allows_derived)
            {
              my_error(ER_VIEW_SELECT_DERIVED, MYF(0));
              MYSQL_YYABORT;
            }

            SELECT_LEX *sel= lex->current_select;
            TABLE_LIST *embedding;
            if (!sel->embedding || sel->end_nested_join(lex->thd))
            {
              /* we are not in parentheses */
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            embedding= Select->embedding;
            (yyval.num)= embedding &&
                !embedding->nested_join->join_list.elements;
            /* return true if we are deeply nested */
          }
    break;

  case 1516:

/* Line 1455 of yacc.c  */
#line 10851 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1517:

/* Line 1455 of yacc.c  */
#line 10852 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1518:

/* Line 1455 of yacc.c  */
#line 10857 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= YYTHD->variables.old_mode ?  INDEX_HINT_MASK_JOIN : INDEX_HINT_MASK_ALL; 
          }
    break;

  case 1519:

/* Line 1455 of yacc.c  */
#line 10860 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_JOIN;  }
    break;

  case 1520:

/* Line 1455 of yacc.c  */
#line 10861 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_ORDER; }
    break;

  case 1521:

/* Line 1455 of yacc.c  */
#line 10862 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_GROUP; }
    break;

  case 1522:

/* Line 1455 of yacc.c  */
#line 10866 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.index_hint)= INDEX_HINT_FORCE; }
    break;

  case 1523:

/* Line 1455 of yacc.c  */
#line 10867 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.index_hint)= INDEX_HINT_IGNORE; }
    break;

  case 1524:

/* Line 1455 of yacc.c  */
#line 10872 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->set_index_hint_type((yyvsp[(1) - (3)].index_hint), (yyvsp[(3) - (3)].num));
          }
    break;

  case 1526:

/* Line 1455 of yacc.c  */
#line 10877 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->set_index_hint_type(INDEX_HINT_USE, (yyvsp[(3) - (3)].num));
          }
    break;

  case 1531:

/* Line 1455 of yacc.c  */
#line 10890 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->alloc_index_hints(YYTHD); }
    break;

  case 1533:

/* Line 1455 of yacc.c  */
#line 10894 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {  Select->clear_index_hints(); }
    break;

  case 1535:

/* Line 1455 of yacc.c  */
#line 10899 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->add_index_hint(YYTHD, NULL, 0); }
    break;

  case 1536:

/* Line 1455 of yacc.c  */
#line 10900 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1537:

/* Line 1455 of yacc.c  */
#line 10905 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->add_index_hint(YYTHD, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length); }
    break;

  case 1538:

/* Line 1455 of yacc.c  */
#line 10907 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->add_index_hint(YYTHD, (char *)"PRIMARY", 7); }
    break;

  case 1541:

/* Line 1455 of yacc.c  */
#line 10917 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!((yyval.string_list)= new List<String>))
              MYSQL_YYABORT;
            String *s= new (YYTHD->mem_root) String((const char *) (yyvsp[(1) - (1)].lex_str).str,
                                                    (yyvsp[(1) - (1)].lex_str).length,
                                                    system_charset_info);
            if (s == NULL)
              MYSQL_YYABORT;
            (yyval.string_list)->push_back(s);
          }
    break;

  case 1542:

/* Line 1455 of yacc.c  */
#line 10928 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            String *s= new (YYTHD->mem_root) String((const char *) (yyvsp[(3) - (3)].lex_str).str,
                                                    (yyvsp[(3) - (3)].lex_str).length,
                                                    system_charset_info);
            if (s == NULL)
              MYSQL_YYABORT;
            (yyvsp[(1) - (3)].string_list)->push_back(s);
            (yyval.string_list)= (yyvsp[(1) - (3)].string_list);
          }
    break;

  case 1543:

/* Line 1455 of yacc.c  */
#line 10940 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1544:

/* Line 1455 of yacc.c  */
#line 10941 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_HOUR; }
    break;

  case 1545:

/* Line 1455 of yacc.c  */
#line 10942 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_MICROSECOND; }
    break;

  case 1546:

/* Line 1455 of yacc.c  */
#line 10943 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_MINUTE; }
    break;

  case 1547:

/* Line 1455 of yacc.c  */
#line 10944 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_SECOND; }
    break;

  case 1548:

/* Line 1455 of yacc.c  */
#line 10945 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_MICROSECOND; }
    break;

  case 1549:

/* Line 1455 of yacc.c  */
#line 10946 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_MINUTE; }
    break;

  case 1550:

/* Line 1455 of yacc.c  */
#line 10947 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_SECOND; }
    break;

  case 1551:

/* Line 1455 of yacc.c  */
#line 10948 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_MINUTE_MICROSECOND; }
    break;

  case 1552:

/* Line 1455 of yacc.c  */
#line 10949 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_MINUTE_SECOND; }
    break;

  case 1553:

/* Line 1455 of yacc.c  */
#line 10950 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_SECOND_MICROSECOND; }
    break;

  case 1554:

/* Line 1455 of yacc.c  */
#line 10951 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_YEAR_MONTH; }
    break;

  case 1555:

/* Line 1455 of yacc.c  */
#line 10955 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_DAY; }
    break;

  case 1556:

/* Line 1455 of yacc.c  */
#line 10956 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_WEEK; }
    break;

  case 1557:

/* Line 1455 of yacc.c  */
#line 10957 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_HOUR; }
    break;

  case 1558:

/* Line 1455 of yacc.c  */
#line 10958 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MINUTE; }
    break;

  case 1559:

/* Line 1455 of yacc.c  */
#line 10959 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MONTH; }
    break;

  case 1560:

/* Line 1455 of yacc.c  */
#line 10960 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_QUARTER; }
    break;

  case 1561:

/* Line 1455 of yacc.c  */
#line 10961 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_SECOND; }
    break;

  case 1562:

/* Line 1455 of yacc.c  */
#line 10962 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MICROSECOND; }
    break;

  case 1563:

/* Line 1455 of yacc.c  */
#line 10963 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_YEAR; }
    break;

  case 1564:

/* Line 1455 of yacc.c  */
#line 10967 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_DATE;}
    break;

  case 1565:

/* Line 1455 of yacc.c  */
#line 10968 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_TIME;}
    break;

  case 1566:

/* Line 1455 of yacc.c  */
#line 10969 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_DATETIME;}
    break;

  case 1567:

/* Line 1455 of yacc.c  */
#line 10970 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_DATETIME;}
    break;

  case 1571:

/* Line 1455 of yacc.c  */
#line 10980 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str_ptr)=0; }
    break;

  case 1572:

/* Line 1455 of yacc.c  */
#line 10982 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.lex_str_ptr)= (LEX_STRING*) sql_memdup(&(yyvsp[(2) - (2)].lex_str),sizeof(LEX_STRING));
            if ((yyval.lex_str_ptr) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1575:

/* Line 1455 of yacc.c  */
#line 10995 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->where= 0; }
    break;

  case 1576:

/* Line 1455 of yacc.c  */
#line 10997 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->parsing_place= IN_WHERE;
          }
    break;

  case 1577:

/* Line 1455 of yacc.c  */
#line 11001 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            SELECT_LEX *select= Select;
            select->where= normalize_cond((yyvsp[(3) - (3)].item));
            select->parsing_place= NO_MATTER;
            if ((yyvsp[(3) - (3)].item))
              (yyvsp[(3) - (3)].item)->top_level_item();
          }
    break;

  case 1579:

/* Line 1455 of yacc.c  */
#line 11013 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->parsing_place= IN_HAVING;
          }
    break;

  case 1580:

/* Line 1455 of yacc.c  */
#line 11017 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->having= normalize_cond((yyvsp[(3) - (3)].item));
            sel->parsing_place= NO_MATTER;
            if ((yyvsp[(3) - (3)].item))
              (yyvsp[(3) - (3)].item)->top_level_item();
          }
    break;

  case 1581:

/* Line 1455 of yacc.c  */
#line 11028 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->escape_used= TRUE;
            (yyval.item)= (yyvsp[(2) - (2)].item);
          }
    break;

  case 1582:

/* Line 1455 of yacc.c  */
#line 11033 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Lex->escape_used= FALSE;
            (yyval.item)= ((thd->variables.sql_mode & MODE_NO_BACKSLASH_ESCAPES) ?
                 new (thd->mem_root) Item_string("", 0, &my_charset_latin1) :
                 new (thd->mem_root) Item_string("\\", 1, &my_charset_latin1));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1585:

/* Line 1455 of yacc.c  */
#line 11055 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { if (add_group_to_list(YYTHD, (yyvsp[(3) - (4)].item),(bool) (yyvsp[(4) - (4)].num))) MYSQL_YYABORT; }
    break;

  case 1586:

/* Line 1455 of yacc.c  */
#line 11057 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { if (add_group_to_list(YYTHD, (yyvsp[(1) - (2)].item),(bool) (yyvsp[(2) - (2)].num))) MYSQL_YYABORT; }
    break;

  case 1587:

/* Line 1455 of yacc.c  */
#line 11061 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1588:

/* Line 1455 of yacc.c  */
#line 11063 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              'WITH CUBE' is reserved in the MySQL syntax, but not implemented,
              and cause LALR(2) conflicts.
              This syntax is not standard.
              MySQL syntax: GROUP BY col1, col2, col3 WITH CUBE
              SQL-2003: GROUP BY ... CUBE(col1, col2, col3)
            */
            LEX *lex=Lex;
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "WITH CUBE",
                       "global union parameters");
              MYSQL_YYABORT;
            }
            lex->current_select->olap= CUBE_TYPE;
            my_error(ER_NOT_SUPPORTED_YET, MYF(0), "CUBE");
            MYSQL_YYABORT;
          }
    break;

  case 1589:

/* Line 1455 of yacc.c  */
#line 11083 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              'WITH ROLLUP' is needed for backward compatibility,
              and cause LALR(2) conflicts.
              This syntax is not standard.
              MySQL syntax: GROUP BY col1, col2, col3 WITH ROLLUP
              SQL-2003: GROUP BY ... ROLLUP(col1, col2, col3)
            */
            LEX *lex= Lex;
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "WITH ROLLUP",
                       "global union parameters");
              MYSQL_YYABORT;
            }
            lex->current_select->olap= ROLLUP_TYPE;
          }
    break;

  case 1593:

/* Line 1455 of yacc.c  */
#line 11117 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            bool ascending= ((yyvsp[(2) - (2)].num) == 1) ? true : false;
            if (add_order_to_list(thd, (yyvsp[(1) - (2)].item), ascending))
              MYSQL_YYABORT;
          }
    break;

  case 1596:

/* Line 1455 of yacc.c  */
#line 11136 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            SELECT_LEX *sel= lex->current_select;
            SELECT_LEX_UNIT *unit= sel-> master_unit();
            if (sel->linkage != GLOBAL_OPTIONS_TYPE &&
                sel->olap != UNSPECIFIED_OLAP_TYPE &&
                (sel->linkage != UNION_TYPE || sel->braces))
            {
              my_error(ER_WRONG_USAGE, MYF(0),
                       "CUBE/ROLLUP", "ORDER BY");
              MYSQL_YYABORT;
            }
            if (lex->sql_command != SQLCOM_ALTER_TABLE && !unit->fake_select_lex)
            {
              /*
                A query of the of the form (SELECT ...) ORDER BY order_list is
                executed in the same way as the query
                SELECT ... ORDER BY order_list
                unless the SELECT construct contains ORDER BY or LIMIT clauses.
                Otherwise we create a fake SELECT_LEX if it has not been created
                yet.
              */
              SELECT_LEX *first_sl= unit->first_select();
              if (!unit->is_union() &&
                  (first_sl->order_list.elements || 
                   first_sl->select_limit) &&            
                  unit->add_fake_select_lex(lex->thd))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1598:

/* Line 1455 of yacc.c  */
#line 11171 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { if (add_order_to_list(YYTHD, (yyvsp[(3) - (4)].item),(bool) (yyvsp[(4) - (4)].num))) MYSQL_YYABORT; }
    break;

  case 1599:

/* Line 1455 of yacc.c  */
#line 11173 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { if (add_order_to_list(YYTHD, (yyvsp[(1) - (2)].item),(bool) (yyvsp[(2) - (2)].num))) MYSQL_YYABORT; }
    break;

  case 1600:

/* Line 1455 of yacc.c  */
#line 11177 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num) =  1; }
    break;

  case 1601:

/* Line 1455 of yacc.c  */
#line 11178 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num) =1; }
    break;

  case 1602:

/* Line 1455 of yacc.c  */
#line 11179 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num) =0; }
    break;

  case 1603:

/* Line 1455 of yacc.c  */
#line 11184 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            sel->offset_limit= 0;
            sel->select_limit= 0;
	    lex->limit_rows_examined= 0;
          }
    break;

  case 1604:

/* Line 1455 of yacc.c  */
#line 11191 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1605:

/* Line 1455 of yacc.c  */
#line 11195 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1606:

/* Line 1455 of yacc.c  */
#line 11196 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1607:

/* Line 1455 of yacc.c  */
#line 11201 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
          }
    break;

  case 1608:

/* Line 1455 of yacc.c  */
#line 11205 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
          }
    break;

  case 1609:

/* Line 1455 of yacc.c  */
#line 11209 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
          }
    break;

  case 1610:

/* Line 1455 of yacc.c  */
#line 11216 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(1) - (1)].item);
            sel->offset_limit= 0;
            sel->explicit_limit= 1;
          }
    break;

  case 1611:

/* Line 1455 of yacc.c  */
#line 11223 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(3) - (3)].item);
            sel->offset_limit= (yyvsp[(1) - (3)].item);
            sel->explicit_limit= 1;
          }
    break;

  case 1612:

/* Line 1455 of yacc.c  */
#line 11230 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(1) - (3)].item);
            sel->offset_limit= (yyvsp[(3) - (3)].item);
            sel->explicit_limit= 1;
          }
    break;

  case 1613:

/* Line 1455 of yacc.c  */
#line 11240 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
          Item_splocal *splocal;
          THD *thd= YYTHD;
          LEX *lex= thd->lex;
          Lex_input_stream *lip= & thd->m_parser_state->m_lip;
          sp_variable *spv;
          sp_pcontext *spc = lex->spcont;
          if (spc && (spv = spc->find_variable((yyvsp[(1) - (1)].lex_str), false)))
          {
            splocal= new (thd->mem_root)
              Item_splocal((yyvsp[(1) - (1)].lex_str), spv->offset, spv->type,
                  lip->get_tok_start() - lex->sphead->m_tmp_query,
                  lip->get_ptr() - lip->get_tok_start());
            if (splocal == NULL)
              MYSQL_YYABORT;
#ifndef DBUG_OFF
            splocal->m_sp= lex->sphead;
#endif
            lex->safe_to_cache_query=0;
          }
          else
          {
            my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
            MYSQL_YYABORT;
          }
          if (splocal->type() != Item::INT_ITEM)
          {
            my_error(ER_WRONG_SPVAR_TYPE_IN_LIMIT, MYF(0));
            MYSQL_YYABORT;
          }
          splocal->limit_clause_param= TRUE;
          (yyval.item)= splocal;
        }
    break;

  case 1614:

/* Line 1455 of yacc.c  */
#line 11274 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
          ((Item_param *) (yyvsp[(1) - (1)].item))->limit_clause_param= TRUE;
        }
    break;

  case 1615:

/* Line 1455 of yacc.c  */
#line 11278 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1616:

/* Line 1455 of yacc.c  */
#line 11284 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1617:

/* Line 1455 of yacc.c  */
#line 11290 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1618:

/* Line 1455 of yacc.c  */
#line 11299 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            LEX *lex=Lex;
            lex->limit_rows_examined= (yyvsp[(1) - (1)].item);
          }
    break;

  case 1619:

/* Line 1455 of yacc.c  */
#line 11306 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->current_select->select_limit= 0;
          }
    break;

  case 1620:

/* Line 1455 of yacc.c  */
#line 11311 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(2) - (2)].item);
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
            sel->explicit_limit= 1;
          }
    break;

  case 1621:

/* Line 1455 of yacc.c  */
#line 11317 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { my_parse_error(ER(ER_SYNTAX_ERROR)); MYSQL_YYABORT; }
    break;

  case 1622:

/* Line 1455 of yacc.c  */
#line 11318 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { my_parse_error(ER(ER_SYNTAX_ERROR)); MYSQL_YYABORT; }
    break;

  case 1623:

/* Line 1455 of yacc.c  */
#line 11322 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.num)= (int) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1624:

/* Line 1455 of yacc.c  */
#line 11323 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.num)= -(int) my_strtoll10((yyvsp[(2) - (2)].lex_str).str, (char**) 0, &error); }
    break;

  case 1625:

/* Line 1455 of yacc.c  */
#line 11324 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.num)= -(int) my_strtoll10((yyvsp[(2) - (2)].lex_str).str, (char**) 0, &error); }
    break;

  case 1626:

/* Line 1455 of yacc.c  */
#line 11328 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1627:

/* Line 1455 of yacc.c  */
#line 11329 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (ulong) strtol((yyvsp[(1) - (1)].lex_str).str, (char**) 0, 16); }
    break;

  case 1628:

/* Line 1455 of yacc.c  */
#line 11330 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1629:

/* Line 1455 of yacc.c  */
#line 11331 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1630:

/* Line 1455 of yacc.c  */
#line 11332 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1631:

/* Line 1455 of yacc.c  */
#line 11333 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1632:

/* Line 1455 of yacc.c  */
#line 11337 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1633:

/* Line 1455 of yacc.c  */
#line 11338 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (ulong) strtol((yyvsp[(1) - (1)].lex_str).str, (char**) 0, 16); }
    break;

  case 1634:

/* Line 1455 of yacc.c  */
#line 11339 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1635:

/* Line 1455 of yacc.c  */
#line 11340 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1636:

/* Line 1455 of yacc.c  */
#line 11341 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { MYSQL_YYABORT; }
    break;

  case 1637:

/* Line 1455 of yacc.c  */
#line 11345 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1638:

/* Line 1455 of yacc.c  */
#line 11346 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1639:

/* Line 1455 of yacc.c  */
#line 11347 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1640:

/* Line 1455 of yacc.c  */
#line 11348 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1641:

/* Line 1455 of yacc.c  */
#line 11349 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1642:

/* Line 1455 of yacc.c  */
#line 11353 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1643:

/* Line 1455 of yacc.c  */
#line 11354 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1644:

/* Line 1455 of yacc.c  */
#line 11355 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ulonglong_number)= strtoull((yyvsp[(1) - (1)].lex_str).str, (char**) 0, 16); }
    break;

  case 1645:

/* Line 1455 of yacc.c  */
#line 11356 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1646:

/* Line 1455 of yacc.c  */
#line 11357 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { MYSQL_YYABORT; }
    break;

  case 1647:

/* Line 1455 of yacc.c  */
#line 11362 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { my_parse_error(ER(ER_ONLY_INTEGERS_ALLOWED)); }
    break;

  case 1650:

/* Line 1455 of yacc.c  */
#line 11371 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.choice)= (yyvsp[(1) - (1)].ulong_num) != 0 ? HA_CHOICE_YES : HA_CHOICE_NO; }
    break;

  case 1651:

/* Line 1455 of yacc.c  */
#line 11372 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.choice)= HA_CHOICE_UNDEF; }
    break;

  case 1653:

/* Line 1455 of yacc.c  */
#line 11378 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            if (! lex->parsing_options.allows_select_procedure)
            {
              my_error(ER_VIEW_SELECT_CLAUSE, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }

            if (&lex->select_lex != lex->current_select)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "PROCEDURE", "subquery");
              MYSQL_YYABORT;
            }
            lex->proc_list.elements=0;
            lex->proc_list.first=0;
            lex->proc_list.next= &lex->proc_list.first;
            Item_field *item= new (YYTHD->mem_root)
                                Item_field(&lex->current_select->context,
                                           NULL, NULL, (yyvsp[(2) - (2)].lex_str).str);
            if (item == NULL)
              MYSQL_YYABORT;
            if (add_proc_to_list(lex->thd, item))
              MYSQL_YYABORT;
            Lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
          }
    break;

  case 1655:

/* Line 1455 of yacc.c  */
#line 11408 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1656:

/* Line 1455 of yacc.c  */
#line 11409 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1659:

/* Line 1455 of yacc.c  */
#line 11419 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (add_proc_to_list(thd, (yyvsp[(2) - (3)].item)))
              MYSQL_YYABORT;
            if (!(yyvsp[(2) - (3)].item)->name)
              (yyvsp[(2) - (3)].item)->set_name((yyvsp[(1) - (3)].simple_string), (uint) ((yyvsp[(3) - (3)].simple_string) - (yyvsp[(1) - (3)].simple_string)), thd->charset());
          }
    break;

  case 1660:

/* Line 1455 of yacc.c  */
#line 11430 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->describe && (!(lex->result= new select_dumpvar())))
              MYSQL_YYABORT;
          }
    break;

  case 1661:

/* Line 1455 of yacc.c  */
#line 11436 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1663:

/* Line 1455 of yacc.c  */
#line 11441 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1664:

/* Line 1455 of yacc.c  */
#line 11446 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->result) 
            {
              my_var *var= new my_var((yyvsp[(2) - (2)].lex_str),0,0,(enum_field_types)0);
              if (var == NULL)
                MYSQL_YYABORT;
              ((select_dumpvar *)lex->result)->var_list.push_back(var);
            }
            else
            {
              /*
                The parser won't create select_result instance only
                if it's an EXPLAIN.
              */
              DBUG_ASSERT(lex->describe);
            }
          }
    break;

  case 1665:

/* Line 1455 of yacc.c  */
#line 11465 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            sp_variable *t;

            if (!lex->spcont || !(t=lex->spcont->find_variable((yyvsp[(1) - (1)].lex_str), false)))
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (lex->result)
            {
              my_var *var= new my_var((yyvsp[(1) - (1)].lex_str),1,t->offset,t->type);
              if (var == NULL)
                MYSQL_YYABORT;
              ((select_dumpvar *)lex->result)->var_list.push_back(var);
#ifndef DBUG_OFF
              var->sp= lex->sphead;
#endif
            }
            else
            {
              /*
                The parser won't create select_result instance only
                if it's an EXPLAIN.
              */
              DBUG_ASSERT(lex->describe);
            }
          }
    break;

  case 1666:

/* Line 1455 of yacc.c  */
#line 11497 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (! Lex->parsing_options.allows_select_into)
            {
              my_error(ER_VIEW_SELECT_CLAUSE, MYF(0), "INTO");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1668:

/* Line 1455 of yacc.c  */
#line 11509 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
            if (!(lex->exchange= new sql_exchange((yyvsp[(2) - (2)].lex_str).str, 0)) ||
                !(lex->result= new select_export(lex->exchange)))
              MYSQL_YYABORT;
          }
    break;

  case 1669:

/* Line 1455 of yacc.c  */
#line 11517 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->exchange->cs= (yyvsp[(4) - (4)].charset); }
    break;

  case 1671:

/* Line 1455 of yacc.c  */
#line 11520 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->describe)
            {
              lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
              if (!(lex->exchange= new sql_exchange((yyvsp[(2) - (2)].lex_str).str,1)))
                MYSQL_YYABORT;
              if (!(lex->result= new select_dump(lex->exchange)))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1672:

/* Line 1455 of yacc.c  */
#line 11532 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
          }
    break;

  case 1673:

/* Line 1455 of yacc.c  */
#line 11543 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_DO;
            mysql_init_select(lex);
          }
    break;

  case 1674:

/* Line 1455 of yacc.c  */
#line 11549 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->insert_list= (yyvsp[(3) - (3)].item_list);
          }
    break;

  case 1675:

/* Line 1455 of yacc.c  */
#line 11560 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_DROP_TABLE;
            lex->drop_temporary= (yyvsp[(2) - (4)].num);
            lex->check_exists= (yyvsp[(4) - (4)].num);
            YYPS->m_lock_type= TL_UNLOCK;
            YYPS->m_mdl_type= MDL_EXCLUSIVE;
          }
    break;

  case 1676:

/* Line 1455 of yacc.c  */
#line 11569 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1677:

/* Line 1455 of yacc.c  */
#line 11570 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1678:

/* Line 1455 of yacc.c  */
#line 11571 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, (yyvsp[(4) - (7)].lex_str).str, (yyvsp[(3) - (7)].num));
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->sql_command= SQLCOM_DROP_INDEX;
            lex->alter_info.reset();
            lex->alter_info.flags= Alter_info::ALTER_DROP_INDEX;
            lex->alter_info.drop_list.push_back(ad);
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(6) - (7)].table), NULL,
                                                        TL_OPTION_UPDATING,
                                                        TL_READ_NO_INSERT,
                                                        MDL_SHARED_UPGRADABLE))
              MYSQL_YYABORT;
          }
    break;

  case 1679:

/* Line 1455 of yacc.c  */
#line 11587 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_DROP_DB;
            lex->check_exists=(yyvsp[(3) - (4)].num);
            lex->name= (yyvsp[(4) - (4)].lex_str);
          }
    break;

  case 1680:

/* Line 1455 of yacc.c  */
#line 11594 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_name *spname;
            if ((yyvsp[(4) - (6)].lex_str).str && check_db_name(&(yyvsp[(4) - (6)].lex_str)))
            {
               my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[(4) - (6)].lex_str).str);
               MYSQL_YYABORT;
            }
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_DROP_FUNCTION;
            lex->check_exists= (yyvsp[(3) - (6)].num);
            spname= new sp_name((yyvsp[(4) - (6)].lex_str), (yyvsp[(6) - (6)].lex_str), true);
            if (spname == NULL)
              MYSQL_YYABORT;
            spname->init_qname(thd);
            lex->spname= spname;
          }
    break;

  case 1681:

/* Line 1455 of yacc.c  */
#line 11617 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            LEX_STRING db= {0, 0};
            sp_name *spname;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            if (thd->db && lex->copy_db_to(&db.str, &db.length))
              MYSQL_YYABORT;
            lex->sql_command = SQLCOM_DROP_FUNCTION;
            lex->check_exists= (yyvsp[(3) - (4)].num);
            spname= new sp_name(db, (yyvsp[(4) - (4)].lex_str), false);
            if (spname == NULL)
              MYSQL_YYABORT;
            spname->init_qname(thd);
            lex->spname= spname;
          }
    break;

  case 1682:

/* Line 1455 of yacc.c  */
#line 11638 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_DROP_PROCEDURE;
            lex->check_exists= (yyvsp[(3) - (4)].num);
            lex->spname= (yyvsp[(4) - (4)].spname);
          }
    break;

  case 1683:

/* Line 1455 of yacc.c  */
#line 11650 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_DROP_USER;
          }
    break;

  case 1684:

/* Line 1455 of yacc.c  */
#line 11654 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DROP_VIEW;
            lex->check_exists= (yyvsp[(3) - (3)].num);
            YYPS->m_lock_type= TL_UNLOCK;
            YYPS->m_mdl_type= MDL_EXCLUSIVE;
          }
    break;

  case 1685:

/* Line 1455 of yacc.c  */
#line 11662 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1686:

/* Line 1455 of yacc.c  */
#line 11664 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->check_exists= (yyvsp[(3) - (4)].num);
            Lex->spname= (yyvsp[(4) - (4)].spname);
            Lex->sql_command = SQLCOM_DROP_EVENT;
          }
    break;

  case 1687:

/* Line 1455 of yacc.c  */
#line 11670 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DROP_TRIGGER;
            lex->check_exists= (yyvsp[(3) - (4)].num);
            lex->spname= (yyvsp[(4) - (4)].spname);
          }
    break;

  case 1688:

/* Line 1455 of yacc.c  */
#line 11677 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= DROP_TABLESPACE;
          }
    break;

  case 1689:

/* Line 1455 of yacc.c  */
#line 11682 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= DROP_LOGFILE_GROUP;
          }
    break;

  case 1690:

/* Line 1455 of yacc.c  */
#line 11687 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_DROP_SERVER;
            Lex->check_exists= (yyvsp[(3) - (4)].num);
            Lex->server_options.server_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->server_options.server_name_length= (yyvsp[(4) - (4)].lex_str).length;
          }
    break;

  case 1693:

/* Line 1455 of yacc.c  */
#line 11702 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (1)].table), NULL,
                                           TL_OPTION_UPDATING,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1694:

/* Line 1455 of yacc.c  */
#line 11713 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (2)].table), NULL,
                                           TL_OPTION_UPDATING,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type,
                                           NULL,
                                           (yyvsp[(2) - (2)].string_list)))
              MYSQL_YYABORT;
          }
    break;

  case 1697:

/* Line 1455 of yacc.c  */
#line 11731 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (1)].table), NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1698:

/* Line 1455 of yacc.c  */
#line 11742 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
          Lex->check_exists= FALSE;
          (yyval.num)= 0;
        }
    break;

  case 1699:

/* Line 1455 of yacc.c  */
#line 11747 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
          Lex->check_exists= TRUE;
          (yyval.num)= 1;
        }
    break;

  case 1700:

/* Line 1455 of yacc.c  */
#line 11754 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1701:

/* Line 1455 of yacc.c  */
#line 11755 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1702:

/* Line 1455 of yacc.c  */
#line 11763 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_INSERT;
            lex->duplicates= DUP_ERROR; 
            mysql_init_select(lex);
          }
    break;

  case 1703:

/* Line 1455 of yacc.c  */
#line 11771 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->set_lock_for_tables((yyvsp[(3) - (5)].lock_type));
            Lex->current_select= &Lex->select_lex;
          }
    break;

  case 1704:

/* Line 1455 of yacc.c  */
#line 11776 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1705:

/* Line 1455 of yacc.c  */
#line 11781 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_REPLACE;
            lex->duplicates= DUP_REPLACE;
            mysql_init_select(lex);
          }
    break;

  case 1706:

/* Line 1455 of yacc.c  */
#line 11788 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->set_lock_for_tables((yyvsp[(3) - (4)].lock_type));
            Lex->current_select= &Lex->select_lex;
          }
    break;

  case 1707:

/* Line 1455 of yacc.c  */
#line 11793 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1708:

/* Line 1455 of yacc.c  */
#line 11798 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              If it is SP we do not allow insert optimisation when result of
              insert visible only after the table unlocking but everyone can
              read table.
            */
            (yyval.lock_type)= (Lex->sphead ? TL_WRITE_DEFAULT : TL_WRITE_CONCURRENT_INSERT);
          }
    break;

  case 1709:

/* Line 1455 of yacc.c  */
#line 11806 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1710:

/* Line 1455 of yacc.c  */
#line 11808 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
          Lex->keyword_delayed_begin_offset= (uint)(YYLIP->get_tok_start() -
                                                    YYTHD->query());
          Lex->keyword_delayed_end_offset= Lex->keyword_delayed_begin_offset +
                                           YYLIP->yyLength() + 1;
          (yyval.lock_type)= TL_WRITE_DELAYED;
        }
    break;

  case 1711:

/* Line 1455 of yacc.c  */
#line 11815 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE; }
    break;

  case 1712:

/* Line 1455 of yacc.c  */
#line 11819 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lock_type)= (yyvsp[(1) - (1)].lock_type); }
    break;

  case 1713:

/* Line 1455 of yacc.c  */
#line 11821 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
          Lex->keyword_delayed_begin_offset= (uint)(YYLIP->get_tok_start() -
                                                    YYTHD->query());
          Lex->keyword_delayed_end_offset= Lex->keyword_delayed_begin_offset +
                                           YYLIP->yyLength() + 1;
          (yyval.lock_type)= TL_WRITE_DELAYED;
        }
    break;

  case 1714:

/* Line 1455 of yacc.c  */
#line 11831 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1715:

/* Line 1455 of yacc.c  */
#line 11832 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1716:

/* Line 1455 of yacc.c  */
#line 11837 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->field_list.empty();
            lex->many_values.empty();
            lex->insert_list=0;
          }
    break;

  case 1717:

/* Line 1455 of yacc.c  */
#line 11845 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1718:

/* Line 1455 of yacc.c  */
#line 11846 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1719:

/* Line 1455 of yacc.c  */
#line 11847 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1720:

/* Line 1455 of yacc.c  */
#line 11849 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!(lex->insert_list = new List_item) ||
                lex->many_values.push_back(lex->insert_list))
              MYSQL_YYABORT;
          }
    break;

  case 1722:

/* Line 1455 of yacc.c  */
#line 11859 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(3) - (3)].item)); }
    break;

  case 1723:

/* Line 1455 of yacc.c  */
#line 11860 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(1) - (1)].item)); }
    break;

  case 1724:

/* Line 1455 of yacc.c  */
#line 11864 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1725:

/* Line 1455 of yacc.c  */
#line 11865 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1726:

/* Line 1455 of yacc.c  */
#line 11867 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->set_braces(0);}
    break;

  case 1727:

/* Line 1455 of yacc.c  */
#line 11868 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1728:

/* Line 1455 of yacc.c  */
#line 11870 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 1729:

/* Line 1455 of yacc.c  */
#line 11871 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1734:

/* Line 1455 of yacc.c  */
#line 11886 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->field_list.push_back((yyvsp[(1) - (3)].item)) ||
                lex->insert_list->push_back((yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1735:

/* Line 1455 of yacc.c  */
#line 11895 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1736:

/* Line 1455 of yacc.c  */
#line 11896 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1737:

/* Line 1455 of yacc.c  */
#line 11900 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1738:

/* Line 1455 of yacc.c  */
#line 11901 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1739:

/* Line 1455 of yacc.c  */
#line 11906 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
              if (!(Lex->insert_list = new List_item))
                MYSQL_YYABORT;
          }
    break;

  case 1740:

/* Line 1455 of yacc.c  */
#line 11911 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->many_values.push_back(lex->insert_list))
              MYSQL_YYABORT;
          }
    break;

  case 1741:

/* Line 1455 of yacc.c  */
#line 11919 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1743:

/* Line 1455 of yacc.c  */
#line 11925 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->insert_list->push_back((yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1744:

/* Line 1455 of yacc.c  */
#line 11930 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->insert_list->push_back((yyvsp[(1) - (1)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1745:

/* Line 1455 of yacc.c  */
#line 11937 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item);}
    break;

  case 1746:

/* Line 1455 of yacc.c  */
#line 11939 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_default_value(Lex->current_context());
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1748:

/* Line 1455 of yacc.c  */
#line 11948 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->duplicates= DUP_UPDATE; }
    break;

  case 1750:

/* Line 1455 of yacc.c  */
#line 11956 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            mysql_init_select(lex);
            lex->sql_command= SQLCOM_UPDATE;
            lex->duplicates= DUP_ERROR; 
          }
    break;

  case 1751:

/* Line 1455 of yacc.c  */
#line 11964 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->select_lex.table_list.elements > 1)
              lex->sql_command= SQLCOM_UPDATE_MULTI;
            else if (lex->select_lex.get_table_list()->derived)
            {
              /* it is single table update and it is update of derived table */
              my_error(ER_NON_UPDATABLE_TABLE, MYF(0),
                       lex->select_lex.get_table_list()->alias, "UPDATE");
              MYSQL_YYABORT;
            }
            /*
              In case of multi-update setting write lock for all tables may
              be too pessimistic. We will decrease lock level if possible in
              mysql_multi_update().
            */
            Select->set_lock_for_tables((yyvsp[(3) - (7)].lock_type));
          }
    break;

  case 1752:

/* Line 1455 of yacc.c  */
#line 11982 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1755:

/* Line 1455 of yacc.c  */
#line 11992 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_item_to_list(YYTHD, (yyvsp[(1) - (3)].item)) || add_value_to_list(YYTHD, (yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1758:

/* Line 1455 of yacc.c  */
#line 12005 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
          LEX *lex= Lex;
          if (lex->update_list.push_back((yyvsp[(1) - (3)].item)) || 
              lex->value_list.push_back((yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1759:

/* Line 1455 of yacc.c  */
#line 12014 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_DEFAULT; }
    break;

  case 1760:

/* Line 1455 of yacc.c  */
#line 12015 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1761:

/* Line 1455 of yacc.c  */
#line 12022 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DELETE;
            mysql_init_select(lex);
            YYPS->m_lock_type= TL_WRITE_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_WRITE;

            lex->ignore= 0;
            lex->select_lex.init_order();
          }
    break;

  case 1763:

/* Line 1455 of yacc.c  */
#line 12037 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(2) - (3)].table), NULL, TL_OPTION_UPDATING,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type,
                                           NULL,
                                           (yyvsp[(3) - (3)].string_list)))
              MYSQL_YYABORT;
            YYPS->m_lock_type= TL_READ_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_READ;
          }
    break;

  case 1764:

/* Line 1455 of yacc.c  */
#line 12048 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1765:

/* Line 1455 of yacc.c  */
#line 12050 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            mysql_init_multi_delete(Lex);
            YYPS->m_lock_type= TL_READ_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_READ;
          }
    break;

  case 1766:

/* Line 1455 of yacc.c  */
#line 12056 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (multi_delete_set_locks_and_link_aux_tables(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1767:

/* Line 1455 of yacc.c  */
#line 12061 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            mysql_init_multi_delete(Lex);
            YYPS->m_lock_type= TL_READ_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_READ;
          }
    break;

  case 1768:

/* Line 1455 of yacc.c  */
#line 12067 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (multi_delete_set_locks_and_link_aux_tables(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1771:

/* Line 1455 of yacc.c  */
#line 12080 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Table_ident *ti= new Table_ident((yyvsp[(1) - (2)].lex_str));
            if (ti == NULL)
              MYSQL_YYABORT;
            if (!Select->add_table_to_list(YYTHD,
                                           ti,
                                           NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1772:

/* Line 1455 of yacc.c  */
#line 12093 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Table_ident *ti= new Table_ident(YYTHD, (yyvsp[(1) - (4)].lex_str), (yyvsp[(3) - (4)].lex_str), 0);
            if (ti == NULL)
              MYSQL_YYABORT;
            if (!Select->add_table_to_list(YYTHD,
                                           ti,
                                           NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1773:

/* Line 1455 of yacc.c  */
#line 12108 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1774:

/* Line 1455 of yacc.c  */
#line 12109 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1775:

/* Line 1455 of yacc.c  */
#line 12113 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1776:

/* Line 1455 of yacc.c  */
#line 12114 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1777:

/* Line 1455 of yacc.c  */
#line 12118 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->options|= OPTION_QUICK; }
    break;

  case 1778:

/* Line 1455 of yacc.c  */
#line 12119 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { YYPS->m_lock_type= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1779:

/* Line 1455 of yacc.c  */
#line 12120 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ignore= 1; }
    break;

  case 1780:

/* Line 1455 of yacc.c  */
#line 12125 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX* lex= Lex;
            lex->sql_command= SQLCOM_TRUNCATE;
            lex->alter_info.reset();
            lex->select_lex.options= 0;
            lex->select_lex.sql_cache= SELECT_LEX::SQL_CACHE_UNSPECIFIED;
            lex->select_lex.init_order();
            YYPS->m_lock_type= TL_WRITE;
            YYPS->m_mdl_type= MDL_EXCLUSIVE;
          }
    break;

  case 1781:

/* Line 1455 of yacc.c  */
#line 12136 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_truncate_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1788:

/* Line 1455 of yacc.c  */
#line 12161 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_CPU;
    }
    break;

  case 1789:

/* Line 1455 of yacc.c  */
#line 12165 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_MEMORY;
    }
    break;

  case 1790:

/* Line 1455 of yacc.c  */
#line 12169 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_BLOCK_IO;
    }
    break;

  case 1791:

/* Line 1455 of yacc.c  */
#line 12173 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_CONTEXT;
    }
    break;

  case 1792:

/* Line 1455 of yacc.c  */
#line 12177 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_PAGE_FAULTS;
    }
    break;

  case 1793:

/* Line 1455 of yacc.c  */
#line 12181 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_IPC;
    }
    break;

  case 1794:

/* Line 1455 of yacc.c  */
#line 12185 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_SWAPS;
    }
    break;

  case 1795:

/* Line 1455 of yacc.c  */
#line 12189 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_SOURCE;
    }
    break;

  case 1796:

/* Line 1455 of yacc.c  */
#line 12193 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_ALL;
    }
    break;

  case 1797:

/* Line 1455 of yacc.c  */
#line 12200 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
      Lex->profile_query_id= 0;
    }
    break;

  case 1798:

/* Line 1455 of yacc.c  */
#line 12204 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
      Lex->profile_query_id= atoi((yyvsp[(3) - (3)].lex_str).str);
    }
    break;

  case 1799:

/* Line 1455 of yacc.c  */
#line 12213 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->wild=0;
            lex->ident=null_lex_str;
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
            bzero((char*) &lex->create_info,sizeof(lex->create_info));
          }
    break;

  case 1800:

/* Line 1455 of yacc.c  */
#line 12222 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1801:

/* Line 1455 of yacc.c  */
#line 12229 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_DATABASES;
             if (prepare_schema_table(YYTHD, lex, 0, SCH_SCHEMATA))
               MYSQL_YYABORT;
           }
    break;

  case 1802:

/* Line 1455 of yacc.c  */
#line 12236 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TABLES;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_TABLE_NAMES))
               MYSQL_YYABORT;
           }
    break;

  case 1803:

/* Line 1455 of yacc.c  */
#line 12244 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TRIGGERS;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_TRIGGERS))
               MYSQL_YYABORT;
           }
    break;

  case 1804:

/* Line 1455 of yacc.c  */
#line 12252 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_EVENTS;
             lex->select_lex.db= (yyvsp[(2) - (3)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_EVENTS))
               MYSQL_YYABORT;
           }
    break;

  case 1805:

/* Line 1455 of yacc.c  */
#line 12260 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TABLE_STATUS;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_TABLES))
               MYSQL_YYABORT;
           }
    break;

  case 1806:

/* Line 1455 of yacc.c  */
#line 12268 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_OPEN_TABLES;
            lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
            if (prepare_schema_table(YYTHD, lex, 0, SCH_OPEN_TABLES))
              MYSQL_YYABORT;
          }
    break;

  case 1807:

/* Line 1455 of yacc.c  */
#line 12276 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_PLUGINS;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_PLUGINS))
              MYSQL_YYABORT;
          }
    break;

  case 1808:

/* Line 1455 of yacc.c  */
#line 12283 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->ident= (yyvsp[(3) - (3)].lex_str);
            Lex->sql_command= SQLCOM_SHOW_PLUGINS;
            if (prepare_schema_table(YYTHD, Lex, 0, SCH_ALL_PLUGINS))
              MYSQL_YYABORT;
          }
    break;

  case 1809:

/* Line 1455 of yacc.c  */
#line 12290 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_SHOW_PLUGINS;
            if (prepare_schema_table(YYTHD, Lex, 0, SCH_ALL_PLUGINS))
              MYSQL_YYABORT;
          }
    break;

  case 1810:

/* Line 1455 of yacc.c  */
#line 12296 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_info.db_type= (yyvsp[(2) - (3)].db_type); }
    break;

  case 1811:

/* Line 1455 of yacc.c  */
#line 12298 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_info.db_type= NULL; }
    break;

  case 1812:

/* Line 1455 of yacc.c  */
#line 12300 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_FIELDS;
            if ((yyvsp[(5) - (6)].simple_string))
              (yyvsp[(4) - (6)].table)->change_db((yyvsp[(5) - (6)].simple_string));
            if (prepare_schema_table(YYTHD, lex, (yyvsp[(4) - (6)].table), SCH_COLUMNS))
              MYSQL_YYABORT;
          }
    break;

  case 1813:

/* Line 1455 of yacc.c  */
#line 12309 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_BINLOGS;
          }
    break;

  case 1814:

/* Line 1455 of yacc.c  */
#line 12313 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_SLAVE_HOSTS;
          }
    break;

  case 1815:

/* Line 1455 of yacc.c  */
#line 12317 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_BINLOG_EVENTS;
          }
    break;

  case 1817:

/* Line 1455 of yacc.c  */
#line 12322 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_RELAYLOG_EVENTS;
          }
    break;

  case 1819:

/* Line 1455 of yacc.c  */
#line 12327 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_KEYS;
            if ((yyvsp[(4) - (5)].simple_string))
              (yyvsp[(3) - (5)].table)->change_db((yyvsp[(4) - (5)].simple_string));
            if (prepare_schema_table(YYTHD, lex, (yyvsp[(3) - (5)].table), SCH_STATISTICS))
              MYSQL_YYABORT;
          }
    break;

  case 1820:

/* Line 1455 of yacc.c  */
#line 12336 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_STORAGE_ENGINES;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_ENGINES))
              MYSQL_YYABORT;
          }
    break;

  case 1821:

/* Line 1455 of yacc.c  */
#line 12343 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_AUTHORS;
            push_warning_printf(YYTHD, Sql_condition::WARN_LEVEL_WARN,
                                ER_WARN_DEPRECATED_SYNTAX_NO_REPLACEMENT,
                                ER(ER_WARN_DEPRECATED_SYNTAX_NO_REPLACEMENT),
                                "SHOW AUTHORS");
          }
    break;

  case 1822:

/* Line 1455 of yacc.c  */
#line 12352 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_CONTRIBUTORS;
            push_warning_printf(YYTHD, Sql_condition::WARN_LEVEL_WARN,
                                ER_WARN_DEPRECATED_SYNTAX_NO_REPLACEMENT,
                                ER(ER_WARN_DEPRECATED_SYNTAX_NO_REPLACEMENT),
                                "SHOW CONTRIBUTORS");
          }
    break;

  case 1823:

/* Line 1455 of yacc.c  */
#line 12361 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_PRIVILEGES;
          }
    break;

  case 1824:

/* Line 1455 of yacc.c  */
#line 12366 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (void) create_select_for_variable("warning_count"); }
    break;

  case 1825:

/* Line 1455 of yacc.c  */
#line 12368 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (void) create_select_for_variable("error_count"); }
    break;

  case 1826:

/* Line 1455 of yacc.c  */
#line 12370 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sql_command = SQLCOM_SHOW_WARNS;}
    break;

  case 1827:

/* Line 1455 of yacc.c  */
#line 12372 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sql_command = SQLCOM_SHOW_ERRORS;}
    break;

  case 1828:

/* Line 1455 of yacc.c  */
#line 12374 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sql_command = SQLCOM_SHOW_PROFILES; }
    break;

  case 1829:

/* Line 1455 of yacc.c  */
#line 12376 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_PROFILE;
            if (prepare_schema_table(YYTHD, lex, NULL, SCH_PROFILES) != 0)
              YYABORT;
          }
    break;

  case 1830:

/* Line 1455 of yacc.c  */
#line 12383 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS;
            lex->option_type= (yyvsp[(1) - (3)].var_type);
            if (prepare_schema_table(YYTHD, lex, 0, SCH_STATUS))
              MYSQL_YYABORT;
          }
    break;

  case 1831:

/* Line 1455 of yacc.c  */
#line 12391 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_PROCESSLIST;}
    break;

  case 1832:

/* Line 1455 of yacc.c  */
#line 12393 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_VARIABLES;
            lex->option_type= (yyvsp[(1) - (3)].var_type);
            if (prepare_schema_table(YYTHD, lex, 0, SCH_VARIABLES))
              MYSQL_YYABORT;
          }
    break;

  case 1833:

/* Line 1455 of yacc.c  */
#line 12401 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_CHARSETS;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_CHARSETS))
              MYSQL_YYABORT;
          }
    break;

  case 1834:

/* Line 1455 of yacc.c  */
#line 12408 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_COLLATIONS;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_COLLATIONS))
              MYSQL_YYABORT;
          }
    break;

  case 1835:

/* Line 1455 of yacc.c  */
#line 12415 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_GRANTS;
            LEX_USER *curr_user;
            if (!(curr_user= (LEX_USER*) lex->thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            bzero(curr_user, sizeof(st_lex_user));
            lex->grant_user= curr_user;
          }
    break;

  case 1836:

/* Line 1455 of yacc.c  */
#line 12425 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_GRANTS;
            lex->grant_user=(yyvsp[(3) - (3)].lex_user);
            lex->grant_user->password=null_lex_str;
          }
    break;

  case 1837:

/* Line 1455 of yacc.c  */
#line 12432 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command=SQLCOM_SHOW_CREATE_DB;
            Lex->create_info.options=(yyvsp[(3) - (4)].num);
            Lex->name= (yyvsp[(4) - (4)].lex_str);
          }
    break;

  case 1838:

/* Line 1455 of yacc.c  */
#line 12438 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_SHOW_CREATE;
            if (!lex->select_lex.add_table_to_list(YYTHD, (yyvsp[(3) - (3)].table), NULL,0))
              MYSQL_YYABORT;
            lex->only_view= 0;
            lex->create_info.storage_media= HA_SM_DEFAULT;
          }
    break;

  case 1839:

/* Line 1455 of yacc.c  */
#line 12447 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_SHOW_CREATE;
            if (!lex->select_lex.add_table_to_list(YYTHD, (yyvsp[(3) - (3)].table), NULL, 0))
              MYSQL_YYABORT;
            lex->only_view= 1;
          }
    break;

  case 1840:

/* Line 1455 of yacc.c  */
#line 12455 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_MASTER_STAT;
          }
    break;

  case 1841:

/* Line 1455 of yacc.c  */
#line 12459 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_SLAVE_STAT;
            Lex->verbose= 1;
          }
    break;

  case 1842:

/* Line 1455 of yacc.c  */
#line 12464 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->mi.connection_name= thd->variables.default_master_connection;
            lex->sql_command = SQLCOM_SHOW_SLAVE_STAT;
            lex->verbose= 0;
          }
    break;

  case 1843:

/* Line 1455 of yacc.c  */
#line 12472 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_SLAVE_STAT;
            Lex->verbose= 0;
          }
    break;

  case 1844:

/* Line 1455 of yacc.c  */
#line 12477 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
           LEX *lex= Lex;
           lex->sql_command= SQLCOM_SHOW_CLIENT_STATS;
           if (prepare_schema_table(YYTHD, lex, 0, SCH_CLIENT_STATS))
             MYSQL_YYABORT;
          }
    break;

  case 1845:

/* Line 1455 of yacc.c  */
#line 12484 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_USER_STATS;
             if (prepare_schema_table(YYTHD, lex, 0, SCH_USER_STATS))
               MYSQL_YYABORT;
          }
    break;

  case 1846:

/* Line 1455 of yacc.c  */
#line 12491 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TABLE_STATS;
             if (prepare_schema_table(YYTHD, lex, 0, SCH_TABLE_STATS))
               MYSQL_YYABORT;
          }
    break;

  case 1847:

/* Line 1455 of yacc.c  */
#line 12498 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_INDEX_STATS;
             if (prepare_schema_table(YYTHD, lex, 0, SCH_INDEX_STATS))
               MYSQL_YYABORT;
          }
    break;

  case 1848:

/* Line 1455 of yacc.c  */
#line 12505 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sql_command = SQLCOM_SHOW_CREATE_PROC;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1849:

/* Line 1455 of yacc.c  */
#line 12512 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sql_command = SQLCOM_SHOW_CREATE_FUNC;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1850:

/* Line 1455 of yacc.c  */
#line 12519 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_CREATE_TRIGGER;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1851:

/* Line 1455 of yacc.c  */
#line 12525 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS_PROC;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_PROCEDURES))
              MYSQL_YYABORT;
          }
    break;

  case 1852:

/* Line 1455 of yacc.c  */
#line 12532 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS_FUNC;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_PROCEDURES))
              MYSQL_YYABORT;
          }
    break;

  case 1853:

/* Line 1455 of yacc.c  */
#line 12539 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_SHOW_PROC_CODE;
            Lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1854:

/* Line 1455 of yacc.c  */
#line 12544 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_SHOW_FUNC_CODE;
            Lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1855:

/* Line 1455 of yacc.c  */
#line 12549 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->spname= (yyvsp[(3) - (3)].spname);
            Lex->sql_command = SQLCOM_SHOW_CREATE_EVENT;
          }
    break;

  case 1856:

/* Line 1455 of yacc.c  */
#line 12554 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Lex->sql_command= SQLCOM_SHOW_EXPLAIN;
            if (prepare_schema_table(thd, Lex, 0, SCH_EXPLAIN))
              MYSQL_YYABORT;
            add_value_to_list(thd, (yyvsp[(3) - (3)].item));
          }
    break;

  case 1857:

/* Line 1455 of yacc.c  */
#line 12565 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_STATUS; }
    break;

  case 1858:

/* Line 1455 of yacc.c  */
#line 12567 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_MUTEX; }
    break;

  case 1859:

/* Line 1455 of yacc.c  */
#line 12569 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_LOGS; }
    break;

  case 1864:

/* Line 1455 of yacc.c  */
#line 12583 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.simple_string)= 0; }
    break;

  case 1865:

/* Line 1455 of yacc.c  */
#line 12584 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.simple_string)= (yyvsp[(2) - (2)].lex_str).str; }
    break;

  case 1866:

/* Line 1455 of yacc.c  */
#line 12588 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->verbose=0; }
    break;

  case 1867:

/* Line 1455 of yacc.c  */
#line 12589 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->verbose=1; }
    break;

  case 1870:

/* Line 1455 of yacc.c  */
#line 12598 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->mi.log_file_name = 0; }
    break;

  case 1871:

/* Line 1455 of yacc.c  */
#line 12599 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->mi.log_file_name = (yyvsp[(2) - (2)].lex_str).str; }
    break;

  case 1872:

/* Line 1455 of yacc.c  */
#line 12603 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->mi.pos = 4; /* skip magic number */ }
    break;

  case 1873:

/* Line 1455 of yacc.c  */
#line 12604 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->mi.pos = (yyvsp[(2) - (2)].ulonglong_number); }
    break;

  case 1875:

/* Line 1455 of yacc.c  */
#line 12610 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->wild= new (YYTHD->mem_root) String((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length,
                                                    system_charset_info);
            if (Lex->wild == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1876:

/* Line 1455 of yacc.c  */
#line 12617 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->where= normalize_cond((yyvsp[(2) - (2)].item));
            if ((yyvsp[(2) - (2)].item))
              (yyvsp[(2) - (2)].item)->top_level_item();
          }
    break;

  case 1877:

/* Line 1455 of yacc.c  */
#line 12627 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
            lex->sql_command= SQLCOM_SHOW_FIELDS;
            lex->select_lex.db= 0;
            lex->verbose= 0;
            if (prepare_schema_table(YYTHD, lex, (yyvsp[(2) - (2)].table), SCH_COLUMNS))
              MYSQL_YYABORT;
          }
    break;

  case 1878:

/* Line 1455 of yacc.c  */
#line 12638 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1879:

/* Line 1455 of yacc.c  */
#line 12642 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->describe|= DESCRIBE_NORMAL; }
    break;

  case 1880:

/* Line 1455 of yacc.c  */
#line 12644 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->select_lex.options|= SELECT_DESCRIBE;
          }
    break;

  case 1883:

/* Line 1455 of yacc.c  */
#line 12656 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1884:

/* Line 1455 of yacc.c  */
#line 12657 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->describe|= DESCRIBE_EXTENDED; }
    break;

  case 1885:

/* Line 1455 of yacc.c  */
#line 12658 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->describe|= DESCRIBE_PARTITIONS; }
    break;

  case 1886:

/* Line 1455 of yacc.c  */
#line 12662 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1887:

/* Line 1455 of yacc.c  */
#line 12663 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->wild= (yyvsp[(1) - (1)].string); }
    break;

  case 1888:

/* Line 1455 of yacc.c  */
#line 12665 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->wild= new (YYTHD->mem_root) String((const char*) (yyvsp[(1) - (1)].lex_str).str,
                                                    (yyvsp[(1) - (1)].lex_str).length,
                                                    system_charset_info);
            if (Lex->wild == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1889:

/* Line 1455 of yacc.c  */
#line 12679 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_FLUSH;
            lex->type= 0;
            lex->no_write_to_binlog= (yyvsp[(2) - (2)].num);
          }
    break;

  case 1890:

/* Line 1455 of yacc.c  */
#line 12686 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1891:

/* Line 1455 of yacc.c  */
#line 12691 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->type|= REFRESH_TABLES;
            /*
              Set type of metadata and table locks for
              FLUSH TABLES table_list [WITH READ LOCK].
            */
            YYPS->m_lock_type= TL_READ_NO_INSERT;
            YYPS->m_mdl_type= MDL_SHARED_HIGH_PRIO;
          }
    break;

  case 1892:

/* Line 1455 of yacc.c  */
#line 12700 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1893:

/* Line 1455 of yacc.c  */
#line 12701 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1895:

/* Line 1455 of yacc.c  */
#line 12706 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1896:

/* Line 1455 of yacc.c  */
#line 12708 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            TABLE_LIST *tables= Lex->query_tables;
            Lex->type|= REFRESH_READ_LOCK | (yyvsp[(4) - (4)].num);
            for (; tables; tables= tables->next_global)
            {
              tables->mdl_request.set_type(MDL_SHARED_NO_WRITE);
              tables->required_type= FRMTYPE_TABLE; /* Don't try to flush views. */
              tables->open_type= OT_BASE_ONLY;      /* Ignore temporary tables. */
            }
          }
    break;

  case 1898:

/* Line 1455 of yacc.c  */
#line 12723 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1899:

/* Line 1455 of yacc.c  */
#line 12728 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_ERROR_LOG; }
    break;

  case 1900:

/* Line 1455 of yacc.c  */
#line 12730 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_ENGINE_LOG; }
    break;

  case 1901:

/* Line 1455 of yacc.c  */
#line 12732 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_GENERAL_LOG; }
    break;

  case 1902:

/* Line 1455 of yacc.c  */
#line 12734 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_SLOW_LOG; }
    break;

  case 1903:

/* Line 1455 of yacc.c  */
#line 12736 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_BINARY_LOG; }
    break;

  case 1904:

/* Line 1455 of yacc.c  */
#line 12738 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->type & REFRESH_RELAY_LOG)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "FLUSH", "RELAY LOGS");
              MYSQL_YYABORT;
	    }
            lex->type|= REFRESH_RELAY_LOG;
            lex->relay_log_connection_name= lex->mi.connection_name;
           }
    break;

  case 1905:

/* Line 1455 of yacc.c  */
#line 12749 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_QUERY_CACHE_FREE; }
    break;

  case 1906:

/* Line 1455 of yacc.c  */
#line 12751 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_HOSTS; }
    break;

  case 1907:

/* Line 1455 of yacc.c  */
#line 12753 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_GRANT; }
    break;

  case 1908:

/* Line 1455 of yacc.c  */
#line 12755 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->type|= REFRESH_LOG;
            Lex->relay_log_connection_name.str= (char*) "";
            Lex->relay_log_connection_name.length= 0;
          }
    break;

  case 1909:

/* Line 1455 of yacc.c  */
#line 12761 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_STATUS; }
    break;

  case 1910:

/* Line 1455 of yacc.c  */
#line 12763 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            LEX *lex= Lex;
            if (lex->type & REFRESH_SLAVE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "FLUSH","SLAVE");
              MYSQL_YYABORT;
	    }
            lex->type|= REFRESH_SLAVE;
            lex->reset_slave_info.all= false;
          }
    break;

  case 1911:

/* Line 1455 of yacc.c  */
#line 12774 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_CLIENT_STATS; }
    break;

  case 1912:

/* Line 1455 of yacc.c  */
#line 12776 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_USER_STATS; }
    break;

  case 1913:

/* Line 1455 of yacc.c  */
#line 12778 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_TABLE_STATS; }
    break;

  case 1914:

/* Line 1455 of yacc.c  */
#line 12780 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_INDEX_STATS; }
    break;

  case 1915:

/* Line 1455 of yacc.c  */
#line 12782 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_MASTER; }
    break;

  case 1916:

/* Line 1455 of yacc.c  */
#line 12784 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_DES_KEY_FILE; }
    break;

  case 1917:

/* Line 1455 of yacc.c  */
#line 12786 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_USER_RESOURCES; }
    break;

  case 1918:

/* Line 1455 of yacc.c  */
#line 12790 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1919:

/* Line 1455 of yacc.c  */
#line 12791 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1920:

/* Line 1455 of yacc.c  */
#line 12795 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {(yyval.num)= 0;}
    break;

  case 1921:

/* Line 1455 of yacc.c  */
#line 12796 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {(yyval.num)= REFRESH_CHECKPOINT; }
    break;

  case 1922:

/* Line 1455 of yacc.c  */
#line 12800 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_RESET; lex->type=0;
          }
    break;

  case 1923:

/* Line 1455 of yacc.c  */
#line 12805 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1926:

/* Line 1455 of yacc.c  */
#line 12814 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_SLAVE; }
    break;

  case 1927:

/* Line 1455 of yacc.c  */
#line 12816 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { }
    break;

  case 1928:

/* Line 1455 of yacc.c  */
#line 12817 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_MASTER; }
    break;

  case 1929:

/* Line 1455 of yacc.c  */
#line 12818 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_QUERY_CACHE;}
    break;

  case 1930:

/* Line 1455 of yacc.c  */
#line 12822 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->reset_slave_info.all= false; }
    break;

  case 1931:

/* Line 1455 of yacc.c  */
#line 12823 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->reset_slave_info.all= true; }
    break;

  case 1932:

/* Line 1455 of yacc.c  */
#line 12828 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type=0;
            lex->sql_command = SQLCOM_PURGE;
          }
    break;

  case 1933:

/* Line 1455 of yacc.c  */
#line 12834 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1935:

/* Line 1455 of yacc.c  */
#line 12843 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->to_log = (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 1936:

/* Line 1455 of yacc.c  */
#line 12847 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->value_list.empty();
            lex->value_list.push_front((yyvsp[(2) - (2)].item));
            lex->sql_command= SQLCOM_PURGE_BEFORE;
          }
    break;

  case 1937:

/* Line 1455 of yacc.c  */
#line 12859 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->value_list.empty();
            lex->users_list.empty();
            lex->sql_command= SQLCOM_KILL;
          }
    break;

  case 1938:

/* Line 1455 of yacc.c  */
#line 12866 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->kill_signal= (killed_state) ((yyvsp[(3) - (5)].num) | (yyvsp[(4) - (5)].num));
          }
    break;

  case 1939:

/* Line 1455 of yacc.c  */
#line 12872 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= (int) KILL_HARD_BIT; }
    break;

  case 1940:

/* Line 1455 of yacc.c  */
#line 12873 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= (int) KILL_HARD_BIT; }
    break;

  case 1941:

/* Line 1455 of yacc.c  */
#line 12874 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1942:

/* Line 1455 of yacc.c  */
#line 12877 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= (int) KILL_CONNECTION; }
    break;

  case 1943:

/* Line 1455 of yacc.c  */
#line 12878 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= (int) KILL_CONNECTION; }
    break;

  case 1944:

/* Line 1455 of yacc.c  */
#line 12879 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= (int) KILL_QUERY; }
    break;

  case 1945:

/* Line 1455 of yacc.c  */
#line 12884 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
          Lex->value_list.push_front((yyval.item));
          Lex->kill_type= KILL_TYPE_ID;
         }
    break;

  case 1946:

/* Line 1455 of yacc.c  */
#line 12889 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->users_list.push_back((yyvsp[(2) - (2)].lex_user));
            Lex->kill_type= KILL_TYPE_USER;
          }
    break;

  case 1947:

/* Line 1455 of yacc.c  */
#line 12897 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHUTDOWN; }
    break;

  case 1948:

/* Line 1455 of yacc.c  */
#line 12904 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_CHANGE_DB;
            lex->select_lex.db= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 1949:

/* Line 1455 of yacc.c  */
#line 12915 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), 
                       (yyvsp[(2) - (2)].filetype) == FILETYPE_CSV ? "LOAD DATA" : "LOAD XML");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1950:

/* Line 1455 of yacc.c  */
#line 12927 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_LOAD;
            lex->local_file=  (yyvsp[(5) - (7)].num);
            lex->duplicates= DUP_ERROR;
            lex->ignore= 0;
            if (!(lex->exchange= new sql_exchange((yyvsp[(7) - (7)].lex_str).str, 0, (yyvsp[(2) - (7)].filetype))))
              MYSQL_YYABORT;
          }
    break;

  case 1951:

/* Line 1455 of yacc.c  */
#line 12937 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(12) - (13)].table), NULL, TL_OPTION_UPDATING,
                                           (yyvsp[(4) - (13)].lock_type), MDL_SHARED_WRITE, NULL, (yyvsp[(13) - (13)].string_list)))
              MYSQL_YYABORT;
            lex->field_list.empty();
            lex->update_list.empty();
            lex->value_list.empty();
          }
    break;

  case 1952:

/* Line 1455 of yacc.c  */
#line 12947 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->exchange->cs= (yyvsp[(15) - (15)].charset); }
    break;

  case 1953:

/* Line 1455 of yacc.c  */
#line 12951 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1954:

/* Line 1455 of yacc.c  */
#line 12955 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.filetype)= FILETYPE_CSV; }
    break;

  case 1955:

/* Line 1455 of yacc.c  */
#line 12956 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.filetype)= FILETYPE_XML; }
    break;

  case 1956:

/* Line 1455 of yacc.c  */
#line 12960 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=0;}
    break;

  case 1957:

/* Line 1455 of yacc.c  */
#line 12961 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=1;}
    break;

  case 1958:

/* Line 1455 of yacc.c  */
#line 12965 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_DEFAULT; }
    break;

  case 1959:

/* Line 1455 of yacc.c  */
#line 12967 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              Ignore this option in SP to avoid problem with query cache and
              triggers with non default priority locks
            */
            (yyval.lock_type)= (Lex->sphead ? TL_WRITE_DEFAULT : TL_WRITE_CONCURRENT_INSERT);
          }
    break;

  case 1960:

/* Line 1455 of yacc.c  */
#line 12974 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1961:

/* Line 1455 of yacc.c  */
#line 12978 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->duplicates=DUP_ERROR; }
    break;

  case 1962:

/* Line 1455 of yacc.c  */
#line 12979 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->duplicates=DUP_REPLACE; }
    break;

  case 1963:

/* Line 1455 of yacc.c  */
#line 12980 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ignore= 1; }
    break;

  case 1968:

/* Line 1455 of yacc.c  */
#line 12995 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->field_term= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1969:

/* Line 1455 of yacc.c  */
#line 13000 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            DBUG_ASSERT(lex->exchange != 0);
            lex->exchange->enclosed= (yyvsp[(4) - (4)].string);
            lex->exchange->opt_enclosed= 1;
          }
    break;

  case 1970:

/* Line 1455 of yacc.c  */
#line 13007 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->enclosed= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1971:

/* Line 1455 of yacc.c  */
#line 13012 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->escaped= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1976:

/* Line 1455 of yacc.c  */
#line 13030 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->line_term= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1977:

/* Line 1455 of yacc.c  */
#line 13035 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->line_start= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1978:

/* Line 1455 of yacc.c  */
#line 13042 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { }
    break;

  case 1979:

/* Line 1455 of yacc.c  */
#line 13044 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->exchange->line_term = (yyvsp[(4) - (4)].string); }
    break;

  case 1981:

/* Line 1455 of yacc.c  */
#line 13049 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->skip_lines= atol((yyvsp[(2) - (3)].lex_str).str);
          }
    break;

  case 1982:

/* Line 1455 of yacc.c  */
#line 13056 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { }
    break;

  case 1983:

/* Line 1455 of yacc.c  */
#line 13058 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { }
    break;

  case 1984:

/* Line 1455 of yacc.c  */
#line 13062 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1985:

/* Line 1455 of yacc.c  */
#line 13063 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1986:

/* Line 1455 of yacc.c  */
#line 13064 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1987:

/* Line 1455 of yacc.c  */
#line 13069 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(3) - (3)].item)); }
    break;

  case 1988:

/* Line 1455 of yacc.c  */
#line 13071 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(1) - (1)].item)); }
    break;

  case 1989:

/* Line 1455 of yacc.c  */
#line 13075 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {(yyval.item)= (yyvsp[(1) - (1)].item);}
    break;

  case 1990:

/* Line 1455 of yacc.c  */
#line 13077 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_user_var_as_out_param((yyvsp[(2) - (2)].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1991:

/* Line 1455 of yacc.c  */
#line 13085 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1992:

/* Line 1455 of yacc.c  */
#line 13086 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1995:

/* Line 1455 of yacc.c  */
#line 13096 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->update_list.push_back((yyvsp[(1) - (5)].item)) || 
                lex->value_list.push_back((yyvsp[(4) - (5)].item)))
                MYSQL_YYABORT;
            (yyvsp[(4) - (5)].item)->set_name_no_truncate((yyvsp[(3) - (5)].simple_string), (uint) ((yyvsp[(5) - (5)].simple_string) - (yyvsp[(3) - (5)].simple_string)), YYTHD->charset());
          }
    break;

  case 1996:

/* Line 1455 of yacc.c  */
#line 13109 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX_STRING tmp;
            THD *thd= YYTHD;
            CHARSET_INFO *cs_con= thd->variables.collation_connection;
            CHARSET_INFO *cs_cli= thd->variables.character_set_client;
            uint repertoire= thd->lex->text_string_is_7bit &&
                             my_charset_is_ascii_based(cs_cli) ?
                             MY_REPERTOIRE_ASCII : MY_REPERTOIRE_UNICODE30;
            if (thd->charset_is_collation_connection ||
                (repertoire == MY_REPERTOIRE_ASCII &&
                 my_charset_is_ascii_based(cs_con)))
              tmp= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&tmp, cs_con, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, cs_cli))
                MYSQL_YYABORT;
            }
            (yyval.item)= new (thd->mem_root) Item_string(tmp.str, tmp.length, cs_con,
                                                DERIVATION_COERCIBLE,
                                                repertoire);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1997:

/* Line 1455 of yacc.c  */
#line 13133 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            uint repertoire= Lex->text_string_is_7bit ?
                             MY_REPERTOIRE_ASCII : MY_REPERTOIRE_UNICODE30;
            DBUG_ASSERT(my_charset_is_ascii_based(national_charset_info));
            (yyval.item)= new (YYTHD->mem_root) Item_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length,
                                                  national_charset_info,
                                                  DERIVATION_COERCIBLE,
                                                  repertoire);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1998:

/* Line 1455 of yacc.c  */
#line 13145 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item_string *str= new (YYTHD->mem_root) Item_string((yyvsp[(2) - (2)].lex_str).str,
                                                                (yyvsp[(2) - (2)].lex_str).length, (yyvsp[(1) - (2)].charset));
            if (str == NULL)
              MYSQL_YYABORT;
            str->set_repertoire_from_value();
            str->set_cs_specified(TRUE);

            (yyval.item)= str;
          }
    break;

  case 1999:

/* Line 1455 of yacc.c  */
#line 13156 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item_string* item= (Item_string*) (yyvsp[(1) - (2)].item);
            item->append((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (!(item->collation.repertoire & MY_REPERTOIRE_EXTENDED))
            {
              /*
                 If the string has been pure ASCII so far,
                 check the new part.
              */
              CHARSET_INFO *cs= YYTHD->variables.collation_connection;
              item->collation.repertoire|= my_string_repertoire(cs,
                                                                (yyvsp[(2) - (2)].lex_str).str,
                                                                (yyvsp[(2) - (2)].lex_str).length);
            }
          }
    break;

  case 2000:

/* Line 1455 of yacc.c  */
#line 13175 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.string)= new (YYTHD->mem_root) String((yyvsp[(1) - (1)].lex_str).str,
                                             (yyvsp[(1) - (1)].lex_str).length,
                                             YYTHD->variables.collation_connection);
            if ((yyval.string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2001:

/* Line 1455 of yacc.c  */
#line 13183 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_hex_hybrid((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fields, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            (yyval.string)= tmp->val_str((String*) 0);
          }
    break;

  case 2002:

/* Line 1455 of yacc.c  */
#line 13195 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_hex_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            tmp->quick_fix_field();
            (yyval.string)= tmp->val_str((String*) 0);
          }
    break;

  case 2003:

/* Line 1455 of yacc.c  */
#line 13203 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_bin_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fields, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            (yyval.string)= tmp->val_str((String*) 0);
          }
    break;

  case 2004:

/* Line 1455 of yacc.c  */
#line 13218 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            Item_param *item;
            if (! lex->parsing_options.allows_variable)
            {
              my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
              MYSQL_YYABORT;
            }
            item= new (thd->mem_root) Item_param((uint) (lip->get_tok_start() - thd->query()));
            if (!((yyval.item)= item) || lex->param_list.push_back(item))
            {
              my_message(ER_OUT_OF_RESOURCES, ER(ER_OUT_OF_RESOURCES), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2005:

/* Line 1455 of yacc.c  */
#line 13238 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item); }
    break;

  case 2006:

/* Line 1455 of yacc.c  */
#line 13239 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item_num); }
    break;

  case 2007:

/* Line 1455 of yacc.c  */
#line 13241 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyvsp[(2) - (2)].item_num)->max_length++;
            (yyval.item)= (yyvsp[(2) - (2)].item_num)->neg();
          }
    break;

  case 2008:

/* Line 1455 of yacc.c  */
#line 13248 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item); }
    break;

  case 2009:

/* Line 1455 of yacc.c  */
#line 13249 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item_num); }
    break;

  case 2010:

/* Line 1455 of yacc.c  */
#line 13250 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 2011:

/* Line 1455 of yacc.c  */
#line 13252 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_null();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            YYLIP->next_state= MY_LEX_OPERATOR_OR_IDENT;
          }
    break;

  case 2012:

/* Line 1455 of yacc.c  */
#line 13259 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_int((char*) "FALSE",0,1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2013:

/* Line 1455 of yacc.c  */
#line 13265 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_int((char*) "TRUE",1,1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2014:

/* Line 1455 of yacc.c  */
#line 13271 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_hex_hybrid((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2015:

/* Line 1455 of yacc.c  */
#line 13277 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_hex_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2016:

/* Line 1455 of yacc.c  */
#line 13283 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_bin_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2017:

/* Line 1455 of yacc.c  */
#line 13289 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_hex_string((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fieds, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            String *str= tmp->val_str((String*) 0);

            Item_string *item_str;
            item_str= new (YYTHD->mem_root)
                        Item_string(NULL, /* name will be set in select_item */
                                    str ? str->ptr() : "",
                                    str ? str->length() : 0,
                                    (yyvsp[(1) - (2)].charset));
            if (!item_str ||
                !item_str->check_well_formed_result(&item_str->str_value, TRUE))
            {
              MYSQL_YYABORT;
            }

            item_str->set_repertoire_from_value();
            item_str->set_cs_specified(TRUE);

            (yyval.item)= item_str;
          }
    break;

  case 2018:

/* Line 1455 of yacc.c  */
#line 13318 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_bin_string((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fieds, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            String *str= tmp->val_str((String*) 0);

            Item_string *item_str;
            item_str= new (YYTHD->mem_root)
                        Item_string(NULL, /* name will be set in select_item */
                                    str ? str->ptr() : "",
                                    str ? str->length() : 0,
                                    (yyvsp[(1) - (2)].charset));
            if (!item_str ||
                !item_str->check_well_formed_result(&item_str->str_value, TRUE))
            {
              MYSQL_YYABORT;
            }

            item_str->set_cs_specified(TRUE);

            (yyval.item)= item_str;
          }
    break;

  case 2019:

/* Line 1455 of yacc.c  */
#line 13349 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            int error;
            (yyval.item_num)= new (YYTHD->mem_root)
                  Item_int((yyvsp[(1) - (1)].lex_str).str,
                           (longlong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, NULL, &error),
                           (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2020:

/* Line 1455 of yacc.c  */
#line 13359 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            int error;
            (yyval.item_num)= new (YYTHD->mem_root)
                  Item_int((yyvsp[(1) - (1)].lex_str).str,
                           (longlong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, NULL, &error),
                           (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2021:

/* Line 1455 of yacc.c  */
#line 13369 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item_num)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2022:

/* Line 1455 of yacc.c  */
#line 13375 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item_num)= new (YYTHD->mem_root) Item_decimal((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length,
                                                   YYTHD->charset());
            if (((yyval.item_num) == NULL) || (YYTHD->is_error()))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 2023:

/* Line 1455 of yacc.c  */
#line 13384 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item_num)= new (YYTHD->mem_root) Item_float((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (((yyval.item_num) == NULL) || (YYTHD->is_error()))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 2024:

/* Line 1455 of yacc.c  */
#line 13396 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!((yyval.item)= create_temporal_literal(YYTHD, (yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length, YYCSCL,
                                              MYSQL_TYPE_DATE, true)))
              MYSQL_YYABORT;
          }
    break;

  case 2025:

/* Line 1455 of yacc.c  */
#line 13402 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!((yyval.item)= create_temporal_literal(YYTHD, (yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length, YYCSCL,
                                              MYSQL_TYPE_TIME, true)))
              MYSQL_YYABORT;
          }
    break;

  case 2026:

/* Line 1455 of yacc.c  */
#line 13408 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!((yyval.item)= create_temporal_literal(YYTHD, (yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length, YYCSCL,
                                              MYSQL_TYPE_DATETIME, true)))
              MYSQL_YYABORT;
          }
    break;

  case 2027:

/* Line 1455 of yacc.c  */
#line 13423 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 2028:

/* Line 1455 of yacc.c  */
#line 13424 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 2029:

/* Line 1455 of yacc.c  */
#line 13429 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            (yyval.item)= new (YYTHD->mem_root) Item_field(Lex->current_context(),
                                                 NullS, (yyvsp[(1) - (3)].lex_str).str, "*");
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            sel->with_wild++;
          }
    break;

  case 2030:

/* Line 1455 of yacc.c  */
#line 13438 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            SELECT_LEX *sel= Select;
            const char* schema= thd->client_capabilities & CLIENT_NO_SCHEMA ?
                                  NullS : (yyvsp[(1) - (5)].lex_str).str;
            (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                               schema,
                                               (yyvsp[(3) - (5)].lex_str).str,"*");
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            sel->with_wild++;
          }
    break;

  case 2031:

/* Line 1455 of yacc.c  */
#line 13453 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 2032:

/* Line 1455 of yacc.c  */
#line 13458 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_variable *spv;
            sp_pcontext *spc = lex->spcont;
            if (spc && (spv = spc->find_variable((yyvsp[(1) - (1)].lex_str), false)))
            {
              /* We're compiling a stored procedure and found a variable */
              if (! lex->parsing_options.allows_variable)
              {
                my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
                MYSQL_YYABORT;
              }

              Item_splocal *splocal;
              splocal= new (thd->mem_root)
                         Item_splocal((yyvsp[(1) - (1)].lex_str), spv->offset, spv->type,
                                      lip->get_tok_start_prev() - lex->sphead->m_tmp_query,
                                      lip->get_tok_end() - lip->get_tok_start_prev());
              if (splocal == NULL)
                MYSQL_YYABORT;
#ifndef DBUG_OFF
              splocal->m_sp= lex->sphead;
#endif
              (yyval.item)= splocal;
              lex->safe_to_cache_query=0;
            }
            else
            {
              SELECT_LEX *sel=Select;
              if ((sel->parsing_place != IN_HAVING) ||
                  (sel->get_in_sum_expr() > 0))
              {
                (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                   NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
              }
              else
              {
                (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                                 NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
              }
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 2033:

/* Line 1455 of yacc.c  */
#line 13504 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 2034:

/* Line 1455 of yacc.c  */
#line 13509 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            SELECT_LEX *sel=Select;
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                               NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2035:

/* Line 1455 of yacc.c  */
#line 13526 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 2036:

/* Line 1455 of yacc.c  */
#line 13531 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            /*
              FIXME This will work ok in simple_ident_nospvar case because
              we can't meet simple_ident_nospvar in trigger now. But it
              should be changed in future.
            */
            if (lex->sphead && lex->sphead->m_type == TYPE_ENUM_TRIGGER &&
                (!my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "NEW") ||
                 !my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "OLD")))
            {
              Item_trigger_field *trg_fld;
              bool new_row= ((yyvsp[(1) - (3)].lex_str).str[0]=='N' || (yyvsp[(1) - (3)].lex_str).str[0]=='n');

              if (lex->trg_chistics.event == TRG_EVENT_INSERT &&
                  !new_row)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0), "OLD", "on INSERT");
                MYSQL_YYABORT;
              }

              if (lex->trg_chistics.event == TRG_EVENT_DELETE &&
                  new_row)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0), "NEW", "on DELETE");
                MYSQL_YYABORT;
              }

              DBUG_ASSERT(!new_row ||
                          (lex->trg_chistics.event == TRG_EVENT_INSERT ||
                           lex->trg_chistics.event == TRG_EVENT_UPDATE));
              const bool read_only=
                !(new_row && lex->trg_chistics.action_time == TRG_ACTION_BEFORE);
              trg_fld= new (thd->mem_root)
                         Item_trigger_field(Lex->current_context(),
                                            new_row ?
                                              Item_trigger_field::NEW_ROW:
                                              Item_trigger_field::OLD_ROW,
                                            (yyvsp[(3) - (3)].lex_str).str,
                                            SELECT_ACL,
                                            read_only);
              if (trg_fld == NULL)
                MYSQL_YYABORT;

              /*
                Let us add this item to list of all Item_trigger_field objects
                in trigger.
              */
              lex->trg_table_fields.link_in_list(trg_fld,
                                                 &trg_fld->next_trg_field);

              (yyval.item)= trg_fld;
            }
            else
            {
              SELECT_LEX *sel= lex->current_select;
              if (sel->no_table_names_allowed)
              {
                my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                         MYF(0), (yyvsp[(1) - (3)].lex_str).str, thd->where);
              }
              if ((sel->parsing_place != IN_HAVING) ||
                  (sel->get_in_sum_expr() > 0))
              {
                (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                   NullS, (yyvsp[(1) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).str);
              }
              else
              {
                (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                                 NullS, (yyvsp[(1) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).str);
              }
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 2037:

/* Line 1455 of yacc.c  */
#line 13610 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->no_table_names_allowed)
            {
              my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                       MYF(0), (yyvsp[(2) - (4)].lex_str).str, thd->where);
            }
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 NullS, (yyvsp[(2) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).str);

            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                               NullS, (yyvsp[(2) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2038:

/* Line 1455 of yacc.c  */
#line 13635 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            SELECT_LEX *sel= lex->current_select;
            const char* schema= (thd->client_capabilities & CLIENT_NO_SCHEMA ?
                                 NullS : (yyvsp[(1) - (5)].lex_str).str);
            if (sel->no_table_names_allowed)
            {
              my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                       MYF(0), (yyvsp[(3) - (5)].lex_str).str, thd->where);
            }
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 schema,
                                                 (yyvsp[(3) - (5)].lex_str).str, (yyvsp[(5) - (5)].lex_str).str);
            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                               schema,
                                               (yyvsp[(3) - (5)].lex_str).str, (yyvsp[(5) - (5)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2039:

/* Line 1455 of yacc.c  */
#line 13665 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 2040:

/* Line 1455 of yacc.c  */
#line 13667 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            TABLE_LIST *table= Select->table_list.first;
            if (my_strcasecmp(table_alias_charset, (yyvsp[(1) - (5)].lex_str).str, table->db))
            {
              my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[(1) - (5)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (my_strcasecmp(table_alias_charset, (yyvsp[(3) - (5)].lex_str).str,
                              table->table_name))
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(3) - (5)].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.lex_str)=(yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 2041:

/* Line 1455 of yacc.c  */
#line 13683 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            TABLE_LIST *table= Select->table_list.first;
            if (my_strcasecmp(table_alias_charset, (yyvsp[(1) - (3)].lex_str).str, table->alias))
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(1) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.lex_str)=(yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 2042:

/* Line 1455 of yacc.c  */
#line 13692 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str);}
    break;

  case 2043:

/* Line 1455 of yacc.c  */
#line 13697 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.table)= new Table_ident((yyvsp[(1) - (1)].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2044:

/* Line 1455 of yacc.c  */
#line 13703 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.table)= new Table_ident(YYTHD, (yyvsp[(1) - (3)].lex_str),(yyvsp[(3) - (3)].lex_str),0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2045:

/* Line 1455 of yacc.c  */
#line 13709 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* For Delphi */
            (yyval.table)= new Table_ident((yyvsp[(2) - (2)].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2046:

/* Line 1455 of yacc.c  */
#line 13719 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.table)= new Table_ident((yyvsp[(1) - (2)].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2047:

/* Line 1455 of yacc.c  */
#line 13725 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.table)= new Table_ident(YYTHD, (yyvsp[(1) - (4)].lex_str),(yyvsp[(3) - (4)].lex_str),0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2048:

/* Line 1455 of yacc.c  */
#line 13734 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX_STRING db={(char*) any_db,3};
            (yyval.table)= new Table_ident(YYTHD, db,(yyvsp[(1) - (1)].lex_str),0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2049:

/* Line 1455 of yacc.c  */
#line 13743 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 2050:

/* Line 1455 of yacc.c  */
#line 13745 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_system_charset)
            {
              CHARSET_INFO *cs= system_charset_info;
              int dummy_error;
              uint wlen= cs->cset->well_formed_len(cs, (yyvsp[(1) - (1)].lex_str).str,
                                                   (yyvsp[(1) - (1)].lex_str).str+(yyvsp[(1) - (1)].lex_str).length,
                                                   (yyvsp[(1) - (1)].lex_str).length, &dummy_error);
              if (wlen < (yyvsp[(1) - (1)].lex_str).length)
              {
                ErrConvString err((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, &my_charset_bin);
                my_error(ER_INVALID_CHARACTER_STRING, MYF(0),
                         cs->csname, err.ptr());
                MYSQL_YYABORT;
              }
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            }
            else
            {
              if (thd->convert_string(&(yyval.lex_str), system_charset_info,
                                  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 2051:

/* Line 1455 of yacc.c  */
#line 13775 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_system_charset)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str), system_charset_info,
                                  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 2052:

/* Line 1455 of yacc.c  */
#line 13791 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_collation_connection)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str), thd->variables.collation_connection,
                                  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            } 
          }
    break;

  case 2053:

/* Line 1455 of yacc.c  */
#line 13807 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_character_set_filesystem)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str),
                                      thd->variables.character_set_filesystem,
                                      (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 2054:

/* Line 1455 of yacc.c  */
#line 13823 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 2055:

/* Line 1455 of yacc.c  */
#line 13825 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            (yyval.lex_str).str= thd->strmake((yyvsp[(1) - (1)].symbol).str, (yyvsp[(1) - (1)].symbol).length);
            if ((yyval.lex_str).str == NULL)
              MYSQL_YYABORT;
            (yyval.lex_str).length= (yyvsp[(1) - (1)].symbol).length;
          }
    break;

  case 2056:

/* Line 1455 of yacc.c  */
#line 13835 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 2057:

/* Line 1455 of yacc.c  */
#line 13837 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            (yyval.lex_str).str= thd->strmake((yyvsp[(1) - (1)].symbol).str, (yyvsp[(1) - (1)].symbol).length);
            if ((yyval.lex_str).str == NULL)
              MYSQL_YYABORT;
            (yyval.lex_str).length= (yyvsp[(1) - (1)].symbol).length;
          }
    break;

  case 2058:

/* Line 1455 of yacc.c  */
#line 13847 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 2059:

/* Line 1455 of yacc.c  */
#line 13848 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 2060:

/* Line 1455 of yacc.c  */
#line 13849 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 2061:

/* Line 1455 of yacc.c  */
#line 13854 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            if (!((yyval.lex_user)=(LEX_USER*) thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user = (yyvsp[(1) - (1)].lex_str);
            (yyval.lex_user)->host.str= (char *) "%";
            (yyval.lex_user)->host.length= 1;
            (yyval.lex_user)->password= null_lex_str; 
            (yyval.lex_user)->plugin= empty_lex_str;
            (yyval.lex_user)->auth= empty_lex_str;

            if (check_string_char_length(&(yyval.lex_user)->user, ER(ER_USERNAME),
                                         username_char_length,
                                         system_charset_info, 0))
              MYSQL_YYABORT;
          }
    break;

  case 2062:

/* Line 1455 of yacc.c  */
#line 13871 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            if (!((yyval.lex_user)=(LEX_USER*) thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user = (yyvsp[(1) - (3)].lex_str); (yyval.lex_user)->host=(yyvsp[(3) - (3)].lex_str);
            (yyval.lex_user)->password= null_lex_str; 
            (yyval.lex_user)->plugin= empty_lex_str;
            (yyval.lex_user)->auth= empty_lex_str;

            if (check_string_char_length(&(yyval.lex_user)->user, ER(ER_USERNAME),
                                         username_char_length,
                                         system_charset_info, 0) ||
                check_host_name(&(yyval.lex_user)->host))
              MYSQL_YYABORT;
            /*
              Convert hostname part of username to lowercase.
              It's OK to use in-place lowercase as long as
              the character set is utf8.
            */
            my_casedn_str(system_charset_info, (yyval.lex_user)->host.str);
          }
    break;

  case 2063:

/* Line 1455 of yacc.c  */
#line 13893 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!((yyval.lex_user)=(LEX_USER*) YYTHD->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            /* 
              empty LEX_USER means current_user and 
              will be handled in the  get_current_user() function
              later
            */
            bzero((yyval.lex_user), sizeof(LEX_USER));
          }
    break;

  case 2064:

/* Line 1455 of yacc.c  */
#line 13907 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2065:

/* Line 1455 of yacc.c  */
#line 13908 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2066:

/* Line 1455 of yacc.c  */
#line 13909 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2067:

/* Line 1455 of yacc.c  */
#line 13910 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2068:

/* Line 1455 of yacc.c  */
#line 13911 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2069:

/* Line 1455 of yacc.c  */
#line 13912 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2070:

/* Line 1455 of yacc.c  */
#line 13913 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2071:

/* Line 1455 of yacc.c  */
#line 13914 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2072:

/* Line 1455 of yacc.c  */
#line 13915 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2073:

/* Line 1455 of yacc.c  */
#line 13916 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2074:

/* Line 1455 of yacc.c  */
#line 13917 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2075:

/* Line 1455 of yacc.c  */
#line 13918 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2076:

/* Line 1455 of yacc.c  */
#line 13919 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2077:

/* Line 1455 of yacc.c  */
#line 13920 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2078:

/* Line 1455 of yacc.c  */
#line 13921 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2079:

/* Line 1455 of yacc.c  */
#line 13922 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2080:

/* Line 1455 of yacc.c  */
#line 13923 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2081:

/* Line 1455 of yacc.c  */
#line 13924 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2082:

/* Line 1455 of yacc.c  */
#line 13925 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2083:

/* Line 1455 of yacc.c  */
#line 13926 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2084:

/* Line 1455 of yacc.c  */
#line 13927 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2085:

/* Line 1455 of yacc.c  */
#line 13928 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2086:

/* Line 1455 of yacc.c  */
#line 13929 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2087:

/* Line 1455 of yacc.c  */
#line 13930 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2088:

/* Line 1455 of yacc.c  */
#line 13931 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2089:

/* Line 1455 of yacc.c  */
#line 13932 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2090:

/* Line 1455 of yacc.c  */
#line 13933 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2091:

/* Line 1455 of yacc.c  */
#line 13934 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2092:

/* Line 1455 of yacc.c  */
#line 13935 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2093:

/* Line 1455 of yacc.c  */
#line 13936 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2094:

/* Line 1455 of yacc.c  */
#line 13937 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2095:

/* Line 1455 of yacc.c  */
#line 13938 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2096:

/* Line 1455 of yacc.c  */
#line 13939 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2097:

/* Line 1455 of yacc.c  */
#line 13940 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2098:

/* Line 1455 of yacc.c  */
#line 13941 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2099:

/* Line 1455 of yacc.c  */
#line 13942 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2100:

/* Line 1455 of yacc.c  */
#line 13943 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2101:

/* Line 1455 of yacc.c  */
#line 13944 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2102:

/* Line 1455 of yacc.c  */
#line 13945 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2103:

/* Line 1455 of yacc.c  */
#line 13946 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2104:

/* Line 1455 of yacc.c  */
#line 13947 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2105:

/* Line 1455 of yacc.c  */
#line 13948 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2106:

/* Line 1455 of yacc.c  */
#line 13949 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2107:

/* Line 1455 of yacc.c  */
#line 13950 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2108:

/* Line 1455 of yacc.c  */
#line 13951 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2109:

/* Line 1455 of yacc.c  */
#line 13952 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2110:

/* Line 1455 of yacc.c  */
#line 13953 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2111:

/* Line 1455 of yacc.c  */
#line 13954 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2112:

/* Line 1455 of yacc.c  */
#line 13955 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2113:

/* Line 1455 of yacc.c  */
#line 13956 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2114:

/* Line 1455 of yacc.c  */
#line 13957 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2115:

/* Line 1455 of yacc.c  */
#line 13958 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2116:

/* Line 1455 of yacc.c  */
#line 13959 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2117:

/* Line 1455 of yacc.c  */
#line 13960 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2118:

/* Line 1455 of yacc.c  */
#line 13961 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2119:

/* Line 1455 of yacc.c  */
#line 13962 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2120:

/* Line 1455 of yacc.c  */
#line 13963 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2121:

/* Line 1455 of yacc.c  */
#line 13964 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2122:

/* Line 1455 of yacc.c  */
#line 13974 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2123:

/* Line 1455 of yacc.c  */
#line 13975 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2124:

/* Line 1455 of yacc.c  */
#line 13976 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2125:

/* Line 1455 of yacc.c  */
#line 13977 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2126:

/* Line 1455 of yacc.c  */
#line 13978 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2127:

/* Line 1455 of yacc.c  */
#line 13979 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2128:

/* Line 1455 of yacc.c  */
#line 13980 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2129:

/* Line 1455 of yacc.c  */
#line 13981 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2130:

/* Line 1455 of yacc.c  */
#line 13982 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2131:

/* Line 1455 of yacc.c  */
#line 13983 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2132:

/* Line 1455 of yacc.c  */
#line 13984 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2133:

/* Line 1455 of yacc.c  */
#line 13985 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2134:

/* Line 1455 of yacc.c  */
#line 13986 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2135:

/* Line 1455 of yacc.c  */
#line 13987 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2136:

/* Line 1455 of yacc.c  */
#line 13988 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2137:

/* Line 1455 of yacc.c  */
#line 13989 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2138:

/* Line 1455 of yacc.c  */
#line 13990 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2139:

/* Line 1455 of yacc.c  */
#line 13991 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2140:

/* Line 1455 of yacc.c  */
#line 13992 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2141:

/* Line 1455 of yacc.c  */
#line 13993 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2142:

/* Line 1455 of yacc.c  */
#line 13994 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2143:

/* Line 1455 of yacc.c  */
#line 13995 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2144:

/* Line 1455 of yacc.c  */
#line 13996 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2145:

/* Line 1455 of yacc.c  */
#line 13997 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2146:

/* Line 1455 of yacc.c  */
#line 13998 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2147:

/* Line 1455 of yacc.c  */
#line 13999 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2148:

/* Line 1455 of yacc.c  */
#line 14000 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2149:

/* Line 1455 of yacc.c  */
#line 14001 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2150:

/* Line 1455 of yacc.c  */
#line 14002 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2151:

/* Line 1455 of yacc.c  */
#line 14003 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2152:

/* Line 1455 of yacc.c  */
#line 14004 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2153:

/* Line 1455 of yacc.c  */
#line 14005 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2154:

/* Line 1455 of yacc.c  */
#line 14006 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2155:

/* Line 1455 of yacc.c  */
#line 14007 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2156:

/* Line 1455 of yacc.c  */
#line 14008 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2157:

/* Line 1455 of yacc.c  */
#line 14009 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2158:

/* Line 1455 of yacc.c  */
#line 14010 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2159:

/* Line 1455 of yacc.c  */
#line 14011 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2160:

/* Line 1455 of yacc.c  */
#line 14012 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2161:

/* Line 1455 of yacc.c  */
#line 14013 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2162:

/* Line 1455 of yacc.c  */
#line 14014 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2163:

/* Line 1455 of yacc.c  */
#line 14015 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2164:

/* Line 1455 of yacc.c  */
#line 14016 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2165:

/* Line 1455 of yacc.c  */
#line 14017 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2166:

/* Line 1455 of yacc.c  */
#line 14018 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2167:

/* Line 1455 of yacc.c  */
#line 14019 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2168:

/* Line 1455 of yacc.c  */
#line 14020 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2169:

/* Line 1455 of yacc.c  */
#line 14021 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2170:

/* Line 1455 of yacc.c  */
#line 14022 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2171:

/* Line 1455 of yacc.c  */
#line 14027 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2172:

/* Line 1455 of yacc.c  */
#line 14028 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2173:

/* Line 1455 of yacc.c  */
#line 14029 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2174:

/* Line 1455 of yacc.c  */
#line 14030 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2175:

/* Line 1455 of yacc.c  */
#line 14031 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2176:

/* Line 1455 of yacc.c  */
#line 14032 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2177:

/* Line 1455 of yacc.c  */
#line 14033 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2178:

/* Line 1455 of yacc.c  */
#line 14034 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2179:

/* Line 1455 of yacc.c  */
#line 14035 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2180:

/* Line 1455 of yacc.c  */
#line 14036 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2181:

/* Line 1455 of yacc.c  */
#line 14037 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2182:

/* Line 1455 of yacc.c  */
#line 14038 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2183:

/* Line 1455 of yacc.c  */
#line 14039 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2184:

/* Line 1455 of yacc.c  */
#line 14040 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2185:

/* Line 1455 of yacc.c  */
#line 14041 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2186:

/* Line 1455 of yacc.c  */
#line 14042 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2187:

/* Line 1455 of yacc.c  */
#line 14043 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2188:

/* Line 1455 of yacc.c  */
#line 14044 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2189:

/* Line 1455 of yacc.c  */
#line 14045 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2190:

/* Line 1455 of yacc.c  */
#line 14046 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2191:

/* Line 1455 of yacc.c  */
#line 14047 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2192:

/* Line 1455 of yacc.c  */
#line 14048 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2193:

/* Line 1455 of yacc.c  */
#line 14049 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2194:

/* Line 1455 of yacc.c  */
#line 14050 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2195:

/* Line 1455 of yacc.c  */
#line 14051 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2196:

/* Line 1455 of yacc.c  */
#line 14052 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2197:

/* Line 1455 of yacc.c  */
#line 14053 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2198:

/* Line 1455 of yacc.c  */
#line 14054 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2199:

/* Line 1455 of yacc.c  */
#line 14055 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2200:

/* Line 1455 of yacc.c  */
#line 14056 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2201:

/* Line 1455 of yacc.c  */
#line 14057 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2202:

/* Line 1455 of yacc.c  */
#line 14058 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2203:

/* Line 1455 of yacc.c  */
#line 14059 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2204:

/* Line 1455 of yacc.c  */
#line 14060 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2205:

/* Line 1455 of yacc.c  */
#line 14061 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2206:

/* Line 1455 of yacc.c  */
#line 14062 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2207:

/* Line 1455 of yacc.c  */
#line 14063 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2208:

/* Line 1455 of yacc.c  */
#line 14064 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2209:

/* Line 1455 of yacc.c  */
#line 14065 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2210:

/* Line 1455 of yacc.c  */
#line 14066 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2211:

/* Line 1455 of yacc.c  */
#line 14067 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2212:

/* Line 1455 of yacc.c  */
#line 14068 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2213:

/* Line 1455 of yacc.c  */
#line 14069 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2214:

/* Line 1455 of yacc.c  */
#line 14070 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2215:

/* Line 1455 of yacc.c  */
#line 14071 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2216:

/* Line 1455 of yacc.c  */
#line 14072 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2217:

/* Line 1455 of yacc.c  */
#line 14073 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2218:

/* Line 1455 of yacc.c  */
#line 14074 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2219:

/* Line 1455 of yacc.c  */
#line 14075 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2220:

/* Line 1455 of yacc.c  */
#line 14076 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2221:

/* Line 1455 of yacc.c  */
#line 14077 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2222:

/* Line 1455 of yacc.c  */
#line 14078 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2223:

/* Line 1455 of yacc.c  */
#line 14079 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2224:

/* Line 1455 of yacc.c  */
#line 14080 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2225:

/* Line 1455 of yacc.c  */
#line 14081 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2226:

/* Line 1455 of yacc.c  */
#line 14082 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2227:

/* Line 1455 of yacc.c  */
#line 14083 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2228:

/* Line 1455 of yacc.c  */
#line 14084 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2229:

/* Line 1455 of yacc.c  */
#line 14085 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2230:

/* Line 1455 of yacc.c  */
#line 14086 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2231:

/* Line 1455 of yacc.c  */
#line 14087 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2232:

/* Line 1455 of yacc.c  */
#line 14088 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2233:

/* Line 1455 of yacc.c  */
#line 14089 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2234:

/* Line 1455 of yacc.c  */
#line 14090 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2235:

/* Line 1455 of yacc.c  */
#line 14091 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2236:

/* Line 1455 of yacc.c  */
#line 14092 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2237:

/* Line 1455 of yacc.c  */
#line 14093 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2238:

/* Line 1455 of yacc.c  */
#line 14094 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2239:

/* Line 1455 of yacc.c  */
#line 14095 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2240:

/* Line 1455 of yacc.c  */
#line 14096 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2241:

/* Line 1455 of yacc.c  */
#line 14097 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2242:

/* Line 1455 of yacc.c  */
#line 14098 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2243:

/* Line 1455 of yacc.c  */
#line 14099 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2244:

/* Line 1455 of yacc.c  */
#line 14100 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2245:

/* Line 1455 of yacc.c  */
#line 14101 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2246:

/* Line 1455 of yacc.c  */
#line 14102 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2247:

/* Line 1455 of yacc.c  */
#line 14103 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2248:

/* Line 1455 of yacc.c  */
#line 14104 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2249:

/* Line 1455 of yacc.c  */
#line 14105 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2250:

/* Line 1455 of yacc.c  */
#line 14106 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2251:

/* Line 1455 of yacc.c  */
#line 14107 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2252:

/* Line 1455 of yacc.c  */
#line 14108 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2253:

/* Line 1455 of yacc.c  */
#line 14109 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2254:

/* Line 1455 of yacc.c  */
#line 14110 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2255:

/* Line 1455 of yacc.c  */
#line 14111 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2256:

/* Line 1455 of yacc.c  */
#line 14112 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2257:

/* Line 1455 of yacc.c  */
#line 14113 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2258:

/* Line 1455 of yacc.c  */
#line 14114 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2259:

/* Line 1455 of yacc.c  */
#line 14115 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2260:

/* Line 1455 of yacc.c  */
#line 14116 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2261:

/* Line 1455 of yacc.c  */
#line 14117 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2262:

/* Line 1455 of yacc.c  */
#line 14118 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2263:

/* Line 1455 of yacc.c  */
#line 14119 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2264:

/* Line 1455 of yacc.c  */
#line 14120 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2265:

/* Line 1455 of yacc.c  */
#line 14121 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2266:

/* Line 1455 of yacc.c  */
#line 14122 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2267:

/* Line 1455 of yacc.c  */
#line 14123 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2268:

/* Line 1455 of yacc.c  */
#line 14124 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2269:

/* Line 1455 of yacc.c  */
#line 14125 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2270:

/* Line 1455 of yacc.c  */
#line 14126 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2271:

/* Line 1455 of yacc.c  */
#line 14127 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2272:

/* Line 1455 of yacc.c  */
#line 14128 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2273:

/* Line 1455 of yacc.c  */
#line 14129 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2274:

/* Line 1455 of yacc.c  */
#line 14130 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2275:

/* Line 1455 of yacc.c  */
#line 14131 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2276:

/* Line 1455 of yacc.c  */
#line 14132 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2277:

/* Line 1455 of yacc.c  */
#line 14133 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2278:

/* Line 1455 of yacc.c  */
#line 14134 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2279:

/* Line 1455 of yacc.c  */
#line 14135 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2280:

/* Line 1455 of yacc.c  */
#line 14136 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2281:

/* Line 1455 of yacc.c  */
#line 14137 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2282:

/* Line 1455 of yacc.c  */
#line 14138 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2283:

/* Line 1455 of yacc.c  */
#line 14139 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2284:

/* Line 1455 of yacc.c  */
#line 14140 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2285:

/* Line 1455 of yacc.c  */
#line 14141 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2286:

/* Line 1455 of yacc.c  */
#line 14142 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2287:

/* Line 1455 of yacc.c  */
#line 14143 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2288:

/* Line 1455 of yacc.c  */
#line 14144 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2289:

/* Line 1455 of yacc.c  */
#line 14145 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2290:

/* Line 1455 of yacc.c  */
#line 14146 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2291:

/* Line 1455 of yacc.c  */
#line 14147 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2292:

/* Line 1455 of yacc.c  */
#line 14148 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2293:

/* Line 1455 of yacc.c  */
#line 14149 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2294:

/* Line 1455 of yacc.c  */
#line 14150 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2295:

/* Line 1455 of yacc.c  */
#line 14151 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2296:

/* Line 1455 of yacc.c  */
#line 14152 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2297:

/* Line 1455 of yacc.c  */
#line 14153 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2298:

/* Line 1455 of yacc.c  */
#line 14154 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2299:

/* Line 1455 of yacc.c  */
#line 14155 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2300:

/* Line 1455 of yacc.c  */
#line 14156 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2301:

/* Line 1455 of yacc.c  */
#line 14157 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2302:

/* Line 1455 of yacc.c  */
#line 14158 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2303:

/* Line 1455 of yacc.c  */
#line 14159 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2304:

/* Line 1455 of yacc.c  */
#line 14160 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2305:

/* Line 1455 of yacc.c  */
#line 14161 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2306:

/* Line 1455 of yacc.c  */
#line 14162 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2307:

/* Line 1455 of yacc.c  */
#line 14163 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2308:

/* Line 1455 of yacc.c  */
#line 14164 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2309:

/* Line 1455 of yacc.c  */
#line 14165 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2310:

/* Line 1455 of yacc.c  */
#line 14166 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2311:

/* Line 1455 of yacc.c  */
#line 14167 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2312:

/* Line 1455 of yacc.c  */
#line 14168 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2313:

/* Line 1455 of yacc.c  */
#line 14169 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2314:

/* Line 1455 of yacc.c  */
#line 14170 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2315:

/* Line 1455 of yacc.c  */
#line 14171 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2316:

/* Line 1455 of yacc.c  */
#line 14172 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2317:

/* Line 1455 of yacc.c  */
#line 14173 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2318:

/* Line 1455 of yacc.c  */
#line 14174 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2319:

/* Line 1455 of yacc.c  */
#line 14175 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2320:

/* Line 1455 of yacc.c  */
#line 14176 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2321:

/* Line 1455 of yacc.c  */
#line 14177 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2322:

/* Line 1455 of yacc.c  */
#line 14178 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2323:

/* Line 1455 of yacc.c  */
#line 14179 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2324:

/* Line 1455 of yacc.c  */
#line 14180 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2325:

/* Line 1455 of yacc.c  */
#line 14181 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2326:

/* Line 1455 of yacc.c  */
#line 14182 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2327:

/* Line 1455 of yacc.c  */
#line 14183 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2328:

/* Line 1455 of yacc.c  */
#line 14184 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2329:

/* Line 1455 of yacc.c  */
#line 14185 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2330:

/* Line 1455 of yacc.c  */
#line 14186 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2331:

/* Line 1455 of yacc.c  */
#line 14187 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2332:

/* Line 1455 of yacc.c  */
#line 14188 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2333:

/* Line 1455 of yacc.c  */
#line 14189 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2334:

/* Line 1455 of yacc.c  */
#line 14190 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2335:

/* Line 1455 of yacc.c  */
#line 14191 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2336:

/* Line 1455 of yacc.c  */
#line 14192 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2337:

/* Line 1455 of yacc.c  */
#line 14193 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2338:

/* Line 1455 of yacc.c  */
#line 14194 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2339:

/* Line 1455 of yacc.c  */
#line 14195 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2340:

/* Line 1455 of yacc.c  */
#line 14196 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2341:

/* Line 1455 of yacc.c  */
#line 14197 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2342:

/* Line 1455 of yacc.c  */
#line 14198 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2343:

/* Line 1455 of yacc.c  */
#line 14199 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2344:

/* Line 1455 of yacc.c  */
#line 14200 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2345:

/* Line 1455 of yacc.c  */
#line 14201 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2346:

/* Line 1455 of yacc.c  */
#line 14202 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2347:

/* Line 1455 of yacc.c  */
#line 14203 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2348:

/* Line 1455 of yacc.c  */
#line 14204 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2349:

/* Line 1455 of yacc.c  */
#line 14205 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2350:

/* Line 1455 of yacc.c  */
#line 14206 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2351:

/* Line 1455 of yacc.c  */
#line 14207 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2352:

/* Line 1455 of yacc.c  */
#line 14208 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2353:

/* Line 1455 of yacc.c  */
#line 14209 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2354:

/* Line 1455 of yacc.c  */
#line 14210 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2355:

/* Line 1455 of yacc.c  */
#line 14211 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2356:

/* Line 1455 of yacc.c  */
#line 14212 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2357:

/* Line 1455 of yacc.c  */
#line 14213 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2358:

/* Line 1455 of yacc.c  */
#line 14214 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2359:

/* Line 1455 of yacc.c  */
#line 14215 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2360:

/* Line 1455 of yacc.c  */
#line 14216 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2361:

/* Line 1455 of yacc.c  */
#line 14217 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2362:

/* Line 1455 of yacc.c  */
#line 14218 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2363:

/* Line 1455 of yacc.c  */
#line 14219 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2364:

/* Line 1455 of yacc.c  */
#line 14220 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2365:

/* Line 1455 of yacc.c  */
#line 14221 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2366:

/* Line 1455 of yacc.c  */
#line 14222 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2367:

/* Line 1455 of yacc.c  */
#line 14223 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2368:

/* Line 1455 of yacc.c  */
#line 14224 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2369:

/* Line 1455 of yacc.c  */
#line 14225 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2370:

/* Line 1455 of yacc.c  */
#line 14226 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2371:

/* Line 1455 of yacc.c  */
#line 14227 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2372:

/* Line 1455 of yacc.c  */
#line 14228 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2373:

/* Line 1455 of yacc.c  */
#line 14229 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2374:

/* Line 1455 of yacc.c  */
#line 14230 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2375:

/* Line 1455 of yacc.c  */
#line 14231 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2376:

/* Line 1455 of yacc.c  */
#line 14232 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2377:

/* Line 1455 of yacc.c  */
#line 14233 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2378:

/* Line 1455 of yacc.c  */
#line 14234 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2379:

/* Line 1455 of yacc.c  */
#line 14235 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2380:

/* Line 1455 of yacc.c  */
#line 14236 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2381:

/* Line 1455 of yacc.c  */
#line 14237 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2382:

/* Line 1455 of yacc.c  */
#line 14238 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2383:

/* Line 1455 of yacc.c  */
#line 14239 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2384:

/* Line 1455 of yacc.c  */
#line 14240 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2385:

/* Line 1455 of yacc.c  */
#line 14241 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2386:

/* Line 1455 of yacc.c  */
#line 14242 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2387:

/* Line 1455 of yacc.c  */
#line 14243 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2388:

/* Line 1455 of yacc.c  */
#line 14244 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2389:

/* Line 1455 of yacc.c  */
#line 14245 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2390:

/* Line 1455 of yacc.c  */
#line 14246 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2391:

/* Line 1455 of yacc.c  */
#line 14247 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2392:

/* Line 1455 of yacc.c  */
#line 14248 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2393:

/* Line 1455 of yacc.c  */
#line 14249 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2394:

/* Line 1455 of yacc.c  */
#line 14250 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2395:

/* Line 1455 of yacc.c  */
#line 14251 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2396:

/* Line 1455 of yacc.c  */
#line 14252 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2397:

/* Line 1455 of yacc.c  */
#line 14253 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2398:

/* Line 1455 of yacc.c  */
#line 14254 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2399:

/* Line 1455 of yacc.c  */
#line 14255 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2400:

/* Line 1455 of yacc.c  */
#line 14256 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2401:

/* Line 1455 of yacc.c  */
#line 14257 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2402:

/* Line 1455 of yacc.c  */
#line 14258 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2403:

/* Line 1455 of yacc.c  */
#line 14259 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2404:

/* Line 1455 of yacc.c  */
#line 14260 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2405:

/* Line 1455 of yacc.c  */
#line 14261 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2406:

/* Line 1455 of yacc.c  */
#line 14262 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2407:

/* Line 1455 of yacc.c  */
#line 14263 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2408:

/* Line 1455 of yacc.c  */
#line 14264 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2409:

/* Line 1455 of yacc.c  */
#line 14265 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2410:

/* Line 1455 of yacc.c  */
#line 14266 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2411:

/* Line 1455 of yacc.c  */
#line 14267 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2412:

/* Line 1455 of yacc.c  */
#line 14268 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2413:

/* Line 1455 of yacc.c  */
#line 14269 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2414:

/* Line 1455 of yacc.c  */
#line 14270 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2415:

/* Line 1455 of yacc.c  */
#line 14271 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2416:

/* Line 1455 of yacc.c  */
#line 14272 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2417:

/* Line 1455 of yacc.c  */
#line 14273 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2418:

/* Line 1455 of yacc.c  */
#line 14274 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2419:

/* Line 1455 of yacc.c  */
#line 14275 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2420:

/* Line 1455 of yacc.c  */
#line 14276 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2421:

/* Line 1455 of yacc.c  */
#line 14277 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2422:

/* Line 1455 of yacc.c  */
#line 14278 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2423:

/* Line 1455 of yacc.c  */
#line 14279 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2424:

/* Line 1455 of yacc.c  */
#line 14280 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2425:

/* Line 1455 of yacc.c  */
#line 14281 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2426:

/* Line 1455 of yacc.c  */
#line 14282 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2427:

/* Line 1455 of yacc.c  */
#line 14294 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SET_OPTION;
            mysql_init_select(lex);
            lex->option_type=OPT_SESSION;
            lex->var_list.empty();
            lex->one_shot_set= 0;
            lex->autocommit= 0;
            sp_create_assignment_lex(YYTHD, yychar == YYEMPTY);
          }
    break;

  case 2428:

/* Line 1455 of yacc.c  */
#line 14305 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2429:

/* Line 1455 of yacc.c  */
#line 14312 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(YYTHD, yychar == YYEMPTY))
              MYSQL_YYABORT;
          }
    break;

  case 2431:

/* Line 1455 of yacc.c  */
#line 14318 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->option_type= OPT_DEFAULT;
          }
    break;

  case 2432:

/* Line 1455 of yacc.c  */
#line 14322 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(YYTHD, yychar == YYEMPTY))
              MYSQL_YYABORT;
          }
    break;

  case 2433:

/* Line 1455 of yacc.c  */
#line 14327 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->option_type= (yyvsp[(1) - (1)].var_type);
          }
    break;

  case 2435:

/* Line 1455 of yacc.c  */
#line 14337 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(YYTHD, yychar == YYEMPTY))
              MYSQL_YYABORT; 
          }
    break;

  case 2437:

/* Line 1455 of yacc.c  */
#line 14343 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(YYTHD, yychar == YYEMPTY))
              MYSQL_YYABORT; 
          }
    break;

  case 2440:

/* Line 1455 of yacc.c  */
#line 14357 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            sp_create_assignment_lex(YYTHD, yychar == YYEMPTY);
          }
    break;

  case 2441:

/* Line 1455 of yacc.c  */
#line 14361 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(YYTHD, yychar == YYEMPTY))
              MYSQL_YYABORT; 
          }
    break;

  case 2442:

/* Line 1455 of yacc.c  */
#line 14366 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            sp_create_assignment_lex(YYTHD, yychar == YYEMPTY);
          }
    break;

  case 2443:

/* Line 1455 of yacc.c  */
#line 14370 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(YYTHD, yychar == YYEMPTY))
              MYSQL_YYABORT; 
          }
    break;

  case 2444:

/* Line 1455 of yacc.c  */
#line 14379 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->option_type= (yyvsp[(1) - (1)].var_type);
          }
    break;

  case 2447:

/* Line 1455 of yacc.c  */
#line 14387 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2448:

/* Line 1455 of yacc.c  */
#line 14388 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2449:

/* Line 1455 of yacc.c  */
#line 14389 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2450:

/* Line 1455 of yacc.c  */
#line 14393 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2451:

/* Line 1455 of yacc.c  */
#line 14394 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2452:

/* Line 1455 of yacc.c  */
#line 14395 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2453:

/* Line 1455 of yacc.c  */
#line 14396 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2454:

/* Line 1455 of yacc.c  */
#line 14400 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_DEFAULT; }
    break;

  case 2455:

/* Line 1455 of yacc.c  */
#line 14401 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2456:

/* Line 1455 of yacc.c  */
#line 14402 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2457:

/* Line 1455 of yacc.c  */
#line 14403 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2458:

/* Line 1455 of yacc.c  */
#line 14409 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;

            if ((yyvsp[(1) - (3)].variable).var && (yyvsp[(1) - (3)].variable).var != trg_new_row_fake_var)
            {
              /* It is a system variable. */
              if (set_system_variable(thd, &(yyvsp[(1) - (3)].variable), lex->option_type, (yyvsp[(3) - (3)].item)))
                MYSQL_YYABORT;
            }
            else
            {
              /*
                Not in trigger assigning value to new row,
                and option_type preceeding local variable is illegal.
              */
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2459:

/* Line 1455 of yacc.c  */
#line 14434 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;

            if ((yyvsp[(1) - (3)].variable).var == trg_new_row_fake_var)
            {
              /* We are in trigger and assigning value to field of new row */
              if (set_trigger_new_row(YYTHD, &(yyvsp[(1) - (3)].variable).base_name, (yyvsp[(3) - (3)].item)))
                MYSQL_YYABORT;
            }
            else if ((yyvsp[(1) - (3)].variable).var)
            {
              /* It is a system variable. */
              if (set_system_variable(thd, &(yyvsp[(1) - (3)].variable), lex->option_type, (yyvsp[(3) - (3)].item)))
                MYSQL_YYABORT;
            }
            else
            {
              sp_pcontext *spc= lex->spcont;
              sp_variable *spv= spc->find_variable((yyvsp[(1) - (3)].variable).base_name, false);

              /* It is a local variable. */
              if (set_local_variable(thd, spv, (yyvsp[(3) - (3)].item)))
                MYSQL_YYABORT;
            }
          }
    break;

  case 2460:

/* Line 1455 of yacc.c  */
#line 14461 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item_func_set_user_var *item;
            item= new (YYTHD->mem_root) Item_func_set_user_var((yyvsp[(2) - (4)].lex_str), (yyvsp[(4) - (4)].item));
            if (item == NULL)
              MYSQL_YYABORT;
            set_var_user *var= new set_var_user(item);
            if (var == NULL)
              MYSQL_YYABORT;
            Lex->var_list.push_back(var);
          }
    break;

  case 2461:

/* Line 1455 of yacc.c  */
#line 14472 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            struct sys_var_with_base tmp= (yyvsp[(4) - (6)].variable);
            /* Lookup if necessary: must be a system variable. */
            if (tmp.var == NULL)
            {
              if (find_sys_var_null_base(thd, &tmp))
                MYSQL_YYABORT;
            }
            if (set_system_variable(thd, &tmp, (yyvsp[(3) - (6)].var_type), (yyvsp[(6) - (6)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 2462:

/* Line 1455 of yacc.c  */
#line 14485 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            CHARSET_INFO *cs2;
            cs2= (yyvsp[(2) - (2)].charset) ? (yyvsp[(2) - (2)].charset): global_system_variables.character_set_client;
            set_var_collation_client *var;
            var= new set_var_collation_client(cs2,
                                              thd->variables.collation_database,
                                              cs2);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2463:

/* Line 1455 of yacc.c  */
#line 14499 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;
            LEX_STRING names;

            names.str= (char *)"names";
            names.length= 5;
            if (spc && spc->find_variable(names, false))
              my_error(ER_SP_BAD_VAR_SHADOW, MYF(0), names.str);
            else
              my_parse_error(ER(ER_SYNTAX_ERROR));

            MYSQL_YYABORT;
          }
    break;

  case 2464:

/* Line 1455 of yacc.c  */
#line 14514 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            CHARSET_INFO *cs2;
            CHARSET_INFO *cs3;
            cs2= (yyvsp[(2) - (3)].charset) ? (yyvsp[(2) - (3)].charset) : global_system_variables.character_set_client;
            cs3= (yyvsp[(3) - (3)].charset) ? (yyvsp[(3) - (3)].charset) : cs2;
            if (!my_charset_same(cs2, cs3))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       cs3->name, cs2->csname);
              MYSQL_YYABORT;
            }
            set_var_collation_client *var;
            var= new set_var_collation_client(cs3, cs3, cs3);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2465:

/* Line 1455 of yacc.c  */
#line 14533 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            LEX_USER *user;
            sp_pcontext *spc= lex->spcont;
            LEX_STRING pw;

            pw.str= (char *)"password";
            pw.length= 8;
            if (spc && spc->find_variable(pw, false))
            {
              my_error(ER_SP_BAD_VAR_SHADOW, MYF(0), pw.str);
              MYSQL_YYABORT;
            }
            if (!(user=(LEX_USER*) thd->alloc(sizeof(LEX_USER))))
              MYSQL_YYABORT;
            user->host=null_lex_str;
            user->user.str=thd->security_ctx->user;
            user->user.length= strlen(thd->security_ctx->user);
            set_var_password *var= new set_var_password(user, (yyvsp[(3) - (3)].simple_string));
            if (var == NULL)
              MYSQL_YYABORT;
            thd->lex->var_list.push_back(var);
            thd->lex->autocommit= TRUE;
            if (lex->sphead)
              lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;
          }
    break;

  case 2466:

/* Line 1455 of yacc.c  */
#line 14561 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            set_var_password *var= new set_var_password((yyvsp[(3) - (5)].lex_user),(yyvsp[(5) - (5)].simple_string));
            if (var == NULL)
              MYSQL_YYABORT;
            Lex->var_list.push_back(var);
            Lex->autocommit= TRUE;
            if (Lex->sphead)
              Lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;
          }
    break;

  case 2467:

/* Line 1455 of yacc.c  */
#line 14574 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            sp_pcontext *spc= thd->lex->spcont;
            sp_variable *spv;

            /* Best effort lookup for system variable. */
            if (!spc || !(spv = spc->find_variable((yyvsp[(1) - (1)].lex_str), false)))
            {
              struct sys_var_with_base tmp= {NULL, (yyvsp[(1) - (1)].lex_str)};

              /* Not an SP local variable */
              if (find_sys_var_null_base(thd, &tmp))
                MYSQL_YYABORT;

              (yyval.variable)= tmp;
            }
            else
            {
              /*
                Possibly an SP local variable (or a shadowed sysvar).
                Will depend on the context of the SET statement.
              */
              (yyval.variable).var= NULL;
              (yyval.variable).base_name= (yyvsp[(1) - (1)].lex_str);
            }
          }
    break;

  case 2468:

/* Line 1455 of yacc.c  */
#line 14601 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (check_reserved_words(&(yyvsp[(1) - (3)].lex_str)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (lex->sphead && lex->sphead->m_type == TYPE_ENUM_TRIGGER &&
                (!my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "NEW") || 
                 !my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "OLD")))
            {
              if ((yyvsp[(1) - (3)].lex_str).str[0]=='O' || (yyvsp[(1) - (3)].lex_str).str[0]=='o')
              {
                my_error(ER_TRG_CANT_CHANGE_ROW, MYF(0), "OLD", "");
                MYSQL_YYABORT;
              }
              if (lex->trg_chistics.event == TRG_EVENT_DELETE)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0),
                         "NEW", "on DELETE");
                MYSQL_YYABORT;
              }
              if (lex->trg_chistics.action_time == TRG_ACTION_AFTER)
              {
                my_error(ER_TRG_CANT_CHANGE_ROW, MYF(0), "NEW", "after ");
                MYSQL_YYABORT;
              }
              /* This special combination will denote field of NEW row */
              (yyval.variable).var= trg_new_row_fake_var;
              (yyval.variable).base_name= (yyvsp[(3) - (3)].lex_str);
            }
            else
            {
              sys_var *tmp=find_sys_var(YYTHD, (yyvsp[(3) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).length);
              if (!tmp)
                MYSQL_YYABORT;
              if (!tmp->is_struct())
                my_error(ER_VARIABLE_IS_NOT_STRUCT, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              (yyval.variable).var= tmp;
              (yyval.variable).base_name= (yyvsp[(1) - (3)].lex_str);
            }
          }
    break;

  case 2469:

/* Line 1455 of yacc.c  */
#line 14644 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            sys_var *tmp=find_sys_var(YYTHD, (yyvsp[(3) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).length);
            if (!tmp)
              MYSQL_YYABORT;
            if (!tmp->is_struct())
              my_error(ER_VARIABLE_IS_NOT_STRUCT, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
            (yyval.variable).var= tmp;
            (yyval.variable).base_name.str=    (char*) "default";
            (yyval.variable).base_name.length= 7;
          }
    break;

  case 2474:

/* Line 1455 of yacc.c  */
#line 14665 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex=Lex;
            Item *item= new (thd->mem_root) Item_int((int32) (yyvsp[(1) - (1)].num));
            if (item == NULL)
              MYSQL_YYABORT;
            set_var *var= new set_var(lex->option_type,
                                      find_sys_var(thd, "tx_read_only"),
                                      &null_lex_str,
                                      item);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2475:

/* Line 1455 of yacc.c  */
#line 14683 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex=Lex;
            Item *item= new (thd->mem_root) Item_int((int32) (yyvsp[(3) - (3)].tx_isolation));
            if (item == NULL)
              MYSQL_YYABORT;
            set_var *var= new set_var(lex->option_type,
                                      find_sys_var(thd, "tx_isolation"),
                                      &null_lex_str,
                                      item);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2476:

/* Line 1455 of yacc.c  */
#line 14700 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= true; }
    break;

  case 2477:

/* Line 1455 of yacc.c  */
#line 14701 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= false; }
    break;

  case 2478:

/* Line 1455 of yacc.c  */
#line 14705 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_READ_UNCOMMITTED; }
    break;

  case 2479:

/* Line 1455 of yacc.c  */
#line 14706 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_READ_COMMITTED; }
    break;

  case 2480:

/* Line 1455 of yacc.c  */
#line 14707 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_REPEATABLE_READ; }
    break;

  case 2481:

/* Line 1455 of yacc.c  */
#line 14708 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_SERIALIZABLE; }
    break;

  case 2482:

/* Line 1455 of yacc.c  */
#line 14712 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.simple_string)=(yyvsp[(1) - (1)].lex_str).str;}
    break;

  case 2483:

/* Line 1455 of yacc.c  */
#line 14714 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if ((yyvsp[(3) - (4)].lex_str).length == 0)
             (yyval.simple_string)= (yyvsp[(3) - (4)].lex_str).str;
            else
            switch (YYTHD->variables.old_passwords) {
              case 1: (yyval.simple_string)= Item_func_old_password::
                alloc(YYTHD, (yyvsp[(3) - (4)].lex_str).str, (yyvsp[(3) - (4)].lex_str).length);
                break;
              case 0:
              case 2: (yyval.simple_string)= Item_func_password::
                create_password_hash_buffer(YYTHD, (yyvsp[(3) - (4)].lex_str).str, (yyvsp[(3) - (4)].lex_str).length);
                break;
            }
            if ((yyval.simple_string) == NULL)
              MYSQL_YYABORT;
            Lex->contains_plaintext_password= true;
          }
    break;

  case 2484:

/* Line 1455 of yacc.c  */
#line 14732 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.simple_string)= (yyvsp[(3) - (4)].lex_str).length ? Item_func_old_password::
              alloc(YYTHD, (yyvsp[(3) - (4)].lex_str).str, (yyvsp[(3) - (4)].lex_str).length) :
              (yyvsp[(3) - (4)].lex_str).str;
            if ((yyval.simple_string) == NULL)
              MYSQL_YYABORT;
            Lex->contains_plaintext_password= true;
          }
    break;

  case 2485:

/* Line 1455 of yacc.c  */
#line 14743 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 2486:

/* Line 1455 of yacc.c  */
#line 14744 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)=0; }
    break;

  case 2487:

/* Line 1455 of yacc.c  */
#line 14746 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_string("ON",  2, system_charset_info);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2488:

/* Line 1455 of yacc.c  */
#line 14752 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_string("ALL", 3, system_charset_info);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2489:

/* Line 1455 of yacc.c  */
#line 14758 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_string("binary", 6, system_charset_info);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2490:

/* Line 1455 of yacc.c  */
#line 14769 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "LOCK");
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_LOCK_TABLES;
          }
    break;

  case 2491:

/* Line 1455 of yacc.c  */
#line 14780 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2496:

/* Line 1455 of yacc.c  */
#line 14795 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            thr_lock_type lock_type= (thr_lock_type) (yyvsp[(3) - (3)].num);
            bool lock_for_write= (lock_type >= TL_WRITE_ALLOW_WRITE);
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (3)].table), (yyvsp[(2) - (3)].lex_str_ptr), 0, lock_type,
                                           (lock_for_write ?
                                            lock_type == TL_WRITE_CONCURRENT_INSERT ?
                                            MDL_SHARED_WRITE :
                                            MDL_SHARED_NO_READ_WRITE :
                                            MDL_SHARED_READ)))
              MYSQL_YYABORT;
          }
    break;

  case 2497:

/* Line 1455 of yacc.c  */
#line 14809 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= TL_READ_NO_INSERT; }
    break;

  case 2498:

/* Line 1455 of yacc.c  */
#line 14810 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= TL_WRITE_DEFAULT; }
    break;

  case 2499:

/* Line 1455 of yacc.c  */
#line 14812 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= (Lex->sphead ? TL_WRITE_DEFAULT : TL_WRITE_CONCURRENT_INSERT);
          }
    break;

  case 2500:

/* Line 1455 of yacc.c  */
#line 14816 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 2501:

/* Line 1455 of yacc.c  */
#line 14817 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= TL_READ; }
    break;

  case 2502:

/* Line 1455 of yacc.c  */
#line 14822 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "UNLOCK");
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_UNLOCK_TABLES;
          }
    break;

  case 2503:

/* Line 1455 of yacc.c  */
#line 14833 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2504:

/* Line 1455 of yacc.c  */
#line 14842 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_HA_OPEN;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(2) - (4)].table), (yyvsp[(4) - (4)].lex_str_ptr), 0))
              MYSQL_YYABORT;
          }
    break;

  case 2505:

/* Line 1455 of yacc.c  */
#line 14854 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_HA_CLOSE;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(2) - (3)].table), 0, 0))
              MYSQL_YYABORT;
          }
    break;

  case 2506:

/* Line 1455 of yacc.c  */
#line 14866 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
              MYSQL_YYABORT;
            }
            lex->expr_allows_subselect= FALSE;
            lex->sql_command = SQLCOM_HA_READ;
            lex->ha_rkey_mode= HA_READ_KEY_EXACT; /* Avoid purify warnings */
            Item *one= new (YYTHD->mem_root) Item_int((int32) 1);
            if (one == NULL)
              MYSQL_YYABORT;
            lex->current_select->select_limit= one;
            lex->current_select->offset_limit= 0;
            lex->limit_rows_examined= 0;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(2) - (3)].table), 0, 0))
              MYSQL_YYABORT;
          }
    break;

  case 2507:

/* Line 1455 of yacc.c  */
#line 14886 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->expr_allows_subselect= TRUE;
            /* Stored functions are not supported for HANDLER READ. */
            if (Lex->uses_stored_routines())
            {
              my_error(ER_NOT_SUPPORTED_YET, MYF(0),
                       "stored functions in HANDLER ... READ");
              MYSQL_YYABORT;
            }
          }
    break;

  case 2508:

/* Line 1455 of yacc.c  */
#line 14899 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ident= null_lex_str; }
    break;

  case 2509:

/* Line 1455 of yacc.c  */
#line 14900 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ident= (yyvsp[(1) - (2)].lex_str); }
    break;

  case 2510:

/* Line 1455 of yacc.c  */
#line 14904 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RFIRST; }
    break;

  case 2511:

/* Line 1455 of yacc.c  */
#line 14905 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RNEXT;  }
    break;

  case 2512:

/* Line 1455 of yacc.c  */
#line 14909 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RFIRST; }
    break;

  case 2513:

/* Line 1455 of yacc.c  */
#line 14910 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RNEXT;  }
    break;

  case 2514:

/* Line 1455 of yacc.c  */
#line 14911 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RPREV;  }
    break;

  case 2515:

/* Line 1455 of yacc.c  */
#line 14912 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RLAST;  }
    break;

  case 2516:

/* Line 1455 of yacc.c  */
#line 14914 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->ha_read_mode = RKEY;
            lex->ha_rkey_mode=(yyvsp[(1) - (1)].ha_rkey_mode);
            if (!(lex->insert_list = new List_item))
              MYSQL_YYABORT;
          }
    break;

  case 2517:

/* Line 1455 of yacc.c  */
#line 14922 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2518:

/* Line 1455 of yacc.c  */
#line 14926 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_EXACT;   }
    break;

  case 2519:

/* Line 1455 of yacc.c  */
#line 14927 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_OR_NEXT; }
    break;

  case 2520:

/* Line 1455 of yacc.c  */
#line 14928 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_OR_PREV; }
    break;

  case 2521:

/* Line 1455 of yacc.c  */
#line 14929 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_AFTER_KEY;   }
    break;

  case 2522:

/* Line 1455 of yacc.c  */
#line 14930 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_BEFORE_KEY;  }
    break;

  case 2523:

/* Line 1455 of yacc.c  */
#line 14937 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2524:

/* Line 1455 of yacc.c  */
#line 14942 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= 0;
          }
    break;

  case 2525:

/* Line 1455 of yacc.c  */
#line 14948 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= TYPE_ENUM_FUNCTION;
          }
    break;

  case 2526:

/* Line 1455 of yacc.c  */
#line 14959 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= TYPE_ENUM_PROCEDURE;
          }
    break;

  case 2527:

/* Line 1455 of yacc.c  */
#line 14970 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_REVOKE_ALL;
          }
    break;

  case 2528:

/* Line 1455 of yacc.c  */
#line 14974 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->users_list.push_front ((yyvsp[(3) - (5)].lex_user));
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= TYPE_ENUM_PROXY;
          }
    break;

  case 2529:

/* Line 1455 of yacc.c  */
#line 14984 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2530:

/* Line 1455 of yacc.c  */
#line 14990 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_GRANT;
            lex->type= 0;
          }
    break;

  case 2531:

/* Line 1455 of yacc.c  */
#line 14997 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_GRANT;
            lex->type= TYPE_ENUM_FUNCTION;
          }
    break;

  case 2532:

/* Line 1455 of yacc.c  */
#line 15009 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_GRANT;
            lex->type= TYPE_ENUM_PROCEDURE;
          }
    break;

  case 2533:

/* Line 1455 of yacc.c  */
#line 15020 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->users_list.push_front ((yyvsp[(3) - (6)].lex_user));
            lex->sql_command= SQLCOM_GRANT;
            lex->type= TYPE_ENUM_PROXY;
          }
    break;

  case 2536:

/* Line 1455 of yacc.c  */
#line 15034 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2537:

/* Line 1455 of yacc.c  */
#line 15036 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            Lex->all_privileges= 1; 
            Lex->grant= GLOBAL_ACLS;
          }
    break;

  case 2542:

/* Line 1455 of yacc.c  */
#line 15054 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->which_columns = SELECT_ACL;}
    break;

  case 2543:

/* Line 1455 of yacc.c  */
#line 15055 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2544:

/* Line 1455 of yacc.c  */
#line 15057 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->which_columns = INSERT_ACL;}
    break;

  case 2545:

/* Line 1455 of yacc.c  */
#line 15058 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2546:

/* Line 1455 of yacc.c  */
#line 15060 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->which_columns = UPDATE_ACL; }
    break;

  case 2547:

/* Line 1455 of yacc.c  */
#line 15061 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2548:

/* Line 1455 of yacc.c  */
#line 15063 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->which_columns = REFERENCES_ACL;}
    break;

  case 2549:

/* Line 1455 of yacc.c  */
#line 15064 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2550:

/* Line 1455 of yacc.c  */
#line 15065 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= DELETE_ACL;}
    break;

  case 2551:

/* Line 1455 of yacc.c  */
#line 15066 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2552:

/* Line 1455 of yacc.c  */
#line 15067 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= INDEX_ACL;}
    break;

  case 2553:

/* Line 1455 of yacc.c  */
#line 15068 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= ALTER_ACL;}
    break;

  case 2554:

/* Line 1455 of yacc.c  */
#line 15069 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_ACL;}
    break;

  case 2555:

/* Line 1455 of yacc.c  */
#line 15070 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= DROP_ACL;}
    break;

  case 2556:

/* Line 1455 of yacc.c  */
#line 15071 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= EXECUTE_ACL;}
    break;

  case 2557:

/* Line 1455 of yacc.c  */
#line 15072 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= RELOAD_ACL;}
    break;

  case 2558:

/* Line 1455 of yacc.c  */
#line 15073 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= SHUTDOWN_ACL;}
    break;

  case 2559:

/* Line 1455 of yacc.c  */
#line 15074 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= PROCESS_ACL;}
    break;

  case 2560:

/* Line 1455 of yacc.c  */
#line 15075 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= FILE_ACL;}
    break;

  case 2561:

/* Line 1455 of yacc.c  */
#line 15076 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= GRANT_ACL;}
    break;

  case 2562:

/* Line 1455 of yacc.c  */
#line 15077 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= SHOW_DB_ACL;}
    break;

  case 2563:

/* Line 1455 of yacc.c  */
#line 15078 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= SUPER_ACL;}
    break;

  case 2564:

/* Line 1455 of yacc.c  */
#line 15079 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_TMP_ACL;}
    break;

  case 2565:

/* Line 1455 of yacc.c  */
#line 15080 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= LOCK_TABLES_ACL; }
    break;

  case 2566:

/* Line 1455 of yacc.c  */
#line 15081 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= REPL_SLAVE_ACL; }
    break;

  case 2567:

/* Line 1455 of yacc.c  */
#line 15082 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= REPL_CLIENT_ACL; }
    break;

  case 2568:

/* Line 1455 of yacc.c  */
#line 15083 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_VIEW_ACL; }
    break;

  case 2569:

/* Line 1455 of yacc.c  */
#line 15084 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= SHOW_VIEW_ACL; }
    break;

  case 2570:

/* Line 1455 of yacc.c  */
#line 15085 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_PROC_ACL; }
    break;

  case 2571:

/* Line 1455 of yacc.c  */
#line 15086 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= ALTER_PROC_ACL; }
    break;

  case 2572:

/* Line 1455 of yacc.c  */
#line 15087 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_USER_ACL; }
    break;

  case 2573:

/* Line 1455 of yacc.c  */
#line 15088 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= EVENT_ACL;}
    break;

  case 2574:

/* Line 1455 of yacc.c  */
#line 15089 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= TRIGGER_ACL; }
    break;

  case 2575:

/* Line 1455 of yacc.c  */
#line 15090 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_TABLESPACE_ACL; }
    break;

  case 2576:

/* Line 1455 of yacc.c  */
#line 15094 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2577:

/* Line 1455 of yacc.c  */
#line 15095 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2580:

/* Line 1455 of yacc.c  */
#line 15105 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->x509_subject)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "SUBJECT");
              MYSQL_YYABORT;
            }
            lex->x509_subject=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2581:

/* Line 1455 of yacc.c  */
#line 15115 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->x509_issuer)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "ISSUER");
              MYSQL_YYABORT;
            }
            lex->x509_issuer=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2582:

/* Line 1455 of yacc.c  */
#line 15125 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->ssl_cipher)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "CIPHER");
              MYSQL_YYABORT;
            }
            lex->ssl_cipher=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2583:

/* Line 1455 of yacc.c  */
#line 15138 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            size_t dummy;
            if (lex->copy_db_to(&lex->current_select->db, &dummy))
              MYSQL_YYABORT;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant = DB_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
            {
              my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2584:

/* Line 1455 of yacc.c  */
#line 15153 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->current_select->db = (yyvsp[(1) - (3)].lex_str).str;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant = DB_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
            {
              my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2585:

/* Line 1455 of yacc.c  */
#line 15166 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->current_select->db = NULL;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant= GLOBAL_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
            {
              my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2586:

/* Line 1455 of yacc.c  */
#line 15179 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(1) - (1)].table),NULL,
                                                        TL_OPTION_UPDATING))
              MYSQL_YYABORT;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant =  TABLE_ACLS & ~GRANT_ACL;
          }
    break;

  case 2587:

/* Line 1455 of yacc.c  */
#line 15191 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (1)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2588:

/* Line 1455 of yacc.c  */
#line 15196 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2589:

/* Line 1455 of yacc.c  */
#line 15204 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (1)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2590:

/* Line 1455 of yacc.c  */
#line 15209 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2595:

/* Line 1455 of yacc.c  */
#line 15220 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.lex_user)=(yyvsp[(1) - (4)].lex_user); (yyvsp[(1) - (4)].lex_user)->password=(yyvsp[(4) - (4)].lex_str);
            if (Lex->sql_command == SQLCOM_REVOKE)
              MYSQL_YYABORT;
            if ((yyvsp[(4) - (4)].lex_str).length)
            {
              if (YYTHD->variables.old_passwords == 1)
              {
                char *buff= 
                  (char *) YYTHD->alloc(SCRAMBLED_PASSWORD_CHAR_LENGTH_323+1);
                if (buff == NULL)
                  MYSQL_YYABORT;
                my_make_scrambled_password_323(buff, (yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length);
                (yyvsp[(1) - (4)].lex_user)->password.str= buff;
                (yyvsp[(1) - (4)].lex_user)->password.length= SCRAMBLED_PASSWORD_CHAR_LENGTH_323;
              }
              else
              {
                char *buff= 
                  (char *) YYTHD->alloc(SCRAMBLED_PASSWORD_CHAR_LENGTH+1);
                if (buff == NULL)
                  MYSQL_YYABORT;
                my_make_scrambled_password_sha1(buff, (yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length);
                (yyvsp[(1) - (4)].lex_user)->password.str= buff;
                (yyvsp[(1) - (4)].lex_user)->password.length= SCRAMBLED_PASSWORD_CHAR_LENGTH;
              }
            }
          }
    break;

  case 2596:

/* Line 1455 of yacc.c  */
#line 15249 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            (yyval.lex_user)= (yyvsp[(1) - (5)].lex_user); 
            (yyvsp[(1) - (5)].lex_user)->password= (yyvsp[(5) - (5)].lex_str); 
          }
    break;

  case 2597:

/* Line 1455 of yacc.c  */
#line 15254 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.lex_user)= (yyvsp[(1) - (4)].lex_user);
            (yyvsp[(1) - (4)].lex_user)->plugin= (yyvsp[(4) - (4)].lex_str);
            (yyvsp[(1) - (4)].lex_user)->auth= empty_lex_str;
          }
    break;

  case 2598:

/* Line 1455 of yacc.c  */
#line 15260 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.lex_user)= (yyvsp[(1) - (6)].lex_user);
            (yyvsp[(1) - (6)].lex_user)->plugin= (yyvsp[(4) - (6)].lex_str);
            (yyvsp[(1) - (6)].lex_user)->auth= (yyvsp[(6) - (6)].lex_str);
          }
    break;

  case 2599:

/* Line 1455 of yacc.c  */
#line 15266 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_user)= (yyvsp[(1) - (1)].lex_user); (yyvsp[(1) - (1)].lex_user)->password= null_lex_str; }
    break;

  case 2600:

/* Line 1455 of yacc.c  */
#line 15271 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->grant |= lex->which_columns;
          }
    break;

  case 2604:

/* Line 1455 of yacc.c  */
#line 15285 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            String *new_str = new (YYTHD->mem_root) String((const char*) (yyvsp[(1) - (1)].lex_str).str,(yyvsp[(1) - (1)].lex_str).length,system_charset_info);
            if (new_str == NULL)
              MYSQL_YYABORT;
            List_iterator <LEX_COLUMN> iter(Lex->columns);
            class LEX_COLUMN *point;
            LEX *lex=Lex;
            while ((point=iter++))
            {
              if (!my_strcasecmp(system_charset_info,
                                 point->column.c_ptr(), new_str->c_ptr()))
                break;
            }
            lex->grant_tot_col|= lex->which_columns;
            if (point)
              point->rights |= lex->which_columns;
            else
            {
              LEX_COLUMN *col= new LEX_COLUMN (*new_str,lex->which_columns);
              if (col == NULL)
                MYSQL_YYABORT;
              lex->columns.push_back(col);
            }
          }
    break;

  case 2606:

/* Line 1455 of yacc.c  */
#line 15314 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_SPECIFIED;
          }
    break;

  case 2607:

/* Line 1455 of yacc.c  */
#line 15318 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_ANY;
          }
    break;

  case 2608:

/* Line 1455 of yacc.c  */
#line 15322 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_X509;
          }
    break;

  case 2609:

/* Line 1455 of yacc.c  */
#line 15326 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_NONE;
          }
    break;

  case 2610:

/* Line 1455 of yacc.c  */
#line 15332 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2612:

/* Line 1455 of yacc.c  */
#line 15337 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2613:

/* Line 1455 of yacc.c  */
#line 15338 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= GRANT_ACL;}
    break;

  case 2614:

/* Line 1455 of yacc.c  */
#line 15342 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2615:

/* Line 1455 of yacc.c  */
#line 15343 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2616:

/* Line 1455 of yacc.c  */
#line 15347 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= GRANT_ACL;}
    break;

  case 2617:

/* Line 1455 of yacc.c  */
#line 15349 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.questions=(yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::QUERIES_PER_HOUR;
          }
    break;

  case 2618:

/* Line 1455 of yacc.c  */
#line 15355 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.updates=(yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::UPDATES_PER_HOUR;
          }
    break;

  case 2619:

/* Line 1455 of yacc.c  */
#line 15361 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.conn_per_hour= (yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::CONNECTIONS_PER_HOUR;
          }
    break;

  case 2620:

/* Line 1455 of yacc.c  */
#line 15367 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.user_conn= (yyvsp[(2) - (2)].num);
            lex->mqh.specified_limits|= USER_RESOURCES::USER_CONNECTIONS;
          }
    break;

  case 2621:

/* Line 1455 of yacc.c  */
#line 15376 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_BEGIN;
            lex->start_transaction_opt= 0;
          }
    break;

  case 2622:

/* Line 1455 of yacc.c  */
#line 15381 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2623:

/* Line 1455 of yacc.c  */
#line 15385 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2624:

/* Line 1455 of yacc.c  */
#line 15386 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2625:

/* Line 1455 of yacc.c  */
#line 15391 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_UNKNOWN; }
    break;

  case 2626:

/* Line 1455 of yacc.c  */
#line 15392 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_NO; }
    break;

  case 2627:

/* Line 1455 of yacc.c  */
#line 15393 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_YES; }
    break;

  case 2628:

/* Line 1455 of yacc.c  */
#line 15398 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_UNKNOWN; }
    break;

  case 2629:

/* Line 1455 of yacc.c  */
#line 15399 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_YES; }
    break;

  case 2630:

/* Line 1455 of yacc.c  */
#line 15400 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_NO; }
    break;

  case 2631:

/* Line 1455 of yacc.c  */
#line 15404 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2632:

/* Line 1455 of yacc.c  */
#line 15405 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2633:

/* Line 1455 of yacc.c  */
#line 15410 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_COMMIT;
            /* Don't allow AND CHAIN RELEASE. */
            MYSQL_YYABORT_UNLESS((yyvsp[(3) - (4)].m_yes_no_unk) != TVL_YES || (yyvsp[(4) - (4)].m_yes_no_unk) != TVL_YES);
            lex->tx_chain= (yyvsp[(3) - (4)].m_yes_no_unk);
            lex->tx_release= (yyvsp[(4) - (4)].m_yes_no_unk);
          }
    break;

  case 2634:

/* Line 1455 of yacc.c  */
#line 15422 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ROLLBACK;
            /* Don't allow AND CHAIN RELEASE. */
            MYSQL_YYABORT_UNLESS((yyvsp[(3) - (4)].m_yes_no_unk) != TVL_YES || (yyvsp[(4) - (4)].m_yes_no_unk) != TVL_YES);
            lex->tx_chain= (yyvsp[(3) - (4)].m_yes_no_unk);
            lex->tx_release= (yyvsp[(4) - (4)].m_yes_no_unk);
          }
    break;

  case 2635:

/* Line 1455 of yacc.c  */
#line 15432 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ROLLBACK_TO_SAVEPOINT;
            lex->ident= (yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 2636:

/* Line 1455 of yacc.c  */
#line 15441 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SAVEPOINT;
            lex->ident= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 2637:

/* Line 1455 of yacc.c  */
#line 15450 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_RELEASE_SAVEPOINT;
            lex->ident= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 2638:

/* Line 1455 of yacc.c  */
#line 15463 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2640:

/* Line 1455 of yacc.c  */
#line 15469 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_select_to_union_list(Lex, (bool)(yyvsp[(2) - (2)].num), TRUE))
              MYSQL_YYABORT;
          }
    break;

  case 2641:

/* Line 1455 of yacc.c  */
#line 15474 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              Remove from the name resolution context stack the context of the
              last select in the union.
            */
            Lex->pop_context();
          }
    break;

  case 2642:

/* Line 1455 of yacc.c  */
#line 15484 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 2643:

/* Line 1455 of yacc.c  */
#line 15485 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 2644:

/* Line 1455 of yacc.c  */
#line 15486 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 2645:

/* Line 1455 of yacc.c  */
#line 15490 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.is_not_empty)= false; }
    break;

  case 2646:

/* Line 1455 of yacc.c  */
#line 15491 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.is_not_empty)= true; }
    break;

  case 2647:

/* Line 1455 of yacc.c  */
#line 15495 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            DBUG_ASSERT(lex->current_select->linkage != GLOBAL_OPTIONS_TYPE);
            SELECT_LEX *sel= lex->current_select;
            SELECT_LEX_UNIT *unit= sel->master_unit();
            SELECT_LEX *fake= unit->fake_select_lex;
            if (fake)
            {
              unit->global_parameters= fake;
              fake->no_table_names_allowed= 1;
              lex->current_select= fake;
            }
            thd->where= "global ORDER clause";
          }
    break;

  case 2648:

/* Line 1455 of yacc.c  */
#line 15511 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            thd->lex->current_select->no_table_names_allowed= 0;
            thd->where= "";
          }
    break;

  case 2651:

/* Line 1455 of yacc.c  */
#line 15524 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=1; }
    break;

  case 2652:

/* Line 1455 of yacc.c  */
#line 15525 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=1; }
    break;

  case 2653:

/* Line 1455 of yacc.c  */
#line 15526 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=0; }
    break;

  case 2654:

/* Line 1455 of yacc.c  */
#line 15531 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            (yyval.select_lex)= Lex->current_select->master_unit()->first_select();
          }
    break;

  case 2655:

/* Line 1455 of yacc.c  */
#line 15535 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.select_lex)= Lex->current_select->master_unit()->first_select();
          }
    break;

  case 2657:

/* Line 1455 of yacc.c  */
#line 15544 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_select_to_union_list(Lex, (bool)(yyvsp[(3) - (3)].num), FALSE))
              MYSQL_YYABORT;
          }
    break;

  case 2658:

/* Line 1455 of yacc.c  */
#line 15550 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->pop_context();
            (yyval.select_lex)= (yyvsp[(1) - (6)].select_lex);
          }
    break;

  case 2659:

/* Line 1455 of yacc.c  */
#line 15559 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            (yyval.select_lex)= (yyvsp[(2) - (3)].select_lex);
          }
    break;

  case 2660:

/* Line 1455 of yacc.c  */
#line 15565 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->expr_allows_subselect ||
               lex->sql_command == (int)SQLCOM_PURGE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            /* 
              we are making a "derived table" for the parenthesis
              as we need to have a lex level to fit the union 
              after the parenthesis, e.g. 
              (SELECT .. ) UNION ...  becomes 
              SELECT * FROM ((SELECT ...) UNION ...)
            */
            if (mysql_new_select(Lex, 1))
              MYSQL_YYABORT;
          }
    break;

  case 2661:

/* Line 1455 of yacc.c  */
#line 15586 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->pop_context();
            SELECT_LEX *child= lex->current_select;
            lex->current_select = lex->current_select->return_after_parsing();
            lex->nest_level--;
            lex->current_select->n_child_sum_items += child->n_sum_items;
            /*
              A subselect can add fields to an outer select. Reserve space for
              them.
            */
            lex->current_select->select_n_where_fields+=
            child->select_n_where_fields;
          }
    break;

  case 2666:

/* Line 1455 of yacc.c  */
#line 15614 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->options|= SELECT_STRAIGHT_JOIN; }
    break;

  case 2667:

/* Line 1455 of yacc.c  */
#line 15616 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            YYPS->m_lock_type= TL_READ_HIGH_PRIORITY;
            YYPS->m_mdl_type= MDL_SHARED_READ;
            Select->options|= SELECT_HIGH_PRIORITY;
          }
    break;

  case 2668:

/* Line 1455 of yacc.c  */
#line 15623 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->options|= SELECT_DISTINCT; }
    break;

  case 2669:

/* Line 1455 of yacc.c  */
#line 15624 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->options|= SELECT_SMALL_RESULT; }
    break;

  case 2670:

/* Line 1455 of yacc.c  */
#line 15625 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->options|= SELECT_BIG_RESULT; }
    break;

  case 2671:

/* Line 1455 of yacc.c  */
#line 15627 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            Select->options|= OPTION_BUFFER_RESULT;
          }
    break;

  case 2672:

/* Line 1455 of yacc.c  */
#line 15633 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            Select->options|= OPTION_FOUND_ROWS;
          }
    break;

  case 2673:

/* Line 1455 of yacc.c  */
#line 15638 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->options|= SELECT_ALL; }
    break;

  case 2674:

/* Line 1455 of yacc.c  */
#line 15649 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2675:

/* Line 1455 of yacc.c  */
#line 15651 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2676:

/* Line 1455 of yacc.c  */
#line 15653 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2690:

/* Line 1455 of yacc.c  */
#line 15686 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              We have to distinguish missing DEFINER-clause from case when
              CURRENT_USER specified as definer explicitly in order to properly
              handle CREATE TRIGGER statements which come to replication thread
              from older master servers (i.e. to create non-suid trigger in this
              case).
            */
            YYTHD->lex->definer= 0;
          }
    break;

  case 2691:

/* Line 1455 of yacc.c  */
#line 15700 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            YYTHD->lex->definer= get_current_user(YYTHD, (yyvsp[(3) - (3)].lex_user));
          }
    break;

  case 2692:

/* Line 1455 of yacc.c  */
#line 15713 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2693:

/* Line 1455 of yacc.c  */
#line 15715 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2694:

/* Line 1455 of yacc.c  */
#line 15717 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2695:

/* Line 1455 of yacc.c  */
#line 15722 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_view_mode= VIEW_CREATE_OR_REPLACE; }
    break;

  case 2696:

/* Line 1455 of yacc.c  */
#line 15727 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_view_algorithm= DTYPE_ALGORITHM_UNDEFINED; }
    break;

  case 2697:

/* Line 1455 of yacc.c  */
#line 15729 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_view_algorithm= VIEW_ALGORITHM_MERGE; }
    break;

  case 2698:

/* Line 1455 of yacc.c  */
#line 15731 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_view_algorithm= VIEW_ALGORITHM_TMPTABLE; }
    break;

  case 2699:

/* Line 1455 of yacc.c  */
#line 15736 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_DEFAULT; }
    break;

  case 2700:

/* Line 1455 of yacc.c  */
#line 15738 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_DEFINER; }
    break;

  case 2701:

/* Line 1455 of yacc.c  */
#line 15740 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_INVOKER; }
    break;

  case 2702:

/* Line 1455 of yacc.c  */
#line 15745 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_CREATE_VIEW;
            /* first table in list is target VIEW name */
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(3) - (3)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_IGNORE,
                                                   MDL_EXCLUSIVE))
              MYSQL_YYABORT;
            lex->query_tables->open_strategy= TABLE_LIST::OPEN_STUB;
          }
    break;

  case 2704:

/* Line 1455 of yacc.c  */
#line 15762 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2706:

/* Line 1455 of yacc.c  */
#line 15768 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
              Lex->view_list.push_back((LEX_STRING*)
              sql_memdup(&(yyvsp[(1) - (1)].lex_str), sizeof(LEX_STRING)));
            }
    break;

  case 2707:

/* Line 1455 of yacc.c  */
#line 15773 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
              Lex->view_list.push_back((LEX_STRING*)
              sql_memdup(&(yyvsp[(3) - (3)].lex_str), sizeof(LEX_STRING)));
            }
    break;

  case 2708:

/* Line 1455 of yacc.c  */
#line 15780 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->parsing_options.allows_variable= FALSE;
            lex->parsing_options.allows_select_into= FALSE;
            lex->parsing_options.allows_select_procedure= FALSE;
            lex->parsing_options.allows_derived= FALSE;
            lex->create_view_select.str= (char *) YYLIP->get_cpp_ptr();
          }
    break;

  case 2709:

/* Line 1455 of yacc.c  */
#line 15789 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            uint len= YYLIP->get_cpp_ptr() - lex->create_view_select.str;
            void *create_view_select= thd->memdup(lex->create_view_select.str, len);
            lex->create_view_select.length= len;
            lex->create_view_select.str= (char *) create_view_select;
            trim_whitespace(thd->charset(), &lex->create_view_select);
            lex->parsing_options.allows_variable= TRUE;
            lex->parsing_options.allows_select_into= TRUE;
            lex->parsing_options.allows_select_procedure= TRUE;
            lex->parsing_options.allows_derived= TRUE;
          }
    break;

  case 2712:

/* Line 1455 of yacc.c  */
#line 15811 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_NONE; }
    break;

  case 2713:

/* Line 1455 of yacc.c  */
#line 15813 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_CASCADED; }
    break;

  case 2714:

/* Line 1455 of yacc.c  */
#line 15815 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_CASCADED; }
    break;

  case 2715:

/* Line 1455 of yacc.c  */
#line 15817 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_LOCAL; }
    break;

  case 2716:

/* Line 1455 of yacc.c  */
#line 15834 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* $8 */
            Lex->raw_trg_on_table_name_begin= YYLIP->get_tok_start();
          }
    break;

  case 2717:

/* Line 1455 of yacc.c  */
#line 15840 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* $12 */
            Lex->raw_trg_on_table_name_end= YYLIP->get_tok_start();
          }
    break;

  case 2718:

/* Line 1455 of yacc.c  */
#line 15845 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* $15 */
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_head *sp;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "TRIGGER");
              MYSQL_YYABORT;
            }

            if (!(sp= new sp_head()))
              MYSQL_YYABORT;
            sp->reset_thd_mem_root(thd);
            sp->init(lex);
            sp->m_type= TYPE_ENUM_TRIGGER;
            sp->init_sp_name(thd, (yyvsp[(3) - (14)].spname));
            lex->stmt_definition_begin= (yyvsp[(2) - (14)].simple_string);
            lex->ident.str= (yyvsp[(7) - (14)].simple_string);
            lex->ident.length= (yyvsp[(11) - (14)].simple_string) - (yyvsp[(7) - (14)].simple_string);

            lex->sphead= sp;
            lex->spname= (yyvsp[(3) - (14)].spname);

            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
            lex->sphead->m_chistics= &lex->sp_chistics;
            lex->sphead->set_body_start(thd, lip->get_cpp_ptr());
          }
    break;

  case 2719:

/* Line 1455 of yacc.c  */
#line 15875 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* $17 */
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            lex->sql_command= SQLCOM_CREATE_TRIGGER;
            sp->set_stmt_end(YYTHD);
            sp->restore_thd_mem_root(YYTHD);

            if (sp->is_not_allowed_in_function("trigger"))
              MYSQL_YYABORT;

            /*
              We have to do it after parsing trigger body, because some of
              sp_proc_stmt alternatives are not saving/restoring LEX, so
              lex->query_tables can be wiped out.
            */
            if (!lex->select_lex.add_table_to_list(YYTHD, (yyvsp[(9) - (16)].table),
                                                   (LEX_STRING*) 0,
                                                   TL_OPTION_UPDATING,
                                                   TL_READ_NO_INSERT,
                                                   MDL_SHARED_NO_WRITE))
              MYSQL_YYABORT;
          }
    break;

  case 2720:

/* Line 1455 of yacc.c  */
#line 15909 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            if (is_native_function(thd, & (yyvsp[(4) - (8)].lex_str)))
            {
              my_error(ER_NATIVE_FCT_NAME_COLLISION, MYF(0),
                       (yyvsp[(4) - (8)].lex_str).str);
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_CREATE_FUNCTION;
            lex->udf.type= UDFTYPE_AGGREGATE;
            lex->stmt_definition_begin= (yyvsp[(2) - (8)].simple_string);
            lex->udf.name = (yyvsp[(4) - (8)].lex_str);
            lex->udf.returns=(Item_result) (yyvsp[(6) - (8)].num);
            lex->udf.dl=(yyvsp[(8) - (8)].lex_str).str;
          }
    break;

  case 2721:

/* Line 1455 of yacc.c  */
#line 15927 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            if (is_native_function(thd, & (yyvsp[(3) - (7)].lex_str)))
            {
              my_error(ER_NATIVE_FCT_NAME_COLLISION, MYF(0),
                       (yyvsp[(3) - (7)].lex_str).str);
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_CREATE_FUNCTION;
            lex->udf.type= UDFTYPE_FUNCTION;
            lex->stmt_definition_begin= (yyvsp[(1) - (7)].simple_string);
            lex->udf.name = (yyvsp[(3) - (7)].lex_str);
            lex->udf.returns=(Item_result) (yyvsp[(5) - (7)].num);
            lex->udf.dl=(yyvsp[(7) - (7)].lex_str).str;
          }
    break;

  case 2722:

/* Line 1455 of yacc.c  */
#line 15950 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* $5 */
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_head *sp;
            const char* tmp_param_begin;

            lex->stmt_definition_begin= (yyvsp[(1) - (4)].simple_string);
            lex->spname= (yyvsp[(3) - (4)].spname);

            if (lex->sphead)
            {
              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            /* Order is important here: new - reset - init */
            sp= new sp_head();
            if (sp == NULL)
              MYSQL_YYABORT;
            sp->reset_thd_mem_root(thd);
            sp->init(lex);
            sp->init_sp_name(thd, lex->spname);

            sp->m_type= TYPE_ENUM_FUNCTION;
            lex->sphead= sp;

            tmp_param_begin= lip->get_cpp_tok_start();
            tmp_param_begin++;
            lex->sphead->m_param_begin= tmp_param_begin;
          }
    break;

  case 2723:

/* Line 1455 of yacc.c  */
#line 15982 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* $8 */
            Lex->sphead->m_param_end= YYLIP->get_cpp_tok_start();
          }
    break;

  case 2724:

/* Line 1455 of yacc.c  */
#line 15986 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* $10 */
            LEX *lex= Lex;
            lex->charset= NULL;
            lex->length= lex->dec= NULL;
            lex->interval_list.empty();
            lex->type= 0;
            lex->vcol_info= 0;
          }
    break;

  case 2725:

/* Line 1455 of yacc.c  */
#line 15995 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* $12 */
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            /*
              This was disabled in 5.1.12. See bug #20701
              When collation support in SP is implemented, then this test
              should be removed.
            */
            if (((yyvsp[(11) - (11)].num) == MYSQL_TYPE_STRING || (yyvsp[(11) - (11)].num) == MYSQL_TYPE_VARCHAR)
                && (lex->type & BINCMP_FLAG))
            {
              my_error(ER_NOT_SUPPORTED_YET, MYF(0), "return value collation");
              MYSQL_YYABORT;
            }

            if (sp->fill_field_definition(YYTHD, lex,
                                          (enum enum_field_types) (yyvsp[(11) - (11)].num),
                                          &sp->m_return_field_def))
              MYSQL_YYABORT;

            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
    break;

  case 2726:

/* Line 1455 of yacc.c  */
#line 16018 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* $14 */
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            lex->sphead->m_chistics= &lex->sp_chistics;
            lex->sphead->set_body_start(thd, lip->get_cpp_tok_start());
          }
    break;

  case 2727:

/* Line 1455 of yacc.c  */
#line 16027 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            if (sp->is_not_allowed_in_function("function"))
              MYSQL_YYABORT;

            lex->sql_command= SQLCOM_CREATE_SPFUNCTION;
            sp->set_stmt_end(thd);
            if (!(sp->m_flags & sp_head::HAS_RETURN))
            {
              my_error(ER_SP_NORETURN, MYF(0), sp->m_qname.str);
              MYSQL_YYABORT;
            }
            if (is_native_function(thd, & sp->m_name))
            {
              /*
                This warning will be printed when
                [1] A client query is parsed,
                [2] A stored function is loaded by db_load_routine.
                Printing the warning for [2] is intentional, to cover the
                following scenario:
                - A user define a SF 'foo' using MySQL 5.N
                - An application uses select foo(), and works.
                - MySQL 5.{N+1} defines a new native function 'foo', as
                part of a new feature.
                - MySQL 5.{N+1} documentation is updated, and should mention
                that there is a potential incompatible change in case of
                existing stored function named 'foo'.
                - The user deploys 5.{N+1}. At this point, 'select foo()'
                means something different, and the user code is most likely
                broken (it's only safe if the code is 'select db.foo()').
                With a warning printed when the SF is loaded (which has to occur
                before the call), the warning will provide a hint explaining
                the root cause of a later failure of 'select foo()'.
                With no warning printed, the user code will fail with no
                apparent reason.
                Printing a warning each time db_load_routine is executed for
                an ambiguous function is annoying, since that can happen a lot,
                but in practice should not happen unless there *are* name
                collisions.
                If a collision exists, it should not be silenced but fixed.
              */
              push_warning_printf(thd,
                                  Sql_condition::WARN_LEVEL_NOTE,
                                  ER_NATIVE_FCT_NAME_COLLISION,
                                  ER(ER_NATIVE_FCT_NAME_COLLISION),
                                  sp->m_name.str);
            }
            sp->restore_thd_mem_root(thd);
          }
    break;

  case 2728:

/* Line 1455 of yacc.c  */
#line 16083 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }

            lex->stmt_definition_begin= (yyvsp[(2) - (3)].simple_string);

            /* Order is important here: new - reset - init */
            sp= new sp_head();
            if (sp == NULL)
              MYSQL_YYABORT;
            sp->reset_thd_mem_root(YYTHD);
            sp->init(lex);
            sp->m_type= TYPE_ENUM_PROCEDURE;
            sp->init_sp_name(YYTHD, (yyvsp[(3) - (3)].spname));

            lex->sphead= sp;
          }
    break;

  case 2729:

/* Line 1455 of yacc.c  */
#line 16107 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            const char* tmp_param_begin;

            tmp_param_begin= YYLIP->get_cpp_tok_start();
            tmp_param_begin++;
            Lex->sphead->m_param_begin= tmp_param_begin;
          }
    break;

  case 2730:

/* Line 1455 of yacc.c  */
#line 16116 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            lex->sphead->m_param_end= YYLIP->get_cpp_tok_start();
            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
    break;

  case 2731:

/* Line 1455 of yacc.c  */
#line 16124 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            lex->sphead->m_chistics= &lex->sp_chistics;
            lex->sphead->set_body_start(thd, YYLIP->get_cpp_tok_start());
          }
    break;

  case 2732:

/* Line 1455 of yacc.c  */
#line 16132 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            sp->set_stmt_end(YYTHD);
            lex->sql_command= SQLCOM_CREATE_PROCEDURE;
            sp->restore_thd_mem_root(YYTHD);
          }
    break;

  case 2733:

/* Line 1455 of yacc.c  */
#line 16146 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_START;
          }
    break;

  case 2734:

/* Line 1455 of yacc.c  */
#line 16150 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_END;
          }
    break;

  case 2735:

/* Line 1455 of yacc.c  */
#line 16154 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_PREPARE;
          }
    break;

  case 2736:

/* Line 1455 of yacc.c  */
#line 16158 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_COMMIT;
          }
    break;

  case 2737:

/* Line 1455 of yacc.c  */
#line 16162 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_ROLLBACK;
          }
    break;

  case 2738:

/* Line 1455 of yacc.c  */
#line 16166 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_RECOVER;
          }
    break;

  case 2739:

/* Line 1455 of yacc.c  */
#line 16173 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (1)].string)->length() <= MAXGTRIDSIZE);
            if (!(Lex->xid=(XID *)YYTHD->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set(1L, (yyvsp[(1) - (1)].string)->ptr(), (yyvsp[(1) - (1)].string)->length(), 0, 0);
          }
    break;

  case 2740:

/* Line 1455 of yacc.c  */
#line 16180 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].string)->length() <= MAXGTRIDSIZE && (yyvsp[(3) - (3)].string)->length() <= MAXBQUALSIZE);
            if (!(Lex->xid=(XID *)YYTHD->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set(1L, (yyvsp[(1) - (3)].string)->ptr(), (yyvsp[(1) - (3)].string)->length(), (yyvsp[(3) - (3)].string)->ptr(), (yyvsp[(3) - (3)].string)->length());
          }
    break;

  case 2741:

/* Line 1455 of yacc.c  */
#line 16187 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].string)->length() <= MAXGTRIDSIZE && (yyvsp[(3) - (5)].string)->length() <= MAXBQUALSIZE);
            if (!(Lex->xid=(XID *)YYTHD->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set((yyvsp[(5) - (5)].ulong_num), (yyvsp[(1) - (5)].string)->ptr(), (yyvsp[(1) - (5)].string)->length(), (yyvsp[(3) - (5)].string)->ptr(), (yyvsp[(3) - (5)].string)->length());
          }
    break;

  case 2742:

/* Line 1455 of yacc.c  */
#line 16196 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2743:

/* Line 1455 of yacc.c  */
#line 16197 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2744:

/* Line 1455 of yacc.c  */
#line 16201 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2745:

/* Line 1455 of yacc.c  */
#line 16202 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_JOIN;        }
    break;

  case 2746:

/* Line 1455 of yacc.c  */
#line 16203 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_RESUME;      }
    break;

  case 2747:

/* Line 1455 of yacc.c  */
#line 16207 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2748:

/* Line 1455 of yacc.c  */
#line 16208 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_ONE_PHASE;   }
    break;

  case 2749:

/* Line 1455 of yacc.c  */
#line 16213 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2750:

/* Line 1455 of yacc.c  */
#line 16215 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_SUSPEND;     }
    break;

  case 2752:

/* Line 1455 of yacc.c  */
#line 16220 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2753:

/* Line 1455 of yacc.c  */
#line 16221 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_FOR_MIGRATE; }
    break;

  case 2754:

/* Line 1455 of yacc.c  */
#line 16226 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_INSTALL_PLUGIN;
            lex->comment= (yyvsp[(3) - (5)].lex_str);
            lex->ident= (yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 2755:

/* Line 1455 of yacc.c  */
#line 16233 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_INSTALL_PLUGIN;
            lex->comment= null_lex_str;
            lex->ident= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 2756:

/* Line 1455 of yacc.c  */
#line 16243 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_UNINSTALL_PLUGIN;
            lex->comment= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 2757:

/* Line 1455 of yacc.c  */
#line 16249 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_UNINSTALL_PLUGIN;
            lex->comment= null_lex_str;
            lex->ident= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 2758:

/* Line 1455 of yacc.c  */
#line 16260 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
	  YYERROR;
	}
    break;



/* Line 1455 of yacc.c  */
#line 43602 "/home/buildbot/buildbot/build/mkdist/sql/sql_yacc.cc"
      default: break;
    }
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;

  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (YY_("syntax error"));
#else
      {
	YYSIZE_T yysize = yysyntax_error (0, yystate, yychar);
	if (yymsg_alloc < yysize && yymsg_alloc < YYSTACK_ALLOC_MAXIMUM)
	  {
	    YYSIZE_T yyalloc = 2 * yysize;
	    if (! (yysize <= yyalloc && yyalloc <= YYSTACK_ALLOC_MAXIMUM))
	      yyalloc = YYSTACK_ALLOC_MAXIMUM;
	    if (yymsg != yymsgbuf)
	      YYSTACK_FREE (yymsg);
	    yymsg = (char *) YYSTACK_ALLOC (yyalloc);
	    if (yymsg)
	      yymsg_alloc = yyalloc;
	    else
	      {
		yymsg = yymsgbuf;
		yymsg_alloc = sizeof yymsgbuf;
	      }
	  }

	if (0 < yysize && yysize <= yymsg_alloc)
	  {
	    (void) yysyntax_error (yymsg, yystate, yychar);
	    yyerror (yymsg);
	  }
	else
	  {
	    yyerror (YY_("syntax error"));
	    if (yysize != 0)
	      goto yyexhaustedlab;
	  }
      }
#endif
    }



  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */

      if (yychar <= YYEOF)
	{
	  /* Return failure if at end of input.  */
	  if (yychar == YYEOF)
	    YYABORT;
	}
      else
	{
	  yydestruct ("Error: discarding",
		      yytoken, &yylval);
	  yychar = YYEMPTY;
	}
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  /* Do not reclaim the symbols of the rule which action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (yyn != YYPACT_NINF)
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
	YYABORT;


      yydestruct ("Error: popping",
		  yystos[yystate], yyvsp);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  *++yyvsp = yylval;


  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#if !defined(yyoverflow) || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEMPTY)
     yydestruct ("Cleanup: discarding lookahead",
		 yytoken, &yylval);
  /* Do not reclaim the symbols of the rule which action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
		  yystos[*yyssp], yyvsp);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  /* Make sure YYID is used.  */
  return YYID (yyresult);
}



