
/* A Bison parser, made by GNU Bison 2.4.1.  */

/* Skeleton implementation for Bison's Yacc-like parsers in C
   
      Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003, 2004, 2005, 2006
   Free Software Foundation, Inc.
   
   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.
   
   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "2.4.1"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1

/* Using locations.  */
#define YYLSP_NEEDED 0

/* Substitute the variable and function names.  */
#define yyparse         MYSQLparse
#define yylex           MYSQLlex
#define yyerror         MYSQLerror
#define yylval          MYSQLlval
#define yychar          MYSQLchar
#define yydebug         MYSQLdebug
#define yynerrs         MYSQLnerrs


/* Copy the first part of user declarations.  */

/* Line 189 of yacc.c  */
#line 25 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"

/* thd is passed as an argument to yyparse(), and subsequently to yylex().
** The type will be void*, so it must be  cast to (THD*) when used.
** Use the YYTHD macro for this.
*/
#define YYPARSE_PARAM yythd
#define YYLEX_PARAM yythd
#define YYTHD ((THD *)yythd)
#define YYLIP (& YYTHD->m_parser_state->m_lip)
#define YYPS (& YYTHD->m_parser_state->m_yacc)

#define MYSQL_YACC
#define YYINITDEPTH 100
#define YYMAXDEPTH 3200                        /* Because of 64K stack */
#define Lex (YYTHD->lex)

#define Select Lex->current_select
#include "sql_priv.h"
#include "unireg.h"                    // REQUIRED: for other includes
#include "sql_parse.h"                        /* comp_*_creator */
#include "sql_table.h"                        /* primary_key_name */
#include "sql_partition.h"  /* mem_alloc_error, partition_info, HASH_PARTITION */
#include "sql_acl.h"                          /* *_ACL */
#include "password.h"       /* my_make_scrambled_password_323, my_make_scrambled_password */
#include "sql_class.h"      /* Key_part_spec, enum_filetype, Diag_condition_item_name */
#include "slave.h"
#include "lex_symbol.h"
#include "item_create.h"
#include "sp_head.h"
#include "sp_pcontext.h"
#include "sp_rcontext.h"
#include "sp.h"
#include "sql_alter.h"                         // Alter_table*_statement
#include "sql_truncate.h"                      // Truncate_statement
#include "sql_admin.h"                         // Analyze/Check..._table_stmt
#include "sql_partition_admin.h"               // Alter_table_*_partition_stmt
#include "sql_signal.h"
#include "event_parse_data.h"
#include "create_options.h"
#include <myisam.h>
#include <myisammrg.h>
#include "keycaches.h"
#include "set_var.h"
#include "rpl_mi.h"

/* this is to get the bison compilation windows warnings out */
#ifdef _MSC_VER
/* warning C4065: switch statement contains 'default' but no 'case' labels */
#pragma warning (disable : 4065)
#endif

int yylex(void *yylval, void *yythd);

#define yyoverflow(A,B,C,D,E,F)               \
  {                                           \
    ulong val= *(F);                          \
    if (my_yyoverflow((B), (D), &val))        \
    {                                         \
      yyerror((char*) (A));                   \
      return 2;                               \
    }                                         \
    else                                      \
    {                                         \
      *(F)= (YYSIZE_T)val;                    \
    }                                         \
  }

#define MYSQL_YYABORT                         \
  do                                          \
  {                                           \
    LEX::cleanup_lex_after_parse_error(YYTHD);\
    YYABORT;                                  \
  } while (0)

#define MYSQL_YYABORT_UNLESS(A)         \
  if (!(A))                             \
  {                                     \
    my_parse_error(ER(ER_SYNTAX_ERROR));\
    MYSQL_YYABORT;                      \
  }

/*
  Work around for broken code generated by bison 1.875.

  The code generated by bison 1.875a and later, bison 2.1 and bison 2.2 is ok.
  With bison 1.875 however, the generated code contains:
<pre>
  yyerrlab1:
  #if defined (__GNUC_MINOR__) && 2093 <= (__GNUC__ * 1000 + __GNUC_MINOR__)
    __attribute__ ((__unused__))
  #endif
</pre>
  This usage of __attribute__ is illegal, so we remove it.
  See the following references for details:
  http://lists.gnu.org/archive/html/bug-bison/2004-02/msg00014.html
  http://gcc.gnu.org/bugzilla/show_bug.cgi?id=14273
*/

#if defined (__GNUC_MINOR__) && 2093 <= (__GNUC__ * 1000 + __GNUC_MINOR__)
#undef __attribute__
#define __attribute__(X)
#endif


#ifndef DBUG_OFF
#define YYDEBUG 1
#else
#define YYDEBUG 0
#endif

/**
  @brief Push an error message into MySQL error stack with line
  and position information.

  This function provides semantic action implementers with a way
  to push the famous "You have a syntax error near..." error
  message into the error stack, which is normally produced only if
  a parse error is discovered internally by the Bison generated
  parser.
*/

void my_parse_error(const char *s)
{
  THD *thd= current_thd;
  Lex_input_stream *lip= & thd->m_parser_state->m_lip;

  const char *yytext= lip->get_tok_start();
  if (!yytext)
    yytext= "";

  /* Push an error into the error stack */
  ErrConvString err(yytext, strlen(yytext), thd->variables.character_set_client);
  my_printf_error(ER_PARSE_ERROR,  ER(ER_PARSE_ERROR), MYF(0), s,
                  err.ptr(), lip->yylineno);
}

/**
  @brief Bison callback to report a syntax/OOM error

  This function is invoked by the bison-generated parser
  when a syntax error, a parse error or an out-of-memory
  condition occurs. This function is not invoked when the
  parser is requested to abort by semantic action code
  by means of YYABORT or YYACCEPT macros. This is why these
  macros should not be used (use MYSQL_YYABORT/MYSQL_YYACCEPT
  instead).

  The parser will abort immediately after invoking this callback.

  This function is not for use in semantic actions and is internal to
  the parser, as it performs some pre-return cleanup. 
  In semantic actions, please use my_parse_error or my_error to
  push an error into the error stack and MYSQL_YYABORT
  to abort from the parser.
*/

void MYSQLerror(const char *s)
{
  THD *thd= current_thd;

  /*
    Restore the original LEX if it was replaced when parsing
    a stored procedure. We must ensure that a parsing error
    does not leave any side effects in the THD.
  */
  LEX::cleanup_lex_after_parse_error(thd);

  /* "parse error" changed into "syntax error" between bison 1.75 and 1.875 */
  if (strcmp(s,"parse error") == 0 || strcmp(s,"syntax error") == 0)
    s= ER(ER_SYNTAX_ERROR);
  my_parse_error(s);
}


#ifndef DBUG_OFF
void turn_parser_debug_on()
{
  /*
     MYSQLdebug is in sql/sql_yacc.cc, in bison generated code.
     Turning this option on is **VERY** verbose, and should be
     used when investigating a syntax error problem only.

     The syntax to run with bison traces is as follows :
     - Starting a server manually :
       mysqld --debug-dbug="d,parser_debug" ...
     - Running a test :
       mysql-test-run.pl --mysqld="--debug-dbug=d,parser_debug" ...

     The result will be in the process stderr (var/log/master.err)
   */

  extern int yydebug;
  yydebug= 1;
}
#endif

static bool is_native_function(THD *thd, const LEX_STRING *name)
{
  if (find_native_function_builder(thd, *name))
    return true;

  if (is_lex_native_function(name))
    return true;

  return false;
}


/**
  Helper action for a case statement (entering the CASE).
  This helper is used for both 'simple' and 'searched' cases.
  This helper, with the other case_stmt_action_..., is executed when
  the following SQL code is parsed:
<pre>
CREATE PROCEDURE proc_19194_simple(i int)
BEGIN
  DECLARE str CHAR(10);

  CASE i
    WHEN 1 THEN SET str="1";
    WHEN 2 THEN SET str="2";
    WHEN 3 THEN SET str="3";
    ELSE SET str="unknown";
  END CASE;

  SELECT str;
END
</pre>
  The actions are used to generate the following code:
<pre>
SHOW PROCEDURE CODE proc_19194_simple;
Pos     Instruction
0       set str@1 NULL
1       set_case_expr (12) 0 i@0
2       jump_if_not 5(12) (case_expr@0 = 1)
3       set str@1 _latin1'1'
4       jump 12
5       jump_if_not 8(12) (case_expr@0 = 2)
6       set str@1 _latin1'2'
7       jump 12
8       jump_if_not 11(12) (case_expr@0 = 3)
9       set str@1 _latin1'3'
10      jump 12
11      set str@1 _latin1'unknown'
12      stmt 0 "SELECT str"
</pre>

  @param lex the parser lex context
*/

void case_stmt_action_case(LEX *lex)
{
  lex->sphead->new_cont_backpatch(NULL);

  /*
    BACKPATCH: Creating target label for the jump to
    "case_stmt_action_end_case"
    (Instruction 12 in the example)
  */

  lex->spcont->push_label((char *)"", lex->sphead->instructions());
}

/**
  Helper action for a case expression statement (the expr in 'CASE expr').
  This helper is used for 'searched' cases only.
  @param lex the parser lex context
  @param expr the parsed expression
  @return 0 on success
*/

int case_stmt_action_expr(LEX *lex, Item* expr)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *parsing_ctx= lex->spcont;
  int case_expr_id= parsing_ctx->register_case_expr();
  sp_instr_set_case_expr *i;

  if (parsing_ctx->push_case_expr_id(case_expr_id))
    return 1;

  i= new sp_instr_set_case_expr(sp->instructions(),
                                parsing_ctx, case_expr_id, expr, lex);

  sp->add_cont_backpatch(i);
  return sp->add_instr(i);
}

/**
  Helper action for a case when condition.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
  @param when the parsed expression for the WHEN clause
  @param simple true for simple cases, false for searched cases
*/

int case_stmt_action_when(LEX *lex, Item *when, bool simple)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *ctx= lex->spcont;
  uint ip= sp->instructions();
  sp_instr_jump_if_not *i;
  Item_case_expr *var;
  Item *expr;

  if (simple)
  {
    var= new Item_case_expr(ctx->get_current_case_expr_id());

#ifndef DBUG_OFF
    if (var)
    {
      var->m_sp= sp;
    }
#endif

    expr= new Item_func_eq(var, when);
    i= new sp_instr_jump_if_not(ip, ctx, expr, lex);
  }
  else
    i= new sp_instr_jump_if_not(ip, ctx, when, lex);

  /*
    BACKPATCH: Registering forward jump from
    "case_stmt_action_when" to "case_stmt_action_then"
    (jump_if_not from instruction 2 to 5, 5 to 8 ... in the example)
  */

  return !test(i) ||
         sp->push_backpatch(i, ctx->push_label((char *)"", 0)) ||
         sp->add_cont_backpatch(i) ||
         sp->add_instr(i);
}

/**
  Helper action for a case then statements.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
*/

int case_stmt_action_then(LEX *lex)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *ctx= lex->spcont;
  uint ip= sp->instructions();
  sp_instr_jump *i = new sp_instr_jump(ip, ctx);
  if (!test(i) || sp->add_instr(i))
    return 1;

  /*
    BACKPATCH: Resolving forward jump from
    "case_stmt_action_when" to "case_stmt_action_then"
    (jump_if_not from instruction 2 to 5, 5 to 8 ... in the example)
  */

  sp->backpatch(ctx->pop_label());

  /*
    BACKPATCH: Registering forward jump from
    "case_stmt_action_then" to "case_stmt_action_end_case"
    (jump from instruction 4 to 12, 7 to 12 ... in the example)
  */

  return sp->push_backpatch(i, ctx->last_label());
}

/**
  Helper action for an end case.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
  @param simple true for simple cases, false for searched cases
*/

void case_stmt_action_end_case(LEX *lex, bool simple)
{
  /*
    BACKPATCH: Resolving forward jump from
    "case_stmt_action_then" to "case_stmt_action_end_case"
    (jump from instruction 4 to 12, 7 to 12 ... in the example)
  */
  lex->sphead->backpatch(lex->spcont->pop_label());

  if (simple)
    lex->spcont->pop_case_expr_id();

  lex->sphead->do_cont_backpatch();
}


static bool
find_sys_var_null_base(THD *thd, struct sys_var_with_base *tmp)
{
  tmp->var= find_sys_var(thd, tmp->base_name.str, tmp->base_name.length);

  if (tmp->var == NULL)
    my_error(ER_UNKNOWN_SYSTEM_VARIABLE, MYF(0), tmp->base_name.str);
  else
    tmp->base_name= null_lex_str;

  return thd->is_error();
}


/**
  Helper action for a SET statement.
  Used to push a system variable into the assignment list.

  @param thd      the current thread
  @param tmp      the system variable with base name
  @param var_type the scope of the variable
  @param val      the value being assigned to the variable

  @return TRUE if error, FALSE otherwise.
*/

static bool
set_system_variable(THD *thd, struct sys_var_with_base *tmp,
                    enum enum_var_type var_type, Item *val)
{
  set_var *var;
  LEX *lex= thd->lex;

  /* No AUTOCOMMIT from a stored function or trigger. */
  if (lex->spcont && tmp->var == Sys_autocommit_ptr)
    lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;

  if (! (var= new set_var(var_type, tmp->var, &tmp->base_name, val)))
    return TRUE;

  return lex->var_list.push_back(var);
}


/**
  Helper action for a SET statement.
  Used to push a SP local variable into the assignment list.

  @param thd      the current thread
  @param var_type the SP local variable
  @param val      the value being assigned to the variable

  @return TRUE if error, FALSE otherwise.
*/

static bool
set_local_variable(THD *thd, sp_variable_t *spv, Item *val)
{
  Item *it;
  LEX *lex= thd->lex;
  sp_instr_set *sp_set;

  if (val)
    it= val;
  else if (spv->dflt)
    it= spv->dflt;
  else
  {
    it= new (thd->mem_root) Item_null();
    if (it == NULL)
      return TRUE;
  }

  sp_set= new sp_instr_set(lex->sphead->instructions(), lex->spcont,
                           spv->offset, it, spv->type, lex, TRUE);

  return (sp_set == NULL || lex->sphead->add_instr(sp_set));
}


/**
  Helper action for a SET statement.
  Used to SET a field of NEW row.

  @param thd      the current thread
  @param name     the field name
  @param val      the value being assigned to the row

  @return TRUE if error, FALSE otherwise.
*/

static bool
set_trigger_new_row(THD *thd, LEX_STRING *name, Item *val)
{
  LEX *lex= thd->lex;
  Item_trigger_field *trg_fld;
  sp_instr_set_trigger_field *sp_fld;

  /* QQ: Shouldn't this be field's default value ? */
  if (! val)
    val= new Item_null();

  DBUG_ASSERT(lex->trg_chistics.action_time == TRG_ACTION_BEFORE &&
              (lex->trg_chistics.event == TRG_EVENT_INSERT ||
               lex->trg_chistics.event == TRG_EVENT_UPDATE));

  trg_fld= new (thd->mem_root)
            Item_trigger_field(lex->current_context(),
                               Item_trigger_field::NEW_ROW,
                               name->str, UPDATE_ACL, FALSE);

  if (trg_fld == NULL)
    return TRUE;

  sp_fld= new sp_instr_set_trigger_field(lex->sphead->instructions(),
                                         lex->spcont, trg_fld, val, lex);

  if (sp_fld == NULL)
    return TRUE;

  /*
    Let us add this item to list of all Item_trigger_field
    objects in trigger.
  */
  lex->trg_table_fields.link_in_list(trg_fld, &trg_fld->next_trg_field);

  return lex->sphead->add_instr(sp_fld);
}


/**
  Helper to resolve the SQL:2003 Syntax exception 1) in <in predicate>.
  See SQL:2003, Part 2, section 8.4 <in predicate>, Note 184, page 383.
  This function returns the proper item for the SQL expression
  <code>left [NOT] IN ( expr )</code>
  @param thd the current thread
  @param left the in predicand
  @param equal true for IN predicates, false for NOT IN predicates
  @param expr first and only expression of the in value list
  @return an expression representing the IN predicate.
*/
Item* handle_sql2003_note184_exception(THD *thd, Item* left, bool equal,
                                       Item *expr)
{
  /*
    Relevant references for this issue:
    - SQL:2003, Part 2, section 8.4 <in predicate>, page 383,
    - SQL:2003, Part 2, section 7.2 <row value expression>, page 296,
    - SQL:2003, Part 2, section 6.3 <value expression primary>, page 174,
    - SQL:2003, Part 2, section 7.15 <subquery>, page 370,
    - SQL:2003 Feature F561, "Full value expressions".

    The exception in SQL:2003 Note 184 means:
    Item_singlerow_subselect, which corresponds to a <scalar subquery>,
    should be re-interpreted as an Item_in_subselect, which corresponds
    to a <table subquery> when used inside an <in predicate>.

    Our reading of Note 184 is reccursive, so that all:
    - IN (( <subquery> ))
    - IN ((( <subquery> )))
    - IN '('^N <subquery> ')'^N
    - etc
    should be interpreted as a <table subquery>, no matter how deep in the
    expression the <subquery> is.
  */

  Item *result;

  DBUG_ENTER("handle_sql2003_note184_exception");

  if (expr->type() == Item::SUBSELECT_ITEM)
  {
    Item_subselect *expr2 = (Item_subselect*) expr;

    if (expr2->substype() == Item_subselect::SINGLEROW_SUBS)
    {
      Item_singlerow_subselect *expr3 = (Item_singlerow_subselect*) expr2;
      st_select_lex *subselect;

      /*
        Implement the mandated change, by altering the semantic tree:
          left IN Item_singlerow_subselect(subselect)
        is modified to
          left IN (subselect)
        which is represented as
          Item_in_subselect(left, subselect)
      */
      subselect= expr3->invalidate_and_restore_select_lex();
      result= new (thd->mem_root) Item_in_subselect(left, subselect);

      if (! equal)
        result = negate_expression(thd, result);

      DBUG_RETURN(result);
    }
  }

  if (equal)
    result= new (thd->mem_root) Item_func_eq(left, expr);
  else
    result= new (thd->mem_root) Item_func_ne(left, expr);

  DBUG_RETURN(result);
}

/**
   @brief Creates a new SELECT_LEX for a UNION branch.

   Sets up and initializes a SELECT_LEX structure for a query once the parser
   discovers a UNION token. The current SELECT_LEX is pushed on the stack and
   the new SELECT_LEX becomes the current one.

   @param lex The parser state.

   @param is_union_distinct True if the union preceding the new select statement
   uses UNION DISTINCT.

   @param is_top_level This should be @c TRUE if the newly created SELECT_LEX
   is a non-nested statement.

   @return <code>false</code> if successful, <code>true</code> if an error was
   reported. In the latter case parsing should stop.
 */
bool add_select_to_union_list(LEX *lex, bool is_union_distinct, 
                              bool is_top_level)
{
  /* 
     Only the last SELECT can have INTO. Since the grammar won't allow INTO in
     a nested SELECT, we make this check only when creating a top-level SELECT.
  */
  if (is_top_level && lex->result)
  {
    my_error(ER_WRONG_USAGE, MYF(0), "UNION", "INTO");
    return TRUE;
  }
  if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
  {
    my_parse_error(ER(ER_SYNTAX_ERROR));
    return TRUE;
  }
  /* This counter shouldn't be incremented for UNION parts */
  lex->nest_level--;
  if (mysql_new_select(lex, 0))
    return TRUE;
  mysql_init_select(lex);
  lex->current_select->linkage=UNION_TYPE;
  if (is_union_distinct) /* UNION DISTINCT - remember position */
    lex->current_select->master_unit()->union_distinct=
      lex->current_select;
  return FALSE;
}

/**
   @brief Initializes a SELECT_LEX for a query within parentheses (aka
   braces).

   @return false if successful, true if an error was reported. In the latter
   case parsing should stop.
 */
bool setup_select_in_parentheses(LEX *lex) 
{
  SELECT_LEX * sel= lex->current_select;
  if (sel->set_braces(1))
  {
    my_parse_error(ER(ER_SYNTAX_ERROR));
    return TRUE;
  }
  if (sel->linkage == UNION_TYPE &&
      !sel->master_unit()->first_select()->braces &&
      sel->master_unit()->first_select()->linkage ==
      UNION_TYPE)
  {
    my_parse_error(ER(ER_SYNTAX_ERROR));
    return TRUE;
  }
  if (sel->linkage == UNION_TYPE &&
      sel->olap != UNSPECIFIED_OLAP_TYPE &&
      sel->master_unit()->fake_select_lex)
  {
    my_error(ER_WRONG_USAGE, MYF(0), "CUBE/ROLLUP", "ORDER BY");
    return TRUE;
  }
  /* select in braces, can't contain global parameters */
  if (sel->master_unit()->fake_select_lex)
    sel->master_unit()->global_parameters=
      sel->master_unit()->fake_select_lex;
  return FALSE;
}

static bool add_create_index_prepare (LEX *lex, Table_ident *table)
{
  lex->sql_command= SQLCOM_CREATE_INDEX;
  if (!lex->current_select->add_table_to_list(lex->thd, table, NULL,
                                              TL_OPTION_UPDATING,
                                              TL_READ_NO_INSERT,
                                              MDL_SHARED_NO_WRITE))
    return TRUE;
  lex->alter_info.reset();
  lex->alter_info.flags= ALTER_ADD_INDEX;
  lex->col_list.empty();
  lex->change= NullS;
  lex->option_list= NULL;
  return FALSE;
}

static bool add_create_index (LEX *lex, Key::Keytype type,
                              const LEX_STRING &name,
                              KEY_CREATE_INFO *info= NULL, bool generated= 0)
{
  Key *key;
  key= new Key(type, name, info ? info : &lex->key_create_info, generated, 
               lex->col_list, lex->option_list, lex->check_exists);
  if (key == NULL)
    return TRUE;

  lex->alter_info.key_list.push_back(key);
  lex->col_list.empty();
  return FALSE;
}


/**
  Create a separate LEX for each assignment if in SP.

  If we are in SP we want have own LEX for each assignment.
  This is mostly because it is hard for several sp_instr_set
  and sp_instr_set_trigger instructions share one LEX.
  (Well, it is theoretically possible but adds some extra
  overhead on preparation for execution stage and IMO less
  robust).

  QQ: May be we should simply prohibit group assignments in SP?

  @see sp_create_assignment_instr

  @param thd           Thread context
  @param no_lookahead  True if the parser has no lookahead
*/

static void sp_create_assignment_lex(THD *thd, bool no_lookahead)
{
  LEX *lex= thd->lex;

  if (lex->sphead)
  {
    Lex_input_stream *lip= &thd->m_parser_state->m_lip;
    LEX *old_lex= lex;
    lex->sphead->reset_lex(thd);
    lex= thd->lex;

    /* Set new LEX as if we at start of set rule. */
    lex->sql_command= SQLCOM_SET_OPTION;
    mysql_init_select(lex);
    lex->var_list.empty();
    lex->one_shot_set= 0;
    lex->autocommit= 0;
    /* get_ptr() is only correct with no lookahead. */
    DBUG_ASSERT(no_lookahead);
    lex->sphead->m_tmp_query= lip->get_ptr();
    /* Inherit from outer lex. */
    lex->option_type= old_lex->option_type;
  }
}


/**
  Create a SP instruction for a SET assignment.

  @see sp_create_assignment_lex

  @param thd           Thread context
  @param no_lookahead  True if the parser has no lookahead

  @return false if success, true otherwise.
*/

static bool sp_create_assignment_instr(THD *thd, bool no_lookahead)
{
  LEX *lex= thd->lex;

  if (lex->sphead)
  {
    sp_head *sp= lex->sphead;

    if (!lex->var_list.is_empty())
    {
      /*
        We have assignment to user or system variable or
        option setting, so we should construct sp_instr_stmt
        for it.
      */
      LEX_STRING qbuff;
      sp_instr_stmt *i;
      Lex_input_stream *lip= &thd->m_parser_state->m_lip;

      if (!(i= new sp_instr_stmt(sp->instructions(), lex->spcont,
                                 lex)))
        return true;

      /*
        Extract the query statement from the tokenizer.  The
        end is either lip->ptr, if there was no lookahead,
        lip->tok_end otherwise.
      */
      if (no_lookahead)
        qbuff.length= lip->get_ptr() - sp->m_tmp_query;
      else
        qbuff.length= lip->get_tok_end() - sp->m_tmp_query;

      if (!(qbuff.str= (char*) alloc_root(thd->mem_root,
                                          qbuff.length + 5)))
        return true;

      strmake(strmake(qbuff.str, "SET ", 4), sp->m_tmp_query,
              qbuff.length);
      qbuff.length+= 4;
      i->m_query= qbuff;
      if (sp->add_instr(i))
        return true;
    }
    enum_var_type inner_option_type= lex->option_type;
    if (lex->sphead->restore_lex(thd))
      return true;
    /* Copy option_type to outer lex in case it has changed. */
    thd->lex->option_type= inner_option_type;
  }
  return false;
}




/* Line 189 of yacc.c  */
#line 903 "/home/buildbot/buildbot/build/mkdist/sql/sql_yacc.cc"

/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* Enabling the token table.  */
#ifndef YYTOKEN_TABLE
# define YYTOKEN_TABLE 0
#endif


/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     ABORT_SYM = 258,
     ACCESSIBLE_SYM = 259,
     ACTION = 260,
     ADD = 261,
     ADDDATE_SYM = 262,
     AFTER_SYM = 263,
     AGAINST = 264,
     AGGREGATE_SYM = 265,
     ALGORITHM_SYM = 266,
     ALL = 267,
     ALTER = 268,
     ALWAYS_SYM = 269,
     ANALYZE_SYM = 270,
     AND_AND_SYM = 271,
     AND_SYM = 272,
     ANY_SYM = 273,
     AS = 274,
     ASC = 275,
     ASCII_SYM = 276,
     ASENSITIVE_SYM = 277,
     AT_SYM = 278,
     AUTHORS_SYM = 279,
     AUTOEXTEND_SIZE_SYM = 280,
     AUTO_INC = 281,
     AUTO_SYM = 282,
     AVG_ROW_LENGTH = 283,
     AVG_SYM = 284,
     BACKUP_SYM = 285,
     BEFORE_SYM = 286,
     BEGIN_SYM = 287,
     BETWEEN_SYM = 288,
     BIGINT = 289,
     BINARY = 290,
     BINLOG_SYM = 291,
     BIN_NUM = 292,
     BIT_AND = 293,
     BIT_OR = 294,
     BIT_SYM = 295,
     BIT_XOR = 296,
     BLOB_SYM = 297,
     BLOCK_SYM = 298,
     BOOLEAN_SYM = 299,
     BOOL_SYM = 300,
     BOTH = 301,
     BTREE_SYM = 302,
     BY = 303,
     BYTE_SYM = 304,
     CACHE_SYM = 305,
     CALL_SYM = 306,
     CASCADE = 307,
     CASCADED = 308,
     CASE_SYM = 309,
     CAST_SYM = 310,
     CATALOG_NAME_SYM = 311,
     CHAIN_SYM = 312,
     CHANGE = 313,
     CHANGED = 314,
     CHARSET = 315,
     CHAR_SYM = 316,
     CHECKPOINT_SYM = 317,
     CHECKSUM_SYM = 318,
     CHECK_SYM = 319,
     CIPHER_SYM = 320,
     CLASS_ORIGIN_SYM = 321,
     CLIENT_SYM = 322,
     CLIENT_STATS_SYM = 323,
     CLOSE_SYM = 324,
     COALESCE = 325,
     CODE_SYM = 326,
     COLLATE_SYM = 327,
     COLLATION_SYM = 328,
     COLUMNS = 329,
     COLUMN_ADD_SYM = 330,
     COLUMN_CHECK_SYM = 331,
     COLUMN_CREATE_SYM = 332,
     COLUMN_DELETE_SYM = 333,
     COLUMN_GET_SYM = 334,
     COLUMN_SYM = 335,
     COLUMN_NAME_SYM = 336,
     COMMENT_SYM = 337,
     COMMITTED_SYM = 338,
     COMMIT_SYM = 339,
     COMPACT_SYM = 340,
     COMPLETION_SYM = 341,
     COMPRESSED_SYM = 342,
     CONCURRENT = 343,
     CONDITION_SYM = 344,
     CONNECTION_SYM = 345,
     CONSISTENT_SYM = 346,
     CONSTRAINT = 347,
     CONSTRAINT_CATALOG_SYM = 348,
     CONSTRAINT_NAME_SYM = 349,
     CONSTRAINT_SCHEMA_SYM = 350,
     CONTAINS_SYM = 351,
     CONTEXT_SYM = 352,
     CONTINUE_SYM = 353,
     CONTRIBUTORS_SYM = 354,
     CONVERT_SYM = 355,
     COUNT_SYM = 356,
     CPU_SYM = 357,
     CREATE = 358,
     CROSS = 359,
     CUBE_SYM = 360,
     CURDATE = 361,
     CURRENT_USER = 362,
     CURSOR_SYM = 363,
     CURSOR_NAME_SYM = 364,
     CURTIME = 365,
     DATABASE = 366,
     DATABASES = 367,
     DATAFILE_SYM = 368,
     DATA_SYM = 369,
     DATETIME = 370,
     DATE_ADD_INTERVAL = 371,
     DATE_SUB_INTERVAL = 372,
     DATE_SYM = 373,
     DAY_HOUR_SYM = 374,
     DAY_MICROSECOND_SYM = 375,
     DAY_MINUTE_SYM = 376,
     DAY_SECOND_SYM = 377,
     DAY_SYM = 378,
     DEALLOCATE_SYM = 379,
     DECIMAL_NUM = 380,
     DECIMAL_SYM = 381,
     DECLARE_SYM = 382,
     DEFAULT = 383,
     DEFINER_SYM = 384,
     DELAYED_SYM = 385,
     DELAY_KEY_WRITE_SYM = 386,
     DELETE_SYM = 387,
     DESC = 388,
     DESCRIBE = 389,
     DES_KEY_FILE = 390,
     DETERMINISTIC_SYM = 391,
     DIRECTORY_SYM = 392,
     DISABLE_SYM = 393,
     DISCARD = 394,
     DISK_SYM = 395,
     DISTINCT = 396,
     DIV_SYM = 397,
     DOUBLE_SYM = 398,
     DO_SYM = 399,
     DROP = 400,
     DUAL_SYM = 401,
     DUMPFILE = 402,
     DUPLICATE_SYM = 403,
     DYNAMIC_SYM = 404,
     EACH_SYM = 405,
     ELSE = 406,
     ELSEIF_SYM = 407,
     ENABLE_SYM = 408,
     ENCLOSED = 409,
     END = 410,
     ENDS_SYM = 411,
     END_OF_INPUT = 412,
     ENGINES_SYM = 413,
     ENGINE_SYM = 414,
     ENUM = 415,
     EQ = 416,
     EQUAL_SYM = 417,
     ERROR_SYM = 418,
     ERRORS = 419,
     ESCAPED = 420,
     ESCAPE_SYM = 421,
     EVENTS_SYM = 422,
     EVENT_SYM = 423,
     EVERY_SYM = 424,
     EXAMINED_SYM = 425,
     EXECUTE_SYM = 426,
     EXISTS = 427,
     EXIT_SYM = 428,
     EXPANSION_SYM = 429,
     EXTENDED_SYM = 430,
     EXTENT_SIZE_SYM = 431,
     EXTRACT_SYM = 432,
     FALSE_SYM = 433,
     FAST_SYM = 434,
     FAULTS_SYM = 435,
     FETCH_SYM = 436,
     FILE_SYM = 437,
     FIRST_SYM = 438,
     FIXED_SYM = 439,
     FLOAT_NUM = 440,
     FLOAT_SYM = 441,
     FLUSH_SYM = 442,
     FORCE_SYM = 443,
     FOREIGN = 444,
     FOR_SYM = 445,
     FOUND_SYM = 446,
     FROM = 447,
     FULL = 448,
     FULLTEXT_SYM = 449,
     FUNCTION_SYM = 450,
     GE = 451,
     GENERAL = 452,
     GENERATED_SYM = 453,
     GEOMETRYCOLLECTION = 454,
     GEOMETRY_SYM = 455,
     GET_FORMAT = 456,
     GLOBAL_SYM = 457,
     GRANT = 458,
     GRANTS = 459,
     GROUP_SYM = 460,
     GROUP_CONCAT_SYM = 461,
     GT_SYM = 462,
     HANDLER_SYM = 463,
     HARD_SYM = 464,
     HASH_SYM = 465,
     HAVING = 466,
     HELP_SYM = 467,
     HEX_NUM = 468,
     HIGH_PRIORITY = 469,
     HOST_SYM = 470,
     HOSTS_SYM = 471,
     HOUR_MICROSECOND_SYM = 472,
     HOUR_MINUTE_SYM = 473,
     HOUR_SECOND_SYM = 474,
     HOUR_SYM = 475,
     IDENT = 476,
     IDENTIFIED_SYM = 477,
     IDENT_QUOTED = 478,
     IF = 479,
     IGNORE_SYM = 480,
     IGNORE_SERVER_IDS_SYM = 481,
     IMPORT = 482,
     INDEXES = 483,
     INDEX_SYM = 484,
     INDEX_STATS_SYM = 485,
     INFILE = 486,
     INITIAL_SIZE_SYM = 487,
     INNER_SYM = 488,
     INOUT_SYM = 489,
     INSENSITIVE_SYM = 490,
     INSERT = 491,
     INSERT_METHOD = 492,
     INSTALL_SYM = 493,
     INTERVAL_SYM = 494,
     INTO = 495,
     INT_SYM = 496,
     INVOKER_SYM = 497,
     IN_SYM = 498,
     IO_SYM = 499,
     IPC_SYM = 500,
     IS = 501,
     ISOLATION = 502,
     ISSUER_SYM = 503,
     ITERATE_SYM = 504,
     JOIN_SYM = 505,
     KEYS = 506,
     KEY_BLOCK_SIZE = 507,
     KEY_SYM = 508,
     KILL_SYM = 509,
     LANGUAGE_SYM = 510,
     LAST_SYM = 511,
     LAST_VALUE = 512,
     LE = 513,
     LEADING = 514,
     LEAVES = 515,
     LEAVE_SYM = 516,
     LEFT = 517,
     LESS_SYM = 518,
     LEVEL_SYM = 519,
     LEX_HOSTNAME = 520,
     LIKE = 521,
     LIMIT = 522,
     LINEAR_SYM = 523,
     LINES = 524,
     LINESTRING = 525,
     LIST_SYM = 526,
     LOAD = 527,
     LOCAL_SYM = 528,
     LOCATOR_SYM = 529,
     LOCKS_SYM = 530,
     LOCK_SYM = 531,
     LOGFILE_SYM = 532,
     LOGS_SYM = 533,
     LONGBLOB = 534,
     LONGTEXT = 535,
     LONG_NUM = 536,
     LONG_SYM = 537,
     LOOP_SYM = 538,
     LOW_PRIORITY = 539,
     LT = 540,
     MASTER_CONNECT_RETRY_SYM = 541,
     MASTER_USE_GTID_SYM = 542,
     MASTER_HOST_SYM = 543,
     MASTER_LOG_FILE_SYM = 544,
     MASTER_LOG_POS_SYM = 545,
     MASTER_PASSWORD_SYM = 546,
     MASTER_PORT_SYM = 547,
     MASTER_SERVER_ID_SYM = 548,
     MASTER_SSL_CAPATH_SYM = 549,
     MASTER_SSL_CA_SYM = 550,
     MASTER_SSL_CERT_SYM = 551,
     MASTER_SSL_CIPHER_SYM = 552,
     MASTER_SSL_CRL_SYM = 553,
     MASTER_SSL_CRLPATH_SYM = 554,
     MASTER_SSL_KEY_SYM = 555,
     MASTER_SSL_SYM = 556,
     MASTER_SSL_VERIFY_SERVER_CERT_SYM = 557,
     MASTER_SYM = 558,
     MASTER_USER_SYM = 559,
     MASTER_HEARTBEAT_PERIOD_SYM = 560,
     MATCH = 561,
     MAX_CONNECTIONS_PER_HOUR = 562,
     MAX_QUERIES_PER_HOUR = 563,
     MAX_ROWS = 564,
     MAX_SIZE_SYM = 565,
     MAX_SYM = 566,
     MAX_UPDATES_PER_HOUR = 567,
     MAX_USER_CONNECTIONS_SYM = 568,
     MAX_VALUE_SYM = 569,
     MEDIUMBLOB = 570,
     MEDIUMINT = 571,
     MEDIUMTEXT = 572,
     MEDIUM_SYM = 573,
     MEMORY_SYM = 574,
     MERGE_SYM = 575,
     MESSAGE_TEXT_SYM = 576,
     MICROSECOND_SYM = 577,
     MIGRATE_SYM = 578,
     MINUTE_MICROSECOND_SYM = 579,
     MINUTE_SECOND_SYM = 580,
     MINUTE_SYM = 581,
     MIN_ROWS = 582,
     MIN_SYM = 583,
     MODE_SYM = 584,
     MODIFIES_SYM = 585,
     MODIFY_SYM = 586,
     MOD_SYM = 587,
     MONTH_SYM = 588,
     MULTILINESTRING = 589,
     MULTIPOINT = 590,
     MULTIPOLYGON = 591,
     MUTEX_SYM = 592,
     MYSQL_ERRNO_SYM = 593,
     NAMES_SYM = 594,
     NAME_SYM = 595,
     NATIONAL_SYM = 596,
     NATURAL = 597,
     NCHAR_STRING = 598,
     NCHAR_SYM = 599,
     NDBCLUSTER_SYM = 600,
     NE = 601,
     NEG = 602,
     NEW_SYM = 603,
     NEXT_SYM = 604,
     NODEGROUP_SYM = 605,
     NONE_SYM = 606,
     NOT2_SYM = 607,
     NOT_SYM = 608,
     NOW_SYM = 609,
     NO_SYM = 610,
     NO_WAIT_SYM = 611,
     NO_WRITE_TO_BINLOG = 612,
     NULL_SYM = 613,
     NUM = 614,
     NUMERIC_SYM = 615,
     NVARCHAR_SYM = 616,
     OFFSET_SYM = 617,
     OLD_PASSWORD = 618,
     ON = 619,
     ONE_SYM = 620,
     ONLY_SYM = 621,
     ONLINE_SYM = 622,
     OPEN_SYM = 623,
     OPTIMIZE = 624,
     OPTIONS_SYM = 625,
     OPTION = 626,
     OPTIONALLY = 627,
     OR2_SYM = 628,
     ORDER_SYM = 629,
     OR_OR_SYM = 630,
     OR_SYM = 631,
     OUTER = 632,
     OUTFILE = 633,
     OUT_SYM = 634,
     OWNER_SYM = 635,
     PACK_KEYS_SYM = 636,
     PAGE_SYM = 637,
     PAGE_CHECKSUM_SYM = 638,
     PARAM_MARKER = 639,
     PARSER_SYM = 640,
     PARSE_VCOL_EXPR_SYM = 641,
     PARTIAL = 642,
     PARTITIONING_SYM = 643,
     PARTITIONS_SYM = 644,
     PARTITION_SYM = 645,
     PASSWORD = 646,
     PERSISTENT_SYM = 647,
     PHASE_SYM = 648,
     PLUGINS_SYM = 649,
     PLUGIN_SYM = 650,
     POINT_SYM = 651,
     POLYGON = 652,
     PORT_SYM = 653,
     POSITION_SYM = 654,
     PRECISION = 655,
     PREPARE_SYM = 656,
     PRESERVE_SYM = 657,
     PREV_SYM = 658,
     PRIMARY_SYM = 659,
     PRIVILEGES = 660,
     PROCEDURE_SYM = 661,
     PROCESS = 662,
     PROCESSLIST_SYM = 663,
     PROFILE_SYM = 664,
     PROFILES_SYM = 665,
     PROXY_SYM = 666,
     PURGE = 667,
     QUARTER_SYM = 668,
     QUERY_SYM = 669,
     QUICK = 670,
     RANGE_SYM = 671,
     READS_SYM = 672,
     READ_ONLY_SYM = 673,
     READ_SYM = 674,
     READ_WRITE_SYM = 675,
     REAL = 676,
     REBUILD_SYM = 677,
     RECOVER_SYM = 678,
     REDOFILE_SYM = 679,
     REDO_BUFFER_SIZE_SYM = 680,
     REDUNDANT_SYM = 681,
     REFERENCES = 682,
     REGEXP = 683,
     RELAY = 684,
     RELAYLOG_SYM = 685,
     RELAY_LOG_FILE_SYM = 686,
     RELAY_LOG_POS_SYM = 687,
     RELAY_THREAD = 688,
     RELEASE_SYM = 689,
     RELOAD = 690,
     REMOVE_SYM = 691,
     RENAME = 692,
     REORGANIZE_SYM = 693,
     REPAIR = 694,
     REPEATABLE_SYM = 695,
     REPEAT_SYM = 696,
     REPLACE = 697,
     REPLICATION = 698,
     REQUIRE_SYM = 699,
     RESET_SYM = 700,
     RESIGNAL_SYM = 701,
     RESOURCES = 702,
     RESTORE_SYM = 703,
     RESTRICT = 704,
     RESUME_SYM = 705,
     RETURNS_SYM = 706,
     RETURN_SYM = 707,
     REVOKE = 708,
     RIGHT = 709,
     ROLLBACK_SYM = 710,
     ROLLUP_SYM = 711,
     ROUTINE_SYM = 712,
     ROWS_SYM = 713,
     ROW_FORMAT_SYM = 714,
     ROW_SYM = 715,
     RTREE_SYM = 716,
     SAVEPOINT_SYM = 717,
     SCHEDULE_SYM = 718,
     SCHEMA_NAME_SYM = 719,
     SECOND_MICROSECOND_SYM = 720,
     SECOND_SYM = 721,
     SECURITY_SYM = 722,
     SELECT_SYM = 723,
     SENSITIVE_SYM = 724,
     SEPARATOR_SYM = 725,
     SERIALIZABLE_SYM = 726,
     SERIAL_SYM = 727,
     SESSION_SYM = 728,
     SERVER_SYM = 729,
     SERVER_OPTIONS = 730,
     SET = 731,
     SET_VAR = 732,
     SHARE_SYM = 733,
     SHIFT_LEFT = 734,
     SHIFT_RIGHT = 735,
     SHOW = 736,
     SHUTDOWN = 737,
     SIGNAL_SYM = 738,
     SIGNED_SYM = 739,
     SIMPLE_SYM = 740,
     SLAVE = 741,
     SLAVES = 742,
     SLOW = 743,
     SMALLINT = 744,
     SNAPSHOT_SYM = 745,
     SOCKET_SYM = 746,
     SOFT_SYM = 747,
     SONAME_SYM = 748,
     SOUNDS_SYM = 749,
     SOURCE_SYM = 750,
     SPATIAL_SYM = 751,
     SPECIFIC_SYM = 752,
     SQLEXCEPTION_SYM = 753,
     SQLSTATE_SYM = 754,
     SQLWARNING_SYM = 755,
     SQL_BIG_RESULT = 756,
     SQL_BUFFER_RESULT = 757,
     SQL_CACHE_SYM = 758,
     SQL_CALC_FOUND_ROWS = 759,
     SQL_NO_CACHE_SYM = 760,
     SQL_SMALL_RESULT = 761,
     SQL_SYM = 762,
     SQL_THREAD = 763,
     SSL_SYM = 764,
     STARTING = 765,
     STARTS_SYM = 766,
     START_SYM = 767,
     STATUS_SYM = 768,
     STDDEV_SAMP_SYM = 769,
     STD_SYM = 770,
     STOP_SYM = 771,
     STORAGE_SYM = 772,
     STRAIGHT_JOIN = 773,
     STRING_SYM = 774,
     SUBCLASS_ORIGIN_SYM = 775,
     SUBDATE_SYM = 776,
     SUBJECT_SYM = 777,
     SUBPARTITIONS_SYM = 778,
     SUBPARTITION_SYM = 779,
     SUBSTRING = 780,
     SUM_SYM = 781,
     SUPER_SYM = 782,
     SUSPEND_SYM = 783,
     SWAPS_SYM = 784,
     SWITCHES_SYM = 785,
     SYSDATE = 786,
     TABLES = 787,
     TABLESPACE = 788,
     TABLE_REF_PRIORITY = 789,
     TABLE_STATS_SYM = 790,
     TABLE_SYM = 791,
     TABLE_CHECKSUM_SYM = 792,
     TABLE_NAME_SYM = 793,
     TEMPORARY = 794,
     TEMPTABLE_SYM = 795,
     TERMINATED = 796,
     TEXT_STRING = 797,
     TEXT_SYM = 798,
     THAN_SYM = 799,
     THEN_SYM = 800,
     TIMESTAMP = 801,
     TIMESTAMP_ADD = 802,
     TIMESTAMP_DIFF = 803,
     TIME_SYM = 804,
     TINYBLOB = 805,
     TINYINT = 806,
     TINYTEXT = 807,
     TO_SYM = 808,
     TRAILING = 809,
     TRANSACTION_SYM = 810,
     TRANSACTIONAL_SYM = 811,
     TRIGGERS_SYM = 812,
     TRIGGER_SYM = 813,
     TRIM = 814,
     TRUE_SYM = 815,
     TRUNCATE_SYM = 816,
     TYPES_SYM = 817,
     TYPE_SYM = 818,
     UDF_RETURNS_SYM = 819,
     ULONGLONG_NUM = 820,
     UNCOMMITTED_SYM = 821,
     UNDEFINED_SYM = 822,
     UNDERSCORE_CHARSET = 823,
     UNDOFILE_SYM = 824,
     UNDO_BUFFER_SIZE_SYM = 825,
     UNDO_SYM = 826,
     UNICODE_SYM = 827,
     UNINSTALL_SYM = 828,
     UNION_SYM = 829,
     UNIQUE_SYM = 830,
     UNKNOWN_SYM = 831,
     UNLOCK_SYM = 832,
     UNSIGNED = 833,
     UNTIL_SYM = 834,
     UPDATE_SYM = 835,
     UPGRADE_SYM = 836,
     USAGE = 837,
     USER = 838,
     USER_STATS_SYM = 839,
     USE_FRM = 840,
     USE_SYM = 841,
     USING = 842,
     UTC_DATE_SYM = 843,
     UTC_TIMESTAMP_SYM = 844,
     UTC_TIME_SYM = 845,
     VALUES = 846,
     VALUE_SYM = 847,
     VARBINARY = 848,
     VARCHAR = 849,
     VARIABLES = 850,
     VARIANCE_SYM = 851,
     VARYING = 852,
     VAR_SAMP_SYM = 853,
     VIA_SYM = 854,
     VIEW_SYM = 855,
     VIRTUAL_SYM = 856,
     WAIT_SYM = 857,
     WARNINGS = 858,
     WEEK_SYM = 859,
     WHEN_SYM = 860,
     WHERE = 861,
     WHILE_SYM = 862,
     WITH = 863,
     WITH_CUBE_SYM = 864,
     WITH_ROLLUP_SYM = 865,
     WORK_SYM = 866,
     WRAPPER_SYM = 867,
     WRITE_SYM = 868,
     X509_SYM = 869,
     XA_SYM = 870,
     XML_SYM = 871,
     XOR = 872,
     YEAR_MONTH_SYM = 873,
     YEAR_SYM = 874,
     ZEROFILL = 875,
     IMPOSSIBLE_ACTION = 876
   };
#endif
/* Tokens.  */
#define ABORT_SYM 258
#define ACCESSIBLE_SYM 259
#define ACTION 260
#define ADD 261
#define ADDDATE_SYM 262
#define AFTER_SYM 263
#define AGAINST 264
#define AGGREGATE_SYM 265
#define ALGORITHM_SYM 266
#define ALL 267
#define ALTER 268
#define ALWAYS_SYM 269
#define ANALYZE_SYM 270
#define AND_AND_SYM 271
#define AND_SYM 272
#define ANY_SYM 273
#define AS 274
#define ASC 275
#define ASCII_SYM 276
#define ASENSITIVE_SYM 277
#define AT_SYM 278
#define AUTHORS_SYM 279
#define AUTOEXTEND_SIZE_SYM 280
#define AUTO_INC 281
#define AUTO_SYM 282
#define AVG_ROW_LENGTH 283
#define AVG_SYM 284
#define BACKUP_SYM 285
#define BEFORE_SYM 286
#define BEGIN_SYM 287
#define BETWEEN_SYM 288
#define BIGINT 289
#define BINARY 290
#define BINLOG_SYM 291
#define BIN_NUM 292
#define BIT_AND 293
#define BIT_OR 294
#define BIT_SYM 295
#define BIT_XOR 296
#define BLOB_SYM 297
#define BLOCK_SYM 298
#define BOOLEAN_SYM 299
#define BOOL_SYM 300
#define BOTH 301
#define BTREE_SYM 302
#define BY 303
#define BYTE_SYM 304
#define CACHE_SYM 305
#define CALL_SYM 306
#define CASCADE 307
#define CASCADED 308
#define CASE_SYM 309
#define CAST_SYM 310
#define CATALOG_NAME_SYM 311
#define CHAIN_SYM 312
#define CHANGE 313
#define CHANGED 314
#define CHARSET 315
#define CHAR_SYM 316
#define CHECKPOINT_SYM 317
#define CHECKSUM_SYM 318
#define CHECK_SYM 319
#define CIPHER_SYM 320
#define CLASS_ORIGIN_SYM 321
#define CLIENT_SYM 322
#define CLIENT_STATS_SYM 323
#define CLOSE_SYM 324
#define COALESCE 325
#define CODE_SYM 326
#define COLLATE_SYM 327
#define COLLATION_SYM 328
#define COLUMNS 329
#define COLUMN_ADD_SYM 330
#define COLUMN_CHECK_SYM 331
#define COLUMN_CREATE_SYM 332
#define COLUMN_DELETE_SYM 333
#define COLUMN_GET_SYM 334
#define COLUMN_SYM 335
#define COLUMN_NAME_SYM 336
#define COMMENT_SYM 337
#define COMMITTED_SYM 338
#define COMMIT_SYM 339
#define COMPACT_SYM 340
#define COMPLETION_SYM 341
#define COMPRESSED_SYM 342
#define CONCURRENT 343
#define CONDITION_SYM 344
#define CONNECTION_SYM 345
#define CONSISTENT_SYM 346
#define CONSTRAINT 347
#define CONSTRAINT_CATALOG_SYM 348
#define CONSTRAINT_NAME_SYM 349
#define CONSTRAINT_SCHEMA_SYM 350
#define CONTAINS_SYM 351
#define CONTEXT_SYM 352
#define CONTINUE_SYM 353
#define CONTRIBUTORS_SYM 354
#define CONVERT_SYM 355
#define COUNT_SYM 356
#define CPU_SYM 357
#define CREATE 358
#define CROSS 359
#define CUBE_SYM 360
#define CURDATE 361
#define CURRENT_USER 362
#define CURSOR_SYM 363
#define CURSOR_NAME_SYM 364
#define CURTIME 365
#define DATABASE 366
#define DATABASES 367
#define DATAFILE_SYM 368
#define DATA_SYM 369
#define DATETIME 370
#define DATE_ADD_INTERVAL 371
#define DATE_SUB_INTERVAL 372
#define DATE_SYM 373
#define DAY_HOUR_SYM 374
#define DAY_MICROSECOND_SYM 375
#define DAY_MINUTE_SYM 376
#define DAY_SECOND_SYM 377
#define DAY_SYM 378
#define DEALLOCATE_SYM 379
#define DECIMAL_NUM 380
#define DECIMAL_SYM 381
#define DECLARE_SYM 382
#define DEFAULT 383
#define DEFINER_SYM 384
#define DELAYED_SYM 385
#define DELAY_KEY_WRITE_SYM 386
#define DELETE_SYM 387
#define DESC 388
#define DESCRIBE 389
#define DES_KEY_FILE 390
#define DETERMINISTIC_SYM 391
#define DIRECTORY_SYM 392
#define DISABLE_SYM 393
#define DISCARD 394
#define DISK_SYM 395
#define DISTINCT 396
#define DIV_SYM 397
#define DOUBLE_SYM 398
#define DO_SYM 399
#define DROP 400
#define DUAL_SYM 401
#define DUMPFILE 402
#define DUPLICATE_SYM 403
#define DYNAMIC_SYM 404
#define EACH_SYM 405
#define ELSE 406
#define ELSEIF_SYM 407
#define ENABLE_SYM 408
#define ENCLOSED 409
#define END 410
#define ENDS_SYM 411
#define END_OF_INPUT 412
#define ENGINES_SYM 413
#define ENGINE_SYM 414
#define ENUM 415
#define EQ 416
#define EQUAL_SYM 417
#define ERROR_SYM 418
#define ERRORS 419
#define ESCAPED 420
#define ESCAPE_SYM 421
#define EVENTS_SYM 422
#define EVENT_SYM 423
#define EVERY_SYM 424
#define EXAMINED_SYM 425
#define EXECUTE_SYM 426
#define EXISTS 427
#define EXIT_SYM 428
#define EXPANSION_SYM 429
#define EXTENDED_SYM 430
#define EXTENT_SIZE_SYM 431
#define EXTRACT_SYM 432
#define FALSE_SYM 433
#define FAST_SYM 434
#define FAULTS_SYM 435
#define FETCH_SYM 436
#define FILE_SYM 437
#define FIRST_SYM 438
#define FIXED_SYM 439
#define FLOAT_NUM 440
#define FLOAT_SYM 441
#define FLUSH_SYM 442
#define FORCE_SYM 443
#define FOREIGN 444
#define FOR_SYM 445
#define FOUND_SYM 446
#define FROM 447
#define FULL 448
#define FULLTEXT_SYM 449
#define FUNCTION_SYM 450
#define GE 451
#define GENERAL 452
#define GENERATED_SYM 453
#define GEOMETRYCOLLECTION 454
#define GEOMETRY_SYM 455
#define GET_FORMAT 456
#define GLOBAL_SYM 457
#define GRANT 458
#define GRANTS 459
#define GROUP_SYM 460
#define GROUP_CONCAT_SYM 461
#define GT_SYM 462
#define HANDLER_SYM 463
#define HARD_SYM 464
#define HASH_SYM 465
#define HAVING 466
#define HELP_SYM 467
#define HEX_NUM 468
#define HIGH_PRIORITY 469
#define HOST_SYM 470
#define HOSTS_SYM 471
#define HOUR_MICROSECOND_SYM 472
#define HOUR_MINUTE_SYM 473
#define HOUR_SECOND_SYM 474
#define HOUR_SYM 475
#define IDENT 476
#define IDENTIFIED_SYM 477
#define IDENT_QUOTED 478
#define IF 479
#define IGNORE_SYM 480
#define IGNORE_SERVER_IDS_SYM 481
#define IMPORT 482
#define INDEXES 483
#define INDEX_SYM 484
#define INDEX_STATS_SYM 485
#define INFILE 486
#define INITIAL_SIZE_SYM 487
#define INNER_SYM 488
#define INOUT_SYM 489
#define INSENSITIVE_SYM 490
#define INSERT 491
#define INSERT_METHOD 492
#define INSTALL_SYM 493
#define INTERVAL_SYM 494
#define INTO 495
#define INT_SYM 496
#define INVOKER_SYM 497
#define IN_SYM 498
#define IO_SYM 499
#define IPC_SYM 500
#define IS 501
#define ISOLATION 502
#define ISSUER_SYM 503
#define ITERATE_SYM 504
#define JOIN_SYM 505
#define KEYS 506
#define KEY_BLOCK_SIZE 507
#define KEY_SYM 508
#define KILL_SYM 509
#define LANGUAGE_SYM 510
#define LAST_SYM 511
#define LAST_VALUE 512
#define LE 513
#define LEADING 514
#define LEAVES 515
#define LEAVE_SYM 516
#define LEFT 517
#define LESS_SYM 518
#define LEVEL_SYM 519
#define LEX_HOSTNAME 520
#define LIKE 521
#define LIMIT 522
#define LINEAR_SYM 523
#define LINES 524
#define LINESTRING 525
#define LIST_SYM 526
#define LOAD 527
#define LOCAL_SYM 528
#define LOCATOR_SYM 529
#define LOCKS_SYM 530
#define LOCK_SYM 531
#define LOGFILE_SYM 532
#define LOGS_SYM 533
#define LONGBLOB 534
#define LONGTEXT 535
#define LONG_NUM 536
#define LONG_SYM 537
#define LOOP_SYM 538
#define LOW_PRIORITY 539
#define LT 540
#define MASTER_CONNECT_RETRY_SYM 541
#define MASTER_USE_GTID_SYM 542
#define MASTER_HOST_SYM 543
#define MASTER_LOG_FILE_SYM 544
#define MASTER_LOG_POS_SYM 545
#define MASTER_PASSWORD_SYM 546
#define MASTER_PORT_SYM 547
#define MASTER_SERVER_ID_SYM 548
#define MASTER_SSL_CAPATH_SYM 549
#define MASTER_SSL_CA_SYM 550
#define MASTER_SSL_CERT_SYM 551
#define MASTER_SSL_CIPHER_SYM 552
#define MASTER_SSL_CRL_SYM 553
#define MASTER_SSL_CRLPATH_SYM 554
#define MASTER_SSL_KEY_SYM 555
#define MASTER_SSL_SYM 556
#define MASTER_SSL_VERIFY_SERVER_CERT_SYM 557
#define MASTER_SYM 558
#define MASTER_USER_SYM 559
#define MASTER_HEARTBEAT_PERIOD_SYM 560
#define MATCH 561
#define MAX_CONNECTIONS_PER_HOUR 562
#define MAX_QUERIES_PER_HOUR 563
#define MAX_ROWS 564
#define MAX_SIZE_SYM 565
#define MAX_SYM 566
#define MAX_UPDATES_PER_HOUR 567
#define MAX_USER_CONNECTIONS_SYM 568
#define MAX_VALUE_SYM 569
#define MEDIUMBLOB 570
#define MEDIUMINT 571
#define MEDIUMTEXT 572
#define MEDIUM_SYM 573
#define MEMORY_SYM 574
#define MERGE_SYM 575
#define MESSAGE_TEXT_SYM 576
#define MICROSECOND_SYM 577
#define MIGRATE_SYM 578
#define MINUTE_MICROSECOND_SYM 579
#define MINUTE_SECOND_SYM 580
#define MINUTE_SYM 581
#define MIN_ROWS 582
#define MIN_SYM 583
#define MODE_SYM 584
#define MODIFIES_SYM 585
#define MODIFY_SYM 586
#define MOD_SYM 587
#define MONTH_SYM 588
#define MULTILINESTRING 589
#define MULTIPOINT 590
#define MULTIPOLYGON 591
#define MUTEX_SYM 592
#define MYSQL_ERRNO_SYM 593
#define NAMES_SYM 594
#define NAME_SYM 595
#define NATIONAL_SYM 596
#define NATURAL 597
#define NCHAR_STRING 598
#define NCHAR_SYM 599
#define NDBCLUSTER_SYM 600
#define NE 601
#define NEG 602
#define NEW_SYM 603
#define NEXT_SYM 604
#define NODEGROUP_SYM 605
#define NONE_SYM 606
#define NOT2_SYM 607
#define NOT_SYM 608
#define NOW_SYM 609
#define NO_SYM 610
#define NO_WAIT_SYM 611
#define NO_WRITE_TO_BINLOG 612
#define NULL_SYM 613
#define NUM 614
#define NUMERIC_SYM 615
#define NVARCHAR_SYM 616
#define OFFSET_SYM 617
#define OLD_PASSWORD 618
#define ON 619
#define ONE_SYM 620
#define ONLY_SYM 621
#define ONLINE_SYM 622
#define OPEN_SYM 623
#define OPTIMIZE 624
#define OPTIONS_SYM 625
#define OPTION 626
#define OPTIONALLY 627
#define OR2_SYM 628
#define ORDER_SYM 629
#define OR_OR_SYM 630
#define OR_SYM 631
#define OUTER 632
#define OUTFILE 633
#define OUT_SYM 634
#define OWNER_SYM 635
#define PACK_KEYS_SYM 636
#define PAGE_SYM 637
#define PAGE_CHECKSUM_SYM 638
#define PARAM_MARKER 639
#define PARSER_SYM 640
#define PARSE_VCOL_EXPR_SYM 641
#define PARTIAL 642
#define PARTITIONING_SYM 643
#define PARTITIONS_SYM 644
#define PARTITION_SYM 645
#define PASSWORD 646
#define PERSISTENT_SYM 647
#define PHASE_SYM 648
#define PLUGINS_SYM 649
#define PLUGIN_SYM 650
#define POINT_SYM 651
#define POLYGON 652
#define PORT_SYM 653
#define POSITION_SYM 654
#define PRECISION 655
#define PREPARE_SYM 656
#define PRESERVE_SYM 657
#define PREV_SYM 658
#define PRIMARY_SYM 659
#define PRIVILEGES 660
#define PROCEDURE_SYM 661
#define PROCESS 662
#define PROCESSLIST_SYM 663
#define PROFILE_SYM 664
#define PROFILES_SYM 665
#define PROXY_SYM 666
#define PURGE 667
#define QUARTER_SYM 668
#define QUERY_SYM 669
#define QUICK 670
#define RANGE_SYM 671
#define READS_SYM 672
#define READ_ONLY_SYM 673
#define READ_SYM 674
#define READ_WRITE_SYM 675
#define REAL 676
#define REBUILD_SYM 677
#define RECOVER_SYM 678
#define REDOFILE_SYM 679
#define REDO_BUFFER_SIZE_SYM 680
#define REDUNDANT_SYM 681
#define REFERENCES 682
#define REGEXP 683
#define RELAY 684
#define RELAYLOG_SYM 685
#define RELAY_LOG_FILE_SYM 686
#define RELAY_LOG_POS_SYM 687
#define RELAY_THREAD 688
#define RELEASE_SYM 689
#define RELOAD 690
#define REMOVE_SYM 691
#define RENAME 692
#define REORGANIZE_SYM 693
#define REPAIR 694
#define REPEATABLE_SYM 695
#define REPEAT_SYM 696
#define REPLACE 697
#define REPLICATION 698
#define REQUIRE_SYM 699
#define RESET_SYM 700
#define RESIGNAL_SYM 701
#define RESOURCES 702
#define RESTORE_SYM 703
#define RESTRICT 704
#define RESUME_SYM 705
#define RETURNS_SYM 706
#define RETURN_SYM 707
#define REVOKE 708
#define RIGHT 709
#define ROLLBACK_SYM 710
#define ROLLUP_SYM 711
#define ROUTINE_SYM 712
#define ROWS_SYM 713
#define ROW_FORMAT_SYM 714
#define ROW_SYM 715
#define RTREE_SYM 716
#define SAVEPOINT_SYM 717
#define SCHEDULE_SYM 718
#define SCHEMA_NAME_SYM 719
#define SECOND_MICROSECOND_SYM 720
#define SECOND_SYM 721
#define SECURITY_SYM 722
#define SELECT_SYM 723
#define SENSITIVE_SYM 724
#define SEPARATOR_SYM 725
#define SERIALIZABLE_SYM 726
#define SERIAL_SYM 727
#define SESSION_SYM 728
#define SERVER_SYM 729
#define SERVER_OPTIONS 730
#define SET 731
#define SET_VAR 732
#define SHARE_SYM 733
#define SHIFT_LEFT 734
#define SHIFT_RIGHT 735
#define SHOW 736
#define SHUTDOWN 737
#define SIGNAL_SYM 738
#define SIGNED_SYM 739
#define SIMPLE_SYM 740
#define SLAVE 741
#define SLAVES 742
#define SLOW 743
#define SMALLINT 744
#define SNAPSHOT_SYM 745
#define SOCKET_SYM 746
#define SOFT_SYM 747
#define SONAME_SYM 748
#define SOUNDS_SYM 749
#define SOURCE_SYM 750
#define SPATIAL_SYM 751
#define SPECIFIC_SYM 752
#define SQLEXCEPTION_SYM 753
#define SQLSTATE_SYM 754
#define SQLWARNING_SYM 755
#define SQL_BIG_RESULT 756
#define SQL_BUFFER_RESULT 757
#define SQL_CACHE_SYM 758
#define SQL_CALC_FOUND_ROWS 759
#define SQL_NO_CACHE_SYM 760
#define SQL_SMALL_RESULT 761
#define SQL_SYM 762
#define SQL_THREAD 763
#define SSL_SYM 764
#define STARTING 765
#define STARTS_SYM 766
#define START_SYM 767
#define STATUS_SYM 768
#define STDDEV_SAMP_SYM 769
#define STD_SYM 770
#define STOP_SYM 771
#define STORAGE_SYM 772
#define STRAIGHT_JOIN 773
#define STRING_SYM 774
#define SUBCLASS_ORIGIN_SYM 775
#define SUBDATE_SYM 776
#define SUBJECT_SYM 777
#define SUBPARTITIONS_SYM 778
#define SUBPARTITION_SYM 779
#define SUBSTRING 780
#define SUM_SYM 781
#define SUPER_SYM 782
#define SUSPEND_SYM 783
#define SWAPS_SYM 784
#define SWITCHES_SYM 785
#define SYSDATE 786
#define TABLES 787
#define TABLESPACE 788
#define TABLE_REF_PRIORITY 789
#define TABLE_STATS_SYM 790
#define TABLE_SYM 791
#define TABLE_CHECKSUM_SYM 792
#define TABLE_NAME_SYM 793
#define TEMPORARY 794
#define TEMPTABLE_SYM 795
#define TERMINATED 796
#define TEXT_STRING 797
#define TEXT_SYM 798
#define THAN_SYM 799
#define THEN_SYM 800
#define TIMESTAMP 801
#define TIMESTAMP_ADD 802
#define TIMESTAMP_DIFF 803
#define TIME_SYM 804
#define TINYBLOB 805
#define TINYINT 806
#define TINYTEXT 807
#define TO_SYM 808
#define TRAILING 809
#define TRANSACTION_SYM 810
#define TRANSACTIONAL_SYM 811
#define TRIGGERS_SYM 812
#define TRIGGER_SYM 813
#define TRIM 814
#define TRUE_SYM 815
#define TRUNCATE_SYM 816
#define TYPES_SYM 817
#define TYPE_SYM 818
#define UDF_RETURNS_SYM 819
#define ULONGLONG_NUM 820
#define UNCOMMITTED_SYM 821
#define UNDEFINED_SYM 822
#define UNDERSCORE_CHARSET 823
#define UNDOFILE_SYM 824
#define UNDO_BUFFER_SIZE_SYM 825
#define UNDO_SYM 826
#define UNICODE_SYM 827
#define UNINSTALL_SYM 828
#define UNION_SYM 829
#define UNIQUE_SYM 830
#define UNKNOWN_SYM 831
#define UNLOCK_SYM 832
#define UNSIGNED 833
#define UNTIL_SYM 834
#define UPDATE_SYM 835
#define UPGRADE_SYM 836
#define USAGE 837
#define USER 838
#define USER_STATS_SYM 839
#define USE_FRM 840
#define USE_SYM 841
#define USING 842
#define UTC_DATE_SYM 843
#define UTC_TIMESTAMP_SYM 844
#define UTC_TIME_SYM 845
#define VALUES 846
#define VALUE_SYM 847
#define VARBINARY 848
#define VARCHAR 849
#define VARIABLES 850
#define VARIANCE_SYM 851
#define VARYING 852
#define VAR_SAMP_SYM 853
#define VIA_SYM 854
#define VIEW_SYM 855
#define VIRTUAL_SYM 856
#define WAIT_SYM 857
#define WARNINGS 858
#define WEEK_SYM 859
#define WHEN_SYM 860
#define WHERE 861
#define WHILE_SYM 862
#define WITH 863
#define WITH_CUBE_SYM 864
#define WITH_ROLLUP_SYM 865
#define WORK_SYM 866
#define WRAPPER_SYM 867
#define WRITE_SYM 868
#define X509_SYM 869
#define XA_SYM 870
#define XML_SYM 871
#define XOR 872
#define YEAR_MONTH_SYM 873
#define YEAR_SYM 874
#define ZEROFILL 875
#define IMPOSSIBLE_ACTION 876




#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
typedef union YYSTYPE
{

/* Line 214 of yacc.c  */
#line 845 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"

  int  num;
  ulong ulong_num;
  ulonglong ulonglong_number;
  longlong longlong_number;
  LEX_STRING lex_str;
  LEX_STRING *lex_str_ptr;
  LEX_SYMBOL symbol;
  Table_ident *table;
  char *simple_string;
  Item *item;
  Item_num *item_num;
  List<Item> *item_list;
  List<String> *string_list;
  String *string;
  Key_part_spec *key_part;
  TABLE_LIST *table_list;
  udf_func *udf;
  LEX_USER *lex_user;
  struct sys_var_with_base variable;
  enum enum_var_type var_type;
  Key::Keytype key_type;
  enum ha_key_alg key_alg;
  handlerton *db_type;
  enum row_type row_type;
  enum ha_rkey_function ha_rkey_mode;
  enum enum_tx_isolation tx_isolation;
  enum Cast_target cast_type;
  enum Item_udftype udf_type;
  enum ha_choice choice;
  CHARSET_INFO *charset;
  thr_lock_type lock_type;
  interval_type interval, interval_time_st;
  timestamp_type date_time_type;
  st_select_lex *select_lex;
  chooser_compare_func_creator boolfunc2creator;
  struct sp_cond_type *spcondtype;
  struct { int vars, conds, hndlrs, curs; } spblock;
  sp_name *spname;
  LEX *lex;
  sp_head *sphead;
  struct p_elem_val *p_elem_value;
  enum index_hint_type index_hint;
  enum enum_filetype filetype;
  enum Foreign_key::fk_option m_fk_option;
  enum enum_yes_no_unknown m_yes_no_unk;
  Diag_condition_item_name diag_condition_item_name;
  DYNCALL_CREATE_DEF *dyncol_def;
  List<DYNCALL_CREATE_DEF> *dyncol_def_list;



/* Line 214 of yacc.c  */
#line 2234 "/home/buildbot/buildbot/build/mkdist/sql/sql_yacc.cc"
} YYSTYPE;
# define YYSTYPE_IS_TRIVIAL 1
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
#endif


/* Copy the second part of user declarations.  */

/* Line 264 of yacc.c  */
#line 896 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"

bool my_yyoverflow(short **a, YYSTYPE **b, ulong *yystacksize);


/* Line 264 of yacc.c  */
#line 2251 "/home/buildbot/buildbot/build/mkdist/sql/sql_yacc.cc"

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#elif (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
typedef signed char yytype_int8;
#else
typedef short int yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(msgid) dgettext ("bison-runtime", msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(msgid) msgid
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(e) ((void) (e))
#else
# define YYUSE(e) /* empty */
#endif

/* Identity function, used to suppress warnings about constant conditions.  */
#ifndef lint
# define YYID(n) (n)
#else
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static int
YYID (int yyi)
#else
static int
YYID (yyi)
    int yyi;
#endif
{
  return yyi;
}
#endif

#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#     ifndef _STDLIB_H
#      define _STDLIB_H 1
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (YYID (0))
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined _STDLIB_H \
       && ! ((defined YYMALLOC || defined malloc) \
	     && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef _STDLIB_H
#    define _STDLIB_H 1
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
	 || (defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss_alloc;
  YYSTYPE yyvs_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE)) \
      + YYSTACK_GAP_MAXIMUM)

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  YYSIZE_T yyi;				\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (YYID (0))
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)				\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack_alloc, Stack, yysize);			\
	Stack = &yyptr->Stack_alloc;					\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (YYID (0))

#endif

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  607
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   58728

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  641
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  947
/* YYNRULES -- Number of rules.  */
#define YYNRULES  2683
/* YYNRULES -- Number of states.  */
#define YYNSTATES  4553

/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   876

#define YYTRANSLATE(YYX)						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const yytype_uint16 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   634,     2,     2,     2,   628,   623,     2,
     631,   632,   626,   625,   633,   624,   639,   627,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   640,   637,
       2,     2,     2,     2,   638,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,   629,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   635,   622,   636,   630,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const yytype_uint16 yyprhs[] =
{
       0,     0,     3,     5,     6,    11,    14,    15,    17,    19,
      21,    23,    25,    27,    29,    31,    33,    35,    37,    39,
      41,    43,    45,    47,    49,    51,    53,    55,    57,    59,
      61,    63,    65,    67,    69,    71,    73,    75,    77,    79,
      81,    83,    85,    87,    89,    91,    93,    95,    97,    99,
     101,   103,   105,   107,   109,   111,   113,   115,   117,   119,
     121,   123,   125,   127,   131,   133,   135,   140,   142,   145,
     146,   151,   152,   155,   159,   161,   164,   165,   169,   170,
     177,   179,   183,   187,   191,   195,   199,   203,   207,   211,
     215,   219,   223,   227,   231,   235,   239,   243,   249,   251,
     252,   254,   258,   260,   264,   268,   272,   276,   280,   281,
     283,   285,   286,   294,   295,   309,   310,   324,   325,   339,
     340,   347,   348,   352,   357,   362,   366,   369,   380,   382,
     386,   389,   392,   395,   398,   401,   404,   407,   408,   422,
     423,   430,   433,   434,   436,   440,   442,   443,   446,   447,
     450,   451,   453,   457,   462,   463,   466,   467,   470,   472,
     474,   476,   478,   480,   482,   484,   486,   488,   490,   492,
     494,   496,   497,   501,   503,   504,   507,   508,   511,   514,
     517,   520,   523,   527,   531,   533,   535,   537,   540,   544,
     548,   549,   554,   555,   559,   560,   562,   566,   568,   569,
     571,   575,   577,   578,   582,   583,   585,   589,   591,   596,
     597,   599,   601,   603,   604,   608,   611,   615,   616,   620,
     621,   627,   633,   634,   642,   648,   649,   652,   654,   656,
     658,   662,   664,   666,   668,   672,   673,   675,   677,   679,
     681,   684,   686,   690,   692,   694,   695,   697,   698,   701,
     705,   711,   713,   715,   717,   719,   721,   723,   725,   727,
     729,   731,   733,   735,   737,   739,   741,   745,   747,   751,
     752,   755,   757,   759,   761,   763,   765,   767,   769,   771,
     773,   775,   777,   779,   781,   782,   788,   789,   792,   793,
     797,   798,   801,   804,   807,   810,   811,   818,   821,   822,
     825,   827,   829,   833,   834,   835,   836,   844,   845,   848,
     851,   853,   855,   856,   857,   866,   867,   874,   876,   879,
     881,   884,   885,   886,   893,   894,   895,   902,   903,   906,
     907,   913,   914,   916,   917,   923,   924,   927,   928,   934,
     939,   940,   941,   950,   951,   959,   961,   963,   965,   967,
     969,   972,   977,   983,   984,   989,   994,   999,  1003,  1007,
    1010,  1013,  1014,  1017,  1019,  1022,  1026,  1028,  1030,  1032,
    1034,  1036,  1039,  1043,  1045,  1047,  1049,  1051,  1053,  1055,
    1057,  1059,  1061,  1063,  1066,  1070,  1072,  1074,  1076,  1078,
    1080,  1082,  1084,  1087,  1091,  1093,  1095,  1097,  1099,  1101,
    1103,  1105,  1107,  1109,  1112,  1116,  1118,  1120,  1122,  1125,
    1128,  1131,  1133,  1135,  1137,  1139,  1142,  1146,  1150,  1154,
    1158,  1162,  1166,  1170,  1174,  1179,  1180,  1182,  1184,  1186,
    1188,  1190,  1191,  1199,  1203,  1204,  1210,  1212,  1215,  1220,
    1221,  1222,  1228,  1229,  1237,  1239,  1240,  1242,  1243,  1248,
    1249,  1250,  1254,  1260,  1266,  1267,  1272,  1275,  1278,  1281,
    1284,  1285,  1287,  1288,  1290,  1292,  1296,  1298,  1303,  1309,
    1315,  1316,  1319,  1320,  1321,  1329,  1330,  1340,  1342,  1346,
    1348,  1350,  1351,  1354,  1355,  1359,  1361,  1365,  1366,  1373,
    1375,  1376,  1377,  1383,  1384,  1389,  1391,  1393,  1395,  1399,
    1401,  1405,  1406,  1407,  1413,  1415,  1419,  1421,  1423,  1424,
    1428,  1430,  1434,  1435,  1440,  1442,  1443,  1445,  1448,  1450,
    1454,  1459,  1463,  1467,  1471,  1475,  1480,  1485,  1489,  1490,
    1491,  1498,  1499,  1501,  1502,  1504,  1506,  1509,  1511,  1513,
    1514,  1516,  1518,  1521,  1523,  1524,  1528,  1529,  1531,  1533,
    1536,  1538,  1541,  1545,  1549,  1553,  1557,  1561,  1565,  1569,
    1573,  1577,  1581,  1585,  1589,  1593,  1597,  1601,  1602,  1609,
    1611,  1613,  1617,  1622,  1627,  1630,  1633,  1636,  1640,  1644,
    1648,  1652,  1656,  1660,  1664,  1669,  1674,  1676,  1678,  1680,
    1682,  1684,  1686,  1688,  1690,  1692,  1694,  1696,  1698,  1700,
    1703,  1705,  1707,  1709,  1711,  1713,  1715,  1719,  1721,  1723,
    1726,  1729,  1730,  1739,  1740,  1750,  1751,  1761,  1762,  1772,
    1781,  1784,  1785,  1787,  1792,  1793,  1795,  1798,  1799,  1803,
    1806,  1815,  1816,  1819,  1820,  1822,  1824,  1825,  1827,  1830,
    1832,  1834,  1837,  1840,  1845,  1849,  1853,  1857,  1861,  1863,
    1866,  1868,  1870,  1874,  1877,  1881,  1884,  1887,  1889,  1893,
    1897,  1900,  1904,  1906,  1909,  1912,  1915,  1917,  1920,  1922,
    1924,  1926,  1929,  1933,  1936,  1940,  1943,  1946,  1950,  1954,
    1958,  1959,  1966,  1967,  1974,  1977,  1979,  1981,  1983,  1985,
    1987,  1989,  1991,  1993,  1995,  1997,  1999,  2002,  2005,  2007,
    2010,  2012,  2015,  2019,  2022,  2024,  2026,  2028,  2030,  2032,
    2034,  2036,  2039,  2040,  2042,  2044,  2050,  2051,  2053,  2056,
    2058,  2060,  2062,  2064,  2068,  2072,  2076,  2080,  2081,  2083,
    2084,  2086,  2087,  2089,  2092,  2094,  2096,  2099,  2102,  2107,
    2109,  2113,  2116,  2118,  2121,  2124,  2127,  2131,  2135,  2139,
    2143,  2146,  2149,  2151,  2154,  2156,  2158,  2160,  2162,  2164,
    2165,  2168,  2170,  2172,  2174,  2176,  2178,  2179,  2182,  2184,
    2186,  2187,  2189,  2191,  2194,  2197,  2199,  2202,  2205,  2206,
    2208,  2210,  2212,  2216,  2218,  2222,  2223,  2225,  2226,  2228,
    2234,  2235,  2239,  2243,  2245,  2246,  2249,  2252,  2255,  2256,
    2260,  2264,  2271,  2278,  2280,  2282,  2285,  2288,  2291,  2293,
    2296,  2299,  2301,  2303,  2304,  2306,  2308,  2310,  2312,  2313,
    2315,  2317,  2319,  2320,  2322,  2325,  2326,  2328,  2329,  2331,
    2332,  2334,  2336,  2339,  2341,  2344,  2346,  2349,  2352,  2355,
    2359,  2362,  2366,  2370,  2374,  2378,  2380,  2382,  2384,  2386,
    2390,  2392,  2394,  2396,  2401,  2404,  2406,  2411,  2412,  2414,
    2417,  2418,  2421,  2423,  2427,  2428,  2435,  2436,  2442,  2450,
    2451,  2457,  2458,  2464,  2465,  2471,  2472,  2477,  2478,  2489,
    2493,  2498,  2502,  2506,  2514,  2515,  2519,  2521,  2526,  2527,
    2531,  2532,  2535,  2536,  2538,  2539,  2542,  2545,  2548,  2551,
    2553,  2555,  2557,  2562,  2567,  2568,  2575,  2580,  2581,  2587,
    2588,  2595,  2600,  2604,  2606,  2609,  2611,  2613,  2614,  2621,
    2622,  2626,  2629,  2630,  2636,  2637,  2638,  2645,  2647,  2651,
    2653,  2655,  2659,  2663,  2667,  2670,  2675,  2676,  2684,  2685,
    2686,  2695,  2701,  2707,  2711,  2716,  2719,  2722,  2729,  2735,
    2739,  2745,  2747,  2749,  2751,  2752,  2754,  2755,  2757,  2758,
    2761,  2762,  2764,  2767,  2769,  2771,  2773,  2774,  2776,  2778,
    2779,  2782,  2784,  2785,  2787,  2789,  2791,  2792,  2799,  2800,
    2806,  2811,  2816,  2817,  2824,  2829,  2833,  2834,  2836,  2838,
    2842,  2846,  2849,  2852,  2853,  2856,  2858,  2862,  2863,  2865,
    2867,  2868,  2871,  2873,  2877,  2878,  2884,  2885,  2887,  2889,
    2890,  2897,  2898,  2900,  2902,  2905,  2907,  2909,  2911,  2912,
    2918,  2920,  2924,  2927,  2928,  2932,  2934,  2939,  2941,  2942,
    2947,  2949,  2950,  2955,  2956,  2958,  2962,  2963,  2965,  2969,
    2971,  2973,  2976,  2977,  2983,  2984,  2986,  2988,  2991,  2993,
    2995,  2997,  2999,  3001,  3004,  3005,  3011,  3012,  3014,  3016,
    3017,  3022,  3027,  3031,  3037,  3039,  3043,  3047,  3048,  3055,
    3057,  3059,  3061,  3065,  3068,  3072,  3074,  3076,  3077,  3084,
    3086,  3088,  3090,  3094,  3098,  3103,  3104,  3111,  3112,  3115,
    3116,  3121,  3122,  3125,  3127,  3130,  3135,  3138,  3142,  3145,
    3149,  3150,  3154,  3155,  3156,  3163,  3166,  3168,  3170,  3173,
    3176,  3185,  3190,  3191,  3193,  3196,  3198,  3200,  3202,  3204,
    3205,  3208,  3213,  3217,  3219,  3221,  3225,  3230,  3231,  3232,
    3233,  3236,  3239,  3241,  3243,  3244,  3247,  3251,  3252,  3255,
    3259,  3260,  3263,  3267,  3271,  3275,  3278,  3282,  3287,  3291,
    3296,  3300,  3305,  3307,  3311,  3316,  3320,  3324,  3331,  3333,
    3339,  3346,  3352,  3360,  3367,  3376,  3382,  3389,  3394,  3399,
    3405,  3409,  3414,  3416,  3420,  3424,  3428,  3432,  3436,  3440,
    3446,  3452,  3456,  3460,  3464,  3468,  3472,  3476,  3478,  3480,
    3482,  3484,  3486,  3488,  3490,  3492,  3494,  3496,  3498,  3500,
    3502,  3504,  3506,  3508,  3510,  3511,  3514,  3516,  3519,  3521,
    3523,  3525,  3528,  3531,  3533,  3535,  3538,  3541,  3546,  3548,
    3552,  3554,  3556,  3558,  3560,  3562,  3566,  3568,  3570,  3572,
    3574,  3578,  3581,  3584,  3587,  3590,  3594,  3598,  3604,  3611,
    3616,  3621,  3629,  3632,  3639,  3645,  3652,  3659,  3664,  3669,
    3675,  3680,  3687,  3690,  3695,  3700,  3705,  3716,  3723,  3732,
    3739,  3744,  3749,  3756,  3761,  3766,  3771,  3778,  3783,  3791,
    3799,  3807,  3814,  3821,  3828,  3835,  3839,  3844,  3851,  3860,
    3863,  3866,  3875,  3884,  3891,  3898,  3901,  3908,  3915,  3924,
    3933,  3940,  3949,  3956,  3959,  3968,  3977,  3980,  3983,  3986,
    3993,  4000,  4005,  4010,  4019,  4024,  4029,  4034,  4039,  4043,
    4052,  4057,  4062,  4069,  4074,  4079,  4084,  4091,  4100,  4107,
    4112,  4119,  4121,  4128,  4133,  4138,  4143,  4148,  4153,  4160,
    4165,  4166,  4172,  4179,  4182,  4186,  4187,  4192,  4193,  4197,
    4198,  4200,  4202,  4206,  4211,  4216,  4222,  4227,  4232,  4237,
    4243,  4248,  4249,  4250,  4258,  4263,  4269,  4274,  4280,  4285,
    4290,  4295,  4300,  4305,  4311,  4312,  4321,  4322,  4326,  4330,
    4332,  4337,  4338,  4340,  4341,  4344,  4345,  4347,  4348,  4352,
    4355,  4359,  4362,  4364,  4366,  4369,  4371,  4374,  4376,  4379,
    4382,  4385,  4386,  4390,  4391,  4393,  4395,  4399,  4401,  4405,
    4407,  4411,  4412,  4414,  4415,  4418,  4423,  4429,  4431,  4433,
    4435,  4437,  4442,  4444,  4448,  4452,  4453,  4460,  4461,  4470,
    4475,  4476,  4485,  4486,  4497,  4504,  4505,  4514,  4515,  4526,
    4533,  4535,  4538,  4540,  4542,  4545,  4546,  4551,  4555,  4561,
    4564,  4565,  4566,  4574,  4576,  4577,  4578,  4585,  4586,  4590,
    4591,  4592,  4598,  4599,  4601,  4602,  4604,  4605,  4608,  4612,
    4616,  4618,  4620,  4621,  4629,  4630,  4638,  4640,  4643,  4644,
    4645,  4648,  4649,  4652,  4653,  4655,  4657,  4659,  4661,  4665,
    4667,  4671,  4673,  4675,  4677,  4679,  4681,  4683,  4685,  4687,
    4689,  4691,  4693,  4695,  4697,  4699,  4701,  4703,  4705,  4707,
    4709,  4711,  4713,  4715,  4717,  4719,  4721,  4722,  4724,  4726,
    4727,  4730,  4731,  4733,  4734,  4735,  4739,  4740,  4741,  4745,
    4748,  4749,  4750,  4755,  4760,  4763,  4764,  4766,  4768,  4772,
    4776,  4778,  4781,  4782,  4784,  4785,  4790,  4795,  4798,  4799,
    4801,  4803,  4804,  4806,  4807,  4809,  4812,  4818,  4823,  4825,
    4829,  4833,  4835,  4837,  4839,  4841,  4843,  4845,  4846,  4849,
    4853,  4858,  4860,  4863,  4866,  4868,  4870,  4872,  4874,  4876,
    4878,  4880,  4882,  4884,  4886,  4888,  4890,  4892,  4894,  4896,
    4898,  4900,  4902,  4904,  4906,  4908,  4910,  4912,  4914,  4916,
    4918,  4919,  4920,  4927,  4928,  4930,  4934,  4936,  4940,  4941,
    4944,  4948,  4950,  4953,  4955,  4956,  4960,  4961,  4962,  4970,
    4973,  4975,  4976,  4980,  4981,  4989,  4990,  4998,  5003,  5010,
    5015,  5020,  5025,  5026,  5033,  5038,  5043,  5049,  5056,  5061,
    5063,  5067,  5069,  5071,  5075,  5077,  5078,  5081,  5082,  5084,
    5085,  5086,  5095,  5096,  5097,  5104,  5105,  5107,  5109,  5111,
    5113,  5115,  5118,  5120,  5122,  5124,  5128,  5133,  5134,  5138,
    5142,  5144,  5147,  5150,  5151,  5155,  5156,  5162,  5166,  5168,
    5172,  5174,  5178,  5180,  5182,  5183,  5185,  5186,  5191,  5192,
    5194,  5198,  5200,  5202,  5204,  5205,  5206,  5213,  5214,  5215,
    5227,  5231,  5233,  5237,  5241,  5243,  5247,  5248,  5250,  5251,
    5256,  5257,  5264,  5265,  5271,  5272,  5279,  5281,  5285,  5288,
    5293,  5294,  5297,  5298,  5301,  5303,  5305,  5307,  5308,  5313,
    5314,  5316,  5317,  5319,  5321,  5325,  5327,  5329,  5332,  5335,
    5338,  5340,  5342,  5344,  5346,  5347,  5351,  5352,  5356,  5359,
    5364,  5369,  5373,  5378,  5383,  5385,  5389,  5393,  5397,  5401,
    5408,  5411,  5414,  5415,  5422,  5423,  5431,  5437,  5440,  5442,
    5444,  5446,  5452,  5458,  5461,  5464,  5466,  5471,  5475,  5478,
    5482,  5485,  5488,  5490,  5494,  5499,  5503,  5507,  5510,  5514,
    5517,  5521,  5523,  5525,  5527,  5529,  5533,  5537,  5541,  5545,
    5549,  5553,  5557,  5561,  5565,  5567,  5569,  5571,  5573,  5575,
    5576,  5578,  5579,  5582,  5583,  5585,  5587,  5589,  5590,  5593,
    5594,  5597,  5598,  5601,  5604,  5605,  5610,  5611,  5616,  5618,
    5620,  5621,  5623,  5625,  5626,  5628,  5630,  5631,  5636,  5637,
    5638,  5644,  5646,  5647,  5652,  5656,  5658,  5661,  5664,  5667,
    5670,  5673,  5677,  5680,  5682,  5684,  5686,  5688,  5691,  5693,
    5695,  5697,  5699,  5701,  5703,  5705,  5706,  5708,  5709,  5713,
    5714,  5718,  5722,  5724,  5725,  5730,  5732,  5735,  5736,  5738,
    5739,  5743,  5747,  5750,  5753,  5754,  5760,  5761,  5763,  5765,
    5766,  5768,  5770,  5772,  5775,  5778,  5779,  5780,  5781,  5782,
    5804,  5806,  5808,  5809,  5811,  5812,  5814,  5816,  5817,  5819,
    5821,  5822,  5825,  5828,  5830,  5834,  5839,  5843,  5847,  5848,
    5851,  5854,  5856,  5860,  5864,  5865,  5870,  5871,  5875,  5877,
    5879,  5880,  5884,  5887,  5891,  5893,  5895,  5898,  5899,  5902,
    5906,  5908,  5914,  5916,  5918,  5921,  5924,  5926,  5928,  5930,
    5932,  5934,  5937,  5940,  5942,  5944,  5946,  5948,  5950,  5952,
    5954,  5957,  5960,  5963,  5966,  5969,  5971,  5973,  5975,  5977,
    5979,  5981,  5983,  5987,  5993,  5995,  5997,  5999,  6001,  6003,
    6007,  6012,  6018,  6020,  6026,  6030,  6033,  6035,  6039,  6042,
    6045,  6050,  6052,  6054,  6056,  6058,  6060,  6062,  6064,  6066,
    6068,  6070,  6072,  6074,  6076,  6078,  6082,  6085,  6087,  6089,
    6091,  6093,  6095,  6097,  6099,  6101,  6103,  6105,  6107,  6109,
    6111,  6113,  6115,  6117,  6119,  6121,  6123,  6125,  6127,  6129,
    6131,  6133,  6135,  6137,  6139,  6141,  6143,  6145,  6147,  6149,
    6151,  6153,  6155,  6157,  6159,  6161,  6163,  6165,  6167,  6169,
    6171,  6173,  6175,  6177,  6179,  6181,  6183,  6185,  6187,  6189,
    6191,  6193,  6195,  6197,  6199,  6201,  6203,  6205,  6207,  6209,
    6211,  6213,  6215,  6217,  6219,  6221,  6223,  6225,  6227,  6229,
    6231,  6233,  6235,  6237,  6239,  6241,  6243,  6245,  6247,  6249,
    6251,  6253,  6255,  6257,  6259,  6261,  6263,  6265,  6267,  6269,
    6271,  6273,  6275,  6277,  6279,  6281,  6283,  6285,  6287,  6289,
    6291,  6293,  6295,  6297,  6299,  6301,  6303,  6305,  6307,  6309,
    6311,  6313,  6315,  6317,  6319,  6321,  6323,  6325,  6327,  6329,
    6331,  6333,  6335,  6337,  6339,  6341,  6343,  6345,  6347,  6349,
    6351,  6353,  6355,  6357,  6359,  6361,  6363,  6365,  6367,  6369,
    6371,  6373,  6375,  6377,  6379,  6381,  6383,  6385,  6387,  6389,
    6391,  6393,  6395,  6397,  6399,  6401,  6403,  6405,  6407,  6409,
    6411,  6413,  6415,  6417,  6419,  6421,  6423,  6425,  6427,  6429,
    6431,  6433,  6435,  6437,  6439,  6441,  6443,  6445,  6447,  6449,
    6451,  6453,  6455,  6457,  6459,  6461,  6463,  6465,  6467,  6469,
    6471,  6473,  6475,  6477,  6479,  6481,  6483,  6485,  6487,  6489,
    6491,  6493,  6495,  6497,  6499,  6501,  6503,  6505,  6507,  6509,
    6511,  6513,  6515,  6517,  6519,  6521,  6523,  6525,  6527,  6529,
    6531,  6533,  6535,  6537,  6539,  6541,  6543,  6545,  6547,  6549,
    6551,  6553,  6555,  6557,  6559,  6561,  6563,  6565,  6567,  6569,
    6571,  6573,  6575,  6577,  6579,  6581,  6583,  6585,  6587,  6589,
    6591,  6593,  6595,  6597,  6599,  6601,  6603,  6605,  6607,  6609,
    6611,  6613,  6615,  6617,  6619,  6621,  6623,  6625,  6627,  6629,
    6631,  6633,  6635,  6637,  6639,  6641,  6643,  6645,  6647,  6649,
    6651,  6653,  6655,  6657,  6659,  6661,  6663,  6665,  6667,  6669,
    6671,  6673,  6675,  6677,  6679,  6681,  6683,  6685,  6687,  6689,
    6691,  6693,  6695,  6697,  6699,  6701,  6703,  6705,  6707,  6709,
    6711,  6713,  6715,  6717,  6719,  6721,  6723,  6725,  6727,  6729,
    6731,  6733,  6735,  6737,  6739,  6741,  6743,  6745,  6747,  6749,
    6751,  6753,  6755,  6757,  6759,  6761,  6763,  6765,  6767,  6769,
    6771,  6773,  6775,  6777,  6779,  6781,  6783,  6785,  6787,  6789,
    6791,  6793,  6795,  6796,  6800,  6801,  6805,  6806,  6810,  6811,
    6815,  6816,  6820,  6823,  6824,  6827,  6828,  6831,  6832,  6837,
    6838,  6842,  6844,  6846,  6848,  6850,  6851,  6853,  6855,  6857,
    6858,  6861,  6864,  6867,  6871,  6875,  6880,  6887,  6890,  6894,
    6898,  6902,  6908,  6910,  6914,  6918,  6920,  6922,  6926,  6930,
    6932,  6936,  6939,  6942,  6945,  6948,  6951,  6953,  6955,  6960,
    6965,  6967,  6969,  6971,  6973,  6975,  6976,  6981,  6983,  6985,
    6987,  6991,  6995,  6997,  6999,  7002,  7005,  7008,  7009,  7013,
    7018,  7022,  7023,  7031,  7033,  7036,  7038,  7040,  7042,  7044,
    7046,  7048,  7049,  7055,  7057,  7059,  7061,  7063,  7065,  7069,
    7076,  7083,  7090,  7098,  7104,  7108,  7117,  7126,  7135,  7142,
    7143,  7145,  7147,  7150,  7151,  7153,  7155,  7159,  7160,  7164,
    7165,  7169,  7170,  7174,  7175,  7179,  7181,  7183,  7185,  7187,
    7189,  7191,  7193,  7195,  7197,  7199,  7201,  7204,  7207,  7209,
    7213,  7216,  7219,  7222,  7225,  7228,  7231,  7234,  7237,  7239,
    7241,  7244,  7245,  7247,  7251,  7253,  7256,  7259,  7262,  7264,
    7268,  7272,  7274,  7276,  7280,  7282,  7286,  7288,  7290,  7292,
    7294,  7299,  7305,  7310,  7317,  7319,  7320,  7324,  7328,  7330,
    7332,  7333,  7336,  7339,  7342,  7345,  7346,  7349,  7350,  7354,
    7357,  7359,  7362,  7365,  7368,  7371,  7374,  7375,  7379,  7380,
    7382,  7383,  7387,  7390,  7391,  7393,  7396,  7397,  7399,  7404,
    7409,  7415,  7418,  7422,  7423,  7425,  7426,  7431,  7432,  7434,
    7436,  7437,  7439,  7440,  7443,  7446,  7448,  7449,  7451,  7453,
    7456,  7460,  7463,  7464,  7471,  7475,  7476,  7477,  7478,  7480,
    7483,  7485,  7487,  7489,  7491,  7493,  7495,  7497,  7499,  7501,
    7504,  7507,  7511,  7513,  7515,  7517,  7519,  7521,  7523,  7525,
    7527,  7529,  7531,  7533,  7535,  7537,  7538,  7542,  7544,  7547,
    7549,  7552,  7556,  7560,  7564,  7565,  7569,  7573,  7574,  7582,
    7583,  7587,  7589,  7593,  7594,  7598,  7601,  7606,  7607,  7611,
    7616,  7621,  7622,  7623,  7624,  7641,  7650,  7658,  7659,  7660,
    7661,  7662,  7663,  7679,  7680,  7681,  7682,  7683,  7696,  7701,
    7706,  7710,  7715,  7719,  7722,  7724,  7728,  7734,  7736,  7738,
    7739,  7741,  7743,  7744,  7747,  7748,  7749,  7753,  7754,  7757,
    7763,  7767,  7771,  7775
};

/* YYRHS -- A `-1'-separated list of the rules' RHS.  */
static const yytype_int16 yyrhs[] =
{
     642,     0,    -1,   157,    -1,    -1,   645,   643,   637,   644,
      -1,   645,   157,    -1,    -1,   157,    -1,   646,    -1,  1515,
      -1,  1004,    -1,  1069,    -1,  1082,    -1,   697,    -1,   658,
      -1,  1083,    -1,  1061,    -1,  1521,    -1,   667,    -1,   647,
      -1,  1329,    -1,  1361,    -1,  1281,    -1,  1283,    -1,   651,
      -1,  1367,    -1,  1487,    -1,  1478,    -1,   656,    -1,  1293,
      -1,  1585,    -1,  1587,    -1,  1096,    -1,  1387,    -1,  1393,
      -1,  1470,    -1,  1088,    -1,   930,    -1,   841,    -1,  1103,
      -1,   649,    -1,  1383,    -1,  1524,    -1,  1091,    -1,  1064,
      -1,  1296,    -1,  1377,    -1,   732,    -1,  1485,    -1,  1522,
      -1,  1523,    -1,  1115,    -1,  1443,    -1,   725,    -1,  1347,
      -1,  1047,    -1,  1051,    -1,  1340,    -1,  1586,    -1,  1476,
      -1,  1321,    -1,  1392,    -1,  1577,    -1,   648,   401,  1437,
      -1,   124,    -1,   145,    -1,   401,  1437,   192,   650,    -1,
    1434,    -1,   638,  1439,    -1,    -1,   171,  1437,   652,   653,
      -1,    -1,   587,   654,    -1,   654,   633,   655,    -1,   655,
      -1,   638,  1439,    -1,    -1,   212,   657,  1439,    -1,    -1,
      58,   303,   665,   553,   659,   660,    -1,   661,    -1,   660,
     633,   661,    -1,   288,   161,  1434,    -1,   304,   161,  1434,
      -1,   291,   161,  1434,    -1,   292,   161,  1260,    -1,   286,
     161,  1260,    -1,   301,   161,  1260,    -1,   295,   161,  1434,
      -1,   294,   161,  1434,    -1,   296,   161,  1434,    -1,   297,
     161,  1434,    -1,   300,   161,  1434,    -1,   302,   161,  1260,
      -1,   298,   161,  1434,    -1,   299,   161,  1434,    -1,   305,
     161,  1422,    -1,   226,   161,   631,   662,   632,    -1,   664,
      -1,    -1,   663,    -1,   662,   633,   663,    -1,  1260,    -1,
     289,   161,  1434,    -1,   290,   161,  1262,    -1,   431,   161,
    1434,    -1,   432,   161,  1260,    -1,   287,   161,  1260,    -1,
      -1,   666,    -1,  1434,    -1,    -1,   103,   892,   536,   895,
    1430,   668,   829,    -1,    -1,   103,   981,   229,   895,  1437,
     985,   364,  1430,   669,   631,   998,   632,   986,    -1,    -1,
     103,   982,   229,   895,  1437,   984,   364,  1430,   670,   631,
     998,   632,   987,    -1,    -1,   103,   983,   229,   895,  1437,
     984,   364,  1430,   671,   631,   998,   632,   988,    -1,    -1,
     103,   111,   895,  1437,   672,   889,    -1,    -1,   103,   673,
    1543,    -1,   103,   583,   690,  1503,    -1,   103,   277,   205,
     792,    -1,   103,   533,   789,    -1,   103,   674,    -1,   474,
    1439,   189,   114,   612,  1439,   370,   631,   675,   632,    -1,
     676,    -1,   675,   633,   676,    -1,   583,  1434,    -1,   215,
    1434,    -1,   111,  1434,    -1,   380,  1434,    -1,   391,  1434,
      -1,   491,  1434,    -1,   398,  1260,    -1,    -1,  1132,   168,
     895,   691,   678,   364,   463,   679,   684,   681,   686,   144,
     687,    -1,    -1,   169,  1138,  1230,   680,   682,   683,    -1,
      23,  1138,    -1,    -1,   153,    -1,   138,   364,   486,    -1,
     138,    -1,    -1,   511,  1138,    -1,    -1,   156,  1138,    -1,
      -1,   685,    -1,   364,    86,   402,    -1,   364,    86,   353,
     402,    -1,    -1,    82,  1434,    -1,    -1,   688,   689,    -1,
     738,    -1,   740,    -1,   736,    -1,   757,    -1,   775,    -1,
     777,    -1,   772,    -1,   742,    -1,   744,    -1,   745,    -1,
     746,    -1,   747,    -1,   749,    -1,    -1,  1437,   639,  1437,
      -1,  1437,    -1,    -1,   692,   694,    -1,    -1,   693,   695,
      -1,    82,  1434,    -1,   255,   507,    -1,   355,   507,    -1,
      96,   507,    -1,   417,   507,   114,    -1,   330,   507,   114,
      -1,   696,    -1,   694,    -1,   136,    -1,  1144,   136,    -1,
     507,   467,   129,    -1,   507,   467,   242,    -1,    -1,    51,
     691,   698,   699,    -1,    -1,   631,   700,   632,    -1,    -1,
     701,    -1,   701,   633,  1138,    -1,  1138,    -1,    -1,   703,
      -1,   703,   633,   705,    -1,   705,    -1,    -1,  1437,   704,
     953,    -1,    -1,   707,    -1,   707,   633,   708,    -1,   708,
      -1,   709,   704,  1437,   953,    -1,    -1,   243,    -1,   379,
      -1,   234,    -1,    -1,   710,   735,   637,    -1,   735,   637,
      -1,   711,   735,   637,    -1,    -1,   712,   713,   637,    -1,
      -1,   127,   733,   714,   953,   734,    -1,   127,  1437,    89,
     190,   721,    -1,    -1,   127,   718,   208,   190,   715,   719,
     735,    -1,   127,  1437,   108,   190,   716,    -1,    -1,   717,
    1115,    -1,   173,    -1,    98,    -1,   720,    -1,   719,   633,
     720,    -1,   724,    -1,  1260,    -1,   722,    -1,   499,   723,
    1435,    -1,    -1,   592,    -1,   721,    -1,  1437,    -1,   500,
      -1,  1144,   191,    -1,   498,    -1,   483,   726,   728,    -1,
    1437,    -1,   722,    -1,    -1,   726,    -1,    -1,   476,   729,
      -1,   731,   161,   730,    -1,   729,   633,   731,   161,   730,
      -1,  1421,    -1,  1169,    -1,  1426,    -1,    66,    -1,   520,
      -1,    93,    -1,    95,    -1,    94,    -1,    56,    -1,   464,
      -1,   538,    -1,    81,    -1,   109,    -1,   321,    -1,   338,
      -1,   446,   727,   728,    -1,  1437,    -1,   733,   633,  1437,
      -1,    -1,   128,  1138,    -1,   738,    -1,   740,    -1,   736,
      -1,   757,    -1,   775,    -1,   777,    -1,   772,    -1,   742,
      -1,   744,    -1,   745,    -1,   746,    -1,   747,    -1,   749,
      -1,    -1,   224,   737,   752,   155,   224,    -1,    -1,   739,
     646,    -1,    -1,   452,   741,  1138,    -1,    -1,   743,   781,
      -1,   261,  1438,    -1,   249,  1438,    -1,   368,  1437,    -1,
      -1,   181,   750,  1437,   240,   748,   751,    -1,    69,  1437,
      -1,    -1,   349,   192,    -1,   192,    -1,  1437,    -1,   751,
     633,  1437,    -1,    -1,    -1,    -1,   753,  1138,   545,   754,
     711,   755,   756,    -1,    -1,   152,   752,    -1,   151,   711,
      -1,   758,    -1,   761,    -1,    -1,    -1,    54,   759,  1138,
     760,   763,   771,   155,    54,    -1,    -1,    54,   762,   764,
     771,   155,    54,    -1,   765,    -1,   763,   765,    -1,   768,
      -1,   764,   768,    -1,    -1,    -1,   605,   766,  1138,   767,
     545,   711,    -1,    -1,    -1,   605,   769,  1138,   770,   545,
     711,    -1,    -1,   151,   711,    -1,    -1,  1438,   640,   773,
     781,   774,    -1,    -1,  1438,    -1,    -1,  1438,   640,   776,
     779,   774,    -1,    -1,   778,   779,    -1,    -1,    32,   780,
     712,   710,   155,    -1,   283,   711,   155,   283,    -1,    -1,
      -1,   607,   782,  1138,   144,   783,   711,   155,   607,    -1,
      -1,   441,   711,   579,   784,  1138,   155,   441,    -1,    31,
      -1,     8,    -1,   236,    -1,   580,    -1,   132,    -1,   814,
     816,    -1,   814,    58,   811,   795,    -1,   814,     6,   811,
     790,   799,    -1,    -1,   586,   277,   205,  1437,    -1,   814,
       6,   811,   802,    -1,   814,   145,   811,   802,    -1,   815,
     794,   805,    -1,   815,   794,   808,    -1,     6,   812,    -1,
       6,   813,    -1,    -1,   796,   797,    -1,   798,    -1,   797,
     798,    -1,   797,   633,   798,    -1,   817,    -1,   818,    -1,
     819,    -1,   800,    -1,   801,    -1,   800,   801,    -1,   800,
     633,   801,    -1,   817,    -1,   818,    -1,   819,    -1,   820,
      -1,   823,    -1,   825,    -1,   827,    -1,   824,    -1,   803,
      -1,   804,    -1,   803,   804,    -1,   803,   633,   804,    -1,
     817,    -1,   818,    -1,   819,    -1,   825,    -1,   827,    -1,
     806,    -1,   807,    -1,   806,   807,    -1,   806,   633,   807,
      -1,   817,    -1,   821,    -1,   822,    -1,   823,    -1,   825,
      -1,   827,    -1,   824,    -1,   809,    -1,   810,    -1,   809,
     810,    -1,   809,   633,   810,    -1,   817,    -1,   825,    -1,
     827,    -1,   113,  1434,    -1,   569,  1434,    -1,   424,  1434,
      -1,  1437,    -1,  1437,    -1,   418,    -1,   420,    -1,   353,
       4,    -1,   232,  1313,   828,    -1,    25,  1313,   828,    -1,
     310,  1313,   828,    -1,   176,  1313,   828,    -1,   570,  1313,
     828,    -1,   425,  1313,   828,    -1,   350,  1313,  1261,    -1,
      82,  1313,  1434,    -1,  1354,   159,  1313,   903,    -1,    -1,
     827,    -1,   602,    -1,   356,    -1,  1261,    -1,   221,    -1,
      -1,   631,   909,   632,   830,   896,   836,   833,    -1,   896,
     836,   833,    -1,    -1,   631,   885,   632,   831,  1528,    -1,
     832,    -1,   266,  1430,    -1,   631,   266,  1430,   632,    -1,
      -1,    -1,  1401,   888,   885,   834,  1525,    -1,    -1,  1401,
     888,   631,   885,   632,   835,  1528,    -1,   837,    -1,    -1,
     838,    -1,    -1,   390,   840,   839,   843,    -1,    -1,    -1,
     390,   842,   843,    -1,    48,   844,   853,   854,   861,    -1,
     846,   253,   631,   847,   632,    -1,    -1,   846,   210,   845,
     851,    -1,   416,   851,    -1,   416,   850,    -1,   271,   851,
      -1,   271,   850,    -1,    -1,   268,    -1,    -1,   848,    -1,
     849,    -1,   848,   633,   849,    -1,  1437,    -1,    74,   631,
     847,   632,    -1,   631,  1132,   859,  1133,   632,    -1,   631,
    1132,   859,  1133,   632,    -1,    -1,   389,  1261,    -1,    -1,
      -1,   524,    48,   846,   210,   852,   855,   860,    -1,    -1,
     524,    48,   846,   253,   631,   857,   632,   856,   860,    -1,
     858,    -1,   857,   633,   858,    -1,  1437,    -1,  1141,    -1,
      -1,   523,  1261,    -1,    -1,   631,   862,   632,    -1,   863,
      -1,   862,   633,   863,    -1,    -1,   390,   864,   865,   866,
     882,   877,    -1,  1437,    -1,    -1,    -1,   591,   263,   544,
     867,   869,    -1,    -1,   591,   243,   868,   870,    -1,   314,
      -1,   872,    -1,   872,    -1,   631,   871,   632,    -1,   872,
      -1,   871,   633,   872,    -1,    -1,    -1,   631,   873,   875,
     874,   632,    -1,   876,    -1,   875,   633,   876,    -1,   314,
      -1,  1141,    -1,    -1,   631,   878,   632,    -1,   879,    -1,
     878,   633,   879,    -1,    -1,   524,   880,   881,   882,    -1,
    1439,    -1,    -1,   883,    -1,   883,   884,    -1,   884,    -1,
     533,  1313,  1439,    -1,  1354,   159,  1313,   903,    -1,    90,
    1313,  1434,    -1,   350,  1313,  1261,    -1,   309,  1313,  1263,
      -1,   327,  1313,  1263,    -1,   114,   137,  1313,  1434,    -1,
     229,   137,  1313,  1434,    -1,    82,  1313,  1434,    -1,    -1,
      -1,   468,   886,  1126,  1130,   887,   907,    -1,    -1,    19,
      -1,    -1,   890,    -1,   891,    -1,   890,   891,    -1,   902,
      -1,   901,    -1,    -1,   893,    -1,   894,    -1,   894,   893,
      -1,   539,    -1,    -1,   224,  1144,   172,    -1,    -1,   898,
      -1,   899,    -1,   899,   897,    -1,   899,    -1,   899,   898,
      -1,   899,   633,   898,    -1,   159,  1313,   903,    -1,   309,
    1313,  1262,    -1,   327,  1313,  1262,    -1,    28,  1313,  1260,
      -1,   391,  1313,  1434,    -1,    82,  1313,  1434,    -1,    26,
    1313,  1262,    -1,   381,  1313,  1260,    -1,   381,  1313,   128,
      -1,    63,  1313,  1260,    -1,   537,  1313,  1260,    -1,   383,
    1313,  1266,    -1,   131,  1313,  1260,    -1,   459,  1313,   905,
      -1,    -1,   574,  1313,   900,   631,  1375,   632,    -1,   901,
      -1,   902,    -1,   237,  1313,   906,    -1,   114,   137,  1313,
    1434,    -1,   229,   137,  1313,  1434,    -1,   533,  1437,    -1,
     517,   140,    -1,   517,   319,    -1,    90,  1313,  1434,    -1,
     252,  1313,  1260,    -1,   556,  1313,  1266,    -1,  1433,  1312,
    1434,    -1,  1433,  1312,  1437,    -1,  1433,  1312,  1263,    -1,
    1433,  1312,   128,    -1,   964,   955,  1313,   957,    -1,   964,
      72,  1313,   963,    -1,  1439,    -1,  1439,    -1,   128,    -1,
     184,    -1,   149,    -1,    87,    -1,   426,    -1,    85,    -1,
     382,    -1,   355,    -1,   183,    -1,   256,    -1,  1253,    -1,
    1125,  1129,    -1,   519,    -1,   421,    -1,   126,    -1,   241,
      -1,   910,    -1,   911,    -1,   910,   633,   911,    -1,   912,
      -1,   913,    -1,   922,   918,    -1,   922,   970,    -1,    -1,
     976,  1001,   985,   631,   998,   632,   914,   986,    -1,    -1,
     982,   979,  1001,   984,   631,   998,   632,   915,   987,    -1,
      -1,   983,   979,  1001,   984,   631,   998,   632,   916,   988,
      -1,    -1,   920,   977,  1000,   985,   631,   998,   632,   917,
     986,    -1,   920,   189,   253,  1001,   631,   998,   632,   970,
      -1,   920,   919,    -1,    -1,   919,    -1,    64,   631,  1138,
     632,    -1,    -1,   921,    -1,    92,  1000,    -1,    -1,  1429,
     923,   924,    -1,   932,   950,    -1,   932,   925,    19,   631,
     931,   632,   926,   927,    -1,    -1,   198,    14,    -1,    -1,
     601,    -1,   392,    -1,    -1,   928,    -1,   928,   929,    -1,
     929,    -1,   575,    -1,   575,   253,    -1,    82,  1434,    -1,
     386,   631,   931,   632,    -1,  1132,  1138,  1133,    -1,   940,
     948,   944,    -1,   941,   949,   944,    -1,   186,   942,   944,
      -1,    40,    -1,    40,   947,    -1,    45,    -1,    44,    -1,
     936,   947,   967,    -1,   936,   967,    -1,   937,   947,   968,
      -1,   937,   968,    -1,    35,   947,    -1,    35,    -1,   938,
     947,   967,    -1,   939,   947,   968,    -1,   593,   947,    -1,
     619,   948,   944,    -1,   118,    -1,   549,   948,    -1,   546,
     948,    -1,   115,   948,    -1,   550,    -1,    42,   948,    -1,
     935,    -1,   315,    -1,   279,    -1,   282,   593,    -1,   282,
     938,   967,    -1,   552,   967,    -1,   543,   948,   967,    -1,
     317,   967,    -1,   280,   967,    -1,   126,   942,   944,    -1,
     360,   942,   944,    -1,   184,   942,   944,    -1,    -1,   160,
     933,   631,  1003,   632,   967,    -1,    -1,   476,   934,   631,
    1003,   632,   967,    -1,   282,   967,    -1,   472,    -1,   200,
      -1,   199,    -1,   396,    -1,   335,    -1,   270,    -1,   334,
      -1,   397,    -1,   336,    -1,    61,    -1,   344,    -1,   341,
      61,    -1,   936,   597,    -1,   594,    -1,   341,   594,    -1,
     361,    -1,   344,   594,    -1,   341,    61,   597,    -1,   344,
     597,    -1,   241,    -1,   551,    -1,   489,    -1,   316,    -1,
      34,    -1,   421,    -1,   143,    -1,   143,   400,    -1,    -1,
     947,    -1,   943,    -1,   631,   359,   633,   359,   632,    -1,
      -1,   945,    -1,   945,   946,    -1,   946,    -1,   484,    -1,
     578,    -1,   620,    -1,   631,   281,   632,    -1,   631,   565,
     632,    -1,   631,   125,   632,    -1,   631,   359,   632,    -1,
      -1,   947,    -1,    -1,   943,    -1,    -1,   951,    -1,   951,
     952,    -1,   952,    -1,   358,    -1,  1144,   358,    -1,   128,
     954,    -1,   364,   580,   354,  1135,    -1,    26,    -1,   472,
     128,   592,    -1,   969,   253,    -1,   575,    -1,   575,   253,
      -1,    82,  1434,    -1,    72,   961,    -1,  1433,  1312,  1434,
      -1,  1433,  1312,  1437,    -1,  1433,  1312,  1263,    -1,  1433,
    1312,   128,    -1,   932,   962,    -1,   354,  1135,    -1,  1420,
      -1,    61,   476,    -1,    60,    -1,  1439,    -1,    35,    -1,
     956,    -1,   128,    -1,    -1,   955,   957,    -1,  1439,    -1,
      35,    -1,   959,    -1,   128,    -1,  1439,    -1,    -1,    72,
     963,    -1,   961,    -1,   128,    -1,    -1,   128,    -1,    21,
      -1,    35,    21,    -1,    21,    35,    -1,   572,    -1,   572,
      35,    -1,    35,   572,    -1,    -1,   965,    -1,   966,    -1,
      49,    -1,   955,   956,   968,    -1,    35,    -1,    35,   955,
     956,    -1,    -1,    35,    -1,    -1,   404,    -1,   427,  1430,
     971,   973,   974,    -1,    -1,   631,   972,   632,    -1,   972,
     633,  1437,    -1,  1437,    -1,    -1,   306,   193,    -1,   306,
     387,    -1,   306,   485,    -1,    -1,   364,   580,   975,    -1,
     364,   132,   975,    -1,   364,   580,   975,   364,   132,   975,
      -1,   364,   132,   975,   364,   580,   975,    -1,   449,    -1,
      52,    -1,   476,   358,    -1,   355,     5,    -1,   476,   128,
      -1,   978,    -1,   404,   253,    -1,   575,   979,    -1,   253,
      -1,   229,    -1,    -1,   978,    -1,   251,    -1,   229,    -1,
     228,    -1,    -1,   575,    -1,   194,    -1,   496,    -1,    -1,
     984,    -1,   984,   992,    -1,    -1,   989,    -1,    -1,   991,
      -1,    -1,   990,    -1,   994,    -1,   989,   994,    -1,   995,
      -1,   990,   995,    -1,   996,    -1,   991,   996,    -1,   587,
     997,    -1,   563,   997,    -1,   252,  1313,  1260,    -1,    82,
    1434,    -1,  1433,  1312,  1434,    -1,  1433,  1312,  1437,    -1,
    1433,  1312,  1263,    -1,  1433,  1312,   128,    -1,   993,    -1,
     992,    -1,   993,    -1,   993,    -1,   608,   385,  1433,    -1,
      47,    -1,   461,    -1,   210,    -1,   998,   633,   999,  1251,
      -1,   999,  1251,    -1,  1437,    -1,  1437,   631,   359,   632,
      -1,    -1,  1429,    -1,   895,  1000,    -1,    -1,   639,  1437,
      -1,  1418,    -1,  1003,   633,  1418,    -1,    -1,    13,  1039,
     536,  1430,  1005,  1016,    -1,    -1,    13,   111,  1015,  1006,
     890,    -1,    13,   111,  1437,   581,   114,   137,   340,    -1,
      -1,    13,   406,   691,  1007,   692,    -1,    -1,    13,   195,
     691,  1008,   692,    -1,    -1,    13,  1551,  1546,  1009,  1553,
      -1,    -1,    13,  1546,  1010,  1553,    -1,    -1,    13,  1546,
     168,   691,  1011,  1012,  1013,   681,   686,  1014,    -1,    13,
     533,   791,    -1,    13,   277,   205,   793,    -1,    13,   533,
     788,    -1,    13,   533,   787,    -1,    13,   474,  1439,   370,
     631,   675,   632,    -1,    -1,   364,   463,   679,    -1,   685,
      -1,   364,   463,   679,   685,    -1,    -1,   437,   553,   691,
      -1,    -1,   144,   687,    -1,    -1,  1437,    -1,    -1,   139,
     533,    -1,   227,   533,    -1,  1031,   837,    -1,  1031,  1020,
      -1,  1020,    -1,   838,    -1,  1022,    -1,   145,   390,  1291,
    1029,    -1,   422,   390,  1090,  1021,    -1,    -1,   369,   390,
    1090,  1021,  1017,  1090,    -1,    15,   390,  1090,  1021,    -1,
      -1,    64,   390,  1021,  1018,  1085,    -1,    -1,   439,   390,
    1090,  1021,  1019,  1066,    -1,    70,   390,  1090,  1261,    -1,
     561,   390,  1021,    -1,  1025,    -1,   436,   388,    -1,    12,
      -1,  1029,    -1,    -1,     6,   390,   895,  1090,  1023,  1024,
      -1,    -1,   631,   862,   632,    -1,   389,  1261,    -1,    -1,
     438,   390,  1090,  1026,  1027,    -1,    -1,    -1,  1029,  1028,
     240,   631,   862,   632,    -1,  1030,    -1,  1029,   633,  1030,
      -1,  1437,    -1,  1033,    -1,  1031,   633,  1033,    -1,     6,
    1037,   895,    -1,  1032,   912,  1045,    -1,     6,   913,    -1,
    1032,   631,   909,   632,    -1,    -1,    58,  1037,  1291,  1429,
    1034,   922,  1045,    -1,    -1,    -1,   331,  1037,  1291,  1429,
    1035,   924,  1036,  1045,    -1,   145,  1037,  1291,  1429,  1044,
      -1,   145,   189,   253,  1291,  1000,    -1,   145,   404,   253,
      -1,   145,   978,  1291,  1429,    -1,   138,   251,    -1,   153,
     251,    -1,    13,  1037,  1429,   476,   128,  1420,    -1,    13,
    1037,  1429,   145,   128,    -1,   437,  1046,  1430,    -1,   100,
     553,   955,   957,   962,    -1,   897,    -1,   188,    -1,  1244,
      -1,    -1,    80,    -1,    -1,   225,    -1,    -1,  1040,  1041,
      -1,    -1,  1042,    -1,  1042,  1043,    -1,  1043,    -1,   225,
      -1,   367,    -1,    -1,   449,    -1,    52,    -1,    -1,     8,
    1437,    -1,   183,    -1,    -1,   553,    -1,   161,    -1,    19,
      -1,    -1,   512,   486,   665,  1055,  1048,  1059,    -1,    -1,
     512,    12,   487,  1055,  1049,    -1,   516,   486,   665,  1055,
      -1,   516,    12,   487,  1055,    -1,    -1,   486,   665,   512,
    1055,  1050,  1059,    -1,   486,   665,   516,  1055,    -1,   512,
     555,  1052,    -1,    -1,  1053,    -1,  1054,    -1,  1053,   633,
    1054,    -1,   608,    91,   490,    -1,   419,   366,    -1,   419,
     613,    -1,    -1,  1056,  1057,    -1,  1058,    -1,  1057,   633,
    1058,    -1,    -1,   508,    -1,   433,    -1,    -1,   579,  1060,
      -1,   664,    -1,  1060,   633,   664,    -1,    -1,    63,  1472,
    1062,  1287,  1063,    -1,    -1,   415,    -1,   175,    -1,    -1,
     439,  1090,  1472,  1065,  1287,  1066,    -1,    -1,  1067,    -1,
    1068,    -1,  1068,  1067,    -1,   415,    -1,   175,    -1,   585,
      -1,    -1,    15,  1090,  1472,  1070,  1071,    -1,  1072,    -1,
    1071,   633,  1072,    -1,  1288,  1073,    -1,    -1,   392,   190,
    1074,    -1,    12,    -1,    74,  1075,   228,  1077,    -1,    12,
      -1,    -1,   631,  1076,  1079,   632,    -1,    12,    -1,    -1,
     631,  1078,  1080,   632,    -1,    -1,  1437,    -1,  1079,   633,
    1437,    -1,    -1,  1081,    -1,  1080,   633,  1081,    -1,  1437,
      -1,   404,    -1,    36,  1434,    -1,    -1,    64,  1472,  1084,
    1287,  1085,    -1,    -1,  1086,    -1,  1087,    -1,  1087,  1086,
      -1,   415,    -1,   179,    -1,   318,    -1,   175,    -1,    59,
      -1,   190,   581,    -1,    -1,   369,  1090,  1472,  1089,  1287,
      -1,    -1,   357,    -1,   273,    -1,    -1,   437,  1472,  1092,
    1094,    -1,   437,   583,   690,  1093,    -1,  1440,   553,  1440,
      -1,  1093,   633,  1440,   553,  1440,    -1,  1095,    -1,  1094,
     633,  1095,    -1,  1430,   553,  1430,    -1,    -1,    50,   229,
    1097,  1098,   243,  1102,    -1,  1099,    -1,  1101,    -1,  1100,
      -1,  1099,   633,  1100,    -1,  1430,  1111,    -1,  1430,  1109,
    1111,    -1,  1437,    -1,   128,    -1,    -1,   272,   229,   240,
      50,  1104,  1105,    -1,  1108,    -1,  1106,    -1,  1107,    -1,
    1106,   633,  1107,    -1,  1430,  1111,  1114,    -1,  1430,  1109,
    1111,  1114,    -1,    -1,   390,   840,  1110,   631,  1021,   632,
      -1,    -1,  1112,  1113,    -1,    -1,   978,   631,  1226,   632,
      -1,    -1,   225,   260,    -1,  1116,    -1,   468,  1119,    -1,
     631,  1117,   632,  1528,    -1,   468,  1121,    -1,   631,  1117,
     632,    -1,   468,  1205,    -1,   631,  1118,   632,    -1,    -1,
    1121,  1120,  1525,    -1,    -1,    -1,  1122,  1126,  1130,  1123,
    1124,  1129,    -1,  1247,  1253,    -1,  1276,    -1,  1125,    -1,
    1276,  1125,    -1,  1125,  1276,    -1,   192,  1187,  1236,  1241,
    1238,  1247,  1253,  1267,    -1,   192,   146,  1236,  1253,    -1,
      -1,  1127,    -1,  1127,  1128,    -1,  1128,    -1,  1542,    -1,
     505,    -1,   503,    -1,    -1,   190,   580,    -1,   276,   243,
     478,   329,    -1,  1130,   633,  1131,    -1,  1131,    -1,   626,
      -1,  1132,  1424,  1133,    -1,  1132,  1138,  1133,  1134,    -1,
      -1,    -1,    -1,    19,  1437,    -1,    19,  1434,    -1,  1437,
      -1,  1434,    -1,    -1,   631,   632,    -1,   631,  1261,   632,
      -1,    -1,   631,   632,    -1,   631,  1261,   632,    -1,    -1,
     631,   632,    -1,  1138,  1142,  1138,    -1,  1138,   617,  1138,
      -1,  1138,  1143,  1138,    -1,   353,  1138,    -1,  1139,   246,
     560,    -1,  1139,   246,  1144,   560,    -1,  1139,   246,   178,
      -1,  1139,   246,  1144,   178,    -1,  1139,   246,   576,    -1,
    1139,   246,  1144,   576,    -1,  1139,    -1,  1139,   246,   358,
      -1,  1139,   246,  1144,   358,    -1,  1139,   162,  1140,    -1,
    1139,  1146,  1140,    -1,  1139,  1146,  1147,   631,  1537,   632,
      -1,  1140,    -1,  1141,   243,   631,  1537,   632,    -1,  1141,
    1144,   243,   631,  1537,   632,    -1,  1141,   243,   631,  1138,
     632,    -1,  1141,   243,   631,  1138,   633,  1180,   632,    -1,
    1141,  1144,   243,   631,  1138,   632,    -1,  1141,  1144,   243,
     631,  1138,   633,  1180,   632,    -1,  1141,    33,  1141,    17,
    1140,    -1,  1141,  1144,    33,  1141,    17,  1140,    -1,  1141,
     494,   266,  1141,    -1,  1141,   266,  1152,  1240,    -1,  1141,
    1144,   266,  1152,  1240,    -1,  1141,   428,  1141,    -1,  1141,
    1144,   428,  1141,    -1,  1141,    -1,  1141,   622,  1141,    -1,
    1141,   623,  1141,    -1,  1141,   479,  1141,    -1,  1141,   480,
    1141,    -1,  1141,   625,  1141,    -1,  1141,   624,  1141,    -1,
    1141,   625,   239,  1138,  1230,    -1,  1141,   624,   239,  1138,
    1230,    -1,  1141,   626,  1141,    -1,  1141,   627,  1141,    -1,
    1141,   628,  1141,    -1,  1141,   142,  1141,    -1,  1141,   332,
    1141,    -1,  1141,   629,  1141,    -1,  1152,    -1,   376,    -1,
     373,    -1,    17,    -1,    16,    -1,   353,    -1,   352,    -1,
     634,    -1,   352,    -1,   161,    -1,   196,    -1,   207,    -1,
     258,    -1,   285,    -1,   346,    -1,    12,    -1,    18,    -1,
      -1,    19,  1149,    -1,   241,    -1,   578,   241,    -1,   143,
      -1,   421,    -1,   186,    -1,   126,   942,    -1,   936,   967,
      -1,   937,    -1,   118,    -1,   549,   948,    -1,   115,   948,
      -1,  1138,   633,  1138,  1148,    -1,  1150,    -1,  1151,   633,
    1150,    -1,  1426,    -1,  1153,    -1,  1154,    -1,  1157,    -1,
    1155,    -1,  1152,    72,  1439,    -1,  1421,    -1,  1419,    -1,
    1169,    -1,  1165,    -1,  1152,   375,  1152,    -1,   625,  1152,
      -1,   624,  1152,    -1,   630,  1152,    -1,  1145,  1152,    -1,
     631,  1537,   632,    -1,   631,  1138,   632,    -1,   631,  1138,
     633,  1180,   632,    -1,   460,   631,  1138,   633,  1180,   632,
      -1,   172,   631,  1537,   632,    -1,   635,  1437,  1138,   636,
      -1,   306,  1181,     9,   631,  1141,  1159,   632,    -1,    35,
    1152,    -1,    55,   631,  1138,    19,  1177,   632,    -1,    54,
    1183,  1185,  1184,   155,    -1,   100,   631,  1138,   633,  1177,
     632,    -1,   100,   631,  1138,   587,   956,   632,    -1,   128,
     631,  1426,   632,    -1,   591,   631,  1427,   632,    -1,   239,
    1138,  1230,   625,  1138,    -1,    61,   631,  1180,   632,    -1,
      61,   631,  1180,   587,   956,   632,    -1,   107,  1137,    -1,
     118,   631,  1138,   632,    -1,   123,   631,  1138,   632,    -1,
     220,   631,  1138,   632,    -1,   236,   631,  1138,   633,  1138,
     633,  1138,   633,  1138,   632,    -1,   239,   631,  1138,   633,
    1138,   632,    -1,   239,   631,  1138,   633,  1138,   633,  1180,
     632,    -1,   262,   631,  1138,   633,  1138,   632,    -1,   326,
     631,  1138,   632,    -1,   333,   631,  1138,   632,    -1,   454,
     631,  1138,   633,  1138,   632,    -1,   466,   631,  1138,   632,
      -1,   549,   631,  1138,   632,    -1,   546,   631,  1138,   632,
      -1,   546,   631,  1138,   633,  1138,   632,    -1,   559,   631,
    1138,   632,    -1,   559,   631,   259,  1138,   192,  1138,   632,
      -1,   559,   631,   554,  1138,   192,  1138,   632,    -1,   559,
     631,    46,  1138,   192,  1138,   632,    -1,   559,   631,   259,
     192,  1138,   632,    -1,   559,   631,   554,   192,  1138,   632,
      -1,   559,   631,    46,   192,  1138,   632,    -1,   559,   631,
    1138,   192,  1138,   632,    -1,   583,   631,   632,    -1,   619,
     631,  1138,   632,    -1,     7,   631,  1138,   633,  1138,   632,
      -1,     7,   631,  1138,   633,   239,  1138,  1230,   632,    -1,
     106,  1137,    -1,   110,  1136,    -1,   116,   631,  1138,   633,
     239,  1138,  1230,   632,    -1,   117,   631,  1138,   633,   239,
    1138,  1230,   632,    -1,   177,   631,  1230,   192,  1138,   632,
      -1,   201,   631,  1232,   633,  1138,   632,    -1,   354,  1136,
      -1,   399,   631,  1141,   243,  1138,   632,    -1,   521,   631,
    1138,   633,  1138,   632,    -1,   521,   631,  1138,   633,   239,
    1138,  1230,   632,    -1,   525,   631,  1138,   633,  1138,   633,
    1138,   632,    -1,   525,   631,  1138,   633,  1138,   632,    -1,
     525,   631,  1138,   192,  1138,   190,  1138,   632,    -1,   525,
     631,  1138,   192,  1138,   632,    -1,   531,  1136,    -1,   547,
     631,  1231,   633,  1138,   633,  1138,   632,    -1,   548,   631,
    1231,   633,  1138,   633,  1138,   632,    -1,   588,  1137,    -1,
     590,  1136,    -1,   589,  1136,    -1,    75,   631,  1138,   633,
    1151,   632,    -1,    78,   631,  1138,   633,  1180,   632,    -1,
      76,   631,  1138,   632,    -1,    77,   631,  1151,   632,    -1,
      79,   631,  1138,   633,  1138,    19,  1177,   632,    -1,    21,
     631,  1138,   632,    -1,    60,   631,  1138,   632,    -1,    70,
     631,  1180,   632,    -1,    73,   631,  1138,   632,    -1,   111,
     631,   632,    -1,   224,   631,  1138,   633,  1138,   633,  1138,
     632,    -1,   257,   631,  1180,   632,    -1,   322,   631,  1138,
     632,    -1,   332,   631,  1138,   633,  1138,   632,    -1,   363,
     631,  1138,   632,    -1,   391,   631,  1138,   632,    -1,   413,
     631,  1138,   632,    -1,   441,   631,  1138,   633,  1138,   632,
      -1,   442,   631,  1138,   633,  1138,   633,  1138,   632,    -1,
     561,   631,  1138,   633,  1138,   632,    -1,   604,   631,  1138,
     632,    -1,   604,   631,  1138,   633,  1138,   632,    -1,  1156,
      -1,    96,   631,  1138,   633,  1138,   632,    -1,   199,   631,
    1180,   632,    -1,   270,   631,  1180,   632,    -1,   334,   631,
    1180,   632,    -1,   335,   631,  1180,   632,    -1,   336,   631,
    1180,   632,    -1,   396,   631,  1138,   633,  1138,   632,    -1,
     397,   631,  1180,   632,    -1,    -1,  1433,   631,  1158,  1162,
     632,    -1,  1437,   639,  1437,   631,  1179,   632,    -1,  1160,
    1161,    -1,   243,    44,   329,    -1,    -1,   243,   342,   255,
     329,    -1,    -1,   608,   414,   174,    -1,    -1,  1163,    -1,
    1164,    -1,  1163,   633,  1164,    -1,  1132,  1138,  1133,  1134,
      -1,    29,   631,  1175,   632,    -1,    29,   631,   141,  1175,
     632,    -1,    38,   631,  1175,   632,    -1,    39,   631,  1175,
     632,    -1,    41,   631,  1175,   632,    -1,   101,   631,  1235,
     626,   632,    -1,   101,   631,  1175,   632,    -1,    -1,    -1,
     101,   631,   141,  1166,  1180,  1167,   632,    -1,   328,   631,
    1175,   632,    -1,   328,   631,   141,  1175,   632,    -1,   311,
     631,  1175,   632,    -1,   311,   631,   141,  1175,   632,    -1,
     515,   631,  1175,   632,    -1,   596,   631,  1175,   632,    -1,
     514,   631,  1175,   632,    -1,   598,   631,  1175,   632,    -1,
     526,   631,  1175,   632,    -1,   526,   631,   141,  1175,   632,
      -1,    -1,   206,   631,  1172,  1168,  1180,  1174,  1173,   632,
      -1,    -1,   638,  1170,  1171,    -1,  1439,   477,  1138,    -1,
    1439,    -1,   638,  1459,  1439,  1002,    -1,    -1,   141,    -1,
      -1,   470,  1418,    -1,    -1,  1248,    -1,    -1,  1235,  1176,
    1138,    -1,    35,   948,    -1,    61,   948,   967,    -1,   344,
     948,    -1,   241,    -1,   484,    -1,   484,   241,    -1,   578,
      -1,   578,   241,    -1,   118,    -1,   549,   948,    -1,   115,
     948,    -1,   126,   942,    -1,    -1,   143,  1178,   949,    -1,
      -1,  1180,    -1,  1138,    -1,  1180,   633,  1138,    -1,  1182,
      -1,   631,  1182,   632,    -1,  1426,    -1,  1182,   633,  1426,
      -1,    -1,  1138,    -1,    -1,   151,  1138,    -1,   605,  1138,
     545,  1138,    -1,  1185,   605,  1138,   545,  1138,    -1,  1199,
      -1,  1190,    -1,  1189,    -1,  1186,    -1,   635,  1437,  1186,
     636,    -1,  1188,    -1,  1189,   633,  1188,    -1,  1186,  1198,
    1186,    -1,    -1,  1186,  1198,  1186,   364,  1191,  1138,    -1,
      -1,  1186,  1198,  1186,   587,  1192,   631,  1229,   632,    -1,
    1186,   342,  1197,  1199,    -1,    -1,  1186,   262,  1215,   250,
    1186,   364,  1193,  1138,    -1,    -1,  1186,   262,  1215,   250,
    1199,  1194,   587,   631,  1229,   632,    -1,  1186,   342,   262,
    1215,   250,  1199,    -1,    -1,  1186,   454,  1215,   250,  1186,
     364,  1195,  1138,    -1,    -1,  1186,   454,  1215,   250,  1199,
    1196,   587,   631,  1229,   632,    -1,  1186,   342,   454,  1215,
     250,  1199,    -1,   250,    -1,   233,   250,    -1,   518,    -1,
    1197,    -1,   104,   250,    -1,    -1,  1200,  1430,  1234,  1224,
      -1,  1214,  1213,  1210,    -1,   631,  1213,  1201,   632,  1234,
      -1,  1208,  1529,    -1,    -1,    -1,  1201,   574,  1533,  1202,
    1534,  1203,  1529,    -1,  1205,    -1,    -1,    -1,  1206,  1540,
    1130,  1207,   907,  1129,    -1,    -1,  1213,  1209,  1189,    -1,
      -1,    -1,  1211,  1126,  1130,  1212,   907,    -1,    -1,   468,
      -1,    -1,   377,    -1,    -1,   190,   250,    -1,   190,   374,
      48,    -1,   190,   205,    48,    -1,   188,    -1,   225,    -1,
      -1,  1217,   978,  1216,  1219,   631,  1228,   632,    -1,    -1,
     586,   978,  1216,  1220,   631,  1226,   632,    -1,  1218,    -1,
    1221,  1218,    -1,    -1,    -1,  1223,  1221,    -1,    -1,  1225,
    1222,    -1,    -1,  1228,    -1,  1437,    -1,   404,    -1,  1227,
      -1,  1228,   633,  1227,    -1,  1437,    -1,  1229,   633,  1437,
      -1,  1231,    -1,   119,    -1,   120,    -1,   121,    -1,   122,
      -1,   217,    -1,   218,    -1,   219,    -1,   324,    -1,   325,
      -1,   465,    -1,   618,    -1,   123,    -1,   604,    -1,   220,
      -1,   326,    -1,   333,    -1,   413,    -1,   466,    -1,   322,
      -1,   619,    -1,   118,    -1,   549,    -1,   115,    -1,   546,
      -1,    -1,    19,    -1,   161,    -1,    -1,  1233,  1437,    -1,
      -1,    12,    -1,    -1,    -1,   606,  1237,  1138,    -1,    -1,
      -1,   211,  1239,  1138,    -1,   166,  1152,    -1,    -1,    -1,
     205,    48,  1242,  1243,    -1,  1242,   633,  1425,  1251,    -1,
    1425,  1251,    -1,    -1,   609,    -1,   610,    -1,   374,    48,
    1245,    -1,  1245,   633,  1246,    -1,  1246,    -1,  1427,  1251,
      -1,    -1,  1248,    -1,    -1,   374,    48,  1249,  1250,    -1,
    1250,   633,  1425,  1251,    -1,  1425,  1251,    -1,    -1,    20,
      -1,   133,    -1,    -1,  1254,    -1,    -1,  1254,    -1,   267,
    1255,    -1,   267,  1255,   458,   170,  1257,    -1,   267,   458,
     170,  1257,    -1,  1256,    -1,  1256,   633,  1256,    -1,  1256,
     362,  1256,    -1,  1437,    -1,  1419,    -1,   565,    -1,   281,
      -1,   359,    -1,  1256,    -1,    -1,   267,  1256,    -1,   267,
     458,   170,    -1,   267,  1256,   458,   170,    -1,   359,    -1,
     624,   359,    -1,   624,   281,    -1,   359,    -1,   213,    -1,
     281,    -1,   565,    -1,   125,    -1,   185,    -1,   359,    -1,
     213,    -1,   281,    -1,   565,    -1,  1264,    -1,   359,    -1,
     565,    -1,   281,    -1,   125,    -1,   185,    -1,   359,    -1,
     565,    -1,   213,    -1,   281,    -1,  1264,    -1,  1265,    -1,
     125,    -1,   185,    -1,  1260,    -1,   128,    -1,    -1,    -1,
     406,  1437,  1268,   631,  1269,   632,    -1,    -1,  1270,    -1,
    1270,   633,  1271,    -1,  1271,    -1,  1132,  1138,  1133,    -1,
      -1,  1273,  1274,    -1,  1274,   633,  1275,    -1,  1275,    -1,
     638,  1439,    -1,  1439,    -1,    -1,   240,  1277,  1278,    -1,
      -1,    -1,   378,  1436,  1279,   958,  1280,  1402,  1405,    -1,
     147,  1436,    -1,  1272,    -1,    -1,   144,  1282,  1180,    -1,
      -1,   145,  1292,  1472,  1291,  1284,  1287,  1044,    -1,    -1,
     145,   229,  1291,  1437,   364,  1430,  1285,    -1,   145,   111,
    1291,  1437,    -1,   145,   195,  1291,  1437,   639,  1437,    -1,
     145,   195,  1291,  1437,    -1,   145,   406,  1291,   691,    -1,
     145,   583,   690,  1502,    -1,    -1,   145,   600,  1291,  1286,
    1287,  1044,    -1,   145,   168,  1291,   691,    -1,   145,   558,
    1291,   691,    -1,   145,   533,   814,   825,   826,    -1,   145,
     277,   205,   815,   825,   826,    -1,   145,   474,  1291,  1439,
      -1,  1288,    -1,  1287,   633,  1288,    -1,  1430,    -1,  1290,
      -1,  1289,   633,  1290,    -1,  1431,    -1,    -1,   224,   172,
      -1,    -1,   539,    -1,    -1,    -1,   236,  1294,  1299,  1038,
    1301,  1295,  1303,  1319,    -1,    -1,    -1,   442,  1297,  1300,
    1301,  1298,  1303,    -1,    -1,   284,    -1,   130,    -1,   214,
      -1,  1328,    -1,   130,    -1,   240,  1302,    -1,  1302,    -1,
    1288,    -1,  1306,    -1,   631,   632,  1306,    -1,   631,  1305,
     632,  1306,    -1,    -1,   476,  1304,  1310,    -1,  1305,   633,
    1423,    -1,  1423,    -1,   591,  1309,    -1,   592,  1309,    -1,
      -1,   885,  1307,  1525,    -1,    -1,   631,   885,   632,  1308,
    1528,    -1,  1309,   633,  1314,    -1,  1314,    -1,  1310,   633,
    1311,    -1,  1311,    -1,  1427,  1312,  1318,    -1,   161,    -1,
     477,    -1,    -1,  1312,    -1,    -1,   631,  1315,  1316,   632,
      -1,    -1,  1317,    -1,  1317,   633,  1318,    -1,  1318,    -1,
    1138,    -1,   128,    -1,    -1,    -1,   364,   148,  1320,   253,
     580,  1326,    -1,    -1,    -1,   580,  1322,  1328,  1038,  1187,
     476,  1324,  1323,  1236,  1247,  1258,    -1,  1324,   633,  1325,
      -1,  1325,    -1,  1427,  1312,  1318,    -1,  1326,   633,  1327,
      -1,  1327,    -1,  1427,  1312,  1318,    -1,    -1,   284,    -1,
      -1,   132,  1330,  1338,  1331,    -1,    -1,   192,  1430,  1332,
    1236,  1247,  1258,    -1,    -1,  1335,  1333,   192,  1187,  1236,
      -1,    -1,   192,  1289,  1334,   587,  1187,  1236,    -1,  1336,
      -1,  1335,   633,  1336,    -1,  1437,  1337,    -1,  1437,   639,
    1437,  1337,    -1,    -1,   639,   626,    -1,    -1,  1339,  1338,
      -1,   415,    -1,   284,    -1,   225,    -1,    -1,   561,  1342,
    1341,  1288,    -1,    -1,   536,    -1,    -1,  1344,    -1,  1345,
      -1,  1344,   633,  1345,    -1,   102,    -1,   319,    -1,    43,
     244,    -1,    97,   530,    -1,   382,   180,    -1,   245,    -1,
     529,    -1,   495,    -1,    12,    -1,    -1,   190,   414,   359,
      -1,    -1,   481,  1348,  1349,    -1,   112,  1360,    -1,  1356,
     532,  1355,  1360,    -1,  1356,   557,  1355,  1360,    -1,   167,
    1355,  1360,    -1,   536,   513,  1355,  1360,    -1,   368,   532,
    1355,  1360,    -1,   394,    -1,   394,   493,  1434,    -1,   394,
     493,  1360,    -1,   159,   904,  1352,    -1,   159,    12,  1352,
      -1,  1356,    74,  1357,  1430,  1355,  1360,    -1,  1353,   278,
      -1,   486,   216,    -1,    -1,    36,   167,  1358,  1359,  1350,
    1252,    -1,    -1,   430,   665,   167,  1358,  1359,  1351,  1252,
      -1,   980,  1357,  1430,  1355,  1236,    -1,  1354,   158,    -1,
      24,    -1,    99,    -1,   405,    -1,   101,   631,   626,   632,
     603,    -1,   101,   631,   626,   632,   164,    -1,   603,  1252,
      -1,   164,  1252,    -1,   410,    -1,   409,  1343,  1346,  1252,
      -1,  1458,   513,  1360,    -1,  1356,   408,    -1,  1458,   595,
    1360,    -1,   955,  1360,    -1,    73,  1360,    -1,   204,    -1,
     204,   190,  1440,    -1,   103,   111,   895,  1437,    -1,   103,
     536,  1430,    -1,   103,   600,  1430,    -1,   303,   513,    -1,
      12,   487,   513,    -1,   486,   513,    -1,   486,   666,   513,
      -1,    68,    -1,   584,    -1,   535,    -1,   230,    -1,   103,
     406,   691,    -1,   103,   195,   691,    -1,   103,   558,   691,
      -1,   406,   513,  1360,    -1,   195,   513,  1360,    -1,   406,
      71,   691,    -1,   195,    71,   691,    -1,   103,   168,   691,
      -1,  1364,   190,  1138,    -1,   513,    -1,   337,    -1,   278,
      -1,   303,    -1,    35,    -1,    -1,   517,    -1,    -1,  1357,
    1437,    -1,    -1,   193,    -1,   192,    -1,   243,    -1,    -1,
     243,  1434,    -1,    -1,   192,  1262,    -1,    -1,   266,  1434,
      -1,   606,  1138,    -1,    -1,  1364,  1430,  1362,  1366,    -1,
      -1,  1364,  1365,  1363,  1115,    -1,   133,    -1,   134,    -1,
      -1,   175,    -1,   389,    -1,    -1,  1418,    -1,  1437,    -1,
      -1,   187,  1090,  1368,  1369,    -1,    -1,    -1,  1472,  1370,
    1375,  1371,  1372,    -1,  1373,    -1,    -1,   608,   419,   276,
    1376,    -1,  1373,   633,  1374,    -1,  1374,    -1,   163,   278,
      -1,   159,   278,    -1,   197,   278,    -1,   488,   278,    -1,
      35,   278,    -1,   429,   278,   665,    -1,   414,    50,    -1,
     216,    -1,   405,    -1,   278,    -1,   513,    -1,   486,   665,
      -1,    68,    -1,   584,    -1,   535,    -1,   230,    -1,   303,
      -1,   135,    -1,   447,    -1,    -1,  1287,    -1,    -1,    17,
     138,    62,    -1,    -1,   445,  1378,  1379,    -1,  1379,   633,
    1380,    -1,  1380,    -1,    -1,   486,  1381,   665,  1382,    -1,
     303,    -1,   414,    50,    -1,    -1,    12,    -1,    -1,   412,
    1384,  1385,    -1,  1353,   278,  1386,    -1,   553,  1434,    -1,
      31,  1138,    -1,    -1,   254,  1388,  1389,  1390,  1391,    -1,
      -1,   209,    -1,   492,    -1,    -1,    90,    -1,   414,    -1,
    1138,    -1,   583,  1440,    -1,   586,  1437,    -1,    -1,    -1,
      -1,    -1,   272,  1398,  1394,  1400,  1399,   231,  1436,  1395,
    1401,   240,   536,  1430,  1396,   958,  1397,  1408,  1402,  1405,
    1409,  1411,  1414,    -1,   114,    -1,   616,    -1,    -1,   273,
      -1,    -1,    88,    -1,   284,    -1,    -1,   442,    -1,   225,
      -1,    -1,    74,  1403,    -1,  1403,  1404,    -1,  1404,    -1,
     541,    48,  1418,    -1,   372,   154,    48,  1418,    -1,   154,
      48,  1418,    -1,   165,    48,  1418,    -1,    -1,   269,  1406,
      -1,  1406,  1407,    -1,  1407,    -1,   541,    48,  1418,    -1,
     510,    48,  1418,    -1,    -1,   458,   222,    48,  1418,    -1,
      -1,   225,   359,  1410,    -1,   269,    -1,   458,    -1,    -1,
     631,  1412,   632,    -1,   631,   632,    -1,  1412,   633,  1413,
      -1,  1413,    -1,  1427,    -1,   638,  1439,    -1,    -1,   476,
    1415,    -1,  1415,   633,  1416,    -1,  1416,    -1,  1427,  1312,
    1132,  1318,  1133,    -1,   542,    -1,   343,    -1,   568,   542,
      -1,  1417,  1435,    -1,  1435,    -1,   213,    -1,    37,    -1,
     384,    -1,  1421,    -1,   625,  1422,    -1,   624,  1422,    -1,
    1417,    -1,  1422,    -1,   358,    -1,   178,    -1,   560,    -1,
     213,    -1,    37,    -1,   568,   213,    -1,   568,    37,    -1,
     118,  1417,    -1,   549,  1417,    -1,   546,  1417,    -1,   359,
      -1,   281,    -1,   565,    -1,   125,    -1,   185,    -1,  1427,
      -1,  1424,    -1,  1437,   639,   626,    -1,  1437,   639,  1437,
     639,   626,    -1,  1138,    -1,  1437,    -1,  1428,    -1,  1437,
      -1,  1428,    -1,  1437,   639,  1437,    -1,   639,  1437,   639,
    1437,    -1,  1437,   639,  1437,   639,  1437,    -1,  1437,    -1,
    1437,   639,  1437,   639,  1437,    -1,  1437,   639,  1437,    -1,
     639,  1437,    -1,  1437,    -1,  1437,   639,  1437,    -1,   639,
    1437,    -1,  1437,  1337,    -1,  1437,   639,  1437,  1337,    -1,
    1437,    -1,   221,    -1,   223,    -1,   542,    -1,   542,    -1,
     542,    -1,  1433,    -1,  1441,    -1,  1433,    -1,  1442,    -1,
    1437,    -1,  1434,    -1,   265,    -1,  1439,    -1,  1439,   638,
    1439,    -1,   107,  1137,    -1,  1442,    -1,    21,    -1,    30,
      -1,    32,    -1,    49,    -1,    50,    -1,    60,    -1,    63,
      -1,    62,    -1,    69,    -1,    75,    -1,    76,    -1,    77,
      -1,    78,    -1,    79,    -1,    82,    -1,    84,    -1,    96,
      -1,   124,    -1,   144,    -1,   155,    -1,   170,    -1,   171,
      -1,   187,    -1,   208,    -1,   212,    -1,   215,    -1,   238,
      -1,   255,    -1,   355,    -1,   368,    -1,   371,    -1,   370,
      -1,   380,    -1,   385,    -1,   390,    -1,   398,    -1,   401,
      -1,   436,    -1,   439,    -1,   445,    -1,   448,    -1,   455,
      -1,   462,    -1,   467,    -1,   474,    -1,   484,    -1,   491,
      -1,   486,    -1,   487,    -1,   493,    -1,   512,    -1,   516,
      -1,   561,    -1,   572,    -1,   573,    -1,   612,    -1,   615,
      -1,   581,    -1,     5,    -1,     7,    -1,     8,    -1,     9,
      -1,    10,    -1,    11,    -1,    14,    -1,    18,    -1,    23,
      -1,    24,    -1,    26,    -1,    25,    -1,    27,    -1,    28,
      -1,    29,    -1,    36,    -1,    40,    -1,    43,    -1,    45,
      -1,    44,    -1,    47,    -1,    53,    -1,    56,    -1,    57,
      -1,    59,    -1,    65,    -1,    68,    -1,    67,    -1,    66,
      -1,    70,    -1,    71,    -1,    73,    -1,    81,    -1,    74,
      -1,    83,    -1,    85,    -1,    86,    -1,    87,    -1,    88,
      -1,    90,    -1,    91,    -1,    93,    -1,    95,    -1,    94,
      -1,    97,    -1,    99,    -1,   102,    -1,   105,    -1,   109,
      -1,   114,    -1,   113,    -1,   115,    -1,   118,    -1,   123,
      -1,   129,    -1,   131,    -1,   135,    -1,   137,    -1,   138,
      -1,   139,    -1,   140,    -1,   147,    -1,   148,    -1,   149,
      -1,   156,    -1,   160,    -1,   159,    -1,   158,    -1,   163,
      -1,   164,    -1,   166,    -1,   168,    -1,   167,    -1,   169,
      -1,   174,    -1,   175,    -1,   176,    -1,   180,    -1,   179,
      -1,   191,    -1,   153,    -1,   193,    -1,   182,    -1,   183,
      -1,   184,    -1,   197,    -1,   198,    -1,   200,    -1,   199,
      -1,   201,    -1,   204,    -1,   202,    -1,   210,    -1,   209,
      -1,   216,    -1,   220,    -1,   222,    -1,   226,    -1,   230,
      -1,   242,    -1,   227,    -1,   228,    -1,   232,    -1,   244,
      -1,   245,    -1,   247,    -1,   248,    -1,   237,    -1,   252,
      -1,   257,    -1,   256,    -1,   260,    -1,   263,    -1,   264,
      -1,   270,    -1,   271,    -1,   273,    -1,   275,    -1,   277,
      -1,   278,    -1,   309,    -1,   303,    -1,   305,    -1,   287,
      -1,   288,    -1,   292,    -1,   289,    -1,   290,    -1,   304,
      -1,   291,    -1,   293,    -1,   286,    -1,   301,    -1,   295,
      -1,   294,    -1,   296,    -1,   297,    -1,   298,    -1,   299,
      -1,   300,    -1,   307,    -1,   308,    -1,   310,    -1,   312,
      -1,   313,    -1,   318,    -1,   319,    -1,   320,    -1,   321,
      -1,   322,    -1,   323,    -1,   326,    -1,   327,    -1,   331,
      -1,   329,    -1,   333,    -1,   334,    -1,   335,    -1,   336,
      -1,   337,    -1,   338,    -1,   340,    -1,   339,    -1,   341,
      -1,   344,    -1,   345,    -1,   349,    -1,   348,    -1,   356,
      -1,   350,    -1,   351,    -1,   361,    -1,   362,    -1,   363,
      -1,   365,    -1,   367,    -1,   366,    -1,   381,    -1,   382,
      -1,   387,    -1,   388,    -1,   389,    -1,   391,    -1,   392,
      -1,   393,    -1,   395,    -1,   394,    -1,   396,    -1,   397,
      -1,   402,    -1,   403,    -1,   405,    -1,   407,    -1,   408,
      -1,   409,    -1,   410,    -1,   411,    -1,   413,    -1,   414,
      -1,   415,    -1,   418,    -1,   422,    -1,   423,    -1,   425,
      -1,   424,    -1,   426,    -1,   429,    -1,   430,    -1,   431,
      -1,   432,    -1,   433,    -1,   435,    -1,   438,    -1,   440,
      -1,   443,    -1,   447,    -1,   450,    -1,   451,    -1,   456,
      -1,   457,    -1,   458,    -1,   459,    -1,   460,    -1,   461,
      -1,   463,    -1,   464,    -1,   466,    -1,   472,    -1,   471,
      -1,   473,    -1,   485,    -1,   478,    -1,   482,    -1,   488,
      -1,   490,    -1,   492,    -1,   494,    -1,   495,    -1,   503,
      -1,   502,    -1,   505,    -1,   508,    -1,   511,    -1,   513,
      -1,   517,    -1,   519,    -1,   520,    -1,   521,    -1,   522,
      -1,   524,    -1,   523,    -1,   527,    -1,   528,    -1,   529,
      -1,   530,    -1,   538,    -1,   535,    -1,   532,    -1,   537,
      -1,   533,    -1,   539,    -1,   540,    -1,   543,    -1,   544,
      -1,   555,    -1,   556,    -1,   557,    -1,   546,    -1,   547,
      -1,   548,    -1,   549,    -1,   562,    -1,   563,    -1,   564,
      -1,   195,    -1,   566,    -1,   567,    -1,   570,    -1,   569,
      -1,   576,    -1,   579,    -1,   583,    -1,   584,    -1,   585,
      -1,   595,    -1,   600,    -1,   601,    -1,   592,    -1,   603,
      -1,   602,    -1,   604,    -1,   611,    -1,   614,    -1,   616,
      -1,   619,    -1,   599,    -1,    -1,   476,  1444,  1445,    -1,
      -1,  1461,  1446,  1451,    -1,    -1,   555,  1447,  1463,    -1,
      -1,  1457,  1448,  1449,    -1,    -1,  1460,  1450,  1451,    -1,
     555,  1463,    -1,    -1,   633,  1452,    -1,    -1,  1453,  1455,
      -1,    -1,  1452,   633,  1454,  1455,    -1,    -1,  1457,  1456,
    1460,    -1,  1461,    -1,   202,    -1,   273,    -1,   473,    -1,
      -1,   202,    -1,   273,    -1,   473,    -1,    -1,   202,   639,
      -1,   273,   639,    -1,   473,   639,    -1,  1462,  1312,  1469,
      -1,  1462,  1312,  1469,    -1,   638,  1439,  1312,  1138,    -1,
     638,   638,  1459,  1462,  1312,  1469,    -1,   955,   960,    -1,
     339,  1312,  1138,    -1,   339,   957,   962,    -1,   391,  1312,
    1468,    -1,   391,   190,  1440,  1312,  1468,    -1,  1437,    -1,
    1437,   639,  1437,    -1,   128,   639,  1437,    -1,  1464,    -1,
    1465,    -1,  1464,   633,  1465,    -1,  1465,   633,  1464,    -1,
    1466,    -1,   247,   264,  1467,    -1,   419,   366,    -1,   419,
     613,    -1,   419,   566,    -1,   419,    83,    -1,   440,   419,
      -1,   471,    -1,   542,    -1,   391,   631,   542,   632,    -1,
     363,   631,   542,   632,    -1,  1138,    -1,   128,    -1,   364,
      -1,    12,    -1,    35,    -1,    -1,   276,  1472,  1471,  1473,
      -1,   536,    -1,   532,    -1,  1474,    -1,  1473,   633,  1474,
      -1,  1430,  1234,  1475,    -1,   419,    -1,   613,    -1,   613,
      88,    -1,   284,   613,    -1,   419,   273,    -1,    -1,   577,
    1477,  1472,    -1,   208,  1430,   368,  1234,    -1,   208,  1432,
      69,    -1,    -1,   208,  1432,   419,  1479,  1480,  1236,  1253,
      -1,  1481,    -1,  1437,  1482,    -1,   183,    -1,   349,    -1,
     183,    -1,   349,    -1,   403,    -1,   256,    -1,    -1,  1484,
    1483,   631,  1317,   632,    -1,   161,    -1,   196,    -1,   258,
      -1,   207,    -1,   285,    -1,   453,   690,  1486,    -1,  1490,
     364,  1489,  1501,   192,  1502,    -1,  1490,   364,   195,  1501,
     192,  1502,    -1,  1490,   364,   406,  1501,   192,  1502,    -1,
      12,  1491,   633,   203,   371,   192,  1502,    -1,   411,   364,
    1440,   192,  1502,    -1,   203,   690,  1488,    -1,  1490,   364,
    1489,  1501,   553,  1503,  1510,  1511,    -1,  1490,   364,   195,
    1501,   553,  1503,  1510,  1511,    -1,  1490,   364,   406,  1501,
     553,  1503,  1510,  1511,    -1,   411,   364,  1440,   553,  1503,
    1512,    -1,    -1,   536,    -1,  1492,    -1,    12,  1491,    -1,
      -1,   405,    -1,  1493,    -1,  1492,   633,  1493,    -1,    -1,
     468,  1494,  1507,    -1,    -1,   236,  1495,  1507,    -1,    -1,
     580,  1496,  1507,    -1,    -1,   427,  1497,  1507,    -1,   132,
      -1,   582,    -1,   229,    -1,    13,    -1,   103,    -1,   145,
      -1,   171,    -1,   435,    -1,   482,    -1,   407,    -1,   182,
      -1,   203,   371,    -1,   481,   112,    -1,   527,    -1,   103,
     539,   532,    -1,   276,   532,    -1,   443,   486,    -1,   443,
      67,    -1,   103,   600,    -1,   481,   600,    -1,   103,   457,
      -1,    13,   457,    -1,   103,   583,    -1,   168,    -1,   558,
      -1,   103,   533,    -1,    -1,    17,    -1,  1500,  1498,  1499,
      -1,  1500,    -1,   522,   542,    -1,   248,   542,    -1,    65,
     542,    -1,   626,    -1,  1437,   639,   626,    -1,   626,   639,
     626,    -1,  1430,    -1,  1440,    -1,  1502,   633,  1440,    -1,
    1506,    -1,  1503,   633,  1506,    -1,   599,    -1,   608,    -1,
     587,    -1,    19,    -1,  1440,   222,    48,   542,    -1,  1440,
     222,    48,   391,   542,    -1,  1440,   222,  1504,  1439,    -1,
    1440,   222,  1504,  1439,  1505,  1434,    -1,  1440,    -1,    -1,
     631,  1508,   632,    -1,  1508,   633,  1509,    -1,  1509,    -1,
    1437,    -1,    -1,   444,  1499,    -1,   444,   509,    -1,   444,
     614,    -1,   444,   351,    -1,    -1,   608,  1513,    -1,    -1,
     608,   203,   371,    -1,  1513,  1514,    -1,  1514,    -1,   203,
     371,    -1,   308,  1260,    -1,   312,  1260,    -1,   307,  1260,
      -1,   313,  1259,    -1,    -1,    32,  1516,  1517,    -1,    -1,
     611,    -1,    -1,    17,   355,    57,    -1,    17,    57,    -1,
      -1,   434,    -1,   355,   434,    -1,    -1,   462,    -1,    84,
    1517,  1518,  1519,    -1,   455,  1517,  1518,  1519,    -1,   455,
    1517,   553,  1520,  1437,    -1,   462,  1437,    -1,   434,   462,
    1437,    -1,    -1,  1526,    -1,    -1,   574,  1533,  1527,  1116,
      -1,    -1,  1526,    -1,  1530,    -1,    -1,  1530,    -1,    -1,
    1531,  1532,    -1,  1248,  1252,    -1,  1254,    -1,    -1,   141,
      -1,    12,    -1,   468,  1204,    -1,   631,  1118,   632,    -1,
    1534,  1529,    -1,    -1,  1535,   574,  1533,  1536,  1534,  1529,
      -1,  1538,  1535,  1539,    -1,    -1,    -1,    -1,  1541,    -1,
    1541,  1542,    -1,  1542,    -1,   518,    -1,   214,    -1,   141,
      -1,   506,    -1,   501,    -1,   502,    -1,   504,    -1,    12,
      -1,  1548,  1544,    -1,  1547,  1545,    -1,  1549,  1546,  1553,
      -1,  1553,    -1,  1561,    -1,  1572,    -1,  1566,    -1,   677,
      -1,  1553,    -1,  1561,    -1,  1572,    -1,  1566,    -1,  1565,
      -1,   677,    -1,  1547,    -1,  1548,    -1,    -1,   129,   161,
    1440,    -1,  1550,    -1,  1550,  1551,    -1,  1551,    -1,   376,
     442,    -1,    11,   161,   567,    -1,    11,   161,   320,    -1,
      11,   161,   540,    -1,    -1,   507,   467,   129,    -1,   507,
     467,   242,    -1,    -1,  1552,   600,  1430,  1554,  1555,    19,
    1557,    -1,    -1,   631,  1556,   632,    -1,  1437,    -1,  1556,
     633,  1437,    -1,    -1,  1558,  1559,  1560,    -1,   468,  1119,
      -1,   631,  1117,   632,  1528,    -1,    -1,   608,    64,   371,
      -1,   608,    53,    64,   371,    -1,   608,   273,    64,   371,
      -1,    -1,    -1,    -1,   558,  1132,   691,   785,   786,   364,
    1132,  1562,  1430,   190,  1132,  1563,   150,   460,  1564,   735,
      -1,    10,  1132,   195,  1437,   451,   908,   493,  1434,    -1,
    1132,   195,  1437,   451,   908,   493,  1434,    -1,    -1,    -1,
      -1,    -1,    -1,  1132,   195,   691,   631,  1567,   702,   632,
    1568,   451,  1569,   953,  1570,   693,  1571,   735,    -1,    -1,
      -1,    -1,    -1,   406,  1132,   691,  1573,   631,  1574,   706,
     632,  1575,   693,  1576,   735,    -1,   615,  1579,  1578,  1580,
      -1,   615,   155,  1578,  1582,    -1,   615,   401,  1578,    -1,
     615,    84,  1578,  1581,    -1,   615,   455,  1578,    -1,   615,
     423,    -1,  1418,    -1,  1418,   633,  1418,    -1,  1418,   633,
    1418,   633,  1260,    -1,    32,    -1,   512,    -1,    -1,   250,
      -1,   450,    -1,    -1,   365,   393,    -1,    -1,    -1,   528,
    1583,  1584,    -1,    -1,   190,   323,    -1,   238,   395,  1437,
     493,  1434,    -1,   238,   493,  1434,    -1,   573,   395,  1437,
      -1,   573,   493,  1434,    -1,   621,    -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,  1832,  1832,  1845,  1844,  1869,  1876,  1878,  1882,  1883,
    1888,  1889,  1890,  1891,  1892,  1893,  1894,  1895,  1896,  1897,
    1898,  1899,  1900,  1901,  1902,  1903,  1904,  1905,  1906,  1907,
    1908,  1909,  1910,  1911,  1912,  1913,  1914,  1915,  1916,  1917,
    1918,  1919,  1920,  1921,  1922,  1923,  1924,  1925,  1926,  1927,
    1928,  1929,  1930,  1931,  1932,  1933,  1934,  1935,  1936,  1937,
    1938,  1939,  1940,  1944,  1954,  1955,  1959,  1969,  1976,  1987,
    1986,  1997,  1999,  2003,  2004,  2008,  2021,  2020,  2040,  2039,
    2048,  2049,  2053,  2057,  2061,  2065,  2069,  2073,  2078,  2082,
    2086,  2090,  2094,  2098,  2103,  2107,  2112,  2143,  2148,  2151,
    2153,  2154,  2158,  2164,  2168,  2184,  2188,  2194,  2208,  2213,
    2217,  2233,  2232,  2274,  2273,  2285,  2283,  2296,  2294,  2306,
    2305,  2318,  2317,  2325,  2329,  2333,  2337,  2344,  2357,  2358,
    2362,  2366,  2370,  2374,  2378,  2382,  2386,  2394,  2393,  2425,
    2424,  2431,  2438,  2439,  2445,  2451,  2461,  2467,  2473,  2475,
    2482,  2483,  2487,  2493,  2502,  2503,  2511,  2511,  2569,  2570,
    2571,  2572,  2573,  2574,  2575,  2576,  2577,  2578,  2579,  2580,
    2581,  2586,  2600,  2616,  2635,  2636,  2640,  2641,  2646,  2648,
    2650,  2652,  2654,  2656,  2658,  2664,  2665,  2666,  2670,  2674,
    2682,  2681,  2694,  2696,  2699,  2701,  2705,  2709,  2716,  2718,
    2722,  2723,  2728,  2748,  2774,  2776,  2780,  2781,  2785,  2811,
    2812,  2813,  2814,  2818,  2819,  2823,  2824,  2829,  2832,  2859,
    2858,  2923,  2939,  2938,  2992,  3018,  3018,  3041,  3042,  3047,
    3049,  3054,  3077,  3090,  3094,  3111,  3112,  3116,  3120,  3129,
    3136,  3143,  3153,  3168,  3191,  3197,  3198,  3204,  3207,  3211,
    3219,  3239,  3241,  3259,  3265,  3267,  3269,  3271,  3273,  3275,
    3277,  3279,  3281,  3283,  3285,  3287,  3292,  3307,  3322,  3340,
    3341,  3345,  3346,  3347,  3348,  3349,  3350,  3351,  3352,  3353,
    3354,  3355,  3356,  3357,  3362,  3361,  3368,  3368,  3425,  3424,
    3453,  3453,  3467,  3520,  3563,  3584,  3583,  3605,  3624,  3626,
    3627,  3631,  3651,  3674,  3676,  3692,  3674,  3711,  3713,  3714,
    3718,  3719,  3724,  3730,  3723,  3751,  3750,  3766,  3767,  3771,
    3772,  3777,  3781,  3776,  3802,  3806,  3801,  3825,  3835,  3840,
    3839,  3875,  3876,  3881,  3880,  3913,  3913,  3928,  3927,  3963,
    3975,  3977,  3974,  4004,  4003,  4024,  4026,  4031,  4033,  4035,
    4052,  4057,  4063,  4070,  4071,  4079,  4085,  4094,  4100,  4106,
    4107,  4111,  4111,  4116,  4117,  4118,  4122,  4123,  4124,  4128,
    4132,  4133,  4134,  4138,  4139,  4140,  4141,  4142,  4143,  4144,
    4145,  4149,  4153,  4154,  4155,  4159,  4160,  4161,  4162,  4163,
    4167,  4171,  4172,  4173,  4177,  4178,  4179,  4180,  4181,  4182,
    4183,  4187,  4191,  4192,  4193,  4197,  4198,  4199,  4204,  4212,
    4220,  4228,  4240,  4252,  4257,  4262,  4270,  4278,  4286,  4294,
    4302,  4310,  4318,  4331,  4344,  4357,  4359,  4363,  4368,  4381,
    4382,  4434,  4433,  4436,  4442,  4442,  4443,  4457,  4458,  4462,
    4464,  4463,  4467,  4466,  4472,  4509,  4510,  4515,  4514,  4533,
    4552,  4551,  4568,  4572,  4580,  4579,  4582,  4584,  4586,  4588,
    4593,  4594,  4599,  4600,  4604,  4605,  4609,  4628,  4638,  4649,
    4658,  4659,  4675,  4677,  4676,  4681,  4679,  4690,  4691,  4695,
    4713,  4729,  4730,  4746,  4761,  4783,  4784,  4789,  4788,  4812,
    4822,  4844,  4843,  4861,  4860,  4880,  4902,  4906,  4935,  4947,
    4948,  4953,  4964,  4952,  4989,  4990,  4994,  5007,  5028,  5041,
    5067,  5068,  5073,  5072,  5109,  5114,  5115,  5119,  5120,  5124,
    5126,  5132,  5138,  5140,  5142,  5144,  5146,  5148,  5158,  5173,
    5157,  5187,  5188,  5192,  5193,  5197,  5198,  5202,  5203,  5207,
    5208,  5212,  5213,  5217,  5222,  5226,  5233,  5235,  5239,  5240,
    5244,  5245,  5246,  5250,  5255,  5260,  5265,  5270,  5275,  5280,
    5285,  5300,  5306,  5311,  5316,  5321,  5326,  5332,  5331,  5357,
    5358,  5359,  5364,  5369,  5374,  5376,  5378,  5380,  5386,  5391,
    5396,  5402,  5408,  5414,  5423,  5441,  5458,  5481,  5495,  5496,
    5497,  5498,  5499,  5500,  5501,  5505,  5506,  5507,  5511,  5512,
    5516,  5517,  5518,  5519,  5524,  5531,  5532,  5536,  5537,  5541,
    5542,  5550,  5549,  5558,  5556,  5566,  5564,  5574,  5572,  5580,
    5600,  5606,  5608,  5612,  5616,  5617,  5621,  5626,  5625,  5651,
    5652,  5661,  5663,  5668,  5671,  5675,  5682,  5683,  5687,  5688,
    5692,  5698,  5704,  5708,  5724,  5740,  5741,  5742,  5743,  5748,
    5752,  5757,  5762,  5766,  5771,  5776,  5782,  5787,  5793,  5797,
    5802,  5807,  5825,  5827,  5829,  5842,  5844,  5849,  5854,  5866,
    5871,  5876,  5881,  5883,  5885,  5887,  5889,  5891,  5893,  5895,
    5898,  5897,  5902,  5901,  5905,  5907,  5916,  5917,  5918,  5923,
    5924,  5925,  5926,  5927,  5931,  5935,  5936,  5940,  5941,  5945,
    5946,  5947,  5948,  5949,  5953,  5954,  5955,  5956,  5957,  5961,
    5966,  5968,  5974,  5975,  5977,  5982,  5991,  5992,  5996,  5997,
    6001,  6002,  6003,  6007,  6008,  6009,  6010,  6013,  6014,  6018,
    6019,  6023,  6024,  6028,  6029,  6033,  6034,  6035,  6036,  6043,
    6044,  6050,  6056,  6062,  6068,  6069,  6082,  6088,  6094,  6100,
    6109,  6130,  6136,  6141,  6142,  6146,  6154,  6158,  6159,  6163,
    6164,  6168,  6177,  6181,  6182,  6186,  6197,  6198,  6202,  6203,
    6207,  6208,  6213,  6214,  6218,  6225,  6234,  6242,  6253,  6254,
    6255,  6256,  6257,  6258,  6263,  6271,  6272,  6276,  6278,  6282,
    6294,  6295,  6299,  6306,  6319,  6320,  6322,  6324,  6330,  6335,
    6341,  6347,  6354,  6364,  6365,  6366,  6367,  6368,  6372,  6376,
    6377,  6381,  6382,  6386,  6387,  6391,  6392,  6393,  6397,  6398,
    6402,  6406,  6419,  6431,  6432,  6436,  6437,  6441,  6442,  6446,
    6447,  6451,  6452,  6456,  6457,  6461,  6462,  6466,  6467,  6471,
    6473,  6474,  6480,  6486,  6492,  6500,  6501,  6505,  6509,  6510,
    6523,  6524,  6525,  6529,  6530,  6534,  6540,  6554,  6555,  6559,
    6571,  6572,  6576,  6577,  6585,  6584,  6623,  6622,  6636,  6648,
    6647,  6666,  6665,  6684,  6683,  6702,  6696,  6716,  6715,  6748,
    6753,  6758,  6763,  6768,  6778,  6779,  6780,  6781,  6785,  6786,
    6798,  6799,  6803,  6804,  6807,  6809,  6810,  6811,  6813,  6815,
    6816,  6825,  6826,  6830,  6839,  6837,  6851,  6865,  6864,  6878,
    6876,  6890,  6897,  6908,  6912,  6919,  6923,  6928,  6927,  6943,
    6945,  6950,  6958,  6957,  6973,  6977,  6976,  6988,  6989,  6993,
    7008,  7009,  7013,  7022,  7026,  7031,  7036,  7035,  7047,  7058,
    7046,  7074,  7083,  7087,  7097,  7106,  7112,  7118,  7127,  7136,
    7155,  7176,  7186,  7190,  7198,  7199,  7203,  7204,  7208,  7208,
    7211,  7213,  7217,  7218,  7222,  7223,  7227,  7228,  7229,  7233,
    7234,  7235,  7239,  7240,  7241,  7242,  7251,  7250,  7260,  7259,
    7266,  7273,  7281,  7280,  7288,  7297,  7314,  7317,  7324,  7328,
    7335,  7339,  7343,  7350,  7350,  7356,  7357,  7361,  7362,  7363,
    7367,  7368,  7384,  7385,  7390,  7389,  7401,  7402,  7403,  7408,
    7407,  7429,  7430,  7434,  7435,  7439,  7440,  7441,  7446,  7445,
    7467,  7468,  7472,  7477,  7478,  7486,  7488,  7492,  7494,  7493,
    7506,  7508,  7507,  7521,  7522,  7527,  7536,  7537,  7538,  7542,
    7548,  7557,  7566,  7565,  7592,  7593,  7597,  7598,  7602,  7603,
    7604,  7605,  7606,  7607,  7612,  7611,  7633,  7634,  7635,  7640,
    7639,  7645,  7652,  7657,  7665,  7666,  7670,  7684,  7683,  7696,
    7697,  7701,  7702,  7706,  7716,  7726,  7727,  7732,  7731,  7742,
    7743,  7747,  7748,  7752,  7762,  7773,  7772,  7780,  7780,  7789,
    7790,  7795,  7796,  7805,  7814,  7815,  7819,  7824,  7829,  7834,
    7839,  7838,  7858,  7866,  7858,  7873,  7874,  7875,  7876,  7877,
    7881,  7888,  7895,  7897,  7908,  7909,  7913,  7914,  7942,  7972,
    7974,  7980,  7990,  7991,  7992,  8007,  8014,  8040,  8046,  8052,
    8053,  8054,  8055,  8056,  8060,  8061,  8062,  8066,  8067,  8068,
    8072,  8073,  8078,  8129,  8136,  8179,  8185,  8191,  8197,  8203,
    8209,  8215,  8221,  8225,  8231,  8237,  8243,  8249,  8255,  8259,
    8265,  8275,  8281,  8289,  8295,  8305,  8311,  8320,  8330,  8336,
    8346,  8352,  8361,  8365,  8371,  8377,  8383,  8389,  8395,  8401,
    8407,  8413,  8419,  8425,  8431,  8437,  8443,  8449,  8453,  8454,
    8458,  8459,  8463,  8464,  8468,  8469,  8473,  8474,  8475,  8476,
    8477,  8478,  8482,  8483,  8488,  8494,  8498,  8505,  8512,  8519,
    8526,  8533,  8538,  8544,  8551,  8558,  8566,  8577,  8599,  8606,
    8614,  8615,  8616,  8617,  8618,  8619,  8631,  8632,  8633,  8634,
    8635,  8641,  8645,  8651,  8657,  8663,  8669,  8671,  8678,  8685,
    8691,  8693,  8702,  8709,  8717,  8723,  8730,  8736,  8750,  8757,
    8773,  8779,  8785,  8793,  8799,  8805,  8811,  8817,  8832,  8844,
    8850,  8856,  8862,  8868,  8874,  8880,  8886,  8892,  8898,  8904,
    8910,  8916,  8922,  8928,  8934,  8940,  8948,  8969,  8976,  8982,
    8989,  8996,  9003,  9010,  9016,  9022,  9029,  9035,  9042,  9048,
    9054,  9060,  9066,  9072,  9090,  9096,  9102,  9109,  9116,  9124,
    9131,  9138,  9145,  9152,  9169,  9175,  9181,  9187,  9193,  9200,
    9206,  9212,  9218,  9224,  9230,  9242,  9248,  9254,  9260,  9266,
    9278,  9284,  9300,  9306,  9313,  9320,  9327,  9334,  9341,  9345,
    9365,  9364,  9437,  9479,  9481,  9486,  9487,  9491,  9492,  9496,
    9497,  9501,  9508,  9516,  9542,  9548,  9554,  9560,  9566,  9572,
    9581,  9588,  9590,  9587,  9597,  9608,  9614,  9620,  9626,  9632,
    9638,  9644,  9650,  9656,  9663,  9662,  9681,  9680,  9695,  9705,
    9713,  9729,  9730,  9735,  9740,  9745,  9748,  9761,  9760,  9777,
    9779,  9781,  9783,  9785,  9787,  9789,  9791,  9793,  9795,  9801,
    9807,  9810,  9809,  9815,  9816,  9820,  9827,  9835,  9836,  9840,
    9847,  9855,  9856,  9860,  9861,  9865,  9873,  9884,  9885,  9894,
    9905,  9906,  9912,  9913,  9933,  9937,  9935,  9953,  9951,  9962,
    9972,  9970,  9988,  9987,  9997, 10008, 10006, 10025, 10024, 10035,
   10047, 10048, 10049, 10053, 10054, 10066, 10066, 10080, 10120, 10173,
   10177, 10182, 10174, 10194, 10214, 10222, 10214, 10231, 10230, 10253,
   10270, 10253, 10277, 10281, 10307, 10308, 10313, 10316, 10317, 10318,
   10322, 10323, 10328, 10327, 10333, 10332, 10340, 10341, 10344, 10346,
   10346, 10350, 10350, 10355, 10356, 10360, 10362, 10367, 10368, 10372,
   10383, 10396, 10397, 10398, 10399, 10400, 10401, 10402, 10403, 10404,
   10405, 10406, 10407, 10411, 10412, 10413, 10414, 10415, 10416, 10417,
   10418, 10419, 10423, 10424, 10425, 10426, 10429, 10431, 10432, 10436,
   10437, 10445, 10447, 10451, 10453, 10452, 10466, 10469, 10468, 10483,
   10489, 10504, 10506, 10510, 10512, 10517, 10518, 10538, 10563, 10567,
   10568, 10572, 10585, 10587, 10592, 10591, 10626, 10628, 10633, 10634,
   10635, 10640, 10647, 10651, 10652, 10656, 10660, 10664, 10671, 10678,
   10685, 10695, 10729, 10733, 10739, 10745, 10754, 10762, 10766, 10773,
   10774, 10778, 10779, 10780, 10784, 10785, 10786, 10787, 10788, 10789,
   10793, 10794, 10795, 10796, 10797, 10801, 10802, 10803, 10804, 10805,
   10809, 10810, 10811, 10812, 10813, 10817, 10822, 10823, 10827, 10828,
   10831, 10834, 10833, 10864, 10865, 10869, 10870, 10874, 10886, 10886,
   10896, 10897, 10901, 10920, 10953, 10952, 10965, 10973, 10964, 10975,
   10987, 10999, 10998, 11016, 11015, 11026, 11026, 11042, 11049, 11072,
   11093, 11105, 11110, 11109, 11119, 11125, 11132, 11137, 11142, 11152,
   11153, 11157, 11168, 11169, 11173, 11185, 11189, 11197, 11198, 11206,
   11214, 11205, 11224, 11231, 11223, 11241, 11249, 11250, 11258, 11262,
   11263, 11274, 11275, 11279, 11288, 11289, 11290, 11292, 11291, 11302,
   11303, 11307, 11308, 11310, 11309, 11313, 11312, 11318, 11319, 11323,
   11324, 11328, 11338, 11339, 11343, 11344, 11349, 11348, 11362, 11363,
   11367, 11372, 11380, 11381, 11389, 11391, 11391, 11399, 11407, 11398,
   11429, 11430, 11434, 11442, 11443, 11447, 11457, 11458, 11465, 11464,
   11480, 11479, 11491, 11490, 11502, 11501, 11515, 11516, 11520, 11533,
   11549, 11550, 11554, 11555, 11559, 11560, 11561, 11566, 11565, 11587,
   11589, 11592, 11594, 11597, 11598, 11601, 11605, 11609, 11613, 11617,
   11621, 11625, 11629, 11633, 11641, 11644, 11654, 11653, 11667, 11674,
   11682, 11690, 11698, 11706, 11714, 11721, 11728, 11734, 11736, 11738,
   11747, 11751, 11756, 11755, 11761, 11760, 11765, 11774, 11781, 11790,
   11799, 11804, 11806, 11808, 11810, 11812, 11814, 11821, 11829, 11831,
   11839, 11846, 11853, 11863, 11870, 11876, 11885, 11893, 11897, 11902,
   11910, 11915, 11922, 11929, 11936, 11943, 11950, 11957, 11963, 11970,
   11977, 11982, 11987, 11992, 12003, 12005, 12007, 12012, 12013, 12016,
   12018, 12022, 12023, 12027, 12028, 12032, 12033, 12037, 12038, 12042,
   12043, 12046, 12048, 12055, 12066, 12065, 12078, 12077, 12087, 12088,
   12092, 12093, 12094, 12098, 12099, 12100, 12115, 12114, 12127, 12136,
   12126, 12138, 12142, 12143, 12157, 12158, 12163, 12165, 12167, 12169,
   12171, 12173, 12184, 12186, 12188, 12190, 12196, 12198, 12209, 12211,
   12213, 12215, 12217, 12219, 12221, 12226, 12227, 12231, 12232, 12236,
   12235, 12245, 12246, 12250, 12250, 12253, 12254, 12258, 12259, 12264,
   12263, 12274, 12278, 12282, 12295, 12294, 12308, 12309, 12310, 12313,
   12314, 12315, 12319, 12324, 12334, 12346, 12358, 12368, 12378, 12345,
   12386, 12387, 12391, 12392, 12396, 12397, 12405, 12409, 12410, 12411,
   12414, 12416, 12420, 12421, 12425, 12430, 12437, 12442, 12449, 12451,
   12455, 12456, 12460, 12465, 12473, 12474, 12477, 12479, 12487, 12489,
   12493, 12494, 12495, 12499, 12501, 12506, 12507, 12516, 12517, 12521,
   12522, 12526, 12539, 12563, 12575, 12586, 12605, 12613, 12625, 12640,
   12661, 12662, 12663, 12671, 12672, 12673, 12680, 12686, 12692, 12698,
   12704, 12733, 12761, 12762, 12763, 12767, 12777, 12787, 12793, 12802,
   12817, 12818, 12822, 12831, 12847, 12851, 12898, 12902, 12920, 12924,
   13003, 13028, 13059, 13060, 13076, 13086, 13090, 13096, 13102, 13112,
   13118, 13127, 13137, 13138, 13168, 13184, 13200, 13217, 13218, 13229,
   13230, 13241, 13242, 13243, 13247, 13264, 13286, 13301, 13302, 13303,
   13304, 13305, 13306, 13307, 13308, 13309, 13310, 13311, 13312, 13313,
   13314, 13315, 13316, 13317, 13318, 13319, 13320, 13321, 13322, 13323,
   13324, 13325, 13326, 13327, 13328, 13329, 13330, 13331, 13332, 13333,
   13334, 13335, 13336, 13337, 13338, 13339, 13340, 13341, 13342, 13343,
   13344, 13345, 13346, 13347, 13348, 13349, 13350, 13351, 13352, 13353,
   13354, 13355, 13356, 13357, 13358, 13359, 13369, 13370, 13371, 13372,
   13373, 13374, 13375, 13376, 13377, 13378, 13379, 13380, 13381, 13382,
   13383, 13384, 13385, 13386, 13387, 13388, 13389, 13390, 13391, 13392,
   13393, 13394, 13395, 13396, 13397, 13398, 13399, 13400, 13401, 13402,
   13403, 13404, 13405, 13406, 13407, 13408, 13409, 13410, 13411, 13412,
   13413, 13414, 13415, 13416, 13417, 13418, 13419, 13420, 13421, 13422,
   13423, 13424, 13425, 13426, 13427, 13428, 13429, 13430, 13431, 13432,
   13433, 13434, 13435, 13436, 13437, 13438, 13439, 13440, 13441, 13442,
   13443, 13444, 13445, 13446, 13447, 13448, 13449, 13450, 13451, 13452,
   13453, 13454, 13455, 13456, 13457, 13458, 13459, 13460, 13461, 13462,
   13463, 13464, 13465, 13466, 13467, 13468, 13469, 13470, 13471, 13472,
   13473, 13474, 13475, 13476, 13477, 13478, 13479, 13480, 13481, 13482,
   13483, 13484, 13485, 13486, 13487, 13488, 13489, 13490, 13491, 13492,
   13493, 13494, 13495, 13496, 13497, 13498, 13499, 13500, 13501, 13502,
   13503, 13504, 13505, 13506, 13507, 13508, 13509, 13510, 13511, 13512,
   13513, 13514, 13515, 13516, 13517, 13518, 13519, 13520, 13521, 13522,
   13523, 13524, 13525, 13526, 13527, 13528, 13529, 13530, 13531, 13532,
   13533, 13534, 13535, 13536, 13537, 13538, 13539, 13540, 13541, 13542,
   13543, 13544, 13545, 13546, 13547, 13548, 13549, 13550, 13551, 13552,
   13553, 13554, 13555, 13556, 13557, 13558, 13559, 13560, 13561, 13562,
   13563, 13564, 13565, 13566, 13567, 13568, 13569, 13570, 13571, 13572,
   13573, 13574, 13575, 13576, 13577, 13578, 13579, 13580, 13581, 13582,
   13583, 13584, 13585, 13586, 13587, 13588, 13589, 13590, 13591, 13592,
   13593, 13594, 13595, 13596, 13597, 13598, 13599, 13600, 13601, 13602,
   13603, 13604, 13605, 13606, 13607, 13608, 13609, 13610, 13611, 13612,
   13613, 13614, 13615, 13616, 13617, 13618, 13619, 13620, 13621, 13622,
   13623, 13624, 13625, 13626, 13627, 13628, 13629, 13630, 13631, 13632,
   13633, 13634, 13635, 13636, 13637, 13638, 13639, 13640, 13641, 13642,
   13643, 13644, 13645, 13646, 13647, 13648, 13649, 13650, 13651, 13652,
   13653, 13654, 13655, 13656, 13657, 13658, 13659, 13660, 13661, 13662,
   13663, 13664, 13676, 13675, 13694, 13693, 13700, 13699, 13709, 13708,
   13719, 13718, 13724, 13732, 13734, 13739, 13739, 13748, 13747, 13761,
   13760, 13765, 13769, 13770, 13771, 13775, 13776, 13777, 13778, 13782,
   13783, 13784, 13785, 13790, 13815, 13843, 13854, 13867, 13881, 13896,
   13915, 13943, 13956, 13983, 14026, 14040, 14041, 14042, 14043, 14047,
   14065, 14083, 14084, 14088, 14089, 14090, 14091, 14095, 14096, 14105,
   14117, 14118, 14119, 14125, 14131, 14143, 14142, 14158, 14159, 14163,
   14164, 14168, 14183, 14184, 14185, 14190, 14191, 14196, 14195, 14215,
   14227, 14240, 14239, 14273, 14274, 14278, 14279, 14283, 14284, 14285,
   14286, 14288, 14287, 14300, 14301, 14302, 14303, 14304, 14310, 14315,
   14321, 14332, 14343, 14347, 14357, 14362, 14369, 14381, 14393, 14402,
   14404, 14408, 14409, 14416, 14418, 14422, 14423, 14428, 14427, 14431,
   14430, 14434, 14433, 14437, 14436, 14439, 14440, 14441, 14442, 14443,
   14444, 14445, 14446, 14447, 14448, 14449, 14450, 14451, 14452, 14453,
   14454, 14455, 14456, 14457, 14458, 14459, 14460, 14461, 14462, 14463,
   14464, 14468, 14469, 14473, 14474, 14478, 14488, 14498, 14511, 14526,
   14539, 14552, 14564, 14569, 14577, 14582, 14589, 14589, 14590, 14590,
   14593, 14620, 14625, 14631, 14637, 14643, 14647, 14651, 14652, 14656,
   14683, 14685, 14689, 14693, 14697, 14704, 14705, 14709, 14710, 14714,
   14715, 14719, 14720, 14726, 14732, 14738, 14748, 14747, 14757, 14758,
   14763, 14764, 14765, 14770, 14771, 14772, 14776, 14777, 14781, 14793,
   14802, 14812, 14821, 14835, 14836, 14841, 14840, 14856, 14857, 14858,
   14861, 14863, 14867, 14867, 14891, 14892, 14896, 14897, 14898, 14902,
   14906, 14913, 14916, 14914, 14930, 14937, 14958, 14975, 14977, 14981,
   14982, 14986, 14987, 14995, 14996, 14997, 14998, 15004, 15010, 15020,
   15022, 15024, 15029, 15030, 15031, 15032, 15033, 15037, 15038, 15039,
   15040, 15041, 15042, 15052, 15053, 15058, 15071, 15084, 15086, 15088,
   15093, 15098, 15100, 15102, 15108, 15109, 15111, 15117, 15116, 15134,
   15135, 15139, 15144, 15152, 15152, 15177, 15178, 15183, 15184, 15186,
   15188, 15206, 15212, 15217, 15199, 15279, 15297, 15322, 15354, 15358,
   15367, 15390, 15318, 15455, 15479, 15488, 15496, 15454, 15517, 15521,
   15525, 15529, 15533, 15537, 15544, 15551, 15558, 15568, 15569, 15573,
   15574, 15575, 15579, 15580, 15585, 15587, 15586, 15592, 15593, 15597,
   15604, 15614, 15620, 15631
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || YYTOKEN_TABLE
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "ABORT_SYM", "ACCESSIBLE_SYM", "ACTION",
  "ADD", "ADDDATE_SYM", "AFTER_SYM", "AGAINST", "AGGREGATE_SYM",
  "ALGORITHM_SYM", "ALL", "ALTER", "ALWAYS_SYM", "ANALYZE_SYM",
  "AND_AND_SYM", "AND_SYM", "ANY_SYM", "AS", "ASC", "ASCII_SYM",
  "ASENSITIVE_SYM", "AT_SYM", "AUTHORS_SYM", "AUTOEXTEND_SIZE_SYM",
  "AUTO_INC", "AUTO_SYM", "AVG_ROW_LENGTH", "AVG_SYM", "BACKUP_SYM",
  "BEFORE_SYM", "BEGIN_SYM", "BETWEEN_SYM", "BIGINT", "BINARY",
  "BINLOG_SYM", "BIN_NUM", "BIT_AND", "BIT_OR", "BIT_SYM", "BIT_XOR",
  "BLOB_SYM", "BLOCK_SYM", "BOOLEAN_SYM", "BOOL_SYM", "BOTH", "BTREE_SYM",
  "BY", "BYTE_SYM", "CACHE_SYM", "CALL_SYM", "CASCADE", "CASCADED",
  "CASE_SYM", "CAST_SYM", "CATALOG_NAME_SYM", "CHAIN_SYM", "CHANGE",
  "CHANGED", "CHARSET", "CHAR_SYM", "CHECKPOINT_SYM", "CHECKSUM_SYM",
  "CHECK_SYM", "CIPHER_SYM", "CLASS_ORIGIN_SYM", "CLIENT_SYM",
  "CLIENT_STATS_SYM", "CLOSE_SYM", "COALESCE", "CODE_SYM", "COLLATE_SYM",
  "COLLATION_SYM", "COLUMNS", "COLUMN_ADD_SYM", "COLUMN_CHECK_SYM",
  "COLUMN_CREATE_SYM", "COLUMN_DELETE_SYM", "COLUMN_GET_SYM", "COLUMN_SYM",
  "COLUMN_NAME_SYM", "COMMENT_SYM", "COMMITTED_SYM", "COMMIT_SYM",
  "COMPACT_SYM", "COMPLETION_SYM", "COMPRESSED_SYM", "CONCURRENT",
  "CONDITION_SYM", "CONNECTION_SYM", "CONSISTENT_SYM", "CONSTRAINT",
  "CONSTRAINT_CATALOG_SYM", "CONSTRAINT_NAME_SYM", "CONSTRAINT_SCHEMA_SYM",
  "CONTAINS_SYM", "CONTEXT_SYM", "CONTINUE_SYM", "CONTRIBUTORS_SYM",
  "CONVERT_SYM", "COUNT_SYM", "CPU_SYM", "CREATE", "CROSS", "CUBE_SYM",
  "CURDATE", "CURRENT_USER", "CURSOR_SYM", "CURSOR_NAME_SYM", "CURTIME",
  "DATABASE", "DATABASES", "DATAFILE_SYM", "DATA_SYM", "DATETIME",
  "DATE_ADD_INTERVAL", "DATE_SUB_INTERVAL", "DATE_SYM", "DAY_HOUR_SYM",
  "DAY_MICROSECOND_SYM", "DAY_MINUTE_SYM", "DAY_SECOND_SYM", "DAY_SYM",
  "DEALLOCATE_SYM", "DECIMAL_NUM", "DECIMAL_SYM", "DECLARE_SYM", "DEFAULT",
  "DEFINER_SYM", "DELAYED_SYM", "DELAY_KEY_WRITE_SYM", "DELETE_SYM",
  "DESC", "DESCRIBE", "DES_KEY_FILE", "DETERMINISTIC_SYM", "DIRECTORY_SYM",
  "DISABLE_SYM", "DISCARD", "DISK_SYM", "DISTINCT", "DIV_SYM",
  "DOUBLE_SYM", "DO_SYM", "DROP", "DUAL_SYM", "DUMPFILE", "DUPLICATE_SYM",
  "DYNAMIC_SYM", "EACH_SYM", "ELSE", "ELSEIF_SYM", "ENABLE_SYM",
  "ENCLOSED", "END", "ENDS_SYM", "END_OF_INPUT", "ENGINES_SYM",
  "ENGINE_SYM", "ENUM", "EQ", "EQUAL_SYM", "ERROR_SYM", "ERRORS",
  "ESCAPED", "ESCAPE_SYM", "EVENTS_SYM", "EVENT_SYM", "EVERY_SYM",
  "EXAMINED_SYM", "EXECUTE_SYM", "EXISTS", "EXIT_SYM", "EXPANSION_SYM",
  "EXTENDED_SYM", "EXTENT_SIZE_SYM", "EXTRACT_SYM", "FALSE_SYM",
  "FAST_SYM", "FAULTS_SYM", "FETCH_SYM", "FILE_SYM", "FIRST_SYM",
  "FIXED_SYM", "FLOAT_NUM", "FLOAT_SYM", "FLUSH_SYM", "FORCE_SYM",
  "FOREIGN", "FOR_SYM", "FOUND_SYM", "FROM", "FULL", "FULLTEXT_SYM",
  "FUNCTION_SYM", "GE", "GENERAL", "GENERATED_SYM", "GEOMETRYCOLLECTION",
  "GEOMETRY_SYM", "GET_FORMAT", "GLOBAL_SYM", "GRANT", "GRANTS",
  "GROUP_SYM", "GROUP_CONCAT_SYM", "GT_SYM", "HANDLER_SYM", "HARD_SYM",
  "HASH_SYM", "HAVING", "HELP_SYM", "HEX_NUM", "HIGH_PRIORITY", "HOST_SYM",
  "HOSTS_SYM", "HOUR_MICROSECOND_SYM", "HOUR_MINUTE_SYM",
  "HOUR_SECOND_SYM", "HOUR_SYM", "IDENT", "IDENTIFIED_SYM", "IDENT_QUOTED",
  "IF", "IGNORE_SYM", "IGNORE_SERVER_IDS_SYM", "IMPORT", "INDEXES",
  "INDEX_SYM", "INDEX_STATS_SYM", "INFILE", "INITIAL_SIZE_SYM",
  "INNER_SYM", "INOUT_SYM", "INSENSITIVE_SYM", "INSERT", "INSERT_METHOD",
  "INSTALL_SYM", "INTERVAL_SYM", "INTO", "INT_SYM", "INVOKER_SYM",
  "IN_SYM", "IO_SYM", "IPC_SYM", "IS", "ISOLATION", "ISSUER_SYM",
  "ITERATE_SYM", "JOIN_SYM", "KEYS", "KEY_BLOCK_SIZE", "KEY_SYM",
  "KILL_SYM", "LANGUAGE_SYM", "LAST_SYM", "LAST_VALUE", "LE", "LEADING",
  "LEAVES", "LEAVE_SYM", "LEFT", "LESS_SYM", "LEVEL_SYM", "LEX_HOSTNAME",
  "LIKE", "LIMIT", "LINEAR_SYM", "LINES", "LINESTRING", "LIST_SYM", "LOAD",
  "LOCAL_SYM", "LOCATOR_SYM", "LOCKS_SYM", "LOCK_SYM", "LOGFILE_SYM",
  "LOGS_SYM", "LONGBLOB", "LONGTEXT", "LONG_NUM", "LONG_SYM", "LOOP_SYM",
  "LOW_PRIORITY", "LT", "MASTER_CONNECT_RETRY_SYM", "MASTER_USE_GTID_SYM",
  "MASTER_HOST_SYM", "MASTER_LOG_FILE_SYM", "MASTER_LOG_POS_SYM",
  "MASTER_PASSWORD_SYM", "MASTER_PORT_SYM", "MASTER_SERVER_ID_SYM",
  "MASTER_SSL_CAPATH_SYM", "MASTER_SSL_CA_SYM", "MASTER_SSL_CERT_SYM",
  "MASTER_SSL_CIPHER_SYM", "MASTER_SSL_CRL_SYM", "MASTER_SSL_CRLPATH_SYM",
  "MASTER_SSL_KEY_SYM", "MASTER_SSL_SYM",
  "MASTER_SSL_VERIFY_SERVER_CERT_SYM", "MASTER_SYM", "MASTER_USER_SYM",
  "MASTER_HEARTBEAT_PERIOD_SYM", "MATCH", "MAX_CONNECTIONS_PER_HOUR",
  "MAX_QUERIES_PER_HOUR", "MAX_ROWS", "MAX_SIZE_SYM", "MAX_SYM",
  "MAX_UPDATES_PER_HOUR", "MAX_USER_CONNECTIONS_SYM", "MAX_VALUE_SYM",
  "MEDIUMBLOB", "MEDIUMINT", "MEDIUMTEXT", "MEDIUM_SYM", "MEMORY_SYM",
  "MERGE_SYM", "MESSAGE_TEXT_SYM", "MICROSECOND_SYM", "MIGRATE_SYM",
  "MINUTE_MICROSECOND_SYM", "MINUTE_SECOND_SYM", "MINUTE_SYM", "MIN_ROWS",
  "MIN_SYM", "MODE_SYM", "MODIFIES_SYM", "MODIFY_SYM", "MOD_SYM",
  "MONTH_SYM", "MULTILINESTRING", "MULTIPOINT", "MULTIPOLYGON",
  "MUTEX_SYM", "MYSQL_ERRNO_SYM", "NAMES_SYM", "NAME_SYM", "NATIONAL_SYM",
  "NATURAL", "NCHAR_STRING", "NCHAR_SYM", "NDBCLUSTER_SYM", "NE", "NEG",
  "NEW_SYM", "NEXT_SYM", "NODEGROUP_SYM", "NONE_SYM", "NOT2_SYM",
  "NOT_SYM", "NOW_SYM", "NO_SYM", "NO_WAIT_SYM", "NO_WRITE_TO_BINLOG",
  "NULL_SYM", "NUM", "NUMERIC_SYM", "NVARCHAR_SYM", "OFFSET_SYM",
  "OLD_PASSWORD", "ON", "ONE_SYM", "ONLY_SYM", "ONLINE_SYM", "OPEN_SYM",
  "OPTIMIZE", "OPTIONS_SYM", "OPTION", "OPTIONALLY", "OR2_SYM",
  "ORDER_SYM", "OR_OR_SYM", "OR_SYM", "OUTER", "OUTFILE", "OUT_SYM",
  "OWNER_SYM", "PACK_KEYS_SYM", "PAGE_SYM", "PAGE_CHECKSUM_SYM",
  "PARAM_MARKER", "PARSER_SYM", "PARSE_VCOL_EXPR_SYM", "PARTIAL",
  "PARTITIONING_SYM", "PARTITIONS_SYM", "PARTITION_SYM", "PASSWORD",
  "PERSISTENT_SYM", "PHASE_SYM", "PLUGINS_SYM", "PLUGIN_SYM", "POINT_SYM",
  "POLYGON", "PORT_SYM", "POSITION_SYM", "PRECISION", "PREPARE_SYM",
  "PRESERVE_SYM", "PREV_SYM", "PRIMARY_SYM", "PRIVILEGES", "PROCEDURE_SYM",
  "PROCESS", "PROCESSLIST_SYM", "PROFILE_SYM", "PROFILES_SYM", "PROXY_SYM",
  "PURGE", "QUARTER_SYM", "QUERY_SYM", "QUICK", "RANGE_SYM", "READS_SYM",
  "READ_ONLY_SYM", "READ_SYM", "READ_WRITE_SYM", "REAL", "REBUILD_SYM",
  "RECOVER_SYM", "REDOFILE_SYM", "REDO_BUFFER_SIZE_SYM", "REDUNDANT_SYM",
  "REFERENCES", "REGEXP", "RELAY", "RELAYLOG_SYM", "RELAY_LOG_FILE_SYM",
  "RELAY_LOG_POS_SYM", "RELAY_THREAD", "RELEASE_SYM", "RELOAD",
  "REMOVE_SYM", "RENAME", "REORGANIZE_SYM", "REPAIR", "REPEATABLE_SYM",
  "REPEAT_SYM", "REPLACE", "REPLICATION", "REQUIRE_SYM", "RESET_SYM",
  "RESIGNAL_SYM", "RESOURCES", "RESTORE_SYM", "RESTRICT", "RESUME_SYM",
  "RETURNS_SYM", "RETURN_SYM", "REVOKE", "RIGHT", "ROLLBACK_SYM",
  "ROLLUP_SYM", "ROUTINE_SYM", "ROWS_SYM", "ROW_FORMAT_SYM", "ROW_SYM",
  "RTREE_SYM", "SAVEPOINT_SYM", "SCHEDULE_SYM", "SCHEMA_NAME_SYM",
  "SECOND_MICROSECOND_SYM", "SECOND_SYM", "SECURITY_SYM", "SELECT_SYM",
  "SENSITIVE_SYM", "SEPARATOR_SYM", "SERIALIZABLE_SYM", "SERIAL_SYM",
  "SESSION_SYM", "SERVER_SYM", "SERVER_OPTIONS", "SET", "SET_VAR",
  "SHARE_SYM", "SHIFT_LEFT", "SHIFT_RIGHT", "SHOW", "SHUTDOWN",
  "SIGNAL_SYM", "SIGNED_SYM", "SIMPLE_SYM", "SLAVE", "SLAVES", "SLOW",
  "SMALLINT", "SNAPSHOT_SYM", "SOCKET_SYM", "SOFT_SYM", "SONAME_SYM",
  "SOUNDS_SYM", "SOURCE_SYM", "SPATIAL_SYM", "SPECIFIC_SYM",
  "SQLEXCEPTION_SYM", "SQLSTATE_SYM", "SQLWARNING_SYM", "SQL_BIG_RESULT",
  "SQL_BUFFER_RESULT", "SQL_CACHE_SYM", "SQL_CALC_FOUND_ROWS",
  "SQL_NO_CACHE_SYM", "SQL_SMALL_RESULT", "SQL_SYM", "SQL_THREAD",
  "SSL_SYM", "STARTING", "STARTS_SYM", "START_SYM", "STATUS_SYM",
  "STDDEV_SAMP_SYM", "STD_SYM", "STOP_SYM", "STORAGE_SYM", "STRAIGHT_JOIN",
  "STRING_SYM", "SUBCLASS_ORIGIN_SYM", "SUBDATE_SYM", "SUBJECT_SYM",
  "SUBPARTITIONS_SYM", "SUBPARTITION_SYM", "SUBSTRING", "SUM_SYM",
  "SUPER_SYM", "SUSPEND_SYM", "SWAPS_SYM", "SWITCHES_SYM", "SYSDATE",
  "TABLES", "TABLESPACE", "TABLE_REF_PRIORITY", "TABLE_STATS_SYM",
  "TABLE_SYM", "TABLE_CHECKSUM_SYM", "TABLE_NAME_SYM", "TEMPORARY",
  "TEMPTABLE_SYM", "TERMINATED", "TEXT_STRING", "TEXT_SYM", "THAN_SYM",
  "THEN_SYM", "TIMESTAMP", "TIMESTAMP_ADD", "TIMESTAMP_DIFF", "TIME_SYM",
  "TINYBLOB", "TINYINT", "TINYTEXT", "TO_SYM", "TRAILING",
  "TRANSACTION_SYM", "TRANSACTIONAL_SYM", "TRIGGERS_SYM", "TRIGGER_SYM",
  "TRIM", "TRUE_SYM", "TRUNCATE_SYM", "TYPES_SYM", "TYPE_SYM",
  "UDF_RETURNS_SYM", "ULONGLONG_NUM", "UNCOMMITTED_SYM", "UNDEFINED_SYM",
  "UNDERSCORE_CHARSET", "UNDOFILE_SYM", "UNDO_BUFFER_SIZE_SYM", "UNDO_SYM",
  "UNICODE_SYM", "UNINSTALL_SYM", "UNION_SYM", "UNIQUE_SYM", "UNKNOWN_SYM",
  "UNLOCK_SYM", "UNSIGNED", "UNTIL_SYM", "UPDATE_SYM", "UPGRADE_SYM",
  "USAGE", "USER", "USER_STATS_SYM", "USE_FRM", "USE_SYM", "USING",
  "UTC_DATE_SYM", "UTC_TIMESTAMP_SYM", "UTC_TIME_SYM", "VALUES",
  "VALUE_SYM", "VARBINARY", "VARCHAR", "VARIABLES", "VARIANCE_SYM",
  "VARYING", "VAR_SAMP_SYM", "VIA_SYM", "VIEW_SYM", "VIRTUAL_SYM",
  "WAIT_SYM", "WARNINGS", "WEEK_SYM", "WHEN_SYM", "WHERE", "WHILE_SYM",
  "WITH", "WITH_CUBE_SYM", "WITH_ROLLUP_SYM", "WORK_SYM", "WRAPPER_SYM",
  "WRITE_SYM", "X509_SYM", "XA_SYM", "XML_SYM", "XOR", "YEAR_MONTH_SYM",
  "YEAR_SYM", "ZEROFILL", "IMPOSSIBLE_ACTION", "'|'", "'&'", "'-'", "'+'",
  "'*'", "'/'", "'%'", "'^'", "'~'", "'('", "')'", "','", "'!'", "'{'",
  "'}'", "';'", "'@'", "'.'", "':'", "$accept", "query", "$@1",
  "opt_end_of_input", "verb_clause", "statement", "deallocate",
  "deallocate_or_drop", "prepare", "prepare_src", "execute", "$@2",
  "execute_using", "execute_var_list", "execute_var_ident", "help", "$@3",
  "change", "$@4", "master_defs", "master_def", "ignore_server_id_list",
  "ignore_server_id", "master_file_def", "optional_connection_name",
  "connection_name", "create", "$@5", "$@6", "$@7", "$@8", "$@9", "$@10",
  "server_def", "server_options_list", "server_option", "event_tail",
  "$@11", "ev_schedule_time", "$@12", "opt_ev_status", "ev_starts",
  "ev_ends", "opt_ev_on_completion", "ev_on_completion", "opt_ev_comment",
  "ev_sql_stmt", "$@13", "ev_sql_stmt_inner", "clear_privileges",
  "sp_name", "sp_a_chistics", "sp_c_chistics", "sp_chistic",
  "sp_c_chistic", "sp_suid", "call", "$@14", "opt_sp_cparam_list",
  "opt_sp_cparams", "sp_cparams", "sp_fdparam_list", "sp_fdparams",
  "sp_init_param", "sp_fdparam", "sp_pdparam_list", "sp_pdparams",
  "sp_pdparam", "sp_opt_inout", "sp_proc_stmts", "sp_proc_stmts1",
  "sp_decls", "sp_decl", "$@15", "$@16", "sp_cursor_stmt", "$@17",
  "sp_handler_type", "sp_hcond_list", "sp_hcond_element", "sp_cond",
  "sqlstate", "opt_value", "sp_hcond", "signal_stmt", "signal_value",
  "opt_signal_value", "opt_set_signal_information",
  "signal_information_item_list", "signal_allowed_expr",
  "signal_condition_information_item_name", "resignal_stmt",
  "sp_decl_idents", "sp_opt_default", "sp_proc_stmt", "sp_proc_stmt_if",
  "$@18", "sp_proc_stmt_statement", "$@19", "sp_proc_stmt_return", "$@20",
  "sp_proc_stmt_unlabeled", "$@21", "sp_proc_stmt_leave",
  "sp_proc_stmt_iterate", "sp_proc_stmt_open", "sp_proc_stmt_fetch",
  "$@22", "sp_proc_stmt_close", "sp_opt_fetch_noise", "sp_fetch_list",
  "sp_if", "$@23", "$@24", "$@25", "sp_elseifs", "case_stmt_specification",
  "simple_case_stmt", "$@26", "$@27", "searched_case_stmt", "$@28",
  "simple_when_clause_list", "searched_when_clause_list",
  "simple_when_clause", "$@29", "$@30", "searched_when_clause", "$@31",
  "$@32", "else_clause_opt", "sp_labeled_control", "$@33", "sp_opt_label",
  "sp_labeled_block", "$@34", "sp_unlabeled_block", "$@35",
  "sp_block_content", "$@36", "sp_unlabeled_control", "$@37", "$@38",
  "$@39", "trg_action_time", "trg_event", "change_tablespace_access",
  "change_tablespace_info", "tablespace_info", "opt_logfile_group_name",
  "alter_tablespace_info", "logfile_group_info",
  "alter_logfile_group_info", "add_log_file", "change_ts_option_list",
  "$@40", "change_ts_options", "change_ts_option",
  "tablespace_option_list", "tablespace_options", "tablespace_option",
  "alter_tablespace_option_list", "alter_tablespace_options",
  "alter_tablespace_option", "logfile_group_option_list",
  "logfile_group_options", "logfile_group_option",
  "alter_logfile_group_option_list", "alter_logfile_group_options",
  "alter_logfile_group_option", "ts_datafile", "lg_undofile",
  "lg_redofile", "tablespace_name", "logfile_group_name", "ts_access_mode",
  "opt_ts_initial_size", "opt_ts_autoextend_size", "opt_ts_max_size",
  "opt_ts_extent_size", "opt_ts_undo_buffer_size",
  "opt_ts_redo_buffer_size", "opt_ts_nodegroup", "opt_ts_comment",
  "opt_ts_engine", "opt_ts_wait", "ts_wait", "size_number", "create_body",
  "$@41", "$@42", "create_like", "opt_create_select", "$@43", "$@44",
  "opt_create_partitioning", "opt_partitioning", "partitioning", "$@45",
  "have_partitioning", "partition_entry", "$@46", "partition",
  "part_type_def", "$@47", "opt_linear", "part_field_list",
  "part_field_item_list", "part_field_item", "part_column_list",
  "part_func", "sub_part_func", "opt_num_parts", "opt_sub_part", "$@48",
  "$@49", "sub_part_field_list", "sub_part_field_item", "part_func_expr",
  "opt_num_subparts", "part_defs", "part_def_list", "part_definition",
  "$@50", "part_name", "opt_part_values", "$@51", "$@52", "part_func_max",
  "part_values_in", "part_value_list", "part_value_item", "$@53", "$@54",
  "part_value_item_list", "part_value_expr_item", "opt_sub_partition",
  "sub_part_list", "sub_part_definition", "$@55", "sub_name",
  "opt_part_options", "opt_part_option_list", "opt_part_option",
  "create_select", "$@56", "$@57", "opt_as", "opt_create_database_options",
  "create_database_options", "create_database_option", "opt_table_options",
  "table_options", "table_option", "opt_if_not_exists",
  "opt_create_table_options", "create_table_options_space_separated",
  "create_table_options", "create_table_option", "$@58", "default_charset",
  "default_collation", "storage_engines", "known_storage_engines",
  "row_types", "merge_insert_types", "opt_select_from", "udf_type",
  "create_field_list", "field_list", "field_list_item", "column_def",
  "key_def", "$@59", "$@60", "$@61", "$@62", "opt_check_constraint",
  "check_constraint", "opt_constraint", "constraint", "field_spec", "$@63",
  "field_def", "opt_generated_always", "vcol_opt_specifier",
  "vcol_opt_attribute", "vcol_opt_attribute_list", "vcol_attribute",
  "parse_vcol_expr", "virtual_column_func", "type", "$@64", "$@65",
  "spatial_type", "char", "nchar", "varchar", "nvarchar", "int_type",
  "real_type", "float_options", "precision", "field_options",
  "field_opt_list", "field_option", "field_length", "opt_field_length",
  "opt_precision", "opt_attribute", "opt_attribute_list", "attribute",
  "type_with_opt_collate", "now_or_signed_literal", "charset",
  "charset_name", "charset_name_or_default", "opt_load_data_charset",
  "old_or_new_charset_name", "old_or_new_charset_name_or_default",
  "collation_name", "opt_collate", "collation_name_or_default",
  "opt_default", "ascii", "unicode", "opt_binary", "opt_bin_mod",
  "opt_primary", "references", "opt_ref_list", "ref_list",
  "opt_match_clause", "opt_on_update_delete", "delete_option",
  "normal_key_type", "constraint_key_type", "key_or_index",
  "opt_key_or_index", "keys_or_index", "opt_unique", "fulltext", "spatial",
  "init_key_options", "key_alg", "normal_key_options",
  "fulltext_key_options", "spatial_key_options", "normal_key_opts",
  "spatial_key_opts", "fulltext_key_opts", "key_using_alg", "all_key_opt",
  "normal_key_opt", "spatial_key_opt", "fulltext_key_opt",
  "btree_or_rtree", "key_list", "key_part", "opt_ident",
  "opt_if_not_exists_ident", "opt_component", "string_list", "alter",
  "$@66", "$@67", "$@68", "$@69", "$@70", "$@71", "$@72",
  "ev_alter_on_schedule_completion", "opt_ev_rename_to", "opt_ev_sql_stmt",
  "ident_or_empty", "alter_commands", "$@73", "$@74", "$@75",
  "remove_partitioning", "all_or_alt_part_name_list", "add_partition_rule",
  "$@76", "add_part_extra", "reorg_partition_rule", "$@77",
  "reorg_parts_rule", "$@78", "alt_part_name_list", "alt_part_name_item",
  "alter_list", "add_column", "alter_list_item", "$@79", "$@80", "$@81",
  "opt_column", "opt_ignore", "alter_options", "$@82",
  "alter_options_part2", "alter_option_list", "alter_option",
  "opt_restrict", "opt_place", "opt_to", "slave", "$@83", "$@84", "$@85",
  "start", "opt_start_transaction_option_list",
  "start_transaction_option_list", "start_transaction_option",
  "slave_thread_opts", "$@86", "slave_thread_opt_list", "slave_thread_opt",
  "slave_until", "slave_until_opts", "checksum", "$@87",
  "opt_checksum_type", "repair", "$@88", "opt_mi_repair_type",
  "mi_repair_types", "mi_repair_type", "analyze", "$@89",
  "analyze_table_list", "analyze_table_elem_spec",
  "opt_persistent_stat_clause", "persistent_stat_spec",
  "persistent_column_stat_spec", "$@90", "persistent_index_stat_spec",
  "$@91", "table_column_list", "table_index_list", "table_index_name",
  "binlog_base64_event", "check", "$@92", "opt_mi_check_type",
  "mi_check_types", "mi_check_type", "optimize", "$@93",
  "opt_no_write_to_binlog", "rename", "$@94", "rename_list",
  "table_to_table_list", "table_to_table", "keycache", "$@95",
  "keycache_list_or_parts", "keycache_list", "assign_to_keycache",
  "assign_to_keycache_parts", "key_cache_name", "preload", "$@96",
  "preload_list_or_parts", "preload_list", "preload_keys",
  "preload_keys_parts", "adm_partition", "$@97", "cache_keys_spec", "$@98",
  "cache_key_list_or_empty", "opt_ignore_leaves", "select", "select_init",
  "select_paren", "select_paren_derived", "select_init2", "$@99",
  "select_part2", "$@100", "$@101", "select_into", "select_from",
  "select_options", "select_option_list", "select_option",
  "select_lock_type", "select_item_list", "select_item", "remember_name",
  "remember_end", "select_alias", "opt_default_time_precision",
  "opt_time_precision", "optional_braces", "expr", "bool_pri", "predicate",
  "bit_expr", "or", "and", "not", "not2", "comp_op", "all_or_any",
  "opt_dyncol_type", "dyncol_type", "dyncall_create_element",
  "dyncall_create_list", "simple_expr", "function_call_keyword",
  "function_call_nonkeyword", "function_call_conflict",
  "geometry_function", "function_call_generic", "@102", "fulltext_options",
  "opt_natural_language_mode", "opt_query_expansion", "opt_udf_expr_list",
  "udf_expr_list", "udf_expr", "sum_expr", "$@103", "$@104", "$@105",
  "variable", "$@106", "variable_aux", "opt_distinct",
  "opt_gconcat_separator", "opt_gorder_clause", "in_sum_expr", "$@107",
  "cast_type", "$@108", "opt_expr_list", "expr_list", "ident_list_arg",
  "ident_list", "opt_expr", "opt_else", "when_list", "table_ref",
  "join_table_list", "esc_table_ref", "derived_table_list", "join_table",
  "$@109", "$@110", "$@111", "$@112", "$@113", "$@114", "inner_join",
  "normal_join", "table_factor", "$@115", "select_derived_union", "$@116",
  "$@117", "select_init2_derived", "select_part2_derived", "$@118",
  "$@119", "select_derived", "$@120", "select_derived2", "$@121", "$@122",
  "get_select_lex", "select_derived_init", "opt_outer",
  "index_hint_clause", "index_hint_type", "index_hint_definition", "$@123",
  "$@124", "index_hints_list", "opt_index_hints_list", "$@125",
  "opt_key_definition", "$@126", "opt_key_usage_list", "key_usage_element",
  "key_usage_list", "using_list", "interval", "interval_time_stamp",
  "date_time_type", "table_alias", "opt_table_alias", "opt_all",
  "where_clause", "$@127", "having_clause", "$@128", "opt_escape",
  "group_clause", "group_list", "olap_opt", "alter_order_clause",
  "alter_order_list", "alter_order_item", "opt_order_clause",
  "order_clause", "$@129", "order_list", "order_dir",
  "opt_limit_clause_init", "opt_limit_clause", "limit_clause",
  "limit_options", "limit_option", "limit_rows_option",
  "delete_limit_clause", "int_num", "ulong_num", "real_ulong_num",
  "ulonglong_num", "real_ulonglong_num", "dec_num_error", "dec_num",
  "choice", "procedure_clause", "$@130", "procedure_list",
  "procedure_list2", "procedure_item", "select_var_list_init", "$@131",
  "select_var_list", "select_var_ident", "into", "$@132",
  "into_destination", "$@133", "$@134", "do", "$@135", "drop", "$@136",
  "$@137", "$@138", "table_list", "table_name", "table_alias_ref_list",
  "table_alias_ref", "opt_if_exists", "opt_temporary", "insert", "$@139",
  "$@140", "replace", "$@141", "$@142", "insert_lock_option",
  "replace_lock_option", "insert2", "insert_table", "insert_field_spec",
  "$@143", "fields", "insert_values", "$@144", "$@145", "values_list",
  "ident_eq_list", "ident_eq_value", "equal", "opt_equal", "no_braces",
  "$@146", "opt_values", "values", "expr_or_default", "opt_insert_update",
  "$@147", "update", "$@148", "$@149", "update_list", "update_elem",
  "insert_update_list", "insert_update_elem", "opt_low_priority", "delete",
  "$@150", "single_multi", "$@151", "$@152", "$@153", "table_wild_list",
  "table_wild_one", "opt_wild", "opt_delete_options", "opt_delete_option",
  "truncate", "$@154", "opt_table_sym", "opt_profile_defs", "profile_defs",
  "profile_def", "opt_profile_args", "show", "$@155", "show_param",
  "$@156", "$@157", "show_engine_param", "master_or_binary", "opt_storage",
  "opt_db", "opt_full", "from_or_in", "binlog_in", "binlog_from",
  "wild_and_where", "describe", "$@158", "$@159", "describe_command",
  "opt_extended_describe", "opt_describe_column", "flush", "$@160",
  "flush_options", "$@161", "$@162", "opt_with_read_lock",
  "flush_options_list", "flush_option", "opt_table_list",
  "optional_flush_tables_arguments", "reset", "$@163", "reset_options",
  "reset_option", "$@164", "slave_reset_options", "purge", "$@165",
  "purge_options", "purge_option", "kill", "$@166", "kill_type",
  "kill_option", "kill_expr", "use", "load", "$@167", "$@168", "$@169",
  "$@170", "data_or_xml", "opt_local", "load_data_lock", "opt_duplicate",
  "opt_field_term", "field_term_list", "field_term", "opt_line_term",
  "line_term_list", "line_term", "opt_xml_rows_identified_by",
  "opt_ignore_lines", "lines_or_rows", "opt_field_or_var_spec",
  "fields_or_vars", "field_or_var", "opt_load_data_set_spec",
  "load_data_set_list", "load_data_set_elem", "text_literal",
  "text_string", "param_marker", "signed_literal", "literal",
  "NUM_literal", "insert_ident", "table_wild", "order_ident",
  "simple_ident", "simple_ident_nospvar", "simple_ident_q", "field_ident",
  "table_ident", "table_ident_opt_wild", "table_ident_nodb", "IDENT_sys",
  "TEXT_STRING_sys", "TEXT_STRING_literal", "TEXT_STRING_filesystem",
  "ident", "label_ident", "ident_or_text", "user", "keyword", "keyword_sp",
  "set", "$@171", "start_option_value_list", "$@172", "$@173", "$@174",
  "start_option_value_list_following_option_type", "$@175",
  "option_value_list_continued", "option_value_list", "$@176", "$@177",
  "option_value", "$@178", "option_type", "opt_var_type",
  "opt_var_ident_type", "option_value_following_option_type",
  "option_value_no_option_type", "internal_variable_name",
  "transaction_characteristics", "transaction_access_mode",
  "isolation_level", "transaction_access_mode_types", "isolation_types",
  "text_or_password", "set_expr_or_default", "lock", "$@179",
  "table_or_tables", "table_lock_list", "table_lock", "lock_option",
  "unlock", "$@180", "handler", "$@181", "handler_read_or_scan",
  "handler_scan_function", "handler_rkey_function", "$@182",
  "handler_rkey_mode", "revoke", "revoke_command", "grant",
  "grant_command", "opt_table", "grant_privileges", "opt_privileges",
  "object_privilege_list", "object_privilege", "$@183", "$@184", "$@185",
  "$@186", "opt_and", "require_list", "require_list_element",
  "grant_ident", "user_list", "grant_list", "via_or_with", "using_or_as",
  "grant_user", "opt_column_list", "column_list", "column_list_id",
  "require_clause", "grant_options", "opt_grant_option",
  "grant_option_list", "grant_option", "begin", "$@187", "opt_work",
  "opt_chain", "opt_release", "opt_savepoint", "commit", "rollback",
  "savepoint", "release", "union_clause", "union_list", "$@188",
  "union_opt", "opt_union_order_or_limit", "union_order_or_limit", "$@189",
  "order_or_limit", "union_option", "query_specification",
  "query_expression_body", "$@190", "subselect", "subselect_start",
  "subselect_end", "opt_query_expression_options",
  "query_expression_option_list", "query_expression_option",
  "view_or_trigger_or_sp_or_event", "definer_tail", "no_definer_tail",
  "definer_opt", "no_definer", "definer", "view_replace_or_algorithm",
  "view_replace", "view_algorithm", "view_suid", "view_tail", "$@191",
  "view_list_opt", "view_list", "view_select", "$@192", "view_select_aux",
  "view_check_option", "trigger_tail", "$@193", "$@194", "$@195",
  "udf_tail", "sf_tail", "$@196", "$@197", "$@198", "$@199", "$@200",
  "sp_tail", "$@201", "$@202", "$@203", "$@204", "xa", "xid",
  "begin_or_start", "opt_join_or_resume", "opt_one_phase", "opt_suspend",
  "$@205", "opt_migrate", "install", "uninstall", "keep_gcc_happy", 0
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,   636,   637,   638,   639,   640,   641,   642,   643,   644,
     645,   646,   647,   648,   649,   650,   651,   652,   653,   654,
     655,   656,   657,   658,   659,   660,   661,   662,   663,   664,
     665,   666,   667,   668,   669,   670,   671,   672,   673,   674,
     675,   676,   677,   678,   679,   680,   681,   682,   683,   684,
     685,   686,   687,   688,   689,   690,   691,   692,   693,   694,
     695,   696,   697,   698,   699,   700,   701,   702,   703,   704,
     705,   706,   707,   708,   709,   710,   711,   712,   713,   714,
     715,   716,   717,   718,   719,   720,   721,   722,   723,   724,
     725,   726,   727,   728,   729,   730,   731,   732,   733,   734,
     735,   736,   737,   738,   739,   740,   741,   742,   743,   744,
     745,   746,   747,   748,   749,   750,   751,   752,   753,   754,
     755,   756,   757,   758,   759,   760,   761,   762,   763,   764,
     765,   766,   767,   768,   769,   770,   771,   772,   773,   774,
     775,   776,   777,   778,   779,   780,   781,   782,   783,   784,
     785,   786,   787,   788,   789,   790,   791,   792,   793,   794,
     795,   796,   797,   798,   799,   800,   801,   802,   803,   804,
     805,   806,   807,   808,   809,   810,   811,   812,   813,   814,
     815,   816,   817,   818,   819,   820,   821,   822,   823,   824,
     825,   826,   827,   828,   829,   830,   831,   832,   833,   834,
     835,   836,   837,   838,   839,   840,   841,   842,   843,   844,
     845,   846,   847,   848,   849,   850,   851,   852,   853,   854,
     855,   856,   857,   858,   859,   860,   861,   862,   863,   864,
     865,   866,   867,   868,   869,   870,   871,   872,   873,   874,
     875,   876,   124,    38,    45,    43,    42,    47,    37,    94,
     126,    40,    41,    44,    33,   123,   125,    59,    64,    46,
      58
};
# endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint16 yyr1[] =
{
       0,   641,   642,   643,   642,   642,   644,   644,   645,   645,
     646,   646,   646,   646,   646,   646,   646,   646,   646,   646,
     646,   646,   646,   646,   646,   646,   646,   646,   646,   646,
     646,   646,   646,   646,   646,   646,   646,   646,   646,   646,
     646,   646,   646,   646,   646,   646,   646,   646,   646,   646,
     646,   646,   646,   646,   646,   646,   646,   646,   646,   646,
     646,   646,   646,   647,   648,   648,   649,   650,   650,   652,
     651,   653,   653,   654,   654,   655,   657,   656,   659,   658,
     660,   660,   661,   661,   661,   661,   661,   661,   661,   661,
     661,   661,   661,   661,   661,   661,   661,   661,   661,   662,
     662,   662,   663,   664,   664,   664,   664,   664,   665,   665,
     666,   668,   667,   669,   667,   670,   667,   671,   667,   672,
     667,   673,   667,   667,   667,   667,   667,   674,   675,   675,
     676,   676,   676,   676,   676,   676,   676,   678,   677,   680,
     679,   679,   681,   681,   681,   681,   682,   682,   683,   683,
     684,   684,   685,   685,   686,   686,   688,   687,   689,   689,
     689,   689,   689,   689,   689,   689,   689,   689,   689,   689,
     689,   690,   691,   691,   692,   692,   693,   693,   694,   694,
     694,   694,   694,   694,   694,   695,   695,   695,   696,   696,
     698,   697,   699,   699,   700,   700,   701,   701,   702,   702,
     703,   703,   704,   705,   706,   706,   707,   707,   708,   709,
     709,   709,   709,   710,   710,   711,   711,   712,   712,   714,
     713,   713,   715,   713,   713,   717,   716,   718,   718,   719,
     719,   720,   721,   721,   722,   723,   723,   724,   724,   724,
     724,   724,   725,   726,   726,   727,   727,   728,   728,   729,
     729,   730,   730,   730,   731,   731,   731,   731,   731,   731,
     731,   731,   731,   731,   731,   731,   732,   733,   733,   734,
     734,   735,   735,   735,   735,   735,   735,   735,   735,   735,
     735,   735,   735,   735,   737,   736,   739,   738,   741,   740,
     743,   742,   744,   745,   746,   748,   747,   749,   750,   750,
     750,   751,   751,   753,   754,   755,   752,   756,   756,   756,
     757,   757,   759,   760,   758,   762,   761,   763,   763,   764,
     764,   766,   767,   765,   769,   770,   768,   771,   771,   773,
     772,   774,   774,   776,   775,   778,   777,   780,   779,   781,
     782,   783,   781,   784,   781,   785,   785,   786,   786,   786,
     787,   788,   789,   790,   790,   791,   791,   792,   793,   794,
     794,   796,   795,   797,   797,   797,   798,   798,   798,   799,
     800,   800,   800,   801,   801,   801,   801,   801,   801,   801,
     801,   802,   803,   803,   803,   804,   804,   804,   804,   804,
     805,   806,   806,   806,   807,   807,   807,   807,   807,   807,
     807,   808,   809,   809,   809,   810,   810,   810,   811,   812,
     813,   814,   815,   816,   816,   816,   817,   818,   819,   820,
     821,   822,   823,   824,   825,   826,   826,   827,   827,   828,
     828,   830,   829,   829,   831,   829,   829,   832,   832,   833,
     834,   833,   835,   833,   836,   837,   837,   839,   838,   840,
     842,   841,   843,   844,   845,   844,   844,   844,   844,   844,
     846,   846,   847,   847,   848,   848,   849,   850,   851,   852,
     853,   853,   854,   855,   854,   856,   854,   857,   857,   858,
     859,   860,   860,   861,   861,   862,   862,   864,   863,   865,
     866,   867,   866,   868,   866,   869,   869,   870,   870,   871,
     871,   873,   874,   872,   875,   875,   876,   876,   877,   877,
     878,   878,   880,   879,   881,   882,   882,   883,   883,   884,
     884,   884,   884,   884,   884,   884,   884,   884,   886,   887,
     885,   888,   888,   889,   889,   890,   890,   891,   891,   892,
     892,   893,   893,   894,   895,   895,   896,   896,   897,   897,
     898,   898,   898,   899,   899,   899,   899,   899,   899,   899,
     899,   899,   899,   899,   899,   899,   899,   900,   899,   899,
     899,   899,   899,   899,   899,   899,   899,   899,   899,   899,
     899,   899,   899,   899,   901,   902,   903,   904,   905,   905,
     905,   905,   905,   905,   905,   906,   906,   906,   907,   907,
     908,   908,   908,   908,   909,   910,   910,   911,   911,   912,
     912,   914,   913,   915,   913,   916,   913,   917,   913,   913,
     913,   918,   918,   919,   920,   920,   921,   923,   922,   924,
     924,   925,   925,   926,   926,   926,   927,   927,   928,   928,
     929,   929,   929,   930,   931,   932,   932,   932,   932,   932,
     932,   932,   932,   932,   932,   932,   932,   932,   932,   932,
     932,   932,   932,   932,   932,   932,   932,   932,   932,   932,
     932,   932,   932,   932,   932,   932,   932,   932,   932,   932,
     933,   932,   934,   932,   932,   932,   935,   935,   935,   935,
     935,   935,   935,   935,   936,   937,   937,   938,   938,   939,
     939,   939,   939,   939,   940,   940,   940,   940,   940,   941,
     941,   941,   942,   942,   942,   943,   944,   944,   945,   945,
     946,   946,   946,   947,   947,   947,   947,   948,   948,   949,
     949,   950,   950,   951,   951,   952,   952,   952,   952,   952,
     952,   952,   952,   952,   952,   952,   952,   952,   952,   952,
     953,   954,   954,   955,   955,   956,   956,   957,   957,   958,
     958,   959,   959,   960,   960,   961,   962,   962,   963,   963,
     964,   964,   965,   965,   965,   966,   966,   966,   967,   967,
     967,   967,   967,   967,   967,   968,   968,   969,   969,   970,
     971,   971,   972,   972,   973,   973,   973,   973,   974,   974,
     974,   974,   974,   975,   975,   975,   975,   975,   976,   977,
     977,   978,   978,   979,   979,   980,   980,   980,   981,   981,
     982,   983,   984,   985,   985,   986,   986,   987,   987,   988,
     988,   989,   989,   990,   990,   991,   991,   992,   992,   993,
     993,   993,   993,   993,   993,   994,   994,   995,   996,   996,
     997,   997,   997,   998,   998,   999,   999,  1000,  1000,  1001,
    1002,  1002,  1003,  1003,  1005,  1004,  1006,  1004,  1004,  1007,
    1004,  1008,  1004,  1009,  1004,  1010,  1004,  1011,  1004,  1004,
    1004,  1004,  1004,  1004,  1012,  1012,  1012,  1012,  1013,  1013,
    1014,  1014,  1015,  1015,  1016,  1016,  1016,  1016,  1016,  1016,
    1016,  1016,  1016,  1016,  1017,  1016,  1016,  1018,  1016,  1019,
    1016,  1016,  1016,  1016,  1020,  1021,  1021,  1023,  1022,  1024,
    1024,  1024,  1026,  1025,  1027,  1028,  1027,  1029,  1029,  1030,
    1031,  1031,  1032,  1033,  1033,  1033,  1034,  1033,  1035,  1036,
    1033,  1033,  1033,  1033,  1033,  1033,  1033,  1033,  1033,  1033,
    1033,  1033,  1033,  1033,  1037,  1037,  1038,  1038,  1040,  1039,
    1041,  1041,  1042,  1042,  1043,  1043,  1044,  1044,  1044,  1045,
    1045,  1045,  1046,  1046,  1046,  1046,  1048,  1047,  1049,  1047,
    1047,  1047,  1050,  1047,  1047,  1051,  1052,  1052,  1053,  1053,
    1054,  1054,  1054,  1056,  1055,  1057,  1057,  1058,  1058,  1058,
    1059,  1059,  1060,  1060,  1062,  1061,  1063,  1063,  1063,  1065,
    1064,  1066,  1066,  1067,  1067,  1068,  1068,  1068,  1070,  1069,
    1071,  1071,  1072,  1073,  1073,  1074,  1074,  1075,  1076,  1075,
    1077,  1078,  1077,  1079,  1079,  1079,  1080,  1080,  1080,  1081,
    1081,  1082,  1084,  1083,  1085,  1085,  1086,  1086,  1087,  1087,
    1087,  1087,  1087,  1087,  1089,  1088,  1090,  1090,  1090,  1092,
    1091,  1091,  1093,  1093,  1094,  1094,  1095,  1097,  1096,  1098,
    1098,  1099,  1099,  1100,  1101,  1102,  1102,  1104,  1103,  1105,
    1105,  1106,  1106,  1107,  1108,  1110,  1109,  1112,  1111,  1113,
    1113,  1114,  1114,  1115,  1116,  1116,  1117,  1117,  1118,  1118,
    1120,  1119,  1122,  1123,  1121,  1124,  1124,  1124,  1124,  1124,
    1125,  1125,  1126,  1126,  1127,  1127,  1128,  1128,  1128,  1129,
    1129,  1129,  1130,  1130,  1130,  1131,  1131,  1132,  1133,  1134,
    1134,  1134,  1134,  1134,  1135,  1135,  1135,  1136,  1136,  1136,
    1137,  1137,  1138,  1138,  1138,  1138,  1138,  1138,  1138,  1138,
    1138,  1138,  1138,  1139,  1139,  1139,  1139,  1139,  1139,  1140,
    1140,  1140,  1140,  1140,  1140,  1140,  1140,  1140,  1140,  1140,
    1140,  1140,  1140,  1141,  1141,  1141,  1141,  1141,  1141,  1141,
    1141,  1141,  1141,  1141,  1141,  1141,  1141,  1141,  1142,  1142,
    1143,  1143,  1144,  1144,  1145,  1145,  1146,  1146,  1146,  1146,
    1146,  1146,  1147,  1147,  1148,  1148,  1149,  1149,  1149,  1149,
    1149,  1149,  1149,  1149,  1149,  1149,  1149,  1150,  1151,  1151,
    1152,  1152,  1152,  1152,  1152,  1152,  1152,  1152,  1152,  1152,
    1152,  1152,  1152,  1152,  1152,  1152,  1152,  1152,  1152,  1152,
    1152,  1152,  1152,  1152,  1152,  1152,  1152,  1152,  1152,  1152,
    1153,  1153,  1153,  1153,  1153,  1153,  1153,  1153,  1153,  1153,
    1153,  1153,  1153,  1153,  1153,  1153,  1153,  1153,  1153,  1153,
    1153,  1153,  1153,  1153,  1153,  1153,  1153,  1154,  1154,  1154,
    1154,  1154,  1154,  1154,  1154,  1154,  1154,  1154,  1154,  1154,
    1154,  1154,  1154,  1154,  1154,  1154,  1154,  1154,  1154,  1154,
    1154,  1154,  1154,  1154,  1155,  1155,  1155,  1155,  1155,  1155,
    1155,  1155,  1155,  1155,  1155,  1155,  1155,  1155,  1155,  1155,
    1155,  1155,  1156,  1156,  1156,  1156,  1156,  1156,  1156,  1156,
    1158,  1157,  1157,  1159,  1159,  1160,  1160,  1161,  1161,  1162,
    1162,  1163,  1163,  1164,  1165,  1165,  1165,  1165,  1165,  1165,
    1165,  1166,  1167,  1165,  1165,  1165,  1165,  1165,  1165,  1165,
    1165,  1165,  1165,  1165,  1168,  1165,  1170,  1169,  1171,  1171,
    1171,  1172,  1172,  1173,  1173,  1174,  1174,  1176,  1175,  1177,
    1177,  1177,  1177,  1177,  1177,  1177,  1177,  1177,  1177,  1177,
    1177,  1178,  1177,  1179,  1179,  1180,  1180,  1181,  1181,  1182,
    1182,  1183,  1183,  1184,  1184,  1185,  1185,  1186,  1186,  1187,
    1188,  1188,  1189,  1189,  1190,  1191,  1190,  1192,  1190,  1190,
    1193,  1190,  1194,  1190,  1190,  1195,  1190,  1196,  1190,  1190,
    1197,  1197,  1197,  1198,  1198,  1200,  1199,  1199,  1199,  1201,
    1202,  1203,  1201,  1204,  1206,  1207,  1205,  1209,  1208,  1211,
    1212,  1210,  1213,  1214,  1215,  1215,  1216,  1216,  1216,  1216,
    1217,  1217,  1219,  1218,  1220,  1218,  1221,  1221,  1222,  1223,
    1222,  1225,  1224,  1226,  1226,  1227,  1227,  1228,  1228,  1229,
    1229,  1230,  1230,  1230,  1230,  1230,  1230,  1230,  1230,  1230,
    1230,  1230,  1230,  1231,  1231,  1231,  1231,  1231,  1231,  1231,
    1231,  1231,  1232,  1232,  1232,  1232,  1233,  1233,  1233,  1234,
    1234,  1235,  1235,  1236,  1237,  1236,  1238,  1239,  1238,  1240,
    1240,  1241,  1241,  1242,  1242,  1243,  1243,  1243,  1244,  1245,
    1245,  1246,  1247,  1247,  1249,  1248,  1250,  1250,  1251,  1251,
    1251,  1252,  1252,  1253,  1253,  1254,  1254,  1254,  1255,  1255,
    1255,  1256,  1256,  1256,  1256,  1256,  1257,  1258,  1258,  1258,
    1258,  1259,  1259,  1259,  1260,  1260,  1260,  1260,  1260,  1260,
    1261,  1261,  1261,  1261,  1261,  1262,  1262,  1262,  1262,  1262,
    1263,  1263,  1263,  1263,  1263,  1264,  1265,  1265,  1266,  1266,
    1267,  1268,  1267,  1269,  1269,  1270,  1270,  1271,  1273,  1272,
    1274,  1274,  1275,  1275,  1277,  1276,  1279,  1280,  1278,  1278,
    1278,  1282,  1281,  1284,  1283,  1285,  1283,  1283,  1283,  1283,
    1283,  1283,  1286,  1283,  1283,  1283,  1283,  1283,  1283,  1287,
    1287,  1288,  1289,  1289,  1290,  1291,  1291,  1292,  1292,  1294,
    1295,  1293,  1297,  1298,  1296,  1299,  1299,  1299,  1299,  1300,
    1300,  1301,  1301,  1302,  1303,  1303,  1303,  1304,  1303,  1305,
    1305,  1306,  1306,  1307,  1306,  1308,  1306,  1309,  1309,  1310,
    1310,  1311,  1312,  1312,  1313,  1313,  1315,  1314,  1316,  1316,
    1317,  1317,  1318,  1318,  1319,  1320,  1319,  1322,  1323,  1321,
    1324,  1324,  1325,  1326,  1326,  1327,  1328,  1328,  1330,  1329,
    1332,  1331,  1333,  1331,  1334,  1331,  1335,  1335,  1336,  1336,
    1337,  1337,  1338,  1338,  1339,  1339,  1339,  1341,  1340,  1342,
    1342,  1343,  1343,  1344,  1344,  1345,  1345,  1345,  1345,  1345,
    1345,  1345,  1345,  1345,  1346,  1346,  1348,  1347,  1349,  1349,
    1349,  1349,  1349,  1349,  1349,  1349,  1349,  1349,  1349,  1349,
    1349,  1349,  1350,  1349,  1351,  1349,  1349,  1349,  1349,  1349,
    1349,  1349,  1349,  1349,  1349,  1349,  1349,  1349,  1349,  1349,
    1349,  1349,  1349,  1349,  1349,  1349,  1349,  1349,  1349,  1349,
    1349,  1349,  1349,  1349,  1349,  1349,  1349,  1349,  1349,  1349,
    1349,  1349,  1349,  1349,  1352,  1352,  1352,  1353,  1353,  1354,
    1354,  1355,  1355,  1356,  1356,  1357,  1357,  1358,  1358,  1359,
    1359,  1360,  1360,  1360,  1362,  1361,  1363,  1361,  1364,  1364,
    1365,  1365,  1365,  1366,  1366,  1366,  1368,  1367,  1370,  1371,
    1369,  1369,  1372,  1372,  1373,  1373,  1374,  1374,  1374,  1374,
    1374,  1374,  1374,  1374,  1374,  1374,  1374,  1374,  1374,  1374,
    1374,  1374,  1374,  1374,  1374,  1375,  1375,  1376,  1376,  1378,
    1377,  1379,  1379,  1381,  1380,  1380,  1380,  1382,  1382,  1384,
    1383,  1385,  1386,  1386,  1388,  1387,  1389,  1389,  1389,  1390,
    1390,  1390,  1391,  1391,  1392,  1394,  1395,  1396,  1397,  1393,
    1398,  1398,  1399,  1399,  1400,  1400,  1400,  1401,  1401,  1401,
    1402,  1402,  1403,  1403,  1404,  1404,  1404,  1404,  1405,  1405,
    1406,  1406,  1407,  1407,  1408,  1408,  1409,  1409,  1410,  1410,
    1411,  1411,  1411,  1412,  1412,  1413,  1413,  1414,  1414,  1415,
    1415,  1416,  1417,  1417,  1417,  1417,  1418,  1418,  1418,  1419,
    1420,  1420,  1420,  1421,  1421,  1421,  1421,  1421,  1421,  1421,
    1421,  1421,  1421,  1421,  1421,  1422,  1422,  1422,  1422,  1422,
    1423,  1423,  1424,  1424,  1425,  1426,  1426,  1427,  1427,  1428,
    1428,  1428,  1429,  1429,  1429,  1429,  1430,  1430,  1430,  1431,
    1431,  1432,  1433,  1433,  1434,  1435,  1436,  1437,  1437,  1438,
    1438,  1439,  1439,  1439,  1440,  1440,  1440,  1441,  1441,  1441,
    1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,
    1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,
    1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,
    1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,
    1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,  1441,
    1441,  1441,  1441,  1441,  1441,  1441,  1442,  1442,  1442,  1442,
    1442,  1442,  1442,  1442,  1442,  1442,  1442,  1442,  1442,  1442,
    1442,  1442,  1442,  1442,  1442,  1442,  1442,  1442,  1442,  1442,
    1442,  1442,  1442,  1442,  1442,  1442,  1442,  1442,  1442,  1442,
    1442,  1442,  1442,  1442,  1442,  1442,  1442,  1442,  1442,  1442,
    1442,  1442,  1442,  1442,  1442,  1442,  1442,  1442,  1442,  1442,
    1442,  1442,  1442,  1442,  1442,  1442,  1442,  1442,  1442,  1442,
    1442,  1442,  1442,  1442,  1442,  1442,  1442,  1442,  1442,  1442,
    1442,  1442,  1442,  1442,  1442,  1442,  1442,  1442,  1442,  1442,
    1442,  1442,  1442,  1442,  1442,  1442,  1442,  1442,  1442,  1442,
    1442,  1442,  1442,  1442,  1442,  1442,  1442,  1442,  1442,  1442,
    1442,  1442,  1442,  1442,  1442,  1442,  1442,  1442,  1442,  1442,
    1442,  1442,  1442,  1442,  1442,  1442,  1442,  1442,  1442,  1442,
    1442,  1442,  1442,  1442,  1442,  1442,  1442,  1442,  1442,  1442,
    1442,  1442,  1442,  1442,  1442,  1442,  1442,  1442,  1442,  1442,
    1442,  1442,  1442,  1442,  1442,  1442,  1442,  1442,  1442,  1442,
    1442,  1442,  1442,  1442,  1442,  1442,  1442,  1442,  1442,  1442,
    1442,  1442,  1442,  1442,  1442,  1442,  1442,  1442,  1442,  1442,
    1442,  1442,  1442,  1442,  1442,  1442,  1442,  1442,  1442,  1442,
    1442,  1442,  1442,  1442,  1442,  1442,  1442,  1442,  1442,  1442,
    1442,  1442,  1442,  1442,  1442,  1442,  1442,  1442,  1442,  1442,
    1442,  1442,  1442,  1442,  1442,  1442,  1442,  1442,  1442,  1442,
    1442,  1442,  1442,  1442,  1442,  1442,  1442,  1442,  1442,  1442,
    1442,  1442,  1442,  1442,  1442,  1442,  1442,  1442,  1442,  1442,
    1442,  1442,  1442,  1442,  1442,  1442,  1442,  1442,  1442,  1442,
    1442,  1442,  1442,  1442,  1442,  1442,  1442,  1442,  1442,  1442,
    1442,  1442,  1442,  1442,  1442,  1442,  1442,  1442,  1442,  1442,
    1442,  1442,  1442,  1442,  1442,  1442,  1442,  1442,  1442,  1442,
    1442,  1442,  1442,  1442,  1442,  1442,  1442,  1442,  1442,  1442,
    1442,  1442,  1442,  1442,  1442,  1442,  1442,  1442,  1442,  1442,
    1442,  1442,  1444,  1443,  1446,  1445,  1447,  1445,  1448,  1445,
    1450,  1449,  1449,  1451,  1451,  1453,  1452,  1454,  1452,  1456,
    1455,  1455,  1457,  1457,  1457,  1458,  1458,  1458,  1458,  1459,
    1459,  1459,  1459,  1460,  1461,  1461,  1461,  1461,  1461,  1461,
    1461,  1461,  1462,  1462,  1462,  1463,  1463,  1463,  1463,  1464,
    1465,  1466,  1466,  1467,  1467,  1467,  1467,  1468,  1468,  1468,
    1469,  1469,  1469,  1469,  1469,  1471,  1470,  1472,  1472,  1473,
    1473,  1474,  1475,  1475,  1475,  1475,  1475,  1477,  1476,  1478,
    1478,  1479,  1478,  1480,  1480,  1481,  1481,  1482,  1482,  1482,
    1482,  1483,  1482,  1484,  1484,  1484,  1484,  1484,  1485,  1486,
    1486,  1486,  1486,  1486,  1487,  1488,  1488,  1488,  1488,  1489,
    1489,  1490,  1490,  1491,  1491,  1492,  1492,  1494,  1493,  1495,
    1493,  1496,  1493,  1497,  1493,  1493,  1493,  1493,  1493,  1493,
    1493,  1493,  1493,  1493,  1493,  1493,  1493,  1493,  1493,  1493,
    1493,  1493,  1493,  1493,  1493,  1493,  1493,  1493,  1493,  1493,
    1493,  1498,  1498,  1499,  1499,  1500,  1500,  1500,  1501,  1501,
    1501,  1501,  1502,  1502,  1503,  1503,  1504,  1504,  1505,  1505,
    1506,  1506,  1506,  1506,  1506,  1507,  1507,  1508,  1508,  1509,
    1510,  1510,  1510,  1510,  1510,  1511,  1511,  1512,  1512,  1513,
    1513,  1514,  1514,  1514,  1514,  1514,  1516,  1515,  1517,  1517,
    1518,  1518,  1518,  1519,  1519,  1519,  1520,  1520,  1521,  1522,
    1522,  1523,  1524,  1525,  1525,  1527,  1526,  1528,  1528,  1528,
    1529,  1529,  1531,  1530,  1532,  1532,  1533,  1533,  1533,  1534,
    1534,  1535,  1536,  1535,  1537,  1538,  1539,  1540,  1540,  1541,
    1541,  1542,  1542,  1542,  1542,  1542,  1542,  1542,  1542,  1543,
    1543,  1543,  1544,  1544,  1544,  1544,  1544,  1545,  1545,  1545,
    1545,  1545,  1545,  1546,  1546,  1547,  1548,  1549,  1549,  1549,
    1550,  1551,  1551,  1551,  1552,  1552,  1552,  1554,  1553,  1555,
    1555,  1556,  1556,  1558,  1557,  1559,  1559,  1560,  1560,  1560,
    1560,  1562,  1563,  1564,  1561,  1565,  1565,  1567,  1568,  1569,
    1570,  1571,  1566,  1573,  1574,  1575,  1576,  1572,  1577,  1577,
    1577,  1577,  1577,  1577,  1578,  1578,  1578,  1579,  1579,  1580,
    1580,  1580,  1581,  1581,  1582,  1583,  1582,  1584,  1584,  1585,
    1585,  1586,  1586,  1587
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     1,     0,     4,     2,     0,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     3,     1,     1,     4,     1,     2,     0,
       4,     0,     2,     3,     1,     2,     0,     3,     0,     6,
       1,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     5,     1,     0,
       1,     3,     1,     3,     3,     3,     3,     3,     0,     1,
       1,     0,     7,     0,    13,     0,    13,     0,    13,     0,
       6,     0,     3,     4,     4,     3,     2,    10,     1,     3,
       2,     2,     2,     2,     2,     2,     2,     0,    13,     0,
       6,     2,     0,     1,     3,     1,     0,     2,     0,     2,
       0,     1,     3,     4,     0,     2,     0,     2,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     0,     3,     1,     0,     2,     0,     2,     2,     2,
       2,     2,     3,     3,     1,     1,     1,     2,     3,     3,
       0,     4,     0,     3,     0,     1,     3,     1,     0,     1,
       3,     1,     0,     3,     0,     1,     3,     1,     4,     0,
       1,     1,     1,     0,     3,     2,     3,     0,     3,     0,
       5,     5,     0,     7,     5,     0,     2,     1,     1,     1,
       3,     1,     1,     1,     3,     0,     1,     1,     1,     1,
       2,     1,     3,     1,     1,     0,     1,     0,     2,     3,
       5,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     3,     1,     3,     0,
       2,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     0,     5,     0,     2,     0,     3,
       0,     2,     2,     2,     2,     0,     6,     2,     0,     2,
       1,     1,     3,     0,     0,     0,     7,     0,     2,     2,
       1,     1,     0,     0,     8,     0,     6,     1,     2,     1,
       2,     0,     0,     6,     0,     0,     6,     0,     2,     0,
       5,     0,     1,     0,     5,     0,     2,     0,     5,     4,
       0,     0,     8,     0,     7,     1,     1,     1,     1,     1,
       2,     4,     5,     0,     4,     4,     4,     3,     3,     2,
       2,     0,     2,     1,     2,     3,     1,     1,     1,     1,
       1,     2,     3,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     2,     3,     1,     1,     1,     1,     1,
       1,     1,     2,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     2,     3,     1,     1,     1,     2,     2,
       2,     1,     1,     1,     1,     2,     3,     3,     3,     3,
       3,     3,     3,     3,     4,     0,     1,     1,     1,     1,
       1,     0,     7,     3,     0,     5,     1,     2,     4,     0,
       0,     5,     0,     7,     1,     0,     1,     0,     4,     0,
       0,     3,     5,     5,     0,     4,     2,     2,     2,     2,
       0,     1,     0,     1,     1,     3,     1,     4,     5,     5,
       0,     2,     0,     0,     7,     0,     9,     1,     3,     1,
       1,     0,     2,     0,     3,     1,     3,     0,     6,     1,
       0,     0,     5,     0,     4,     1,     1,     1,     3,     1,
       3,     0,     0,     5,     1,     3,     1,     1,     0,     3,
       1,     3,     0,     4,     1,     0,     1,     2,     1,     3,
       4,     3,     3,     3,     3,     4,     4,     3,     0,     0,
       6,     0,     1,     0,     1,     1,     2,     1,     1,     0,
       1,     1,     2,     1,     0,     3,     0,     1,     1,     2,
       1,     2,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     0,     6,     1,
       1,     3,     4,     4,     2,     2,     2,     3,     3,     3,
       3,     3,     3,     3,     4,     4,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     2,
       1,     1,     1,     1,     1,     1,     3,     1,     1,     2,
       2,     0,     8,     0,     9,     0,     9,     0,     9,     8,
       2,     0,     1,     4,     0,     1,     2,     0,     3,     2,
       8,     0,     2,     0,     1,     1,     0,     1,     2,     1,
       1,     2,     2,     4,     3,     3,     3,     3,     1,     2,
       1,     1,     3,     2,     3,     2,     2,     1,     3,     3,
       2,     3,     1,     2,     2,     2,     1,     2,     1,     1,
       1,     2,     3,     2,     3,     2,     2,     3,     3,     3,
       0,     6,     0,     6,     2,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     2,     2,     1,     2,
       1,     2,     3,     2,     1,     1,     1,     1,     1,     1,
       1,     2,     0,     1,     1,     5,     0,     1,     2,     1,
       1,     1,     1,     3,     3,     3,     3,     0,     1,     0,
       1,     0,     1,     2,     1,     1,     2,     2,     4,     1,
       3,     2,     1,     2,     2,     2,     3,     3,     3,     3,
       2,     2,     1,     2,     1,     1,     1,     1,     1,     0,
       2,     1,     1,     1,     1,     1,     0,     2,     1,     1,
       0,     1,     1,     2,     2,     1,     2,     2,     0,     1,
       1,     1,     3,     1,     3,     0,     1,     0,     1,     5,
       0,     3,     3,     1,     0,     2,     2,     2,     0,     3,
       3,     6,     6,     1,     1,     2,     2,     2,     1,     2,
       2,     1,     1,     0,     1,     1,     1,     1,     0,     1,
       1,     1,     0,     1,     2,     0,     1,     0,     1,     0,
       1,     1,     2,     1,     2,     1,     2,     2,     2,     3,
       2,     3,     3,     3,     3,     1,     1,     1,     1,     3,
       1,     1,     1,     4,     2,     1,     4,     0,     1,     2,
       0,     2,     1,     3,     0,     6,     0,     5,     7,     0,
       5,     0,     5,     0,     5,     0,     4,     0,    10,     3,
       4,     3,     3,     7,     0,     3,     1,     4,     0,     3,
       0,     2,     0,     1,     0,     2,     2,     2,     2,     1,
       1,     1,     4,     4,     0,     6,     4,     0,     5,     0,
       6,     4,     3,     1,     2,     1,     1,     0,     6,     0,
       3,     2,     0,     5,     0,     0,     6,     1,     3,     1,
       1,     3,     3,     3,     2,     4,     0,     7,     0,     0,
       8,     5,     5,     3,     4,     2,     2,     6,     5,     3,
       5,     1,     1,     1,     0,     1,     0,     1,     0,     2,
       0,     1,     2,     1,     1,     1,     0,     1,     1,     0,
       2,     1,     0,     1,     1,     1,     0,     6,     0,     5,
       4,     4,     0,     6,     4,     3,     0,     1,     1,     3,
       3,     2,     2,     0,     2,     1,     3,     0,     1,     1,
       0,     2,     1,     3,     0,     5,     0,     1,     1,     0,
       6,     0,     1,     1,     2,     1,     1,     1,     0,     5,
       1,     3,     2,     0,     3,     1,     4,     1,     0,     4,
       1,     0,     4,     0,     1,     3,     0,     1,     3,     1,
       1,     2,     0,     5,     0,     1,     1,     2,     1,     1,
       1,     1,     1,     2,     0,     5,     0,     1,     1,     0,
       4,     4,     3,     5,     1,     3,     3,     0,     6,     1,
       1,     1,     3,     2,     3,     1,     1,     0,     6,     1,
       1,     1,     3,     3,     4,     0,     6,     0,     2,     0,
       4,     0,     2,     1,     2,     4,     2,     3,     2,     3,
       0,     3,     0,     0,     6,     2,     1,     1,     2,     2,
       8,     4,     0,     1,     2,     1,     1,     1,     1,     0,
       2,     4,     3,     1,     1,     3,     4,     0,     0,     0,
       2,     2,     1,     1,     0,     2,     3,     0,     2,     3,
       0,     2,     3,     3,     3,     2,     3,     4,     3,     4,
       3,     4,     1,     3,     4,     3,     3,     6,     1,     5,
       6,     5,     7,     6,     8,     5,     6,     4,     4,     5,
       3,     4,     1,     3,     3,     3,     3,     3,     3,     5,
       5,     3,     3,     3,     3,     3,     3,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     0,     2,     1,     2,     1,     1,
       1,     2,     2,     1,     1,     2,     2,     4,     1,     3,
       1,     1,     1,     1,     1,     3,     1,     1,     1,     1,
       3,     2,     2,     2,     2,     3,     3,     5,     6,     4,
       4,     7,     2,     6,     5,     6,     6,     4,     4,     5,
       4,     6,     2,     4,     4,     4,    10,     6,     8,     6,
       4,     4,     6,     4,     4,     4,     6,     4,     7,     7,
       7,     6,     6,     6,     6,     3,     4,     6,     8,     2,
       2,     8,     8,     6,     6,     2,     6,     6,     8,     8,
       6,     8,     6,     2,     8,     8,     2,     2,     2,     6,
       6,     4,     4,     8,     4,     4,     4,     4,     3,     8,
       4,     4,     6,     4,     4,     4,     6,     8,     6,     4,
       6,     1,     6,     4,     4,     4,     4,     4,     6,     4,
       0,     5,     6,     2,     3,     0,     4,     0,     3,     0,
       1,     1,     3,     4,     4,     5,     4,     4,     4,     5,
       4,     0,     0,     7,     4,     5,     4,     5,     4,     4,
       4,     4,     4,     5,     0,     8,     0,     3,     3,     1,
       4,     0,     1,     0,     2,     0,     1,     0,     3,     2,
       3,     2,     1,     1,     2,     1,     2,     1,     2,     2,
       2,     0,     3,     0,     1,     1,     3,     1,     3,     1,
       3,     0,     1,     0,     2,     4,     5,     1,     1,     1,
       1,     4,     1,     3,     3,     0,     6,     0,     8,     4,
       0,     8,     0,    10,     6,     0,     8,     0,    10,     6,
       1,     2,     1,     1,     2,     0,     4,     3,     5,     2,
       0,     0,     7,     1,     0,     0,     6,     0,     3,     0,
       0,     5,     0,     1,     0,     1,     0,     2,     3,     3,
       1,     1,     0,     7,     0,     7,     1,     2,     0,     0,
       2,     0,     2,     0,     1,     1,     1,     1,     3,     1,
       3,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     0,     1,     1,     0,
       2,     0,     1,     0,     0,     3,     0,     0,     3,     2,
       0,     0,     4,     4,     2,     0,     1,     1,     3,     3,
       1,     2,     0,     1,     0,     4,     4,     2,     0,     1,
       1,     0,     1,     0,     1,     2,     5,     4,     1,     3,
       3,     1,     1,     1,     1,     1,     1,     0,     2,     3,
       4,     1,     2,     2,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       0,     0,     6,     0,     1,     3,     1,     3,     0,     2,
       3,     1,     2,     1,     0,     3,     0,     0,     7,     2,
       1,     0,     3,     0,     7,     0,     7,     4,     6,     4,
       4,     4,     0,     6,     4,     4,     5,     6,     4,     1,
       3,     1,     1,     3,     1,     0,     2,     0,     1,     0,
       0,     8,     0,     0,     6,     0,     1,     1,     1,     1,
       1,     2,     1,     1,     1,     3,     4,     0,     3,     3,
       1,     2,     2,     0,     3,     0,     5,     3,     1,     3,
       1,     3,     1,     1,     0,     1,     0,     4,     0,     1,
       3,     1,     1,     1,     0,     0,     6,     0,     0,    11,
       3,     1,     3,     3,     1,     3,     0,     1,     0,     4,
       0,     6,     0,     5,     0,     6,     1,     3,     2,     4,
       0,     2,     0,     2,     1,     1,     1,     0,     4,     0,
       1,     0,     1,     1,     3,     1,     1,     2,     2,     2,
       1,     1,     1,     1,     0,     3,     0,     3,     2,     4,
       4,     3,     4,     4,     1,     3,     3,     3,     3,     6,
       2,     2,     0,     6,     0,     7,     5,     2,     1,     1,
       1,     5,     5,     2,     2,     1,     4,     3,     2,     3,
       2,     2,     1,     3,     4,     3,     3,     2,     3,     2,
       3,     1,     1,     1,     1,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     1,     1,     1,     1,     1,     0,
       1,     0,     2,     0,     1,     1,     1,     0,     2,     0,
       2,     0,     2,     2,     0,     4,     0,     4,     1,     1,
       0,     1,     1,     0,     1,     1,     0,     4,     0,     0,
       5,     1,     0,     4,     3,     1,     2,     2,     2,     2,
       2,     3,     2,     1,     1,     1,     1,     2,     1,     1,
       1,     1,     1,     1,     1,     0,     1,     0,     3,     0,
       3,     3,     1,     0,     4,     1,     2,     0,     1,     0,
       3,     3,     2,     2,     0,     5,     0,     1,     1,     0,
       1,     1,     1,     2,     2,     0,     0,     0,     0,    21,
       1,     1,     0,     1,     0,     1,     1,     0,     1,     1,
       0,     2,     2,     1,     3,     4,     3,     3,     0,     2,
       2,     1,     3,     3,     0,     4,     0,     3,     1,     1,
       0,     3,     2,     3,     1,     1,     2,     0,     2,     3,
       1,     5,     1,     1,     2,     2,     1,     1,     1,     1,
       1,     2,     2,     1,     1,     1,     1,     1,     1,     1,
       2,     2,     2,     2,     2,     1,     1,     1,     1,     1,
       1,     1,     3,     5,     1,     1,     1,     1,     1,     3,
       4,     5,     1,     5,     3,     2,     1,     3,     2,     2,
       4,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     3,     2,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     0,     3,     0,     3,     0,     3,     0,     3,
       0,     3,     2,     0,     2,     0,     2,     0,     4,     0,
       3,     1,     1,     1,     1,     0,     1,     1,     1,     0,
       2,     2,     2,     3,     3,     4,     6,     2,     3,     3,
       3,     5,     1,     3,     3,     1,     1,     3,     3,     1,
       3,     2,     2,     2,     2,     2,     1,     1,     4,     4,
       1,     1,     1,     1,     1,     0,     4,     1,     1,     1,
       3,     3,     1,     1,     2,     2,     2,     0,     3,     4,
       3,     0,     7,     1,     2,     1,     1,     1,     1,     1,
       1,     0,     5,     1,     1,     1,     1,     1,     3,     6,
       6,     6,     7,     5,     3,     8,     8,     8,     6,     0,
       1,     1,     2,     0,     1,     1,     3,     0,     3,     0,
       3,     0,     3,     0,     3,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     2,     2,     1,     3,
       2,     2,     2,     2,     2,     2,     2,     2,     1,     1,
       2,     0,     1,     3,     1,     2,     2,     2,     1,     3,
       3,     1,     1,     3,     1,     3,     1,     1,     1,     1,
       4,     5,     4,     6,     1,     0,     3,     3,     1,     1,
       0,     2,     2,     2,     2,     0,     2,     0,     3,     2,
       1,     2,     2,     2,     2,     2,     0,     3,     0,     1,
       0,     3,     2,     0,     1,     2,     0,     1,     4,     4,
       5,     2,     3,     0,     1,     0,     4,     0,     1,     1,
       0,     1,     0,     2,     2,     1,     0,     1,     1,     2,
       3,     2,     0,     6,     3,     0,     0,     0,     1,     2,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     2,
       2,     3,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     0,     3,     1,     2,     1,
       2,     3,     3,     3,     0,     3,     3,     0,     7,     0,
       3,     1,     3,     0,     3,     2,     4,     0,     3,     4,
       4,     0,     0,     0,    16,     8,     7,     0,     0,     0,
       0,     0,    15,     0,     0,     0,     0,    12,     4,     4,
       3,     4,     3,     2,     1,     3,     5,     1,     1,     0,
       1,     1,     0,     2,     0,     0,     3,     0,     2,     5,
       3,     3,     3,     1
};

/* YYDEFACT[STATE-NAME] -- Default rule to reduce with in state
   STATE-NUM when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
       0,   958,  1056,  2546,     0,     0,     0,     0,     0,     0,
    2548,   121,    64,  1698,  1818,  1819,  1611,  1637,     2,     0,
    1056,   171,     0,    76,  1639,     0,  1874,     0,     0,  1056,
       0,   450,     0,  1869,     0,     0,  1056,  1642,  1859,   245,
     171,  2548,     0,  1102,  2352,  1736,     0,   108,     0,     0,
    1719,     0,  2427,  1687,     0,     0,  2683,     0,     0,     3,
       8,    19,     0,    40,    24,    28,    14,    18,    13,    53,
      47,    38,    37,    10,    55,    56,    16,    44,    11,    12,
      15,    36,    43,    32,    39,    51,  1093,    22,    23,    29,
      45,    60,    20,    57,    54,    21,  1820,    25,    46,    41,
      33,    61,    34,    52,    35,    59,    27,    48,    26,     9,
      17,    49,    50,    42,    62,    30,    58,    31,     0,   892,
       0,     0,     0,     0,     0,     0,     0,   960,   875,  2613,
    2614,  2615,  1058,  1057,     0,  2548,  1984,  1041,  1067,  2056,
    2057,  2058,  2059,  2060,  2061,  2062,  2063,  1998,  2064,  2065,
    2067,  2066,  2068,  2069,  2070,  1999,  2000,  2071,  2072,  2073,
    2075,  2074,  2076,  2001,  2002,  2077,  2078,  2079,  2080,  2003,
    2005,  2004,  2081,  2084,  2083,  2082,  2006,  2085,  2086,  2087,
    2089,  2007,  2008,  2009,  2010,  2011,  2088,  2012,  2090,  2013,
    2091,  2092,  2093,  2094,  2095,  2096,  2097,  2099,  2098,  2014,
    2100,  2101,  2102,  2103,  2104,  2106,  2105,  2107,  2108,  2109,
    2015,  2110,  2111,  2112,  2113,  2114,  2115,  2116,  2016,  2117,
    2118,  2119,  2136,  2017,  2120,  2123,  2122,  2121,  2124,  2125,
    2126,  2128,  2127,  2129,  2018,  2019,  2130,  2131,  2132,  2134,
    2133,  2138,  2139,  2140,  2020,  2135,  2137,  2330,  2141,  2142,
    2144,  2143,  2145,  2147,  2146,  2021,  2149,  2148,  2022,  2023,
    2150,  2151,  1982,  2152,  1983,  2153,  2156,  2157,  2154,  2158,
    2163,  2024,  2155,  2159,  2160,  2161,  2162,  2164,  2025,  2166,
    2165,  2167,  2168,  2169,  2170,  2171,  2172,  2173,  2174,  2175,
    2187,  2179,  2180,  2182,  2183,  2185,  2181,  2186,  2190,  2189,
    2191,  2192,  2193,  2194,  2195,  2188,  2177,  2184,  2178,  2196,
    2197,  2176,  2198,  2199,  2200,  2201,  2202,  2203,  2204,  2205,
    2206,  2207,  2208,  2210,  2209,  2211,  2212,  2213,  2214,  2215,
    2216,  2218,  2217,  2219,  2220,  2221,  2223,  2222,  2225,  2226,
    2026,  2224,  2227,  2228,  2229,  2230,  2232,  2231,  2027,  2029,
    2028,  2030,  2233,  2234,  2031,  2235,  2236,  2237,  2032,  2238,
    2239,  2240,  2242,  2241,  2243,  2244,  2033,  2034,  2245,  2246,
    2247,  2248,  2249,  2250,  2251,  2252,  2253,  2254,  2255,  2256,
    2257,  2258,  2260,  2259,  2261,  2262,  2263,  2264,  2265,  2266,
    2267,  2035,  2268,  2036,  2269,  2270,  2037,  2271,  2038,  2272,
    2273,  2039,  2274,  2275,  2276,  2277,  2278,  2279,  2040,  2280,
    2281,  2282,  2041,  2284,  2283,  2285,  2042,  2287,  2288,  2043,
    2286,  2045,  2046,  2289,  2290,  2044,  2291,  2047,  2292,  2293,
    2295,  2294,  2296,  2297,  2298,  2048,  2299,  2049,  2300,  2301,
    2302,  2303,  2304,  2306,  2305,  2307,  2308,  2309,  2310,  2313,
    2315,  2312,  2314,  2311,  2316,  2317,  2318,  2319,  2323,  2324,
    2325,  2326,  2320,  2321,  2322,  2050,  2327,  2328,  2329,  2331,
    2332,  2334,  2333,  2051,  2052,  2335,  2336,  2055,  2337,  2338,
    2339,  2343,  2340,  2351,  2341,  2342,  2345,  2344,  2346,  2347,
    2053,  2348,  2054,  2349,  2350,   190,  1987,   173,  1988,  1997,
     108,  2418,  2417,  1004,  1042,  2549,  2550,   544,   820,     0,
       0,   821,     0,   543,   819,   171,  2615,   126,     0,   540,
     541,     0,     0,     0,  1712,     0,  1635,  1635,  1635,  1635,
       0,  1635,  1635,     0,  1638,  1635,   171,  1635,     0,    69,
    1826,     0,     0,     0,     0,  1981,     0,  1645,     0,     0,
    1876,  1890,     0,  1891,  1885,  2415,     0,  1127,     0,     0,
       0,     0,   171,  1059,     0,  1696,     0,   235,   244,   246,
     247,   243,     0,  2550,  2561,  1094,  1100,  1112,     0,  1803,
     247,     0,   109,   110,     0,   108,   986,     0,   108,  1720,
    1717,     0,     0,     0,  1696,  1884,  2667,     0,     0,     0,
    2663,     0,  2668,     0,  1102,     0,     0,     1,     5,     0,
       0,  2131,  2237,  1816,  1814,  1976,     0,   866,   893,     0,
     871,     0,   869,  1993,  1992,  1991,     0,   882,   881,   879,
       0,   411,     0,   964,   965,   959,   961,   963,     0,  2624,
     873,  1018,  2547,     0,   192,     0,     0,     0,     0,     0,
    2553,     0,     0,     0,     0,   125,     0,     0,     0,   122,
    1127,  1127,  2615,  2617,  2619,   544,   542,   544,   544,   544,
    1716,  1715,  1714,     0,  1712,  2057,  1998,  2070,     0,  1949,
       0,     0,     0,  1401,     0,  2003,     0,  2085,  2087,  2007,
    2008,  2009,  2010,  2011,  2014,     0,     0,  1140,  1140,  1137,
       0,     0,     0,  2108,  2109,  1958,     0,     0,     0,  1946,
    1959,  2144,  2145,     0,  1948,  2151,     0,     0,     0,  2165,
       0,  2170,  1956,     0,     0,  2205,  2207,     0,     0,  2211,
    2212,  2213,  2214,  1933,  1195,     0,  1137,  1945,  1955,  2229,
    1939,  2238,  2243,  2244,     0,  2253,     0,     0,     0,  2278,
    2282,     0,     0,  2303,     0,     0,  1137,  1932,  2323,  2324,
    2325,  2326,     0,  1947,  2050,  1957,     0,  2337,  1140,  1137,
    1137,     0,     0,     0,  2346,  2350,     0,     0,     0,  2585,
    1194,     0,  1366,     0,  1395,  1152,  1158,  1172,     0,  1187,
    1221,  1222,  1224,  1321,  1223,  1229,  1228,  1612,  1943,  1227,
    1226,  1944,  1220,  1966,  1987,  1965,     0,     0,     0,     0,
       0,     0,     0,     0,  1799,     0,     0,  1622,  1635,    71,
       0,  2463,  2478,  2479,  2475,  2480,  2498,  2481,  2485,     0,
    2477,  2469,     0,  2484,     0,  2473,  2482,     0,  2467,     0,
    2483,  2488,  2499,  2471,  2476,  2454,     0,  2461,  2465,  1978,
    1506,  2430,  2431,     0,    77,  1647,  1648,  1646,   956,     0,
    2680,  1877,  1878,  1879,     0,  1894,     0,  1054,     0,     0,
     460,   451,     0,  1798,  1797,     0,  1870,  2562,     0,     0,
    1009,  1650,  1697,     0,  1649,  1865,     0,  1863,  1860,  1862,
     236,     0,     0,   266,  2463,     0,  2448,     0,  2556,  2553,
    2563,  2598,  2593,  2592,  2595,  2596,  1118,  2597,  1117,  2594,
    2591,  1127,  1113,  1115,  1116,   754,     0,     0,  2372,  2373,
    2218,  2238,  2374,  2320,     0,     0,  2392,  2353,  2358,  2354,
       0,     0,  1758,     0,   754,  1781,  1811,  1759,     0,     0,
    1811,     0,  1541,  1801,  1804,     0,  2376,  1772,   817,   816,
    1784,   815,  2377,  1797,     0,  1744,  1760,     0,  1721,  1765,
     108,  2378,     0,  1800,  1783,     0,  1782,  1541,  1811,     0,
    1737,     0,     0,     0,     0,     0,   242,   993,   993,   993,
     993,     0,     0,   985,   987,   988,   993,   993,     0,  2681,
    2682,  2428,   956,  1938,  1937,  1985,  2664,  1936,  2672,  2674,
    2660,  2662,  2669,  1096,     0,  2567,     6,    63,     0,  1823,
    2622,  2623,  2621,   770,     0,  1140,  1994,  2616,   174,   880,
       0,   412,   174,     0,     0,     0,     0,     0,   413,   414,
     350,   864,   962,   877,     0,     0,   876,  2624,     0,     0,
    1069,  1071,  1070,  1087,   194,   191,   172,    78,  1006,  1629,
    1631,  1044,  2552,     0,     0,  2554,  2558,  1193,  1192,     0,
     119,   124,     0,     0,     0,  2524,   123,  2514,  2620,  1127,
    1127,  1127,  2612,     0,  2600,  2607,  2608,  2611,  2610,  2609,
    2606,     0,  2599,  2602,  2603,  2605,  2604,  2624,  2618,     0,
       0,     0,     0,     0,  1699,  1702,  1706,  1710,  1713,     0,
       0,  1511,  1242,  1511,  1511,  1511,  1402,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1511,     0,  1279,  1252,     0,  1280,     0,     0,     0,     0,
       0,  1952,     0,     0,  2585,     0,     0,     0,  1371,     0,
       0,     0,  2585,     0,     0,     0,     0,     0,     0,  1397,
    1399,  1965,  1511,     0,     0,  1511,     0,     0,     0,     0,
       0,  1145,  1285,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1511,  1511,     0,     0,  1511,  1293,
       0,  1954,     0,     0,     0,  1953,     0,     0,  1951,  1950,
    1934,     0,  1296,  1298,  1297,     0,  1511,  1511,     0,     0,
    1232,  1231,  1233,     0,     0,     0,     0,     0,     0,  1191,
    1190,  1189,  1188,     0,     0,     0,  1196,     0,  1197,  1198,
       0,  1199,  1200,  1201,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1234,     0,     0,     0,  1935,  1330,     0,
    1636,  1617,  1624,  1619,     0,  1799,  1620,  1628,   425,     0,
    1625,  2512,  1621,     0,  1613,     0,    70,     0,  1848,  1853,
       0,     0,     0,  1843,  1851,  1845,  1852,  1844,     0,     0,
    1854,   108,     0,  1846,  1850,  1849,  1827,  1831,  1835,  1828,
    2464,  2462,  2496,  2495,  2500,     0,  2497,  2493,  2486,  2525,
    2490,     0,  2525,  2492,  2491,  2525,  2487,  2494,  2525,  2459,
       0,  1507,  1508,     0,  2429,     0,  1977,   957,     0,     0,
    1880,  1881,     0,  1077,  1895,  1896,  1892,  1506,  2416,  2419,
       0,   643,  1128,   461,     0,     0,   470,     0,     0,    66,
      67,     0,  1061,     0,  1060,  1064,     0,     0,     0,  1653,
    1643,  1652,  1866,   108,     0,   234,   259,   254,   262,   256,
     258,   257,   263,   264,   265,   260,   255,   261,   248,     0,
    2462,     0,  2459,  2557,     0,  2559,  2576,  1101,  2564,  1124,
    1103,  1123,     0,  1114,   753,     0,   756,   758,  1672,  1673,
     757,   766,     0,   755,     0,     0,     0,  2379,     0,   762,
     764,   763,  2387,   761,     0,     0,  2363,     0,     0,  1807,
       0,     0,  1771,     0,   544,     0,     0,     0,     0,     0,
       0,  1738,     0,     0,   587,     0,  1764,  1542,  1805,  1806,
    1811,     0,     0,  1811,     0,  1777,  1801,  1811,     0,  1811,
    1733,     0,     0,  1725,  1730,  1726,     0,  1732,  1731,  1734,
    1722,  1723,     0,  1751,  1779,     0,  1801,  1763,  1770,     0,
    1750,  1757,     0,  1768,  1801,  1801,     0,  1811,  1811,   982,
     997,   984,   978,   976,   991,   992,     0,     0,   981,   980,
    1718,  1435,     0,     0,  2661,  2675,  2659,  2670,  2671,  2658,
    1097,  2568,  1095,  2569,     0,     7,     4,  1817,  1815,  1824,
    1825,   771,   770,   535,   538,   537,     0,     0,  1996,     0,
     872,     0,  1799,   870,     0,     0,  1799,   361,  1799,   415,
     770,   884,     0,     0,   874,  1019,  1020,  1023,     0,     0,
     449,  1087,  1073,  1089,     0,   195,   197,     0,  1008,  1007,
       0,  1005,  1052,  1051,  1049,     0,  1050,  1048,  1043,  1045,
    1046,  2551,  2555,   545,   770,  1799,     0,   353,     0,     0,
       0,     0,     0,   544,     0,     0,  2601,   111,   822,   822,
     822,  1704,  1632,  1700,  1634,  1976,     0,     0,     0,  1708,
       0,     0,  1512,  1511,     0,  1377,     0,     0,     0,     0,
    1403,     0,     0,     0,     0,     0,     0,     0,     0,  1218,
       0,     0,     0,     0,     0,  1351,     0,  1377,  1141,  1586,
    1587,  1571,  1572,  1570,  1573,  1138,     0,  1574,  1585,  1308,
       0,     0,     0,     0,     0,     0,  1482,  1483,  1484,  1485,
    1493,  1486,  1487,  1488,  1495,  1500,  1489,  1490,  1496,  1497,
    1498,  1491,  1499,  1494,  1492,  1501,     0,  1481,     0,  1504,
    1502,  1505,  1503,     0,  1372,  1364,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1511,     0,
       0,     0,  1511,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1511,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1275,     0,  1968,  1967,     0,
       0,     0,     0,  1236,     0,  1235,  1444,     0,  2570,  2586,
       0,  2379,  1367,  1369,     0,  1143,  1142,  1144,  1155,  1148,
    1153,  1146,  1150,     0,  1202,  2063,  1156,     0,     0,  1184,
    2585,  1520,  1185,  1170,  1175,  1176,     0,  1173,  1174,     0,
    1178,     0,  1177,  1181,  1182,  1183,  1186,     0,     0,     0,
       0,  1225,  1230,  1396,  1127,  1969,     0,     0,   425,   428,
     427,  1626,   426,  1674,     0,   966,     0,     0,    72,    74,
    1840,  1837,  1836,  1838,  1842,   108,  1847,  1839,     0,  1855,
    2489,     0,  2470,     0,  2474,  2468,  2472,     0,     0,  2460,
       0,  2466,  1510,  2139,  2222,     0,  1513,  2433,  1640,  2679,
    2337,  1882,  1875,     0,  1893,     0,     0,     0,  1055,   644,
       0,  1127,   459,   458,   457,   456,     0,   472,   454,     0,
      68,     0,     0,  1871,     0,     0,     0,     0,  1011,  1651,
       0,  1867,  1861,     0,     0,     0,     0,     0,     0,     0,
    2560,  2578,  2577,  2565,  1127,  1532,  1128,  1128,  1965,  2394,
       0,  2389,  2388,     0,     0,     0,  2407,  2390,     0,     0,
    2357,  2395,  2396,  2399,     0,     0,     0,     0,     0,  2393,
    2320,  2359,  2360,     0,  2365,  2355,  2413,  2414,  2411,  2412,
    2410,  2384,  1778,     0,  1809,  1812,  1813,     0,     0,  1792,
    1786,  1785,  1775,  1787,  1776,  1796,  1795,  1794,  1748,  1747,
    1554,  1555,  2276,  1553,  1545,  1548,  1552,  1551,  1741,  1802,
    1791,  1789,  1773,  1811,  1746,  1745,  1790,  1788,  1727,  1728,
    1729,     0,  1541,     0,  1807,  1780,  1811,  1801,     0,  1811,
    1811,  1793,  1767,  1769,  1000,   999,   998,   994,   995,   979,
    1000,   990,   989,  1453,  1452,     0,  1410,     0,  1412,  1409,
    1408,  1407,     0,  1452,  2665,  2673,  2677,     0,  1541,  2575,
    2573,   536,  1674,  1674,     0,  1995,     0,     0,     0,     0,
       0,     0,     0,   175,   184,     0,     0,   359,   360,  1674,
     358,   401,   402,   405,   406,   407,     0,     0,     0,     0,
       0,     0,     0,     0,   128,   408,  1674,  1674,   355,   381,
     382,   385,   386,   387,   388,   389,   351,     0,   356,   954,
     954,     0,  1674,  1674,   954,  1674,     0,     0,  1674,  1674,
       0,     0,  1674,     0,     0,   954,     0,  1674,   952,     0,
       0,  1674,  1674,  1674,  1674,   954,     0,     0,  1674,  1674,
     449,  1674,     0,     0,   972,     0,     0,  1674,     0,     0,
    1674,  1674,     0,  1674,   900,   951,   548,   569,   570,   865,
     899,   901,   913,   445,     0,   930,   953,     0,     0,   886,
     888,  2625,  2626,  2627,     0,     0,  1022,  1076,  1068,  1075,
    1072,  1087,  1085,  1074,   812,   811,     0,  1088,   193,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    79,    80,    98,  1630,  1053,  1047,   120,   770,  1674,
    1674,  1674,  1674,   357,   390,   391,   394,   395,   396,   397,
     400,   398,   399,     0,     0,  1799,     0,  2516,  2517,     0,
    2515,     0,  2653,     0,     0,     0,   173,   546,   823,     0,
       0,     0,     0,     0,  1513,     0,  1979,  1707,  1435,  1711,
    1710,     0,  1304,     0,  1344,     0,  1346,  1347,  1348,     0,
       0,     0,     0,     0,  1305,     0,  1250,  1306,  1307,     0,
    1301,     0,  1302,     0,     0,     0,     0,     0,     0,     0,
    1350,     0,  1139,     0,     0,  1253,  1254,  1247,  1239,     0,
    1323,     0,     0,  1255,     0,     0,     0,     0,  1310,     0,
    1324,  1398,     0,  1400,  1969,     0,  1356,  1311,  1260,     0,
    1354,     0,  1261,  1325,  1326,  1327,  1313,  1314,     0,  1329,
       0,  1315,     0,     0,     0,     0,  1263,  1360,  1358,     0,
       0,     0,     0,  1362,  1265,     0,     0,     0,  1264,     0,
       0,     0,     0,     0,     0,     0,  1267,     0,  1248,  1359,
    1361,  1319,     0,  1276,     0,  2579,  1443,  2587,  1444,     0,
       0,  2581,  2571,  2576,  2584,  1240,     0,     0,  1970,  1149,
    1154,  1147,  1151,  2585,     0,     0,     0,     0,  1168,  1167,
       0,     0,     0,  2585,  1520,  1171,     0,     0,  1340,  1341,
    1393,     0,  1618,  1615,  1627,  1675,     0,  2513,   968,   967,
    1623,   966,    75,     0,  1841,  1834,  1856,  1829,  2529,     0,
    2528,     0,  2508,  2511,  1976,     0,     0,     0,  2443,  2437,
    2444,  2446,  2440,  2445,  2447,  2438,  2439,  2434,  2441,  1514,
    1543,     0,  1883,  1078,  1080,  1081,  1079,  1087,     0,     0,
    2422,  2423,  2421,  2420,   462,     0,   471,     0,   483,     0,
     462,  1873,  1872,     0,  1062,  1065,  1066,  1016,  1015,  1017,
    1010,  1012,  1013,   528,  1657,     0,     0,     0,  1663,  1644,
    1654,  1868,  1864,     0,  2108,  2323,  2326,   249,   252,   251,
     253,     0,     0,     0,     0,     0,     0,  1122,  1435,  1604,
    1119,  1107,  1543,  1533,  1106,  1129,  1125,     0,   769,   768,
     767,   765,     0,     0,     0,     0,  2401,  2402,     0,     0,
    2380,  2381,  2382,     0,  2385,  2362,  2363,     0,  2364,     0,
    1808,     0,  1752,     0,  1774,     0,     0,     0,     0,  1743,
       0,  1766,  1724,  1809,  1742,  1513,  1801,  1739,  1740,     0,
     983,   997,   977,  1452,  1435,     0,     0,  1430,  1454,     0,
    1454,  1432,  1433,  1435,     0,  1435,  1506,  1449,     0,     0,
    2676,  1534,  2574,     0,     0,   868,   178,   181,   179,     0,
     180,     0,     0,   410,   409,     0,  1799,   403,   132,   131,
     133,   134,  1568,  1569,  1565,  1566,  1564,  1567,   136,   135,
     130,   883,     0,     0,     0,  1799,   383,   362,   363,   366,
     367,   368,   955,   857,   544,   934,     0,   625,   544,   808,
     813,   813,   544,     0,  1056,     0,     0,  1635,     0,     0,
    1056,     0,     0,     0,  1674,     0,   945,   895,     0,  1635,
       0,  1635,  1635,   946,     0,   896,  1674,     0,     0,     0,
       0,  1635,  1056,     0,     0,     0,   447,     0,  1056,   914,
     975,   974,   973,     0,  1056,  1056,     0,   575,   576,   574,
       0,     0,     0,   567,   549,   770,   897,   446,   898,   624,
       0,   969,   621,   627,  1972,     0,     0,     0,     0,   142,
    2629,  1021,     0,     0,  1473,   196,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1799,   392,     0,     0,  1674,   352,   369,   370,
     373,   374,   375,   376,   377,   380,   378,   379,     0,  2520,
    2522,     0,     0,   346,   345,     0,   137,  2647,     0,     0,
     624,   112,   436,   445,   547,   550,     0,     0,   824,     0,
       0,     0,  1633,  1710,  1435,  1532,  1977,  1513,     0,  1709,
       0,     0,  1345,  1378,     0,  1404,     0,  1244,   727,   727,
     727,  1387,   712,  1391,  1382,   727,  1383,   727,  1385,     0,
       0,     0,  1204,  1219,     0,     0,     0,     0,     0,  1352,
    1349,     0,     0,     0,     0,  1375,     0,     0,     0,  1249,
       0,  1335,  1357,  1355,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1363,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1237,  1127,
    2588,  2590,  1098,     0,  2580,  2582,   860,  1368,     0,  1165,
    1161,     0,  1159,  1519,  1180,  1179,     0,     0,     0,  1169,
    1128,  1331,  1127,     0,  1394,  1971,  1616,   424,   586,  1614,
      73,  1832,  2526,     0,  2537,     0,     0,     0,     0,     0,
       0,     0,  2432,  1544,  1684,     0,  1087,  1091,  1986,  1886,
    2425,  2426,  2424,     0,   463,   464,   466,  1128,   480,   460,
       0,   452,   455,     0,     0,  1014,  1112,     0,  1676,  1661,
    1668,  1662,     0,     0,     0,  1660,  1961,  1960,  1967,  2563,
       0,     0,  2453,     0,     0,     0,  2566,  1513,  1513,  1598,
       0,     0,  1104,  1109,  1105,  1108,     0,  1126,  1133,  1132,
    1962,  1969,  2391,     0,     0,     0,     0,  2406,  2400,  2397,
    2398,     0,  2361,  2383,  2367,  2366,  2369,  2371,  1578,  1579,
    1577,  1575,  1576,  1810,  1541,  1762,  1761,  1556,  1547,     0,
    1550,  1549,  1735,  1754,  1756,  1811,  1002,  1001,   996,     0,
    2570,  1447,     0,  1434,  1431,  1455,     0,  1454,  1454,  1435,
       0,  1414,  1688,  1691,     0,  1413,  1471,  1437,  1112,  2666,
    2678,     0,   585,   584,   183,   182,   188,   189,   430,   416,
     429,   404,   129,   417,   418,   384,     0,   364,   626,   858,
    1056,     0,     0,     0,   813,   620,   857,   857,   822,   814,
     544,   544,   932,     0,     0,   559,   556,     0,   562,   915,
     907,   916,   927,   929,     0,   558,   577,     0,     0,   565,
    1635,     0,   943,     0,     0,   553,     0,   596,   597,   595,
     571,   578,   554,   555,     0,     0,  1528,  1530,  1538,   561,
     560,  1589,  1588,   564,     0,   557,     0,   949,   922,     0,
     593,   591,   588,   590,   589,   594,   592,   566,   563,   579,
     912,     0,   954,   954,   931,     0,   604,   605,   607,   608,
    1975,     0,   971,   933,     0,   609,   622,   610,     0,     0,
     583,  1582,  1583,  1580,  1581,   582,  1584,   580,   581,     0,
     152,     0,     0,   885,     0,   145,   143,   154,     0,     0,
    1025,     0,  1024,     0,  1476,     0,  1477,  1474,  1475,    99,
      86,   107,    82,   103,   104,    84,    85,    89,    88,    90,
      91,    94,    95,    92,    87,    93,    83,    96,   105,   106,
      81,   423,   422,   421,   420,   393,     0,     0,     0,  1799,
     371,  2521,  2519,  2518,     0,     0,  2654,   349,   347,   348,
       0,     0,   198,   602,   603,   601,   600,     0,   437,     0,
       0,     0,  1897,   444,   770,   551,   850,   852,   851,   838,
     837,   113,   115,   117,     0,  1513,  1557,  1980,  1703,     0,
    1277,  1405,     0,     0,   728,  1379,   778,  1389,     0,  1390,
     714,   713,   729,  1381,  1384,  1388,  1386,  1243,  1251,  1299,
       0,  1217,  1300,     0,  1322,  1246,  1245,     0,     0,     0,
    1283,  1284,  1373,  1376,     0,     0,  1257,     0,  1259,     0,
       0,  1337,  1312,  1328,  1286,  1316,     0,  1262,  1238,     0,
    1287,     0,  1292,  1290,     0,  1266,     0,     0,  1273,     0,
    1271,     0,  1272,     0,  1274,  1318,  1320,  1445,  2589,  1099,
       0,     0,  1370,  1157,     0,  1166,  1163,     0,  1160,  1129,
    1342,  1332,     0,  1830,  2527,     0,  2458,  2510,  2509,  2530,
    2530,  2530,     0,  1515,     0,  1641,  1082,  1087,  1091,     0,
    1083,  1897,   467,     0,     0,     0,   487,     0,   485,   453,
    1063,  1127,  1658,  1670,     0,  1678,     0,     0,  1655,  1665,
       0,     0,     0,  1664,   250,     0,  2450,  2451,  2449,  1543,
    1521,     0,     0,  1610,     0,  1605,  1120,     0,  1131,  1130,
       0,  2409,  2408,  2404,  2403,  2405,  2386,     0,     0,  1753,
    1546,  1541,  1749,     0,  2576,  1506,  1439,  1435,  1411,  1435,
       0,     0,  1419,  1435,  1415,  1417,     0,  1513,     0,  1436,
    1468,  1127,  1964,  1535,  1538,   365,   917,     0,   544,   809,
     810,   822,   859,     0,   822,   822,     0,     0,   906,   936,
    1044,     0,   911,   766,   572,   857,   902,   944,   966,   573,
     938,   904,     0,  1539,  1540,  1531,   448,   903,   924,   909,
    1855,   935,   624,   970,   790,   708,   657,   648,   727,   651,
     650,   694,   727,   662,   712,   710,   680,   712,   712,   687,
     686,   704,   690,   670,   778,   778,   669,   707,   778,   691,
     689,   693,     0,   695,   712,   700,   688,   692,   709,   685,
     682,   706,   727,   727,   727,   666,   705,   778,     0,   698,
     727,   628,   731,   668,   778,   785,     0,     0,   727,   729,
    1974,   153,   141,     0,     0,   887,   889,     0,     0,   890,
    2631,     0,  2633,  1027,  1028,     0,     0,  1090,     0,     0,
     100,   102,     0,   354,   419,   372,  2523,     0,   209,  1127,
       0,     0,   199,   201,   202,     0,     0,   434,   431,  1899,
    1898,   433,   531,   552,     0,     0,     0,  1710,  1705,     0,
    1701,     0,  1406,     0,     0,     0,     0,   772,   783,   781,
     775,     0,   779,   780,  1380,     0,     0,   730,  1392,   727,
    1214,   712,  1208,  1210,  1206,     0,   695,  1209,   727,     0,
     778,  1213,  1205,     0,  1353,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1241,     0,  1333,     0,     0,     0,
       0,     0,     0,  1270,  1268,  1269,  1543,  2570,   861,  1162,
       0,  1343,     0,     0,     0,  2535,  2535,  2535,  1683,  1682,
       0,  1681,  1685,  1084,  1092,     0,   465,   468,     0,     0,
       0,   484,     0,   529,     0,     0,     0,  1679,  1667,  2567,
    1656,  1659,  1969,  2452,  1111,     0,  1516,  1609,  1606,     0,
    1599,  1601,  1603,     0,  1963,  2368,  2370,  1755,  1003,  1440,
    1438,  1448,     0,  1407,  1435,  1435,     0,  1407,     0,     0,
    1690,  1532,  1692,  1472,     0,  1450,     0,  1537,   919,     0,
       0,     0,     0,     0,     0,   948,     0,     0,   908,   928,
     950,   942,   941,     0,  1056,  1529,   923,   925,  1011,     0,
     606,     0,   794,   656,   649,   667,   665,   716,   711,     0,
     716,   716,   676,   694,   671,     0,   778,   684,   675,   696,
     699,   701,   703,   716,     0,   778,   664,   663,   673,   660,
     716,   739,     0,     0,     0,     0,   735,     0,   788,     0,
     742,     0,   629,   732,   734,     0,     0,     0,   697,   778,
     653,   786,   785,   655,   778,   785,   716,   716,     0,   139,
     144,   155,   156,   878,  2630,     0,  2628,     0,  1033,     0,
    1086,  1478,    97,     0,     0,     0,   212,   210,   211,     0,
     205,   207,   202,  2641,     0,  2648,     0,     0,  2646,   438,
    2567,   546,   532,     0,     0,     0,     0,  2276,  1558,  1278,
     725,   723,   726,   724,   774,   773,   777,     0,   776,   785,
       0,     0,  1216,  1211,   696,  1215,  1207,  1212,  1303,  1281,
    1282,  1374,  1365,  1309,     0,  1258,  1334,     0,     0,  1317,
    1288,  1291,  1289,  1294,  1295,  1119,  1119,   598,  2583,  1164,
    1857,  2538,     0,     0,  2534,  2532,     0,  2533,  2531,  2501,
       0,  2456,  2457,  2455,  2442,     0,     0,     0,  1127,   473,
       0,   490,   489,   486,  1543,  1669,  1671,  1677,  1666,     0,
    1517,  1532,   759,  1602,     0,  1121,     0,  1420,     0,  1424,
    1429,  1425,     0,  1416,     0,  1557,  1460,  1461,     0,     0,
    1466,  1470,  1543,  1538,     0,     0,   918,   623,     0,     0,
       0,  1538,   855,     0,     0,     0,     0,     0,     0,     0,
     947,  1940,   969,   939,   905,     0,   910,   568,     0,   793,
       0,   798,   720,   721,   722,   677,   717,   719,     0,   679,
     647,   672,   702,   678,     0,   674,   661,   745,   744,  1134,
     737,   752,   632,     0,     0,   743,     0,   733,   741,   736,
       0,   652,   654,   658,   659,   645,   646,  1973,   146,   891,
     286,  2632,  1102,     0,  2637,     0,  1034,  1030,  1031,  1026,
     101,   127,  2645,  2655,   209,     0,     0,   150,     0,   200,
     766,   203,   435,   445,     0,   440,     0,     0,     0,  1559,
       0,   784,   782,     0,     0,  1336,  1338,  1446,   599,     0,
    1833,  2507,  2506,  2505,  2502,     0,     0,     0,     0,     0,
       0,  2536,  2540,  1680,     0,     0,     0,   481,     0,   477,
     479,     0,   515,   530,  1525,  1538,     0,  1543,     0,  1607,
    1600,  1441,     0,     0,     0,     0,     0,  1479,  1689,  1456,
    1456,  1467,  1451,  1536,   921,     0,     0,     0,   611,     0,
     854,     0,     0,     0,  1942,  1941,   937,   969,     0,   791,
       0,   795,   796,   797,     0,   789,   718,     0,   862,     0,
       0,   751,  1134,   740,  1127,   749,   748,   746,   747,     0,
     148,   312,     0,   298,   284,     0,     0,     0,   288,   157,
     160,   158,     0,   159,   165,     0,   166,   167,   168,   169,
     170,   161,   310,   311,   164,   162,   163,     0,  1989,     0,
    1990,  2635,     0,     0,  2634,  1029,     0,  1036,   176,   206,
       0,     0,   142,   151,  2649,   750,  1897,     0,  2563,   825,
     827,   829,  1560,   715,  1256,     0,  2503,  2541,  2544,  2542,
    2543,  1561,     0,  2545,  2539,     0,  1887,  1128,     0,   474,
     475,     0,   493,     0,  1674,  1674,     0,     0,  1674,  1674,
    1674,  1674,   508,   516,   518,     0,  1526,  1527,     0,  1522,
    1524,  1518,  1590,   760,  1900,  2570,  1421,     0,  1426,     0,
    1418,     0,     0,  1464,  1462,   920,     0,   617,   825,  1538,
       0,   613,   615,   940,     0,   792,     0,     0,   778,     0,
     778,  1135,     0,   738,     0,   147,     0,   140,     0,     0,
     297,   300,     0,     0,   303,   293,   292,   294,     0,   287,
     286,   286,   340,   291,   337,   336,   329,  2567,     0,     0,
       0,  1035,  1040,     0,  1037,  1039,  2656,   208,  1127,   154,
       0,   432,   442,   441,     0,  1674,   114,   826,   846,   845,
     831,     0,     0,   116,   828,   848,   835,   118,   830,   847,
     833,  1858,  1563,  1562,  1686,  1694,     0,   759,     0,   482,
     481,   478,     0,   491,     0,     0,  1674,  1674,     0,     0,
       0,     0,     0,   488,   517,  1674,  1538,     0,  1110,     0,
    1908,  1442,     0,     0,  1480,     0,  1457,     0,     0,     0,
     619,   825,   612,   853,   856,   827,   829,     0,   804,     0,
     803,     0,   800,   799,   681,   863,   683,  1136,   633,   149,
     313,   324,   327,   319,   299,     0,     0,     0,   289,   286,
       0,   273,   271,   272,   278,   279,   280,   281,   282,   283,
     274,   277,   275,   276,   286,     0,   217,     0,     0,  2636,
       0,  2638,     0,  1032,     0,   186,   185,   177,     0,   286,
    2642,     0,  2650,  2567,   840,     0,   832,     0,     0,   836,
     834,     0,     0,  1888,   469,   476,   501,   494,   497,     0,
     527,   521,     0,     0,   523,   524,   522,   519,   512,     0,
     510,     0,  1523,  1591,     0,     0,     0,     0,  1901,  1903,
       0,  1608,  1423,  1428,  1459,  1458,  1473,     0,   618,   614,
     616,   926,   806,   807,   805,     0,     0,   635,   634,   636,
       0,     0,   286,   320,     0,   295,     0,     0,     0,     0,
     215,   343,     0,   213,   331,   331,  2639,  2640,  1038,   187,
    2657,     0,   156,   176,   443,   839,   844,   843,   841,   842,
     849,  1693,  1695,  1914,   501,     0,   499,     0,   495,   492,
     496,   525,   526,     0,   509,     0,   520,     0,     0,     0,
       0,     0,  1902,     0,     0,  1909,  1911,     0,     0,     0,
       0,     0,   640,   630,   637,   639,   321,   327,   317,   325,
     286,     0,     0,   285,   304,   339,   216,     0,   341,     0,
     286,     0,   330,   332,   334,     0,   138,  2651,     0,  1900,
     498,     0,   506,   502,   504,   507,   515,   514,   511,  1127,
    1906,  1907,     0,  1904,     0,     0,  1910,  1465,  1463,   802,
     801,   642,   641,   638,     0,   318,     0,     0,   316,   296,
     301,   286,     0,   286,   228,   227,     0,   219,   267,   338,
       0,   218,  2643,   286,     0,  1908,   500,     0,     0,   513,
       0,     0,  1594,  1596,  1905,  1913,  1912,   322,     0,   286,
       0,   286,     0,   286,     0,     0,     0,     0,     0,   214,
     286,  2652,     0,  1916,   505,   503,  1128,  1592,  1127,     0,
     314,   286,   302,   307,   344,     0,   222,   268,   269,     0,
     225,  2644,  1915,     0,  1920,  1597,  1595,   286,   286,   303,
     306,   342,     0,     0,   220,   221,   233,   232,   224,     0,
       0,     0,  1927,   286,   286,   308,   241,   239,   286,   229,
     237,   231,     0,   238,   270,   226,  1918,  1919,  1917,  1922,
       0,     0,  1924,  1925,     0,  1889,     0,   223,   240,  1926,
    1921,     0,  1928,  1930,     0,   230,  1923,     0,  1127,  1929,
       0,  1128,  1931
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,    58,   609,  1496,    59,    60,    61,    62,    63,  1339,
      64,   819,  1266,  1778,  1779,    65,   546,    66,  1537,  2121,
    2122,  3409,  3410,  2123,   581,   582,    67,  2157,  3434,  3435,
    3436,  1554,   516,   517,  2003,  2004,  1072,  3091,  3033,  3848,
    3037,  3970,  4097,  4012,  2079,  3399,  3849,  3850,  3979,   541,
    2155,  1510,  4126,  1983,  4247,  1984,    68,   644,  1045,  1534,
    1535,  3421,  3422,  3677,  3423,  3669,  3670,  3671,  3672,  4390,
    4219,  4323,  4391,  4466,  4502,  4508,  4509,  4436,  4518,  4519,
    4520,  4506,   891,  4521,    69,   569,   570,   893,  1368,  2397,
    1369,    70,  4437,  4504,  4220,  4221,  4104,  4222,  3982,  4223,
    4108,  4224,  3985,  4225,  4226,  4227,  4228,  4382,  4229,  4103,
    4429,  4216,  4217,  4431,  4483,  4500,  4230,  3992,  4098,  4310,
    3993,  4099,  4377,  4212,  4378,  4424,  4479,  4213,  4311,  4427,
    4314,  4231,  4237,  4392,  4232,  4238,  4233,  3997,  4115,  4236,
    4113,  4235,  4433,  4387,  2655,  3090,   627,   628,   655,  2145,
     629,  1061,  1019,  1512,  2016,  2017,  2517,  2518,  2637,  2638,
    2639,  2008,  2009,  2010,  2133,  2134,  2135,  1990,  1991,  1992,
    1516,  1987,  1988,   630,  1020,  1030,  2011,  2012,  2013,  2643,
    2137,  2138,  2139,  2140,  2014,  1771,  2015,  2919,  2661,  3681,
    3680,  2662,  3431,  4018,  4253,  3102,  3103,  2587,  2984,  2092,
      71,   558,   871,  1336,  2369,  1337,  2803,  2804,  2805,  1822,
    1823,  3749,  1827,  2368,  3907,  4160,  3908,  3909,  2807,  4039,
    2811,  3227,  3228,  3520,  3751,  3912,  4269,  4162,  4349,  4267,
    4345,  4268,  4347,  4448,  4403,  4404,  4173,  4279,  4280,  4353,
    4406,  4052,  4053,  4054,  2388,  2816,  3754,  3683,  2127,  1502,
    1503,   518,   519,   520,  2937,  2663,  2065,  2664,  2665,  3001,
    2067,  2068,  2777,  1423,  2997,  2970,  3725,  3097,  3005,  3006,
    3007,  3008,  3009,  4078,  4195,  4196,  4191,  3015,  2935,  2526,
    2527,  2592,  3018,  3381,  3631,  4309,  4373,  4374,  4375,    72,
     868,  3870,  3599,  3614,  3383,  3384,  3385,  3386,  3387,  3388,
    3389,  3129,  3130,  3815,  3816,  3817,  3124,  3125,  3458,  3632,
    3633,  3634,  3871,  3830,  3451,  1390,  1391,  3919,  1401,  1402,
    2419,  1861,  2420,  1506,  3452,  3453,  3454,  3643,  3635,  3017,
    3592,  3808,  3811,  3955,  4202,  2528,  2936,  2529,  2940,   969,
     521,  2530,  2531,  2158,  2159,  4136,  4143,  4147,  4137,  4148,
    4144,  4138,  4139,  4140,  4150,  4146,  3109,  3790,  3791,  2928,
    2938,  3192,  3957,    73,  1520,  1013,  1022,  1018,  1037,   639,
    1521,  2080,  2599,  3653,   617,  2069,  3584,  3310,  3588,  2070,
    2950,  2071,  3568,  3786,  2072,  3328,  3586,  3805,  2951,  2952,
    2073,  2074,  2075,  3577,  3583,  3947,  2532,  1318,   126,   127,
     635,   636,   637,  2320,  3013,  2573,    74,  1950,  1949,  1944,
      75,   983,   984,   985,  1469,  1470,  1947,  1948,  2460,  2887,
      76,   647,  1541,    77,  1347,  2380,  2381,  2382,    78,  1038,
    1525,  1526,  2086,  3042,  3405,  3658,  3859,  4007,  3855,  4123,
    4124,    79,    80,   648,  1548,  1549,  1550,    81,  1330,   134,
      82,   879,  1342,  1344,  1345,    83,   643,  1039,  1040,  1041,
    1042,  2088,    84,  1813,  2353,  2354,  2355,  2356,  1531,  2603,
    1532,  1533,  2097,  3220,    85,    86,   606,  2280,   575,   900,
     576,   577,  1855,  2410,  3726,   911,   912,   913,  2842,  1380,
    1381,  1382,  1819,  2847,  3961,  1125,  1122,   784,   785,   786,
     787,  1214,  1215,  3636,   788,  1224,  1737,  3141,  3472,  1599,
    1600,   789,   790,   791,   792,   793,   794,  1764,  3160,  3161,
    3486,  2307,  2308,  2309,   795,  2199,  3147,  2212,   796,  1207,
    1722,  1655,  3478,  3152,  1584,  2175,  2699,  3132,  2773,  2274,
    1148,  1149,  1107,  2182,  1590,  1956,  1957,  1958,  1959,  1960,
    3558,  3559,  3922,  3768,  3924,  3772,  2472,  2473,  1961,  1962,
    2889,  3766,  4065,  2275,  2276,  2277,  3496,  2890,  3277,  2907,
    2908,  3782,  2463,  1963,  2896,  4073,  3779,  3780,  4189,  4188,
    3781,  3563,  3564,  3289,  3290,  3045,  3046,  3047,  3926,  1646,
    1647,  1653,  1313,  1314,  1585,  2350,  2791,  3761,  3916,  2298,
    3536,  3914,  4059,  2076,  2976,  2977,  2412,  2413,  2911,  3293,
    3325,  1426,  3727,  2793,  1914,  2877,  2878,  3440,  4033,  4507,
    2920,  2873,  3025,  1617,  1618,  2983,  4178,  4357,  4451,  4452,
    4453,  3253,  3254,  3540,  3541,  2414,  2839,  3255,  3762,  4064,
      87,   525,    88,  1776,  2776,  1263,  2326,  1049,  1571,  1572,
     807,   538,    89,   547,  2351,    90,   565,  1840,   858,   883,
    1350,  1351,  2389,  2817,  2824,  2390,  2829,  3529,  2819,  3232,
    3233,  2315,  2316,  2820,  3235,  3526,  3510,  3511,  3215,  3746,
      91,   594,  3287,  2902,  2903,  4154,  4155,   884,    92,   524,
    1094,  2164,  1577,  2163,  1095,  1096,  2166,   673,   674,    93,
     988,   590,  1449,  1450,  1451,  1932,    94,   579,   970,  2874,
    3271,  1908,   875,  1259,  1430,   973,  1431,  1894,  2442,  1412,
      95,  1009,  1008,    96,   613,  1498,    97,   820,  1286,  1789,
    2781,  3203,  1287,  1288,  2327,  3890,    98,   566,   888,   889,
    1353,  2392,    99,   560,   876,  1833,   100,   550,   863,  1322,
    1812,   101,   102,   865,  3221,  4157,  4343,   554,  1815,  1326,
    3432,  4180,  4288,  4289,  4291,  4365,  4366,  4399,  4494,  4528,
    4512,  4531,  4532,  4535,  4542,  4543,   798,   996,   799,  3800,
     800,   801,  2825,  2826,  3294,   802,  2827,   803,  2593,  1050,
    1574,   544,   496,   624,   997,  2799,   805,  3999,  1016,  1065,
     498,   499,   103,   578,   927,  1406,  1396,  1405,  1881,  2436,
    1885,  2438,  2439,  3267,  2865,  3268,  2866,   975,  1877,  1882,
    2867,   930,  1870,  1871,  1872,  1873,  2858,  1867,  1891,   104,
     866,   503,  1328,  1329,  2362,   105,   593,   106,  1315,  1806,
    1807,  2347,  2790,  2348,   107,   896,   108,   845,  1800,   846,
    1291,   847,   848,  1305,  1299,  1308,  1302,  3895,  3738,  3739,
    2335,  1262,  1066,  2149,  3084,  1067,  1792,  2329,  2330,  3505,
    3741,  3206,  3901,  3902,   109,   135,   506,   650,  1056,  1374,
     110,   111,   112,   113,  1377,  1491,  2406,  1492,  2281,  1493,
    1494,  1970,  1853,  1718,  1719,  3190,  1204,  1205,  2284,  2749,
    2750,   914,   659,  1082,  1074,   128,   129,   130,   662,   663,
     131,  1035,  1036,  2600,  3039,  3401,  3656,  3657,  3854,  4004,
    1076,  3866,  4331,  4470,  1077,  1078,  3092,  3868,  4130,  4333,
    4443,  1079,  2652,  3418,  4008,  4249,   114,   998,   603,  1489,
    1484,  1486,  1966,  2480,   115,   116,   117
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -3749
static const int yypact[] =
{
    4633,  2122,    79, -3749,  -121,   253, 50753,   764,  1410,  1410,
     498,  3053, -3749, -3749, -3749, -3749, -3749,  2673, -3749, 50753,
      79, -3749, 24974, -3749, -3749,   -45, -3749,   183,  1410,    79,
     483, -3749, 50753, -3749,   657,  1516,    79, -3749, -3749, 45236,
   -3749,   498, 50753, -3749, -3749, -3749, 45236,  -121,   203,   191,
     615,   -29, -3749, -3749, 50753,  2082, -3749,   670,  1199,  1078,
   -3749, -3749,   809, -3749, -3749, -3749, -3749, -3749, -3749, -3749,
   -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749,
   -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749,
   -3749, -3749, -3749, -3749, -3749, -3749, 25591, -3749, -3749, -3749,
   -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749,
   -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749,  1105, 50753,
    1287, 50753,  1321, 50753, 43397, 50753,   974,   124,  1380, -3749,
   -3749,  1522, -3749, -3749,  1410,   498, -3749, -3749, -3749, -3749,
   -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749,
   -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749,
   -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749,
   -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749,
   -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749,
   -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749,
   -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749,
   -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749,
   -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749,
   -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749,
   -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749,
   -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749,
   -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749,
   -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749,
   -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749,
   -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749,
   -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749,
   -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749,
   -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749,
   -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749,
   -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749,
   -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749,
   -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749,
   -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749,
   -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749,
   -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749,
   -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749,
   -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749,
   -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749,
   -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749,
   -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749,
   -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749,
   -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749,
   -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749,
   -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749,
   -3749, -3749, -3749, -3749, -3749, -3749, -3749,  1044, -3749, -3749,
    -121, -3749, -3749, -3749, -3749, -3749,  1565,  1451, -3749,  1486,
   43397, -3749, 50753, -3749, -3749, -3749,   246, -3749,  1161, -3749,
    1173,  1529,  1544,  1557,   138, 11806,  1585,  1585,  1585,  1585,
    1622,  1585,  1585, 50753, -3749,  1585, -3749,  1585,  1410, -3749,
   -3749,  3928, 50753,  1466,   182,   -70, 43397,   204, 50753,  -121,
      87, -3749,  1604, -3749, -3749, -3749,  1410, -3749,  1801,  1673,
     290, 50753, -3749, -3749,  1410,   978,   -14,  1345, -3749, -3749,
    1417, -3749,  4271,   127, -3749, -3749, -3749,  2381, 27442,  4020,
    1417,  1592, -3749, -3749,  1426,  -121,   -98,  1465,  -121, -3749,
   -3749, 50753,  -121,  1410,  1656, -3749, -3749,   126,   126,   126,
   -3749,   126, -3749,   126, -3749,   670,  1327, -3749, -3749,  1342,
   50753,   800,  1038, -3749, -3749,  1348,   928, -3749,  1403, 40332,
   -3749, 50753, -3749, -3749, -3749, -3749,  1629, -3749, -3749, -3749,
    1247, -3749, 24974, -3749, -3749, -3749,   124, -3749, 50753,  1498,
   -3749, -3749, -3749, 24974,  1394, 50753,  1457, 24974, 24974,   216,
    1060,  1759, 50753, 50753,  1841, -3749,  2027, 40332,  1600, -3749,
     574,  1196,  1522,  2049, -3749,  1451, -3749,  1451,  1451,  1451,
   -3749, -3749, -3749, 45849,   138,  1434,  1444,  1446, 16886, -3749,
    1449,  1459,  1471, 11806,  1478,  1491,  1500,  1513,  1530,  1533,
    1537,  1539,  1542,  1554,  1562,  1569,  1586,  1591,  1591,  1601,
    1631,  1634,  1645,   -69,  1652, -3749,  1663,  1666,  1668, -3749,
   -3749,  1671,  1684,  1691, -3749,  1699,  1709,  1713, 12441,  1721,
    1725,  1730, -3749, 21880,  1737,  1741,  1746,  1751,  1753,  1775,
    1781,  1783,  1787, -3749, -3749, 11806,  1601, -3749, -3749,  1792,
   -3749,  1794,  1800,  1807,  1812,  1815,  1825,  1833,  1848,  1850,
    1872,  1884,  1892,  1895,  1898,  1905,  1601, -3749,   819,  1912,
    1916,  1316,  1919, -3749,  1924, -3749,   142,  1940,  1591,  1601,
    1601,  1942,  1947,  1951,  1954,  1957, 16886, 16886, 16886, 11806,
   -3749, 50753, -3749, 50753,  1593,  2945, -3749,  2931, 16886,   929,
   -3749, -3749, -3749, -3749, -3749, -3749, -3749,  1463,  1576, -3749,
   -3749, -3749, -3749, -3749,  1959,  1573,  1979, 50753, 50753, 50753,
   50753, 50753, 50753, 43397,  1672, 50753, 40332, -3749,  1585,  1648,
    4624,  1838,  1970,  1975, -3749, -3749, -3749, -3749, -3749,  1907,
   -3749, -3749,  1934, -3749,  2108, -3749, -3749,   390, -3749,   141,
   -3749, -3749, -3749, -3749, -3749, -3749,  2229,  1969, -3749, -3749,
     154, -3749, -3749, 50753, -3749, -3749, -3749, -3749,  2383,  2123,
   -3749, -3749, -3749,   953,  2572,   228, 24974, -3749,  1996, 11806,
    1460, -3749,  -163, -3749, -3749,  2356, -3749, -3749, 40332, 24974,
   -3749, -3749, -3749, 22499, -3749, -3749,  2581, -3749,  2007, -3749,
   -3749,  1576,  3682, -3749,  1838,  2295, -3749,  2297,  2216,  1060,
    2112, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749,
   -3749,  2063,  2381, -3749, -3749,   363,  2224,  2086,   430,   487,
   36654,   133,   695,   787, 28058, 37267,  2089, -3749, -3749, -3749,
     822,  2205, -3749,  2554, -3749, -3749,   -57, -3749,  2104,  1479,
     -57, 40945,  2476,   858, -3749,   375, -3749,  2563, -3749, -3749,
   -3749, -3749, -3749,  2243,  2227,  2271, -3749,   383,  2605, -3749,
    -121, -3749,   768, -3749, -3749,  2257, -3749,  2476,   -57,   858,
   -3749,  2512,  2642,   561,  2613,  -126, -3749, -3749, -3749, -3749,
   -3749,   -66,  2714, -3749,  2176, -3749, -3749, -3749, 24974, -3749,
   -3749, -3749,  2383, -3749, -3749, -3749,  2179, -3749,  2457,  2314,
   -3749, -3749,    69, -3749,  2214,  1070,  2705, -3749,  1053, 41558,
   -3749, -3749, -3749,  2741,  2758,  1591,  2238, -3749, -3749, -3749,
    2873, -3749, -3749,  2250,  2777,  2777,  2777,  2901, -3749, -3749,
   -3749, -3749, -3749, -3749,  2443,  2313, -3749,  1498, 24974,  2683,
    2294, -3749, -3749,  2538, 11806, -3749, -3749, -3749,   248, -3749,
   -3749,  1487, -3749,  2872,  2498, -3749, -3749, -3749, -3749,  2762,
   -3749, -3749,  2873,  2821,  2777,  2717,  2310, -3749, -3749, -3749,
   -3749, -3749, -3749,   887, -3749, -3749, -3749, -3749, -3749, -3749,
   -3749,  1625, -3749, -3749, -3749, -3749, -3749,  1498, -3749, 24974,
   50753, 50753, 50753, 24974, -3749,  2311, -3749,  2315, -3749, 11806,
   11806,   345,  2887,  2948,  2948,  2948,  1593,  2361, 11806, 11806,
   11806, 11806, 11806, 11806, 11806, 11806, 11806, 11806, 11806, 11806,
     346,  2329, -3749, -3749,  1869, -3749,  2340, 11806, 11806,  2431,
   11806,  1576, 11806, 26208, -3749,  5069, 11806,   366,  2833, 11806,
   11806, 11806, 11806,  3787, 11806, 11806, 11806, 26208,  2967,  2344,
   -3749,  2339,  1085, 11806, 11806,  1146, 11806, 11806, 11806, 11806,
   11806, -3749, -3749, 11806, 11806, 11806, 11806, 16886, 11806, 11806,
   11806, 11806, 11806, 11806,  2948,  2948, 11806, 11806,  1396, -3749,
   11806,  1576,  2614,  2614, 11806,  1576,  8631, 11806, -3749, -3749,
   -3749,  2352, -3749, -3749, -3749, 26208,  2948,  2948, 11806, 11806,
    2887,  2887,  2887,   233,  2354,  1071, 11806, 28674,  2346, -3749,
   -3749, -3749, -3749, 11806, 11806, 11806, -3749, 16886, -3749, -3749,
    1064, -3749, -3749, -3749, 13076, 16886, 16886,  2357, 16886, 16886,
   16886, 16886, 16886,  2727, 16886, 16886, 17521, 18156, 16886, 16886,
   16886, 16886,  1192,  2887, 43397, 16886, 11806, -3749, -3749, 50753,
   -3749, -3749, -3749,  2358,  2634,  1672, -3749, -3749,   631,  2840,
   -3749, -3749,  2367, 24974, -3749,  2363, -3749,  2725, -3749, -3749,
    2728,  2731,  2733, -3749, -3749, -3749, -3749, -3749,  2962,  2736,
   -3749,  -121,  2737, -3749, -3749, -3749, -3749,  2384, -3749, -3749,
   -3749, -3749, -3749, -3749, -3749,  2484, -3749, -3749, -3749,  2387,
   -3749, 40332,  2387, -3749, -3749,  2387, -3749, -3749,  2387,    64,
    4657, -3749, -3749, 50753, -3749, 51366, -3749, -3749, 22499,  -121,
   -3749, -3749, 13711, -3749, -3749, -3749,  2748,   161,  2389, -3749,
   24974, -3749,  1593, -3749,   121,   121,  2635,  1314, 43397, -3749,
   -3749,   123,  2393,  2477,  2400, -3749,  2482, 24974, 24974, -3749,
   -3749, -3749, -3749,  -121,   -14, -3749, -3749, -3749, -3749, -3749,
   -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749,  2403,  2880,
    2409, 40332,   814, -3749, 50753, -3749,  1453, -3749, -3749, -3749,
    2410, -3749, 11806, -3749, -3749, 50753, -3749, -3749, -3749, -3749,
   -3749,  2972, 11806, -3749, 40332,   -31,   792,    83,   822, -3749,
   -3749, -3749, -3749, -3749, 50753, 46462,  2413,  9266,  2535,  2808,
    -121, 11806, -3749,  2429,  1451, 50753, 50753, 50753, 24974, 50753,
   24974, -3749,    39,    39, -3749, 37880, -3749, -3749, -3749, -3749,
     -57, 50753, 50753,   -57, 40332, -3749,   858,   727, 50753,   -57,
   -3749,  2813,  2529, -3749, -3749, -3749,  2878, -3749, -3749,  2875,
    2430, -3749,  2895, -3749, -3749,  2557,   858, -3749, -3749, 24974,
   -3749, -3749,   858, -3749,   858,   858, 11806,   -57,   -57, -3749,
     -59, -3749, -3749, -3749, -3749, -3749,  2592,   -98, -3749, -3749,
   -3749,  1006,   126,  2692, -3749, -3749, -3749, -3749, -3749, -3749,
   -3749, -3749, -3749, -3749,    97, -3749, -3749, -3749, -3749, -3749,
   -3749, -3749,   163, -3749, -3749, -3749,  1855,  2952, -3749, 43397,
    1990,   915,  1416,  1990,  1205,  -121,   662, -3749,   662, -3749,
    3480,  2730,   219, 24974, -3749,  2458, -3749,  2703, 47075, 24974,
   -3749, -3749, -3749,   157,  2465,  2466,  1593,  4650, -3749, -3749,
   24974, -3749, -3749, -3749, -3749,  2517, -3749, -3749, -3749, -3749,
    1931, -3749, -3749, -3749,   205,  1891,  2490,  2518,   240, 40332,
    2908, 50753, 50753,  1451, 50753, 50753, -3749, -3749, -3749, -3749,
   -3749,  2480, -3749, -3749, -3749,  1311, 50753,  2922, 31750, -3749,
     327,   446, -3749,  2948,  2492, -3749,  2493,  2496,  2497, 11806,
     101,   226,   522,  1686,  -241,   558,   412,  1152,   528, -3749,
    1550,   665,   730,   810,   251, -3749,  2499,  2504, -3749, -3749,
   -3749, -3749, -3749, -3749, -3749, -3749,  2501, -3749, -3749, -3749,
     812,   845,  1165,  1257,  2503,  2505, -3749, -3749, -3749, -3749,
   -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749,
   -3749, -3749, -3749, -3749, -3749, -3749,  2930, -3749,  1582, -3749,
   -3749, -3749, -3749,  2506, -3749, -3749,  1262,   854,   894,   247,
    2511,  1649,   935,  1659,  1715,  2507, 26208, 50753,  2948,  2510,
    1269,  1273,  2948,  2514,   945,  1297,  1722,  1756,  1765,  1303,
    1309,   962,  1821,  3326,  1328,   975,   999,  1083,  1088,  1365,
    2516,  2519,  1096,   276,  2948,  2521,   296,  2522,  2524,  1369,
    9901, 10536, 11171,   391,  1100, -3749,  2527, -3749,  2339,  2530,
    2531,   325,  1379, -3749, 11806, -3749, -3749,  1109,   106,  2570,
     125,    83, -3749,  2689, 50753,  2442,   159, -3749, -3749, -3749,
   -3749, -3749, -3749,   776, -3749,  2537, -3749,  2539,  2170,  2544,
   11806,   212,  2544,  3099,  2491,  2491, 16886,  3194,  2828, 12441,
    1028, 12441,  1028,  2544,  2544,  2544, -3749, 16886,  2550, 16886,
   16886, -3749,  2887,  1593,  2543,   846, 50753, 24974,   631, -3749,
   -3749, -3749, -3749,   822, 40332,   112, 24974, 43397,  2546, -3749,
   -3749, -3749, -3749, -3749, -3749,  -121, -3749, -3749,  4897, 24974,
   -3749, 50753, -3749,  2597, -3749, -3749, -3749, 23116, 23116, -3749,
   23116, -3749, -3749,    34,   263,  3131,  2576, -3749, -3749, -3749,
   31135,  1593, -3749, 24974, -3749,  2953,   714, 24974,  2553, -3749,
    2552, -3749, -3749, -3749, -3749, -3749,  1973,  2663, -3749,  2564,
   -3749, 11806,  -121, -3749, 40332, 40332, 24974, 24974,   772, -3749,
    1095,  3182, -3749,  3682, 18791,  2993,  3006, 23116, 23116, 23116,
   -3749, -3749, -3749, -3749, -3749,  1265,  1593, -3749,  2568, -3749,
   42171, -3749,  1593,   822,  2579,  2582, -3749, -3749,  2950,   648,
   -3749,  2583,  2586, -3749,  2585,  2587,  2588, 47688, 11806, -3749,
     792, -3749, -3749,   822, -3749, -3749, -3749, 16886,  1663, -3749,
    1593, -3749, -3749,  -121,  3017, -3749,  1593,  2590, 50753, -3749,
   -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749,
   -3749, -3749,  3045, -3749,  2767,   710, -3749, -3749, -3749, -3749,
   -3749, -3749, -3749,   -57, -3749, -3749, -3749, -3749, -3749, -3749,
   -3749,  2818,  2476,  2605,  2808, -3749,   -57,   858, 24974,   -57,
     -57,  1593, -3749, -3749,  2655, -3749, -3749,  2607, -3749, -3749,
    2655, -3749, -3749, -3749, -3749, 50753,  2038,  2766, -3749,  2611,
   -3749, -3749, 24974, -3749,  2616, -3749,  3048,  3202,  2476, -3749,
   -3749, -3749,   822,   822,  2911, -3749,  -121,  2745,  2750,  2752,
    2753,  2759,  2788, -3749, -3749,  -121,  -121, -3749, -3749,   822,
   -3749,  1391, -3749, -3749, -3749, -3749,  -121,  -121,  -121,  -121,
    2681,  -121,  -121,  1843, -3749, -3749,   822,   822, -3749,   221,
   -3749, -3749, -3749, -3749, -3749, -3749, -3749,   258, -3749,  2662,
    3185,  2879,   822,   822,  3185,   822,  2882,  2884,   822,   822,
    2723,  3140,   822,  3028,  2754,  2221,  3035,   822, -3749,  2760,
    3158,   822,   822,   822,   822,  3185,  2910,  3253,   822,   822,
   -3749,   822,  2912,  2915,   229,  2914,  2916,   822,   206, 50753,
     822,   822,  2920,   822, -3749, -3749,  6153, -3749, -3749, -3749,
   -3749, -3749, -3749,   756, 23736, -3749, -3749,   822,   500, -3749,
    2874, -3749, -3749, -3749, 24974,  3122, -3749, -3749, -3749, -3749,
   -3749, -3749, -3749, -3749, -3749, -3749,  2684, -3749, -3749, 11806,
    3156,  3157,  3159,  3160,  3162,  3168,  3170,  3176,  3178,  3179,
    3180,  3186,  3188,  3189,  3191,  3195,  3196,  3204,  3205,  3206,
    3208,  2686, -3749, -3749, -3749, -3749, -3749, -3749,   208,   822,
     822,   822,   822, -3749,  2035, -3749, -3749, -3749, -3749, -3749,
   -3749, -3749, -3749, 43397,  3066,  1141,   -37, -3749, -3749, 43397,
   -3749, 50753, -3749,   394, 50753,  2715,  -142,  3409,   970,  2999,
    3008,  3014, 50753,  2792,  2576, 31750, -3749, -3749,  1006, -3749,
    2742, 14346, -3749,  2751, -3749, 11806, -3749, -3749, -3749,   777,
   11806, 11806,  3225,  2612, -3749, 42784, -3749, -3749, -3749, 11806,
   -3749, 11806, -3749, 11806, 11806, 11806, 11806, 42784,  2612, 11806,
   -3749,  2761, -3749,  3143,  3145, -3749, -3749, -3749, -3749, 11806,
   -3749, 11806, 11806, -3749, 11806, 11806, 11806, 11806, -3749, 11806,
   -3749, -3749, 16886, -3749,  2746,  2763, -3749, -3749, -3749,  2771,
   -3749, 11806, -3749, -3749, -3749, -3749, -3749, -3749, 11806, -3749,
   11806, -3749, 11806, 11806, 11806, 11806, -3749, -3749, -3749, 14981,
   11806, 11806,  2772, -3749, -3749, 11806, 11806, 11806, -3749, 11806,
    1178, 11806,  1430, 11806,  1960, 11806, -3749, 11806, -3749, -3749,
   -3749, -3749, 11806, -3749,  1852, -3749, -3749,  2230, -3749,  1109,
    2773, -3749, -3749,  1453, -3749, -3749, 43397, 11806, -3749, -3749,
   -3749, -3749, -3749, -3749, 16886,   389,  2774, 16886, -3749,  3099,
    3787,  3787,  2192, 11806,   212,  3099, 11806,  2775,  2765, -3749,
   11806, 50753, -3749, -3749, -3749, -3749, 43397, -3749, -3749, -3749,
   -3749,   112, -3749,  2363, -3749, -3749,  2553, -3749, -3749,  1858,
   -3749, 40332,  2747, -3749,  2755,  2839,  2856,  2861, -3749, -3749,
   -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749,
    2476,  1095, -3749, -3749,  2779, -3749, -3749,  2538,  2876,  2802,
    3144,  3331, -3749, -3749, 50753, 16886, -3749,  3373,  2797,  2798,
   50753,  1593, -3749,  2870, -3749, -3749, -3749, -3749, -3749, -3749,
   -3749, -3749,    36, -3749, -3749,  2801,  2801, 20644, -3749, -3749,
   -3749, -3749, -3749,  3273,  1156,  1156,  1156, -3749, -3749, -3749,
   -3749,  3065, 40332,  3246,  3247,  3248,  1053, -3749,   435, -3749,
     180,  3201,  2476, -3749,  3251, 44010, -3749, 32363, -3749, -3749,
   -3749, -3749,   -31,  2902,  2907,  1440, -3749, -3749,  3212,  3043,
   -3749, -3749, -3749,   822,  1593, -3749,  2413,  9266,  2831, 29290,
   -3749,    91, -3749,   250, -3749, 38493,  3295, 38493, 38493, -3749,
    3108, -3749, -3749,  3017, -3749,  2576,   858, -3749, -3749,  2017,
   -3749,   -59, -3749, -3749,  1119,  3221,  3223, -3749,  3097,  1482,
    3097, -3749, -3749,  1119, 26208,  1006,  2814, -3749,  2681,  3152,
   -3749, -3749, -3749, 42171, 39106, -3749, -3749, -3749, -3749,  3363,
   -3749,  3364,  1305, -3749, -3749,  2589,  1416, -3749, -3749, -3749,
   -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749,
   -3749, -3749,  1205,  2589,  2589,   662, -3749,   145, -3749, -3749,
   -3749, -3749, -3749, 26825,  1451, -3749,   271, -3749,  1451, -3749,
     157,   157,  1451, 26825,    79,    91,  2681,  1585,  2681, 48301,
      79,  -121,  -121,  2427,   822,  2681, -3749, -3749,  3229,  1585,
    3234,  1585,  1585, -3749, 43397, -3749,   822,  1333,  2681,    91,
      91,  1585,    79, 26208,  1564,  2578, -3749,  -121,    79, -3749,
   -3749, -3749, -3749, 24974,    79,    79,  2039, -3749, -3749, -3749,
    2681,  2578, 48301, -3749, -3749,  5951, -3749, -3749, -3749, 20027,
   50753,  1383,   218, -3749,  2849, 34815,    32,  1036,  2936,   286,
    2863, -3749,   369,  2865, 48914,  1593,  2866,  2681,  2681,  -121,
    -121,    91,  -121,  2681,  -121,  -121,  -121,  -121,  -121,  -121,
    -121,  2681,  2681,  -121,  1171,  -121,  2681,  4650,  -121,  1973,
    2589,  2589,  1891, -3749,  3128,  3287,   822, -3749,  2241, -3749,
   -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749,  2958, -3749,
     152,  3050,  2871, -3749, -3749,    90, -3749, -3749,   855, 24974,
   19410, -3749, -3749,  3113, -3749,  3139,   901,   901, -3749, 24974,
   24974, 24974, -3749,  2868,  1006,  3135,  1322,  2576,  2885, -3749,
   12441,  1390, -3749,  1593, 11806,  1593,   804, -3749,  2881,  2881,
    2881, -3749,  2886, -3749, -3749,  2881,  3264,  2881,  3269,  2889,
    2892,  1862,  2010, -3749,  1877,  2019,  1484,  2893,  2896,  1463,
   -3749, 11806, 11806,  1496,  1502,   612,  1106,  1113,   414, -3749,
    1515,  3636, -3749, -3749,  1548,  1558,  1581,  1602,  1120,  1612,
    1880, 12441,  1636,   380,   580, -3749,  1647,  1131,  1200,  1655,
   11806,  1718, 11806,  1762, 11806,  1773,  1784,  1796, -3749,  2063,
    2230, -3749, -3749,  2897, -3749, -3749,  2877,  1593,  2899, -3749,
   -3749, 11806, -3749,   929, -3749, -3749, 16886,   698,  2900, -3749,
    1593, -3749, -3749,  2903,  1463, -3749, -3749, -3749, -3749, -3749,
   -3749,  2928, -3749, 50753,   469,  2919, 32976, 40332, 40332, 40332,
    2888, 11806, -3749, -3749,  3177, 24974, -3749,  3317, -3749, -3749,
   -3749, -3749, -3749,  2929,  2932, -3749, -3749, -3749,  3099,  3279,
    3173, -3749, -3749,  2935, 40332, -3749,  2381, 26208, -3749,  2940,
   -3749,  2940,  1571,  2942,  1913, -3749, -3749, -3749,  2909,  2112,
   18791,  3360,  2367, 40332, 40332, 40332, -3749,  2576,  2576,   148,
    2984,  3333, -3749, -3749, -3749, -3749, 49527, -3749, -3749, -3749,
   -3749,   982, -3749,  2949,  2951,   164,  3163, -3749, -3749, -3749,
   -3749,  9266, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749,
   -3749, -3749, -3749, -3749,  2476, -3749, -3749, -3749, -3749, 38493,
   -3749, -3749, -3749, -3749, -3749,   -57, -3749,  2944, -3749,  -191,
     106, -3749,  1445, -3749, -3749, -3749,  3337,  3097,  3097,  1119,
    3340,   880,  2960, -3749,   822, -3749, -3749, -3749,  2381, -3749,
   -3749, 11806, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749,
   -3749, -3749, -3749, -3749, -3749, -3749,   258, -3749, -3749, -3749,
      79,  2964,  3338,  3343,   157, -3749, 26825, 26825, -3749, -3749,
    1451,  1451, -3749,   132, 48301, -3749, -3749, 26825, -3749, -3749,
   -3749,  2968, -3749, -3749,  1973, -3749, -3749, 39106,  -121, -3749,
    1585, 50753, -3749, 26825, 26825, -3749,  -121, -3749, -3749, -3749,
   -3749, -3749, -3749, -3749, 26825, 48301,  2969, -3749,  1472, -3749,
   -3749, -3749, -3749, -3749,  1801, -3749, 48301, -3749, -3749, 48301,
   -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749,
   -3749,  2966,  2800,  1570, -3749,  2971,  2974, -3749, -3749, -3749,
   -3749, 50753, -3749, -3749, 24974, -3749, -3749, -3749,  5410, 50753,
   -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749,  3198,
   -3749, 11806, 11806,  3240, 50753,  3241, -3749,  3527, 50753,  3591,
   -3749,   113, -3749, 48301, -3749,  2980, -3749,  2988, -3749,  2681,
   -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749,
   -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749,
   -3749, -3749, -3749, -3749, -3749, -3749,  2982, 50753,  2589,  1141,
   -3749, -3749, -3749, -3749,  -121,   855, -3749, -3749, -3749, -3749,
    3258,  3259, 50753, -3749, -3749, -3749, -3749,  3124, -3749, 24974,
    2992,  2995,   194, -3749,  6401, -3749, -3749, -3749, -3749, -3749,
   -3749, -3749, -3749, -3749, 31750,  2576,  3362, -3749, -3749,  3787,
   -3749,  1593, 11806,   996, -3749, -3749,   269, -3749,  1042, -3749,
   -3749, -3749,  3004, -3749, -3749, -3749, -3749, -3749, -3749, -3749,
    2864, -3749, -3749,  2612, -3749, -3749, -3749,  3009,  3787,  3787,
   -3749, -3749,  3174, -3749, 11806, 11806, -3749, 11806, -3749,  1048,
    3011,  3032, -3749, -3749, -3749, -3749, 11806, -3749, -3749,  3787,
   -3749, 11806, -3749, -3749, 11806, -3749, 11806, 11806, -3749,  1798,
   -3749,  1805, -3749,  1819, -3749, -3749, -3749,  2410, -3749, -3749,
    1071, 50753, -3749, -3749,  1928, -3749, -3749, 11806, -3749, 44010,
   -3749, -3749,  3226, -3749, -3749,  3444, -3749, -3749, -3749,  -116,
    -116,  -116, 15616,  1593,  3500, -3749, -3749, -3749,  3317,  3390,
   -3749,   833, -3749, 50753,  3019,  1512, -3749,  1936, -3749, -3749,
   -3749,  2063,  3020, -3749,   822, 15616,  2801,  3192, -3749, -3749,
    1571, 26208, 32363, -3749, -3749, 40332,  2367,  2367,  2367,  2476,
    3449,  2876,  2876, -3749, 29906, -3749, -3749,  3181, -3749, -3749,
   33589, -3749, -3749, -3749, -3749, -3749, -3749, 29290, 47688, -3749,
   -3749,  2476, -3749,  2017,  1453,  2359, -3749,  1006, -3749,  1119,
    3407,  3412, -3749,  1119, -3749, -3749, 26208,  2576, 15616, -3749,
     334,  2063,  1593,  3030,  1472, -3749, -3749, 11806,  1451, -3749,
   -3749, -3749, -3749,  3033, -3749, -3749,  3537,  3539, -3749, -3749,
    1931, 50753, -3749,  2972, -3749, 26825,  2968, -3749,   158, -3749,
   -3749, -3749, 26208, -3749, -3749, -3749, -3749, -3749, 50753, -3749,
   24974, -3749, 20027, -3749,  3038, -3749,  2881,  2881,  2881, -3749,
   -3749, -3749,  2881, -3749,  2886,  3271, -3749,  2886,  2886, -3749,
   -3749, -3749, -3749, -3749,   269,   417, -3749, -3749,   269, -3749,
   -3749, -3749,   116,  1331,  2886, -3749, -3749, -3749, -3749, -3749,
   -3749, -3749,  2881,  2881,  2881, -3749, -3749,   269,  2881, -3749,
    2881, -3749,  3262, -3749,   220,   150,  2881,  2881,  2881,  3004,
    3042, -3749,  1593,  3787,  3596, -3749, -3749,  3197,  -121,  3533,
   -3749,  1968, -3749, -3749, -3749,  3456,  3054, -3749, 48914,  1980,
   -3749, -3749,  1205, -3749, -3749, -3749, -3749,  3199,   985, -3749,
    3222,  3055,  3056, -3749, -3749,  -121,  3058, -3749, -3749, -3749,
   -3749, -3749,  3674, -3749,  3063,  3067,  3068,  2742, -3749, 39719,
   -3749,   838,  1593,  3064,  3072,  3073,  3074,  3662,   136, -3749,
    3665, 42784, -3749, -3749, -3749,  1991,  3349, -3749, -3749,  2881,
   -3749,  2886, -3749, -3749, -3749,  3649, -3749, -3749,  2881,  3470,
     269, -3749, -3749,  3080, -3749,  3082,  3083,   126,  3084,  1823,
    1215,  2006,  3391,  3464, -3749,  3315, -3749,  1830,  1011,  1835,
    1879,  1887,  1922, -3749, -3749, -3749,   207,   106, -3749, -3749,
    2013, -3749,  3455,  3366,   169,  3125,  3125,  3125,  1663,  1593,
    2024, -3749, -3749, -3749, -3749,  3495, -3749, -3749,  3109,  3110,
   50753, -3749,  3173,  2410, 26208, 15616,  3107,  3112, -3749,  1070,
   -3749, -3749,  3103,  2367, -3749,  3695,  3535, -3749, -3749, 43397,
    3114, -3749, -3749,  3420, -3749, -3749, -3749, -3749, -3749, -3749,
   -3749,  2611,  2353,  3164,  1119,  1119,  2859,  3165, 11806,  3123,
   -3749,  3135, -3749, -3749,   780,  2410, 11806, -3749,  -102,  1955,
    3126,  3129, 50753,  3130,  3134, -3749,  3421, 26825, -3749, -3749,
   -3749, -3749, -3749,  5410,    79, -3749, -3749,  2968,    36,  3121,
   -3749, 50753,  3450, -3749, -3749, -3749, -3749,  -113, -3749,  3136,
    -113,  -113, -3749,  2224, -3749,  3169,   269, -3749, -3749,  3172,
   -3749, -3749, -3749,  -113,  3142,   269, -3749, -3749, -3749, -3749,
    -113, -3749, 43397,  -121,  2729,  3741, -3749,  3190, -3749,  3631,
    3509,  3752, -3749,  2548, -3749,  3521,  3423,   822, -3749,   269,
   -3749, -3749,  3749, -3749,   269,  3749,  -113,  -113, 50753, -3749,
   -3749, -3749, -3749, -3749, -3749, 50753, -3749,  1222, 50753,   139,
   -3749, -3749, -3749,  2681,  2034,  -121, -3749, -3749, -3749,  3153,
    3161, -3749, -3749, -3749,  1036, -3749, 50753,  5410, -3749, -3749,
    1070,  6153, -3749,  1334, 50753, 50753, 50753,  3616,  3335, -3749,
   -3749, -3749, -3749, -3749, -3749, -3749, -3749, 42784, -3749,  3749,
    3436,  3166, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749,
   -3749, -3749, -3749, -3749, 11806, -3749, -3749,  3467,  3623, -3749,
   -3749, -3749, -3749, -3749, -3749,   180,   180, -3749, -3749, -3749,
    3781, -3749,  3260,  3266, -3749, -3749,  3268, -3749, -3749,   129,
    2001, -3749, -3749, -3749, -3749, 15616,  3548,  3276, -3749, -3749,
   50753,  3224, -3749, -3749,   207, -3749, -3749, -3749, -3749, 11806,
   -3749,  3135,  2427, -3749, 29906, -3749,  1071, -3749,  3227, -3749,
   -3749, -3749,  3237,  1593, 50753,  3362, -3749, -3749,   157,   157,
   -3749,   780,   207,  1472,  1973,  3173, -3749, -3749, 50753, 50753,
    2064,  1472,  3200, 50753, 50753,  1156,  1156,  1156,  1171,  1171,
   -3749, -3749,  1383, -3749, -3749,  3573, -3749, -3749,  2072, -3749,
      72,  3452, -3749, -3749, -3749, -3749,  -113, -3749,   126, -3749,
   -3749, -3749, -3749, -3749,   126, -3749, -3749, -3749, -3749,  3207,
   -3749, -3749, -3749,  3471,  3235, -3749,  3209, -3749, -3749, -3749,
   35428, -3749, -3749, -3749, -3749, -3749, -3749, -3749,  3319, -3749,
   56883, -3749, -3749,   670,  3218,  2080, -3749, -3749, -3749, -3749,
   -3749, -3749, -3749, -3749,  1301, 50753, 24974,  3240,  3377, -3749,
    2972, -3749, -3749,  3113,  3192, -3749,  2083,  2114,  2117, -3749,
    3663, -3749, -3749,  3203,  1987, -3749, -3749, -3749, -3749,  3694,
   -3749, -3749, -3749, -3749, -3749,   370,  3465,  2681,  2681,  2681,
     -81,  2001, -3749, -3749,  3261, 24974, 16886,  3316,  2119, -3749,
   -3749,  1456,  2528, -3749,  1660,  1472, 11806,  2476, 39106, -3749,
   -3749, -3749, 11806,  3211, 11806,  3213,  2129, -3749, -3749,  3653,
    3653, -3749, -3749, -3749, -3749,  2135,  2140,  2143, -3749, 50753,
   -3749,  3486,  2146,  2153, -3749, -3749, -3749,  1383,  3215, -3749,
   50753, -3749, -3749, -3749,   283, -3749, -3749,  2155, -3749,  2193,
    2076, -3749,  3207, -3749, -3749, -3749, -3749, -3749, -3749, 11806,
    3691,  3243, 50753,   153, -3749, 58109, 58109, 50753, -3749, -3749,
   -3749, -3749,  5716, -3749, -3749,   859, -3749, -3749, -3749, -3749,
   -3749, -3749, -3749, -3749, -3749, -3749, -3749,  3818, -3749,  3216,
   -3749, -3749,  3219,  1150, -3749, -3749, 50753, 50140, -3749, -3749,
    5410,  3667,   286, -3749, -3749, -3749,   194,  3220,  2112,   796,
     188,  2025, -3749, -3749, -3749,  3796, -3749, -3749, -3749, -3749,
   -3749, -3749,   117, -3749, -3749, 26208, -3749, -3749,  1973, -3749,
   -3749, 50753, -3749,  3318,   822,   822,  3727,  3728,   822,   822,
     822,   822,  3236,  2528, -3749,  3707, -3749, -3749, 11806, -3749,
   -3749,  1593,  3463, -3749,  3798,   106,  1593, 50753,  1593, 50753,
   -3749, 50753,   119, -3749, -3749, -3749,  3446, -3749,   796,  1472,
    3242, -3749, -3749, -3749,  3173, -3749,   948,   948,   269,   126,
     269, -3749,  3244, -3749,  3245,  1593, 11806, -3749, 11806,  3270,
   -3749, -3749,  3686, 50753, -3749, -3749, -3749, -3749, 11806, -3749,
   56883, 56883, -3749, -3749, -3749, -3749,  3848,  1070,  3817,  3511,
    3819, -3749, -3749,  2199, -3749, -3749,  3044, -3749, -3749,  3527,
    5410, -3749, -3749, -3749,  -121,   822, -3749,   796, -3749, -3749,
   -3749,   822,  3499, -3749,   188, -3749, -3749, -3749,  2025, -3749,
   -3749, -3749, -3749, -3749,  3252, -3749,   822,  2427,  3254, -3749,
    3316, -3749,  3256, -3749,  -121,  -121,   822,   822,  2768,  2768,
    1973, 43397,  3367, -3749, -3749,   822,  1472, 50753, -3749,   908,
    3619, -3749,  2206,  2212, -3749,  3842, -3749,  3844,  3263,  3265,
   -3749,   796, -3749, -3749, -3749,   188,  2025,  2225, -3749,  3888,
   -3749,   925,  3531,  3534, -3749, -3749, -3749, -3749,   -93,  1593,
    1593, -3749,   252, -3749, -3749,  3657,  3745, 11806,  1593, 53818,
    3267, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749,
   -3749, -3749, -3749, -3749, 57496, 11806, -3749,   859,  3818, -3749,
    3530, -3749,  3532, -3749, 50140, -3749, -3749, -3749,  3775, 56883,
   -3749,  3769, -3749,  1070, -3749,  2681, -3749, 36041,  1689, -3749,
   -3749, 26208, 15616, -3749, -3749, -3749,  3283, -3749, -3749,   641,
   -3749, -3749,  -121,  -121, -3749, -3749, -3749, -3749, -3749,  2228,
   -3749, 43397, -3749, -3749,  3867,  3872,  3767,  3875,   908, -3749,
     -94, -3749, -3749, -3749, -3749, -3749, 48914, 48914, -3749, -3749,
   -3749, -3749, -3749, -3749, -3749,  3344,  3793, -3749, -3749,   118,
    3322, 11806, 56883, -3749,  3773, -3749,  3706,  1997,  3648,  3297,
   -3749,  3292,  2053,  3808, 58109, 58109, -3749, -3749, -3749, -3749,
   -3749,  3788, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749,
   -3749, -3749, -3749,  3479, -3749,  2256, -3749, 16251, -3749, -3749,
   -3749, -3749, -3749, 43397, -3749,  3367, -3749,  3312,   126,   126,
    3897,   126, -3749,  3899,  3908,   -94, -3749,  3325,  2263,   948,
     948,  -121,  3705, -3749,   118, -3749, -3749,   282, -3749,  1593,
   54431,  3905, 50753, -3749, -3749, -3749, -3749, 11806, -3749, 44623,
   55044,  3323, -3749, -3749, -3749,  3501, -3749,  3044,  3740,  3798,
   -3749,  3283, -3749,  3336, -3749,  3099,  2528, -3749, -3749,  3332,
   -3749, -3749,   126, -3749,   126,   126, -3749, -3749, -3749, -3749,
   -3749, -3749, -3749, -3749, 11806, -3749,  3821,  3427, -3749,  3341,
   -3749, 56883,  1238, 56883, -3749, -3749,  3765,  3345,  1617, -3749,
    3342, -3749, -3749, 56883,  3929,  3619, -3749, 16251,  3348, -3749,
   11806,  3350,  3351, -3749, -3749, -3749, -3749,  1593,  3931, 56883,
   50753, 51979,  3546, 55657,  3800, 50753,  5410,  3801,  3803, -3749,
   56883, -3749,   126,  3763, -3749, -3749,  1593, -3749, -3749,  3451,
   -3749, 52592, -3749,  2500, -3749,  3387, -3749, -3749,  3870,   943,
   -3749, -3749, -3749,  3640,  3371, -3749, -3749, 56883, 56883, -3749,
   -3749, -3749, 34202, 11806, -3749, -3749, -3749, -3749, -3749,  1053,
      92, 21261,  3519, 53205, 56270, -3749, -3749, -3749, 30522, -3749,
   -3749, -3749,  3820, -3749,  1593, -3749, -3749, -3749, -3749, -3749,
   43397,  2265, -3749, -3749, 26208, -3749, 34202, -3749, -3749, -3749,
   -3749, 24355,  3375, -3749,   822, -3749, -3749, 26208, -3749, -3749,
   15616, -3749, -3749
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -3749, -3749, -3749, -3749, -3749,    27, -3749, -3749, -3749, -3749,
   -3749, -3749, -3749, -3749,  1687, -3749, -3749, -3749, -3749, -3749,
    1385, -3749,   351, -2356,  -432,  3057, -3749, -3749, -3749, -3749,
   -3749, -3749, -3749, -3749,   603,  1504,  3357, -3749,   347, -3749,
      10, -3749, -3749, -3749, -2926,  -106,  -308, -3749, -3749,   128,
      22,  3003,  -307, -3019, -3749, -3749, -3749, -3749, -3749, -3749,
   -3749, -3749, -3749,   355,   352, -3749, -3749,   166, -3749, -3749,
   -2344, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749,  -503,
    -455,  1779, -3749, -3749, -3749,  3991, -3749,  3458, -3749,  1209,
    2200, -3749, -3749, -3749,  -149,   192, -3749,   197, -3749,   198,
   -3749,   199, -3749,   200,   201,   202,   209, -3749,   214, -3749,
   -3749,  -446, -3749, -3749, -3749, -3749,   217, -3749, -3749, -3749,
   -3749, -3749, -3749, -3749,  -320, -3749, -3749,  -154, -3749, -3749,
    -311,   222, -3749,  -257,   224, -3749,   225, -3749,  -169, -3749,
    -166, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749,
   -3749, -3749, -3749,  3015, -3749, -3749, -3749, -2288, -3749, -3749,
   -2196,  2558, -3749, -1820, -3749, -3749, -1967, -3749, -3749, -1712,
     955, -3749, -3749,   632,  -316, -3749, -1386, -1922, -1919, -3749,
   -3749, -3749, -2046, -2044,  -776,  2316, -1202, -2242, -3749, -3749,
   -3749, -3749,    62, -3749, -3749,   210,  2016,  2559, -3749,  2036,
   -3749, -3749,  1107, -3749, -3749,  1281,  1724, -3749,   869,  2769,
   -1244, -3749, -3749, -3749, -3749, -3749, -3749,    54,   195,   -62,
   -3749, -2791,   581, -3749, -3749, -3749, -3749, -3749, -3749, -3749,
   -3749, -2450, -3749, -3749, -3749,  -345, -3749, -3749,  -250, -3749,
   -3749,  -300, -3749,    55, -2329, -3749, -3749, -3749, -3749,  2560,
   -1394, -3749,  3587, -3749,  -475,   437,  2058, -2198, -1436, -3749,
    -935,  -926, -2507, -3749, -3749, -3749, -3350,  1040,  1467, -3749,
     794,  2054, -1923, -3749, -3749, -3749, -3749, -3749,  1538, -3749,
   -3749,   552, -3749,   550, -3749, -3749, -3749, -3749,  -240, -3749,
     171, -2859, -3749, -3749, -3749, -1900,   997,   781, -3749, -3749,
   -3749, -1108, -2857,  -902, -3749,   322, -2462, -2483,   751, -3749,
   -3749,   508, -3748, -3749,  -573, -2111, -2420,   -15, -3749, -3749,
     521, -3057,  1661, -3749, -3749, -3749, -3123, -1515, -3749,    71,
   -3749, -3749, -3749, -3749, -2827, -3749, -3749, -1494, -2273, -3749,
   -3749,  4134,  4137, -1524, -1972, -2497,   -46,   -44, -3749, -3749,
   -3749,  1992, -1486,    14,     7,    12,  1492,  -617,   223, -2320,
   -1865, -3749,   337, -3749, -3749, -3749, -3749, -3749, -3749, -3749,
   -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749,  2085,
   -1022, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -2695,   856,
   -3749, -3749,  1583, -3749, -3749, -3749, -1914,  3183, -3749, -3749,
   -3749, -3749,  3538, -2228, -2708, -3749, -3749, -3749, -3749, -3749,
   -3749, -3749, -3749,  2693,  1520, -3749, -3749,  1705,  2219, -3749,
   -3749, -3749, -3749, -3749, -3749,   585,  1795, -3749, -3749, -3749,
   -3749,  2092, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749,
     -58, -3749, -3749, -3749,   875,  2638, -3749, -3749, -3749,    -9,
   -3749, -3749, -3749, -3749,  2355, -3749, -3749, -3749, -3749,  2660,
   -3749, -3749, -3749, -3749, -3749, -3749,  1395, -3749,  1836, -3749,
   -1490, -3749, -3749,   976, -1005,  1789,  -595,  1917,   349, -3749,
    3593, -3749, -3749, -3749, -1671, -1701, -3749,  3286,  -822, -2597,
    2349,  -556, -1832,  1007,   243,  -343,   356,  4200, -3749, -1154,
   -1102, -3749, -3749,  -647, -3749, -3749, -3749, -3749, -3749,  2014,
    2020,  -616, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749,
   -3749, -3749, -3749,  1436, -3749, -3749, -3749, -3749, -1750, -3749,
   -3749, -3749, -3749, -3749,  1366, -3749, -2101, -3749, -3749,  -437,
   -3749,  3069, -3749, -3749, -3749, -2353, -1830,  1735,   934, -3749,
   -3749, -3749, -3749, -3749, -3749, -3749,  1743, -3749, -2783, -3749,
   -3749, -3749, -3749, -3749,  1939, -3749, -3749, -3749, -3749, -3749,
   -3749, -3749, -1649, -3749, -1924,   284, -3749,   438, -3749, -3749,
   -3749, -3749, -3749, -3749, -3749,   -78,   813,   -74, -2463, -1064,
    1726, -3749, -3749, -1292,  3105, -2087, -3749, -3749, -3749,  1923,
   -3749, -3749, -3749, -3749, -3749,   904, -2590, -1423, -3749, -3749,
   -3180,  -944, -2290,  -912, -3749, -1383,  1349,   457, -3749, -1853,
   -1093,  -285, -2688, -2543, -3749,  1653, -3749, -3749, -3749, -3749,
    -245, -3749, -3749, -3749,   471,  1826, -3749, -3749, -3749, -3749,
   -3749, -3749, -3749, -3749, -3749, -3749,  -567,  -800, -3749,  2074,
    -478, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749,
    2921,  2894,  1889, -3749, -3749, -2578, -3749, -3749,  1857, -3749,
     721,  -913, -1824,  1010, -3749, -3749,  1012, -3222, -3749, -3749,
   -3749, -3749, -3749, -3749,   968, -3749,    -5,  3672, -3749, -3749,
   -3749, -3749, -3749, -3749, -3749,  2691, -1075,  3583, -3749, -3749,
   -3749, -3749, -3749, -3749,  2335, -3749, -3749, -3749, -3749, -3749,
   -3749,  2846,  3693,  -577, -1278, -3749,  -610,  2336,  1824,  -879,
   -3749, -3749, -3749,  3697, -3749, -3749, -3749, -3749, -3749, -3749,
   -3749, -3749, -3749,  2486,   949, -3749, -3749, -3749, -3749,  2924,
   -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749,
   -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749,
    1059,  -118, -3749,    -3,  -159, -3749,   -83, -3749, -3749, -3749,
   -3749, -3749,  -254, -3749, -3749,  -259,  -685,  -988, -1396,   668,
   -1800, -2549,  1054,  2917, -3392,  -689, -1186, -1183, -2139,    70,
   -3749, -3749,  3404,    65,   817,  -335,    -6, -2461,  -109,  -576,
   -3749, -2094, -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749,
    1853, -3749, -3749, -3749,  1029, -3749,  3719, -3749,  2577,  1032,
    3723, -1368,  2422,  1874,  1876, -3749, -3749,  1883, -1934, -3749,
   -3749,   193, -3749,  2489, -3749, -3749, -3749, -3749, -3749, -3749,
   -3749, -3749, -3749, -3749, -3749, -3749, -3749, -3749,  2937,  3735,
    3414, -3749,  3000, -3749, -3749, -3749, -3749, -3749,   416, -3749,
     732, -2300, -1385, -3749, -3749,  2756,   687, -3749,  1534,  -291,
    -584, -3749, -3749,   415, -3749, -3749,   354,  3746,  3419, -3749,
   -3749, -3749, -3749, -3749, -2762,  -886, -3749, -3420, -2818, -1699,
   -3749, -3749, -2183, -3040, -3749, -3749, -1052, -3749, -3749, -3749,
   -3749, -2096, -3749, -3749, -3749,    24,  3797,  3804, -3749, -3749,
     510, -3749,   -97, -3749, -3749, -3749, -3749, -3749, -3749, -3749,
    3664, -3749, -3749, -3749, -3749,  3666, -3749, -3749, -3749, -3749,
   -3749,  3668, -3749, -3749, -3749, -3749, -3749,  1494, -3749, -3749,
   -3749, -3749, -3749, -3749, -3749, -3749, -3749
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If zero, do what YYDEFACT says.
   If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -2625
static const yytype_int16 yytable[] =
{
     497,   869,   972,  1497,  1059,   925,   968,  1392,  1395,  1706,
    1004,   540,  1707,   539,  1378,   626,   545,  1407,  1131,  2282,
     556,  1499,  1579,  1457,  2415,  2416,   559,   564,   495,  1916,
    1427,  1616,   652,   571,  1150,  1816,   574,  1883,  1258,  2096,
     571,  2093,  1915,  1017,  2399,  2160,  2161,  2965,   595,   808,
     809,   810,  3026,   812,   813,  1427,  1772,   815,  2823,   817,
    2792,  1421,  1102,  1728,  2913,  1683,  3562,  3243,   646,   137,
    1736,  1968,  3276,  1181,  2700,  3067,  1185,  2675,  1504,  1660,
    1048,  1051,  1625,  1349,  2066,  3116,  2707,  1505,   797,  1458,
     615,  1825,   543,  2779,  2398,  2520,  2525,  2708,  2521,  2644,
    2755,  2645,  2832,  2886,  1073,  1081,  2533,  3395,  1971,  3758,
    2537,  2892,   583,   618,  3567,   497,  3282,   497,   625,   631,
    2901,  2552,  2844,  1738,  1739,  3403,  1993,  1742,  1743,  1744,
    1745,  2561,  1747,  1748,  1750,  1752,  1753,  1754,  1755,  1756,
    1242,  1209,  1210,   620,   649,   622,  3894,  2508,  2483,  2484,
    3497,  3857,  3187,   980,  1831,   640,   987,  3695,  1923,  3382,
    1200,  1201,  1202,   993,  2318,  2495,   614,  2633,   572,  2136,
    2006,  3082,  1243,  1311,  3783,  1209,  1210,  3609,  1936,  1188,
    1311,  2751,  2513,  2514,  2411,  3641,  1939,  1940,  1480,  2516,
    1089, -2435,  1090,  1091,  1092,  1820,   934,   916,  2535,  2536,
    4371,  2538,   504,   587,  2541,  2542,  3126,  3127,  2545,  1410,
    2318,  2377,  3133,  2554,  3135,   584,  2868,  2557,  2558,  2559,
    2560,   555,  3087,  2641,  2564,  2565,  2642,  2567,   563,  2927,
    3131,  3602,  3607,  2576,  3732,  3608,  2580,  2581,  1527,  2583,
    1261,  3447,  1209,  1210,  3238,  2183,  2006,  3263,  2570,  1209,
    1210,   851,  2180,  1306,  3618,  3448,  3580,   118,  2941,  1797,
    3872,  3640,  4127,  1209,  1210,  3951,  3316,  1209,  1210,  3449,
    4134,  2923,  2924,  1052,   733,  3457,  2869,  3306,  4031,  2497,
     934,   916,  2931,  2006,  1244,  1874, -2504,  3784,  2146,   885,
    3447,  1501,  1209,  1210,  1388,  3251,   861,   551, -1976,  4307,
    1474, -2435,  1343,  3756,  3448,  2628,  2629,  2630,  2631,  2658,
    1995, -1509,  1209,  1210,  2477,  1312,  1324,  1905,  3449,  1487,
    -867,   981,  1312,  1394,  4185,   873,  3088,   641,  3504,   934,
     916,  3100,  1864,  1501,   855,  2931,  1501,  1062,  2677,   994,
    1264,  1209,  1210,  1209,  1210,  4101,  2577,  3707,  2081,   633,
     548,  -439,   132,  2142,  2648,  1189,  1875,  1582,  1582,  1459,
    1865,  4526,  -533,   670,  1425,  -534,   591,  3915,  2884,  4186,
    2840,  3812,  2870, -2572,  1945,   120,  1906,  1989,  2297,   136,
   -1799,  3040,  4252,  3274,  2929,  3029,  2094,  1467,  3073,  3074,
    2571,  2187,  1246,  1162,  2943,   573,  1209,  1210,  4152,  2408,
     886,   654,  2653,  4312,  3913,  1209,  1210,  1209,  1210,   262,
    2095,   264,   552,  1179,  2875,  4086,  4363,  3733,   856,  3429,
   -2436,   136,   671,  1538,  3035,  2654,  1193,  1194,  1209,  1210,
    1209,  1210,  3932,  4312,  3030,  3732,   133,   854,  3447,  3036,
    4135,  3275,  3080,  3041,  1624, -1509,  1432,  4364,   549,  1946,
    2871,  2378,  3448,  1989,  1438,  2007,  2841,  1303,  1150,  3952,
    2932,  2082,  1209,  1210,   592,  3813,  3449,  3105,  2250,  1468,
    1798,  1967,   887,   757,  1425,  1338,  4153,   934,  3603,  1768,
   -2572,  1649,   138,  3821,  1650,  1878,  1583,  1605,   857,   642,
    1989,   634,  3825,  4187,  1964,  1255,  3553,   645,  1211,  1129,
    3557,  1212,  4102,  2863,   625,  2649,   631,  3814,  4308,  2433,
     982,  1866,  1325,  1560,  1561,  1562,  3841,  1559,  1349,  1488,
    3734,  3843, -1469,  3903, -2003,  2578,  3252,   631,  1452,  3785,
   -2436,  2007,  3457,  3246,  3247,  3248,   849,  3313,  1209,  1210,
     625,  2551,   859,  4032,  1209,  1210,  2900,  1475,  1349,  1411,
    4527,  1918,  1907,   672,  1921,   877,  1876,  3953,  1924, -1469,
    1927,  2319,  1130,  1075,  1083,   583,  1772,  1504,  2007,   853,
    3171,  1053,   926,  1733,  1209,  1210,  1505,  1769,  2838,   862,
   -1509,  2837,  1969,  2265,  1069,   989,  2596,  1245,  1942,  1943,
    3118, -2147,  2644,   874,  2645,  2520,  1209,  1210,  2521,  1211,
    1799,   852,  1212,  3933,  1007,  1993,  1211,  2319,  3307,  1212,
    1389,  3940,  1741,   625,   860,  1021,  3301,  3302,  3733,  1504,
    1211,  2379,   658,  1212,  1211,  2909,   615,  1212,  1505,  1762,
    2066,  2519,   497,  3587,  3523,  1462,  3430,   615,  3295,  1046,
   -2435,   615,   615,   657,  2299,  3014,  1060,  1021, -2172,  1211,
     583,   625,  1212,   583,  3188,  2302,  2872,   990,  2305,  2455,
    1033,  3300,  3530,  1539,   816,  3075,  4176,  1097,   995,  1211,
    3089, -2435,  1212,  1593,  1594,  2933,  1832,   588,  3735,  3728,
     898,  1209,  1210,  2946,  1190,  2948,  1087,  2006,  2296,   585,
     878,  3736,  2959,  4372,  3565,  2925,  1775,  4239,  1211,  1648,
    1211,  1212,  1031,  1212,  1257,  2971,  2181,  1661,  3696,  1663,
    3610,  2980,  2982,  1043,  1209,  1210,  2641,  1151,  4488,  2642,
    2958,  1676,  1677,  1678,  3382,  1793,  3921,  2998,  2982,  1682,
    3264,   818,  2966,  2366,  1971,  4060,  1994, -2504,   963,  3083,
    2124,  1307,  1213,  2845,  3404,  1540,  1209,  1210,  2136,   867,
    3249,  3250,  1821,  1211,  3050,  3051,  1212,   880,   586,  2640,
    3056,  2285,  1211,  1818,  1211,  1212, -2504,  1212,  3064,  3065,
    3858,  3769,  3770,  3069, -1509,  1206,  1213,  1208,  2926,  2141,
    1838,  3123,  2572,  3737,  2921,  1211,   991,  1211,  1212,  1995,
    1212, -1509,  3450,  1209,  1210,  1846,  4142,  2929,  2929,   553,
    -867,  1251,   497,  1253,  1254,  1021,   497,   625,  3309,   497,
     625,  1393,  3078,  4015,  2891,  1398,  1403,  3638,  1863,  1211,
    1209,  1210,  1212,  1770,  3317,  3318,  1209,  1210,  1209,  1210,
    1252,  -439,  1424,  4334,  1256,  3320,  3414,  1260,  2197,  2147,
   -2003,  3450,  -533,  1213,  3115,  -534,  2934,  1316,  2148,  1786,
    1213,  3123,  1938,  2876,  2515,  3595, -2285,  4211,  1922,  3596,
     615,  1209,  1210,  4087,  1213,  1713,  1714,  2797,  1213, -2436,
    1209,  1210,   625,   615,  3593,  3594,  1304,   615,  4134,  1713,
    2216,  1540,  3131,  3415,  2198,  3131,  3131,  4376,  1433,  3615,
    3616,  3617,  3736,  1213,  1989,  1211,  1439,  3620,  1212,  4193,
   -2436,  1211,  3131,  1953,  1212,  3646,  3433, -2147,  2823,  2251,
    1209,  1210,  1651,  1213,   625,  1652,  3619,  3548,   625,   625,
   -1469,  1841,  3639,  3642,  3644,  3645,  3552,  3266,  2254,  2255,
    3556,  1211,  2142,  1973,  1212,   625,  1327,  1340,  3199,  1898,
    1524,  4013,  1213,  2647,  1213,  3533,  2784,  2377,  3106,  1346,
    2422,  1209,  1210,  1211,  2289,  4348,  1212,  2271,  2272,  3534,
    2171,  1209,  1210,  2597, -2172,  4204,  3303,  4206,  3776,  1463,
    2437,  3775,  2007,  3280,  3281,  3224,  3702,  2223,  1209,  1210,
    1070,  3093,   615,  1388,  1453,  3705,  1967,  1769,  2451,  3450,
    1566,  1209,  1210,  1410,  3935,  3581,  4282,  1213,  2359,  3131,
    4198,  1244, -2003,  1500,  2520,  3777,  1213,  2521,  1213,  1847,
    3604,  3379,  3172,  1289,  2426,  1209,  1210,   262,  1769,   264,
    1427,  2760,  2761,  2266,  2482,   583,   664,   583,  3438,  1213,
    2399,  1213,   615,  2644, -2356,  2645,  2939,  2939,  1211,  1868,
    4342,  1212,  3473,  1320,  2449,  2189,  3156,  3157,  4135,  1916,
    1428,  1916,  1916,  4303,  1123,  1563,  1427,  2454,  3429,  3031,
    2457,  2458,  4284,  1213,  2880,  2881,  1954,   500,  2502, -2147,
    1955,  1211,  2447,  4285,  1212,  3304,  3305,  3205,  2172,  2525,
    2398,  1034,  1564,   615,  1568,  1569,  1570,  1575,  2154,  2552,
    3582,  3549,  3482,  1464,  3946,  2679,  3094,  1582,  1723,  1209,
    1210,  1429,  1559,  1211,  1209,  1210,  1212,  4246,   881,   505,
    1993,  3107,  1209,  1210,   557,  3231,  1209,  1210,  1465,   561,
    2721,  3443,  1209,  1210,  1192,  2812, -2172,  1151,  2503,  1209,
    1210,  2519,  1071,  2360,  2290,  1761,  1209,  1210,   604,  1213,
    2759,  1151,  4110,  2304,   656,  1213,  2050,  1209,  1210,  2066,
    1211,   589,  3966,  1212,  2184,  2400,  2504,  2641,  1582,  1567,
    2642,  2191,   733,  1573,  2595,   814,  2006,  3443,  1209,  1210,
    1226,  3917, -2285,  1088, -2624,  1213,  2929,  1211,  2885,   963,
    1212,  1209,  1210,  1211,  2906,  1211,  1212,  2378,  1212,  1708,
    2188,  2282,  2053,  1504,  1209,  1210,  3411,  1213,  2317,   607,
    3561,   625,  1505,  4118,  1707,  3032, -2356,  3291,  2306,  2321,
     610,  1869,  3173,  3174,  4119,  1994,  1209,  1210,  1211,  3666,
    1848,  1212,  2469,  2129,  2505,  1757,  1668,  1211,  3667,  1830,
    1212,  1209,  1210,  1770,  2352,   608,  2764,  2765,   625,  4083,
    3470,  2758,  1729,  1765,  3284,  1246,  2136,  4181,  1010,  3944,
    3945,  2768,  2640,  1024,  1209,  1210,  4133,   615,  2373,  2374,
    4203,  2427,   882,  2808,  1770,  2365,   616,  1211, -1821,   136,
    1212,  1102,  4344,  1209,  1210,  3430,  3095,  3444,  1209,  1210,
    4286,  1454,  1213,  4304,  1527,  1209,  1210,  1672,  2904,  1209,
    1210,  1707,  3153,  4197,  1995,   625,   705,  3026,  2194,  1389,
    4111,   605,  2506,  4199,  1245,  1025,  3218,  1802,  1211,  1805,
     136,  1212,   615,  1209,  1210,  1213,  1996,  2636,  1211,  1209,
    1210,  1212,  2684,  3444,   615,  1209,  1210,  2361,  4551,  3571,
    3196,  3197,   625,  1411, -2285,  1211,  2291, -2572,  1212,  1985,
    3699,   615,   615,  2448,  1209,  1210,   583,  1213,  1211,  3122,
    1799,  1212,  2292,  2324,  3875,  3445,   710,  2379,  2141,  2666,
    1229,   757,  3108,  2195,  3668,   625,  3778,  1321,  1850,  2646,
    2740,  1508,  1211,  1989,  3096,  1212,  1858,  2978,  4246,  1859,
    1707,  1209,  1210,  2667,  1809,  1209,  1210,  1129,   625,  2585,
    3483,  3011,  1026,  4462,  1213,  1209,  1210,  4200,  1879,   926,
    1975,  3455,  3209,  3210,  3211,  1540,  1209,  1210,  1582,   497,
     497,   497,   615,   497,   615,  1054,  1057,  1058,   583,  1917,
    1997,  1213,  1730,  4120,  4201,  1919,   497,  1213,   625,  1213,
    2142, -1821,   497,  3570,  2916,  1758,  2647,  1899,  1900,  1901,
    2939,  1903,   567,  2196, -2572,  2203,  1209,  1210,   619,  4287,
    1180,  2007,   722,   615,  1920,  3605,  1211,  2408,  1759,  1212,
    1926,  1211,  1213,  2217,  1212,  1851,  4112,  3285,  1011,  1211,
    3689,  1213,  1212,  1211,  1953,  1895,  1212,  2310,  2204,  1211,
    4274,  4275,  1212,  1916,  1986,  2311,  1211,  2214,  1902,  1212,
    1904,  2130,  3323,  1211,  1055,  1012,  1212,  1769,  4063,   733,
    1209,  1210,  1925,   625,  1211,  2409, -1822,  1212,  2507,  2551,
     632,  1213,  1209,  1210,  4105,  4106,  2967,   615,  1209,  1210,
    2861,    43,  2089,   615,  1828,  1211,   621,  2215,  1212,  1937,
     738,  1209,  1210,  2666,   615,  3666,  3072,  1694,  1211,  1716,
    2519,  1212,  4419,  4420,  3667,  4017,  1542,  2917,   638,  2465,
   -1799,  1211,  1213,   625,  1212,   497,   497,  2667,  2156,   497,
    3000,  3446,  1213,  2383,  1209,  1210,  3012,  1829,  2219,  4337,
    1097,  2384,  2170,  1211,  1209,  1210,  1212,  2278,  2231,  1213,
    2005,  4192,   649,  2152,  2153,  1998,  3881,  1953,  1211,  2968,
    1414,  1212,  1213,  2083,  1852,  2238,  1999,  1209,  1210,  2091,
    1027,  3117,  1070,  2000,  4182,  3324,  4183,  3446,  2242,  1209,
    1210,  1211,  3195,  2310,  1212,  1247,  1213,  -204,  1209,  1210,
    1760,  3260,  2742,  1989,  1731,  3026,  3026,  4062,  1209,  1210,
    1211,  3234,  2243,  1212,  1707,  1211,  2217,  1954,  1212,  1967,
    1732,  1955,  1211,  3720,  1376,  1212,  1211,  1415,  1989,  1212,
    2522,   120,  1209,  1210,  1238,  1239,  1240,  1241,   963,   733,
    1151,  2224,  1543,  1209,  1210,  1028,  1544,  1029,  2322, -1822,
    1211,  1209,  1210,  1212,  1416,   651,  1211,  1545,  2466,  1212,
    3668,  2763,  1211,   645,    57,  1212,  2385,  2386,  2969,  2502,
    3852,   653,  2979,  2640,  4298,  2467,  2001,   665,   757,  4042,
    1213,  1211,  1717,  1034,  1212,  1213,  4467,  2468,  1355,  1131,
    1181,  1185,   513,  1213,  3026,  2466,  2244,  1213,  2288,  4043,
    1994,  2245,  3518,  1213,  1129,  4468,  2387,  2797,  1333,  2249,
    1213,  1334,  2467,  2267,  1209,  1210,   765,  1213,  1211,  3154,
    2279,  1212,  1211,  1770,  2897,  1212,  3155,  1769,  1213,  2503,
    1954,  2421,  1211,  3166,  1071,  1212,  4000,  2704,   667,  2548,
    2312,   615,  2709,  1211,  3176,  3519,  1212,  4234,   625,  1213,
     615,   625,  1769,   668,  4356,  2715,  3801,  2504,  1209,  1210,
    3573,  3574,  1213,   615,  2190,  2328,   669,  2469,  2002,  1209,
    1210,  2334,  2334,  1563,  2334,  1213, -2624,  2205,  2282,  2094,
    1209,  1210,  2383,  1211,   625,  1546,  1212,   615,  2730,   806,
    3411,   615,  1209,  1210,  1209,  1210,  4346,  1213,   568,  4350,
    1565,  1209,  1210,  2095,  3801,   568,  1261,   811,   625,   625,
     615,   615,  1213,  3177,   850,  1209,  1210,  2313,  1151,  1209,
    1210,  2334,  2334,  2334,   864,  2505,  1209,  1210,  3714,   870,
     583,  1209,  1210,  3853,   625,  1213,  2141,  1211,   757,  2855,
    1212,  3312,  2646,  4393,  4393,   872,   925,  2333,  2333,  1211,
    2333,   926,  1212,  2774,  1213,  1211,  1335,  2647,  1212,  1213,
    2856,  4000,  4000,  2357,  1129,  1417,  1213,  1327,  1211,  2206,
    1213,  1212,  2444,   892,  2213,  1209,  1210,  2372, -1710,  2470,
    1883,  2227,  1547,  1209,  1210,  2228,  1346,  2376,   963, -1710,
     262,  2857,   264,   979,  1213,   934,   916,  2333,  2333,  2333,
    1213,  1211,  3308,  2506,  1212,  3611,  1213,  1972,  3612,  2232,
    3269,  1211,   615,   963,  1212,  2236,  2898,   890,  1209,  1210,
     882,  2237,   501,  1378, -1710,  1213,   502,  1184,  1247,  2464,
    2165,  4446,   986,  3321,  1211, -1710,   615,  1212,  2440,  1005,
    2241,  2678,  1427,  2471,  3327,  3874,  1211,  3329,  4380,  1212,
    2957,  1209,  1210,  2129,  2550,  1211,  1209,  1210,  1212,  1006,
    1517,  1518,  1213,  3550,  1014,  1211,  1213,   853,  1212,  1794,
    1542,  3288,  1795,  1770,  1609,  1796,  1213,  2246,  1247,  1023,
    2471,  2258,  1247,  1209,  1210,  1034,  3272,  1213,  2456,  1211,
    1047,  2273,  1212,  1209,  1210,  1418,  4000,  4000,  1770,  1557,
    1211,  3406,  3120,  1212,  2496,  1044,  1209,  1210,  1211,  3140,
    1063,  1212,  2476,  1064,  2634,  1209,  1210,  1419,  3143,  2383,
    2650,  2486,  1068,  1916,  4028,  4029,  4030,  1213,   501,  2930,
    2493,  2494,   502,  2579,  1610,  3441,  3688,  2942,  1707,  2947,
     118,  2498,  2499,  2500,  2501,  1099,  2509,  2510,  2594,  1209,
    1210,  2961,  1976,  2963,  2964,  1100,  1393,  1101,   615,  1420,
    1103,  3278,  1611,  2974,  3475,  3476,  1977,  4461,  1393,  4463,
    1104,  1211,   999,  1000,  1212,  1001,  1246,  1002,  1609,   562,
    2904,  1213,  1105,  1707,   977,  3488,  1543,  4134,   978,  1108,
    1544,  1057,  1058,  1213,   596,  4481,  3144,  2129,   995,  1213,
    1540,  1545,  1109,  1989,  2990,  4000,  2991,  3842,  3150,  2507,
    3844,  1110,  1213,   118,  3151,  1211,  2978,   625,  1212,  1707,
    4000,  2400,  2465,   625,  1111,  2651,  1211,  3158,   497,  1212,
    1612,  1250,  2744,  4513,  4514,  4000,  2673,  1211,  1610,  2676,
    1212,  1112,  2385,  2386,  1113,  1213,   597,  2992,  1114,  1211,
    1115,  1211,  1212,  1116,  1212,  1213,  2656,  2756,  1211,   625,
    3162,  1212,  2192,  2193,  3882,  1117,  1611,  2294,  2993,   963,
    3163,   625,  1211,  1118, -1799,  1212,  1211,  4388,  1213,  1212,
    1119,  1609,  3237,  1211,  3896,  4158,  1212,  2778,  1211,  2766,
    1213,  1212,  1249,  3164,  2210,  1246,  2306,  1120,  4000,  1213,
    4164,  4165,  1121,  2994,  4168,  4169,  4170,  4171,  1613,  1213,
    4000,  4000,  1124,   119,  3165,  1265,  3597,   598,  3230,  3600,
    3601,  2130,   901,  1290,  3167,  1978,   262,  1769,   264,  1546,
    2945,   120,  1211,  1213,  1612,  1212,  3613,  1261,  1261,  1261,
    1211,  1610,  1126,  1212,  1213,  1127,  2006,  1989,  3170,  4056,
    4057,  2466,  1213,  2185,  2972,  2973,  1128,  4135,  1298,  3175,
     625,  2218,  1246,  1132,  3929,  3930,  4000,  3178,  2467,  1611,
   -2615,  2220,  1246,  4058,  1133,  1211,  4000,  1134,  1212,  1135,
    2468,  2522,  1136,  2646,  2102,  2775,  2104,  2105,  3897,  3898,
     625,  4255,  1226,  3899,  3900,  1137,  2131,   121,  2186,  1246,
    1979,  3525,  1138,  2129,  3194,   625,  3054,  3547,  1211,  3649,
    1139,  1212,  1613,  1211,  1226,  1213,  1212,  4000,  3234,  4000,
    1140,  1707,  4272,  4273,  1141,  1980,  1547,  2221,  1666,  4000,
    3180,  4281,  1144,  3703,  2233,  1246,  1145,  1612,  2806,  1427,
    1211,  1146,  3117,  1212,  2806,  4000,  2282,  4000,  1152,  4000,
    1211,   902,  1153,  1212,  2421,  1393,  4000,  1154,  1311,  1213,
    2469,  2828,  1155,  1211,  1156,  2130,  1212,  4000,  2234,  1246,
    1213,  1769,  1211,   901,  3182,  1212,   625,  2235,  1246,   122,
   -1799,  1213,  4335,  4000,  4000,  3184,  1157,  1981,   963,  2849,
    2548,  2851,  1158,  1213,  1159,  1213,  3185,  2636,  1160,  4000,
    4000,  2995,  1213,  1163,  4000,  1164,  1211,  1292,  3186,  1212,
    3493,  1165,  1293,   926,  1614,  1613,  1213,  3494,  1166,  1917,
    1213,  1917,  1917,  1167,   903,  2778,  1168,  1213,  2119,  2120,
    2094,  3495,  1213,  2239,  1246,  3713,  1169,  2465,  1209,  1210,
    2131,  2132,  3719, -1509,  1170,  2996,  1300,  3721,  1708,  1586,
    1587,  1588,  1301,  1989,  2095,  2511,  2512,   625,   625,  1171,
    2848,  1172,  3315,   599,  2748,  1246,  1606,   934,   916,  3711,
    2782,  2783,  2470,  1770,  3139,  2193,  1213,  1982,  1471,  1472,
    1473,  1615,  1229,  1173,  1213,   600,  1478,  1479,  1294,  3142,
    1246,  3722,  3168,  1246,  1295,  1174, -1509,  2594,  1669,  3723,
    1312,  1673,   902,  1175,  1229,  2944,  1176,  2594,   123,  1177,
    2336,  2954,  2337,  2953,  4145,  4149,  1178,   601,  1614,  1213,
    1690,  1691,  4384,  1182,  1695,  3240,  3241,  1183,   625, -1509,
    1186,  2007,   963,  2975,  3724,  1187,  2471,  1708,  1296,  2986,
    3499,  1246,  1709,  1710, -1509,  2988,  2989,   615,  3521,  3522,
   -1509,  1191,  1213,  1195,  3621,  1297,  2953,  1213,  1196,  2403,
    2404,  2405,  1197,  2594,  3010,  1198,  2466,  3787,  1199,  3028,
    1248,  2130, -1509,  1309,   602,   903,   124,  1769,  3048, -1509,
    3654,  3655,  1310,  2467,  1213,  2132,  2955,  2956,  1317, -1509,
    4044,  2549,  3662,  3663,  1213,  2468,  1319,  1440,  4045,  4024,
    3622, -1509,  1323,  3692,  3700,  2550, -1509,  1213,  1331, -2615,
    3623,  1352,  2985,  1226,  1341, -1509,  1213,  1770,  3715,  1246,
    1354,  1614,  4046,  2987,  4495,  3729,  1246,  2688,  1441,  1231,
    1232,  4498,  4499,   615,  2594,   125,  3744,  3745,  4145,  1371,
    3027,  1372,  4149,   615,   615,   615,  3861,  2512,  2632,  1261,
    1213,  1231,  1232,  2689,  3052,  3053,  3624,  3055,  1373,  3057,
    3058,  3059,  3060,  3061,  3062,  3063,  1376, -1799,  3066,  1379,
    3068,  3934,  1408,  3071,   925,  2469,  3938,  3939,  3819,  3820,
    1384, -1509,  1442,  2502,  3949,  3950,  2981,  1443,  4091,  4145,
    4149,  3823,  4005,  4006,  1609,  4019,  3939,  3767,  3826,  4552,
    3481,  1409, -2615, -1509,  3840,  1385,  -624,  2690,  1404,  3098,
    2691,   904,   905, -1509,   907,  1413,   909,  1630,  2692,  3111,
    3112,  3113,  2522,  1425,  3845,  3846,  4020,  3939,   910,  4021,
    3939,  4040,  4041,  1434,  2523,  2693,  1435,  4047,   963,  1436,
    3500,  4070,  4071,  2503,  1437, -1509,   679,  4075,  3522,   262,
    1456,   264,  4076,  3939,  1610,  4077,  3939,  2328,  4081,  3939,
    1316,   625,   625,   625,   526,  4082,  3939,  4088,  4089,   615,
    1460,  2504,  1234,  1235,  1236,  1237,  1238,  1239,  1240,  1241,
    1461,  -787,  1611,  1466,  2808,  1476,  2502,  2470,   625,  1477,
    2918,  1708,  1482, -1509,  1234,  1235,  1236,  1237,  1238,  1239,
    1240,  1241,  1483,  1229,  1151,  4090,  4089,   625,   625,   625,
    3958,  4243,  4244,  1311,  1634, -1509,  3958,  4048,  4292,  4071,
    3259,   527,  1485,  1770,  4293,  4071,  1490,  3795,  1393,  4156,
    1444,  -624,  1707,  2694,   705,  4049,   508,  4301,  3522,  2505,
    4354,  4355,  1495,  3673,  -624,  3217,  2503,  4092,   528,  1501,
    1612,  2471,  1507,  1917,  3079,  3697,  1509, -1509,  4050,  1511,
    2522,  1514,   904,   905,   906,   907,   908,   909,  4400,  4401,
    1515,  2094,  2523,  1609,  2504,  4418,  3408,  4540,  4541,   910,
    1057,  1058,   529,  3887,  3888,  1519,  3626,   709,  1697,  1698,
    1522,  3258,  3627,  1523,   710,  2095,  3537,  3538, -1509,  3506,
    3507,  3296,  3742,  3743,  1445,  3341,  1528,  1529,  1530,  1551,
    2594,  2594,  1552, -1509,  1553,  1556,  1635,  2506,  2953,  1558,
    1638,  2594,   714,  1559,  1576,  4159, -1509,  1639,  1613,  2173,
     530,   625,  3628,  1610,  1578,  2953,  2695,  2594,  2594,  1244,
    1582,  1608,  2505,  2465,  1225, -1509,  1589, -1509,  2594,  2953,
    1226, -1509,  1619,  1190,  1654,  1312,  1665,  1666,  1667,  3459,
    2953,  3021,  3460,  2953,  1705,  1724,  1715,  1446,  1740,  -624,
    3461, -1509, -1509,  1746,   508, -1509, -1509,  1766,  1767,  1773,
    1774,  1777, -1509,  1780, -1509,  3333,  1781,  3462,   615,  1782,
     722,  1783,  1784,  3390,  1785,  1787,  1790,  1788,  1791, -1509,
    3629,  1814,  1817,  3314,  1826, -1509,  1834,  1640,   497,  2094,
    1835,  3319,  3400,  1836,  2225,  1837,  1843,  2953,  2229, -1509,
    2506,  1844,  1845,  1854,  1860,   963,  1884, -1509,  1892,  3022,
    3463,  1893,  2524,  2095, -1509,  1897,  3396,  1928,  1930,  1929,
    2252,  4051,  1934,  1933, -1509,  1931,  -624,  3876,  3877,  3878,
    1935,  3413,   733,  1226,   -65,  4156, -1509,  4276,  1707,   531,
    1642, -1509,  1951,  3829,  3334,  1965,  3424,   737,   738,  1974,
   -1509,  2084,  2466,   615,  2078,  2085,  2696,  2098,  2125,  2099,
    1447,  4205,  2143,  2151,  2144,  3464,  1216,  1217,  3437,  2467,
    1131,  1181,  1185,  2162,  2168,  1236,  1237,  1238,  1239,  1240,
    1241,  2468,  2209,  3630,  2174,  2176,  1976,  3023,  2177,  2178,
    2201,  2200,  1378,  2202,  1448,  2207,  2217,  2208,  2222,  2211,
    1977,  1218,  2226,  2507,  2283,  3542,  2230,   532,  2247,  3416,
    2331,  2248,  1219,  2253,  1614,  2256, -1509,  2257,   511,  2268,
    1229,  2697,  2269,  2270,   507,  2022,  2287,  2023, -1203,  3426,
    2293,  3936,  3937,  1241,  1227, -1339,  3942,  3943, -1509,  2323,
    4245,  2303,  2349,  2364,  2358,  3498,  1540,  2367, -1509,  3918,
    2698,  1220,  3906,  2849,  2391,  2370,  2401,  1228,  2402,  -770,
    -770,  2469,  2025,  1221,  -624,  3465,   533,  2417,  3466,  2441,
    2423,  -770,   534,  2424,  2425,  2445,  2428,  2806,  1643,  2429,
   -1509,  2028,  2443,  3771,  2430,  2446,  2431,  2432,  4257,  2029,
    1222,   535,  2450,  1645,  2459,  2828,  3532,  -624,  2479,   625,
    2461,  1226,  2474,  4262,  2475,  4405,  2507,   508,   625,  2478,
    2481,  2485,  2487,  2031,  2775,  2492,   536,  2488,  4002,  2489,
    2490,   926,   926,  1229,  2848,  2522,  2491,  1501, -1509,  2534,
    2032,   757,  2539,   537,  2540,  3796,  2543,  2544,  3797,  2546,
    1708,  -631,  -818,  1057,  1058,  3467,  2553,  2547,  3621,   763,
   -1509,  1223,  2338,  2555,   765,  2556,   511,   766,  2037,  1978,
    2562,  2563,  2568,  2569,  2574,  2953,  2575,  1231,  1232,  2594,
    2582,  2598,  2602,  2470,  2339,  2604,  1708,  2606,  2607,  2627,
    2608,  2609,  2953,  2610,   615,  4533,  2594,  2340,  1707,  2611,
     509,  2612, -1509,  3024,  3622,  4055,  1226,  2613,  2341,  2614,
    2615,  2616,  1393,  2635,  3623,  4405,  2657,  2617,  4544,  2618,
    2619,  1707,  2620,  3798,  3799,  4533,  2621,  2622,  1707,  1230,
     262,  4544,   264,  2669,  1707,  2623,  2624,  2625,  2040,  2626,
    4410,  4411,  2670,  4413,  1979,  -624,  2041,  2471,  2671,  2674,
    2687,  2678,  2711,  2682,  2712,  2311,  2785,  2342, -1509,  2343,
    3624,  2042,  2787,  2710,  2786,  2722,  1057,  1058,  2772,  1980,
   -1509, -1509,  3048,  2723,  2735,  2754,  2762,  2771,   869,  2788,
    1231,  1232,  2795,  3468,  2789,  2800,  2344,  2801,  2798,  2802,
   -1509,  2809, -1509,  2814,  4454,  1233,  4455,  4456,  2810,  1821,
    3763,  1229,  2818,  1917,  2830,  2022,  2831,  2023,  2833,  2834,
    2835,  2409,  3469,  2408,  2853,   625, -1509, -1509,  2043,  2854,
   -1509, -1509,  1236,  1237,  1238,  1239,  1240,  1241,   679,  1868,
    3625,  1981,  1869,  3651,  2864,  2879,  2044,  2882,  1226,  -770,
    -770,  2893,  2025,  2894,  2895,  2910,  4055,  2914,  2915,  4248,
    2345,  -770,  2960,   262,  4492,   264,  2019,  2962,  3019,  3034,
    3678,  2028,  3077,  2020,  3038,  2021,  3043,  3049,  3076,  2029,
    3081,  3085,  3086,  2050,  4525,  3134,  2022,  3114,  2023,  1967,
    3136,  2169,  3123,  2421,  3752,  -787,  3191,  3128,  1708,  3212,
    2048,  3137,  2049,  2031,  3138,  3145,  1229,   510,  3146,  3189,
    2051,  3193,  3198,   625,  2346,  3201,  3202,  1501,  2024,  3795,
    2032,  3214,  3219,  2025,  2026,  3207,   705,  1333,  3242,   511,
    2027,  1982,  3245,  1234,  1235,  1236,  1237,  1238,  1239,  1240,
    1241,  3222,  2028,  3226,  3256,  3223,  3792,  3229,  2037,  2240,
    2029,  2594,  4250,  3236,  3239,  3804,  3257,  3273,  1231,  1232,
    2030,  3261,  3265,  3262,  3918,  3809,   512,  3279,  1393,  -539,
    3283,  3298,   513,  3286,  2031,  3297,  3299,  3330,  2057,   709,
    3391,  3311,  3322,  3331,  3394,  3397,   710,  3332,  1501,  3398,
    3402,  2032,  3407,  3412,  1057,  1058,   625,  3425,  2033,  2034,
    3626,  3408,  3419,  3420,  3427,  2035,  3627,  3428,   514,  3439,
     262,  4548,   264,  2036,   714,  3456,   515,  -894,  2040,  2037,
    3485,  3474,  3847,  3484,  3477,  3502,  2041,  3503,  3512,  3851,
    3514,  3517,  3856,  3524,  3535,  3542,  2058,  3554,  1229,  3543,
    2383,  2042,  3555,  3566,  3572,  3575,  3628,  3576,  2038,  3591,
    3424,  3598,  2059,  1231,  1232,  2659,  2060,  3652,  3792,  3792,
    3792,  3648,  2596,  3650,  3659,  3674,  3660,  3675,  3828,  3676,
    3679,   625,  3665,  3682,  3684,  2061,  3690,  3694,  3685,  3686,
    3698,   262,   722,   264,  3691,  3692,  3693,  2039,  3701,  2040,
    3704,  3706,  3708,  2063,  3709,  3710,  3712,  2041,  2043,  3717,
    3716,  1234,  1235,  1236,  1237,  1238,  1239,  1240,  1241,  3718,
    3862,  3730,  2042,  3740,  3629,  3747,  2044,  3731,  1356,  3757,
    3748,  3750,  3260,  3759,  3910,  3745,  3760,  3764,  1357,  3765,
    4248, -1422, -1427,  3807,  3774,  3832,  3810,  3788,   625,  3834,
    3789,  3793,  3835,  1358,   733,  3794,  3638,  3818,  3927,  3822,
    3833,  3836,  3104,  3824,  3838,  1359,  1360,  1361,  1226,   737,
     738,  3839,  3792,  3792,  3641,  3863,  3879,  3792,  3792,  2043,
    2048,  1362,  2049,  3880,  3864,  3883,  3885,  3886,  3889,  3700,
    2051,  3904,  3891,  1209,  1210,  1231,  1232,  2044,  3892,  1393,
    3893,  2045,  3905,  3948,  3923,  3911,  3954,  1235,  1236,  1237,
    1238,  1239,  1240,  1241,  3925,  3962,  4003,  3963,  4014,  4055,
    3969,  3941,  4025,  4022,  3968,  4023,  4027,  3630,  3960,  4038,
    3964,  4035,  4067,  4072,  4069,  4080,  4084,  4096,  -315,  2046,
    4114,  4117,  4132,  4450,  2047,  4522,  4116,  4128,  4151,  4010,
     615,  2048,  4163,  2049,  4166,  4167,  4175,  4172,  2057,  4177,
    2050,  2051,  4179,  3014,  4194,  4211,  4207,  4208,  4214,  3159,
    -333,  4240,  4241,  4242,  4258,  4261,  4264,  4266,  4290,  4522,
    4294,  4278,  4295,  4302,  4296,  4305,  4297,  4315,  4306,   615,
    4316,  4326,  2052,  4327,  4320,  3967,  1626,  1627,  1628,  1629,
    1630,  4329,   625,  4332,  4344,  4358,  2053,  2054,  2055,  2056,
    4359,  4360,  4450,  4361,  4369,  4370,  2058,  4376,  4381,   804,
    4383,  4385, -2336,  3792,  4386,  4389,  4011,  4398,  4395,  2057,
     821,   822,  2059,  4409,  4085,  4412,  2060,  4414,  1234,  1235,
    1236,  1237,  1238,  1239,  1240,  1241,  4415,  4417,  4422,  4428,
    4441,  4442,  4444,   757, -1593,  2061,  4100,  3796,  1229,  4447,
    3797,  4107,  4459,  4464,  4460,  4036,  4458,  4472,  4465,  4469,
    4475,   763,  4477,  2063,  4478,  4480,   765,  4484,  4493,   766,
    4486,  4489,  4550,  4490,  4501,  4534,  4497,  2058,  4503,  4510,
    4121,  4125,  4511,  1363,  1631,  1632,  1633,  1634,  4547,  4109,
    2780,  4538,  3070,  2059,  3860,  3664,  2922,  2060,  1080,  1455,
    1364,  3867,  4129,  4251,  4396,  1513,  4397,  3865,  3869,  1708,
    4009,   823,   931,  4545,  4505,  3910,  2061,   580,   976,  3244,
    2660,  2062,  3980,  2393,   932,  3798,  3799,  3981,  3983,  3984,
    3986,  3987,  3988,  4515,  2063,   873,   933,  4425,  4313,  3989,
     824,  3927,  4277,  3927,  3990,  4184,  4426,  3991,  4394,  4325,
    4319,  4324,  3994,   825,  3995,  3996,  2018,  1555,  4131,  2064,
     934,   916,   804,  4016,  2314,  4319,  2566,   804,   935,  2586,
    3225,  3326,  3516,   936,  2813,  4161,   826,  4215,  4265,   827,
    4330,  4037,  4474,  3753,  1824,  4408,  4449,   666,  4174,  1635,
     828,  1636,  1637,  1638,  2128,  1231,  1232,  -894,  3873,   937,
    1639,   938,   804,   939,  2584,  3417,  3590,  3101,  2591,  3802,
    3016,   829,   940,  3803,  4423,  4094,  3606,  3471,  3956,   804,
    3647,  3837,  4263,  3827,  2912,   522,  1365,  4190,   523,  4299,
    2668,  4256,  4300,    14,    15,  4260,  4259,   830,  2588,  3110,
    1211,  3959,  4079,  1212,   831,   625,  2888,  3579,  3004,  2462,
    1952,  4283,  2778,  3806,  1032,  1481,  2601,  2815, -1799,   941,
     804,   804,   804,   804,   942,  3578,  4328,   943,  2126,  2090,
    3216,  2375,   804,  2796,  3513,  2836,  2753,  1003,  1383,  4254,
    1640,  4001,  1366,  2407,   832,  4093,  3501,  2703,  3200,  2701,
    2905,  3551,  2899,   944,  4074,   945,  1664,  2752,  4367,  3931,
    1367,  3661,   946,  4368,   947,  1607,  3585,  2769,  3270,  4270,
    4271,  4319,  3928,  4496,  2999,  3920,  2672,  2843,  4125,  1808,
    2794,  4440,  1839,  2821,  4407,  3755,  3528,  3527,   948,   949,
     950,  4339,  1641,  1642,  3560,  1708,  4341,  1098,  1234,  1235,
    1236,  1237,  1238,  1239,  1240,  1241,   992,  2167,  2452,  1909,
    2453,   951,   971,   804,  2325,   625,   974,  2883,  1842,  3589,
    3515,  4445,  4416,   894,   822,  4362,  4473,  4546,  4549,  2862,
    3048,  3048,  3831,   952,  4471,  3531,  3545,   928,  2286,  1857,
    3546,   929,  2435,  2860,  2859,  2852,  2363,   897,  1370,  1849,
    1801,  4026,  4319,   660,  4319,  2150,  4034,  3204,  1375,   899,
     661,  4491,  4338,   953,     0,  1084,     0,  1085,     0,  1086,
       0,     0,  4319,     0,     0,   833,     0,  4351,  4352,   834,
       0,     0,     0,     0,     0,     0,     0,   625,     0,     0,
       0,     0,     0,     0,     0,   835,     0,     0,     0,     0,
       0,     0,     0,   836,  4319,  4319,     0,     0,     0,  4537,
       0,   837,     0,     0,   823,     0,  4430,     0,     0,     0,
       0,     0,     0,  4438,     0,     0,     0,     0,   954,     0,
       0,  1643,     0,     0,     0,     0,   838,     0,     0,     0,
       0,     0,     0,   824,  1213,  1644,  1645,     0,     0,   839,
     840,     0,     0,     0,   955,     0,   825,     0,     0,     0,
       0,  4539,     0,     0,     0,   956,   957,     0,     0,   958,
     959,     0,     0,     0,     0,     0,  4421,     0,     0,   826,
       0,     0,   827,     0,     0,     0,     0,     0,   804,     0,
     960,     0,     0,   828,  4482,   841,     0,     0,     0,  4487,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   829,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   842,     0,     0,     0,
       0,     0,     0,   961,     0,     0,  4523,     0,     0,     0,
     830,     0,     0,   804,   804,  1708,   962,   831,   843,     0,
     844,     0,   804,   804,   804,   804,   804,   804,   804,   804,
     804,   804,   804,   804,   625,     0,     0,     0,  1708,     0,
    4523,   804,   804, -2375,   804,  1708,   804,   963,     0,     0,
     804,  1708,     0,   804,   804,   804,   804,   832,   804,   804,
     804,     0,     0,     0,     0,   964,   965,   804,   804,     0,
     804,   804,   804,   804,   804,     0,     0,   804,   804,   804,
     804,   804,   804,   804,   804,   804,   804,   804,     0,     0,
     804,   804,     0,     0,   804,     0,     0,     0,   804,     0,
     804,   804,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   804,   804,   966,     0,     0,     0,     0,     0,
     804,     0,     0,     0,     0, -2375,     0,   804,   804,   804,
       0,   804,     0,   967,     0,     0,     0,     0,   804,   804,
     804,     0,   804,   804,   804,   804,   804,     0,   804,   804,
     804,   804,   804,   804,   804,   804,     1,     0,     2,   804,
     804,     0,     0,     0,     0,     0,     0,     0,     0,  1267,
       0,     0,     0,     0,     0,     3,     0,     0,     0,     4,
     822,     0,     0,     0,     0,     0,     0,     0,   833,     0,
       0,     0,   895,     5,     6,     0,     0,     0,     0,     0,
       0,     7,  1268,     0,     0,     0,     8,     9,   835,     0,
       0,     0,     0,     0,     0,     0,   836,     0,     0,     0,
       0,     0,     0,     0,   837,     0,     0,    10,     0,     0,
       0,     0,     0,     0,     0,     0,   804,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    11,     0,     0,   838,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   839,   840,     0,     0,     0,    12,     0,  1269,
     823,     0,     0,     0,     0,    13,    14,    15,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    16,    17,     0,
       0,     0,     0,  1270,     0,     0,   804,  1271,     0,   824,
      18,     0,     0,     0,     0,     0,   804,     0,   841,     0,
       0,     0,   825,     0,    19,     0,     0,     0,     0,     0,
       0,   804,     0,     0,     0,   804,     0,     0,     0,     0,
      20,  1272,     0,     0,     0,   826,     0,     0,   827,   842,
       0,     0,     0,     0,     0,     0,    21,     0,     0,   828,
    1273,    22,     0,     0,     0,    23,     0,     0,     0,     0,
       0,   843,     0,   844,  1274,     0,     0,     0,     0,     0,
     829,     0,     0,     0,     0,     0,     0,     0,     0,    24,
     804,    25,     0,     0,     0,     0,  2100,     0,     0,     0,
       0,     0,     0,  1106,     0,     0,   830,    26,     0,     0,
       0,     0,     0,   831,     0,     0,     0,     0,     0,     0,
       0,     0,  1275,     0,     0,    27,     0,     0,     0,    28,
       0,     0,     0,     0,     0,     0,     0,     0,  1143,     0,
       0,     0,     0,     0,  2077,     0,     0,  1276,     0,     0,
       0,     0,  1267,   832,     0,  1161,  2101,  2102,  2103,  2104,
    2105,  2106,  2107,     0,  2108,  2109,  2110,  2111,  2112,  2113,
    2114,  2115,  2116,     0,  2117,  2118,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1268,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1203,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   804,     0,     0,     0,     0,     0,     0,
       0,     0,    29,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    30,
       0,     0,     0,    31,     0,     0,     0,     0,     0,  1277,
       0,     0,  1269,     0,    32,     0,     0,     0,  1278,     0,
       0,     0,     0,     0,     0,    33,     0,     0,     0,     0,
       0,     0,     0,  1279,     0,     0,  1270,     0,     0,     0,
    1271,     0,     0,     0,   833,     0,     0,    34,     0,  1332,
      35,  1280,    36,     0,     0,    37,     0,     0,    38,    39,
       0,  2119,  2120,     0,   835,     0,    40,     0,    41,     0,
       0,     0,   836,     0,  1272,    42,     0,     0,     0,     0,
     837,    43,     0,     0,   804,   804,   804,     0,     0,    44,
    1281,     0,  1282,  1273,    45,     0,    46,     0,   804,    47,
       0,     0,     0,     0,     0,   838,     0,  1274,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1283,   839,   840,
       0,     0,     0,     0,   804,    48,     0,     0,     0,    49,
     804,     0,     0,   804,     0,   804,   501,     0,     0,  1284,
     502,   804,     0,   804,   804,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1275,     0,     0,     0,     0,
       0,     0,     0,     0,   841,     0,     0,     0,  1626,  1627,
    1628,  1629,  1630,     0,    50,     0,     0,     0,     0,     0,
    1276,     0,     0,     0,     0,     0,    51,     0,  1285,     0,
      52,     0,     0,    53,     0,   842,     0,     0,     0,    54,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   804,     0,   843,     0,   844,
       0,     0,     0,     0,  1536,     0,     0,     0,    55,     0,
       0,     0,     0,     0,    56,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    57,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   804,     0,     0,     0,  1631,  1632,  1633,  1634,
       0,   804,     0,     0,     0,     0,     0,     0,     0,  1580,
    1581,     0,  1277,     0,     0,     0,     0,     0,  1591,  1592,
       0,  1278,  1595,  1596,  1597,  1598,  1601,  1602,  1603,  1604,
       0,     0,     0,     0,     0,     0,  1279,  1620,  1621,     0,
    1622,     0,  1623,     0,     0,     0,     0,     0,     0,  1656,
    1657,  1658,  1659,     0,  1280,  1662,     0,     0,     0,     0,
       0,     0,     0,  1670,  1671,     0,  1674,  1675,     0,     0,
       0,     0,     0,  1679,  1680,  1681,     0,     0,  1684,  1685,
    1686,  1687,  1688,  1689,     0,     0,  1692,  1693,     0,     0,
    1696,     0,     0,  1281,  1699,  1282,  1703,  1704,     0,     0,
       0,  1635,     0,  1636,  1637,  1638,     0,     0,  1711,  1712,
       0,     0,  1639,     0,     0,     0,  1720,     0,     0,     0,
    1283,     0,     0,  1725,  1726,  1727,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1284,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3335,  3336,  1763,     0,     0,     0,
    3337,     0,  3338,     0,  3339,  3340,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2077,  3341,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1285,  1640,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   804,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1811,     0,     0,  3342,     0,     0,  3343,     0,
       0,     0,     0,     0,  1641,  1642,  3344,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3345,     0,     0,     0,     0,     0,     0,
       0,  2077,     0,     0,     0,     0,     0,     0,     0,     0,
    3346,     0,     0,     0,     0,   804,     0,     0,     0,   804,
       0,     0,  1856,     0,   804,   804,     0,     0,     0,     0,
       0,     0,  1862,   804,  3347,   804,  3348,   804,   804,   804,
     804,     0,     0,   804,     0,     0,     0,  1890,     0,  3349,
    3350,  1896,     0,   804,     0,   804,   804,     0,   804,   804,
     804,   804,     0,   804,     0,     0,   804,     0,     0,     0,
       0,     0,     0,     0,     0,   804,     0,     0,     0,     0,
       0,     0,   804,     0,   804,     0,   804,   804,   804,   804,
       0,  3351,     0,   804,   804,   804,     0,     0,     0,   804,
     804,   804,     0,   804,     0,   804,  1941,   804,     0,   804,
       0,   804,     0,  1643,     0,     0,   804,     0,     0,     0,
    3352,     0,     0,     0,     0,     0,     0,  1644,  1645,  3353,
    3354,   804,  3355,     0,     0,     0,     0,     0,   804,     0,
       0,   804,     0,     0,     0,     0,     0,   804,     0,     0,
     804,     0,     0,     0,   804,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3356,  3357,  3358,     0,     1,
       0,     2,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3359,  3360,  3361,     0,     0,     0,
       0,  3362,     4,     0,  3363,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     5,     6,     0,   804,
    3364,  3365,     0,     0,     7,     0,     0,     0,     0,     8,
       9,     0,     0,     0,     0,     0,     0,     0,     0,  2179,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      10,     0,     0,     0,     0,     0,  3366,  3367,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    11,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3368,     0,     0,     0,     0,     0,     0,     0,     0,
      12,   804,     0,     0,     0,     0,     0,     0,    13,    14,
      15,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      16,    17,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3369,     0,     0,     0,  3370,    19,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3371,
    2260,  2262,  2264,    20,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    21,
       0,     0,     0,     0,    22,     0,     0,     0,    23,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2295,     0,     0,     0,     0,     0,     0,     0,     0,  2300,
       0,  2301,    24,  3372,    25,     0,  3373,  3002,     0,  3374,
    3375,  3376,  3377,     0,  2020,     0,     0,     0,     0,     0,
      26,     0,     0,     0,     0,     0,     0,  2022,     0,  2023,
       0,     0,     0,     0,     0,     0,     0,     0,    27,  2077,
       0,     0,    28,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3378,  3379,     0,     0,     0,     0,  2024,
       0,     0,     0,     0,  2025,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3380,
       0,  2371,     0,  2028,     0,     0,     0,     0,     0,     0,
       0,  2029,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2030,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2031,     0,     0,     0,  2077,
       0,     0,     0,     0,     0,     0,     0,     0,  2434,  1501,
       0,     0,  2032,     0,   804,    29,     0,     0,   804,  2033,
       0,     0,     0,     0,     0,     0,  3003,     0,     0,     0,
       0,     0,    30,     0,  2036,     0,    31,     0,     0,     0,
    2037,     0,     0,     0,     0,   804,   804,    32,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    33,     0,
       0,     0,     0,     0,     0,   804,     0,     0,     0,  2038,
       0,     0,     0,     0,   804,     0,   804,     0,   804,     0,
      34,     0,     0,    35,     0,    36,     0,     0,    37,     0,
       0,    38,    39,     0,     0,   804,     0,     0,     0,    40,
     804,    41,   262,     0,   264,     0,     0,     0,    42,  2022,
    2040,  2023,     0,     0,    43,     0,     0,     0,  2041,     0,
       0,     0,    44,     0,     0,   804,     0,    45,     0,    46,
       0,     0,    47,  2042,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  -770,  -770,     0,  2025,     0,     0,     0,
       0,     0,     0,     0,     0,  -770,     0,     0,    48,     0,
       0,     0,    49,     0,     0,  2028,     0,     0,     0,     0,
       0,     0,     0,  2029,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2043,     0,     0,     0,     0,   804,     0,  2031,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    50,  2044,     0,
       0,  1501,  2045,     0,  2032,     0,     0,     0,     0,    51,
       0,     0,     0,    52,     0,     0,    53,     0,     0,  2605,
       0,     0,    54,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2037,     0,     0,   804,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2047,     0,     0,     0,     0,
       0,    55,  2048,     0,  2049,     0,     0,    56,     0,     0,
       0,     0,  2051,     0,     0,     0,     0,    57,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2681,     0,     0,   262,  2683,   264,     0,     0,     0,
    2685,  2686,  2040,     0,     0,     0,     0,     0,  2054,  1598,
    2041,  2702,     0,  1598,     0,  2705,  2706,     0,     0,     0,
       0,     0,     0,     0,     0,  2042,     0,     0,     0,  2713,
    2057,  2714,     0,     0,  2716,  2717,  2718,  2719,     0,  2720,
       0,     0,     0,     0,     0,     0,     0,  2022,     0,  2023,
       0,  2724,     0,     0,     0,   804,   804,     0,  2725,     0,
    2726,     0,  2727,  2728,  2729,     0,     0,     0,     0,  2732,
    2733,  2734,     0,     0,     0,  2736,  2737,  2738,     0,  2739,
       0,  2741,  2043,  2743,  2025,  2745,     0,  2746,  2058,     0,
       0,     0,  2747,     0,     0,     0,     0,     0,     0,     0,
    2044,     0,     0,  2028,  2059,     0,     0,  2757,  2060,     0,
       0,  2029,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2767,     0,     0,  2770,  2061,  2077,     0,
       0,     0,     0,     0,     0,  2031,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2063,   804,     0,     0,  1501,
       0,     0,  2032,     0,  2048,     0,  2049,     0,     0,     0,
       0,     0,     0,     0,  2051,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   804,   804,
    2037,   804,     0,     0,     0,     0,     0,     0,     0,     0,
     804,     0,     0,     0,     0,   804,     0,     0,   804,     0,
     804,   804,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   804,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2057,     0,     0,     0,   804,     0,     0,     0,
       0,     0,   262,     0,   264,     0,     0,     0,     0,     0,
    2040,     0,     0,     0,     0,     0,     0,  1890,  2041,   804,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2042,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2058,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2059,     0,     0,     0,
    2060,     0,   804,     0,     0,     0,     0,     0,     0,     0,
       0,   804,     0,     0,     0,     0,     0,     0,     0,  2061,
    2043,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2063,  2044,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2048,     0,  2049,     0,  3637,     0,     0,     0,
       0,     0,  2051,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2057,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3119,     0,     0,     0,  3121,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3148,  3149,     0,     0,     0,     0,     0,  2058,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   804,
       0,  3169,     0,     0,  2059,     0,     0,     0,  2060,     0,
    3179,     0,  3181,     0,  3183,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2061,     0,     0,
       0,     0,   804,     0,     0,     0,     0,     0,     0,     0,
     804,     0,     0,     0,     0,  2063,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3213,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3637,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1890,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2077,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3292,     0,     0,     0,     0,     0,     0,   804,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   804,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   804,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3392,  3393,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3998,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     804,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     804,     0,  3442,     0,     0,     0,   804,     0,   804,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3479,  3480,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3487,     0,     0,     0,
       0,  3489,     0,   804,  3490,     0,  3491,  3492,     0,  3998,
    3998,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3509,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  4141,  4141,  4141,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3509,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   804,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  4141,     0,     0,     0,     0,     0,  3509,     0,
       0,     0,     0,     0,     0,     0,     0,  3569,     0,     0,
     804,     0,   804,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   804,     0,  3998,  3998,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  4141,     0,     0,     0,     0,     0,     0,  4141,     0,
       0,     0,  4141,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  4141,     0,     0,     0,  4141,
    4141,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   804,     0,  3998,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3998,   804,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3998,     0,     0,     0,     0,     0,     0,
       0,     0,  4340,     0,     0,     0,   804,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   804,  3998,     0,     0,     0,
       0,     0,     0,     0,     0,  3509,     0,     0,  3998,  3998,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   804,     0,     0,     0,     0,     0,     0,  3773,     0,
       0,     0,     0,     0,     0,     0,  3292,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3998,     0,     0,     0,     0,     0,
       0,   804,     0,     0,  3998,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   804,     0,
       0,     0,     0,     0,     0,  3998,     0,  3998,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3998,     0,     0,
       0,   804,     0,     0,   804,     0,     0,     0,     0,     0,
       0,     0,     0,  3998,     0,  3998,     0,  3998,     0,     0,
       0,     0,     0,     0,  3998,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3998,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3998,  3998,     0,     0,     0,     0,   804,     0,     0,
       0,     0,     0,     0,  3884,     0,     0,  3998,  3998,     0,
       0,     0,  3998,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3509,     0,     0,     0,     0,
       0,     0,     0,     0,   804,     0,     0,     0,     0,  3292,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  4061,     0,     0,     0,
       0,     0,  4066,     0,  4068,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  4095,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3292,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  4209,     0,  4210,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  4218,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  4317,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  4322,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3509,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  4379,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  4432,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  4457,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   139,     0,   675,   141,
     142,   143,   144,     0,     0,   145,     0,     0,     0,   146,
    4476,     0,   676,     0,   148,   149,   150,   151,   152,   153,
     677,   155,     0,   156,     0,     0,   678,   157,   679,   680,
     681,   158,   682,     0,   159,   160,   161,  1700,   162,     0,
     163,   164,     0,     0,   165,   683,   684,   166,   167,     0,
     168,   685,   686,   170,   171,     0,   172,   173,   174,   175,
     176,   687,   178,  4524,   688,   180,   689,   690,   691,   692,
     693,     0,   186,   187,   188,   189,   190,   191,   192,   193,
       0,   194,   195,     0,   196,   197,   198,   694,   200,     0,
     201,   695,   696,   202,     0,     0,   203,   697,   698,     0,
     204,   699,   700,     0,   205,   206,   207,   701,   702,   703,
    3509,     0,     0,     0,   704,   210,   705,     0,     0,   706,
     211,     0,   212,     0,     0,     0,   213,     0,   214,   215,
     216,   217,     0,     0,     0,   218,     0,     0,   219,   220,
     221,     0,     0,     0,   222,     0,   223,   224,     0,   225,
     226,   227,     0,     0,   228,   229,     0,   230,   231,   232,
     233,   234,   235,   707,     0,   236,   237,   238,   708,   709,
     239,   240,     0,   241,   242,   243,   710,     0,   244,     0,
       0,     0,   245,     0,   246,     0,   247,     0,   248,   249,
     711,   251,   712,   253,     0,   254,     0,   713,     0,   255,
     256,   257,     0,   258,   714,     0,   259,   260,     0,     0,
       0,   715,   262,   263,   264,   716,     0,   265,   266,   267,
       0,   268,     0,   269,     0,     0,     0,   717,   270,   271,
     718,     0,     0,   272,     0,   273,   274,     0,   275,   276,
       0,     0,     0,   277,     0,     0,   278,   279,   719,     0,
    1701,   281,     0,   720,   282,   283,     0,     0,     0,     0,
       0,   721,   285,     0,   286,     0,   287,     0,   288,   289,
       0,     0,   722,     0,     0,     0,     0,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,     0,   306,   307,   308,   723,   309,   310,
     311,   312,   724,   313,   314,     0,     0,     0,     0,   315,
     316,   317,   318,   725,   320,     0,     0,   726,   322,   727,
     323,     0,   324,   728,   729,   730,   731,   732,   329,   330,
     331,   332,   333,     0,   733,   334,   335,     0,     0,   336,
     337,   338,   339,   734,   735,   736,   340,   341,     0,   737,
     738,     0,   342,   343,   739,     0,   345,   346,   347,   348,
       0,   349,   350,     0,     0,     0,     0,     0,     0,     0,
       0,   351,   352,   353,     0,   740,   354,     0,   355,   356,
     357,   358,   741,   360,   361,   362,   363,   742,   743,   366,
     744,     0,   367,   368,   369,     0,   370,     0,   371,   372,
     373,   374,   375,     0,   745,   377,   378,     0,     0,   379,
       0,     0,     0,   380,   381,   382,   383,   384,     0,     0,
     385,   386,   387,   388,   389,     0,   390,   391,     0,   392,
     393,   394,   746,   747,   395,     0,   396,     0,   397,   398,
       0,   399,   400,     0,     0,   748,   401,   402,   403,   404,
     405,   749,   407,   408,   409,   410,     0,   750,   412,     0,
       0,     0,   413,   414,   415,   416,     0,     0,     0,   417,
       0,     0,     0,   418,     0,   419,   420,   421,   422,   423,
       0,   424,   425,   426,   427,   428,   429,     0,     0,     0,
       0,     0,     0,   430,   431,     0,   432,     0,     0,   433,
       0,     0,   434,   435,   436,   751,   752,   437,   438,     0,
     439,   440,   753,   442,   443,   444,   754,   755,   445,   446,
     447,   448,   756,   449,   450,     0,   451,     0,   452,   453,
     454,   455,     0,   757,   456,   457,     0,   758,   759,   760,
     761,     0,     0,     0,     0,  1702,   462,   463,   464,     0,
     762,   763,   764,   466,   467,   468,   765,   469,   470,   766,
     471,   472,     0,   473,   474,     0,     0,   475,     0,     0,
     476,     0,   477,     0,   767,   479,   480,     0,     0,   768,
     769,   770,   771,   481,     0,     0,   482,   772,     0,   773,
     483,   484,   485,   486,   487,   774,     0,     0,     0,     0,
       0,     0,   489,   490,     0,   491,   492,   493,     0,     0,
     775,     0,     0,     0,     0,   776,   777,     0,     0,     0,
       0,   778,   779,     0,     0,   780,   781,     0,     0,   782,
     783,   139,     0,   675,   141,   142,   143,   144,  1886,     0,
     145,     0,     0,     0,   146,     0,     0,   676,     0,   148,
     149,   150,   151,   152,   153,   677,   155,     0,   156,     0,
       0,  1887,   157,   679,   680,   681,   158,   682,     0,   159,
     160,   161,     0,   162,     0,   163,   164,     0,     0,   165,
     683,   684,   166,   167,     0,   168,   685,   686,   170,   171,
       0,   172,   173,   174,   175,   176,   687,   178,     0,   688,
     180,   689,   690,   691,   692,   693,     0,   186,   187,   188,
     189,   190,   191,   192,   193,     0,   194,   195,     0,   196,
     197,   198,   694,   200,     0,   201,   695,   696,   202,     0,
       0,   203,   697,   698,     0,   204,   699,   700,     0,   205,
     206,   207,   701,   702,   703,     0,     0,     0,     0,   704,
     210,   705,     0,     0,  1888,   211,     0,   212,     0,     0,
       0,   213,     0,   214,   215,   216,   217,     0,     0,     0,
     218,     0,     0,   219,   220,   221,     0,     0,     0,   222,
       0,   223,   224,     0,   225,   226,   227,     0,     0,   228,
     229,     0,   230,   231,   232,   233,   234,   235,   707,     0,
     236,   237,   238,   708,   709,   239,   240,     0,   241,   242,
     243,   710,     0,   244,     0,     0,     0,   245,     0,   246,
       0,   247,     0,   248,   249,   711,   251,   712,   253,     0,
     254,     0,   713,     0,   255,   256,   257,     0,   258,   714,
       0,   259,   260,     0,     0,     0,   715,   262,   263,   264,
     716,     0,   265,   266,   267,     0,   268,     0,   269,     0,
       0,     0,   717,   270,   271,   718,     0,     0,   272,     0,
     273,   274,     0,   275,   276,     0,     0,     0,   277,     0,
       0,   278,   279,   719,     0,     0,   281,     0,   720,   282,
     283,     0,     0,     0,     0,     0,   721,   285,     0,   286,
       0,   287,     0,   288,   289,     0,     0,   722,     0,     0,
       0,     0,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,     0,   306,
     307,   308,   723,   309,   310,   311,   312,   724,   313,   314,
       0,     0,     0,     0,   315,   316,   317,   318,   725,   320,
       0,     0,   726,   322,   727,   323,     0,   324,   728,   729,
     730,   731,   732,   329,   330,   331,   332,   333,     0,   733,
     334,   335,     0,     0,   336,   337,   338,   339,   734,   735,
     736,   340,   341,     0,   737,   738,     0,   342,   343,   739,
    1889,   345,   346,   347,   348,     0,   349,   350,     0,     0,
       0,     0,     0,     0,     0,     0,   351,   352,   353,     0,
     740,   354,     0,   355,   356,   357,   358,   741,   360,   361,
     362,   363,   742,   743,   366,   744,     0,   367,   368,   369,
       0,   370,     0,   371,   372,   373,   374,   375,     0,   745,
     377,   378,     0,     0,   379,     0,     0,     0,   380,   381,
     382,   383,   384,     0,     0,   385,   386,   387,   388,   389,
       0,   390,   391,     0,   392,   393,   394,   746,   747,   395,
       0,   396,     0,   397,   398,     0,   399,   400,     0,     0,
     748,   401,   402,   403,   404,   405,   749,   407,   408,   409,
     410,     0,   750,   412,     0,     0,     0,   413,   414,   415,
     416,     0,     0,     0,   417,     0,     0,     0,   418,     0,
     419,   420,   421,   422,   423,     0,   424,   425,   426,   427,
     428,   429,     0,     0,     0,     0,     0,     0,   430,   431,
       0,   432,     0,     0,   433,     0,     0,   434,   435,   436,
     751,   752,   437,   438,     0,   439,   440,   753,   442,   443,
     444,   754,   755,   445,   446,   447,   448,   756,   449,   450,
       0,   451,     0,   452,   453,   454,   455,     0,   757,   456,
     457,     0,   758,   759,   760,   761,     0,     0,     0,     0,
       0,   462,   463,   464,     0,   762,   763,   764,   466,   467,
     468,   765,   469,   470,   766,   471,   472,     0,   473,   474,
       0,     0,   475,     0,     0,   476,     0,   477,     0,   767,
     479,   480,     0,     0,   768,   769,   770,   771,   481,     0,
       0,   482,   772,     0,   773,   483,   484,   485,   486,   487,
     774,     0,     0,     0,     0,     0,     0,   489,   490,     0,
     491,   492,   493,     0,     0,   775,     0,     0,     0,     0,
     776,   777,     0,     0,     0,     0,   778,   779,     0,     0,
     780,   781,     0,     0,   782,   783,   139,     0,   675,   141,
     142,   143,   144,     0,     0,   145,     0,     0,     0,   146,
       0,     0,   676,     0,   148,   149,   150,   151,   152,   153,
     677,   155,     0,   156,     0,     0,   678,   157,   679,   680,
     681,   158,   682,     0,   159,   160,   161,     0,   162,     0,
     163,   164,     0,     0,   165,   683,   684,   166,   167,     0,
     168,   685,   686,   170,   171,     0,   172,   173,   174,   175,
     176,   687,   178,     0,   688,   180,   689,   690,   691,   692,
     693,     0,   186,   187,   188,   189,   190,   191,   192,   193,
       0,   194,   195,     0,   196,   197,   198,   694,   200,     0,
     201,   695,   696,   202,     0,     0,   203,   697,   698,     0,
     204,   699,   700,     0,   205,   206,   207,   701,   702,   703,
       0,     0,     0,     0,   704,   210,   705,     0,     0,   706,
     211,     0,   212,     0,     0,     0,   213,     0,   214,   215,
     216,   217,     0,     0,     0,   218,     0,     0,   219,   220,
     221,     0,     0,     0,   222,     0,   223,   224,     0,   225,
     226,   227,     0,     0,   228,   229,     0,   230,   231,   232,
     233,   234,   235,   707,     0,   236,   237,   238,   708,   709,
     239,   240,     0,   241,   242,   243,   710,     0,   244,     0,
       0,     0,   245,  2259,   246,     0,   247,     0,   248,   249,
     711,   251,   712,   253,     0,   254,     0,   713,     0,   255,
     256,   257,     0,   258,   714,     0,   259,   260,     0,     0,
       0,   715,   262,   263,   264,   716,     0,   265,   266,   267,
       0,   268,     0,   269,     0,     0,     0,   717,   270,   271,
     718,     0,     0,   272,     0,   273,   274,     0,   275,   276,
       0,     0,     0,   277,     0,     0,   278,   279,   719,     0,
       0,   281,     0,   720,   282,   283,     0,     0,     0,     0,
       0,   721,   285,     0,   286,     0,   287,     0,   288,   289,
       0,     0,   722,     0,     0,     0,     0,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,     0,   306,   307,   308,   723,   309,   310,
     311,   312,   724,   313,   314,     0,     0,     0,     0,   315,
     316,   317,   318,   725,   320,     0,     0,   726,   322,   727,
     323,     0,   324,   728,   729,   730,   731,   732,   329,   330,
     331,   332,   333,     0,   733,   334,   335,     0,     0,   336,
     337,   338,   339,   734,   735,   736,   340,   341,     0,   737,
     738,     0,   342,   343,   739,     0,   345,   346,   347,   348,
       0,   349,   350,     0,     0,     0,     0,     0,     0,     0,
       0,   351,   352,   353,     0,   740,   354,     0,   355,   356,
     357,   358,   741,   360,   361,   362,   363,   742,   743,   366,
     744,     0,   367,   368,   369,     0,   370,     0,   371,   372,
     373,   374,   375,     0,   745,   377,   378,     0,     0,   379,
       0,     0,     0,   380,   381,   382,   383,   384,     0,     0,
     385,   386,   387,   388,   389,     0,   390,   391,     0,   392,
     393,   394,   746,   747,   395,     0,   396,     0,   397,   398,
       0,   399,   400,     0,     0,   748,   401,   402,   403,   404,
     405,   749,   407,   408,   409,   410,     0,   750,   412,     0,
       0,     0,   413,   414,   415,   416,     0,     0,     0,   417,
       0,     0,     0,   418,     0,   419,   420,   421,   422,   423,
       0,   424,   425,   426,   427,   428,   429,     0,     0,     0,
       0,     0,     0,   430,   431,     0,   432,     0,     0,   433,
       0,     0,   434,   435,   436,   751,   752,   437,   438,     0,
     439,   440,   753,   442,   443,   444,   754,   755,   445,   446,
     447,   448,   756,   449,   450,     0,   451,     0,   452,   453,
     454,   455,     0,   757,   456,   457,     0,   758,   759,   760,
     761,     0,     0,     0,     0,     0,   462,   463,   464,     0,
     762,   763,   764,   466,   467,   468,   765,   469,   470,   766,
     471,   472,     0,   473,   474,     0,     0,   475,     0,     0,
     476,     0,   477,     0,   767,   479,   480,     0,     0,   768,
     769,   770,   771,   481,     0,     0,   482,   772,     0,   773,
     483,   484,   485,   486,   487,   774,     0,     0,     0,     0,
       0,     0,   489,   490,     0,   491,   492,   493,     0,     0,
     775,     0,     0,     0,     0,   776,   777,     0,     0,     0,
       0,   778,   779,     0,     0,   780,   781,     0,     0,   782,
     783,   139,     0,   675,   141,   142,   143,   144,     0,     0,
     145,     0,     0,     0,   146,     0,     0,   676,     0,   148,
     149,   150,   151,   152,   153,   677,   155,     0,   156,     0,
       0,   678,   157,   679,   680,   681,   158,   682,     0,   159,
     160,   161,     0,   162,     0,   163,   164,     0,     0,   165,
     683,   684,   166,   167,     0,   168,   685,   686,   170,   171,
       0,   172,   173,   174,   175,   176,   687,   178,     0,   688,
     180,   689,   690,   691,   692,   693,     0,   186,   187,   188,
     189,   190,   191,   192,   193,     0,   194,   195,     0,   196,
     197,   198,   694,   200,     0,   201,   695,   696,   202,     0,
       0,   203,   697,   698,     0,   204,   699,   700,     0,   205,
     206,   207,   701,   702,   703,     0,     0,     0,     0,   704,
     210,   705,     0,     0,   706,   211,     0,   212,     0,     0,
       0,   213,     0,   214,   215,   216,   217,     0,     0,     0,
     218,     0,     0,   219,   220,   221,     0,     0,     0,   222,
       0,   223,   224,     0,   225,   226,   227,     0,     0,   228,
     229,     0,   230,   231,   232,   233,   234,   235,   707,     0,
     236,   237,   238,   708,   709,   239,   240,     0,   241,   242,
     243,   710,     0,   244,     0,     0,     0,   245,  2261,   246,
       0,   247,     0,   248,   249,   711,   251,   712,   253,     0,
     254,     0,   713,     0,   255,   256,   257,     0,   258,   714,
       0,   259,   260,     0,     0,     0,   715,   262,   263,   264,
     716,     0,   265,   266,   267,     0,   268,     0,   269,     0,
       0,     0,   717,   270,   271,   718,     0,     0,   272,     0,
     273,   274,     0,   275,   276,     0,     0,     0,   277,     0,
       0,   278,   279,   719,     0,     0,   281,     0,   720,   282,
     283,     0,     0,     0,     0,     0,   721,   285,     0,   286,
       0,   287,     0,   288,   289,     0,     0,   722,     0,     0,
       0,     0,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,     0,   306,
     307,   308,   723,   309,   310,   311,   312,   724,   313,   314,
       0,     0,     0,     0,   315,   316,   317,   318,   725,   320,
       0,     0,   726,   322,   727,   323,     0,   324,   728,   729,
     730,   731,   732,   329,   330,   331,   332,   333,     0,   733,
     334,   335,     0,     0,   336,   337,   338,   339,   734,   735,
     736,   340,   341,     0,   737,   738,     0,   342,   343,   739,
       0,   345,   346,   347,   348,     0,   349,   350,     0,     0,
       0,     0,     0,     0,     0,     0,   351,   352,   353,     0,
     740,   354,     0,   355,   356,   357,   358,   741,   360,   361,
     362,   363,   742,   743,   366,   744,     0,   367,   368,   369,
       0,   370,     0,   371,   372,   373,   374,   375,     0,   745,
     377,   378,     0,     0,   379,     0,     0,     0,   380,   381,
     382,   383,   384,     0,     0,   385,   386,   387,   388,   389,
       0,   390,   391,     0,   392,   393,   394,   746,   747,   395,
       0,   396,     0,   397,   398,     0,   399,   400,     0,     0,
     748,   401,   402,   403,   404,   405,   749,   407,   408,   409,
     410,     0,   750,   412,     0,     0,     0,   413,   414,   415,
     416,     0,     0,     0,   417,     0,     0,     0,   418,     0,
     419,   420,   421,   422,   423,     0,   424,   425,   426,   427,
     428,   429,     0,     0,     0,     0,     0,     0,   430,   431,
       0,   432,     0,     0,   433,     0,     0,   434,   435,   436,
     751,   752,   437,   438,     0,   439,   440,   753,   442,   443,
     444,   754,   755,   445,   446,   447,   448,   756,   449,   450,
       0,   451,     0,   452,   453,   454,   455,     0,   757,   456,
     457,     0,   758,   759,   760,   761,     0,     0,     0,     0,
       0,   462,   463,   464,     0,   762,   763,   764,   466,   467,
     468,   765,   469,   470,   766,   471,   472,     0,   473,   474,
       0,     0,   475,     0,     0,   476,     0,   477,     0,   767,
     479,   480,     0,     0,   768,   769,   770,   771,   481,     0,
       0,   482,   772,     0,   773,   483,   484,   485,   486,   487,
     774,     0,     0,     0,     0,     0,     0,   489,   490,     0,
     491,   492,   493,     0,     0,   775,     0,     0,     0,     0,
     776,   777,     0,     0,     0,     0,   778,   779,     0,     0,
     780,   781,     0,     0,   782,   783,   139,     0,   675,   141,
     142,   143,   144,     0,     0,   145,     0,     0,     0,   146,
       0,     0,   676,     0,   148,   149,   150,   151,   152,   153,
     677,   155,     0,   156,     0,     0,   678,   157,   679,   680,
     681,   158,   682,     0,   159,   160,   161,     0,   162,     0,
     163,   164,     0,     0,   165,   683,   684,   166,   167,     0,
     168,   685,   686,   170,   171,     0,   172,   173,   174,   175,
     176,   687,   178,     0,   688,   180,   689,   690,   691,   692,
     693,     0,   186,   187,   188,   189,   190,   191,   192,   193,
       0,   194,   195,     0,   196,   197,   198,   694,   200,     0,
     201,   695,   696,   202,     0,     0,   203,   697,   698,     0,
     204,   699,   700,     0,   205,   206,   207,   701,   702,   703,
       0,     0,     0,     0,   704,   210,   705,     0,     0,   706,
     211,     0,   212,     0,     0,     0,   213,     0,   214,   215,
     216,   217,     0,     0,     0,   218,     0,     0,   219,   220,
     221,     0,     0,     0,   222,     0,   223,   224,     0,   225,
     226,   227,     0,     0,   228,   229,     0,   230,   231,   232,
     233,   234,   235,   707,     0,   236,   237,   238,   708,   709,
     239,   240,     0,   241,   242,   243,   710,     0,   244,     0,
       0,     0,   245,  2263,   246,     0,   247,     0,   248,   249,
     711,   251,   712,   253,     0,   254,     0,   713,     0,   255,
     256,   257,     0,   258,   714,     0,   259,   260,     0,     0,
       0,   715,   262,   263,   264,   716,     0,   265,   266,   267,
       0,   268,     0,   269,     0,     0,     0,   717,   270,   271,
     718,     0,     0,   272,     0,   273,   274,     0,   275,   276,
       0,     0,     0,   277,     0,     0,   278,   279,   719,     0,
       0,   281,     0,   720,   282,   283,     0,     0,     0,     0,
       0,   721,   285,     0,   286,     0,   287,     0,   288,   289,
       0,     0,   722,     0,     0,     0,     0,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,     0,   306,   307,   308,   723,   309,   310,
     311,   312,   724,   313,   314,     0,     0,     0,     0,   315,
     316,   317,   318,   725,   320,     0,     0,   726,   322,   727,
     323,     0,   324,   728,   729,   730,   731,   732,   329,   330,
     331,   332,   333,     0,   733,   334,   335,     0,     0,   336,
     337,   338,   339,   734,   735,   736,   340,   341,     0,   737,
     738,     0,   342,   343,   739,     0,   345,   346,   347,   348,
       0,   349,   350,     0,     0,     0,     0,     0,     0,     0,
       0,   351,   352,   353,     0,   740,   354,     0,   355,   356,
     357,   358,   741,   360,   361,   362,   363,   742,   743,   366,
     744,     0,   367,   368,   369,     0,   370,     0,   371,   372,
     373,   374,   375,     0,   745,   377,   378,     0,     0,   379,
       0,     0,     0,   380,   381,   382,   383,   384,     0,     0,
     385,   386,   387,   388,   389,     0,   390,   391,     0,   392,
     393,   394,   746,   747,   395,     0,   396,     0,   397,   398,
       0,   399,   400,     0,     0,   748,   401,   402,   403,   404,
     405,   749,   407,   408,   409,   410,     0,   750,   412,     0,
       0,     0,   413,   414,   415,   416,     0,     0,     0,   417,
       0,     0,     0,   418,     0,   419,   420,   421,   422,   423,
       0,   424,   425,   426,   427,   428,   429,     0,     0,     0,
       0,     0,     0,   430,   431,     0,   432,     0,     0,   433,
       0,     0,   434,   435,   436,   751,   752,   437,   438,     0,
     439,   440,   753,   442,   443,   444,   754,   755,   445,   446,
     447,   448,   756,   449,   450,     0,   451,     0,   452,   453,
     454,   455,     0,   757,   456,   457,     0,   758,   759,   760,
     761,     0,     0,     0,     0,     0,   462,   463,   464,     0,
     762,   763,   764,   466,   467,   468,   765,   469,   470,   766,
     471,   472,     0,   473,   474,     0,     0,   475,     0,     0,
     476,     0,   477,     0,   767,   479,   480,     0,     0,   768,
     769,   770,   771,   481,     0,     0,   482,   772,     0,   773,
     483,   484,   485,   486,   487,   774,     0,     0,     0,     0,
       0,     0,   489,   490,     0,   491,   492,   493,     0,     0,
     775,     0,     0,     0,     0,   776,   777,     0,     0,     0,
       0,   778,   779,     0,     0,   780,   781,     0,     0,   782,
     783,   139,     0,   675,   141,   142,   143,   144,     0,     0,
     145,     0,     0,     0,   146,     0,     0,   676,     0,   148,
     149,   150,   151,   152,   153,   677,   155,     0,   156,     0,
       0,   678,   157,   679,   680,   681,   158,   682,     0,   159,
     160,   161,     0,   162,     0,   163,   164,     0,     0,   165,
     683,   684,   166,   167,     0,   168,   685,   686,   170,   171,
       0,   172,   173,   174,   175,   176,   687,   178,     0,   688,
     180,   689,   690,   691,   692,   693,     0,   186,   187,   188,
     189,   190,   191,   192,   193,     0,   194,   195,     0,   196,
     197,   198,   694,   200,     0,   201,   695,   696,   202,     0,
       0,   203,   697,   698,     0,   204,   699,   700,     0,   205,
     206,   207,   701,   702,   703,     0,     0,     0,     0,   704,
     210,   705,     0,     0,   706,   211,     0,   212,     0,     0,
       0,   213,     0,   214,   215,   216,   217,     0,     0,     0,
     218,     0,     0,   219,   220,   221,     0,     0,     0,   222,
       0,   223,   224,     0,   225,   226,   227,     0,     0,   228,
     229,     0,   230,   231,   232,   233,   234,   235,   707,     0,
     236,   237,   238,   708,   709,   239,   240,     0,   241,   242,
     243,   710,     0,   244,     0,     0,     0,   245,     0,   246,
       0,   247,     0,   248,   249,   711,   251,   712,   253,     0,
     254,     0,   713,     0,   255,   256,   257,     0,   258,   714,
       0,   259,   260,     0,     0,     0,   715,   262,   263,   264,
     716,     0,   265,   266,   267,     0,   268,     0,   269,     0,
       0,     0,   717,   270,   271,   718,     0,     0,   272,     0,
     273,   274,     0,   275,   276,     0,     0,     0,   277,     0,
       0,   278,   279,   719,     0,     0,   281,     0,   720,   282,
     283,     0,     0,     0,     0,     0,   721,   285,     0,   286,
       0,   287,     0,   288,   289,     0,     0,   722,     0,     0,
       0,     0,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,     0,   306,
     307,   308,   723,   309,   310,   311,   312,   724,   313,   314,
       0,     0,     0,     0,   315,   316,   317,   318,   725,   320,
       0,     0,   726,   322,   727,   323,     0,   324,   728,   729,
     730,   731,   732,   329,   330,   331,   332,   333,     0,   733,
     334,   335,     0,     0,   336,   337,   338,   339,   734,   735,
     736,   340,   341,     0,   737,   738,     0,   342,   343,   739,
       0,   345,   346,   347,   348,     0,   349,   350,     0,     0,
       0,     0,     0,     0,     0,     0,   351,   352,   353,     0,
     740,   354,     0,   355,   356,   357,   358,   741,   360,   361,
     362,   363,   742,   743,   366,   744,     0,   367,   368,   369,
       0,   370,     0,   371,   372,   373,   374,   375,     0,   745,
     377,   378,     0,     0,   379,     0,     0,     0,   380,   381,
     382,   383,   384,     0,     0,   385,   386,   387,   388,   389,
       0,   390,   391,     0,   392,   393,   394,   746,   747,   395,
       0,   396,     0,   397,   398,     0,   399,   400,     0,     0,
     748,   401,   402,   403,   404,   405,   749,   407,   408,   409,
     410,     0,   750,   412,     0,     0,     0,   413,   414,   415,
     416,     0,     0,     0,   417,     0,     0,     0,   418,     0,
     419,   420,   421,   422,   423,     0,   424,   425,   426,   427,
     428,   429,     0,     0,     0,     0,     0,     0,   430,   431,
       0,   432,     0,     0,   433,     0,     0,   434,   435,   436,
     751,   752,   437,   438,     0,   439,   440,   753,   442,   443,
     444,   754,   755,   445,   446,   447,   448,   756,   449,   450,
       0,   451,     0,   452,   453,   454,   455,     0,   757,   456,
     457,     0,   758,   759,   760,   761,     0,     0,     0,     0,
       0,   462,   463,   464,     0,   762,   763,   764,   466,   467,
     468,   765,   469,   470,   766,   471,   472,     0,   473,   474,
       0,     0,   475,     0,     0,   476,     0,   477,     0,   767,
     479,   480,     0,     0,   768,   769,   770,   771,   481,     0,
       0,   482,   772,     0,   773,   483,   484,   485,   486,   487,
     774,     0,     0,     0,     0,     0,     0,   489,   490,     0,
     491,   492,   493,     0,     0,   775,     0,     0,     0,     0,
     776,   777,     0,     0,     0,     0,   778,   779,     0,     0,
     780,   781,     0,     0,   782,   783,   139,     0,   675,   141,
     142,   143,   144,     0,     0,   145,     0,     0,     0,   146,
       0,     0,   676,     0,   148,   149,   150,   151,   152,   153,
     677,   155,     0,   156,     0,     0,   678,   157,   679,   680,
     681,   158,   682,     0,   159,   160,   161,     0,   162,     0,
     163,   164,     0,     0,   165,   683,   684,   166,   167,     0,
     168,   685,   686,   170,   171,     0,   172,   173,   174,   175,
     176,   687,   178,     0,   688,   180,   689,   690,   691,   692,
     693,     0,   186,   187,   188,   189,   190,   191,   192,   193,
       0,   194,   195,     0,   196,   197,   198,   694,   200,     0,
     201,   695,   696,   202,     0,     0,   203,   697,   698,     0,
     204,   699,   700,     0,   205,   206,   207,   701,   702,   703,
       0,     0,     0,     0,   704,   210,   705,     0,     0,   706,
     211,     0,   212,     0,     0,     0,   213,     0,   214,   215,
     216,   217,     0,     0,     0,   218,     0,     0,   219,   220,
     221,     0,     0,     0,   222,     0,   223,   224,     0,   225,
     226,   227,     0,     0,   228,   229,     0,   230,   231,   232,
     233,   234,   235,   707,     0,   236,   237,   238,   708,   709,
     239,   240,     0,   241,   242,   243,   710,     0,   244,     0,
       0,     0,   245,     0,   246,     0,   247,     0,   248,   249,
     711,   251,   712,   253,     0,   254,     0,   713,     0,   255,
     256,   257,     0,   258,   714,     0,   259,   260,     0,     0,
       0,   715,   262,   263,   264,   716,     0,   265,   266,   267,
       0,   268,     0,   269,     0,     0,     0,   717,   270,   271,
     718,     0,     0,   272,     0,   273,   274,     0,   275,   276,
       0,     0,     0,   277,     0,     0,   278,   279,   719,     0,
       0,   281,     0,   720,   282,   283,     0,     0,     0,     0,
       0,   721,   285,     0,   286,     0,   287,     0,   288,   289,
       0,     0,   722,     0,     0,     0,     0,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,     0,   306,   307,   308,   723,   309,   310,
     311,   312,   724,   313,   314,     0,     0,     0,     0,   315,
     316,   317,   318,   725,   320,     0,     0,   726,   322,   727,
     323,     0,   324,   728,   729,   730,   731,   732,   329,   330,
     331,   332,   333,     0,   733,   334,   335,     0,     0,   336,
     337,   338,   339,   734,   735,   736,   340,   341,     0,   737,
     738,     0,   342,   343,   739,     0,   345,   346,   347,   348,
       0,   349,   350,     0,     0,     0,     0,     0,     0,     0,
       0,   351,   352,   353,     0,   740,   354,     0,   355,   356,
     357,   358,   741,   360,   361,   362,   363,   742,   743,   366,
     744,     0,   367,   368,   369,     0,   370,     0,   371,   372,
     373,   374,   375,     0,   745,   377,   378,     0,     0,   379,
       0,     0,     0,   380,   381,   382,   383,   384,     0,     0,
     385,   386,   387,   388,   389,     0,   390,   391,     0,   392,
     393,   394,   746,   747,   395,     0,   396,     0,   397,   398,
       0,   399,   400,     0,     0,   748,   401,   402,   403,   404,
     405,   749,   407,   408,   409,   410,     0,   750,   412,     0,
       0,     0,   413,   414,   415,   416,     0,     0,     0,   417,
       0,     0,     0,   418,     0,   419,   420,   421,   422,   423,
       0,   424,   425,   426,   427,   428,   429,     0,     0,     0,
       0,     0,     0,   430,   431,     0,   432,     0,     0,   433,
       0,     0,   434,   435,   436,   751,   752,   437,   438,     0,
     439,   440,   753,   442,   443,   444,   754,   755,   445,   446,
     447,   448,   756,   449,   450,     0,   451,     0,   452,   453,
     454,   455,     0,   757,   456,   457,     0,   758,   759,   760,
     761,     0,     0,     0,     0,     0,   462,   463,   464,     0,
     762,   763,   764,   466,   467,   468,   765,   469,   470,   766,
     471,   472,     0,   473,   474,     0,     0,   475,     0,     0,
     476,     0,   477,     0,   767,   479,   480,     0,     0,   768,
     769,   770,   771,   481,     0,     0,   482,   772,     0,   773,
     483,   484,   485,   486,   487,   774,     0,     0,     0,     0,
       0,     0,   489,   490,     0,   491,   492,   493,     0,     0,
     775,     0,     0,     0,     0,   776,   777,     0,     0,     0,
       0,   778,  1142,     0,     0,   780,   781,     0,     0,   782,
     783,   139,     0,   675,   141,   142,   143,   144,  1734,     0,
     145,     0,     0,     0,  1735,     0,     0,   676,     0,   148,
     149,   150,   151,   152,   153,   677,   155,     0,   156,     0,
       0,   678,   157,   679,   680,   681,   158,   682,     0,   159,
     160,   161,     0,   162,     0,   163,   164,     0,     0,   165,
     683,   684,   166,   167,     0,   168,   685,   686,   170,   171,
       0,   172,   173,   174,   175,   176,   687,   178,     0,   688,
     180,   689,   690,   691,   692,   693,     0,   186,   187,   188,
     189,   190,   191,   192,   193,     0,   194,   195,     0,   196,
     197,   198,   694,   200,     0,   201,   695,   696,   202,     0,
       0,   203,   697,   698,     0,   204,   699,   700,     0,   205,
     206,   207,   701,   702,   703,     0,     0,     0,     0,   704,
     210,   705,     0,     0,   706,   211,     0,   212,     0,     0,
       0,   213,     0,   214,   215,   216,   217,     0,     0,     0,
     218,     0,     0,   219,   220,   221,     0,     0,     0,   222,
       0,   223,   224,     0,   225,   226,   227,     0,     0,   228,
     229,     0,   230,   231,   232,   233,   234,   235,   707,     0,
     236,   237,   238,   708,   709,   239,   240,     0,   241,   242,
     243,   710,     0,   244,     0,     0,     0,   245,     0,   246,
       0,   247,     0,   248,   249,   711,   251,   712,   253,     0,
     254,     0,   713,     0,   255,   256,   257,     0,   258,   714,
       0,   259,   260,     0,     0,     0,   715,   262,   263,   264,
     716,     0,   265,   266,   267,     0,   268,     0,   269,     0,
       0,     0,   717,   270,   271,   718,     0,     0,   272,     0,
     273,   274,     0,   275,   276,     0,     0,     0,   277,     0,
       0,   278,   279,   719,     0,     0,   281,     0,   720,   282,
     283,     0,     0,     0,     0,     0,   721,   285,     0,   286,
       0,   287,     0,   288,   289,     0,     0,   722,     0,     0,
       0,     0,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,     0,   306,
     307,   308,   723,   309,   310,   311,   312,   724,   313,   314,
       0,     0,     0,     0,   315,   316,   317,   318,   725,   320,
       0,     0,   726,   322,   727,   323,     0,   324,   728,   729,
     730,   731,   732,   329,   330,   331,   332,   333,     0,   733,
     334,   335,     0,     0,   336,   337,   338,   339,   734,     0,
     736,   340,   341,     0,   737,   738,     0,   342,   343,   739,
       0,   345,   346,   347,   348,     0,   349,   350,     0,     0,
       0,     0,     0,     0,     0,     0,   351,   352,   353,     0,
     740,   354,     0,   355,   356,   357,   358,   741,   360,   361,
     362,   363,   742,   743,   366,   744,     0,   367,   368,   369,
       0,   370,     0,   371,   372,   373,   374,   375,     0,   745,
     377,   378,     0,     0,   379,     0,     0,     0,   380,   381,
     382,   383,   384,     0,     0,   385,   386,   387,   388,   389,
       0,   390,   391,     0,   392,   393,   394,   746,   747,   395,
       0,   396,     0,   397,   398,     0,   399,   400,     0,     0,
     748,   401,   402,   403,   404,   405,   749,   407,   408,   409,
     410,     0,   750,   412,     0,     0,     0,   413,   414,   415,
     416,     0,     0,     0,   417,     0,     0,     0,   418,     0,
     419,   420,   421,   422,   423,     0,   424,   425,   426,   427,
     428,   429,     0,     0,     0,     0,     0,     0,   430,   431,
       0,   432,     0,     0,   433,     0,     0,   434,   435,   436,
     751,   752,   437,   438,     0,   439,   440,   753,   442,   443,
     444,   754,   755,   445,   446,   447,   448,   756,   449,   450,
       0,   451,     0,   452,   453,   454,   455,     0,   757,   456,
     457,     0,   758,   759,   760,   761,     0,     0,     0,     0,
       0,   462,   463,   464,     0,   762,   763,   764,   466,   467,
     468,   765,   469,   470,   766,   471,   472,     0,   473,   474,
       0,     0,   475,     0,     0,   476,     0,   477,     0,   767,
     479,   480,     0,     0,   768,   769,   770,   771,   481,     0,
       0,   482,   772,     0,   773,   483,   484,   485,   486,   487,
     774,     0,     0,     0,     0,     0,     0,   489,   490,     0,
     491,   492,   493,     0,     0,   775,     0,     0,     0,     0,
     776,   777,     0,     0,     0,     0,   778,   779,     0,     0,
     780,   781,     0,     0,   782,   783,   139,     0,   675,   141,
     142,   143,   144,     0,     0,   145,     0,     0,     0,   146,
       0,     0,   676,     0,   148,   149,   150,   151,   152,   153,
     677,   155,     0,   156,     0,     0,   678,   157,   679,   680,
     681,   158,   682,     0,   159,   160,   161,     0,   162,     0,
     163,   164,     0,     0,   165,   683,   684,   166,   167,     0,
     168,   685,   686,   170,   171,     0,   172,   173,   174,   175,
     176,   687,   178,     0,   688,   180,   689,   690,   691,   692,
     693,     0,   186,   187,   188,   189,   190,   191,   192,   193,
       0,   194,   195,     0,   196,   197,   198,   694,   200,     0,
     201,   695,   696,   202,     0,     0,   203,   697,   698,     0,
     204,   699,   700,     0,   205,   206,   207,   701,   702,   703,
       0,     0,     0,     0,   704,   210,   705,     0,     0,   706,
     211,     0,   212,     0,     0,     0,   213,     0,   214,   215,
     216,   217,     0,     0,     0,   218,     0,     0,   219,   220,
     221,     0,     0,     0,   222,     0,   223,   224,     0,   225,
     226,   227,     0,     0,   228,   229,     0,   230,   231,   232,
     233,   234,   235,   707,     0,   236,   237,   238,   708,   709,
     239,   240,     0,   241,   242,   243,   710,     0,   244,     0,
       0,     0,   245,     0,   246,     0,   247,     0,   248,   249,
     711,   251,   712,   253,     0,   254,     0,   713,     0,   255,
     256,   257,     0,   258,   714,     0,   259,   260,     0,     0,
       0,   715,   262,   263,   264,   716,     0,   265,   266,   267,
       0,   268,     0,   269,     0,     0,     0,   717,   270,   271,
     718,     0,     0,   272,     0,   273,   274,     0,   275,   276,
       0,     0,     0,   277,     0,     0,   278,   279,   719,     0,
       0,   281,     0,   720,   282,   283,     0,     0,     0,     0,
       0,   721,   285,     0,   286,     0,   287,     0,   288,   289,
       0,     0,   722,     0,     0,     0,     0,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,     0,   306,   307,   308,   723,   309,   310,
     311,   312,   724,   313,   314,     0,     0,     0,     0,   315,
     316,   317,   318,   725,   320,     0,     0,   726,   322,   727,
     323,     0,   324,   728,   729,   730,   731,   732,   329,   330,
     331,   332,   333,     0,   733,   334,   335,     0,     0,   336,
     337,   338,   339,   734,   735,   736,   340,   341,     0,   737,
     738,     0,   342,   343,   739,     0,   345,   346,   347,   348,
       0,   349,   350,     0,     0,     0,     0,     0,     0,     0,
       0,   351,   352,   353,     0,   740,   354,     0,   355,   356,
     357,   358,   741,   360,   361,   362,   363,   742,   743,   366,
     744,     0,   367,   368,   369,     0,   370,     0,   371,   372,
     373,   374,   375,     0,   745,   377,   378,     0,     0,   379,
       0,     0,     0,   380,   381,   382,   383,   384,     0,     0,
     385,   386,   387,   388,   389,     0,   390,   391,     0,   392,
     393,   394,   746,   747,   395,     0,   396,     0,   397,   398,
       0,   399,   400,     0,     0,   748,   401,   402,   403,   404,
     405,   749,   407,   408,   409,   410,     0,   750,   412,     0,
       0,     0,   413,   414,   415,   416,     0,     0,     0,   417,
       0,     0,     0,   418,     0,   419,   420,   421,   422,   423,
       0,   424,   425,   426,   427,   428,   429,     0,     0,     0,
       0,     0,     0,   430,   431,     0,   432,     0,     0,   433,
       0,     0,   434,   435,   436,   751,   752,   437,   438,     0,
     439,   440,   753,   442,   443,   444,   754,   755,   445,   446,
     447,   448,   756,   449,   450,     0,   451,     0,   452,   453,
     454,   455,     0,   757,   456,   457,     0,   758,   759,   760,
     761,     0,     0,     0,     0,     0,   462,   463,   464,     0,
     762,   763,   764,   466,   467,   468,   765,   469,   470,   766,
     471,   472,     0,   473,   474,     0,     0,   475,     0,     0,
     476,     0,   477,     0,  1810,   479,   480,     0,     0,   768,
     769,   770,   771,   481,     0,     0,   482,   772,     0,   773,
     483,   484,   485,   486,   487,   774,     0,     0,     0,     0,
       0,     0,   489,   490,     0,   491,   492,   493,     0,     0,
     775,     0,     0,     0,     0,   776,   777,     0,     0,     0,
       0,   778,   779,     0,     0,   780,   781,     0,     0,   782,
     783,   139,     0,   675,   141,   142,   143,   144,     0,     0,
     145,     0,     0,     0,   146,     0,     0,   676,     0,   148,
     149,   150,   151,   152,   153,   677,   155,     0,   156,     0,
       0,   678,   157,   679,   680,   681,   158,   682,     0,   159,
     160,   161,     0,   162,     0,   163,   164,     0,     0,   165,
     683,   684,   166,   167,     0,   168,   685,   686,   170,   171,
       0,   172,   173,   174,   175,   176,   687,   178,     0,   688,
     180,   689,   690,   691,   692,   693,     0,   186,   187,   188,
     189,   190,   191,   192,   193,     0,   194,   195,     0,   196,
     197,   198,   694,   200,     0,   201,   695,   696,   202,     0,
       0,   203,   697,   698,     0,   204,   699,   700,     0,   205,
     206,   207,   701,   702,   703,     0,     0,     0,     0,   704,
     210,   705,     0,     0,   706,   211,     0,   212,     0,     0,
       0,   213,     0,   214,   215,   216,   217,     0,     0,     0,
     218,     0,     0,   219,   220,   221,     0,     0,     0,   222,
       0,   223,   224,     0,   225,   226,   227,     0,     0,   228,
     229,     0,   230,   231,   232,   233,   234,   235,   707,     0,
     236,   237,   238,   708,   709,   239,   240,     0,   241,   242,
     243,   710,     0,   244,     0,     0,     0,   245,     0,   246,
       0,   247,     0,   248,   249,   711,   251,   712,   253,     0,
     254,     0,   713,     0,   255,   256,   257,     0,   258,   714,
       0,   259,   260,     0,     0,     0,   715,   262,   263,   264,
     716,     0,   265,   266,   267,     0,   268,     0,   269,     0,
       0,     0,   717,   270,   271,  2680,     0,     0,   272,     0,
     273,   274,     0,   275,   276,     0,     0,     0,   277,     0,
       0,   278,   279,   719,     0,     0,   281,     0,   720,   282,
     283,     0,     0,     0,     0,     0,   721,   285,     0,   286,
       0,   287,     0,   288,   289,     0,     0,   722,     0,     0,
       0,     0,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,     0,   306,
     307,   308,   723,   309,   310,   311,   312,   724,   313,   314,
       0,     0,     0,     0,   315,   316,   317,   318,   725,   320,
       0,     0,   726,   322,   727,   323,     0,   324,   728,   729,
     730,   731,   732,   329,   330,   331,   332,   333,     0,   733,
     334,   335,     0,     0,   336,   337,   338,   339,   734,   735,
     736,   340,   341,     0,   737,   738,     0,   342,   343,   739,
       0,   345,   346,   347,   348,     0,   349,   350,     0,     0,
       0,     0,     0,     0,     0,     0,   351,   352,   353,     0,
     740,   354,     0,   355,   356,   357,   358,   741,   360,   361,
     362,   363,   742,   743,   366,   744,     0,   367,   368,   369,
       0,   370,     0,   371,   372,   373,   374,   375,     0,   745,
     377,   378,     0,     0,   379,     0,     0,     0,   380,   381,
     382,   383,   384,     0,     0,   385,   386,   387,   388,   389,
       0,   390,   391,     0,   392,   393,   394,   746,   747,   395,
       0,   396,     0,   397,   398,     0,   399,   400,     0,     0,
     748,   401,   402,   403,   404,   405,   749,   407,   408,   409,
     410,     0,   750,   412,     0,     0,     0,   413,   414,   415,
     416,     0,     0,     0,   417,     0,     0,     0,   418,     0,
     419,   420,   421,   422,   423,     0,   424,   425,   426,   427,
     428,   429,     0,     0,     0,     0,     0,     0,   430,   431,
       0,   432,     0,     0,   433,     0,     0,   434,   435,   436,
     751,   752,   437,   438,     0,   439,   440,   753,   442,   443,
     444,   754,   755,   445,   446,   447,   448,   756,   449,   450,
       0,   451,     0,   452,   453,   454,   455,     0,   757,   456,
     457,     0,   758,   759,   760,   761,     0,     0,     0,     0,
       0,   462,   463,   464,     0,   762,   763,   764,   466,   467,
     468,   765,   469,   470,   766,   471,   472,     0,   473,   474,
       0,     0,   475,     0,     0,   476,     0,   477,     0,   767,
     479,   480,     0,     0,   768,   769,   770,   771,   481,     0,
       0,   482,   772,     0,   773,   483,   484,   485,   486,   487,
     774,     0,     0,     0,     0,     0,     0,   489,   490,     0,
     491,   492,   493,     0,     0,   775,     0,     0,     0,     0,
     776,   777,     0,     0,     0,     0,   778,   779,     0,     0,
     780,   781,     0,     0,   782,   783,   139,     0,   675,   141,
     142,   143,   144,     0,     0,   145,     0,     0,     0,   146,
       0,     0,   676,     0,   148,   149,   150,   151,   152,   153,
     677,   155,     0,   156,     0,     0,   678,   157,   679,   680,
     681,   158,   682,     0,   159,   160,   161,     0,   162,     0,
     163,   164,     0,     0,   165,   683,   684,   166,   167,     0,
     168,   685,   686,   170,   171,     0,   172,   173,   174,   175,
     176,   687,   178,     0,   688,   180,   689,   690,   691,   692,
     693,     0,   186,   187,   188,   189,   190,   191,   192,   193,
       0,   194,   195,     0,   196,   197,   198,   694,   200,     0,
     201,   695,   696,   202,     0,     0,   203,   697,   698,     0,
     204,   699,   700,     0,   205,   206,   207,   701,   702,   703,
       0,     0,     0,     0,   704,   210,   705,     0,     0,   706,
     211,     0,   212,     0,     0,     0,   213,     0,   214,   215,
     216,   217,     0,     0,     0,   218,     0,     0,   219,   220,
     221,     0,     0,     0,   222,     0,   223,   224,     0,   225,
     226,   227,     0,     0,   228,   229,     0,   230,   231,   232,
     233,   234,   235,   707,     0,   236,   237,   238,   708,   709,
     239,   240,     0,   241,   242,   243,   710,     0,   244,     0,
       0,     0,   245,     0,   246,     0,   247,     0,   248,   249,
     711,   251,   712,   253,     0,   254,     0,   713,     0,   255,
     256,   257,     0,   258,   714,     0,   259,   260,     0,     0,
       0,   715,   262,   263,   264,   716,     0,   265,   266,   267,
       0,   268,     0,   269,     0,     0,     0,   717,   270,   271,
    2731,     0,     0,   272,     0,   273,   274,     0,   275,   276,
       0,     0,     0,   277,     0,     0,   278,   279,   719,     0,
       0,   281,     0,   720,   282,   283,     0,     0,     0,     0,
       0,   721,   285,     0,   286,     0,   287,     0,   288,   289,
       0,     0,   722,     0,     0,     0,     0,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,     0,   306,   307,   308,   723,   309,   310,
     311,   312,   724,   313,   314,     0,     0,     0,     0,   315,
     316,   317,   318,   725,   320,     0,     0,   726,   322,   727,
     323,     0,   324,   728,   729,   730,   731,   732,   329,   330,
     331,   332,   333,     0,   733,   334,   335,     0,     0,   336,
     337,   338,   339,   734,   735,   736,   340,   341,     0,   737,
     738,     0,   342,   343,   739,     0,   345,   346,   347,   348,
       0,   349,   350,     0,     0,     0,     0,     0,     0,     0,
       0,   351,   352,   353,     0,   740,   354,     0,   355,   356,
     357,   358,   741,   360,   361,   362,   363,   742,   743,   366,
     744,     0,   367,   368,   369,     0,   370,     0,   371,   372,
     373,   374,   375,     0,   745,   377,   378,     0,     0,   379,
       0,     0,     0,   380,   381,   382,   383,   384,     0,     0,
     385,   386,   387,   388,   389,     0,   390,   391,     0,   392,
     393,   394,   746,   747,   395,     0,   396,     0,   397,   398,
       0,   399,   400,     0,     0,   748,   401,   402,   403,   404,
     405,   749,   407,   408,   409,   410,     0,   750,   412,     0,
       0,     0,   413,   414,   415,   416,     0,     0,     0,   417,
       0,     0,     0,   418,     0,   419,   420,   421,   422,   423,
       0,   424,   425,   426,   427,   428,   429,     0,     0,     0,
       0,     0,     0,   430,   431,     0,   432,     0,     0,   433,
       0,     0,   434,   435,   436,   751,   752,   437,   438,     0,
     439,   440,   753,   442,   443,   444,   754,   755,   445,   446,
     447,   448,   756,   449,   450,     0,   451,     0,   452,   453,
     454,   455,     0,   757,   456,   457,     0,   758,   759,   760,
     761,     0,     0,     0,     0,     0,   462,   463,   464,     0,
     762,   763,   764,   466,   467,   468,   765,   469,   470,   766,
     471,   472,     0,   473,   474,     0,     0,   475,     0,     0,
     476,     0,   477,     0,   767,   479,   480,     0,     0,   768,
     769,   770,   771,   481,     0,     0,   482,   772,     0,   773,
     483,   484,   485,   486,   487,   774,     0,     0,     0,     0,
       0,     0,   489,   490,     0,   491,   492,   493,     0,     0,
     775,     0,     0,     0,     0,   776,   777,     0,     0,     0,
       0,   778,   779,     0,     0,   780,   781,     0,     0,   782,
     783,   139,     0,   675,   141,   142,   143,   144,     0,     0,
     145,     0,     0,     0,   146,     0,     0,   676,     0,   148,
     149,   150,   151,   152,   153,   677,   155,     0,   156,     0,
       0,   678,   157,   679,   680,   681,   158,   682,     0,   159,
     160,   161,     0,   162,     0,   163,   164,     0,     0,   165,
     683,   684,   166,   167,     0,   168,   685,   686,   170,   171,
       0,   172,   173,   174,   175,   176,   687,   178,     0,   688,
     180,   689,   690,   691,   692,   693,     0,   186,   187,   188,
     189,   190,   191,   192,   193,     0,   194,   195,     0,   196,
     197,   198,   694,   200,     0,   201,   695,   696,   202,     0,
       0,   203,   697,   698,     0,   204,   699,   700,     0,   205,
     206,   207,   701,   702,   703,     0,     0,     0,     0,   704,
     210,   705,     0,     0,  3508,   211,     0,   212,     0,     0,
       0,   213,     0,   214,   215,   216,   217,     0,     0,     0,
     218,     0,     0,   219,   220,   221,     0,     0,     0,   222,
       0,   223,   224,     0,   225,   226,   227,     0,     0,   228,
     229,     0,   230,   231,   232,   233,   234,   235,   707,     0,
     236,   237,   238,   708,   709,   239,   240,     0,   241,   242,
     243,   710,     0,   244,     0,     0,     0,   245,     0,   246,
       0,   247,     0,   248,   249,   711,   251,   712,   253,     0,
     254,     0,   713,     0,   255,   256,   257,     0,   258,   714,
       0,   259,   260,     0,     0,     0,   715,   262,   263,   264,
     716,     0,   265,   266,   267,     0,   268,     0,   269,     0,
       0,     0,   717,   270,   271,   718,     0,     0,   272,     0,
     273,   274,     0,   275,   276,     0,     0,     0,   277,     0,
       0,   278,   279,   719,     0,     0,   281,     0,   720,   282,
     283,     0,     0,     0,     0,     0,   721,   285,     0,   286,
       0,   287,     0,   288,   289,     0,     0,   722,     0,     0,
       0,     0,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,     0,   306,
     307,   308,   723,   309,   310,   311,   312,   724,   313,   314,
       0,     0,     0,     0,   315,   316,   317,   318,   725,   320,
       0,     0,   726,   322,   727,   323,     0,   324,   728,   729,
     730,   731,   732,   329,   330,   331,   332,   333,     0,   733,
     334,   335,     0,     0,   336,   337,   338,   339,   734,   735,
     736,   340,   341,     0,   737,   738,     0,   342,   343,   739,
       0,   345,   346,   347,   348,     0,   349,   350,     0,     0,
       0,     0,     0,     0,     0,     0,   351,   352,   353,     0,
     740,   354,     0,   355,   356,   357,   358,   741,   360,   361,
     362,   363,   742,   743,   366,   744,     0,   367,   368,   369,
       0,   370,     0,   371,   372,   373,   374,   375,     0,   745,
     377,   378,     0,     0,   379,     0,     0,     0,   380,   381,
     382,   383,   384,     0,     0,   385,   386,   387,   388,   389,
       0,   390,   391,     0,   392,   393,   394,   746,   747,   395,
       0,   396,     0,   397,   398,     0,   399,   400,     0,     0,
     748,   401,   402,   403,   404,   405,   749,   407,   408,   409,
     410,     0,   750,   412,     0,     0,     0,   413,   414,   415,
     416,     0,     0,     0,   417,     0,     0,     0,   418,     0,
     419,   420,   421,   422,   423,     0,   424,   425,   426,   427,
     428,   429,     0,     0,     0,     0,     0,     0,   430,   431,
       0,   432,     0,     0,   433,     0,     0,   434,   435,   436,
     751,   752,   437,   438,     0,   439,   440,   753,   442,   443,
     444,   754,   755,   445,   446,   447,   448,   756,   449,   450,
       0,   451,     0,   452,   453,   454,   455,     0,   757,   456,
     457,     0,   758,   759,   760,   761,     0,     0,     0,     0,
       0,   462,   463,   464,     0,   762,   763,   764,   466,   467,
     468,   765,   469,   470,   766,   471,   472,     0,   473,   474,
       0,     0,   475,     0,     0,   476,     0,   477,     0,   767,
     479,   480,     0,     0,   768,   769,   770,   771,   481,     0,
       0,   482,   772,     0,   773,   483,   484,   485,   486,   487,
     774,     0,     0,     0,     0,     0,     0,   489,   490,     0,
     491,   492,   493,     0,     0,   775,     0,     0,     0,     0,
     776,   777,     0,     0,     0,     0,   778,   779,     0,     0,
     780,   781,     0,     0,   782,   783,   139,     0,   675,   141,
     142,   143,   144,     0,     0,   145,     0,     0,     0,   146,
       0,     0,   676,     0,   148,   149,   150,   151,   152,   153,
     677,   155,     0,   156,     0,     0,   678,   157,   679,   680,
     681,   158,   682,     0,   159,   160,   161,     0,   162,     0,
     163,   164,     0,     0,   165,   683,   684,   166,   167,     0,
     168,   685,   686,   170,   171,     0,   172,   173,   174,   175,
     176,   687,   178,     0,   688,   180,   689,   690,   691,   692,
     693,     0,   186,   187,   188,   189,   190,   191,   192,   193,
       0,   194,   195,     0,   196,   197,   198,   694,   200,     0,
     201,   695,   696,   202,     0,     0,   203,   697,   698,     0,
     204,   699,   700,     0,   205,   206,   207,   701,   702,   703,
       0,     0,     0,     0,   704,   210,   705,     0,     0,   706,
     211,     0,   212,     0,     0,     0,   213,     0,   214,   215,
     216,   217,     0,     0,     0,   218,     0,     0,   219,   220,
     221,     0,     0,     0,   222,     0,   223,   224,     0,   225,
     226,   227,     0,     0,   228,   229,     0,   230,   231,   232,
     233,   234,   235,   707,     0,   236,   237,   238,   708,   709,
     239,   240,     0,   241,   242,   243,   710,     0,   244,     0,
       0,     0,   245,     0,   246,     0,   247,     0,   248,   249,
     711,   251,   712,   253,     0,   254,     0,   713,     0,   255,
     256,   257,     0,   258,   714,     0,   259,   260,     0,     0,
       0,   715,   262,   263,   264,   716,     0,   265,   266,   267,
       0,   268,     0,   269,     0,     0,     0,   717,   270,   271,
     718,     0,     0,   272,     0,   273,   274,     0,   275,   276,
       0,     0,     0,   277,     0,     0,   278,   279,   719,     0,
       0,   281,     0,   720,   282,   283,     0,     0,     0,     0,
       0,   721,   285,     0,   286,     0,   287,     0,   288,   289,
       0,     0,   722,     0,     0,     0,     0,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,     0,   306,   307,   308,   723,   309,   310,
     311,   312,   724,   313,   314,  4402,     0,     0,     0,   315,
     316,   317,   318,   725,   320,     0,     0,   726,   322,   727,
     323,     0,   324,   728,   729,   730,   731,   732,   329,   330,
     331,   332,   333,     0,   733,   334,   335,     0,     0,   336,
     337,   338,   339,   734,     0,   736,   340,   341,     0,   737,
     738,     0,   342,   343,   739,     0,   345,   346,   347,   348,
       0,   349,   350,     0,     0,     0,     0,     0,     0,     0,
       0,   351,   352,   353,     0,   740,   354,     0,   355,   356,
     357,   358,   741,   360,   361,   362,   363,   742,   743,   366,
     744,     0,   367,   368,   369,     0,   370,     0,   371,   372,
     373,   374,   375,     0,   745,   377,   378,     0,     0,   379,
       0,     0,     0,   380,   381,   382,   383,   384,     0,     0,
     385,   386,   387,   388,   389,     0,   390,   391,     0,   392,
     393,   394,   746,   747,   395,     0,   396,     0,   397,   398,
       0,   399,   400,     0,     0,   748,   401,   402,   403,   404,
     405,   749,   407,   408,   409,   410,     0,   750,   412,     0,
       0,     0,   413,   414,   415,   416,     0,     0,     0,   417,
       0,     0,     0,   418,     0,   419,   420,   421,   422,   423,
       0,   424,   425,   426,   427,   428,   429,     0,     0,     0,
       0,     0,     0,   430,   431,     0,   432,     0,     0,   433,
       0,     0,   434,   435,   436,   751,   752,   437,   438,     0,
     439,   440,   753,   442,   443,   444,   754,   755,   445,   446,
     447,   448,   756,   449,   450,     0,   451,     0,   452,   453,
     454,   455,     0,   757,   456,   457,     0,   758,   759,   760,
     761,     0,     0,     0,     0,     0,   462,   463,   464,     0,
     762,   763,   764,   466,   467,   468,   765,   469,   470,   766,
     471,   472,     0,   473,   474,     0,     0,   475,     0,     0,
     476,     0,   477,     0,   767,   479,   480,     0,     0,   768,
     769,   770,   771,   481,     0,     0,   482,   772,     0,   773,
     483,   484,   485,   486,   487,   774,     0,     0,     0,     0,
       0,     0,   489,   490,     0,   491,   492,   493,     0,     0,
     775,     0,     0,     0,     0,   776,   777,     0,     0,     0,
       0,   778,   779,     0,     0,   780,   781,     0,     0,   782,
     783,   139,     0,   675,   141,   142,   143,   144,     0,     0,
     145,     0,     0,     0,   146,     0,     0,   676,     0,   148,
     149,   150,   151,   152,   153,   677,   155,     0,   156,     0,
       0,   678,   157,   679,   680,   681,   158,   682,     0,   159,
     160,   161,     0,   162,     0,   163,   164,     0,     0,   165,
     683,   684,   166,   167,     0,   168,   685,   686,   170,   171,
       0,   172,   173,   174,   175,   176,   687,   178,     0,   688,
     180,   689,   690,   691,   692,   693,     0,   186,   187,   188,
     189,   190,   191,   192,   193,     0,   194,   195,     0,   196,
     197,   198,   694,   200,     0,   201,   695,   696,   202,     0,
       0,   203,   697,   698,     0,   204,   699,   700,     0,   205,
     206,   207,   701,   702,   703,     0,     0,     0,     0,   704,
     210,   705,     0,     0,   706,   211,     0,   212,     0,     0,
       0,   213,     0,   214,   215,   216,   217,     0,     0,     0,
     218,     0,     0,   219,   220,   221,     0,     0,     0,   222,
       0,   223,   224,     0,   225,   226,   227,     0,     0,   228,
     229,     0,   230,   231,   232,   233,   234,   235,   707,     0,
     236,   237,   238,   708,   709,   239,   240,     0,   241,   242,
     243,   710,     0,   244,     0,     0,     0,   245,     0,   246,
       0,   247,     0,   248,   249,   711,   251,   712,   253,     0,
     254,     0,   713,     0,   255,   256,   257,     0,   258,   714,
       0,   259,   260,     0,     0,     0,   715,   262,   263,   264,
     716,     0,   265,   266,   267,     0,   268,     0,   269,     0,
       0,     0,   717,   270,   271,   718,     0,     0,   272,     0,
     273,   274,     0,   275,   276,     0,     0,     0,   277,     0,
       0,   278,   279,   719,     0,     0,   281,     0,   720,   282,
     283,     0,     0,     0,     0,     0,   721,   285,     0,   286,
       0,   287,     0,   288,   289,     0,     0,   722,     0,     0,
       0,     0,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,     0,   306,
     307,   308,   723,   309,   310,   311,   312,   724,   313,   314,
       0,     0,     0,     0,   315,   316,   317,   318,   725,   320,
       0,     0,   726,   322,   727,   323,     0,   324,   728,   729,
     730,   731,   732,   329,   330,   331,   332,   333,     0,   733,
     334,   335,     0,     0,   336,   337,   338,   339,   734,     0,
     736,   340,   341,     0,   737,   738,     0,   342,   343,   739,
       0,   345,   346,   347,   348,     0,   349,   350,     0,     0,
       0,     0,     0,     0,     0,     0,   351,   352,   353,     0,
     740,   354,     0,   355,   356,   357,   358,   741,   360,   361,
     362,   363,   742,   743,   366,   744,     0,   367,   368,   369,
       0,   370,     0,   371,   372,   373,   374,   375,     0,   745,
     377,   378,     0,     0,   379,     0,     0,     0,   380,   381,
     382,   383,   384,     0,     0,   385,   386,   387,   388,   389,
       0,   390,   391,     0,   392,   393,   394,   746,   747,   395,
       0,   396,     0,   397,   398,     0,   399,   400,     0,     0,
     748,   401,   402,   403,   404,   405,   749,   407,   408,   409,
     410,     0,   750,   412,     0,     0,     0,   413,   414,   415,
     416,     0,     0,     0,   417,     0,     0,     0,   418,     0,
     419,   420,   421,   422,   423,     0,   424,   425,   426,   427,
     428,   429,     0,     0,     0,     0,     0,     0,   430,   431,
       0,   432,     0,     0,   433,     0,     0,   434,   435,   436,
     751,   752,   437,   438,     0,   439,   440,   753,   442,   443,
     444,   754,   755,   445,   446,   447,   448,   756,   449,   450,
       0,   451,     0,   452,   453,   454,   455,     0,   757,   456,
     457,     0,   758,   759,   760,   761,     0,     0,     0,     0,
       0,   462,   463,   464,     0,   762,   763,   764,   466,   467,
     468,   765,   469,   470,   766,   471,   472,     0,   473,   474,
       0,     0,   475,     0,     0,   476,     0,   477,     0,   767,
     479,   480,     0,     0,   768,   769,   770,   771,   481,     0,
       0,   482,   772,     0,   773,   483,   484,   485,   486,   487,
     774,     0,     0,     0,     0,     0,     0,   489,   490,     0,
     491,   492,   493,     0,     0,   775,     0,     0,     0,     0,
     776,   777,     0,     0,     0,     0,   778,   779,     0,     0,
     780,   781,     0,     0,   782,   783,   139,     0,   675,   141,
     142,   143,   144,     0,     0,   145,     0,     0,     0,   146,
       0,     0,   676,     0,   148,   149,   150,   151,   152,   153,
     677,   155,     0,   156,     0,     0,   678,   157,   679,   680,
     681,   158,   682,     0,   159,   160,   161,     0,   162,     0,
     163,   164,     0,     0,   165,   683,   684,   166,   167,     0,
     168,   685,   686,   170,   171,     0,   172,   173,   174,   175,
     176,   687,   178,     0,   688,   180,   689,   690,   691,   692,
     693,     0,   186,   187,   188,   189,   190,   191,   192,   193,
       0,   194,   195,     0,   196,   197,   198,   694,   200,     0,
     201,   695,   696,   202,     0,     0,   203,   697,   698,     0,
     204,   699,   700,     0,   205,   206,   207,   701,   702,   703,
       0,     0,     0,     0,   704,   210,   705,     0,     0,   706,
     211,     0,   212,     0,     0,     0,   213,     0,   214,   215,
     216,   217,     0,     0,     0,   218,     0,     0,   219,   220,
     221,     0,     0,     0,   222,     0,   223,   224,     0,   225,
     226,   227,     0,     0,   228,   229,     0,   230,   231,   232,
     233,   234,   235,   707,     0,   236,   237,   238,   708,   709,
     239,   240,     0,   241,   242,   243,   710,     0,   244,     0,
       0,     0,   245,     0,   246,     0,   247,     0,   248,   249,
     711,   251,   712,   253,     0,   254,     0,   713,     0,   255,
     256,   257,     0,   258,   714,     0,   259,   260,     0,     0,
       0,   715,   262,   263,   264,   716,     0,   265,   266,   267,
       0,   268,     0,   269,     0,     0,     0,   717,   270,   271,
    1749,     0,     0,   272,     0,   273,   274,     0,   275,   276,
       0,     0,     0,   277,     0,     0,   278,   279,   719,     0,
       0,   281,     0,   720,   282,   283,     0,     0,     0,     0,
       0,   721,   285,     0,   286,     0,   287,     0,   288,   289,
       0,     0,   722,     0,     0,     0,     0,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,     0,   306,   307,   308,   723,   309,   310,
     311,   312,   724,   313,   314,     0,     0,     0,     0,   315,
     316,   317,   318,   725,   320,     0,     0,   726,   322,   727,
     323,     0,   324,   728,   729,   730,   731,   732,   329,   330,
     331,   332,   333,     0,   733,   334,   335,     0,     0,   336,
     337,   338,   339,   734,     0,   736,   340,   341,     0,   737,
     738,     0,   342,   343,   739,     0,   345,   346,   347,   348,
       0,   349,   350,     0,     0,     0,     0,     0,     0,     0,
       0,   351,   352,   353,     0,   740,   354,     0,   355,   356,
     357,   358,   741,   360,   361,   362,   363,   742,   743,   366,
     744,     0,   367,   368,   369,     0,   370,     0,   371,   372,
     373,   374,   375,     0,   745,   377,   378,     0,     0,   379,
       0,     0,     0,   380,   381,   382,   383,   384,     0,     0,
     385,   386,   387,   388,   389,     0,   390,   391,     0,   392,
     393,   394,   746,   747,   395,     0,   396,     0,   397,   398,
       0,   399,   400,     0,     0,   748,   401,   402,   403,   404,
     405,   749,   407,   408,   409,   410,     0,   750,   412,     0,
       0,     0,   413,   414,   415,   416,     0,     0,     0,   417,
       0,     0,     0,   418,     0,   419,   420,   421,   422,   423,
       0,   424,   425,   426,   427,   428,   429,     0,     0,     0,
       0,     0,     0,   430,   431,     0,   432,     0,     0,   433,
       0,     0,   434,   435,   436,   751,   752,   437,   438,     0,
     439,   440,   753,   442,   443,   444,   754,   755,   445,   446,
     447,   448,   756,   449,   450,     0,   451,     0,   452,   453,
     454,   455,     0,   757,   456,   457,     0,   758,   759,   760,
     761,     0,     0,     0,     0,     0,   462,   463,   464,     0,
     762,   763,   764,   466,   467,   468,   765,   469,   470,   766,
     471,   472,     0,   473,   474,     0,     0,   475,     0,     0,
     476,     0,   477,     0,   767,   479,   480,     0,     0,   768,
     769,   770,   771,   481,     0,     0,   482,   772,     0,   773,
     483,   484,   485,   486,   487,   774,     0,     0,     0,     0,
       0,     0,   489,   490,     0,   491,   492,   493,     0,     0,
     775,     0,     0,     0,     0,   776,   777,     0,     0,     0,
       0,   778,   779,     0,     0,   780,   781,     0,     0,   782,
     783,   139,     0,   675,   141,   142,   143,   144,     0,     0,
     145,     0,     0,     0,   146,     0,     0,   676,     0,   148,
     149,   150,   151,   152,   153,   677,   155,     0,   156,     0,
       0,   678,   157,   679,   680,   681,   158,   682,     0,   159,
     160,   161,     0,   162,     0,   163,   164,     0,     0,   165,
     683,   684,   166,   167,     0,   168,   685,   686,   170,   171,
       0,   172,   173,   174,   175,   176,   687,   178,     0,   688,
     180,   689,   690,   691,   692,   693,     0,   186,   187,   188,
     189,   190,   191,   192,   193,     0,   194,   195,     0,   196,
     197,   198,   694,   200,     0,   201,   695,   696,   202,     0,
       0,   203,   697,   698,     0,   204,   699,   700,     0,   205,
     206,   207,   701,   702,   703,     0,     0,     0,     0,   704,
     210,   705,     0,     0,   706,   211,     0,   212,     0,     0,
       0,   213,     0,   214,   215,   216,   217,     0,     0,     0,
     218,     0,     0,   219,   220,   221,     0,     0,     0,   222,
       0,   223,   224,     0,   225,   226,   227,     0,     0,   228,
     229,     0,   230,   231,   232,   233,   234,   235,   707,     0,
     236,   237,   238,   708,   709,   239,   240,     0,   241,   242,
     243,   710,     0,   244,     0,     0,     0,   245,     0,   246,
       0,   247,     0,   248,   249,   711,   251,   712,   253,     0,
     254,     0,   713,     0,   255,   256,   257,     0,   258,   714,
       0,   259,   260,     0,     0,     0,   715,   262,   263,   264,
     716,     0,   265,   266,   267,     0,   268,     0,   269,     0,
       0,     0,   717,   270,   271,  1751,     0,     0,   272,     0,
     273,   274,     0,   275,   276,     0,     0,     0,   277,     0,
       0,   278,   279,   719,     0,     0,   281,     0,   720,   282,
     283,     0,     0,     0,     0,     0,   721,   285,     0,   286,
       0,   287,     0,   288,   289,     0,     0,   722,     0,     0,
       0,     0,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,     0,   306,
     307,   308,   723,   309,   310,   311,   312,   724,   313,   314,
       0,     0,     0,     0,   315,   316,   317,   318,   725,   320,
       0,     0,   726,   322,   727,   323,     0,   324,   728,   729,
     730,   731,   732,   329,   330,   331,   332,   333,     0,   733,
     334,   335,     0,     0,   336,   337,   338,   339,   734,     0,
     736,   340,   341,     0,   737,   738,     0,   342,   343,   739,
       0,   345,   346,   347,   348,     0,   349,   350,     0,     0,
       0,     0,     0,     0,     0,     0,   351,   352,   353,     0,
     740,   354,     0,   355,   356,   357,   358,   741,   360,   361,
     362,   363,   742,   743,   366,   744,     0,   367,   368,   369,
       0,   370,     0,   371,   372,   373,   374,   375,     0,   745,
     377,   378,     0,     0,   379,     0,     0,     0,   380,   381,
     382,   383,   384,     0,     0,   385,   386,   387,   388,   389,
       0,   390,   391,     0,   392,   393,   394,   746,   747,   395,
       0,   396,     0,   397,   398,     0,   399,   400,     0,     0,
     748,   401,   402,   403,   404,   405,   749,   407,   408,   409,
     410,     0,   750,   412,     0,     0,     0,   413,   414,   415,
     416,     0,     0,     0,   417,     0,     0,     0,   418,     0,
     419,   420,   421,   422,   423,     0,   424,   425,   426,   427,
     428,   429,     0,     0,     0,     0,     0,     0,   430,   431,
       0,   432,     0,     0,   433,     0,     0,   434,   435,   436,
     751,   752,   437,   438,     0,   439,   440,   753,   442,   443,
     444,   754,   755,   445,   446,   447,   448,   756,   449,   450,
       0,   451,     0,   452,   453,   454,   455,     0,   757,   456,
     457,     0,   758,   759,   760,   761,     0,     0,     0,     0,
       0,   462,   463,   464,     0,   762,   763,   764,   466,   467,
     468,   765,   469,   470,   766,   471,   472,     0,   473,   474,
       0,     0,   475,     0,     0,   476,     0,   477,     0,   767,
     479,   480,     0,     0,   768,   769,   770,   771,   481,     0,
       0,   482,   772,     0,   773,   483,   484,   485,   486,   487,
     774,     0,     0,     0,     0,     0,     0,   489,   490,     0,
     491,   492,   493,     0,     0,   775,     0,     0,     0,     0,
     776,   777,     0,     0,     0,     0,   778,   779,     0,     0,
     780,   781,     0,     0,   782,   783,   139,     0,   140,   141,
     142,   143,   144,     0,     0,   145,     0,     0,     0,   146,
       0,     0,   147,     0,   148,   149,   150,   151,   152,   153,
     154,   155,     0,   156,     0,     0,     0,   157,   679,     0,
       0,   158,     0,     0,   159,   160,   161,     0,   162,     0,
     163,   164,     0,     0,   165,     0,     0,   166,   167,     0,
     168,   169,     0,   170,   171,     0,   172,   173,   174,   175,
     176,   177,   178,     0,   179,   180,   181,   182,   183,   184,
     185,     0,   186,   187,   188,   189,   190,   191,   192,   193,
       0,   194,   195,     0,   196,   197,   198,   199,   200,     0,
     201,     0,     0,   202,     0,     0,   203,     0,     0,     0,
     204,     0,     0,     0,   205,   206,   207,     0,     0,  2394,
       0,     0,     0,     0,   209,   210,   705,     0,     0,     0,
     211,     0,   212,     0,     0,     0,   213,     0,   214,   215,
     216,   217,     0,     0,     0,   218,     0,     0,   219,   220,
     221,     0,     0,     0,   222,     0,   223,   224,     0,   225,
     226,   227,     0,     0,   228,   229,     0,   230,   231,   232,
     233,   234,   235,     0,     0,   236,   237,   238,     0,   709,
     239,   240,     0,   241,   242,   243,   710,     0,   244,     0,
       0,     0,   245,     0,   246,     0,   247,     0,   248,   249,
     250,   251,   252,   253,     0,   254,     0,     0,     0,   255,
     256,   257,     0,   258,   714,     0,   259,   260,     0,     0,
       0,   261,   262,   263,   264,     0,     0,   265,   266,   267,
       0,   268,     0,   269,     0,     0,     0,     0,   270,   271,
       0,     0,     0,   272,     0,   273,   274,     0,   275,   276,
       0,     0,     0,   277,     0,     0,   278,   279,   280,     0,
       0,   281,     0,     0,   282,   283,     0,     0,     0,     0,
       0,   284,   285,     0,   286,     0,   287,     0,   288,   289,
       0,     0,   722,     0,     0,     0,     0,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,     0,   306,   307,   308,     0,   309,   310,
     311,   312,     0,   313,   314,     0,     0,     0,     0,   315,
     316,   317,   318,   319,   320,     0,     0,   321,   322,     0,
     323,     0,   324,     0,   325,   326,   327,   328,   329,   330,
     331,   332,   333,     0,   733,   334,   335,     0,     0,   336,
     337,   338,   339,     0,     0,     0,   340,   341,     0,   737,
     738,     0,   342,   343,   344,     0,   345,   346,   347,   348,
       0,   349,   350,     0,     0,     0,     0,     0,     0,     0,
       0,   351,   352,   353,     0,     0,   354,     0,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
       0,     0,   367,   368,   369,     0,   370,     0,   371,   372,
     373,   374,   375,     0,   376,   377,   378,     0,     0,   379,
       0,     0,     0,   380,   381,   382,   383,   384,     0,     0,
     385,   386,   387,   388,   389,     0,   390,   391,     0,   392,
     393,   394,     0,     0,   395,     0,   396,     0,   397,   398,
       0,   399,   400,     0,     0,     0,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,     0,   411,   412,     0,
       0,     0,   413,   414,   415,   416,     0,     0,     0,   417,
       0,     0,     0,   418,     0,   419,   420,   421,   422,   423,
       0,   424,   425,   426,   427,   428,   429,     0,     0,     0,
       0,     0,     0,   430,   431,     0,   432,     0,     0,   433,
       0,     0,   434,   435,   436,     0,     0,   437,   438,     0,
     439,   440,   441,   442,   443,   444,     0,     0,   445,   446,
     447,   448,     0,   449,   450,     0,   451,     0,   452,   453,
     454,   455,     0,   757,   456,   457,     0,  2395,   459,   460,
    2396,     0,     0,     0,     0,     0,   462,   463,   464,     0,
       0,   763,   465,   466,   467,   468,   765,   469,   470,   766,
     471,   472,     0,   473,   474,     0,     0,   475,     0,     0,
     476,     0,   477,     0,   478,   479,   480,     0,     0,     0,
       0,     0,     0,   481,     0,     0,   482,     0,     0,     0,
     483,   484,   485,   486,   487,   488,     0,     0,     0,     0,
       0,     0,   489,   490,     0,   491,   492,   493,     0,     0,
     494,     0,     0,     0,     0,   139,     0,   140,   141,   142,
     143,   144,     0,     0,   145,     0,     0,     0,   146,   782,
     783,   147,     0,   148,   149,   150,   151,   152,   153,   154,
     155,     0,   156,     0,     0,     0,   157,     0,     0,     0,
     158,     0,     0,   159,   160,   161,     0,   162,     0,   163,
     164,     0,     0,   165,     0,     0,   166,   167,     0,   168,
     169,     0,   170,   171,     0,   172,   173,   174,   175,   176,
     177,   178,     0,   179,   180,   181,   182,   183,   184,   185,
       0,   186,   187,   188,   189,   190,   191,   192,   193,     0,
     194,   195,  2523,   196,   197,   198,   199,   200,     0,   201,
       0,     0,   202,     0,     0,   203,     0,     0,     0,   204,
       0,     0,     0,   205,   206,   207,     0,     0,   208,     0,
       0,     0,     0,   209,   210,     0,     0,     0,     0,   211,
       0,   212,     0,     0,     0,   213,     0,   214,   215,   216,
     217,     0,     0,     0,   218,     0,     0,   219,   220,   221,
       0,     0,     0,   222,     0,   223,   224,     0,   225,   226,
     227,     0,     0,   228,   229,     0,   230,   231,   232,   233,
     234,   235,     0,     0,   236,   237,   238,     0,     0,   239,
     240,     0,   241,   242,   243,     0,     0,   244,     0,     0,
       0,   245,     0,   246,   508,   247,     0,   248,   249,   250,
     251,   252,   253,     0,   254,     0,     0,     0,   255,   256,
     257,     0,   258,     0,     0,   259,   260,     0,     0,     0,
     261,   262,   263,   264,     0,     0,   265,   266,   267,  2094,
     268,     0,   269,     0,     0,     0,     0,   270,   271,     0,
       0,     0,   272,     0,   273,   274,     0,   275,   276,     0,
       0,     0,   277,  2095,     0,   278,   279,   280,     0,     0,
     281,     0,     0,   282,   283,     0,  3099,     0,     0,     0,
     284,   285,     0,   286,     0,   287,     0,   288,   289,     0,
       0,     0,     0,     0,     0,     0,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,     0,   306,   307,   308,     0,   309,   310,   311,
     312,     0,   313,   314,     0,     0,     0,     0,   315,   316,
     317,   318,   319,   320,     0,     0,   321,   322,     0,   323,
       0,   324,     0,   325,   326,   327,   328,   329,   330,   331,
     332,   333,     0,     0,   334,   335,     0,     0,   336,   337,
     338,   339,     0,     0,     0,   340,   341,     0,     0,     0,
       0,   342,   343,   344,     0,   345,   346,   347,   348,     0,
     349,   350,     0,     0,     0,     0,     0,     0,     0,     0,
     351,   352,   353,     0,     0,   354,     0,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,     0,
       0,   367,   368,   369,     0,   370,     0,   371,   372,   373,
     374,   375,     0,   376,   377,   378,     0,     0,   379,     0,
       0,     0,   380,   381,   382,   383,   384,     0,     0,   385,
     386,   387,   388,   389,     0,   390,   391,     0,   392,   393,
     394,     0,     0,   395,     0,   396,     0,   397,   398,     0,
     399,   400,     0,     0,     0,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,     0,   411,   412,  2383,     0,
       0,   413,   414,   415,   416,     0,     0,     0,   417,     0,
       0,     0,   418,     0,   419,   420,   421,   422,   423,     0,
     424,   425,   426,   427,   428,   429,   511,     0,     0,     0,
       0,     0,   430,   431,     0,   432,     0,     0,   433,     0,
       0,   434,   435,   436,     0,     0,   437,   438,     0,   439,
     440,   441,   442,   443,   444,     0,     0,   445,   446,   447,
     448,     0,   449,   450,     0,   451,     0,   452,   453,   454,
     455,     0,     0,   456,   457,     0,   458,   459,   460,   461,
       0,     0,     0,     0,     0,   462,   463,   464,     0,     0,
       0,   465,   466,   467,   468,     0,   469,   470,     0,   471,
     472,     0,   473,   474,     0,     0,   475,     0,     0,   476,
       0,   477,     0,   478,   479,   480,     0,     0,     0,     0,
       0,     0,   481,     0,     0,   482,     0,     0,     0,   483,
     484,   485,   486,   487,   488,     0,     0,     0,     0,     0,
       0,   489,   490,     0,   491,   492,   493,     0,     0,   494,
       0,     0,   139,     0,   140,   141,   142,   143,   144,     0,
       0,   145,     0,     0,     0,   146,     0,     0,   147,  2590,
     148,   149,   150,   151,   152,   153,   154,   155,     0,   156,
       0,     0,     0,   157,     0,     0,     0,   158,     0,     0,
     159,   160,   161,     0,   162,     0,   163,   164,     0,     0,
     165,     0,     0,   166,   167,     0,   168,   169,     0,   170,
     171,     0,   172,   173,   174,   175,   176,   177,   178,     0,
     179,   180,   181,   182,   183,   184,   185,     0,   186,   187,
     188,   189,   190,   191,   192,   193,     0,   194,   195,  2523,
     196,   197,   198,   199,   200,     0,   201,     0,     0,   202,
       0,     0,   203,     0,     0,     0,   204,     0,     0,     0,
     205,   206,   207,     0,     0,   208,     0,     0,     0,     0,
     209,   210,     0,     0,     0,     0,   211,     0,   212,     0,
       0,     0,   213,     0,   214,   215,   216,   217,     0,     0,
       0,   218,     0,     0,   219,   220,   221,     0,     0,     0,
     222,     0,   223,   224,     0,   225,   226,   227,     0,     0,
     228,   229,     0,   230,   231,   232,   233,   234,   235,     0,
       0,   236,   237,   238,     0,     0,   239,   240,     0,   241,
     242,   243,     0,     0,   244,     0,     0,     0,   245,     0,
     246,   508,   247,     0,   248,   249,   250,   251,   252,   253,
       0,   254,     0,     0,     0,   255,   256,   257,     0,   258,
       0,     0,   259,   260,     0,     0,     0,   261,   262,   263,
     264,     0,     0,   265,   266,   267,  2094,   268,     0,   269,
       0,     0,     0,     0,   270,   271,     0,     0,     0,   272,
       0,   273,   274,     0,   275,   276,     0,     0,     0,   277,
    2095,     0,   278,   279,   280,     0,     0,   281,     0,     0,
     282,   283,     0,     0,     0,     0,     0,   284,   285,     0,
     286,     0,   287,     0,   288,   289,     0,     0,     0,     0,
       0,     0,     0,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,     0,
     306,   307,   308,     0,   309,   310,   311,   312,     0,   313,
     314,     0,     0,     0,     0,   315,   316,   317,   318,   319,
     320,     0,     0,   321,   322,     0,   323,     0,   324,     0,
     325,   326,   327,   328,   329,   330,   331,   332,   333,     0,
       0,   334,   335,     0,     0,   336,   337,   338,   339,     0,
       0,     0,   340,   341,     0,     0,     0,     0,   342,   343,
     344,     0,   345,   346,   347,   348,     0,   349,   350,     0,
       0,     0,     0,     0,     0,     0,     0,   351,   352,   353,
       0,     0,   354,     0,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,     0,     0,   367,   368,
     369,     0,   370,     0,   371,   372,   373,   374,   375,     0,
     376,   377,   378,     0,     0,   379,     0,     0,     0,   380,
     381,   382,   383,   384,     0,     0,   385,   386,   387,   388,
     389,     0,   390,   391,     0,   392,   393,   394,     0,     0,
     395,     0,   396,     0,   397,   398,     0,   399,   400,     0,
       0,     0,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,     0,   411,   412,     0,     0,     0,   413,   414,
     415,   416,     0,     0,     0,   417,     0,     0,     0,   418,
       0,   419,   420,   421,   422,   423,     0,   424,   425,   426,
     427,   428,   429,   511,     0,     0,     0,     0,     0,   430,
     431,     0,   432,     0,     0,   433,     0,     0,   434,   435,
     436,     0,     0,   437,   438,     0,   439,   440,   441,   442,
     443,   444,     0,     0,   445,   446,   447,   448,     0,   449,
     450,     0,   451,     0,   452,   453,   454,   455,     0,     0,
     456,   457,     0,   458,   459,   460,   461,     0,     0,     0,
       0,     0,   462,   463,   464,     0,     0,     0,   465,   466,
     467,   468,     0,   469,   470,     0,   471,   472,     0,   473,
     474,     0,     0,   475,     0,     0,   476,     0,   477,     0,
     478,   479,   480,     0,     0,     0,     0,     0,     0,   481,
       0,     0,   482,     0,     0,     0,   483,   484,   485,   486,
     487,   488,     0,     0,     0,     0,     0,     0,   489,   490,
       0,   491,   492,   493,     0,     0,   494,     0,     0,   139,
       0,   140,   141,   142,   143,   144,     0,     0,   145,     0,
       0,     0,   146,     0,     0,   147,  2590,   148,   149,   150,
     151,   152,   153,   154,   155,     0,   156,     0,     0,     0,
     157,     0,     0,     0,   158,     0,     0,   159,   160,   161,
       0,   162,     0,   163,   164,     0,     0,   165,     0,     0,
     166,   167,     0,   168,   169,     0,   170,   171,     0,   172,
     173,   174,   175,   176,   177,   178,     0,   179,   180,   181,
     182,   183,   184,   185,     0,   186,   187,   188,   189,   190,
     191,   192,   193,     0,   194,   195,     0,   196,   197,   198,
     199,   200,     0,   201,     0,     0,   202,     0,     0,   203,
       0,     0,     0,   204,     0,     0,     0,   205,   206,   207,
       0,     0,   208,     0,     0,     0,     0,   209,   210,     0,
       0,     0,     0,   211,     0,   212,     0,     0,     0,   213,
       0,   214,   215,   216,   217,     0,     0,     0,   218,     0,
       0,   219,   220,   221,     0,     0,     0,   222,     0,   223,
     224,     0,   225,   226,   227,     0,     0,   228,   229,     0,
     230,   231,   232,   233,   234,   235,     0,     0,   236,   237,
     238,     0,     0,   239,   240,     0,   241,   242,   243,     0,
       0,   244,     0,     0,     0,   245,     0,   246,     0,   247,
       0,   248,   249,   250,   251,   252,   253,     0,   254,     0,
       0,     0,   255,   256,   257,     0,   258,     0,     0,   259,
     260,     0,     0,     0,   261,   262,   263,   264,     0,     0,
     265,   266,   267,     0,   268,     0,   269,     0,     0,     0,
       0,   270,   271,     0,     0,     0,   272,     0,   273,   274,
       0,   275,   276,     0,     0,     0,   277,     0,     0,   278,
     279,   280,     0,     0,   281,     0,     0,   282,   283,     0,
       0,     0,     0,     0,   284,   285,     0,   286,     0,   287,
       0,   288,   289,     0,     0,     0,     0,     0,     0,     0,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,     0,   306,   307,   308,
       0,   309,   310,   311,   312,     0,   313,   314,     0,     0,
       0,     0,   315,   316,   317,   318,   319,   320,     0,     0,
     321,   322,     0,   323,     0,   324,     0,   325,   326,   327,
     328,   329,   330,   331,   332,   333,     0,     0,   334,   335,
       0,     0,   336,   337,   338,   339,     0,     0,     0,   340,
     341,     0,     0,     0,     0,   342,   343,   344,     0,   345,
     346,   347,   348,     0,   349,   350,     0,     0,     0,     0,
       0,     0,     0,     0,   351,   352,   353,     0,     0,   354,
       0,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,     0,     0,   367,   368,   369,     0,   370,
       0,   371,   372,   373,   374,   375,     0,   376,   377,   378,
       0,     0,   379,     0,     0,     0,   380,   381,   382,   383,
     384,     0,     0,   385,   386,   387,   388,   389,     0,   390,
     391,     0,   392,   393,   394,     0,     0,   395,     0,   396,
       0,   397,   398,     0,   399,   400,     0,     0,     0,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,     0,
     411,   412,  2383,     0,     0,   413,   414,   415,   416,     0,
       0,     0,   417,     0,     0,     0,   418,     0,   419,   420,
     421,   422,   423,     0,   424,   425,   426,   427,   428,   429,
       0,     0,     0,     0,     0,     0,   430,   431,     0,   432,
       0,     0,   433,     0,     0,   434,   435,   436,     0,     0,
     437,   438,     0,   439,   440,   441,   442,   443,   444,     0,
       0,   445,   446,   447,   448,     0,   449,   450,     0,   451,
       0,   452,   453,   454,   455,     0,     0,   456,   457,     0,
     458,   459,   460,   461,     0,     0,     0,     0,     0,   462,
     463,   464,     0,     0,     0,   465,   466,   467,   468,     0,
     469,   470,     0,   471,   472,     0,   473,   474,     0,     0,
     475,     0,     0,   476,     0,   477,     0,   478,   479,   480,
       0,     0,     0,     0,     0,     0,   481,     0,     0,   482,
       0,     0,     0,   483,   484,   485,   486,   487,   488,     0,
       0,     0,     0,     0,     0,   489,   490,     0,   491,   492,
     493,     0,     0,   494,     0,     0,   139,     0,   140,   141,
     142,   143,   144,     0,     0,   145,  2822,     0,     0,   146,
       0,     0,   147,   783,   148,   149,   150,   151,   152,   153,
     154,   155,     0,   156,     0,     0,     0,   157,     0,     0,
       0,   158,     0,     0,   159,   160,   161,     0,   162,     0,
     163,   164,     0,     0,   165,     0,     0,   166,   167,     0,
     168,   169,     0,   170,   171,     0,   172,   173,   174,   175,
     176,   177,   178,     0,   179,   180,   181,   182,   183,   184,
     185,     0,   186,   187,   188,   189,   190,   191,   192,   193,
       0,   194,   195,     0,   196,   197,   198,   199,   200,     0,
     201,     0,     0,   202,     0,     0,   203,     0,     0,     0,
     204,     0,     0,     0,   205,   206,   207,     0,     0,   208,
       0,     0,     0,     0,   209,   210,     0,     0,     0,     0,
     211,     0,   212,     0,     0,     0,   213,     0,   214,   215,
     216,   217,     0,     0,     0,   218,     0,     0,   219,   220,
     221,     0,     0,     0,   222,     0,   223,   224,     0,   225,
     226,   227,     0,     0,   228,   229,     0,   230,   231,   232,
     233,   234,   235,     0,     0,   236,   237,   238,     0,     0,
     239,   240,     0,   241,   242,   243,     0,     0,   244,     0,
       0,     0,   245,     0,   246,     0,   247,     0,   248,   249,
     250,   251,   252,   253,     0,   254,     0,     0,     0,   255,
     256,   257,     0,   258,     0,     0,   259,   260,     0,     0,
       0,   261,   262,   263,   264,     0,     0,   265,   266,   267,
       0,   268,     0,   269,     0,     0,     0,     0,   270,   271,
       0,     0,     0,   272,     0,   273,   274,     0,   275,   276,
       0,     0,     0,   277,     0,     0,   278,   279,   280,     0,
       0,   281,     0,     0,   282,   283,     0,     0,     0,     0,
       0,   284,   285,     0,   286,     0,   287,     0,   288,   289,
       0,     0,     0,     0,     0,     0,     0,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,     0,   306,   307,   308,     0,   309,   310,
     311,   312,     0,   313,   314,     0,     0,     0,     0,   315,
     316,   317,   318,   319,   320,     0,     0,   321,   322,     0,
     323,     0,   324,     0,   325,   326,   327,   328,   329,   330,
     331,   332,   333,     0,     0,   334,   335,     0,     0,   336,
     337,   338,   339,     0,     0,     0,   340,   341,     0,     0,
       0,     0,   342,   343,   344,     0,   345,   346,   347,   348,
       0,   349,   350,     0,     0,     0,     0,     0,     0,     0,
       0,   351,   352,   353,     0,     0,   354,     0,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
       0,     0,   367,   368,   369,     0,   370,     0,   371,   372,
     373,   374,   375,     0,   376,   377,   378,     0,     0,   379,
       0,     0,     0,   380,   381,   382,   383,   384,     0,     0,
     385,   386,   387,   388,   389,     0,   390,   391,     0,   392,
     393,   394,     0,     0,   395,     0,   396,     0,   397,   398,
       0,   399,   400,     0,     0,     0,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,     0,   411,   412,     0,
       0,     0,   413,   414,   415,   416,     0,     0,     0,   417,
       0,     0,     0,   418,     0,   419,   420,   421,   422,   423,
       0,   424,   425,   426,   427,   428,   429,     0,     0,     0,
       0,     0,     0,   430,   431,     0,   432,     0,     0,   433,
       0,     0,   434,   435,   436,     0,     0,   437,   438,     0,
     439,   440,   441,   442,   443,   444,     0,     0,   445,   446,
     447,   448,     0,   449,   450,     0,   451,     0,   452,   453,
     454,   455,     0,     0,   456,   457,     0,   458,   459,   460,
     461,     0,     0,     0,     0,     0,   462,   463,   464,     0,
       0,     0,   465,   466,   467,   468,     0,   469,   470,     0,
     471,   472,     0,   473,   474,     0,     0,   475,     0,     0,
     476,     0,   477,     0,   478,   479,   480,     0,     0,     0,
       0,     0,     0,   481,     0,     0,   482,     0,     0,     0,
     483,   484,   485,   486,   487,   488,     0,     0,     0,     0,
       0,     0,   489,   490,     0,   491,   492,   493,     0,     0,
     494,     0,     0,     0,     0,   139,     0,   140,   141,   142,
     143,   144,     0,  4529,   145,     0,     0,     0,   146,  4530,
     783,   147,     0,   148,   149,   150,   151,   152,   153,   154,
     155,     0,   156,     0,     0,     0,   157,     0,     0,     0,
     158,     0,     0,   159,   160,   161,     0,   162,     0,   163,
     164,     0,     0,   165,     0,     0,   166,   167,     0,   168,
     169,     0,   170,   171,     0,   172,   173,   174,   175,   176,
     177,   178,     0,   179,   180,   181,   182,   183,   184,   185,
       0,   186,   187,   188,   189,   190,   191,   192,   193,     0,
     194,   195,     0,   196,   197,   198,   199,   200,     0,   201,
       0,     0,   202,     0,     0,   203,     0,     0,     0,   204,
       0,     0,     0,   205,   206,   207,     0,     0,   208,     0,
       0,     0,     0,   209,   210,     0,     0,     0,     0,   211,
       0,   212,     0,     0,     0,   213,     0,   214,   215,   216,
     217,     0,     0,     0,   218,     0,     0,   219,   220,   221,
       0,     0,     0,   222,     0,   223,   224,     0,   225,   226,
     227,     0,     0,   228,   229,     0,   230,   231,   232,   233,
     234,   235,     0,     0,   236,   237,   238,     0,     0,   239,
     240,     0,   241,   242,   243,     0,     0,   244,     0,     0,
       0,   245,     0,   246,     0,   247,     0,   248,   249,   250,
     251,   252,   253,     0,   254,     0,     0,     0,   255,   256,
     257,     0,   258,     0,     0,   259,   260,     0,     0,     0,
     261,   262,   263,   264,     0,     0,   265,   266,   267,     0,
     268,     0,   269,     0,     0,     0,     0,   270,   271,     0,
       0,     0,   272,     0,   273,   274,     0,   275,   276,     0,
       0,     0,   277,     0,     0,   278,   279,   280,     0,     0,
     281,     0,     0,   282,   283,     0,     0,     0,     0,     0,
     284,   285,     0,   286,     0,   287,     0,   288,   289,     0,
       0,     0,     0,     0,     0,     0,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,     0,   306,   307,   308,     0,   309,   310,   311,
     312,     0,   313,   314,     0,     0,     0,     0,   315,   316,
     317,   318,   319,   320,     0,     0,   321,   322,     0,   323,
       0,   324,     0,   325,   326,   327,   328,   329,   330,   331,
     332,   333,     0,     0,   334,   335,     0,     0,   336,   337,
     338,   339,     0,     0,     0,   340,   341,     0,     0,     0,
       0,   342,   343,   344,     0,   345,   346,   347,   348,     0,
     349,   350,     0,     0,     0,     0,     0,     0,     0,     0,
     351,   352,   353,     0,     0,   354,     0,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,     0,
       0,   367,   368,   369,     0,   370,     0,   371,   372,   373,
     374,   375,     0,   376,   377,   378,     0,     0,   379,     0,
       0,     0,   380,   381,   382,   383,   384,     0,     0,   385,
     386,   387,   388,   389,     0,   390,   391,     0,   392,   393,
     394,     0,     0,   395,     0,   396,     0,   397,   398,     0,
     399,   400,     0,     0,     0,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,     0,   411,   412,     0,     0,
       0,   413,   414,   415,   416,     0,     0,     0,   417,     0,
       0,     0,   418,     0,   419,   420,   421,   422,   423,     0,
     424,   425,   426,   427,   428,   429,     0,     0,     0,     0,
       0,     0,   430,   431,     0,   432,     0,     0,   433,     0,
       0,   434,   435,   436,     0,     0,   437,   438,     0,   439,
     440,   441,   442,   443,   444,     0,     0,   445,   446,   447,
     448,     0,   449,   450,     0,   451,     0,   452,   453,   454,
     455,     0,     0,   456,   457,     0,   458,   459,   460,   461,
       0,     0,     0,     0,     0,   462,   463,   464,     0,     0,
       0,   465,   466,   467,   468,     0,   469,   470,     0,   471,
     472,     0,   473,   474,     0,     0,   475,     0,     0,   476,
       0,   477,     0,   478,   479,   480,     0,     0,     0,     0,
       0,     0,   481,     0,     0,   482,     0,     0,     0,   483,
     484,   485,   486,   487,   488,     0,     0,     0,     0,     0,
       0,   489,   490,     0,   491,   492,   493,     0,     0,   494,
       0,     0,     0,     0,   139,     0,   140,   141,   142,   143,
     144,  1147,     0,   145,     0,     0,     0,   146,     0,   783,
     147,     0,   148,   149,   150,   151,   152,   153,   154,   155,
       0,   156,     0,     0,     0,   157,     0,     0,     0,   158,
       0,     0,   159,   160,   161,     0,   162,     0,   163,   164,
       0,     0,   165,     0,     0,   166,   167,     0,   168,   169,
       0,   170,   171,     0,   172,   173,   174,   175,   176,   177,
     178,     0,   179,   180,   181,   182,   183,   184,   185,     0,
     186,   187,   188,   189,   190,   191,   192,   193,     0,   194,
     195,     0,   196,   197,   198,   199,   200,     0,   201,     0,
       0,   202,     0,     0,   203,     0,     0,     0,   204,     0,
       0,     0,   205,   206,   207,     0,     0,   208,     0,     0,
       0,     0,   209,   210,     0,     0,     0,     0,   211,     0,
     212,     0,     0,     0,   213,     0,   214,   215,   216,   217,
       0,     0,     0,   218,     0,     0,   219,   220,   221,     0,
       0,     0,   222,     0,   223,   224,     0,   225,   226,   227,
       0,     0,   228,   229,     0,   230,   231,   232,   233,   234,
     235,     0,     0,   236,   237,   238,     0,     0,   239,   240,
       0,   241,   242,   243,     0,     0,   244,     0,     0,     0,
     245,     0,   246,     0,   247,     0,   248,   249,   250,   251,
     252,   253,     0,   254,     0,     0,     0,   255,   256,   257,
       0,   258,     0,     0,   259,   260,     0,     0,     0,   261,
     262,   263,   264,     0,     0,   265,   266,   267,     0,   268,
       0,   269,     0,     0,     0,     0,   270,   271,     0,  1348,
       0,   272,     0,   273,   274,     0,   275,   276,     0,     0,
       0,   277,     0,     0,   278,   279,   280,     0,     0,   281,
       0,     0,   282,   283,     0,     0,     0,     0,     0,   284,
     285,     0,   286,     0,   287,     0,   288,   289,     0,     0,
       0,     0,     0,     0,     0,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,     0,   306,   307,   308,     0,   309,   310,   311,   312,
       0,   313,   314,     0,     0,     0,     0,   315,   316,   317,
     318,   319,   320,     0,     0,   321,   322,     0,   323,     0,
     324,     0,   325,   326,   327,   328,   329,   330,   331,   332,
     333,     0,     0,   334,   335,     0,     0,   336,   337,   338,
     339,     0,     0,     0,   340,   341,     0,     0,     0,     0,
     342,   343,   344,     0,   345,   346,   347,   348,     0,   349,
     350,     0,     0,     0,     0,     0,     0,     0,     0,   351,
     352,   353,     0,     0,   354,     0,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,     0,     0,
     367,   368,   369,     0,   370,     0,   371,   372,   373,   374,
     375,     0,   376,   377,   378,     0,     0,   379,     0,     0,
       0,   380,   381,   382,   383,   384,     0,     0,   385,   386,
     387,   388,   389,     0,   390,   391,     0,   392,   393,   394,
       0,     0,   395,     0,   396,     0,   397,   398,     0,   399,
     400,     0,     0,     0,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,     0,   411,   412,     0,     0,     0,
     413,   414,   415,   416,     0,     0,     0,   417,     0,     0,
       0,   418,     0,   419,   420,   421,   422,   423,     0,   424,
     425,   426,   427,   428,   429,     0,     0,     0,     0,     0,
       0,   430,   431,     0,   432,     0,     0,   433,     0,     0,
     434,   435,   436,     0,     0,   437,   438,     0,   439,   440,
     441,   442,   443,   444,     0,     0,   445,   446,   447,   448,
       0,   449,   450,     0,   451,     0,   452,   453,   454,   455,
       0,     0,   456,   457,     0,   458,   459,   460,   461,     0,
       0,     0,     0,     0,   462,   463,   464,     0,     0,     0,
     465,   466,   467,   468,     0,   469,   470,     0,   471,   472,
       0,   473,   474,     0,     0,   475,     0,     0,   476,     0,
     477,     0,   478,   479,   480,     0,     0,     0,     0,     0,
       0,   481,     0,     0,   482,     0,     0,     0,   483,   484,
     485,   486,   487,   488,     0,     0,     0,     0,     0,     0,
     489,   490,     0,   491,   492,   493,     0,     0,   494,     0,
       0,   139,     0,   140,   141,   142,   143,   144,     0,     0,
     145,     0,     0,     0,   146,     0,     0,   147,   542,   148,
     149,   150,   151,   152,   153,   154,   155,     0,   156,     0,
       0,     0,   157,     0,     0,     0,   158,     0,     0,   159,
     160,   161,     0,   162,     0,   163,   164,     0,     0,   165,
       0,     0,   166,   167,     0,   168,   169,     0,   170,   171,
       0,   172,   173,   174,   175,   176,   177,   178,     0,   179,
     180,   181,   182,   183,   184,   185,     0,   186,   187,   188,
     189,   190,   191,   192,   193,     0,   194,   195,     0,   196,
     197,   198,   199,   200,     0,   201,     0,     0,   202,     0,
       0,   203,     0,     0,     0,   204,     0,     0,     0,   205,
     206,   207,     0,     0,   208,     0,     0,     0,     0,   209,
     210,     0,     0,     0,     0,   211,     0,   212,     0,     0,
       0,   213,     0,   214,   215,   216,   217,     0,     0,     0,
     218,     0,     0,   219,   220,   221,     0,     0,     0,   222,
       0,   223,   224,     0,   225,   226,   227,     0,     0,   228,
     229,     0,   230,   231,   232,   233,   234,   235,     0,     0,
     236,   237,   238,     0,     0,   239,   240,     0,   241,   242,
     243,     0,     0,   244,     0,     0,     0,   245,     0,   246,
       0,   247,     0,   248,   249,   250,   251,   252,   253,     0,
     254,     0,     0,     0,   255,   256,   257,     0,   258,     0,
       0,   259,   260,     0,     0,     0,   261,   262,   263,   264,
       0,     0,   265,   266,   267,     0,   268,     0,   269,     0,
       0,     0,     0,   270,   271,     0,     0,     0,   272,     0,
     273,   274,     0,   275,   276,     0,     0,     0,   277,     0,
       0,   278,   279,   280,     0,     0,   281,     0,     0,   282,
     283,     0,     0,     0,     0,     0,   284,   285,     0,   286,
       0,   287,     0,   288,   289,     0,     0,     0,     0,     0,
       0,     0,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,     0,   306,
     307,   308,     0,   309,   310,   311,   312,     0,   313,   314,
       0,     0,     0,     0,   315,   316,   317,   318,   319,   320,
       0,     0,   321,   322,     0,   323,     0,   324,     0,   325,
     326,   327,   328,   329,   330,   331,   332,   333,     0,     0,
     334,   335,     0,     0,   336,   337,   338,   339,     0,     0,
       0,   340,   341,     0,     0,     0,     0,   342,   343,   344,
       0,   345,   346,   347,   348,     0,   349,   350,     0,     0,
       0,     0,     0,     0,     0,     0,   351,   352,   353,     0,
       0,   354,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,     0,     0,   367,   368,   369,
       0,   370,     0,   371,   372,   373,   374,   375,     0,   376,
     377,   378,     0,     0,   379,     0,     0,     0,   380,   381,
     382,   383,   384,     0,     0,   385,   386,   387,   388,   389,
       0,   390,   391,     0,   392,   393,   394,     0,     0,   395,
       0,   396,     0,   397,   398,     0,   399,   400,     0,     0,
       0,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,     0,   411,   412,     0,     0,     0,   413,   414,   415,
     416,     0,     0,     0,   417,     0,     0,     0,   418,     0,
     419,   420,   421,   422,   423,     0,   424,   425,   426,   427,
     428,   429,     0,     0,     0,     0,     0,     0,   430,   431,
       0,   432,     0,     0,   433,     0,     0,   434,   435,   436,
       0,     0,   437,   438,     0,   439,   440,   441,   442,   443,
     444,     0,     0,   445,   446,   447,   448,     0,   449,   450,
       0,   451,     0,   452,   453,   454,   455,     0,     0,   456,
     457,     0,   458,   459,   460,   461,     0,     0,     0,     0,
       0,   462,   463,   464,     0,     0,     0,   465,   466,   467,
     468,     0,   469,   470,     0,   471,   472,     0,   473,   474,
       0,     0,   475,     0,     0,   476,     0,   477,     0,   478,
     479,   480,     0,     0,     0,     0,     0,     0,   481,     0,
       0,   482,     0,     0,     0,   483,   484,   485,   486,   487,
     488,     0,     0,     0,     0,     0,     0,   489,   490,     0,
     491,   492,   493,     0,     0,   494,     0,     0,     0,     0,
       0,   139,  2332,   140,   141,   142,   143,   144,     0,     0,
     145,     0,     0,     0,   146,   542,     0,   147,     0,   148,
     149,   150,   151,   152,   153,   154,   155,     0,   156,     0,
       0,     0,   157,     0,     0,     0,   158,     0,     0,   159,
     160,   161,     0,   162,     0,   163,   164,     0,     0,   165,
       0,     0,   166,   167,     0,   168,   169,     0,   170,   171,
       0,   172,   173,   174,   175,   176,   177,   178,     0,   179,
     180,   181,   182,   183,   184,   185,     0,   186,   187,   188,
     189,   190,   191,   192,   193,     0,   194,   195,     0,   196,
     197,   198,   199,   200,     0,   201,     0,     0,   202,     0,
       0,   203,     0,     0,     0,   204,     0,     0,     0,   205,
     206,   207,     0,     0,   208,     0,     0,     0,     0,   209,
     210,     0,     0,     0,     0,   211,     0,   212,     0,     0,
       0,   213,     0,   214,   215,   216,   217,     0,     0,     0,
     218,     0,     0,   219,   220,   221,     0,     0,     0,   222,
       0,   223,   224,     0,   225,   226,   227,     0,     0,   228,
     229,     0,   230,   231,   232,   233,   234,   235,     0,     0,
     236,   237,   238,     0,     0,   239,   240,     0,   241,   242,
     243,     0,     0,   244,     0,     0,     0,   245,     0,   246,
       0,   247,     0,   248,   249,   250,   251,   252,   253,     0,
     254,     0,     0,     0,   255,   256,   257,     0,   258,     0,
       0,   259,   260,     0,     0,     0,   261,   262,   263,   264,
       0,     0,   265,   266,   267,     0,   268,     0,   269,     0,
       0,     0,     0,   270,   271,     0,     0,     0,   272,     0,
     273,   274,     0,   275,   276,     0,     0,     0,   277,     0,
       0,   278,   279,   280,     0,     0,   281,     0,     0,   282,
     283,     0,     0,     0,     0,     0,   284,   285,     0,   286,
       0,   287,     0,   288,   289,     0,     0,     0,     0,     0,
       0,     0,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,     0,   306,
     307,   308,     0,   309,   310,   311,   312,     0,   313,   314,
       0,     0,     0,     0,   315,   316,   317,   318,   319,   320,
       0,     0,   321,   322,     0,   323,     0,   324,     0,   325,
     326,   327,   328,   329,   330,   331,   332,   333,     0,     0,
     334,   335,     0,     0,   336,   337,   338,   339,     0,     0,
       0,   340,   341,     0,     0,     0,     0,   342,   343,   344,
       0,   345,   346,   347,   348,     0,   349,   350,     0,     0,
       0,     0,     0,     0,     0,     0,   351,   352,   353,     0,
       0,   354,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,     0,     0,   367,   368,   369,
       0,   370,     0,   371,   372,   373,   374,   375,     0,   376,
     377,   378,     0,     0,   379,     0,     0,     0,   380,   381,
     382,   383,   384,     0,     0,   385,   386,   387,   388,   389,
       0,   390,   391,     0,   392,   393,   394,     0,     0,   395,
       0,   396,     0,   397,   398,     0,   399,   400,     0,     0,
       0,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,     0,   411,   412,     0,     0,     0,   413,   414,   415,
     416,     0,     0,     0,   417,     0,     0,     0,   418,     0,
     419,   420,   421,   422,   423,     0,   424,   425,   426,   427,
     428,   429,     0,     0,     0,     0,     0,     0,   430,   431,
       0,   432,     0,     0,   433,     0,     0,   434,   435,   436,
       0,     0,   437,   438,     0,   439,   440,   441,   442,   443,
     444,     0,     0,   445,   446,   447,   448,     0,   449,   450,
       0,   451,     0,   452,   453,   454,   455,     0,     0,   456,
     457,     0,   458,   459,   460,   461,     0,     0,     0,     0,
       0,   462,   463,   464,     0,     0,     0,   465,   466,   467,
     468,     0,   469,   470,     0,   471,   472,     0,   473,   474,
       0,     0,   475,     0,     0,   476,     0,   477,     0,   478,
     479,   480,     0,     0,     0,     0,     0,     0,   481,     0,
       0,   482,     0,     0,     0,   483,   484,   485,   486,   487,
     488,     0,     0,     0,     0,     0,     0,   489,   490,     0,
     491,   492,   493,     0,     0,   494,     0,     0,     0,     0,
     139,     0,   140,   141,   142,   143,   144,  2589,     0,   145,
       0,     0,     0,   146,     0,  2590,   147,     0,   148,   149,
     150,   151,   152,   153,   154,   155,     0,   156,     0,     0,
       0,   157,     0,     0,     0,   158,     0,     0,   159,   160,
     161,     0,   162,     0,   163,   164,     0,     0,   165,     0,
       0,   166,   167,     0,   168,   169,     0,   170,   171,     0,
     172,   173,   174,   175,   176,   177,   178,     0,   179,   180,
     181,   182,   183,   184,   185,     0,   186,   187,   188,   189,
     190,   191,   192,   193,     0,   194,   195,     0,   196,   197,
     198,   199,   200,     0,   201,     0,     0,   202,     0,     0,
     203,     0,     0,     0,   204,     0,     0,     0,   205,   206,
     207,     0,     0,   208,     0,     0,     0,     0,   209,   210,
       0,     0,     0,     0,   211,     0,   212,     0,     0,     0,
     213,     0,   214,   215,   216,   217,     0,     0,     0,   218,
       0,     0,   219,   220,   221,     0,     0,     0,   222,     0,
     223,   224,     0,   225,   226,   227,     0,     0,   228,   229,
       0,   230,   231,   232,   233,   234,   235,     0,     0,   236,
     237,   238,     0,     0,   239,   240,     0,   241,   242,   243,
       0,     0,   244,     0,     0,     0,   245,     0,   246,     0,
     247,     0,   248,   249,   250,   251,   252,   253,     0,   254,
       0,     0,     0,   255,   256,   257,     0,   258,     0,     0,
     259,   260,     0,     0,     0,   261,   262,   263,   264,     0,
       0,   265,   266,   267,     0,   268,     0,   269,     0,     0,
       0,     0,   270,   271,     0,     0,     0,   272,     0,   273,
     274,     0,   275,   276,     0,     0,     0,   277,     0,     0,
     278,   279,   280,     0,     0,   281,     0,     0,   282,   283,
       0,     0,     0,     0,     0,   284,   285,     0,   286,     0,
     287,     0,   288,   289,     0,     0,     0,     0,     0,     0,
       0,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,     0,   306,   307,
     308,     0,   309,   310,   311,   312,     0,   313,   314,     0,
       0,     0,     0,   315,   316,   317,   318,   319,   320,     0,
       0,   321,   322,     0,   323,     0,   324,     0,   325,   326,
     327,   328,   329,   330,   331,   332,   333,     0,     0,   334,
     335,     0,     0,   336,   337,   338,   339,     0,     0,     0,
     340,   341,     0,     0,     0,     0,   342,   343,   344,     0,
     345,   346,   347,   348,     0,   349,   350,     0,     0,     0,
       0,     0,     0,     0,     0,   351,   352,   353,     0,     0,
     354,     0,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,     0,     0,   367,   368,   369,     0,
     370,     0,   371,   372,   373,   374,   375,     0,   376,   377,
     378,     0,     0,   379,     0,     0,     0,   380,   381,   382,
     383,   384,     0,     0,   385,   386,   387,   388,   389,     0,
     390,   391,     0,   392,   393,   394,     0,     0,   395,     0,
     396,     0,   397,   398,     0,   399,   400,     0,     0,     0,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
       0,   411,   412,     0,     0,     0,   413,   414,   415,   416,
       0,     0,     0,   417,     0,     0,     0,   418,     0,   419,
     420,   421,   422,   423,     0,   424,   425,   426,   427,   428,
     429,     0,     0,     0,     0,     0,     0,   430,   431,     0,
     432,     0,     0,   433,     0,     0,   434,   435,   436,     0,
       0,   437,   438,     0,   439,   440,   441,   442,   443,   444,
       0,     0,   445,   446,   447,   448,     0,   449,   450,     0,
     451,     0,   452,   453,   454,   455,     0,     0,   456,   457,
       0,   458,   459,   460,   461,     0,     0,     0,     0,     0,
     462,   463,   464,     0,     0,     0,   465,   466,   467,   468,
       0,   469,   470,     0,   471,   472,     0,   473,   474,     0,
       0,   475,     0,     0,   476,     0,   477,     0,   478,   479,
     480,     0,     0,     0,     0,     0,     0,   481,     0,     0,
     482,     0,     0,     0,   483,   484,   485,   486,   487,   488,
       0,     0,     0,     0,     0,     0,   489,   490,     0,   491,
     492,   493,     0,     0,   494,     0,     0,     0,     0,   139,
       0,   140,   141,   142,   143,   144,     0,     0,   145,     0,
       0,     0,   146,  4530,   783,   147,     0,   148,   149,   150,
     151,   152,   153,   154,   155,     0,   156,     0,     0,     0,
     157,     0,     0,     0,   158,     0,     0,   159,   160,   161,
       0,   162,     0,   163,   164,     0,     0,   165,     0,     0,
     166,   167,     0,   168,   169,     0,   170,   171,     0,   172,
     173,   174,   175,   176,   177,   178,     0,   179,   180,   181,
     182,   183,   184,   185,     0,   186,   187,   188,   189,   190,
     191,   192,   193,     0,   194,   195,     0,   196,   197,   198,
     199,   200,     0,   201,     0,     0,   202,     0,     0,   203,
       0,     0,     0,   204,     0,     0,     0,   205,   206,   207,
       0,     0,   208,     0,     0,     0,     0,   209,   210,     0,
       0,     0,     0,   211,     0,   212,     0,     0,     0,   213,
       0,   214,   215,   216,   217,     0,     0,     0,   218,     0,
       0,   219,   220,   221,     0,     0,     0,   222,     0,   223,
     224,     0,   225,   226,   227,     0,     0,   228,   229,     0,
     230,   231,   232,   233,   234,   235,     0,     0,   236,   237,
     238,     0,     0,   239,   240,     0,   241,   242,   243,     0,
       0,   244,     0,     0,     0,   245,     0,   246,     0,   247,
       0,   248,   249,   250,   251,   252,   253,     0,   254,     0,
       0,     0,   255,   256,   257,     0,   258,     0,     0,   259,
     260,     0,     0,     0,   261,   262,   263,   264,     0,     0,
     265,   266,   267,     0,   268,     0,   269,     0,     0,     0,
       0,   270,   271,     0,     0,     0,   272,     0,   273,   274,
       0,   275,   276,     0,     0,     0,   277,     0,     0,   278,
     279,   280,     0,     0,   281,     0,     0,   282,   283,     0,
       0,     0,     0,     0,   284,   285,     0,   286,     0,   287,
       0,   288,   289,     0,     0,     0,     0,     0,     0,     0,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,     0,   306,   307,   308,
       0,   309,   310,   311,   312,     0,   313,   314,     0,     0,
       0,     0,   315,   316,   317,   318,   319,   320,     0,     0,
     321,   322,     0,   323,     0,   324,     0,   325,   326,   327,
     328,   329,   330,   331,   332,   333,     0,     0,   334,   335,
       0,     0,   336,   337,   338,   339,     0,     0,     0,   340,
     341,     0,     0,     0,     0,   342,   343,   344,     0,   345,
     346,   347,   348,     0,   349,   350,     0,     0,     0,     0,
       0,     0,     0,     0,   351,   352,   353,     0,     0,   354,
       0,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,     0,     0,   367,   368,   369,     0,   370,
       0,   371,   372,   373,   374,   375,     0,   376,   377,   378,
       0,     0,   379,     0,     0,     0,   380,   381,   382,   383,
     384,     0,     0,   385,   386,   387,   388,   389,     0,   390,
     391,     0,   392,   393,   394,     0,     0,   395,     0,   396,
       0,   397,   398,     0,   399,   400,     0,     0,     0,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,     0,
     411,   412,     0,     0,     0,   413,   414,   415,   416,     0,
       0,     0,   417,     0,     0,     0,   418,     0,   419,   420,
     421,   422,   423,     0,   424,   425,   426,   427,   428,   429,
       0,     0,     0,     0,     0,     0,   430,   431,     0,   432,
       0,     0,   433,     0,     0,   434,   435,   436,     0,     0,
     437,   438,     0,   439,   440,   441,   442,   443,   444,     0,
       0,   445,   446,   447,   448,     0,   449,   450,     0,   451,
       0,   452,   453,   454,   455,     0,     0,   456,   457,     0,
     458,   459,   460,   461,     0,     0,     0,     0,     0,   462,
     463,   464,     0,     0,     0,   465,   466,   467,   468,     0,
     469,   470,     0,   471,   472,     0,   473,   474,     0,     0,
     475,     0,     0,   476,     0,   477,     0,   478,   479,   480,
       0,     0,     0,     0,     0,     0,   481,     0,     0,   482,
       0,     0,     0,   483,   484,   485,   486,   487,   488,     0,
       0,     0,     0,     0,     0,   489,   490,     0,   491,   492,
     493,     0,     0,   494,     0,     0,   139,     0,   140,   141,
     142,   143,   144,     0,     0,   145,     0,     0,     0,   146,
       0,     0,   147,   542,   148,   149,   150,   151,   152,   153,
     154,   155,     0,   156,     0,     0,     0,   157,     0,     0,
       0,   158,     0,     0,   159,   160,   161,     0,   162,     0,
     163,   164,     0,     0,   165,     0,     0,   166,   167,     0,
     168,   169,     0,   170,   171,     0,   172,   173,   174,   175,
     176,   177,   178,     0,   179,   180,   181,   182,   183,   184,
     185,     0,   186,   187,   188,   189,   190,   191,   192,   193,
       0,   194,   195,     0,   196,   197,   198,   199,   200,     0,
     201,     0,     0,   202,     0,     0,   203,     0,     0,     0,
     204,     0,     0,     0,   205,   206,   207,     0,     0,   208,
       0,     0,     0,     0,   209,   210,     0,     0,     0,     0,
     211,     0,   212,     0,     0,     0,   213,     0,   214,   215,
     216,   217,     0,     0,     0,   218,     0,     0,   219,   220,
     221,     0,     0,     0,   222,     0,   223,   224,     0,   225,
     226,   227,     0,     0,   228,   229,     0,   230,   231,   232,
     233,   234,   235,     0,     0,   236,   611,   238,     0,     0,
     239,   240,     0,   241,   242,   243,     0,     0,   244,     0,
       0,     0,   245,     0,   246,     0,   247,     0,   248,   249,
     250,   251,   252,   253,     0,   254,     0,     0,     0,   255,
     256,   257,     0,   258,     0,     0,   259,   260,     0,     0,
       0,   261,   262,   263,   264,     0,     0,   265,   266,   267,
       0,   268,     0,   269,     0,     0,     0,     0,   270,   271,
       0,     0,     0,   272,     0,   273,   274,     0,   275,   276,
       0,     0,     0,   277,     0,     0,   278,   279,   280,     0,
       0,   281,     0,     0,   282,   283,     0,     0,     0,     0,
       0,   284,   285,     0,   286,     0,   287,     0,   288,   289,
       0,     0,     0,     0,     0,     0,     0,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,     0,   306,   307,   308,     0,   309,   310,
     311,   312,     0,   313,   314,     0,     0,     0,     0,   315,
     316,   317,   318,   319,   320,     0,     0,   321,   322,     0,
     323,     0,   324,     0,   325,   326,   327,   328,   329,   330,
     331,   332,   333,     0,     0,   334,   335,     0,     0,   336,
     337,   338,   339,     0,     0,     0,   340,   341,     0,     0,
       0,     0,   342,   343,   344,     0,   345,   346,   347,   348,
       0,   349,   350,     0,     0,     0,     0,     0,     0,     0,
       0,   351,   352,   353,     0,     0,   354,     0,   355,   356,
     612,   358,   359,   360,   361,   362,   363,   364,   365,   366,
       0,     0,   367,   368,   369,     0,   370,     0,   371,   372,
     373,   374,   375,     0,   376,   377,   378,     0,     0,   379,
       0,     0,     0,   380,   381,   382,   383,   384,     0,     0,
     385,   386,   387,   388,   389,     0,   390,   391,     0,   392,
     393,   394,     0,     0,   395,     0,   396,     0,   397,   398,
       0,   399,   400,     0,     0,     0,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,     0,   411,   412,     0,
       0,     0,   413,   414,   415,   416,     0,     0,     0,   417,
       0,     0,     0,   418,     0,   419,   420,   421,   422,   423,
       0,   424,   425,   426,   427,   428,   429,     0,     0,     0,
       0,     0,     0,   430,   431,     0,   432,     0,     0,   433,
       0,     0,   434,   435,   436,     0,     0,   437,   438,     0,
     439,   440,   441,   442,   443,   444,     0,     0,   445,   446,
     447,   448,     0,   449,   450,     0,   451,     0,   452,   453,
     454,   455,     0,     0,   456,   457,     0,   458,   459,   460,
     461,     0,     0,     0,     0,     0,   462,   463,   464,     0,
       0,     0,   465,   466,   467,   468,     0,   469,   470,     0,
     471,   472,     0,   473,   474,     0,     0,   475,     0,     0,
     476,     0,   477,     0,   478,   479,   480,     0,     0,     0,
       0,     0,     0,   481,     0,     0,   482,     0,     0,     0,
     483,   484,   485,   486,   487,   488,     0,     0,     0,     0,
       0,     0,   489,   490,     0,   491,   492,   493,     0,     0,
     494,     0,     0,   139,     0,   140,   141,   142,   143,   144,
       0,     0,   145,     0,     0,     0,   146,     0,     0,   147,
     542,   148,   149,   150,   151,   152,   153,   154,   155,     0,
     156,     0,     0,     0,   157,     0,     0,     0,   158,     0,
       0,   159,   160,   161,     0,   162,     0,   163,   164,     0,
       0,   165,     0,     0,   166,   167,     0,   168,   169,     0,
     170,   171,     0,   172,   173,   174,   175,   176,   177,   178,
       0,   179,   180,   181,   182,   183,   184,   185,     0,   186,
     187,   188,   189,   190,   191,   192,   193,     0,   194,   195,
       0,   196,   197,   198,   199,   200,     0,   201,     0,     0,
     202,     0,     0,   203,     0,     0,     0,   204,     0,     0,
       0,   205,   206,   207,     0,     0,   208,     0,     0,     0,
       0,   209,   210,     0,     0,     0,     0,   211,     0,   212,
       0,     0,     0,   213,     0,   214,   215,   216,   217,     0,
       0,     0,   218,     0,     0,   219,   220,   221,     0,     0,
       0,   222,     0,   223,   224,     0,   225,   226,   227,     0,
       0,   228,   229,     0,   230,   231,   232,   233,   234,   235,
       0,     0,   236,   237,   238,     0,     0,   239,   240,     0,
     241,   242,   243,     0,     0,   244,     0,     0,     0,   245,
       0,   246,     0,   247,     0,   248,   249,   250,   251,   252,
     253,     0,   254,     0,     0,     0,   255,   256,   257,     0,
     258,     0,     0,   259,   260,     0,     0,     0,   261,   262,
     263,   264,     0,     0,   265,   266,   267,     0,   268,     0,
     269,     0,     0,     0,     0,   270,   271,     0,     0,     0,
     272,     0,   273,   274,     0,   275,   276,     0,     0,     0,
     277,     0,     0,   278,   279,   280,     0,     0,   281,     0,
       0,   282,   283,     0,     0,     0,     0,     0,   284,   285,
       0,   286,     0,   287,     0,   288,   289,     0,     0,     0,
       0,     0,     0,     0,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
       0,   306,   307,   308,     0,   309,   310,   311,   312,     0,
     313,   314,     0,     0,     0,     0,   315,   316,   317,   318,
     319,   320,     0,     0,   321,   322,     0,   323,     0,   324,
       0,   325,   326,   327,   328,   329,   330,   331,   332,   333,
       0,     0,   334,   335,     0,     0,   336,   337,   338,   339,
       0,     0,     0,   340,   341,     0,     0,     0,     0,   342,
     343,   344,     0,   345,   346,   347,   348,     0,   349,   350,
       0,     0,     0,     0,     0,     0,     0,     0,   351,   352,
     353,     0,     0,   354,     0,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,     0,     0,   367,
     368,   369,     0,   370,     0,   371,   372,   373,   374,   375,
       0,   376,   377,   378,     0,     0,   379,     0,     0,     0,
     380,   381,   382,   383,   384,     0,     0,   385,   386,   387,
     388,   389,     0,   390,   391,     0,   392,   393,   394,     0,
       0,   395,     0,   396,     0,   397,   398,     0,   399,   400,
       0,     0,     0,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,     0,   411,   412,     0,     0,     0,   413,
     414,   415,   416,     0,     0,     0,   417,     0,     0,     0,
     418,     0,   419,   420,   421,   422,   423,     0,   424,   425,
     426,   427,   428,   429,     0,     0,     0,     0,     0,     0,
     430,   431,     0,   432,     0,     0,   433,     0,     0,   434,
     435,   436,     0,     0,   437,   438,     0,   439,   440,   441,
     442,   443,   444,     0,     0,   445,   446,   447,   448,     0,
     449,   450,     0,   451,     0,   452,   453,   454,   455,     0,
       0,   456,   457,     0,   458,   459,   460,   461,     0,     0,
       0,     0,     0,   462,   463,   464,     0,     0,     0,   465,
     466,   467,   468,     0,   469,   470,     0,   471,   472,     0,
     473,   474,     0,     0,   475,     0,     0,   476,     0,   477,
       0,   478,   479,   480,     0,     0,     0,     0,     0,     0,
     481,     0,     0,   482,     0,     0,     0,   483,   484,   485,
     486,   487,   488,     0,     0,     0,     0,     0,     0,   489,
     490,     0,   491,   492,   493,     0,     0,   494,     0,     0,
     139,     0,   140,   141,   142,   143,   144,     0,     0,   145,
       0,     0,     0,   146,     0,     0,   147,   783,   148,   149,
     150,   151,   152,   153,   154,   155,     0,   156,     0,     0,
       0,   157,     0,     0,     0,   158,     0,     0,   159,   160,
     161,     0,   162,     0,   163,   164,     0,     0,   165,     0,
       0,   166,   167,     0,   168,   169,     0,   170,   171,     0,
     172,   173,   174,   175,   176,   177,   178,     0,   179,   180,
     181,   182,   183,   184,   185,     0,   186,   187,   188,   189,
     190,   191,   192,   193,     0,   194,   195,     0,   196,   197,
     198,   199,   200,     0,   201,     0,     0,   202,     0,     0,
     203,     0,     0,     0,   204,     0,     0,     0,   205,   206,
     207,     0,     0,   208,     0,     0,     0,     0,   209,   210,
       0,     0,     0,     0,   211,     0,   212,     0,     0,     0,
     213,     0,   214,   215,   216,   217,     0,     0,     0,   218,
       0,     0,   219,   220,   221,     0,     0,     0,   222,     0,
     223,   224,     0,   225,   226,   227,     0,     0,   228,   229,
       0,   230,   231,   232,   233,   234,   235,     0,     0,   236,
     237,   238,     0,     0,   239,   240,     0,   241,   242,   243,
       0,     0,   244,     0,     0,     0,   245,     0,   246,     0,
     247,     0,   248,   249,   250,   251,   252,   253,     0,   254,
       0,     0,     0,   255,   256,   257,     0,   258,     0,     0,
     259,   260,     0,     0,     0,   261,   262,   263,   264,     0,
       0,   265,   266,   267,     0,   268,     0,   269,     0,     0,
       0,     0,   270,   271,     0,     0,     0,   272,     0,   273,
     274,     0,   275,   276,     0,     0,     0,   277,     0,     0,
     278,   279,   280,     0,     0,   281,     0,     0,   282,   283,
       0,     0,     0,     0,     0,   284,   285,     0,   286,     0,
     287,     0,   288,   289,     0,     0,     0,     0,     0,     0,
       0,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,     0,   306,   307,
     308,     0,   309,   310,   311,   312,     0,   313,   314,     0,
       0,     0,     0,   315,   316,   317,   318,   319,   320,     0,
       0,   321,   322,     0,   323,     0,   324,     0,   325,   326,
     327,   328,   329,   330,   331,   332,   333,     0,     0,   334,
     335,     0,     0,   336,   337,   338,   339,     0,     0,     0,
     340,   341,     0,     0,     0,     0,   342,   343,   344,     0,
     345,   346,   347,   348,     0,   349,   350,     0,     0,     0,
       0,     0,     0,     0,     0,   351,   352,   353,     0,     0,
     354,     0,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,     0,     0,   367,   368,   369,     0,
     370,     0,   371,   372,   373,   374,   375,     0,   376,   377,
     378,     0,     0,   379,     0,     0,     0,   380,   381,   382,
     383,   384,     0,     0,   385,   386,   387,   388,   389,     0,
     390,   391,     0,   392,   393,   394,     0,     0,   395,     0,
     396,     0,   397,   398,     0,   399,   400,     0,     0,     0,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
       0,   411,   412,     0,     0,     0,   413,   414,   415,   416,
       0,     0,     0,   417,     0,     0,     0,   418,     0,   419,
     420,   421,   422,   423,     0,   424,   425,   426,   427,   428,
     429,     0,     0,     0,     0,     0,     0,   430,   431,     0,
     432,     0,     0,   433,     0,     0,   434,   435,   436,     0,
       0,   437,   438,     0,   439,   440,   441,   442,   443,   444,
       0,     0,   445,   446,   447,   448,     0,   449,   450,     0,
     451,     0,   452,   453,   454,   455,     0,     0,   456,   457,
       0,   458,   459,   460,   461,     0,     0,     0,     0,     0,
     462,   463,   464,     0,     0,     0,   465,   466,   467,   468,
       0,   469,   470,     0,   471,   472,     0,   473,   474,     0,
       0,   475,     0,     0,   476,     0,   477,     0,   478,   479,
     480,     0,     0,     0,     0,     0,     0,   481,     0,     0,
     482,     0,     0,     0,   483,   484,   485,   486,   487,   488,
       0,     0,     0,     0,     0,     0,   489,   490,     0,   491,
     492,   493,     0,     0,   494,     0,     0,   139,     0,   140,
     141,   142,   143,   144,     0,     0,   145,     0,     0,     0,
     146,     0,     0,   147,  2590,   148,   149,   150,   151,   152,
     153,   154,   155,     0,   156,     0,     0,     0,   157,     0,
       0,     0,   158,     0,     0,   159,   160,   161,     0,   162,
       0,   163,   164,     0,     0,   165,     0,     0,   166,   167,
       0,   168,   915,   916,   170,   171,     0,   172,   173,   174,
     175,   176,   177,   178,     0,   179,   180,   181,   182,   183,
     184,   185,     0,   186,   187,   188,   189,   190,   191,   192,
     193,     0,   194,   195,     0,   196,   197,   198,   199,   200,
       0,   201,     0,     0,   202,     0,     0,   203,     0,     0,
       0,   204,     0,     0,     0,   205,   206,   207,     0,     0,
     208,     0,     0,     0,     0,   209,   210,     0,     0,     0,
     917,   211,     0,   212,     0,     0,     0,   213,     0,   214,
     215,   216,   217,     0,     0,     0,   218,     0,     0,   219,
     220,   221,     0,     0,     0,   222,     0,   223,   224,     0,
     225,   226,   227,     0,     0,   228,   229,     0,   230,   231,
     232,   233,   234,   235,     0,     0,   236,   237,   238,     0,
       0,   239,   240,     0,   241,   242,   243,     0,     0,   244,
       0,     0,     0,   245,     0,   246,     0,   247,     0,   248,
     249,   250,   251,   252,   918,     0,   254,     0,     0,     0,
     255,   256,   257,     0,   258,     0,     0,   259,   260,     0,
       0,     0,   261,   262,   263,   264,     0,     0,   265,   266,
     267,     0,   268,     0,   269,     0,     0,     0,     0,   270,
     271,     0,     0,     0,   272,     0,   273,   274,     0,   275,
     276,     0,     0,     0,   277,     0,     0,   278,   279,   280,
       0,     0,   281,     0,     0,   282,   283,     0,     0,     0,
       0,     0,   284,   285,     0,   919,     0,   287,     0,   288,
     289,     0,     0,     0,     0,     0,     0,     0,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,     0,   306,   307,   308,     0,   309,
     310,   311,   312,     0,   313,   314,     0,     0,     0,     0,
     315,   316,   317,   318,   319,   320,     0,     0,   321,   322,
       0,   323,     0,   324,     0,   325,   326,   327,   328,   329,
     330,   920,   332,   333,     0,     0,   334,   335,     0,     0,
     336,   337,   338,   339,     0,     0,     0,   340,   341,     0,
       0,     0,     0,   342,   343,   344,     0,   345,   346,   347,
     348,     0,   349,   350,     0,     0,     0,     0,     0,     0,
       0,     0,   351,   352,   353,     0,     0,   354,     0,   355,
     356,   357,   358,   921,   360,   361,   362,   363,   364,   365,
     366,     0,     0,   367,   368,   369,     0,   370,     0,   371,
     372,   373,   374,   375,     0,   376,   377,   378,     0,     0,
     379,     0,     0,     0,   380,   381,   382,   383,   384,     0,
       0,   385,   386,   387,   388,   389,     0,   390,   391,     0,
     392,   393,   394,     0,     0,   395,     0,   396,     0,   397,
     398,     0,   399,   400,     0,     0,     0,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,     0,   411,   412,
       0,     0,     0,   413,   414,   922,   416,     0,     0,     0,
     417,     0,     0,     0,   418,     0,   419,   420,   421,   422,
     423,     0,   424,   425,   426,   427,   428,   429,     0,     0,
       0,     0,     0,     0,   430,   431,     0,   432,     0,     0,
     433,     0,     0,   434,   435,   436,     0,     0,   437,   438,
       0,   439,   440,   441,   442,   443,   444,     0,     0,   445,
     446,   447,   448,     0,   449,   450,     0,   451,     0,   452,
     453,   454,   455,     0,     0,   456,   457,     0,   458,   459,
     460,   461,     0,     0,     0,     0,     0,   923,   463,   464,
       0,     0,     0,   465,   466,   467,   468,     0,   469,   470,
       0,   471,   472,     0,   473,   474,     0,     0,   475,     0,
       0,   476,     0,   477,     0,   478,   479,   480,     0,     0,
       0,     0,     0,     0,   481,     0,     0,   482,     0,     0,
       0,   483,   484,   485,   486,   487,   488,     0,     0,     0,
       0,     0,     0,   489,   490,     0,   491,   492,   493,     0,
       0,   494,     0,   139,     0,   140,   141,   142,   143,   144,
       0,     0,   145,     0,     0,     0,   146,     0,     0,   147,
     924,   148,   149,   150,   151,   152,   153,   154,   155,     0,
     156,     0,     0,     0,   157,     0,     0,     0,   158,     0,
       0,   159,   160,   161,     0,   162,     0,   163,   164,     0,
       0,   165,     0,     0,   166,   167,     0,   168,   169,     0,
     170,   171,     0,   172,   173,   174,   175,   176,   177,   178,
       0,   179,   180,   181,   182,   183,   184,   185,     0,   186,
     187,   188,   189,   190,   191,   192,   193,     0,   194,   195,
       0,   196,   197,   198,   199,   200,     0,   201,     0,     0,
     202,     0,     0,   203,     0,     0,     0,   204,     0,     0,
       0,   205,   206,   207,     0,     0,   208,     0,     0,     0,
       0,   209,   210,     0,     0,     0,     0,   211,     0,   212,
       0,     0,     0,   213,     0,   214,   215,   216,   217,     0,
       0,     0,   218,     0,     0,   219,   220,   221,     0,     0,
       0,   222,     0,   223,   224,     0,   225,   226,   227,     0,
       0,   228,   229,     0,   230,   231,   232,   233,   234,   235,
       0,     0,   236,   237,   238,     0,     0,   239,   240,     0,
     241,   242,   243,     0,     0,   244,     0,     0,     0,   245,
       0,   246,     0,   247,     0,   248,   249,   250,   251,   252,
     253,     0,   254,     0,     0,     0,   255,   256,   257,     0,
     258,     0,     0,   259,   260,     0,     0,     0,   261,   262,
     263,   264,     0,     0,   265,   266,   267,     0,   268,     0,
     269,     0,     0,     0,     0,   270,   271,     0,     0,     0,
     272,     0,   273,   274,     0,   275,   276,     0,     0,     0,
     277,     0,     0,   278,   279,   280,     0,     0,   281,     0,
       0,   282,   283,   623,     0,     0,     0,     0,   284,   285,
       0,   286,     0,   287,     0,   288,   289,     0,     0,     0,
       0,     0,     0,     0,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
       0,   306,   307,   308,     0,   309,   310,   311,   312,     0,
     313,   314,     0,     0,     0,     0,   315,   316,   317,   318,
     319,   320,     0,     0,   321,   322,     0,   323,     0,   324,
       0,   325,   326,   327,   328,   329,   330,   331,   332,   333,
       0,     0,   334,   335,     0,     0,   336,   337,   338,   339,
       0,     0,     0,   340,   341,     0,     0,     0,     0,   342,
     343,   344,     0,   345,   346,   347,   348,     0,   349,   350,
       0,     0,     0,     0,     0,     0,     0,     0,   351,   352,
     353,     0,     0,   354,     0,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,     0,     0,   367,
     368,   369,     0,   370,     0,   371,   372,   373,   374,   375,
       0,   376,   377,   378,     0,     0,   379,     0,     0,     0,
     380,   381,   382,   383,   384,     0,     0,   385,   386,   387,
     388,   389,     0,   390,   391,     0,   392,   393,   394,     0,
       0,   395,     0,   396,     0,   397,   398,     0,   399,   400,
       0,     0,     0,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,     0,   411,   412,     0,     0,     0,   413,
     414,   415,   416,     0,     0,     0,   417,     0,     0,     0,
     418,     0,   419,   420,   421,   422,   423,     0,   424,   425,
     426,   427,   428,   429,     0,     0,     0,     0,     0,     0,
     430,   431,     0,   432,     0,     0,   433,     0,     0,   434,
     435,   436,     0,     0,   437,   438,     0,   439,   440,   441,
     442,   443,   444,     0,     0,   445,   446,   447,   448,     0,
     449,   450,     0,   451,     0,   452,   453,   454,   455,     0,
     136,   456,   457,     0,   458,   459,   460,   461,     0,     0,
       0,     0,     0,   462,   463,   464,     0,     0,     0,   465,
     466,   467,   468,     0,   469,   470,     0,   471,   472,     0,
     473,   474,     0,     0,   475,     0,     0,   476,     0,   477,
       0,   478,   479,   480,     0,     0,     0,     0,     0,     0,
     481,     0,     0,   482,     0,     0,     0,   483,   484,   485,
     486,   487,   488,     0,     0,     0,     0,     0,     0,   489,
     490,     0,   491,   492,   493,     0,     0,   494,     0,   139,
       0,   140,   141,   142,   143,   144,     0,     0,   145,     0,
       0,     0,   146,     0,     0,   147,  1397,   148,   149,   150,
     151,   152,   153,   154,   155,     0,   156,     0,     0,     0,
     157,     0,     0,     0,   158,     0,     0,   159,   160,   161,
       0,   162,     0,   163,   164,     0,     0,   165,     0,     0,
     166,   167,     0,   168,   169,     0,   170,   171,     0,   172,
     173,   174,   175,   176,   177,   178,     0,   179,   180,   181,
     182,   183,   184,   185,     0,   186,   187,   188,   189,   190,
     191,   192,   193,     0,   194,   195,     0,   196,   197,   198,
     199,   200,     0,   201,     0,     0,   202,     0,     0,   203,
       0,     0,     0,   204,     0,     0,     0,   205,   206,   207,
       0,     0,   208,     0,     0,     0,     0,   209,   210,     0,
       0,     0,     0,   211,     0,   212,     0,     0,     0,   213,
       0,   214,   215,   216,   217,     0,     0,     0,   218,     0,
       0,   219,   220,   221,     0,     0,     0,   222,     0,   223,
     224,     0,   225,   226,   227,     0,     0,   228,   229,     0,
     230,   231,   232,   233,   234,   235,     0,     0,   236,   237,
     238,     0,     0,   239,   240,     0,   241,   242,   243,     0,
       0,   244,     0,     0,     0,   245,     0,   246,     0,   247,
       0,   248,   249,   250,   251,   252,   253,     0,   254,     0,
       0,     0,   255,   256,   257,     0,   258,     0,     0,   259,
     260,     0,     0,     0,   261,   262,   263,   264,     0,     0,
     265,   266,   267,     0,   268,     0,   269,     0,     0,     0,
       0,   270,   271,     0,     0,     0,   272,     0,   273,   274,
       0,   275,   276,     0,     0,     0,   277,     0,     0,   278,
     279,   280,     0,     0,   281,     0,     0,   282,   283,   623,
       0,     0,     0,     0,   284,   285,     0,   286,     0,   287,
       0,   288,   289,     0,     0,     0,     0,     0,     0,     0,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,     0,   306,   307,   308,
       0,   309,   310,   311,   312,     0,   313,   314,     0,     0,
       0,     0,   315,   316,   317,   318,   319,   320,     0,     0,
     321,   322,     0,   323,     0,   324,     0,   325,   326,   327,
     328,   329,   330,   331,   332,   333,     0,     0,   334,   335,
       0,     0,   336,   337,   338,   339,     0,     0,     0,   340,
     341,     0,     0,     0,     0,   342,   343,   344,     0,   345,
     346,   347,   348,     0,   349,   350,     0,     0,     0,     0,
       0,     0,     0,     0,   351,   352,   353,     0,     0,   354,
       0,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,     0,     0,   367,   368,   369,     0,   370,
       0,   371,   372,   373,   374,   375,     0,   376,   377,   378,
       0,     0,   379,     0,     0,     0,   380,   381,   382,   383,
     384,     0,     0,   385,   386,   387,   388,   389,     0,   390,
     391,     0,   392,   393,   394,     0,     0,   395,     0,   396,
       0,   397,   398,     0,   399,   400,     0,     0,     0,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,     0,
     411,   412,     0,     0,     0,   413,   414,   415,   416,     0,
       0,     0,   417,     0,     0,     0,   418,     0,   419,   420,
     421,   422,   423,     0,   424,   425,   426,   427,   428,   429,
       0,     0,     0,     0,     0,     0,   430,   431,     0,   432,
       0,     0,   433,     0,     0,   434,   435,   436,     0,     0,
     437,   438,     0,   439,   440,   441,   442,   443,   444,     0,
       0,   445,   446,   447,   448,     0,   449,   450,     0,   451,
       0,   452,   453,   454,   455,     0,   136,   456,   457,     0,
     458,   459,   460,   461,     0,     0,     0,     0,     0,   462,
     463,   464,     0,     0,     0,   465,   466,   467,   468,     0,
     469,   470,     0,   471,   472,     0,   473,   474,     0,     0,
     475,     0,     0,   476,     0,   477,     0,   478,   479,   480,
       0,     0,     0,     0,     0,     0,   481,     0,     0,   482,
       0,     0,     0,   483,   484,   485,   486,   487,   488,     0,
       0,     0,     0,     0,     0,   489,   490,     0,   491,   492,
     493,     0,     0,   494,     0,   139,     0,   140,   141,   142,
     143,   144,     0,     0,   145,     0,     0,     0,   146,     0,
       0,   147,  1721,   148,   149,   150,   151,   152,   153,   154,
     155,     0,   156,     0,     0,     0,   157,     0,     0,     0,
     158,     0,     0,   159,   160,   161,     0,   162,     0,   163,
     164,     0,     0,   165,     0,     0,   166,   167,     0,   168,
     915,   916,   170,   171,     0,   172,   173,   174,   175,   176,
     177,   178,     0,   179,   180,   181,   182,   183,   184,   185,
       0,   186,   187,   188,   189,   190,   191,   192,   193,     0,
     194,   195,     0,   196,   197,   198,   199,   200,     0,   201,
       0,     0,   202,     0,     0,   203,     0,     0,     0,   204,
       0,     0,     0,   205,   206,   207,     0,     0,   208,     0,
       0,     0,     0,   209,   210,     0,     0,     0,   917,   211,
       0,   212,     0,     0,     0,   213,     0,   214,   215,   216,
     217,     0,     0,     0,   218,     0,     0,   219,   220,   221,
       0,     0,     0,   222,     0,   223,   224,     0,   225,   226,
     227,     0,     0,   228,   229,     0,   230,   231,   232,   233,
     234,   235,     0,     0,   236,   237,   238,     0,     0,   239,
     240,     0,   241,   242,   243,     0,     0,   244,     0,     0,
       0,   245,     0,   246,     0,   247,     0,   248,   249,   250,
     251,   252,   918,     0,   254,     0,     0,     0,   255,   256,
     257,     0,   258,     0,     0,   259,   260,     0,     0,     0,
     261,   262,   263,   264,     0,     0,   265,   266,   267,     0,
     268,     0,   269,     0,     0,     0,     0,   270,   271,     0,
       0,     0,   272,     0,   273,   274,     0,   275,   276,     0,
       0,     0,   277,     0,     0,   278,   279,   280,     0,     0,
     281,     0,     0,   282,   283,     0,     0,     0,     0,     0,
     284,   285,     0,   919,     0,   287,     0,   288,   289,     0,
       0,     0,     0,     0,     0,     0,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,     0,   306,   307,   308,     0,   309,   310,   311,
     312,     0,   313,   314,     0,     0,     0,     0,   315,   316,
     317,   318,   319,   320,     0,     0,   321,   322,     0,   323,
       0,   324,     0,   325,   326,   327,   328,   329,   330,   920,
     332,   333,     0,     0,   334,   335,     0,     0,   336,   337,
     338,   339,     0,     0,     0,   340,   341,     0,     0,     0,
       0,   342,   343,   344,     0,   345,   346,   347,   348,     0,
     349,   350,     0,     0,     0,     0,     0,     0,     0,     0,
     351,   352,   353,     0,     0,   354,     0,   355,   356,   357,
     358,   921,   360,   361,   362,   363,   364,   365,   366,     0,
       0,   367,   368,   369,     0,   370,     0,   371,   372,   373,
     374,   375,     0,   376,   377,   378,     0,     0,   379,     0,
       0,     0,   380,   381,   382,   383,   384,     0,     0,   385,
     386,   387,   388,   389,     0,   390,   391,     0,   392,   393,
     394,     0,     0,   395,     0,   396,     0,   397,   398,     0,
     399,   400,     0,     0,     0,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,     0,   411,   412,     0,     0,
       0,   413,   414,   922,   416,     0,     0,     0,   417,     0,
       0,     0,   418,     0,   419,   420,   421,   422,   423,     0,
     424,   425,   426,   427,   428,   429,     0,     0,     0,     0,
       0,     0,   430,   431,     0,   432,     0,     0,   433,     0,
       0,   434,   435,   436,     0,     0,   437,   438,     0,   439,
     440,   441,   442,   443,   444,     0,     0,   445,   446,   447,
     448,     0,   449,   450,     0,   451,     0,   452,   453,   454,
     455,     0,     0,   456,   457,     0,   458,   459,   460,   461,
       0,     0,     0,     0,     0,   462,   463,   464,     0,     0,
       0,   465,   466,   467,   468,     0,   469,   470,     0,   471,
     472,     0,   473,   474,     0,     0,   475,     0,     0,   476,
       0,   477,     0,   478,   479,   480,     0,     0,     0,     0,
       0,     0,   481,     0,     0,   482,     0,     0,     0,   483,
     484,   485,   486,   487,   488,     0,     0,     0,     0,     0,
       0,   489,   490,     0,   491,   492,   493,     0,     0,   494,
       0,   139,     0,   140,   141,   142,   143,   144,     0,     0,
     145,     0,     0,     0,   146,     0,     0,   147,   924,   148,
     149,   150,   151,   152,   153,   154,   155,     0,   156,     0,
       0,     0,   157,     0,     0,     0,   158,     0,     0,   159,
     160,   161,     0,   162,     0,   163,   164,     0,     0,   165,
       0,     0,   166,   167,     0,   168,   169,     0,   170,   171,
       0,   172,   173,   174,   175,   176,   177,   178,     0,   179,
     180,   181,   182,   183,   184,   185,     0,   186,   187,   188,
     189,   190,   191,   192,   193,     0,   194,   195,     0,   196,
     197,   198,   199,   200,     0,   201,     0,     0,   202,     0,
       0,   203,     0,     0,     0,   204,     0,     0,     0,   205,
     206,   207,     0,     0,   208,     0,     0,     0,     0,   209,
     210,     0,     0,     0,     0,   211,     0,   212,     0,     0,
       0,   213,     0,   214,   215,   216,   217,     0,     0,     0,
     218,     0,     0,   219,   220,   221,     0,     0,     0,   222,
       0,   223,   224,     0,   225,   226,   227,     0,     0,   228,
     229,     0,   230,   231,   232,   233,   234,   235,     0,     0,
     236,   237,   238,     0,     0,   239,   240,     0,   241,   242,
     243,     0,     0,   244,     0,     0,     0,   245,     0,   246,
       0,   247,     0,   248,   249,   250,   251,   252,   253,     0,
     254,     0,     0,     0,   255,   256,   257,     0,   258,     0,
       0,   259,   260,     0,     0,     0,   261,   262,   263,   264,
       0,     0,   265,   266,   267,     0,   268,     0,   269,     0,
       0,     0,     0,   270,   271,     0,     0,     0,   272,     0,
     273,   274,     0,   275,   276,     0,     0,     0,   277,     0,
       0,   278,   279,   280,     0,     0,   281,     0,     0,   282,
     283,   623,     0,     0,     0,     0,   284,   285,     0,   286,
       0,   287,     0,   288,   289,     0,     0,     0,     0,     0,
       0,     0,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,     0,   306,
     307,   308,     0,   309,   310,   311,   312,     0,   313,   314,
       0,     0,     0,     0,   315,   316,   317,   318,   319,   320,
       0,     0,   321,   322,     0,   323,     0,   324,     0,   325,
     326,   327,   328,   329,   330,   331,   332,   333,     0,     0,
     334,   335,     0,     0,   336,   337,   338,   339,     0,     0,
       0,   340,   341,     0,     0,     0,     0,   342,   343,   344,
       0,   345,   346,   347,   348,     0,   349,   350,     0,     0,
       0,     0,     0,     0,     0,     0,   351,   352,   353,     0,
       0,   354,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,     0,     0,   367,   368,   369,
       0,   370,     0,   371,   372,   373,   374,   375,     0,   376,
     377,   378,     0,     0,   379,     0,     0,     0,   380,   381,
     382,   383,   384,     0,     0,   385,   386,   387,   388,   389,
       0,   390,   391,     0,   392,   393,   394,     0,     0,   395,
       0,   396,     0,   397,   398,     0,   399,   400,     0,     0,
       0,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,     0,   411,   412,     0,     0,     0,   413,   414,   415,
     416,     0,     0,     0,   417,     0,     0,     0,   418,     0,
     419,   420,   421,   422,   423,     0,   424,   425,   426,   427,
     428,   429,     0,     0,     0,     0,     0,     0,   430,   431,
       0,   432,     0,     0,   433,     0,     0,   434,   435,   436,
       0,     0,   437,   438,     0,   439,   440,   441,   442,   443,
     444,     0,     0,   445,   446,   447,   448,     0,   449,   450,
       0,   451,     0,   452,   453,   454,   455,     0,   136,   456,
     457,     0,   458,   459,   460,   461,     0,     0,     0,     0,
       0,   462,   463,   464,     0,     0,     0,   465,   466,   467,
     468,     0,   469,   470,     0,   471,   472,     0,   473,   474,
       0,     0,   475,     0,     0,   476,     0,   477,     0,   478,
     479,   480,     0,     0,     0,     0,     0,     0,   481,     0,
       0,   482,     0,     0,     0,   483,   484,   485,   486,   487,
     488,     0,     0,     0,     0,     0,     0,   489,   490,     0,
     491,   492,   493,     0,     0,   494,     0,   139,     0,   140,
     141,   142,   143,   144,     0,     0,   145,     0,     0,     0,
     146,     0,     0,     0,  3539,   148,   149,   150,   151,   152,
     153,   154,     0,     0,  -335,     0,     0,     0,   157,     0,
       0,     0,   158,     0,     0,   159,   160,   161,     0,   162,
       0,     0,     0,     0,     0,   165,  3971,     0,   166,   167,
       0,   168,     0,     0,     0,     0,     0,   172,   173,   174,
     175,  3972,   177,   178,     0,   179,   180,     0,     0,     0,
       0,     0,     0,   186,     0,   188,     0,   190,   191,   192,
     193,     0,   194,   195,     0,   196,   197,   198,     0,   200,
       0,   201,     0,     0,   202,     0,     0,   203,     0,     0,
       0,   204,     0,     0,     0,   205,   206,   207,     0,     0,
     208,     0,     0,     0,     0,   209,     0,     0,     0,     0,
       0,   211,     0,   212,     0,     0,     0,   213,     0,   214,
     215,   216,   217,     0,     0,     0,     0,     0,     0,   219,
     220,   221,     0,     0,     0,   222,     0,     0,   224,     0,
     225,   226,   227,     0,     0,   228,   229,     0,   230,   231,
     232,   233,     0,     0,     0,     0,   236,   237,   238,     0,
       0,   239,   240,  3973,   241,   242,   243,     0,     0,     0,
       0,     0,     0,   245,     0,   246,     0,   247,     0,   248,
     249,   250,   251,   252,   253,     0,   254,     0,     0,     0,
       0,   256,   257,     0,     0,     0,     0,     0,   260,     0,
       0,     0,   261,   262,   263,   264,  3974,     0,   265,   266,
     267,     0,   268,     0,   269,     0,     0,     0,     0,   270,
       0,     0,     0,     0,   272,     0,   273,   274,     0,   275,
     276,  3975,     0,     0,   277,     0,     0,     0,   279,   280,
       0,     0,   281,  3976,     0,   282,   283,     0,     0,     0,
       0,     0,   284,   285,     0,   286,     0,   287,     0,   288,
     289,     0,     0,     0,     0,  -290,     0,     0,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,     0,   306,   307,   308,     0,   309,
     310,   311,   312,     0,   313,   314,     0,     0,     0,     0,
     315,   316,   317,   318,   319,   320,     0,     0,   321,   322,
       0,   323,     0,   324,     0,   325,   326,   327,   328,   329,
     330,   331,   332,   333,     0,     0,   334,   335,     0,     0,
     336,   337,   338,   339,     0,     0,     0,     0,   341,     0,
       0,     0,     0,   342,   343,   344,     0,   345,   346,   347,
    3977,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   352,   353,     0,     0,     0,     0,   355,
     356,   357,     0,   359,   360,   361,   362,   363,   364,   365,
       0,     0,     0,     0,   368,   369,     0,   370,     0,   371,
     372,   373,   374,   375,     0,   376,   377,   378,     0,     0,
     379,     0,     0,     0,   380,   381,   382,   383,   384,     0,
       0,   385,   386,   387,   388,   389,     0,   390,     0,     0,
     392,     0,   394,  -290,     0,   395,     0,     0,     0,   397,
       0,     0,   399,   400,  3978,     0,     0,     0,   402,   403,
     404,   405,   406,   407,     0,   409,   410,     0,   411,     0,
       0,     0,     0,   413,   414,   415,     0,     0,     0,     0,
     417,     0,     0,     0,   418,     0,     0,   420,     0,     0,
     423,     0,   424,     0,   426,     0,   428,   429,     0,     0,
       0,     0,     0,     0,   430,   431,     0,   432,     0,     0,
     433,     0,     0,   434,     0,   436,     0,     0,     0,   438,
       0,   439,   440,   441,   442,   443,   444,     0,     0,   445,
     446,   447,   448,     0,   449,   450,     0,   451,     0,   452,
     453,   454,   455,     0,     0,   456,   457,     0,   458,   459,
     460,   461,     0,     0,     0,     0,     0,   462,   463,   464,
       0,     0,     0,     0,   466,   467,   468,     0,   469,   470,
       0,   471,   472,     0,     0,     0,     0,     0,   475,     0,
       0,   476,     0,     0,     0,   478,   479,   480,     0,     0,
       0,     0,     0,     0,   481,     0,     0,   482,     0,     0,
       0,   483,   484,   485,   486,   487,   488,     0,     0,  -290,
       0,     0,     0,   489,     0,     0,   491,     0,   493,     0,
     139,   494,   140,   141,   142,   143,   144,     0,     0,   145,
       0,     0,     0,   146,     0,  4536,   147,     0,   148,   149,
     150,   151,   152,   153,   154,   155,     0,   156,     0,     0,
       0,   157,     0,     0,     0,   158,     0,     0,   159,   160,
     161,     0,   162,     0,   163,   164,     0,     0,   165,     0,
       0,   166,   167,     0,   168,   169,     0,   170,   171,     0,
     172,   173,   174,   175,   176,   177,   178,     0,   179,   180,
     181,   182,   183,   184,   185,     0,   186,   187,   188,   189,
     190,   191,   192,   193,     0,   194,   195,     0,   196,   197,
     198,   199,   200,     0,   201,     0,     0,   202,     0,     0,
     203,     0,  1015,     0,   204,     0,     0,     0,   205,   206,
     207,     0,     0,   208,     0,     0,     0,     0,   209,   210,
       0,     0,     0,     0,   211,     0,   212,     0,     0,     0,
     213,     0,   214,   215,   216,   217,     0,     0,     0,   218,
       0,     0,   219,   220,   221,     0,     0,     0,   222,     0,
     223,   224,     0,   225,   226,   227,     0,     0,   228,   229,
       0,   230,   231,   232,   233,   234,   235,     0,     0,   236,
     237,   238,     0,     0,   239,   240,     0,   241,   242,   243,
       0,     0,   244,     0,     0,     0,   245,     0,   246,     0,
     247,     0,   248,   249,   250,   251,   252,   253,     0,   254,
       0,     0,     0,   255,   256,   257,     0,   258,     0,     0,
     259,   260,     0,     0,     0,   261,   262,   263,   264,     0,
       0,   265,   266,   267,     0,   268,     0,   269,     0,     0,
       0,     0,   270,   271,     0,     0,     0,   272,     0,   273,
     274,     0,   275,   276,     0,     0,     0,   277,     0,     0,
     278,   279,   280,     0,     0,   281,     0,     0,   282,   283,
     623,     0,     0,     0,     0,   284,   285,     0,   286,     0,
     287,     0,   288,   289,     0,     0,     0,     0,     0,     0,
       0,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,     0,   306,   307,
     308,     0,   309,   310,   311,   312,     0,   313,   314,     0,
       0,     0,     0,   315,   316,   317,   318,   319,   320,     0,
       0,   321,   322,     0,   323,     0,   324,     0,   325,   326,
     327,   328,   329,   330,   331,   332,   333,     0,     0,   334,
     335,     0,     0,   336,   337,   338,   339,     0,     0,     0,
     340,   341,     0,     0,     0,     0,   342,   343,   344,     0,
     345,   346,   347,   348,     0,   349,   350,     0,     0,     0,
       0,     0,     0,     0,     0,   351,   352,   353,     0,     0,
     354,     0,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,     0,     0,   367,   368,   369,     0,
     370,     0,   371,   372,   373,   374,   375,     0,   376,   377,
     378,     0,     0,   379,     0,     0,     0,   380,   381,   382,
     383,   384,     0,     0,   385,   386,   387,   388,   389,     0,
     390,   391,     0,   392,   393,   394,     0,     0,   395,     0,
     396,     0,   397,   398,     0,   399,   400,     0,     0,     0,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
       0,   411,   412,     0,     0,     0,   413,   414,   415,   416,
       0,     0,     0,   417,     0,     0,     0,   418,     0,   419,
     420,   421,   422,   423,     0,   424,   425,   426,   427,   428,
     429,     0,     0,     0,     0,     0,     0,   430,   431,     0,
     432,     0,     0,   433,     0,     0,   434,   435,   436,     0,
       0,   437,   438,     0,   439,   440,   441,   442,   443,   444,
       0,     0,   445,   446,   447,   448,     0,   449,   450,     0,
     451,     0,   452,   453,   454,   455,     0,   136,   456,   457,
       0,   458,   459,   460,   461,     0,     0,     0,     0,     0,
     462,   463,   464,     0,     0,     0,   465,   466,   467,   468,
       0,   469,   470,     0,   471,   472,     0,   473,   474,     0,
       0,   475,     0,     0,   476,     0,   477,     0,   478,   479,
     480,     0,     0,     0,     0,     0,     0,   481,     0,     0,
     482,     0,     0,     0,   483,   484,   485,   486,   487,   488,
       0,     0,     0,     0,     0,     0,   489,   490,     0,   491,
     492,   493,     0,     0,   494,   139,     0,   140,   141,   142,
     143,   144,     0,     0,   145,     0,  1191,     0,   146,     0,
       0,   147,     0,   148,   149,   150,   151,   152,   153,   154,
     155,     0,   156,     0,     0,     0,   157,     0,     0,     0,
     158,     0,     0,   159,   160,   161,     0,   162,     0,   163,
     164,     0,     0,   165,     0,     0,   166,   167,     0,   168,
     169,     0,   170,   171,     0,   172,   173,   174,   175,   176,
     177,   178,     0,   179,   180,   181,   182,   183,   184,   185,
       0,   186,   187,   188,   189,   190,   191,   192,   193,     0,
     194,   195,     0,   196,   197,   198,   199,   200,     0,   201,
       0,     0,   202,     0,     0,   203,     0,     0,     0,   204,
       0,     0,     0,   205,   206,   207,     0,     0,   208,     0,
       0,     0,     0,   209,   210,     0,     0,     0,     0,   211,
       0,   212,     0,     0,     0,   213,     0,   214,   215,   216,
     217,     0,     0,     0,   218,     0,     0,   219,   220,   221,
       0,     0,     0,   222,     0,   223,   224,     0,   225,   226,
     227,     0,     0,   228,   229,     0,   230,   231,   232,   233,
     234,   235,     0,     0,   236,   237,   238,     0,     0,   239,
     240,     0,   241,   242,   243,     0,     0,   244,     0,     0,
       0,   245,     0,   246,     0,   247,     0,   248,   249,   250,
     251,   252,   253,     0,   254,     0,     0,     0,   255,   256,
     257,     0,   258,     0,     0,   259,   260,     0,     0,     0,
     261,   262,   263,   264,     0,     0,   265,   266,   267,     0,
     268,     0,   269,     0,     0,     0,     0,   270,   271,     0,
       0,     0,   272,     0,   273,   274,     0,   275,   276,     0,
       0,     0,   277,     0,     0,   278,   279,   280,     0,     0,
     281,     0,     0,   282,   283,     0,     0,     0,     0,     0,
     284,   285,     0,   286,     0,   287,     0,   288,   289,     0,
       0,     0,     0,     0,     0,     0,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,     0,   306,   307,   308,     0,   309,   310,   311,
     312,     0,   313,   314,     0,     0,     0,     0,   315,   316,
     317,   318,   319,   320,     0,     0,   321,   322,     0,   323,
       0,   324,     0,   325,   326,   327,   328,   329,   330,   331,
     332,   333,     0,     0,   334,   335,     0,     0,   336,   337,
     338,   339,     0,     0,     0,   340,   341,     0,     0,     0,
       0,   342,   343,   344,     0,   345,   346,   347,   348,     0,
     349,   350,     0,     0,     0,     0,     0,     0,     0,     0,
     351,   352,   353,     0,     0,   354,     0,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,     0,
       0,   367,   368,   369,     0,   370,     0,   371,   372,   373,
     374,   375,     0,   376,   377,   378,     0,     0,   379,     0,
       0,     0,   380,   381,   382,   383,   384,     0,     0,   385,
     386,   387,   388,   389,     0,   390,   391,     0,   392,   393,
     394,     0,     0,   395,     0,   396,     0,   397,   398,     0,
     399,   400,     0,     0,     0,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,     0,   411,   412,     0,     0,
       0,   413,   414,   415,   416,     0,     0,     0,   417,     0,
       0,     0,   418,     0,   419,   420,   421,   422,   423,     0,
     424,   425,   426,   427,   428,   429,     0,     0,     0,     0,
       0,     0,   430,   431,     0,   432,     0,     0,   433,     0,
       0,   434,   435,   436,     0,     0,   437,   438,     0,   439,
     440,   441,   442,   443,   444,     0,     0,   445,   446,   447,
     448,     0,   449,   450,     0,   451,     0,   452,   453,   454,
     455,     0,     0,   456,   457,     0,   458,   459,   460,   461,
       0,     0,     0,     0,     0,   462,   463,   464,     0,     0,
       0,   465,   466,   467,   468,     0,   469,   470,     0,   471,
     472,     0,   473,   474,     0,     0,   475,     0,     0,   476,
       0,   477,     0,   478,   479,   480,     0,     0,     0,     0,
       0,     0,   481,     0,     0,   482,     0,     0,     0,   483,
     484,   485,   486,   487,   488,     0,     0,     0,     0,     0,
       0,   489,   490,     0,   491,   492,   493,     0,   139,   494,
     140,   141,   142,   143,   144,     0,  2169,   145,     0,     0,
       0,   146,     0,     0,   147,     0,   148,   149,   150,   151,
     152,   153,   154,   155,     0,   156,     0,     0,     0,   157,
       0,     0,     0,   158,     0,     0,   159,   160,   161,     0,
     162,     0,   163,   164,     0,     0,   165,     0,     0,   166,
     167,     0,   168,   169,     0,   170,   171,     0,   172,   173,
     174,   175,   176,   177,   178,     0,   179,   180,   181,   182,
     183,   184,   185,     0,   186,   187,   188,   189,   190,   191,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   199,
     200,     0,   201,     0,     0,   202,     0,     0,   203,     0,
       0,     0,   204,     0,     0,     0,   205,   206,   207,     0,
       0,   208,     0,     0,     0,     0,   209,   210,     0,     0,
       0,     0,   211,     0,   212,     0,     0,     0,   213,     0,
     214,   215,   216,   217,     0,     0,     0,   218,     0,     0,
     219,   220,   221,     0,     0,     0,   222,     0,   223,   224,
       0,   225,   226,   227,     0,     0,   228,   229,     0,   230,
     231,   232,   233,   234,   235,     0,     0,   236,   237,   238,
       0,     0,   239,   240,     0,   241,   242,   243,     0,     0,
     244,     0,     0,     0,   245,     0,   246,     0,   247,     0,
     248,   249,   250,   251,   252,   253,     0,   254,     0,     0,
       0,   255,   256,   257,     0,   258,     0,     0,   259,   260,
       0,     0,     0,   261,   262,   263,   264,     0,     0,   265,
     266,   267,     0,   268,     0,   269,     0,     0,     0,     0,
     270,   271,     0,     0,     0,   272,     0,   273,   274,     0,
     275,   276,     0,     0,     0,   277,     0,     0,   278,   279,
     280,     0,     0,   281,     0,     0,   282,   283,     0,     0,
       0,     0,     0,   284,   285,     0,   286,     0,   287,     0,
     288,   289,     0,     0,     0,     0,     0,     0,     0,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,     0,   306,   307,   308,     0,
     309,   310,   311,   312,     0,   313,   314,     0,     0,     0,
       0,   315,   316,   317,   318,   319,   320,     0,     0,   321,
     322,     0,   323,     0,   324,     0,   325,   326,   327,   328,
     329,   330,   331,   332,   333,     0,     0,   334,   335,     0,
       0,   336,   337,   338,   339,     0,     0,     0,   340,   341,
       0,     0,     0,     0,   342,   343,   344,     0,   345,   346,
     347,   348,     0,   349,   350,     0,     0,     0,     0,     0,
       0,     0,     0,   351,   352,   353,     0,     0,   354,     0,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,     0,     0,   367,   368,   369,     0,   370,     0,
     371,   372,   373,   374,   375,     0,   376,   377,   378,     0,
       0,   379,     0,     0,     0,   380,   381,   382,   383,   384,
       0,     0,   385,   386,   387,   388,   389,     0,   390,   391,
       0,   392,   393,   394,     0,     0,   395,     0,   396,     0,
     397,   398,     0,   399,   400,     0,     0,     0,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,     0,   411,
     412,     0,     0,     0,   413,   414,   415,   416,     0,     0,
       0,   417,     0,     0,     0,   418,     0,   419,   420,   421,
     422,   423,     0,   424,   425,   426,   427,   428,   429,     0,
       0,     0,     0,     0,     0,   430,   431,     0,   432,     0,
       0,   433,     0,     0,   434,   435,   436,     0,     0,   437,
     438,     0,   439,   440,   441,   442,   443,   444,     0,     0,
     445,   446,   447,   448,     0,   449,   450,     0,   451,     0,
     452,   453,   454,   455,     0,     0,   456,   457,     0,   458,
     459,   460,   461,     0,     0,     0,     0,     0,   462,   463,
     464,     0,     0,     0,   465,   466,   467,   468,     0,   469,
     470,     0,   471,   472,     0,   473,   474,     0,     0,   475,
       0,     0,   476,     0,   477,     0,   478,   479,   480,     0,
       0,     0,     0,     0,     0,   481,     0,     0,   482,     0,
       0,     0,   483,   484,   485,   486,   487,   488,     0,     0,
       0,     0,     0,     0,   489,   490,     0,   491,   492,   493,
       0,   139,   494,   140,   141,   142,   143,   144,     0,  2850,
     145,     0,     0,     0,   146,     0,     0,   147,     0,   148,
     149,   150,   151,   152,   153,   154,   155,     0,   156,     0,
       0,     0,   157,     0,     0,     0,   158,     0,     0,   159,
     160,   161,     0,   162,     0,   163,   164,     0,     0,   165,
       0,     0,   166,   167,     0,   168,   169,     0,   170,   171,
       0,   172,   173,   174,   175,   176,   177,   178,     0,   179,
     180,   181,   182,   183,   184,   185,     0,   186,   187,   188,
     189,   190,   191,   192,   193,     0,   194,   195,     0,   196,
     197,   198,   199,   200,     0,   201,     0,     0,   202,     0,
       0,   203,     0,     0,     0,   204,     0,     0,     0,   205,
     206,   207,     0,     0,   208,     0,     0,     0,     0,   209,
     210,     0,     0,     0,     0,   211,     0,   212,     0,     0,
       0,   213,     0,   214,   215,   216,   217,     0,     0,     0,
     218,     0,     0,   219,   220,   221,     0,     0,     0,   222,
       0,   223,   224,     0,   225,   226,   227,     0,     0,   228,
     229,     0,   230,   231,   232,   233,   234,   235,     0,     0,
     236,   237,   238,     0,     0,   239,   240,     0,   241,   242,
     243,     0,     0,   244,     0,     0,     0,   245,     0,   246,
       0,   247,     0,   248,   249,   250,   251,   252,   253,     0,
     254,     0,     0,     0,   255,   256,   257,     0,   258,     0,
       0,   259,   260,     0,     0,     0,   261,   262,   263,   264,
       0,     0,   265,   266,   267,     0,   268,     0,   269,     0,
       0,     0,     0,   270,   271,     0,     0,     0,   272,     0,
     273,   274,     0,   275,   276,     0,     0,     0,   277,     0,
       0,   278,   279,   280,     0,     0,   281,     0,     0,   282,
     283,     0,     0,     0,     0,     0,   284,   285,     0,   286,
       0,   287,     0,   288,   289,     0,     0,     0,     0,     0,
       0,     0,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,     0,   306,
     307,   308,     0,   309,   310,   311,   312,     0,   313,   314,
       0,     0,     0,     0,   315,   316,   317,   318,   319,   320,
       0,     0,   321,   322,     0,   323,     0,   324,     0,   325,
     326,   327,   328,   329,   330,   331,   332,   333,     0,     0,
     334,   335,     0,     0,   336,   337,   338,   339,     0,     0,
       0,   340,   341,     0,     0,     0,     0,   342,   343,   344,
       0,   345,   346,   347,   348,     0,   349,   350,     0,     0,
       0,     0,     0,     0,     0,     0,   351,   352,   353,     0,
       0,   354,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,     0,     0,   367,   368,   369,
       0,   370,     0,   371,   372,   373,   374,   375,     0,   376,
     377,   378,     0,     0,   379,     0,     0,     0,   380,   381,
     382,   383,   384,     0,     0,   385,   386,   387,   388,   389,
       0,   390,   391,     0,   392,   393,   394,     0,     0,   395,
       0,   396,     0,   397,   398,     0,   399,   400,     0,     0,
       0,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,     0,   411,   412,     0,     0,     0,   413,   414,   415,
     416,     0,     0,     0,   417,     0,     0,     0,   418,     0,
     419,   420,   421,   422,   423,     0,   424,   425,   426,   427,
     428,   429,     0,     0,     0,     0,     0,     0,   430,   431,
       0,   432,     0,     0,   433,     0,     0,   434,   435,   436,
       0,     0,   437,   438,     0,   439,   440,   441,   442,   443,
     444,     0,     0,   445,   446,   447,   448,     0,   449,   450,
       0,   451,     0,   452,   453,   454,   455,     0,     0,   456,
     457,     0,   458,   459,   460,   461,     0,     0,     0,     0,
       0,   462,   463,   464,     0,     0,     0,   465,   466,   467,
     468,     0,   469,   470,     0,   471,   472,     0,   473,   474,
       0,     0,   475,     0,     0,   476,     0,   477,     0,   478,
     479,   480,     0,     0,     0,     0,     0,     0,   481,     0,
       0,   482,     0,     0,     0,   483,   484,   485,   486,   487,
     488,     0,     0,     0,     0,     0,     0,   489,   490,     0,
     491,   492,   493,     0,   139,   494,   140,   141,   142,   143,
     144,     0,  3208,   145,     0,     0,     0,   146,     0,     0,
     147,     0,   148,   149,   150,   151,   152,   153,   154,   155,
       0,   156,     0,     0,     0,   157,     0,     0,     0,   158,
       0,     0,   159,   160,   161,     0,   162,     0,   163,   164,
       0,     0,   165,     0,     0,   166,   167,     0,   168,   169,
       0,   170,   171,     0,   172,   173,   174,   175,   176,   177,
     178,     0,   179,   180,   181,   182,   183,   184,   185,     0,
     186,   187,   188,   189,   190,   191,   192,   193,     0,   194,
     195,     0,   196,   197,   198,   199,   200,     0,   201,     0,
       0,   202,     0,     0,   203,     0,     0,     0,   204,     0,
       0,     0,   205,   206,   207,     0,     0,   208,     0,     0,
       0,     0,   209,   210,     0,     0,     0,     0,   211,     0,
     212,     0,     0,     0,   213,     0,   214,   215,   216,   217,
       0,     0,     0,   218,     0,     0,   219,   220,   221,     0,
       0,     0,   222,     0,   223,   224,     0,   225,   226,   227,
       0,     0,   228,   229,     0,   230,   231,   232,   233,   234,
     235,     0,     0,   236,   237,   238,     0,     0,   239,   240,
       0,   241,   242,   243,     0,     0,   244,     0,     0,     0,
     245,     0,   246,     0,   247,     0,   248,   249,   250,   251,
     252,   253,     0,   254,     0,     0,     0,   255,   256,   257,
       0,   258,     0,     0,   259,   260,     0,     0,     0,   261,
     262,   263,   264,     0,     0,   265,   266,   267,     0,   268,
       0,   269,     0,     0,     0,     0,   270,   271,     0,     0,
       0,   272,     0,   273,   274,     0,   275,   276,     0,     0,
       0,   277,     0,     0,   278,   279,   280,     0,     0,   281,
       0,     0,   282,   283,     0,     0,     0,     0,     0,   284,
     285,     0,   286,     0,   287,     0,   288,   289,     0,     0,
       0,     0,     0,     0,     0,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,     0,   306,   307,   308,     0,   309,   310,   311,   312,
       0,   313,   314,     0,     0,     0,     0,   315,   316,   317,
     318,   319,   320,     0,     0,   321,   322,     0,   323,     0,
     324,     0,   325,   326,   327,   328,   329,   330,   331,   332,
     333,     0,     0,   334,   335,     0,     0,   336,   337,   338,
     339,     0,     0,     0,   340,   341,     0,     0,     0,     0,
     342,   343,   344,     0,   345,   346,   347,   348,     0,   349,
     350,     0,     0,     0,     0,     0,     0,     0,     0,   351,
     352,   353,     0,     0,   354,     0,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,     0,     0,
     367,   368,   369,     0,   370,     0,   371,   372,   373,   374,
     375,     0,   376,   377,   378,     0,     0,   379,     0,     0,
       0,   380,   381,   382,   383,   384,     0,     0,   385,   386,
     387,   388,   389,     0,   390,   391,     0,   392,   393,   394,
       0,     0,   395,     0,   396,     0,   397,   398,     0,   399,
     400,     0,     0,     0,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,     0,   411,   412,     0,     0,     0,
     413,   414,   415,   416,     0,     0,     0,   417,     0,     0,
       0,   418,     0,   419,   420,   421,   422,   423,     0,   424,
     425,   426,   427,   428,   429,     0,     0,     0,     0,     0,
       0,   430,   431,     0,   432,     0,     0,   433,     0,     0,
     434,   435,   436,     0,     0,   437,   438,     0,   439,   440,
     441,   442,   443,   444,     0,     0,   445,   446,   447,   448,
       0,   449,   450,     0,   451,     0,   452,   453,   454,   455,
       0,     0,   456,   457,     0,   458,   459,   460,   461,     0,
       0,     0,     0,     0,   462,   463,   464,     0,     0,     0,
     465,   466,   467,   468,     0,   469,   470,     0,   471,   472,
       0,   473,   474,     0,     0,   475,     0,     0,   476,     0,
     477,     0,   478,   479,   480,     0,     0,     0,     0,     0,
       0,   481,     0,     0,   482,     0,     0,     0,   483,   484,
     485,   486,   487,   488,     0,     0,     0,     0,     0,     0,
     489,   490,     0,   491,   492,   493,     0,   139,   494,   140,
     141,   142,   143,   144,     0,  3544,   145,     0,     0,     0,
     146,     0,     0,   147,     0,   148,   149,   150,   151,   152,
     153,   154,   155,     0,   156,     0,     0,     0,   157,     0,
       0,     0,   158,     0,     0,   159,   160,   161,     0,   162,
       0,   163,   164,     0,     0,   165,     0,     0,   166,   167,
       0,   168,   169,     0,   170,   171,     0,   172,   173,   174,
     175,   176,   177,   178,     0,   179,   180,   181,   182,   183,
     184,   185,     0,   186,   187,   188,   189,   190,   191,   192,
     193,     0,   194,   195,     0,   196,   197,   198,   199,   200,
       0,   201,     0,     0,   202,     0,     0,   203,     0,     0,
       0,   204,     0,     0,     0,   205,   206,   207,     0,     0,
     208,     0,     0,     0,     0,   209,   210,  2502,     0,     0,
       0,   211,     0,   212,     0,     0,     0,   213,     0,   214,
     215,   216,   217,     0,     0,     0,   218,     0,     0,   219,
     220,   221,     0,     0,     0,   222,     0,   223,   224,     0,
     225,   226,   227,     0,     0,   228,   229,     0,   230,   231,
     232,   233,   234,   235,     0,     0,   236,   237,   238,     0,
       0,   239,   240,     0,   241,   242,   243,  2503,     0,   244,
       0,     0,     0,   245,     0,   246,     0,   247,     0,   248,
     249,   250,   251,   252,   253,     0,   254,     0,     0,     0,
     255,   256,   257,     0,   258,  2504,     0,   259,   260,     0,
       0,     0,   261,   262,   263,   264,     0,     0,   265,   266,
     267,     0,   268,     0,   269,     0,     0,     0,     0,   270,
     271,     0,     0,     0,   272,     0,   273,   274,     0,   275,
     276,     0,     0,     0,   277,     0,     0,   278,   279,   280,
       0,     0,   281,     0,     0,   282,   283,     0,     0,     0,
       0,     0,   284,   285,     0,   286,     0,   287,     0,   288,
     289,     0,     0,  2505,     0,     0,     0,     0,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,     0,   306,   307,   308,     0,   309,
     310,   311,   312,     0,   313,   314,     0,     0,     0,     0,
     315,   316,   317,   318,   319,   320,     0,     0,   321,   322,
       0,   323,     0,   324,     0,   325,   326,   327,   328,   329,
     330,   331,   332,   333,     0,     0,   334,   335,     0,     0,
     336,   337,   338,   339,  1057,  1058,     0,   340,   341,     0,
       0,  2506,     0,   342,   343,   344,     0,   345,   346,   347,
     348,     0,   349,   350,     0,     0,     0,     0,     0,     0,
       0,     0,   351,   352,   353,     0,     0,   354,     0,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,     0,     0,   367,   368,   369,     0,   370,     0,   371,
     372,   373,   374,   375,     0,   376,   377,   378,     0,     0,
     379,     0,     0,     0,   380,   381,   382,   383,   384,     0,
       0,   385,   386,   387,   388,   389,     0,   390,   391,     0,
     392,   393,   394,     0,     0,   395,     0,   396,     0,   397,
     398,     0,   399,   400,     0,     0,     0,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,     0,   411,   412,
       0,     0,     0,   413,   414,   415,   416,     0,     0,     0,
     417,     0,     0,     0,   418,     0,   419,   420,   421,   422,
     423,     0,   424,   425,   426,   427,   428,   429,     0,     0,
    4516,   567,  4517,     0,   430,   431,     0,   432,     0,     0,
     433,     0,     0,   434,   435,   436,     0,     0,   437,   438,
       0,   439,   440,   441,   442,   443,   444,     0,     0,   445,
     446,   447,   448,     0,   449,   450,     0,   451,     0,   452,
     453,   454,   455,     0,     0,   456,   457,     0,   458,   459,
     460,   461,     0,     0,     0,     0,     0,   462,   463,   464,
       0,     0,     0,   465,   466,   467,   468,  2507,   469,   470,
       0,   471,   472,     0,   473,   474,     0,     0,   475,     0,
       0,   476,     0,   477,     0,   478,   479,   480,     0,     0,
       0,     0,     0,     0,   481,     0,     0,   482,     0,     0,
       0,   483,   484,   485,   486,   487,   488,     0,     0,     0,
       0,     0,     0,   489,   490,     0,   491,   492,   493,     0,
     139,   494,   140,   141,   142,   143,   144,     0,     0,   145,
       0,     0,     0,   146,     0,     0,   147,     0,   148,   149,
     150,   151,   152,   153,   154,   155,     0,   156,     0,     0,
       0,   157,     0,     0,     0,   158,     0,     0,   159,   160,
     161,     0,   162,     0,   163,   164,     0,     0,   165,     0,
       0,   166,   167,     0,   168,   169,     0,   170,   171,     0,
     172,   173,   174,   175,   176,   177,   178,     0,   179,   180,
     181,   182,   183,   184,   185,     0,   186,   187,   188,   189,
     190,   191,   192,   193,     0,   194,   195,     0,   196,   197,
     198,   199,   200,     0,   201,     0,     0,   202,     0,     0,
     203,     0,     0,     0,   204,     0,     0,     0,   205,   206,
     207,     0,     0,   208,     0,     0,     0,     0,   209,   210,
    1609,     0,     0,  3020,   211,     0,   212,     0,     0,     0,
     213,     0,   214,   215,   216,   217,     0,     0,     0,   218,
       0,     0,   219,   220,   221,     0,     0,     0,   222,     0,
     223,   224,     0,   225,   226,   227,     0,     0,   228,   229,
       0,   230,   231,   232,   233,   234,   235,     0,     0,   236,
     237,   238,     0,     0,   239,   240,     0,   241,   242,   243,
    1610,     0,   244,     0,     0,     0,   245,     0,   246,     0,
     247,     0,   248,   249,   250,   251,   252,   253,     0,   254,
       0,     0,     0,   255,   256,   257,     0,   258,  3021,     0,
     259,   260,     0,     0,     0,   261,   262,   263,   264,     0,
       0,   265,   266,   267,     0,   268,     0,   269,     0,     0,
       0,     0,   270,   271,     0,     0,     0,   272,     0,   273,
     274,     0,   275,   276,     0,     0,     0,   277,     0,     0,
     278,   279,   280,     0,     0,   281,     0,     0,   282,   283,
       0,     0,     0,     0,     0,   284,   285,     0,   286,     0,
     287,     0,   288,   289,     0,     0,  3022,     0,     0,     0,
       0,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,     0,   306,   307,
     308,     0,   309,   310,   311,   312,     0,   313,   314,     0,
       0,     0,     0,   315,   316,   317,   318,   319,   320,     0,
       0,   321,   322,     0,   323,     0,   324,     0,   325,   326,
     327,   328,   329,   330,   331,   332,   333,     0,     0,   334,
     335,     0,     0,   336,   337,   338,   339,     0,     0,     0,
     340,   341,     0,     0,  3023,     0,   342,   343,   344,     0,
     345,   346,   347,   348,     0,   349,   350,     0,     0,     0,
       0,     0,     0,     0,     0,   351,   352,   353,     0,     0,
     354,     0,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,     0,     0,   367,   368,   369,     0,
     370,     0,   371,   372,   373,   374,   375,     0,   376,   377,
     378,     0,     0,   379,     0,     0,     0,   380,   381,   382,
     383,   384,     0,     0,   385,   386,   387,   388,   389,     0,
     390,   391,     0,   392,   393,   394,     0,     0,   395,     0,
     396,     0,   397,   398,     0,   399,   400,     0,     0,     0,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
       0,   411,   412,     0,     0,     0,   413,   414,   415,   416,
       0,     0,     0,   417,     0,     0,     0,   418,     0,   419,
     420,   421,   422,   423,     0,   424,   425,   426,   427,   428,
     429,     0,     0,     0,     0,     0,     0,   430,   431,     0,
     432,     0,     0,   433,     0,     0,   434,   435,   436,     0,
       0,   437,   438,     0,   439,   440,   441,   442,   443,   444,
       0,     0,   445,   446,   447,   448,     0,   449,   450,     0,
     451,     0,   452,   453,   454,   455,     0,   136,   456,   457,
       0,   458,   459,   460,   461,     0,     0,     0,     0,     0,
     462,   463,   464,     0,     0,     0,   465,   466,   467,   468,
    3024,   469,   470,     0,   471,   472,     0,   473,   474,     0,
       0,   475,     0,     0,   476,     0,   477,     0,   478,   479,
     480,     0,     0,     0,     0,     0,     0,   481,     0,     0,
     482,     0,     0,     0,   483,   484,   485,   486,   487,   488,
       0,     0,     0,     0,     0,     0,   489,   490,     0,   491,
     492,   493,     0,   139,   494,   140,   141,   142,   143,   144,
       0,     0,   145,     0,     0,     0,   146,     0,     0,   147,
       0,   148,   149,   150,   151,   152,   153,   154,   155,     0,
     156,     0,     0,     0,   157,     0,     0,     0,   158,     0,
       0,   159,   160,   161,     0,   162,     0,   163,   164,     0,
       0,   165,     0,     0,   166,   167,     0,   168,   169,     0,
     170,   171,     0,   172,   173,   174,   175,   176,   177,   178,
       0,   179,   180,   181,   182,   183,   184,   185,     0,   186,
     187,   188,   189,   190,   191,   192,   193,     0,   194,   195,
       0,   196,   197,   198,   199,   200,     0,   201,     0,     0,
     202,     0,     0,   203,     0,     0,     0,   204,     0,     0,
       0,   205,   206,   207,     0,     0,   208,     0,     0,     0,
       0,   209,   210,  1609,     0,     0,  3965,   211,     0,   212,
       0,     0,     0,   213,     0,   214,   215,   216,   217,     0,
       0,     0,   218,     0,     0,   219,   220,   221,     0,     0,
       0,   222,     0,   223,   224,     0,   225,   226,   227,     0,
       0,   228,   229,     0,   230,   231,   232,   233,   234,   235,
       0,     0,   236,   237,   238,     0,     0,   239,   240,     0,
     241,   242,   243,  1610,     0,   244,     0,     0,     0,   245,
       0,   246,     0,   247,     0,   248,   249,   250,   251,   252,
     253,     0,   254,     0,     0,     0,   255,   256,   257,     0,
     258,  3021,     0,   259,   260,     0,     0,     0,   261,   262,
     263,   264,     0,     0,   265,   266,   267,     0,   268,     0,
     269,     0,     0,     0,     0,   270,   271,     0,     0,     0,
     272,     0,   273,   274,     0,   275,   276,     0,     0,     0,
     277,     0,     0,   278,   279,   280,     0,     0,   281,     0,
       0,   282,   283,     0,     0,     0,     0,     0,   284,   285,
       0,   286,     0,   287,     0,   288,   289,     0,     0,  3022,
       0,     0,     0,     0,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
       0,   306,   307,   308,     0,   309,   310,   311,   312,     0,
     313,   314,     0,     0,     0,     0,   315,   316,   317,   318,
     319,   320,     0,     0,   321,   322,     0,   323,     0,   324,
       0,   325,   326,   327,   328,   329,   330,   331,   332,   333,
       0,     0,   334,   335,     0,     0,   336,   337,   338,   339,
       0,     0,     0,   340,   341,     0,     0,  3023,     0,   342,
     343,   344,     0,   345,   346,   347,   348,     0,   349,   350,
       0,     0,     0,     0,     0,     0,     0,     0,   351,   352,
     353,     0,     0,   354,     0,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,     0,     0,   367,
     368,   369,     0,   370,     0,   371,   372,   373,   374,   375,
       0,   376,   377,   378,     0,     0,   379,     0,     0,     0,
     380,   381,   382,   383,   384,     0,     0,   385,   386,   387,
     388,   389,     0,   390,   391,     0,   392,   393,   394,     0,
       0,   395,     0,   396,     0,   397,   398,     0,   399,   400,
       0,     0,     0,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,     0,   411,   412,     0,     0,     0,   413,
     414,   415,   416,     0,     0,     0,   417,     0,     0,     0,
     418,     0,   419,   420,   421,   422,   423,     0,   424,   425,
     426,   427,   428,   429,     0,     0,     0,     0,     0,     0,
     430,   431,     0,   432,     0,     0,   433,     0,     0,   434,
     435,   436,     0,     0,   437,   438,     0,   439,   440,   441,
     442,   443,   444,     0,     0,   445,   446,   447,   448,     0,
     449,   450,     0,   451,     0,   452,   453,   454,   455,     0,
     136,   456,   457,     0,   458,   459,   460,   461,     0,     0,
       0,     0,     0,   462,   463,   464,     0,     0,     0,   465,
     466,   467,   468,  3024,   469,   470,     0,   471,   472,     0,
     473,   474,     0,     0,   475,     0,     0,   476,     0,   477,
       0,   478,   479,   480,     0,     0,     0,     0,     0,     0,
     481,     0,     0,   482,     0,     0,     0,   483,   484,   485,
     486,   487,   488,     0,     0,     0,     0,     0,     0,   489,
     490,     0,   491,   492,   493,     0,   139,   494,   140,   141,
     142,   143,   144,     0,     0,   145,     0,     0,     0,   146,
       0,     0,   147,     0,   148,   149,   150,   151,   152,   153,
     154,   155,     0,   156,     0,     0,     0,   157,     0,     0,
       0,   158,     0,     0,   159,   160,   161,     0,   162,     0,
     163,   164,     0,     0,   165,     0,     0,   166,   167,     0,
     168,   169,     0,   170,   171,     0,   172,   173,   174,   175,
     176,   177,   178,     0,   179,   180,   181,   182,   183,   184,
     185,     0,   186,   187,   188,   189,   190,   191,   192,   193,
       0,   194,   195,     0,   196,   197,   198,   199,   200,     0,
     201,     0,     0,   202,     0,     0,   203,     0,     0,     0,
     204,     0,     0,     0,   205,   206,   207,     0,     0,   208,
       0,     0,     0,     0,   209,   210,  1609,     0,     0,  4336,
     211,     0,   212,     0,     0,     0,   213,     0,   214,   215,
     216,   217,     0,     0,     0,   218,     0,     0,   219,   220,
     221,     0,     0,     0,   222,     0,   223,   224,     0,   225,
     226,   227,     0,     0,   228,   229,     0,   230,   231,   232,
     233,   234,   235,     0,     0,   236,   237,   238,     0,     0,
     239,   240,     0,   241,   242,   243,  1610,     0,   244,     0,
       0,     0,   245,     0,   246,     0,   247,     0,   248,   249,
     250,   251,   252,   253,     0,   254,     0,     0,     0,   255,
     256,   257,     0,   258,  3021,     0,   259,   260,     0,     0,
       0,   261,   262,   263,   264,     0,     0,   265,   266,   267,
       0,   268,     0,   269,     0,     0,     0,     0,   270,   271,
       0,     0,     0,   272,     0,   273,   274,     0,   275,   276,
       0,     0,     0,   277,     0,     0,   278,   279,   280,     0,
       0,   281,     0,     0,   282,   283,     0,     0,     0,     0,
       0,   284,   285,     0,   286,     0,   287,     0,   288,   289,
       0,     0,  3022,     0,     0,     0,     0,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,     0,   306,   307,   308,     0,   309,   310,
     311,   312,     0,   313,   314,     0,     0,     0,     0,   315,
     316,   317,   318,   319,   320,     0,     0,   321,   322,     0,
     323,     0,   324,     0,   325,   326,   327,   328,   329,   330,
     331,   332,   333,     0,     0,   334,   335,     0,     0,   336,
     337,   338,   339,     0,     0,     0,   340,   341,     0,     0,
    3023,     0,   342,   343,   344,     0,   345,   346,   347,   348,
       0,   349,   350,     0,     0,     0,     0,     0,     0,     0,
       0,   351,   352,   353,     0,     0,   354,     0,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
       0,     0,   367,   368,   369,     0,   370,     0,   371,   372,
     373,   374,   375,     0,   376,   377,   378,     0,     0,   379,
       0,     0,     0,   380,   381,   382,   383,   384,     0,     0,
     385,   386,   387,   388,   389,     0,   390,   391,     0,   392,
     393,   394,     0,     0,   395,     0,   396,     0,   397,   398,
       0,   399,   400,     0,     0,     0,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,     0,   411,   412,     0,
       0,     0,   413,   414,   415,   416,     0,     0,     0,   417,
       0,     0,     0,   418,     0,   419,   420,   421,   422,   423,
       0,   424,   425,   426,   427,   428,   429,     0,     0,     0,
       0,     0,     0,   430,   431,     0,   432,     0,     0,   433,
       0,     0,   434,   435,   436,     0,     0,   437,   438,     0,
     439,   440,   441,   442,   443,   444,     0,     0,   445,   446,
     447,   448,     0,   449,   450,     0,   451,     0,   452,   453,
     454,   455,     0,   136,   456,   457,     0,   458,   459,   460,
     461,     0,     0,     0,     0,     0,   462,   463,   464,     0,
       0,     0,   465,   466,   467,   468,  3024,   469,   470,     0,
     471,   472,     0,   473,   474,     0,     0,   475,     0,     0,
     476,     0,   477,     0,   478,   479,   480,     0,     0,     0,
       0,     0,     0,   481,     0,     0,   482,     0,     0,     0,
     483,   484,   485,   486,   487,   488,     0,     0,     0,     0,
       0,     0,   489,   490,     0,   491,   492,   493,     0,   139,
     494,   140,   141,   142,   143,   144,     0,     0,   145,     0,
       0,     0,   146,     0,     0,   147,     0,   148,   149,   150,
     151,   152,   153,   154,   155,     0,   156,     0,     0,  1386,
     157,     0,     0,     0,   158,     0,     0,   159,   160,   161,
       0,   162,     0,   163,   164,     0,     0,   165,     0,     0,
     166,   167,     0,   168,   169,     0,   170,   171,     0,   172,
     173,   174,   175,   176,   177,   178,     0,   179,   180,   181,
     182,   183,   184,   185,     0,   186,   187,   188,   189,   190,
     191,   192,   193,     0,   194,   195,     0,   196,   197,   198,
     199,   200,     0,   201,     0,     0,   202,     0,     0,   203,
       0,     0,     0,   204,     0,     0,     0,   205,   206,   207,
       0,     0,   208,     0,     0,     0,     0,   209,   210,     0,
       0,     0,  1387,   211,     0,   212,     0,     0,     0,   213,
       0,   214,   215,   216,   217,     0,     0,     0,   218,     0,
       0,   219,   220,   221,     0,     0,     0,   222,     0,   223,
     224,     0,   225,   226,   227,  1388,     0,   228,   229,     0,
     230,   231,   232,   233,   234,   235,     0,     0,   236,   237,
     238,     0,     0,   239,   240,     0,   241,   242,   243,     0,
       0,   244,     0,     0,     0,   245,     0,   246,     0,   247,
       0,   248,   249,   250,   251,   252,   253,     0,   254,     0,
       0,     0,   255,   256,   257,     0,   258,     0,     0,   259,
     260,     0,     0,     0,   261,   262,   263,   264,     0,     0,
     265,   266,   267,     0,   268,     0,   269,     0,     0,     0,
       0,   270,   271,     0,     0,     0,   272,     0,   273,   274,
       0,   275,   276,     0,     0,     0,   277,     0,     0,   278,
     279,   280,     0,     0,   281,     0,     0,   282,   283,   623,
       0,     0,     0,     0,   284,   285,     0,   286,     0,   287,
       0,   288,   289,     0,     0,     0,     0,     0,     0,     0,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,     0,   306,   307,   308,
       0,   309,   310,   311,   312,     0,   313,   314,     0,     0,
       0,     0,   315,   316,   317,   318,   319,   320,     0,     0,
     321,   322,     0,   323,     0,   324,     0,   325,   326,   327,
     328,   329,   330,   331,   332,   333,     0,     0,   334,   335,
       0,     0,   336,   337,   338,   339,     0,     0,     0,   340,
     341,     0,     0,     0,     0,   342,   343,   344,     0,   345,
     346,   347,   348,     0,   349,   350,     0,     0,     0,     0,
       0,     0,     0,     0,   351,   352,   353,     0,     0,   354,
       0,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,     0,     0,   367,   368,   369,     0,   370,
       0,   371,   372,   373,   374,   375,     0,   376,   377,   378,
       0,     0,   379,     0,     0,     0,   380,   381,   382,   383,
     384,     0,     0,   385,   386,   387,   388,   389,     0,   390,
     391,     0,   392,   393,   394,     0,     0,   395,     0,   396,
       0,   397,   398,     0,   399,   400,     0,     0,     0,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,     0,
     411,   412,     0,     0,     0,   413,   414,   415,   416,     0,
       0,  1389,   417,     0,     0,     0,   418,     0,   419,   420,
     421,   422,   423,     0,   424,   425,   426,   427,   428,   429,
       0,     0,     0,     0,     0,     0,   430,   431,     0,   432,
       0,     0,   433,     0,     0,   434,   435,   436,     0,     0,
     437,   438,     0,   439,   440,   441,   442,   443,   444,     0,
       0,   445,   446,   447,   448,     0,   449,   450,     0,   451,
       0,   452,   453,   454,   455,     0,   136,   456,   457,     0,
     458,   459,   460,   461,     0,     0,     0,     0,     0,   462,
     463,   464,     0,     0,     0,   465,   466,   467,   468,     0,
     469,   470,     0,   471,   472,     0,   473,   474,     0,     0,
     475,     0,     0,   476,     0,   477,     0,   478,   479,   480,
       0,     0,     0,     0,     0,     0,   481,     0,     0,   482,
       0,     0,     0,   483,   484,   485,   486,   487,   488,     0,
       0,     0,     0,     0,     0,   489,   490,     0,   491,   492,
     493,     0,   139,   494,   140,   141,   142,   143,   144,     0,
       0,   145,     0,     0,     0,   146,     0,     0,   147,     0,
     148,   149,   150,   151,   152,   153,   154,   155,     0,   156,
       0,     0,  1399,   157,     0,     0,     0,   158,     0,     0,
     159,   160,   161,     0,   162,     0,   163,   164,     0,     0,
     165,     0,     0,   166,   167,     0,   168,   169,     0,   170,
     171,     0,   172,   173,   174,   175,   176,   177,   178,     0,
     179,   180,   181,   182,   183,   184,   185,     0,   186,   187,
     188,   189,   190,   191,   192,   193,     0,   194,   195,     0,
     196,   197,   198,   199,   200,     0,   201,     0,     0,   202,
       0,     0,   203,     0,     0,     0,   204,     0,     0,     0,
     205,   206,   207,     0,     0,   208,     0,     0,     0,     0,
     209,   210,     0,     0,     0,  1400,   211,     0,   212,     0,
       0,     0,   213,     0,   214,   215,   216,   217,     0,     0,
       0,   218,     0,     0,   219,   220,   221,     0,     0,     0,
     222,     0,   223,   224,     0,   225,   226,   227,     0,     0,
     228,   229,     0,   230,   231,   232,   233,   234,   235,     0,
       0,   236,   237,   238,     0,     0,   239,   240,     0,   241,
     242,   243,     0,     0,   244,     0,     0,     0,   245,     0,
     246,     0,   247,     0,   248,   249,   250,   251,   252,   253,
       0,   254,     0,     0,     0,   255,   256,   257,     0,   258,
       0,     0,   259,   260,     0,     0,     0,   261,   262,   263,
     264,     0,     0,   265,   266,   267,     0,   268,     0,   269,
       0,     0,     0,     0,   270,   271,     0,     0,     0,   272,
       0,   273,   274,     0,   275,   276,     0,     0,     0,   277,
       0,     0,   278,   279,   280,     0,     0,   281,     0,     0,
     282,   283,   623,     0,     0,     0,     0,   284,   285,     0,
     286,     0,   287,     0,   288,   289,     0,     0,     0,     0,
       0,     0,     0,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,     0,
     306,   307,   308,     0,   309,   310,   311,   312,     0,   313,
     314,     0,     0,     0,     0,   315,   316,   317,   318,   319,
     320,     0,     0,   321,   322,     0,   323,     0,   324,     0,
     325,   326,   327,   328,   329,   330,   331,   332,   333,     0,
       0,   334,   335,     0,     0,   336,   337,   338,   339,     0,
       0,     0,   340,   341,     0,     0,     0,     0,   342,   343,
     344,     0,   345,   346,   347,   348,     0,   349,   350,     0,
       0,     0,     0,     0,     0,     0,     0,   351,   352,   353,
       0,     0,   354,     0,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,     0,     0,   367,   368,
     369,     0,   370,     0,   371,   372,   373,   374,   375,     0,
     376,   377,   378,     0,     0,   379,     0,     0,     0,   380,
     381,   382,   383,   384,     0,     0,   385,   386,   387,   388,
     389,     0,   390,   391,     0,   392,   393,   394,     0,     0,
     395,     0,   396,     0,   397,   398,     0,   399,   400,     0,
       0,     0,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,     0,   411,   412,     0,     0,     0,   413,   414,
     415,   416,     0,     0,     0,   417,     0,     0,     0,   418,
       0,   419,   420,   421,   422,   423,     0,   424,   425,   426,
     427,   428,   429,     0,     0,     0,     0,     0,     0,   430,
     431,     0,   432,     0,     0,   433,     0,     0,   434,   435,
     436,     0,     0,   437,   438,     0,   439,   440,   441,   442,
     443,   444,     0,     0,   445,   446,   447,   448,     0,   449,
     450,     0,   451,     0,   452,   453,   454,   455,     0,   136,
     456,   457,     0,   458,   459,   460,   461,     0,     0,     0,
       0,     0,   462,   463,   464,     0,     0,     0,   465,   466,
     467,   468,     0,   469,   470,     0,   471,   472,     0,   473,
     474,     0,     0,   475,     0,     0,   476,     0,   477,     0,
     478,   479,   480,     0,     0,     0,     0,     0,     0,   481,
       0,     0,   482,     0,     0,     0,   483,   484,   485,   486,
     487,   488,     0,     0,     0,     0,     0,     0,   489,   490,
       0,   491,   492,   493,     0,   139,   494,   140,   141,   142,
     143,   144,     0,     0,   145,     0,     0,     0,   146,     0,
       0,   147,     0,   148,   149,   150,   151,   152,   153,   154,
     155,     0,   156,     0,     0,     0,   157,     0,     0,     0,
     158,     0,     0,   159,   160,   161,     0,   162,     0,   163,
     164,     0,     0,   165,     0,     0,   166,   167,     0,   168,
     169,     0,   170,   171,     0,   172,   173,   174,   175,   176,
     177,   178,     0,   179,   180,   181,   182,   183,   184,   185,
       0,   186,   187,   188,   189,   190,   191,   192,   193,     0,
     194,   195,     0,   196,   197,   198,   199,   200,     0,   201,
       0,     0,   202,     0,     0,   203,     0,     0,     0,   204,
       0,     0,     0,   205,   206,   207,     0,     0,   208,     0,
       0,     0,     0,   209,   210,     0,     0,     0,     0,   211,
       0,   212,     0,     0,     0,   213,     0,   214,   215,   216,
     217,     0,     0,     0,   218,     0,     0,   219,   220,   221,
       0,     0,     0,   222,     0,   223,   224,     0,   225,   226,
     227,     0,     0,   228,   229,     0,   230,   231,   232,   233,
     234,   235,     0,     0,   236,   237,   238,     0,     0,   239,
     240,     0,   241,   242,   243,     0,     0,   244,     0,     0,
       0,   245,     0,   246,     0,   247,     0,   248,   249,   250,
     251,   252,   253,     0,   254,     0,     0,     0,   255,   256,
     257,     0,   258,     0,     0,   259,   260,     0,     0,     0,
     261,   262,   263,   264,     0,     0,   265,   266,   267,     0,
     268,     0,   269,     0,     0,     0,     0,   270,   271,     0,
       0,     0,   272,     0,   273,   274,     0,   275,   276,     0,
       0,     0,   277,     0,     0,   278,   279,   280,     0,     0,
     281,     0,     0,   282,   283,     0,     0,     0,     0,     0,
     284,   285,     0,   286,     0,   287,     0,   288,   289,     0,
       0,  1910,     0,     0,     0,     0,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,     0,   306,   307,   308,     0,   309,   310,   311,
     312,     0,   313,   314,     0,     0,     0,     0,   315,   316,
     317,   318,   319,   320,     0,     0,   321,   322,     0,   323,
       0,   324,     0,   325,   326,   327,   328,   329,   330,   331,
     332,   333,     0,     0,   334,   335,     0,     0,   336,   337,
     338,   339,     0,     0,     0,   340,   341,     0,     0,  1911,
       0,   342,   343,   344,     0,   345,   346,   347,   348,     0,
     349,   350,     0,     0,     0,     0,     0,     0,     0,     0,
     351,   352,   353,     0,   740,   354,     0,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,     0,
       0,   367,   368,   369,     0,   370,     0,   371,   372,   373,
     374,   375,     0,   376,   377,   378,     0,     0,   379,     0,
       0,     0,   380,   381,   382,   383,   384,     0,     0,   385,
     386,   387,   388,   389,     0,   390,   391,     0,   392,   393,
     394,     0,     0,   395,     0,   396,     0,   397,   398,     0,
     399,   400,     0,     0,     0,   401,   402,   403,  1912,   405,
     406,   407,   408,   409,   410,     0,   411,   412,     0,     0,
       0,   413,   414,   415,   416,     0,     0,     0,   417,     0,
       0,     0,   418,     0,   419,   420,   421,   422,   423,     0,
     424,   425,   426,   427,   428,   429,     0,     0,     0,     0,
       0,     0,   430,   431,     0,   432,     0,     0,   433,     0,
       0,   434,   435,   436,     0,     0,   437,   438,     0,   439,
     440,   441,   442,   443,   444,     0,     0,   445,   446,   447,
     448,     0,   449,   450,     0,   451,     0,   452,   453,   454,
     455,     0,     0,   456,   457,     0,   458,   459,   460,   461,
       0,     0,     0,     0,     0,   462,   463,   464,     0,     0,
       0,   465,   466,   467,   468,  1913,   469,   470,     0,   471,
     472,     0,   473,   474,     0,     0,   475,     0,     0,   476,
       0,   477,     0,   478,   479,   480,     0,     0,     0,     0,
       0,     0,   481,     0,     0,   482,     0,     0,     0,   483,
     484,   485,   486,   487,   488,     0,     0,     0,     0,     0,
       0,   489,   490,     0,   491,   492,   493,     0,   139,   494,
     140,   141,   142,   143,   144,     0,     0,   145,     0,     0,
       0,   146,     0,     0,   147,     0,   148,   149,   150,   151,
     152,   153,   154,   155,     0,   156,     0,     0,     0,   157,
       0,     0,     0,   158,     0,     0,   159,   160,   161,     0,
     162,     0,   163,   164,     0,     0,   165,     0,     0,   166,
     167,     0,   168,   169,     0,   170,   171,     0,   172,   173,
     174,   175,   176,   177,   178,     0,   179,   180,   181,   182,
     183,   184,   185,     0,   186,   187,   188,   189,   190,   191,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   199,
     200,     0,   201,     0,     0,   202,     0,     0,   203,     0,
       0,     0,   204,     0,     0,     0,   205,   206,   207,     0,
       0,   208,     0,     0,     0,     0,   209,   210,     0,     0,
       0,     0,   211,     0,   212,     0,     0,     0,   213,     0,
     214,   215,   216,   217,     0,     0,     0,   218,     0,     0,
     219,   220,   221,     0,     0,     0,   222,     0,   223,   224,
       0,   225,   226,   227,     0,     0,   228,   229,     0,   230,
     231,   232,   233,   234,   235,     0,     0,   236,   237,   238,
       0,     0,   239,   240,     0,   241,   242,   243,     0,     0,
     244,     0,     0,     0,   245,     0,   246,     0,   247,     0,
     248,   249,   250,   251,   252,   253,     0,   254,     0,     0,
       0,   255,   256,   257,     0,   258,     0,     0,   259,   260,
       0,     0,     0,   261,   262,   263,   264,     0,     0,   265,
     266,   267,     0,   268,     0,   269,     0,     0,     0,     0,
     270,   271,     0,     0,     0,   272,     0,   273,   274,     0,
     275,   276,     0,     0,     0,   277,     0,     0,   278,   279,
     280,     0,     0,   281,     0,     0,   282,   283,     0,     0,
       0,     0,     0,   284,   285,     0,   286,     0,   287,     0,
     288,   289,     0,     0,  1910,     0,     0,     0,     0,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,     0,   306,   307,   308,     0,
     309,   310,   311,   312,     0,   313,   314,     0,     0,     0,
       0,   315,   316,   317,   318,   319,   320,     0,     0,   321,
     322,     0,   323,     0,   324,     0,   325,   326,   327,   328,
     329,   330,   331,   332,   333,     0,     0,   334,   335,     0,
       0,   336,   337,   338,   339,     0,     0,     0,   340,   341,
       0,     0,  1911,     0,   342,   343,   344,     0,   345,   346,
     347,   348,     0,   349,   350,     0,     0,     0,     0,     0,
       0,     0,     0,   351,   352,   353,     0,   740,   354,     0,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,     0,     0,   367,   368,   369,     0,   370,     0,
     371,   372,   373,   374,   375,     0,   376,   377,   378,     0,
       0,   379,     0,     0,     0,   380,   381,   382,   383,   384,
       0,     0,   385,   386,   387,   388,   389,     0,   390,   391,
       0,   392,   393,   394,     0,     0,   395,     0,   396,     0,
     397,   398,     0,   399,   400,     0,     0,     0,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,     0,   411,
     412,     0,     0,     0,   413,   414,   415,   416,     0,     0,
       0,   417,     0,     0,     0,   418,     0,   419,   420,   421,
     422,   423,     0,   424,   425,   426,   427,   428,   429,     0,
       0,     0,     0,     0,     0,   430,   431,     0,   432,     0,
       0,   433,     0,     0,   434,   435,   436,     0,     0,   437,
     438,     0,   439,   440,   441,   442,   443,   444,     0,     0,
     445,   446,   447,   448,     0,   449,   450,     0,   451,     0,
     452,   453,   454,   455,     0,     0,   456,   457,     0,   458,
     459,   460,   461,     0,     0,     0,     0,     0,   462,   463,
     464,     0,     0,     0,   465,   466,   467,   468,  1913,   469,
     470,     0,   471,   472,     0,   473,   474,     0,     0,   475,
       0,     0,   476,     0,   477,     0,   478,   479,   480,     0,
       0,     0,     0,     0,     0,   481,     0,     0,   482,     0,
       0,     0,   483,   484,   485,   486,   487,   488,     0,     0,
       0,     0,     0,     0,   489,   490,     0,   491,   492,   493,
       0,   139,   494,   140,   141,   142,   143,   144,     0,     0,
     145,     0,     0,     0,   146,     0,     0,   147,     0,   148,
     149,   150,   151,   152,   153,   154,   155,     0,   156,     0,
       0,  1386,   157,     0,     0,     0,   158,     0,     0,   159,
     160,   161,     0,   162,     0,   163,   164,     0,     0,   165,
       0,     0,   166,   167,     0,   168,   169,     0,   170,   171,
       0,   172,   173,   174,   175,   176,   177,   178,     0,   179,
     180,   181,   182,   183,   184,   185,     0,   186,   187,   188,
     189,   190,   191,   192,   193,     0,   194,   195,     0,   196,
     197,   198,   199,   200,     0,   201,     0,     0,   202,     0,
       0,   203,     0,     0,     0,   204,     0,     0,     0,   205,
     206,   207,     0,     0,   208,     0,     0,     0,     0,   209,
     210,     0,     0,     0,  1387,   211,     0,   212,     0,     0,
       0,   213,     0,   214,   215,   216,   217,     0,     0,     0,
     218,     0,     0,   219,   220,   221,     0,     0,     0,   222,
       0,   223,   224,     0,   225,   226,   227,     0,     0,   228,
     229,     0,   230,   231,   232,   233,   234,   235,     0,     0,
     236,   237,   238,     0,     0,   239,   240,     0,   241,   242,
     243,     0,     0,   244,     0,     0,     0,   245,     0,   246,
       0,   247,     0,   248,   249,   250,   251,   252,   253,     0,
     254,     0,     0,     0,   255,   256,   257,     0,   258,     0,
       0,   259,   260,     0,     0,     0,   261,   262,   263,   264,
       0,     0,   265,   266,   267,     0,   268,     0,   269,     0,
       0,     0,     0,   270,   271,     0,     0,     0,   272,     0,
     273,   274,     0,   275,   276,     0,     0,     0,   277,     0,
       0,   278,   279,   280,     0,     0,   281,     0,     0,   282,
     283,   623,     0,     0,     0,     0,   284,   285,     0,   286,
       0,   287,     0,   288,   289,     0,     0,     0,     0,     0,
       0,     0,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,     0,   306,
     307,   308,     0,   309,   310,   311,   312,     0,   313,   314,
       0,     0,     0,     0,   315,   316,   317,   318,   319,   320,
       0,     0,   321,   322,     0,   323,     0,   324,     0,   325,
     326,   327,   328,   329,   330,   331,   332,   333,     0,     0,
     334,   335,     0,     0,   336,   337,   338,   339,     0,     0,
       0,   340,   341,     0,     0,     0,     0,   342,   343,   344,
       0,   345,   346,   347,   348,     0,   349,   350,     0,     0,
       0,     0,     0,     0,     0,     0,   351,   352,   353,     0,
       0,   354,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,     0,     0,   367,   368,   369,
       0,   370,     0,   371,   372,   373,   374,   375,     0,   376,
     377,   378,     0,     0,   379,     0,     0,     0,   380,   381,
     382,   383,   384,     0,     0,   385,   386,   387,   388,   389,
       0,   390,   391,     0,   392,   393,   394,     0,     0,   395,
       0,   396,     0,   397,   398,     0,   399,   400,     0,     0,
       0,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,     0,   411,   412,     0,     0,     0,   413,   414,   415,
     416,     0,     0,     0,   417,     0,     0,     0,   418,     0,
     419,   420,   421,   422,   423,     0,   424,   425,   426,   427,
     428,   429,     0,     0,     0,     0,     0,     0,   430,   431,
       0,   432,     0,     0,   433,     0,     0,   434,   435,   436,
       0,     0,   437,   438,     0,   439,   440,   441,   442,   443,
     444,     0,     0,   445,   446,   447,   448,     0,   449,   450,
       0,   451,     0,   452,   453,   454,   455,     0,   136,   456,
     457,     0,   458,   459,   460,   461,     0,     0,     0,     0,
       0,   462,   463,   464,     0,     0,     0,   465,   466,   467,
     468,     0,   469,   470,     0,   471,   472,     0,   473,   474,
       0,     0,   475,     0,     0,   476,     0,   477,     0,   478,
     479,   480,     0,     0,     0,     0,     0,     0,   481,     0,
       0,   482,     0,     0,     0,   483,   484,   485,   486,   487,
     488,     0,     0,     0,     0,     0,     0,   489,   490,     0,
     491,   492,   493,     0,   139,   494,   140,   141,   142,   143,
     144,     0,     0,   145,     0,     0,     0,   146,     0,     0,
     147,     0,   148,   149,   150,   151,   152,   153,   154,   155,
       0,   156,     0,     0,     0,   157,     0,     0,     0,   158,
       0,     0,   159,   160,   161,     0,   162,     0,   163,   164,
       0,     0,   165,     0,     0,   166,   167,     0,   168,   169,
       0,   170,   171,     0,   172,   173,   174,   175,   176,   177,
     178,     0,   179,   180,   181,   182,   183,   184,   185,     0,
     186,   187,   188,   189,   190,   191,   192,   193,     0,   194,
     195,     0,   196,   197,   198,   199,   200,     0,   201,     0,
       0,   202,     0,     0,   203,     0,     0,     0,   204,     0,
       0,     0,   205,   206,   207,     0,     0,   208,     0,     0,
       0,     0,   209,   210,     0,     0,     0,     0,   211,     0,
     212,     0,     0,     0,   213,     0,   214,   215,   216,   217,
       0,     0,     0,   218,     0,     0,   219,   220,   221,     0,
       0,     0,   222,     0,   223,   224,     0,   225,   226,   227,
       0,     0,   228,   229,     0,   230,   231,   232,   233,   234,
     235,     0,     0,   236,   237,   238,     0,     0,   239,   240,
       0,   241,   242,   243,     0,     0,   244,     0,     0,     0,
     245,     0,   246,     0,   247,     0,   248,   249,   250,   251,
     252,   253,     0,   254,     0,     0,     0,   255,   256,   257,
       0,   258,     0,     0,   259,   260,     0,     0,     0,   261,
     262,   263,   264,     0,     0,   265,   266,   267,     0,   268,
       0,   269,     0,     0,     0,     0,   270,   271,     0,     0,
       0,   272,     0,   273,   274,     0,   275,   276,     0,     0,
       0,   277,     0,     0,   278,   279,   280,     0,     0,   281,
       0,     0,   282,   283,     0,     0,     0,     0,     0,   284,
     285,     0,   286,     0,   287,     0,   288,   289,     0,     0,
    1910,     0,     0,     0,     0,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,     0,   306,   307,   308,     0,   309,   310,   311,   312,
       0,   313,   314,     0,     0,     0,     0,   315,   316,   317,
     318,   319,   320,     0,     0,   321,   322,     0,   323,     0,
     324,     0,   325,   326,   327,   328,   329,   330,   331,   332,
     333,     0,     0,   334,   335,     0,     0,   336,   337,   338,
     339,     0,     0,     0,   340,   341,     0,     0,  1911,     0,
     342,   343,   344,     0,   345,   346,   347,   348,     0,   349,
     350,     0,     0,     0,     0,     0,     0,     0,     0,   351,
     352,   353,     0,   740,   354,     0,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,     0,     0,
     367,   368,   369,     0,   370,     0,   371,   372,   373,   374,
     375,     0,   376,   377,   378,     0,     0,   379,     0,     0,
       0,   380,   381,   382,   383,   384,     0,     0,   385,   386,
     387,   388,   389,     0,   390,   391,     0,   392,   393,   394,
       0,     0,   395,     0,   396,     0,   397,   398,     0,   399,
     400,     0,     0,     0,   401,   402,   403,  3687,   405,   406,
     407,   408,   409,   410,     0,   411,   412,     0,     0,     0,
     413,   414,   415,   416,     0,     0,     0,   417,     0,     0,
       0,   418,     0,   419,   420,   421,   422,   423,     0,   424,
     425,   426,   427,   428,   429,     0,     0,     0,     0,     0,
       0,   430,   431,     0,   432,     0,     0,   433,     0,     0,
     434,   435,   436,     0,     0,   437,   438,     0,   439,   440,
     441,   442,   443,   444,     0,     0,   445,   446,   447,   448,
       0,   449,   450,     0,   451,     0,   452,   453,   454,   455,
       0,     0,   456,   457,     0,   458,   459,   460,   461,     0,
       0,     0,     0,     0,   462,   463,   464,     0,     0,     0,
     465,   466,   467,   468,  1913,   469,   470,     0,   471,   472,
       0,   473,   474,     0,     0,   475,     0,     0,   476,     0,
     477,     0,   478,   479,   480,     0,     0,     0,     0,     0,
       0,   481,     0,     0,   482,     0,     0,     0,   483,   484,
     485,   486,   487,   488,     0,     0,     0,     0,     0,     0,
     489,   490,     0,   491,   492,   493,     0,   139,   494,   140,
     141,   142,   143,   144,     0,     0,   145,     0,     0,     0,
     146,     0,     0,   147,     0,   148,   149,   150,   151,   152,
     153,   154,   155,     0,   156,     0,     0,     0,   157,     0,
       0,     0,   158,     0,     0,   159,   160,   161,     0,   162,
       0,   163,   164,     0,     0,   165,     0,     0,   166,   167,
       0,   168,   169,     0,   170,   171,     0,   172,   173,   174,
     175,   176,   177,   178,     0,   179,   180,   181,   182,   183,
     184,   185,     0,   186,   187,   188,   189,   190,   191,   192,
     193,     0,   194,   195,     0,   196,   197,   198,   199,   200,
       0,   201,     0,     0,   202,     0,     0,   203,     0,  1015,
       0,   204,     0,     0,     0,   205,   206,   207,     0,     0,
     208,     0,     0,     0,     0,   209,   210,     0,     0,     0,
       0,   211,     0,   212,     0,     0,     0,   213,     0,   214,
     215,   216,   217,     0,     0,     0,   218,     0,     0,   219,
     220,   221,     0,     0,     0,   222,     0,   223,   224,     0,
     225,   226,   227,     0,     0,   228,   229,     0,   230,   231,
     232,   233,   234,   235,     0,     0,   236,   237,   238,     0,
       0,   239,   240,     0,   241,   242,   243,     0,     0,   244,
       0,     0,     0,   245,     0,   246,     0,   247,     0,   248,
     249,   250,   251,   252,   253,     0,   254,     0,     0,     0,
     255,   256,   257,     0,   258,     0,     0,   259,   260,     0,
       0,     0,   261,   262,   263,   264,     0,     0,   265,   266,
     267,     0,   268,     0,   269,     0,     0,     0,     0,   270,
     271,     0,     0,     0,   272,     0,   273,   274,     0,   275,
     276,     0,     0,     0,   277,     0,     0,   278,   279,   280,
       0,     0,   281,     0,     0,   282,   283,   623,     0,     0,
       0,     0,   284,   285,     0,   286,     0,   287,     0,   288,
     289,     0,     0,     0,     0,     0,     0,     0,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,     0,   306,   307,   308,     0,   309,
     310,   311,   312,     0,   313,   314,     0,     0,     0,     0,
     315,   316,   317,   318,   319,   320,     0,     0,   321,   322,
       0,   323,     0,   324,     0,   325,   326,   327,   328,   329,
     330,   331,   332,   333,     0,     0,   334,   335,     0,     0,
     336,   337,   338,   339,     0,     0,     0,   340,   341,     0,
       0,     0,     0,   342,   343,   344,     0,   345,   346,   347,
     348,     0,   349,   350,     0,     0,     0,     0,     0,     0,
       0,     0,   351,   352,   353,     0,     0,   354,     0,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,     0,     0,   367,   368,   369,     0,   370,     0,   371,
     372,   373,   374,   375,     0,   376,   377,   378,     0,     0,
     379,     0,     0,     0,   380,   381,   382,   383,   384,     0,
       0,   385,   386,   387,   388,   389,     0,   390,   391,     0,
     392,   393,   394,     0,     0,   395,     0,   396,     0,   397,
     398,     0,   399,   400,     0,     0,     0,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,     0,   411,   412,
       0,     0,     0,   413,   414,   415,   416,     0,     0,     0,
     417,     0,     0,     0,   418,     0,   419,   420,   421,   422,
     423,     0,   424,   425,   426,   427,   428,   429,     0,     0,
       0,     0,     0,     0,   430,   431,     0,   432,     0,     0,
     433,     0,     0,   434,   435,   436,     0,     0,   437,   438,
       0,   439,   440,   441,   442,   443,   444,     0,     0,   445,
     446,   447,   448,     0,   449,   450,     0,   451,     0,   452,
     453,   454,   455,     0,   136,   456,   457,     0,   458,   459,
     460,   461,     0,     0,     0,     0,     0,   462,   463,   464,
       0,     0,     0,   465,   466,   467,   468,     0,   469,   470,
       0,   471,   472,     0,   473,   474,     0,     0,   475,     0,
       0,   476,     0,   477,     0,   478,   479,   480,     0,     0,
       0,     0,     0,     0,   481,     0,     0,   482,     0,     0,
       0,   483,   484,   485,   486,   487,   488,     0,     0,     0,
       0,     0,     0,   489,   490,     0,   491,   492,   493,     0,
     139,   494,   140,   141,   142,   143,   144,  1422,     0,   145,
       0,     0,     0,   146,     0,     0,   147,     0,   148,   149,
     150,   151,   152,   153,   154,   155,     0,   156,     0,     0,
       0,   157,     0,     0,     0,   158,     0,     0,   159,   160,
     161,     0,   162,     0,   163,   164,     0,     0,   165,     0,
       0,   166,   167,     0,   168,   169,     0,   170,   171,     0,
     172,   173,   174,   175,   176,   177,   178,     0,   179,   180,
     181,   182,   183,   184,   185,     0,   186,   187,   188,   189,
     190,   191,   192,   193,     0,   194,   195,     0,   196,   197,
     198,   199,   200,     0,   201,     0,     0,   202,     0,     0,
     203,     0,     0,     0,   204,     0,     0,     0,   205,   206,
     207,     0,     0,   208,     0,     0,     0,     0,   209,   210,
       0,     0,     0,     0,   211,     0,   212,     0,     0,     0,
     213,     0,   214,   215,   216,   217,     0,     0,     0,   218,
       0,     0,   219,   220,   221,     0,     0,     0,   222,     0,
     223,   224,     0,   225,   226,   227,     0,     0,   228,   229,
       0,   230,   231,   232,   233,   234,   235,     0,     0,   236,
     237,   238,     0,     0,   239,   240,     0,   241,   242,   243,
       0,     0,   244,     0,     0,     0,   245,     0,   246,     0,
     247,     0,   248,   249,   250,   251,   252,   253,     0,   254,
       0,     0,     0,   255,   256,   257,     0,   258,     0,     0,
     259,   260,     0,     0,     0,   261,   262,   263,   264,     0,
       0,   265,   266,   267,     0,   268,     0,   269,     0,     0,
       0,     0,   270,   271,     0,     0,     0,   272,     0,   273,
     274,     0,   275,   276,     0,     0,     0,   277,     0,     0,
     278,   279,   280,     0,     0,   281,     0,     0,   282,   283,
     623,     0,     0,     0,     0,   284,   285,     0,   286,     0,
     287,     0,   288,   289,     0,     0,     0,     0,     0,     0,
       0,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,     0,   306,   307,
     308,     0,   309,   310,   311,   312,     0,   313,   314,     0,
       0,     0,     0,   315,   316,   317,   318,   319,   320,     0,
       0,   321,   322,     0,   323,     0,   324,     0,   325,   326,
     327,   328,   329,   330,   331,   332,   333,     0,     0,   334,
     335,     0,     0,   336,   337,   338,   339,     0,     0,     0,
     340,   341,     0,     0,     0,     0,   342,   343,   344,     0,
     345,   346,   347,   348,     0,   349,   350,     0,     0,     0,
       0,     0,     0,     0,     0,   351,   352,   353,     0,     0,
     354,     0,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,     0,     0,   367,   368,   369,     0,
     370,     0,   371,   372,   373,   374,   375,     0,   376,   377,
     378,     0,     0,   379,     0,     0,     0,   380,   381,   382,
     383,   384,     0,     0,   385,   386,   387,   388,   389,     0,
     390,   391,     0,   392,   393,   394,     0,     0,   395,     0,
     396,     0,   397,   398,     0,   399,   400,     0,     0,     0,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
       0,   411,   412,     0,     0,     0,   413,   414,   415,   416,
       0,     0,     0,   417,     0,     0,     0,   418,     0,   419,
     420,   421,   422,   423,     0,   424,   425,   426,   427,   428,
     429,     0,     0,     0,     0,     0,     0,   430,   431,     0,
     432,     0,     0,   433,     0,     0,   434,   435,   436,     0,
       0,   437,   438,     0,   439,   440,   441,   442,   443,   444,
       0,     0,   445,   446,   447,   448,     0,   449,   450,     0,
     451,     0,   452,   453,   454,   455,     0,   136,   456,   457,
       0,   458,   459,   460,   461,     0,     0,     0,     0,     0,
     462,   463,   464,     0,     0,     0,   465,   466,   467,   468,
       0,   469,   470,     0,   471,   472,     0,   473,   474,     0,
       0,   475,     0,     0,   476,     0,   477,     0,   478,   479,
     480,     0,     0,     0,     0,     0,     0,   481,     0,     0,
     482,     0,     0,     0,   483,   484,   485,   486,   487,   488,
       0,     0,     0,     0,     0,     0,   489,   490,     0,   491,
     492,   493,     0,   139,   494,   140,   141,   142,   143,   144,
       0,     0,   145,     0,     0,     0,   146,     0,     0,   147,
       0,   148,   149,   150,   151,   152,   153,   154,   155,     0,
     156,     0,     0,     0,   157,   993,     0,     0,   158,     0,
       0,   159,   160,   161,     0,   162,     0,   163,   164,     0,
       0,   165,     0,     0,   166,   167,     0,   168,   169,     0,
     170,   171,     0,   172,   173,   174,   175,   176,   177,   178,
       0,   179,   180,   181,   182,   183,   184,   185,     0,   186,
     187,   188,   189,   190,   191,   192,   193,     0,   194,   195,
       0,   196,   197,   198,   199,   200,     0,   201,     0,     0,
     202,     0,     0,   203,     0,     0,     0,   204,     0,     0,
       0,   205,   206,   207,     0,     0,   208,     0,     0,     0,
       0,   209,   210,     0,     0,     0,     0,   211,     0,   212,
       0,     0,     0,   213,     0,   214,   215,   216,   217,     0,
       0,     0,   218,     0,     0,   219,   220,   221,     0,     0,
       0,   222,     0,   223,   224,     0,   225,   226,   227,     0,
       0,   228,   229,     0,   230,   231,   232,   233,   234,   235,
       0,     0,   236,   237,   238,     0,     0,   239,   240,     0,
     241,   242,   243,     0,     0,   244,     0,     0,     0,   245,
       0,   246,     0,   247,     0,   248,   249,   250,   251,   252,
     253,     0,   254,     0,     0,     0,   255,   256,   257,     0,
     258,   994,     0,   259,   260,     0,     0,     0,   261,   262,
     263,   264,     0,     0,   265,   266,   267,     0,   268,     0,
     269,     0,     0,     0,     0,   270,   271,     0,     0,     0,
     272,     0,   273,   274,     0,   275,   276,     0,     0,     0,
     277,     0,     0,   278,   279,   280,     0,     0,   281,     0,
       0,   282,   283,     0,     0,     0,     0,     0,   284,   285,
       0,   286,     0,   287,     0,   288,   289,     0,     0,     0,
       0,     0,     0,     0,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
       0,   306,   307,   308,     0,   309,   310,   311,   312,     0,
     313,   314,     0,     0,     0,     0,   315,   316,   317,   318,
     319,   320,     0,     0,   321,   322,     0,   323,     0,   324,
       0,   325,   326,   327,   328,   329,   330,   331,   332,   333,
       0,     0,   334,   335,     0,     0,   336,   337,   338,   339,
       0,     0,     0,   340,   341,     0,     0,     0,     0,   342,
     343,   344,     0,   345,   346,   347,   348,     0,   349,   350,
       0,     0,     0,     0,     0,     0,     0,     0,   351,   352,
     353,     0,     0,   354,     0,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,     0,     0,   367,
     368,   369,     0,   370,     0,   371,   372,   373,   374,   375,
       0,   376,   377,   378,     0,     0,   379,     0,     0,     0,
     380,   381,   382,   383,   384,     0,     0,   385,   386,   387,
     388,   389,     0,   390,   391,     0,   392,   393,   394,     0,
       0,   395,     0,   396,     0,   397,   398,     0,   399,   400,
       0,     0,     0,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,     0,   411,   412,     0,     0,     0,   413,
     414,   415,   416,     0,     0,     0,   417,     0,     0,     0,
     418,     0,   419,   420,   421,   422,   423,     0,   424,   425,
     426,   427,   428,   429,     0,     0,     0,     0,     0,     0,
     430,   431,     0,   432,     0,     0,   433,     0,     0,   434,
     435,   436,     0,     0,   437,   438,     0,   439,   440,   441,
     442,   443,   444,     0,     0,   445,   446,   447,   448,     0,
     449,   450,     0,   451,     0,   452,   453,   454,   455,     0,
     995,   456,   457,     0,   458,   459,   460,   461,     0,     0,
       0,     0,     0,   462,   463,   464,     0,     0,     0,   465,
     466,   467,   468,     0,   469,   470,     0,   471,   472,     0,
     473,   474,     0,     0,   475,     0,     0,   476,     0,   477,
       0,   478,   479,   480,     0,     0,     0,     0,     0,     0,
     481,     0,     0,   482,     0,     0,     0,   483,   484,   485,
     486,   487,   488,     0,     0,     0,     0,     0,     0,   489,
     490,     0,   491,   492,   493,     0,   139,   494,   140,   141,
     142,   143,   144,     0,     0,   145,     0,     0,     0,   146,
       0,     0,   147,     0,   148,   149,   150,   151,   152,   153,
     154,   155,     0,   156,     0,     0,     0,   157,     0,     0,
       0,   158,     0,     0,   159,   160,   161,     0,   162,     0,
     163,   164,     0,     0,   165,     0,     0,   166,   167,     0,
     168,   169,     0,   170,   171,     0,   172,   173,   174,   175,
     176,   177,   178,     0,   179,   180,   181,   182,   183,   184,
     185,     0,   186,   187,   188,   189,   190,   191,   192,   193,
       0,   194,   195,     0,   196,   197,   198,   199,   200,     0,
     201,     0,     0,   202,     0,     0,   203,     0,     0,     0,
     204,     0,     0,     0,   205,   206,   207,     0,     0,   208,
       0,     0,     0,     0,   209,   210,     0,     0,     0,  2418,
     211,     0,   212,     0,     0,     0,   213,     0,   214,   215,
     216,   217,     0,     0,     0,   218,     0,     0,   219,   220,
     221,     0,     0,     0,   222,     0,   223,   224,     0,   225,
     226,   227,     0,     0,   228,   229,     0,   230,   231,   232,
     233,   234,   235,     0,     0,   236,   237,   238,     0,     0,
     239,   240,     0,   241,   242,   243,     0,     0,   244,     0,
       0,     0,   245,     0,   246,     0,   247,     0,   248,   249,
     250,   251,   252,   253,     0,   254,     0,     0,     0,   255,
     256,   257,     0,   258,     0,     0,   259,   260,     0,     0,
       0,   261,   262,   263,   264,     0,     0,   265,   266,   267,
       0,   268,     0,   269,     0,     0,     0,     0,   270,   271,
       0,     0,     0,   272,     0,   273,   274,     0,   275,   276,
       0,     0,     0,   277,     0,     0,   278,   279,   280,     0,
       0,   281,     0,     0,   282,   283,   623,     0,     0,     0,
       0,   284,   285,     0,   286,     0,   287,     0,   288,   289,
       0,     0,     0,     0,     0,     0,     0,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,     0,   306,   307,   308,     0,   309,   310,
     311,   312,     0,   313,   314,     0,     0,     0,     0,   315,
     316,   317,   318,   319,   320,     0,     0,   321,   322,     0,
     323,     0,   324,     0,   325,   326,   327,   328,   329,   330,
     331,   332,   333,     0,     0,   334,   335,     0,     0,   336,
     337,   338,   339,     0,     0,     0,   340,   341,     0,     0,
       0,     0,   342,   343,   344,     0,   345,   346,   347,   348,
       0,   349,   350,     0,     0,     0,     0,     0,     0,     0,
       0,   351,   352,   353,     0,     0,   354,     0,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
       0,     0,   367,   368,   369,     0,   370,     0,   371,   372,
     373,   374,   375,     0,   376,   377,   378,     0,     0,   379,
       0,     0,     0,   380,   381,   382,   383,   384,     0,     0,
     385,   386,   387,   388,   389,     0,   390,   391,     0,   392,
     393,   394,     0,     0,   395,     0,   396,     0,   397,   398,
       0,   399,   400,     0,     0,     0,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,     0,   411,   412,     0,
       0,     0,   413,   414,   415,   416,     0,     0,     0,   417,
       0,     0,     0,   418,     0,   419,   420,   421,   422,   423,
       0,   424,   425,   426,   427,   428,   429,     0,     0,     0,
       0,     0,     0,   430,   431,     0,   432,     0,     0,   433,
       0,     0,   434,   435,   436,     0,     0,   437,   438,     0,
     439,   440,   441,   442,   443,   444,     0,     0,   445,   446,
     447,   448,     0,   449,   450,     0,   451,     0,   452,   453,
     454,   455,     0,   136,   456,   457,     0,   458,   459,   460,
     461,     0,     0,     0,     0,     0,   462,   463,   464,     0,
       0,     0,   465,   466,   467,   468,     0,   469,   470,     0,
     471,   472,     0,   473,   474,     0,     0,   475,     0,     0,
     476,     0,   477,     0,   478,   479,   480,     0,     0,     0,
       0,     0,     0,   481,     0,     0,   482,     0,     0,     0,
     483,   484,   485,   486,   487,   488,     0,     0,     0,     0,
       0,     0,   489,   490,     0,   491,   492,   493,     0,   139,
     494,   140,   141,   142,   143,   144,     0,     0,   145,     0,
       0,     0,   146,     0,     0,   147,     0,   148,   149,   150,
     151,   152,   153,   154,   155,     0,   156,     0,     0,  1386,
     157,     0,     0,     0,   158,     0,     0,   159,   160,   161,
       0,   162,     0,   163,   164,     0,     0,   165,     0,     0,
     166,   167,     0,   168,   169,     0,   170,   171,     0,   172,
     173,   174,   175,   176,   177,   178,     0,   179,   180,   181,
     182,   183,   184,   185,     0,   186,   187,   188,   189,   190,
     191,   192,   193,     0,   194,   195,     0,   196,   197,   198,
     199,   200,     0,   201,     0,     0,   202,     0,     0,   203,
       0,     0,     0,   204,     0,     0,     0,   205,   206,   207,
       0,     0,   208,     0,     0,     0,     0,   209,   210,     0,
       0,     0,     0,   211,     0,   212,     0,     0,     0,   213,
       0,   214,   215,   216,   217,     0,     0,     0,   218,     0,
       0,   219,   220,   221,     0,     0,     0,   222,     0,   223,
     224,     0,   225,   226,   227,     0,     0,   228,   229,     0,
     230,   231,   232,   233,   234,   235,     0,     0,   236,   237,
     238,     0,     0,   239,   240,     0,   241,   242,   243,     0,
       0,   244,     0,     0,     0,   245,     0,   246,     0,   247,
       0,   248,   249,   250,   251,   252,   253,     0,   254,     0,
       0,     0,   255,   256,   257,     0,   258,     0,     0,   259,
     260,     0,     0,     0,   261,   262,   263,   264,     0,     0,
     265,   266,   267,     0,   268,     0,   269,     0,     0,     0,
       0,   270,   271,     0,     0,     0,   272,     0,   273,   274,
       0,   275,   276,     0,     0,     0,   277,     0,     0,   278,
     279,   280,     0,     0,   281,     0,     0,   282,   283,   623,
       0,     0,     0,     0,   284,   285,     0,   286,     0,   287,
       0,   288,   289,     0,     0,     0,     0,     0,     0,     0,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,     0,   306,   307,   308,
       0,   309,   310,   311,   312,     0,   313,   314,     0,     0,
       0,     0,   315,   316,   317,   318,   319,   320,     0,     0,
     321,   322,     0,   323,     0,   324,     0,   325,   326,   327,
     328,   329,   330,   331,   332,   333,     0,     0,   334,   335,
       0,     0,   336,   337,   338,   339,     0,     0,     0,   340,
     341,     0,     0,     0,     0,   342,   343,   344,     0,   345,
     346,   347,   348,     0,   349,   350,     0,     0,     0,     0,
       0,     0,     0,     0,   351,   352,   353,     0,     0,   354,
       0,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,     0,     0,   367,   368,   369,     0,   370,
       0,   371,   372,   373,   374,   375,     0,   376,   377,   378,
       0,     0,   379,     0,     0,     0,   380,   381,   382,   383,
     384,     0,     0,   385,   386,   387,   388,   389,     0,   390,
     391,     0,   392,   393,   394,     0,     0,   395,     0,   396,
       0,   397,   398,     0,   399,   400,     0,     0,     0,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,     0,
     411,   412,     0,     0,     0,   413,   414,   415,   416,     0,
       0,     0,   417,     0,     0,     0,   418,     0,   419,   420,
     421,   422,   423,     0,   424,   425,   426,   427,   428,   429,
       0,     0,     0,     0,     0,     0,   430,   431,     0,   432,
       0,     0,   433,     0,     0,   434,   435,   436,     0,     0,
     437,   438,     0,   439,   440,   441,   442,   443,   444,     0,
       0,   445,   446,   447,   448,     0,   449,   450,     0,   451,
       0,   452,   453,   454,   455,     0,   136,   456,   457,     0,
     458,   459,   460,   461,     0,     0,     0,     0,     0,   462,
     463,   464,     0,     0,     0,   465,   466,   467,   468,     0,
     469,   470,     0,   471,   472,     0,   473,   474,     0,     0,
     475,     0,     0,   476,     0,   477,     0,   478,   479,   480,
       0,     0,     0,     0,     0,     0,   481,     0,     0,   482,
       0,     0,     0,   483,   484,   485,   486,   487,   488,     0,
       0,     0,     0,     0,     0,   489,   490,     0,   491,   492,
     493,     0,   139,   494,   140,   141,   142,   143,   144,     0,
       0,   145,     0,     0,     0,   146,     0,     0,   147,     0,
     148,   149,   150,   151,   152,   153,   154,   155,     0,   156,
       0,     0,     0,   157,     0,     0,     0,   158,     0,     0,
     159,   160,   161,     0,   162,     0,   163,   164,     0,     0,
     165,     0,     0,   166,   167,     0,   168,   169,     0,   170,
     171,     0,   172,   173,   174,   175,   176,   177,   178,     0,
     179,   180,   181,   182,   183,   184,   185,     0,   186,   187,
     188,   189,   190,   191,   192,   193,     0,   194,   195,     0,
     196,   197,   198,   199,   200,     0,   201,     0,     0,   202,
       0,     0,   203,     0,     0,     0,   204,     0,     0,     0,
     205,   206,   207,     0,     0,   208,     0,     0,     0,     0,
     209,   210,     0,     0,     0,     0,   211,     0,   212,     0,
       0,     0,   213,     0,   214,   215,   216,   217,     0,     0,
       0,   218,     0,     0,   219,   220,   221,     0,     0,     0,
     222,     0,   223,   224,     0,   225,   226,   227,     0,     0,
     228,   229,     0,   230,   231,   232,   233,   234,   235,     0,
       0,   236,   237,   238,     0,     0,   239,   240,     0,   241,
     242,   243,     0,     0,   244,     0,     0,     0,   245,     0,
     246,     0,   247,     0,   248,   249,   250,   251,   252,   253,
       0,   254,     0,     0,     0,   255,   256,   257,     0,   258,
       0,     0,   259,   260,     0,     0,     0,   261,   262,   263,
     264,     0,     0,   265,   266,   267,     0,   268,     0,   269,
       0,     0,     0,     0,   270,   271,     0,     0,     0,   272,
       0,   273,   274,     0,   275,   276,     0,     0,     0,   277,
       0,     0,   278,   279,   280,     0,     0,   281,     0,     0,
     282,   283,   623,     0,     0,     0,     0,   284,   285,     0,
     286,     0,   287,     0,   288,   289,     0,     0,     0,     0,
       0,     0,     0,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,     0,
     306,   307,   308,     0,   309,   310,   311,   312,     0,   313,
     314,     0,     0,     0,     0,   315,   316,   317,   318,   319,
     320,     0,     0,   321,   322,     0,   323,     0,   324,     0,
     325,   326,   327,   328,   329,   330,   331,   332,   333,     0,
       0,   334,   335,     0,     0,   336,   337,   338,   339,     0,
       0,     0,   340,   341,     0,     0,     0,     0,   342,   343,
     344,     0,   345,   346,   347,   348,     0,   349,   350,     0,
       0,     0,     0,     0,     0,     0,     0,   351,   352,   353,
       0,     0,   354,     0,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,     0,     0,   367,   368,
     369,     0,   370,     0,   371,   372,   373,   374,   375,     0,
     376,   377,   378,     0,     0,   379,     0,     0,     0,   380,
     381,   382,   383,   384,     0,     0,   385,   386,   387,   388,
     389,     0,   390,   391,     0,   392,   393,   394,     0,     0,
     395,     0,   396,     0,   397,   398,     0,   399,   400,     0,
       0,     0,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,     0,   411,   412,     0,     0,     0,   413,   414,
     415,   416,     0,     0,     0,   417,     0,     0,     0,   418,
       0,   419,   420,   421,   422,   423,     0,   424,   425,   426,
     427,   428,   429,     0,     0,     0,     0,     0,     0,   430,
     431,     0,   432,     0,     0,   433,     0,     0,   434,   435,
     436,     0,     0,   437,   438,     0,   439,   440,   441,   442,
     443,   444,     0,     0,   445,   446,   447,   448,     0,   449,
     450,     0,   451,     0,   452,   453,   454,   455,     0,   136,
     456,   457,     0,   458,   459,   460,   461,     0,     0,     0,
       0,     0,   462,   463,   464,     0,     0,     0,   465,   466,
     467,   468,     0,   469,   470,     0,   471,   472,     0,   473,
     474,     0,     0,   475,     0,     0,   476,     0,   477,     0,
     478,   479,   480,     0,     0,     0,     0,     0,     0,   481,
       0,     0,   482,     0,     0,     0,   483,   484,   485,   486,
     487,   488,     0,     0,     0,     0,     0,     0,   489,   490,
       0,   491,   492,   493,     0,   139,   494,   140,   141,   142,
     143,   144,     0,     0,   145,     0,     0,     0,   146,  2846,
       0,   147,     0,   148,   149,   150,   151,   152,   153,   154,
     155,     0,   156,     0,     0,     0,   157,     0,     0,     0,
     158,     0,     0,   159,   160,   161,     0,   162,     0,   163,
     164,     0,     0,   165,     0,     0,   166,   167,     0,   168,
     169,     0,   170,   171,     0,   172,   173,   174,   175,   176,
     177,   178,     0,   179,   180,   181,   182,   183,   184,   185,
       0,   186,   187,   188,   189,   190,   191,   192,   193,     0,
     194,   195,     0,   196,   197,   198,   199,   200,     0,   201,
       0,     0,   202,     0,     0,   203,     0,     0,     0,   204,
       0,     0,     0,   205,   206,   207,     0,     0,   208,     0,
       0,     0,     0,   209,   210,     0,     0,     0,     0,   211,
       0,   212,     0,     0,     0,   213,     0,   214,   215,   216,
     217,     0,     0,     0,   218,     0,     0,   219,   220,   221,
       0,     0,     0,   222,     0,   223,   224,     0,   225,   226,
     227,     0,     0,   228,   229,     0,   230,   231,   232,   233,
     234,   235,     0,     0,   236,   237,   238,     0,     0,   239,
     240,     0,   241,   242,   243,     0,     0,   244,     0,     0,
       0,   245,     0,   246,     0,   247,     0,   248,   249,   250,
     251,   252,   253,     0,   254,     0,     0,     0,   255,   256,
     257,     0,   258,     0,     0,   259,   260,     0,     0,     0,
     261,   262,   263,   264,     0,     0,   265,   266,   267,     0,
     268,     0,   269,     0,     0,     0,     0,   270,   271,     0,
       0,     0,   272,     0,   273,   274,     0,   275,   276,     0,
       0,     0,   277,     0,     0,   278,   279,   280,     0,     0,
     281,     0,     0,   282,   283,     0,     0,     0,     0,     0,
     284,   285,     0,   286,     0,   287,     0,   288,   289,     0,
       0,     0,     0,     0,     0,     0,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,     0,   306,   307,   308,     0,   309,   310,   311,
     312,     0,   313,   314,     0,     0,     0,     0,   315,   316,
     317,   318,   319,   320,     0,     0,   321,   322,     0,   323,
       0,   324,     0,   325,   326,   327,   328,   329,   330,   331,
     332,   333,     0,     0,   334,   335,     0,     0,   336,   337,
     338,   339,     0,     0,     0,   340,   341,     0,     0,     0,
       0,   342,   343,   344,     0,   345,   346,   347,   348,     0,
     349,   350,     0,     0,     0,     0,     0,     0,     0,     0,
     351,   352,   353,     0,     0,   354,     0,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,     0,
       0,   367,   368,   369,     0,   370,     0,   371,   372,   373,
     374,   375,     0,   376,   377,   378,     0,     0,   379,     0,
       0,     0,   380,   381,   382,   383,   384,     0,     0,   385,
     386,   387,   388,   389,     0,   390,   391,     0,   392,   393,
     394,     0,     0,   395,     0,   396,     0,   397,   398,     0,
     399,   400,     0,     0,     0,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,     0,   411,   412,     0,     0,
       0,   413,   414,   415,   416,     0,     0,     0,   417,     0,
       0,     0,   418,     0,   419,   420,   421,   422,   423,     0,
     424,   425,   426,   427,   428,   429,     0,     0,     0,     0,
       0,     0,   430,   431,     0,   432,     0,     0,   433,     0,
       0,   434,   435,   436,     0,     0,   437,   438,     0,   439,
     440,   441,   442,   443,   444,     0,     0,   445,   446,   447,
     448,     0,   449,   450,     0,   451,     0,   452,   453,   454,
     455,     0,   136,   456,   457,     0,   458,   459,   460,   461,
       0,     0,     0,     0,     0,   462,   463,   464,     0,     0,
       0,   465,   466,   467,   468,     0,   469,   470,     0,   471,
     472,     0,   473,   474,     0,     0,   475,     0,     0,   476,
       0,   477,     0,   478,   479,   480,     0,     0,     0,     0,
       0,     0,   481,     0,     0,   482,     0,     0,     0,   483,
     484,   485,   486,   487,   488,     0,     0,     0,     0,     0,
       0,   489,   490,     0,   491,   492,   493,     0,   139,   494,
     140,   141,   142,   143,   144,     0,     0,   145,     0,     0,
       0,   146,     0,     0,   147,     0,   148,   149,   150,   151,
     152,   153,   154,   155,     0,   156,     0,     0,     0,   157,
       0,     0,     0,   158,     0,     0,   159,   160,   161,     0,
     162,     0,   163,   164,     0,     0,   165,     0,     0,   166,
     167,     0,   168,   169,     0,   170,   171,     0,   172,   173,
     174,   175,   176,   177,   178,     0,   179,   180,   181,   182,
     183,   184,   185,     0,   186,   187,   188,   189,   190,   191,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   199,
     200,  4434,   201,     0,     0,   202,     0,     0,   203,     0,
       0,     0,   204,     0,     0,     0,   205,   206,   207,     0,
       0,   208,     0,     0,     0,     0,   209,   210,     0,     0,
       0,     0,   211,     0,   212,     0,     0,     0,   213,     0,
     214,   215,   216,   217,     0,     0,     0,   218,     0,     0,
     219,   220,   221,     0,     0,     0,   222,     0,   223,   224,
       0,   225,   226,   227,     0,     0,   228,   229,     0,   230,
     231,   232,   233,   234,   235,     0,  4435,   236,   237,   238,
       0,     0,   239,   240,     0,   241,   242,   243,     0,     0,
     244,     0,     0,     0,   245,     0,   246,     0,   247,     0,
     248,   249,   250,   251,   252,   253,     0,   254,     0,     0,
       0,   255,   256,   257,     0,   258,     0,     0,   259,   260,
       0,     0,     0,   261,   262,   263,   264,     0,     0,   265,
     266,   267,     0,   268,     0,   269,     0,     0,     0,     0,
     270,   271,     0,     0,     0,   272,     0,   273,   274,     0,
     275,   276,     0,     0,     0,   277,     0,     0,   278,   279,
     280,     0,     0,   281,     0,     0,   282,   283,     0,     0,
       0,     0,     0,   284,   285,     0,   286,     0,   287,     0,
     288,   289,     0,     0,     0,     0,     0,     0,     0,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,     0,   306,   307,   308,     0,
     309,   310,   311,   312,     0,   313,   314,     0,     0,     0,
       0,   315,   316,   317,   318,   319,   320,     0,     0,   321,
     322,     0,   323,     0,   324,     0,   325,   326,   327,   328,
     329,   330,   331,   332,   333,     0,     0,   334,   335,     0,
       0,   336,   337,   338,   339,     0,     0,     0,   340,   341,
       0,     0,     0,     0,   342,   343,   344,     0,   345,   346,
     347,   348,     0,   349,   350,     0,     0,     0,     0,     0,
       0,     0,     0,   351,   352,   353,     0,     0,   354,     0,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,     0,     0,   367,   368,   369,     0,   370,     0,
     371,   372,   373,   374,   375,     0,   376,   377,   378,     0,
       0,   379,     0,     0,     0,   380,   381,   382,   383,   384,
       0,     0,   385,   386,   387,   388,   389,     0,   390,   391,
       0,   392,   393,   394,     0,     0,   395,     0,   396,     0,
     397,   398,     0,   399,   400,     0,     0,     0,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,     0,   411,
     412,     0,     0,     0,   413,   414,   415,   416,     0,     0,
       0,   417,     0,     0,     0,   418,     0,   419,   420,   421,
     422,   423,     0,   424,   425,   426,   427,   428,   429,     0,
       0,     0,     0,     0,     0,   430,   431,     0,   432,     0,
       0,   433,     0,     0,   434,   435,   436,     0,     0,   437,
     438,     0,   439,   440,   441,   442,   443,   444,     0,     0,
     445,   446,   447,   448,     0,   449,   450,     0,   451,     0,
     452,   453,   454,   455,     0,     0,   456,   457,     0,   458,
     459,   460,   461,     0,     0,     0,     0,     0,   462,   463,
     464,     0,     0,     0,   465,   466,   467,   468,     0,   469,
     470,     0,   471,   472,     0,   473,   474,     0,     0,   475,
       0,     0,   476,     0,   477,     0,   478,   479,   480,     0,
       0,     0,     0,     0,     0,   481,     0,     0,   482,     0,
       0,     0,   483,   484,   485,   486,   487,   488,     0,     0,
       0,     0,     0,     0,   489,   490,     0,   491,   492,   493,
       0,   139,   494,   140,   141,   142,   143,   144,     0,     0,
     145,     0,     0,     0,   146,     0,     0,   147,     0,   148,
     149,   150,   151,   152,   153,   154,   155,     0,   156,     0,
       0,     0,   157,     0,     0,     0,   158,     0,     0,   159,
     160,   161,     0,   162,     0,   163,   164,     0,     0,   165,
       0,     0,   166,   167,     0,   168,   169,     0,   170,   171,
       0,   172,   173,   174,   175,   176,   177,   178,     0,   179,
     180,   181,   182,   183,   184,   185,     0,   186,   187,   188,
     189,   190,   191,   192,   193,     0,   194,   195,     0,   196,
     197,   198,   199,   200,     0,   201,     0,     0,   202,     0,
       0,   203,     0,     0,     0,   204,     0,     0,     0,   205,
     206,   207,     0,     0,   208,     0,     0,     0,     0,   209,
     210,     0,     0,     0,     0,   211,     0,   212,     0,     0,
       0,   213,     0,   214,   215,   216,   217,     0,     0,     0,
     218,     0,     0,   219,   220,   221,     0,     0,     0,   222,
       0,   223,   224,     0,   225,   226,   227,     0,     0,   228,
     229,     0,   230,   231,   232,   233,   234,   235,     0,     0,
     236,   237,   238,     0,     0,   239,   240,     0,   241,   242,
     243,     0,     0,   244,     0,     0,     0,   245,     0,   246,
       0,   247,     0,   248,   249,   250,   251,   252,   253,     0,
     254,     0,     0,     0,   255,   256,   257,     0,   258,     0,
       0,   259,   260,     0,     0,     0,   261,   262,   263,   264,
       0,     0,   265,   266,   267,     0,   268,     0,   269,     0,
       0,     0,     0,   270,   271,     0,     0,     0,   272,     0,
     273,   274,     0,   275,   276,     0,     0,     0,   277,     0,
       0,   278,   279,   280,     0,     0,   281,     0,     0,   282,
     283,     0,     0,     0,     0,     0,   284,   285,     0,   286,
       0,   287,     0,   288,   289,     0,     0,     0,     0,     0,
       0,     0,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,     0,   306,
     307,   308,     0,   309,   310,   311,   312,     0,   313,   314,
       0,     0,     0,     0,   315,   316,   317,   318,   319,   320,
       0,     0,   321,   322,     0,   323,     0,   324,     0,   325,
     326,   327,   328,   329,   330,   331,   332,   333,     0,     0,
     334,   335,     0,     0,   336,   337,   338,   339,     0,     0,
       0,   340,   341,     0,     0,     0,     0,   342,   343,   344,
       0,   345,   346,   347,   348,     0,   349,   350,     0,     0,
       0,     0,     0,     0,     0,     0,   351,   352,   353,     0,
       0,   354,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,     0,     0,   367,   368,   369,
       0,   370,     0,   371,   372,   373,   374,   375,     0,   376,
     377,   378,     0,     0,   379,     0,     0,     0,   380,   381,
     382,   383,   384,     0,     0,   385,   386,   387,   388,   389,
       0,   390,   391,     0,   392,   393,   394,     0,     0,   395,
       0,   396,     0,   397,   398,     0,   399,   400,     0,     0,
       0,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,     0,   411,   412,     0,     0,     0,   413,   414,   415,
     416,     0,     0,     0,   417,     0,     0,     0,   418,     0,
     419,   420,   421,   422,   423,     0,   424,   425,   426,   427,
     428,   429,     0,     0,     0,   567,     0,     0,   430,   431,
       0,   432,     0,     0,   433,     0,     0,   434,   435,   436,
       0,     0,   437,   438,     0,   439,   440,   441,   442,   443,
     444,     0,     0,   445,   446,   447,   448,     0,   449,   450,
       0,   451,     0,   452,   453,   454,   455,     0,     0,   456,
     457,     0,   458,   459,   460,   461,     0,     0,     0,     0,
       0,   462,   463,   464,     0,     0,     0,   465,   466,   467,
     468,     0,   469,   470,     0,   471,   472,     0,   473,   474,
       0,     0,   475,     0,     0,   476,     0,   477,     0,   478,
     479,   480,     0,     0,     0,     0,     0,     0,   481,     0,
       0,   482,     0,     0,     0,   483,   484,   485,   486,   487,
     488,     0,     0,     0,     0,     0,     0,   489,   490,     0,
     491,   492,   493,     0,   139,   494,   140,   141,   142,   143,
     144,     0,     0,   145,     0,     0,     0,   146,     0,     0,
     147,     0,   148,   149,   150,   151,   152,   153,   154,   155,
       0,   156,     0,     0,     0,   157,     0,     0,     0,   158,
       0,     0,   159,   160,   161,     0,   162,     0,   163,   164,
       0,     0,   165,     0,     0,   166,   167,     0,   168,   169,
       0,   170,   171,     0,   172,   173,   174,   175,   176,   177,
     178,     0,   179,   180,   181,   182,   183,   184,   185,     0,
     186,   187,   188,   189,   190,   191,   192,   193,     0,   194,
     195,     0,   196,   197,   198,   199,   200,     0,   201,     0,
       0,   202,     0,     0,   203,     0,     0,     0,   204,     0,
       0,     0,   205,   206,   207,     0,     0,   208,     0,     0,
       0,     0,   209,   210,     0,     0,     0,     0,   211,     0,
     212,     0,     0,     0,   213,     0,   214,   215,   216,   217,
       0,     0,     0,   218,     0,     0,   219,   220,   221,     0,
       0,     0,   222,     0,   223,   224,     0,   225,   226,   227,
       0,     0,   228,   229,     0,   230,   231,   232,   233,   234,
     235,     0,     0,   236,   237,   238,     0,     0,   239,   240,
       0,   241,   242,   243,     0,     0,   244,     0,     0,     0,
     245,  1093,   246,     0,   247,     0,   248,   249,   250,   251,
     252,   253,     0,   254,     0,     0,     0,   255,   256,   257,
       0,   258,     0,     0,   259,   260,     0,     0,     0,   261,
     262,   263,   264,     0,     0,   265,   266,   267,     0,   268,
       0,   269,     0,     0,     0,     0,   270,   271,     0,     0,
       0,   272,     0,   273,   274,     0,   275,   276,     0,     0,
       0,   277,     0,     0,   278,   279,   280,     0,     0,   281,
       0,     0,   282,   283,     0,     0,     0,     0,     0,   284,
     285,     0,   286,     0,   287,     0,   288,   289,     0,     0,
       0,     0,     0,     0,     0,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,     0,   306,   307,   308,     0,   309,   310,   311,   312,
       0,   313,   314,     0,     0,     0,     0,   315,   316,   317,
     318,   319,   320,     0,     0,   321,   322,     0,   323,     0,
     324,     0,   325,   326,   327,   328,   329,   330,   331,   332,
     333,     0,     0,   334,   335,     0,     0,   336,   337,   338,
     339,     0,     0,     0,   340,   341,     0,     0,     0,     0,
     342,   343,   344,     0,   345,   346,   347,   348,     0,   349,
     350,     0,     0,     0,     0,     0,     0,     0,     0,   351,
     352,   353,     0,     0,   354,     0,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,     0,     0,
     367,   368,   369,     0,   370,     0,   371,   372,   373,   374,
     375,     0,   376,   377,   378,     0,     0,   379,     0,     0,
       0,   380,   381,   382,   383,   384,     0,     0,   385,   386,
     387,   388,   389,     0,   390,   391,     0,   392,   393,   394,
       0,     0,   395,     0,   396,     0,   397,   398,     0,   399,
     400,     0,     0,     0,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,     0,   411,   412,     0,     0,     0,
     413,   414,   415,   416,     0,     0,     0,   417,     0,     0,
       0,   418,     0,   419,   420,   421,   422,   423,     0,   424,
     425,   426,   427,   428,   429,     0,     0,     0,     0,     0,
       0,   430,   431,     0,   432,     0,     0,   433,     0,     0,
     434,   435,   436,     0,     0,   437,   438,     0,   439,   440,
     441,   442,   443,   444,     0,     0,   445,   446,   447,   448,
       0,   449,   450,     0,   451,     0,   452,   453,   454,   455,
       0,     0,   456,   457,     0,   458,   459,   460,   461,     0,
       0,     0,     0,     0,   462,   463,   464,     0,     0,     0,
     465,   466,   467,   468,     0,   469,   470,     0,   471,   472,
       0,   473,   474,     0,     0,   475,     0,     0,   476,     0,
     477,     0,   478,   479,   480,     0,     0,     0,     0,     0,
       0,   481,     0,     0,   482,     0,     0,     0,   483,   484,
     485,   486,   487,   488,     0,     0,     0,     0,     0,     0,
     489,   490,     0,   491,   492,   493,     0,   139,   494,   140,
     141,   142,   143,   144,     0,     0,   145,     0,     0,     0,
     146,     0,     0,   147,     0,   148,   149,   150,   151,   152,
     153,   154,   155,     0,   156,     0,     0,     0,   157,     0,
       0,     0,   158,     0,     0,   159,   160,   161,     0,   162,
       0,   163,   164,     0,     0,   165,     0,     0,   166,   167,
       0,   168,   169,     0,   170,   171,     0,   172,   173,   174,
     175,   176,   177,   178,     0,   179,   180,   181,   182,   183,
     184,   185,     0,   186,   187,   188,   189,   190,   191,   192,
     193,     0,   194,   195,     0,   196,   197,   198,   199,   200,
       0,   201,     0,     0,   202,     0,     0,   203,     0,     0,
       0,   204,     0,     0,     0,   205,   206,   207,     0,     0,
     208,     0,     0,     0,     0,   209,   210,     0,     0,     0,
     917,   211,     0,   212,     0,     0,     0,   213,     0,   214,
     215,   216,   217,     0,     0,     0,   218,     0,     0,   219,
     220,   221,     0,     0,     0,   222,     0,   223,   224,     0,
     225,   226,   227,     0,     0,   228,   229,     0,   230,   231,
     232,   233,   234,   235,     0,     0,   236,   237,   238,     0,
       0,   239,   240,     0,   241,   242,   243,     0,     0,   244,
       0,     0,     0,   245,     0,   246,     0,   247,     0,   248,
     249,   250,   251,   252,   253,     0,   254,     0,     0,     0,
     255,   256,   257,     0,   258,     0,     0,   259,   260,     0,
       0,     0,   261,   262,   263,   264,     0,     0,   265,   266,
     267,     0,   268,     0,   269,     0,     0,     0,     0,   270,
     271,     0,     0,     0,   272,     0,   273,   274,     0,   275,
     276,     0,     0,     0,   277,     0,     0,   278,   279,   280,
       0,     0,   281,     0,     0,   282,   283,     0,     0,     0,
       0,     0,   284,   285,     0,   286,     0,   287,     0,   288,
     289,     0,     0,     0,     0,     0,     0,     0,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,     0,   306,   307,   308,     0,   309,
     310,   311,   312,     0,   313,   314,     0,     0,     0,     0,
     315,   316,   317,   318,   319,   320,     0,     0,   321,   322,
       0,   323,     0,   324,     0,   325,   326,   327,   328,   329,
     330,   331,   332,   333,     0,     0,   334,   335,     0,     0,
     336,   337,   338,   339,     0,     0,     0,   340,   341,     0,
       0,     0,     0,   342,   343,   344,     0,   345,   346,   347,
     348,     0,   349,   350,     0,     0,     0,     0,     0,     0,
       0,     0,   351,   352,   353,     0,     0,   354,     0,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,     0,     0,   367,   368,   369,     0,   370,     0,   371,
     372,   373,   374,   375,     0,   376,   377,   378,     0,     0,
     379,     0,     0,     0,   380,   381,   382,   383,   384,     0,
       0,   385,   386,   387,   388,   389,     0,   390,   391,     0,
     392,   393,   394,     0,     0,   395,     0,   396,     0,   397,
     398,     0,   399,   400,     0,     0,     0,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,     0,   411,   412,
       0,     0,     0,   413,   414,   415,   416,     0,     0,     0,
     417,     0,     0,     0,   418,     0,   419,   420,   421,   422,
     423,     0,   424,   425,   426,   427,   428,   429,     0,     0,
       0,     0,     0,     0,   430,   431,     0,   432,     0,     0,
     433,     0,     0,   434,   435,   436,     0,     0,   437,   438,
       0,   439,   440,   441,   442,   443,   444,     0,     0,   445,
     446,   447,   448,     0,   449,   450,     0,   451,     0,   452,
     453,   454,   455,     0,     0,   456,   457,     0,   458,   459,
     460,   461,     0,     0,     0,     0,     0,  1880,   463,   464,
       0,     0,     0,   465,   466,   467,   468,     0,   469,   470,
       0,   471,   472,     0,   473,   474,     0,     0,   475,     0,
       0,   476,     0,   477,     0,   478,   479,   480,     0,     0,
       0,     0,     0,     0,   481,     0,     0,   482,     0,     0,
       0,   483,   484,   485,   486,   487,   488,     0,     0,     0,
       0,     0,     0,   489,   490,     0,   491,   492,   493,     0,
     139,   494,   140,   141,   142,   143,   144,     0,     0,   145,
       0,     0,     0,   146,     0,     0,   147,     0,   148,   149,
     150,   151,   152,   153,   154,   155,     0,   156,     0,     0,
       0,   157,     0,     0,     0,   158,     0,     0,   159,   160,
     161,     0,   162,     0,   163,   164,     0,     0,   165,     0,
       0,   166,   167,     0,   168,   169,     0,   170,   171,     0,
     172,   173,   174,   175,   176,   177,   178,     0,   179,   180,
     181,   182,   183,   184,   185,     0,   186,   187,   188,   189,
     190,   191,   192,   193,     0,   194,   195,     0,   196,   197,
     198,   199,   200,     0,   201,     0,     0,   202,     0,     0,
     203,     0,     0,     0,   204,     0,     0,     0,   205,   206,
     207,     0,     0,   208,     0,     0,     0,     0,   209,   210,
       0,     0,     0,  2087,   211,     0,   212,     0,     0,     0,
     213,     0,   214,   215,   216,   217,     0,     0,     0,   218,
       0,     0,   219,   220,   221,     0,     0,     0,   222,     0,
     223,   224,     0,   225,   226,   227,     0,     0,   228,   229,
       0,   230,   231,   232,   233,   234,   235,     0,     0,   236,
     237,   238,     0,     0,   239,   240,     0,   241,   242,   243,
       0,     0,   244,     0,     0,     0,   245,     0,   246,     0,
     247,     0,   248,   249,   250,   251,   252,   253,     0,   254,
       0,     0,     0,   255,   256,   257,     0,   258,     0,     0,
     259,   260,     0,     0,     0,   261,   262,   263,   264,     0,
       0,   265,   266,   267,     0,   268,     0,   269,     0,     0,
       0,     0,   270,   271,     0,     0,     0,   272,     0,   273,
     274,     0,   275,   276,     0,     0,     0,   277,     0,     0,
     278,   279,   280,     0,     0,   281,     0,     0,   282,   283,
       0,     0,     0,     0,     0,   284,   285,     0,   286,     0,
     287,     0,   288,   289,     0,     0,     0,     0,     0,     0,
       0,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,     0,   306,   307,
     308,     0,   309,   310,   311,   312,     0,   313,   314,     0,
       0,     0,     0,   315,   316,   317,   318,   319,   320,     0,
       0,   321,   322,     0,   323,     0,   324,     0,   325,   326,
     327,   328,   329,   330,   331,   332,   333,     0,     0,   334,
     335,     0,     0,   336,   337,   338,   339,     0,     0,     0,
     340,   341,     0,     0,     0,     0,   342,   343,   344,     0,
     345,   346,   347,   348,     0,   349,   350,     0,     0,     0,
       0,     0,     0,     0,     0,   351,   352,   353,     0,     0,
     354,     0,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,     0,     0,   367,   368,   369,     0,
     370,     0,   371,   372,   373,   374,   375,     0,   376,   377,
     378,     0,     0,   379,     0,     0,     0,   380,   381,   382,
     383,   384,     0,     0,   385,   386,   387,   388,   389,     0,
     390,   391,     0,   392,   393,   394,     0,     0,   395,     0,
     396,     0,   397,   398,     0,   399,   400,     0,     0,     0,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
       0,   411,   412,     0,     0,     0,   413,   414,   415,   416,
       0,     0,     0,   417,     0,     0,     0,   418,     0,   419,
     420,   421,   422,   423,     0,   424,   425,   426,   427,   428,
     429,     0,     0,     0,     0,     0,     0,   430,   431,     0,
     432,     0,     0,   433,     0,     0,   434,   435,   436,     0,
       0,   437,   438,     0,   439,   440,   441,   442,   443,   444,
       0,     0,   445,   446,   447,   448,     0,   449,   450,     0,
     451,     0,   452,   453,   454,   455,     0,     0,   456,   457,
       0,   458,   459,   460,   461,     0,     0,     0,     0,     0,
     462,   463,   464,     0,     0,     0,   465,   466,   467,   468,
       0,   469,   470,     0,   471,   472,     0,   473,   474,     0,
       0,   475,     0,     0,   476,     0,   477,     0,   478,   479,
     480,     0,     0,     0,     0,     0,     0,   481,     0,     0,
     482,     0,     0,     0,   483,   484,   485,   486,   487,   488,
       0,     0,     0,     0,     0,     0,   489,   490,     0,   491,
     492,   493,     0,   139,   494,   140,   141,   142,   143,   144,
       0,     0,   145,     0,     0,     0,   146,     0,     0,   147,
       0,   148,   149,   150,   151,   152,   153,   154,   155,     0,
     156,     0,     0,     0,   157,     0,     0,     0,   158,     0,
       0,   159,   160,   161,     0,   162,     0,   163,   164,     0,
       0,   165,     0,     0,   166,   167,     0,   168,   169,     0,
     170,   171,     0,   172,   173,   174,   175,   176,   177,   178,
       0,   179,   180,   181,   182,   183,   184,   185,     0,   186,
     187,   188,   189,   190,   191,   192,   193,     0,   194,   195,
       0,   196,   197,   198,   199,   200,     0,   201,     0,     0,
     202,     0,     0,   203,     0,     0,     0,   204,     0,     0,
       0,   205,   206,   207,     0,     0,   208,     0,     0,     0,
       0,   209,   210,     0,     0,     0,   917,   211,     0,   212,
       0,     0,     0,   213,     0,   214,   215,   216,   217,     0,
       0,     0,   218,     0,     0,   219,   220,   221,     0,     0,
       0,   222,     0,   223,   224,     0,   225,   226,   227,     0,
       0,   228,   229,     0,   230,   231,   232,   233,   234,   235,
       0,     0,   236,   237,   238,     0,     0,   239,   240,     0,
     241,   242,   243,     0,     0,   244,     0,     0,     0,   245,
       0,   246,     0,   247,     0,   248,   249,   250,   251,   252,
     253,     0,   254,     0,     0,     0,   255,   256,   257,     0,
     258,     0,     0,   259,   260,     0,     0,     0,   261,   262,
     263,   264,     0,     0,   265,   266,   267,     0,   268,     0,
     269,     0,     0,     0,     0,   270,   271,     0,     0,     0,
     272,     0,   273,   274,     0,   275,   276,     0,     0,     0,
     277,     0,     0,   278,   279,   280,     0,     0,   281,     0,
       0,   282,   283,     0,     0,     0,     0,     0,   284,   285,
       0,   286,     0,   287,     0,   288,   289,     0,     0,     0,
       0,     0,     0,     0,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
       0,   306,   307,   308,     0,   309,   310,   311,   312,     0,
     313,   314,     0,     0,     0,     0,   315,   316,   317,   318,
     319,   320,     0,     0,   321,   322,     0,   323,     0,   324,
       0,   325,   326,   327,   328,   329,   330,   331,   332,   333,
       0,     0,   334,   335,     0,     0,   336,   337,   338,   339,
       0,     0,     0,   340,   341,     0,     0,     0,     0,   342,
     343,   344,     0,   345,   346,   347,   348,     0,   349,   350,
       0,     0,     0,     0,     0,     0,     0,     0,   351,   352,
     353,     0,     0,   354,     0,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,     0,     0,   367,
     368,   369,     0,   370,     0,   371,   372,   373,   374,   375,
       0,   376,   377,   378,     0,     0,   379,     0,     0,     0,
     380,   381,   382,   383,   384,     0,     0,   385,   386,   387,
     388,   389,     0,   390,   391,     0,   392,   393,   394,     0,
       0,   395,     0,   396,     0,   397,   398,     0,   399,   400,
       0,     0,     0,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,     0,   411,   412,     0,     0,     0,   413,
     414,   415,   416,     0,     0,     0,   417,     0,     0,     0,
     418,     0,   419,   420,   421,   422,   423,     0,   424,   425,
     426,   427,   428,   429,     0,     0,     0,     0,     0,     0,
     430,   431,     0,   432,     0,     0,   433,     0,     0,   434,
     435,   436,     0,     0,   437,   438,     0,   439,   440,   441,
     442,   443,   444,     0,     0,   445,   446,   447,   448,     0,
     449,   450,     0,   451,     0,   452,   453,   454,   455,     0,
       0,   456,   457,     0,   458,   459,   460,   461,     0,     0,
       0,     0,     0,   462,   463,   464,     0,     0,     0,   465,
     466,   467,   468,     0,   469,   470,     0,   471,   472,     0,
     473,   474,     0,     0,   475,     0,     0,   476,     0,   477,
       0,   478,   479,   480,     0,     0,     0,     0,     0,     0,
     481,     0,     0,   482,     0,     0,     0,   483,   484,   485,
     486,   487,   488,     0,     0,     0,     0,     0,     0,   489,
     490,     0,   491,   492,   493,     0,   139,   494,   140,   141,
     142,   143,   144,  2949,     0,   145,     0,     0,     0,   146,
       0,     0,   147,     0,   148,   149,   150,   151,   152,   153,
     154,   155,     0,   156,     0,     0,     0,   157,     0,     0,
       0,   158,     0,     0,   159,   160,   161,     0,   162,     0,
     163,   164,     0,     0,   165,     0,     0,   166,   167,     0,
     168,   169,     0,   170,   171,     0,   172,   173,   174,   175,
     176,   177,   178,     0,   179,   180,   181,   182,   183,   184,
     185,     0,   186,   187,   188,   189,   190,   191,   192,   193,
       0,   194,   195,     0,   196,   197,   198,   199,   200,     0,
     201,     0,     0,   202,     0,     0,   203,     0,     0,     0,
     204,     0,     0,     0,   205,   206,   207,     0,     0,   208,
       0,     0,     0,     0,   209,   210,     0,     0,     0,     0,
     211,     0,   212,     0,     0,     0,   213,     0,   214,   215,
     216,   217,     0,     0,     0,   218,     0,     0,   219,   220,
     221,     0,     0,     0,   222,     0,   223,   224,     0,   225,
     226,   227,     0,     0,   228,   229,     0,   230,   231,   232,
     233,   234,   235,     0,     0,   236,   237,   238,     0,     0,
     239,   240,     0,   241,   242,   243,     0,     0,   244,     0,
       0,     0,   245,     0,   246,     0,   247,     0,   248,   249,
     250,   251,   252,   253,     0,   254,     0,     0,     0,   255,
     256,   257,     0,   258,     0,     0,   259,   260,     0,     0,
       0,   261,   262,   263,   264,     0,     0,   265,   266,   267,
       0,   268,     0,   269,     0,     0,     0,     0,   270,   271,
       0,     0,     0,   272,     0,   273,   274,     0,   275,   276,
       0,     0,     0,   277,     0,     0,   278,   279,   280,     0,
       0,   281,     0,     0,   282,   283,     0,     0,     0,     0,
       0,   284,   285,     0,   286,     0,   287,     0,   288,   289,
       0,     0,     0,     0,     0,     0,     0,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,     0,   306,   307,   308,     0,   309,   310,
     311,   312,     0,   313,   314,     0,     0,     0,     0,   315,
     316,   317,   318,   319,   320,     0,     0,   321,   322,     0,
     323,     0,   324,     0,   325,   326,   327,   328,   329,   330,
     331,   332,   333,     0,     0,   334,   335,     0,     0,   336,
     337,   338,   339,     0,     0,     0,   340,   341,     0,     0,
       0,     0,   342,   343,   344,     0,   345,   346,   347,   348,
       0,   349,   350,     0,     0,     0,     0,     0,     0,     0,
       0,   351,   352,   353,     0,     0,   354,     0,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
       0,     0,   367,   368,   369,     0,   370,     0,   371,   372,
     373,   374,   375,     0,   376,   377,   378,     0,     0,   379,
       0,     0,     0,   380,   381,   382,   383,   384,     0,     0,
     385,   386,   387,   388,   389,     0,   390,   391,     0,   392,
     393,   394,     0,     0,   395,     0,   396,     0,   397,   398,
       0,   399,   400,     0,     0,     0,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,     0,   411,   412,     0,
       0,     0,   413,   414,   415,   416,     0,     0,     0,   417,
       0,     0,     0,   418,     0,   419,   420,   421,   422,   423,
       0,   424,   425,   426,   427,   428,   429,     0,     0,     0,
       0,     0,     0,   430,   431,     0,   432,     0,     0,   433,
       0,     0,   434,   435,   436,     0,     0,   437,   438,     0,
     439,   440,   441,   442,   443,   444,     0,     0,   445,   446,
     447,   448,     0,   449,   450,     0,   451,     0,   452,   453,
     454,   455,     0,     0,   456,   457,     0,   458,   459,   460,
     461,     0,     0,     0,     0,     0,   462,   463,   464,     0,
       0,     0,   465,   466,   467,   468,     0,   469,   470,     0,
     471,   472,     0,   473,   474,     0,     0,   475,     0,     0,
     476,     0,   477,     0,   478,   479,   480,     0,     0,     0,
       0,     0,     0,   481,     0,     0,   482,     0,     0,     0,
     483,   484,   485,   486,   487,   488,     0,     0,     0,     0,
       0,     0,   489,   490,     0,   491,   492,   493,     0,   139,
     494,   140,   141,   142,   143,   144,     0,     0,   145,     0,
       0,     0,   146,     0,     0,   147,     0,   148,   149,   150,
     151,   152,   153,   154,   155,     0,   156,     0,     0,     0,
     157,     0,     0,     0,   158,     0,     0,   159,   160,   161,
       0,   162,     0,   163,   164,     0,     0,   165,     0,     0,
     166,   167,     0,   168,   169,     0,   170,   171,     0,   172,
     173,   174,   175,   176,   177,   178,     0,   179,   180,   181,
     182,   183,   184,   185,     0,   186,   187,   188,   189,   190,
     191,   192,   193,     0,   194,   195,     0,   196,   197,   198,
     199,   200,     0,   201,     0,     0,   202,     0,     0,   203,
       0,     0,     0,   204,     0,     0,     0,   205,   206,   207,
       0,     0,   208,     0,     0,     0,     0,   209,   210,     0,
       0,     0,     0,   211,     0,   212,     0,     0,     0,   213,
       0,   214,   215,   216,   217,     0,     0,     0,   218,     0,
       0,   219,   220,   221,     0,     0,     0,   222,     0,   223,
     224,     0,   225,   226,   227,     0,     0,   228,   229,     0,
     230,   231,   232,   233,   234,   235,     0,     0,   236,   237,
     238,     0,     0,   239,   240,     0,   241,   242,   243,     0,
       0,   244,     0,     0,     0,   245,     0,   246,     0,   247,
       0,   248,   249,   250,   251,   252,   253,     0,   254,     0,
       0,     0,   255,   256,   257,     0,   258,     0,     0,   259,
     260,     0,     0,     0,   261,   262,   263,   264,     0,     0,
     265,   266,   267,     0,   268,     0,   269,     0,     0,     0,
       0,   270,   271,     0,     0,     0,   272,     0,   273,   274,
       0,   275,   276,     0,     0,     0,   277,     0,     0,   278,
     279,   280,     0,     0,   281,     0,     0,   282,   283,     0,
       0,     0,     0,     0,   284,   285,     0,   286,     0,   287,
       0,   288,   289,     0,     0,     0,     0,     0,     0,     0,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,     0,   306,   307,   308,
       0,   309,   310,   311,   312,     0,   313,   314,     0,     0,
       0,     0,   315,   316,   317,   318,   319,   320,     0,     0,
     321,   322,     0,   323,     0,   324,     0,   325,   326,   327,
     328,   329,   330,   331,   332,   333,     0,     0,   334,   335,
       0,     0,   336,   337,   338,   339,     0,     0,     0,   340,
     341,     0,     0,     0,     0,   342,   343,   344,     0,   345,
     346,   347,   348,     0,   349,   350,     0,     0,     0,     0,
       0,     0,     0,     0,   351,   352,   353,     0,     0,   354,
       0,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,     0,     0,   367,   368,   369,  3044,   370,
       0,   371,   372,   373,   374,   375,     0,   376,   377,   378,
       0,     0,   379,     0,     0,     0,   380,   381,   382,   383,
     384,     0,     0,   385,   386,   387,   388,   389,     0,   390,
     391,     0,   392,   393,   394,     0,     0,   395,     0,   396,
       0,   397,   398,     0,   399,   400,     0,     0,     0,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,     0,
     411,   412,     0,     0,     0,   413,   414,   415,   416,     0,
       0,     0,   417,     0,     0,     0,   418,     0,   419,   420,
     421,   422,   423,     0,   424,   425,   426,   427,   428,   429,
       0,     0,     0,     0,     0,     0,   430,   431,     0,   432,
       0,     0,   433,     0,     0,   434,   435,   436,     0,     0,
     437,   438,     0,   439,   440,   441,   442,   443,   444,     0,
       0,   445,   446,   447,   448,     0,   449,   450,     0,   451,
       0,   452,   453,   454,   455,     0,     0,   456,   457,     0,
     458,   459,   460,   461,     0,     0,     0,     0,     0,   462,
     463,   464,     0,     0,     0,   465,   466,   467,   468,     0,
     469,   470,     0,   471,   472,     0,   473,   474,     0,     0,
     475,     0,     0,   476,     0,   477,     0,   478,   479,   480,
       0,     0,     0,     0,     0,     0,   481,     0,     0,   482,
       0,     0,     0,   483,   484,   485,   486,   487,   488,     0,
       0,     0,     0,     0,     0,   489,   490,     0,   491,   492,
     493,     0,   139,   494,   140,   141,   142,   143,   144,     0,
       0,   145,     0,     0,     0,   146,     0,     0,   147,     0,
     148,   149,   150,   151,   152,   153,   154,   155,     0,   156,
       0,     0,     0,   157,     0,     0,     0,   158,     0,     0,
     159,   160,   161,     0,   162,     0,   163,   164,     0,     0,
     165,     0,     0,   166,   167,     0,   168,   169,     0,   170,
     171,     0,   172,   173,   174,   175,   176,   177,   178,     0,
     179,   180,   181,   182,   183,   184,   185,     0,   186,   187,
     188,   189,   190,   191,   192,   193,     0,   194,   195,     0,
     196,   197,   198,   199,   200,     0,   201,     0,     0,   202,
       0,     0,   203,     0,     0,     0,   204,     0,     0,     0,
     205,   206,   207,     0,     0,   208,     0,     0,     0,     0,
     209,   210,     0,     0,     0,     0,   211,     0,   212,     0,
       0,     0,   213,     0,   214,   215,   216,   217,     0,     0,
       0,   218,     0,     0,   219,   220,   221,     0,     0,     0,
     222,     0,   223,   224,     0,   225,   226,   227,     0,     0,
     228,   229,     0,   230,   231,   232,   233,   234,   235,     0,
       0,   236,   237,   238,     0,     0,   239,   240,     0,   241,
     242,   243,     0,     0,   244,     0,     0,     0,   245,     0,
     246,     0,   247,     0,   248,   249,   250,   251,   252,   253,
       0,   254,     0,     0,     0,   255,   256,   257,     0,   258,
       0,     0,   259,   260,     0,     0,     0,   261,   262,   263,
     264,     0,     0,   265,   266,   267,     0,   268,     0,   269,
       0,     0,     0,     0,   270,   271,     0,     0,     0,   272,
       0,   273,   274,     0,   275,   276,     0,     0,     0,   277,
       0,     0,   278,   279,   280,     0,     0,   281,     0,     0,
     282,   283,     0,     0,     0,     0,     0,   284,   285,     0,
     286,     0,   287,     0,   288,   289,     0,     0,     0,     0,
       0,     0,     0,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,     0,
     306,   307,   308,     0,   309,   310,   311,   312,     0,   313,
     314,     0,     0,     0,     0,   315,   316,   317,   318,   319,
     320,     0,     0,   321,   322,     0,   323,     0,   324,     0,
     325,   326,   327,   328,   329,   330,   331,   332,   333,     0,
       0,   334,   335,     0,     0,   336,   337,   338,   339,     0,
       0,     0,   340,   341,     0,     0,     0,     0,   342,   343,
     344,     0,   345,   346,   347,   348,     0,   349,   350,     0,
       0,     0,     0,     0,     0,     0,     0,   351,   352,   353,
       0,     0,   354,     0,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,     0,     0,   367,   368,
     369,     0,   370,     0,   371,   372,   373,   374,   375,     0,
     376,   377,   378,     0,     0,   379,     0,     0,     0,   380,
     381,   382,   383,   384,     0,     0,   385,   386,   387,   388,
     389,     0,   390,   391,     0,   392,   393,   394,     0,     0,
     395,     0,   396,     0,   397,   398,     0,   399,   400,     0,
       0,     0,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,     0,   411,   412,     0,     0,     0,   413,   414,
     415,   416,     0,     0,     0,   417,     0,     0,     0,   418,
       0,   419,   420,   421,   422,   423,     0,   424,   425,   426,
     427,   428,   429,     0,     0,     0,     0,     0,     0,   430,
     431,     0,   432,     0,     0,   433,     0,     0,   434,   435,
     436,     0,     0,   437,   438,     0,   439,   440,   441,   442,
     443,   444,     0,     0,   445,   446,   447,   448,     0,   449,
     450,     0,   451,     0,   452,   453,   454,   455,     0,   136,
     456,   457,     0,   458,   459,   460,   461,     0,     0,     0,
       0,     0,   462,   463,   464,     0,     0,     0,   465,   466,
     467,   468,     0,   469,   470,     0,   471,   472,     0,   473,
     474,     0,     0,   475,     0,     0,   476,     0,   477,     0,
     478,   479,   480,     0,     0,     0,     0,     0,     0,   481,
       0,     0,   482,     0,     0,     0,   483,   484,   485,   486,
     487,   488,     0,     0,     0,     0,     0,     0,   489,   490,
       0,   491,   492,   493,     0,   139,   494,   140,   141,   142,
     143,   144,     0,     0,   145,     0,     0,     0,   146,     0,
       0,   147,     0,   148,   149,   150,   151,   152,   153,   154,
     155,     0,   156,     0,     0,     0,   157,     0,     0,     0,
     158,     0,     0,   159,   160,   161,     0,   162,     0,   163,
     164,     0,     0,   165,     0,     0,   166,   167,     0,   168,
     169,     0,   170,   171,     0,   172,   173,   174,   175,   176,
     177,   178,     0,   179,   180,   181,   182,   183,   184,   185,
       0,   186,   187,   188,   189,   190,   191,   192,   193,     0,
     194,   195,     0,   196,   197,   198,   199,   200,     0,   201,
       0,     0,   202,     0,     0,   203,     0,     0,     0,   204,
       0,     0,     0,   205,   206,   207,     0,     0,   208,     0,
       0,     0,     0,   209,   210,     0,     0,     0,     0,   211,
       0,   212,     0,     0,     0,   213,     0,   214,   215,   216,
     217,     0,     0,     0,   218,     0,     0,   219,   220,   221,
       0,     0,     0,   222,     0,   223,   224,     0,   225,   226,
     227,     0,     0,   228,   229,     0,   230,   231,   232,   233,
     234,   235,     0,     0,   236,   237,   238,     0,     0,   239,
     240,     0,   241,   242,   243,     0,     0,   244,     0,     0,
       0,   245,     0,   246,     0,   247,     0,   248,   249,   250,
     251,   252,   253,     0,   254,     0,     0,     0,   255,   256,
     257,     0,   258,     0,     0,   259,   260,     0,     0,     0,
     261,   262,   263,   264,     0,     0,   265,   266,   267,     0,
     268,     0,   269,     0,     0,     0,     0,   270,   271,     0,
       0,     0,   272,     0,   273,   274,     0,   275,   276,     0,
       0,     0,   277,     0,     0,   278,   279,   280,     0,     0,
     281,     0,     0,   282,   283,     0,     0,     0,     0,     0,
     284,   285,     0,   286,     0,   287,     0,   288,   289,     0,
       0,     0,     0,     0,     0,     0,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,     0,   306,   307,   308,     0,   309,   310,   311,
     312,     0,   313,   314,     0,     0,     0,     0,   315,   316,
     317,   318,   319,   320,     0,     0,   321,   322,     0,   323,
       0,   324,     0,   325,   326,   327,   328,   329,   330,   331,
     332,   333,     0,     0,   334,   335,     0,     0,   336,   337,
     338,   339,     0,     0,     0,   340,   341,     0,     0,     0,
       0,   342,   343,   344,     0,   345,   346,   347,   348,     0,
     349,   350,     0,     0,     0,     0,     0,     0,     0,     0,
     351,   352,   353,     0,     0,   354,     0,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,     0,
       0,   367,   368,   369,  4122,   370,     0,   371,   372,   373,
     374,   375,     0,   376,   377,   378,     0,     0,   379,     0,
       0,     0,   380,   381,   382,   383,   384,     0,     0,   385,
     386,   387,   388,   389,     0,   390,   391,     0,   392,   393,
     394,     0,     0,   395,     0,   396,     0,   397,   398,     0,
     399,   400,     0,     0,     0,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,     0,   411,   412,     0,     0,
       0,   413,   414,   415,   416,     0,     0,     0,   417,     0,
       0,     0,   418,     0,   419,   420,   421,   422,   423,     0,
     424,   425,   426,   427,   428,   429,     0,     0,     0,     0,
       0,     0,   430,   431,     0,   432,     0,     0,   433,     0,
       0,   434,   435,   436,     0,     0,   437,   438,     0,   439,
     440,   441,   442,   443,   444,     0,     0,   445,   446,   447,
     448,     0,   449,   450,     0,   451,     0,   452,   453,   454,
     455,     0,     0,   456,   457,     0,   458,   459,   460,   461,
       0,     0,     0,     0,     0,   462,   463,   464,     0,     0,
       0,   465,   466,   467,   468,     0,   469,   470,     0,   471,
     472,     0,   473,   474,     0,     0,   475,     0,     0,   476,
       0,   477,     0,   478,   479,   480,     0,     0,     0,     0,
       0,     0,   481,     0,     0,   482,     0,     0,     0,   483,
     484,   485,   486,   487,   488,     0,     0,     0,     0,     0,
       0,   489,   490,     0,   491,   492,   493,     0,   139,   494,
     140,   141,   142,   143,   144,     0,     0,   145,     0,     0,
       0,   146,     0,     0,   147,     0,   148,   149,   150,   151,
     152,   153,   154,   155,     0,   156,     0,     0,     0,   157,
       0,     0,     0,   158,     0,     0,   159,   160,   161,     0,
     162,     0,   163,   164,     0,     0,   165,     0,     0,   166,
     167,     0,   168,   169,     0,   170,   171,     0,   172,   173,
     174,   175,   176,   177,   178,     0,   179,   180,   181,   182,
     183,   184,   185,     0,   186,   187,   188,   189,   190,   191,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   199,
     200,     0,   201,     0,     0,   202,     0,     0,   203,     0,
       0,     0,   204,     0,     0,     0,   205,   206,   207,     0,
       0,   208,     0,     0,     0,     0,   209,   210,     0,     0,
       0,     0,   211,     0,   212,     0,     0,     0,   213,     0,
     214,   215,   216,   217,     0,     0,     0,   218,     0,     0,
     219,   220,   221,     0,     0,     0,   222,     0,   223,   224,
       0,   225,   226,   227,     0,     0,   228,   229,     0,   230,
     231,   232,   233,   234,   235,     0,     0,   236,   237,   238,
       0,     0,   239,   240,     0,   241,   242,   243,     0,     0,
     244,     0,     0,     0,   245,     0,   246,     0,   247,     0,
     248,   249,   250,   251,   252,   253,     0,   254,     0,     0,
       0,   255,   256,   257,     0,   258,     0,     0,   259,   260,
       0,     0,     0,   261,   262,   263,   264,     0,     0,   265,
     266,   267,     0,   268,     0,   269,     0,     0,     0,     0,
     270,   271,     0,     0,     0,   272,     0,   273,   274,     0,
     275,   276,     0,     0,     0,   277,     0,     0,   278,   279,
     280,     0,     0,   281,     0,     0,   282,   283,     0,     0,
       0,     0,     0,   284,   285,     0,   286,     0,   287,     0,
     288,   289,     0,     0,     0,     0,     0,     0,     0,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,     0,   306,   307,   308,     0,
     309,   310,   311,   312,     0,   313,   314,     0,     0,     0,
       0,   315,   316,   317,   318,   319,   320,     0,     0,   321,
     322,     0,   323,     0,   324,     0,   325,   326,   327,   328,
     329,   330,   331,   332,   333,     0,     0,   334,   335,     0,
       0,   336,   337,   338,   339,     0,     0,     0,   340,   341,
       0,     0,     0,     0,   342,   343,   344,     0,   345,   346,
     347,   348,     0,   349,   350,     0,     0,     0,     0,     0,
       0,     0,     0,   351,   352,   353,     0,     0,   354,     0,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,     0,     0,   367,   368,   369,     0,   370,     0,
     371,   372,   373,   374,   375,     0,   376,   377,   378,     0,
       0,   379,     0,     0,     0,   380,   381,   382,   383,   384,
       0,     0,   385,   386,   387,   388,   389,     0,   390,   391,
       0,   392,   393,   394,     0,     0,   395,     0,   396,     0,
     397,   398,     0,   399,   400,     0,     0,     0,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,     0,   411,
     412,     0,     0,     0,   413,   414,   415,   416,     0,     0,
       0,   417,     0,     0,     0,   418,     0,   419,   420,   421,
     422,   423,     0,   424,   425,   426,   427,   428,   429,     0,
       0,     0,     0,     0,     0,   430,   431,     0,   432,     0,
       0,   433,     0,     0,   434,   435,   436,     0,     0,   437,
     438,     0,   439,   440,   441,   442,   443,   444,     0,     0,
     445,   446,   447,   448,     0,   449,   450,     0,   451,     0,
     452,   453,   454,   455,     0,     0,   456,   457,     0,   458,
     459,   460,   461,     0,     0,     0,     0,     0,   462,   463,
     464,     0,     0,     0,   465,   466,   467,   468,     0,   469,
     470,     0,   471,   472,     0,   473,   474,     0,     0,   475,
       0,     0,   476,     0,   477,     0,   478,   479,   480,     0,
       0,     0,     0,     0,     0,   481,     0,     0,   482,     0,
       0,     0,   483,   484,   485,   486,   487,   488,     0,     0,
       0,     0,     0,     0,   489,   490,     0,   491,   492,   493,
       0,   139,   494,   140,   141,   142,   143,   144,     0,     0,
     145,     0,     0,     0,   146,     0,     0,   147,     0,   148,
     149,   150,   151,   152,   153,   154,   155,     0,   156,     0,
       0,     0,   157,     0,     0,     0,   158,     0,     0,   159,
     160,   161,     0,   162,     0,   163,   164,     0,     0,   165,
       0,     0,   166,   167,     0,   168,   169,     0,   170,   171,
       0,   172,   173,   174,   175,   176,   177,   178,     0,   179,
     180,   181,   182,   183,   184,   185,     0,   186,   187,   188,
     189,   190,   191,   192,   193,     0,   194,   195,     0,   196,
     197,   198,   199,   200,     0,   201,     0,     0,   202,     0,
       0,   203,     0,     0,     0,   204,     0,     0,     0,   205,
     206,   207,     0,     0,   208,     0,     0,     0,     0,   209,
     210,     0,     0,     0,     0,   211,     0,   212,     0,     0,
       0,   213,     0,   214,   215,   216,   217,     0,     0,     0,
     218,     0,     0,   219,   220,   221,     0,     0,     0,   222,
       0,   223,   224,     0,   225,   226,   227,     0,     0,   228,
     229,     0,   230,   231,   232,   233,   234,   235,     0,     0,
     236,   237,   238,     0,     0,   239,   240,     0,   241,  1803,
     243,     0,     0,   244,     0,     0,     0,   245,     0,   246,
       0,   247,     0,   248,   249,   250,   251,   252,   253,     0,
     254,     0,     0,     0,   255,   256,   257,     0,   258,     0,
       0,   259,   260,     0,     0,     0,   261,   262,   263,   264,
       0,     0,   265,   266,   267,     0,   268,     0,   269,     0,
       0,     0,     0,   270,   271,     0,     0,     0,   272,     0,
     273,   274,     0,   275,   276,     0,     0,     0,   277,     0,
       0,   278,   279,   280,     0,     0,   281,     0,     0,   282,
     283,     0,     0,     0,     0,     0,   284,   285,     0,   286,
       0,   287,     0,   288,   289,     0,     0,     0,     0,     0,
       0,     0,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,     0,   306,
     307,   308,     0,   309,   310,   311,   312,     0,   313,   314,
       0,     0,     0,     0,   315,   316,   317,   318,   319,   320,
       0,     0,   321,   322,     0,   323,     0,   324,     0,   325,
     326,   327,   328,   329,   330,   331,   332,   333,     0,     0,
     334,   335,     0,     0,   336,  1804,   338,   339,     0,     0,
       0,   340,   341,     0,     0,     0,     0,   342,   343,   344,
       0,   345,   346,   347,   348,     0,   349,   350,     0,     0,
       0,     0,     0,     0,     0,     0,   351,   352,   353,     0,
       0,   354,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,     0,     0,   367,   368,   369,
       0,   370,     0,   371,   372,   373,   374,   375,     0,   376,
     377,   378,     0,     0,   379,     0,     0,     0,   380,   381,
     382,   383,   384,     0,     0,   385,   386,   387,   388,   389,
       0,   390,   391,     0,   392,   393,   394,     0,     0,   395,
       0,   396,     0,   397,   398,     0,   399,   400,     0,     0,
       0,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,     0,   411,   412,     0,     0,     0,   413,   414,   415,
     416,     0,     0,     0,   417,     0,     0,     0,   418,     0,
     419,   420,   421,   422,   423,     0,   424,   425,   426,   427,
     428,   429,     0,     0,     0,     0,     0,     0,   430,   431,
       0,   432,     0,     0,   433,     0,     0,   434,   435,   436,
       0,     0,   437,   438,     0,   439,   440,   441,   442,   443,
     444,     0,     0,   445,   446,   447,   448,     0,   449,   450,
       0,   451,     0,   452,   453,   454,   455,     0,     0,   456,
     457,     0,   458,   459,   460,   461,     0,     0,     0,     0,
       0,   462,   463,   464,     0,     0,     0,   465,   466,   467,
     468,     0,   469,   470,     0,   471,   472,     0,   473,   474,
       0,     0,   475,     0,     0,   476,     0,   477,     0,   478,
     479,   480,     0,     0,     0,     0,     0,     0,   481,     0,
       0,   482,     0,     0,     0,   483,   484,   485,   486,   487,
     488,     0,     0,     0,     0,     0,     0,   489,   490,     0,
     491,   492,   493,     0,   139,   494,   140,   141,   142,   143,
     144,     0,     0,   145,     0,     0,     0,   146,     0,     0,
       0,     0,   148,   149,   150,   151,   152,   153,   154,     0,
       0,  -335,     0,     0,     0,   157,     0,     0,     0,   158,
       0,     0,   159,   160,   161,     0,   162,     0,     0,     0,
       0,     0,   165,  3971,     0,   166,   167,     0,   168,     0,
       0,     0,     0,     0,   172,   173,   174,   175,  3972,   177,
     178,     0,   179,   180,     0,     0,     0,     0,     0,     0,
     186,     0,   188,     0,   190,   191,   192,   193,     0,   194,
     195,     0,   196,   197,   198,     0,   200,     0,   201,     0,
       0,   202,     0,     0,   203,     0,     0,     0,   204,     0,
       0,     0,   205,   206,   207,     0,     0,   208,     0,     0,
       0,     0,   209,     0,     0,     0,     0,     0,   211,     0,
     212,     0,     0,     0,   213,     0,   214,   215,   216,   217,
       0,     0,     0,     0,     0,     0,   219,   220,   221,     0,
    -305,  -305,   222,     0,  -305,   224,     0,   225,   226,   227,
       0,     0,   228,   229,     0,   230,   231,   232,   233,     0,
       0,     0,     0,   236,   237,   238,     0,     0,   239,   240,
    3973,   241,   242,   243,     0,     0,     0,     0,     0,     0,
     245,     0,   246,     0,   247,     0,   248,   249,   250,   251,
     252,   253,     0,   254,     0,     0,     0,     0,   256,   257,
       0,     0,     0,     0,     0,   260,     0,     0,     0,   261,
     262,   263,   264,  3974,     0,   265,   266,   267,     0,   268,
       0,   269,     0,     0,     0,     0,   270,     0,     0,     0,
       0,   272,     0,   273,   274,     0,   275,   276,  3975,     0,
       0,   277,     0,     0,     0,   279,   280,     0,     0,   281,
    3976,     0,   282,   283,     0,     0,     0,     0,     0,   284,
     285,     0,   286,     0,   287,     0,   288,   289,     0,     0,
       0,     0,  -290,     0,     0,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,     0,   306,   307,   308,     0,   309,   310,   311,   312,
       0,   313,   314,     0,     0,     0,     0,   315,   316,   317,
     318,   319,   320,     0,     0,   321,   322,     0,   323,     0,
     324,     0,   325,   326,   327,   328,   329,   330,   331,   332,
     333,     0,     0,   334,   335,     0,     0,   336,   337,   338,
     339,     0,     0,     0,     0,   341,     0,     0,     0,     0,
     342,   343,   344,     0,   345,   346,   347,  3977,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     352,   353,     0,     0,     0,     0,   355,   356,   357,     0,
     359,   360,   361,   362,   363,   364,   365,     0,     0,     0,
       0,   368,   369,     0,   370,     0,   371,   372,   373,   374,
     375,     0,   376,   377,   378,     0,     0,   379,     0,     0,
       0,   380,   381,   382,   383,   384,     0,     0,   385,   386,
     387,   388,   389,     0,   390,     0,     0,   392,     0,   394,
    -290,     0,   395,     0,     0,     0,   397,     0,     0,   399,
     400,  3978,     0,     0,     0,   402,   403,   404,   405,   406,
     407,     0,   409,   410,     0,   411,     0,     0,     0,     0,
     413,   414,   415,     0,     0,     0,     0,   417,     0,     0,
       0,   418,     0,     0,   420,     0,     0,   423,     0,   424,
       0,   426,     0,   428,   429,     0,     0,     0,     0,     0,
       0,   430,   431,     0,   432,     0,     0,   433,     0,     0,
     434,     0,   436,     0,     0,     0,   438,     0,   439,   440,
     441,   442,   443,   444,     0,     0,   445,   446,   447,   448,
       0,   449,   450,     0,   451,     0,   452,   453,   454,   455,
       0,     0,   456,   457,     0,   458,   459,   460,   461,     0,
       0,     0,     0,     0,   462,   463,   464,     0,     0,     0,
       0,   466,   467,   468,     0,   469,   470,     0,   471,   472,
       0,     0,     0,     0,     0,   475,     0,     0,   476,     0,
       0,     0,   478,   479,   480,     0,     0,     0,     0,     0,
       0,   481,     0,     0,   482,     0,     0,     0,   483,   484,
     485,   486,   487,   488,     0,     0,  -290,     0,     0,     0,
     489,     0,     0,   491,     0,   493,     0,   139,   494,   140,
     141,   142,   143,   144,     0,     0,   145,     0,     0,     0,
     146,     0,     0,     0,     0,   148,   149,   150,   151,   152,
     153,   154,     0,     0,  -335,     0,     0,     0,   157,     0,
       0,     0,   158,     0,     0,   159,   160,   161,     0,   162,
       0,     0,     0,     0,     0,   165,  3971,     0,   166,   167,
       0,   168,     0,     0,     0,     0,     0,   172,   173,   174,
     175,  3972,   177,   178,     0,   179,   180,     0,     0,     0,
       0,     0,     0,   186,     0,   188,     0,   190,   191,   192,
     193,     0,   194,   195,     0,   196,   197,   198,     0,   200,
       0,   201,     0,     0,   202,     0,     0,   203,     0,     0,
       0,   204,     0,     0,     0,   205,   206,   207,     0,     0,
     208,     0,     0,     0,     0,   209,     0,     0,     0,     0,
       0,   211,     0,   212,     0,     0,     0,   213,     0,   214,
     215,   216,   217,     0,     0,     0,     0,     0,     0,   219,
     220,   221,     0,  -326,     0,   222,     0,  -326,   224,     0,
     225,   226,   227,     0,     0,   228,   229,     0,   230,   231,
     232,   233,     0,     0,     0,     0,   236,   237,   238,     0,
       0,   239,   240,  3973,   241,   242,   243,     0,     0,     0,
       0,     0,     0,   245,     0,   246,     0,   247,     0,   248,
     249,   250,   251,   252,   253,     0,   254,     0,     0,     0,
       0,   256,   257,     0,     0,     0,     0,     0,   260,     0,
       0,     0,   261,   262,   263,   264,  3974,     0,   265,   266,
     267,     0,   268,     0,   269,     0,     0,     0,     0,   270,
       0,     0,     0,     0,   272,     0,   273,   274,     0,   275,
     276,  3975,     0,     0,   277,     0,     0,     0,   279,   280,
       0,     0,   281,  3976,     0,   282,   283,     0,     0,     0,
       0,     0,   284,   285,     0,   286,     0,   287,     0,   288,
     289,     0,     0,     0,     0,  -290,     0,     0,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,     0,   306,   307,   308,     0,   309,
     310,   311,   312,     0,   313,   314,     0,     0,     0,     0,
     315,   316,   317,   318,   319,   320,     0,     0,   321,   322,
       0,   323,     0,   324,     0,   325,   326,   327,   328,   329,
     330,   331,   332,   333,     0,     0,   334,   335,     0,     0,
     336,   337,   338,   339,     0,     0,     0,     0,   341,     0,
       0,     0,     0,   342,   343,   344,     0,   345,   346,   347,
    3977,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   352,   353,     0,     0,     0,     0,   355,
     356,   357,     0,   359,   360,   361,   362,   363,   364,   365,
       0,     0,     0,     0,   368,   369,     0,   370,     0,   371,
     372,   373,   374,   375,     0,   376,   377,   378,     0,     0,
     379,     0,     0,     0,   380,   381,   382,   383,   384,     0,
       0,   385,   386,   387,   388,   389,     0,   390,     0,     0,
     392,     0,   394,  -290,     0,   395,     0,     0,     0,   397,
       0,     0,   399,   400,  3978,     0,     0,     0,   402,   403,
     404,   405,   406,   407,     0,   409,   410,     0,   411,     0,
       0,     0,     0,   413,   414,   415,     0,     0,     0,     0,
     417,     0,     0,     0,   418,     0,     0,   420,     0,     0,
     423,     0,   424,     0,   426,     0,   428,   429,     0,     0,
       0,     0,     0,     0,   430,   431,     0,   432,     0,     0,
     433,     0,     0,   434,     0,   436,     0,     0,     0,   438,
       0,   439,   440,   441,   442,   443,   444,     0,     0,   445,
     446,   447,   448,     0,   449,   450,     0,   451,     0,   452,
     453,   454,   455,     0,     0,   456,   457,     0,   458,   459,
     460,   461,     0,     0,     0,     0,     0,   462,   463,   464,
       0,     0,     0,     0,   466,   467,   468,     0,   469,   470,
       0,   471,   472,     0,     0,     0,     0,     0,   475,     0,
       0,   476,     0,     0,     0,   478,   479,   480,     0,     0,
       0,     0,     0,     0,   481,     0,     0,   482,     0,     0,
       0,   483,   484,   485,   486,   487,   488,  -326,     0,  -290,
       0,     0,     0,   489,     0,     0,   491,     0,   493,     0,
     139,   494,   140,   141,   142,   143,   144,     0,     0,   145,
       0,     0,     0,   146,     0,     0,     0,     0,   148,   149,
     150,   151,   152,   153,   154,     0,     0,  -335,     0,     0,
       0,   157,     0,     0,     0,   158,     0,     0,   159,   160,
     161,     0,   162,     0,     0,     0,     0,     0,   165,  3971,
       0,   166,   167,     0,   168,     0,     0,     0,     0,     0,
     172,   173,   174,   175,  3972,   177,   178,     0,   179,   180,
       0,     0,     0,     0,     0,     0,   186,     0,   188,     0,
     190,   191,   192,   193,     0,   194,   195,     0,   196,   197,
     198,     0,   200,     0,   201,     0,     0,   202,     0,     0,
     203,     0,     0,     0,   204,     0,     0,     0,   205,   206,
     207,     0,     0,   208,     0,     0,     0,     0,   209,     0,
       0,     0,     0,     0,   211,     0,   212,     0,     0,     0,
     213,     0,   214,   215,   216,   217,     0,     0,     0,     0,
       0,     0,   219,   220,   221,     0,  -323,     0,   222,     0,
    -323,   224,     0,   225,   226,   227,     0,     0,   228,   229,
       0,   230,   231,   232,   233,     0,     0,     0,     0,   236,
     237,   238,     0,     0,   239,   240,  3973,   241,   242,   243,
       0,     0,     0,     0,     0,     0,   245,     0,   246,     0,
     247,     0,   248,   249,   250,   251,   252,   253,     0,   254,
       0,     0,     0,     0,   256,   257,     0,     0,     0,     0,
       0,   260,     0,     0,     0,   261,   262,   263,   264,  3974,
       0,   265,   266,   267,     0,   268,     0,   269,     0,     0,
       0,     0,   270,     0,     0,     0,     0,   272,     0,   273,
     274,     0,   275,   276,  3975,     0,     0,   277,     0,     0,
       0,   279,   280,     0,     0,   281,  3976,     0,   282,   283,
       0,     0,     0,     0,     0,   284,   285,     0,   286,     0,
     287,     0,   288,   289,     0,     0,     0,     0,  -290,     0,
       0,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,     0,   306,   307,
     308,     0,   309,   310,   311,   312,     0,   313,   314,     0,
       0,     0,     0,   315,   316,   317,   318,   319,   320,     0,
       0,   321,   322,     0,   323,     0,   324,     0,   325,   326,
     327,   328,   329,   330,   331,   332,   333,     0,     0,   334,
     335,     0,     0,   336,   337,   338,   339,     0,     0,     0,
       0,   341,     0,     0,     0,     0,   342,   343,   344,     0,
     345,   346,   347,  3977,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   352,   353,     0,     0,
       0,     0,   355,   356,   357,     0,   359,   360,   361,   362,
     363,   364,   365,     0,     0,     0,     0,   368,   369,     0,
     370,     0,   371,   372,   373,   374,   375,     0,   376,   377,
     378,     0,     0,   379,     0,     0,     0,   380,   381,   382,
     383,   384,     0,     0,   385,   386,   387,   388,   389,     0,
     390,     0,     0,   392,     0,   394,  -290,     0,   395,     0,
       0,     0,   397,     0,     0,   399,   400,  3978,     0,     0,
       0,   402,   403,   404,   405,   406,   407,     0,   409,   410,
       0,   411,     0,     0,     0,     0,   413,   414,   415,     0,
       0,     0,     0,   417,     0,     0,     0,   418,     0,     0,
     420,     0,     0,   423,     0,   424,     0,   426,     0,   428,
     429,     0,     0,     0,     0,     0,     0,   430,   431,     0,
     432,     0,     0,   433,     0,     0,   434,     0,   436,     0,
       0,     0,   438,     0,   439,   440,   441,   442,   443,   444,
       0,     0,   445,   446,   447,   448,     0,   449,   450,     0,
     451,     0,   452,   453,   454,   455,     0,     0,   456,   457,
       0,   458,   459,   460,   461,     0,     0,     0,     0,     0,
     462,   463,   464,     0,     0,     0,     0,   466,   467,   468,
       0,   469,   470,     0,   471,   472,     0,     0,     0,     0,
       0,   475,     0,     0,   476,     0,     0,     0,   478,   479,
     480,     0,     0,     0,     0,     0,     0,   481,     0,     0,
     482,     0,     0,     0,   483,   484,   485,   486,   487,   488,
    -323,     0,  -290,     0,     0,     0,   489,     0,     0,   491,
       0,   493,     0,   139,   494,   140,   141,   142,   143,   144,
       0,     0,   145,     0,     0,     0,   146,     0,     0,     0,
       0,   148,   149,   150,   151,   152,   153,   154,     0,     0,
    -335,     0,     0,     0,   157,     0,     0,     0,   158,     0,
       0,   159,   160,   161,     0,   162,     0,     0,     0,     0,
       0,   165,  3971,     0,   166,   167,     0,   168,     0,     0,
       0,     0,     0,   172,   173,   174,   175,  3972,   177,   178,
       0,   179,   180,     0,     0,     0,     0,     0,     0,   186,
       0,   188,     0,   190,   191,   192,   193,     0,   194,   195,
       0,   196,   197,   198,     0,   200,     0,   201,     0,     0,
     202,     0,     0,   203,     0,     0,     0,   204,     0,     0,
       0,   205,   206,   207,     0,     0,   208,     0,     0,     0,
       0,   209,     0,     0,     0,     0,     0,   211,     0,   212,
       0,     0,     0,   213,     0,   214,   215,   216,   217,     0,
       0,     0,     0,     0,     0,   219,   220,   221,     0,     0,
       0,   222,     0,  4318,   224,     0,   225,   226,   227,     0,
       0,   228,   229,     0,   230,   231,   232,   233,     0,     0,
       0,     0,   236,   237,   238,     0,     0,   239,   240,  3973,
     241,   242,   243,     0,     0,     0,     0,     0,     0,   245,
       0,   246,     0,   247,     0,   248,   249,   250,   251,   252,
     253,     0,   254,     0,     0,     0,     0,   256,   257,     0,
       0,     0,     0,     0,   260,     0,     0,     0,   261,   262,
     263,   264,  3974,     0,   265,   266,   267,     0,   268,     0,
     269,     0,     0,     0,     0,   270,     0,     0,     0,     0,
     272,     0,   273,   274,     0,   275,   276,  3975,     0,     0,
     277,     0,     0,     0,   279,   280,     0,     0,   281,  3976,
       0,   282,   283,     0,     0,     0,     0,     0,   284,   285,
       0,   286,     0,   287,     0,   288,   289,     0,     0,     0,
       0,  -290,     0,     0,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
       0,   306,   307,   308,     0,   309,   310,   311,   312,     0,
     313,   314,     0,     0,     0,     0,   315,   316,   317,   318,
     319,   320,     0,     0,   321,   322,     0,   323,     0,   324,
       0,   325,   326,   327,   328,   329,   330,   331,   332,   333,
       0,     0,   334,   335,     0,     0,   336,   337,   338,   339,
       0,     0,     0,     0,   341,     0,     0,     0,     0,   342,
     343,   344,     0,   345,   346,   347,  3977,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   352,
     353,     0,     0,     0,     0,   355,   356,   357,     0,   359,
     360,   361,   362,   363,   364,   365,     0,     0,     0,     0,
     368,   369,     0,   370,     0,   371,   372,   373,   374,   375,
       0,   376,   377,   378,     0,     0,   379,     0,     0,     0,
     380,   381,   382,   383,   384,     0,     0,   385,   386,   387,
     388,   389,     0,   390,     0,     0,   392,     0,   394,  -290,
       0,   395,     0,     0,     0,   397,     0,     0,   399,   400,
    3978,     0,     0,     0,   402,   403,   404,   405,   406,   407,
       0,   409,   410,     0,   411,     0,     0,     0,     0,   413,
     414,   415,     0,     0,     0,     0,   417,     0,     0,     0,
     418,     0,     0,   420,     0,     0,   423,     0,   424,     0,
     426,     0,   428,   429,     0,     0,     0,     0,     0,     0,
     430,   431,     0,   432,     0,     0,   433,     0,     0,   434,
       0,   436,     0,     0,     0,   438,     0,   439,   440,   441,
     442,   443,   444,     0,     0,   445,   446,   447,   448,     0,
     449,   450,     0,   451,     0,   452,   453,   454,   455,     0,
       0,   456,   457,     0,   458,   459,   460,   461,     0,     0,
       0,     0,     0,   462,   463,   464,     0,     0,     0,     0,
     466,   467,   468,     0,   469,   470,     0,   471,   472,     0,
       0,     0,     0,     0,   475,     0,     0,   476,     0,     0,
       0,   478,   479,   480,     0,     0,     0,     0,     0,     0,
     481,     0,     0,   482,     0,     0,     0,   483,   484,   485,
     486,   487,   488,     0,     0,  -290,     0,     0,     0,   489,
       0,     0,   491,     0,   493,     0,   139,   494,   140,   141,
     142,   143,   144,     0,     0,   145,     0,     0,     0,   146,
       0,     0,     0,     0,   148,   149,   150,   151,   152,   153,
     154,     0,     0,  -335,     0,     0,     0,   157,     0,     0,
       0,   158,     0,     0,   159,   160,   161,     0,   162,     0,
       0,     0,     0,     0,   165,  3971,     0,   166,   167,     0,
     168,     0,     0,     0,     0,     0,   172,   173,   174,   175,
    3972,   177,   178,     0,   179,   180,     0,     0,     0,     0,
       0,     0,   186,     0,   188,     0,   190,   191,   192,   193,
       0,   194,   195,     0,   196,   197,   198,     0,   200,     0,
     201,     0,     0,   202,     0,     0,   203,     0,     0,     0,
     204,     0,     0,     0,   205,   206,   207,     0,     0,   208,
       0,     0,     0,     0,   209,     0,     0,     0,     0,     0,
     211,     0,   212,     0,     0,     0,   213,     0,   214,   215,
     216,   217,     0,     0,     0,     0,     0,     0,   219,   220,
     221,     0,     0,     0,   222,     0,  -328,   224,     0,   225,
     226,   227,     0,     0,   228,   229,     0,   230,   231,   232,
     233,     0,     0,     0,     0,   236,   237,   238,     0,     0,
     239,   240,  3973,   241,   242,   243,     0,     0,     0,     0,
       0,     0,   245,     0,   246,     0,   247,     0,   248,   249,
     250,   251,   252,   253,     0,   254,     0,     0,     0,     0,
     256,   257,     0,     0,     0,     0,     0,   260,     0,     0,
       0,   261,   262,   263,   264,  3974,     0,   265,   266,   267,
       0,   268,     0,   269,     0,     0,     0,     0,   270,     0,
       0,     0,     0,   272,     0,   273,   274,     0,   275,   276,
    3975,     0,     0,   277,     0,     0,     0,   279,   280,     0,
       0,   281,  3976,     0,   282,   283,     0,     0,     0,     0,
       0,   284,   285,     0,   286,     0,   287,     0,   288,   289,
       0,     0,     0,     0,  -290,     0,     0,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,     0,   306,   307,   308,     0,   309,   310,
     311,   312,     0,   313,   314,     0,     0,     0,     0,   315,
     316,   317,   318,   319,   320,     0,     0,   321,   322,     0,
     323,     0,   324,     0,   325,   326,   327,   328,   329,   330,
     331,   332,   333,     0,     0,   334,   335,     0,     0,   336,
     337,   338,   339,     0,     0,     0,     0,   341,     0,     0,
       0,     0,   342,   343,   344,     0,   345,   346,   347,  3977,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   352,   353,     0,     0,     0,     0,   355,   356,
     357,     0,   359,   360,   361,   362,   363,   364,   365,     0,
       0,     0,     0,   368,   369,     0,   370,     0,   371,   372,
     373,   374,   375,     0,   376,   377,   378,     0,     0,   379,
       0,     0,     0,   380,   381,   382,   383,   384,     0,     0,
     385,   386,   387,   388,   389,     0,   390,     0,     0,   392,
       0,   394,  -290,     0,   395,     0,     0,     0,   397,     0,
       0,   399,   400,  3978,     0,     0,     0,   402,   403,   404,
     405,   406,   407,     0,   409,   410,     0,   411,     0,     0,
       0,     0,   413,   414,   415,     0,     0,     0,     0,   417,
       0,     0,     0,   418,     0,     0,   420,     0,     0,   423,
       0,   424,     0,   426,     0,   428,   429,     0,     0,     0,
       0,     0,     0,   430,   431,     0,   432,     0,     0,   433,
       0,     0,   434,     0,   436,     0,     0,     0,   438,     0,
     439,   440,   441,   442,   443,   444,     0,     0,   445,   446,
     447,   448,     0,   449,   450,     0,   451,     0,   452,   453,
     454,   455,     0,     0,   456,   457,     0,   458,   459,   460,
     461,     0,     0,     0,     0,     0,   462,   463,   464,     0,
       0,     0,     0,   466,   467,   468,     0,   469,   470,     0,
     471,   472,     0,     0,     0,     0,     0,   475,     0,     0,
     476,     0,     0,     0,   478,   479,   480,     0,     0,     0,
       0,     0,     0,   481,     0,     0,   482,     0,     0,     0,
     483,   484,   485,   486,   487,   488,     0,     0,  -290,     0,
       0,     0,   489,     0,     0,   491,     0,   493,     0,   139,
     494,   140,   141,   142,   143,   144,     0,     0,   145,     0,
       0,     0,   146,     0,     0,     0,     0,   148,   149,   150,
     151,   152,   153,   154,     0,     0,  -335,     0,     0,     0,
     157,     0,     0,     0,   158,     0,     0,   159,   160,   161,
       0,   162,     0,     0,     0,     0,     0,   165,  3971,     0,
     166,   167,     0,   168,     0,     0,     0,     0,     0,   172,
     173,   174,   175,  3972,   177,   178,     0,   179,   180,     0,
       0,     0,     0,     0,     0,   186,     0,   188,     0,   190,
     191,   192,   193,     0,   194,   195,     0,   196,   197,   198,
       0,   200,     0,   201,     0,     0,   202,     0,     0,   203,
       0,     0,     0,   204,     0,     0,     0,   205,   206,   207,
       0,     0,   208,     0,     0,     0,     0,   209,     0,     0,
       0,     0,     0,   211,     0,   212,     0,     0,     0,   213,
       0,   214,   215,   216,   217,     0,     0,     0,     0,     0,
       0,   219,   220,   221,     0,     0,     0,   222,     0,  4439,
     224,     0,   225,   226,   227,     0,     0,   228,   229,     0,
     230,   231,   232,   233,     0,     0,     0,     0,   236,   237,
     238,     0,     0,   239,   240,  3973,   241,   242,   243,     0,
       0,     0,     0,     0,     0,   245,     0,   246,     0,   247,
       0,   248,   249,   250,   251,   252,   253,     0,   254,     0,
       0,     0,     0,   256,   257,     0,     0,     0,     0,     0,
     260,     0,     0,     0,   261,   262,   263,   264,  3974,     0,
     265,   266,   267,     0,   268,     0,   269,     0,     0,     0,
       0,   270,     0,     0,     0,     0,   272,     0,   273,   274,
       0,   275,   276,  3975,     0,     0,   277,     0,     0,     0,
     279,   280,     0,     0,   281,  3976,     0,   282,   283,     0,
       0,     0,     0,     0,   284,   285,     0,   286,     0,   287,
       0,   288,   289,     0,     0,     0,     0,  -290,     0,     0,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,     0,   306,   307,   308,
       0,   309,   310,   311,   312,     0,   313,   314,     0,     0,
       0,     0,   315,   316,   317,   318,   319,   320,     0,     0,
     321,   322,     0,   323,     0,   324,     0,   325,   326,   327,
     328,   329,   330,   331,   332,   333,     0,     0,   334,   335,
       0,     0,   336,   337,   338,   339,     0,     0,     0,     0,
     341,     0,     0,     0,     0,   342,   343,   344,     0,   345,
     346,   347,  3977,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   352,   353,     0,     0,     0,
       0,   355,   356,   357,     0,   359,   360,   361,   362,   363,
     364,   365,     0,     0,     0,     0,   368,   369,     0,   370,
       0,   371,   372,   373,   374,   375,     0,   376,   377,   378,
       0,     0,   379,     0,     0,     0,   380,   381,   382,   383,
     384,     0,     0,   385,   386,   387,   388,   389,     0,   390,
       0,     0,   392,     0,   394,  -290,     0,   395,     0,     0,
       0,   397,     0,     0,   399,   400,  3978,     0,     0,     0,
     402,   403,   404,   405,   406,   407,     0,   409,   410,     0,
     411,     0,     0,     0,     0,   413,   414,   415,     0,     0,
       0,     0,   417,     0,     0,     0,   418,     0,     0,   420,
       0,     0,   423,     0,   424,     0,   426,     0,   428,   429,
       0,     0,     0,     0,     0,     0,   430,   431,     0,   432,
       0,     0,   433,     0,     0,   434,     0,   436,     0,     0,
       0,   438,     0,   439,   440,   441,   442,   443,   444,     0,
       0,   445,   446,   447,   448,     0,   449,   450,     0,   451,
       0,   452,   453,   454,   455,     0,     0,   456,   457,     0,
     458,   459,   460,   461,     0,     0,     0,     0,     0,   462,
     463,   464,     0,     0,     0,     0,   466,   467,   468,     0,
     469,   470,     0,   471,   472,     0,     0,     0,     0,     0,
     475,     0,     0,   476,     0,     0,     0,   478,   479,   480,
       0,     0,     0,     0,     0,     0,   481,     0,     0,   482,
       0,     0,     0,   483,   484,   485,   486,   487,   488,     0,
       0,  -290,     0,     0,     0,   489,     0,     0,   491,     0,
     493,     0,   139,   494,   140,   141,   142,   143,   144,     0,
       0,   145,     0,     0,     0,   146,     0,     0,     0,     0,
     148,   149,   150,   151,   152,   153,   154,     0,     0,  -335,
       0,     0,     0,   157,     0,     0,     0,   158,     0,     0,
     159,   160,   161,     0,   162,     0,     0,     0,     0,     0,
     165,  3971,     0,   166,   167,     0,   168,     0,     0,     0,
       0,     0,   172,   173,   174,   175,  3972,   177,   178,     0,
     179,   180,     0,     0,     0,     0,     0,     0,   186,     0,
     188,     0,   190,   191,   192,   193,     0,   194,   195,     0,
     196,   197,   198,     0,   200,     0,   201,     0,     0,   202,
       0,     0,   203,     0,     0,     0,   204,     0,     0,     0,
     205,   206,   207,     0,     0,   208,     0,     0,     0,     0,
     209,     0,     0,     0,     0,     0,   211,     0,   212,     0,
       0,     0,   213,     0,   214,   215,   216,   217,     0,     0,
       0,     0,     0,     0,   219,   220,   221,     0,     0,     0,
     222,     0,  4485,   224,     0,   225,   226,   227,     0,     0,
     228,   229,     0,   230,   231,   232,   233,     0,     0,     0,
       0,   236,   237,   238,     0,     0,   239,   240,  3973,   241,
     242,   243,     0,     0,     0,     0,     0,     0,   245,     0,
     246,     0,   247,     0,   248,   249,   250,   251,   252,   253,
       0,   254,     0,     0,     0,     0,   256,   257,     0,     0,
       0,     0,     0,   260,     0,     0,     0,   261,   262,   263,
     264,  3974,     0,   265,   266,   267,     0,   268,     0,   269,
       0,     0,     0,     0,   270,     0,     0,     0,     0,   272,
       0,   273,   274,     0,   275,   276,  3975,     0,     0,   277,
       0,     0,     0,   279,   280,     0,     0,   281,  3976,     0,
     282,   283,     0,     0,     0,     0,     0,   284,   285,     0,
     286,     0,   287,     0,   288,   289,     0,     0,     0,     0,
    -290,     0,     0,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,     0,
     306,   307,   308,     0,   309,   310,   311,   312,     0,   313,
     314,     0,     0,     0,     0,   315,   316,   317,   318,   319,
     320,     0,     0,   321,   322,     0,   323,     0,   324,     0,
     325,   326,   327,   328,   329,   330,   331,   332,   333,     0,
       0,   334,   335,     0,     0,   336,   337,   338,   339,     0,
       0,     0,     0,   341,     0,     0,     0,     0,   342,   343,
     344,     0,   345,   346,   347,  3977,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   352,   353,
       0,     0,     0,     0,   355,   356,   357,     0,   359,   360,
     361,   362,   363,   364,   365,     0,     0,     0,     0,   368,
     369,     0,   370,     0,   371,   372,   373,   374,   375,     0,
     376,   377,   378,     0,     0,   379,     0,     0,     0,   380,
     381,   382,   383,   384,     0,     0,   385,   386,   387,   388,
     389,     0,   390,     0,     0,   392,     0,   394,  -290,     0,
     395,     0,     0,     0,   397,     0,     0,   399,   400,  3978,
       0,     0,     0,   402,   403,   404,   405,   406,   407,     0,
     409,   410,     0,   411,     0,     0,     0,     0,   413,   414,
     415,     0,     0,     0,     0,   417,     0,     0,     0,   418,
       0,     0,   420,     0,     0,   423,     0,   424,     0,   426,
       0,   428,   429,     0,     0,     0,     0,     0,     0,   430,
     431,     0,   432,     0,     0,   433,     0,     0,   434,     0,
     436,     0,     0,     0,   438,     0,   439,   440,   441,   442,
     443,   444,     0,     0,   445,   446,   447,   448,     0,   449,
     450,     0,   451,     0,   452,   453,   454,   455,     0,     0,
     456,   457,     0,   458,   459,   460,   461,     0,     0,     0,
       0,     0,   462,   463,   464,     0,     0,     0,     0,   466,
     467,   468,     0,   469,   470,     0,   471,   472,     0,     0,
       0,     0,     0,   475,     0,     0,   476,     0,     0,     0,
     478,   479,   480,     0,     0,     0,     0,     0,     0,   481,
       0,     0,   482,     0,     0,     0,   483,   484,   485,   486,
     487,   488,     0,     0,  -290,     0,     0,     0,   489,     0,
       0,   491,     0,   493,     0,   139,   494,   140,   141,   142,
     143,   144,     0,     0,   145,     0,     0,     0,   146,     0,
       0,     0,     0,   148,   149,   150,   151,   152,   153,   154,
       0,     0,  -335,     0,     0,     0,   157,     0,     0,     0,
     158,     0,     0,   159,   160,   161,     0,   162,     0,     0,
       0,     0,     0,   165,  3971,     0,   166,   167,     0,   168,
       0,     0,     0,     0,     0,   172,   173,   174,   175,  3972,
     177,   178,     0,   179,   180,     0,     0,     0,     0,     0,
       0,   186,     0,   188,     0,   190,   191,   192,   193,     0,
     194,   195,     0,   196,   197,   198,     0,   200,     0,   201,
       0,     0,   202,     0,     0,   203,     0,     0,     0,   204,
       0,     0,     0,   205,   206,   207,     0,     0,   208,     0,
       0,     0,     0,   209,     0,     0,     0,     0,     0,   211,
       0,   212,     0,     0,     0,   213,     0,   214,   215,   216,
     217,     0,     0,     0,     0,     0,     0,   219,   220,   221,
       0,     0,     0,   222,     0,  -309,   224,     0,   225,   226,
     227,     0,     0,   228,   229,     0,   230,   231,   232,   233,
       0,     0,     0,     0,   236,   237,   238,     0,     0,   239,
     240,  3973,   241,   242,   243,     0,     0,     0,     0,     0,
       0,   245,     0,   246,     0,   247,     0,   248,   249,   250,
     251,   252,   253,     0,   254,     0,     0,     0,     0,   256,
     257,     0,     0,     0,     0,     0,   260,     0,     0,     0,
     261,   262,   263,   264,  3974,     0,   265,   266,   267,     0,
     268,     0,   269,     0,     0,     0,     0,   270,     0,     0,
       0,     0,   272,     0,   273,   274,     0,   275,   276,  3975,
       0,     0,   277,     0,     0,     0,   279,   280,     0,     0,
     281,  3976,     0,   282,   283,     0,     0,     0,     0,     0,
     284,   285,     0,   286,     0,   287,     0,   288,   289,     0,
       0,     0,     0,  -290,     0,     0,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,     0,   306,   307,   308,     0,   309,   310,   311,
     312,     0,   313,   314,     0,     0,     0,     0,   315,   316,
     317,   318,   319,   320,     0,     0,   321,   322,     0,   323,
       0,   324,     0,   325,   326,   327,   328,   329,   330,   331,
     332,   333,     0,     0,   334,   335,     0,     0,   336,   337,
     338,   339,     0,     0,     0,     0,   341,     0,     0,     0,
       0,   342,   343,   344,     0,   345,   346,   347,  3977,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   352,   353,     0,     0,     0,     0,   355,   356,   357,
       0,   359,   360,   361,   362,   363,   364,   365,     0,     0,
       0,     0,   368,   369,     0,   370,     0,   371,   372,   373,
     374,   375,     0,   376,   377,   378,     0,     0,   379,     0,
       0,     0,   380,   381,   382,   383,   384,     0,     0,   385,
     386,   387,   388,   389,     0,   390,     0,     0,   392,     0,
     394,  -290,     0,   395,     0,     0,     0,   397,     0,     0,
     399,   400,  3978,     0,     0,     0,   402,   403,   404,   405,
     406,   407,     0,   409,   410,     0,   411,     0,     0,     0,
       0,   413,   414,   415,     0,     0,     0,     0,   417,     0,
       0,     0,   418,     0,     0,   420,     0,     0,   423,     0,
     424,     0,   426,     0,   428,   429,     0,     0,     0,     0,
       0,     0,   430,   431,     0,   432,     0,     0,   433,     0,
       0,   434,     0,   436,     0,     0,     0,   438,     0,   439,
     440,   441,   442,   443,   444,     0,     0,   445,   446,   447,
     448,     0,   449,   450,     0,   451,     0,   452,   453,   454,
     455,     0,     0,   456,   457,     0,   458,   459,   460,   461,
       0,     0,     0,     0,     0,   462,   463,   464,     0,     0,
       0,     0,   466,   467,   468,     0,   469,   470,     0,   471,
     472,     0,     0,     0,     0,     0,   475,     0,     0,   476,
       0,     0,     0,   478,   479,   480,     0,     0,     0,     0,
       0,     0,   481,     0,     0,   482,     0,     0,     0,   483,
     484,   485,   486,   487,   488,     0,     0,  -290,     0,     0,
       0,   489,     0,     0,   491,     0,   493,     0,   139,   494,
     140,   141,   142,   143,   144,     0,     0,   145,     0,     0,
       0,   146,     0,     0,     0,     0,   148,   149,   150,   151,
     152,   153,   154,     0,     0,  -335,     0,     0,     0,   157,
       0,     0,     0,   158,     0,     0,   159,   160,   161,     0,
     162,     0,     0,     0,     0,     0,   165,  3971,     0,   166,
     167,     0,   168,     0,     0,     0,     0,     0,   172,   173,
     174,   175,  3972,   177,   178,     0,   179,   180,     0,     0,
       0,     0,     0,     0,   186,     0,   188,     0,   190,   191,
     192,   193,     0,   194,   195,     0,   196,   197,   198,     0,
     200,     0,   201,     0,     0,   202,     0,     0,   203,     0,
       0,     0,   204,     0,     0,     0,   205,   206,   207,     0,
       0,   208,     0,     0,     0,     0,   209,     0,     0,     0,
       0,     0,   211,     0,   212,     0,     0,     0,   213,     0,
     214,   215,   216,   217,     0,     0,     0,     0,     0,     0,
     219,   220,   221,     0,     0,     0,   222,     0,     0,   224,
       0,   225,   226,   227,     0,     0,   228,   229,     0,   230,
     231,   232,   233,     0,     0,     0,     0,   236,   237,   238,
       0,     0,   239,   240,  3973,   241,   242,   243,     0,     0,
       0,     0,     0,     0,   245,     0,   246,     0,   247,     0,
     248,   249,   250,   251,   252,   253,     0,   254,     0,     0,
       0,     0,   256,   257,     0,     0,     0,     0,     0,   260,
       0,     0,     0,   261,   262,   263,   264,  3974,     0,   265,
     266,   267,     0,   268,     0,   269,     0,     0,     0,     0,
     270,     0,     0,     0,     0,   272,     0,   273,   274,     0,
     275,   276,  3975,     0,     0,   277,     0,     0,     0,   279,
     280,     0,     0,   281,  3976,     0,   282,   283,     0,     0,
       0,     0,     0,   284,   285,     0,   286,     0,   287,     0,
     288,   289,     0,     0,     0,     0,  -290,     0,     0,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,     0,   306,   307,   308,     0,
     309,   310,   311,   312,     0,   313,   314,     0,     0,     0,
       0,   315,   316,   317,   318,   319,   320,     0,     0,   321,
     322,     0,   323,     0,   324,     0,   325,   326,   327,   328,
     329,   330,   331,   332,   333,     0,     0,   334,   335,     0,
       0,   336,   337,   338,   339,     0,     0,     0,     0,   341,
       0,     0,     0,     0,   342,   343,   344,     0,   345,   346,
     347,  3977,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   352,   353,     0,     0,     0,     0,
     355,   356,   357,     0,   359,   360,   361,   362,   363,   364,
     365,     0,     0,     0,     0,   368,   369,     0,   370,     0,
     371,   372,   373,   374,   375,     0,   376,   377,   378,     0,
       0,   379,     0,     0,     0,   380,   381,   382,   383,   384,
       0,     0,   385,   386,   387,   388,   389,     0,   390,     0,
       0,   392,     0,   394,  -290,     0,   395,     0,     0,     0,
     397,     0,     0,   399,   400,  3978,     0,     0,     0,   402,
     403,   404,   405,   406,   407,     0,   409,   410,     0,   411,
       0,     0,     0,     0,   413,   414,   415,     0,     0,     0,
       0,   417,     0,     0,     0,   418,     0,     0,   420,     0,
       0,   423,     0,   424,     0,   426,     0,   428,   429,     0,
       0,     0,     0,     0,     0,   430,   431,     0,   432,     0,
       0,   433,     0,     0,   434,     0,   436,     0,     0,     0,
     438,     0,   439,   440,   441,   442,   443,   444,     0,     0,
     445,   446,   447,   448,     0,   449,   450,     0,   451,     0,
     452,   453,   454,   455,     0,     0,   456,   457,     0,   458,
     459,   460,   461,     0,     0,     0,     0,     0,   462,   463,
     464,     0,     0,     0,     0,   466,   467,   468,     0,   469,
     470,     0,   471,   472,     0,     0,     0,     0,     0,   475,
       0,     0,   476,     0,     0,     0,   478,   479,   480,     0,
       0,     0,     0,     0,     0,   481,     0,     0,   482,     0,
       0,     0,   483,   484,   485,   486,   487,   488,     0,     0,
    -290,     0,     0,     0,   489,     0,     0,   491,     0,   493,
       0,   139,   494,   140,   141,   142,   143,   144,     0,     0,
     145,     0,     0,     0,   146,     0,     0,     0,     0,   148,
     149,   150,   151,   152,   153,   154,     0,     0,  -335,     0,
       0,     0,   157,     0,     0,     0,   158,     0,     0,   159,
     160,   161,     0,   162,     0,     0,     0,     0,     0,   165,
    3971,     0,   166,   167,     0,   168,     0,     0,     0,     0,
       0,   172,   173,   174,   175,  3972,   177,   178,     0,   179,
     180,     0,     0,     0,     0,     0,     0,   186,     0,   188,
       0,   190,   191,   192,   193,     0,   194,   195,     0,   196,
     197,   198,     0,   200,     0,   201,     0,     0,   202,     0,
       0,   203,     0,     0,     0,   204,     0,     0,     0,   205,
     206,   207,     0,     0,   208,     0,     0,     0,     0,   209,
       0,     0,     0,     0,     0,   211,     0,   212,     0,     0,
       0,   213,     0,   214,   215,   216,   217,     0,     0,     0,
       0,     0,     0,   219,   220,   221,     0,     0,     0,   222,
       0,     0,   224,     0,   225,   226,   227,     0,     0,   228,
     229,     0,   230,   231,   232,   233,     0,     0,     0,     0,
     236,   237,   238,     0,     0,   239,   240,  3973,   241,   242,
     243,     0,     0,     0,     0,     0,     0,   245,     0,   246,
       0,   247,     0,   248,   249,   250,   251,   252,   253,     0,
     254,     0,     0,     0,     0,   256,   257,     0,     0,     0,
       0,     0,   260,     0,     0,     0,   261,   262,   263,   264,
    3974,     0,   265,   266,   267,     0,   268,     0,   269,     0,
       0,     0,     0,   270,     0,     0,     0,     0,   272,     0,
     273,   274,     0,   275,   276,  3975,     0,     0,   277,     0,
       0,     0,   279,   280,     0,     0,   281,  3976,     0,   282,
     283,     0,     0,     0,     0,     0,   284,   285,     0,   286,
       0,   287,     0,   288,   289,     0,     0,     0,     0,  -290,
       0,     0,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,     0,   306,
     307,   308,     0,   309,   310,   311,   312,     0,   313,   314,
       0,     0,     0,     0,   315,   316,   317,   318,   319,   320,
       0,     0,   321,   322,     0,   323,     0,   324,     0,   325,
     326,   327,   328,   329,   330,   331,   332,   333,     0,     0,
     334,   335,     0,     0,   336,   337,   338,   339,     0,     0,
       0,     0,   341,     0,     0,     0,     0,   342,   343,   344,
       0,   345,   346,   347,  3977,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   352,   353,     0,
       0,     0,     0,   355,   356,   357,     0,   359,   360,   361,
     362,   363,   364,   365,     0,     0,     0,     0,   368,   369,
       0,   370,     0,   371,   372,   373,   374,   375,     0,   376,
     377,   378,     0,     0,   379,     0,     0,     0,   380,   381,
     382,   383,   384,     0,     0,   385,   386,   387,   388,   389,
       0,   390,     0,     0,   392,     0,   394,  -290,     0,   395,
       0,     0,     0,   397,     0,     0,   399,   400,  3978,     0,
       0,     0,   402,   403,   404,   405,   406,   407,     0,   409,
     410,     0,   411,     0,     0,     0,     0,   413,   414,   415,
       0,     0,     0,     0,   417,     0,     0,     0,   418,     0,
       0,   420,     0,     0,   423,     0,   424,     0,   426,     0,
     428,   429,     0,     0,     0,     0,     0,     0,   430,   431,
       0,   432,     0,     0,   433,     0,     0,   434,     0,   436,
       0,     0,     0,   438,     0,   439,   440,   441,   442,   443,
     444,     0,     0,   445,   446,   447,   448,     0,   449,   450,
       0,   451,     0,   452,   453,   454,   455,     0,     0,   456,
     457,     0,   458,   459,   460,   461,     0,     0,     0,     0,
       0,   462,   463,   464,     0,     0,     0,     0,   466,   467,
     468,     0,   469,   470,     0,   471,   472,     0,     0,     0,
       0,     0,   475,     0,     0,  4321,     0,     0,     0,   478,
     479,   480,     0,     0,     0,     0,     0,     0,   481,     0,
       0,   482,     0,     0,     0,   483,   484,   485,   486,   487,
     488,     0,     0,  -290,     0,     0,     0,   489,     0,     0,
     491,     0,   493,     0,   139,   494,   140,   141,   142,   143,
     144,     0,     0,   145,     0,     0,     0,   146,     0,     0,
       0,     0,   148,   149,   150,   151,   152,   153,   154,     0,
       0,     0,     0,     0,     0,   157,     0,     0,     0,   158,
       0,     0,   159,   160,   161,     0,   162,     0,     0,     0,
       0,     0,   165,     0,     0,   166,   167,     0,   168,     0,
       0,     0,     0,     0,   172,   173,   174,   175,     0,   177,
     178,     0,   179,   180,     0,     0,     0,     0,     0,     0,
     186,     0,   188,     0,   190,   191,   192,   193,     0,   194,
     195,     0,   196,   197,   198,     0,   200,     0,   201,     0,
       0,   202,     0,     0,   203,     0,     0,     0,   204,     0,
       0,     0,   205,   206,   207,     0,     0,   208,     0,     0,
       0,     0,   209,     0,     0,     0,     0,     0,   211,     0,
     212,     0,     0,     0,   213,     0,   214,   215,   216,   217,
       0,     0,     0,     0,     0,     0,   219,   220,   221,     0,
       0,     0,   222,     0,     0,   224,     0,   225,   226,   227,
       0,     0,   228,   229,     0,   230,   231,   232,   233,     0,
       0,     0,     0,   236,   237,   238,     0,     0,   239,   240,
       0,   241,   242,   243,     0,     0,     0,     0,     0,     0,
     245,     0,   246,     0,   247,     0,   248,   249,   250,   251,
     252,   253,     0,   254,     0,     0,     0,     0,   256,   257,
       0,     0,     0,     0,     0,   260,     0,     0,     0,   261,
     262,   263,   264,     0,     0,   265,   266,   267,     0,   268,
       0,   269,     0,     0,     0,     0,   270,     0,     0,     0,
       0,   272,     0,   273,   274,     0,   275,   276,     0,     0,
       0,   277,     0,     0,     0,   279,   280,     0,     0,   281,
       0,     0,   282,   283,     0,     0,     0,     0,     0,   284,
     285,     0,   286,     0,   287,     0,   288,   289,     0,     0,
       0,     0,     0,     0,     0,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,     0,   306,   307,   308,     0,   309,   310,   311,   312,
       0,   313,   314,     0,     0,     0,     0,   315,   316,   317,
     318,   319,   320,     0,     0,   321,   322,     0,   323,     0,
     324,     0,   325,   326,   327,   328,   329,   330,   331,   332,
     333,     0,     0,   334,   335,     0,     0,   336,   337,   338,
     339,     0,     0,     0,     0,   341,     0,     0,     0,     0,
     342,   343,   344,     0,   345,   346,   347,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     352,   353,     0,     0,     0,     0,   355,   356,   357,     0,
     359,   360,   361,   362,   363,   364,   365,     0,     0,     0,
       0,   368,   369,     0,   370,     0,   371,   372,   373,   374,
     375,     0,   376,   377,   378,     0,     0,   379,     0,     0,
       0,   380,   381,   382,   383,   384,     0,     0,   385,   386,
     387,   388,   389,     0,   390,     0,     0,   392,     0,   394,
       0,     0,   395,     0,     0,     0,   397,     0,     0,   399,
     400,     0,     0,     0,     0,   402,   403,   404,   405,   406,
     407,     0,   409,   410,     0,   411,     0,     0,     0,     0,
     413,   414,   415,     0,     0,     0,     0,   417,     0,     0,
       0,   418,     0,     0,   420,     0,     0,   423,     0,   424,
       0,   426,     0,   428,   429,     0,     0,     0,     0,     0,
       0,   430,   431,     0,   432,     0,     0,   433,     0,     0,
     434,     0,   436,     0,     0,     0,   438,     0,   439,   440,
     441,   442,   443,   444,     0,     0,   445,   446,   447,   448,
       0,   449,   450,     0,   451,     0,   452,   453,   454,   455,
       0,     0,   456,   457,     0,   458,   459,   460,   461,     0,
       0,     0,     0,     0,   462,   463,   464,     0,     0,     0,
       0,   466,   467,   468,     0,   469,   470,     0,   471,   472,
       0,     0,     0,     0,     0,   475,     0,     0,   476,     0,
       0,     0,   478,   479,   480,     0,     0,     0,     0,     0,
       0,   481,     0,     0,   482,     0,     0,     0,   483,   484,
     485,   486,   487,   488,     0,     0,     0,     0,     0,     0,
     489,     0,     0,   491,     0,   493,     0,     0,   494
};

static const yytype_int16 yycheck[] =
{
       6,   557,   579,  1008,   651,   578,   579,   920,   921,  1195,
     605,    20,  1195,    19,   900,   124,    22,   930,   703,  1718,
      29,  1009,  1097,   967,  1856,  1857,    32,    36,     6,  1425,
     942,  1124,   507,    39,   723,  1327,    42,  1405,   814,  1533,
      46,  1531,  1425,   619,  1844,  1569,  1570,  2554,    54,   527,
     528,   529,  2595,   531,   532,   967,  1258,   535,  2387,   537,
    2350,   940,   678,  1217,  2484,  1167,  3288,  2829,   500,     4,
    1224,  1494,  2890,   758,  2185,  2624,   761,  2164,  1013,  1143,
     647,   648,  1134,   883,  1520,  2675,  2197,  1013,   525,   968,
      96,  1335,    22,  2321,  1844,  2017,  2019,  2198,  2017,  2145,
    2283,  2145,  2402,  2459,   660,   661,  2020,  3033,  1502,  3529,
    2024,  2464,    47,   119,  3294,   121,  2899,   123,   124,   125,
    2473,  2035,  2412,  1225,  1226,    12,  1512,  1229,  1230,  1231,
    1232,  2045,  1234,  1235,  1236,  1237,  1238,  1239,  1240,  1241,
     787,    16,    17,   121,    17,   123,    17,  2000,  1972,  1973,
    3190,    12,  2749,   585,    31,   131,   588,    21,  1436,  3018,
     776,   777,   778,    37,    52,  1989,    96,  2134,    40,  1555,
      25,    19,   788,    19,  3566,    16,    17,    61,  1456,    37,
      19,  2277,  2006,  2007,  1855,    35,  1464,  1465,   988,  2009,
     665,   157,   667,   668,   669,    74,    60,    61,  2022,  2023,
      82,  2025,     9,    12,  2028,  2029,  2689,  2690,  2032,   266,
      52,   175,  2695,  2037,  2697,    12,   125,  2041,  2042,  2043,
    2044,    28,   132,  2145,  2048,  2049,  2145,  2051,    35,  2517,
    2692,  3354,  3355,  2057,    65,  3358,  2060,  2061,  1038,  2063,
     816,    21,    16,    17,  2822,    19,    25,    83,    19,    16,
      17,    69,   151,   112,  3377,    35,  3313,    11,  2531,   195,
    3680,  3384,  4010,    16,    17,   193,  2961,    16,    17,    49,
      82,  2513,  2514,    57,   343,  3132,   185,   145,   359,  1991,
      60,    61,    64,    25,    72,   202,   157,   389,    48,   303,
      21,   128,    16,    17,   161,   147,   209,   114,   368,   392,
     366,   267,   878,  3525,    35,  2129,  2130,  2131,  2132,   451,
    1512,   157,    16,    17,  1963,   161,    88,   278,    49,   250,
     157,   419,   161,   190,   205,    35,   236,   134,   444,    60,
      61,  2660,   363,   128,   130,    64,   128,   653,  2168,   213,
     818,    16,    17,    16,    17,   192,   140,  3470,   129,   225,
     395,   157,   273,  1555,   391,   213,   273,    12,    12,   969,
     391,   269,   157,   225,   267,   157,   395,  3759,  2455,   250,
     190,   484,   281,   267,   433,   129,   337,   232,   166,   542,
     159,    12,  4130,   574,  2523,   353,   229,   513,  2630,  2631,
     161,   632,   633,   736,  2533,    41,    16,    17,   281,   192,
     414,   510,     8,   151,  3754,    16,    17,    16,    17,   221,
     253,   223,   229,   756,   164,   132,   510,   248,   214,   225,
     157,   542,   284,   175,   138,    31,   769,   770,    16,    17,
      16,    17,  3782,   151,   402,    65,   357,   546,    21,   153,
     252,   632,  2638,    74,  1133,   284,    71,   541,   493,   508,
     359,   415,    35,   232,    71,   310,   276,    67,  1147,   387,
     189,   242,    16,    17,   493,   578,    49,  2665,   192,   595,
     406,   374,   486,   542,   267,   638,   359,    60,    61,  1255,
     374,   115,   229,  3606,   118,  1398,   141,   141,   284,   135,
     232,   367,  3615,   374,  1482,   811,  3279,   639,   373,   568,
    3283,   376,   349,  2437,   510,   542,   512,   620,   601,  1877,
     608,   542,   284,  1069,  1070,  1071,  3639,   633,  1318,   450,
     351,  3644,   188,  3745,   161,   319,   378,   533,   960,   631,
     267,   310,  3389,  2833,  2834,  2835,   542,  2957,    16,    17,
     546,  2035,   548,   624,    16,    17,  2470,   613,  1348,   606,
     458,  1430,   513,   415,  1433,   561,   473,   485,  1437,   225,
    1439,   449,   631,   660,   661,   500,  1768,  1502,   310,   639,
     190,   355,   578,  1220,    16,    17,  1502,   356,  2408,   492,
     419,   146,  1494,   192,    10,   591,    86,   375,  1467,  1468,
    2677,   161,  2638,   303,  2638,  2517,    16,    17,  2517,   373,
     536,   419,   376,  3783,   610,  1991,   373,   449,   476,   376,
     477,  3791,  1228,   619,   549,   621,  2936,  2937,   248,  1554,
     373,   585,   376,   376,   373,  2478,   632,   376,  1554,  1245,
    2066,  2017,   638,  3328,  3231,    74,   442,   643,  2926,   645,
     606,   647,   648,   515,  1746,   427,   652,   653,   161,   373,
     585,   657,   376,   588,  2750,  1757,   565,   592,  1760,  1937,
     638,  2934,  3240,   415,   536,  2632,  4058,   673,   542,   373,
     580,   637,   376,  1110,  1111,   404,   553,   486,   509,  3497,
     553,    16,    17,  2536,   542,  2538,   662,    25,  1740,   486,
     562,   522,  2545,   575,  3291,  2515,  1263,  4117,   373,  1136,
     373,   376,   632,   376,   813,  2558,   605,  1144,   572,  1146,
     594,  2564,  2565,   643,    16,    17,  2638,   723,  4466,  2638,
    2544,  1158,  1159,  1160,  3583,  1301,  3766,  2580,  2581,  1166,
     566,   538,  2556,  1826,  2128,  3915,  1512,   608,   517,   587,
    1540,   600,   617,  2414,   631,   633,    16,    17,  2134,   556,
    2837,  2838,   631,   373,  2607,  2608,   376,   564,   555,  2145,
    2613,   636,   373,  1330,   373,   376,   637,   376,  2621,  2622,
     631,  3554,  3555,  2626,   613,   781,   617,   783,   633,  1555,
    1347,   631,   553,   614,  2496,   373,   593,   373,   376,  1991,
     376,   637,   572,    16,    17,  1371,   608,  2936,  2937,   616,
     637,   807,   808,   809,   810,   811,   812,   813,  2947,   815,
     816,   920,  2636,  3870,  2463,   924,   925,   597,  1394,   373,
      16,    17,   376,   602,  2963,  2964,    16,    17,    16,    17,
     808,   637,   941,  4253,   812,  2974,  3078,   815,   587,   599,
     477,   572,   637,   617,  2674,   637,   575,   853,   608,  1281,
     617,   631,  1462,   603,   633,  3338,   161,   605,  1434,  3342,
     866,    16,    17,   580,   617,   632,   633,  2357,   617,   606,
      16,    17,   878,   879,  3336,  3337,   486,   883,    82,   632,
     633,   633,  3344,  3079,   633,  3347,  3348,   605,   513,  3372,
    3373,  3374,   522,   617,   232,   373,   513,  3380,   376,  4079,
     637,   373,  3364,   468,   376,  3388,  3104,   477,  3237,   633,
      16,    17,   546,   617,   920,   549,  3378,  3273,   924,   925,
     586,  1353,  3384,  3385,  3386,  3387,  3279,  2861,   632,   633,
    3283,   373,  2134,  1506,   376,   941,   866,   872,  2770,  1414,
    1037,  3867,   617,  2145,   617,  3245,  2331,   175,    47,   879,
    1863,    16,    17,   373,   178,   314,   376,   632,   633,  3249,
     633,    16,    17,   463,   477,  4088,  2938,  4090,   188,   408,
    1883,  3561,   310,  2897,  2898,  2807,  3459,  1666,    16,    17,
     406,   126,   988,   161,   216,  3468,   374,   356,  1932,   572,
    1087,    16,    17,   266,  3785,  3315,  4176,   617,   284,  3461,
      52,    72,   639,  1009,  2926,   225,   617,  2926,   617,   195,
     593,   594,   632,   820,   366,    16,    17,   221,   356,   223,
    1932,   632,   633,   632,  1968,   960,   516,   962,  3115,   617,
    2830,   617,  1038,  3079,   247,  3079,  2530,  2531,   373,   247,
    4262,   376,  3143,    90,  1923,   633,   632,   633,   252,  2445,
     192,  2447,  2448,   128,   698,   168,  1968,  1936,   225,    23,
    1939,  1940,   154,   617,  2447,  2448,   631,   303,   125,   639,
     635,   373,   362,   165,   376,  2940,  2941,   608,   632,  3002,
    2830,   507,   195,  1089,  1090,  1091,  1092,  1093,  1563,  3003,
    3318,  3274,    44,   532,  3802,  2170,   241,    12,  1207,    16,
      17,   243,   633,   373,    16,    17,   376,  4126,   130,   611,
    2496,   210,    16,    17,   631,  2816,    16,    17,   557,   462,
    2222,   125,    16,    17,   768,  2369,   639,  1133,   185,    16,
      17,  2517,   558,   419,   358,  1244,    16,    17,   468,   617,
    2294,  1147,   283,  1759,   512,   617,   390,    16,    17,  2585,
     373,   536,  3840,   376,   632,  1844,   213,  3079,    12,  1089,
    3079,   633,   343,  1093,  2077,   533,    25,   125,    16,    17,
     142,  3761,   477,   663,   600,   617,  3315,   373,  2456,   517,
     376,    16,    17,   373,  2476,   373,   376,   415,   376,  1195,
     632,  2890,   436,  2128,    16,    17,  3049,   617,  1774,     0,
    3287,  1207,  2128,    53,  2387,   169,   419,  2908,  1764,  1776,
     401,   419,   632,   633,    64,  1991,    16,    17,   373,   234,
     406,   376,   342,    82,   281,    33,   141,   373,   243,  1338,
     376,    16,    17,   602,  1810,   157,  2300,  2301,  1244,  3947,
    3140,  2293,   178,  1249,   364,   633,  2632,  4065,   320,  3798,
    3799,  2303,  2638,     6,    16,    17,  4018,  1263,  1834,  1835,
    4087,   613,   284,  2365,   602,  1821,   161,   373,   468,   542,
     376,  1887,   631,    16,    17,   442,   421,   281,    16,    17,
     372,   513,   617,   358,  2084,    16,    17,   141,  2474,    16,
      17,  2474,  2715,  4084,  2496,  1301,   125,  3840,   633,   477,
     441,   631,   359,   355,   375,    58,  2796,  1313,   373,  1315,
     542,   376,  1318,    16,    17,   617,   111,   176,   373,    16,
      17,   376,   545,   281,  1330,    16,    17,   613,  4550,  3301,
     632,   633,  1338,   606,   639,   373,   560,   267,   376,   424,
    3451,  1347,  1348,   633,    16,    17,  1281,   617,   373,   545,
     536,   376,   576,  1785,  3683,   359,   185,   585,  2134,   563,
     332,   542,   461,   633,   379,  1371,   586,   414,  1374,  2145,
     192,  1015,   373,   232,   519,   376,  1382,  2563,  4397,  1385,
    2563,    16,    17,   587,  1319,    16,    17,   568,  1394,   633,
     342,     8,   145,   155,   617,    16,    17,   449,  1404,  1405,
    1509,   359,  2787,  2788,  2789,   633,    16,    17,    12,  1415,
    1416,  1417,  1418,  1419,  1420,   355,   352,   353,  1353,  1425,
     215,   617,   358,   273,   476,  1431,  1432,   617,  1434,   617,
    2632,   631,  1438,  3298,   129,   243,  2638,  1415,  1416,  1417,
    2934,  1419,   499,   633,   374,   633,    16,    17,   161,   541,
     631,   310,   281,  1459,  1432,  3355,   373,   192,   266,   376,
    1438,   373,   617,   625,   376,    12,   607,   587,   540,   373,
     632,   617,   376,   373,   468,  1410,   376,   631,   633,   373,
    4168,  4169,   376,  2879,   569,   639,   373,   633,  1418,   376,
    1420,   350,    20,   373,   434,   567,   376,   356,  3918,   343,
      16,    17,  1437,  1509,   373,   240,   468,   376,   565,  3003,
     536,   617,    16,    17,  3975,  3976,   183,  1523,    16,    17,
    2433,   468,  1528,  1529,   210,   373,   205,   633,   376,  1459,
     359,    16,    17,   563,  1540,   234,  2629,   141,   373,   468,
    2926,   376,  4369,  4370,   243,  3874,    59,   242,   168,   104,
     159,   373,   617,  1559,   376,  1561,  1562,   587,  1564,  1565,
    2582,   565,   617,   468,    16,    17,   183,   253,   633,  4257,
    1576,   476,  1578,   373,    16,    17,   376,   468,   633,   617,
    1515,  4078,    17,  1561,  1562,   380,  3697,   468,   373,   256,
     111,   376,   617,  1523,   141,   633,   391,    16,    17,  1529,
     353,  2676,   406,   398,  4067,   133,  4069,   565,   633,    16,
      17,   373,  2766,   631,   376,   798,   617,   632,    16,    17,
     428,   639,   192,   232,   560,  4168,  4169,  3917,    16,    17,
     373,  2817,   633,   376,  2817,   373,   625,   631,   376,   374,
     576,   635,   373,   632,   574,   376,   373,   168,   232,   376,
      80,   129,    16,    17,   626,   627,   628,   629,   517,   343,
    1666,  1667,   175,    16,    17,   418,   179,   420,  1777,   631,
     373,    16,    17,   376,   195,   224,   373,   190,   233,   376,
     379,  2297,   373,   639,   631,   376,   591,   592,   355,   125,
     468,   205,   128,  3079,  4191,   250,   491,   536,   542,   243,
     617,   373,   631,   507,   376,   617,    89,   262,   891,  2394,
    2395,  2396,   539,   617,  4257,   233,   633,   617,  1724,   263,
    2496,   633,   210,   617,   568,   108,   631,  3217,   268,   633,
     617,   271,   250,   633,    16,    17,   565,   617,   373,   633,
     631,   376,   373,   602,   262,   376,   633,   356,   617,   185,
     631,  1860,   373,   633,   558,   376,  3850,  2194,   229,   189,
    1766,  1767,  2199,   373,   633,   253,   376,  4111,  1774,   617,
    1776,  1777,   356,   229,  4281,  2212,  3576,   213,    16,    17,
    3304,  3305,   617,  1789,   632,  1791,   229,   342,   583,    16,
      17,  1797,  1798,   168,  1800,   617,   600,   632,  3497,   229,
      16,    17,   468,   373,  1810,   318,   376,  1813,  2245,   224,
    3663,  1817,    16,    17,    16,    17,  4266,   617,    39,  4269,
     195,    16,    17,   253,  3624,    46,  2402,   205,  1834,  1835,
    1836,  1837,   617,   633,   368,    16,    17,  1767,  1844,    16,
      17,  1847,  1848,  1849,   240,   281,    16,    17,   633,    48,
    1785,    16,    17,   631,  1860,   617,  2632,   373,   542,   419,
     376,  2954,  2638,  4324,  4325,   192,  2439,  1797,  1798,   373,
    1800,  1877,   376,  2310,   617,   373,   416,  3079,   376,   617,
     440,  3975,  3976,  1813,   568,   406,   617,  1817,   373,   632,
     617,   376,  1898,   476,   632,    16,    17,  1832,   587,   454,
    3268,   632,   415,    16,    17,   632,  1836,  1837,   517,   587,
     221,   471,   223,   487,   617,    60,    61,  1847,  1848,  1849,
     617,   373,  2944,   359,   376,   594,   617,    72,   597,   632,
    2874,   373,  1938,   517,   376,   632,   454,   592,    16,    17,
     284,   632,   532,  2829,   633,   617,   536,   631,  1131,  1955,
     639,  4401,   487,  2975,   373,   633,  1962,   376,  1893,   632,
     632,   639,  2874,   518,  2986,   631,   373,  2989,  4312,   376,
    2543,    16,    17,    82,   404,   373,    16,    17,   376,   637,
    1025,  1026,   617,  3275,   581,   373,   617,   639,   376,  1302,
      59,  2904,  1305,   602,   125,  1308,   617,   632,  1181,   370,
     518,   632,  1185,    16,    17,   507,  2885,   617,  1938,   373,
     553,   632,   376,    16,    17,   536,  4110,  4111,   602,  1064,
     373,  3043,   632,   376,   633,   631,    16,    17,   373,    19,
     189,   376,  1962,     6,  2143,    16,    17,   558,    19,   468,
    2149,  1976,   442,  3439,  3897,  3898,  3899,   617,   532,  2524,
    1985,  1986,   536,  2059,   185,  3119,  3439,  2532,  3241,  2537,
      11,  1996,  1997,  1998,  1999,   631,  2001,  2002,  2074,    16,
      17,  2549,    82,  2551,  2552,   631,  2185,   631,  2084,   600,
     631,   636,   213,  2561,  3148,  3149,    96,  4431,  2197,  4433,
     631,   373,   598,   599,   376,   601,   633,   603,   125,   583,
    3286,   617,   631,  3286,   512,  3169,   175,    82,   516,   631,
     179,   352,   353,   617,    32,  4459,   632,    82,   542,   617,
     633,   190,   631,   232,    85,  4219,    87,  3642,   632,   565,
    3645,   631,   617,    11,   632,   373,  3322,  2143,   376,  3322,
    4234,  2830,   104,  2149,   631,  2151,   373,   632,  2154,   376,
     281,   172,   192,  4497,  4498,  4249,  2162,   373,   185,  2165,
     376,   631,   591,   592,   631,   617,    84,   128,   631,   373,
     631,   373,   376,   631,   376,   617,  2154,  2286,   373,  2185,
     632,   376,   632,   633,  3699,   631,   213,    17,   149,   517,
     632,  2197,   373,   631,   159,   376,   373,   144,   617,   376,
     631,   125,   631,   373,   203,  4037,   376,  2316,   373,    17,
     617,   376,   639,   632,   632,   633,  2772,   631,  4312,   617,
    4044,  4045,   631,   184,  4048,  4049,  4050,  4051,   359,   617,
    4324,  4325,   631,   111,   632,   587,  3344,   155,  2814,  3347,
    3348,   350,    12,   405,   632,   255,   221,   356,   223,   318,
    2535,   129,   373,   617,   281,   376,  3364,  2833,  2834,  2835,
     373,   185,   631,   376,   617,   631,    25,   232,   632,   609,
     610,   233,   617,   587,  2559,  2560,   631,   252,   371,   632,
    2286,   632,   633,   631,  3778,  3779,  4380,   632,   250,   213,
     168,   632,   633,   633,   631,   373,  4390,   631,   376,   631,
     262,    80,   631,  3079,   287,  2311,   289,   290,   307,   308,
    2316,  4135,   142,   312,   313,   631,   425,   195,   632,   633,
     330,  3234,   631,    82,  2761,  2331,  2611,  3271,   373,  3393,
     631,   376,   359,   373,   142,   617,   376,  4431,  3524,  4433,
     631,  3524,  4166,  4167,   631,   355,   415,   632,   633,  4443,
     632,  4175,   631,  3461,   632,   633,   631,   281,  2364,  3271,
     373,   631,  3437,   376,  2370,  4459,  4065,  4461,   631,  4463,
     373,   141,   631,   376,  2483,  2484,  4470,   631,    19,   617,
     342,  2387,   631,   373,   631,   350,   376,  4481,   632,   633,
     617,   356,   373,    12,   632,   376,  2402,   632,   633,   277,
     159,   617,  4255,  4497,  4498,   632,   631,   417,   517,  2415,
     189,  2417,   631,   617,   631,   617,   632,   176,   631,  4513,
    4514,   382,   617,   631,  4518,   631,   373,   457,   632,   376,
     632,   631,   457,  2439,   565,   359,   617,   632,   631,  2445,
     617,  2447,  2448,   631,   214,  2554,   631,   617,   431,   432,
     229,   632,   617,   632,   633,   632,   631,   104,    16,    17,
     425,   570,   632,   104,   631,   426,   532,   632,  2474,  1103,
    1104,  1105,   364,   232,   253,   632,   633,  2483,  2484,   631,
    2415,   631,  2960,   401,   632,   633,  1120,    60,    61,  3477,
     632,   633,   454,   602,   632,   633,   617,   507,   978,   979,
     980,   632,   332,   631,   617,   423,   986,   987,   533,   632,
     633,   632,   632,   633,   539,   631,   157,  2523,  1152,   632,
     161,  1155,   141,   631,   332,  2534,   631,  2533,   406,   631,
    1798,  2540,  1800,  2539,  4020,  4021,   631,   455,   565,   617,
    1174,  1175,   545,   631,  1178,   632,   633,   631,  2554,   190,
     631,   310,   517,  2562,   632,   631,   518,  2563,   583,  2568,
     632,   633,  1196,  1197,   205,  2574,  2575,  2573,   632,   633,
     211,   631,   617,   631,    26,   600,  2582,   617,   631,  1847,
    1848,  1849,   631,  2589,  2590,   631,   233,   632,   631,  2595,
     631,   350,   233,   364,   512,   214,   474,   356,  2604,   240,
     632,   633,   633,   250,   617,   570,  2541,  2542,   225,   250,
      82,   390,   632,   633,   617,   262,   493,    12,    90,   632,
      72,   262,    50,   632,   633,   404,   267,   617,   632,   507,
      82,    50,  2567,   142,   278,   276,   617,   602,   632,   633,
     633,   565,   114,  2573,  4476,   632,   633,    35,    43,   479,
     480,   151,   152,  2659,  2660,   533,   632,   633,  4144,   364,
    2595,   364,  4148,  2669,  2670,  2671,   632,   633,   633,  3245,
     617,   479,   480,    61,  2609,  2610,   128,  2612,   462,  2614,
    2615,  2616,  2617,  2618,  2619,  2620,   574,   159,  2623,   626,
    2625,  3784,   487,  2628,  3267,   342,   632,   633,  3600,  3601,
     476,   342,    97,   125,   632,   633,   128,   102,   632,  4195,
    4196,  3613,   632,   633,   125,   632,   633,   364,  3620,  4551,
    3157,   167,   600,   364,  3637,   639,    64,   115,   639,  2659,
     118,   501,   502,   374,   504,   631,   506,   123,   126,  2669,
    2670,  2671,    80,   267,  3646,  3647,   632,   633,   518,   632,
     633,   632,   633,   190,    92,   143,   513,   229,   517,   532,
    3197,   632,   633,   185,   493,   406,    37,   632,   633,   221,
     513,   223,   632,   633,   185,   632,   633,  2783,   632,   633,
    2786,  2787,  2788,  2789,   111,   632,   633,   632,   633,  2795,
     278,   213,   622,   623,   624,   625,   626,   627,   628,   629,
     158,   253,   213,   190,  3906,    91,   125,   454,  2814,   633,
     221,  2817,   633,   454,   622,   623,   624,   625,   626,   627,
     628,   629,   365,   332,  2830,   632,   633,  2833,  2834,  2835,
    3818,   632,   633,    19,   220,   476,  3824,   309,   632,   633,
    2846,   168,   528,   602,   632,   633,   632,   118,  2957,  4035,
     245,   189,  4035,   241,   125,   327,   194,   632,   633,   281,
     632,   633,   157,  3419,    64,  2795,   185,  3960,   195,   128,
     281,   518,   114,  2879,   633,  3448,   638,   518,   350,     6,
      80,   631,   501,   502,   503,   504,   505,   506,   632,   633,
     113,   229,    92,   125,   213,   632,   633,   632,   633,   518,
     352,   353,   229,  3725,  3726,     4,   358,   178,  1182,  1183,
     467,  2846,   364,   600,   185,   253,  3251,  3252,   104,  3210,
    3211,  2930,  3506,  3507,   319,    61,   243,   633,   390,    57,
    2936,  2937,   434,   574,   172,   114,   322,   359,  2944,   222,
     326,  2947,   213,   633,   633,  4038,   587,   333,   359,  1583,
     277,  2957,   404,   185,   639,  2961,   344,  2963,  2964,    72,
      12,   632,   281,   104,    33,   606,   605,   608,  2974,  2975,
     142,   157,   632,   542,   141,   161,     9,   633,   639,   115,
    2986,   213,   118,  2989,   632,   639,   632,   382,   631,   189,
     126,   632,   633,   266,   194,   636,   637,   639,   364,   159,
     633,   638,   188,   278,   190,  3011,   278,   143,  3014,   278,
     281,   278,    50,  3019,   278,   278,   532,   633,   631,   205,
     472,   273,   633,  2958,   389,   211,   633,   413,  3034,   229,
     553,  2966,  3038,   633,  1668,   553,   633,  3043,  1672,   225,
     359,   161,   633,   633,    72,   517,   633,   233,   513,   281,
     186,   243,   390,   253,   240,   626,  3034,   244,   180,   530,
    1694,   533,   167,   633,   250,   190,   404,  3684,  3685,  3686,
     513,  3077,   343,   142,   401,  4261,   262,  4170,  4261,   406,
     466,   267,   490,   354,  3014,   393,  3092,   358,   359,   137,
     276,   633,   233,  3099,   364,   392,   484,   632,   581,   633,
     495,  4089,   612,   195,   586,   241,   161,   162,  3114,   250,
    3795,  3796,  3797,   633,   192,   624,   625,   626,   627,   628,
     629,   262,   192,   575,   632,   632,    82,   359,   632,   632,
     626,   632,  4018,   632,   529,   632,   625,   632,   631,   633,
      96,   196,   632,   565,   574,  3254,   632,   474,   632,  3084,
     553,   632,   207,   632,   565,   633,   342,   633,   496,   632,
     332,   549,   632,   632,   111,    26,   477,    28,   631,  3099,
     631,  3788,  3789,   629,   243,   632,  3793,  3794,   364,   633,
     136,   631,   606,   631,   231,  3191,   633,   524,   374,  3762,
     578,   246,  3748,  3199,    12,   631,   203,   266,   192,    60,
      61,   342,    63,   258,   404,   341,   533,   639,   344,   192,
     631,    72,   539,   631,   264,   170,   633,  3223,   604,   633,
     406,    82,   632,   364,   639,   458,   639,   639,  4141,    90,
     285,   558,   414,   619,   579,  3241,  3242,   575,   190,  3245,
     633,   142,   476,  4156,   633,  4347,   565,   194,  3254,   633,
      48,   340,   507,   114,  3260,   467,   583,   507,  3853,   507,
     507,  3267,  3268,   332,  3199,    80,   507,   128,   454,   390,
     131,   542,   390,   600,   390,   546,   553,   137,   549,   251,
    3286,    19,   229,   352,   353,   421,   251,   533,    26,   560,
     476,   346,   161,   533,   565,   137,   496,   568,   159,   255,
     390,    48,   390,   388,   390,  3311,   390,   479,   480,  3315,
     390,   437,   190,   454,   183,   631,  3322,   161,   161,   633,
     161,   161,  3328,   161,  3330,  4511,  3332,   196,  4511,   161,
     277,   161,   518,   565,    72,  3912,   142,   161,   207,   161,
     161,   161,  3451,   277,    82,  4447,   631,   161,  4534,   161,
     161,  4534,   161,   624,   625,  4541,   161,   161,  4541,   428,
     221,  4547,   223,   364,  4547,   161,   161,   161,   229,   161,
    4358,  4359,   364,  4361,   330,   575,   237,   518,   364,   587,
     155,   639,   239,   632,   239,   639,   639,   256,   574,   258,
     128,   252,   553,   632,   639,   632,   352,   353,   633,   355,
     586,   587,  3408,   632,   632,   632,   632,   632,  3964,   553,
     479,   480,   633,   549,   553,   613,   285,   273,   542,    88,
     606,    48,   608,   553,  4412,   494,  4414,  4415,   631,   631,
    3539,   332,   631,  3439,   161,    26,   371,    28,   192,   192,
     192,   240,   578,   192,   542,  3451,   632,   633,   309,   542,
     636,   637,   624,   625,   626,   627,   628,   629,    37,   247,
     198,   417,   419,  3398,   633,   170,   327,   359,   142,    60,
      61,   250,    63,   250,   377,   323,  4053,   114,   114,  4126,
     349,    72,   253,   221,  4472,   223,     6,   253,   639,   553,
    3425,    82,   205,    13,   631,    15,   631,   631,   370,    90,
     542,   451,   631,   390,  4509,   241,    26,   639,    28,   374,
     241,   626,   631,  3622,  3520,   253,   639,   631,  3524,   631,
     381,   632,   383,   114,   632,   632,   332,   474,   632,   632,
     391,   632,   632,  3539,   403,   632,   608,   128,    58,   118,
     131,   364,   225,    63,    64,   626,   125,   268,   639,   496,
      70,   507,   192,   622,   623,   624,   625,   626,   627,   628,
     629,   632,    82,   390,   580,   633,  3572,   632,   159,   243,
      90,  3577,  4128,   633,   632,  3584,   243,   633,   479,   480,
     100,   632,   419,   632,  4157,  3591,   533,   250,  3697,   536,
     250,   253,   539,   633,   114,   631,   253,   631,   459,   178,
     402,   633,   633,   632,   364,   364,   185,   633,   128,    82,
      19,   131,   632,   631,   352,   353,  3622,   493,   138,   139,
     358,   633,   364,   364,   632,   145,   364,   632,   575,   267,
     221,  4544,   223,   153,   213,   631,   583,   157,   229,   159,
     608,   632,  3648,   632,   470,   419,   237,   203,   148,  3655,
     260,   632,  3658,   633,   205,  3764,   517,   250,   332,   478,
     468,   252,   250,   633,   631,   128,   404,   128,   188,   631,
    3676,   400,   533,   479,   480,   266,   537,   144,  3684,  3685,
    3686,   639,    86,   486,   228,   463,   632,   632,  3623,   633,
     632,  3697,   493,    19,   631,   556,   632,    35,   631,   631,
      35,   221,   281,   223,   632,   632,   632,   227,   359,   229,
      61,   241,   632,   574,   632,   632,   632,   237,   309,   255,
     329,   622,   623,   624,   625,   626,   627,   628,   629,   414,
    3665,   276,   252,   608,   472,   240,   327,   371,    56,   632,
     631,   631,   639,    48,  3750,   633,   211,   633,    66,   329,
    4397,   587,   587,   632,   631,    14,   306,   631,  3764,   128,
     631,   631,   253,    81,   343,   631,   597,   631,  3774,   597,
     580,    19,   633,   631,   253,    93,    94,    95,   142,   358,
     359,   358,  3788,  3789,    35,   632,   170,  3793,  3794,   309,
     381,   109,   383,   458,   633,   359,   329,   174,    17,   633,
     391,   253,   542,    16,    17,   479,   480,   327,   542,  3918,
     542,   331,   536,   240,   587,   591,   364,   623,   624,   625,
     626,   627,   628,   629,   587,   354,   608,   592,   451,  4406,
     511,   631,   138,   170,  3840,   632,   371,   575,   631,   523,
     631,   580,   631,   190,   631,   359,   631,   156,   605,   369,
      32,   632,   632,  4409,   374,  4502,   640,   190,    62,  3865,
    3866,   381,   544,   383,   137,   137,   159,   631,   459,   406,
     390,   391,    74,   427,   632,   605,   632,   632,   192,   243,
      32,    64,   371,    64,   385,   633,   632,   631,   269,  4536,
      48,   524,    48,     5,   631,   364,   631,   240,   364,  3905,
     155,   371,   422,   371,   637,  3840,   119,   120,   121,   122,
     123,   136,  3918,   144,   631,    48,   436,   437,   438,   439,
      48,   154,  4478,    48,   580,   132,   517,   605,   155,   525,
     224,   283,   640,  3939,   637,   127,  3866,   458,   150,   459,
      12,    13,   533,   631,  3950,    48,   537,    48,   622,   623,
     624,   625,   626,   627,   628,   629,    48,   632,   253,    54,
     637,   460,   222,   542,   632,   556,  3972,   546,   332,   633,
     549,  3977,   545,   208,   633,  3905,   155,    48,   633,   637,
     632,   560,   632,   574,   633,    54,   565,   441,   225,   568,
     190,   190,  4548,   190,   607,   476,   545,   517,   128,   359,
    4006,  4007,   631,   321,   217,   218,   219,   220,   633,  3982,
    2323,   191,  2627,   533,  3663,  3412,  2512,   537,   661,   962,
     338,  3674,  4012,  4129,  4332,  1022,  4333,  3672,  3676,  4035,
    3864,   103,    12,  4536,  4489,  4041,   556,    46,   580,  2830,
     631,   561,  3850,  1843,    24,   624,   625,  3850,  3850,  3850,
    3850,  3850,  3850,  4499,   574,    35,    36,  4377,  4212,  3850,
     132,  4067,  4171,  4069,  3850,  4071,  4377,  3850,  4325,  4238,
    4219,  4237,  3850,   145,  3850,  3850,  1518,  1062,  4016,  1520,
      60,    61,   678,  3873,  1768,  4234,  2050,   683,    68,  2073,
    2809,  2984,  3223,    73,  2370,  4041,   168,  4103,  4160,   171,
    4249,  3906,  4447,  3522,  1335,  4355,  4406,   520,  4053,   322,
     182,   324,   325,   326,  1554,   479,   480,   637,  3681,    99,
     333,   101,   718,   103,  2066,  3085,  3332,  2660,  2074,  3577,
    2592,   203,   112,  3583,  4374,  3964,  3355,  3140,  3816,   735,
    3389,  3633,  4157,  3622,  2483,    11,   464,  4076,    11,  4195,
    2158,  4137,  4196,   133,   134,  4148,  4144,   229,  2073,  2667,
     373,  3824,  3939,   376,   236,  4171,  2461,  3311,  2585,  1950,
    1477,  4177,  4281,  3588,   636,   992,  2084,  2382,   158,   159,
     776,   777,   778,   779,   164,  3310,  4244,   167,  1550,  1529,
    2795,  1836,   788,  2357,  3218,  2406,  2279,   604,   912,  4134,
     413,  3852,   520,  1854,   276,  3962,  3199,  2193,  2772,  2189,
    2475,  3277,  2469,   193,  3930,   195,  1147,  2278,  4296,  3781,
     538,  3408,   202,  4297,   204,  1120,  3322,  2304,  2879,  4164,
    4165,  4380,  3775,  4478,  2581,  3764,  2162,  2411,  4244,  1318,
    2351,  4390,  1348,  2386,  4353,  3524,  3236,  3235,   228,   229,
     230,  4257,   465,   466,  3286,  4261,  4261,   674,   622,   623,
     624,   625,   626,   627,   628,   629,   594,  1576,  1933,  1423,
    1934,   251,   579,   869,  1788,  4281,   579,  2453,  1354,  3330,
    3221,  4399,  4365,    12,    13,  4288,  4445,  4541,  4547,  2436,
    4296,  4297,  3624,   273,  4443,  3241,  3267,   578,  1721,  1382,
    3268,   578,  1880,  2429,  2428,  2422,  1817,   572,   894,  1372,
    1310,  3895,  4461,   516,  4463,  1559,  3901,  2783,   899,   573,
     516,  4470,  4257,   303,    -1,   661,    -1,   661,    -1,   661,
      -1,    -1,  4481,    -1,    -1,   407,    -1,  4272,  4273,   411,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4353,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   427,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   435,  4513,  4514,    -1,    -1,    -1,  4518,
      -1,   443,    -1,    -1,   103,    -1,  4382,    -1,    -1,    -1,
      -1,    -1,    -1,  4389,    -1,    -1,    -1,    -1,   368,    -1,
      -1,   604,    -1,    -1,    -1,    -1,   468,    -1,    -1,    -1,
      -1,    -1,    -1,   132,   617,   618,   619,    -1,    -1,   481,
     482,    -1,    -1,    -1,   394,    -1,   145,    -1,    -1,    -1,
      -1,  4530,    -1,    -1,    -1,   405,   406,    -1,    -1,   409,
     410,    -1,    -1,    -1,    -1,    -1,  4371,    -1,    -1,   168,
      -1,    -1,   171,    -1,    -1,    -1,    -1,    -1,  1044,    -1,
     430,    -1,    -1,   182,  4460,   527,    -1,    -1,    -1,  4465,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   203,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   558,    -1,    -1,    -1,
      -1,    -1,    -1,   473,    -1,    -1,  4502,    -1,    -1,    -1,
     229,    -1,    -1,  1099,  1100,  4511,   486,   236,   580,    -1,
     582,    -1,  1108,  1109,  1110,  1111,  1112,  1113,  1114,  1115,
    1116,  1117,  1118,  1119,  4530,    -1,    -1,    -1,  4534,    -1,
    4536,  1127,  1128,   513,  1130,  4541,  1132,   517,    -1,    -1,
    1136,  4547,    -1,  1139,  1140,  1141,  1142,   276,  1144,  1145,
    1146,    -1,    -1,    -1,    -1,   535,   536,  1153,  1154,    -1,
    1156,  1157,  1158,  1159,  1160,    -1,    -1,  1163,  1164,  1165,
    1166,  1167,  1168,  1169,  1170,  1171,  1172,  1173,    -1,    -1,
    1176,  1177,    -1,    -1,  1180,    -1,    -1,    -1,  1184,    -1,
    1186,  1187,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1198,  1199,   584,    -1,    -1,    -1,    -1,    -1,
    1206,    -1,    -1,    -1,    -1,   595,    -1,  1213,  1214,  1215,
      -1,  1217,    -1,   603,    -1,    -1,    -1,    -1,  1224,  1225,
    1226,    -1,  1228,  1229,  1230,  1231,  1232,    -1,  1234,  1235,
    1236,  1237,  1238,  1239,  1240,  1241,    13,    -1,    15,  1245,
    1246,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    35,
      -1,    -1,    -1,    -1,    -1,    32,    -1,    -1,    -1,    36,
      13,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   407,    -1,
      -1,    -1,   411,    50,    51,    -1,    -1,    -1,    -1,    -1,
      -1,    58,    68,    -1,    -1,    -1,    63,    64,   427,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   435,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   443,    -1,    -1,    84,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1322,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   103,    -1,    -1,   468,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   481,   482,    -1,    -1,    -1,   124,    -1,   135,
     103,    -1,    -1,    -1,    -1,   132,   133,   134,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   144,   145,    -1,
      -1,    -1,    -1,   159,    -1,    -1,  1382,   163,    -1,   132,
     157,    -1,    -1,    -1,    -1,    -1,  1392,    -1,   527,    -1,
      -1,    -1,   145,    -1,   171,    -1,    -1,    -1,    -1,    -1,
      -1,  1407,    -1,    -1,    -1,  1411,    -1,    -1,    -1,    -1,
     187,   197,    -1,    -1,    -1,   168,    -1,    -1,   171,   558,
      -1,    -1,    -1,    -1,    -1,    -1,   203,    -1,    -1,   182,
     216,   208,    -1,    -1,    -1,   212,    -1,    -1,    -1,    -1,
      -1,   580,    -1,   582,   230,    -1,    -1,    -1,    -1,    -1,
     203,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   236,
    1466,   238,    -1,    -1,    -1,    -1,   226,    -1,    -1,    -1,
      -1,    -1,    -1,   683,    -1,    -1,   229,   254,    -1,    -1,
      -1,    -1,    -1,   236,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   278,    -1,    -1,   272,    -1,    -1,    -1,   276,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   718,    -1,
      -1,    -1,    -1,    -1,  1520,    -1,    -1,   303,    -1,    -1,
      -1,    -1,    35,   276,    -1,   735,   286,   287,   288,   289,
     290,   291,   292,    -1,   294,   295,   296,   297,   298,   299,
     300,   301,   302,    -1,   304,   305,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   779,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1589,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   369,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   386,
      -1,    -1,    -1,   390,    -1,    -1,    -1,    -1,    -1,   405,
      -1,    -1,   135,    -1,   401,    -1,    -1,    -1,   414,    -1,
      -1,    -1,    -1,    -1,    -1,   412,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   429,    -1,    -1,   159,    -1,    -1,    -1,
     163,    -1,    -1,    -1,   407,    -1,    -1,   434,    -1,   869,
     437,   447,   439,    -1,    -1,   442,    -1,    -1,   445,   446,
      -1,   431,   432,    -1,   427,    -1,   453,    -1,   455,    -1,
      -1,    -1,   435,    -1,   197,   462,    -1,    -1,    -1,    -1,
     443,   468,    -1,    -1,  1700,  1701,  1702,    -1,    -1,   476,
     486,    -1,   488,   216,   481,    -1,   483,    -1,  1714,   486,
      -1,    -1,    -1,    -1,    -1,   468,    -1,   230,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   513,   481,   482,
      -1,    -1,    -1,    -1,  1740,   512,    -1,    -1,    -1,   516,
    1746,    -1,    -1,  1749,    -1,  1751,   532,    -1,    -1,   535,
     536,  1757,    -1,  1759,  1760,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   278,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   527,    -1,    -1,    -1,   119,   120,
     121,   122,   123,    -1,   561,    -1,    -1,    -1,    -1,    -1,
     303,    -1,    -1,    -1,    -1,    -1,   573,    -1,   584,    -1,
     577,    -1,    -1,   580,    -1,   558,    -1,    -1,    -1,   586,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1831,    -1,   580,    -1,   582,
      -1,    -1,    -1,    -1,  1044,    -1,    -1,    -1,   615,    -1,
      -1,    -1,    -1,    -1,   621,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   631,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1878,    -1,    -1,    -1,   217,   218,   219,   220,
      -1,  1887,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1099,
    1100,    -1,   405,    -1,    -1,    -1,    -1,    -1,  1108,  1109,
      -1,   414,  1112,  1113,  1114,  1115,  1116,  1117,  1118,  1119,
      -1,    -1,    -1,    -1,    -1,    -1,   429,  1127,  1128,    -1,
    1130,    -1,  1132,    -1,    -1,    -1,    -1,    -1,    -1,  1139,
    1140,  1141,  1142,    -1,   447,  1145,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1153,  1154,    -1,  1156,  1157,    -1,    -1,
      -1,    -1,    -1,  1163,  1164,  1165,    -1,    -1,  1168,  1169,
    1170,  1171,  1172,  1173,    -1,    -1,  1176,  1177,    -1,    -1,
    1180,    -1,    -1,   486,  1184,   488,  1186,  1187,    -1,    -1,
      -1,   322,    -1,   324,   325,   326,    -1,    -1,  1198,  1199,
      -1,    -1,   333,    -1,    -1,    -1,  1206,    -1,    -1,    -1,
     513,    -1,    -1,  1213,  1214,  1215,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   535,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    34,    35,  1246,    -1,    -1,    -1,
      40,    -1,    42,    -1,    44,    45,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2066,    61,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   584,   413,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2099,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1322,    -1,    -1,   115,    -1,    -1,   118,    -1,
      -1,    -1,    -1,    -1,   465,   466,   126,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   143,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2157,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     160,    -1,    -1,    -1,    -1,  2171,    -1,    -1,    -1,  2175,
      -1,    -1,  1382,    -1,  2180,  2181,    -1,    -1,    -1,    -1,
      -1,    -1,  1392,  2189,   184,  2191,   186,  2193,  2194,  2195,
    2196,    -1,    -1,  2199,    -1,    -1,    -1,  1407,    -1,   199,
     200,  1411,    -1,  2209,    -1,  2211,  2212,    -1,  2214,  2215,
    2216,  2217,    -1,  2219,    -1,    -1,  2222,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2231,    -1,    -1,    -1,    -1,
      -1,    -1,  2238,    -1,  2240,    -1,  2242,  2243,  2244,  2245,
      -1,   241,    -1,  2249,  2250,  2251,    -1,    -1,    -1,  2255,
    2256,  2257,    -1,  2259,    -1,  2261,  1466,  2263,    -1,  2265,
      -1,  2267,    -1,   604,    -1,    -1,  2272,    -1,    -1,    -1,
     270,    -1,    -1,    -1,    -1,    -1,    -1,   618,   619,   279,
     280,  2287,   282,    -1,    -1,    -1,    -1,    -1,  2294,    -1,
      -1,  2297,    -1,    -1,    -1,    -1,    -1,  2303,    -1,    -1,
    2306,    -1,    -1,    -1,  2310,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   315,   316,   317,    -1,    13,
      -1,    15,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   334,   335,   336,    -1,    -1,    -1,
      -1,   341,    36,    -1,   344,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    50,    51,    -1,  2365,
     360,   361,    -1,    -1,    58,    -1,    -1,    -1,    -1,    63,
      64,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1589,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      84,    -1,    -1,    -1,    -1,    -1,   396,   397,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   103,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   421,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     124,  2437,    -1,    -1,    -1,    -1,    -1,    -1,   132,   133,
     134,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     144,   145,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   472,    -1,    -1,    -1,   476,   171,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   489,
    1700,  1701,  1702,   187,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   203,
      -1,    -1,    -1,    -1,   208,    -1,    -1,    -1,   212,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1740,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1749,
      -1,  1751,   236,   543,   238,    -1,   546,     6,    -1,   549,
     550,   551,   552,    -1,    13,    -1,    -1,    -1,    -1,    -1,
     254,    -1,    -1,    -1,    -1,    -1,    -1,    26,    -1,    28,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   272,  2585,
      -1,    -1,   276,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   593,   594,    -1,    -1,    -1,    -1,    58,
      -1,    -1,    -1,    -1,    63,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   619,
      -1,  1831,    -1,    82,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    90,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   114,    -1,    -1,    -1,  2665,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1878,   128,
      -1,    -1,   131,    -1,  2680,   369,    -1,    -1,  2684,   138,
      -1,    -1,    -1,    -1,    -1,    -1,   145,    -1,    -1,    -1,
      -1,    -1,   386,    -1,   153,    -1,   390,    -1,    -1,    -1,
     159,    -1,    -1,    -1,    -1,  2711,  2712,   401,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   412,    -1,
      -1,    -1,    -1,    -1,    -1,  2731,    -1,    -1,    -1,   188,
      -1,    -1,    -1,    -1,  2740,    -1,  2742,    -1,  2744,    -1,
     434,    -1,    -1,   437,    -1,   439,    -1,    -1,   442,    -1,
      -1,   445,   446,    -1,    -1,  2761,    -1,    -1,    -1,   453,
    2766,   455,   221,    -1,   223,    -1,    -1,    -1,   462,    26,
     229,    28,    -1,    -1,   468,    -1,    -1,    -1,   237,    -1,
      -1,    -1,   476,    -1,    -1,  2791,    -1,   481,    -1,   483,
      -1,    -1,   486,   252,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    60,    61,    -1,    63,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    72,    -1,    -1,   512,    -1,
      -1,    -1,   516,    -1,    -1,    82,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     309,    -1,    -1,    -1,    -1,  2861,    -1,   114,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   561,   327,    -1,
      -1,   128,   331,    -1,   131,    -1,    -1,    -1,    -1,   573,
      -1,    -1,    -1,   577,    -1,    -1,   580,    -1,    -1,  2099,
      -1,    -1,   586,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   159,    -1,    -1,  2911,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   374,    -1,    -1,    -1,    -1,
      -1,   615,   381,    -1,   383,    -1,    -1,   621,    -1,    -1,
      -1,    -1,   391,    -1,    -1,    -1,    -1,   631,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2171,    -1,    -1,   221,  2175,   223,    -1,    -1,    -1,
    2180,  2181,   229,    -1,    -1,    -1,    -1,    -1,   437,  2189,
     237,  2191,    -1,  2193,    -1,  2195,  2196,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   252,    -1,    -1,    -1,  2209,
     459,  2211,    -1,    -1,  2214,  2215,  2216,  2217,    -1,  2219,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    26,    -1,    28,
      -1,  2231,    -1,    -1,    -1,  3031,  3032,    -1,  2238,    -1,
    2240,    -1,  2242,  2243,  2244,    -1,    -1,    -1,    -1,  2249,
    2250,  2251,    -1,    -1,    -1,  2255,  2256,  2257,    -1,  2259,
      -1,  2261,   309,  2263,    63,  2265,    -1,  2267,   517,    -1,
      -1,    -1,  2272,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     327,    -1,    -1,    82,   533,    -1,    -1,  2287,   537,    -1,
      -1,    90,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2303,    -1,    -1,  2306,   556,  3104,    -1,
      -1,    -1,    -1,    -1,    -1,   114,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   574,  3122,    -1,    -1,   128,
      -1,    -1,   131,    -1,   381,    -1,   383,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   391,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3154,  3155,
     159,  3157,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3166,    -1,    -1,    -1,    -1,  3171,    -1,    -1,  3174,    -1,
    3176,  3177,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3197,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   459,    -1,    -1,    -1,  3212,    -1,    -1,    -1,
      -1,    -1,   221,    -1,   223,    -1,    -1,    -1,    -1,    -1,
     229,    -1,    -1,    -1,    -1,    -1,    -1,  2437,   237,  3235,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   252,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     517,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   533,    -1,    -1,    -1,
     537,    -1,  3288,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3297,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   556,
     309,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   574,   327,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   381,    -1,   383,    -1,  3382,    -1,    -1,    -1,
      -1,    -1,   391,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     459,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2680,    -1,    -1,    -1,  2684,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2711,  2712,    -1,    -1,    -1,    -1,    -1,   517,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3525,
      -1,  2731,    -1,    -1,   533,    -1,    -1,    -1,   537,    -1,
    2740,    -1,  2742,    -1,  2744,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   556,    -1,    -1,
      -1,    -1,  3558,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3566,    -1,    -1,    -1,    -1,   574,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2791,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3633,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2861,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3681,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2911,    -1,    -1,    -1,    -1,    -1,    -1,  3714,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3745,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3759,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3031,  3032,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3850,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3906,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3916,    -1,  3122,    -1,    -1,    -1,  3922,    -1,  3924,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3154,  3155,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3166,    -1,    -1,    -1,
      -1,  3171,    -1,  3969,  3174,    -1,  3176,  3177,    -1,  3975,
    3976,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3212,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  4019,  4020,  4021,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3235,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  4058,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  4078,    -1,    -1,    -1,    -1,    -1,  3288,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3297,    -1,    -1,
    4096,    -1,  4098,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  4108,    -1,  4110,  4111,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4137,    -1,    -1,    -1,    -1,    -1,    -1,  4144,    -1,
      -1,    -1,  4148,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  4191,    -1,    -1,    -1,  4195,
    4196,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4217,    -1,  4219,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4234,  4235,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  4249,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  4258,    -1,    -1,    -1,  4262,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  4311,  4312,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3525,    -1,    -1,  4324,  4325,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4347,    -1,    -1,    -1,    -1,    -1,    -1,  3558,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3566,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4380,    -1,    -1,    -1,    -1,    -1,
      -1,  4387,    -1,    -1,  4390,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4424,    -1,
      -1,    -1,    -1,    -1,    -1,  4431,    -1,  4433,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4443,    -1,    -1,
      -1,  4447,    -1,    -1,  4450,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  4459,    -1,  4461,    -1,  4463,    -1,    -1,
      -1,    -1,    -1,    -1,  4470,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  4481,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4497,  4498,    -1,    -1,    -1,    -1,  4503,    -1,    -1,
      -1,    -1,    -1,    -1,  3714,    -1,    -1,  4513,  4514,    -1,
      -1,    -1,  4518,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3745,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4550,    -1,    -1,    -1,    -1,  3759,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3916,    -1,    -1,    -1,
      -1,    -1,  3922,    -1,  3924,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3969,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4058,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  4096,    -1,  4098,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4108,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4217,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  4235,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  4262,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4311,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4387,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4424,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     5,    -1,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
    4450,    -1,    21,    -1,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    32,    -1,    -1,    35,    36,    37,    38,
      39,    40,    41,    -1,    43,    44,    45,    46,    47,    -1,
      49,    50,    -1,    -1,    53,    54,    55,    56,    57,    -1,
      59,    60,    61,    62,    63,    -1,    65,    66,    67,    68,
      69,    70,    71,  4503,    73,    74,    75,    76,    77,    78,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    -1,    93,    94,    95,    96,    97,    -1,
      99,   100,   101,   102,    -1,    -1,   105,   106,   107,    -1,
     109,   110,   111,    -1,   113,   114,   115,   116,   117,   118,
    4550,    -1,    -1,    -1,   123,   124,   125,    -1,    -1,   128,
     129,    -1,   131,    -1,    -1,    -1,   135,    -1,   137,   138,
     139,   140,    -1,    -1,    -1,   144,    -1,    -1,   147,   148,
     149,    -1,    -1,    -1,   153,    -1,   155,   156,    -1,   158,
     159,   160,    -1,    -1,   163,   164,    -1,   166,   167,   168,
     169,   170,   171,   172,    -1,   174,   175,   176,   177,   178,
     179,   180,    -1,   182,   183,   184,   185,    -1,   187,    -1,
      -1,    -1,   191,    -1,   193,    -1,   195,    -1,   197,   198,
     199,   200,   201,   202,    -1,   204,    -1,   206,    -1,   208,
     209,   210,    -1,   212,   213,    -1,   215,   216,    -1,    -1,
      -1,   220,   221,   222,   223,   224,    -1,   226,   227,   228,
      -1,   230,    -1,   232,    -1,    -1,    -1,   236,   237,   238,
     239,    -1,    -1,   242,    -1,   244,   245,    -1,   247,   248,
      -1,    -1,    -1,   252,    -1,    -1,   255,   256,   257,    -1,
     259,   260,    -1,   262,   263,   264,    -1,    -1,    -1,    -1,
      -1,   270,   271,    -1,   273,    -1,   275,    -1,   277,   278,
      -1,    -1,   281,    -1,    -1,    -1,    -1,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,    -1,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,    -1,    -1,    -1,    -1,   318,
     319,   320,   321,   322,   323,    -1,    -1,   326,   327,   328,
     329,    -1,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,    -1,   343,   344,   345,    -1,    -1,   348,
     349,   350,   351,   352,   353,   354,   355,   356,    -1,   358,
     359,    -1,   361,   362,   363,    -1,   365,   366,   367,   368,
      -1,   370,   371,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   380,   381,   382,    -1,   384,   385,    -1,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,    -1,   401,   402,   403,    -1,   405,    -1,   407,   408,
     409,   410,   411,    -1,   413,   414,   415,    -1,    -1,   418,
      -1,    -1,    -1,   422,   423,   424,   425,   426,    -1,    -1,
     429,   430,   431,   432,   433,    -1,   435,   436,    -1,   438,
     439,   440,   441,   442,   443,    -1,   445,    -1,   447,   448,
      -1,   450,   451,    -1,    -1,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,   464,    -1,   466,   467,    -1,
      -1,    -1,   471,   472,   473,   474,    -1,    -1,    -1,   478,
      -1,    -1,    -1,   482,    -1,   484,   485,   486,   487,   488,
      -1,   490,   491,   492,   493,   494,   495,    -1,    -1,    -1,
      -1,    -1,    -1,   502,   503,    -1,   505,    -1,    -1,   508,
      -1,    -1,   511,   512,   513,   514,   515,   516,   517,    -1,
     519,   520,   521,   522,   523,   524,   525,   526,   527,   528,
     529,   530,   531,   532,   533,    -1,   535,    -1,   537,   538,
     539,   540,    -1,   542,   543,   544,    -1,   546,   547,   548,
     549,    -1,    -1,    -1,    -1,   554,   555,   556,   557,    -1,
     559,   560,   561,   562,   563,   564,   565,   566,   567,   568,
     569,   570,    -1,   572,   573,    -1,    -1,   576,    -1,    -1,
     579,    -1,   581,    -1,   583,   584,   585,    -1,    -1,   588,
     589,   590,   591,   592,    -1,    -1,   595,   596,    -1,   598,
     599,   600,   601,   602,   603,   604,    -1,    -1,    -1,    -1,
      -1,    -1,   611,   612,    -1,   614,   615,   616,    -1,    -1,
     619,    -1,    -1,    -1,    -1,   624,   625,    -1,    -1,    -1,
      -1,   630,   631,    -1,    -1,   634,   635,    -1,    -1,   638,
     639,     5,    -1,     7,     8,     9,    10,    11,    12,    -1,
      14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    -1,
      -1,    35,    36,    37,    38,    39,    40,    41,    -1,    43,
      44,    45,    -1,    47,    -1,    49,    50,    -1,    -1,    53,
      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,
      -1,    65,    66,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    78,    79,    -1,    81,    82,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    -1,    93,
      94,    95,    96,    97,    -1,    99,   100,   101,   102,    -1,
      -1,   105,   106,   107,    -1,   109,   110,   111,    -1,   113,
     114,   115,   116,   117,   118,    -1,    -1,    -1,    -1,   123,
     124,   125,    -1,    -1,   128,   129,    -1,   131,    -1,    -1,
      -1,   135,    -1,   137,   138,   139,   140,    -1,    -1,    -1,
     144,    -1,    -1,   147,   148,   149,    -1,    -1,    -1,   153,
      -1,   155,   156,    -1,   158,   159,   160,    -1,    -1,   163,
     164,    -1,   166,   167,   168,   169,   170,   171,   172,    -1,
     174,   175,   176,   177,   178,   179,   180,    -1,   182,   183,
     184,   185,    -1,   187,    -1,    -1,    -1,   191,    -1,   193,
      -1,   195,    -1,   197,   198,   199,   200,   201,   202,    -1,
     204,    -1,   206,    -1,   208,   209,   210,    -1,   212,   213,
      -1,   215,   216,    -1,    -1,    -1,   220,   221,   222,   223,
     224,    -1,   226,   227,   228,    -1,   230,    -1,   232,    -1,
      -1,    -1,   236,   237,   238,   239,    -1,    -1,   242,    -1,
     244,   245,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,
      -1,   255,   256,   257,    -1,    -1,   260,    -1,   262,   263,
     264,    -1,    -1,    -1,    -1,    -1,   270,   271,    -1,   273,
      -1,   275,    -1,   277,   278,    -1,    -1,   281,    -1,    -1,
      -1,    -1,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,    -1,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,    -1,    -1,    -1,   318,   319,   320,   321,   322,   323,
      -1,    -1,   326,   327,   328,   329,    -1,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,   343,
     344,   345,    -1,    -1,   348,   349,   350,   351,   352,   353,
     354,   355,   356,    -1,   358,   359,    -1,   361,   362,   363,
     364,   365,   366,   367,   368,    -1,   370,   371,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   380,   381,   382,    -1,
     384,   385,    -1,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,    -1,   401,   402,   403,
      -1,   405,    -1,   407,   408,   409,   410,   411,    -1,   413,
     414,   415,    -1,    -1,   418,    -1,    -1,    -1,   422,   423,
     424,   425,   426,    -1,    -1,   429,   430,   431,   432,   433,
      -1,   435,   436,    -1,   438,   439,   440,   441,   442,   443,
      -1,   445,    -1,   447,   448,    -1,   450,   451,    -1,    -1,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,    -1,   466,   467,    -1,    -1,    -1,   471,   472,   473,
     474,    -1,    -1,    -1,   478,    -1,    -1,    -1,   482,    -1,
     484,   485,   486,   487,   488,    -1,   490,   491,   492,   493,
     494,   495,    -1,    -1,    -1,    -1,    -1,    -1,   502,   503,
      -1,   505,    -1,    -1,   508,    -1,    -1,   511,   512,   513,
     514,   515,   516,   517,    -1,   519,   520,   521,   522,   523,
     524,   525,   526,   527,   528,   529,   530,   531,   532,   533,
      -1,   535,    -1,   537,   538,   539,   540,    -1,   542,   543,
     544,    -1,   546,   547,   548,   549,    -1,    -1,    -1,    -1,
      -1,   555,   556,   557,    -1,   559,   560,   561,   562,   563,
     564,   565,   566,   567,   568,   569,   570,    -1,   572,   573,
      -1,    -1,   576,    -1,    -1,   579,    -1,   581,    -1,   583,
     584,   585,    -1,    -1,   588,   589,   590,   591,   592,    -1,
      -1,   595,   596,    -1,   598,   599,   600,   601,   602,   603,
     604,    -1,    -1,    -1,    -1,    -1,    -1,   611,   612,    -1,
     614,   615,   616,    -1,    -1,   619,    -1,    -1,    -1,    -1,
     624,   625,    -1,    -1,    -1,    -1,   630,   631,    -1,    -1,
     634,   635,    -1,    -1,   638,   639,     5,    -1,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      -1,    -1,    21,    -1,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    32,    -1,    -1,    35,    36,    37,    38,
      39,    40,    41,    -1,    43,    44,    45,    -1,    47,    -1,
      49,    50,    -1,    -1,    53,    54,    55,    56,    57,    -1,
      59,    60,    61,    62,    63,    -1,    65,    66,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    78,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    -1,    93,    94,    95,    96,    97,    -1,
      99,   100,   101,   102,    -1,    -1,   105,   106,   107,    -1,
     109,   110,   111,    -1,   113,   114,   115,   116,   117,   118,
      -1,    -1,    -1,    -1,   123,   124,   125,    -1,    -1,   128,
     129,    -1,   131,    -1,    -1,    -1,   135,    -1,   137,   138,
     139,   140,    -1,    -1,    -1,   144,    -1,    -1,   147,   148,
     149,    -1,    -1,    -1,   153,    -1,   155,   156,    -1,   158,
     159,   160,    -1,    -1,   163,   164,    -1,   166,   167,   168,
     169,   170,   171,   172,    -1,   174,   175,   176,   177,   178,
     179,   180,    -1,   182,   183,   184,   185,    -1,   187,    -1,
      -1,    -1,   191,   192,   193,    -1,   195,    -1,   197,   198,
     199,   200,   201,   202,    -1,   204,    -1,   206,    -1,   208,
     209,   210,    -1,   212,   213,    -1,   215,   216,    -1,    -1,
      -1,   220,   221,   222,   223,   224,    -1,   226,   227,   228,
      -1,   230,    -1,   232,    -1,    -1,    -1,   236,   237,   238,
     239,    -1,    -1,   242,    -1,   244,   245,    -1,   247,   248,
      -1,    -1,    -1,   252,    -1,    -1,   255,   256,   257,    -1,
      -1,   260,    -1,   262,   263,   264,    -1,    -1,    -1,    -1,
      -1,   270,   271,    -1,   273,    -1,   275,    -1,   277,   278,
      -1,    -1,   281,    -1,    -1,    -1,    -1,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,    -1,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,    -1,    -1,    -1,    -1,   318,
     319,   320,   321,   322,   323,    -1,    -1,   326,   327,   328,
     329,    -1,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,    -1,   343,   344,   345,    -1,    -1,   348,
     349,   350,   351,   352,   353,   354,   355,   356,    -1,   358,
     359,    -1,   361,   362,   363,    -1,   365,   366,   367,   368,
      -1,   370,   371,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   380,   381,   382,    -1,   384,   385,    -1,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,    -1,   401,   402,   403,    -1,   405,    -1,   407,   408,
     409,   410,   411,    -1,   413,   414,   415,    -1,    -1,   418,
      -1,    -1,    -1,   422,   423,   424,   425,   426,    -1,    -1,
     429,   430,   431,   432,   433,    -1,   435,   436,    -1,   438,
     439,   440,   441,   442,   443,    -1,   445,    -1,   447,   448,
      -1,   450,   451,    -1,    -1,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,   464,    -1,   466,   467,    -1,
      -1,    -1,   471,   472,   473,   474,    -1,    -1,    -1,   478,
      -1,    -1,    -1,   482,    -1,   484,   485,   486,   487,   488,
      -1,   490,   491,   492,   493,   494,   495,    -1,    -1,    -1,
      -1,    -1,    -1,   502,   503,    -1,   505,    -1,    -1,   508,
      -1,    -1,   511,   512,   513,   514,   515,   516,   517,    -1,
     519,   520,   521,   522,   523,   524,   525,   526,   527,   528,
     529,   530,   531,   532,   533,    -1,   535,    -1,   537,   538,
     539,   540,    -1,   542,   543,   544,    -1,   546,   547,   548,
     549,    -1,    -1,    -1,    -1,    -1,   555,   556,   557,    -1,
     559,   560,   561,   562,   563,   564,   565,   566,   567,   568,
     569,   570,    -1,   572,   573,    -1,    -1,   576,    -1,    -1,
     579,    -1,   581,    -1,   583,   584,   585,    -1,    -1,   588,
     589,   590,   591,   592,    -1,    -1,   595,   596,    -1,   598,
     599,   600,   601,   602,   603,   604,    -1,    -1,    -1,    -1,
      -1,    -1,   611,   612,    -1,   614,   615,   616,    -1,    -1,
     619,    -1,    -1,    -1,    -1,   624,   625,    -1,    -1,    -1,
      -1,   630,   631,    -1,    -1,   634,   635,    -1,    -1,   638,
     639,     5,    -1,     7,     8,     9,    10,    11,    -1,    -1,
      14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    -1,
      -1,    35,    36,    37,    38,    39,    40,    41,    -1,    43,
      44,    45,    -1,    47,    -1,    49,    50,    -1,    -1,    53,
      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,
      -1,    65,    66,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    78,    79,    -1,    81,    82,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    -1,    93,
      94,    95,    96,    97,    -1,    99,   100,   101,   102,    -1,
      -1,   105,   106,   107,    -1,   109,   110,   111,    -1,   113,
     114,   115,   116,   117,   118,    -1,    -1,    -1,    -1,   123,
     124,   125,    -1,    -1,   128,   129,    -1,   131,    -1,    -1,
      -1,   135,    -1,   137,   138,   139,   140,    -1,    -1,    -1,
     144,    -1,    -1,   147,   148,   149,    -1,    -1,    -1,   153,
      -1,   155,   156,    -1,   158,   159,   160,    -1,    -1,   163,
     164,    -1,   166,   167,   168,   169,   170,   171,   172,    -1,
     174,   175,   176,   177,   178,   179,   180,    -1,   182,   183,
     184,   185,    -1,   187,    -1,    -1,    -1,   191,   192,   193,
      -1,   195,    -1,   197,   198,   199,   200,   201,   202,    -1,
     204,    -1,   206,    -1,   208,   209,   210,    -1,   212,   213,
      -1,   215,   216,    -1,    -1,    -1,   220,   221,   222,   223,
     224,    -1,   226,   227,   228,    -1,   230,    -1,   232,    -1,
      -1,    -1,   236,   237,   238,   239,    -1,    -1,   242,    -1,
     244,   245,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,
      -1,   255,   256,   257,    -1,    -1,   260,    -1,   262,   263,
     264,    -1,    -1,    -1,    -1,    -1,   270,   271,    -1,   273,
      -1,   275,    -1,   277,   278,    -1,    -1,   281,    -1,    -1,
      -1,    -1,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,    -1,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,    -1,    -1,    -1,   318,   319,   320,   321,   322,   323,
      -1,    -1,   326,   327,   328,   329,    -1,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,   343,
     344,   345,    -1,    -1,   348,   349,   350,   351,   352,   353,
     354,   355,   356,    -1,   358,   359,    -1,   361,   362,   363,
      -1,   365,   366,   367,   368,    -1,   370,   371,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   380,   381,   382,    -1,
     384,   385,    -1,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,    -1,   401,   402,   403,
      -1,   405,    -1,   407,   408,   409,   410,   411,    -1,   413,
     414,   415,    -1,    -1,   418,    -1,    -1,    -1,   422,   423,
     424,   425,   426,    -1,    -1,   429,   430,   431,   432,   433,
      -1,   435,   436,    -1,   438,   439,   440,   441,   442,   443,
      -1,   445,    -1,   447,   448,    -1,   450,   451,    -1,    -1,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,    -1,   466,   467,    -1,    -1,    -1,   471,   472,   473,
     474,    -1,    -1,    -1,   478,    -1,    -1,    -1,   482,    -1,
     484,   485,   486,   487,   488,    -1,   490,   491,   492,   493,
     494,   495,    -1,    -1,    -1,    -1,    -1,    -1,   502,   503,
      -1,   505,    -1,    -1,   508,    -1,    -1,   511,   512,   513,
     514,   515,   516,   517,    -1,   519,   520,   521,   522,   523,
     524,   525,   526,   527,   528,   529,   530,   531,   532,   533,
      -1,   535,    -1,   537,   538,   539,   540,    -1,   542,   543,
     544,    -1,   546,   547,   548,   549,    -1,    -1,    -1,    -1,
      -1,   555,   556,   557,    -1,   559,   560,   561,   562,   563,
     564,   565,   566,   567,   568,   569,   570,    -1,   572,   573,
      -1,    -1,   576,    -1,    -1,   579,    -1,   581,    -1,   583,
     584,   585,    -1,    -1,   588,   589,   590,   591,   592,    -1,
      -1,   595,   596,    -1,   598,   599,   600,   601,   602,   603,
     604,    -1,    -1,    -1,    -1,    -1,    -1,   611,   612,    -1,
     614,   615,   616,    -1,    -1,   619,    -1,    -1,    -1,    -1,
     624,   625,    -1,    -1,    -1,    -1,   630,   631,    -1,    -1,
     634,   635,    -1,    -1,   638,   639,     5,    -1,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      -1,    -1,    21,    -1,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    32,    -1,    -1,    35,    36,    37,    38,
      39,    40,    41,    -1,    43,    44,    45,    -1,    47,    -1,
      49,    50,    -1,    -1,    53,    54,    55,    56,    57,    -1,
      59,    60,    61,    62,    63,    -1,    65,    66,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    78,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    -1,    93,    94,    95,    96,    97,    -1,
      99,   100,   101,   102,    -1,    -1,   105,   106,   107,    -1,
     109,   110,   111,    -1,   113,   114,   115,   116,   117,   118,
      -1,    -1,    -1,    -1,   123,   124,   125,    -1,    -1,   128,
     129,    -1,   131,    -1,    -1,    -1,   135,    -1,   137,   138,
     139,   140,    -1,    -1,    -1,   144,    -1,    -1,   147,   148,
     149,    -1,    -1,    -1,   153,    -1,   155,   156,    -1,   158,
     159,   160,    -1,    -1,   163,   164,    -1,   166,   167,   168,
     169,   170,   171,   172,    -1,   174,   175,   176,   177,   178,
     179,   180,    -1,   182,   183,   184,   185,    -1,   187,    -1,
      -1,    -1,   191,   192,   193,    -1,   195,    -1,   197,   198,
     199,   200,   201,   202,    -1,   204,    -1,   206,    -1,   208,
     209,   210,    -1,   212,   213,    -1,   215,   216,    -1,    -1,
      -1,   220,   221,   222,   223,   224,    -1,   226,   227,   228,
      -1,   230,    -1,   232,    -1,    -1,    -1,   236,   237,   238,
     239,    -1,    -1,   242,    -1,   244,   245,    -1,   247,   248,
      -1,    -1,    -1,   252,    -1,    -1,   255,   256,   257,    -1,
      -1,   260,    -1,   262,   263,   264,    -1,    -1,    -1,    -1,
      -1,   270,   271,    -1,   273,    -1,   275,    -1,   277,   278,
      -1,    -1,   281,    -1,    -1,    -1,    -1,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,    -1,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,    -1,    -1,    -1,    -1,   318,
     319,   320,   321,   322,   323,    -1,    -1,   326,   327,   328,
     329,    -1,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,    -1,   343,   344,   345,    -1,    -1,   348,
     349,   350,   351,   352,   353,   354,   355,   356,    -1,   358,
     359,    -1,   361,   362,   363,    -1,   365,   366,   367,   368,
      -1,   370,   371,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   380,   381,   382,    -1,   384,   385,    -1,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,    -1,   401,   402,   403,    -1,   405,    -1,   407,   408,
     409,   410,   411,    -1,   413,   414,   415,    -1,    -1,   418,
      -1,    -1,    -1,   422,   423,   424,   425,   426,    -1,    -1,
     429,   430,   431,   432,   433,    -1,   435,   436,    -1,   438,
     439,   440,   441,   442,   443,    -1,   445,    -1,   447,   448,
      -1,   450,   451,    -1,    -1,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,   464,    -1,   466,   467,    -1,
      -1,    -1,   471,   472,   473,   474,    -1,    -1,    -1,   478,
      -1,    -1,    -1,   482,    -1,   484,   485,   486,   487,   488,
      -1,   490,   491,   492,   493,   494,   495,    -1,    -1,    -1,
      -1,    -1,    -1,   502,   503,    -1,   505,    -1,    -1,   508,
      -1,    -1,   511,   512,   513,   514,   515,   516,   517,    -1,
     519,   520,   521,   522,   523,   524,   525,   526,   527,   528,
     529,   530,   531,   532,   533,    -1,   535,    -1,   537,   538,
     539,   540,    -1,   542,   543,   544,    -1,   546,   547,   548,
     549,    -1,    -1,    -1,    -1,    -1,   555,   556,   557,    -1,
     559,   560,   561,   562,   563,   564,   565,   566,   567,   568,
     569,   570,    -1,   572,   573,    -1,    -1,   576,    -1,    -1,
     579,    -1,   581,    -1,   583,   584,   585,    -1,    -1,   588,
     589,   590,   591,   592,    -1,    -1,   595,   596,    -1,   598,
     599,   600,   601,   602,   603,   604,    -1,    -1,    -1,    -1,
      -1,    -1,   611,   612,    -1,   614,   615,   616,    -1,    -1,
     619,    -1,    -1,    -1,    -1,   624,   625,    -1,    -1,    -1,
      -1,   630,   631,    -1,    -1,   634,   635,    -1,    -1,   638,
     639,     5,    -1,     7,     8,     9,    10,    11,    -1,    -1,
      14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    -1,
      -1,    35,    36,    37,    38,    39,    40,    41,    -1,    43,
      44,    45,    -1,    47,    -1,    49,    50,    -1,    -1,    53,
      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,
      -1,    65,    66,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    78,    79,    -1,    81,    82,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    -1,    93,
      94,    95,    96,    97,    -1,    99,   100,   101,   102,    -1,
      -1,   105,   106,   107,    -1,   109,   110,   111,    -1,   113,
     114,   115,   116,   117,   118,    -1,    -1,    -1,    -1,   123,
     124,   125,    -1,    -1,   128,   129,    -1,   131,    -1,    -1,
      -1,   135,    -1,   137,   138,   139,   140,    -1,    -1,    -1,
     144,    -1,    -1,   147,   148,   149,    -1,    -1,    -1,   153,
      -1,   155,   156,    -1,   158,   159,   160,    -1,    -1,   163,
     164,    -1,   166,   167,   168,   169,   170,   171,   172,    -1,
     174,   175,   176,   177,   178,   179,   180,    -1,   182,   183,
     184,   185,    -1,   187,    -1,    -1,    -1,   191,    -1,   193,
      -1,   195,    -1,   197,   198,   199,   200,   201,   202,    -1,
     204,    -1,   206,    -1,   208,   209,   210,    -1,   212,   213,
      -1,   215,   216,    -1,    -1,    -1,   220,   221,   222,   223,
     224,    -1,   226,   227,   228,    -1,   230,    -1,   232,    -1,
      -1,    -1,   236,   237,   238,   239,    -1,    -1,   242,    -1,
     244,   245,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,
      -1,   255,   256,   257,    -1,    -1,   260,    -1,   262,   263,
     264,    -1,    -1,    -1,    -1,    -1,   270,   271,    -1,   273,
      -1,   275,    -1,   277,   278,    -1,    -1,   281,    -1,    -1,
      -1,    -1,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,    -1,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,    -1,    -1,    -1,   318,   319,   320,   321,   322,   323,
      -1,    -1,   326,   327,   328,   329,    -1,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,   343,
     344,   345,    -1,    -1,   348,   349,   350,   351,   352,   353,
     354,   355,   356,    -1,   358,   359,    -1,   361,   362,   363,
      -1,   365,   366,   367,   368,    -1,   370,   371,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   380,   381,   382,    -1,
     384,   385,    -1,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,    -1,   401,   402,   403,
      -1,   405,    -1,   407,   408,   409,   410,   411,    -1,   413,
     414,   415,    -1,    -1,   418,    -1,    -1,    -1,   422,   423,
     424,   425,   426,    -1,    -1,   429,   430,   431,   432,   433,
      -1,   435,   436,    -1,   438,   439,   440,   441,   442,   443,
      -1,   445,    -1,   447,   448,    -1,   450,   451,    -1,    -1,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,    -1,   466,   467,    -1,    -1,    -1,   471,   472,   473,
     474,    -1,    -1,    -1,   478,    -1,    -1,    -1,   482,    -1,
     484,   485,   486,   487,   488,    -1,   490,   491,   492,   493,
     494,   495,    -1,    -1,    -1,    -1,    -1,    -1,   502,   503,
      -1,   505,    -1,    -1,   508,    -1,    -1,   511,   512,   513,
     514,   515,   516,   517,    -1,   519,   520,   521,   522,   523,
     524,   525,   526,   527,   528,   529,   530,   531,   532,   533,
      -1,   535,    -1,   537,   538,   539,   540,    -1,   542,   543,
     544,    -1,   546,   547,   548,   549,    -1,    -1,    -1,    -1,
      -1,   555,   556,   557,    -1,   559,   560,   561,   562,   563,
     564,   565,   566,   567,   568,   569,   570,    -1,   572,   573,
      -1,    -1,   576,    -1,    -1,   579,    -1,   581,    -1,   583,
     584,   585,    -1,    -1,   588,   589,   590,   591,   592,    -1,
      -1,   595,   596,    -1,   598,   599,   600,   601,   602,   603,
     604,    -1,    -1,    -1,    -1,    -1,    -1,   611,   612,    -1,
     614,   615,   616,    -1,    -1,   619,    -1,    -1,    -1,    -1,
     624,   625,    -1,    -1,    -1,    -1,   630,   631,    -1,    -1,
     634,   635,    -1,    -1,   638,   639,     5,    -1,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      -1,    -1,    21,    -1,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    32,    -1,    -1,    35,    36,    37,    38,
      39,    40,    41,    -1,    43,    44,    45,    -1,    47,    -1,
      49,    50,    -1,    -1,    53,    54,    55,    56,    57,    -1,
      59,    60,    61,    62,    63,    -1,    65,    66,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    78,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    -1,    93,    94,    95,    96,    97,    -1,
      99,   100,   101,   102,    -1,    -1,   105,   106,   107,    -1,
     109,   110,   111,    -1,   113,   114,   115,   116,   117,   118,
      -1,    -1,    -1,    -1,   123,   124,   125,    -1,    -1,   128,
     129,    -1,   131,    -1,    -1,    -1,   135,    -1,   137,   138,
     139,   140,    -1,    -1,    -1,   144,    -1,    -1,   147,   148,
     149,    -1,    -1,    -1,   153,    -1,   155,   156,    -1,   158,
     159,   160,    -1,    -1,   163,   164,    -1,   166,   167,   168,
     169,   170,   171,   172,    -1,   174,   175,   176,   177,   178,
     179,   180,    -1,   182,   183,   184,   185,    -1,   187,    -1,
      -1,    -1,   191,    -1,   193,    -1,   195,    -1,   197,   198,
     199,   200,   201,   202,    -1,   204,    -1,   206,    -1,   208,
     209,   210,    -1,   212,   213,    -1,   215,   216,    -1,    -1,
      -1,   220,   221,   222,   223,   224,    -1,   226,   227,   228,
      -1,   230,    -1,   232,    -1,    -1,    -1,   236,   237,   238,
     239,    -1,    -1,   242,    -1,   244,   245,    -1,   247,   248,
      -1,    -1,    -1,   252,    -1,    -1,   255,   256,   257,    -1,
      -1,   260,    -1,   262,   263,   264,    -1,    -1,    -1,    -1,
      -1,   270,   271,    -1,   273,    -1,   275,    -1,   277,   278,
      -1,    -1,   281,    -1,    -1,    -1,    -1,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,    -1,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,    -1,    -1,    -1,    -1,   318,
     319,   320,   321,   322,   323,    -1,    -1,   326,   327,   328,
     329,    -1,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,    -1,   343,   344,   345,    -1,    -1,   348,
     349,   350,   351,   352,   353,   354,   355,   356,    -1,   358,
     359,    -1,   361,   362,   363,    -1,   365,   366,   367,   368,
      -1,   370,   371,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   380,   381,   382,    -1,   384,   385,    -1,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,    -1,   401,   402,   403,    -1,   405,    -1,   407,   408,
     409,   410,   411,    -1,   413,   414,   415,    -1,    -1,   418,
      -1,    -1,    -1,   422,   423,   424,   425,   426,    -1,    -1,
     429,   430,   431,   432,   433,    -1,   435,   436,    -1,   438,
     439,   440,   441,   442,   443,    -1,   445,    -1,   447,   448,
      -1,   450,   451,    -1,    -1,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,   464,    -1,   466,   467,    -1,
      -1,    -1,   471,   472,   473,   474,    -1,    -1,    -1,   478,
      -1,    -1,    -1,   482,    -1,   484,   485,   486,   487,   488,
      -1,   490,   491,   492,   493,   494,   495,    -1,    -1,    -1,
      -1,    -1,    -1,   502,   503,    -1,   505,    -1,    -1,   508,
      -1,    -1,   511,   512,   513,   514,   515,   516,   517,    -1,
     519,   520,   521,   522,   523,   524,   525,   526,   527,   528,
     529,   530,   531,   532,   533,    -1,   535,    -1,   537,   538,
     539,   540,    -1,   542,   543,   544,    -1,   546,   547,   548,
     549,    -1,    -1,    -1,    -1,    -1,   555,   556,   557,    -1,
     559,   560,   561,   562,   563,   564,   565,   566,   567,   568,
     569,   570,    -1,   572,   573,    -1,    -1,   576,    -1,    -1,
     579,    -1,   581,    -1,   583,   584,   585,    -1,    -1,   588,
     589,   590,   591,   592,    -1,    -1,   595,   596,    -1,   598,
     599,   600,   601,   602,   603,   604,    -1,    -1,    -1,    -1,
      -1,    -1,   611,   612,    -1,   614,   615,   616,    -1,    -1,
     619,    -1,    -1,    -1,    -1,   624,   625,    -1,    -1,    -1,
      -1,   630,   631,    -1,    -1,   634,   635,    -1,    -1,   638,
     639,     5,    -1,     7,     8,     9,    10,    11,    12,    -1,
      14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    -1,
      -1,    35,    36,    37,    38,    39,    40,    41,    -1,    43,
      44,    45,    -1,    47,    -1,    49,    50,    -1,    -1,    53,
      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,
      -1,    65,    66,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    78,    79,    -1,    81,    82,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    -1,    93,
      94,    95,    96,    97,    -1,    99,   100,   101,   102,    -1,
      -1,   105,   106,   107,    -1,   109,   110,   111,    -1,   113,
     114,   115,   116,   117,   118,    -1,    -1,    -1,    -1,   123,
     124,   125,    -1,    -1,   128,   129,    -1,   131,    -1,    -1,
      -1,   135,    -1,   137,   138,   139,   140,    -1,    -1,    -1,
     144,    -1,    -1,   147,   148,   149,    -1,    -1,    -1,   153,
      -1,   155,   156,    -1,   158,   159,   160,    -1,    -1,   163,
     164,    -1,   166,   167,   168,   169,   170,   171,   172,    -1,
     174,   175,   176,   177,   178,   179,   180,    -1,   182,   183,
     184,   185,    -1,   187,    -1,    -1,    -1,   191,    -1,   193,
      -1,   195,    -1,   197,   198,   199,   200,   201,   202,    -1,
     204,    -1,   206,    -1,   208,   209,   210,    -1,   212,   213,
      -1,   215,   216,    -1,    -1,    -1,   220,   221,   222,   223,
     224,    -1,   226,   227,   228,    -1,   230,    -1,   232,    -1,
      -1,    -1,   236,   237,   238,   239,    -1,    -1,   242,    -1,
     244,   245,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,
      -1,   255,   256,   257,    -1,    -1,   260,    -1,   262,   263,
     264,    -1,    -1,    -1,    -1,    -1,   270,   271,    -1,   273,
      -1,   275,    -1,   277,   278,    -1,    -1,   281,    -1,    -1,
      -1,    -1,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,    -1,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,    -1,    -1,    -1,   318,   319,   320,   321,   322,   323,
      -1,    -1,   326,   327,   328,   329,    -1,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,   343,
     344,   345,    -1,    -1,   348,   349,   350,   351,   352,    -1,
     354,   355,   356,    -1,   358,   359,    -1,   361,   362,   363,
      -1,   365,   366,   367,   368,    -1,   370,   371,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   380,   381,   382,    -1,
     384,   385,    -1,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,    -1,   401,   402,   403,
      -1,   405,    -1,   407,   408,   409,   410,   411,    -1,   413,
     414,   415,    -1,    -1,   418,    -1,    -1,    -1,   422,   423,
     424,   425,   426,    -1,    -1,   429,   430,   431,   432,   433,
      -1,   435,   436,    -1,   438,   439,   440,   441,   442,   443,
      -1,   445,    -1,   447,   448,    -1,   450,   451,    -1,    -1,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,    -1,   466,   467,    -1,    -1,    -1,   471,   472,   473,
     474,    -1,    -1,    -1,   478,    -1,    -1,    -1,   482,    -1,
     484,   485,   486,   487,   488,    -1,   490,   491,   492,   493,
     494,   495,    -1,    -1,    -1,    -1,    -1,    -1,   502,   503,
      -1,   505,    -1,    -1,   508,    -1,    -1,   511,   512,   513,
     514,   515,   516,   517,    -1,   519,   520,   521,   522,   523,
     524,   525,   526,   527,   528,   529,   530,   531,   532,   533,
      -1,   535,    -1,   537,   538,   539,   540,    -1,   542,   543,
     544,    -1,   546,   547,   548,   549,    -1,    -1,    -1,    -1,
      -1,   555,   556,   557,    -1,   559,   560,   561,   562,   563,
     564,   565,   566,   567,   568,   569,   570,    -1,   572,   573,
      -1,    -1,   576,    -1,    -1,   579,    -1,   581,    -1,   583,
     584,   585,    -1,    -1,   588,   589,   590,   591,   592,    -1,
      -1,   595,   596,    -1,   598,   599,   600,   601,   602,   603,
     604,    -1,    -1,    -1,    -1,    -1,    -1,   611,   612,    -1,
     614,   615,   616,    -1,    -1,   619,    -1,    -1,    -1,    -1,
     624,   625,    -1,    -1,    -1,    -1,   630,   631,    -1,    -1,
     634,   635,    -1,    -1,   638,   639,     5,    -1,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      -1,    -1,    21,    -1,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    32,    -1,    -1,    35,    36,    37,    38,
      39,    40,    41,    -1,    43,    44,    45,    -1,    47,    -1,
      49,    50,    -1,    -1,    53,    54,    55,    56,    57,    -1,
      59,    60,    61,    62,    63,    -1,    65,    66,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    78,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    -1,    93,    94,    95,    96,    97,    -1,
      99,   100,   101,   102,    -1,    -1,   105,   106,   107,    -1,
     109,   110,   111,    -1,   113,   114,   115,   116,   117,   118,
      -1,    -1,    -1,    -1,   123,   124,   125,    -1,    -1,   128,
     129,    -1,   131,    -1,    -1,    -1,   135,    -1,   137,   138,
     139,   140,    -1,    -1,    -1,   144,    -1,    -1,   147,   148,
     149,    -1,    -1,    -1,   153,    -1,   155,   156,    -1,   158,
     159,   160,    -1,    -1,   163,   164,    -1,   166,   167,   168,
     169,   170,   171,   172,    -1,   174,   175,   176,   177,   178,
     179,   180,    -1,   182,   183,   184,   185,    -1,   187,    -1,
      -1,    -1,   191,    -1,   193,    -1,   195,    -1,   197,   198,
     199,   200,   201,   202,    -1,   204,    -1,   206,    -1,   208,
     209,   210,    -1,   212,   213,    -1,   215,   216,    -1,    -1,
      -1,   220,   221,   222,   223,   224,    -1,   226,   227,   228,
      -1,   230,    -1,   232,    -1,    -1,    -1,   236,   237,   238,
     239,    -1,    -1,   242,    -1,   244,   245,    -1,   247,   248,
      -1,    -1,    -1,   252,    -1,    -1,   255,   256,   257,    -1,
      -1,   260,    -1,   262,   263,   264,    -1,    -1,    -1,    -1,
      -1,   270,   271,    -1,   273,    -1,   275,    -1,   277,   278,
      -1,    -1,   281,    -1,    -1,    -1,    -1,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,    -1,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,    -1,    -1,    -1,    -1,   318,
     319,   320,   321,   322,   323,    -1,    -1,   326,   327,   328,
     329,    -1,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,    -1,   343,   344,   345,    -1,    -1,   348,
     349,   350,   351,   352,   353,   354,   355,   356,    -1,   358,
     359,    -1,   361,   362,   363,    -1,   365,   366,   367,   368,
      -1,   370,   371,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   380,   381,   382,    -1,   384,   385,    -1,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,    -1,   401,   402,   403,    -1,   405,    -1,   407,   408,
     409,   410,   411,    -1,   413,   414,   415,    -1,    -1,   418,
      -1,    -1,    -1,   422,   423,   424,   425,   426,    -1,    -1,
     429,   430,   431,   432,   433,    -1,   435,   436,    -1,   438,
     439,   440,   441,   442,   443,    -1,   445,    -1,   447,   448,
      -1,   450,   451,    -1,    -1,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,   464,    -1,   466,   467,    -1,
      -1,    -1,   471,   472,   473,   474,    -1,    -1,    -1,   478,
      -1,    -1,    -1,   482,    -1,   484,   485,   486,   487,   488,
      -1,   490,   491,   492,   493,   494,   495,    -1,    -1,    -1,
      -1,    -1,    -1,   502,   503,    -1,   505,    -1,    -1,   508,
      -1,    -1,   511,   512,   513,   514,   515,   516,   517,    -1,
     519,   520,   521,   522,   523,   524,   525,   526,   527,   528,
     529,   530,   531,   532,   533,    -1,   535,    -1,   537,   538,
     539,   540,    -1,   542,   543,   544,    -1,   546,   547,   548,
     549,    -1,    -1,    -1,    -1,    -1,   555,   556,   557,    -1,
     559,   560,   561,   562,   563,   564,   565,   566,   567,   568,
     569,   570,    -1,   572,   573,    -1,    -1,   576,    -1,    -1,
     579,    -1,   581,    -1,   583,   584,   585,    -1,    -1,   588,
     589,   590,   591,   592,    -1,    -1,   595,   596,    -1,   598,
     599,   600,   601,   602,   603,   604,    -1,    -1,    -1,    -1,
      -1,    -1,   611,   612,    -1,   614,   615,   616,    -1,    -1,
     619,    -1,    -1,    -1,    -1,   624,   625,    -1,    -1,    -1,
      -1,   630,   631,    -1,    -1,   634,   635,    -1,    -1,   638,
     639,     5,    -1,     7,     8,     9,    10,    11,    -1,    -1,
      14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    -1,
      -1,    35,    36,    37,    38,    39,    40,    41,    -1,    43,
      44,    45,    -1,    47,    -1,    49,    50,    -1,    -1,    53,
      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,
      -1,    65,    66,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    78,    79,    -1,    81,    82,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    -1,    93,
      94,    95,    96,    97,    -1,    99,   100,   101,   102,    -1,
      -1,   105,   106,   107,    -1,   109,   110,   111,    -1,   113,
     114,   115,   116,   117,   118,    -1,    -1,    -1,    -1,   123,
     124,   125,    -1,    -1,   128,   129,    -1,   131,    -1,    -1,
      -1,   135,    -1,   137,   138,   139,   140,    -1,    -1,    -1,
     144,    -1,    -1,   147,   148,   149,    -1,    -1,    -1,   153,
      -1,   155,   156,    -1,   158,   159,   160,    -1,    -1,   163,
     164,    -1,   166,   167,   168,   169,   170,   171,   172,    -1,
     174,   175,   176,   177,   178,   179,   180,    -1,   182,   183,
     184,   185,    -1,   187,    -1,    -1,    -1,   191,    -1,   193,
      -1,   195,    -1,   197,   198,   199,   200,   201,   202,    -1,
     204,    -1,   206,    -1,   208,   209,   210,    -1,   212,   213,
      -1,   215,   216,    -1,    -1,    -1,   220,   221,   222,   223,
     224,    -1,   226,   227,   228,    -1,   230,    -1,   232,    -1,
      -1,    -1,   236,   237,   238,   239,    -1,    -1,   242,    -1,
     244,   245,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,
      -1,   255,   256,   257,    -1,    -1,   260,    -1,   262,   263,
     264,    -1,    -1,    -1,    -1,    -1,   270,   271,    -1,   273,
      -1,   275,    -1,   277,   278,    -1,    -1,   281,    -1,    -1,
      -1,    -1,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,    -1,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,    -1,    -1,    -1,   318,   319,   320,   321,   322,   323,
      -1,    -1,   326,   327,   328,   329,    -1,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,   343,
     344,   345,    -1,    -1,   348,   349,   350,   351,   352,   353,
     354,   355,   356,    -1,   358,   359,    -1,   361,   362,   363,
      -1,   365,   366,   367,   368,    -1,   370,   371,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   380,   381,   382,    -1,
     384,   385,    -1,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,    -1,   401,   402,   403,
      -1,   405,    -1,   407,   408,   409,   410,   411,    -1,   413,
     414,   415,    -1,    -1,   418,    -1,    -1,    -1,   422,   423,
     424,   425,   426,    -1,    -1,   429,   430,   431,   432,   433,
      -1,   435,   436,    -1,   438,   439,   440,   441,   442,   443,
      -1,   445,    -1,   447,   448,    -1,   450,   451,    -1,    -1,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,    -1,   466,   467,    -1,    -1,    -1,   471,   472,   473,
     474,    -1,    -1,    -1,   478,    -1,    -1,    -1,   482,    -1,
     484,   485,   486,   487,   488,    -1,   490,   491,   492,   493,
     494,   495,    -1,    -1,    -1,    -1,    -1,    -1,   502,   503,
      -1,   505,    -1,    -1,   508,    -1,    -1,   511,   512,   513,
     514,   515,   516,   517,    -1,   519,   520,   521,   522,   523,
     524,   525,   526,   527,   528,   529,   530,   531,   532,   533,
      -1,   535,    -1,   537,   538,   539,   540,    -1,   542,   543,
     544,    -1,   546,   547,   548,   549,    -1,    -1,    -1,    -1,
      -1,   555,   556,   557,    -1,   559,   560,   561,   562,   563,
     564,   565,   566,   567,   568,   569,   570,    -1,   572,   573,
      -1,    -1,   576,    -1,    -1,   579,    -1,   581,    -1,   583,
     584,   585,    -1,    -1,   588,   589,   590,   591,   592,    -1,
      -1,   595,   596,    -1,   598,   599,   600,   601,   602,   603,
     604,    -1,    -1,    -1,    -1,    -1,    -1,   611,   612,    -1,
     614,   615,   616,    -1,    -1,   619,    -1,    -1,    -1,    -1,
     624,   625,    -1,    -1,    -1,    -1,   630,   631,    -1,    -1,
     634,   635,    -1,    -1,   638,   639,     5,    -1,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      -1,    -1,    21,    -1,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    32,    -1,    -1,    35,    36,    37,    38,
      39,    40,    41,    -1,    43,    44,    45,    -1,    47,    -1,
      49,    50,    -1,    -1,    53,    54,    55,    56,    57,    -1,
      59,    60,    61,    62,    63,    -1,    65,    66,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    78,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    -1,    93,    94,    95,    96,    97,    -1,
      99,   100,   101,   102,    -1,    -1,   105,   106,   107,    -1,
     109,   110,   111,    -1,   113,   114,   115,   116,   117,   118,
      -1,    -1,    -1,    -1,   123,   124,   125,    -1,    -1,   128,
     129,    -1,   131,    -1,    -1,    -1,   135,    -1,   137,   138,
     139,   140,    -1,    -1,    -1,   144,    -1,    -1,   147,   148,
     149,    -1,    -1,    -1,   153,    -1,   155,   156,    -1,   158,
     159,   160,    -1,    -1,   163,   164,    -1,   166,   167,   168,
     169,   170,   171,   172,    -1,   174,   175,   176,   177,   178,
     179,   180,    -1,   182,   183,   184,   185,    -1,   187,    -1,
      -1,    -1,   191,    -1,   193,    -1,   195,    -1,   197,   198,
     199,   200,   201,   202,    -1,   204,    -1,   206,    -1,   208,
     209,   210,    -1,   212,   213,    -1,   215,   216,    -1,    -1,
      -1,   220,   221,   222,   223,   224,    -1,   226,   227,   228,
      -1,   230,    -1,   232,    -1,    -1,    -1,   236,   237,   238,
     239,    -1,    -1,   242,    -1,   244,   245,    -1,   247,   248,
      -1,    -1,    -1,   252,    -1,    -1,   255,   256,   257,    -1,
      -1,   260,    -1,   262,   263,   264,    -1,    -1,    -1,    -1,
      -1,   270,   271,    -1,   273,    -1,   275,    -1,   277,   278,
      -1,    -1,   281,    -1,    -1,    -1,    -1,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,    -1,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,    -1,    -1,    -1,    -1,   318,
     319,   320,   321,   322,   323,    -1,    -1,   326,   327,   328,
     329,    -1,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,    -1,   343,   344,   345,    -1,    -1,   348,
     349,   350,   351,   352,   353,   354,   355,   356,    -1,   358,
     359,    -1,   361,   362,   363,    -1,   365,   366,   367,   368,
      -1,   370,   371,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   380,   381,   382,    -1,   384,   385,    -1,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,    -1,   401,   402,   403,    -1,   405,    -1,   407,   408,
     409,   410,   411,    -1,   413,   414,   415,    -1,    -1,   418,
      -1,    -1,    -1,   422,   423,   424,   425,   426,    -1,    -1,
     429,   430,   431,   432,   433,    -1,   435,   436,    -1,   438,
     439,   440,   441,   442,   443,    -1,   445,    -1,   447,   448,
      -1,   450,   451,    -1,    -1,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,   464,    -1,   466,   467,    -1,
      -1,    -1,   471,   472,   473,   474,    -1,    -1,    -1,   478,
      -1,    -1,    -1,   482,    -1,   484,   485,   486,   487,   488,
      -1,   490,   491,   492,   493,   494,   495,    -1,    -1,    -1,
      -1,    -1,    -1,   502,   503,    -1,   505,    -1,    -1,   508,
      -1,    -1,   511,   512,   513,   514,   515,   516,   517,    -1,
     519,   520,   521,   522,   523,   524,   525,   526,   527,   528,
     529,   530,   531,   532,   533,    -1,   535,    -1,   537,   538,
     539,   540,    -1,   542,   543,   544,    -1,   546,   547,   548,
     549,    -1,    -1,    -1,    -1,    -1,   555,   556,   557,    -1,
     559,   560,   561,   562,   563,   564,   565,   566,   567,   568,
     569,   570,    -1,   572,   573,    -1,    -1,   576,    -1,    -1,
     579,    -1,   581,    -1,   583,   584,   585,    -1,    -1,   588,
     589,   590,   591,   592,    -1,    -1,   595,   596,    -1,   598,
     599,   600,   601,   602,   603,   604,    -1,    -1,    -1,    -1,
      -1,    -1,   611,   612,    -1,   614,   615,   616,    -1,    -1,
     619,    -1,    -1,    -1,    -1,   624,   625,    -1,    -1,    -1,
      -1,   630,   631,    -1,    -1,   634,   635,    -1,    -1,   638,
     639,     5,    -1,     7,     8,     9,    10,    11,    -1,    -1,
      14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    -1,
      -1,    35,    36,    37,    38,    39,    40,    41,    -1,    43,
      44,    45,    -1,    47,    -1,    49,    50,    -1,    -1,    53,
      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,
      -1,    65,    66,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    78,    79,    -1,    81,    82,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    -1,    93,
      94,    95,    96,    97,    -1,    99,   100,   101,   102,    -1,
      -1,   105,   106,   107,    -1,   109,   110,   111,    -1,   113,
     114,   115,   116,   117,   118,    -1,    -1,    -1,    -1,   123,
     124,   125,    -1,    -1,   128,   129,    -1,   131,    -1,    -1,
      -1,   135,    -1,   137,   138,   139,   140,    -1,    -1,    -1,
     144,    -1,    -1,   147,   148,   149,    -1,    -1,    -1,   153,
      -1,   155,   156,    -1,   158,   159,   160,    -1,    -1,   163,
     164,    -1,   166,   167,   168,   169,   170,   171,   172,    -1,
     174,   175,   176,   177,   178,   179,   180,    -1,   182,   183,
     184,   185,    -1,   187,    -1,    -1,    -1,   191,    -1,   193,
      -1,   195,    -1,   197,   198,   199,   200,   201,   202,    -1,
     204,    -1,   206,    -1,   208,   209,   210,    -1,   212,   213,
      -1,   215,   216,    -1,    -1,    -1,   220,   221,   222,   223,
     224,    -1,   226,   227,   228,    -1,   230,    -1,   232,    -1,
      -1,    -1,   236,   237,   238,   239,    -1,    -1,   242,    -1,
     244,   245,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,
      -1,   255,   256,   257,    -1,    -1,   260,    -1,   262,   263,
     264,    -1,    -1,    -1,    -1,    -1,   270,   271,    -1,   273,
      -1,   275,    -1,   277,   278,    -1,    -1,   281,    -1,    -1,
      -1,    -1,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,    -1,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,    -1,    -1,    -1,   318,   319,   320,   321,   322,   323,
      -1,    -1,   326,   327,   328,   329,    -1,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,   343,
     344,   345,    -1,    -1,   348,   349,   350,   351,   352,   353,
     354,   355,   356,    -1,   358,   359,    -1,   361,   362,   363,
      -1,   365,   366,   367,   368,    -1,   370,   371,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   380,   381,   382,    -1,
     384,   385,    -1,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,    -1,   401,   402,   403,
      -1,   405,    -1,   407,   408,   409,   410,   411,    -1,   413,
     414,   415,    -1,    -1,   418,    -1,    -1,    -1,   422,   423,
     424,   425,   426,    -1,    -1,   429,   430,   431,   432,   433,
      -1,   435,   436,    -1,   438,   439,   440,   441,   442,   443,
      -1,   445,    -1,   447,   448,    -1,   450,   451,    -1,    -1,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,    -1,   466,   467,    -1,    -1,    -1,   471,   472,   473,
     474,    -1,    -1,    -1,   478,    -1,    -1,    -1,   482,    -1,
     484,   485,   486,   487,   488,    -1,   490,   491,   492,   493,
     494,   495,    -1,    -1,    -1,    -1,    -1,    -1,   502,   503,
      -1,   505,    -1,    -1,   508,    -1,    -1,   511,   512,   513,
     514,   515,   516,   517,    -1,   519,   520,   521,   522,   523,
     524,   525,   526,   527,   528,   529,   530,   531,   532,   533,
      -1,   535,    -1,   537,   538,   539,   540,    -1,   542,   543,
     544,    -1,   546,   547,   548,   549,    -1,    -1,    -1,    -1,
      -1,   555,   556,   557,    -1,   559,   560,   561,   562,   563,
     564,   565,   566,   567,   568,   569,   570,    -1,   572,   573,
      -1,    -1,   576,    -1,    -1,   579,    -1,   581,    -1,   583,
     584,   585,    -1,    -1,   588,   589,   590,   591,   592,    -1,
      -1,   595,   596,    -1,   598,   599,   600,   601,   602,   603,
     604,    -1,    -1,    -1,    -1,    -1,    -1,   611,   612,    -1,
     614,   615,   616,    -1,    -1,   619,    -1,    -1,    -1,    -1,
     624,   625,    -1,    -1,    -1,    -1,   630,   631,    -1,    -1,
     634,   635,    -1,    -1,   638,   639,     5,    -1,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      -1,    -1,    21,    -1,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    32,    -1,    -1,    35,    36,    37,    38,
      39,    40,    41,    -1,    43,    44,    45,    -1,    47,    -1,
      49,    50,    -1,    -1,    53,    54,    55,    56,    57,    -1,
      59,    60,    61,    62,    63,    -1,    65,    66,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    78,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    -1,    93,    94,    95,    96,    97,    -1,
      99,   100,   101,   102,    -1,    -1,   105,   106,   107,    -1,
     109,   110,   111,    -1,   113,   114,   115,   116,   117,   118,
      -1,    -1,    -1,    -1,   123,   124,   125,    -1,    -1,   128,
     129,    -1,   131,    -1,    -1,    -1,   135,    -1,   137,   138,
     139,   140,    -1,    -1,    -1,   144,    -1,    -1,   147,   148,
     149,    -1,    -1,    -1,   153,    -1,   155,   156,    -1,   158,
     159,   160,    -1,    -1,   163,   164,    -1,   166,   167,   168,
     169,   170,   171,   172,    -1,   174,   175,   176,   177,   178,
     179,   180,    -1,   182,   183,   184,   185,    -1,   187,    -1,
      -1,    -1,   191,    -1,   193,    -1,   195,    -1,   197,   198,
     199,   200,   201,   202,    -1,   204,    -1,   206,    -1,   208,
     209,   210,    -1,   212,   213,    -1,   215,   216,    -1,    -1,
      -1,   220,   221,   222,   223,   224,    -1,   226,   227,   228,
      -1,   230,    -1,   232,    -1,    -1,    -1,   236,   237,   238,
     239,    -1,    -1,   242,    -1,   244,   245,    -1,   247,   248,
      -1,    -1,    -1,   252,    -1,    -1,   255,   256,   257,    -1,
      -1,   260,    -1,   262,   263,   264,    -1,    -1,    -1,    -1,
      -1,   270,   271,    -1,   273,    -1,   275,    -1,   277,   278,
      -1,    -1,   281,    -1,    -1,    -1,    -1,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,    -1,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,    -1,    -1,    -1,   318,
     319,   320,   321,   322,   323,    -1,    -1,   326,   327,   328,
     329,    -1,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,    -1,   343,   344,   345,    -1,    -1,   348,
     349,   350,   351,   352,    -1,   354,   355,   356,    -1,   358,
     359,    -1,   361,   362,   363,    -1,   365,   366,   367,   368,
      -1,   370,   371,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   380,   381,   382,    -1,   384,   385,    -1,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,    -1,   401,   402,   403,    -1,   405,    -1,   407,   408,
     409,   410,   411,    -1,   413,   414,   415,    -1,    -1,   418,
      -1,    -1,    -1,   422,   423,   424,   425,   426,    -1,    -1,
     429,   430,   431,   432,   433,    -1,   435,   436,    -1,   438,
     439,   440,   441,   442,   443,    -1,   445,    -1,   447,   448,
      -1,   450,   451,    -1,    -1,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,   464,    -1,   466,   467,    -1,
      -1,    -1,   471,   472,   473,   474,    -1,    -1,    -1,   478,
      -1,    -1,    -1,   482,    -1,   484,   485,   486,   487,   488,
      -1,   490,   491,   492,   493,   494,   495,    -1,    -1,    -1,
      -1,    -1,    -1,   502,   503,    -1,   505,    -1,    -1,   508,
      -1,    -1,   511,   512,   513,   514,   515,   516,   517,    -1,
     519,   520,   521,   522,   523,   524,   525,   526,   527,   528,
     529,   530,   531,   532,   533,    -1,   535,    -1,   537,   538,
     539,   540,    -1,   542,   543,   544,    -1,   546,   547,   548,
     549,    -1,    -1,    -1,    -1,    -1,   555,   556,   557,    -1,
     559,   560,   561,   562,   563,   564,   565,   566,   567,   568,
     569,   570,    -1,   572,   573,    -1,    -1,   576,    -1,    -1,
     579,    -1,   581,    -1,   583,   584,   585,    -1,    -1,   588,
     589,   590,   591,   592,    -1,    -1,   595,   596,    -1,   598,
     599,   600,   601,   602,   603,   604,    -1,    -1,    -1,    -1,
      -1,    -1,   611,   612,    -1,   614,   615,   616,    -1,    -1,
     619,    -1,    -1,    -1,    -1,   624,   625,    -1,    -1,    -1,
      -1,   630,   631,    -1,    -1,   634,   635,    -1,    -1,   638,
     639,     5,    -1,     7,     8,     9,    10,    11,    -1,    -1,
      14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    -1,
      -1,    35,    36,    37,    38,    39,    40,    41,    -1,    43,
      44,    45,    -1,    47,    -1,    49,    50,    -1,    -1,    53,
      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,
      -1,    65,    66,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    78,    79,    -1,    81,    82,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    -1,    93,
      94,    95,    96,    97,    -1,    99,   100,   101,   102,    -1,
      -1,   105,   106,   107,    -1,   109,   110,   111,    -1,   113,
     114,   115,   116,   117,   118,    -1,    -1,    -1,    -1,   123,
     124,   125,    -1,    -1,   128,   129,    -1,   131,    -1,    -1,
      -1,   135,    -1,   137,   138,   139,   140,    -1,    -1,    -1,
     144,    -1,    -1,   147,   148,   149,    -1,    -1,    -1,   153,
      -1,   155,   156,    -1,   158,   159,   160,    -1,    -1,   163,
     164,    -1,   166,   167,   168,   169,   170,   171,   172,    -1,
     174,   175,   176,   177,   178,   179,   180,    -1,   182,   183,
     184,   185,    -1,   187,    -1,    -1,    -1,   191,    -1,   193,
      -1,   195,    -1,   197,   198,   199,   200,   201,   202,    -1,
     204,    -1,   206,    -1,   208,   209,   210,    -1,   212,   213,
      -1,   215,   216,    -1,    -1,    -1,   220,   221,   222,   223,
     224,    -1,   226,   227,   228,    -1,   230,    -1,   232,    -1,
      -1,    -1,   236,   237,   238,   239,    -1,    -1,   242,    -1,
     244,   245,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,
      -1,   255,   256,   257,    -1,    -1,   260,    -1,   262,   263,
     264,    -1,    -1,    -1,    -1,    -1,   270,   271,    -1,   273,
      -1,   275,    -1,   277,   278,    -1,    -1,   281,    -1,    -1,
      -1,    -1,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,    -1,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,    -1,    -1,    -1,   318,   319,   320,   321,   322,   323,
      -1,    -1,   326,   327,   328,   329,    -1,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,   343,
     344,   345,    -1,    -1,   348,   349,   350,   351,   352,    -1,
     354,   355,   356,    -1,   358,   359,    -1,   361,   362,   363,
      -1,   365,   366,   367,   368,    -1,   370,   371,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   380,   381,   382,    -1,
     384,   385,    -1,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,    -1,   401,   402,   403,
      -1,   405,    -1,   407,   408,   409,   410,   411,    -1,   413,
     414,   415,    -1,    -1,   418,    -1,    -1,    -1,   422,   423,
     424,   425,   426,    -1,    -1,   429,   430,   431,   432,   433,
      -1,   435,   436,    -1,   438,   439,   440,   441,   442,   443,
      -1,   445,    -1,   447,   448,    -1,   450,   451,    -1,    -1,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,    -1,   466,   467,    -1,    -1,    -1,   471,   472,   473,
     474,    -1,    -1,    -1,   478,    -1,    -1,    -1,   482,    -1,
     484,   485,   486,   487,   488,    -1,   490,   491,   492,   493,
     494,   495,    -1,    -1,    -1,    -1,    -1,    -1,   502,   503,
      -1,   505,    -1,    -1,   508,    -1,    -1,   511,   512,   513,
     514,   515,   516,   517,    -1,   519,   520,   521,   522,   523,
     524,   525,   526,   527,   528,   529,   530,   531,   532,   533,
      -1,   535,    -1,   537,   538,   539,   540,    -1,   542,   543,
     544,    -1,   546,   547,   548,   549,    -1,    -1,    -1,    -1,
      -1,   555,   556,   557,    -1,   559,   560,   561,   562,   563,
     564,   565,   566,   567,   568,   569,   570,    -1,   572,   573,
      -1,    -1,   576,    -1,    -1,   579,    -1,   581,    -1,   583,
     584,   585,    -1,    -1,   588,   589,   590,   591,   592,    -1,
      -1,   595,   596,    -1,   598,   599,   600,   601,   602,   603,
     604,    -1,    -1,    -1,    -1,    -1,    -1,   611,   612,    -1,
     614,   615,   616,    -1,    -1,   619,    -1,    -1,    -1,    -1,
     624,   625,    -1,    -1,    -1,    -1,   630,   631,    -1,    -1,
     634,   635,    -1,    -1,   638,   639,     5,    -1,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      -1,    -1,    21,    -1,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    32,    -1,    -1,    35,    36,    37,    38,
      39,    40,    41,    -1,    43,    44,    45,    -1,    47,    -1,
      49,    50,    -1,    -1,    53,    54,    55,    56,    57,    -1,
      59,    60,    61,    62,    63,    -1,    65,    66,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    78,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    -1,    93,    94,    95,    96,    97,    -1,
      99,   100,   101,   102,    -1,    -1,   105,   106,   107,    -1,
     109,   110,   111,    -1,   113,   114,   115,   116,   117,   118,
      -1,    -1,    -1,    -1,   123,   124,   125,    -1,    -1,   128,
     129,    -1,   131,    -1,    -1,    -1,   135,    -1,   137,   138,
     139,   140,    -1,    -1,    -1,   144,    -1,    -1,   147,   148,
     149,    -1,    -1,    -1,   153,    -1,   155,   156,    -1,   158,
     159,   160,    -1,    -1,   163,   164,    -1,   166,   167,   168,
     169,   170,   171,   172,    -1,   174,   175,   176,   177,   178,
     179,   180,    -1,   182,   183,   184,   185,    -1,   187,    -1,
      -1,    -1,   191,    -1,   193,    -1,   195,    -1,   197,   198,
     199,   200,   201,   202,    -1,   204,    -1,   206,    -1,   208,
     209,   210,    -1,   212,   213,    -1,   215,   216,    -1,    -1,
      -1,   220,   221,   222,   223,   224,    -1,   226,   227,   228,
      -1,   230,    -1,   232,    -1,    -1,    -1,   236,   237,   238,
     239,    -1,    -1,   242,    -1,   244,   245,    -1,   247,   248,
      -1,    -1,    -1,   252,    -1,    -1,   255,   256,   257,    -1,
      -1,   260,    -1,   262,   263,   264,    -1,    -1,    -1,    -1,
      -1,   270,   271,    -1,   273,    -1,   275,    -1,   277,   278,
      -1,    -1,   281,    -1,    -1,    -1,    -1,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,    -1,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,    -1,    -1,    -1,    -1,   318,
     319,   320,   321,   322,   323,    -1,    -1,   326,   327,   328,
     329,    -1,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,    -1,   343,   344,   345,    -1,    -1,   348,
     349,   350,   351,   352,    -1,   354,   355,   356,    -1,   358,
     359,    -1,   361,   362,   363,    -1,   365,   366,   367,   368,
      -1,   370,   371,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   380,   381,   382,    -1,   384,   385,    -1,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,    -1,   401,   402,   403,    -1,   405,    -1,   407,   408,
     409,   410,   411,    -1,   413,   414,   415,    -1,    -1,   418,
      -1,    -1,    -1,   422,   423,   424,   425,   426,    -1,    -1,
     429,   430,   431,   432,   433,    -1,   435,   436,    -1,   438,
     439,   440,   441,   442,   443,    -1,   445,    -1,   447,   448,
      -1,   450,   451,    -1,    -1,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,   464,    -1,   466,   467,    -1,
      -1,    -1,   471,   472,   473,   474,    -1,    -1,    -1,   478,
      -1,    -1,    -1,   482,    -1,   484,   485,   486,   487,   488,
      -1,   490,   491,   492,   493,   494,   495,    -1,    -1,    -1,
      -1,    -1,    -1,   502,   503,    -1,   505,    -1,    -1,   508,
      -1,    -1,   511,   512,   513,   514,   515,   516,   517,    -1,
     519,   520,   521,   522,   523,   524,   525,   526,   527,   528,
     529,   530,   531,   532,   533,    -1,   535,    -1,   537,   538,
     539,   540,    -1,   542,   543,   544,    -1,   546,   547,   548,
     549,    -1,    -1,    -1,    -1,    -1,   555,   556,   557,    -1,
     559,   560,   561,   562,   563,   564,   565,   566,   567,   568,
     569,   570,    -1,   572,   573,    -1,    -1,   576,    -1,    -1,
     579,    -1,   581,    -1,   583,   584,   585,    -1,    -1,   588,
     589,   590,   591,   592,    -1,    -1,   595,   596,    -1,   598,
     599,   600,   601,   602,   603,   604,    -1,    -1,    -1,    -1,
      -1,    -1,   611,   612,    -1,   614,   615,   616,    -1,    -1,
     619,    -1,    -1,    -1,    -1,   624,   625,    -1,    -1,    -1,
      -1,   630,   631,    -1,    -1,   634,   635,    -1,    -1,   638,
     639,     5,    -1,     7,     8,     9,    10,    11,    -1,    -1,
      14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    -1,
      -1,    35,    36,    37,    38,    39,    40,    41,    -1,    43,
      44,    45,    -1,    47,    -1,    49,    50,    -1,    -1,    53,
      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,
      -1,    65,    66,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    78,    79,    -1,    81,    82,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    -1,    93,
      94,    95,    96,    97,    -1,    99,   100,   101,   102,    -1,
      -1,   105,   106,   107,    -1,   109,   110,   111,    -1,   113,
     114,   115,   116,   117,   118,    -1,    -1,    -1,    -1,   123,
     124,   125,    -1,    -1,   128,   129,    -1,   131,    -1,    -1,
      -1,   135,    -1,   137,   138,   139,   140,    -1,    -1,    -1,
     144,    -1,    -1,   147,   148,   149,    -1,    -1,    -1,   153,
      -1,   155,   156,    -1,   158,   159,   160,    -1,    -1,   163,
     164,    -1,   166,   167,   168,   169,   170,   171,   172,    -1,
     174,   175,   176,   177,   178,   179,   180,    -1,   182,   183,
     184,   185,    -1,   187,    -1,    -1,    -1,   191,    -1,   193,
      -1,   195,    -1,   197,   198,   199,   200,   201,   202,    -1,
     204,    -1,   206,    -1,   208,   209,   210,    -1,   212,   213,
      -1,   215,   216,    -1,    -1,    -1,   220,   221,   222,   223,
     224,    -1,   226,   227,   228,    -1,   230,    -1,   232,    -1,
      -1,    -1,   236,   237,   238,   239,    -1,    -1,   242,    -1,
     244,   245,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,
      -1,   255,   256,   257,    -1,    -1,   260,    -1,   262,   263,
     264,    -1,    -1,    -1,    -1,    -1,   270,   271,    -1,   273,
      -1,   275,    -1,   277,   278,    -1,    -1,   281,    -1,    -1,
      -1,    -1,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,    -1,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,    -1,    -1,    -1,   318,   319,   320,   321,   322,   323,
      -1,    -1,   326,   327,   328,   329,    -1,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,   343,
     344,   345,    -1,    -1,   348,   349,   350,   351,   352,    -1,
     354,   355,   356,    -1,   358,   359,    -1,   361,   362,   363,
      -1,   365,   366,   367,   368,    -1,   370,   371,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   380,   381,   382,    -1,
     384,   385,    -1,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,    -1,   401,   402,   403,
      -1,   405,    -1,   407,   408,   409,   410,   411,    -1,   413,
     414,   415,    -1,    -1,   418,    -1,    -1,    -1,   422,   423,
     424,   425,   426,    -1,    -1,   429,   430,   431,   432,   433,
      -1,   435,   436,    -1,   438,   439,   440,   441,   442,   443,
      -1,   445,    -1,   447,   448,    -1,   450,   451,    -1,    -1,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,    -1,   466,   467,    -1,    -1,    -1,   471,   472,   473,
     474,    -1,    -1,    -1,   478,    -1,    -1,    -1,   482,    -1,
     484,   485,   486,   487,   488,    -1,   490,   491,   492,   493,
     494,   495,    -1,    -1,    -1,    -1,    -1,    -1,   502,   503,
      -1,   505,    -1,    -1,   508,    -1,    -1,   511,   512,   513,
     514,   515,   516,   517,    -1,   519,   520,   521,   522,   523,
     524,   525,   526,   527,   528,   529,   530,   531,   532,   533,
      -1,   535,    -1,   537,   538,   539,   540,    -1,   542,   543,
     544,    -1,   546,   547,   548,   549,    -1,    -1,    -1,    -1,
      -1,   555,   556,   557,    -1,   559,   560,   561,   562,   563,
     564,   565,   566,   567,   568,   569,   570,    -1,   572,   573,
      -1,    -1,   576,    -1,    -1,   579,    -1,   581,    -1,   583,
     584,   585,    -1,    -1,   588,   589,   590,   591,   592,    -1,
      -1,   595,   596,    -1,   598,   599,   600,   601,   602,   603,
     604,    -1,    -1,    -1,    -1,    -1,    -1,   611,   612,    -1,
     614,   615,   616,    -1,    -1,   619,    -1,    -1,    -1,    -1,
     624,   625,    -1,    -1,    -1,    -1,   630,   631,    -1,    -1,
     634,   635,    -1,    -1,   638,   639,     5,    -1,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      -1,    -1,    21,    -1,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    32,    -1,    -1,    -1,    36,    37,    -1,
      -1,    40,    -1,    -1,    43,    44,    45,    -1,    47,    -1,
      49,    50,    -1,    -1,    53,    -1,    -1,    56,    57,    -1,
      59,    60,    -1,    62,    63,    -1,    65,    66,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    78,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    -1,    93,    94,    95,    96,    97,    -1,
      99,    -1,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,
     109,    -1,    -1,    -1,   113,   114,   115,    -1,    -1,   118,
      -1,    -1,    -1,    -1,   123,   124,   125,    -1,    -1,    -1,
     129,    -1,   131,    -1,    -1,    -1,   135,    -1,   137,   138,
     139,   140,    -1,    -1,    -1,   144,    -1,    -1,   147,   148,
     149,    -1,    -1,    -1,   153,    -1,   155,   156,    -1,   158,
     159,   160,    -1,    -1,   163,   164,    -1,   166,   167,   168,
     169,   170,   171,    -1,    -1,   174,   175,   176,    -1,   178,
     179,   180,    -1,   182,   183,   184,   185,    -1,   187,    -1,
      -1,    -1,   191,    -1,   193,    -1,   195,    -1,   197,   198,
     199,   200,   201,   202,    -1,   204,    -1,    -1,    -1,   208,
     209,   210,    -1,   212,   213,    -1,   215,   216,    -1,    -1,
      -1,   220,   221,   222,   223,    -1,    -1,   226,   227,   228,
      -1,   230,    -1,   232,    -1,    -1,    -1,    -1,   237,   238,
      -1,    -1,    -1,   242,    -1,   244,   245,    -1,   247,   248,
      -1,    -1,    -1,   252,    -1,    -1,   255,   256,   257,    -1,
      -1,   260,    -1,    -1,   263,   264,    -1,    -1,    -1,    -1,
      -1,   270,   271,    -1,   273,    -1,   275,    -1,   277,   278,
      -1,    -1,   281,    -1,    -1,    -1,    -1,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,    -1,   303,   304,   305,    -1,   307,   308,
     309,   310,    -1,   312,   313,    -1,    -1,    -1,    -1,   318,
     319,   320,   321,   322,   323,    -1,    -1,   326,   327,    -1,
     329,    -1,   331,    -1,   333,   334,   335,   336,   337,   338,
     339,   340,   341,    -1,   343,   344,   345,    -1,    -1,   348,
     349,   350,   351,    -1,    -1,    -1,   355,   356,    -1,   358,
     359,    -1,   361,   362,   363,    -1,   365,   366,   367,   368,
      -1,   370,   371,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   380,   381,   382,    -1,    -1,   385,    -1,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
      -1,    -1,   401,   402,   403,    -1,   405,    -1,   407,   408,
     409,   410,   411,    -1,   413,   414,   415,    -1,    -1,   418,
      -1,    -1,    -1,   422,   423,   424,   425,   426,    -1,    -1,
     429,   430,   431,   432,   433,    -1,   435,   436,    -1,   438,
     439,   440,    -1,    -1,   443,    -1,   445,    -1,   447,   448,
      -1,   450,   451,    -1,    -1,    -1,   455,   456,   457,   458,
     459,   460,   461,   462,   463,   464,    -1,   466,   467,    -1,
      -1,    -1,   471,   472,   473,   474,    -1,    -1,    -1,   478,
      -1,    -1,    -1,   482,    -1,   484,   485,   486,   487,   488,
      -1,   490,   491,   492,   493,   494,   495,    -1,    -1,    -1,
      -1,    -1,    -1,   502,   503,    -1,   505,    -1,    -1,   508,
      -1,    -1,   511,   512,   513,    -1,    -1,   516,   517,    -1,
     519,   520,   521,   522,   523,   524,    -1,    -1,   527,   528,
     529,   530,    -1,   532,   533,    -1,   535,    -1,   537,   538,
     539,   540,    -1,   542,   543,   544,    -1,   546,   547,   548,
     549,    -1,    -1,    -1,    -1,    -1,   555,   556,   557,    -1,
      -1,   560,   561,   562,   563,   564,   565,   566,   567,   568,
     569,   570,    -1,   572,   573,    -1,    -1,   576,    -1,    -1,
     579,    -1,   581,    -1,   583,   584,   585,    -1,    -1,    -1,
      -1,    -1,    -1,   592,    -1,    -1,   595,    -1,    -1,    -1,
     599,   600,   601,   602,   603,   604,    -1,    -1,    -1,    -1,
      -1,    -1,   611,   612,    -1,   614,   615,   616,    -1,    -1,
     619,    -1,    -1,    -1,    -1,     5,    -1,     7,     8,     9,
      10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,   638,
     639,    21,    -1,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    -1,    -1,    -1,    36,    -1,    -1,    -1,
      40,    -1,    -1,    43,    44,    45,    -1,    47,    -1,    49,
      50,    -1,    -1,    53,    -1,    -1,    56,    57,    -1,    59,
      60,    -1,    62,    63,    -1,    65,    66,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    77,    78,    79,
      -1,    81,    82,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    92,    93,    94,    95,    96,    97,    -1,    99,
      -1,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,   109,
      -1,    -1,    -1,   113,   114,   115,    -1,    -1,   118,    -1,
      -1,    -1,    -1,   123,   124,    -1,    -1,    -1,    -1,   129,
      -1,   131,    -1,    -1,    -1,   135,    -1,   137,   138,   139,
     140,    -1,    -1,    -1,   144,    -1,    -1,   147,   148,   149,
      -1,    -1,    -1,   153,    -1,   155,   156,    -1,   158,   159,
     160,    -1,    -1,   163,   164,    -1,   166,   167,   168,   169,
     170,   171,    -1,    -1,   174,   175,   176,    -1,    -1,   179,
     180,    -1,   182,   183,   184,    -1,    -1,   187,    -1,    -1,
      -1,   191,    -1,   193,   194,   195,    -1,   197,   198,   199,
     200,   201,   202,    -1,   204,    -1,    -1,    -1,   208,   209,
     210,    -1,   212,    -1,    -1,   215,   216,    -1,    -1,    -1,
     220,   221,   222,   223,    -1,    -1,   226,   227,   228,   229,
     230,    -1,   232,    -1,    -1,    -1,    -1,   237,   238,    -1,
      -1,    -1,   242,    -1,   244,   245,    -1,   247,   248,    -1,
      -1,    -1,   252,   253,    -1,   255,   256,   257,    -1,    -1,
     260,    -1,    -1,   263,   264,    -1,   266,    -1,    -1,    -1,
     270,   271,    -1,   273,    -1,   275,    -1,   277,   278,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,    -1,   303,   304,   305,    -1,   307,   308,   309,
     310,    -1,   312,   313,    -1,    -1,    -1,    -1,   318,   319,
     320,   321,   322,   323,    -1,    -1,   326,   327,    -1,   329,
      -1,   331,    -1,   333,   334,   335,   336,   337,   338,   339,
     340,   341,    -1,    -1,   344,   345,    -1,    -1,   348,   349,
     350,   351,    -1,    -1,    -1,   355,   356,    -1,    -1,    -1,
      -1,   361,   362,   363,    -1,   365,   366,   367,   368,    -1,
     370,   371,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     380,   381,   382,    -1,    -1,   385,    -1,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,    -1,
      -1,   401,   402,   403,    -1,   405,    -1,   407,   408,   409,
     410,   411,    -1,   413,   414,   415,    -1,    -1,   418,    -1,
      -1,    -1,   422,   423,   424,   425,   426,    -1,    -1,   429,
     430,   431,   432,   433,    -1,   435,   436,    -1,   438,   439,
     440,    -1,    -1,   443,    -1,   445,    -1,   447,   448,    -1,
     450,   451,    -1,    -1,    -1,   455,   456,   457,   458,   459,
     460,   461,   462,   463,   464,    -1,   466,   467,   468,    -1,
      -1,   471,   472,   473,   474,    -1,    -1,    -1,   478,    -1,
      -1,    -1,   482,    -1,   484,   485,   486,   487,   488,    -1,
     490,   491,   492,   493,   494,   495,   496,    -1,    -1,    -1,
      -1,    -1,   502,   503,    -1,   505,    -1,    -1,   508,    -1,
      -1,   511,   512,   513,    -1,    -1,   516,   517,    -1,   519,
     520,   521,   522,   523,   524,    -1,    -1,   527,   528,   529,
     530,    -1,   532,   533,    -1,   535,    -1,   537,   538,   539,
     540,    -1,    -1,   543,   544,    -1,   546,   547,   548,   549,
      -1,    -1,    -1,    -1,    -1,   555,   556,   557,    -1,    -1,
      -1,   561,   562,   563,   564,    -1,   566,   567,    -1,   569,
     570,    -1,   572,   573,    -1,    -1,   576,    -1,    -1,   579,
      -1,   581,    -1,   583,   584,   585,    -1,    -1,    -1,    -1,
      -1,    -1,   592,    -1,    -1,   595,    -1,    -1,    -1,   599,
     600,   601,   602,   603,   604,    -1,    -1,    -1,    -1,    -1,
      -1,   611,   612,    -1,   614,   615,   616,    -1,    -1,   619,
      -1,    -1,     5,    -1,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,   639,
      23,    24,    25,    26,    27,    28,    29,    30,    -1,    32,
      -1,    -1,    -1,    36,    -1,    -1,    -1,    40,    -1,    -1,
      43,    44,    45,    -1,    47,    -1,    49,    50,    -1,    -1,
      53,    -1,    -1,    56,    57,    -1,    59,    60,    -1,    62,
      63,    -1,    65,    66,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    78,    79,    -1,    81,    82,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    92,
      93,    94,    95,    96,    97,    -1,    99,    -1,    -1,   102,
      -1,    -1,   105,    -1,    -1,    -1,   109,    -1,    -1,    -1,
     113,   114,   115,    -1,    -1,   118,    -1,    -1,    -1,    -1,
     123,   124,    -1,    -1,    -1,    -1,   129,    -1,   131,    -1,
      -1,    -1,   135,    -1,   137,   138,   139,   140,    -1,    -1,
      -1,   144,    -1,    -1,   147,   148,   149,    -1,    -1,    -1,
     153,    -1,   155,   156,    -1,   158,   159,   160,    -1,    -1,
     163,   164,    -1,   166,   167,   168,   169,   170,   171,    -1,
      -1,   174,   175,   176,    -1,    -1,   179,   180,    -1,   182,
     183,   184,    -1,    -1,   187,    -1,    -1,    -1,   191,    -1,
     193,   194,   195,    -1,   197,   198,   199,   200,   201,   202,
      -1,   204,    -1,    -1,    -1,   208,   209,   210,    -1,   212,
      -1,    -1,   215,   216,    -1,    -1,    -1,   220,   221,   222,
     223,    -1,    -1,   226,   227,   228,   229,   230,    -1,   232,
      -1,    -1,    -1,    -1,   237,   238,    -1,    -1,    -1,   242,
      -1,   244,   245,    -1,   247,   248,    -1,    -1,    -1,   252,
     253,    -1,   255,   256,   257,    -1,    -1,   260,    -1,    -1,
     263,   264,    -1,    -1,    -1,    -1,    -1,   270,   271,    -1,
     273,    -1,   275,    -1,   277,   278,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,    -1,
     303,   304,   305,    -1,   307,   308,   309,   310,    -1,   312,
     313,    -1,    -1,    -1,    -1,   318,   319,   320,   321,   322,
     323,    -1,    -1,   326,   327,    -1,   329,    -1,   331,    -1,
     333,   334,   335,   336,   337,   338,   339,   340,   341,    -1,
      -1,   344,   345,    -1,    -1,   348,   349,   350,   351,    -1,
      -1,    -1,   355,   356,    -1,    -1,    -1,    -1,   361,   362,
     363,    -1,   365,   366,   367,   368,    -1,   370,   371,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   380,   381,   382,
      -1,    -1,   385,    -1,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,    -1,    -1,   401,   402,
     403,    -1,   405,    -1,   407,   408,   409,   410,   411,    -1,
     413,   414,   415,    -1,    -1,   418,    -1,    -1,    -1,   422,
     423,   424,   425,   426,    -1,    -1,   429,   430,   431,   432,
     433,    -1,   435,   436,    -1,   438,   439,   440,    -1,    -1,
     443,    -1,   445,    -1,   447,   448,    -1,   450,   451,    -1,
      -1,    -1,   455,   456,   457,   458,   459,   460,   461,   462,
     463,   464,    -1,   466,   467,    -1,    -1,    -1,   471,   472,
     473,   474,    -1,    -1,    -1,   478,    -1,    -1,    -1,   482,
      -1,   484,   485,   486,   487,   488,    -1,   490,   491,   492,
     493,   494,   495,   496,    -1,    -1,    -1,    -1,    -1,   502,
     503,    -1,   505,    -1,    -1,   508,    -1,    -1,   511,   512,
     513,    -1,    -1,   516,   517,    -1,   519,   520,   521,   522,
     523,   524,    -1,    -1,   527,   528,   529,   530,    -1,   532,
     533,    -1,   535,    -1,   537,   538,   539,   540,    -1,    -1,
     543,   544,    -1,   546,   547,   548,   549,    -1,    -1,    -1,
      -1,    -1,   555,   556,   557,    -1,    -1,    -1,   561,   562,
     563,   564,    -1,   566,   567,    -1,   569,   570,    -1,   572,
     573,    -1,    -1,   576,    -1,    -1,   579,    -1,   581,    -1,
     583,   584,   585,    -1,    -1,    -1,    -1,    -1,    -1,   592,
      -1,    -1,   595,    -1,    -1,    -1,   599,   600,   601,   602,
     603,   604,    -1,    -1,    -1,    -1,    -1,    -1,   611,   612,
      -1,   614,   615,   616,    -1,    -1,   619,    -1,    -1,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    21,   639,    23,    24,    25,
      26,    27,    28,    29,    30,    -1,    32,    -1,    -1,    -1,
      36,    -1,    -1,    -1,    40,    -1,    -1,    43,    44,    45,
      -1,    47,    -1,    49,    50,    -1,    -1,    53,    -1,    -1,
      56,    57,    -1,    59,    60,    -1,    62,    63,    -1,    65,
      66,    67,    68,    69,    70,    71,    -1,    73,    74,    75,
      76,    77,    78,    79,    -1,    81,    82,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    -1,    93,    94,    95,
      96,    97,    -1,    99,    -1,    -1,   102,    -1,    -1,   105,
      -1,    -1,    -1,   109,    -1,    -1,    -1,   113,   114,   115,
      -1,    -1,   118,    -1,    -1,    -1,    -1,   123,   124,    -1,
      -1,    -1,    -1,   129,    -1,   131,    -1,    -1,    -1,   135,
      -1,   137,   138,   139,   140,    -1,    -1,    -1,   144,    -1,
      -1,   147,   148,   149,    -1,    -1,    -1,   153,    -1,   155,
     156,    -1,   158,   159,   160,    -1,    -1,   163,   164,    -1,
     166,   167,   168,   169,   170,   171,    -1,    -1,   174,   175,
     176,    -1,    -1,   179,   180,    -1,   182,   183,   184,    -1,
      -1,   187,    -1,    -1,    -1,   191,    -1,   193,    -1,   195,
      -1,   197,   198,   199,   200,   201,   202,    -1,   204,    -1,
      -1,    -1,   208,   209,   210,    -1,   212,    -1,    -1,   215,
     216,    -1,    -1,    -1,   220,   221,   222,   223,    -1,    -1,
     226,   227,   228,    -1,   230,    -1,   232,    -1,    -1,    -1,
      -1,   237,   238,    -1,    -1,    -1,   242,    -1,   244,   245,
      -1,   247,   248,    -1,    -1,    -1,   252,    -1,    -1,   255,
     256,   257,    -1,    -1,   260,    -1,    -1,   263,   264,    -1,
      -1,    -1,    -1,    -1,   270,   271,    -1,   273,    -1,   275,
      -1,   277,   278,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,    -1,   303,   304,   305,
      -1,   307,   308,   309,   310,    -1,   312,   313,    -1,    -1,
      -1,    -1,   318,   319,   320,   321,   322,   323,    -1,    -1,
     326,   327,    -1,   329,    -1,   331,    -1,   333,   334,   335,
     336,   337,   338,   339,   340,   341,    -1,    -1,   344,   345,
      -1,    -1,   348,   349,   350,   351,    -1,    -1,    -1,   355,
     356,    -1,    -1,    -1,    -1,   361,   362,   363,    -1,   365,
     366,   367,   368,    -1,   370,   371,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   380,   381,   382,    -1,    -1,   385,
      -1,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,    -1,    -1,   401,   402,   403,    -1,   405,
      -1,   407,   408,   409,   410,   411,    -1,   413,   414,   415,
      -1,    -1,   418,    -1,    -1,    -1,   422,   423,   424,   425,
     426,    -1,    -1,   429,   430,   431,   432,   433,    -1,   435,
     436,    -1,   438,   439,   440,    -1,    -1,   443,    -1,   445,
      -1,   447,   448,    -1,   450,   451,    -1,    -1,    -1,   455,
     456,   457,   458,   459,   460,   461,   462,   463,   464,    -1,
     466,   467,   468,    -1,    -1,   471,   472,   473,   474,    -1,
      -1,    -1,   478,    -1,    -1,    -1,   482,    -1,   484,   485,
     486,   487,   488,    -1,   490,   491,   492,   493,   494,   495,
      -1,    -1,    -1,    -1,    -1,    -1,   502,   503,    -1,   505,
      -1,    -1,   508,    -1,    -1,   511,   512,   513,    -1,    -1,
     516,   517,    -1,   519,   520,   521,   522,   523,   524,    -1,
      -1,   527,   528,   529,   530,    -1,   532,   533,    -1,   535,
      -1,   537,   538,   539,   540,    -1,    -1,   543,   544,    -1,
     546,   547,   548,   549,    -1,    -1,    -1,    -1,    -1,   555,
     556,   557,    -1,    -1,    -1,   561,   562,   563,   564,    -1,
     566,   567,    -1,   569,   570,    -1,   572,   573,    -1,    -1,
     576,    -1,    -1,   579,    -1,   581,    -1,   583,   584,   585,
      -1,    -1,    -1,    -1,    -1,    -1,   592,    -1,    -1,   595,
      -1,    -1,    -1,   599,   600,   601,   602,   603,   604,    -1,
      -1,    -1,    -1,    -1,    -1,   611,   612,    -1,   614,   615,
     616,    -1,    -1,   619,    -1,    -1,     5,    -1,     7,     8,
       9,    10,    11,    -1,    -1,    14,   632,    -1,    -1,    18,
      -1,    -1,    21,   639,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    32,    -1,    -1,    -1,    36,    -1,    -1,
      -1,    40,    -1,    -1,    43,    44,    45,    -1,    47,    -1,
      49,    50,    -1,    -1,    53,    -1,    -1,    56,    57,    -1,
      59,    60,    -1,    62,    63,    -1,    65,    66,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    78,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    -1,    93,    94,    95,    96,    97,    -1,
      99,    -1,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,
     109,    -1,    -1,    -1,   113,   114,   115,    -1,    -1,   118,
      -1,    -1,    -1,    -1,   123,   124,    -1,    -1,    -1,    -1,
     129,    -1,   131,    -1,    -1,    -1,   135,    -1,   137,   138,
     139,   140,    -1,    -1,    -1,   144,    -1,    -1,   147,   148,
     149,    -1,    -1,    -1,   153,    -1,   155,   156,    -1,   158,
     159,   160,    -1,    -1,   163,   164,    -1,   166,   167,   168,
     169,   170,   171,    -1,    -1,   174,   175,   176,    -1,    -1,
     179,   180,    -1,   182,   183,   184,    -1,    -1,   187,    -1,
      -1,    -1,   191,    -1,   193,    -1,   195,    -1,   197,   198,
     199,   200,   201,   202,    -1,   204,    -1,    -1,    -1,   208,
     209,   210,    -1,   212,    -1,    -1,   215,   216,    -1,    -1,
      -1,   220,   221,   222,   223,    -1,    -1,   226,   227,   228,
      -1,   230,    -1,   232,    -1,    -1,    -1,    -1,   237,   238,
      -1,    -1,    -1,   242,    -1,   244,   245,    -1,   247,   248,
      -1,    -1,    -1,   252,    -1,    -1,   255,   256,   257,    -1,
      -1,   260,    -1,    -1,   263,   264,    -1,    -1,    -1,    -1,
      -1,   270,   271,    -1,   273,    -1,   275,    -1,   277,   278,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,    -1,   303,   304,   305,    -1,   307,   308,
     309,   310,    -1,   312,   313,    -1,    -1,    -1,    -1,   318,
     319,   320,   321,   322,   323,    -1,    -1,   326,   327,    -1,
     329,    -1,   331,    -1,   333,   334,   335,   336,   337,   338,
     339,   340,   341,    -1,    -1,   344,   345,    -1,    -1,   348,
     349,   350,   351,    -1,    -1,    -1,   355,   356,    -1,    -1,
      -1,    -1,   361,   362,   363,    -1,   365,   366,   367,   368,
      -1,   370,   371,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   380,   381,   382,    -1,    -1,   385,    -1,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
      -1,    -1,   401,   402,   403,    -1,   405,    -1,   407,   408,
     409,   410,   411,    -1,   413,   414,   415,    -1,    -1,   418,
      -1,    -1,    -1,   422,   423,   424,   425,   426,    -1,    -1,
     429,   430,   431,   432,   433,    -1,   435,   436,    -1,   438,
     439,   440,    -1,    -1,   443,    -1,   445,    -1,   447,   448,
      -1,   450,   451,    -1,    -1,    -1,   455,   456,   457,   458,
     459,   460,   461,   462,   463,   464,    -1,   466,   467,    -1,
      -1,    -1,   471,   472,   473,   474,    -1,    -1,    -1,   478,
      -1,    -1,    -1,   482,    -1,   484,   485,   486,   487,   488,
      -1,   490,   491,   492,   493,   494,   495,    -1,    -1,    -1,
      -1,    -1,    -1,   502,   503,    -1,   505,    -1,    -1,   508,
      -1,    -1,   511,   512,   513,    -1,    -1,   516,   517,    -1,
     519,   520,   521,   522,   523,   524,    -1,    -1,   527,   528,
     529,   530,    -1,   532,   533,    -1,   535,    -1,   537,   538,
     539,   540,    -1,    -1,   543,   544,    -1,   546,   547,   548,
     549,    -1,    -1,    -1,    -1,    -1,   555,   556,   557,    -1,
      -1,    -1,   561,   562,   563,   564,    -1,   566,   567,    -1,
     569,   570,    -1,   572,   573,    -1,    -1,   576,    -1,    -1,
     579,    -1,   581,    -1,   583,   584,   585,    -1,    -1,    -1,
      -1,    -1,    -1,   592,    -1,    -1,   595,    -1,    -1,    -1,
     599,   600,   601,   602,   603,   604,    -1,    -1,    -1,    -1,
      -1,    -1,   611,   612,    -1,   614,   615,   616,    -1,    -1,
     619,    -1,    -1,    -1,    -1,     5,    -1,     7,     8,     9,
      10,    11,    -1,   632,    14,    -1,    -1,    -1,    18,   638,
     639,    21,    -1,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    -1,    -1,    -1,    36,    -1,    -1,    -1,
      40,    -1,    -1,    43,    44,    45,    -1,    47,    -1,    49,
      50,    -1,    -1,    53,    -1,    -1,    56,    57,    -1,    59,
      60,    -1,    62,    63,    -1,    65,    66,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    77,    78,    79,
      -1,    81,    82,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    -1,    93,    94,    95,    96,    97,    -1,    99,
      -1,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,   109,
      -1,    -1,    -1,   113,   114,   115,    -1,    -1,   118,    -1,
      -1,    -1,    -1,   123,   124,    -1,    -1,    -1,    -1,   129,
      -1,   131,    -1,    -1,    -1,   135,    -1,   137,   138,   139,
     140,    -1,    -1,    -1,   144,    -1,    -1,   147,   148,   149,
      -1,    -1,    -1,   153,    -1,   155,   156,    -1,   158,   159,
     160,    -1,    -1,   163,   164,    -1,   166,   167,   168,   169,
     170,   171,    -1,    -1,   174,   175,   176,    -1,    -1,   179,
     180,    -1,   182,   183,   184,    -1,    -1,   187,    -1,    -1,
      -1,   191,    -1,   193,    -1,   195,    -1,   197,   198,   199,
     200,   201,   202,    -1,   204,    -1,    -1,    -1,   208,   209,
     210,    -1,   212,    -1,    -1,   215,   216,    -1,    -1,    -1,
     220,   221,   222,   223,    -1,    -1,   226,   227,   228,    -1,
     230,    -1,   232,    -1,    -1,    -1,    -1,   237,   238,    -1,
      -1,    -1,   242,    -1,   244,   245,    -1,   247,   248,    -1,
      -1,    -1,   252,    -1,    -1,   255,   256,   257,    -1,    -1,
     260,    -1,    -1,   263,   264,    -1,    -1,    -1,    -1,    -1,
     270,   271,    -1,   273,    -1,   275,    -1,   277,   278,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,    -1,   303,   304,   305,    -1,   307,   308,   309,
     310,    -1,   312,   313,    -1,    -1,    -1,    -1,   318,   319,
     320,   321,   322,   323,    -1,    -1,   326,   327,    -1,   329,
      -1,   331,    -1,   333,   334,   335,   336,   337,   338,   339,
     340,   341,    -1,    -1,   344,   345,    -1,    -1,   348,   349,
     350,   351,    -1,    -1,    -1,   355,   356,    -1,    -1,    -1,
      -1,   361,   362,   363,    -1,   365,   366,   367,   368,    -1,
     370,   371,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     380,   381,   382,    -1,    -1,   385,    -1,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,    -1,
      -1,   401,   402,   403,    -1,   405,    -1,   407,   408,   409,
     410,   411,    -1,   413,   414,   415,    -1,    -1,   418,    -1,
      -1,    -1,   422,   423,   424,   425,   426,    -1,    -1,   429,
     430,   431,   432,   433,    -1,   435,   436,    -1,   438,   439,
     440,    -1,    -1,   443,    -1,   445,    -1,   447,   448,    -1,
     450,   451,    -1,    -1,    -1,   455,   456,   457,   458,   459,
     460,   461,   462,   463,   464,    -1,   466,   467,    -1,    -1,
      -1,   471,   472,   473,   474,    -1,    -1,    -1,   478,    -1,
      -1,    -1,   482,    -1,   484,   485,   486,   487,   488,    -1,
     490,   491,   492,   493,   494,   495,    -1,    -1,    -1,    -1,
      -1,    -1,   502,   503,    -1,   505,    -1,    -1,   508,    -1,
      -1,   511,   512,   513,    -1,    -1,   516,   517,    -1,   519,
     520,   521,   522,   523,   524,    -1,    -1,   527,   528,   529,
     530,    -1,   532,   533,    -1,   535,    -1,   537,   538,   539,
     540,    -1,    -1,   543,   544,    -1,   546,   547,   548,   549,
      -1,    -1,    -1,    -1,    -1,   555,   556,   557,    -1,    -1,
      -1,   561,   562,   563,   564,    -1,   566,   567,    -1,   569,
     570,    -1,   572,   573,    -1,    -1,   576,    -1,    -1,   579,
      -1,   581,    -1,   583,   584,   585,    -1,    -1,    -1,    -1,
      -1,    -1,   592,    -1,    -1,   595,    -1,    -1,    -1,   599,
     600,   601,   602,   603,   604,    -1,    -1,    -1,    -1,    -1,
      -1,   611,   612,    -1,   614,   615,   616,    -1,    -1,   619,
      -1,    -1,    -1,    -1,     5,    -1,     7,     8,     9,    10,
      11,   631,    -1,    14,    -1,    -1,    -1,    18,    -1,   639,
      21,    -1,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    32,    -1,    -1,    -1,    36,    -1,    -1,    -1,    40,
      -1,    -1,    43,    44,    45,    -1,    47,    -1,    49,    50,
      -1,    -1,    53,    -1,    -1,    56,    57,    -1,    59,    60,
      -1,    62,    63,    -1,    65,    66,    67,    68,    69,    70,
      71,    -1,    73,    74,    75,    76,    77,    78,    79,    -1,
      81,    82,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    -1,    93,    94,    95,    96,    97,    -1,    99,    -1,
      -1,   102,    -1,    -1,   105,    -1,    -1,    -1,   109,    -1,
      -1,    -1,   113,   114,   115,    -1,    -1,   118,    -1,    -1,
      -1,    -1,   123,   124,    -1,    -1,    -1,    -1,   129,    -1,
     131,    -1,    -1,    -1,   135,    -1,   137,   138,   139,   140,
      -1,    -1,    -1,   144,    -1,    -1,   147,   148,   149,    -1,
      -1,    -1,   153,    -1,   155,   156,    -1,   158,   159,   160,
      -1,    -1,   163,   164,    -1,   166,   167,   168,   169,   170,
     171,    -1,    -1,   174,   175,   176,    -1,    -1,   179,   180,
      -1,   182,   183,   184,    -1,    -1,   187,    -1,    -1,    -1,
     191,    -1,   193,    -1,   195,    -1,   197,   198,   199,   200,
     201,   202,    -1,   204,    -1,    -1,    -1,   208,   209,   210,
      -1,   212,    -1,    -1,   215,   216,    -1,    -1,    -1,   220,
     221,   222,   223,    -1,    -1,   226,   227,   228,    -1,   230,
      -1,   232,    -1,    -1,    -1,    -1,   237,   238,    -1,   240,
      -1,   242,    -1,   244,   245,    -1,   247,   248,    -1,    -1,
      -1,   252,    -1,    -1,   255,   256,   257,    -1,    -1,   260,
      -1,    -1,   263,   264,    -1,    -1,    -1,    -1,    -1,   270,
     271,    -1,   273,    -1,   275,    -1,   277,   278,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,    -1,   303,   304,   305,    -1,   307,   308,   309,   310,
      -1,   312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,
     321,   322,   323,    -1,    -1,   326,   327,    -1,   329,    -1,
     331,    -1,   333,   334,   335,   336,   337,   338,   339,   340,
     341,    -1,    -1,   344,   345,    -1,    -1,   348,   349,   350,
     351,    -1,    -1,    -1,   355,   356,    -1,    -1,    -1,    -1,
     361,   362,   363,    -1,   365,   366,   367,   368,    -1,   370,
     371,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   380,
     381,   382,    -1,    -1,   385,    -1,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,    -1,    -1,
     401,   402,   403,    -1,   405,    -1,   407,   408,   409,   410,
     411,    -1,   413,   414,   415,    -1,    -1,   418,    -1,    -1,
      -1,   422,   423,   424,   425,   426,    -1,    -1,   429,   430,
     431,   432,   433,    -1,   435,   436,    -1,   438,   439,   440,
      -1,    -1,   443,    -1,   445,    -1,   447,   448,    -1,   450,
     451,    -1,    -1,    -1,   455,   456,   457,   458,   459,   460,
     461,   462,   463,   464,    -1,   466,   467,    -1,    -1,    -1,
     471,   472,   473,   474,    -1,    -1,    -1,   478,    -1,    -1,
      -1,   482,    -1,   484,   485,   486,   487,   488,    -1,   490,
     491,   492,   493,   494,   495,    -1,    -1,    -1,    -1,    -1,
      -1,   502,   503,    -1,   505,    -1,    -1,   508,    -1,    -1,
     511,   512,   513,    -1,    -1,   516,   517,    -1,   519,   520,
     521,   522,   523,   524,    -1,    -1,   527,   528,   529,   530,
      -1,   532,   533,    -1,   535,    -1,   537,   538,   539,   540,
      -1,    -1,   543,   544,    -1,   546,   547,   548,   549,    -1,
      -1,    -1,    -1,    -1,   555,   556,   557,    -1,    -1,    -1,
     561,   562,   563,   564,    -1,   566,   567,    -1,   569,   570,
      -1,   572,   573,    -1,    -1,   576,    -1,    -1,   579,    -1,
     581,    -1,   583,   584,   585,    -1,    -1,    -1,    -1,    -1,
      -1,   592,    -1,    -1,   595,    -1,    -1,    -1,   599,   600,
     601,   602,   603,   604,    -1,    -1,    -1,    -1,    -1,    -1,
     611,   612,    -1,   614,   615,   616,    -1,    -1,   619,    -1,
      -1,     5,    -1,     7,     8,     9,    10,    11,    -1,    -1,
      14,    -1,    -1,    -1,    18,    -1,    -1,    21,   639,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    -1,
      -1,    -1,    36,    -1,    -1,    -1,    40,    -1,    -1,    43,
      44,    45,    -1,    47,    -1,    49,    50,    -1,    -1,    53,
      -1,    -1,    56,    57,    -1,    59,    60,    -1,    62,    63,
      -1,    65,    66,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    78,    79,    -1,    81,    82,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    -1,    93,
      94,    95,    96,    97,    -1,    99,    -1,    -1,   102,    -1,
      -1,   105,    -1,    -1,    -1,   109,    -1,    -1,    -1,   113,
     114,   115,    -1,    -1,   118,    -1,    -1,    -1,    -1,   123,
     124,    -1,    -1,    -1,    -1,   129,    -1,   131,    -1,    -1,
      -1,   135,    -1,   137,   138,   139,   140,    -1,    -1,    -1,
     144,    -1,    -1,   147,   148,   149,    -1,    -1,    -1,   153,
      -1,   155,   156,    -1,   158,   159,   160,    -1,    -1,   163,
     164,    -1,   166,   167,   168,   169,   170,   171,    -1,    -1,
     174,   175,   176,    -1,    -1,   179,   180,    -1,   182,   183,
     184,    -1,    -1,   187,    -1,    -1,    -1,   191,    -1,   193,
      -1,   195,    -1,   197,   198,   199,   200,   201,   202,    -1,
     204,    -1,    -1,    -1,   208,   209,   210,    -1,   212,    -1,
      -1,   215,   216,    -1,    -1,    -1,   220,   221,   222,   223,
      -1,    -1,   226,   227,   228,    -1,   230,    -1,   232,    -1,
      -1,    -1,    -1,   237,   238,    -1,    -1,    -1,   242,    -1,
     244,   245,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,
      -1,   255,   256,   257,    -1,    -1,   260,    -1,    -1,   263,
     264,    -1,    -1,    -1,    -1,    -1,   270,   271,    -1,   273,
      -1,   275,    -1,   277,   278,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,    -1,   303,
     304,   305,    -1,   307,   308,   309,   310,    -1,   312,   313,
      -1,    -1,    -1,    -1,   318,   319,   320,   321,   322,   323,
      -1,    -1,   326,   327,    -1,   329,    -1,   331,    -1,   333,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,    -1,
     344,   345,    -1,    -1,   348,   349,   350,   351,    -1,    -1,
      -1,   355,   356,    -1,    -1,    -1,    -1,   361,   362,   363,
      -1,   365,   366,   367,   368,    -1,   370,   371,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   380,   381,   382,    -1,
      -1,   385,    -1,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,    -1,    -1,   401,   402,   403,
      -1,   405,    -1,   407,   408,   409,   410,   411,    -1,   413,
     414,   415,    -1,    -1,   418,    -1,    -1,    -1,   422,   423,
     424,   425,   426,    -1,    -1,   429,   430,   431,   432,   433,
      -1,   435,   436,    -1,   438,   439,   440,    -1,    -1,   443,
      -1,   445,    -1,   447,   448,    -1,   450,   451,    -1,    -1,
      -1,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,    -1,   466,   467,    -1,    -1,    -1,   471,   472,   473,
     474,    -1,    -1,    -1,   478,    -1,    -1,    -1,   482,    -1,
     484,   485,   486,   487,   488,    -1,   490,   491,   492,   493,
     494,   495,    -1,    -1,    -1,    -1,    -1,    -1,   502,   503,
      -1,   505,    -1,    -1,   508,    -1,    -1,   511,   512,   513,
      -1,    -1,   516,   517,    -1,   519,   520,   521,   522,   523,
     524,    -1,    -1,   527,   528,   529,   530,    -1,   532,   533,
      -1,   535,    -1,   537,   538,   539,   540,    -1,    -1,   543,
     544,    -1,   546,   547,   548,   549,    -1,    -1,    -1,    -1,
      -1,   555,   556,   557,    -1,    -1,    -1,   561,   562,   563,
     564,    -1,   566,   567,    -1,   569,   570,    -1,   572,   573,
      -1,    -1,   576,    -1,    -1,   579,    -1,   581,    -1,   583,
     584,   585,    -1,    -1,    -1,    -1,    -1,    -1,   592,    -1,
      -1,   595,    -1,    -1,    -1,   599,   600,   601,   602,   603,
     604,    -1,    -1,    -1,    -1,    -1,    -1,   611,   612,    -1,
     614,   615,   616,    -1,    -1,   619,    -1,    -1,    -1,    -1,
      -1,     5,   626,     7,     8,     9,    10,    11,    -1,    -1,
      14,    -1,    -1,    -1,    18,   639,    -1,    21,    -1,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    -1,
      -1,    -1,    36,    -1,    -1,    -1,    40,    -1,    -1,    43,
      44,    45,    -1,    47,    -1,    49,    50,    -1,    -1,    53,
      -1,    -1,    56,    57,    -1,    59,    60,    -1,    62,    63,
      -1,    65,    66,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    78,    79,    -1,    81,    82,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    -1,    93,
      94,    95,    96,    97,    -1,    99,    -1,    -1,   102,    -1,
      -1,   105,    -1,    -1,    -1,   109,    -1,    -1,    -1,   113,
     114,   115,    -1,    -1,   118,    -1,    -1,    -1,    -1,   123,
     124,    -1,    -1,    -1,    -1,   129,    -1,   131,    -1,    -1,
      -1,   135,    -1,   137,   138,   139,   140,    -1,    -1,    -1,
     144,    -1,    -1,   147,   148,   149,    -1,    -1,    -1,   153,
      -1,   155,   156,    -1,   158,   159,   160,    -1,    -1,   163,
     164,    -1,   166,   167,   168,   169,   170,   171,    -1,    -1,
     174,   175,   176,    -1,    -1,   179,   180,    -1,   182,   183,
     184,    -1,    -1,   187,    -1,    -1,    -1,   191,    -1,   193,
      -1,   195,    -1,   197,   198,   199,   200,   201,   202,    -1,
     204,    -1,    -1,    -1,   208,   209,   210,    -1,   212,    -1,
      -1,   215,   216,    -1,    -1,    -1,   220,   221,   222,   223,
      -1,    -1,   226,   227,   228,    -1,   230,    -1,   232,    -1,
      -1,    -1,    -1,   237,   238,    -1,    -1,    -1,   242,    -1,
     244,   245,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,
      -1,   255,   256,   257,    -1,    -1,   260,    -1,    -1,   263,
     264,    -1,    -1,    -1,    -1,    -1,   270,   271,    -1,   273,
      -1,   275,    -1,   277,   278,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,    -1,   303,
     304,   305,    -1,   307,   308,   309,   310,    -1,   312,   313,
      -1,    -1,    -1,    -1,   318,   319,   320,   321,   322,   323,
      -1,    -1,   326,   327,    -1,   329,    -1,   331,    -1,   333,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,    -1,
     344,   345,    -1,    -1,   348,   349,   350,   351,    -1,    -1,
      -1,   355,   356,    -1,    -1,    -1,    -1,   361,   362,   363,
      -1,   365,   366,   367,   368,    -1,   370,   371,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   380,   381,   382,    -1,
      -1,   385,    -1,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,    -1,    -1,   401,   402,   403,
      -1,   405,    -1,   407,   408,   409,   410,   411,    -1,   413,
     414,   415,    -1,    -1,   418,    -1,    -1,    -1,   422,   423,
     424,   425,   426,    -1,    -1,   429,   430,   431,   432,   433,
      -1,   435,   436,    -1,   438,   439,   440,    -1,    -1,   443,
      -1,   445,    -1,   447,   448,    -1,   450,   451,    -1,    -1,
      -1,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,    -1,   466,   467,    -1,    -1,    -1,   471,   472,   473,
     474,    -1,    -1,    -1,   478,    -1,    -1,    -1,   482,    -1,
     484,   485,   486,   487,   488,    -1,   490,   491,   492,   493,
     494,   495,    -1,    -1,    -1,    -1,    -1,    -1,   502,   503,
      -1,   505,    -1,    -1,   508,    -1,    -1,   511,   512,   513,
      -1,    -1,   516,   517,    -1,   519,   520,   521,   522,   523,
     524,    -1,    -1,   527,   528,   529,   530,    -1,   532,   533,
      -1,   535,    -1,   537,   538,   539,   540,    -1,    -1,   543,
     544,    -1,   546,   547,   548,   549,    -1,    -1,    -1,    -1,
      -1,   555,   556,   557,    -1,    -1,    -1,   561,   562,   563,
     564,    -1,   566,   567,    -1,   569,   570,    -1,   572,   573,
      -1,    -1,   576,    -1,    -1,   579,    -1,   581,    -1,   583,
     584,   585,    -1,    -1,    -1,    -1,    -1,    -1,   592,    -1,
      -1,   595,    -1,    -1,    -1,   599,   600,   601,   602,   603,
     604,    -1,    -1,    -1,    -1,    -1,    -1,   611,   612,    -1,
     614,   615,   616,    -1,    -1,   619,    -1,    -1,    -1,    -1,
       5,    -1,     7,     8,     9,    10,    11,   631,    -1,    14,
      -1,    -1,    -1,    18,    -1,   639,    21,    -1,    23,    24,
      25,    26,    27,    28,    29,    30,    -1,    32,    -1,    -1,
      -1,    36,    -1,    -1,    -1,    40,    -1,    -1,    43,    44,
      45,    -1,    47,    -1,    49,    50,    -1,    -1,    53,    -1,
      -1,    56,    57,    -1,    59,    60,    -1,    62,    63,    -1,
      65,    66,    67,    68,    69,    70,    71,    -1,    73,    74,
      75,    76,    77,    78,    79,    -1,    81,    82,    83,    84,
      85,    86,    87,    88,    -1,    90,    91,    -1,    93,    94,
      95,    96,    97,    -1,    99,    -1,    -1,   102,    -1,    -1,
     105,    -1,    -1,    -1,   109,    -1,    -1,    -1,   113,   114,
     115,    -1,    -1,   118,    -1,    -1,    -1,    -1,   123,   124,
      -1,    -1,    -1,    -1,   129,    -1,   131,    -1,    -1,    -1,
     135,    -1,   137,   138,   139,   140,    -1,    -1,    -1,   144,
      -1,    -1,   147,   148,   149,    -1,    -1,    -1,   153,    -1,
     155,   156,    -1,   158,   159,   160,    -1,    -1,   163,   164,
      -1,   166,   167,   168,   169,   170,   171,    -1,    -1,   174,
     175,   176,    -1,    -1,   179,   180,    -1,   182,   183,   184,
      -1,    -1,   187,    -1,    -1,    -1,   191,    -1,   193,    -1,
     195,    -1,   197,   198,   199,   200,   201,   202,    -1,   204,
      -1,    -1,    -1,   208,   209,   210,    -1,   212,    -1,    -1,
     215,   216,    -1,    -1,    -1,   220,   221,   222,   223,    -1,
      -1,   226,   227,   228,    -1,   230,    -1,   232,    -1,    -1,
      -1,    -1,   237,   238,    -1,    -1,    -1,   242,    -1,   244,
     245,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,    -1,
     255,   256,   257,    -1,    -1,   260,    -1,    -1,   263,   264,
      -1,    -1,    -1,    -1,    -1,   270,   271,    -1,   273,    -1,
     275,    -1,   277,   278,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,    -1,   303,   304,
     305,    -1,   307,   308,   309,   310,    -1,   312,   313,    -1,
      -1,    -1,    -1,   318,   319,   320,   321,   322,   323,    -1,
      -1,   326,   327,    -1,   329,    -1,   331,    -1,   333,   334,
     335,   336,   337,   338,   339,   340,   341,    -1,    -1,   344,
     345,    -1,    -1,   348,   349,   350,   351,    -1,    -1,    -1,
     355,   356,    -1,    -1,    -1,    -1,   361,   362,   363,    -1,
     365,   366,   367,   368,    -1,   370,   371,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   380,   381,   382,    -1,    -1,
     385,    -1,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,    -1,    -1,   401,   402,   403,    -1,
     405,    -1,   407,   408,   409,   410,   411,    -1,   413,   414,
     415,    -1,    -1,   418,    -1,    -1,    -1,   422,   423,   424,
     425,   426,    -1,    -1,   429,   430,   431,   432,   433,    -1,
     435,   436,    -1,   438,   439,   440,    -1,    -1,   443,    -1,
     445,    -1,   447,   448,    -1,   450,   451,    -1,    -1,    -1,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
      -1,   466,   467,    -1,    -1,    -1,   471,   472,   473,   474,
      -1,    -1,    -1,   478,    -1,    -1,    -1,   482,    -1,   484,
     485,   486,   487,   488,    -1,   490,   491,   492,   493,   494,
     495,    -1,    -1,    -1,    -1,    -1,    -1,   502,   503,    -1,
     505,    -1,    -1,   508,    -1,    -1,   511,   512,   513,    -1,
      -1,   516,   517,    -1,   519,   520,   521,   522,   523,   524,
      -1,    -1,   527,   528,   529,   530,    -1,   532,   533,    -1,
     535,    -1,   537,   538,   539,   540,    -1,    -1,   543,   544,
      -1,   546,   547,   548,   549,    -1,    -1,    -1,    -1,    -1,
     555,   556,   557,    -1,    -1,    -1,   561,   562,   563,   564,
      -1,   566,   567,    -1,   569,   570,    -1,   572,   573,    -1,
      -1,   576,    -1,    -1,   579,    -1,   581,    -1,   583,   584,
     585,    -1,    -1,    -1,    -1,    -1,    -1,   592,    -1,    -1,
     595,    -1,    -1,    -1,   599,   600,   601,   602,   603,   604,
      -1,    -1,    -1,    -1,    -1,    -1,   611,   612,    -1,   614,
     615,   616,    -1,    -1,   619,    -1,    -1,    -1,    -1,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,   638,   639,    21,    -1,    23,    24,    25,
      26,    27,    28,    29,    30,    -1,    32,    -1,    -1,    -1,
      36,    -1,    -1,    -1,    40,    -1,    -1,    43,    44,    45,
      -1,    47,    -1,    49,    50,    -1,    -1,    53,    -1,    -1,
      56,    57,    -1,    59,    60,    -1,    62,    63,    -1,    65,
      66,    67,    68,    69,    70,    71,    -1,    73,    74,    75,
      76,    77,    78,    79,    -1,    81,    82,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    -1,    93,    94,    95,
      96,    97,    -1,    99,    -1,    -1,   102,    -1,    -1,   105,
      -1,    -1,    -1,   109,    -1,    -1,    -1,   113,   114,   115,
      -1,    -1,   118,    -1,    -1,    -1,    -1,   123,   124,    -1,
      -1,    -1,    -1,   129,    -1,   131,    -1,    -1,    -1,   135,
      -1,   137,   138,   139,   140,    -1,    -1,    -1,   144,    -1,
      -1,   147,   148,   149,    -1,    -1,    -1,   153,    -1,   155,
     156,    -1,   158,   159,   160,    -1,    -1,   163,   164,    -1,
     166,   167,   168,   169,   170,   171,    -1,    -1,   174,   175,
     176,    -1,    -1,   179,   180,    -1,   182,   183,   184,    -1,
      -1,   187,    -1,    -1,    -1,   191,    -1,   193,    -1,   195,
      -1,   197,   198,   199,   200,   201,   202,    -1,   204,    -1,
      -1,    -1,   208,   209,   210,    -1,   212,    -1,    -1,   215,
     216,    -1,    -1,    -1,   220,   221,   222,   223,    -1,    -1,
     226,   227,   228,    -1,   230,    -1,   232,    -1,    -1,    -1,
      -1,   237,   238,    -1,    -1,    -1,   242,    -1,   244,   245,
      -1,   247,   248,    -1,    -1,    -1,   252,    -1,    -1,   255,
     256,   257,    -1,    -1,   260,    -1,    -1,   263,   264,    -1,
      -1,    -1,    -1,    -1,   270,   271,    -1,   273,    -1,   275,
      -1,   277,   278,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,    -1,   303,   304,   305,
      -1,   307,   308,   309,   310,    -1,   312,   313,    -1,    -1,
      -1,    -1,   318,   319,   320,   321,   322,   323,    -1,    -1,
     326,   327,    -1,   329,    -1,   331,    -1,   333,   334,   335,
     336,   337,   338,   339,   340,   341,    -1,    -1,   344,   345,
      -1,    -1,   348,   349,   350,   351,    -1,    -1,    -1,   355,
     356,    -1,    -1,    -1,    -1,   361,   362,   363,    -1,   365,
     366,   367,   368,    -1,   370,   371,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   380,   381,   382,    -1,    -1,   385,
      -1,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,    -1,    -1,   401,   402,   403,    -1,   405,
      -1,   407,   408,   409,   410,   411,    -1,   413,   414,   415,
      -1,    -1,   418,    -1,    -1,    -1,   422,   423,   424,   425,
     426,    -1,    -1,   429,   430,   431,   432,   433,    -1,   435,
     436,    -1,   438,   439,   440,    -1,    -1,   443,    -1,   445,
      -1,   447,   448,    -1,   450,   451,    -1,    -1,    -1,   455,
     456,   457,   458,   459,   460,   461,   462,   463,   464,    -1,
     466,   467,    -1,    -1,    -1,   471,   472,   473,   474,    -1,
      -1,    -1,   478,    -1,    -1,    -1,   482,    -1,   484,   485,
     486,   487,   488,    -1,   490,   491,   492,   493,   494,   495,
      -1,    -1,    -1,    -1,    -1,    -1,   502,   503,    -1,   505,
      -1,    -1,   508,    -1,    -1,   511,   512,   513,    -1,    -1,
     516,   517,    -1,   519,   520,   521,   522,   523,   524,    -1,
      -1,   527,   528,   529,   530,    -1,   532,   533,    -1,   535,
      -1,   537,   538,   539,   540,    -1,    -1,   543,   544,    -1,
     546,   547,   548,   549,    -1,    -1,    -1,    -1,    -1,   555,
     556,   557,    -1,    -1,    -1,   561,   562,   563,   564,    -1,
     566,   567,    -1,   569,   570,    -1,   572,   573,    -1,    -1,
     576,    -1,    -1,   579,    -1,   581,    -1,   583,   584,   585,
      -1,    -1,    -1,    -1,    -1,    -1,   592,    -1,    -1,   595,
      -1,    -1,    -1,   599,   600,   601,   602,   603,   604,    -1,
      -1,    -1,    -1,    -1,    -1,   611,   612,    -1,   614,   615,
     616,    -1,    -1,   619,    -1,    -1,     5,    -1,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      -1,    -1,    21,   639,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    32,    -1,    -1,    -1,    36,    -1,    -1,
      -1,    40,    -1,    -1,    43,    44,    45,    -1,    47,    -1,
      49,    50,    -1,    -1,    53,    -1,    -1,    56,    57,    -1,
      59,    60,    -1,    62,    63,    -1,    65,    66,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    78,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    -1,    93,    94,    95,    96,    97,    -1,
      99,    -1,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,
     109,    -1,    -1,    -1,   113,   114,   115,    -1,    -1,   118,
      -1,    -1,    -1,    -1,   123,   124,    -1,    -1,    -1,    -1,
     129,    -1,   131,    -1,    -1,    -1,   135,    -1,   137,   138,
     139,   140,    -1,    -1,    -1,   144,    -1,    -1,   147,   148,
     149,    -1,    -1,    -1,   153,    -1,   155,   156,    -1,   158,
     159,   160,    -1,    -1,   163,   164,    -1,   166,   167,   168,
     169,   170,   171,    -1,    -1,   174,   175,   176,    -1,    -1,
     179,   180,    -1,   182,   183,   184,    -1,    -1,   187,    -1,
      -1,    -1,   191,    -1,   193,    -1,   195,    -1,   197,   198,
     199,   200,   201,   202,    -1,   204,    -1,    -1,    -1,   208,
     209,   210,    -1,   212,    -1,    -1,   215,   216,    -1,    -1,
      -1,   220,   221,   222,   223,    -1,    -1,   226,   227,   228,
      -1,   230,    -1,   232,    -1,    -1,    -1,    -1,   237,   238,
      -1,    -1,    -1,   242,    -1,   244,   245,    -1,   247,   248,
      -1,    -1,    -1,   252,    -1,    -1,   255,   256,   257,    -1,
      -1,   260,    -1,    -1,   263,   264,    -1,    -1,    -1,    -1,
      -1,   270,   271,    -1,   273,    -1,   275,    -1,   277,   278,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,    -1,   303,   304,   305,    -1,   307,   308,
     309,   310,    -1,   312,   313,    -1,    -1,    -1,    -1,   318,
     319,   320,   321,   322,   323,    -1,    -1,   326,   327,    -1,
     329,    -1,   331,    -1,   333,   334,   335,   336,   337,   338,
     339,   340,   341,    -1,    -1,   344,   345,    -1,    -1,   348,
     349,   350,   351,    -1,    -1,    -1,   355,   356,    -1,    -1,
      -1,    -1,   361,   362,   363,    -1,   365,   366,   367,   368,
      -1,   370,   371,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   380,   381,   382,    -1,    -1,   385,    -1,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
      -1,    -1,   401,   402,   403,    -1,   405,    -1,   407,   408,
     409,   410,   411,    -1,   413,   414,   415,    -1,    -1,   418,
      -1,    -1,    -1,   422,   423,   424,   425,   426,    -1,    -1,
     429,   430,   431,   432,   433,    -1,   435,   436,    -1,   438,
     439,   440,    -1,    -1,   443,    -1,   445,    -1,   447,   448,
      -1,   450,   451,    -1,    -1,    -1,   455,   456,   457,   458,
     459,   460,   461,   462,   463,   464,    -1,   466,   467,    -1,
      -1,    -1,   471,   472,   473,   474,    -1,    -1,    -1,   478,
      -1,    -1,    -1,   482,    -1,   484,   485,   486,   487,   488,
      -1,   490,   491,   492,   493,   494,   495,    -1,    -1,    -1,
      -1,    -1,    -1,   502,   503,    -1,   505,    -1,    -1,   508,
      -1,    -1,   511,   512,   513,    -1,    -1,   516,   517,    -1,
     519,   520,   521,   522,   523,   524,    -1,    -1,   527,   528,
     529,   530,    -1,   532,   533,    -1,   535,    -1,   537,   538,
     539,   540,    -1,    -1,   543,   544,    -1,   546,   547,   548,
     549,    -1,    -1,    -1,    -1,    -1,   555,   556,   557,    -1,
      -1,    -1,   561,   562,   563,   564,    -1,   566,   567,    -1,
     569,   570,    -1,   572,   573,    -1,    -1,   576,    -1,    -1,
     579,    -1,   581,    -1,   583,   584,   585,    -1,    -1,    -1,
      -1,    -1,    -1,   592,    -1,    -1,   595,    -1,    -1,    -1,
     599,   600,   601,   602,   603,   604,    -1,    -1,    -1,    -1,
      -1,    -1,   611,   612,    -1,   614,   615,   616,    -1,    -1,
     619,    -1,    -1,     5,    -1,     7,     8,     9,    10,    11,
      -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,
     639,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      32,    -1,    -1,    -1,    36,    -1,    -1,    -1,    40,    -1,
      -1,    43,    44,    45,    -1,    47,    -1,    49,    50,    -1,
      -1,    53,    -1,    -1,    56,    57,    -1,    59,    60,    -1,
      62,    63,    -1,    65,    66,    67,    68,    69,    70,    71,
      -1,    73,    74,    75,    76,    77,    78,    79,    -1,    81,
      82,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      -1,    93,    94,    95,    96,    97,    -1,    99,    -1,    -1,
     102,    -1,    -1,   105,    -1,    -1,    -1,   109,    -1,    -1,
      -1,   113,   114,   115,    -1,    -1,   118,    -1,    -1,    -1,
      -1,   123,   124,    -1,    -1,    -1,    -1,   129,    -1,   131,
      -1,    -1,    -1,   135,    -1,   137,   138,   139,   140,    -1,
      -1,    -1,   144,    -1,    -1,   147,   148,   149,    -1,    -1,
      -1,   153,    -1,   155,   156,    -1,   158,   159,   160,    -1,
      -1,   163,   164,    -1,   166,   167,   168,   169,   170,   171,
      -1,    -1,   174,   175,   176,    -1,    -1,   179,   180,    -1,
     182,   183,   184,    -1,    -1,   187,    -1,    -1,    -1,   191,
      -1,   193,    -1,   195,    -1,   197,   198,   199,   200,   201,
     202,    -1,   204,    -1,    -1,    -1,   208,   209,   210,    -1,
     212,    -1,    -1,   215,   216,    -1,    -1,    -1,   220,   221,
     222,   223,    -1,    -1,   226,   227,   228,    -1,   230,    -1,
     232,    -1,    -1,    -1,    -1,   237,   238,    -1,    -1,    -1,
     242,    -1,   244,   245,    -1,   247,   248,    -1,    -1,    -1,
     252,    -1,    -1,   255,   256,   257,    -1,    -1,   260,    -1,
      -1,   263,   264,    -1,    -1,    -1,    -1,    -1,   270,   271,
      -1,   273,    -1,   275,    -1,   277,   278,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
      -1,   303,   304,   305,    -1,   307,   308,   309,   310,    -1,
     312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,   321,
     322,   323,    -1,    -1,   326,   327,    -1,   329,    -1,   331,
      -1,   333,   334,   335,   336,   337,   338,   339,   340,   341,
      -1,    -1,   344,   345,    -1,    -1,   348,   349,   350,   351,
      -1,    -1,    -1,   355,   356,    -1,    -1,    -1,    -1,   361,
     362,   363,    -1,   365,   366,   367,   368,    -1,   370,   371,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   380,   381,
     382,    -1,    -1,   385,    -1,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,    -1,    -1,   401,
     402,   403,    -1,   405,    -1,   407,   408,   409,   410,   411,
      -1,   413,   414,   415,    -1,    -1,   418,    -1,    -1,    -1,
     422,   423,   424,   425,   426,    -1,    -1,   429,   430,   431,
     432,   433,    -1,   435,   436,    -1,   438,   439,   440,    -1,
      -1,   443,    -1,   445,    -1,   447,   448,    -1,   450,   451,
      -1,    -1,    -1,   455,   456,   457,   458,   459,   460,   461,
     462,   463,   464,    -1,   466,   467,    -1,    -1,    -1,   471,
     472,   473,   474,    -1,    -1,    -1,   478,    -1,    -1,    -1,
     482,    -1,   484,   485,   486,   487,   488,    -1,   490,   491,
     492,   493,   494,   495,    -1,    -1,    -1,    -1,    -1,    -1,
     502,   503,    -1,   505,    -1,    -1,   508,    -1,    -1,   511,
     512,   513,    -1,    -1,   516,   517,    -1,   519,   520,   521,
     522,   523,   524,    -1,    -1,   527,   528,   529,   530,    -1,
     532,   533,    -1,   535,    -1,   537,   538,   539,   540,    -1,
      -1,   543,   544,    -1,   546,   547,   548,   549,    -1,    -1,
      -1,    -1,    -1,   555,   556,   557,    -1,    -1,    -1,   561,
     562,   563,   564,    -1,   566,   567,    -1,   569,   570,    -1,
     572,   573,    -1,    -1,   576,    -1,    -1,   579,    -1,   581,
      -1,   583,   584,   585,    -1,    -1,    -1,    -1,    -1,    -1,
     592,    -1,    -1,   595,    -1,    -1,    -1,   599,   600,   601,
     602,   603,   604,    -1,    -1,    -1,    -1,    -1,    -1,   611,
     612,    -1,   614,   615,   616,    -1,    -1,   619,    -1,    -1,
       5,    -1,     7,     8,     9,    10,    11,    -1,    -1,    14,
      -1,    -1,    -1,    18,    -1,    -1,    21,   639,    23,    24,
      25,    26,    27,    28,    29,    30,    -1,    32,    -1,    -1,
      -1,    36,    -1,    -1,    -1,    40,    -1,    -1,    43,    44,
      45,    -1,    47,    -1,    49,    50,    -1,    -1,    53,    -1,
      -1,    56,    57,    -1,    59,    60,    -1,    62,    63,    -1,
      65,    66,    67,    68,    69,    70,    71,    -1,    73,    74,
      75,    76,    77,    78,    79,    -1,    81,    82,    83,    84,
      85,    86,    87,    88,    -1,    90,    91,    -1,    93,    94,
      95,    96,    97,    -1,    99,    -1,    -1,   102,    -1,    -1,
     105,    -1,    -1,    -1,   109,    -1,    -1,    -1,   113,   114,
     115,    -1,    -1,   118,    -1,    -1,    -1,    -1,   123,   124,
      -1,    -1,    -1,    -1,   129,    -1,   131,    -1,    -1,    -1,
     135,    -1,   137,   138,   139,   140,    -1,    -1,    -1,   144,
      -1,    -1,   147,   148,   149,    -1,    -1,    -1,   153,    -1,
     155,   156,    -1,   158,   159,   160,    -1,    -1,   163,   164,
      -1,   166,   167,   168,   169,   170,   171,    -1,    -1,   174,
     175,   176,    -1,    -1,   179,   180,    -1,   182,   183,   184,
      -1,    -1,   187,    -1,    -1,    -1,   191,    -1,   193,    -1,
     195,    -1,   197,   198,   199,   200,   201,   202,    -1,   204,
      -1,    -1,    -1,   208,   209,   210,    -1,   212,    -1,    -1,
     215,   216,    -1,    -1,    -1,   220,   221,   222,   223,    -1,
      -1,   226,   227,   228,    -1,   230,    -1,   232,    -1,    -1,
      -1,    -1,   237,   238,    -1,    -1,    -1,   242,    -1,   244,
     245,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,    -1,
     255,   256,   257,    -1,    -1,   260,    -1,    -1,   263,   264,
      -1,    -1,    -1,    -1,    -1,   270,   271,    -1,   273,    -1,
     275,    -1,   277,   278,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,    -1,   303,   304,
     305,    -1,   307,   308,   309,   310,    -1,   312,   313,    -1,
      -1,    -1,    -1,   318,   319,   320,   321,   322,   323,    -1,
      -1,   326,   327,    -1,   329,    -1,   331,    -1,   333,   334,
     335,   336,   337,   338,   339,   340,   341,    -1,    -1,   344,
     345,    -1,    -1,   348,   349,   350,   351,    -1,    -1,    -1,
     355,   356,    -1,    -1,    -1,    -1,   361,   362,   363,    -1,
     365,   366,   367,   368,    -1,   370,   371,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   380,   381,   382,    -1,    -1,
     385,    -1,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,    -1,    -1,   401,   402,   403,    -1,
     405,    -1,   407,   408,   409,   410,   411,    -1,   413,   414,
     415,    -1,    -1,   418,    -1,    -1,    -1,   422,   423,   424,
     425,   426,    -1,    -1,   429,   430,   431,   432,   433,    -1,
     435,   436,    -1,   438,   439,   440,    -1,    -1,   443,    -1,
     445,    -1,   447,   448,    -1,   450,   451,    -1,    -1,    -1,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
      -1,   466,   467,    -1,    -1,    -1,   471,   472,   473,   474,
      -1,    -1,    -1,   478,    -1,    -1,    -1,   482,    -1,   484,
     485,   486,   487,   488,    -1,   490,   491,   492,   493,   494,
     495,    -1,    -1,    -1,    -1,    -1,    -1,   502,   503,    -1,
     505,    -1,    -1,   508,    -1,    -1,   511,   512,   513,    -1,
      -1,   516,   517,    -1,   519,   520,   521,   522,   523,   524,
      -1,    -1,   527,   528,   529,   530,    -1,   532,   533,    -1,
     535,    -1,   537,   538,   539,   540,    -1,    -1,   543,   544,
      -1,   546,   547,   548,   549,    -1,    -1,    -1,    -1,    -1,
     555,   556,   557,    -1,    -1,    -1,   561,   562,   563,   564,
      -1,   566,   567,    -1,   569,   570,    -1,   572,   573,    -1,
      -1,   576,    -1,    -1,   579,    -1,   581,    -1,   583,   584,
     585,    -1,    -1,    -1,    -1,    -1,    -1,   592,    -1,    -1,
     595,    -1,    -1,    -1,   599,   600,   601,   602,   603,   604,
      -1,    -1,    -1,    -1,    -1,    -1,   611,   612,    -1,   614,
     615,   616,    -1,    -1,   619,    -1,    -1,     5,    -1,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,    -1,    -1,    21,   639,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    32,    -1,    -1,    -1,    36,    -1,
      -1,    -1,    40,    -1,    -1,    43,    44,    45,    -1,    47,
      -1,    49,    50,    -1,    -1,    53,    -1,    -1,    56,    57,
      -1,    59,    60,    61,    62,    63,    -1,    65,    66,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      78,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    -1,    90,    91,    -1,    93,    94,    95,    96,    97,
      -1,    99,    -1,    -1,   102,    -1,    -1,   105,    -1,    -1,
      -1,   109,    -1,    -1,    -1,   113,   114,   115,    -1,    -1,
     118,    -1,    -1,    -1,    -1,   123,   124,    -1,    -1,    -1,
     128,   129,    -1,   131,    -1,    -1,    -1,   135,    -1,   137,
     138,   139,   140,    -1,    -1,    -1,   144,    -1,    -1,   147,
     148,   149,    -1,    -1,    -1,   153,    -1,   155,   156,    -1,
     158,   159,   160,    -1,    -1,   163,   164,    -1,   166,   167,
     168,   169,   170,   171,    -1,    -1,   174,   175,   176,    -1,
      -1,   179,   180,    -1,   182,   183,   184,    -1,    -1,   187,
      -1,    -1,    -1,   191,    -1,   193,    -1,   195,    -1,   197,
     198,   199,   200,   201,   202,    -1,   204,    -1,    -1,    -1,
     208,   209,   210,    -1,   212,    -1,    -1,   215,   216,    -1,
      -1,    -1,   220,   221,   222,   223,    -1,    -1,   226,   227,
     228,    -1,   230,    -1,   232,    -1,    -1,    -1,    -1,   237,
     238,    -1,    -1,    -1,   242,    -1,   244,   245,    -1,   247,
     248,    -1,    -1,    -1,   252,    -1,    -1,   255,   256,   257,
      -1,    -1,   260,    -1,    -1,   263,   264,    -1,    -1,    -1,
      -1,    -1,   270,   271,    -1,   273,    -1,   275,    -1,   277,
     278,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,    -1,   303,   304,   305,    -1,   307,
     308,   309,   310,    -1,   312,   313,    -1,    -1,    -1,    -1,
     318,   319,   320,   321,   322,   323,    -1,    -1,   326,   327,
      -1,   329,    -1,   331,    -1,   333,   334,   335,   336,   337,
     338,   339,   340,   341,    -1,    -1,   344,   345,    -1,    -1,
     348,   349,   350,   351,    -1,    -1,    -1,   355,   356,    -1,
      -1,    -1,    -1,   361,   362,   363,    -1,   365,   366,   367,
     368,    -1,   370,   371,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   380,   381,   382,    -1,    -1,   385,    -1,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,    -1,    -1,   401,   402,   403,    -1,   405,    -1,   407,
     408,   409,   410,   411,    -1,   413,   414,   415,    -1,    -1,
     418,    -1,    -1,    -1,   422,   423,   424,   425,   426,    -1,
      -1,   429,   430,   431,   432,   433,    -1,   435,   436,    -1,
     438,   439,   440,    -1,    -1,   443,    -1,   445,    -1,   447,
     448,    -1,   450,   451,    -1,    -1,    -1,   455,   456,   457,
     458,   459,   460,   461,   462,   463,   464,    -1,   466,   467,
      -1,    -1,    -1,   471,   472,   473,   474,    -1,    -1,    -1,
     478,    -1,    -1,    -1,   482,    -1,   484,   485,   486,   487,
     488,    -1,   490,   491,   492,   493,   494,   495,    -1,    -1,
      -1,    -1,    -1,    -1,   502,   503,    -1,   505,    -1,    -1,
     508,    -1,    -1,   511,   512,   513,    -1,    -1,   516,   517,
      -1,   519,   520,   521,   522,   523,   524,    -1,    -1,   527,
     528,   529,   530,    -1,   532,   533,    -1,   535,    -1,   537,
     538,   539,   540,    -1,    -1,   543,   544,    -1,   546,   547,
     548,   549,    -1,    -1,    -1,    -1,    -1,   555,   556,   557,
      -1,    -1,    -1,   561,   562,   563,   564,    -1,   566,   567,
      -1,   569,   570,    -1,   572,   573,    -1,    -1,   576,    -1,
      -1,   579,    -1,   581,    -1,   583,   584,   585,    -1,    -1,
      -1,    -1,    -1,    -1,   592,    -1,    -1,   595,    -1,    -1,
      -1,   599,   600,   601,   602,   603,   604,    -1,    -1,    -1,
      -1,    -1,    -1,   611,   612,    -1,   614,   615,   616,    -1,
      -1,   619,    -1,     5,    -1,     7,     8,     9,    10,    11,
      -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,
     638,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      32,    -1,    -1,    -1,    36,    -1,    -1,    -1,    40,    -1,
      -1,    43,    44,    45,    -1,    47,    -1,    49,    50,    -1,
      -1,    53,    -1,    -1,    56,    57,    -1,    59,    60,    -1,
      62,    63,    -1,    65,    66,    67,    68,    69,    70,    71,
      -1,    73,    74,    75,    76,    77,    78,    79,    -1,    81,
      82,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      -1,    93,    94,    95,    96,    97,    -1,    99,    -1,    -1,
     102,    -1,    -1,   105,    -1,    -1,    -1,   109,    -1,    -1,
      -1,   113,   114,   115,    -1,    -1,   118,    -1,    -1,    -1,
      -1,   123,   124,    -1,    -1,    -1,    -1,   129,    -1,   131,
      -1,    -1,    -1,   135,    -1,   137,   138,   139,   140,    -1,
      -1,    -1,   144,    -1,    -1,   147,   148,   149,    -1,    -1,
      -1,   153,    -1,   155,   156,    -1,   158,   159,   160,    -1,
      -1,   163,   164,    -1,   166,   167,   168,   169,   170,   171,
      -1,    -1,   174,   175,   176,    -1,    -1,   179,   180,    -1,
     182,   183,   184,    -1,    -1,   187,    -1,    -1,    -1,   191,
      -1,   193,    -1,   195,    -1,   197,   198,   199,   200,   201,
     202,    -1,   204,    -1,    -1,    -1,   208,   209,   210,    -1,
     212,    -1,    -1,   215,   216,    -1,    -1,    -1,   220,   221,
     222,   223,    -1,    -1,   226,   227,   228,    -1,   230,    -1,
     232,    -1,    -1,    -1,    -1,   237,   238,    -1,    -1,    -1,
     242,    -1,   244,   245,    -1,   247,   248,    -1,    -1,    -1,
     252,    -1,    -1,   255,   256,   257,    -1,    -1,   260,    -1,
      -1,   263,   264,   265,    -1,    -1,    -1,    -1,   270,   271,
      -1,   273,    -1,   275,    -1,   277,   278,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
      -1,   303,   304,   305,    -1,   307,   308,   309,   310,    -1,
     312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,   321,
     322,   323,    -1,    -1,   326,   327,    -1,   329,    -1,   331,
      -1,   333,   334,   335,   336,   337,   338,   339,   340,   341,
      -1,    -1,   344,   345,    -1,    -1,   348,   349,   350,   351,
      -1,    -1,    -1,   355,   356,    -1,    -1,    -1,    -1,   361,
     362,   363,    -1,   365,   366,   367,   368,    -1,   370,   371,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   380,   381,
     382,    -1,    -1,   385,    -1,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,    -1,    -1,   401,
     402,   403,    -1,   405,    -1,   407,   408,   409,   410,   411,
      -1,   413,   414,   415,    -1,    -1,   418,    -1,    -1,    -1,
     422,   423,   424,   425,   426,    -1,    -1,   429,   430,   431,
     432,   433,    -1,   435,   436,    -1,   438,   439,   440,    -1,
      -1,   443,    -1,   445,    -1,   447,   448,    -1,   450,   451,
      -1,    -1,    -1,   455,   456,   457,   458,   459,   460,   461,
     462,   463,   464,    -1,   466,   467,    -1,    -1,    -1,   471,
     472,   473,   474,    -1,    -1,    -1,   478,    -1,    -1,    -1,
     482,    -1,   484,   485,   486,   487,   488,    -1,   490,   491,
     492,   493,   494,   495,    -1,    -1,    -1,    -1,    -1,    -1,
     502,   503,    -1,   505,    -1,    -1,   508,    -1,    -1,   511,
     512,   513,    -1,    -1,   516,   517,    -1,   519,   520,   521,
     522,   523,   524,    -1,    -1,   527,   528,   529,   530,    -1,
     532,   533,    -1,   535,    -1,   537,   538,   539,   540,    -1,
     542,   543,   544,    -1,   546,   547,   548,   549,    -1,    -1,
      -1,    -1,    -1,   555,   556,   557,    -1,    -1,    -1,   561,
     562,   563,   564,    -1,   566,   567,    -1,   569,   570,    -1,
     572,   573,    -1,    -1,   576,    -1,    -1,   579,    -1,   581,
      -1,   583,   584,   585,    -1,    -1,    -1,    -1,    -1,    -1,
     592,    -1,    -1,   595,    -1,    -1,    -1,   599,   600,   601,
     602,   603,   604,    -1,    -1,    -1,    -1,    -1,    -1,   611,
     612,    -1,   614,   615,   616,    -1,    -1,   619,    -1,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    21,   638,    23,    24,    25,
      26,    27,    28,    29,    30,    -1,    32,    -1,    -1,    -1,
      36,    -1,    -1,    -1,    40,    -1,    -1,    43,    44,    45,
      -1,    47,    -1,    49,    50,    -1,    -1,    53,    -1,    -1,
      56,    57,    -1,    59,    60,    -1,    62,    63,    -1,    65,
      66,    67,    68,    69,    70,    71,    -1,    73,    74,    75,
      76,    77,    78,    79,    -1,    81,    82,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    -1,    93,    94,    95,
      96,    97,    -1,    99,    -1,    -1,   102,    -1,    -1,   105,
      -1,    -1,    -1,   109,    -1,    -1,    -1,   113,   114,   115,
      -1,    -1,   118,    -1,    -1,    -1,    -1,   123,   124,    -1,
      -1,    -1,    -1,   129,    -1,   131,    -1,    -1,    -1,   135,
      -1,   137,   138,   139,   140,    -1,    -1,    -1,   144,    -1,
      -1,   147,   148,   149,    -1,    -1,    -1,   153,    -1,   155,
     156,    -1,   158,   159,   160,    -1,    -1,   163,   164,    -1,
     166,   167,   168,   169,   170,   171,    -1,    -1,   174,   175,
     176,    -1,    -1,   179,   180,    -1,   182,   183,   184,    -1,
      -1,   187,    -1,    -1,    -1,   191,    -1,   193,    -1,   195,
      -1,   197,   198,   199,   200,   201,   202,    -1,   204,    -1,
      -1,    -1,   208,   209,   210,    -1,   212,    -1,    -1,   215,
     216,    -1,    -1,    -1,   220,   221,   222,   223,    -1,    -1,
     226,   227,   228,    -1,   230,    -1,   232,    -1,    -1,    -1,
      -1,   237,   238,    -1,    -1,    -1,   242,    -1,   244,   245,
      -1,   247,   248,    -1,    -1,    -1,   252,    -1,    -1,   255,
     256,   257,    -1,    -1,   260,    -1,    -1,   263,   264,   265,
      -1,    -1,    -1,    -1,   270,   271,    -1,   273,    -1,   275,
      -1,   277,   278,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,    -1,   303,   304,   305,
      -1,   307,   308,   309,   310,    -1,   312,   313,    -1,    -1,
      -1,    -1,   318,   319,   320,   321,   322,   323,    -1,    -1,
     326,   327,    -1,   329,    -1,   331,    -1,   333,   334,   335,
     336,   337,   338,   339,   340,   341,    -1,    -1,   344,   345,
      -1,    -1,   348,   349,   350,   351,    -1,    -1,    -1,   355,
     356,    -1,    -1,    -1,    -1,   361,   362,   363,    -1,   365,
     366,   367,   368,    -1,   370,   371,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   380,   381,   382,    -1,    -1,   385,
      -1,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,    -1,    -1,   401,   402,   403,    -1,   405,
      -1,   407,   408,   409,   410,   411,    -1,   413,   414,   415,
      -1,    -1,   418,    -1,    -1,    -1,   422,   423,   424,   425,
     426,    -1,    -1,   429,   430,   431,   432,   433,    -1,   435,
     436,    -1,   438,   439,   440,    -1,    -1,   443,    -1,   445,
      -1,   447,   448,    -1,   450,   451,    -1,    -1,    -1,   455,
     456,   457,   458,   459,   460,   461,   462,   463,   464,    -1,
     466,   467,    -1,    -1,    -1,   471,   472,   473,   474,    -1,
      -1,    -1,   478,    -1,    -1,    -1,   482,    -1,   484,   485,
     486,   487,   488,    -1,   490,   491,   492,   493,   494,   495,
      -1,    -1,    -1,    -1,    -1,    -1,   502,   503,    -1,   505,
      -1,    -1,   508,    -1,    -1,   511,   512,   513,    -1,    -1,
     516,   517,    -1,   519,   520,   521,   522,   523,   524,    -1,
      -1,   527,   528,   529,   530,    -1,   532,   533,    -1,   535,
      -1,   537,   538,   539,   540,    -1,   542,   543,   544,    -1,
     546,   547,   548,   549,    -1,    -1,    -1,    -1,    -1,   555,
     556,   557,    -1,    -1,    -1,   561,   562,   563,   564,    -1,
     566,   567,    -1,   569,   570,    -1,   572,   573,    -1,    -1,
     576,    -1,    -1,   579,    -1,   581,    -1,   583,   584,   585,
      -1,    -1,    -1,    -1,    -1,    -1,   592,    -1,    -1,   595,
      -1,    -1,    -1,   599,   600,   601,   602,   603,   604,    -1,
      -1,    -1,    -1,    -1,    -1,   611,   612,    -1,   614,   615,
     616,    -1,    -1,   619,    -1,     5,    -1,     7,     8,     9,
      10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,
      -1,    21,   638,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    -1,    -1,    -1,    36,    -1,    -1,    -1,
      40,    -1,    -1,    43,    44,    45,    -1,    47,    -1,    49,
      50,    -1,    -1,    53,    -1,    -1,    56,    57,    -1,    59,
      60,    61,    62,    63,    -1,    65,    66,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    77,    78,    79,
      -1,    81,    82,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    -1,    93,    94,    95,    96,    97,    -1,    99,
      -1,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,   109,
      -1,    -1,    -1,   113,   114,   115,    -1,    -1,   118,    -1,
      -1,    -1,    -1,   123,   124,    -1,    -1,    -1,   128,   129,
      -1,   131,    -1,    -1,    -1,   135,    -1,   137,   138,   139,
     140,    -1,    -1,    -1,   144,    -1,    -1,   147,   148,   149,
      -1,    -1,    -1,   153,    -1,   155,   156,    -1,   158,   159,
     160,    -1,    -1,   163,   164,    -1,   166,   167,   168,   169,
     170,   171,    -1,    -1,   174,   175,   176,    -1,    -1,   179,
     180,    -1,   182,   183,   184,    -1,    -1,   187,    -1,    -1,
      -1,   191,    -1,   193,    -1,   195,    -1,   197,   198,   199,
     200,   201,   202,    -1,   204,    -1,    -1,    -1,   208,   209,
     210,    -1,   212,    -1,    -1,   215,   216,    -1,    -1,    -1,
     220,   221,   222,   223,    -1,    -1,   226,   227,   228,    -1,
     230,    -1,   232,    -1,    -1,    -1,    -1,   237,   238,    -1,
      -1,    -1,   242,    -1,   244,   245,    -1,   247,   248,    -1,
      -1,    -1,   252,    -1,    -1,   255,   256,   257,    -1,    -1,
     260,    -1,    -1,   263,   264,    -1,    -1,    -1,    -1,    -1,
     270,   271,    -1,   273,    -1,   275,    -1,   277,   278,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,    -1,   303,   304,   305,    -1,   307,   308,   309,
     310,    -1,   312,   313,    -1,    -1,    -1,    -1,   318,   319,
     320,   321,   322,   323,    -1,    -1,   326,   327,    -1,   329,
      -1,   331,    -1,   333,   334,   335,   336,   337,   338,   339,
     340,   341,    -1,    -1,   344,   345,    -1,    -1,   348,   349,
     350,   351,    -1,    -1,    -1,   355,   356,    -1,    -1,    -1,
      -1,   361,   362,   363,    -1,   365,   366,   367,   368,    -1,
     370,   371,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     380,   381,   382,    -1,    -1,   385,    -1,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,    -1,
      -1,   401,   402,   403,    -1,   405,    -1,   407,   408,   409,
     410,   411,    -1,   413,   414,   415,    -1,    -1,   418,    -1,
      -1,    -1,   422,   423,   424,   425,   426,    -1,    -1,   429,
     430,   431,   432,   433,    -1,   435,   436,    -1,   438,   439,
     440,    -1,    -1,   443,    -1,   445,    -1,   447,   448,    -1,
     450,   451,    -1,    -1,    -1,   455,   456,   457,   458,   459,
     460,   461,   462,   463,   464,    -1,   466,   467,    -1,    -1,
      -1,   471,   472,   473,   474,    -1,    -1,    -1,   478,    -1,
      -1,    -1,   482,    -1,   484,   485,   486,   487,   488,    -1,
     490,   491,   492,   493,   494,   495,    -1,    -1,    -1,    -1,
      -1,    -1,   502,   503,    -1,   505,    -1,    -1,   508,    -1,
      -1,   511,   512,   513,    -1,    -1,   516,   517,    -1,   519,
     520,   521,   522,   523,   524,    -1,    -1,   527,   528,   529,
     530,    -1,   532,   533,    -1,   535,    -1,   537,   538,   539,
     540,    -1,    -1,   543,   544,    -1,   546,   547,   548,   549,
      -1,    -1,    -1,    -1,    -1,   555,   556,   557,    -1,    -1,
      -1,   561,   562,   563,   564,    -1,   566,   567,    -1,   569,
     570,    -1,   572,   573,    -1,    -1,   576,    -1,    -1,   579,
      -1,   581,    -1,   583,   584,   585,    -1,    -1,    -1,    -1,
      -1,    -1,   592,    -1,    -1,   595,    -1,    -1,    -1,   599,
     600,   601,   602,   603,   604,    -1,    -1,    -1,    -1,    -1,
      -1,   611,   612,    -1,   614,   615,   616,    -1,    -1,   619,
      -1,     5,    -1,     7,     8,     9,    10,    11,    -1,    -1,
      14,    -1,    -1,    -1,    18,    -1,    -1,    21,   638,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    -1,
      -1,    -1,    36,    -1,    -1,    -1,    40,    -1,    -1,    43,
      44,    45,    -1,    47,    -1,    49,    50,    -1,    -1,    53,
      -1,    -1,    56,    57,    -1,    59,    60,    -1,    62,    63,
      -1,    65,    66,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    78,    79,    -1,    81,    82,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    -1,    93,
      94,    95,    96,    97,    -1,    99,    -1,    -1,   102,    -1,
      -1,   105,    -1,    -1,    -1,   109,    -1,    -1,    -1,   113,
     114,   115,    -1,    -1,   118,    -1,    -1,    -1,    -1,   123,
     124,    -1,    -1,    -1,    -1,   129,    -1,   131,    -1,    -1,
      -1,   135,    -1,   137,   138,   139,   140,    -1,    -1,    -1,
     144,    -1,    -1,   147,   148,   149,    -1,    -1,    -1,   153,
      -1,   155,   156,    -1,   158,   159,   160,    -1,    -1,   163,
     164,    -1,   166,   167,   168,   169,   170,   171,    -1,    -1,
     174,   175,   176,    -1,    -1,   179,   180,    -1,   182,   183,
     184,    -1,    -1,   187,    -1,    -1,    -1,   191,    -1,   193,
      -1,   195,    -1,   197,   198,   199,   200,   201,   202,    -1,
     204,    -1,    -1,    -1,   208,   209,   210,    -1,   212,    -1,
      -1,   215,   216,    -1,    -1,    -1,   220,   221,   222,   223,
      -1,    -1,   226,   227,   228,    -1,   230,    -1,   232,    -1,
      -1,    -1,    -1,   237,   238,    -1,    -1,    -1,   242,    -1,
     244,   245,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,
      -1,   255,   256,   257,    -1,    -1,   260,    -1,    -1,   263,
     264,   265,    -1,    -1,    -1,    -1,   270,   271,    -1,   273,
      -1,   275,    -1,   277,   278,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,    -1,   303,
     304,   305,    -1,   307,   308,   309,   310,    -1,   312,   313,
      -1,    -1,    -1,    -1,   318,   319,   320,   321,   322,   323,
      -1,    -1,   326,   327,    -1,   329,    -1,   331,    -1,   333,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,    -1,
     344,   345,    -1,    -1,   348,   349,   350,   351,    -1,    -1,
      -1,   355,   356,    -1,    -1,    -1,    -1,   361,   362,   363,
      -1,   365,   366,   367,   368,    -1,   370,   371,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   380,   381,   382,    -1,
      -1,   385,    -1,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,    -1,    -1,   401,   402,   403,
      -1,   405,    -1,   407,   408,   409,   410,   411,    -1,   413,
     414,   415,    -1,    -1,   418,    -1,    -1,    -1,   422,   423,
     424,   425,   426,    -1,    -1,   429,   430,   431,   432,   433,
      -1,   435,   436,    -1,   438,   439,   440,    -1,    -1,   443,
      -1,   445,    -1,   447,   448,    -1,   450,   451,    -1,    -1,
      -1,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,    -1,   466,   467,    -1,    -1,    -1,   471,   472,   473,
     474,    -1,    -1,    -1,   478,    -1,    -1,    -1,   482,    -1,
     484,   485,   486,   487,   488,    -1,   490,   491,   492,   493,
     494,   495,    -1,    -1,    -1,    -1,    -1,    -1,   502,   503,
      -1,   505,    -1,    -1,   508,    -1,    -1,   511,   512,   513,
      -1,    -1,   516,   517,    -1,   519,   520,   521,   522,   523,
     524,    -1,    -1,   527,   528,   529,   530,    -1,   532,   533,
      -1,   535,    -1,   537,   538,   539,   540,    -1,   542,   543,
     544,    -1,   546,   547,   548,   549,    -1,    -1,    -1,    -1,
      -1,   555,   556,   557,    -1,    -1,    -1,   561,   562,   563,
     564,    -1,   566,   567,    -1,   569,   570,    -1,   572,   573,
      -1,    -1,   576,    -1,    -1,   579,    -1,   581,    -1,   583,
     584,   585,    -1,    -1,    -1,    -1,    -1,    -1,   592,    -1,
      -1,   595,    -1,    -1,    -1,   599,   600,   601,   602,   603,
     604,    -1,    -1,    -1,    -1,    -1,    -1,   611,   612,    -1,
     614,   615,   616,    -1,    -1,   619,    -1,     5,    -1,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,    -1,    -1,    -1,   638,    23,    24,    25,    26,    27,
      28,    29,    -1,    -1,    32,    -1,    -1,    -1,    36,    -1,
      -1,    -1,    40,    -1,    -1,    43,    44,    45,    -1,    47,
      -1,    -1,    -1,    -1,    -1,    53,    54,    -1,    56,    57,
      -1,    59,    -1,    -1,    -1,    -1,    -1,    65,    66,    67,
      68,    69,    70,    71,    -1,    73,    74,    -1,    -1,    -1,
      -1,    -1,    -1,    81,    -1,    83,    -1,    85,    86,    87,
      88,    -1,    90,    91,    -1,    93,    94,    95,    -1,    97,
      -1,    99,    -1,    -1,   102,    -1,    -1,   105,    -1,    -1,
      -1,   109,    -1,    -1,    -1,   113,   114,   115,    -1,    -1,
     118,    -1,    -1,    -1,    -1,   123,    -1,    -1,    -1,    -1,
      -1,   129,    -1,   131,    -1,    -1,    -1,   135,    -1,   137,
     138,   139,   140,    -1,    -1,    -1,    -1,    -1,    -1,   147,
     148,   149,    -1,    -1,    -1,   153,    -1,    -1,   156,    -1,
     158,   159,   160,    -1,    -1,   163,   164,    -1,   166,   167,
     168,   169,    -1,    -1,    -1,    -1,   174,   175,   176,    -1,
      -1,   179,   180,   181,   182,   183,   184,    -1,    -1,    -1,
      -1,    -1,    -1,   191,    -1,   193,    -1,   195,    -1,   197,
     198,   199,   200,   201,   202,    -1,   204,    -1,    -1,    -1,
      -1,   209,   210,    -1,    -1,    -1,    -1,    -1,   216,    -1,
      -1,    -1,   220,   221,   222,   223,   224,    -1,   226,   227,
     228,    -1,   230,    -1,   232,    -1,    -1,    -1,    -1,   237,
      -1,    -1,    -1,    -1,   242,    -1,   244,   245,    -1,   247,
     248,   249,    -1,    -1,   252,    -1,    -1,    -1,   256,   257,
      -1,    -1,   260,   261,    -1,   263,   264,    -1,    -1,    -1,
      -1,    -1,   270,   271,    -1,   273,    -1,   275,    -1,   277,
     278,    -1,    -1,    -1,    -1,   283,    -1,    -1,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,    -1,   303,   304,   305,    -1,   307,
     308,   309,   310,    -1,   312,   313,    -1,    -1,    -1,    -1,
     318,   319,   320,   321,   322,   323,    -1,    -1,   326,   327,
      -1,   329,    -1,   331,    -1,   333,   334,   335,   336,   337,
     338,   339,   340,   341,    -1,    -1,   344,   345,    -1,    -1,
     348,   349,   350,   351,    -1,    -1,    -1,    -1,   356,    -1,
      -1,    -1,    -1,   361,   362,   363,    -1,   365,   366,   367,
     368,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   381,   382,    -1,    -1,    -1,    -1,   387,
     388,   389,    -1,   391,   392,   393,   394,   395,   396,   397,
      -1,    -1,    -1,    -1,   402,   403,    -1,   405,    -1,   407,
     408,   409,   410,   411,    -1,   413,   414,   415,    -1,    -1,
     418,    -1,    -1,    -1,   422,   423,   424,   425,   426,    -1,
      -1,   429,   430,   431,   432,   433,    -1,   435,    -1,    -1,
     438,    -1,   440,   441,    -1,   443,    -1,    -1,    -1,   447,
      -1,    -1,   450,   451,   452,    -1,    -1,    -1,   456,   457,
     458,   459,   460,   461,    -1,   463,   464,    -1,   466,    -1,
      -1,    -1,    -1,   471,   472,   473,    -1,    -1,    -1,    -1,
     478,    -1,    -1,    -1,   482,    -1,    -1,   485,    -1,    -1,
     488,    -1,   490,    -1,   492,    -1,   494,   495,    -1,    -1,
      -1,    -1,    -1,    -1,   502,   503,    -1,   505,    -1,    -1,
     508,    -1,    -1,   511,    -1,   513,    -1,    -1,    -1,   517,
      -1,   519,   520,   521,   522,   523,   524,    -1,    -1,   527,
     528,   529,   530,    -1,   532,   533,    -1,   535,    -1,   537,
     538,   539,   540,    -1,    -1,   543,   544,    -1,   546,   547,
     548,   549,    -1,    -1,    -1,    -1,    -1,   555,   556,   557,
      -1,    -1,    -1,    -1,   562,   563,   564,    -1,   566,   567,
      -1,   569,   570,    -1,    -1,    -1,    -1,    -1,   576,    -1,
      -1,   579,    -1,    -1,    -1,   583,   584,   585,    -1,    -1,
      -1,    -1,    -1,    -1,   592,    -1,    -1,   595,    -1,    -1,
      -1,   599,   600,   601,   602,   603,   604,    -1,    -1,   607,
      -1,    -1,    -1,   611,    -1,    -1,   614,    -1,   616,    -1,
       5,   619,     7,     8,     9,    10,    11,    -1,    -1,    14,
      -1,    -1,    -1,    18,    -1,   633,    21,    -1,    23,    24,
      25,    26,    27,    28,    29,    30,    -1,    32,    -1,    -1,
      -1,    36,    -1,    -1,    -1,    40,    -1,    -1,    43,    44,
      45,    -1,    47,    -1,    49,    50,    -1,    -1,    53,    -1,
      -1,    56,    57,    -1,    59,    60,    -1,    62,    63,    -1,
      65,    66,    67,    68,    69,    70,    71,    -1,    73,    74,
      75,    76,    77,    78,    79,    -1,    81,    82,    83,    84,
      85,    86,    87,    88,    -1,    90,    91,    -1,    93,    94,
      95,    96,    97,    -1,    99,    -1,    -1,   102,    -1,    -1,
     105,    -1,   107,    -1,   109,    -1,    -1,    -1,   113,   114,
     115,    -1,    -1,   118,    -1,    -1,    -1,    -1,   123,   124,
      -1,    -1,    -1,    -1,   129,    -1,   131,    -1,    -1,    -1,
     135,    -1,   137,   138,   139,   140,    -1,    -1,    -1,   144,
      -1,    -1,   147,   148,   149,    -1,    -1,    -1,   153,    -1,
     155,   156,    -1,   158,   159,   160,    -1,    -1,   163,   164,
      -1,   166,   167,   168,   169,   170,   171,    -1,    -1,   174,
     175,   176,    -1,    -1,   179,   180,    -1,   182,   183,   184,
      -1,    -1,   187,    -1,    -1,    -1,   191,    -1,   193,    -1,
     195,    -1,   197,   198,   199,   200,   201,   202,    -1,   204,
      -1,    -1,    -1,   208,   209,   210,    -1,   212,    -1,    -1,
     215,   216,    -1,    -1,    -1,   220,   221,   222,   223,    -1,
      -1,   226,   227,   228,    -1,   230,    -1,   232,    -1,    -1,
      -1,    -1,   237,   238,    -1,    -1,    -1,   242,    -1,   244,
     245,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,    -1,
     255,   256,   257,    -1,    -1,   260,    -1,    -1,   263,   264,
     265,    -1,    -1,    -1,    -1,   270,   271,    -1,   273,    -1,
     275,    -1,   277,   278,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,    -1,   303,   304,
     305,    -1,   307,   308,   309,   310,    -1,   312,   313,    -1,
      -1,    -1,    -1,   318,   319,   320,   321,   322,   323,    -1,
      -1,   326,   327,    -1,   329,    -1,   331,    -1,   333,   334,
     335,   336,   337,   338,   339,   340,   341,    -1,    -1,   344,
     345,    -1,    -1,   348,   349,   350,   351,    -1,    -1,    -1,
     355,   356,    -1,    -1,    -1,    -1,   361,   362,   363,    -1,
     365,   366,   367,   368,    -1,   370,   371,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   380,   381,   382,    -1,    -1,
     385,    -1,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,    -1,    -1,   401,   402,   403,    -1,
     405,    -1,   407,   408,   409,   410,   411,    -1,   413,   414,
     415,    -1,    -1,   418,    -1,    -1,    -1,   422,   423,   424,
     425,   426,    -1,    -1,   429,   430,   431,   432,   433,    -1,
     435,   436,    -1,   438,   439,   440,    -1,    -1,   443,    -1,
     445,    -1,   447,   448,    -1,   450,   451,    -1,    -1,    -1,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
      -1,   466,   467,    -1,    -1,    -1,   471,   472,   473,   474,
      -1,    -1,    -1,   478,    -1,    -1,    -1,   482,    -1,   484,
     485,   486,   487,   488,    -1,   490,   491,   492,   493,   494,
     495,    -1,    -1,    -1,    -1,    -1,    -1,   502,   503,    -1,
     505,    -1,    -1,   508,    -1,    -1,   511,   512,   513,    -1,
      -1,   516,   517,    -1,   519,   520,   521,   522,   523,   524,
      -1,    -1,   527,   528,   529,   530,    -1,   532,   533,    -1,
     535,    -1,   537,   538,   539,   540,    -1,   542,   543,   544,
      -1,   546,   547,   548,   549,    -1,    -1,    -1,    -1,    -1,
     555,   556,   557,    -1,    -1,    -1,   561,   562,   563,   564,
      -1,   566,   567,    -1,   569,   570,    -1,   572,   573,    -1,
      -1,   576,    -1,    -1,   579,    -1,   581,    -1,   583,   584,
     585,    -1,    -1,    -1,    -1,    -1,    -1,   592,    -1,    -1,
     595,    -1,    -1,    -1,   599,   600,   601,   602,   603,   604,
      -1,    -1,    -1,    -1,    -1,    -1,   611,   612,    -1,   614,
     615,   616,    -1,    -1,   619,     5,    -1,     7,     8,     9,
      10,    11,    -1,    -1,    14,    -1,   631,    -1,    18,    -1,
      -1,    21,    -1,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    -1,    -1,    -1,    36,    -1,    -1,    -1,
      40,    -1,    -1,    43,    44,    45,    -1,    47,    -1,    49,
      50,    -1,    -1,    53,    -1,    -1,    56,    57,    -1,    59,
      60,    -1,    62,    63,    -1,    65,    66,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    77,    78,    79,
      -1,    81,    82,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    -1,    93,    94,    95,    96,    97,    -1,    99,
      -1,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,   109,
      -1,    -1,    -1,   113,   114,   115,    -1,    -1,   118,    -1,
      -1,    -1,    -1,   123,   124,    -1,    -1,    -1,    -1,   129,
      -1,   131,    -1,    -1,    -1,   135,    -1,   137,   138,   139,
     140,    -1,    -1,    -1,   144,    -1,    -1,   147,   148,   149,
      -1,    -1,    -1,   153,    -1,   155,   156,    -1,   158,   159,
     160,    -1,    -1,   163,   164,    -1,   166,   167,   168,   169,
     170,   171,    -1,    -1,   174,   175,   176,    -1,    -1,   179,
     180,    -1,   182,   183,   184,    -1,    -1,   187,    -1,    -1,
      -1,   191,    -1,   193,    -1,   195,    -1,   197,   198,   199,
     200,   201,   202,    -1,   204,    -1,    -1,    -1,   208,   209,
     210,    -1,   212,    -1,    -1,   215,   216,    -1,    -1,    -1,
     220,   221,   222,   223,    -1,    -1,   226,   227,   228,    -1,
     230,    -1,   232,    -1,    -1,    -1,    -1,   237,   238,    -1,
      -1,    -1,   242,    -1,   244,   245,    -1,   247,   248,    -1,
      -1,    -1,   252,    -1,    -1,   255,   256,   257,    -1,    -1,
     260,    -1,    -1,   263,   264,    -1,    -1,    -1,    -1,    -1,
     270,   271,    -1,   273,    -1,   275,    -1,   277,   278,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,    -1,   303,   304,   305,    -1,   307,   308,   309,
     310,    -1,   312,   313,    -1,    -1,    -1,    -1,   318,   319,
     320,   321,   322,   323,    -1,    -1,   326,   327,    -1,   329,
      -1,   331,    -1,   333,   334,   335,   336,   337,   338,   339,
     340,   341,    -1,    -1,   344,   345,    -1,    -1,   348,   349,
     350,   351,    -1,    -1,    -1,   355,   356,    -1,    -1,    -1,
      -1,   361,   362,   363,    -1,   365,   366,   367,   368,    -1,
     370,   371,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     380,   381,   382,    -1,    -1,   385,    -1,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,    -1,
      -1,   401,   402,   403,    -1,   405,    -1,   407,   408,   409,
     410,   411,    -1,   413,   414,   415,    -1,    -1,   418,    -1,
      -1,    -1,   422,   423,   424,   425,   426,    -1,    -1,   429,
     430,   431,   432,   433,    -1,   435,   436,    -1,   438,   439,
     440,    -1,    -1,   443,    -1,   445,    -1,   447,   448,    -1,
     450,   451,    -1,    -1,    -1,   455,   456,   457,   458,   459,
     460,   461,   462,   463,   464,    -1,   466,   467,    -1,    -1,
      -1,   471,   472,   473,   474,    -1,    -1,    -1,   478,    -1,
      -1,    -1,   482,    -1,   484,   485,   486,   487,   488,    -1,
     490,   491,   492,   493,   494,   495,    -1,    -1,    -1,    -1,
      -1,    -1,   502,   503,    -1,   505,    -1,    -1,   508,    -1,
      -1,   511,   512,   513,    -1,    -1,   516,   517,    -1,   519,
     520,   521,   522,   523,   524,    -1,    -1,   527,   528,   529,
     530,    -1,   532,   533,    -1,   535,    -1,   537,   538,   539,
     540,    -1,    -1,   543,   544,    -1,   546,   547,   548,   549,
      -1,    -1,    -1,    -1,    -1,   555,   556,   557,    -1,    -1,
      -1,   561,   562,   563,   564,    -1,   566,   567,    -1,   569,
     570,    -1,   572,   573,    -1,    -1,   576,    -1,    -1,   579,
      -1,   581,    -1,   583,   584,   585,    -1,    -1,    -1,    -1,
      -1,    -1,   592,    -1,    -1,   595,    -1,    -1,    -1,   599,
     600,   601,   602,   603,   604,    -1,    -1,    -1,    -1,    -1,
      -1,   611,   612,    -1,   614,   615,   616,    -1,     5,   619,
       7,     8,     9,    10,    11,    -1,   626,    14,    -1,    -1,
      -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    32,    -1,    -1,    -1,    36,
      -1,    -1,    -1,    40,    -1,    -1,    43,    44,    45,    -1,
      47,    -1,    49,    50,    -1,    -1,    53,    -1,    -1,    56,
      57,    -1,    59,    60,    -1,    62,    63,    -1,    65,    66,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      77,    78,    79,    -1,    81,    82,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    -1,    93,    94,    95,    96,
      97,    -1,    99,    -1,    -1,   102,    -1,    -1,   105,    -1,
      -1,    -1,   109,    -1,    -1,    -1,   113,   114,   115,    -1,
      -1,   118,    -1,    -1,    -1,    -1,   123,   124,    -1,    -1,
      -1,    -1,   129,    -1,   131,    -1,    -1,    -1,   135,    -1,
     137,   138,   139,   140,    -1,    -1,    -1,   144,    -1,    -1,
     147,   148,   149,    -1,    -1,    -1,   153,    -1,   155,   156,
      -1,   158,   159,   160,    -1,    -1,   163,   164,    -1,   166,
     167,   168,   169,   170,   171,    -1,    -1,   174,   175,   176,
      -1,    -1,   179,   180,    -1,   182,   183,   184,    -1,    -1,
     187,    -1,    -1,    -1,   191,    -1,   193,    -1,   195,    -1,
     197,   198,   199,   200,   201,   202,    -1,   204,    -1,    -1,
      -1,   208,   209,   210,    -1,   212,    -1,    -1,   215,   216,
      -1,    -1,    -1,   220,   221,   222,   223,    -1,    -1,   226,
     227,   228,    -1,   230,    -1,   232,    -1,    -1,    -1,    -1,
     237,   238,    -1,    -1,    -1,   242,    -1,   244,   245,    -1,
     247,   248,    -1,    -1,    -1,   252,    -1,    -1,   255,   256,
     257,    -1,    -1,   260,    -1,    -1,   263,   264,    -1,    -1,
      -1,    -1,    -1,   270,   271,    -1,   273,    -1,   275,    -1,
     277,   278,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,    -1,   303,   304,   305,    -1,
     307,   308,   309,   310,    -1,   312,   313,    -1,    -1,    -1,
      -1,   318,   319,   320,   321,   322,   323,    -1,    -1,   326,
     327,    -1,   329,    -1,   331,    -1,   333,   334,   335,   336,
     337,   338,   339,   340,   341,    -1,    -1,   344,   345,    -1,
      -1,   348,   349,   350,   351,    -1,    -1,    -1,   355,   356,
      -1,    -1,    -1,    -1,   361,   362,   363,    -1,   365,   366,
     367,   368,    -1,   370,   371,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   380,   381,   382,    -1,    -1,   385,    -1,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,    -1,    -1,   401,   402,   403,    -1,   405,    -1,
     407,   408,   409,   410,   411,    -1,   413,   414,   415,    -1,
      -1,   418,    -1,    -1,    -1,   422,   423,   424,   425,   426,
      -1,    -1,   429,   430,   431,   432,   433,    -1,   435,   436,
      -1,   438,   439,   440,    -1,    -1,   443,    -1,   445,    -1,
     447,   448,    -1,   450,   451,    -1,    -1,    -1,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,    -1,   466,
     467,    -1,    -1,    -1,   471,   472,   473,   474,    -1,    -1,
      -1,   478,    -1,    -1,    -1,   482,    -1,   484,   485,   486,
     487,   488,    -1,   490,   491,   492,   493,   494,   495,    -1,
      -1,    -1,    -1,    -1,    -1,   502,   503,    -1,   505,    -1,
      -1,   508,    -1,    -1,   511,   512,   513,    -1,    -1,   516,
     517,    -1,   519,   520,   521,   522,   523,   524,    -1,    -1,
     527,   528,   529,   530,    -1,   532,   533,    -1,   535,    -1,
     537,   538,   539,   540,    -1,    -1,   543,   544,    -1,   546,
     547,   548,   549,    -1,    -1,    -1,    -1,    -1,   555,   556,
     557,    -1,    -1,    -1,   561,   562,   563,   564,    -1,   566,
     567,    -1,   569,   570,    -1,   572,   573,    -1,    -1,   576,
      -1,    -1,   579,    -1,   581,    -1,   583,   584,   585,    -1,
      -1,    -1,    -1,    -1,    -1,   592,    -1,    -1,   595,    -1,
      -1,    -1,   599,   600,   601,   602,   603,   604,    -1,    -1,
      -1,    -1,    -1,    -1,   611,   612,    -1,   614,   615,   616,
      -1,     5,   619,     7,     8,     9,    10,    11,    -1,   626,
      14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    -1,
      -1,    -1,    36,    -1,    -1,    -1,    40,    -1,    -1,    43,
      44,    45,    -1,    47,    -1,    49,    50,    -1,    -1,    53,
      -1,    -1,    56,    57,    -1,    59,    60,    -1,    62,    63,
      -1,    65,    66,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    78,    79,    -1,    81,    82,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    -1,    93,
      94,    95,    96,    97,    -1,    99,    -1,    -1,   102,    -1,
      -1,   105,    -1,    -1,    -1,   109,    -1,    -1,    -1,   113,
     114,   115,    -1,    -1,   118,    -1,    -1,    -1,    -1,   123,
     124,    -1,    -1,    -1,    -1,   129,    -1,   131,    -1,    -1,
      -1,   135,    -1,   137,   138,   139,   140,    -1,    -1,    -1,
     144,    -1,    -1,   147,   148,   149,    -1,    -1,    -1,   153,
      -1,   155,   156,    -1,   158,   159,   160,    -1,    -1,   163,
     164,    -1,   166,   167,   168,   169,   170,   171,    -1,    -1,
     174,   175,   176,    -1,    -1,   179,   180,    -1,   182,   183,
     184,    -1,    -1,   187,    -1,    -1,    -1,   191,    -1,   193,
      -1,   195,    -1,   197,   198,   199,   200,   201,   202,    -1,
     204,    -1,    -1,    -1,   208,   209,   210,    -1,   212,    -1,
      -1,   215,   216,    -1,    -1,    -1,   220,   221,   222,   223,
      -1,    -1,   226,   227,   228,    -1,   230,    -1,   232,    -1,
      -1,    -1,    -1,   237,   238,    -1,    -1,    -1,   242,    -1,
     244,   245,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,
      -1,   255,   256,   257,    -1,    -1,   260,    -1,    -1,   263,
     264,    -1,    -1,    -1,    -1,    -1,   270,   271,    -1,   273,
      -1,   275,    -1,   277,   278,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,    -1,   303,
     304,   305,    -1,   307,   308,   309,   310,    -1,   312,   313,
      -1,    -1,    -1,    -1,   318,   319,   320,   321,   322,   323,
      -1,    -1,   326,   327,    -1,   329,    -1,   331,    -1,   333,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,    -1,
     344,   345,    -1,    -1,   348,   349,   350,   351,    -1,    -1,
      -1,   355,   356,    -1,    -1,    -1,    -1,   361,   362,   363,
      -1,   365,   366,   367,   368,    -1,   370,   371,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   380,   381,   382,    -1,
      -1,   385,    -1,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,    -1,    -1,   401,   402,   403,
      -1,   405,    -1,   407,   408,   409,   410,   411,    -1,   413,
     414,   415,    -1,    -1,   418,    -1,    -1,    -1,   422,   423,
     424,   425,   426,    -1,    -1,   429,   430,   431,   432,   433,
      -1,   435,   436,    -1,   438,   439,   440,    -1,    -1,   443,
      -1,   445,    -1,   447,   448,    -1,   450,   451,    -1,    -1,
      -1,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,    -1,   466,   467,    -1,    -1,    -1,   471,   472,   473,
     474,    -1,    -1,    -1,   478,    -1,    -1,    -1,   482,    -1,
     484,   485,   486,   487,   488,    -1,   490,   491,   492,   493,
     494,   495,    -1,    -1,    -1,    -1,    -1,    -1,   502,   503,
      -1,   505,    -1,    -1,   508,    -1,    -1,   511,   512,   513,
      -1,    -1,   516,   517,    -1,   519,   520,   521,   522,   523,
     524,    -1,    -1,   527,   528,   529,   530,    -1,   532,   533,
      -1,   535,    -1,   537,   538,   539,   540,    -1,    -1,   543,
     544,    -1,   546,   547,   548,   549,    -1,    -1,    -1,    -1,
      -1,   555,   556,   557,    -1,    -1,    -1,   561,   562,   563,
     564,    -1,   566,   567,    -1,   569,   570,    -1,   572,   573,
      -1,    -1,   576,    -1,    -1,   579,    -1,   581,    -1,   583,
     584,   585,    -1,    -1,    -1,    -1,    -1,    -1,   592,    -1,
      -1,   595,    -1,    -1,    -1,   599,   600,   601,   602,   603,
     604,    -1,    -1,    -1,    -1,    -1,    -1,   611,   612,    -1,
     614,   615,   616,    -1,     5,   619,     7,     8,     9,    10,
      11,    -1,   626,    14,    -1,    -1,    -1,    18,    -1,    -1,
      21,    -1,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    32,    -1,    -1,    -1,    36,    -1,    -1,    -1,    40,
      -1,    -1,    43,    44,    45,    -1,    47,    -1,    49,    50,
      -1,    -1,    53,    -1,    -1,    56,    57,    -1,    59,    60,
      -1,    62,    63,    -1,    65,    66,    67,    68,    69,    70,
      71,    -1,    73,    74,    75,    76,    77,    78,    79,    -1,
      81,    82,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    -1,    93,    94,    95,    96,    97,    -1,    99,    -1,
      -1,   102,    -1,    -1,   105,    -1,    -1,    -1,   109,    -1,
      -1,    -1,   113,   114,   115,    -1,    -1,   118,    -1,    -1,
      -1,    -1,   123,   124,    -1,    -1,    -1,    -1,   129,    -1,
     131,    -1,    -1,    -1,   135,    -1,   137,   138,   139,   140,
      -1,    -1,    -1,   144,    -1,    -1,   147,   148,   149,    -1,
      -1,    -1,   153,    -1,   155,   156,    -1,   158,   159,   160,
      -1,    -1,   163,   164,    -1,   166,   167,   168,   169,   170,
     171,    -1,    -1,   174,   175,   176,    -1,    -1,   179,   180,
      -1,   182,   183,   184,    -1,    -1,   187,    -1,    -1,    -1,
     191,    -1,   193,    -1,   195,    -1,   197,   198,   199,   200,
     201,   202,    -1,   204,    -1,    -1,    -1,   208,   209,   210,
      -1,   212,    -1,    -1,   215,   216,    -1,    -1,    -1,   220,
     221,   222,   223,    -1,    -1,   226,   227,   228,    -1,   230,
      -1,   232,    -1,    -1,    -1,    -1,   237,   238,    -1,    -1,
      -1,   242,    -1,   244,   245,    -1,   247,   248,    -1,    -1,
      -1,   252,    -1,    -1,   255,   256,   257,    -1,    -1,   260,
      -1,    -1,   263,   264,    -1,    -1,    -1,    -1,    -1,   270,
     271,    -1,   273,    -1,   275,    -1,   277,   278,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,    -1,   303,   304,   305,    -1,   307,   308,   309,   310,
      -1,   312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,
     321,   322,   323,    -1,    -1,   326,   327,    -1,   329,    -1,
     331,    -1,   333,   334,   335,   336,   337,   338,   339,   340,
     341,    -1,    -1,   344,   345,    -1,    -1,   348,   349,   350,
     351,    -1,    -1,    -1,   355,   356,    -1,    -1,    -1,    -1,
     361,   362,   363,    -1,   365,   366,   367,   368,    -1,   370,
     371,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   380,
     381,   382,    -1,    -1,   385,    -1,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,    -1,    -1,
     401,   402,   403,    -1,   405,    -1,   407,   408,   409,   410,
     411,    -1,   413,   414,   415,    -1,    -1,   418,    -1,    -1,
      -1,   422,   423,   424,   425,   426,    -1,    -1,   429,   430,
     431,   432,   433,    -1,   435,   436,    -1,   438,   439,   440,
      -1,    -1,   443,    -1,   445,    -1,   447,   448,    -1,   450,
     451,    -1,    -1,    -1,   455,   456,   457,   458,   459,   460,
     461,   462,   463,   464,    -1,   466,   467,    -1,    -1,    -1,
     471,   472,   473,   474,    -1,    -1,    -1,   478,    -1,    -1,
      -1,   482,    -1,   484,   485,   486,   487,   488,    -1,   490,
     491,   492,   493,   494,   495,    -1,    -1,    -1,    -1,    -1,
      -1,   502,   503,    -1,   505,    -1,    -1,   508,    -1,    -1,
     511,   512,   513,    -1,    -1,   516,   517,    -1,   519,   520,
     521,   522,   523,   524,    -1,    -1,   527,   528,   529,   530,
      -1,   532,   533,    -1,   535,    -1,   537,   538,   539,   540,
      -1,    -1,   543,   544,    -1,   546,   547,   548,   549,    -1,
      -1,    -1,    -1,    -1,   555,   556,   557,    -1,    -1,    -1,
     561,   562,   563,   564,    -1,   566,   567,    -1,   569,   570,
      -1,   572,   573,    -1,    -1,   576,    -1,    -1,   579,    -1,
     581,    -1,   583,   584,   585,    -1,    -1,    -1,    -1,    -1,
      -1,   592,    -1,    -1,   595,    -1,    -1,    -1,   599,   600,
     601,   602,   603,   604,    -1,    -1,    -1,    -1,    -1,    -1,
     611,   612,    -1,   614,   615,   616,    -1,     5,   619,     7,
       8,     9,    10,    11,    -1,   626,    14,    -1,    -1,    -1,
      18,    -1,    -1,    21,    -1,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    32,    -1,    -1,    -1,    36,    -1,
      -1,    -1,    40,    -1,    -1,    43,    44,    45,    -1,    47,
      -1,    49,    50,    -1,    -1,    53,    -1,    -1,    56,    57,
      -1,    59,    60,    -1,    62,    63,    -1,    65,    66,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      78,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    -1,    90,    91,    -1,    93,    94,    95,    96,    97,
      -1,    99,    -1,    -1,   102,    -1,    -1,   105,    -1,    -1,
      -1,   109,    -1,    -1,    -1,   113,   114,   115,    -1,    -1,
     118,    -1,    -1,    -1,    -1,   123,   124,   125,    -1,    -1,
      -1,   129,    -1,   131,    -1,    -1,    -1,   135,    -1,   137,
     138,   139,   140,    -1,    -1,    -1,   144,    -1,    -1,   147,
     148,   149,    -1,    -1,    -1,   153,    -1,   155,   156,    -1,
     158,   159,   160,    -1,    -1,   163,   164,    -1,   166,   167,
     168,   169,   170,   171,    -1,    -1,   174,   175,   176,    -1,
      -1,   179,   180,    -1,   182,   183,   184,   185,    -1,   187,
      -1,    -1,    -1,   191,    -1,   193,    -1,   195,    -1,   197,
     198,   199,   200,   201,   202,    -1,   204,    -1,    -1,    -1,
     208,   209,   210,    -1,   212,   213,    -1,   215,   216,    -1,
      -1,    -1,   220,   221,   222,   223,    -1,    -1,   226,   227,
     228,    -1,   230,    -1,   232,    -1,    -1,    -1,    -1,   237,
     238,    -1,    -1,    -1,   242,    -1,   244,   245,    -1,   247,
     248,    -1,    -1,    -1,   252,    -1,    -1,   255,   256,   257,
      -1,    -1,   260,    -1,    -1,   263,   264,    -1,    -1,    -1,
      -1,    -1,   270,   271,    -1,   273,    -1,   275,    -1,   277,
     278,    -1,    -1,   281,    -1,    -1,    -1,    -1,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,    -1,   303,   304,   305,    -1,   307,
     308,   309,   310,    -1,   312,   313,    -1,    -1,    -1,    -1,
     318,   319,   320,   321,   322,   323,    -1,    -1,   326,   327,
      -1,   329,    -1,   331,    -1,   333,   334,   335,   336,   337,
     338,   339,   340,   341,    -1,    -1,   344,   345,    -1,    -1,
     348,   349,   350,   351,   352,   353,    -1,   355,   356,    -1,
      -1,   359,    -1,   361,   362,   363,    -1,   365,   366,   367,
     368,    -1,   370,   371,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   380,   381,   382,    -1,    -1,   385,    -1,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,    -1,    -1,   401,   402,   403,    -1,   405,    -1,   407,
     408,   409,   410,   411,    -1,   413,   414,   415,    -1,    -1,
     418,    -1,    -1,    -1,   422,   423,   424,   425,   426,    -1,
      -1,   429,   430,   431,   432,   433,    -1,   435,   436,    -1,
     438,   439,   440,    -1,    -1,   443,    -1,   445,    -1,   447,
     448,    -1,   450,   451,    -1,    -1,    -1,   455,   456,   457,
     458,   459,   460,   461,   462,   463,   464,    -1,   466,   467,
      -1,    -1,    -1,   471,   472,   473,   474,    -1,    -1,    -1,
     478,    -1,    -1,    -1,   482,    -1,   484,   485,   486,   487,
     488,    -1,   490,   491,   492,   493,   494,   495,    -1,    -1,
     498,   499,   500,    -1,   502,   503,    -1,   505,    -1,    -1,
     508,    -1,    -1,   511,   512,   513,    -1,    -1,   516,   517,
      -1,   519,   520,   521,   522,   523,   524,    -1,    -1,   527,
     528,   529,   530,    -1,   532,   533,    -1,   535,    -1,   537,
     538,   539,   540,    -1,    -1,   543,   544,    -1,   546,   547,
     548,   549,    -1,    -1,    -1,    -1,    -1,   555,   556,   557,
      -1,    -1,    -1,   561,   562,   563,   564,   565,   566,   567,
      -1,   569,   570,    -1,   572,   573,    -1,    -1,   576,    -1,
      -1,   579,    -1,   581,    -1,   583,   584,   585,    -1,    -1,
      -1,    -1,    -1,    -1,   592,    -1,    -1,   595,    -1,    -1,
      -1,   599,   600,   601,   602,   603,   604,    -1,    -1,    -1,
      -1,    -1,    -1,   611,   612,    -1,   614,   615,   616,    -1,
       5,   619,     7,     8,     9,    10,    11,    -1,    -1,    14,
      -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,
      25,    26,    27,    28,    29,    30,    -1,    32,    -1,    -1,
      -1,    36,    -1,    -1,    -1,    40,    -1,    -1,    43,    44,
      45,    -1,    47,    -1,    49,    50,    -1,    -1,    53,    -1,
      -1,    56,    57,    -1,    59,    60,    -1,    62,    63,    -1,
      65,    66,    67,    68,    69,    70,    71,    -1,    73,    74,
      75,    76,    77,    78,    79,    -1,    81,    82,    83,    84,
      85,    86,    87,    88,    -1,    90,    91,    -1,    93,    94,
      95,    96,    97,    -1,    99,    -1,    -1,   102,    -1,    -1,
     105,    -1,    -1,    -1,   109,    -1,    -1,    -1,   113,   114,
     115,    -1,    -1,   118,    -1,    -1,    -1,    -1,   123,   124,
     125,    -1,    -1,   128,   129,    -1,   131,    -1,    -1,    -1,
     135,    -1,   137,   138,   139,   140,    -1,    -1,    -1,   144,
      -1,    -1,   147,   148,   149,    -1,    -1,    -1,   153,    -1,
     155,   156,    -1,   158,   159,   160,    -1,    -1,   163,   164,
      -1,   166,   167,   168,   169,   170,   171,    -1,    -1,   174,
     175,   176,    -1,    -1,   179,   180,    -1,   182,   183,   184,
     185,    -1,   187,    -1,    -1,    -1,   191,    -1,   193,    -1,
     195,    -1,   197,   198,   199,   200,   201,   202,    -1,   204,
      -1,    -1,    -1,   208,   209,   210,    -1,   212,   213,    -1,
     215,   216,    -1,    -1,    -1,   220,   221,   222,   223,    -1,
      -1,   226,   227,   228,    -1,   230,    -1,   232,    -1,    -1,
      -1,    -1,   237,   238,    -1,    -1,    -1,   242,    -1,   244,
     245,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,    -1,
     255,   256,   257,    -1,    -1,   260,    -1,    -1,   263,   264,
      -1,    -1,    -1,    -1,    -1,   270,   271,    -1,   273,    -1,
     275,    -1,   277,   278,    -1,    -1,   281,    -1,    -1,    -1,
      -1,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,    -1,   303,   304,
     305,    -1,   307,   308,   309,   310,    -1,   312,   313,    -1,
      -1,    -1,    -1,   318,   319,   320,   321,   322,   323,    -1,
      -1,   326,   327,    -1,   329,    -1,   331,    -1,   333,   334,
     335,   336,   337,   338,   339,   340,   341,    -1,    -1,   344,
     345,    -1,    -1,   348,   349,   350,   351,    -1,    -1,    -1,
     355,   356,    -1,    -1,   359,    -1,   361,   362,   363,    -1,
     365,   366,   367,   368,    -1,   370,   371,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   380,   381,   382,    -1,    -1,
     385,    -1,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,    -1,    -1,   401,   402,   403,    -1,
     405,    -1,   407,   408,   409,   410,   411,    -1,   413,   414,
     415,    -1,    -1,   418,    -1,    -1,    -1,   422,   423,   424,
     425,   426,    -1,    -1,   429,   430,   431,   432,   433,    -1,
     435,   436,    -1,   438,   439,   440,    -1,    -1,   443,    -1,
     445,    -1,   447,   448,    -1,   450,   451,    -1,    -1,    -1,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
      -1,   466,   467,    -1,    -1,    -1,   471,   472,   473,   474,
      -1,    -1,    -1,   478,    -1,    -1,    -1,   482,    -1,   484,
     485,   486,   487,   488,    -1,   490,   491,   492,   493,   494,
     495,    -1,    -1,    -1,    -1,    -1,    -1,   502,   503,    -1,
     505,    -1,    -1,   508,    -1,    -1,   511,   512,   513,    -1,
      -1,   516,   517,    -1,   519,   520,   521,   522,   523,   524,
      -1,    -1,   527,   528,   529,   530,    -1,   532,   533,    -1,
     535,    -1,   537,   538,   539,   540,    -1,   542,   543,   544,
      -1,   546,   547,   548,   549,    -1,    -1,    -1,    -1,    -1,
     555,   556,   557,    -1,    -1,    -1,   561,   562,   563,   564,
     565,   566,   567,    -1,   569,   570,    -1,   572,   573,    -1,
      -1,   576,    -1,    -1,   579,    -1,   581,    -1,   583,   584,
     585,    -1,    -1,    -1,    -1,    -1,    -1,   592,    -1,    -1,
     595,    -1,    -1,    -1,   599,   600,   601,   602,   603,   604,
      -1,    -1,    -1,    -1,    -1,    -1,   611,   612,    -1,   614,
     615,   616,    -1,     5,   619,     7,     8,     9,    10,    11,
      -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,
      -1,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      32,    -1,    -1,    -1,    36,    -1,    -1,    -1,    40,    -1,
      -1,    43,    44,    45,    -1,    47,    -1,    49,    50,    -1,
      -1,    53,    -1,    -1,    56,    57,    -1,    59,    60,    -1,
      62,    63,    -1,    65,    66,    67,    68,    69,    70,    71,
      -1,    73,    74,    75,    76,    77,    78,    79,    -1,    81,
      82,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      -1,    93,    94,    95,    96,    97,    -1,    99,    -1,    -1,
     102,    -1,    -1,   105,    -1,    -1,    -1,   109,    -1,    -1,
      -1,   113,   114,   115,    -1,    -1,   118,    -1,    -1,    -1,
      -1,   123,   124,   125,    -1,    -1,   128,   129,    -1,   131,
      -1,    -1,    -1,   135,    -1,   137,   138,   139,   140,    -1,
      -1,    -1,   144,    -1,    -1,   147,   148,   149,    -1,    -1,
      -1,   153,    -1,   155,   156,    -1,   158,   159,   160,    -1,
      -1,   163,   164,    -1,   166,   167,   168,   169,   170,   171,
      -1,    -1,   174,   175,   176,    -1,    -1,   179,   180,    -1,
     182,   183,   184,   185,    -1,   187,    -1,    -1,    -1,   191,
      -1,   193,    -1,   195,    -1,   197,   198,   199,   200,   201,
     202,    -1,   204,    -1,    -1,    -1,   208,   209,   210,    -1,
     212,   213,    -1,   215,   216,    -1,    -1,    -1,   220,   221,
     222,   223,    -1,    -1,   226,   227,   228,    -1,   230,    -1,
     232,    -1,    -1,    -1,    -1,   237,   238,    -1,    -1,    -1,
     242,    -1,   244,   245,    -1,   247,   248,    -1,    -1,    -1,
     252,    -1,    -1,   255,   256,   257,    -1,    -1,   260,    -1,
      -1,   263,   264,    -1,    -1,    -1,    -1,    -1,   270,   271,
      -1,   273,    -1,   275,    -1,   277,   278,    -1,    -1,   281,
      -1,    -1,    -1,    -1,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
      -1,   303,   304,   305,    -1,   307,   308,   309,   310,    -1,
     312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,   321,
     322,   323,    -1,    -1,   326,   327,    -1,   329,    -1,   331,
      -1,   333,   334,   335,   336,   337,   338,   339,   340,   341,
      -1,    -1,   344,   345,    -1,    -1,   348,   349,   350,   351,
      -1,    -1,    -1,   355,   356,    -1,    -1,   359,    -1,   361,
     362,   363,    -1,   365,   366,   367,   368,    -1,   370,   371,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   380,   381,
     382,    -1,    -1,   385,    -1,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,    -1,    -1,   401,
     402,   403,    -1,   405,    -1,   407,   408,   409,   410,   411,
      -1,   413,   414,   415,    -1,    -1,   418,    -1,    -1,    -1,
     422,   423,   424,   425,   426,    -1,    -1,   429,   430,   431,
     432,   433,    -1,   435,   436,    -1,   438,   439,   440,    -1,
      -1,   443,    -1,   445,    -1,   447,   448,    -1,   450,   451,
      -1,    -1,    -1,   455,   456,   457,   458,   459,   460,   461,
     462,   463,   464,    -1,   466,   467,    -1,    -1,    -1,   471,
     472,   473,   474,    -1,    -1,    -1,   478,    -1,    -1,    -1,
     482,    -1,   484,   485,   486,   487,   488,    -1,   490,   491,
     492,   493,   494,   495,    -1,    -1,    -1,    -1,    -1,    -1,
     502,   503,    -1,   505,    -1,    -1,   508,    -1,    -1,   511,
     512,   513,    -1,    -1,   516,   517,    -1,   519,   520,   521,
     522,   523,   524,    -1,    -1,   527,   528,   529,   530,    -1,
     532,   533,    -1,   535,    -1,   537,   538,   539,   540,    -1,
     542,   543,   544,    -1,   546,   547,   548,   549,    -1,    -1,
      -1,    -1,    -1,   555,   556,   557,    -1,    -1,    -1,   561,
     562,   563,   564,   565,   566,   567,    -1,   569,   570,    -1,
     572,   573,    -1,    -1,   576,    -1,    -1,   579,    -1,   581,
      -1,   583,   584,   585,    -1,    -1,    -1,    -1,    -1,    -1,
     592,    -1,    -1,   595,    -1,    -1,    -1,   599,   600,   601,
     602,   603,   604,    -1,    -1,    -1,    -1,    -1,    -1,   611,
     612,    -1,   614,   615,   616,    -1,     5,   619,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      -1,    -1,    21,    -1,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    32,    -1,    -1,    -1,    36,    -1,    -1,
      -1,    40,    -1,    -1,    43,    44,    45,    -1,    47,    -1,
      49,    50,    -1,    -1,    53,    -1,    -1,    56,    57,    -1,
      59,    60,    -1,    62,    63,    -1,    65,    66,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    78,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    -1,    93,    94,    95,    96,    97,    -1,
      99,    -1,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,
     109,    -1,    -1,    -1,   113,   114,   115,    -1,    -1,   118,
      -1,    -1,    -1,    -1,   123,   124,   125,    -1,    -1,   128,
     129,    -1,   131,    -1,    -1,    -1,   135,    -1,   137,   138,
     139,   140,    -1,    -1,    -1,   144,    -1,    -1,   147,   148,
     149,    -1,    -1,    -1,   153,    -1,   155,   156,    -1,   158,
     159,   160,    -1,    -1,   163,   164,    -1,   166,   167,   168,
     169,   170,   171,    -1,    -1,   174,   175,   176,    -1,    -1,
     179,   180,    -1,   182,   183,   184,   185,    -1,   187,    -1,
      -1,    -1,   191,    -1,   193,    -1,   195,    -1,   197,   198,
     199,   200,   201,   202,    -1,   204,    -1,    -1,    -1,   208,
     209,   210,    -1,   212,   213,    -1,   215,   216,    -1,    -1,
      -1,   220,   221,   222,   223,    -1,    -1,   226,   227,   228,
      -1,   230,    -1,   232,    -1,    -1,    -1,    -1,   237,   238,
      -1,    -1,    -1,   242,    -1,   244,   245,    -1,   247,   248,
      -1,    -1,    -1,   252,    -1,    -1,   255,   256,   257,    -1,
      -1,   260,    -1,    -1,   263,   264,    -1,    -1,    -1,    -1,
      -1,   270,   271,    -1,   273,    -1,   275,    -1,   277,   278,
      -1,    -1,   281,    -1,    -1,    -1,    -1,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,    -1,   303,   304,   305,    -1,   307,   308,
     309,   310,    -1,   312,   313,    -1,    -1,    -1,    -1,   318,
     319,   320,   321,   322,   323,    -1,    -1,   326,   327,    -1,
     329,    -1,   331,    -1,   333,   334,   335,   336,   337,   338,
     339,   340,   341,    -1,    -1,   344,   345,    -1,    -1,   348,
     349,   350,   351,    -1,    -1,    -1,   355,   356,    -1,    -1,
     359,    -1,   361,   362,   363,    -1,   365,   366,   367,   368,
      -1,   370,   371,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   380,   381,   382,    -1,    -1,   385,    -1,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
      -1,    -1,   401,   402,   403,    -1,   405,    -1,   407,   408,
     409,   410,   411,    -1,   413,   414,   415,    -1,    -1,   418,
      -1,    -1,    -1,   422,   423,   424,   425,   426,    -1,    -1,
     429,   430,   431,   432,   433,    -1,   435,   436,    -1,   438,
     439,   440,    -1,    -1,   443,    -1,   445,    -1,   447,   448,
      -1,   450,   451,    -1,    -1,    -1,   455,   456,   457,   458,
     459,   460,   461,   462,   463,   464,    -1,   466,   467,    -1,
      -1,    -1,   471,   472,   473,   474,    -1,    -1,    -1,   478,
      -1,    -1,    -1,   482,    -1,   484,   485,   486,   487,   488,
      -1,   490,   491,   492,   493,   494,   495,    -1,    -1,    -1,
      -1,    -1,    -1,   502,   503,    -1,   505,    -1,    -1,   508,
      -1,    -1,   511,   512,   513,    -1,    -1,   516,   517,    -1,
     519,   520,   521,   522,   523,   524,    -1,    -1,   527,   528,
     529,   530,    -1,   532,   533,    -1,   535,    -1,   537,   538,
     539,   540,    -1,   542,   543,   544,    -1,   546,   547,   548,
     549,    -1,    -1,    -1,    -1,    -1,   555,   556,   557,    -1,
      -1,    -1,   561,   562,   563,   564,   565,   566,   567,    -1,
     569,   570,    -1,   572,   573,    -1,    -1,   576,    -1,    -1,
     579,    -1,   581,    -1,   583,   584,   585,    -1,    -1,    -1,
      -1,    -1,    -1,   592,    -1,    -1,   595,    -1,    -1,    -1,
     599,   600,   601,   602,   603,   604,    -1,    -1,    -1,    -1,
      -1,    -1,   611,   612,    -1,   614,   615,   616,    -1,     5,
     619,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,
      26,    27,    28,    29,    30,    -1,    32,    -1,    -1,    35,
      36,    -1,    -1,    -1,    40,    -1,    -1,    43,    44,    45,
      -1,    47,    -1,    49,    50,    -1,    -1,    53,    -1,    -1,
      56,    57,    -1,    59,    60,    -1,    62,    63,    -1,    65,
      66,    67,    68,    69,    70,    71,    -1,    73,    74,    75,
      76,    77,    78,    79,    -1,    81,    82,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    -1,    93,    94,    95,
      96,    97,    -1,    99,    -1,    -1,   102,    -1,    -1,   105,
      -1,    -1,    -1,   109,    -1,    -1,    -1,   113,   114,   115,
      -1,    -1,   118,    -1,    -1,    -1,    -1,   123,   124,    -1,
      -1,    -1,   128,   129,    -1,   131,    -1,    -1,    -1,   135,
      -1,   137,   138,   139,   140,    -1,    -1,    -1,   144,    -1,
      -1,   147,   148,   149,    -1,    -1,    -1,   153,    -1,   155,
     156,    -1,   158,   159,   160,   161,    -1,   163,   164,    -1,
     166,   167,   168,   169,   170,   171,    -1,    -1,   174,   175,
     176,    -1,    -1,   179,   180,    -1,   182,   183,   184,    -1,
      -1,   187,    -1,    -1,    -1,   191,    -1,   193,    -1,   195,
      -1,   197,   198,   199,   200,   201,   202,    -1,   204,    -1,
      -1,    -1,   208,   209,   210,    -1,   212,    -1,    -1,   215,
     216,    -1,    -1,    -1,   220,   221,   222,   223,    -1,    -1,
     226,   227,   228,    -1,   230,    -1,   232,    -1,    -1,    -1,
      -1,   237,   238,    -1,    -1,    -1,   242,    -1,   244,   245,
      -1,   247,   248,    -1,    -1,    -1,   252,    -1,    -1,   255,
     256,   257,    -1,    -1,   260,    -1,    -1,   263,   264,   265,
      -1,    -1,    -1,    -1,   270,   271,    -1,   273,    -1,   275,
      -1,   277,   278,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,    -1,   303,   304,   305,
      -1,   307,   308,   309,   310,    -1,   312,   313,    -1,    -1,
      -1,    -1,   318,   319,   320,   321,   322,   323,    -1,    -1,
     326,   327,    -1,   329,    -1,   331,    -1,   333,   334,   335,
     336,   337,   338,   339,   340,   341,    -1,    -1,   344,   345,
      -1,    -1,   348,   349,   350,   351,    -1,    -1,    -1,   355,
     356,    -1,    -1,    -1,    -1,   361,   362,   363,    -1,   365,
     366,   367,   368,    -1,   370,   371,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   380,   381,   382,    -1,    -1,   385,
      -1,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,    -1,    -1,   401,   402,   403,    -1,   405,
      -1,   407,   408,   409,   410,   411,    -1,   413,   414,   415,
      -1,    -1,   418,    -1,    -1,    -1,   422,   423,   424,   425,
     426,    -1,    -1,   429,   430,   431,   432,   433,    -1,   435,
     436,    -1,   438,   439,   440,    -1,    -1,   443,    -1,   445,
      -1,   447,   448,    -1,   450,   451,    -1,    -1,    -1,   455,
     456,   457,   458,   459,   460,   461,   462,   463,   464,    -1,
     466,   467,    -1,    -1,    -1,   471,   472,   473,   474,    -1,
      -1,   477,   478,    -1,    -1,    -1,   482,    -1,   484,   485,
     486,   487,   488,    -1,   490,   491,   492,   493,   494,   495,
      -1,    -1,    -1,    -1,    -1,    -1,   502,   503,    -1,   505,
      -1,    -1,   508,    -1,    -1,   511,   512,   513,    -1,    -1,
     516,   517,    -1,   519,   520,   521,   522,   523,   524,    -1,
      -1,   527,   528,   529,   530,    -1,   532,   533,    -1,   535,
      -1,   537,   538,   539,   540,    -1,   542,   543,   544,    -1,
     546,   547,   548,   549,    -1,    -1,    -1,    -1,    -1,   555,
     556,   557,    -1,    -1,    -1,   561,   562,   563,   564,    -1,
     566,   567,    -1,   569,   570,    -1,   572,   573,    -1,    -1,
     576,    -1,    -1,   579,    -1,   581,    -1,   583,   584,   585,
      -1,    -1,    -1,    -1,    -1,    -1,   592,    -1,    -1,   595,
      -1,    -1,    -1,   599,   600,   601,   602,   603,   604,    -1,
      -1,    -1,    -1,    -1,    -1,   611,   612,    -1,   614,   615,
     616,    -1,     5,   619,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,
      23,    24,    25,    26,    27,    28,    29,    30,    -1,    32,
      -1,    -1,    35,    36,    -1,    -1,    -1,    40,    -1,    -1,
      43,    44,    45,    -1,    47,    -1,    49,    50,    -1,    -1,
      53,    -1,    -1,    56,    57,    -1,    59,    60,    -1,    62,
      63,    -1,    65,    66,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    78,    79,    -1,    81,    82,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    -1,
      93,    94,    95,    96,    97,    -1,    99,    -1,    -1,   102,
      -1,    -1,   105,    -1,    -1,    -1,   109,    -1,    -1,    -1,
     113,   114,   115,    -1,    -1,   118,    -1,    -1,    -1,    -1,
     123,   124,    -1,    -1,    -1,   128,   129,    -1,   131,    -1,
      -1,    -1,   135,    -1,   137,   138,   139,   140,    -1,    -1,
      -1,   144,    -1,    -1,   147,   148,   149,    -1,    -1,    -1,
     153,    -1,   155,   156,    -1,   158,   159,   160,    -1,    -1,
     163,   164,    -1,   166,   167,   168,   169,   170,   171,    -1,
      -1,   174,   175,   176,    -1,    -1,   179,   180,    -1,   182,
     183,   184,    -1,    -1,   187,    -1,    -1,    -1,   191,    -1,
     193,    -1,   195,    -1,   197,   198,   199,   200,   201,   202,
      -1,   204,    -1,    -1,    -1,   208,   209,   210,    -1,   212,
      -1,    -1,   215,   216,    -1,    -1,    -1,   220,   221,   222,
     223,    -1,    -1,   226,   227,   228,    -1,   230,    -1,   232,
      -1,    -1,    -1,    -1,   237,   238,    -1,    -1,    -1,   242,
      -1,   244,   245,    -1,   247,   248,    -1,    -1,    -1,   252,
      -1,    -1,   255,   256,   257,    -1,    -1,   260,    -1,    -1,
     263,   264,   265,    -1,    -1,    -1,    -1,   270,   271,    -1,
     273,    -1,   275,    -1,   277,   278,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,    -1,
     303,   304,   305,    -1,   307,   308,   309,   310,    -1,   312,
     313,    -1,    -1,    -1,    -1,   318,   319,   320,   321,   322,
     323,    -1,    -1,   326,   327,    -1,   329,    -1,   331,    -1,
     333,   334,   335,   336,   337,   338,   339,   340,   341,    -1,
      -1,   344,   345,    -1,    -1,   348,   349,   350,   351,    -1,
      -1,    -1,   355,   356,    -1,    -1,    -1,    -1,   361,   362,
     363,    -1,   365,   366,   367,   368,    -1,   370,   371,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   380,   381,   382,
      -1,    -1,   385,    -1,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,    -1,    -1,   401,   402,
     403,    -1,   405,    -1,   407,   408,   409,   410,   411,    -1,
     413,   414,   415,    -1,    -1,   418,    -1,    -1,    -1,   422,
     423,   424,   425,   426,    -1,    -1,   429,   430,   431,   432,
     433,    -1,   435,   436,    -1,   438,   439,   440,    -1,    -1,
     443,    -1,   445,    -1,   447,   448,    -1,   450,   451,    -1,
      -1,    -1,   455,   456,   457,   458,   459,   460,   461,   462,
     463,   464,    -1,   466,   467,    -1,    -1,    -1,   471,   472,
     473,   474,    -1,    -1,    -1,   478,    -1,    -1,    -1,   482,
      -1,   484,   485,   486,   487,   488,    -1,   490,   491,   492,
     493,   494,   495,    -1,    -1,    -1,    -1,    -1,    -1,   502,
     503,    -1,   505,    -1,    -1,   508,    -1,    -1,   511,   512,
     513,    -1,    -1,   516,   517,    -1,   519,   520,   521,   522,
     523,   524,    -1,    -1,   527,   528,   529,   530,    -1,   532,
     533,    -1,   535,    -1,   537,   538,   539,   540,    -1,   542,
     543,   544,    -1,   546,   547,   548,   549,    -1,    -1,    -1,
      -1,    -1,   555,   556,   557,    -1,    -1,    -1,   561,   562,
     563,   564,    -1,   566,   567,    -1,   569,   570,    -1,   572,
     573,    -1,    -1,   576,    -1,    -1,   579,    -1,   581,    -1,
     583,   584,   585,    -1,    -1,    -1,    -1,    -1,    -1,   592,
      -1,    -1,   595,    -1,    -1,    -1,   599,   600,   601,   602,
     603,   604,    -1,    -1,    -1,    -1,    -1,    -1,   611,   612,
      -1,   614,   615,   616,    -1,     5,   619,     7,     8,     9,
      10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,
      -1,    21,    -1,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    -1,    -1,    -1,    36,    -1,    -1,    -1,
      40,    -1,    -1,    43,    44,    45,    -1,    47,    -1,    49,
      50,    -1,    -1,    53,    -1,    -1,    56,    57,    -1,    59,
      60,    -1,    62,    63,    -1,    65,    66,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    77,    78,    79,
      -1,    81,    82,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    -1,    93,    94,    95,    96,    97,    -1,    99,
      -1,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,   109,
      -1,    -1,    -1,   113,   114,   115,    -1,    -1,   118,    -1,
      -1,    -1,    -1,   123,   124,    -1,    -1,    -1,    -1,   129,
      -1,   131,    -1,    -1,    -1,   135,    -1,   137,   138,   139,
     140,    -1,    -1,    -1,   144,    -1,    -1,   147,   148,   149,
      -1,    -1,    -1,   153,    -1,   155,   156,    -1,   158,   159,
     160,    -1,    -1,   163,   164,    -1,   166,   167,   168,   169,
     170,   171,    -1,    -1,   174,   175,   176,    -1,    -1,   179,
     180,    -1,   182,   183,   184,    -1,    -1,   187,    -1,    -1,
      -1,   191,    -1,   193,    -1,   195,    -1,   197,   198,   199,
     200,   201,   202,    -1,   204,    -1,    -1,    -1,   208,   209,
     210,    -1,   212,    -1,    -1,   215,   216,    -1,    -1,    -1,
     220,   221,   222,   223,    -1,    -1,   226,   227,   228,    -1,
     230,    -1,   232,    -1,    -1,    -1,    -1,   237,   238,    -1,
      -1,    -1,   242,    -1,   244,   245,    -1,   247,   248,    -1,
      -1,    -1,   252,    -1,    -1,   255,   256,   257,    -1,    -1,
     260,    -1,    -1,   263,   264,    -1,    -1,    -1,    -1,    -1,
     270,   271,    -1,   273,    -1,   275,    -1,   277,   278,    -1,
      -1,   281,    -1,    -1,    -1,    -1,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,    -1,   303,   304,   305,    -1,   307,   308,   309,
     310,    -1,   312,   313,    -1,    -1,    -1,    -1,   318,   319,
     320,   321,   322,   323,    -1,    -1,   326,   327,    -1,   329,
      -1,   331,    -1,   333,   334,   335,   336,   337,   338,   339,
     340,   341,    -1,    -1,   344,   345,    -1,    -1,   348,   349,
     350,   351,    -1,    -1,    -1,   355,   356,    -1,    -1,   359,
      -1,   361,   362,   363,    -1,   365,   366,   367,   368,    -1,
     370,   371,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     380,   381,   382,    -1,   384,   385,    -1,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,    -1,
      -1,   401,   402,   403,    -1,   405,    -1,   407,   408,   409,
     410,   411,    -1,   413,   414,   415,    -1,    -1,   418,    -1,
      -1,    -1,   422,   423,   424,   425,   426,    -1,    -1,   429,
     430,   431,   432,   433,    -1,   435,   436,    -1,   438,   439,
     440,    -1,    -1,   443,    -1,   445,    -1,   447,   448,    -1,
     450,   451,    -1,    -1,    -1,   455,   456,   457,   458,   459,
     460,   461,   462,   463,   464,    -1,   466,   467,    -1,    -1,
      -1,   471,   472,   473,   474,    -1,    -1,    -1,   478,    -1,
      -1,    -1,   482,    -1,   484,   485,   486,   487,   488,    -1,
     490,   491,   492,   493,   494,   495,    -1,    -1,    -1,    -1,
      -1,    -1,   502,   503,    -1,   505,    -1,    -1,   508,    -1,
      -1,   511,   512,   513,    -1,    -1,   516,   517,    -1,   519,
     520,   521,   522,   523,   524,    -1,    -1,   527,   528,   529,
     530,    -1,   532,   533,    -1,   535,    -1,   537,   538,   539,
     540,    -1,    -1,   543,   544,    -1,   546,   547,   548,   549,
      -1,    -1,    -1,    -1,    -1,   555,   556,   557,    -1,    -1,
      -1,   561,   562,   563,   564,   565,   566,   567,    -1,   569,
     570,    -1,   572,   573,    -1,    -1,   576,    -1,    -1,   579,
      -1,   581,    -1,   583,   584,   585,    -1,    -1,    -1,    -1,
      -1,    -1,   592,    -1,    -1,   595,    -1,    -1,    -1,   599,
     600,   601,   602,   603,   604,    -1,    -1,    -1,    -1,    -1,
      -1,   611,   612,    -1,   614,   615,   616,    -1,     5,   619,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    32,    -1,    -1,    -1,    36,
      -1,    -1,    -1,    40,    -1,    -1,    43,    44,    45,    -1,
      47,    -1,    49,    50,    -1,    -1,    53,    -1,    -1,    56,
      57,    -1,    59,    60,    -1,    62,    63,    -1,    65,    66,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      77,    78,    79,    -1,    81,    82,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    -1,    93,    94,    95,    96,
      97,    -1,    99,    -1,    -1,   102,    -1,    -1,   105,    -1,
      -1,    -1,   109,    -1,    -1,    -1,   113,   114,   115,    -1,
      -1,   118,    -1,    -1,    -1,    -1,   123,   124,    -1,    -1,
      -1,    -1,   129,    -1,   131,    -1,    -1,    -1,   135,    -1,
     137,   138,   139,   140,    -1,    -1,    -1,   144,    -1,    -1,
     147,   148,   149,    -1,    -1,    -1,   153,    -1,   155,   156,
      -1,   158,   159,   160,    -1,    -1,   163,   164,    -1,   166,
     167,   168,   169,   170,   171,    -1,    -1,   174,   175,   176,
      -1,    -1,   179,   180,    -1,   182,   183,   184,    -1,    -1,
     187,    -1,    -1,    -1,   191,    -1,   193,    -1,   195,    -1,
     197,   198,   199,   200,   201,   202,    -1,   204,    -1,    -1,
      -1,   208,   209,   210,    -1,   212,    -1,    -1,   215,   216,
      -1,    -1,    -1,   220,   221,   222,   223,    -1,    -1,   226,
     227,   228,    -1,   230,    -1,   232,    -1,    -1,    -1,    -1,
     237,   238,    -1,    -1,    -1,   242,    -1,   244,   245,    -1,
     247,   248,    -1,    -1,    -1,   252,    -1,    -1,   255,   256,
     257,    -1,    -1,   260,    -1,    -1,   263,   264,    -1,    -1,
      -1,    -1,    -1,   270,   271,    -1,   273,    -1,   275,    -1,
     277,   278,    -1,    -1,   281,    -1,    -1,    -1,    -1,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,    -1,   303,   304,   305,    -1,
     307,   308,   309,   310,    -1,   312,   313,    -1,    -1,    -1,
      -1,   318,   319,   320,   321,   322,   323,    -1,    -1,   326,
     327,    -1,   329,    -1,   331,    -1,   333,   334,   335,   336,
     337,   338,   339,   340,   341,    -1,    -1,   344,   345,    -1,
      -1,   348,   349,   350,   351,    -1,    -1,    -1,   355,   356,
      -1,    -1,   359,    -1,   361,   362,   363,    -1,   365,   366,
     367,   368,    -1,   370,   371,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   380,   381,   382,    -1,   384,   385,    -1,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,    -1,    -1,   401,   402,   403,    -1,   405,    -1,
     407,   408,   409,   410,   411,    -1,   413,   414,   415,    -1,
      -1,   418,    -1,    -1,    -1,   422,   423,   424,   425,   426,
      -1,    -1,   429,   430,   431,   432,   433,    -1,   435,   436,
      -1,   438,   439,   440,    -1,    -1,   443,    -1,   445,    -1,
     447,   448,    -1,   450,   451,    -1,    -1,    -1,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,    -1,   466,
     467,    -1,    -1,    -1,   471,   472,   473,   474,    -1,    -1,
      -1,   478,    -1,    -1,    -1,   482,    -1,   484,   485,   486,
     487,   488,    -1,   490,   491,   492,   493,   494,   495,    -1,
      -1,    -1,    -1,    -1,    -1,   502,   503,    -1,   505,    -1,
      -1,   508,    -1,    -1,   511,   512,   513,    -1,    -1,   516,
     517,    -1,   519,   520,   521,   522,   523,   524,    -1,    -1,
     527,   528,   529,   530,    -1,   532,   533,    -1,   535,    -1,
     537,   538,   539,   540,    -1,    -1,   543,   544,    -1,   546,
     547,   548,   549,    -1,    -1,    -1,    -1,    -1,   555,   556,
     557,    -1,    -1,    -1,   561,   562,   563,   564,   565,   566,
     567,    -1,   569,   570,    -1,   572,   573,    -1,    -1,   576,
      -1,    -1,   579,    -1,   581,    -1,   583,   584,   585,    -1,
      -1,    -1,    -1,    -1,    -1,   592,    -1,    -1,   595,    -1,
      -1,    -1,   599,   600,   601,   602,   603,   604,    -1,    -1,
      -1,    -1,    -1,    -1,   611,   612,    -1,   614,   615,   616,
      -1,     5,   619,     7,     8,     9,    10,    11,    -1,    -1,
      14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    -1,
      -1,    35,    36,    -1,    -1,    -1,    40,    -1,    -1,    43,
      44,    45,    -1,    47,    -1,    49,    50,    -1,    -1,    53,
      -1,    -1,    56,    57,    -1,    59,    60,    -1,    62,    63,
      -1,    65,    66,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    78,    79,    -1,    81,    82,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    -1,    93,
      94,    95,    96,    97,    -1,    99,    -1,    -1,   102,    -1,
      -1,   105,    -1,    -1,    -1,   109,    -1,    -1,    -1,   113,
     114,   115,    -1,    -1,   118,    -1,    -1,    -1,    -1,   123,
     124,    -1,    -1,    -1,   128,   129,    -1,   131,    -1,    -1,
      -1,   135,    -1,   137,   138,   139,   140,    -1,    -1,    -1,
     144,    -1,    -1,   147,   148,   149,    -1,    -1,    -1,   153,
      -1,   155,   156,    -1,   158,   159,   160,    -1,    -1,   163,
     164,    -1,   166,   167,   168,   169,   170,   171,    -1,    -1,
     174,   175,   176,    -1,    -1,   179,   180,    -1,   182,   183,
     184,    -1,    -1,   187,    -1,    -1,    -1,   191,    -1,   193,
      -1,   195,    -1,   197,   198,   199,   200,   201,   202,    -1,
     204,    -1,    -1,    -1,   208,   209,   210,    -1,   212,    -1,
      -1,   215,   216,    -1,    -1,    -1,   220,   221,   222,   223,
      -1,    -1,   226,   227,   228,    -1,   230,    -1,   232,    -1,
      -1,    -1,    -1,   237,   238,    -1,    -1,    -1,   242,    -1,
     244,   245,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,
      -1,   255,   256,   257,    -1,    -1,   260,    -1,    -1,   263,
     264,   265,    -1,    -1,    -1,    -1,   270,   271,    -1,   273,
      -1,   275,    -1,   277,   278,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,    -1,   303,
     304,   305,    -1,   307,   308,   309,   310,    -1,   312,   313,
      -1,    -1,    -1,    -1,   318,   319,   320,   321,   322,   323,
      -1,    -1,   326,   327,    -1,   329,    -1,   331,    -1,   333,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,    -1,
     344,   345,    -1,    -1,   348,   349,   350,   351,    -1,    -1,
      -1,   355,   356,    -1,    -1,    -1,    -1,   361,   362,   363,
      -1,   365,   366,   367,   368,    -1,   370,   371,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   380,   381,   382,    -1,
      -1,   385,    -1,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,    -1,    -1,   401,   402,   403,
      -1,   405,    -1,   407,   408,   409,   410,   411,    -1,   413,
     414,   415,    -1,    -1,   418,    -1,    -1,    -1,   422,   423,
     424,   425,   426,    -1,    -1,   429,   430,   431,   432,   433,
      -1,   435,   436,    -1,   438,   439,   440,    -1,    -1,   443,
      -1,   445,    -1,   447,   448,    -1,   450,   451,    -1,    -1,
      -1,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,    -1,   466,   467,    -1,    -1,    -1,   471,   472,   473,
     474,    -1,    -1,    -1,   478,    -1,    -1,    -1,   482,    -1,
     484,   485,   486,   487,   488,    -1,   490,   491,   492,   493,
     494,   495,    -1,    -1,    -1,    -1,    -1,    -1,   502,   503,
      -1,   505,    -1,    -1,   508,    -1,    -1,   511,   512,   513,
      -1,    -1,   516,   517,    -1,   519,   520,   521,   522,   523,
     524,    -1,    -1,   527,   528,   529,   530,    -1,   532,   533,
      -1,   535,    -1,   537,   538,   539,   540,    -1,   542,   543,
     544,    -1,   546,   547,   548,   549,    -1,    -1,    -1,    -1,
      -1,   555,   556,   557,    -1,    -1,    -1,   561,   562,   563,
     564,    -1,   566,   567,    -1,   569,   570,    -1,   572,   573,
      -1,    -1,   576,    -1,    -1,   579,    -1,   581,    -1,   583,
     584,   585,    -1,    -1,    -1,    -1,    -1,    -1,   592,    -1,
      -1,   595,    -1,    -1,    -1,   599,   600,   601,   602,   603,
     604,    -1,    -1,    -1,    -1,    -1,    -1,   611,   612,    -1,
     614,   615,   616,    -1,     5,   619,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      21,    -1,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    32,    -1,    -1,    -1,    36,    -1,    -1,    -1,    40,
      -1,    -1,    43,    44,    45,    -1,    47,    -1,    49,    50,
      -1,    -1,    53,    -1,    -1,    56,    57,    -1,    59,    60,
      -1,    62,    63,    -1,    65,    66,    67,    68,    69,    70,
      71,    -1,    73,    74,    75,    76,    77,    78,    79,    -1,
      81,    82,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    -1,    93,    94,    95,    96,    97,    -1,    99,    -1,
      -1,   102,    -1,    -1,   105,    -1,    -1,    -1,   109,    -1,
      -1,    -1,   113,   114,   115,    -1,    -1,   118,    -1,    -1,
      -1,    -1,   123,   124,    -1,    -1,    -1,    -1,   129,    -1,
     131,    -1,    -1,    -1,   135,    -1,   137,   138,   139,   140,
      -1,    -1,    -1,   144,    -1,    -1,   147,   148,   149,    -1,
      -1,    -1,   153,    -1,   155,   156,    -1,   158,   159,   160,
      -1,    -1,   163,   164,    -1,   166,   167,   168,   169,   170,
     171,    -1,    -1,   174,   175,   176,    -1,    -1,   179,   180,
      -1,   182,   183,   184,    -1,    -1,   187,    -1,    -1,    -1,
     191,    -1,   193,    -1,   195,    -1,   197,   198,   199,   200,
     201,   202,    -1,   204,    -1,    -1,    -1,   208,   209,   210,
      -1,   212,    -1,    -1,   215,   216,    -1,    -1,    -1,   220,
     221,   222,   223,    -1,    -1,   226,   227,   228,    -1,   230,
      -1,   232,    -1,    -1,    -1,    -1,   237,   238,    -1,    -1,
      -1,   242,    -1,   244,   245,    -1,   247,   248,    -1,    -1,
      -1,   252,    -1,    -1,   255,   256,   257,    -1,    -1,   260,
      -1,    -1,   263,   264,    -1,    -1,    -1,    -1,    -1,   270,
     271,    -1,   273,    -1,   275,    -1,   277,   278,    -1,    -1,
     281,    -1,    -1,    -1,    -1,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,    -1,   303,   304,   305,    -1,   307,   308,   309,   310,
      -1,   312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,
     321,   322,   323,    -1,    -1,   326,   327,    -1,   329,    -1,
     331,    -1,   333,   334,   335,   336,   337,   338,   339,   340,
     341,    -1,    -1,   344,   345,    -1,    -1,   348,   349,   350,
     351,    -1,    -1,    -1,   355,   356,    -1,    -1,   359,    -1,
     361,   362,   363,    -1,   365,   366,   367,   368,    -1,   370,
     371,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   380,
     381,   382,    -1,   384,   385,    -1,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,    -1,    -1,
     401,   402,   403,    -1,   405,    -1,   407,   408,   409,   410,
     411,    -1,   413,   414,   415,    -1,    -1,   418,    -1,    -1,
      -1,   422,   423,   424,   425,   426,    -1,    -1,   429,   430,
     431,   432,   433,    -1,   435,   436,    -1,   438,   439,   440,
      -1,    -1,   443,    -1,   445,    -1,   447,   448,    -1,   450,
     451,    -1,    -1,    -1,   455,   456,   457,   458,   459,   460,
     461,   462,   463,   464,    -1,   466,   467,    -1,    -1,    -1,
     471,   472,   473,   474,    -1,    -1,    -1,   478,    -1,    -1,
      -1,   482,    -1,   484,   485,   486,   487,   488,    -1,   490,
     491,   492,   493,   494,   495,    -1,    -1,    -1,    -1,    -1,
      -1,   502,   503,    -1,   505,    -1,    -1,   508,    -1,    -1,
     511,   512,   513,    -1,    -1,   516,   517,    -1,   519,   520,
     521,   522,   523,   524,    -1,    -1,   527,   528,   529,   530,
      -1,   532,   533,    -1,   535,    -1,   537,   538,   539,   540,
      -1,    -1,   543,   544,    -1,   546,   547,   548,   549,    -1,
      -1,    -1,    -1,    -1,   555,   556,   557,    -1,    -1,    -1,
     561,   562,   563,   564,   565,   566,   567,    -1,   569,   570,
      -1,   572,   573,    -1,    -1,   576,    -1,    -1,   579,    -1,
     581,    -1,   583,   584,   585,    -1,    -1,    -1,    -1,    -1,
      -1,   592,    -1,    -1,   595,    -1,    -1,    -1,   599,   600,
     601,   602,   603,   604,    -1,    -1,    -1,    -1,    -1,    -1,
     611,   612,    -1,   614,   615,   616,    -1,     5,   619,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,    -1,    -1,    21,    -1,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    32,    -1,    -1,    -1,    36,    -1,
      -1,    -1,    40,    -1,    -1,    43,    44,    45,    -1,    47,
      -1,    49,    50,    -1,    -1,    53,    -1,    -1,    56,    57,
      -1,    59,    60,    -1,    62,    63,    -1,    65,    66,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      78,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    -1,    90,    91,    -1,    93,    94,    95,    96,    97,
      -1,    99,    -1,    -1,   102,    -1,    -1,   105,    -1,   107,
      -1,   109,    -1,    -1,    -1,   113,   114,   115,    -1,    -1,
     118,    -1,    -1,    -1,    -1,   123,   124,    -1,    -1,    -1,
      -1,   129,    -1,   131,    -1,    -1,    -1,   135,    -1,   137,
     138,   139,   140,    -1,    -1,    -1,   144,    -1,    -1,   147,
     148,   149,    -1,    -1,    -1,   153,    -1,   155,   156,    -1,
     158,   159,   160,    -1,    -1,   163,   164,    -1,   166,   167,
     168,   169,   170,   171,    -1,    -1,   174,   175,   176,    -1,
      -1,   179,   180,    -1,   182,   183,   184,    -1,    -1,   187,
      -1,    -1,    -1,   191,    -1,   193,    -1,   195,    -1,   197,
     198,   199,   200,   201,   202,    -1,   204,    -1,    -1,    -1,
     208,   209,   210,    -1,   212,    -1,    -1,   215,   216,    -1,
      -1,    -1,   220,   221,   222,   223,    -1,    -1,   226,   227,
     228,    -1,   230,    -1,   232,    -1,    -1,    -1,    -1,   237,
     238,    -1,    -1,    -1,   242,    -1,   244,   245,    -1,   247,
     248,    -1,    -1,    -1,   252,    -1,    -1,   255,   256,   257,
      -1,    -1,   260,    -1,    -1,   263,   264,   265,    -1,    -1,
      -1,    -1,   270,   271,    -1,   273,    -1,   275,    -1,   277,
     278,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,    -1,   303,   304,   305,    -1,   307,
     308,   309,   310,    -1,   312,   313,    -1,    -1,    -1,    -1,
     318,   319,   320,   321,   322,   323,    -1,    -1,   326,   327,
      -1,   329,    -1,   331,    -1,   333,   334,   335,   336,   337,
     338,   339,   340,   341,    -1,    -1,   344,   345,    -1,    -1,
     348,   349,   350,   351,    -1,    -1,    -1,   355,   356,    -1,
      -1,    -1,    -1,   361,   362,   363,    -1,   365,   366,   367,
     368,    -1,   370,   371,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   380,   381,   382,    -1,    -1,   385,    -1,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,    -1,    -1,   401,   402,   403,    -1,   405,    -1,   407,
     408,   409,   410,   411,    -1,   413,   414,   415,    -1,    -1,
     418,    -1,    -1,    -1,   422,   423,   424,   425,   426,    -1,
      -1,   429,   430,   431,   432,   433,    -1,   435,   436,    -1,
     438,   439,   440,    -1,    -1,   443,    -1,   445,    -1,   447,
     448,    -1,   450,   451,    -1,    -1,    -1,   455,   456,   457,
     458,   459,   460,   461,   462,   463,   464,    -1,   466,   467,
      -1,    -1,    -1,   471,   472,   473,   474,    -1,    -1,    -1,
     478,    -1,    -1,    -1,   482,    -1,   484,   485,   486,   487,
     488,    -1,   490,   491,   492,   493,   494,   495,    -1,    -1,
      -1,    -1,    -1,    -1,   502,   503,    -1,   505,    -1,    -1,
     508,    -1,    -1,   511,   512,   513,    -1,    -1,   516,   517,
      -1,   519,   520,   521,   522,   523,   524,    -1,    -1,   527,
     528,   529,   530,    -1,   532,   533,    -1,   535,    -1,   537,
     538,   539,   540,    -1,   542,   543,   544,    -1,   546,   547,
     548,   549,    -1,    -1,    -1,    -1,    -1,   555,   556,   557,
      -1,    -1,    -1,   561,   562,   563,   564,    -1,   566,   567,
      -1,   569,   570,    -1,   572,   573,    -1,    -1,   576,    -1,
      -1,   579,    -1,   581,    -1,   583,   584,   585,    -1,    -1,
      -1,    -1,    -1,    -1,   592,    -1,    -1,   595,    -1,    -1,
      -1,   599,   600,   601,   602,   603,   604,    -1,    -1,    -1,
      -1,    -1,    -1,   611,   612,    -1,   614,   615,   616,    -1,
       5,   619,     7,     8,     9,    10,    11,    12,    -1,    14,
      -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,
      25,    26,    27,    28,    29,    30,    -1,    32,    -1,    -1,
      -1,    36,    -1,    -1,    -1,    40,    -1,    -1,    43,    44,
      45,    -1,    47,    -1,    49,    50,    -1,    -1,    53,    -1,
      -1,    56,    57,    -1,    59,    60,    -1,    62,    63,    -1,
      65,    66,    67,    68,    69,    70,    71,    -1,    73,    74,
      75,    76,    77,    78,    79,    -1,    81,    82,    83,    84,
      85,    86,    87,    88,    -1,    90,    91,    -1,    93,    94,
      95,    96,    97,    -1,    99,    -1,    -1,   102,    -1,    -1,
     105,    -1,    -1,    -1,   109,    -1,    -1,    -1,   113,   114,
     115,    -1,    -1,   118,    -1,    -1,    -1,    -1,   123,   124,
      -1,    -1,    -1,    -1,   129,    -1,   131,    -1,    -1,    -1,
     135,    -1,   137,   138,   139,   140,    -1,    -1,    -1,   144,
      -1,    -1,   147,   148,   149,    -1,    -1,    -1,   153,    -1,
     155,   156,    -1,   158,   159,   160,    -1,    -1,   163,   164,
      -1,   166,   167,   168,   169,   170,   171,    -1,    -1,   174,
     175,   176,    -1,    -1,   179,   180,    -1,   182,   183,   184,
      -1,    -1,   187,    -1,    -1,    -1,   191,    -1,   193,    -1,
     195,    -1,   197,   198,   199,   200,   201,   202,    -1,   204,
      -1,    -1,    -1,   208,   209,   210,    -1,   212,    -1,    -1,
     215,   216,    -1,    -1,    -1,   220,   221,   222,   223,    -1,
      -1,   226,   227,   228,    -1,   230,    -1,   232,    -1,    -1,
      -1,    -1,   237,   238,    -1,    -1,    -1,   242,    -1,   244,
     245,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,    -1,
     255,   256,   257,    -1,    -1,   260,    -1,    -1,   263,   264,
     265,    -1,    -1,    -1,    -1,   270,   271,    -1,   273,    -1,
     275,    -1,   277,   278,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,    -1,   303,   304,
     305,    -1,   307,   308,   309,   310,    -1,   312,   313,    -1,
      -1,    -1,    -1,   318,   319,   320,   321,   322,   323,    -1,
      -1,   326,   327,    -1,   329,    -1,   331,    -1,   333,   334,
     335,   336,   337,   338,   339,   340,   341,    -1,    -1,   344,
     345,    -1,    -1,   348,   349,   350,   351,    -1,    -1,    -1,
     355,   356,    -1,    -1,    -1,    -1,   361,   362,   363,    -1,
     365,   366,   367,   368,    -1,   370,   371,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   380,   381,   382,    -1,    -1,
     385,    -1,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,    -1,    -1,   401,   402,   403,    -1,
     405,    -1,   407,   408,   409,   410,   411,    -1,   413,   414,
     415,    -1,    -1,   418,    -1,    -1,    -1,   422,   423,   424,
     425,   426,    -1,    -1,   429,   430,   431,   432,   433,    -1,
     435,   436,    -1,   438,   439,   440,    -1,    -1,   443,    -1,
     445,    -1,   447,   448,    -1,   450,   451,    -1,    -1,    -1,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
      -1,   466,   467,    -1,    -1,    -1,   471,   472,   473,   474,
      -1,    -1,    -1,   478,    -1,    -1,    -1,   482,    -1,   484,
     485,   486,   487,   488,    -1,   490,   491,   492,   493,   494,
     495,    -1,    -1,    -1,    -1,    -1,    -1,   502,   503,    -1,
     505,    -1,    -1,   508,    -1,    -1,   511,   512,   513,    -1,
      -1,   516,   517,    -1,   519,   520,   521,   522,   523,   524,
      -1,    -1,   527,   528,   529,   530,    -1,   532,   533,    -1,
     535,    -1,   537,   538,   539,   540,    -1,   542,   543,   544,
      -1,   546,   547,   548,   549,    -1,    -1,    -1,    -1,    -1,
     555,   556,   557,    -1,    -1,    -1,   561,   562,   563,   564,
      -1,   566,   567,    -1,   569,   570,    -1,   572,   573,    -1,
      -1,   576,    -1,    -1,   579,    -1,   581,    -1,   583,   584,
     585,    -1,    -1,    -1,    -1,    -1,    -1,   592,    -1,    -1,
     595,    -1,    -1,    -1,   599,   600,   601,   602,   603,   604,
      -1,    -1,    -1,    -1,    -1,    -1,   611,   612,    -1,   614,
     615,   616,    -1,     5,   619,     7,     8,     9,    10,    11,
      -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,
      -1,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      32,    -1,    -1,    -1,    36,    37,    -1,    -1,    40,    -1,
      -1,    43,    44,    45,    -1,    47,    -1,    49,    50,    -1,
      -1,    53,    -1,    -1,    56,    57,    -1,    59,    60,    -1,
      62,    63,    -1,    65,    66,    67,    68,    69,    70,    71,
      -1,    73,    74,    75,    76,    77,    78,    79,    -1,    81,
      82,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      -1,    93,    94,    95,    96,    97,    -1,    99,    -1,    -1,
     102,    -1,    -1,   105,    -1,    -1,    -1,   109,    -1,    -1,
      -1,   113,   114,   115,    -1,    -1,   118,    -1,    -1,    -1,
      -1,   123,   124,    -1,    -1,    -1,    -1,   129,    -1,   131,
      -1,    -1,    -1,   135,    -1,   137,   138,   139,   140,    -1,
      -1,    -1,   144,    -1,    -1,   147,   148,   149,    -1,    -1,
      -1,   153,    -1,   155,   156,    -1,   158,   159,   160,    -1,
      -1,   163,   164,    -1,   166,   167,   168,   169,   170,   171,
      -1,    -1,   174,   175,   176,    -1,    -1,   179,   180,    -1,
     182,   183,   184,    -1,    -1,   187,    -1,    -1,    -1,   191,
      -1,   193,    -1,   195,    -1,   197,   198,   199,   200,   201,
     202,    -1,   204,    -1,    -1,    -1,   208,   209,   210,    -1,
     212,   213,    -1,   215,   216,    -1,    -1,    -1,   220,   221,
     222,   223,    -1,    -1,   226,   227,   228,    -1,   230,    -1,
     232,    -1,    -1,    -1,    -1,   237,   238,    -1,    -1,    -1,
     242,    -1,   244,   245,    -1,   247,   248,    -1,    -1,    -1,
     252,    -1,    -1,   255,   256,   257,    -1,    -1,   260,    -1,
      -1,   263,   264,    -1,    -1,    -1,    -1,    -1,   270,   271,
      -1,   273,    -1,   275,    -1,   277,   278,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
      -1,   303,   304,   305,    -1,   307,   308,   309,   310,    -1,
     312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,   321,
     322,   323,    -1,    -1,   326,   327,    -1,   329,    -1,   331,
      -1,   333,   334,   335,   336,   337,   338,   339,   340,   341,
      -1,    -1,   344,   345,    -1,    -1,   348,   349,   350,   351,
      -1,    -1,    -1,   355,   356,    -1,    -1,    -1,    -1,   361,
     362,   363,    -1,   365,   366,   367,   368,    -1,   370,   371,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   380,   381,
     382,    -1,    -1,   385,    -1,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,    -1,    -1,   401,
     402,   403,    -1,   405,    -1,   407,   408,   409,   410,   411,
      -1,   413,   414,   415,    -1,    -1,   418,    -1,    -1,    -1,
     422,   423,   424,   425,   426,    -1,    -1,   429,   430,   431,
     432,   433,    -1,   435,   436,    -1,   438,   439,   440,    -1,
      -1,   443,    -1,   445,    -1,   447,   448,    -1,   450,   451,
      -1,    -1,    -1,   455,   456,   457,   458,   459,   460,   461,
     462,   463,   464,    -1,   466,   467,    -1,    -1,    -1,   471,
     472,   473,   474,    -1,    -1,    -1,   478,    -1,    -1,    -1,
     482,    -1,   484,   485,   486,   487,   488,    -1,   490,   491,
     492,   493,   494,   495,    -1,    -1,    -1,    -1,    -1,    -1,
     502,   503,    -1,   505,    -1,    -1,   508,    -1,    -1,   511,
     512,   513,    -1,    -1,   516,   517,    -1,   519,   520,   521,
     522,   523,   524,    -1,    -1,   527,   528,   529,   530,    -1,
     532,   533,    -1,   535,    -1,   537,   538,   539,   540,    -1,
     542,   543,   544,    -1,   546,   547,   548,   549,    -1,    -1,
      -1,    -1,    -1,   555,   556,   557,    -1,    -1,    -1,   561,
     562,   563,   564,    -1,   566,   567,    -1,   569,   570,    -1,
     572,   573,    -1,    -1,   576,    -1,    -1,   579,    -1,   581,
      -1,   583,   584,   585,    -1,    -1,    -1,    -1,    -1,    -1,
     592,    -1,    -1,   595,    -1,    -1,    -1,   599,   600,   601,
     602,   603,   604,    -1,    -1,    -1,    -1,    -1,    -1,   611,
     612,    -1,   614,   615,   616,    -1,     5,   619,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      -1,    -1,    21,    -1,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    32,    -1,    -1,    -1,    36,    -1,    -1,
      -1,    40,    -1,    -1,    43,    44,    45,    -1,    47,    -1,
      49,    50,    -1,    -1,    53,    -1,    -1,    56,    57,    -1,
      59,    60,    -1,    62,    63,    -1,    65,    66,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    78,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    -1,    93,    94,    95,    96,    97,    -1,
      99,    -1,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,
     109,    -1,    -1,    -1,   113,   114,   115,    -1,    -1,   118,
      -1,    -1,    -1,    -1,   123,   124,    -1,    -1,    -1,   128,
     129,    -1,   131,    -1,    -1,    -1,   135,    -1,   137,   138,
     139,   140,    -1,    -1,    -1,   144,    -1,    -1,   147,   148,
     149,    -1,    -1,    -1,   153,    -1,   155,   156,    -1,   158,
     159,   160,    -1,    -1,   163,   164,    -1,   166,   167,   168,
     169,   170,   171,    -1,    -1,   174,   175,   176,    -1,    -1,
     179,   180,    -1,   182,   183,   184,    -1,    -1,   187,    -1,
      -1,    -1,   191,    -1,   193,    -1,   195,    -1,   197,   198,
     199,   200,   201,   202,    -1,   204,    -1,    -1,    -1,   208,
     209,   210,    -1,   212,    -1,    -1,   215,   216,    -1,    -1,
      -1,   220,   221,   222,   223,    -1,    -1,   226,   227,   228,
      -1,   230,    -1,   232,    -1,    -1,    -1,    -1,   237,   238,
      -1,    -1,    -1,   242,    -1,   244,   245,    -1,   247,   248,
      -1,    -1,    -1,   252,    -1,    -1,   255,   256,   257,    -1,
      -1,   260,    -1,    -1,   263,   264,   265,    -1,    -1,    -1,
      -1,   270,   271,    -1,   273,    -1,   275,    -1,   277,   278,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,    -1,   303,   304,   305,    -1,   307,   308,
     309,   310,    -1,   312,   313,    -1,    -1,    -1,    -1,   318,
     319,   320,   321,   322,   323,    -1,    -1,   326,   327,    -1,
     329,    -1,   331,    -1,   333,   334,   335,   336,   337,   338,
     339,   340,   341,    -1,    -1,   344,   345,    -1,    -1,   348,
     349,   350,   351,    -1,    -1,    -1,   355,   356,    -1,    -1,
      -1,    -1,   361,   362,   363,    -1,   365,   366,   367,   368,
      -1,   370,   371,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   380,   381,   382,    -1,    -1,   385,    -1,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
      -1,    -1,   401,   402,   403,    -1,   405,    -1,   407,   408,
     409,   410,   411,    -1,   413,   414,   415,    -1,    -1,   418,
      -1,    -1,    -1,   422,   423,   424,   425,   426,    -1,    -1,
     429,   430,   431,   432,   433,    -1,   435,   436,    -1,   438,
     439,   440,    -1,    -1,   443,    -1,   445,    -1,   447,   448,
      -1,   450,   451,    -1,    -1,    -1,   455,   456,   457,   458,
     459,   460,   461,   462,   463,   464,    -1,   466,   467,    -1,
      -1,    -1,   471,   472,   473,   474,    -1,    -1,    -1,   478,
      -1,    -1,    -1,   482,    -1,   484,   485,   486,   487,   488,
      -1,   490,   491,   492,   493,   494,   495,    -1,    -1,    -1,
      -1,    -1,    -1,   502,   503,    -1,   505,    -1,    -1,   508,
      -1,    -1,   511,   512,   513,    -1,    -1,   516,   517,    -1,
     519,   520,   521,   522,   523,   524,    -1,    -1,   527,   528,
     529,   530,    -1,   532,   533,    -1,   535,    -1,   537,   538,
     539,   540,    -1,   542,   543,   544,    -1,   546,   547,   548,
     549,    -1,    -1,    -1,    -1,    -1,   555,   556,   557,    -1,
      -1,    -1,   561,   562,   563,   564,    -1,   566,   567,    -1,
     569,   570,    -1,   572,   573,    -1,    -1,   576,    -1,    -1,
     579,    -1,   581,    -1,   583,   584,   585,    -1,    -1,    -1,
      -1,    -1,    -1,   592,    -1,    -1,   595,    -1,    -1,    -1,
     599,   600,   601,   602,   603,   604,    -1,    -1,    -1,    -1,
      -1,    -1,   611,   612,    -1,   614,   615,   616,    -1,     5,
     619,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,
      26,    27,    28,    29,    30,    -1,    32,    -1,    -1,    35,
      36,    -1,    -1,    -1,    40,    -1,    -1,    43,    44,    45,
      -1,    47,    -1,    49,    50,    -1,    -1,    53,    -1,    -1,
      56,    57,    -1,    59,    60,    -1,    62,    63,    -1,    65,
      66,    67,    68,    69,    70,    71,    -1,    73,    74,    75,
      76,    77,    78,    79,    -1,    81,    82,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    -1,    93,    94,    95,
      96,    97,    -1,    99,    -1,    -1,   102,    -1,    -1,   105,
      -1,    -1,    -1,   109,    -1,    -1,    -1,   113,   114,   115,
      -1,    -1,   118,    -1,    -1,    -1,    -1,   123,   124,    -1,
      -1,    -1,    -1,   129,    -1,   131,    -1,    -1,    -1,   135,
      -1,   137,   138,   139,   140,    -1,    -1,    -1,   144,    -1,
      -1,   147,   148,   149,    -1,    -1,    -1,   153,    -1,   155,
     156,    -1,   158,   159,   160,    -1,    -1,   163,   164,    -1,
     166,   167,   168,   169,   170,   171,    -1,    -1,   174,   175,
     176,    -1,    -1,   179,   180,    -1,   182,   183,   184,    -1,
      -1,   187,    -1,    -1,    -1,   191,    -1,   193,    -1,   195,
      -1,   197,   198,   199,   200,   201,   202,    -1,   204,    -1,
      -1,    -1,   208,   209,   210,    -1,   212,    -1,    -1,   215,
     216,    -1,    -1,    -1,   220,   221,   222,   223,    -1,    -1,
     226,   227,   228,    -1,   230,    -1,   232,    -1,    -1,    -1,
      -1,   237,   238,    -1,    -1,    -1,   242,    -1,   244,   245,
      -1,   247,   248,    -1,    -1,    -1,   252,    -1,    -1,   255,
     256,   257,    -1,    -1,   260,    -1,    -1,   263,   264,   265,
      -1,    -1,    -1,    -1,   270,   271,    -1,   273,    -1,   275,
      -1,   277,   278,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,    -1,   303,   304,   305,
      -1,   307,   308,   309,   310,    -1,   312,   313,    -1,    -1,
      -1,    -1,   318,   319,   320,   321,   322,   323,    -1,    -1,
     326,   327,    -1,   329,    -1,   331,    -1,   333,   334,   335,
     336,   337,   338,   339,   340,   341,    -1,    -1,   344,   345,
      -1,    -1,   348,   349,   350,   351,    -1,    -1,    -1,   355,
     356,    -1,    -1,    -1,    -1,   361,   362,   363,    -1,   365,
     366,   367,   368,    -1,   370,   371,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   380,   381,   382,    -1,    -1,   385,
      -1,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,    -1,    -1,   401,   402,   403,    -1,   405,
      -1,   407,   408,   409,   410,   411,    -1,   413,   414,   415,
      -1,    -1,   418,    -1,    -1,    -1,   422,   423,   424,   425,
     426,    -1,    -1,   429,   430,   431,   432,   433,    -1,   435,
     436,    -1,   438,   439,   440,    -1,    -1,   443,    -1,   445,
      -1,   447,   448,    -1,   450,   451,    -1,    -1,    -1,   455,
     456,   457,   458,   459,   460,   461,   462,   463,   464,    -1,
     466,   467,    -1,    -1,    -1,   471,   472,   473,   474,    -1,
      -1,    -1,   478,    -1,    -1,    -1,   482,    -1,   484,   485,
     486,   487,   488,    -1,   490,   491,   492,   493,   494,   495,
      -1,    -1,    -1,    -1,    -1,    -1,   502,   503,    -1,   505,
      -1,    -1,   508,    -1,    -1,   511,   512,   513,    -1,    -1,
     516,   517,    -1,   519,   520,   521,   522,   523,   524,    -1,
      -1,   527,   528,   529,   530,    -1,   532,   533,    -1,   535,
      -1,   537,   538,   539,   540,    -1,   542,   543,   544,    -1,
     546,   547,   548,   549,    -1,    -1,    -1,    -1,    -1,   555,
     556,   557,    -1,    -1,    -1,   561,   562,   563,   564,    -1,
     566,   567,    -1,   569,   570,    -1,   572,   573,    -1,    -1,
     576,    -1,    -1,   579,    -1,   581,    -1,   583,   584,   585,
      -1,    -1,    -1,    -1,    -1,    -1,   592,    -1,    -1,   595,
      -1,    -1,    -1,   599,   600,   601,   602,   603,   604,    -1,
      -1,    -1,    -1,    -1,    -1,   611,   612,    -1,   614,   615,
     616,    -1,     5,   619,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,
      23,    24,    25,    26,    27,    28,    29,    30,    -1,    32,
      -1,    -1,    -1,    36,    -1,    -1,    -1,    40,    -1,    -1,
      43,    44,    45,    -1,    47,    -1,    49,    50,    -1,    -1,
      53,    -1,    -1,    56,    57,    -1,    59,    60,    -1,    62,
      63,    -1,    65,    66,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    78,    79,    -1,    81,    82,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    -1,
      93,    94,    95,    96,    97,    -1,    99,    -1,    -1,   102,
      -1,    -1,   105,    -1,    -1,    -1,   109,    -1,    -1,    -1,
     113,   114,   115,    -1,    -1,   118,    -1,    -1,    -1,    -1,
     123,   124,    -1,    -1,    -1,    -1,   129,    -1,   131,    -1,
      -1,    -1,   135,    -1,   137,   138,   139,   140,    -1,    -1,
      -1,   144,    -1,    -1,   147,   148,   149,    -1,    -1,    -1,
     153,    -1,   155,   156,    -1,   158,   159,   160,    -1,    -1,
     163,   164,    -1,   166,   167,   168,   169,   170,   171,    -1,
      -1,   174,   175,   176,    -1,    -1,   179,   180,    -1,   182,
     183,   184,    -1,    -1,   187,    -1,    -1,    -1,   191,    -1,
     193,    -1,   195,    -1,   197,   198,   199,   200,   201,   202,
      -1,   204,    -1,    -1,    -1,   208,   209,   210,    -1,   212,
      -1,    -1,   215,   216,    -1,    -1,    -1,   220,   221,   222,
     223,    -1,    -1,   226,   227,   228,    -1,   230,    -1,   232,
      -1,    -1,    -1,    -1,   237,   238,    -1,    -1,    -1,   242,
      -1,   244,   245,    -1,   247,   248,    -1,    -1,    -1,   252,
      -1,    -1,   255,   256,   257,    -1,    -1,   260,    -1,    -1,
     263,   264,   265,    -1,    -1,    -1,    -1,   270,   271,    -1,
     273,    -1,   275,    -1,   277,   278,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,    -1,
     303,   304,   305,    -1,   307,   308,   309,   310,    -1,   312,
     313,    -1,    -1,    -1,    -1,   318,   319,   320,   321,   322,
     323,    -1,    -1,   326,   327,    -1,   329,    -1,   331,    -1,
     333,   334,   335,   336,   337,   338,   339,   340,   341,    -1,
      -1,   344,   345,    -1,    -1,   348,   349,   350,   351,    -1,
      -1,    -1,   355,   356,    -1,    -1,    -1,    -1,   361,   362,
     363,    -1,   365,   366,   367,   368,    -1,   370,   371,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   380,   381,   382,
      -1,    -1,   385,    -1,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,    -1,    -1,   401,   402,
     403,    -1,   405,    -1,   407,   408,   409,   410,   411,    -1,
     413,   414,   415,    -1,    -1,   418,    -1,    -1,    -1,   422,
     423,   424,   425,   426,    -1,    -1,   429,   430,   431,   432,
     433,    -1,   435,   436,    -1,   438,   439,   440,    -1,    -1,
     443,    -1,   445,    -1,   447,   448,    -1,   450,   451,    -1,
      -1,    -1,   455,   456,   457,   458,   459,   460,   461,   462,
     463,   464,    -1,   466,   467,    -1,    -1,    -1,   471,   472,
     473,   474,    -1,    -1,    -1,   478,    -1,    -1,    -1,   482,
      -1,   484,   485,   486,   487,   488,    -1,   490,   491,   492,
     493,   494,   495,    -1,    -1,    -1,    -1,    -1,    -1,   502,
     503,    -1,   505,    -1,    -1,   508,    -1,    -1,   511,   512,
     513,    -1,    -1,   516,   517,    -1,   519,   520,   521,   522,
     523,   524,    -1,    -1,   527,   528,   529,   530,    -1,   532,
     533,    -1,   535,    -1,   537,   538,   539,   540,    -1,   542,
     543,   544,    -1,   546,   547,   548,   549,    -1,    -1,    -1,
      -1,    -1,   555,   556,   557,    -1,    -1,    -1,   561,   562,
     563,   564,    -1,   566,   567,    -1,   569,   570,    -1,   572,
     573,    -1,    -1,   576,    -1,    -1,   579,    -1,   581,    -1,
     583,   584,   585,    -1,    -1,    -1,    -1,    -1,    -1,   592,
      -1,    -1,   595,    -1,    -1,    -1,   599,   600,   601,   602,
     603,   604,    -1,    -1,    -1,    -1,    -1,    -1,   611,   612,
      -1,   614,   615,   616,    -1,     5,   619,     7,     8,     9,
      10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,    19,
      -1,    21,    -1,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    -1,    -1,    -1,    36,    -1,    -1,    -1,
      40,    -1,    -1,    43,    44,    45,    -1,    47,    -1,    49,
      50,    -1,    -1,    53,    -1,    -1,    56,    57,    -1,    59,
      60,    -1,    62,    63,    -1,    65,    66,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    77,    78,    79,
      -1,    81,    82,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    -1,    93,    94,    95,    96,    97,    -1,    99,
      -1,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,   109,
      -1,    -1,    -1,   113,   114,   115,    -1,    -1,   118,    -1,
      -1,    -1,    -1,   123,   124,    -1,    -1,    -1,    -1,   129,
      -1,   131,    -1,    -1,    -1,   135,    -1,   137,   138,   139,
     140,    -1,    -1,    -1,   144,    -1,    -1,   147,   148,   149,
      -1,    -1,    -1,   153,    -1,   155,   156,    -1,   158,   159,
     160,    -1,    -1,   163,   164,    -1,   166,   167,   168,   169,
     170,   171,    -1,    -1,   174,   175,   176,    -1,    -1,   179,
     180,    -1,   182,   183,   184,    -1,    -1,   187,    -1,    -1,
      -1,   191,    -1,   193,    -1,   195,    -1,   197,   198,   199,
     200,   201,   202,    -1,   204,    -1,    -1,    -1,   208,   209,
     210,    -1,   212,    -1,    -1,   215,   216,    -1,    -1,    -1,
     220,   221,   222,   223,    -1,    -1,   226,   227,   228,    -1,
     230,    -1,   232,    -1,    -1,    -1,    -1,   237,   238,    -1,
      -1,    -1,   242,    -1,   244,   245,    -1,   247,   248,    -1,
      -1,    -1,   252,    -1,    -1,   255,   256,   257,    -1,    -1,
     260,    -1,    -1,   263,   264,    -1,    -1,    -1,    -1,    -1,
     270,   271,    -1,   273,    -1,   275,    -1,   277,   278,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,    -1,   303,   304,   305,    -1,   307,   308,   309,
     310,    -1,   312,   313,    -1,    -1,    -1,    -1,   318,   319,
     320,   321,   322,   323,    -1,    -1,   326,   327,    -1,   329,
      -1,   331,    -1,   333,   334,   335,   336,   337,   338,   339,
     340,   341,    -1,    -1,   344,   345,    -1,    -1,   348,   349,
     350,   351,    -1,    -1,    -1,   355,   356,    -1,    -1,    -1,
      -1,   361,   362,   363,    -1,   365,   366,   367,   368,    -1,
     370,   371,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     380,   381,   382,    -1,    -1,   385,    -1,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,    -1,
      -1,   401,   402,   403,    -1,   405,    -1,   407,   408,   409,
     410,   411,    -1,   413,   414,   415,    -1,    -1,   418,    -1,
      -1,    -1,   422,   423,   424,   425,   426,    -1,    -1,   429,
     430,   431,   432,   433,    -1,   435,   436,    -1,   438,   439,
     440,    -1,    -1,   443,    -1,   445,    -1,   447,   448,    -1,
     450,   451,    -1,    -1,    -1,   455,   456,   457,   458,   459,
     460,   461,   462,   463,   464,    -1,   466,   467,    -1,    -1,
      -1,   471,   472,   473,   474,    -1,    -1,    -1,   478,    -1,
      -1,    -1,   482,    -1,   484,   485,   486,   487,   488,    -1,
     490,   491,   492,   493,   494,   495,    -1,    -1,    -1,    -1,
      -1,    -1,   502,   503,    -1,   505,    -1,    -1,   508,    -1,
      -1,   511,   512,   513,    -1,    -1,   516,   517,    -1,   519,
     520,   521,   522,   523,   524,    -1,    -1,   527,   528,   529,
     530,    -1,   532,   533,    -1,   535,    -1,   537,   538,   539,
     540,    -1,   542,   543,   544,    -1,   546,   547,   548,   549,
      -1,    -1,    -1,    -1,    -1,   555,   556,   557,    -1,    -1,
      -1,   561,   562,   563,   564,    -1,   566,   567,    -1,   569,
     570,    -1,   572,   573,    -1,    -1,   576,    -1,    -1,   579,
      -1,   581,    -1,   583,   584,   585,    -1,    -1,    -1,    -1,
      -1,    -1,   592,    -1,    -1,   595,    -1,    -1,    -1,   599,
     600,   601,   602,   603,   604,    -1,    -1,    -1,    -1,    -1,
      -1,   611,   612,    -1,   614,   615,   616,    -1,     5,   619,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    32,    -1,    -1,    -1,    36,
      -1,    -1,    -1,    40,    -1,    -1,    43,    44,    45,    -1,
      47,    -1,    49,    50,    -1,    -1,    53,    -1,    -1,    56,
      57,    -1,    59,    60,    -1,    62,    63,    -1,    65,    66,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      77,    78,    79,    -1,    81,    82,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    -1,    93,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,    -1,    -1,   105,    -1,
      -1,    -1,   109,    -1,    -1,    -1,   113,   114,   115,    -1,
      -1,   118,    -1,    -1,    -1,    -1,   123,   124,    -1,    -1,
      -1,    -1,   129,    -1,   131,    -1,    -1,    -1,   135,    -1,
     137,   138,   139,   140,    -1,    -1,    -1,   144,    -1,    -1,
     147,   148,   149,    -1,    -1,    -1,   153,    -1,   155,   156,
      -1,   158,   159,   160,    -1,    -1,   163,   164,    -1,   166,
     167,   168,   169,   170,   171,    -1,   173,   174,   175,   176,
      -1,    -1,   179,   180,    -1,   182,   183,   184,    -1,    -1,
     187,    -1,    -1,    -1,   191,    -1,   193,    -1,   195,    -1,
     197,   198,   199,   200,   201,   202,    -1,   204,    -1,    -1,
      -1,   208,   209,   210,    -1,   212,    -1,    -1,   215,   216,
      -1,    -1,    -1,   220,   221,   222,   223,    -1,    -1,   226,
     227,   228,    -1,   230,    -1,   232,    -1,    -1,    -1,    -1,
     237,   238,    -1,    -1,    -1,   242,    -1,   244,   245,    -1,
     247,   248,    -1,    -1,    -1,   252,    -1,    -1,   255,   256,
     257,    -1,    -1,   260,    -1,    -1,   263,   264,    -1,    -1,
      -1,    -1,    -1,   270,   271,    -1,   273,    -1,   275,    -1,
     277,   278,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,    -1,   303,   304,   305,    -1,
     307,   308,   309,   310,    -1,   312,   313,    -1,    -1,    -1,
      -1,   318,   319,   320,   321,   322,   323,    -1,    -1,   326,
     327,    -1,   329,    -1,   331,    -1,   333,   334,   335,   336,
     337,   338,   339,   340,   341,    -1,    -1,   344,   345,    -1,
      -1,   348,   349,   350,   351,    -1,    -1,    -1,   355,   356,
      -1,    -1,    -1,    -1,   361,   362,   363,    -1,   365,   366,
     367,   368,    -1,   370,   371,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   380,   381,   382,    -1,    -1,   385,    -1,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,    -1,    -1,   401,   402,   403,    -1,   405,    -1,
     407,   408,   409,   410,   411,    -1,   413,   414,   415,    -1,
      -1,   418,    -1,    -1,    -1,   422,   423,   424,   425,   426,
      -1,    -1,   429,   430,   431,   432,   433,    -1,   435,   436,
      -1,   438,   439,   440,    -1,    -1,   443,    -1,   445,    -1,
     447,   448,    -1,   450,   451,    -1,    -1,    -1,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,    -1,   466,
     467,    -1,    -1,    -1,   471,   472,   473,   474,    -1,    -1,
      -1,   478,    -1,    -1,    -1,   482,    -1,   484,   485,   486,
     487,   488,    -1,   490,   491,   492,   493,   494,   495,    -1,
      -1,    -1,    -1,    -1,    -1,   502,   503,    -1,   505,    -1,
      -1,   508,    -1,    -1,   511,   512,   513,    -1,    -1,   516,
     517,    -1,   519,   520,   521,   522,   523,   524,    -1,    -1,
     527,   528,   529,   530,    -1,   532,   533,    -1,   535,    -1,
     537,   538,   539,   540,    -1,    -1,   543,   544,    -1,   546,
     547,   548,   549,    -1,    -1,    -1,    -1,    -1,   555,   556,
     557,    -1,    -1,    -1,   561,   562,   563,   564,    -1,   566,
     567,    -1,   569,   570,    -1,   572,   573,    -1,    -1,   576,
      -1,    -1,   579,    -1,   581,    -1,   583,   584,   585,    -1,
      -1,    -1,    -1,    -1,    -1,   592,    -1,    -1,   595,    -1,
      -1,    -1,   599,   600,   601,   602,   603,   604,    -1,    -1,
      -1,    -1,    -1,    -1,   611,   612,    -1,   614,   615,   616,
      -1,     5,   619,     7,     8,     9,    10,    11,    -1,    -1,
      14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    -1,
      -1,    -1,    36,    -1,    -1,    -1,    40,    -1,    -1,    43,
      44,    45,    -1,    47,    -1,    49,    50,    -1,    -1,    53,
      -1,    -1,    56,    57,    -1,    59,    60,    -1,    62,    63,
      -1,    65,    66,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    78,    79,    -1,    81,    82,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    -1,    93,
      94,    95,    96,    97,    -1,    99,    -1,    -1,   102,    -1,
      -1,   105,    -1,    -1,    -1,   109,    -1,    -1,    -1,   113,
     114,   115,    -1,    -1,   118,    -1,    -1,    -1,    -1,   123,
     124,    -1,    -1,    -1,    -1,   129,    -1,   131,    -1,    -1,
      -1,   135,    -1,   137,   138,   139,   140,    -1,    -1,    -1,
     144,    -1,    -1,   147,   148,   149,    -1,    -1,    -1,   153,
      -1,   155,   156,    -1,   158,   159,   160,    -1,    -1,   163,
     164,    -1,   166,   167,   168,   169,   170,   171,    -1,    -1,
     174,   175,   176,    -1,    -1,   179,   180,    -1,   182,   183,
     184,    -1,    -1,   187,    -1,    -1,    -1,   191,    -1,   193,
      -1,   195,    -1,   197,   198,   199,   200,   201,   202,    -1,
     204,    -1,    -1,    -1,   208,   209,   210,    -1,   212,    -1,
      -1,   215,   216,    -1,    -1,    -1,   220,   221,   222,   223,
      -1,    -1,   226,   227,   228,    -1,   230,    -1,   232,    -1,
      -1,    -1,    -1,   237,   238,    -1,    -1,    -1,   242,    -1,
     244,   245,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,
      -1,   255,   256,   257,    -1,    -1,   260,    -1,    -1,   263,
     264,    -1,    -1,    -1,    -1,    -1,   270,   271,    -1,   273,
      -1,   275,    -1,   277,   278,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,    -1,   303,
     304,   305,    -1,   307,   308,   309,   310,    -1,   312,   313,
      -1,    -1,    -1,    -1,   318,   319,   320,   321,   322,   323,
      -1,    -1,   326,   327,    -1,   329,    -1,   331,    -1,   333,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,    -1,
     344,   345,    -1,    -1,   348,   349,   350,   351,    -1,    -1,
      -1,   355,   356,    -1,    -1,    -1,    -1,   361,   362,   363,
      -1,   365,   366,   367,   368,    -1,   370,   371,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   380,   381,   382,    -1,
      -1,   385,    -1,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,    -1,    -1,   401,   402,   403,
      -1,   405,    -1,   407,   408,   409,   410,   411,    -1,   413,
     414,   415,    -1,    -1,   418,    -1,    -1,    -1,   422,   423,
     424,   425,   426,    -1,    -1,   429,   430,   431,   432,   433,
      -1,   435,   436,    -1,   438,   439,   440,    -1,    -1,   443,
      -1,   445,    -1,   447,   448,    -1,   450,   451,    -1,    -1,
      -1,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,    -1,   466,   467,    -1,    -1,    -1,   471,   472,   473,
     474,    -1,    -1,    -1,   478,    -1,    -1,    -1,   482,    -1,
     484,   485,   486,   487,   488,    -1,   490,   491,   492,   493,
     494,   495,    -1,    -1,    -1,   499,    -1,    -1,   502,   503,
      -1,   505,    -1,    -1,   508,    -1,    -1,   511,   512,   513,
      -1,    -1,   516,   517,    -1,   519,   520,   521,   522,   523,
     524,    -1,    -1,   527,   528,   529,   530,    -1,   532,   533,
      -1,   535,    -1,   537,   538,   539,   540,    -1,    -1,   543,
     544,    -1,   546,   547,   548,   549,    -1,    -1,    -1,    -1,
      -1,   555,   556,   557,    -1,    -1,    -1,   561,   562,   563,
     564,    -1,   566,   567,    -1,   569,   570,    -1,   572,   573,
      -1,    -1,   576,    -1,    -1,   579,    -1,   581,    -1,   583,
     584,   585,    -1,    -1,    -1,    -1,    -1,    -1,   592,    -1,
      -1,   595,    -1,    -1,    -1,   599,   600,   601,   602,   603,
     604,    -1,    -1,    -1,    -1,    -1,    -1,   611,   612,    -1,
     614,   615,   616,    -1,     5,   619,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      21,    -1,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    32,    -1,    -1,    -1,    36,    -1,    -1,    -1,    40,
      -1,    -1,    43,    44,    45,    -1,    47,    -1,    49,    50,
      -1,    -1,    53,    -1,    -1,    56,    57,    -1,    59,    60,
      -1,    62,    63,    -1,    65,    66,    67,    68,    69,    70,
      71,    -1,    73,    74,    75,    76,    77,    78,    79,    -1,
      81,    82,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    -1,    93,    94,    95,    96,    97,    -1,    99,    -1,
      -1,   102,    -1,    -1,   105,    -1,    -1,    -1,   109,    -1,
      -1,    -1,   113,   114,   115,    -1,    -1,   118,    -1,    -1,
      -1,    -1,   123,   124,    -1,    -1,    -1,    -1,   129,    -1,
     131,    -1,    -1,    -1,   135,    -1,   137,   138,   139,   140,
      -1,    -1,    -1,   144,    -1,    -1,   147,   148,   149,    -1,
      -1,    -1,   153,    -1,   155,   156,    -1,   158,   159,   160,
      -1,    -1,   163,   164,    -1,   166,   167,   168,   169,   170,
     171,    -1,    -1,   174,   175,   176,    -1,    -1,   179,   180,
      -1,   182,   183,   184,    -1,    -1,   187,    -1,    -1,    -1,
     191,   192,   193,    -1,   195,    -1,   197,   198,   199,   200,
     201,   202,    -1,   204,    -1,    -1,    -1,   208,   209,   210,
      -1,   212,    -1,    -1,   215,   216,    -1,    -1,    -1,   220,
     221,   222,   223,    -1,    -1,   226,   227,   228,    -1,   230,
      -1,   232,    -1,    -1,    -1,    -1,   237,   238,    -1,    -1,
      -1,   242,    -1,   244,   245,    -1,   247,   248,    -1,    -1,
      -1,   252,    -1,    -1,   255,   256,   257,    -1,    -1,   260,
      -1,    -1,   263,   264,    -1,    -1,    -1,    -1,    -1,   270,
     271,    -1,   273,    -1,   275,    -1,   277,   278,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,    -1,   303,   304,   305,    -1,   307,   308,   309,   310,
      -1,   312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,
     321,   322,   323,    -1,    -1,   326,   327,    -1,   329,    -1,
     331,    -1,   333,   334,   335,   336,   337,   338,   339,   340,
     341,    -1,    -1,   344,   345,    -1,    -1,   348,   349,   350,
     351,    -1,    -1,    -1,   355,   356,    -1,    -1,    -1,    -1,
     361,   362,   363,    -1,   365,   366,   367,   368,    -1,   370,
     371,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   380,
     381,   382,    -1,    -1,   385,    -1,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,    -1,    -1,
     401,   402,   403,    -1,   405,    -1,   407,   408,   409,   410,
     411,    -1,   413,   414,   415,    -1,    -1,   418,    -1,    -1,
      -1,   422,   423,   424,   425,   426,    -1,    -1,   429,   430,
     431,   432,   433,    -1,   435,   436,    -1,   438,   439,   440,
      -1,    -1,   443,    -1,   445,    -1,   447,   448,    -1,   450,
     451,    -1,    -1,    -1,   455,   456,   457,   458,   459,   460,
     461,   462,   463,   464,    -1,   466,   467,    -1,    -1,    -1,
     471,   472,   473,   474,    -1,    -1,    -1,   478,    -1,    -1,
      -1,   482,    -1,   484,   485,   486,   487,   488,    -1,   490,
     491,   492,   493,   494,   495,    -1,    -1,    -1,    -1,    -1,
      -1,   502,   503,    -1,   505,    -1,    -1,   508,    -1,    -1,
     511,   512,   513,    -1,    -1,   516,   517,    -1,   519,   520,
     521,   522,   523,   524,    -1,    -1,   527,   528,   529,   530,
      -1,   532,   533,    -1,   535,    -1,   537,   538,   539,   540,
      -1,    -1,   543,   544,    -1,   546,   547,   548,   549,    -1,
      -1,    -1,    -1,    -1,   555,   556,   557,    -1,    -1,    -1,
     561,   562,   563,   564,    -1,   566,   567,    -1,   569,   570,
      -1,   572,   573,    -1,    -1,   576,    -1,    -1,   579,    -1,
     581,    -1,   583,   584,   585,    -1,    -1,    -1,    -1,    -1,
      -1,   592,    -1,    -1,   595,    -1,    -1,    -1,   599,   600,
     601,   602,   603,   604,    -1,    -1,    -1,    -1,    -1,    -1,
     611,   612,    -1,   614,   615,   616,    -1,     5,   619,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,    -1,    -1,    21,    -1,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    32,    -1,    -1,    -1,    36,    -1,
      -1,    -1,    40,    -1,    -1,    43,    44,    45,    -1,    47,
      -1,    49,    50,    -1,    -1,    53,    -1,    -1,    56,    57,
      -1,    59,    60,    -1,    62,    63,    -1,    65,    66,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      78,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    -1,    90,    91,    -1,    93,    94,    95,    96,    97,
      -1,    99,    -1,    -1,   102,    -1,    -1,   105,    -1,    -1,
      -1,   109,    -1,    -1,    -1,   113,   114,   115,    -1,    -1,
     118,    -1,    -1,    -1,    -1,   123,   124,    -1,    -1,    -1,
     128,   129,    -1,   131,    -1,    -1,    -1,   135,    -1,   137,
     138,   139,   140,    -1,    -1,    -1,   144,    -1,    -1,   147,
     148,   149,    -1,    -1,    -1,   153,    -1,   155,   156,    -1,
     158,   159,   160,    -1,    -1,   163,   164,    -1,   166,   167,
     168,   169,   170,   171,    -1,    -1,   174,   175,   176,    -1,
      -1,   179,   180,    -1,   182,   183,   184,    -1,    -1,   187,
      -1,    -1,    -1,   191,    -1,   193,    -1,   195,    -1,   197,
     198,   199,   200,   201,   202,    -1,   204,    -1,    -1,    -1,
     208,   209,   210,    -1,   212,    -1,    -1,   215,   216,    -1,
      -1,    -1,   220,   221,   222,   223,    -1,    -1,   226,   227,
     228,    -1,   230,    -1,   232,    -1,    -1,    -1,    -1,   237,
     238,    -1,    -1,    -1,   242,    -1,   244,   245,    -1,   247,
     248,    -1,    -1,    -1,   252,    -1,    -1,   255,   256,   257,
      -1,    -1,   260,    -1,    -1,   263,   264,    -1,    -1,    -1,
      -1,    -1,   270,   271,    -1,   273,    -1,   275,    -1,   277,
     278,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,    -1,   303,   304,   305,    -1,   307,
     308,   309,   310,    -1,   312,   313,    -1,    -1,    -1,    -1,
     318,   319,   320,   321,   322,   323,    -1,    -1,   326,   327,
      -1,   329,    -1,   331,    -1,   333,   334,   335,   336,   337,
     338,   339,   340,   341,    -1,    -1,   344,   345,    -1,    -1,
     348,   349,   350,   351,    -1,    -1,    -1,   355,   356,    -1,
      -1,    -1,    -1,   361,   362,   363,    -1,   365,   366,   367,
     368,    -1,   370,   371,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   380,   381,   382,    -1,    -1,   385,    -1,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,    -1,    -1,   401,   402,   403,    -1,   405,    -1,   407,
     408,   409,   410,   411,    -1,   413,   414,   415,    -1,    -1,
     418,    -1,    -1,    -1,   422,   423,   424,   425,   426,    -1,
      -1,   429,   430,   431,   432,   433,    -1,   435,   436,    -1,
     438,   439,   440,    -1,    -1,   443,    -1,   445,    -1,   447,
     448,    -1,   450,   451,    -1,    -1,    -1,   455,   456,   457,
     458,   459,   460,   461,   462,   463,   464,    -1,   466,   467,
      -1,    -1,    -1,   471,   472,   473,   474,    -1,    -1,    -1,
     478,    -1,    -1,    -1,   482,    -1,   484,   485,   486,   487,
     488,    -1,   490,   491,   492,   493,   494,   495,    -1,    -1,
      -1,    -1,    -1,    -1,   502,   503,    -1,   505,    -1,    -1,
     508,    -1,    -1,   511,   512,   513,    -1,    -1,   516,   517,
      -1,   519,   520,   521,   522,   523,   524,    -1,    -1,   527,
     528,   529,   530,    -1,   532,   533,    -1,   535,    -1,   537,
     538,   539,   540,    -1,    -1,   543,   544,    -1,   546,   547,
     548,   549,    -1,    -1,    -1,    -1,    -1,   555,   556,   557,
      -1,    -1,    -1,   561,   562,   563,   564,    -1,   566,   567,
      -1,   569,   570,    -1,   572,   573,    -1,    -1,   576,    -1,
      -1,   579,    -1,   581,    -1,   583,   584,   585,    -1,    -1,
      -1,    -1,    -1,    -1,   592,    -1,    -1,   595,    -1,    -1,
      -1,   599,   600,   601,   602,   603,   604,    -1,    -1,    -1,
      -1,    -1,    -1,   611,   612,    -1,   614,   615,   616,    -1,
       5,   619,     7,     8,     9,    10,    11,    -1,    -1,    14,
      -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,
      25,    26,    27,    28,    29,    30,    -1,    32,    -1,    -1,
      -1,    36,    -1,    -1,    -1,    40,    -1,    -1,    43,    44,
      45,    -1,    47,    -1,    49,    50,    -1,    -1,    53,    -1,
      -1,    56,    57,    -1,    59,    60,    -1,    62,    63,    -1,
      65,    66,    67,    68,    69,    70,    71,    -1,    73,    74,
      75,    76,    77,    78,    79,    -1,    81,    82,    83,    84,
      85,    86,    87,    88,    -1,    90,    91,    -1,    93,    94,
      95,    96,    97,    -1,    99,    -1,    -1,   102,    -1,    -1,
     105,    -1,    -1,    -1,   109,    -1,    -1,    -1,   113,   114,
     115,    -1,    -1,   118,    -1,    -1,    -1,    -1,   123,   124,
      -1,    -1,    -1,   128,   129,    -1,   131,    -1,    -1,    -1,
     135,    -1,   137,   138,   139,   140,    -1,    -1,    -1,   144,
      -1,    -1,   147,   148,   149,    -1,    -1,    -1,   153,    -1,
     155,   156,    -1,   158,   159,   160,    -1,    -1,   163,   164,
      -1,   166,   167,   168,   169,   170,   171,    -1,    -1,   174,
     175,   176,    -1,    -1,   179,   180,    -1,   182,   183,   184,
      -1,    -1,   187,    -1,    -1,    -1,   191,    -1,   193,    -1,
     195,    -1,   197,   198,   199,   200,   201,   202,    -1,   204,
      -1,    -1,    -1,   208,   209,   210,    -1,   212,    -1,    -1,
     215,   216,    -1,    -1,    -1,   220,   221,   222,   223,    -1,
      -1,   226,   227,   228,    -1,   230,    -1,   232,    -1,    -1,
      -1,    -1,   237,   238,    -1,    -1,    -1,   242,    -1,   244,
     245,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,    -1,
     255,   256,   257,    -1,    -1,   260,    -1,    -1,   263,   264,
      -1,    -1,    -1,    -1,    -1,   270,   271,    -1,   273,    -1,
     275,    -1,   277,   278,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,    -1,   303,   304,
     305,    -1,   307,   308,   309,   310,    -1,   312,   313,    -1,
      -1,    -1,    -1,   318,   319,   320,   321,   322,   323,    -1,
      -1,   326,   327,    -1,   329,    -1,   331,    -1,   333,   334,
     335,   336,   337,   338,   339,   340,   341,    -1,    -1,   344,
     345,    -1,    -1,   348,   349,   350,   351,    -1,    -1,    -1,
     355,   356,    -1,    -1,    -1,    -1,   361,   362,   363,    -1,
     365,   366,   367,   368,    -1,   370,   371,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   380,   381,   382,    -1,    -1,
     385,    -1,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,    -1,    -1,   401,   402,   403,    -1,
     405,    -1,   407,   408,   409,   410,   411,    -1,   413,   414,
     415,    -1,    -1,   418,    -1,    -1,    -1,   422,   423,   424,
     425,   426,    -1,    -1,   429,   430,   431,   432,   433,    -1,
     435,   436,    -1,   438,   439,   440,    -1,    -1,   443,    -1,
     445,    -1,   447,   448,    -1,   450,   451,    -1,    -1,    -1,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
      -1,   466,   467,    -1,    -1,    -1,   471,   472,   473,   474,
      -1,    -1,    -1,   478,    -1,    -1,    -1,   482,    -1,   484,
     485,   486,   487,   488,    -1,   490,   491,   492,   493,   494,
     495,    -1,    -1,    -1,    -1,    -1,    -1,   502,   503,    -1,
     505,    -1,    -1,   508,    -1,    -1,   511,   512,   513,    -1,
      -1,   516,   517,    -1,   519,   520,   521,   522,   523,   524,
      -1,    -1,   527,   528,   529,   530,    -1,   532,   533,    -1,
     535,    -1,   537,   538,   539,   540,    -1,    -1,   543,   544,
      -1,   546,   547,   548,   549,    -1,    -1,    -1,    -1,    -1,
     555,   556,   557,    -1,    -1,    -1,   561,   562,   563,   564,
      -1,   566,   567,    -1,   569,   570,    -1,   572,   573,    -1,
      -1,   576,    -1,    -1,   579,    -1,   581,    -1,   583,   584,
     585,    -1,    -1,    -1,    -1,    -1,    -1,   592,    -1,    -1,
     595,    -1,    -1,    -1,   599,   600,   601,   602,   603,   604,
      -1,    -1,    -1,    -1,    -1,    -1,   611,   612,    -1,   614,
     615,   616,    -1,     5,   619,     7,     8,     9,    10,    11,
      -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,
      -1,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      32,    -1,    -1,    -1,    36,    -1,    -1,    -1,    40,    -1,
      -1,    43,    44,    45,    -1,    47,    -1,    49,    50,    -1,
      -1,    53,    -1,    -1,    56,    57,    -1,    59,    60,    -1,
      62,    63,    -1,    65,    66,    67,    68,    69,    70,    71,
      -1,    73,    74,    75,    76,    77,    78,    79,    -1,    81,
      82,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      -1,    93,    94,    95,    96,    97,    -1,    99,    -1,    -1,
     102,    -1,    -1,   105,    -1,    -1,    -1,   109,    -1,    -1,
      -1,   113,   114,   115,    -1,    -1,   118,    -1,    -1,    -1,
      -1,   123,   124,    -1,    -1,    -1,   128,   129,    -1,   131,
      -1,    -1,    -1,   135,    -1,   137,   138,   139,   140,    -1,
      -1,    -1,   144,    -1,    -1,   147,   148,   149,    -1,    -1,
      -1,   153,    -1,   155,   156,    -1,   158,   159,   160,    -1,
      -1,   163,   164,    -1,   166,   167,   168,   169,   170,   171,
      -1,    -1,   174,   175,   176,    -1,    -1,   179,   180,    -1,
     182,   183,   184,    -1,    -1,   187,    -1,    -1,    -1,   191,
      -1,   193,    -1,   195,    -1,   197,   198,   199,   200,   201,
     202,    -1,   204,    -1,    -1,    -1,   208,   209,   210,    -1,
     212,    -1,    -1,   215,   216,    -1,    -1,    -1,   220,   221,
     222,   223,    -1,    -1,   226,   227,   228,    -1,   230,    -1,
     232,    -1,    -1,    -1,    -1,   237,   238,    -1,    -1,    -1,
     242,    -1,   244,   245,    -1,   247,   248,    -1,    -1,    -1,
     252,    -1,    -1,   255,   256,   257,    -1,    -1,   260,    -1,
      -1,   263,   264,    -1,    -1,    -1,    -1,    -1,   270,   271,
      -1,   273,    -1,   275,    -1,   277,   278,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
      -1,   303,   304,   305,    -1,   307,   308,   309,   310,    -1,
     312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,   321,
     322,   323,    -1,    -1,   326,   327,    -1,   329,    -1,   331,
      -1,   333,   334,   335,   336,   337,   338,   339,   340,   341,
      -1,    -1,   344,   345,    -1,    -1,   348,   349,   350,   351,
      -1,    -1,    -1,   355,   356,    -1,    -1,    -1,    -1,   361,
     362,   363,    -1,   365,   366,   367,   368,    -1,   370,   371,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   380,   381,
     382,    -1,    -1,   385,    -1,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,    -1,    -1,   401,
     402,   403,    -1,   405,    -1,   407,   408,   409,   410,   411,
      -1,   413,   414,   415,    -1,    -1,   418,    -1,    -1,    -1,
     422,   423,   424,   425,   426,    -1,    -1,   429,   430,   431,
     432,   433,    -1,   435,   436,    -1,   438,   439,   440,    -1,
      -1,   443,    -1,   445,    -1,   447,   448,    -1,   450,   451,
      -1,    -1,    -1,   455,   456,   457,   458,   459,   460,   461,
     462,   463,   464,    -1,   466,   467,    -1,    -1,    -1,   471,
     472,   473,   474,    -1,    -1,    -1,   478,    -1,    -1,    -1,
     482,    -1,   484,   485,   486,   487,   488,    -1,   490,   491,
     492,   493,   494,   495,    -1,    -1,    -1,    -1,    -1,    -1,
     502,   503,    -1,   505,    -1,    -1,   508,    -1,    -1,   511,
     512,   513,    -1,    -1,   516,   517,    -1,   519,   520,   521,
     522,   523,   524,    -1,    -1,   527,   528,   529,   530,    -1,
     532,   533,    -1,   535,    -1,   537,   538,   539,   540,    -1,
      -1,   543,   544,    -1,   546,   547,   548,   549,    -1,    -1,
      -1,    -1,    -1,   555,   556,   557,    -1,    -1,    -1,   561,
     562,   563,   564,    -1,   566,   567,    -1,   569,   570,    -1,
     572,   573,    -1,    -1,   576,    -1,    -1,   579,    -1,   581,
      -1,   583,   584,   585,    -1,    -1,    -1,    -1,    -1,    -1,
     592,    -1,    -1,   595,    -1,    -1,    -1,   599,   600,   601,
     602,   603,   604,    -1,    -1,    -1,    -1,    -1,    -1,   611,
     612,    -1,   614,   615,   616,    -1,     5,   619,     7,     8,
       9,    10,    11,    12,    -1,    14,    -1,    -1,    -1,    18,
      -1,    -1,    21,    -1,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    32,    -1,    -1,    -1,    36,    -1,    -1,
      -1,    40,    -1,    -1,    43,    44,    45,    -1,    47,    -1,
      49,    50,    -1,    -1,    53,    -1,    -1,    56,    57,    -1,
      59,    60,    -1,    62,    63,    -1,    65,    66,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    78,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    -1,    93,    94,    95,    96,    97,    -1,
      99,    -1,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,
     109,    -1,    -1,    -1,   113,   114,   115,    -1,    -1,   118,
      -1,    -1,    -1,    -1,   123,   124,    -1,    -1,    -1,    -1,
     129,    -1,   131,    -1,    -1,    -1,   135,    -1,   137,   138,
     139,   140,    -1,    -1,    -1,   144,    -1,    -1,   147,   148,
     149,    -1,    -1,    -1,   153,    -1,   155,   156,    -1,   158,
     159,   160,    -1,    -1,   163,   164,    -1,   166,   167,   168,
     169,   170,   171,    -1,    -1,   174,   175,   176,    -1,    -1,
     179,   180,    -1,   182,   183,   184,    -1,    -1,   187,    -1,
      -1,    -1,   191,    -1,   193,    -1,   195,    -1,   197,   198,
     199,   200,   201,   202,    -1,   204,    -1,    -1,    -1,   208,
     209,   210,    -1,   212,    -1,    -1,   215,   216,    -1,    -1,
      -1,   220,   221,   222,   223,    -1,    -1,   226,   227,   228,
      -1,   230,    -1,   232,    -1,    -1,    -1,    -1,   237,   238,
      -1,    -1,    -1,   242,    -1,   244,   245,    -1,   247,   248,
      -1,    -1,    -1,   252,    -1,    -1,   255,   256,   257,    -1,
      -1,   260,    -1,    -1,   263,   264,    -1,    -1,    -1,    -1,
      -1,   270,   271,    -1,   273,    -1,   275,    -1,   277,   278,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,    -1,   303,   304,   305,    -1,   307,   308,
     309,   310,    -1,   312,   313,    -1,    -1,    -1,    -1,   318,
     319,   320,   321,   322,   323,    -1,    -1,   326,   327,    -1,
     329,    -1,   331,    -1,   333,   334,   335,   336,   337,   338,
     339,   340,   341,    -1,    -1,   344,   345,    -1,    -1,   348,
     349,   350,   351,    -1,    -1,    -1,   355,   356,    -1,    -1,
      -1,    -1,   361,   362,   363,    -1,   365,   366,   367,   368,
      -1,   370,   371,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   380,   381,   382,    -1,    -1,   385,    -1,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
      -1,    -1,   401,   402,   403,    -1,   405,    -1,   407,   408,
     409,   410,   411,    -1,   413,   414,   415,    -1,    -1,   418,
      -1,    -1,    -1,   422,   423,   424,   425,   426,    -1,    -1,
     429,   430,   431,   432,   433,    -1,   435,   436,    -1,   438,
     439,   440,    -1,    -1,   443,    -1,   445,    -1,   447,   448,
      -1,   450,   451,    -1,    -1,    -1,   455,   456,   457,   458,
     459,   460,   461,   462,   463,   464,    -1,   466,   467,    -1,
      -1,    -1,   471,   472,   473,   474,    -1,    -1,    -1,   478,
      -1,    -1,    -1,   482,    -1,   484,   485,   486,   487,   488,
      -1,   490,   491,   492,   493,   494,   495,    -1,    -1,    -1,
      -1,    -1,    -1,   502,   503,    -1,   505,    -1,    -1,   508,
      -1,    -1,   511,   512,   513,    -1,    -1,   516,   517,    -1,
     519,   520,   521,   522,   523,   524,    -1,    -1,   527,   528,
     529,   530,    -1,   532,   533,    -1,   535,    -1,   537,   538,
     539,   540,    -1,    -1,   543,   544,    -1,   546,   547,   548,
     549,    -1,    -1,    -1,    -1,    -1,   555,   556,   557,    -1,
      -1,    -1,   561,   562,   563,   564,    -1,   566,   567,    -1,
     569,   570,    -1,   572,   573,    -1,    -1,   576,    -1,    -1,
     579,    -1,   581,    -1,   583,   584,   585,    -1,    -1,    -1,
      -1,    -1,    -1,   592,    -1,    -1,   595,    -1,    -1,    -1,
     599,   600,   601,   602,   603,   604,    -1,    -1,    -1,    -1,
      -1,    -1,   611,   612,    -1,   614,   615,   616,    -1,     5,
     619,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,
      26,    27,    28,    29,    30,    -1,    32,    -1,    -1,    -1,
      36,    -1,    -1,    -1,    40,    -1,    -1,    43,    44,    45,
      -1,    47,    -1,    49,    50,    -1,    -1,    53,    -1,    -1,
      56,    57,    -1,    59,    60,    -1,    62,    63,    -1,    65,
      66,    67,    68,    69,    70,    71,    -1,    73,    74,    75,
      76,    77,    78,    79,    -1,    81,    82,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    -1,    93,    94,    95,
      96,    97,    -1,    99,    -1,    -1,   102,    -1,    -1,   105,
      -1,    -1,    -1,   109,    -1,    -1,    -1,   113,   114,   115,
      -1,    -1,   118,    -1,    -1,    -1,    -1,   123,   124,    -1,
      -1,    -1,    -1,   129,    -1,   131,    -1,    -1,    -1,   135,
      -1,   137,   138,   139,   140,    -1,    -1,    -1,   144,    -1,
      -1,   147,   148,   149,    -1,    -1,    -1,   153,    -1,   155,
     156,    -1,   158,   159,   160,    -1,    -1,   163,   164,    -1,
     166,   167,   168,   169,   170,   171,    -1,    -1,   174,   175,
     176,    -1,    -1,   179,   180,    -1,   182,   183,   184,    -1,
      -1,   187,    -1,    -1,    -1,   191,    -1,   193,    -1,   195,
      -1,   197,   198,   199,   200,   201,   202,    -1,   204,    -1,
      -1,    -1,   208,   209,   210,    -1,   212,    -1,    -1,   215,
     216,    -1,    -1,    -1,   220,   221,   222,   223,    -1,    -1,
     226,   227,   228,    -1,   230,    -1,   232,    -1,    -1,    -1,
      -1,   237,   238,    -1,    -1,    -1,   242,    -1,   244,   245,
      -1,   247,   248,    -1,    -1,    -1,   252,    -1,    -1,   255,
     256,   257,    -1,    -1,   260,    -1,    -1,   263,   264,    -1,
      -1,    -1,    -1,    -1,   270,   271,    -1,   273,    -1,   275,
      -1,   277,   278,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,    -1,   303,   304,   305,
      -1,   307,   308,   309,   310,    -1,   312,   313,    -1,    -1,
      -1,    -1,   318,   319,   320,   321,   322,   323,    -1,    -1,
     326,   327,    -1,   329,    -1,   331,    -1,   333,   334,   335,
     336,   337,   338,   339,   340,   341,    -1,    -1,   344,   345,
      -1,    -1,   348,   349,   350,   351,    -1,    -1,    -1,   355,
     356,    -1,    -1,    -1,    -1,   361,   362,   363,    -1,   365,
     366,   367,   368,    -1,   370,   371,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   380,   381,   382,    -1,    -1,   385,
      -1,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,    -1,    -1,   401,   402,   403,   404,   405,
      -1,   407,   408,   409,   410,   411,    -1,   413,   414,   415,
      -1,    -1,   418,    -1,    -1,    -1,   422,   423,   424,   425,
     426,    -1,    -1,   429,   430,   431,   432,   433,    -1,   435,
     436,    -1,   438,   439,   440,    -1,    -1,   443,    -1,   445,
      -1,   447,   448,    -1,   450,   451,    -1,    -1,    -1,   455,
     456,   457,   458,   459,   460,   461,   462,   463,   464,    -1,
     466,   467,    -1,    -1,    -1,   471,   472,   473,   474,    -1,
      -1,    -1,   478,    -1,    -1,    -1,   482,    -1,   484,   485,
     486,   487,   488,    -1,   490,   491,   492,   493,   494,   495,
      -1,    -1,    -1,    -1,    -1,    -1,   502,   503,    -1,   505,
      -1,    -1,   508,    -1,    -1,   511,   512,   513,    -1,    -1,
     516,   517,    -1,   519,   520,   521,   522,   523,   524,    -1,
      -1,   527,   528,   529,   530,    -1,   532,   533,    -1,   535,
      -1,   537,   538,   539,   540,    -1,    -1,   543,   544,    -1,
     546,   547,   548,   549,    -1,    -1,    -1,    -1,    -1,   555,
     556,   557,    -1,    -1,    -1,   561,   562,   563,   564,    -1,
     566,   567,    -1,   569,   570,    -1,   572,   573,    -1,    -1,
     576,    -1,    -1,   579,    -1,   581,    -1,   583,   584,   585,
      -1,    -1,    -1,    -1,    -1,    -1,   592,    -1,    -1,   595,
      -1,    -1,    -1,   599,   600,   601,   602,   603,   604,    -1,
      -1,    -1,    -1,    -1,    -1,   611,   612,    -1,   614,   615,
     616,    -1,     5,   619,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,
      23,    24,    25,    26,    27,    28,    29,    30,    -1,    32,
      -1,    -1,    -1,    36,    -1,    -1,    -1,    40,    -1,    -1,
      43,    44,    45,    -1,    47,    -1,    49,    50,    -1,    -1,
      53,    -1,    -1,    56,    57,    -1,    59,    60,    -1,    62,
      63,    -1,    65,    66,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    78,    79,    -1,    81,    82,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    -1,
      93,    94,    95,    96,    97,    -1,    99,    -1,    -1,   102,
      -1,    -1,   105,    -1,    -1,    -1,   109,    -1,    -1,    -1,
     113,   114,   115,    -1,    -1,   118,    -1,    -1,    -1,    -1,
     123,   124,    -1,    -1,    -1,    -1,   129,    -1,   131,    -1,
      -1,    -1,   135,    -1,   137,   138,   139,   140,    -1,    -1,
      -1,   144,    -1,    -1,   147,   148,   149,    -1,    -1,    -1,
     153,    -1,   155,   156,    -1,   158,   159,   160,    -1,    -1,
     163,   164,    -1,   166,   167,   168,   169,   170,   171,    -1,
      -1,   174,   175,   176,    -1,    -1,   179,   180,    -1,   182,
     183,   184,    -1,    -1,   187,    -1,    -1,    -1,   191,    -1,
     193,    -1,   195,    -1,   197,   198,   199,   200,   201,   202,
      -1,   204,    -1,    -1,    -1,   208,   209,   210,    -1,   212,
      -1,    -1,   215,   216,    -1,    -1,    -1,   220,   221,   222,
     223,    -1,    -1,   226,   227,   228,    -1,   230,    -1,   232,
      -1,    -1,    -1,    -1,   237,   238,    -1,    -1,    -1,   242,
      -1,   244,   245,    -1,   247,   248,    -1,    -1,    -1,   252,
      -1,    -1,   255,   256,   257,    -1,    -1,   260,    -1,    -1,
     263,   264,    -1,    -1,    -1,    -1,    -1,   270,   271,    -1,
     273,    -1,   275,    -1,   277,   278,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,    -1,
     303,   304,   305,    -1,   307,   308,   309,   310,    -1,   312,
     313,    -1,    -1,    -1,    -1,   318,   319,   320,   321,   322,
     323,    -1,    -1,   326,   327,    -1,   329,    -1,   331,    -1,
     333,   334,   335,   336,   337,   338,   339,   340,   341,    -1,
      -1,   344,   345,    -1,    -1,   348,   349,   350,   351,    -1,
      -1,    -1,   355,   356,    -1,    -1,    -1,    -1,   361,   362,
     363,    -1,   365,   366,   367,   368,    -1,   370,   371,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   380,   381,   382,
      -1,    -1,   385,    -1,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,    -1,    -1,   401,   402,
     403,    -1,   405,    -1,   407,   408,   409,   410,   411,    -1,
     413,   414,   415,    -1,    -1,   418,    -1,    -1,    -1,   422,
     423,   424,   425,   426,    -1,    -1,   429,   430,   431,   432,
     433,    -1,   435,   436,    -1,   438,   439,   440,    -1,    -1,
     443,    -1,   445,    -1,   447,   448,    -1,   450,   451,    -1,
      -1,    -1,   455,   456,   457,   458,   459,   460,   461,   462,
     463,   464,    -1,   466,   467,    -1,    -1,    -1,   471,   472,
     473,   474,    -1,    -1,    -1,   478,    -1,    -1,    -1,   482,
      -1,   484,   485,   486,   487,   488,    -1,   490,   491,   492,
     493,   494,   495,    -1,    -1,    -1,    -1,    -1,    -1,   502,
     503,    -1,   505,    -1,    -1,   508,    -1,    -1,   511,   512,
     513,    -1,    -1,   516,   517,    -1,   519,   520,   521,   522,
     523,   524,    -1,    -1,   527,   528,   529,   530,    -1,   532,
     533,    -1,   535,    -1,   537,   538,   539,   540,    -1,   542,
     543,   544,    -1,   546,   547,   548,   549,    -1,    -1,    -1,
      -1,    -1,   555,   556,   557,    -1,    -1,    -1,   561,   562,
     563,   564,    -1,   566,   567,    -1,   569,   570,    -1,   572,
     573,    -1,    -1,   576,    -1,    -1,   579,    -1,   581,    -1,
     583,   584,   585,    -1,    -1,    -1,    -1,    -1,    -1,   592,
      -1,    -1,   595,    -1,    -1,    -1,   599,   600,   601,   602,
     603,   604,    -1,    -1,    -1,    -1,    -1,    -1,   611,   612,
      -1,   614,   615,   616,    -1,     5,   619,     7,     8,     9,
      10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,
      -1,    21,    -1,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    32,    -1,    -1,    -1,    36,    -1,    -1,    -1,
      40,    -1,    -1,    43,    44,    45,    -1,    47,    -1,    49,
      50,    -1,    -1,    53,    -1,    -1,    56,    57,    -1,    59,
      60,    -1,    62,    63,    -1,    65,    66,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    77,    78,    79,
      -1,    81,    82,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    -1,    93,    94,    95,    96,    97,    -1,    99,
      -1,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,   109,
      -1,    -1,    -1,   113,   114,   115,    -1,    -1,   118,    -1,
      -1,    -1,    -1,   123,   124,    -1,    -1,    -1,    -1,   129,
      -1,   131,    -1,    -1,    -1,   135,    -1,   137,   138,   139,
     140,    -1,    -1,    -1,   144,    -1,    -1,   147,   148,   149,
      -1,    -1,    -1,   153,    -1,   155,   156,    -1,   158,   159,
     160,    -1,    -1,   163,   164,    -1,   166,   167,   168,   169,
     170,   171,    -1,    -1,   174,   175,   176,    -1,    -1,   179,
     180,    -1,   182,   183,   184,    -1,    -1,   187,    -1,    -1,
      -1,   191,    -1,   193,    -1,   195,    -1,   197,   198,   199,
     200,   201,   202,    -1,   204,    -1,    -1,    -1,   208,   209,
     210,    -1,   212,    -1,    -1,   215,   216,    -1,    -1,    -1,
     220,   221,   222,   223,    -1,    -1,   226,   227,   228,    -1,
     230,    -1,   232,    -1,    -1,    -1,    -1,   237,   238,    -1,
      -1,    -1,   242,    -1,   244,   245,    -1,   247,   248,    -1,
      -1,    -1,   252,    -1,    -1,   255,   256,   257,    -1,    -1,
     260,    -1,    -1,   263,   264,    -1,    -1,    -1,    -1,    -1,
     270,   271,    -1,   273,    -1,   275,    -1,   277,   278,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,    -1,   303,   304,   305,    -1,   307,   308,   309,
     310,    -1,   312,   313,    -1,    -1,    -1,    -1,   318,   319,
     320,   321,   322,   323,    -1,    -1,   326,   327,    -1,   329,
      -1,   331,    -1,   333,   334,   335,   336,   337,   338,   339,
     340,   341,    -1,    -1,   344,   345,    -1,    -1,   348,   349,
     350,   351,    -1,    -1,    -1,   355,   356,    -1,    -1,    -1,
      -1,   361,   362,   363,    -1,   365,   366,   367,   368,    -1,
     370,   371,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     380,   381,   382,    -1,    -1,   385,    -1,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,    -1,
      -1,   401,   402,   403,   404,   405,    -1,   407,   408,   409,
     410,   411,    -1,   413,   414,   415,    -1,    -1,   418,    -1,
      -1,    -1,   422,   423,   424,   425,   426,    -1,    -1,   429,
     430,   431,   432,   433,    -1,   435,   436,    -1,   438,   439,
     440,    -1,    -1,   443,    -1,   445,    -1,   447,   448,    -1,
     450,   451,    -1,    -1,    -1,   455,   456,   457,   458,   459,
     460,   461,   462,   463,   464,    -1,   466,   467,    -1,    -1,
      -1,   471,   472,   473,   474,    -1,    -1,    -1,   478,    -1,
      -1,    -1,   482,    -1,   484,   485,   486,   487,   488,    -1,
     490,   491,   492,   493,   494,   495,    -1,    -1,    -1,    -1,
      -1,    -1,   502,   503,    -1,   505,    -1,    -1,   508,    -1,
      -1,   511,   512,   513,    -1,    -1,   516,   517,    -1,   519,
     520,   521,   522,   523,   524,    -1,    -1,   527,   528,   529,
     530,    -1,   532,   533,    -1,   535,    -1,   537,   538,   539,
     540,    -1,    -1,   543,   544,    -1,   546,   547,   548,   549,
      -1,    -1,    -1,    -1,    -1,   555,   556,   557,    -1,    -1,
      -1,   561,   562,   563,   564,    -1,   566,   567,    -1,   569,
     570,    -1,   572,   573,    -1,    -1,   576,    -1,    -1,   579,
      -1,   581,    -1,   583,   584,   585,    -1,    -1,    -1,    -1,
      -1,    -1,   592,    -1,    -1,   595,    -1,    -1,    -1,   599,
     600,   601,   602,   603,   604,    -1,    -1,    -1,    -1,    -1,
      -1,   611,   612,    -1,   614,   615,   616,    -1,     5,   619,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    32,    -1,    -1,    -1,    36,
      -1,    -1,    -1,    40,    -1,    -1,    43,    44,    45,    -1,
      47,    -1,    49,    50,    -1,    -1,    53,    -1,    -1,    56,
      57,    -1,    59,    60,    -1,    62,    63,    -1,    65,    66,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      77,    78,    79,    -1,    81,    82,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    -1,    93,    94,    95,    96,
      97,    -1,    99,    -1,    -1,   102,    -1,    -1,   105,    -1,
      -1,    -1,   109,    -1,    -1,    -1,   113,   114,   115,    -1,
      -1,   118,    -1,    -1,    -1,    -1,   123,   124,    -1,    -1,
      -1,    -1,   129,    -1,   131,    -1,    -1,    -1,   135,    -1,
     137,   138,   139,   140,    -1,    -1,    -1,   144,    -1,    -1,
     147,   148,   149,    -1,    -1,    -1,   153,    -1,   155,   156,
      -1,   158,   159,   160,    -1,    -1,   163,   164,    -1,   166,
     167,   168,   169,   170,   171,    -1,    -1,   174,   175,   176,
      -1,    -1,   179,   180,    -1,   182,   183,   184,    -1,    -1,
     187,    -1,    -1,    -1,   191,    -1,   193,    -1,   195,    -1,
     197,   198,   199,   200,   201,   202,    -1,   204,    -1,    -1,
      -1,   208,   209,   210,    -1,   212,    -1,    -1,   215,   216,
      -1,    -1,    -1,   220,   221,   222,   223,    -1,    -1,   226,
     227,   228,    -1,   230,    -1,   232,    -1,    -1,    -1,    -1,
     237,   238,    -1,    -1,    -1,   242,    -1,   244,   245,    -1,
     247,   248,    -1,    -1,    -1,   252,    -1,    -1,   255,   256,
     257,    -1,    -1,   260,    -1,    -1,   263,   264,    -1,    -1,
      -1,    -1,    -1,   270,   271,    -1,   273,    -1,   275,    -1,
     277,   278,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,    -1,   303,   304,   305,    -1,
     307,   308,   309,   310,    -1,   312,   313,    -1,    -1,    -1,
      -1,   318,   319,   320,   321,   322,   323,    -1,    -1,   326,
     327,    -1,   329,    -1,   331,    -1,   333,   334,   335,   336,
     337,   338,   339,   340,   341,    -1,    -1,   344,   345,    -1,
      -1,   348,   349,   350,   351,    -1,    -1,    -1,   355,   356,
      -1,    -1,    -1,    -1,   361,   362,   363,    -1,   365,   366,
     367,   368,    -1,   370,   371,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   380,   381,   382,    -1,    -1,   385,    -1,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,    -1,    -1,   401,   402,   403,    -1,   405,    -1,
     407,   408,   409,   410,   411,    -1,   413,   414,   415,    -1,
      -1,   418,    -1,    -1,    -1,   422,   423,   424,   425,   426,
      -1,    -1,   429,   430,   431,   432,   433,    -1,   435,   436,
      -1,   438,   439,   440,    -1,    -1,   443,    -1,   445,    -1,
     447,   448,    -1,   450,   451,    -1,    -1,    -1,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,    -1,   466,
     467,    -1,    -1,    -1,   471,   472,   473,   474,    -1,    -1,
      -1,   478,    -1,    -1,    -1,   482,    -1,   484,   485,   486,
     487,   488,    -1,   490,   491,   492,   493,   494,   495,    -1,
      -1,    -1,    -1,    -1,    -1,   502,   503,    -1,   505,    -1,
      -1,   508,    -1,    -1,   511,   512,   513,    -1,    -1,   516,
     517,    -1,   519,   520,   521,   522,   523,   524,    -1,    -1,
     527,   528,   529,   530,    -1,   532,   533,    -1,   535,    -1,
     537,   538,   539,   540,    -1,    -1,   543,   544,    -1,   546,
     547,   548,   549,    -1,    -1,    -1,    -1,    -1,   555,   556,
     557,    -1,    -1,    -1,   561,   562,   563,   564,    -1,   566,
     567,    -1,   569,   570,    -1,   572,   573,    -1,    -1,   576,
      -1,    -1,   579,    -1,   581,    -1,   583,   584,   585,    -1,
      -1,    -1,    -1,    -1,    -1,   592,    -1,    -1,   595,    -1,
      -1,    -1,   599,   600,   601,   602,   603,   604,    -1,    -1,
      -1,    -1,    -1,    -1,   611,   612,    -1,   614,   615,   616,
      -1,     5,   619,     7,     8,     9,    10,    11,    -1,    -1,
      14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    32,    -1,
      -1,    -1,    36,    -1,    -1,    -1,    40,    -1,    -1,    43,
      44,    45,    -1,    47,    -1,    49,    50,    -1,    -1,    53,
      -1,    -1,    56,    57,    -1,    59,    60,    -1,    62,    63,
      -1,    65,    66,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    78,    79,    -1,    81,    82,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    -1,    93,
      94,    95,    96,    97,    -1,    99,    -1,    -1,   102,    -1,
      -1,   105,    -1,    -1,    -1,   109,    -1,    -1,    -1,   113,
     114,   115,    -1,    -1,   118,    -1,    -1,    -1,    -1,   123,
     124,    -1,    -1,    -1,    -1,   129,    -1,   131,    -1,    -1,
      -1,   135,    -1,   137,   138,   139,   140,    -1,    -1,    -1,
     144,    -1,    -1,   147,   148,   149,    -1,    -1,    -1,   153,
      -1,   155,   156,    -1,   158,   159,   160,    -1,    -1,   163,
     164,    -1,   166,   167,   168,   169,   170,   171,    -1,    -1,
     174,   175,   176,    -1,    -1,   179,   180,    -1,   182,   183,
     184,    -1,    -1,   187,    -1,    -1,    -1,   191,    -1,   193,
      -1,   195,    -1,   197,   198,   199,   200,   201,   202,    -1,
     204,    -1,    -1,    -1,   208,   209,   210,    -1,   212,    -1,
      -1,   215,   216,    -1,    -1,    -1,   220,   221,   222,   223,
      -1,    -1,   226,   227,   228,    -1,   230,    -1,   232,    -1,
      -1,    -1,    -1,   237,   238,    -1,    -1,    -1,   242,    -1,
     244,   245,    -1,   247,   248,    -1,    -1,    -1,   252,    -1,
      -1,   255,   256,   257,    -1,    -1,   260,    -1,    -1,   263,
     264,    -1,    -1,    -1,    -1,    -1,   270,   271,    -1,   273,
      -1,   275,    -1,   277,   278,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,    -1,   303,
     304,   305,    -1,   307,   308,   309,   310,    -1,   312,   313,
      -1,    -1,    -1,    -1,   318,   319,   320,   321,   322,   323,
      -1,    -1,   326,   327,    -1,   329,    -1,   331,    -1,   333,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,    -1,
     344,   345,    -1,    -1,   348,   349,   350,   351,    -1,    -1,
      -1,   355,   356,    -1,    -1,    -1,    -1,   361,   362,   363,
      -1,   365,   366,   367,   368,    -1,   370,   371,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   380,   381,   382,    -1,
      -1,   385,    -1,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,    -1,    -1,   401,   402,   403,
      -1,   405,    -1,   407,   408,   409,   410,   411,    -1,   413,
     414,   415,    -1,    -1,   418,    -1,    -1,    -1,   422,   423,
     424,   425,   426,    -1,    -1,   429,   430,   431,   432,   433,
      -1,   435,   436,    -1,   438,   439,   440,    -1,    -1,   443,
      -1,   445,    -1,   447,   448,    -1,   450,   451,    -1,    -1,
      -1,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,    -1,   466,   467,    -1,    -1,    -1,   471,   472,   473,
     474,    -1,    -1,    -1,   478,    -1,    -1,    -1,   482,    -1,
     484,   485,   486,   487,   488,    -1,   490,   491,   492,   493,
     494,   495,    -1,    -1,    -1,    -1,    -1,    -1,   502,   503,
      -1,   505,    -1,    -1,   508,    -1,    -1,   511,   512,   513,
      -1,    -1,   516,   517,    -1,   519,   520,   521,   522,   523,
     524,    -1,    -1,   527,   528,   529,   530,    -1,   532,   533,
      -1,   535,    -1,   537,   538,   539,   540,    -1,    -1,   543,
     544,    -1,   546,   547,   548,   549,    -1,    -1,    -1,    -1,
      -1,   555,   556,   557,    -1,    -1,    -1,   561,   562,   563,
     564,    -1,   566,   567,    -1,   569,   570,    -1,   572,   573,
      -1,    -1,   576,    -1,    -1,   579,    -1,   581,    -1,   583,
     584,   585,    -1,    -1,    -1,    -1,    -1,    -1,   592,    -1,
      -1,   595,    -1,    -1,    -1,   599,   600,   601,   602,   603,
     604,    -1,    -1,    -1,    -1,    -1,    -1,   611,   612,    -1,
     614,   615,   616,    -1,     5,   619,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      -1,    -1,    23,    24,    25,    26,    27,    28,    29,    -1,
      -1,    32,    -1,    -1,    -1,    36,    -1,    -1,    -1,    40,
      -1,    -1,    43,    44,    45,    -1,    47,    -1,    -1,    -1,
      -1,    -1,    53,    54,    -1,    56,    57,    -1,    59,    -1,
      -1,    -1,    -1,    -1,    65,    66,    67,    68,    69,    70,
      71,    -1,    73,    74,    -1,    -1,    -1,    -1,    -1,    -1,
      81,    -1,    83,    -1,    85,    86,    87,    88,    -1,    90,
      91,    -1,    93,    94,    95,    -1,    97,    -1,    99,    -1,
      -1,   102,    -1,    -1,   105,    -1,    -1,    -1,   109,    -1,
      -1,    -1,   113,   114,   115,    -1,    -1,   118,    -1,    -1,
      -1,    -1,   123,    -1,    -1,    -1,    -1,    -1,   129,    -1,
     131,    -1,    -1,    -1,   135,    -1,   137,   138,   139,   140,
      -1,    -1,    -1,    -1,    -1,    -1,   147,   148,   149,    -1,
     151,   152,   153,    -1,   155,   156,    -1,   158,   159,   160,
      -1,    -1,   163,   164,    -1,   166,   167,   168,   169,    -1,
      -1,    -1,    -1,   174,   175,   176,    -1,    -1,   179,   180,
     181,   182,   183,   184,    -1,    -1,    -1,    -1,    -1,    -1,
     191,    -1,   193,    -1,   195,    -1,   197,   198,   199,   200,
     201,   202,    -1,   204,    -1,    -1,    -1,    -1,   209,   210,
      -1,    -1,    -1,    -1,    -1,   216,    -1,    -1,    -1,   220,
     221,   222,   223,   224,    -1,   226,   227,   228,    -1,   230,
      -1,   232,    -1,    -1,    -1,    -1,   237,    -1,    -1,    -1,
      -1,   242,    -1,   244,   245,    -1,   247,   248,   249,    -1,
      -1,   252,    -1,    -1,    -1,   256,   257,    -1,    -1,   260,
     261,    -1,   263,   264,    -1,    -1,    -1,    -1,    -1,   270,
     271,    -1,   273,    -1,   275,    -1,   277,   278,    -1,    -1,
      -1,    -1,   283,    -1,    -1,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,    -1,   303,   304,   305,    -1,   307,   308,   309,   310,
      -1,   312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,
     321,   322,   323,    -1,    -1,   326,   327,    -1,   329,    -1,
     331,    -1,   333,   334,   335,   336,   337,   338,   339,   340,
     341,    -1,    -1,   344,   345,    -1,    -1,   348,   349,   350,
     351,    -1,    -1,    -1,    -1,   356,    -1,    -1,    -1,    -1,
     361,   362,   363,    -1,   365,   366,   367,   368,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     381,   382,    -1,    -1,    -1,    -1,   387,   388,   389,    -1,
     391,   392,   393,   394,   395,   396,   397,    -1,    -1,    -1,
      -1,   402,   403,    -1,   405,    -1,   407,   408,   409,   410,
     411,    -1,   413,   414,   415,    -1,    -1,   418,    -1,    -1,
      -1,   422,   423,   424,   425,   426,    -1,    -1,   429,   430,
     431,   432,   433,    -1,   435,    -1,    -1,   438,    -1,   440,
     441,    -1,   443,    -1,    -1,    -1,   447,    -1,    -1,   450,
     451,   452,    -1,    -1,    -1,   456,   457,   458,   459,   460,
     461,    -1,   463,   464,    -1,   466,    -1,    -1,    -1,    -1,
     471,   472,   473,    -1,    -1,    -1,    -1,   478,    -1,    -1,
      -1,   482,    -1,    -1,   485,    -1,    -1,   488,    -1,   490,
      -1,   492,    -1,   494,   495,    -1,    -1,    -1,    -1,    -1,
      -1,   502,   503,    -1,   505,    -1,    -1,   508,    -1,    -1,
     511,    -1,   513,    -1,    -1,    -1,   517,    -1,   519,   520,
     521,   522,   523,   524,    -1,    -1,   527,   528,   529,   530,
      -1,   532,   533,    -1,   535,    -1,   537,   538,   539,   540,
      -1,    -1,   543,   544,    -1,   546,   547,   548,   549,    -1,
      -1,    -1,    -1,    -1,   555,   556,   557,    -1,    -1,    -1,
      -1,   562,   563,   564,    -1,   566,   567,    -1,   569,   570,
      -1,    -1,    -1,    -1,    -1,   576,    -1,    -1,   579,    -1,
      -1,    -1,   583,   584,   585,    -1,    -1,    -1,    -1,    -1,
      -1,   592,    -1,    -1,   595,    -1,    -1,    -1,   599,   600,
     601,   602,   603,   604,    -1,    -1,   607,    -1,    -1,    -1,
     611,    -1,    -1,   614,    -1,   616,    -1,     5,   619,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,    -1,    -1,    -1,    -1,    23,    24,    25,    26,    27,
      28,    29,    -1,    -1,    32,    -1,    -1,    -1,    36,    -1,
      -1,    -1,    40,    -1,    -1,    43,    44,    45,    -1,    47,
      -1,    -1,    -1,    -1,    -1,    53,    54,    -1,    56,    57,
      -1,    59,    -1,    -1,    -1,    -1,    -1,    65,    66,    67,
      68,    69,    70,    71,    -1,    73,    74,    -1,    -1,    -1,
      -1,    -1,    -1,    81,    -1,    83,    -1,    85,    86,    87,
      88,    -1,    90,    91,    -1,    93,    94,    95,    -1,    97,
      -1,    99,    -1,    -1,   102,    -1,    -1,   105,    -1,    -1,
      -1,   109,    -1,    -1,    -1,   113,   114,   115,    -1,    -1,
     118,    -1,    -1,    -1,    -1,   123,    -1,    -1,    -1,    -1,
      -1,   129,    -1,   131,    -1,    -1,    -1,   135,    -1,   137,
     138,   139,   140,    -1,    -1,    -1,    -1,    -1,    -1,   147,
     148,   149,    -1,   151,    -1,   153,    -1,   155,   156,    -1,
     158,   159,   160,    -1,    -1,   163,   164,    -1,   166,   167,
     168,   169,    -1,    -1,    -1,    -1,   174,   175,   176,    -1,
      -1,   179,   180,   181,   182,   183,   184,    -1,    -1,    -1,
      -1,    -1,    -1,   191,    -1,   193,    -1,   195,    -1,   197,
     198,   199,   200,   201,   202,    -1,   204,    -1,    -1,    -1,
      -1,   209,   210,    -1,    -1,    -1,    -1,    -1,   216,    -1,
      -1,    -1,   220,   221,   222,   223,   224,    -1,   226,   227,
     228,    -1,   230,    -1,   232,    -1,    -1,    -1,    -1,   237,
      -1,    -1,    -1,    -1,   242,    -1,   244,   245,    -1,   247,
     248,   249,    -1,    -1,   252,    -1,    -1,    -1,   256,   257,
      -1,    -1,   260,   261,    -1,   263,   264,    -1,    -1,    -1,
      -1,    -1,   270,   271,    -1,   273,    -1,   275,    -1,   277,
     278,    -1,    -1,    -1,    -1,   283,    -1,    -1,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,    -1,   303,   304,   305,    -1,   307,
     308,   309,   310,    -1,   312,   313,    -1,    -1,    -1,    -1,
     318,   319,   320,   321,   322,   323,    -1,    -1,   326,   327,
      -1,   329,    -1,   331,    -1,   333,   334,   335,   336,   337,
     338,   339,   340,   341,    -1,    -1,   344,   345,    -1,    -1,
     348,   349,   350,   351,    -1,    -1,    -1,    -1,   356,    -1,
      -1,    -1,    -1,   361,   362,   363,    -1,   365,   366,   367,
     368,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   381,   382,    -1,    -1,    -1,    -1,   387,
     388,   389,    -1,   391,   392,   393,   394,   395,   396,   397,
      -1,    -1,    -1,    -1,   402,   403,    -1,   405,    -1,   407,
     408,   409,   410,   411,    -1,   413,   414,   415,    -1,    -1,
     418,    -1,    -1,    -1,   422,   423,   424,   425,   426,    -1,
      -1,   429,   430,   431,   432,   433,    -1,   435,    -1,    -1,
     438,    -1,   440,   441,    -1,   443,    -1,    -1,    -1,   447,
      -1,    -1,   450,   451,   452,    -1,    -1,    -1,   456,   457,
     458,   459,   460,   461,    -1,   463,   464,    -1,   466,    -1,
      -1,    -1,    -1,   471,   472,   473,    -1,    -1,    -1,    -1,
     478,    -1,    -1,    -1,   482,    -1,    -1,   485,    -1,    -1,
     488,    -1,   490,    -1,   492,    -1,   494,   495,    -1,    -1,
      -1,    -1,    -1,    -1,   502,   503,    -1,   505,    -1,    -1,
     508,    -1,    -1,   511,    -1,   513,    -1,    -1,    -1,   517,
      -1,   519,   520,   521,   522,   523,   524,    -1,    -1,   527,
     528,   529,   530,    -1,   532,   533,    -1,   535,    -1,   537,
     538,   539,   540,    -1,    -1,   543,   544,    -1,   546,   547,
     548,   549,    -1,    -1,    -1,    -1,    -1,   555,   556,   557,
      -1,    -1,    -1,    -1,   562,   563,   564,    -1,   566,   567,
      -1,   569,   570,    -1,    -1,    -1,    -1,    -1,   576,    -1,
      -1,   579,    -1,    -1,    -1,   583,   584,   585,    -1,    -1,
      -1,    -1,    -1,    -1,   592,    -1,    -1,   595,    -1,    -1,
      -1,   599,   600,   601,   602,   603,   604,   605,    -1,   607,
      -1,    -1,    -1,   611,    -1,    -1,   614,    -1,   616,    -1,
       5,   619,     7,     8,     9,    10,    11,    -1,    -1,    14,
      -1,    -1,    -1,    18,    -1,    -1,    -1,    -1,    23,    24,
      25,    26,    27,    28,    29,    -1,    -1,    32,    -1,    -1,
      -1,    36,    -1,    -1,    -1,    40,    -1,    -1,    43,    44,
      45,    -1,    47,    -1,    -1,    -1,    -1,    -1,    53,    54,
      -1,    56,    57,    -1,    59,    -1,    -1,    -1,    -1,    -1,
      65,    66,    67,    68,    69,    70,    71,    -1,    73,    74,
      -1,    -1,    -1,    -1,    -1,    -1,    81,    -1,    83,    -1,
      85,    86,    87,    88,    -1,    90,    91,    -1,    93,    94,
      95,    -1,    97,    -1,    99,    -1,    -1,   102,    -1,    -1,
     105,    -1,    -1,    -1,   109,    -1,    -1,    -1,   113,   114,
     115,    -1,    -1,   118,    -1,    -1,    -1,    -1,   123,    -1,
      -1,    -1,    -1,    -1,   129,    -1,   131,    -1,    -1,    -1,
     135,    -1,   137,   138,   139,   140,    -1,    -1,    -1,    -1,
      -1,    -1,   147,   148,   149,    -1,   151,    -1,   153,    -1,
     155,   156,    -1,   158,   159,   160,    -1,    -1,   163,   164,
      -1,   166,   167,   168,   169,    -1,    -1,    -1,    -1,   174,
     175,   176,    -1,    -1,   179,   180,   181,   182,   183,   184,
      -1,    -1,    -1,    -1,    -1,    -1,   191,    -1,   193,    -1,
     195,    -1,   197,   198,   199,   200,   201,   202,    -1,   204,
      -1,    -1,    -1,    -1,   209,   210,    -1,    -1,    -1,    -1,
      -1,   216,    -1,    -1,    -1,   220,   221,   222,   223,   224,
      -1,   226,   227,   228,    -1,   230,    -1,   232,    -1,    -1,
      -1,    -1,   237,    -1,    -1,    -1,    -1,   242,    -1,   244,
     245,    -1,   247,   248,   249,    -1,    -1,   252,    -1,    -1,
      -1,   256,   257,    -1,    -1,   260,   261,    -1,   263,   264,
      -1,    -1,    -1,    -1,    -1,   270,   271,    -1,   273,    -1,
     275,    -1,   277,   278,    -1,    -1,    -1,    -1,   283,    -1,
      -1,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,    -1,   303,   304,
     305,    -1,   307,   308,   309,   310,    -1,   312,   313,    -1,
      -1,    -1,    -1,   318,   319,   320,   321,   322,   323,    -1,
      -1,   326,   327,    -1,   329,    -1,   331,    -1,   333,   334,
     335,   336,   337,   338,   339,   340,   341,    -1,    -1,   344,
     345,    -1,    -1,   348,   349,   350,   351,    -1,    -1,    -1,
      -1,   356,    -1,    -1,    -1,    -1,   361,   362,   363,    -1,
     365,   366,   367,   368,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   381,   382,    -1,    -1,
      -1,    -1,   387,   388,   389,    -1,   391,   392,   393,   394,
     395,   396,   397,    -1,    -1,    -1,    -1,   402,   403,    -1,
     405,    -1,   407,   408,   409,   410,   411,    -1,   413,   414,
     415,    -1,    -1,   418,    -1,    -1,    -1,   422,   423,   424,
     425,   426,    -1,    -1,   429,   430,   431,   432,   433,    -1,
     435,    -1,    -1,   438,    -1,   440,   441,    -1,   443,    -1,
      -1,    -1,   447,    -1,    -1,   450,   451,   452,    -1,    -1,
      -1,   456,   457,   458,   459,   460,   461,    -1,   463,   464,
      -1,   466,    -1,    -1,    -1,    -1,   471,   472,   473,    -1,
      -1,    -1,    -1,   478,    -1,    -1,    -1,   482,    -1,    -1,
     485,    -1,    -1,   488,    -1,   490,    -1,   492,    -1,   494,
     495,    -1,    -1,    -1,    -1,    -1,    -1,   502,   503,    -1,
     505,    -1,    -1,   508,    -1,    -1,   511,    -1,   513,    -1,
      -1,    -1,   517,    -1,   519,   520,   521,   522,   523,   524,
      -1,    -1,   527,   528,   529,   530,    -1,   532,   533,    -1,
     535,    -1,   537,   538,   539,   540,    -1,    -1,   543,   544,
      -1,   546,   547,   548,   549,    -1,    -1,    -1,    -1,    -1,
     555,   556,   557,    -1,    -1,    -1,    -1,   562,   563,   564,
      -1,   566,   567,    -1,   569,   570,    -1,    -1,    -1,    -1,
      -1,   576,    -1,    -1,   579,    -1,    -1,    -1,   583,   584,
     585,    -1,    -1,    -1,    -1,    -1,    -1,   592,    -1,    -1,
     595,    -1,    -1,    -1,   599,   600,   601,   602,   603,   604,
     605,    -1,   607,    -1,    -1,    -1,   611,    -1,    -1,   614,
      -1,   616,    -1,     5,   619,     7,     8,     9,    10,    11,
      -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    -1,
      -1,    23,    24,    25,    26,    27,    28,    29,    -1,    -1,
      32,    -1,    -1,    -1,    36,    -1,    -1,    -1,    40,    -1,
      -1,    43,    44,    45,    -1,    47,    -1,    -1,    -1,    -1,
      -1,    53,    54,    -1,    56,    57,    -1,    59,    -1,    -1,
      -1,    -1,    -1,    65,    66,    67,    68,    69,    70,    71,
      -1,    73,    74,    -1,    -1,    -1,    -1,    -1,    -1,    81,
      -1,    83,    -1,    85,    86,    87,    88,    -1,    90,    91,
      -1,    93,    94,    95,    -1,    97,    -1,    99,    -1,    -1,
     102,    -1,    -1,   105,    -1,    -1,    -1,   109,    -1,    -1,
      -1,   113,   114,   115,    -1,    -1,   118,    -1,    -1,    -1,
      -1,   123,    -1,    -1,    -1,    -1,    -1,   129,    -1,   131,
      -1,    -1,    -1,   135,    -1,   137,   138,   139,   140,    -1,
      -1,    -1,    -1,    -1,    -1,   147,   148,   149,    -1,    -1,
      -1,   153,    -1,   155,   156,    -1,   158,   159,   160,    -1,
      -1,   163,   164,    -1,   166,   167,   168,   169,    -1,    -1,
      -1,    -1,   174,   175,   176,    -1,    -1,   179,   180,   181,
     182,   183,   184,    -1,    -1,    -1,    -1,    -1,    -1,   191,
      -1,   193,    -1,   195,    -1,   197,   198,   199,   200,   201,
     202,    -1,   204,    -1,    -1,    -1,    -1,   209,   210,    -1,
      -1,    -1,    -1,    -1,   216,    -1,    -1,    -1,   220,   221,
     222,   223,   224,    -1,   226,   227,   228,    -1,   230,    -1,
     232,    -1,    -1,    -1,    -1,   237,    -1,    -1,    -1,    -1,
     242,    -1,   244,   245,    -1,   247,   248,   249,    -1,    -1,
     252,    -1,    -1,    -1,   256,   257,    -1,    -1,   260,   261,
      -1,   263,   264,    -1,    -1,    -1,    -1,    -1,   270,   271,
      -1,   273,    -1,   275,    -1,   277,   278,    -1,    -1,    -1,
      -1,   283,    -1,    -1,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
      -1,   303,   304,   305,    -1,   307,   308,   309,   310,    -1,
     312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,   321,
     322,   323,    -1,    -1,   326,   327,    -1,   329,    -1,   331,
      -1,   333,   334,   335,   336,   337,   338,   339,   340,   341,
      -1,    -1,   344,   345,    -1,    -1,   348,   349,   350,   351,
      -1,    -1,    -1,    -1,   356,    -1,    -1,    -1,    -1,   361,
     362,   363,    -1,   365,   366,   367,   368,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   381,
     382,    -1,    -1,    -1,    -1,   387,   388,   389,    -1,   391,
     392,   393,   394,   395,   396,   397,    -1,    -1,    -1,    -1,
     402,   403,    -1,   405,    -1,   407,   408,   409,   410,   411,
      -1,   413,   414,   415,    -1,    -1,   418,    -1,    -1,    -1,
     422,   423,   424,   425,   426,    -1,    -1,   429,   430,   431,
     432,   433,    -1,   435,    -1,    -1,   438,    -1,   440,   441,
      -1,   443,    -1,    -1,    -1,   447,    -1,    -1,   450,   451,
     452,    -1,    -1,    -1,   456,   457,   458,   459,   460,   461,
      -1,   463,   464,    -1,   466,    -1,    -1,    -1,    -1,   471,
     472,   473,    -1,    -1,    -1,    -1,   478,    -1,    -1,    -1,
     482,    -1,    -1,   485,    -1,    -1,   488,    -1,   490,    -1,
     492,    -1,   494,   495,    -1,    -1,    -1,    -1,    -1,    -1,
     502,   503,    -1,   505,    -1,    -1,   508,    -1,    -1,   511,
      -1,   513,    -1,    -1,    -1,   517,    -1,   519,   520,   521,
     522,   523,   524,    -1,    -1,   527,   528,   529,   530,    -1,
     532,   533,    -1,   535,    -1,   537,   538,   539,   540,    -1,
      -1,   543,   544,    -1,   546,   547,   548,   549,    -1,    -1,
      -1,    -1,    -1,   555,   556,   557,    -1,    -1,    -1,    -1,
     562,   563,   564,    -1,   566,   567,    -1,   569,   570,    -1,
      -1,    -1,    -1,    -1,   576,    -1,    -1,   579,    -1,    -1,
      -1,   583,   584,   585,    -1,    -1,    -1,    -1,    -1,    -1,
     592,    -1,    -1,   595,    -1,    -1,    -1,   599,   600,   601,
     602,   603,   604,    -1,    -1,   607,    -1,    -1,    -1,   611,
      -1,    -1,   614,    -1,   616,    -1,     5,   619,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      -1,    -1,    -1,    -1,    23,    24,    25,    26,    27,    28,
      29,    -1,    -1,    32,    -1,    -1,    -1,    36,    -1,    -1,
      -1,    40,    -1,    -1,    43,    44,    45,    -1,    47,    -1,
      -1,    -1,    -1,    -1,    53,    54,    -1,    56,    57,    -1,
      59,    -1,    -1,    -1,    -1,    -1,    65,    66,    67,    68,
      69,    70,    71,    -1,    73,    74,    -1,    -1,    -1,    -1,
      -1,    -1,    81,    -1,    83,    -1,    85,    86,    87,    88,
      -1,    90,    91,    -1,    93,    94,    95,    -1,    97,    -1,
      99,    -1,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,
     109,    -1,    -1,    -1,   113,   114,   115,    -1,    -1,   118,
      -1,    -1,    -1,    -1,   123,    -1,    -1,    -1,    -1,    -1,
     129,    -1,   131,    -1,    -1,    -1,   135,    -1,   137,   138,
     139,   140,    -1,    -1,    -1,    -1,    -1,    -1,   147,   148,
     149,    -1,    -1,    -1,   153,    -1,   155,   156,    -1,   158,
     159,   160,    -1,    -1,   163,   164,    -1,   166,   167,   168,
     169,    -1,    -1,    -1,    -1,   174,   175,   176,    -1,    -1,
     179,   180,   181,   182,   183,   184,    -1,    -1,    -1,    -1,
      -1,    -1,   191,    -1,   193,    -1,   195,    -1,   197,   198,
     199,   200,   201,   202,    -1,   204,    -1,    -1,    -1,    -1,
     209,   210,    -1,    -1,    -1,    -1,    -1,   216,    -1,    -1,
      -1,   220,   221,   222,   223,   224,    -1,   226,   227,   228,
      -1,   230,    -1,   232,    -1,    -1,    -1,    -1,   237,    -1,
      -1,    -1,    -1,   242,    -1,   244,   245,    -1,   247,   248,
     249,    -1,    -1,   252,    -1,    -1,    -1,   256,   257,    -1,
      -1,   260,   261,    -1,   263,   264,    -1,    -1,    -1,    -1,
      -1,   270,   271,    -1,   273,    -1,   275,    -1,   277,   278,
      -1,    -1,    -1,    -1,   283,    -1,    -1,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,    -1,   303,   304,   305,    -1,   307,   308,
     309,   310,    -1,   312,   313,    -1,    -1,    -1,    -1,   318,
     319,   320,   321,   322,   323,    -1,    -1,   326,   327,    -1,
     329,    -1,   331,    -1,   333,   334,   335,   336,   337,   338,
     339,   340,   341,    -1,    -1,   344,   345,    -1,    -1,   348,
     349,   350,   351,    -1,    -1,    -1,    -1,   356,    -1,    -1,
      -1,    -1,   361,   362,   363,    -1,   365,   366,   367,   368,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   381,   382,    -1,    -1,    -1,    -1,   387,   388,
     389,    -1,   391,   392,   393,   394,   395,   396,   397,    -1,
      -1,    -1,    -1,   402,   403,    -1,   405,    -1,   407,   408,
     409,   410,   411,    -1,   413,   414,   415,    -1,    -1,   418,
      -1,    -1,    -1,   422,   423,   424,   425,   426,    -1,    -1,
     429,   430,   431,   432,   433,    -1,   435,    -1,    -1,   438,
      -1,   440,   441,    -1,   443,    -1,    -1,    -1,   447,    -1,
      -1,   450,   451,   452,    -1,    -1,    -1,   456,   457,   458,
     459,   460,   461,    -1,   463,   464,    -1,   466,    -1,    -1,
      -1,    -1,   471,   472,   473,    -1,    -1,    -1,    -1,   478,
      -1,    -1,    -1,   482,    -1,    -1,   485,    -1,    -1,   488,
      -1,   490,    -1,   492,    -1,   494,   495,    -1,    -1,    -1,
      -1,    -1,    -1,   502,   503,    -1,   505,    -1,    -1,   508,
      -1,    -1,   511,    -1,   513,    -1,    -1,    -1,   517,    -1,
     519,   520,   521,   522,   523,   524,    -1,    -1,   527,   528,
     529,   530,    -1,   532,   533,    -1,   535,    -1,   537,   538,
     539,   540,    -1,    -1,   543,   544,    -1,   546,   547,   548,
     549,    -1,    -1,    -1,    -1,    -1,   555,   556,   557,    -1,
      -1,    -1,    -1,   562,   563,   564,    -1,   566,   567,    -1,
     569,   570,    -1,    -1,    -1,    -1,    -1,   576,    -1,    -1,
     579,    -1,    -1,    -1,   583,   584,   585,    -1,    -1,    -1,
      -1,    -1,    -1,   592,    -1,    -1,   595,    -1,    -1,    -1,
     599,   600,   601,   602,   603,   604,    -1,    -1,   607,    -1,
      -1,    -1,   611,    -1,    -1,   614,    -1,   616,    -1,     5,
     619,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    -1,    -1,    23,    24,    25,
      26,    27,    28,    29,    -1,    -1,    32,    -1,    -1,    -1,
      36,    -1,    -1,    -1,    40,    -1,    -1,    43,    44,    45,
      -1,    47,    -1,    -1,    -1,    -1,    -1,    53,    54,    -1,
      56,    57,    -1,    59,    -1,    -1,    -1,    -1,    -1,    65,
      66,    67,    68,    69,    70,    71,    -1,    73,    74,    -1,
      -1,    -1,    -1,    -1,    -1,    81,    -1,    83,    -1,    85,
      86,    87,    88,    -1,    90,    91,    -1,    93,    94,    95,
      -1,    97,    -1,    99,    -1,    -1,   102,    -1,    -1,   105,
      -1,    -1,    -1,   109,    -1,    -1,    -1,   113,   114,   115,
      -1,    -1,   118,    -1,    -1,    -1,    -1,   123,    -1,    -1,
      -1,    -1,    -1,   129,    -1,   131,    -1,    -1,    -1,   135,
      -1,   137,   138,   139,   140,    -1,    -1,    -1,    -1,    -1,
      -1,   147,   148,   149,    -1,    -1,    -1,   153,    -1,   155,
     156,    -1,   158,   159,   160,    -1,    -1,   163,   164,    -1,
     166,   167,   168,   169,    -1,    -1,    -1,    -1,   174,   175,
     176,    -1,    -1,   179,   180,   181,   182,   183,   184,    -1,
      -1,    -1,    -1,    -1,    -1,   191,    -1,   193,    -1,   195,
      -1,   197,   198,   199,   200,   201,   202,    -1,   204,    -1,
      -1,    -1,    -1,   209,   210,    -1,    -1,    -1,    -1,    -1,
     216,    -1,    -1,    -1,   220,   221,   222,   223,   224,    -1,
     226,   227,   228,    -1,   230,    -1,   232,    -1,    -1,    -1,
      -1,   237,    -1,    -1,    -1,    -1,   242,    -1,   244,   245,
      -1,   247,   248,   249,    -1,    -1,   252,    -1,    -1,    -1,
     256,   257,    -1,    -1,   260,   261,    -1,   263,   264,    -1,
      -1,    -1,    -1,    -1,   270,   271,    -1,   273,    -1,   275,
      -1,   277,   278,    -1,    -1,    -1,    -1,   283,    -1,    -1,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,    -1,   303,   304,   305,
      -1,   307,   308,   309,   310,    -1,   312,   313,    -1,    -1,
      -1,    -1,   318,   319,   320,   321,   322,   323,    -1,    -1,
     326,   327,    -1,   329,    -1,   331,    -1,   333,   334,   335,
     336,   337,   338,   339,   340,   341,    -1,    -1,   344,   345,
      -1,    -1,   348,   349,   350,   351,    -1,    -1,    -1,    -1,
     356,    -1,    -1,    -1,    -1,   361,   362,   363,    -1,   365,
     366,   367,   368,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   381,   382,    -1,    -1,    -1,
      -1,   387,   388,   389,    -1,   391,   392,   393,   394,   395,
     396,   397,    -1,    -1,    -1,    -1,   402,   403,    -1,   405,
      -1,   407,   408,   409,   410,   411,    -1,   413,   414,   415,
      -1,    -1,   418,    -1,    -1,    -1,   422,   423,   424,   425,
     426,    -1,    -1,   429,   430,   431,   432,   433,    -1,   435,
      -1,    -1,   438,    -1,   440,   441,    -1,   443,    -1,    -1,
      -1,   447,    -1,    -1,   450,   451,   452,    -1,    -1,    -1,
     456,   457,   458,   459,   460,   461,    -1,   463,   464,    -1,
     466,    -1,    -1,    -1,    -1,   471,   472,   473,    -1,    -1,
      -1,    -1,   478,    -1,    -1,    -1,   482,    -1,    -1,   485,
      -1,    -1,   488,    -1,   490,    -1,   492,    -1,   494,   495,
      -1,    -1,    -1,    -1,    -1,    -1,   502,   503,    -1,   505,
      -1,    -1,   508,    -1,    -1,   511,    -1,   513,    -1,    -1,
      -1,   517,    -1,   519,   520,   521,   522,   523,   524,    -1,
      -1,   527,   528,   529,   530,    -1,   532,   533,    -1,   535,
      -1,   537,   538,   539,   540,    -1,    -1,   543,   544,    -1,
     546,   547,   548,   549,    -1,    -1,    -1,    -1,    -1,   555,
     556,   557,    -1,    -1,    -1,    -1,   562,   563,   564,    -1,
     566,   567,    -1,   569,   570,    -1,    -1,    -1,    -1,    -1,
     576,    -1,    -1,   579,    -1,    -1,    -1,   583,   584,   585,
      -1,    -1,    -1,    -1,    -1,    -1,   592,    -1,    -1,   595,
      -1,    -1,    -1,   599,   600,   601,   602,   603,   604,    -1,
      -1,   607,    -1,    -1,    -1,   611,    -1,    -1,   614,    -1,
     616,    -1,     5,   619,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    -1,    -1,
      23,    24,    25,    26,    27,    28,    29,    -1,    -1,    32,
      -1,    -1,    -1,    36,    -1,    -1,    -1,    40,    -1,    -1,
      43,    44,    45,    -1,    47,    -1,    -1,    -1,    -1,    -1,
      53,    54,    -1,    56,    57,    -1,    59,    -1,    -1,    -1,
      -1,    -1,    65,    66,    67,    68,    69,    70,    71,    -1,
      73,    74,    -1,    -1,    -1,    -1,    -1,    -1,    81,    -1,
      83,    -1,    85,    86,    87,    88,    -1,    90,    91,    -1,
      93,    94,    95,    -1,    97,    -1,    99,    -1,    -1,   102,
      -1,    -1,   105,    -1,    -1,    -1,   109,    -1,    -1,    -1,
     113,   114,   115,    -1,    -1,   118,    -1,    -1,    -1,    -1,
     123,    -1,    -1,    -1,    -1,    -1,   129,    -1,   131,    -1,
      -1,    -1,   135,    -1,   137,   138,   139,   140,    -1,    -1,
      -1,    -1,    -1,    -1,   147,   148,   149,    -1,    -1,    -1,
     153,    -1,   155,   156,    -1,   158,   159,   160,    -1,    -1,
     163,   164,    -1,   166,   167,   168,   169,    -1,    -1,    -1,
      -1,   174,   175,   176,    -1,    -1,   179,   180,   181,   182,
     183,   184,    -1,    -1,    -1,    -1,    -1,    -1,   191,    -1,
     193,    -1,   195,    -1,   197,   198,   199,   200,   201,   202,
      -1,   204,    -1,    -1,    -1,    -1,   209,   210,    -1,    -1,
      -1,    -1,    -1,   216,    -1,    -1,    -1,   220,   221,   222,
     223,   224,    -1,   226,   227,   228,    -1,   230,    -1,   232,
      -1,    -1,    -1,    -1,   237,    -1,    -1,    -1,    -1,   242,
      -1,   244,   245,    -1,   247,   248,   249,    -1,    -1,   252,
      -1,    -1,    -1,   256,   257,    -1,    -1,   260,   261,    -1,
     263,   264,    -1,    -1,    -1,    -1,    -1,   270,   271,    -1,
     273,    -1,   275,    -1,   277,   278,    -1,    -1,    -1,    -1,
     283,    -1,    -1,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,    -1,
     303,   304,   305,    -1,   307,   308,   309,   310,    -1,   312,
     313,    -1,    -1,    -1,    -1,   318,   319,   320,   321,   322,
     323,    -1,    -1,   326,   327,    -1,   329,    -1,   331,    -1,
     333,   334,   335,   336,   337,   338,   339,   340,   341,    -1,
      -1,   344,   345,    -1,    -1,   348,   349,   350,   351,    -1,
      -1,    -1,    -1,   356,    -1,    -1,    -1,    -1,   361,   362,
     363,    -1,   365,   366,   367,   368,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   381,   382,
      -1,    -1,    -1,    -1,   387,   388,   389,    -1,   391,   392,
     393,   394,   395,   396,   397,    -1,    -1,    -1,    -1,   402,
     403,    -1,   405,    -1,   407,   408,   409,   410,   411,    -1,
     413,   414,   415,    -1,    -1,   418,    -1,    -1,    -1,   422,
     423,   424,   425,   426,    -1,    -1,   429,   430,   431,   432,
     433,    -1,   435,    -1,    -1,   438,    -1,   440,   441,    -1,
     443,    -1,    -1,    -1,   447,    -1,    -1,   450,   451,   452,
      -1,    -1,    -1,   456,   457,   458,   459,   460,   461,    -1,
     463,   464,    -1,   466,    -1,    -1,    -1,    -1,   471,   472,
     473,    -1,    -1,    -1,    -1,   478,    -1,    -1,    -1,   482,
      -1,    -1,   485,    -1,    -1,   488,    -1,   490,    -1,   492,
      -1,   494,   495,    -1,    -1,    -1,    -1,    -1,    -1,   502,
     503,    -1,   505,    -1,    -1,   508,    -1,    -1,   511,    -1,
     513,    -1,    -1,    -1,   517,    -1,   519,   520,   521,   522,
     523,   524,    -1,    -1,   527,   528,   529,   530,    -1,   532,
     533,    -1,   535,    -1,   537,   538,   539,   540,    -1,    -1,
     543,   544,    -1,   546,   547,   548,   549,    -1,    -1,    -1,
      -1,    -1,   555,   556,   557,    -1,    -1,    -1,    -1,   562,
     563,   564,    -1,   566,   567,    -1,   569,   570,    -1,    -1,
      -1,    -1,    -1,   576,    -1,    -1,   579,    -1,    -1,    -1,
     583,   584,   585,    -1,    -1,    -1,    -1,    -1,    -1,   592,
      -1,    -1,   595,    -1,    -1,    -1,   599,   600,   601,   602,
     603,   604,    -1,    -1,   607,    -1,    -1,    -1,   611,    -1,
      -1,   614,    -1,   616,    -1,     5,   619,     7,     8,     9,
      10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,
      -1,    -1,    -1,    23,    24,    25,    26,    27,    28,    29,
      -1,    -1,    32,    -1,    -1,    -1,    36,    -1,    -1,    -1,
      40,    -1,    -1,    43,    44,    45,    -1,    47,    -1,    -1,
      -1,    -1,    -1,    53,    54,    -1,    56,    57,    -1,    59,
      -1,    -1,    -1,    -1,    -1,    65,    66,    67,    68,    69,
      70,    71,    -1,    73,    74,    -1,    -1,    -1,    -1,    -1,
      -1,    81,    -1,    83,    -1,    85,    86,    87,    88,    -1,
      90,    91,    -1,    93,    94,    95,    -1,    97,    -1,    99,
      -1,    -1,   102,    -1,    -1,   105,    -1,    -1,    -1,   109,
      -1,    -1,    -1,   113,   114,   115,    -1,    -1,   118,    -1,
      -1,    -1,    -1,   123,    -1,    -1,    -1,    -1,    -1,   129,
      -1,   131,    -1,    -1,    -1,   135,    -1,   137,   138,   139,
     140,    -1,    -1,    -1,    -1,    -1,    -1,   147,   148,   149,
      -1,    -1,    -1,   153,    -1,   155,   156,    -1,   158,   159,
     160,    -1,    -1,   163,   164,    -1,   166,   167,   168,   169,
      -1,    -1,    -1,    -1,   174,   175,   176,    -1,    -1,   179,
     180,   181,   182,   183,   184,    -1,    -1,    -1,    -1,    -1,
      -1,   191,    -1,   193,    -1,   195,    -1,   197,   198,   199,
     200,   201,   202,    -1,   204,    -1,    -1,    -1,    -1,   209,
     210,    -1,    -1,    -1,    -1,    -1,   216,    -1,    -1,    -1,
     220,   221,   222,   223,   224,    -1,   226,   227,   228,    -1,
     230,    -1,   232,    -1,    -1,    -1,    -1,   237,    -1,    -1,
      -1,    -1,   242,    -1,   244,   245,    -1,   247,   248,   249,
      -1,    -1,   252,    -1,    -1,    -1,   256,   257,    -1,    -1,
     260,   261,    -1,   263,   264,    -1,    -1,    -1,    -1,    -1,
     270,   271,    -1,   273,    -1,   275,    -1,   277,   278,    -1,
      -1,    -1,    -1,   283,    -1,    -1,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,    -1,   303,   304,   305,    -1,   307,   308,   309,
     310,    -1,   312,   313,    -1,    -1,    -1,    -1,   318,   319,
     320,   321,   322,   323,    -1,    -1,   326,   327,    -1,   329,
      -1,   331,    -1,   333,   334,   335,   336,   337,   338,   339,
     340,   341,    -1,    -1,   344,   345,    -1,    -1,   348,   349,
     350,   351,    -1,    -1,    -1,    -1,   356,    -1,    -1,    -1,
      -1,   361,   362,   363,    -1,   365,   366,   367,   368,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   381,   382,    -1,    -1,    -1,    -1,   387,   388,   389,
      -1,   391,   392,   393,   394,   395,   396,   397,    -1,    -1,
      -1,    -1,   402,   403,    -1,   405,    -1,   407,   408,   409,
     410,   411,    -1,   413,   414,   415,    -1,    -1,   418,    -1,
      -1,    -1,   422,   423,   424,   425,   426,    -1,    -1,   429,
     430,   431,   432,   433,    -1,   435,    -1,    -1,   438,    -1,
     440,   441,    -1,   443,    -1,    -1,    -1,   447,    -1,    -1,
     450,   451,   452,    -1,    -1,    -1,   456,   457,   458,   459,
     460,   461,    -1,   463,   464,    -1,   466,    -1,    -1,    -1,
      -1,   471,   472,   473,    -1,    -1,    -1,    -1,   478,    -1,
      -1,    -1,   482,    -1,    -1,   485,    -1,    -1,   488,    -1,
     490,    -1,   492,    -1,   494,   495,    -1,    -1,    -1,    -1,
      -1,    -1,   502,   503,    -1,   505,    -1,    -1,   508,    -1,
      -1,   511,    -1,   513,    -1,    -1,    -1,   517,    -1,   519,
     520,   521,   522,   523,   524,    -1,    -1,   527,   528,   529,
     530,    -1,   532,   533,    -1,   535,    -1,   537,   538,   539,
     540,    -1,    -1,   543,   544,    -1,   546,   547,   548,   549,
      -1,    -1,    -1,    -1,    -1,   555,   556,   557,    -1,    -1,
      -1,    -1,   562,   563,   564,    -1,   566,   567,    -1,   569,
     570,    -1,    -1,    -1,    -1,    -1,   576,    -1,    -1,   579,
      -1,    -1,    -1,   583,   584,   585,    -1,    -1,    -1,    -1,
      -1,    -1,   592,    -1,    -1,   595,    -1,    -1,    -1,   599,
     600,   601,   602,   603,   604,    -1,    -1,   607,    -1,    -1,
      -1,   611,    -1,    -1,   614,    -1,   616,    -1,     5,   619,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    -1,    -1,    -1,    -1,    23,    24,    25,    26,
      27,    28,    29,    -1,    -1,    32,    -1,    -1,    -1,    36,
      -1,    -1,    -1,    40,    -1,    -1,    43,    44,    45,    -1,
      47,    -1,    -1,    -1,    -1,    -1,    53,    54,    -1,    56,
      57,    -1,    59,    -1,    -1,    -1,    -1,    -1,    65,    66,
      67,    68,    69,    70,    71,    -1,    73,    74,    -1,    -1,
      -1,    -1,    -1,    -1,    81,    -1,    83,    -1,    85,    86,
      87,    88,    -1,    90,    91,    -1,    93,    94,    95,    -1,
      97,    -1,    99,    -1,    -1,   102,    -1,    -1,   105,    -1,
      -1,    -1,   109,    -1,    -1,    -1,   113,   114,   115,    -1,
      -1,   118,    -1,    -1,    -1,    -1,   123,    -1,    -1,    -1,
      -1,    -1,   129,    -1,   131,    -1,    -1,    -1,   135,    -1,
     137,   138,   139,   140,    -1,    -1,    -1,    -1,    -1,    -1,
     147,   148,   149,    -1,    -1,    -1,   153,    -1,    -1,   156,
      -1,   158,   159,   160,    -1,    -1,   163,   164,    -1,   166,
     167,   168,   169,    -1,    -1,    -1,    -1,   174,   175,   176,
      -1,    -1,   179,   180,   181,   182,   183,   184,    -1,    -1,
      -1,    -1,    -1,    -1,   191,    -1,   193,    -1,   195,    -1,
     197,   198,   199,   200,   201,   202,    -1,   204,    -1,    -1,
      -1,    -1,   209,   210,    -1,    -1,    -1,    -1,    -1,   216,
      -1,    -1,    -1,   220,   221,   222,   223,   224,    -1,   226,
     227,   228,    -1,   230,    -1,   232,    -1,    -1,    -1,    -1,
     237,    -1,    -1,    -1,    -1,   242,    -1,   244,   245,    -1,
     247,   248,   249,    -1,    -1,   252,    -1,    -1,    -1,   256,
     257,    -1,    -1,   260,   261,    -1,   263,   264,    -1,    -1,
      -1,    -1,    -1,   270,   271,    -1,   273,    -1,   275,    -1,
     277,   278,    -1,    -1,    -1,    -1,   283,    -1,    -1,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,    -1,   303,   304,   305,    -1,
     307,   308,   309,   310,    -1,   312,   313,    -1,    -1,    -1,
      -1,   318,   319,   320,   321,   322,   323,    -1,    -1,   326,
     327,    -1,   329,    -1,   331,    -1,   333,   334,   335,   336,
     337,   338,   339,   340,   341,    -1,    -1,   344,   345,    -1,
      -1,   348,   349,   350,   351,    -1,    -1,    -1,    -1,   356,
      -1,    -1,    -1,    -1,   361,   362,   363,    -1,   365,   366,
     367,   368,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   381,   382,    -1,    -1,    -1,    -1,
     387,   388,   389,    -1,   391,   392,   393,   394,   395,   396,
     397,    -1,    -1,    -1,    -1,   402,   403,    -1,   405,    -1,
     407,   408,   409,   410,   411,    -1,   413,   414,   415,    -1,
      -1,   418,    -1,    -1,    -1,   422,   423,   424,   425,   426,
      -1,    -1,   429,   430,   431,   432,   433,    -1,   435,    -1,
      -1,   438,    -1,   440,   441,    -1,   443,    -1,    -1,    -1,
     447,    -1,    -1,   450,   451,   452,    -1,    -1,    -1,   456,
     457,   458,   459,   460,   461,    -1,   463,   464,    -1,   466,
      -1,    -1,    -1,    -1,   471,   472,   473,    -1,    -1,    -1,
      -1,   478,    -1,    -1,    -1,   482,    -1,    -1,   485,    -1,
      -1,   488,    -1,   490,    -1,   492,    -1,   494,   495,    -1,
      -1,    -1,    -1,    -1,    -1,   502,   503,    -1,   505,    -1,
      -1,   508,    -1,    -1,   511,    -1,   513,    -1,    -1,    -1,
     517,    -1,   519,   520,   521,   522,   523,   524,    -1,    -1,
     527,   528,   529,   530,    -1,   532,   533,    -1,   535,    -1,
     537,   538,   539,   540,    -1,    -1,   543,   544,    -1,   546,
     547,   548,   549,    -1,    -1,    -1,    -1,    -1,   555,   556,
     557,    -1,    -1,    -1,    -1,   562,   563,   564,    -1,   566,
     567,    -1,   569,   570,    -1,    -1,    -1,    -1,    -1,   576,
      -1,    -1,   579,    -1,    -1,    -1,   583,   584,   585,    -1,
      -1,    -1,    -1,    -1,    -1,   592,    -1,    -1,   595,    -1,
      -1,    -1,   599,   600,   601,   602,   603,   604,    -1,    -1,
     607,    -1,    -1,    -1,   611,    -1,    -1,   614,    -1,   616,
      -1,     5,   619,     7,     8,     9,    10,    11,    -1,    -1,
      14,    -1,    -1,    -1,    18,    -1,    -1,    -1,    -1,    23,
      24,    25,    26,    27,    28,    29,    -1,    -1,    32,    -1,
      -1,    -1,    36,    -1,    -1,    -1,    40,    -1,    -1,    43,
      44,    45,    -1,    47,    -1,    -1,    -1,    -1,    -1,    53,
      54,    -1,    56,    57,    -1,    59,    -1,    -1,    -1,    -1,
      -1,    65,    66,    67,    68,    69,    70,    71,    -1,    73,
      74,    -1,    -1,    -1,    -1,    -1,    -1,    81,    -1,    83,
      -1,    85,    86,    87,    88,    -1,    90,    91,    -1,    93,
      94,    95,    -1,    97,    -1,    99,    -1,    -1,   102,    -1,
      -1,   105,    -1,    -1,    -1,   109,    -1,    -1,    -1,   113,
     114,   115,    -1,    -1,   118,    -1,    -1,    -1,    -1,   123,
      -1,    -1,    -1,    -1,    -1,   129,    -1,   131,    -1,    -1,
      -1,   135,    -1,   137,   138,   139,   140,    -1,    -1,    -1,
      -1,    -1,    -1,   147,   148,   149,    -1,    -1,    -1,   153,
      -1,    -1,   156,    -1,   158,   159,   160,    -1,    -1,   163,
     164,    -1,   166,   167,   168,   169,    -1,    -1,    -1,    -1,
     174,   175,   176,    -1,    -1,   179,   180,   181,   182,   183,
     184,    -1,    -1,    -1,    -1,    -1,    -1,   191,    -1,   193,
      -1,   195,    -1,   197,   198,   199,   200,   201,   202,    -1,
     204,    -1,    -1,    -1,    -1,   209,   210,    -1,    -1,    -1,
      -1,    -1,   216,    -1,    -1,    -1,   220,   221,   222,   223,
     224,    -1,   226,   227,   228,    -1,   230,    -1,   232,    -1,
      -1,    -1,    -1,   237,    -1,    -1,    -1,    -1,   242,    -1,
     244,   245,    -1,   247,   248,   249,    -1,    -1,   252,    -1,
      -1,    -1,   256,   257,    -1,    -1,   260,   261,    -1,   263,
     264,    -1,    -1,    -1,    -1,    -1,   270,   271,    -1,   273,
      -1,   275,    -1,   277,   278,    -1,    -1,    -1,    -1,   283,
      -1,    -1,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,    -1,   303,
     304,   305,    -1,   307,   308,   309,   310,    -1,   312,   313,
      -1,    -1,    -1,    -1,   318,   319,   320,   321,   322,   323,
      -1,    -1,   326,   327,    -1,   329,    -1,   331,    -1,   333,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,    -1,
     344,   345,    -1,    -1,   348,   349,   350,   351,    -1,    -1,
      -1,    -1,   356,    -1,    -1,    -1,    -1,   361,   362,   363,
      -1,   365,   366,   367,   368,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   381,   382,    -1,
      -1,    -1,    -1,   387,   388,   389,    -1,   391,   392,   393,
     394,   395,   396,   397,    -1,    -1,    -1,    -1,   402,   403,
      -1,   405,    -1,   407,   408,   409,   410,   411,    -1,   413,
     414,   415,    -1,    -1,   418,    -1,    -1,    -1,   422,   423,
     424,   425,   426,    -1,    -1,   429,   430,   431,   432,   433,
      -1,   435,    -1,    -1,   438,    -1,   440,   441,    -1,   443,
      -1,    -1,    -1,   447,    -1,    -1,   450,   451,   452,    -1,
      -1,    -1,   456,   457,   458,   459,   460,   461,    -1,   463,
     464,    -1,   466,    -1,    -1,    -1,    -1,   471,   472,   473,
      -1,    -1,    -1,    -1,   478,    -1,    -1,    -1,   482,    -1,
      -1,   485,    -1,    -1,   488,    -1,   490,    -1,   492,    -1,
     494,   495,    -1,    -1,    -1,    -1,    -1,    -1,   502,   503,
      -1,   505,    -1,    -1,   508,    -1,    -1,   511,    -1,   513,
      -1,    -1,    -1,   517,    -1,   519,   520,   521,   522,   523,
     524,    -1,    -1,   527,   528,   529,   530,    -1,   532,   533,
      -1,   535,    -1,   537,   538,   539,   540,    -1,    -1,   543,
     544,    -1,   546,   547,   548,   549,    -1,    -1,    -1,    -1,
      -1,   555,   556,   557,    -1,    -1,    -1,    -1,   562,   563,
     564,    -1,   566,   567,    -1,   569,   570,    -1,    -1,    -1,
      -1,    -1,   576,    -1,    -1,   579,    -1,    -1,    -1,   583,
     584,   585,    -1,    -1,    -1,    -1,    -1,    -1,   592,    -1,
      -1,   595,    -1,    -1,    -1,   599,   600,   601,   602,   603,
     604,    -1,    -1,   607,    -1,    -1,    -1,   611,    -1,    -1,
     614,    -1,   616,    -1,     5,   619,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      -1,    -1,    23,    24,    25,    26,    27,    28,    29,    -1,
      -1,    -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,    40,
      -1,    -1,    43,    44,    45,    -1,    47,    -1,    -1,    -1,
      -1,    -1,    53,    -1,    -1,    56,    57,    -1,    59,    -1,
      -1,    -1,    -1,    -1,    65,    66,    67,    68,    -1,    70,
      71,    -1,    73,    74,    -1,    -1,    -1,    -1,    -1,    -1,
      81,    -1,    83,    -1,    85,    86,    87,    88,    -1,    90,
      91,    -1,    93,    94,    95,    -1,    97,    -1,    99,    -1,
      -1,   102,    -1,    -1,   105,    -1,    -1,    -1,   109,    -1,
      -1,    -1,   113,   114,   115,    -1,    -1,   118,    -1,    -1,
      -1,    -1,   123,    -1,    -1,    -1,    -1,    -1,   129,    -1,
     131,    -1,    -1,    -1,   135,    -1,   137,   138,   139,   140,
      -1,    -1,    -1,    -1,    -1,    -1,   147,   148,   149,    -1,
      -1,    -1,   153,    -1,    -1,   156,    -1,   158,   159,   160,
      -1,    -1,   163,   164,    -1,   166,   167,   168,   169,    -1,
      -1,    -1,    -1,   174,   175,   176,    -1,    -1,   179,   180,
      -1,   182,   183,   184,    -1,    -1,    -1,    -1,    -1,    -1,
     191,    -1,   193,    -1,   195,    -1,   197,   198,   199,   200,
     201,   202,    -1,   204,    -1,    -1,    -1,    -1,   209,   210,
      -1,    -1,    -1,    -1,    -1,   216,    -1,    -1,    -1,   220,
     221,   222,   223,    -1,    -1,   226,   227,   228,    -1,   230,
      -1,   232,    -1,    -1,    -1,    -1,   237,    -1,    -1,    -1,
      -1,   242,    -1,   244,   245,    -1,   247,   248,    -1,    -1,
      -1,   252,    -1,    -1,    -1,   256,   257,    -1,    -1,   260,
      -1,    -1,   263,   264,    -1,    -1,    -1,    -1,    -1,   270,
     271,    -1,   273,    -1,   275,    -1,   277,   278,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,    -1,   303,   304,   305,    -1,   307,   308,   309,   310,
      -1,   312,   313,    -1,    -1,    -1,    -1,   318,   319,   320,
     321,   322,   323,    -1,    -1,   326,   327,    -1,   329,    -1,
     331,    -1,   333,   334,   335,   336,   337,   338,   339,   340,
     341,    -1,    -1,   344,   345,    -1,    -1,   348,   349,   350,
     351,    -1,    -1,    -1,    -1,   356,    -1,    -1,    -1,    -1,
     361,   362,   363,    -1,   365,   366,   367,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     381,   382,    -1,    -1,    -1,    -1,   387,   388,   389,    -1,
     391,   392,   393,   394,   395,   396,   397,    -1,    -1,    -1,
      -1,   402,   403,    -1,   405,    -1,   407,   408,   409,   410,
     411,    -1,   413,   414,   415,    -1,    -1,   418,    -1,    -1,
      -1,   422,   423,   424,   425,   426,    -1,    -1,   429,   430,
     431,   432,   433,    -1,   435,    -1,    -1,   438,    -1,   440,
      -1,    -1,   443,    -1,    -1,    -1,   447,    -1,    -1,   450,
     451,    -1,    -1,    -1,    -1,   456,   457,   458,   459,   460,
     461,    -1,   463,   464,    -1,   466,    -1,    -1,    -1,    -1,
     471,   472,   473,    -1,    -1,    -1,    -1,   478,    -1,    -1,
      -1,   482,    -1,    -1,   485,    -1,    -1,   488,    -1,   490,
      -1,   492,    -1,   494,   495,    -1,    -1,    -1,    -1,    -1,
      -1,   502,   503,    -1,   505,    -1,    -1,   508,    -1,    -1,
     511,    -1,   513,    -1,    -1,    -1,   517,    -1,   519,   520,
     521,   522,   523,   524,    -1,    -1,   527,   528,   529,   530,
      -1,   532,   533,    -1,   535,    -1,   537,   538,   539,   540,
      -1,    -1,   543,   544,    -1,   546,   547,   548,   549,    -1,
      -1,    -1,    -1,    -1,   555,   556,   557,    -1,    -1,    -1,
      -1,   562,   563,   564,    -1,   566,   567,    -1,   569,   570,
      -1,    -1,    -1,    -1,    -1,   576,    -1,    -1,   579,    -1,
      -1,    -1,   583,   584,   585,    -1,    -1,    -1,    -1,    -1,
      -1,   592,    -1,    -1,   595,    -1,    -1,    -1,   599,   600,
     601,   602,   603,   604,    -1,    -1,    -1,    -1,    -1,    -1,
     611,    -1,    -1,   614,    -1,   616,    -1,    -1,   619
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const yytype_uint16 yystos[] =
{
       0,    13,    15,    32,    36,    50,    51,    58,    63,    64,
      84,   103,   124,   132,   133,   134,   144,   145,   157,   171,
     187,   203,   208,   212,   236,   238,   254,   272,   276,   369,
     386,   390,   401,   412,   434,   437,   439,   442,   445,   446,
     453,   455,   462,   468,   476,   481,   483,   486,   512,   516,
     561,   573,   577,   580,   586,   615,   621,   631,   642,   645,
     646,   647,   648,   649,   651,   656,   658,   667,   697,   725,
     732,   841,   930,  1004,  1047,  1051,  1061,  1064,  1069,  1082,
    1083,  1088,  1091,  1096,  1103,  1115,  1116,  1281,  1283,  1293,
    1296,  1321,  1329,  1340,  1347,  1361,  1364,  1367,  1377,  1383,
    1387,  1392,  1393,  1443,  1470,  1476,  1478,  1485,  1487,  1515,
    1521,  1522,  1523,  1524,  1577,  1585,  1586,  1587,    11,   111,
     129,   195,   277,   406,   474,   533,  1039,  1040,  1546,  1547,
    1548,  1551,   273,   357,  1090,  1516,   542,  1434,   229,     5,
       7,     8,     9,    10,    11,    14,    18,    21,    23,    24,
      25,    26,    27,    28,    29,    30,    32,    36,    40,    43,
      44,    45,    47,    49,    50,    53,    56,    57,    59,    60,
      62,    63,    65,    66,    67,    68,    69,    70,    71,    73,
      74,    75,    76,    77,    78,    79,    81,    82,    83,    84,
      85,    86,    87,    88,    90,    91,    93,    94,    95,    96,
      97,    99,   102,   105,   109,   113,   114,   115,   118,   123,
     124,   129,   131,   135,   137,   138,   139,   140,   144,   147,
     148,   149,   153,   155,   156,   158,   159,   160,   163,   164,
     166,   167,   168,   169,   170,   171,   174,   175,   176,   179,
     180,   182,   183,   184,   187,   191,   193,   195,   197,   198,
     199,   200,   201,   202,   204,   208,   209,   210,   212,   215,
     216,   220,   221,   222,   223,   226,   227,   228,   230,   232,
     237,   238,   242,   244,   245,   247,   248,   252,   255,   256,
     257,   260,   263,   264,   270,   271,   273,   275,   277,   278,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   303,   304,   305,   307,
     308,   309,   310,   312,   313,   318,   319,   320,   321,   322,
     323,   326,   327,   329,   331,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   344,   345,   348,   349,   350,   351,
     355,   356,   361,   362,   363,   365,   366,   367,   368,   370,
     371,   380,   381,   382,   385,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   401,   402,   403,
     405,   407,   408,   409,   410,   411,   413,   414,   415,   418,
     422,   423,   424,   425,   426,   429,   430,   431,   432,   433,
     435,   436,   438,   439,   440,   443,   445,   447,   448,   450,
     451,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   466,   467,   471,   472,   473,   474,   478,   482,   484,
     485,   486,   487,   488,   490,   491,   492,   493,   494,   495,
     502,   503,   505,   508,   511,   512,   513,   516,   517,   519,
     520,   521,   522,   523,   524,   527,   528,   529,   530,   532,
     533,   535,   537,   538,   539,   540,   543,   544,   546,   547,
     548,   549,   555,   556,   557,   561,   562,   563,   564,   566,
     567,   569,   570,   572,   573,   576,   579,   581,   583,   584,
     585,   592,   595,   599,   600,   601,   602,   603,   604,   611,
     612,   614,   615,   616,   619,   691,  1433,  1437,  1441,  1442,
     303,   532,   536,  1472,  1472,   611,  1517,   111,   194,   277,
     474,   496,   533,   539,   575,   583,   673,   674,   892,   893,
     894,   981,   982,   983,  1330,  1282,   111,   168,   195,   229,
     277,   406,   474,   533,   539,   558,   583,   600,  1292,  1437,
    1090,   690,   639,  1430,  1432,  1437,   657,  1294,   395,   493,
    1388,   114,   229,   616,  1398,  1472,  1090,   631,   842,  1437,
    1384,   462,   583,  1472,  1090,  1297,  1378,   499,   722,   726,
     727,  1437,   690,  1517,  1437,  1119,  1121,  1122,  1444,  1348,
     726,   665,   666,  1434,    12,   486,   555,    12,   486,   536,
    1342,   395,   493,  1477,  1322,  1437,    32,    84,   155,   401,
     423,   455,   512,  1579,   468,   631,  1117,     0,   157,   643,
     401,   175,   389,  1365,  1430,  1437,   161,  1015,  1437,   161,
     691,   205,   691,   265,  1434,  1437,  1439,   787,   788,   791,
     814,  1437,   536,   225,   367,  1041,  1042,  1043,   168,  1010,
    1546,  1472,  1517,  1097,   698,   639,   665,  1062,  1084,    17,
    1518,   224,   895,   205,  1439,   789,   814,   690,   376,  1543,
    1547,  1548,  1549,  1550,  1551,   536,   893,   229,   229,   229,
     225,   284,   415,  1338,  1339,     7,    21,    29,    35,    37,
      38,    39,    41,    54,    55,    60,    61,    70,    73,    75,
      76,    77,    78,    79,    96,   100,   101,   106,   107,   110,
     111,   116,   117,   118,   123,   125,   128,   172,   177,   178,
     185,   199,   201,   206,   213,   220,   224,   236,   239,   257,
     262,   270,   281,   306,   311,   322,   326,   328,   332,   333,
     334,   335,   336,   343,   352,   353,   354,   358,   359,   363,
     384,   391,   396,   397,   399,   413,   441,   442,   454,   460,
     466,   514,   515,   521,   525,   526,   531,   542,   546,   547,
     548,   549,   559,   560,   561,   565,   568,   583,   588,   589,
     590,   591,   596,   598,   604,   619,   624,   625,   630,   631,
     634,   635,   638,   639,  1138,  1139,  1140,  1141,  1145,  1152,
    1153,  1154,  1155,  1156,  1157,  1165,  1169,  1180,  1417,  1419,
    1421,  1422,  1426,  1428,  1433,  1437,   224,  1291,  1291,  1291,
    1291,   205,  1291,  1291,   814,  1291,   690,  1291,  1472,   652,
    1368,    12,    13,   103,   132,   145,   168,   171,   182,   203,
     229,   236,   276,   407,   411,   427,   435,   443,   468,   481,
     482,   527,   558,   580,   582,  1488,  1490,  1492,  1493,  1437,
     368,    69,   419,   639,  1439,   130,   214,   284,  1299,  1437,
    1434,   209,   492,  1389,   240,  1394,  1471,  1472,   931,  1132,
      48,   843,   192,    35,   303,  1353,  1385,  1437,   690,  1092,
    1472,   130,   284,  1300,  1328,   303,   414,   486,  1379,  1380,
     592,   723,   476,   728,    12,   411,  1486,  1490,   553,  1518,
    1120,    12,   141,   214,   501,   502,   503,   504,   505,   506,
     518,  1126,  1127,  1128,  1542,    60,    61,   128,   202,   273,
     339,   391,   473,   555,   638,   955,  1437,  1445,  1457,  1461,
    1462,    12,    24,    36,    60,    68,    73,    99,   101,   103,
     112,   159,   164,   167,   193,   195,   202,   204,   228,   229,
     230,   251,   273,   303,   368,   394,   405,   406,   409,   410,
     430,   473,   486,   517,   535,   536,   584,   603,   955,   980,
    1349,  1353,  1354,  1356,  1364,  1458,   728,   512,   516,   487,
     665,   419,   608,  1052,  1053,  1054,   487,   665,  1341,  1437,
    1434,  1472,  1328,    37,   213,   542,  1418,  1435,  1578,  1578,
    1578,  1578,  1578,  1121,  1117,   632,   637,  1437,  1363,  1362,
     320,   540,   567,  1006,   581,   107,  1439,  1440,  1008,   793,
     815,  1437,  1007,   370,     6,    58,   145,   353,   418,   420,
     816,  1430,  1043,   691,   507,  1552,  1553,  1009,  1070,  1098,
    1099,  1100,  1101,  1430,   631,   699,  1437,   553,  1287,  1288,
    1430,  1287,    57,   355,   355,   434,  1519,   352,   353,  1144,
    1437,   792,   815,   189,     6,  1440,  1503,  1506,   442,    10,
     406,   558,   677,  1132,  1545,  1553,  1561,  1565,  1566,  1572,
     677,  1132,  1544,  1553,  1561,  1566,  1572,  1546,  1551,   895,
     895,   895,   895,   192,  1331,  1335,  1336,  1437,  1338,   631,
     631,   631,  1152,   631,   631,   631,  1138,  1183,   631,   631,
     631,   631,   631,   631,   631,   631,   631,   631,   631,   631,
     631,   631,  1137,  1137,   631,  1136,   631,   631,   631,   568,
     631,  1417,   631,   631,   631,   631,   631,   631,   631,   631,
     631,   631,   631,  1138,   631,   631,   631,   631,  1181,  1182,
    1426,  1437,   631,   631,   631,   631,   631,   631,   631,   631,
     631,  1138,  1136,   631,   631,   631,   631,   631,   631,   631,
     631,   631,   631,   631,   631,   631,   631,   631,   631,  1136,
     631,  1417,   631,   631,   631,  1417,   631,   631,    37,   213,
     542,   631,  1137,  1136,  1136,   631,   631,   631,   631,   631,
    1152,  1152,  1152,  1138,  1537,  1538,  1437,  1170,  1437,    16,
      17,   373,   376,   617,  1142,  1143,   161,   162,   196,   207,
     246,   258,   285,   346,  1146,    33,   142,   243,   266,   332,
     428,   479,   480,   494,   622,   623,   624,   625,   626,   627,
     628,   629,  1144,  1152,    72,   375,   633,  1435,   631,   639,
     172,  1437,   691,  1437,  1437,   815,   691,  1439,   825,  1354,
     691,  1440,  1502,  1286,  1291,   587,   653,    35,    68,   135,
     159,   163,   197,   216,   230,   278,   303,   405,   414,   429,
     447,   486,   488,   513,   535,   584,  1369,  1373,  1374,  1472,
     405,  1491,   457,   457,   533,   539,   583,   600,   371,  1495,
     532,   364,  1497,    67,   486,  1494,   112,   600,  1496,   364,
     633,    19,   161,  1233,  1234,  1479,  1437,   225,  1038,   493,
      90,   414,  1390,    50,    88,   284,  1400,  1430,  1473,  1474,
    1089,   632,  1138,   268,   271,   416,   844,   846,   638,   650,
    1434,   278,  1093,  1440,  1094,  1095,  1430,  1065,   240,  1288,
    1301,  1302,    50,  1381,   633,  1435,    56,    66,    81,    93,
      94,    95,   109,   321,   338,   464,   520,   538,   729,   731,
    1491,   364,   364,   462,  1520,  1519,   574,  1525,  1526,   626,
    1130,  1131,  1132,  1128,   476,   639,    35,   128,   161,   477,
     956,   957,  1312,  1439,   190,  1312,  1447,   638,  1439,    35,
     128,   959,   960,  1439,   639,  1448,  1446,  1312,   487,   167,
     266,   606,  1360,   631,   111,   168,   195,   406,   536,   558,
     600,  1360,    12,   904,  1439,   267,  1252,  1254,   192,   243,
    1355,  1357,    71,   513,   190,   513,   532,   493,    71,   513,
      12,    43,    97,   102,   245,   319,   382,   495,   529,  1343,
    1344,  1345,   665,   216,   513,   666,   513,  1252,  1360,  1357,
     278,   158,    74,   408,   532,   557,   190,   513,   595,  1055,
    1056,  1055,  1055,  1055,   366,   613,    91,   633,  1055,  1055,
    1288,  1038,   633,   365,  1581,   528,  1582,   250,   450,  1580,
     632,  1526,  1528,  1530,  1531,   157,   644,  1115,  1366,  1418,
    1437,   128,   890,   891,   901,   902,   964,   114,  1137,   638,
     692,     6,   794,   692,   631,   113,   811,   811,   811,     4,
    1005,  1011,   467,   600,  1553,  1071,  1072,  1288,   243,   633,
     390,  1109,  1111,  1112,   700,   701,  1138,   659,   175,   415,
     633,  1063,    59,   175,   179,   190,   318,   415,  1085,  1086,
    1087,    57,   434,   172,   672,   794,   114,   811,   222,   633,
    1132,  1132,  1132,   168,   195,   195,  1553,  1430,  1437,  1437,
    1437,  1289,  1290,  1430,  1431,  1437,   633,  1333,   639,  1337,
    1138,  1138,    12,   141,  1175,  1235,  1175,  1175,  1175,   605,
    1185,  1138,  1138,  1180,  1180,  1138,  1138,  1138,  1138,  1150,
    1151,  1138,  1138,  1138,  1138,   141,  1175,  1235,   632,   125,
     185,   213,   281,   359,   565,   632,  1261,  1264,  1265,   632,
    1138,  1138,  1138,  1138,  1426,  1537,   119,   120,   121,   122,
     123,   217,   218,   219,   220,   322,   324,   325,   326,   333,
     413,   465,   466,   604,   618,   619,  1230,  1231,  1180,   115,
     118,   546,   549,  1232,   141,  1172,  1138,  1138,  1138,  1138,
    1230,  1180,  1138,  1180,  1182,     9,   633,   639,   141,  1175,
    1138,  1138,   141,  1175,  1138,  1138,  1180,  1180,  1180,  1138,
    1138,  1138,  1180,  1141,  1138,  1138,  1138,  1138,  1138,  1138,
    1175,  1175,  1138,  1138,   141,  1175,  1138,  1231,  1231,  1138,
      46,   259,   554,  1138,  1138,   632,  1427,  1428,  1437,  1175,
    1175,  1138,  1138,   632,   633,   632,   468,   631,  1534,  1535,
    1138,   638,  1171,  1439,   639,  1138,  1138,  1138,  1140,   178,
     358,   560,   576,  1144,    12,    18,  1140,  1147,  1141,  1141,
     631,  1152,  1141,  1141,  1141,  1141,   266,  1141,  1141,   239,
    1141,   239,  1141,  1141,  1141,  1141,  1141,    33,   243,   266,
     428,  1439,  1152,  1138,  1158,  1437,   639,   364,   825,   356,
     602,   826,   827,   159,   633,  1287,  1284,   638,   654,   655,
     278,   278,   278,   278,    50,   278,   665,   278,   633,  1370,
     532,   631,  1507,  1440,  1507,  1507,  1507,   195,   406,   536,
    1489,  1493,  1437,   183,   349,  1437,  1480,  1481,  1301,  1434,
     583,  1138,  1391,  1104,   273,  1399,  1234,   633,  1287,  1133,
      74,   631,   850,   851,   850,   851,   389,   853,   210,   253,
    1439,    31,   553,  1386,   633,   553,   633,   553,  1287,  1302,
    1298,   665,  1380,   633,   161,   633,  1440,   195,   406,  1489,
    1437,    12,   141,  1533,   633,  1123,  1138,  1424,  1437,  1437,
      72,   962,  1138,  1440,   363,   391,   542,  1468,   247,   419,
    1463,  1464,  1465,  1466,   202,   273,   473,  1459,  1312,  1437,
     555,  1449,  1460,  1462,   633,  1451,    12,    35,   128,   364,
    1138,  1469,   513,   243,  1358,  1434,  1138,   626,   895,   691,
     691,   691,  1430,   691,  1430,   278,   337,   513,  1352,  1352,
     281,   359,   458,   565,  1255,  1256,  1419,  1437,  1360,  1437,
     691,  1360,  1440,  1355,  1360,  1434,   691,  1360,   244,   530,
     180,   190,  1346,   633,   167,   513,  1355,  1430,  1357,  1355,
    1355,  1138,  1360,  1360,  1050,   433,   508,  1057,  1058,  1049,
    1048,   490,  1054,   468,   631,   635,  1186,  1187,  1188,  1189,
    1190,  1199,  1200,  1214,  1418,   393,  1583,   374,  1248,  1254,
    1532,   891,    72,   955,   137,  1439,    82,    96,   255,   330,
     355,   417,   507,   694,   696,   424,   569,   812,   813,   232,
     808,   809,   810,   817,   825,   827,   111,   215,   380,   391,
     398,   491,   583,   675,   676,  1434,    25,   310,   802,   803,
     804,   817,   818,   819,   825,   827,   795,   796,   802,     6,
      13,    15,    26,    28,    58,    63,    64,    70,    82,    90,
     100,   114,   131,   138,   139,   145,   153,   159,   188,   227,
     229,   237,   252,   309,   327,   331,   369,   374,   381,   383,
     390,   391,   422,   436,   437,   438,   439,   459,   517,   533,
     537,   556,   561,   574,   838,   897,   899,   901,   902,  1016,
    1020,  1022,  1025,  1031,  1032,  1033,  1244,  1433,   364,   685,
    1012,   129,   242,  1430,   633,   392,  1073,   128,  1102,  1437,
    1100,  1430,   840,  1111,   229,   253,   978,  1113,   632,   633,
     226,   286,   287,   288,   289,   290,   291,   292,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   304,   305,   431,
     432,   660,   661,   664,  1288,   581,  1086,   889,   890,    82,
     350,   425,   570,   805,   806,   807,   817,   821,   822,   823,
     824,   825,   827,   612,   586,   790,    48,   599,   608,  1504,
    1506,   195,   691,   691,   895,   691,  1437,   668,   984,   985,
     984,   984,   633,  1334,  1332,   639,  1337,  1336,   192,   626,
    1437,   633,   632,  1175,   632,  1176,   632,   632,   632,  1138,
     151,   605,  1184,    19,   632,   587,   632,   632,   632,   633,
     632,   633,   632,   633,   633,   633,   633,   587,   633,  1166,
     632,   626,   632,   633,   633,   632,   632,   632,   632,   192,
     632,   633,  1168,   632,   633,   633,   633,   625,   632,   633,
     632,   632,   631,  1426,  1437,  1175,   632,   632,   632,  1175,
     632,   633,   632,   632,   632,   632,   632,   632,   633,   632,
     243,   632,   633,   633,   633,   633,   632,   632,   632,   633,
     192,   633,  1175,   632,   632,   633,   633,   633,   632,   192,
    1138,   192,  1138,   192,  1138,   192,   632,   633,   632,   632,
     632,   632,   633,   632,  1180,  1204,  1205,  1206,   468,   631,
    1118,  1529,  1530,   574,  1539,   636,  1459,   477,  1437,   178,
     358,   560,   576,   631,    17,  1138,  1537,   166,  1240,  1141,
    1138,  1138,  1141,   631,  1152,  1141,  1132,  1162,  1163,  1164,
     631,   639,  1437,  1430,   826,  1312,  1313,  1440,    52,   449,
    1044,  1287,  1439,   633,   665,  1374,  1287,  1375,  1437,  1508,
    1509,   553,   626,  1430,  1437,  1501,  1501,  1501,   161,   183,
     196,   207,   256,   258,   285,   349,   403,  1482,  1484,   606,
    1236,  1295,  1440,  1105,  1106,  1107,  1108,  1430,   231,   284,
     419,   613,  1475,  1474,   631,  1132,  1261,   524,   854,   845,
     631,  1138,  1434,  1440,  1440,  1095,  1430,   175,   415,   585,
    1066,  1067,  1068,   468,   476,   591,   592,   631,   885,  1303,
    1306,    12,  1382,   731,   118,   546,   549,   730,  1169,  1421,
    1426,   203,   192,  1501,  1501,  1501,  1527,  1131,   192,   240,
    1124,  1125,  1247,  1248,  1276,  1133,  1133,   639,   128,   961,
     963,  1439,  1312,   631,   631,   264,   366,   613,   633,   633,
     639,   639,   639,  1462,  1138,  1463,  1450,  1312,  1452,  1453,
    1434,   192,  1359,   632,  1437,   170,   458,   362,   633,  1360,
     414,  1252,  1345,  1358,  1360,  1355,  1430,  1360,  1360,   579,
    1059,   633,  1059,  1213,  1437,   104,   233,   250,   262,   342,
     454,   518,  1197,  1198,   476,   633,  1430,  1213,   633,   190,
    1584,    48,  1252,  1313,  1313,   340,  1434,   507,   507,   507,
     507,   507,   467,  1434,  1434,  1313,   633,   810,  1434,  1434,
    1434,  1434,   125,   185,   213,   281,   359,   565,  1260,  1434,
    1434,   632,   633,  1313,  1313,   633,   804,   797,   798,   817,
     818,   819,    80,    92,   390,   913,   920,   921,   976,   978,
     982,   983,  1037,  1037,   390,  1313,  1313,  1037,  1313,   390,
     390,  1313,  1313,   553,   137,  1313,   251,   533,   189,   390,
     404,   978,  1037,   251,  1313,   533,   137,  1313,  1313,  1313,
    1313,  1037,   390,    48,  1313,  1313,   840,  1313,   390,   388,
      19,   161,   553,  1046,   390,   390,  1313,   140,   319,  1437,
    1313,  1313,   390,  1313,   897,   633,   837,   838,  1020,   631,
     639,   912,   922,  1429,  1437,  1312,    86,   463,   437,  1013,
    1554,  1072,   190,  1110,   631,  1138,   161,   161,   161,   161,
     161,   161,   161,   161,   161,   161,   161,   161,   161,   161,
     161,   161,   161,   161,   161,   161,   161,   633,  1313,  1313,
    1313,  1313,   633,   807,  1439,   277,   176,   799,   800,   801,
     817,   818,   819,   820,   823,   824,   825,   827,   391,   542,
    1439,  1437,  1573,     8,    31,   785,   691,   631,   451,   266,
     631,   829,   832,   896,   898,   899,   563,   587,   992,   364,
     364,   364,  1290,  1437,   587,  1236,  1437,  1187,   639,  1337,
     239,  1138,   632,  1138,   545,  1138,  1138,   155,    35,    61,
     115,   118,   126,   143,   241,   344,   484,   549,   578,  1177,
     956,  1151,  1138,  1150,  1180,  1138,  1138,   956,  1177,  1180,
     632,   239,   239,  1138,  1138,  1180,  1138,  1138,  1138,  1138,
    1138,  1141,   632,   632,  1138,  1138,  1138,  1138,  1138,  1138,
    1180,   239,  1138,  1138,  1138,   632,  1138,  1138,  1138,  1138,
     192,  1138,   192,  1138,   192,  1138,  1138,  1138,   632,  1540,
    1541,  1542,  1205,  1118,   632,  1533,  1439,  1138,  1537,  1140,
     632,   633,   632,  1152,  1230,  1230,    17,  1138,  1537,  1240,
    1138,   632,   633,  1179,  1180,  1437,  1285,   903,  1439,  1044,
     655,  1371,   632,   633,  1503,   639,   639,   553,   553,   553,
    1483,  1237,  1253,  1254,  1303,   633,  1109,  1111,   542,  1436,
     613,   273,    88,   847,   848,   849,  1437,   859,  1141,    48,
     631,   861,   851,   847,   553,  1067,   886,  1304,   631,  1309,
    1314,  1309,   632,   885,  1305,  1423,  1424,  1427,  1437,  1307,
     161,   371,  1502,   192,   192,   192,  1116,   146,  1187,  1277,
     190,   276,  1129,  1276,  1253,  1125,    19,  1134,  1434,  1437,
     626,  1437,  1468,   542,   542,   419,   440,   471,  1467,  1465,
    1464,  1312,  1451,  1469,   633,  1455,  1457,  1461,   125,   185,
     281,   359,   565,  1262,  1350,   164,   603,  1256,  1257,   170,
    1256,  1256,   359,  1359,  1236,  1355,   664,  1060,  1058,  1201,
    1208,  1213,  1186,   250,   250,   377,  1215,   262,   454,  1197,
    1215,  1186,  1324,  1325,  1427,  1188,  1234,  1210,  1211,  1260,
     323,  1249,   963,   957,   114,   114,   129,   242,   221,   828,
    1261,   810,   676,   828,   828,   804,   633,   798,  1000,  1429,
     895,    64,   189,   404,   575,   919,   977,   895,  1001,   978,
     979,   979,   895,  1429,  1090,  1262,  1260,  1291,  1260,    12,
    1021,  1029,  1030,  1437,  1090,  1434,  1434,   955,  1313,  1260,
     253,  1291,   253,  1291,  1291,   903,  1313,   183,   256,   355,
     906,  1260,  1262,  1262,  1291,  1090,  1245,  1246,  1427,   128,
    1260,   128,  1260,  1266,   839,  1434,  1090,  1430,  1090,  1090,
      85,    87,   128,   149,   184,   382,   426,   905,  1260,  1266,
    1021,   900,     6,   145,  1033,   909,   910,   911,   912,   913,
    1437,     8,   183,  1045,   427,   918,   919,   970,   923,   639,
     128,   213,   281,   359,   565,  1263,  1264,  1434,  1437,   353,
     402,    23,   169,   679,   553,   138,   153,   681,   631,  1555,
      12,    74,  1074,   631,   404,  1226,  1227,  1228,  1437,   631,
    1260,  1260,  1434,  1434,  1262,  1434,  1260,  1434,  1434,  1434,
    1434,  1434,  1434,  1434,  1260,  1260,  1434,  1422,  1434,  1260,
     661,  1434,  1261,   828,   828,   807,   370,   205,  1313,   633,
     801,   542,    19,   587,  1505,   451,   631,   132,   236,   580,
     786,   678,  1567,   126,   241,   421,   519,   908,  1430,   266,
     885,   909,   836,   837,   633,   898,    47,   210,   461,   997,
     997,  1430,  1430,  1430,   639,  1187,  1247,  1337,  1236,  1138,
     632,  1138,   545,   631,   947,   948,   948,   948,   631,   942,
     943,   947,  1178,   948,   241,   948,   241,   632,   632,   632,
      19,  1148,   632,    19,   632,   632,   632,  1167,  1138,  1138,
     632,   632,  1174,  1248,   633,   633,   632,   633,   632,   243,
    1159,  1160,   632,   632,   632,   632,   633,   632,   632,  1138,
     632,   190,   632,   632,   633,   632,   633,   633,   632,  1138,
     632,  1138,   632,  1138,   632,   632,   632,  1130,  1542,   632,
    1536,   639,  1002,   632,  1180,  1140,   632,   633,   632,  1133,
    1164,   632,   608,  1372,  1509,   608,  1512,   626,   626,  1503,
    1503,  1503,   631,  1138,   364,  1319,  1107,  1430,  1111,   225,
    1114,  1395,   632,   633,  1133,   846,   390,   862,   863,   632,
    1440,  1126,  1310,  1311,  1427,  1315,   633,   631,  1306,   632,
     632,   633,   639,  1525,   730,   192,  1502,  1502,  1502,  1236,
    1236,   147,   378,  1272,  1273,  1278,   580,   243,  1434,  1437,
     639,   632,   632,    83,   566,   419,  1469,  1454,  1456,  1252,
    1257,  1351,  1360,   633,   574,   632,  1529,  1209,   636,   250,
    1215,  1215,  1199,   250,   364,   587,   633,  1323,  1312,  1224,
    1225,  1126,  1138,  1250,  1425,   798,  1090,   631,   253,   253,
     979,  1000,  1000,   985,  1001,  1001,   145,   476,  1021,  1429,
    1018,   633,  1261,   957,  1434,  1291,  1029,  1429,  1429,  1434,
    1429,  1021,   633,    20,   133,  1251,   843,  1021,  1026,  1021,
     631,   632,   633,  1437,  1430,    34,    35,    40,    42,    44,
      45,    61,   115,   118,   126,   143,   160,   184,   186,   199,
     200,   241,   270,   279,   280,   282,   315,   316,   317,   334,
     335,   336,   341,   344,   360,   361,   396,   397,   421,   472,
     476,   489,   543,   546,   549,   550,   551,   552,   593,   594,
     619,   924,   932,   935,   936,   937,   938,   939,   940,   941,
    1437,   402,  1138,  1138,   364,   685,   691,   364,    82,   686,
    1437,  1556,    19,    12,   631,  1075,  1021,   632,   633,   662,
     663,  1260,   631,  1437,   828,   801,  1434,   908,  1574,   364,
     364,   702,   703,   705,  1437,   493,  1430,   632,   632,   225,
     442,   833,  1401,   898,   669,   670,   671,  1437,  1236,   267,
    1258,  1230,  1138,   125,   281,   359,   565,    21,    35,    49,
     572,   955,   965,   966,   967,   359,   631,   943,   949,   115,
     118,   126,   143,   186,   241,   341,   344,   421,   549,   578,
     936,   937,  1149,  1177,   632,  1230,  1230,   470,  1173,  1138,
    1138,  1180,    44,   342,   632,   608,  1161,  1138,  1230,  1138,
    1138,  1138,  1138,   632,   632,   632,  1207,  1534,  1437,   632,
    1180,  1134,   419,   203,   444,  1510,  1510,  1510,   128,  1138,
    1317,  1318,   148,  1114,   260,  1401,   849,   632,   210,   253,
     864,   632,   633,  1130,   633,  1312,  1316,  1317,  1314,  1308,
    1306,  1423,  1437,  1502,  1253,   205,  1241,  1436,  1436,   638,
    1274,  1275,  1439,   478,   626,  1455,  1460,  1252,   664,  1533,
    1234,  1189,  1186,  1199,   250,   250,  1186,  1199,  1191,  1192,
    1325,  1236,  1318,  1222,  1223,  1130,   633,  1251,  1023,  1138,
    1001,   985,   631,   984,   984,   128,   128,  1034,  1085,  1030,
     962,  1000,  1044,  1035,  1017,  1246,  1027,  1029,  1019,  1375,
     911,   631,   971,   947,   947,   948,   948,   942,   400,   933,
     942,   942,   967,    61,   593,   936,   938,   967,   967,    61,
     594,   594,   597,   942,   934,   948,   948,   948,   967,   947,
     948,    26,    72,    82,   128,   198,   358,   364,   404,   472,
     575,   925,   950,   951,   952,   969,  1144,  1433,   597,   947,
     967,    35,   947,   968,   947,   947,   948,   949,   639,  1230,
     486,  1434,   144,  1014,   632,   633,  1557,  1558,  1076,   228,
     632,  1227,   632,   633,   675,   493,   234,   243,   379,   706,
     707,   708,   709,  1132,   463,   632,   633,   704,  1434,   632,
     831,   830,    19,   888,   631,   631,   631,   458,  1256,   632,
     632,   632,   632,   632,    35,    21,   572,   955,    35,   956,
     633,   359,   948,   942,    61,   948,   241,   967,   632,   632,
     632,  1418,   632,   632,   633,   632,   329,   255,   414,   632,
     632,   632,   632,   632,   632,   907,  1125,  1253,  1529,   632,
     276,   371,    65,   248,   351,   509,   522,   614,  1499,  1500,
     608,  1511,  1511,  1511,   632,   633,  1320,   240,   631,   852,
     631,   865,  1437,   863,   887,  1311,  1318,   632,  1528,    48,
     211,  1238,  1279,  1439,   633,   329,  1202,   364,  1194,  1199,
    1199,   364,  1196,  1138,   631,  1247,   188,   225,   586,  1217,
    1218,  1221,  1212,  1425,   389,   631,  1024,   632,   631,   631,
     998,   999,  1437,   631,   631,   118,   546,   549,   624,   625,
    1420,  1421,   922,   924,  1090,  1028,  1066,   632,   972,  1437,
     306,   973,   484,   578,   620,   944,   945,   946,   631,   944,
     944,   967,   597,   944,   631,   967,   944,   961,  1434,   354,
     954,  1420,    14,   580,   128,   253,    19,   952,   253,   358,
    1312,   967,   968,   967,   968,   944,   944,  1437,   680,   687,
     688,  1437,   468,   631,  1559,  1079,  1437,    12,   631,  1077,
     663,   632,  1434,   632,   633,   704,  1562,   679,  1568,   705,
     932,   953,  1528,   896,   631,   885,   998,   998,   998,   170,
     458,   956,   968,   359,  1138,   329,   174,  1129,  1129,    17,
    1376,   542,   542,   542,    17,  1498,   203,   307,   308,   312,
     313,  1513,  1514,  1318,   253,   536,  1132,   855,   857,   858,
    1437,   591,   866,   907,  1242,  1425,  1239,  1247,   955,   958,
    1275,  1534,  1193,   587,  1195,   587,  1229,  1437,  1258,   978,
     978,  1218,   907,  1251,  1261,   862,   998,   998,   632,   633,
    1251,   631,   998,   998,  1422,  1422,  1045,  1036,   240,   632,
     633,   193,   387,   485,   364,   974,   946,  1003,  1418,  1003,
     631,  1135,   354,   592,   631,   128,  1263,  1434,  1437,   511,
     682,    54,    69,   181,   224,   249,   261,   368,   452,   689,
     736,   738,   739,   740,   742,   743,   744,   745,   746,   747,
     749,   757,   758,   761,   772,   775,   777,   778,  1433,  1438,
    1442,  1119,  1117,   608,  1560,   632,   633,  1078,  1575,   708,
    1437,  1430,   684,   685,   451,   962,   836,   885,   834,   632,
     632,   632,   170,   632,   632,   138,  1499,   371,  1260,  1260,
    1260,   359,   624,  1259,  1514,   580,  1430,   859,   523,   860,
     632,   633,   243,   263,    82,    90,   114,   229,   309,   327,
     350,   533,   882,   883,   884,  1354,   609,   610,   633,  1243,
    1251,  1138,  1253,   957,  1280,  1203,  1138,   631,  1138,   631,
     632,   633,   190,  1216,  1216,   632,   632,   632,   914,   999,
     359,   632,   632,  1045,   631,  1437,   132,   580,   632,   633,
     632,   632,  1261,  1135,   931,  1138,   156,   683,   759,   762,
    1437,   192,   349,   750,   737,  1438,  1438,  1437,   741,   646,
     283,   441,   607,   781,    32,   779,   640,   632,    53,    64,
     273,  1437,   404,  1080,  1081,  1437,   693,   953,   190,   681,
    1569,   833,   632,  1525,    82,   252,   986,   989,   992,   993,
     994,  1433,   608,   987,   991,   993,   996,   988,   990,   993,
     995,    62,   281,   359,  1326,  1327,  1427,  1396,  1133,  1261,
     856,   858,   868,   544,  1313,  1313,   137,   137,  1313,  1313,
    1313,  1313,   631,   877,   884,   159,  1425,   406,  1267,    74,
    1402,  1529,  1229,  1229,  1437,   205,   250,   374,  1220,  1219,
     970,   917,   986,  1251,   632,   915,   916,   862,    52,   355,
     449,   476,   975,   975,   967,  1418,   967,   632,   632,  1138,
    1138,   605,   764,   768,   192,  1437,   752,   753,  1138,   711,
     735,   736,   738,   740,   742,   744,   745,   746,   747,   749,
     757,   772,   775,   777,   711,   782,   780,   773,   776,  1528,
      64,   371,    64,   632,   633,   136,   694,   695,  1144,  1576,
    1132,   686,   953,   835,  1434,  1313,   994,  1312,   385,   996,
     995,   633,  1312,   958,   632,   860,   631,   870,   872,   867,
    1434,  1434,  1313,  1313,  1263,  1263,  1261,  1439,   524,   878,
     879,  1313,  1251,  1437,   154,   165,   372,   541,  1403,  1404,
     269,  1405,   632,   632,    48,    48,   631,   631,   986,   987,
     988,   632,     5,   128,   358,   364,   364,   392,   601,   926,
     760,   769,   151,   768,   771,   240,   155,  1138,   155,   735,
     637,   579,  1138,   712,   781,   779,   371,   371,  1081,   136,
     735,  1563,   144,  1570,  1528,  1260,   128,  1263,  1434,  1437,
    1433,  1327,  1318,  1397,   631,   871,   872,   873,   314,   869,
     872,  1434,  1434,   880,   632,   633,   903,  1268,    48,    48,
     154,    48,  1404,   510,   541,  1406,  1407,  1226,  1228,   580,
     132,    82,   575,   927,   928,   929,   605,   763,   765,  1138,
     711,   155,   748,   224,   545,   283,   637,   784,   144,   127,
     710,   713,   774,  1438,   774,   150,   687,   693,   458,  1408,
     632,   633,   314,   875,   876,  1141,   881,  1439,   879,   631,
    1418,  1418,    48,  1418,    48,    48,  1407,   632,   632,   975,
     975,  1434,   253,   929,   766,   765,   771,   770,    54,   751,
    1437,   754,  1138,   783,    98,   173,   718,   733,  1437,   155,
     735,   637,   460,  1571,   222,  1402,   872,   633,   874,   882,
    1132,  1269,  1270,  1271,  1418,  1418,  1418,  1138,   155,   545,
     633,   711,   155,   711,   208,   633,   714,    89,   108,   637,
    1564,   735,    48,  1405,   876,   632,  1138,   632,   633,   767,
      54,   711,  1437,   755,   441,   155,   190,  1437,   953,   190,
     190,   735,  1418,   225,  1409,  1133,  1271,   545,   151,   152,
     756,   607,   715,   128,   734,   721,   722,  1260,   716,   717,
     359,   631,  1411,   711,   711,   752,   498,   500,   719,   720,
     721,   724,  1144,  1437,  1138,  1115,   269,   458,  1410,   632,
     638,  1412,  1413,  1427,   476,  1414,   633,   735,   191,  1439,
     632,   633,  1415,  1416,  1427,   720,  1413,   633,  1312,  1416,
    1132,  1318,  1133
};

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		(-2)
#define YYEOF		0

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrorlab


/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */

#define YYFAIL		goto yyerrlab

#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yytoken = YYTRANSLATE (yychar);				\
      YYPOPSTACK (1);						\
      goto yybackup;						\
    }								\
  else								\
    {								\
      yyerror (YY_("syntax error: cannot back up")); \
      YYERROR;							\
    }								\
while (YYID (0))


#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#define YYRHSLOC(Rhs, K) ((Rhs)[K])
#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)				\
    do									\
      if (YYID (N))                                                    \
	{								\
	  (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;	\
	  (Current).first_column = YYRHSLOC (Rhs, 1).first_column;	\
	  (Current).last_line    = YYRHSLOC (Rhs, N).last_line;		\
	  (Current).last_column  = YYRHSLOC (Rhs, N).last_column;	\
	}								\
      else								\
	{								\
	  (Current).first_line   = (Current).last_line   =		\
	    YYRHSLOC (Rhs, 0).last_line;				\
	  (Current).first_column = (Current).last_column =		\
	    YYRHSLOC (Rhs, 0).last_column;				\
	}								\
    while (YYID (0))
#endif


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if YYLTYPE_IS_TRIVIAL
#  define YY_LOCATION_PRINT(File, Loc)			\
     fprintf (File, "%d.%d-%d.%d",			\
	      (Loc).first_line, (Loc).first_column,	\
	      (Loc).last_line,  (Loc).last_column)
# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#ifdef YYLEX_PARAM
# define YYLEX yylex (&yylval, YYLEX_PARAM)
#else
# define YYLEX yylex (&yylval)
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (YYID (0))

# define YY_SYMBOL_PRINT(Title, Type, Value, Location)			  \
do {									  \
  if (yydebug)								  \
    {									  \
      YYFPRINTF (stderr, "%s ", Title);					  \
      yy_symbol_print (stderr,						  \
		  Type, Value); \
      YYFPRINTF (stderr, "\n");						  \
    }									  \
} while (YYID (0))


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)
#else
static void
yy_symbol_value_print (yyoutput, yytype, yyvaluep)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
#endif
{
  if (!yyvaluep)
    return;
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# else
  YYUSE (yyoutput);
# endif
  switch (yytype)
    {
      default:
	break;
    }
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)
#else
static void
yy_symbol_print (yyoutput, yytype, yyvaluep)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
#endif
{
  if (yytype < YYNTOKENS)
    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);

  yy_symbol_value_print (yyoutput, yytype, yyvaluep);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
#else
static void
yy_stack_print (yybottom, yytop)
    yytype_int16 *yybottom;
    yytype_int16 *yytop;
#endif
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)				\
do {								\
  if (yydebug)							\
    yy_stack_print ((Bottom), (Top));				\
} while (YYID (0))


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_reduce_print (YYSTYPE *yyvsp, int yyrule)
#else
static void
yy_reduce_print (yyvsp, yyrule)
    YYSTYPE *yyvsp;
    int yyrule;
#endif
{
  int yynrhs = yyr2[yyrule];
  int yyi;
  unsigned long int yylno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
	     yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
		       &(yyvsp[(yyi + 1) - (yynrhs)])
		       		       );
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug)				\
    yy_reduce_print (yyvsp, Rule); \
} while (YYID (0))

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif



#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static YYSIZE_T
yystrlen (const char *yystr)
#else
static YYSIZE_T
yystrlen (yystr)
    const char *yystr;
#endif
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static char *
yystpcpy (char *yydest, const char *yysrc)
#else
static char *
yystpcpy (yydest, yysrc)
    char *yydest;
    const char *yysrc;
#endif
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
	switch (*++yyp)
	  {
	  case '\'':
	  case ',':
	    goto do_not_strip_quotes;

	  case '\\':
	    if (*++yyp != '\\')
	      goto do_not_strip_quotes;
	    /* Fall through.  */
	  default:
	    if (yyres)
	      yyres[yyn] = *yyp;
	    yyn++;
	    break;

	  case '"':
	    if (yyres)
	      yyres[yyn] = '\0';
	    return yyn;
	  }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into YYRESULT an error message about the unexpected token
   YYCHAR while in state YYSTATE.  Return the number of bytes copied,
   including the terminating null byte.  If YYRESULT is null, do not
   copy anything; just return the number of bytes that would be
   copied.  As a special case, return 0 if an ordinary "syntax error"
   message will do.  Return YYSIZE_MAXIMUM if overflow occurs during
   size calculation.  */
static YYSIZE_T
yysyntax_error (char *yyresult, int yystate, int yychar)
{
  int yyn = yypact[yystate];

  if (! (YYPACT_NINF < yyn && yyn <= YYLAST))
    return 0;
  else
    {
      int yytype = YYTRANSLATE (yychar);
      YYSIZE_T yysize0 = yytnamerr (0, yytname[yytype]);
      YYSIZE_T yysize = yysize0;
      YYSIZE_T yysize1;
      int yysize_overflow = 0;
      enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
      char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
      int yyx;

# if 0
      /* This is so xgettext sees the translatable formats that are
	 constructed on the fly.  */
      YY_("syntax error, unexpected %s");
      YY_("syntax error, unexpected %s, expecting %s");
      YY_("syntax error, unexpected %s, expecting %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s");
# endif
      char *yyfmt;
      char const *yyf;
      static char const yyunexpected[] = "syntax error, unexpected %s";
      static char const yyexpecting[] = ", expecting %s";
      static char const yyor[] = " or %s";
      char yyformat[sizeof yyunexpected
		    + sizeof yyexpecting - 1
		    + ((YYERROR_VERBOSE_ARGS_MAXIMUM - 2)
		       * (sizeof yyor - 1))];
      char const *yyprefix = yyexpecting;

      /* Start YYX at -YYN if negative to avoid negative indexes in
	 YYCHECK.  */
      int yyxbegin = yyn < 0 ? -yyn : 0;

      /* Stay within bounds of both yycheck and yytname.  */
      int yychecklim = YYLAST - yyn + 1;
      int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
      int yycount = 1;

      yyarg[0] = yytname[yytype];
      yyfmt = yystpcpy (yyformat, yyunexpected);

      for (yyx = yyxbegin; yyx < yyxend; ++yyx)
	if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
	  {
	    if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
	      {
		yycount = 1;
		yysize = yysize0;
		yyformat[sizeof yyunexpected - 1] = '\0';
		break;
	      }
	    yyarg[yycount++] = yytname[yyx];
	    yysize1 = yysize + yytnamerr (0, yytname[yyx]);
	    yysize_overflow |= (yysize1 < yysize);
	    yysize = yysize1;
	    yyfmt = yystpcpy (yyfmt, yyprefix);
	    yyprefix = yyor;
	  }

      yyf = YY_(yyformat);
      yysize1 = yysize + yystrlen (yyf);
      yysize_overflow |= (yysize1 < yysize);
      yysize = yysize1;

      if (yysize_overflow)
	return YYSIZE_MAXIMUM;

      if (yyresult)
	{
	  /* Avoid sprintf, as that infringes on the user's name space.
	     Don't have undefined behavior even if the translation
	     produced a string with the wrong number of "%s"s.  */
	  char *yyp = yyresult;
	  int yyi = 0;
	  while ((*yyp = *yyf) != '\0')
	    {
	      if (*yyp == '%' && yyf[1] == 's' && yyi < yycount)
		{
		  yyp += yytnamerr (yyp, yyarg[yyi++]);
		  yyf += 2;
		}
	      else
		{
		  yyp++;
		  yyf++;
		}
	    }
	}
      return yysize;
    }
}
#endif /* YYERROR_VERBOSE */


/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep)
#else
static void
yydestruct (yymsg, yytype, yyvaluep)
    const char *yymsg;
    int yytype;
    YYSTYPE *yyvaluep;
#endif
{
  YYUSE (yyvaluep);

  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  switch (yytype)
    {

      default:
	break;
    }
}

/* Prevent warnings from -Wmissing-prototypes.  */
#ifdef YYPARSE_PARAM
#if defined __STDC__ || defined __cplusplus
int yyparse (void *YYPARSE_PARAM);
#else
int yyparse ();
#endif
#else /* ! YYPARSE_PARAM */
#if defined __STDC__ || defined __cplusplus
int yyparse (void);
#else
int yyparse ();
#endif
#endif /* ! YYPARSE_PARAM */





/*-------------------------.
| yyparse or yypush_parse.  |
`-------------------------*/

#ifdef YYPARSE_PARAM
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void *YYPARSE_PARAM)
#else
int
yyparse (YYPARSE_PARAM)
    void *YYPARSE_PARAM;
#endif
#else /* ! YYPARSE_PARAM */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void)
#else
int
yyparse ()

#endif
#endif
{
/* The lookahead symbol.  */
int yychar;

/* The semantic value of the lookahead symbol.  */
YYSTYPE yylval;

    /* Number of syntax errors so far.  */
    int yynerrs;

    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       `yyss': related to states.
       `yyvs': related to semantic values.

       Refer to the stacks thru separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    YYSIZE_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yytoken = 0;
  yyss = yyssa;
  yyvs = yyvsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */
  yyssp = yyss;
  yyvsp = yyvs;

  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack.  Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	yytype_int16 *yyss1 = yyss;

	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
	yyoverflow (YY_("memory exhausted"),
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yystacksize);

	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
	goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
	yystacksize = YYMAXDEPTH;

      {
	yytype_int16 *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyexhaustedlab;
	YYSTACK_RELOCATE (yyss_alloc, yyss);
	YYSTACK_RELOCATE (yyvs_alloc, yyvs);
#  undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yyn == YYPACT_NINF)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yyn == 0 || yyn == YYTABLE_NINF)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token.  */
  yychar = YYEMPTY;

  yystate = yyn;
  *++yyvsp = yylval;

  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];


  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 2:

/* Line 1455 of yacc.c  */
#line 1833 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            if (!thd->bootstrap &&
              (!(thd->lex->select_lex.options & OPTION_FOUND_COMMENT)))
            {
              my_message(ER_EMPTY_QUERY, ER(ER_EMPTY_QUERY), MYF(0));
              MYSQL_YYABORT;
            }
            thd->lex->sql_command= SQLCOM_EMPTY_QUERY;
            YYLIP->found_semicolon= NULL;
          }
    break;

  case 3:

/* Line 1455 of yacc.c  */
#line 1845 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex_input_stream *lip = YYLIP;

            if ((YYTHD->client_capabilities & CLIENT_MULTI_QUERIES) &&
                lip->multi_statements &&
                ! lip->eof())
            {
              /*
                We found a well formed query, and multi queries are allowed:
                - force the parser to stop after the ';'
                - mark the start of the next query for the next invocation
                  of the parser.
              */
              lip->next_state= MY_LEX_END;
              lip->found_semicolon= lip->get_ptr();
            }
            else
            {
              /* Single query, terminated. */
              lip->found_semicolon= NULL;
            }
          }
    break;

  case 5:

/* Line 1455 of yacc.c  */
#line 1870 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* Single query, not terminated. */
            YYLIP->found_semicolon= NULL;
          }
    break;

  case 63:

/* Line 1455 of yacc.c  */
#line 1945 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_DEALLOCATE_PREPARE;
            lex->prepared_stmt_name= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 66:

/* Line 1455 of yacc.c  */
#line 1960 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_PREPARE;
            lex->prepared_stmt_name= (yyvsp[(2) - (4)].lex_str);
          }
    break;

  case 67:

/* Line 1455 of yacc.c  */
#line 1970 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->prepared_stmt_code= (yyvsp[(1) - (1)].lex_str);
            lex->prepared_stmt_code_is_varref= FALSE;
          }
    break;

  case 68:

/* Line 1455 of yacc.c  */
#line 1977 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->prepared_stmt_code= (yyvsp[(2) - (2)].lex_str);
            lex->prepared_stmt_code_is_varref= TRUE;
          }
    break;

  case 69:

/* Line 1455 of yacc.c  */
#line 1987 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_EXECUTE;
            lex->prepared_stmt_name= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 70:

/* Line 1455 of yacc.c  */
#line 1994 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 75:

/* Line 1455 of yacc.c  */
#line 2009 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            LEX_STRING *lexstr= (LEX_STRING*)sql_memdup(&(yyvsp[(2) - (2)].lex_str), sizeof(LEX_STRING));
            if (!lexstr || lex->prepared_stmt_params.push_back(lexstr))
              MYSQL_YYABORT;
          }
    break;

  case 76:

/* Line 1455 of yacc.c  */
#line 2021 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HELP");
              MYSQL_YYABORT;
            }
          }
    break;

  case 77:

/* Line 1455 of yacc.c  */
#line 2029 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_HELP;
            lex->help_arg= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 78:

/* Line 1455 of yacc.c  */
#line 2040 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_CHANGE_MASTER;
          }
    break;

  case 79:

/* Line 1455 of yacc.c  */
#line 2044 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 82:

/* Line 1455 of yacc.c  */
#line 2054 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.host = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 83:

/* Line 1455 of yacc.c  */
#line 2058 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.user = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 84:

/* Line 1455 of yacc.c  */
#line 2062 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.password = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 85:

/* Line 1455 of yacc.c  */
#line 2066 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.port = (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 86:

/* Line 1455 of yacc.c  */
#line 2070 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.connect_retry = (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 87:

/* Line 1455 of yacc.c  */
#line 2074 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.ssl= (yyvsp[(3) - (3)].ulong_num) ? 
              LEX_MASTER_INFO::LEX_MI_ENABLE : LEX_MASTER_INFO::LEX_MI_DISABLE;
          }
    break;

  case 88:

/* Line 1455 of yacc.c  */
#line 2079 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_ca= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 89:

/* Line 1455 of yacc.c  */
#line 2083 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_capath= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 90:

/* Line 1455 of yacc.c  */
#line 2087 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_cert= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 91:

/* Line 1455 of yacc.c  */
#line 2091 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_cipher= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 92:

/* Line 1455 of yacc.c  */
#line 2095 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_key= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 93:

/* Line 1455 of yacc.c  */
#line 2099 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_verify_server_cert= (yyvsp[(3) - (3)].ulong_num) ?
              LEX_MASTER_INFO::LEX_MI_ENABLE : LEX_MASTER_INFO::LEX_MI_DISABLE;
          }
    break;

  case 94:

/* Line 1455 of yacc.c  */
#line 2104 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_crl= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 95:

/* Line 1455 of yacc.c  */
#line 2108 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_crlpath= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 96:

/* Line 1455 of yacc.c  */
#line 2113 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.heartbeat_period= (float) (yyvsp[(3) - (3)].item_num)->val_real();
            if (Lex->mi.heartbeat_period > SLAVE_MAX_HEARTBEAT_PERIOD ||
                Lex->mi.heartbeat_period < 0.0)
            {
               const char format[]= "%d";
               char buf[4*sizeof(SLAVE_MAX_HEARTBEAT_PERIOD) + sizeof(format)];
               sprintf(buf, format, SLAVE_MAX_HEARTBEAT_PERIOD);
               my_error(ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE, MYF(0), buf);
               MYSQL_YYABORT;
            }
            if (Lex->mi.heartbeat_period > slave_net_timeout)
            {
              push_warning_printf(YYTHD, MYSQL_ERROR::WARN_LEVEL_WARN,
                                  ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MAX,
                                  ER(ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MAX));
            }
            if (Lex->mi.heartbeat_period < 0.001)
            {
              if (Lex->mi.heartbeat_period != 0.0)
              {
                push_warning_printf(YYTHD, MYSQL_ERROR::WARN_LEVEL_WARN,
                                    ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MIN,
                                    ER(ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MIN));
                Lex->mi.heartbeat_period= 0.0;
              }
              Lex->mi.heartbeat_opt=  LEX_MASTER_INFO::LEX_MI_DISABLE;
            }
            Lex->mi.heartbeat_opt=  LEX_MASTER_INFO::LEX_MI_ENABLE;
          }
    break;

  case 97:

/* Line 1455 of yacc.c  */
#line 2144 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.repl_ignore_server_ids_opt= LEX_MASTER_INFO::LEX_MI_ENABLE;
           }
    break;

  case 102:

/* Line 1455 of yacc.c  */
#line 2159 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            insert_dynamic(&Lex->mi.repl_ignore_server_ids, (uchar*) &((yyvsp[(1) - (1)].ulong_num)));
          }
    break;

  case 103:

/* Line 1455 of yacc.c  */
#line 2165 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.log_file_name = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 104:

/* Line 1455 of yacc.c  */
#line 2169 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.pos = (yyvsp[(3) - (3)].ulonglong_number);
            /* 
               If the user specified a value < BIN_LOG_HEADER_SIZE, adjust it
               instead of causing subsequent errors. 
               We need to do it in this file, because only there we know that 
               MASTER_LOG_POS has been explicitely specified. On the contrary
               in change_master() (sql_repl.cc) we cannot distinguish between 0
               (MASTER_LOG_POS explicitely specified as 0) and 0 (unspecified),
               whereas we want to distinguish (specified 0 means "read the binlog
               from 0" (4 in fact), unspecified means "don't change the position
               (keep the preceding value)").
            */
            Lex->mi.pos = max(BIN_LOG_HEADER_SIZE, Lex->mi.pos);
          }
    break;

  case 105:

/* Line 1455 of yacc.c  */
#line 2185 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.relay_log_name = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 106:

/* Line 1455 of yacc.c  */
#line 2189 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.relay_log_pos = (yyvsp[(3) - (3)].ulong_num);
            /* Adjust if < BIN_LOG_HEADER_SIZE (same comment as Lex->mi.pos) */
            Lex->mi.relay_log_pos = max(BIN_LOG_HEADER_SIZE, Lex->mi.relay_log_pos);
          }
    break;

  case 107:

/* Line 1455 of yacc.c  */
#line 2195 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->mi.use_gtid_opt != LEX_MASTER_INFO::LEX_MI_UNCHANGED)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "MASTER_use_gtid");
              MYSQL_YYABORT;
            }
            Lex->mi.use_gtid_opt= (yyvsp[(3) - (3)].ulong_num) ?
              LEX_MASTER_INFO::LEX_MI_ENABLE : LEX_MASTER_INFO::LEX_MI_DISABLE;
          }
    break;

  case 108:

/* Line 1455 of yacc.c  */
#line 2208 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->mi.connection_name= thd->variables.default_master_connection;
          }
    break;

  case 110:

/* Line 1455 of yacc.c  */
#line 2218 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
           Lex->mi.connection_name= (yyvsp[(1) - (1)].lex_str);
#ifdef HAVE_REPLICATION
           if (check_master_connection_name(&(yyvsp[(1) - (1)].lex_str)))
           {
              my_error(ER_WRONG_ARGUMENTS, MYF(0), "MASTER_CONNECTION_NAME");
              MYSQL_YYABORT;
           }
#endif
         }
    break;

  case 111:

/* Line 1455 of yacc.c  */
#line 2233 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_CREATE_TABLE;
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(5) - (5)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_WRITE, MDL_EXCLUSIVE))
              MYSQL_YYABORT;
            /*
              For CREATE TABLE, an non-existing table is not an error.
              Instruct open_tables() to just take an MDL lock if the
              table does not exist.
            */
            lex->query_tables->open_strategy= TABLE_LIST::OPEN_IF_EXISTS;
            lex->alter_info.reset();
            lex->col_list.empty();
            lex->change=NullS;
            bzero((char*) &lex->create_info,sizeof(lex->create_info));
            lex->create_info.options=(yyvsp[(2) - (5)].num) | (yyvsp[(4) - (5)].num);
            lex->create_info.default_table_charset= NULL;
            lex->name.str= 0;
            lex->name.length= 0;
            lex->create_last_non_select_table= lex->last_table();
          }
    break;

  case 112:

/* Line 1455 of yacc.c  */
#line 2258 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= YYTHD->lex;
            lex->current_select= &lex->select_lex; 
            if ((lex->create_info.used_fields & HA_CREATE_USED_ENGINE) &&
                !lex->create_info.db_type)
            {
              lex->create_info.db_type= ha_default_handlerton(YYTHD);
              push_warning_printf(YYTHD, MYSQL_ERROR::WARN_LEVEL_WARN,
                                  ER_WARN_USING_OTHER_HANDLER,
                                  ER(ER_WARN_USING_OTHER_HANDLER),
                                  hton_name(lex->create_info.db_type)->str,
                                  (yyvsp[(5) - (7)].table)->table.str);
            }
            create_table_set_open_action_and_adjust_tables(lex);
          }
    break;

  case 113:

/* Line 1455 of yacc.c  */
#line 2274 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_create_index_prepare(Lex, (yyvsp[(8) - (8)].table)))
              MYSQL_YYABORT;
          }
    break;

  case 114:

/* Line 1455 of yacc.c  */
#line 2279 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_create_index(Lex, (yyvsp[(2) - (13)].key_type), (yyvsp[(5) - (13)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 115:

/* Line 1455 of yacc.c  */
#line 2285 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_create_index_prepare(Lex, (yyvsp[(8) - (8)].table)))
              MYSQL_YYABORT;
          }
    break;

  case 116:

/* Line 1455 of yacc.c  */
#line 2290 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_create_index(Lex, (yyvsp[(2) - (13)].key_type), (yyvsp[(5) - (13)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 117:

/* Line 1455 of yacc.c  */
#line 2296 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_create_index_prepare(Lex, (yyvsp[(8) - (8)].table)))
              MYSQL_YYABORT;
          }
    break;

  case 118:

/* Line 1455 of yacc.c  */
#line 2301 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_create_index(Lex, (yyvsp[(2) - (13)].key_type), (yyvsp[(5) - (13)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 119:

/* Line 1455 of yacc.c  */
#line 2306 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.default_table_charset= NULL;
            Lex->create_info.used_fields= 0;
          }
    break;

  case 120:

/* Line 1455 of yacc.c  */
#line 2311 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_CREATE_DB;
            lex->name= (yyvsp[(4) - (6)].lex_str);
            lex->create_info.options=(yyvsp[(3) - (6)].num);
          }
    break;

  case 121:

/* Line 1455 of yacc.c  */
#line 2318 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_view_mode= VIEW_CREATE_NEW;
            Lex->create_view_algorithm= DTYPE_ALGORITHM_UNDEFINED;
            Lex->create_view_suid= TRUE;
          }
    break;

  case 122:

/* Line 1455 of yacc.c  */
#line 2324 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 123:

/* Line 1455 of yacc.c  */
#line 2326 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_CREATE_USER;
          }
    break;

  case 124:

/* Line 1455 of yacc.c  */
#line 2330 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->alter_tablespace_info->ts_cmd_type= CREATE_LOGFILE_GROUP;
          }
    break;

  case 125:

/* Line 1455 of yacc.c  */
#line 2334 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->alter_tablespace_info->ts_cmd_type= CREATE_TABLESPACE;
          }
    break;

  case 126:

/* Line 1455 of yacc.c  */
#line 2338 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_CREATE_SERVER;
          }
    break;

  case 127:

/* Line 1455 of yacc.c  */
#line 2349 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->server_options.server_name= (yyvsp[(2) - (10)].lex_str).str;
            Lex->server_options.server_name_length= (yyvsp[(2) - (10)].lex_str).length;
            Lex->server_options.scheme= (yyvsp[(6) - (10)].lex_str).str;
          }
    break;

  case 130:

/* Line 1455 of yacc.c  */
#line 2363 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->server_options.username= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 131:

/* Line 1455 of yacc.c  */
#line 2367 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->server_options.host= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 132:

/* Line 1455 of yacc.c  */
#line 2371 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->server_options.db= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 133:

/* Line 1455 of yacc.c  */
#line 2375 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->server_options.owner= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 134:

/* Line 1455 of yacc.c  */
#line 2379 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->server_options.password= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 135:

/* Line 1455 of yacc.c  */
#line 2383 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->server_options.socket= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 136:

/* Line 1455 of yacc.c  */
#line 2387 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->server_options.port= (yyvsp[(2) - (2)].ulong_num);
          }
    break;

  case 137:

/* Line 1455 of yacc.c  */
#line 2394 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex=Lex;

            lex->stmt_definition_begin= (yyvsp[(1) - (4)].simple_string);
            lex->create_info.options= (yyvsp[(3) - (4)].num);
            if (!(lex->event_parse_data= Event_parse_data::new_instance(thd)))
              MYSQL_YYABORT;
            lex->event_parse_data->identifier= (yyvsp[(4) - (4)].spname);
            lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_DROP;

            lex->sql_command= SQLCOM_CREATE_EVENT;
            /* We need that for disallowing subqueries */
          }
    break;

  case 138:

/* Line 1455 of yacc.c  */
#line 2414 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              sql_command is set here because some rules in ev_sql_stmt
              can overwrite it
            */
            Lex->sql_command= SQLCOM_CREATE_EVENT;
          }
    break;

  case 139:

/* Line 1455 of yacc.c  */
#line 2425 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_expression= (yyvsp[(2) - (3)].item);
            Lex->event_parse_data->interval= (yyvsp[(3) - (3)].interval);
          }
    break;

  case 141:

/* Line 1455 of yacc.c  */
#line 2432 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_execute_at= (yyvsp[(2) - (2)].item);
          }
    break;

  case 142:

/* Line 1455 of yacc.c  */
#line 2438 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 143:

/* Line 1455 of yacc.c  */
#line 2440 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::ENABLED;
            Lex->event_parse_data->status_changed= true;
            (yyval.num)= 1;
          }
    break;

  case 144:

/* Line 1455 of yacc.c  */
#line 2446 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::SLAVESIDE_DISABLED;
            Lex->event_parse_data->status_changed= true; 
            (yyval.num)= 1;
          }
    break;

  case 145:

/* Line 1455 of yacc.c  */
#line 2452 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::DISABLED;
            Lex->event_parse_data->status_changed= true;
            (yyval.num)= 1;
          }
    break;

  case 146:

/* Line 1455 of yacc.c  */
#line 2461 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_func_now_local(0);
            if (item == NULL)
              MYSQL_YYABORT;
            Lex->event_parse_data->item_starts= item;
          }
    break;

  case 147:

/* Line 1455 of yacc.c  */
#line 2468 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_starts= (yyvsp[(2) - (2)].item);
          }
    break;

  case 149:

/* Line 1455 of yacc.c  */
#line 2476 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_ends= (yyvsp[(2) - (2)].item);
          }
    break;

  case 150:

/* Line 1455 of yacc.c  */
#line 2482 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 152:

/* Line 1455 of yacc.c  */
#line 2488 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_PRESERVE;
            (yyval.num)= 1;
          }
    break;

  case 153:

/* Line 1455 of yacc.c  */
#line 2494 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_DROP;
            (yyval.num)= 1;
          }
    break;

  case 154:

/* Line 1455 of yacc.c  */
#line 2502 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 155:

/* Line 1455 of yacc.c  */
#line 2504 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->comment= Lex->event_parse_data->comment= (yyvsp[(2) - (2)].lex_str);
            (yyval.num)= 1;
          }
    break;

  case 156:

/* Line 1455 of yacc.c  */
#line 2511 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            /*
              This stops the following :
              - CREATE EVENT ... DO CREATE EVENT ...;
              - ALTER  EVENT ... DO CREATE EVENT ...;
              - CREATE EVENT ... DO ALTER EVENT DO ....;
              - CREATE PROCEDURE ... BEGIN CREATE EVENT ... END|
              This allows:
              - CREATE EVENT ... DO DROP EVENT yyy;
              - CREATE EVENT ... DO ALTER EVENT yyy;
                (the nested ALTER EVENT can have anything but DO clause)
              - ALTER  EVENT ... DO ALTER EVENT yyy;
                (the nested ALTER EVENT can have anything but DO clause)
              - ALTER  EVENT ... DO DROP EVENT yyy;
              - CREATE PROCEDURE ... BEGIN ALTER EVENT ... END|
                (the nested ALTER EVENT can have anything but DO clause)
              - CREATE PROCEDURE ... BEGIN DROP EVENT ... END|
            */
            if (lex->sphead)
            {
              my_error(ER_EVENT_RECURSION_FORBIDDEN, MYF(0));
              MYSQL_YYABORT;
            }
              
            if (!(lex->sphead= new sp_head()))
              MYSQL_YYABORT;

            lex->sphead->reset_thd_mem_root(thd);
            lex->sphead->init(lex);
            lex->sphead->init_sp_name(thd, lex->event_parse_data->identifier);

            lex->sphead->m_type= TYPE_ENUM_PROCEDURE;

            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
            lex->sphead->m_chistics= &lex->sp_chistics;

            lex->sphead->set_body_start(thd, lip->get_cpp_ptr());
          }
    break;

  case 157:

/* Line 1455 of yacc.c  */
#line 2554 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            /* return back to the original memory root ASAP */
            lex->sphead->set_stmt_end(thd);
            lex->sphead->restore_thd_mem_root(thd);

            lex->sp_chistics.suid= SP_IS_SUID;  //always the definer!

            lex->event_parse_data->body_changed= TRUE;
          }
    break;

  case 171:

/* Line 1455 of yacc.c  */
#line 2586 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
           LEX *lex=Lex;
           lex->users_list.empty();
           lex->columns.empty();
           lex->grant= lex->grant_tot_col= 0;
           lex->all_privileges= 0;
           lex->select_lex.db= 0;
           lex->ssl_type= SSL_TYPE_NOT_SPECIFIED;
           lex->ssl_cipher= lex->x509_subject= lex->x509_issuer= 0;
           bzero((char *)&(lex->mqh),sizeof(lex->mqh));
         }
    break;

  case 172:

/* Line 1455 of yacc.c  */
#line 2601 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!(yyvsp[(1) - (3)].lex_str).str || check_db_name(&(yyvsp[(1) - (3)].lex_str)))
            {
              my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[(1) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (check_routine_name(&(yyvsp[(3) - (3)].lex_str)))
            {
              MYSQL_YYABORT;
            }
            (yyval.spname)= new sp_name((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), true);
            if ((yyval.spname) == NULL)
              MYSQL_YYABORT;
            (yyval.spname)->init_qname(YYTHD);
          }
    break;

  case 173:

/* Line 1455 of yacc.c  */
#line 2617 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            LEX_STRING db;
            if (check_routine_name(&(yyvsp[(1) - (1)].lex_str)))
            {
              MYSQL_YYABORT;
            }
            if (lex->copy_db_to(&db.str, &db.length))
              MYSQL_YYABORT;
            (yyval.spname)= new sp_name(db, (yyvsp[(1) - (1)].lex_str), false);
            if ((yyval.spname) == NULL)
              MYSQL_YYABORT;
            (yyval.spname)->init_qname(thd);
          }
    break;

  case 174:

/* Line 1455 of yacc.c  */
#line 2635 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 175:

/* Line 1455 of yacc.c  */
#line 2636 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 176:

/* Line 1455 of yacc.c  */
#line 2640 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 177:

/* Line 1455 of yacc.c  */
#line 2641 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 178:

/* Line 1455 of yacc.c  */
#line 2647 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sp_chistics.comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 179:

/* Line 1455 of yacc.c  */
#line 2649 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* Just parse it, we only have one language for now. */ }
    break;

  case 180:

/* Line 1455 of yacc.c  */
#line 2651 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_NO_SQL; }
    break;

  case 181:

/* Line 1455 of yacc.c  */
#line 2653 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_CONTAINS_SQL; }
    break;

  case 182:

/* Line 1455 of yacc.c  */
#line 2655 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_READS_SQL_DATA; }
    break;

  case 183:

/* Line 1455 of yacc.c  */
#line 2657 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_MODIFIES_SQL_DATA; }
    break;

  case 184:

/* Line 1455 of yacc.c  */
#line 2659 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 185:

/* Line 1455 of yacc.c  */
#line 2664 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { }
    break;

  case 186:

/* Line 1455 of yacc.c  */
#line 2665 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sp_chistics.detistic= TRUE; }
    break;

  case 187:

/* Line 1455 of yacc.c  */
#line 2666 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sp_chistics.detistic= FALSE; }
    break;

  case 188:

/* Line 1455 of yacc.c  */
#line 2671 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sp_chistics.suid= SP_IS_SUID;
          }
    break;

  case 189:

/* Line 1455 of yacc.c  */
#line 2675 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sp_chistics.suid= SP_IS_NOT_SUID;
          }
    break;

  case 190:

/* Line 1455 of yacc.c  */
#line 2682 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex = Lex;

            lex->sql_command= SQLCOM_CALL;
            lex->spname= (yyvsp[(2) - (2)].spname);
            lex->value_list.empty();
            sp_add_used_routine(lex, YYTHD, (yyvsp[(2) - (2)].spname), TYPE_ENUM_PROCEDURE);
          }
    break;

  case 191:

/* Line 1455 of yacc.c  */
#line 2690 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 196:

/* Line 1455 of yacc.c  */
#line 2706 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
           Lex->value_list.push_back((yyvsp[(3) - (3)].item));
          }
    break;

  case 197:

/* Line 1455 of yacc.c  */
#line 2710 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->value_list.push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 202:

/* Line 1455 of yacc.c  */
#line 2728 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->length= 0;
            lex->dec= 0;
            lex->type= 0;

            lex->default_value= 0;
            lex->on_update_value= 0;

            lex->comment= null_lex_str;
            lex->charset= NULL;

            lex->interval_list.empty();
            lex->uint_geom_type= 0;
            lex->vcol_info= 0;
          }
    break;

  case 203:

/* Line 1455 of yacc.c  */
#line 2749 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable(&(yyvsp[(1) - (3)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_PARAM, MYF(0), (yyvsp[(1) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            sp_variable_t *spvar= spc->push_variable(&(yyvsp[(1) - (3)].lex_str),
                                                     (enum enum_field_types)(yyvsp[(3) - (3)].num),
                                                     sp_param_in);

            if (lex->sphead->fill_field_definition(YYTHD, lex,
                                                   (enum enum_field_types) (yyvsp[(3) - (3)].num),
                                                   &spvar->field_def))
            {
              MYSQL_YYABORT;
            }
            spvar->field_def.field_name= spvar->name.str;
            spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;
          }
    break;

  case 208:

/* Line 1455 of yacc.c  */
#line 2786 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable(&(yyvsp[(3) - (4)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_PARAM, MYF(0), (yyvsp[(3) - (4)].lex_str).str);
              MYSQL_YYABORT;
            }
            sp_variable_t *spvar= spc->push_variable(&(yyvsp[(3) - (4)].lex_str),
                                                     (enum enum_field_types)(yyvsp[(4) - (4)].num),
                                                     (sp_param_mode_t)(yyvsp[(1) - (4)].num));

            if (lex->sphead->fill_field_definition(YYTHD, lex,
                                                   (enum enum_field_types) (yyvsp[(4) - (4)].num),
                                                   &spvar->field_def))
            {
              MYSQL_YYABORT;
            }
            spvar->field_def.field_name= spvar->name.str;
            spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;
          }
    break;

  case 209:

/* Line 1455 of yacc.c  */
#line 2811 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= sp_param_in; }
    break;

  case 210:

/* Line 1455 of yacc.c  */
#line 2812 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= sp_param_in; }
    break;

  case 211:

/* Line 1455 of yacc.c  */
#line 2813 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= sp_param_out; }
    break;

  case 212:

/* Line 1455 of yacc.c  */
#line 2814 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= sp_param_inout; }
    break;

  case 213:

/* Line 1455 of yacc.c  */
#line 2818 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 215:

/* Line 1455 of yacc.c  */
#line 2823 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 217:

/* Line 1455 of yacc.c  */
#line 2829 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
          }
    break;

  case 218:

/* Line 1455 of yacc.c  */
#line 2833 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* We check for declarations out of (standard) order this way
              because letting the grammar rules reflect it caused tricky
               shift/reduce conflicts with the wrong result. (And we get
               better error handling this way.) */
            if (((yyvsp[(2) - (3)].spblock).vars || (yyvsp[(2) - (3)].spblock).conds) && ((yyvsp[(1) - (3)].spblock).curs || (yyvsp[(1) - (3)].spblock).hndlrs))
            { /* Variable or condition following cursor or handler */
              my_message(ER_SP_VARCOND_AFTER_CURSHNDLR,
                         ER(ER_SP_VARCOND_AFTER_CURSHNDLR), MYF(0));
              MYSQL_YYABORT;
            }
            if ((yyvsp[(2) - (3)].spblock).curs && (yyvsp[(1) - (3)].spblock).hndlrs)
            { /* Cursor following handler */
              my_message(ER_SP_CURSOR_AFTER_HANDLER,
                         ER(ER_SP_CURSOR_AFTER_HANDLER), MYF(0));
              MYSQL_YYABORT;
            }
            (yyval.spblock).vars= (yyvsp[(1) - (3)].spblock).vars + (yyvsp[(2) - (3)].spblock).vars;
            (yyval.spblock).conds= (yyvsp[(1) - (3)].spblock).conds + (yyvsp[(2) - (3)].spblock).conds;
            (yyval.spblock).hndlrs= (yyvsp[(1) - (3)].spblock).hndlrs + (yyvsp[(2) - (3)].spblock).hndlrs;
            (yyval.spblock).curs= (yyvsp[(1) - (3)].spblock).curs + (yyvsp[(2) - (3)].spblock).curs;
          }
    break;

  case 219:

/* Line 1455 of yacc.c  */
#line 2859 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sphead->reset_lex(YYTHD);
            lex->spcont->declare_var_boundary((yyvsp[(2) - (2)].num));
          }
    break;

  case 220:

/* Line 1455 of yacc.c  */
#line 2867 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_pcontext *pctx= lex->spcont;
            uint num_vars= pctx->context_var_count();
            enum enum_field_types var_type= (enum enum_field_types) (yyvsp[(4) - (5)].num);
            Item *dflt_value_item= (yyvsp[(5) - (5)].item);
            
            if (!dflt_value_item)
            {
              dflt_value_item= new (thd->mem_root) Item_null();
              if (dflt_value_item == NULL)
                MYSQL_YYABORT;
              /* QQ Set to the var_type with null_value? */
            }
            
            for (uint i = num_vars-(yyvsp[(2) - (5)].num) ; i < num_vars ; i++)
            {
              uint var_idx= pctx->var_context2runtime(i);
              sp_variable_t *spvar= pctx->find_variable(var_idx);
            
              if (!spvar)
                MYSQL_YYABORT;
            
              spvar->type= var_type;
              spvar->dflt= dflt_value_item;
            
              if (lex->sphead->fill_field_definition(YYTHD, lex, var_type,
                                                     &spvar->field_def))
              {
                MYSQL_YYABORT;
              }
            
              spvar->field_def.field_name= spvar->name.str;
              spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;
            
              /* The last instruction is responsible for freeing LEX. */

              sp_instr_set *is= new sp_instr_set(lex->sphead->instructions(),
                                                 pctx,
                                                 var_idx,
                                                 dflt_value_item,
                                                 var_type,
                                                 lex,
                                                 (i == num_vars - 1));
              if (is == NULL ||
                  lex->sphead->add_instr(is))
                MYSQL_YYABORT;
            }

            pctx->declare_var_boundary(0);
            if (lex->sphead->restore_lex(YYTHD))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyvsp[(2) - (5)].num);
            (yyval.spblock).conds= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
          }
    break;

  case 221:

/* Line 1455 of yacc.c  */
#line 2924 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_cond(&(yyvsp[(2) - (5)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_COND, MYF(0), (yyvsp[(2) - (5)].lex_str).str);
              MYSQL_YYABORT;
            }
            if(YYTHD->lex->spcont->push_cond(&(yyvsp[(2) - (5)].lex_str), (yyvsp[(5) - (5)].spcondtype)))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
            (yyval.spblock).conds= 1;
          }
    break;

  case 222:

/* Line 1455 of yacc.c  */
#line 2939 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            lex->spcont= lex->spcont->push_context(LABEL_HANDLER_SCOPE);

            sp_pcontext *ctx= lex->spcont;
            sp_instr_hpush_jump *i=
              new sp_instr_hpush_jump(sp->instructions(), ctx, (yyvsp[(2) - (4)].num),
                                      ctx->current_var_count());
            if (i == NULL || sp->add_instr(i))
              MYSQL_YYABORT;

            /* For continue handlers, mark end of handler scope. */
            if ((yyvsp[(2) - (4)].num) == SP_HANDLER_CONTINUE &&
                sp->push_backpatch(i, ctx->last_label()))
              MYSQL_YYABORT;

            if (sp->push_backpatch(i, ctx->push_label(empty_c_string, 0)))
              MYSQL_YYABORT;
          }
    break;

  case 223:

/* Line 1455 of yacc.c  */
#line 2961 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_label_t *hlab= lex->spcont->pop_label(); /* After this hdlr */
            sp_instr_hreturn *i;

            if ((yyvsp[(2) - (7)].num) == SP_HANDLER_CONTINUE)
            {
              i= new sp_instr_hreturn(sp->instructions(), ctx,
                                      ctx->current_var_count());
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
            else
            {  /* EXIT or UNDO handler, just jump to the end of the block */
              i= new sp_instr_hreturn(sp->instructions(), ctx, 0);
              if (i == NULL ||
                  sp->add_instr(i) ||
                  sp->push_backpatch(i, lex->spcont->last_label())) /* Block end */
                MYSQL_YYABORT;
            }
            lex->sphead->backpatch(hlab);

            lex->spcont= ctx->pop_context();

            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).curs= 0;
            (yyval.spblock).hndlrs= (yyvsp[(6) - (7)].num);
            lex->spcont->add_handlers((yyvsp[(6) - (7)].num));
          }
    break;

  case 224:

/* Line 1455 of yacc.c  */
#line 2993 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            uint offp;
            sp_instr_cpush *i;

            if (ctx->find_cursor(&(yyvsp[(2) - (5)].lex_str), &offp, TRUE))
            {
              my_error(ER_SP_DUP_CURS, MYF(0), (yyvsp[(2) - (5)].lex_str).str);
              delete (yyvsp[(5) - (5)].lex);
              MYSQL_YYABORT;
            }
            i= new sp_instr_cpush(sp->instructions(), ctx, (yyvsp[(5) - (5)].lex),
                                  ctx->current_cursor_count());
            if (i == NULL ||
                sp->add_instr(i) ||
                ctx->push_cursor(&(yyvsp[(2) - (5)].lex_str)))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).hndlrs= 0;
            (yyval.spblock).curs= 1;
          }
    break;

  case 225:

/* Line 1455 of yacc.c  */
#line 3018 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sphead->reset_lex(YYTHD);
          }
    break;

  case 226:

/* Line 1455 of yacc.c  */
#line 3022 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            DBUG_ASSERT(lex->sql_command == SQLCOM_SELECT);

            if (lex->result)
            {
              my_message(ER_SP_BAD_CURSOR_SELECT, ER(ER_SP_BAD_CURSOR_SELECT),
                         MYF(0));
              MYSQL_YYABORT;
            }
            lex->sp_lex_in_use= TRUE;
            (yyval.lex)= lex;
            if (lex->sphead->restore_lex(YYTHD))
              MYSQL_YYABORT;
          }
    break;

  case 227:

/* Line 1455 of yacc.c  */
#line 3041 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= SP_HANDLER_EXIT; }
    break;

  case 228:

/* Line 1455 of yacc.c  */
#line 3042 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= SP_HANDLER_CONTINUE; }
    break;

  case 229:

/* Line 1455 of yacc.c  */
#line 3048 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 230:

/* Line 1455 of yacc.c  */
#line 3050 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)+= 1; }
    break;

  case 231:

/* Line 1455 of yacc.c  */
#line 3055 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont->parent_context();

            if (ctx->find_handler((yyvsp[(1) - (1)].spcondtype)))
            {
              my_message(ER_SP_DUP_HANDLER, ER(ER_SP_DUP_HANDLER), MYF(0));
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_hpush_jump *i=
                (sp_instr_hpush_jump *)sp->last_instruction();

              i->add_condition((yyvsp[(1) - (1)].spcondtype));
              ctx->push_handler((yyvsp[(1) - (1)].spcondtype));
            }
          }
    break;

  case 232:

/* Line 1455 of yacc.c  */
#line 3078 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* mysql errno */
            if ((yyvsp[(1) - (1)].ulong_num) == 0)
            {
              my_error(ER_WRONG_VALUE, MYF(0), "CONDITION", "0");
              MYSQL_YYABORT;
            }
            (yyval.spcondtype)= (sp_cond_type_t *)YYTHD->alloc(sizeof(sp_cond_type_t));
            if ((yyval.spcondtype) == NULL)
              MYSQL_YYABORT;
            (yyval.spcondtype)->type= sp_cond_type_t::number;
            (yyval.spcondtype)->mysqlerr= (yyvsp[(1) - (1)].ulong_num);
          }
    break;

  case 234:

/* Line 1455 of yacc.c  */
#line 3095 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* SQLSTATE */
            if (!sp_cond_check(&(yyvsp[(3) - (3)].lex_str)))
            {
              my_error(ER_SP_BAD_SQLSTATE, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.spcondtype)= (sp_cond_type_t *)YYTHD->alloc(sizeof(sp_cond_type_t));
            if ((yyval.spcondtype) == NULL)
              MYSQL_YYABORT;
            (yyval.spcondtype)->type= sp_cond_type_t::state;
            memcpy((yyval.spcondtype)->sqlstate, (yyvsp[(3) - (3)].lex_str).str, SQLSTATE_LENGTH);
            (yyval.spcondtype)->sqlstate[SQLSTATE_LENGTH]= '\0';
          }
    break;

  case 235:

/* Line 1455 of yacc.c  */
#line 3111 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 236:

/* Line 1455 of yacc.c  */
#line 3112 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 237:

/* Line 1455 of yacc.c  */
#line 3117 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.spcondtype)= (yyvsp[(1) - (1)].spcondtype);
          }
    break;

  case 238:

/* Line 1455 of yacc.c  */
#line 3121 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.spcondtype)= Lex->spcont->find_cond(&(yyvsp[(1) - (1)].lex_str));
            if ((yyval.spcondtype) == NULL)
            {
              my_error(ER_SP_COND_MISMATCH, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 239:

/* Line 1455 of yacc.c  */
#line 3130 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.spcondtype)= (sp_cond_type_t *)YYTHD->alloc(sizeof(sp_cond_type_t));
            if ((yyval.spcondtype) == NULL)
              MYSQL_YYABORT;
            (yyval.spcondtype)->type= sp_cond_type_t::warning;
          }
    break;

  case 240:

/* Line 1455 of yacc.c  */
#line 3137 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.spcondtype)= (sp_cond_type_t *)YYTHD->alloc(sizeof(sp_cond_type_t));
            if ((yyval.spcondtype) == NULL)
              MYSQL_YYABORT;
            (yyval.spcondtype)->type= sp_cond_type_t::notfound;
          }
    break;

  case 241:

/* Line 1455 of yacc.c  */
#line 3144 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.spcondtype)= (sp_cond_type_t *)YYTHD->alloc(sizeof(sp_cond_type_t));
            if ((yyval.spcondtype) == NULL)
              MYSQL_YYABORT;
            (yyval.spcondtype)->type= sp_cond_type_t::exception;
          }
    break;

  case 242:

/* Line 1455 of yacc.c  */
#line 3154 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Yacc_state *state= & thd->m_parser_state->m_yacc;

            lex->sql_command= SQLCOM_SIGNAL;
            lex->m_stmt= new (thd->mem_root) Signal_statement(lex, (yyvsp[(2) - (3)].spcondtype),
                                                      state->m_set_signal_info);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 243:

/* Line 1455 of yacc.c  */
#line 3169 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_cond_type_t *cond;
            if (lex->spcont == NULL)
            {
              /* SIGNAL foo cannot be used outside of stored programs */
              my_error(ER_SP_COND_MISMATCH, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            cond= lex->spcont->find_cond(&(yyvsp[(1) - (1)].lex_str));
            if (cond == NULL)
            {
              my_error(ER_SP_COND_MISMATCH, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (cond->type != sp_cond_type_t::state)
            {
              my_error(ER_SIGNAL_BAD_CONDITION_TYPE, MYF(0));
              MYSQL_YYABORT;
            }
            (yyval.spcondtype)= cond;
          }
    break;

  case 244:

/* Line 1455 of yacc.c  */
#line 3192 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.spcondtype)= (yyvsp[(1) - (1)].spcondtype); }
    break;

  case 245:

/* Line 1455 of yacc.c  */
#line 3197 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.spcondtype)= NULL; }
    break;

  case 246:

/* Line 1455 of yacc.c  */
#line 3199 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.spcondtype)= (yyvsp[(1) - (1)].spcondtype); }
    break;

  case 247:

/* Line 1455 of yacc.c  */
#line 3204 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            YYTHD->m_parser_state->m_yacc.m_set_signal_info.clear();
          }
    break;

  case 249:

/* Line 1455 of yacc.c  */
#line 3212 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Set_signal_information *info;
            info= & YYTHD->m_parser_state->m_yacc.m_set_signal_info;
            int index= (int) (yyvsp[(1) - (3)].diag_condition_item_name);
            info->clear();
            info->m_item[index]= (yyvsp[(3) - (3)].item);
          }
    break;

  case 250:

/* Line 1455 of yacc.c  */
#line 3221 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Set_signal_information *info;
            info= & YYTHD->m_parser_state->m_yacc.m_set_signal_info;
            int index= (int) (yyvsp[(3) - (5)].diag_condition_item_name);
            if (info->m_item[index] != NULL)
            {
              my_error(ER_DUP_SIGNAL_SET, MYF(0),
                       Diag_condition_item_names[index].str);
              MYSQL_YYABORT;
            }
            info->m_item[index]= (yyvsp[(5) - (5)].item);
          }
    break;

  case 251:

/* Line 1455 of yacc.c  */
#line 3240 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 252:

/* Line 1455 of yacc.c  */
#line 3242 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if ((yyvsp[(1) - (1)].item)->type() == Item::FUNC_ITEM)
            {
              Item_func *item= (Item_func*) (yyvsp[(1) - (1)].item);
              if (item->functype() == Item_func::SUSERVAR_FUNC)
              {
                /*
                  Don't allow the following syntax:
                    SIGNAL/RESIGNAL ...
                    SET <signal condition item name> = @foo := expr
                */
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
            }
            (yyval.item)= (yyvsp[(1) - (1)].item);
          }
    break;

  case 253:

/* Line 1455 of yacc.c  */
#line 3260 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 254:

/* Line 1455 of yacc.c  */
#line 3266 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CLASS_ORIGIN; }
    break;

  case 255:

/* Line 1455 of yacc.c  */
#line 3268 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_SUBCLASS_ORIGIN; }
    break;

  case 256:

/* Line 1455 of yacc.c  */
#line 3270 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CONSTRAINT_CATALOG; }
    break;

  case 257:

/* Line 1455 of yacc.c  */
#line 3272 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CONSTRAINT_SCHEMA; }
    break;

  case 258:

/* Line 1455 of yacc.c  */
#line 3274 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CONSTRAINT_NAME; }
    break;

  case 259:

/* Line 1455 of yacc.c  */
#line 3276 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CATALOG_NAME; }
    break;

  case 260:

/* Line 1455 of yacc.c  */
#line 3278 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_SCHEMA_NAME; }
    break;

  case 261:

/* Line 1455 of yacc.c  */
#line 3280 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_TABLE_NAME; }
    break;

  case 262:

/* Line 1455 of yacc.c  */
#line 3282 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_COLUMN_NAME; }
    break;

  case 263:

/* Line 1455 of yacc.c  */
#line 3284 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CURSOR_NAME; }
    break;

  case 264:

/* Line 1455 of yacc.c  */
#line 3286 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_MESSAGE_TEXT; }
    break;

  case 265:

/* Line 1455 of yacc.c  */
#line 3288 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_MYSQL_ERRNO; }
    break;

  case 266:

/* Line 1455 of yacc.c  */
#line 3293 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Yacc_state *state= & thd->m_parser_state->m_yacc;

            lex->sql_command= SQLCOM_RESIGNAL;
            lex->m_stmt= new (thd->mem_root) Resignal_statement(lex, (yyvsp[(2) - (3)].spcondtype),
                                                      state->m_set_signal_info);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 267:

/* Line 1455 of yacc.c  */
#line 3308 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* NOTE: field definition is filled in sp_decl section. */

            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable(&(yyvsp[(1) - (1)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            spc->push_variable(&(yyvsp[(1) - (1)].lex_str), (enum_field_types)0, sp_param_in);
            (yyval.num)= 1;
          }
    break;

  case 268:

/* Line 1455 of yacc.c  */
#line 3323 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* NOTE: field definition is filled in sp_decl section. */

            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable(&(yyvsp[(3) - (3)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_VAR, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            spc->push_variable(&(yyvsp[(3) - (3)].lex_str), (enum_field_types)0, sp_param_in);
            (yyval.num)= (yyvsp[(1) - (3)].num) + 1;
          }
    break;

  case 269:

/* Line 1455 of yacc.c  */
#line 3340 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item) = NULL; }
    break;

  case 270:

/* Line 1455 of yacc.c  */
#line 3341 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item); }
    break;

  case 284:

/* Line 1455 of yacc.c  */
#line 3362 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sphead->new_cont_backpatch(NULL); }
    break;

  case 285:

/* Line 1455 of yacc.c  */
#line 3364 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sphead->do_cont_backpatch(); }
    break;

  case 286:

/* Line 1455 of yacc.c  */
#line 3368 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            lex->sphead->reset_lex(thd);
            lex->sphead->m_tmp_query= lip->get_tok_start();
          }
    break;

  case 287:

/* Line 1455 of yacc.c  */
#line 3377 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_head *sp= lex->sphead;

            sp->m_flags|= sp_get_flags_for_command(lex);
            if (lex->sql_command == SQLCOM_CHANGE_DB)
            { /* "USE db" doesn't work in a procedure */
              my_error(ER_SP_BADSTATEMENT, MYF(0), "USE");
              MYSQL_YYABORT;
            }
            /*
              Don't add an instruction for SET statements, since all
              instructions for them were already added during processing
              of "set" rule.
            */
            DBUG_ASSERT(lex->sql_command != SQLCOM_SET_OPTION ||
                        lex->var_list.is_empty());
            if (lex->sql_command != SQLCOM_SET_OPTION)
            {
              sp_instr_stmt *i=new sp_instr_stmt(sp->instructions(),
                                                 lex->spcont, lex);
              if (i == NULL)
                MYSQL_YYABORT;

              /*
                Extract the query statement from the tokenizer.  The
                end is either lex->ptr, if there was no lookahead,
                lex->tok_end otherwise.
              */
              if (yychar == YYEMPTY)
                i->m_query.length= lip->get_ptr() - sp->m_tmp_query;
              else
                i->m_query.length= lip->get_tok_end() - sp->m_tmp_query;
              if (!(i->m_query.str= strmake_root(thd->mem_root,
                                                 sp->m_tmp_query,
                                                 i->m_query.length)) ||
                    sp->add_instr(i))
                MYSQL_YYABORT;
            }
            if (sp->restore_lex(thd))
              MYSQL_YYABORT;
          }
    break;

  case 288:

/* Line 1455 of yacc.c  */
#line 3425 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sphead->reset_lex(YYTHD); }
    break;

  case 289:

/* Line 1455 of yacc.c  */
#line 3427 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            if (sp->m_type != TYPE_ENUM_FUNCTION)
            {
              my_message(ER_SP_BADRETURN, ER(ER_SP_BADRETURN), MYF(0));
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_freturn *i;

              i= new sp_instr_freturn(sp->instructions(), lex->spcont, (yyvsp[(3) - (3)].item),
                                      sp->m_return_field_def.sql_type, lex);
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
              sp->m_flags|= sp_head::HAS_RETURN;
            }
            if (sp->restore_lex(YYTHD))
              MYSQL_YYABORT;
          }
    break;

  case 290:

/* Line 1455 of yacc.c  */
#line 3453 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* Unlabeled controls get a secret label. */
            LEX *lex= Lex;

            lex->spcont->push_label((char *)"", lex->sphead->instructions());
          }
    break;

  case 291:

/* Line 1455 of yacc.c  */
#line 3459 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sphead->backpatch(lex->spcont->pop_label());
          }
    break;

  case 292:

/* Line 1455 of yacc.c  */
#line 3468 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp = lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_label_t *lab= ctx->find_label((yyvsp[(2) - (2)].lex_str).str);

            if (! lab)
            {
              my_error(ER_SP_LILABEL_MISMATCH, MYF(0), "LEAVE", (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_jump *i;
              uint ip= sp->instructions();
              uint n;
              /*
                When jumping to a BEGIN-END block end, the target jump
                points to the block hpop/cpop cleanup instructions,
                so we should exclude the block context here.
                When jumping to something else (i.e., SP_LAB_ITER),
                there are no hpop/cpop at the jump destination,
                so we should include the block context here for cleanup.
              */
              bool exclusive= (lab->type == SP_LAB_BEGIN);

              n= ctx->diff_handlers(lab->ctx, exclusive);
              if (n)
              {
                sp_instr_hpop *hpop= new sp_instr_hpop(ip++, ctx, n);
                if (hpop == NULL)
                  MYSQL_YYABORT;
                sp->add_instr(hpop);
              }
              n= ctx->diff_cursors(lab->ctx, exclusive);
              if (n)
              {
                sp_instr_cpop *cpop= new sp_instr_cpop(ip++, ctx, n);
                if (cpop == NULL)
                  MYSQL_YYABORT;
                sp->add_instr(cpop);
              }
              i= new sp_instr_jump(ip, ctx);
              if (i == NULL)
                MYSQL_YYABORT;
              sp->push_backpatch(i, lab);  /* Jumping forward */
              sp->add_instr(i);
            }
          }
    break;

  case 293:

/* Line 1455 of yacc.c  */
#line 3521 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_label_t *lab= ctx->find_label((yyvsp[(2) - (2)].lex_str).str);

            if (! lab || lab->type != SP_LAB_ITER)
            {
              my_error(ER_SP_LILABEL_MISMATCH, MYF(0), "ITERATE", (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_jump *i;
              uint ip= sp->instructions();
              uint n;

              n= ctx->diff_handlers(lab->ctx, FALSE);  /* Inclusive the dest. */
              if (n)
              {
                sp_instr_hpop *hpop= new sp_instr_hpop(ip++, ctx, n);
                if (hpop == NULL ||
                    sp->add_instr(hpop))
                  MYSQL_YYABORT;
              }
              n= ctx->diff_cursors(lab->ctx, FALSE);  /* Inclusive the dest. */
              if (n)
              {
                sp_instr_cpop *cpop= new sp_instr_cpop(ip++, ctx, n);
                if (cpop == NULL ||
                    sp->add_instr(cpop))
                  MYSQL_YYABORT;
              }
              i= new sp_instr_jump(ip, ctx, lab->ip); /* Jump back */
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
          }
    break;

  case 294:

/* Line 1455 of yacc.c  */
#line 3564 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint offset;
            sp_instr_copen *i;

            if (! lex->spcont->find_cursor(&(yyvsp[(2) - (2)].lex_str), &offset))
            {
              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            i= new sp_instr_copen(sp->instructions(), lex->spcont, offset);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 295:

/* Line 1455 of yacc.c  */
#line 3584 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint offset;
            sp_instr_cfetch *i;

            if (! lex->spcont->find_cursor(&(yyvsp[(3) - (4)].lex_str), &offset))
            {
              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(3) - (4)].lex_str).str);
              MYSQL_YYABORT;
            }
            i= new sp_instr_cfetch(sp->instructions(), lex->spcont, offset);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 296:

/* Line 1455 of yacc.c  */
#line 3601 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 297:

/* Line 1455 of yacc.c  */
#line 3606 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint offset;
            sp_instr_cclose *i;

            if (! lex->spcont->find_cursor(&(yyvsp[(2) - (2)].lex_str), &offset))
            {
              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            i= new sp_instr_cclose(sp->instructions(), lex->spcont,  offset);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 301:

/* Line 1455 of yacc.c  */
#line 3632 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *spc= lex->spcont;
            sp_variable_t *spv;

            if (!spc || !(spv = spc->find_variable(&(yyvsp[(1) - (1)].lex_str))))
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              /* An SP local variable */
              sp_instr_cfetch *i= (sp_instr_cfetch *)sp->last_instruction();

              i->add_to_varlist(spv);
            }
          }
    break;

  case 302:

/* Line 1455 of yacc.c  */
#line 3652 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *spc= lex->spcont;
            sp_variable_t *spv;

            if (!spc || !(spv = spc->find_variable(&(yyvsp[(3) - (3)].lex_str))))
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              /* An SP local variable */
              sp_instr_cfetch *i= (sp_instr_cfetch *)sp->last_instruction();

              i->add_to_varlist(spv);
            }
          }
    break;

  case 303:

/* Line 1455 of yacc.c  */
#line 3674 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sphead->reset_lex(YYTHD); }
    break;

  case 304:

/* Line 1455 of yacc.c  */
#line 3676 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            uint ip= sp->instructions();
            sp_instr_jump_if_not *i = new sp_instr_jump_if_not(ip, ctx,
                                                               (yyvsp[(2) - (3)].item), lex);
            if (i == NULL ||
                sp->push_backpatch(i, ctx->push_label((char *)"", 0)) ||
                sp->add_cont_backpatch(i) ||
                sp->add_instr(i))
              MYSQL_YYABORT;
            if (sp->restore_lex(YYTHD))
              MYSQL_YYABORT;
          }
    break;

  case 305:

/* Line 1455 of yacc.c  */
#line 3692 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            sp_head *sp= Lex->sphead;
            sp_pcontext *ctx= Lex->spcont;
            uint ip= sp->instructions();
            sp_instr_jump *i = new sp_instr_jump(ip, ctx);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
            sp->backpatch(ctx->pop_label());
            sp->push_backpatch(i, ctx->push_label((char *)"", 0));
          }
    break;

  case 306:

/* Line 1455 of yacc.c  */
#line 3704 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sphead->backpatch(lex->spcont->pop_label());
          }
    break;

  case 312:

/* Line 1455 of yacc.c  */
#line 3724 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            case_stmt_action_case(lex);
            lex->sphead->reset_lex(YYTHD); /* For expr $3 */
          }
    break;

  case 313:

/* Line 1455 of yacc.c  */
#line 3730 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (case_stmt_action_expr(lex, (yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;

            /* For expr $3 */
            if (lex->sphead->restore_lex(YYTHD))
              MYSQL_YYABORT;
          }
    break;

  case 314:

/* Line 1455 of yacc.c  */
#line 3743 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            case_stmt_action_end_case(lex, true);
          }
    break;

  case 315:

/* Line 1455 of yacc.c  */
#line 3751 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            case_stmt_action_case(lex);
          }
    break;

  case 316:

/* Line 1455 of yacc.c  */
#line 3759 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            case_stmt_action_end_case(lex, false);
          }
    break;

  case 321:

/* Line 1455 of yacc.c  */
#line 3777 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sphead->reset_lex(YYTHD); /* For expr $3 */
          }
    break;

  case 322:

/* Line 1455 of yacc.c  */
#line 3781 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* Simple case: <caseval> = <whenval> */

            LEX *lex= Lex;
            if (case_stmt_action_when(lex, (yyvsp[(3) - (3)].item), true))
              MYSQL_YYABORT;
            /* For expr $3 */
            if (lex->sphead->restore_lex(YYTHD))
              MYSQL_YYABORT;
          }
    break;

  case 323:

/* Line 1455 of yacc.c  */
#line 3793 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (case_stmt_action_then(lex))
              MYSQL_YYABORT;
          }
    break;

  case 324:

/* Line 1455 of yacc.c  */
#line 3802 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sphead->reset_lex(YYTHD); /* For expr $3 */
          }
    break;

  case 325:

/* Line 1455 of yacc.c  */
#line 3806 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (case_stmt_action_when(lex, (yyvsp[(3) - (3)].item), false))
              MYSQL_YYABORT;
            /* For expr $3 */
            if (lex->sphead->restore_lex(YYTHD))
              MYSQL_YYABORT;
          }
    break;

  case 326:

/* Line 1455 of yacc.c  */
#line 3816 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (case_stmt_action_then(lex))
              MYSQL_YYABORT;
          }
    break;

  case 327:

/* Line 1455 of yacc.c  */
#line 3825 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint ip= sp->instructions();
            sp_instr_error *i= new sp_instr_error(ip, lex->spcont,
                                                  ER_SP_CASE_NOT_FOUND);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 329:

/* Line 1455 of yacc.c  */
#line 3840 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *ctx= lex->spcont;
            sp_label_t *lab= ctx->find_label((yyvsp[(1) - (2)].lex_str).str);

            if (lab)
            {
              my_error(ER_SP_LABEL_REDEFINE, MYF(0), (yyvsp[(1) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              lab= lex->spcont->push_label((yyvsp[(1) - (2)].lex_str).str,
                                           lex->sphead->instructions());
              lab->type= SP_LAB_ITER;
            }
          }
    break;

  case 330:

/* Line 1455 of yacc.c  */
#line 3858 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_label_t *lab= lex->spcont->pop_label();

            if ((yyvsp[(5) - (5)].lex_str).str)
            {
              if (my_strcasecmp(system_charset_info, (yyvsp[(5) - (5)].lex_str).str, lab->name) != 0)
              {
                my_error(ER_SP_LABEL_MISMATCH, MYF(0), (yyvsp[(5) - (5)].lex_str).str);
                MYSQL_YYABORT;
              }
            }
            lex->sphead->backpatch(lab);
          }
    break;

  case 331:

/* Line 1455 of yacc.c  */
#line 3875 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 332:

/* Line 1455 of yacc.c  */
#line 3876 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 333:

/* Line 1455 of yacc.c  */
#line 3881 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *ctx= lex->spcont;
            sp_label_t *lab= ctx->find_label((yyvsp[(1) - (2)].lex_str).str);

            if (lab)
            {
              my_error(ER_SP_LABEL_REDEFINE, MYF(0), (yyvsp[(1) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }

            lab= lex->spcont->push_label((yyvsp[(1) - (2)].lex_str).str,
                                         lex->sphead->instructions());
            lab->type= SP_LAB_BEGIN;
          }
    break;

  case 334:

/* Line 1455 of yacc.c  */
#line 3897 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_label_t *lab= lex->spcont->pop_label();

            if ((yyvsp[(5) - (5)].lex_str).str)
            {
              if (my_strcasecmp(system_charset_info, (yyvsp[(5) - (5)].lex_str).str, lab->name) != 0)
              {
                my_error(ER_SP_LABEL_MISMATCH, MYF(0), (yyvsp[(5) - (5)].lex_str).str);
                MYSQL_YYABORT;
              }
            }
          }
    break;

  case 335:

/* Line 1455 of yacc.c  */
#line 3913 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* Unlabeled blocks get a secret label. */
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label_t *lab= lex->spcont->push_label((char *)"", ip);
            lab->type= SP_LAB_BEGIN;
          }
    break;

  case 336:

/* Line 1455 of yacc.c  */
#line 3920 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->spcont->pop_label();
          }
    break;

  case 337:

/* Line 1455 of yacc.c  */
#line 3928 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* QQ This is just a dummy for grouping declarations and statements
              together. No [[NOT] ATOMIC] yet, and we need to figure out how
              make it coexist with the existing BEGIN COMMIT/ROLLBACK. */
            LEX *lex= Lex;
            lex->spcont= lex->spcont->push_context(LABEL_DEFAULT_SCOPE);
          }
    break;

  case 338:

/* Line 1455 of yacc.c  */
#line 3937 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_instr *i;

            sp->backpatch(ctx->last_label()); /* We always have a label */
            if ((yyvsp[(3) - (5)].spblock).hndlrs)
            {
              i= new sp_instr_hpop(sp->instructions(), ctx, (yyvsp[(3) - (5)].spblock).hndlrs);
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
            if ((yyvsp[(3) - (5)].spblock).curs)
            {
              i= new sp_instr_cpop(sp->instructions(), ctx, (yyvsp[(3) - (5)].spblock).curs);
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
            lex->spcont= ctx->pop_context();
          }
    break;

  case 339:

/* Line 1455 of yacc.c  */
#line 3965 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label_t *lab= lex->spcont->last_label();  /* Jumping back */
            sp_instr_jump *i = new sp_instr_jump(ip, lex->spcont, lab->ip);
            if (i == NULL ||
                lex->sphead->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 340:

/* Line 1455 of yacc.c  */
#line 3975 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sphead->reset_lex(YYTHD); }
    break;

  case 341:

/* Line 1455 of yacc.c  */
#line 3977 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint ip= sp->instructions();
            sp_instr_jump_if_not *i = new sp_instr_jump_if_not(ip, lex->spcont,
                                                               (yyvsp[(3) - (4)].item), lex);
            if (i == NULL ||
                /* Jumping forward */
                sp->push_backpatch(i, lex->spcont->last_label()) ||
                sp->new_cont_backpatch(i) ||
                sp->add_instr(i))
              MYSQL_YYABORT;
            if (sp->restore_lex(YYTHD))
              MYSQL_YYABORT;
          }
    break;

  case 342:

/* Line 1455 of yacc.c  */
#line 3993 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label_t *lab= lex->spcont->last_label();  /* Jumping back */
            sp_instr_jump *i = new sp_instr_jump(ip, lex->spcont, lab->ip);
            if (i == NULL ||
                lex->sphead->add_instr(i))
              MYSQL_YYABORT;
            lex->sphead->do_cont_backpatch();
          }
    break;

  case 343:

/* Line 1455 of yacc.c  */
#line 4004 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sphead->reset_lex(YYTHD); }
    break;

  case 344:

/* Line 1455 of yacc.c  */
#line 4006 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label_t *lab= lex->spcont->last_label();  /* Jumping back */
            sp_instr_jump_if_not *i = new sp_instr_jump_if_not(ip, lex->spcont,
                                                               (yyvsp[(5) - (7)].item), lab->ip,
                                                               lex);
            if (i == NULL ||
                lex->sphead->add_instr(i))
              MYSQL_YYABORT;
            if (lex->sphead->restore_lex(YYTHD))
              MYSQL_YYABORT;
            /* We can shortcut the cont_backpatch here */
            i->m_cont_dest= ip+1;
          }
    break;

  case 345:

/* Line 1455 of yacc.c  */
#line 4025 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->trg_chistics.action_time= TRG_ACTION_BEFORE; }
    break;

  case 346:

/* Line 1455 of yacc.c  */
#line 4027 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->trg_chistics.action_time= TRG_ACTION_AFTER; }
    break;

  case 347:

/* Line 1455 of yacc.c  */
#line 4032 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->trg_chistics.event= TRG_EVENT_INSERT; }
    break;

  case 348:

/* Line 1455 of yacc.c  */
#line 4034 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->trg_chistics.event= TRG_EVENT_UPDATE; }
    break;

  case 349:

/* Line 1455 of yacc.c  */
#line 4036 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->trg_chistics.event= TRG_EVENT_DELETE; }
    break;

  case 353:

/* Line 1455 of yacc.c  */
#line 4070 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 354:

/* Line 1455 of yacc.c  */
#line 4072 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->logfile_group_name= (yyvsp[(4) - (4)].lex_str).str;
          }
    break;

  case 355:

/* Line 1455 of yacc.c  */
#line 4082 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            Lex->alter_tablespace_info->ts_alter_tablespace_type= ALTER_TABLESPACE_ADD_FILE; 
          }
    break;

  case 356:

/* Line 1455 of yacc.c  */
#line 4088 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            Lex->alter_tablespace_info->ts_alter_tablespace_type= ALTER_TABLESPACE_DROP_FILE; 
          }
    break;

  case 361:

/* Line 1455 of yacc.c  */
#line 4111 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 408:

/* Line 1455 of yacc.c  */
#line 4205 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->data_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 409:

/* Line 1455 of yacc.c  */
#line 4213 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->undo_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 410:

/* Line 1455 of yacc.c  */
#line 4221 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->redo_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 411:

/* Line 1455 of yacc.c  */
#line 4229 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info= new st_alter_tablespace();
            if (lex->alter_tablespace_info == NULL)
              MYSQL_YYABORT;
            lex->alter_tablespace_info->tablespace_name= (yyvsp[(1) - (1)].lex_str).str;
            lex->sql_command= SQLCOM_ALTER_TABLESPACE;
          }
    break;

  case 412:

/* Line 1455 of yacc.c  */
#line 4241 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info= new st_alter_tablespace();
            if (lex->alter_tablespace_info == NULL)
              MYSQL_YYABORT;
            lex->alter_tablespace_info->logfile_group_name= (yyvsp[(1) - (1)].lex_str).str;
            lex->sql_command= SQLCOM_ALTER_TABLESPACE;
          }
    break;

  case 413:

/* Line 1455 of yacc.c  */
#line 4253 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_READ_ONLY;
          }
    break;

  case 414:

/* Line 1455 of yacc.c  */
#line 4258 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_READ_WRITE;
          }
    break;

  case 415:

/* Line 1455 of yacc.c  */
#line 4263 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_NOT_ACCESSIBLE;
          }
    break;

  case 416:

/* Line 1455 of yacc.c  */
#line 4271 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->initial_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 417:

/* Line 1455 of yacc.c  */
#line 4279 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->autoextend_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 418:

/* Line 1455 of yacc.c  */
#line 4287 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->max_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 419:

/* Line 1455 of yacc.c  */
#line 4295 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->extent_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 420:

/* Line 1455 of yacc.c  */
#line 4303 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->undo_buffer_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 421:

/* Line 1455 of yacc.c  */
#line 4311 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->redo_buffer_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 422:

/* Line 1455 of yacc.c  */
#line 4319 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->nodegroup_id != UNDEF_NODEGROUP)
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"NODEGROUP");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->nodegroup_id= (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 423:

/* Line 1455 of yacc.c  */
#line 4332 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->ts_comment != NULL)
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"COMMENT");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->ts_comment= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 424:

/* Line 1455 of yacc.c  */
#line 4345 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->storage_engine != NULL)
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),
                       "STORAGE ENGINE");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->storage_engine= (yyvsp[(4) - (4)].db_type);
          }
    break;

  case 427:

/* Line 1455 of yacc.c  */
#line 4364 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->wait_until_completed= TRUE;
          }
    break;

  case 428:

/* Line 1455 of yacc.c  */
#line 4369 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!(lex->alter_tablespace_info->wait_until_completed))
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"NO_WAIT");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->wait_until_completed= FALSE;
          }
    break;

  case 429:

/* Line 1455 of yacc.c  */
#line 4381 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ulonglong_number)= (yyvsp[(1) - (1)].ulong_num);}
    break;

  case 430:

/* Line 1455 of yacc.c  */
#line 4383 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            ulonglong number;
            uint text_shift_number= 0;
            longlong prefix_number;
            char *start_ptr= (yyvsp[(1) - (1)].lex_str).str;
            uint str_len= (yyvsp[(1) - (1)].lex_str).length;
            char *end_ptr= start_ptr + str_len;
            int error;
            prefix_number= my_strtoll10(start_ptr, &end_ptr, &error);
            if ((start_ptr + str_len - 1) == end_ptr)
            {
              switch (end_ptr[0])
              {
                case 'g':
                case 'G':
                  text_shift_number+=10;
                case 'm':
                case 'M':
                  text_shift_number+=10;
                case 'k':
                case 'K':
                  text_shift_number+=10;
                  break;
                default:
                {
                  my_error(ER_WRONG_SIZE_NUMBER, MYF(0));
                  MYSQL_YYABORT;
                }
              }
              if (prefix_number >> 31)
              {
                my_error(ER_SIZE_OVERFLOW_ERROR, MYF(0));
                MYSQL_YYABORT;
              }
              number= prefix_number << text_shift_number;
            }
            else
            {
              my_error(ER_WRONG_SIZE_NUMBER, MYF(0));
              MYSQL_YYABORT;
            }
            (yyval.ulonglong_number)= number;
          }
    break;

  case 431:

/* Line 1455 of yacc.c  */
#line 4434 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_info.option_list= NULL; }
    break;

  case 432:

/* Line 1455 of yacc.c  */
#line 4435 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 433:

/* Line 1455 of yacc.c  */
#line 4436 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 434:

/* Line 1455 of yacc.c  */
#line 4442 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 435:

/* Line 1455 of yacc.c  */
#line 4442 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 436:

/* Line 1455 of yacc.c  */
#line 4444 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {

            Lex->create_info.options|= HA_LEX_CREATE_TABLE_LIKE;
            TABLE_LIST *src_table= Lex->select_lex.add_table_to_list(YYTHD,
                                        (yyvsp[(1) - (1)].table), NULL, 0, TL_READ, MDL_SHARED_READ);
            if (! src_table)
              MYSQL_YYABORT;
            /* CREATE TABLE ... LIKE is not allowed for views. */
            src_table->required_type= FRMTYPE_TABLE;
          }
    break;

  case 437:

/* Line 1455 of yacc.c  */
#line 4457 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.table)= (yyvsp[(2) - (2)].table); }
    break;

  case 438:

/* Line 1455 of yacc.c  */
#line 4458 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.table)= (yyvsp[(3) - (4)].table); }
    break;

  case 439:

/* Line 1455 of yacc.c  */
#line 4462 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 440:

/* Line 1455 of yacc.c  */
#line 4464 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->set_braces(0);}
    break;

  case 441:

/* Line 1455 of yacc.c  */
#line 4465 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 442:

/* Line 1455 of yacc.c  */
#line 4467 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 443:

/* Line 1455 of yacc.c  */
#line 4468 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 444:

/* Line 1455 of yacc.c  */
#line 4473 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              Remove all tables used in PARTITION clause from the global table
              list. Partitioning with subqueries is not allowed anyway.
            */
            TABLE_LIST *last_non_sel_table= Lex->create_last_non_select_table;
            last_non_sel_table->next_global= 0;
            Lex->query_tables_last= &last_non_sel_table->next_global;
          }
    break;

  case 445:

/* Line 1455 of yacc.c  */
#line 4509 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 447:

/* Line 1455 of yacc.c  */
#line 4515 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info= new partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            if (lex->sql_command == SQLCOM_ALTER_TABLE)
            {
              lex->alter_info.flags|= ALTER_PARTITION;
            }
          }
    break;

  case 449:

/* Line 1455 of yacc.c  */
#line 4533 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
#ifdef WITH_PARTITION_STORAGE_ENGINE
            LEX_STRING partition_name={C_STRING_WITH_LEN("partition")};
            if (!plugin_is_ready(&partition_name, MYSQL_STORAGE_ENGINE_PLUGIN))
            {
              my_error(ER_OPTION_PREVENTS_STATEMENT, MYF(0),
                      "--skip-partition");
              MYSQL_YYABORT;
            }
#else
            my_error(ER_FEATURE_DISABLED, MYF(0), "partitioning",
                    "--with-plugin-partition");
            MYSQL_YYABORT;
#endif
          }
    break;

  case 450:

/* Line 1455 of yacc.c  */
#line 4552 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!lex->part_info)
            {
              my_parse_error(ER(ER_PARTITION_ENTRY_ERROR));
              MYSQL_YYABORT;
            }
            /*
              We enter here when opening the frm file to translate
              partition info string into part_info data structure.
            */
          }
    break;

  case 451:

/* Line 1455 of yacc.c  */
#line 4564 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 453:

/* Line 1455 of yacc.c  */
#line 4573 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->list_of_part_fields= TRUE;
            part_info->column_list= FALSE;
            part_info->part_type= HASH_PARTITION;
          }
    break;

  case 454:

/* Line 1455 of yacc.c  */
#line 4580 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->part_type= HASH_PARTITION; }
    break;

  case 455:

/* Line 1455 of yacc.c  */
#line 4581 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 456:

/* Line 1455 of yacc.c  */
#line 4583 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->part_type= RANGE_PARTITION; }
    break;

  case 457:

/* Line 1455 of yacc.c  */
#line 4585 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->part_type= RANGE_PARTITION; }
    break;

  case 458:

/* Line 1455 of yacc.c  */
#line 4587 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->part_type= LIST_PARTITION; }
    break;

  case 459:

/* Line 1455 of yacc.c  */
#line 4589 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->part_type= LIST_PARTITION; }
    break;

  case 460:

/* Line 1455 of yacc.c  */
#line 4593 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 461:

/* Line 1455 of yacc.c  */
#line 4595 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->linear_hash_ind= TRUE;}
    break;

  case 462:

/* Line 1455 of yacc.c  */
#line 4599 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 463:

/* Line 1455 of yacc.c  */
#line 4600 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 464:

/* Line 1455 of yacc.c  */
#line 4604 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 465:

/* Line 1455 of yacc.c  */
#line 4605 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 466:

/* Line 1455 of yacc.c  */
#line 4610 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->num_columns++;
            if (part_info->part_field_list.push_back((yyvsp[(1) - (1)].lex_str).str))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
            if (part_info->num_columns > MAX_REF_PARTS)
            {
              my_error(ER_TOO_MANY_PARTITION_FUNC_FIELDS_ERROR, MYF(0),
                       "list of partition fields");
              MYSQL_YYABORT;
            }
          }
    break;

  case 467:

/* Line 1455 of yacc.c  */
#line 4629 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->column_list= TRUE;
            part_info->list_of_part_fields= TRUE;
          }
    break;

  case 468:

/* Line 1455 of yacc.c  */
#line 4639 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->set_part_expr((yyvsp[(2) - (5)].simple_string)+1, (yyvsp[(3) - (5)].item), (yyvsp[(4) - (5)].simple_string), FALSE))
            { MYSQL_YYABORT; }
            part_info->num_columns= 1;
            part_info->column_list= FALSE;
          }
    break;

  case 469:

/* Line 1455 of yacc.c  */
#line 4650 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->part_info->set_part_expr((yyvsp[(2) - (5)].simple_string)+1, (yyvsp[(3) - (5)].item), (yyvsp[(4) - (5)].simple_string), TRUE))
            { MYSQL_YYABORT; }
          }
    break;

  case 470:

/* Line 1455 of yacc.c  */
#line 4658 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 471:

/* Line 1455 of yacc.c  */
#line 4660 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            uint num_parts= (yyvsp[(2) - (2)].ulong_num);
            partition_info *part_info= Lex->part_info;
            if (num_parts == 0)
            {
              my_error(ER_NO_PARTS_ERROR, MYF(0), "partitions");
              MYSQL_YYABORT;
            }

            part_info->num_parts= num_parts;
            part_info->use_default_num_partitions= FALSE;
          }
    break;

  case 472:

/* Line 1455 of yacc.c  */
#line 4675 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 473:

/* Line 1455 of yacc.c  */
#line 4677 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->subpart_type= HASH_PARTITION; }
    break;

  case 474:

/* Line 1455 of yacc.c  */
#line 4678 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 475:

/* Line 1455 of yacc.c  */
#line 4681 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->subpart_type= HASH_PARTITION;
            part_info->list_of_subpart_fields= TRUE;
          }
    break;

  case 476:

/* Line 1455 of yacc.c  */
#line 4686 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 477:

/* Line 1455 of yacc.c  */
#line 4690 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 478:

/* Line 1455 of yacc.c  */
#line 4691 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 479:

/* Line 1455 of yacc.c  */
#line 4696 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->subpart_field_list.push_back((yyvsp[(1) - (1)].lex_str).str))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
            if (part_info->subpart_field_list.elements > MAX_REF_PARTS)
            {
              my_error(ER_TOO_MANY_PARTITION_FUNC_FIELDS_ERROR, MYF(0),
                       "list of subpartition fields");
              MYSQL_YYABORT;
            }
          }
    break;

  case 480:

/* Line 1455 of yacc.c  */
#line 4714 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            bool not_corr_func;
            not_corr_func= !lex->safe_to_cache_query;
            lex->safe_to_cache_query= 1;
            if (not_corr_func)
            {
              my_parse_error(ER(ER_WRONG_EXPR_IN_PARTITION_FUNC_ERROR));
              MYSQL_YYABORT;
            }
            (yyval.item)=(yyvsp[(1) - (1)].item);
          }
    break;

  case 481:

/* Line 1455 of yacc.c  */
#line 4729 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 482:

/* Line 1455 of yacc.c  */
#line 4731 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            uint num_parts= (yyvsp[(2) - (2)].ulong_num);
            LEX *lex= Lex;
            if (num_parts == 0)
            {
              my_error(ER_NO_PARTS_ERROR, MYF(0), "subpartitions");
              MYSQL_YYABORT;
            }
            lex->part_info->num_subparts= num_parts;
            lex->part_info->use_default_num_subpartitions= FALSE;
          }
    break;

  case 483:

/* Line 1455 of yacc.c  */
#line 4746 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->part_type == RANGE_PARTITION)
            {
              my_error(ER_PARTITIONS_MUST_BE_DEFINED_ERROR, MYF(0),
                       "RANGE");
              MYSQL_YYABORT;
            }
            else if (part_info->part_type == LIST_PARTITION)
            {
              my_error(ER_PARTITIONS_MUST_BE_DEFINED_ERROR, MYF(0),
                       "LIST");
              MYSQL_YYABORT;
            }
          }
    break;

  case 484:

/* Line 1455 of yacc.c  */
#line 4762 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            uint count_curr_parts= part_info->partitions.elements;
            if (part_info->num_parts != 0)
            {
              if (part_info->num_parts !=
                  count_curr_parts)
              {
                my_parse_error(ER(ER_PARTITION_WRONG_NO_PART_ERROR));
                MYSQL_YYABORT;
              }
            }
            else if (count_curr_parts > 0)
            {
              part_info->num_parts= count_curr_parts;
            }
            part_info->count_curr_subparts= 0;
          }
    break;

  case 485:

/* Line 1455 of yacc.c  */
#line 4783 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 486:

/* Line 1455 of yacc.c  */
#line 4784 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 487:

/* Line 1455 of yacc.c  */
#line 4789 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            partition_element *p_elem= new partition_element();

            if (!p_elem || part_info->partitions.push_back(p_elem))
            {
              mem_alloc_error(sizeof(partition_element));
              MYSQL_YYABORT;
            }
            p_elem->part_state= PART_NORMAL;
            part_info->curr_part_elem= p_elem;
            part_info->current_partition= p_elem;
            part_info->use_default_partitions= FALSE;
            part_info->use_default_num_partitions= FALSE;
          }
    break;

  case 488:

/* Line 1455 of yacc.c  */
#line 4808 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 489:

/* Line 1455 of yacc.c  */
#line 4813 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            partition_element *p_elem= part_info->curr_part_elem;
            p_elem->partition_name= (yyvsp[(1) - (1)].lex_str).str;
          }
    break;

  case 490:

/* Line 1455 of yacc.c  */
#line 4822 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->part_type == RANGE_PARTITION)
              {
                my_error(ER_PARTITION_REQUIRES_VALUES_ERROR, MYF(0),
                         "RANGE", "LESS THAN");
                MYSQL_YYABORT;
              }
              if (part_info->part_type == LIST_PARTITION)
              {
                my_error(ER_PARTITION_REQUIRES_VALUES_ERROR, MYF(0),
                         "LIST", "IN");
                MYSQL_YYABORT;
              }
            }
            else
              part_info->part_type= HASH_PARTITION;
          }
    break;

  case 491:

/* Line 1455 of yacc.c  */
#line 4844 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->part_type != RANGE_PARTITION)
              {
                my_error(ER_PARTITION_WRONG_VALUES_ERROR, MYF(0),
                         "RANGE", "LESS THAN");
                MYSQL_YYABORT;
              }
            }
            else
              part_info->part_type= RANGE_PARTITION;
          }
    break;

  case 492:

/* Line 1455 of yacc.c  */
#line 4859 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 493:

/* Line 1455 of yacc.c  */
#line 4861 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->part_type != LIST_PARTITION)
              {
                my_error(ER_PARTITION_WRONG_VALUES_ERROR, MYF(0),
                               "LIST", "IN");
                MYSQL_YYABORT;
              }
            }
            else
              part_info->part_type= LIST_PARTITION;
          }
    break;

  case 494:

/* Line 1455 of yacc.c  */
#line 4876 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 495:

/* Line 1455 of yacc.c  */
#line 4881 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;

            if (part_info->num_columns &&
                part_info->num_columns != 1U)
            {
              part_info->print_debug("Kilroy II", NULL);
              my_parse_error(ER(ER_PARTITION_COLUMN_LIST_ERROR));
              MYSQL_YYABORT;
            }
            else
              part_info->num_columns= 1U;
            if (part_info->init_column_part())
            {
              MYSQL_YYABORT;
            }
            if (part_info->add_max_value())
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 496:

/* Line 1455 of yacc.c  */
#line 4902 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 497:

/* Line 1455 of yacc.c  */
#line 4907 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            part_info->print_debug("part_values_in: part_value_item", NULL);

            if (part_info->num_columns != 1U)
            {
              if (!lex->is_partition_management() ||
                  part_info->num_columns == 0 ||
                  part_info->num_columns > MAX_REF_PARTS)
              {
                part_info->print_debug("Kilroy III", NULL);
                my_parse_error(ER(ER_PARTITION_COLUMN_LIST_ERROR));
                MYSQL_YYABORT;
              }
              /*
                Reorganize the current large array into a list of small
                arrays with one entry in each array. This can happen
                in the first partition of an ALTER TABLE statement where
                we ADD or REORGANIZE partitions. Also can only happen
                for LIST partitions.
              */
              if (part_info->reorganize_into_single_field_col_val())
              {
                MYSQL_YYABORT;
              }
            }
          }
    break;

  case 498:

/* Line 1455 of yacc.c  */
#line 4936 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->num_columns < 2U)
            {
              my_parse_error(ER(ER_ROW_SINGLE_PARTITION_FIELD_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 499:

/* Line 1455 of yacc.c  */
#line 4947 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 500:

/* Line 1455 of yacc.c  */
#line 4948 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 501:

/* Line 1455 of yacc.c  */
#line 4953 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->print_debug("( part_value_item", NULL);
            /* Initialisation code needed for each list of value expressions */
            if (!(part_info->part_type == LIST_PARTITION &&
                  part_info->num_columns == 1U) &&
                 part_info->init_column_part())
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 502:

/* Line 1455 of yacc.c  */
#line 4964 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 503:

/* Line 1455 of yacc.c  */
#line 4966 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->print_debug(") part_value_item", NULL);
            if (part_info->num_columns == 0)
              part_info->num_columns= part_info->curr_list_object;
            if (part_info->num_columns != part_info->curr_list_object)
            {
              /*
                All value items lists must be of equal length, in some cases
                which is covered by the above if-statement we don't know yet
                how many columns is in the partition so the assignment above
                ensures that we only report errors when we know we have an
                error.
              */
              part_info->print_debug("Kilroy I", NULL);
              my_parse_error(ER(ER_PARTITION_COLUMN_LIST_ERROR));
              MYSQL_YYABORT;
            }
            part_info->curr_list_object= 0;
          }
    break;

  case 504:

/* Line 1455 of yacc.c  */
#line 4989 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 505:

/* Line 1455 of yacc.c  */
#line 4990 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 506:

/* Line 1455 of yacc.c  */
#line 4995 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->part_type == LIST_PARTITION)
            {
              my_parse_error(ER(ER_MAXVALUE_IN_VALUES_IN));
              MYSQL_YYABORT;
            }
            if (part_info->add_max_value())
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 507:

/* Line 1455 of yacc.c  */
#line 5008 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            Item *part_expr= (yyvsp[(1) - (1)].item);

            if (!lex->safe_to_cache_query)
            {
              my_parse_error(ER(ER_WRONG_EXPR_IN_PARTITION_FUNC_ERROR));
              MYSQL_YYABORT;
            }
            if (part_info->add_column_list_value(YYTHD, part_expr))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 508:

/* Line 1455 of yacc.c  */
#line 5028 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->num_subparts != 0 &&
                !part_info->use_default_subpartitions)
            {
              /*
                We come here when we have defined subpartitions on the first
                partition but not on all the subsequent partitions. 
              */
              my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 509:

/* Line 1455 of yacc.c  */
#line 5042 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->num_subparts != 0)
            {
              if (part_info->num_subparts !=
                  part_info->count_curr_subparts)
              {
                my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
                MYSQL_YYABORT;
              }
            }
            else if (part_info->count_curr_subparts > 0)
            {
              if (part_info->partitions.elements > 1)
              {
                my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
                MYSQL_YYABORT;
              }
              part_info->num_subparts= part_info->count_curr_subparts;
            }
            part_info->count_curr_subparts= 0;
          }
    break;

  case 510:

/* Line 1455 of yacc.c  */
#line 5067 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 511:

/* Line 1455 of yacc.c  */
#line 5068 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 512:

/* Line 1455 of yacc.c  */
#line 5073 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            partition_element *curr_part= part_info->current_partition;
            partition_element *sub_p_elem= new partition_element(curr_part);
            if (part_info->use_default_subpartitions &&
                part_info->partitions.elements >= 2)
            {
              /*
                create table t1 (a int)
                partition by list (a) subpartition by hash (a)
                (partition p0 values in (1),
                 partition p1 values in (2) subpartition sp11);
                causes use to arrive since we are on the second
                partition, but still use_default_subpartitions
                is set. When we come here we're processing at least
                the second partition (the current partition processed
                have already been put into the partitions list.
              */
              my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
              MYSQL_YYABORT;
            }
            if (!sub_p_elem ||
             curr_part->subpartitions.push_back(sub_p_elem))
            {
              mem_alloc_error(sizeof(partition_element));
              MYSQL_YYABORT;
            }
            part_info->curr_part_elem= sub_p_elem;
            part_info->use_default_subpartitions= FALSE;
            part_info->use_default_num_subpartitions= FALSE;
            part_info->count_curr_subparts++;
          }
    break;

  case 513:

/* Line 1455 of yacc.c  */
#line 5105 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 514:

/* Line 1455 of yacc.c  */
#line 5110 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->partition_name= (yyvsp[(1) - (1)].lex_str).str; }
    break;

  case 515:

/* Line 1455 of yacc.c  */
#line 5114 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 516:

/* Line 1455 of yacc.c  */
#line 5115 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 517:

/* Line 1455 of yacc.c  */
#line 5119 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 518:

/* Line 1455 of yacc.c  */
#line 5120 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 519:

/* Line 1455 of yacc.c  */
#line 5125 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->tablespace_name= (yyvsp[(3) - (3)].lex_str).str; }
    break;

  case 520:

/* Line 1455 of yacc.c  */
#line 5127 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->curr_part_elem->engine_type= (yyvsp[(4) - (4)].db_type);
            part_info->default_engine_type= (yyvsp[(4) - (4)].db_type);
          }
    break;

  case 521:

/* Line 1455 of yacc.c  */
#line 5133 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info->curr_part_elem->connect_string.str= (yyvsp[(3) - (3)].lex_str).str;
            lex->part_info->curr_part_elem->connect_string.length= (yyvsp[(3) - (3)].lex_str).length;
          }
    break;

  case 522:

/* Line 1455 of yacc.c  */
#line 5139 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->nodegroup_id= (uint16) (yyvsp[(3) - (3)].ulong_num); }
    break;

  case 523:

/* Line 1455 of yacc.c  */
#line 5141 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_max_rows= (ha_rows) (yyvsp[(3) - (3)].ulonglong_number); }
    break;

  case 524:

/* Line 1455 of yacc.c  */
#line 5143 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_min_rows= (ha_rows) (yyvsp[(3) - (3)].ulonglong_number); }
    break;

  case 525:

/* Line 1455 of yacc.c  */
#line 5145 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->data_file_name= (yyvsp[(4) - (4)].lex_str).str; }
    break;

  case 526:

/* Line 1455 of yacc.c  */
#line 5147 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->index_file_name= (yyvsp[(4) - (4)].lex_str).str; }
    break;

  case 527:

/* Line 1455 of yacc.c  */
#line 5149 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_comment= (yyvsp[(3) - (3)].lex_str).str; }
    break;

  case 528:

/* Line 1455 of yacc.c  */
#line 5158 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->sql_command == SQLCOM_INSERT)
              lex->sql_command= SQLCOM_INSERT_SELECT;
            else if (lex->sql_command == SQLCOM_REPLACE)
              lex->sql_command= SQLCOM_REPLACE_SELECT;
            /*
              The following work only with the local list, the global list
              is created correctly in this case
            */
            lex->current_select->table_list.save_and_clear(&lex->save_list);
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 529:

/* Line 1455 of yacc.c  */
#line 5173 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 530:

/* Line 1455 of yacc.c  */
#line 5177 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              The following work only with the local list, the global list
              is created correctly in this case
            */
            Lex->current_select->table_list.push_front(&Lex->save_list);
          }
    break;

  case 531:

/* Line 1455 of yacc.c  */
#line 5187 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 532:

/* Line 1455 of yacc.c  */
#line 5188 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 533:

/* Line 1455 of yacc.c  */
#line 5192 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 534:

/* Line 1455 of yacc.c  */
#line 5193 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 535:

/* Line 1455 of yacc.c  */
#line 5197 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 536:

/* Line 1455 of yacc.c  */
#line 5198 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 537:

/* Line 1455 of yacc.c  */
#line 5202 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 538:

/* Line 1455 of yacc.c  */
#line 5203 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 539:

/* Line 1455 of yacc.c  */
#line 5207 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 540:

/* Line 1455 of yacc.c  */
#line 5208 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(1) - (1)].num);}
    break;

  case 541:

/* Line 1455 of yacc.c  */
#line 5212 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=(yyvsp[(1) - (1)].num); }
    break;

  case 542:

/* Line 1455 of yacc.c  */
#line 5213 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(1) - (2)].num) | (yyvsp[(2) - (2)].num); }
    break;

  case 543:

/* Line 1455 of yacc.c  */
#line 5217 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=HA_LEX_CREATE_TMP_TABLE; }
    break;

  case 544:

/* Line 1455 of yacc.c  */
#line 5222 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->check_exists= FALSE;
            (yyval.num)= 0;
          }
    break;

  case 545:

/* Line 1455 of yacc.c  */
#line 5227 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->check_exists= TRUE;
            (yyval.num)=HA_LEX_CREATE_IF_NOT_EXISTS;
          }
    break;

  case 553:

/* Line 1455 of yacc.c  */
#line 5251 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.db_type= (yyvsp[(3) - (3)].db_type);
            Lex->create_info.used_fields|= HA_CREATE_USED_ENGINE;
          }
    break;

  case 554:

/* Line 1455 of yacc.c  */
#line 5256 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.max_rows= (yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_MAX_ROWS;
          }
    break;

  case 555:

/* Line 1455 of yacc.c  */
#line 5261 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.min_rows= (yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_MIN_ROWS;
          }
    break;

  case 556:

/* Line 1455 of yacc.c  */
#line 5266 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.avg_row_length=(yyvsp[(3) - (3)].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_AVG_ROW_LENGTH;
          }
    break;

  case 557:

/* Line 1455 of yacc.c  */
#line 5271 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.password=(yyvsp[(3) - (3)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_PASSWORD;
          }
    break;

  case 558:

/* Line 1455 of yacc.c  */
#line 5276 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.comment=(yyvsp[(3) - (3)].lex_str);
            Lex->create_info.used_fields|= HA_CREATE_USED_COMMENT;
          }
    break;

  case 559:

/* Line 1455 of yacc.c  */
#line 5281 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.auto_increment_value=(yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_AUTO;
          }
    break;

  case 560:

/* Line 1455 of yacc.c  */
#line 5286 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            switch((yyvsp[(3) - (3)].ulong_num)) {
            case 0:
                Lex->create_info.table_options|= HA_OPTION_NO_PACK_KEYS;
                break;
            case 1:
                Lex->create_info.table_options|= HA_OPTION_PACK_KEYS;
                break;
            default:
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
            }
            Lex->create_info.used_fields|= HA_CREATE_USED_PACK_KEYS;
          }
    break;

  case 561:

/* Line 1455 of yacc.c  */
#line 5301 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.table_options&=
              ~(HA_OPTION_PACK_KEYS | HA_OPTION_NO_PACK_KEYS);
            Lex->create_info.used_fields|= HA_CREATE_USED_PACK_KEYS;
          }
    break;

  case 562:

/* Line 1455 of yacc.c  */
#line 5307 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_CHECKSUM : HA_OPTION_NO_CHECKSUM;
            Lex->create_info.used_fields|= HA_CREATE_USED_CHECKSUM;
          }
    break;

  case 563:

/* Line 1455 of yacc.c  */
#line 5312 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
             Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_CHECKSUM : HA_OPTION_NO_CHECKSUM;
             Lex->create_info.used_fields|= HA_CREATE_USED_CHECKSUM;
          }
    break;

  case 564:

/* Line 1455 of yacc.c  */
#line 5317 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.used_fields|= HA_CREATE_USED_PAGE_CHECKSUM;
            Lex->create_info.page_checksum= (yyvsp[(3) - (3)].choice);
          }
    break;

  case 565:

/* Line 1455 of yacc.c  */
#line 5322 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_DELAY_KEY_WRITE : HA_OPTION_NO_DELAY_KEY_WRITE;
            Lex->create_info.used_fields|= HA_CREATE_USED_DELAY_KEY_WRITE;
          }
    break;

  case 566:

/* Line 1455 of yacc.c  */
#line 5327 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.row_type= (yyvsp[(3) - (3)].row_type);
            Lex->create_info.used_fields|= HA_CREATE_USED_ROW_FORMAT;
          }
    break;

  case 567:

/* Line 1455 of yacc.c  */
#line 5332 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->select_lex.table_list.save_and_clear(&Lex->save_list);
          }
    break;

  case 568:

/* Line 1455 of yacc.c  */
#line 5336 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              Move the union list to the merge_list and exclude its tables
              from the global list.
            */
            LEX *lex=Lex;
            lex->create_info.merge_list= lex->select_lex.table_list;
            lex->select_lex.table_list= lex->save_list;
            /*
              When excluding union list from the global list we assume that
              elements of the former immediately follow elements which represent
              table being created/altered and parent tables.
            */
            TABLE_LIST *last_non_sel_table= lex->create_last_non_select_table;
            DBUG_ASSERT(last_non_sel_table->next_global ==
                        lex->create_info.merge_list.first);
            last_non_sel_table->next_global= 0;
            Lex->query_tables_last= &last_non_sel_table->next_global;

            lex->create_info.used_fields|= HA_CREATE_USED_UNION;
          }
    break;

  case 571:

/* Line 1455 of yacc.c  */
#line 5360 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.merge_insert_method= (yyvsp[(3) - (3)].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_INSERT_METHOD;
          }
    break;

  case 572:

/* Line 1455 of yacc.c  */
#line 5365 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.data_file_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_DATADIR;
          }
    break;

  case 573:

/* Line 1455 of yacc.c  */
#line 5370 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.index_file_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_INDEXDIR;
          }
    break;

  case 574:

/* Line 1455 of yacc.c  */
#line 5375 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {Lex->create_info.tablespace= (yyvsp[(2) - (2)].lex_str).str;}
    break;

  case 575:

/* Line 1455 of yacc.c  */
#line 5377 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {Lex->create_info.storage_media= HA_SM_DISK;}
    break;

  case 576:

/* Line 1455 of yacc.c  */
#line 5379 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {Lex->create_info.storage_media= HA_SM_MEMORY;}
    break;

  case 577:

/* Line 1455 of yacc.c  */
#line 5381 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.connect_string.str= (yyvsp[(3) - (3)].lex_str).str;
            Lex->create_info.connect_string.length= (yyvsp[(3) - (3)].lex_str).length;
            Lex->create_info.used_fields|= HA_CREATE_USED_CONNECTION;
          }
    break;

  case 578:

/* Line 1455 of yacc.c  */
#line 5387 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.used_fields|= HA_CREATE_USED_KEY_BLOCK_SIZE;
            Lex->create_info.key_block_size= (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 579:

/* Line 1455 of yacc.c  */
#line 5392 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
	    Lex->create_info.used_fields|= HA_CREATE_USED_TRANSACTIONAL;
            Lex->create_info.transactional= (yyvsp[(3) - (3)].choice);
          }
    break;

  case 580:

/* Line 1455 of yacc.c  */
#line 5397 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            new (YYTHD->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), true, &Lex->create_info.option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 581:

/* Line 1455 of yacc.c  */
#line 5403 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            new (YYTHD->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), false, &Lex->create_info.option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 582:

/* Line 1455 of yacc.c  */
#line 5409 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            new (YYTHD->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].ulonglong_number), &Lex->create_info.option_list,
                                  &Lex->option_list_last, YYTHD->mem_root);
          }
    break;

  case 583:

/* Line 1455 of yacc.c  */
#line 5415 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            new (YYTHD->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), &Lex->create_info.option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 584:

/* Line 1455 of yacc.c  */
#line 5424 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            HA_CREATE_INFO *cinfo= &Lex->create_info;
            if ((cinfo->used_fields & HA_CREATE_USED_DEFAULT_CHARSET) &&
                 cinfo->default_table_charset && (yyvsp[(4) - (4)].charset) &&
                 !my_charset_same(cinfo->default_table_charset,(yyvsp[(4) - (4)].charset)))
            {
              my_error(ER_CONFLICTING_DECLARATIONS, MYF(0),
                       "CHARACTER SET ", cinfo->default_table_charset->csname,
                       "CHARACTER SET ", (yyvsp[(4) - (4)].charset)->csname);
              MYSQL_YYABORT;
            }
            Lex->create_info.default_table_charset= (yyvsp[(4) - (4)].charset);
            Lex->create_info.used_fields|= HA_CREATE_USED_DEFAULT_CHARSET;
          }
    break;

  case 585:

/* Line 1455 of yacc.c  */
#line 5442 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            HA_CREATE_INFO *cinfo= &Lex->create_info;
            if ((cinfo->used_fields & HA_CREATE_USED_DEFAULT_CHARSET) &&
                 cinfo->default_table_charset && (yyvsp[(4) - (4)].charset) &&
                 !((yyvsp[(4) - (4)].charset)= merge_charset_and_collation(cinfo->default_table_charset,
                                                   (yyvsp[(4) - (4)].charset))))
            {
              MYSQL_YYABORT;
            }

            Lex->create_info.default_table_charset= (yyvsp[(4) - (4)].charset);
            Lex->create_info.used_fields|= HA_CREATE_USED_DEFAULT_CHARSET;
          }
    break;

  case 586:

/* Line 1455 of yacc.c  */
#line 5459 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            plugin_ref plugin= ha_resolve_by_name(YYTHD, &(yyvsp[(1) - (1)].lex_str));

            if (plugin)
              (yyval.db_type)= plugin_data(plugin, handlerton*);
            else
            {
              if (YYTHD->variables.sql_mode & MODE_NO_ENGINE_SUBSTITUTION)
              {
                my_error(ER_UNKNOWN_STORAGE_ENGINE, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
                MYSQL_YYABORT;
              }
              (yyval.db_type)= 0;
              push_warning_printf(YYTHD, MYSQL_ERROR::WARN_LEVEL_WARN,
                                  ER_UNKNOWN_STORAGE_ENGINE,
                                  ER(ER_UNKNOWN_STORAGE_ENGINE),
                                  (yyvsp[(1) - (1)].lex_str).str);
            }
          }
    break;

  case 587:

/* Line 1455 of yacc.c  */
#line 5482 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            plugin_ref plugin;
            if ((plugin= ha_resolve_by_name(YYTHD, &(yyvsp[(1) - (1)].lex_str))))
              (yyval.db_type)= plugin_data(plugin, handlerton*);
            else
            {
              my_error(ER_UNKNOWN_STORAGE_ENGINE, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 588:

/* Line 1455 of yacc.c  */
#line 5495 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_DEFAULT; }
    break;

  case 589:

/* Line 1455 of yacc.c  */
#line 5496 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_FIXED; }
    break;

  case 590:

/* Line 1455 of yacc.c  */
#line 5497 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_DYNAMIC; }
    break;

  case 591:

/* Line 1455 of yacc.c  */
#line 5498 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_COMPRESSED; }
    break;

  case 592:

/* Line 1455 of yacc.c  */
#line 5499 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_REDUNDANT; }
    break;

  case 593:

/* Line 1455 of yacc.c  */
#line 5500 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_COMPACT; }
    break;

  case 594:

/* Line 1455 of yacc.c  */
#line 5501 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_PAGE; }
    break;

  case 595:

/* Line 1455 of yacc.c  */
#line 5505 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_DISABLED; }
    break;

  case 596:

/* Line 1455 of yacc.c  */
#line 5506 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_TO_FIRST; }
    break;

  case 597:

/* Line 1455 of yacc.c  */
#line 5507 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_TO_LAST; }
    break;

  case 598:

/* Line 1455 of yacc.c  */
#line 5511 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 600:

/* Line 1455 of yacc.c  */
#line 5516 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {(yyval.num) = (int) STRING_RESULT; }
    break;

  case 601:

/* Line 1455 of yacc.c  */
#line 5517 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {(yyval.num) = (int) REAL_RESULT; }
    break;

  case 602:

/* Line 1455 of yacc.c  */
#line 5518 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {(yyval.num) = (int) DECIMAL_RESULT; }
    break;

  case 603:

/* Line 1455 of yacc.c  */
#line 5519 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {(yyval.num) = (int) INT_RESULT; }
    break;

  case 604:

/* Line 1455 of yacc.c  */
#line 5525 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
          Lex->create_last_non_select_table= Lex->last_table();
        }
    break;

  case 610:

/* Line 1455 of yacc.c  */
#line 5543 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->col_list.empty(); /* Alloced by sql_alloc */
          }
    break;

  case 611:

/* Line 1455 of yacc.c  */
#line 5550 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->option_list= NULL; }
    break;

  case 612:

/* Line 1455 of yacc.c  */
#line 5552 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(1) - (8)].key_type), (yyvsp[(2) - (8)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 613:

/* Line 1455 of yacc.c  */
#line 5558 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->option_list= NULL; }
    break;

  case 614:

/* Line 1455 of yacc.c  */
#line 5560 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(1) - (9)].key_type), (yyvsp[(3) - (9)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 615:

/* Line 1455 of yacc.c  */
#line 5566 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->option_list= NULL; }
    break;

  case 616:

/* Line 1455 of yacc.c  */
#line 5568 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(1) - (9)].key_type), (yyvsp[(3) - (9)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 617:

/* Line 1455 of yacc.c  */
#line 5574 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->option_list= NULL; }
    break;

  case 618:

/* Line 1455 of yacc.c  */
#line 5576 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(2) - (9)].key_type), (yyvsp[(3) - (9)].lex_str).str ? (yyvsp[(3) - (9)].lex_str) : (yyvsp[(1) - (9)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 619:

/* Line 1455 of yacc.c  */
#line 5581 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Key *key= new Foreign_key((yyvsp[(4) - (8)].lex_str).str ? (yyvsp[(4) - (8)].lex_str) : (yyvsp[(1) - (8)].lex_str), lex->col_list,
                                      (yyvsp[(8) - (8)].table),
                                      lex->ref_list,
                                      lex->fk_delete_opt,
                                      lex->fk_update_opt,
                                      lex->fk_match_option,
                                      lex->check_exists);
            if (key == NULL)
              MYSQL_YYABORT;
            lex->alter_info.key_list.push_back(key);
            lex->option_list= NULL;
            if (add_create_index (lex, Key::MULTIPLE, (yyvsp[(1) - (8)].lex_str).str ? (yyvsp[(1) - (8)].lex_str) : (yyvsp[(4) - (8)].lex_str),
                                  &default_key_create_info, 1))
              MYSQL_YYABORT;
            /* Only used for ALTER TABLE. Ignored otherwise. */
            lex->alter_info.flags|= ALTER_FOREIGN_KEY;
          }
    break;

  case 620:

/* Line 1455 of yacc.c  */
#line 5601 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->col_list.empty(); /* Alloced by sql_alloc */
          }
    break;

  case 624:

/* Line 1455 of yacc.c  */
#line 5616 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 625:

/* Line 1455 of yacc.c  */
#line 5617 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 626:

/* Line 1455 of yacc.c  */
#line 5621 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str); }
    break;

  case 627:

/* Line 1455 of yacc.c  */
#line 5626 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->length=lex->dec=0;
            lex->type=0;
            lex->default_value= lex->on_update_value= 0;
            lex->comment=null_lex_str;
            lex->charset=NULL;
	    lex->vcol_info= 0;
            lex->option_list= NULL;
          }
    break;

  case 628:

/* Line 1455 of yacc.c  */
#line 5637 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (add_field_to_list(lex->thd, &(yyvsp[(1) - (3)].lex_str), (enum enum_field_types) (yyvsp[(3) - (3)].num),
                                  lex->length,lex->dec,lex->type,
                                  lex->default_value, lex->on_update_value, 
                                  &lex->comment,
                                  lex->change,&lex->interval_list,lex->charset,
                                  lex->uint_geom_type,
                                  lex->vcol_info, lex->option_list))
              MYSQL_YYABORT;
          }
    break;

  case 629:

/* Line 1455 of yacc.c  */
#line 5651 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 630:

/* Line 1455 of yacc.c  */
#line 5655 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= (enum enum_field_types)MYSQL_TYPE_VIRTUAL;
            Lex->vcol_info->set_field_type((enum enum_field_types) (yyvsp[(1) - (8)].num));
          }
    break;

  case 632:

/* Line 1455 of yacc.c  */
#line 5663 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 633:

/* Line 1455 of yacc.c  */
#line 5668 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->vcol_info->set_stored_in_db_flag(FALSE);
          }
    break;

  case 634:

/* Line 1455 of yacc.c  */
#line 5672 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->vcol_info->set_stored_in_db_flag(FALSE);
          }
    break;

  case 635:

/* Line 1455 of yacc.c  */
#line 5676 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->vcol_info->set_stored_in_db_flag(TRUE);
          }
    break;

  case 636:

/* Line 1455 of yacc.c  */
#line 5682 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 637:

/* Line 1455 of yacc.c  */
#line 5683 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 638:

/* Line 1455 of yacc.c  */
#line 5687 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 640:

/* Line 1455 of yacc.c  */
#line 5693 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= UNIQUE_FLAG;
            lex->alter_info.flags|= ALTER_ADD_INDEX;
          }
    break;

  case 641:

/* Line 1455 of yacc.c  */
#line 5699 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= UNIQUE_KEY_FLAG;
            lex->alter_info.flags|= ALTER_ADD_INDEX;
          }
    break;

  case 642:

/* Line 1455 of yacc.c  */
#line 5704 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 643:

/* Line 1455 of yacc.c  */
#line 5709 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              "PARSE_VCOL_EXPR" can only be used by the SQL server
              when reading a '*.frm' file.
              Prevent the end user from invoking this command.
            */
            if (!Lex->parse_vcol_expr)
            {
              my_message(ER_SYNTAX_ERROR, ER(ER_SYNTAX_ERROR), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 644:

/* Line 1455 of yacc.c  */
#line 5725 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->vcol_info= new Virtual_column_info();
            if (!Lex->vcol_info)
            {
              mem_alloc_error(sizeof(Virtual_column_info));
              MYSQL_YYABORT;
            }
            uint expr_len= (uint)((yyvsp[(3) - (3)].simple_string) - (yyvsp[(1) - (3)].simple_string)) - 1;
            Lex->vcol_info->expr_str.str= (char* ) sql_memdup((yyvsp[(1) - (3)].simple_string) + 1, expr_len);
            Lex->vcol_info->expr_str.length= expr_len;
            Lex->vcol_info->expr_item= (yyvsp[(2) - (3)].item);
          }
    break;

  case 645:

/* Line 1455 of yacc.c  */
#line 5740 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=(yyvsp[(1) - (3)].num); }
    break;

  case 646:

/* Line 1455 of yacc.c  */
#line 5741 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=(yyvsp[(1) - (3)].num); }
    break;

  case 647:

/* Line 1455 of yacc.c  */
#line 5742 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_FLOAT; }
    break;

  case 648:

/* Line 1455 of yacc.c  */
#line 5744 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_BIT;
          }
    break;

  case 649:

/* Line 1455 of yacc.c  */
#line 5749 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_BIT;
          }
    break;

  case 650:

/* Line 1455 of yacc.c  */
#line 5753 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_TINY;
          }
    break;

  case 651:

/* Line 1455 of yacc.c  */
#line 5758 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_TINY;
          }
    break;

  case 652:

/* Line 1455 of yacc.c  */
#line 5763 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 653:

/* Line 1455 of yacc.c  */
#line 5767 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 654:

/* Line 1455 of yacc.c  */
#line 5772 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_STRING;
            Lex->charset=national_charset_info;
          }
    break;

  case 655:

/* Line 1455 of yacc.c  */
#line 5777 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_STRING;
            Lex->charset=national_charset_info;
          }
    break;

  case 656:

/* Line 1455 of yacc.c  */
#line 5783 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 657:

/* Line 1455 of yacc.c  */
#line 5788 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 658:

/* Line 1455 of yacc.c  */
#line 5794 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_TYPE_VARCHAR;
          }
    break;

  case 659:

/* Line 1455 of yacc.c  */
#line 5798 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_TYPE_VARCHAR;
            Lex->charset=national_charset_info;
          }
    break;

  case 660:

/* Line 1455 of yacc.c  */
#line 5803 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)= MYSQL_TYPE_VARCHAR;
          }
    break;

  case 661:

/* Line 1455 of yacc.c  */
#line 5808 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->length)
            {
              errno= 0;
              ulong length= strtoul(Lex->length, NULL, 10);
              if (errno == 0 && length <= MAX_FIELD_BLOBLENGTH && length != 4)
              {
                char buff[sizeof("YEAR()") + MY_INT64_NUM_DECIMAL_DIGITS + 1];
                my_snprintf(buff, sizeof(buff), "YEAR(%lu)", length);
                push_warning_printf(YYTHD, MYSQL_ERROR::WARN_LEVEL_NOTE,
                                    ER_WARN_DEPRECATED_SYNTAX,
                                    ER(ER_WARN_DEPRECATED_SYNTAX),
                                    buff, "YEAR(4)");
              }
            }
            (yyval.num)=MYSQL_TYPE_YEAR;
          }
    break;

  case 662:

/* Line 1455 of yacc.c  */
#line 5826 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DATE; }
    break;

  case 663:

/* Line 1455 of yacc.c  */
#line 5828 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_TIME; }
    break;

  case 664:

/* Line 1455 of yacc.c  */
#line 5830 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (YYTHD->variables.sql_mode & MODE_MAXDB)
              (yyval.num)=MYSQL_TYPE_DATETIME;
            else
            {
              /* 
                Unlike other types TIMESTAMP fields are NOT NULL by default.
              */
              Lex->type|= NOT_NULL_FLAG;
              (yyval.num)=MYSQL_TYPE_TIMESTAMP;
            }
          }
    break;

  case 665:

/* Line 1455 of yacc.c  */
#line 5843 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DATETIME; }
    break;

  case 666:

/* Line 1455 of yacc.c  */
#line 5845 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_TINY_BLOB;
          }
    break;

  case 667:

/* Line 1455 of yacc.c  */
#line 5850 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_BLOB;
          }
    break;

  case 668:

/* Line 1455 of yacc.c  */
#line 5855 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            Lex->charset=&my_charset_bin;
            Lex->uint_geom_type= (uint)(yyvsp[(1) - (1)].num);
            (yyval.num)=MYSQL_TYPE_GEOMETRY;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
    break;

  case 669:

/* Line 1455 of yacc.c  */
#line 5867 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB;
          }
    break;

  case 670:

/* Line 1455 of yacc.c  */
#line 5872 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_LONG_BLOB;
          }
    break;

  case 671:

/* Line 1455 of yacc.c  */
#line 5877 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB;
          }
    break;

  case 672:

/* Line 1455 of yacc.c  */
#line 5882 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB; }
    break;

  case 673:

/* Line 1455 of yacc.c  */
#line 5884 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_TINY_BLOB; }
    break;

  case 674:

/* Line 1455 of yacc.c  */
#line 5886 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_BLOB; }
    break;

  case 675:

/* Line 1455 of yacc.c  */
#line 5888 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB; }
    break;

  case 676:

/* Line 1455 of yacc.c  */
#line 5890 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_LONG_BLOB; }
    break;

  case 677:

/* Line 1455 of yacc.c  */
#line 5892 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_NEWDECIMAL;}
    break;

  case 678:

/* Line 1455 of yacc.c  */
#line 5894 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_NEWDECIMAL;}
    break;

  case 679:

/* Line 1455 of yacc.c  */
#line 5896 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_NEWDECIMAL;}
    break;

  case 680:

/* Line 1455 of yacc.c  */
#line 5898 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {Lex->interval_list.empty();}
    break;

  case 681:

/* Line 1455 of yacc.c  */
#line 5900 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_ENUM; }
    break;

  case 682:

/* Line 1455 of yacc.c  */
#line 5902 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->interval_list.empty();}
    break;

  case 683:

/* Line 1455 of yacc.c  */
#line 5904 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_SET; }
    break;

  case 684:

/* Line 1455 of yacc.c  */
#line 5906 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB; }
    break;

  case 685:

/* Line 1455 of yacc.c  */
#line 5908 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_LONGLONG;
            Lex->type|= (AUTO_INCREMENT_FLAG | NOT_NULL_FLAG | UNSIGNED_FLAG |
              UNIQUE_FLAG);
          }
    break;

  case 686:

/* Line 1455 of yacc.c  */
#line 5916 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_GEOMETRY; }
    break;

  case 687:

/* Line 1455 of yacc.c  */
#line 5917 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_GEOMETRYCOLLECTION; }
    break;

  case 688:

/* Line 1455 of yacc.c  */
#line 5919 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->length= (char*)"25";
            (yyval.num)= Field::GEOM_POINT;
          }
    break;

  case 689:

/* Line 1455 of yacc.c  */
#line 5923 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_MULTIPOINT; }
    break;

  case 690:

/* Line 1455 of yacc.c  */
#line 5924 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_LINESTRING; }
    break;

  case 691:

/* Line 1455 of yacc.c  */
#line 5925 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_MULTILINESTRING; }
    break;

  case 692:

/* Line 1455 of yacc.c  */
#line 5926 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_POLYGON; }
    break;

  case 693:

/* Line 1455 of yacc.c  */
#line 5927 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_MULTIPOLYGON; }
    break;

  case 694:

/* Line 1455 of yacc.c  */
#line 5931 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 695:

/* Line 1455 of yacc.c  */
#line 5935 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 696:

/* Line 1455 of yacc.c  */
#line 5936 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 697:

/* Line 1455 of yacc.c  */
#line 5940 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 698:

/* Line 1455 of yacc.c  */
#line 5941 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 699:

/* Line 1455 of yacc.c  */
#line 5945 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 700:

/* Line 1455 of yacc.c  */
#line 5946 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 701:

/* Line 1455 of yacc.c  */
#line 5947 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 702:

/* Line 1455 of yacc.c  */
#line 5948 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 703:

/* Line 1455 of yacc.c  */
#line 5949 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 704:

/* Line 1455 of yacc.c  */
#line 5953 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_LONG; }
    break;

  case 705:

/* Line 1455 of yacc.c  */
#line 5954 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_TINY; }
    break;

  case 706:

/* Line 1455 of yacc.c  */
#line 5955 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_SHORT; }
    break;

  case 707:

/* Line 1455 of yacc.c  */
#line 5956 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_INT24; }
    break;

  case 708:

/* Line 1455 of yacc.c  */
#line 5957 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_LONGLONG; }
    break;

  case 709:

/* Line 1455 of yacc.c  */
#line 5962 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= YYTHD->variables.sql_mode & MODE_REAL_AS_FLOAT ?
              MYSQL_TYPE_FLOAT : MYSQL_TYPE_DOUBLE;
          }
    break;

  case 710:

/* Line 1455 of yacc.c  */
#line 5967 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DOUBLE; }
    break;

  case 711:

/* Line 1455 of yacc.c  */
#line 5969 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DOUBLE; }
    break;

  case 712:

/* Line 1455 of yacc.c  */
#line 5974 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->dec=Lex->length= (char*)0; }
    break;

  case 713:

/* Line 1455 of yacc.c  */
#line 5976 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->dec= (char*)0; }
    break;

  case 714:

/* Line 1455 of yacc.c  */
#line 5978 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 715:

/* Line 1455 of yacc.c  */
#line 5983 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->length=(yyvsp[(2) - (5)].lex_str).str;
            lex->dec=(yyvsp[(4) - (5)].lex_str).str;
          }
    break;

  case 716:

/* Line 1455 of yacc.c  */
#line 5991 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 717:

/* Line 1455 of yacc.c  */
#line 5992 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 718:

/* Line 1455 of yacc.c  */
#line 5996 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 719:

/* Line 1455 of yacc.c  */
#line 5997 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 720:

/* Line 1455 of yacc.c  */
#line 6001 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 721:

/* Line 1455 of yacc.c  */
#line 6002 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= UNSIGNED_FLAG;}
    break;

  case 722:

/* Line 1455 of yacc.c  */
#line 6003 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= UNSIGNED_FLAG | ZEROFILL_FLAG; }
    break;

  case 723:

/* Line 1455 of yacc.c  */
#line 6007 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 724:

/* Line 1455 of yacc.c  */
#line 6008 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 725:

/* Line 1455 of yacc.c  */
#line 6009 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 726:

/* Line 1455 of yacc.c  */
#line 6010 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 727:

/* Line 1455 of yacc.c  */
#line 6013 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->length=(char*) 0; /* use default length */ }
    break;

  case 728:

/* Line 1455 of yacc.c  */
#line 6014 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { }
    break;

  case 729:

/* Line 1455 of yacc.c  */
#line 6018 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 730:

/* Line 1455 of yacc.c  */
#line 6019 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 731:

/* Line 1455 of yacc.c  */
#line 6023 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 732:

/* Line 1455 of yacc.c  */
#line 6024 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 733:

/* Line 1455 of yacc.c  */
#line 6028 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 735:

/* Line 1455 of yacc.c  */
#line 6033 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type&= ~ NOT_NULL_FLAG; }
    break;

  case 736:

/* Line 1455 of yacc.c  */
#line 6034 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= NOT_NULL_FLAG; }
    break;

  case 737:

/* Line 1455 of yacc.c  */
#line 6035 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->default_value=(yyvsp[(2) - (2)].item); }
    break;

  case 738:

/* Line 1455 of yacc.c  */
#line 6037 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_func_now_local((yyvsp[(4) - (4)].num));
            if (item == NULL)
              MYSQL_YYABORT;
            Lex->on_update_value= item;
          }
    break;

  case 739:

/* Line 1455 of yacc.c  */
#line 6043 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= AUTO_INCREMENT_FLAG | NOT_NULL_FLAG; }
    break;

  case 740:

/* Line 1455 of yacc.c  */
#line 6045 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            LEX *lex=Lex;
            lex->type|= AUTO_INCREMENT_FLAG | NOT_NULL_FLAG | UNIQUE_FLAG;
            lex->alter_info.flags|= ALTER_ADD_INDEX;
          }
    break;

  case 741:

/* Line 1455 of yacc.c  */
#line 6051 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= PRI_KEY_FLAG | NOT_NULL_FLAG;
            lex->alter_info.flags|= ALTER_ADD_INDEX;
          }
    break;

  case 742:

/* Line 1455 of yacc.c  */
#line 6057 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= UNIQUE_FLAG; 
            lex->alter_info.flags|= ALTER_ADD_INDEX;
          }
    break;

  case 743:

/* Line 1455 of yacc.c  */
#line 6063 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= UNIQUE_KEY_FLAG; 
            lex->alter_info.flags|= ALTER_ADD_INDEX; 
          }
    break;

  case 744:

/* Line 1455 of yacc.c  */
#line 6068 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 745:

/* Line 1455 of yacc.c  */
#line 6070 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->charset && !my_charset_same(Lex->charset,(yyvsp[(2) - (2)].charset)))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       (yyvsp[(2) - (2)].charset)->name,Lex->charset->csname);
              MYSQL_YYABORT;
            }
            else
            {
              Lex->charset=(yyvsp[(2) - (2)].charset);
            }
          }
    break;

  case 746:

/* Line 1455 of yacc.c  */
#line 6083 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            new (YYTHD->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), true, &Lex->option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 747:

/* Line 1455 of yacc.c  */
#line 6089 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            new (YYTHD->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), false, &Lex->option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 748:

/* Line 1455 of yacc.c  */
#line 6095 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            new (YYTHD->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].ulonglong_number), &Lex->option_list,
                                  &Lex->option_list_last, YYTHD->mem_root);
          }
    break;

  case 749:

/* Line 1455 of yacc.c  */
#line 6101 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            new (YYTHD->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), &Lex->option_list, &Lex->option_list_last);
          }
    break;

  case 750:

/* Line 1455 of yacc.c  */
#line 6110 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
          (yyval.num)= (yyvsp[(1) - (2)].num);

          if (Lex->charset) /* Lex->charset is scanned in "type" */
          {
            if (!(Lex->charset= merge_charset_and_collation(Lex->charset, (yyvsp[(2) - (2)].charset))))
              MYSQL_YYABORT;
          }
          else if ((yyvsp[(2) - (2)].charset))
          {
            my_error(ER_NOT_SUPPORTED_YET, MYF(0),
                     "COLLATE with no CHARACTER SET "
                     "in SP parameters, RETURNS, DECLARE");
            MYSQL_YYABORT;
          }
        }
    break;

  case 751:

/* Line 1455 of yacc.c  */
#line 6131 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_now_local((yyvsp[(2) - (2)].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 752:

/* Line 1455 of yacc.c  */
#line 6137 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 753:

/* Line 1455 of yacc.c  */
#line 6141 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 754:

/* Line 1455 of yacc.c  */
#line 6142 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 755:

/* Line 1455 of yacc.c  */
#line 6147 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!((yyval.charset)=get_charset_by_csname((yyvsp[(1) - (1)].lex_str).str,MY_CS_PRIMARY,MYF(0))))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 756:

/* Line 1455 of yacc.c  */
#line 6154 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.charset)= &my_charset_bin; }
    break;

  case 757:

/* Line 1455 of yacc.c  */
#line 6158 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset);   }
    break;

  case 758:

/* Line 1455 of yacc.c  */
#line 6159 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 759:

/* Line 1455 of yacc.c  */
#line 6163 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.charset)= NULL; }
    break;

  case 760:

/* Line 1455 of yacc.c  */
#line 6164 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.charset)= (yyvsp[(2) - (2)].charset); }
    break;

  case 761:

/* Line 1455 of yacc.c  */
#line 6169 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!((yyval.charset)=get_charset_by_csname((yyvsp[(1) - (1)].lex_str).str,MY_CS_PRIMARY,MYF(0))) &&
                !((yyval.charset)=get_old_charset_by_name((yyvsp[(1) - (1)].lex_str).str)))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 762:

/* Line 1455 of yacc.c  */
#line 6177 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.charset)= &my_charset_bin; }
    break;

  case 763:

/* Line 1455 of yacc.c  */
#line 6181 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset);   }
    break;

  case 764:

/* Line 1455 of yacc.c  */
#line 6182 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 765:

/* Line 1455 of yacc.c  */
#line 6187 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!((yyval.charset)=get_charset_by_name((yyvsp[(1) - (1)].lex_str).str,MYF(0))))
            {
              my_error(ER_UNKNOWN_COLLATION, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 766:

/* Line 1455 of yacc.c  */
#line 6197 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 767:

/* Line 1455 of yacc.c  */
#line 6198 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(2) - (2)].charset); }
    break;

  case 768:

/* Line 1455 of yacc.c  */
#line 6202 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset); }
    break;

  case 769:

/* Line 1455 of yacc.c  */
#line 6203 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 770:

/* Line 1455 of yacc.c  */
#line 6207 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 771:

/* Line 1455 of yacc.c  */
#line 6208 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 772:

/* Line 1455 of yacc.c  */
#line 6213 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->charset= &my_charset_latin1; }
    break;

  case 773:

/* Line 1455 of yacc.c  */
#line 6215 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->charset= &my_charset_latin1_bin;
          }
    break;

  case 774:

/* Line 1455 of yacc.c  */
#line 6219 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->charset= &my_charset_latin1_bin;
          }
    break;

  case 775:

/* Line 1455 of yacc.c  */
#line 6226 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!(Lex->charset=get_charset_by_csname("ucs2",
                                                     MY_CS_PRIMARY,MYF(0))))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), "ucs2");
              MYSQL_YYABORT;
            }
          }
    break;

  case 776:

/* Line 1455 of yacc.c  */
#line 6235 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!(Lex->charset=get_charset_by_name("ucs2_bin", MYF(0))))
            {
              my_error(ER_UNKNOWN_COLLATION, MYF(0), "ucs2_bin");
              MYSQL_YYABORT;
            }
          }
    break;

  case 777:

/* Line 1455 of yacc.c  */
#line 6243 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!(Lex->charset=get_charset_by_name("ucs2_bin", MYF(0))))
            {
              my_error(ER_UNKNOWN_COLLATION, MYF(0), "ucs2_bin");
              MYSQL_YYABORT;
            }
          }
    break;

  case 778:

/* Line 1455 of yacc.c  */
#line 6253 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->charset=NULL; }
    break;

  case 781:

/* Line 1455 of yacc.c  */
#line 6256 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->charset=&my_charset_bin; }
    break;

  case 782:

/* Line 1455 of yacc.c  */
#line 6257 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->charset=(yyvsp[(2) - (3)].charset); }
    break;

  case 783:

/* Line 1455 of yacc.c  */
#line 6259 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->charset= NULL;
            Lex->type|= BINCMP_FLAG;
          }
    break;

  case 784:

/* Line 1455 of yacc.c  */
#line 6264 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->charset= (yyvsp[(3) - (3)].charset);
            Lex->type|= BINCMP_FLAG;
          }
    break;

  case 785:

/* Line 1455 of yacc.c  */
#line 6271 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { }
    break;

  case 786:

/* Line 1455 of yacc.c  */
#line 6272 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= BINCMP_FLAG; }
    break;

  case 789:

/* Line 1455 of yacc.c  */
#line 6287 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.table)=(yyvsp[(2) - (5)].table);
          }
    break;

  case 790:

/* Line 1455 of yacc.c  */
#line 6294 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ref_list.empty(); }
    break;

  case 792:

/* Line 1455 of yacc.c  */
#line 6300 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Key_part_spec *key= new Key_part_spec((yyvsp[(3) - (3)].lex_str), 0);
            if (key == NULL)
              MYSQL_YYABORT;
            Lex->ref_list.push_back(key);
          }
    break;

  case 793:

/* Line 1455 of yacc.c  */
#line 6307 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Key_part_spec *key= new Key_part_spec((yyvsp[(1) - (1)].lex_str), 0);
            if (key == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->ref_list.empty();
            lex->ref_list.push_back(key);
          }
    break;

  case 794:

/* Line 1455 of yacc.c  */
#line 6319 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_UNDEF; }
    break;

  case 795:

/* Line 1455 of yacc.c  */
#line 6321 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_FULL; }
    break;

  case 796:

/* Line 1455 of yacc.c  */
#line 6323 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_PARTIAL; }
    break;

  case 797:

/* Line 1455 of yacc.c  */
#line 6325 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_SIMPLE; }
    break;

  case 798:

/* Line 1455 of yacc.c  */
#line 6330 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= Foreign_key::FK_OPTION_UNDEF;
            lex->fk_delete_opt= Foreign_key::FK_OPTION_UNDEF;
          }
    break;

  case 799:

/* Line 1455 of yacc.c  */
#line 6336 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= (yyvsp[(3) - (3)].m_fk_option);
            lex->fk_delete_opt= Foreign_key::FK_OPTION_UNDEF;
          }
    break;

  case 800:

/* Line 1455 of yacc.c  */
#line 6342 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= Foreign_key::FK_OPTION_UNDEF;
            lex->fk_delete_opt= (yyvsp[(3) - (3)].m_fk_option);
          }
    break;

  case 801:

/* Line 1455 of yacc.c  */
#line 6349 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= (yyvsp[(3) - (6)].m_fk_option);
            lex->fk_delete_opt= (yyvsp[(6) - (6)].m_fk_option);
          }
    break;

  case 802:

/* Line 1455 of yacc.c  */
#line 6356 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= (yyvsp[(6) - (6)].m_fk_option);
            lex->fk_delete_opt= (yyvsp[(3) - (6)].m_fk_option);
          }
    break;

  case 803:

/* Line 1455 of yacc.c  */
#line 6364 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_RESTRICT; }
    break;

  case 804:

/* Line 1455 of yacc.c  */
#line 6365 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_CASCADE; }
    break;

  case 805:

/* Line 1455 of yacc.c  */
#line 6366 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_SET_NULL; }
    break;

  case 806:

/* Line 1455 of yacc.c  */
#line 6367 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_NO_ACTION; }
    break;

  case 807:

/* Line 1455 of yacc.c  */
#line 6368 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_DEFAULT;  }
    break;

  case 808:

/* Line 1455 of yacc.c  */
#line 6372 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::MULTIPLE; }
    break;

  case 809:

/* Line 1455 of yacc.c  */
#line 6376 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::PRIMARY; }
    break;

  case 810:

/* Line 1455 of yacc.c  */
#line 6377 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::UNIQUE; }
    break;

  case 811:

/* Line 1455 of yacc.c  */
#line 6381 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 812:

/* Line 1455 of yacc.c  */
#line 6382 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 813:

/* Line 1455 of yacc.c  */
#line 6386 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 815:

/* Line 1455 of yacc.c  */
#line 6391 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 816:

/* Line 1455 of yacc.c  */
#line 6392 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 817:

/* Line 1455 of yacc.c  */
#line 6393 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 818:

/* Line 1455 of yacc.c  */
#line 6397 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::MULTIPLE; }
    break;

  case 819:

/* Line 1455 of yacc.c  */
#line 6398 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::UNIQUE; }
    break;

  case 820:

/* Line 1455 of yacc.c  */
#line 6402 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::FULLTEXT;}
    break;

  case 821:

/* Line 1455 of yacc.c  */
#line 6407 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            (yyval.key_type)= Key::SPATIAL;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
    break;

  case 822:

/* Line 1455 of yacc.c  */
#line 6419 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->key_create_info= default_key_create_info;
          }
    break;

  case 825:

/* Line 1455 of yacc.c  */
#line 6436 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 827:

/* Line 1455 of yacc.c  */
#line 6441 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 829:

/* Line 1455 of yacc.c  */
#line 6446 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 837:

/* Line 1455 of yacc.c  */
#line 6466 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->key_create_info.algorithm= (yyvsp[(2) - (2)].key_alg); }
    break;

  case 838:

/* Line 1455 of yacc.c  */
#line 6467 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->key_create_info.algorithm= (yyvsp[(2) - (2)].key_alg); }
    break;

  case 839:

/* Line 1455 of yacc.c  */
#line 6472 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->key_create_info.block_size= (yyvsp[(3) - (3)].ulong_num); }
    break;

  case 840:

/* Line 1455 of yacc.c  */
#line 6473 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->key_create_info.comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 841:

/* Line 1455 of yacc.c  */
#line 6475 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            new (YYTHD->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), true, &Lex->option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 842:

/* Line 1455 of yacc.c  */
#line 6481 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            new (YYTHD->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), false, &Lex->option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 843:

/* Line 1455 of yacc.c  */
#line 6487 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            new (YYTHD->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].ulonglong_number), &Lex->option_list,
                                  &Lex->option_list_last, YYTHD->mem_root);
          }
    break;

  case 844:

/* Line 1455 of yacc.c  */
#line 6493 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            new (YYTHD->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), &Lex->option_list, &Lex->option_list_last);
          }
    break;

  case 849:

/* Line 1455 of yacc.c  */
#line 6511 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (plugin_is_ready(&(yyvsp[(3) - (3)].lex_str), MYSQL_FTPARSER_PLUGIN))
              Lex->key_create_info.parser_name= (yyvsp[(3) - (3)].lex_str);
            else
            {
              my_error(ER_FUNCTION_NOT_DEFINED, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 850:

/* Line 1455 of yacc.c  */
#line 6523 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_BTREE; }
    break;

  case 851:

/* Line 1455 of yacc.c  */
#line 6524 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_RTREE; }
    break;

  case 852:

/* Line 1455 of yacc.c  */
#line 6525 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_HASH; }
    break;

  case 853:

/* Line 1455 of yacc.c  */
#line 6529 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->col_list.push_back((yyvsp[(3) - (4)].key_part)); }
    break;

  case 854:

/* Line 1455 of yacc.c  */
#line 6530 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->col_list.push_back((yyvsp[(1) - (2)].key_part)); }
    break;

  case 855:

/* Line 1455 of yacc.c  */
#line 6535 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.key_part)= new Key_part_spec((yyvsp[(1) - (1)].lex_str), 0);
            if ((yyval.key_part) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 856:

/* Line 1455 of yacc.c  */
#line 6541 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            int key_part_len= atoi((yyvsp[(3) - (4)].lex_str).str);
            if (!key_part_len)
            {
              my_error(ER_KEY_PART_0, MYF(0), (yyvsp[(1) - (4)].lex_str).str);
            }
            (yyval.key_part)= new Key_part_spec((yyvsp[(1) - (4)].lex_str), (uint) key_part_len);
            if ((yyval.key_part) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 857:

/* Line 1455 of yacc.c  */
#line 6554 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 858:

/* Line 1455 of yacc.c  */
#line 6555 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 859:

/* Line 1455 of yacc.c  */
#line 6560 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
          LEX *lex= Lex;
          if (lex->check_exists && lex->sql_command != SQLCOM_ALTER_TABLE)
          {
            my_parse_error(ER(ER_SYNTAX_ERROR));
            MYSQL_YYABORT;
          }
          (yyval.lex_str)= (yyvsp[(2) - (2)].lex_str);
        }
    break;

  case 860:

/* Line 1455 of yacc.c  */
#line 6571 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 861:

/* Line 1455 of yacc.c  */
#line 6572 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 862:

/* Line 1455 of yacc.c  */
#line 6576 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->interval_list.push_back((yyvsp[(1) - (1)].string)); }
    break;

  case 863:

/* Line 1455 of yacc.c  */
#line 6577 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->interval_list.push_back((yyvsp[(3) - (3)].string)); }
    break;

  case 864:

/* Line 1455 of yacc.c  */
#line 6585 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->name.str= 0;
            lex->name.length= 0;
            lex->sql_command= SQLCOM_ALTER_TABLE;
            lex->duplicates= DUP_ERROR; 
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(4) - (4)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_READ_NO_INSERT,
                                                   MDL_SHARED_NO_WRITE))
              MYSQL_YYABORT;
            lex->col_list.empty();
            lex->select_lex.init_order();
            lex->select_lex.db= (lex->select_lex.table_list.first)->db;
            bzero((char*) &lex->create_info,sizeof(lex->create_info));
            lex->create_info.db_type= 0;
            lex->create_info.default_table_charset= NULL;
            lex->create_info.row_type= ROW_TYPE_NOT_USED;
            lex->alter_info.reset();
            lex->no_write_to_binlog= 0;
            lex->create_info.storage_media= HA_SM_DEFAULT;
            lex->create_last_non_select_table= lex->last_table();
            DBUG_ASSERT(!lex->m_stmt);
          }
    break;

  case 865:

/* Line 1455 of yacc.c  */
#line 6611 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            if (!lex->m_stmt)
            {
              /* Create a generic ALTER TABLE statment. */
              lex->m_stmt= new (thd->mem_root) Alter_table_statement(lex);
              if (lex->m_stmt == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 866:

/* Line 1455 of yacc.c  */
#line 6623 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.default_table_charset= NULL;
            Lex->create_info.used_fields= 0;
          }
    break;

  case 867:

/* Line 1455 of yacc.c  */
#line 6628 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_ALTER_DB;
            lex->name= (yyvsp[(3) - (5)].lex_str);
            if (lex->name.str == NULL &&
                lex->copy_db_to(&lex->name.str, &lex->name.length))
              MYSQL_YYABORT;
          }
    break;

  case 868:

/* Line 1455 of yacc.c  */
#line 6637 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "DATABASE");
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_ALTER_DB_UPGRADE;
            lex->name= (yyvsp[(3) - (7)].lex_str);
          }
    break;

  case 869:

/* Line 1455 of yacc.c  */
#line 6648 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }
            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
    break;

  case 870:

/* Line 1455 of yacc.c  */
#line 6659 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->sql_command= SQLCOM_ALTER_PROCEDURE;
            lex->spname= (yyvsp[(3) - (5)].spname);
          }
    break;

  case 871:

/* Line 1455 of yacc.c  */
#line 6666 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
    break;

  case 872:

/* Line 1455 of yacc.c  */
#line 6677 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->sql_command= SQLCOM_ALTER_FUNCTION;
            lex->spname= (yyvsp[(3) - (5)].spname);
          }
    break;

  case 873:

/* Line 1455 of yacc.c  */
#line 6684 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "ALTER VIEW");
              MYSQL_YYABORT;
            }
            lex->create_view_mode= VIEW_ALTER;
          }
    break;

  case 874:

/* Line 1455 of yacc.c  */
#line 6695 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 875:

/* Line 1455 of yacc.c  */
#line 6702 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "ALTER VIEW");
              MYSQL_YYABORT;
            }
            lex->create_view_algorithm= DTYPE_ALGORITHM_UNDEFINED;
            lex->create_view_mode= VIEW_ALTER;
          }
    break;

  case 876:

/* Line 1455 of yacc.c  */
#line 6714 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 877:

/* Line 1455 of yacc.c  */
#line 6716 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* 
              It is safe to use Lex->spname because
              ALTER EVENT xxx RENATE TO yyy DO ALTER EVENT RENAME TO
              is not allowed. Lex->spname is used in the case of RENAME TO
              If it had to be supported spname had to be added to
              Event_parse_data.
            */

            if (!(Lex->event_parse_data= Event_parse_data::new_instance(YYTHD)))
              MYSQL_YYABORT;
            Lex->event_parse_data->identifier= (yyvsp[(4) - (4)].spname);

            Lex->sql_command= SQLCOM_ALTER_EVENT;
          }
    break;

  case 878:

/* Line 1455 of yacc.c  */
#line 6736 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!((yyvsp[(6) - (10)].num) || (yyvsp[(7) - (10)].num) || (yyvsp[(8) - (10)].num) || (yyvsp[(9) - (10)].num) || (yyvsp[(10) - (10)].num)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            /*
              sql_command is set here because some rules in ev_sql_stmt
              can overwrite it
            */
            Lex->sql_command= SQLCOM_ALTER_EVENT;
          }
    break;

  case 879:

/* Line 1455 of yacc.c  */
#line 6749 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_TABLESPACE;
          }
    break;

  case 880:

/* Line 1455 of yacc.c  */
#line 6754 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_LOGFILE_GROUP;
          }
    break;

  case 881:

/* Line 1455 of yacc.c  */
#line 6759 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= CHANGE_FILE_TABLESPACE;
          }
    break;

  case 882:

/* Line 1455 of yacc.c  */
#line 6764 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_ACCESS_MODE_TABLESPACE;
          }
    break;

  case 883:

/* Line 1455 of yacc.c  */
#line 6769 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_ALTER_SERVER;
            lex->server_options.server_name= (yyvsp[(3) - (7)].lex_str).str;
            lex->server_options.server_name_length= (yyvsp[(3) - (7)].lex_str).length;
          }
    break;

  case 884:

/* Line 1455 of yacc.c  */
#line 6778 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 885:

/* Line 1455 of yacc.c  */
#line 6779 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 886:

/* Line 1455 of yacc.c  */
#line 6780 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 887:

/* Line 1455 of yacc.c  */
#line 6781 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 888:

/* Line 1455 of yacc.c  */
#line 6785 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 889:

/* Line 1455 of yacc.c  */
#line 6787 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              Use lex's spname to hold the new name.
              The original name is in the Event_parse_data object
            */
            Lex->spname= (yyvsp[(3) - (3)].spname); 
            (yyval.num)= 1;
          }
    break;

  case 890:

/* Line 1455 of yacc.c  */
#line 6798 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 891:

/* Line 1455 of yacc.c  */
#line 6799 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 892:

/* Line 1455 of yacc.c  */
#line 6803 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str).str= 0; (yyval.lex_str).length= 0; }
    break;

  case 893:

/* Line 1455 of yacc.c  */
#line 6804 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 895:

/* Line 1455 of yacc.c  */
#line 6809 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->alter_info.tablespace_op= DISCARD_TABLESPACE; }
    break;

  case 896:

/* Line 1455 of yacc.c  */
#line 6810 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->alter_info.tablespace_op= IMPORT_TABLESPACE; }
    break;

  case 902:

/* Line 1455 of yacc.c  */
#line 6827 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_DROP_PARTITION;
          }
    break;

  case 903:

/* Line 1455 of yacc.c  */
#line 6832 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_info.flags|= ALTER_REBUILD_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
          }
    break;

  case 904:

/* Line 1455 of yacc.c  */
#line 6839 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root)
                          Alter_table_optimize_partition_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 906:

/* Line 1455 of yacc.c  */
#line 6853 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root)
                          Alter_table_analyze_partition_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 907:

/* Line 1455 of yacc.c  */
#line 6865 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root)
                          Alter_table_check_partition_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 909:

/* Line 1455 of yacc.c  */
#line 6878 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root)
                          Alter_table_repair_partition_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 911:

/* Line 1455 of yacc.c  */
#line 6891 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_info.flags|= ALTER_COALESCE_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->alter_info.num_parts= (yyvsp[(4) - (4)].ulong_num);
          }
    break;

  case 912:

/* Line 1455 of yacc.c  */
#line 6898 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root)
                          Alter_table_truncate_partition_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 914:

/* Line 1455 of yacc.c  */
#line 6913 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_REMOVE_PARTITIONING;
          }
    break;

  case 915:

/* Line 1455 of yacc.c  */
#line 6920 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_ALL_PARTITION;
          }
    break;

  case 917:

/* Line 1455 of yacc.c  */
#line 6928 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info= new partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            lex->alter_info.flags|= ALTER_ADD_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(4) - (4)].num);
          }
    break;

  case 918:

/* Line 1455 of yacc.c  */
#line 6940 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 920:

/* Line 1455 of yacc.c  */
#line 6946 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info->num_parts= lex->part_info->partitions.elements;
          }
    break;

  case 921:

/* Line 1455 of yacc.c  */
#line 6951 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->part_info->num_parts= (yyvsp[(2) - (2)].ulong_num);
          }
    break;

  case 922:

/* Line 1455 of yacc.c  */
#line 6958 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info= new partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            lex->no_write_to_binlog= (yyvsp[(3) - (3)].num);
          }
    break;

  case 924:

/* Line 1455 of yacc.c  */
#line 6973 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_TABLE_REORG;
          }
    break;

  case 925:

/* Line 1455 of yacc.c  */
#line 6977 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_REORGANIZE_PARTITION;
          }
    break;

  case 926:

/* Line 1455 of yacc.c  */
#line 6981 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->num_parts= part_info->partitions.elements;
          }
    break;

  case 927:

/* Line 1455 of yacc.c  */
#line 6988 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 928:

/* Line 1455 of yacc.c  */
#line 6989 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 929:

/* Line 1455 of yacc.c  */
#line 6994 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->alter_info.partition_names.push_back((yyvsp[(1) - (1)].lex_str).str))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
          }
    break;

  case 932:

/* Line 1455 of yacc.c  */
#line 7014 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->change=0;
            lex->alter_info.flags|= ALTER_ADD_COLUMN;
          }
    break;

  case 933:

/* Line 1455 of yacc.c  */
#line 7023 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
          }
    break;

  case 934:

/* Line 1455 of yacc.c  */
#line 7027 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
            Lex->alter_info.flags|= ALTER_ADD_INDEX;
          }
    break;

  case 935:

/* Line 1455 of yacc.c  */
#line 7032 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_ADD_COLUMN | ALTER_ADD_INDEX;
          }
    break;

  case 936:

/* Line 1455 of yacc.c  */
#line 7036 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->change= (yyvsp[(4) - (4)].lex_str).str;
            lex->alter_info.flags|= ALTER_CHANGE_COLUMN;
            lex->option_list= NULL;
          }
    break;

  case 937:

/* Line 1455 of yacc.c  */
#line 7043 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
          }
    break;

  case 938:

/* Line 1455 of yacc.c  */
#line 7047 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->length=lex->dec=0; lex->type=0;
            lex->default_value= lex->on_update_value= 0;
            lex->comment=null_lex_str;
            lex->charset= NULL;
            lex->alter_info.flags|= ALTER_CHANGE_COLUMN;
	    lex->vcol_info= 0;
            lex->option_list= NULL;
          }
    break;

  case 939:

/* Line 1455 of yacc.c  */
#line 7058 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (add_field_to_list(lex->thd,&(yyvsp[(4) - (6)].lex_str),
                                  (enum enum_field_types) (yyvsp[(6) - (6)].num),
                                  lex->length,lex->dec,lex->type,
                                  lex->default_value, lex->on_update_value,
                                  &lex->comment,
                                  (yyvsp[(4) - (6)].lex_str).str, &lex->interval_list, lex->charset,
                                  lex->uint_geom_type,
                                  lex->vcol_info, lex->option_list))
              MYSQL_YYABORT;
          }
    break;

  case 940:

/* Line 1455 of yacc.c  */
#line 7071 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
          }
    break;

  case 941:

/* Line 1455 of yacc.c  */
#line 7075 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::COLUMN, (yyvsp[(4) - (5)].lex_str).str, (yyvsp[(3) - (5)].num));
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= ALTER_DROP_COLUMN;
          }
    break;

  case 942:

/* Line 1455 of yacc.c  */
#line 7084 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_DROP_INDEX | ALTER_FOREIGN_KEY;
          }
    break;

  case 943:

/* Line 1455 of yacc.c  */
#line 7088 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, primary_key_name,
                                           FALSE);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= ALTER_DROP_INDEX;
          }
    break;

  case 944:

/* Line 1455 of yacc.c  */
#line 7098 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, (yyvsp[(4) - (4)].lex_str).str, (yyvsp[(3) - (4)].num));
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= ALTER_DROP_INDEX;
          }
    break;

  case 945:

/* Line 1455 of yacc.c  */
#line 7107 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.keys_onoff= DISABLE;
            lex->alter_info.flags|= ALTER_KEYS_ONOFF;
          }
    break;

  case 946:

/* Line 1455 of yacc.c  */
#line 7113 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.keys_onoff= ENABLE;
            lex->alter_info.flags|= ALTER_KEYS_ONOFF;
          }
    break;

  case 947:

/* Line 1455 of yacc.c  */
#line 7119 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_column *ac= new Alter_column((yyvsp[(3) - (6)].lex_str).str,(yyvsp[(6) - (6)].item));
            if (ac == NULL)
              MYSQL_YYABORT;
            lex->alter_info.alter_list.push_back(ac);
            lex->alter_info.flags|= ALTER_CHANGE_COLUMN_DEFAULT;
          }
    break;

  case 948:

/* Line 1455 of yacc.c  */
#line 7128 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_column *ac= new Alter_column((yyvsp[(3) - (5)].lex_str).str, (Item*) 0);
            if (ac == NULL)
              MYSQL_YYABORT;
            lex->alter_info.alter_list.push_back(ac);
            lex->alter_info.flags|= ALTER_CHANGE_COLUMN_DEFAULT;
          }
    break;

  case 949:

/* Line 1455 of yacc.c  */
#line 7137 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            size_t dummy;
            lex->select_lex.db=(yyvsp[(3) - (3)].table)->db.str;
            if (lex->select_lex.db == NULL &&
                lex->copy_db_to(&lex->select_lex.db, &dummy))
            {
              MYSQL_YYABORT;
            }
            if (check_table_name((yyvsp[(3) - (3)].table)->table.str,(yyvsp[(3) - (3)].table)->table.length, FALSE) ||
                ((yyvsp[(3) - (3)].table)->db.str && check_db_name(&(yyvsp[(3) - (3)].table)->db)))
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(3) - (3)].table)->table.str);
              MYSQL_YYABORT;
            }
            lex->name= (yyvsp[(3) - (3)].table)->table;
            lex->alter_info.flags|= ALTER_RENAME;
          }
    break;

  case 950:

/* Line 1455 of yacc.c  */
#line 7156 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!(yyvsp[(4) - (5)].charset))
            {
              THD *thd= YYTHD;
              (yyvsp[(4) - (5)].charset)= thd->variables.collation_database;
            }
            (yyvsp[(5) - (5)].charset)= (yyvsp[(5) - (5)].charset) ? (yyvsp[(5) - (5)].charset) : (yyvsp[(4) - (5)].charset);
            if (!my_charset_same((yyvsp[(4) - (5)].charset),(yyvsp[(5) - (5)].charset)))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       (yyvsp[(5) - (5)].charset)->name, (yyvsp[(4) - (5)].charset)->csname);
              MYSQL_YYABORT;
            }
            LEX *lex= Lex;
            lex->create_info.table_charset=
            lex->create_info.default_table_charset= (yyvsp[(5) - (5)].charset);
            lex->create_info.used_fields|= (HA_CREATE_USED_CHARSET |
              HA_CREATE_USED_DEFAULT_CHARSET);
            lex->alter_info.flags|= ALTER_CONVERT;
          }
    break;

  case 951:

/* Line 1455 of yacc.c  */
#line 7177 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.flags|= ALTER_OPTIONS;
            if ((lex->create_info.used_fields & HA_CREATE_USED_ENGINE) &&
                !lex->create_info.db_type)
            {
              lex->create_info.used_fields&= ~HA_CREATE_USED_ENGINE;
            }
          }
    break;

  case 952:

/* Line 1455 of yacc.c  */
#line 7187 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_RECREATE;
          }
    break;

  case 953:

/* Line 1455 of yacc.c  */
#line 7191 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.flags|= ALTER_ORDER;
          }
    break;

  case 954:

/* Line 1455 of yacc.c  */
#line 7198 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 955:

/* Line 1455 of yacc.c  */
#line 7199 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 956:

/* Line 1455 of yacc.c  */
#line 7203 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ignore= 0;}
    break;

  case 957:

/* Line 1455 of yacc.c  */
#line 7204 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ignore= 1;}
    break;

  case 958:

/* Line 1455 of yacc.c  */
#line 7208 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ignore= Lex->online= 0;}
    break;

  case 964:

/* Line 1455 of yacc.c  */
#line 7222 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ignore= 1;}
    break;

  case 965:

/* Line 1455 of yacc.c  */
#line 7223 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->online= 1;}
    break;

  case 966:

/* Line 1455 of yacc.c  */
#line 7227 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->drop_mode= DROP_DEFAULT; }
    break;

  case 967:

/* Line 1455 of yacc.c  */
#line 7228 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->drop_mode= DROP_RESTRICT; }
    break;

  case 968:

/* Line 1455 of yacc.c  */
#line 7229 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->drop_mode= DROP_CASCADE; }
    break;

  case 969:

/* Line 1455 of yacc.c  */
#line 7233 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 970:

/* Line 1455 of yacc.c  */
#line 7234 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { store_position_for_column((yyvsp[(2) - (2)].lex_str).str); }
    break;

  case 971:

/* Line 1455 of yacc.c  */
#line 7235 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { store_position_for_column(first_keyword); }
    break;

  case 972:

/* Line 1455 of yacc.c  */
#line 7239 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 973:

/* Line 1455 of yacc.c  */
#line 7240 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 974:

/* Line 1455 of yacc.c  */
#line 7241 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 975:

/* Line 1455 of yacc.c  */
#line 7242 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 976:

/* Line 1455 of yacc.c  */
#line 7251 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_START;
            lex->type = 0;
            /* If you change this code don't forget to update SLAVE START too */
          }
    break;

  case 977:

/* Line 1455 of yacc.c  */
#line 7258 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 978:

/* Line 1455 of yacc.c  */
#line 7260 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_ALL_START;
            lex->type = 0;
          }
    break;

  case 979:

/* Line 1455 of yacc.c  */
#line 7265 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 980:

/* Line 1455 of yacc.c  */
#line 7267 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_STOP;
            lex->type = 0;
            /* If you change this code don't forget to update SLAVE STOP too */
          }
    break;

  case 981:

/* Line 1455 of yacc.c  */
#line 7274 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_ALL_STOP;
            lex->type = 0;
            /* If you change this code don't forget to update SLAVE STOP too */
          }
    break;

  case 982:

/* Line 1455 of yacc.c  */
#line 7281 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_START;
            lex->type = 0;
          }
    break;

  case 983:

/* Line 1455 of yacc.c  */
#line 7287 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 984:

/* Line 1455 of yacc.c  */
#line 7289 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_STOP;
            lex->type = 0;
          }
    break;

  case 985:

/* Line 1455 of yacc.c  */
#line 7298 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_BEGIN;
            /* READ ONLY and READ WRITE are mutually exclusive. */
            if (((yyvsp[(3) - (3)].num) & MYSQL_START_TRANS_OPT_READ_WRITE) &&
                ((yyvsp[(3) - (3)].num) & MYSQL_START_TRANS_OPT_READ_ONLY))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->start_transaction_opt= (yyvsp[(3) - (3)].num);
          }
    break;

  case 986:

/* Line 1455 of yacc.c  */
#line 7314 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= 0;
          }
    break;

  case 987:

/* Line 1455 of yacc.c  */
#line 7318 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= (yyvsp[(1) - (1)].num);
          }
    break;

  case 988:

/* Line 1455 of yacc.c  */
#line 7325 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= (yyvsp[(1) - (1)].num);
          }
    break;

  case 989:

/* Line 1455 of yacc.c  */
#line 7329 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= (yyvsp[(1) - (3)].num) | (yyvsp[(3) - (3)].num);
          }
    break;

  case 990:

/* Line 1455 of yacc.c  */
#line 7336 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_START_TRANS_OPT_WITH_CONS_SNAPSHOT;
          }
    break;

  case 991:

/* Line 1455 of yacc.c  */
#line 7340 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_START_TRANS_OPT_READ_ONLY;
          }
    break;

  case 992:

/* Line 1455 of yacc.c  */
#line 7344 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_START_TRANS_OPT_READ_WRITE;
          }
    break;

  case 993:

/* Line 1455 of yacc.c  */
#line 7350 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->slave_thd_opt= 0; }
    break;

  case 994:

/* Line 1455 of yacc.c  */
#line 7352 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 997:

/* Line 1455 of yacc.c  */
#line 7361 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 998:

/* Line 1455 of yacc.c  */
#line 7362 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->slave_thd_opt|=SLAVE_SQL; }
    break;

  case 999:

/* Line 1455 of yacc.c  */
#line 7363 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->slave_thd_opt|=SLAVE_IO; }
    break;

  case 1000:

/* Line 1455 of yacc.c  */
#line 7367 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1001:

/* Line 1455 of yacc.c  */
#line 7369 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (((lex->mi.log_file_name || lex->mi.pos) &&
                 (lex->mi.relay_log_name || lex->mi.relay_log_pos)) ||
                !((lex->mi.log_file_name && lex->mi.pos) ||
                  (lex->mi.relay_log_name && lex->mi.relay_log_pos)))
            {
               my_message(ER_BAD_SLAVE_UNTIL_COND,
                          ER(ER_BAD_SLAVE_UNTIL_COND), MYF(0));
               MYSQL_YYABORT;
            }
          }
    break;

  case 1004:

/* Line 1455 of yacc.c  */
#line 7390 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_CHECKSUM;
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1005:

/* Line 1455 of yacc.c  */
#line 7397 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1006:

/* Line 1455 of yacc.c  */
#line 7401 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.flags= 0; }
    break;

  case 1007:

/* Line 1455 of yacc.c  */
#line 7402 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.flags= T_QUICK; }
    break;

  case 1008:

/* Line 1455 of yacc.c  */
#line 7403 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.flags= T_EXTEND; }
    break;

  case 1009:

/* Line 1455 of yacc.c  */
#line 7408 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_REPAIR;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1010:

/* Line 1455 of yacc.c  */
#line 7418 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root) Repair_table_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1011:

/* Line 1455 of yacc.c  */
#line 7429 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.flags = T_MEDIUM; }
    break;

  case 1012:

/* Line 1455 of yacc.c  */
#line 7430 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1013:

/* Line 1455 of yacc.c  */
#line 7434 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1014:

/* Line 1455 of yacc.c  */
#line 7435 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1015:

/* Line 1455 of yacc.c  */
#line 7439 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_QUICK; }
    break;

  case 1016:

/* Line 1455 of yacc.c  */
#line 7440 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_EXTEND; }
    break;

  case 1017:

/* Line 1455 of yacc.c  */
#line 7441 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.sql_flags|= TT_USEFRM; }
    break;

  case 1018:

/* Line 1455 of yacc.c  */
#line 7446 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_ANALYZE;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1019:

/* Line 1455 of yacc.c  */
#line 7456 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root) Analyze_table_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1023:

/* Line 1455 of yacc.c  */
#line 7477 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1024:

/* Line 1455 of yacc.c  */
#line 7479 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            THD *thd= YYTHD;
            thd->lex->with_persistent_for_clause= TRUE;
          }
    break;

  case 1025:

/* Line 1455 of yacc.c  */
#line 7487 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1026:

/* Line 1455 of yacc.c  */
#line 7489 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1027:

/* Line 1455 of yacc.c  */
#line 7492 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1028:

/* Line 1455 of yacc.c  */
#line 7494 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            lex->column_list= new List<LEX_STRING>;
            if (lex->column_list == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1030:

/* Line 1455 of yacc.c  */
#line 7506 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1031:

/* Line 1455 of yacc.c  */
#line 7508 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            lex->index_list= new List<LEX_STRING>;
            if (lex->index_list == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1033:

/* Line 1455 of yacc.c  */
#line 7521 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1034:

/* Line 1455 of yacc.c  */
#line 7523 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->column_list->push_back((LEX_STRING*)
            sql_memdup(&(yyvsp[(1) - (1)].lex_str), sizeof(LEX_STRING)));
          }
    break;

  case 1035:

/* Line 1455 of yacc.c  */
#line 7528 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->column_list->push_back((LEX_STRING*)
            sql_memdup(&(yyvsp[(3) - (3)].lex_str), sizeof(LEX_STRING)));
          }
    break;

  case 1036:

/* Line 1455 of yacc.c  */
#line 7536 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1039:

/* Line 1455 of yacc.c  */
#line 7543 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->index_list->push_back(
              (LEX_STRING*) sql_memdup(&(yyvsp[(1) - (1)].lex_str), sizeof(LEX_STRING)));
          }
    break;

  case 1040:

/* Line 1455 of yacc.c  */
#line 7549 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX_STRING str= {(char*) "PRIMARY", 7};
            Lex->index_list->push_back(
              (LEX_STRING*) sql_memdup(&str, sizeof(LEX_STRING)));
          }
    break;

  case 1041:

/* Line 1455 of yacc.c  */
#line 7558 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_BINLOG_BASE64_EVENT;
            Lex->comment= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 1042:

/* Line 1455 of yacc.c  */
#line 7566 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "CHECK");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_CHECK;
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1043:

/* Line 1455 of yacc.c  */
#line 7581 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root) Check_table_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1044:

/* Line 1455 of yacc.c  */
#line 7592 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.flags = T_MEDIUM; }
    break;

  case 1045:

/* Line 1455 of yacc.c  */
#line 7593 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1046:

/* Line 1455 of yacc.c  */
#line 7597 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1047:

/* Line 1455 of yacc.c  */
#line 7598 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1048:

/* Line 1455 of yacc.c  */
#line 7602 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_QUICK; }
    break;

  case 1049:

/* Line 1455 of yacc.c  */
#line 7603 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_FAST; }
    break;

  case 1050:

/* Line 1455 of yacc.c  */
#line 7604 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_MEDIUM; }
    break;

  case 1051:

/* Line 1455 of yacc.c  */
#line 7605 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_EXTEND; }
    break;

  case 1052:

/* Line 1455 of yacc.c  */
#line 7606 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_CHECK_ONLY_CHANGED; }
    break;

  case 1053:

/* Line 1455 of yacc.c  */
#line 7607 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.sql_flags|= TT_FOR_UPGRADE; }
    break;

  case 1054:

/* Line 1455 of yacc.c  */
#line 7612 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_OPTIMIZE;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1055:

/* Line 1455 of yacc.c  */
#line 7622 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root) Optimize_table_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1056:

/* Line 1455 of yacc.c  */
#line 7633 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1057:

/* Line 1455 of yacc.c  */
#line 7634 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1058:

/* Line 1455 of yacc.c  */
#line 7635 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1059:

/* Line 1455 of yacc.c  */
#line 7640 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_RENAME_TABLE;
          }
    break;

  case 1060:

/* Line 1455 of yacc.c  */
#line 7644 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1061:

/* Line 1455 of yacc.c  */
#line 7646 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_RENAME_USER;
          }
    break;

  case 1062:

/* Line 1455 of yacc.c  */
#line 7653 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (3)].lex_user)) || Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 1063:

/* Line 1455 of yacc.c  */
#line 7658 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (5)].lex_user)) || Lex->users_list.push_back((yyvsp[(5) - (5)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 1066:

/* Line 1455 of yacc.c  */
#line 7671 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            SELECT_LEX *sl= lex->current_select;
            if (!sl->add_table_to_list(lex->thd, (yyvsp[(1) - (3)].table),NULL,TL_OPTION_UPDATING,
                                       TL_IGNORE, MDL_EXCLUSIVE) ||
                !sl->add_table_to_list(lex->thd, (yyvsp[(3) - (3)].table),NULL,TL_OPTION_UPDATING,
                                       TL_IGNORE, MDL_EXCLUSIVE))
              MYSQL_YYABORT;
          }
    break;

  case 1067:

/* Line 1455 of yacc.c  */
#line 7684 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->alter_info.reset();
          }
    break;

  case 1068:

/* Line 1455 of yacc.c  */
#line 7688 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ASSIGN_TO_KEYCACHE;
            lex->ident= (yyvsp[(6) - (6)].lex_str);
          }
    break;

  case 1073:

/* Line 1455 of yacc.c  */
#line 7707 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (2)].table), NULL, 0, TL_READ,
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1074:

/* Line 1455 of yacc.c  */
#line 7717 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (3)].table), NULL, 0, TL_READ, 
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1075:

/* Line 1455 of yacc.c  */
#line 7726 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 1076:

/* Line 1455 of yacc.c  */
#line 7727 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str) = default_key_cache_base; }
    break;

  case 1077:

/* Line 1455 of yacc.c  */
#line 7732 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_PRELOAD_KEYS;
            lex->alter_info.reset();
          }
    break;

  case 1078:

/* Line 1455 of yacc.c  */
#line 7738 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1083:

/* Line 1455 of yacc.c  */
#line 7753 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (3)].table), NULL, (yyvsp[(3) - (3)].num), TL_READ,
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1084:

/* Line 1455 of yacc.c  */
#line 7763 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (4)].table), NULL, (yyvsp[(4) - (4)].num), TL_READ,
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1085:

/* Line 1455 of yacc.c  */
#line 7773 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_ADMIN_PARTITION;
          }
    break;

  case 1087:

/* Line 1455 of yacc.c  */
#line 7780 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->select_lex.alloc_index_hints(YYTHD);
            Select->set_index_hint_type(INDEX_HINT_USE, 
                                        INDEX_HINT_MASK_ALL);
          }
    break;

  case 1089:

/* Line 1455 of yacc.c  */
#line 7789 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { }
    break;

  case 1091:

/* Line 1455 of yacc.c  */
#line 7795 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1092:

/* Line 1455 of yacc.c  */
#line 7796 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= TL_OPTION_IGNORE_LEAVES; }
    break;

  case 1093:

/* Line 1455 of yacc.c  */
#line 7806 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SELECT;
          }
    break;

  case 1096:

/* Line 1455 of yacc.c  */
#line 7820 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (setup_select_in_parentheses(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1098:

/* Line 1455 of yacc.c  */
#line 7830 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (setup_select_in_parentheses(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1100:

/* Line 1455 of yacc.c  */
#line 7839 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX * sel= lex->current_select;
            if (lex->current_select->set_braces(0))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (sel->linkage == UNION_TYPE &&
                sel->master_unit()->first_select()->braces)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1102:

/* Line 1455 of yacc.c  */
#line 7858 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->linkage != UNION_TYPE)
              mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 1103:

/* Line 1455 of yacc.c  */
#line 7866 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1105:

/* Line 1455 of yacc.c  */
#line 7873 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1110:

/* Line 1455 of yacc.c  */
#line 7883 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->context.table_list=
              Select->context.first_name_resolution_table=
                Select->table_list.first;
          }
    break;

  case 1113:

/* Line 1455 of yacc.c  */
#line 7898 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Select->options & SELECT_DISTINCT && Select->options & SELECT_ALL)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "ALL", "DISTINCT");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1117:

/* Line 1455 of yacc.c  */
#line 7915 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* 
              Allow this flag only on the first top-level SELECT statement, if
              SQL_CACHE wasn't specified, and only once per query.
             */
            if (Lex->current_select != &Lex->select_lex)
            {
              my_error(ER_CANT_USE_OPTION_HERE, MYF(0), "SQL_NO_CACHE");
              MYSQL_YYABORT;
            }
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_CACHE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "SQL_CACHE", "SQL_NO_CACHE");
              MYSQL_YYABORT;
            }
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_NO_CACHE)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "SQL_NO_CACHE");
              MYSQL_YYABORT;
            }
            else
            {
              Lex->safe_to_cache_query=0;
              Lex->select_lex.options&= ~OPTION_TO_QUERY_CACHE;
              Lex->select_lex.sql_cache= SELECT_LEX::SQL_NO_CACHE;
            }
          }
    break;

  case 1118:

/* Line 1455 of yacc.c  */
#line 7943 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* 
              Allow this flag only on the first top-level SELECT statement, if
              SQL_NO_CACHE wasn't specified, and only once per query.
             */
            if (Lex->current_select != &Lex->select_lex)
            {
              my_error(ER_CANT_USE_OPTION_HERE, MYF(0), "SQL_CACHE");
              MYSQL_YYABORT;
            }         
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_NO_CACHE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "SQL_NO_CACHE", "SQL_CACHE");
              MYSQL_YYABORT;
            }
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_CACHE)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "SQL_CACHE");
              MYSQL_YYABORT;
            }
            else
            {
              Lex->safe_to_cache_query=1;
              Lex->select_lex.options|= OPTION_TO_QUERY_CACHE;
              Lex->select_lex.sql_cache= SELECT_LEX::SQL_CACHE;
            }
          }
    break;

  case 1120:

/* Line 1455 of yacc.c  */
#line 7975 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->current_select->set_lock_for_tables(TL_WRITE);
            lex->safe_to_cache_query=0;
          }
    break;

  case 1121:

/* Line 1455 of yacc.c  */
#line 7981 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->current_select->
              set_lock_for_tables(TL_READ_WITH_SHARED_LOCKS);
            lex->safe_to_cache_query=0;
          }
    break;

  case 1124:

/* Line 1455 of yacc.c  */
#line 7993 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *item= new (thd->mem_root)
                          Item_field(&thd->lex->current_select->context,
                                     NULL, NULL, "*");
            if (item == NULL)
              MYSQL_YYABORT;
            if (add_item_to_list(thd, item))
              MYSQL_YYABORT;
            (thd->lex->current_select->with_wild)++;
          }
    break;

  case 1125:

/* Line 1455 of yacc.c  */
#line 8008 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (add_item_to_list(thd, (yyvsp[(2) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1126:

/* Line 1455 of yacc.c  */
#line 8015 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            DBUG_ASSERT((yyvsp[(1) - (4)].simple_string) < (yyvsp[(3) - (4)].simple_string));

            if (add_item_to_list(thd, (yyvsp[(2) - (4)].item)))
              MYSQL_YYABORT;
            if ((yyvsp[(4) - (4)].lex_str).str)
            {
              if (Lex->sql_command == SQLCOM_CREATE_VIEW &&
                  check_column_name((yyvsp[(4) - (4)].lex_str).str))
              {
                my_error(ER_WRONG_COLUMN_NAME, MYF(0), (yyvsp[(4) - (4)].lex_str).str);
                MYSQL_YYABORT;
              }
              (yyvsp[(2) - (4)].item)->is_autogenerated_name= FALSE;
              (yyvsp[(2) - (4)].item)->set_name((yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length, system_charset_info);
            }
            else if (!(yyvsp[(2) - (4)].item)->name)
            {
              (yyvsp[(2) - (4)].item)->set_name((yyvsp[(1) - (4)].simple_string), (uint) ((yyvsp[(3) - (4)].simple_string) - (yyvsp[(1) - (4)].simple_string)), thd->charset());
            }
          }
    break;

  case 1127:

/* Line 1455 of yacc.c  */
#line 8040 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.simple_string)= (char*) YYLIP->get_cpp_tok_start();
          }
    break;

  case 1128:

/* Line 1455 of yacc.c  */
#line 8046 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.simple_string)= (char*) YYLIP->get_cpp_tok_end();
          }
    break;

  case 1129:

/* Line 1455 of yacc.c  */
#line 8052 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)=null_lex_str;}
    break;

  case 1130:

/* Line 1455 of yacc.c  */
#line 8053 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str); }
    break;

  case 1131:

/* Line 1455 of yacc.c  */
#line 8054 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str); }
    break;

  case 1132:

/* Line 1455 of yacc.c  */
#line 8055 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1133:

/* Line 1455 of yacc.c  */
#line 8056 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1134:

/* Line 1455 of yacc.c  */
#line 8060 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= NOT_FIXED_DEC;  }
    break;

  case 1135:

/* Line 1455 of yacc.c  */
#line 8061 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= NOT_FIXED_DEC;  }
    break;

  case 1136:

/* Line 1455 of yacc.c  */
#line 8062 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(2) - (3)].ulong_num); }
    break;

  case 1137:

/* Line 1455 of yacc.c  */
#line 8066 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0;  }
    break;

  case 1138:

/* Line 1455 of yacc.c  */
#line 8067 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0;  }
    break;

  case 1139:

/* Line 1455 of yacc.c  */
#line 8068 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(2) - (3)].ulong_num); }
    break;

  case 1140:

/* Line 1455 of yacc.c  */
#line 8072 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1141:

/* Line 1455 of yacc.c  */
#line 8073 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1142:

/* Line 1455 of yacc.c  */
#line 8079 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              Design notes:
              Do not use a manually maintained stack like thd->lex->xxx_list,
              but use the internal bison stack ($$, $1 and $3) instead.
              Using the bison stack is:
              - more robust to changes in the grammar,
              - guaranteed to be in sync with the parser state,
              - better for performances (no memory allocation).
            */
            Item_cond_or *item1;
            Item_cond_or *item3;
            if (is_cond_or((yyvsp[(1) - (3)].item)))
            {
              item1= (Item_cond_or*) (yyvsp[(1) - (3)].item);
              if (is_cond_or((yyvsp[(3) - (3)].item)))
              {
                item3= (Item_cond_or*) (yyvsp[(3) - (3)].item);
                /*
                  (X1 OR X2) OR (Y1 OR Y2) ==> OR (X1, X2, Y1, Y2)
                */
                item3->add_at_head(item1->argument_list());
                (yyval.item) = (yyvsp[(3) - (3)].item);
              }
              else
              {
                /*
                  (X1 OR X2) OR Y ==> OR (X1, X2, Y)
                */
                item1->add((yyvsp[(3) - (3)].item));
                (yyval.item) = (yyvsp[(1) - (3)].item);
              }
            }
            else if (is_cond_or((yyvsp[(3) - (3)].item)))
            {
              item3= (Item_cond_or*) (yyvsp[(3) - (3)].item);
              /*
                X OR (Y1 OR Y2) ==> OR (X, Y1, Y2)
              */
              item3->add_at_head((yyvsp[(1) - (3)].item));
              (yyval.item) = (yyvsp[(3) - (3)].item);
            }
            else
            {
              /* X OR Y */
              (yyval.item) = new (YYTHD->mem_root) Item_cond_or((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1143:

/* Line 1455 of yacc.c  */
#line 8130 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* XOR is a proprietary extension */
            (yyval.item) = new (YYTHD->mem_root) Item_func_xor((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1144:

/* Line 1455 of yacc.c  */
#line 8137 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* See comments in rule expr: expr or expr */
            Item_cond_and *item1;
            Item_cond_and *item3;
            if (is_cond_and((yyvsp[(1) - (3)].item)))
            {
              item1= (Item_cond_and*) (yyvsp[(1) - (3)].item);
              if (is_cond_and((yyvsp[(3) - (3)].item)))
              {
                item3= (Item_cond_and*) (yyvsp[(3) - (3)].item);
                /*
                  (X1 AND X2) AND (Y1 AND Y2) ==> AND (X1, X2, Y1, Y2)
                */
                item3->add_at_head(item1->argument_list());
                (yyval.item) = (yyvsp[(3) - (3)].item);
              }
              else
              {
                /*
                  (X1 AND X2) AND Y ==> AND (X1, X2, Y)
                */
                item1->add((yyvsp[(3) - (3)].item));
                (yyval.item) = (yyvsp[(1) - (3)].item);
              }
            }
            else if (is_cond_and((yyvsp[(3) - (3)].item)))
            {
              item3= (Item_cond_and*) (yyvsp[(3) - (3)].item);
              /*
                X AND (Y1 AND Y2) ==> AND (X, Y1, Y2)
              */
              item3->add_at_head((yyvsp[(1) - (3)].item));
              (yyval.item) = (yyvsp[(3) - (3)].item);
            }
            else
            {
              /* X AND Y */
              (yyval.item) = new (YYTHD->mem_root) Item_cond_and((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1145:

/* Line 1455 of yacc.c  */
#line 8180 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= negate_expression(YYTHD, (yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1146:

/* Line 1455 of yacc.c  */
#line 8186 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_istrue((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1147:

/* Line 1455 of yacc.c  */
#line 8192 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnottrue((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1148:

/* Line 1455 of yacc.c  */
#line 8198 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isfalse((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1149:

/* Line 1455 of yacc.c  */
#line 8204 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnotfalse((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1150:

/* Line 1455 of yacc.c  */
#line 8210 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnull((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1151:

/* Line 1455 of yacc.c  */
#line 8216 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnotnull((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1153:

/* Line 1455 of yacc.c  */
#line 8226 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnull((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1154:

/* Line 1455 of yacc.c  */
#line 8232 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnotnull((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1155:

/* Line 1455 of yacc.c  */
#line 8238 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_equal((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1156:

/* Line 1455 of yacc.c  */
#line 8244 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= (*(yyvsp[(2) - (3)].boolfunc2creator))(0)->create((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1157:

/* Line 1455 of yacc.c  */
#line 8250 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= all_any_subquery_creator((yyvsp[(1) - (6)].item), (yyvsp[(2) - (6)].boolfunc2creator), (yyvsp[(3) - (6)].num), (yyvsp[(5) - (6)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1159:

/* Line 1455 of yacc.c  */
#line 8260 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_in_subselect((yyvsp[(1) - (5)].item), (yyvsp[(4) - (5)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1160:

/* Line 1455 of yacc.c  */
#line 8266 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *item= new (thd->mem_root) Item_in_subselect((yyvsp[(1) - (6)].item), (yyvsp[(5) - (6)].select_lex));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= negate_expression(thd, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1161:

/* Line 1455 of yacc.c  */
#line 8276 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= handle_sql2003_note184_exception(YYTHD, (yyvsp[(1) - (5)].item), true, (yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1162:

/* Line 1455 of yacc.c  */
#line 8282 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            (yyvsp[(6) - (7)].item_list)->push_front((yyvsp[(4) - (7)].item));
            (yyvsp[(6) - (7)].item_list)->push_front((yyvsp[(1) - (7)].item));
            (yyval.item)= new (YYTHD->mem_root) Item_func_in(*(yyvsp[(6) - (7)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1163:

/* Line 1455 of yacc.c  */
#line 8290 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= handle_sql2003_note184_exception(YYTHD, (yyvsp[(1) - (6)].item), false, (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1164:

/* Line 1455 of yacc.c  */
#line 8296 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(5) - (8)].item));
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(1) - (8)].item));
            Item_func_in *item = new (YYTHD->mem_root) Item_func_in(*(yyvsp[(7) - (8)].item_list));
            if (item == NULL)
              MYSQL_YYABORT;
            item->negate();
            (yyval.item)= item;
          }
    break;

  case 1165:

/* Line 1455 of yacc.c  */
#line 8306 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_between((yyvsp[(1) - (5)].item),(yyvsp[(3) - (5)].item),(yyvsp[(5) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1166:

/* Line 1455 of yacc.c  */
#line 8312 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item_func_between *item;
            item= new (YYTHD->mem_root) Item_func_between((yyvsp[(1) - (6)].item),(yyvsp[(4) - (6)].item),(yyvsp[(6) - (6)].item));
            if (item == NULL)
              MYSQL_YYABORT;
            item->negate();
            (yyval.item)= item;
          }
    break;

  case 1167:

/* Line 1455 of yacc.c  */
#line 8321 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item *item1= new (YYTHD->mem_root) Item_func_soundex((yyvsp[(1) - (4)].item));
            Item *item4= new (YYTHD->mem_root) Item_func_soundex((yyvsp[(4) - (4)].item));
            if ((item1 == NULL) || (item4 == NULL))
              MYSQL_YYABORT;
            (yyval.item)= new (YYTHD->mem_root) Item_func_eq(item1, item4);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1168:

/* Line 1455 of yacc.c  */
#line 8331 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_like((yyvsp[(1) - (4)].item),(yyvsp[(3) - (4)].item),(yyvsp[(4) - (4)].item),Lex->escape_used);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1169:

/* Line 1455 of yacc.c  */
#line 8337 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_func_like((yyvsp[(1) - (5)].item),(yyvsp[(4) - (5)].item),(yyvsp[(5) - (5)].item),
                                                             Lex->escape_used);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (YYTHD->mem_root) Item_func_not(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1170:

/* Line 1455 of yacc.c  */
#line 8347 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_regex((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1171:

/* Line 1455 of yacc.c  */
#line 8353 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_func_regex((yyvsp[(1) - (4)].item),(yyvsp[(4) - (4)].item));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= negate_expression(YYTHD, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1173:

/* Line 1455 of yacc.c  */
#line 8366 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_or((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1174:

/* Line 1455 of yacc.c  */
#line 8372 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_and((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1175:

/* Line 1455 of yacc.c  */
#line 8378 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_shift_left((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1176:

/* Line 1455 of yacc.c  */
#line 8384 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_shift_right((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1177:

/* Line 1455 of yacc.c  */
#line 8390 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_plus((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1178:

/* Line 1455 of yacc.c  */
#line 8396 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_minus((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1179:

/* Line 1455 of yacc.c  */
#line 8402 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(1) - (5)].item),(yyvsp[(4) - (5)].item),(yyvsp[(5) - (5)].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1180:

/* Line 1455 of yacc.c  */
#line 8408 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(1) - (5)].item),(yyvsp[(4) - (5)].item),(yyvsp[(5) - (5)].interval),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1181:

/* Line 1455 of yacc.c  */
#line 8414 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_mul((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1182:

/* Line 1455 of yacc.c  */
#line 8420 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_div((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1183:

/* Line 1455 of yacc.c  */
#line 8426 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_mod((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1184:

/* Line 1455 of yacc.c  */
#line 8432 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_int_div((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1185:

/* Line 1455 of yacc.c  */
#line 8438 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_mod((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1186:

/* Line 1455 of yacc.c  */
#line 8444 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_xor((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1196:

/* Line 1455 of yacc.c  */
#line 8473 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_eq_creator; }
    break;

  case 1197:

/* Line 1455 of yacc.c  */
#line 8474 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_ge_creator; }
    break;

  case 1198:

/* Line 1455 of yacc.c  */
#line 8475 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_gt_creator; }
    break;

  case 1199:

/* Line 1455 of yacc.c  */
#line 8476 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_le_creator; }
    break;

  case 1200:

/* Line 1455 of yacc.c  */
#line 8477 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_lt_creator; }
    break;

  case 1201:

/* Line 1455 of yacc.c  */
#line 8478 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_ne_creator; }
    break;

  case 1202:

/* Line 1455 of yacc.c  */
#line 8482 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num) = 1; }
    break;

  case 1203:

/* Line 1455 of yacc.c  */
#line 8483 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1204:

/* Line 1455 of yacc.c  */
#line 8488 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
	    (yyval.num)= DYN_COL_NULL; /* automatic type */
            lex->charset= NULL;
            lex->length= lex->dec= 0;
	  }
    break;

  case 1205:

/* Line 1455 of yacc.c  */
#line 8494 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(2) - (2)].num); }
    break;

  case 1206:

/* Line 1455 of yacc.c  */
#line 8499 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_INT;
            lex->charset= NULL;
            lex->length= lex->dec= 0;
          }
    break;

  case 1207:

/* Line 1455 of yacc.c  */
#line 8506 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_UINT;
            lex->charset= NULL;
            lex->length= lex->dec= 0;
          }
    break;

  case 1208:

/* Line 1455 of yacc.c  */
#line 8513 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_DOUBLE;
            lex->charset= NULL;
            lex->length= lex->dec= 0;
          }
    break;

  case 1209:

/* Line 1455 of yacc.c  */
#line 8520 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_DOUBLE;
            lex->charset= NULL;
            lex->length= lex->dec= 0;
          }
    break;

  case 1210:

/* Line 1455 of yacc.c  */
#line 8527 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_DOUBLE;
            lex->charset= NULL;
            lex->length= lex->dec= 0;
          }
    break;

  case 1211:

/* Line 1455 of yacc.c  */
#line 8534 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= DYN_COL_DECIMAL;
            Lex->charset= NULL;
          }
    break;

  case 1212:

/* Line 1455 of yacc.c  */
#line 8539 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_STRING;
            lex->length= lex->dec= 0;
          }
    break;

  case 1213:

/* Line 1455 of yacc.c  */
#line 8545 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_STRING;
            lex->charset= national_charset_info;
            lex->length= lex->dec= 0;
          }
    break;

  case 1214:

/* Line 1455 of yacc.c  */
#line 8552 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_DATE;
            lex->charset= NULL;
            lex->length= lex->dec= 0;
          }
    break;

  case 1215:

/* Line 1455 of yacc.c  */
#line 8559 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_TIME;
            lex->charset= NULL;
            lex->dec= lex->length;
            lex->length= 0;
          }
    break;

  case 1216:

/* Line 1455 of yacc.c  */
#line 8567 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_DATETIME;
            lex->charset= NULL;
            lex->dec= lex->length;
            lex->length= 0;
          }
    break;

  case 1217:

/* Line 1455 of yacc.c  */
#line 8578 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
     LEX *lex= Lex;
     (yyval.dyncol_def)= (DYNCALL_CREATE_DEF *)
       alloc_root(YYTHD->mem_root, sizeof(DYNCALL_CREATE_DEF));
     if ((yyval.dyncol_def) == NULL)
       MYSQL_YYABORT;
     (yyval.dyncol_def)->key= (yyvsp[(1) - (4)].item);
     (yyval.dyncol_def)->value= (yyvsp[(3) - (4)].item);
     (yyval.dyncol_def)->type= (DYNAMIC_COLUMN_TYPE)(yyvsp[(4) - (4)].num);
     (yyval.dyncol_def)->cs= lex->charset;
     if (lex->length)
       (yyval.dyncol_def)->len= strtoul(lex->length, NULL, 10);
     else
       (yyval.dyncol_def)->len= 0;
     if (lex->dec)
       (yyval.dyncol_def)->frac= strtoul(lex->dec, NULL, 10);
     else
       (yyval.dyncol_def)->len= 0;
   }
    break;

  case 1218:

/* Line 1455 of yacc.c  */
#line 8600 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
         (yyval.dyncol_def_list)= new (YYTHD->mem_root) List<DYNCALL_CREATE_DEF>;
         if ((yyval.dyncol_def_list) == NULL)
           MYSQL_YYABORT;
         (yyval.dyncol_def_list)->push_back((yyvsp[(1) - (1)].dyncol_def));
       }
    break;

  case 1219:

/* Line 1455 of yacc.c  */
#line 8607 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
         (yyvsp[(1) - (3)].dyncol_def_list)->push_back((yyvsp[(3) - (3)].dyncol_def));
         (yyval.dyncol_def_list)= (yyvsp[(1) - (3)].dyncol_def_list);
       }
    break;

  case 1225:

/* Line 1455 of yacc.c  */
#line 8620 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *i1= new (thd->mem_root) Item_string((yyvsp[(3) - (3)].lex_str).str,
                                                      (yyvsp[(3) - (3)].lex_str).length,
                                                      thd->charset());
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_set_collation((yyvsp[(1) - (3)].item), i1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1230:

/* Line 1455 of yacc.c  */
#line 8636 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_concat((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1231:

/* Line 1455 of yacc.c  */
#line 8642 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= (yyvsp[(2) - (2)].item);
          }
    break;

  case 1232:

/* Line 1455 of yacc.c  */
#line 8646 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_neg((yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1233:

/* Line 1455 of yacc.c  */
#line 8652 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_neg((yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1234:

/* Line 1455 of yacc.c  */
#line 8658 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= negate_expression(YYTHD, (yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1235:

/* Line 1455 of yacc.c  */
#line 8664 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            (yyval.item)= new (YYTHD->mem_root) Item_singlerow_subselect((yyvsp[(2) - (3)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1236:

/* Line 1455 of yacc.c  */
#line 8670 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(2) - (3)].item); }
    break;

  case 1237:

/* Line 1455 of yacc.c  */
#line 8672 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyvsp[(4) - (5)].item_list)->push_front((yyvsp[(2) - (5)].item));
            (yyval.item)= new (YYTHD->mem_root) Item_row(*(yyvsp[(4) - (5)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1238:

/* Line 1455 of yacc.c  */
#line 8679 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyvsp[(5) - (6)].item_list)->push_front((yyvsp[(3) - (6)].item));
            (yyval.item)= new (YYTHD->mem_root) Item_row(*(yyvsp[(5) - (6)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1239:

/* Line 1455 of yacc.c  */
#line 8686 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_exists_subselect((yyvsp[(3) - (4)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1240:

/* Line 1455 of yacc.c  */
#line 8692 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(3) - (4)].item); }
    break;

  case 1241:

/* Line 1455 of yacc.c  */
#line 8694 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyvsp[(2) - (7)].item_list)->push_front((yyvsp[(5) - (7)].item));
            Item_func_match *i1= new (YYTHD->mem_root) Item_func_match(*(yyvsp[(2) - (7)].item_list), (yyvsp[(6) - (7)].num));
            if (i1 == NULL)
              MYSQL_YYABORT;
            Select->add_ftfunc_to_list(i1);
            (yyval.item)= i1;
          }
    break;

  case 1242:

/* Line 1455 of yacc.c  */
#line 8703 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= create_func_cast(YYTHD, (yyvsp[(2) - (2)].item), ITEM_CAST_CHAR, NULL, NULL,
                                 &my_charset_bin);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1243:

/* Line 1455 of yacc.c  */
#line 8710 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.item)= create_func_cast(YYTHD, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].cast_type), lex->length, lex->dec,
                                 lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1244:

/* Line 1455 of yacc.c  */
#line 8718 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_case(* (yyvsp[(3) - (5)].item_list), (yyvsp[(2) - (5)].item), (yyvsp[(4) - (5)].item) );
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1245:

/* Line 1455 of yacc.c  */
#line 8724 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= create_func_cast(YYTHD, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].cast_type), Lex->length, Lex->dec,
                                 Lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1246:

/* Line 1455 of yacc.c  */
#line 8731 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_conv_charset((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].charset));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1247:

/* Line 1455 of yacc.c  */
#line 8737 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if ((yyvsp[(3) - (4)].item)->is_splocal())
            {
              Item_splocal *il= static_cast<Item_splocal *>((yyvsp[(3) - (4)].item));

              my_error(ER_WRONG_COLUMN_NAME, MYF(0), il->my_name()->str);
              MYSQL_YYABORT;
            }
            (yyval.item)= new (YYTHD->mem_root) Item_default_value(Lex->current_context(),
                                                         (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1248:

/* Line 1455 of yacc.c  */
#line 8751 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_insert_value(Lex->current_context(),
                                                        (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1249:

/* Line 1455 of yacc.c  */
#line 8759 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(5) - (5)].item),(yyvsp[(2) - (5)].item),(yyvsp[(3) - (5)].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1250:

/* Line 1455 of yacc.c  */
#line 8774 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_char(*(yyvsp[(3) - (4)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1251:

/* Line 1455 of yacc.c  */
#line 8780 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_char(*(yyvsp[(3) - (6)].item_list), (yyvsp[(5) - (6)].charset));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1252:

/* Line 1455 of yacc.c  */
#line 8786 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_current_user(Lex->current_context());
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query= 0;
          }
    break;

  case 1253:

/* Line 1455 of yacc.c  */
#line 8794 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_typecast((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1254:

/* Line 1455 of yacc.c  */
#line 8800 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_dayofmonth((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1255:

/* Line 1455 of yacc.c  */
#line 8806 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_hour((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1256:

/* Line 1455 of yacc.c  */
#line 8812 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_insert((yyvsp[(3) - (10)].item),(yyvsp[(5) - (10)].item),(yyvsp[(7) - (10)].item),(yyvsp[(9) - (10)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1257:

/* Line 1455 of yacc.c  */
#line 8818 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            List<Item> *list= new (thd->mem_root) List<Item>;
            if (list == NULL)
              MYSQL_YYABORT;
            list->push_front((yyvsp[(5) - (6)].item));
            list->push_front((yyvsp[(3) - (6)].item));
            Item_row *item= new (thd->mem_root) Item_row(*list);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_interval(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1258:

/* Line 1455 of yacc.c  */
#line 8833 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(5) - (8)].item));
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(3) - (8)].item));
            Item_row *item= new (thd->mem_root) Item_row(*(yyvsp[(7) - (8)].item_list));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_interval(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1259:

/* Line 1455 of yacc.c  */
#line 8845 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_left((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1260:

/* Line 1455 of yacc.c  */
#line 8851 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_minute((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1261:

/* Line 1455 of yacc.c  */
#line 8857 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_month((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1262:

/* Line 1455 of yacc.c  */
#line 8863 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_right((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1263:

/* Line 1455 of yacc.c  */
#line 8869 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_second((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1264:

/* Line 1455 of yacc.c  */
#line 8875 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_time_typecast((yyvsp[(3) - (4)].item), AUTO_SEC_PART_DIGITS);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1265:

/* Line 1455 of yacc.c  */
#line 8881 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_datetime_typecast((yyvsp[(3) - (4)].item), AUTO_SEC_PART_DIGITS);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1266:

/* Line 1455 of yacc.c  */
#line 8887 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_add_time((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item), 1, 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1267:

/* Line 1455 of yacc.c  */
#line 8893 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1268:

/* Line 1455 of yacc.c  */
#line 8899 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_ltrim((yyvsp[(6) - (7)].item),(yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1269:

/* Line 1455 of yacc.c  */
#line 8905 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_rtrim((yyvsp[(6) - (7)].item),(yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1270:

/* Line 1455 of yacc.c  */
#line 8911 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(6) - (7)].item),(yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1271:

/* Line 1455 of yacc.c  */
#line 8917 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_ltrim((yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1272:

/* Line 1455 of yacc.c  */
#line 8923 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_rtrim((yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1273:

/* Line 1455 of yacc.c  */
#line 8929 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1274:

/* Line 1455 of yacc.c  */
#line 8935 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(5) - (6)].item),(yyvsp[(3) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1275:

/* Line 1455 of yacc.c  */
#line 8941 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_user();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1276:

/* Line 1455 of yacc.c  */
#line 8949 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_year((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1277:

/* Line 1455 of yacc.c  */
#line 8970 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                                             INTERVAL_DAY, 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1278:

/* Line 1455 of yacc.c  */
#line 8977 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item), (yyvsp[(6) - (8)].item), (yyvsp[(7) - (8)].interval), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1279:

/* Line 1455 of yacc.c  */
#line 8983 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curdate_local();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1280:

/* Line 1455 of yacc.c  */
#line 8990 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curtime_local((yyvsp[(2) - (2)].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1281:

/* Line 1455 of yacc.c  */
#line 8998 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item),(yyvsp[(6) - (8)].item),(yyvsp[(7) - (8)].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1282:

/* Line 1455 of yacc.c  */
#line 9005 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item),(yyvsp[(6) - (8)].item),(yyvsp[(7) - (8)].interval),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1283:

/* Line 1455 of yacc.c  */
#line 9011 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_extract( (yyvsp[(3) - (6)].interval), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1284:

/* Line 1455 of yacc.c  */
#line 9017 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_get_format((yyvsp[(3) - (6)].date_time_type), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1285:

/* Line 1455 of yacc.c  */
#line 9023 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_now_local((yyvsp[(2) - (2)].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1286:

/* Line 1455 of yacc.c  */
#line 9030 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_func_locate((yyvsp[(5) - (6)].item),(yyvsp[(3) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1287:

/* Line 1455 of yacc.c  */
#line 9036 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                                             INTERVAL_DAY, 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1288:

/* Line 1455 of yacc.c  */
#line 9043 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item), (yyvsp[(6) - (8)].item), (yyvsp[(7) - (8)].interval), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1289:

/* Line 1455 of yacc.c  */
#line 9049 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1290:

/* Line 1455 of yacc.c  */
#line 9055 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1291:

/* Line 1455 of yacc.c  */
#line 9061 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1292:

/* Line 1455 of yacc.c  */
#line 9067 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1293:

/* Line 1455 of yacc.c  */
#line 9073 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              Unlike other time-related functions, SYSDATE() is
              replication-unsafe because it is not affected by the
              TIMESTAMP variable.  It is unsafe even if
              sysdate_is_now=1, because the slave may have
              sysdate_is_now=0.
            */
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            if (global_system_variables.sysdate_is_now == 0)
              (yyval.item)= new (YYTHD->mem_root) Item_func_sysdate_local((yyvsp[(2) - (2)].num));
            else
              (yyval.item)= new (YYTHD->mem_root) Item_func_now_local((yyvsp[(2) - (2)].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1294:

/* Line 1455 of yacc.c  */
#line 9091 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(7) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(3) - (8)].interval_time_st),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1295:

/* Line 1455 of yacc.c  */
#line 9097 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_timestamp_diff((yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item),(yyvsp[(3) - (8)].interval_time_st));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1296:

/* Line 1455 of yacc.c  */
#line 9103 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curdate_utc();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1297:

/* Line 1455 of yacc.c  */
#line 9110 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curtime_utc((yyvsp[(2) - (2)].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1298:

/* Line 1455 of yacc.c  */
#line 9117 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_now_utc((yyvsp[(2) - (2)].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1299:

/* Line 1455 of yacc.c  */
#line 9125 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= create_func_dyncol_add(YYTHD, (yyvsp[(3) - (6)].item), *(yyvsp[(5) - (6)].dyncol_def_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1300:

/* Line 1455 of yacc.c  */
#line 9132 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= create_func_dyncol_delete(YYTHD, (yyvsp[(3) - (6)].item), *(yyvsp[(5) - (6)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1301:

/* Line 1455 of yacc.c  */
#line 9139 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_dyncol_check((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1302:

/* Line 1455 of yacc.c  */
#line 9146 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= create_func_dyncol_create(YYTHD, *(yyvsp[(3) - (4)].dyncol_def_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1303:

/* Line 1455 of yacc.c  */
#line 9153 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.item)= create_func_dyncol_get(YYTHD, (yyvsp[(3) - (8)].item), (yyvsp[(5) - (8)].item), (yyvsp[(7) - (8)].cast_type),
                                        lex->length, lex->dec,
                                        lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1304:

/* Line 1455 of yacc.c  */
#line 9170 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_ascii((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1305:

/* Line 1455 of yacc.c  */
#line 9176 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_charset((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1306:

/* Line 1455 of yacc.c  */
#line 9182 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_coalesce(* (yyvsp[(3) - (4)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1307:

/* Line 1455 of yacc.c  */
#line 9188 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_collation((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1308:

/* Line 1455 of yacc.c  */
#line 9194 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_database();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1309:

/* Line 1455 of yacc.c  */
#line 9201 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_if((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1310:

/* Line 1455 of yacc.c  */
#line 9207 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_last_value(* (yyvsp[(3) - (4)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1311:

/* Line 1455 of yacc.c  */
#line 9213 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_microsecond((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1312:

/* Line 1455 of yacc.c  */
#line 9219 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_func_mod((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1313:

/* Line 1455 of yacc.c  */
#line 9225 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)=  new (YYTHD->mem_root) Item_func_old_password((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1314:

/* Line 1455 of yacc.c  */
#line 9231 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item* i1;
            if (thd->variables.old_passwords)
              i1= new (thd->mem_root) Item_func_old_password((yyvsp[(3) - (4)].item));
            else
              i1= new (thd->mem_root) Item_func_password((yyvsp[(3) - (4)].item));
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= i1;
          }
    break;

  case 1315:

/* Line 1455 of yacc.c  */
#line 9243 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_func_quarter((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1316:

/* Line 1455 of yacc.c  */
#line 9249 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_repeat((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1317:

/* Line 1455 of yacc.c  */
#line 9255 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_replace((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1318:

/* Line 1455 of yacc.c  */
#line 9261 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_round((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1319:

/* Line 1455 of yacc.c  */
#line 9267 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *i1= new (thd->mem_root) Item_int((char*) "0",
                                           thd->variables.default_week_format,
                                                   1);
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_week((yyvsp[(3) - (4)].item), i1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1320:

/* Line 1455 of yacc.c  */
#line 9279 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_week((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1321:

/* Line 1455 of yacc.c  */
#line 9285 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            (yyval.item)= (yyvsp[(1) - (1)].item);
            /* $1 may be NULL, GEOM_NEW not tested for out of memory */
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
    break;

  case 1322:

/* Line 1455 of yacc.c  */
#line 9301 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_rel((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                               Item_func::SP_CONTAINS_FUNC));
          }
    break;

  case 1323:

/* Line 1455 of yacc.c  */
#line 9307 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_geometrycollection,
                           Geometry::wkb_point));
          }
    break;

  case 1324:

/* Line 1455 of yacc.c  */
#line 9314 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_linestring,
                           Geometry::wkb_point));
          }
    break;

  case 1325:

/* Line 1455 of yacc.c  */
#line 9321 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multilinestring,
                           Geometry::wkb_linestring));
          }
    break;

  case 1326:

/* Line 1455 of yacc.c  */
#line 9328 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multipoint,
                           Geometry::wkb_point));
          }
    break;

  case 1327:

/* Line 1455 of yacc.c  */
#line 9335 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multipolygon,
                           Geometry::wkb_polygon));
          }
    break;

  case 1328:

/* Line 1455 of yacc.c  */
#line 9342 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD, Item_func_point((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item)));
          }
    break;

  case 1329:

/* Line 1455 of yacc.c  */
#line 9346 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_polygon,
                           Geometry::wkb_linestring));
          }
    break;

  case 1330:

/* Line 1455 of yacc.c  */
#line 9365 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
#ifdef HAVE_DLOPEN
            udf_func *udf= 0;
            LEX *lex= Lex;
            if (using_udf_functions &&
                (udf= find_udf((yyvsp[(1) - (2)].lex_str).str, (yyvsp[(1) - (2)].lex_str).length)) &&
                udf->type == UDFTYPE_AGGREGATE)
            {
              if (lex->current_select->inc_in_sum_expr())
              {
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
            }
            /* Temporary placing the result of find_udf in $3 */
            (yyval.udf)= udf;
#endif
          }
    break;

  case 1331:

/* Line 1455 of yacc.c  */
#line 9384 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Create_func *builder;
            Item *item= NULL;

            if (check_routine_name(&(yyvsp[(1) - (5)].lex_str)))
            {
              MYSQL_YYABORT;
            }

            /*
              Implementation note:
              names are resolved with the following order:
              - MySQL native functions,
              - User Defined Functions,
              - Stored Functions (assuming the current <use> database)

              This will be revised with WL#2128 (SQL PATH)
            */
            builder= find_native_function_builder(thd, (yyvsp[(1) - (5)].lex_str));
            if (builder)
            {
              item= builder->create_func(thd, (yyvsp[(1) - (5)].lex_str), (yyvsp[(4) - (5)].item_list));
            }
            else
            {
#ifdef HAVE_DLOPEN
              /* Retrieving the result of find_udf */
              udf_func *udf= (yyvsp[(3) - (5)].udf);

              if (udf)
              {
                if (udf->type == UDFTYPE_AGGREGATE)
                {
                  Select->in_sum_expr--;
                }

                item= Create_udf_func::s_singleton.create(thd, udf, (yyvsp[(4) - (5)].item_list));
              }
              else
#endif
              {
                builder= find_qualified_function_builder(thd);
                DBUG_ASSERT(builder);
                item= builder->create_func(thd, (yyvsp[(1) - (5)].lex_str), (yyvsp[(4) - (5)].item_list));
              }
            }

            if (! ((yyval.item)= item))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1332:

/* Line 1455 of yacc.c  */
#line 9438 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Create_qfunc *builder;
            Item *item= NULL;

            /*
              The following in practice calls:
              <code>Create_sp_func::create()</code>
              and builds a stored function.

              However, it's important to maintain the interface between the
              parser and the implementation in item_create.cc clean,
              since this will change with WL#2128 (SQL PATH):
              - INFORMATION_SCHEMA.version() is the SQL 99 syntax for the native
              function version(),
              - MySQL.version() is the SQL 2003 syntax for the native function
              version() (a vendor can specify any schema).
            */

            if (!(yyvsp[(1) - (6)].lex_str).str || check_db_name(&(yyvsp[(1) - (6)].lex_str)))
            {
              my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[(1) - (6)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (check_routine_name(&(yyvsp[(3) - (6)].lex_str)))
            {
              MYSQL_YYABORT;
            }

            builder= find_qualified_function_builder(thd);
            DBUG_ASSERT(builder);
            item= builder->create_with_db(thd, (yyvsp[(1) - (6)].lex_str), (yyvsp[(3) - (6)].lex_str), true, (yyvsp[(5) - (6)].item_list));

            if (! ((yyval.item)= item))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1333:

/* Line 1455 of yacc.c  */
#line 9480 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(1) - (2)].num) | (yyvsp[(2) - (2)].num); }
    break;

  case 1334:

/* Line 1455 of yacc.c  */
#line 9482 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= FT_BOOL; }
    break;

  case 1335:

/* Line 1455 of yacc.c  */
#line 9486 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= FT_NL; }
    break;

  case 1336:

/* Line 1455 of yacc.c  */
#line 9487 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= FT_NL; }
    break;

  case 1337:

/* Line 1455 of yacc.c  */
#line 9491 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0;         }
    break;

  case 1338:

/* Line 1455 of yacc.c  */
#line 9492 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= FT_EXPAND; }
    break;

  case 1339:

/* Line 1455 of yacc.c  */
#line 9496 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item_list)= NULL; }
    break;

  case 1340:

/* Line 1455 of yacc.c  */
#line 9497 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list); }
    break;

  case 1341:

/* Line 1455 of yacc.c  */
#line 9502 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new (YYTHD->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 1342:

/* Line 1455 of yacc.c  */
#line 9509 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item));
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1343:

/* Line 1455 of yacc.c  */
#line 9517 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
             Use Item::name as a storage for the attribute value of user
             defined function argument. It is safe to use Item::name
             because the syntax will not allow having an explicit name here.
             See WL#1017 re. udf attributes.
            */
            if ((yyvsp[(4) - (4)].lex_str).str)
            {
              (yyvsp[(2) - (4)].item)->is_autogenerated_name= FALSE;
              (yyvsp[(2) - (4)].item)->set_name((yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length, system_charset_info);
            }
            /* 
               A field has to have its proper name in order for name
               resolution to work, something we are only guaranteed if we
               parse it out. If we hijack the input stream with
               remember_name we may get quoted or escaped names.
            */
            else if ((yyvsp[(2) - (4)].item)->type() != Item::FIELD_ITEM)
              (yyvsp[(2) - (4)].item)->set_name((yyvsp[(1) - (4)].simple_string), (uint) ((yyvsp[(3) - (4)].simple_string) - (yyvsp[(1) - (4)].simple_string)), YYTHD->charset());
            (yyval.item)= (yyvsp[(2) - (4)].item);
          }
    break;

  case 1344:

/* Line 1455 of yacc.c  */
#line 9543 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_avg((yyvsp[(3) - (4)].item), FALSE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1345:

/* Line 1455 of yacc.c  */
#line 9549 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_avg((yyvsp[(4) - (5)].item), TRUE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1346:

/* Line 1455 of yacc.c  */
#line 9555 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_and((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1347:

/* Line 1455 of yacc.c  */
#line 9561 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_or((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1348:

/* Line 1455 of yacc.c  */
#line 9567 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_xor((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1349:

/* Line 1455 of yacc.c  */
#line 9573 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_int((int32) 0L,1);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (YYTHD->mem_root) Item_sum_count(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1350:

/* Line 1455 of yacc.c  */
#line 9582 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_count((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1351:

/* Line 1455 of yacc.c  */
#line 9588 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->in_sum_expr++; }
    break;

  case 1352:

/* Line 1455 of yacc.c  */
#line 9590 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->in_sum_expr--; }
    break;

  case 1353:

/* Line 1455 of yacc.c  */
#line 9592 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_count(* (yyvsp[(5) - (7)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1354:

/* Line 1455 of yacc.c  */
#line 9598 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_min((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1355:

/* Line 1455 of yacc.c  */
#line 9609 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_min((yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1356:

/* Line 1455 of yacc.c  */
#line 9615 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_max((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1357:

/* Line 1455 of yacc.c  */
#line 9621 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_max((yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1358:

/* Line 1455 of yacc.c  */
#line 9627 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_std((yyvsp[(3) - (4)].item), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1359:

/* Line 1455 of yacc.c  */
#line 9633 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_variance((yyvsp[(3) - (4)].item), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1360:

/* Line 1455 of yacc.c  */
#line 9639 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_std((yyvsp[(3) - (4)].item), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1361:

/* Line 1455 of yacc.c  */
#line 9645 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_variance((yyvsp[(3) - (4)].item), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1362:

/* Line 1455 of yacc.c  */
#line 9651 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_sum((yyvsp[(3) - (4)].item), FALSE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1363:

/* Line 1455 of yacc.c  */
#line 9657 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_sum((yyvsp[(4) - (5)].item), TRUE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1364:

/* Line 1455 of yacc.c  */
#line 9663 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->in_sum_expr++; }
    break;

  case 1365:

/* Line 1455 of yacc.c  */
#line 9667 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->in_sum_expr--;
            (yyval.item)= new (YYTHD->mem_root)
                  Item_func_group_concat(Lex->current_context(), (yyvsp[(3) - (8)].num), (yyvsp[(5) - (8)].item_list),
                                         sel->gorder_list, (yyvsp[(7) - (8)].string));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            (yyvsp[(5) - (8)].item_list)->empty();
          }
    break;

  case 1366:

/* Line 1455 of yacc.c  */
#line 9681 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (! Lex->parsing_options.allows_variable)
            {
              my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1367:

/* Line 1455 of yacc.c  */
#line 9689 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= (yyvsp[(3) - (3)].item);
          }
    break;

  case 1368:

/* Line 1455 of yacc.c  */
#line 9696 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item_func_set_user_var *item;
            (yyval.item)= item= new (YYTHD->mem_root) Item_func_set_user_var((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_RAND);
            lex->set_var_list.push_back(item);
          }
    break;

  case 1369:

/* Line 1455 of yacc.c  */
#line 9706 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_get_user_var((yyvsp[(1) - (1)].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_RAND);
          }
    break;

  case 1370:

/* Line 1455 of yacc.c  */
#line 9714 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* disallow "SELECT @@global.global.variable" */
            if ((yyvsp[(3) - (4)].lex_str).str && (yyvsp[(4) - (4)].lex_str).str && check_reserved_words(&(yyvsp[(3) - (4)].lex_str)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (!((yyval.item)= get_system_var(YYTHD, (yyvsp[(2) - (4)].var_type), (yyvsp[(3) - (4)].lex_str), (yyvsp[(4) - (4)].lex_str))))
              MYSQL_YYABORT;
            if (!((Item_func_get_system_var*) (yyval.item))->is_written_to_binlog())
              Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_VARIABLE);
          }
    break;

  case 1371:

/* Line 1455 of yacc.c  */
#line 9729 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1372:

/* Line 1455 of yacc.c  */
#line 9730 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num) = 1; }
    break;

  case 1373:

/* Line 1455 of yacc.c  */
#line 9735 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.string)= new (YYTHD->mem_root) String(",", 1, &my_charset_latin1);
            if ((yyval.string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1374:

/* Line 1455 of yacc.c  */
#line 9740 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.string) = (yyvsp[(2) - (2)].string); }
    break;

  case 1375:

/* Line 1455 of yacc.c  */
#line 9745 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->gorder_list = NULL;
          }
    break;

  case 1376:

/* Line 1455 of yacc.c  */
#line 9749 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            SELECT_LEX *select= Select;
            select->gorder_list= new (YYTHD->mem_root)
                                   SQL_I_List<ORDER>(select->order_list);
            if (select->gorder_list == NULL)
              MYSQL_YYABORT;
            select->order_list.empty();
          }
    break;

  case 1377:

/* Line 1455 of yacc.c  */
#line 9761 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->current_select->inc_in_sum_expr())
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1378:

/* Line 1455 of yacc.c  */
#line 9770 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->in_sum_expr--;
            (yyval.item)= (yyvsp[(3) - (3)].item);
          }
    break;

  case 1379:

/* Line 1455 of yacc.c  */
#line 9778 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->charset= &my_charset_bin; Lex->dec= 0; }
    break;

  case 1380:

/* Line 1455 of yacc.c  */
#line 9780 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->dec= 0; }
    break;

  case 1381:

/* Line 1455 of yacc.c  */
#line 9782 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->charset= national_charset_info; Lex->dec=0; }
    break;

  case 1382:

/* Line 1455 of yacc.c  */
#line 9784 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_SIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1383:

/* Line 1455 of yacc.c  */
#line 9786 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_SIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1384:

/* Line 1455 of yacc.c  */
#line 9788 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_SIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1385:

/* Line 1455 of yacc.c  */
#line 9790 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_UNSIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1386:

/* Line 1455 of yacc.c  */
#line 9792 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_UNSIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1387:

/* Line 1455 of yacc.c  */
#line 9794 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_DATE; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1388:

/* Line 1455 of yacc.c  */
#line 9796 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.cast_type)=ITEM_CAST_TIME;
            LEX *lex= Lex;
            lex->charset= NULL; lex->dec= lex->length; lex->length= (char*)0;
           }
    break;

  case 1389:

/* Line 1455 of yacc.c  */
#line 9802 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.cast_type)=ITEM_CAST_DATETIME;
            LEX *lex= Lex;
            lex->charset= NULL; lex->dec= lex->length; lex->length= (char*)0;
           }
    break;

  case 1390:

/* Line 1455 of yacc.c  */
#line 9808 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_DECIMAL; Lex->charset= NULL; }
    break;

  case 1391:

/* Line 1455 of yacc.c  */
#line 9810 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->charset= NULL; Lex->length= Lex->dec= 0;}
    break;

  case 1392:

/* Line 1455 of yacc.c  */
#line 9812 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_DOUBLE; }
    break;

  case 1393:

/* Line 1455 of yacc.c  */
#line 9815 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item_list)= NULL; }
    break;

  case 1394:

/* Line 1455 of yacc.c  */
#line 9816 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list);}
    break;

  case 1395:

/* Line 1455 of yacc.c  */
#line 9821 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new (YYTHD->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 1396:

/* Line 1455 of yacc.c  */
#line 9828 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item));
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1397:

/* Line 1455 of yacc.c  */
#line 9835 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list); }
    break;

  case 1398:

/* Line 1455 of yacc.c  */
#line 9836 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(2) - (3)].item_list); }
    break;

  case 1399:

/* Line 1455 of yacc.c  */
#line 9841 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new (YYTHD->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 1400:

/* Line 1455 of yacc.c  */
#line 9848 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item));
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1401:

/* Line 1455 of yacc.c  */
#line 9855 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)= NULL; }
    break;

  case 1402:

/* Line 1455 of yacc.c  */
#line 9856 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 1403:

/* Line 1455 of yacc.c  */
#line 9860 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)= NULL; }
    break;

  case 1404:

/* Line 1455 of yacc.c  */
#line 9861 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(2) - (2)].item); }
    break;

  case 1405:

/* Line 1455 of yacc.c  */
#line 9866 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(2) - (4)].item));
            (yyval.item_list)->push_back((yyvsp[(4) - (4)].item));
          }
    break;

  case 1406:

/* Line 1455 of yacc.c  */
#line 9874 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (5)].item_list)->push_back((yyvsp[(3) - (5)].item));
            (yyvsp[(1) - (5)].item_list)->push_back((yyvsp[(5) - (5)].item));
            (yyval.item_list)= (yyvsp[(1) - (5)].item_list);
          }
    break;

  case 1407:

/* Line 1455 of yacc.c  */
#line 9884 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1408:

/* Line 1455 of yacc.c  */
#line 9886 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->nest_last_join(lex->thd)))
              MYSQL_YYABORT;
          }
    break;

  case 1409:

/* Line 1455 of yacc.c  */
#line 9894 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { MYSQL_YYABORT_UNLESS((yyval.table_list)=(yyvsp[(1) - (1)].table_list)); }
    break;

  case 1410:

/* Line 1455 of yacc.c  */
#line 9905 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1411:

/* Line 1455 of yacc.c  */
#line 9906 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(3) - (4)].table_list); }
    break;

  case 1412:

/* Line 1455 of yacc.c  */
#line 9912 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1413:

/* Line 1455 of yacc.c  */
#line 9914 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].table_list) && ((yyval.table_list)=(yyvsp[(3) - (3)].table_list)));
          }
    break;

  case 1414:

/* Line 1455 of yacc.c  */
#line 9934 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].table_list) && ((yyval.table_list)=(yyvsp[(3) - (3)].table_list))); (yyvsp[(3) - (3)].table_list)->straight=(yyvsp[(2) - (3)].num); }
    break;

  case 1415:

/* Line 1455 of yacc.c  */
#line 9937 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && (yyvsp[(3) - (4)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (4)].table_list), (yyvsp[(3) - (4)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1416:

/* Line 1455 of yacc.c  */
#line 9945 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
	    (yyvsp[(3) - (6)].table_list)->straight=(yyvsp[(2) - (6)].num);
            add_join_on((yyvsp[(3) - (6)].table_list),(yyvsp[(6) - (6)].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1417:

/* Line 1455 of yacc.c  */
#line 9953 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && (yyvsp[(3) - (4)].table_list));
          }
    break;

  case 1418:

/* Line 1455 of yacc.c  */
#line 9957 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
	    (yyvsp[(3) - (8)].table_list)->straight=(yyvsp[(2) - (8)].num);
            add_join_natural((yyvsp[(1) - (8)].table_list),(yyvsp[(3) - (8)].table_list),(yyvsp[(7) - (8)].string_list),Select); 
	    (yyval.table_list)=(yyvsp[(3) - (8)].table_list); 
          }
    break;

  case 1419:

/* Line 1455 of yacc.c  */
#line 9963 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && ((yyval.table_list)=(yyvsp[(4) - (4)].table_list)));
	    (yyvsp[(4) - (4)].table_list)->straight=(yyvsp[(3) - (4)].num);
            add_join_natural((yyvsp[(1) - (4)].table_list),(yyvsp[(4) - (4)].table_list),NULL,Select);
          }
    break;

  case 1420:

/* Line 1455 of yacc.c  */
#line 9972 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(5) - (6)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (6)].table_list), (yyvsp[(5) - (6)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1421:

/* Line 1455 of yacc.c  */
#line 9980 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            add_join_on((yyvsp[(5) - (8)].table_list),(yyvsp[(8) - (8)].item));
            Lex->pop_context();
            (yyvsp[(5) - (8)].table_list)->outer_join|=JOIN_TYPE_LEFT;
            (yyval.table_list)=(yyvsp[(5) - (8)].table_list);
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1422:

/* Line 1455 of yacc.c  */
#line 9988 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].table_list) && (yyvsp[(5) - (5)].table_list));
          }
    break;

  case 1423:

/* Line 1455 of yacc.c  */
#line 9992 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            add_join_natural((yyvsp[(1) - (10)].table_list),(yyvsp[(5) - (10)].table_list),(yyvsp[(9) - (10)].string_list),Select); 
            (yyvsp[(5) - (10)].table_list)->outer_join|=JOIN_TYPE_LEFT; 
            (yyval.table_list)=(yyvsp[(5) - (10)].table_list); 
          }
    break;

  case 1424:

/* Line 1455 of yacc.c  */
#line 9998 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(6) - (6)].table_list));
            add_join_natural((yyvsp[(1) - (6)].table_list),(yyvsp[(6) - (6)].table_list),NULL,Select);
            (yyvsp[(6) - (6)].table_list)->outer_join|=JOIN_TYPE_LEFT;
            (yyval.table_list)=(yyvsp[(6) - (6)].table_list);
          }
    break;

  case 1425:

/* Line 1455 of yacc.c  */
#line 10008 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(5) - (6)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (6)].table_list), (yyvsp[(5) - (6)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1426:

/* Line 1455 of yacc.c  */
#line 10016 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
            add_join_on((yyval.table_list), (yyvsp[(8) - (8)].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1427:

/* Line 1455 of yacc.c  */
#line 10025 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].table_list) && (yyvsp[(5) - (5)].table_list));
          }
    break;

  case 1428:

/* Line 1455 of yacc.c  */
#line 10029 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
            add_join_natural((yyval.table_list),(yyvsp[(5) - (10)].table_list),(yyvsp[(9) - (10)].string_list),Select);
          }
    break;

  case 1429:

/* Line 1455 of yacc.c  */
#line 10036 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(6) - (6)].table_list));
            add_join_natural((yyvsp[(6) - (6)].table_list),(yyvsp[(1) - (6)].table_list),NULL,Select);
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
          }
    break;

  case 1430:

/* Line 1455 of yacc.c  */
#line 10047 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1431:

/* Line 1455 of yacc.c  */
#line 10048 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1432:

/* Line 1455 of yacc.c  */
#line 10049 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num) = 1; }
    break;

  case 1433:

/* Line 1455 of yacc.c  */
#line 10053 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num) = (yyvsp[(1) - (1)].num); }
    break;

  case 1434:

/* Line 1455 of yacc.c  */
#line 10054 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1435:

/* Line 1455 of yacc.c  */
#line 10066 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->table_join_options= 0;
          }
    break;

  case 1436:

/* Line 1455 of yacc.c  */
#line 10071 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!((yyval.table_list)= Select->add_table_to_list(YYTHD, (yyvsp[(2) - (4)].table), (yyvsp[(3) - (4)].lex_str_ptr),
                                                Select->get_table_join_options(),
                                                YYPS->m_lock_type,
                                                YYPS->m_mdl_type,
                                                Select->pop_index_hints())))
              MYSQL_YYABORT;
            Select->add_joined_table((yyval.table_list));
          }
    break;

  case 1437:

/* Line 1455 of yacc.c  */
#line 10081 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if ((yyvsp[(1) - (3)].num))
            {
              if (sel->set_braces(1))
              {
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
              /* select in braces, can't contain global parameters */
              if (sel->master_unit()->fake_select_lex)
                sel->master_unit()->global_parameters=
                   sel->master_unit()->fake_select_lex;
            }
            if ((yyvsp[(2) - (3)].select_lex)->init_nested_join(lex->thd))
              MYSQL_YYABORT;
            (yyval.table_list)= 0;
            /* incomplete derived tables return NULL, we must be
               nested in select_derived rule to be here. */
          }
    break;

  case 1438:

/* Line 1455 of yacc.c  */
#line 10121 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* Use $2 instead of Lex->current_select as derived table will
               alter value of Lex->current_select. */
            if (!((yyvsp[(3) - (5)].table_list) || (yyvsp[(5) - (5)].lex_str_ptr)) && (yyvsp[(2) - (5)].select_lex)->embedding &&
                !(yyvsp[(2) - (5)].select_lex)->embedding->nested_join->join_list.elements)
            {
              /* we have a derived table ($3 == NULL) but no alias,
                 Since we are nested in further parentheses so we
                 can pass NULL to the outer level parentheses
                 Permits parsing of "((((select ...))) as xyz)" */
              (yyval.table_list)= 0;
            }
            else if (!(yyvsp[(3) - (5)].table_list))
            {
              /* Handle case of derived table, alias may be NULL if there
                 are no outer parentheses, add_table_to_list() will throw
                 error in this case */
              LEX *lex=Lex;
              SELECT_LEX *sel= lex->current_select;
              SELECT_LEX_UNIT *unit= sel->master_unit();
              lex->current_select= sel= unit->outer_select();
              Table_ident *ti= new Table_ident(unit);
              if (ti == NULL)
                MYSQL_YYABORT;
              if (!((yyval.table_list)= sel->add_table_to_list(lex->thd,
                                               new Table_ident(unit), (yyvsp[(5) - (5)].lex_str_ptr), 0,
                                               TL_READ, MDL_SHARED_READ)))

                MYSQL_YYABORT;
              sel->add_joined_table((yyval.table_list));
              lex->pop_context();
              lex->nest_level--;
            }
            else if (((yyvsp[(3) - (5)].table_list)->select_lex &&
                      (yyvsp[(3) - (5)].table_list)->select_lex->master_unit()->is_union() &&
                      ((yyvsp[(3) - (5)].table_list)->select_lex->master_unit()->first_select() ==
                       (yyvsp[(3) - (5)].table_list)->select_lex || !(yyvsp[(3) - (5)].table_list)->lifted)) || (yyvsp[(5) - (5)].lex_str_ptr))
            {
              /* simple nested joins cannot have aliases or unions */
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            else
            {
              /* nested join: FROM (t1 JOIN t2 ...),
                 nest_level is the same as in the outer query */
              (yyval.table_list)= (yyvsp[(3) - (5)].table_list);
            }
          }
    break;

  case 1440:

/* Line 1455 of yacc.c  */
#line 10177 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_select_to_union_list(Lex, (bool)(yyvsp[(3) - (3)].num), FALSE))
              MYSQL_YYABORT;
          }
    break;

  case 1441:

/* Line 1455 of yacc.c  */
#line 10182 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              Remove from the name resolution context stack the context of the
              last select in the union.
             */
            Lex->pop_context();
          }
    break;

  case 1443:

/* Line 1455 of yacc.c  */
#line 10195 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX * sel= lex->current_select;
            if (lex->current_select->set_braces(0))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (sel->linkage == UNION_TYPE &&
                sel->master_unit()->first_select()->braces)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1444:

/* Line 1455 of yacc.c  */
#line 10214 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->linkage != UNION_TYPE)
              mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 1445:

/* Line 1455 of yacc.c  */
#line 10222 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1447:

/* Line 1455 of yacc.c  */
#line 10231 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if ((yyvsp[(1) - (1)].select_lex)->init_nested_join(lex->thd))
              MYSQL_YYABORT;
          }
    break;

  case 1448:

/* Line 1455 of yacc.c  */
#line 10237 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            /* for normal joins, $3 != NULL and end_nested_join() != NULL,
               for derived tables, both must equal NULL */

            if (!((yyval.table_list)= (yyvsp[(1) - (3)].select_lex)->end_nested_join(lex->thd)) && (yyvsp[(3) - (3)].table_list))
              MYSQL_YYABORT;
            if (!(yyvsp[(3) - (3)].table_list) && (yyval.table_list))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1449:

/* Line 1455 of yacc.c  */
#line 10253 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->derived_tables|= DERIVED_SUBQUERY;
            if (!lex->expr_allows_subselect ||
                lex->sql_command == (int)SQLCOM_PURGE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE ||
                mysql_new_select(lex, 1))
              MYSQL_YYABORT;
            mysql_init_select(lex);
            lex->current_select->linkage= DERIVED_TABLE_TYPE;
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 1450:

/* Line 1455 of yacc.c  */
#line 10270 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1452:

/* Line 1455 of yacc.c  */
#line 10277 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.select_lex)= Select; }
    break;

  case 1453:

/* Line 1455 of yacc.c  */
#line 10282 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (! lex->parsing_options.allows_derived)
            {
              my_error(ER_VIEW_SELECT_DERIVED, MYF(0));
              MYSQL_YYABORT;
            }

            SELECT_LEX *sel= lex->current_select;
            TABLE_LIST *embedding;
            if (!sel->embedding || sel->end_nested_join(lex->thd))
            {
              /* we are not in parentheses */
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            embedding= Select->embedding;
            (yyval.num)= embedding &&
                !embedding->nested_join->join_list.elements;
            /* return true if we are deeply nested */
          }
    break;

  case 1454:

/* Line 1455 of yacc.c  */
#line 10307 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1455:

/* Line 1455 of yacc.c  */
#line 10308 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1456:

/* Line 1455 of yacc.c  */
#line 10313 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= YYTHD->variables.old_mode ?  INDEX_HINT_MASK_JOIN : INDEX_HINT_MASK_ALL; 
          }
    break;

  case 1457:

/* Line 1455 of yacc.c  */
#line 10316 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_JOIN;  }
    break;

  case 1458:

/* Line 1455 of yacc.c  */
#line 10317 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_ORDER; }
    break;

  case 1459:

/* Line 1455 of yacc.c  */
#line 10318 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_GROUP; }
    break;

  case 1460:

/* Line 1455 of yacc.c  */
#line 10322 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.index_hint)= INDEX_HINT_FORCE; }
    break;

  case 1461:

/* Line 1455 of yacc.c  */
#line 10323 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.index_hint)= INDEX_HINT_IGNORE; }
    break;

  case 1462:

/* Line 1455 of yacc.c  */
#line 10328 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->set_index_hint_type((yyvsp[(1) - (3)].index_hint), (yyvsp[(3) - (3)].num));
          }
    break;

  case 1464:

/* Line 1455 of yacc.c  */
#line 10333 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->set_index_hint_type(INDEX_HINT_USE, (yyvsp[(3) - (3)].num));
          }
    break;

  case 1469:

/* Line 1455 of yacc.c  */
#line 10346 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->alloc_index_hints(YYTHD); }
    break;

  case 1471:

/* Line 1455 of yacc.c  */
#line 10350 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {  Select->clear_index_hints(); }
    break;

  case 1473:

/* Line 1455 of yacc.c  */
#line 10355 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->add_index_hint(YYTHD, NULL, 0); }
    break;

  case 1474:

/* Line 1455 of yacc.c  */
#line 10356 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1475:

/* Line 1455 of yacc.c  */
#line 10361 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->add_index_hint(YYTHD, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length); }
    break;

  case 1476:

/* Line 1455 of yacc.c  */
#line 10363 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->add_index_hint(YYTHD, (char *)"PRIMARY", 7); }
    break;

  case 1479:

/* Line 1455 of yacc.c  */
#line 10373 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!((yyval.string_list)= new List<String>))
              MYSQL_YYABORT;
            String *s= new (YYTHD->mem_root) String((const char *) (yyvsp[(1) - (1)].lex_str).str,
                                                    (yyvsp[(1) - (1)].lex_str).length,
                                                    system_charset_info);
            if (s == NULL)
              MYSQL_YYABORT;
            (yyval.string_list)->push_back(s);
          }
    break;

  case 1480:

/* Line 1455 of yacc.c  */
#line 10384 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            String *s= new (YYTHD->mem_root) String((const char *) (yyvsp[(3) - (3)].lex_str).str,
                                                    (yyvsp[(3) - (3)].lex_str).length,
                                                    system_charset_info);
            if (s == NULL)
              MYSQL_YYABORT;
            (yyvsp[(1) - (3)].string_list)->push_back(s);
            (yyval.string_list)= (yyvsp[(1) - (3)].string_list);
          }
    break;

  case 1481:

/* Line 1455 of yacc.c  */
#line 10396 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1482:

/* Line 1455 of yacc.c  */
#line 10397 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_HOUR; }
    break;

  case 1483:

/* Line 1455 of yacc.c  */
#line 10398 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_MICROSECOND; }
    break;

  case 1484:

/* Line 1455 of yacc.c  */
#line 10399 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_MINUTE; }
    break;

  case 1485:

/* Line 1455 of yacc.c  */
#line 10400 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_SECOND; }
    break;

  case 1486:

/* Line 1455 of yacc.c  */
#line 10401 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_MICROSECOND; }
    break;

  case 1487:

/* Line 1455 of yacc.c  */
#line 10402 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_MINUTE; }
    break;

  case 1488:

/* Line 1455 of yacc.c  */
#line 10403 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_SECOND; }
    break;

  case 1489:

/* Line 1455 of yacc.c  */
#line 10404 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_MINUTE_MICROSECOND; }
    break;

  case 1490:

/* Line 1455 of yacc.c  */
#line 10405 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_MINUTE_SECOND; }
    break;

  case 1491:

/* Line 1455 of yacc.c  */
#line 10406 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_SECOND_MICROSECOND; }
    break;

  case 1492:

/* Line 1455 of yacc.c  */
#line 10407 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_YEAR_MONTH; }
    break;

  case 1493:

/* Line 1455 of yacc.c  */
#line 10411 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_DAY; }
    break;

  case 1494:

/* Line 1455 of yacc.c  */
#line 10412 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_WEEK; }
    break;

  case 1495:

/* Line 1455 of yacc.c  */
#line 10413 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_HOUR; }
    break;

  case 1496:

/* Line 1455 of yacc.c  */
#line 10414 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MINUTE; }
    break;

  case 1497:

/* Line 1455 of yacc.c  */
#line 10415 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MONTH; }
    break;

  case 1498:

/* Line 1455 of yacc.c  */
#line 10416 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_QUARTER; }
    break;

  case 1499:

/* Line 1455 of yacc.c  */
#line 10417 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_SECOND; }
    break;

  case 1500:

/* Line 1455 of yacc.c  */
#line 10418 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MICROSECOND; }
    break;

  case 1501:

/* Line 1455 of yacc.c  */
#line 10419 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_YEAR; }
    break;

  case 1502:

/* Line 1455 of yacc.c  */
#line 10423 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_DATE;}
    break;

  case 1503:

/* Line 1455 of yacc.c  */
#line 10424 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_TIME;}
    break;

  case 1504:

/* Line 1455 of yacc.c  */
#line 10425 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_DATETIME;}
    break;

  case 1505:

/* Line 1455 of yacc.c  */
#line 10426 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_DATETIME;}
    break;

  case 1509:

/* Line 1455 of yacc.c  */
#line 10436 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str_ptr)=0; }
    break;

  case 1510:

/* Line 1455 of yacc.c  */
#line 10438 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.lex_str_ptr)= (LEX_STRING*) sql_memdup(&(yyvsp[(2) - (2)].lex_str),sizeof(LEX_STRING));
            if ((yyval.lex_str_ptr) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1513:

/* Line 1455 of yacc.c  */
#line 10451 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->where= 0; }
    break;

  case 1514:

/* Line 1455 of yacc.c  */
#line 10453 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->parsing_place= IN_WHERE;
          }
    break;

  case 1515:

/* Line 1455 of yacc.c  */
#line 10457 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            SELECT_LEX *select= Select;
            select->where= normalize_cond((yyvsp[(3) - (3)].item));
            select->parsing_place= NO_MATTER;
            if ((yyvsp[(3) - (3)].item))
              (yyvsp[(3) - (3)].item)->top_level_item();
          }
    break;

  case 1517:

/* Line 1455 of yacc.c  */
#line 10469 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->parsing_place= IN_HAVING;
          }
    break;

  case 1518:

/* Line 1455 of yacc.c  */
#line 10473 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->having= normalize_cond((yyvsp[(3) - (3)].item));
            sel->parsing_place= NO_MATTER;
            if ((yyvsp[(3) - (3)].item))
              (yyvsp[(3) - (3)].item)->top_level_item();
          }
    break;

  case 1519:

/* Line 1455 of yacc.c  */
#line 10484 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->escape_used= TRUE;
            (yyval.item)= (yyvsp[(2) - (2)].item);
          }
    break;

  case 1520:

/* Line 1455 of yacc.c  */
#line 10489 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Lex->escape_used= FALSE;
            (yyval.item)= ((thd->variables.sql_mode & MODE_NO_BACKSLASH_ESCAPES) ?
                 new (thd->mem_root) Item_string("", 0, &my_charset_latin1) :
                 new (thd->mem_root) Item_string("\\", 1, &my_charset_latin1));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1523:

/* Line 1455 of yacc.c  */
#line 10511 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { if (add_group_to_list(YYTHD, (yyvsp[(3) - (4)].item),(bool) (yyvsp[(4) - (4)].num))) MYSQL_YYABORT; }
    break;

  case 1524:

/* Line 1455 of yacc.c  */
#line 10513 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { if (add_group_to_list(YYTHD, (yyvsp[(1) - (2)].item),(bool) (yyvsp[(2) - (2)].num))) MYSQL_YYABORT; }
    break;

  case 1525:

/* Line 1455 of yacc.c  */
#line 10517 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1526:

/* Line 1455 of yacc.c  */
#line 10519 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              'WITH CUBE' is reserved in the MySQL syntax, but not implemented,
              and cause LALR(2) conflicts.
              This syntax is not standard.
              MySQL syntax: GROUP BY col1, col2, col3 WITH CUBE
              SQL-2003: GROUP BY ... CUBE(col1, col2, col3)
            */
            LEX *lex=Lex;
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "WITH CUBE",
                       "global union parameters");
              MYSQL_YYABORT;
            }
            lex->current_select->olap= CUBE_TYPE;
            my_error(ER_NOT_SUPPORTED_YET, MYF(0), "CUBE");
            MYSQL_YYABORT;
          }
    break;

  case 1527:

/* Line 1455 of yacc.c  */
#line 10539 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              'WITH ROLLUP' is needed for backward compatibility,
              and cause LALR(2) conflicts.
              This syntax is not standard.
              MySQL syntax: GROUP BY col1, col2, col3 WITH ROLLUP
              SQL-2003: GROUP BY ... ROLLUP(col1, col2, col3)
            */
            LEX *lex= Lex;
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "WITH ROLLUP",
                       "global union parameters");
              MYSQL_YYABORT;
            }
            lex->current_select->olap= ROLLUP_TYPE;
          }
    break;

  case 1531:

/* Line 1455 of yacc.c  */
#line 10573 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            bool ascending= ((yyvsp[(2) - (2)].num) == 1) ? true : false;
            if (add_order_to_list(thd, (yyvsp[(1) - (2)].item), ascending))
              MYSQL_YYABORT;
          }
    break;

  case 1534:

/* Line 1455 of yacc.c  */
#line 10592 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            SELECT_LEX *sel= lex->current_select;
            SELECT_LEX_UNIT *unit= sel-> master_unit();
            if (sel->linkage != GLOBAL_OPTIONS_TYPE &&
                sel->olap != UNSPECIFIED_OLAP_TYPE &&
                (sel->linkage != UNION_TYPE || sel->braces))
            {
              my_error(ER_WRONG_USAGE, MYF(0),
                       "CUBE/ROLLUP", "ORDER BY");
              MYSQL_YYABORT;
            }
            if (lex->sql_command != SQLCOM_ALTER_TABLE && !unit->fake_select_lex)
            {
              /*
                A query of the of the form (SELECT ...) ORDER BY order_list is
                executed in the same way as the query
                SELECT ... ORDER BY order_list
                unless the SELECT construct contains ORDER BY or LIMIT clauses.
                Otherwise we create a fake SELECT_LEX if it has not been created
                yet.
              */
              SELECT_LEX *first_sl= unit->first_select();
              if (!unit->is_union() &&
                  (first_sl->order_list.elements || 
                   first_sl->select_limit) &&            
                  unit->add_fake_select_lex(lex->thd))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1536:

/* Line 1455 of yacc.c  */
#line 10627 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { if (add_order_to_list(YYTHD, (yyvsp[(3) - (4)].item),(bool) (yyvsp[(4) - (4)].num))) MYSQL_YYABORT; }
    break;

  case 1537:

/* Line 1455 of yacc.c  */
#line 10629 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { if (add_order_to_list(YYTHD, (yyvsp[(1) - (2)].item),(bool) (yyvsp[(2) - (2)].num))) MYSQL_YYABORT; }
    break;

  case 1538:

/* Line 1455 of yacc.c  */
#line 10633 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num) =  1; }
    break;

  case 1539:

/* Line 1455 of yacc.c  */
#line 10634 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num) =1; }
    break;

  case 1540:

/* Line 1455 of yacc.c  */
#line 10635 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num) =0; }
    break;

  case 1541:

/* Line 1455 of yacc.c  */
#line 10640 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            sel->offset_limit= 0;
            sel->select_limit= 0;
	    lex->limit_rows_examined= 0;
          }
    break;

  case 1542:

/* Line 1455 of yacc.c  */
#line 10647 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1543:

/* Line 1455 of yacc.c  */
#line 10651 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1544:

/* Line 1455 of yacc.c  */
#line 10652 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1545:

/* Line 1455 of yacc.c  */
#line 10657 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
          }
    break;

  case 1546:

/* Line 1455 of yacc.c  */
#line 10661 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
          }
    break;

  case 1547:

/* Line 1455 of yacc.c  */
#line 10665 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
          }
    break;

  case 1548:

/* Line 1455 of yacc.c  */
#line 10672 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(1) - (1)].item);
            sel->offset_limit= 0;
            sel->explicit_limit= 1;
          }
    break;

  case 1549:

/* Line 1455 of yacc.c  */
#line 10679 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(3) - (3)].item);
            sel->offset_limit= (yyvsp[(1) - (3)].item);
            sel->explicit_limit= 1;
          }
    break;

  case 1550:

/* Line 1455 of yacc.c  */
#line 10686 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(1) - (3)].item);
            sel->offset_limit= (yyvsp[(3) - (3)].item);
            sel->explicit_limit= 1;
          }
    break;

  case 1551:

/* Line 1455 of yacc.c  */
#line 10696 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
          Item_splocal *splocal;
          THD *thd= YYTHD;
          LEX *lex= thd->lex;
          Lex_input_stream *lip= & thd->m_parser_state->m_lip;
          sp_variable_t *spv;
          sp_pcontext *spc = lex->spcont;
          if (spc && (spv = spc->find_variable(&(yyvsp[(1) - (1)].lex_str))))
          {
            splocal= new (thd->mem_root)
              Item_splocal((yyvsp[(1) - (1)].lex_str), spv->offset, spv->type,
                  lip->get_tok_start() - lex->sphead->m_tmp_query,
                  lip->get_ptr() - lip->get_tok_start());
            if (splocal == NULL)
              MYSQL_YYABORT;
#ifndef DBUG_OFF
            splocal->m_sp= lex->sphead;
#endif
            lex->safe_to_cache_query=0;
          }
          else
          {
            my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
            MYSQL_YYABORT;
          }
          if (splocal->type() != Item::INT_ITEM)
          {
            my_error(ER_WRONG_SPVAR_TYPE_IN_LIMIT, MYF(0));
            MYSQL_YYABORT;
          }
          splocal->limit_clause_param= TRUE;
          (yyval.item)= splocal;
        }
    break;

  case 1552:

/* Line 1455 of yacc.c  */
#line 10730 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
          ((Item_param *) (yyvsp[(1) - (1)].item))->limit_clause_param= TRUE;
        }
    break;

  case 1553:

/* Line 1455 of yacc.c  */
#line 10734 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1554:

/* Line 1455 of yacc.c  */
#line 10740 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1555:

/* Line 1455 of yacc.c  */
#line 10746 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1556:

/* Line 1455 of yacc.c  */
#line 10755 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            LEX *lex=Lex;
            lex->limit_rows_examined= (yyvsp[(1) - (1)].item);
          }
    break;

  case 1557:

/* Line 1455 of yacc.c  */
#line 10762 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->current_select->select_limit= 0;
          }
    break;

  case 1558:

/* Line 1455 of yacc.c  */
#line 10767 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(2) - (2)].item);
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
            sel->explicit_limit= 1;
          }
    break;

  case 1559:

/* Line 1455 of yacc.c  */
#line 10773 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { my_parse_error(ER(ER_SYNTAX_ERROR)); MYSQL_YYABORT; }
    break;

  case 1560:

/* Line 1455 of yacc.c  */
#line 10774 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { my_parse_error(ER(ER_SYNTAX_ERROR)); MYSQL_YYABORT; }
    break;

  case 1561:

/* Line 1455 of yacc.c  */
#line 10778 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.num)= (int) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1562:

/* Line 1455 of yacc.c  */
#line 10779 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.num)= -(int) my_strtoll10((yyvsp[(2) - (2)].lex_str).str, (char**) 0, &error); }
    break;

  case 1563:

/* Line 1455 of yacc.c  */
#line 10780 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.num)= -(int) my_strtoll10((yyvsp[(2) - (2)].lex_str).str, (char**) 0, &error); }
    break;

  case 1564:

/* Line 1455 of yacc.c  */
#line 10784 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1565:

/* Line 1455 of yacc.c  */
#line 10785 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (ulong) strtol((yyvsp[(1) - (1)].lex_str).str, (char**) 0, 16); }
    break;

  case 1566:

/* Line 1455 of yacc.c  */
#line 10786 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1567:

/* Line 1455 of yacc.c  */
#line 10787 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1568:

/* Line 1455 of yacc.c  */
#line 10788 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1569:

/* Line 1455 of yacc.c  */
#line 10789 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1570:

/* Line 1455 of yacc.c  */
#line 10793 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1571:

/* Line 1455 of yacc.c  */
#line 10794 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (ulong) strtol((yyvsp[(1) - (1)].lex_str).str, (char**) 0, 16); }
    break;

  case 1572:

/* Line 1455 of yacc.c  */
#line 10795 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1573:

/* Line 1455 of yacc.c  */
#line 10796 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1574:

/* Line 1455 of yacc.c  */
#line 10797 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { MYSQL_YYABORT; }
    break;

  case 1575:

/* Line 1455 of yacc.c  */
#line 10801 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1576:

/* Line 1455 of yacc.c  */
#line 10802 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1577:

/* Line 1455 of yacc.c  */
#line 10803 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1578:

/* Line 1455 of yacc.c  */
#line 10804 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1579:

/* Line 1455 of yacc.c  */
#line 10805 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1580:

/* Line 1455 of yacc.c  */
#line 10809 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1581:

/* Line 1455 of yacc.c  */
#line 10810 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1582:

/* Line 1455 of yacc.c  */
#line 10811 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ulonglong_number)= strtoull((yyvsp[(1) - (1)].lex_str).str, (char**) 0, 16); }
    break;

  case 1583:

/* Line 1455 of yacc.c  */
#line 10812 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1584:

/* Line 1455 of yacc.c  */
#line 10813 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { MYSQL_YYABORT; }
    break;

  case 1585:

/* Line 1455 of yacc.c  */
#line 10818 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { my_parse_error(ER(ER_ONLY_INTEGERS_ALLOWED)); }
    break;

  case 1588:

/* Line 1455 of yacc.c  */
#line 10827 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.choice)= (yyvsp[(1) - (1)].ulong_num) != 0 ? HA_CHOICE_YES : HA_CHOICE_NO; }
    break;

  case 1589:

/* Line 1455 of yacc.c  */
#line 10828 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.choice)= HA_CHOICE_UNDEF; }
    break;

  case 1591:

/* Line 1455 of yacc.c  */
#line 10834 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            if (! lex->parsing_options.allows_select_procedure)
            {
              my_error(ER_VIEW_SELECT_CLAUSE, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }

            if (&lex->select_lex != lex->current_select)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "PROCEDURE", "subquery");
              MYSQL_YYABORT;
            }
            lex->proc_list.elements=0;
            lex->proc_list.first=0;
            lex->proc_list.next= &lex->proc_list.first;
            Item_field *item= new (YYTHD->mem_root)
                                Item_field(&lex->current_select->context,
                                           NULL, NULL, (yyvsp[(2) - (2)].lex_str).str);
            if (item == NULL)
              MYSQL_YYABORT;
            if (add_proc_to_list(lex->thd, item))
              MYSQL_YYABORT;
            Lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
          }
    break;

  case 1593:

/* Line 1455 of yacc.c  */
#line 10864 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1594:

/* Line 1455 of yacc.c  */
#line 10865 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1597:

/* Line 1455 of yacc.c  */
#line 10875 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (add_proc_to_list(thd, (yyvsp[(2) - (3)].item)))
              MYSQL_YYABORT;
            if (!(yyvsp[(2) - (3)].item)->name)
              (yyvsp[(2) - (3)].item)->set_name((yyvsp[(1) - (3)].simple_string), (uint) ((yyvsp[(3) - (3)].simple_string) - (yyvsp[(1) - (3)].simple_string)), thd->charset());
          }
    break;

  case 1598:

/* Line 1455 of yacc.c  */
#line 10886 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->describe && (!(lex->result= new select_dumpvar())))
              MYSQL_YYABORT;
          }
    break;

  case 1599:

/* Line 1455 of yacc.c  */
#line 10892 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1601:

/* Line 1455 of yacc.c  */
#line 10897 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1602:

/* Line 1455 of yacc.c  */
#line 10902 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->result) 
            {
              my_var *var= new my_var((yyvsp[(2) - (2)].lex_str),0,0,(enum_field_types)0);
              if (var == NULL)
                MYSQL_YYABORT;
              ((select_dumpvar *)lex->result)->var_list.push_back(var);
            }
            else
            {
              /*
                The parser won't create select_result instance only
                if it's an EXPLAIN.
              */
              DBUG_ASSERT(lex->describe);
            }
          }
    break;

  case 1603:

/* Line 1455 of yacc.c  */
#line 10921 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            sp_variable_t *t;

            if (!lex->spcont || !(t=lex->spcont->find_variable(&(yyvsp[(1) - (1)].lex_str))))
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (lex->result)
            {
              my_var *var= new my_var((yyvsp[(1) - (1)].lex_str),1,t->offset,t->type);
              if (var == NULL)
                MYSQL_YYABORT;
              ((select_dumpvar *)lex->result)->var_list.push_back(var);
#ifndef DBUG_OFF
              var->sp= lex->sphead;
#endif
            }
            else
            {
              /*
                The parser won't create select_result instance only
                if it's an EXPLAIN.
              */
              DBUG_ASSERT(lex->describe);
            }
          }
    break;

  case 1604:

/* Line 1455 of yacc.c  */
#line 10953 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (! Lex->parsing_options.allows_select_into)
            {
              my_error(ER_VIEW_SELECT_CLAUSE, MYF(0), "INTO");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1606:

/* Line 1455 of yacc.c  */
#line 10965 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
            if (!(lex->exchange= new sql_exchange((yyvsp[(2) - (2)].lex_str).str, 0)) ||
                !(lex->result= new select_export(lex->exchange)))
              MYSQL_YYABORT;
          }
    break;

  case 1607:

/* Line 1455 of yacc.c  */
#line 10973 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->exchange->cs= (yyvsp[(4) - (4)].charset); }
    break;

  case 1609:

/* Line 1455 of yacc.c  */
#line 10976 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->describe)
            {
              lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
              if (!(lex->exchange= new sql_exchange((yyvsp[(2) - (2)].lex_str).str,1)))
                MYSQL_YYABORT;
              if (!(lex->result= new select_dump(lex->exchange)))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1610:

/* Line 1455 of yacc.c  */
#line 10988 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
          }
    break;

  case 1611:

/* Line 1455 of yacc.c  */
#line 10999 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_DO;
            mysql_init_select(lex);
          }
    break;

  case 1612:

/* Line 1455 of yacc.c  */
#line 11005 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->insert_list= (yyvsp[(3) - (3)].item_list);
          }
    break;

  case 1613:

/* Line 1455 of yacc.c  */
#line 11016 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_DROP_TABLE;
            lex->drop_temporary= (yyvsp[(2) - (4)].num);
            lex->check_exists= (yyvsp[(4) - (4)].num);
            YYPS->m_lock_type= TL_UNLOCK;
            YYPS->m_mdl_type= MDL_EXCLUSIVE;
          }
    break;

  case 1614:

/* Line 1455 of yacc.c  */
#line 11025 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1615:

/* Line 1455 of yacc.c  */
#line 11026 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1616:

/* Line 1455 of yacc.c  */
#line 11027 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, (yyvsp[(4) - (7)].lex_str).str, (yyvsp[(3) - (7)].num));
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->sql_command= SQLCOM_DROP_INDEX;
            lex->alter_info.reset();
            lex->alter_info.flags= ALTER_DROP_INDEX;
            lex->alter_info.drop_list.push_back(ad);
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(6) - (7)].table), NULL,
                                                        TL_OPTION_UPDATING,
                                                        TL_READ_NO_INSERT,
                                                        MDL_SHARED_NO_WRITE))
              MYSQL_YYABORT;
          }
    break;

  case 1617:

/* Line 1455 of yacc.c  */
#line 11043 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_DROP_DB;
            lex->check_exists=(yyvsp[(3) - (4)].num);
            lex->name= (yyvsp[(4) - (4)].lex_str);
          }
    break;

  case 1618:

/* Line 1455 of yacc.c  */
#line 11050 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_name *spname;
            if ((yyvsp[(4) - (6)].lex_str).str && check_db_name(&(yyvsp[(4) - (6)].lex_str)))
            {
               my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[(4) - (6)].lex_str).str);
               MYSQL_YYABORT;
            }
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_DROP_FUNCTION;
            lex->check_exists= (yyvsp[(3) - (6)].num);
            spname= new sp_name((yyvsp[(4) - (6)].lex_str), (yyvsp[(6) - (6)].lex_str), true);
            if (spname == NULL)
              MYSQL_YYABORT;
            spname->init_qname(thd);
            lex->spname= spname;
          }
    break;

  case 1619:

/* Line 1455 of yacc.c  */
#line 11073 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            LEX_STRING db= {0, 0};
            sp_name *spname;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            if (thd->db && lex->copy_db_to(&db.str, &db.length))
              MYSQL_YYABORT;
            lex->sql_command = SQLCOM_DROP_FUNCTION;
            lex->check_exists= (yyvsp[(3) - (4)].num);
            spname= new sp_name(db, (yyvsp[(4) - (4)].lex_str), false);
            if (spname == NULL)
              MYSQL_YYABORT;
            spname->init_qname(thd);
            lex->spname= spname;
          }
    break;

  case 1620:

/* Line 1455 of yacc.c  */
#line 11094 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_DROP_PROCEDURE;
            lex->check_exists= (yyvsp[(3) - (4)].num);
            lex->spname= (yyvsp[(4) - (4)].spname);
          }
    break;

  case 1621:

/* Line 1455 of yacc.c  */
#line 11106 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_DROP_USER;
          }
    break;

  case 1622:

/* Line 1455 of yacc.c  */
#line 11110 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DROP_VIEW;
            lex->check_exists= (yyvsp[(3) - (3)].num);
            YYPS->m_lock_type= TL_UNLOCK;
            YYPS->m_mdl_type= MDL_EXCLUSIVE;
          }
    break;

  case 1623:

/* Line 1455 of yacc.c  */
#line 11118 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1624:

/* Line 1455 of yacc.c  */
#line 11120 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->check_exists= (yyvsp[(3) - (4)].num);
            Lex->spname= (yyvsp[(4) - (4)].spname);
            Lex->sql_command = SQLCOM_DROP_EVENT;
          }
    break;

  case 1625:

/* Line 1455 of yacc.c  */
#line 11126 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DROP_TRIGGER;
            lex->check_exists= (yyvsp[(3) - (4)].num);
            lex->spname= (yyvsp[(4) - (4)].spname);
          }
    break;

  case 1626:

/* Line 1455 of yacc.c  */
#line 11133 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= DROP_TABLESPACE;
          }
    break;

  case 1627:

/* Line 1455 of yacc.c  */
#line 11138 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= DROP_LOGFILE_GROUP;
          }
    break;

  case 1628:

/* Line 1455 of yacc.c  */
#line 11143 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_DROP_SERVER;
            Lex->check_exists= (yyvsp[(3) - (4)].num);
            Lex->server_options.server_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->server_options.server_name_length= (yyvsp[(4) - (4)].lex_str).length;
          }
    break;

  case 1631:

/* Line 1455 of yacc.c  */
#line 11158 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (1)].table), NULL,
                                           TL_OPTION_UPDATING,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1634:

/* Line 1455 of yacc.c  */
#line 11174 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (1)].table), NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1635:

/* Line 1455 of yacc.c  */
#line 11185 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
          Lex->check_exists= FALSE;
          (yyval.num)= 0;
        }
    break;

  case 1636:

/* Line 1455 of yacc.c  */
#line 11190 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
          Lex->check_exists= TRUE;
          (yyval.num)= 1;
        }
    break;

  case 1637:

/* Line 1455 of yacc.c  */
#line 11197 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1638:

/* Line 1455 of yacc.c  */
#line 11198 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1639:

/* Line 1455 of yacc.c  */
#line 11206 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_INSERT;
            lex->duplicates= DUP_ERROR; 
            mysql_init_select(lex);
          }
    break;

  case 1640:

/* Line 1455 of yacc.c  */
#line 11214 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->set_lock_for_tables((yyvsp[(3) - (5)].lock_type));
            Lex->current_select= &Lex->select_lex;
          }
    break;

  case 1641:

/* Line 1455 of yacc.c  */
#line 11219 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1642:

/* Line 1455 of yacc.c  */
#line 11224 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_REPLACE;
            lex->duplicates= DUP_REPLACE;
            mysql_init_select(lex);
          }
    break;

  case 1643:

/* Line 1455 of yacc.c  */
#line 11231 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->set_lock_for_tables((yyvsp[(3) - (4)].lock_type));
            Lex->current_select= &Lex->select_lex;
          }
    break;

  case 1644:

/* Line 1455 of yacc.c  */
#line 11236 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1645:

/* Line 1455 of yacc.c  */
#line 11241 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              If it is SP we do not allow insert optimisation when result of
              insert visible only after the table unlocking but everyone can
              read table.
            */
            (yyval.lock_type)= (Lex->sphead ? TL_WRITE_DEFAULT : TL_WRITE_CONCURRENT_INSERT);
          }
    break;

  case 1646:

/* Line 1455 of yacc.c  */
#line 11249 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1647:

/* Line 1455 of yacc.c  */
#line 11251 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
          Lex->keyword_delayed_begin_offset= (uint)(YYLIP->get_tok_start() -
                                                    YYTHD->query());
          Lex->keyword_delayed_end_offset= Lex->keyword_delayed_begin_offset +
                                           YYLIP->yyLength() + 1;
          (yyval.lock_type)= TL_WRITE_DELAYED;
        }
    break;

  case 1648:

/* Line 1455 of yacc.c  */
#line 11258 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE; }
    break;

  case 1649:

/* Line 1455 of yacc.c  */
#line 11262 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lock_type)= (yyvsp[(1) - (1)].lock_type); }
    break;

  case 1650:

/* Line 1455 of yacc.c  */
#line 11264 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
          Lex->keyword_delayed_begin_offset= (uint)(YYLIP->get_tok_start() -
                                                    YYTHD->query());
          Lex->keyword_delayed_end_offset= Lex->keyword_delayed_begin_offset +
                                           YYLIP->yyLength() + 1;
          (yyval.lock_type)= TL_WRITE_DELAYED;
        }
    break;

  case 1651:

/* Line 1455 of yacc.c  */
#line 11274 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1652:

/* Line 1455 of yacc.c  */
#line 11275 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1653:

/* Line 1455 of yacc.c  */
#line 11280 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->field_list.empty();
            lex->many_values.empty();
            lex->insert_list=0;
          }
    break;

  case 1654:

/* Line 1455 of yacc.c  */
#line 11288 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1655:

/* Line 1455 of yacc.c  */
#line 11289 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1656:

/* Line 1455 of yacc.c  */
#line 11290 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1657:

/* Line 1455 of yacc.c  */
#line 11292 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!(lex->insert_list = new List_item) ||
                lex->many_values.push_back(lex->insert_list))
              MYSQL_YYABORT;
          }
    break;

  case 1659:

/* Line 1455 of yacc.c  */
#line 11302 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(3) - (3)].item)); }
    break;

  case 1660:

/* Line 1455 of yacc.c  */
#line 11303 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(1) - (1)].item)); }
    break;

  case 1661:

/* Line 1455 of yacc.c  */
#line 11307 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1662:

/* Line 1455 of yacc.c  */
#line 11308 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1663:

/* Line 1455 of yacc.c  */
#line 11310 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->set_braces(0);}
    break;

  case 1664:

/* Line 1455 of yacc.c  */
#line 11311 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1665:

/* Line 1455 of yacc.c  */
#line 11313 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 1666:

/* Line 1455 of yacc.c  */
#line 11314 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1671:

/* Line 1455 of yacc.c  */
#line 11329 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->field_list.push_back((yyvsp[(1) - (3)].item)) ||
                lex->insert_list->push_back((yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1672:

/* Line 1455 of yacc.c  */
#line 11338 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1673:

/* Line 1455 of yacc.c  */
#line 11339 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1674:

/* Line 1455 of yacc.c  */
#line 11343 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1675:

/* Line 1455 of yacc.c  */
#line 11344 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1676:

/* Line 1455 of yacc.c  */
#line 11349 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
              if (!(Lex->insert_list = new List_item))
                MYSQL_YYABORT;
          }
    break;

  case 1677:

/* Line 1455 of yacc.c  */
#line 11354 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->many_values.push_back(lex->insert_list))
              MYSQL_YYABORT;
          }
    break;

  case 1678:

/* Line 1455 of yacc.c  */
#line 11362 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1680:

/* Line 1455 of yacc.c  */
#line 11368 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->insert_list->push_back((yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1681:

/* Line 1455 of yacc.c  */
#line 11373 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->insert_list->push_back((yyvsp[(1) - (1)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1682:

/* Line 1455 of yacc.c  */
#line 11380 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item);}
    break;

  case 1683:

/* Line 1455 of yacc.c  */
#line 11382 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_default_value(Lex->current_context());
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1685:

/* Line 1455 of yacc.c  */
#line 11391 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->duplicates= DUP_UPDATE; }
    break;

  case 1687:

/* Line 1455 of yacc.c  */
#line 11399 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            mysql_init_select(lex);
            lex->sql_command= SQLCOM_UPDATE;
            lex->duplicates= DUP_ERROR; 
          }
    break;

  case 1688:

/* Line 1455 of yacc.c  */
#line 11407 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->select_lex.table_list.elements > 1)
              lex->sql_command= SQLCOM_UPDATE_MULTI;
            else if (lex->select_lex.get_table_list()->derived)
            {
              /* it is single table update and it is update of derived table */
              my_error(ER_NON_UPDATABLE_TABLE, MYF(0),
                       lex->select_lex.get_table_list()->alias, "UPDATE");
              MYSQL_YYABORT;
            }
            /*
              In case of multi-update setting write lock for all tables may
              be too pessimistic. We will decrease lock level if possible in
              mysql_multi_update().
            */
            Select->set_lock_for_tables((yyvsp[(3) - (7)].lock_type));
          }
    break;

  case 1689:

/* Line 1455 of yacc.c  */
#line 11425 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1692:

/* Line 1455 of yacc.c  */
#line 11435 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_item_to_list(YYTHD, (yyvsp[(1) - (3)].item)) || add_value_to_list(YYTHD, (yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1695:

/* Line 1455 of yacc.c  */
#line 11448 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
          LEX *lex= Lex;
          if (lex->update_list.push_back((yyvsp[(1) - (3)].item)) || 
              lex->value_list.push_back((yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1696:

/* Line 1455 of yacc.c  */
#line 11457 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_DEFAULT; }
    break;

  case 1697:

/* Line 1455 of yacc.c  */
#line 11458 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1698:

/* Line 1455 of yacc.c  */
#line 11465 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DELETE;
            mysql_init_select(lex);
            YYPS->m_lock_type= TL_WRITE_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_WRITE;

            lex->ignore= 0;
            lex->select_lex.init_order();
          }
    break;

  case 1700:

/* Line 1455 of yacc.c  */
#line 11480 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(2) - (2)].table), NULL, TL_OPTION_UPDATING,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
            YYPS->m_lock_type= TL_READ_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_READ;
          }
    break;

  case 1701:

/* Line 1455 of yacc.c  */
#line 11489 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1702:

/* Line 1455 of yacc.c  */
#line 11491 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            mysql_init_multi_delete(Lex);
            YYPS->m_lock_type= TL_READ_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_READ;
          }
    break;

  case 1703:

/* Line 1455 of yacc.c  */
#line 11497 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (multi_delete_set_locks_and_link_aux_tables(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1704:

/* Line 1455 of yacc.c  */
#line 11502 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            mysql_init_multi_delete(Lex);
            YYPS->m_lock_type= TL_READ_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_READ;
          }
    break;

  case 1705:

/* Line 1455 of yacc.c  */
#line 11508 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (multi_delete_set_locks_and_link_aux_tables(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1708:

/* Line 1455 of yacc.c  */
#line 11521 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Table_ident *ti= new Table_ident((yyvsp[(1) - (2)].lex_str));
            if (ti == NULL)
              MYSQL_YYABORT;
            if (!Select->add_table_to_list(YYTHD,
                                           ti,
                                           NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1709:

/* Line 1455 of yacc.c  */
#line 11534 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Table_ident *ti= new Table_ident(YYTHD, (yyvsp[(1) - (4)].lex_str), (yyvsp[(3) - (4)].lex_str), 0);
            if (ti == NULL)
              MYSQL_YYABORT;
            if (!Select->add_table_to_list(YYTHD,
                                           ti,
                                           NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1710:

/* Line 1455 of yacc.c  */
#line 11549 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1711:

/* Line 1455 of yacc.c  */
#line 11550 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1712:

/* Line 1455 of yacc.c  */
#line 11554 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1713:

/* Line 1455 of yacc.c  */
#line 11555 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1714:

/* Line 1455 of yacc.c  */
#line 11559 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->options|= OPTION_QUICK; }
    break;

  case 1715:

/* Line 1455 of yacc.c  */
#line 11560 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { YYPS->m_lock_type= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1716:

/* Line 1455 of yacc.c  */
#line 11561 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ignore= 1; }
    break;

  case 1717:

/* Line 1455 of yacc.c  */
#line 11566 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX* lex= Lex;
            lex->sql_command= SQLCOM_TRUNCATE;
            lex->alter_info.reset();
            lex->select_lex.options= 0;
            lex->select_lex.sql_cache= SELECT_LEX::SQL_CACHE_UNSPECIFIED;
            lex->select_lex.init_order();
            YYPS->m_lock_type= TL_WRITE;
            YYPS->m_mdl_type= MDL_EXCLUSIVE;
          }
    break;

  case 1718:

/* Line 1455 of yacc.c  */
#line 11577 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root) Truncate_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1725:

/* Line 1455 of yacc.c  */
#line 11602 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_CPU;
    }
    break;

  case 1726:

/* Line 1455 of yacc.c  */
#line 11606 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_MEMORY;
    }
    break;

  case 1727:

/* Line 1455 of yacc.c  */
#line 11610 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_BLOCK_IO;
    }
    break;

  case 1728:

/* Line 1455 of yacc.c  */
#line 11614 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_CONTEXT;
    }
    break;

  case 1729:

/* Line 1455 of yacc.c  */
#line 11618 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_PAGE_FAULTS;
    }
    break;

  case 1730:

/* Line 1455 of yacc.c  */
#line 11622 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_IPC;
    }
    break;

  case 1731:

/* Line 1455 of yacc.c  */
#line 11626 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_SWAPS;
    }
    break;

  case 1732:

/* Line 1455 of yacc.c  */
#line 11630 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_SOURCE;
    }
    break;

  case 1733:

/* Line 1455 of yacc.c  */
#line 11634 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_ALL;
    }
    break;

  case 1734:

/* Line 1455 of yacc.c  */
#line 11641 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
      Lex->profile_query_id= 0;
    }
    break;

  case 1735:

/* Line 1455 of yacc.c  */
#line 11645 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
      Lex->profile_query_id= atoi((yyvsp[(3) - (3)].lex_str).str);
    }
    break;

  case 1736:

/* Line 1455 of yacc.c  */
#line 11654 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->wild=0;
            lex->ident=null_lex_str;
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
            bzero((char*) &lex->create_info,sizeof(lex->create_info));
          }
    break;

  case 1737:

/* Line 1455 of yacc.c  */
#line 11663 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1738:

/* Line 1455 of yacc.c  */
#line 11668 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_DATABASES;
             if (prepare_schema_table(YYTHD, lex, 0, SCH_SCHEMATA))
               MYSQL_YYABORT;
           }
    break;

  case 1739:

/* Line 1455 of yacc.c  */
#line 11675 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TABLES;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_TABLE_NAMES))
               MYSQL_YYABORT;
           }
    break;

  case 1740:

/* Line 1455 of yacc.c  */
#line 11683 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TRIGGERS;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_TRIGGERS))
               MYSQL_YYABORT;
           }
    break;

  case 1741:

/* Line 1455 of yacc.c  */
#line 11691 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_EVENTS;
             lex->select_lex.db= (yyvsp[(2) - (3)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_EVENTS))
               MYSQL_YYABORT;
           }
    break;

  case 1742:

/* Line 1455 of yacc.c  */
#line 11699 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TABLE_STATUS;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_TABLES))
               MYSQL_YYABORT;
           }
    break;

  case 1743:

/* Line 1455 of yacc.c  */
#line 11707 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_OPEN_TABLES;
            lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
            if (prepare_schema_table(YYTHD, lex, 0, SCH_OPEN_TABLES))
              MYSQL_YYABORT;
          }
    break;

  case 1744:

/* Line 1455 of yacc.c  */
#line 11715 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_PLUGINS;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_PLUGINS))
              MYSQL_YYABORT;
          }
    break;

  case 1745:

/* Line 1455 of yacc.c  */
#line 11722 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->ident= (yyvsp[(3) - (3)].lex_str);
            Lex->sql_command= SQLCOM_SHOW_PLUGINS;
            if (prepare_schema_table(YYTHD, Lex, 0, SCH_ALL_PLUGINS))
              MYSQL_YYABORT;
          }
    break;

  case 1746:

/* Line 1455 of yacc.c  */
#line 11729 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_SHOW_PLUGINS;
            if (prepare_schema_table(YYTHD, Lex, 0, SCH_ALL_PLUGINS))
              MYSQL_YYABORT;
          }
    break;

  case 1747:

/* Line 1455 of yacc.c  */
#line 11735 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_info.db_type= (yyvsp[(2) - (3)].db_type); }
    break;

  case 1748:

/* Line 1455 of yacc.c  */
#line 11737 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_info.db_type= NULL; }
    break;

  case 1749:

/* Line 1455 of yacc.c  */
#line 11739 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_FIELDS;
            if ((yyvsp[(5) - (6)].simple_string))
              (yyvsp[(4) - (6)].table)->change_db((yyvsp[(5) - (6)].simple_string));
            if (prepare_schema_table(YYTHD, lex, (yyvsp[(4) - (6)].table), SCH_COLUMNS))
              MYSQL_YYABORT;
          }
    break;

  case 1750:

/* Line 1455 of yacc.c  */
#line 11748 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_BINLOGS;
          }
    break;

  case 1751:

/* Line 1455 of yacc.c  */
#line 11752 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_SLAVE_HOSTS;
          }
    break;

  case 1752:

/* Line 1455 of yacc.c  */
#line 11756 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_BINLOG_EVENTS;
          }
    break;

  case 1754:

/* Line 1455 of yacc.c  */
#line 11761 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_RELAYLOG_EVENTS;
          }
    break;

  case 1756:

/* Line 1455 of yacc.c  */
#line 11766 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_KEYS;
            if ((yyvsp[(4) - (5)].simple_string))
              (yyvsp[(3) - (5)].table)->change_db((yyvsp[(4) - (5)].simple_string));
            if (prepare_schema_table(YYTHD, lex, (yyvsp[(3) - (5)].table), SCH_STATISTICS))
              MYSQL_YYABORT;
          }
    break;

  case 1757:

/* Line 1455 of yacc.c  */
#line 11775 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_STORAGE_ENGINES;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_ENGINES))
              MYSQL_YYABORT;
          }
    break;

  case 1758:

/* Line 1455 of yacc.c  */
#line 11782 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_AUTHORS;
            push_warning_printf(YYTHD, MYSQL_ERROR::WARN_LEVEL_WARN,
                                ER_WARN_DEPRECATED_SYNTAX_NO_REPLACEMENT,
                                ER(ER_WARN_DEPRECATED_SYNTAX_NO_REPLACEMENT),
                                "SHOW AUTHORS");
          }
    break;

  case 1759:

/* Line 1455 of yacc.c  */
#line 11791 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_CONTRIBUTORS;
            push_warning_printf(YYTHD, MYSQL_ERROR::WARN_LEVEL_WARN,
                                ER_WARN_DEPRECATED_SYNTAX_NO_REPLACEMENT,
                                ER(ER_WARN_DEPRECATED_SYNTAX_NO_REPLACEMENT),
                                "SHOW CONTRIBUTORS");
          }
    break;

  case 1760:

/* Line 1455 of yacc.c  */
#line 11800 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_PRIVILEGES;
          }
    break;

  case 1761:

/* Line 1455 of yacc.c  */
#line 11805 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (void) create_select_for_variable("warning_count"); }
    break;

  case 1762:

/* Line 1455 of yacc.c  */
#line 11807 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (void) create_select_for_variable("error_count"); }
    break;

  case 1763:

/* Line 1455 of yacc.c  */
#line 11809 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sql_command = SQLCOM_SHOW_WARNS;}
    break;

  case 1764:

/* Line 1455 of yacc.c  */
#line 11811 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sql_command = SQLCOM_SHOW_ERRORS;}
    break;

  case 1765:

/* Line 1455 of yacc.c  */
#line 11813 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sql_command = SQLCOM_SHOW_PROFILES; }
    break;

  case 1766:

/* Line 1455 of yacc.c  */
#line 11815 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_PROFILE;
            if (prepare_schema_table(YYTHD, lex, NULL, SCH_PROFILES) != 0)
              YYABORT;
          }
    break;

  case 1767:

/* Line 1455 of yacc.c  */
#line 11822 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS;
            lex->option_type= (yyvsp[(1) - (3)].var_type);
            if (prepare_schema_table(YYTHD, lex, 0, SCH_STATUS))
              MYSQL_YYABORT;
          }
    break;

  case 1768:

/* Line 1455 of yacc.c  */
#line 11830 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_PROCESSLIST;}
    break;

  case 1769:

/* Line 1455 of yacc.c  */
#line 11832 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_VARIABLES;
            lex->option_type= (yyvsp[(1) - (3)].var_type);
            if (prepare_schema_table(YYTHD, lex, 0, SCH_VARIABLES))
              MYSQL_YYABORT;
          }
    break;

  case 1770:

/* Line 1455 of yacc.c  */
#line 11840 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_CHARSETS;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_CHARSETS))
              MYSQL_YYABORT;
          }
    break;

  case 1771:

/* Line 1455 of yacc.c  */
#line 11847 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_COLLATIONS;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_COLLATIONS))
              MYSQL_YYABORT;
          }
    break;

  case 1772:

/* Line 1455 of yacc.c  */
#line 11854 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_GRANTS;
            LEX_USER *curr_user;
            if (!(curr_user= (LEX_USER*) lex->thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            bzero(curr_user, sizeof(st_lex_user));
            lex->grant_user= curr_user;
          }
    break;

  case 1773:

/* Line 1455 of yacc.c  */
#line 11864 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_GRANTS;
            lex->grant_user=(yyvsp[(3) - (3)].lex_user);
            lex->grant_user->password=null_lex_str;
          }
    break;

  case 1774:

/* Line 1455 of yacc.c  */
#line 11871 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command=SQLCOM_SHOW_CREATE_DB;
            Lex->create_info.options=(yyvsp[(3) - (4)].num);
            Lex->name= (yyvsp[(4) - (4)].lex_str);
          }
    break;

  case 1775:

/* Line 1455 of yacc.c  */
#line 11877 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_SHOW_CREATE;
            if (!lex->select_lex.add_table_to_list(YYTHD, (yyvsp[(3) - (3)].table), NULL,0))
              MYSQL_YYABORT;
            lex->only_view= 0;
            lex->create_info.storage_media= HA_SM_DEFAULT;
          }
    break;

  case 1776:

/* Line 1455 of yacc.c  */
#line 11886 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_SHOW_CREATE;
            if (!lex->select_lex.add_table_to_list(YYTHD, (yyvsp[(3) - (3)].table), NULL, 0))
              MYSQL_YYABORT;
            lex->only_view= 1;
          }
    break;

  case 1777:

/* Line 1455 of yacc.c  */
#line 11894 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_MASTER_STAT;
          }
    break;

  case 1778:

/* Line 1455 of yacc.c  */
#line 11898 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_SLAVE_STAT;
            Lex->verbose= 1;
          }
    break;

  case 1779:

/* Line 1455 of yacc.c  */
#line 11903 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->mi.connection_name= thd->variables.default_master_connection;
            lex->sql_command = SQLCOM_SHOW_SLAVE_STAT;
            lex->verbose= 0;
          }
    break;

  case 1780:

/* Line 1455 of yacc.c  */
#line 11911 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_SLAVE_STAT;
            Lex->verbose= 0;
          }
    break;

  case 1781:

/* Line 1455 of yacc.c  */
#line 11916 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
           LEX *lex= Lex;
           lex->sql_command= SQLCOM_SHOW_CLIENT_STATS;
           if (prepare_schema_table(YYTHD, lex, 0, SCH_CLIENT_STATS))
             MYSQL_YYABORT;
          }
    break;

  case 1782:

/* Line 1455 of yacc.c  */
#line 11923 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_USER_STATS;
             if (prepare_schema_table(YYTHD, lex, 0, SCH_USER_STATS))
               MYSQL_YYABORT;
          }
    break;

  case 1783:

/* Line 1455 of yacc.c  */
#line 11930 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TABLE_STATS;
             if (prepare_schema_table(YYTHD, lex, 0, SCH_TABLE_STATS))
               MYSQL_YYABORT;
          }
    break;

  case 1784:

/* Line 1455 of yacc.c  */
#line 11937 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_INDEX_STATS;
             if (prepare_schema_table(YYTHD, lex, 0, SCH_INDEX_STATS))
               MYSQL_YYABORT;
          }
    break;

  case 1785:

/* Line 1455 of yacc.c  */
#line 11944 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sql_command = SQLCOM_SHOW_CREATE_PROC;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1786:

/* Line 1455 of yacc.c  */
#line 11951 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sql_command = SQLCOM_SHOW_CREATE_FUNC;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1787:

/* Line 1455 of yacc.c  */
#line 11958 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_CREATE_TRIGGER;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1788:

/* Line 1455 of yacc.c  */
#line 11964 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS_PROC;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_PROCEDURES))
              MYSQL_YYABORT;
          }
    break;

  case 1789:

/* Line 1455 of yacc.c  */
#line 11971 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS_FUNC;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_PROCEDURES))
              MYSQL_YYABORT;
          }
    break;

  case 1790:

/* Line 1455 of yacc.c  */
#line 11978 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_SHOW_PROC_CODE;
            Lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1791:

/* Line 1455 of yacc.c  */
#line 11983 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_SHOW_FUNC_CODE;
            Lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1792:

/* Line 1455 of yacc.c  */
#line 11988 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->spname= (yyvsp[(3) - (3)].spname);
            Lex->sql_command = SQLCOM_SHOW_CREATE_EVENT;
          }
    break;

  case 1793:

/* Line 1455 of yacc.c  */
#line 11993 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Lex->sql_command= SQLCOM_SHOW_EXPLAIN;
            if (prepare_schema_table(thd, Lex, 0, SCH_EXPLAIN))
              MYSQL_YYABORT;
            add_value_to_list(thd, (yyvsp[(3) - (3)].item));
          }
    break;

  case 1794:

/* Line 1455 of yacc.c  */
#line 12004 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_STATUS; }
    break;

  case 1795:

/* Line 1455 of yacc.c  */
#line 12006 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_MUTEX; }
    break;

  case 1796:

/* Line 1455 of yacc.c  */
#line 12008 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_LOGS; }
    break;

  case 1801:

/* Line 1455 of yacc.c  */
#line 12022 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.simple_string)= 0; }
    break;

  case 1802:

/* Line 1455 of yacc.c  */
#line 12023 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.simple_string)= (yyvsp[(2) - (2)].lex_str).str; }
    break;

  case 1803:

/* Line 1455 of yacc.c  */
#line 12027 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->verbose=0; }
    break;

  case 1804:

/* Line 1455 of yacc.c  */
#line 12028 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->verbose=1; }
    break;

  case 1807:

/* Line 1455 of yacc.c  */
#line 12037 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->mi.log_file_name = 0; }
    break;

  case 1808:

/* Line 1455 of yacc.c  */
#line 12038 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->mi.log_file_name = (yyvsp[(2) - (2)].lex_str).str; }
    break;

  case 1809:

/* Line 1455 of yacc.c  */
#line 12042 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->mi.pos = 4; /* skip magic number */ }
    break;

  case 1810:

/* Line 1455 of yacc.c  */
#line 12043 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->mi.pos = (yyvsp[(2) - (2)].ulonglong_number); }
    break;

  case 1812:

/* Line 1455 of yacc.c  */
#line 12049 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->wild= new (YYTHD->mem_root) String((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length,
                                                    system_charset_info);
            if (Lex->wild == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1813:

/* Line 1455 of yacc.c  */
#line 12056 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->where= normalize_cond((yyvsp[(2) - (2)].item));
            if ((yyvsp[(2) - (2)].item))
              (yyvsp[(2) - (2)].item)->top_level_item();
          }
    break;

  case 1814:

/* Line 1455 of yacc.c  */
#line 12066 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
            lex->sql_command= SQLCOM_SHOW_FIELDS;
            lex->select_lex.db= 0;
            lex->verbose= 0;
            if (prepare_schema_table(YYTHD, lex, (yyvsp[(2) - (2)].table), SCH_COLUMNS))
              MYSQL_YYABORT;
          }
    break;

  case 1815:

/* Line 1455 of yacc.c  */
#line 12076 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1816:

/* Line 1455 of yacc.c  */
#line 12078 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->describe|= DESCRIBE_NORMAL; }
    break;

  case 1817:

/* Line 1455 of yacc.c  */
#line 12080 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->select_lex.options|= SELECT_DESCRIBE;
          }
    break;

  case 1820:

/* Line 1455 of yacc.c  */
#line 12092 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1821:

/* Line 1455 of yacc.c  */
#line 12093 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->describe|= DESCRIBE_EXTENDED; }
    break;

  case 1822:

/* Line 1455 of yacc.c  */
#line 12094 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->describe|= DESCRIBE_PARTITIONS; }
    break;

  case 1823:

/* Line 1455 of yacc.c  */
#line 12098 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1824:

/* Line 1455 of yacc.c  */
#line 12099 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->wild= (yyvsp[(1) - (1)].string); }
    break;

  case 1825:

/* Line 1455 of yacc.c  */
#line 12101 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->wild= new (YYTHD->mem_root) String((const char*) (yyvsp[(1) - (1)].lex_str).str,
                                                    (yyvsp[(1) - (1)].lex_str).length,
                                                    system_charset_info);
            if (Lex->wild == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1826:

/* Line 1455 of yacc.c  */
#line 12115 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_FLUSH;
            lex->type= 0;
            lex->no_write_to_binlog= (yyvsp[(2) - (2)].num);
          }
    break;

  case 1827:

/* Line 1455 of yacc.c  */
#line 12122 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1828:

/* Line 1455 of yacc.c  */
#line 12127 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->type|= REFRESH_TABLES;
            /*
              Set type of metadata and table locks for
              FLUSH TABLES table_list [WITH READ LOCK].
            */
            YYPS->m_lock_type= TL_READ_NO_INSERT;
            YYPS->m_mdl_type= MDL_SHARED_HIGH_PRIO;
          }
    break;

  case 1829:

/* Line 1455 of yacc.c  */
#line 12136 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1830:

/* Line 1455 of yacc.c  */
#line 12137 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1832:

/* Line 1455 of yacc.c  */
#line 12142 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1833:

/* Line 1455 of yacc.c  */
#line 12144 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            TABLE_LIST *tables= Lex->query_tables;
            Lex->type|= REFRESH_READ_LOCK | (yyvsp[(4) - (4)].num);
            for (; tables; tables= tables->next_global)
            {
              tables->mdl_request.set_type(MDL_SHARED_NO_WRITE);
              tables->required_type= FRMTYPE_TABLE; /* Don't try to flush views. */
              tables->open_type= OT_BASE_ONLY;      /* Ignore temporary tables. */
            }
          }
    break;

  case 1835:

/* Line 1455 of yacc.c  */
#line 12159 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1836:

/* Line 1455 of yacc.c  */
#line 12164 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_ERROR_LOG; }
    break;

  case 1837:

/* Line 1455 of yacc.c  */
#line 12166 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_ENGINE_LOG; }
    break;

  case 1838:

/* Line 1455 of yacc.c  */
#line 12168 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_GENERAL_LOG; }
    break;

  case 1839:

/* Line 1455 of yacc.c  */
#line 12170 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_SLOW_LOG; }
    break;

  case 1840:

/* Line 1455 of yacc.c  */
#line 12172 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_BINARY_LOG; }
    break;

  case 1841:

/* Line 1455 of yacc.c  */
#line 12174 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->type & REFRESH_RELAY_LOG)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "FLUSH", "RELAY LOGS");
              MYSQL_YYABORT;
	    }
            lex->type|= REFRESH_RELAY_LOG;
            lex->relay_log_connection_name= lex->mi.connection_name;
           }
    break;

  case 1842:

/* Line 1455 of yacc.c  */
#line 12185 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_QUERY_CACHE_FREE; }
    break;

  case 1843:

/* Line 1455 of yacc.c  */
#line 12187 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_HOSTS; }
    break;

  case 1844:

/* Line 1455 of yacc.c  */
#line 12189 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_GRANT; }
    break;

  case 1845:

/* Line 1455 of yacc.c  */
#line 12191 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->type|= REFRESH_LOG;
            Lex->relay_log_connection_name.str= (char*) "";
            Lex->relay_log_connection_name.length= 0;
          }
    break;

  case 1846:

/* Line 1455 of yacc.c  */
#line 12197 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_STATUS; }
    break;

  case 1847:

/* Line 1455 of yacc.c  */
#line 12199 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            LEX *lex= Lex;
            if (lex->type & REFRESH_SLAVE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "FLUSH","SLAVE");
              MYSQL_YYABORT;
	    }
            lex->type|= REFRESH_SLAVE;
            lex->reset_slave_info.all= false;
          }
    break;

  case 1848:

/* Line 1455 of yacc.c  */
#line 12210 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_CLIENT_STATS; }
    break;

  case 1849:

/* Line 1455 of yacc.c  */
#line 12212 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_USER_STATS; }
    break;

  case 1850:

/* Line 1455 of yacc.c  */
#line 12214 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_TABLE_STATS; }
    break;

  case 1851:

/* Line 1455 of yacc.c  */
#line 12216 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_INDEX_STATS; }
    break;

  case 1852:

/* Line 1455 of yacc.c  */
#line 12218 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_MASTER; }
    break;

  case 1853:

/* Line 1455 of yacc.c  */
#line 12220 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_DES_KEY_FILE; }
    break;

  case 1854:

/* Line 1455 of yacc.c  */
#line 12222 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_USER_RESOURCES; }
    break;

  case 1855:

/* Line 1455 of yacc.c  */
#line 12226 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1856:

/* Line 1455 of yacc.c  */
#line 12227 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1857:

/* Line 1455 of yacc.c  */
#line 12231 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {(yyval.num)= 0;}
    break;

  case 1858:

/* Line 1455 of yacc.c  */
#line 12232 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {(yyval.num)= REFRESH_CHECKPOINT; }
    break;

  case 1859:

/* Line 1455 of yacc.c  */
#line 12236 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_RESET; lex->type=0;
          }
    break;

  case 1860:

/* Line 1455 of yacc.c  */
#line 12241 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1863:

/* Line 1455 of yacc.c  */
#line 12250 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_SLAVE; }
    break;

  case 1864:

/* Line 1455 of yacc.c  */
#line 12252 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { }
    break;

  case 1865:

/* Line 1455 of yacc.c  */
#line 12253 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_MASTER; }
    break;

  case 1866:

/* Line 1455 of yacc.c  */
#line 12254 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_QUERY_CACHE;}
    break;

  case 1867:

/* Line 1455 of yacc.c  */
#line 12258 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->reset_slave_info.all= false; }
    break;

  case 1868:

/* Line 1455 of yacc.c  */
#line 12259 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->reset_slave_info.all= true; }
    break;

  case 1869:

/* Line 1455 of yacc.c  */
#line 12264 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type=0;
            lex->sql_command = SQLCOM_PURGE;
          }
    break;

  case 1870:

/* Line 1455 of yacc.c  */
#line 12270 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1872:

/* Line 1455 of yacc.c  */
#line 12279 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->to_log = (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 1873:

/* Line 1455 of yacc.c  */
#line 12283 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->value_list.empty();
            lex->value_list.push_front((yyvsp[(2) - (2)].item));
            lex->sql_command= SQLCOM_PURGE_BEFORE;
          }
    break;

  case 1874:

/* Line 1455 of yacc.c  */
#line 12295 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->value_list.empty();
            lex->users_list.empty();
            lex->sql_command= SQLCOM_KILL;
          }
    break;

  case 1875:

/* Line 1455 of yacc.c  */
#line 12302 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->kill_signal= (killed_state) ((yyvsp[(3) - (5)].num) | (yyvsp[(4) - (5)].num));
          }
    break;

  case 1876:

/* Line 1455 of yacc.c  */
#line 12308 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= (int) KILL_HARD_BIT; }
    break;

  case 1877:

/* Line 1455 of yacc.c  */
#line 12309 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= (int) KILL_HARD_BIT; }
    break;

  case 1878:

/* Line 1455 of yacc.c  */
#line 12310 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1879:

/* Line 1455 of yacc.c  */
#line 12313 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= (int) KILL_CONNECTION; }
    break;

  case 1880:

/* Line 1455 of yacc.c  */
#line 12314 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= (int) KILL_CONNECTION; }
    break;

  case 1881:

/* Line 1455 of yacc.c  */
#line 12315 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= (int) KILL_QUERY; }
    break;

  case 1882:

/* Line 1455 of yacc.c  */
#line 12320 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
          Lex->value_list.push_front((yyval.item));
          Lex->kill_type= KILL_TYPE_ID;
         }
    break;

  case 1883:

/* Line 1455 of yacc.c  */
#line 12325 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->users_list.push_back((yyvsp[(2) - (2)].lex_user));
            Lex->kill_type= KILL_TYPE_USER;
          }
    break;

  case 1884:

/* Line 1455 of yacc.c  */
#line 12335 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_CHANGE_DB;
            lex->select_lex.db= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 1885:

/* Line 1455 of yacc.c  */
#line 12346 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), 
                       (yyvsp[(2) - (2)].filetype) == FILETYPE_CSV ? "LOAD DATA" : "LOAD XML");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1886:

/* Line 1455 of yacc.c  */
#line 12358 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_LOAD;
            lex->local_file=  (yyvsp[(5) - (7)].num);
            lex->duplicates= DUP_ERROR;
            lex->ignore= 0;
            if (!(lex->exchange= new sql_exchange((yyvsp[(7) - (7)].lex_str).str, 0, (yyvsp[(2) - (7)].filetype))))
              MYSQL_YYABORT;
          }
    break;

  case 1887:

/* Line 1455 of yacc.c  */
#line 12368 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(12) - (12)].table), NULL, TL_OPTION_UPDATING,
                                           (yyvsp[(4) - (12)].lock_type), MDL_SHARED_WRITE))
              MYSQL_YYABORT;
            lex->field_list.empty();
            lex->update_list.empty();
            lex->value_list.empty();
          }
    break;

  case 1888:

/* Line 1455 of yacc.c  */
#line 12378 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->exchange->cs= (yyvsp[(14) - (14)].charset); }
    break;

  case 1889:

/* Line 1455 of yacc.c  */
#line 12382 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1890:

/* Line 1455 of yacc.c  */
#line 12386 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.filetype)= FILETYPE_CSV; }
    break;

  case 1891:

/* Line 1455 of yacc.c  */
#line 12387 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.filetype)= FILETYPE_XML; }
    break;

  case 1892:

/* Line 1455 of yacc.c  */
#line 12391 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=0;}
    break;

  case 1893:

/* Line 1455 of yacc.c  */
#line 12392 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=1;}
    break;

  case 1894:

/* Line 1455 of yacc.c  */
#line 12396 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_DEFAULT; }
    break;

  case 1895:

/* Line 1455 of yacc.c  */
#line 12398 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              Ignore this option in SP to avoid problem with query cache and
              triggers with non default priority locks
            */
            (yyval.lock_type)= (Lex->sphead ? TL_WRITE_DEFAULT : TL_WRITE_CONCURRENT_INSERT);
          }
    break;

  case 1896:

/* Line 1455 of yacc.c  */
#line 12405 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1897:

/* Line 1455 of yacc.c  */
#line 12409 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->duplicates=DUP_ERROR; }
    break;

  case 1898:

/* Line 1455 of yacc.c  */
#line 12410 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->duplicates=DUP_REPLACE; }
    break;

  case 1899:

/* Line 1455 of yacc.c  */
#line 12411 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ignore= 1; }
    break;

  case 1904:

/* Line 1455 of yacc.c  */
#line 12426 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->field_term= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1905:

/* Line 1455 of yacc.c  */
#line 12431 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            DBUG_ASSERT(lex->exchange != 0);
            lex->exchange->enclosed= (yyvsp[(4) - (4)].string);
            lex->exchange->opt_enclosed= 1;
          }
    break;

  case 1906:

/* Line 1455 of yacc.c  */
#line 12438 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->enclosed= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1907:

/* Line 1455 of yacc.c  */
#line 12443 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->escaped= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1912:

/* Line 1455 of yacc.c  */
#line 12461 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->line_term= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1913:

/* Line 1455 of yacc.c  */
#line 12466 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->line_start= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1914:

/* Line 1455 of yacc.c  */
#line 12473 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { }
    break;

  case 1915:

/* Line 1455 of yacc.c  */
#line 12475 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->exchange->line_term = (yyvsp[(4) - (4)].string); }
    break;

  case 1917:

/* Line 1455 of yacc.c  */
#line 12480 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->skip_lines= atol((yyvsp[(2) - (3)].lex_str).str);
          }
    break;

  case 1918:

/* Line 1455 of yacc.c  */
#line 12487 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { }
    break;

  case 1919:

/* Line 1455 of yacc.c  */
#line 12489 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { }
    break;

  case 1920:

/* Line 1455 of yacc.c  */
#line 12493 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1921:

/* Line 1455 of yacc.c  */
#line 12494 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1922:

/* Line 1455 of yacc.c  */
#line 12495 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1923:

/* Line 1455 of yacc.c  */
#line 12500 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(3) - (3)].item)); }
    break;

  case 1924:

/* Line 1455 of yacc.c  */
#line 12502 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(1) - (1)].item)); }
    break;

  case 1925:

/* Line 1455 of yacc.c  */
#line 12506 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {(yyval.item)= (yyvsp[(1) - (1)].item);}
    break;

  case 1926:

/* Line 1455 of yacc.c  */
#line 12508 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_user_var_as_out_param((yyvsp[(2) - (2)].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1927:

/* Line 1455 of yacc.c  */
#line 12516 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1928:

/* Line 1455 of yacc.c  */
#line 12517 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1931:

/* Line 1455 of yacc.c  */
#line 12527 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->update_list.push_back((yyvsp[(1) - (5)].item)) || 
                lex->value_list.push_back((yyvsp[(4) - (5)].item)))
                MYSQL_YYABORT;
            (yyvsp[(4) - (5)].item)->set_name_no_truncate((yyvsp[(3) - (5)].simple_string), (uint) ((yyvsp[(5) - (5)].simple_string) - (yyvsp[(3) - (5)].simple_string)), YYTHD->charset());
          }
    break;

  case 1932:

/* Line 1455 of yacc.c  */
#line 12540 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX_STRING tmp;
            THD *thd= YYTHD;
            CHARSET_INFO *cs_con= thd->variables.collation_connection;
            CHARSET_INFO *cs_cli= thd->variables.character_set_client;
            uint repertoire= thd->lex->text_string_is_7bit &&
                             my_charset_is_ascii_based(cs_cli) ?
                             MY_REPERTOIRE_ASCII : MY_REPERTOIRE_UNICODE30;
            if (thd->charset_is_collation_connection ||
                (repertoire == MY_REPERTOIRE_ASCII &&
                 my_charset_is_ascii_based(cs_con)))
              tmp= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&tmp, cs_con, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, cs_cli))
                MYSQL_YYABORT;
            }
            (yyval.item)= new (thd->mem_root) Item_string(tmp.str, tmp.length, cs_con,
                                                DERIVATION_COERCIBLE,
                                                repertoire);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1933:

/* Line 1455 of yacc.c  */
#line 12564 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            uint repertoire= Lex->text_string_is_7bit ?
                             MY_REPERTOIRE_ASCII : MY_REPERTOIRE_UNICODE30;
            DBUG_ASSERT(my_charset_is_ascii_based(national_charset_info));
            (yyval.item)= new (YYTHD->mem_root) Item_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length,
                                                  national_charset_info,
                                                  DERIVATION_COERCIBLE,
                                                  repertoire);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1934:

/* Line 1455 of yacc.c  */
#line 12576 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item_string *str= new (YYTHD->mem_root) Item_string((yyvsp[(2) - (2)].lex_str).str,
                                                                (yyvsp[(2) - (2)].lex_str).length, (yyvsp[(1) - (2)].charset));
            if (str == NULL)
              MYSQL_YYABORT;
            str->set_repertoire_from_value();
            str->set_cs_specified(TRUE);

            (yyval.item)= str;
          }
    break;

  case 1935:

/* Line 1455 of yacc.c  */
#line 12587 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item_string* item= (Item_string*) (yyvsp[(1) - (2)].item);
            item->append((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (!(item->collation.repertoire & MY_REPERTOIRE_EXTENDED))
            {
              /*
                 If the string has been pure ASCII so far,
                 check the new part.
              */
              CHARSET_INFO *cs= YYTHD->variables.collation_connection;
              item->collation.repertoire|= my_string_repertoire(cs,
                                                                (yyvsp[(2) - (2)].lex_str).str,
                                                                (yyvsp[(2) - (2)].lex_str).length);
            }
          }
    break;

  case 1936:

/* Line 1455 of yacc.c  */
#line 12606 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.string)= new (YYTHD->mem_root) String((yyvsp[(1) - (1)].lex_str).str,
                                             (yyvsp[(1) - (1)].lex_str).length,
                                             YYTHD->variables.collation_connection);
            if ((yyval.string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1937:

/* Line 1455 of yacc.c  */
#line 12614 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_hex_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fields, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            (yyval.string)= tmp->val_str((String*) 0);
          }
    break;

  case 1938:

/* Line 1455 of yacc.c  */
#line 12626 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_bin_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fields, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            (yyval.string)= tmp->val_str((String*) 0);
          }
    break;

  case 1939:

/* Line 1455 of yacc.c  */
#line 12641 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            Item_param *item;
            if (! lex->parsing_options.allows_variable)
            {
              my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
              MYSQL_YYABORT;
            }
            item= new (thd->mem_root) Item_param((uint) (lip->get_tok_start() - thd->query()));
            if (!((yyval.item)= item) || lex->param_list.push_back(item))
            {
              my_message(ER_OUT_OF_RESOURCES, ER(ER_OUT_OF_RESOURCES), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1940:

/* Line 1455 of yacc.c  */
#line 12661 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item); }
    break;

  case 1941:

/* Line 1455 of yacc.c  */
#line 12662 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item_num); }
    break;

  case 1942:

/* Line 1455 of yacc.c  */
#line 12664 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyvsp[(2) - (2)].item_num)->max_length++;
            (yyval.item)= (yyvsp[(2) - (2)].item_num)->neg();
          }
    break;

  case 1943:

/* Line 1455 of yacc.c  */
#line 12671 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item); }
    break;

  case 1944:

/* Line 1455 of yacc.c  */
#line 12672 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item_num); }
    break;

  case 1945:

/* Line 1455 of yacc.c  */
#line 12674 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_null();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            YYLIP->next_state= MY_LEX_OPERATOR_OR_IDENT;
          }
    break;

  case 1946:

/* Line 1455 of yacc.c  */
#line 12681 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_int((char*) "FALSE",0,1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1947:

/* Line 1455 of yacc.c  */
#line 12687 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_int((char*) "TRUE",1,1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1948:

/* Line 1455 of yacc.c  */
#line 12693 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_hex_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1949:

/* Line 1455 of yacc.c  */
#line 12699 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_bin_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1950:

/* Line 1455 of yacc.c  */
#line 12705 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_hex_string((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fieds, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            String *str= tmp->val_str((String*) 0);

            Item_string *item_str;
            item_str= new (YYTHD->mem_root)
                        Item_string(NULL, /* name will be set in select_item */
                                    str ? str->ptr() : "",
                                    str ? str->length() : 0,
                                    (yyvsp[(1) - (2)].charset));
            if (!item_str ||
                !item_str->check_well_formed_result(&item_str->str_value, TRUE))
            {
              MYSQL_YYABORT;
            }

            item_str->set_repertoire_from_value();
            item_str->set_cs_specified(TRUE);

            (yyval.item)= item_str;
          }
    break;

  case 1951:

/* Line 1455 of yacc.c  */
#line 12734 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_bin_string((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fieds, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            String *str= tmp->val_str((String*) 0);

            Item_string *item_str;
            item_str= new (YYTHD->mem_root)
                        Item_string(NULL, /* name will be set in select_item */
                                    str ? str->ptr() : "",
                                    str ? str->length() : 0,
                                    (yyvsp[(1) - (2)].charset));
            if (!item_str ||
                !item_str->check_well_formed_result(&item_str->str_value, TRUE))
            {
              MYSQL_YYABORT;
            }

            item_str->set_cs_specified(TRUE);

            (yyval.item)= item_str;
          }
    break;

  case 1952:

/* Line 1455 of yacc.c  */
#line 12761 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item); }
    break;

  case 1953:

/* Line 1455 of yacc.c  */
#line 12762 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item); }
    break;

  case 1954:

/* Line 1455 of yacc.c  */
#line 12763 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item); }
    break;

  case 1955:

/* Line 1455 of yacc.c  */
#line 12768 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            int error;
            (yyval.item_num)= new (YYTHD->mem_root)
                  Item_int((yyvsp[(1) - (1)].lex_str).str,
                           (longlong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, NULL, &error),
                           (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1956:

/* Line 1455 of yacc.c  */
#line 12778 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            int error;
            (yyval.item_num)= new (YYTHD->mem_root)
                  Item_int((yyvsp[(1) - (1)].lex_str).str,
                           (longlong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, NULL, &error),
                           (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1957:

/* Line 1455 of yacc.c  */
#line 12788 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item_num)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1958:

/* Line 1455 of yacc.c  */
#line 12794 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item_num)= new (YYTHD->mem_root) Item_decimal((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length,
                                                   YYTHD->charset());
            if (((yyval.item_num) == NULL) || (YYTHD->is_error()))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1959:

/* Line 1455 of yacc.c  */
#line 12803 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item_num)= new (YYTHD->mem_root) Item_float((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (((yyval.item_num) == NULL) || (YYTHD->is_error()))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1960:

/* Line 1455 of yacc.c  */
#line 12817 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 1961:

/* Line 1455 of yacc.c  */
#line 12818 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 1962:

/* Line 1455 of yacc.c  */
#line 12823 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            (yyval.item)= new (YYTHD->mem_root) Item_field(Lex->current_context(),
                                                 NullS, (yyvsp[(1) - (3)].lex_str).str, "*");
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            sel->with_wild++;
          }
    break;

  case 1963:

/* Line 1455 of yacc.c  */
#line 12832 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            SELECT_LEX *sel= Select;
            const char* schema= thd->client_capabilities & CLIENT_NO_SCHEMA ?
                                  NullS : (yyvsp[(1) - (5)].lex_str).str;
            (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                               schema,
                                               (yyvsp[(3) - (5)].lex_str).str,"*");
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            sel->with_wild++;
          }
    break;

  case 1964:

/* Line 1455 of yacc.c  */
#line 12847 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 1965:

/* Line 1455 of yacc.c  */
#line 12852 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_variable_t *spv;
            sp_pcontext *spc = lex->spcont;
            if (spc && (spv = spc->find_variable(&(yyvsp[(1) - (1)].lex_str))))
            {
              /* We're compiling a stored procedure and found a variable */
              if (! lex->parsing_options.allows_variable)
              {
                my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
                MYSQL_YYABORT;
              }

              Item_splocal *splocal;
              splocal= new (thd->mem_root)
                         Item_splocal((yyvsp[(1) - (1)].lex_str), spv->offset, spv->type,
                                      lip->get_tok_start_prev() - lex->sphead->m_tmp_query,
                                      lip->get_tok_end() - lip->get_tok_start_prev());
              if (splocal == NULL)
                MYSQL_YYABORT;
#ifndef DBUG_OFF
              splocal->m_sp= lex->sphead;
#endif
              (yyval.item)= splocal;
              lex->safe_to_cache_query=0;
            }
            else
            {
              SELECT_LEX *sel=Select;
              if ((sel->parsing_place != IN_HAVING) ||
                  (sel->get_in_sum_expr() > 0))
              {
                (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                   NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
              }
              else
              {
                (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                                 NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
              }
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1966:

/* Line 1455 of yacc.c  */
#line 12898 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 1967:

/* Line 1455 of yacc.c  */
#line 12903 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            SELECT_LEX *sel=Select;
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                               NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1968:

/* Line 1455 of yacc.c  */
#line 12920 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 1969:

/* Line 1455 of yacc.c  */
#line 12925 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            /*
              FIXME This will work ok in simple_ident_nospvar case because
              we can't meet simple_ident_nospvar in trigger now. But it
              should be changed in future.
            */
            if (lex->sphead && lex->sphead->m_type == TYPE_ENUM_TRIGGER &&
                (!my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "NEW") ||
                 !my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "OLD")))
            {
              Item_trigger_field *trg_fld;
              bool new_row= ((yyvsp[(1) - (3)].lex_str).str[0]=='N' || (yyvsp[(1) - (3)].lex_str).str[0]=='n');

              if (lex->trg_chistics.event == TRG_EVENT_INSERT &&
                  !new_row)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0), "OLD", "on INSERT");
                MYSQL_YYABORT;
              }

              if (lex->trg_chistics.event == TRG_EVENT_DELETE &&
                  new_row)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0), "NEW", "on DELETE");
                MYSQL_YYABORT;
              }

              DBUG_ASSERT(!new_row ||
                          (lex->trg_chistics.event == TRG_EVENT_INSERT ||
                           lex->trg_chistics.event == TRG_EVENT_UPDATE));
              const bool read_only=
                !(new_row && lex->trg_chistics.action_time == TRG_ACTION_BEFORE);
              trg_fld= new (thd->mem_root)
                         Item_trigger_field(Lex->current_context(),
                                            new_row ?
                                              Item_trigger_field::NEW_ROW:
                                              Item_trigger_field::OLD_ROW,
                                            (yyvsp[(3) - (3)].lex_str).str,
                                            SELECT_ACL,
                                            read_only);
              if (trg_fld == NULL)
                MYSQL_YYABORT;

              /*
                Let us add this item to list of all Item_trigger_field objects
                in trigger.
              */
              lex->trg_table_fields.link_in_list(trg_fld,
                                                 &trg_fld->next_trg_field);

              (yyval.item)= trg_fld;
            }
            else
            {
              SELECT_LEX *sel= lex->current_select;
              if (sel->no_table_names_allowed)
              {
                my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                         MYF(0), (yyvsp[(1) - (3)].lex_str).str, thd->where);
              }
              if ((sel->parsing_place != IN_HAVING) ||
                  (sel->get_in_sum_expr() > 0))
              {
                (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                   NullS, (yyvsp[(1) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).str);
              }
              else
              {
                (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                                 NullS, (yyvsp[(1) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).str);
              }
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1970:

/* Line 1455 of yacc.c  */
#line 13004 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->no_table_names_allowed)
            {
              my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                       MYF(0), (yyvsp[(2) - (4)].lex_str).str, thd->where);
            }
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 NullS, (yyvsp[(2) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).str);

            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                               NullS, (yyvsp[(2) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1971:

/* Line 1455 of yacc.c  */
#line 13029 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            SELECT_LEX *sel= lex->current_select;
            const char* schema= (thd->client_capabilities & CLIENT_NO_SCHEMA ?
                                 NullS : (yyvsp[(1) - (5)].lex_str).str);
            if (sel->no_table_names_allowed)
            {
              my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                       MYF(0), (yyvsp[(3) - (5)].lex_str).str, thd->where);
            }
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 schema,
                                                 (yyvsp[(3) - (5)].lex_str).str, (yyvsp[(5) - (5)].lex_str).str);
            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                               schema,
                                               (yyvsp[(3) - (5)].lex_str).str, (yyvsp[(5) - (5)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1972:

/* Line 1455 of yacc.c  */
#line 13059 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 1973:

/* Line 1455 of yacc.c  */
#line 13061 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            TABLE_LIST *table= Select->table_list.first;
            if (my_strcasecmp(table_alias_charset, (yyvsp[(1) - (5)].lex_str).str, table->db))
            {
              my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[(1) - (5)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (my_strcasecmp(table_alias_charset, (yyvsp[(3) - (5)].lex_str).str,
                              table->table_name))
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(3) - (5)].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.lex_str)=(yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 1974:

/* Line 1455 of yacc.c  */
#line 13077 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            TABLE_LIST *table= Select->table_list.first;
            if (my_strcasecmp(table_alias_charset, (yyvsp[(1) - (3)].lex_str).str, table->alias))
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(1) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.lex_str)=(yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 1975:

/* Line 1455 of yacc.c  */
#line 13086 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str);}
    break;

  case 1976:

/* Line 1455 of yacc.c  */
#line 13091 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.table)= new Table_ident((yyvsp[(1) - (1)].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1977:

/* Line 1455 of yacc.c  */
#line 13097 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.table)= new Table_ident(YYTHD, (yyvsp[(1) - (3)].lex_str),(yyvsp[(3) - (3)].lex_str),0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1978:

/* Line 1455 of yacc.c  */
#line 13103 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* For Delphi */
            (yyval.table)= new Table_ident((yyvsp[(2) - (2)].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1979:

/* Line 1455 of yacc.c  */
#line 13113 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.table)= new Table_ident((yyvsp[(1) - (2)].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1980:

/* Line 1455 of yacc.c  */
#line 13119 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.table)= new Table_ident(YYTHD, (yyvsp[(1) - (4)].lex_str),(yyvsp[(3) - (4)].lex_str),0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1981:

/* Line 1455 of yacc.c  */
#line 13128 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX_STRING db={(char*) any_db,3};
            (yyval.table)= new Table_ident(YYTHD, db,(yyvsp[(1) - (1)].lex_str),0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1982:

/* Line 1455 of yacc.c  */
#line 13137 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 1983:

/* Line 1455 of yacc.c  */
#line 13139 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_system_charset)
            {
              CHARSET_INFO *cs= system_charset_info;
              int dummy_error;
              uint wlen= cs->cset->well_formed_len(cs, (yyvsp[(1) - (1)].lex_str).str,
                                                   (yyvsp[(1) - (1)].lex_str).str+(yyvsp[(1) - (1)].lex_str).length,
                                                   (yyvsp[(1) - (1)].lex_str).length, &dummy_error);
              if (wlen < (yyvsp[(1) - (1)].lex_str).length)
              {
                ErrConvString err((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, &my_charset_bin);
                my_error(ER_INVALID_CHARACTER_STRING, MYF(0),
                         cs->csname, err.ptr());
                MYSQL_YYABORT;
              }
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            }
            else
            {
              if (thd->convert_string(&(yyval.lex_str), system_charset_info,
                                  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1984:

/* Line 1455 of yacc.c  */
#line 13169 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_system_charset)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str), system_charset_info,
                                  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1985:

/* Line 1455 of yacc.c  */
#line 13185 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_collation_connection)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str), thd->variables.collation_connection,
                                  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            } 
          }
    break;

  case 1986:

/* Line 1455 of yacc.c  */
#line 13201 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_character_set_filesystem)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str),
                                      thd->variables.character_set_filesystem,
                                      (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1987:

/* Line 1455 of yacc.c  */
#line 13217 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1988:

/* Line 1455 of yacc.c  */
#line 13219 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            (yyval.lex_str).str= thd->strmake((yyvsp[(1) - (1)].symbol).str, (yyvsp[(1) - (1)].symbol).length);
            if ((yyval.lex_str).str == NULL)
              MYSQL_YYABORT;
            (yyval.lex_str).length= (yyvsp[(1) - (1)].symbol).length;
          }
    break;

  case 1989:

/* Line 1455 of yacc.c  */
#line 13229 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1990:

/* Line 1455 of yacc.c  */
#line 13231 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            (yyval.lex_str).str= thd->strmake((yyvsp[(1) - (1)].symbol).str, (yyvsp[(1) - (1)].symbol).length);
            if ((yyval.lex_str).str == NULL)
              MYSQL_YYABORT;
            (yyval.lex_str).length= (yyvsp[(1) - (1)].symbol).length;
          }
    break;

  case 1991:

/* Line 1455 of yacc.c  */
#line 13241 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 1992:

/* Line 1455 of yacc.c  */
#line 13242 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 1993:

/* Line 1455 of yacc.c  */
#line 13243 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 1994:

/* Line 1455 of yacc.c  */
#line 13248 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            if (!((yyval.lex_user)=(LEX_USER*) thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user = (yyvsp[(1) - (1)].lex_str);
            (yyval.lex_user)->host.str= (char *) "%";
            (yyval.lex_user)->host.length= 1;
            (yyval.lex_user)->password= null_lex_str; 
            (yyval.lex_user)->plugin= empty_lex_str;
            (yyval.lex_user)->auth= empty_lex_str;

            if (check_string_char_length(&(yyval.lex_user)->user, ER(ER_USERNAME),
                                         USERNAME_CHAR_LENGTH,
                                         system_charset_info, 0))
              MYSQL_YYABORT;
          }
    break;

  case 1995:

/* Line 1455 of yacc.c  */
#line 13265 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            if (!((yyval.lex_user)=(LEX_USER*) thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user = (yyvsp[(1) - (3)].lex_str); (yyval.lex_user)->host=(yyvsp[(3) - (3)].lex_str);
            (yyval.lex_user)->password= null_lex_str; 
            (yyval.lex_user)->plugin= empty_lex_str;
            (yyval.lex_user)->auth= empty_lex_str;

            if (check_string_char_length(&(yyval.lex_user)->user, ER(ER_USERNAME),
                                         USERNAME_CHAR_LENGTH,
                                         system_charset_info, 0) ||
                check_host_name(&(yyval.lex_user)->host))
              MYSQL_YYABORT;
            /*
              Convert hostname part of username to lowercase.
              It's OK to use in-place lowercase as long as
              the character set is utf8.
            */
            my_casedn_str(system_charset_info, (yyval.lex_user)->host.str);
          }
    break;

  case 1996:

/* Line 1455 of yacc.c  */
#line 13287 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!((yyval.lex_user)=(LEX_USER*) YYTHD->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            /* 
              empty LEX_USER means current_user and 
              will be handled in the  get_current_user() function
              later
            */
            bzero((yyval.lex_user), sizeof(LEX_USER));
          }
    break;

  case 1997:

/* Line 1455 of yacc.c  */
#line 13301 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1998:

/* Line 1455 of yacc.c  */
#line 13302 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1999:

/* Line 1455 of yacc.c  */
#line 13303 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2000:

/* Line 1455 of yacc.c  */
#line 13304 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2001:

/* Line 1455 of yacc.c  */
#line 13305 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2002:

/* Line 1455 of yacc.c  */
#line 13306 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2003:

/* Line 1455 of yacc.c  */
#line 13307 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2004:

/* Line 1455 of yacc.c  */
#line 13308 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2005:

/* Line 1455 of yacc.c  */
#line 13309 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2006:

/* Line 1455 of yacc.c  */
#line 13310 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2007:

/* Line 1455 of yacc.c  */
#line 13311 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2008:

/* Line 1455 of yacc.c  */
#line 13312 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2009:

/* Line 1455 of yacc.c  */
#line 13313 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2010:

/* Line 1455 of yacc.c  */
#line 13314 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2011:

/* Line 1455 of yacc.c  */
#line 13315 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2012:

/* Line 1455 of yacc.c  */
#line 13316 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2013:

/* Line 1455 of yacc.c  */
#line 13317 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2014:

/* Line 1455 of yacc.c  */
#line 13318 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2015:

/* Line 1455 of yacc.c  */
#line 13319 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2016:

/* Line 1455 of yacc.c  */
#line 13320 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2017:

/* Line 1455 of yacc.c  */
#line 13321 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2018:

/* Line 1455 of yacc.c  */
#line 13322 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2019:

/* Line 1455 of yacc.c  */
#line 13323 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2020:

/* Line 1455 of yacc.c  */
#line 13324 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2021:

/* Line 1455 of yacc.c  */
#line 13325 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2022:

/* Line 1455 of yacc.c  */
#line 13326 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2023:

/* Line 1455 of yacc.c  */
#line 13327 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2024:

/* Line 1455 of yacc.c  */
#line 13328 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2025:

/* Line 1455 of yacc.c  */
#line 13329 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2026:

/* Line 1455 of yacc.c  */
#line 13330 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2027:

/* Line 1455 of yacc.c  */
#line 13331 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2028:

/* Line 1455 of yacc.c  */
#line 13332 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2029:

/* Line 1455 of yacc.c  */
#line 13333 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2030:

/* Line 1455 of yacc.c  */
#line 13334 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2031:

/* Line 1455 of yacc.c  */
#line 13335 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2032:

/* Line 1455 of yacc.c  */
#line 13336 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2033:

/* Line 1455 of yacc.c  */
#line 13337 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2034:

/* Line 1455 of yacc.c  */
#line 13338 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2035:

/* Line 1455 of yacc.c  */
#line 13339 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2036:

/* Line 1455 of yacc.c  */
#line 13340 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2037:

/* Line 1455 of yacc.c  */
#line 13341 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2038:

/* Line 1455 of yacc.c  */
#line 13342 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2039:

/* Line 1455 of yacc.c  */
#line 13343 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2040:

/* Line 1455 of yacc.c  */
#line 13344 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2041:

/* Line 1455 of yacc.c  */
#line 13345 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2042:

/* Line 1455 of yacc.c  */
#line 13346 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2043:

/* Line 1455 of yacc.c  */
#line 13347 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2044:

/* Line 1455 of yacc.c  */
#line 13348 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2045:

/* Line 1455 of yacc.c  */
#line 13349 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2046:

/* Line 1455 of yacc.c  */
#line 13350 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2047:

/* Line 1455 of yacc.c  */
#line 13351 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2048:

/* Line 1455 of yacc.c  */
#line 13352 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2049:

/* Line 1455 of yacc.c  */
#line 13353 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2050:

/* Line 1455 of yacc.c  */
#line 13354 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2051:

/* Line 1455 of yacc.c  */
#line 13355 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2052:

/* Line 1455 of yacc.c  */
#line 13356 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2053:

/* Line 1455 of yacc.c  */
#line 13357 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2054:

/* Line 1455 of yacc.c  */
#line 13358 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2055:

/* Line 1455 of yacc.c  */
#line 13359 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2056:

/* Line 1455 of yacc.c  */
#line 13369 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2057:

/* Line 1455 of yacc.c  */
#line 13370 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2058:

/* Line 1455 of yacc.c  */
#line 13371 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2059:

/* Line 1455 of yacc.c  */
#line 13372 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2060:

/* Line 1455 of yacc.c  */
#line 13373 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2061:

/* Line 1455 of yacc.c  */
#line 13374 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2062:

/* Line 1455 of yacc.c  */
#line 13375 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2063:

/* Line 1455 of yacc.c  */
#line 13376 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2064:

/* Line 1455 of yacc.c  */
#line 13377 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2065:

/* Line 1455 of yacc.c  */
#line 13378 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2066:

/* Line 1455 of yacc.c  */
#line 13379 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2067:

/* Line 1455 of yacc.c  */
#line 13380 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2068:

/* Line 1455 of yacc.c  */
#line 13381 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2069:

/* Line 1455 of yacc.c  */
#line 13382 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2070:

/* Line 1455 of yacc.c  */
#line 13383 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2071:

/* Line 1455 of yacc.c  */
#line 13384 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2072:

/* Line 1455 of yacc.c  */
#line 13385 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2073:

/* Line 1455 of yacc.c  */
#line 13386 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2074:

/* Line 1455 of yacc.c  */
#line 13387 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2075:

/* Line 1455 of yacc.c  */
#line 13388 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2076:

/* Line 1455 of yacc.c  */
#line 13389 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2077:

/* Line 1455 of yacc.c  */
#line 13390 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2078:

/* Line 1455 of yacc.c  */
#line 13391 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2079:

/* Line 1455 of yacc.c  */
#line 13392 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2080:

/* Line 1455 of yacc.c  */
#line 13393 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2081:

/* Line 1455 of yacc.c  */
#line 13394 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2082:

/* Line 1455 of yacc.c  */
#line 13395 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2083:

/* Line 1455 of yacc.c  */
#line 13396 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2084:

/* Line 1455 of yacc.c  */
#line 13397 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2085:

/* Line 1455 of yacc.c  */
#line 13398 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2086:

/* Line 1455 of yacc.c  */
#line 13399 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2087:

/* Line 1455 of yacc.c  */
#line 13400 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2088:

/* Line 1455 of yacc.c  */
#line 13401 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2089:

/* Line 1455 of yacc.c  */
#line 13402 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2090:

/* Line 1455 of yacc.c  */
#line 13403 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2091:

/* Line 1455 of yacc.c  */
#line 13404 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2092:

/* Line 1455 of yacc.c  */
#line 13405 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2093:

/* Line 1455 of yacc.c  */
#line 13406 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2094:

/* Line 1455 of yacc.c  */
#line 13407 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2095:

/* Line 1455 of yacc.c  */
#line 13408 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2096:

/* Line 1455 of yacc.c  */
#line 13409 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2097:

/* Line 1455 of yacc.c  */
#line 13410 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2098:

/* Line 1455 of yacc.c  */
#line 13411 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2099:

/* Line 1455 of yacc.c  */
#line 13412 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2100:

/* Line 1455 of yacc.c  */
#line 13413 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2101:

/* Line 1455 of yacc.c  */
#line 13414 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2102:

/* Line 1455 of yacc.c  */
#line 13415 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2103:

/* Line 1455 of yacc.c  */
#line 13416 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2104:

/* Line 1455 of yacc.c  */
#line 13417 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2105:

/* Line 1455 of yacc.c  */
#line 13418 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2106:

/* Line 1455 of yacc.c  */
#line 13419 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2107:

/* Line 1455 of yacc.c  */
#line 13420 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2108:

/* Line 1455 of yacc.c  */
#line 13421 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2109:

/* Line 1455 of yacc.c  */
#line 13422 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2110:

/* Line 1455 of yacc.c  */
#line 13423 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2111:

/* Line 1455 of yacc.c  */
#line 13424 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2112:

/* Line 1455 of yacc.c  */
#line 13425 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2113:

/* Line 1455 of yacc.c  */
#line 13426 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2114:

/* Line 1455 of yacc.c  */
#line 13427 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2115:

/* Line 1455 of yacc.c  */
#line 13428 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2116:

/* Line 1455 of yacc.c  */
#line 13429 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2117:

/* Line 1455 of yacc.c  */
#line 13430 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2118:

/* Line 1455 of yacc.c  */
#line 13431 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2119:

/* Line 1455 of yacc.c  */
#line 13432 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2120:

/* Line 1455 of yacc.c  */
#line 13433 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2121:

/* Line 1455 of yacc.c  */
#line 13434 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2122:

/* Line 1455 of yacc.c  */
#line 13435 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2123:

/* Line 1455 of yacc.c  */
#line 13436 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2124:

/* Line 1455 of yacc.c  */
#line 13437 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2125:

/* Line 1455 of yacc.c  */
#line 13438 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2126:

/* Line 1455 of yacc.c  */
#line 13439 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2127:

/* Line 1455 of yacc.c  */
#line 13440 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2128:

/* Line 1455 of yacc.c  */
#line 13441 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2129:

/* Line 1455 of yacc.c  */
#line 13442 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2130:

/* Line 1455 of yacc.c  */
#line 13443 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2131:

/* Line 1455 of yacc.c  */
#line 13444 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2132:

/* Line 1455 of yacc.c  */
#line 13445 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2133:

/* Line 1455 of yacc.c  */
#line 13446 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2134:

/* Line 1455 of yacc.c  */
#line 13447 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2135:

/* Line 1455 of yacc.c  */
#line 13448 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2136:

/* Line 1455 of yacc.c  */
#line 13449 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2137:

/* Line 1455 of yacc.c  */
#line 13450 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2138:

/* Line 1455 of yacc.c  */
#line 13451 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2139:

/* Line 1455 of yacc.c  */
#line 13452 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2140:

/* Line 1455 of yacc.c  */
#line 13453 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2141:

/* Line 1455 of yacc.c  */
#line 13454 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2142:

/* Line 1455 of yacc.c  */
#line 13455 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2143:

/* Line 1455 of yacc.c  */
#line 13456 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2144:

/* Line 1455 of yacc.c  */
#line 13457 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2145:

/* Line 1455 of yacc.c  */
#line 13458 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2146:

/* Line 1455 of yacc.c  */
#line 13459 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2147:

/* Line 1455 of yacc.c  */
#line 13460 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2148:

/* Line 1455 of yacc.c  */
#line 13461 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2149:

/* Line 1455 of yacc.c  */
#line 13462 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2150:

/* Line 1455 of yacc.c  */
#line 13463 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2151:

/* Line 1455 of yacc.c  */
#line 13464 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2152:

/* Line 1455 of yacc.c  */
#line 13465 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2153:

/* Line 1455 of yacc.c  */
#line 13466 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2154:

/* Line 1455 of yacc.c  */
#line 13467 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2155:

/* Line 1455 of yacc.c  */
#line 13468 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2156:

/* Line 1455 of yacc.c  */
#line 13469 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2157:

/* Line 1455 of yacc.c  */
#line 13470 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2158:

/* Line 1455 of yacc.c  */
#line 13471 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2159:

/* Line 1455 of yacc.c  */
#line 13472 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2160:

/* Line 1455 of yacc.c  */
#line 13473 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2161:

/* Line 1455 of yacc.c  */
#line 13474 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2162:

/* Line 1455 of yacc.c  */
#line 13475 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2163:

/* Line 1455 of yacc.c  */
#line 13476 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2164:

/* Line 1455 of yacc.c  */
#line 13477 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2165:

/* Line 1455 of yacc.c  */
#line 13478 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2166:

/* Line 1455 of yacc.c  */
#line 13479 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2167:

/* Line 1455 of yacc.c  */
#line 13480 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2168:

/* Line 1455 of yacc.c  */
#line 13481 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2169:

/* Line 1455 of yacc.c  */
#line 13482 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2170:

/* Line 1455 of yacc.c  */
#line 13483 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2171:

/* Line 1455 of yacc.c  */
#line 13484 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2172:

/* Line 1455 of yacc.c  */
#line 13485 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2173:

/* Line 1455 of yacc.c  */
#line 13486 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2174:

/* Line 1455 of yacc.c  */
#line 13487 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2175:

/* Line 1455 of yacc.c  */
#line 13488 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2176:

/* Line 1455 of yacc.c  */
#line 13489 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2177:

/* Line 1455 of yacc.c  */
#line 13490 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2178:

/* Line 1455 of yacc.c  */
#line 13491 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2179:

/* Line 1455 of yacc.c  */
#line 13492 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2180:

/* Line 1455 of yacc.c  */
#line 13493 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2181:

/* Line 1455 of yacc.c  */
#line 13494 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2182:

/* Line 1455 of yacc.c  */
#line 13495 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2183:

/* Line 1455 of yacc.c  */
#line 13496 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2184:

/* Line 1455 of yacc.c  */
#line 13497 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2185:

/* Line 1455 of yacc.c  */
#line 13498 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2186:

/* Line 1455 of yacc.c  */
#line 13499 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2187:

/* Line 1455 of yacc.c  */
#line 13500 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2188:

/* Line 1455 of yacc.c  */
#line 13501 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2189:

/* Line 1455 of yacc.c  */
#line 13502 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2190:

/* Line 1455 of yacc.c  */
#line 13503 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2191:

/* Line 1455 of yacc.c  */
#line 13504 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2192:

/* Line 1455 of yacc.c  */
#line 13505 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2193:

/* Line 1455 of yacc.c  */
#line 13506 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2194:

/* Line 1455 of yacc.c  */
#line 13507 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2195:

/* Line 1455 of yacc.c  */
#line 13508 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2196:

/* Line 1455 of yacc.c  */
#line 13509 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2197:

/* Line 1455 of yacc.c  */
#line 13510 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2198:

/* Line 1455 of yacc.c  */
#line 13511 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2199:

/* Line 1455 of yacc.c  */
#line 13512 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2200:

/* Line 1455 of yacc.c  */
#line 13513 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2201:

/* Line 1455 of yacc.c  */
#line 13514 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2202:

/* Line 1455 of yacc.c  */
#line 13515 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2203:

/* Line 1455 of yacc.c  */
#line 13516 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2204:

/* Line 1455 of yacc.c  */
#line 13517 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2205:

/* Line 1455 of yacc.c  */
#line 13518 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2206:

/* Line 1455 of yacc.c  */
#line 13519 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2207:

/* Line 1455 of yacc.c  */
#line 13520 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2208:

/* Line 1455 of yacc.c  */
#line 13521 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2209:

/* Line 1455 of yacc.c  */
#line 13522 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2210:

/* Line 1455 of yacc.c  */
#line 13523 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2211:

/* Line 1455 of yacc.c  */
#line 13524 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2212:

/* Line 1455 of yacc.c  */
#line 13525 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2213:

/* Line 1455 of yacc.c  */
#line 13526 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2214:

/* Line 1455 of yacc.c  */
#line 13527 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2215:

/* Line 1455 of yacc.c  */
#line 13528 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2216:

/* Line 1455 of yacc.c  */
#line 13529 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2217:

/* Line 1455 of yacc.c  */
#line 13530 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2218:

/* Line 1455 of yacc.c  */
#line 13531 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2219:

/* Line 1455 of yacc.c  */
#line 13532 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2220:

/* Line 1455 of yacc.c  */
#line 13533 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2221:

/* Line 1455 of yacc.c  */
#line 13534 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2222:

/* Line 1455 of yacc.c  */
#line 13535 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2223:

/* Line 1455 of yacc.c  */
#line 13536 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2224:

/* Line 1455 of yacc.c  */
#line 13537 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2225:

/* Line 1455 of yacc.c  */
#line 13538 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2226:

/* Line 1455 of yacc.c  */
#line 13539 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2227:

/* Line 1455 of yacc.c  */
#line 13540 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2228:

/* Line 1455 of yacc.c  */
#line 13541 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2229:

/* Line 1455 of yacc.c  */
#line 13542 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2230:

/* Line 1455 of yacc.c  */
#line 13543 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2231:

/* Line 1455 of yacc.c  */
#line 13544 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2232:

/* Line 1455 of yacc.c  */
#line 13545 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2233:

/* Line 1455 of yacc.c  */
#line 13546 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2234:

/* Line 1455 of yacc.c  */
#line 13547 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2235:

/* Line 1455 of yacc.c  */
#line 13548 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2236:

/* Line 1455 of yacc.c  */
#line 13549 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2237:

/* Line 1455 of yacc.c  */
#line 13550 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2238:

/* Line 1455 of yacc.c  */
#line 13551 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2239:

/* Line 1455 of yacc.c  */
#line 13552 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2240:

/* Line 1455 of yacc.c  */
#line 13553 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2241:

/* Line 1455 of yacc.c  */
#line 13554 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2242:

/* Line 1455 of yacc.c  */
#line 13555 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2243:

/* Line 1455 of yacc.c  */
#line 13556 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2244:

/* Line 1455 of yacc.c  */
#line 13557 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2245:

/* Line 1455 of yacc.c  */
#line 13558 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2246:

/* Line 1455 of yacc.c  */
#line 13559 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2247:

/* Line 1455 of yacc.c  */
#line 13560 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2248:

/* Line 1455 of yacc.c  */
#line 13561 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2249:

/* Line 1455 of yacc.c  */
#line 13562 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2250:

/* Line 1455 of yacc.c  */
#line 13563 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2251:

/* Line 1455 of yacc.c  */
#line 13564 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2252:

/* Line 1455 of yacc.c  */
#line 13565 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2253:

/* Line 1455 of yacc.c  */
#line 13566 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2254:

/* Line 1455 of yacc.c  */
#line 13567 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2255:

/* Line 1455 of yacc.c  */
#line 13568 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2256:

/* Line 1455 of yacc.c  */
#line 13569 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2257:

/* Line 1455 of yacc.c  */
#line 13570 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2258:

/* Line 1455 of yacc.c  */
#line 13571 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2259:

/* Line 1455 of yacc.c  */
#line 13572 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2260:

/* Line 1455 of yacc.c  */
#line 13573 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2261:

/* Line 1455 of yacc.c  */
#line 13574 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2262:

/* Line 1455 of yacc.c  */
#line 13575 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2263:

/* Line 1455 of yacc.c  */
#line 13576 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2264:

/* Line 1455 of yacc.c  */
#line 13577 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2265:

/* Line 1455 of yacc.c  */
#line 13578 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2266:

/* Line 1455 of yacc.c  */
#line 13579 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2267:

/* Line 1455 of yacc.c  */
#line 13580 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2268:

/* Line 1455 of yacc.c  */
#line 13581 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2269:

/* Line 1455 of yacc.c  */
#line 13582 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2270:

/* Line 1455 of yacc.c  */
#line 13583 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2271:

/* Line 1455 of yacc.c  */
#line 13584 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2272:

/* Line 1455 of yacc.c  */
#line 13585 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2273:

/* Line 1455 of yacc.c  */
#line 13586 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2274:

/* Line 1455 of yacc.c  */
#line 13587 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2275:

/* Line 1455 of yacc.c  */
#line 13588 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2276:

/* Line 1455 of yacc.c  */
#line 13589 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2277:

/* Line 1455 of yacc.c  */
#line 13590 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2278:

/* Line 1455 of yacc.c  */
#line 13591 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2279:

/* Line 1455 of yacc.c  */
#line 13592 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2280:

/* Line 1455 of yacc.c  */
#line 13593 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2281:

/* Line 1455 of yacc.c  */
#line 13594 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2282:

/* Line 1455 of yacc.c  */
#line 13595 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2283:

/* Line 1455 of yacc.c  */
#line 13596 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2284:

/* Line 1455 of yacc.c  */
#line 13597 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2285:

/* Line 1455 of yacc.c  */
#line 13598 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2286:

/* Line 1455 of yacc.c  */
#line 13599 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2287:

/* Line 1455 of yacc.c  */
#line 13600 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2288:

/* Line 1455 of yacc.c  */
#line 13601 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2289:

/* Line 1455 of yacc.c  */
#line 13602 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2290:

/* Line 1455 of yacc.c  */
#line 13603 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2291:

/* Line 1455 of yacc.c  */
#line 13604 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2292:

/* Line 1455 of yacc.c  */
#line 13605 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2293:

/* Line 1455 of yacc.c  */
#line 13606 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2294:

/* Line 1455 of yacc.c  */
#line 13607 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2295:

/* Line 1455 of yacc.c  */
#line 13608 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2296:

/* Line 1455 of yacc.c  */
#line 13609 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2297:

/* Line 1455 of yacc.c  */
#line 13610 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2298:

/* Line 1455 of yacc.c  */
#line 13611 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2299:

/* Line 1455 of yacc.c  */
#line 13612 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2300:

/* Line 1455 of yacc.c  */
#line 13613 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2301:

/* Line 1455 of yacc.c  */
#line 13614 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2302:

/* Line 1455 of yacc.c  */
#line 13615 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2303:

/* Line 1455 of yacc.c  */
#line 13616 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2304:

/* Line 1455 of yacc.c  */
#line 13617 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2305:

/* Line 1455 of yacc.c  */
#line 13618 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2306:

/* Line 1455 of yacc.c  */
#line 13619 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2307:

/* Line 1455 of yacc.c  */
#line 13620 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2308:

/* Line 1455 of yacc.c  */
#line 13621 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2309:

/* Line 1455 of yacc.c  */
#line 13622 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2310:

/* Line 1455 of yacc.c  */
#line 13623 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2311:

/* Line 1455 of yacc.c  */
#line 13624 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2312:

/* Line 1455 of yacc.c  */
#line 13625 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2313:

/* Line 1455 of yacc.c  */
#line 13626 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2314:

/* Line 1455 of yacc.c  */
#line 13627 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2315:

/* Line 1455 of yacc.c  */
#line 13628 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2316:

/* Line 1455 of yacc.c  */
#line 13629 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2317:

/* Line 1455 of yacc.c  */
#line 13630 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2318:

/* Line 1455 of yacc.c  */
#line 13631 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2319:

/* Line 1455 of yacc.c  */
#line 13632 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2320:

/* Line 1455 of yacc.c  */
#line 13633 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2321:

/* Line 1455 of yacc.c  */
#line 13634 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2322:

/* Line 1455 of yacc.c  */
#line 13635 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2323:

/* Line 1455 of yacc.c  */
#line 13636 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2324:

/* Line 1455 of yacc.c  */
#line 13637 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2325:

/* Line 1455 of yacc.c  */
#line 13638 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2326:

/* Line 1455 of yacc.c  */
#line 13639 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2327:

/* Line 1455 of yacc.c  */
#line 13640 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2328:

/* Line 1455 of yacc.c  */
#line 13641 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2329:

/* Line 1455 of yacc.c  */
#line 13642 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2330:

/* Line 1455 of yacc.c  */
#line 13643 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2331:

/* Line 1455 of yacc.c  */
#line 13644 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2332:

/* Line 1455 of yacc.c  */
#line 13645 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2333:

/* Line 1455 of yacc.c  */
#line 13646 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2334:

/* Line 1455 of yacc.c  */
#line 13647 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2335:

/* Line 1455 of yacc.c  */
#line 13648 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2336:

/* Line 1455 of yacc.c  */
#line 13649 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2337:

/* Line 1455 of yacc.c  */
#line 13650 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2338:

/* Line 1455 of yacc.c  */
#line 13651 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2339:

/* Line 1455 of yacc.c  */
#line 13652 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2340:

/* Line 1455 of yacc.c  */
#line 13653 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2341:

/* Line 1455 of yacc.c  */
#line 13654 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2342:

/* Line 1455 of yacc.c  */
#line 13655 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2343:

/* Line 1455 of yacc.c  */
#line 13656 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2344:

/* Line 1455 of yacc.c  */
#line 13657 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2345:

/* Line 1455 of yacc.c  */
#line 13658 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2346:

/* Line 1455 of yacc.c  */
#line 13659 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2347:

/* Line 1455 of yacc.c  */
#line 13660 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2348:

/* Line 1455 of yacc.c  */
#line 13661 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2349:

/* Line 1455 of yacc.c  */
#line 13662 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2350:

/* Line 1455 of yacc.c  */
#line 13663 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2351:

/* Line 1455 of yacc.c  */
#line 13664 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2352:

/* Line 1455 of yacc.c  */
#line 13676 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SET_OPTION;
            mysql_init_select(lex);
            lex->option_type=OPT_SESSION;
            lex->var_list.empty();
            lex->one_shot_set= 0;
            lex->autocommit= 0;
            sp_create_assignment_lex(YYTHD, yychar == YYEMPTY);
          }
    break;

  case 2353:

/* Line 1455 of yacc.c  */
#line 13687 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2354:

/* Line 1455 of yacc.c  */
#line 13694 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(YYTHD, yychar == YYEMPTY))
              MYSQL_YYABORT;
          }
    break;

  case 2356:

/* Line 1455 of yacc.c  */
#line 13700 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->option_type= OPT_DEFAULT;
          }
    break;

  case 2357:

/* Line 1455 of yacc.c  */
#line 13704 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(YYTHD, yychar == YYEMPTY))
              MYSQL_YYABORT;
          }
    break;

  case 2358:

/* Line 1455 of yacc.c  */
#line 13709 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->option_type= (yyvsp[(1) - (1)].var_type);
          }
    break;

  case 2360:

/* Line 1455 of yacc.c  */
#line 13719 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(YYTHD, yychar == YYEMPTY))
              MYSQL_YYABORT; 
          }
    break;

  case 2362:

/* Line 1455 of yacc.c  */
#line 13725 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(YYTHD, yychar == YYEMPTY))
              MYSQL_YYABORT; 
          }
    break;

  case 2365:

/* Line 1455 of yacc.c  */
#line 13739 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            sp_create_assignment_lex(YYTHD, yychar == YYEMPTY);
          }
    break;

  case 2366:

/* Line 1455 of yacc.c  */
#line 13743 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(YYTHD, yychar == YYEMPTY))
              MYSQL_YYABORT; 
          }
    break;

  case 2367:

/* Line 1455 of yacc.c  */
#line 13748 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            sp_create_assignment_lex(YYTHD, yychar == YYEMPTY);
          }
    break;

  case 2368:

/* Line 1455 of yacc.c  */
#line 13752 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(YYTHD, yychar == YYEMPTY))
              MYSQL_YYABORT; 
          }
    break;

  case 2369:

/* Line 1455 of yacc.c  */
#line 13761 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->option_type= (yyvsp[(1) - (1)].var_type);
          }
    break;

  case 2372:

/* Line 1455 of yacc.c  */
#line 13769 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2373:

/* Line 1455 of yacc.c  */
#line 13770 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2374:

/* Line 1455 of yacc.c  */
#line 13771 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2375:

/* Line 1455 of yacc.c  */
#line 13775 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2376:

/* Line 1455 of yacc.c  */
#line 13776 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2377:

/* Line 1455 of yacc.c  */
#line 13777 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2378:

/* Line 1455 of yacc.c  */
#line 13778 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2379:

/* Line 1455 of yacc.c  */
#line 13782 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_DEFAULT; }
    break;

  case 2380:

/* Line 1455 of yacc.c  */
#line 13783 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2381:

/* Line 1455 of yacc.c  */
#line 13784 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2382:

/* Line 1455 of yacc.c  */
#line 13785 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2383:

/* Line 1455 of yacc.c  */
#line 13791 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;

            if ((yyvsp[(1) - (3)].variable).var && (yyvsp[(1) - (3)].variable).var != trg_new_row_fake_var)
            {
              /* It is a system variable. */
              if (set_system_variable(thd, &(yyvsp[(1) - (3)].variable), lex->option_type, (yyvsp[(3) - (3)].item)))
                MYSQL_YYABORT;
            }
            else
            {
              /*
                Not in trigger assigning value to new row,
                and option_type preceeding local variable is illegal.
              */
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2384:

/* Line 1455 of yacc.c  */
#line 13816 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            LEX_STRING *name= &(yyvsp[(1) - (3)].variable).base_name;

            if ((yyvsp[(1) - (3)].variable).var == trg_new_row_fake_var)
            {
              /* We are in trigger and assigning value to field of new row */
              if (set_trigger_new_row(YYTHD, name, (yyvsp[(3) - (3)].item)))
                MYSQL_YYABORT;
            }
            else if ((yyvsp[(1) - (3)].variable).var)
            {
              /* It is a system variable. */
              if (set_system_variable(thd, &(yyvsp[(1) - (3)].variable), lex->option_type, (yyvsp[(3) - (3)].item)))
                MYSQL_YYABORT;
            }
            else
            {
              sp_pcontext *spc= lex->spcont;
              sp_variable *spv= spc->find_variable(name, false);

              /* It is a local variable. */
              if (set_local_variable(thd, spv, (yyvsp[(3) - (3)].item)))
                MYSQL_YYABORT;
            }
          }
    break;

  case 2385:

/* Line 1455 of yacc.c  */
#line 13844 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item_func_set_user_var *item;
            item= new (YYTHD->mem_root) Item_func_set_user_var((yyvsp[(2) - (4)].lex_str), (yyvsp[(4) - (4)].item));
            if (item == NULL)
              MYSQL_YYABORT;
            set_var_user *var= new set_var_user(item);
            if (var == NULL)
              MYSQL_YYABORT;
            Lex->var_list.push_back(var);
          }
    break;

  case 2386:

/* Line 1455 of yacc.c  */
#line 13855 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            struct sys_var_with_base tmp= (yyvsp[(4) - (6)].variable);
            /* Lookup if necessary: must be a system variable. */
            if (tmp.var == NULL)
            {
              if (find_sys_var_null_base(thd, &tmp))
                MYSQL_YYABORT;
            }
            if (set_system_variable(thd, &tmp, (yyvsp[(3) - (6)].var_type), (yyvsp[(6) - (6)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 2387:

/* Line 1455 of yacc.c  */
#line 13868 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            CHARSET_INFO *cs2;
            cs2= (yyvsp[(2) - (2)].charset) ? (yyvsp[(2) - (2)].charset): global_system_variables.character_set_client;
            set_var_collation_client *var;
            var= new set_var_collation_client(cs2,
                                              thd->variables.collation_database,
                                              cs2);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2388:

/* Line 1455 of yacc.c  */
#line 13882 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;
            LEX_STRING names;

            names.str= (char *)"names";
            names.length= 5;
            if (spc && spc->find_variable(&names, false))
              my_error(ER_SP_BAD_VAR_SHADOW, MYF(0), names.str);
            else
              my_parse_error(ER(ER_SYNTAX_ERROR));

            MYSQL_YYABORT;
          }
    break;

  case 2389:

/* Line 1455 of yacc.c  */
#line 13897 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            CHARSET_INFO *cs2;
            CHARSET_INFO *cs3;
            cs2= (yyvsp[(2) - (3)].charset) ? (yyvsp[(2) - (3)].charset) : global_system_variables.character_set_client;
            cs3= (yyvsp[(3) - (3)].charset) ? (yyvsp[(3) - (3)].charset) : cs2;
            if (!my_charset_same(cs2, cs3))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       cs3->name, cs2->csname);
              MYSQL_YYABORT;
            }
            set_var_collation_client *var;
            var= new set_var_collation_client(cs3, cs3, cs3);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2390:

/* Line 1455 of yacc.c  */
#line 13916 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            LEX_USER *user;
            sp_pcontext *spc= lex->spcont;
            LEX_STRING pw;

            pw.str= (char *)"password";
            pw.length= 8;
            if (spc && spc->find_variable(&pw, false))
            {
              my_error(ER_SP_BAD_VAR_SHADOW, MYF(0), pw.str);
              MYSQL_YYABORT;
            }
            if (!(user=(LEX_USER*) thd->alloc(sizeof(LEX_USER))))
              MYSQL_YYABORT;
            user->host=null_lex_str;
            user->user.str=thd->security_ctx->user;
            user->user.length= strlen(thd->security_ctx->user);
            set_var_password *var= new set_var_password(user, (yyvsp[(3) - (3)].simple_string));
            if (var == NULL)
              MYSQL_YYABORT;
            thd->lex->var_list.push_back(var);
            thd->lex->autocommit= TRUE;
            if (lex->sphead)
              lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;
          }
    break;

  case 2391:

/* Line 1455 of yacc.c  */
#line 13944 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            set_var_password *var= new set_var_password((yyvsp[(3) - (5)].lex_user),(yyvsp[(5) - (5)].simple_string));
            if (var == NULL)
              MYSQL_YYABORT;
            Lex->var_list.push_back(var);
            Lex->autocommit= TRUE;
            if (Lex->sphead)
              Lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;
          }
    break;

  case 2392:

/* Line 1455 of yacc.c  */
#line 13957 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            sp_pcontext *spc= thd->lex->spcont;
            sp_variable_t *spv;

            /* Best effort lookup for system variable. */
            if (!spc || !(spv = spc->find_variable(&(yyvsp[(1) - (1)].lex_str))))
            {
              struct sys_var_with_base tmp= {NULL, (yyvsp[(1) - (1)].lex_str)};

              /* Not an SP local variable */
              if (find_sys_var_null_base(thd, &tmp))
                MYSQL_YYABORT;

              (yyval.variable)= tmp;
            }
            else
            {
              /*
                Possibly an SP local variable (or a shadowed sysvar).
                Will depend on the context of the SET statement.
              */
              (yyval.variable).var= NULL;
              (yyval.variable).base_name= (yyvsp[(1) - (1)].lex_str);
            }
          }
    break;

  case 2393:

/* Line 1455 of yacc.c  */
#line 13984 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (check_reserved_words(&(yyvsp[(1) - (3)].lex_str)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (lex->sphead && lex->sphead->m_type == TYPE_ENUM_TRIGGER &&
                (!my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "NEW") || 
                 !my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "OLD")))
            {
              if ((yyvsp[(1) - (3)].lex_str).str[0]=='O' || (yyvsp[(1) - (3)].lex_str).str[0]=='o')
              {
                my_error(ER_TRG_CANT_CHANGE_ROW, MYF(0), "OLD", "");
                MYSQL_YYABORT;
              }
              if (lex->trg_chistics.event == TRG_EVENT_DELETE)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0),
                         "NEW", "on DELETE");
                MYSQL_YYABORT;
              }
              if (lex->trg_chistics.action_time == TRG_ACTION_AFTER)
              {
                my_error(ER_TRG_CANT_CHANGE_ROW, MYF(0), "NEW", "after ");
                MYSQL_YYABORT;
              }
              /* This special combination will denote field of NEW row */
              (yyval.variable).var= trg_new_row_fake_var;
              (yyval.variable).base_name= (yyvsp[(3) - (3)].lex_str);
            }
            else
            {
              sys_var *tmp=find_sys_var(YYTHD, (yyvsp[(3) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).length);
              if (!tmp)
                MYSQL_YYABORT;
              if (!tmp->is_struct())
                my_error(ER_VARIABLE_IS_NOT_STRUCT, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              (yyval.variable).var= tmp;
              (yyval.variable).base_name= (yyvsp[(1) - (3)].lex_str);
            }
          }
    break;

  case 2394:

/* Line 1455 of yacc.c  */
#line 14027 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            sys_var *tmp=find_sys_var(YYTHD, (yyvsp[(3) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).length);
            if (!tmp)
              MYSQL_YYABORT;
            if (!tmp->is_struct())
              my_error(ER_VARIABLE_IS_NOT_STRUCT, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
            (yyval.variable).var= tmp;
            (yyval.variable).base_name.str=    (char*) "default";
            (yyval.variable).base_name.length= 7;
          }
    break;

  case 2399:

/* Line 1455 of yacc.c  */
#line 14048 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex=Lex;
            Item *item= new (thd->mem_root) Item_int((int32) (yyvsp[(1) - (1)].num));
            if (item == NULL)
              MYSQL_YYABORT;
            set_var *var= new set_var(lex->option_type,
                                      find_sys_var(thd, "tx_read_only"),
                                      &null_lex_str,
                                      item);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2400:

/* Line 1455 of yacc.c  */
#line 14066 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex=Lex;
            Item *item= new (thd->mem_root) Item_int((int32) (yyvsp[(3) - (3)].tx_isolation));
            if (item == NULL)
              MYSQL_YYABORT;
            set_var *var= new set_var(lex->option_type,
                                      find_sys_var(thd, "tx_isolation"),
                                      &null_lex_str,
                                      item);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2401:

/* Line 1455 of yacc.c  */
#line 14083 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= true; }
    break;

  case 2402:

/* Line 1455 of yacc.c  */
#line 14084 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= false; }
    break;

  case 2403:

/* Line 1455 of yacc.c  */
#line 14088 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_READ_UNCOMMITTED; }
    break;

  case 2404:

/* Line 1455 of yacc.c  */
#line 14089 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_READ_COMMITTED; }
    break;

  case 2405:

/* Line 1455 of yacc.c  */
#line 14090 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_REPEATABLE_READ; }
    break;

  case 2406:

/* Line 1455 of yacc.c  */
#line 14091 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_SERIALIZABLE; }
    break;

  case 2407:

/* Line 1455 of yacc.c  */
#line 14095 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.simple_string)=(yyvsp[(1) - (1)].lex_str).str;}
    break;

  case 2408:

/* Line 1455 of yacc.c  */
#line 14097 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.simple_string)= (yyvsp[(3) - (4)].lex_str).length ? YYTHD->variables.old_passwords ?
              Item_func_old_password::alloc(YYTHD, (yyvsp[(3) - (4)].lex_str).str, (yyvsp[(3) - (4)].lex_str).length) :
              Item_func_password::alloc(YYTHD, (yyvsp[(3) - (4)].lex_str).str, (yyvsp[(3) - (4)].lex_str).length) :
              (yyvsp[(3) - (4)].lex_str).str;
            if ((yyval.simple_string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2409:

/* Line 1455 of yacc.c  */
#line 14106 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.simple_string)= (yyvsp[(3) - (4)].lex_str).length ? Item_func_old_password::alloc(YYTHD, (yyvsp[(3) - (4)].lex_str).str,
                                                          (yyvsp[(3) - (4)].lex_str).length) :
              (yyvsp[(3) - (4)].lex_str).str;
            if ((yyval.simple_string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2410:

/* Line 1455 of yacc.c  */
#line 14117 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 2411:

/* Line 1455 of yacc.c  */
#line 14118 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)=0; }
    break;

  case 2412:

/* Line 1455 of yacc.c  */
#line 14120 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_string("ON",  2, system_charset_info);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2413:

/* Line 1455 of yacc.c  */
#line 14126 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_string("ALL", 3, system_charset_info);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2414:

/* Line 1455 of yacc.c  */
#line 14132 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_string("binary", 6, system_charset_info);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2415:

/* Line 1455 of yacc.c  */
#line 14143 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "LOCK");
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_LOCK_TABLES;
          }
    break;

  case 2416:

/* Line 1455 of yacc.c  */
#line 14154 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2421:

/* Line 1455 of yacc.c  */
#line 14169 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            thr_lock_type lock_type= (thr_lock_type) (yyvsp[(3) - (3)].num);
            bool lock_for_write= (lock_type >= TL_WRITE_ALLOW_WRITE);
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (3)].table), (yyvsp[(2) - (3)].lex_str_ptr), 0, lock_type,
                                           (lock_for_write ?
                                            lock_type == TL_WRITE_CONCURRENT_INSERT ?
                                            MDL_SHARED_WRITE :
                                            MDL_SHARED_NO_READ_WRITE :
                                            MDL_SHARED_READ)))
              MYSQL_YYABORT;
          }
    break;

  case 2422:

/* Line 1455 of yacc.c  */
#line 14183 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= TL_READ_NO_INSERT; }
    break;

  case 2423:

/* Line 1455 of yacc.c  */
#line 14184 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= TL_WRITE_DEFAULT; }
    break;

  case 2424:

/* Line 1455 of yacc.c  */
#line 14186 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= (Lex->sphead ? TL_WRITE_DEFAULT : TL_WRITE_CONCURRENT_INSERT);
          }
    break;

  case 2425:

/* Line 1455 of yacc.c  */
#line 14190 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 2426:

/* Line 1455 of yacc.c  */
#line 14191 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= TL_READ; }
    break;

  case 2427:

/* Line 1455 of yacc.c  */
#line 14196 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "UNLOCK");
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_UNLOCK_TABLES;
          }
    break;

  case 2428:

/* Line 1455 of yacc.c  */
#line 14207 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2429:

/* Line 1455 of yacc.c  */
#line 14216 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_HA_OPEN;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(2) - (4)].table), (yyvsp[(4) - (4)].lex_str_ptr), 0))
              MYSQL_YYABORT;
          }
    break;

  case 2430:

/* Line 1455 of yacc.c  */
#line 14228 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_HA_CLOSE;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(2) - (3)].table), 0, 0))
              MYSQL_YYABORT;
          }
    break;

  case 2431:

/* Line 1455 of yacc.c  */
#line 14240 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
              MYSQL_YYABORT;
            }
            lex->expr_allows_subselect= FALSE;
            lex->sql_command = SQLCOM_HA_READ;
            lex->ha_rkey_mode= HA_READ_KEY_EXACT; /* Avoid purify warnings */
            Item *one= new (YYTHD->mem_root) Item_int((int32) 1);
            if (one == NULL)
              MYSQL_YYABORT;
            lex->current_select->select_limit= one;
            lex->current_select->offset_limit= 0;
            lex->limit_rows_examined= 0;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(2) - (3)].table), 0, 0))
              MYSQL_YYABORT;
          }
    break;

  case 2432:

/* Line 1455 of yacc.c  */
#line 14260 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->expr_allows_subselect= TRUE;
            /* Stored functions are not supported for HANDLER READ. */
            if (Lex->uses_stored_routines())
            {
              my_error(ER_NOT_SUPPORTED_YET, MYF(0),
                       "stored functions in HANDLER ... READ");
              MYSQL_YYABORT;
            }
          }
    break;

  case 2433:

/* Line 1455 of yacc.c  */
#line 14273 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ident= null_lex_str; }
    break;

  case 2434:

/* Line 1455 of yacc.c  */
#line 14274 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ident= (yyvsp[(1) - (2)].lex_str); }
    break;

  case 2435:

/* Line 1455 of yacc.c  */
#line 14278 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RFIRST; }
    break;

  case 2436:

/* Line 1455 of yacc.c  */
#line 14279 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RNEXT;  }
    break;

  case 2437:

/* Line 1455 of yacc.c  */
#line 14283 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RFIRST; }
    break;

  case 2438:

/* Line 1455 of yacc.c  */
#line 14284 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RNEXT;  }
    break;

  case 2439:

/* Line 1455 of yacc.c  */
#line 14285 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RPREV;  }
    break;

  case 2440:

/* Line 1455 of yacc.c  */
#line 14286 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RLAST;  }
    break;

  case 2441:

/* Line 1455 of yacc.c  */
#line 14288 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->ha_read_mode = RKEY;
            lex->ha_rkey_mode=(yyvsp[(1) - (1)].ha_rkey_mode);
            if (!(lex->insert_list = new List_item))
              MYSQL_YYABORT;
          }
    break;

  case 2442:

/* Line 1455 of yacc.c  */
#line 14296 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2443:

/* Line 1455 of yacc.c  */
#line 14300 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_EXACT;   }
    break;

  case 2444:

/* Line 1455 of yacc.c  */
#line 14301 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_OR_NEXT; }
    break;

  case 2445:

/* Line 1455 of yacc.c  */
#line 14302 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_OR_PREV; }
    break;

  case 2446:

/* Line 1455 of yacc.c  */
#line 14303 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_AFTER_KEY;   }
    break;

  case 2447:

/* Line 1455 of yacc.c  */
#line 14304 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_BEFORE_KEY;  }
    break;

  case 2448:

/* Line 1455 of yacc.c  */
#line 14311 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2449:

/* Line 1455 of yacc.c  */
#line 14316 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= 0;
          }
    break;

  case 2450:

/* Line 1455 of yacc.c  */
#line 14322 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= TYPE_ENUM_FUNCTION;
          }
    break;

  case 2451:

/* Line 1455 of yacc.c  */
#line 14333 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= TYPE_ENUM_PROCEDURE;
          }
    break;

  case 2452:

/* Line 1455 of yacc.c  */
#line 14344 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_REVOKE_ALL;
          }
    break;

  case 2453:

/* Line 1455 of yacc.c  */
#line 14348 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->users_list.push_front ((yyvsp[(3) - (5)].lex_user));
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= TYPE_ENUM_PROXY;
          }
    break;

  case 2454:

/* Line 1455 of yacc.c  */
#line 14358 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2455:

/* Line 1455 of yacc.c  */
#line 14364 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_GRANT;
            lex->type= 0;
          }
    break;

  case 2456:

/* Line 1455 of yacc.c  */
#line 14371 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_GRANT;
            lex->type= TYPE_ENUM_FUNCTION;
          }
    break;

  case 2457:

/* Line 1455 of yacc.c  */
#line 14383 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_GRANT;
            lex->type= TYPE_ENUM_PROCEDURE;
          }
    break;

  case 2458:

/* Line 1455 of yacc.c  */
#line 14394 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->users_list.push_front ((yyvsp[(3) - (6)].lex_user));
            lex->sql_command= SQLCOM_GRANT;
            lex->type= TYPE_ENUM_PROXY;
          }
    break;

  case 2461:

/* Line 1455 of yacc.c  */
#line 14408 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2462:

/* Line 1455 of yacc.c  */
#line 14410 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            Lex->all_privileges= 1; 
            Lex->grant= GLOBAL_ACLS;
          }
    break;

  case 2467:

/* Line 1455 of yacc.c  */
#line 14428 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->which_columns = SELECT_ACL;}
    break;

  case 2468:

/* Line 1455 of yacc.c  */
#line 14429 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2469:

/* Line 1455 of yacc.c  */
#line 14431 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->which_columns = INSERT_ACL;}
    break;

  case 2470:

/* Line 1455 of yacc.c  */
#line 14432 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2471:

/* Line 1455 of yacc.c  */
#line 14434 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->which_columns = UPDATE_ACL; }
    break;

  case 2472:

/* Line 1455 of yacc.c  */
#line 14435 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2473:

/* Line 1455 of yacc.c  */
#line 14437 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->which_columns = REFERENCES_ACL;}
    break;

  case 2474:

/* Line 1455 of yacc.c  */
#line 14438 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2475:

/* Line 1455 of yacc.c  */
#line 14439 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= DELETE_ACL;}
    break;

  case 2476:

/* Line 1455 of yacc.c  */
#line 14440 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2477:

/* Line 1455 of yacc.c  */
#line 14441 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= INDEX_ACL;}
    break;

  case 2478:

/* Line 1455 of yacc.c  */
#line 14442 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= ALTER_ACL;}
    break;

  case 2479:

/* Line 1455 of yacc.c  */
#line 14443 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_ACL;}
    break;

  case 2480:

/* Line 1455 of yacc.c  */
#line 14444 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= DROP_ACL;}
    break;

  case 2481:

/* Line 1455 of yacc.c  */
#line 14445 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= EXECUTE_ACL;}
    break;

  case 2482:

/* Line 1455 of yacc.c  */
#line 14446 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= RELOAD_ACL;}
    break;

  case 2483:

/* Line 1455 of yacc.c  */
#line 14447 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= SHUTDOWN_ACL;}
    break;

  case 2484:

/* Line 1455 of yacc.c  */
#line 14448 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= PROCESS_ACL;}
    break;

  case 2485:

/* Line 1455 of yacc.c  */
#line 14449 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= FILE_ACL;}
    break;

  case 2486:

/* Line 1455 of yacc.c  */
#line 14450 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= GRANT_ACL;}
    break;

  case 2487:

/* Line 1455 of yacc.c  */
#line 14451 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= SHOW_DB_ACL;}
    break;

  case 2488:

/* Line 1455 of yacc.c  */
#line 14452 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= SUPER_ACL;}
    break;

  case 2489:

/* Line 1455 of yacc.c  */
#line 14453 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_TMP_ACL;}
    break;

  case 2490:

/* Line 1455 of yacc.c  */
#line 14454 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= LOCK_TABLES_ACL; }
    break;

  case 2491:

/* Line 1455 of yacc.c  */
#line 14455 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= REPL_SLAVE_ACL; }
    break;

  case 2492:

/* Line 1455 of yacc.c  */
#line 14456 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= REPL_CLIENT_ACL; }
    break;

  case 2493:

/* Line 1455 of yacc.c  */
#line 14457 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_VIEW_ACL; }
    break;

  case 2494:

/* Line 1455 of yacc.c  */
#line 14458 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= SHOW_VIEW_ACL; }
    break;

  case 2495:

/* Line 1455 of yacc.c  */
#line 14459 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_PROC_ACL; }
    break;

  case 2496:

/* Line 1455 of yacc.c  */
#line 14460 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= ALTER_PROC_ACL; }
    break;

  case 2497:

/* Line 1455 of yacc.c  */
#line 14461 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_USER_ACL; }
    break;

  case 2498:

/* Line 1455 of yacc.c  */
#line 14462 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= EVENT_ACL;}
    break;

  case 2499:

/* Line 1455 of yacc.c  */
#line 14463 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= TRIGGER_ACL; }
    break;

  case 2500:

/* Line 1455 of yacc.c  */
#line 14464 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_TABLESPACE_ACL; }
    break;

  case 2501:

/* Line 1455 of yacc.c  */
#line 14468 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2502:

/* Line 1455 of yacc.c  */
#line 14469 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2505:

/* Line 1455 of yacc.c  */
#line 14479 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->x509_subject)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "SUBJECT");
              MYSQL_YYABORT;
            }
            lex->x509_subject=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2506:

/* Line 1455 of yacc.c  */
#line 14489 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->x509_issuer)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "ISSUER");
              MYSQL_YYABORT;
            }
            lex->x509_issuer=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2507:

/* Line 1455 of yacc.c  */
#line 14499 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->ssl_cipher)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "CIPHER");
              MYSQL_YYABORT;
            }
            lex->ssl_cipher=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2508:

/* Line 1455 of yacc.c  */
#line 14512 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            size_t dummy;
            if (lex->copy_db_to(&lex->current_select->db, &dummy))
              MYSQL_YYABORT;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant = DB_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
            {
              my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2509:

/* Line 1455 of yacc.c  */
#line 14527 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->current_select->db = (yyvsp[(1) - (3)].lex_str).str;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant = DB_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
            {
              my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2510:

/* Line 1455 of yacc.c  */
#line 14540 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->current_select->db = NULL;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant= GLOBAL_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
            {
              my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2511:

/* Line 1455 of yacc.c  */
#line 14553 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(1) - (1)].table),NULL,
                                                        TL_OPTION_UPDATING))
              MYSQL_YYABORT;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant =  TABLE_ACLS & ~GRANT_ACL;
          }
    break;

  case 2512:

/* Line 1455 of yacc.c  */
#line 14565 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (1)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2513:

/* Line 1455 of yacc.c  */
#line 14570 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2514:

/* Line 1455 of yacc.c  */
#line 14578 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (1)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2515:

/* Line 1455 of yacc.c  */
#line 14583 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2520:

/* Line 1455 of yacc.c  */
#line 14594 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.lex_user)=(yyvsp[(1) - (4)].lex_user); (yyvsp[(1) - (4)].lex_user)->password=(yyvsp[(4) - (4)].lex_str);
            if ((yyvsp[(4) - (4)].lex_str).length)
            {
              if (YYTHD->variables.old_passwords)
              {
                char *buff= 
                  (char *) YYTHD->alloc(SCRAMBLED_PASSWORD_CHAR_LENGTH_323+1);
                if (buff == NULL)
                  MYSQL_YYABORT;
                my_make_scrambled_password_323(buff, (yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length);
                (yyvsp[(1) - (4)].lex_user)->password.str= buff;
                (yyvsp[(1) - (4)].lex_user)->password.length= SCRAMBLED_PASSWORD_CHAR_LENGTH_323;
              }
              else
              {
                char *buff= 
                  (char *) YYTHD->alloc(SCRAMBLED_PASSWORD_CHAR_LENGTH+1);
                if (buff == NULL)
                  MYSQL_YYABORT;
                my_make_scrambled_password(buff, (yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length);
                (yyvsp[(1) - (4)].lex_user)->password.str= buff;
                (yyvsp[(1) - (4)].lex_user)->password.length= SCRAMBLED_PASSWORD_CHAR_LENGTH;
              }
            }
          }
    break;

  case 2521:

/* Line 1455 of yacc.c  */
#line 14621 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            (yyval.lex_user)= (yyvsp[(1) - (5)].lex_user); 
            (yyvsp[(1) - (5)].lex_user)->password= (yyvsp[(5) - (5)].lex_str); 
          }
    break;

  case 2522:

/* Line 1455 of yacc.c  */
#line 14626 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.lex_user)= (yyvsp[(1) - (4)].lex_user);
            (yyvsp[(1) - (4)].lex_user)->plugin= (yyvsp[(4) - (4)].lex_str);
            (yyvsp[(1) - (4)].lex_user)->auth= empty_lex_str;
          }
    break;

  case 2523:

/* Line 1455 of yacc.c  */
#line 14632 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.lex_user)= (yyvsp[(1) - (6)].lex_user);
            (yyvsp[(1) - (6)].lex_user)->plugin= (yyvsp[(4) - (6)].lex_str);
            (yyvsp[(1) - (6)].lex_user)->auth= (yyvsp[(6) - (6)].lex_str);
          }
    break;

  case 2524:

/* Line 1455 of yacc.c  */
#line 14638 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_user)= (yyvsp[(1) - (1)].lex_user); (yyvsp[(1) - (1)].lex_user)->password= null_lex_str; }
    break;

  case 2525:

/* Line 1455 of yacc.c  */
#line 14643 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->grant |= lex->which_columns;
          }
    break;

  case 2529:

/* Line 1455 of yacc.c  */
#line 14657 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            String *new_str = new (YYTHD->mem_root) String((const char*) (yyvsp[(1) - (1)].lex_str).str,(yyvsp[(1) - (1)].lex_str).length,system_charset_info);
            if (new_str == NULL)
              MYSQL_YYABORT;
            List_iterator <LEX_COLUMN> iter(Lex->columns);
            class LEX_COLUMN *point;
            LEX *lex=Lex;
            while ((point=iter++))
            {
              if (!my_strcasecmp(system_charset_info,
                                 point->column.c_ptr(), new_str->c_ptr()))
                break;
            }
            lex->grant_tot_col|= lex->which_columns;
            if (point)
              point->rights |= lex->which_columns;
            else
            {
              LEX_COLUMN *col= new LEX_COLUMN (*new_str,lex->which_columns);
              if (col == NULL)
                MYSQL_YYABORT;
              lex->columns.push_back(col);
            }
          }
    break;

  case 2531:

/* Line 1455 of yacc.c  */
#line 14686 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_SPECIFIED;
          }
    break;

  case 2532:

/* Line 1455 of yacc.c  */
#line 14690 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_ANY;
          }
    break;

  case 2533:

/* Line 1455 of yacc.c  */
#line 14694 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_X509;
          }
    break;

  case 2534:

/* Line 1455 of yacc.c  */
#line 14698 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_NONE;
          }
    break;

  case 2535:

/* Line 1455 of yacc.c  */
#line 14704 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2537:

/* Line 1455 of yacc.c  */
#line 14709 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2538:

/* Line 1455 of yacc.c  */
#line 14710 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= GRANT_ACL;}
    break;

  case 2539:

/* Line 1455 of yacc.c  */
#line 14714 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2540:

/* Line 1455 of yacc.c  */
#line 14715 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2541:

/* Line 1455 of yacc.c  */
#line 14719 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= GRANT_ACL;}
    break;

  case 2542:

/* Line 1455 of yacc.c  */
#line 14721 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.questions=(yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::QUERIES_PER_HOUR;
          }
    break;

  case 2543:

/* Line 1455 of yacc.c  */
#line 14727 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.updates=(yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::UPDATES_PER_HOUR;
          }
    break;

  case 2544:

/* Line 1455 of yacc.c  */
#line 14733 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.conn_per_hour= (yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::CONNECTIONS_PER_HOUR;
          }
    break;

  case 2545:

/* Line 1455 of yacc.c  */
#line 14739 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.user_conn= (yyvsp[(2) - (2)].num);
            lex->mqh.specified_limits|= USER_RESOURCES::USER_CONNECTIONS;
          }
    break;

  case 2546:

/* Line 1455 of yacc.c  */
#line 14748 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_BEGIN;
            lex->start_transaction_opt= 0;
          }
    break;

  case 2547:

/* Line 1455 of yacc.c  */
#line 14753 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2548:

/* Line 1455 of yacc.c  */
#line 14757 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2549:

/* Line 1455 of yacc.c  */
#line 14758 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2550:

/* Line 1455 of yacc.c  */
#line 14763 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_UNKNOWN; }
    break;

  case 2551:

/* Line 1455 of yacc.c  */
#line 14764 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_NO; }
    break;

  case 2552:

/* Line 1455 of yacc.c  */
#line 14765 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_YES; }
    break;

  case 2553:

/* Line 1455 of yacc.c  */
#line 14770 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_UNKNOWN; }
    break;

  case 2554:

/* Line 1455 of yacc.c  */
#line 14771 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_YES; }
    break;

  case 2555:

/* Line 1455 of yacc.c  */
#line 14772 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_NO; }
    break;

  case 2556:

/* Line 1455 of yacc.c  */
#line 14776 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2557:

/* Line 1455 of yacc.c  */
#line 14777 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2558:

/* Line 1455 of yacc.c  */
#line 14782 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_COMMIT;
            /* Don't allow AND CHAIN RELEASE. */
            MYSQL_YYABORT_UNLESS((yyvsp[(3) - (4)].m_yes_no_unk) != TVL_YES || (yyvsp[(4) - (4)].m_yes_no_unk) != TVL_YES);
            lex->tx_chain= (yyvsp[(3) - (4)].m_yes_no_unk);
            lex->tx_release= (yyvsp[(4) - (4)].m_yes_no_unk);
          }
    break;

  case 2559:

/* Line 1455 of yacc.c  */
#line 14794 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ROLLBACK;
            /* Don't allow AND CHAIN RELEASE. */
            MYSQL_YYABORT_UNLESS((yyvsp[(3) - (4)].m_yes_no_unk) != TVL_YES || (yyvsp[(4) - (4)].m_yes_no_unk) != TVL_YES);
            lex->tx_chain= (yyvsp[(3) - (4)].m_yes_no_unk);
            lex->tx_release= (yyvsp[(4) - (4)].m_yes_no_unk);
          }
    break;

  case 2560:

/* Line 1455 of yacc.c  */
#line 14804 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ROLLBACK_TO_SAVEPOINT;
            lex->ident= (yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 2561:

/* Line 1455 of yacc.c  */
#line 14813 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SAVEPOINT;
            lex->ident= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 2562:

/* Line 1455 of yacc.c  */
#line 14822 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_RELEASE_SAVEPOINT;
            lex->ident= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 2563:

/* Line 1455 of yacc.c  */
#line 14835 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2565:

/* Line 1455 of yacc.c  */
#line 14841 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_select_to_union_list(Lex, (bool)(yyvsp[(2) - (2)].num), TRUE))
              MYSQL_YYABORT;
          }
    break;

  case 2566:

/* Line 1455 of yacc.c  */
#line 14846 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              Remove from the name resolution context stack the context of the
              last select in the union.
            */
            Lex->pop_context();
          }
    break;

  case 2567:

/* Line 1455 of yacc.c  */
#line 14856 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 2568:

/* Line 1455 of yacc.c  */
#line 14857 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 2569:

/* Line 1455 of yacc.c  */
#line 14858 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 2572:

/* Line 1455 of yacc.c  */
#line 14867 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            DBUG_ASSERT(lex->current_select->linkage != GLOBAL_OPTIONS_TYPE);
            SELECT_LEX *sel= lex->current_select;
            SELECT_LEX_UNIT *unit= sel->master_unit();
            SELECT_LEX *fake= unit->fake_select_lex;
            if (fake)
            {
              unit->global_parameters= fake;
              fake->no_table_names_allowed= 1;
              lex->current_select= fake;
            }
            thd->where= "global ORDER clause";
          }
    break;

  case 2573:

/* Line 1455 of yacc.c  */
#line 14883 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            thd->lex->current_select->no_table_names_allowed= 0;
            thd->where= "";
          }
    break;

  case 2576:

/* Line 1455 of yacc.c  */
#line 14896 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=1; }
    break;

  case 2577:

/* Line 1455 of yacc.c  */
#line 14897 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=1; }
    break;

  case 2578:

/* Line 1455 of yacc.c  */
#line 14898 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=0; }
    break;

  case 2579:

/* Line 1455 of yacc.c  */
#line 14903 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            (yyval.select_lex)= Lex->current_select->master_unit()->first_select();
          }
    break;

  case 2580:

/* Line 1455 of yacc.c  */
#line 14907 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.select_lex)= Lex->current_select->master_unit()->first_select();
          }
    break;

  case 2582:

/* Line 1455 of yacc.c  */
#line 14916 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_select_to_union_list(Lex, (bool)(yyvsp[(3) - (3)].num), FALSE))
              MYSQL_YYABORT;
          }
    break;

  case 2583:

/* Line 1455 of yacc.c  */
#line 14922 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->pop_context();
            (yyval.select_lex)= (yyvsp[(1) - (6)].select_lex);
          }
    break;

  case 2584:

/* Line 1455 of yacc.c  */
#line 14931 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            (yyval.select_lex)= (yyvsp[(2) - (3)].select_lex);
          }
    break;

  case 2585:

/* Line 1455 of yacc.c  */
#line 14937 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->expr_allows_subselect ||
               lex->sql_command == (int)SQLCOM_PURGE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            /* 
              we are making a "derived table" for the parenthesis
              as we need to have a lex level to fit the union 
              after the parenthesis, e.g. 
              (SELECT .. ) UNION ...  becomes 
              SELECT * FROM ((SELECT ...) UNION ...)
            */
            if (mysql_new_select(Lex, 1))
              MYSQL_YYABORT;
          }
    break;

  case 2586:

/* Line 1455 of yacc.c  */
#line 14958 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->pop_context();
            SELECT_LEX *child= lex->current_select;
            lex->current_select = lex->current_select->return_after_parsing();
            lex->nest_level--;
            lex->current_select->n_child_sum_items += child->n_sum_items;
            /*
              A subselect can add fields to an outer select. Reserve space for
              them.
            */
            lex->current_select->select_n_where_fields+=
            child->select_n_where_fields;
          }
    break;

  case 2591:

/* Line 1455 of yacc.c  */
#line 14986 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->options|= SELECT_STRAIGHT_JOIN; }
    break;

  case 2592:

/* Line 1455 of yacc.c  */
#line 14988 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            YYPS->m_lock_type= TL_READ_HIGH_PRIORITY;
            YYPS->m_mdl_type= MDL_SHARED_READ;
            Select->options|= SELECT_HIGH_PRIORITY;
          }
    break;

  case 2593:

/* Line 1455 of yacc.c  */
#line 14995 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->options|= SELECT_DISTINCT; }
    break;

  case 2594:

/* Line 1455 of yacc.c  */
#line 14996 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->options|= SELECT_SMALL_RESULT; }
    break;

  case 2595:

/* Line 1455 of yacc.c  */
#line 14997 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->options|= SELECT_BIG_RESULT; }
    break;

  case 2596:

/* Line 1455 of yacc.c  */
#line 14999 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            Select->options|= OPTION_BUFFER_RESULT;
          }
    break;

  case 2597:

/* Line 1455 of yacc.c  */
#line 15005 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            Select->options|= OPTION_FOUND_ROWS;
          }
    break;

  case 2598:

/* Line 1455 of yacc.c  */
#line 15010 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->options|= SELECT_ALL; }
    break;

  case 2599:

/* Line 1455 of yacc.c  */
#line 15021 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2600:

/* Line 1455 of yacc.c  */
#line 15023 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2601:

/* Line 1455 of yacc.c  */
#line 15025 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2615:

/* Line 1455 of yacc.c  */
#line 15058 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              We have to distinguish missing DEFINER-clause from case when
              CURRENT_USER specified as definer explicitly in order to properly
              handle CREATE TRIGGER statements which come to replication thread
              from older master servers (i.e. to create non-suid trigger in this
              case).
            */
            YYTHD->lex->definer= 0;
          }
    break;

  case 2616:

/* Line 1455 of yacc.c  */
#line 15072 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            YYTHD->lex->definer= get_current_user(YYTHD, (yyvsp[(3) - (3)].lex_user));
          }
    break;

  case 2617:

/* Line 1455 of yacc.c  */
#line 15085 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2618:

/* Line 1455 of yacc.c  */
#line 15087 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2619:

/* Line 1455 of yacc.c  */
#line 15089 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2620:

/* Line 1455 of yacc.c  */
#line 15094 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_view_mode= VIEW_CREATE_OR_REPLACE; }
    break;

  case 2621:

/* Line 1455 of yacc.c  */
#line 15099 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_view_algorithm= DTYPE_ALGORITHM_UNDEFINED; }
    break;

  case 2622:

/* Line 1455 of yacc.c  */
#line 15101 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_view_algorithm= VIEW_ALGORITHM_MERGE; }
    break;

  case 2623:

/* Line 1455 of yacc.c  */
#line 15103 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_view_algorithm= VIEW_ALGORITHM_TMPTABLE; }
    break;

  case 2624:

/* Line 1455 of yacc.c  */
#line 15108 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_DEFAULT; }
    break;

  case 2625:

/* Line 1455 of yacc.c  */
#line 15110 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_DEFINER; }
    break;

  case 2626:

/* Line 1455 of yacc.c  */
#line 15112 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_INVOKER; }
    break;

  case 2627:

/* Line 1455 of yacc.c  */
#line 15117 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_CREATE_VIEW;
            /* first table in list is target VIEW name */
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(3) - (3)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_IGNORE,
                                                   MDL_EXCLUSIVE))
              MYSQL_YYABORT;
            lex->query_tables->open_strategy= TABLE_LIST::OPEN_STUB;
          }
    break;

  case 2629:

/* Line 1455 of yacc.c  */
#line 15134 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2631:

/* Line 1455 of yacc.c  */
#line 15140 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
              Lex->view_list.push_back((LEX_STRING*)
              sql_memdup(&(yyvsp[(1) - (1)].lex_str), sizeof(LEX_STRING)));
            }
    break;

  case 2632:

/* Line 1455 of yacc.c  */
#line 15145 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
              Lex->view_list.push_back((LEX_STRING*)
              sql_memdup(&(yyvsp[(3) - (3)].lex_str), sizeof(LEX_STRING)));
            }
    break;

  case 2633:

/* Line 1455 of yacc.c  */
#line 15152 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->parsing_options.allows_variable= FALSE;
            lex->parsing_options.allows_select_into= FALSE;
            lex->parsing_options.allows_select_procedure= FALSE;
            lex->parsing_options.allows_derived= FALSE;
            lex->create_view_select.str= (char *) YYLIP->get_cpp_ptr();
          }
    break;

  case 2634:

/* Line 1455 of yacc.c  */
#line 15161 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            uint len= YYLIP->get_cpp_ptr() - lex->create_view_select.str;
            void *create_view_select= thd->memdup(lex->create_view_select.str, len);
            lex->create_view_select.length= len;
            lex->create_view_select.str= (char *) create_view_select;
            trim_whitespace(thd->charset(), &lex->create_view_select);
            lex->parsing_options.allows_variable= TRUE;
            lex->parsing_options.allows_select_into= TRUE;
            lex->parsing_options.allows_select_procedure= TRUE;
            lex->parsing_options.allows_derived= TRUE;
          }
    break;

  case 2637:

/* Line 1455 of yacc.c  */
#line 15183 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_NONE; }
    break;

  case 2638:

/* Line 1455 of yacc.c  */
#line 15185 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_CASCADED; }
    break;

  case 2639:

/* Line 1455 of yacc.c  */
#line 15187 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_CASCADED; }
    break;

  case 2640:

/* Line 1455 of yacc.c  */
#line 15189 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_LOCAL; }
    break;

  case 2641:

/* Line 1455 of yacc.c  */
#line 15206 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* $8 */
            Lex->raw_trg_on_table_name_begin= YYLIP->get_tok_start();
          }
    break;

  case 2642:

/* Line 1455 of yacc.c  */
#line 15212 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* $12 */
            Lex->raw_trg_on_table_name_end= YYLIP->get_tok_start();
          }
    break;

  case 2643:

/* Line 1455 of yacc.c  */
#line 15217 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* $15 */
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_head *sp;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "TRIGGER");
              MYSQL_YYABORT;
            }

            if (!(sp= new sp_head()))
              MYSQL_YYABORT;
            sp->reset_thd_mem_root(thd);
            sp->init(lex);
            sp->m_type= TYPE_ENUM_TRIGGER;
            sp->init_sp_name(thd, (yyvsp[(3) - (14)].spname));
            lex->stmt_definition_begin= (yyvsp[(2) - (14)].simple_string);
            lex->ident.str= (yyvsp[(7) - (14)].simple_string);
            lex->ident.length= (yyvsp[(11) - (14)].simple_string) - (yyvsp[(7) - (14)].simple_string);

            lex->sphead= sp;
            lex->spname= (yyvsp[(3) - (14)].spname);

            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
            lex->sphead->m_chistics= &lex->sp_chistics;
            lex->sphead->set_body_start(thd, lip->get_cpp_ptr());
          }
    break;

  case 2644:

/* Line 1455 of yacc.c  */
#line 15247 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* $17 */
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            lex->sql_command= SQLCOM_CREATE_TRIGGER;
            sp->set_stmt_end(YYTHD);
            sp->restore_thd_mem_root(YYTHD);

            if (sp->is_not_allowed_in_function("trigger"))
              MYSQL_YYABORT;

            /*
              We have to do it after parsing trigger body, because some of
              sp_proc_stmt alternatives are not saving/restoring LEX, so
              lex->query_tables can be wiped out.
            */
            if (!lex->select_lex.add_table_to_list(YYTHD, (yyvsp[(9) - (16)].table),
                                                   (LEX_STRING*) 0,
                                                   TL_OPTION_UPDATING,
                                                   TL_READ_NO_INSERT,
                                                   MDL_SHARED_NO_WRITE))
              MYSQL_YYABORT;
          }
    break;

  case 2645:

/* Line 1455 of yacc.c  */
#line 15281 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            if (is_native_function(thd, & (yyvsp[(4) - (8)].lex_str)))
            {
              my_error(ER_NATIVE_FCT_NAME_COLLISION, MYF(0),
                       (yyvsp[(4) - (8)].lex_str).str);
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_CREATE_FUNCTION;
            lex->udf.type= UDFTYPE_AGGREGATE;
            lex->stmt_definition_begin= (yyvsp[(2) - (8)].simple_string);
            lex->udf.name = (yyvsp[(4) - (8)].lex_str);
            lex->udf.returns=(Item_result) (yyvsp[(6) - (8)].num);
            lex->udf.dl=(yyvsp[(8) - (8)].lex_str).str;
          }
    break;

  case 2646:

/* Line 1455 of yacc.c  */
#line 15299 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            if (is_native_function(thd, & (yyvsp[(3) - (7)].lex_str)))
            {
              my_error(ER_NATIVE_FCT_NAME_COLLISION, MYF(0),
                       (yyvsp[(3) - (7)].lex_str).str);
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_CREATE_FUNCTION;
            lex->udf.type= UDFTYPE_FUNCTION;
            lex->stmt_definition_begin= (yyvsp[(1) - (7)].simple_string);
            lex->udf.name = (yyvsp[(3) - (7)].lex_str);
            lex->udf.returns=(Item_result) (yyvsp[(5) - (7)].num);
            lex->udf.dl=(yyvsp[(7) - (7)].lex_str).str;
          }
    break;

  case 2647:

/* Line 1455 of yacc.c  */
#line 15322 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* $5 */
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_head *sp;
            const char* tmp_param_begin;

            lex->stmt_definition_begin= (yyvsp[(1) - (4)].simple_string);
            lex->spname= (yyvsp[(3) - (4)].spname);

            if (lex->sphead)
            {
              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            /* Order is important here: new - reset - init */
            sp= new sp_head();
            if (sp == NULL)
              MYSQL_YYABORT;
            sp->reset_thd_mem_root(thd);
            sp->init(lex);
            sp->init_sp_name(thd, lex->spname);

            sp->m_type= TYPE_ENUM_FUNCTION;
            lex->sphead= sp;

            tmp_param_begin= lip->get_cpp_tok_start();
            tmp_param_begin++;
            lex->sphead->m_param_begin= tmp_param_begin;
          }
    break;

  case 2648:

/* Line 1455 of yacc.c  */
#line 15354 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* $8 */
            Lex->sphead->m_param_end= YYLIP->get_cpp_tok_start();
          }
    break;

  case 2649:

/* Line 1455 of yacc.c  */
#line 15358 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* $10 */
            LEX *lex= Lex;
            lex->charset= NULL;
            lex->length= lex->dec= NULL;
            lex->interval_list.empty();
            lex->type= 0;
            lex->vcol_info= 0;
          }
    break;

  case 2650:

/* Line 1455 of yacc.c  */
#line 15367 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* $12 */
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            /*
              This was disabled in 5.1.12. See bug #20701
              When collation support in SP is implemented, then this test
              should be removed.
            */
            if (((yyvsp[(11) - (11)].num) == MYSQL_TYPE_STRING || (yyvsp[(11) - (11)].num) == MYSQL_TYPE_VARCHAR)
                && (lex->type & BINCMP_FLAG))
            {
              my_error(ER_NOT_SUPPORTED_YET, MYF(0), "return value collation");
              MYSQL_YYABORT;
            }

            if (sp->fill_field_definition(YYTHD, lex,
                                          (enum enum_field_types) (yyvsp[(11) - (11)].num),
                                          &sp->m_return_field_def))
              MYSQL_YYABORT;

            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
    break;

  case 2651:

/* Line 1455 of yacc.c  */
#line 15390 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* $14 */
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            lex->sphead->m_chistics= &lex->sp_chistics;
            lex->sphead->set_body_start(thd, lip->get_cpp_tok_start());
          }
    break;

  case 2652:

/* Line 1455 of yacc.c  */
#line 15399 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            if (sp->is_not_allowed_in_function("function"))
              MYSQL_YYABORT;

            lex->sql_command= SQLCOM_CREATE_SPFUNCTION;
            sp->set_stmt_end(thd);
            if (!(sp->m_flags & sp_head::HAS_RETURN))
            {
              my_error(ER_SP_NORETURN, MYF(0), sp->m_qname.str);
              MYSQL_YYABORT;
            }
            if (is_native_function(thd, & sp->m_name))
            {
              /*
                This warning will be printed when
                [1] A client query is parsed,
                [2] A stored function is loaded by db_load_routine.
                Printing the warning for [2] is intentional, to cover the
                following scenario:
                - A user define a SF 'foo' using MySQL 5.N
                - An application uses select foo(), and works.
                - MySQL 5.{N+1} defines a new native function 'foo', as
                part of a new feature.
                - MySQL 5.{N+1} documentation is updated, and should mention
                that there is a potential incompatible change in case of
                existing stored function named 'foo'.
                - The user deploys 5.{N+1}. At this point, 'select foo()'
                means something different, and the user code is most likely
                broken (it's only safe if the code is 'select db.foo()').
                With a warning printed when the SF is loaded (which has to occur
                before the call), the warning will provide a hint explaining
                the root cause of a later failure of 'select foo()'.
                With no warning printed, the user code will fail with no
                apparent reason.
                Printing a warning each time db_load_routine is executed for
                an ambiguous function is annoying, since that can happen a lot,
                but in practice should not happen unless there *are* name
                collisions.
                If a collision exists, it should not be silenced but fixed.
              */
              push_warning_printf(thd,
                                  MYSQL_ERROR::WARN_LEVEL_NOTE,
                                  ER_NATIVE_FCT_NAME_COLLISION,
                                  ER(ER_NATIVE_FCT_NAME_COLLISION),
                                  sp->m_name.str);
            }
            sp->restore_thd_mem_root(thd);
          }
    break;

  case 2653:

/* Line 1455 of yacc.c  */
#line 15455 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }

            lex->stmt_definition_begin= (yyvsp[(2) - (3)].simple_string);

            /* Order is important here: new - reset - init */
            sp= new sp_head();
            if (sp == NULL)
              MYSQL_YYABORT;
            sp->reset_thd_mem_root(YYTHD);
            sp->init(lex);
            sp->m_type= TYPE_ENUM_PROCEDURE;
            sp->init_sp_name(YYTHD, (yyvsp[(3) - (3)].spname));

            lex->sphead= sp;
          }
    break;

  case 2654:

/* Line 1455 of yacc.c  */
#line 15479 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            const char* tmp_param_begin;

            tmp_param_begin= YYLIP->get_cpp_tok_start();
            tmp_param_begin++;
            Lex->sphead->m_param_begin= tmp_param_begin;
          }
    break;

  case 2655:

/* Line 1455 of yacc.c  */
#line 15488 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            lex->sphead->m_param_end= YYLIP->get_cpp_tok_start();
            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
    break;

  case 2656:

/* Line 1455 of yacc.c  */
#line 15496 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            lex->sphead->m_chistics= &lex->sp_chistics;
            lex->sphead->set_body_start(thd, YYLIP->get_cpp_tok_start());
          }
    break;

  case 2657:

/* Line 1455 of yacc.c  */
#line 15504 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            sp->set_stmt_end(YYTHD);
            lex->sql_command= SQLCOM_CREATE_PROCEDURE;
            sp->restore_thd_mem_root(YYTHD);
          }
    break;

  case 2658:

/* Line 1455 of yacc.c  */
#line 15518 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_START;
          }
    break;

  case 2659:

/* Line 1455 of yacc.c  */
#line 15522 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_END;
          }
    break;

  case 2660:

/* Line 1455 of yacc.c  */
#line 15526 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_PREPARE;
          }
    break;

  case 2661:

/* Line 1455 of yacc.c  */
#line 15530 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_COMMIT;
          }
    break;

  case 2662:

/* Line 1455 of yacc.c  */
#line 15534 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_ROLLBACK;
          }
    break;

  case 2663:

/* Line 1455 of yacc.c  */
#line 15538 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_RECOVER;
          }
    break;

  case 2664:

/* Line 1455 of yacc.c  */
#line 15545 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (1)].string)->length() <= MAXGTRIDSIZE);
            if (!(Lex->xid=(XID *)YYTHD->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set(1L, (yyvsp[(1) - (1)].string)->ptr(), (yyvsp[(1) - (1)].string)->length(), 0, 0);
          }
    break;

  case 2665:

/* Line 1455 of yacc.c  */
#line 15552 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].string)->length() <= MAXGTRIDSIZE && (yyvsp[(3) - (3)].string)->length() <= MAXBQUALSIZE);
            if (!(Lex->xid=(XID *)YYTHD->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set(1L, (yyvsp[(1) - (3)].string)->ptr(), (yyvsp[(1) - (3)].string)->length(), (yyvsp[(3) - (3)].string)->ptr(), (yyvsp[(3) - (3)].string)->length());
          }
    break;

  case 2666:

/* Line 1455 of yacc.c  */
#line 15559 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].string)->length() <= MAXGTRIDSIZE && (yyvsp[(3) - (5)].string)->length() <= MAXBQUALSIZE);
            if (!(Lex->xid=(XID *)YYTHD->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set((yyvsp[(5) - (5)].ulong_num), (yyvsp[(1) - (5)].string)->ptr(), (yyvsp[(1) - (5)].string)->length(), (yyvsp[(3) - (5)].string)->ptr(), (yyvsp[(3) - (5)].string)->length());
          }
    break;

  case 2667:

/* Line 1455 of yacc.c  */
#line 15568 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2668:

/* Line 1455 of yacc.c  */
#line 15569 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2669:

/* Line 1455 of yacc.c  */
#line 15573 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2670:

/* Line 1455 of yacc.c  */
#line 15574 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_JOIN;        }
    break;

  case 2671:

/* Line 1455 of yacc.c  */
#line 15575 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_RESUME;      }
    break;

  case 2672:

/* Line 1455 of yacc.c  */
#line 15579 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2673:

/* Line 1455 of yacc.c  */
#line 15580 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_ONE_PHASE;   }
    break;

  case 2674:

/* Line 1455 of yacc.c  */
#line 15585 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2675:

/* Line 1455 of yacc.c  */
#line 15587 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_SUSPEND;     }
    break;

  case 2677:

/* Line 1455 of yacc.c  */
#line 15592 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2678:

/* Line 1455 of yacc.c  */
#line 15593 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_FOR_MIGRATE; }
    break;

  case 2679:

/* Line 1455 of yacc.c  */
#line 15598 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_INSTALL_PLUGIN;
            lex->comment= (yyvsp[(3) - (5)].lex_str);
            lex->ident= (yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 2680:

/* Line 1455 of yacc.c  */
#line 15605 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_INSTALL_PLUGIN;
            lex->comment= null_lex_str;
            lex->ident= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 2681:

/* Line 1455 of yacc.c  */
#line 15615 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_UNINSTALL_PLUGIN;
            lex->comment= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 2682:

/* Line 1455 of yacc.c  */
#line 15621 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_UNINSTALL_PLUGIN;
            lex->comment= null_lex_str;
            lex->ident= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 2683:

/* Line 1455 of yacc.c  */
#line 15632 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
	  YYERROR;
	}
    break;



/* Line 1455 of yacc.c  */
#line 41858 "/home/buildbot/buildbot/build/mkdist/sql/sql_yacc.cc"
      default: break;
    }
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;

  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (YY_("syntax error"));
#else
      {
	YYSIZE_T yysize = yysyntax_error (0, yystate, yychar);
	if (yymsg_alloc < yysize && yymsg_alloc < YYSTACK_ALLOC_MAXIMUM)
	  {
	    YYSIZE_T yyalloc = 2 * yysize;
	    if (! (yysize <= yyalloc && yyalloc <= YYSTACK_ALLOC_MAXIMUM))
	      yyalloc = YYSTACK_ALLOC_MAXIMUM;
	    if (yymsg != yymsgbuf)
	      YYSTACK_FREE (yymsg);
	    yymsg = (char *) YYSTACK_ALLOC (yyalloc);
	    if (yymsg)
	      yymsg_alloc = yyalloc;
	    else
	      {
		yymsg = yymsgbuf;
		yymsg_alloc = sizeof yymsgbuf;
	      }
	  }

	if (0 < yysize && yysize <= yymsg_alloc)
	  {
	    (void) yysyntax_error (yymsg, yystate, yychar);
	    yyerror (yymsg);
	  }
	else
	  {
	    yyerror (YY_("syntax error"));
	    if (yysize != 0)
	      goto yyexhaustedlab;
	  }
      }
#endif
    }



  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */

      if (yychar <= YYEOF)
	{
	  /* Return failure if at end of input.  */
	  if (yychar == YYEOF)
	    YYABORT;
	}
      else
	{
	  yydestruct ("Error: discarding",
		      yytoken, &yylval);
	  yychar = YYEMPTY;
	}
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  /* Do not reclaim the symbols of the rule which action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (yyn != YYPACT_NINF)
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
	YYABORT;


      yydestruct ("Error: popping",
		  yystos[yystate], yyvsp);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  *++yyvsp = yylval;


  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#if !defined(yyoverflow) || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEMPTY)
     yydestruct ("Cleanup: discarding lookahead",
		 yytoken, &yylval);
  /* Do not reclaim the symbols of the rule which action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
		  yystos[*yyssp], yyvsp);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  /* Make sure YYID is used.  */
  return YYID (yyresult);
}



