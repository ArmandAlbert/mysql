
/* A Bison parser, made by GNU Bison 2.4.1.  */

/* Skeleton implementation for Bison's Yacc-like parsers in C
   
      Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003, 2004, 2005, 2006
   Free Software Foundation, Inc.
   
   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.
   
   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "2.4.1"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1

/* Using locations.  */
#define YYLSP_NEEDED 0

/* Substitute the variable and function names.  */
#define yyparse         MYSQLparse
#define yylex           MYSQLlex
#define yyerror         MYSQLerror
#define yylval          MYSQLlval
#define yychar          MYSQLchar
#define yydebug         MYSQLdebug
#define yynerrs         MYSQLnerrs


/* Copy the first part of user declarations.  */

/* Line 189 of yacc.c  */
#line 25 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"

/* thd is passed as an argument to yyparse(), and subsequently to yylex().
** The type will be void*, so it must be  cast to (THD*) when used.
** Use the YYTHD macro for this.
*/
#define YYPARSE_PARAM yythd
#define YYLEX_PARAM yythd
#define YYTHD ((THD *)yythd)
#define YYLIP (& YYTHD->m_parser_state->m_lip)
#define YYPS (& YYTHD->m_parser_state->m_yacc)

#define MYSQL_YACC
#define YYINITDEPTH 100
#define YYMAXDEPTH 3200                        /* Because of 64K stack */
#define Lex (YYTHD->lex)

#define Select Lex->current_select
#include "sql_priv.h"
#include "unireg.h"                    // REQUIRED: for other includes
#include "sql_parse.h"                        /* comp_*_creator */
#include "sql_table.h"                        /* primary_key_name */
#include "sql_partition.h"  /* mem_alloc_error, partition_info, HASH_PARTITION */
#include "sql_acl.h"                          /* *_ACL */
#include "password.h"       /* my_make_scrambled_password_323, my_make_scrambled_password */
#include "sql_class.h"      /* Key_part_spec, enum_filetype, Diag_condition_item_name */
#include "slave.h"
#include "lex_symbol.h"
#include "item_create.h"
#include "sp_head.h"
#include "sp_pcontext.h"
#include "sp_rcontext.h"
#include "sp.h"
#include "sql_alter.h"                         // Alter_table*_statement
#include "sql_truncate.h"                      // Truncate_statement
#include "sql_admin.h"                         // Analyze/Check..._table_stmt
#include "sql_partition_admin.h"               // Alter_table_*_partition_stmt
#include "sql_signal.h"
#include "event_parse_data.h"
#include "create_options.h"
#include <myisam.h>
#include <myisammrg.h>
#include "keycaches.h"
#include "set_var.h"
#include "rpl_mi.h"

/* this is to get the bison compilation windows warnings out */
#ifdef _MSC_VER
/* warning C4065: switch statement contains 'default' but no 'case' labels */
#pragma warning (disable : 4065)
#endif

int yylex(void *yylval, void *yythd);

#define yyoverflow(A,B,C,D,E,F)               \
  {                                           \
    ulong val= *(F);                          \
    if (my_yyoverflow((B), (D), &val))        \
    {                                         \
      yyerror((char*) (A));                   \
      return 2;                               \
    }                                         \
    else                                      \
    {                                         \
      *(F)= (YYSIZE_T)val;                    \
    }                                         \
  }

#define MYSQL_YYABORT                         \
  do                                          \
  {                                           \
    LEX::cleanup_lex_after_parse_error(YYTHD);\
    YYABORT;                                  \
  } while (0)

#define MYSQL_YYABORT_UNLESS(A)         \
  if (!(A))                             \
  {                                     \
    my_parse_error(ER(ER_SYNTAX_ERROR));\
    MYSQL_YYABORT;                      \
  }

/*
  Work around for broken code generated by bison 1.875.

  The code generated by bison 1.875a and later, bison 2.1 and bison 2.2 is ok.
  With bison 1.875 however, the generated code contains:
<pre>
  yyerrlab1:
  #if defined (__GNUC_MINOR__) && 2093 <= (__GNUC__ * 1000 + __GNUC_MINOR__)
    __attribute__ ((__unused__))
  #endif
</pre>
  This usage of __attribute__ is illegal, so we remove it.
  See the following references for details:
  http://lists.gnu.org/archive/html/bug-bison/2004-02/msg00014.html
  http://gcc.gnu.org/bugzilla/show_bug.cgi?id=14273
*/

#if defined (__GNUC_MINOR__) && 2093 <= (__GNUC__ * 1000 + __GNUC_MINOR__)
#undef __attribute__
#define __attribute__(X)
#endif


#ifndef DBUG_OFF
#define YYDEBUG 1
#else
#define YYDEBUG 0
#endif

/**
  @brief Push an error message into MySQL error stack with line
  and position information.

  This function provides semantic action implementers with a way
  to push the famous "You have a syntax error near..." error
  message into the error stack, which is normally produced only if
  a parse error is discovered internally by the Bison generated
  parser.
*/

void my_parse_error(const char *s)
{
  THD *thd= current_thd;
  Lex_input_stream *lip= & thd->m_parser_state->m_lip;

  const char *yytext= lip->get_tok_start();
  if (!yytext)
    yytext= "";

  /* Push an error into the error stack */
  ErrConvString err(yytext, strlen(yytext), thd->variables.character_set_client);
  my_printf_error(ER_PARSE_ERROR,  ER(ER_PARSE_ERROR), MYF(0), s,
                  err.ptr(), lip->yylineno);
}

/**
  @brief Bison callback to report a syntax/OOM error

  This function is invoked by the bison-generated parser
  when a syntax error, a parse error or an out-of-memory
  condition occurs. This function is not invoked when the
  parser is requested to abort by semantic action code
  by means of YYABORT or YYACCEPT macros. This is why these
  macros should not be used (use MYSQL_YYABORT/MYSQL_YYACCEPT
  instead).

  The parser will abort immediately after invoking this callback.

  This function is not for use in semantic actions and is internal to
  the parser, as it performs some pre-return cleanup. 
  In semantic actions, please use my_parse_error or my_error to
  push an error into the error stack and MYSQL_YYABORT
  to abort from the parser.
*/

void MYSQLerror(const char *s)
{
  THD *thd= current_thd;

  /*
    Restore the original LEX if it was replaced when parsing
    a stored procedure. We must ensure that a parsing error
    does not leave any side effects in the THD.
  */
  LEX::cleanup_lex_after_parse_error(thd);

  /* "parse error" changed into "syntax error" between bison 1.75 and 1.875 */
  if (strcmp(s,"parse error") == 0 || strcmp(s,"syntax error") == 0)
    s= ER(ER_SYNTAX_ERROR);
  my_parse_error(s);
}


#ifndef DBUG_OFF
void turn_parser_debug_on()
{
  /*
     MYSQLdebug is in sql/sql_yacc.cc, in bison generated code.
     Turning this option on is **VERY** verbose, and should be
     used when investigating a syntax error problem only.

     The syntax to run with bison traces is as follows :
     - Starting a server manually :
       mysqld --debug-dbug="d,parser_debug" ...
     - Running a test :
       mysql-test-run.pl --mysqld="--debug-dbug=d,parser_debug" ...

     The result will be in the process stderr (var/log/master.err)
   */

  extern int yydebug;
  yydebug= 1;
}
#endif

static bool is_native_function(THD *thd, const LEX_STRING *name)
{
  if (find_native_function_builder(thd, *name))
    return true;

  if (is_lex_native_function(name))
    return true;

  return false;
}


/**
  Helper action for a case statement (entering the CASE).
  This helper is used for both 'simple' and 'searched' cases.
  This helper, with the other case_stmt_action_..., is executed when
  the following SQL code is parsed:
<pre>
CREATE PROCEDURE proc_19194_simple(i int)
BEGIN
  DECLARE str CHAR(10);

  CASE i
    WHEN 1 THEN SET str="1";
    WHEN 2 THEN SET str="2";
    WHEN 3 THEN SET str="3";
    ELSE SET str="unknown";
  END CASE;

  SELECT str;
END
</pre>
  The actions are used to generate the following code:
<pre>
SHOW PROCEDURE CODE proc_19194_simple;
Pos     Instruction
0       set str@1 NULL
1       set_case_expr (12) 0 i@0
2       jump_if_not 5(12) (case_expr@0 = 1)
3       set str@1 _latin1'1'
4       jump 12
5       jump_if_not 8(12) (case_expr@0 = 2)
6       set str@1 _latin1'2'
7       jump 12
8       jump_if_not 11(12) (case_expr@0 = 3)
9       set str@1 _latin1'3'
10      jump 12
11      set str@1 _latin1'unknown'
12      stmt 0 "SELECT str"
</pre>

  @param lex the parser lex context
*/

void case_stmt_action_case(LEX *lex)
{
  lex->sphead->new_cont_backpatch(NULL);

  /*
    BACKPATCH: Creating target label for the jump to
    "case_stmt_action_end_case"
    (Instruction 12 in the example)
  */

  lex->spcont->push_label((char *)"", lex->sphead->instructions());
}

/**
  Helper action for a case expression statement (the expr in 'CASE expr').
  This helper is used for 'searched' cases only.
  @param lex the parser lex context
  @param expr the parsed expression
  @return 0 on success
*/

int case_stmt_action_expr(LEX *lex, Item* expr)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *parsing_ctx= lex->spcont;
  int case_expr_id= parsing_ctx->register_case_expr();
  sp_instr_set_case_expr *i;

  if (parsing_ctx->push_case_expr_id(case_expr_id))
    return 1;

  i= new sp_instr_set_case_expr(sp->instructions(),
                                parsing_ctx, case_expr_id, expr, lex);

  sp->add_cont_backpatch(i);
  return sp->add_instr(i);
}

/**
  Helper action for a case when condition.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
  @param when the parsed expression for the WHEN clause
  @param simple true for simple cases, false for searched cases
*/

int case_stmt_action_when(LEX *lex, Item *when, bool simple)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *ctx= lex->spcont;
  uint ip= sp->instructions();
  sp_instr_jump_if_not *i;
  Item_case_expr *var;
  Item *expr;

  if (simple)
  {
    var= new Item_case_expr(ctx->get_current_case_expr_id());

#ifndef DBUG_OFF
    if (var)
    {
      var->m_sp= sp;
    }
#endif

    expr= new Item_func_eq(var, when);
    i= new sp_instr_jump_if_not(ip, ctx, expr, lex);
  }
  else
    i= new sp_instr_jump_if_not(ip, ctx, when, lex);

  /*
    BACKPATCH: Registering forward jump from
    "case_stmt_action_when" to "case_stmt_action_then"
    (jump_if_not from instruction 2 to 5, 5 to 8 ... in the example)
  */

  return !test(i) ||
         sp->push_backpatch(i, ctx->push_label((char *)"", 0)) ||
         sp->add_cont_backpatch(i) ||
         sp->add_instr(i);
}

/**
  Helper action for a case then statements.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
*/

int case_stmt_action_then(LEX *lex)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *ctx= lex->spcont;
  uint ip= sp->instructions();
  sp_instr_jump *i = new sp_instr_jump(ip, ctx);
  if (!test(i) || sp->add_instr(i))
    return 1;

  /*
    BACKPATCH: Resolving forward jump from
    "case_stmt_action_when" to "case_stmt_action_then"
    (jump_if_not from instruction 2 to 5, 5 to 8 ... in the example)
  */

  sp->backpatch(ctx->pop_label());

  /*
    BACKPATCH: Registering forward jump from
    "case_stmt_action_then" to "case_stmt_action_end_case"
    (jump from instruction 4 to 12, 7 to 12 ... in the example)
  */

  return sp->push_backpatch(i, ctx->last_label());
}

/**
  Helper action for an end case.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
  @param simple true for simple cases, false for searched cases
*/

void case_stmt_action_end_case(LEX *lex, bool simple)
{
  /*
    BACKPATCH: Resolving forward jump from
    "case_stmt_action_then" to "case_stmt_action_end_case"
    (jump from instruction 4 to 12, 7 to 12 ... in the example)
  */
  lex->sphead->backpatch(lex->spcont->pop_label());

  if (simple)
    lex->spcont->pop_case_expr_id();

  lex->sphead->do_cont_backpatch();
}


static bool
find_sys_var_null_base(THD *thd, struct sys_var_with_base *tmp)
{
  tmp->var= find_sys_var(thd, tmp->base_name.str, tmp->base_name.length);

  if (tmp->var == NULL)
    my_error(ER_UNKNOWN_SYSTEM_VARIABLE, MYF(0), tmp->base_name.str);
  else
    tmp->base_name= null_lex_str;

  return thd->is_error();
}


/**
  Helper action for a SET statement.
  Used to push a system variable into the assignment list.

  @param thd      the current thread
  @param tmp      the system variable with base name
  @param var_type the scope of the variable
  @param val      the value being assigned to the variable

  @return TRUE if error, FALSE otherwise.
*/

static bool
set_system_variable(THD *thd, struct sys_var_with_base *tmp,
                    enum enum_var_type var_type, Item *val)
{
  set_var *var;
  LEX *lex= thd->lex;

  /* No AUTOCOMMIT from a stored function or trigger. */
  if (lex->spcont && tmp->var == Sys_autocommit_ptr)
    lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;

  if (! (var= new set_var(var_type, tmp->var, &tmp->base_name, val)))
    return TRUE;

  return lex->var_list.push_back(var);
}


/**
  Helper action for a SET statement.
  Used to push a SP local variable into the assignment list.

  @param thd      the current thread
  @param var_type the SP local variable
  @param val      the value being assigned to the variable

  @return TRUE if error, FALSE otherwise.
*/

static bool
set_local_variable(THD *thd, sp_variable_t *spv, Item *val)
{
  Item *it;
  LEX *lex= thd->lex;
  sp_instr_set *sp_set;

  if (val)
    it= val;
  else if (spv->dflt)
    it= spv->dflt;
  else
  {
    it= new (thd->mem_root) Item_null();
    if (it == NULL)
      return TRUE;
  }

  sp_set= new sp_instr_set(lex->sphead->instructions(), lex->spcont,
                           spv->offset, it, spv->type, lex, TRUE);

  return (sp_set == NULL || lex->sphead->add_instr(sp_set));
}


/**
  Helper action for a SET statement.
  Used to SET a field of NEW row.

  @param thd      the current thread
  @param name     the field name
  @param val      the value being assigned to the row

  @return TRUE if error, FALSE otherwise.
*/

static bool
set_trigger_new_row(THD *thd, LEX_STRING *name, Item *val)
{
  LEX *lex= thd->lex;
  Item_trigger_field *trg_fld;
  sp_instr_set_trigger_field *sp_fld;

  /* QQ: Shouldn't this be field's default value ? */
  if (! val)
    val= new Item_null();

  DBUG_ASSERT(lex->trg_chistics.action_time == TRG_ACTION_BEFORE &&
              (lex->trg_chistics.event == TRG_EVENT_INSERT ||
               lex->trg_chistics.event == TRG_EVENT_UPDATE));

  trg_fld= new (thd->mem_root)
            Item_trigger_field(lex->current_context(),
                               Item_trigger_field::NEW_ROW,
                               name->str, UPDATE_ACL, FALSE);

  if (trg_fld == NULL)
    return TRUE;

  sp_fld= new sp_instr_set_trigger_field(lex->sphead->instructions(),
                                         lex->spcont, trg_fld, val, lex);

  if (sp_fld == NULL)
    return TRUE;

  /*
    Let us add this item to list of all Item_trigger_field
    objects in trigger.
  */
  lex->trg_table_fields.link_in_list(trg_fld, &trg_fld->next_trg_field);

  return lex->sphead->add_instr(sp_fld);
}


/**
  Helper to resolve the SQL:2003 Syntax exception 1) in <in predicate>.
  See SQL:2003, Part 2, section 8.4 <in predicate>, Note 184, page 383.
  This function returns the proper item for the SQL expression
  <code>left [NOT] IN ( expr )</code>
  @param thd the current thread
  @param left the in predicand
  @param equal true for IN predicates, false for NOT IN predicates
  @param expr first and only expression of the in value list
  @return an expression representing the IN predicate.
*/
Item* handle_sql2003_note184_exception(THD *thd, Item* left, bool equal,
                                       Item *expr)
{
  /*
    Relevant references for this issue:
    - SQL:2003, Part 2, section 8.4 <in predicate>, page 383,
    - SQL:2003, Part 2, section 7.2 <row value expression>, page 296,
    - SQL:2003, Part 2, section 6.3 <value expression primary>, page 174,
    - SQL:2003, Part 2, section 7.15 <subquery>, page 370,
    - SQL:2003 Feature F561, "Full value expressions".

    The exception in SQL:2003 Note 184 means:
    Item_singlerow_subselect, which corresponds to a <scalar subquery>,
    should be re-interpreted as an Item_in_subselect, which corresponds
    to a <table subquery> when used inside an <in predicate>.

    Our reading of Note 184 is reccursive, so that all:
    - IN (( <subquery> ))
    - IN ((( <subquery> )))
    - IN '('^N <subquery> ')'^N
    - etc
    should be interpreted as a <table subquery>, no matter how deep in the
    expression the <subquery> is.
  */

  Item *result;

  DBUG_ENTER("handle_sql2003_note184_exception");

  if (expr->type() == Item::SUBSELECT_ITEM)
  {
    Item_subselect *expr2 = (Item_subselect*) expr;

    if (expr2->substype() == Item_subselect::SINGLEROW_SUBS)
    {
      Item_singlerow_subselect *expr3 = (Item_singlerow_subselect*) expr2;
      st_select_lex *subselect;

      /*
        Implement the mandated change, by altering the semantic tree:
          left IN Item_singlerow_subselect(subselect)
        is modified to
          left IN (subselect)
        which is represented as
          Item_in_subselect(left, subselect)
      */
      subselect= expr3->invalidate_and_restore_select_lex();
      result= new (thd->mem_root) Item_in_subselect(left, subselect);

      if (! equal)
        result = negate_expression(thd, result);

      DBUG_RETURN(result);
    }
  }

  if (equal)
    result= new (thd->mem_root) Item_func_eq(left, expr);
  else
    result= new (thd->mem_root) Item_func_ne(left, expr);

  DBUG_RETURN(result);
}

/**
   @brief Creates a new SELECT_LEX for a UNION branch.

   Sets up and initializes a SELECT_LEX structure for a query once the parser
   discovers a UNION token. The current SELECT_LEX is pushed on the stack and
   the new SELECT_LEX becomes the current one.

   @param lex The parser state.

   @param is_union_distinct True if the union preceding the new select statement
   uses UNION DISTINCT.

   @param is_top_level This should be @c TRUE if the newly created SELECT_LEX
   is a non-nested statement.

   @return <code>false</code> if successful, <code>true</code> if an error was
   reported. In the latter case parsing should stop.
 */
bool add_select_to_union_list(LEX *lex, bool is_union_distinct, 
                              bool is_top_level)
{
  /* 
     Only the last SELECT can have INTO. Since the grammar won't allow INTO in
     a nested SELECT, we make this check only when creating a top-level SELECT.
  */
  if (is_top_level && lex->result)
  {
    my_error(ER_WRONG_USAGE, MYF(0), "UNION", "INTO");
    return TRUE;
  }
  if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
  {
    my_parse_error(ER(ER_SYNTAX_ERROR));
    return TRUE;
  }
  /* This counter shouldn't be incremented for UNION parts */
  lex->nest_level--;
  if (mysql_new_select(lex, 0))
    return TRUE;
  mysql_init_select(lex);
  lex->current_select->linkage=UNION_TYPE;
  if (is_union_distinct) /* UNION DISTINCT - remember position */
    lex->current_select->master_unit()->union_distinct=
      lex->current_select;
  return FALSE;
}

/**
   @brief Initializes a SELECT_LEX for a query within parentheses (aka
   braces).

   @return false if successful, true if an error was reported. In the latter
   case parsing should stop.
 */
bool setup_select_in_parentheses(LEX *lex) 
{
  SELECT_LEX * sel= lex->current_select;
  if (sel->set_braces(1))
  {
    my_parse_error(ER(ER_SYNTAX_ERROR));
    return TRUE;
  }
  if (sel->linkage == UNION_TYPE &&
      !sel->master_unit()->first_select()->braces &&
      sel->master_unit()->first_select()->linkage ==
      UNION_TYPE)
  {
    my_parse_error(ER(ER_SYNTAX_ERROR));
    return TRUE;
  }
  if (sel->linkage == UNION_TYPE &&
      sel->olap != UNSPECIFIED_OLAP_TYPE &&
      sel->master_unit()->fake_select_lex)
  {
    my_error(ER_WRONG_USAGE, MYF(0), "CUBE/ROLLUP", "ORDER BY");
    return TRUE;
  }
  /* select in braces, can't contain global parameters */
  if (sel->master_unit()->fake_select_lex)
    sel->master_unit()->global_parameters=
      sel->master_unit()->fake_select_lex;
  return FALSE;
}

static bool add_create_index_prepare (LEX *lex, Table_ident *table)
{
  lex->sql_command= SQLCOM_CREATE_INDEX;
  if (!lex->current_select->add_table_to_list(lex->thd, table, NULL,
                                              TL_OPTION_UPDATING,
                                              TL_READ_NO_INSERT,
                                              MDL_SHARED_NO_WRITE))
    return TRUE;
  lex->alter_info.reset();
  lex->alter_info.flags= ALTER_ADD_INDEX;
  lex->col_list.empty();
  lex->change= NullS;
  lex->option_list= NULL;
  return FALSE;
}

static bool add_create_index (LEX *lex, Key::Keytype type,
                              const LEX_STRING &name,
                              KEY_CREATE_INFO *info= NULL, bool generated= 0)
{
  Key *key;
  key= new Key(type, name, info ? info : &lex->key_create_info, generated, 
               lex->col_list, lex->option_list);
  if (key == NULL)
    return TRUE;

  lex->alter_info.key_list.push_back(key);
  lex->col_list.empty();
  return FALSE;
}


/**
  Create a separate LEX for each assignment if in SP.

  If we are in SP we want have own LEX for each assignment.
  This is mostly because it is hard for several sp_instr_set
  and sp_instr_set_trigger instructions share one LEX.
  (Well, it is theoretically possible but adds some extra
  overhead on preparation for execution stage and IMO less
  robust).

  QQ: May be we should simply prohibit group assignments in SP?

  @see sp_create_assignment_instr

  @param thd           Thread context
  @param no_lookahead  True if the parser has no lookahead
*/

static void sp_create_assignment_lex(THD *thd, bool no_lookahead)
{
  LEX *lex= thd->lex;

  if (lex->sphead)
  {
    Lex_input_stream *lip= &thd->m_parser_state->m_lip;
    LEX *old_lex= lex;
    lex->sphead->reset_lex(thd);
    lex= thd->lex;

    /* Set new LEX as if we at start of set rule. */
    lex->sql_command= SQLCOM_SET_OPTION;
    mysql_init_select(lex);
    lex->var_list.empty();
    lex->one_shot_set= 0;
    lex->autocommit= 0;
    /* get_ptr() is only correct with no lookahead. */
    DBUG_ASSERT(no_lookahead);
    lex->sphead->m_tmp_query= lip->get_ptr();
    /* Inherit from outer lex. */
    lex->option_type= old_lex->option_type;
  }
}


/**
  Create a SP instruction for a SET assignment.

  @see sp_create_assignment_lex

  @param thd           Thread context
  @param no_lookahead  True if the parser has no lookahead

  @return false if success, true otherwise.
*/

static bool sp_create_assignment_instr(THD *thd, bool no_lookahead)
{
  LEX *lex= thd->lex;

  if (lex->sphead)
  {
    sp_head *sp= lex->sphead;

    if (!lex->var_list.is_empty())
    {
      /*
        We have assignment to user or system variable or
        option setting, so we should construct sp_instr_stmt
        for it.
      */
      LEX_STRING qbuff;
      sp_instr_stmt *i;
      Lex_input_stream *lip= &thd->m_parser_state->m_lip;

      if (!(i= new sp_instr_stmt(sp->instructions(), lex->spcont,
                                 lex)))
        return true;

      /*
        Extract the query statement from the tokenizer.  The
        end is either lip->ptr, if there was no lookahead,
        lip->tok_end otherwise.
      */
      if (no_lookahead)
        qbuff.length= lip->get_ptr() - sp->m_tmp_query;
      else
        qbuff.length= lip->get_tok_end() - sp->m_tmp_query;

      if (!(qbuff.str= (char*) alloc_root(thd->mem_root,
                                          qbuff.length + 5)))
        return true;

      strmake(strmake(qbuff.str, "SET ", 4), sp->m_tmp_query,
              qbuff.length);
      qbuff.length+= 4;
      i->m_query= qbuff;
      if (sp->add_instr(i))
        return true;
    }
    enum_var_type inner_option_type= lex->option_type;
    if (lex->sphead->restore_lex(thd))
      return true;
    /* Copy option_type to outer lex in case it has changed. */
    thd->lex->option_type= inner_option_type;
  }
  return false;
}




/* Line 189 of yacc.c  */
#line 903 "/home/buildbot/buildbot/build/mkdist/sql/sql_yacc.cc"

/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* Enabling the token table.  */
#ifndef YYTOKEN_TABLE
# define YYTOKEN_TABLE 0
#endif


/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     ABORT_SYM = 258,
     ACCESSIBLE_SYM = 259,
     ACTION = 260,
     ADD = 261,
     ADDDATE_SYM = 262,
     AFTER_SYM = 263,
     AGAINST = 264,
     AGGREGATE_SYM = 265,
     ALGORITHM_SYM = 266,
     ALL = 267,
     ALTER = 268,
     ALWAYS_SYM = 269,
     ANALYZE_SYM = 270,
     AND_AND_SYM = 271,
     AND_SYM = 272,
     ANY_SYM = 273,
     AS = 274,
     ASC = 275,
     ASCII_SYM = 276,
     ASENSITIVE_SYM = 277,
     AT_SYM = 278,
     AUTHORS_SYM = 279,
     AUTOEXTEND_SIZE_SYM = 280,
     AUTO_INC = 281,
     AVG_ROW_LENGTH = 282,
     AVG_SYM = 283,
     BACKUP_SYM = 284,
     BEFORE_SYM = 285,
     BEGIN_SYM = 286,
     BETWEEN_SYM = 287,
     BIGINT = 288,
     BINARY = 289,
     BINLOG_SYM = 290,
     BIN_NUM = 291,
     BIT_AND = 292,
     BIT_OR = 293,
     BIT_SYM = 294,
     BIT_XOR = 295,
     BLOB_SYM = 296,
     BLOCK_SYM = 297,
     BOOLEAN_SYM = 298,
     BOOL_SYM = 299,
     BOTH = 300,
     BTREE_SYM = 301,
     BY = 302,
     BYTE_SYM = 303,
     CACHE_SYM = 304,
     CALL_SYM = 305,
     CASCADE = 306,
     CASCADED = 307,
     CASE_SYM = 308,
     CAST_SYM = 309,
     CATALOG_NAME_SYM = 310,
     CHAIN_SYM = 311,
     CHANGE = 312,
     CHANGED = 313,
     CHARSET = 314,
     CHAR_SYM = 315,
     CHECKPOINT_SYM = 316,
     CHECKSUM_SYM = 317,
     CHECK_SYM = 318,
     CIPHER_SYM = 319,
     CLASS_ORIGIN_SYM = 320,
     CLIENT_SYM = 321,
     CLIENT_STATS_SYM = 322,
     CLOSE_SYM = 323,
     COALESCE = 324,
     CODE_SYM = 325,
     COLLATE_SYM = 326,
     COLLATION_SYM = 327,
     COLUMNS = 328,
     COLUMN_ADD_SYM = 329,
     COLUMN_CHECK_SYM = 330,
     COLUMN_CREATE_SYM = 331,
     COLUMN_DELETE_SYM = 332,
     COLUMN_GET_SYM = 333,
     COLUMN_SYM = 334,
     COLUMN_NAME_SYM = 335,
     COMMENT_SYM = 336,
     COMMITTED_SYM = 337,
     COMMIT_SYM = 338,
     COMPACT_SYM = 339,
     COMPLETION_SYM = 340,
     COMPRESSED_SYM = 341,
     CONCURRENT = 342,
     CONDITION_SYM = 343,
     CONNECTION_SYM = 344,
     CONSISTENT_SYM = 345,
     CONSTRAINT = 346,
     CONSTRAINT_CATALOG_SYM = 347,
     CONSTRAINT_NAME_SYM = 348,
     CONSTRAINT_SCHEMA_SYM = 349,
     CONTAINS_SYM = 350,
     CONTEXT_SYM = 351,
     CONTINUE_SYM = 352,
     CONTRIBUTORS_SYM = 353,
     CONVERT_SYM = 354,
     COUNT_SYM = 355,
     CPU_SYM = 356,
     CREATE = 357,
     CROSS = 358,
     CUBE_SYM = 359,
     CURDATE = 360,
     CURRENT_USER = 361,
     CURSOR_SYM = 362,
     CURSOR_NAME_SYM = 363,
     CURTIME = 364,
     DATABASE = 365,
     DATABASES = 366,
     DATAFILE_SYM = 367,
     DATA_SYM = 368,
     DATETIME = 369,
     DATE_ADD_INTERVAL = 370,
     DATE_SUB_INTERVAL = 371,
     DATE_SYM = 372,
     DAY_HOUR_SYM = 373,
     DAY_MICROSECOND_SYM = 374,
     DAY_MINUTE_SYM = 375,
     DAY_SECOND_SYM = 376,
     DAY_SYM = 377,
     DEALLOCATE_SYM = 378,
     DECIMAL_NUM = 379,
     DECIMAL_SYM = 380,
     DECLARE_SYM = 381,
     DEFAULT = 382,
     DEFINER_SYM = 383,
     DELAYED_SYM = 384,
     DELAY_KEY_WRITE_SYM = 385,
     DELETE_SYM = 386,
     DESC = 387,
     DESCRIBE = 388,
     DES_KEY_FILE = 389,
     DETERMINISTIC_SYM = 390,
     DIRECTORY_SYM = 391,
     DISABLE_SYM = 392,
     DISCARD = 393,
     DISK_SYM = 394,
     DISTINCT = 395,
     DIV_SYM = 396,
     DOUBLE_SYM = 397,
     DO_SYM = 398,
     DROP = 399,
     DUAL_SYM = 400,
     DUMPFILE = 401,
     DUPLICATE_SYM = 402,
     DYNAMIC_SYM = 403,
     EACH_SYM = 404,
     ELSE = 405,
     ELSEIF_SYM = 406,
     ENABLE_SYM = 407,
     ENCLOSED = 408,
     END = 409,
     ENDS_SYM = 410,
     END_OF_INPUT = 411,
     ENGINES_SYM = 412,
     ENGINE_SYM = 413,
     ENUM = 414,
     EQ = 415,
     EQUAL_SYM = 416,
     ERROR_SYM = 417,
     ERRORS = 418,
     ESCAPED = 419,
     ESCAPE_SYM = 420,
     EVENTS_SYM = 421,
     EVENT_SYM = 422,
     EVERY_SYM = 423,
     EXAMINED_SYM = 424,
     EXECUTE_SYM = 425,
     EXISTS = 426,
     EXIT_SYM = 427,
     EXPANSION_SYM = 428,
     EXTENDED_SYM = 429,
     EXTENT_SIZE_SYM = 430,
     EXTRACT_SYM = 431,
     FALSE_SYM = 432,
     FAST_SYM = 433,
     FAULTS_SYM = 434,
     FETCH_SYM = 435,
     FILE_SYM = 436,
     FIRST_SYM = 437,
     FIXED_SYM = 438,
     FLOAT_NUM = 439,
     FLOAT_SYM = 440,
     FLUSH_SYM = 441,
     FORCE_SYM = 442,
     FOREIGN = 443,
     FOR_SYM = 444,
     FOUND_SYM = 445,
     FROM = 446,
     FULL = 447,
     FULLTEXT_SYM = 448,
     FUNCTION_SYM = 449,
     GE = 450,
     GENERAL = 451,
     GENERATED_SYM = 452,
     GEOMETRYCOLLECTION = 453,
     GEOMETRY_SYM = 454,
     GET_FORMAT = 455,
     GLOBAL_SYM = 456,
     GRANT = 457,
     GRANTS = 458,
     GROUP_SYM = 459,
     GROUP_CONCAT_SYM = 460,
     GT_SYM = 461,
     HANDLER_SYM = 462,
     HARD_SYM = 463,
     HASH_SYM = 464,
     HAVING = 465,
     HELP_SYM = 466,
     HEX_NUM = 467,
     HIGH_PRIORITY = 468,
     HOST_SYM = 469,
     HOSTS_SYM = 470,
     HOUR_MICROSECOND_SYM = 471,
     HOUR_MINUTE_SYM = 472,
     HOUR_SECOND_SYM = 473,
     HOUR_SYM = 474,
     IDENT = 475,
     IDENTIFIED_SYM = 476,
     IDENT_QUOTED = 477,
     IF = 478,
     IGNORE_SYM = 479,
     IGNORE_SERVER_IDS_SYM = 480,
     IMPORT = 481,
     INDEXES = 482,
     INDEX_SYM = 483,
     INDEX_STATS_SYM = 484,
     INFILE = 485,
     INITIAL_SIZE_SYM = 486,
     INNER_SYM = 487,
     INOUT_SYM = 488,
     INSENSITIVE_SYM = 489,
     INSERT = 490,
     INSERT_METHOD = 491,
     INSTALL_SYM = 492,
     INTERVAL_SYM = 493,
     INTO = 494,
     INT_SYM = 495,
     INVOKER_SYM = 496,
     IN_SYM = 497,
     IO_SYM = 498,
     IPC_SYM = 499,
     IS = 500,
     ISOLATION = 501,
     ISSUER_SYM = 502,
     ITERATE_SYM = 503,
     JOIN_SYM = 504,
     KEYS = 505,
     KEY_BLOCK_SIZE = 506,
     KEY_SYM = 507,
     KILL_SYM = 508,
     LANGUAGE_SYM = 509,
     LAST_SYM = 510,
     LAST_VALUE = 511,
     LE = 512,
     LEADING = 513,
     LEAVES = 514,
     LEAVE_SYM = 515,
     LEFT = 516,
     LESS_SYM = 517,
     LEVEL_SYM = 518,
     LEX_HOSTNAME = 519,
     LIKE = 520,
     LIMIT = 521,
     LINEAR_SYM = 522,
     LINES = 523,
     LINESTRING = 524,
     LIST_SYM = 525,
     LOAD = 526,
     LOCAL_SYM = 527,
     LOCATOR_SYM = 528,
     LOCKS_SYM = 529,
     LOCK_SYM = 530,
     LOGFILE_SYM = 531,
     LOGS_SYM = 532,
     LONGBLOB = 533,
     LONGTEXT = 534,
     LONG_NUM = 535,
     LONG_SYM = 536,
     LOOP_SYM = 537,
     LOW_PRIORITY = 538,
     LT = 539,
     MASTER_CONNECT_RETRY_SYM = 540,
     MASTER_HOST_SYM = 541,
     MASTER_LOG_FILE_SYM = 542,
     MASTER_LOG_POS_SYM = 543,
     MASTER_PASSWORD_SYM = 544,
     MASTER_PORT_SYM = 545,
     MASTER_SERVER_ID_SYM = 546,
     MASTER_SSL_CAPATH_SYM = 547,
     MASTER_SSL_CA_SYM = 548,
     MASTER_SSL_CERT_SYM = 549,
     MASTER_SSL_CIPHER_SYM = 550,
     MASTER_SSL_CRL_SYM = 551,
     MASTER_SSL_CRLPATH_SYM = 552,
     MASTER_SSL_KEY_SYM = 553,
     MASTER_SSL_SYM = 554,
     MASTER_SSL_VERIFY_SERVER_CERT_SYM = 555,
     MASTER_SYM = 556,
     MASTER_USER_SYM = 557,
     MASTER_HEARTBEAT_PERIOD_SYM = 558,
     MATCH = 559,
     MAX_CONNECTIONS_PER_HOUR = 560,
     MAX_QUERIES_PER_HOUR = 561,
     MAX_ROWS = 562,
     MAX_SIZE_SYM = 563,
     MAX_SYM = 564,
     MAX_UPDATES_PER_HOUR = 565,
     MAX_USER_CONNECTIONS_SYM = 566,
     MAX_VALUE_SYM = 567,
     MEDIUMBLOB = 568,
     MEDIUMINT = 569,
     MEDIUMTEXT = 570,
     MEDIUM_SYM = 571,
     MEMORY_SYM = 572,
     MERGE_SYM = 573,
     MESSAGE_TEXT_SYM = 574,
     MICROSECOND_SYM = 575,
     MIGRATE_SYM = 576,
     MINUTE_MICROSECOND_SYM = 577,
     MINUTE_SECOND_SYM = 578,
     MINUTE_SYM = 579,
     MIN_ROWS = 580,
     MIN_SYM = 581,
     MODE_SYM = 582,
     MODIFIES_SYM = 583,
     MODIFY_SYM = 584,
     MOD_SYM = 585,
     MONTH_SYM = 586,
     MULTILINESTRING = 587,
     MULTIPOINT = 588,
     MULTIPOLYGON = 589,
     MUTEX_SYM = 590,
     MYSQL_ERRNO_SYM = 591,
     NAMES_SYM = 592,
     NAME_SYM = 593,
     NATIONAL_SYM = 594,
     NATURAL = 595,
     NCHAR_STRING = 596,
     NCHAR_SYM = 597,
     NDBCLUSTER_SYM = 598,
     NE = 599,
     NEG = 600,
     NEW_SYM = 601,
     NEXT_SYM = 602,
     NODEGROUP_SYM = 603,
     NONE_SYM = 604,
     NOT2_SYM = 605,
     NOT_SYM = 606,
     NOW_SYM = 607,
     NO_SYM = 608,
     NO_WAIT_SYM = 609,
     NO_WRITE_TO_BINLOG = 610,
     NULL_SYM = 611,
     NUM = 612,
     NUMERIC_SYM = 613,
     NVARCHAR_SYM = 614,
     OFFSET_SYM = 615,
     OLD_PASSWORD = 616,
     ON = 617,
     ONE_SYM = 618,
     ONLY_SYM = 619,
     ONLINE_SYM = 620,
     OPEN_SYM = 621,
     OPTIMIZE = 622,
     OPTIONS_SYM = 623,
     OPTION = 624,
     OPTIONALLY = 625,
     OR2_SYM = 626,
     ORDER_SYM = 627,
     OR_OR_SYM = 628,
     OR_SYM = 629,
     OUTER = 630,
     OUTFILE = 631,
     OUT_SYM = 632,
     OWNER_SYM = 633,
     PACK_KEYS_SYM = 634,
     PAGE_SYM = 635,
     PAGE_CHECKSUM_SYM = 636,
     PARAM_MARKER = 637,
     PARSER_SYM = 638,
     PARSE_VCOL_EXPR_SYM = 639,
     PARTIAL = 640,
     PARTITIONING_SYM = 641,
     PARTITIONS_SYM = 642,
     PARTITION_SYM = 643,
     PASSWORD = 644,
     PERSISTENT_SYM = 645,
     PHASE_SYM = 646,
     PLUGINS_SYM = 647,
     PLUGIN_SYM = 648,
     POINT_SYM = 649,
     POLYGON = 650,
     PORT_SYM = 651,
     POSITION_SYM = 652,
     PRECISION = 653,
     PREPARE_SYM = 654,
     PRESERVE_SYM = 655,
     PREV_SYM = 656,
     PRIMARY_SYM = 657,
     PRIVILEGES = 658,
     PROCEDURE_SYM = 659,
     PROCESS = 660,
     PROCESSLIST_SYM = 661,
     PROFILE_SYM = 662,
     PROFILES_SYM = 663,
     PROXY_SYM = 664,
     PURGE = 665,
     QUARTER_SYM = 666,
     QUERY_SYM = 667,
     QUICK = 668,
     RANGE_SYM = 669,
     READS_SYM = 670,
     READ_ONLY_SYM = 671,
     READ_SYM = 672,
     READ_WRITE_SYM = 673,
     REAL = 674,
     REBUILD_SYM = 675,
     RECOVER_SYM = 676,
     REDOFILE_SYM = 677,
     REDO_BUFFER_SIZE_SYM = 678,
     REDUNDANT_SYM = 679,
     REFERENCES = 680,
     REGEXP = 681,
     RELAY = 682,
     RELAYLOG_SYM = 683,
     RELAY_LOG_FILE_SYM = 684,
     RELAY_LOG_POS_SYM = 685,
     RELAY_THREAD = 686,
     RELEASE_SYM = 687,
     RELOAD = 688,
     REMOVE_SYM = 689,
     RENAME = 690,
     REORGANIZE_SYM = 691,
     REPAIR = 692,
     REPEATABLE_SYM = 693,
     REPEAT_SYM = 694,
     REPLACE = 695,
     REPLICATION = 696,
     REQUIRE_SYM = 697,
     RESET_SYM = 698,
     RESIGNAL_SYM = 699,
     RESOURCES = 700,
     RESTORE_SYM = 701,
     RESTRICT = 702,
     RESUME_SYM = 703,
     RETURNS_SYM = 704,
     RETURN_SYM = 705,
     REVOKE = 706,
     RIGHT = 707,
     ROLLBACK_SYM = 708,
     ROLLUP_SYM = 709,
     ROUTINE_SYM = 710,
     ROWS_SYM = 711,
     ROW_FORMAT_SYM = 712,
     ROW_SYM = 713,
     RTREE_SYM = 714,
     SAVEPOINT_SYM = 715,
     SCHEDULE_SYM = 716,
     SCHEMA_NAME_SYM = 717,
     SECOND_MICROSECOND_SYM = 718,
     SECOND_SYM = 719,
     SECURITY_SYM = 720,
     SELECT_SYM = 721,
     SENSITIVE_SYM = 722,
     SEPARATOR_SYM = 723,
     SERIALIZABLE_SYM = 724,
     SERIAL_SYM = 725,
     SESSION_SYM = 726,
     SERVER_SYM = 727,
     SERVER_OPTIONS = 728,
     SET = 729,
     SET_VAR = 730,
     SHARE_SYM = 731,
     SHIFT_LEFT = 732,
     SHIFT_RIGHT = 733,
     SHOW = 734,
     SHUTDOWN = 735,
     SIGNAL_SYM = 736,
     SIGNED_SYM = 737,
     SIMPLE_SYM = 738,
     SLAVE = 739,
     SLAVES = 740,
     SLOW = 741,
     SMALLINT = 742,
     SNAPSHOT_SYM = 743,
     SOCKET_SYM = 744,
     SOFT_SYM = 745,
     SONAME_SYM = 746,
     SOUNDS_SYM = 747,
     SOURCE_SYM = 748,
     SPATIAL_SYM = 749,
     SPECIFIC_SYM = 750,
     SQLEXCEPTION_SYM = 751,
     SQLSTATE_SYM = 752,
     SQLWARNING_SYM = 753,
     SQL_BIG_RESULT = 754,
     SQL_BUFFER_RESULT = 755,
     SQL_CACHE_SYM = 756,
     SQL_CALC_FOUND_ROWS = 757,
     SQL_NO_CACHE_SYM = 758,
     SQL_SMALL_RESULT = 759,
     SQL_SYM = 760,
     SQL_THREAD = 761,
     SSL_SYM = 762,
     STARTING = 763,
     STARTS_SYM = 764,
     START_SYM = 765,
     STATUS_SYM = 766,
     STDDEV_SAMP_SYM = 767,
     STD_SYM = 768,
     STOP_SYM = 769,
     STORAGE_SYM = 770,
     STRAIGHT_JOIN = 771,
     STRING_SYM = 772,
     SUBCLASS_ORIGIN_SYM = 773,
     SUBDATE_SYM = 774,
     SUBJECT_SYM = 775,
     SUBPARTITIONS_SYM = 776,
     SUBPARTITION_SYM = 777,
     SUBSTRING = 778,
     SUM_SYM = 779,
     SUPER_SYM = 780,
     SUSPEND_SYM = 781,
     SWAPS_SYM = 782,
     SWITCHES_SYM = 783,
     SYSDATE = 784,
     TABLES = 785,
     TABLESPACE = 786,
     TABLE_REF_PRIORITY = 787,
     TABLE_STATS_SYM = 788,
     TABLE_SYM = 789,
     TABLE_CHECKSUM_SYM = 790,
     TABLE_NAME_SYM = 791,
     TEMPORARY = 792,
     TEMPTABLE_SYM = 793,
     TERMINATED = 794,
     TEXT_STRING = 795,
     TEXT_SYM = 796,
     THAN_SYM = 797,
     THEN_SYM = 798,
     TIMESTAMP = 799,
     TIMESTAMP_ADD = 800,
     TIMESTAMP_DIFF = 801,
     TIME_SYM = 802,
     TINYBLOB = 803,
     TINYINT = 804,
     TINYTEXT = 805,
     TO_SYM = 806,
     TRAILING = 807,
     TRANSACTION_SYM = 808,
     TRANSACTIONAL_SYM = 809,
     TRIGGERS_SYM = 810,
     TRIGGER_SYM = 811,
     TRIM = 812,
     TRUE_SYM = 813,
     TRUNCATE_SYM = 814,
     TYPES_SYM = 815,
     TYPE_SYM = 816,
     UDF_RETURNS_SYM = 817,
     ULONGLONG_NUM = 818,
     UNCOMMITTED_SYM = 819,
     UNDEFINED_SYM = 820,
     UNDERSCORE_CHARSET = 821,
     UNDOFILE_SYM = 822,
     UNDO_BUFFER_SIZE_SYM = 823,
     UNDO_SYM = 824,
     UNICODE_SYM = 825,
     UNINSTALL_SYM = 826,
     UNION_SYM = 827,
     UNIQUE_SYM = 828,
     UNKNOWN_SYM = 829,
     UNLOCK_SYM = 830,
     UNSIGNED = 831,
     UNTIL_SYM = 832,
     UPDATE_SYM = 833,
     UPGRADE_SYM = 834,
     USAGE = 835,
     USER = 836,
     USER_STATS_SYM = 837,
     USE_FRM = 838,
     USE_SYM = 839,
     USING = 840,
     UTC_DATE_SYM = 841,
     UTC_TIMESTAMP_SYM = 842,
     UTC_TIME_SYM = 843,
     VALUES = 844,
     VALUE_SYM = 845,
     VARBINARY = 846,
     VARCHAR = 847,
     VARIABLES = 848,
     VARIANCE_SYM = 849,
     VARYING = 850,
     VAR_SAMP_SYM = 851,
     VIA_SYM = 852,
     VIEW_SYM = 853,
     VIRTUAL_SYM = 854,
     WAIT_SYM = 855,
     WARNINGS = 856,
     WEEK_SYM = 857,
     WHEN_SYM = 858,
     WHERE = 859,
     WHILE_SYM = 860,
     WITH = 861,
     WITH_CUBE_SYM = 862,
     WITH_ROLLUP_SYM = 863,
     WORK_SYM = 864,
     WRAPPER_SYM = 865,
     WRITE_SYM = 866,
     X509_SYM = 867,
     XA_SYM = 868,
     XML_SYM = 869,
     XOR = 870,
     YEAR_MONTH_SYM = 871,
     YEAR_SYM = 872,
     ZEROFILL = 873,
     IMPOSSIBLE_ACTION = 874
   };
#endif
/* Tokens.  */
#define ABORT_SYM 258
#define ACCESSIBLE_SYM 259
#define ACTION 260
#define ADD 261
#define ADDDATE_SYM 262
#define AFTER_SYM 263
#define AGAINST 264
#define AGGREGATE_SYM 265
#define ALGORITHM_SYM 266
#define ALL 267
#define ALTER 268
#define ALWAYS_SYM 269
#define ANALYZE_SYM 270
#define AND_AND_SYM 271
#define AND_SYM 272
#define ANY_SYM 273
#define AS 274
#define ASC 275
#define ASCII_SYM 276
#define ASENSITIVE_SYM 277
#define AT_SYM 278
#define AUTHORS_SYM 279
#define AUTOEXTEND_SIZE_SYM 280
#define AUTO_INC 281
#define AVG_ROW_LENGTH 282
#define AVG_SYM 283
#define BACKUP_SYM 284
#define BEFORE_SYM 285
#define BEGIN_SYM 286
#define BETWEEN_SYM 287
#define BIGINT 288
#define BINARY 289
#define BINLOG_SYM 290
#define BIN_NUM 291
#define BIT_AND 292
#define BIT_OR 293
#define BIT_SYM 294
#define BIT_XOR 295
#define BLOB_SYM 296
#define BLOCK_SYM 297
#define BOOLEAN_SYM 298
#define BOOL_SYM 299
#define BOTH 300
#define BTREE_SYM 301
#define BY 302
#define BYTE_SYM 303
#define CACHE_SYM 304
#define CALL_SYM 305
#define CASCADE 306
#define CASCADED 307
#define CASE_SYM 308
#define CAST_SYM 309
#define CATALOG_NAME_SYM 310
#define CHAIN_SYM 311
#define CHANGE 312
#define CHANGED 313
#define CHARSET 314
#define CHAR_SYM 315
#define CHECKPOINT_SYM 316
#define CHECKSUM_SYM 317
#define CHECK_SYM 318
#define CIPHER_SYM 319
#define CLASS_ORIGIN_SYM 320
#define CLIENT_SYM 321
#define CLIENT_STATS_SYM 322
#define CLOSE_SYM 323
#define COALESCE 324
#define CODE_SYM 325
#define COLLATE_SYM 326
#define COLLATION_SYM 327
#define COLUMNS 328
#define COLUMN_ADD_SYM 329
#define COLUMN_CHECK_SYM 330
#define COLUMN_CREATE_SYM 331
#define COLUMN_DELETE_SYM 332
#define COLUMN_GET_SYM 333
#define COLUMN_SYM 334
#define COLUMN_NAME_SYM 335
#define COMMENT_SYM 336
#define COMMITTED_SYM 337
#define COMMIT_SYM 338
#define COMPACT_SYM 339
#define COMPLETION_SYM 340
#define COMPRESSED_SYM 341
#define CONCURRENT 342
#define CONDITION_SYM 343
#define CONNECTION_SYM 344
#define CONSISTENT_SYM 345
#define CONSTRAINT 346
#define CONSTRAINT_CATALOG_SYM 347
#define CONSTRAINT_NAME_SYM 348
#define CONSTRAINT_SCHEMA_SYM 349
#define CONTAINS_SYM 350
#define CONTEXT_SYM 351
#define CONTINUE_SYM 352
#define CONTRIBUTORS_SYM 353
#define CONVERT_SYM 354
#define COUNT_SYM 355
#define CPU_SYM 356
#define CREATE 357
#define CROSS 358
#define CUBE_SYM 359
#define CURDATE 360
#define CURRENT_USER 361
#define CURSOR_SYM 362
#define CURSOR_NAME_SYM 363
#define CURTIME 364
#define DATABASE 365
#define DATABASES 366
#define DATAFILE_SYM 367
#define DATA_SYM 368
#define DATETIME 369
#define DATE_ADD_INTERVAL 370
#define DATE_SUB_INTERVAL 371
#define DATE_SYM 372
#define DAY_HOUR_SYM 373
#define DAY_MICROSECOND_SYM 374
#define DAY_MINUTE_SYM 375
#define DAY_SECOND_SYM 376
#define DAY_SYM 377
#define DEALLOCATE_SYM 378
#define DECIMAL_NUM 379
#define DECIMAL_SYM 380
#define DECLARE_SYM 381
#define DEFAULT 382
#define DEFINER_SYM 383
#define DELAYED_SYM 384
#define DELAY_KEY_WRITE_SYM 385
#define DELETE_SYM 386
#define DESC 387
#define DESCRIBE 388
#define DES_KEY_FILE 389
#define DETERMINISTIC_SYM 390
#define DIRECTORY_SYM 391
#define DISABLE_SYM 392
#define DISCARD 393
#define DISK_SYM 394
#define DISTINCT 395
#define DIV_SYM 396
#define DOUBLE_SYM 397
#define DO_SYM 398
#define DROP 399
#define DUAL_SYM 400
#define DUMPFILE 401
#define DUPLICATE_SYM 402
#define DYNAMIC_SYM 403
#define EACH_SYM 404
#define ELSE 405
#define ELSEIF_SYM 406
#define ENABLE_SYM 407
#define ENCLOSED 408
#define END 409
#define ENDS_SYM 410
#define END_OF_INPUT 411
#define ENGINES_SYM 412
#define ENGINE_SYM 413
#define ENUM 414
#define EQ 415
#define EQUAL_SYM 416
#define ERROR_SYM 417
#define ERRORS 418
#define ESCAPED 419
#define ESCAPE_SYM 420
#define EVENTS_SYM 421
#define EVENT_SYM 422
#define EVERY_SYM 423
#define EXAMINED_SYM 424
#define EXECUTE_SYM 425
#define EXISTS 426
#define EXIT_SYM 427
#define EXPANSION_SYM 428
#define EXTENDED_SYM 429
#define EXTENT_SIZE_SYM 430
#define EXTRACT_SYM 431
#define FALSE_SYM 432
#define FAST_SYM 433
#define FAULTS_SYM 434
#define FETCH_SYM 435
#define FILE_SYM 436
#define FIRST_SYM 437
#define FIXED_SYM 438
#define FLOAT_NUM 439
#define FLOAT_SYM 440
#define FLUSH_SYM 441
#define FORCE_SYM 442
#define FOREIGN 443
#define FOR_SYM 444
#define FOUND_SYM 445
#define FROM 446
#define FULL 447
#define FULLTEXT_SYM 448
#define FUNCTION_SYM 449
#define GE 450
#define GENERAL 451
#define GENERATED_SYM 452
#define GEOMETRYCOLLECTION 453
#define GEOMETRY_SYM 454
#define GET_FORMAT 455
#define GLOBAL_SYM 456
#define GRANT 457
#define GRANTS 458
#define GROUP_SYM 459
#define GROUP_CONCAT_SYM 460
#define GT_SYM 461
#define HANDLER_SYM 462
#define HARD_SYM 463
#define HASH_SYM 464
#define HAVING 465
#define HELP_SYM 466
#define HEX_NUM 467
#define HIGH_PRIORITY 468
#define HOST_SYM 469
#define HOSTS_SYM 470
#define HOUR_MICROSECOND_SYM 471
#define HOUR_MINUTE_SYM 472
#define HOUR_SECOND_SYM 473
#define HOUR_SYM 474
#define IDENT 475
#define IDENTIFIED_SYM 476
#define IDENT_QUOTED 477
#define IF 478
#define IGNORE_SYM 479
#define IGNORE_SERVER_IDS_SYM 480
#define IMPORT 481
#define INDEXES 482
#define INDEX_SYM 483
#define INDEX_STATS_SYM 484
#define INFILE 485
#define INITIAL_SIZE_SYM 486
#define INNER_SYM 487
#define INOUT_SYM 488
#define INSENSITIVE_SYM 489
#define INSERT 490
#define INSERT_METHOD 491
#define INSTALL_SYM 492
#define INTERVAL_SYM 493
#define INTO 494
#define INT_SYM 495
#define INVOKER_SYM 496
#define IN_SYM 497
#define IO_SYM 498
#define IPC_SYM 499
#define IS 500
#define ISOLATION 501
#define ISSUER_SYM 502
#define ITERATE_SYM 503
#define JOIN_SYM 504
#define KEYS 505
#define KEY_BLOCK_SIZE 506
#define KEY_SYM 507
#define KILL_SYM 508
#define LANGUAGE_SYM 509
#define LAST_SYM 510
#define LAST_VALUE 511
#define LE 512
#define LEADING 513
#define LEAVES 514
#define LEAVE_SYM 515
#define LEFT 516
#define LESS_SYM 517
#define LEVEL_SYM 518
#define LEX_HOSTNAME 519
#define LIKE 520
#define LIMIT 521
#define LINEAR_SYM 522
#define LINES 523
#define LINESTRING 524
#define LIST_SYM 525
#define LOAD 526
#define LOCAL_SYM 527
#define LOCATOR_SYM 528
#define LOCKS_SYM 529
#define LOCK_SYM 530
#define LOGFILE_SYM 531
#define LOGS_SYM 532
#define LONGBLOB 533
#define LONGTEXT 534
#define LONG_NUM 535
#define LONG_SYM 536
#define LOOP_SYM 537
#define LOW_PRIORITY 538
#define LT 539
#define MASTER_CONNECT_RETRY_SYM 540
#define MASTER_HOST_SYM 541
#define MASTER_LOG_FILE_SYM 542
#define MASTER_LOG_POS_SYM 543
#define MASTER_PASSWORD_SYM 544
#define MASTER_PORT_SYM 545
#define MASTER_SERVER_ID_SYM 546
#define MASTER_SSL_CAPATH_SYM 547
#define MASTER_SSL_CA_SYM 548
#define MASTER_SSL_CERT_SYM 549
#define MASTER_SSL_CIPHER_SYM 550
#define MASTER_SSL_CRL_SYM 551
#define MASTER_SSL_CRLPATH_SYM 552
#define MASTER_SSL_KEY_SYM 553
#define MASTER_SSL_SYM 554
#define MASTER_SSL_VERIFY_SERVER_CERT_SYM 555
#define MASTER_SYM 556
#define MASTER_USER_SYM 557
#define MASTER_HEARTBEAT_PERIOD_SYM 558
#define MATCH 559
#define MAX_CONNECTIONS_PER_HOUR 560
#define MAX_QUERIES_PER_HOUR 561
#define MAX_ROWS 562
#define MAX_SIZE_SYM 563
#define MAX_SYM 564
#define MAX_UPDATES_PER_HOUR 565
#define MAX_USER_CONNECTIONS_SYM 566
#define MAX_VALUE_SYM 567
#define MEDIUMBLOB 568
#define MEDIUMINT 569
#define MEDIUMTEXT 570
#define MEDIUM_SYM 571
#define MEMORY_SYM 572
#define MERGE_SYM 573
#define MESSAGE_TEXT_SYM 574
#define MICROSECOND_SYM 575
#define MIGRATE_SYM 576
#define MINUTE_MICROSECOND_SYM 577
#define MINUTE_SECOND_SYM 578
#define MINUTE_SYM 579
#define MIN_ROWS 580
#define MIN_SYM 581
#define MODE_SYM 582
#define MODIFIES_SYM 583
#define MODIFY_SYM 584
#define MOD_SYM 585
#define MONTH_SYM 586
#define MULTILINESTRING 587
#define MULTIPOINT 588
#define MULTIPOLYGON 589
#define MUTEX_SYM 590
#define MYSQL_ERRNO_SYM 591
#define NAMES_SYM 592
#define NAME_SYM 593
#define NATIONAL_SYM 594
#define NATURAL 595
#define NCHAR_STRING 596
#define NCHAR_SYM 597
#define NDBCLUSTER_SYM 598
#define NE 599
#define NEG 600
#define NEW_SYM 601
#define NEXT_SYM 602
#define NODEGROUP_SYM 603
#define NONE_SYM 604
#define NOT2_SYM 605
#define NOT_SYM 606
#define NOW_SYM 607
#define NO_SYM 608
#define NO_WAIT_SYM 609
#define NO_WRITE_TO_BINLOG 610
#define NULL_SYM 611
#define NUM 612
#define NUMERIC_SYM 613
#define NVARCHAR_SYM 614
#define OFFSET_SYM 615
#define OLD_PASSWORD 616
#define ON 617
#define ONE_SYM 618
#define ONLY_SYM 619
#define ONLINE_SYM 620
#define OPEN_SYM 621
#define OPTIMIZE 622
#define OPTIONS_SYM 623
#define OPTION 624
#define OPTIONALLY 625
#define OR2_SYM 626
#define ORDER_SYM 627
#define OR_OR_SYM 628
#define OR_SYM 629
#define OUTER 630
#define OUTFILE 631
#define OUT_SYM 632
#define OWNER_SYM 633
#define PACK_KEYS_SYM 634
#define PAGE_SYM 635
#define PAGE_CHECKSUM_SYM 636
#define PARAM_MARKER 637
#define PARSER_SYM 638
#define PARSE_VCOL_EXPR_SYM 639
#define PARTIAL 640
#define PARTITIONING_SYM 641
#define PARTITIONS_SYM 642
#define PARTITION_SYM 643
#define PASSWORD 644
#define PERSISTENT_SYM 645
#define PHASE_SYM 646
#define PLUGINS_SYM 647
#define PLUGIN_SYM 648
#define POINT_SYM 649
#define POLYGON 650
#define PORT_SYM 651
#define POSITION_SYM 652
#define PRECISION 653
#define PREPARE_SYM 654
#define PRESERVE_SYM 655
#define PREV_SYM 656
#define PRIMARY_SYM 657
#define PRIVILEGES 658
#define PROCEDURE_SYM 659
#define PROCESS 660
#define PROCESSLIST_SYM 661
#define PROFILE_SYM 662
#define PROFILES_SYM 663
#define PROXY_SYM 664
#define PURGE 665
#define QUARTER_SYM 666
#define QUERY_SYM 667
#define QUICK 668
#define RANGE_SYM 669
#define READS_SYM 670
#define READ_ONLY_SYM 671
#define READ_SYM 672
#define READ_WRITE_SYM 673
#define REAL 674
#define REBUILD_SYM 675
#define RECOVER_SYM 676
#define REDOFILE_SYM 677
#define REDO_BUFFER_SIZE_SYM 678
#define REDUNDANT_SYM 679
#define REFERENCES 680
#define REGEXP 681
#define RELAY 682
#define RELAYLOG_SYM 683
#define RELAY_LOG_FILE_SYM 684
#define RELAY_LOG_POS_SYM 685
#define RELAY_THREAD 686
#define RELEASE_SYM 687
#define RELOAD 688
#define REMOVE_SYM 689
#define RENAME 690
#define REORGANIZE_SYM 691
#define REPAIR 692
#define REPEATABLE_SYM 693
#define REPEAT_SYM 694
#define REPLACE 695
#define REPLICATION 696
#define REQUIRE_SYM 697
#define RESET_SYM 698
#define RESIGNAL_SYM 699
#define RESOURCES 700
#define RESTORE_SYM 701
#define RESTRICT 702
#define RESUME_SYM 703
#define RETURNS_SYM 704
#define RETURN_SYM 705
#define REVOKE 706
#define RIGHT 707
#define ROLLBACK_SYM 708
#define ROLLUP_SYM 709
#define ROUTINE_SYM 710
#define ROWS_SYM 711
#define ROW_FORMAT_SYM 712
#define ROW_SYM 713
#define RTREE_SYM 714
#define SAVEPOINT_SYM 715
#define SCHEDULE_SYM 716
#define SCHEMA_NAME_SYM 717
#define SECOND_MICROSECOND_SYM 718
#define SECOND_SYM 719
#define SECURITY_SYM 720
#define SELECT_SYM 721
#define SENSITIVE_SYM 722
#define SEPARATOR_SYM 723
#define SERIALIZABLE_SYM 724
#define SERIAL_SYM 725
#define SESSION_SYM 726
#define SERVER_SYM 727
#define SERVER_OPTIONS 728
#define SET 729
#define SET_VAR 730
#define SHARE_SYM 731
#define SHIFT_LEFT 732
#define SHIFT_RIGHT 733
#define SHOW 734
#define SHUTDOWN 735
#define SIGNAL_SYM 736
#define SIGNED_SYM 737
#define SIMPLE_SYM 738
#define SLAVE 739
#define SLAVES 740
#define SLOW 741
#define SMALLINT 742
#define SNAPSHOT_SYM 743
#define SOCKET_SYM 744
#define SOFT_SYM 745
#define SONAME_SYM 746
#define SOUNDS_SYM 747
#define SOURCE_SYM 748
#define SPATIAL_SYM 749
#define SPECIFIC_SYM 750
#define SQLEXCEPTION_SYM 751
#define SQLSTATE_SYM 752
#define SQLWARNING_SYM 753
#define SQL_BIG_RESULT 754
#define SQL_BUFFER_RESULT 755
#define SQL_CACHE_SYM 756
#define SQL_CALC_FOUND_ROWS 757
#define SQL_NO_CACHE_SYM 758
#define SQL_SMALL_RESULT 759
#define SQL_SYM 760
#define SQL_THREAD 761
#define SSL_SYM 762
#define STARTING 763
#define STARTS_SYM 764
#define START_SYM 765
#define STATUS_SYM 766
#define STDDEV_SAMP_SYM 767
#define STD_SYM 768
#define STOP_SYM 769
#define STORAGE_SYM 770
#define STRAIGHT_JOIN 771
#define STRING_SYM 772
#define SUBCLASS_ORIGIN_SYM 773
#define SUBDATE_SYM 774
#define SUBJECT_SYM 775
#define SUBPARTITIONS_SYM 776
#define SUBPARTITION_SYM 777
#define SUBSTRING 778
#define SUM_SYM 779
#define SUPER_SYM 780
#define SUSPEND_SYM 781
#define SWAPS_SYM 782
#define SWITCHES_SYM 783
#define SYSDATE 784
#define TABLES 785
#define TABLESPACE 786
#define TABLE_REF_PRIORITY 787
#define TABLE_STATS_SYM 788
#define TABLE_SYM 789
#define TABLE_CHECKSUM_SYM 790
#define TABLE_NAME_SYM 791
#define TEMPORARY 792
#define TEMPTABLE_SYM 793
#define TERMINATED 794
#define TEXT_STRING 795
#define TEXT_SYM 796
#define THAN_SYM 797
#define THEN_SYM 798
#define TIMESTAMP 799
#define TIMESTAMP_ADD 800
#define TIMESTAMP_DIFF 801
#define TIME_SYM 802
#define TINYBLOB 803
#define TINYINT 804
#define TINYTEXT 805
#define TO_SYM 806
#define TRAILING 807
#define TRANSACTION_SYM 808
#define TRANSACTIONAL_SYM 809
#define TRIGGERS_SYM 810
#define TRIGGER_SYM 811
#define TRIM 812
#define TRUE_SYM 813
#define TRUNCATE_SYM 814
#define TYPES_SYM 815
#define TYPE_SYM 816
#define UDF_RETURNS_SYM 817
#define ULONGLONG_NUM 818
#define UNCOMMITTED_SYM 819
#define UNDEFINED_SYM 820
#define UNDERSCORE_CHARSET 821
#define UNDOFILE_SYM 822
#define UNDO_BUFFER_SIZE_SYM 823
#define UNDO_SYM 824
#define UNICODE_SYM 825
#define UNINSTALL_SYM 826
#define UNION_SYM 827
#define UNIQUE_SYM 828
#define UNKNOWN_SYM 829
#define UNLOCK_SYM 830
#define UNSIGNED 831
#define UNTIL_SYM 832
#define UPDATE_SYM 833
#define UPGRADE_SYM 834
#define USAGE 835
#define USER 836
#define USER_STATS_SYM 837
#define USE_FRM 838
#define USE_SYM 839
#define USING 840
#define UTC_DATE_SYM 841
#define UTC_TIMESTAMP_SYM 842
#define UTC_TIME_SYM 843
#define VALUES 844
#define VALUE_SYM 845
#define VARBINARY 846
#define VARCHAR 847
#define VARIABLES 848
#define VARIANCE_SYM 849
#define VARYING 850
#define VAR_SAMP_SYM 851
#define VIA_SYM 852
#define VIEW_SYM 853
#define VIRTUAL_SYM 854
#define WAIT_SYM 855
#define WARNINGS 856
#define WEEK_SYM 857
#define WHEN_SYM 858
#define WHERE 859
#define WHILE_SYM 860
#define WITH 861
#define WITH_CUBE_SYM 862
#define WITH_ROLLUP_SYM 863
#define WORK_SYM 864
#define WRAPPER_SYM 865
#define WRITE_SYM 866
#define X509_SYM 867
#define XA_SYM 868
#define XML_SYM 869
#define XOR 870
#define YEAR_MONTH_SYM 871
#define YEAR_SYM 872
#define ZEROFILL 873
#define IMPOSSIBLE_ACTION 874




#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
typedef union YYSTYPE
{

/* Line 214 of yacc.c  */
#line 845 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"

  int  num;
  ulong ulong_num;
  ulonglong ulonglong_number;
  longlong longlong_number;
  LEX_STRING lex_str;
  LEX_STRING *lex_str_ptr;
  LEX_SYMBOL symbol;
  Table_ident *table;
  char *simple_string;
  Item *item;
  Item_num *item_num;
  List<Item> *item_list;
  List<String> *string_list;
  String *string;
  Key_part_spec *key_part;
  TABLE_LIST *table_list;
  udf_func *udf;
  LEX_USER *lex_user;
  struct sys_var_with_base variable;
  enum enum_var_type var_type;
  Key::Keytype key_type;
  enum ha_key_alg key_alg;
  handlerton *db_type;
  enum row_type row_type;
  enum ha_rkey_function ha_rkey_mode;
  enum enum_tx_isolation tx_isolation;
  enum Cast_target cast_type;
  enum Item_udftype udf_type;
  enum ha_choice choice;
  CHARSET_INFO *charset;
  thr_lock_type lock_type;
  interval_type interval, interval_time_st;
  timestamp_type date_time_type;
  st_select_lex *select_lex;
  chooser_compare_func_creator boolfunc2creator;
  struct sp_cond_type *spcondtype;
  struct { int vars, conds, hndlrs, curs; } spblock;
  sp_name *spname;
  LEX *lex;
  sp_head *sphead;
  struct p_elem_val *p_elem_value;
  enum index_hint_type index_hint;
  enum enum_filetype filetype;
  enum Foreign_key::fk_option m_fk_option;
  enum enum_yes_no_unknown m_yes_no_unk;
  Diag_condition_item_name diag_condition_item_name;
  DYNCALL_CREATE_DEF *dyncol_def;
  List<DYNCALL_CREATE_DEF> *dyncol_def_list;



/* Line 214 of yacc.c  */
#line 2230 "/home/buildbot/buildbot/build/mkdist/sql/sql_yacc.cc"
} YYSTYPE;
# define YYSTYPE_IS_TRIVIAL 1
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
#endif


/* Copy the second part of user declarations.  */

/* Line 264 of yacc.c  */
#line 896 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"

bool my_yyoverflow(short **a, YYSTYPE **b, ulong *yystacksize);


/* Line 264 of yacc.c  */
#line 2247 "/home/buildbot/buildbot/build/mkdist/sql/sql_yacc.cc"

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#elif (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
typedef signed char yytype_int8;
#else
typedef short int yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(msgid) dgettext ("bison-runtime", msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(msgid) msgid
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(e) ((void) (e))
#else
# define YYUSE(e) /* empty */
#endif

/* Identity function, used to suppress warnings about constant conditions.  */
#ifndef lint
# define YYID(n) (n)
#else
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static int
YYID (int yyi)
#else
static int
YYID (yyi)
    int yyi;
#endif
{
  return yyi;
}
#endif

#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#     ifndef _STDLIB_H
#      define _STDLIB_H 1
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (YYID (0))
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined _STDLIB_H \
       && ! ((defined YYMALLOC || defined malloc) \
	     && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef _STDLIB_H
#    define _STDLIB_H 1
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
	 || (defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss_alloc;
  YYSTYPE yyvs_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE)) \
      + YYSTACK_GAP_MAXIMUM)

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  YYSIZE_T yyi;				\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (YYID (0))
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)				\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack_alloc, Stack, yysize);			\
	Stack = &yyptr->Stack_alloc;					\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (YYID (0))

#endif

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  604
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   58614

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  639
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  946
/* YYNRULES -- Number of rules.  */
#define YYNRULES  2677
/* YYNRULES -- Number of states.  */
#define YYNSTATES  4535

/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   874

#define YYTRANSLATE(YYX)						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const yytype_uint16 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   632,     2,     2,     2,   626,   621,     2,
     629,   630,   624,   623,   631,   622,   637,   625,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   638,   635,
       2,     2,     2,     2,   636,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,   627,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   633,   620,   634,   628,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const yytype_uint16 yyprhs[] =
{
       0,     0,     3,     5,     6,    11,    14,    15,    17,    19,
      21,    23,    25,    27,    29,    31,    33,    35,    37,    39,
      41,    43,    45,    47,    49,    51,    53,    55,    57,    59,
      61,    63,    65,    67,    69,    71,    73,    75,    77,    79,
      81,    83,    85,    87,    89,    91,    93,    95,    97,    99,
     101,   103,   105,   107,   109,   111,   113,   115,   117,   119,
     121,   123,   125,   127,   131,   133,   135,   140,   142,   145,
     146,   151,   152,   155,   159,   161,   164,   165,   169,   170,
     177,   179,   183,   187,   191,   195,   199,   203,   207,   211,
     215,   219,   223,   227,   231,   235,   239,   243,   249,   251,
     252,   254,   258,   260,   264,   268,   272,   276,   277,   279,
     281,   282,   290,   291,   304,   305,   318,   319,   332,   333,
     340,   341,   345,   350,   355,   359,   362,   373,   375,   379,
     382,   385,   388,   391,   394,   397,   400,   401,   415,   416,
     423,   426,   427,   429,   433,   435,   436,   439,   440,   443,
     444,   446,   450,   455,   456,   459,   460,   463,   465,   467,
     469,   471,   473,   475,   477,   479,   481,   483,   485,   487,
     489,   490,   494,   496,   497,   500,   501,   504,   507,   510,
     513,   516,   520,   524,   526,   528,   530,   533,   537,   541,
     542,   547,   548,   552,   553,   555,   559,   561,   562,   564,
     568,   570,   571,   575,   576,   578,   582,   584,   589,   590,
     592,   594,   596,   597,   601,   604,   608,   609,   613,   614,
     620,   626,   627,   635,   641,   642,   645,   647,   649,   651,
     655,   657,   659,   661,   665,   666,   668,   670,   672,   674,
     677,   679,   683,   685,   687,   688,   690,   691,   694,   698,
     704,   706,   708,   710,   712,   714,   716,   718,   720,   722,
     724,   726,   728,   730,   732,   734,   738,   740,   744,   745,
     748,   750,   752,   754,   756,   758,   760,   762,   764,   766,
     768,   770,   772,   774,   775,   781,   782,   785,   786,   790,
     791,   794,   797,   800,   803,   804,   811,   814,   815,   818,
     820,   822,   826,   827,   828,   829,   837,   838,   841,   844,
     846,   848,   849,   850,   859,   860,   867,   869,   872,   874,
     877,   878,   879,   886,   887,   888,   895,   896,   899,   900,
     906,   907,   909,   910,   916,   917,   920,   921,   927,   932,
     933,   934,   943,   944,   952,   954,   956,   958,   960,   962,
     965,   970,   976,   977,   982,   987,   992,   996,  1000,  1003,
    1006,  1007,  1010,  1012,  1015,  1019,  1021,  1023,  1025,  1027,
    1029,  1032,  1036,  1038,  1040,  1042,  1044,  1046,  1048,  1050,
    1052,  1054,  1056,  1059,  1063,  1065,  1067,  1069,  1071,  1073,
    1075,  1077,  1080,  1084,  1086,  1088,  1090,  1092,  1094,  1096,
    1098,  1100,  1102,  1105,  1109,  1111,  1113,  1115,  1118,  1121,
    1124,  1126,  1128,  1130,  1132,  1135,  1139,  1143,  1147,  1151,
    1155,  1159,  1163,  1167,  1172,  1173,  1175,  1177,  1179,  1181,
    1183,  1186,  1190,  1193,  1198,  1199,  1206,  1207,  1213,  1214,
    1215,  1221,  1222,  1230,  1232,  1233,  1235,  1236,  1241,  1242,
    1243,  1247,  1253,  1259,  1260,  1265,  1268,  1271,  1274,  1277,
    1278,  1280,  1281,  1283,  1285,  1289,  1291,  1296,  1302,  1308,
    1309,  1312,  1313,  1314,  1322,  1323,  1333,  1335,  1339,  1341,
    1343,  1344,  1347,  1348,  1352,  1354,  1358,  1359,  1366,  1368,
    1369,  1370,  1376,  1377,  1382,  1384,  1386,  1388,  1392,  1394,
    1398,  1399,  1400,  1406,  1408,  1412,  1414,  1416,  1417,  1421,
    1423,  1427,  1428,  1433,  1435,  1436,  1438,  1441,  1443,  1447,
    1452,  1456,  1460,  1464,  1468,  1473,  1478,  1482,  1483,  1484,
    1491,  1492,  1494,  1495,  1497,  1499,  1502,  1504,  1506,  1507,
    1509,  1511,  1514,  1516,  1517,  1521,  1522,  1524,  1526,  1529,
    1531,  1534,  1538,  1542,  1546,  1550,  1554,  1558,  1562,  1566,
    1570,  1574,  1578,  1582,  1586,  1590,  1594,  1595,  1602,  1604,
    1606,  1610,  1615,  1620,  1623,  1626,  1629,  1633,  1637,  1641,
    1645,  1649,  1653,  1657,  1662,  1667,  1669,  1671,  1673,  1675,
    1677,  1679,  1681,  1683,  1685,  1687,  1689,  1691,  1693,  1696,
    1698,  1700,  1702,  1704,  1706,  1708,  1712,  1714,  1716,  1719,
    1722,  1723,  1732,  1733,  1743,  1744,  1754,  1755,  1765,  1774,
    1777,  1778,  1780,  1785,  1786,  1788,  1791,  1792,  1796,  1799,
    1808,  1809,  1812,  1813,  1815,  1817,  1818,  1820,  1823,  1825,
    1827,  1830,  1833,  1838,  1842,  1846,  1850,  1854,  1856,  1859,
    1861,  1863,  1867,  1870,  1874,  1877,  1880,  1882,  1886,  1890,
    1893,  1897,  1899,  1902,  1905,  1908,  1910,  1913,  1915,  1917,
    1919,  1922,  1926,  1929,  1933,  1936,  1939,  1943,  1947,  1951,
    1952,  1959,  1960,  1967,  1970,  1972,  1974,  1976,  1978,  1980,
    1982,  1984,  1986,  1988,  1990,  1992,  1995,  1998,  2000,  2003,
    2005,  2008,  2012,  2015,  2017,  2019,  2021,  2023,  2025,  2027,
    2029,  2032,  2033,  2035,  2037,  2043,  2044,  2046,  2049,  2051,
    2053,  2055,  2057,  2061,  2065,  2069,  2073,  2074,  2076,  2077,
    2079,  2080,  2082,  2085,  2087,  2089,  2092,  2095,  2100,  2102,
    2106,  2109,  2111,  2114,  2117,  2120,  2124,  2128,  2132,  2136,
    2139,  2142,  2144,  2147,  2149,  2151,  2153,  2155,  2157,  2158,
    2161,  2163,  2165,  2167,  2169,  2171,  2172,  2175,  2177,  2179,
    2180,  2182,  2184,  2187,  2190,  2192,  2195,  2198,  2199,  2201,
    2203,  2205,  2209,  2211,  2215,  2216,  2218,  2219,  2221,  2227,
    2228,  2232,  2236,  2238,  2239,  2242,  2245,  2248,  2249,  2253,
    2257,  2264,  2271,  2273,  2275,  2278,  2281,  2284,  2286,  2289,
    2292,  2294,  2296,  2297,  2299,  2301,  2303,  2305,  2306,  2308,
    2310,  2312,  2313,  2315,  2318,  2319,  2321,  2322,  2324,  2325,
    2327,  2329,  2332,  2334,  2337,  2339,  2342,  2345,  2348,  2352,
    2355,  2359,  2363,  2367,  2371,  2373,  2375,  2377,  2379,  2383,
    2385,  2387,  2389,  2394,  2397,  2399,  2404,  2405,  2407,  2408,
    2411,  2413,  2417,  2418,  2425,  2426,  2432,  2440,  2441,  2447,
    2448,  2454,  2455,  2461,  2462,  2467,  2468,  2479,  2483,  2488,
    2492,  2496,  2504,  2505,  2509,  2511,  2516,  2517,  2521,  2522,
    2525,  2526,  2528,  2529,  2532,  2535,  2538,  2541,  2543,  2545,
    2547,  2551,  2556,  2557,  2564,  2569,  2570,  2576,  2577,  2584,
    2589,  2593,  2595,  2598,  2600,  2602,  2603,  2609,  2610,  2614,
    2617,  2618,  2624,  2625,  2626,  2633,  2635,  2639,  2641,  2643,
    2647,  2650,  2654,  2657,  2662,  2663,  2670,  2671,  2672,  2680,
    2685,  2690,  2694,  2698,  2701,  2704,  2711,  2717,  2721,  2727,
    2729,  2731,  2733,  2734,  2736,  2737,  2739,  2740,  2743,  2744,
    2746,  2749,  2751,  2753,  2755,  2756,  2758,  2760,  2761,  2764,
    2766,  2767,  2769,  2771,  2773,  2774,  2781,  2782,  2788,  2793,
    2798,  2799,  2806,  2811,  2815,  2816,  2818,  2820,  2824,  2828,
    2831,  2834,  2835,  2838,  2840,  2844,  2845,  2847,  2849,  2850,
    2853,  2855,  2859,  2860,  2866,  2867,  2869,  2871,  2872,  2879,
    2880,  2882,  2884,  2887,  2889,  2891,  2893,  2894,  2900,  2902,
    2906,  2909,  2910,  2914,  2916,  2921,  2923,  2924,  2929,  2931,
    2932,  2937,  2938,  2940,  2944,  2945,  2947,  2951,  2953,  2955,
    2958,  2959,  2965,  2966,  2968,  2970,  2973,  2975,  2977,  2979,
    2981,  2983,  2986,  2987,  2993,  2994,  2996,  2998,  2999,  3004,
    3009,  3013,  3019,  3021,  3025,  3029,  3030,  3037,  3039,  3041,
    3043,  3047,  3050,  3054,  3056,  3058,  3059,  3066,  3068,  3070,
    3072,  3076,  3080,  3085,  3086,  3093,  3094,  3097,  3098,  3103,
    3104,  3107,  3109,  3112,  3117,  3120,  3124,  3127,  3131,  3132,
    3136,  3137,  3138,  3145,  3148,  3150,  3152,  3155,  3158,  3167,
    3172,  3173,  3175,  3178,  3180,  3182,  3184,  3186,  3187,  3190,
    3195,  3199,  3201,  3203,  3207,  3212,  3213,  3214,  3215,  3218,
    3221,  3223,  3225,  3226,  3229,  3233,  3234,  3237,  3241,  3242,
    3245,  3249,  3253,  3257,  3260,  3264,  3269,  3273,  3278,  3282,
    3287,  3289,  3293,  3298,  3302,  3306,  3313,  3315,  3321,  3328,
    3334,  3342,  3349,  3358,  3364,  3371,  3376,  3381,  3387,  3391,
    3396,  3398,  3402,  3406,  3410,  3414,  3418,  3422,  3428,  3434,
    3438,  3442,  3446,  3450,  3454,  3458,  3460,  3462,  3464,  3466,
    3468,  3470,  3472,  3474,  3476,  3478,  3480,  3482,  3484,  3486,
    3488,  3490,  3492,  3493,  3496,  3498,  3501,  3503,  3505,  3507,
    3510,  3513,  3515,  3517,  3520,  3523,  3528,  3530,  3534,  3536,
    3538,  3540,  3542,  3544,  3548,  3550,  3552,  3554,  3556,  3560,
    3563,  3566,  3569,  3572,  3576,  3580,  3586,  3593,  3598,  3603,
    3611,  3614,  3621,  3627,  3634,  3641,  3646,  3651,  3657,  3662,
    3669,  3672,  3677,  3682,  3687,  3698,  3705,  3714,  3721,  3726,
    3731,  3738,  3743,  3748,  3753,  3760,  3765,  3773,  3781,  3789,
    3796,  3803,  3810,  3817,  3821,  3826,  3833,  3842,  3845,  3848,
    3857,  3866,  3873,  3880,  3883,  3890,  3897,  3906,  3915,  3922,
    3931,  3938,  3941,  3950,  3959,  3962,  3965,  3968,  3975,  3982,
    3987,  3992,  4001,  4006,  4011,  4016,  4021,  4025,  4034,  4039,
    4044,  4051,  4056,  4061,  4066,  4073,  4082,  4089,  4094,  4101,
    4103,  4110,  4115,  4120,  4125,  4130,  4135,  4142,  4147,  4148,
    4154,  4161,  4164,  4168,  4169,  4174,  4175,  4179,  4180,  4182,
    4184,  4188,  4193,  4198,  4204,  4209,  4214,  4219,  4225,  4230,
    4231,  4232,  4240,  4245,  4251,  4256,  4262,  4267,  4272,  4277,
    4282,  4287,  4293,  4294,  4303,  4304,  4308,  4312,  4314,  4319,
    4320,  4322,  4323,  4326,  4327,  4329,  4330,  4334,  4337,  4341,
    4344,  4346,  4348,  4351,  4353,  4356,  4358,  4361,  4364,  4367,
    4368,  4372,  4373,  4375,  4377,  4381,  4383,  4387,  4389,  4393,
    4394,  4396,  4397,  4400,  4405,  4411,  4413,  4415,  4417,  4419,
    4424,  4426,  4430,  4434,  4438,  4439,  4446,  4447,  4454,  4455,
    4464,  4469,  4470,  4479,  4480,  4491,  4498,  4499,  4508,  4509,
    4520,  4527,  4529,  4532,  4535,  4536,  4541,  4545,  4551,  4554,
    4555,  4556,  4564,  4566,  4567,  4568,  4575,  4576,  4580,  4581,
    4582,  4588,  4589,  4591,  4592,  4594,  4595,  4598,  4602,  4606,
    4608,  4610,  4611,  4619,  4620,  4628,  4630,  4633,  4634,  4635,
    4638,  4639,  4642,  4643,  4645,  4647,  4649,  4651,  4655,  4657,
    4661,  4663,  4665,  4667,  4669,  4671,  4673,  4675,  4677,  4679,
    4681,  4683,  4685,  4687,  4689,  4691,  4693,  4695,  4697,  4699,
    4701,  4703,  4705,  4707,  4709,  4711,  4712,  4714,  4716,  4717,
    4720,  4721,  4723,  4724,  4725,  4729,  4730,  4731,  4735,  4738,
    4739,  4740,  4745,  4750,  4753,  4754,  4756,  4758,  4762,  4766,
    4768,  4771,  4772,  4774,  4775,  4780,  4785,  4788,  4789,  4791,
    4793,  4794,  4796,  4797,  4799,  4802,  4808,  4813,  4815,  4819,
    4823,  4825,  4827,  4829,  4831,  4833,  4835,  4836,  4839,  4843,
    4848,  4850,  4853,  4856,  4858,  4860,  4862,  4864,  4866,  4868,
    4870,  4872,  4874,  4876,  4878,  4880,  4882,  4884,  4886,  4888,
    4890,  4892,  4894,  4896,  4898,  4900,  4902,  4904,  4906,  4908,
    4909,  4910,  4917,  4918,  4920,  4924,  4926,  4930,  4931,  4934,
    4938,  4940,  4943,  4945,  4946,  4950,  4951,  4952,  4960,  4963,
    4965,  4966,  4970,  4971,  4979,  4980,  4987,  4992,  4999,  5004,
    5009,  5014,  5015,  5022,  5027,  5032,  5038,  5045,  5050,  5052,
    5056,  5058,  5060,  5064,  5066,  5067,  5070,  5071,  5073,  5074,
    5075,  5084,  5085,  5086,  5093,  5094,  5096,  5098,  5100,  5102,
    5104,  5107,  5109,  5111,  5113,  5117,  5122,  5123,  5127,  5131,
    5133,  5136,  5139,  5140,  5144,  5145,  5151,  5155,  5157,  5161,
    5163,  5167,  5169,  5171,  5172,  5174,  5175,  5180,  5181,  5183,
    5187,  5189,  5191,  5193,  5194,  5195,  5202,  5203,  5204,  5216,
    5220,  5222,  5226,  5230,  5232,  5236,  5237,  5239,  5240,  5245,
    5246,  5253,  5254,  5260,  5261,  5268,  5270,  5274,  5277,  5282,
    5283,  5286,  5287,  5290,  5292,  5294,  5296,  5297,  5302,  5303,
    5305,  5306,  5308,  5310,  5314,  5316,  5318,  5321,  5324,  5327,
    5329,  5331,  5333,  5335,  5336,  5340,  5341,  5345,  5348,  5353,
    5358,  5362,  5367,  5372,  5374,  5378,  5382,  5389,  5392,  5395,
    5396,  5403,  5404,  5412,  5418,  5421,  5423,  5425,  5427,  5433,
    5439,  5442,  5445,  5447,  5452,  5456,  5459,  5463,  5466,  5469,
    5471,  5475,  5480,  5484,  5488,  5491,  5495,  5498,  5502,  5504,
    5506,  5508,  5510,  5514,  5518,  5522,  5526,  5530,  5534,  5538,
    5542,  5546,  5548,  5550,  5552,  5554,  5556,  5557,  5559,  5560,
    5563,  5564,  5566,  5568,  5570,  5571,  5574,  5575,  5578,  5579,
    5582,  5585,  5586,  5591,  5592,  5597,  5599,  5601,  5602,  5604,
    5606,  5607,  5609,  5611,  5612,  5617,  5618,  5619,  5625,  5627,
    5628,  5633,  5637,  5639,  5642,  5645,  5648,  5651,  5654,  5658,
    5661,  5663,  5665,  5667,  5669,  5672,  5674,  5676,  5678,  5680,
    5682,  5684,  5686,  5687,  5689,  5690,  5694,  5695,  5699,  5703,
    5705,  5706,  5711,  5713,  5716,  5717,  5719,  5720,  5724,  5728,
    5731,  5734,  5735,  5741,  5742,  5744,  5746,  5747,  5749,  5751,
    5753,  5756,  5759,  5760,  5761,  5762,  5763,  5785,  5787,  5789,
    5790,  5792,  5793,  5795,  5797,  5798,  5800,  5802,  5803,  5806,
    5809,  5811,  5815,  5820,  5824,  5828,  5829,  5832,  5835,  5837,
    5841,  5845,  5846,  5851,  5852,  5856,  5858,  5860,  5861,  5865,
    5868,  5872,  5874,  5876,  5879,  5880,  5883,  5887,  5889,  5895,
    5897,  5899,  5902,  5905,  5907,  5909,  5911,  5913,  5915,  5918,
    5921,  5923,  5925,  5927,  5929,  5931,  5933,  5935,  5938,  5941,
    5944,  5947,  5950,  5952,  5954,  5956,  5958,  5960,  5962,  5964,
    5968,  5974,  5976,  5978,  5980,  5982,  5984,  5988,  5993,  5999,
    6001,  6007,  6011,  6014,  6016,  6020,  6023,  6026,  6031,  6033,
    6035,  6037,  6039,  6041,  6043,  6045,  6047,  6049,  6051,  6053,
    6055,  6057,  6059,  6063,  6066,  6068,  6070,  6072,  6074,  6076,
    6078,  6080,  6082,  6084,  6086,  6088,  6090,  6092,  6094,  6096,
    6098,  6100,  6102,  6104,  6106,  6108,  6110,  6112,  6114,  6116,
    6118,  6120,  6122,  6124,  6126,  6128,  6130,  6132,  6134,  6136,
    6138,  6140,  6142,  6144,  6146,  6148,  6150,  6152,  6154,  6156,
    6158,  6160,  6162,  6164,  6166,  6168,  6170,  6172,  6174,  6176,
    6178,  6180,  6182,  6184,  6186,  6188,  6190,  6192,  6194,  6196,
    6198,  6200,  6202,  6204,  6206,  6208,  6210,  6212,  6214,  6216,
    6218,  6220,  6222,  6224,  6226,  6228,  6230,  6232,  6234,  6236,
    6238,  6240,  6242,  6244,  6246,  6248,  6250,  6252,  6254,  6256,
    6258,  6260,  6262,  6264,  6266,  6268,  6270,  6272,  6274,  6276,
    6278,  6280,  6282,  6284,  6286,  6288,  6290,  6292,  6294,  6296,
    6298,  6300,  6302,  6304,  6306,  6308,  6310,  6312,  6314,  6316,
    6318,  6320,  6322,  6324,  6326,  6328,  6330,  6332,  6334,  6336,
    6338,  6340,  6342,  6344,  6346,  6348,  6350,  6352,  6354,  6356,
    6358,  6360,  6362,  6364,  6366,  6368,  6370,  6372,  6374,  6376,
    6378,  6380,  6382,  6384,  6386,  6388,  6390,  6392,  6394,  6396,
    6398,  6400,  6402,  6404,  6406,  6408,  6410,  6412,  6414,  6416,
    6418,  6420,  6422,  6424,  6426,  6428,  6430,  6432,  6434,  6436,
    6438,  6440,  6442,  6444,  6446,  6448,  6450,  6452,  6454,  6456,
    6458,  6460,  6462,  6464,  6466,  6468,  6470,  6472,  6474,  6476,
    6478,  6480,  6482,  6484,  6486,  6488,  6490,  6492,  6494,  6496,
    6498,  6500,  6502,  6504,  6506,  6508,  6510,  6512,  6514,  6516,
    6518,  6520,  6522,  6524,  6526,  6528,  6530,  6532,  6534,  6536,
    6538,  6540,  6542,  6544,  6546,  6548,  6550,  6552,  6554,  6556,
    6558,  6560,  6562,  6564,  6566,  6568,  6570,  6572,  6574,  6576,
    6578,  6580,  6582,  6584,  6586,  6588,  6590,  6592,  6594,  6596,
    6598,  6600,  6602,  6604,  6606,  6608,  6610,  6612,  6614,  6616,
    6618,  6620,  6622,  6624,  6626,  6628,  6630,  6632,  6634,  6636,
    6638,  6640,  6642,  6644,  6646,  6648,  6650,  6652,  6654,  6656,
    6658,  6660,  6662,  6664,  6666,  6668,  6670,  6672,  6674,  6676,
    6678,  6680,  6682,  6684,  6686,  6688,  6690,  6692,  6694,  6696,
    6698,  6700,  6702,  6704,  6706,  6708,  6710,  6712,  6714,  6716,
    6718,  6720,  6722,  6724,  6726,  6728,  6730,  6732,  6734,  6736,
    6738,  6740,  6742,  6744,  6746,  6748,  6750,  6752,  6754,  6756,
    6758,  6760,  6762,  6764,  6766,  6768,  6770,  6771,  6775,  6776,
    6780,  6781,  6785,  6786,  6790,  6791,  6795,  6798,  6799,  6802,
    6803,  6806,  6807,  6812,  6813,  6817,  6819,  6821,  6823,  6825,
    6826,  6828,  6830,  6832,  6833,  6836,  6839,  6842,  6846,  6850,
    6855,  6862,  6865,  6869,  6873,  6877,  6883,  6885,  6889,  6893,
    6895,  6897,  6901,  6905,  6907,  6911,  6914,  6917,  6920,  6923,
    6926,  6928,  6930,  6935,  6940,  6942,  6944,  6946,  6948,  6950,
    6951,  6956,  6958,  6960,  6962,  6966,  6970,  6972,  6974,  6977,
    6980,  6983,  6984,  6988,  6993,  6997,  6998,  7006,  7008,  7011,
    7013,  7015,  7017,  7019,  7021,  7023,  7024,  7030,  7032,  7034,
    7036,  7038,  7040,  7044,  7051,  7058,  7065,  7073,  7079,  7083,
    7092,  7101,  7110,  7117,  7118,  7120,  7122,  7125,  7126,  7128,
    7130,  7134,  7135,  7139,  7140,  7144,  7145,  7149,  7150,  7154,
    7156,  7158,  7160,  7162,  7164,  7166,  7168,  7170,  7172,  7174,
    7176,  7179,  7182,  7184,  7188,  7191,  7194,  7197,  7200,  7203,
    7206,  7209,  7212,  7214,  7216,  7219,  7220,  7222,  7226,  7228,
    7231,  7234,  7237,  7239,  7243,  7247,  7249,  7251,  7255,  7257,
    7261,  7263,  7265,  7267,  7269,  7274,  7280,  7285,  7292,  7294,
    7295,  7299,  7303,  7305,  7307,  7308,  7311,  7314,  7317,  7320,
    7321,  7324,  7325,  7329,  7332,  7334,  7337,  7340,  7343,  7346,
    7349,  7350,  7354,  7355,  7357,  7358,  7362,  7365,  7366,  7368,
    7371,  7372,  7374,  7379,  7384,  7390,  7393,  7397,  7398,  7400,
    7401,  7406,  7407,  7409,  7411,  7412,  7414,  7415,  7418,  7421,
    7423,  7424,  7426,  7428,  7431,  7435,  7438,  7439,  7446,  7450,
    7451,  7452,  7453,  7455,  7458,  7460,  7462,  7464,  7466,  7468,
    7470,  7472,  7474,  7476,  7479,  7482,  7486,  7488,  7490,  7492,
    7494,  7496,  7498,  7500,  7502,  7504,  7506,  7508,  7510,  7512,
    7513,  7517,  7519,  7522,  7524,  7527,  7531,  7535,  7539,  7540,
    7544,  7548,  7549,  7557,  7558,  7562,  7564,  7568,  7569,  7573,
    7576,  7581,  7582,  7586,  7591,  7596,  7597,  7598,  7599,  7616,
    7625,  7633,  7634,  7635,  7636,  7637,  7638,  7654,  7655,  7656,
    7657,  7658,  7671,  7676,  7681,  7685,  7690,  7694,  7697,  7699,
    7703,  7709,  7711,  7713,  7714,  7716,  7718,  7719,  7722,  7723,
    7724,  7728,  7729,  7732,  7738,  7742,  7746,  7750
};

/* YYRHS -- A `-1'-separated list of the rules' RHS.  */
static const yytype_int16 yyrhs[] =
{
     640,     0,    -1,   156,    -1,    -1,   643,   641,   635,   642,
      -1,   643,   156,    -1,    -1,   156,    -1,   644,    -1,  1512,
      -1,  1001,    -1,  1066,    -1,  1079,    -1,   695,    -1,   656,
      -1,  1080,    -1,  1058,    -1,  1518,    -1,   665,    -1,   645,
      -1,  1326,    -1,  1358,    -1,  1278,    -1,  1280,    -1,   649,
      -1,  1364,    -1,  1484,    -1,  1475,    -1,   654,    -1,  1290,
      -1,  1582,    -1,  1584,    -1,  1093,    -1,  1384,    -1,  1390,
      -1,  1467,    -1,  1085,    -1,   928,    -1,   839,    -1,  1100,
      -1,   647,    -1,  1380,    -1,  1521,    -1,  1088,    -1,  1061,
      -1,  1293,    -1,  1374,    -1,   730,    -1,  1482,    -1,  1519,
      -1,  1520,    -1,  1112,    -1,  1440,    -1,   723,    -1,  1344,
      -1,  1044,    -1,  1048,    -1,  1337,    -1,  1583,    -1,  1473,
      -1,  1318,    -1,  1389,    -1,  1574,    -1,   646,   399,  1434,
      -1,   123,    -1,   144,    -1,   399,  1434,   191,   648,    -1,
    1431,    -1,   636,  1436,    -1,    -1,   170,  1434,   650,   651,
      -1,    -1,   585,   652,    -1,   652,   631,   653,    -1,   653,
      -1,   636,  1436,    -1,    -1,   211,   655,  1436,    -1,    -1,
      57,   301,   663,   551,   657,   658,    -1,   659,    -1,   658,
     631,   659,    -1,   286,   160,  1431,    -1,   302,   160,  1431,
      -1,   289,   160,  1431,    -1,   290,   160,  1257,    -1,   285,
     160,  1257,    -1,   299,   160,  1257,    -1,   293,   160,  1431,
      -1,   292,   160,  1431,    -1,   294,   160,  1431,    -1,   295,
     160,  1431,    -1,   298,   160,  1431,    -1,   300,   160,  1257,
      -1,   296,   160,  1431,    -1,   297,   160,  1431,    -1,   303,
     160,  1419,    -1,   225,   160,   629,   660,   630,    -1,   662,
      -1,    -1,   661,    -1,   660,   631,   661,    -1,  1257,    -1,
     287,   160,  1431,    -1,   288,   160,  1259,    -1,   429,   160,
    1431,    -1,   430,   160,  1257,    -1,    -1,   664,    -1,  1431,
      -1,    -1,   102,   890,   534,   893,  1427,   666,   827,    -1,
      -1,   102,   979,   228,  1434,   983,   362,  1427,   667,   629,
     996,   630,   984,    -1,    -1,   102,   980,   228,  1434,   982,
     362,  1427,   668,   629,   996,   630,   985,    -1,    -1,   102,
     981,   228,  1434,   982,   362,  1427,   669,   629,   996,   630,
     986,    -1,    -1,   102,   110,   893,  1434,   670,   887,    -1,
      -1,   102,   671,  1540,    -1,   102,   581,   688,  1500,    -1,
     102,   276,   204,   790,    -1,   102,   531,   787,    -1,   102,
     672,    -1,   472,  1436,   188,   113,   610,  1436,   368,   629,
     673,   630,    -1,   674,    -1,   673,   631,   674,    -1,   581,
    1431,    -1,   214,  1431,    -1,   110,  1431,    -1,   378,  1431,
      -1,   389,  1431,    -1,   489,  1431,    -1,   396,  1257,    -1,
      -1,  1129,   167,   893,   689,   676,   362,   461,   677,   682,
     679,   684,   143,   685,    -1,    -1,   168,  1135,  1227,   678,
     680,   681,    -1,    23,  1135,    -1,    -1,   152,    -1,   137,
     362,   484,    -1,   137,    -1,    -1,   509,  1135,    -1,    -1,
     155,  1135,    -1,    -1,   683,    -1,   362,    85,   400,    -1,
     362,    85,   351,   400,    -1,    -1,    81,  1431,    -1,    -1,
     686,   687,    -1,   736,    -1,   738,    -1,   734,    -1,   755,
      -1,   773,    -1,   775,    -1,   770,    -1,   740,    -1,   742,
      -1,   743,    -1,   744,    -1,   745,    -1,   747,    -1,    -1,
    1434,   637,  1434,    -1,  1434,    -1,    -1,   690,   692,    -1,
      -1,   691,   693,    -1,    81,  1431,    -1,   254,   505,    -1,
     353,   505,    -1,    95,   505,    -1,   415,   505,   113,    -1,
     328,   505,   113,    -1,   694,    -1,   692,    -1,   135,    -1,
    1141,   135,    -1,   505,   465,   128,    -1,   505,   465,   241,
      -1,    -1,    50,   689,   696,   697,    -1,    -1,   629,   698,
     630,    -1,    -1,   699,    -1,   699,   631,  1135,    -1,  1135,
      -1,    -1,   701,    -1,   701,   631,   703,    -1,   703,    -1,
      -1,  1434,   702,   951,    -1,    -1,   705,    -1,   705,   631,
     706,    -1,   706,    -1,   707,   702,  1434,   951,    -1,    -1,
     242,    -1,   377,    -1,   233,    -1,    -1,   708,   733,   635,
      -1,   733,   635,    -1,   709,   733,   635,    -1,    -1,   710,
     711,   635,    -1,    -1,   126,   731,   712,   951,   732,    -1,
     126,  1434,    88,   189,   719,    -1,    -1,   126,   716,   207,
     189,   713,   717,   733,    -1,   126,  1434,   107,   189,   714,
      -1,    -1,   715,  1112,    -1,   172,    -1,    97,    -1,   718,
      -1,   717,   631,   718,    -1,   722,    -1,  1257,    -1,   720,
      -1,   497,   721,  1432,    -1,    -1,   590,    -1,   719,    -1,
    1434,    -1,   498,    -1,  1141,   190,    -1,   496,    -1,   481,
     724,   726,    -1,  1434,    -1,   720,    -1,    -1,   724,    -1,
      -1,   474,   727,    -1,   729,   160,   728,    -1,   727,   631,
     729,   160,   728,    -1,  1418,    -1,  1166,    -1,  1423,    -1,
      65,    -1,   518,    -1,    92,    -1,    94,    -1,    93,    -1,
      55,    -1,   462,    -1,   536,    -1,    80,    -1,   108,    -1,
     319,    -1,   336,    -1,   444,   725,   726,    -1,  1434,    -1,
     731,   631,  1434,    -1,    -1,   127,  1135,    -1,   736,    -1,
     738,    -1,   734,    -1,   755,    -1,   773,    -1,   775,    -1,
     770,    -1,   740,    -1,   742,    -1,   743,    -1,   744,    -1,
     745,    -1,   747,    -1,    -1,   223,   735,   750,   154,   223,
      -1,    -1,   737,   644,    -1,    -1,   450,   739,  1135,    -1,
      -1,   741,   779,    -1,   260,  1435,    -1,   248,  1435,    -1,
     366,  1434,    -1,    -1,   180,   748,  1434,   239,   746,   749,
      -1,    68,  1434,    -1,    -1,   347,   191,    -1,   191,    -1,
    1434,    -1,   749,   631,  1434,    -1,    -1,    -1,    -1,   751,
    1135,   543,   752,   709,   753,   754,    -1,    -1,   151,   750,
      -1,   150,   709,    -1,   756,    -1,   759,    -1,    -1,    -1,
      53,   757,  1135,   758,   761,   769,   154,    53,    -1,    -1,
      53,   760,   762,   769,   154,    53,    -1,   763,    -1,   761,
     763,    -1,   766,    -1,   762,   766,    -1,    -1,    -1,   603,
     764,  1135,   765,   543,   709,    -1,    -1,    -1,   603,   767,
    1135,   768,   543,   709,    -1,    -1,   150,   709,    -1,    -1,
    1435,   638,   771,   779,   772,    -1,    -1,  1435,    -1,    -1,
    1435,   638,   774,   777,   772,    -1,    -1,   776,   777,    -1,
      -1,    31,   778,   710,   708,   154,    -1,   282,   709,   154,
     282,    -1,    -1,    -1,   605,   780,  1135,   143,   781,   709,
     154,   605,    -1,    -1,   439,   709,   577,   782,  1135,   154,
     439,    -1,    30,    -1,     8,    -1,   235,    -1,   578,    -1,
     131,    -1,   812,   814,    -1,   812,    57,   809,   793,    -1,
     812,     6,   809,   788,   797,    -1,    -1,   584,   276,   204,
    1434,    -1,   812,     6,   809,   800,    -1,   812,   144,   809,
     800,    -1,   813,   792,   803,    -1,   813,   792,   806,    -1,
       6,   810,    -1,     6,   811,    -1,    -1,   794,   795,    -1,
     796,    -1,   795,   796,    -1,   795,   631,   796,    -1,   815,
      -1,   816,    -1,   817,    -1,   798,    -1,   799,    -1,   798,
     799,    -1,   798,   631,   799,    -1,   815,    -1,   816,    -1,
     817,    -1,   818,    -1,   821,    -1,   823,    -1,   825,    -1,
     822,    -1,   801,    -1,   802,    -1,   801,   802,    -1,   801,
     631,   802,    -1,   815,    -1,   816,    -1,   817,    -1,   823,
      -1,   825,    -1,   804,    -1,   805,    -1,   804,   805,    -1,
     804,   631,   805,    -1,   815,    -1,   819,    -1,   820,    -1,
     821,    -1,   823,    -1,   825,    -1,   822,    -1,   807,    -1,
     808,    -1,   807,   808,    -1,   807,   631,   808,    -1,   815,
      -1,   823,    -1,   825,    -1,   112,  1431,    -1,   567,  1431,
      -1,   422,  1431,    -1,  1434,    -1,  1434,    -1,   416,    -1,
     418,    -1,   351,     4,    -1,   231,  1310,   826,    -1,    25,
    1310,   826,    -1,   308,  1310,   826,    -1,   175,  1310,   826,
      -1,   568,  1310,   826,    -1,   423,  1310,   826,    -1,   348,
    1310,  1258,    -1,    81,  1310,  1431,    -1,  1351,   158,  1310,
     901,    -1,    -1,   825,    -1,   600,    -1,   354,    -1,  1258,
      -1,   220,    -1,   629,   828,    -1,   894,   834,   831,    -1,
     265,  1427,    -1,   629,   265,  1427,   630,    -1,    -1,   907,
     630,   829,   894,   834,   831,    -1,    -1,   834,   883,   630,
     830,  1525,    -1,    -1,    -1,  1398,   886,   883,   832,  1522,
      -1,    -1,  1398,   886,   629,   883,   630,   833,  1525,    -1,
     835,    -1,    -1,   836,    -1,    -1,   388,   838,   837,   841,
      -1,    -1,    -1,   388,   840,   841,    -1,    47,   842,   851,
     852,   859,    -1,   844,   252,   629,   845,   630,    -1,    -1,
     844,   209,   843,   849,    -1,   414,   849,    -1,   414,   848,
      -1,   270,   849,    -1,   270,   848,    -1,    -1,   267,    -1,
      -1,   846,    -1,   847,    -1,   846,   631,   847,    -1,  1434,
      -1,    73,   629,   845,   630,    -1,   629,  1129,   857,  1130,
     630,    -1,   629,  1129,   857,  1130,   630,    -1,    -1,   387,
    1258,    -1,    -1,    -1,   522,    47,   844,   209,   850,   853,
     858,    -1,    -1,   522,    47,   844,   252,   629,   855,   630,
     854,   858,    -1,   856,    -1,   855,   631,   856,    -1,  1434,
      -1,  1138,    -1,    -1,   521,  1258,    -1,    -1,   629,   860,
     630,    -1,   861,    -1,   860,   631,   861,    -1,    -1,   388,
     862,   863,   864,   880,   875,    -1,  1434,    -1,    -1,    -1,
     589,   262,   542,   865,   867,    -1,    -1,   589,   242,   866,
     868,    -1,   312,    -1,   870,    -1,   870,    -1,   629,   869,
     630,    -1,   870,    -1,   869,   631,   870,    -1,    -1,    -1,
     629,   871,   873,   872,   630,    -1,   874,    -1,   873,   631,
     874,    -1,   312,    -1,  1138,    -1,    -1,   629,   876,   630,
      -1,   877,    -1,   876,   631,   877,    -1,    -1,   522,   878,
     879,   880,    -1,  1436,    -1,    -1,   881,    -1,   881,   882,
      -1,   882,    -1,   531,  1310,  1436,    -1,  1351,   158,  1310,
     901,    -1,    89,  1310,  1431,    -1,   348,  1310,  1258,    -1,
     307,  1310,  1260,    -1,   325,  1310,  1260,    -1,   113,   136,
    1310,  1431,    -1,   228,   136,  1310,  1431,    -1,    81,  1310,
    1431,    -1,    -1,    -1,   466,   884,  1123,  1127,   885,   905,
      -1,    -1,    19,    -1,    -1,   888,    -1,   889,    -1,   888,
     889,    -1,   900,    -1,   899,    -1,    -1,   891,    -1,   892,
      -1,   892,   891,    -1,   537,    -1,    -1,   223,  1141,   171,
      -1,    -1,   896,    -1,   897,    -1,   897,   895,    -1,   897,
      -1,   897,   896,    -1,   897,   631,   896,    -1,   158,  1310,
     901,    -1,   307,  1310,  1259,    -1,   325,  1310,  1259,    -1,
      27,  1310,  1257,    -1,   389,  1310,  1431,    -1,    81,  1310,
    1431,    -1,    26,  1310,  1259,    -1,   379,  1310,  1257,    -1,
     379,  1310,   127,    -1,    62,  1310,  1257,    -1,   535,  1310,
    1257,    -1,   381,  1310,  1263,    -1,   130,  1310,  1257,    -1,
     457,  1310,   903,    -1,    -1,   572,  1310,   898,   629,  1372,
     630,    -1,   899,    -1,   900,    -1,   236,  1310,   904,    -1,
     113,   136,  1310,  1431,    -1,   228,   136,  1310,  1431,    -1,
     531,  1434,    -1,   515,   139,    -1,   515,   317,    -1,    89,
    1310,  1431,    -1,   251,  1310,  1257,    -1,   554,  1310,  1263,
      -1,  1430,  1309,  1431,    -1,  1430,  1309,  1434,    -1,  1430,
    1309,  1260,    -1,  1430,  1309,   127,    -1,   962,   953,  1310,
     955,    -1,   962,    71,  1310,   961,    -1,  1436,    -1,  1436,
      -1,   127,    -1,   183,    -1,   148,    -1,    86,    -1,   424,
      -1,    84,    -1,   380,    -1,   353,    -1,   182,    -1,   255,
      -1,  1250,    -1,  1122,  1126,    -1,   517,    -1,   419,    -1,
     125,    -1,   240,    -1,   908,    -1,   909,    -1,   908,   631,
     909,    -1,   910,    -1,   911,    -1,   920,   916,    -1,   920,
     968,    -1,    -1,   974,   998,   983,   629,   996,   630,   912,
     984,    -1,    -1,   980,   977,   998,   982,   629,   996,   630,
     913,   985,    -1,    -1,   981,   977,   998,   982,   629,   996,
     630,   914,   986,    -1,    -1,   918,   975,   998,   983,   629,
     996,   630,   915,   984,    -1,   918,   188,   252,   998,   629,
     996,   630,   968,    -1,   918,   917,    -1,    -1,   917,    -1,
      63,   629,  1135,   630,    -1,    -1,   919,    -1,    91,   998,
      -1,    -1,  1426,   921,   922,    -1,   930,   948,    -1,   930,
     923,    19,   629,   929,   630,   924,   925,    -1,    -1,   197,
      14,    -1,    -1,   599,    -1,   390,    -1,    -1,   926,    -1,
     926,   927,    -1,   927,    -1,   573,    -1,   573,   252,    -1,
      81,  1431,    -1,   384,   629,   929,   630,    -1,  1129,  1135,
    1130,    -1,   938,   946,   942,    -1,   939,   947,   942,    -1,
     185,   940,   942,    -1,    39,    -1,    39,   945,    -1,    44,
      -1,    43,    -1,   934,   945,   965,    -1,   934,   965,    -1,
     935,   945,   966,    -1,   935,   966,    -1,    34,   945,    -1,
      34,    -1,   936,   945,   965,    -1,   937,   945,   966,    -1,
     591,   945,    -1,   617,   946,   942,    -1,   117,    -1,   547,
     946,    -1,   544,   946,    -1,   114,   946,    -1,   548,    -1,
      41,   946,    -1,   933,    -1,   313,    -1,   278,    -1,   281,
     591,    -1,   281,   936,   965,    -1,   550,   965,    -1,   541,
     946,   965,    -1,   315,   965,    -1,   279,   965,    -1,   125,
     940,   942,    -1,   358,   940,   942,    -1,   183,   940,   942,
      -1,    -1,   159,   931,   629,  1000,   630,   965,    -1,    -1,
     474,   932,   629,  1000,   630,   965,    -1,   281,   965,    -1,
     470,    -1,   199,    -1,   198,    -1,   394,    -1,   333,    -1,
     269,    -1,   332,    -1,   395,    -1,   334,    -1,    60,    -1,
     342,    -1,   339,    60,    -1,   934,   595,    -1,   592,    -1,
     339,   592,    -1,   359,    -1,   342,   592,    -1,   339,    60,
     595,    -1,   342,   595,    -1,   240,    -1,   549,    -1,   487,
      -1,   314,    -1,    33,    -1,   419,    -1,   142,    -1,   142,
     398,    -1,    -1,   945,    -1,   941,    -1,   629,   357,   631,
     357,   630,    -1,    -1,   943,    -1,   943,   944,    -1,   944,
      -1,   482,    -1,   576,    -1,   618,    -1,   629,   280,   630,
      -1,   629,   563,   630,    -1,   629,   124,   630,    -1,   629,
     357,   630,    -1,    -1,   945,    -1,    -1,   941,    -1,    -1,
     949,    -1,   949,   950,    -1,   950,    -1,   356,    -1,  1141,
     356,    -1,   127,   952,    -1,   362,   578,   352,  1132,    -1,
      26,    -1,   470,   127,   590,    -1,   967,   252,    -1,   573,
      -1,   573,   252,    -1,    81,  1431,    -1,    71,   959,    -1,
    1430,  1309,  1431,    -1,  1430,  1309,  1434,    -1,  1430,  1309,
    1260,    -1,  1430,  1309,   127,    -1,   930,   960,    -1,   352,
    1132,    -1,  1417,    -1,    60,   474,    -1,    59,    -1,  1436,
      -1,    34,    -1,   954,    -1,   127,    -1,    -1,   953,   955,
      -1,  1436,    -1,    34,    -1,   957,    -1,   127,    -1,  1436,
      -1,    -1,    71,   961,    -1,   959,    -1,   127,    -1,    -1,
     127,    -1,    21,    -1,    34,    21,    -1,    21,    34,    -1,
     570,    -1,   570,    34,    -1,    34,   570,    -1,    -1,   963,
      -1,   964,    -1,    48,    -1,   953,   954,   966,    -1,    34,
      -1,    34,   953,   954,    -1,    -1,    34,    -1,    -1,   402,
      -1,   425,  1427,   969,   971,   972,    -1,    -1,   629,   970,
     630,    -1,   970,   631,  1434,    -1,  1434,    -1,    -1,   304,
     192,    -1,   304,   385,    -1,   304,   483,    -1,    -1,   362,
     578,   973,    -1,   362,   131,   973,    -1,   362,   578,   973,
     362,   131,   973,    -1,   362,   131,   973,   362,   578,   973,
      -1,   447,    -1,    51,    -1,   474,   356,    -1,   353,     5,
      -1,   474,   127,    -1,   976,    -1,   402,   252,    -1,   573,
     977,    -1,   252,    -1,   228,    -1,    -1,   976,    -1,   250,
      -1,   228,    -1,   227,    -1,    -1,   573,    -1,   193,    -1,
     494,    -1,    -1,   982,    -1,   982,   990,    -1,    -1,   987,
      -1,    -1,   989,    -1,    -1,   988,    -1,   992,    -1,   987,
     992,    -1,   993,    -1,   988,   993,    -1,   994,    -1,   989,
     994,    -1,   585,   995,    -1,   561,   995,    -1,   251,  1310,
    1257,    -1,    81,  1431,    -1,  1430,  1309,  1431,    -1,  1430,
    1309,  1434,    -1,  1430,  1309,  1260,    -1,  1430,  1309,   127,
      -1,   991,    -1,   990,    -1,   991,    -1,   991,    -1,   606,
     383,  1430,    -1,    46,    -1,   459,    -1,   209,    -1,   996,
     631,   997,  1248,    -1,   997,  1248,    -1,  1434,    -1,  1434,
     629,   357,   630,    -1,    -1,  1426,    -1,    -1,   637,  1434,
      -1,  1415,    -1,  1000,   631,  1415,    -1,    -1,    13,  1036,
     534,  1427,  1002,  1013,    -1,    -1,    13,   110,  1012,  1003,
     888,    -1,    13,   110,  1434,   579,   113,   136,   338,    -1,
      -1,    13,   404,   689,  1004,   690,    -1,    -1,    13,   194,
     689,  1005,   690,    -1,    -1,    13,  1548,  1543,  1006,  1550,
      -1,    -1,    13,  1543,  1007,  1550,    -1,    -1,    13,  1543,
     167,   689,  1008,  1009,  1010,   679,   684,  1011,    -1,    13,
     531,   789,    -1,    13,   276,   204,   791,    -1,    13,   531,
     786,    -1,    13,   531,   785,    -1,    13,   472,  1436,   368,
     629,   673,   630,    -1,    -1,   362,   461,   677,    -1,   683,
      -1,   362,   461,   677,   683,    -1,    -1,   435,   551,   689,
      -1,    -1,   143,   685,    -1,    -1,  1434,    -1,    -1,   138,
     531,    -1,   226,   531,    -1,  1028,   835,    -1,  1028,  1017,
      -1,  1017,    -1,   836,    -1,  1019,    -1,   144,   388,  1026,
      -1,   420,   388,  1087,  1018,    -1,    -1,   367,   388,  1087,
    1018,  1014,  1087,    -1,    15,   388,  1087,  1018,    -1,    -1,
      63,   388,  1018,  1015,  1082,    -1,    -1,   437,   388,  1087,
    1018,  1016,  1063,    -1,    69,   388,  1087,  1258,    -1,   559,
     388,  1018,    -1,  1022,    -1,   434,   386,    -1,    12,    -1,
    1026,    -1,    -1,     6,   388,  1087,  1020,  1021,    -1,    -1,
     629,   860,   630,    -1,   387,  1258,    -1,    -1,   436,   388,
    1087,  1023,  1024,    -1,    -1,    -1,  1026,  1025,   239,   629,
     860,   630,    -1,  1027,    -1,  1026,   631,  1027,    -1,  1434,
      -1,  1030,    -1,  1028,   631,  1030,    -1,     6,  1034,    -1,
    1029,   910,  1042,    -1,     6,   911,    -1,  1029,   629,   907,
     630,    -1,    -1,    57,  1034,  1426,  1031,   920,  1042,    -1,
      -1,    -1,   329,  1034,  1426,  1032,   922,  1033,  1042,    -1,
     144,  1034,  1426,  1041,    -1,   144,   188,   252,   998,    -1,
     144,   402,   252,    -1,   144,   976,  1426,    -1,   137,   250,
      -1,   152,   250,    -1,    13,  1034,  1426,   474,   127,  1417,
      -1,    13,  1034,  1426,   144,   127,    -1,   435,  1043,  1427,
      -1,    99,   551,   953,   955,   960,    -1,   895,    -1,   187,
      -1,  1241,    -1,    -1,    79,    -1,    -1,   224,    -1,    -1,
    1037,  1038,    -1,    -1,  1039,    -1,  1039,  1040,    -1,  1040,
      -1,   224,    -1,   365,    -1,    -1,   447,    -1,    51,    -1,
      -1,     8,  1434,    -1,   182,    -1,    -1,   551,    -1,   160,
      -1,    19,    -1,    -1,   510,   484,   663,  1052,  1045,  1056,
      -1,    -1,   510,    12,   485,  1052,  1046,    -1,   514,   484,
     663,  1052,    -1,   514,    12,   485,  1052,    -1,    -1,   484,
     663,   510,  1052,  1047,  1056,    -1,   484,   663,   514,  1052,
      -1,   510,   553,  1049,    -1,    -1,  1050,    -1,  1051,    -1,
    1050,   631,  1051,    -1,   606,    90,   488,    -1,   417,   364,
      -1,   417,   611,    -1,    -1,  1053,  1054,    -1,  1055,    -1,
    1054,   631,  1055,    -1,    -1,   506,    -1,   431,    -1,    -1,
     577,  1057,    -1,   662,    -1,  1057,   631,   662,    -1,    -1,
      62,  1469,  1059,  1284,  1060,    -1,    -1,   413,    -1,   174,
      -1,    -1,   437,  1087,  1469,  1062,  1284,  1063,    -1,    -1,
    1064,    -1,  1065,    -1,  1065,  1064,    -1,   413,    -1,   174,
      -1,   583,    -1,    -1,    15,  1087,  1469,  1067,  1068,    -1,
    1069,    -1,  1068,   631,  1069,    -1,  1285,  1070,    -1,    -1,
     390,   189,  1071,    -1,    12,    -1,    73,  1072,   227,  1074,
      -1,    12,    -1,    -1,   629,  1073,  1076,   630,    -1,    12,
      -1,    -1,   629,  1075,  1077,   630,    -1,    -1,  1434,    -1,
    1076,   631,  1434,    -1,    -1,  1078,    -1,  1077,   631,  1078,
      -1,  1434,    -1,   402,    -1,    35,  1431,    -1,    -1,    63,
    1469,  1081,  1284,  1082,    -1,    -1,  1083,    -1,  1084,    -1,
    1084,  1083,    -1,   413,    -1,   178,    -1,   316,    -1,   174,
      -1,    58,    -1,   189,   579,    -1,    -1,   367,  1087,  1469,
    1086,  1284,    -1,    -1,   355,    -1,   272,    -1,    -1,   435,
    1469,  1089,  1091,    -1,   435,   581,   688,  1090,    -1,  1437,
     551,  1437,    -1,  1090,   631,  1437,   551,  1437,    -1,  1092,
      -1,  1091,   631,  1092,    -1,  1427,   551,  1427,    -1,    -1,
      49,   228,  1094,  1095,   242,  1099,    -1,  1096,    -1,  1098,
      -1,  1097,    -1,  1096,   631,  1097,    -1,  1427,  1108,    -1,
    1427,  1106,  1108,    -1,  1434,    -1,   127,    -1,    -1,   271,
     228,   239,    49,  1101,  1102,    -1,  1105,    -1,  1103,    -1,
    1104,    -1,  1103,   631,  1104,    -1,  1427,  1108,  1111,    -1,
    1427,  1106,  1108,  1111,    -1,    -1,   388,   838,  1107,   629,
    1018,   630,    -1,    -1,  1109,  1110,    -1,    -1,   976,   629,
    1223,   630,    -1,    -1,   224,   259,    -1,  1113,    -1,   466,
    1116,    -1,   629,  1114,   630,  1525,    -1,   466,  1118,    -1,
     629,  1114,   630,    -1,   466,  1202,    -1,   629,  1115,   630,
      -1,    -1,  1118,  1117,  1522,    -1,    -1,    -1,  1119,  1123,
    1127,  1120,  1121,  1126,    -1,  1244,  1250,    -1,  1273,    -1,
    1122,    -1,  1273,  1122,    -1,  1122,  1273,    -1,   191,  1184,
    1233,  1238,  1235,  1244,  1250,  1264,    -1,   191,   145,  1233,
    1250,    -1,    -1,  1124,    -1,  1124,  1125,    -1,  1125,    -1,
    1539,    -1,   503,    -1,   501,    -1,    -1,   189,   578,    -1,
     275,   242,   476,   327,    -1,  1127,   631,  1128,    -1,  1128,
      -1,   624,    -1,  1129,  1421,  1130,    -1,  1129,  1135,  1130,
    1131,    -1,    -1,    -1,    -1,    19,  1434,    -1,    19,  1431,
      -1,  1434,    -1,  1431,    -1,    -1,   629,   630,    -1,   629,
    1258,   630,    -1,    -1,   629,   630,    -1,   629,  1258,   630,
      -1,    -1,   629,   630,    -1,  1135,  1139,  1135,    -1,  1135,
     615,  1135,    -1,  1135,  1140,  1135,    -1,   351,  1135,    -1,
    1136,   245,   558,    -1,  1136,   245,  1141,   558,    -1,  1136,
     245,   177,    -1,  1136,   245,  1141,   177,    -1,  1136,   245,
     574,    -1,  1136,   245,  1141,   574,    -1,  1136,    -1,  1136,
     245,   356,    -1,  1136,   245,  1141,   356,    -1,  1136,   161,
    1137,    -1,  1136,  1143,  1137,    -1,  1136,  1143,  1144,   629,
    1534,   630,    -1,  1137,    -1,  1138,   242,   629,  1534,   630,
      -1,  1138,  1141,   242,   629,  1534,   630,    -1,  1138,   242,
     629,  1135,   630,    -1,  1138,   242,   629,  1135,   631,  1177,
     630,    -1,  1138,  1141,   242,   629,  1135,   630,    -1,  1138,
    1141,   242,   629,  1135,   631,  1177,   630,    -1,  1138,    32,
    1138,    17,  1137,    -1,  1138,  1141,    32,  1138,    17,  1137,
      -1,  1138,   492,   265,  1138,    -1,  1138,   265,  1149,  1237,
      -1,  1138,  1141,   265,  1149,  1237,    -1,  1138,   426,  1138,
      -1,  1138,  1141,   426,  1138,    -1,  1138,    -1,  1138,   620,
    1138,    -1,  1138,   621,  1138,    -1,  1138,   477,  1138,    -1,
    1138,   478,  1138,    -1,  1138,   623,  1138,    -1,  1138,   622,
    1138,    -1,  1138,   623,   238,  1135,  1227,    -1,  1138,   622,
     238,  1135,  1227,    -1,  1138,   624,  1138,    -1,  1138,   625,
    1138,    -1,  1138,   626,  1138,    -1,  1138,   141,  1138,    -1,
    1138,   330,  1138,    -1,  1138,   627,  1138,    -1,  1149,    -1,
     374,    -1,   371,    -1,    17,    -1,    16,    -1,   351,    -1,
     350,    -1,   632,    -1,   350,    -1,   160,    -1,   195,    -1,
     206,    -1,   257,    -1,   284,    -1,   344,    -1,    12,    -1,
      18,    -1,    -1,    19,  1146,    -1,   240,    -1,   576,   240,
      -1,   142,    -1,   419,    -1,   185,    -1,   125,   940,    -1,
     934,   965,    -1,   935,    -1,   117,    -1,   547,   946,    -1,
     114,   946,    -1,  1135,   631,  1135,  1145,    -1,  1147,    -1,
    1148,   631,  1147,    -1,  1423,    -1,  1150,    -1,  1151,    -1,
    1154,    -1,  1152,    -1,  1149,    71,  1436,    -1,  1418,    -1,
    1416,    -1,  1166,    -1,  1162,    -1,  1149,   373,  1149,    -1,
     623,  1149,    -1,   622,  1149,    -1,   628,  1149,    -1,  1142,
    1149,    -1,   629,  1534,   630,    -1,   629,  1135,   630,    -1,
     629,  1135,   631,  1177,   630,    -1,   458,   629,  1135,   631,
    1177,   630,    -1,   171,   629,  1534,   630,    -1,   633,  1434,
    1135,   634,    -1,   304,  1178,     9,   629,  1138,  1156,   630,
      -1,    34,  1149,    -1,    54,   629,  1135,    19,  1174,   630,
      -1,    53,  1180,  1182,  1181,   154,    -1,    99,   629,  1135,
     631,  1174,   630,    -1,    99,   629,  1135,   585,   954,   630,
      -1,   127,   629,  1423,   630,    -1,   589,   629,  1424,   630,
      -1,   238,  1135,  1227,   623,  1135,    -1,    60,   629,  1177,
     630,    -1,    60,   629,  1177,   585,   954,   630,    -1,   106,
    1134,    -1,   117,   629,  1135,   630,    -1,   122,   629,  1135,
     630,    -1,   219,   629,  1135,   630,    -1,   235,   629,  1135,
     631,  1135,   631,  1135,   631,  1135,   630,    -1,   238,   629,
    1135,   631,  1135,   630,    -1,   238,   629,  1135,   631,  1135,
     631,  1177,   630,    -1,   261,   629,  1135,   631,  1135,   630,
      -1,   324,   629,  1135,   630,    -1,   331,   629,  1135,   630,
      -1,   452,   629,  1135,   631,  1135,   630,    -1,   464,   629,
    1135,   630,    -1,   547,   629,  1135,   630,    -1,   544,   629,
    1135,   630,    -1,   544,   629,  1135,   631,  1135,   630,    -1,
     557,   629,  1135,   630,    -1,   557,   629,   258,  1135,   191,
    1135,   630,    -1,   557,   629,   552,  1135,   191,  1135,   630,
      -1,   557,   629,    45,  1135,   191,  1135,   630,    -1,   557,
     629,   258,   191,  1135,   630,    -1,   557,   629,   552,   191,
    1135,   630,    -1,   557,   629,    45,   191,  1135,   630,    -1,
     557,   629,  1135,   191,  1135,   630,    -1,   581,   629,   630,
      -1,   617,   629,  1135,   630,    -1,     7,   629,  1135,   631,
    1135,   630,    -1,     7,   629,  1135,   631,   238,  1135,  1227,
     630,    -1,   105,  1134,    -1,   109,  1133,    -1,   115,   629,
    1135,   631,   238,  1135,  1227,   630,    -1,   116,   629,  1135,
     631,   238,  1135,  1227,   630,    -1,   176,   629,  1227,   191,
    1135,   630,    -1,   200,   629,  1229,   631,  1135,   630,    -1,
     352,  1133,    -1,   397,   629,  1138,   242,  1135,   630,    -1,
     519,   629,  1135,   631,  1135,   630,    -1,   519,   629,  1135,
     631,   238,  1135,  1227,   630,    -1,   523,   629,  1135,   631,
    1135,   631,  1135,   630,    -1,   523,   629,  1135,   631,  1135,
     630,    -1,   523,   629,  1135,   191,  1135,   189,  1135,   630,
      -1,   523,   629,  1135,   191,  1135,   630,    -1,   529,  1133,
      -1,   545,   629,  1228,   631,  1135,   631,  1135,   630,    -1,
     546,   629,  1228,   631,  1135,   631,  1135,   630,    -1,   586,
    1134,    -1,   588,  1133,    -1,   587,  1133,    -1,    74,   629,
    1135,   631,  1148,   630,    -1,    77,   629,  1135,   631,  1177,
     630,    -1,    75,   629,  1135,   630,    -1,    76,   629,  1148,
     630,    -1,    78,   629,  1135,   631,  1135,    19,  1174,   630,
      -1,    21,   629,  1135,   630,    -1,    59,   629,  1135,   630,
      -1,    69,   629,  1177,   630,    -1,    72,   629,  1135,   630,
      -1,   110,   629,   630,    -1,   223,   629,  1135,   631,  1135,
     631,  1135,   630,    -1,   256,   629,  1177,   630,    -1,   320,
     629,  1135,   630,    -1,   330,   629,  1135,   631,  1135,   630,
      -1,   361,   629,  1135,   630,    -1,   389,   629,  1135,   630,
      -1,   411,   629,  1135,   630,    -1,   439,   629,  1135,   631,
    1135,   630,    -1,   440,   629,  1135,   631,  1135,   631,  1135,
     630,    -1,   559,   629,  1135,   631,  1135,   630,    -1,   602,
     629,  1135,   630,    -1,   602,   629,  1135,   631,  1135,   630,
      -1,  1153,    -1,    95,   629,  1135,   631,  1135,   630,    -1,
     198,   629,  1177,   630,    -1,   269,   629,  1177,   630,    -1,
     332,   629,  1177,   630,    -1,   333,   629,  1177,   630,    -1,
     334,   629,  1177,   630,    -1,   394,   629,  1135,   631,  1135,
     630,    -1,   395,   629,  1177,   630,    -1,    -1,  1430,   629,
    1155,  1159,   630,    -1,  1434,   637,  1434,   629,  1176,   630,
      -1,  1157,  1158,    -1,   242,    43,   327,    -1,    -1,   242,
     340,   254,   327,    -1,    -1,   606,   412,   173,    -1,    -1,
    1160,    -1,  1161,    -1,  1160,   631,  1161,    -1,  1129,  1135,
    1130,  1131,    -1,    28,   629,  1172,   630,    -1,    28,   629,
     140,  1172,   630,    -1,    37,   629,  1172,   630,    -1,    38,
     629,  1172,   630,    -1,    40,   629,  1172,   630,    -1,   100,
     629,  1232,   624,   630,    -1,   100,   629,  1172,   630,    -1,
      -1,    -1,   100,   629,   140,  1163,  1177,  1164,   630,    -1,
     326,   629,  1172,   630,    -1,   326,   629,   140,  1172,   630,
      -1,   309,   629,  1172,   630,    -1,   309,   629,   140,  1172,
     630,    -1,   513,   629,  1172,   630,    -1,   594,   629,  1172,
     630,    -1,   512,   629,  1172,   630,    -1,   596,   629,  1172,
     630,    -1,   524,   629,  1172,   630,    -1,   524,   629,   140,
    1172,   630,    -1,    -1,   205,   629,  1169,  1165,  1177,  1171,
    1170,   630,    -1,    -1,   636,  1167,  1168,    -1,  1436,   475,
    1135,    -1,  1436,    -1,   636,  1456,  1436,   999,    -1,    -1,
     140,    -1,    -1,   468,  1415,    -1,    -1,  1245,    -1,    -1,
    1232,  1173,  1135,    -1,    34,   946,    -1,    60,   946,   965,
      -1,   342,   946,    -1,   240,    -1,   482,    -1,   482,   240,
      -1,   576,    -1,   576,   240,    -1,   117,    -1,   547,   946,
      -1,   114,   946,    -1,   125,   940,    -1,    -1,   142,  1175,
     947,    -1,    -1,  1177,    -1,  1135,    -1,  1177,   631,  1135,
      -1,  1179,    -1,   629,  1179,   630,    -1,  1423,    -1,  1179,
     631,  1423,    -1,    -1,  1135,    -1,    -1,   150,  1135,    -1,
     603,  1135,   543,  1135,    -1,  1182,   603,  1135,   543,  1135,
      -1,  1196,    -1,  1187,    -1,  1186,    -1,  1183,    -1,   633,
    1434,  1183,   634,    -1,  1185,    -1,  1186,   631,  1185,    -1,
    1183,  1195,  1183,    -1,  1183,   516,  1196,    -1,    -1,  1183,
    1195,  1183,   362,  1188,  1135,    -1,    -1,  1183,   516,  1196,
     362,  1189,  1135,    -1,    -1,  1183,  1195,  1183,   585,  1190,
     629,  1226,   630,    -1,  1183,   340,   249,  1196,    -1,    -1,
    1183,   261,  1212,   249,  1183,   362,  1191,  1135,    -1,    -1,
    1183,   261,  1212,   249,  1196,  1192,   585,   629,  1226,   630,
      -1,  1183,   340,   261,  1212,   249,  1196,    -1,    -1,  1183,
     452,  1212,   249,  1183,   362,  1193,  1135,    -1,    -1,  1183,
     452,  1212,   249,  1196,  1194,   585,   629,  1226,   630,    -1,
    1183,   340,   452,  1212,   249,  1196,    -1,   249,    -1,   232,
     249,    -1,   103,   249,    -1,    -1,  1197,  1427,  1231,  1221,
      -1,  1211,  1210,  1207,    -1,   629,  1210,  1198,   630,  1231,
      -1,  1205,  1526,    -1,    -1,    -1,  1198,   572,  1530,  1199,
    1531,  1200,  1526,    -1,  1202,    -1,    -1,    -1,  1203,  1537,
    1127,  1204,   905,  1126,    -1,    -1,  1210,  1206,  1186,    -1,
      -1,    -1,  1208,  1123,  1127,  1209,   905,    -1,    -1,   466,
      -1,    -1,   375,    -1,    -1,   189,   249,    -1,   189,   372,
      47,    -1,   189,   204,    47,    -1,   187,    -1,   224,    -1,
      -1,  1214,   976,  1213,  1216,   629,  1225,   630,    -1,    -1,
     584,   976,  1213,  1217,   629,  1223,   630,    -1,  1215,    -1,
    1218,  1215,    -1,    -1,    -1,  1220,  1218,    -1,    -1,  1222,
    1219,    -1,    -1,  1225,    -1,  1434,    -1,   402,    -1,  1224,
      -1,  1225,   631,  1224,    -1,  1434,    -1,  1226,   631,  1434,
      -1,  1228,    -1,   118,    -1,   119,    -1,   120,    -1,   121,
      -1,   216,    -1,   217,    -1,   218,    -1,   322,    -1,   323,
      -1,   463,    -1,   616,    -1,   122,    -1,   602,    -1,   219,
      -1,   324,    -1,   331,    -1,   411,    -1,   464,    -1,   320,
      -1,   617,    -1,   117,    -1,   547,    -1,   114,    -1,   544,
      -1,    -1,    19,    -1,   160,    -1,    -1,  1230,  1434,    -1,
      -1,    12,    -1,    -1,    -1,   604,  1234,  1135,    -1,    -1,
      -1,   210,  1236,  1135,    -1,   165,  1149,    -1,    -1,    -1,
     204,    47,  1239,  1240,    -1,  1239,   631,  1422,  1248,    -1,
    1422,  1248,    -1,    -1,   607,    -1,   608,    -1,   372,    47,
    1242,    -1,  1242,   631,  1243,    -1,  1243,    -1,  1424,  1248,
      -1,    -1,  1245,    -1,    -1,   372,    47,  1246,  1247,    -1,
    1247,   631,  1422,  1248,    -1,  1422,  1248,    -1,    -1,    20,
      -1,   132,    -1,    -1,  1251,    -1,    -1,  1251,    -1,   266,
    1252,    -1,   266,  1252,   456,   169,  1254,    -1,   266,   456,
     169,  1254,    -1,  1253,    -1,  1253,   631,  1253,    -1,  1253,
     360,  1253,    -1,  1434,    -1,  1416,    -1,   563,    -1,   280,
      -1,   357,    -1,  1253,    -1,    -1,   266,  1253,    -1,   266,
     456,   169,    -1,   266,  1253,   456,   169,    -1,   357,    -1,
     622,   357,    -1,   622,   280,    -1,   357,    -1,   212,    -1,
     280,    -1,   563,    -1,   124,    -1,   184,    -1,   357,    -1,
     212,    -1,   280,    -1,   563,    -1,  1261,    -1,   357,    -1,
     563,    -1,   280,    -1,   124,    -1,   184,    -1,   357,    -1,
     563,    -1,   212,    -1,   280,    -1,  1261,    -1,  1262,    -1,
     124,    -1,   184,    -1,  1257,    -1,   127,    -1,    -1,    -1,
     404,  1434,  1265,   629,  1266,   630,    -1,    -1,  1267,    -1,
    1267,   631,  1268,    -1,  1268,    -1,  1129,  1135,  1130,    -1,
      -1,  1270,  1271,    -1,  1271,   631,  1272,    -1,  1272,    -1,
     636,  1436,    -1,  1436,    -1,    -1,   239,  1274,  1275,    -1,
      -1,    -1,   376,  1433,  1276,   956,  1277,  1399,  1402,    -1,
     146,  1433,    -1,  1269,    -1,    -1,   143,  1279,  1177,    -1,
      -1,   144,  1289,  1469,  1288,  1281,  1284,  1041,    -1,    -1,
     144,   228,  1434,   362,  1427,  1282,    -1,   144,   110,  1288,
    1434,    -1,   144,   194,  1288,  1434,   637,  1434,    -1,   144,
     194,  1288,  1434,    -1,   144,   404,  1288,   689,    -1,   144,
     581,   688,  1499,    -1,    -1,   144,   598,  1288,  1283,  1284,
    1041,    -1,   144,   167,  1288,   689,    -1,   144,   556,  1288,
     689,    -1,   144,   531,   812,   823,   824,    -1,   144,   276,
     204,   813,   823,   824,    -1,   144,   472,  1288,  1436,    -1,
    1285,    -1,  1284,   631,  1285,    -1,  1427,    -1,  1287,    -1,
    1286,   631,  1287,    -1,  1428,    -1,    -1,   223,   171,    -1,
      -1,   537,    -1,    -1,    -1,   235,  1291,  1296,  1035,  1298,
    1292,  1300,  1316,    -1,    -1,    -1,   440,  1294,  1297,  1298,
    1295,  1300,    -1,    -1,   283,    -1,   129,    -1,   213,    -1,
    1325,    -1,   129,    -1,   239,  1299,    -1,  1299,    -1,  1285,
      -1,  1303,    -1,   629,   630,  1303,    -1,   629,  1302,   630,
    1303,    -1,    -1,   474,  1301,  1307,    -1,  1302,   631,  1420,
      -1,  1420,    -1,   589,  1306,    -1,   590,  1306,    -1,    -1,
     883,  1304,  1522,    -1,    -1,   629,   883,   630,  1305,  1525,
      -1,  1306,   631,  1311,    -1,  1311,    -1,  1307,   631,  1308,
      -1,  1308,    -1,  1424,  1309,  1315,    -1,   160,    -1,   475,
      -1,    -1,  1309,    -1,    -1,   629,  1312,  1313,   630,    -1,
      -1,  1314,    -1,  1314,   631,  1315,    -1,  1315,    -1,  1135,
      -1,   127,    -1,    -1,    -1,   362,   147,  1317,   252,   578,
    1323,    -1,    -1,    -1,   578,  1319,  1325,  1035,  1184,   474,
    1321,  1320,  1233,  1244,  1255,    -1,  1321,   631,  1322,    -1,
    1322,    -1,  1424,  1309,  1315,    -1,  1323,   631,  1324,    -1,
    1324,    -1,  1424,  1309,  1315,    -1,    -1,   283,    -1,    -1,
     131,  1327,  1335,  1328,    -1,    -1,   191,  1427,  1329,  1233,
    1244,  1255,    -1,    -1,  1332,  1330,   191,  1184,  1233,    -1,
      -1,   191,  1286,  1331,   585,  1184,  1233,    -1,  1333,    -1,
    1332,   631,  1333,    -1,  1434,  1334,    -1,  1434,   637,  1434,
    1334,    -1,    -1,   637,   624,    -1,    -1,  1336,  1335,    -1,
     413,    -1,   283,    -1,   224,    -1,    -1,   559,  1339,  1338,
    1285,    -1,    -1,   534,    -1,    -1,  1341,    -1,  1342,    -1,
    1341,   631,  1342,    -1,   101,    -1,   317,    -1,    42,   243,
      -1,    96,   528,    -1,   380,   179,    -1,   244,    -1,   527,
      -1,   493,    -1,    12,    -1,    -1,   189,   412,   357,    -1,
      -1,   479,  1345,  1346,    -1,   111,  1357,    -1,  1353,   530,
    1352,  1357,    -1,  1353,   555,  1352,  1357,    -1,   166,  1352,
    1357,    -1,   534,   511,  1352,  1357,    -1,   366,   530,  1352,
    1357,    -1,   392,    -1,   158,   902,  1349,    -1,   158,    12,
    1349,    -1,  1353,    73,  1354,  1427,  1352,  1357,    -1,  1350,
     277,    -1,   484,   215,    -1,    -1,    35,   166,  1355,  1356,
    1347,  1249,    -1,    -1,   428,   663,   166,  1355,  1356,  1348,
    1249,    -1,   978,  1354,  1427,  1352,  1233,    -1,  1351,   157,
      -1,    24,    -1,    98,    -1,   403,    -1,   100,   629,   624,
     630,   601,    -1,   100,   629,   624,   630,   163,    -1,   601,
    1249,    -1,   163,  1249,    -1,   408,    -1,   407,  1340,  1343,
    1249,    -1,  1455,   511,  1357,    -1,  1353,   406,    -1,  1455,
     593,  1357,    -1,   953,  1357,    -1,    72,  1357,    -1,   203,
      -1,   203,   189,  1437,    -1,   102,   110,   893,  1434,    -1,
     102,   534,  1427,    -1,   102,   598,  1427,    -1,   301,   511,
      -1,    12,   485,   511,    -1,   484,   511,    -1,   484,   664,
     511,    -1,    67,    -1,   582,    -1,   533,    -1,   229,    -1,
     102,   404,   689,    -1,   102,   194,   689,    -1,   102,   556,
     689,    -1,   404,   511,  1357,    -1,   194,   511,  1357,    -1,
     404,    70,   689,    -1,   194,    70,   689,    -1,   102,   167,
     689,    -1,  1361,   189,  1135,    -1,   511,    -1,   335,    -1,
     277,    -1,   301,    -1,    34,    -1,    -1,   515,    -1,    -1,
    1354,  1434,    -1,    -1,   192,    -1,   191,    -1,   242,    -1,
      -1,   242,  1431,    -1,    -1,   191,  1259,    -1,    -1,   265,
    1431,    -1,   604,  1135,    -1,    -1,  1361,  1427,  1359,  1363,
      -1,    -1,  1361,  1362,  1360,  1112,    -1,   132,    -1,   133,
      -1,    -1,   174,    -1,   387,    -1,    -1,  1415,    -1,  1434,
      -1,    -1,   186,  1087,  1365,  1366,    -1,    -1,    -1,  1469,
    1367,  1372,  1368,  1369,    -1,  1370,    -1,    -1,   606,   417,
     275,  1373,    -1,  1370,   631,  1371,    -1,  1371,    -1,   162,
     277,    -1,   158,   277,    -1,   196,   277,    -1,   486,   277,
      -1,    34,   277,    -1,   427,   277,   663,    -1,   412,    49,
      -1,   215,    -1,   403,    -1,   277,    -1,   511,    -1,   484,
     663,    -1,    67,    -1,   582,    -1,   533,    -1,   229,    -1,
     301,    -1,   134,    -1,   445,    -1,    -1,  1284,    -1,    -1,
      17,   137,    61,    -1,    -1,   443,  1375,  1376,    -1,  1376,
     631,  1377,    -1,  1377,    -1,    -1,   484,  1378,   663,  1379,
      -1,   301,    -1,   412,    49,    -1,    -1,    12,    -1,    -1,
     410,  1381,  1382,    -1,  1350,   277,  1383,    -1,   551,  1431,
      -1,    30,  1135,    -1,    -1,   253,  1385,  1386,  1387,  1388,
      -1,    -1,   208,    -1,   490,    -1,    -1,    89,    -1,   412,
      -1,  1135,    -1,   581,  1437,    -1,   584,  1434,    -1,    -1,
      -1,    -1,    -1,   271,  1395,  1391,  1397,  1396,   230,  1433,
    1392,  1398,   239,   534,  1427,  1393,   956,  1394,  1405,  1399,
    1402,  1406,  1408,  1411,    -1,   113,    -1,   614,    -1,    -1,
     272,    -1,    -1,    87,    -1,   283,    -1,    -1,   440,    -1,
     224,    -1,    -1,    73,  1400,    -1,  1400,  1401,    -1,  1401,
      -1,   539,    47,  1415,    -1,   370,   153,    47,  1415,    -1,
     153,    47,  1415,    -1,   164,    47,  1415,    -1,    -1,   268,
    1403,    -1,  1403,  1404,    -1,  1404,    -1,   539,    47,  1415,
      -1,   508,    47,  1415,    -1,    -1,   456,   221,    47,  1415,
      -1,    -1,   224,   357,  1407,    -1,   268,    -1,   456,    -1,
      -1,   629,  1409,   630,    -1,   629,   630,    -1,  1409,   631,
    1410,    -1,  1410,    -1,  1424,    -1,   636,  1436,    -1,    -1,
     474,  1412,    -1,  1412,   631,  1413,    -1,  1413,    -1,  1424,
    1309,  1129,  1315,  1130,    -1,   540,    -1,   341,    -1,   566,
     540,    -1,  1414,  1432,    -1,  1432,    -1,   212,    -1,    36,
      -1,   382,    -1,  1418,    -1,   623,  1419,    -1,   622,  1419,
      -1,  1414,    -1,  1419,    -1,   356,    -1,   177,    -1,   558,
      -1,   212,    -1,    36,    -1,   566,   212,    -1,   566,    36,
      -1,   117,  1414,    -1,   547,  1414,    -1,   544,  1414,    -1,
     357,    -1,   280,    -1,   563,    -1,   124,    -1,   184,    -1,
    1424,    -1,  1421,    -1,  1434,   637,   624,    -1,  1434,   637,
    1434,   637,   624,    -1,  1135,    -1,  1434,    -1,  1425,    -1,
    1434,    -1,  1425,    -1,  1434,   637,  1434,    -1,   637,  1434,
     637,  1434,    -1,  1434,   637,  1434,   637,  1434,    -1,  1434,
      -1,  1434,   637,  1434,   637,  1434,    -1,  1434,   637,  1434,
      -1,   637,  1434,    -1,  1434,    -1,  1434,   637,  1434,    -1,
     637,  1434,    -1,  1434,  1334,    -1,  1434,   637,  1434,  1334,
      -1,  1434,    -1,   220,    -1,   222,    -1,   540,    -1,   540,
      -1,   540,    -1,  1430,    -1,  1438,    -1,  1430,    -1,  1439,
      -1,  1434,    -1,  1431,    -1,   264,    -1,  1436,    -1,  1436,
     636,  1436,    -1,   106,  1134,    -1,  1439,    -1,    21,    -1,
      29,    -1,    31,    -1,    48,    -1,    49,    -1,    59,    -1,
      62,    -1,    61,    -1,    68,    -1,    74,    -1,    75,    -1,
      76,    -1,    77,    -1,    78,    -1,    81,    -1,    83,    -1,
      95,    -1,   123,    -1,   143,    -1,   154,    -1,   169,    -1,
     170,    -1,   186,    -1,   207,    -1,   211,    -1,   214,    -1,
     237,    -1,   254,    -1,   353,    -1,   366,    -1,   368,    -1,
     378,    -1,   383,    -1,   388,    -1,   396,    -1,   399,    -1,
     434,    -1,   437,    -1,   443,    -1,   446,    -1,   453,    -1,
     460,    -1,   465,    -1,   472,    -1,   482,    -1,   489,    -1,
     484,    -1,   485,    -1,   491,    -1,   510,    -1,   514,    -1,
     559,    -1,   570,    -1,   571,    -1,   610,    -1,   613,    -1,
     579,    -1,     5,    -1,     7,    -1,     8,    -1,     9,    -1,
      10,    -1,    11,    -1,    14,    -1,    18,    -1,    23,    -1,
      24,    -1,    26,    -1,    25,    -1,    27,    -1,    28,    -1,
      35,    -1,    39,    -1,    42,    -1,    44,    -1,    43,    -1,
      46,    -1,    52,    -1,    55,    -1,    56,    -1,    58,    -1,
      64,    -1,    67,    -1,    66,    -1,    65,    -1,    69,    -1,
      70,    -1,    72,    -1,    80,    -1,    73,    -1,    82,    -1,
      84,    -1,    85,    -1,    86,    -1,    87,    -1,    89,    -1,
      90,    -1,    92,    -1,    94,    -1,    93,    -1,    96,    -1,
      98,    -1,   101,    -1,   104,    -1,   108,    -1,   113,    -1,
     112,    -1,   114,    -1,   117,    -1,   122,    -1,   128,    -1,
     130,    -1,   134,    -1,   136,    -1,   137,    -1,   138,    -1,
     139,    -1,   146,    -1,   147,    -1,   148,    -1,   155,    -1,
     159,    -1,   158,    -1,   157,    -1,   162,    -1,   163,    -1,
     165,    -1,   167,    -1,   166,    -1,   168,    -1,   173,    -1,
     174,    -1,   175,    -1,   179,    -1,   178,    -1,   190,    -1,
     152,    -1,   192,    -1,   181,    -1,   182,    -1,   183,    -1,
     196,    -1,   197,    -1,   199,    -1,   198,    -1,   200,    -1,
     203,    -1,   201,    -1,   209,    -1,   208,    -1,   215,    -1,
     219,    -1,   221,    -1,   225,    -1,   229,    -1,   241,    -1,
     226,    -1,   227,    -1,   231,    -1,   243,    -1,   244,    -1,
     246,    -1,   247,    -1,   236,    -1,   251,    -1,   256,    -1,
     255,    -1,   259,    -1,   262,    -1,   263,    -1,   269,    -1,
     270,    -1,   272,    -1,   274,    -1,   276,    -1,   277,    -1,
     307,    -1,   301,    -1,   303,    -1,   286,    -1,   290,    -1,
     287,    -1,   288,    -1,   302,    -1,   289,    -1,   291,    -1,
     285,    -1,   299,    -1,   293,    -1,   292,    -1,   294,    -1,
     295,    -1,   296,    -1,   297,    -1,   298,    -1,   305,    -1,
     306,    -1,   308,    -1,   310,    -1,   311,    -1,   316,    -1,
     317,    -1,   318,    -1,   319,    -1,   320,    -1,   321,    -1,
     324,    -1,   325,    -1,   329,    -1,   327,    -1,   331,    -1,
     332,    -1,   333,    -1,   334,    -1,   335,    -1,   336,    -1,
     338,    -1,   337,    -1,   339,    -1,   342,    -1,   343,    -1,
     347,    -1,   346,    -1,   354,    -1,   348,    -1,   349,    -1,
     359,    -1,   360,    -1,   361,    -1,   363,    -1,   365,    -1,
     364,    -1,   379,    -1,   380,    -1,   385,    -1,   386,    -1,
     387,    -1,   389,    -1,   390,    -1,   391,    -1,   393,    -1,
     392,    -1,   394,    -1,   395,    -1,   400,    -1,   401,    -1,
     403,    -1,   405,    -1,   406,    -1,   407,    -1,   408,    -1,
     409,    -1,   411,    -1,   412,    -1,   413,    -1,   416,    -1,
     420,    -1,   421,    -1,   423,    -1,   422,    -1,   424,    -1,
     427,    -1,   428,    -1,   429,    -1,   430,    -1,   431,    -1,
     433,    -1,   436,    -1,   438,    -1,   441,    -1,   445,    -1,
     448,    -1,   449,    -1,   454,    -1,   455,    -1,   456,    -1,
     457,    -1,   458,    -1,   459,    -1,   461,    -1,   462,    -1,
     464,    -1,   470,    -1,   469,    -1,   471,    -1,   483,    -1,
     476,    -1,   480,    -1,   486,    -1,   488,    -1,   490,    -1,
     492,    -1,   493,    -1,   501,    -1,   500,    -1,   503,    -1,
     506,    -1,   509,    -1,   511,    -1,   515,    -1,   517,    -1,
     518,    -1,   519,    -1,   520,    -1,   522,    -1,   521,    -1,
     525,    -1,   526,    -1,   527,    -1,   528,    -1,   536,    -1,
     533,    -1,   530,    -1,   535,    -1,   531,    -1,   537,    -1,
     538,    -1,   541,    -1,   542,    -1,   553,    -1,   554,    -1,
     555,    -1,   544,    -1,   545,    -1,   546,    -1,   547,    -1,
     560,    -1,   561,    -1,   562,    -1,   194,    -1,   564,    -1,
     565,    -1,   568,    -1,   567,    -1,   574,    -1,   577,    -1,
     581,    -1,   582,    -1,   583,    -1,   593,    -1,   598,    -1,
     599,    -1,   590,    -1,   601,    -1,   600,    -1,   602,    -1,
     609,    -1,   612,    -1,   614,    -1,   617,    -1,   597,    -1,
      -1,   474,  1441,  1442,    -1,    -1,  1458,  1443,  1448,    -1,
      -1,   553,  1444,  1460,    -1,    -1,  1454,  1445,  1446,    -1,
      -1,  1457,  1447,  1448,    -1,   553,  1460,    -1,    -1,   631,
    1449,    -1,    -1,  1450,  1452,    -1,    -1,  1449,   631,  1451,
    1452,    -1,    -1,  1454,  1453,  1457,    -1,  1458,    -1,   201,
      -1,   272,    -1,   471,    -1,    -1,   201,    -1,   272,    -1,
     471,    -1,    -1,   201,   637,    -1,   272,   637,    -1,   471,
     637,    -1,  1459,  1309,  1466,    -1,  1459,  1309,  1466,    -1,
     636,  1436,  1309,  1135,    -1,   636,   636,  1456,  1459,  1309,
    1466,    -1,   953,   958,    -1,   337,  1309,  1135,    -1,   337,
     955,   960,    -1,   389,  1309,  1465,    -1,   389,   189,  1437,
    1309,  1465,    -1,  1434,    -1,  1434,   637,  1434,    -1,   127,
     637,  1434,    -1,  1461,    -1,  1462,    -1,  1461,   631,  1462,
      -1,  1462,   631,  1461,    -1,  1463,    -1,   246,   263,  1464,
      -1,   417,   364,    -1,   417,   611,    -1,   417,   564,    -1,
     417,    82,    -1,   438,   417,    -1,   469,    -1,   540,    -1,
     389,   629,   540,   630,    -1,   361,   629,   540,   630,    -1,
    1135,    -1,   127,    -1,   362,    -1,    12,    -1,    34,    -1,
      -1,   275,  1469,  1468,  1470,    -1,   534,    -1,   530,    -1,
    1471,    -1,  1470,   631,  1471,    -1,  1427,  1231,  1472,    -1,
     417,    -1,   611,    -1,   611,    87,    -1,   283,   611,    -1,
     417,   272,    -1,    -1,   575,  1474,  1469,    -1,   207,  1427,
     366,  1231,    -1,   207,  1429,    68,    -1,    -1,   207,  1429,
     417,  1476,  1477,  1233,  1250,    -1,  1478,    -1,  1434,  1479,
      -1,   182,    -1,   347,    -1,   182,    -1,   347,    -1,   401,
      -1,   255,    -1,    -1,  1481,  1480,   629,  1314,   630,    -1,
     160,    -1,   195,    -1,   257,    -1,   206,    -1,   284,    -1,
     451,   688,  1483,    -1,  1487,   362,  1486,  1498,   191,  1499,
      -1,  1487,   362,   194,  1498,   191,  1499,    -1,  1487,   362,
     404,  1498,   191,  1499,    -1,    12,  1488,   631,   202,   369,
     191,  1499,    -1,   409,   362,  1437,   191,  1499,    -1,   202,
     688,  1485,    -1,  1487,   362,  1486,  1498,   551,  1500,  1507,
    1508,    -1,  1487,   362,   194,  1498,   551,  1500,  1507,  1508,
      -1,  1487,   362,   404,  1498,   551,  1500,  1507,  1508,    -1,
     409,   362,  1437,   551,  1500,  1509,    -1,    -1,   534,    -1,
    1489,    -1,    12,  1488,    -1,    -1,   403,    -1,  1490,    -1,
    1489,   631,  1490,    -1,    -1,   466,  1491,  1504,    -1,    -1,
     235,  1492,  1504,    -1,    -1,   578,  1493,  1504,    -1,    -1,
     425,  1494,  1504,    -1,   131,    -1,   580,    -1,   228,    -1,
      13,    -1,   102,    -1,   144,    -1,   170,    -1,   433,    -1,
     480,    -1,   405,    -1,   181,    -1,   202,   369,    -1,   479,
     111,    -1,   525,    -1,   102,   537,   530,    -1,   275,   530,
      -1,   441,   484,    -1,   441,    66,    -1,   102,   598,    -1,
     479,   598,    -1,   102,   455,    -1,    13,   455,    -1,   102,
     581,    -1,   167,    -1,   556,    -1,   102,   531,    -1,    -1,
      17,    -1,  1497,  1495,  1496,    -1,  1497,    -1,   520,   540,
      -1,   247,   540,    -1,    64,   540,    -1,   624,    -1,  1434,
     637,   624,    -1,   624,   637,   624,    -1,  1427,    -1,  1437,
      -1,  1499,   631,  1437,    -1,  1503,    -1,  1500,   631,  1503,
      -1,   597,    -1,   606,    -1,   585,    -1,    19,    -1,  1437,
     221,    47,   540,    -1,  1437,   221,    47,   389,   540,    -1,
    1437,   221,  1501,  1436,    -1,  1437,   221,  1501,  1436,  1502,
    1431,    -1,  1437,    -1,    -1,   629,  1505,   630,    -1,  1505,
     631,  1506,    -1,  1506,    -1,  1434,    -1,    -1,   442,  1496,
      -1,   442,   507,    -1,   442,   612,    -1,   442,   349,    -1,
      -1,   606,  1510,    -1,    -1,   606,   202,   369,    -1,  1510,
    1511,    -1,  1511,    -1,   202,   369,    -1,   306,  1257,    -1,
     310,  1257,    -1,   305,  1257,    -1,   311,  1256,    -1,    -1,
      31,  1513,  1514,    -1,    -1,   609,    -1,    -1,    17,   353,
      56,    -1,    17,    56,    -1,    -1,   432,    -1,   353,   432,
      -1,    -1,   460,    -1,    83,  1514,  1515,  1516,    -1,   453,
    1514,  1515,  1516,    -1,   453,  1514,   551,  1517,  1434,    -1,
     460,  1434,    -1,   432,   460,  1434,    -1,    -1,  1523,    -1,
      -1,   572,  1530,  1524,  1113,    -1,    -1,  1523,    -1,  1527,
      -1,    -1,  1527,    -1,    -1,  1528,  1529,    -1,  1245,  1249,
      -1,  1251,    -1,    -1,   140,    -1,    12,    -1,   466,  1201,
      -1,   629,  1115,   630,    -1,  1531,  1526,    -1,    -1,  1532,
     572,  1530,  1533,  1531,  1526,    -1,  1535,  1532,  1536,    -1,
      -1,    -1,    -1,  1538,    -1,  1538,  1539,    -1,  1539,    -1,
     516,    -1,   213,    -1,   140,    -1,   504,    -1,   499,    -1,
     500,    -1,   502,    -1,    12,    -1,  1545,  1541,    -1,  1544,
    1542,    -1,  1546,  1543,  1550,    -1,  1550,    -1,  1558,    -1,
    1569,    -1,  1563,    -1,   675,    -1,  1550,    -1,  1558,    -1,
    1569,    -1,  1563,    -1,  1562,    -1,   675,    -1,  1544,    -1,
    1545,    -1,    -1,   128,   160,  1437,    -1,  1547,    -1,  1547,
    1548,    -1,  1548,    -1,   374,   440,    -1,    11,   160,   565,
      -1,    11,   160,   318,    -1,    11,   160,   538,    -1,    -1,
     505,   465,   128,    -1,   505,   465,   241,    -1,    -1,  1549,
     598,  1427,  1551,  1552,    19,  1554,    -1,    -1,   629,  1553,
     630,    -1,  1434,    -1,  1553,   631,  1434,    -1,    -1,  1555,
    1556,  1557,    -1,   466,  1116,    -1,   629,  1114,   630,  1525,
      -1,    -1,   606,    63,   369,    -1,   606,    52,    63,   369,
      -1,   606,   272,    63,   369,    -1,    -1,    -1,    -1,   556,
    1129,   689,   783,   784,   362,  1129,  1559,  1427,   189,  1129,
    1560,   149,   458,  1561,   733,    -1,    10,  1129,   194,  1434,
     449,   906,   491,  1431,    -1,  1129,   194,  1434,   449,   906,
     491,  1431,    -1,    -1,    -1,    -1,    -1,    -1,  1129,   194,
     689,   629,  1564,   700,   630,  1565,   449,  1566,   951,  1567,
     691,  1568,   733,    -1,    -1,    -1,    -1,    -1,   404,  1129,
     689,  1570,   629,  1571,   704,   630,  1572,   691,  1573,   733,
      -1,   613,  1576,  1575,  1577,    -1,   613,   154,  1575,  1579,
      -1,   613,   399,  1575,    -1,   613,    83,  1575,  1578,    -1,
     613,   453,  1575,    -1,   613,   421,    -1,  1415,    -1,  1415,
     631,  1415,    -1,  1415,   631,  1415,   631,  1257,    -1,    31,
      -1,   510,    -1,    -1,   249,    -1,   448,    -1,    -1,   363,
     391,    -1,    -1,    -1,   526,  1580,  1581,    -1,    -1,   189,
     321,    -1,   237,   393,  1434,   491,  1431,    -1,   237,   491,
    1431,    -1,   571,   393,  1434,    -1,   571,   491,  1431,    -1,
     619,    -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,  1826,  1826,  1839,  1838,  1863,  1870,  1872,  1876,  1877,
    1882,  1883,  1884,  1885,  1886,  1887,  1888,  1889,  1890,  1891,
    1892,  1893,  1894,  1895,  1896,  1897,  1898,  1899,  1900,  1901,
    1902,  1903,  1904,  1905,  1906,  1907,  1908,  1909,  1910,  1911,
    1912,  1913,  1914,  1915,  1916,  1917,  1918,  1919,  1920,  1921,
    1922,  1923,  1924,  1925,  1926,  1927,  1928,  1929,  1930,  1931,
    1932,  1933,  1934,  1938,  1948,  1949,  1953,  1963,  1970,  1981,
    1980,  1991,  1993,  1997,  1998,  2002,  2015,  2014,  2034,  2033,
    2042,  2043,  2047,  2051,  2055,  2059,  2063,  2067,  2072,  2076,
    2080,  2084,  2088,  2092,  2097,  2101,  2106,  2137,  2142,  2145,
    2147,  2148,  2152,  2158,  2162,  2178,  2182,  2192,  2197,  2201,
    2217,  2216,  2258,  2257,  2269,  2267,  2280,  2278,  2290,  2289,
    2302,  2301,  2309,  2313,  2317,  2321,  2328,  2341,  2342,  2346,
    2350,  2354,  2358,  2362,  2366,  2370,  2378,  2377,  2409,  2408,
    2415,  2422,  2423,  2429,  2435,  2445,  2451,  2457,  2459,  2466,
    2467,  2471,  2477,  2486,  2487,  2495,  2495,  2553,  2554,  2555,
    2556,  2557,  2558,  2559,  2560,  2561,  2562,  2563,  2564,  2565,
    2570,  2584,  2600,  2619,  2620,  2624,  2625,  2630,  2632,  2634,
    2636,  2638,  2640,  2642,  2648,  2649,  2650,  2654,  2658,  2666,
    2665,  2678,  2680,  2683,  2685,  2689,  2693,  2700,  2702,  2706,
    2707,  2712,  2732,  2758,  2760,  2764,  2765,  2769,  2795,  2796,
    2797,  2798,  2802,  2803,  2807,  2808,  2813,  2816,  2843,  2842,
    2907,  2923,  2922,  2976,  3002,  3002,  3025,  3026,  3031,  3033,
    3038,  3061,  3074,  3078,  3095,  3096,  3100,  3104,  3113,  3120,
    3127,  3137,  3152,  3175,  3181,  3182,  3188,  3191,  3195,  3203,
    3223,  3225,  3243,  3249,  3251,  3253,  3255,  3257,  3259,  3261,
    3263,  3265,  3267,  3269,  3271,  3276,  3291,  3306,  3324,  3325,
    3329,  3330,  3331,  3332,  3333,  3334,  3335,  3336,  3337,  3338,
    3339,  3340,  3341,  3346,  3345,  3352,  3352,  3409,  3408,  3437,
    3437,  3451,  3504,  3547,  3568,  3567,  3589,  3608,  3610,  3611,
    3615,  3635,  3658,  3660,  3676,  3658,  3695,  3697,  3698,  3702,
    3703,  3708,  3714,  3707,  3735,  3734,  3750,  3751,  3755,  3756,
    3761,  3765,  3760,  3786,  3790,  3785,  3809,  3819,  3824,  3823,
    3859,  3860,  3865,  3864,  3897,  3897,  3912,  3911,  3947,  3959,
    3961,  3958,  3988,  3987,  4008,  4010,  4015,  4017,  4019,  4036,
    4041,  4047,  4054,  4055,  4063,  4069,  4078,  4084,  4090,  4091,
    4095,  4095,  4100,  4101,  4102,  4106,  4107,  4108,  4112,  4116,
    4117,  4118,  4122,  4123,  4124,  4125,  4126,  4127,  4128,  4129,
    4133,  4137,  4138,  4139,  4143,  4144,  4145,  4146,  4147,  4151,
    4155,  4156,  4157,  4161,  4162,  4163,  4164,  4165,  4166,  4167,
    4171,  4175,  4176,  4177,  4181,  4182,  4183,  4188,  4196,  4204,
    4212,  4224,  4236,  4241,  4246,  4254,  4262,  4270,  4278,  4286,
    4294,  4302,  4315,  4328,  4341,  4343,  4347,  4352,  4365,  4366,
    4417,  4418,  4421,  4436,  4455,  4454,  4463,  4461,  4468,  4470,
    4469,  4473,  4472,  4478,  4515,  4516,  4521,  4520,  4539,  4558,
    4557,  4574,  4578,  4586,  4585,  4588,  4590,  4592,  4594,  4599,
    4600,  4605,  4606,  4610,  4611,  4615,  4634,  4644,  4655,  4664,
    4665,  4681,  4683,  4682,  4687,  4685,  4696,  4697,  4701,  4719,
    4735,  4736,  4752,  4767,  4789,  4790,  4795,  4794,  4818,  4828,
    4850,  4849,  4867,  4866,  4886,  4908,  4912,  4941,  4953,  4954,
    4959,  4970,  4958,  4995,  4996,  5000,  5013,  5034,  5047,  5073,
    5074,  5079,  5078,  5115,  5120,  5121,  5125,  5126,  5130,  5132,
    5138,  5144,  5146,  5148,  5150,  5152,  5154,  5164,  5179,  5163,
    5193,  5194,  5198,  5199,  5203,  5204,  5208,  5209,  5213,  5214,
    5218,  5219,  5223,  5227,  5228,  5231,  5233,  5237,  5238,  5242,
    5243,  5244,  5248,  5253,  5258,  5263,  5268,  5273,  5278,  5283,
    5298,  5304,  5309,  5314,  5319,  5324,  5330,  5329,  5355,  5356,
    5357,  5362,  5367,  5372,  5374,  5376,  5378,  5384,  5389,  5394,
    5400,  5406,  5412,  5421,  5439,  5456,  5479,  5493,  5494,  5495,
    5496,  5497,  5498,  5499,  5503,  5504,  5505,  5509,  5510,  5514,
    5515,  5516,  5517,  5522,  5529,  5530,  5534,  5535,  5539,  5540,
    5548,  5547,  5556,  5554,  5564,  5562,  5572,  5570,  5578,  5597,
    5603,  5605,  5609,  5613,  5614,  5618,  5623,  5622,  5648,  5649,
    5658,  5660,  5665,  5668,  5672,  5679,  5680,  5684,  5685,  5689,
    5695,  5701,  5705,  5721,  5737,  5738,  5739,  5740,  5745,  5749,
    5754,  5759,  5763,  5768,  5773,  5779,  5784,  5790,  5794,  5799,
    5804,  5822,  5824,  5826,  5839,  5841,  5846,  5851,  5863,  5868,
    5873,  5878,  5880,  5882,  5884,  5886,  5888,  5890,  5892,  5895,
    5894,  5899,  5898,  5902,  5904,  5913,  5914,  5915,  5920,  5921,
    5922,  5923,  5924,  5928,  5932,  5933,  5937,  5938,  5942,  5943,
    5944,  5945,  5946,  5950,  5951,  5952,  5953,  5954,  5958,  5963,
    5965,  5971,  5972,  5974,  5979,  5988,  5989,  5993,  5994,  5998,
    5999,  6000,  6004,  6005,  6006,  6007,  6010,  6011,  6015,  6016,
    6020,  6021,  6025,  6026,  6030,  6031,  6032,  6033,  6040,  6041,
    6047,  6053,  6059,  6065,  6066,  6079,  6085,  6091,  6097,  6106,
    6127,  6133,  6138,  6139,  6143,  6151,  6155,  6156,  6160,  6161,
    6165,  6174,  6178,  6179,  6183,  6194,  6195,  6199,  6200,  6204,
    6205,  6210,  6211,  6215,  6222,  6231,  6239,  6250,  6251,  6252,
    6253,  6254,  6255,  6260,  6268,  6269,  6273,  6275,  6279,  6291,
    6292,  6296,  6303,  6316,  6317,  6319,  6321,  6327,  6332,  6338,
    6344,  6351,  6361,  6362,  6363,  6364,  6365,  6369,  6373,  6374,
    6378,  6379,  6383,  6384,  6388,  6389,  6390,  6394,  6395,  6399,
    6403,  6416,  6428,  6429,  6433,  6434,  6438,  6439,  6443,  6444,
    6448,  6449,  6453,  6454,  6458,  6459,  6463,  6464,  6468,  6470,
    6471,  6477,  6483,  6489,  6497,  6498,  6502,  6506,  6507,  6520,
    6521,  6522,  6526,  6527,  6531,  6537,  6551,  6552,  6556,  6557,
    6561,  6562,  6570,  6569,  6608,  6607,  6621,  6633,  6632,  6651,
    6650,  6669,  6668,  6687,  6681,  6701,  6700,  6733,  6738,  6743,
    6748,  6753,  6763,  6764,  6765,  6766,  6770,  6771,  6783,  6784,
    6788,  6789,  6792,  6794,  6795,  6796,  6798,  6800,  6801,  6810,
    6811,  6815,  6824,  6822,  6836,  6850,  6849,  6863,  6861,  6875,
    6882,  6893,  6897,  6904,  6908,  6913,  6912,  6928,  6930,  6935,
    6943,  6942,  6958,  6962,  6961,  6973,  6974,  6978,  6993,  6994,
    6998,  7007,  7011,  7016,  7021,  7020,  7032,  7043,  7031,  7059,
    7068,  7072,  7081,  7090,  7096,  7102,  7111,  7120,  7139,  7160,
    7170,  7174,  7182,  7183,  7187,  7188,  7192,  7192,  7195,  7197,
    7201,  7202,  7206,  7207,  7211,  7212,  7213,  7217,  7218,  7219,
    7223,  7224,  7225,  7226,  7235,  7234,  7244,  7243,  7250,  7257,
    7265,  7264,  7272,  7281,  7298,  7301,  7308,  7312,  7319,  7323,
    7327,  7334,  7334,  7340,  7341,  7345,  7346,  7347,  7351,  7352,
    7368,  7369,  7374,  7373,  7385,  7386,  7387,  7392,  7391,  7413,
    7414,  7418,  7419,  7423,  7424,  7425,  7430,  7429,  7451,  7452,
    7456,  7461,  7462,  7470,  7472,  7476,  7478,  7477,  7490,  7492,
    7491,  7505,  7506,  7511,  7520,  7521,  7522,  7526,  7532,  7541,
    7550,  7549,  7576,  7577,  7581,  7582,  7586,  7587,  7588,  7589,
    7590,  7591,  7596,  7595,  7617,  7618,  7619,  7624,  7623,  7629,
    7636,  7641,  7649,  7650,  7654,  7668,  7667,  7680,  7681,  7685,
    7686,  7690,  7700,  7710,  7711,  7716,  7715,  7726,  7727,  7731,
    7732,  7736,  7746,  7757,  7756,  7764,  7764,  7773,  7774,  7779,
    7780,  7789,  7798,  7799,  7803,  7808,  7813,  7818,  7823,  7822,
    7842,  7850,  7842,  7857,  7858,  7859,  7860,  7861,  7865,  7872,
    7879,  7881,  7892,  7893,  7897,  7898,  7926,  7956,  7958,  7964,
    7974,  7975,  7976,  7991,  7998,  8024,  8030,  8036,  8037,  8038,
    8039,  8040,  8044,  8045,  8046,  8050,  8051,  8052,  8056,  8057,
    8062,  8113,  8120,  8163,  8169,  8175,  8181,  8187,  8193,  8199,
    8205,  8209,  8215,  8221,  8227,  8233,  8239,  8243,  8249,  8259,
    8265,  8273,  8279,  8289,  8295,  8304,  8314,  8320,  8330,  8336,
    8345,  8349,  8355,  8361,  8367,  8373,  8379,  8385,  8391,  8397,
    8403,  8409,  8415,  8421,  8427,  8433,  8437,  8438,  8442,  8443,
    8447,  8448,  8452,  8453,  8457,  8458,  8459,  8460,  8461,  8462,
    8466,  8467,  8472,  8478,  8482,  8489,  8496,  8503,  8510,  8517,
    8522,  8528,  8535,  8542,  8550,  8561,  8583,  8590,  8598,  8599,
    8600,  8601,  8602,  8603,  8615,  8616,  8617,  8618,  8619,  8625,
    8629,  8635,  8641,  8647,  8653,  8655,  8662,  8669,  8675,  8677,
    8686,  8693,  8701,  8707,  8714,  8720,  8734,  8741,  8757,  8763,
    8769,  8777,  8783,  8789,  8795,  8801,  8816,  8828,  8834,  8840,
    8846,  8852,  8858,  8864,  8870,  8876,  8882,  8888,  8894,  8900,
    8906,  8912,  8918,  8924,  8932,  8953,  8960,  8966,  8973,  8980,
    8987,  8994,  9000,  9006,  9013,  9019,  9026,  9032,  9038,  9044,
    9050,  9056,  9074,  9080,  9086,  9093,  9100,  9108,  9115,  9122,
    9129,  9136,  9153,  9159,  9165,  9171,  9177,  9184,  9190,  9196,
    9202,  9208,  9214,  9226,  9232,  9238,  9244,  9250,  9262,  9268,
    9284,  9290,  9297,  9304,  9311,  9318,  9325,  9329,  9349,  9348,
    9421,  9463,  9465,  9470,  9471,  9475,  9476,  9480,  9481,  9485,
    9492,  9500,  9526,  9532,  9538,  9544,  9550,  9556,  9565,  9572,
    9574,  9571,  9581,  9592,  9598,  9604,  9610,  9616,  9622,  9628,
    9634,  9640,  9647,  9646,  9665,  9664,  9679,  9689,  9697,  9713,
    9714,  9719,  9724,  9729,  9732,  9745,  9744,  9761,  9763,  9765,
    9767,  9769,  9771,  9773,  9775,  9777,  9779,  9785,  9791,  9794,
    9793,  9799,  9800,  9804,  9811,  9819,  9820,  9824,  9831,  9839,
    9840,  9844,  9845,  9849,  9857,  9868,  9869,  9878,  9889,  9890,
    9896,  9897,  9917,  9919,  9923,  9921,  9938,  9936,  9954,  9952,
    9959,  9968,  9966,  9984,  9983,  9993, 10004, 10002, 10021, 10020,
   10031, 10042, 10043, 10044, 10056, 10056, 10070, 10110, 10163, 10167,
   10172, 10164, 10184, 10204, 10212, 10204, 10221, 10220, 10243, 10260,
   10243, 10267, 10271, 10297, 10298, 10303, 10306, 10307, 10308, 10312,
   10313, 10318, 10317, 10323, 10322, 10330, 10331, 10334, 10336, 10336,
   10340, 10340, 10345, 10346, 10350, 10352, 10357, 10358, 10362, 10373,
   10386, 10387, 10388, 10389, 10390, 10391, 10392, 10393, 10394, 10395,
   10396, 10397, 10401, 10402, 10403, 10404, 10405, 10406, 10407, 10408,
   10409, 10413, 10414, 10415, 10416, 10419, 10421, 10422, 10426, 10427,
   10435, 10437, 10441, 10443, 10442, 10456, 10459, 10458, 10473, 10479,
   10494, 10496, 10500, 10502, 10507, 10508, 10528, 10553, 10557, 10558,
   10562, 10575, 10577, 10582, 10581, 10616, 10618, 10623, 10624, 10625,
   10630, 10637, 10641, 10642, 10646, 10650, 10654, 10661, 10668, 10675,
   10685, 10719, 10723, 10729, 10735, 10744, 10752, 10756, 10763, 10764,
   10768, 10769, 10770, 10774, 10775, 10776, 10777, 10778, 10779, 10783,
   10784, 10785, 10786, 10787, 10791, 10792, 10793, 10794, 10795, 10799,
   10800, 10801, 10802, 10803, 10807, 10812, 10813, 10817, 10818, 10821,
   10824, 10823, 10854, 10855, 10859, 10860, 10864, 10876, 10876, 10886,
   10887, 10891, 10910, 10943, 10942, 10955, 10963, 10954, 10965, 10977,
   10989, 10988, 11006, 11005, 11016, 11016, 11032, 11039, 11062, 11083,
   11095, 11100, 11099, 11109, 11115, 11122, 11127, 11132, 11142, 11143,
   11147, 11158, 11159, 11163, 11174, 11175, 11179, 11180, 11188, 11196,
   11187, 11206, 11213, 11205, 11223, 11231, 11232, 11240, 11244, 11245,
   11256, 11257, 11261, 11270, 11271, 11272, 11274, 11273, 11284, 11285,
   11289, 11290, 11292, 11291, 11295, 11294, 11300, 11301, 11305, 11306,
   11310, 11320, 11321, 11325, 11326, 11331, 11330, 11344, 11345, 11349,
   11354, 11362, 11363, 11371, 11373, 11373, 11381, 11389, 11380, 11411,
   11412, 11416, 11424, 11425, 11429, 11439, 11440, 11447, 11446, 11462,
   11461, 11473, 11472, 11484, 11483, 11497, 11498, 11502, 11515, 11531,
   11532, 11536, 11537, 11541, 11542, 11543, 11548, 11547, 11569, 11571,
   11574, 11576, 11579, 11580, 11583, 11587, 11591, 11595, 11599, 11603,
   11607, 11611, 11615, 11623, 11626, 11636, 11635, 11648, 11655, 11663,
   11671, 11679, 11687, 11695, 11702, 11704, 11706, 11715, 11719, 11724,
   11723, 11729, 11728, 11733, 11742, 11749, 11758, 11767, 11772, 11774,
   11776, 11778, 11780, 11782, 11789, 11797, 11799, 11807, 11814, 11821,
   11831, 11838, 11844, 11853, 11861, 11865, 11870, 11878, 11883, 11890,
   11897, 11904, 11911, 11918, 11925, 11931, 11938, 11945, 11950, 11955,
   11960, 11971, 11973, 11975, 11980, 11981, 11984, 11986, 11990, 11991,
   11995, 11996, 12000, 12001, 12005, 12006, 12010, 12011, 12014, 12016,
   12023, 12034, 12033, 12046, 12045, 12055, 12056, 12060, 12061, 12062,
   12066, 12067, 12068, 12083, 12082, 12095, 12104, 12094, 12106, 12110,
   12111, 12125, 12126, 12131, 12133, 12135, 12137, 12139, 12141, 12152,
   12154, 12156, 12158, 12164, 12166, 12177, 12179, 12181, 12183, 12185,
   12187, 12189, 12194, 12195, 12199, 12200, 12204, 12203, 12213, 12214,
   12218, 12218, 12221, 12222, 12226, 12227, 12232, 12231, 12242, 12246,
   12250, 12263, 12262, 12276, 12277, 12278, 12281, 12282, 12283, 12287,
   12292, 12302, 12314, 12326, 12336, 12346, 12313, 12354, 12355, 12359,
   12360, 12364, 12365, 12373, 12377, 12378, 12379, 12382, 12384, 12388,
   12389, 12393, 12398, 12405, 12410, 12417, 12419, 12423, 12424, 12428,
   12433, 12441, 12442, 12445, 12447, 12455, 12457, 12461, 12462, 12463,
   12467, 12469, 12474, 12475, 12484, 12485, 12489, 12490, 12494, 12507,
   12531, 12543, 12554, 12573, 12581, 12593, 12608, 12629, 12630, 12631,
   12639, 12640, 12641, 12648, 12654, 12660, 12666, 12672, 12701, 12729,
   12730, 12731, 12735, 12745, 12755, 12761, 12770, 12785, 12786, 12790,
   12799, 12815, 12819, 12866, 12870, 12888, 12892, 12971, 12996, 13027,
   13028, 13044, 13054, 13058, 13064, 13070, 13080, 13086, 13095, 13105,
   13106, 13136, 13152, 13168, 13185, 13186, 13197, 13198, 13209, 13210,
   13211, 13215, 13232, 13254, 13269, 13270, 13271, 13272, 13273, 13274,
   13275, 13276, 13277, 13278, 13279, 13280, 13281, 13282, 13283, 13284,
   13285, 13286, 13287, 13288, 13289, 13290, 13291, 13292, 13293, 13294,
   13295, 13296, 13297, 13298, 13299, 13300, 13301, 13302, 13303, 13304,
   13305, 13306, 13307, 13308, 13309, 13310, 13311, 13312, 13313, 13314,
   13315, 13316, 13317, 13318, 13319, 13320, 13321, 13322, 13323, 13324,
   13325, 13326, 13336, 13337, 13338, 13339, 13340, 13341, 13342, 13343,
   13344, 13345, 13346, 13347, 13348, 13349, 13350, 13351, 13352, 13353,
   13354, 13355, 13356, 13357, 13358, 13359, 13360, 13361, 13362, 13363,
   13364, 13365, 13366, 13367, 13368, 13369, 13370, 13371, 13372, 13373,
   13374, 13375, 13376, 13377, 13378, 13379, 13380, 13381, 13382, 13383,
   13384, 13385, 13386, 13387, 13388, 13389, 13390, 13391, 13392, 13393,
   13394, 13395, 13396, 13397, 13398, 13399, 13400, 13401, 13402, 13403,
   13404, 13405, 13406, 13407, 13408, 13409, 13410, 13411, 13412, 13413,
   13414, 13415, 13416, 13417, 13418, 13419, 13420, 13421, 13422, 13423,
   13424, 13425, 13426, 13427, 13428, 13429, 13430, 13431, 13432, 13433,
   13434, 13435, 13436, 13437, 13438, 13439, 13440, 13441, 13442, 13443,
   13444, 13445, 13446, 13447, 13448, 13449, 13450, 13451, 13452, 13453,
   13454, 13455, 13456, 13457, 13458, 13459, 13460, 13461, 13462, 13463,
   13464, 13465, 13466, 13467, 13468, 13469, 13470, 13471, 13472, 13473,
   13474, 13475, 13476, 13477, 13478, 13479, 13480, 13481, 13482, 13483,
   13484, 13485, 13486, 13487, 13488, 13489, 13490, 13491, 13492, 13493,
   13494, 13495, 13496, 13497, 13498, 13499, 13500, 13501, 13502, 13503,
   13504, 13505, 13506, 13507, 13508, 13509, 13510, 13511, 13512, 13513,
   13514, 13515, 13516, 13517, 13518, 13519, 13520, 13521, 13522, 13523,
   13524, 13525, 13526, 13527, 13528, 13529, 13530, 13531, 13532, 13533,
   13534, 13535, 13536, 13537, 13538, 13539, 13540, 13541, 13542, 13543,
   13544, 13545, 13546, 13547, 13548, 13549, 13550, 13551, 13552, 13553,
   13554, 13555, 13556, 13557, 13558, 13559, 13560, 13561, 13562, 13563,
   13564, 13565, 13566, 13567, 13568, 13569, 13570, 13571, 13572, 13573,
   13574, 13575, 13576, 13577, 13578, 13579, 13580, 13581, 13582, 13583,
   13584, 13585, 13586, 13587, 13588, 13589, 13590, 13591, 13592, 13593,
   13594, 13595, 13596, 13597, 13598, 13599, 13600, 13601, 13602, 13603,
   13604, 13605, 13606, 13607, 13608, 13609, 13610, 13611, 13612, 13613,
   13614, 13615, 13616, 13617, 13618, 13619, 13620, 13621, 13622, 13623,
   13624, 13625, 13626, 13627, 13628, 13629, 13641, 13640, 13659, 13658,
   13665, 13664, 13674, 13673, 13684, 13683, 13689, 13697, 13699, 13704,
   13704, 13713, 13712, 13726, 13725, 13730, 13734, 13735, 13736, 13740,
   13741, 13742, 13743, 13747, 13748, 13749, 13750, 13755, 13780, 13808,
   13819, 13832, 13846, 13861, 13880, 13908, 13921, 13948, 13991, 14005,
   14006, 14007, 14008, 14012, 14030, 14048, 14049, 14053, 14054, 14055,
   14056, 14060, 14061, 14070, 14082, 14083, 14084, 14090, 14096, 14108,
   14107, 14123, 14124, 14128, 14129, 14133, 14148, 14149, 14150, 14155,
   14156, 14161, 14160, 14180, 14192, 14205, 14204, 14238, 14239, 14243,
   14244, 14248, 14249, 14250, 14251, 14253, 14252, 14265, 14266, 14267,
   14268, 14269, 14275, 14280, 14286, 14297, 14308, 14312, 14322, 14327,
   14334, 14346, 14358, 14367, 14369, 14373, 14374, 14381, 14383, 14387,
   14388, 14393, 14392, 14396, 14395, 14399, 14398, 14402, 14401, 14404,
   14405, 14406, 14407, 14408, 14409, 14410, 14411, 14412, 14413, 14414,
   14415, 14416, 14417, 14418, 14419, 14420, 14421, 14422, 14423, 14424,
   14425, 14426, 14427, 14428, 14429, 14433, 14434, 14438, 14439, 14443,
   14453, 14463, 14476, 14491, 14504, 14517, 14529, 14534, 14542, 14547,
   14554, 14554, 14555, 14555, 14558, 14585, 14590, 14596, 14602, 14608,
   14612, 14616, 14617, 14621, 14648, 14650, 14654, 14658, 14662, 14669,
   14670, 14674, 14675, 14679, 14680, 14684, 14685, 14691, 14697, 14703,
   14713, 14712, 14722, 14723, 14728, 14729, 14730, 14735, 14736, 14737,
   14741, 14742, 14746, 14758, 14767, 14777, 14786, 14800, 14801, 14806,
   14805, 14821, 14822, 14823, 14826, 14828, 14832, 14832, 14856, 14857,
   14861, 14862, 14863, 14867, 14871, 14878, 14881, 14879, 14895, 14902,
   14923, 14940, 14942, 14946, 14947, 14951, 14952, 14960, 14961, 14962,
   14963, 14969, 14975, 14985, 14987, 14989, 14994, 14995, 14996, 14997,
   14998, 15002, 15003, 15004, 15005, 15006, 15007, 15017, 15018, 15023,
   15036, 15049, 15051, 15053, 15058, 15063, 15065, 15067, 15073, 15074,
   15076, 15082, 15081, 15099, 15100, 15104, 15109, 15117, 15117, 15142,
   15143, 15148, 15149, 15151, 15153, 15171, 15177, 15182, 15164, 15244,
   15262, 15287, 15319, 15323, 15332, 15355, 15283, 15420, 15444, 15453,
   15461, 15419, 15482, 15486, 15490, 15494, 15498, 15502, 15509, 15516,
   15523, 15533, 15534, 15538, 15539, 15540, 15544, 15545, 15550, 15552,
   15551, 15557, 15558, 15562, 15569, 15579, 15585, 15596
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || YYTOKEN_TABLE
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "ABORT_SYM", "ACCESSIBLE_SYM", "ACTION",
  "ADD", "ADDDATE_SYM", "AFTER_SYM", "AGAINST", "AGGREGATE_SYM",
  "ALGORITHM_SYM", "ALL", "ALTER", "ALWAYS_SYM", "ANALYZE_SYM",
  "AND_AND_SYM", "AND_SYM", "ANY_SYM", "AS", "ASC", "ASCII_SYM",
  "ASENSITIVE_SYM", "AT_SYM", "AUTHORS_SYM", "AUTOEXTEND_SIZE_SYM",
  "AUTO_INC", "AVG_ROW_LENGTH", "AVG_SYM", "BACKUP_SYM", "BEFORE_SYM",
  "BEGIN_SYM", "BETWEEN_SYM", "BIGINT", "BINARY", "BINLOG_SYM", "BIN_NUM",
  "BIT_AND", "BIT_OR", "BIT_SYM", "BIT_XOR", "BLOB_SYM", "BLOCK_SYM",
  "BOOLEAN_SYM", "BOOL_SYM", "BOTH", "BTREE_SYM", "BY", "BYTE_SYM",
  "CACHE_SYM", "CALL_SYM", "CASCADE", "CASCADED", "CASE_SYM", "CAST_SYM",
  "CATALOG_NAME_SYM", "CHAIN_SYM", "CHANGE", "CHANGED", "CHARSET",
  "CHAR_SYM", "CHECKPOINT_SYM", "CHECKSUM_SYM", "CHECK_SYM", "CIPHER_SYM",
  "CLASS_ORIGIN_SYM", "CLIENT_SYM", "CLIENT_STATS_SYM", "CLOSE_SYM",
  "COALESCE", "CODE_SYM", "COLLATE_SYM", "COLLATION_SYM", "COLUMNS",
  "COLUMN_ADD_SYM", "COLUMN_CHECK_SYM", "COLUMN_CREATE_SYM",
  "COLUMN_DELETE_SYM", "COLUMN_GET_SYM", "COLUMN_SYM", "COLUMN_NAME_SYM",
  "COMMENT_SYM", "COMMITTED_SYM", "COMMIT_SYM", "COMPACT_SYM",
  "COMPLETION_SYM", "COMPRESSED_SYM", "CONCURRENT", "CONDITION_SYM",
  "CONNECTION_SYM", "CONSISTENT_SYM", "CONSTRAINT",
  "CONSTRAINT_CATALOG_SYM", "CONSTRAINT_NAME_SYM", "CONSTRAINT_SCHEMA_SYM",
  "CONTAINS_SYM", "CONTEXT_SYM", "CONTINUE_SYM", "CONTRIBUTORS_SYM",
  "CONVERT_SYM", "COUNT_SYM", "CPU_SYM", "CREATE", "CROSS", "CUBE_SYM",
  "CURDATE", "CURRENT_USER", "CURSOR_SYM", "CURSOR_NAME_SYM", "CURTIME",
  "DATABASE", "DATABASES", "DATAFILE_SYM", "DATA_SYM", "DATETIME",
  "DATE_ADD_INTERVAL", "DATE_SUB_INTERVAL", "DATE_SYM", "DAY_HOUR_SYM",
  "DAY_MICROSECOND_SYM", "DAY_MINUTE_SYM", "DAY_SECOND_SYM", "DAY_SYM",
  "DEALLOCATE_SYM", "DECIMAL_NUM", "DECIMAL_SYM", "DECLARE_SYM", "DEFAULT",
  "DEFINER_SYM", "DELAYED_SYM", "DELAY_KEY_WRITE_SYM", "DELETE_SYM",
  "DESC", "DESCRIBE", "DES_KEY_FILE", "DETERMINISTIC_SYM", "DIRECTORY_SYM",
  "DISABLE_SYM", "DISCARD", "DISK_SYM", "DISTINCT", "DIV_SYM",
  "DOUBLE_SYM", "DO_SYM", "DROP", "DUAL_SYM", "DUMPFILE", "DUPLICATE_SYM",
  "DYNAMIC_SYM", "EACH_SYM", "ELSE", "ELSEIF_SYM", "ENABLE_SYM",
  "ENCLOSED", "END", "ENDS_SYM", "END_OF_INPUT", "ENGINES_SYM",
  "ENGINE_SYM", "ENUM", "EQ", "EQUAL_SYM", "ERROR_SYM", "ERRORS",
  "ESCAPED", "ESCAPE_SYM", "EVENTS_SYM", "EVENT_SYM", "EVERY_SYM",
  "EXAMINED_SYM", "EXECUTE_SYM", "EXISTS", "EXIT_SYM", "EXPANSION_SYM",
  "EXTENDED_SYM", "EXTENT_SIZE_SYM", "EXTRACT_SYM", "FALSE_SYM",
  "FAST_SYM", "FAULTS_SYM", "FETCH_SYM", "FILE_SYM", "FIRST_SYM",
  "FIXED_SYM", "FLOAT_NUM", "FLOAT_SYM", "FLUSH_SYM", "FORCE_SYM",
  "FOREIGN", "FOR_SYM", "FOUND_SYM", "FROM", "FULL", "FULLTEXT_SYM",
  "FUNCTION_SYM", "GE", "GENERAL", "GENERATED_SYM", "GEOMETRYCOLLECTION",
  "GEOMETRY_SYM", "GET_FORMAT", "GLOBAL_SYM", "GRANT", "GRANTS",
  "GROUP_SYM", "GROUP_CONCAT_SYM", "GT_SYM", "HANDLER_SYM", "HARD_SYM",
  "HASH_SYM", "HAVING", "HELP_SYM", "HEX_NUM", "HIGH_PRIORITY", "HOST_SYM",
  "HOSTS_SYM", "HOUR_MICROSECOND_SYM", "HOUR_MINUTE_SYM",
  "HOUR_SECOND_SYM", "HOUR_SYM", "IDENT", "IDENTIFIED_SYM", "IDENT_QUOTED",
  "IF", "IGNORE_SYM", "IGNORE_SERVER_IDS_SYM", "IMPORT", "INDEXES",
  "INDEX_SYM", "INDEX_STATS_SYM", "INFILE", "INITIAL_SIZE_SYM",
  "INNER_SYM", "INOUT_SYM", "INSENSITIVE_SYM", "INSERT", "INSERT_METHOD",
  "INSTALL_SYM", "INTERVAL_SYM", "INTO", "INT_SYM", "INVOKER_SYM",
  "IN_SYM", "IO_SYM", "IPC_SYM", "IS", "ISOLATION", "ISSUER_SYM",
  "ITERATE_SYM", "JOIN_SYM", "KEYS", "KEY_BLOCK_SIZE", "KEY_SYM",
  "KILL_SYM", "LANGUAGE_SYM", "LAST_SYM", "LAST_VALUE", "LE", "LEADING",
  "LEAVES", "LEAVE_SYM", "LEFT", "LESS_SYM", "LEVEL_SYM", "LEX_HOSTNAME",
  "LIKE", "LIMIT", "LINEAR_SYM", "LINES", "LINESTRING", "LIST_SYM", "LOAD",
  "LOCAL_SYM", "LOCATOR_SYM", "LOCKS_SYM", "LOCK_SYM", "LOGFILE_SYM",
  "LOGS_SYM", "LONGBLOB", "LONGTEXT", "LONG_NUM", "LONG_SYM", "LOOP_SYM",
  "LOW_PRIORITY", "LT", "MASTER_CONNECT_RETRY_SYM", "MASTER_HOST_SYM",
  "MASTER_LOG_FILE_SYM", "MASTER_LOG_POS_SYM", "MASTER_PASSWORD_SYM",
  "MASTER_PORT_SYM", "MASTER_SERVER_ID_SYM", "MASTER_SSL_CAPATH_SYM",
  "MASTER_SSL_CA_SYM", "MASTER_SSL_CERT_SYM", "MASTER_SSL_CIPHER_SYM",
  "MASTER_SSL_CRL_SYM", "MASTER_SSL_CRLPATH_SYM", "MASTER_SSL_KEY_SYM",
  "MASTER_SSL_SYM", "MASTER_SSL_VERIFY_SERVER_CERT_SYM", "MASTER_SYM",
  "MASTER_USER_SYM", "MASTER_HEARTBEAT_PERIOD_SYM", "MATCH",
  "MAX_CONNECTIONS_PER_HOUR", "MAX_QUERIES_PER_HOUR", "MAX_ROWS",
  "MAX_SIZE_SYM", "MAX_SYM", "MAX_UPDATES_PER_HOUR",
  "MAX_USER_CONNECTIONS_SYM", "MAX_VALUE_SYM", "MEDIUMBLOB", "MEDIUMINT",
  "MEDIUMTEXT", "MEDIUM_SYM", "MEMORY_SYM", "MERGE_SYM",
  "MESSAGE_TEXT_SYM", "MICROSECOND_SYM", "MIGRATE_SYM",
  "MINUTE_MICROSECOND_SYM", "MINUTE_SECOND_SYM", "MINUTE_SYM", "MIN_ROWS",
  "MIN_SYM", "MODE_SYM", "MODIFIES_SYM", "MODIFY_SYM", "MOD_SYM",
  "MONTH_SYM", "MULTILINESTRING", "MULTIPOINT", "MULTIPOLYGON",
  "MUTEX_SYM", "MYSQL_ERRNO_SYM", "NAMES_SYM", "NAME_SYM", "NATIONAL_SYM",
  "NATURAL", "NCHAR_STRING", "NCHAR_SYM", "NDBCLUSTER_SYM", "NE", "NEG",
  "NEW_SYM", "NEXT_SYM", "NODEGROUP_SYM", "NONE_SYM", "NOT2_SYM",
  "NOT_SYM", "NOW_SYM", "NO_SYM", "NO_WAIT_SYM", "NO_WRITE_TO_BINLOG",
  "NULL_SYM", "NUM", "NUMERIC_SYM", "NVARCHAR_SYM", "OFFSET_SYM",
  "OLD_PASSWORD", "ON", "ONE_SYM", "ONLY_SYM", "ONLINE_SYM", "OPEN_SYM",
  "OPTIMIZE", "OPTIONS_SYM", "OPTION", "OPTIONALLY", "OR2_SYM",
  "ORDER_SYM", "OR_OR_SYM", "OR_SYM", "OUTER", "OUTFILE", "OUT_SYM",
  "OWNER_SYM", "PACK_KEYS_SYM", "PAGE_SYM", "PAGE_CHECKSUM_SYM",
  "PARAM_MARKER", "PARSER_SYM", "PARSE_VCOL_EXPR_SYM", "PARTIAL",
  "PARTITIONING_SYM", "PARTITIONS_SYM", "PARTITION_SYM", "PASSWORD",
  "PERSISTENT_SYM", "PHASE_SYM", "PLUGINS_SYM", "PLUGIN_SYM", "POINT_SYM",
  "POLYGON", "PORT_SYM", "POSITION_SYM", "PRECISION", "PREPARE_SYM",
  "PRESERVE_SYM", "PREV_SYM", "PRIMARY_SYM", "PRIVILEGES", "PROCEDURE_SYM",
  "PROCESS", "PROCESSLIST_SYM", "PROFILE_SYM", "PROFILES_SYM", "PROXY_SYM",
  "PURGE", "QUARTER_SYM", "QUERY_SYM", "QUICK", "RANGE_SYM", "READS_SYM",
  "READ_ONLY_SYM", "READ_SYM", "READ_WRITE_SYM", "REAL", "REBUILD_SYM",
  "RECOVER_SYM", "REDOFILE_SYM", "REDO_BUFFER_SIZE_SYM", "REDUNDANT_SYM",
  "REFERENCES", "REGEXP", "RELAY", "RELAYLOG_SYM", "RELAY_LOG_FILE_SYM",
  "RELAY_LOG_POS_SYM", "RELAY_THREAD", "RELEASE_SYM", "RELOAD",
  "REMOVE_SYM", "RENAME", "REORGANIZE_SYM", "REPAIR", "REPEATABLE_SYM",
  "REPEAT_SYM", "REPLACE", "REPLICATION", "REQUIRE_SYM", "RESET_SYM",
  "RESIGNAL_SYM", "RESOURCES", "RESTORE_SYM", "RESTRICT", "RESUME_SYM",
  "RETURNS_SYM", "RETURN_SYM", "REVOKE", "RIGHT", "ROLLBACK_SYM",
  "ROLLUP_SYM", "ROUTINE_SYM", "ROWS_SYM", "ROW_FORMAT_SYM", "ROW_SYM",
  "RTREE_SYM", "SAVEPOINT_SYM", "SCHEDULE_SYM", "SCHEMA_NAME_SYM",
  "SECOND_MICROSECOND_SYM", "SECOND_SYM", "SECURITY_SYM", "SELECT_SYM",
  "SENSITIVE_SYM", "SEPARATOR_SYM", "SERIALIZABLE_SYM", "SERIAL_SYM",
  "SESSION_SYM", "SERVER_SYM", "SERVER_OPTIONS", "SET", "SET_VAR",
  "SHARE_SYM", "SHIFT_LEFT", "SHIFT_RIGHT", "SHOW", "SHUTDOWN",
  "SIGNAL_SYM", "SIGNED_SYM", "SIMPLE_SYM", "SLAVE", "SLAVES", "SLOW",
  "SMALLINT", "SNAPSHOT_SYM", "SOCKET_SYM", "SOFT_SYM", "SONAME_SYM",
  "SOUNDS_SYM", "SOURCE_SYM", "SPATIAL_SYM", "SPECIFIC_SYM",
  "SQLEXCEPTION_SYM", "SQLSTATE_SYM", "SQLWARNING_SYM", "SQL_BIG_RESULT",
  "SQL_BUFFER_RESULT", "SQL_CACHE_SYM", "SQL_CALC_FOUND_ROWS",
  "SQL_NO_CACHE_SYM", "SQL_SMALL_RESULT", "SQL_SYM", "SQL_THREAD",
  "SSL_SYM", "STARTING", "STARTS_SYM", "START_SYM", "STATUS_SYM",
  "STDDEV_SAMP_SYM", "STD_SYM", "STOP_SYM", "STORAGE_SYM", "STRAIGHT_JOIN",
  "STRING_SYM", "SUBCLASS_ORIGIN_SYM", "SUBDATE_SYM", "SUBJECT_SYM",
  "SUBPARTITIONS_SYM", "SUBPARTITION_SYM", "SUBSTRING", "SUM_SYM",
  "SUPER_SYM", "SUSPEND_SYM", "SWAPS_SYM", "SWITCHES_SYM", "SYSDATE",
  "TABLES", "TABLESPACE", "TABLE_REF_PRIORITY", "TABLE_STATS_SYM",
  "TABLE_SYM", "TABLE_CHECKSUM_SYM", "TABLE_NAME_SYM", "TEMPORARY",
  "TEMPTABLE_SYM", "TERMINATED", "TEXT_STRING", "TEXT_SYM", "THAN_SYM",
  "THEN_SYM", "TIMESTAMP", "TIMESTAMP_ADD", "TIMESTAMP_DIFF", "TIME_SYM",
  "TINYBLOB", "TINYINT", "TINYTEXT", "TO_SYM", "TRAILING",
  "TRANSACTION_SYM", "TRANSACTIONAL_SYM", "TRIGGERS_SYM", "TRIGGER_SYM",
  "TRIM", "TRUE_SYM", "TRUNCATE_SYM", "TYPES_SYM", "TYPE_SYM",
  "UDF_RETURNS_SYM", "ULONGLONG_NUM", "UNCOMMITTED_SYM", "UNDEFINED_SYM",
  "UNDERSCORE_CHARSET", "UNDOFILE_SYM", "UNDO_BUFFER_SIZE_SYM", "UNDO_SYM",
  "UNICODE_SYM", "UNINSTALL_SYM", "UNION_SYM", "UNIQUE_SYM", "UNKNOWN_SYM",
  "UNLOCK_SYM", "UNSIGNED", "UNTIL_SYM", "UPDATE_SYM", "UPGRADE_SYM",
  "USAGE", "USER", "USER_STATS_SYM", "USE_FRM", "USE_SYM", "USING",
  "UTC_DATE_SYM", "UTC_TIMESTAMP_SYM", "UTC_TIME_SYM", "VALUES",
  "VALUE_SYM", "VARBINARY", "VARCHAR", "VARIABLES", "VARIANCE_SYM",
  "VARYING", "VAR_SAMP_SYM", "VIA_SYM", "VIEW_SYM", "VIRTUAL_SYM",
  "WAIT_SYM", "WARNINGS", "WEEK_SYM", "WHEN_SYM", "WHERE", "WHILE_SYM",
  "WITH", "WITH_CUBE_SYM", "WITH_ROLLUP_SYM", "WORK_SYM", "WRAPPER_SYM",
  "WRITE_SYM", "X509_SYM", "XA_SYM", "XML_SYM", "XOR", "YEAR_MONTH_SYM",
  "YEAR_SYM", "ZEROFILL", "IMPOSSIBLE_ACTION", "'|'", "'&'", "'-'", "'+'",
  "'*'", "'/'", "'%'", "'^'", "'~'", "'('", "')'", "','", "'!'", "'{'",
  "'}'", "';'", "'@'", "'.'", "':'", "$accept", "query", "$@1",
  "opt_end_of_input", "verb_clause", "statement", "deallocate",
  "deallocate_or_drop", "prepare", "prepare_src", "execute", "$@2",
  "execute_using", "execute_var_list", "execute_var_ident", "help", "$@3",
  "change", "$@4", "master_defs", "master_def", "ignore_server_id_list",
  "ignore_server_id", "master_file_def", "optional_connection_name",
  "connection_name", "create", "$@5", "$@6", "$@7", "$@8", "$@9", "$@10",
  "server_def", "server_options_list", "server_option", "event_tail",
  "$@11", "ev_schedule_time", "$@12", "opt_ev_status", "ev_starts",
  "ev_ends", "opt_ev_on_completion", "ev_on_completion", "opt_ev_comment",
  "ev_sql_stmt", "$@13", "ev_sql_stmt_inner", "clear_privileges",
  "sp_name", "sp_a_chistics", "sp_c_chistics", "sp_chistic",
  "sp_c_chistic", "sp_suid", "call", "$@14", "opt_sp_cparam_list",
  "opt_sp_cparams", "sp_cparams", "sp_fdparam_list", "sp_fdparams",
  "sp_init_param", "sp_fdparam", "sp_pdparam_list", "sp_pdparams",
  "sp_pdparam", "sp_opt_inout", "sp_proc_stmts", "sp_proc_stmts1",
  "sp_decls", "sp_decl", "$@15", "$@16", "sp_cursor_stmt", "$@17",
  "sp_handler_type", "sp_hcond_list", "sp_hcond_element", "sp_cond",
  "sqlstate", "opt_value", "sp_hcond", "signal_stmt", "signal_value",
  "opt_signal_value", "opt_set_signal_information",
  "signal_information_item_list", "signal_allowed_expr",
  "signal_condition_information_item_name", "resignal_stmt",
  "sp_decl_idents", "sp_opt_default", "sp_proc_stmt", "sp_proc_stmt_if",
  "$@18", "sp_proc_stmt_statement", "$@19", "sp_proc_stmt_return", "$@20",
  "sp_proc_stmt_unlabeled", "$@21", "sp_proc_stmt_leave",
  "sp_proc_stmt_iterate", "sp_proc_stmt_open", "sp_proc_stmt_fetch",
  "$@22", "sp_proc_stmt_close", "sp_opt_fetch_noise", "sp_fetch_list",
  "sp_if", "$@23", "$@24", "$@25", "sp_elseifs", "case_stmt_specification",
  "simple_case_stmt", "$@26", "$@27", "searched_case_stmt", "$@28",
  "simple_when_clause_list", "searched_when_clause_list",
  "simple_when_clause", "$@29", "$@30", "searched_when_clause", "$@31",
  "$@32", "else_clause_opt", "sp_labeled_control", "$@33", "sp_opt_label",
  "sp_labeled_block", "$@34", "sp_unlabeled_block", "$@35",
  "sp_block_content", "$@36", "sp_unlabeled_control", "$@37", "$@38",
  "$@39", "trg_action_time", "trg_event", "change_tablespace_access",
  "change_tablespace_info", "tablespace_info", "opt_logfile_group_name",
  "alter_tablespace_info", "logfile_group_info",
  "alter_logfile_group_info", "add_log_file", "change_ts_option_list",
  "$@40", "change_ts_options", "change_ts_option",
  "tablespace_option_list", "tablespace_options", "tablespace_option",
  "alter_tablespace_option_list", "alter_tablespace_options",
  "alter_tablespace_option", "logfile_group_option_list",
  "logfile_group_options", "logfile_group_option",
  "alter_logfile_group_option_list", "alter_logfile_group_options",
  "alter_logfile_group_option", "ts_datafile", "lg_undofile",
  "lg_redofile", "tablespace_name", "logfile_group_name", "ts_access_mode",
  "opt_ts_initial_size", "opt_ts_autoextend_size", "opt_ts_max_size",
  "opt_ts_extent_size", "opt_ts_undo_buffer_size",
  "opt_ts_redo_buffer_size", "opt_ts_nodegroup", "opt_ts_comment",
  "opt_ts_engine", "opt_ts_wait", "ts_wait", "size_number", "create2",
  "create2a", "$@41", "$@42", "create3", "$@43", "$@44",
  "opt_create_partitioning", "opt_partitioning", "partitioning", "$@45",
  "have_partitioning", "partition_entry", "$@46", "partition",
  "part_type_def", "$@47", "opt_linear", "part_field_list",
  "part_field_item_list", "part_field_item", "part_column_list",
  "part_func", "sub_part_func", "opt_num_parts", "opt_sub_part", "$@48",
  "$@49", "sub_part_field_list", "sub_part_field_item", "part_func_expr",
  "opt_num_subparts", "part_defs", "part_def_list", "part_definition",
  "$@50", "part_name", "opt_part_values", "$@51", "$@52", "part_func_max",
  "part_values_in", "part_value_list", "part_value_item", "$@53", "$@54",
  "part_value_item_list", "part_value_expr_item", "opt_sub_partition",
  "sub_part_list", "sub_part_definition", "$@55", "sub_name",
  "opt_part_options", "opt_part_option_list", "opt_part_option",
  "create_select", "$@56", "$@57", "opt_as", "opt_create_database_options",
  "create_database_options", "create_database_option", "opt_table_options",
  "table_options", "table_option", "opt_if_not_exists",
  "opt_create_table_options", "create_table_options_space_separated",
  "create_table_options", "create_table_option", "$@58", "default_charset",
  "default_collation", "storage_engines", "known_storage_engines",
  "row_types", "merge_insert_types", "opt_select_from", "udf_type",
  "create_field_list", "field_list", "field_list_item", "column_def",
  "key_def", "$@59", "$@60", "$@61", "$@62", "opt_check_constraint",
  "check_constraint", "opt_constraint", "constraint", "field_spec", "$@63",
  "field_def", "opt_generated_always", "vcol_opt_specifier",
  "vcol_opt_attribute", "vcol_opt_attribute_list", "vcol_attribute",
  "parse_vcol_expr", "virtual_column_func", "type", "$@64", "$@65",
  "spatial_type", "char", "nchar", "varchar", "nvarchar", "int_type",
  "real_type", "float_options", "precision", "field_options",
  "field_opt_list", "field_option", "field_length", "opt_field_length",
  "opt_precision", "opt_attribute", "opt_attribute_list", "attribute",
  "type_with_opt_collate", "now_or_signed_literal", "charset",
  "charset_name", "charset_name_or_default", "opt_load_data_charset",
  "old_or_new_charset_name", "old_or_new_charset_name_or_default",
  "collation_name", "opt_collate", "collation_name_or_default",
  "opt_default", "ascii", "unicode", "opt_binary", "opt_bin_mod",
  "opt_primary", "references", "opt_ref_list", "ref_list",
  "opt_match_clause", "opt_on_update_delete", "delete_option",
  "normal_key_type", "constraint_key_type", "key_or_index",
  "opt_key_or_index", "keys_or_index", "opt_unique", "fulltext", "spatial",
  "init_key_options", "key_alg", "normal_key_options",
  "fulltext_key_options", "spatial_key_options", "normal_key_opts",
  "spatial_key_opts", "fulltext_key_opts", "key_using_alg", "all_key_opt",
  "normal_key_opt", "spatial_key_opt", "fulltext_key_opt",
  "btree_or_rtree", "key_list", "key_part", "opt_ident", "opt_component",
  "string_list", "alter", "$@66", "$@67", "$@68", "$@69", "$@70", "$@71",
  "$@72", "ev_alter_on_schedule_completion", "opt_ev_rename_to",
  "opt_ev_sql_stmt", "ident_or_empty", "alter_commands", "$@73", "$@74",
  "$@75", "remove_partitioning", "all_or_alt_part_name_list",
  "add_partition_rule", "$@76", "add_part_extra", "reorg_partition_rule",
  "$@77", "reorg_parts_rule", "$@78", "alt_part_name_list",
  "alt_part_name_item", "alter_list", "add_column", "alter_list_item",
  "$@79", "$@80", "$@81", "opt_column", "opt_ignore", "alter_options",
  "$@82", "alter_options_part2", "alter_option_list", "alter_option",
  "opt_restrict", "opt_place", "opt_to", "slave", "$@83", "$@84", "$@85",
  "start", "opt_start_transaction_option_list",
  "start_transaction_option_list", "start_transaction_option",
  "slave_thread_opts", "$@86", "slave_thread_opt_list", "slave_thread_opt",
  "slave_until", "slave_until_opts", "checksum", "$@87",
  "opt_checksum_type", "repair", "$@88", "opt_mi_repair_type",
  "mi_repair_types", "mi_repair_type", "analyze", "$@89",
  "analyze_table_list", "analyze_table_elem_spec",
  "opt_persistent_stat_clause", "persistent_stat_spec",
  "persistent_column_stat_spec", "$@90", "persistent_index_stat_spec",
  "$@91", "table_column_list", "table_index_list", "table_index_name",
  "binlog_base64_event", "check", "$@92", "opt_mi_check_type",
  "mi_check_types", "mi_check_type", "optimize", "$@93",
  "opt_no_write_to_binlog", "rename", "$@94", "rename_list",
  "table_to_table_list", "table_to_table", "keycache", "$@95",
  "keycache_list_or_parts", "keycache_list", "assign_to_keycache",
  "assign_to_keycache_parts", "key_cache_name", "preload", "$@96",
  "preload_list_or_parts", "preload_list", "preload_keys",
  "preload_keys_parts", "adm_partition", "$@97", "cache_keys_spec", "$@98",
  "cache_key_list_or_empty", "opt_ignore_leaves", "select", "select_init",
  "select_paren", "select_paren_derived", "select_init2", "$@99",
  "select_part2", "$@100", "$@101", "select_into", "select_from",
  "select_options", "select_option_list", "select_option",
  "select_lock_type", "select_item_list", "select_item", "remember_name",
  "remember_end", "select_alias", "opt_default_time_precision",
  "opt_time_precision", "optional_braces", "expr", "bool_pri", "predicate",
  "bit_expr", "or", "and", "not", "not2", "comp_op", "all_or_any",
  "opt_dyncol_type", "dyncol_type", "dyncall_create_element",
  "dyncall_create_list", "simple_expr", "function_call_keyword",
  "function_call_nonkeyword", "function_call_conflict",
  "geometry_function", "function_call_generic", "@102", "fulltext_options",
  "opt_natural_language_mode", "opt_query_expansion", "opt_udf_expr_list",
  "udf_expr_list", "udf_expr", "sum_expr", "$@103", "$@104", "$@105",
  "variable", "$@106", "variable_aux", "opt_distinct",
  "opt_gconcat_separator", "opt_gorder_clause", "in_sum_expr", "$@107",
  "cast_type", "$@108", "opt_expr_list", "expr_list", "ident_list_arg",
  "ident_list", "opt_expr", "opt_else", "when_list", "table_ref",
  "join_table_list", "esc_table_ref", "derived_table_list", "join_table",
  "$@109", "$@110", "$@111", "$@112", "$@113", "$@114", "$@115",
  "normal_join", "table_factor", "$@116", "select_derived_union", "$@117",
  "$@118", "select_init2_derived", "select_part2_derived", "$@119",
  "$@120", "select_derived", "$@121", "select_derived2", "$@122", "$@123",
  "get_select_lex", "select_derived_init", "opt_outer",
  "index_hint_clause", "index_hint_type", "index_hint_definition", "$@124",
  "$@125", "index_hints_list", "opt_index_hints_list", "$@126",
  "opt_key_definition", "$@127", "opt_key_usage_list", "key_usage_element",
  "key_usage_list", "using_list", "interval", "interval_time_stamp",
  "date_time_type", "table_alias", "opt_table_alias", "opt_all",
  "where_clause", "$@128", "having_clause", "$@129", "opt_escape",
  "group_clause", "group_list", "olap_opt", "alter_order_clause",
  "alter_order_list", "alter_order_item", "opt_order_clause",
  "order_clause", "$@130", "order_list", "order_dir",
  "opt_limit_clause_init", "opt_limit_clause", "limit_clause",
  "limit_options", "limit_option", "limit_rows_option",
  "delete_limit_clause", "int_num", "ulong_num", "real_ulong_num",
  "ulonglong_num", "real_ulonglong_num", "dec_num_error", "dec_num",
  "choice", "procedure_clause", "$@131", "procedure_list",
  "procedure_list2", "procedure_item", "select_var_list_init", "$@132",
  "select_var_list", "select_var_ident", "into", "$@133",
  "into_destination", "$@134", "$@135", "do", "$@136", "drop", "$@137",
  "$@138", "$@139", "table_list", "table_name", "table_alias_ref_list",
  "table_alias_ref", "if_exists", "opt_temporary", "insert", "$@140",
  "$@141", "replace", "$@142", "$@143", "insert_lock_option",
  "replace_lock_option", "insert2", "insert_table", "insert_field_spec",
  "$@144", "fields", "insert_values", "$@145", "$@146", "values_list",
  "ident_eq_list", "ident_eq_value", "equal", "opt_equal", "no_braces",
  "$@147", "opt_values", "values", "expr_or_default", "opt_insert_update",
  "$@148", "update", "$@149", "$@150", "update_list", "update_elem",
  "insert_update_list", "insert_update_elem", "opt_low_priority", "delete",
  "$@151", "single_multi", "$@152", "$@153", "$@154", "table_wild_list",
  "table_wild_one", "opt_wild", "opt_delete_options", "opt_delete_option",
  "truncate", "$@155", "opt_table_sym", "opt_profile_defs", "profile_defs",
  "profile_def", "opt_profile_args", "show", "$@156", "show_param",
  "$@157", "$@158", "show_engine_param", "master_or_binary", "opt_storage",
  "opt_db", "opt_full", "from_or_in", "binlog_in", "binlog_from",
  "wild_and_where", "describe", "$@159", "$@160", "describe_command",
  "opt_extended_describe", "opt_describe_column", "flush", "$@161",
  "flush_options", "$@162", "$@163", "opt_with_read_lock",
  "flush_options_list", "flush_option", "opt_table_list",
  "optional_flush_tables_arguments", "reset", "$@164", "reset_options",
  "reset_option", "$@165", "slave_reset_options", "purge", "$@166",
  "purge_options", "purge_option", "kill", "$@167", "kill_type",
  "kill_option", "kill_expr", "use", "load", "$@168", "$@169", "$@170",
  "$@171", "data_or_xml", "opt_local", "load_data_lock", "opt_duplicate",
  "opt_field_term", "field_term_list", "field_term", "opt_line_term",
  "line_term_list", "line_term", "opt_xml_rows_identified_by",
  "opt_ignore_lines", "lines_or_rows", "opt_field_or_var_spec",
  "fields_or_vars", "field_or_var", "opt_load_data_set_spec",
  "load_data_set_list", "load_data_set_elem", "text_literal",
  "text_string", "param_marker", "signed_literal", "literal",
  "NUM_literal", "insert_ident", "table_wild", "order_ident",
  "simple_ident", "simple_ident_nospvar", "simple_ident_q", "field_ident",
  "table_ident", "table_ident_opt_wild", "table_ident_nodb", "IDENT_sys",
  "TEXT_STRING_sys", "TEXT_STRING_literal", "TEXT_STRING_filesystem",
  "ident", "label_ident", "ident_or_text", "user", "keyword", "keyword_sp",
  "set", "$@172", "start_option_value_list", "$@173", "$@174", "$@175",
  "start_option_value_list_following_option_type", "$@176",
  "option_value_list_continued", "option_value_list", "$@177", "$@178",
  "option_value", "$@179", "option_type", "opt_var_type",
  "opt_var_ident_type", "option_value_following_option_type",
  "option_value_no_option_type", "internal_variable_name",
  "transaction_characteristics", "transaction_access_mode",
  "isolation_level", "transaction_access_mode_types", "isolation_types",
  "text_or_password", "set_expr_or_default", "lock", "$@180",
  "table_or_tables", "table_lock_list", "table_lock", "lock_option",
  "unlock", "$@181", "handler", "$@182", "handler_read_or_scan",
  "handler_scan_function", "handler_rkey_function", "$@183",
  "handler_rkey_mode", "revoke", "revoke_command", "grant",
  "grant_command", "opt_table", "grant_privileges", "opt_privileges",
  "object_privilege_list", "object_privilege", "$@184", "$@185", "$@186",
  "$@187", "opt_and", "require_list", "require_list_element",
  "grant_ident", "user_list", "grant_list", "via_or_with", "using_or_as",
  "grant_user", "opt_column_list", "column_list", "column_list_id",
  "require_clause", "grant_options", "opt_grant_option",
  "grant_option_list", "grant_option", "begin", "$@188", "opt_work",
  "opt_chain", "opt_release", "opt_savepoint", "commit", "rollback",
  "savepoint", "release", "union_clause", "union_list", "$@189",
  "union_opt", "opt_union_order_or_limit", "union_order_or_limit", "$@190",
  "order_or_limit", "union_option", "query_specification",
  "query_expression_body", "$@191", "subselect", "subselect_start",
  "subselect_end", "opt_query_expression_options",
  "query_expression_option_list", "query_expression_option",
  "view_or_trigger_or_sp_or_event", "definer_tail", "no_definer_tail",
  "definer_opt", "no_definer", "definer", "view_replace_or_algorithm",
  "view_replace", "view_algorithm", "view_suid", "view_tail", "$@192",
  "view_list_opt", "view_list", "view_select", "$@193", "view_select_aux",
  "view_check_option", "trigger_tail", "$@194", "$@195", "$@196",
  "udf_tail", "sf_tail", "$@197", "$@198", "$@199", "$@200", "$@201",
  "sp_tail", "$@202", "$@203", "$@204", "$@205", "xa", "xid",
  "begin_or_start", "opt_join_or_resume", "opt_one_phase", "opt_suspend",
  "$@206", "opt_migrate", "install", "uninstall", "keep_gcc_happy", 0
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,   636,   637,   638,   639,   640,   641,   642,   643,   644,
     645,   646,   647,   648,   649,   650,   651,   652,   653,   654,
     655,   656,   657,   658,   659,   660,   661,   662,   663,   664,
     665,   666,   667,   668,   669,   670,   671,   672,   673,   674,
     675,   676,   677,   678,   679,   680,   681,   682,   683,   684,
     685,   686,   687,   688,   689,   690,   691,   692,   693,   694,
     695,   696,   697,   698,   699,   700,   701,   702,   703,   704,
     705,   706,   707,   708,   709,   710,   711,   712,   713,   714,
     715,   716,   717,   718,   719,   720,   721,   722,   723,   724,
     725,   726,   727,   728,   729,   730,   731,   732,   733,   734,
     735,   736,   737,   738,   739,   740,   741,   742,   743,   744,
     745,   746,   747,   748,   749,   750,   751,   752,   753,   754,
     755,   756,   757,   758,   759,   760,   761,   762,   763,   764,
     765,   766,   767,   768,   769,   770,   771,   772,   773,   774,
     775,   776,   777,   778,   779,   780,   781,   782,   783,   784,
     785,   786,   787,   788,   789,   790,   791,   792,   793,   794,
     795,   796,   797,   798,   799,   800,   801,   802,   803,   804,
     805,   806,   807,   808,   809,   810,   811,   812,   813,   814,
     815,   816,   817,   818,   819,   820,   821,   822,   823,   824,
     825,   826,   827,   828,   829,   830,   831,   832,   833,   834,
     835,   836,   837,   838,   839,   840,   841,   842,   843,   844,
     845,   846,   847,   848,   849,   850,   851,   852,   853,   854,
     855,   856,   857,   858,   859,   860,   861,   862,   863,   864,
     865,   866,   867,   868,   869,   870,   871,   872,   873,   874,
     124,    38,    45,    43,    42,    47,    37,    94,   126,    40,
      41,    44,    33,   123,   125,    59,    64,    46,    58
};
# endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint16 yyr1[] =
{
       0,   639,   640,   641,   640,   640,   642,   642,   643,   643,
     644,   644,   644,   644,   644,   644,   644,   644,   644,   644,
     644,   644,   644,   644,   644,   644,   644,   644,   644,   644,
     644,   644,   644,   644,   644,   644,   644,   644,   644,   644,
     644,   644,   644,   644,   644,   644,   644,   644,   644,   644,
     644,   644,   644,   644,   644,   644,   644,   644,   644,   644,
     644,   644,   644,   645,   646,   646,   647,   648,   648,   650,
     649,   651,   651,   652,   652,   653,   655,   654,   657,   656,
     658,   658,   659,   659,   659,   659,   659,   659,   659,   659,
     659,   659,   659,   659,   659,   659,   659,   659,   659,   660,
     660,   660,   661,   662,   662,   662,   662,   663,   663,   664,
     666,   665,   667,   665,   668,   665,   669,   665,   670,   665,
     671,   665,   665,   665,   665,   665,   672,   673,   673,   674,
     674,   674,   674,   674,   674,   674,   676,   675,   678,   677,
     677,   679,   679,   679,   679,   680,   680,   681,   681,   682,
     682,   683,   683,   684,   684,   686,   685,   687,   687,   687,
     687,   687,   687,   687,   687,   687,   687,   687,   687,   687,
     688,   689,   689,   690,   690,   691,   691,   692,   692,   692,
     692,   692,   692,   692,   693,   693,   693,   694,   694,   696,
     695,   697,   697,   698,   698,   699,   699,   700,   700,   701,
     701,   702,   703,   704,   704,   705,   705,   706,   707,   707,
     707,   707,   708,   708,   709,   709,   710,   710,   712,   711,
     711,   713,   711,   711,   715,   714,   716,   716,   717,   717,
     718,   719,   719,   720,   721,   721,   722,   722,   722,   722,
     722,   723,   724,   724,   725,   725,   726,   726,   727,   727,
     728,   728,   728,   729,   729,   729,   729,   729,   729,   729,
     729,   729,   729,   729,   729,   730,   731,   731,   732,   732,
     733,   733,   733,   733,   733,   733,   733,   733,   733,   733,
     733,   733,   733,   735,   734,   737,   736,   739,   738,   741,
     740,   742,   743,   744,   746,   745,   747,   748,   748,   748,
     749,   749,   751,   752,   753,   750,   754,   754,   754,   755,
     755,   757,   758,   756,   760,   759,   761,   761,   762,   762,
     764,   765,   763,   767,   768,   766,   769,   769,   771,   770,
     772,   772,   774,   773,   776,   775,   778,   777,   779,   780,
     781,   779,   782,   779,   783,   783,   784,   784,   784,   785,
     786,   787,   788,   788,   789,   789,   790,   791,   792,   792,
     794,   793,   795,   795,   795,   796,   796,   796,   797,   798,
     798,   798,   799,   799,   799,   799,   799,   799,   799,   799,
     800,   801,   801,   801,   802,   802,   802,   802,   802,   803,
     804,   804,   804,   805,   805,   805,   805,   805,   805,   805,
     806,   807,   807,   807,   808,   808,   808,   809,   810,   811,
     812,   813,   814,   814,   814,   815,   816,   817,   818,   819,
     820,   821,   822,   823,   824,   824,   825,   825,   826,   826,
     827,   827,   827,   827,   829,   828,   830,   828,   831,   832,
     831,   833,   831,   834,   835,   835,   837,   836,   838,   840,
     839,   841,   842,   843,   842,   842,   842,   842,   842,   844,
     844,   845,   845,   846,   846,   847,   848,   849,   850,   851,
     851,   852,   853,   852,   854,   852,   855,   855,   856,   857,
     858,   858,   859,   859,   860,   860,   862,   861,   863,   864,
     865,   864,   866,   864,   867,   867,   868,   868,   869,   869,
     871,   872,   870,   873,   873,   874,   874,   875,   875,   876,
     876,   878,   877,   879,   880,   880,   881,   881,   882,   882,
     882,   882,   882,   882,   882,   882,   882,   884,   885,   883,
     886,   886,   887,   887,   888,   888,   889,   889,   890,   890,
     891,   891,   892,   893,   893,   894,   894,   895,   895,   896,
     896,   896,   897,   897,   897,   897,   897,   897,   897,   897,
     897,   897,   897,   897,   897,   897,   898,   897,   897,   897,
     897,   897,   897,   897,   897,   897,   897,   897,   897,   897,
     897,   897,   897,   899,   900,   901,   902,   903,   903,   903,
     903,   903,   903,   903,   904,   904,   904,   905,   905,   906,
     906,   906,   906,   907,   908,   908,   909,   909,   910,   910,
     912,   911,   913,   911,   914,   911,   915,   911,   911,   911,
     916,   916,   917,   918,   918,   919,   921,   920,   922,   922,
     923,   923,   924,   924,   924,   925,   925,   926,   926,   927,
     927,   927,   928,   929,   930,   930,   930,   930,   930,   930,
     930,   930,   930,   930,   930,   930,   930,   930,   930,   930,
     930,   930,   930,   930,   930,   930,   930,   930,   930,   930,
     930,   930,   930,   930,   930,   930,   930,   930,   930,   931,
     930,   932,   930,   930,   930,   933,   933,   933,   933,   933,
     933,   933,   933,   934,   935,   935,   936,   936,   937,   937,
     937,   937,   937,   938,   938,   938,   938,   938,   939,   939,
     939,   940,   940,   940,   941,   942,   942,   943,   943,   944,
     944,   944,   945,   945,   945,   945,   946,   946,   947,   947,
     948,   948,   949,   949,   950,   950,   950,   950,   950,   950,
     950,   950,   950,   950,   950,   950,   950,   950,   950,   951,
     952,   952,   953,   953,   954,   954,   955,   955,   956,   956,
     957,   957,   958,   958,   959,   960,   960,   961,   961,   962,
     962,   963,   963,   963,   964,   964,   964,   965,   965,   965,
     965,   965,   965,   965,   966,   966,   967,   967,   968,   969,
     969,   970,   970,   971,   971,   971,   971,   972,   972,   972,
     972,   972,   973,   973,   973,   973,   973,   974,   975,   975,
     976,   976,   977,   977,   978,   978,   978,   979,   979,   980,
     981,   982,   983,   983,   984,   984,   985,   985,   986,   986,
     987,   987,   988,   988,   989,   989,   990,   990,   991,   991,
     991,   991,   991,   991,   992,   992,   993,   994,   994,   995,
     995,   995,   996,   996,   997,   997,   998,   998,   999,   999,
    1000,  1000,  1002,  1001,  1003,  1001,  1001,  1004,  1001,  1005,
    1001,  1006,  1001,  1007,  1001,  1008,  1001,  1001,  1001,  1001,
    1001,  1001,  1009,  1009,  1009,  1009,  1010,  1010,  1011,  1011,
    1012,  1012,  1013,  1013,  1013,  1013,  1013,  1013,  1013,  1013,
    1013,  1013,  1014,  1013,  1013,  1015,  1013,  1016,  1013,  1013,
    1013,  1013,  1017,  1018,  1018,  1020,  1019,  1021,  1021,  1021,
    1023,  1022,  1024,  1025,  1024,  1026,  1026,  1027,  1028,  1028,
    1029,  1030,  1030,  1030,  1031,  1030,  1032,  1033,  1030,  1030,
    1030,  1030,  1030,  1030,  1030,  1030,  1030,  1030,  1030,  1030,
    1030,  1030,  1034,  1034,  1035,  1035,  1037,  1036,  1038,  1038,
    1039,  1039,  1040,  1040,  1041,  1041,  1041,  1042,  1042,  1042,
    1043,  1043,  1043,  1043,  1045,  1044,  1046,  1044,  1044,  1044,
    1047,  1044,  1044,  1048,  1049,  1049,  1050,  1050,  1051,  1051,
    1051,  1053,  1052,  1054,  1054,  1055,  1055,  1055,  1056,  1056,
    1057,  1057,  1059,  1058,  1060,  1060,  1060,  1062,  1061,  1063,
    1063,  1064,  1064,  1065,  1065,  1065,  1067,  1066,  1068,  1068,
    1069,  1070,  1070,  1071,  1071,  1072,  1073,  1072,  1074,  1075,
    1074,  1076,  1076,  1076,  1077,  1077,  1077,  1078,  1078,  1079,
    1081,  1080,  1082,  1082,  1083,  1083,  1084,  1084,  1084,  1084,
    1084,  1084,  1086,  1085,  1087,  1087,  1087,  1089,  1088,  1088,
    1090,  1090,  1091,  1091,  1092,  1094,  1093,  1095,  1095,  1096,
    1096,  1097,  1098,  1099,  1099,  1101,  1100,  1102,  1102,  1103,
    1103,  1104,  1105,  1107,  1106,  1109,  1108,  1110,  1110,  1111,
    1111,  1112,  1113,  1113,  1114,  1114,  1115,  1115,  1117,  1116,
    1119,  1120,  1118,  1121,  1121,  1121,  1121,  1121,  1122,  1122,
    1123,  1123,  1124,  1124,  1125,  1125,  1125,  1126,  1126,  1126,
    1127,  1127,  1127,  1128,  1128,  1129,  1130,  1131,  1131,  1131,
    1131,  1131,  1132,  1132,  1132,  1133,  1133,  1133,  1134,  1134,
    1135,  1135,  1135,  1135,  1135,  1135,  1135,  1135,  1135,  1135,
    1135,  1136,  1136,  1136,  1136,  1136,  1136,  1137,  1137,  1137,
    1137,  1137,  1137,  1137,  1137,  1137,  1137,  1137,  1137,  1137,
    1137,  1138,  1138,  1138,  1138,  1138,  1138,  1138,  1138,  1138,
    1138,  1138,  1138,  1138,  1138,  1138,  1139,  1139,  1140,  1140,
    1141,  1141,  1142,  1142,  1143,  1143,  1143,  1143,  1143,  1143,
    1144,  1144,  1145,  1145,  1146,  1146,  1146,  1146,  1146,  1146,
    1146,  1146,  1146,  1146,  1146,  1147,  1148,  1148,  1149,  1149,
    1149,  1149,  1149,  1149,  1149,  1149,  1149,  1149,  1149,  1149,
    1149,  1149,  1149,  1149,  1149,  1149,  1149,  1149,  1149,  1149,
    1149,  1149,  1149,  1149,  1149,  1149,  1149,  1149,  1150,  1150,
    1150,  1150,  1150,  1150,  1150,  1150,  1150,  1150,  1150,  1150,
    1150,  1150,  1150,  1150,  1150,  1150,  1150,  1150,  1150,  1150,
    1150,  1150,  1150,  1150,  1150,  1151,  1151,  1151,  1151,  1151,
    1151,  1151,  1151,  1151,  1151,  1151,  1151,  1151,  1151,  1151,
    1151,  1151,  1151,  1151,  1151,  1151,  1151,  1151,  1151,  1151,
    1151,  1151,  1152,  1152,  1152,  1152,  1152,  1152,  1152,  1152,
    1152,  1152,  1152,  1152,  1152,  1152,  1152,  1152,  1152,  1152,
    1153,  1153,  1153,  1153,  1153,  1153,  1153,  1153,  1155,  1154,
    1154,  1156,  1156,  1157,  1157,  1158,  1158,  1159,  1159,  1160,
    1160,  1161,  1162,  1162,  1162,  1162,  1162,  1162,  1162,  1163,
    1164,  1162,  1162,  1162,  1162,  1162,  1162,  1162,  1162,  1162,
    1162,  1162,  1165,  1162,  1167,  1166,  1168,  1168,  1168,  1169,
    1169,  1170,  1170,  1171,  1171,  1173,  1172,  1174,  1174,  1174,
    1174,  1174,  1174,  1174,  1174,  1174,  1174,  1174,  1174,  1175,
    1174,  1176,  1176,  1177,  1177,  1178,  1178,  1179,  1179,  1180,
    1180,  1181,  1181,  1182,  1182,  1183,  1183,  1184,  1185,  1185,
    1186,  1186,  1187,  1187,  1188,  1187,  1189,  1187,  1190,  1187,
    1187,  1191,  1187,  1192,  1187,  1187,  1193,  1187,  1194,  1187,
    1187,  1195,  1195,  1195,  1197,  1196,  1196,  1196,  1198,  1199,
    1200,  1198,  1201,  1203,  1204,  1202,  1206,  1205,  1208,  1209,
    1207,  1210,  1211,  1212,  1212,  1213,  1213,  1213,  1213,  1214,
    1214,  1216,  1215,  1217,  1215,  1218,  1218,  1219,  1220,  1219,
    1222,  1221,  1223,  1223,  1224,  1224,  1225,  1225,  1226,  1226,
    1227,  1227,  1227,  1227,  1227,  1227,  1227,  1227,  1227,  1227,
    1227,  1227,  1228,  1228,  1228,  1228,  1228,  1228,  1228,  1228,
    1228,  1229,  1229,  1229,  1229,  1230,  1230,  1230,  1231,  1231,
    1232,  1232,  1233,  1234,  1233,  1235,  1236,  1235,  1237,  1237,
    1238,  1238,  1239,  1239,  1240,  1240,  1240,  1241,  1242,  1242,
    1243,  1244,  1244,  1246,  1245,  1247,  1247,  1248,  1248,  1248,
    1249,  1249,  1250,  1250,  1251,  1251,  1251,  1252,  1252,  1252,
    1253,  1253,  1253,  1253,  1253,  1254,  1255,  1255,  1255,  1255,
    1256,  1256,  1256,  1257,  1257,  1257,  1257,  1257,  1257,  1258,
    1258,  1258,  1258,  1258,  1259,  1259,  1259,  1259,  1259,  1260,
    1260,  1260,  1260,  1260,  1261,  1262,  1262,  1263,  1263,  1264,
    1265,  1264,  1266,  1266,  1267,  1267,  1268,  1270,  1269,  1271,
    1271,  1272,  1272,  1274,  1273,  1276,  1277,  1275,  1275,  1275,
    1279,  1278,  1281,  1280,  1282,  1280,  1280,  1280,  1280,  1280,
    1280,  1283,  1280,  1280,  1280,  1280,  1280,  1280,  1284,  1284,
    1285,  1286,  1286,  1287,  1288,  1288,  1289,  1289,  1291,  1292,
    1290,  1294,  1295,  1293,  1296,  1296,  1296,  1296,  1297,  1297,
    1298,  1298,  1299,  1300,  1300,  1300,  1301,  1300,  1302,  1302,
    1303,  1303,  1304,  1303,  1305,  1303,  1306,  1306,  1307,  1307,
    1308,  1309,  1309,  1310,  1310,  1312,  1311,  1313,  1313,  1314,
    1314,  1315,  1315,  1316,  1317,  1316,  1319,  1320,  1318,  1321,
    1321,  1322,  1323,  1323,  1324,  1325,  1325,  1327,  1326,  1329,
    1328,  1330,  1328,  1331,  1328,  1332,  1332,  1333,  1333,  1334,
    1334,  1335,  1335,  1336,  1336,  1336,  1338,  1337,  1339,  1339,
    1340,  1340,  1341,  1341,  1342,  1342,  1342,  1342,  1342,  1342,
    1342,  1342,  1342,  1343,  1343,  1345,  1344,  1346,  1346,  1346,
    1346,  1346,  1346,  1346,  1346,  1346,  1346,  1346,  1346,  1347,
    1346,  1348,  1346,  1346,  1346,  1346,  1346,  1346,  1346,  1346,
    1346,  1346,  1346,  1346,  1346,  1346,  1346,  1346,  1346,  1346,
    1346,  1346,  1346,  1346,  1346,  1346,  1346,  1346,  1346,  1346,
    1346,  1346,  1346,  1346,  1346,  1346,  1346,  1346,  1346,  1346,
    1346,  1349,  1349,  1349,  1350,  1350,  1351,  1351,  1352,  1352,
    1353,  1353,  1354,  1354,  1355,  1355,  1356,  1356,  1357,  1357,
    1357,  1359,  1358,  1360,  1358,  1361,  1361,  1362,  1362,  1362,
    1363,  1363,  1363,  1365,  1364,  1367,  1368,  1366,  1366,  1369,
    1369,  1370,  1370,  1371,  1371,  1371,  1371,  1371,  1371,  1371,
    1371,  1371,  1371,  1371,  1371,  1371,  1371,  1371,  1371,  1371,
    1371,  1371,  1372,  1372,  1373,  1373,  1375,  1374,  1376,  1376,
    1378,  1377,  1377,  1377,  1379,  1379,  1381,  1380,  1382,  1383,
    1383,  1385,  1384,  1386,  1386,  1386,  1387,  1387,  1387,  1388,
    1388,  1389,  1391,  1392,  1393,  1394,  1390,  1395,  1395,  1396,
    1396,  1397,  1397,  1397,  1398,  1398,  1398,  1399,  1399,  1400,
    1400,  1401,  1401,  1401,  1401,  1402,  1402,  1403,  1403,  1404,
    1404,  1405,  1405,  1406,  1406,  1407,  1407,  1408,  1408,  1408,
    1409,  1409,  1410,  1410,  1411,  1411,  1412,  1412,  1413,  1414,
    1414,  1414,  1414,  1415,  1415,  1415,  1416,  1417,  1417,  1417,
    1418,  1418,  1418,  1418,  1418,  1418,  1418,  1418,  1418,  1418,
    1418,  1418,  1419,  1419,  1419,  1419,  1419,  1420,  1420,  1421,
    1421,  1422,  1423,  1423,  1424,  1424,  1425,  1425,  1425,  1426,
    1426,  1426,  1426,  1427,  1427,  1427,  1428,  1428,  1429,  1430,
    1430,  1431,  1432,  1433,  1434,  1434,  1435,  1435,  1436,  1436,
    1436,  1437,  1437,  1437,  1438,  1438,  1438,  1438,  1438,  1438,
    1438,  1438,  1438,  1438,  1438,  1438,  1438,  1438,  1438,  1438,
    1438,  1438,  1438,  1438,  1438,  1438,  1438,  1438,  1438,  1438,
    1438,  1438,  1438,  1438,  1438,  1438,  1438,  1438,  1438,  1438,
    1438,  1438,  1438,  1438,  1438,  1438,  1438,  1438,  1438,  1438,
    1438,  1438,  1438,  1438,  1438,  1438,  1438,  1438,  1438,  1438,
    1438,  1438,  1439,  1439,  1439,  1439,  1439,  1439,  1439,  1439,
    1439,  1439,  1439,  1439,  1439,  1439,  1439,  1439,  1439,  1439,
    1439,  1439,  1439,  1439,  1439,  1439,  1439,  1439,  1439,  1439,
    1439,  1439,  1439,  1439,  1439,  1439,  1439,  1439,  1439,  1439,
    1439,  1439,  1439,  1439,  1439,  1439,  1439,  1439,  1439,  1439,
    1439,  1439,  1439,  1439,  1439,  1439,  1439,  1439,  1439,  1439,
    1439,  1439,  1439,  1439,  1439,  1439,  1439,  1439,  1439,  1439,
    1439,  1439,  1439,  1439,  1439,  1439,  1439,  1439,  1439,  1439,
    1439,  1439,  1439,  1439,  1439,  1439,  1439,  1439,  1439,  1439,
    1439,  1439,  1439,  1439,  1439,  1439,  1439,  1439,  1439,  1439,
    1439,  1439,  1439,  1439,  1439,  1439,  1439,  1439,  1439,  1439,
    1439,  1439,  1439,  1439,  1439,  1439,  1439,  1439,  1439,  1439,
    1439,  1439,  1439,  1439,  1439,  1439,  1439,  1439,  1439,  1439,
    1439,  1439,  1439,  1439,  1439,  1439,  1439,  1439,  1439,  1439,
    1439,  1439,  1439,  1439,  1439,  1439,  1439,  1439,  1439,  1439,
    1439,  1439,  1439,  1439,  1439,  1439,  1439,  1439,  1439,  1439,
    1439,  1439,  1439,  1439,  1439,  1439,  1439,  1439,  1439,  1439,
    1439,  1439,  1439,  1439,  1439,  1439,  1439,  1439,  1439,  1439,
    1439,  1439,  1439,  1439,  1439,  1439,  1439,  1439,  1439,  1439,
    1439,  1439,  1439,  1439,  1439,  1439,  1439,  1439,  1439,  1439,
    1439,  1439,  1439,  1439,  1439,  1439,  1439,  1439,  1439,  1439,
    1439,  1439,  1439,  1439,  1439,  1439,  1439,  1439,  1439,  1439,
    1439,  1439,  1439,  1439,  1439,  1439,  1439,  1439,  1439,  1439,
    1439,  1439,  1439,  1439,  1439,  1439,  1439,  1439,  1439,  1439,
    1439,  1439,  1439,  1439,  1439,  1439,  1439,  1439,  1439,  1439,
    1439,  1439,  1439,  1439,  1439,  1439,  1439,  1439,  1439,  1439,
    1439,  1439,  1439,  1439,  1439,  1439,  1439,  1439,  1439,  1439,
    1439,  1439,  1439,  1439,  1439,  1439,  1439,  1439,  1439,  1439,
    1439,  1439,  1439,  1439,  1439,  1439,  1439,  1439,  1439,  1439,
    1439,  1439,  1439,  1439,  1439,  1439,  1441,  1440,  1443,  1442,
    1444,  1442,  1445,  1442,  1447,  1446,  1446,  1448,  1448,  1450,
    1449,  1451,  1449,  1453,  1452,  1452,  1454,  1454,  1454,  1455,
    1455,  1455,  1455,  1456,  1456,  1456,  1456,  1457,  1458,  1458,
    1458,  1458,  1458,  1458,  1458,  1458,  1459,  1459,  1459,  1460,
    1460,  1460,  1460,  1461,  1462,  1463,  1463,  1464,  1464,  1464,
    1464,  1465,  1465,  1465,  1466,  1466,  1466,  1466,  1466,  1468,
    1467,  1469,  1469,  1470,  1470,  1471,  1472,  1472,  1472,  1472,
    1472,  1474,  1473,  1475,  1475,  1476,  1475,  1477,  1477,  1478,
    1478,  1479,  1479,  1479,  1479,  1480,  1479,  1481,  1481,  1481,
    1481,  1481,  1482,  1483,  1483,  1483,  1483,  1483,  1484,  1485,
    1485,  1485,  1485,  1486,  1486,  1487,  1487,  1488,  1488,  1489,
    1489,  1491,  1490,  1492,  1490,  1493,  1490,  1494,  1490,  1490,
    1490,  1490,  1490,  1490,  1490,  1490,  1490,  1490,  1490,  1490,
    1490,  1490,  1490,  1490,  1490,  1490,  1490,  1490,  1490,  1490,
    1490,  1490,  1490,  1490,  1490,  1495,  1495,  1496,  1496,  1497,
    1497,  1497,  1498,  1498,  1498,  1498,  1499,  1499,  1500,  1500,
    1501,  1501,  1502,  1502,  1503,  1503,  1503,  1503,  1503,  1504,
    1504,  1505,  1505,  1506,  1507,  1507,  1507,  1507,  1507,  1508,
    1508,  1509,  1509,  1510,  1510,  1511,  1511,  1511,  1511,  1511,
    1513,  1512,  1514,  1514,  1515,  1515,  1515,  1516,  1516,  1516,
    1517,  1517,  1518,  1519,  1519,  1520,  1521,  1522,  1522,  1524,
    1523,  1525,  1525,  1525,  1526,  1526,  1528,  1527,  1529,  1529,
    1530,  1530,  1530,  1531,  1531,  1532,  1533,  1532,  1534,  1535,
    1536,  1537,  1537,  1538,  1538,  1539,  1539,  1539,  1539,  1539,
    1539,  1539,  1539,  1540,  1540,  1540,  1541,  1541,  1541,  1541,
    1541,  1542,  1542,  1542,  1542,  1542,  1542,  1543,  1543,  1544,
    1545,  1546,  1546,  1546,  1547,  1548,  1548,  1548,  1549,  1549,
    1549,  1551,  1550,  1552,  1552,  1553,  1553,  1555,  1554,  1556,
    1556,  1557,  1557,  1557,  1557,  1559,  1560,  1561,  1558,  1562,
    1562,  1564,  1565,  1566,  1567,  1568,  1563,  1570,  1571,  1572,
    1573,  1569,  1574,  1574,  1574,  1574,  1574,  1574,  1575,  1575,
    1575,  1576,  1576,  1577,  1577,  1577,  1578,  1578,  1579,  1580,
    1579,  1581,  1581,  1582,  1582,  1583,  1583,  1584
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     1,     0,     4,     2,     0,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     3,     1,     1,     4,     1,     2,     0,
       4,     0,     2,     3,     1,     2,     0,     3,     0,     6,
       1,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     5,     1,     0,
       1,     3,     1,     3,     3,     3,     3,     0,     1,     1,
       0,     7,     0,    12,     0,    12,     0,    12,     0,     6,
       0,     3,     4,     4,     3,     2,    10,     1,     3,     2,
       2,     2,     2,     2,     2,     2,     0,    13,     0,     6,
       2,     0,     1,     3,     1,     0,     2,     0,     2,     0,
       1,     3,     4,     0,     2,     0,     2,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       0,     3,     1,     0,     2,     0,     2,     2,     2,     2,
       2,     3,     3,     1,     1,     1,     2,     3,     3,     0,
       4,     0,     3,     0,     1,     3,     1,     0,     1,     3,
       1,     0,     3,     0,     1,     3,     1,     4,     0,     1,
       1,     1,     0,     3,     2,     3,     0,     3,     0,     5,
       5,     0,     7,     5,     0,     2,     1,     1,     1,     3,
       1,     1,     1,     3,     0,     1,     1,     1,     1,     2,
       1,     3,     1,     1,     0,     1,     0,     2,     3,     5,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     3,     1,     3,     0,     2,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     0,     5,     0,     2,     0,     3,     0,
       2,     2,     2,     2,     0,     6,     2,     0,     2,     1,
       1,     3,     0,     0,     0,     7,     0,     2,     2,     1,
       1,     0,     0,     8,     0,     6,     1,     2,     1,     2,
       0,     0,     6,     0,     0,     6,     0,     2,     0,     5,
       0,     1,     0,     5,     0,     2,     0,     5,     4,     0,
       0,     8,     0,     7,     1,     1,     1,     1,     1,     2,
       4,     5,     0,     4,     4,     4,     3,     3,     2,     2,
       0,     2,     1,     2,     3,     1,     1,     1,     1,     1,
       2,     3,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     2,     3,     1,     1,     1,     1,     1,     1,
       1,     2,     3,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     2,     3,     1,     1,     1,     2,     2,     2,
       1,     1,     1,     1,     2,     3,     3,     3,     3,     3,
       3,     3,     3,     4,     0,     1,     1,     1,     1,     1,
       2,     3,     2,     4,     0,     6,     0,     5,     0,     0,
       5,     0,     7,     1,     0,     1,     0,     4,     0,     0,
       3,     5,     5,     0,     4,     2,     2,     2,     2,     0,
       1,     0,     1,     1,     3,     1,     4,     5,     5,     0,
       2,     0,     0,     7,     0,     9,     1,     3,     1,     1,
       0,     2,     0,     3,     1,     3,     0,     6,     1,     0,
       0,     5,     0,     4,     1,     1,     1,     3,     1,     3,
       0,     0,     5,     1,     3,     1,     1,     0,     3,     1,
       3,     0,     4,     1,     0,     1,     2,     1,     3,     4,
       3,     3,     3,     3,     4,     4,     3,     0,     0,     6,
       0,     1,     0,     1,     1,     2,     1,     1,     0,     1,
       1,     2,     1,     0,     3,     0,     1,     1,     2,     1,
       2,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     0,     6,     1,     1,
       3,     4,     4,     2,     2,     2,     3,     3,     3,     3,
       3,     3,     3,     4,     4,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     2,     1,
       1,     1,     1,     1,     1,     3,     1,     1,     2,     2,
       0,     8,     0,     9,     0,     9,     0,     9,     8,     2,
       0,     1,     4,     0,     1,     2,     0,     3,     2,     8,
       0,     2,     0,     1,     1,     0,     1,     2,     1,     1,
       2,     2,     4,     3,     3,     3,     3,     1,     2,     1,
       1,     3,     2,     3,     2,     2,     1,     3,     3,     2,
       3,     1,     2,     2,     2,     1,     2,     1,     1,     1,
       2,     3,     2,     3,     2,     2,     3,     3,     3,     0,
       6,     0,     6,     2,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     2,     2,     1,     2,     1,
       2,     3,     2,     1,     1,     1,     1,     1,     1,     1,
       2,     0,     1,     1,     5,     0,     1,     2,     1,     1,
       1,     1,     3,     3,     3,     3,     0,     1,     0,     1,
       0,     1,     2,     1,     1,     2,     2,     4,     1,     3,
       2,     1,     2,     2,     2,     3,     3,     3,     3,     2,
       2,     1,     2,     1,     1,     1,     1,     1,     0,     2,
       1,     1,     1,     1,     1,     0,     2,     1,     1,     0,
       1,     1,     2,     2,     1,     2,     2,     0,     1,     1,
       1,     3,     1,     3,     0,     1,     0,     1,     5,     0,
       3,     3,     1,     0,     2,     2,     2,     0,     3,     3,
       6,     6,     1,     1,     2,     2,     2,     1,     2,     2,
       1,     1,     0,     1,     1,     1,     1,     0,     1,     1,
       1,     0,     1,     2,     0,     1,     0,     1,     0,     1,
       1,     2,     1,     2,     1,     2,     2,     2,     3,     2,
       3,     3,     3,     3,     1,     1,     1,     1,     3,     1,
       1,     1,     4,     2,     1,     4,     0,     1,     0,     2,
       1,     3,     0,     6,     0,     5,     7,     0,     5,     0,
       5,     0,     5,     0,     4,     0,    10,     3,     4,     3,
       3,     7,     0,     3,     1,     4,     0,     3,     0,     2,
       0,     1,     0,     2,     2,     2,     2,     1,     1,     1,
       3,     4,     0,     6,     4,     0,     5,     0,     6,     4,
       3,     1,     2,     1,     1,     0,     5,     0,     3,     2,
       0,     5,     0,     0,     6,     1,     3,     1,     1,     3,
       2,     3,     2,     4,     0,     6,     0,     0,     7,     4,
       4,     3,     3,     2,     2,     6,     5,     3,     5,     1,
       1,     1,     0,     1,     0,     1,     0,     2,     0,     1,
       2,     1,     1,     1,     0,     1,     1,     0,     2,     1,
       0,     1,     1,     1,     0,     6,     0,     5,     4,     4,
       0,     6,     4,     3,     0,     1,     1,     3,     3,     2,
       2,     0,     2,     1,     3,     0,     1,     1,     0,     2,
       1,     3,     0,     5,     0,     1,     1,     0,     6,     0,
       1,     1,     2,     1,     1,     1,     0,     5,     1,     3,
       2,     0,     3,     1,     4,     1,     0,     4,     1,     0,
       4,     0,     1,     3,     0,     1,     3,     1,     1,     2,
       0,     5,     0,     1,     1,     2,     1,     1,     1,     1,
       1,     2,     0,     5,     0,     1,     1,     0,     4,     4,
       3,     5,     1,     3,     3,     0,     6,     1,     1,     1,
       3,     2,     3,     1,     1,     0,     6,     1,     1,     1,
       3,     3,     4,     0,     6,     0,     2,     0,     4,     0,
       2,     1,     2,     4,     2,     3,     2,     3,     0,     3,
       0,     0,     6,     2,     1,     1,     2,     2,     8,     4,
       0,     1,     2,     1,     1,     1,     1,     0,     2,     4,
       3,     1,     1,     3,     4,     0,     0,     0,     2,     2,
       1,     1,     0,     2,     3,     0,     2,     3,     0,     2,
       3,     3,     3,     2,     3,     4,     3,     4,     3,     4,
       1,     3,     4,     3,     3,     6,     1,     5,     6,     5,
       7,     6,     8,     5,     6,     4,     4,     5,     3,     4,
       1,     3,     3,     3,     3,     3,     3,     5,     5,     3,
       3,     3,     3,     3,     3,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     0,     2,     1,     2,     1,     1,     1,     2,
       2,     1,     1,     2,     2,     4,     1,     3,     1,     1,
       1,     1,     1,     3,     1,     1,     1,     1,     3,     2,
       2,     2,     2,     3,     3,     5,     6,     4,     4,     7,
       2,     6,     5,     6,     6,     4,     4,     5,     4,     6,
       2,     4,     4,     4,    10,     6,     8,     6,     4,     4,
       6,     4,     4,     4,     6,     4,     7,     7,     7,     6,
       6,     6,     6,     3,     4,     6,     8,     2,     2,     8,
       8,     6,     6,     2,     6,     6,     8,     8,     6,     8,
       6,     2,     8,     8,     2,     2,     2,     6,     6,     4,
       4,     8,     4,     4,     4,     4,     3,     8,     4,     4,
       6,     4,     4,     4,     6,     8,     6,     4,     6,     1,
       6,     4,     4,     4,     4,     4,     6,     4,     0,     5,
       6,     2,     3,     0,     4,     0,     3,     0,     1,     1,
       3,     4,     4,     5,     4,     4,     4,     5,     4,     0,
       0,     7,     4,     5,     4,     5,     4,     4,     4,     4,
       4,     5,     0,     8,     0,     3,     3,     1,     4,     0,
       1,     0,     2,     0,     1,     0,     3,     2,     3,     2,
       1,     1,     2,     1,     2,     1,     2,     2,     2,     0,
       3,     0,     1,     1,     3,     1,     3,     1,     3,     0,
       1,     0,     2,     4,     5,     1,     1,     1,     1,     4,
       1,     3,     3,     3,     0,     6,     0,     6,     0,     8,
       4,     0,     8,     0,    10,     6,     0,     8,     0,    10,
       6,     1,     2,     2,     0,     4,     3,     5,     2,     0,
       0,     7,     1,     0,     0,     6,     0,     3,     0,     0,
       5,     0,     1,     0,     1,     0,     2,     3,     3,     1,
       1,     0,     7,     0,     7,     1,     2,     0,     0,     2,
       0,     2,     0,     1,     1,     1,     1,     3,     1,     3,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     0,     1,     1,     0,     2,
       0,     1,     0,     0,     3,     0,     0,     3,     2,     0,
       0,     4,     4,     2,     0,     1,     1,     3,     3,     1,
       2,     0,     1,     0,     4,     4,     2,     0,     1,     1,
       0,     1,     0,     1,     2,     5,     4,     1,     3,     3,
       1,     1,     1,     1,     1,     1,     0,     2,     3,     4,
       1,     2,     2,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     0,
       0,     6,     0,     1,     3,     1,     3,     0,     2,     3,
       1,     2,     1,     0,     3,     0,     0,     7,     2,     1,
       0,     3,     0,     7,     0,     6,     4,     6,     4,     4,
       4,     0,     6,     4,     4,     5,     6,     4,     1,     3,
       1,     1,     3,     1,     0,     2,     0,     1,     0,     0,
       8,     0,     0,     6,     0,     1,     1,     1,     1,     1,
       2,     1,     1,     1,     3,     4,     0,     3,     3,     1,
       2,     2,     0,     3,     0,     5,     3,     1,     3,     1,
       3,     1,     1,     0,     1,     0,     4,     0,     1,     3,
       1,     1,     1,     0,     0,     6,     0,     0,    11,     3,
       1,     3,     3,     1,     3,     0,     1,     0,     4,     0,
       6,     0,     5,     0,     6,     1,     3,     2,     4,     0,
       2,     0,     2,     1,     1,     1,     0,     4,     0,     1,
       0,     1,     1,     3,     1,     1,     2,     2,     2,     1,
       1,     1,     1,     0,     3,     0,     3,     2,     4,     4,
       3,     4,     4,     1,     3,     3,     6,     2,     2,     0,
       6,     0,     7,     5,     2,     1,     1,     1,     5,     5,
       2,     2,     1,     4,     3,     2,     3,     2,     2,     1,
       3,     4,     3,     3,     2,     3,     2,     3,     1,     1,
       1,     1,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     1,     1,     1,     1,     1,     0,     1,     0,     2,
       0,     1,     1,     1,     0,     2,     0,     2,     0,     2,
       2,     0,     4,     0,     4,     1,     1,     0,     1,     1,
       0,     1,     1,     0,     4,     0,     0,     5,     1,     0,
       4,     3,     1,     2,     2,     2,     2,     2,     3,     2,
       1,     1,     1,     1,     2,     1,     1,     1,     1,     1,
       1,     1,     0,     1,     0,     3,     0,     3,     3,     1,
       0,     4,     1,     2,     0,     1,     0,     3,     3,     2,
       2,     0,     5,     0,     1,     1,     0,     1,     1,     1,
       2,     2,     0,     0,     0,     0,    21,     1,     1,     0,
       1,     0,     1,     1,     0,     1,     1,     0,     2,     2,
       1,     3,     4,     3,     3,     0,     2,     2,     1,     3,
       3,     0,     4,     0,     3,     1,     1,     0,     3,     2,
       3,     1,     1,     2,     0,     2,     3,     1,     5,     1,
       1,     2,     2,     1,     1,     1,     1,     1,     2,     2,
       1,     1,     1,     1,     1,     1,     1,     2,     2,     2,
       2,     2,     1,     1,     1,     1,     1,     1,     1,     3,
       5,     1,     1,     1,     1,     1,     3,     4,     5,     1,
       5,     3,     2,     1,     3,     2,     2,     4,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     3,     2,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     0,     3,     0,     3,
       0,     3,     0,     3,     0,     3,     2,     0,     2,     0,
       2,     0,     4,     0,     3,     1,     1,     1,     1,     0,
       1,     1,     1,     0,     2,     2,     2,     3,     3,     4,
       6,     2,     3,     3,     3,     5,     1,     3,     3,     1,
       1,     3,     3,     1,     3,     2,     2,     2,     2,     2,
       1,     1,     4,     4,     1,     1,     1,     1,     1,     0,
       4,     1,     1,     1,     3,     3,     1,     1,     2,     2,
       2,     0,     3,     4,     3,     0,     7,     1,     2,     1,
       1,     1,     1,     1,     1,     0,     5,     1,     1,     1,
       1,     1,     3,     6,     6,     6,     7,     5,     3,     8,
       8,     8,     6,     0,     1,     1,     2,     0,     1,     1,
       3,     0,     3,     0,     3,     0,     3,     0,     3,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       2,     2,     1,     3,     2,     2,     2,     2,     2,     2,
       2,     2,     1,     1,     2,     0,     1,     3,     1,     2,
       2,     2,     1,     3,     3,     1,     1,     3,     1,     3,
       1,     1,     1,     1,     4,     5,     4,     6,     1,     0,
       3,     3,     1,     1,     0,     2,     2,     2,     2,     0,
       2,     0,     3,     2,     1,     2,     2,     2,     2,     2,
       0,     3,     0,     1,     0,     3,     2,     0,     1,     2,
       0,     1,     4,     4,     5,     2,     3,     0,     1,     0,
       4,     0,     1,     1,     0,     1,     0,     2,     2,     1,
       0,     1,     1,     2,     3,     2,     0,     6,     3,     0,
       0,     0,     1,     2,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     2,     2,     3,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     0,
       3,     1,     2,     1,     2,     3,     3,     3,     0,     3,
       3,     0,     7,     0,     3,     1,     3,     0,     3,     2,
       4,     0,     3,     4,     4,     0,     0,     0,    16,     8,
       7,     0,     0,     0,     0,     0,    15,     0,     0,     0,
       0,    12,     4,     4,     3,     4,     3,     2,     1,     3,
       5,     1,     1,     0,     1,     1,     0,     2,     0,     0,
       3,     0,     2,     5,     3,     3,     3,     1
};

/* YYDEFACT[STATE-NAME] -- Default rule to reduce with in state
   STATE-NUM when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
       0,   956,  1054,  2540,     0,     0,     0,     0,     0,     0,
    2542,   120,    64,  1697,  1815,  1816,  1610,  1636,     2,     0,
    1054,   170,     0,    76,  1638,     0,  1871,     0,     0,  1054,
       0,   449,     0,  1866,     0,     0,  1054,  1641,  1856,   244,
     170,  2542,     0,  1100,  2346,  1735,     0,   107,     0,     0,
    1718,     0,  2421,  1686,     0,     0,  2677,     0,     0,     3,
       8,    19,     0,    40,    24,    28,    14,    18,    13,    53,
      47,    38,    37,    10,    55,    56,    16,    44,    11,    12,
      15,    36,    43,    32,    39,    51,  1091,    22,    23,    29,
      45,    60,    20,    57,    54,    21,  1817,    25,    46,    41,
      33,    61,    34,    52,    35,    59,    27,    48,    26,     9,
      17,    49,    50,    42,    62,    30,    58,    31,     0,   890,
       0,     0,     0,     0,     0,     0,     0,   958,   873,  2607,
    2608,  2609,  1056,  1055,     0,  2542,  1981,  1039,  1065,  2052,
    2053,  2054,  2055,  2056,  2057,  2058,  2059,  1995,  2060,  2061,
    2063,  2062,  2064,  2065,  1996,  1997,  2066,  2067,  2068,  2070,
    2069,  2071,  1998,  1999,  2072,  2073,  2074,  2075,  2000,  2002,
    2001,  2076,  2079,  2078,  2077,  2003,  2080,  2081,  2082,  2084,
    2004,  2005,  2006,  2007,  2008,  2083,  2009,  2085,  2010,  2086,
    2087,  2088,  2089,  2090,  2091,  2092,  2094,  2093,  2011,  2095,
    2096,  2097,  2098,  2099,  2101,  2100,  2102,  2103,  2104,  2012,
    2105,  2106,  2107,  2108,  2109,  2110,  2111,  2013,  2112,  2113,
    2114,  2131,  2014,  2115,  2118,  2117,  2116,  2119,  2120,  2121,
    2123,  2122,  2124,  2015,  2016,  2125,  2126,  2127,  2129,  2128,
    2133,  2134,  2135,  2017,  2130,  2132,  2324,  2136,  2137,  2139,
    2138,  2140,  2142,  2141,  2018,  2144,  2143,  2019,  2020,  2145,
    2146,  1979,  2147,  1980,  2148,  2151,  2152,  2149,  2153,  2158,
    2021,  2150,  2154,  2155,  2156,  2157,  2159,  2022,  2161,  2160,
    2162,  2163,  2164,  2165,  2166,  2167,  2168,  2169,  2170,  2181,
    2174,  2176,  2177,  2179,  2175,  2180,  2184,  2183,  2185,  2186,
    2187,  2188,  2189,  2182,  2172,  2178,  2173,  2190,  2191,  2171,
    2192,  2193,  2194,  2195,  2196,  2197,  2198,  2199,  2200,  2201,
    2202,  2204,  2203,  2205,  2206,  2207,  2208,  2209,  2210,  2212,
    2211,  2213,  2214,  2215,  2217,  2216,  2219,  2220,  2023,  2218,
    2221,  2222,  2223,  2224,  2226,  2225,  2024,  2025,  2026,  2227,
    2228,  2027,  2229,  2230,  2231,  2028,  2232,  2233,  2234,  2236,
    2235,  2237,  2238,  2029,  2030,  2239,  2240,  2241,  2242,  2243,
    2244,  2245,  2246,  2247,  2248,  2249,  2250,  2251,  2252,  2254,
    2253,  2255,  2256,  2257,  2258,  2259,  2260,  2261,  2031,  2262,
    2032,  2263,  2264,  2033,  2265,  2034,  2266,  2267,  2035,  2268,
    2269,  2270,  2271,  2272,  2273,  2036,  2274,  2275,  2276,  2037,
    2278,  2277,  2279,  2038,  2281,  2282,  2039,  2280,  2041,  2042,
    2283,  2284,  2040,  2285,  2043,  2286,  2287,  2289,  2288,  2290,
    2291,  2292,  2044,  2293,  2045,  2294,  2295,  2296,  2297,  2298,
    2300,  2299,  2301,  2302,  2303,  2304,  2307,  2309,  2306,  2308,
    2305,  2310,  2311,  2312,  2313,  2317,  2318,  2319,  2320,  2314,
    2315,  2316,  2046,  2321,  2322,  2323,  2325,  2326,  2328,  2327,
    2047,  2048,  2329,  2330,  2051,  2331,  2332,  2333,  2337,  2334,
    2345,  2335,  2336,  2339,  2338,  2340,  2341,  2049,  2342,  2050,
    2343,  2344,   189,  1984,   172,  1985,  1994,   107,  2412,  2411,
    1002,  1040,  2543,  2544,   543,   819,     0,     0,   820,     0,
     542,   818,   170,  2609,   125,     0,   539,   540,     0,     0,
       0,  1711,     0,  1634,  1634,  1634,     0,     0,  1634,  1634,
       0,  1637,  1634,   170,  1634,     0,    69,  1823,     0,     0,
       0,     0,  1978,     0,  1644,     0,     0,  1873,  1887,     0,
    1888,  1882,  2409,     0,  1125,     0,     0,     0,     0,   170,
    1057,     0,  1695,     0,   234,   243,   245,   246,   242,     0,
    2544,  2555,  1092,  1098,  1110,     0,  1800,   246,     0,   108,
     109,     0,   107,   984,     0,   107,  1719,  1716,     0,     0,
       0,  1695,  1881,  2661,     0,     0,     0,  2657,     0,  2662,
       0,  1100,     0,     0,     1,     5,     0,     0,  2126,  2231,
    1813,  1811,  1973,     0,   864,   891,     0,   869,     0,   867,
    1990,  1989,  1988,     0,   880,   879,   877,     0,   410,     0,
     962,   963,   957,   959,   961,     0,  2618,   871,  1016,  2541,
       0,   191,     0,     0,     0,     0,     0,  2547,     0,     0,
       0,     0,   124,     0,     0,     0,   121,  1125,  1125,  2609,
    2611,  2613,   543,   541,     0,     0,     0,  1715,  1714,  1713,
       0,  1711,  2053,  1995,  2065,     0,  1946,     0,     0,     0,
    1399,     0,  2000,     0,  2080,  2082,  2004,  2005,  2006,  2007,
    2008,  2011,     0,     0,  1138,  1138,  1135,     0,     0,     0,
    2103,  2104,  1955,     0,     0,     0,  1943,  1956,  2139,  2140,
       0,  1945,  2146,     0,     0,     0,  2160,     0,  2165,  1953,
       0,     0,  2199,  2201,     0,     0,  2205,  2206,  2207,  2208,
    1930,  1193,     0,  1135,  1942,  1952,  2223,  1936,  2232,  2237,
    2238,     0,  2247,     0,     0,     0,  2272,  2276,     0,     0,
    2297,     0,     0,  1135,  1929,  2317,  2318,  2319,  2320,     0,
    1944,  2046,  1954,     0,  2331,  1138,  1135,  1135,     0,     0,
       0,  2340,  2344,     0,     0,     0,  2579,  1192,     0,  1364,
       0,  1393,  1150,  1156,  1170,     0,  1185,  1219,  1220,  1222,
    1319,  1221,  1227,  1226,  1611,  1940,  1225,  1224,  1941,  1218,
    1963,  1984,  1962,     0,     0,     0,     0,     0,     0,     0,
       0,  1796,     0,     0,  1621,  1634,    71,     0,  2457,  2472,
    2473,  2469,  2474,  2492,  2475,  2479,     0,  2471,  2463,     0,
    2478,     0,  2467,  2476,     0,  2461,     0,  2477,  2482,  2493,
    2465,  2470,  2448,     0,  2455,  2459,  1975,  1505,  2424,  2425,
       0,    77,  1646,  1647,  1645,   954,     0,  2674,  1874,  1875,
    1876,     0,  1891,     0,  1052,     0,     0,   459,   450,     0,
    1795,  1794,     0,  1867,  2556,     0,     0,  1007,  1649,  1696,
       0,  1648,  1862,     0,  1860,  1857,  1859,   235,     0,     0,
     265,  2457,     0,  2442,     0,  2550,  2547,  2557,  2592,  2587,
    2586,  2589,  2590,  1116,  2591,  1115,  2588,  2585,  1125,  1111,
    1113,  1114,   753,     0,     0,  2366,  2367,  2212,  2232,  2368,
    2314,     0,     0,  2386,  2347,  2352,  2348,     0,     0,  1755,
       0,   753,  1778,  1808,  1756,     0,     0,  1808,     0,  1540,
    1798,  1801,     0,  2370,  1769,   816,   815,  1781,   814,  2371,
    1794,     0,  1743,  1757,     0,  1720,  1762,   107,  2372,     0,
    1797,  1780,     0,  1779,  1540,  1808,     0,  1736,     0,     0,
       0,     0,     0,   241,   991,   991,   991,   991,     0,     0,
     983,   985,   986,   991,   991,     0,  2675,  2676,  2422,   954,
    1935,  1934,  1982,  2658,  1933,  2666,  2668,  2654,  2656,  2663,
    1094,     0,  2561,     6,    63,     0,  1820,  2616,  2617,  2615,
     769,     0,  1138,  1991,  2610,   173,   878,     0,   411,   173,
       0,     0,     0,     0,     0,   412,   413,   349,   862,   960,
     875,     0,     0,   874,  2618,     0,     0,  1067,  1069,  1068,
    1085,   193,   190,   171,    78,  1004,  1628,  1630,  1042,  2546,
       0,     0,  2548,  2552,  1191,  1190,     0,   118,   123,     0,
       0,     0,  2518,   122,  2508,  2614,  1125,  1125,  1125,  2606,
       0,  2594,  2601,  2602,  2605,  2604,  2603,  2600,     0,  2593,
    2596,  2597,  2599,  2598,  2618,  2612,     0,   821,   821,   821,
       0,  1698,  1701,  1705,  1709,  1712,     0,     0,  1510,  1240,
    1510,  1510,  1510,  1400,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1510,     0,  1277,
    1250,     0,  1278,     0,     0,     0,     0,     0,  1949,     0,
       0,  2579,     0,     0,     0,  1369,     0,     0,     0,  2579,
       0,     0,     0,     0,     0,     0,  1395,  1397,  1962,  1510,
       0,     0,  1510,     0,     0,     0,     0,     0,  1143,  1283,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1510,  1510,     0,     0,  1510,  1291,     0,  1951,     0,
       0,     0,  1950,     0,     0,  1948,  1947,  1931,     0,  1294,
    1296,  1295,     0,  1510,  1510,     0,     0,  1230,  1229,  1231,
       0,     0,     0,     0,     0,     0,  1189,  1188,  1187,  1186,
       0,     0,     0,  1194,     0,  1195,  1196,     0,  1197,  1198,
    1199,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1232,     0,     0,     0,  1932,  1328,     0,  1635,  1616,  1623,
    1618,     0,  1796,  1619,  1627,   424,     0,  1624,  2506,  1620,
       0,  1612,     0,    70,     0,  1845,  1850,     0,     0,     0,
    1840,  1848,  1842,  1849,  1841,     0,     0,  1851,   107,     0,
    1843,  1847,  1846,  1824,  1828,  1832,  1825,  2458,  2456,  2490,
    2489,  2494,     0,  2491,  2487,  2480,  2519,  2484,     0,  2519,
    2486,  2485,  2519,  2481,  2488,  2519,  2453,     0,  1506,  1507,
       0,  2423,     0,  1974,   955,     0,     0,  1877,  1878,     0,
    1075,  1892,  1893,  1889,  1505,  2410,  2413,     0,   642,  1126,
     460,     0,     0,   469,     0,     0,    66,    67,     0,  1059,
       0,  1058,  1062,     0,     0,     0,  1652,  1642,  1651,  1863,
     107,     0,   233,   258,   253,   261,   255,   257,   256,   262,
     263,   264,   259,   254,   260,   247,     0,  2456,     0,  2453,
    2551,     0,  2553,  2570,  1099,  2558,  1122,  1101,  1121,     0,
    1112,   752,     0,   755,   757,  1671,  1672,   756,   765,     0,
     754,     0,     0,     0,  2373,     0,   761,   763,   762,  2381,
     760,     0,     0,  2357,     0,     0,  1804,     0,     0,  1768,
       0,   543,     0,     0,     0,     0,     0,     0,  1737,     0,
       0,   586,     0,  1761,  1541,  1802,  1803,  1808,     0,     0,
    1808,     0,  1774,  1798,     0,  1808,  1732,     0,     0,  1724,
    1729,  1725,     0,  1731,  1730,  1733,  1721,  1722,     0,  1748,
    1776,     0,  1798,  1760,  1767,     0,  1747,  1754,     0,  1765,
    1798,  1798,     0,  1808,  1808,   980,   995,   982,   976,   974,
     989,   990,     0,     0,   979,   978,  1717,  1434,     0,     0,
    2655,  2669,  2653,  2664,  2665,  2652,  1095,  2562,  1093,  2563,
       0,     7,     4,  1814,  1812,  1821,  1822,   770,   769,   534,
     537,   536,     0,     0,  1993,     0,   870,     0,  1796,   868,
       0,     0,  1796,   360,  1796,   414,   769,   882,     0,     0,
     872,  1017,  1018,  1021,     0,     0,   448,  1085,  1071,  1087,
       0,   194,   196,     0,  1006,  1005,     0,  1003,  1050,  1049,
    1047,     0,  1048,  1046,  1041,  1043,  1044,  2545,  2549,   544,
     769,  1796,     0,   352,     0,     0,     0,     0,     0,   543,
       0,     0,  2595,   110,   822,     0,     0,     0,  1703,  1631,
    1699,  1633,  1973,     0,     0,     0,  1707,     0,     0,  1511,
    1510,     0,  1375,     0,     0,     0,     0,  1401,     0,     0,
       0,     0,     0,     0,     0,     0,  1216,     0,     0,     0,
       0,     0,  1349,     0,  1375,  1139,  1585,  1586,  1570,  1571,
    1569,  1572,  1136,     0,  1573,  1584,  1306,     0,     0,     0,
       0,     0,     0,  1481,  1482,  1483,  1484,  1492,  1485,  1486,
    1487,  1494,  1499,  1488,  1489,  1495,  1496,  1497,  1490,  1498,
    1493,  1491,  1500,     0,  1480,     0,  1503,  1501,  1504,  1502,
       0,  1370,  1362,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1510,     0,     0,     0,  1510,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1510,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1273,     0,  1965,  1964,     0,     0,     0,     0,
    1234,     0,  1233,  1443,     0,  2564,  2580,     0,  2373,  1365,
    1367,     0,  1141,  1140,  1142,  1153,  1146,  1151,  1144,  1148,
       0,  1200,  2059,  1154,     0,     0,  1182,  2579,  1519,  1183,
    1168,  1173,  1174,     0,  1171,  1172,     0,  1176,     0,  1175,
    1179,  1180,  1181,  1184,     0,     0,     0,     0,  1223,  1228,
    1394,  1125,  1966,     0,  1614,   424,   427,   426,  1625,   425,
    1673,     0,   964,     0,     0,    72,    74,  1837,  1834,  1833,
    1835,  1839,   107,  1844,  1836,     0,  1852,  2483,     0,  2464,
       0,  2468,  2462,  2466,     0,     0,  2454,     0,  2460,  1509,
    2134,  2216,     0,  1512,  2427,  1639,  2673,  2331,  1879,  1872,
       0,  1890,     0,     0,     0,  1053,   643,     0,  1125,   458,
     457,   456,   455,     0,   471,   453,     0,    68,     0,     0,
    1868,     0,     0,     0,     0,  1009,  1650,     0,  1864,  1858,
       0,     0,     0,     0,     0,     0,     0,  2554,  2572,  2571,
    2559,  1125,  1531,  1126,  1126,  1962,  2388,     0,  2383,  2382,
       0,     0,     0,  2401,  2384,     0,     0,  2351,  2389,  2390,
    2393,     0,     0,     0,     0,     0,  2387,  2314,  2353,  2354,
       0,  2359,  2349,  2407,  2408,  2405,  2406,  2404,  2378,  1775,
       0,  1806,  1809,  1810,     0,     0,  1789,  1783,  1782,  1772,
    1784,  1773,  1793,  1792,  1791,  1745,  1744,  1553,  1554,  2270,
    1552,  1544,  1547,  1551,  1550,  1740,  1799,  1788,  1786,  1770,
    1808,  1787,  1785,  1726,  1727,  1728,     0,  1540,     0,  1804,
    1777,  1808,  1798,     0,  1808,  1808,  1790,  1764,  1766,   998,
     997,   996,   992,   993,   977,   998,   988,   987,  1452,  1451,
       0,  1408,     0,  1410,  1407,  1406,  1405,     0,  1451,  2659,
    2667,  2671,     0,  1540,  2569,  2567,   535,  1673,  1673,     0,
    1992,     0,     0,     0,     0,     0,     0,     0,   174,   183,
       0,     0,   358,   359,  1673,   357,   400,   401,   404,   405,
     406,     0,     0,     0,     0,     0,     0,     0,     0,   127,
     407,  1673,  1673,   354,   380,   381,   384,   385,   386,   387,
     388,   350,     0,   355,   952,   952,     0,  1673,  1673,   952,
    1673,     0,     0,  1673,  1673,     0,     0,  1673,     0,     0,
     952,     0,  1673,   950,     0,     0,  1673,  1673,  1673,  1673,
     952,     0,     0,  1673,  1673,   448,  1673,     0,     0,   970,
       0,     0,  1673,     0,     0,  1673,  1673,     0,  1673,   898,
     949,   547,   568,   569,   863,   897,   899,   911,   444,     0,
     928,   951,     0,     0,   884,   886,  2619,  2620,  2621,     0,
       0,  1020,  1074,  1066,  1073,  1070,  1085,  1083,  1072,   811,
     810,     0,  1086,   192,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    79,    80,    98,  1629,  1051,
    1045,   119,   769,  1673,  1673,  1673,  1673,   356,   389,   390,
     393,   394,   395,   396,   399,   397,   398,     0,     0,  1796,
       0,  2510,  2511,     0,  2509,     0,  2647,     0,     0,     0,
     172,   545,     0,     0,   823,     0,     0,     0,     0,     0,
    1512,     0,  1976,  1706,  1434,  1710,  1709,     0,  1302,     0,
    1342,     0,  1344,  1345,  1346,     0,     0,     0,     0,     0,
    1303,     0,  1248,  1304,  1305,     0,  1299,     0,  1300,     0,
       0,     0,     0,     0,     0,     0,  1348,     0,  1137,     0,
       0,  1251,  1252,  1245,  1237,     0,  1321,     0,     0,  1253,
       0,     0,     0,     0,  1308,     0,  1322,  1396,     0,  1398,
    1966,     0,  1354,  1309,  1258,     0,  1352,     0,  1259,  1323,
    1324,  1325,  1311,  1312,     0,  1327,     0,  1313,     0,     0,
       0,     0,  1261,  1358,  1356,     0,     0,     0,     0,  1360,
    1263,     0,     0,     0,  1262,     0,     0,     0,     0,     0,
       0,     0,  1265,     0,  1246,  1357,  1359,  1317,     0,  1274,
       0,  2573,  1442,  2581,  1443,     0,     0,  2575,  2565,  2570,
    2578,  1238,     0,     0,  1967,  1147,  1152,  1145,  1149,  2579,
       0,     0,     0,     0,  1166,  1165,     0,     0,     0,  2579,
    1519,  1169,     0,     0,  1338,  1339,  1391,     0,  1617,  1615,
    1626,  1674,     0,  2507,   966,   965,  1622,   964,    75,     0,
    1838,  1831,  1853,  1826,  2523,     0,  2522,     0,  2502,  2505,
    1973,     0,     0,     0,  2437,  2431,  2438,  2440,  2434,  2439,
    2441,  2432,  2433,  2428,  2435,  1513,  1542,     0,  1880,  1076,
    1078,  1079,  1077,  1085,     0,     0,  2416,  2417,  2415,  2414,
     461,     0,   470,     0,   482,     0,   461,  1870,  1869,     0,
    1060,  1063,  1064,  1014,  1013,  1015,  1008,  1010,  1011,   527,
    1656,     0,     0,     0,  1662,  1643,  1653,  1865,  1861,     0,
    2103,  2317,  2320,   248,   251,   250,   252,     0,     0,     0,
       0,     0,     0,  1120,  1434,  1603,  1117,  1105,  1542,  1532,
    1104,  1127,  1123,     0,   768,   767,   766,   764,     0,     0,
       0,     0,  2395,  2396,     0,     0,  2374,  2375,  2376,     0,
    2379,  2356,  2357,     0,  2358,     0,  1805,     0,  1749,     0,
    1771,     0,     0,     0,     0,  1742,     0,  1763,  1723,  1806,
    1741,  1512,  1798,  1738,  1739,     0,   981,   995,   975,  1451,
    1434,     0,     0,  1431,  1453,     0,  1453,  1434,  1434,     0,
    1434,  1505,  1448,     0,     0,  2670,  1533,  2568,     0,     0,
     866,   177,   180,   178,     0,   179,     0,     0,   409,   408,
       0,  1796,   402,   131,   130,   132,   133,  1567,  1568,  1564,
    1565,  1563,  1566,   135,   134,   129,   881,     0,     0,     0,
    1796,   382,   361,   362,   365,   366,   367,   953,   856,  1054,
     932,     0,   624,   856,   807,   812,   812,   930,     0,  1054,
       0,     0,     0,     0,     0,  1054,     0,     0,     0,  1673,
       0,   943,   893,     0,     0,     0,     0,     0,   944,     0,
     894,  1673,     0,     0,     0,     0,     0,  1054,     0,     0,
       0,   446,     0,  1054,   912,   973,   972,   971,     0,  1054,
    1054,     0,   574,   575,   573,     0,     0,     0,   566,   548,
     769,   895,   445,   896,   623,     0,   967,   620,   626,  1969,
       0,     0,     0,     0,   141,  2623,  1019,     0,     0,  1472,
     195,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1796,   391,     0,     0,
    1673,   351,   368,   369,   372,   373,   374,   375,   376,   379,
     377,   378,     0,  2514,  2516,     0,     0,   345,   344,     0,
     136,  2641,     0,     0,   623,   111,   444,   546,   549,   849,
     851,   850,   837,   836,   112,   114,   116,  1632,  1709,  1434,
    1531,  1974,  1512,     0,  1708,     0,     0,  1343,  1376,     0,
    1402,     0,  1242,   726,   726,   726,  1385,   711,  1389,  1380,
     726,  1381,   726,  1383,     0,     0,     0,  1202,  1217,     0,
       0,     0,     0,     0,  1350,  1347,     0,     0,     0,     0,
    1373,     0,     0,     0,  1247,     0,  1333,  1355,  1353,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1361,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1235,  1125,  2582,  2584,  1096,     0,  2574,
    2576,   858,  1366,     0,  1163,  1159,     0,  1157,  1518,  1178,
    1177,     0,     0,     0,  1167,  1126,  1329,  1125,     0,  1392,
    1968,   423,   585,  1613,    73,  1829,  2520,     0,  2531,     0,
       0,     0,     0,     0,     0,     0,  2426,  1543,  1683,     0,
    1085,  1089,  1983,  1883,  2419,  2420,  2418,     0,   462,   463,
     465,  1126,   479,   459,     0,   451,   454,     0,     0,  1012,
    1110,     0,  1675,  1660,  1667,  1661,     0,     0,     0,  1659,
    1958,  1957,  1964,  2557,     0,     0,  2447,     0,     0,     0,
    2560,  1512,  1512,  1597,     0,     0,  1102,  1107,  1103,  1106,
       0,  1124,  1131,  1130,  1959,  1966,  2385,     0,     0,     0,
       0,  2400,  2394,  2391,  2392,     0,  2355,  2377,  2361,  2360,
    2363,  2365,  1577,  1578,  1576,  1574,  1575,  1807,  1540,  1759,
    1758,  1555,  1546,     0,  1549,  1548,  1734,  1751,  1753,  1808,
    1000,   999,   994,     0,  2564,  1446,     0,  1433,  1432,  1454,
       0,  1434,  1453,  1453,     0,  1413,  1412,  1687,  1690,     0,
    1411,  1470,  1436,  1110,  2660,  2672,     0,   584,   583,   182,
     181,   187,   188,   429,   415,   428,   403,   128,   416,   417,
     383,     0,   363,   625,   857,   915,     0,     0,     0,   812,
     619,   856,   821,   813,   856,   856,     0,     0,   558,   555,
     934,   561,   913,   905,   914,   925,   927,     0,   557,   576,
       0,     0,   564,   856,   900,   941,   942,   964,   552,     0,
     595,   596,   594,   570,   577,   553,   554,   936,     0,  1527,
    1529,  1537,   560,   559,  1588,  1587,   563,     0,   556,     0,
     947,   920,     0,   592,   590,   587,   589,   588,   593,   591,
     565,   562,   578,   910,     0,   952,   952,   929,     0,   603,
     604,   606,   607,  1972,     0,   969,   931,     0,   608,   621,
     609,     0,     0,   582,  1581,  1582,  1579,  1580,   581,  1583,
     579,   580,     0,   151,     0,     0,   883,     0,   144,   142,
     153,     0,     0,  1023,     0,  1022,     0,  1475,     0,  1476,
    1473,  1474,    99,    86,    82,   103,   104,    84,    85,    89,
      88,    90,    91,    94,    95,    92,    87,    93,    83,    96,
     105,   106,    81,   422,   421,   420,   419,   392,     0,     0,
       0,  1796,   370,  2515,  2513,  2512,     0,     0,  2648,   348,
     346,   347,     0,     0,   197,   601,   602,   600,   599,     0,
     432,     0,  2028,   430,     0,   443,     0,  1894,   769,   550,
       0,     0,     0,     0,  1512,  1556,  1977,  1702,     0,  1275,
    1403,     0,     0,   727,  1377,   777,  1387,     0,  1388,   713,
     712,   728,  1379,  1382,  1386,  1384,  1241,  1249,  1297,     0,
    1215,  1298,     0,  1320,  1244,  1243,     0,     0,     0,  1281,
    1282,  1371,  1374,     0,     0,  1255,     0,  1257,     0,     0,
    1335,  1310,  1326,  1284,  1314,     0,  1260,  1236,     0,  1285,
       0,  1290,  1288,     0,  1264,     0,     0,  1271,     0,  1269,
       0,  1270,     0,  1272,  1316,  1318,  1444,  2583,  1097,     0,
       0,  1368,  1155,     0,  1164,  1161,     0,  1158,  1127,  1340,
    1330,     0,  1827,  2521,     0,  2452,  2504,  2503,  2524,  2524,
    2524,     0,  1514,     0,  1640,  1080,  1085,  1089,     0,  1081,
    1894,   466,     0,     0,     0,   486,     0,   484,   452,  1061,
    1125,  1657,  1669,     0,  1677,     0,     0,  1654,  1664,     0,
       0,     0,  1663,   249,     0,  2444,  2445,  2443,  1542,  1520,
       0,     0,  1609,     0,  1604,  1118,     0,  1129,  1128,     0,
    2403,  2402,  2398,  2397,  2399,  2380,     0,     0,  1750,  1545,
    1540,  1746,     0,  2570,  1505,  1438,  1434,  1409,  1434,  1420,
       0,     0,  1434,  1416,  1414,  1418,     0,  1512,     0,  1435,
    1467,  1125,  1961,  1534,  1537,   364,   917,     0,   856,   808,
     809,   821,     0,   821,   821,     0,     0,   904,     0,  1042,
       0,   909,   765,   571,   940,   939,   572,     0,   902,     0,
    1538,  1539,  1530,   447,   901,   922,   907,  1852,   933,   623,
     968,   789,   707,   656,   647,   726,   650,   649,   693,   726,
     661,   711,   709,   679,   711,   711,   686,   685,   703,   689,
     669,   777,   777,   668,   706,   777,   690,   688,   692,     0,
     694,   711,   699,   687,   691,   708,   684,   681,   705,   726,
     726,   726,   665,   704,   777,     0,   697,   726,   627,   730,
     667,   777,   784,     0,     0,   726,   728,  1971,   152,   140,
       0,     0,   885,   887,     0,     0,   888,  2625,     0,  2627,
    1025,  1026,     0,     0,  1088,     0,     0,   100,   102,     0,
     353,   418,   371,  2517,     0,   208,  1125,     0,     0,   198,
     200,   201,     0,     0,     0,   434,  1896,  1895,   431,   530,
     551,     0,     0,     0,  1709,  1704,     0,  1700,     0,  1404,
       0,     0,     0,     0,   771,   782,   780,   774,     0,   778,
     779,  1378,     0,     0,   729,  1390,   726,  1212,   711,  1206,
    1208,  1204,     0,   694,  1207,   726,     0,   777,  1211,  1203,
       0,  1351,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1239,     0,  1331,     0,     0,     0,     0,     0,     0,
    1268,  1266,  1267,  1542,  2564,   859,  1160,     0,  1341,     0,
       0,     0,  2529,  2529,  2529,  1682,  1681,     0,  1680,  1684,
    1082,  1090,     0,   464,   467,     0,     0,     0,   483,     0,
     528,     0,     0,     0,  1678,  1666,  2561,  1655,  1658,  1966,
    2446,  1109,     0,  1515,  1608,  1605,     0,  1598,  1600,  1602,
       0,  1960,  2362,  2364,  1752,  1001,  1439,  1437,  1447,     0,
    1405,  1434,  1434,     0,  1405,     0,     0,     0,  1689,  1531,
    1691,  1471,     0,  1449,     0,  1536,     0,     0,   916,     0,
       0,     0,     0,     0,     0,   946,     0,   967,   906,   926,
     948,   937,  1054,  1528,   921,   923,  1009,     0,   605,     0,
     793,   655,   648,   666,   664,   715,   710,     0,   715,   715,
     675,   693,   670,     0,   777,   683,   674,   695,   698,   700,
     702,   715,     0,   777,   663,   662,   672,   659,   715,   738,
       0,     0,     0,     0,   734,     0,   787,     0,   741,     0,
     628,   731,   733,     0,     0,     0,   696,   777,   652,   785,
     784,   654,   777,   784,   715,   715,     0,   138,   143,   154,
     155,   876,  2624,     0,  2622,     0,  1031,     0,  1084,  1477,
      97,     0,     0,     0,   211,   209,   210,     0,   204,   206,
     201,  2635,     0,  2642,     0,     0,  2640,   433,   436,   545,
     531,     0,     0,  1537,   854,     0,     0,  2270,  1557,  1276,
     724,   722,   725,   723,   773,   772,   776,     0,   775,   784,
       0,     0,  1214,  1209,   695,  1213,  1205,  1210,  1301,  1279,
    1280,  1372,  1363,  1307,     0,  1256,  1332,     0,     0,  1315,
    1286,  1289,  1287,  1292,  1293,  1117,  1117,   597,  2577,  1162,
    1854,  2532,     0,     0,  2528,  2526,     0,  2527,  2525,  2495,
       0,  2450,  2451,  2449,  2436,     0,     0,     0,  1125,   472,
       0,   489,   488,   485,  1542,  1668,  1670,  1676,  1665,     0,
    1516,  1531,   758,  1601,     0,  1119,     0,  1421,     0,  1425,
    1430,  1426,     0,  1417,  1415,     0,  1556,  1459,  1460,     0,
       0,  1465,  1469,  1542,  1537,   919,     0,   622,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   945,  1937,
     935,   967,   903,     0,   908,   567,     0,   792,     0,   797,
     719,   720,   721,   676,   716,   718,     0,   678,   646,   671,
     701,   677,     0,   673,   660,   744,   743,  1132,   736,   751,
     631,     0,     0,   742,     0,   732,   740,   735,     0,   651,
     653,   657,   658,   644,   645,  1970,   145,   889,   285,  2626,
    1100,     0,  2631,     0,  1032,  1028,  1029,  1024,   101,   126,
    2639,  2649,   208,     0,     0,   149,     0,   199,   765,   202,
    2561,   444,     0,   439,   824,     0,   853,     0,   826,   828,
    1558,     0,   783,   781,     0,     0,  1334,  1336,  1445,   598,
       0,  1830,  2501,  2500,  2499,  2496,     0,     0,     0,     0,
       0,     0,  2530,  2534,  1679,     0,     0,     0,   480,     0,
     476,   478,     0,   514,   529,  1524,  1537,     0,  1542,     0,
    1606,  1599,  1440,     0,     0,     0,     0,     0,  1478,  1688,
    1455,  1455,  1466,  1450,  1535,   918,     0,     0,   610,     0,
       0,  1939,  1938,   938,     0,   790,     0,   794,   795,   796,
       0,   788,   717,     0,   860,     0,     0,   750,  1132,   739,
    1125,   748,   747,   745,   746,     0,   147,   311,     0,   297,
     283,     0,     0,     0,   287,   156,   159,   157,     0,   158,
     164,     0,   165,   166,   167,   168,   169,   160,   309,   310,
     163,   161,   162,     0,  1986,     0,  1987,  2629,     0,     0,
    2628,  1027,     0,  1034,   175,   205,     0,     0,   141,   150,
    2643,   749,   437,  1894,     0,  2557,     0,  1673,   113,   825,
     845,   844,   830,     0,  1537,     0,     0,   115,   827,   847,
     834,   117,   829,   846,   832,  1559,   714,  1254,     0,  2497,
    2535,  2538,  2536,  2537,  1560,     0,  2539,  2533,     0,  1884,
    1126,     0,   473,   474,     0,   492,     0,  1673,  1673,     0,
       0,  1673,  1673,  1673,  1673,   507,   515,   517,     0,  1525,
    1526,     0,  1521,  1523,  1517,  1589,   759,  1897,  2564,  1422,
       0,  1427,     0,  1419,     0,     0,  1463,  1461,     0,   616,
     824,   612,   614,     0,   791,     0,     0,   777,     0,   777,
    1133,     0,   737,     0,   146,     0,   139,     0,     0,   296,
     299,     0,     0,   302,   292,   291,   293,     0,   286,   285,
     285,   339,   290,   336,   335,   328,  2561,     0,     0,     0,
    1033,  1038,     0,  1035,  1037,  2650,   207,  1125,   153,     0,
     435,   441,   440,   839,     0,   831,     0,   852,   855,     0,
     835,   833,  1855,  1562,  1561,  1685,  1693,     0,   758,     0,
     481,   480,   477,     0,   490,     0,     0,  1673,  1673,     0,
       0,     0,     0,     0,   487,   516,  1673,  1537,     0,  1108,
       0,  1905,  1441,     0,     0,  1479,     0,  1456,     0,     0,
       0,   618,   824,   611,   826,   828,     0,   803,     0,   802,
       0,   799,   798,   680,   861,   682,  1134,   632,   148,   312,
     323,   326,   318,   298,     0,     0,     0,   288,   285,     0,
     272,   270,   271,   277,   278,   279,   280,   281,   282,   273,
     276,   274,   275,   285,     0,   216,     0,     0,  2630,     0,
    2632,     0,  1030,     0,   185,   184,   176,     0,   285,  2636,
       0,  2644,  2561,   838,   843,   842,   840,   841,   848,     0,
       0,  1885,   468,   475,   500,   493,   496,     0,   526,   520,
       0,     0,   522,   523,   521,   518,   511,     0,   509,     0,
    1522,  1590,     0,     0,     0,     0,  1898,  1900,     0,  1607,
    1424,  1429,  1458,  1457,  1472,     0,   617,   613,   615,   924,
     805,   806,   804,     0,     0,   634,   633,   635,     0,     0,
     285,   319,     0,   294,     0,     0,     0,     0,   214,   342,
       0,   212,   330,   330,  2633,  2634,  1036,   186,  2651,     0,
     155,   175,   442,  1692,  1694,  1911,   500,     0,   498,     0,
     494,   491,   495,   524,   525,     0,   508,     0,   519,     0,
       0,     0,     0,     0,  1899,     0,     0,  1906,  1908,     0,
       0,     0,     0,     0,   639,   629,   636,   638,   320,   326,
     316,   324,   285,     0,     0,   284,   303,   338,   215,     0,
     340,     0,   285,     0,   329,   331,   333,     0,   137,  2645,
       0,  1897,   497,     0,   505,   501,   503,   506,   514,   513,
     510,  1125,  1903,  1904,     0,  1901,     0,     0,  1907,  1464,
    1462,   801,   800,   641,   640,   637,     0,   317,     0,     0,
     315,   295,   300,   285,     0,   285,   227,   226,     0,   218,
     266,   337,     0,   217,  2637,   285,     0,  1905,   499,     0,
       0,   512,     0,     0,  1593,  1595,  1902,  1910,  1909,   321,
       0,   285,     0,   285,     0,   285,     0,     0,     0,     0,
       0,   213,   285,  2646,     0,  1913,   504,   502,  1126,  1591,
    1125,     0,   313,   285,   301,   306,   343,     0,   221,   267,
     268,     0,   224,  2638,  1912,     0,  1917,  1596,  1594,   285,
     285,   302,   305,   341,     0,     0,   219,   220,   232,   231,
     223,     0,     0,     0,  1924,   285,   285,   307,   240,   238,
     285,   228,   236,   230,     0,   237,   269,   225,  1915,  1916,
    1914,  1919,     0,     0,  1921,  1922,     0,  1886,     0,   222,
     239,  1923,  1918,     0,  1925,  1927,     0,   229,  1920,     0,
    1125,  1926,     0,  1126,  1928
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,    58,   606,  1492,    59,    60,    61,    62,    63,  1336,
      64,   816,  1263,  1775,  1776,    65,   543,    66,  1533,  2115,
    2116,  3396,  3397,  2117,   578,   579,    67,  2151,  3100,  3101,
    3102,  1550,   513,   514,  1998,  1999,  1069,  3083,  3026,  3836,
    3030,  3956,  4096,  3998,  2074,  3386,  3837,  3838,  3965,   538,
    2149,  1506,  4125,  1978,  4236,  1979,    68,   641,  1042,  1530,
    1531,  3408,  3409,  3665,  3410,  3657,  3658,  3659,  3660,  4372,
    4208,  4311,  4373,  4448,  4484,  4490,  4491,  4418,  4500,  4501,
    4502,  4488,   888,  4503,    69,   566,   567,   890,  1365,  2393,
    1366,    70,  4419,  4486,  4209,  4210,  4103,  4211,  3968,  4212,
    4107,  4213,  3971,  4214,  4215,  4216,  4217,  4364,  4218,  4102,
    4411,  4205,  4206,  4413,  4465,  4482,  4219,  3978,  4097,  4298,
    3979,  4098,  4359,  4201,  4360,  4406,  4461,  4202,  4299,  4409,
    4302,  4220,  4226,  4374,  4221,  4227,  4222,  3983,  4114,  4225,
    4112,  4224,  4415,  4369,  2649,  3082,   624,   625,   652,  2139,
     626,  1058,  1016,  1508,  2011,  2012,  2512,  2513,  2631,  2632,
    2633,  2003,  2004,  2005,  2127,  2128,  2129,  1985,  1986,  1987,
    1512,  1982,  1983,   627,  1017,  1027,  2006,  2007,  2008,  2637,
    2131,  2132,  2133,  2134,  2009,  1768,  2010,  2914,  2655,  3093,
    3669,  3860,  3418,  4005,  4242,  3094,  3095,  2582,  2977,  2561,
      71,   555,   868,  1333,  2365,  1334,  2797,  2798,  2799,  1819,
    1820,  3739,  1824,  2364,  3898,  4151,  3899,  3900,  2801,  4042,
    2805,  3216,  3217,  3507,  3741,  3903,  4257,  4153,  4331,  4255,
    4327,  4256,  4329,  4430,  4385,  4386,  4164,  4267,  4268,  4335,
    4388,  4055,  4056,  4057,  2384,  2810,  3744,  3671,  2121,  1498,
    1499,   515,   516,   517,   649,  2656,  2060,  2657,  2658,  2994,
    2062,  2063,  2771,  1420,  2990,  2963,  3715,  3089,  2998,  2999,
    3000,  3001,  3002,  4080,  4184,  4185,  4182,  3008,  2930,  2521,
    2522,  2587,  3011,  3368,  3619,  4297,  4355,  4356,  4357,    72,
     865,  3858,  3587,  3602,  3370,  3371,  3372,  3373,  3374,  3375,
    3376,  3118,  3119,  3803,  3804,  3805,  3113,  3114,  3445,  3620,
    3621,  3622,  3859,  3818,  3438,  1387,  1388,  3910,  1398,  1399,
    2415,  1858,  2416,  1502,  3439,  3440,  3441,  3631,  3623,  3010,
    3580,  3796,  3799,  3941,  4191,  2523,  2931,  2524,  2934,   966,
     518,  2525,  2526,  1564,  1565,  4008,  4017,  4021,  4009,  4022,
    4018,  4010,  4011,  4012,  4024,  4020,  2662,  3672,  3673,  2923,
    3181,  3943,    73,  1516,  1010,  1019,  1015,  1034,   636,  1517,
    2075,  2594,  3641,   614,  2064,  3572,  3299,  3576,  2065,  2943,
    2066,  3286,  3558,  2067,  3315,  3574,  3793,  2944,  2945,  2068,
    2069,  2070,  3298,  3307,  3791,  2527,  1315,   126,   127,   632,
     633,   634,  2316,  3006,  2568,    74,  1945,  1944,  1939,    75,
     980,   981,   982,  1465,  1466,  1942,  1943,  2456,  2881,    76,
     644,  1537,    77,  1344,  2376,  2377,  2378,    78,  1035,  1521,
    1522,  2081,  3035,  3392,  3646,  3847,  3993,  3843,  4122,  4123,
      79,    80,   645,  1544,  1545,  1546,    81,  1327,   134,    82,
     876,  1339,  1341,  1342,    83,   640,  1036,  1037,  1038,  1039,
    2083,    84,  1810,  2349,  2350,  2351,  2352,  1527,  2598,  1528,
    1529,  2092,  3209,    85,    86,   603,  2276,   572,   897,   573,
     574,  1852,  2406,  3716,   908,   909,   910,  2836,  1377,  1378,
    1379,  1816,  2841,  3947,  1122,  1119,   781,   782,   783,   784,
    1211,  1212,  3624,   785,  1221,  1734,  3130,  3459,  1596,  1597,
     786,   787,   788,   789,   790,   791,  1761,  3149,  3150,  3473,
    2303,  2304,  2305,   792,  2195,  3136,  2208,   793,  1204,  1719,
    1652,  3465,  3141,  1581,  2171,  2694,  3121,  2768,  2270,  1145,
    1146,  1104,  2178,  1587,  1951,  1952,  1953,  1954,  1955,  3546,
    3545,  3547,  3913,  3758,  3915,  3762,  2468,  1956,  1957,  2883,
    3756,  4068,  2271,  2272,  2273,  3483,  2884,  3266,  2902,  2903,
    3773,  2459,  1958,  2890,  4076,  3770,  3771,  4180,  4179,  3772,
    3551,  3552,  3279,  3280,  3038,  3039,  3040,  3917,  1643,  1644,
    1650,  1310,  1311,  1582,  2346,  2785,  3751,  3907,  2294,  3523,
    3905,  4062,  2071,  2969,  2970,  2408,  2409,  2906,  3283,  3312,
    1423,  3717,  2787,  1911,  2871,  2872,  3427,  4036,  4489,  2915,
    2867,  3018,  1614,  1615,  2976,  4169,  4339,  4433,  4434,  4435,
    3242,  3243,  3527,  3528,  2410,  2833,  3244,  3752,  4067,    87,
     522,    88,  1773,  2309,  1260,  2322,  1046,  1568,  1569,   804,
     535,    89,   544,  2347,    90,   562,  1837,   855,   880,  1347,
    1348,  2385,  2811,  2818,  2386,  2823,  3516,  2813,  3221,  3222,
    2311,  2312,  2814,  3224,  3513,  3497,  3498,  3204,  3736,    91,
     591,  3277,  2897,  2898,  4145,  4146,   881,    92,   521,  1091,
    2160,  1574,  2159,  1092,  1093,  2162,   670,   671,    93,   985,
     587,  1445,  1446,  1447,  1927,    94,   576,   967,  2868,  3260,
    1905,   872,  1256,  1427,   970,  1428,  1891,  2438,  1409,    95,
    1006,  1005,    96,   610,  1494,    97,   817,  1283,  1786,  2775,
    3192,  1284,  1285,  2323,  3881,    98,   563,   885,   886,  1350,
    2388,    99,   557,   873,  1830,   100,   547,   860,  1319,  1809,
     101,   102,   862,  3210,  4148,  4325,   551,  1812,  1323,  3419,
    4171,  4276,  4277,  4279,  4347,  4348,  4381,  4476,  4510,  4494,
    4513,  4514,  4517,  4524,  4525,   795,   993,   796,  3788,   797,
     798,  2819,  2820,  3284,   799,  2821,   800,  2924,  1047,  1571,
     541,   493,   621,   994,  2793,   802,  3985,  1013,  1062,   495,
     496,   103,   575,   924,  1403,  1393,  1402,  1878,  2432,  1882,
    2434,  2435,  3256,  2859,  3257,  2860,   972,  1874,  1879,  2861,
     927,  1867,  1868,  1869,  1870,  2852,  1864,  1888,   104,   863,
     500,  1325,  1326,  2358,   105,   590,   106,  1312,  1803,  1804,
    2343,  2784,  2344,   107,   893,   108,   842,  1797,   843,  1288,
     844,   845,  1302,  1296,  1305,  1299,  3886,  3728,  3729,  2331,
    1259,  1063,  2143,  3076,  1064,  1789,  2325,  2326,  3492,  3731,
    3195,  3892,  3893,   109,   135,   503,   647,  1053,  1371,   110,
     111,   112,   113,  1374,  1487,  2402,  1488,  2277,  1489,  1490,
    1965,  1850,  1715,  1716,  3179,  1201,  1202,  2280,  2744,  2745,
     911,   656,  1079,  1071,   128,   129,   130,   659,   660,   131,
    1032,  1033,  2595,  3032,  3388,  3644,  3645,  3842,  3990,  1073,
    3854,  4319,  4452,  1074,  1075,  3084,  3856,  4129,  4321,  4425,
    1076,  2646,  3405,  3994,  4238,   114,   995,   600,  1485,  1480,
    1482,  1961,  2475,   115,   116,   117
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -3734
static const int yypact[] =
{
    4645,  2650,   104, -3734,  -127,   784, 50665,   770,  1192,  1192,
     486,  3190, -3734, -3734, -3734, -3734, -3734,  3008, -3734, 50665,
     104, -3734, 24970, -3734, -3734,   -44, -3734,   194,  1192,   104,
     571, -3734, 50665, -3734,   779,  1459,   104, -3734, -3734, 45166,
   -3734,   486, 50665, -3734, -3734, -3734, 45166,  -127,   244,   380,
     745,   -34, -3734, -3734, 50665,  1873, -3734,  -122,  1375,  1233,
   -3734, -3734,  1111, -3734, -3734, -3734, -3734, -3734, -3734, -3734,
   -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734,
   -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734,
   -3734, -3734, -3734, -3734, -3734, -3734, 25585, -3734, -3734, -3734,
   -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734,
   -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734,  1455, 50665,
    1473, 50665,  1420, 50665, 43333, 50665,  1093,    99,  1475, -3734,
   -3734,  1554, -3734, -3734,  1192,   486, -3734, -3734, -3734, -3734,
   -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734,
   -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734,
   -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734,
   -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734,
   -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734,
   -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734,
   -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734,
   -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734,
   -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734,
   -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734,
   -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734,
   -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734,
   -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734,
   -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734,
   -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734,
   -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734,
   -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734,
   -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734,
   -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734,
   -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734,
   -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734,
   -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734,
   -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734,
   -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734,
   -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734,
   -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734,
   -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734,
   -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734,
   -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734,
   -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734,
   -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734,
   -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734,
   -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734,
   -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734,
   -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734,
   -3734, -3734, -3734, -3734,  1073, -3734, -3734,  -127, -3734, -3734,
   -3734, -3734, -3734,  1668,  1514, -3734,  1536, 43333, -3734, 50665,
   -3734, -3734, -3734,   230, -3734,  1220, -3734,  1239,  1551,  1562,
    1567,    85, 11844,  1577,  1577,  1577, 50665,  1611,  1577,  1577,
   50665, -3734,  1577, -3734,  1577,  1192, -3734, -3734,  3542, 50665,
    1451,   175,  -111, 43333,  1121, 50665,  -127,    59, -3734,  1598,
   -3734, -3734, -3734,  1192, -3734,  1817,  1658,   235, 50665, -3734,
   -3734,  1192,  1333,    24,  1283, -3734, -3734,  1388, -3734,  3848,
     183, -3734, -3734, -3734,  2450, 27430,  5657,  1388,  1470, -3734,
   -3734,  1407,  -127,  -109,  1413,  -127, -3734, -3734, 50665,  -127,
    1192,  1629, -3734, -3734,   121,   121,   121, -3734,   121, -3734,
     121, -3734,  -122,  1291, -3734, -3734,  1295, 50665,   594,   856,
   -3734, -3734,  1306,   -54, -3734,  1366, 40278, -3734, 50665, -3734,
   -3734, -3734, -3734,  1585, -3734, -3734, -3734,  2738, -3734, 24970,
   -3734, -3734, -3734,    99, -3734, 50665,  1494, -3734, -3734, -3734,
   24970,  1376, 50665,  1466, 24970, 24970,   201,    29,  1354, 50665,
   50665,  1834, -3734,  2029, 40278,  1614, -3734,   253,  1454,  1554,
    2040, -3734,  1514, -3734, 50665, 50665, 50665, -3734, -3734, -3734,
   45777,    85,  1431,  1436,  1480, 16908, -3734,  1484,  1487,  1490,
   11844,  1498,  1500,  1524,  1527,  1534,  1545,  1559,  1563,  1574,
    1583,  1591,  1596,  1635,  1652,  1652,  1679,  1683,  1686,  1691,
    1767,  1695, -3734,  1699,  1703,  1711, -3734, -3734,  1716,  1727,
    1737, -3734,  1740,  1752,  1757, 12477,  1770,  1777,  1786, -3734,
   21886,  1789,  1805,  1820,  1824,  1837,  1848,  1855,  1859,  1863,
   -3734, -3734, 11844,  1679, -3734, -3734,  1865, -3734,  1872,  1876,
    1881,  1884,  1892,  1922,  1926,  1948,  1957,  1962,  1982,  1985,
    1996,  2009,  2015,  1679, -3734,  1821,  2017,  2027,  1885,  2033,
   -3734,  2041, -3734,   217,  2054,  1652,  1679,  1679,  2067,  2072,
    2080,  2103,  2109, 16908, 16908, 16908, 11844, -3734, 50665, -3734,
   50665,   887,  2688, -3734,  2315, 16908,   973, -3734, -3734, -3734,
   -3734, -3734, -3734, -3734,  1599,  1561, -3734, -3734, -3734, -3734,
   -3734,  2111,  1486,  2038, 50665, 50665, 50665,  1899, 50665, 50665,
   43333,  1712, 50665, 40278, -3734,  1577,  1671,  4659,  1932,  1788,
    2061, -3734, -3734, -3734, -3734, -3734,  2075, -3734, -3734,  1949,
   -3734,  2069, -3734, -3734,   148, -3734,   254, -3734, -3734, -3734,
   -3734, -3734, -3734,  2367,  1771, -3734, -3734,   127, -3734, -3734,
   50665, -3734, -3734, -3734, -3734,  2518,  2256, -3734, -3734, -3734,
     861,  2704,   185, 24970, -3734,  2126, 11844,  1706, -3734,  -186,
   -3734, -3734,  2484, -3734, -3734, 40278, 24970, -3734, -3734, -3734,
   22503, -3734, -3734,  2718, -3734,  2138, -3734, -3734,  1561,  3050,
   -3734,  1932,  2422, -3734,  2426,  2334,    29,  2228, -3734, -3734,
   -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734,  2182,  2450,
   -3734, -3734,   405,  2341,  2171,   473,   493, 36612,   836,   768,
      46, 28044, 37223,  2174, -3734, -3734, -3734,   818,  2352, -3734,
    2653, -3734, -3734,    45, -3734,  2211,   718,    45, 40889,  2596,
     195, -3734,   131, -3734,  2675, -3734, -3734, -3734, -3734, -3734,
    2354,  2343, -3734, -3734,   381,  2601, -3734,  -127, -3734,   722,
   -3734, -3734,  2364, -3734,  2596,    45,   195, -3734,  2599,  2723,
     520,  2697,  -147, -3734, -3734, -3734, -3734, -3734,   -94,  2805,
   -3734,  2267, -3734, -3734, -3734, 24970, -3734, -3734, -3734,  2518,
   -3734, -3734, -3734,  2269, -3734,  2536,  2375, -3734, -3734,    22,
   -3734,  2277,   827,  2753, -3734,   898, 41500, -3734, -3734, -3734,
    2784,  2800,  1652,  2278, -3734, -3734, -3734,  2909, -3734, -3734,
    2290,  2811,  2811,  2811,  2928, -3734, -3734, -3734, -3734, -3734,
   -3734,  2469,  2350, -3734,  1494, 24970,  2714,  2326, -3734, -3734,
    2570, 11844, -3734, -3734, -3734,    14, -3734, -3734,   125, -3734,
    2903,  2528, -3734, -3734, -3734, -3734,  2792, -3734, -3734,  2909,
    2851,  2811,  2744,  2339, -3734, -3734, -3734, -3734, -3734, -3734,
     213, -3734, -3734, -3734, -3734, -3734, -3734, -3734,  1432, -3734,
   -3734, -3734, -3734, -3734,  1494, -3734, 24970, -3734, -3734, -3734,
   24970, -3734,  2344, -3734,  2342, -3734, 11844, 11844,   322,  2907,
    2962,  2962,  2962,   887,  2377, 11844, 11844, 11844, 11844, 11844,
   11844, 11844, 11844, 11844, 11844, 11844, 11844,   325,  2360, -3734,
   -3734,  1467, -3734,  2362, 11844, 11844,  2442, 11844,  1561, 11844,
   26200, -3734,  3476, 11844,   436,  2857, 11844, 11844, 11844, 11844,
    2532, 11844, 11844, 11844, 26200,  2990,  2371, -3734,  2366,   326,
   11844, 11844,   343, 11844, 11844, 11844, 11844, 11844, -3734, -3734,
   11844, 11844, 11844, 11844, 16908, 11844, 11844, 11844, 11844, 11844,
   11844,  2962,  2962, 11844, 11844,  1248, -3734, 11844,  1561,  2448,
    2448, 11844,  1561,  8679, 11844, -3734, -3734, -3734,  2374, -3734,
   -3734, -3734, 26200,  2962,  2962, 11844, 11844,  2907,  2907,  2907,
     257,  2378,   916, 11844, 28658,  2373, -3734, -3734, -3734, -3734,
   11844, 11844, 11844, -3734, 16908, -3734, -3734,  2140, -3734, -3734,
   -3734, 13110, 16908, 16908,  2382, 16908, 16908, 16908, 16908, 16908,
    2747, 16908, 16908, 17541, 18174, 16908, 16908, 16908, 16908,  1086,
    2907, 43333, 16908, 11844, -3734, -3734, 50665, -3734, -3734, -3734,
    2376, 24970,  1712, -3734, -3734,   699,  2859, -3734, -3734,  2384,
   24970, -3734,  2383, -3734,  2741, -3734, -3734,  2743,  2746,  2749,
   -3734, -3734, -3734, -3734, -3734,  2979,  2754, -3734,  -127,  2764,
   -3734, -3734, -3734, -3734,  2411, -3734, -3734, -3734, -3734, -3734,
   -3734, -3734,  2519, -3734, -3734, -3734,  2423, -3734, 40278,  2423,
   -3734, -3734,  2423, -3734, -3734,  2423,    81,  3684, -3734, -3734,
   50665, -3734, 51276, -3734, -3734, 22503,  -127, -3734, -3734, 13743,
   -3734, -3734, -3734,  2787,   160,  2429, -3734, 24970, -3734,   887,
   -3734,    83,    83,  2674,   206, 43333, -3734, -3734,   130,  2431,
    2513,  2436, -3734,  2523, 24970, 24970, -3734, -3734, -3734, -3734,
    -127,    24, -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734,
   -3734, -3734, -3734, -3734, -3734,  2444,  2916,  2451, 40278,   769,
   -3734, 50665, -3734,  1298, -3734, -3734, -3734,  2455, -3734, 11844,
   -3734, -3734, 50665, -3734, -3734, -3734, -3734, -3734,  3019, 11844,
   -3734, 40278,   -48,   801,   738,   818, -3734, -3734, -3734, -3734,
   -3734, 50665, 46388,  2462,  9312,  2584,  2865,  -127, 11844, -3734,
    2475,  1514, 50665, 50665, 50665, 24970, 50665, 24970, -3734,   717,
     717, -3734, 37834, -3734, -3734, -3734, -3734,    45, 50665, 50665,
      45, 40278, -3734,   195, 50665,    45, -3734,  2866,  2580, -3734,
   -3734, -3734,  2931, -3734, -3734,  2922,  2481, -3734,  2947, -3734,
   -3734,  2605,   195, -3734, -3734, 24970, -3734, -3734,   195, -3734,
     195,   195, 11844,    45,    45, -3734,  1029, -3734, -3734, -3734,
   -3734, -3734,  2631,  -109, -3734, -3734, -3734,  1038,   121,  2729,
   -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734,
      76, -3734, -3734, -3734, -3734, -3734, -3734, -3734,    90, -3734,
   -3734, -3734,  2074,  2985, -3734, 43333,  2717,   -98,   753,  2717,
    2472,  -127,  1736, -3734,  1736, -3734,  3740,  2767,  1159, 24970,
   -3734,  2504, -3734,  2750, 46999, 24970, -3734, -3734, -3734,   172,
    2515,  2520,   887,  4045, -3734, -3734, 24970, -3734, -3734, -3734,
   -3734,  2567, -3734, -3734, -3734, -3734,  1383, -3734, -3734, -3734,
     170,   863,  2547,  2575,   219, 40278,  2966, 50665, 50665,  1514,
   50665, 50665, -3734, -3734,  -168,  2803,  2804,  2807,  2539, -3734,
   -3734, -3734,  -211, 50665,  2976, 31724, -3734,   346,   344, -3734,
    2962,  2541, -3734,  2542,  2543,  2548, 11844,    52,   776,   458,
    1481,  1340,   502,   355,   901,   378, -3734,  1441,   392,   667,
     737,   216, -3734,  2549,  2553, -3734, -3734, -3734, -3734, -3734,
   -3734, -3734, -3734,  2554, -3734, -3734, -3734,   771,   833,  1053,
    1099,  2557,  2558, -3734, -3734, -3734, -3734, -3734, -3734, -3734,
   -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734,
   -3734, -3734, -3734,  2992, -3734,  1445, -3734, -3734, -3734, -3734,
    2562, -3734, -3734,  1154,   851,   877,   315,  2571,  1463,   892,
    1528,  1560,  2569, 26200, 50665,  2962,  2573,  1179,  1199,  2962,
    2574,   907,  1240,  1564,  1606,  1619,  1254,  1267,   974,  1624,
    3520,  1285,   998,  1016,  1065,  1080,  1303,  2577,  2578,  1082,
     223,  2962,  2579,   367,  2566,  2581,  1307,  9945, 10578, 11211,
     305,  1087, -3734,  2583, -3734,  2366,  2585,  2593,   372,  1316,
   -3734, 11844, -3734, -3734,  1003,  1214,  2639,   212,   738, -3734,
    2739, 50665,  2268,   228, -3734, -3734, -3734, -3734, -3734, -3734,
    1118, -3734,  2597, -3734,  2604,  1983,  2603, 11844,  1048,  2603,
    2413,  2361,  2361, 16908,  1666,  2594, 12477,   982, 12477,   982,
    2603,  2603,  2603, -3734, 16908,  2606, 16908, 16908, -3734,  2907,
     887,  2611,  1137, 50665, -3734,   699, -3734, -3734, -3734, -3734,
     818, 40278,   113, 24970, 43333,  2614, -3734, -3734, -3734, -3734,
   -3734, -3734,  -127, -3734, -3734,  4769, 24970, -3734, 50665, -3734,
    2683, -3734, -3734, -3734, 23118, 23118, -3734, 23118, -3734, -3734,
     810,   843,  3327,  2638, -3734, -3734, -3734, 31111,   887, -3734,
   24970, -3734,  3025,   -36, 24970,  2625, -3734,  2630, -3734, -3734,
   -3734, -3734, -3734,  1017,  2740, -3734,  2632, -3734, 11844,  -127,
   -3734, 40278, 40278, 24970, 24970,    47, -3734,  1397,  3248, -3734,
    3050, 18807,  3061,  3073, 23118, 23118, 23118, -3734, -3734, -3734,
   -3734, -3734,  1464,   887, -3734,  2629, -3734, 42111, -3734,   887,
     818,  2642,  2644, -3734, -3734,  3004,   -79, -3734,  2637,  2646,
   -3734,  2641,  2643,  2648, 47610, 11844, -3734,   801, -3734, -3734,
     818, -3734, -3734, -3734, 16908,  1699, -3734,   887, -3734, -3734,
    -127,  3095, -3734,   887,  2657, 50665, -3734, -3734, -3734, -3734,
   -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734,  3119,
   -3734,  2834,  -102, -3734, -3734, -3734, -3734, -3734, -3734, -3734,
      45, -3734, -3734, -3734, -3734, -3734,  2879,  2596,  2601,  2865,
   -3734,    45,   195, 24970,    45,    45,   887, -3734, -3734,  2716,
   -3734, -3734,  2665, -3734, -3734,  2716, -3734, -3734, -3734, -3734,
   50665,  2220,  2823, -3734,  2667, -3734, -3734, 24970, -3734,  2668,
   -3734,  3115,  3258,  2596, -3734, -3734, -3734,   818,   818,  2968,
   -3734,  -127,  2809,  2810,  2814,  2815,  2816,  2845, -3734, -3734,
    -127,  -127, -3734, -3734,   818, -3734,   988, -3734, -3734, -3734,
   -3734,  -127,  -127,  -127,  -127,  2709,  -127,  -127,  1673, -3734,
   -3734,   818,   818, -3734,  1221, -3734, -3734, -3734, -3734, -3734,
   -3734, -3734,  1036, -3734,  2337,  3229,  2934,   818,   818,  3229,
     818,  2935,  2936,   818,   818,  2775,  3192,   818,  3080,  2802,
    1665,  3081,   818, -3734,  2806,  3202,   818,   818,   818,   818,
    3229,  2951,  3294,   818,   818, -3734,   818,  2958,  2972,   129,
    2971,  2975,   818,   938, 50665,   818,   818,  2977,   818, -3734,
   -3734,  5751, -3734, -3734, -3734, -3734, -3734, -3734,   686, 23736,
   -3734, -3734,   818,   166, -3734,  2919, -3734, -3734, -3734, 24970,
    3171, -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734,
   -3734,  2735, -3734, -3734, 11844,  3206,  3207,  3210,  3213,  3214,
    3215,  3216,  3217,  3219,  3227,  3231,  3232,  3234,  3235,  3236,
    3239,  3242,  3243,  3245,  3249,  2777, -3734, -3734, -3734, -3734,
   -3734, -3734,   200,   818,   818,   818,   818, -3734,  2568, -3734,
   -3734, -3734, -3734, -3734, -3734, -3734, -3734, 43333,  3134,  2085,
     785, -3734, -3734, 43333, -3734, 50665, -3734,  1552, 50665,  2782,
    -148,  4918,   912,   912, -3734, 24970, 24970, 24970, 50665,  2828,
    2638, 31724, -3734, -3734,  1038, -3734,  2786, 14376, -3734,  2789,
   -3734, 11844, -3734, -3734, -3734,   804, 11844, 11844,  3260,  1843,
   -3734, 42722, -3734, -3734, -3734, 11844, -3734, 11844, -3734, 11844,
   11844, 11844, 11844, 42722,  1843, 11844, -3734,  2791, -3734,  3186,
    3187, -3734, -3734, -3734, -3734, 11844, -3734, 11844, 11844, -3734,
   11844, 11844, 11844, 11844, -3734, 11844, -3734, -3734, 16908, -3734,
    2790,  2798, -3734, -3734, -3734,  2812, -3734, 11844, -3734, -3734,
   -3734, -3734, -3734, -3734, 11844, -3734, 11844, -3734, 11844, 11844,
   11844, 11844, -3734, -3734, -3734, 15009, 11844, 11844,  2813, -3734,
   -3734, 11844, 11844, 11844, -3734, 11844,   299, 11844,  1747, 11844,
    1908, 11844, -3734, 11844, -3734, -3734, -3734, -3734, 11844, -3734,
    1708, -3734, -3734,  1580, -3734,  1003,  2819, -3734, -3734,  1298,
   -3734, -3734, 43333, 11844, -3734, -3734, -3734, -3734, -3734, -3734,
   16908,   374,  2821, 16908, -3734,  2413,  2532,  2532,  1997, 11844,
    1048,  2413, 11844,  2822,  2826, -3734, 11844, 50665, -3734, -3734,
   -3734, -3734, 43333, -3734, -3734, -3734, -3734,   113, -3734,  2383,
   -3734, -3734,  2625, -3734, -3734,  1749, -3734, 40278,  2796, -3734,
    2825,  2884,  2890,  2893, -3734, -3734, -3734, -3734, -3734, -3734,
   -3734, -3734, -3734, -3734, -3734, -3734,  2596,  1397, -3734, -3734,
    2832, -3734, -3734,  2570,  2906,  2848,  3197,  3383, -3734, -3734,
   50665, 16908, -3734,  3425,  2847,  2850, 50665,   887, -3734,  2932,
   -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734,   780, -3734,
   -3734,  2855,  2855, 20654, -3734, -3734, -3734, -3734, -3734,  3325,
     826,   826,   826, -3734, -3734, -3734, -3734,  3117, 40278,  3297,
    3299,  3300,   898, -3734,    36, -3734,  1171,  3253,  2596, -3734,
    3302, 43944, -3734, 32335, -3734, -3734, -3734, -3734,   -48,  2955,
    2956,  1617, -3734, -3734,  3251,  3082, -3734, -3734, -3734,   818,
     887, -3734,  2462,  9312,  2867, 29272, -3734,  2217, -3734,   281,
   -3734, 38445,  3333, 38445, 38445, -3734,  3146, -3734, -3734,  3095,
   -3734,  2638,   195, -3734, -3734,  1676, -3734,  1029, -3734, -3734,
    1060,  3261,  3262, -3734,  3138,    39,  3138,  1060,  1060, 26200,
    1038,  2254, -3734,  2709,  3193, -3734, -3734, -3734, 42111, 39056,
   -3734, -3734, -3734, -3734,  3404, -3734,  3405,  1492, -3734, -3734,
    2589,   753, -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734,
   -3734, -3734, -3734, -3734, -3734, -3734, -3734,  2472,  2589,  2589,
    1736, -3734,   144, -3734, -3734, -3734, -3734, -3734, 26815,   104,
   -3734,   408, -3734, 26815, -3734,   172,   172, -3734, 26815,   104,
    2217,  2709, 26815,  2709, 48221,   104,  -127,  -127,  2237,   818,
    2709, -3734, -3734,  3267, 50665,  3269, 26815, 26815, -3734, 43333,
   -3734,   818,   114,  2709,  2217,  2217, 26815,   104, 26200,  1608,
    2793, -3734,  -127,   104, -3734, -3734, -3734, -3734, 24970,   104,
     104,  3168, -3734, -3734, -3734,  2709,  2793, 48221, -3734, -3734,
    5781, -3734, -3734, -3734, 20039, 50665,  1153,   147, -3734,  2886,
   34779,    19,   996,  2974,  1353,  2897, -3734,  1006,  2898, 48832,
     887,  2899,  2709,  -127,  -127,  2217,  -127,  2709,  -127,  -127,
    -127,  -127,  -127,  -127,  -127,  2709,  2709,  -127,  2303,  -127,
    2709,  4045,  -127,  1017,  2589,  2589,   863, -3734,  3161,  3326,
     818, -3734,  2100, -3734, -3734, -3734, -3734, -3734, -3734, -3734,
   -3734, -3734,  2991, -3734,   174,  3083,  2905, -3734, -3734,   959,
   -3734, -3734,  1547, 24970, 19424, -3734,  3147, -3734,  4384, -3734,
   -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734,  2900,  1038,
    3164,  1351,  2638,  2914, -3734, 12477,  1320, -3734,   887, 11844,
     887,  1587, -3734,  2911,  2911,  2911, -3734,  2912, -3734, -3734,
    2911,  3303,  2911,  3306,  2917,  2920,  1754,  1578, -3734,  1758,
    1815,  1377,  2927,  2929,  1599, -3734, 11844, 11844,  1401,  1472,
     -86,  1097,  1110,   415, -3734,  1531,  3559, -3734, -3734,  1542,
    1549,  1568,  1601,  1112,  1623,  1764, 12477,  1627,   334,   471,
   -3734,  1632,  1127,  1140,  1637, 11844,  1644, 11844,  1707, 11844,
    1729,  1733,  1743, -3734,  2182,  1580, -3734, -3734,  2930, -3734,
   -3734,  2915,   887,  2937, -3734, -3734, 11844, -3734,   973, -3734,
   -3734, 16908,   524,  2940, -3734,   887, -3734, -3734,  2941,  1599,
   -3734, -3734, -3734, -3734, -3734,  2943, -3734, 50665,  -229,  2918,
   32946, 40278, 40278, 40278,  2950, 11844, -3734, -3734,  3196, 24970,
   -3734,  3337, -3734, -3734, -3734, -3734, -3734,  2946,  2949, -3734,
   -3734, -3734,  2413,  3295,  3175, -3734, -3734,  2961, 40278, -3734,
    2450, 26200, -3734,  2954, -3734,  2954,  1290,  2963,  1773, -3734,
   -3734, -3734,  2964,  2228, 18807,  3397,  2384, 40278, 40278, 40278,
   -3734,  2638,  2638,   136,  3021,  3358, -3734, -3734, -3734, -3734,
   49443, -3734, -3734, -3734, -3734,  1272, -3734,  2973,  2982,   284,
    3185, -3734, -3734, -3734, -3734,  9312, -3734, -3734, -3734, -3734,
   -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734,  2596, -3734,
   -3734, -3734, -3734, 38445, -3734, -3734, -3734, -3734, -3734,    45,
   -3734,  2983, -3734,  -176,  1214, -3734,   245, -3734, -3734, -3734,
    3356,  1060,  3138,  3138,  3359,  3247,   -81,  2984, -3734,   818,
   -3734, -3734, -3734,  2450, -3734, -3734, 11844, -3734, -3734, -3734,
   -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734,
   -3734,  1036, -3734, -3734, -3734, -3734,  2987,  3366,  3367,   172,
   -3734, 26815, -3734, -3734, 26815, 26815,   110, 48221, -3734, -3734,
   -3734, -3734, -3734, -3734,  2989, -3734, -3734,  1017, -3734, -3734,
   39056,  -127, -3734, 26815,  2989, -3734, -3734,   153, -3734,  -127,
   -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734, 48221,  2993,
   -3734,   308, -3734, -3734, -3734, -3734, -3734,  1817, -3734, 48221,
   -3734, -3734, 48221, -3734, -3734, -3734, -3734, -3734, -3734, -3734,
   -3734, -3734, -3734, -3734,  2997,  2506,   169, -3734,  2998,  2996,
   -3734, -3734, -3734, -3734, 50665, -3734, -3734, 24970, -3734, -3734,
   -3734,  6254, 50665, -3734, -3734, -3734, -3734, -3734, -3734, -3734,
   -3734, -3734,  3221, -3734, 11844, 11844,  3270, 50665,  3271, -3734,
    3541, 50665,  3610, -3734,   138, -3734, 48221, -3734,  3005, -3734,
    3003, -3734,  2709, -3734, -3734, -3734, -3734, -3734, -3734, -3734,
   -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734,
   -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734,  3007, 50665,
    2589,  2085, -3734, -3734, -3734, -3734,  -127,  1547, -3734, -3734,
   -3734, -3734,  3276,  3277, 50665, -3734, -3734, -3734, -3734,  3150,
   -3734, 24970,  3595, -3734,  3177, -3734,  3015,   231,  6121, -3734,
    3017,  3018,  3020, 31724,  2638,  3382, -3734, -3734,  2532, -3734,
     887, 11844,  1027, -3734, -3734,   319, -3734,  1100, -3734, -3734,
   -3734,  3022, -3734, -3734, -3734, -3734, -3734, -3734, -3734,  3132,
   -3734, -3734,  1843, -3734, -3734, -3734,  3024,  2532,  2532, -3734,
   -3734,  3184, -3734, 11844, 11844, -3734, 11844, -3734,   218,  3027,
    3049, -3734, -3734, -3734, -3734, 11844, -3734, -3734,  2532, -3734,
   11844, -3734, -3734, 11844, -3734, 11844, 11844, -3734,  1761, -3734,
    1794, -3734,  1796, -3734, -3734, -3734,  2455, -3734, -3734,   916,
   50665, -3734, -3734,  1782, -3734, -3734, 11844, -3734, 43944, -3734,
   -3734,  3246, -3734, -3734,  3457, -3734, -3734, -3734,  -131,  -131,
    -131, 15642,   887,  3517, -3734, -3734, -3734,  3337,  3406, -3734,
      82, -3734, 50665,  3036,   831, -3734,  1792, -3734, -3734, -3734,
    2182,  3037, -3734,   818, 15642,  2855,  3177, -3734, -3734,  1290,
   26200, 32335, -3734, -3734, 40278,  2384,  2384,  2384,  2596,  3463,
    2906,  2906, -3734, 29886, -3734, -3734,  3199, -3734, -3734, 33557,
   -3734, -3734, -3734, -3734, -3734, -3734, 29272, 47610, -3734, -3734,
    2596, -3734,  1676,  1298,  3421, -3734,  1038, -3734,  1060, -3734,
    3420,  3423,  1060, -3734, -3734, -3734, 26200,  2638, 15642, -3734,
      11,  2182,   887,  3046,   308, -3734,   568, 11844, 26815, -3734,
   -3734, -3734,  3051, -3734, -3734,  3556,  3558, -3734, 26815,  1383,
   50665, -3734,  3019, -3734, -3734, -3734, -3734,  6254, -3734, 26200,
   -3734, -3734, -3734, -3734, -3734, 50665, -3734, 24970, -3734, 20039,
   -3734,  3059, -3734,  2911,  2911,  2911, -3734, -3734, -3734,  2911,
   -3734,  2912,  3291, -3734,  2912,  2912, -3734, -3734, -3734, -3734,
   -3734,   319,  2163, -3734, -3734,   319, -3734, -3734, -3734,   192,
     979,  2912, -3734, -3734, -3734, -3734, -3734, -3734, -3734,  2911,
    2911,  2911, -3734, -3734,   319,  2911, -3734,  2911, -3734,  3105,
   -3734,   270,   118,  2911,  2911,  2911,  3022,  3053, -3734,   887,
    2532,  3606, -3734, -3734,  3218,  -127,  3555, -3734,  1816, -3734,
   -3734, -3734,  3474,  3074, -3734, 48832,  1840, -3734, -3734,  2472,
   -3734, -3734, -3734, -3734,  3220,  1063, -3734,  3244,  3077,  3079,
   -3734, -3734,  -127,  3084,  3085, -3734, -3734, -3734, -3734,  3694,
   -3734, 50665, 50665, 50665,  2786, -3734, 39667, -3734,   727,   887,
    3086,  3089,  3096,  3099,  3696,   165, -3734,  3697, 42722, -3734,
   -3734, -3734,  1852,  3375, -3734, -3734,  2911, -3734,  2912, -3734,
   -3734, -3734,  3673, -3734, -3734,  2911,  3496,   319, -3734, -3734,
    3107, -3734,  3108,  3109,   121,  3110,  1802,  1168,  1868,  3414,
    3488, -3734,  3331, -3734,  1806,  1255,  1825,  1850,  1870,  1874,
   -3734, -3734, -3734,  1371,  1214, -3734, -3734,  1888, -3734,  3470,
    3378,  1634,  3143,  3143,  3143,  1699,   887,  1901, -3734, -3734,
   -3734, -3734,  3511, -3734, -3734,  3122,  3123, 50665, -3734,  3175,
    2455, 26200, 15642,  3124,  3125, -3734,   827, -3734, -3734,  3120,
    2384, -3734,  3711,  3550, -3734, -3734, 43333,  3133, -3734, -3734,
    3438, -3734, -3734, -3734, -3734, -3734, -3734, -3734,  2667,  2978,
    3183,  1060,  1060,  3204,  3189, 11844, 11844,  3140, -3734,  3164,
   -3734, -3734,   819,  2455, 11844, -3734,  1017,  3175, -3734,  1894,
    3149,  3151, 50665,  3155,  3156, -3734,  3159,  1153, -3734, -3734,
   -3734, -3734,   104, -3734, -3734,  2989,   780,  3157, -3734, 50665,
    3475, -3734, -3734, -3734, -3734,  1522, -3734,  3160,  1522,  1522,
   -3734,  2341, -3734,  3195,   319, -3734, -3734,  3200, -3734, -3734,
   -3734,  1522,  3162,   319, -3734, -3734, -3734, -3734,  1522, -3734,
   43333,  -127,  2540,  3774, -3734,  3226, -3734,  3665,  3554,  3775,
   -3734,  2485, -3734,  3560,  3452,   818, -3734,   319, -3734, -3734,
    3776, -3734,   319,  3776,  1522,  1522, 50665, -3734, -3734, -3734,
   -3734, -3734, -3734, 50665, -3734,  1077, 50665,   141, -3734, -3734,
   -3734,  2709,  1903,  -127, -3734, -3734, -3734,  3181,  3182, -3734,
   -3734, -3734,   996, -3734, 50665,  6254, -3734, -3734, -3734,  5751,
   -3734,  1102,  1905,   308,  3191,  1928,  1933,  3647,  3362, -3734,
   -3734, -3734, -3734, -3734, -3734, -3734, -3734, 42722, -3734,  3776,
    3462,  3201, -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734,
   -3734, -3734, -3734, -3734, 11844, -3734, -3734,  3497,  3650, -3734,
   -3734, -3734, -3734, -3734, -3734,  1171,  1171, -3734, -3734, -3734,
    3809, -3734,  3287,  3290, -3734, -3734,  3293, -3734, -3734,   134,
    1732, -3734, -3734, -3734, -3734, 15642,  3579,  3301, -3734, -3734,
   50665,  3252, -3734, -3734,  1371, -3734, -3734, -3734, -3734, 11844,
   -3734,  3164,  2237, -3734, 29886, -3734,   916, -3734,  3257, -3734,
   -3734, -3734,  3259,   887,   887, 50665,  3382, -3734, -3734,   172,
     172, -3734,   819,  1371,   308, -3734,  1937, -3734, 50665, 50665,
    1942, 50665, 50665,   826,   826,   826,  2303,  2303, -3734, -3734,
   -3734,  1153, -3734,  3597, -3734, -3734,  1965, -3734,    68,  3472,
   -3734, -3734, -3734, -3734,  1522, -3734,   121, -3734, -3734, -3734,
   -3734, -3734,   121, -3734, -3734, -3734, -3734,  3208, -3734, -3734,
   -3734,  3491,  3255, -3734,  3223, -3734, -3734, -3734, 35390, -3734,
   -3734, -3734, -3734, -3734, -3734, -3734,  3340, -3734, 56775, -3734,
   -3734,  -122,  3240,  2001, -3734, -3734, -3734, -3734, -3734, -3734,
   -3734, -3734,  1258, 50665, 24970,  3270,  3407, -3734,  3019, -3734,
     827,  3147,  3177, -3734,  1245, 50665, -3734,  3498,   184,  1273,
   -3734,  3688, -3734, -3734,  3228,  1912, -3734, -3734, -3734, -3734,
    3725, -3734, -3734, -3734, -3734, -3734,   152,  3494,  2709,  2709,
    2709,   631,  1732, -3734, -3734,  3286, 24970, 16908,  3347,  2004,
   -3734, -3734,   156,  2933, -3734,  1461,   308, 11844,  2596, 39056,
   -3734, -3734, -3734, 11844,  3250, 11844,  3254,  2006, -3734, -3734,
    3680,  3680, -3734, -3734, -3734, -3734,  2010,  2050, -3734,  2058,
    2062, -3734, -3734, -3734,  3256, -3734, 50665, -3734, -3734, -3734,
      63, -3734, -3734,  2073, -3734,  2088,  1790, -3734,  3208, -3734,
   -3734, -3734, -3734, -3734, -3734, 11844,  3716,  3272, 50665,   126,
   -3734, 57997, 57997, 50665, -3734, -3734, -3734, -3734,  2994, -3734,
   -3734,   -14, -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734,
   -3734, -3734, -3734,  3841, -3734,  3238, -3734, -3734,  3264,  1380,
   -3734, -3734, 50665, 50054, -3734, -3734,  6254,  3692,  1353, -3734,
   -3734, -3734, -3734,   231,  3274,  2228,  -127,   818, -3734,  1245,
   -3734, -3734, -3734,   818,   308,  3275,  3499, -3734,   184, -3734,
   -3734, -3734,  1273, -3734, -3734, -3734, -3734, -3734,  3827, -3734,
   -3734, -3734, -3734, -3734, -3734,    66, -3734, -3734, 26200, -3734,
   -3734,  1017, -3734, -3734, 50665, -3734,  3349,   818,   818,  3761,
    3763,   818,   818,   818,   818,  3273,  2933, -3734,  3742, -3734,
   -3734, 11844, -3734, -3734,   887,  3502, -3734,  3828,  1214,   887,
   50665,   887, 50665, -3734, 50665,   983, -3734, -3734,  3483, -3734,
    1245, -3734, -3734,  3175, -3734,  1089,  1089,   319,   121,   319,
   -3734,  3279, -3734,  3280,   887, 11844, -3734, 11844,  3308, -3734,
   -3734,  3722, 50665, -3734, -3734, -3734, -3734, 11844, -3734, 56775,
   56775, -3734, -3734, -3734, -3734,  3883,   827,  3852,  3548,  3855,
   -3734, -3734,  2090, -3734, -3734,  3785, -3734, -3734,  3541,  6254,
   -3734, -3734, -3734, -3734,  2709, -3734, 36001, -3734, -3734,  1324,
   -3734, -3734, -3734, -3734, -3734,  3292, -3734,   818,  2237,  3296,
   -3734,  3347, -3734,  3304, -3734,  -127,  -127,   818,   818,  2843,
    2843,  1017, 43333,  3399, -3734, -3734,   818,   308, 50665, -3734,
    1136,  3654, -3734,  2092,  2115, -3734,  3877, -3734,  3878,  3305,
    3307, -3734,  1245, -3734,   184,  1273,  2133, -3734,  3923, -3734,
     924,  3567,  3569, -3734, -3734, -3734, -3734,   813,   887,   887,
   -3734,   278, -3734, -3734,  3693,  3781, 11844,   887, 53720,  3309,
   -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734,
   -3734, -3734, -3734, 57386, 11844, -3734,   -14,  3841, -3734,  3573,
   -3734,  3574, -3734, 50054, -3734, -3734, -3734,  3803, 56775, -3734,
    3802, -3734,   827, -3734, -3734, -3734, -3734, -3734, -3734, 26200,
   15642, -3734, -3734, -3734,  3317, -3734, -3734,   -50, -3734, -3734,
    -127,  -127, -3734, -3734, -3734, -3734, -3734,  2135, -3734, 43333,
   -3734, -3734,  3901,  3902,  3800,  3907,  1136, -3734,  -123, -3734,
   -3734, -3734, -3734, -3734, 48832, 48832, -3734, -3734, -3734, -3734,
   -3734, -3734, -3734,  3377,  3825, -3734, -3734,   101,  3360, 11844,
   56775, -3734,  3807, -3734,  3741,  1924,  3683,  3334, -3734,  3332,
    1931,  3845, 57997, 57997, -3734, -3734, -3734, -3734, -3734,  3823,
   -3734, -3734, -3734, -3734, -3734,  3518, -3734,  2156, -3734, 16275,
   -3734, -3734, -3734, -3734, -3734, 43333, -3734,  3399, -3734,  3351,
     121,   121,  3931,   121, -3734,  3934,  3935,  -123, -3734,  3354,
    2160,  1089,  1089,  -127,  3733, -3734,   101, -3734, -3734,   280,
   -3734,   887, 54331,  3936, 50665, -3734, -3734, -3734, -3734, 11844,
   -3734, 44555, 54942,  3355, -3734, -3734, -3734,  3536, -3734,  3785,
    3778,  3828, -3734,  3317, -3734,  3364, -3734,  2413,  2933, -3734,
   -3734,  3370, -3734, -3734,   121, -3734,   121,   121, -3734, -3734,
   -3734, -3734, -3734, -3734, -3734, -3734, 11844, -3734,  3842,  3458,
   -3734,  3371, -3734, 56775,   798, 56775, -3734, -3734,  3797,  3374,
    1581, -3734,  3372, -3734, -3734, 56775,  3962,  3654, -3734, 16275,
    3380, -3734, 11844,  3381,  3385, -3734, -3734, -3734, -3734,   887,
    3959, 56775, 50665, 51887,  3575, 55553,  3824, 50665,  6254,  3830,
    3831, -3734, 56775, -3734,   121,  3793, -3734, -3734,   887, -3734,
   -3734,  3480, -3734, 52498, -3734,  2478, -3734,  3426, -3734, -3734,
    3897,  1998, -3734, -3734, -3734,  3669,  3401, -3734, -3734, 56775,
   56775, -3734, -3734, -3734, 34168, 11844, -3734, -3734, -3734, -3734,
   -3734,   898,    37, 21269,  3561, 53109, 56164, -3734, -3734, -3734,
   30500, -3734, -3734, -3734,  3838, -3734,   887, -3734, -3734, -3734,
   -3734, -3734, 43333,  2166, -3734, -3734, 26200, -3734, 34168, -3734,
   -3734, -3734, -3734, 24353,  3402, -3734,   818, -3734, -3734, 26200,
   -3734, -3734, 15642, -3734, -3734
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -3734, -3734, -3734, -3734, -3734,    72, -3734, -3734, -3734, -3734,
   -3734, -3734, -3734, -3734,  1715, -3734, -3734, -3734, -3734, -3734,
    1421, -3734,   390, -2333,  -423,  3087, -3734, -3734, -3734, -3734,
   -3734, -3734, -3734, -3734,   644,  1537,  3387, -3734,   386, -3734,
      51, -3734, -3734, -3734, -2899,   -75,  -266, -3734, -3734,   398,
      21,  3038,  -262, -3088, -3734, -3734, -3734, -3734, -3734, -3734,
   -3734, -3734, -3734,   400,   397, -3734, -3734,   210, -3734, -3734,
   -1511, -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734,  -455,
    -401,  1923, -3734, -3734, -3734,  4026, -3734,  3500, -3734,  1249,
    2234, -3734, -3734, -3734,  -235,   237, -3734,   241, -3734,   242,
   -3734,   243, -3734,   246,   247,   248,   249, -3734,   250, -3734,
   -3734,  -399, -3734, -3734, -3734, -3734,   252, -3734, -3734, -3734,
   -3734, -3734, -3734, -3734,  -268, -3734, -3734,  -106, -3734, -3734,
    -259,   259, -3734,  -212,   264, -3734,   265, -3734,  -121, -3734,
    -118, -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734,
   -3734, -3734, -3734,  3045, -3734, -3734, -3734, -2300, -3734, -3734,
   -2425,  2591, -3734, -1820, -3734, -3734, -1785, -3734, -3734, -1667,
     822, -3734, -3734,   840,   748, -3734, -1406, -1913, -1905, -3734,
   -3734, -3734, -2023, -2008,  -772,  2345, -1206, -2214, -3734, -3734,
   -3734, -3734,   108, -3734, -3734, -2597,  2046,  2600, -3734,  2592,
   -3734, -3734,  1138, -3734, -3734,  1321,  1760, -3734,   919,  2801,
   -1232, -3734, -3734, -3734, -3734, -3734, -3734,    88,   251,   -12,
   -3734, -3307,   640, -3734, -3734, -3734, -3734, -3734, -3734, -3734,
   -3734, -3089, -3734, -3734, -3734,  -277, -3734, -3734,  -184, -3734,
   -3734,  -234, -3734,   102, -2330, -3734, -3734, -3734, -3734,  2607,
   -1357, -3734,  3638, -3734,  -548,   490,  2105, -2431, -1445, -3734,
    -931,  -930, -2507, -3734, -3734, -3734, -3339,  1084,  1513, -3734,
     849,  2101, -1906, -3734, -3734, -3734, -3734, -3734,  1582, -3734,
   -3734,   873, -3734,   865, -3734, -3734, -3734, -3734,  -183, -3734,
     238, -2069, -3734, -3734, -3734, -2112,  1049,   845, -3734, -3734,
   -3734, -1322, -2049, -1237, -3734,   385, -2512, -2454,   815, -3734,
   -3734,   575, -3551, -3734,  -561, -2123, -2422,    50, -3734, -3734,
     589, -3128,  1724, -3734, -3734, -3734, -3122, -1828, -3734,   128,
   -3734, -3734, -3734, -3734, -2876, -3734, -3734, -1499, -2289, -3734,
   -3734,  4192,  4194, -1054, -2710, -3733,    23,    26, -3734, -3734,
   -3734,  2649, -1640,   203,   193,   196,  2063,  -429,   353, -2387,
   -3734,   407, -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734,
   -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734,  2154,  -702,
   -3734, -3734, -3734, -3734, -3734, -3734, -3734, -2415,   923, -3734,
   -3734,  1646, -3734, -3734, -3734, -1891,  3241, -3734, -3734, -3734,
   -3734,  3591, -2179, -2433, -3734, -3734, -3734, -3734, -3734, -3734,
   -3734, -3734,  2752,  1895, -3734, -3734,  1775,  2284, -3734, -3734,
   -3734, -3734, -3734, -3734,   657,  1856, -3734, -3734, -3734, -3734,
    2157, -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734,     2,
   -3734, -3734, -3734,   939,  2691, -3734, -3734, -3734,    18, -3734,
   -3734, -3734, -3734,  2406, -3734, -3734, -3734, -3734,  2719, -3734,
   -3734, -3734, -3734, -3734, -3734,  1452, -3734,  1889, -3734, -1476,
   -3734, -3734,  1039, -1002,  1845,  -597,  1970,   409, -3734,  3649,
   -3734, -3734, -3734, -1689, -1698, -3734,  3339,  -902, -2583,  2400,
    -553, -1825,  1064,   306,  1576,   371,  4244, -3734, -1159, -1140,
   -3734, -3734,  -644, -3734, -3734, -3734, -3734, -3734,  2070,  2071,
    -607, -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734,
   -3734, -3734,  1491, -3734, -3734, -3734, -3734, -1732, -3734, -3734,
   -3734, -3734, -3734,  1610, -3734, -2093, -3734, -3734,  -456, -3734,
    3128, -3734, -3734, -3734, -2325, -1791,  1797,  1000, -3734, -3734,
   -3734, -3734, -3734, -3734, -3734, -3734, -3734, -2382, -3734, -3734,
   -3734, -3734, -3734,  1994, -3734, -3734, -3734, -3734, -3734, -3734,
   -3734, -1622, -3734, -1920,   348, -3734,   504, -3734, -3734, -3734,
   -3734, -3734, -3734, -3734,   -10,   882,    -5, -2460, -1117,  1645,
   -3734, -3734, -1283,  3165, -2050, -3734, -3734, -3734,  1984, -3734,
   -3734, -3734, -3734, -3734,   977, -2589, -1434, -3734, -3734, -3112,
    -942, -2285,  -914, -3734, -1376,  1410,   521, -3734, -1865, -1114,
    -757, -2559, -2538, -3734,  1717, -3734, -3734, -3734, -3734,  -172,
   -3734, -3734, -3734,   537,  1890, -3734, -3734, -3734, -3734, -3734,
   -3734, -3734, -3734, -3734, -3734,  -567,  -820, -3734,  2134,  2856,
   -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734,  2980,
    2953,  1953, -3734, -3734, -2338, -3734, -3734,  1914, -3734,   790,
    -909, -1847,  1078, -3734, -3734,  1081, -3214, -3734, -3734, -3734,
   -3734, -3734, -3734,  1026, -3734,    55,  3715, -3734, -3734, -3734,
   -3734, -3734, -3734, -3734,  2734, -1075,  3637, -3734, -3734, -3734,
   -3734, -3734, -3734,  2381, -3734, -3734, -3734, -3734, -3734, -3734,
    2891,  3734,  -574, -1327, -3734,  -673,  2386,  1864,  -900, -3734,
   -3734, -3734,  3743, -3734, -3734, -3734, -3734, -3734, -3734, -3734,
   -3734, -3734,  2531,  1001, -3734, -3734, -3734, -3734,  2969, -3734,
   -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734,
   -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734,  1107,
     -60, -3734,    48,  -105, -3734,   -24, -3734, -3734, -3734, -3734,
   -3734,  -187, -3734, -3734,  -180,  -683,  -996, -1379,   734, -1796,
   -2545,  1120,  2981, -3270,  -688, -1161, -1181, -1958,    62, -3734,
   -3734,  3419,    65,   850,  -413,    -6, -2772,  -104,  -595, -3734,
   -2779, -3734, -3734, -3734, -3734, -3734, -3734, -3734, -3734,  1919,
   -3734, -3734, -3734,  1096, -3734,  3779, -3734,  2635,  1098,  3782,
   -1358,  2479,  1934,  1938, -3734, -3734,  1943, -2230, -3734, -3734,
     178, -3734,  2550, -3734, -3734, -3734, -3734, -3734, -3734, -3734,
   -3734, -3734, -3734, -3734, -3734, -3734, -3734,  2999,  3794,  3478,
   -3734,  3060, -3734, -3734, -3734, -3734, -3734,   480, -3734,   662,
   -2272, -1725, -3734, -3734,  2817,   786, -3734,  1593,  -370,  -651,
   -3734, -3734,   479, -3734, -3734,   298,  3804,  3481, -3734, -3734,
   -3734, -3734, -3734, -2756,  -891, -3734, -3384, -2821, -1703, -3734,
   -3734, -2176, -3032, -3734, -3734, -1055, -3734, -3734, -3734, -3734,
   -1861, -3734, -3734, -3734,    64,  3863,  3865, -3734, -3734,  -161,
   -3734,  -115, -3734, -3734, -3734, -3734, -3734, -3734, -3734,  3721,
   -3734, -3734, -3734, -3734,  3723, -3734, -3734, -3734, -3734, -3734,
    3724, -3734, -3734, -3734, -3734, -3734,  1772, -3734, -3734, -3734,
   -3734, -3734, -3734, -3734, -3734, -3734
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If zero, do what YYDEFACT says.
   If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -2619
static const yytype_int16 yytable[] =
{
     494,   866,   969,  1493,  1056,  1001,  1375,  1613,  1389,  1392,
    1495,  1704,  2278,   536,   922,   965,   542,  1128,  1404,  1576,
     623,  1014,  1453,  1657,  1680,  1424,   556,   492,  2411,  2412,
    2091,  1703,  1147,   568,  1566,  1567,   571,  1418,   537,  1255,
     568,  1813,  2958,  1913,  1880,  2395,  1912,   553,   592,  1769,
    1424,  2088,  3019,  2817,   561,  1725,  1963,  2908,  2695,  3097,
    1346,  2786,  1733,  3265,  3550,  1454,   794,  3232,  1099,   137,
    2702,  2061,  1178,  3059,   643,  1182,  1622,  1045,  1048,  1500,
    1501,  3105,  1735,  1736,   540,  2895,  1739,  1740,  1741,  1742,
     612,  1744,  1745,  1747,  1749,  1750,  1751,  1752,  1753,  2515,
    1822,  2703,  1988,  2750,  1070,  1078,  1920,  2516,  2520,  2394,
    2670,  2588,   580,   615,  1086,   494,  2638,   494,   622,   628,
    2478,  2479,  2880,  2838,  2528,  1931,  2826,  3382,  2532,  2954,
    2503,  2639,  3748,  1934,  1935,  2886,  2932,  2490,  2773,  2547,
    1239,  1966,   617,  2896,   619,  2130,  1308,  3484,  2565,  2556,
    3390,  3885,  3629,  3845,  2508,  2509,  1817,   990,   611,   977,
    1828,  3176,   984,  2407,  2314,  1476,  1197,  1198,  1199,  2001,
    2530,  2531,  3555,  2533,  3570,  3120,  2536,  2537,  1240,  1308,
    2540,  2831,  4353,  1538,  2511,  2549,  3685,   501,  1534,  2552,
    2553,  2554,  2555,  3074,  4085,   637,  2559,  2560, -1468,  2562,
     646,  1429,  2176,  2857,  2314,  2571,   552,  3072,  2575,  2576,
    2926,  2578,  2922,   560,  1300,  1523,  3722,  1497,  1258,  3590,
    3595,  2373,  3292,  3596,   931,   913,  2635,  3099,  1206,  1207,
    3115,  3116,  1206,  1207,  2636, -1468,  3122,  2935,  3124,  1206,
    1207,   118,  3606,   848,  1206,  1207,  -865,  2355,  2517,  3628,
    3776,  2591,  3597,  1185,  3295, -1973,   581,  1049,  2443,  2465,
    3937,  3469,  4330,  1066,  1007,  4006,  2140,   858,  4109,   870,
    1470,  1483,  1321,  1206,  1207,  1794,  2622,  2623,  2624,  2625,
    1340,  3274,  3240, -1508,  3774,  2422,  1962,  1309,  2891,  2566,
   -2498,  3434, -2350,  1455,  2918,  2919,  2960,  1497,  3746,  1539,
    2892,  2652,  1990,  1540,  3435,  4508,  3416,   548,   978,   667,
    1407,  3491,   638,  1861,  1541,  1206,  1207,  4100,  3436,  2492,
    1309,  1206,  1207,   630,  1980,   882,  -532,  1497,  3310,   931,
     913,  1206,  1207,   991,  1579,  3697,  2472,  1579,  1579,   570,
    3434,  1862,  1422,  2627,   601,  2136,  4143,  4183,  2461,   545,
    1206,  1207,   661,  3435,   136,  1579,  -533,  2543,   120,   588,
    1206,  1207,  1206,  1207,  1463,  1303,  3252,  3436,   668,  2961,
    3022,  1206,  1207,  2672, -1709,  1984,   132,  3194,   931,   913,
    1559,  2356,  1051,  1206,  1207,  4345,  1425,  -438,  1206,  1207,
    1206,  1207,   584,  2152,  1206,  1207,  3263,  2089,  4045,  3723,
    2089,  2878,  1555,   651,   261,  3904,   263,  1560,  1206,  1207,
    3065,  3066,  2746,   136,  2246,  1825,  4346,  2153,  4046,  3023,
   -1709,  2090,   549,  4144,  2090,  4110,  2161,  1535,  4300,  1186,
    4300,  1206,  1207,   639,  3923,  4007,   883,  1426,   569,   851,
    3311,  1542,  1621, -1508,  2869,  4126,  1464,   546,  1962,  4286,
    1335,  1434,  2002,  3938,  3264,  3416,  1147,   589,  1826,   133,
    2374,  1052,  1580, -2350,   631,  1602,  1665,  2962,  1322,  1981,
    1484,  2926,  3809,  4101,  1206,  1207,  4002,  2462,  3227,  3906,
    1765,  3813,  1959,  1669,  1008,  1795,  1875,  1206,  1207,   642,
    2735,  2893,  1863,  4509,  2463,  1346,  2261,   979,   669,  1085,
    1555,   622,  1948,   628,  3275,  3829,  2464,   602,   884,  3269,
    3831,  1009,  3241,  1556,  1557,  1558,  2429,  1471,  1206,  1207,
     807,  3894,  3417,  3160,   628,  1346,   850,  1915,  3302,  2444,
    1918,  2546,  2423,   846,  1448,  1922,   871,   622,  1543,   856,
    1206,  1207,  1072,  1080,  3291,  1243,  2894,  3293,  3294,   859,
    1646,  3939,   874,  1647,  1050,  3235,  3236,  3237,  3470,  1769,
    2315,  3866,   580,  1937,  1938, -2000,  3304,  1500,  1501,   923,
    2936,  2545,  3007,  1730,  2940,  2357,  1964, -1508,  4241,  4326,
    1988,  3561,   986,  1208,  3296,  2465,  1209,  1208,  2956,  2957,
    1209,  4111,   849,  1458,  1208, -1468,  2927,  1209,  2967,  2515,
    2315,  1004,  2778,  2295,   655,  2451,  2514,  2516,  2904,  2638,
     622,   857,  1018,  2832,  2298,  1796,  2061,  2301,  1738,  1500,
    1501,  3285,  3107,   612,  2639,  3255,  2588,  2592,  1208,   494,
    2375,  1209,  1301, -2142,   612,  1759,  1043,  3510,   612,   612,
    3290,  4086,  1430,  1057,  1018,  1536,  3402,   580,   622,  1408,
     580,  1590,  1591, -2167,   987,  2177,  1030,  1067,  1087,  1088,
    1089,   992,  3924,  3718,  1094,  1949,  2939,  3420,  2941,  1950,
    1208,  3417,  3726,  1209,  4354,  2952,  1208,  1645,  1536,  1209,
    2567,  1829,  2292,  1206,  1207,  1658,  1208,  1660,  2964,  1209,
    2920,  1028,  2951,  1772,  2973,  2975,  2588,  2466,  3553,  1673,
    1674,  1675,  1040,  1790,  2959,  1208,  1254,  1679,  1209,  2362,
    2991,  2975,  1818,   815,  1148,  1208,  2118,  1208,  1209,  2635,
    1209,  2839,  2130,  1084,  3912,  -865,  1208,  2636,   582,  1209,
    4001,   864,  4228,  2634,   895,  3686,  1989,  3043,  1208,   877,
   -2498,  1209,  3048,  1208,  1536,  1208,  1209,  3112,  1209,  1208,
    3056,  3057,  1209,  1206,  1207,  3061,  1536,  1187,  1031,  3075,
    1815,  2467, -1508,  1208,  3414,  1966,  1209,  3391,   988, -2498,
    3846, -1508,  1203,  1843,  1205,  2921,  4186,  1835,  3305,  2135,
    1990,  3238,  3239,  3070,  3598,  1933,  1208,  1206,  1207,  1209,
    4016,  4167,  1206,  1207,  4063,  2179,  1860,   583,  1248,   494,
    1250,  2193,  1018,   494,   622,  -532,   494,   622,   550,  1068,
    2928,  3581,  3582,  1390,  1206,  1207,  2141,  1395,  1400,  3120,
    1206,  1207,  3120,  3120,  2916,  2142,  1249,  1210,  1411,  1208,
    1253,  1210,  1209,  1257,  1421,  -533,  1919,  2885,  1210,  3120,
    3437,  3067,  1208,  1210,  1313,  1209,  2281,  2194,  3253,  1206,
    1207, -2618,  1304,  3607,  2247,  1783,  3401,   612,  4322,  3627,
    3630,  3632,  3633,  1895,   585,  3626,  -438,  1206,  1207,   622,
     612,  3583,  1210,  1208,   612,  3584,  1209,  2791,  3104,  3267,
   -2000,  4200,  2870,  4358,  3177,  1412,  3540,  1710,  1711,  3437,
    3544,  3517,  1435,  1206,  1207,  1208,  2817,  4470,  1209,  3112,
    3575,  3560,  4137,  1206,  1207,  3603,  3604,  3605,  1206,  1207,
     654,   622,  1413,  3608,  1210,   622,   622,  1206,  1207,  1520,
    1210,  3634,  2136,  1206,  1207,  1324,  1459,  1838, -2279,  3535,
    1210,   813,   622,  2641,  1337,  2262,  3120,  1449,  1343,  1871,
    3188,  1968,  3369,  3539,  2123,  1710,  2212,  3543, -2142,  1210,
    1317,  2418,  4444,  3521,  2373,  3556,  3999,   875,  2659,  1210,
    3766,  1210,  3520,  1844,  3161,  4193, -2429,  4195, -2167,  1562,
    1210,  2433,  3270,  3271,  2168,  2219,  3213,  2167,  1385,   612,
    1648,  2929,  1210,  1649,  1984,  2447,  2185,  1210,  4034,  1210,
    1206,  1207,  3692,  1210,  1902,  1286,  1385,  2250,  2251, -2430,
    1496,  3695,  2267,  2268,  2755,  2756,  3767,  1210,  2515,  2187,
    1872,  2148,   138,  1424,  1206,  1207,  2516,  3457,  3033,  3024,
    2445,  2477,   580,  2190,   580,  1391,  2933,  2933,  2395,   612,
    1210,  2450,  1206,  1207,  2453,  2454,  4324,  4235,  1208,  3460,
    3505,  1209, -2000,  3768,  1241,  3145,  3146,  1865,  2638,  1424,
    1460,  4291,  1903,  1766,  3425,  4270,  3198,  3199,  3200,  3986,
   -1818,  2001,  1913,  2639,  1913,  1913,  1120,  2874,  2875,  1206,
    1207,   497,  3444,  1210,  2045,  1461, -2429,  2572,  2716,  3034,
     612,  1206,  1207,  3506,  1572,  1988,  1210,  3536,  2180,  2520,
    3079,  2674,  2394, -2566,  1984,   502,  1206,  1207,  1206,  1207,
    1720,  3162,  3163,  1206,  1207,  2547,  2514,  1766,  1208, -2430,
   -2142,  1209,  3220,  1206,  1207,  1206,  1207,  1210,  1754,  1241,
    2048,  2660,  1414,  1223,  1148,  2879,  1206,  1207,  1206,  1207,
   -2167,  2754,  2184,  2806,  3790,  2061,  1189,  1758,  1148,  1210,
    4187,  1606,  1208,  1206,  1207,  1209, -1796,  1208,  1563,  2300,
    1209,  3430,  1570,  2396,  3185,  3186,  1206,  1207,  2635,  3759,
    3760,  3004,  3908,  2590,  3025,  4328,  2636,   730,  4332,  1208,
    1206,  1207,  1209,  1845,  2642,  1208,  2313,  3398,  1209,  2759,
    2760,  2278,  3986,  3986,  1206,  1207,  1705,  4176,  2901,  4104,
    4105,  1500,  1501,  2374,  3080,  1206,  1207,  3557,   622, -2566,
     554,  1607,  1704,  4295,  1208,  3281,  2317,  1209,  2302,  1873,
    4192,  2124,  2348,  2293,  1989,  1206,  1207,  1766,  1866,  1984,
    2130,  2802,  1208, -1818,  3430,  1209,  2634,  3549,  1904,  1608,
    3593,  1827,  4177,  1450,  2753,   622,  2369,  2370,  3369,   558,
    1762,  3931,  3932, -2279,  2763,   612,  2001,  4172,  1208,  4132,
     852,  1209,  1415,  4035,   612,  2573,  1206,  1207,  1208,  1523,
    1579,  1209,   136,  1208,  4003,  2361,  1209,  1984,   960,  3952,
    1206,  1207,  1208,  1318,  1416,  1209,  3142,  1099,  1208,   586,
    4292,  1209,  1210,  1206,  1207,  1990,  2125,  2076,  1704,  4272,
    3019,  4235,   622,  1386,  4428,  2285,  3654,  1609,  2191,  1767,
    4273,  1206,  1207,  1796,  1799,  3655,  1802,  3431,  2899,   612,
    1848,  1386,  1226,  1764,  3207,  3689,  1417,  2580,  4533,  1206,
    1207,   612, -1819,  1206,  1207,  2643,  4006,  3444,  1755,   622,
    3986,  3986,  1206,  1207,   853,  3005,  1206,  1207,   612,   612,
    2588,  3863,  1766,   580,  2002,  1208,  1242,  2679,  1209,   653,
    2213,  1756,  1210,  1767,  4006,  4178,  2135,  3679,  3933,  2320,
    2834,  2588,   622,  2375,    43,  1847,   754,  2640,  2192,  1208,
     811,  2661,  1209,  1855,  1610,   604,  1856,  1704,   960, -1796,
    3431,  1806,  1713,  1504,  3432,   622,  1210,  1208,  1691,   605,
    1209,  1210,  1126,  1206,  1207,  1876,   923,  2971,  1059,  1373,
    2077,  1970,  2199,  3769,   854, -2279,   494,   494,   494,   612,
     494,   612,  4296,  1210, -2429,   580,  1914,  1206,  1207,  1210,
    2136,  1242,  1916,   494,  1208,   622,  2641,  1209,   494,  3986,
    2933,  2126,  4117,  1896,  1897,  1898,  1208,  1900,  1849,  1209,
    3656,  1538,  4188,  4118,  3986, -2429,  2835, -2430,  1210,   612,
    1917,  1208,  1984,  1208,  1209,  1921,  1209,  3442,  1208,  3986,
    1940,  1209,   878,  1767,  2200,   261,  1210,   263,  1208,  2274,
    1208,  1209,  1892,  1209,  2286,  4401,  4402,  1899, -2430,  1901,
   -2566,  1208,  2210,  1208,  1209, -1819,  1209,  4066,  1206,  1207,
    3028,  3654,  1210,   261,  1913,   263,  4007,  2546,  1208,   622,
    3655,  1209,  1210,   960,  1948,  3029,  4274,  1210,  2211,  3064,
     607,  1208,  1757,   612,  1209,  2514,  1210,  1932,  2084,   612,
    2855,  3986,  1210,  2215,  4007,  1208,  1948,    57,  1209,  2002,
     612,  2186,  4004,  3986,  3986,  1941,  4189,  3081,  2227,  1208,
    4375,  4375,  1209,  3840,   261,  1714,   263,  1206,  1207,   622,
    1208,   494,   494,  1209,  2150,   494,  1252,  1539,  1206,  1207,
    2647,  1540,  2404,  4190,  3872,  1206,  1207,  1094,  2379,  2166,
    1208,  3599,  1541,  1209,  3600,  1766,  2000,  4245,  2146,  2147,
    1611,  2078,  2648,  3986,  1206,  1207, -2566,  2086,  1767,  1210,
    3433,  1606,   898,  3986,  1206,  1207,  3106,  3129,  3019,  1559,
    4262,  4263,  3184,  1206,  1207,  2234,  1235,  1236,  1237,  1238,
    4173,  1208,  4174,  1210,  1209,   613,   879,  1206,  1207,  2491,
    2911,  3019,  3019,  4065,   618,  1208,  1561,   629,  1209,  2238,
    1704,  1210,  2275,   616,  3986,  3656,  3986,  1422,  1208,  1206,
    1207,  1209,   635,  1206,  1207,  1244,  3986,  2239,  1206,  1207,
    3223,  1607,  4119,  1206,  1207,  2404,  1208,  1148,  2220,  1209,
    1206,  1207,  3986,  3433,  3986,  2634,  3986,  1949,  1210,  4449,
    2318,  1950,  3085,  3986,  1208,  4275,  2287,  1209,  1208,  1608,
    1210,  1209,   120,  2201,  3986,   646,  2758,  1208,  4450,  1949,
    1209,  1208,  2288,  -203,  1209,  1210,  2240,  1210,  3722,  1542,
    3986,  3986,  1210,  2405,  1054,  1055,  3841,  1128,  1178,  1182,
     642,  2241,  1210,  2245,  1210,  2284,  3986,  3986,  2263,  1989,
     899,  3986,   498,  1206,  1207,  1210,   499,  1210,  3143,  2202,
    2791,  3862,  2497,  2912,  2699,  2972,   960,   648,  1352,  2704,
     650,  3144,  1210,  3155,  2517,  1206,  1207,  1609,  1208,  1206,
    1207,  1209,  2710,  2417,   662,  1210,  2379,  2308,  3165,  1206,
    1207,  2001,  4338,  1206,  1207,   622,  2306,   612,   622,  1210,
    3789,  3166,  1208,  2938,  2307,  1209,   510,  1206,  1207,   664,
     612,  2278,  2324,  1210,  2209,  2725,  3398,  3086,  2330,  2330,
     665,  2330,  2498,   900,  1210,   666,  1543,  2965,  2966,  3704,
     803,   622,  3830,  1258,   612,  3832,  2152,  1223,   612,  2223,
    1206,  1207,  1206,  1207,  1210,   808,  3789,   847,  1206,  1207,
    2499,  1767,  1206,  1207,  1610,   622,   622,   612,   612,  2224,
    2153,  1206,  1207,  3301,  3132,  1148,  1962,   861,  2330,  2330,
    2330,  1206,  1207,  1208,  1513,  1514,  1209,   580,  3046,   869,
    2769,   622,  2510,  2543,  2135,  1210,  2329,  2329,  1067,  2329,
    2640,  3873,   889,  2379,   867,  2641,  1206,  1207,   923,  1210,
    2228,  2380,  2353,   887,   922,  2993,  1324,  2683,  2213,  2381,
    2382,  3723,  1210,  1553,  2232,  3710,  1206,  1207,  2500,  2440,
    1206,  1207,   976,  2089,  2368,  1343,  2372,  2233,   983,  1880,
    1210,  2306,  1208,  2684,   593,  1209,  2329,  2329,  2329,  3249,
    1206,  1207,   879,  1208,  1606,  2237,  1209,  2090,  1210,  3226,
    1208,  1002,  1210,  1209,  1206,  1207,  3258,   612,  1206,  1207,
    1003,  1210,  1375,  2242,  3887,  1210, -1709,  2254,  2737,  1208,
    1206,  1207,  1209,   850,  2460,  1011,  2269,  1206,  1207,  1208,
    3109,   612,  1209,  1020,  1424,  2436,   594,  2685,  1208,  1031,
    2686,  1209,   565,  2098,  2099,  2501,  3087,  1984,  2687,   565,
    2183,  1243,  1208,  1330,  1607,  1209,  1331,  2950,  1244,  3261,
     974,  3537, -1709,  3724,   975,  2688,  2381,  2382,  2673,   498,
    3278,  3428,  1210,   499,  1208,  2452,  1226,  1209,  1208,  1031,
    2290,  1209,  1608,  1208,  3800,  1041,  1209,  3133,  1208,  3585,
    1068,  1209,  3588,  3589,  2761,  1208,  1210,  1044,  1209,  2471,
    3462,  3463,  1060,  4031,  4032,  4033,  2383,   595,  1244,  3601,
    1611,  3139,  1244,  2628,  2849,  1061,  2481,  3888,  3889,  2644,
     559,  3475,  3890,  3891,  2002,  2488,  2489,  1913,  2574,  1704,
    3678,   118, -2618,  2544,  1065,  2850,  2493,  2494,  2495,  2496,
    1096,  2504,  2505,  2589,  3088,  1097,  2181,  2545,  4059,  4060,
    1609,  2188,  2189,   612,  4370,  2206,  1243,  1390,  1208,   901,
     902,  1209,   904,  2689,   906,  1791,  2851,  1210,  1792,  1390,
    1766,  1793,  4061,  2214,  1243,  1704,   907,  1612,  3801,  2739,
    1208,   992,  3140,  1209,  1208,  2113,  2114,  1209,   730,  1098,
    2001,  2182,  1243,  1100,  1208,  2899,  1101,  1209,  1208,  1102,
    1332,  1209,  2497,  1246,  1223,  2001,  3693,  1105,  1704,  1106,
    3111,   622,  1208,   931,   913,  1209,  2396,   622,  1223,  2645,
    3802,  3725,   494,  1228,  1229,  1967,  1210,  1610,  2971,   612,
     612,   612,  2668,  1107,  3726,  2671,  1108,  1210,  2216,  1243,
    4134,  3147,   730,  1109,  1210,  1208,  2123,  1208,  1209,  2650,
    1209,  2502,  3151,  1208,  1110,   622,  1209,  1208,  2751,  3152,
    1209,  2123,  2498,  1210,  3434,  2690,  1208,   622,  1111,  1209,
    2217,  1663,  1112,  1210,  2229,  1243,  1208,  3435,  3153,  1209,
    4155,  4156,  1210,  1113,  4159,  4160,  4161,  4162,  2772,  1247,
    2499,  3436,  1114,  3219,  2302,  4149,  1210,  2664,  2665,  2666,
    1115,  1208,   931,  3591,  1209,  1116,   730,   960,  4019,  4023,
    1243,  3154,  1258,  1258,  1258,  3297,  2230,  1243,  1210,  3563,
    3564,  1208,  1210,  1289,  1209,  1208,  3727,  1210,  1209,  2231,
    1243,   960,  1210,  3156,  2235,  1243,  1262,  3159, -1796,  1210,
    2630,  1251,  3164,  3637,  1117,  1208,  3308,  3167,  1209,  4243,
    3920,  3921,   596,  1308,  3169,  2630,   622,  3314,  2500,  1208,
    3316,  1118,  1209,  1208,  1206,  1207,  1209,  1232,  1233,  1234,
    1235,  1236,  1237,  1238,   597,  1208,   931,   913,  1209,  2640,
    3183,  2770,  1208,  2506,  2507,  1209,   622,   754,  1121,  1159,
    4260,  4261,  1123,  1226,  3512,  1124,  1984,  1726,  3534,  4269,
    1125,   622,  1210,  2461,  1129,  2691,   598,  1226,  1130,  1176,
    1704,  1984,  1131,  1126,  3393,  1287,  1767,  3171,  2743,  1243,
    1132,  2862,  1190,  1191,  1210,  1133,  1424,  1222,  1210,  3106,
    3223,  3807,  3808,  1611,  2800,  2501,  1134, -1508,  1210,  3173,
    2800,   754,  1210,  3174,  3811,  2278,  1135,   996,   997,  1136,
     998,  3814,   999,  3175,  2417,  1390,  1210,  2822,  4019,  2776,
    2777,  1137,  4023,   599,  3128,  2189,  1138,  1126,  3131,  1243,
    2692,  3480,   622,  2002,  3157,  1243,  1127,  3833,  3834,  1141,
    -623,  2863,  1307,  3229,  3230,  2843,  1142,  2845,  2002,  1210,
   -1508,  1210,  3486,  1243,  1309,  1143,  2517,  1210,  1149,  2693,
    4090,  1210,  3508,  3509,  3481,   754,  3482,   702,  2518,   923,
    1210,  1298,  3703,  2124,  1150,  1914,  3709,  1914,  1914,  1766,
    1210, -1508,  3775, -1508,  1295,  2772,  3642,  3643,  2124,  1151,
    1177,  1126,  2462,  1152,  1766,  3711,  1223,  2332, -1508,  2333,
    1228,  1229,   898,  1705, -1508,  1210,  1153,  4366,  3701,  2463,
    3650,  3651,   622,   622,  1228,  1229,  2842,  1154, -1508,  1297,
    3712,  2464,  3682,  3690,  1155,  1210, -1508,   707,  1156,  1210,
    1054,  1055,  1157, -1508,  1160,   564,  1727,  2864,  3705,  1243,
    3713,  1161,  1223, -1508,  3714,  1162,  2399,  2400,  2401,  1210,
    1163,  3609,  2589,  1164,  1181, -1508,  1290,  2589,  3719,  1243,
   -1508,  1165,  2589,  1210,  3777,  -623,  2589,  1210,  2946, -1508,
     505,  3734,  3735,  3849,  2507,  3864,  3865,  2925,  2946,  1210,
    2589,  2589,  4027,   622,  4019,  4023,  1210,  2937,  1206,  1207,
    2589,  1166,  1705,  2947,  1223,  1167,  3610,  1224,  3868,  3865,
    2465,  2502,   612,  3869,  3865,  2089,  3611,  3925,  3509,  -623,
    1627,  2946,  3928,  3865,  2865,  2968,   676,  1168,  2589,  3003,
    1225,  2979,  1991,   719,  3021,  2517,  1169,  2981,  2982,  2090,
     899,  1170,  1291,  3041, -1508,  3935,  3936,  2518,  1292,  4223,
     960,  2948,  2949,  1231,  1232,  1233,  1234,  1235,  1236,  1237,
    1238,  1171,  3612,  1436,  1172,   960, -1508,  1231,  1232,  1233,
    1234,  1235,  1236,  1237,  1238,  1173, -1508,  2978,  4480,  4481,
    2980,  3991,  3992,  4477,  4043,  4044,  4073,  4074,  1174,  1258,
    4078,  3865,  1293,  1437,  1175,  1226,  1179,   612,  2589,  2123,
    1623,  1624,  1625,  1626,  1627,  3020,  1180,  3783, -1508,  1294,
     735,   118,  1183,   900,   702,  1054,  1055,  1631,  3044,  3045,
    1184,  3047,  2466,  3049,  3050,  3051,  3052,  3053,  3054,  3055,
    4079,  3865,  3058,  1188,  3060,  1767,  1992,  3063,  4081,  3865,
    3468,  1226,  4082,  3865,  -623,   922,  1192,  1438,  1728,   505,
    1767,  1193,  1439,  4087,  4088,   261, -1508,   263,  4534,  1194,
    1583,  1584,  1585,  1606,  1729,  3090,  3828,   706,  4089,  4088,
    4232,  4233,  4280,  4074,   707,  2519, -1796,  1603, -1508,  1306,
    3487,  3071,  1195,  3437,  2089,  1223,  2467,  -786,  1196,  -623,
    1245,  1227,  1314,  1226,  1021,  4281,  4074,  1316,  1628,  1629,
    1630,  1631,   711,  1320,  3592,  3366,  1328,  2802,  2090,  1666,
     119,  1338,  1670,  4289,  3509,  4336,  4337,  1349,  1632,  1351,
   -1508,  2324,  1635,  1607,  1313,   622,   622,   622,   120,  1636,
    2866,  1687,  1688,   612,  1368,  1692,  4382,  4383,  1369,  4362,
    4400,  3395,  1228,  1229,  1370,  1022,  4522,  4523,  1971,  1984,
    1373,  1608,   622,  1706,  1707,  1705,  1376,  1230,  1382,  2913,
    3944,  1401,  1972,  3878,  3879,  1381,  3944, -2609,  1148,  1406,
     719,   622,   622,   622,  1694,  1695, -1508,  3524,  3525,  3493,
    3494,   508,  4091,  2497,  3248,  1054,  1055,  1405, -1508, -1508,
    1410,  3614,  3732,  3733,   121,  1440,  1390,  3615,  1213,  1214,
    1993,  3206,  1632,  3661,  1633,  1634,  1635,  1704, -1508,  1637,
   -1508,  1994,  1422,  1636,  1431,  1432,   762,  1914,  1995,  1609,
    1467,  1468,  1469,  1433,  3687,  1452,  1456,  4147,  1474,  1475,
    1457,   730,  1023,  1215, -1508, -1508,  1462,  3616, -1508, -1508,
    1228,  1229,  3817,  2498,  1216,  1472,   734,   735,  1473,  1479,
    1478,  1481,  4443,  1208,  4445,  3247,  1209,  1486,  -623,  1491,
    -623,  1497,  1639,  1503,  1505,  1507,  2124,  2497,  1441,  1510,
    2974,  2499,  1766,  1511,  1226,  2589,   122,  4150,  2589,  2589,
    4463,  2946,  1515,  1217,  1518,  1231,  1232,  1233,  1234,  1235,
    1236,  1237,  1238,  1637,   622,  1218,  1610,  2589,  1519,   901,
     902,   903,   904,   905,   906,  3617,  1524,  1525,  1526,  1547,
    1548,  1996,  2946,  1549,  1552,  1554,   907,  1606,  4495,  4496,
    1555,  1973,  1219,  2946,  1579,  1573,  2946,  2498,  1241,  1575,
    1586,  1442,  1187,  1233,  1234,  1235,  1236,  1237,  1238,  2500,
    1605,  2125,  1616,  3675,  3676,  1638,  1639,  1651,  3320,  1662,
     508,   612,  1663,  1664,  1702,  2499,  3377,     1,  1712,     2,
    1721,  1737,  1743,  1763,  4047,  1771,  3303,  1770,  1777,  1774,
    1778,   494,  4048,  1779,  3306,  3387,  1780,  1607,  1781,     4,
    2946,  1782,  1220,  1231,  1232,  1233,  1234,  1235,  1236,  1237,
    1238,  1784,  1785,     5,     6,  1974,  4049,  4264,  3383,  1787,
    1640,     7,  1788,  1997,   123,  3014,     8,     9,  3618,  1811,
    1814,  1823,  1831,  3400,  1832,  1642,  2501,  1833,  1704,  3321,
    1975,  1228,  1229,  2500,  1834,  1840,  1841,    10,  3411,  -623,
     754,  2461,  1842,   960,  3784,   612,  1851,  3785,  4147,  1024,
    1857, -1796,  4194,  1881,  1443,  1889,    11,  3424,   760,  1894,
    1128,  1178,  1182,   762,  4136,  1353,   763,  1890,  1924,  1923,
    1925,  1926,  1928,  1929,  1375,  1354,  1930,    12,   523,  1946,
    1960,  1969,   124,  3015,  -630,    13,    14,    15,  1444,  2073,
    1355,  3609,  1976,  3780,  1640,  2079,  2126,    16,    17,  3529,
    2080,  3403,  1356,  1357,  1358,  2093,  2119,  1210,  1641,  1642,
    2501,  2094,  1611,  3413,  1025, -2609,  1026,  2137,  1359,  2138,
    2145,  4050,  3786,  3787,    19,  2155,  2156,  2164,  1767,  2157,
    2158,  2170,  2172,  2173,  3485,   524,  3610,  2197,  2174,  2196,
      20,   125,  2843,  2205,  2198,  3897,  3611,  2203,  2204,  4387,
    2169,  3909,  3328,  2207,  2213,   676,    21,  2252,  2218,  2626,
    3016,    22,   525,  2222,  2226,    23,  2800,  2243,  2244,  2249,
    2462,  2279,  2253,  2264,  2283,  2265,  1233,  1234,  1235,  1236,
    1237,  1238,  1977,  2266,  2822,  3519, -1201,  2463,   622,    24,
    1238,    25,  3612,  2289,  2327,  2299,   526,   622,  4250,  2464,
    4051, -1337,  2345,  2770,  3988,  2319,  3446,    26, -2609,  3447,
     923,   923,  2983,  2842,  2984,  2354,  1536,  3448,  4052,  2360,
    2387,  2366,  2363,  2397,  2398,    27,  2413,  2421,  2424,    28,
    1705,  2419,  2502,  2420,  3449,  2221,  3783,  2425,  2426,  2225,
    2427,  4053,  2589,   702,   527,  2428,  2437,  2439,  2441,  4387,
    2442,  2446,  2589,  2455,  2946,  2985,  2457,  2469,  2470,  2473,
     504,  2248,  3613,  1705,  2474,  2476,  2480,  2461,  2517,  2946,
    2487,   612,  1704,  2589,  2482,  2483,  2986,  3450,  2465,  2484,
    2485,  2486,  2529,  2534,  2535,   261,  2538,   263,  2539,  4058,
    2541,  2548,  4515,  2542,  1390,  1704,   706,  2550,  2551,  2557,
    3757,  2558,  1704,   707,  4392,  4393,  2563,  4395,  1704,  3926,
    3927,  2987,  3929,  3930,  2593,  4526,  2502,  -786,  2564,  2569,
    2597,    29,  4515,  2570,  2599,  2577,  2601,  2602,  4526,  1360,
    2603,   711,  3451,  2604,  2605,  2606,  2607,  2608,    30,  2609,
     805,   806,    31,   505,   809,   810,  1361,  2610,   812,  3041,
     814,  2611,  2612,    32,  2613,  2614,  2615,   866,  4436,  2616,
    4437,  4438,  2617,  2618,    33,  2619,  3017,   -65,  2621,  2620,
    2629,  2651,   528,  2669,  2682,  3674,  3674,  3674,  -817,  2677,
    1914,  2705,  3753,  2673,  2706,  2707,    34,  2307,  2717,    35,
    2466,    36,   622,  2779,    37,  2781,  2462,    38,    39,   719,
    1308,  2782,  2718,  2730,  2783,    40,  2792,    41,   960,  2749,
    3639,  2757,  2766,  2463,    42,  1054,  1055,  2767,  4474,  2794,
      43,  3614,  2780,  2789,  4054,  2464,   506,  3615,    44,  2795,
    2796,  3452,  2803,    45,  3453,    46,  2804,  3666,    47,  1818,
     529,  4237,  4058,  2808,  2812,  2824,  2825,  2334,  2827,  4507,
    2828,  2829,  2405,  2404,  2467,  2847,  2848,  1865,  2858,  1866,
     730,  3742,  2873,  2876,    48,  1705,  2417,  3616,    49,  2335,
    2887,  2888,  1362,  2889,  2905,   734,   735,  2909,  2910,  2953,
     622,  2955,  2336,  3012, -1508,  3027,  3031,  3036,  3042,  3068,
    3069,  3073,  3077,  2337,  3078,  2045,  1962,  3103,  2165,   530,
    3112,  3117,  3196,  3123,  2465,   531,  3125,  3126,  2988,  3191,
    3127,  3454,  3180,    50,   818,   819,  3674,  3134,  3203,  3135,
    3178,  3208,  1330,  3215,   532,    51,  3761,  3182,  1363,    52,
    3187,  3190,    53,  3797,  4239,  3617,  3211, -1508,    54,  3201,
    3212,  1309,  2338,  1390,  2339,  3225,  1364,  3909,  3234,   533,
    3792,  3218,  2989,  3228,  1623,  1624,  1625,  1626,  1627,  3245,
    3246,  3231,  3254,  3250,   622,  3268,   534,    55,  3272,  3273,
   -1508,  2340,  3251,    56,  3262,  3276,  3287,  4530,  3288,  3289,
    3300,  3378,  3385,    57,  3309, -1508,  3317,  3319,  3318,  3389,
    3835, -1508,  3381,  3384,  3395,  3394,  3399,  3839,  3406,  3407,
    3844,  3412,  -448,  2379,   820,  3415,  3421,  3422,  3426,  3423,
    3529,  3443,  3464, -1508,  3461,  3472,  2466,  3471,  3411,  3490,
   -1508,  1223,   507,  3489,  3499,  3501,  3504,  3522,  3511,  3541,
   -1508,  1261,  3542,   821,  2341,  3530,  3816,  3554,  3618,  3455,
    3562,   622, -1508,  3565,   508,  3566,   822, -1508,  3579,  3586,
    3636,  2591,  1628,  1629,  1630,  1631, -1508,   819,  3640,   754,
    1223,  3647,  3638,  3784,  3648,  3662,  3785,  3663,  3456,   823,
    3664,  3653,   824,  3670,  3667,  3668,  3680,   760,  3850,  3681,
    2467,   509,   762,   825,  -538,   763,  3682,   510,  2342,  3683,
    3684,  3688,  3691,  3694,  3901,  4237,  3696,  3698,  3699,  3700,
    3702,  3706,  3707,  3708,   826,  3720,  2014,  3721,   622,  3730,
    3737,  3738,  3740,  2015,  3747,  2016,  3735,  3249,  3749,  3918,
    3750, -1508,  2236,   511,  3754,  3755,  2017,  2018, -1423,  3765,
     827,   512,  3674,  3674, -1428,  3674,  3674,   828,  3778,  3798,
    3779,  3786,  3787, -1508,  3781,  3782,   820,  3795,  3820,  3806,
    3626,  3812,  3822, -1508,  3824,  3810,  1632,  2019,  1633,  1634,
    1635,  3148,  2020,  2021,  3821,  1390,  3823,  1636,  3827,  2022,
    3629,  3851,  3826,  3852,  4058,   821,  3870,   829,  3871,  3874,
    3867,  2023,  3954,  3877,  3876, -1508,  3880,  3882,   822,  2024,
    3883,  3895,  3690,  3884,  3940,  3896,  3934,  3946,  4432,  2025,
    4504,  3902,  3914,  3948,  3916,  3949,  3989,  3996,   612,  3955,
    1226,   823,  3950,  2026,   824,  4015,  4000,  4025,  4026,  3674,
     891,   819,  4028,  4030,  4038,   825,  1971,  1497,  4041,  4075,
    2027,  4095,  4113, -1508,  4504,  -314,  4115,  2028,  2029,  4070,
    1972,  4127,  4139,  4072,  2030,  4083,   826,  1637,  4142,  1226,
     612,  4154,  2031,  3953,  4116, -1508,  -892,  4157,  2032,  4158,
    4166,  4170,  4163,   622,  4131,  4138,  4168,  4432,  3007,  4196,
    4197,  4200,   827,  4203,  -332,  4229,  3997,  4230,  4231,   828,
    4234,  4266,  4278,  4249,  4282,  4283,  4252,  2033,  4290,  4293,
    4084,  4294,  4303,  4254,  4284,  4304,  4285, -1508,  4317,  1638,
    1639,   801,  4314,  4315,  4308,  4320,  4326,   830,  4340,  4341,
     820,   831,  4099,  4342,  4343,  4351,  4352,  4106,  4039,   829,
     261,  4363,   263,  4358,  4365,  4367,  2034,   832,  2035,  4368,
   -2330,  4371,  4377,  4307,  4380,   833,  2036,  4532,  4394,   821,
    4391,  4396,  4397,   834,  4399,  4404,  4120,  4124,  4307,  4410,
    4423,  2037,   822, -1508,  4424,  4429,  4440,  1228,  1229,  4426,
   -1592,  4441,  4442,  4318,  4446,  4447, -1508,  4451,   835,  4454,
    4457,  4459,  4462,  4468,  4466,   823,  4460,  4475,   824,  4471,
    4472,   836,   837,  4479,  4485, -1508,  4492, -1508,  4520,   825,
    4493,  4483,  1705,  4529,  2774,  4516,  1228,  1229,  3901,  1973,
    4108,  3848,  3062,  3652,  2917,  1077,  1451,  2038,  3855,  4128,
     826, -1508, -1508,  4240,  4378, -1508, -1508,  1509,  4265,  4379,
    3853,  3857,  3995,  4527,  3918,  2039,  3918,   838,  4175,  2040,
    4487,  4133,   577,  3233,  2389,  3966,   827,   973,  1640,  3967,
    3969,  3970,  4497,   828,  3972,  3973,  3974,  3975,  3976,   830,
    3977,  4407,  1641,  1642,   801,  4301,  4204,  3980,   839,   801,
    4408,  4376,  3981,  3982,  1551,  2013,  4313,  2041,  4312,   832,
    2310,  4130,  2042,  1974,  2581,  3313,  2059,   833,  2087,  2043,
     840,  2044,   841,   829,  3214,   834,  2807,  4307,  2045,  2046,
    4247,  3503,  4152,  1821,   801,  1054,  1055,  4422,  1975,  4253,
    1231,  1232,  1233,  1234,  1235,  1236,  1237,  1238,  4040,  3743,
     835,   801,  4456,  4390,  4431,   663,   622,  2122,  4165,  3861,
    2047,  3404,  4271,   836,   837,  2772,  2579,  3096,  3578,  3009,
    2586,  3567,  3571,  4405,  2048,  2049,  2050,  2051,  3458,  1231,
    1232,  1233,  1234,  1235,  1236,  1237,  1238,  3594,  4093,  3942,
    4453,  3635,   801,   801,   801,   801,  3825,  2052,  4251,  3815,
    1976,  4246,  2907,   519,   801,   520,  4181,  4287,  4307,   838,
    4307,  4288,  4135,  2154,  4140,  4141,  2663,  4473,  4014,  3945,
    4258,  4259,  2583,  3569,  1029,  1947,  2997,  4124,  4307,  2458,
    1477,  4389,  2882,  3794,  2809,  4316,  2596,  2120,  3568,  2371,
     839,  3205,  2790,  1705,  2085,  2748,  3500,  2830,  1380,  3987,
    1000,  2403,  3488,   830,  4092,  2053,  2696,   892,  3189,  2698,
    4307,  4307,   840,   622,   841,  4519,  3538,  2900,  2747,  4077,
    2095,  2054,  1661,   832,  4349,  2055,  3922,  3649,  3041,  3041,
    4350,   833,  1604,  3259,  2764,   801,  3573,  3919,  4478,   834,
    1977,  3911,  2667,  2992,  2056,  1805,  2815,  2837,  1836,  2057,
    2788,  3745,  3548,  3515,  4323,  3514,   989,  2163,  1095,  2448,
     968,  1906,  2058,  2877,   835,  2449,  2321,  3502,  3577,   971,
    1839,  4427,  4455,  4398,  4344,  4333,  4334,   836,   837,   622,
    2096,  2097,  2098,  2099,  2100,  2101,  4528,  2102,  2103,  2104,
    2105,  2106,  2107,  2108,  2109,  2110,  3819,  2111,  2112,  4531,
    3518,  2856,  3532,  2282,   925,  3533,  2431,   926,  4412,  2854,
    1854,  2846,  2853,   894,  2359,  4420,  4029,  1798,  1846,  1367,
    3193,  4037,  2144,   838,   896,  -892,   657,  1372,   658,  1081,
       0,  1082,  1083,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   839,     0,     0,     0,  4521,     0,
    2017,  2018,     0,     0,     0,     0,     0,     0,  4403,     0,
       0,     0,     0,     0,     0,     0,   840,     0,   841,     0,
       0,     0,     0,     0,     0,     0,  4464,     0,     0,     0,
       0,  4469,     0,  -769,  -769,     0,  2020,     0,     0,     0,
       0,     0,     0,     0,     0,  -769,     0,     0,     0,     0,
     801,     0,     0,     0,     0,  2023,     0,     0,     0,     0,
       0,     0,     0,  2024,  2113,  2114,     0,     0,  4505,     0,
       0,     0,     0,     0,     0,     0,     0,  1705,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2026,     0,     0,
       0,     0,     0,     0,     0,     0,   622,     0,     0,     0,
    1705,  1497,  4505,     0,  2027,   801,   801,  1705,     0,     0,
       0,     0,     0,  1705,   801,   801,   801,   801,   801,   801,
     801,   801,   801,   801,   801,   801,     0,     0,     0,     0,
       0,     0,  2032,   801,   801,     0,   801,     0,   801,     0,
       0,     0,   801,     0,     0,   801,   801,   801,   801,     0,
     801,   801,   801,     0,     0,     0,     0,     0,     0,   801,
     801,     0,   801,   801,   801,   801,   801,     0,     0,   801,
     801,   801,   801,   801,   801,   801,   801,   801,   801,   801,
       0,     0,   801,   801,     0,     0,   801,     0,     0,     0,
     801,     0,   801,   801,   261,     0,   263,     0,     0,     0,
       0,     0,  2035,     0,   801,   801,     0,     0,     0,     0,
    2036,     0,   801,     0,     0,     0,     0,     0,     0,   801,
     801,   801,     0,   801,     0,  2037,     0,     0,     0,     0,
     801,   801,   801,     0,   801,   801,   801,   801,   801,     0,
     801,   801,   801,   801,   801,   801,   801,   801,     1,     0,
       2,   801,   801,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     3,     0,     0,     0,
       4,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2038,     0,  1264,     5,     6,     0,     0,     0,     0,
       0,     0,     7,     0,     0,     0,     0,     8,     9,  2039,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1265,     0,    10,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   801,     0,
       0,     0,     0,     0,     0,     0,     0,    11,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2043,     0,  2044,     0,     0,    12,     0,
       0,     0,     0,  2046,     0,     0,    13,    14,    15,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    16,    17,
       0,     0,     0,  1266,     0,     0,     0,     0,   801,     0,
       0,    18,     0,  1264,     0,     0,     0,     0,   801,     0,
       0,     0,     0,     0,     0,    19,     0,  1267,     0,     0,
       0,  1268,     0,   801,     0,     0,     0,   801,     0,     0,
       0,    20,     0,     0,     0,     0,  1265,     0,     0,     0,
       0,  2052,     0,     0,     0,     0,     0,    21,     0,     0,
       0,     0,    22,     0,     0,  1269,    23,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1270,     0,     0,     0,     0,     0,
      24,   801,    25,     0,     0,     0,     0,     0,  1271,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    26,  2053,
       0,     0,     0,  1266,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2054,    27,     0,     0,  2055,
      28,     0,     0,     0,  1103,     0,     0,  1267,     0,     0,
       0,  1268,     0,     0,     0,  2072,  1272,     0,  2056,     0,
       0,     0,     0,     0,  2017,  2018,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2058,     0,     0,  1140,
    1273,     0,     0,     0,     0,  1269,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1158,  -769,  -769,     0,
    2020,     0,     0,     0,  1270,     0,     0,     0,     0,  -769,
       0,     0,     0,     0,     0,     0,     0,     0,  1271,  2023,
       0,     0,     0,     0,     0,   801,     0,  2024,     0,     0,
       0,     0,    29,     0,     0,  3098,     0,     0,     0,     0,
    1200,     0,     0,     0,     0,     0,     0,     0,     0,    30,
       0,  2026,     0,    31,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    32,  1497,  1272,     0,  2027,     0,
       0,     0,     0,     0,     0,    33,     0,     0,     0,     0,
       0,     0,  1274,     0,     0,     0,     0,     0,     0,     0,
    1273,  1275,     0,     0,     0,     0,  2032,    34,     0,     0,
      35,     0,    36,     0,     0,    37,  1276,     0,    38,    39,
       0,     0,     0,     0,     0,     0,    40,     0,    41,     0,
       0,     0,     0,     0,  1277,    42,     0,     0,     0,     0,
    1329,    43,     0,     0,     0,     0,   801,   801,   801,    44,
       0,     0,     0,     0,    45,     0,    46,     0,     0,    47,
     801,     0,     0,     0,     0,     0,     0,     0,   261,     0,
     263,     0,     0,  1278,     0,  1279,  2035,     0,     0,     0,
       0,     0,     0,     0,  2036,    48,   801,     0,     0,    49,
       0,     0,   801,     0,     0,   801,     0,   801,     0,  2037,
    1280,     0,  1274,   801,     0,   801,   801,     0,     0,     0,
       0,  1275,     0,  2653,     0,     0,     0,     0,     0,   498,
       0,     0,  1281,   499,     0,     0,  1276,     0,     0,     0,
       0,     0,     0,     0,    50,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1277,     0,    51,     0,     0,     0,
      52,     0,     0,    53,     0,  2038,     0,     0,     0,    54,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1282,     0,  2039,     0,     0,     0,   801,     0,     0,
       0,     0,     0,  1278,     0,  1279,     0,     0,    55,     0,
       0,     0,     0,     0,    56,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    57,     0,     0,     0,     0,     0,
    1280,     0,     0,     0,     0,  1532,     0,     0,     0,     0,
       0,     0,     0,     0,   801,     0,     0,  2043,     0,  2044,
       0,     0,  1281,   801,     0,     0,     0,  2046,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1577,  1578,     0,     0,     0,     0,     0,     0,     0,  1588,
    1589,  1282,     0,  1592,  1593,  1594,  1595,  1598,  1599,  1600,
    1601,     0,     0,     0,     0,     0,     0,     0,  1617,  1618,
       0,  1619,     0,  1620,     0,  2052,     0,     0,     0,     0,
    1653,  1654,  1655,  1656,     0,     0,  1659,     0,     0,     0,
       0,     0,     0,     0,  1667,  1668,     0,  1671,  1672,     0,
       0,     0,     0,     0,  1676,  1677,  1678,     0,     0,  1681,
    1682,  1683,  1684,  1685,  1686,     0,     0,  1689,  1690,     0,
       0,  1693,     0,     0,     0,  1696,     0,  1700,  1701,     0,
       0,     0,     0,  2053,     0,     0,     0,     0,     0,  1708,
    1709,     0,     0,     0,     0,     0,     0,  1717,     0,  2054,
       0,     0,     0,  2055,  1722,  1723,  1724,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2056,     0,     0,     0,     0,     0,     0,     0,
    2072,     0,     0,     0,     0,     0,     0,  1760,     0,     0,
    2058,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   801,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2654,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1808,     0,     0,     0,     0,     0,     0,
    2072,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   801,     0,     0,     0,
     801,     0,     0,     0,     0,   801,   801,     0,     0,     0,
       0,     0,     0,     0,   801,     0,   801,     0,   801,   801,
     801,   801,     0,     0,   801,     0,     0,     0,     0,     0,
       0,     0,     0,  1853,   801,     0,   801,   801,     0,   801,
     801,   801,   801,  1859,   801,     0,     0,   801,     0,     0,
       0,     0,     0,     0,     0,     0,   801,     0,  1887,     0,
       0,     0,  1893,   801,     0,   801,     0,   801,   801,   801,
     801,     0,     0,     0,   801,   801,   801,     0,     0,   928,
     801,   801,   801,     0,   801,     0,   801,     0,   801,     0,
     801,   929,   801,     0,     0,     0,     0,   801,     0,     0,
       0,   870,   930,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   801,     0,     0,     0,  1936,     0,     0,   801,
       0,     0,   801,     0,     0,     0,   931,   913,   801,     0,
       0,   801,     0,     0,   932,   801,     0,     0,     0,   933,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   934,     0,   935,     0,   936,
       0,     0,     0,     0,     0,     0,     0,     0,   937,     0,
       0,     0,     0,     0,     0,     0,     0,  2017,  2018,     0,
     801,     0,     0,     0,     0,     0,     0,  2995,     0,    14,
      15,     0,     0,     0,  2015,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2017,  2018,     0,
    -769,  -769,     0,  2020, -1796,   938,     0,     0,     0,     0,
     939,     0,  -769,   940,     0,     0,     0,     0,     0,     0,
    2175,     0,  2023,     0,     0,     0,     0,     0,  2019,     0,
    2024,     0,     0,  2020,     0,     0,     0,     0,     0,   941,
       0,   942,   801,     0,     0,     0,     0,     0,   943,     0,
     944,     0,  2023,     0,  2026,     0,     0,     0,     0,     0,
    2024,     0,     0,     0,     0,     0,     0,     0,  1497,     0,
    2025,  2027,     0,     0,   945,   946,   947,     0,     0,     0,
       0,     0,     0,     0,  2026,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   948,  1497,  2032,
       0,  2027,     0,     0,     0,     0,     0,     0,  2028,     0,
       0,     0,     0,     0,     0,  2996,     0,     0,     0,   949,
       0,     0,     0,  2031,     0,     0,     0,     0,     0,  2032,
       0,  2256,  2258,  2260,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   950,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2033,     0,
       0,   261,     0,   263,     0,     0,     0,     0,     0,  2035,
       0,  2291,     0,     0,     0,     0,     0,  2036,     0,     0,
    2296,     0,  2297,     0,     0,     0,     0,     0,     0,  2072,
       0,   261,  2037,   263,     0,     0,     0,     0,     0,  2035,
       0,     0,     0,     0,     0,     0,     0,  2036,     0,     0,
       0,     0,     0,   951,     0,     0,     0,     0,     0,     0,
       0,     0,  2037,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   952,
       0,     0,     0,     0,     0,     0,     0,     0,  2038,     0,
     953,   954,     0,     0,   955,   956,     0,     0,     0,     0,
       0,     0,  2367,     0,     0,     0,  2039,  2072,     0,     0,
       0,     0,     0,     0,     0,   957,     0,     0,  2038,     0,
       0,     0,     0,     0,   801,     0,     0,     0,   801,     0,
       0,     0,     0,     0,     0,     0,  2039,     0,     0,     0,
    2040,     0,     0,     0,     0,     0,     0,     0,     0,  2430,
       0,     0,     0,     0,     0,   801,   801,     0,   958,     0,
    2043,     0,  2044,     0,     0,     0,     0,     0,     0,     0,
    2046,   959,     0,     0,     0,   801,     0,  2017,  2018,     0,
       0,     0,     0,  2042,   801,     0,   801,     0,   801,     0,
    2043,     0,  2044,     0,     0,     0,     0,     0, -2369,     0,
    2046,     0,   960,     0,     0,   801,     0,     0,     0,     0,
     801,     0,     0,  2020,     0,     0,     0,     0,     0,     0,
     961,   962,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2023,     0,   801,     0,     0,     0,  2052,     0,
    2024,     0,     0,     0,     0,     0,  2049,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2026,     0,     0,     0,  2052,   963,
       0,     0,     0,     0,     0,     0,     0,     0,  1497,     0,
   -2369,  2027,     0,     0,     0,     0,     0,     0,   964,     0,
       0,     0,     0,     0,     0,     0,  2053,     0,     0,     0,
       0,     0,     0,     0,   801,     0,     0,     0,     0,  2032,
       0,     0,  2054,     0,     0,     0,  2055,  3322,  3323,     0,
       0,     0,     0,  3324,     0,  3325,  2053,  3326,  3327,     0,
       0,     0,     0,     0,     0,  2056,     0,     0,     0,     0,
       0,     0,  2054,     0,  3328,     0,  2055,     0,     0,     0,
       0,     0,     0,  2058,     0,   801,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2056,     0,     0,  2600,     0,
       0,   261,     0,   263,     0,     0,     0,     0,     0,  2035,
       0,     0,     0,  2058,     0,     0,     0,  2036,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3329,     0,
       0,  3330,  2037,     0,     0,     0,     0,     0,     0,  3331,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3332,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2676,     0,  3333,     0,  2678,     0,     0,     0,     0,
    2680,  2681,     0,     0,     0,     0,     0,     0,  2038,  1595,
       0,  2697,     0,  1595,     0,  2700,  2701,  3334,     0,  3335,
       0,     0,     0,   801,   801,     0,  2039,     0,     0,  2708,
       0,  2709,  3336,  3337,  2711,  2712,  2713,  2714,     0,  2715,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2719,     0,     0,     0,     0,     0,     0,  2720,     0,
    2721,     0,  2722,  2723,  2724,     0,     0,     0,     0,  2727,
    2728,  2729,     0,     0,  3338,  2731,  2732,  2733,     0,  2734,
    2043,  2736,  2044,  2738,     0,  2740,     0,  2741,     0,     0,
    2046,     0,  2742,     0,     0,     0,     0,  2072,     0,     0,
       0,     0,     0,  3339,     0,     0,     0,  2752,     0,     0,
     801,     0,  3340,  3341,     0,  3342,     0,     0,     0,     0,
       0,     0,     0,  2762,     0,     0,  2765,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   801,   801,     0,   801,     0,  3343,  3344,  3345,
       0,     0,     0,     0,   801,     0,     0,     0,  2052,   801,
       0,     0,   801,     0,   801,   801,  3346,  3347,  3348,     0,
       0,     0,     0,  3349,     0,     0,  3350,     0,     0,     0,
       0,     0,     0,     0,     0,   801,     0,     0,     0,     0,
       0,     0,  3351,  3352,     0,     0,     0,     0,     0,     0,
     801,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2053,     0,     0,     0,
       0,     0,     0,   801,     0,     0,     0,     0,  3353,  3354,
       0,     0,  2054,     0,     0,     0,  2055,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3355,     0,  2056,     0,  1887,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2058,     0,     0,     0,   801,     0,     0,
       0,     0,     0,     0,     0,     0,   801,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3356,     0,     0,     0,  3357,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3358,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3625,     0,
       0,     0,     0,     0,     0,  3359,     0,     0,  3360,     0,
       0,  3361,  3362,  3363,  3364,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3365,  3366,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3367,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3108,
       0,     0,     0,  3110,     0,     0,     0,     0,     0,     0,
       0,   801,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3137,  3138,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   801,   801,     0,     0,     0,     0,
    3158,     0,     0,   801,     0,     0,     0,     0,     0,  3168,
       0,  3170,     0,  3172,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3202,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3625,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2072,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1887,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   801,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3282,     0,     0,     0,   801,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   801,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3984,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3379,  3380,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  4013,     0,     0,     0,  4013,  4013,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   801,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   801,     0,     0,     0,
       0,     0,   801,     0,   801,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3429,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   801,     0,     0,     0,     0,     0,
    3984,  3984,     0,     0,     0,     0,     0,  3466,  3467,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3474,
       0,     0,     0,     0,  3476,     0,     0,  3477,     0,  3478,
    3479,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  4013,     0,
       0,     0,     0,     0,     0,     0,     0,  4013,     0,     0,
       0,  4013,     0,     0,     0,  3496,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3496,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     801,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  4013,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   801,     0,   801,     0,     0,     0,
       0,     0,  3496,     0,     0,     0,   801,     0,  3984,  3984,
       0,  3559,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  4248,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  4013,     0,  4013,  4013,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   801,     0,  3984,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3984,   801,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3984,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   801,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   801,  3984,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3984,  3984,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   801,     0,
       0,     0,     0,     0,     0,     0,  3496,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3984,     0,     0,     0,     0,     0,     0,   801,  3763,
    3764,  3984,     0,     0,     0,     0,     0,     0,  3282,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   801,     0,     0,     0,     0,
       0,     0,  3984,     0,  3984,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3984,     0,     0,     0,   801,     0,
       0,   801,     0,     0,     0,     0,     0,     0,     0,     0,
    3984,     0,  3984,     0,  3984,     0,     0,     0,     0,     0,
       0,  3984,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3984,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3984,  3984,
       0,     0,     0,     0,   801,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3984,  3984,     0,     0,     0,  3984,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3875,     0,
       0,   801,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3496,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3282,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  4064,     0,     0,     0,     0,     0,  4069,     0,  4071,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  4094,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3282,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  4198,
       0,  4199,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  4207,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    4305,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  4310,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3496,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  4361,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  4414,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    4439,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  4458,     0,     0,     0,
       0,     0,     0,     0,   139,     0,   672,   141,   142,   143,
     144,     0,     0,   145,     0,     0,     0,   146,     0,     0,
     673,     0,   148,   149,   150,   151,   152,   674,   154,     0,
     155,     0,     0,   675,   156,   676,   677,   678,   157,   679,
       0,   158,   159,   160,  1697,   161,     0,   162,   163,  4506,
       0,   164,   680,   681,   165,   166,     0,   167,   682,   683,
     169,   170,     0,   171,   172,   173,   174,   175,   684,   177,
       0,   685,   179,   686,   687,   688,   689,   690,     0,   185,
     186,   187,   188,   189,   190,   191,   192,     0,   193,   194,
       0,   195,   196,   197,   691,   199,  3496,   200,   692,   693,
     201,     0,     0,   202,   694,   695,     0,   203,   696,   697,
       0,   204,   205,   206,   698,   699,   700,     0,     0,     0,
       0,   701,   209,   702,     0,     0,   703,   210,     0,   211,
       0,     0,     0,   212,     0,   213,   214,   215,   216,     0,
       0,     0,   217,     0,     0,   218,   219,   220,     0,     0,
       0,   221,     0,   222,   223,     0,   224,   225,   226,     0,
       0,   227,   228,     0,   229,   230,   231,   232,   233,   234,
     704,     0,   235,   236,   237,   705,   706,   238,   239,     0,
     240,   241,   242,   707,     0,   243,     0,     0,     0,   244,
       0,   245,     0,   246,     0,   247,   248,   708,   250,   709,
     252,     0,   253,     0,   710,     0,   254,   255,   256,     0,
     257,   711,     0,   258,   259,     0,     0,     0,   712,   261,
     262,   263,   713,     0,   264,   265,   266,     0,   267,     0,
     268,     0,     0,     0,   714,   269,   270,   715,     0,     0,
     271,     0,   272,   273,     0,   274,   275,     0,     0,     0,
     276,     0,     0,   277,   278,   716,     0,  1698,   280,     0,
     717,   281,   282,     0,     0,     0,     0,     0,   718,   284,
       0,   285,     0,   286,     0,   287,   288,     0,     0,   719,
       0,     0,     0,     0,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,     0,
     304,   305,   306,   720,   307,   308,   309,   310,   721,   311,
     312,     0,     0,     0,     0,   313,   314,   315,   316,   722,
     318,     0,     0,   723,   320,   724,   321,     0,   322,   725,
     726,   727,   728,   729,   327,   328,   329,   330,   331,     0,
     730,   332,   333,     0,     0,   334,   335,   336,   337,   731,
     732,   733,   338,   339,     0,   734,   735,     0,   340,   341,
     736,     0,   343,   344,   345,   346,     0,   347,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   348,   349,   350,
       0,   737,   351,     0,   352,   353,   354,   355,   738,   357,
     358,   359,   360,   739,   740,   363,   741,     0,   364,   365,
     366,     0,   367,     0,   368,   369,   370,   371,   372,     0,
     742,   374,   375,     0,     0,   376,     0,     0,     0,   377,
     378,   379,   380,   381,     0,     0,   382,   383,   384,   385,
     386,     0,   387,   388,     0,   389,   390,   391,   743,   744,
     392,     0,   393,     0,   394,   395,     0,   396,   397,     0,
       0,   745,   398,   399,   400,   401,   402,   746,   404,   405,
     406,   407,     0,   747,   409,     0,     0,     0,   410,   411,
     412,   413,     0,     0,     0,   414,     0,     0,     0,   415,
       0,   416,   417,   418,   419,   420,     0,   421,   422,   423,
     424,   425,   426,     0,     0,     0,     0,     0,     0,   427,
     428,     0,   429,     0,     0,   430,     0,     0,   431,   432,
     433,   748,   749,   434,   435,     0,   436,   437,   750,   439,
     440,   441,   751,   752,   442,   443,   444,   445,   753,   446,
     447,     0,   448,     0,   449,   450,   451,   452,     0,   754,
     453,   454,     0,   755,   756,   757,   758,     0,     0,     0,
       0,  1699,   459,   460,   461,     0,   759,   760,   761,   463,
     464,   465,   762,   466,   467,   763,   468,   469,     0,   470,
     471,     0,     0,   472,     0,     0,   473,     0,   474,     0,
     764,   476,   477,     0,     0,   765,   766,   767,   768,   478,
       0,     0,   479,   769,     0,   770,   480,   481,   482,   483,
     484,   771,     0,     0,     0,     0,     0,     0,   486,   487,
       0,   488,   489,   490,     0,     0,   772,     0,     0,     0,
       0,   773,   774,     0,     0,     0,     0,   775,   776,     0,
       0,   777,   778,     0,     0,   779,   780,   139,     0,   672,
     141,   142,   143,   144,  1883,     0,   145,     0,     0,     0,
     146,     0,     0,   673,     0,   148,   149,   150,   151,   152,
     674,   154,     0,   155,     0,     0,  1884,   156,   676,   677,
     678,   157,   679,     0,   158,   159,   160,     0,   161,     0,
     162,   163,     0,     0,   164,   680,   681,   165,   166,     0,
     167,   682,   683,   169,   170,     0,   171,   172,   173,   174,
     175,   684,   177,     0,   685,   179,   686,   687,   688,   689,
     690,     0,   185,   186,   187,   188,   189,   190,   191,   192,
       0,   193,   194,     0,   195,   196,   197,   691,   199,     0,
     200,   692,   693,   201,     0,     0,   202,   694,   695,     0,
     203,   696,   697,     0,   204,   205,   206,   698,   699,   700,
       0,     0,     0,     0,   701,   209,   702,     0,     0,  1885,
     210,     0,   211,     0,     0,     0,   212,     0,   213,   214,
     215,   216,     0,     0,     0,   217,     0,     0,   218,   219,
     220,     0,     0,     0,   221,     0,   222,   223,     0,   224,
     225,   226,     0,     0,   227,   228,     0,   229,   230,   231,
     232,   233,   234,   704,     0,   235,   236,   237,   705,   706,
     238,   239,     0,   240,   241,   242,   707,     0,   243,     0,
       0,     0,   244,     0,   245,     0,   246,     0,   247,   248,
     708,   250,   709,   252,     0,   253,     0,   710,     0,   254,
     255,   256,     0,   257,   711,     0,   258,   259,     0,     0,
       0,   712,   261,   262,   263,   713,     0,   264,   265,   266,
       0,   267,     0,   268,     0,     0,     0,   714,   269,   270,
     715,     0,     0,   271,     0,   272,   273,     0,   274,   275,
       0,     0,     0,   276,     0,     0,   277,   278,   716,     0,
       0,   280,     0,   717,   281,   282,     0,     0,     0,     0,
       0,   718,   284,     0,   285,     0,   286,     0,   287,   288,
       0,     0,   719,     0,     0,     0,     0,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,     0,   304,   305,   306,   720,   307,   308,   309,
     310,   721,   311,   312,     0,     0,     0,     0,   313,   314,
     315,   316,   722,   318,     0,     0,   723,   320,   724,   321,
       0,   322,   725,   726,   727,   728,   729,   327,   328,   329,
     330,   331,     0,   730,   332,   333,     0,     0,   334,   335,
     336,   337,   731,   732,   733,   338,   339,     0,   734,   735,
       0,   340,   341,   736,  1886,   343,   344,   345,   346,     0,
     347,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     348,   349,   350,     0,   737,   351,     0,   352,   353,   354,
     355,   738,   357,   358,   359,   360,   739,   740,   363,   741,
       0,   364,   365,   366,     0,   367,     0,   368,   369,   370,
     371,   372,     0,   742,   374,   375,     0,     0,   376,     0,
       0,     0,   377,   378,   379,   380,   381,     0,     0,   382,
     383,   384,   385,   386,     0,   387,   388,     0,   389,   390,
     391,   743,   744,   392,     0,   393,     0,   394,   395,     0,
     396,   397,     0,     0,   745,   398,   399,   400,   401,   402,
     746,   404,   405,   406,   407,     0,   747,   409,     0,     0,
       0,   410,   411,   412,   413,     0,     0,     0,   414,     0,
       0,     0,   415,     0,   416,   417,   418,   419,   420,     0,
     421,   422,   423,   424,   425,   426,     0,     0,     0,     0,
       0,     0,   427,   428,     0,   429,     0,     0,   430,     0,
       0,   431,   432,   433,   748,   749,   434,   435,     0,   436,
     437,   750,   439,   440,   441,   751,   752,   442,   443,   444,
     445,   753,   446,   447,     0,   448,     0,   449,   450,   451,
     452,     0,   754,   453,   454,     0,   755,   756,   757,   758,
       0,     0,     0,     0,     0,   459,   460,   461,     0,   759,
     760,   761,   463,   464,   465,   762,   466,   467,   763,   468,
     469,     0,   470,   471,     0,     0,   472,     0,     0,   473,
       0,   474,     0,   764,   476,   477,     0,     0,   765,   766,
     767,   768,   478,     0,     0,   479,   769,     0,   770,   480,
     481,   482,   483,   484,   771,     0,     0,     0,     0,     0,
       0,   486,   487,     0,   488,   489,   490,     0,     0,   772,
       0,     0,     0,     0,   773,   774,     0,     0,     0,     0,
     775,   776,     0,     0,   777,   778,     0,     0,   779,   780,
     139,     0,   672,   141,   142,   143,   144,     0,     0,   145,
       0,     0,     0,   146,     0,     0,   673,     0,   148,   149,
     150,   151,   152,   674,   154,     0,   155,     0,     0,   675,
     156,   676,   677,   678,   157,   679,     0,   158,   159,   160,
       0,   161,     0,   162,   163,     0,     0,   164,   680,   681,
     165,   166,     0,   167,   682,   683,   169,   170,     0,   171,
     172,   173,   174,   175,   684,   177,     0,   685,   179,   686,
     687,   688,   689,   690,     0,   185,   186,   187,   188,   189,
     190,   191,   192,     0,   193,   194,     0,   195,   196,   197,
     691,   199,     0,   200,   692,   693,   201,     0,     0,   202,
     694,   695,     0,   203,   696,   697,     0,   204,   205,   206,
     698,   699,   700,     0,     0,     0,     0,   701,   209,   702,
       0,     0,   703,   210,     0,   211,     0,     0,     0,   212,
       0,   213,   214,   215,   216,     0,     0,     0,   217,     0,
       0,   218,   219,   220,     0,     0,     0,   221,     0,   222,
     223,     0,   224,   225,   226,     0,     0,   227,   228,     0,
     229,   230,   231,   232,   233,   234,   704,     0,   235,   236,
     237,   705,   706,   238,   239,     0,   240,   241,   242,   707,
       0,   243,     0,     0,     0,   244,  2255,   245,     0,   246,
       0,   247,   248,   708,   250,   709,   252,     0,   253,     0,
     710,     0,   254,   255,   256,     0,   257,   711,     0,   258,
     259,     0,     0,     0,   712,   261,   262,   263,   713,     0,
     264,   265,   266,     0,   267,     0,   268,     0,     0,     0,
     714,   269,   270,   715,     0,     0,   271,     0,   272,   273,
       0,   274,   275,     0,     0,     0,   276,     0,     0,   277,
     278,   716,     0,     0,   280,     0,   717,   281,   282,     0,
       0,     0,     0,     0,   718,   284,     0,   285,     0,   286,
       0,   287,   288,     0,     0,   719,     0,     0,     0,     0,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,     0,   304,   305,   306,   720,
     307,   308,   309,   310,   721,   311,   312,     0,     0,     0,
       0,   313,   314,   315,   316,   722,   318,     0,     0,   723,
     320,   724,   321,     0,   322,   725,   726,   727,   728,   729,
     327,   328,   329,   330,   331,     0,   730,   332,   333,     0,
       0,   334,   335,   336,   337,   731,   732,   733,   338,   339,
       0,   734,   735,     0,   340,   341,   736,     0,   343,   344,
     345,   346,     0,   347,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   348,   349,   350,     0,   737,   351,     0,
     352,   353,   354,   355,   738,   357,   358,   359,   360,   739,
     740,   363,   741,     0,   364,   365,   366,     0,   367,     0,
     368,   369,   370,   371,   372,     0,   742,   374,   375,     0,
       0,   376,     0,     0,     0,   377,   378,   379,   380,   381,
       0,     0,   382,   383,   384,   385,   386,     0,   387,   388,
       0,   389,   390,   391,   743,   744,   392,     0,   393,     0,
     394,   395,     0,   396,   397,     0,     0,   745,   398,   399,
     400,   401,   402,   746,   404,   405,   406,   407,     0,   747,
     409,     0,     0,     0,   410,   411,   412,   413,     0,     0,
       0,   414,     0,     0,     0,   415,     0,   416,   417,   418,
     419,   420,     0,   421,   422,   423,   424,   425,   426,     0,
       0,     0,     0,     0,     0,   427,   428,     0,   429,     0,
       0,   430,     0,     0,   431,   432,   433,   748,   749,   434,
     435,     0,   436,   437,   750,   439,   440,   441,   751,   752,
     442,   443,   444,   445,   753,   446,   447,     0,   448,     0,
     449,   450,   451,   452,     0,   754,   453,   454,     0,   755,
     756,   757,   758,     0,     0,     0,     0,     0,   459,   460,
     461,     0,   759,   760,   761,   463,   464,   465,   762,   466,
     467,   763,   468,   469,     0,   470,   471,     0,     0,   472,
       0,     0,   473,     0,   474,     0,   764,   476,   477,     0,
       0,   765,   766,   767,   768,   478,     0,     0,   479,   769,
       0,   770,   480,   481,   482,   483,   484,   771,     0,     0,
       0,     0,     0,     0,   486,   487,     0,   488,   489,   490,
       0,     0,   772,     0,     0,     0,     0,   773,   774,     0,
       0,     0,     0,   775,   776,     0,     0,   777,   778,     0,
       0,   779,   780,   139,     0,   672,   141,   142,   143,   144,
       0,     0,   145,     0,     0,     0,   146,     0,     0,   673,
       0,   148,   149,   150,   151,   152,   674,   154,     0,   155,
       0,     0,   675,   156,   676,   677,   678,   157,   679,     0,
     158,   159,   160,     0,   161,     0,   162,   163,     0,     0,
     164,   680,   681,   165,   166,     0,   167,   682,   683,   169,
     170,     0,   171,   172,   173,   174,   175,   684,   177,     0,
     685,   179,   686,   687,   688,   689,   690,     0,   185,   186,
     187,   188,   189,   190,   191,   192,     0,   193,   194,     0,
     195,   196,   197,   691,   199,     0,   200,   692,   693,   201,
       0,     0,   202,   694,   695,     0,   203,   696,   697,     0,
     204,   205,   206,   698,   699,   700,     0,     0,     0,     0,
     701,   209,   702,     0,     0,   703,   210,     0,   211,     0,
       0,     0,   212,     0,   213,   214,   215,   216,     0,     0,
       0,   217,     0,     0,   218,   219,   220,     0,     0,     0,
     221,     0,   222,   223,     0,   224,   225,   226,     0,     0,
     227,   228,     0,   229,   230,   231,   232,   233,   234,   704,
       0,   235,   236,   237,   705,   706,   238,   239,     0,   240,
     241,   242,   707,     0,   243,     0,     0,     0,   244,  2257,
     245,     0,   246,     0,   247,   248,   708,   250,   709,   252,
       0,   253,     0,   710,     0,   254,   255,   256,     0,   257,
     711,     0,   258,   259,     0,     0,     0,   712,   261,   262,
     263,   713,     0,   264,   265,   266,     0,   267,     0,   268,
       0,     0,     0,   714,   269,   270,   715,     0,     0,   271,
       0,   272,   273,     0,   274,   275,     0,     0,     0,   276,
       0,     0,   277,   278,   716,     0,     0,   280,     0,   717,
     281,   282,     0,     0,     0,     0,     0,   718,   284,     0,
     285,     0,   286,     0,   287,   288,     0,     0,   719,     0,
       0,     0,     0,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,     0,   304,
     305,   306,   720,   307,   308,   309,   310,   721,   311,   312,
       0,     0,     0,     0,   313,   314,   315,   316,   722,   318,
       0,     0,   723,   320,   724,   321,     0,   322,   725,   726,
     727,   728,   729,   327,   328,   329,   330,   331,     0,   730,
     332,   333,     0,     0,   334,   335,   336,   337,   731,   732,
     733,   338,   339,     0,   734,   735,     0,   340,   341,   736,
       0,   343,   344,   345,   346,     0,   347,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   348,   349,   350,     0,
     737,   351,     0,   352,   353,   354,   355,   738,   357,   358,
     359,   360,   739,   740,   363,   741,     0,   364,   365,   366,
       0,   367,     0,   368,   369,   370,   371,   372,     0,   742,
     374,   375,     0,     0,   376,     0,     0,     0,   377,   378,
     379,   380,   381,     0,     0,   382,   383,   384,   385,   386,
       0,   387,   388,     0,   389,   390,   391,   743,   744,   392,
       0,   393,     0,   394,   395,     0,   396,   397,     0,     0,
     745,   398,   399,   400,   401,   402,   746,   404,   405,   406,
     407,     0,   747,   409,     0,     0,     0,   410,   411,   412,
     413,     0,     0,     0,   414,     0,     0,     0,   415,     0,
     416,   417,   418,   419,   420,     0,   421,   422,   423,   424,
     425,   426,     0,     0,     0,     0,     0,     0,   427,   428,
       0,   429,     0,     0,   430,     0,     0,   431,   432,   433,
     748,   749,   434,   435,     0,   436,   437,   750,   439,   440,
     441,   751,   752,   442,   443,   444,   445,   753,   446,   447,
       0,   448,     0,   449,   450,   451,   452,     0,   754,   453,
     454,     0,   755,   756,   757,   758,     0,     0,     0,     0,
       0,   459,   460,   461,     0,   759,   760,   761,   463,   464,
     465,   762,   466,   467,   763,   468,   469,     0,   470,   471,
       0,     0,   472,     0,     0,   473,     0,   474,     0,   764,
     476,   477,     0,     0,   765,   766,   767,   768,   478,     0,
       0,   479,   769,     0,   770,   480,   481,   482,   483,   484,
     771,     0,     0,     0,     0,     0,     0,   486,   487,     0,
     488,   489,   490,     0,     0,   772,     0,     0,     0,     0,
     773,   774,     0,     0,     0,     0,   775,   776,     0,     0,
     777,   778,     0,     0,   779,   780,   139,     0,   672,   141,
     142,   143,   144,     0,     0,   145,     0,     0,     0,   146,
       0,     0,   673,     0,   148,   149,   150,   151,   152,   674,
     154,     0,   155,     0,     0,   675,   156,   676,   677,   678,
     157,   679,     0,   158,   159,   160,     0,   161,     0,   162,
     163,     0,     0,   164,   680,   681,   165,   166,     0,   167,
     682,   683,   169,   170,     0,   171,   172,   173,   174,   175,
     684,   177,     0,   685,   179,   686,   687,   688,   689,   690,
       0,   185,   186,   187,   188,   189,   190,   191,   192,     0,
     193,   194,     0,   195,   196,   197,   691,   199,     0,   200,
     692,   693,   201,     0,     0,   202,   694,   695,     0,   203,
     696,   697,     0,   204,   205,   206,   698,   699,   700,     0,
       0,     0,     0,   701,   209,   702,     0,     0,   703,   210,
       0,   211,     0,     0,     0,   212,     0,   213,   214,   215,
     216,     0,     0,     0,   217,     0,     0,   218,   219,   220,
       0,     0,     0,   221,     0,   222,   223,     0,   224,   225,
     226,     0,     0,   227,   228,     0,   229,   230,   231,   232,
     233,   234,   704,     0,   235,   236,   237,   705,   706,   238,
     239,     0,   240,   241,   242,   707,     0,   243,     0,     0,
       0,   244,  2259,   245,     0,   246,     0,   247,   248,   708,
     250,   709,   252,     0,   253,     0,   710,     0,   254,   255,
     256,     0,   257,   711,     0,   258,   259,     0,     0,     0,
     712,   261,   262,   263,   713,     0,   264,   265,   266,     0,
     267,     0,   268,     0,     0,     0,   714,   269,   270,   715,
       0,     0,   271,     0,   272,   273,     0,   274,   275,     0,
       0,     0,   276,     0,     0,   277,   278,   716,     0,     0,
     280,     0,   717,   281,   282,     0,     0,     0,     0,     0,
     718,   284,     0,   285,     0,   286,     0,   287,   288,     0,
       0,   719,     0,     0,     0,     0,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,     0,   304,   305,   306,   720,   307,   308,   309,   310,
     721,   311,   312,     0,     0,     0,     0,   313,   314,   315,
     316,   722,   318,     0,     0,   723,   320,   724,   321,     0,
     322,   725,   726,   727,   728,   729,   327,   328,   329,   330,
     331,     0,   730,   332,   333,     0,     0,   334,   335,   336,
     337,   731,   732,   733,   338,   339,     0,   734,   735,     0,
     340,   341,   736,     0,   343,   344,   345,   346,     0,   347,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   348,
     349,   350,     0,   737,   351,     0,   352,   353,   354,   355,
     738,   357,   358,   359,   360,   739,   740,   363,   741,     0,
     364,   365,   366,     0,   367,     0,   368,   369,   370,   371,
     372,     0,   742,   374,   375,     0,     0,   376,     0,     0,
       0,   377,   378,   379,   380,   381,     0,     0,   382,   383,
     384,   385,   386,     0,   387,   388,     0,   389,   390,   391,
     743,   744,   392,     0,   393,     0,   394,   395,     0,   396,
     397,     0,     0,   745,   398,   399,   400,   401,   402,   746,
     404,   405,   406,   407,     0,   747,   409,     0,     0,     0,
     410,   411,   412,   413,     0,     0,     0,   414,     0,     0,
       0,   415,     0,   416,   417,   418,   419,   420,     0,   421,
     422,   423,   424,   425,   426,     0,     0,     0,     0,     0,
       0,   427,   428,     0,   429,     0,     0,   430,     0,     0,
     431,   432,   433,   748,   749,   434,   435,     0,   436,   437,
     750,   439,   440,   441,   751,   752,   442,   443,   444,   445,
     753,   446,   447,     0,   448,     0,   449,   450,   451,   452,
       0,   754,   453,   454,     0,   755,   756,   757,   758,     0,
       0,     0,     0,     0,   459,   460,   461,     0,   759,   760,
     761,   463,   464,   465,   762,   466,   467,   763,   468,   469,
       0,   470,   471,     0,     0,   472,     0,     0,   473,     0,
     474,     0,   764,   476,   477,     0,     0,   765,   766,   767,
     768,   478,     0,     0,   479,   769,     0,   770,   480,   481,
     482,   483,   484,   771,     0,     0,     0,     0,     0,     0,
     486,   487,     0,   488,   489,   490,     0,     0,   772,     0,
       0,     0,     0,   773,   774,     0,     0,     0,     0,   775,
     776,     0,     0,   777,   778,     0,     0,   779,   780,   139,
       0,   672,   141,   142,   143,   144,     0,     0,   145,     0,
       0,     0,   146,     0,     0,   673,     0,   148,   149,   150,
     151,   152,   674,   154,     0,   155,     0,     0,   675,   156,
     676,   677,   678,   157,   679,     0,   158,   159,   160,     0,
     161,     0,   162,   163,     0,     0,   164,   680,   681,   165,
     166,     0,   167,   682,   683,   169,   170,     0,   171,   172,
     173,   174,   175,   684,   177,     0,   685,   179,   686,   687,
     688,   689,   690,     0,   185,   186,   187,   188,   189,   190,
     191,   192,     0,   193,   194,     0,   195,   196,   197,   691,
     199,     0,   200,   692,   693,   201,     0,     0,   202,   694,
     695,     0,   203,   696,   697,     0,   204,   205,   206,   698,
     699,   700,     0,     0,     0,     0,   701,   209,   702,     0,
       0,   703,   210,     0,   211,     0,     0,     0,   212,     0,
     213,   214,   215,   216,     0,     0,     0,   217,     0,     0,
     218,   219,   220,     0,     0,     0,   221,     0,   222,   223,
       0,   224,   225,   226,     0,     0,   227,   228,     0,   229,
     230,   231,   232,   233,   234,   704,     0,   235,   236,   237,
     705,   706,   238,   239,     0,   240,   241,   242,   707,     0,
     243,     0,     0,     0,   244,     0,   245,     0,   246,     0,
     247,   248,   708,   250,   709,   252,     0,   253,     0,   710,
       0,   254,   255,   256,     0,   257,   711,     0,   258,   259,
       0,     0,     0,   712,   261,   262,   263,   713,     0,   264,
     265,   266,     0,   267,     0,   268,     0,     0,     0,   714,
     269,   270,   715,     0,     0,   271,     0,   272,   273,     0,
     274,   275,     0,     0,     0,   276,     0,     0,   277,   278,
     716,     0,     0,   280,     0,   717,   281,   282,     0,     0,
       0,     0,     0,   718,   284,     0,   285,     0,   286,     0,
     287,   288,     0,     0,   719,     0,     0,     0,     0,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,     0,   304,   305,   306,   720,   307,
     308,   309,   310,   721,   311,   312,     0,     0,     0,     0,
     313,   314,   315,   316,   722,   318,     0,     0,   723,   320,
     724,   321,     0,   322,   725,   726,   727,   728,   729,   327,
     328,   329,   330,   331,     0,   730,   332,   333,     0,     0,
     334,   335,   336,   337,   731,   732,   733,   338,   339,     0,
     734,   735,     0,   340,   341,   736,     0,   343,   344,   345,
     346,     0,   347,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   348,   349,   350,     0,   737,   351,     0,   352,
     353,   354,   355,   738,   357,   358,   359,   360,   739,   740,
     363,   741,     0,   364,   365,   366,     0,   367,     0,   368,
     369,   370,   371,   372,     0,   742,   374,   375,     0,     0,
     376,     0,     0,     0,   377,   378,   379,   380,   381,     0,
       0,   382,   383,   384,   385,   386,     0,   387,   388,     0,
     389,   390,   391,   743,   744,   392,     0,   393,     0,   394,
     395,     0,   396,   397,     0,     0,   745,   398,   399,   400,
     401,   402,   746,   404,   405,   406,   407,     0,   747,   409,
       0,     0,     0,   410,   411,   412,   413,     0,     0,     0,
     414,     0,     0,     0,   415,     0,   416,   417,   418,   419,
     420,     0,   421,   422,   423,   424,   425,   426,     0,     0,
       0,     0,     0,     0,   427,   428,     0,   429,     0,     0,
     430,     0,     0,   431,   432,   433,   748,   749,   434,   435,
       0,   436,   437,   750,   439,   440,   441,   751,   752,   442,
     443,   444,   445,   753,   446,   447,     0,   448,     0,   449,
     450,   451,   452,     0,   754,   453,   454,     0,   755,   756,
     757,   758,     0,     0,     0,     0,     0,   459,   460,   461,
       0,   759,   760,   761,   463,   464,   465,   762,   466,   467,
     763,   468,   469,     0,   470,   471,     0,     0,   472,     0,
       0,   473,     0,   474,     0,   764,   476,   477,     0,     0,
     765,   766,   767,   768,   478,     0,     0,   479,   769,     0,
     770,   480,   481,   482,   483,   484,   771,     0,     0,     0,
       0,     0,     0,   486,   487,     0,   488,   489,   490,     0,
       0,   772,     0,     0,     0,     0,   773,   774,     0,     0,
       0,     0,   775,   776,     0,     0,   777,   778,     0,     0,
     779,   780,   139,     0,   672,   141,   142,   143,   144,     0,
       0,   145,     0,     0,     0,   146,     0,     0,   673,     0,
     148,   149,   150,   151,   152,   674,   154,     0,   155,     0,
       0,   675,   156,   676,   677,   678,   157,   679,     0,   158,
     159,   160,     0,   161,     0,   162,   163,     0,     0,   164,
     680,   681,   165,   166,     0,   167,   682,   683,   169,   170,
       0,   171,   172,   173,   174,   175,   684,   177,     0,   685,
     179,   686,   687,   688,   689,   690,     0,   185,   186,   187,
     188,   189,   190,   191,   192,     0,   193,   194,     0,   195,
     196,   197,   691,   199,     0,   200,   692,   693,   201,     0,
       0,   202,   694,   695,     0,   203,   696,   697,     0,   204,
     205,   206,   698,   699,   700,     0,     0,     0,     0,   701,
     209,   702,     0,     0,   703,   210,     0,   211,     0,     0,
       0,   212,     0,   213,   214,   215,   216,     0,     0,     0,
     217,     0,     0,   218,   219,   220,     0,     0,     0,   221,
       0,   222,   223,     0,   224,   225,   226,     0,     0,   227,
     228,     0,   229,   230,   231,   232,   233,   234,   704,     0,
     235,   236,   237,   705,   706,   238,   239,     0,   240,   241,
     242,   707,     0,   243,     0,     0,     0,   244,     0,   245,
       0,   246,     0,   247,   248,   708,   250,   709,   252,     0,
     253,     0,   710,     0,   254,   255,   256,     0,   257,   711,
       0,   258,   259,     0,     0,     0,   712,   261,   262,   263,
     713,     0,   264,   265,   266,     0,   267,     0,   268,     0,
       0,     0,   714,   269,   270,   715,     0,     0,   271,     0,
     272,   273,     0,   274,   275,     0,     0,     0,   276,     0,
       0,   277,   278,   716,     0,     0,   280,     0,   717,   281,
     282,     0,     0,     0,     0,     0,   718,   284,     0,   285,
       0,   286,     0,   287,   288,     0,     0,   719,     0,     0,
       0,     0,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,     0,   304,   305,
     306,   720,   307,   308,   309,   310,   721,   311,   312,     0,
       0,     0,     0,   313,   314,   315,   316,   722,   318,     0,
       0,   723,   320,   724,   321,     0,   322,   725,   726,   727,
     728,   729,   327,   328,   329,   330,   331,     0,   730,   332,
     333,     0,     0,   334,   335,   336,   337,   731,   732,   733,
     338,   339,     0,   734,   735,     0,   340,   341,   736,     0,
     343,   344,   345,   346,     0,   347,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   348,   349,   350,     0,   737,
     351,     0,   352,   353,   354,   355,   738,   357,   358,   359,
     360,   739,   740,   363,   741,     0,   364,   365,   366,     0,
     367,     0,   368,   369,   370,   371,   372,     0,   742,   374,
     375,     0,     0,   376,     0,     0,     0,   377,   378,   379,
     380,   381,     0,     0,   382,   383,   384,   385,   386,     0,
     387,   388,     0,   389,   390,   391,   743,   744,   392,     0,
     393,     0,   394,   395,     0,   396,   397,     0,     0,   745,
     398,   399,   400,   401,   402,   746,   404,   405,   406,   407,
       0,   747,   409,     0,     0,     0,   410,   411,   412,   413,
       0,     0,     0,   414,     0,     0,     0,   415,     0,   416,
     417,   418,   419,   420,     0,   421,   422,   423,   424,   425,
     426,     0,     0,     0,     0,     0,     0,   427,   428,     0,
     429,     0,     0,   430,     0,     0,   431,   432,   433,   748,
     749,   434,   435,     0,   436,   437,   750,   439,   440,   441,
     751,   752,   442,   443,   444,   445,   753,   446,   447,     0,
     448,     0,   449,   450,   451,   452,     0,   754,   453,   454,
       0,   755,   756,   757,   758,     0,     0,     0,     0,     0,
     459,   460,   461,     0,   759,   760,   761,   463,   464,   465,
     762,   466,   467,   763,   468,   469,     0,   470,   471,     0,
       0,   472,     0,     0,   473,     0,   474,     0,   764,   476,
     477,     0,     0,   765,   766,   767,   768,   478,     0,     0,
     479,   769,     0,   770,   480,   481,   482,   483,   484,   771,
       0,     0,     0,     0,     0,     0,   486,   487,     0,   488,
     489,   490,     0,     0,   772,     0,     0,     0,     0,   773,
     774,     0,     0,     0,     0,   775,  1139,     0,     0,   777,
     778,     0,     0,   779,   780,   139,     0,   672,   141,   142,
     143,   144,  1731,     0,   145,     0,     0,     0,  1732,     0,
       0,   673,     0,   148,   149,   150,   151,   152,   674,   154,
       0,   155,     0,     0,   675,   156,   676,   677,   678,   157,
     679,     0,   158,   159,   160,     0,   161,     0,   162,   163,
       0,     0,   164,   680,   681,   165,   166,     0,   167,   682,
     683,   169,   170,     0,   171,   172,   173,   174,   175,   684,
     177,     0,   685,   179,   686,   687,   688,   689,   690,     0,
     185,   186,   187,   188,   189,   190,   191,   192,     0,   193,
     194,     0,   195,   196,   197,   691,   199,     0,   200,   692,
     693,   201,     0,     0,   202,   694,   695,     0,   203,   696,
     697,     0,   204,   205,   206,   698,   699,   700,     0,     0,
       0,     0,   701,   209,   702,     0,     0,   703,   210,     0,
     211,     0,     0,     0,   212,     0,   213,   214,   215,   216,
       0,     0,     0,   217,     0,     0,   218,   219,   220,     0,
       0,     0,   221,     0,   222,   223,     0,   224,   225,   226,
       0,     0,   227,   228,     0,   229,   230,   231,   232,   233,
     234,   704,     0,   235,   236,   237,   705,   706,   238,   239,
       0,   240,   241,   242,   707,     0,   243,     0,     0,     0,
     244,     0,   245,     0,   246,     0,   247,   248,   708,   250,
     709,   252,     0,   253,     0,   710,     0,   254,   255,   256,
       0,   257,   711,     0,   258,   259,     0,     0,     0,   712,
     261,   262,   263,   713,     0,   264,   265,   266,     0,   267,
       0,   268,     0,     0,     0,   714,   269,   270,   715,     0,
       0,   271,     0,   272,   273,     0,   274,   275,     0,     0,
       0,   276,     0,     0,   277,   278,   716,     0,     0,   280,
       0,   717,   281,   282,     0,     0,     0,     0,     0,   718,
     284,     0,   285,     0,   286,     0,   287,   288,     0,     0,
     719,     0,     0,     0,     0,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
       0,   304,   305,   306,   720,   307,   308,   309,   310,   721,
     311,   312,     0,     0,     0,     0,   313,   314,   315,   316,
     722,   318,     0,     0,   723,   320,   724,   321,     0,   322,
     725,   726,   727,   728,   729,   327,   328,   329,   330,   331,
       0,   730,   332,   333,     0,     0,   334,   335,   336,   337,
     731,     0,   733,   338,   339,     0,   734,   735,     0,   340,
     341,   736,     0,   343,   344,   345,   346,     0,   347,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   348,   349,
     350,     0,   737,   351,     0,   352,   353,   354,   355,   738,
     357,   358,   359,   360,   739,   740,   363,   741,     0,   364,
     365,   366,     0,   367,     0,   368,   369,   370,   371,   372,
       0,   742,   374,   375,     0,     0,   376,     0,     0,     0,
     377,   378,   379,   380,   381,     0,     0,   382,   383,   384,
     385,   386,     0,   387,   388,     0,   389,   390,   391,   743,
     744,   392,     0,   393,     0,   394,   395,     0,   396,   397,
       0,     0,   745,   398,   399,   400,   401,   402,   746,   404,
     405,   406,   407,     0,   747,   409,     0,     0,     0,   410,
     411,   412,   413,     0,     0,     0,   414,     0,     0,     0,
     415,     0,   416,   417,   418,   419,   420,     0,   421,   422,
     423,   424,   425,   426,     0,     0,     0,     0,     0,     0,
     427,   428,     0,   429,     0,     0,   430,     0,     0,   431,
     432,   433,   748,   749,   434,   435,     0,   436,   437,   750,
     439,   440,   441,   751,   752,   442,   443,   444,   445,   753,
     446,   447,     0,   448,     0,   449,   450,   451,   452,     0,
     754,   453,   454,     0,   755,   756,   757,   758,     0,     0,
       0,     0,     0,   459,   460,   461,     0,   759,   760,   761,
     463,   464,   465,   762,   466,   467,   763,   468,   469,     0,
     470,   471,     0,     0,   472,     0,     0,   473,     0,   474,
       0,   764,   476,   477,     0,     0,   765,   766,   767,   768,
     478,     0,     0,   479,   769,     0,   770,   480,   481,   482,
     483,   484,   771,     0,     0,     0,     0,     0,     0,   486,
     487,     0,   488,   489,   490,     0,     0,   772,     0,     0,
       0,     0,   773,   774,     0,     0,     0,     0,   775,   776,
       0,     0,   777,   778,     0,     0,   779,   780,   139,     0,
     672,   141,   142,   143,   144,     0,     0,   145,     0,     0,
       0,   146,     0,     0,   673,     0,   148,   149,   150,   151,
     152,   674,   154,     0,   155,     0,     0,   675,   156,   676,
     677,   678,   157,   679,     0,   158,   159,   160,     0,   161,
       0,   162,   163,     0,     0,   164,   680,   681,   165,   166,
       0,   167,   682,   683,   169,   170,     0,   171,   172,   173,
     174,   175,   684,   177,     0,   685,   179,   686,   687,   688,
     689,   690,     0,   185,   186,   187,   188,   189,   190,   191,
     192,     0,   193,   194,     0,   195,   196,   197,   691,   199,
       0,   200,   692,   693,   201,     0,     0,   202,   694,   695,
       0,   203,   696,   697,     0,   204,   205,   206,   698,   699,
     700,     0,     0,     0,     0,   701,   209,   702,     0,     0,
     703,   210,     0,   211,     0,     0,     0,   212,     0,   213,
     214,   215,   216,     0,     0,     0,   217,     0,     0,   218,
     219,   220,     0,     0,     0,   221,     0,   222,   223,     0,
     224,   225,   226,     0,     0,   227,   228,     0,   229,   230,
     231,   232,   233,   234,   704,     0,   235,   236,   237,   705,
     706,   238,   239,     0,   240,   241,   242,   707,     0,   243,
       0,     0,     0,   244,     0,   245,     0,   246,     0,   247,
     248,   708,   250,   709,   252,     0,   253,     0,   710,     0,
     254,   255,   256,     0,   257,   711,     0,   258,   259,     0,
       0,     0,   712,   261,   262,   263,   713,     0,   264,   265,
     266,     0,   267,     0,   268,     0,     0,     0,   714,   269,
     270,   715,     0,     0,   271,     0,   272,   273,     0,   274,
     275,     0,     0,     0,   276,     0,     0,   277,   278,   716,
       0,     0,   280,     0,   717,   281,   282,     0,     0,     0,
       0,     0,   718,   284,     0,   285,     0,   286,     0,   287,
     288,     0,     0,   719,     0,     0,     0,     0,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,     0,   304,   305,   306,   720,   307,   308,
     309,   310,   721,   311,   312,     0,     0,     0,     0,   313,
     314,   315,   316,   722,   318,     0,     0,   723,   320,   724,
     321,     0,   322,   725,   726,   727,   728,   729,   327,   328,
     329,   330,   331,     0,   730,   332,   333,     0,     0,   334,
     335,   336,   337,   731,   732,   733,   338,   339,     0,   734,
     735,     0,   340,   341,   736,     0,   343,   344,   345,   346,
       0,   347,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   348,   349,   350,     0,   737,   351,     0,   352,   353,
     354,   355,   738,   357,   358,   359,   360,   739,   740,   363,
     741,     0,   364,   365,   366,     0,   367,     0,   368,   369,
     370,   371,   372,     0,   742,   374,   375,     0,     0,   376,
       0,     0,     0,   377,   378,   379,   380,   381,     0,     0,
     382,   383,   384,   385,   386,     0,   387,   388,     0,   389,
     390,   391,   743,   744,   392,     0,   393,     0,   394,   395,
       0,   396,   397,     0,     0,   745,   398,   399,   400,   401,
     402,   746,   404,   405,   406,   407,     0,   747,   409,     0,
       0,     0,   410,   411,   412,   413,     0,     0,     0,   414,
       0,     0,     0,   415,     0,   416,   417,   418,   419,   420,
       0,   421,   422,   423,   424,   425,   426,     0,     0,     0,
       0,     0,     0,   427,   428,     0,   429,     0,     0,   430,
       0,     0,   431,   432,   433,   748,   749,   434,   435,     0,
     436,   437,   750,   439,   440,   441,   751,   752,   442,   443,
     444,   445,   753,   446,   447,     0,   448,     0,   449,   450,
     451,   452,     0,   754,   453,   454,     0,   755,   756,   757,
     758,     0,     0,     0,     0,     0,   459,   460,   461,     0,
     759,   760,   761,   463,   464,   465,   762,   466,   467,   763,
     468,   469,     0,   470,   471,     0,     0,   472,     0,     0,
     473,     0,   474,     0,  1807,   476,   477,     0,     0,   765,
     766,   767,   768,   478,     0,     0,   479,   769,     0,   770,
     480,   481,   482,   483,   484,   771,     0,     0,     0,     0,
       0,     0,   486,   487,     0,   488,   489,   490,     0,     0,
     772,     0,     0,     0,     0,   773,   774,     0,     0,     0,
       0,   775,   776,     0,     0,   777,   778,     0,     0,   779,
     780,   139,     0,   672,   141,   142,   143,   144,     0,     0,
     145,     0,     0,     0,   146,     0,     0,   673,     0,   148,
     149,   150,   151,   152,   674,   154,     0,   155,     0,     0,
     675,   156,   676,   677,   678,   157,   679,     0,   158,   159,
     160,     0,   161,     0,   162,   163,     0,     0,   164,   680,
     681,   165,   166,     0,   167,   682,   683,   169,   170,     0,
     171,   172,   173,   174,   175,   684,   177,     0,   685,   179,
     686,   687,   688,   689,   690,     0,   185,   186,   187,   188,
     189,   190,   191,   192,     0,   193,   194,     0,   195,   196,
     197,   691,   199,     0,   200,   692,   693,   201,     0,     0,
     202,   694,   695,     0,   203,   696,   697,     0,   204,   205,
     206,   698,   699,   700,     0,     0,     0,     0,   701,   209,
     702,     0,     0,   703,   210,     0,   211,     0,     0,     0,
     212,     0,   213,   214,   215,   216,     0,     0,     0,   217,
       0,     0,   218,   219,   220,     0,     0,     0,   221,     0,
     222,   223,     0,   224,   225,   226,     0,     0,   227,   228,
       0,   229,   230,   231,   232,   233,   234,   704,     0,   235,
     236,   237,   705,   706,   238,   239,     0,   240,   241,   242,
     707,     0,   243,     0,     0,     0,   244,     0,   245,     0,
     246,     0,   247,   248,   708,   250,   709,   252,     0,   253,
       0,   710,     0,   254,   255,   256,     0,   257,   711,     0,
     258,   259,     0,     0,     0,   712,   261,   262,   263,   713,
       0,   264,   265,   266,     0,   267,     0,   268,     0,     0,
       0,   714,   269,   270,  2675,     0,     0,   271,     0,   272,
     273,     0,   274,   275,     0,     0,     0,   276,     0,     0,
     277,   278,   716,     0,     0,   280,     0,   717,   281,   282,
       0,     0,     0,     0,     0,   718,   284,     0,   285,     0,
     286,     0,   287,   288,     0,     0,   719,     0,     0,     0,
       0,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,     0,   304,   305,   306,
     720,   307,   308,   309,   310,   721,   311,   312,     0,     0,
       0,     0,   313,   314,   315,   316,   722,   318,     0,     0,
     723,   320,   724,   321,     0,   322,   725,   726,   727,   728,
     729,   327,   328,   329,   330,   331,     0,   730,   332,   333,
       0,     0,   334,   335,   336,   337,   731,   732,   733,   338,
     339,     0,   734,   735,     0,   340,   341,   736,     0,   343,
     344,   345,   346,     0,   347,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   348,   349,   350,     0,   737,   351,
       0,   352,   353,   354,   355,   738,   357,   358,   359,   360,
     739,   740,   363,   741,     0,   364,   365,   366,     0,   367,
       0,   368,   369,   370,   371,   372,     0,   742,   374,   375,
       0,     0,   376,     0,     0,     0,   377,   378,   379,   380,
     381,     0,     0,   382,   383,   384,   385,   386,     0,   387,
     388,     0,   389,   390,   391,   743,   744,   392,     0,   393,
       0,   394,   395,     0,   396,   397,     0,     0,   745,   398,
     399,   400,   401,   402,   746,   404,   405,   406,   407,     0,
     747,   409,     0,     0,     0,   410,   411,   412,   413,     0,
       0,     0,   414,     0,     0,     0,   415,     0,   416,   417,
     418,   419,   420,     0,   421,   422,   423,   424,   425,   426,
       0,     0,     0,     0,     0,     0,   427,   428,     0,   429,
       0,     0,   430,     0,     0,   431,   432,   433,   748,   749,
     434,   435,     0,   436,   437,   750,   439,   440,   441,   751,
     752,   442,   443,   444,   445,   753,   446,   447,     0,   448,
       0,   449,   450,   451,   452,     0,   754,   453,   454,     0,
     755,   756,   757,   758,     0,     0,     0,     0,     0,   459,
     460,   461,     0,   759,   760,   761,   463,   464,   465,   762,
     466,   467,   763,   468,   469,     0,   470,   471,     0,     0,
     472,     0,     0,   473,     0,   474,     0,   764,   476,   477,
       0,     0,   765,   766,   767,   768,   478,     0,     0,   479,
     769,     0,   770,   480,   481,   482,   483,   484,   771,     0,
       0,     0,     0,     0,     0,   486,   487,     0,   488,   489,
     490,     0,     0,   772,     0,     0,     0,     0,   773,   774,
       0,     0,     0,     0,   775,   776,     0,     0,   777,   778,
       0,     0,   779,   780,   139,     0,   672,   141,   142,   143,
     144,     0,     0,   145,     0,     0,     0,   146,     0,     0,
     673,     0,   148,   149,   150,   151,   152,   674,   154,     0,
     155,     0,     0,   675,   156,   676,   677,   678,   157,   679,
       0,   158,   159,   160,     0,   161,     0,   162,   163,     0,
       0,   164,   680,   681,   165,   166,     0,   167,   682,   683,
     169,   170,     0,   171,   172,   173,   174,   175,   684,   177,
       0,   685,   179,   686,   687,   688,   689,   690,     0,   185,
     186,   187,   188,   189,   190,   191,   192,     0,   193,   194,
       0,   195,   196,   197,   691,   199,     0,   200,   692,   693,
     201,     0,     0,   202,   694,   695,     0,   203,   696,   697,
       0,   204,   205,   206,   698,   699,   700,     0,     0,     0,
       0,   701,   209,   702,     0,     0,   703,   210,     0,   211,
       0,     0,     0,   212,     0,   213,   214,   215,   216,     0,
       0,     0,   217,     0,     0,   218,   219,   220,     0,     0,
       0,   221,     0,   222,   223,     0,   224,   225,   226,     0,
       0,   227,   228,     0,   229,   230,   231,   232,   233,   234,
     704,     0,   235,   236,   237,   705,   706,   238,   239,     0,
     240,   241,   242,   707,     0,   243,     0,     0,     0,   244,
       0,   245,     0,   246,     0,   247,   248,   708,   250,   709,
     252,     0,   253,     0,   710,     0,   254,   255,   256,     0,
     257,   711,     0,   258,   259,     0,     0,     0,   712,   261,
     262,   263,   713,     0,   264,   265,   266,     0,   267,     0,
     268,     0,     0,     0,   714,   269,   270,  2726,     0,     0,
     271,     0,   272,   273,     0,   274,   275,     0,     0,     0,
     276,     0,     0,   277,   278,   716,     0,     0,   280,     0,
     717,   281,   282,     0,     0,     0,     0,     0,   718,   284,
       0,   285,     0,   286,     0,   287,   288,     0,     0,   719,
       0,     0,     0,     0,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,     0,
     304,   305,   306,   720,   307,   308,   309,   310,   721,   311,
     312,     0,     0,     0,     0,   313,   314,   315,   316,   722,
     318,     0,     0,   723,   320,   724,   321,     0,   322,   725,
     726,   727,   728,   729,   327,   328,   329,   330,   331,     0,
     730,   332,   333,     0,     0,   334,   335,   336,   337,   731,
     732,   733,   338,   339,     0,   734,   735,     0,   340,   341,
     736,     0,   343,   344,   345,   346,     0,   347,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   348,   349,   350,
       0,   737,   351,     0,   352,   353,   354,   355,   738,   357,
     358,   359,   360,   739,   740,   363,   741,     0,   364,   365,
     366,     0,   367,     0,   368,   369,   370,   371,   372,     0,
     742,   374,   375,     0,     0,   376,     0,     0,     0,   377,
     378,   379,   380,   381,     0,     0,   382,   383,   384,   385,
     386,     0,   387,   388,     0,   389,   390,   391,   743,   744,
     392,     0,   393,     0,   394,   395,     0,   396,   397,     0,
       0,   745,   398,   399,   400,   401,   402,   746,   404,   405,
     406,   407,     0,   747,   409,     0,     0,     0,   410,   411,
     412,   413,     0,     0,     0,   414,     0,     0,     0,   415,
       0,   416,   417,   418,   419,   420,     0,   421,   422,   423,
     424,   425,   426,     0,     0,     0,     0,     0,     0,   427,
     428,     0,   429,     0,     0,   430,     0,     0,   431,   432,
     433,   748,   749,   434,   435,     0,   436,   437,   750,   439,
     440,   441,   751,   752,   442,   443,   444,   445,   753,   446,
     447,     0,   448,     0,   449,   450,   451,   452,     0,   754,
     453,   454,     0,   755,   756,   757,   758,     0,     0,     0,
       0,     0,   459,   460,   461,     0,   759,   760,   761,   463,
     464,   465,   762,   466,   467,   763,   468,   469,     0,   470,
     471,     0,     0,   472,     0,     0,   473,     0,   474,     0,
     764,   476,   477,     0,     0,   765,   766,   767,   768,   478,
       0,     0,   479,   769,     0,   770,   480,   481,   482,   483,
     484,   771,     0,     0,     0,     0,     0,     0,   486,   487,
       0,   488,   489,   490,     0,     0,   772,     0,     0,     0,
       0,   773,   774,     0,     0,     0,     0,   775,   776,     0,
       0,   777,   778,     0,     0,   779,   780,   139,     0,   672,
     141,   142,   143,   144,     0,     0,   145,     0,     0,     0,
     146,     0,     0,   673,     0,   148,   149,   150,   151,   152,
     674,   154,     0,   155,     0,     0,   675,   156,   676,   677,
     678,   157,   679,     0,   158,   159,   160,     0,   161,     0,
     162,   163,     0,     0,   164,   680,   681,   165,   166,     0,
     167,   682,   683,   169,   170,     0,   171,   172,   173,   174,
     175,   684,   177,     0,   685,   179,   686,   687,   688,   689,
     690,     0,   185,   186,   187,   188,   189,   190,   191,   192,
       0,   193,   194,     0,   195,   196,   197,   691,   199,     0,
     200,   692,   693,   201,     0,     0,   202,   694,   695,     0,
     203,   696,   697,     0,   204,   205,   206,   698,   699,   700,
       0,     0,     0,     0,   701,   209,   702,     0,     0,  3495,
     210,     0,   211,     0,     0,     0,   212,     0,   213,   214,
     215,   216,     0,     0,     0,   217,     0,     0,   218,   219,
     220,     0,     0,     0,   221,     0,   222,   223,     0,   224,
     225,   226,     0,     0,   227,   228,     0,   229,   230,   231,
     232,   233,   234,   704,     0,   235,   236,   237,   705,   706,
     238,   239,     0,   240,   241,   242,   707,     0,   243,     0,
       0,     0,   244,     0,   245,     0,   246,     0,   247,   248,
     708,   250,   709,   252,     0,   253,     0,   710,     0,   254,
     255,   256,     0,   257,   711,     0,   258,   259,     0,     0,
       0,   712,   261,   262,   263,   713,     0,   264,   265,   266,
       0,   267,     0,   268,     0,     0,     0,   714,   269,   270,
     715,     0,     0,   271,     0,   272,   273,     0,   274,   275,
       0,     0,     0,   276,     0,     0,   277,   278,   716,     0,
       0,   280,     0,   717,   281,   282,     0,     0,     0,     0,
       0,   718,   284,     0,   285,     0,   286,     0,   287,   288,
       0,     0,   719,     0,     0,     0,     0,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,     0,   304,   305,   306,   720,   307,   308,   309,
     310,   721,   311,   312,     0,     0,     0,     0,   313,   314,
     315,   316,   722,   318,     0,     0,   723,   320,   724,   321,
       0,   322,   725,   726,   727,   728,   729,   327,   328,   329,
     330,   331,     0,   730,   332,   333,     0,     0,   334,   335,
     336,   337,   731,   732,   733,   338,   339,     0,   734,   735,
       0,   340,   341,   736,     0,   343,   344,   345,   346,     0,
     347,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     348,   349,   350,     0,   737,   351,     0,   352,   353,   354,
     355,   738,   357,   358,   359,   360,   739,   740,   363,   741,
       0,   364,   365,   366,     0,   367,     0,   368,   369,   370,
     371,   372,     0,   742,   374,   375,     0,     0,   376,     0,
       0,     0,   377,   378,   379,   380,   381,     0,     0,   382,
     383,   384,   385,   386,     0,   387,   388,     0,   389,   390,
     391,   743,   744,   392,     0,   393,     0,   394,   395,     0,
     396,   397,     0,     0,   745,   398,   399,   400,   401,   402,
     746,   404,   405,   406,   407,     0,   747,   409,     0,     0,
       0,   410,   411,   412,   413,     0,     0,     0,   414,     0,
       0,     0,   415,     0,   416,   417,   418,   419,   420,     0,
     421,   422,   423,   424,   425,   426,     0,     0,     0,     0,
       0,     0,   427,   428,     0,   429,     0,     0,   430,     0,
       0,   431,   432,   433,   748,   749,   434,   435,     0,   436,
     437,   750,   439,   440,   441,   751,   752,   442,   443,   444,
     445,   753,   446,   447,     0,   448,     0,   449,   450,   451,
     452,     0,   754,   453,   454,     0,   755,   756,   757,   758,
       0,     0,     0,     0,     0,   459,   460,   461,     0,   759,
     760,   761,   463,   464,   465,   762,   466,   467,   763,   468,
     469,     0,   470,   471,     0,     0,   472,     0,     0,   473,
       0,   474,     0,   764,   476,   477,     0,     0,   765,   766,
     767,   768,   478,     0,     0,   479,   769,     0,   770,   480,
     481,   482,   483,   484,   771,     0,     0,     0,     0,     0,
       0,   486,   487,     0,   488,   489,   490,     0,     0,   772,
       0,     0,     0,     0,   773,   774,     0,     0,     0,     0,
     775,   776,     0,     0,   777,   778,     0,     0,   779,   780,
     139,     0,   672,   141,   142,   143,   144,     0,     0,   145,
       0,     0,     0,   146,     0,     0,   673,     0,   148,   149,
     150,   151,   152,   674,   154,     0,   155,     0,     0,   675,
     156,   676,   677,   678,   157,   679,     0,   158,   159,   160,
       0,   161,     0,   162,   163,     0,     0,   164,   680,   681,
     165,   166,     0,   167,   682,   683,   169,   170,     0,   171,
     172,   173,   174,   175,   684,   177,     0,   685,   179,   686,
     687,   688,   689,   690,     0,   185,   186,   187,   188,   189,
     190,   191,   192,     0,   193,   194,     0,   195,   196,   197,
     691,   199,     0,   200,   692,   693,   201,     0,     0,   202,
     694,   695,     0,   203,   696,   697,     0,   204,   205,   206,
     698,   699,   700,     0,     0,     0,     0,   701,   209,   702,
       0,     0,   703,   210,     0,   211,     0,     0,     0,   212,
       0,   213,   214,   215,   216,     0,     0,     0,   217,     0,
       0,   218,   219,   220,     0,     0,     0,   221,     0,   222,
     223,     0,   224,   225,   226,     0,     0,   227,   228,     0,
     229,   230,   231,   232,   233,   234,   704,     0,   235,   236,
     237,   705,   706,   238,   239,     0,   240,   241,   242,   707,
       0,   243,     0,     0,     0,   244,     0,   245,     0,   246,
       0,   247,   248,   708,   250,   709,   252,     0,   253,     0,
     710,     0,   254,   255,   256,     0,   257,   711,     0,   258,
     259,     0,     0,     0,   712,   261,   262,   263,   713,     0,
     264,   265,   266,     0,   267,     0,   268,     0,     0,     0,
     714,   269,   270,   715,     0,     0,   271,     0,   272,   273,
       0,   274,   275,     0,     0,     0,   276,     0,     0,   277,
     278,   716,     0,     0,   280,     0,   717,   281,   282,     0,
       0,     0,     0,     0,   718,   284,     0,   285,     0,   286,
       0,   287,   288,     0,     0,   719,     0,     0,     0,     0,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,     0,   304,   305,   306,   720,
     307,   308,   309,   310,   721,   311,   312,  4384,     0,     0,
       0,   313,   314,   315,   316,   722,   318,     0,     0,   723,
     320,   724,   321,     0,   322,   725,   726,   727,   728,   729,
     327,   328,   329,   330,   331,     0,   730,   332,   333,     0,
       0,   334,   335,   336,   337,   731,     0,   733,   338,   339,
       0,   734,   735,     0,   340,   341,   736,     0,   343,   344,
     345,   346,     0,   347,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   348,   349,   350,     0,   737,   351,     0,
     352,   353,   354,   355,   738,   357,   358,   359,   360,   739,
     740,   363,   741,     0,   364,   365,   366,     0,   367,     0,
     368,   369,   370,   371,   372,     0,   742,   374,   375,     0,
       0,   376,     0,     0,     0,   377,   378,   379,   380,   381,
       0,     0,   382,   383,   384,   385,   386,     0,   387,   388,
       0,   389,   390,   391,   743,   744,   392,     0,   393,     0,
     394,   395,     0,   396,   397,     0,     0,   745,   398,   399,
     400,   401,   402,   746,   404,   405,   406,   407,     0,   747,
     409,     0,     0,     0,   410,   411,   412,   413,     0,     0,
       0,   414,     0,     0,     0,   415,     0,   416,   417,   418,
     419,   420,     0,   421,   422,   423,   424,   425,   426,     0,
       0,     0,     0,     0,     0,   427,   428,     0,   429,     0,
       0,   430,     0,     0,   431,   432,   433,   748,   749,   434,
     435,     0,   436,   437,   750,   439,   440,   441,   751,   752,
     442,   443,   444,   445,   753,   446,   447,     0,   448,     0,
     449,   450,   451,   452,     0,   754,   453,   454,     0,   755,
     756,   757,   758,     0,     0,     0,     0,     0,   459,   460,
     461,     0,   759,   760,   761,   463,   464,   465,   762,   466,
     467,   763,   468,   469,     0,   470,   471,     0,     0,   472,
       0,     0,   473,     0,   474,     0,   764,   476,   477,     0,
       0,   765,   766,   767,   768,   478,     0,     0,   479,   769,
       0,   770,   480,   481,   482,   483,   484,   771,     0,     0,
       0,     0,     0,     0,   486,   487,     0,   488,   489,   490,
       0,     0,   772,     0,     0,     0,     0,   773,   774,     0,
       0,     0,     0,   775,   776,     0,     0,   777,   778,     0,
       0,   779,   780,   139,     0,   672,   141,   142,   143,   144,
       0,     0,   145,     0,     0,     0,   146,     0,     0,   673,
       0,   148,   149,   150,   151,   152,   674,   154,     0,   155,
       0,     0,   675,   156,   676,   677,   678,   157,   679,     0,
     158,   159,   160,     0,   161,     0,   162,   163,     0,     0,
     164,   680,   681,   165,   166,     0,   167,   682,   683,   169,
     170,     0,   171,   172,   173,   174,   175,   684,   177,     0,
     685,   179,   686,   687,   688,   689,   690,     0,   185,   186,
     187,   188,   189,   190,   191,   192,     0,   193,   194,     0,
     195,   196,   197,   691,   199,     0,   200,   692,   693,   201,
       0,     0,   202,   694,   695,     0,   203,   696,   697,     0,
     204,   205,   206,   698,   699,   700,     0,     0,     0,     0,
     701,   209,   702,     0,     0,   703,   210,     0,   211,     0,
       0,     0,   212,     0,   213,   214,   215,   216,     0,     0,
       0,   217,     0,     0,   218,   219,   220,     0,     0,     0,
     221,     0,   222,   223,     0,   224,   225,   226,     0,     0,
     227,   228,     0,   229,   230,   231,   232,   233,   234,   704,
       0,   235,   236,   237,   705,   706,   238,   239,     0,   240,
     241,   242,   707,     0,   243,     0,     0,     0,   244,     0,
     245,     0,   246,     0,   247,   248,   708,   250,   709,   252,
       0,   253,     0,   710,     0,   254,   255,   256,     0,   257,
     711,     0,   258,   259,     0,     0,     0,   712,   261,   262,
     263,   713,     0,   264,   265,   266,     0,   267,     0,   268,
       0,     0,     0,   714,   269,   270,   715,     0,     0,   271,
       0,   272,   273,     0,   274,   275,     0,     0,     0,   276,
       0,     0,   277,   278,   716,     0,     0,   280,     0,   717,
     281,   282,     0,     0,     0,     0,     0,   718,   284,     0,
     285,     0,   286,     0,   287,   288,     0,     0,   719,     0,
       0,     0,     0,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,     0,   304,
     305,   306,   720,   307,   308,   309,   310,   721,   311,   312,
       0,     0,     0,     0,   313,   314,   315,   316,   722,   318,
       0,     0,   723,   320,   724,   321,     0,   322,   725,   726,
     727,   728,   729,   327,   328,   329,   330,   331,     0,   730,
     332,   333,     0,     0,   334,   335,   336,   337,   731,     0,
     733,   338,   339,     0,   734,   735,     0,   340,   341,   736,
       0,   343,   344,   345,   346,     0,   347,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   348,   349,   350,     0,
     737,   351,     0,   352,   353,   354,   355,   738,   357,   358,
     359,   360,   739,   740,   363,   741,     0,   364,   365,   366,
       0,   367,     0,   368,   369,   370,   371,   372,     0,   742,
     374,   375,     0,     0,   376,     0,     0,     0,   377,   378,
     379,   380,   381,     0,     0,   382,   383,   384,   385,   386,
       0,   387,   388,     0,   389,   390,   391,   743,   744,   392,
       0,   393,     0,   394,   395,     0,   396,   397,     0,     0,
     745,   398,   399,   400,   401,   402,   746,   404,   405,   406,
     407,     0,   747,   409,     0,     0,     0,   410,   411,   412,
     413,     0,     0,     0,   414,     0,     0,     0,   415,     0,
     416,   417,   418,   419,   420,     0,   421,   422,   423,   424,
     425,   426,     0,     0,     0,     0,     0,     0,   427,   428,
       0,   429,     0,     0,   430,     0,     0,   431,   432,   433,
     748,   749,   434,   435,     0,   436,   437,   750,   439,   440,
     441,   751,   752,   442,   443,   444,   445,   753,   446,   447,
       0,   448,     0,   449,   450,   451,   452,     0,   754,   453,
     454,     0,   755,   756,   757,   758,     0,     0,     0,     0,
       0,   459,   460,   461,     0,   759,   760,   761,   463,   464,
     465,   762,   466,   467,   763,   468,   469,     0,   470,   471,
       0,     0,   472,     0,     0,   473,     0,   474,     0,   764,
     476,   477,     0,     0,   765,   766,   767,   768,   478,     0,
       0,   479,   769,     0,   770,   480,   481,   482,   483,   484,
     771,     0,     0,     0,     0,     0,     0,   486,   487,     0,
     488,   489,   490,     0,     0,   772,     0,     0,     0,     0,
     773,   774,     0,     0,     0,     0,   775,   776,     0,     0,
     777,   778,     0,     0,   779,   780,   139,     0,   672,   141,
     142,   143,   144,     0,     0,   145,     0,     0,     0,   146,
       0,     0,   673,     0,   148,   149,   150,   151,   152,   674,
     154,     0,   155,     0,     0,   675,   156,   676,   677,   678,
     157,   679,     0,   158,   159,   160,     0,   161,     0,   162,
     163,     0,     0,   164,   680,   681,   165,   166,     0,   167,
     682,   683,   169,   170,     0,   171,   172,   173,   174,   175,
     684,   177,     0,   685,   179,   686,   687,   688,   689,   690,
       0,   185,   186,   187,   188,   189,   190,   191,   192,     0,
     193,   194,     0,   195,   196,   197,   691,   199,     0,   200,
     692,   693,   201,     0,     0,   202,   694,   695,     0,   203,
     696,   697,     0,   204,   205,   206,   698,   699,   700,     0,
       0,     0,     0,   701,   209,   702,     0,     0,   703,   210,
       0,   211,     0,     0,     0,   212,     0,   213,   214,   215,
     216,     0,     0,     0,   217,     0,     0,   218,   219,   220,
       0,     0,     0,   221,     0,   222,   223,     0,   224,   225,
     226,     0,     0,   227,   228,     0,   229,   230,   231,   232,
     233,   234,   704,     0,   235,   236,   237,   705,   706,   238,
     239,     0,   240,   241,   242,   707,     0,   243,     0,     0,
       0,   244,     0,   245,     0,   246,     0,   247,   248,   708,
     250,   709,   252,     0,   253,     0,   710,     0,   254,   255,
     256,     0,   257,   711,     0,   258,   259,     0,     0,     0,
     712,   261,   262,   263,   713,     0,   264,   265,   266,     0,
     267,     0,   268,     0,     0,     0,   714,   269,   270,  1746,
       0,     0,   271,     0,   272,   273,     0,   274,   275,     0,
       0,     0,   276,     0,     0,   277,   278,   716,     0,     0,
     280,     0,   717,   281,   282,     0,     0,     0,     0,     0,
     718,   284,     0,   285,     0,   286,     0,   287,   288,     0,
       0,   719,     0,     0,     0,     0,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,     0,   304,   305,   306,   720,   307,   308,   309,   310,
     721,   311,   312,     0,     0,     0,     0,   313,   314,   315,
     316,   722,   318,     0,     0,   723,   320,   724,   321,     0,
     322,   725,   726,   727,   728,   729,   327,   328,   329,   330,
     331,     0,   730,   332,   333,     0,     0,   334,   335,   336,
     337,   731,     0,   733,   338,   339,     0,   734,   735,     0,
     340,   341,   736,     0,   343,   344,   345,   346,     0,   347,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   348,
     349,   350,     0,   737,   351,     0,   352,   353,   354,   355,
     738,   357,   358,   359,   360,   739,   740,   363,   741,     0,
     364,   365,   366,     0,   367,     0,   368,   369,   370,   371,
     372,     0,   742,   374,   375,     0,     0,   376,     0,     0,
       0,   377,   378,   379,   380,   381,     0,     0,   382,   383,
     384,   385,   386,     0,   387,   388,     0,   389,   390,   391,
     743,   744,   392,     0,   393,     0,   394,   395,     0,   396,
     397,     0,     0,   745,   398,   399,   400,   401,   402,   746,
     404,   405,   406,   407,     0,   747,   409,     0,     0,     0,
     410,   411,   412,   413,     0,     0,     0,   414,     0,     0,
       0,   415,     0,   416,   417,   418,   419,   420,     0,   421,
     422,   423,   424,   425,   426,     0,     0,     0,     0,     0,
       0,   427,   428,     0,   429,     0,     0,   430,     0,     0,
     431,   432,   433,   748,   749,   434,   435,     0,   436,   437,
     750,   439,   440,   441,   751,   752,   442,   443,   444,   445,
     753,   446,   447,     0,   448,     0,   449,   450,   451,   452,
       0,   754,   453,   454,     0,   755,   756,   757,   758,     0,
       0,     0,     0,     0,   459,   460,   461,     0,   759,   760,
     761,   463,   464,   465,   762,   466,   467,   763,   468,   469,
       0,   470,   471,     0,     0,   472,     0,     0,   473,     0,
     474,     0,   764,   476,   477,     0,     0,   765,   766,   767,
     768,   478,     0,     0,   479,   769,     0,   770,   480,   481,
     482,   483,   484,   771,     0,     0,     0,     0,     0,     0,
     486,   487,     0,   488,   489,   490,     0,     0,   772,     0,
       0,     0,     0,   773,   774,     0,     0,     0,     0,   775,
     776,     0,     0,   777,   778,     0,     0,   779,   780,   139,
       0,   672,   141,   142,   143,   144,     0,     0,   145,     0,
       0,     0,   146,     0,     0,   673,     0,   148,   149,   150,
     151,   152,   674,   154,     0,   155,     0,     0,   675,   156,
     676,   677,   678,   157,   679,     0,   158,   159,   160,     0,
     161,     0,   162,   163,     0,     0,   164,   680,   681,   165,
     166,     0,   167,   682,   683,   169,   170,     0,   171,   172,
     173,   174,   175,   684,   177,     0,   685,   179,   686,   687,
     688,   689,   690,     0,   185,   186,   187,   188,   189,   190,
     191,   192,     0,   193,   194,     0,   195,   196,   197,   691,
     199,     0,   200,   692,   693,   201,     0,     0,   202,   694,
     695,     0,   203,   696,   697,     0,   204,   205,   206,   698,
     699,   700,     0,     0,     0,     0,   701,   209,   702,     0,
       0,   703,   210,     0,   211,     0,     0,     0,   212,     0,
     213,   214,   215,   216,     0,     0,     0,   217,     0,     0,
     218,   219,   220,     0,     0,     0,   221,     0,   222,   223,
       0,   224,   225,   226,     0,     0,   227,   228,     0,   229,
     230,   231,   232,   233,   234,   704,     0,   235,   236,   237,
     705,   706,   238,   239,     0,   240,   241,   242,   707,     0,
     243,     0,     0,     0,   244,     0,   245,     0,   246,     0,
     247,   248,   708,   250,   709,   252,     0,   253,     0,   710,
       0,   254,   255,   256,     0,   257,   711,     0,   258,   259,
       0,     0,     0,   712,   261,   262,   263,   713,     0,   264,
     265,   266,     0,   267,     0,   268,     0,     0,     0,   714,
     269,   270,  1748,     0,     0,   271,     0,   272,   273,     0,
     274,   275,     0,     0,     0,   276,     0,     0,   277,   278,
     716,     0,     0,   280,     0,   717,   281,   282,     0,     0,
       0,     0,     0,   718,   284,     0,   285,     0,   286,     0,
     287,   288,     0,     0,   719,     0,     0,     0,     0,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,     0,   304,   305,   306,   720,   307,
     308,   309,   310,   721,   311,   312,     0,     0,     0,     0,
     313,   314,   315,   316,   722,   318,     0,     0,   723,   320,
     724,   321,     0,   322,   725,   726,   727,   728,   729,   327,
     328,   329,   330,   331,     0,   730,   332,   333,     0,     0,
     334,   335,   336,   337,   731,     0,   733,   338,   339,     0,
     734,   735,     0,   340,   341,   736,     0,   343,   344,   345,
     346,     0,   347,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   348,   349,   350,     0,   737,   351,     0,   352,
     353,   354,   355,   738,   357,   358,   359,   360,   739,   740,
     363,   741,     0,   364,   365,   366,     0,   367,     0,   368,
     369,   370,   371,   372,     0,   742,   374,   375,     0,     0,
     376,     0,     0,     0,   377,   378,   379,   380,   381,     0,
       0,   382,   383,   384,   385,   386,     0,   387,   388,     0,
     389,   390,   391,   743,   744,   392,     0,   393,     0,   394,
     395,     0,   396,   397,     0,     0,   745,   398,   399,   400,
     401,   402,   746,   404,   405,   406,   407,     0,   747,   409,
       0,     0,     0,   410,   411,   412,   413,     0,     0,     0,
     414,     0,     0,     0,   415,     0,   416,   417,   418,   419,
     420,     0,   421,   422,   423,   424,   425,   426,     0,     0,
       0,     0,     0,     0,   427,   428,     0,   429,     0,     0,
     430,     0,     0,   431,   432,   433,   748,   749,   434,   435,
       0,   436,   437,   750,   439,   440,   441,   751,   752,   442,
     443,   444,   445,   753,   446,   447,     0,   448,     0,   449,
     450,   451,   452,     0,   754,   453,   454,     0,   755,   756,
     757,   758,     0,     0,     0,     0,     0,   459,   460,   461,
       0,   759,   760,   761,   463,   464,   465,   762,   466,   467,
     763,   468,   469,     0,   470,   471,     0,     0,   472,     0,
       0,   473,     0,   474,     0,   764,   476,   477,     0,     0,
     765,   766,   767,   768,   478,     0,     0,   479,   769,     0,
     770,   480,   481,   482,   483,   484,   771,     0,     0,     0,
       0,     0,     0,   486,   487,     0,   488,   489,   490,     0,
       0,   772,     0,     0,     0,     0,   773,   774,     0,     0,
       0,     0,   775,   776,     0,     0,   777,   778,     0,     0,
     779,   780,   139,     0,   140,   141,   142,   143,   144,     0,
       0,   145,     0,     0,     0,   146,     0,     0,   147,     0,
     148,   149,   150,   151,   152,   153,   154,     0,   155,     0,
       0,     0,   156,   676,     0,     0,   157,     0,     0,   158,
     159,   160,     0,   161,     0,   162,   163,     0,     0,   164,
       0,     0,   165,   166,     0,   167,   168,     0,   169,   170,
       0,   171,   172,   173,   174,   175,   176,   177,     0,   178,
     179,   180,   181,   182,   183,   184,     0,   185,   186,   187,
     188,   189,   190,   191,   192,     0,   193,   194,     0,   195,
     196,   197,   198,   199,     0,   200,     0,     0,   201,     0,
       0,   202,     0,     0,     0,   203,     0,     0,     0,   204,
     205,   206,     0,     0,  2390,     0,     0,     0,     0,   208,
     209,   702,     0,     0,     0,   210,     0,   211,     0,     0,
       0,   212,     0,   213,   214,   215,   216,     0,     0,     0,
     217,     0,     0,   218,   219,   220,     0,     0,     0,   221,
       0,   222,   223,     0,   224,   225,   226,     0,     0,   227,
     228,     0,   229,   230,   231,   232,   233,   234,     0,     0,
     235,   236,   237,     0,   706,   238,   239,     0,   240,   241,
     242,   707,     0,   243,     0,     0,     0,   244,     0,   245,
       0,   246,     0,   247,   248,   249,   250,   251,   252,     0,
     253,     0,     0,     0,   254,   255,   256,     0,   257,   711,
       0,   258,   259,     0,     0,     0,   260,   261,   262,   263,
       0,     0,   264,   265,   266,     0,   267,     0,   268,     0,
       0,     0,     0,   269,   270,     0,     0,     0,   271,     0,
     272,   273,     0,   274,   275,     0,     0,     0,   276,     0,
       0,   277,   278,   279,     0,     0,   280,     0,     0,   281,
     282,     0,     0,     0,     0,     0,   283,   284,     0,   285,
       0,   286,     0,   287,   288,     0,     0,   719,     0,     0,
       0,     0,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,     0,   304,   305,
     306,     0,   307,   308,   309,   310,     0,   311,   312,     0,
       0,     0,     0,   313,   314,   315,   316,   317,   318,     0,
       0,   319,   320,     0,   321,     0,   322,     0,   323,   324,
     325,   326,   327,   328,   329,   330,   331,     0,   730,   332,
     333,     0,     0,   334,   335,   336,   337,     0,     0,     0,
     338,   339,     0,   734,   735,     0,   340,   341,   342,     0,
     343,   344,   345,   346,     0,   347,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   348,   349,   350,     0,     0,
     351,     0,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,     0,     0,   364,   365,   366,     0,
     367,     0,   368,   369,   370,   371,   372,     0,   373,   374,
     375,     0,     0,   376,     0,     0,     0,   377,   378,   379,
     380,   381,     0,     0,   382,   383,   384,   385,   386,     0,
     387,   388,     0,   389,   390,   391,     0,     0,   392,     0,
     393,     0,   394,   395,     0,   396,   397,     0,     0,     0,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
       0,   408,   409,     0,     0,     0,   410,   411,   412,   413,
       0,     0,     0,   414,     0,     0,     0,   415,     0,   416,
     417,   418,   419,   420,     0,   421,   422,   423,   424,   425,
     426,     0,     0,     0,     0,     0,     0,   427,   428,     0,
     429,     0,     0,   430,     0,     0,   431,   432,   433,     0,
       0,   434,   435,     0,   436,   437,   438,   439,   440,   441,
       0,     0,   442,   443,   444,   445,     0,   446,   447,     0,
     448,     0,   449,   450,   451,   452,     0,   754,   453,   454,
       0,  2391,   456,   457,  2392,     0,     0,     0,     0,     0,
     459,   460,   461,     0,     0,   760,   462,   463,   464,   465,
     762,   466,   467,   763,   468,   469,     0,   470,   471,     0,
       0,   472,     0,     0,   473,     0,   474,     0,   475,   476,
     477,     0,     0,     0,     0,     0,     0,   478,     0,     0,
     479,     0,     0,     0,   480,   481,   482,   483,   484,   485,
       0,     0,     0,     0,     0,     0,   486,   487,     0,   488,
     489,   490,     0,     0,   491,     0,     0,     0,     0,   139,
       0,   140,   141,   142,   143,   144,     0,     0,   145,     0,
       0,     0,   146,   779,   780,   147,     0,   148,   149,   150,
     151,   152,   153,   154,     0,   155,     0,     0,     0,   156,
       0,     0,     0,   157,     0,     0,   158,   159,   160,     0,
     161,     0,   162,   163,     0,     0,   164,     0,     0,   165,
     166,     0,   167,   168,     0,   169,   170,     0,   171,   172,
     173,   174,   175,   176,   177,     0,   178,   179,   180,   181,
     182,   183,   184,     0,   185,   186,   187,   188,   189,   190,
     191,   192,     0,   193,   194,  2518,   195,   196,   197,   198,
     199,     0,   200,     0,     0,   201,     0,     0,   202,     0,
       0,     0,   203,     0,     0,     0,   204,   205,   206,     0,
       0,   207,     0,     0,     0,     0,   208,   209,     0,     0,
       0,     0,   210,     0,   211,     0,     0,     0,   212,     0,
     213,   214,   215,   216,     0,     0,     0,   217,     0,     0,
     218,   219,   220,     0,     0,     0,   221,     0,   222,   223,
       0,   224,   225,   226,     0,     0,   227,   228,     0,   229,
     230,   231,   232,   233,   234,     0,     0,   235,   236,   237,
       0,     0,   238,   239,     0,   240,   241,   242,     0,     0,
     243,     0,     0,     0,   244,     0,   245,   505,   246,     0,
     247,   248,   249,   250,   251,   252,     0,   253,     0,     0,
       0,   254,   255,   256,     0,   257,     0,     0,   258,   259,
       0,     0,     0,   260,   261,   262,   263,     0,     0,   264,
     265,   266,  2089,   267,     0,   268,     0,     0,     0,     0,
     269,   270,     0,     0,     0,   271,     0,   272,   273,     0,
     274,   275,     0,     0,     0,   276,  2090,     0,   277,   278,
     279,     0,     0,   280,     0,     0,   281,   282,     0,  3091,
       0,     0,     0,   283,   284,     0,   285,     0,   286,     0,
     287,   288,     0,     0,     0,     0,     0,     0,     0,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,     0,   304,   305,   306,     0,   307,
     308,   309,   310,     0,   311,   312,     0,     0,     0,     0,
     313,   314,   315,   316,   317,   318,     0,     0,   319,   320,
       0,   321,     0,   322,     0,   323,   324,   325,   326,   327,
     328,   329,   330,   331,     0,     0,   332,   333,     0,     0,
     334,   335,   336,   337,     0,     0,     0,   338,   339,     0,
       0,     0,     0,   340,   341,   342,     0,   343,   344,   345,
     346,     0,   347,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   348,   349,   350,     0,     0,   351,     0,   352,
     353,   354,  3092,   356,   357,   358,   359,   360,   361,   362,
     363,     0,     0,   364,   365,   366,     0,   367,     0,   368,
     369,   370,   371,   372,     0,   373,   374,   375,     0,     0,
     376,     0,     0,     0,   377,   378,   379,   380,   381,     0,
       0,   382,   383,   384,   385,   386,     0,   387,   388,     0,
     389,   390,   391,     0,     0,   392,     0,   393,     0,   394,
     395,     0,   396,   397,     0,     0,     0,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,     0,   408,   409,
    -444,     0,     0,   410,   411,   412,   413,     0,     0,     0,
     414,     0,     0,     0,   415,     0,   416,   417,   418,   419,
     420,     0,   421,   422,   423,   424,   425,   426,   508,     0,
       0,     0,     0,     0,   427,   428,     0,   429,     0,     0,
     430,     0,     0,   431,   432,   433,     0,     0,   434,   435,
       0,   436,   437,   438,   439,   440,   441,     0,     0,   442,
     443,   444,   445,     0,   446,   447,     0,   448,     0,   449,
     450,   451,   452,     0,     0,   453,   454,     0,   455,   456,
     457,   458,     0,     0,     0,     0,     0,   459,   460,   461,
       0,     0,     0,   462,   463,   464,   465,     0,   466,   467,
       0,   468,   469,     0,   470,   471,     0,     0,   472,     0,
       0,   473,     0,   474,     0,   475,   476,   477,     0,     0,
       0,     0,     0,     0,   478,     0,     0,   479,     0,     0,
       0,   480,   481,   482,   483,   484,   485,     0,     0,     0,
       0,     0,     0,   486,   487,     0,   488,   489,   490,     0,
       0,   491,     0,     0,   139,     0,   140,   141,   142,   143,
     144,     0,     0,   145,     0,     0,     0,   146,     0,     0,
     147,  2585,   148,   149,   150,   151,   152,   153,   154,     0,
     155,     0,     0,     0,   156,     0,     0,     0,   157,     0,
       0,   158,   159,   160,     0,   161,     0,   162,   163,     0,
       0,   164,     0,     0,   165,   166,     0,   167,   168,     0,
     169,   170,     0,   171,   172,   173,   174,   175,   176,   177,
       0,   178,   179,   180,   181,   182,   183,   184,     0,   185,
     186,   187,   188,   189,   190,   191,   192,     0,   193,   194,
    2518,   195,   196,   197,   198,   199,     0,   200,     0,     0,
     201,     0,     0,   202,     0,     0,     0,   203,     0,     0,
       0,   204,   205,   206,     0,     0,   207,     0,     0,     0,
       0,   208,   209,     0,     0,     0,     0,   210,     0,   211,
       0,     0,     0,   212,     0,   213,   214,   215,   216,     0,
       0,     0,   217,     0,     0,   218,   219,   220,     0,     0,
       0,   221,     0,   222,   223,     0,   224,   225,   226,     0,
       0,   227,   228,     0,   229,   230,   231,   232,   233,   234,
       0,     0,   235,   236,   237,     0,     0,   238,   239,     0,
     240,   241,   242,     0,     0,   243,     0,     0,     0,   244,
       0,   245,   505,   246,     0,   247,   248,   249,   250,   251,
     252,     0,   253,     0,     0,     0,   254,   255,   256,     0,
     257,     0,     0,   258,   259,     0,     0,     0,   260,   261,
     262,   263,     0,     0,   264,   265,   266,  2089,   267,     0,
     268,     0,     0,     0,     0,   269,   270,     0,     0,     0,
     271,     0,   272,   273,     0,   274,   275,     0,     0,     0,
     276,  2090,     0,   277,   278,   279,     0,     0,   280,     0,
       0,   281,   282,     0,     0,     0,     0,     0,   283,   284,
       0,   285,     0,   286,     0,   287,   288,     0,     0,     0,
       0,     0,     0,     0,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,     0,
     304,   305,   306,     0,   307,   308,   309,   310,     0,   311,
     312,     0,     0,     0,     0,   313,   314,   315,   316,   317,
     318,     0,     0,   319,   320,     0,   321,     0,   322,     0,
     323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
       0,   332,   333,     0,     0,   334,   335,   336,   337,     0,
       0,     0,   338,   339,     0,     0,     0,     0,   340,   341,
     342,     0,   343,   344,   345,   346,     0,   347,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   348,   349,   350,
       0,     0,   351,     0,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,     0,     0,   364,   365,
     366,     0,   367,     0,   368,   369,   370,   371,   372,     0,
     373,   374,   375,     0,     0,   376,     0,     0,     0,   377,
     378,   379,   380,   381,     0,     0,   382,   383,   384,   385,
     386,     0,   387,   388,     0,   389,   390,   391,     0,     0,
     392,     0,   393,     0,   394,   395,     0,   396,   397,     0,
       0,     0,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,     0,   408,   409,     0,     0,     0,   410,   411,
     412,   413,     0,     0,     0,   414,     0,     0,     0,   415,
       0,   416,   417,   418,   419,   420,     0,   421,   422,   423,
     424,   425,   426,   508,     0,     0,     0,     0,     0,   427,
     428,     0,   429,     0,     0,   430,     0,     0,   431,   432,
     433,     0,     0,   434,   435,     0,   436,   437,   438,   439,
     440,   441,     0,     0,   442,   443,   444,   445,     0,   446,
     447,     0,   448,     0,   449,   450,   451,   452,     0,     0,
     453,   454,     0,   455,   456,   457,   458,     0,     0,     0,
       0,     0,   459,   460,   461,     0,     0,     0,   462,   463,
     464,   465,     0,   466,   467,     0,   468,   469,     0,   470,
     471,     0,     0,   472,     0,     0,   473,     0,   474,     0,
     475,   476,   477,     0,     0,     0,     0,     0,     0,   478,
       0,     0,   479,     0,     0,     0,   480,   481,   482,   483,
     484,   485,     0,     0,     0,     0,     0,     0,   486,   487,
       0,   488,   489,   490,     0,     0,   491,     0,     0,   139,
       0,   140,   141,   142,   143,   144,     0,     0,   145,     0,
       0,     0,   146,     0,     0,   147,  2585,   148,   149,   150,
     151,   152,   153,   154,     0,   155,     0,     0,     0,   156,
       0,     0,     0,   157,     0,     0,   158,   159,   160,     0,
     161,     0,   162,   163,     0,     0,   164,     0,     0,   165,
     166,     0,   167,   168,     0,   169,   170,     0,   171,   172,
     173,   174,   175,   176,   177,     0,   178,   179,   180,   181,
     182,   183,   184,     0,   185,   186,   187,   188,   189,   190,
     191,   192,     0,   193,   194,     0,   195,   196,   197,   198,
     199,     0,   200,     0,     0,   201,     0,     0,   202,     0,
       0,     0,   203,     0,     0,     0,   204,   205,   206,     0,
       0,   207,     0,     0,     0,     0,   208,   209,     0,     0,
       0,     0,   210,     0,   211,     0,     0,     0,   212,     0,
     213,   214,   215,   216,     0,     0,     0,   217,     0,     0,
     218,   219,   220,     0,     0,     0,   221,     0,   222,   223,
       0,   224,   225,   226,     0,     0,   227,   228,     0,   229,
     230,   231,   232,   233,   234,     0,     0,   235,   236,   237,
       0,     0,   238,   239,     0,   240,   241,   242,     0,     0,
     243,     0,     0,     0,   244,     0,   245,     0,   246,     0,
     247,   248,   249,   250,   251,   252,     0,   253,     0,     0,
       0,   254,   255,   256,     0,   257,     0,     0,   258,   259,
       0,     0,     0,   260,   261,   262,   263,     0,     0,   264,
     265,   266,     0,   267,     0,   268,     0,     0,     0,     0,
     269,   270,     0,     0,     0,   271,     0,   272,   273,     0,
     274,   275,     0,     0,     0,   276,     0,     0,   277,   278,
     279,     0,     0,   280,     0,     0,   281,   282,     0,     0,
       0,     0,     0,   283,   284,     0,   285,     0,   286,     0,
     287,   288,     0,     0,     0,     0,     0,     0,     0,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,     0,   304,   305,   306,     0,   307,
     308,   309,   310,     0,   311,   312,     0,     0,     0,     0,
     313,   314,   315,   316,   317,   318,     0,     0,   319,   320,
       0,   321,     0,   322,     0,   323,   324,   325,   326,   327,
     328,   329,   330,   331,     0,     0,   332,   333,     0,     0,
     334,   335,   336,   337,     0,     0,     0,   338,   339,     0,
       0,     0,     0,   340,   341,   342,     0,   343,   344,   345,
     346,     0,   347,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   348,   349,   350,     0,     0,   351,     0,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,     0,     0,   364,   365,   366,     0,   367,     0,   368,
     369,   370,   371,   372,     0,   373,   374,   375,     0,     0,
     376,     0,     0,     0,   377,   378,   379,   380,   381,     0,
       0,   382,   383,   384,   385,   386,     0,   387,   388,     0,
     389,   390,   391,     0,     0,   392,     0,   393,     0,   394,
     395,     0,   396,   397,     0,     0,     0,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,     0,   408,   409,
    2379,     0,     0,   410,   411,   412,   413,     0,     0,     0,
     414,     0,     0,     0,   415,     0,   416,   417,   418,   419,
     420,     0,   421,   422,   423,   424,   425,   426,     0,     0,
       0,     0,     0,     0,   427,   428,     0,   429,     0,     0,
     430,     0,     0,   431,   432,   433,     0,     0,   434,   435,
       0,   436,   437,   438,   439,   440,   441,     0,     0,   442,
     443,   444,   445,     0,   446,   447,     0,   448,     0,   449,
     450,   451,   452,     0,     0,   453,   454,     0,   455,   456,
     457,   458,     0,     0,     0,     0,     0,   459,   460,   461,
       0,     0,     0,   462,   463,   464,   465,     0,   466,   467,
       0,   468,   469,     0,   470,   471,     0,     0,   472,     0,
       0,   473,     0,   474,     0,   475,   476,   477,     0,     0,
       0,     0,     0,     0,   478,     0,     0,   479,     0,     0,
       0,   480,   481,   482,   483,   484,   485,     0,     0,     0,
       0,     0,     0,   486,   487,     0,   488,   489,   490,     0,
       0,   491,     0,     0,   139,     0,   140,   141,   142,   143,
     144,     0,     0,   145,  2816,     0,     0,   146,     0,     0,
     147,   780,   148,   149,   150,   151,   152,   153,   154,     0,
     155,     0,     0,     0,   156,     0,     0,     0,   157,     0,
       0,   158,   159,   160,     0,   161,     0,   162,   163,     0,
       0,   164,     0,     0,   165,   166,     0,   167,   168,     0,
     169,   170,     0,   171,   172,   173,   174,   175,   176,   177,
       0,   178,   179,   180,   181,   182,   183,   184,     0,   185,
     186,   187,   188,   189,   190,   191,   192,     0,   193,   194,
       0,   195,   196,   197,   198,   199,     0,   200,     0,     0,
     201,     0,     0,   202,     0,     0,     0,   203,     0,     0,
       0,   204,   205,   206,     0,     0,   207,     0,     0,     0,
       0,   208,   209,     0,     0,     0,     0,   210,     0,   211,
       0,     0,     0,   212,     0,   213,   214,   215,   216,     0,
       0,     0,   217,     0,     0,   218,   219,   220,     0,     0,
       0,   221,     0,   222,   223,     0,   224,   225,   226,     0,
       0,   227,   228,     0,   229,   230,   231,   232,   233,   234,
       0,     0,   235,   236,   237,     0,     0,   238,   239,     0,
     240,   241,   242,     0,     0,   243,     0,     0,     0,   244,
       0,   245,     0,   246,     0,   247,   248,   249,   250,   251,
     252,     0,   253,     0,     0,     0,   254,   255,   256,     0,
     257,     0,     0,   258,   259,     0,     0,     0,   260,   261,
     262,   263,     0,     0,   264,   265,   266,     0,   267,     0,
     268,     0,     0,     0,     0,   269,   270,     0,     0,     0,
     271,     0,   272,   273,     0,   274,   275,     0,     0,     0,
     276,     0,     0,   277,   278,   279,     0,     0,   280,     0,
       0,   281,   282,     0,     0,     0,     0,     0,   283,   284,
       0,   285,     0,   286,     0,   287,   288,     0,     0,     0,
       0,     0,     0,     0,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,     0,
     304,   305,   306,     0,   307,   308,   309,   310,     0,   311,
     312,     0,     0,     0,     0,   313,   314,   315,   316,   317,
     318,     0,     0,   319,   320,     0,   321,     0,   322,     0,
     323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
       0,   332,   333,     0,     0,   334,   335,   336,   337,     0,
       0,     0,   338,   339,     0,     0,     0,     0,   340,   341,
     342,     0,   343,   344,   345,   346,     0,   347,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   348,   349,   350,
       0,     0,   351,     0,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,     0,     0,   364,   365,
     366,     0,   367,     0,   368,   369,   370,   371,   372,     0,
     373,   374,   375,     0,     0,   376,     0,     0,     0,   377,
     378,   379,   380,   381,     0,     0,   382,   383,   384,   385,
     386,     0,   387,   388,     0,   389,   390,   391,     0,     0,
     392,     0,   393,     0,   394,   395,     0,   396,   397,     0,
       0,     0,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,     0,   408,   409,     0,     0,     0,   410,   411,
     412,   413,     0,     0,     0,   414,     0,     0,     0,   415,
       0,   416,   417,   418,   419,   420,     0,   421,   422,   423,
     424,   425,   426,     0,     0,     0,     0,     0,     0,   427,
     428,     0,   429,     0,     0,   430,     0,     0,   431,   432,
     433,     0,     0,   434,   435,     0,   436,   437,   438,   439,
     440,   441,     0,     0,   442,   443,   444,   445,     0,   446,
     447,     0,   448,     0,   449,   450,   451,   452,     0,     0,
     453,   454,     0,   455,   456,   457,   458,     0,     0,     0,
       0,     0,   459,   460,   461,     0,     0,     0,   462,   463,
     464,   465,     0,   466,   467,     0,   468,   469,     0,   470,
     471,     0,     0,   472,     0,     0,   473,     0,   474,     0,
     475,   476,   477,     0,     0,     0,     0,     0,     0,   478,
       0,     0,   479,     0,     0,     0,   480,   481,   482,   483,
     484,   485,     0,     0,     0,     0,     0,     0,   486,   487,
       0,   488,   489,   490,     0,     0,   491,     0,     0,     0,
       0,   139,     0,   140,   141,   142,   143,   144,     0,  4511,
     145,     0,     0,     0,   146,  4512,   780,   147,     0,   148,
     149,   150,   151,   152,   153,   154,     0,   155,     0,     0,
       0,   156,     0,     0,     0,   157,     0,     0,   158,   159,
     160,     0,   161,     0,   162,   163,     0,     0,   164,     0,
       0,   165,   166,     0,   167,   168,     0,   169,   170,     0,
     171,   172,   173,   174,   175,   176,   177,     0,   178,   179,
     180,   181,   182,   183,   184,     0,   185,   186,   187,   188,
     189,   190,   191,   192,     0,   193,   194,     0,   195,   196,
     197,   198,   199,     0,   200,     0,     0,   201,     0,     0,
     202,     0,     0,     0,   203,     0,     0,     0,   204,   205,
     206,     0,     0,   207,     0,     0,     0,     0,   208,   209,
       0,     0,     0,     0,   210,     0,   211,     0,     0,     0,
     212,     0,   213,   214,   215,   216,     0,     0,     0,   217,
       0,     0,   218,   219,   220,     0,     0,     0,   221,     0,
     222,   223,     0,   224,   225,   226,     0,     0,   227,   228,
       0,   229,   230,   231,   232,   233,   234,     0,     0,   235,
     236,   237,     0,     0,   238,   239,     0,   240,   241,   242,
       0,     0,   243,     0,     0,     0,   244,     0,   245,     0,
     246,     0,   247,   248,   249,   250,   251,   252,     0,   253,
       0,     0,     0,   254,   255,   256,     0,   257,     0,     0,
     258,   259,     0,     0,     0,   260,   261,   262,   263,     0,
       0,   264,   265,   266,     0,   267,     0,   268,     0,     0,
       0,     0,   269,   270,     0,     0,     0,   271,     0,   272,
     273,     0,   274,   275,     0,     0,     0,   276,     0,     0,
     277,   278,   279,     0,     0,   280,     0,     0,   281,   282,
       0,     0,     0,     0,     0,   283,   284,     0,   285,     0,
     286,     0,   287,   288,     0,     0,     0,     0,     0,     0,
       0,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,     0,   304,   305,   306,
       0,   307,   308,   309,   310,     0,   311,   312,     0,     0,
       0,     0,   313,   314,   315,   316,   317,   318,     0,     0,
     319,   320,     0,   321,     0,   322,     0,   323,   324,   325,
     326,   327,   328,   329,   330,   331,     0,     0,   332,   333,
       0,     0,   334,   335,   336,   337,     0,     0,     0,   338,
     339,     0,     0,     0,     0,   340,   341,   342,     0,   343,
     344,   345,   346,     0,   347,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   348,   349,   350,     0,     0,   351,
       0,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,     0,     0,   364,   365,   366,     0,   367,
       0,   368,   369,   370,   371,   372,     0,   373,   374,   375,
       0,     0,   376,     0,     0,     0,   377,   378,   379,   380,
     381,     0,     0,   382,   383,   384,   385,   386,     0,   387,
     388,     0,   389,   390,   391,     0,     0,   392,     0,   393,
       0,   394,   395,     0,   396,   397,     0,     0,     0,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,     0,
     408,   409,     0,     0,     0,   410,   411,   412,   413,     0,
       0,     0,   414,     0,     0,     0,   415,     0,   416,   417,
     418,   419,   420,     0,   421,   422,   423,   424,   425,   426,
       0,     0,     0,     0,     0,     0,   427,   428,     0,   429,
       0,     0,   430,     0,     0,   431,   432,   433,     0,     0,
     434,   435,     0,   436,   437,   438,   439,   440,   441,     0,
       0,   442,   443,   444,   445,     0,   446,   447,     0,   448,
       0,   449,   450,   451,   452,     0,     0,   453,   454,     0,
     455,   456,   457,   458,     0,     0,     0,     0,     0,   459,
     460,   461,     0,     0,     0,   462,   463,   464,   465,     0,
     466,   467,     0,   468,   469,     0,   470,   471,     0,     0,
     472,     0,     0,   473,     0,   474,     0,   475,   476,   477,
       0,     0,     0,     0,     0,     0,   478,     0,     0,   479,
       0,     0,     0,   480,   481,   482,   483,   484,   485,     0,
       0,     0,     0,     0,     0,   486,   487,     0,   488,   489,
     490,     0,     0,   491,     0,     0,     0,     0,   139,     0,
     140,   141,   142,   143,   144,  1144,     0,   145,     0,     0,
       0,   146,     0,   780,   147,     0,   148,   149,   150,   151,
     152,   153,   154,     0,   155,     0,     0,     0,   156,     0,
       0,     0,   157,     0,     0,   158,   159,   160,     0,   161,
       0,   162,   163,     0,     0,   164,     0,     0,   165,   166,
       0,   167,   168,     0,   169,   170,     0,   171,   172,   173,
     174,   175,   176,   177,     0,   178,   179,   180,   181,   182,
     183,   184,     0,   185,   186,   187,   188,   189,   190,   191,
     192,     0,   193,   194,     0,   195,   196,   197,   198,   199,
       0,   200,     0,     0,   201,     0,     0,   202,     0,     0,
       0,   203,     0,     0,     0,   204,   205,   206,     0,     0,
     207,     0,     0,     0,     0,   208,   209,     0,     0,     0,
       0,   210,     0,   211,     0,     0,     0,   212,     0,   213,
     214,   215,   216,     0,     0,     0,   217,     0,     0,   218,
     219,   220,     0,     0,     0,   221,     0,   222,   223,     0,
     224,   225,   226,     0,     0,   227,   228,     0,   229,   230,
     231,   232,   233,   234,     0,     0,   235,   236,   237,     0,
       0,   238,   239,     0,   240,   241,   242,     0,     0,   243,
       0,     0,     0,   244,     0,   245,     0,   246,     0,   247,
     248,   249,   250,   251,   252,     0,   253,     0,     0,     0,
     254,   255,   256,     0,   257,     0,     0,   258,   259,     0,
       0,     0,   260,   261,   262,   263,     0,     0,   264,   265,
     266,     0,   267,     0,   268,     0,     0,     0,     0,   269,
     270,     0,  1345,     0,   271,     0,   272,   273,     0,   274,
     275,     0,     0,     0,   276,     0,     0,   277,   278,   279,
       0,     0,   280,     0,     0,   281,   282,     0,     0,     0,
       0,     0,   283,   284,     0,   285,     0,   286,     0,   287,
     288,     0,     0,     0,     0,     0,     0,     0,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,     0,   304,   305,   306,     0,   307,   308,
     309,   310,     0,   311,   312,     0,     0,     0,     0,   313,
     314,   315,   316,   317,   318,     0,     0,   319,   320,     0,
     321,     0,   322,     0,   323,   324,   325,   326,   327,   328,
     329,   330,   331,     0,     0,   332,   333,     0,     0,   334,
     335,   336,   337,     0,     0,     0,   338,   339,     0,     0,
       0,     0,   340,   341,   342,     0,   343,   344,   345,   346,
       0,   347,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   348,   349,   350,     0,     0,   351,     0,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
       0,     0,   364,   365,   366,     0,   367,     0,   368,   369,
     370,   371,   372,     0,   373,   374,   375,     0,     0,   376,
       0,     0,     0,   377,   378,   379,   380,   381,     0,     0,
     382,   383,   384,   385,   386,     0,   387,   388,     0,   389,
     390,   391,     0,     0,   392,     0,   393,     0,   394,   395,
       0,   396,   397,     0,     0,     0,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,     0,   408,   409,     0,
       0,     0,   410,   411,   412,   413,     0,     0,     0,   414,
       0,     0,     0,   415,     0,   416,   417,   418,   419,   420,
       0,   421,   422,   423,   424,   425,   426,     0,     0,     0,
       0,     0,     0,   427,   428,     0,   429,     0,     0,   430,
       0,     0,   431,   432,   433,     0,     0,   434,   435,     0,
     436,   437,   438,   439,   440,   441,     0,     0,   442,   443,
     444,   445,     0,   446,   447,     0,   448,     0,   449,   450,
     451,   452,     0,     0,   453,   454,     0,   455,   456,   457,
     458,     0,     0,     0,     0,     0,   459,   460,   461,     0,
       0,     0,   462,   463,   464,   465,     0,   466,   467,     0,
     468,   469,     0,   470,   471,     0,     0,   472,     0,     0,
     473,     0,   474,     0,   475,   476,   477,     0,     0,     0,
       0,     0,     0,   478,     0,     0,   479,     0,     0,     0,
     480,   481,   482,   483,   484,   485,     0,     0,     0,     0,
       0,     0,   486,   487,     0,   488,   489,   490,     0,     0,
     491,     0,     0,   139,     0,   140,   141,   142,   143,   144,
       0,     0,   145,     0,     0,     0,   146,     0,     0,   147,
     539,   148,   149,   150,   151,   152,   153,   154,     0,   155,
       0,     0,     0,   156,     0,     0,     0,   157,     0,     0,
     158,   159,   160,     0,   161,     0,   162,   163,     0,     0,
     164,     0,     0,   165,   166,     0,   167,   168,     0,   169,
     170,     0,   171,   172,   173,   174,   175,   176,   177,     0,
     178,   179,   180,   181,   182,   183,   184,     0,   185,   186,
     187,   188,   189,   190,   191,   192,     0,   193,   194,     0,
     195,   196,   197,   198,   199,     0,   200,     0,     0,   201,
       0,     0,   202,     0,     0,     0,   203,     0,     0,     0,
     204,   205,   206,     0,     0,   207,     0,     0,     0,     0,
     208,   209,     0,     0,     0,     0,   210,     0,   211,     0,
       0,     0,   212,     0,   213,   214,   215,   216,     0,     0,
       0,   217,     0,     0,   218,   219,   220,     0,     0,     0,
     221,     0,   222,   223,     0,   224,   225,   226,     0,     0,
     227,   228,     0,   229,   230,   231,   232,   233,   234,     0,
       0,   235,   236,   237,     0,     0,   238,   239,     0,   240,
     241,   242,     0,     0,   243,     0,     0,     0,   244,     0,
     245,     0,   246,     0,   247,   248,   249,   250,   251,   252,
       0,   253,     0,     0,     0,   254,   255,   256,     0,   257,
       0,     0,   258,   259,     0,     0,     0,   260,   261,   262,
     263,     0,     0,   264,   265,   266,     0,   267,     0,   268,
       0,     0,     0,     0,   269,   270,     0,     0,     0,   271,
       0,   272,   273,     0,   274,   275,     0,     0,     0,   276,
       0,     0,   277,   278,   279,     0,     0,   280,     0,     0,
     281,   282,     0,     0,     0,     0,     0,   283,   284,     0,
     285,     0,   286,     0,   287,   288,     0,     0,     0,     0,
       0,     0,     0,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,     0,   304,
     305,   306,     0,   307,   308,   309,   310,     0,   311,   312,
       0,     0,     0,     0,   313,   314,   315,   316,   317,   318,
       0,     0,   319,   320,     0,   321,     0,   322,     0,   323,
     324,   325,   326,   327,   328,   329,   330,   331,     0,     0,
     332,   333,     0,     0,   334,   335,   336,   337,     0,     0,
       0,   338,   339,     0,     0,     0,     0,   340,   341,   342,
       0,   343,   344,   345,   346,     0,   347,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   348,   349,   350,     0,
       0,   351,     0,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,     0,     0,   364,   365,   366,
       0,   367,     0,   368,   369,   370,   371,   372,     0,   373,
     374,   375,     0,     0,   376,     0,     0,     0,   377,   378,
     379,   380,   381,     0,     0,   382,   383,   384,   385,   386,
       0,   387,   388,     0,   389,   390,   391,     0,     0,   392,
       0,   393,     0,   394,   395,     0,   396,   397,     0,     0,
       0,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,     0,   408,   409,     0,     0,     0,   410,   411,   412,
     413,     0,     0,     0,   414,     0,     0,     0,   415,     0,
     416,   417,   418,   419,   420,     0,   421,   422,   423,   424,
     425,   426,     0,     0,     0,     0,     0,     0,   427,   428,
       0,   429,     0,     0,   430,     0,     0,   431,   432,   433,
       0,     0,   434,   435,     0,   436,   437,   438,   439,   440,
     441,     0,     0,   442,   443,   444,   445,     0,   446,   447,
       0,   448,     0,   449,   450,   451,   452,     0,     0,   453,
     454,     0,   455,   456,   457,   458,     0,     0,     0,     0,
       0,   459,   460,   461,     0,     0,     0,   462,   463,   464,
     465,     0,   466,   467,     0,   468,   469,     0,   470,   471,
       0,     0,   472,     0,     0,   473,     0,   474,     0,   475,
     476,   477,     0,     0,     0,     0,     0,     0,   478,     0,
       0,   479,     0,     0,     0,   480,   481,   482,   483,   484,
     485,     0,     0,     0,     0,     0,     0,   486,   487,     0,
     488,   489,   490,     0,     0,   491,     0,     0,     0,     0,
       0,   139,  2328,   140,   141,   142,   143,   144,     0,     0,
     145,     0,     0,     0,   146,   539,     0,   147,     0,   148,
     149,   150,   151,   152,   153,   154,     0,   155,     0,     0,
       0,   156,     0,     0,     0,   157,     0,     0,   158,   159,
     160,     0,   161,     0,   162,   163,     0,     0,   164,     0,
       0,   165,   166,     0,   167,   168,     0,   169,   170,     0,
     171,   172,   173,   174,   175,   176,   177,     0,   178,   179,
     180,   181,   182,   183,   184,     0,   185,   186,   187,   188,
     189,   190,   191,   192,     0,   193,   194,     0,   195,   196,
     197,   198,   199,     0,   200,     0,     0,   201,     0,     0,
     202,     0,     0,     0,   203,     0,     0,     0,   204,   205,
     206,     0,     0,   207,     0,     0,     0,     0,   208,   209,
       0,     0,     0,     0,   210,     0,   211,     0,     0,     0,
     212,     0,   213,   214,   215,   216,     0,     0,     0,   217,
       0,     0,   218,   219,   220,     0,     0,     0,   221,     0,
     222,   223,     0,   224,   225,   226,     0,     0,   227,   228,
       0,   229,   230,   231,   232,   233,   234,     0,     0,   235,
     236,   237,     0,     0,   238,   239,     0,   240,   241,   242,
       0,     0,   243,     0,     0,     0,   244,     0,   245,     0,
     246,     0,   247,   248,   249,   250,   251,   252,     0,   253,
       0,     0,     0,   254,   255,   256,     0,   257,     0,     0,
     258,   259,     0,     0,     0,   260,   261,   262,   263,     0,
       0,   264,   265,   266,     0,   267,     0,   268,     0,     0,
       0,     0,   269,   270,     0,     0,     0,   271,     0,   272,
     273,     0,   274,   275,     0,     0,     0,   276,     0,     0,
     277,   278,   279,     0,     0,   280,     0,     0,   281,   282,
       0,     0,     0,     0,     0,   283,   284,     0,   285,     0,
     286,     0,   287,   288,     0,     0,     0,     0,     0,     0,
       0,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,     0,   304,   305,   306,
       0,   307,   308,   309,   310,     0,   311,   312,     0,     0,
       0,     0,   313,   314,   315,   316,   317,   318,     0,     0,
     319,   320,     0,   321,     0,   322,     0,   323,   324,   325,
     326,   327,   328,   329,   330,   331,     0,     0,   332,   333,
       0,     0,   334,   335,   336,   337,     0,     0,     0,   338,
     339,     0,     0,     0,     0,   340,   341,   342,     0,   343,
     344,   345,   346,     0,   347,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   348,   349,   350,     0,     0,   351,
       0,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,     0,     0,   364,   365,   366,     0,   367,
       0,   368,   369,   370,   371,   372,     0,   373,   374,   375,
       0,     0,   376,     0,     0,     0,   377,   378,   379,   380,
     381,     0,     0,   382,   383,   384,   385,   386,     0,   387,
     388,     0,   389,   390,   391,     0,     0,   392,     0,   393,
       0,   394,   395,     0,   396,   397,     0,     0,     0,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,     0,
     408,   409,     0,     0,     0,   410,   411,   412,   413,     0,
       0,     0,   414,     0,     0,     0,   415,     0,   416,   417,
     418,   419,   420,     0,   421,   422,   423,   424,   425,   426,
       0,     0,     0,     0,     0,     0,   427,   428,     0,   429,
       0,     0,   430,     0,     0,   431,   432,   433,     0,     0,
     434,   435,     0,   436,   437,   438,   439,   440,   441,     0,
       0,   442,   443,   444,   445,     0,   446,   447,     0,   448,
       0,   449,   450,   451,   452,     0,     0,   453,   454,     0,
     455,   456,   457,   458,     0,     0,     0,     0,     0,   459,
     460,   461,     0,     0,     0,   462,   463,   464,   465,     0,
     466,   467,     0,   468,   469,     0,   470,   471,     0,     0,
     472,     0,     0,   473,     0,   474,     0,   475,   476,   477,
       0,     0,     0,     0,     0,     0,   478,     0,     0,   479,
       0,     0,     0,   480,   481,   482,   483,   484,   485,     0,
       0,     0,     0,     0,     0,   486,   487,     0,   488,   489,
     490,     0,     0,   491,     0,     0,     0,     0,   139,     0,
     140,   141,   142,   143,   144,  2584,     0,   145,     0,     0,
       0,   146,     0,  2585,   147,     0,   148,   149,   150,   151,
     152,   153,   154,     0,   155,     0,     0,     0,   156,     0,
       0,     0,   157,     0,     0,   158,   159,   160,     0,   161,
       0,   162,   163,     0,     0,   164,     0,     0,   165,   166,
       0,   167,   168,     0,   169,   170,     0,   171,   172,   173,
     174,   175,   176,   177,     0,   178,   179,   180,   181,   182,
     183,   184,     0,   185,   186,   187,   188,   189,   190,   191,
     192,     0,   193,   194,     0,   195,   196,   197,   198,   199,
       0,   200,     0,     0,   201,     0,     0,   202,     0,     0,
       0,   203,     0,     0,     0,   204,   205,   206,     0,     0,
     207,     0,     0,     0,     0,   208,   209,     0,     0,     0,
       0,   210,     0,   211,     0,     0,     0,   212,     0,   213,
     214,   215,   216,     0,     0,     0,   217,     0,     0,   218,
     219,   220,     0,     0,     0,   221,     0,   222,   223,     0,
     224,   225,   226,     0,     0,   227,   228,     0,   229,   230,
     231,   232,   233,   234,     0,     0,   235,   236,   237,     0,
       0,   238,   239,     0,   240,   241,   242,     0,     0,   243,
       0,     0,     0,   244,     0,   245,     0,   246,     0,   247,
     248,   249,   250,   251,   252,     0,   253,     0,     0,     0,
     254,   255,   256,     0,   257,     0,     0,   258,   259,     0,
       0,     0,   260,   261,   262,   263,     0,     0,   264,   265,
     266,     0,   267,     0,   268,     0,     0,     0,     0,   269,
     270,     0,     0,     0,   271,     0,   272,   273,     0,   274,
     275,     0,     0,     0,   276,     0,     0,   277,   278,   279,
       0,     0,   280,     0,     0,   281,   282,     0,     0,     0,
       0,     0,   283,   284,     0,   285,     0,   286,     0,   287,
     288,     0,     0,     0,     0,     0,     0,     0,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,     0,   304,   305,   306,     0,   307,   308,
     309,   310,     0,   311,   312,     0,     0,     0,     0,   313,
     314,   315,   316,   317,   318,     0,     0,   319,   320,     0,
     321,     0,   322,     0,   323,   324,   325,   326,   327,   328,
     329,   330,   331,     0,     0,   332,   333,     0,     0,   334,
     335,   336,   337,     0,     0,     0,   338,   339,     0,     0,
       0,     0,   340,   341,   342,     0,   343,   344,   345,   346,
       0,   347,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   348,   349,   350,     0,     0,   351,     0,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
       0,     0,   364,   365,   366,     0,   367,     0,   368,   369,
     370,   371,   372,     0,   373,   374,   375,     0,     0,   376,
       0,     0,     0,   377,   378,   379,   380,   381,     0,     0,
     382,   383,   384,   385,   386,     0,   387,   388,     0,   389,
     390,   391,     0,     0,   392,     0,   393,     0,   394,   395,
       0,   396,   397,     0,     0,     0,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,     0,   408,   409,     0,
       0,     0,   410,   411,   412,   413,     0,     0,     0,   414,
       0,     0,     0,   415,     0,   416,   417,   418,   419,   420,
       0,   421,   422,   423,   424,   425,   426,     0,     0,     0,
       0,     0,     0,   427,   428,     0,   429,     0,     0,   430,
       0,     0,   431,   432,   433,     0,     0,   434,   435,     0,
     436,   437,   438,   439,   440,   441,     0,     0,   442,   443,
     444,   445,     0,   446,   447,     0,   448,     0,   449,   450,
     451,   452,     0,     0,   453,   454,     0,   455,   456,   457,
     458,     0,     0,     0,     0,     0,   459,   460,   461,     0,
       0,     0,   462,   463,   464,   465,     0,   466,   467,     0,
     468,   469,     0,   470,   471,     0,     0,   472,     0,     0,
     473,     0,   474,     0,   475,   476,   477,     0,     0,     0,
       0,     0,     0,   478,     0,     0,   479,     0,     0,     0,
     480,   481,   482,   483,   484,   485,     0,     0,     0,     0,
       0,     0,   486,   487,     0,   488,   489,   490,     0,     0,
     491,     0,     0,     0,     0,   139,     0,   140,   141,   142,
     143,   144,     0,     0,   145,     0,     0,     0,   146,  4512,
     780,   147,     0,   148,   149,   150,   151,   152,   153,   154,
       0,   155,     0,     0,     0,   156,     0,     0,     0,   157,
       0,     0,   158,   159,   160,     0,   161,     0,   162,   163,
       0,     0,   164,     0,     0,   165,   166,     0,   167,   168,
       0,   169,   170,     0,   171,   172,   173,   174,   175,   176,
     177,     0,   178,   179,   180,   181,   182,   183,   184,     0,
     185,   186,   187,   188,   189,   190,   191,   192,     0,   193,
     194,     0,   195,   196,   197,   198,   199,     0,   200,     0,
       0,   201,     0,     0,   202,     0,     0,     0,   203,     0,
       0,     0,   204,   205,   206,     0,     0,   207,     0,     0,
       0,     0,   208,   209,     0,     0,     0,     0,   210,     0,
     211,     0,     0,     0,   212,     0,   213,   214,   215,   216,
       0,     0,     0,   217,     0,     0,   218,   219,   220,     0,
       0,     0,   221,     0,   222,   223,     0,   224,   225,   226,
       0,     0,   227,   228,     0,   229,   230,   231,   232,   233,
     234,     0,     0,   235,   236,   237,     0,     0,   238,   239,
       0,   240,   241,   242,     0,     0,   243,     0,     0,     0,
     244,     0,   245,     0,   246,     0,   247,   248,   249,   250,
     251,   252,     0,   253,     0,     0,     0,   254,   255,   256,
       0,   257,     0,     0,   258,   259,     0,     0,     0,   260,
     261,   262,   263,     0,     0,   264,   265,   266,     0,   267,
       0,   268,     0,     0,     0,     0,   269,   270,     0,     0,
       0,   271,     0,   272,   273,     0,   274,   275,     0,     0,
       0,   276,     0,     0,   277,   278,   279,     0,     0,   280,
       0,     0,   281,   282,     0,     0,     0,     0,     0,   283,
     284,     0,   285,     0,   286,     0,   287,   288,     0,     0,
       0,     0,     0,     0,     0,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
       0,   304,   305,   306,     0,   307,   308,   309,   310,     0,
     311,   312,     0,     0,     0,     0,   313,   314,   315,   316,
     317,   318,     0,     0,   319,   320,     0,   321,     0,   322,
       0,   323,   324,   325,   326,   327,   328,   329,   330,   331,
       0,     0,   332,   333,     0,     0,   334,   335,   336,   337,
       0,     0,     0,   338,   339,     0,     0,     0,     0,   340,
     341,   342,     0,   343,   344,   345,   346,     0,   347,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   348,   349,
     350,     0,     0,   351,     0,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,     0,     0,   364,
     365,   366,     0,   367,     0,   368,   369,   370,   371,   372,
       0,   373,   374,   375,     0,     0,   376,     0,     0,     0,
     377,   378,   379,   380,   381,     0,     0,   382,   383,   384,
     385,   386,     0,   387,   388,     0,   389,   390,   391,     0,
       0,   392,     0,   393,     0,   394,   395,     0,   396,   397,
       0,     0,     0,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,     0,   408,   409,     0,     0,     0,   410,
     411,   412,   413,     0,     0,     0,   414,     0,     0,     0,
     415,     0,   416,   417,   418,   419,   420,     0,   421,   422,
     423,   424,   425,   426,     0,     0,     0,     0,     0,     0,
     427,   428,     0,   429,     0,     0,   430,     0,     0,   431,
     432,   433,     0,     0,   434,   435,     0,   436,   437,   438,
     439,   440,   441,     0,     0,   442,   443,   444,   445,     0,
     446,   447,     0,   448,     0,   449,   450,   451,   452,     0,
       0,   453,   454,     0,   455,   456,   457,   458,     0,     0,
       0,     0,     0,   459,   460,   461,     0,     0,     0,   462,
     463,   464,   465,     0,   466,   467,     0,   468,   469,     0,
     470,   471,     0,     0,   472,     0,     0,   473,     0,   474,
       0,   475,   476,   477,     0,     0,     0,     0,     0,     0,
     478,     0,     0,   479,     0,     0,     0,   480,   481,   482,
     483,   484,   485,     0,     0,     0,     0,     0,     0,   486,
     487,     0,   488,   489,   490,     0,     0,   491,     0,     0,
     139,     0,   140,   141,   142,   143,   144,     0,     0,   145,
       0,     0,     0,   146,     0,     0,   147,   539,   148,   149,
     150,   151,   152,   153,   154,     0,   155,     0,     0,     0,
     156,     0,     0,     0,   157,     0,     0,   158,   159,   160,
       0,   161,     0,   162,   163,     0,     0,   164,     0,     0,
     165,   166,     0,   167,   168,     0,   169,   170,     0,   171,
     172,   173,   174,   175,   176,   177,     0,   178,   179,   180,
     181,   182,   183,   184,     0,   185,   186,   187,   188,   189,
     190,   191,   192,     0,   193,   194,     0,   195,   196,   197,
     198,   199,     0,   200,     0,     0,   201,     0,     0,   202,
       0,     0,     0,   203,     0,     0,     0,   204,   205,   206,
       0,     0,   207,     0,     0,     0,     0,   208,   209,     0,
       0,     0,     0,   210,     0,   211,     0,     0,     0,   212,
       0,   213,   214,   215,   216,     0,     0,     0,   217,     0,
       0,   218,   219,   220,     0,     0,     0,   221,     0,   222,
     223,     0,   224,   225,   226,     0,     0,   227,   228,     0,
     229,   230,   231,   232,   233,   234,     0,     0,   235,   608,
     237,     0,     0,   238,   239,     0,   240,   241,   242,     0,
       0,   243,     0,     0,     0,   244,     0,   245,     0,   246,
       0,   247,   248,   249,   250,   251,   252,     0,   253,     0,
       0,     0,   254,   255,   256,     0,   257,     0,     0,   258,
     259,     0,     0,     0,   260,   261,   262,   263,     0,     0,
     264,   265,   266,     0,   267,     0,   268,     0,     0,     0,
       0,   269,   270,     0,     0,     0,   271,     0,   272,   273,
       0,   274,   275,     0,     0,     0,   276,     0,     0,   277,
     278,   279,     0,     0,   280,     0,     0,   281,   282,     0,
       0,     0,     0,     0,   283,   284,     0,   285,     0,   286,
       0,   287,   288,     0,     0,     0,     0,     0,     0,     0,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,     0,   304,   305,   306,     0,
     307,   308,   309,   310,     0,   311,   312,     0,     0,     0,
       0,   313,   314,   315,   316,   317,   318,     0,     0,   319,
     320,     0,   321,     0,   322,     0,   323,   324,   325,   326,
     327,   328,   329,   330,   331,     0,     0,   332,   333,     0,
       0,   334,   335,   336,   337,     0,     0,     0,   338,   339,
       0,     0,     0,     0,   340,   341,   342,     0,   343,   344,
     345,   346,     0,   347,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   348,   349,   350,     0,     0,   351,     0,
     352,   353,   609,   355,   356,   357,   358,   359,   360,   361,
     362,   363,     0,     0,   364,   365,   366,     0,   367,     0,
     368,   369,   370,   371,   372,     0,   373,   374,   375,     0,
       0,   376,     0,     0,     0,   377,   378,   379,   380,   381,
       0,     0,   382,   383,   384,   385,   386,     0,   387,   388,
       0,   389,   390,   391,     0,     0,   392,     0,   393,     0,
     394,   395,     0,   396,   397,     0,     0,     0,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,     0,   408,
     409,     0,     0,     0,   410,   411,   412,   413,     0,     0,
       0,   414,     0,     0,     0,   415,     0,   416,   417,   418,
     419,   420,     0,   421,   422,   423,   424,   425,   426,     0,
       0,     0,     0,     0,     0,   427,   428,     0,   429,     0,
       0,   430,     0,     0,   431,   432,   433,     0,     0,   434,
     435,     0,   436,   437,   438,   439,   440,   441,     0,     0,
     442,   443,   444,   445,     0,   446,   447,     0,   448,     0,
     449,   450,   451,   452,     0,     0,   453,   454,     0,   455,
     456,   457,   458,     0,     0,     0,     0,     0,   459,   460,
     461,     0,     0,     0,   462,   463,   464,   465,     0,   466,
     467,     0,   468,   469,     0,   470,   471,     0,     0,   472,
       0,     0,   473,     0,   474,     0,   475,   476,   477,     0,
       0,     0,     0,     0,     0,   478,     0,     0,   479,     0,
       0,     0,   480,   481,   482,   483,   484,   485,     0,     0,
       0,     0,     0,     0,   486,   487,     0,   488,   489,   490,
       0,     0,   491,     0,     0,   139,     0,   140,   141,   142,
     143,   144,     0,     0,   145,     0,     0,     0,   146,     0,
       0,   147,   539,   148,   149,   150,   151,   152,   153,   154,
       0,   155,     0,     0,     0,   156,     0,     0,     0,   157,
       0,     0,   158,   159,   160,     0,   161,     0,   162,   163,
       0,     0,   164,     0,     0,   165,   166,     0,   167,   168,
       0,   169,   170,     0,   171,   172,   173,   174,   175,   176,
     177,     0,   178,   179,   180,   181,   182,   183,   184,     0,
     185,   186,   187,   188,   189,   190,   191,   192,     0,   193,
     194,     0,   195,   196,   197,   198,   199,     0,   200,     0,
       0,   201,     0,     0,   202,     0,     0,     0,   203,     0,
       0,     0,   204,   205,   206,     0,     0,   207,     0,     0,
       0,     0,   208,   209,     0,     0,     0,     0,   210,     0,
     211,     0,     0,     0,   212,     0,   213,   214,   215,   216,
       0,     0,     0,   217,     0,     0,   218,   219,   220,     0,
       0,     0,   221,     0,   222,   223,     0,   224,   225,   226,
       0,     0,   227,   228,     0,   229,   230,   231,   232,   233,
     234,     0,     0,   235,   236,   237,     0,     0,   238,   239,
       0,   240,   241,   242,     0,     0,   243,     0,     0,     0,
     244,     0,   245,     0,   246,     0,   247,   248,   249,   250,
     251,   252,     0,   253,     0,     0,     0,   254,   255,   256,
       0,   257,     0,     0,   258,   259,     0,     0,     0,   260,
     261,   262,   263,     0,     0,   264,   265,   266,     0,   267,
       0,   268,     0,     0,     0,     0,   269,   270,     0,     0,
       0,   271,     0,   272,   273,     0,   274,   275,     0,     0,
       0,   276,     0,     0,   277,   278,   279,     0,     0,   280,
       0,     0,   281,   282,     0,     0,     0,     0,     0,   283,
     284,     0,   285,     0,   286,     0,   287,   288,     0,     0,
       0,     0,     0,     0,     0,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
       0,   304,   305,   306,     0,   307,   308,   309,   310,     0,
     311,   312,     0,     0,     0,     0,   313,   314,   315,   316,
     317,   318,     0,     0,   319,   320,     0,   321,     0,   322,
       0,   323,   324,   325,   326,   327,   328,   329,   330,   331,
       0,     0,   332,   333,     0,     0,   334,   335,   336,   337,
       0,     0,     0,   338,   339,     0,     0,     0,     0,   340,
     341,   342,     0,   343,   344,   345,   346,     0,   347,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   348,   349,
     350,     0,     0,   351,     0,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,     0,     0,   364,
     365,   366,     0,   367,     0,   368,   369,   370,   371,   372,
       0,   373,   374,   375,     0,     0,   376,     0,     0,     0,
     377,   378,   379,   380,   381,     0,     0,   382,   383,   384,
     385,   386,     0,   387,   388,     0,   389,   390,   391,     0,
       0,   392,     0,   393,     0,   394,   395,     0,   396,   397,
       0,     0,     0,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,     0,   408,   409,     0,     0,     0,   410,
     411,   412,   413,     0,     0,     0,   414,     0,     0,     0,
     415,     0,   416,   417,   418,   419,   420,     0,   421,   422,
     423,   424,   425,   426,     0,     0,     0,     0,     0,     0,
     427,   428,     0,   429,     0,     0,   430,     0,     0,   431,
     432,   433,     0,     0,   434,   435,     0,   436,   437,   438,
     439,   440,   441,     0,     0,   442,   443,   444,   445,     0,
     446,   447,     0,   448,     0,   449,   450,   451,   452,     0,
       0,   453,   454,     0,   455,   456,   457,   458,     0,     0,
       0,     0,     0,   459,   460,   461,     0,     0,     0,   462,
     463,   464,   465,     0,   466,   467,     0,   468,   469,     0,
     470,   471,     0,     0,   472,     0,     0,   473,     0,   474,
       0,   475,   476,   477,     0,     0,     0,     0,     0,     0,
     478,     0,     0,   479,     0,     0,     0,   480,   481,   482,
     483,   484,   485,     0,     0,     0,     0,     0,     0,   486,
     487,     0,   488,   489,   490,     0,     0,   491,     0,     0,
     139,     0,   140,   141,   142,   143,   144,     0,     0,   145,
       0,     0,     0,   146,     0,     0,   147,   780,   148,   149,
     150,   151,   152,   153,   154,     0,   155,     0,     0,     0,
     156,     0,     0,     0,   157,     0,     0,   158,   159,   160,
       0,   161,     0,   162,   163,     0,     0,   164,     0,     0,
     165,   166,     0,   167,   168,     0,   169,   170,     0,   171,
     172,   173,   174,   175,   176,   177,     0,   178,   179,   180,
     181,   182,   183,   184,     0,   185,   186,   187,   188,   189,
     190,   191,   192,     0,   193,   194,     0,   195,   196,   197,
     198,   199,     0,   200,     0,     0,   201,     0,     0,   202,
       0,     0,     0,   203,     0,     0,     0,   204,   205,   206,
       0,     0,   207,     0,     0,     0,     0,   208,   209,     0,
       0,     0,     0,   210,     0,   211,     0,     0,     0,   212,
       0,   213,   214,   215,   216,     0,     0,     0,   217,     0,
       0,   218,   219,   220,     0,     0,     0,   221,     0,   222,
     223,     0,   224,   225,   226,     0,     0,   227,   228,     0,
     229,   230,   231,   232,   233,   234,     0,     0,   235,   236,
     237,     0,     0,   238,   239,     0,   240,   241,   242,     0,
       0,   243,     0,     0,     0,   244,     0,   245,     0,   246,
       0,   247,   248,   249,   250,   251,   252,     0,   253,     0,
       0,     0,   254,   255,   256,     0,   257,     0,     0,   258,
     259,     0,     0,     0,   260,   261,   262,   263,     0,     0,
     264,   265,   266,     0,   267,     0,   268,     0,     0,     0,
       0,   269,   270,     0,     0,     0,   271,     0,   272,   273,
       0,   274,   275,     0,     0,     0,   276,     0,     0,   277,
     278,   279,     0,     0,   280,     0,     0,   281,   282,     0,
       0,     0,     0,     0,   283,   284,     0,   285,     0,   286,
       0,   287,   288,     0,     0,     0,     0,     0,     0,     0,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,     0,   304,   305,   306,     0,
     307,   308,   309,   310,     0,   311,   312,     0,     0,     0,
       0,   313,   314,   315,   316,   317,   318,     0,     0,   319,
     320,     0,   321,     0,   322,     0,   323,   324,   325,   326,
     327,   328,   329,   330,   331,     0,     0,   332,   333,     0,
       0,   334,   335,   336,   337,     0,     0,     0,   338,   339,
       0,     0,     0,     0,   340,   341,   342,     0,   343,   344,
     345,   346,     0,   347,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   348,   349,   350,     0,     0,   351,     0,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,     0,     0,   364,   365,   366,     0,   367,     0,
     368,   369,   370,   371,   372,     0,   373,   374,   375,     0,
       0,   376,     0,     0,     0,   377,   378,   379,   380,   381,
       0,     0,   382,   383,   384,   385,   386,     0,   387,   388,
       0,   389,   390,   391,     0,     0,   392,     0,   393,     0,
     394,   395,     0,   396,   397,     0,     0,     0,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,     0,   408,
     409,     0,     0,     0,   410,   411,   412,   413,     0,     0,
       0,   414,     0,     0,     0,   415,     0,   416,   417,   418,
     419,   420,     0,   421,   422,   423,   424,   425,   426,     0,
       0,     0,     0,     0,     0,   427,   428,     0,   429,     0,
       0,   430,     0,     0,   431,   432,   433,     0,     0,   434,
     435,     0,   436,   437,   438,   439,   440,   441,     0,     0,
     442,   443,   444,   445,     0,   446,   447,     0,   448,     0,
     449,   450,   451,   452,     0,     0,   453,   454,     0,   455,
     456,   457,   458,     0,     0,     0,     0,     0,   459,   460,
     461,     0,     0,     0,   462,   463,   464,   465,     0,   466,
     467,     0,   468,   469,     0,   470,   471,     0,     0,   472,
       0,     0,   473,     0,   474,     0,   475,   476,   477,     0,
       0,     0,     0,     0,     0,   478,     0,     0,   479,     0,
       0,     0,   480,   481,   482,   483,   484,   485,     0,     0,
       0,     0,     0,     0,   486,   487,     0,   488,   489,   490,
       0,     0,   491,     0,     0,   139,     0,   140,   141,   142,
     143,   144,     0,     0,   145,     0,     0,     0,   146,     0,
       0,   147,  2585,   148,   149,   150,   151,   152,   153,   154,
       0,   155,     0,     0,     0,   156,     0,     0,     0,   157,
       0,     0,   158,   159,   160,     0,   161,     0,   162,   163,
       0,     0,   164,     0,     0,   165,   166,     0,   167,   912,
     913,   169,   170,     0,   171,   172,   173,   174,   175,   176,
     177,     0,   178,   179,   180,   181,   182,   183,   184,     0,
     185,   186,   187,   188,   189,   190,   191,   192,     0,   193,
     194,     0,   195,   196,   197,   198,   199,     0,   200,     0,
       0,   201,     0,     0,   202,     0,     0,     0,   203,     0,
       0,     0,   204,   205,   206,     0,     0,   207,     0,     0,
       0,     0,   208,   209,     0,     0,     0,   914,   210,     0,
     211,     0,     0,     0,   212,     0,   213,   214,   215,   216,
       0,     0,     0,   217,     0,     0,   218,   219,   220,     0,
       0,     0,   221,     0,   222,   223,     0,   224,   225,   226,
       0,     0,   227,   228,     0,   229,   230,   231,   232,   233,
     234,     0,     0,   235,   236,   237,     0,     0,   238,   239,
       0,   240,   241,   242,     0,     0,   243,     0,     0,     0,
     244,     0,   245,     0,   246,     0,   247,   248,   249,   250,
     251,   915,     0,   253,     0,     0,     0,   254,   255,   256,
       0,   257,     0,     0,   258,   259,     0,     0,     0,   260,
     261,   262,   263,     0,     0,   264,   265,   266,     0,   267,
       0,   268,     0,     0,     0,     0,   269,   270,     0,     0,
       0,   271,     0,   272,   273,     0,   274,   275,     0,     0,
       0,   276,     0,     0,   277,   278,   279,     0,     0,   280,
       0,     0,   281,   282,     0,     0,     0,     0,     0,   283,
     284,     0,   916,     0,   286,     0,   287,   288,     0,     0,
       0,     0,     0,     0,     0,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
       0,   304,   305,   306,     0,   307,   308,   309,   310,     0,
     311,   312,     0,     0,     0,     0,   313,   314,   315,   316,
     317,   318,     0,     0,   319,   320,     0,   321,     0,   322,
       0,   323,   324,   325,   326,   327,   328,   917,   330,   331,
       0,     0,   332,   333,     0,     0,   334,   335,   336,   337,
       0,     0,     0,   338,   339,     0,     0,     0,     0,   340,
     341,   342,     0,   343,   344,   345,   346,     0,   347,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   348,   349,
     350,     0,     0,   351,     0,   352,   353,   354,   355,   918,
     357,   358,   359,   360,   361,   362,   363,     0,     0,   364,
     365,   366,     0,   367,     0,   368,   369,   370,   371,   372,
       0,   373,   374,   375,     0,     0,   376,     0,     0,     0,
     377,   378,   379,   380,   381,     0,     0,   382,   383,   384,
     385,   386,     0,   387,   388,     0,   389,   390,   391,     0,
       0,   392,     0,   393,     0,   394,   395,     0,   396,   397,
       0,     0,     0,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,     0,   408,   409,     0,     0,     0,   410,
     411,   919,   413,     0,     0,     0,   414,     0,     0,     0,
     415,     0,   416,   417,   418,   419,   420,     0,   421,   422,
     423,   424,   425,   426,     0,     0,     0,     0,     0,     0,
     427,   428,     0,   429,     0,     0,   430,     0,     0,   431,
     432,   433,     0,     0,   434,   435,     0,   436,   437,   438,
     439,   440,   441,     0,     0,   442,   443,   444,   445,     0,
     446,   447,     0,   448,     0,   449,   450,   451,   452,     0,
       0,   453,   454,     0,   455,   456,   457,   458,     0,     0,
       0,     0,     0,   920,   460,   461,     0,     0,     0,   462,
     463,   464,   465,     0,   466,   467,     0,   468,   469,     0,
     470,   471,     0,     0,   472,     0,     0,   473,     0,   474,
       0,   475,   476,   477,     0,     0,     0,     0,     0,     0,
     478,     0,     0,   479,     0,     0,     0,   480,   481,   482,
     483,   484,   485,     0,     0,     0,     0,     0,     0,   486,
     487,     0,   488,   489,   490,     0,     0,   491,     0,   139,
       0,   140,   141,   142,   143,   144,     0,     0,   145,     0,
       0,     0,   146,     0,     0,   147,   921,   148,   149,   150,
     151,   152,   153,   154,     0,   155,     0,     0,     0,   156,
       0,     0,     0,   157,     0,     0,   158,   159,   160,     0,
     161,     0,   162,   163,     0,     0,   164,     0,     0,   165,
     166,     0,   167,   168,     0,   169,   170,     0,   171,   172,
     173,   174,   175,   176,   177,     0,   178,   179,   180,   181,
     182,   183,   184,     0,   185,   186,   187,   188,   189,   190,
     191,   192,     0,   193,   194,     0,   195,   196,   197,   198,
     199,     0,   200,     0,     0,   201,     0,     0,   202,     0,
       0,     0,   203,     0,     0,     0,   204,   205,   206,     0,
       0,   207,     0,     0,     0,     0,   208,   209,     0,     0,
       0,     0,   210,     0,   211,     0,     0,     0,   212,     0,
     213,   214,   215,   216,     0,     0,     0,   217,     0,     0,
     218,   219,   220,     0,     0,     0,   221,     0,   222,   223,
       0,   224,   225,   226,     0,     0,   227,   228,     0,   229,
     230,   231,   232,   233,   234,     0,     0,   235,   236,   237,
       0,     0,   238,   239,     0,   240,   241,   242,     0,     0,
     243,     0,     0,     0,   244,     0,   245,     0,   246,     0,
     247,   248,   249,   250,   251,   252,     0,   253,     0,     0,
       0,   254,   255,   256,     0,   257,     0,     0,   258,   259,
       0,     0,     0,   260,   261,   262,   263,     0,     0,   264,
     265,   266,     0,   267,     0,   268,     0,     0,     0,     0,
     269,   270,     0,     0,     0,   271,     0,   272,   273,     0,
     274,   275,     0,     0,     0,   276,     0,     0,   277,   278,
     279,     0,     0,   280,     0,     0,   281,   282,   620,     0,
       0,     0,     0,   283,   284,     0,   285,     0,   286,     0,
     287,   288,     0,     0,     0,     0,     0,     0,     0,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,     0,   304,   305,   306,     0,   307,
     308,   309,   310,     0,   311,   312,     0,     0,     0,     0,
     313,   314,   315,   316,   317,   318,     0,     0,   319,   320,
       0,   321,     0,   322,     0,   323,   324,   325,   326,   327,
     328,   329,   330,   331,     0,     0,   332,   333,     0,     0,
     334,   335,   336,   337,     0,     0,     0,   338,   339,     0,
       0,     0,     0,   340,   341,   342,     0,   343,   344,   345,
     346,     0,   347,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   348,   349,   350,     0,     0,   351,     0,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,     0,     0,   364,   365,   366,     0,   367,     0,   368,
     369,   370,   371,   372,     0,   373,   374,   375,     0,     0,
     376,     0,     0,     0,   377,   378,   379,   380,   381,     0,
       0,   382,   383,   384,   385,   386,     0,   387,   388,     0,
     389,   390,   391,     0,     0,   392,     0,   393,     0,   394,
     395,     0,   396,   397,     0,     0,     0,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,     0,   408,   409,
       0,     0,     0,   410,   411,   412,   413,     0,     0,     0,
     414,     0,     0,     0,   415,     0,   416,   417,   418,   419,
     420,     0,   421,   422,   423,   424,   425,   426,     0,     0,
       0,     0,     0,     0,   427,   428,     0,   429,     0,     0,
     430,     0,     0,   431,   432,   433,     0,     0,   434,   435,
       0,   436,   437,   438,   439,   440,   441,     0,     0,   442,
     443,   444,   445,     0,   446,   447,     0,   448,     0,   449,
     450,   451,   452,     0,   136,   453,   454,     0,   455,   456,
     457,   458,     0,     0,     0,     0,     0,   459,   460,   461,
       0,     0,     0,   462,   463,   464,   465,     0,   466,   467,
       0,   468,   469,     0,   470,   471,     0,     0,   472,     0,
       0,   473,     0,   474,     0,   475,   476,   477,     0,     0,
       0,     0,     0,     0,   478,     0,     0,   479,     0,     0,
       0,   480,   481,   482,   483,   484,   485,     0,     0,     0,
       0,     0,     0,   486,   487,     0,   488,   489,   490,     0,
       0,   491,     0,   139,     0,   140,   141,   142,   143,   144,
       0,     0,   145,     0,     0,     0,   146,     0,     0,   147,
    1394,   148,   149,   150,   151,   152,   153,   154,     0,   155,
       0,     0,     0,   156,     0,     0,     0,   157,     0,     0,
     158,   159,   160,     0,   161,     0,   162,   163,     0,     0,
     164,     0,     0,   165,   166,     0,   167,   168,     0,   169,
     170,     0,   171,   172,   173,   174,   175,   176,   177,     0,
     178,   179,   180,   181,   182,   183,   184,     0,   185,   186,
     187,   188,   189,   190,   191,   192,     0,   193,   194,     0,
     195,   196,   197,   198,   199,     0,   200,     0,     0,   201,
       0,     0,   202,     0,     0,     0,   203,     0,     0,     0,
     204,   205,   206,     0,     0,   207,     0,     0,     0,     0,
     208,   209,     0,     0,     0,     0,   210,     0,   211,     0,
       0,     0,   212,     0,   213,   214,   215,   216,     0,     0,
       0,   217,     0,     0,   218,   219,   220,     0,     0,     0,
     221,     0,   222,   223,     0,   224,   225,   226,     0,     0,
     227,   228,     0,   229,   230,   231,   232,   233,   234,     0,
       0,   235,   236,   237,     0,     0,   238,   239,     0,   240,
     241,   242,     0,     0,   243,     0,     0,     0,   244,     0,
     245,     0,   246,     0,   247,   248,   249,   250,   251,   252,
       0,   253,     0,     0,     0,   254,   255,   256,     0,   257,
       0,     0,   258,   259,     0,     0,     0,   260,   261,   262,
     263,     0,     0,   264,   265,   266,     0,   267,     0,   268,
       0,     0,     0,     0,   269,   270,     0,     0,     0,   271,
       0,   272,   273,     0,   274,   275,     0,     0,     0,   276,
       0,     0,   277,   278,   279,     0,     0,   280,     0,     0,
     281,   282,   620,     0,     0,     0,     0,   283,   284,     0,
     285,     0,   286,     0,   287,   288,     0,     0,     0,     0,
       0,     0,     0,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,     0,   304,
     305,   306,     0,   307,   308,   309,   310,     0,   311,   312,
       0,     0,     0,     0,   313,   314,   315,   316,   317,   318,
       0,     0,   319,   320,     0,   321,     0,   322,     0,   323,
     324,   325,   326,   327,   328,   329,   330,   331,     0,     0,
     332,   333,     0,     0,   334,   335,   336,   337,     0,     0,
       0,   338,   339,     0,     0,     0,     0,   340,   341,   342,
       0,   343,   344,   345,   346,     0,   347,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   348,   349,   350,     0,
       0,   351,     0,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,     0,     0,   364,   365,   366,
       0,   367,     0,   368,   369,   370,   371,   372,     0,   373,
     374,   375,     0,     0,   376,     0,     0,     0,   377,   378,
     379,   380,   381,     0,     0,   382,   383,   384,   385,   386,
       0,   387,   388,     0,   389,   390,   391,     0,     0,   392,
       0,   393,     0,   394,   395,     0,   396,   397,     0,     0,
       0,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,     0,   408,   409,     0,     0,     0,   410,   411,   412,
     413,     0,     0,     0,   414,     0,     0,     0,   415,     0,
     416,   417,   418,   419,   420,     0,   421,   422,   423,   424,
     425,   426,     0,     0,     0,     0,     0,     0,   427,   428,
       0,   429,     0,     0,   430,     0,     0,   431,   432,   433,
       0,     0,   434,   435,     0,   436,   437,   438,   439,   440,
     441,     0,     0,   442,   443,   444,   445,     0,   446,   447,
       0,   448,     0,   449,   450,   451,   452,     0,   136,   453,
     454,     0,   455,   456,   457,   458,     0,     0,     0,     0,
       0,   459,   460,   461,     0,     0,     0,   462,   463,   464,
     465,     0,   466,   467,     0,   468,   469,     0,   470,   471,
       0,     0,   472,     0,     0,   473,     0,   474,     0,   475,
     476,   477,     0,     0,     0,     0,     0,     0,   478,     0,
       0,   479,     0,     0,     0,   480,   481,   482,   483,   484,
     485,     0,     0,     0,     0,     0,     0,   486,   487,     0,
     488,   489,   490,     0,     0,   491,     0,   139,     0,   140,
     141,   142,   143,   144,     0,     0,   145,     0,     0,     0,
     146,     0,     0,   147,  1718,   148,   149,   150,   151,   152,
     153,   154,     0,   155,     0,     0,     0,   156,     0,     0,
       0,   157,     0,     0,   158,   159,   160,     0,   161,     0,
     162,   163,     0,     0,   164,     0,     0,   165,   166,     0,
     167,   912,   913,   169,   170,     0,   171,   172,   173,   174,
     175,   176,   177,     0,   178,   179,   180,   181,   182,   183,
     184,     0,   185,   186,   187,   188,   189,   190,   191,   192,
       0,   193,   194,     0,   195,   196,   197,   198,   199,     0,
     200,     0,     0,   201,     0,     0,   202,     0,     0,     0,
     203,     0,     0,     0,   204,   205,   206,     0,     0,   207,
       0,     0,     0,     0,   208,   209,     0,     0,     0,   914,
     210,     0,   211,     0,     0,     0,   212,     0,   213,   214,
     215,   216,     0,     0,     0,   217,     0,     0,   218,   219,
     220,     0,     0,     0,   221,     0,   222,   223,     0,   224,
     225,   226,     0,     0,   227,   228,     0,   229,   230,   231,
     232,   233,   234,     0,     0,   235,   236,   237,     0,     0,
     238,   239,     0,   240,   241,   242,     0,     0,   243,     0,
       0,     0,   244,     0,   245,     0,   246,     0,   247,   248,
     249,   250,   251,   915,     0,   253,     0,     0,     0,   254,
     255,   256,     0,   257,     0,     0,   258,   259,     0,     0,
       0,   260,   261,   262,   263,     0,     0,   264,   265,   266,
       0,   267,     0,   268,     0,     0,     0,     0,   269,   270,
       0,     0,     0,   271,     0,   272,   273,     0,   274,   275,
       0,     0,     0,   276,     0,     0,   277,   278,   279,     0,
       0,   280,     0,     0,   281,   282,     0,     0,     0,     0,
       0,   283,   284,     0,   916,     0,   286,     0,   287,   288,
       0,     0,     0,     0,     0,     0,     0,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,     0,   304,   305,   306,     0,   307,   308,   309,
     310,     0,   311,   312,     0,     0,     0,     0,   313,   314,
     315,   316,   317,   318,     0,     0,   319,   320,     0,   321,
       0,   322,     0,   323,   324,   325,   326,   327,   328,   917,
     330,   331,     0,     0,   332,   333,     0,     0,   334,   335,
     336,   337,     0,     0,     0,   338,   339,     0,     0,     0,
       0,   340,   341,   342,     0,   343,   344,   345,   346,     0,
     347,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     348,   349,   350,     0,     0,   351,     0,   352,   353,   354,
     355,   918,   357,   358,   359,   360,   361,   362,   363,     0,
       0,   364,   365,   366,     0,   367,     0,   368,   369,   370,
     371,   372,     0,   373,   374,   375,     0,     0,   376,     0,
       0,     0,   377,   378,   379,   380,   381,     0,     0,   382,
     383,   384,   385,   386,     0,   387,   388,     0,   389,   390,
     391,     0,     0,   392,     0,   393,     0,   394,   395,     0,
     396,   397,     0,     0,     0,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,     0,   408,   409,     0,     0,
       0,   410,   411,   919,   413,     0,     0,     0,   414,     0,
       0,     0,   415,     0,   416,   417,   418,   419,   420,     0,
     421,   422,   423,   424,   425,   426,     0,     0,     0,     0,
       0,     0,   427,   428,     0,   429,     0,     0,   430,     0,
       0,   431,   432,   433,     0,     0,   434,   435,     0,   436,
     437,   438,   439,   440,   441,     0,     0,   442,   443,   444,
     445,     0,   446,   447,     0,   448,     0,   449,   450,   451,
     452,     0,     0,   453,   454,     0,   455,   456,   457,   458,
       0,     0,     0,     0,     0,   459,   460,   461,     0,     0,
       0,   462,   463,   464,   465,     0,   466,   467,     0,   468,
     469,     0,   470,   471,     0,     0,   472,     0,     0,   473,
       0,   474,     0,   475,   476,   477,     0,     0,     0,     0,
       0,     0,   478,     0,     0,   479,     0,     0,     0,   480,
     481,   482,   483,   484,   485,     0,     0,     0,     0,     0,
       0,   486,   487,     0,   488,   489,   490,     0,     0,   491,
       0,   139,     0,   140,   141,   142,   143,   144,     0,     0,
     145,     0,     0,     0,   146,     0,     0,   147,   921,   148,
     149,   150,   151,   152,   153,   154,     0,   155,     0,     0,
       0,   156,     0,     0,     0,   157,     0,     0,   158,   159,
     160,     0,   161,     0,   162,   163,     0,     0,   164,     0,
       0,   165,   166,     0,   167,   168,     0,   169,   170,     0,
     171,   172,   173,   174,   175,   176,   177,     0,   178,   179,
     180,   181,   182,   183,   184,     0,   185,   186,   187,   188,
     189,   190,   191,   192,     0,   193,   194,     0,   195,   196,
     197,   198,   199,     0,   200,     0,     0,   201,     0,     0,
     202,     0,     0,     0,   203,     0,     0,     0,   204,   205,
     206,     0,     0,   207,     0,     0,     0,     0,   208,   209,
       0,     0,     0,     0,   210,     0,   211,     0,     0,     0,
     212,     0,   213,   214,   215,   216,     0,     0,     0,   217,
       0,     0,   218,   219,   220,     0,     0,     0,   221,     0,
     222,   223,     0,   224,   225,   226,     0,     0,   227,   228,
       0,   229,   230,   231,   232,   233,   234,     0,     0,   235,
     236,   237,     0,     0,   238,   239,     0,   240,   241,   242,
       0,     0,   243,     0,     0,     0,   244,     0,   245,     0,
     246,     0,   247,   248,   249,   250,   251,   252,     0,   253,
       0,     0,     0,   254,   255,   256,     0,   257,     0,     0,
     258,   259,     0,     0,     0,   260,   261,   262,   263,     0,
       0,   264,   265,   266,     0,   267,     0,   268,     0,     0,
       0,     0,   269,   270,     0,     0,     0,   271,     0,   272,
     273,     0,   274,   275,     0,     0,     0,   276,     0,     0,
     277,   278,   279,     0,     0,   280,     0,     0,   281,   282,
     620,     0,     0,     0,     0,   283,   284,     0,   285,     0,
     286,     0,   287,   288,     0,     0,     0,     0,     0,     0,
       0,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,     0,   304,   305,   306,
       0,   307,   308,   309,   310,     0,   311,   312,     0,     0,
       0,     0,   313,   314,   315,   316,   317,   318,     0,     0,
     319,   320,     0,   321,     0,   322,     0,   323,   324,   325,
     326,   327,   328,   329,   330,   331,     0,     0,   332,   333,
       0,     0,   334,   335,   336,   337,     0,     0,     0,   338,
     339,     0,     0,     0,     0,   340,   341,   342,     0,   343,
     344,   345,   346,     0,   347,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   348,   349,   350,     0,     0,   351,
       0,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,     0,     0,   364,   365,   366,     0,   367,
       0,   368,   369,   370,   371,   372,     0,   373,   374,   375,
       0,     0,   376,     0,     0,     0,   377,   378,   379,   380,
     381,     0,     0,   382,   383,   384,   385,   386,     0,   387,
     388,     0,   389,   390,   391,     0,     0,   392,     0,   393,
       0,   394,   395,     0,   396,   397,     0,     0,     0,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,     0,
     408,   409,     0,     0,     0,   410,   411,   412,   413,     0,
       0,     0,   414,     0,     0,     0,   415,     0,   416,   417,
     418,   419,   420,     0,   421,   422,   423,   424,   425,   426,
       0,     0,     0,     0,     0,     0,   427,   428,     0,   429,
       0,     0,   430,     0,     0,   431,   432,   433,     0,     0,
     434,   435,     0,   436,   437,   438,   439,   440,   441,     0,
       0,   442,   443,   444,   445,     0,   446,   447,     0,   448,
       0,   449,   450,   451,   452,     0,   136,   453,   454,     0,
     455,   456,   457,   458,     0,     0,     0,     0,     0,   459,
     460,   461,     0,     0,     0,   462,   463,   464,   465,     0,
     466,   467,     0,   468,   469,     0,   470,   471,     0,     0,
     472,     0,     0,   473,     0,   474,     0,   475,   476,   477,
       0,     0,     0,     0,     0,     0,   478,     0,     0,   479,
       0,     0,     0,   480,   481,   482,   483,   484,   485,     0,
       0,     0,     0,     0,     0,   486,   487,     0,   488,   489,
     490,     0,     0,   491,     0,   139,     0,   140,   141,   142,
     143,   144,     0,     0,   145,     0,     0,     0,   146,     0,
       0,     0,  3526,   148,   149,   150,   151,   152,   153,     0,
       0,  -334,     0,     0,     0,   156,     0,     0,     0,   157,
       0,     0,   158,   159,   160,     0,   161,     0,     0,     0,
       0,     0,   164,  3957,     0,   165,   166,     0,   167,     0,
       0,     0,     0,     0,   171,   172,   173,   174,  3958,   176,
     177,     0,   178,   179,     0,     0,     0,     0,     0,     0,
     185,     0,   187,     0,   189,   190,   191,   192,     0,   193,
     194,     0,   195,   196,   197,     0,   199,     0,   200,     0,
       0,   201,     0,     0,   202,     0,     0,     0,   203,     0,
       0,     0,   204,   205,   206,     0,     0,   207,     0,     0,
       0,     0,   208,     0,     0,     0,     0,     0,   210,     0,
     211,     0,     0,     0,   212,     0,   213,   214,   215,   216,
       0,     0,     0,     0,     0,     0,   218,   219,   220,     0,
       0,     0,   221,     0,     0,   223,     0,   224,   225,   226,
       0,     0,   227,   228,     0,   229,   230,   231,   232,     0,
       0,     0,     0,   235,   236,   237,     0,     0,   238,   239,
    3959,   240,   241,   242,     0,     0,     0,     0,     0,     0,
     244,     0,   245,     0,   246,     0,   247,   248,   249,   250,
     251,   252,     0,   253,     0,     0,     0,     0,   255,   256,
       0,     0,     0,     0,     0,   259,     0,     0,     0,   260,
     261,   262,   263,  3960,     0,   264,   265,   266,     0,   267,
       0,   268,     0,     0,     0,     0,   269,     0,     0,     0,
       0,   271,     0,   272,   273,     0,   274,   275,  3961,     0,
       0,   276,     0,     0,     0,   278,   279,     0,     0,   280,
    3962,     0,   281,   282,     0,     0,     0,     0,     0,   283,
     284,     0,   285,     0,   286,     0,   287,   288,     0,     0,
       0,     0,  -289,     0,     0,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
       0,   304,   305,   306,     0,   307,   308,   309,   310,     0,
     311,   312,     0,     0,     0,     0,   313,   314,   315,   316,
     317,   318,     0,     0,   319,   320,     0,   321,     0,   322,
       0,   323,   324,   325,   326,   327,   328,   329,   330,   331,
       0,     0,   332,   333,     0,     0,   334,   335,   336,   337,
       0,     0,     0,     0,   339,     0,     0,     0,     0,   340,
     341,   342,     0,   343,   344,   345,  3963,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   349,
     350,     0,     0,     0,     0,   352,   353,   354,     0,   356,
     357,   358,   359,   360,   361,   362,     0,     0,     0,     0,
     365,   366,     0,   367,     0,   368,   369,   370,   371,   372,
       0,   373,   374,   375,     0,     0,   376,     0,     0,     0,
     377,   378,   379,   380,   381,     0,     0,   382,   383,   384,
     385,   386,     0,   387,     0,     0,   389,     0,   391,  -289,
       0,   392,     0,     0,     0,   394,     0,     0,   396,   397,
    3964,     0,     0,     0,   399,   400,   401,   402,   403,   404,
       0,   406,   407,     0,   408,     0,     0,     0,     0,   410,
     411,   412,     0,     0,     0,     0,   414,     0,     0,     0,
     415,     0,     0,   417,     0,     0,   420,     0,   421,     0,
     423,     0,   425,   426,     0,     0,     0,     0,     0,     0,
     427,   428,     0,   429,     0,     0,   430,     0,     0,   431,
       0,   433,     0,     0,     0,   435,     0,   436,   437,   438,
     439,   440,   441,     0,     0,   442,   443,   444,   445,     0,
     446,   447,     0,   448,     0,   449,   450,   451,   452,     0,
       0,   453,   454,     0,   455,   456,   457,   458,     0,     0,
       0,     0,     0,   459,   460,   461,     0,     0,     0,     0,
     463,   464,   465,     0,   466,   467,     0,   468,   469,     0,
       0,     0,     0,     0,   472,     0,     0,   473,     0,     0,
       0,   475,   476,   477,     0,     0,     0,     0,     0,     0,
     478,     0,     0,   479,     0,     0,     0,   480,   481,   482,
     483,   484,   485,     0,     0,  -289,     0,     0,     0,   486,
       0,     0,   488,     0,   490,     0,   139,   491,   140,   141,
     142,   143,   144,     0,     0,   145,     0,     0,     0,   146,
       0,  4518,   147,     0,   148,   149,   150,   151,   152,   153,
     154,     0,   155,     0,     0,     0,   156,     0,     0,     0,
     157,     0,     0,   158,   159,   160,     0,   161,     0,   162,
     163,     0,     0,   164,     0,     0,   165,   166,     0,   167,
     168,     0,   169,   170,     0,   171,   172,   173,   174,   175,
     176,   177,     0,   178,   179,   180,   181,   182,   183,   184,
       0,   185,   186,   187,   188,   189,   190,   191,   192,     0,
     193,   194,     0,   195,   196,   197,   198,   199,     0,   200,
       0,     0,   201,     0,     0,   202,     0,  1012,     0,   203,
       0,     0,     0,   204,   205,   206,     0,     0,   207,     0,
       0,     0,     0,   208,   209,     0,     0,     0,     0,   210,
       0,   211,     0,     0,     0,   212,     0,   213,   214,   215,
     216,     0,     0,     0,   217,     0,     0,   218,   219,   220,
       0,     0,     0,   221,     0,   222,   223,     0,   224,   225,
     226,     0,     0,   227,   228,     0,   229,   230,   231,   232,
     233,   234,     0,     0,   235,   236,   237,     0,     0,   238,
     239,     0,   240,   241,   242,     0,     0,   243,     0,     0,
       0,   244,     0,   245,     0,   246,     0,   247,   248,   249,
     250,   251,   252,     0,   253,     0,     0,     0,   254,   255,
     256,     0,   257,     0,     0,   258,   259,     0,     0,     0,
     260,   261,   262,   263,     0,     0,   264,   265,   266,     0,
     267,     0,   268,     0,     0,     0,     0,   269,   270,     0,
       0,     0,   271,     0,   272,   273,     0,   274,   275,     0,
       0,     0,   276,     0,     0,   277,   278,   279,     0,     0,
     280,     0,     0,   281,   282,   620,     0,     0,     0,     0,
     283,   284,     0,   285,     0,   286,     0,   287,   288,     0,
       0,     0,     0,     0,     0,     0,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,     0,   304,   305,   306,     0,   307,   308,   309,   310,
       0,   311,   312,     0,     0,     0,     0,   313,   314,   315,
     316,   317,   318,     0,     0,   319,   320,     0,   321,     0,
     322,     0,   323,   324,   325,   326,   327,   328,   329,   330,
     331,     0,     0,   332,   333,     0,     0,   334,   335,   336,
     337,     0,     0,     0,   338,   339,     0,     0,     0,     0,
     340,   341,   342,     0,   343,   344,   345,   346,     0,   347,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   348,
     349,   350,     0,     0,   351,     0,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,     0,     0,
     364,   365,   366,     0,   367,     0,   368,   369,   370,   371,
     372,     0,   373,   374,   375,     0,     0,   376,     0,     0,
       0,   377,   378,   379,   380,   381,     0,     0,   382,   383,
     384,   385,   386,     0,   387,   388,     0,   389,   390,   391,
       0,     0,   392,     0,   393,     0,   394,   395,     0,   396,
     397,     0,     0,     0,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,     0,   408,   409,     0,     0,     0,
     410,   411,   412,   413,     0,     0,     0,   414,     0,     0,
       0,   415,     0,   416,   417,   418,   419,   420,     0,   421,
     422,   423,   424,   425,   426,     0,     0,     0,     0,     0,
       0,   427,   428,     0,   429,     0,     0,   430,     0,     0,
     431,   432,   433,     0,     0,   434,   435,     0,   436,   437,
     438,   439,   440,   441,     0,     0,   442,   443,   444,   445,
       0,   446,   447,     0,   448,     0,   449,   450,   451,   452,
       0,   136,   453,   454,     0,   455,   456,   457,   458,     0,
       0,     0,     0,     0,   459,   460,   461,     0,     0,     0,
     462,   463,   464,   465,     0,   466,   467,     0,   468,   469,
       0,   470,   471,     0,     0,   472,     0,     0,   473,     0,
     474,     0,   475,   476,   477,     0,     0,     0,     0,     0,
       0,   478,     0,     0,   479,     0,     0,     0,   480,   481,
     482,   483,   484,   485,     0,     0,     0,     0,     0,     0,
     486,   487,     0,   488,   489,   490,     0,     0,   491,   139,
       0,   140,   141,   142,   143,   144,     0,     0,   145,     0,
    1188,     0,   146,     0,     0,   147,     0,   148,   149,   150,
     151,   152,   153,   154,     0,   155,     0,     0,     0,   156,
       0,     0,     0,   157,     0,     0,   158,   159,   160,     0,
     161,     0,   162,   163,     0,     0,   164,     0,     0,   165,
     166,     0,   167,   168,     0,   169,   170,     0,   171,   172,
     173,   174,   175,   176,   177,     0,   178,   179,   180,   181,
     182,   183,   184,     0,   185,   186,   187,   188,   189,   190,
     191,   192,     0,   193,   194,     0,   195,   196,   197,   198,
     199,     0,   200,     0,     0,   201,     0,     0,   202,     0,
       0,     0,   203,     0,     0,     0,   204,   205,   206,     0,
       0,   207,     0,     0,     0,     0,   208,   209,     0,     0,
       0,     0,   210,     0,   211,     0,     0,     0,   212,     0,
     213,   214,   215,   216,     0,     0,     0,   217,     0,     0,
     218,   219,   220,     0,     0,     0,   221,     0,   222,   223,
       0,   224,   225,   226,     0,     0,   227,   228,     0,   229,
     230,   231,   232,   233,   234,     0,     0,   235,   236,   237,
       0,     0,   238,   239,     0,   240,   241,   242,     0,     0,
     243,     0,     0,     0,   244,     0,   245,     0,   246,     0,
     247,   248,   249,   250,   251,   252,     0,   253,     0,     0,
       0,   254,   255,   256,     0,   257,     0,     0,   258,   259,
       0,     0,     0,   260,   261,   262,   263,     0,     0,   264,
     265,   266,     0,   267,     0,   268,     0,     0,     0,     0,
     269,   270,     0,     0,     0,   271,     0,   272,   273,     0,
     274,   275,     0,     0,     0,   276,     0,     0,   277,   278,
     279,     0,     0,   280,     0,     0,   281,   282,     0,     0,
       0,     0,     0,   283,   284,     0,   285,     0,   286,     0,
     287,   288,     0,     0,     0,     0,     0,     0,     0,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,     0,   304,   305,   306,     0,   307,
     308,   309,   310,     0,   311,   312,     0,     0,     0,     0,
     313,   314,   315,   316,   317,   318,     0,     0,   319,   320,
       0,   321,     0,   322,     0,   323,   324,   325,   326,   327,
     328,   329,   330,   331,     0,     0,   332,   333,     0,     0,
     334,   335,   336,   337,     0,     0,     0,   338,   339,     0,
       0,     0,     0,   340,   341,   342,     0,   343,   344,   345,
     346,     0,   347,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   348,   349,   350,     0,     0,   351,     0,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,     0,     0,   364,   365,   366,     0,   367,     0,   368,
     369,   370,   371,   372,     0,   373,   374,   375,     0,     0,
     376,     0,     0,     0,   377,   378,   379,   380,   381,     0,
       0,   382,   383,   384,   385,   386,     0,   387,   388,     0,
     389,   390,   391,     0,     0,   392,     0,   393,     0,   394,
     395,     0,   396,   397,     0,     0,     0,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,     0,   408,   409,
       0,     0,     0,   410,   411,   412,   413,     0,     0,     0,
     414,     0,     0,     0,   415,     0,   416,   417,   418,   419,
     420,     0,   421,   422,   423,   424,   425,   426,     0,     0,
       0,     0,     0,     0,   427,   428,     0,   429,     0,     0,
     430,     0,     0,   431,   432,   433,     0,     0,   434,   435,
       0,   436,   437,   438,   439,   440,   441,     0,     0,   442,
     443,   444,   445,     0,   446,   447,     0,   448,     0,   449,
     450,   451,   452,     0,     0,   453,   454,     0,   455,   456,
     457,   458,     0,     0,     0,     0,     0,   459,   460,   461,
       0,     0,     0,   462,   463,   464,   465,     0,   466,   467,
       0,   468,   469,     0,   470,   471,     0,     0,   472,     0,
       0,   473,     0,   474,     0,   475,   476,   477,     0,     0,
       0,     0,     0,     0,   478,     0,     0,   479,     0,     0,
       0,   480,   481,   482,   483,   484,   485,     0,     0,     0,
       0,     0,     0,   486,   487,     0,   488,   489,   490,     0,
     139,   491,   140,   141,   142,   143,   144,     0,  2165,   145,
       0,     0,     0,   146,     0,     0,   147,     0,   148,   149,
     150,   151,   152,   153,   154,     0,   155,     0,     0,     0,
     156,     0,     0,     0,   157,     0,     0,   158,   159,   160,
       0,   161,     0,   162,   163,     0,     0,   164,     0,     0,
     165,   166,     0,   167,   168,     0,   169,   170,     0,   171,
     172,   173,   174,   175,   176,   177,     0,   178,   179,   180,
     181,   182,   183,   184,     0,   185,   186,   187,   188,   189,
     190,   191,   192,     0,   193,   194,     0,   195,   196,   197,
     198,   199,     0,   200,     0,     0,   201,     0,     0,   202,
       0,     0,     0,   203,     0,     0,     0,   204,   205,   206,
       0,     0,   207,     0,     0,     0,     0,   208,   209,     0,
       0,     0,     0,   210,     0,   211,     0,     0,     0,   212,
       0,   213,   214,   215,   216,     0,     0,     0,   217,     0,
       0,   218,   219,   220,     0,     0,     0,   221,     0,   222,
     223,     0,   224,   225,   226,     0,     0,   227,   228,     0,
     229,   230,   231,   232,   233,   234,     0,     0,   235,   236,
     237,     0,     0,   238,   239,     0,   240,   241,   242,     0,
       0,   243,     0,     0,     0,   244,     0,   245,     0,   246,
       0,   247,   248,   249,   250,   251,   252,     0,   253,     0,
       0,     0,   254,   255,   256,     0,   257,     0,     0,   258,
     259,     0,     0,     0,   260,   261,   262,   263,     0,     0,
     264,   265,   266,     0,   267,     0,   268,     0,     0,     0,
       0,   269,   270,     0,     0,     0,   271,     0,   272,   273,
       0,   274,   275,     0,     0,     0,   276,     0,     0,   277,
     278,   279,     0,     0,   280,     0,     0,   281,   282,     0,
       0,     0,     0,     0,   283,   284,     0,   285,     0,   286,
       0,   287,   288,     0,     0,     0,     0,     0,     0,     0,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,     0,   304,   305,   306,     0,
     307,   308,   309,   310,     0,   311,   312,     0,     0,     0,
       0,   313,   314,   315,   316,   317,   318,     0,     0,   319,
     320,     0,   321,     0,   322,     0,   323,   324,   325,   326,
     327,   328,   329,   330,   331,     0,     0,   332,   333,     0,
       0,   334,   335,   336,   337,     0,     0,     0,   338,   339,
       0,     0,     0,     0,   340,   341,   342,     0,   343,   344,
     345,   346,     0,   347,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   348,   349,   350,     0,     0,   351,     0,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,     0,     0,   364,   365,   366,     0,   367,     0,
     368,   369,   370,   371,   372,     0,   373,   374,   375,     0,
       0,   376,     0,     0,     0,   377,   378,   379,   380,   381,
       0,     0,   382,   383,   384,   385,   386,     0,   387,   388,
       0,   389,   390,   391,     0,     0,   392,     0,   393,     0,
     394,   395,     0,   396,   397,     0,     0,     0,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,     0,   408,
     409,     0,     0,     0,   410,   411,   412,   413,     0,     0,
       0,   414,     0,     0,     0,   415,     0,   416,   417,   418,
     419,   420,     0,   421,   422,   423,   424,   425,   426,     0,
       0,     0,     0,     0,     0,   427,   428,     0,   429,     0,
       0,   430,     0,     0,   431,   432,   433,     0,     0,   434,
     435,     0,   436,   437,   438,   439,   440,   441,     0,     0,
     442,   443,   444,   445,     0,   446,   447,     0,   448,     0,
     449,   450,   451,   452,     0,     0,   453,   454,     0,   455,
     456,   457,   458,     0,     0,     0,     0,     0,   459,   460,
     461,     0,     0,     0,   462,   463,   464,   465,     0,   466,
     467,     0,   468,   469,     0,   470,   471,     0,     0,   472,
       0,     0,   473,     0,   474,     0,   475,   476,   477,     0,
       0,     0,     0,     0,     0,   478,     0,     0,   479,     0,
       0,     0,   480,   481,   482,   483,   484,   485,     0,     0,
       0,     0,     0,     0,   486,   487,     0,   488,   489,   490,
       0,   139,   491,   140,   141,   142,   143,   144,     0,  2844,
     145,     0,     0,     0,   146,     0,     0,   147,     0,   148,
     149,   150,   151,   152,   153,   154,     0,   155,     0,     0,
       0,   156,     0,     0,     0,   157,     0,     0,   158,   159,
     160,     0,   161,     0,   162,   163,     0,     0,   164,     0,
       0,   165,   166,     0,   167,   168,     0,   169,   170,     0,
     171,   172,   173,   174,   175,   176,   177,     0,   178,   179,
     180,   181,   182,   183,   184,     0,   185,   186,   187,   188,
     189,   190,   191,   192,     0,   193,   194,     0,   195,   196,
     197,   198,   199,     0,   200,     0,     0,   201,     0,     0,
     202,     0,     0,     0,   203,     0,     0,     0,   204,   205,
     206,     0,     0,   207,     0,     0,     0,     0,   208,   209,
       0,     0,     0,     0,   210,     0,   211,     0,     0,     0,
     212,     0,   213,   214,   215,   216,     0,     0,     0,   217,
       0,     0,   218,   219,   220,     0,     0,     0,   221,     0,
     222,   223,     0,   224,   225,   226,     0,     0,   227,   228,
       0,   229,   230,   231,   232,   233,   234,     0,     0,   235,
     236,   237,     0,     0,   238,   239,     0,   240,   241,   242,
       0,     0,   243,     0,     0,     0,   244,     0,   245,     0,
     246,     0,   247,   248,   249,   250,   251,   252,     0,   253,
       0,     0,     0,   254,   255,   256,     0,   257,     0,     0,
     258,   259,     0,     0,     0,   260,   261,   262,   263,     0,
       0,   264,   265,   266,     0,   267,     0,   268,     0,     0,
       0,     0,   269,   270,     0,     0,     0,   271,     0,   272,
     273,     0,   274,   275,     0,     0,     0,   276,     0,     0,
     277,   278,   279,     0,     0,   280,     0,     0,   281,   282,
       0,     0,     0,     0,     0,   283,   284,     0,   285,     0,
     286,     0,   287,   288,     0,     0,     0,     0,     0,     0,
       0,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,     0,   304,   305,   306,
       0,   307,   308,   309,   310,     0,   311,   312,     0,     0,
       0,     0,   313,   314,   315,   316,   317,   318,     0,     0,
     319,   320,     0,   321,     0,   322,     0,   323,   324,   325,
     326,   327,   328,   329,   330,   331,     0,     0,   332,   333,
       0,     0,   334,   335,   336,   337,     0,     0,     0,   338,
     339,     0,     0,     0,     0,   340,   341,   342,     0,   343,
     344,   345,   346,     0,   347,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   348,   349,   350,     0,     0,   351,
       0,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,     0,     0,   364,   365,   366,     0,   367,
       0,   368,   369,   370,   371,   372,     0,   373,   374,   375,
       0,     0,   376,     0,     0,     0,   377,   378,   379,   380,
     381,     0,     0,   382,   383,   384,   385,   386,     0,   387,
     388,     0,   389,   390,   391,     0,     0,   392,     0,   393,
       0,   394,   395,     0,   396,   397,     0,     0,     0,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,     0,
     408,   409,     0,     0,     0,   410,   411,   412,   413,     0,
       0,     0,   414,     0,     0,     0,   415,     0,   416,   417,
     418,   419,   420,     0,   421,   422,   423,   424,   425,   426,
       0,     0,     0,     0,     0,     0,   427,   428,     0,   429,
       0,     0,   430,     0,     0,   431,   432,   433,     0,     0,
     434,   435,     0,   436,   437,   438,   439,   440,   441,     0,
       0,   442,   443,   444,   445,     0,   446,   447,     0,   448,
       0,   449,   450,   451,   452,     0,     0,   453,   454,     0,
     455,   456,   457,   458,     0,     0,     0,     0,     0,   459,
     460,   461,     0,     0,     0,   462,   463,   464,   465,     0,
     466,   467,     0,   468,   469,     0,   470,   471,     0,     0,
     472,     0,     0,   473,     0,   474,     0,   475,   476,   477,
       0,     0,     0,     0,     0,     0,   478,     0,     0,   479,
       0,     0,     0,   480,   481,   482,   483,   484,   485,     0,
       0,     0,     0,     0,     0,   486,   487,     0,   488,   489,
     490,     0,   139,   491,   140,   141,   142,   143,   144,     0,
    3197,   145,     0,     0,     0,   146,     0,     0,   147,     0,
     148,   149,   150,   151,   152,   153,   154,     0,   155,     0,
       0,     0,   156,     0,     0,     0,   157,     0,     0,   158,
     159,   160,     0,   161,     0,   162,   163,     0,     0,   164,
       0,     0,   165,   166,     0,   167,   168,     0,   169,   170,
       0,   171,   172,   173,   174,   175,   176,   177,     0,   178,
     179,   180,   181,   182,   183,   184,     0,   185,   186,   187,
     188,   189,   190,   191,   192,     0,   193,   194,     0,   195,
     196,   197,   198,   199,     0,   200,     0,     0,   201,     0,
       0,   202,     0,     0,     0,   203,     0,     0,     0,   204,
     205,   206,     0,     0,   207,     0,     0,     0,     0,   208,
     209,     0,     0,     0,     0,   210,     0,   211,     0,     0,
       0,   212,     0,   213,   214,   215,   216,     0,     0,     0,
     217,     0,     0,   218,   219,   220,     0,     0,     0,   221,
       0,   222,   223,     0,   224,   225,   226,     0,     0,   227,
     228,     0,   229,   230,   231,   232,   233,   234,     0,     0,
     235,   236,   237,     0,     0,   238,   239,     0,   240,   241,
     242,     0,     0,   243,     0,     0,     0,   244,     0,   245,
       0,   246,     0,   247,   248,   249,   250,   251,   252,     0,
     253,     0,     0,     0,   254,   255,   256,     0,   257,     0,
       0,   258,   259,     0,     0,     0,   260,   261,   262,   263,
       0,     0,   264,   265,   266,     0,   267,     0,   268,     0,
       0,     0,     0,   269,   270,     0,     0,     0,   271,     0,
     272,   273,     0,   274,   275,     0,     0,     0,   276,     0,
       0,   277,   278,   279,     0,     0,   280,     0,     0,   281,
     282,     0,     0,     0,     0,     0,   283,   284,     0,   285,
       0,   286,     0,   287,   288,     0,     0,     0,     0,     0,
       0,     0,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,     0,   304,   305,
     306,     0,   307,   308,   309,   310,     0,   311,   312,     0,
       0,     0,     0,   313,   314,   315,   316,   317,   318,     0,
       0,   319,   320,     0,   321,     0,   322,     0,   323,   324,
     325,   326,   327,   328,   329,   330,   331,     0,     0,   332,
     333,     0,     0,   334,   335,   336,   337,     0,     0,     0,
     338,   339,     0,     0,     0,     0,   340,   341,   342,     0,
     343,   344,   345,   346,     0,   347,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   348,   349,   350,     0,     0,
     351,     0,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,     0,     0,   364,   365,   366,     0,
     367,     0,   368,   369,   370,   371,   372,     0,   373,   374,
     375,     0,     0,   376,     0,     0,     0,   377,   378,   379,
     380,   381,     0,     0,   382,   383,   384,   385,   386,     0,
     387,   388,     0,   389,   390,   391,     0,     0,   392,     0,
     393,     0,   394,   395,     0,   396,   397,     0,     0,     0,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
       0,   408,   409,     0,     0,     0,   410,   411,   412,   413,
       0,     0,     0,   414,     0,     0,     0,   415,     0,   416,
     417,   418,   419,   420,     0,   421,   422,   423,   424,   425,
     426,     0,     0,     0,     0,     0,     0,   427,   428,     0,
     429,     0,     0,   430,     0,     0,   431,   432,   433,     0,
       0,   434,   435,     0,   436,   437,   438,   439,   440,   441,
       0,     0,   442,   443,   444,   445,     0,   446,   447,     0,
     448,     0,   449,   450,   451,   452,     0,     0,   453,   454,
       0,   455,   456,   457,   458,     0,     0,     0,     0,     0,
     459,   460,   461,     0,     0,     0,   462,   463,   464,   465,
       0,   466,   467,     0,   468,   469,     0,   470,   471,     0,
       0,   472,     0,     0,   473,     0,   474,     0,   475,   476,
     477,     0,     0,     0,     0,     0,     0,   478,     0,     0,
     479,     0,     0,     0,   480,   481,   482,   483,   484,   485,
       0,     0,     0,     0,     0,     0,   486,   487,     0,   488,
     489,   490,     0,   139,   491,   140,   141,   142,   143,   144,
       0,  3531,   145,     0,     0,     0,   146,     0,     0,   147,
       0,   148,   149,   150,   151,   152,   153,   154,     0,   155,
       0,     0,     0,   156,     0,     0,     0,   157,     0,     0,
     158,   159,   160,     0,   161,     0,   162,   163,     0,     0,
     164,     0,     0,   165,   166,     0,   167,   168,     0,   169,
     170,     0,   171,   172,   173,   174,   175,   176,   177,     0,
     178,   179,   180,   181,   182,   183,   184,     0,   185,   186,
     187,   188,   189,   190,   191,   192,     0,   193,   194,     0,
     195,   196,   197,   198,   199,     0,   200,     0,     0,   201,
       0,     0,   202,     0,     0,     0,   203,     0,     0,     0,
     204,   205,   206,     0,     0,   207,     0,     0,     0,     0,
     208,   209,  2497,     0,     0,     0,   210,     0,   211,     0,
       0,     0,   212,     0,   213,   214,   215,   216,     0,     0,
       0,   217,     0,     0,   218,   219,   220,     0,     0,     0,
     221,     0,   222,   223,     0,   224,   225,   226,     0,     0,
     227,   228,     0,   229,   230,   231,   232,   233,   234,     0,
       0,   235,   236,   237,     0,     0,   238,   239,     0,   240,
     241,   242,  2498,     0,   243,     0,     0,     0,   244,     0,
     245,     0,   246,     0,   247,   248,   249,   250,   251,   252,
       0,   253,     0,     0,     0,   254,   255,   256,     0,   257,
    2499,     0,   258,   259,     0,     0,     0,   260,   261,   262,
     263,     0,     0,   264,   265,   266,     0,   267,     0,   268,
       0,     0,     0,     0,   269,   270,     0,     0,     0,   271,
       0,   272,   273,     0,   274,   275,     0,     0,     0,   276,
       0,     0,   277,   278,   279,     0,     0,   280,     0,     0,
     281,   282,     0,     0,     0,     0,     0,   283,   284,     0,
     285,     0,   286,     0,   287,   288,     0,     0,  2500,     0,
       0,     0,     0,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,     0,   304,
     305,   306,     0,   307,   308,   309,   310,     0,   311,   312,
       0,     0,     0,     0,   313,   314,   315,   316,   317,   318,
       0,     0,   319,   320,     0,   321,     0,   322,     0,   323,
     324,   325,   326,   327,   328,   329,   330,   331,     0,     0,
     332,   333,     0,     0,   334,   335,   336,   337,  1054,  1055,
       0,   338,   339,     0,     0,  2501,     0,   340,   341,   342,
       0,   343,   344,   345,   346,     0,   347,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   348,   349,   350,     0,
       0,   351,     0,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,     0,     0,   364,   365,   366,
       0,   367,     0,   368,   369,   370,   371,   372,     0,   373,
     374,   375,     0,     0,   376,     0,     0,     0,   377,   378,
     379,   380,   381,     0,     0,   382,   383,   384,   385,   386,
       0,   387,   388,     0,   389,   390,   391,     0,     0,   392,
       0,   393,     0,   394,   395,     0,   396,   397,     0,     0,
       0,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,     0,   408,   409,     0,     0,     0,   410,   411,   412,
     413,     0,     0,     0,   414,     0,     0,     0,   415,     0,
     416,   417,   418,   419,   420,     0,   421,   422,   423,   424,
     425,   426,     0,     0,  4498,   564,  4499,     0,   427,   428,
       0,   429,     0,     0,   430,     0,     0,   431,   432,   433,
       0,     0,   434,   435,     0,   436,   437,   438,   439,   440,
     441,     0,     0,   442,   443,   444,   445,     0,   446,   447,
       0,   448,     0,   449,   450,   451,   452,     0,     0,   453,
     454,     0,   455,   456,   457,   458,     0,     0,     0,     0,
       0,   459,   460,   461,     0,     0,     0,   462,   463,   464,
     465,  2502,   466,   467,     0,   468,   469,     0,   470,   471,
       0,     0,   472,     0,     0,   473,     0,   474,     0,   475,
     476,   477,     0,     0,     0,     0,     0,     0,   478,     0,
       0,   479,     0,     0,     0,   480,   481,   482,   483,   484,
     485,     0,     0,     0,     0,     0,     0,   486,   487,     0,
     488,   489,   490,     0,   139,   491,   140,   141,   142,   143,
     144,     0,     0,   145,     0,     0,     0,   146,     0,     0,
     147,     0,   148,   149,   150,   151,   152,   153,   154,     0,
     155,     0,     0,     0,   156,     0,     0,     0,   157,     0,
       0,   158,   159,   160,     0,   161,     0,   162,   163,     0,
       0,   164,     0,     0,   165,   166,     0,   167,   168,     0,
     169,   170,     0,   171,   172,   173,   174,   175,   176,   177,
       0,   178,   179,   180,   181,   182,   183,   184,     0,   185,
     186,   187,   188,   189,   190,   191,   192,     0,   193,   194,
       0,   195,   196,   197,   198,   199,     0,   200,     0,     0,
     201,     0,     0,   202,     0,     0,     0,   203,     0,     0,
       0,   204,   205,   206,     0,     0,   207,     0,     0,     0,
       0,   208,   209,  1606,     0,     0,  3013,   210,     0,   211,
       0,     0,     0,   212,     0,   213,   214,   215,   216,     0,
       0,     0,   217,     0,     0,   218,   219,   220,     0,     0,
       0,   221,     0,   222,   223,     0,   224,   225,   226,     0,
       0,   227,   228,     0,   229,   230,   231,   232,   233,   234,
       0,     0,   235,   236,   237,     0,     0,   238,   239,     0,
     240,   241,   242,  1607,     0,   243,     0,     0,     0,   244,
       0,   245,     0,   246,     0,   247,   248,   249,   250,   251,
     252,     0,   253,     0,     0,     0,   254,   255,   256,     0,
     257,  3014,     0,   258,   259,     0,     0,     0,   260,   261,
     262,   263,     0,     0,   264,   265,   266,     0,   267,     0,
     268,     0,     0,     0,     0,   269,   270,     0,     0,     0,
     271,     0,   272,   273,     0,   274,   275,     0,     0,     0,
     276,     0,     0,   277,   278,   279,     0,     0,   280,     0,
       0,   281,   282,     0,     0,     0,     0,     0,   283,   284,
       0,   285,     0,   286,     0,   287,   288,     0,     0,  3015,
       0,     0,     0,     0,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,     0,
     304,   305,   306,     0,   307,   308,   309,   310,     0,   311,
     312,     0,     0,     0,     0,   313,   314,   315,   316,   317,
     318,     0,     0,   319,   320,     0,   321,     0,   322,     0,
     323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
       0,   332,   333,     0,     0,   334,   335,   336,   337,     0,
       0,     0,   338,   339,     0,     0,  3016,     0,   340,   341,
     342,     0,   343,   344,   345,   346,     0,   347,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   348,   349,   350,
       0,     0,   351,     0,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,     0,     0,   364,   365,
     366,     0,   367,     0,   368,   369,   370,   371,   372,     0,
     373,   374,   375,     0,     0,   376,     0,     0,     0,   377,
     378,   379,   380,   381,     0,     0,   382,   383,   384,   385,
     386,     0,   387,   388,     0,   389,   390,   391,     0,     0,
     392,     0,   393,     0,   394,   395,     0,   396,   397,     0,
       0,     0,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,     0,   408,   409,     0,     0,     0,   410,   411,
     412,   413,     0,     0,     0,   414,     0,     0,     0,   415,
       0,   416,   417,   418,   419,   420,     0,   421,   422,   423,
     424,   425,   426,     0,     0,     0,     0,     0,     0,   427,
     428,     0,   429,     0,     0,   430,     0,     0,   431,   432,
     433,     0,     0,   434,   435,     0,   436,   437,   438,   439,
     440,   441,     0,     0,   442,   443,   444,   445,     0,   446,
     447,     0,   448,     0,   449,   450,   451,   452,     0,   136,
     453,   454,     0,   455,   456,   457,   458,     0,     0,     0,
       0,     0,   459,   460,   461,     0,     0,     0,   462,   463,
     464,   465,  3017,   466,   467,     0,   468,   469,     0,   470,
     471,     0,     0,   472,     0,     0,   473,     0,   474,     0,
     475,   476,   477,     0,     0,     0,     0,     0,     0,   478,
       0,     0,   479,     0,     0,     0,   480,   481,   482,   483,
     484,   485,     0,     0,     0,     0,     0,     0,   486,   487,
       0,   488,   489,   490,     0,   139,   491,   140,   141,   142,
     143,   144,     0,     0,   145,     0,     0,     0,   146,     0,
       0,   147,     0,   148,   149,   150,   151,   152,   153,   154,
       0,   155,     0,     0,     0,   156,     0,     0,     0,   157,
       0,     0,   158,   159,   160,     0,   161,     0,   162,   163,
       0,     0,   164,     0,     0,   165,   166,     0,   167,   168,
       0,   169,   170,     0,   171,   172,   173,   174,   175,   176,
     177,     0,   178,   179,   180,   181,   182,   183,   184,     0,
     185,   186,   187,   188,   189,   190,   191,   192,     0,   193,
     194,     0,   195,   196,   197,   198,   199,     0,   200,     0,
       0,   201,     0,     0,   202,     0,     0,     0,   203,     0,
       0,     0,   204,   205,   206,     0,     0,   207,     0,     0,
       0,     0,   208,   209,  1606,     0,     0,  3951,   210,     0,
     211,     0,     0,     0,   212,     0,   213,   214,   215,   216,
       0,     0,     0,   217,     0,     0,   218,   219,   220,     0,
       0,     0,   221,     0,   222,   223,     0,   224,   225,   226,
       0,     0,   227,   228,     0,   229,   230,   231,   232,   233,
     234,     0,     0,   235,   236,   237,     0,     0,   238,   239,
       0,   240,   241,   242,  1607,     0,   243,     0,     0,     0,
     244,     0,   245,     0,   246,     0,   247,   248,   249,   250,
     251,   252,     0,   253,     0,     0,     0,   254,   255,   256,
       0,   257,  3014,     0,   258,   259,     0,     0,     0,   260,
     261,   262,   263,     0,     0,   264,   265,   266,     0,   267,
       0,   268,     0,     0,     0,     0,   269,   270,     0,     0,
       0,   271,     0,   272,   273,     0,   274,   275,     0,     0,
       0,   276,     0,     0,   277,   278,   279,     0,     0,   280,
       0,     0,   281,   282,     0,     0,     0,     0,     0,   283,
     284,     0,   285,     0,   286,     0,   287,   288,     0,     0,
    3015,     0,     0,     0,     0,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
       0,   304,   305,   306,     0,   307,   308,   309,   310,     0,
     311,   312,     0,     0,     0,     0,   313,   314,   315,   316,
     317,   318,     0,     0,   319,   320,     0,   321,     0,   322,
       0,   323,   324,   325,   326,   327,   328,   329,   330,   331,
       0,     0,   332,   333,     0,     0,   334,   335,   336,   337,
       0,     0,     0,   338,   339,     0,     0,  3016,     0,   340,
     341,   342,     0,   343,   344,   345,   346,     0,   347,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   348,   349,
     350,     0,     0,   351,     0,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,     0,     0,   364,
     365,   366,     0,   367,     0,   368,   369,   370,   371,   372,
       0,   373,   374,   375,     0,     0,   376,     0,     0,     0,
     377,   378,   379,   380,   381,     0,     0,   382,   383,   384,
     385,   386,     0,   387,   388,     0,   389,   390,   391,     0,
       0,   392,     0,   393,     0,   394,   395,     0,   396,   397,
       0,     0,     0,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,     0,   408,   409,     0,     0,     0,   410,
     411,   412,   413,     0,     0,     0,   414,     0,     0,     0,
     415,     0,   416,   417,   418,   419,   420,     0,   421,   422,
     423,   424,   425,   426,     0,     0,     0,     0,     0,     0,
     427,   428,     0,   429,     0,     0,   430,     0,     0,   431,
     432,   433,     0,     0,   434,   435,     0,   436,   437,   438,
     439,   440,   441,     0,     0,   442,   443,   444,   445,     0,
     446,   447,     0,   448,     0,   449,   450,   451,   452,     0,
     136,   453,   454,     0,   455,   456,   457,   458,     0,     0,
       0,     0,     0,   459,   460,   461,     0,     0,     0,   462,
     463,   464,   465,  3017,   466,   467,     0,   468,   469,     0,
     470,   471,     0,     0,   472,     0,     0,   473,     0,   474,
       0,   475,   476,   477,     0,     0,     0,     0,     0,     0,
     478,     0,     0,   479,     0,     0,     0,   480,   481,   482,
     483,   484,   485,     0,     0,     0,     0,     0,     0,   486,
     487,     0,   488,   489,   490,     0,   139,   491,   140,   141,
     142,   143,   144,     0,     0,   145,     0,     0,     0,   146,
       0,     0,   147,     0,   148,   149,   150,   151,   152,   153,
     154,     0,   155,     0,     0,     0,   156,     0,     0,     0,
     157,     0,     0,   158,   159,   160,     0,   161,     0,   162,
     163,     0,     0,   164,     0,     0,   165,   166,     0,   167,
     168,     0,   169,   170,     0,   171,   172,   173,   174,   175,
     176,   177,     0,   178,   179,   180,   181,   182,   183,   184,
       0,   185,   186,   187,   188,   189,   190,   191,   192,     0,
     193,   194,     0,   195,   196,   197,   198,   199,     0,   200,
       0,     0,   201,     0,     0,   202,     0,     0,     0,   203,
       0,     0,     0,   204,   205,   206,     0,     0,   207,     0,
       0,     0,     0,   208,   209,  1606,     0,     0,  4244,   210,
       0,   211,     0,     0,     0,   212,     0,   213,   214,   215,
     216,     0,     0,     0,   217,     0,     0,   218,   219,   220,
       0,     0,     0,   221,     0,   222,   223,     0,   224,   225,
     226,     0,     0,   227,   228,     0,   229,   230,   231,   232,
     233,   234,     0,     0,   235,   236,   237,     0,     0,   238,
     239,     0,   240,   241,   242,  1607,     0,   243,     0,     0,
       0,   244,     0,   245,     0,   246,     0,   247,   248,   249,
     250,   251,   252,     0,   253,     0,     0,     0,   254,   255,
     256,     0,   257,  3014,     0,   258,   259,     0,     0,     0,
     260,   261,   262,   263,     0,     0,   264,   265,   266,     0,
     267,     0,   268,     0,     0,     0,     0,   269,   270,     0,
       0,     0,   271,     0,   272,   273,     0,   274,   275,     0,
       0,     0,   276,     0,     0,   277,   278,   279,     0,     0,
     280,     0,     0,   281,   282,     0,     0,     0,     0,     0,
     283,   284,     0,   285,     0,   286,     0,   287,   288,     0,
       0,  3015,     0,     0,     0,     0,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,     0,   304,   305,   306,     0,   307,   308,   309,   310,
       0,   311,   312,     0,     0,     0,     0,   313,   314,   315,
     316,   317,   318,     0,     0,   319,   320,     0,   321,     0,
     322,     0,   323,   324,   325,   326,   327,   328,   329,   330,
     331,     0,     0,   332,   333,     0,     0,   334,   335,   336,
     337,     0,     0,     0,   338,   339,     0,     0,  3016,     0,
     340,   341,   342,     0,   343,   344,   345,   346,     0,   347,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   348,
     349,   350,     0,     0,   351,     0,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,     0,     0,
     364,   365,   366,     0,   367,     0,   368,   369,   370,   371,
     372,     0,   373,   374,   375,     0,     0,   376,     0,     0,
       0,   377,   378,   379,   380,   381,     0,     0,   382,   383,
     384,   385,   386,     0,   387,   388,     0,   389,   390,   391,
       0,     0,   392,     0,   393,     0,   394,   395,     0,   396,
     397,     0,     0,     0,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,     0,   408,   409,     0,     0,     0,
     410,   411,   412,   413,     0,     0,     0,   414,     0,     0,
       0,   415,     0,   416,   417,   418,   419,   420,     0,   421,
     422,   423,   424,   425,   426,     0,     0,     0,     0,     0,
       0,   427,   428,     0,   429,     0,     0,   430,     0,     0,
     431,   432,   433,     0,     0,   434,   435,     0,   436,   437,
     438,   439,   440,   441,     0,     0,   442,   443,   444,   445,
       0,   446,   447,     0,   448,     0,   449,   450,   451,   452,
       0,   136,   453,   454,     0,   455,   456,   457,   458,     0,
       0,     0,     0,     0,   459,   460,   461,     0,     0,     0,
     462,   463,   464,   465,  3017,   466,   467,     0,   468,   469,
       0,   470,   471,     0,     0,   472,     0,     0,   473,     0,
     474,     0,   475,   476,   477,     0,     0,     0,     0,     0,
       0,   478,     0,     0,   479,     0,     0,     0,   480,   481,
     482,   483,   484,   485,     0,     0,     0,     0,     0,     0,
     486,   487,     0,   488,   489,   490,     0,   139,   491,   140,
     141,   142,   143,   144,     0,     0,   145,     0,     0,     0,
     146,     0,     0,   147,     0,   148,   149,   150,   151,   152,
     153,   154,     0,   155,     0,     0,  1383,   156,     0,     0,
       0,   157,     0,     0,   158,   159,   160,     0,   161,     0,
     162,   163,     0,     0,   164,     0,     0,   165,   166,     0,
     167,   168,     0,   169,   170,     0,   171,   172,   173,   174,
     175,   176,   177,     0,   178,   179,   180,   181,   182,   183,
     184,     0,   185,   186,   187,   188,   189,   190,   191,   192,
       0,   193,   194,     0,   195,   196,   197,   198,   199,     0,
     200,     0,     0,   201,     0,     0,   202,     0,     0,     0,
     203,     0,     0,     0,   204,   205,   206,     0,     0,   207,
       0,     0,     0,     0,   208,   209,     0,     0,     0,  1384,
     210,     0,   211,     0,     0,     0,   212,     0,   213,   214,
     215,   216,     0,     0,     0,   217,     0,     0,   218,   219,
     220,     0,     0,     0,   221,     0,   222,   223,     0,   224,
     225,   226,  1385,     0,   227,   228,     0,   229,   230,   231,
     232,   233,   234,     0,     0,   235,   236,   237,     0,     0,
     238,   239,     0,   240,   241,   242,     0,     0,   243,     0,
       0,     0,   244,     0,   245,     0,   246,     0,   247,   248,
     249,   250,   251,   252,     0,   253,     0,     0,     0,   254,
     255,   256,     0,   257,     0,     0,   258,   259,     0,     0,
       0,   260,   261,   262,   263,     0,     0,   264,   265,   266,
       0,   267,     0,   268,     0,     0,     0,     0,   269,   270,
       0,     0,     0,   271,     0,   272,   273,     0,   274,   275,
       0,     0,     0,   276,     0,     0,   277,   278,   279,     0,
       0,   280,     0,     0,   281,   282,   620,     0,     0,     0,
       0,   283,   284,     0,   285,     0,   286,     0,   287,   288,
       0,     0,     0,     0,     0,     0,     0,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,     0,   304,   305,   306,     0,   307,   308,   309,
     310,     0,   311,   312,     0,     0,     0,     0,   313,   314,
     315,   316,   317,   318,     0,     0,   319,   320,     0,   321,
       0,   322,     0,   323,   324,   325,   326,   327,   328,   329,
     330,   331,     0,     0,   332,   333,     0,     0,   334,   335,
     336,   337,     0,     0,     0,   338,   339,     0,     0,     0,
       0,   340,   341,   342,     0,   343,   344,   345,   346,     0,
     347,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     348,   349,   350,     0,     0,   351,     0,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,     0,
       0,   364,   365,   366,     0,   367,     0,   368,   369,   370,
     371,   372,     0,   373,   374,   375,     0,     0,   376,     0,
       0,     0,   377,   378,   379,   380,   381,     0,     0,   382,
     383,   384,   385,   386,     0,   387,   388,     0,   389,   390,
     391,     0,     0,   392,     0,   393,     0,   394,   395,     0,
     396,   397,     0,     0,     0,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,     0,   408,   409,     0,     0,
       0,   410,   411,   412,   413,     0,     0,  1386,   414,     0,
       0,     0,   415,     0,   416,   417,   418,   419,   420,     0,
     421,   422,   423,   424,   425,   426,     0,     0,     0,     0,
       0,     0,   427,   428,     0,   429,     0,     0,   430,     0,
       0,   431,   432,   433,     0,     0,   434,   435,     0,   436,
     437,   438,   439,   440,   441,     0,     0,   442,   443,   444,
     445,     0,   446,   447,     0,   448,     0,   449,   450,   451,
     452,     0,   136,   453,   454,     0,   455,   456,   457,   458,
       0,     0,     0,     0,     0,   459,   460,   461,     0,     0,
       0,   462,   463,   464,   465,     0,   466,   467,     0,   468,
     469,     0,   470,   471,     0,     0,   472,     0,     0,   473,
       0,   474,     0,   475,   476,   477,     0,     0,     0,     0,
       0,     0,   478,     0,     0,   479,     0,     0,     0,   480,
     481,   482,   483,   484,   485,     0,     0,     0,     0,     0,
       0,   486,   487,     0,   488,   489,   490,     0,   139,   491,
     140,   141,   142,   143,   144,     0,     0,   145,     0,     0,
       0,   146,     0,     0,   147,     0,   148,   149,   150,   151,
     152,   153,   154,     0,   155,     0,     0,  1396,   156,     0,
       0,     0,   157,     0,     0,   158,   159,   160,     0,   161,
       0,   162,   163,     0,     0,   164,     0,     0,   165,   166,
       0,   167,   168,     0,   169,   170,     0,   171,   172,   173,
     174,   175,   176,   177,     0,   178,   179,   180,   181,   182,
     183,   184,     0,   185,   186,   187,   188,   189,   190,   191,
     192,     0,   193,   194,     0,   195,   196,   197,   198,   199,
       0,   200,     0,     0,   201,     0,     0,   202,     0,     0,
       0,   203,     0,     0,     0,   204,   205,   206,     0,     0,
     207,     0,     0,     0,     0,   208,   209,     0,     0,     0,
    1397,   210,     0,   211,     0,     0,     0,   212,     0,   213,
     214,   215,   216,     0,     0,     0,   217,     0,     0,   218,
     219,   220,     0,     0,     0,   221,     0,   222,   223,     0,
     224,   225,   226,     0,     0,   227,   228,     0,   229,   230,
     231,   232,   233,   234,     0,     0,   235,   236,   237,     0,
       0,   238,   239,     0,   240,   241,   242,     0,     0,   243,
       0,     0,     0,   244,     0,   245,     0,   246,     0,   247,
     248,   249,   250,   251,   252,     0,   253,     0,     0,     0,
     254,   255,   256,     0,   257,     0,     0,   258,   259,     0,
       0,     0,   260,   261,   262,   263,     0,     0,   264,   265,
     266,     0,   267,     0,   268,     0,     0,     0,     0,   269,
     270,     0,     0,     0,   271,     0,   272,   273,     0,   274,
     275,     0,     0,     0,   276,     0,     0,   277,   278,   279,
       0,     0,   280,     0,     0,   281,   282,   620,     0,     0,
       0,     0,   283,   284,     0,   285,     0,   286,     0,   287,
     288,     0,     0,     0,     0,     0,     0,     0,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,     0,   304,   305,   306,     0,   307,   308,
     309,   310,     0,   311,   312,     0,     0,     0,     0,   313,
     314,   315,   316,   317,   318,     0,     0,   319,   320,     0,
     321,     0,   322,     0,   323,   324,   325,   326,   327,   328,
     329,   330,   331,     0,     0,   332,   333,     0,     0,   334,
     335,   336,   337,     0,     0,     0,   338,   339,     0,     0,
       0,     0,   340,   341,   342,     0,   343,   344,   345,   346,
       0,   347,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   348,   349,   350,     0,     0,   351,     0,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
       0,     0,   364,   365,   366,     0,   367,     0,   368,   369,
     370,   371,   372,     0,   373,   374,   375,     0,     0,   376,
       0,     0,     0,   377,   378,   379,   380,   381,     0,     0,
     382,   383,   384,   385,   386,     0,   387,   388,     0,   389,
     390,   391,     0,     0,   392,     0,   393,     0,   394,   395,
       0,   396,   397,     0,     0,     0,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,     0,   408,   409,     0,
       0,     0,   410,   411,   412,   413,     0,     0,     0,   414,
       0,     0,     0,   415,     0,   416,   417,   418,   419,   420,
       0,   421,   422,   423,   424,   425,   426,     0,     0,     0,
       0,     0,     0,   427,   428,     0,   429,     0,     0,   430,
       0,     0,   431,   432,   433,     0,     0,   434,   435,     0,
     436,   437,   438,   439,   440,   441,     0,     0,   442,   443,
     444,   445,     0,   446,   447,     0,   448,     0,   449,   450,
     451,   452,     0,   136,   453,   454,     0,   455,   456,   457,
     458,     0,     0,     0,     0,     0,   459,   460,   461,     0,
       0,     0,   462,   463,   464,   465,     0,   466,   467,     0,
     468,   469,     0,   470,   471,     0,     0,   472,     0,     0,
     473,     0,   474,     0,   475,   476,   477,     0,     0,     0,
       0,     0,     0,   478,     0,     0,   479,     0,     0,     0,
     480,   481,   482,   483,   484,   485,     0,     0,     0,     0,
       0,     0,   486,   487,     0,   488,   489,   490,     0,   139,
     491,   140,   141,   142,   143,   144,     0,     0,   145,     0,
       0,     0,   146,     0,     0,   147,     0,   148,   149,   150,
     151,   152,   153,   154,     0,   155,     0,     0,     0,   156,
       0,     0,     0,   157,     0,     0,   158,   159,   160,     0,
     161,     0,   162,   163,     0,     0,   164,     0,     0,   165,
     166,     0,   167,   168,     0,   169,   170,     0,   171,   172,
     173,   174,   175,   176,   177,     0,   178,   179,   180,   181,
     182,   183,   184,     0,   185,   186,   187,   188,   189,   190,
     191,   192,     0,   193,   194,     0,   195,   196,   197,   198,
     199,     0,   200,     0,     0,   201,     0,     0,   202,     0,
       0,     0,   203,     0,     0,     0,   204,   205,   206,     0,
       0,   207,     0,     0,     0,     0,   208,   209,     0,     0,
       0,     0,   210,     0,   211,     0,     0,     0,   212,     0,
     213,   214,   215,   216,     0,     0,     0,   217,     0,     0,
     218,   219,   220,     0,     0,     0,   221,     0,   222,   223,
       0,   224,   225,   226,     0,     0,   227,   228,     0,   229,
     230,   231,   232,   233,   234,     0,     0,   235,   236,   237,
       0,     0,   238,   239,     0,   240,   241,   242,     0,     0,
     243,     0,     0,     0,   244,     0,   245,     0,   246,     0,
     247,   248,   249,   250,   251,   252,     0,   253,     0,     0,
       0,   254,   255,   256,     0,   257,     0,     0,   258,   259,
       0,     0,     0,   260,   261,   262,   263,     0,     0,   264,
     265,   266,     0,   267,     0,   268,     0,     0,     0,     0,
     269,   270,     0,     0,     0,   271,     0,   272,   273,     0,
     274,   275,     0,     0,     0,   276,     0,     0,   277,   278,
     279,     0,     0,   280,     0,     0,   281,   282,     0,     0,
       0,     0,     0,   283,   284,     0,   285,     0,   286,     0,
     287,   288,     0,     0,  1907,     0,     0,     0,     0,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,     0,   304,   305,   306,     0,   307,
     308,   309,   310,     0,   311,   312,     0,     0,     0,     0,
     313,   314,   315,   316,   317,   318,     0,     0,   319,   320,
       0,   321,     0,   322,     0,   323,   324,   325,   326,   327,
     328,   329,   330,   331,     0,     0,   332,   333,     0,     0,
     334,   335,   336,   337,     0,     0,     0,   338,   339,     0,
       0,  1908,     0,   340,   341,   342,     0,   343,   344,   345,
     346,     0,   347,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   348,   349,   350,     0,   737,   351,     0,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,     0,     0,   364,   365,   366,     0,   367,     0,   368,
     369,   370,   371,   372,     0,   373,   374,   375,     0,     0,
     376,     0,     0,     0,   377,   378,   379,   380,   381,     0,
       0,   382,   383,   384,   385,   386,     0,   387,   388,     0,
     389,   390,   391,     0,     0,   392,     0,   393,     0,   394,
     395,     0,   396,   397,     0,     0,     0,   398,   399,   400,
    1909,   402,   403,   404,   405,   406,   407,     0,   408,   409,
       0,     0,     0,   410,   411,   412,   413,     0,     0,     0,
     414,     0,     0,     0,   415,     0,   416,   417,   418,   419,
     420,     0,   421,   422,   423,   424,   425,   426,     0,     0,
       0,     0,     0,     0,   427,   428,     0,   429,     0,     0,
     430,     0,     0,   431,   432,   433,     0,     0,   434,   435,
       0,   436,   437,   438,   439,   440,   441,     0,     0,   442,
     443,   444,   445,     0,   446,   447,     0,   448,     0,   449,
     450,   451,   452,     0,     0,   453,   454,     0,   455,   456,
     457,   458,     0,     0,     0,     0,     0,   459,   460,   461,
       0,     0,     0,   462,   463,   464,   465,  1910,   466,   467,
       0,   468,   469,     0,   470,   471,     0,     0,   472,     0,
       0,   473,     0,   474,     0,   475,   476,   477,     0,     0,
       0,     0,     0,     0,   478,     0,     0,   479,     0,     0,
       0,   480,   481,   482,   483,   484,   485,     0,     0,     0,
       0,     0,     0,   486,   487,     0,   488,   489,   490,     0,
     139,   491,   140,   141,   142,   143,   144,     0,     0,   145,
       0,     0,     0,   146,     0,     0,   147,     0,   148,   149,
     150,   151,   152,   153,   154,     0,   155,     0,     0,     0,
     156,     0,     0,     0,   157,     0,     0,   158,   159,   160,
       0,   161,     0,   162,   163,     0,     0,   164,     0,     0,
     165,   166,     0,   167,   168,     0,   169,   170,     0,   171,
     172,   173,   174,   175,   176,   177,     0,   178,   179,   180,
     181,   182,   183,   184,     0,   185,   186,   187,   188,   189,
     190,   191,   192,     0,   193,   194,     0,   195,   196,   197,
     198,   199,     0,   200,     0,     0,   201,     0,     0,   202,
       0,     0,     0,   203,     0,     0,     0,   204,   205,   206,
       0,     0,   207,     0,     0,     0,     0,   208,   209,     0,
       0,     0,     0,   210,     0,   211,     0,     0,     0,   212,
       0,   213,   214,   215,   216,     0,     0,     0,   217,     0,
       0,   218,   219,   220,     0,     0,     0,   221,     0,   222,
     223,     0,   224,   225,   226,     0,     0,   227,   228,     0,
     229,   230,   231,   232,   233,   234,     0,     0,   235,   236,
     237,     0,     0,   238,   239,     0,   240,   241,   242,     0,
       0,   243,     0,     0,     0,   244,     0,   245,     0,   246,
       0,   247,   248,   249,   250,   251,   252,     0,   253,     0,
       0,     0,   254,   255,   256,     0,   257,     0,     0,   258,
     259,     0,     0,     0,   260,   261,   262,   263,     0,     0,
     264,   265,   266,     0,   267,     0,   268,     0,     0,     0,
       0,   269,   270,     0,     0,     0,   271,     0,   272,   273,
       0,   274,   275,     0,     0,     0,   276,     0,     0,   277,
     278,   279,     0,     0,   280,     0,     0,   281,   282,     0,
       0,     0,     0,     0,   283,   284,     0,   285,     0,   286,
       0,   287,   288,     0,     0,  1907,     0,     0,     0,     0,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,     0,   304,   305,   306,     0,
     307,   308,   309,   310,     0,   311,   312,     0,     0,     0,
       0,   313,   314,   315,   316,   317,   318,     0,     0,   319,
     320,     0,   321,     0,   322,     0,   323,   324,   325,   326,
     327,   328,   329,   330,   331,     0,     0,   332,   333,     0,
       0,   334,   335,   336,   337,     0,     0,     0,   338,   339,
       0,     0,  1908,     0,   340,   341,   342,     0,   343,   344,
     345,   346,     0,   347,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   348,   349,   350,     0,   737,   351,     0,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,     0,     0,   364,   365,   366,     0,   367,     0,
     368,   369,   370,   371,   372,     0,   373,   374,   375,     0,
       0,   376,     0,     0,     0,   377,   378,   379,   380,   381,
       0,     0,   382,   383,   384,   385,   386,     0,   387,   388,
       0,   389,   390,   391,     0,     0,   392,     0,   393,     0,
     394,   395,     0,   396,   397,     0,     0,     0,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,     0,   408,
     409,     0,     0,     0,   410,   411,   412,   413,     0,     0,
       0,   414,     0,     0,     0,   415,     0,   416,   417,   418,
     419,   420,     0,   421,   422,   423,   424,   425,   426,     0,
       0,     0,     0,     0,     0,   427,   428,     0,   429,     0,
       0,   430,     0,     0,   431,   432,   433,     0,     0,   434,
     435,     0,   436,   437,   438,   439,   440,   441,     0,     0,
     442,   443,   444,   445,     0,   446,   447,     0,   448,     0,
     449,   450,   451,   452,     0,     0,   453,   454,     0,   455,
     456,   457,   458,     0,     0,     0,     0,     0,   459,   460,
     461,     0,     0,     0,   462,   463,   464,   465,  1910,   466,
     467,     0,   468,   469,     0,   470,   471,     0,     0,   472,
       0,     0,   473,     0,   474,     0,   475,   476,   477,     0,
       0,     0,     0,     0,     0,   478,     0,     0,   479,     0,
       0,     0,   480,   481,   482,   483,   484,   485,     0,     0,
       0,     0,     0,     0,   486,   487,     0,   488,   489,   490,
       0,   139,   491,   140,   141,   142,   143,   144,     0,     0,
     145,     0,     0,     0,   146,     0,     0,   147,     0,   148,
     149,   150,   151,   152,   153,   154,     0,   155,     0,     0,
    1383,   156,     0,     0,     0,   157,     0,     0,   158,   159,
     160,     0,   161,     0,   162,   163,     0,     0,   164,     0,
       0,   165,   166,     0,   167,   168,     0,   169,   170,     0,
     171,   172,   173,   174,   175,   176,   177,     0,   178,   179,
     180,   181,   182,   183,   184,     0,   185,   186,   187,   188,
     189,   190,   191,   192,     0,   193,   194,     0,   195,   196,
     197,   198,   199,     0,   200,     0,     0,   201,     0,     0,
     202,     0,     0,     0,   203,     0,     0,     0,   204,   205,
     206,     0,     0,   207,     0,     0,     0,     0,   208,   209,
       0,     0,     0,  1384,   210,     0,   211,     0,     0,     0,
     212,     0,   213,   214,   215,   216,     0,     0,     0,   217,
       0,     0,   218,   219,   220,     0,     0,     0,   221,     0,
     222,   223,     0,   224,   225,   226,     0,     0,   227,   228,
       0,   229,   230,   231,   232,   233,   234,     0,     0,   235,
     236,   237,     0,     0,   238,   239,     0,   240,   241,   242,
       0,     0,   243,     0,     0,     0,   244,     0,   245,     0,
     246,     0,   247,   248,   249,   250,   251,   252,     0,   253,
       0,     0,     0,   254,   255,   256,     0,   257,     0,     0,
     258,   259,     0,     0,     0,   260,   261,   262,   263,     0,
       0,   264,   265,   266,     0,   267,     0,   268,     0,     0,
       0,     0,   269,   270,     0,     0,     0,   271,     0,   272,
     273,     0,   274,   275,     0,     0,     0,   276,     0,     0,
     277,   278,   279,     0,     0,   280,     0,     0,   281,   282,
     620,     0,     0,     0,     0,   283,   284,     0,   285,     0,
     286,     0,   287,   288,     0,     0,     0,     0,     0,     0,
       0,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,     0,   304,   305,   306,
       0,   307,   308,   309,   310,     0,   311,   312,     0,     0,
       0,     0,   313,   314,   315,   316,   317,   318,     0,     0,
     319,   320,     0,   321,     0,   322,     0,   323,   324,   325,
     326,   327,   328,   329,   330,   331,     0,     0,   332,   333,
       0,     0,   334,   335,   336,   337,     0,     0,     0,   338,
     339,     0,     0,     0,     0,   340,   341,   342,     0,   343,
     344,   345,   346,     0,   347,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   348,   349,   350,     0,     0,   351,
       0,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,     0,     0,   364,   365,   366,     0,   367,
       0,   368,   369,   370,   371,   372,     0,   373,   374,   375,
       0,     0,   376,     0,     0,     0,   377,   378,   379,   380,
     381,     0,     0,   382,   383,   384,   385,   386,     0,   387,
     388,     0,   389,   390,   391,     0,     0,   392,     0,   393,
       0,   394,   395,     0,   396,   397,     0,     0,     0,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,     0,
     408,   409,     0,     0,     0,   410,   411,   412,   413,     0,
       0,     0,   414,     0,     0,     0,   415,     0,   416,   417,
     418,   419,   420,     0,   421,   422,   423,   424,   425,   426,
       0,     0,     0,     0,     0,     0,   427,   428,     0,   429,
       0,     0,   430,     0,     0,   431,   432,   433,     0,     0,
     434,   435,     0,   436,   437,   438,   439,   440,   441,     0,
       0,   442,   443,   444,   445,     0,   446,   447,     0,   448,
       0,   449,   450,   451,   452,     0,   136,   453,   454,     0,
     455,   456,   457,   458,     0,     0,     0,     0,     0,   459,
     460,   461,     0,     0,     0,   462,   463,   464,   465,     0,
     466,   467,     0,   468,   469,     0,   470,   471,     0,     0,
     472,     0,     0,   473,     0,   474,     0,   475,   476,   477,
       0,     0,     0,     0,     0,     0,   478,     0,     0,   479,
       0,     0,     0,   480,   481,   482,   483,   484,   485,     0,
       0,     0,     0,     0,     0,   486,   487,     0,   488,   489,
     490,     0,   139,   491,   140,   141,   142,   143,   144,     0,
       0,   145,     0,     0,     0,   146,     0,     0,   147,     0,
     148,   149,   150,   151,   152,   153,   154,     0,   155,     0,
       0,     0,   156,     0,     0,     0,   157,     0,     0,   158,
     159,   160,     0,   161,     0,   162,   163,     0,     0,   164,
       0,     0,   165,   166,     0,   167,   168,     0,   169,   170,
       0,   171,   172,   173,   174,   175,   176,   177,     0,   178,
     179,   180,   181,   182,   183,   184,     0,   185,   186,   187,
     188,   189,   190,   191,   192,     0,   193,   194,     0,   195,
     196,   197,   198,   199,     0,   200,     0,     0,   201,     0,
       0,   202,     0,     0,     0,   203,     0,     0,     0,   204,
     205,   206,     0,     0,   207,     0,     0,     0,     0,   208,
     209,     0,     0,     0,     0,   210,     0,   211,     0,     0,
       0,   212,     0,   213,   214,   215,   216,     0,     0,     0,
     217,     0,     0,   218,   219,   220,     0,     0,     0,   221,
       0,   222,   223,     0,   224,   225,   226,     0,     0,   227,
     228,     0,   229,   230,   231,   232,   233,   234,     0,     0,
     235,   236,   237,     0,     0,   238,   239,     0,   240,   241,
     242,     0,     0,   243,     0,     0,     0,   244,     0,   245,
       0,   246,     0,   247,   248,   249,   250,   251,   252,     0,
     253,     0,     0,     0,   254,   255,   256,     0,   257,     0,
       0,   258,   259,     0,     0,     0,   260,   261,   262,   263,
       0,     0,   264,   265,   266,     0,   267,     0,   268,     0,
       0,     0,     0,   269,   270,     0,     0,     0,   271,     0,
     272,   273,     0,   274,   275,     0,     0,     0,   276,     0,
       0,   277,   278,   279,     0,     0,   280,     0,     0,   281,
     282,     0,     0,     0,     0,     0,   283,   284,     0,   285,
       0,   286,     0,   287,   288,     0,     0,  1907,     0,     0,
       0,     0,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,     0,   304,   305,
     306,     0,   307,   308,   309,   310,     0,   311,   312,     0,
       0,     0,     0,   313,   314,   315,   316,   317,   318,     0,
       0,   319,   320,     0,   321,     0,   322,     0,   323,   324,
     325,   326,   327,   328,   329,   330,   331,     0,     0,   332,
     333,     0,     0,   334,   335,   336,   337,     0,     0,     0,
     338,   339,     0,     0,  1908,     0,   340,   341,   342,     0,
     343,   344,   345,   346,     0,   347,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   348,   349,   350,     0,   737,
     351,     0,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,     0,     0,   364,   365,   366,     0,
     367,     0,   368,   369,   370,   371,   372,     0,   373,   374,
     375,     0,     0,   376,     0,     0,     0,   377,   378,   379,
     380,   381,     0,     0,   382,   383,   384,   385,   386,     0,
     387,   388,     0,   389,   390,   391,     0,     0,   392,     0,
     393,     0,   394,   395,     0,   396,   397,     0,     0,     0,
     398,   399,   400,  3677,   402,   403,   404,   405,   406,   407,
       0,   408,   409,     0,     0,     0,   410,   411,   412,   413,
       0,     0,     0,   414,     0,     0,     0,   415,     0,   416,
     417,   418,   419,   420,     0,   421,   422,   423,   424,   425,
     426,     0,     0,     0,     0,     0,     0,   427,   428,     0,
     429,     0,     0,   430,     0,     0,   431,   432,   433,     0,
       0,   434,   435,     0,   436,   437,   438,   439,   440,   441,
       0,     0,   442,   443,   444,   445,     0,   446,   447,     0,
     448,     0,   449,   450,   451,   452,     0,     0,   453,   454,
       0,   455,   456,   457,   458,     0,     0,     0,     0,     0,
     459,   460,   461,     0,     0,     0,   462,   463,   464,   465,
    1910,   466,   467,     0,   468,   469,     0,   470,   471,     0,
       0,   472,     0,     0,   473,     0,   474,     0,   475,   476,
     477,     0,     0,     0,     0,     0,     0,   478,     0,     0,
     479,     0,     0,     0,   480,   481,   482,   483,   484,   485,
       0,     0,     0,     0,     0,     0,   486,   487,     0,   488,
     489,   490,     0,   139,   491,   140,   141,   142,   143,   144,
       0,     0,   145,     0,     0,     0,   146,     0,     0,   147,
       0,   148,   149,   150,   151,   152,   153,   154,     0,   155,
       0,     0,     0,   156,     0,     0,     0,   157,     0,     0,
     158,   159,   160,     0,   161,     0,   162,   163,     0,     0,
     164,     0,     0,   165,   166,     0,   167,   168,     0,   169,
     170,     0,   171,   172,   173,   174,   175,   176,   177,     0,
     178,   179,   180,   181,   182,   183,   184,     0,   185,   186,
     187,   188,   189,   190,   191,   192,     0,   193,   194,     0,
     195,   196,   197,   198,   199,     0,   200,     0,     0,   201,
       0,     0,   202,     0,  1012,     0,   203,     0,     0,     0,
     204,   205,   206,     0,     0,   207,     0,     0,     0,     0,
     208,   209,     0,     0,     0,     0,   210,     0,   211,     0,
       0,     0,   212,     0,   213,   214,   215,   216,     0,     0,
       0,   217,     0,     0,   218,   219,   220,     0,     0,     0,
     221,     0,   222,   223,     0,   224,   225,   226,     0,     0,
     227,   228,     0,   229,   230,   231,   232,   233,   234,     0,
       0,   235,   236,   237,     0,     0,   238,   239,     0,   240,
     241,   242,     0,     0,   243,     0,     0,     0,   244,     0,
     245,     0,   246,     0,   247,   248,   249,   250,   251,   252,
       0,   253,     0,     0,     0,   254,   255,   256,     0,   257,
       0,     0,   258,   259,     0,     0,     0,   260,   261,   262,
     263,     0,     0,   264,   265,   266,     0,   267,     0,   268,
       0,     0,     0,     0,   269,   270,     0,     0,     0,   271,
       0,   272,   273,     0,   274,   275,     0,     0,     0,   276,
       0,     0,   277,   278,   279,     0,     0,   280,     0,     0,
     281,   282,   620,     0,     0,     0,     0,   283,   284,     0,
     285,     0,   286,     0,   287,   288,     0,     0,     0,     0,
       0,     0,     0,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,     0,   304,
     305,   306,     0,   307,   308,   309,   310,     0,   311,   312,
       0,     0,     0,     0,   313,   314,   315,   316,   317,   318,
       0,     0,   319,   320,     0,   321,     0,   322,     0,   323,
     324,   325,   326,   327,   328,   329,   330,   331,     0,     0,
     332,   333,     0,     0,   334,   335,   336,   337,     0,     0,
       0,   338,   339,     0,     0,     0,     0,   340,   341,   342,
       0,   343,   344,   345,   346,     0,   347,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   348,   349,   350,     0,
       0,   351,     0,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,     0,     0,   364,   365,   366,
       0,   367,     0,   368,   369,   370,   371,   372,     0,   373,
     374,   375,     0,     0,   376,     0,     0,     0,   377,   378,
     379,   380,   381,     0,     0,   382,   383,   384,   385,   386,
       0,   387,   388,     0,   389,   390,   391,     0,     0,   392,
       0,   393,     0,   394,   395,     0,   396,   397,     0,     0,
       0,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,     0,   408,   409,     0,     0,     0,   410,   411,   412,
     413,     0,     0,     0,   414,     0,     0,     0,   415,     0,
     416,   417,   418,   419,   420,     0,   421,   422,   423,   424,
     425,   426,     0,     0,     0,     0,     0,     0,   427,   428,
       0,   429,     0,     0,   430,     0,     0,   431,   432,   433,
       0,     0,   434,   435,     0,   436,   437,   438,   439,   440,
     441,     0,     0,   442,   443,   444,   445,     0,   446,   447,
       0,   448,     0,   449,   450,   451,   452,     0,   136,   453,
     454,     0,   455,   456,   457,   458,     0,     0,     0,     0,
       0,   459,   460,   461,     0,     0,     0,   462,   463,   464,
     465,     0,   466,   467,     0,   468,   469,     0,   470,   471,
       0,     0,   472,     0,     0,   473,     0,   474,     0,   475,
     476,   477,     0,     0,     0,     0,     0,     0,   478,     0,
       0,   479,     0,     0,     0,   480,   481,   482,   483,   484,
     485,     0,     0,     0,     0,     0,     0,   486,   487,     0,
     488,   489,   490,     0,   139,   491,   140,   141,   142,   143,
     144,  1419,     0,   145,     0,     0,     0,   146,     0,     0,
     147,     0,   148,   149,   150,   151,   152,   153,   154,     0,
     155,     0,     0,     0,   156,     0,     0,     0,   157,     0,
       0,   158,   159,   160,     0,   161,     0,   162,   163,     0,
       0,   164,     0,     0,   165,   166,     0,   167,   168,     0,
     169,   170,     0,   171,   172,   173,   174,   175,   176,   177,
       0,   178,   179,   180,   181,   182,   183,   184,     0,   185,
     186,   187,   188,   189,   190,   191,   192,     0,   193,   194,
       0,   195,   196,   197,   198,   199,     0,   200,     0,     0,
     201,     0,     0,   202,     0,     0,     0,   203,     0,     0,
       0,   204,   205,   206,     0,     0,   207,     0,     0,     0,
       0,   208,   209,     0,     0,     0,     0,   210,     0,   211,
       0,     0,     0,   212,     0,   213,   214,   215,   216,     0,
       0,     0,   217,     0,     0,   218,   219,   220,     0,     0,
       0,   221,     0,   222,   223,     0,   224,   225,   226,     0,
       0,   227,   228,     0,   229,   230,   231,   232,   233,   234,
       0,     0,   235,   236,   237,     0,     0,   238,   239,     0,
     240,   241,   242,     0,     0,   243,     0,     0,     0,   244,
       0,   245,     0,   246,     0,   247,   248,   249,   250,   251,
     252,     0,   253,     0,     0,     0,   254,   255,   256,     0,
     257,     0,     0,   258,   259,     0,     0,     0,   260,   261,
     262,   263,     0,     0,   264,   265,   266,     0,   267,     0,
     268,     0,     0,     0,     0,   269,   270,     0,     0,     0,
     271,     0,   272,   273,     0,   274,   275,     0,     0,     0,
     276,     0,     0,   277,   278,   279,     0,     0,   280,     0,
       0,   281,   282,   620,     0,     0,     0,     0,   283,   284,
       0,   285,     0,   286,     0,   287,   288,     0,     0,     0,
       0,     0,     0,     0,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,     0,
     304,   305,   306,     0,   307,   308,   309,   310,     0,   311,
     312,     0,     0,     0,     0,   313,   314,   315,   316,   317,
     318,     0,     0,   319,   320,     0,   321,     0,   322,     0,
     323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
       0,   332,   333,     0,     0,   334,   335,   336,   337,     0,
       0,     0,   338,   339,     0,     0,     0,     0,   340,   341,
     342,     0,   343,   344,   345,   346,     0,   347,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   348,   349,   350,
       0,     0,   351,     0,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,     0,     0,   364,   365,
     366,     0,   367,     0,   368,   369,   370,   371,   372,     0,
     373,   374,   375,     0,     0,   376,     0,     0,     0,   377,
     378,   379,   380,   381,     0,     0,   382,   383,   384,   385,
     386,     0,   387,   388,     0,   389,   390,   391,     0,     0,
     392,     0,   393,     0,   394,   395,     0,   396,   397,     0,
       0,     0,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,     0,   408,   409,     0,     0,     0,   410,   411,
     412,   413,     0,     0,     0,   414,     0,     0,     0,   415,
       0,   416,   417,   418,   419,   420,     0,   421,   422,   423,
     424,   425,   426,     0,     0,     0,     0,     0,     0,   427,
     428,     0,   429,     0,     0,   430,     0,     0,   431,   432,
     433,     0,     0,   434,   435,     0,   436,   437,   438,   439,
     440,   441,     0,     0,   442,   443,   444,   445,     0,   446,
     447,     0,   448,     0,   449,   450,   451,   452,     0,   136,
     453,   454,     0,   455,   456,   457,   458,     0,     0,     0,
       0,     0,   459,   460,   461,     0,     0,     0,   462,   463,
     464,   465,     0,   466,   467,     0,   468,   469,     0,   470,
     471,     0,     0,   472,     0,     0,   473,     0,   474,     0,
     475,   476,   477,     0,     0,     0,     0,     0,     0,   478,
       0,     0,   479,     0,     0,     0,   480,   481,   482,   483,
     484,   485,     0,     0,     0,     0,     0,     0,   486,   487,
       0,   488,   489,   490,     0,   139,   491,   140,   141,   142,
     143,   144,     0,     0,   145,     0,     0,     0,   146,     0,
       0,   147,     0,   148,   149,   150,   151,   152,   153,   154,
       0,   155,     0,     0,     0,   156,   990,     0,     0,   157,
       0,     0,   158,   159,   160,     0,   161,     0,   162,   163,
       0,     0,   164,     0,     0,   165,   166,     0,   167,   168,
       0,   169,   170,     0,   171,   172,   173,   174,   175,   176,
     177,     0,   178,   179,   180,   181,   182,   183,   184,     0,
     185,   186,   187,   188,   189,   190,   191,   192,     0,   193,
     194,     0,   195,   196,   197,   198,   199,     0,   200,     0,
       0,   201,     0,     0,   202,     0,     0,     0,   203,     0,
       0,     0,   204,   205,   206,     0,     0,   207,     0,     0,
       0,     0,   208,   209,     0,     0,     0,     0,   210,     0,
     211,     0,     0,     0,   212,     0,   213,   214,   215,   216,
       0,     0,     0,   217,     0,     0,   218,   219,   220,     0,
       0,     0,   221,     0,   222,   223,     0,   224,   225,   226,
       0,     0,   227,   228,     0,   229,   230,   231,   232,   233,
     234,     0,     0,   235,   236,   237,     0,     0,   238,   239,
       0,   240,   241,   242,     0,     0,   243,     0,     0,     0,
     244,     0,   245,     0,   246,     0,   247,   248,   249,   250,
     251,   252,     0,   253,     0,     0,     0,   254,   255,   256,
       0,   257,   991,     0,   258,   259,     0,     0,     0,   260,
     261,   262,   263,     0,     0,   264,   265,   266,     0,   267,
       0,   268,     0,     0,     0,     0,   269,   270,     0,     0,
       0,   271,     0,   272,   273,     0,   274,   275,     0,     0,
       0,   276,     0,     0,   277,   278,   279,     0,     0,   280,
       0,     0,   281,   282,     0,     0,     0,     0,     0,   283,
     284,     0,   285,     0,   286,     0,   287,   288,     0,     0,
       0,     0,     0,     0,     0,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
       0,   304,   305,   306,     0,   307,   308,   309,   310,     0,
     311,   312,     0,     0,     0,     0,   313,   314,   315,   316,
     317,   318,     0,     0,   319,   320,     0,   321,     0,   322,
       0,   323,   324,   325,   326,   327,   328,   329,   330,   331,
       0,     0,   332,   333,     0,     0,   334,   335,   336,   337,
       0,     0,     0,   338,   339,     0,     0,     0,     0,   340,
     341,   342,     0,   343,   344,   345,   346,     0,   347,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   348,   349,
     350,     0,     0,   351,     0,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,     0,     0,   364,
     365,   366,     0,   367,     0,   368,   369,   370,   371,   372,
       0,   373,   374,   375,     0,     0,   376,     0,     0,     0,
     377,   378,   379,   380,   381,     0,     0,   382,   383,   384,
     385,   386,     0,   387,   388,     0,   389,   390,   391,     0,
       0,   392,     0,   393,     0,   394,   395,     0,   396,   397,
       0,     0,     0,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,     0,   408,   409,     0,     0,     0,   410,
     411,   412,   413,     0,     0,     0,   414,     0,     0,     0,
     415,     0,   416,   417,   418,   419,   420,     0,   421,   422,
     423,   424,   425,   426,     0,     0,     0,     0,     0,     0,
     427,   428,     0,   429,     0,     0,   430,     0,     0,   431,
     432,   433,     0,     0,   434,   435,     0,   436,   437,   438,
     439,   440,   441,     0,     0,   442,   443,   444,   445,     0,
     446,   447,     0,   448,     0,   449,   450,   451,   452,     0,
     992,   453,   454,     0,   455,   456,   457,   458,     0,     0,
       0,     0,     0,   459,   460,   461,     0,     0,     0,   462,
     463,   464,   465,     0,   466,   467,     0,   468,   469,     0,
     470,   471,     0,     0,   472,     0,     0,   473,     0,   474,
       0,   475,   476,   477,     0,     0,     0,     0,     0,     0,
     478,     0,     0,   479,     0,     0,     0,   480,   481,   482,
     483,   484,   485,     0,     0,     0,     0,     0,     0,   486,
     487,     0,   488,   489,   490,     0,   139,   491,   140,   141,
     142,   143,   144,     0,     0,   145,     0,     0,     0,   146,
       0,     0,   147,     0,   148,   149,   150,   151,   152,   153,
     154,     0,   155,     0,     0,     0,   156,     0,     0,     0,
     157,     0,     0,   158,   159,   160,     0,   161,     0,   162,
     163,     0,     0,   164,     0,     0,   165,   166,     0,   167,
     168,     0,   169,   170,     0,   171,   172,   173,   174,   175,
     176,   177,     0,   178,   179,   180,   181,   182,   183,   184,
       0,   185,   186,   187,   188,   189,   190,   191,   192,     0,
     193,   194,     0,   195,   196,   197,   198,   199,     0,   200,
       0,     0,   201,     0,     0,   202,     0,     0,     0,   203,
       0,     0,     0,   204,   205,   206,     0,     0,   207,     0,
       0,     0,     0,   208,   209,     0,     0,     0,  2414,   210,
       0,   211,     0,     0,     0,   212,     0,   213,   214,   215,
     216,     0,     0,     0,   217,     0,     0,   218,   219,   220,
       0,     0,     0,   221,     0,   222,   223,     0,   224,   225,
     226,     0,     0,   227,   228,     0,   229,   230,   231,   232,
     233,   234,     0,     0,   235,   236,   237,     0,     0,   238,
     239,     0,   240,   241,   242,     0,     0,   243,     0,     0,
       0,   244,     0,   245,     0,   246,     0,   247,   248,   249,
     250,   251,   252,     0,   253,     0,     0,     0,   254,   255,
     256,     0,   257,     0,     0,   258,   259,     0,     0,     0,
     260,   261,   262,   263,     0,     0,   264,   265,   266,     0,
     267,     0,   268,     0,     0,     0,     0,   269,   270,     0,
       0,     0,   271,     0,   272,   273,     0,   274,   275,     0,
       0,     0,   276,     0,     0,   277,   278,   279,     0,     0,
     280,     0,     0,   281,   282,   620,     0,     0,     0,     0,
     283,   284,     0,   285,     0,   286,     0,   287,   288,     0,
       0,     0,     0,     0,     0,     0,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,     0,   304,   305,   306,     0,   307,   308,   309,   310,
       0,   311,   312,     0,     0,     0,     0,   313,   314,   315,
     316,   317,   318,     0,     0,   319,   320,     0,   321,     0,
     322,     0,   323,   324,   325,   326,   327,   328,   329,   330,
     331,     0,     0,   332,   333,     0,     0,   334,   335,   336,
     337,     0,     0,     0,   338,   339,     0,     0,     0,     0,
     340,   341,   342,     0,   343,   344,   345,   346,     0,   347,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   348,
     349,   350,     0,     0,   351,     0,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,     0,     0,
     364,   365,   366,     0,   367,     0,   368,   369,   370,   371,
     372,     0,   373,   374,   375,     0,     0,   376,     0,     0,
       0,   377,   378,   379,   380,   381,     0,     0,   382,   383,
     384,   385,   386,     0,   387,   388,     0,   389,   390,   391,
       0,     0,   392,     0,   393,     0,   394,   395,     0,   396,
     397,     0,     0,     0,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,     0,   408,   409,     0,     0,     0,
     410,   411,   412,   413,     0,     0,     0,   414,     0,     0,
       0,   415,     0,   416,   417,   418,   419,   420,     0,   421,
     422,   423,   424,   425,   426,     0,     0,     0,     0,     0,
       0,   427,   428,     0,   429,     0,     0,   430,     0,     0,
     431,   432,   433,     0,     0,   434,   435,     0,   436,   437,
     438,   439,   440,   441,     0,     0,   442,   443,   444,   445,
       0,   446,   447,     0,   448,     0,   449,   450,   451,   452,
       0,   136,   453,   454,     0,   455,   456,   457,   458,     0,
       0,     0,     0,     0,   459,   460,   461,     0,     0,     0,
     462,   463,   464,   465,     0,   466,   467,     0,   468,   469,
       0,   470,   471,     0,     0,   472,     0,     0,   473,     0,
     474,     0,   475,   476,   477,     0,     0,     0,     0,     0,
       0,   478,     0,     0,   479,     0,     0,     0,   480,   481,
     482,   483,   484,   485,     0,     0,     0,     0,     0,     0,
     486,   487,     0,   488,   489,   490,     0,   139,   491,   140,
     141,   142,   143,   144,     0,     0,   145,     0,     0,     0,
     146,     0,     0,   147,     0,   148,   149,   150,   151,   152,
     153,   154,     0,   155,     0,     0,  1383,   156,     0,     0,
       0,   157,     0,     0,   158,   159,   160,     0,   161,     0,
     162,   163,     0,     0,   164,     0,     0,   165,   166,     0,
     167,   168,     0,   169,   170,     0,   171,   172,   173,   174,
     175,   176,   177,     0,   178,   179,   180,   181,   182,   183,
     184,     0,   185,   186,   187,   188,   189,   190,   191,   192,
       0,   193,   194,     0,   195,   196,   197,   198,   199,     0,
     200,     0,     0,   201,     0,     0,   202,     0,     0,     0,
     203,     0,     0,     0,   204,   205,   206,     0,     0,   207,
       0,     0,     0,     0,   208,   209,     0,     0,     0,     0,
     210,     0,   211,     0,     0,     0,   212,     0,   213,   214,
     215,   216,     0,     0,     0,   217,     0,     0,   218,   219,
     220,     0,     0,     0,   221,     0,   222,   223,     0,   224,
     225,   226,     0,     0,   227,   228,     0,   229,   230,   231,
     232,   233,   234,     0,     0,   235,   236,   237,     0,     0,
     238,   239,     0,   240,   241,   242,     0,     0,   243,     0,
       0,     0,   244,     0,   245,     0,   246,     0,   247,   248,
     249,   250,   251,   252,     0,   253,     0,     0,     0,   254,
     255,   256,     0,   257,     0,     0,   258,   259,     0,     0,
       0,   260,   261,   262,   263,     0,     0,   264,   265,   266,
       0,   267,     0,   268,     0,     0,     0,     0,   269,   270,
       0,     0,     0,   271,     0,   272,   273,     0,   274,   275,
       0,     0,     0,   276,     0,     0,   277,   278,   279,     0,
       0,   280,     0,     0,   281,   282,   620,     0,     0,     0,
       0,   283,   284,     0,   285,     0,   286,     0,   287,   288,
       0,     0,     0,     0,     0,     0,     0,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,     0,   304,   305,   306,     0,   307,   308,   309,
     310,     0,   311,   312,     0,     0,     0,     0,   313,   314,
     315,   316,   317,   318,     0,     0,   319,   320,     0,   321,
       0,   322,     0,   323,   324,   325,   326,   327,   328,   329,
     330,   331,     0,     0,   332,   333,     0,     0,   334,   335,
     336,   337,     0,     0,     0,   338,   339,     0,     0,     0,
       0,   340,   341,   342,     0,   343,   344,   345,   346,     0,
     347,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     348,   349,   350,     0,     0,   351,     0,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,     0,
       0,   364,   365,   366,     0,   367,     0,   368,   369,   370,
     371,   372,     0,   373,   374,   375,     0,     0,   376,     0,
       0,     0,   377,   378,   379,   380,   381,     0,     0,   382,
     383,   384,   385,   386,     0,   387,   388,     0,   389,   390,
     391,     0,     0,   392,     0,   393,     0,   394,   395,     0,
     396,   397,     0,     0,     0,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,     0,   408,   409,     0,     0,
       0,   410,   411,   412,   413,     0,     0,     0,   414,     0,
       0,     0,   415,     0,   416,   417,   418,   419,   420,     0,
     421,   422,   423,   424,   425,   426,     0,     0,     0,     0,
       0,     0,   427,   428,     0,   429,     0,     0,   430,     0,
       0,   431,   432,   433,     0,     0,   434,   435,     0,   436,
     437,   438,   439,   440,   441,     0,     0,   442,   443,   444,
     445,     0,   446,   447,     0,   448,     0,   449,   450,   451,
     452,     0,   136,   453,   454,     0,   455,   456,   457,   458,
       0,     0,     0,     0,     0,   459,   460,   461,     0,     0,
       0,   462,   463,   464,   465,     0,   466,   467,     0,   468,
     469,     0,   470,   471,     0,     0,   472,     0,     0,   473,
       0,   474,     0,   475,   476,   477,     0,     0,     0,     0,
       0,     0,   478,     0,     0,   479,     0,     0,     0,   480,
     481,   482,   483,   484,   485,     0,     0,     0,     0,     0,
       0,   486,   487,     0,   488,   489,   490,     0,   139,   491,
     140,   141,   142,   143,   144,     0,     0,   145,     0,     0,
       0,   146,     0,     0,   147,     0,   148,   149,   150,   151,
     152,   153,   154,     0,   155,     0,     0,     0,   156,     0,
       0,     0,   157,     0,     0,   158,   159,   160,     0,   161,
       0,   162,   163,     0,     0,   164,     0,     0,   165,   166,
       0,   167,   168,     0,   169,   170,     0,   171,   172,   173,
     174,   175,   176,   177,     0,   178,   179,   180,   181,   182,
     183,   184,     0,   185,   186,   187,   188,   189,   190,   191,
     192,     0,   193,   194,     0,   195,   196,   197,   198,   199,
       0,   200,     0,     0,   201,     0,     0,   202,     0,     0,
       0,   203,     0,     0,     0,   204,   205,   206,     0,     0,
     207,     0,     0,     0,     0,   208,   209,     0,     0,     0,
       0,   210,     0,   211,     0,     0,     0,   212,     0,   213,
     214,   215,   216,     0,     0,     0,   217,     0,     0,   218,
     219,   220,     0,     0,     0,   221,     0,   222,   223,     0,
     224,   225,   226,     0,     0,   227,   228,     0,   229,   230,
     231,   232,   233,   234,     0,     0,   235,   236,   237,     0,
       0,   238,   239,     0,   240,   241,   242,     0,     0,   243,
       0,     0,     0,   244,     0,   245,     0,   246,     0,   247,
     248,   249,   250,   251,   252,     0,   253,     0,     0,     0,
     254,   255,   256,     0,   257,     0,     0,   258,   259,     0,
       0,     0,   260,   261,   262,   263,     0,     0,   264,   265,
     266,     0,   267,     0,   268,     0,     0,     0,     0,   269,
     270,     0,     0,     0,   271,     0,   272,   273,     0,   274,
     275,     0,     0,     0,   276,     0,     0,   277,   278,   279,
       0,     0,   280,     0,     0,   281,   282,   620,     0,     0,
       0,     0,   283,   284,     0,   285,     0,   286,     0,   287,
     288,     0,     0,     0,     0,     0,     0,     0,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,     0,   304,   305,   306,     0,   307,   308,
     309,   310,     0,   311,   312,     0,     0,     0,     0,   313,
     314,   315,   316,   317,   318,     0,     0,   319,   320,     0,
     321,     0,   322,     0,   323,   324,   325,   326,   327,   328,
     329,   330,   331,     0,     0,   332,   333,     0,     0,   334,
     335,   336,   337,     0,     0,     0,   338,   339,     0,     0,
       0,     0,   340,   341,   342,     0,   343,   344,   345,   346,
       0,   347,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   348,   349,   350,     0,     0,   351,     0,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
       0,     0,   364,   365,   366,     0,   367,     0,   368,   369,
     370,   371,   372,     0,   373,   374,   375,     0,     0,   376,
       0,     0,     0,   377,   378,   379,   380,   381,     0,     0,
     382,   383,   384,   385,   386,     0,   387,   388,     0,   389,
     390,   391,     0,     0,   392,     0,   393,     0,   394,   395,
       0,   396,   397,     0,     0,     0,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,     0,   408,   409,     0,
       0,     0,   410,   411,   412,   413,     0,     0,     0,   414,
       0,     0,     0,   415,     0,   416,   417,   418,   419,   420,
       0,   421,   422,   423,   424,   425,   426,     0,     0,     0,
       0,     0,     0,   427,   428,     0,   429,     0,     0,   430,
       0,     0,   431,   432,   433,     0,     0,   434,   435,     0,
     436,   437,   438,   439,   440,   441,     0,     0,   442,   443,
     444,   445,     0,   446,   447,     0,   448,     0,   449,   450,
     451,   452,     0,   136,   453,   454,     0,   455,   456,   457,
     458,     0,     0,     0,     0,     0,   459,   460,   461,     0,
       0,     0,   462,   463,   464,   465,     0,   466,   467,     0,
     468,   469,     0,   470,   471,     0,     0,   472,     0,     0,
     473,     0,   474,     0,   475,   476,   477,     0,     0,     0,
       0,     0,     0,   478,     0,     0,   479,     0,     0,     0,
     480,   481,   482,   483,   484,   485,     0,     0,     0,     0,
       0,     0,   486,   487,     0,   488,   489,   490,     0,   139,
     491,   140,   141,   142,   143,   144,     0,     0,   145,     0,
       0,     0,   146,  2840,     0,   147,     0,   148,   149,   150,
     151,   152,   153,   154,     0,   155,     0,     0,     0,   156,
       0,     0,     0,   157,     0,     0,   158,   159,   160,     0,
     161,     0,   162,   163,     0,     0,   164,     0,     0,   165,
     166,     0,   167,   168,     0,   169,   170,     0,   171,   172,
     173,   174,   175,   176,   177,     0,   178,   179,   180,   181,
     182,   183,   184,     0,   185,   186,   187,   188,   189,   190,
     191,   192,     0,   193,   194,     0,   195,   196,   197,   198,
     199,     0,   200,     0,     0,   201,     0,     0,   202,     0,
       0,     0,   203,     0,     0,     0,   204,   205,   206,     0,
       0,   207,     0,     0,     0,     0,   208,   209,     0,     0,
       0,     0,   210,     0,   211,     0,     0,     0,   212,     0,
     213,   214,   215,   216,     0,     0,     0,   217,     0,     0,
     218,   219,   220,     0,     0,     0,   221,     0,   222,   223,
       0,   224,   225,   226,     0,     0,   227,   228,     0,   229,
     230,   231,   232,   233,   234,     0,     0,   235,   236,   237,
       0,     0,   238,   239,     0,   240,   241,   242,     0,     0,
     243,     0,     0,     0,   244,     0,   245,     0,   246,     0,
     247,   248,   249,   250,   251,   252,     0,   253,     0,     0,
       0,   254,   255,   256,     0,   257,     0,     0,   258,   259,
       0,     0,     0,   260,   261,   262,   263,     0,     0,   264,
     265,   266,     0,   267,     0,   268,     0,     0,     0,     0,
     269,   270,     0,     0,     0,   271,     0,   272,   273,     0,
     274,   275,     0,     0,     0,   276,     0,     0,   277,   278,
     279,     0,     0,   280,     0,     0,   281,   282,     0,     0,
       0,     0,     0,   283,   284,     0,   285,     0,   286,     0,
     287,   288,     0,     0,     0,     0,     0,     0,     0,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,     0,   304,   305,   306,     0,   307,
     308,   309,   310,     0,   311,   312,     0,     0,     0,     0,
     313,   314,   315,   316,   317,   318,     0,     0,   319,   320,
       0,   321,     0,   322,     0,   323,   324,   325,   326,   327,
     328,   329,   330,   331,     0,     0,   332,   333,     0,     0,
     334,   335,   336,   337,     0,     0,     0,   338,   339,     0,
       0,     0,     0,   340,   341,   342,     0,   343,   344,   345,
     346,     0,   347,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   348,   349,   350,     0,     0,   351,     0,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,     0,     0,   364,   365,   366,     0,   367,     0,   368,
     369,   370,   371,   372,     0,   373,   374,   375,     0,     0,
     376,     0,     0,     0,   377,   378,   379,   380,   381,     0,
       0,   382,   383,   384,   385,   386,     0,   387,   388,     0,
     389,   390,   391,     0,     0,   392,     0,   393,     0,   394,
     395,     0,   396,   397,     0,     0,     0,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,     0,   408,   409,
       0,     0,     0,   410,   411,   412,   413,     0,     0,     0,
     414,     0,     0,     0,   415,     0,   416,   417,   418,   419,
     420,     0,   421,   422,   423,   424,   425,   426,     0,     0,
       0,     0,     0,     0,   427,   428,     0,   429,     0,     0,
     430,     0,     0,   431,   432,   433,     0,     0,   434,   435,
       0,   436,   437,   438,   439,   440,   441,     0,     0,   442,
     443,   444,   445,     0,   446,   447,     0,   448,     0,   449,
     450,   451,   452,     0,   136,   453,   454,     0,   455,   456,
     457,   458,     0,     0,     0,     0,     0,   459,   460,   461,
       0,     0,     0,   462,   463,   464,   465,     0,   466,   467,
       0,   468,   469,     0,   470,   471,     0,     0,   472,     0,
       0,   473,     0,   474,     0,   475,   476,   477,     0,     0,
       0,     0,     0,     0,   478,     0,     0,   479,     0,     0,
       0,   480,   481,   482,   483,   484,   485,     0,     0,     0,
       0,     0,     0,   486,   487,     0,   488,   489,   490,     0,
     139,   491,   140,   141,   142,   143,   144,     0,     0,   145,
       0,     0,     0,   146,     0,     0,   147,     0,   148,   149,
     150,   151,   152,   153,   154,     0,   155,     0,     0,     0,
     156,     0,     0,     0,   157,     0,     0,   158,   159,   160,
       0,   161,     0,   162,   163,     0,     0,   164,     0,     0,
     165,   166,     0,   167,   168,     0,   169,   170,     0,   171,
     172,   173,   174,   175,   176,   177,     0,   178,   179,   180,
     181,   182,   183,   184,     0,   185,   186,   187,   188,   189,
     190,   191,   192,     0,   193,   194,     0,   195,   196,   197,
     198,   199,  4416,   200,     0,     0,   201,     0,     0,   202,
       0,     0,     0,   203,     0,     0,     0,   204,   205,   206,
       0,     0,   207,     0,     0,     0,     0,   208,   209,     0,
       0,     0,     0,   210,     0,   211,     0,     0,     0,   212,
       0,   213,   214,   215,   216,     0,     0,     0,   217,     0,
       0,   218,   219,   220,     0,     0,     0,   221,     0,   222,
     223,     0,   224,   225,   226,     0,     0,   227,   228,     0,
     229,   230,   231,   232,   233,   234,     0,  4417,   235,   236,
     237,     0,     0,   238,   239,     0,   240,   241,   242,     0,
       0,   243,     0,     0,     0,   244,     0,   245,     0,   246,
       0,   247,   248,   249,   250,   251,   252,     0,   253,     0,
       0,     0,   254,   255,   256,     0,   257,     0,     0,   258,
     259,     0,     0,     0,   260,   261,   262,   263,     0,     0,
     264,   265,   266,     0,   267,     0,   268,     0,     0,     0,
       0,   269,   270,     0,     0,     0,   271,     0,   272,   273,
       0,   274,   275,     0,     0,     0,   276,     0,     0,   277,
     278,   279,     0,     0,   280,     0,     0,   281,   282,     0,
       0,     0,     0,     0,   283,   284,     0,   285,     0,   286,
       0,   287,   288,     0,     0,     0,     0,     0,     0,     0,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,     0,   304,   305,   306,     0,
     307,   308,   309,   310,     0,   311,   312,     0,     0,     0,
       0,   313,   314,   315,   316,   317,   318,     0,     0,   319,
     320,     0,   321,     0,   322,     0,   323,   324,   325,   326,
     327,   328,   329,   330,   331,     0,     0,   332,   333,     0,
       0,   334,   335,   336,   337,     0,     0,     0,   338,   339,
       0,     0,     0,     0,   340,   341,   342,     0,   343,   344,
     345,   346,     0,   347,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   348,   349,   350,     0,     0,   351,     0,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,     0,     0,   364,   365,   366,     0,   367,     0,
     368,   369,   370,   371,   372,     0,   373,   374,   375,     0,
       0,   376,     0,     0,     0,   377,   378,   379,   380,   381,
       0,     0,   382,   383,   384,   385,   386,     0,   387,   388,
       0,   389,   390,   391,     0,     0,   392,     0,   393,     0,
     394,   395,     0,   396,   397,     0,     0,     0,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,     0,   408,
     409,     0,     0,     0,   410,   411,   412,   413,     0,     0,
       0,   414,     0,     0,     0,   415,     0,   416,   417,   418,
     419,   420,     0,   421,   422,   423,   424,   425,   426,     0,
       0,     0,     0,     0,     0,   427,   428,     0,   429,     0,
       0,   430,     0,     0,   431,   432,   433,     0,     0,   434,
     435,     0,   436,   437,   438,   439,   440,   441,     0,     0,
     442,   443,   444,   445,     0,   446,   447,     0,   448,     0,
     449,   450,   451,   452,     0,     0,   453,   454,     0,   455,
     456,   457,   458,     0,     0,     0,     0,     0,   459,   460,
     461,     0,     0,     0,   462,   463,   464,   465,     0,   466,
     467,     0,   468,   469,     0,   470,   471,     0,     0,   472,
       0,     0,   473,     0,   474,     0,   475,   476,   477,     0,
       0,     0,     0,     0,     0,   478,     0,     0,   479,     0,
       0,     0,   480,   481,   482,   483,   484,   485,     0,     0,
       0,     0,     0,     0,   486,   487,     0,   488,   489,   490,
       0,   139,   491,   140,   141,   142,   143,   144,     0,     0,
     145,     0,     0,     0,   146,     0,     0,   147,     0,   148,
     149,   150,   151,   152,   153,   154,     0,   155,     0,     0,
       0,   156,     0,     0,     0,   157,     0,     0,   158,   159,
     160,     0,   161,     0,   162,   163,     0,     0,   164,     0,
       0,   165,   166,     0,   167,   168,     0,   169,   170,     0,
     171,   172,   173,   174,   175,   176,   177,     0,   178,   179,
     180,   181,   182,   183,   184,     0,   185,   186,   187,   188,
     189,   190,   191,   192,     0,   193,   194,     0,   195,   196,
     197,   198,   199,     0,   200,     0,     0,   201,     0,     0,
     202,     0,     0,     0,   203,     0,     0,     0,   204,   205,
     206,     0,     0,   207,     0,     0,     0,     0,   208,   209,
       0,     0,     0,     0,   210,     0,   211,     0,     0,     0,
     212,     0,   213,   214,   215,   216,     0,     0,     0,   217,
       0,     0,   218,   219,   220,     0,     0,     0,   221,     0,
     222,   223,     0,   224,   225,   226,     0,     0,   227,   228,
       0,   229,   230,   231,   232,   233,   234,     0,     0,   235,
     236,   237,     0,     0,   238,   239,     0,   240,   241,   242,
       0,     0,   243,     0,     0,     0,   244,     0,   245,     0,
     246,     0,   247,   248,   249,   250,   251,   252,     0,   253,
       0,     0,     0,   254,   255,   256,     0,   257,     0,     0,
     258,   259,     0,     0,     0,   260,   261,   262,   263,     0,
       0,   264,   265,   266,     0,   267,     0,   268,     0,     0,
       0,     0,   269,   270,     0,     0,     0,   271,     0,   272,
     273,     0,   274,   275,     0,     0,     0,   276,     0,     0,
     277,   278,   279,     0,     0,   280,     0,     0,   281,   282,
       0,     0,     0,     0,     0,   283,   284,     0,   285,     0,
     286,     0,   287,   288,     0,     0,     0,     0,     0,     0,
       0,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,     0,   304,   305,   306,
       0,   307,   308,   309,   310,     0,   311,   312,     0,     0,
       0,     0,   313,   314,   315,   316,   317,   318,     0,     0,
     319,   320,     0,   321,     0,   322,     0,   323,   324,   325,
     326,   327,   328,   329,   330,   331,     0,     0,   332,   333,
       0,     0,   334,   335,   336,   337,     0,     0,     0,   338,
     339,     0,     0,     0,     0,   340,   341,   342,     0,   343,
     344,   345,   346,     0,   347,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   348,   349,   350,     0,     0,   351,
       0,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,     0,     0,   364,   365,   366,     0,   367,
       0,   368,   369,   370,   371,   372,     0,   373,   374,   375,
       0,     0,   376,     0,     0,     0,   377,   378,   379,   380,
     381,     0,     0,   382,   383,   384,   385,   386,     0,   387,
     388,     0,   389,   390,   391,     0,     0,   392,     0,   393,
       0,   394,   395,     0,   396,   397,     0,     0,     0,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,     0,
     408,   409,     0,     0,     0,   410,   411,   412,   413,     0,
       0,     0,   414,     0,     0,     0,   415,     0,   416,   417,
     418,   419,   420,     0,   421,   422,   423,   424,   425,   426,
       0,     0,     0,   564,     0,     0,   427,   428,     0,   429,
       0,     0,   430,     0,     0,   431,   432,   433,     0,     0,
     434,   435,     0,   436,   437,   438,   439,   440,   441,     0,
       0,   442,   443,   444,   445,     0,   446,   447,     0,   448,
       0,   449,   450,   451,   452,     0,     0,   453,   454,     0,
     455,   456,   457,   458,     0,     0,     0,     0,     0,   459,
     460,   461,     0,     0,     0,   462,   463,   464,   465,     0,
     466,   467,     0,   468,   469,     0,   470,   471,     0,     0,
     472,     0,     0,   473,     0,   474,     0,   475,   476,   477,
       0,     0,     0,     0,     0,     0,   478,     0,     0,   479,
       0,     0,     0,   480,   481,   482,   483,   484,   485,     0,
       0,     0,     0,     0,     0,   486,   487,     0,   488,   489,
     490,     0,   139,   491,   140,   141,   142,   143,   144,     0,
       0,   145,     0,     0,     0,   146,     0,     0,   147,     0,
     148,   149,   150,   151,   152,   153,   154,     0,   155,     0,
       0,     0,   156,     0,     0,     0,   157,     0,     0,   158,
     159,   160,     0,   161,     0,   162,   163,     0,     0,   164,
       0,     0,   165,   166,     0,   167,   168,     0,   169,   170,
       0,   171,   172,   173,   174,   175,   176,   177,     0,   178,
     179,   180,   181,   182,   183,   184,     0,   185,   186,   187,
     188,   189,   190,   191,   192,     0,   193,   194,     0,   195,
     196,   197,   198,   199,     0,   200,     0,     0,   201,     0,
       0,   202,     0,     0,     0,   203,     0,     0,     0,   204,
     205,   206,     0,     0,   207,     0,     0,     0,     0,   208,
     209,     0,     0,     0,     0,   210,     0,   211,     0,     0,
       0,   212,     0,   213,   214,   215,   216,     0,     0,     0,
     217,     0,     0,   218,   219,   220,     0,     0,     0,   221,
       0,   222,   223,     0,   224,   225,   226,     0,     0,   227,
     228,     0,   229,   230,   231,   232,   233,   234,     0,     0,
     235,   236,   237,     0,     0,   238,   239,     0,   240,   241,
     242,     0,     0,   243,     0,     0,     0,   244,  1090,   245,
       0,   246,     0,   247,   248,   249,   250,   251,   252,     0,
     253,     0,     0,     0,   254,   255,   256,     0,   257,     0,
       0,   258,   259,     0,     0,     0,   260,   261,   262,   263,
       0,     0,   264,   265,   266,     0,   267,     0,   268,     0,
       0,     0,     0,   269,   270,     0,     0,     0,   271,     0,
     272,   273,     0,   274,   275,     0,     0,     0,   276,     0,
       0,   277,   278,   279,     0,     0,   280,     0,     0,   281,
     282,     0,     0,     0,     0,     0,   283,   284,     0,   285,
       0,   286,     0,   287,   288,     0,     0,     0,     0,     0,
       0,     0,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,     0,   304,   305,
     306,     0,   307,   308,   309,   310,     0,   311,   312,     0,
       0,     0,     0,   313,   314,   315,   316,   317,   318,     0,
       0,   319,   320,     0,   321,     0,   322,     0,   323,   324,
     325,   326,   327,   328,   329,   330,   331,     0,     0,   332,
     333,     0,     0,   334,   335,   336,   337,     0,     0,     0,
     338,   339,     0,     0,     0,     0,   340,   341,   342,     0,
     343,   344,   345,   346,     0,   347,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   348,   349,   350,     0,     0,
     351,     0,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,     0,     0,   364,   365,   366,     0,
     367,     0,   368,   369,   370,   371,   372,     0,   373,   374,
     375,     0,     0,   376,     0,     0,     0,   377,   378,   379,
     380,   381,     0,     0,   382,   383,   384,   385,   386,     0,
     387,   388,     0,   389,   390,   391,     0,     0,   392,     0,
     393,     0,   394,   395,     0,   396,   397,     0,     0,     0,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
       0,   408,   409,     0,     0,     0,   410,   411,   412,   413,
       0,     0,     0,   414,     0,     0,     0,   415,     0,   416,
     417,   418,   419,   420,     0,   421,   422,   423,   424,   425,
     426,     0,     0,     0,     0,     0,     0,   427,   428,     0,
     429,     0,     0,   430,     0,     0,   431,   432,   433,     0,
       0,   434,   435,     0,   436,   437,   438,   439,   440,   441,
       0,     0,   442,   443,   444,   445,     0,   446,   447,     0,
     448,     0,   449,   450,   451,   452,     0,     0,   453,   454,
       0,   455,   456,   457,   458,     0,     0,     0,     0,     0,
     459,   460,   461,     0,     0,     0,   462,   463,   464,   465,
       0,   466,   467,     0,   468,   469,     0,   470,   471,     0,
       0,   472,     0,     0,   473,     0,   474,     0,   475,   476,
     477,     0,     0,     0,     0,     0,     0,   478,     0,     0,
     479,     0,     0,     0,   480,   481,   482,   483,   484,   485,
       0,     0,     0,     0,     0,     0,   486,   487,     0,   488,
     489,   490,     0,   139,   491,   140,   141,   142,   143,   144,
       0,     0,   145,     0,     0,     0,   146,     0,     0,   147,
       0,   148,   149,   150,   151,   152,   153,   154,     0,   155,
       0,     0,     0,   156,     0,     0,     0,   157,     0,     0,
     158,   159,   160,     0,   161,     0,   162,   163,     0,     0,
     164,     0,     0,   165,   166,     0,   167,   168,     0,   169,
     170,     0,   171,   172,   173,   174,   175,   176,   177,     0,
     178,   179,   180,   181,   182,   183,   184,     0,   185,   186,
     187,   188,   189,   190,   191,   192,     0,   193,   194,     0,
     195,   196,   197,   198,   199,     0,   200,     0,     0,   201,
       0,     0,   202,     0,     0,     0,   203,     0,     0,     0,
     204,   205,   206,     0,     0,   207,     0,     0,     0,     0,
     208,   209,     0,     0,     0,   914,   210,     0,   211,     0,
       0,     0,   212,     0,   213,   214,   215,   216,     0,     0,
       0,   217,     0,     0,   218,   219,   220,     0,     0,     0,
     221,     0,   222,   223,     0,   224,   225,   226,     0,     0,
     227,   228,     0,   229,   230,   231,   232,   233,   234,     0,
       0,   235,   236,   237,     0,     0,   238,   239,     0,   240,
     241,   242,     0,     0,   243,     0,     0,     0,   244,     0,
     245,     0,   246,     0,   247,   248,   249,   250,   251,   252,
       0,   253,     0,     0,     0,   254,   255,   256,     0,   257,
       0,     0,   258,   259,     0,     0,     0,   260,   261,   262,
     263,     0,     0,   264,   265,   266,     0,   267,     0,   268,
       0,     0,     0,     0,   269,   270,     0,     0,     0,   271,
       0,   272,   273,     0,   274,   275,     0,     0,     0,   276,
       0,     0,   277,   278,   279,     0,     0,   280,     0,     0,
     281,   282,     0,     0,     0,     0,     0,   283,   284,     0,
     285,     0,   286,     0,   287,   288,     0,     0,     0,     0,
       0,     0,     0,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,     0,   304,
     305,   306,     0,   307,   308,   309,   310,     0,   311,   312,
       0,     0,     0,     0,   313,   314,   315,   316,   317,   318,
       0,     0,   319,   320,     0,   321,     0,   322,     0,   323,
     324,   325,   326,   327,   328,   329,   330,   331,     0,     0,
     332,   333,     0,     0,   334,   335,   336,   337,     0,     0,
       0,   338,   339,     0,     0,     0,     0,   340,   341,   342,
       0,   343,   344,   345,   346,     0,   347,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   348,   349,   350,     0,
       0,   351,     0,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,     0,     0,   364,   365,   366,
       0,   367,     0,   368,   369,   370,   371,   372,     0,   373,
     374,   375,     0,     0,   376,     0,     0,     0,   377,   378,
     379,   380,   381,     0,     0,   382,   383,   384,   385,   386,
       0,   387,   388,     0,   389,   390,   391,     0,     0,   392,
       0,   393,     0,   394,   395,     0,   396,   397,     0,     0,
       0,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,     0,   408,   409,     0,     0,     0,   410,   411,   412,
     413,     0,     0,     0,   414,     0,     0,     0,   415,     0,
     416,   417,   418,   419,   420,     0,   421,   422,   423,   424,
     425,   426,     0,     0,     0,     0,     0,     0,   427,   428,
       0,   429,     0,     0,   430,     0,     0,   431,   432,   433,
       0,     0,   434,   435,     0,   436,   437,   438,   439,   440,
     441,     0,     0,   442,   443,   444,   445,     0,   446,   447,
       0,   448,     0,   449,   450,   451,   452,     0,     0,   453,
     454,     0,   455,   456,   457,   458,     0,     0,     0,     0,
       0,  1877,   460,   461,     0,     0,     0,   462,   463,   464,
     465,     0,   466,   467,     0,   468,   469,     0,   470,   471,
       0,     0,   472,     0,     0,   473,     0,   474,     0,   475,
     476,   477,     0,     0,     0,     0,     0,     0,   478,     0,
       0,   479,     0,     0,     0,   480,   481,   482,   483,   484,
     485,     0,     0,     0,     0,     0,     0,   486,   487,     0,
     488,   489,   490,     0,   139,   491,   140,   141,   142,   143,
     144,     0,     0,   145,     0,     0,     0,   146,     0,     0,
     147,     0,   148,   149,   150,   151,   152,   153,   154,     0,
     155,     0,     0,     0,   156,     0,     0,     0,   157,     0,
       0,   158,   159,   160,     0,   161,     0,   162,   163,     0,
       0,   164,     0,     0,   165,   166,     0,   167,   168,     0,
     169,   170,     0,   171,   172,   173,   174,   175,   176,   177,
       0,   178,   179,   180,   181,   182,   183,   184,     0,   185,
     186,   187,   188,   189,   190,   191,   192,     0,   193,   194,
       0,   195,   196,   197,   198,   199,     0,   200,     0,     0,
     201,     0,     0,   202,     0,     0,     0,   203,     0,     0,
       0,   204,   205,   206,     0,     0,   207,     0,     0,     0,
       0,   208,   209,     0,     0,     0,  2082,   210,     0,   211,
       0,     0,     0,   212,     0,   213,   214,   215,   216,     0,
       0,     0,   217,     0,     0,   218,   219,   220,     0,     0,
       0,   221,     0,   222,   223,     0,   224,   225,   226,     0,
       0,   227,   228,     0,   229,   230,   231,   232,   233,   234,
       0,     0,   235,   236,   237,     0,     0,   238,   239,     0,
     240,   241,   242,     0,     0,   243,     0,     0,     0,   244,
       0,   245,     0,   246,     0,   247,   248,   249,   250,   251,
     252,     0,   253,     0,     0,     0,   254,   255,   256,     0,
     257,     0,     0,   258,   259,     0,     0,     0,   260,   261,
     262,   263,     0,     0,   264,   265,   266,     0,   267,     0,
     268,     0,     0,     0,     0,   269,   270,     0,     0,     0,
     271,     0,   272,   273,     0,   274,   275,     0,     0,     0,
     276,     0,     0,   277,   278,   279,     0,     0,   280,     0,
       0,   281,   282,     0,     0,     0,     0,     0,   283,   284,
       0,   285,     0,   286,     0,   287,   288,     0,     0,     0,
       0,     0,     0,     0,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,     0,
     304,   305,   306,     0,   307,   308,   309,   310,     0,   311,
     312,     0,     0,     0,     0,   313,   314,   315,   316,   317,
     318,     0,     0,   319,   320,     0,   321,     0,   322,     0,
     323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
       0,   332,   333,     0,     0,   334,   335,   336,   337,     0,
       0,     0,   338,   339,     0,     0,     0,     0,   340,   341,
     342,     0,   343,   344,   345,   346,     0,   347,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   348,   349,   350,
       0,     0,   351,     0,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,     0,     0,   364,   365,
     366,     0,   367,     0,   368,   369,   370,   371,   372,     0,
     373,   374,   375,     0,     0,   376,     0,     0,     0,   377,
     378,   379,   380,   381,     0,     0,   382,   383,   384,   385,
     386,     0,   387,   388,     0,   389,   390,   391,     0,     0,
     392,     0,   393,     0,   394,   395,     0,   396,   397,     0,
       0,     0,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,     0,   408,   409,     0,     0,     0,   410,   411,
     412,   413,     0,     0,     0,   414,     0,     0,     0,   415,
       0,   416,   417,   418,   419,   420,     0,   421,   422,   423,
     424,   425,   426,     0,     0,     0,     0,     0,     0,   427,
     428,     0,   429,     0,     0,   430,     0,     0,   431,   432,
     433,     0,     0,   434,   435,     0,   436,   437,   438,   439,
     440,   441,     0,     0,   442,   443,   444,   445,     0,   446,
     447,     0,   448,     0,   449,   450,   451,   452,     0,     0,
     453,   454,     0,   455,   456,   457,   458,     0,     0,     0,
       0,     0,   459,   460,   461,     0,     0,     0,   462,   463,
     464,   465,     0,   466,   467,     0,   468,   469,     0,   470,
     471,     0,     0,   472,     0,     0,   473,     0,   474,     0,
     475,   476,   477,     0,     0,     0,     0,     0,     0,   478,
       0,     0,   479,     0,     0,     0,   480,   481,   482,   483,
     484,   485,     0,     0,     0,     0,     0,     0,   486,   487,
       0,   488,   489,   490,     0,   139,   491,   140,   141,   142,
     143,   144,     0,     0,   145,     0,     0,     0,   146,     0,
       0,   147,     0,   148,   149,   150,   151,   152,   153,   154,
       0,   155,     0,     0,     0,   156,     0,     0,     0,   157,
       0,     0,   158,   159,   160,     0,   161,     0,   162,   163,
       0,     0,   164,     0,     0,   165,   166,     0,   167,   168,
       0,   169,   170,     0,   171,   172,   173,   174,   175,   176,
     177,     0,   178,   179,   180,   181,   182,   183,   184,     0,
     185,   186,   187,   188,   189,   190,   191,   192,     0,   193,
     194,     0,   195,   196,   197,   198,   199,     0,   200,     0,
       0,   201,     0,     0,   202,     0,     0,     0,   203,     0,
       0,     0,   204,   205,   206,     0,     0,   207,     0,     0,
       0,     0,   208,   209,     0,     0,     0,   914,   210,     0,
     211,     0,     0,     0,   212,     0,   213,   214,   215,   216,
       0,     0,     0,   217,     0,     0,   218,   219,   220,     0,
       0,     0,   221,     0,   222,   223,     0,   224,   225,   226,
       0,     0,   227,   228,     0,   229,   230,   231,   232,   233,
     234,     0,     0,   235,   236,   237,     0,     0,   238,   239,
       0,   240,   241,   242,     0,     0,   243,     0,     0,     0,
     244,     0,   245,     0,   246,     0,   247,   248,   249,   250,
     251,   252,     0,   253,     0,     0,     0,   254,   255,   256,
       0,   257,     0,     0,   258,   259,     0,     0,     0,   260,
     261,   262,   263,     0,     0,   264,   265,   266,     0,   267,
       0,   268,     0,     0,     0,     0,   269,   270,     0,     0,
       0,   271,     0,   272,   273,     0,   274,   275,     0,     0,
       0,   276,     0,     0,   277,   278,   279,     0,     0,   280,
       0,     0,   281,   282,     0,     0,     0,     0,     0,   283,
     284,     0,   285,     0,   286,     0,   287,   288,     0,     0,
       0,     0,     0,     0,     0,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
       0,   304,   305,   306,     0,   307,   308,   309,   310,     0,
     311,   312,     0,     0,     0,     0,   313,   314,   315,   316,
     317,   318,     0,     0,   319,   320,     0,   321,     0,   322,
       0,   323,   324,   325,   326,   327,   328,   329,   330,   331,
       0,     0,   332,   333,     0,     0,   334,   335,   336,   337,
       0,     0,     0,   338,   339,     0,     0,     0,     0,   340,
     341,   342,     0,   343,   344,   345,   346,     0,   347,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   348,   349,
     350,     0,     0,   351,     0,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,     0,     0,   364,
     365,   366,     0,   367,     0,   368,   369,   370,   371,   372,
       0,   373,   374,   375,     0,     0,   376,     0,     0,     0,
     377,   378,   379,   380,   381,     0,     0,   382,   383,   384,
     385,   386,     0,   387,   388,     0,   389,   390,   391,     0,
       0,   392,     0,   393,     0,   394,   395,     0,   396,   397,
       0,     0,     0,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,     0,   408,   409,     0,     0,     0,   410,
     411,   412,   413,     0,     0,     0,   414,     0,     0,     0,
     415,     0,   416,   417,   418,   419,   420,     0,   421,   422,
     423,   424,   425,   426,     0,     0,     0,     0,     0,     0,
     427,   428,     0,   429,     0,     0,   430,     0,     0,   431,
     432,   433,     0,     0,   434,   435,     0,   436,   437,   438,
     439,   440,   441,     0,     0,   442,   443,   444,   445,     0,
     446,   447,     0,   448,     0,   449,   450,   451,   452,     0,
       0,   453,   454,     0,   455,   456,   457,   458,     0,     0,
       0,     0,     0,   459,   460,   461,     0,     0,     0,   462,
     463,   464,   465,     0,   466,   467,     0,   468,   469,     0,
     470,   471,     0,     0,   472,     0,     0,   473,     0,   474,
       0,   475,   476,   477,     0,     0,     0,     0,     0,     0,
     478,     0,     0,   479,     0,     0,     0,   480,   481,   482,
     483,   484,   485,     0,     0,     0,     0,     0,     0,   486,
     487,     0,   488,   489,   490,     0,   139,   491,   140,   141,
     142,   143,   144,  2942,     0,   145,     0,     0,     0,   146,
       0,     0,   147,     0,   148,   149,   150,   151,   152,   153,
     154,     0,   155,     0,     0,     0,   156,     0,     0,     0,
     157,     0,     0,   158,   159,   160,     0,   161,     0,   162,
     163,     0,     0,   164,     0,     0,   165,   166,     0,   167,
     168,     0,   169,   170,     0,   171,   172,   173,   174,   175,
     176,   177,     0,   178,   179,   180,   181,   182,   183,   184,
       0,   185,   186,   187,   188,   189,   190,   191,   192,     0,
     193,   194,     0,   195,   196,   197,   198,   199,     0,   200,
       0,     0,   201,     0,     0,   202,     0,     0,     0,   203,
       0,     0,     0,   204,   205,   206,     0,     0,   207,     0,
       0,     0,     0,   208,   209,     0,     0,     0,     0,   210,
       0,   211,     0,     0,     0,   212,     0,   213,   214,   215,
     216,     0,     0,     0,   217,     0,     0,   218,   219,   220,
       0,     0,     0,   221,     0,   222,   223,     0,   224,   225,
     226,     0,     0,   227,   228,     0,   229,   230,   231,   232,
     233,   234,     0,     0,   235,   236,   237,     0,     0,   238,
     239,     0,   240,   241,   242,     0,     0,   243,     0,     0,
       0,   244,     0,   245,     0,   246,     0,   247,   248,   249,
     250,   251,   252,     0,   253,     0,     0,     0,   254,   255,
     256,     0,   257,     0,     0,   258,   259,     0,     0,     0,
     260,   261,   262,   263,     0,     0,   264,   265,   266,     0,
     267,     0,   268,     0,     0,     0,     0,   269,   270,     0,
       0,     0,   271,     0,   272,   273,     0,   274,   275,     0,
       0,     0,   276,     0,     0,   277,   278,   279,     0,     0,
     280,     0,     0,   281,   282,     0,     0,     0,     0,     0,
     283,   284,     0,   285,     0,   286,     0,   287,   288,     0,
       0,     0,     0,     0,     0,     0,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,     0,   304,   305,   306,     0,   307,   308,   309,   310,
       0,   311,   312,     0,     0,     0,     0,   313,   314,   315,
     316,   317,   318,     0,     0,   319,   320,     0,   321,     0,
     322,     0,   323,   324,   325,   326,   327,   328,   329,   330,
     331,     0,     0,   332,   333,     0,     0,   334,   335,   336,
     337,     0,     0,     0,   338,   339,     0,     0,     0,     0,
     340,   341,   342,     0,   343,   344,   345,   346,     0,   347,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   348,
     349,   350,     0,     0,   351,     0,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,     0,     0,
     364,   365,   366,     0,   367,     0,   368,   369,   370,   371,
     372,     0,   373,   374,   375,     0,     0,   376,     0,     0,
       0,   377,   378,   379,   380,   381,     0,     0,   382,   383,
     384,   385,   386,     0,   387,   388,     0,   389,   390,   391,
       0,     0,   392,     0,   393,     0,   394,   395,     0,   396,
     397,     0,     0,     0,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,     0,   408,   409,     0,     0,     0,
     410,   411,   412,   413,     0,     0,     0,   414,     0,     0,
       0,   415,     0,   416,   417,   418,   419,   420,     0,   421,
     422,   423,   424,   425,   426,     0,     0,     0,     0,     0,
       0,   427,   428,     0,   429,     0,     0,   430,     0,     0,
     431,   432,   433,     0,     0,   434,   435,     0,   436,   437,
     438,   439,   440,   441,     0,     0,   442,   443,   444,   445,
       0,   446,   447,     0,   448,     0,   449,   450,   451,   452,
       0,     0,   453,   454,     0,   455,   456,   457,   458,     0,
       0,     0,     0,     0,   459,   460,   461,     0,     0,     0,
     462,   463,   464,   465,     0,   466,   467,     0,   468,   469,
       0,   470,   471,     0,     0,   472,     0,     0,   473,     0,
     474,     0,   475,   476,   477,     0,     0,     0,     0,     0,
       0,   478,     0,     0,   479,     0,     0,     0,   480,   481,
     482,   483,   484,   485,     0,     0,     0,     0,     0,     0,
     486,   487,     0,   488,   489,   490,     0,   139,   491,   140,
     141,   142,   143,   144,     0,     0,   145,     0,     0,     0,
     146,     0,     0,   147,     0,   148,   149,   150,   151,   152,
     153,   154,     0,   155,     0,     0,     0,   156,     0,     0,
       0,   157,     0,     0,   158,   159,   160,     0,   161,     0,
     162,   163,     0,     0,   164,     0,     0,   165,   166,     0,
     167,   168,     0,   169,   170,     0,   171,   172,   173,   174,
     175,   176,   177,     0,   178,   179,   180,   181,   182,   183,
     184,     0,   185,   186,   187,   188,   189,   190,   191,   192,
       0,   193,   194,     0,   195,   196,   197,   198,   199,     0,
     200,     0,     0,   201,     0,     0,   202,     0,     0,     0,
     203,     0,     0,     0,   204,   205,   206,     0,     0,   207,
       0,     0,     0,     0,   208,   209,     0,     0,     0,     0,
     210,     0,   211,     0,     0,     0,   212,     0,   213,   214,
     215,   216,     0,     0,     0,   217,     0,     0,   218,   219,
     220,     0,     0,     0,   221,     0,   222,   223,     0,   224,
     225,   226,     0,     0,   227,   228,     0,   229,   230,   231,
     232,   233,   234,     0,     0,   235,   236,   237,     0,     0,
     238,   239,     0,   240,   241,   242,     0,     0,   243,     0,
       0,     0,   244,     0,   245,     0,   246,     0,   247,   248,
     249,   250,   251,   252,     0,   253,     0,     0,     0,   254,
     255,   256,     0,   257,     0,     0,   258,   259,     0,     0,
       0,   260,   261,   262,   263,     0,     0,   264,   265,   266,
       0,   267,     0,   268,     0,     0,     0,     0,   269,   270,
       0,     0,     0,   271,     0,   272,   273,     0,   274,   275,
       0,     0,     0,   276,     0,     0,   277,   278,   279,     0,
       0,   280,     0,     0,   281,   282,     0,     0,     0,     0,
       0,   283,   284,     0,   285,     0,   286,     0,   287,   288,
       0,     0,     0,     0,     0,     0,     0,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,     0,   304,   305,   306,     0,   307,   308,   309,
     310,     0,   311,   312,     0,     0,     0,     0,   313,   314,
     315,   316,   317,   318,     0,     0,   319,   320,     0,   321,
       0,   322,     0,   323,   324,   325,   326,   327,   328,   329,
     330,   331,     0,     0,   332,   333,     0,     0,   334,   335,
     336,   337,     0,     0,     0,   338,   339,     0,     0,     0,
       0,   340,   341,   342,     0,   343,   344,   345,   346,     0,
     347,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     348,   349,   350,     0,     0,   351,     0,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,     0,
       0,   364,   365,   366,  3037,   367,     0,   368,   369,   370,
     371,   372,     0,   373,   374,   375,     0,     0,   376,     0,
       0,     0,   377,   378,   379,   380,   381,     0,     0,   382,
     383,   384,   385,   386,     0,   387,   388,     0,   389,   390,
     391,     0,     0,   392,     0,   393,     0,   394,   395,     0,
     396,   397,     0,     0,     0,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,     0,   408,   409,     0,     0,
       0,   410,   411,   412,   413,     0,     0,     0,   414,     0,
       0,     0,   415,     0,   416,   417,   418,   419,   420,     0,
     421,   422,   423,   424,   425,   426,     0,     0,     0,     0,
       0,     0,   427,   428,     0,   429,     0,     0,   430,     0,
       0,   431,   432,   433,     0,     0,   434,   435,     0,   436,
     437,   438,   439,   440,   441,     0,     0,   442,   443,   444,
     445,     0,   446,   447,     0,   448,     0,   449,   450,   451,
     452,     0,     0,   453,   454,     0,   455,   456,   457,   458,
       0,     0,     0,     0,     0,   459,   460,   461,     0,     0,
       0,   462,   463,   464,   465,     0,   466,   467,     0,   468,
     469,     0,   470,   471,     0,     0,   472,     0,     0,   473,
       0,   474,     0,   475,   476,   477,     0,     0,     0,     0,
       0,     0,   478,     0,     0,   479,     0,     0,     0,   480,
     481,   482,   483,   484,   485,     0,     0,     0,     0,     0,
       0,   486,   487,     0,   488,   489,   490,     0,   139,   491,
     140,   141,   142,   143,   144,     0,     0,   145,     0,     0,
       0,   146,     0,     0,   147,     0,   148,   149,   150,   151,
     152,   153,   154,     0,   155,     0,     0,     0,   156,     0,
       0,     0,   157,     0,     0,   158,   159,   160,     0,   161,
       0,   162,   163,     0,     0,   164,     0,     0,   165,   166,
       0,   167,   168,     0,   169,   170,     0,   171,   172,   173,
     174,   175,   176,   177,     0,   178,   179,   180,   181,   182,
     183,   184,     0,   185,   186,   187,   188,   189,   190,   191,
     192,     0,   193,   194,     0,   195,   196,   197,   198,   199,
       0,   200,     0,     0,   201,     0,     0,   202,     0,     0,
       0,   203,     0,     0,     0,   204,   205,   206,     0,     0,
     207,     0,     0,     0,     0,   208,   209,     0,     0,     0,
       0,   210,     0,   211,     0,     0,     0,   212,     0,   213,
     214,   215,   216,     0,     0,     0,   217,     0,     0,   218,
     219,   220,     0,     0,     0,   221,     0,   222,   223,     0,
     224,   225,   226,     0,     0,   227,   228,     0,   229,   230,
     231,   232,   233,   234,     0,     0,   235,   236,   237,     0,
       0,   238,   239,     0,   240,   241,   242,     0,     0,   243,
       0,     0,     0,   244,     0,   245,     0,   246,     0,   247,
     248,   249,   250,   251,   252,     0,   253,     0,     0,     0,
     254,   255,   256,     0,   257,     0,     0,   258,   259,     0,
       0,     0,   260,   261,   262,   263,     0,     0,   264,   265,
     266,     0,   267,     0,   268,     0,     0,     0,     0,   269,
     270,     0,     0,     0,   271,     0,   272,   273,     0,   274,
     275,     0,     0,     0,   276,     0,     0,   277,   278,   279,
       0,     0,   280,     0,     0,   281,   282,     0,     0,     0,
       0,     0,   283,   284,     0,   285,     0,   286,     0,   287,
     288,     0,     0,     0,     0,     0,     0,     0,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,     0,   304,   305,   306,     0,   307,   308,
     309,   310,     0,   311,   312,     0,     0,     0,     0,   313,
     314,   315,   316,   317,   318,     0,     0,   319,   320,     0,
     321,     0,   322,     0,   323,   324,   325,   326,   327,   328,
     329,   330,   331,     0,     0,   332,   333,     0,     0,   334,
     335,   336,   337,     0,     0,     0,   338,   339,     0,     0,
       0,     0,   340,   341,   342,     0,   343,   344,   345,   346,
       0,   347,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   348,   349,   350,     0,     0,   351,     0,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
       0,     0,   364,   365,   366,     0,   367,     0,   368,   369,
     370,   371,   372,     0,   373,   374,   375,     0,     0,   376,
       0,     0,     0,   377,   378,   379,   380,   381,     0,     0,
     382,   383,   384,   385,   386,     0,   387,   388,     0,   389,
     390,   391,     0,     0,   392,     0,   393,     0,   394,   395,
       0,   396,   397,     0,     0,     0,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,     0,   408,   409,     0,
       0,     0,   410,   411,   412,   413,     0,     0,     0,   414,
       0,     0,     0,   415,     0,   416,   417,   418,   419,   420,
       0,   421,   422,   423,   424,   425,   426,     0,     0,     0,
       0,     0,     0,   427,   428,     0,   429,     0,     0,   430,
       0,     0,   431,   432,   433,     0,     0,   434,   435,     0,
     436,   437,   438,   439,   440,   441,     0,     0,   442,   443,
     444,   445,     0,   446,   447,     0,   448,     0,   449,   450,
     451,   452,     0,   136,   453,   454,     0,   455,   456,   457,
     458,     0,     0,     0,     0,     0,   459,   460,   461,     0,
       0,     0,   462,   463,   464,   465,     0,   466,   467,     0,
     468,   469,     0,   470,   471,     0,     0,   472,     0,     0,
     473,     0,   474,     0,   475,   476,   477,     0,     0,     0,
       0,     0,     0,   478,     0,     0,   479,     0,     0,     0,
     480,   481,   482,   483,   484,   485,     0,     0,     0,     0,
       0,     0,   486,   487,     0,   488,   489,   490,     0,   139,
     491,   140,   141,   142,   143,   144,     0,     0,   145,     0,
       0,     0,   146,     0,     0,   147,     0,   148,   149,   150,
     151,   152,   153,   154,     0,   155,     0,     0,     0,   156,
       0,     0,     0,   157,     0,     0,   158,   159,   160,     0,
     161,     0,   162,   163,     0,     0,   164,     0,     0,   165,
     166,     0,   167,   168,     0,   169,   170,     0,   171,   172,
     173,   174,   175,   176,   177,     0,   178,   179,   180,   181,
     182,   183,   184,     0,   185,   186,   187,   188,   189,   190,
     191,   192,     0,   193,   194,     0,   195,   196,   197,   198,
     199,     0,   200,     0,     0,   201,     0,     0,   202,     0,
       0,     0,   203,     0,     0,     0,   204,   205,   206,     0,
       0,   207,     0,     0,     0,     0,   208,   209,     0,     0,
       0,     0,   210,     0,   211,     0,     0,     0,   212,     0,
     213,   214,   215,   216,     0,     0,     0,   217,     0,     0,
     218,   219,   220,     0,     0,     0,   221,     0,   222,   223,
       0,   224,   225,   226,     0,     0,   227,   228,     0,   229,
     230,   231,   232,   233,   234,     0,     0,   235,   236,   237,
       0,     0,   238,   239,     0,   240,   241,   242,     0,     0,
     243,     0,     0,     0,   244,     0,   245,     0,   246,     0,
     247,   248,   249,   250,   251,   252,     0,   253,     0,     0,
       0,   254,   255,   256,     0,   257,     0,     0,   258,   259,
       0,     0,     0,   260,   261,   262,   263,     0,     0,   264,
     265,   266,     0,   267,     0,   268,     0,     0,     0,     0,
     269,   270,     0,     0,     0,   271,     0,   272,   273,     0,
     274,   275,     0,     0,     0,   276,     0,     0,   277,   278,
     279,     0,     0,   280,     0,     0,   281,   282,     0,     0,
       0,     0,     0,   283,   284,     0,   285,     0,   286,     0,
     287,   288,     0,     0,     0,     0,     0,     0,     0,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,     0,   304,   305,   306,     0,   307,
     308,   309,   310,     0,   311,   312,     0,     0,     0,     0,
     313,   314,   315,   316,   317,   318,     0,     0,   319,   320,
       0,   321,     0,   322,     0,   323,   324,   325,   326,   327,
     328,   329,   330,   331,     0,     0,   332,   333,     0,     0,
     334,   335,   336,   337,     0,     0,     0,   338,   339,     0,
       0,     0,     0,   340,   341,   342,     0,   343,   344,   345,
     346,     0,   347,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   348,   349,   350,     0,     0,   351,     0,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,     0,     0,   364,   365,   366,  4121,   367,     0,   368,
     369,   370,   371,   372,     0,   373,   374,   375,     0,     0,
     376,     0,     0,     0,   377,   378,   379,   380,   381,     0,
       0,   382,   383,   384,   385,   386,     0,   387,   388,     0,
     389,   390,   391,     0,     0,   392,     0,   393,     0,   394,
     395,     0,   396,   397,     0,     0,     0,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,     0,   408,   409,
       0,     0,     0,   410,   411,   412,   413,     0,     0,     0,
     414,     0,     0,     0,   415,     0,   416,   417,   418,   419,
     420,     0,   421,   422,   423,   424,   425,   426,     0,     0,
       0,     0,     0,     0,   427,   428,     0,   429,     0,     0,
     430,     0,     0,   431,   432,   433,     0,     0,   434,   435,
       0,   436,   437,   438,   439,   440,   441,     0,     0,   442,
     443,   444,   445,     0,   446,   447,     0,   448,     0,   449,
     450,   451,   452,     0,     0,   453,   454,     0,   455,   456,
     457,   458,     0,     0,     0,     0,     0,   459,   460,   461,
       0,     0,     0,   462,   463,   464,   465,     0,   466,   467,
       0,   468,   469,     0,   470,   471,     0,     0,   472,     0,
       0,   473,     0,   474,     0,   475,   476,   477,     0,     0,
       0,     0,     0,     0,   478,     0,     0,   479,     0,     0,
       0,   480,   481,   482,   483,   484,   485,     0,     0,     0,
       0,     0,     0,   486,   487,     0,   488,   489,   490,     0,
     139,   491,   140,   141,   142,   143,   144,     0,     0,   145,
       0,     0,     0,   146,     0,     0,   147,     0,   148,   149,
     150,   151,   152,   153,   154,     0,   155,     0,     0,     0,
     156,     0,     0,     0,   157,     0,     0,   158,   159,   160,
       0,   161,     0,   162,   163,     0,     0,   164,     0,     0,
     165,   166,     0,   167,   168,     0,   169,   170,     0,   171,
     172,   173,   174,   175,   176,   177,     0,   178,   179,   180,
     181,   182,   183,   184,     0,   185,   186,   187,   188,   189,
     190,   191,   192,     0,   193,   194,     0,   195,   196,   197,
     198,   199,     0,   200,     0,     0,   201,     0,     0,   202,
       0,     0,     0,   203,     0,     0,     0,   204,   205,   206,
       0,     0,   207,     0,     0,     0,     0,   208,   209,     0,
       0,     0,     0,   210,     0,   211,     0,     0,     0,   212,
       0,   213,   214,   215,   216,     0,     0,     0,   217,     0,
       0,   218,   219,   220,     0,     0,     0,   221,     0,   222,
     223,     0,   224,   225,   226,     0,     0,   227,   228,     0,
     229,   230,   231,   232,   233,   234,     0,     0,   235,   236,
     237,     0,     0,   238,   239,     0,   240,   241,   242,     0,
       0,   243,     0,     0,     0,   244,     0,   245,     0,   246,
       0,   247,   248,   249,   250,   251,   252,     0,   253,     0,
       0,     0,   254,   255,   256,     0,   257,     0,     0,   258,
     259,     0,     0,     0,   260,   261,   262,   263,     0,     0,
     264,   265,   266,     0,   267,     0,   268,     0,     0,     0,
       0,   269,   270,     0,     0,     0,   271,     0,   272,   273,
       0,   274,   275,     0,     0,     0,   276,     0,     0,   277,
     278,   279,     0,     0,   280,     0,     0,   281,   282,     0,
       0,     0,     0,     0,   283,   284,     0,   285,     0,   286,
       0,   287,   288,     0,     0,     0,     0,     0,     0,     0,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,     0,   304,   305,   306,     0,
     307,   308,   309,   310,     0,   311,   312,     0,     0,     0,
       0,   313,   314,   315,   316,   317,   318,     0,     0,   319,
     320,     0,   321,     0,   322,     0,   323,   324,   325,   326,
     327,   328,   329,   330,   331,     0,     0,   332,   333,     0,
       0,   334,   335,   336,   337,     0,     0,     0,   338,   339,
       0,     0,     0,     0,   340,   341,   342,     0,   343,   344,
     345,   346,     0,   347,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   348,   349,   350,     0,     0,   351,     0,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,     0,     0,   364,   365,   366,     0,   367,     0,
     368,   369,   370,   371,   372,     0,   373,   374,   375,     0,
       0,   376,     0,     0,     0,   377,   378,   379,   380,   381,
       0,     0,   382,   383,   384,   385,   386,     0,   387,   388,
       0,   389,   390,   391,     0,     0,   392,     0,   393,     0,
     394,   395,     0,   396,   397,     0,     0,     0,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,     0,   408,
     409,     0,     0,     0,   410,   411,   412,   413,     0,     0,
       0,   414,     0,     0,     0,   415,     0,   416,   417,   418,
     419,   420,     0,   421,   422,   423,   424,   425,   426,     0,
       0,     0,     0,     0,     0,   427,   428,     0,   429,     0,
       0,   430,     0,     0,   431,   432,   433,     0,     0,   434,
     435,     0,   436,   437,   438,   439,   440,   441,     0,     0,
     442,   443,   444,   445,     0,   446,   447,     0,   448,     0,
     449,   450,   451,   452,     0,     0,   453,   454,     0,   455,
     456,   457,   458,     0,     0,     0,     0,     0,   459,   460,
     461,     0,     0,     0,   462,   463,   464,   465,     0,   466,
     467,     0,   468,   469,     0,   470,   471,     0,     0,   472,
       0,     0,   473,     0,   474,     0,   475,   476,   477,     0,
       0,     0,     0,     0,     0,   478,     0,     0,   479,     0,
       0,     0,   480,   481,   482,   483,   484,   485,     0,     0,
       0,     0,     0,     0,   486,   487,     0,   488,   489,   490,
       0,   139,   491,   140,   141,   142,   143,   144,     0,     0,
     145,     0,     0,     0,   146,     0,     0,   147,     0,   148,
     149,   150,   151,   152,   153,   154,     0,   155,     0,     0,
       0,   156,     0,     0,     0,   157,     0,     0,   158,   159,
     160,     0,   161,     0,   162,   163,     0,     0,   164,     0,
       0,   165,   166,     0,   167,   168,     0,   169,   170,     0,
     171,   172,   173,   174,   175,   176,   177,     0,   178,   179,
     180,   181,   182,   183,   184,     0,   185,   186,   187,   188,
     189,   190,   191,   192,     0,   193,   194,     0,   195,   196,
     197,   198,   199,     0,   200,     0,     0,   201,     0,     0,
     202,     0,     0,     0,   203,     0,     0,     0,   204,   205,
     206,     0,     0,   207,     0,     0,     0,     0,   208,   209,
       0,     0,     0,     0,   210,     0,   211,     0,     0,     0,
     212,     0,   213,   214,   215,   216,     0,     0,     0,   217,
       0,     0,   218,   219,   220,     0,     0,     0,   221,     0,
     222,   223,     0,   224,   225,   226,     0,     0,   227,   228,
       0,   229,   230,   231,   232,   233,   234,     0,     0,   235,
     236,   237,     0,     0,   238,   239,     0,   240,  1800,   242,
       0,     0,   243,     0,     0,     0,   244,     0,   245,     0,
     246,     0,   247,   248,   249,   250,   251,   252,     0,   253,
       0,     0,     0,   254,   255,   256,     0,   257,     0,     0,
     258,   259,     0,     0,     0,   260,   261,   262,   263,     0,
       0,   264,   265,   266,     0,   267,     0,   268,     0,     0,
       0,     0,   269,   270,     0,     0,     0,   271,     0,   272,
     273,     0,   274,   275,     0,     0,     0,   276,     0,     0,
     277,   278,   279,     0,     0,   280,     0,     0,   281,   282,
       0,     0,     0,     0,     0,   283,   284,     0,   285,     0,
     286,     0,   287,   288,     0,     0,     0,     0,     0,     0,
       0,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,     0,   304,   305,   306,
       0,   307,   308,   309,   310,     0,   311,   312,     0,     0,
       0,     0,   313,   314,   315,   316,   317,   318,     0,     0,
     319,   320,     0,   321,     0,   322,     0,   323,   324,   325,
     326,   327,   328,   329,   330,   331,     0,     0,   332,   333,
       0,     0,   334,  1801,   336,   337,     0,     0,     0,   338,
     339,     0,     0,     0,     0,   340,   341,   342,     0,   343,
     344,   345,   346,     0,   347,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   348,   349,   350,     0,     0,   351,
       0,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,     0,     0,   364,   365,   366,     0,   367,
       0,   368,   369,   370,   371,   372,     0,   373,   374,   375,
       0,     0,   376,     0,     0,     0,   377,   378,   379,   380,
     381,     0,     0,   382,   383,   384,   385,   386,     0,   387,
     388,     0,   389,   390,   391,     0,     0,   392,     0,   393,
       0,   394,   395,     0,   396,   397,     0,     0,     0,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,     0,
     408,   409,     0,     0,     0,   410,   411,   412,   413,     0,
       0,     0,   414,     0,     0,     0,   415,     0,   416,   417,
     418,   419,   420,     0,   421,   422,   423,   424,   425,   426,
       0,     0,     0,     0,     0,     0,   427,   428,     0,   429,
       0,     0,   430,     0,     0,   431,   432,   433,     0,     0,
     434,   435,     0,   436,   437,   438,   439,   440,   441,     0,
       0,   442,   443,   444,   445,     0,   446,   447,     0,   448,
       0,   449,   450,   451,   452,     0,     0,   453,   454,     0,
     455,   456,   457,   458,     0,     0,     0,     0,     0,   459,
     460,   461,     0,     0,     0,   462,   463,   464,   465,     0,
     466,   467,     0,   468,   469,     0,   470,   471,     0,     0,
     472,     0,     0,   473,     0,   474,     0,   475,   476,   477,
       0,     0,     0,     0,     0,     0,   478,     0,     0,   479,
       0,     0,     0,   480,   481,   482,   483,   484,   485,     0,
       0,     0,     0,     0,     0,   486,   487,     0,   488,   489,
     490,     0,   139,   491,   140,   141,   142,   143,   144,     0,
       0,   145,     0,     0,     0,   146,     0,     0,     0,     0,
     148,   149,   150,   151,   152,   153,     0,     0,  -334,     0,
       0,     0,   156,     0,     0,     0,   157,     0,     0,   158,
     159,   160,     0,   161,     0,     0,     0,     0,     0,   164,
    3957,     0,   165,   166,     0,   167,     0,     0,     0,     0,
       0,   171,   172,   173,   174,  3958,   176,   177,     0,   178,
     179,     0,     0,     0,     0,     0,     0,   185,     0,   187,
       0,   189,   190,   191,   192,     0,   193,   194,     0,   195,
     196,   197,     0,   199,     0,   200,     0,     0,   201,     0,
       0,   202,     0,     0,     0,   203,     0,     0,     0,   204,
     205,   206,     0,     0,   207,     0,     0,     0,     0,   208,
       0,     0,     0,     0,     0,   210,     0,   211,     0,     0,
       0,   212,     0,   213,   214,   215,   216,     0,     0,     0,
       0,     0,     0,   218,   219,   220,     0,  -304,  -304,   221,
       0,  -304,   223,     0,   224,   225,   226,     0,     0,   227,
     228,     0,   229,   230,   231,   232,     0,     0,     0,     0,
     235,   236,   237,     0,     0,   238,   239,  3959,   240,   241,
     242,     0,     0,     0,     0,     0,     0,   244,     0,   245,
       0,   246,     0,   247,   248,   249,   250,   251,   252,     0,
     253,     0,     0,     0,     0,   255,   256,     0,     0,     0,
       0,     0,   259,     0,     0,     0,   260,   261,   262,   263,
    3960,     0,   264,   265,   266,     0,   267,     0,   268,     0,
       0,     0,     0,   269,     0,     0,     0,     0,   271,     0,
     272,   273,     0,   274,   275,  3961,     0,     0,   276,     0,
       0,     0,   278,   279,     0,     0,   280,  3962,     0,   281,
     282,     0,     0,     0,     0,     0,   283,   284,     0,   285,
       0,   286,     0,   287,   288,     0,     0,     0,     0,  -289,
       0,     0,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,     0,   304,   305,
     306,     0,   307,   308,   309,   310,     0,   311,   312,     0,
       0,     0,     0,   313,   314,   315,   316,   317,   318,     0,
       0,   319,   320,     0,   321,     0,   322,     0,   323,   324,
     325,   326,   327,   328,   329,   330,   331,     0,     0,   332,
     333,     0,     0,   334,   335,   336,   337,     0,     0,     0,
       0,   339,     0,     0,     0,     0,   340,   341,   342,     0,
     343,   344,   345,  3963,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   349,   350,     0,     0,
       0,     0,   352,   353,   354,     0,   356,   357,   358,   359,
     360,   361,   362,     0,     0,     0,     0,   365,   366,     0,
     367,     0,   368,   369,   370,   371,   372,     0,   373,   374,
     375,     0,     0,   376,     0,     0,     0,   377,   378,   379,
     380,   381,     0,     0,   382,   383,   384,   385,   386,     0,
     387,     0,     0,   389,     0,   391,  -289,     0,   392,     0,
       0,     0,   394,     0,     0,   396,   397,  3964,     0,     0,
       0,   399,   400,   401,   402,   403,   404,     0,   406,   407,
       0,   408,     0,     0,     0,     0,   410,   411,   412,     0,
       0,     0,     0,   414,     0,     0,     0,   415,     0,     0,
     417,     0,     0,   420,     0,   421,     0,   423,     0,   425,
     426,     0,     0,     0,     0,     0,     0,   427,   428,     0,
     429,     0,     0,   430,     0,     0,   431,     0,   433,     0,
       0,     0,   435,     0,   436,   437,   438,   439,   440,   441,
       0,     0,   442,   443,   444,   445,     0,   446,   447,     0,
     448,     0,   449,   450,   451,   452,     0,     0,   453,   454,
       0,   455,   456,   457,   458,     0,     0,     0,     0,     0,
     459,   460,   461,     0,     0,     0,     0,   463,   464,   465,
       0,   466,   467,     0,   468,   469,     0,     0,     0,     0,
       0,   472,     0,     0,   473,     0,     0,     0,   475,   476,
     477,     0,     0,     0,     0,     0,     0,   478,     0,     0,
     479,     0,     0,     0,   480,   481,   482,   483,   484,   485,
       0,     0,  -289,     0,     0,     0,   486,     0,     0,   488,
       0,   490,     0,   139,   491,   140,   141,   142,   143,   144,
       0,     0,   145,     0,     0,     0,   146,     0,     0,     0,
       0,   148,   149,   150,   151,   152,   153,     0,     0,  -334,
       0,     0,     0,   156,     0,     0,     0,   157,     0,     0,
     158,   159,   160,     0,   161,     0,     0,     0,     0,     0,
     164,  3957,     0,   165,   166,     0,   167,     0,     0,     0,
       0,     0,   171,   172,   173,   174,  3958,   176,   177,     0,
     178,   179,     0,     0,     0,     0,     0,     0,   185,     0,
     187,     0,   189,   190,   191,   192,     0,   193,   194,     0,
     195,   196,   197,     0,   199,     0,   200,     0,     0,   201,
       0,     0,   202,     0,     0,     0,   203,     0,     0,     0,
     204,   205,   206,     0,     0,   207,     0,     0,     0,     0,
     208,     0,     0,     0,     0,     0,   210,     0,   211,     0,
       0,     0,   212,     0,   213,   214,   215,   216,     0,     0,
       0,     0,     0,     0,   218,   219,   220,     0,  -325,     0,
     221,     0,  -325,   223,     0,   224,   225,   226,     0,     0,
     227,   228,     0,   229,   230,   231,   232,     0,     0,     0,
       0,   235,   236,   237,     0,     0,   238,   239,  3959,   240,
     241,   242,     0,     0,     0,     0,     0,     0,   244,     0,
     245,     0,   246,     0,   247,   248,   249,   250,   251,   252,
       0,   253,     0,     0,     0,     0,   255,   256,     0,     0,
       0,     0,     0,   259,     0,     0,     0,   260,   261,   262,
     263,  3960,     0,   264,   265,   266,     0,   267,     0,   268,
       0,     0,     0,     0,   269,     0,     0,     0,     0,   271,
       0,   272,   273,     0,   274,   275,  3961,     0,     0,   276,
       0,     0,     0,   278,   279,     0,     0,   280,  3962,     0,
     281,   282,     0,     0,     0,     0,     0,   283,   284,     0,
     285,     0,   286,     0,   287,   288,     0,     0,     0,     0,
    -289,     0,     0,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,     0,   304,
     305,   306,     0,   307,   308,   309,   310,     0,   311,   312,
       0,     0,     0,     0,   313,   314,   315,   316,   317,   318,
       0,     0,   319,   320,     0,   321,     0,   322,     0,   323,
     324,   325,   326,   327,   328,   329,   330,   331,     0,     0,
     332,   333,     0,     0,   334,   335,   336,   337,     0,     0,
       0,     0,   339,     0,     0,     0,     0,   340,   341,   342,
       0,   343,   344,   345,  3963,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   349,   350,     0,
       0,     0,     0,   352,   353,   354,     0,   356,   357,   358,
     359,   360,   361,   362,     0,     0,     0,     0,   365,   366,
       0,   367,     0,   368,   369,   370,   371,   372,     0,   373,
     374,   375,     0,     0,   376,     0,     0,     0,   377,   378,
     379,   380,   381,     0,     0,   382,   383,   384,   385,   386,
       0,   387,     0,     0,   389,     0,   391,  -289,     0,   392,
       0,     0,     0,   394,     0,     0,   396,   397,  3964,     0,
       0,     0,   399,   400,   401,   402,   403,   404,     0,   406,
     407,     0,   408,     0,     0,     0,     0,   410,   411,   412,
       0,     0,     0,     0,   414,     0,     0,     0,   415,     0,
       0,   417,     0,     0,   420,     0,   421,     0,   423,     0,
     425,   426,     0,     0,     0,     0,     0,     0,   427,   428,
       0,   429,     0,     0,   430,     0,     0,   431,     0,   433,
       0,     0,     0,   435,     0,   436,   437,   438,   439,   440,
     441,     0,     0,   442,   443,   444,   445,     0,   446,   447,
       0,   448,     0,   449,   450,   451,   452,     0,     0,   453,
     454,     0,   455,   456,   457,   458,     0,     0,     0,     0,
       0,   459,   460,   461,     0,     0,     0,     0,   463,   464,
     465,     0,   466,   467,     0,   468,   469,     0,     0,     0,
       0,     0,   472,     0,     0,   473,     0,     0,     0,   475,
     476,   477,     0,     0,     0,     0,     0,     0,   478,     0,
       0,   479,     0,     0,     0,   480,   481,   482,   483,   484,
     485,  -325,     0,  -289,     0,     0,     0,   486,     0,     0,
     488,     0,   490,     0,   139,   491,   140,   141,   142,   143,
     144,     0,     0,   145,     0,     0,     0,   146,     0,     0,
       0,     0,   148,   149,   150,   151,   152,   153,     0,     0,
    -334,     0,     0,     0,   156,     0,     0,     0,   157,     0,
       0,   158,   159,   160,     0,   161,     0,     0,     0,     0,
       0,   164,  3957,     0,   165,   166,     0,   167,     0,     0,
       0,     0,     0,   171,   172,   173,   174,  3958,   176,   177,
       0,   178,   179,     0,     0,     0,     0,     0,     0,   185,
       0,   187,     0,   189,   190,   191,   192,     0,   193,   194,
       0,   195,   196,   197,     0,   199,     0,   200,     0,     0,
     201,     0,     0,   202,     0,     0,     0,   203,     0,     0,
       0,   204,   205,   206,     0,     0,   207,     0,     0,     0,
       0,   208,     0,     0,     0,     0,     0,   210,     0,   211,
       0,     0,     0,   212,     0,   213,   214,   215,   216,     0,
       0,     0,     0,     0,     0,   218,   219,   220,     0,  -322,
       0,   221,     0,  -322,   223,     0,   224,   225,   226,     0,
       0,   227,   228,     0,   229,   230,   231,   232,     0,     0,
       0,     0,   235,   236,   237,     0,     0,   238,   239,  3959,
     240,   241,   242,     0,     0,     0,     0,     0,     0,   244,
       0,   245,     0,   246,     0,   247,   248,   249,   250,   251,
     252,     0,   253,     0,     0,     0,     0,   255,   256,     0,
       0,     0,     0,     0,   259,     0,     0,     0,   260,   261,
     262,   263,  3960,     0,   264,   265,   266,     0,   267,     0,
     268,     0,     0,     0,     0,   269,     0,     0,     0,     0,
     271,     0,   272,   273,     0,   274,   275,  3961,     0,     0,
     276,     0,     0,     0,   278,   279,     0,     0,   280,  3962,
       0,   281,   282,     0,     0,     0,     0,     0,   283,   284,
       0,   285,     0,   286,     0,   287,   288,     0,     0,     0,
       0,  -289,     0,     0,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,     0,
     304,   305,   306,     0,   307,   308,   309,   310,     0,   311,
     312,     0,     0,     0,     0,   313,   314,   315,   316,   317,
     318,     0,     0,   319,   320,     0,   321,     0,   322,     0,
     323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
       0,   332,   333,     0,     0,   334,   335,   336,   337,     0,
       0,     0,     0,   339,     0,     0,     0,     0,   340,   341,
     342,     0,   343,   344,   345,  3963,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   349,   350,
       0,     0,     0,     0,   352,   353,   354,     0,   356,   357,
     358,   359,   360,   361,   362,     0,     0,     0,     0,   365,
     366,     0,   367,     0,   368,   369,   370,   371,   372,     0,
     373,   374,   375,     0,     0,   376,     0,     0,     0,   377,
     378,   379,   380,   381,     0,     0,   382,   383,   384,   385,
     386,     0,   387,     0,     0,   389,     0,   391,  -289,     0,
     392,     0,     0,     0,   394,     0,     0,   396,   397,  3964,
       0,     0,     0,   399,   400,   401,   402,   403,   404,     0,
     406,   407,     0,   408,     0,     0,     0,     0,   410,   411,
     412,     0,     0,     0,     0,   414,     0,     0,     0,   415,
       0,     0,   417,     0,     0,   420,     0,   421,     0,   423,
       0,   425,   426,     0,     0,     0,     0,     0,     0,   427,
     428,     0,   429,     0,     0,   430,     0,     0,   431,     0,
     433,     0,     0,     0,   435,     0,   436,   437,   438,   439,
     440,   441,     0,     0,   442,   443,   444,   445,     0,   446,
     447,     0,   448,     0,   449,   450,   451,   452,     0,     0,
     453,   454,     0,   455,   456,   457,   458,     0,     0,     0,
       0,     0,   459,   460,   461,     0,     0,     0,     0,   463,
     464,   465,     0,   466,   467,     0,   468,   469,     0,     0,
       0,     0,     0,   472,     0,     0,   473,     0,     0,     0,
     475,   476,   477,     0,     0,     0,     0,     0,     0,   478,
       0,     0,   479,     0,     0,     0,   480,   481,   482,   483,
     484,   485,  -322,     0,  -289,     0,     0,     0,   486,     0,
       0,   488,     0,   490,     0,   139,   491,   140,   141,   142,
     143,   144,     0,     0,   145,     0,     0,     0,   146,     0,
       0,     0,     0,   148,   149,   150,   151,   152,   153,     0,
       0,  -334,     0,     0,     0,   156,     0,     0,     0,   157,
       0,     0,   158,   159,   160,     0,   161,     0,     0,     0,
       0,     0,   164,  3957,     0,   165,   166,     0,   167,     0,
       0,     0,     0,     0,   171,   172,   173,   174,  3958,   176,
     177,     0,   178,   179,     0,     0,     0,     0,     0,     0,
     185,     0,   187,     0,   189,   190,   191,   192,     0,   193,
     194,     0,   195,   196,   197,     0,   199,     0,   200,     0,
       0,   201,     0,     0,   202,     0,     0,     0,   203,     0,
       0,     0,   204,   205,   206,     0,     0,   207,     0,     0,
       0,     0,   208,     0,     0,     0,     0,     0,   210,     0,
     211,     0,     0,     0,   212,     0,   213,   214,   215,   216,
       0,     0,     0,     0,     0,     0,   218,   219,   220,     0,
       0,     0,   221,     0,  4306,   223,     0,   224,   225,   226,
       0,     0,   227,   228,     0,   229,   230,   231,   232,     0,
       0,     0,     0,   235,   236,   237,     0,     0,   238,   239,
    3959,   240,   241,   242,     0,     0,     0,     0,     0,     0,
     244,     0,   245,     0,   246,     0,   247,   248,   249,   250,
     251,   252,     0,   253,     0,     0,     0,     0,   255,   256,
       0,     0,     0,     0,     0,   259,     0,     0,     0,   260,
     261,   262,   263,  3960,     0,   264,   265,   266,     0,   267,
       0,   268,     0,     0,     0,     0,   269,     0,     0,     0,
       0,   271,     0,   272,   273,     0,   274,   275,  3961,     0,
       0,   276,     0,     0,     0,   278,   279,     0,     0,   280,
    3962,     0,   281,   282,     0,     0,     0,     0,     0,   283,
     284,     0,   285,     0,   286,     0,   287,   288,     0,     0,
       0,     0,  -289,     0,     0,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
       0,   304,   305,   306,     0,   307,   308,   309,   310,     0,
     311,   312,     0,     0,     0,     0,   313,   314,   315,   316,
     317,   318,     0,     0,   319,   320,     0,   321,     0,   322,
       0,   323,   324,   325,   326,   327,   328,   329,   330,   331,
       0,     0,   332,   333,     0,     0,   334,   335,   336,   337,
       0,     0,     0,     0,   339,     0,     0,     0,     0,   340,
     341,   342,     0,   343,   344,   345,  3963,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   349,
     350,     0,     0,     0,     0,   352,   353,   354,     0,   356,
     357,   358,   359,   360,   361,   362,     0,     0,     0,     0,
     365,   366,     0,   367,     0,   368,   369,   370,   371,   372,
       0,   373,   374,   375,     0,     0,   376,     0,     0,     0,
     377,   378,   379,   380,   381,     0,     0,   382,   383,   384,
     385,   386,     0,   387,     0,     0,   389,     0,   391,  -289,
       0,   392,     0,     0,     0,   394,     0,     0,   396,   397,
    3964,     0,     0,     0,   399,   400,   401,   402,   403,   404,
       0,   406,   407,     0,   408,     0,     0,     0,     0,   410,
     411,   412,     0,     0,     0,     0,   414,     0,     0,     0,
     415,     0,     0,   417,     0,     0,   420,     0,   421,     0,
     423,     0,   425,   426,     0,     0,     0,     0,     0,     0,
     427,   428,     0,   429,     0,     0,   430,     0,     0,   431,
       0,   433,     0,     0,     0,   435,     0,   436,   437,   438,
     439,   440,   441,     0,     0,   442,   443,   444,   445,     0,
     446,   447,     0,   448,     0,   449,   450,   451,   452,     0,
       0,   453,   454,     0,   455,   456,   457,   458,     0,     0,
       0,     0,     0,   459,   460,   461,     0,     0,     0,     0,
     463,   464,   465,     0,   466,   467,     0,   468,   469,     0,
       0,     0,     0,     0,   472,     0,     0,   473,     0,     0,
       0,   475,   476,   477,     0,     0,     0,     0,     0,     0,
     478,     0,     0,   479,     0,     0,     0,   480,   481,   482,
     483,   484,   485,     0,     0,  -289,     0,     0,     0,   486,
       0,     0,   488,     0,   490,     0,   139,   491,   140,   141,
     142,   143,   144,     0,     0,   145,     0,     0,     0,   146,
       0,     0,     0,     0,   148,   149,   150,   151,   152,   153,
       0,     0,  -334,     0,     0,     0,   156,     0,     0,     0,
     157,     0,     0,   158,   159,   160,     0,   161,     0,     0,
       0,     0,     0,   164,  3957,     0,   165,   166,     0,   167,
       0,     0,     0,     0,     0,   171,   172,   173,   174,  3958,
     176,   177,     0,   178,   179,     0,     0,     0,     0,     0,
       0,   185,     0,   187,     0,   189,   190,   191,   192,     0,
     193,   194,     0,   195,   196,   197,     0,   199,     0,   200,
       0,     0,   201,     0,     0,   202,     0,     0,     0,   203,
       0,     0,     0,   204,   205,   206,     0,     0,   207,     0,
       0,     0,     0,   208,     0,     0,     0,     0,     0,   210,
       0,   211,     0,     0,     0,   212,     0,   213,   214,   215,
     216,     0,     0,     0,     0,     0,     0,   218,   219,   220,
       0,     0,     0,   221,     0,  -327,   223,     0,   224,   225,
     226,     0,     0,   227,   228,     0,   229,   230,   231,   232,
       0,     0,     0,     0,   235,   236,   237,     0,     0,   238,
     239,  3959,   240,   241,   242,     0,     0,     0,     0,     0,
       0,   244,     0,   245,     0,   246,     0,   247,   248,   249,
     250,   251,   252,     0,   253,     0,     0,     0,     0,   255,
     256,     0,     0,     0,     0,     0,   259,     0,     0,     0,
     260,   261,   262,   263,  3960,     0,   264,   265,   266,     0,
     267,     0,   268,     0,     0,     0,     0,   269,     0,     0,
       0,     0,   271,     0,   272,   273,     0,   274,   275,  3961,
       0,     0,   276,     0,     0,     0,   278,   279,     0,     0,
     280,  3962,     0,   281,   282,     0,     0,     0,     0,     0,
     283,   284,     0,   285,     0,   286,     0,   287,   288,     0,
       0,     0,     0,  -289,     0,     0,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,     0,   304,   305,   306,     0,   307,   308,   309,   310,
       0,   311,   312,     0,     0,     0,     0,   313,   314,   315,
     316,   317,   318,     0,     0,   319,   320,     0,   321,     0,
     322,     0,   323,   324,   325,   326,   327,   328,   329,   330,
     331,     0,     0,   332,   333,     0,     0,   334,   335,   336,
     337,     0,     0,     0,     0,   339,     0,     0,     0,     0,
     340,   341,   342,     0,   343,   344,   345,  3963,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     349,   350,     0,     0,     0,     0,   352,   353,   354,     0,
     356,   357,   358,   359,   360,   361,   362,     0,     0,     0,
       0,   365,   366,     0,   367,     0,   368,   369,   370,   371,
     372,     0,   373,   374,   375,     0,     0,   376,     0,     0,
       0,   377,   378,   379,   380,   381,     0,     0,   382,   383,
     384,   385,   386,     0,   387,     0,     0,   389,     0,   391,
    -289,     0,   392,     0,     0,     0,   394,     0,     0,   396,
     397,  3964,     0,     0,     0,   399,   400,   401,   402,   403,
     404,     0,   406,   407,     0,   408,     0,     0,     0,     0,
     410,   411,   412,     0,     0,     0,     0,   414,     0,     0,
       0,   415,     0,     0,   417,     0,     0,   420,     0,   421,
       0,   423,     0,   425,   426,     0,     0,     0,     0,     0,
       0,   427,   428,     0,   429,     0,     0,   430,     0,     0,
     431,     0,   433,     0,     0,     0,   435,     0,   436,   437,
     438,   439,   440,   441,     0,     0,   442,   443,   444,   445,
       0,   446,   447,     0,   448,     0,   449,   450,   451,   452,
       0,     0,   453,   454,     0,   455,   456,   457,   458,     0,
       0,     0,     0,     0,   459,   460,   461,     0,     0,     0,
       0,   463,   464,   465,     0,   466,   467,     0,   468,   469,
       0,     0,     0,     0,     0,   472,     0,     0,   473,     0,
       0,     0,   475,   476,   477,     0,     0,     0,     0,     0,
       0,   478,     0,     0,   479,     0,     0,     0,   480,   481,
     482,   483,   484,   485,     0,     0,  -289,     0,     0,     0,
     486,     0,     0,   488,     0,   490,     0,   139,   491,   140,
     141,   142,   143,   144,     0,     0,   145,     0,     0,     0,
     146,     0,     0,     0,     0,   148,   149,   150,   151,   152,
     153,     0,     0,  -334,     0,     0,     0,   156,     0,     0,
       0,   157,     0,     0,   158,   159,   160,     0,   161,     0,
       0,     0,     0,     0,   164,  3957,     0,   165,   166,     0,
     167,     0,     0,     0,     0,     0,   171,   172,   173,   174,
    3958,   176,   177,     0,   178,   179,     0,     0,     0,     0,
       0,     0,   185,     0,   187,     0,   189,   190,   191,   192,
       0,   193,   194,     0,   195,   196,   197,     0,   199,     0,
     200,     0,     0,   201,     0,     0,   202,     0,     0,     0,
     203,     0,     0,     0,   204,   205,   206,     0,     0,   207,
       0,     0,     0,     0,   208,     0,     0,     0,     0,     0,
     210,     0,   211,     0,     0,     0,   212,     0,   213,   214,
     215,   216,     0,     0,     0,     0,     0,     0,   218,   219,
     220,     0,     0,     0,   221,     0,  4421,   223,     0,   224,
     225,   226,     0,     0,   227,   228,     0,   229,   230,   231,
     232,     0,     0,     0,     0,   235,   236,   237,     0,     0,
     238,   239,  3959,   240,   241,   242,     0,     0,     0,     0,
       0,     0,   244,     0,   245,     0,   246,     0,   247,   248,
     249,   250,   251,   252,     0,   253,     0,     0,     0,     0,
     255,   256,     0,     0,     0,     0,     0,   259,     0,     0,
       0,   260,   261,   262,   263,  3960,     0,   264,   265,   266,
       0,   267,     0,   268,     0,     0,     0,     0,   269,     0,
       0,     0,     0,   271,     0,   272,   273,     0,   274,   275,
    3961,     0,     0,   276,     0,     0,     0,   278,   279,     0,
       0,   280,  3962,     0,   281,   282,     0,     0,     0,     0,
       0,   283,   284,     0,   285,     0,   286,     0,   287,   288,
       0,     0,     0,     0,  -289,     0,     0,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,     0,   304,   305,   306,     0,   307,   308,   309,
     310,     0,   311,   312,     0,     0,     0,     0,   313,   314,
     315,   316,   317,   318,     0,     0,   319,   320,     0,   321,
       0,   322,     0,   323,   324,   325,   326,   327,   328,   329,
     330,   331,     0,     0,   332,   333,     0,     0,   334,   335,
     336,   337,     0,     0,     0,     0,   339,     0,     0,     0,
       0,   340,   341,   342,     0,   343,   344,   345,  3963,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   349,   350,     0,     0,     0,     0,   352,   353,   354,
       0,   356,   357,   358,   359,   360,   361,   362,     0,     0,
       0,     0,   365,   366,     0,   367,     0,   368,   369,   370,
     371,   372,     0,   373,   374,   375,     0,     0,   376,     0,
       0,     0,   377,   378,   379,   380,   381,     0,     0,   382,
     383,   384,   385,   386,     0,   387,     0,     0,   389,     0,
     391,  -289,     0,   392,     0,     0,     0,   394,     0,     0,
     396,   397,  3964,     0,     0,     0,   399,   400,   401,   402,
     403,   404,     0,   406,   407,     0,   408,     0,     0,     0,
       0,   410,   411,   412,     0,     0,     0,     0,   414,     0,
       0,     0,   415,     0,     0,   417,     0,     0,   420,     0,
     421,     0,   423,     0,   425,   426,     0,     0,     0,     0,
       0,     0,   427,   428,     0,   429,     0,     0,   430,     0,
       0,   431,     0,   433,     0,     0,     0,   435,     0,   436,
     437,   438,   439,   440,   441,     0,     0,   442,   443,   444,
     445,     0,   446,   447,     0,   448,     0,   449,   450,   451,
     452,     0,     0,   453,   454,     0,   455,   456,   457,   458,
       0,     0,     0,     0,     0,   459,   460,   461,     0,     0,
       0,     0,   463,   464,   465,     0,   466,   467,     0,   468,
     469,     0,     0,     0,     0,     0,   472,     0,     0,   473,
       0,     0,     0,   475,   476,   477,     0,     0,     0,     0,
       0,     0,   478,     0,     0,   479,     0,     0,     0,   480,
     481,   482,   483,   484,   485,     0,     0,  -289,     0,     0,
       0,   486,     0,     0,   488,     0,   490,     0,   139,   491,
     140,   141,   142,   143,   144,     0,     0,   145,     0,     0,
       0,   146,     0,     0,     0,     0,   148,   149,   150,   151,
     152,   153,     0,     0,  -334,     0,     0,     0,   156,     0,
       0,     0,   157,     0,     0,   158,   159,   160,     0,   161,
       0,     0,     0,     0,     0,   164,  3957,     0,   165,   166,
       0,   167,     0,     0,     0,     0,     0,   171,   172,   173,
     174,  3958,   176,   177,     0,   178,   179,     0,     0,     0,
       0,     0,     0,   185,     0,   187,     0,   189,   190,   191,
     192,     0,   193,   194,     0,   195,   196,   197,     0,   199,
       0,   200,     0,     0,   201,     0,     0,   202,     0,     0,
       0,   203,     0,     0,     0,   204,   205,   206,     0,     0,
     207,     0,     0,     0,     0,   208,     0,     0,     0,     0,
       0,   210,     0,   211,     0,     0,     0,   212,     0,   213,
     214,   215,   216,     0,     0,     0,     0,     0,     0,   218,
     219,   220,     0,     0,     0,   221,     0,  4467,   223,     0,
     224,   225,   226,     0,     0,   227,   228,     0,   229,   230,
     231,   232,     0,     0,     0,     0,   235,   236,   237,     0,
       0,   238,   239,  3959,   240,   241,   242,     0,     0,     0,
       0,     0,     0,   244,     0,   245,     0,   246,     0,   247,
     248,   249,   250,   251,   252,     0,   253,     0,     0,     0,
       0,   255,   256,     0,     0,     0,     0,     0,   259,     0,
       0,     0,   260,   261,   262,   263,  3960,     0,   264,   265,
     266,     0,   267,     0,   268,     0,     0,     0,     0,   269,
       0,     0,     0,     0,   271,     0,   272,   273,     0,   274,
     275,  3961,     0,     0,   276,     0,     0,     0,   278,   279,
       0,     0,   280,  3962,     0,   281,   282,     0,     0,     0,
       0,     0,   283,   284,     0,   285,     0,   286,     0,   287,
     288,     0,     0,     0,     0,  -289,     0,     0,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,     0,   304,   305,   306,     0,   307,   308,
     309,   310,     0,   311,   312,     0,     0,     0,     0,   313,
     314,   315,   316,   317,   318,     0,     0,   319,   320,     0,
     321,     0,   322,     0,   323,   324,   325,   326,   327,   328,
     329,   330,   331,     0,     0,   332,   333,     0,     0,   334,
     335,   336,   337,     0,     0,     0,     0,   339,     0,     0,
       0,     0,   340,   341,   342,     0,   343,   344,   345,  3963,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   349,   350,     0,     0,     0,     0,   352,   353,
     354,     0,   356,   357,   358,   359,   360,   361,   362,     0,
       0,     0,     0,   365,   366,     0,   367,     0,   368,   369,
     370,   371,   372,     0,   373,   374,   375,     0,     0,   376,
       0,     0,     0,   377,   378,   379,   380,   381,     0,     0,
     382,   383,   384,   385,   386,     0,   387,     0,     0,   389,
       0,   391,  -289,     0,   392,     0,     0,     0,   394,     0,
       0,   396,   397,  3964,     0,     0,     0,   399,   400,   401,
     402,   403,   404,     0,   406,   407,     0,   408,     0,     0,
       0,     0,   410,   411,   412,     0,     0,     0,     0,   414,
       0,     0,     0,   415,     0,     0,   417,     0,     0,   420,
       0,   421,     0,   423,     0,   425,   426,     0,     0,     0,
       0,     0,     0,   427,   428,     0,   429,     0,     0,   430,
       0,     0,   431,     0,   433,     0,     0,     0,   435,     0,
     436,   437,   438,   439,   440,   441,     0,     0,   442,   443,
     444,   445,     0,   446,   447,     0,   448,     0,   449,   450,
     451,   452,     0,     0,   453,   454,     0,   455,   456,   457,
     458,     0,     0,     0,     0,     0,   459,   460,   461,     0,
       0,     0,     0,   463,   464,   465,     0,   466,   467,     0,
     468,   469,     0,     0,     0,     0,     0,   472,     0,     0,
     473,     0,     0,     0,   475,   476,   477,     0,     0,     0,
       0,     0,     0,   478,     0,     0,   479,     0,     0,     0,
     480,   481,   482,   483,   484,   485,     0,     0,  -289,     0,
       0,     0,   486,     0,     0,   488,     0,   490,     0,   139,
     491,   140,   141,   142,   143,   144,     0,     0,   145,     0,
       0,     0,   146,     0,     0,     0,     0,   148,   149,   150,
     151,   152,   153,     0,     0,  -334,     0,     0,     0,   156,
       0,     0,     0,   157,     0,     0,   158,   159,   160,     0,
     161,     0,     0,     0,     0,     0,   164,  3957,     0,   165,
     166,     0,   167,     0,     0,     0,     0,     0,   171,   172,
     173,   174,  3958,   176,   177,     0,   178,   179,     0,     0,
       0,     0,     0,     0,   185,     0,   187,     0,   189,   190,
     191,   192,     0,   193,   194,     0,   195,   196,   197,     0,
     199,     0,   200,     0,     0,   201,     0,     0,   202,     0,
       0,     0,   203,     0,     0,     0,   204,   205,   206,     0,
       0,   207,     0,     0,     0,     0,   208,     0,     0,     0,
       0,     0,   210,     0,   211,     0,     0,     0,   212,     0,
     213,   214,   215,   216,     0,     0,     0,     0,     0,     0,
     218,   219,   220,     0,     0,     0,   221,     0,  -308,   223,
       0,   224,   225,   226,     0,     0,   227,   228,     0,   229,
     230,   231,   232,     0,     0,     0,     0,   235,   236,   237,
       0,     0,   238,   239,  3959,   240,   241,   242,     0,     0,
       0,     0,     0,     0,   244,     0,   245,     0,   246,     0,
     247,   248,   249,   250,   251,   252,     0,   253,     0,     0,
       0,     0,   255,   256,     0,     0,     0,     0,     0,   259,
       0,     0,     0,   260,   261,   262,   263,  3960,     0,   264,
     265,   266,     0,   267,     0,   268,     0,     0,     0,     0,
     269,     0,     0,     0,     0,   271,     0,   272,   273,     0,
     274,   275,  3961,     0,     0,   276,     0,     0,     0,   278,
     279,     0,     0,   280,  3962,     0,   281,   282,     0,     0,
       0,     0,     0,   283,   284,     0,   285,     0,   286,     0,
     287,   288,     0,     0,     0,     0,  -289,     0,     0,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,     0,   304,   305,   306,     0,   307,
     308,   309,   310,     0,   311,   312,     0,     0,     0,     0,
     313,   314,   315,   316,   317,   318,     0,     0,   319,   320,
       0,   321,     0,   322,     0,   323,   324,   325,   326,   327,
     328,   329,   330,   331,     0,     0,   332,   333,     0,     0,
     334,   335,   336,   337,     0,     0,     0,     0,   339,     0,
       0,     0,     0,   340,   341,   342,     0,   343,   344,   345,
    3963,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   349,   350,     0,     0,     0,     0,   352,
     353,   354,     0,   356,   357,   358,   359,   360,   361,   362,
       0,     0,     0,     0,   365,   366,     0,   367,     0,   368,
     369,   370,   371,   372,     0,   373,   374,   375,     0,     0,
     376,     0,     0,     0,   377,   378,   379,   380,   381,     0,
       0,   382,   383,   384,   385,   386,     0,   387,     0,     0,
     389,     0,   391,  -289,     0,   392,     0,     0,     0,   394,
       0,     0,   396,   397,  3964,     0,     0,     0,   399,   400,
     401,   402,   403,   404,     0,   406,   407,     0,   408,     0,
       0,     0,     0,   410,   411,   412,     0,     0,     0,     0,
     414,     0,     0,     0,   415,     0,     0,   417,     0,     0,
     420,     0,   421,     0,   423,     0,   425,   426,     0,     0,
       0,     0,     0,     0,   427,   428,     0,   429,     0,     0,
     430,     0,     0,   431,     0,   433,     0,     0,     0,   435,
       0,   436,   437,   438,   439,   440,   441,     0,     0,   442,
     443,   444,   445,     0,   446,   447,     0,   448,     0,   449,
     450,   451,   452,     0,     0,   453,   454,     0,   455,   456,
     457,   458,     0,     0,     0,     0,     0,   459,   460,   461,
       0,     0,     0,     0,   463,   464,   465,     0,   466,   467,
       0,   468,   469,     0,     0,     0,     0,     0,   472,     0,
       0,   473,     0,     0,     0,   475,   476,   477,     0,     0,
       0,     0,     0,     0,   478,     0,     0,   479,     0,     0,
       0,   480,   481,   482,   483,   484,   485,     0,     0,  -289,
       0,     0,     0,   486,     0,     0,   488,     0,   490,     0,
     139,   491,   140,   141,   142,   143,   144,     0,     0,   145,
       0,     0,     0,   146,     0,     0,     0,     0,   148,   149,
     150,   151,   152,   153,     0,     0,  -334,     0,     0,     0,
     156,     0,     0,     0,   157,     0,     0,   158,   159,   160,
       0,   161,     0,     0,     0,     0,     0,   164,  3957,     0,
     165,   166,     0,   167,     0,     0,     0,     0,     0,   171,
     172,   173,   174,  3958,   176,   177,     0,   178,   179,     0,
       0,     0,     0,     0,     0,   185,     0,   187,     0,   189,
     190,   191,   192,     0,   193,   194,     0,   195,   196,   197,
       0,   199,     0,   200,     0,     0,   201,     0,     0,   202,
       0,     0,     0,   203,     0,     0,     0,   204,   205,   206,
       0,     0,   207,     0,     0,     0,     0,   208,     0,     0,
       0,     0,     0,   210,     0,   211,     0,     0,     0,   212,
       0,   213,   214,   215,   216,     0,     0,     0,     0,     0,
       0,   218,   219,   220,     0,     0,     0,   221,     0,     0,
     223,     0,   224,   225,   226,     0,     0,   227,   228,     0,
     229,   230,   231,   232,     0,     0,     0,     0,   235,   236,
     237,     0,     0,   238,   239,  3959,   240,   241,   242,     0,
       0,     0,     0,     0,     0,   244,     0,   245,     0,   246,
       0,   247,   248,   249,   250,   251,   252,     0,   253,     0,
       0,     0,     0,   255,   256,     0,     0,     0,     0,     0,
     259,     0,     0,     0,   260,   261,   262,   263,  3960,     0,
     264,   265,   266,     0,   267,     0,   268,     0,     0,     0,
       0,   269,     0,     0,     0,     0,   271,     0,   272,   273,
       0,   274,   275,  3961,     0,     0,   276,     0,     0,     0,
     278,   279,     0,     0,   280,  3962,     0,   281,   282,     0,
       0,     0,     0,     0,   283,   284,     0,   285,     0,   286,
       0,   287,   288,     0,     0,     0,     0,  -289,     0,     0,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,     0,   304,   305,   306,     0,
     307,   308,   309,   310,     0,   311,   312,     0,     0,     0,
       0,   313,   314,   315,   316,   317,   318,     0,     0,   319,
     320,     0,   321,     0,   322,     0,   323,   324,   325,   326,
     327,   328,   329,   330,   331,     0,     0,   332,   333,     0,
       0,   334,   335,   336,   337,     0,     0,     0,     0,   339,
       0,     0,     0,     0,   340,   341,   342,     0,   343,   344,
     345,  3963,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   349,   350,     0,     0,     0,     0,
     352,   353,   354,     0,   356,   357,   358,   359,   360,   361,
     362,     0,     0,     0,     0,   365,   366,     0,   367,     0,
     368,   369,   370,   371,   372,     0,   373,   374,   375,     0,
       0,   376,     0,     0,     0,   377,   378,   379,   380,   381,
       0,     0,   382,   383,   384,   385,   386,     0,   387,     0,
       0,   389,     0,   391,  -289,     0,   392,     0,     0,     0,
     394,     0,     0,   396,   397,  3964,     0,     0,     0,   399,
     400,   401,   402,   403,   404,     0,   406,   407,     0,   408,
       0,     0,     0,     0,   410,   411,   412,     0,     0,     0,
       0,   414,     0,     0,     0,   415,     0,     0,   417,     0,
       0,   420,     0,   421,     0,   423,     0,   425,   426,     0,
       0,     0,     0,     0,     0,   427,   428,     0,   429,     0,
       0,   430,     0,     0,   431,     0,   433,     0,     0,     0,
     435,     0,   436,   437,   438,   439,   440,   441,     0,     0,
     442,   443,   444,   445,     0,   446,   447,     0,   448,     0,
     449,   450,   451,   452,     0,     0,   453,   454,     0,   455,
     456,   457,   458,     0,     0,     0,     0,     0,   459,   460,
     461,     0,     0,     0,     0,   463,   464,   465,     0,   466,
     467,     0,   468,   469,     0,     0,     0,     0,     0,   472,
       0,     0,   473,     0,     0,     0,   475,   476,   477,     0,
       0,     0,     0,     0,     0,   478,     0,     0,   479,     0,
       0,     0,   480,   481,   482,   483,   484,   485,     0,     0,
    -289,     0,     0,     0,   486,     0,     0,   488,     0,   490,
       0,   139,   491,   140,   141,   142,   143,   144,     0,     0,
     145,     0,     0,     0,   146,     0,     0,     0,     0,   148,
     149,   150,   151,   152,   153,     0,     0,  -334,     0,     0,
       0,   156,     0,     0,     0,   157,     0,     0,   158,   159,
     160,     0,   161,     0,     0,     0,     0,     0,   164,  3957,
       0,   165,   166,     0,   167,     0,     0,     0,     0,     0,
     171,   172,   173,   174,  3958,   176,   177,     0,   178,   179,
       0,     0,     0,     0,     0,     0,   185,     0,   187,     0,
     189,   190,   191,   192,     0,   193,   194,     0,   195,   196,
     197,     0,   199,     0,   200,     0,     0,   201,     0,     0,
     202,     0,     0,     0,   203,     0,     0,     0,   204,   205,
     206,     0,     0,   207,     0,     0,     0,     0,   208,     0,
       0,     0,     0,     0,   210,     0,   211,     0,     0,     0,
     212,     0,   213,   214,   215,   216,     0,     0,     0,     0,
       0,     0,   218,   219,   220,     0,     0,     0,   221,     0,
       0,   223,     0,   224,   225,   226,     0,     0,   227,   228,
       0,   229,   230,   231,   232,     0,     0,     0,     0,   235,
     236,   237,     0,     0,   238,   239,  3959,   240,   241,   242,
       0,     0,     0,     0,     0,     0,   244,     0,   245,     0,
     246,     0,   247,   248,   249,   250,   251,   252,     0,   253,
       0,     0,     0,     0,   255,   256,     0,     0,     0,     0,
       0,   259,     0,     0,     0,   260,   261,   262,   263,  3960,
       0,   264,   265,   266,     0,   267,     0,   268,     0,     0,
       0,     0,   269,     0,     0,     0,     0,   271,     0,   272,
     273,     0,   274,   275,  3961,     0,     0,   276,     0,     0,
       0,   278,   279,     0,     0,   280,  3962,     0,   281,   282,
       0,     0,     0,     0,     0,   283,   284,     0,   285,     0,
     286,     0,   287,   288,     0,     0,     0,     0,  -289,     0,
       0,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,     0,   304,   305,   306,
       0,   307,   308,   309,   310,     0,   311,   312,     0,     0,
       0,     0,   313,   314,   315,   316,   317,   318,     0,     0,
     319,   320,     0,   321,     0,   322,     0,   323,   324,   325,
     326,   327,   328,   329,   330,   331,     0,     0,   332,   333,
       0,     0,   334,   335,   336,   337,     0,     0,     0,     0,
     339,     0,     0,     0,     0,   340,   341,   342,     0,   343,
     344,   345,  3963,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   349,   350,     0,     0,     0,
       0,   352,   353,   354,     0,   356,   357,   358,   359,   360,
     361,   362,     0,     0,     0,     0,   365,   366,     0,   367,
       0,   368,   369,   370,   371,   372,     0,   373,   374,   375,
       0,     0,   376,     0,     0,     0,   377,   378,   379,   380,
     381,     0,     0,   382,   383,   384,   385,   386,     0,   387,
       0,     0,   389,     0,   391,  -289,     0,   392,     0,     0,
       0,   394,     0,     0,   396,   397,  3964,     0,     0,     0,
     399,   400,   401,   402,   403,   404,     0,   406,   407,     0,
     408,     0,     0,     0,     0,   410,   411,   412,     0,     0,
       0,     0,   414,     0,     0,     0,   415,     0,     0,   417,
       0,     0,   420,     0,   421,     0,   423,     0,   425,   426,
       0,     0,     0,     0,     0,     0,   427,   428,     0,   429,
       0,     0,   430,     0,     0,   431,     0,   433,     0,     0,
       0,   435,     0,   436,   437,   438,   439,   440,   441,     0,
       0,   442,   443,   444,   445,     0,   446,   447,     0,   448,
       0,   449,   450,   451,   452,     0,     0,   453,   454,     0,
     455,   456,   457,   458,     0,     0,     0,     0,     0,   459,
     460,   461,     0,     0,     0,     0,   463,   464,   465,     0,
     466,   467,     0,   468,   469,     0,     0,     0,     0,     0,
     472,     0,     0,  4309,     0,     0,     0,   475,   476,   477,
       0,     0,     0,     0,     0,     0,   478,     0,     0,   479,
       0,     0,     0,   480,   481,   482,   483,   484,   485,     0,
       0,  -289,     0,     0,     0,   486,     0,     0,   488,     0,
     490,     0,   139,   491,   140,   141,   142,   143,   144,     0,
       0,   145,     0,     0,     0,   146,     0,     0,     0,     0,
     148,   149,   150,   151,   152,   153,     0,     0,     0,     0,
       0,     0,   156,     0,     0,     0,   157,     0,     0,   158,
     159,   160,     0,   161,     0,     0,     0,     0,     0,   164,
       0,     0,   165,   166,     0,   167,     0,     0,     0,     0,
       0,   171,   172,   173,   174,     0,   176,   177,     0,   178,
     179,     0,     0,     0,     0,     0,     0,   185,     0,   187,
       0,   189,   190,   191,   192,     0,   193,   194,     0,   195,
     196,   197,     0,   199,     0,   200,     0,     0,   201,     0,
       0,   202,     0,     0,     0,   203,     0,     0,     0,   204,
     205,   206,     0,     0,   207,     0,     0,     0,     0,   208,
       0,     0,     0,     0,     0,   210,     0,   211,     0,     0,
       0,   212,     0,   213,   214,   215,   216,     0,     0,     0,
       0,     0,     0,   218,   219,   220,     0,     0,     0,   221,
       0,     0,   223,     0,   224,   225,   226,     0,     0,   227,
     228,     0,   229,   230,   231,   232,     0,     0,     0,     0,
     235,   236,   237,     0,     0,   238,   239,     0,   240,   241,
     242,     0,     0,     0,     0,     0,     0,   244,     0,   245,
       0,   246,     0,   247,   248,   249,   250,   251,   252,     0,
     253,     0,     0,     0,     0,   255,   256,     0,     0,     0,
       0,     0,   259,     0,     0,     0,   260,   261,   262,   263,
       0,     0,   264,   265,   266,     0,   267,     0,   268,     0,
       0,     0,     0,   269,     0,     0,     0,     0,   271,     0,
     272,   273,     0,   274,   275,     0,     0,     0,   276,     0,
       0,     0,   278,   279,     0,     0,   280,     0,     0,   281,
     282,     0,     0,     0,     0,     0,   283,   284,     0,   285,
       0,   286,     0,   287,   288,     0,     0,     0,     0,     0,
       0,     0,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,     0,   304,   305,
     306,     0,   307,   308,   309,   310,     0,   311,   312,     0,
       0,     0,     0,   313,   314,   315,   316,   317,   318,     0,
       0,   319,   320,     0,   321,     0,   322,     0,   323,   324,
     325,   326,   327,   328,   329,   330,   331,     0,     0,   332,
     333,     0,     0,   334,   335,   336,   337,     0,     0,     0,
       0,   339,     0,     0,     0,     0,   340,   341,   342,     0,
     343,   344,   345,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   349,   350,     0,     0,
       0,     0,   352,   353,   354,     0,   356,   357,   358,   359,
     360,   361,   362,     0,     0,     0,     0,   365,   366,     0,
     367,     0,   368,   369,   370,   371,   372,     0,   373,   374,
     375,     0,     0,   376,     0,     0,     0,   377,   378,   379,
     380,   381,     0,     0,   382,   383,   384,   385,   386,     0,
     387,     0,     0,   389,     0,   391,     0,     0,   392,     0,
       0,     0,   394,     0,     0,   396,   397,     0,     0,     0,
       0,   399,   400,   401,   402,   403,   404,     0,   406,   407,
       0,   408,     0,     0,     0,     0,   410,   411,   412,     0,
       0,     0,     0,   414,     0,     0,     0,   415,     0,     0,
     417,     0,     0,   420,     0,   421,     0,   423,     0,   425,
     426,     0,     0,     0,     0,     0,     0,   427,   428,     0,
     429,     0,     0,   430,     0,     0,   431,     0,   433,     0,
       0,     0,   435,     0,   436,   437,   438,   439,   440,   441,
       0,     0,   442,   443,   444,   445,     0,   446,   447,     0,
     448,     0,   449,   450,   451,   452,     0,     0,   453,   454,
       0,   455,   456,   457,   458,     0,     0,     0,     0,     0,
     459,   460,   461,     0,     0,     0,     0,   463,   464,   465,
       0,   466,   467,     0,   468,   469,     0,     0,     0,     0,
       0,   472,     0,     0,   473,     0,     0,     0,   475,   476,
     477,     0,     0,     0,     0,     0,     0,   478,     0,     0,
     479,     0,     0,     0,   480,   481,   482,   483,   484,   485,
       0,     0,     0,     0,     0,     0,   486,     0,     0,   488,
       0,   490,     0,     0,   491
};

static const yytype_int16 yycheck[] =
{
       6,   554,   576,  1005,   648,   602,   897,  1121,   917,   918,
    1006,  1192,  1715,    19,   575,   576,    22,   700,   927,  1094,
     124,   616,   964,  1140,  1164,   939,    32,     6,  1853,  1854,
    1529,  1192,   720,    39,  1088,  1089,    42,   937,    20,   811,
      46,  1324,  2549,  1422,  1402,  1841,  1422,    29,    54,  1255,
     964,  1527,  2590,  2383,    36,  1214,  1490,  2479,  2181,  2656,
     880,  2346,  1221,  2884,  3278,   965,   522,  2823,   675,     4,
    2193,  1516,   755,  2618,   497,   758,  1131,   644,   645,  1010,
    1010,  2670,  1222,  1223,    22,  2467,  1226,  1227,  1228,  1229,
      96,  1231,  1232,  1233,  1234,  1235,  1236,  1237,  1238,  2012,
    1332,  2194,  1508,  2279,   657,   658,  1433,  2012,  2014,  1841,
    2160,  2069,    47,   119,   662,   121,  2139,   123,   124,   125,
    1967,  1968,  2455,  2408,  2015,  1452,  2398,  3026,  2019,  2544,
    1995,  2139,  3516,  1460,  1461,  2460,  2523,  1984,  2317,  2030,
     784,  1498,   121,  2468,   123,  1551,    19,  3179,    19,  2040,
      12,    17,    34,    12,  2001,  2002,    73,    36,    96,   582,
      30,  2744,   585,  1852,    51,   985,   773,   774,   775,    25,
    2017,  2018,  3284,  2020,  3302,  2687,  2023,  2024,   785,    19,
    2027,   145,    81,    58,  2004,  2032,    21,     9,   174,  2036,
    2037,  2038,  2039,    19,   131,   131,  2043,  2044,   187,  2046,
      17,    70,   150,  2433,    51,  2052,    28,  2632,  2055,  2056,
      63,  2058,  2512,    35,    66,  1035,    64,   127,   813,  3341,
    3342,   174,  2932,  3345,    59,    60,  2139,  2658,    16,    17,
    2684,  2685,    16,    17,  2139,   224,  2690,  2526,  2692,    16,
      17,    11,  3364,    68,    16,    17,   156,   283,    79,  3371,
    3557,    85,    60,    36,   144,   366,    12,    56,   360,   340,
     192,    43,   312,    10,   318,    81,    47,   208,   282,    34,
     364,   249,    87,    16,    17,   194,  2123,  2124,  2125,  2126,
     875,   362,   146,   156,  3554,   364,   372,   160,   249,   160,
     156,    21,   246,   966,  2508,  2509,   182,   127,  3512,   174,
     261,   449,  1508,   178,    34,   268,   224,   113,   417,   224,
     265,   442,   134,   361,   189,    16,    17,   191,    48,  1986,
     160,    16,    17,   224,   422,   301,   156,   127,    20,    59,
      60,    16,    17,   212,    12,  3457,  1958,    12,    12,    41,
      21,   389,   266,  2128,   466,  1551,   280,  4080,   103,   393,
      16,    17,   513,    34,   540,    12,   156,   188,   128,   393,
      16,    17,    16,    17,   511,   111,    82,    48,   283,   255,
     351,    16,    17,  2164,   585,   231,   272,   606,    59,    60,
     167,   417,   353,    16,    17,   508,   191,   156,    16,    17,
      16,    17,    12,   561,    16,    17,   572,   228,   242,   247,
     228,  2451,   631,   507,   220,  3744,   222,   194,    16,    17,
    2624,  2625,  2273,   540,   191,   209,   539,   585,   262,   400,
     631,   252,   228,   357,   252,   439,   637,   413,   150,   212,
     150,    16,    17,   135,  3773,   251,   412,   242,    40,   543,
     132,   316,  1130,   283,   163,  3996,   593,   491,   372,  4182,
     636,    70,   308,   385,   630,   224,  1144,   491,   252,   355,
     413,   432,   140,   417,   365,   140,   140,   353,   283,   567,
     448,    63,  3594,   347,    16,    17,  3860,   232,  2816,  3749,
    1252,  3603,  1478,   140,   538,   404,  1395,    16,    17,   637,
     191,   452,   540,   456,   249,  1315,   191,   606,   413,   660,
     631,   507,   466,   509,   585,  3627,   261,   629,   484,  2891,
    3632,   565,   376,  1066,  1067,  1068,  1874,   611,    16,    17,
     526,  3735,   440,   189,   530,  1345,   637,  1427,  2950,   631,
    1430,  2030,   611,   539,   957,  1435,   301,   543,   413,   545,
      16,    17,   657,   658,  2931,   631,  2466,  2934,  2935,   490,
     114,   483,   558,   117,   353,  2827,  2828,  2829,   340,  1765,
     447,  3673,   497,  1463,  1464,   160,  2953,  1498,  1498,   575,
    2528,   402,   425,  1217,  2532,   611,  1490,   417,  4129,   629,
    1986,  3291,   588,   371,   474,   340,   374,   371,  2546,  2547,
     374,   605,   417,    73,   371,   584,   188,   374,  2556,  2512,
     447,   607,  2327,  1743,   374,  1932,  2012,  2512,  2473,  2632,
     616,   546,   618,  2404,  1754,   534,  2061,  1757,  1225,  1550,
    1550,  2921,  2672,   629,  2632,  2855,  2584,   461,   371,   635,
     583,   374,   484,   160,   640,  1242,   642,  3220,   644,   645,
    2929,   578,   511,   649,   650,   631,  3071,   582,   654,   604,
     585,  1107,  1108,   160,   589,   603,   635,   404,   664,   665,
     666,   540,  3774,  3484,   670,   629,  2531,  3098,  2533,   633,
     371,   440,   520,   374,   573,  2540,   371,  1133,   631,   374,
     551,   551,  1737,    16,    17,  1141,   371,  1143,  2553,   374,
    2510,   629,  2539,  1260,  2559,  2560,  2654,   452,  3281,  1155,
    1156,  1157,   640,  1298,  2551,   371,   810,  1163,   374,  1823,
    2575,  2576,   629,   535,   720,   371,  1536,   371,   374,  2632,
     374,  2410,  2128,   659,  3756,   635,   371,  2632,   484,   374,
    3858,   553,  4116,  2139,   551,   570,  1508,  2602,   371,   561,
     606,   374,  2607,   371,   631,   371,   374,   629,   374,   371,
    2615,  2616,   374,    16,    17,  2620,   631,   540,   505,   585,
    1327,   516,   635,   371,  3094,  2122,   374,   629,   590,   635,
     629,   611,   778,  1368,   780,   631,  4083,  1344,  2957,  1551,
    1986,  2831,  2832,  2630,   592,  1458,   371,    16,    17,   374,
     606,  4061,    16,    17,  3906,    19,  1391,   553,   804,   805,
     806,   585,   808,   809,   810,   635,   812,   813,   614,   556,
     402,  3323,  3324,   917,    16,    17,   597,   921,   922,  3331,
      16,    17,  3334,  3335,  2491,   606,   805,   615,   110,   371,
     809,   615,   374,   812,   938,   635,  1431,  2459,   615,  3351,
     570,  2626,   371,   615,   850,   374,   634,   631,   564,    16,
      17,   598,   598,  3365,   631,  1278,  3070,   863,  4242,  3371,
    3372,  3373,  3374,  1411,   484,   595,   635,    16,    17,   875,
     876,  3325,   615,   371,   880,  3329,   374,  2353,  2669,   634,
     475,   603,   601,   603,  2745,   167,  3268,   630,   631,   570,
    3272,  3229,   511,    16,    17,   371,  3226,  4448,   374,   629,
    3315,  3288,  4014,    16,    17,  3359,  3360,  3361,    16,    17,
     512,   917,   194,  3367,   615,   921,   922,    16,    17,  1034,
     615,  3375,  2128,    16,    17,   863,   406,  1350,   160,  3262,
     615,   533,   938,  2139,   869,   630,  3448,   215,   876,   201,
    2765,  1502,  3011,  3268,    81,   630,   631,  3272,   475,   615,
      89,  1860,   154,  3238,   174,   387,  3855,   559,    46,   615,
    3549,   615,  3234,   194,   630,  4087,   156,  4089,   475,  1084,
     615,  1880,  2892,  2893,   630,  1663,  2801,   631,   160,   985,
     544,   573,   615,   547,   231,  1927,   631,   615,   357,   615,
      16,    17,  3446,   615,   277,   817,   160,   630,   631,   156,
    1006,  3455,   630,   631,   630,   631,   187,   615,  2921,   631,
     272,  1559,   228,  1927,    16,    17,  2921,  3129,    12,    23,
    1920,  1963,   957,   631,   959,   189,  2525,  2526,  2824,  1035,
     615,  1931,    16,    17,  1934,  1935,  4250,  4125,   371,  3132,
     209,   374,   637,   224,    71,   630,   631,   246,  3071,  1963,
     530,   127,   335,   354,  3104,  4167,  2781,  2782,  2783,  3838,
     466,    25,  2441,  3071,  2443,  2444,   695,  2443,  2444,    16,
      17,   301,  3121,   615,   388,   555,   266,   139,  2218,    73,
    1086,    16,    17,   252,  1090,  2491,   615,  3263,   630,  2995,
     131,  2166,  2824,   266,   231,   609,    16,    17,    16,    17,
    1204,   630,   631,    16,    17,  2996,  2512,   354,   371,   266,
     637,   374,  2810,    16,    17,    16,    17,   615,    32,    71,
     434,   209,   404,   141,  1130,  2452,    16,    17,    16,    17,
     637,  2290,   630,  2365,  3567,  2580,   765,  1241,  1144,   615,
      51,   124,   371,    16,    17,   374,   158,   371,  1086,  1756,
     374,   124,  1090,  1841,   630,   631,    16,    17,  3071,  3541,
    3542,     8,  3751,  2072,   168,  4254,  3071,   341,  4257,   371,
      16,    17,   374,   404,   389,   371,  1771,  3042,   374,  2296,
    2297,  2884,  3961,  3962,    16,    17,  1192,   204,  2471,  3961,
    3962,  2122,  2122,   413,   235,    16,    17,   629,  1204,   372,
     629,   184,  2383,   390,   371,  2903,  1773,   374,  1761,   471,
    4086,   348,  1807,   165,  1986,    16,    17,   354,   417,   231,
    2626,  2361,   371,   629,   124,   374,  2632,  3277,   511,   212,
    3342,  1335,   249,   511,  2289,  1241,  1831,  1832,  3307,   460,
    1246,  3786,  3787,   475,  2299,  1251,    25,  4068,   371,  4005,
     129,   374,   534,   622,  1260,   317,    16,    17,   371,  2079,
      12,   374,   540,   371,  3861,  1818,   374,   231,   515,  3828,
      16,    17,   371,   412,   556,   374,  2710,  1884,   371,   534,
     356,   374,   615,    16,    17,  2491,   423,   128,  2469,   153,
    3828,  4379,  1298,   475,  4383,   177,   233,   280,   631,   600,
     164,    16,    17,   534,  1310,   242,  1312,   280,  2469,  1315,
      12,   475,   330,  1251,  2790,  3438,   598,   631,  4532,    16,
      17,  1327,   466,    16,    17,   540,    81,  3376,   242,  1335,
    4109,  4110,    16,    17,   213,   182,    16,    17,  1344,  1345,
    3298,  3671,   354,  1278,   308,   371,   373,   543,   374,   509,
     623,   265,   615,   600,    81,   372,  2128,   630,  3791,  1782,
     189,  3319,  1368,   583,   466,  1371,   540,  2139,   631,   371,
     530,   459,   374,  1379,   357,     0,  1382,  2558,   515,   158,
     280,  1316,   466,  1012,   357,  1391,   615,   371,   140,   156,
     374,   615,   566,    16,    17,  1401,  1402,  2558,   650,   572,
     241,  1505,   631,   584,   283,   637,  1412,  1413,  1414,  1415,
    1416,  1417,   599,   615,   604,  1350,  1422,    16,    17,   615,
    2626,   373,  1428,  1429,   371,  1431,  2632,   374,  1434,  4208,
    2929,   568,    52,  1412,  1413,  1414,   371,  1416,   140,   374,
     377,    58,   353,    63,  4223,   635,   275,   604,   615,  1455,
    1429,   371,   231,   371,   374,  1434,   374,   357,   371,  4238,
     431,   374,   129,   600,   631,   220,   615,   222,   371,   466,
     371,   374,  1407,   374,   356,  4351,  4352,  1415,   635,  1417,
     266,   371,   631,   371,   374,   629,   374,  3909,    16,    17,
     137,   233,   615,   220,  2873,   222,   251,  2996,   371,  1505,
     242,   374,   615,   515,   466,   152,   370,   615,   631,  2623,
     399,   371,   426,  1519,   374,  2921,   615,  1455,  1524,  1525,
    2429,  4300,   615,   631,   251,   371,   466,   629,   374,   308,
    1536,   630,  3862,  4312,  4313,   506,   447,   578,   631,   371,
    4312,  4313,   374,   466,   220,   629,   222,    16,    17,  1555,
     371,  1557,  1558,   374,  1560,  1561,   808,   174,    16,    17,
       8,   178,   191,   474,  3687,    16,    17,  1573,   466,  1575,
     371,   592,   189,   374,   595,   354,  1511,  4136,  1557,  1558,
     563,  1519,    30,  4362,    16,    17,   372,  1525,   600,   615,
     563,   124,    12,  4372,    16,    17,  2671,    19,  4136,   167,
    4159,  4160,  2761,    16,    17,   631,   624,   625,   626,   627,
    4070,   371,  4072,   615,   374,   160,   283,    16,    17,   631,
     128,  4159,  4160,  3908,   204,   371,   194,   534,   374,   631,
    2811,   615,   629,   160,  4413,   377,  4415,   266,   371,    16,
      17,   374,   167,    16,    17,   795,  4425,   631,    16,    17,
    2811,   184,   272,    16,    17,   191,   371,  1663,  1664,   374,
      16,    17,  4441,   563,  4443,  3071,  4445,   629,   615,    88,
    1774,   633,   125,  4452,   371,   539,   558,   374,   371,   212,
     615,   374,   128,   630,  4463,    17,  2293,   371,   107,   629,
     374,   371,   574,   630,   374,   615,   631,   615,    64,   316,
    4479,  4480,   615,   239,   350,   351,   629,  2390,  2391,  2392,
     637,   631,   615,   631,   615,  1721,  4495,  4496,   631,  2491,
     140,  4500,   530,    16,    17,   615,   534,   615,   631,   630,
    3206,   629,   124,   241,  2190,   127,   515,   223,   888,  2195,
     204,   631,   615,   631,    79,    16,    17,   280,   371,    16,
      17,   374,  2208,  1857,   534,   615,   466,  1763,   631,    16,
      17,    25,  4269,    16,    17,  1771,   629,  1773,  1774,   615,
    3566,   631,   371,  2530,   637,   374,   537,    16,    17,   228,
    1786,  3484,  1788,   615,   630,  2241,  3651,   240,  1794,  1795,
     228,  1797,   184,   213,   615,   228,   413,  2554,  2555,   631,
     223,  1807,  3630,  2398,  1810,  3633,   561,   141,  1814,   630,
      16,    17,    16,    17,   615,   204,  3612,   366,    16,    17,
     212,   600,    16,    17,   357,  1831,  1832,  1833,  1834,   630,
     585,    16,    17,  2947,    19,  1841,   372,   239,  1844,  1845,
    1846,    16,    17,   371,  1022,  1023,   374,  1782,  2605,   191,
    2306,  1857,   631,   188,  2626,   615,  1794,  1795,   404,  1797,
    2632,  3689,   474,   466,    47,  3071,    16,    17,  1874,   615,
     630,   474,  1810,   590,  2435,  2577,  1814,    34,   623,   589,
     590,   247,   615,  1061,   630,   630,    16,    17,   280,  1895,
      16,    17,   485,   228,  1829,  1833,  1834,   630,   485,  3257,
     615,   629,   371,    60,    31,   374,  1844,  1845,  1846,   637,
      16,    17,   283,   371,   124,   630,   374,   252,   615,   629,
     371,   630,   615,   374,    16,    17,  2868,  1933,    16,    17,
     635,   615,  2823,   630,   202,   615,   585,   630,   191,   371,
      16,    17,   374,   637,  1950,   579,   630,    16,    17,   371,
     630,  1957,   374,   368,  2868,  1890,    83,   114,   371,   505,
     117,   374,    39,   287,   288,   357,   419,   231,   125,    46,
     630,   631,   371,   267,   184,   374,   270,  2538,  1128,  2879,
     510,  3264,   631,   349,   514,   142,   589,   590,   637,   530,
    2899,  3108,   615,   534,   371,  1933,   330,   374,   371,   505,
      17,   374,   212,   371,   482,   629,   374,   630,   371,  3331,
     556,   374,  3334,  3335,    17,   371,   615,   551,   374,  1957,
    3137,  3138,   188,  3888,  3889,  3890,   629,   154,  1178,  3351,
     563,   630,  1182,  2137,   417,     6,  1971,   305,   306,  2143,
     581,  3158,   310,   311,   308,  1980,  1981,  3426,  2054,  3230,
    3426,    11,   598,   388,   440,   438,  1991,  1992,  1993,  1994,
     629,  1996,  1997,  2069,   517,   629,   585,   402,   607,   608,
     280,   630,   631,  2079,   143,   630,   631,  2181,   371,   499,
     500,   374,   502,   240,   504,  1299,   469,   615,  1302,  2193,
     354,  1305,   631,   630,   631,  3276,   516,   630,   576,   191,
     371,   540,   630,   374,   371,   429,   430,   374,   341,   629,
      25,   630,   631,   629,   371,  3276,   629,   374,   371,   629,
     414,   374,   124,   637,   141,    25,  3448,   629,  3309,   629,
     543,  2137,   371,    59,    60,   374,  2824,  2143,   141,  2145,
     618,   507,  2148,   477,   478,    71,   615,   357,  3309,  2155,
    2156,  2157,  2158,   629,   520,  2161,   629,   615,   630,   631,
    4007,   630,   341,   629,   615,   371,    81,   371,   374,  2148,
     374,   563,   630,   371,   629,  2181,   374,   371,  2282,   630,
     374,    81,   184,   615,    21,   342,   371,  2193,   629,   374,
     630,   631,   629,   615,   630,   631,   371,    34,   630,   374,
    4047,  4048,   615,   629,  4051,  4052,  4053,  4054,  2312,   171,
     212,    48,   629,  2808,  2767,  4040,   615,  2155,  2156,  2157,
     629,   371,    59,    60,   374,   629,   341,   515,  3868,  3869,
     631,   630,  2827,  2828,  2829,  2937,   630,   631,   615,  3293,
    3294,   371,   615,   455,   374,   371,   612,   615,   374,   630,
     631,   515,   615,   630,   630,   631,   585,   630,   158,   615,
     175,   362,   630,  3380,   629,   371,  2968,   630,   374,  4134,
    3769,  3770,   399,    19,   630,   175,  2282,  2979,   280,   371,
    2982,   629,   374,   371,    16,    17,   374,   621,   622,   623,
     624,   625,   626,   627,   421,   371,    59,    60,   374,  3071,
    2756,  2307,   371,   630,   631,   374,  2312,   540,   629,   733,
    4157,  4158,   629,   330,  3223,   629,   231,   177,  3260,  4166,
     629,  2327,   615,   103,   629,   482,   453,   330,   629,   753,
    3511,   231,   629,   566,  3036,   403,   600,   630,   630,   631,
     629,   124,   766,   767,   615,   629,  3260,    32,   615,  3424,
    3511,  3588,  3589,   563,  2360,   357,   629,   103,   615,   630,
    2366,   540,   615,   630,  3601,  4068,   629,   595,   596,   629,
     598,  3608,   600,   630,  2478,  2479,   615,  2383,  4018,   630,
     631,   629,  4022,   510,   630,   631,   629,   566,   630,   631,
     547,   630,  2398,   308,   630,   631,   629,  3634,  3635,   629,
      63,   184,   631,   630,   631,  2411,   629,  2413,   308,   615,
     156,   615,   630,   631,   160,   629,    79,   615,   629,   576,
     630,   615,   630,   631,   630,   540,   630,   124,    91,  2435,
     615,   362,   630,   348,   629,  2441,   630,  2443,  2444,   354,
     615,   187,  3556,   189,   369,  2549,   630,   631,   348,   629,
     629,   566,   232,   629,   354,   630,   141,  1795,   204,  1797,
     477,   478,    12,  2469,   210,   615,   629,   543,  3464,   249,
     630,   631,  2478,  2479,   477,   478,  2411,   629,   224,   530,
     630,   261,   630,   631,   629,   615,   232,   184,   629,   615,
     350,   351,   629,   239,   629,   497,   356,   280,   630,   631,
     630,   629,   141,   249,   630,   629,  1844,  1845,  1846,   615,
     629,    26,  2518,   629,   629,   261,   455,  2523,   630,   631,
     266,   629,  2528,   615,   630,   188,  2532,   615,  2534,   275,
     193,   630,   631,   630,   631,   630,   631,  2519,  2544,   615,
    2546,  2547,   630,  2549,  4184,  4185,   615,  2529,    16,    17,
    2556,   629,  2558,  2535,   141,   629,    71,   242,   630,   631,
     340,   563,  2568,   630,   631,   228,    81,   630,   631,    63,
     122,  2577,   630,   631,   357,  2557,    36,   629,  2584,  2585,
     265,  2563,   110,   280,  2590,    79,   629,  2569,  2570,   252,
     140,   629,   531,  2599,   340,   630,   631,    91,   537,  4110,
     515,  2536,  2537,   620,   621,   622,   623,   624,   625,   626,
     627,   629,   127,    12,   629,   515,   362,   620,   621,   622,
     623,   624,   625,   626,   627,   629,   372,  2562,   150,   151,
    2568,   630,   631,  4458,   630,   631,   630,   631,   629,  3234,
     630,   631,   581,    42,   629,   330,   629,  2653,  2654,    81,
     118,   119,   120,   121,   122,  2590,   629,   117,   404,   598,
     357,    11,   629,   213,   124,   350,   351,   219,  2603,  2604,
     629,  2606,   452,  2608,  2609,  2610,  2611,  2612,  2613,  2614,
     630,   631,  2617,   629,  2619,   600,   214,  2622,   630,   631,
    3146,   330,   630,   631,   188,  3256,   629,    96,   558,   193,
     600,   629,   101,   630,   631,   220,   452,   222,  4533,   629,
    1100,  1101,  1102,   124,   574,  2653,  3625,   177,   630,   631,
     630,   631,   630,   631,   184,   388,   158,  1117,   474,   362,
    3186,   631,   629,   570,   228,   141,   516,   252,   629,   402,
     629,   426,   224,   330,     6,   630,   631,   491,   216,   217,
     218,   219,   212,    49,   591,   592,   630,  3897,   252,  1149,
     110,   277,  1152,   630,   631,   630,   631,    49,   320,   631,
     516,  2777,   324,   184,  2780,  2781,  2782,  2783,   128,   331,
     563,  1171,  1172,  2789,   362,  1175,   630,   631,   362,  4300,
     630,   631,   477,   478,   460,    57,   630,   631,    81,   231,
     572,   212,  2808,  1193,  1194,  2811,   624,   492,   637,   220,
    3806,   637,    95,  3715,  3716,   474,  3812,   167,  2824,   166,
     280,  2827,  2828,  2829,  1179,  1180,   572,  3240,  3241,  3199,
    3200,   494,  3946,   124,  2840,   350,   351,   485,   584,   585,
     629,   356,  3493,  3494,   194,   244,  2950,   362,   160,   161,
     378,  2789,   320,  3406,   322,   323,   324,  4038,   604,   411,
     606,   389,   266,   331,   189,   511,   563,  2873,   396,   280,
     975,   976,   977,   530,  3435,   511,   277,  4038,   983,   984,
     157,   341,   144,   195,   630,   631,   189,   402,   634,   635,
     477,   478,   352,   184,   206,    90,   356,   357,   631,   363,
     631,   526,  4413,   371,  4415,  2840,   374,   630,   402,   156,
     573,   127,   464,   113,   636,     6,   348,   124,   317,   629,
     127,   212,   354,   112,   330,  2931,   276,  4041,  2934,  2935,
    4441,  2937,     4,   245,   465,   620,   621,   622,   623,   624,
     625,   626,   627,   411,  2950,   257,   357,  2953,   598,   499,
     500,   501,   502,   503,   504,   470,   242,   631,   388,    56,
     432,   489,  2968,   171,   113,   221,   516,   124,  4479,  4480,
     631,   254,   284,  2979,    12,   631,  2982,   184,    71,   637,
     603,   380,   540,   622,   623,   624,   625,   626,   627,   280,
     630,   423,   630,  3422,  3423,   463,   464,   140,  3004,     9,
     494,  3007,   631,   637,   630,   212,  3012,    13,   630,    15,
     637,   629,   265,   637,    81,   631,  2951,   158,   277,   636,
     277,  3027,    89,   277,  2959,  3031,   277,   184,    49,    35,
    3036,   277,   344,   620,   621,   622,   623,   624,   625,   626,
     627,   277,   631,    49,    50,   328,   113,  4161,  3027,   530,
     602,    57,   629,   581,   404,   212,    62,    63,   573,   272,
     631,   387,   631,  3069,   551,   617,   357,   631,  4249,  3007,
     353,   477,   478,   280,   551,   631,   160,    83,  3084,   573,
     540,   103,   631,   515,   544,  3091,   631,   547,  4249,   351,
      71,   158,  4088,   631,   493,   511,   102,  3103,   558,   624,
    3783,  3784,  3785,   563,  4013,    55,   566,   242,   528,   243,
     179,   189,   631,   166,  4005,    65,   511,   123,   110,   488,
     391,   136,   472,   280,    19,   131,   132,   133,   527,   362,
      80,    26,   415,  3562,   602,   631,   568,   143,   144,  3243,
     390,  3076,    92,    93,    94,   630,   579,   615,   616,   617,
     357,   631,   563,  3091,   416,   505,   418,   610,   108,   584,
     194,   228,   622,   623,   170,   362,   362,   191,   600,   362,
     631,   630,   630,   630,  3180,   167,    71,   624,   630,   630,
     186,   531,  3188,   191,   630,  3738,    81,   630,   630,  4329,
    1580,  3752,    60,   631,   623,    36,   202,   631,   629,   631,
     357,   207,   194,   630,   630,   211,  3212,   630,   630,   630,
     232,   572,   631,   630,   475,   630,   622,   623,   624,   625,
     626,   627,   505,   630,  3230,  3231,   629,   249,  3234,   235,
     627,   237,   127,   629,   551,   629,   228,  3243,  4147,   261,
     307,   630,   604,  3249,  3841,   631,   114,   253,   598,   117,
    3256,  3257,    84,  3188,    86,   230,   631,   125,   325,   629,
      12,   629,   522,   202,   191,   271,   637,   263,   631,   275,
    3276,   629,   563,   629,   142,  1665,   117,   631,   637,  1669,
     637,   348,  3288,   124,   276,   637,   191,   630,   169,  4429,
     456,   412,  3298,   577,  3300,   127,   631,   474,   631,   631,
     110,  1691,   197,  3309,   189,    47,   338,   103,    79,  3315,
     465,  3317,  4493,  3319,   505,   505,   148,   185,   340,   505,
     505,   505,   388,   388,   388,   220,   551,   222,   136,  3903,
     250,   250,  4493,   531,  3438,  4516,   177,   531,   136,   388,
     362,    47,  4523,   184,  4340,  4341,   388,  4343,  4529,  3778,
    3779,   183,  3781,  3782,   435,  4516,   563,   252,   386,   388,
     189,   367,  4523,   388,   629,   388,   160,   160,  4529,   319,
     160,   212,   240,   160,   160,   160,   160,   160,   384,   160,
     524,   525,   388,   193,   528,   529,   336,   160,   532,  3395,
     534,   160,   160,   399,   160,   160,   160,  3950,  4394,   160,
    4396,  4397,   160,   160,   410,   160,   563,   399,   631,   160,
     276,   629,   404,   585,   154,  3421,  3422,  3423,   228,   630,
    3426,   630,  3526,   637,   238,   238,   432,   637,   630,   435,
     452,   437,  3438,   637,   440,   551,   232,   443,   444,   280,
      19,   551,   630,   630,   551,   451,   540,   453,   515,   630,
    3385,   630,   630,   249,   460,   350,   351,   631,  4454,   611,
     466,   356,   637,   631,   531,   261,   276,   362,   474,   272,
      87,   339,    47,   479,   342,   481,   629,  3412,   484,   629,
     472,  4125,  4056,   551,   629,   160,   369,   160,   191,  4491,
     191,   191,   239,   191,   516,   540,   540,   246,   631,   417,
     341,  3507,   169,   357,   510,  3511,  3610,   402,   514,   182,
     249,   249,   462,   375,   321,   356,   357,   113,   113,   252,
    3526,   252,   195,   637,   103,   551,   629,   629,   629,   368,
     204,   540,   449,   206,   629,   388,   372,   637,   624,   531,
     629,   629,   624,   240,   340,   537,   240,   630,   380,   606,
     630,   419,   637,   559,    12,    13,  3562,   630,   362,   630,
     630,   224,   267,   388,   556,   571,   362,   630,   518,   575,
     630,   630,   578,  3579,  4127,   470,   630,   156,   584,   629,
     631,   160,   255,  3687,   257,   631,   536,  4148,   191,   581,
    3572,   630,   424,   630,   118,   119,   120,   121,   122,   578,
     242,   637,   417,   630,  3610,   249,   598,   613,   249,   362,
     189,   284,   630,   619,   631,   631,   629,  4526,   252,   252,
     631,   400,    81,   629,   631,   204,   629,   631,   630,    19,
    3636,   210,   362,   362,   631,   630,   629,  3643,   362,   362,
    3646,   491,    47,   466,   102,   630,   629,   629,   266,   629,
    3754,   629,   468,   232,   630,   606,   452,   630,  3664,   202,
     239,   141,   472,   417,   147,   259,   630,   204,   631,   249,
     249,   815,   249,   131,   347,   476,  3611,   631,   573,   547,
     629,  3687,   261,   127,   494,   127,   144,   266,   629,   398,
     637,    85,   216,   217,   218,   219,   275,    13,   143,   540,
     141,   227,   484,   544,   630,   461,   547,   630,   576,   167,
     631,   491,   170,    19,   630,   630,   630,   558,  3653,   630,
     516,   531,   563,   181,   534,   566,   630,   537,   401,   630,
      34,    34,   357,    60,  3740,  4379,   240,   630,   630,   630,
     630,   327,   254,   412,   202,   275,     6,   369,  3754,   606,
     239,   629,   629,    13,   630,    15,   631,   637,    47,  3765,
     210,   340,   242,   573,   631,   327,    26,    27,   585,   629,
     228,   581,  3778,  3779,   585,  3781,  3782,   235,   629,   304,
     629,   622,   623,   362,   629,   629,   102,   630,    14,   629,
     595,   629,   127,   372,    19,   595,   320,    57,   322,   323,
     324,   242,    62,    63,   578,  3909,   252,   331,   356,    69,
      34,   630,   252,   631,  4388,   131,   169,   275,   456,   357,
     629,    81,  3828,   173,   327,   404,    17,   540,   144,    89,
     540,   252,   631,   540,   362,   534,   239,   629,  4391,    99,
    4484,   589,   585,   352,   585,   590,   606,  3853,  3854,   509,
     330,   167,   629,   113,   170,   357,   449,   169,   630,  3865,
      12,    13,   137,   369,   578,   181,    81,   127,   521,   189,
     130,   155,    31,   452,  4518,   603,   638,   137,   138,   629,
      95,   189,   383,   629,   144,   629,   202,   411,    61,   330,
    3896,   542,   152,  3828,   630,   474,   156,   136,   158,   136,
     158,    73,   629,  3909,   630,   630,   404,  4460,   425,   630,
     630,   603,   228,   191,    31,    63,  3854,   369,    63,   235,
     135,   522,   268,   631,    47,    47,   630,   187,     5,   362,
    3936,   362,   239,   629,   629,   154,   629,   516,   135,   463,
     464,   522,   369,   369,   635,   143,   629,   405,    47,    47,
     102,   409,  3958,   153,    47,   578,   131,  3963,  3896,   275,
     220,   154,   222,   603,   223,   282,   226,   425,   228,   635,
     638,   126,   149,  4208,   456,   433,   236,  4530,    47,   131,
     629,    47,    47,   441,   630,   252,  3992,  3993,  4223,    53,
     635,   251,   144,   572,   458,   631,   154,   477,   478,   221,
     630,   543,   631,  4238,   207,   631,   585,   635,   466,    47,
     630,   630,    53,   189,   439,   167,   631,   224,   170,   189,
     189,   479,   480,   543,   127,   604,   357,   606,   190,   181,
     629,   605,  4038,   631,  2319,   474,   477,   478,  4044,   254,
    3968,  3651,  2621,  3399,  2507,   658,   959,   307,  3662,  3998,
     202,   630,   631,  4128,  4320,   634,   635,  1019,  4162,  4321,
    3660,  3664,  3852,  4518,  4070,   325,  4072,   525,  4074,   329,
    4471,  4006,    46,  2824,  1840,  3838,   228,   577,   602,  3838,
    3838,  3838,  4481,   235,  3838,  3838,  3838,  3838,  3838,   405,
    3838,  4359,   616,   617,   675,  4201,  4102,  3838,   556,   680,
    4359,  4313,  3838,  3838,  1059,  1514,  4227,   367,  4226,   425,
    1765,  4003,   372,   328,  2068,  2977,  1516,   433,  1526,   379,
     578,   381,   580,   275,  2803,   441,  2366,  4362,   388,   389,
    4136,  3212,  4044,  1332,   715,   350,   351,  4372,   353,  4151,
     620,   621,   622,   623,   624,   625,   626,   627,  3897,  3509,
     466,   732,  4429,  4337,  4388,   517,  4162,  1550,  4056,  3669,
     420,  3077,  4168,   479,   480,  4269,  2061,  2654,  3319,  2587,
    2069,  3298,  3307,  4356,   434,   435,   436,   437,  3129,   620,
     621,   622,   623,   624,   625,   626,   627,  3342,  3950,  3804,
    4425,  3376,   773,   774,   775,   776,  3621,   457,  4148,  3610,
     415,  4136,  2478,    11,   785,    11,  4078,  4184,  4443,   525,
    4445,  4185,  4009,  1564,  4018,  4022,  2153,  4452,  3865,  3812,
    4155,  4156,  2068,  3300,   633,  1473,  2580,  4233,  4463,  1945,
     989,  4335,  2457,  3576,  2378,  4233,  2079,  1546,  3299,  1833,
     556,  2789,  2353,  4249,  1525,  2275,  3207,  2402,   909,  3840,
     601,  1851,  3188,   405,  3948,   515,  2185,   409,  2767,  2189,
    4495,  4496,   578,  4269,   580,  4500,  3266,  2470,  2274,  3921,
     225,   531,  1144,   425,  4284,   535,  3772,  3395,  4284,  4285,
    4285,   433,  1117,  2873,  2300,   866,  3309,  3766,  4460,   441,
     505,  3754,  2158,  2576,   554,  1315,  2382,  2407,  1345,   559,
    2347,  3511,  3276,  3225,  4249,  3224,   591,  1573,   671,  1928,
     576,  1420,   572,  2449,   466,  1929,  1785,  3210,  3317,   576,
    1351,  4381,  4427,  4347,  4276,  4260,  4261,   479,   480,  4335,
     285,   286,   287,   288,   289,   290,  4523,   292,   293,   294,
     295,   296,   297,   298,   299,   300,  3612,   302,   303,  4529,
    3230,  2432,  3256,  1718,   575,  3257,  1877,   575,  4364,  2425,
    1379,  2418,  2424,   569,  1814,  4371,  3886,  1307,  1369,   891,
    2777,  3892,  1555,   525,   570,   635,   513,   896,   513,   658,
      -1,   658,   658,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   556,    -1,    -1,    -1,  4512,    -1,
      26,    27,    -1,    -1,    -1,    -1,    -1,    -1,  4353,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   578,    -1,   580,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  4442,    -1,    -1,    -1,
      -1,  4447,    -1,    59,    60,    -1,    62,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    71,    -1,    -1,    -1,    -1,
    1041,    -1,    -1,    -1,    -1,    81,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    89,   429,   430,    -1,    -1,  4484,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4493,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   113,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  4512,    -1,    -1,    -1,
    4516,   127,  4518,    -1,   130,  1096,  1097,  4523,    -1,    -1,
      -1,    -1,    -1,  4529,  1105,  1106,  1107,  1108,  1109,  1110,
    1111,  1112,  1113,  1114,  1115,  1116,    -1,    -1,    -1,    -1,
      -1,    -1,   158,  1124,  1125,    -1,  1127,    -1,  1129,    -1,
      -1,    -1,  1133,    -1,    -1,  1136,  1137,  1138,  1139,    -1,
    1141,  1142,  1143,    -1,    -1,    -1,    -1,    -1,    -1,  1150,
    1151,    -1,  1153,  1154,  1155,  1156,  1157,    -1,    -1,  1160,
    1161,  1162,  1163,  1164,  1165,  1166,  1167,  1168,  1169,  1170,
      -1,    -1,  1173,  1174,    -1,    -1,  1177,    -1,    -1,    -1,
    1181,    -1,  1183,  1184,   220,    -1,   222,    -1,    -1,    -1,
      -1,    -1,   228,    -1,  1195,  1196,    -1,    -1,    -1,    -1,
     236,    -1,  1203,    -1,    -1,    -1,    -1,    -1,    -1,  1210,
    1211,  1212,    -1,  1214,    -1,   251,    -1,    -1,    -1,    -1,
    1221,  1222,  1223,    -1,  1225,  1226,  1227,  1228,  1229,    -1,
    1231,  1232,  1233,  1234,  1235,  1236,  1237,  1238,    13,    -1,
      15,  1242,  1243,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    31,    -1,    -1,    -1,
      35,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   307,    -1,    34,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    57,    -1,    -1,    -1,    -1,    62,    63,   325,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    67,    -1,    83,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1319,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   102,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   379,    -1,   381,    -1,    -1,   123,    -1,
      -1,    -1,    -1,   389,    -1,    -1,   131,   132,   133,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   143,   144,
      -1,    -1,    -1,   134,    -1,    -1,    -1,    -1,  1379,    -1,
      -1,   156,    -1,    34,    -1,    -1,    -1,    -1,  1389,    -1,
      -1,    -1,    -1,    -1,    -1,   170,    -1,   158,    -1,    -1,
      -1,   162,    -1,  1404,    -1,    -1,    -1,  1408,    -1,    -1,
      -1,   186,    -1,    -1,    -1,    -1,    67,    -1,    -1,    -1,
      -1,   457,    -1,    -1,    -1,    -1,    -1,   202,    -1,    -1,
      -1,    -1,   207,    -1,    -1,   196,   211,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   215,    -1,    -1,    -1,    -1,    -1,
     235,  1462,   237,    -1,    -1,    -1,    -1,    -1,   229,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   253,   515,
      -1,    -1,    -1,   134,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   531,   271,    -1,    -1,   535,
     275,    -1,    -1,    -1,   680,    -1,    -1,   158,    -1,    -1,
      -1,   162,    -1,    -1,    -1,  1516,   277,    -1,   554,    -1,
      -1,    -1,    -1,    -1,    26,    27,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   572,    -1,    -1,   715,
     301,    -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   732,    59,    60,    -1,
      62,    -1,    -1,    -1,   215,    -1,    -1,    -1,    -1,    71,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   229,    81,
      -1,    -1,    -1,    -1,    -1,  1586,    -1,    89,    -1,    -1,
      -1,    -1,   367,    -1,    -1,   631,    -1,    -1,    -1,    -1,
     776,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   384,
      -1,   113,    -1,   388,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   399,   127,   277,    -1,   130,    -1,
      -1,    -1,    -1,    -1,    -1,   410,    -1,    -1,    -1,    -1,
      -1,    -1,   403,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     301,   412,    -1,    -1,    -1,    -1,   158,   432,    -1,    -1,
     435,    -1,   437,    -1,    -1,   440,   427,    -1,   443,   444,
      -1,    -1,    -1,    -1,    -1,    -1,   451,    -1,   453,    -1,
      -1,    -1,    -1,    -1,   445,   460,    -1,    -1,    -1,    -1,
     866,   466,    -1,    -1,    -1,    -1,  1697,  1698,  1699,   474,
      -1,    -1,    -1,    -1,   479,    -1,   481,    -1,    -1,   484,
    1711,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   220,    -1,
     222,    -1,    -1,   484,    -1,   486,   228,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   236,   510,  1737,    -1,    -1,   514,
      -1,    -1,  1743,    -1,    -1,  1746,    -1,  1748,    -1,   251,
     511,    -1,   403,  1754,    -1,  1756,  1757,    -1,    -1,    -1,
      -1,   412,    -1,   265,    -1,    -1,    -1,    -1,    -1,   530,
      -1,    -1,   533,   534,    -1,    -1,   427,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   559,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   445,    -1,   571,    -1,    -1,    -1,
     575,    -1,    -1,   578,    -1,   307,    -1,    -1,    -1,   584,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   582,    -1,   325,    -1,    -1,    -1,  1828,    -1,    -1,
      -1,    -1,    -1,   484,    -1,   486,    -1,    -1,   613,    -1,
      -1,    -1,    -1,    -1,   619,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   629,    -1,    -1,    -1,    -1,    -1,
     511,    -1,    -1,    -1,    -1,  1041,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1875,    -1,    -1,   379,    -1,   381,
      -1,    -1,   533,  1884,    -1,    -1,    -1,   389,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1096,  1097,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1105,
    1106,   582,    -1,  1109,  1110,  1111,  1112,  1113,  1114,  1115,
    1116,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1124,  1125,
      -1,  1127,    -1,  1129,    -1,   457,    -1,    -1,    -1,    -1,
    1136,  1137,  1138,  1139,    -1,    -1,  1142,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1150,  1151,    -1,  1153,  1154,    -1,
      -1,    -1,    -1,    -1,  1160,  1161,  1162,    -1,    -1,  1165,
    1166,  1167,  1168,  1169,  1170,    -1,    -1,  1173,  1174,    -1,
      -1,  1177,    -1,    -1,    -1,  1181,    -1,  1183,  1184,    -1,
      -1,    -1,    -1,   515,    -1,    -1,    -1,    -1,    -1,  1195,
    1196,    -1,    -1,    -1,    -1,    -1,    -1,  1203,    -1,   531,
      -1,    -1,    -1,   535,  1210,  1211,  1212,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   554,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2061,    -1,    -1,    -1,    -1,    -1,    -1,  1243,    -1,    -1,
     572,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2094,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   629,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1319,    -1,    -1,    -1,    -1,    -1,    -1,
    2151,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2167,    -1,    -1,    -1,
    2171,    -1,    -1,    -1,    -1,  2176,  2177,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2185,    -1,  2187,    -1,  2189,  2190,
    2191,  2192,    -1,    -1,  2195,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1379,  2205,    -1,  2207,  2208,    -1,  2210,
    2211,  2212,  2213,  1389,  2215,    -1,    -1,  2218,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2227,    -1,  1404,    -1,
      -1,    -1,  1408,  2234,    -1,  2236,    -1,  2238,  2239,  2240,
    2241,    -1,    -1,    -1,  2245,  2246,  2247,    -1,    -1,    12,
    2251,  2252,  2253,    -1,  2255,    -1,  2257,    -1,  2259,    -1,
    2261,    24,  2263,    -1,    -1,    -1,    -1,  2268,    -1,    -1,
      -1,    34,    35,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2283,    -1,    -1,    -1,  1462,    -1,    -1,  2290,
      -1,    -1,  2293,    -1,    -1,    -1,    59,    60,  2299,    -1,
      -1,  2302,    -1,    -1,    67,  2306,    -1,    -1,    -1,    72,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    -1,   100,    -1,   102,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    26,    27,    -1,
    2361,    -1,    -1,    -1,    -1,    -1,    -1,     6,    -1,   132,
     133,    -1,    -1,    -1,    13,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    26,    27,    -1,
      59,    60,    -1,    62,   157,   158,    -1,    -1,    -1,    -1,
     163,    -1,    71,   166,    -1,    -1,    -1,    -1,    -1,    -1,
    1586,    -1,    81,    -1,    -1,    -1,    -1,    -1,    57,    -1,
      89,    -1,    -1,    62,    -1,    -1,    -1,    -1,    -1,   192,
      -1,   194,  2433,    -1,    -1,    -1,    -1,    -1,   201,    -1,
     203,    -1,    81,    -1,   113,    -1,    -1,    -1,    -1,    -1,
      89,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   127,    -1,
      99,   130,    -1,    -1,   227,   228,   229,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   113,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   250,   127,   158,
      -1,   130,    -1,    -1,    -1,    -1,    -1,    -1,   137,    -1,
      -1,    -1,    -1,    -1,    -1,   144,    -1,    -1,    -1,   272,
      -1,    -1,    -1,   152,    -1,    -1,    -1,    -1,    -1,   158,
      -1,  1697,  1698,  1699,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   301,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   187,    -1,
      -1,   220,    -1,   222,    -1,    -1,    -1,    -1,    -1,   228,
      -1,  1737,    -1,    -1,    -1,    -1,    -1,   236,    -1,    -1,
    1746,    -1,  1748,    -1,    -1,    -1,    -1,    -1,    -1,  2580,
      -1,   220,   251,   222,    -1,    -1,    -1,    -1,    -1,   228,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   236,    -1,    -1,
      -1,    -1,    -1,   366,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   251,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   392,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   307,    -1,
     403,   404,    -1,    -1,   407,   408,    -1,    -1,    -1,    -1,
      -1,    -1,  1828,    -1,    -1,    -1,   325,  2658,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   428,    -1,    -1,   307,    -1,
      -1,    -1,    -1,    -1,  2675,    -1,    -1,    -1,  2679,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   325,    -1,    -1,    -1,
     329,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1875,
      -1,    -1,    -1,    -1,    -1,  2706,  2707,    -1,   471,    -1,
     379,    -1,   381,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     389,   484,    -1,    -1,    -1,  2726,    -1,    26,    27,    -1,
      -1,    -1,    -1,   372,  2735,    -1,  2737,    -1,  2739,    -1,
     379,    -1,   381,    -1,    -1,    -1,    -1,    -1,   511,    -1,
     389,    -1,   515,    -1,    -1,  2756,    -1,    -1,    -1,    -1,
    2761,    -1,    -1,    62,    -1,    -1,    -1,    -1,    -1,    -1,
     533,   534,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    81,    -1,  2785,    -1,    -1,    -1,   457,    -1,
      89,    -1,    -1,    -1,    -1,    -1,   435,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   113,    -1,    -1,    -1,   457,   582,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   127,    -1,
     593,   130,    -1,    -1,    -1,    -1,    -1,    -1,   601,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   515,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2855,    -1,    -1,    -1,    -1,   158,
      -1,    -1,   531,    -1,    -1,    -1,   535,    33,    34,    -1,
      -1,    -1,    -1,    39,    -1,    41,   515,    43,    44,    -1,
      -1,    -1,    -1,    -1,    -1,   554,    -1,    -1,    -1,    -1,
      -1,    -1,   531,    -1,    60,    -1,   535,    -1,    -1,    -1,
      -1,    -1,    -1,   572,    -1,  2906,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   554,    -1,    -1,  2094,    -1,
      -1,   220,    -1,   222,    -1,    -1,    -1,    -1,    -1,   228,
      -1,    -1,    -1,   572,    -1,    -1,    -1,   236,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   114,    -1,
      -1,   117,   251,    -1,    -1,    -1,    -1,    -1,    -1,   125,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   142,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2167,    -1,   159,    -1,  2171,    -1,    -1,    -1,    -1,
    2176,  2177,    -1,    -1,    -1,    -1,    -1,    -1,   307,  2185,
      -1,  2187,    -1,  2189,    -1,  2191,  2192,   183,    -1,   185,
      -1,    -1,    -1,  3024,  3025,    -1,   325,    -1,    -1,  2205,
      -1,  2207,   198,   199,  2210,  2211,  2212,  2213,    -1,  2215,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2227,    -1,    -1,    -1,    -1,    -1,    -1,  2234,    -1,
    2236,    -1,  2238,  2239,  2240,    -1,    -1,    -1,    -1,  2245,
    2246,  2247,    -1,    -1,   240,  2251,  2252,  2253,    -1,  2255,
     379,  2257,   381,  2259,    -1,  2261,    -1,  2263,    -1,    -1,
     389,    -1,  2268,    -1,    -1,    -1,    -1,  3098,    -1,    -1,
      -1,    -1,    -1,   269,    -1,    -1,    -1,  2283,    -1,    -1,
    3111,    -1,   278,   279,    -1,   281,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2299,    -1,    -1,  2302,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3143,  3144,    -1,  3146,    -1,   313,   314,   315,
      -1,    -1,    -1,    -1,  3155,    -1,    -1,    -1,   457,  3160,
      -1,    -1,  3163,    -1,  3165,  3166,   332,   333,   334,    -1,
      -1,    -1,    -1,   339,    -1,    -1,   342,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3186,    -1,    -1,    -1,    -1,
      -1,    -1,   358,   359,    -1,    -1,    -1,    -1,    -1,    -1,
    3201,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   515,    -1,    -1,    -1,
      -1,    -1,    -1,  3224,    -1,    -1,    -1,    -1,   394,   395,
      -1,    -1,   531,    -1,    -1,    -1,   535,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   419,    -1,   554,    -1,  2433,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   572,    -1,    -1,    -1,  3278,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3287,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   470,    -1,    -1,    -1,   474,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   487,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3369,    -1,
      -1,    -1,    -1,    -1,    -1,   541,    -1,    -1,   544,    -1,
      -1,   547,   548,   549,   550,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   591,   592,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   617,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2675,
      -1,    -1,    -1,  2679,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3512,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2706,  2707,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3545,  3546,    -1,    -1,    -1,    -1,
    2726,    -1,    -1,  3554,    -1,    -1,    -1,    -1,    -1,  2735,
      -1,  2737,    -1,  2739,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2785,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3621,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3669,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2855,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3704,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2906,    -1,    -1,    -1,  3735,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3749,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3838,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3024,  3025,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3864,    -1,    -1,    -1,  3868,  3869,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3897,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3907,    -1,    -1,    -1,
      -1,    -1,  3913,    -1,  3915,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3111,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3955,    -1,    -1,    -1,    -1,    -1,
    3961,  3962,    -1,    -1,    -1,    -1,    -1,  3143,  3144,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3155,
      -1,    -1,    -1,    -1,  3160,    -1,    -1,  3163,    -1,  3165,
    3166,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4009,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4018,    -1,    -1,
      -1,  4022,    -1,    -1,    -1,  3201,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3224,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4061,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4080,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4095,    -1,  4097,    -1,    -1,    -1,
      -1,    -1,  3278,    -1,    -1,    -1,  4107,    -1,  4109,  4110,
      -1,  3287,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4139,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4182,    -1,  4184,  4185,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  4206,    -1,  4208,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  4223,  4224,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4238,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4250,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4299,  4300,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4312,  4313,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4329,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3512,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4362,    -1,    -1,    -1,    -1,    -1,    -1,  4369,  3545,
    3546,  4372,    -1,    -1,    -1,    -1,    -1,    -1,  3554,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  4406,    -1,    -1,    -1,    -1,
      -1,    -1,  4413,    -1,  4415,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4425,    -1,    -1,    -1,  4429,    -1,
      -1,  4432,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4441,    -1,  4443,    -1,  4445,    -1,    -1,    -1,    -1,    -1,
      -1,  4452,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  4463,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4479,  4480,
      -1,    -1,    -1,    -1,  4485,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4495,  4496,    -1,    -1,    -1,  4500,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3704,    -1,
      -1,  4532,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3735,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3749,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3907,    -1,    -1,    -1,    -1,    -1,  3913,    -1,  3915,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3955,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  4061,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4095,
      -1,  4097,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4107,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4206,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4224,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4250,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  4299,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  4369,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4406,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  4432,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      21,    -1,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    -1,    -1,    34,    35,    36,    37,    38,    39,    40,
      -1,    42,    43,    44,    45,    46,    -1,    48,    49,  4485,
      -1,    52,    53,    54,    55,    56,    -1,    58,    59,    60,
      61,    62,    -1,    64,    65,    66,    67,    68,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    -1,    80,
      81,    82,    83,    84,    85,    86,    87,    -1,    89,    90,
      -1,    92,    93,    94,    95,    96,  4532,    98,    99,   100,
     101,    -1,    -1,   104,   105,   106,    -1,   108,   109,   110,
      -1,   112,   113,   114,   115,   116,   117,    -1,    -1,    -1,
      -1,   122,   123,   124,    -1,    -1,   127,   128,    -1,   130,
      -1,    -1,    -1,   134,    -1,   136,   137,   138,   139,    -1,
      -1,    -1,   143,    -1,    -1,   146,   147,   148,    -1,    -1,
      -1,   152,    -1,   154,   155,    -1,   157,   158,   159,    -1,
      -1,   162,   163,    -1,   165,   166,   167,   168,   169,   170,
     171,    -1,   173,   174,   175,   176,   177,   178,   179,    -1,
     181,   182,   183,   184,    -1,   186,    -1,    -1,    -1,   190,
      -1,   192,    -1,   194,    -1,   196,   197,   198,   199,   200,
     201,    -1,   203,    -1,   205,    -1,   207,   208,   209,    -1,
     211,   212,    -1,   214,   215,    -1,    -1,    -1,   219,   220,
     221,   222,   223,    -1,   225,   226,   227,    -1,   229,    -1,
     231,    -1,    -1,    -1,   235,   236,   237,   238,    -1,    -1,
     241,    -1,   243,   244,    -1,   246,   247,    -1,    -1,    -1,
     251,    -1,    -1,   254,   255,   256,    -1,   258,   259,    -1,
     261,   262,   263,    -1,    -1,    -1,    -1,    -1,   269,   270,
      -1,   272,    -1,   274,    -1,   276,   277,    -1,    -1,   280,
      -1,    -1,    -1,    -1,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,    -1,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,    -1,    -1,    -1,    -1,   316,   317,   318,   319,   320,
     321,    -1,    -1,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,    -1,
     341,   342,   343,    -1,    -1,   346,   347,   348,   349,   350,
     351,   352,   353,   354,    -1,   356,   357,    -1,   359,   360,
     361,    -1,   363,   364,   365,   366,    -1,   368,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   378,   379,   380,
      -1,   382,   383,    -1,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,    -1,   399,   400,
     401,    -1,   403,    -1,   405,   406,   407,   408,   409,    -1,
     411,   412,   413,    -1,    -1,   416,    -1,    -1,    -1,   420,
     421,   422,   423,   424,    -1,    -1,   427,   428,   429,   430,
     431,    -1,   433,   434,    -1,   436,   437,   438,   439,   440,
     441,    -1,   443,    -1,   445,   446,    -1,   448,   449,    -1,
      -1,   452,   453,   454,   455,   456,   457,   458,   459,   460,
     461,   462,    -1,   464,   465,    -1,    -1,    -1,   469,   470,
     471,   472,    -1,    -1,    -1,   476,    -1,    -1,    -1,   480,
      -1,   482,   483,   484,   485,   486,    -1,   488,   489,   490,
     491,   492,   493,    -1,    -1,    -1,    -1,    -1,    -1,   500,
     501,    -1,   503,    -1,    -1,   506,    -1,    -1,   509,   510,
     511,   512,   513,   514,   515,    -1,   517,   518,   519,   520,
     521,   522,   523,   524,   525,   526,   527,   528,   529,   530,
     531,    -1,   533,    -1,   535,   536,   537,   538,    -1,   540,
     541,   542,    -1,   544,   545,   546,   547,    -1,    -1,    -1,
      -1,   552,   553,   554,   555,    -1,   557,   558,   559,   560,
     561,   562,   563,   564,   565,   566,   567,   568,    -1,   570,
     571,    -1,    -1,   574,    -1,    -1,   577,    -1,   579,    -1,
     581,   582,   583,    -1,    -1,   586,   587,   588,   589,   590,
      -1,    -1,   593,   594,    -1,   596,   597,   598,   599,   600,
     601,   602,    -1,    -1,    -1,    -1,    -1,    -1,   609,   610,
      -1,   612,   613,   614,    -1,    -1,   617,    -1,    -1,    -1,
      -1,   622,   623,    -1,    -1,    -1,    -1,   628,   629,    -1,
      -1,   632,   633,    -1,    -1,   636,   637,     5,    -1,     7,
       8,     9,    10,    11,    12,    -1,    14,    -1,    -1,    -1,
      18,    -1,    -1,    21,    -1,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    -1,    -1,    34,    35,    36,    37,
      38,    39,    40,    -1,    42,    43,    44,    -1,    46,    -1,
      48,    49,    -1,    -1,    52,    53,    54,    55,    56,    -1,
      58,    59,    60,    61,    62,    -1,    64,    65,    66,    67,
      68,    69,    70,    -1,    72,    73,    74,    75,    76,    77,
      78,    -1,    80,    81,    82,    83,    84,    85,    86,    87,
      -1,    89,    90,    -1,    92,    93,    94,    95,    96,    -1,
      98,    99,   100,   101,    -1,    -1,   104,   105,   106,    -1,
     108,   109,   110,    -1,   112,   113,   114,   115,   116,   117,
      -1,    -1,    -1,    -1,   122,   123,   124,    -1,    -1,   127,
     128,    -1,   130,    -1,    -1,    -1,   134,    -1,   136,   137,
     138,   139,    -1,    -1,    -1,   143,    -1,    -1,   146,   147,
     148,    -1,    -1,    -1,   152,    -1,   154,   155,    -1,   157,
     158,   159,    -1,    -1,   162,   163,    -1,   165,   166,   167,
     168,   169,   170,   171,    -1,   173,   174,   175,   176,   177,
     178,   179,    -1,   181,   182,   183,   184,    -1,   186,    -1,
      -1,    -1,   190,    -1,   192,    -1,   194,    -1,   196,   197,
     198,   199,   200,   201,    -1,   203,    -1,   205,    -1,   207,
     208,   209,    -1,   211,   212,    -1,   214,   215,    -1,    -1,
      -1,   219,   220,   221,   222,   223,    -1,   225,   226,   227,
      -1,   229,    -1,   231,    -1,    -1,    -1,   235,   236,   237,
     238,    -1,    -1,   241,    -1,   243,   244,    -1,   246,   247,
      -1,    -1,    -1,   251,    -1,    -1,   254,   255,   256,    -1,
      -1,   259,    -1,   261,   262,   263,    -1,    -1,    -1,    -1,
      -1,   269,   270,    -1,   272,    -1,   274,    -1,   276,   277,
      -1,    -1,   280,    -1,    -1,    -1,    -1,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,    -1,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,    -1,    -1,    -1,    -1,   316,   317,
     318,   319,   320,   321,    -1,    -1,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,    -1,   341,   342,   343,    -1,    -1,   346,   347,
     348,   349,   350,   351,   352,   353,   354,    -1,   356,   357,
      -1,   359,   360,   361,   362,   363,   364,   365,   366,    -1,
     368,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     378,   379,   380,    -1,   382,   383,    -1,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
      -1,   399,   400,   401,    -1,   403,    -1,   405,   406,   407,
     408,   409,    -1,   411,   412,   413,    -1,    -1,   416,    -1,
      -1,    -1,   420,   421,   422,   423,   424,    -1,    -1,   427,
     428,   429,   430,   431,    -1,   433,   434,    -1,   436,   437,
     438,   439,   440,   441,    -1,   443,    -1,   445,   446,    -1,
     448,   449,    -1,    -1,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   462,    -1,   464,   465,    -1,    -1,
      -1,   469,   470,   471,   472,    -1,    -1,    -1,   476,    -1,
      -1,    -1,   480,    -1,   482,   483,   484,   485,   486,    -1,
     488,   489,   490,   491,   492,   493,    -1,    -1,    -1,    -1,
      -1,    -1,   500,   501,    -1,   503,    -1,    -1,   506,    -1,
      -1,   509,   510,   511,   512,   513,   514,   515,    -1,   517,
     518,   519,   520,   521,   522,   523,   524,   525,   526,   527,
     528,   529,   530,   531,    -1,   533,    -1,   535,   536,   537,
     538,    -1,   540,   541,   542,    -1,   544,   545,   546,   547,
      -1,    -1,    -1,    -1,    -1,   553,   554,   555,    -1,   557,
     558,   559,   560,   561,   562,   563,   564,   565,   566,   567,
     568,    -1,   570,   571,    -1,    -1,   574,    -1,    -1,   577,
      -1,   579,    -1,   581,   582,   583,    -1,    -1,   586,   587,
     588,   589,   590,    -1,    -1,   593,   594,    -1,   596,   597,
     598,   599,   600,   601,   602,    -1,    -1,    -1,    -1,    -1,
      -1,   609,   610,    -1,   612,   613,   614,    -1,    -1,   617,
      -1,    -1,    -1,    -1,   622,   623,    -1,    -1,    -1,    -1,
     628,   629,    -1,    -1,   632,   633,    -1,    -1,   636,   637,
       5,    -1,     7,     8,     9,    10,    11,    -1,    -1,    14,
      -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    -1,    -1,    34,
      35,    36,    37,    38,    39,    40,    -1,    42,    43,    44,
      -1,    46,    -1,    48,    49,    -1,    -1,    52,    53,    54,
      55,    56,    -1,    58,    59,    60,    61,    62,    -1,    64,
      65,    66,    67,    68,    69,    70,    -1,    72,    73,    74,
      75,    76,    77,    78,    -1,    80,    81,    82,    83,    84,
      85,    86,    87,    -1,    89,    90,    -1,    92,    93,    94,
      95,    96,    -1,    98,    99,   100,   101,    -1,    -1,   104,
     105,   106,    -1,   108,   109,   110,    -1,   112,   113,   114,
     115,   116,   117,    -1,    -1,    -1,    -1,   122,   123,   124,
      -1,    -1,   127,   128,    -1,   130,    -1,    -1,    -1,   134,
      -1,   136,   137,   138,   139,    -1,    -1,    -1,   143,    -1,
      -1,   146,   147,   148,    -1,    -1,    -1,   152,    -1,   154,
     155,    -1,   157,   158,   159,    -1,    -1,   162,   163,    -1,
     165,   166,   167,   168,   169,   170,   171,    -1,   173,   174,
     175,   176,   177,   178,   179,    -1,   181,   182,   183,   184,
      -1,   186,    -1,    -1,    -1,   190,   191,   192,    -1,   194,
      -1,   196,   197,   198,   199,   200,   201,    -1,   203,    -1,
     205,    -1,   207,   208,   209,    -1,   211,   212,    -1,   214,
     215,    -1,    -1,    -1,   219,   220,   221,   222,   223,    -1,
     225,   226,   227,    -1,   229,    -1,   231,    -1,    -1,    -1,
     235,   236,   237,   238,    -1,    -1,   241,    -1,   243,   244,
      -1,   246,   247,    -1,    -1,    -1,   251,    -1,    -1,   254,
     255,   256,    -1,    -1,   259,    -1,   261,   262,   263,    -1,
      -1,    -1,    -1,    -1,   269,   270,    -1,   272,    -1,   274,
      -1,   276,   277,    -1,    -1,   280,    -1,    -1,    -1,    -1,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,    -1,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,    -1,    -1,    -1,
      -1,   316,   317,   318,   319,   320,   321,    -1,    -1,   324,
     325,   326,   327,    -1,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,    -1,   341,   342,   343,    -1,
      -1,   346,   347,   348,   349,   350,   351,   352,   353,   354,
      -1,   356,   357,    -1,   359,   360,   361,    -1,   363,   364,
     365,   366,    -1,   368,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   378,   379,   380,    -1,   382,   383,    -1,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,    -1,   399,   400,   401,    -1,   403,    -1,
     405,   406,   407,   408,   409,    -1,   411,   412,   413,    -1,
      -1,   416,    -1,    -1,    -1,   420,   421,   422,   423,   424,
      -1,    -1,   427,   428,   429,   430,   431,    -1,   433,   434,
      -1,   436,   437,   438,   439,   440,   441,    -1,   443,    -1,
     445,   446,    -1,   448,   449,    -1,    -1,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,    -1,   464,
     465,    -1,    -1,    -1,   469,   470,   471,   472,    -1,    -1,
      -1,   476,    -1,    -1,    -1,   480,    -1,   482,   483,   484,
     485,   486,    -1,   488,   489,   490,   491,   492,   493,    -1,
      -1,    -1,    -1,    -1,    -1,   500,   501,    -1,   503,    -1,
      -1,   506,    -1,    -1,   509,   510,   511,   512,   513,   514,
     515,    -1,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,    -1,   533,    -1,
     535,   536,   537,   538,    -1,   540,   541,   542,    -1,   544,
     545,   546,   547,    -1,    -1,    -1,    -1,    -1,   553,   554,
     555,    -1,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,    -1,   570,   571,    -1,    -1,   574,
      -1,    -1,   577,    -1,   579,    -1,   581,   582,   583,    -1,
      -1,   586,   587,   588,   589,   590,    -1,    -1,   593,   594,
      -1,   596,   597,   598,   599,   600,   601,   602,    -1,    -1,
      -1,    -1,    -1,    -1,   609,   610,    -1,   612,   613,   614,
      -1,    -1,   617,    -1,    -1,    -1,    -1,   622,   623,    -1,
      -1,    -1,    -1,   628,   629,    -1,    -1,   632,   633,    -1,
      -1,   636,   637,     5,    -1,     7,     8,     9,    10,    11,
      -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,
      -1,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      -1,    -1,    34,    35,    36,    37,    38,    39,    40,    -1,
      42,    43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,
      52,    53,    54,    55,    56,    -1,    58,    59,    60,    61,
      62,    -1,    64,    65,    66,    67,    68,    69,    70,    -1,
      72,    73,    74,    75,    76,    77,    78,    -1,    80,    81,
      82,    83,    84,    85,    86,    87,    -1,    89,    90,    -1,
      92,    93,    94,    95,    96,    -1,    98,    99,   100,   101,
      -1,    -1,   104,   105,   106,    -1,   108,   109,   110,    -1,
     112,   113,   114,   115,   116,   117,    -1,    -1,    -1,    -1,
     122,   123,   124,    -1,    -1,   127,   128,    -1,   130,    -1,
      -1,    -1,   134,    -1,   136,   137,   138,   139,    -1,    -1,
      -1,   143,    -1,    -1,   146,   147,   148,    -1,    -1,    -1,
     152,    -1,   154,   155,    -1,   157,   158,   159,    -1,    -1,
     162,   163,    -1,   165,   166,   167,   168,   169,   170,   171,
      -1,   173,   174,   175,   176,   177,   178,   179,    -1,   181,
     182,   183,   184,    -1,   186,    -1,    -1,    -1,   190,   191,
     192,    -1,   194,    -1,   196,   197,   198,   199,   200,   201,
      -1,   203,    -1,   205,    -1,   207,   208,   209,    -1,   211,
     212,    -1,   214,   215,    -1,    -1,    -1,   219,   220,   221,
     222,   223,    -1,   225,   226,   227,    -1,   229,    -1,   231,
      -1,    -1,    -1,   235,   236,   237,   238,    -1,    -1,   241,
      -1,   243,   244,    -1,   246,   247,    -1,    -1,    -1,   251,
      -1,    -1,   254,   255,   256,    -1,    -1,   259,    -1,   261,
     262,   263,    -1,    -1,    -1,    -1,    -1,   269,   270,    -1,
     272,    -1,   274,    -1,   276,   277,    -1,    -1,   280,    -1,
      -1,    -1,    -1,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,    -1,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
      -1,    -1,    -1,    -1,   316,   317,   318,   319,   320,   321,
      -1,    -1,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,   335,   336,   337,   338,   339,    -1,   341,
     342,   343,    -1,    -1,   346,   347,   348,   349,   350,   351,
     352,   353,   354,    -1,   356,   357,    -1,   359,   360,   361,
      -1,   363,   364,   365,   366,    -1,   368,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   378,   379,   380,    -1,
     382,   383,    -1,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,    -1,   399,   400,   401,
      -1,   403,    -1,   405,   406,   407,   408,   409,    -1,   411,
     412,   413,    -1,    -1,   416,    -1,    -1,    -1,   420,   421,
     422,   423,   424,    -1,    -1,   427,   428,   429,   430,   431,
      -1,   433,   434,    -1,   436,   437,   438,   439,   440,   441,
      -1,   443,    -1,   445,   446,    -1,   448,   449,    -1,    -1,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
     462,    -1,   464,   465,    -1,    -1,    -1,   469,   470,   471,
     472,    -1,    -1,    -1,   476,    -1,    -1,    -1,   480,    -1,
     482,   483,   484,   485,   486,    -1,   488,   489,   490,   491,
     492,   493,    -1,    -1,    -1,    -1,    -1,    -1,   500,   501,
      -1,   503,    -1,    -1,   506,    -1,    -1,   509,   510,   511,
     512,   513,   514,   515,    -1,   517,   518,   519,   520,   521,
     522,   523,   524,   525,   526,   527,   528,   529,   530,   531,
      -1,   533,    -1,   535,   536,   537,   538,    -1,   540,   541,
     542,    -1,   544,   545,   546,   547,    -1,    -1,    -1,    -1,
      -1,   553,   554,   555,    -1,   557,   558,   559,   560,   561,
     562,   563,   564,   565,   566,   567,   568,    -1,   570,   571,
      -1,    -1,   574,    -1,    -1,   577,    -1,   579,    -1,   581,
     582,   583,    -1,    -1,   586,   587,   588,   589,   590,    -1,
      -1,   593,   594,    -1,   596,   597,   598,   599,   600,   601,
     602,    -1,    -1,    -1,    -1,    -1,    -1,   609,   610,    -1,
     612,   613,   614,    -1,    -1,   617,    -1,    -1,    -1,    -1,
     622,   623,    -1,    -1,    -1,    -1,   628,   629,    -1,    -1,
     632,   633,    -1,    -1,   636,   637,     5,    -1,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      -1,    -1,    21,    -1,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    -1,    -1,    34,    35,    36,    37,    38,
      39,    40,    -1,    42,    43,    44,    -1,    46,    -1,    48,
      49,    -1,    -1,    52,    53,    54,    55,    56,    -1,    58,
      59,    60,    61,    62,    -1,    64,    65,    66,    67,    68,
      69,    70,    -1,    72,    73,    74,    75,    76,    77,    78,
      -1,    80,    81,    82,    83,    84,    85,    86,    87,    -1,
      89,    90,    -1,    92,    93,    94,    95,    96,    -1,    98,
      99,   100,   101,    -1,    -1,   104,   105,   106,    -1,   108,
     109,   110,    -1,   112,   113,   114,   115,   116,   117,    -1,
      -1,    -1,    -1,   122,   123,   124,    -1,    -1,   127,   128,
      -1,   130,    -1,    -1,    -1,   134,    -1,   136,   137,   138,
     139,    -1,    -1,    -1,   143,    -1,    -1,   146,   147,   148,
      -1,    -1,    -1,   152,    -1,   154,   155,    -1,   157,   158,
     159,    -1,    -1,   162,   163,    -1,   165,   166,   167,   168,
     169,   170,   171,    -1,   173,   174,   175,   176,   177,   178,
     179,    -1,   181,   182,   183,   184,    -1,   186,    -1,    -1,
      -1,   190,   191,   192,    -1,   194,    -1,   196,   197,   198,
     199,   200,   201,    -1,   203,    -1,   205,    -1,   207,   208,
     209,    -1,   211,   212,    -1,   214,   215,    -1,    -1,    -1,
     219,   220,   221,   222,   223,    -1,   225,   226,   227,    -1,
     229,    -1,   231,    -1,    -1,    -1,   235,   236,   237,   238,
      -1,    -1,   241,    -1,   243,   244,    -1,   246,   247,    -1,
      -1,    -1,   251,    -1,    -1,   254,   255,   256,    -1,    -1,
     259,    -1,   261,   262,   263,    -1,    -1,    -1,    -1,    -1,
     269,   270,    -1,   272,    -1,   274,    -1,   276,   277,    -1,
      -1,   280,    -1,    -1,    -1,    -1,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,    -1,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,    -1,    -1,    -1,    -1,   316,   317,   318,
     319,   320,   321,    -1,    -1,   324,   325,   326,   327,    -1,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,    -1,   341,   342,   343,    -1,    -1,   346,   347,   348,
     349,   350,   351,   352,   353,   354,    -1,   356,   357,    -1,
     359,   360,   361,    -1,   363,   364,   365,   366,    -1,   368,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   378,
     379,   380,    -1,   382,   383,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,    -1,
     399,   400,   401,    -1,   403,    -1,   405,   406,   407,   408,
     409,    -1,   411,   412,   413,    -1,    -1,   416,    -1,    -1,
      -1,   420,   421,   422,   423,   424,    -1,    -1,   427,   428,
     429,   430,   431,    -1,   433,   434,    -1,   436,   437,   438,
     439,   440,   441,    -1,   443,    -1,   445,   446,    -1,   448,
     449,    -1,    -1,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,    -1,   464,   465,    -1,    -1,    -1,
     469,   470,   471,   472,    -1,    -1,    -1,   476,    -1,    -1,
      -1,   480,    -1,   482,   483,   484,   485,   486,    -1,   488,
     489,   490,   491,   492,   493,    -1,    -1,    -1,    -1,    -1,
      -1,   500,   501,    -1,   503,    -1,    -1,   506,    -1,    -1,
     509,   510,   511,   512,   513,   514,   515,    -1,   517,   518,
     519,   520,   521,   522,   523,   524,   525,   526,   527,   528,
     529,   530,   531,    -1,   533,    -1,   535,   536,   537,   538,
      -1,   540,   541,   542,    -1,   544,   545,   546,   547,    -1,
      -1,    -1,    -1,    -1,   553,   554,   555,    -1,   557,   558,
     559,   560,   561,   562,   563,   564,   565,   566,   567,   568,
      -1,   570,   571,    -1,    -1,   574,    -1,    -1,   577,    -1,
     579,    -1,   581,   582,   583,    -1,    -1,   586,   587,   588,
     589,   590,    -1,    -1,   593,   594,    -1,   596,   597,   598,
     599,   600,   601,   602,    -1,    -1,    -1,    -1,    -1,    -1,
     609,   610,    -1,   612,   613,   614,    -1,    -1,   617,    -1,
      -1,    -1,    -1,   622,   623,    -1,    -1,    -1,    -1,   628,
     629,    -1,    -1,   632,   633,    -1,    -1,   636,   637,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    -1,    -1,    34,    35,
      36,    37,    38,    39,    40,    -1,    42,    43,    44,    -1,
      46,    -1,    48,    49,    -1,    -1,    52,    53,    54,    55,
      56,    -1,    58,    59,    60,    61,    62,    -1,    64,    65,
      66,    67,    68,    69,    70,    -1,    72,    73,    74,    75,
      76,    77,    78,    -1,    80,    81,    82,    83,    84,    85,
      86,    87,    -1,    89,    90,    -1,    92,    93,    94,    95,
      96,    -1,    98,    99,   100,   101,    -1,    -1,   104,   105,
     106,    -1,   108,   109,   110,    -1,   112,   113,   114,   115,
     116,   117,    -1,    -1,    -1,    -1,   122,   123,   124,    -1,
      -1,   127,   128,    -1,   130,    -1,    -1,    -1,   134,    -1,
     136,   137,   138,   139,    -1,    -1,    -1,   143,    -1,    -1,
     146,   147,   148,    -1,    -1,    -1,   152,    -1,   154,   155,
      -1,   157,   158,   159,    -1,    -1,   162,   163,    -1,   165,
     166,   167,   168,   169,   170,   171,    -1,   173,   174,   175,
     176,   177,   178,   179,    -1,   181,   182,   183,   184,    -1,
     186,    -1,    -1,    -1,   190,    -1,   192,    -1,   194,    -1,
     196,   197,   198,   199,   200,   201,    -1,   203,    -1,   205,
      -1,   207,   208,   209,    -1,   211,   212,    -1,   214,   215,
      -1,    -1,    -1,   219,   220,   221,   222,   223,    -1,   225,
     226,   227,    -1,   229,    -1,   231,    -1,    -1,    -1,   235,
     236,   237,   238,    -1,    -1,   241,    -1,   243,   244,    -1,
     246,   247,    -1,    -1,    -1,   251,    -1,    -1,   254,   255,
     256,    -1,    -1,   259,    -1,   261,   262,   263,    -1,    -1,
      -1,    -1,    -1,   269,   270,    -1,   272,    -1,   274,    -1,
     276,   277,    -1,    -1,   280,    -1,    -1,    -1,    -1,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,    -1,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,    -1,    -1,    -1,    -1,
     316,   317,   318,   319,   320,   321,    -1,    -1,   324,   325,
     326,   327,    -1,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,    -1,   341,   342,   343,    -1,    -1,
     346,   347,   348,   349,   350,   351,   352,   353,   354,    -1,
     356,   357,    -1,   359,   360,   361,    -1,   363,   364,   365,
     366,    -1,   368,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   378,   379,   380,    -1,   382,   383,    -1,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,    -1,   399,   400,   401,    -1,   403,    -1,   405,
     406,   407,   408,   409,    -1,   411,   412,   413,    -1,    -1,
     416,    -1,    -1,    -1,   420,   421,   422,   423,   424,    -1,
      -1,   427,   428,   429,   430,   431,    -1,   433,   434,    -1,
     436,   437,   438,   439,   440,   441,    -1,   443,    -1,   445,
     446,    -1,   448,   449,    -1,    -1,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   461,   462,    -1,   464,   465,
      -1,    -1,    -1,   469,   470,   471,   472,    -1,    -1,    -1,
     476,    -1,    -1,    -1,   480,    -1,   482,   483,   484,   485,
     486,    -1,   488,   489,   490,   491,   492,   493,    -1,    -1,
      -1,    -1,    -1,    -1,   500,   501,    -1,   503,    -1,    -1,
     506,    -1,    -1,   509,   510,   511,   512,   513,   514,   515,
      -1,   517,   518,   519,   520,   521,   522,   523,   524,   525,
     526,   527,   528,   529,   530,   531,    -1,   533,    -1,   535,
     536,   537,   538,    -1,   540,   541,   542,    -1,   544,   545,
     546,   547,    -1,    -1,    -1,    -1,    -1,   553,   554,   555,
      -1,   557,   558,   559,   560,   561,   562,   563,   564,   565,
     566,   567,   568,    -1,   570,   571,    -1,    -1,   574,    -1,
      -1,   577,    -1,   579,    -1,   581,   582,   583,    -1,    -1,
     586,   587,   588,   589,   590,    -1,    -1,   593,   594,    -1,
     596,   597,   598,   599,   600,   601,   602,    -1,    -1,    -1,
      -1,    -1,    -1,   609,   610,    -1,   612,   613,   614,    -1,
      -1,   617,    -1,    -1,    -1,    -1,   622,   623,    -1,    -1,
      -1,    -1,   628,   629,    -1,    -1,   632,   633,    -1,    -1,
     636,   637,     5,    -1,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    -1,
      -1,    34,    35,    36,    37,    38,    39,    40,    -1,    42,
      43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,
      53,    54,    55,    56,    -1,    58,    59,    60,    61,    62,
      -1,    64,    65,    66,    67,    68,    69,    70,    -1,    72,
      73,    74,    75,    76,    77,    78,    -1,    80,    81,    82,
      83,    84,    85,    86,    87,    -1,    89,    90,    -1,    92,
      93,    94,    95,    96,    -1,    98,    99,   100,   101,    -1,
      -1,   104,   105,   106,    -1,   108,   109,   110,    -1,   112,
     113,   114,   115,   116,   117,    -1,    -1,    -1,    -1,   122,
     123,   124,    -1,    -1,   127,   128,    -1,   130,    -1,    -1,
      -1,   134,    -1,   136,   137,   138,   139,    -1,    -1,    -1,
     143,    -1,    -1,   146,   147,   148,    -1,    -1,    -1,   152,
      -1,   154,   155,    -1,   157,   158,   159,    -1,    -1,   162,
     163,    -1,   165,   166,   167,   168,   169,   170,   171,    -1,
     173,   174,   175,   176,   177,   178,   179,    -1,   181,   182,
     183,   184,    -1,   186,    -1,    -1,    -1,   190,    -1,   192,
      -1,   194,    -1,   196,   197,   198,   199,   200,   201,    -1,
     203,    -1,   205,    -1,   207,   208,   209,    -1,   211,   212,
      -1,   214,   215,    -1,    -1,    -1,   219,   220,   221,   222,
     223,    -1,   225,   226,   227,    -1,   229,    -1,   231,    -1,
      -1,    -1,   235,   236,   237,   238,    -1,    -1,   241,    -1,
     243,   244,    -1,   246,   247,    -1,    -1,    -1,   251,    -1,
      -1,   254,   255,   256,    -1,    -1,   259,    -1,   261,   262,
     263,    -1,    -1,    -1,    -1,    -1,   269,   270,    -1,   272,
      -1,   274,    -1,   276,   277,    -1,    -1,   280,    -1,    -1,
      -1,    -1,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,    -1,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,    -1,
      -1,    -1,    -1,   316,   317,   318,   319,   320,   321,    -1,
      -1,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,    -1,   341,   342,
     343,    -1,    -1,   346,   347,   348,   349,   350,   351,   352,
     353,   354,    -1,   356,   357,    -1,   359,   360,   361,    -1,
     363,   364,   365,   366,    -1,   368,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   378,   379,   380,    -1,   382,
     383,    -1,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,    -1,   399,   400,   401,    -1,
     403,    -1,   405,   406,   407,   408,   409,    -1,   411,   412,
     413,    -1,    -1,   416,    -1,    -1,    -1,   420,   421,   422,
     423,   424,    -1,    -1,   427,   428,   429,   430,   431,    -1,
     433,   434,    -1,   436,   437,   438,   439,   440,   441,    -1,
     443,    -1,   445,   446,    -1,   448,   449,    -1,    -1,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
      -1,   464,   465,    -1,    -1,    -1,   469,   470,   471,   472,
      -1,    -1,    -1,   476,    -1,    -1,    -1,   480,    -1,   482,
     483,   484,   485,   486,    -1,   488,   489,   490,   491,   492,
     493,    -1,    -1,    -1,    -1,    -1,    -1,   500,   501,    -1,
     503,    -1,    -1,   506,    -1,    -1,   509,   510,   511,   512,
     513,   514,   515,    -1,   517,   518,   519,   520,   521,   522,
     523,   524,   525,   526,   527,   528,   529,   530,   531,    -1,
     533,    -1,   535,   536,   537,   538,    -1,   540,   541,   542,
      -1,   544,   545,   546,   547,    -1,    -1,    -1,    -1,    -1,
     553,   554,   555,    -1,   557,   558,   559,   560,   561,   562,
     563,   564,   565,   566,   567,   568,    -1,   570,   571,    -1,
      -1,   574,    -1,    -1,   577,    -1,   579,    -1,   581,   582,
     583,    -1,    -1,   586,   587,   588,   589,   590,    -1,    -1,
     593,   594,    -1,   596,   597,   598,   599,   600,   601,   602,
      -1,    -1,    -1,    -1,    -1,    -1,   609,   610,    -1,   612,
     613,   614,    -1,    -1,   617,    -1,    -1,    -1,    -1,   622,
     623,    -1,    -1,    -1,    -1,   628,   629,    -1,    -1,   632,
     633,    -1,    -1,   636,   637,     5,    -1,     7,     8,     9,
      10,    11,    12,    -1,    14,    -1,    -1,    -1,    18,    -1,
      -1,    21,    -1,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    -1,    -1,    34,    35,    36,    37,    38,    39,
      40,    -1,    42,    43,    44,    -1,    46,    -1,    48,    49,
      -1,    -1,    52,    53,    54,    55,    56,    -1,    58,    59,
      60,    61,    62,    -1,    64,    65,    66,    67,    68,    69,
      70,    -1,    72,    73,    74,    75,    76,    77,    78,    -1,
      80,    81,    82,    83,    84,    85,    86,    87,    -1,    89,
      90,    -1,    92,    93,    94,    95,    96,    -1,    98,    99,
     100,   101,    -1,    -1,   104,   105,   106,    -1,   108,   109,
     110,    -1,   112,   113,   114,   115,   116,   117,    -1,    -1,
      -1,    -1,   122,   123,   124,    -1,    -1,   127,   128,    -1,
     130,    -1,    -1,    -1,   134,    -1,   136,   137,   138,   139,
      -1,    -1,    -1,   143,    -1,    -1,   146,   147,   148,    -1,
      -1,    -1,   152,    -1,   154,   155,    -1,   157,   158,   159,
      -1,    -1,   162,   163,    -1,   165,   166,   167,   168,   169,
     170,   171,    -1,   173,   174,   175,   176,   177,   178,   179,
      -1,   181,   182,   183,   184,    -1,   186,    -1,    -1,    -1,
     190,    -1,   192,    -1,   194,    -1,   196,   197,   198,   199,
     200,   201,    -1,   203,    -1,   205,    -1,   207,   208,   209,
      -1,   211,   212,    -1,   214,   215,    -1,    -1,    -1,   219,
     220,   221,   222,   223,    -1,   225,   226,   227,    -1,   229,
      -1,   231,    -1,    -1,    -1,   235,   236,   237,   238,    -1,
      -1,   241,    -1,   243,   244,    -1,   246,   247,    -1,    -1,
      -1,   251,    -1,    -1,   254,   255,   256,    -1,    -1,   259,
      -1,   261,   262,   263,    -1,    -1,    -1,    -1,    -1,   269,
     270,    -1,   272,    -1,   274,    -1,   276,   277,    -1,    -1,
     280,    -1,    -1,    -1,    -1,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
      -1,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,    -1,    -1,    -1,    -1,   316,   317,   318,   319,
     320,   321,    -1,    -1,   324,   325,   326,   327,    -1,   329,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
      -1,   341,   342,   343,    -1,    -1,   346,   347,   348,   349,
     350,    -1,   352,   353,   354,    -1,   356,   357,    -1,   359,
     360,   361,    -1,   363,   364,   365,   366,    -1,   368,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   378,   379,
     380,    -1,   382,   383,    -1,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,    -1,   399,
     400,   401,    -1,   403,    -1,   405,   406,   407,   408,   409,
      -1,   411,   412,   413,    -1,    -1,   416,    -1,    -1,    -1,
     420,   421,   422,   423,   424,    -1,    -1,   427,   428,   429,
     430,   431,    -1,   433,   434,    -1,   436,   437,   438,   439,
     440,   441,    -1,   443,    -1,   445,   446,    -1,   448,   449,
      -1,    -1,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   462,    -1,   464,   465,    -1,    -1,    -1,   469,
     470,   471,   472,    -1,    -1,    -1,   476,    -1,    -1,    -1,
     480,    -1,   482,   483,   484,   485,   486,    -1,   488,   489,
     490,   491,   492,   493,    -1,    -1,    -1,    -1,    -1,    -1,
     500,   501,    -1,   503,    -1,    -1,   506,    -1,    -1,   509,
     510,   511,   512,   513,   514,   515,    -1,   517,   518,   519,
     520,   521,   522,   523,   524,   525,   526,   527,   528,   529,
     530,   531,    -1,   533,    -1,   535,   536,   537,   538,    -1,
     540,   541,   542,    -1,   544,   545,   546,   547,    -1,    -1,
      -1,    -1,    -1,   553,   554,   555,    -1,   557,   558,   559,
     560,   561,   562,   563,   564,   565,   566,   567,   568,    -1,
     570,   571,    -1,    -1,   574,    -1,    -1,   577,    -1,   579,
      -1,   581,   582,   583,    -1,    -1,   586,   587,   588,   589,
     590,    -1,    -1,   593,   594,    -1,   596,   597,   598,   599,
     600,   601,   602,    -1,    -1,    -1,    -1,    -1,    -1,   609,
     610,    -1,   612,   613,   614,    -1,    -1,   617,    -1,    -1,
      -1,    -1,   622,   623,    -1,    -1,    -1,    -1,   628,   629,
      -1,    -1,   632,   633,    -1,    -1,   636,   637,     5,    -1,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    -1,    -1,    34,    35,    36,
      37,    38,    39,    40,    -1,    42,    43,    44,    -1,    46,
      -1,    48,    49,    -1,    -1,    52,    53,    54,    55,    56,
      -1,    58,    59,    60,    61,    62,    -1,    64,    65,    66,
      67,    68,    69,    70,    -1,    72,    73,    74,    75,    76,
      77,    78,    -1,    80,    81,    82,    83,    84,    85,    86,
      87,    -1,    89,    90,    -1,    92,    93,    94,    95,    96,
      -1,    98,    99,   100,   101,    -1,    -1,   104,   105,   106,
      -1,   108,   109,   110,    -1,   112,   113,   114,   115,   116,
     117,    -1,    -1,    -1,    -1,   122,   123,   124,    -1,    -1,
     127,   128,    -1,   130,    -1,    -1,    -1,   134,    -1,   136,
     137,   138,   139,    -1,    -1,    -1,   143,    -1,    -1,   146,
     147,   148,    -1,    -1,    -1,   152,    -1,   154,   155,    -1,
     157,   158,   159,    -1,    -1,   162,   163,    -1,   165,   166,
     167,   168,   169,   170,   171,    -1,   173,   174,   175,   176,
     177,   178,   179,    -1,   181,   182,   183,   184,    -1,   186,
      -1,    -1,    -1,   190,    -1,   192,    -1,   194,    -1,   196,
     197,   198,   199,   200,   201,    -1,   203,    -1,   205,    -1,
     207,   208,   209,    -1,   211,   212,    -1,   214,   215,    -1,
      -1,    -1,   219,   220,   221,   222,   223,    -1,   225,   226,
     227,    -1,   229,    -1,   231,    -1,    -1,    -1,   235,   236,
     237,   238,    -1,    -1,   241,    -1,   243,   244,    -1,   246,
     247,    -1,    -1,    -1,   251,    -1,    -1,   254,   255,   256,
      -1,    -1,   259,    -1,   261,   262,   263,    -1,    -1,    -1,
      -1,    -1,   269,   270,    -1,   272,    -1,   274,    -1,   276,
     277,    -1,    -1,   280,    -1,    -1,    -1,    -1,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,    -1,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,    -1,    -1,    -1,    -1,   316,
     317,   318,   319,   320,   321,    -1,    -1,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,   339,    -1,   341,   342,   343,    -1,    -1,   346,
     347,   348,   349,   350,   351,   352,   353,   354,    -1,   356,
     357,    -1,   359,   360,   361,    -1,   363,   364,   365,   366,
      -1,   368,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   378,   379,   380,    -1,   382,   383,    -1,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,    -1,   399,   400,   401,    -1,   403,    -1,   405,   406,
     407,   408,   409,    -1,   411,   412,   413,    -1,    -1,   416,
      -1,    -1,    -1,   420,   421,   422,   423,   424,    -1,    -1,
     427,   428,   429,   430,   431,    -1,   433,   434,    -1,   436,
     437,   438,   439,   440,   441,    -1,   443,    -1,   445,   446,
      -1,   448,   449,    -1,    -1,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,    -1,   464,   465,    -1,
      -1,    -1,   469,   470,   471,   472,    -1,    -1,    -1,   476,
      -1,    -1,    -1,   480,    -1,   482,   483,   484,   485,   486,
      -1,   488,   489,   490,   491,   492,   493,    -1,    -1,    -1,
      -1,    -1,    -1,   500,   501,    -1,   503,    -1,    -1,   506,
      -1,    -1,   509,   510,   511,   512,   513,   514,   515,    -1,
     517,   518,   519,   520,   521,   522,   523,   524,   525,   526,
     527,   528,   529,   530,   531,    -1,   533,    -1,   535,   536,
     537,   538,    -1,   540,   541,   542,    -1,   544,   545,   546,
     547,    -1,    -1,    -1,    -1,    -1,   553,   554,   555,    -1,
     557,   558,   559,   560,   561,   562,   563,   564,   565,   566,
     567,   568,    -1,   570,   571,    -1,    -1,   574,    -1,    -1,
     577,    -1,   579,    -1,   581,   582,   583,    -1,    -1,   586,
     587,   588,   589,   590,    -1,    -1,   593,   594,    -1,   596,
     597,   598,   599,   600,   601,   602,    -1,    -1,    -1,    -1,
      -1,    -1,   609,   610,    -1,   612,   613,   614,    -1,    -1,
     617,    -1,    -1,    -1,    -1,   622,   623,    -1,    -1,    -1,
      -1,   628,   629,    -1,    -1,   632,   633,    -1,    -1,   636,
     637,     5,    -1,     7,     8,     9,    10,    11,    -1,    -1,
      14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    -1,    -1,
      34,    35,    36,    37,    38,    39,    40,    -1,    42,    43,
      44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,    53,
      54,    55,    56,    -1,    58,    59,    60,    61,    62,    -1,
      64,    65,    66,    67,    68,    69,    70,    -1,    72,    73,
      74,    75,    76,    77,    78,    -1,    80,    81,    82,    83,
      84,    85,    86,    87,    -1,    89,    90,    -1,    92,    93,
      94,    95,    96,    -1,    98,    99,   100,   101,    -1,    -1,
     104,   105,   106,    -1,   108,   109,   110,    -1,   112,   113,
     114,   115,   116,   117,    -1,    -1,    -1,    -1,   122,   123,
     124,    -1,    -1,   127,   128,    -1,   130,    -1,    -1,    -1,
     134,    -1,   136,   137,   138,   139,    -1,    -1,    -1,   143,
      -1,    -1,   146,   147,   148,    -1,    -1,    -1,   152,    -1,
     154,   155,    -1,   157,   158,   159,    -1,    -1,   162,   163,
      -1,   165,   166,   167,   168,   169,   170,   171,    -1,   173,
     174,   175,   176,   177,   178,   179,    -1,   181,   182,   183,
     184,    -1,   186,    -1,    -1,    -1,   190,    -1,   192,    -1,
     194,    -1,   196,   197,   198,   199,   200,   201,    -1,   203,
      -1,   205,    -1,   207,   208,   209,    -1,   211,   212,    -1,
     214,   215,    -1,    -1,    -1,   219,   220,   221,   222,   223,
      -1,   225,   226,   227,    -1,   229,    -1,   231,    -1,    -1,
      -1,   235,   236,   237,   238,    -1,    -1,   241,    -1,   243,
     244,    -1,   246,   247,    -1,    -1,    -1,   251,    -1,    -1,
     254,   255,   256,    -1,    -1,   259,    -1,   261,   262,   263,
      -1,    -1,    -1,    -1,    -1,   269,   270,    -1,   272,    -1,
     274,    -1,   276,   277,    -1,    -1,   280,    -1,    -1,    -1,
      -1,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,    -1,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,    -1,    -1,
      -1,    -1,   316,   317,   318,   319,   320,   321,    -1,    -1,
     324,   325,   326,   327,    -1,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,    -1,   341,   342,   343,
      -1,    -1,   346,   347,   348,   349,   350,   351,   352,   353,
     354,    -1,   356,   357,    -1,   359,   360,   361,    -1,   363,
     364,   365,   366,    -1,   368,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   378,   379,   380,    -1,   382,   383,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,    -1,   399,   400,   401,    -1,   403,
      -1,   405,   406,   407,   408,   409,    -1,   411,   412,   413,
      -1,    -1,   416,    -1,    -1,    -1,   420,   421,   422,   423,
     424,    -1,    -1,   427,   428,   429,   430,   431,    -1,   433,
     434,    -1,   436,   437,   438,   439,   440,   441,    -1,   443,
      -1,   445,   446,    -1,   448,   449,    -1,    -1,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,    -1,
     464,   465,    -1,    -1,    -1,   469,   470,   471,   472,    -1,
      -1,    -1,   476,    -1,    -1,    -1,   480,    -1,   482,   483,
     484,   485,   486,    -1,   488,   489,   490,   491,   492,   493,
      -1,    -1,    -1,    -1,    -1,    -1,   500,   501,    -1,   503,
      -1,    -1,   506,    -1,    -1,   509,   510,   511,   512,   513,
     514,   515,    -1,   517,   518,   519,   520,   521,   522,   523,
     524,   525,   526,   527,   528,   529,   530,   531,    -1,   533,
      -1,   535,   536,   537,   538,    -1,   540,   541,   542,    -1,
     544,   545,   546,   547,    -1,    -1,    -1,    -1,    -1,   553,
     554,   555,    -1,   557,   558,   559,   560,   561,   562,   563,
     564,   565,   566,   567,   568,    -1,   570,   571,    -1,    -1,
     574,    -1,    -1,   577,    -1,   579,    -1,   581,   582,   583,
      -1,    -1,   586,   587,   588,   589,   590,    -1,    -1,   593,
     594,    -1,   596,   597,   598,   599,   600,   601,   602,    -1,
      -1,    -1,    -1,    -1,    -1,   609,   610,    -1,   612,   613,
     614,    -1,    -1,   617,    -1,    -1,    -1,    -1,   622,   623,
      -1,    -1,    -1,    -1,   628,   629,    -1,    -1,   632,   633,
      -1,    -1,   636,   637,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      21,    -1,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    -1,    -1,    34,    35,    36,    37,    38,    39,    40,
      -1,    42,    43,    44,    -1,    46,    -1,    48,    49,    -1,
      -1,    52,    53,    54,    55,    56,    -1,    58,    59,    60,
      61,    62,    -1,    64,    65,    66,    67,    68,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    -1,    80,
      81,    82,    83,    84,    85,    86,    87,    -1,    89,    90,
      -1,    92,    93,    94,    95,    96,    -1,    98,    99,   100,
     101,    -1,    -1,   104,   105,   106,    -1,   108,   109,   110,
      -1,   112,   113,   114,   115,   116,   117,    -1,    -1,    -1,
      -1,   122,   123,   124,    -1,    -1,   127,   128,    -1,   130,
      -1,    -1,    -1,   134,    -1,   136,   137,   138,   139,    -1,
      -1,    -1,   143,    -1,    -1,   146,   147,   148,    -1,    -1,
      -1,   152,    -1,   154,   155,    -1,   157,   158,   159,    -1,
      -1,   162,   163,    -1,   165,   166,   167,   168,   169,   170,
     171,    -1,   173,   174,   175,   176,   177,   178,   179,    -1,
     181,   182,   183,   184,    -1,   186,    -1,    -1,    -1,   190,
      -1,   192,    -1,   194,    -1,   196,   197,   198,   199,   200,
     201,    -1,   203,    -1,   205,    -1,   207,   208,   209,    -1,
     211,   212,    -1,   214,   215,    -1,    -1,    -1,   219,   220,
     221,   222,   223,    -1,   225,   226,   227,    -1,   229,    -1,
     231,    -1,    -1,    -1,   235,   236,   237,   238,    -1,    -1,
     241,    -1,   243,   244,    -1,   246,   247,    -1,    -1,    -1,
     251,    -1,    -1,   254,   255,   256,    -1,    -1,   259,    -1,
     261,   262,   263,    -1,    -1,    -1,    -1,    -1,   269,   270,
      -1,   272,    -1,   274,    -1,   276,   277,    -1,    -1,   280,
      -1,    -1,    -1,    -1,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,    -1,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,    -1,    -1,    -1,    -1,   316,   317,   318,   319,   320,
     321,    -1,    -1,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,    -1,
     341,   342,   343,    -1,    -1,   346,   347,   348,   349,   350,
     351,   352,   353,   354,    -1,   356,   357,    -1,   359,   360,
     361,    -1,   363,   364,   365,   366,    -1,   368,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   378,   379,   380,
      -1,   382,   383,    -1,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,    -1,   399,   400,
     401,    -1,   403,    -1,   405,   406,   407,   408,   409,    -1,
     411,   412,   413,    -1,    -1,   416,    -1,    -1,    -1,   420,
     421,   422,   423,   424,    -1,    -1,   427,   428,   429,   430,
     431,    -1,   433,   434,    -1,   436,   437,   438,   439,   440,
     441,    -1,   443,    -1,   445,   446,    -1,   448,   449,    -1,
      -1,   452,   453,   454,   455,   456,   457,   458,   459,   460,
     461,   462,    -1,   464,   465,    -1,    -1,    -1,   469,   470,
     471,   472,    -1,    -1,    -1,   476,    -1,    -1,    -1,   480,
      -1,   482,   483,   484,   485,   486,    -1,   488,   489,   490,
     491,   492,   493,    -1,    -1,    -1,    -1,    -1,    -1,   500,
     501,    -1,   503,    -1,    -1,   506,    -1,    -1,   509,   510,
     511,   512,   513,   514,   515,    -1,   517,   518,   519,   520,
     521,   522,   523,   524,   525,   526,   527,   528,   529,   530,
     531,    -1,   533,    -1,   535,   536,   537,   538,    -1,   540,
     541,   542,    -1,   544,   545,   546,   547,    -1,    -1,    -1,
      -1,    -1,   553,   554,   555,    -1,   557,   558,   559,   560,
     561,   562,   563,   564,   565,   566,   567,   568,    -1,   570,
     571,    -1,    -1,   574,    -1,    -1,   577,    -1,   579,    -1,
     581,   582,   583,    -1,    -1,   586,   587,   588,   589,   590,
      -1,    -1,   593,   594,    -1,   596,   597,   598,   599,   600,
     601,   602,    -1,    -1,    -1,    -1,    -1,    -1,   609,   610,
      -1,   612,   613,   614,    -1,    -1,   617,    -1,    -1,    -1,
      -1,   622,   623,    -1,    -1,    -1,    -1,   628,   629,    -1,
      -1,   632,   633,    -1,    -1,   636,   637,     5,    -1,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,    -1,    -1,    21,    -1,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    -1,    -1,    34,    35,    36,    37,
      38,    39,    40,    -1,    42,    43,    44,    -1,    46,    -1,
      48,    49,    -1,    -1,    52,    53,    54,    55,    56,    -1,
      58,    59,    60,    61,    62,    -1,    64,    65,    66,    67,
      68,    69,    70,    -1,    72,    73,    74,    75,    76,    77,
      78,    -1,    80,    81,    82,    83,    84,    85,    86,    87,
      -1,    89,    90,    -1,    92,    93,    94,    95,    96,    -1,
      98,    99,   100,   101,    -1,    -1,   104,   105,   106,    -1,
     108,   109,   110,    -1,   112,   113,   114,   115,   116,   117,
      -1,    -1,    -1,    -1,   122,   123,   124,    -1,    -1,   127,
     128,    -1,   130,    -1,    -1,    -1,   134,    -1,   136,   137,
     138,   139,    -1,    -1,    -1,   143,    -1,    -1,   146,   147,
     148,    -1,    -1,    -1,   152,    -1,   154,   155,    -1,   157,
     158,   159,    -1,    -1,   162,   163,    -1,   165,   166,   167,
     168,   169,   170,   171,    -1,   173,   174,   175,   176,   177,
     178,   179,    -1,   181,   182,   183,   184,    -1,   186,    -1,
      -1,    -1,   190,    -1,   192,    -1,   194,    -1,   196,   197,
     198,   199,   200,   201,    -1,   203,    -1,   205,    -1,   207,
     208,   209,    -1,   211,   212,    -1,   214,   215,    -1,    -1,
      -1,   219,   220,   221,   222,   223,    -1,   225,   226,   227,
      -1,   229,    -1,   231,    -1,    -1,    -1,   235,   236,   237,
     238,    -1,    -1,   241,    -1,   243,   244,    -1,   246,   247,
      -1,    -1,    -1,   251,    -1,    -1,   254,   255,   256,    -1,
      -1,   259,    -1,   261,   262,   263,    -1,    -1,    -1,    -1,
      -1,   269,   270,    -1,   272,    -1,   274,    -1,   276,   277,
      -1,    -1,   280,    -1,    -1,    -1,    -1,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,    -1,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,    -1,    -1,    -1,    -1,   316,   317,
     318,   319,   320,   321,    -1,    -1,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,    -1,   341,   342,   343,    -1,    -1,   346,   347,
     348,   349,   350,   351,   352,   353,   354,    -1,   356,   357,
      -1,   359,   360,   361,    -1,   363,   364,   365,   366,    -1,
     368,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     378,   379,   380,    -1,   382,   383,    -1,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
      -1,   399,   400,   401,    -1,   403,    -1,   405,   406,   407,
     408,   409,    -1,   411,   412,   413,    -1,    -1,   416,    -1,
      -1,    -1,   420,   421,   422,   423,   424,    -1,    -1,   427,
     428,   429,   430,   431,    -1,   433,   434,    -1,   436,   437,
     438,   439,   440,   441,    -1,   443,    -1,   445,   446,    -1,
     448,   449,    -1,    -1,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   462,    -1,   464,   465,    -1,    -1,
      -1,   469,   470,   471,   472,    -1,    -1,    -1,   476,    -1,
      -1,    -1,   480,    -1,   482,   483,   484,   485,   486,    -1,
     488,   489,   490,   491,   492,   493,    -1,    -1,    -1,    -1,
      -1,    -1,   500,   501,    -1,   503,    -1,    -1,   506,    -1,
      -1,   509,   510,   511,   512,   513,   514,   515,    -1,   517,
     518,   519,   520,   521,   522,   523,   524,   525,   526,   527,
     528,   529,   530,   531,    -1,   533,    -1,   535,   536,   537,
     538,    -1,   540,   541,   542,    -1,   544,   545,   546,   547,
      -1,    -1,    -1,    -1,    -1,   553,   554,   555,    -1,   557,
     558,   559,   560,   561,   562,   563,   564,   565,   566,   567,
     568,    -1,   570,   571,    -1,    -1,   574,    -1,    -1,   577,
      -1,   579,    -1,   581,   582,   583,    -1,    -1,   586,   587,
     588,   589,   590,    -1,    -1,   593,   594,    -1,   596,   597,
     598,   599,   600,   601,   602,    -1,    -1,    -1,    -1,    -1,
      -1,   609,   610,    -1,   612,   613,   614,    -1,    -1,   617,
      -1,    -1,    -1,    -1,   622,   623,    -1,    -1,    -1,    -1,
     628,   629,    -1,    -1,   632,   633,    -1,    -1,   636,   637,
       5,    -1,     7,     8,     9,    10,    11,    -1,    -1,    14,
      -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    -1,    -1,    34,
      35,    36,    37,    38,    39,    40,    -1,    42,    43,    44,
      -1,    46,    -1,    48,    49,    -1,    -1,    52,    53,    54,
      55,    56,    -1,    58,    59,    60,    61,    62,    -1,    64,
      65,    66,    67,    68,    69,    70,    -1,    72,    73,    74,
      75,    76,    77,    78,    -1,    80,    81,    82,    83,    84,
      85,    86,    87,    -1,    89,    90,    -1,    92,    93,    94,
      95,    96,    -1,    98,    99,   100,   101,    -1,    -1,   104,
     105,   106,    -1,   108,   109,   110,    -1,   112,   113,   114,
     115,   116,   117,    -1,    -1,    -1,    -1,   122,   123,   124,
      -1,    -1,   127,   128,    -1,   130,    -1,    -1,    -1,   134,
      -1,   136,   137,   138,   139,    -1,    -1,    -1,   143,    -1,
      -1,   146,   147,   148,    -1,    -1,    -1,   152,    -1,   154,
     155,    -1,   157,   158,   159,    -1,    -1,   162,   163,    -1,
     165,   166,   167,   168,   169,   170,   171,    -1,   173,   174,
     175,   176,   177,   178,   179,    -1,   181,   182,   183,   184,
      -1,   186,    -1,    -1,    -1,   190,    -1,   192,    -1,   194,
      -1,   196,   197,   198,   199,   200,   201,    -1,   203,    -1,
     205,    -1,   207,   208,   209,    -1,   211,   212,    -1,   214,
     215,    -1,    -1,    -1,   219,   220,   221,   222,   223,    -1,
     225,   226,   227,    -1,   229,    -1,   231,    -1,    -1,    -1,
     235,   236,   237,   238,    -1,    -1,   241,    -1,   243,   244,
      -1,   246,   247,    -1,    -1,    -1,   251,    -1,    -1,   254,
     255,   256,    -1,    -1,   259,    -1,   261,   262,   263,    -1,
      -1,    -1,    -1,    -1,   269,   270,    -1,   272,    -1,   274,
      -1,   276,   277,    -1,    -1,   280,    -1,    -1,    -1,    -1,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,    -1,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,    -1,    -1,
      -1,   316,   317,   318,   319,   320,   321,    -1,    -1,   324,
     325,   326,   327,    -1,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,    -1,   341,   342,   343,    -1,
      -1,   346,   347,   348,   349,   350,    -1,   352,   353,   354,
      -1,   356,   357,    -1,   359,   360,   361,    -1,   363,   364,
     365,   366,    -1,   368,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   378,   379,   380,    -1,   382,   383,    -1,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,    -1,   399,   400,   401,    -1,   403,    -1,
     405,   406,   407,   408,   409,    -1,   411,   412,   413,    -1,
      -1,   416,    -1,    -1,    -1,   420,   421,   422,   423,   424,
      -1,    -1,   427,   428,   429,   430,   431,    -1,   433,   434,
      -1,   436,   437,   438,   439,   440,   441,    -1,   443,    -1,
     445,   446,    -1,   448,   449,    -1,    -1,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,    -1,   464,
     465,    -1,    -1,    -1,   469,   470,   471,   472,    -1,    -1,
      -1,   476,    -1,    -1,    -1,   480,    -1,   482,   483,   484,
     485,   486,    -1,   488,   489,   490,   491,   492,   493,    -1,
      -1,    -1,    -1,    -1,    -1,   500,   501,    -1,   503,    -1,
      -1,   506,    -1,    -1,   509,   510,   511,   512,   513,   514,
     515,    -1,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,    -1,   533,    -1,
     535,   536,   537,   538,    -1,   540,   541,   542,    -1,   544,
     545,   546,   547,    -1,    -1,    -1,    -1,    -1,   553,   554,
     555,    -1,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,    -1,   570,   571,    -1,    -1,   574,
      -1,    -1,   577,    -1,   579,    -1,   581,   582,   583,    -1,
      -1,   586,   587,   588,   589,   590,    -1,    -1,   593,   594,
      -1,   596,   597,   598,   599,   600,   601,   602,    -1,    -1,
      -1,    -1,    -1,    -1,   609,   610,    -1,   612,   613,   614,
      -1,    -1,   617,    -1,    -1,    -1,    -1,   622,   623,    -1,
      -1,    -1,    -1,   628,   629,    -1,    -1,   632,   633,    -1,
      -1,   636,   637,     5,    -1,     7,     8,     9,    10,    11,
      -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,
      -1,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      -1,    -1,    34,    35,    36,    37,    38,    39,    40,    -1,
      42,    43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,
      52,    53,    54,    55,    56,    -1,    58,    59,    60,    61,
      62,    -1,    64,    65,    66,    67,    68,    69,    70,    -1,
      72,    73,    74,    75,    76,    77,    78,    -1,    80,    81,
      82,    83,    84,    85,    86,    87,    -1,    89,    90,    -1,
      92,    93,    94,    95,    96,    -1,    98,    99,   100,   101,
      -1,    -1,   104,   105,   106,    -1,   108,   109,   110,    -1,
     112,   113,   114,   115,   116,   117,    -1,    -1,    -1,    -1,
     122,   123,   124,    -1,    -1,   127,   128,    -1,   130,    -1,
      -1,    -1,   134,    -1,   136,   137,   138,   139,    -1,    -1,
      -1,   143,    -1,    -1,   146,   147,   148,    -1,    -1,    -1,
     152,    -1,   154,   155,    -1,   157,   158,   159,    -1,    -1,
     162,   163,    -1,   165,   166,   167,   168,   169,   170,   171,
      -1,   173,   174,   175,   176,   177,   178,   179,    -1,   181,
     182,   183,   184,    -1,   186,    -1,    -1,    -1,   190,    -1,
     192,    -1,   194,    -1,   196,   197,   198,   199,   200,   201,
      -1,   203,    -1,   205,    -1,   207,   208,   209,    -1,   211,
     212,    -1,   214,   215,    -1,    -1,    -1,   219,   220,   221,
     222,   223,    -1,   225,   226,   227,    -1,   229,    -1,   231,
      -1,    -1,    -1,   235,   236,   237,   238,    -1,    -1,   241,
      -1,   243,   244,    -1,   246,   247,    -1,    -1,    -1,   251,
      -1,    -1,   254,   255,   256,    -1,    -1,   259,    -1,   261,
     262,   263,    -1,    -1,    -1,    -1,    -1,   269,   270,    -1,
     272,    -1,   274,    -1,   276,   277,    -1,    -1,   280,    -1,
      -1,    -1,    -1,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,    -1,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
      -1,    -1,    -1,    -1,   316,   317,   318,   319,   320,   321,
      -1,    -1,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,   335,   336,   337,   338,   339,    -1,   341,
     342,   343,    -1,    -1,   346,   347,   348,   349,   350,    -1,
     352,   353,   354,    -1,   356,   357,    -1,   359,   360,   361,
      -1,   363,   364,   365,   366,    -1,   368,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   378,   379,   380,    -1,
     382,   383,    -1,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,    -1,   399,   400,   401,
      -1,   403,    -1,   405,   406,   407,   408,   409,    -1,   411,
     412,   413,    -1,    -1,   416,    -1,    -1,    -1,   420,   421,
     422,   423,   424,    -1,    -1,   427,   428,   429,   430,   431,
      -1,   433,   434,    -1,   436,   437,   438,   439,   440,   441,
      -1,   443,    -1,   445,   446,    -1,   448,   449,    -1,    -1,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
     462,    -1,   464,   465,    -1,    -1,    -1,   469,   470,   471,
     472,    -1,    -1,    -1,   476,    -1,    -1,    -1,   480,    -1,
     482,   483,   484,   485,   486,    -1,   488,   489,   490,   491,
     492,   493,    -1,    -1,    -1,    -1,    -1,    -1,   500,   501,
      -1,   503,    -1,    -1,   506,    -1,    -1,   509,   510,   511,
     512,   513,   514,   515,    -1,   517,   518,   519,   520,   521,
     522,   523,   524,   525,   526,   527,   528,   529,   530,   531,
      -1,   533,    -1,   535,   536,   537,   538,    -1,   540,   541,
     542,    -1,   544,   545,   546,   547,    -1,    -1,    -1,    -1,
      -1,   553,   554,   555,    -1,   557,   558,   559,   560,   561,
     562,   563,   564,   565,   566,   567,   568,    -1,   570,   571,
      -1,    -1,   574,    -1,    -1,   577,    -1,   579,    -1,   581,
     582,   583,    -1,    -1,   586,   587,   588,   589,   590,    -1,
      -1,   593,   594,    -1,   596,   597,   598,   599,   600,   601,
     602,    -1,    -1,    -1,    -1,    -1,    -1,   609,   610,    -1,
     612,   613,   614,    -1,    -1,   617,    -1,    -1,    -1,    -1,
     622,   623,    -1,    -1,    -1,    -1,   628,   629,    -1,    -1,
     632,   633,    -1,    -1,   636,   637,     5,    -1,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      -1,    -1,    21,    -1,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    -1,    -1,    34,    35,    36,    37,    38,
      39,    40,    -1,    42,    43,    44,    -1,    46,    -1,    48,
      49,    -1,    -1,    52,    53,    54,    55,    56,    -1,    58,
      59,    60,    61,    62,    -1,    64,    65,    66,    67,    68,
      69,    70,    -1,    72,    73,    74,    75,    76,    77,    78,
      -1,    80,    81,    82,    83,    84,    85,    86,    87,    -1,
      89,    90,    -1,    92,    93,    94,    95,    96,    -1,    98,
      99,   100,   101,    -1,    -1,   104,   105,   106,    -1,   108,
     109,   110,    -1,   112,   113,   114,   115,   116,   117,    -1,
      -1,    -1,    -1,   122,   123,   124,    -1,    -1,   127,   128,
      -1,   130,    -1,    -1,    -1,   134,    -1,   136,   137,   138,
     139,    -1,    -1,    -1,   143,    -1,    -1,   146,   147,   148,
      -1,    -1,    -1,   152,    -1,   154,   155,    -1,   157,   158,
     159,    -1,    -1,   162,   163,    -1,   165,   166,   167,   168,
     169,   170,   171,    -1,   173,   174,   175,   176,   177,   178,
     179,    -1,   181,   182,   183,   184,    -1,   186,    -1,    -1,
      -1,   190,    -1,   192,    -1,   194,    -1,   196,   197,   198,
     199,   200,   201,    -1,   203,    -1,   205,    -1,   207,   208,
     209,    -1,   211,   212,    -1,   214,   215,    -1,    -1,    -1,
     219,   220,   221,   222,   223,    -1,   225,   226,   227,    -1,
     229,    -1,   231,    -1,    -1,    -1,   235,   236,   237,   238,
      -1,    -1,   241,    -1,   243,   244,    -1,   246,   247,    -1,
      -1,    -1,   251,    -1,    -1,   254,   255,   256,    -1,    -1,
     259,    -1,   261,   262,   263,    -1,    -1,    -1,    -1,    -1,
     269,   270,    -1,   272,    -1,   274,    -1,   276,   277,    -1,
      -1,   280,    -1,    -1,    -1,    -1,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,    -1,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,    -1,    -1,    -1,    -1,   316,   317,   318,
     319,   320,   321,    -1,    -1,   324,   325,   326,   327,    -1,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,    -1,   341,   342,   343,    -1,    -1,   346,   347,   348,
     349,   350,    -1,   352,   353,   354,    -1,   356,   357,    -1,
     359,   360,   361,    -1,   363,   364,   365,   366,    -1,   368,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   378,
     379,   380,    -1,   382,   383,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,    -1,
     399,   400,   401,    -1,   403,    -1,   405,   406,   407,   408,
     409,    -1,   411,   412,   413,    -1,    -1,   416,    -1,    -1,
      -1,   420,   421,   422,   423,   424,    -1,    -1,   427,   428,
     429,   430,   431,    -1,   433,   434,    -1,   436,   437,   438,
     439,   440,   441,    -1,   443,    -1,   445,   446,    -1,   448,
     449,    -1,    -1,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,    -1,   464,   465,    -1,    -1,    -1,
     469,   470,   471,   472,    -1,    -1,    -1,   476,    -1,    -1,
      -1,   480,    -1,   482,   483,   484,   485,   486,    -1,   488,
     489,   490,   491,   492,   493,    -1,    -1,    -1,    -1,    -1,
      -1,   500,   501,    -1,   503,    -1,    -1,   506,    -1,    -1,
     509,   510,   511,   512,   513,   514,   515,    -1,   517,   518,
     519,   520,   521,   522,   523,   524,   525,   526,   527,   528,
     529,   530,   531,    -1,   533,    -1,   535,   536,   537,   538,
      -1,   540,   541,   542,    -1,   544,   545,   546,   547,    -1,
      -1,    -1,    -1,    -1,   553,   554,   555,    -1,   557,   558,
     559,   560,   561,   562,   563,   564,   565,   566,   567,   568,
      -1,   570,   571,    -1,    -1,   574,    -1,    -1,   577,    -1,
     579,    -1,   581,   582,   583,    -1,    -1,   586,   587,   588,
     589,   590,    -1,    -1,   593,   594,    -1,   596,   597,   598,
     599,   600,   601,   602,    -1,    -1,    -1,    -1,    -1,    -1,
     609,   610,    -1,   612,   613,   614,    -1,    -1,   617,    -1,
      -1,    -1,    -1,   622,   623,    -1,    -1,    -1,    -1,   628,
     629,    -1,    -1,   632,   633,    -1,    -1,   636,   637,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    -1,    -1,    34,    35,
      36,    37,    38,    39,    40,    -1,    42,    43,    44,    -1,
      46,    -1,    48,    49,    -1,    -1,    52,    53,    54,    55,
      56,    -1,    58,    59,    60,    61,    62,    -1,    64,    65,
      66,    67,    68,    69,    70,    -1,    72,    73,    74,    75,
      76,    77,    78,    -1,    80,    81,    82,    83,    84,    85,
      86,    87,    -1,    89,    90,    -1,    92,    93,    94,    95,
      96,    -1,    98,    99,   100,   101,    -1,    -1,   104,   105,
     106,    -1,   108,   109,   110,    -1,   112,   113,   114,   115,
     116,   117,    -1,    -1,    -1,    -1,   122,   123,   124,    -1,
      -1,   127,   128,    -1,   130,    -1,    -1,    -1,   134,    -1,
     136,   137,   138,   139,    -1,    -1,    -1,   143,    -1,    -1,
     146,   147,   148,    -1,    -1,    -1,   152,    -1,   154,   155,
      -1,   157,   158,   159,    -1,    -1,   162,   163,    -1,   165,
     166,   167,   168,   169,   170,   171,    -1,   173,   174,   175,
     176,   177,   178,   179,    -1,   181,   182,   183,   184,    -1,
     186,    -1,    -1,    -1,   190,    -1,   192,    -1,   194,    -1,
     196,   197,   198,   199,   200,   201,    -1,   203,    -1,   205,
      -1,   207,   208,   209,    -1,   211,   212,    -1,   214,   215,
      -1,    -1,    -1,   219,   220,   221,   222,   223,    -1,   225,
     226,   227,    -1,   229,    -1,   231,    -1,    -1,    -1,   235,
     236,   237,   238,    -1,    -1,   241,    -1,   243,   244,    -1,
     246,   247,    -1,    -1,    -1,   251,    -1,    -1,   254,   255,
     256,    -1,    -1,   259,    -1,   261,   262,   263,    -1,    -1,
      -1,    -1,    -1,   269,   270,    -1,   272,    -1,   274,    -1,
     276,   277,    -1,    -1,   280,    -1,    -1,    -1,    -1,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,    -1,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,    -1,    -1,    -1,    -1,
     316,   317,   318,   319,   320,   321,    -1,    -1,   324,   325,
     326,   327,    -1,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,    -1,   341,   342,   343,    -1,    -1,
     346,   347,   348,   349,   350,    -1,   352,   353,   354,    -1,
     356,   357,    -1,   359,   360,   361,    -1,   363,   364,   365,
     366,    -1,   368,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   378,   379,   380,    -1,   382,   383,    -1,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,    -1,   399,   400,   401,    -1,   403,    -1,   405,
     406,   407,   408,   409,    -1,   411,   412,   413,    -1,    -1,
     416,    -1,    -1,    -1,   420,   421,   422,   423,   424,    -1,
      -1,   427,   428,   429,   430,   431,    -1,   433,   434,    -1,
     436,   437,   438,   439,   440,   441,    -1,   443,    -1,   445,
     446,    -1,   448,   449,    -1,    -1,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   461,   462,    -1,   464,   465,
      -1,    -1,    -1,   469,   470,   471,   472,    -1,    -1,    -1,
     476,    -1,    -1,    -1,   480,    -1,   482,   483,   484,   485,
     486,    -1,   488,   489,   490,   491,   492,   493,    -1,    -1,
      -1,    -1,    -1,    -1,   500,   501,    -1,   503,    -1,    -1,
     506,    -1,    -1,   509,   510,   511,   512,   513,   514,   515,
      -1,   517,   518,   519,   520,   521,   522,   523,   524,   525,
     526,   527,   528,   529,   530,   531,    -1,   533,    -1,   535,
     536,   537,   538,    -1,   540,   541,   542,    -1,   544,   545,
     546,   547,    -1,    -1,    -1,    -1,    -1,   553,   554,   555,
      -1,   557,   558,   559,   560,   561,   562,   563,   564,   565,
     566,   567,   568,    -1,   570,   571,    -1,    -1,   574,    -1,
      -1,   577,    -1,   579,    -1,   581,   582,   583,    -1,    -1,
     586,   587,   588,   589,   590,    -1,    -1,   593,   594,    -1,
     596,   597,   598,   599,   600,   601,   602,    -1,    -1,    -1,
      -1,    -1,    -1,   609,   610,    -1,   612,   613,   614,    -1,
      -1,   617,    -1,    -1,    -1,    -1,   622,   623,    -1,    -1,
      -1,    -1,   628,   629,    -1,    -1,   632,   633,    -1,    -1,
     636,   637,     5,    -1,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    -1,
      -1,    -1,    35,    36,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,
      -1,    -1,    55,    56,    -1,    58,    59,    -1,    61,    62,
      -1,    64,    65,    66,    67,    68,    69,    70,    -1,    72,
      73,    74,    75,    76,    77,    78,    -1,    80,    81,    82,
      83,    84,    85,    86,    87,    -1,    89,    90,    -1,    92,
      93,    94,    95,    96,    -1,    98,    -1,    -1,   101,    -1,
      -1,   104,    -1,    -1,    -1,   108,    -1,    -1,    -1,   112,
     113,   114,    -1,    -1,   117,    -1,    -1,    -1,    -1,   122,
     123,   124,    -1,    -1,    -1,   128,    -1,   130,    -1,    -1,
      -1,   134,    -1,   136,   137,   138,   139,    -1,    -1,    -1,
     143,    -1,    -1,   146,   147,   148,    -1,    -1,    -1,   152,
      -1,   154,   155,    -1,   157,   158,   159,    -1,    -1,   162,
     163,    -1,   165,   166,   167,   168,   169,   170,    -1,    -1,
     173,   174,   175,    -1,   177,   178,   179,    -1,   181,   182,
     183,   184,    -1,   186,    -1,    -1,    -1,   190,    -1,   192,
      -1,   194,    -1,   196,   197,   198,   199,   200,   201,    -1,
     203,    -1,    -1,    -1,   207,   208,   209,    -1,   211,   212,
      -1,   214,   215,    -1,    -1,    -1,   219,   220,   221,   222,
      -1,    -1,   225,   226,   227,    -1,   229,    -1,   231,    -1,
      -1,    -1,    -1,   236,   237,    -1,    -1,    -1,   241,    -1,
     243,   244,    -1,   246,   247,    -1,    -1,    -1,   251,    -1,
      -1,   254,   255,   256,    -1,    -1,   259,    -1,    -1,   262,
     263,    -1,    -1,    -1,    -1,    -1,   269,   270,    -1,   272,
      -1,   274,    -1,   276,   277,    -1,    -1,   280,    -1,    -1,
      -1,    -1,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,    -1,   301,   302,
     303,    -1,   305,   306,   307,   308,    -1,   310,   311,    -1,
      -1,    -1,    -1,   316,   317,   318,   319,   320,   321,    -1,
      -1,   324,   325,    -1,   327,    -1,   329,    -1,   331,   332,
     333,   334,   335,   336,   337,   338,   339,    -1,   341,   342,
     343,    -1,    -1,   346,   347,   348,   349,    -1,    -1,    -1,
     353,   354,    -1,   356,   357,    -1,   359,   360,   361,    -1,
     363,   364,   365,   366,    -1,   368,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   378,   379,   380,    -1,    -1,
     383,    -1,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,    -1,    -1,   399,   400,   401,    -1,
     403,    -1,   405,   406,   407,   408,   409,    -1,   411,   412,
     413,    -1,    -1,   416,    -1,    -1,    -1,   420,   421,   422,
     423,   424,    -1,    -1,   427,   428,   429,   430,   431,    -1,
     433,   434,    -1,   436,   437,   438,    -1,    -1,   441,    -1,
     443,    -1,   445,   446,    -1,   448,   449,    -1,    -1,    -1,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
      -1,   464,   465,    -1,    -1,    -1,   469,   470,   471,   472,
      -1,    -1,    -1,   476,    -1,    -1,    -1,   480,    -1,   482,
     483,   484,   485,   486,    -1,   488,   489,   490,   491,   492,
     493,    -1,    -1,    -1,    -1,    -1,    -1,   500,   501,    -1,
     503,    -1,    -1,   506,    -1,    -1,   509,   510,   511,    -1,
      -1,   514,   515,    -1,   517,   518,   519,   520,   521,   522,
      -1,    -1,   525,   526,   527,   528,    -1,   530,   531,    -1,
     533,    -1,   535,   536,   537,   538,    -1,   540,   541,   542,
      -1,   544,   545,   546,   547,    -1,    -1,    -1,    -1,    -1,
     553,   554,   555,    -1,    -1,   558,   559,   560,   561,   562,
     563,   564,   565,   566,   567,   568,    -1,   570,   571,    -1,
      -1,   574,    -1,    -1,   577,    -1,   579,    -1,   581,   582,
     583,    -1,    -1,    -1,    -1,    -1,    -1,   590,    -1,    -1,
     593,    -1,    -1,    -1,   597,   598,   599,   600,   601,   602,
      -1,    -1,    -1,    -1,    -1,    -1,   609,   610,    -1,   612,
     613,   614,    -1,    -1,   617,    -1,    -1,    -1,    -1,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,   636,   637,    21,    -1,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    -1,    -1,    -1,    35,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,
      56,    -1,    58,    59,    -1,    61,    62,    -1,    64,    65,
      66,    67,    68,    69,    70,    -1,    72,    73,    74,    75,
      76,    77,    78,    -1,    80,    81,    82,    83,    84,    85,
      86,    87,    -1,    89,    90,    91,    92,    93,    94,    95,
      96,    -1,    98,    -1,    -1,   101,    -1,    -1,   104,    -1,
      -1,    -1,   108,    -1,    -1,    -1,   112,   113,   114,    -1,
      -1,   117,    -1,    -1,    -1,    -1,   122,   123,    -1,    -1,
      -1,    -1,   128,    -1,   130,    -1,    -1,    -1,   134,    -1,
     136,   137,   138,   139,    -1,    -1,    -1,   143,    -1,    -1,
     146,   147,   148,    -1,    -1,    -1,   152,    -1,   154,   155,
      -1,   157,   158,   159,    -1,    -1,   162,   163,    -1,   165,
     166,   167,   168,   169,   170,    -1,    -1,   173,   174,   175,
      -1,    -1,   178,   179,    -1,   181,   182,   183,    -1,    -1,
     186,    -1,    -1,    -1,   190,    -1,   192,   193,   194,    -1,
     196,   197,   198,   199,   200,   201,    -1,   203,    -1,    -1,
      -1,   207,   208,   209,    -1,   211,    -1,    -1,   214,   215,
      -1,    -1,    -1,   219,   220,   221,   222,    -1,    -1,   225,
     226,   227,   228,   229,    -1,   231,    -1,    -1,    -1,    -1,
     236,   237,    -1,    -1,    -1,   241,    -1,   243,   244,    -1,
     246,   247,    -1,    -1,    -1,   251,   252,    -1,   254,   255,
     256,    -1,    -1,   259,    -1,    -1,   262,   263,    -1,   265,
      -1,    -1,    -1,   269,   270,    -1,   272,    -1,   274,    -1,
     276,   277,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,    -1,   301,   302,   303,    -1,   305,
     306,   307,   308,    -1,   310,   311,    -1,    -1,    -1,    -1,
     316,   317,   318,   319,   320,   321,    -1,    -1,   324,   325,
      -1,   327,    -1,   329,    -1,   331,   332,   333,   334,   335,
     336,   337,   338,   339,    -1,    -1,   342,   343,    -1,    -1,
     346,   347,   348,   349,    -1,    -1,    -1,   353,   354,    -1,
      -1,    -1,    -1,   359,   360,   361,    -1,   363,   364,   365,
     366,    -1,   368,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   378,   379,   380,    -1,    -1,   383,    -1,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,    -1,    -1,   399,   400,   401,    -1,   403,    -1,   405,
     406,   407,   408,   409,    -1,   411,   412,   413,    -1,    -1,
     416,    -1,    -1,    -1,   420,   421,   422,   423,   424,    -1,
      -1,   427,   428,   429,   430,   431,    -1,   433,   434,    -1,
     436,   437,   438,    -1,    -1,   441,    -1,   443,    -1,   445,
     446,    -1,   448,   449,    -1,    -1,    -1,   453,   454,   455,
     456,   457,   458,   459,   460,   461,   462,    -1,   464,   465,
     466,    -1,    -1,   469,   470,   471,   472,    -1,    -1,    -1,
     476,    -1,    -1,    -1,   480,    -1,   482,   483,   484,   485,
     486,    -1,   488,   489,   490,   491,   492,   493,   494,    -1,
      -1,    -1,    -1,    -1,   500,   501,    -1,   503,    -1,    -1,
     506,    -1,    -1,   509,   510,   511,    -1,    -1,   514,   515,
      -1,   517,   518,   519,   520,   521,   522,    -1,    -1,   525,
     526,   527,   528,    -1,   530,   531,    -1,   533,    -1,   535,
     536,   537,   538,    -1,    -1,   541,   542,    -1,   544,   545,
     546,   547,    -1,    -1,    -1,    -1,    -1,   553,   554,   555,
      -1,    -1,    -1,   559,   560,   561,   562,    -1,   564,   565,
      -1,   567,   568,    -1,   570,   571,    -1,    -1,   574,    -1,
      -1,   577,    -1,   579,    -1,   581,   582,   583,    -1,    -1,
      -1,    -1,    -1,    -1,   590,    -1,    -1,   593,    -1,    -1,
      -1,   597,   598,   599,   600,   601,   602,    -1,    -1,    -1,
      -1,    -1,    -1,   609,   610,    -1,   612,   613,   614,    -1,
      -1,   617,    -1,    -1,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      21,   637,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    -1,    -1,    -1,    35,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    -1,    48,    49,    -1,
      -1,    52,    -1,    -1,    55,    56,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    66,    67,    68,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    -1,    80,
      81,    82,    83,    84,    85,    86,    87,    -1,    89,    90,
      91,    92,    93,    94,    95,    96,    -1,    98,    -1,    -1,
     101,    -1,    -1,   104,    -1,    -1,    -1,   108,    -1,    -1,
      -1,   112,   113,   114,    -1,    -1,   117,    -1,    -1,    -1,
      -1,   122,   123,    -1,    -1,    -1,    -1,   128,    -1,   130,
      -1,    -1,    -1,   134,    -1,   136,   137,   138,   139,    -1,
      -1,    -1,   143,    -1,    -1,   146,   147,   148,    -1,    -1,
      -1,   152,    -1,   154,   155,    -1,   157,   158,   159,    -1,
      -1,   162,   163,    -1,   165,   166,   167,   168,   169,   170,
      -1,    -1,   173,   174,   175,    -1,    -1,   178,   179,    -1,
     181,   182,   183,    -1,    -1,   186,    -1,    -1,    -1,   190,
      -1,   192,   193,   194,    -1,   196,   197,   198,   199,   200,
     201,    -1,   203,    -1,    -1,    -1,   207,   208,   209,    -1,
     211,    -1,    -1,   214,   215,    -1,    -1,    -1,   219,   220,
     221,   222,    -1,    -1,   225,   226,   227,   228,   229,    -1,
     231,    -1,    -1,    -1,    -1,   236,   237,    -1,    -1,    -1,
     241,    -1,   243,   244,    -1,   246,   247,    -1,    -1,    -1,
     251,   252,    -1,   254,   255,   256,    -1,    -1,   259,    -1,
      -1,   262,   263,    -1,    -1,    -1,    -1,    -1,   269,   270,
      -1,   272,    -1,   274,    -1,   276,   277,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,    -1,
     301,   302,   303,    -1,   305,   306,   307,   308,    -1,   310,
     311,    -1,    -1,    -1,    -1,   316,   317,   318,   319,   320,
     321,    -1,    -1,   324,   325,    -1,   327,    -1,   329,    -1,
     331,   332,   333,   334,   335,   336,   337,   338,   339,    -1,
      -1,   342,   343,    -1,    -1,   346,   347,   348,   349,    -1,
      -1,    -1,   353,   354,    -1,    -1,    -1,    -1,   359,   360,
     361,    -1,   363,   364,   365,   366,    -1,   368,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   378,   379,   380,
      -1,    -1,   383,    -1,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,    -1,    -1,   399,   400,
     401,    -1,   403,    -1,   405,   406,   407,   408,   409,    -1,
     411,   412,   413,    -1,    -1,   416,    -1,    -1,    -1,   420,
     421,   422,   423,   424,    -1,    -1,   427,   428,   429,   430,
     431,    -1,   433,   434,    -1,   436,   437,   438,    -1,    -1,
     441,    -1,   443,    -1,   445,   446,    -1,   448,   449,    -1,
      -1,    -1,   453,   454,   455,   456,   457,   458,   459,   460,
     461,   462,    -1,   464,   465,    -1,    -1,    -1,   469,   470,
     471,   472,    -1,    -1,    -1,   476,    -1,    -1,    -1,   480,
      -1,   482,   483,   484,   485,   486,    -1,   488,   489,   490,
     491,   492,   493,   494,    -1,    -1,    -1,    -1,    -1,   500,
     501,    -1,   503,    -1,    -1,   506,    -1,    -1,   509,   510,
     511,    -1,    -1,   514,   515,    -1,   517,   518,   519,   520,
     521,   522,    -1,    -1,   525,   526,   527,   528,    -1,   530,
     531,    -1,   533,    -1,   535,   536,   537,   538,    -1,    -1,
     541,   542,    -1,   544,   545,   546,   547,    -1,    -1,    -1,
      -1,    -1,   553,   554,   555,    -1,    -1,    -1,   559,   560,
     561,   562,    -1,   564,   565,    -1,   567,   568,    -1,   570,
     571,    -1,    -1,   574,    -1,    -1,   577,    -1,   579,    -1,
     581,   582,   583,    -1,    -1,    -1,    -1,    -1,    -1,   590,
      -1,    -1,   593,    -1,    -1,    -1,   597,   598,   599,   600,
     601,   602,    -1,    -1,    -1,    -1,    -1,    -1,   609,   610,
      -1,   612,   613,   614,    -1,    -1,   617,    -1,    -1,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    21,   637,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    -1,    -1,    -1,    35,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,
      56,    -1,    58,    59,    -1,    61,    62,    -1,    64,    65,
      66,    67,    68,    69,    70,    -1,    72,    73,    74,    75,
      76,    77,    78,    -1,    80,    81,    82,    83,    84,    85,
      86,    87,    -1,    89,    90,    -1,    92,    93,    94,    95,
      96,    -1,    98,    -1,    -1,   101,    -1,    -1,   104,    -1,
      -1,    -1,   108,    -1,    -1,    -1,   112,   113,   114,    -1,
      -1,   117,    -1,    -1,    -1,    -1,   122,   123,    -1,    -1,
      -1,    -1,   128,    -1,   130,    -1,    -1,    -1,   134,    -1,
     136,   137,   138,   139,    -1,    -1,    -1,   143,    -1,    -1,
     146,   147,   148,    -1,    -1,    -1,   152,    -1,   154,   155,
      -1,   157,   158,   159,    -1,    -1,   162,   163,    -1,   165,
     166,   167,   168,   169,   170,    -1,    -1,   173,   174,   175,
      -1,    -1,   178,   179,    -1,   181,   182,   183,    -1,    -1,
     186,    -1,    -1,    -1,   190,    -1,   192,    -1,   194,    -1,
     196,   197,   198,   199,   200,   201,    -1,   203,    -1,    -1,
      -1,   207,   208,   209,    -1,   211,    -1,    -1,   214,   215,
      -1,    -1,    -1,   219,   220,   221,   222,    -1,    -1,   225,
     226,   227,    -1,   229,    -1,   231,    -1,    -1,    -1,    -1,
     236,   237,    -1,    -1,    -1,   241,    -1,   243,   244,    -1,
     246,   247,    -1,    -1,    -1,   251,    -1,    -1,   254,   255,
     256,    -1,    -1,   259,    -1,    -1,   262,   263,    -1,    -1,
      -1,    -1,    -1,   269,   270,    -1,   272,    -1,   274,    -1,
     276,   277,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,    -1,   301,   302,   303,    -1,   305,
     306,   307,   308,    -1,   310,   311,    -1,    -1,    -1,    -1,
     316,   317,   318,   319,   320,   321,    -1,    -1,   324,   325,
      -1,   327,    -1,   329,    -1,   331,   332,   333,   334,   335,
     336,   337,   338,   339,    -1,    -1,   342,   343,    -1,    -1,
     346,   347,   348,   349,    -1,    -1,    -1,   353,   354,    -1,
      -1,    -1,    -1,   359,   360,   361,    -1,   363,   364,   365,
     366,    -1,   368,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   378,   379,   380,    -1,    -1,   383,    -1,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,    -1,    -1,   399,   400,   401,    -1,   403,    -1,   405,
     406,   407,   408,   409,    -1,   411,   412,   413,    -1,    -1,
     416,    -1,    -1,    -1,   420,   421,   422,   423,   424,    -1,
      -1,   427,   428,   429,   430,   431,    -1,   433,   434,    -1,
     436,   437,   438,    -1,    -1,   441,    -1,   443,    -1,   445,
     446,    -1,   448,   449,    -1,    -1,    -1,   453,   454,   455,
     456,   457,   458,   459,   460,   461,   462,    -1,   464,   465,
     466,    -1,    -1,   469,   470,   471,   472,    -1,    -1,    -1,
     476,    -1,    -1,    -1,   480,    -1,   482,   483,   484,   485,
     486,    -1,   488,   489,   490,   491,   492,   493,    -1,    -1,
      -1,    -1,    -1,    -1,   500,   501,    -1,   503,    -1,    -1,
     506,    -1,    -1,   509,   510,   511,    -1,    -1,   514,   515,
      -1,   517,   518,   519,   520,   521,   522,    -1,    -1,   525,
     526,   527,   528,    -1,   530,   531,    -1,   533,    -1,   535,
     536,   537,   538,    -1,    -1,   541,   542,    -1,   544,   545,
     546,   547,    -1,    -1,    -1,    -1,    -1,   553,   554,   555,
      -1,    -1,    -1,   559,   560,   561,   562,    -1,   564,   565,
      -1,   567,   568,    -1,   570,   571,    -1,    -1,   574,    -1,
      -1,   577,    -1,   579,    -1,   581,   582,   583,    -1,    -1,
      -1,    -1,    -1,    -1,   590,    -1,    -1,   593,    -1,    -1,
      -1,   597,   598,   599,   600,   601,   602,    -1,    -1,    -1,
      -1,    -1,    -1,   609,   610,    -1,   612,   613,   614,    -1,
      -1,   617,    -1,    -1,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    14,   630,    -1,    -1,    18,    -1,    -1,
      21,   637,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    -1,    -1,    -1,    35,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    -1,    48,    49,    -1,
      -1,    52,    -1,    -1,    55,    56,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    66,    67,    68,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    -1,    80,
      81,    82,    83,    84,    85,    86,    87,    -1,    89,    90,
      -1,    92,    93,    94,    95,    96,    -1,    98,    -1,    -1,
     101,    -1,    -1,   104,    -1,    -1,    -1,   108,    -1,    -1,
      -1,   112,   113,   114,    -1,    -1,   117,    -1,    -1,    -1,
      -1,   122,   123,    -1,    -1,    -1,    -1,   128,    -1,   130,
      -1,    -1,    -1,   134,    -1,   136,   137,   138,   139,    -1,
      -1,    -1,   143,    -1,    -1,   146,   147,   148,    -1,    -1,
      -1,   152,    -1,   154,   155,    -1,   157,   158,   159,    -1,
      -1,   162,   163,    -1,   165,   166,   167,   168,   169,   170,
      -1,    -1,   173,   174,   175,    -1,    -1,   178,   179,    -1,
     181,   182,   183,    -1,    -1,   186,    -1,    -1,    -1,   190,
      -1,   192,    -1,   194,    -1,   196,   197,   198,   199,   200,
     201,    -1,   203,    -1,    -1,    -1,   207,   208,   209,    -1,
     211,    -1,    -1,   214,   215,    -1,    -1,    -1,   219,   220,
     221,   222,    -1,    -1,   225,   226,   227,    -1,   229,    -1,
     231,    -1,    -1,    -1,    -1,   236,   237,    -1,    -1,    -1,
     241,    -1,   243,   244,    -1,   246,   247,    -1,    -1,    -1,
     251,    -1,    -1,   254,   255,   256,    -1,    -1,   259,    -1,
      -1,   262,   263,    -1,    -1,    -1,    -1,    -1,   269,   270,
      -1,   272,    -1,   274,    -1,   276,   277,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,    -1,
     301,   302,   303,    -1,   305,   306,   307,   308,    -1,   310,
     311,    -1,    -1,    -1,    -1,   316,   317,   318,   319,   320,
     321,    -1,    -1,   324,   325,    -1,   327,    -1,   329,    -1,
     331,   332,   333,   334,   335,   336,   337,   338,   339,    -1,
      -1,   342,   343,    -1,    -1,   346,   347,   348,   349,    -1,
      -1,    -1,   353,   354,    -1,    -1,    -1,    -1,   359,   360,
     361,    -1,   363,   364,   365,   366,    -1,   368,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   378,   379,   380,
      -1,    -1,   383,    -1,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,    -1,    -1,   399,   400,
     401,    -1,   403,    -1,   405,   406,   407,   408,   409,    -1,
     411,   412,   413,    -1,    -1,   416,    -1,    -1,    -1,   420,
     421,   422,   423,   424,    -1,    -1,   427,   428,   429,   430,
     431,    -1,   433,   434,    -1,   436,   437,   438,    -1,    -1,
     441,    -1,   443,    -1,   445,   446,    -1,   448,   449,    -1,
      -1,    -1,   453,   454,   455,   456,   457,   458,   459,   460,
     461,   462,    -1,   464,   465,    -1,    -1,    -1,   469,   470,
     471,   472,    -1,    -1,    -1,   476,    -1,    -1,    -1,   480,
      -1,   482,   483,   484,   485,   486,    -1,   488,   489,   490,
     491,   492,   493,    -1,    -1,    -1,    -1,    -1,    -1,   500,
     501,    -1,   503,    -1,    -1,   506,    -1,    -1,   509,   510,
     511,    -1,    -1,   514,   515,    -1,   517,   518,   519,   520,
     521,   522,    -1,    -1,   525,   526,   527,   528,    -1,   530,
     531,    -1,   533,    -1,   535,   536,   537,   538,    -1,    -1,
     541,   542,    -1,   544,   545,   546,   547,    -1,    -1,    -1,
      -1,    -1,   553,   554,   555,    -1,    -1,    -1,   559,   560,
     561,   562,    -1,   564,   565,    -1,   567,   568,    -1,   570,
     571,    -1,    -1,   574,    -1,    -1,   577,    -1,   579,    -1,
     581,   582,   583,    -1,    -1,    -1,    -1,    -1,    -1,   590,
      -1,    -1,   593,    -1,    -1,    -1,   597,   598,   599,   600,
     601,   602,    -1,    -1,    -1,    -1,    -1,    -1,   609,   610,
      -1,   612,   613,   614,    -1,    -1,   617,    -1,    -1,    -1,
      -1,     5,    -1,     7,     8,     9,    10,    11,    -1,   630,
      14,    -1,    -1,    -1,    18,   636,   637,    21,    -1,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    -1,    -1,
      -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,    -1,
      -1,    55,    56,    -1,    58,    59,    -1,    61,    62,    -1,
      64,    65,    66,    67,    68,    69,    70,    -1,    72,    73,
      74,    75,    76,    77,    78,    -1,    80,    81,    82,    83,
      84,    85,    86,    87,    -1,    89,    90,    -1,    92,    93,
      94,    95,    96,    -1,    98,    -1,    -1,   101,    -1,    -1,
     104,    -1,    -1,    -1,   108,    -1,    -1,    -1,   112,   113,
     114,    -1,    -1,   117,    -1,    -1,    -1,    -1,   122,   123,
      -1,    -1,    -1,    -1,   128,    -1,   130,    -1,    -1,    -1,
     134,    -1,   136,   137,   138,   139,    -1,    -1,    -1,   143,
      -1,    -1,   146,   147,   148,    -1,    -1,    -1,   152,    -1,
     154,   155,    -1,   157,   158,   159,    -1,    -1,   162,   163,
      -1,   165,   166,   167,   168,   169,   170,    -1,    -1,   173,
     174,   175,    -1,    -1,   178,   179,    -1,   181,   182,   183,
      -1,    -1,   186,    -1,    -1,    -1,   190,    -1,   192,    -1,
     194,    -1,   196,   197,   198,   199,   200,   201,    -1,   203,
      -1,    -1,    -1,   207,   208,   209,    -1,   211,    -1,    -1,
     214,   215,    -1,    -1,    -1,   219,   220,   221,   222,    -1,
      -1,   225,   226,   227,    -1,   229,    -1,   231,    -1,    -1,
      -1,    -1,   236,   237,    -1,    -1,    -1,   241,    -1,   243,
     244,    -1,   246,   247,    -1,    -1,    -1,   251,    -1,    -1,
     254,   255,   256,    -1,    -1,   259,    -1,    -1,   262,   263,
      -1,    -1,    -1,    -1,    -1,   269,   270,    -1,   272,    -1,
     274,    -1,   276,   277,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,    -1,   301,   302,   303,
      -1,   305,   306,   307,   308,    -1,   310,   311,    -1,    -1,
      -1,    -1,   316,   317,   318,   319,   320,   321,    -1,    -1,
     324,   325,    -1,   327,    -1,   329,    -1,   331,   332,   333,
     334,   335,   336,   337,   338,   339,    -1,    -1,   342,   343,
      -1,    -1,   346,   347,   348,   349,    -1,    -1,    -1,   353,
     354,    -1,    -1,    -1,    -1,   359,   360,   361,    -1,   363,
     364,   365,   366,    -1,   368,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   378,   379,   380,    -1,    -1,   383,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,    -1,    -1,   399,   400,   401,    -1,   403,
      -1,   405,   406,   407,   408,   409,    -1,   411,   412,   413,
      -1,    -1,   416,    -1,    -1,    -1,   420,   421,   422,   423,
     424,    -1,    -1,   427,   428,   429,   430,   431,    -1,   433,
     434,    -1,   436,   437,   438,    -1,    -1,   441,    -1,   443,
      -1,   445,   446,    -1,   448,   449,    -1,    -1,    -1,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,    -1,
     464,   465,    -1,    -1,    -1,   469,   470,   471,   472,    -1,
      -1,    -1,   476,    -1,    -1,    -1,   480,    -1,   482,   483,
     484,   485,   486,    -1,   488,   489,   490,   491,   492,   493,
      -1,    -1,    -1,    -1,    -1,    -1,   500,   501,    -1,   503,
      -1,    -1,   506,    -1,    -1,   509,   510,   511,    -1,    -1,
     514,   515,    -1,   517,   518,   519,   520,   521,   522,    -1,
      -1,   525,   526,   527,   528,    -1,   530,   531,    -1,   533,
      -1,   535,   536,   537,   538,    -1,    -1,   541,   542,    -1,
     544,   545,   546,   547,    -1,    -1,    -1,    -1,    -1,   553,
     554,   555,    -1,    -1,    -1,   559,   560,   561,   562,    -1,
     564,   565,    -1,   567,   568,    -1,   570,   571,    -1,    -1,
     574,    -1,    -1,   577,    -1,   579,    -1,   581,   582,   583,
      -1,    -1,    -1,    -1,    -1,    -1,   590,    -1,    -1,   593,
      -1,    -1,    -1,   597,   598,   599,   600,   601,   602,    -1,
      -1,    -1,    -1,    -1,    -1,   609,   610,    -1,   612,   613,
     614,    -1,    -1,   617,    -1,    -1,    -1,    -1,     5,    -1,
       7,     8,     9,    10,    11,   629,    -1,    14,    -1,    -1,
      -1,    18,    -1,   637,    21,    -1,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    -1,    -1,    -1,    35,    -1,
      -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,
      -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,    56,
      -1,    58,    59,    -1,    61,    62,    -1,    64,    65,    66,
      67,    68,    69,    70,    -1,    72,    73,    74,    75,    76,
      77,    78,    -1,    80,    81,    82,    83,    84,    85,    86,
      87,    -1,    89,    90,    -1,    92,    93,    94,    95,    96,
      -1,    98,    -1,    -1,   101,    -1,    -1,   104,    -1,    -1,
      -1,   108,    -1,    -1,    -1,   112,   113,   114,    -1,    -1,
     117,    -1,    -1,    -1,    -1,   122,   123,    -1,    -1,    -1,
      -1,   128,    -1,   130,    -1,    -1,    -1,   134,    -1,   136,
     137,   138,   139,    -1,    -1,    -1,   143,    -1,    -1,   146,
     147,   148,    -1,    -1,    -1,   152,    -1,   154,   155,    -1,
     157,   158,   159,    -1,    -1,   162,   163,    -1,   165,   166,
     167,   168,   169,   170,    -1,    -1,   173,   174,   175,    -1,
      -1,   178,   179,    -1,   181,   182,   183,    -1,    -1,   186,
      -1,    -1,    -1,   190,    -1,   192,    -1,   194,    -1,   196,
     197,   198,   199,   200,   201,    -1,   203,    -1,    -1,    -1,
     207,   208,   209,    -1,   211,    -1,    -1,   214,   215,    -1,
      -1,    -1,   219,   220,   221,   222,    -1,    -1,   225,   226,
     227,    -1,   229,    -1,   231,    -1,    -1,    -1,    -1,   236,
     237,    -1,   239,    -1,   241,    -1,   243,   244,    -1,   246,
     247,    -1,    -1,    -1,   251,    -1,    -1,   254,   255,   256,
      -1,    -1,   259,    -1,    -1,   262,   263,    -1,    -1,    -1,
      -1,    -1,   269,   270,    -1,   272,    -1,   274,    -1,   276,
     277,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,    -1,   301,   302,   303,    -1,   305,   306,
     307,   308,    -1,   310,   311,    -1,    -1,    -1,    -1,   316,
     317,   318,   319,   320,   321,    -1,    -1,   324,   325,    -1,
     327,    -1,   329,    -1,   331,   332,   333,   334,   335,   336,
     337,   338,   339,    -1,    -1,   342,   343,    -1,    -1,   346,
     347,   348,   349,    -1,    -1,    -1,   353,   354,    -1,    -1,
      -1,    -1,   359,   360,   361,    -1,   363,   364,   365,   366,
      -1,   368,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   378,   379,   380,    -1,    -1,   383,    -1,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
      -1,    -1,   399,   400,   401,    -1,   403,    -1,   405,   406,
     407,   408,   409,    -1,   411,   412,   413,    -1,    -1,   416,
      -1,    -1,    -1,   420,   421,   422,   423,   424,    -1,    -1,
     427,   428,   429,   430,   431,    -1,   433,   434,    -1,   436,
     437,   438,    -1,    -1,   441,    -1,   443,    -1,   445,   446,
      -1,   448,   449,    -1,    -1,    -1,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,    -1,   464,   465,    -1,
      -1,    -1,   469,   470,   471,   472,    -1,    -1,    -1,   476,
      -1,    -1,    -1,   480,    -1,   482,   483,   484,   485,   486,
      -1,   488,   489,   490,   491,   492,   493,    -1,    -1,    -1,
      -1,    -1,    -1,   500,   501,    -1,   503,    -1,    -1,   506,
      -1,    -1,   509,   510,   511,    -1,    -1,   514,   515,    -1,
     517,   518,   519,   520,   521,   522,    -1,    -1,   525,   526,
     527,   528,    -1,   530,   531,    -1,   533,    -1,   535,   536,
     537,   538,    -1,    -1,   541,   542,    -1,   544,   545,   546,
     547,    -1,    -1,    -1,    -1,    -1,   553,   554,   555,    -1,
      -1,    -1,   559,   560,   561,   562,    -1,   564,   565,    -1,
     567,   568,    -1,   570,   571,    -1,    -1,   574,    -1,    -1,
     577,    -1,   579,    -1,   581,   582,   583,    -1,    -1,    -1,
      -1,    -1,    -1,   590,    -1,    -1,   593,    -1,    -1,    -1,
     597,   598,   599,   600,   601,   602,    -1,    -1,    -1,    -1,
      -1,    -1,   609,   610,    -1,   612,   613,   614,    -1,    -1,
     617,    -1,    -1,     5,    -1,     7,     8,     9,    10,    11,
      -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,
     637,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      -1,    -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,
      52,    -1,    -1,    55,    56,    -1,    58,    59,    -1,    61,
      62,    -1,    64,    65,    66,    67,    68,    69,    70,    -1,
      72,    73,    74,    75,    76,    77,    78,    -1,    80,    81,
      82,    83,    84,    85,    86,    87,    -1,    89,    90,    -1,
      92,    93,    94,    95,    96,    -1,    98,    -1,    -1,   101,
      -1,    -1,   104,    -1,    -1,    -1,   108,    -1,    -1,    -1,
     112,   113,   114,    -1,    -1,   117,    -1,    -1,    -1,    -1,
     122,   123,    -1,    -1,    -1,    -1,   128,    -1,   130,    -1,
      -1,    -1,   134,    -1,   136,   137,   138,   139,    -1,    -1,
      -1,   143,    -1,    -1,   146,   147,   148,    -1,    -1,    -1,
     152,    -1,   154,   155,    -1,   157,   158,   159,    -1,    -1,
     162,   163,    -1,   165,   166,   167,   168,   169,   170,    -1,
      -1,   173,   174,   175,    -1,    -1,   178,   179,    -1,   181,
     182,   183,    -1,    -1,   186,    -1,    -1,    -1,   190,    -1,
     192,    -1,   194,    -1,   196,   197,   198,   199,   200,   201,
      -1,   203,    -1,    -1,    -1,   207,   208,   209,    -1,   211,
      -1,    -1,   214,   215,    -1,    -1,    -1,   219,   220,   221,
     222,    -1,    -1,   225,   226,   227,    -1,   229,    -1,   231,
      -1,    -1,    -1,    -1,   236,   237,    -1,    -1,    -1,   241,
      -1,   243,   244,    -1,   246,   247,    -1,    -1,    -1,   251,
      -1,    -1,   254,   255,   256,    -1,    -1,   259,    -1,    -1,
     262,   263,    -1,    -1,    -1,    -1,    -1,   269,   270,    -1,
     272,    -1,   274,    -1,   276,   277,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,    -1,   301,
     302,   303,    -1,   305,   306,   307,   308,    -1,   310,   311,
      -1,    -1,    -1,    -1,   316,   317,   318,   319,   320,   321,
      -1,    -1,   324,   325,    -1,   327,    -1,   329,    -1,   331,
     332,   333,   334,   335,   336,   337,   338,   339,    -1,    -1,
     342,   343,    -1,    -1,   346,   347,   348,   349,    -1,    -1,
      -1,   353,   354,    -1,    -1,    -1,    -1,   359,   360,   361,
      -1,   363,   364,   365,   366,    -1,   368,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   378,   379,   380,    -1,
      -1,   383,    -1,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,    -1,    -1,   399,   400,   401,
      -1,   403,    -1,   405,   406,   407,   408,   409,    -1,   411,
     412,   413,    -1,    -1,   416,    -1,    -1,    -1,   420,   421,
     422,   423,   424,    -1,    -1,   427,   428,   429,   430,   431,
      -1,   433,   434,    -1,   436,   437,   438,    -1,    -1,   441,
      -1,   443,    -1,   445,   446,    -1,   448,   449,    -1,    -1,
      -1,   453,   454,   455,   456,   457,   458,   459,   460,   461,
     462,    -1,   464,   465,    -1,    -1,    -1,   469,   470,   471,
     472,    -1,    -1,    -1,   476,    -1,    -1,    -1,   480,    -1,
     482,   483,   484,   485,   486,    -1,   488,   489,   490,   491,
     492,   493,    -1,    -1,    -1,    -1,    -1,    -1,   500,   501,
      -1,   503,    -1,    -1,   506,    -1,    -1,   509,   510,   511,
      -1,    -1,   514,   515,    -1,   517,   518,   519,   520,   521,
     522,    -1,    -1,   525,   526,   527,   528,    -1,   530,   531,
      -1,   533,    -1,   535,   536,   537,   538,    -1,    -1,   541,
     542,    -1,   544,   545,   546,   547,    -1,    -1,    -1,    -1,
      -1,   553,   554,   555,    -1,    -1,    -1,   559,   560,   561,
     562,    -1,   564,   565,    -1,   567,   568,    -1,   570,   571,
      -1,    -1,   574,    -1,    -1,   577,    -1,   579,    -1,   581,
     582,   583,    -1,    -1,    -1,    -1,    -1,    -1,   590,    -1,
      -1,   593,    -1,    -1,    -1,   597,   598,   599,   600,   601,
     602,    -1,    -1,    -1,    -1,    -1,    -1,   609,   610,    -1,
     612,   613,   614,    -1,    -1,   617,    -1,    -1,    -1,    -1,
      -1,     5,   624,     7,     8,     9,    10,    11,    -1,    -1,
      14,    -1,    -1,    -1,    18,   637,    -1,    21,    -1,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    -1,    -1,
      -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,    -1,
      -1,    55,    56,    -1,    58,    59,    -1,    61,    62,    -1,
      64,    65,    66,    67,    68,    69,    70,    -1,    72,    73,
      74,    75,    76,    77,    78,    -1,    80,    81,    82,    83,
      84,    85,    86,    87,    -1,    89,    90,    -1,    92,    93,
      94,    95,    96,    -1,    98,    -1,    -1,   101,    -1,    -1,
     104,    -1,    -1,    -1,   108,    -1,    -1,    -1,   112,   113,
     114,    -1,    -1,   117,    -1,    -1,    -1,    -1,   122,   123,
      -1,    -1,    -1,    -1,   128,    -1,   130,    -1,    -1,    -1,
     134,    -1,   136,   137,   138,   139,    -1,    -1,    -1,   143,
      -1,    -1,   146,   147,   148,    -1,    -1,    -1,   152,    -1,
     154,   155,    -1,   157,   158,   159,    -1,    -1,   162,   163,
      -1,   165,   166,   167,   168,   169,   170,    -1,    -1,   173,
     174,   175,    -1,    -1,   178,   179,    -1,   181,   182,   183,
      -1,    -1,   186,    -1,    -1,    -1,   190,    -1,   192,    -1,
     194,    -1,   196,   197,   198,   199,   200,   201,    -1,   203,
      -1,    -1,    -1,   207,   208,   209,    -1,   211,    -1,    -1,
     214,   215,    -1,    -1,    -1,   219,   220,   221,   222,    -1,
      -1,   225,   226,   227,    -1,   229,    -1,   231,    -1,    -1,
      -1,    -1,   236,   237,    -1,    -1,    -1,   241,    -1,   243,
     244,    -1,   246,   247,    -1,    -1,    -1,   251,    -1,    -1,
     254,   255,   256,    -1,    -1,   259,    -1,    -1,   262,   263,
      -1,    -1,    -1,    -1,    -1,   269,   270,    -1,   272,    -1,
     274,    -1,   276,   277,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,    -1,   301,   302,   303,
      -1,   305,   306,   307,   308,    -1,   310,   311,    -1,    -1,
      -1,    -1,   316,   317,   318,   319,   320,   321,    -1,    -1,
     324,   325,    -1,   327,    -1,   329,    -1,   331,   332,   333,
     334,   335,   336,   337,   338,   339,    -1,    -1,   342,   343,
      -1,    -1,   346,   347,   348,   349,    -1,    -1,    -1,   353,
     354,    -1,    -1,    -1,    -1,   359,   360,   361,    -1,   363,
     364,   365,   366,    -1,   368,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   378,   379,   380,    -1,    -1,   383,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,    -1,    -1,   399,   400,   401,    -1,   403,
      -1,   405,   406,   407,   408,   409,    -1,   411,   412,   413,
      -1,    -1,   416,    -1,    -1,    -1,   420,   421,   422,   423,
     424,    -1,    -1,   427,   428,   429,   430,   431,    -1,   433,
     434,    -1,   436,   437,   438,    -1,    -1,   441,    -1,   443,
      -1,   445,   446,    -1,   448,   449,    -1,    -1,    -1,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,    -1,
     464,   465,    -1,    -1,    -1,   469,   470,   471,   472,    -1,
      -1,    -1,   476,    -1,    -1,    -1,   480,    -1,   482,   483,
     484,   485,   486,    -1,   488,   489,   490,   491,   492,   493,
      -1,    -1,    -1,    -1,    -1,    -1,   500,   501,    -1,   503,
      -1,    -1,   506,    -1,    -1,   509,   510,   511,    -1,    -1,
     514,   515,    -1,   517,   518,   519,   520,   521,   522,    -1,
      -1,   525,   526,   527,   528,    -1,   530,   531,    -1,   533,
      -1,   535,   536,   537,   538,    -1,    -1,   541,   542,    -1,
     544,   545,   546,   547,    -1,    -1,    -1,    -1,    -1,   553,
     554,   555,    -1,    -1,    -1,   559,   560,   561,   562,    -1,
     564,   565,    -1,   567,   568,    -1,   570,   571,    -1,    -1,
     574,    -1,    -1,   577,    -1,   579,    -1,   581,   582,   583,
      -1,    -1,    -1,    -1,    -1,    -1,   590,    -1,    -1,   593,
      -1,    -1,    -1,   597,   598,   599,   600,   601,   602,    -1,
      -1,    -1,    -1,    -1,    -1,   609,   610,    -1,   612,   613,
     614,    -1,    -1,   617,    -1,    -1,    -1,    -1,     5,    -1,
       7,     8,     9,    10,    11,   629,    -1,    14,    -1,    -1,
      -1,    18,    -1,   637,    21,    -1,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    -1,    -1,    -1,    35,    -1,
      -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,
      -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,    56,
      -1,    58,    59,    -1,    61,    62,    -1,    64,    65,    66,
      67,    68,    69,    70,    -1,    72,    73,    74,    75,    76,
      77,    78,    -1,    80,    81,    82,    83,    84,    85,    86,
      87,    -1,    89,    90,    -1,    92,    93,    94,    95,    96,
      -1,    98,    -1,    -1,   101,    -1,    -1,   104,    -1,    -1,
      -1,   108,    -1,    -1,    -1,   112,   113,   114,    -1,    -1,
     117,    -1,    -1,    -1,    -1,   122,   123,    -1,    -1,    -1,
      -1,   128,    -1,   130,    -1,    -1,    -1,   134,    -1,   136,
     137,   138,   139,    -1,    -1,    -1,   143,    -1,    -1,   146,
     147,   148,    -1,    -1,    -1,   152,    -1,   154,   155,    -1,
     157,   158,   159,    -1,    -1,   162,   163,    -1,   165,   166,
     167,   168,   169,   170,    -1,    -1,   173,   174,   175,    -1,
      -1,   178,   179,    -1,   181,   182,   183,    -1,    -1,   186,
      -1,    -1,    -1,   190,    -1,   192,    -1,   194,    -1,   196,
     197,   198,   199,   200,   201,    -1,   203,    -1,    -1,    -1,
     207,   208,   209,    -1,   211,    -1,    -1,   214,   215,    -1,
      -1,    -1,   219,   220,   221,   222,    -1,    -1,   225,   226,
     227,    -1,   229,    -1,   231,    -1,    -1,    -1,    -1,   236,
     237,    -1,    -1,    -1,   241,    -1,   243,   244,    -1,   246,
     247,    -1,    -1,    -1,   251,    -1,    -1,   254,   255,   256,
      -1,    -1,   259,    -1,    -1,   262,   263,    -1,    -1,    -1,
      -1,    -1,   269,   270,    -1,   272,    -1,   274,    -1,   276,
     277,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,    -1,   301,   302,   303,    -1,   305,   306,
     307,   308,    -1,   310,   311,    -1,    -1,    -1,    -1,   316,
     317,   318,   319,   320,   321,    -1,    -1,   324,   325,    -1,
     327,    -1,   329,    -1,   331,   332,   333,   334,   335,   336,
     337,   338,   339,    -1,    -1,   342,   343,    -1,    -1,   346,
     347,   348,   349,    -1,    -1,    -1,   353,   354,    -1,    -1,
      -1,    -1,   359,   360,   361,    -1,   363,   364,   365,   366,
      -1,   368,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   378,   379,   380,    -1,    -1,   383,    -1,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
      -1,    -1,   399,   400,   401,    -1,   403,    -1,   405,   406,
     407,   408,   409,    -1,   411,   412,   413,    -1,    -1,   416,
      -1,    -1,    -1,   420,   421,   422,   423,   424,    -1,    -1,
     427,   428,   429,   430,   431,    -1,   433,   434,    -1,   436,
     437,   438,    -1,    -1,   441,    -1,   443,    -1,   445,   446,
      -1,   448,   449,    -1,    -1,    -1,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,    -1,   464,   465,    -1,
      -1,    -1,   469,   470,   471,   472,    -1,    -1,    -1,   476,
      -1,    -1,    -1,   480,    -1,   482,   483,   484,   485,   486,
      -1,   488,   489,   490,   491,   492,   493,    -1,    -1,    -1,
      -1,    -1,    -1,   500,   501,    -1,   503,    -1,    -1,   506,
      -1,    -1,   509,   510,   511,    -1,    -1,   514,   515,    -1,
     517,   518,   519,   520,   521,   522,    -1,    -1,   525,   526,
     527,   528,    -1,   530,   531,    -1,   533,    -1,   535,   536,
     537,   538,    -1,    -1,   541,   542,    -1,   544,   545,   546,
     547,    -1,    -1,    -1,    -1,    -1,   553,   554,   555,    -1,
      -1,    -1,   559,   560,   561,   562,    -1,   564,   565,    -1,
     567,   568,    -1,   570,   571,    -1,    -1,   574,    -1,    -1,
     577,    -1,   579,    -1,   581,   582,   583,    -1,    -1,    -1,
      -1,    -1,    -1,   590,    -1,    -1,   593,    -1,    -1,    -1,
     597,   598,   599,   600,   601,   602,    -1,    -1,    -1,    -1,
      -1,    -1,   609,   610,    -1,   612,   613,   614,    -1,    -1,
     617,    -1,    -1,    -1,    -1,     5,    -1,     7,     8,     9,
      10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,   636,
     637,    21,    -1,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,    39,
      -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,    49,
      -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,    59,
      -1,    61,    62,    -1,    64,    65,    66,    67,    68,    69,
      70,    -1,    72,    73,    74,    75,    76,    77,    78,    -1,
      80,    81,    82,    83,    84,    85,    86,    87,    -1,    89,
      90,    -1,    92,    93,    94,    95,    96,    -1,    98,    -1,
      -1,   101,    -1,    -1,   104,    -1,    -1,    -1,   108,    -1,
      -1,    -1,   112,   113,   114,    -1,    -1,   117,    -1,    -1,
      -1,    -1,   122,   123,    -1,    -1,    -1,    -1,   128,    -1,
     130,    -1,    -1,    -1,   134,    -1,   136,   137,   138,   139,
      -1,    -1,    -1,   143,    -1,    -1,   146,   147,   148,    -1,
      -1,    -1,   152,    -1,   154,   155,    -1,   157,   158,   159,
      -1,    -1,   162,   163,    -1,   165,   166,   167,   168,   169,
     170,    -1,    -1,   173,   174,   175,    -1,    -1,   178,   179,
      -1,   181,   182,   183,    -1,    -1,   186,    -1,    -1,    -1,
     190,    -1,   192,    -1,   194,    -1,   196,   197,   198,   199,
     200,   201,    -1,   203,    -1,    -1,    -1,   207,   208,   209,
      -1,   211,    -1,    -1,   214,   215,    -1,    -1,    -1,   219,
     220,   221,   222,    -1,    -1,   225,   226,   227,    -1,   229,
      -1,   231,    -1,    -1,    -1,    -1,   236,   237,    -1,    -1,
      -1,   241,    -1,   243,   244,    -1,   246,   247,    -1,    -1,
      -1,   251,    -1,    -1,   254,   255,   256,    -1,    -1,   259,
      -1,    -1,   262,   263,    -1,    -1,    -1,    -1,    -1,   269,
     270,    -1,   272,    -1,   274,    -1,   276,   277,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
      -1,   301,   302,   303,    -1,   305,   306,   307,   308,    -1,
     310,   311,    -1,    -1,    -1,    -1,   316,   317,   318,   319,
     320,   321,    -1,    -1,   324,   325,    -1,   327,    -1,   329,
      -1,   331,   332,   333,   334,   335,   336,   337,   338,   339,
      -1,    -1,   342,   343,    -1,    -1,   346,   347,   348,   349,
      -1,    -1,    -1,   353,   354,    -1,    -1,    -1,    -1,   359,
     360,   361,    -1,   363,   364,   365,   366,    -1,   368,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   378,   379,
     380,    -1,    -1,   383,    -1,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,    -1,    -1,   399,
     400,   401,    -1,   403,    -1,   405,   406,   407,   408,   409,
      -1,   411,   412,   413,    -1,    -1,   416,    -1,    -1,    -1,
     420,   421,   422,   423,   424,    -1,    -1,   427,   428,   429,
     430,   431,    -1,   433,   434,    -1,   436,   437,   438,    -1,
      -1,   441,    -1,   443,    -1,   445,   446,    -1,   448,   449,
      -1,    -1,    -1,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   462,    -1,   464,   465,    -1,    -1,    -1,   469,
     470,   471,   472,    -1,    -1,    -1,   476,    -1,    -1,    -1,
     480,    -1,   482,   483,   484,   485,   486,    -1,   488,   489,
     490,   491,   492,   493,    -1,    -1,    -1,    -1,    -1,    -1,
     500,   501,    -1,   503,    -1,    -1,   506,    -1,    -1,   509,
     510,   511,    -1,    -1,   514,   515,    -1,   517,   518,   519,
     520,   521,   522,    -1,    -1,   525,   526,   527,   528,    -1,
     530,   531,    -1,   533,    -1,   535,   536,   537,   538,    -1,
      -1,   541,   542,    -1,   544,   545,   546,   547,    -1,    -1,
      -1,    -1,    -1,   553,   554,   555,    -1,    -1,    -1,   559,
     560,   561,   562,    -1,   564,   565,    -1,   567,   568,    -1,
     570,   571,    -1,    -1,   574,    -1,    -1,   577,    -1,   579,
      -1,   581,   582,   583,    -1,    -1,    -1,    -1,    -1,    -1,
     590,    -1,    -1,   593,    -1,    -1,    -1,   597,   598,   599,
     600,   601,   602,    -1,    -1,    -1,    -1,    -1,    -1,   609,
     610,    -1,   612,   613,   614,    -1,    -1,   617,    -1,    -1,
       5,    -1,     7,     8,     9,    10,    11,    -1,    -1,    14,
      -1,    -1,    -1,    18,    -1,    -1,    21,   637,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    -1,    -1,    -1,
      35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,
      -1,    46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,
      55,    56,    -1,    58,    59,    -1,    61,    62,    -1,    64,
      65,    66,    67,    68,    69,    70,    -1,    72,    73,    74,
      75,    76,    77,    78,    -1,    80,    81,    82,    83,    84,
      85,    86,    87,    -1,    89,    90,    -1,    92,    93,    94,
      95,    96,    -1,    98,    -1,    -1,   101,    -1,    -1,   104,
      -1,    -1,    -1,   108,    -1,    -1,    -1,   112,   113,   114,
      -1,    -1,   117,    -1,    -1,    -1,    -1,   122,   123,    -1,
      -1,    -1,    -1,   128,    -1,   130,    -1,    -1,    -1,   134,
      -1,   136,   137,   138,   139,    -1,    -1,    -1,   143,    -1,
      -1,   146,   147,   148,    -1,    -1,    -1,   152,    -1,   154,
     155,    -1,   157,   158,   159,    -1,    -1,   162,   163,    -1,
     165,   166,   167,   168,   169,   170,    -1,    -1,   173,   174,
     175,    -1,    -1,   178,   179,    -1,   181,   182,   183,    -1,
      -1,   186,    -1,    -1,    -1,   190,    -1,   192,    -1,   194,
      -1,   196,   197,   198,   199,   200,   201,    -1,   203,    -1,
      -1,    -1,   207,   208,   209,    -1,   211,    -1,    -1,   214,
     215,    -1,    -1,    -1,   219,   220,   221,   222,    -1,    -1,
     225,   226,   227,    -1,   229,    -1,   231,    -1,    -1,    -1,
      -1,   236,   237,    -1,    -1,    -1,   241,    -1,   243,   244,
      -1,   246,   247,    -1,    -1,    -1,   251,    -1,    -1,   254,
     255,   256,    -1,    -1,   259,    -1,    -1,   262,   263,    -1,
      -1,    -1,    -1,    -1,   269,   270,    -1,   272,    -1,   274,
      -1,   276,   277,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,    -1,   301,   302,   303,    -1,
     305,   306,   307,   308,    -1,   310,   311,    -1,    -1,    -1,
      -1,   316,   317,   318,   319,   320,   321,    -1,    -1,   324,
     325,    -1,   327,    -1,   329,    -1,   331,   332,   333,   334,
     335,   336,   337,   338,   339,    -1,    -1,   342,   343,    -1,
      -1,   346,   347,   348,   349,    -1,    -1,    -1,   353,   354,
      -1,    -1,    -1,    -1,   359,   360,   361,    -1,   363,   364,
     365,   366,    -1,   368,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   378,   379,   380,    -1,    -1,   383,    -1,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,    -1,    -1,   399,   400,   401,    -1,   403,    -1,
     405,   406,   407,   408,   409,    -1,   411,   412,   413,    -1,
      -1,   416,    -1,    -1,    -1,   420,   421,   422,   423,   424,
      -1,    -1,   427,   428,   429,   430,   431,    -1,   433,   434,
      -1,   436,   437,   438,    -1,    -1,   441,    -1,   443,    -1,
     445,   446,    -1,   448,   449,    -1,    -1,    -1,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,    -1,   464,
     465,    -1,    -1,    -1,   469,   470,   471,   472,    -1,    -1,
      -1,   476,    -1,    -1,    -1,   480,    -1,   482,   483,   484,
     485,   486,    -1,   488,   489,   490,   491,   492,   493,    -1,
      -1,    -1,    -1,    -1,    -1,   500,   501,    -1,   503,    -1,
      -1,   506,    -1,    -1,   509,   510,   511,    -1,    -1,   514,
     515,    -1,   517,   518,   519,   520,   521,   522,    -1,    -1,
     525,   526,   527,   528,    -1,   530,   531,    -1,   533,    -1,
     535,   536,   537,   538,    -1,    -1,   541,   542,    -1,   544,
     545,   546,   547,    -1,    -1,    -1,    -1,    -1,   553,   554,
     555,    -1,    -1,    -1,   559,   560,   561,   562,    -1,   564,
     565,    -1,   567,   568,    -1,   570,   571,    -1,    -1,   574,
      -1,    -1,   577,    -1,   579,    -1,   581,   582,   583,    -1,
      -1,    -1,    -1,    -1,    -1,   590,    -1,    -1,   593,    -1,
      -1,    -1,   597,   598,   599,   600,   601,   602,    -1,    -1,
      -1,    -1,    -1,    -1,   609,   610,    -1,   612,   613,   614,
      -1,    -1,   617,    -1,    -1,     5,    -1,     7,     8,     9,
      10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,
      -1,    21,   637,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,    39,
      -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,    49,
      -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,    59,
      -1,    61,    62,    -1,    64,    65,    66,    67,    68,    69,
      70,    -1,    72,    73,    74,    75,    76,    77,    78,    -1,
      80,    81,    82,    83,    84,    85,    86,    87,    -1,    89,
      90,    -1,    92,    93,    94,    95,    96,    -1,    98,    -1,
      -1,   101,    -1,    -1,   104,    -1,    -1,    -1,   108,    -1,
      -1,    -1,   112,   113,   114,    -1,    -1,   117,    -1,    -1,
      -1,    -1,   122,   123,    -1,    -1,    -1,    -1,   128,    -1,
     130,    -1,    -1,    -1,   134,    -1,   136,   137,   138,   139,
      -1,    -1,    -1,   143,    -1,    -1,   146,   147,   148,    -1,
      -1,    -1,   152,    -1,   154,   155,    -1,   157,   158,   159,
      -1,    -1,   162,   163,    -1,   165,   166,   167,   168,   169,
     170,    -1,    -1,   173,   174,   175,    -1,    -1,   178,   179,
      -1,   181,   182,   183,    -1,    -1,   186,    -1,    -1,    -1,
     190,    -1,   192,    -1,   194,    -1,   196,   197,   198,   199,
     200,   201,    -1,   203,    -1,    -1,    -1,   207,   208,   209,
      -1,   211,    -1,    -1,   214,   215,    -1,    -1,    -1,   219,
     220,   221,   222,    -1,    -1,   225,   226,   227,    -1,   229,
      -1,   231,    -1,    -1,    -1,    -1,   236,   237,    -1,    -1,
      -1,   241,    -1,   243,   244,    -1,   246,   247,    -1,    -1,
      -1,   251,    -1,    -1,   254,   255,   256,    -1,    -1,   259,
      -1,    -1,   262,   263,    -1,    -1,    -1,    -1,    -1,   269,
     270,    -1,   272,    -1,   274,    -1,   276,   277,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
      -1,   301,   302,   303,    -1,   305,   306,   307,   308,    -1,
     310,   311,    -1,    -1,    -1,    -1,   316,   317,   318,   319,
     320,   321,    -1,    -1,   324,   325,    -1,   327,    -1,   329,
      -1,   331,   332,   333,   334,   335,   336,   337,   338,   339,
      -1,    -1,   342,   343,    -1,    -1,   346,   347,   348,   349,
      -1,    -1,    -1,   353,   354,    -1,    -1,    -1,    -1,   359,
     360,   361,    -1,   363,   364,   365,   366,    -1,   368,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   378,   379,
     380,    -1,    -1,   383,    -1,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,    -1,    -1,   399,
     400,   401,    -1,   403,    -1,   405,   406,   407,   408,   409,
      -1,   411,   412,   413,    -1,    -1,   416,    -1,    -1,    -1,
     420,   421,   422,   423,   424,    -1,    -1,   427,   428,   429,
     430,   431,    -1,   433,   434,    -1,   436,   437,   438,    -1,
      -1,   441,    -1,   443,    -1,   445,   446,    -1,   448,   449,
      -1,    -1,    -1,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   462,    -1,   464,   465,    -1,    -1,    -1,   469,
     470,   471,   472,    -1,    -1,    -1,   476,    -1,    -1,    -1,
     480,    -1,   482,   483,   484,   485,   486,    -1,   488,   489,
     490,   491,   492,   493,    -1,    -1,    -1,    -1,    -1,    -1,
     500,   501,    -1,   503,    -1,    -1,   506,    -1,    -1,   509,
     510,   511,    -1,    -1,   514,   515,    -1,   517,   518,   519,
     520,   521,   522,    -1,    -1,   525,   526,   527,   528,    -1,
     530,   531,    -1,   533,    -1,   535,   536,   537,   538,    -1,
      -1,   541,   542,    -1,   544,   545,   546,   547,    -1,    -1,
      -1,    -1,    -1,   553,   554,   555,    -1,    -1,    -1,   559,
     560,   561,   562,    -1,   564,   565,    -1,   567,   568,    -1,
     570,   571,    -1,    -1,   574,    -1,    -1,   577,    -1,   579,
      -1,   581,   582,   583,    -1,    -1,    -1,    -1,    -1,    -1,
     590,    -1,    -1,   593,    -1,    -1,    -1,   597,   598,   599,
     600,   601,   602,    -1,    -1,    -1,    -1,    -1,    -1,   609,
     610,    -1,   612,   613,   614,    -1,    -1,   617,    -1,    -1,
       5,    -1,     7,     8,     9,    10,    11,    -1,    -1,    14,
      -1,    -1,    -1,    18,    -1,    -1,    21,   637,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    -1,    -1,    -1,
      35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,
      -1,    46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,
      55,    56,    -1,    58,    59,    -1,    61,    62,    -1,    64,
      65,    66,    67,    68,    69,    70,    -1,    72,    73,    74,
      75,    76,    77,    78,    -1,    80,    81,    82,    83,    84,
      85,    86,    87,    -1,    89,    90,    -1,    92,    93,    94,
      95,    96,    -1,    98,    -1,    -1,   101,    -1,    -1,   104,
      -1,    -1,    -1,   108,    -1,    -1,    -1,   112,   113,   114,
      -1,    -1,   117,    -1,    -1,    -1,    -1,   122,   123,    -1,
      -1,    -1,    -1,   128,    -1,   130,    -1,    -1,    -1,   134,
      -1,   136,   137,   138,   139,    -1,    -1,    -1,   143,    -1,
      -1,   146,   147,   148,    -1,    -1,    -1,   152,    -1,   154,
     155,    -1,   157,   158,   159,    -1,    -1,   162,   163,    -1,
     165,   166,   167,   168,   169,   170,    -1,    -1,   173,   174,
     175,    -1,    -1,   178,   179,    -1,   181,   182,   183,    -1,
      -1,   186,    -1,    -1,    -1,   190,    -1,   192,    -1,   194,
      -1,   196,   197,   198,   199,   200,   201,    -1,   203,    -1,
      -1,    -1,   207,   208,   209,    -1,   211,    -1,    -1,   214,
     215,    -1,    -1,    -1,   219,   220,   221,   222,    -1,    -1,
     225,   226,   227,    -1,   229,    -1,   231,    -1,    -1,    -1,
      -1,   236,   237,    -1,    -1,    -1,   241,    -1,   243,   244,
      -1,   246,   247,    -1,    -1,    -1,   251,    -1,    -1,   254,
     255,   256,    -1,    -1,   259,    -1,    -1,   262,   263,    -1,
      -1,    -1,    -1,    -1,   269,   270,    -1,   272,    -1,   274,
      -1,   276,   277,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,    -1,   301,   302,   303,    -1,
     305,   306,   307,   308,    -1,   310,   311,    -1,    -1,    -1,
      -1,   316,   317,   318,   319,   320,   321,    -1,    -1,   324,
     325,    -1,   327,    -1,   329,    -1,   331,   332,   333,   334,
     335,   336,   337,   338,   339,    -1,    -1,   342,   343,    -1,
      -1,   346,   347,   348,   349,    -1,    -1,    -1,   353,   354,
      -1,    -1,    -1,    -1,   359,   360,   361,    -1,   363,   364,
     365,   366,    -1,   368,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   378,   379,   380,    -1,    -1,   383,    -1,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,    -1,    -1,   399,   400,   401,    -1,   403,    -1,
     405,   406,   407,   408,   409,    -1,   411,   412,   413,    -1,
      -1,   416,    -1,    -1,    -1,   420,   421,   422,   423,   424,
      -1,    -1,   427,   428,   429,   430,   431,    -1,   433,   434,
      -1,   436,   437,   438,    -1,    -1,   441,    -1,   443,    -1,
     445,   446,    -1,   448,   449,    -1,    -1,    -1,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,    -1,   464,
     465,    -1,    -1,    -1,   469,   470,   471,   472,    -1,    -1,
      -1,   476,    -1,    -1,    -1,   480,    -1,   482,   483,   484,
     485,   486,    -1,   488,   489,   490,   491,   492,   493,    -1,
      -1,    -1,    -1,    -1,    -1,   500,   501,    -1,   503,    -1,
      -1,   506,    -1,    -1,   509,   510,   511,    -1,    -1,   514,
     515,    -1,   517,   518,   519,   520,   521,   522,    -1,    -1,
     525,   526,   527,   528,    -1,   530,   531,    -1,   533,    -1,
     535,   536,   537,   538,    -1,    -1,   541,   542,    -1,   544,
     545,   546,   547,    -1,    -1,    -1,    -1,    -1,   553,   554,
     555,    -1,    -1,    -1,   559,   560,   561,   562,    -1,   564,
     565,    -1,   567,   568,    -1,   570,   571,    -1,    -1,   574,
      -1,    -1,   577,    -1,   579,    -1,   581,   582,   583,    -1,
      -1,    -1,    -1,    -1,    -1,   590,    -1,    -1,   593,    -1,
      -1,    -1,   597,   598,   599,   600,   601,   602,    -1,    -1,
      -1,    -1,    -1,    -1,   609,   610,    -1,   612,   613,   614,
      -1,    -1,   617,    -1,    -1,     5,    -1,     7,     8,     9,
      10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,
      -1,    21,   637,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,    39,
      -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,    49,
      -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,    59,
      60,    61,    62,    -1,    64,    65,    66,    67,    68,    69,
      70,    -1,    72,    73,    74,    75,    76,    77,    78,    -1,
      80,    81,    82,    83,    84,    85,    86,    87,    -1,    89,
      90,    -1,    92,    93,    94,    95,    96,    -1,    98,    -1,
      -1,   101,    -1,    -1,   104,    -1,    -1,    -1,   108,    -1,
      -1,    -1,   112,   113,   114,    -1,    -1,   117,    -1,    -1,
      -1,    -1,   122,   123,    -1,    -1,    -1,   127,   128,    -1,
     130,    -1,    -1,    -1,   134,    -1,   136,   137,   138,   139,
      -1,    -1,    -1,   143,    -1,    -1,   146,   147,   148,    -1,
      -1,    -1,   152,    -1,   154,   155,    -1,   157,   158,   159,
      -1,    -1,   162,   163,    -1,   165,   166,   167,   168,   169,
     170,    -1,    -1,   173,   174,   175,    -1,    -1,   178,   179,
      -1,   181,   182,   183,    -1,    -1,   186,    -1,    -1,    -1,
     190,    -1,   192,    -1,   194,    -1,   196,   197,   198,   199,
     200,   201,    -1,   203,    -1,    -1,    -1,   207,   208,   209,
      -1,   211,    -1,    -1,   214,   215,    -1,    -1,    -1,   219,
     220,   221,   222,    -1,    -1,   225,   226,   227,    -1,   229,
      -1,   231,    -1,    -1,    -1,    -1,   236,   237,    -1,    -1,
      -1,   241,    -1,   243,   244,    -1,   246,   247,    -1,    -1,
      -1,   251,    -1,    -1,   254,   255,   256,    -1,    -1,   259,
      -1,    -1,   262,   263,    -1,    -1,    -1,    -1,    -1,   269,
     270,    -1,   272,    -1,   274,    -1,   276,   277,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
      -1,   301,   302,   303,    -1,   305,   306,   307,   308,    -1,
     310,   311,    -1,    -1,    -1,    -1,   316,   317,   318,   319,
     320,   321,    -1,    -1,   324,   325,    -1,   327,    -1,   329,
      -1,   331,   332,   333,   334,   335,   336,   337,   338,   339,
      -1,    -1,   342,   343,    -1,    -1,   346,   347,   348,   349,
      -1,    -1,    -1,   353,   354,    -1,    -1,    -1,    -1,   359,
     360,   361,    -1,   363,   364,   365,   366,    -1,   368,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   378,   379,
     380,    -1,    -1,   383,    -1,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,    -1,    -1,   399,
     400,   401,    -1,   403,    -1,   405,   406,   407,   408,   409,
      -1,   411,   412,   413,    -1,    -1,   416,    -1,    -1,    -1,
     420,   421,   422,   423,   424,    -1,    -1,   427,   428,   429,
     430,   431,    -1,   433,   434,    -1,   436,   437,   438,    -1,
      -1,   441,    -1,   443,    -1,   445,   446,    -1,   448,   449,
      -1,    -1,    -1,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   462,    -1,   464,   465,    -1,    -1,    -1,   469,
     470,   471,   472,    -1,    -1,    -1,   476,    -1,    -1,    -1,
     480,    -1,   482,   483,   484,   485,   486,    -1,   488,   489,
     490,   491,   492,   493,    -1,    -1,    -1,    -1,    -1,    -1,
     500,   501,    -1,   503,    -1,    -1,   506,    -1,    -1,   509,
     510,   511,    -1,    -1,   514,   515,    -1,   517,   518,   519,
     520,   521,   522,    -1,    -1,   525,   526,   527,   528,    -1,
     530,   531,    -1,   533,    -1,   535,   536,   537,   538,    -1,
      -1,   541,   542,    -1,   544,   545,   546,   547,    -1,    -1,
      -1,    -1,    -1,   553,   554,   555,    -1,    -1,    -1,   559,
     560,   561,   562,    -1,   564,   565,    -1,   567,   568,    -1,
     570,   571,    -1,    -1,   574,    -1,    -1,   577,    -1,   579,
      -1,   581,   582,   583,    -1,    -1,    -1,    -1,    -1,    -1,
     590,    -1,    -1,   593,    -1,    -1,    -1,   597,   598,   599,
     600,   601,   602,    -1,    -1,    -1,    -1,    -1,    -1,   609,
     610,    -1,   612,   613,   614,    -1,    -1,   617,    -1,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    21,   636,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    -1,    -1,    -1,    35,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,
      56,    -1,    58,    59,    -1,    61,    62,    -1,    64,    65,
      66,    67,    68,    69,    70,    -1,    72,    73,    74,    75,
      76,    77,    78,    -1,    80,    81,    82,    83,    84,    85,
      86,    87,    -1,    89,    90,    -1,    92,    93,    94,    95,
      96,    -1,    98,    -1,    -1,   101,    -1,    -1,   104,    -1,
      -1,    -1,   108,    -1,    -1,    -1,   112,   113,   114,    -1,
      -1,   117,    -1,    -1,    -1,    -1,   122,   123,    -1,    -1,
      -1,    -1,   128,    -1,   130,    -1,    -1,    -1,   134,    -1,
     136,   137,   138,   139,    -1,    -1,    -1,   143,    -1,    -1,
     146,   147,   148,    -1,    -1,    -1,   152,    -1,   154,   155,
      -1,   157,   158,   159,    -1,    -1,   162,   163,    -1,   165,
     166,   167,   168,   169,   170,    -1,    -1,   173,   174,   175,
      -1,    -1,   178,   179,    -1,   181,   182,   183,    -1,    -1,
     186,    -1,    -1,    -1,   190,    -1,   192,    -1,   194,    -1,
     196,   197,   198,   199,   200,   201,    -1,   203,    -1,    -1,
      -1,   207,   208,   209,    -1,   211,    -1,    -1,   214,   215,
      -1,    -1,    -1,   219,   220,   221,   222,    -1,    -1,   225,
     226,   227,    -1,   229,    -1,   231,    -1,    -1,    -1,    -1,
     236,   237,    -1,    -1,    -1,   241,    -1,   243,   244,    -1,
     246,   247,    -1,    -1,    -1,   251,    -1,    -1,   254,   255,
     256,    -1,    -1,   259,    -1,    -1,   262,   263,   264,    -1,
      -1,    -1,    -1,   269,   270,    -1,   272,    -1,   274,    -1,
     276,   277,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,    -1,   301,   302,   303,    -1,   305,
     306,   307,   308,    -1,   310,   311,    -1,    -1,    -1,    -1,
     316,   317,   318,   319,   320,   321,    -1,    -1,   324,   325,
      -1,   327,    -1,   329,    -1,   331,   332,   333,   334,   335,
     336,   337,   338,   339,    -1,    -1,   342,   343,    -1,    -1,
     346,   347,   348,   349,    -1,    -1,    -1,   353,   354,    -1,
      -1,    -1,    -1,   359,   360,   361,    -1,   363,   364,   365,
     366,    -1,   368,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   378,   379,   380,    -1,    -1,   383,    -1,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,    -1,    -1,   399,   400,   401,    -1,   403,    -1,   405,
     406,   407,   408,   409,    -1,   411,   412,   413,    -1,    -1,
     416,    -1,    -1,    -1,   420,   421,   422,   423,   424,    -1,
      -1,   427,   428,   429,   430,   431,    -1,   433,   434,    -1,
     436,   437,   438,    -1,    -1,   441,    -1,   443,    -1,   445,
     446,    -1,   448,   449,    -1,    -1,    -1,   453,   454,   455,
     456,   457,   458,   459,   460,   461,   462,    -1,   464,   465,
      -1,    -1,    -1,   469,   470,   471,   472,    -1,    -1,    -1,
     476,    -1,    -1,    -1,   480,    -1,   482,   483,   484,   485,
     486,    -1,   488,   489,   490,   491,   492,   493,    -1,    -1,
      -1,    -1,    -1,    -1,   500,   501,    -1,   503,    -1,    -1,
     506,    -1,    -1,   509,   510,   511,    -1,    -1,   514,   515,
      -1,   517,   518,   519,   520,   521,   522,    -1,    -1,   525,
     526,   527,   528,    -1,   530,   531,    -1,   533,    -1,   535,
     536,   537,   538,    -1,   540,   541,   542,    -1,   544,   545,
     546,   547,    -1,    -1,    -1,    -1,    -1,   553,   554,   555,
      -1,    -1,    -1,   559,   560,   561,   562,    -1,   564,   565,
      -1,   567,   568,    -1,   570,   571,    -1,    -1,   574,    -1,
      -1,   577,    -1,   579,    -1,   581,   582,   583,    -1,    -1,
      -1,    -1,    -1,    -1,   590,    -1,    -1,   593,    -1,    -1,
      -1,   597,   598,   599,   600,   601,   602,    -1,    -1,    -1,
      -1,    -1,    -1,   609,   610,    -1,   612,   613,   614,    -1,
      -1,   617,    -1,     5,    -1,     7,     8,     9,    10,    11,
      -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,
     636,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      -1,    -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,
      52,    -1,    -1,    55,    56,    -1,    58,    59,    -1,    61,
      62,    -1,    64,    65,    66,    67,    68,    69,    70,    -1,
      72,    73,    74,    75,    76,    77,    78,    -1,    80,    81,
      82,    83,    84,    85,    86,    87,    -1,    89,    90,    -1,
      92,    93,    94,    95,    96,    -1,    98,    -1,    -1,   101,
      -1,    -1,   104,    -1,    -1,    -1,   108,    -1,    -1,    -1,
     112,   113,   114,    -1,    -1,   117,    -1,    -1,    -1,    -1,
     122,   123,    -1,    -1,    -1,    -1,   128,    -1,   130,    -1,
      -1,    -1,   134,    -1,   136,   137,   138,   139,    -1,    -1,
      -1,   143,    -1,    -1,   146,   147,   148,    -1,    -1,    -1,
     152,    -1,   154,   155,    -1,   157,   158,   159,    -1,    -1,
     162,   163,    -1,   165,   166,   167,   168,   169,   170,    -1,
      -1,   173,   174,   175,    -1,    -1,   178,   179,    -1,   181,
     182,   183,    -1,    -1,   186,    -1,    -1,    -1,   190,    -1,
     192,    -1,   194,    -1,   196,   197,   198,   199,   200,   201,
      -1,   203,    -1,    -1,    -1,   207,   208,   209,    -1,   211,
      -1,    -1,   214,   215,    -1,    -1,    -1,   219,   220,   221,
     222,    -1,    -1,   225,   226,   227,    -1,   229,    -1,   231,
      -1,    -1,    -1,    -1,   236,   237,    -1,    -1,    -1,   241,
      -1,   243,   244,    -1,   246,   247,    -1,    -1,    -1,   251,
      -1,    -1,   254,   255,   256,    -1,    -1,   259,    -1,    -1,
     262,   263,   264,    -1,    -1,    -1,    -1,   269,   270,    -1,
     272,    -1,   274,    -1,   276,   277,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,    -1,   301,
     302,   303,    -1,   305,   306,   307,   308,    -1,   310,   311,
      -1,    -1,    -1,    -1,   316,   317,   318,   319,   320,   321,
      -1,    -1,   324,   325,    -1,   327,    -1,   329,    -1,   331,
     332,   333,   334,   335,   336,   337,   338,   339,    -1,    -1,
     342,   343,    -1,    -1,   346,   347,   348,   349,    -1,    -1,
      -1,   353,   354,    -1,    -1,    -1,    -1,   359,   360,   361,
      -1,   363,   364,   365,   366,    -1,   368,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   378,   379,   380,    -1,
      -1,   383,    -1,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,    -1,    -1,   399,   400,   401,
      -1,   403,    -1,   405,   406,   407,   408,   409,    -1,   411,
     412,   413,    -1,    -1,   416,    -1,    -1,    -1,   420,   421,
     422,   423,   424,    -1,    -1,   427,   428,   429,   430,   431,
      -1,   433,   434,    -1,   436,   437,   438,    -1,    -1,   441,
      -1,   443,    -1,   445,   446,    -1,   448,   449,    -1,    -1,
      -1,   453,   454,   455,   456,   457,   458,   459,   460,   461,
     462,    -1,   464,   465,    -1,    -1,    -1,   469,   470,   471,
     472,    -1,    -1,    -1,   476,    -1,    -1,    -1,   480,    -1,
     482,   483,   484,   485,   486,    -1,   488,   489,   490,   491,
     492,   493,    -1,    -1,    -1,    -1,    -1,    -1,   500,   501,
      -1,   503,    -1,    -1,   506,    -1,    -1,   509,   510,   511,
      -1,    -1,   514,   515,    -1,   517,   518,   519,   520,   521,
     522,    -1,    -1,   525,   526,   527,   528,    -1,   530,   531,
      -1,   533,    -1,   535,   536,   537,   538,    -1,   540,   541,
     542,    -1,   544,   545,   546,   547,    -1,    -1,    -1,    -1,
      -1,   553,   554,   555,    -1,    -1,    -1,   559,   560,   561,
     562,    -1,   564,   565,    -1,   567,   568,    -1,   570,   571,
      -1,    -1,   574,    -1,    -1,   577,    -1,   579,    -1,   581,
     582,   583,    -1,    -1,    -1,    -1,    -1,    -1,   590,    -1,
      -1,   593,    -1,    -1,    -1,   597,   598,   599,   600,   601,
     602,    -1,    -1,    -1,    -1,    -1,    -1,   609,   610,    -1,
     612,   613,   614,    -1,    -1,   617,    -1,     5,    -1,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,    -1,    -1,    21,   636,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,
      48,    49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,
      58,    59,    60,    61,    62,    -1,    64,    65,    66,    67,
      68,    69,    70,    -1,    72,    73,    74,    75,    76,    77,
      78,    -1,    80,    81,    82,    83,    84,    85,    86,    87,
      -1,    89,    90,    -1,    92,    93,    94,    95,    96,    -1,
      98,    -1,    -1,   101,    -1,    -1,   104,    -1,    -1,    -1,
     108,    -1,    -1,    -1,   112,   113,   114,    -1,    -1,   117,
      -1,    -1,    -1,    -1,   122,   123,    -1,    -1,    -1,   127,
     128,    -1,   130,    -1,    -1,    -1,   134,    -1,   136,   137,
     138,   139,    -1,    -1,    -1,   143,    -1,    -1,   146,   147,
     148,    -1,    -1,    -1,   152,    -1,   154,   155,    -1,   157,
     158,   159,    -1,    -1,   162,   163,    -1,   165,   166,   167,
     168,   169,   170,    -1,    -1,   173,   174,   175,    -1,    -1,
     178,   179,    -1,   181,   182,   183,    -1,    -1,   186,    -1,
      -1,    -1,   190,    -1,   192,    -1,   194,    -1,   196,   197,
     198,   199,   200,   201,    -1,   203,    -1,    -1,    -1,   207,
     208,   209,    -1,   211,    -1,    -1,   214,   215,    -1,    -1,
      -1,   219,   220,   221,   222,    -1,    -1,   225,   226,   227,
      -1,   229,    -1,   231,    -1,    -1,    -1,    -1,   236,   237,
      -1,    -1,    -1,   241,    -1,   243,   244,    -1,   246,   247,
      -1,    -1,    -1,   251,    -1,    -1,   254,   255,   256,    -1,
      -1,   259,    -1,    -1,   262,   263,    -1,    -1,    -1,    -1,
      -1,   269,   270,    -1,   272,    -1,   274,    -1,   276,   277,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,    -1,   301,   302,   303,    -1,   305,   306,   307,
     308,    -1,   310,   311,    -1,    -1,    -1,    -1,   316,   317,
     318,   319,   320,   321,    -1,    -1,   324,   325,    -1,   327,
      -1,   329,    -1,   331,   332,   333,   334,   335,   336,   337,
     338,   339,    -1,    -1,   342,   343,    -1,    -1,   346,   347,
     348,   349,    -1,    -1,    -1,   353,   354,    -1,    -1,    -1,
      -1,   359,   360,   361,    -1,   363,   364,   365,   366,    -1,
     368,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     378,   379,   380,    -1,    -1,   383,    -1,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,    -1,
      -1,   399,   400,   401,    -1,   403,    -1,   405,   406,   407,
     408,   409,    -1,   411,   412,   413,    -1,    -1,   416,    -1,
      -1,    -1,   420,   421,   422,   423,   424,    -1,    -1,   427,
     428,   429,   430,   431,    -1,   433,   434,    -1,   436,   437,
     438,    -1,    -1,   441,    -1,   443,    -1,   445,   446,    -1,
     448,   449,    -1,    -1,    -1,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   462,    -1,   464,   465,    -1,    -1,
      -1,   469,   470,   471,   472,    -1,    -1,    -1,   476,    -1,
      -1,    -1,   480,    -1,   482,   483,   484,   485,   486,    -1,
     488,   489,   490,   491,   492,   493,    -1,    -1,    -1,    -1,
      -1,    -1,   500,   501,    -1,   503,    -1,    -1,   506,    -1,
      -1,   509,   510,   511,    -1,    -1,   514,   515,    -1,   517,
     518,   519,   520,   521,   522,    -1,    -1,   525,   526,   527,
     528,    -1,   530,   531,    -1,   533,    -1,   535,   536,   537,
     538,    -1,    -1,   541,   542,    -1,   544,   545,   546,   547,
      -1,    -1,    -1,    -1,    -1,   553,   554,   555,    -1,    -1,
      -1,   559,   560,   561,   562,    -1,   564,   565,    -1,   567,
     568,    -1,   570,   571,    -1,    -1,   574,    -1,    -1,   577,
      -1,   579,    -1,   581,   582,   583,    -1,    -1,    -1,    -1,
      -1,    -1,   590,    -1,    -1,   593,    -1,    -1,    -1,   597,
     598,   599,   600,   601,   602,    -1,    -1,    -1,    -1,    -1,
      -1,   609,   610,    -1,   612,   613,   614,    -1,    -1,   617,
      -1,     5,    -1,     7,     8,     9,    10,    11,    -1,    -1,
      14,    -1,    -1,    -1,    18,    -1,    -1,    21,   636,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    -1,    -1,
      -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,    -1,
      -1,    55,    56,    -1,    58,    59,    -1,    61,    62,    -1,
      64,    65,    66,    67,    68,    69,    70,    -1,    72,    73,
      74,    75,    76,    77,    78,    -1,    80,    81,    82,    83,
      84,    85,    86,    87,    -1,    89,    90,    -1,    92,    93,
      94,    95,    96,    -1,    98,    -1,    -1,   101,    -1,    -1,
     104,    -1,    -1,    -1,   108,    -1,    -1,    -1,   112,   113,
     114,    -1,    -1,   117,    -1,    -1,    -1,    -1,   122,   123,
      -1,    -1,    -1,    -1,   128,    -1,   130,    -1,    -1,    -1,
     134,    -1,   136,   137,   138,   139,    -1,    -1,    -1,   143,
      -1,    -1,   146,   147,   148,    -1,    -1,    -1,   152,    -1,
     154,   155,    -1,   157,   158,   159,    -1,    -1,   162,   163,
      -1,   165,   166,   167,   168,   169,   170,    -1,    -1,   173,
     174,   175,    -1,    -1,   178,   179,    -1,   181,   182,   183,
      -1,    -1,   186,    -1,    -1,    -1,   190,    -1,   192,    -1,
     194,    -1,   196,   197,   198,   199,   200,   201,    -1,   203,
      -1,    -1,    -1,   207,   208,   209,    -1,   211,    -1,    -1,
     214,   215,    -1,    -1,    -1,   219,   220,   221,   222,    -1,
      -1,   225,   226,   227,    -1,   229,    -1,   231,    -1,    -1,
      -1,    -1,   236,   237,    -1,    -1,    -1,   241,    -1,   243,
     244,    -1,   246,   247,    -1,    -1,    -1,   251,    -1,    -1,
     254,   255,   256,    -1,    -1,   259,    -1,    -1,   262,   263,
     264,    -1,    -1,    -1,    -1,   269,   270,    -1,   272,    -1,
     274,    -1,   276,   277,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,    -1,   301,   302,   303,
      -1,   305,   306,   307,   308,    -1,   310,   311,    -1,    -1,
      -1,    -1,   316,   317,   318,   319,   320,   321,    -1,    -1,
     324,   325,    -1,   327,    -1,   329,    -1,   331,   332,   333,
     334,   335,   336,   337,   338,   339,    -1,    -1,   342,   343,
      -1,    -1,   346,   347,   348,   349,    -1,    -1,    -1,   353,
     354,    -1,    -1,    -1,    -1,   359,   360,   361,    -1,   363,
     364,   365,   366,    -1,   368,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   378,   379,   380,    -1,    -1,   383,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,    -1,    -1,   399,   400,   401,    -1,   403,
      -1,   405,   406,   407,   408,   409,    -1,   411,   412,   413,
      -1,    -1,   416,    -1,    -1,    -1,   420,   421,   422,   423,
     424,    -1,    -1,   427,   428,   429,   430,   431,    -1,   433,
     434,    -1,   436,   437,   438,    -1,    -1,   441,    -1,   443,
      -1,   445,   446,    -1,   448,   449,    -1,    -1,    -1,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,    -1,
     464,   465,    -1,    -1,    -1,   469,   470,   471,   472,    -1,
      -1,    -1,   476,    -1,    -1,    -1,   480,    -1,   482,   483,
     484,   485,   486,    -1,   488,   489,   490,   491,   492,   493,
      -1,    -1,    -1,    -1,    -1,    -1,   500,   501,    -1,   503,
      -1,    -1,   506,    -1,    -1,   509,   510,   511,    -1,    -1,
     514,   515,    -1,   517,   518,   519,   520,   521,   522,    -1,
      -1,   525,   526,   527,   528,    -1,   530,   531,    -1,   533,
      -1,   535,   536,   537,   538,    -1,   540,   541,   542,    -1,
     544,   545,   546,   547,    -1,    -1,    -1,    -1,    -1,   553,
     554,   555,    -1,    -1,    -1,   559,   560,   561,   562,    -1,
     564,   565,    -1,   567,   568,    -1,   570,   571,    -1,    -1,
     574,    -1,    -1,   577,    -1,   579,    -1,   581,   582,   583,
      -1,    -1,    -1,    -1,    -1,    -1,   590,    -1,    -1,   593,
      -1,    -1,    -1,   597,   598,   599,   600,   601,   602,    -1,
      -1,    -1,    -1,    -1,    -1,   609,   610,    -1,   612,   613,
     614,    -1,    -1,   617,    -1,     5,    -1,     7,     8,     9,
      10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,
      -1,    -1,   636,    23,    24,    25,    26,    27,    28,    -1,
      -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,    39,
      -1,    -1,    42,    43,    44,    -1,    46,    -1,    -1,    -1,
      -1,    -1,    52,    53,    -1,    55,    56,    -1,    58,    -1,
      -1,    -1,    -1,    -1,    64,    65,    66,    67,    68,    69,
      70,    -1,    72,    73,    -1,    -1,    -1,    -1,    -1,    -1,
      80,    -1,    82,    -1,    84,    85,    86,    87,    -1,    89,
      90,    -1,    92,    93,    94,    -1,    96,    -1,    98,    -1,
      -1,   101,    -1,    -1,   104,    -1,    -1,    -1,   108,    -1,
      -1,    -1,   112,   113,   114,    -1,    -1,   117,    -1,    -1,
      -1,    -1,   122,    -1,    -1,    -1,    -1,    -1,   128,    -1,
     130,    -1,    -1,    -1,   134,    -1,   136,   137,   138,   139,
      -1,    -1,    -1,    -1,    -1,    -1,   146,   147,   148,    -1,
      -1,    -1,   152,    -1,    -1,   155,    -1,   157,   158,   159,
      -1,    -1,   162,   163,    -1,   165,   166,   167,   168,    -1,
      -1,    -1,    -1,   173,   174,   175,    -1,    -1,   178,   179,
     180,   181,   182,   183,    -1,    -1,    -1,    -1,    -1,    -1,
     190,    -1,   192,    -1,   194,    -1,   196,   197,   198,   199,
     200,   201,    -1,   203,    -1,    -1,    -1,    -1,   208,   209,
      -1,    -1,    -1,    -1,    -1,   215,    -1,    -1,    -1,   219,
     220,   221,   222,   223,    -1,   225,   226,   227,    -1,   229,
      -1,   231,    -1,    -1,    -1,    -1,   236,    -1,    -1,    -1,
      -1,   241,    -1,   243,   244,    -1,   246,   247,   248,    -1,
      -1,   251,    -1,    -1,    -1,   255,   256,    -1,    -1,   259,
     260,    -1,   262,   263,    -1,    -1,    -1,    -1,    -1,   269,
     270,    -1,   272,    -1,   274,    -1,   276,   277,    -1,    -1,
      -1,    -1,   282,    -1,    -1,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
      -1,   301,   302,   303,    -1,   305,   306,   307,   308,    -1,
     310,   311,    -1,    -1,    -1,    -1,   316,   317,   318,   319,
     320,   321,    -1,    -1,   324,   325,    -1,   327,    -1,   329,
      -1,   331,   332,   333,   334,   335,   336,   337,   338,   339,
      -1,    -1,   342,   343,    -1,    -1,   346,   347,   348,   349,
      -1,    -1,    -1,    -1,   354,    -1,    -1,    -1,    -1,   359,
     360,   361,    -1,   363,   364,   365,   366,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   379,
     380,    -1,    -1,    -1,    -1,   385,   386,   387,    -1,   389,
     390,   391,   392,   393,   394,   395,    -1,    -1,    -1,    -1,
     400,   401,    -1,   403,    -1,   405,   406,   407,   408,   409,
      -1,   411,   412,   413,    -1,    -1,   416,    -1,    -1,    -1,
     420,   421,   422,   423,   424,    -1,    -1,   427,   428,   429,
     430,   431,    -1,   433,    -1,    -1,   436,    -1,   438,   439,
      -1,   441,    -1,    -1,    -1,   445,    -1,    -1,   448,   449,
     450,    -1,    -1,    -1,   454,   455,   456,   457,   458,   459,
      -1,   461,   462,    -1,   464,    -1,    -1,    -1,    -1,   469,
     470,   471,    -1,    -1,    -1,    -1,   476,    -1,    -1,    -1,
     480,    -1,    -1,   483,    -1,    -1,   486,    -1,   488,    -1,
     490,    -1,   492,   493,    -1,    -1,    -1,    -1,    -1,    -1,
     500,   501,    -1,   503,    -1,    -1,   506,    -1,    -1,   509,
      -1,   511,    -1,    -1,    -1,   515,    -1,   517,   518,   519,
     520,   521,   522,    -1,    -1,   525,   526,   527,   528,    -1,
     530,   531,    -1,   533,    -1,   535,   536,   537,   538,    -1,
      -1,   541,   542,    -1,   544,   545,   546,   547,    -1,    -1,
      -1,    -1,    -1,   553,   554,   555,    -1,    -1,    -1,    -1,
     560,   561,   562,    -1,   564,   565,    -1,   567,   568,    -1,
      -1,    -1,    -1,    -1,   574,    -1,    -1,   577,    -1,    -1,
      -1,   581,   582,   583,    -1,    -1,    -1,    -1,    -1,    -1,
     590,    -1,    -1,   593,    -1,    -1,    -1,   597,   598,   599,
     600,   601,   602,    -1,    -1,   605,    -1,    -1,    -1,   609,
      -1,    -1,   612,    -1,   614,    -1,     5,   617,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      -1,   631,    21,    -1,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,
      49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,
      59,    -1,    61,    62,    -1,    64,    65,    66,    67,    68,
      69,    70,    -1,    72,    73,    74,    75,    76,    77,    78,
      -1,    80,    81,    82,    83,    84,    85,    86,    87,    -1,
      89,    90,    -1,    92,    93,    94,    95,    96,    -1,    98,
      -1,    -1,   101,    -1,    -1,   104,    -1,   106,    -1,   108,
      -1,    -1,    -1,   112,   113,   114,    -1,    -1,   117,    -1,
      -1,    -1,    -1,   122,   123,    -1,    -1,    -1,    -1,   128,
      -1,   130,    -1,    -1,    -1,   134,    -1,   136,   137,   138,
     139,    -1,    -1,    -1,   143,    -1,    -1,   146,   147,   148,
      -1,    -1,    -1,   152,    -1,   154,   155,    -1,   157,   158,
     159,    -1,    -1,   162,   163,    -1,   165,   166,   167,   168,
     169,   170,    -1,    -1,   173,   174,   175,    -1,    -1,   178,
     179,    -1,   181,   182,   183,    -1,    -1,   186,    -1,    -1,
      -1,   190,    -1,   192,    -1,   194,    -1,   196,   197,   198,
     199,   200,   201,    -1,   203,    -1,    -1,    -1,   207,   208,
     209,    -1,   211,    -1,    -1,   214,   215,    -1,    -1,    -1,
     219,   220,   221,   222,    -1,    -1,   225,   226,   227,    -1,
     229,    -1,   231,    -1,    -1,    -1,    -1,   236,   237,    -1,
      -1,    -1,   241,    -1,   243,   244,    -1,   246,   247,    -1,
      -1,    -1,   251,    -1,    -1,   254,   255,   256,    -1,    -1,
     259,    -1,    -1,   262,   263,   264,    -1,    -1,    -1,    -1,
     269,   270,    -1,   272,    -1,   274,    -1,   276,   277,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,    -1,   301,   302,   303,    -1,   305,   306,   307,   308,
      -1,   310,   311,    -1,    -1,    -1,    -1,   316,   317,   318,
     319,   320,   321,    -1,    -1,   324,   325,    -1,   327,    -1,
     329,    -1,   331,   332,   333,   334,   335,   336,   337,   338,
     339,    -1,    -1,   342,   343,    -1,    -1,   346,   347,   348,
     349,    -1,    -1,    -1,   353,   354,    -1,    -1,    -1,    -1,
     359,   360,   361,    -1,   363,   364,   365,   366,    -1,   368,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   378,
     379,   380,    -1,    -1,   383,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,    -1,    -1,
     399,   400,   401,    -1,   403,    -1,   405,   406,   407,   408,
     409,    -1,   411,   412,   413,    -1,    -1,   416,    -1,    -1,
      -1,   420,   421,   422,   423,   424,    -1,    -1,   427,   428,
     429,   430,   431,    -1,   433,   434,    -1,   436,   437,   438,
      -1,    -1,   441,    -1,   443,    -1,   445,   446,    -1,   448,
     449,    -1,    -1,    -1,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,    -1,   464,   465,    -1,    -1,    -1,
     469,   470,   471,   472,    -1,    -1,    -1,   476,    -1,    -1,
      -1,   480,    -1,   482,   483,   484,   485,   486,    -1,   488,
     489,   490,   491,   492,   493,    -1,    -1,    -1,    -1,    -1,
      -1,   500,   501,    -1,   503,    -1,    -1,   506,    -1,    -1,
     509,   510,   511,    -1,    -1,   514,   515,    -1,   517,   518,
     519,   520,   521,   522,    -1,    -1,   525,   526,   527,   528,
      -1,   530,   531,    -1,   533,    -1,   535,   536,   537,   538,
      -1,   540,   541,   542,    -1,   544,   545,   546,   547,    -1,
      -1,    -1,    -1,    -1,   553,   554,   555,    -1,    -1,    -1,
     559,   560,   561,   562,    -1,   564,   565,    -1,   567,   568,
      -1,   570,   571,    -1,    -1,   574,    -1,    -1,   577,    -1,
     579,    -1,   581,   582,   583,    -1,    -1,    -1,    -1,    -1,
      -1,   590,    -1,    -1,   593,    -1,    -1,    -1,   597,   598,
     599,   600,   601,   602,    -1,    -1,    -1,    -1,    -1,    -1,
     609,   610,    -1,   612,   613,   614,    -1,    -1,   617,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
     629,    -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    -1,    -1,    -1,    35,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,
      56,    -1,    58,    59,    -1,    61,    62,    -1,    64,    65,
      66,    67,    68,    69,    70,    -1,    72,    73,    74,    75,
      76,    77,    78,    -1,    80,    81,    82,    83,    84,    85,
      86,    87,    -1,    89,    90,    -1,    92,    93,    94,    95,
      96,    -1,    98,    -1,    -1,   101,    -1,    -1,   104,    -1,
      -1,    -1,   108,    -1,    -1,    -1,   112,   113,   114,    -1,
      -1,   117,    -1,    -1,    -1,    -1,   122,   123,    -1,    -1,
      -1,    -1,   128,    -1,   130,    -1,    -1,    -1,   134,    -1,
     136,   137,   138,   139,    -1,    -1,    -1,   143,    -1,    -1,
     146,   147,   148,    -1,    -1,    -1,   152,    -1,   154,   155,
      -1,   157,   158,   159,    -1,    -1,   162,   163,    -1,   165,
     166,   167,   168,   169,   170,    -1,    -1,   173,   174,   175,
      -1,    -1,   178,   179,    -1,   181,   182,   183,    -1,    -1,
     186,    -1,    -1,    -1,   190,    -1,   192,    -1,   194,    -1,
     196,   197,   198,   199,   200,   201,    -1,   203,    -1,    -1,
      -1,   207,   208,   209,    -1,   211,    -1,    -1,   214,   215,
      -1,    -1,    -1,   219,   220,   221,   222,    -1,    -1,   225,
     226,   227,    -1,   229,    -1,   231,    -1,    -1,    -1,    -1,
     236,   237,    -1,    -1,    -1,   241,    -1,   243,   244,    -1,
     246,   247,    -1,    -1,    -1,   251,    -1,    -1,   254,   255,
     256,    -1,    -1,   259,    -1,    -1,   262,   263,    -1,    -1,
      -1,    -1,    -1,   269,   270,    -1,   272,    -1,   274,    -1,
     276,   277,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,    -1,   301,   302,   303,    -1,   305,
     306,   307,   308,    -1,   310,   311,    -1,    -1,    -1,    -1,
     316,   317,   318,   319,   320,   321,    -1,    -1,   324,   325,
      -1,   327,    -1,   329,    -1,   331,   332,   333,   334,   335,
     336,   337,   338,   339,    -1,    -1,   342,   343,    -1,    -1,
     346,   347,   348,   349,    -1,    -1,    -1,   353,   354,    -1,
      -1,    -1,    -1,   359,   360,   361,    -1,   363,   364,   365,
     366,    -1,   368,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   378,   379,   380,    -1,    -1,   383,    -1,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,    -1,    -1,   399,   400,   401,    -1,   403,    -1,   405,
     406,   407,   408,   409,    -1,   411,   412,   413,    -1,    -1,
     416,    -1,    -1,    -1,   420,   421,   422,   423,   424,    -1,
      -1,   427,   428,   429,   430,   431,    -1,   433,   434,    -1,
     436,   437,   438,    -1,    -1,   441,    -1,   443,    -1,   445,
     446,    -1,   448,   449,    -1,    -1,    -1,   453,   454,   455,
     456,   457,   458,   459,   460,   461,   462,    -1,   464,   465,
      -1,    -1,    -1,   469,   470,   471,   472,    -1,    -1,    -1,
     476,    -1,    -1,    -1,   480,    -1,   482,   483,   484,   485,
     486,    -1,   488,   489,   490,   491,   492,   493,    -1,    -1,
      -1,    -1,    -1,    -1,   500,   501,    -1,   503,    -1,    -1,
     506,    -1,    -1,   509,   510,   511,    -1,    -1,   514,   515,
      -1,   517,   518,   519,   520,   521,   522,    -1,    -1,   525,
     526,   527,   528,    -1,   530,   531,    -1,   533,    -1,   535,
     536,   537,   538,    -1,    -1,   541,   542,    -1,   544,   545,
     546,   547,    -1,    -1,    -1,    -1,    -1,   553,   554,   555,
      -1,    -1,    -1,   559,   560,   561,   562,    -1,   564,   565,
      -1,   567,   568,    -1,   570,   571,    -1,    -1,   574,    -1,
      -1,   577,    -1,   579,    -1,   581,   582,   583,    -1,    -1,
      -1,    -1,    -1,    -1,   590,    -1,    -1,   593,    -1,    -1,
      -1,   597,   598,   599,   600,   601,   602,    -1,    -1,    -1,
      -1,    -1,    -1,   609,   610,    -1,   612,   613,   614,    -1,
       5,   617,     7,     8,     9,    10,    11,    -1,   624,    14,
      -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    -1,    -1,    -1,
      35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,
      -1,    46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,
      55,    56,    -1,    58,    59,    -1,    61,    62,    -1,    64,
      65,    66,    67,    68,    69,    70,    -1,    72,    73,    74,
      75,    76,    77,    78,    -1,    80,    81,    82,    83,    84,
      85,    86,    87,    -1,    89,    90,    -1,    92,    93,    94,
      95,    96,    -1,    98,    -1,    -1,   101,    -1,    -1,   104,
      -1,    -1,    -1,   108,    -1,    -1,    -1,   112,   113,   114,
      -1,    -1,   117,    -1,    -1,    -1,    -1,   122,   123,    -1,
      -1,    -1,    -1,   128,    -1,   130,    -1,    -1,    -1,   134,
      -1,   136,   137,   138,   139,    -1,    -1,    -1,   143,    -1,
      -1,   146,   147,   148,    -1,    -1,    -1,   152,    -1,   154,
     155,    -1,   157,   158,   159,    -1,    -1,   162,   163,    -1,
     165,   166,   167,   168,   169,   170,    -1,    -1,   173,   174,
     175,    -1,    -1,   178,   179,    -1,   181,   182,   183,    -1,
      -1,   186,    -1,    -1,    -1,   190,    -1,   192,    -1,   194,
      -1,   196,   197,   198,   199,   200,   201,    -1,   203,    -1,
      -1,    -1,   207,   208,   209,    -1,   211,    -1,    -1,   214,
     215,    -1,    -1,    -1,   219,   220,   221,   222,    -1,    -1,
     225,   226,   227,    -1,   229,    -1,   231,    -1,    -1,    -1,
      -1,   236,   237,    -1,    -1,    -1,   241,    -1,   243,   244,
      -1,   246,   247,    -1,    -1,    -1,   251,    -1,    -1,   254,
     255,   256,    -1,    -1,   259,    -1,    -1,   262,   263,    -1,
      -1,    -1,    -1,    -1,   269,   270,    -1,   272,    -1,   274,
      -1,   276,   277,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,    -1,   301,   302,   303,    -1,
     305,   306,   307,   308,    -1,   310,   311,    -1,    -1,    -1,
      -1,   316,   317,   318,   319,   320,   321,    -1,    -1,   324,
     325,    -1,   327,    -1,   329,    -1,   331,   332,   333,   334,
     335,   336,   337,   338,   339,    -1,    -1,   342,   343,    -1,
      -1,   346,   347,   348,   349,    -1,    -1,    -1,   353,   354,
      -1,    -1,    -1,    -1,   359,   360,   361,    -1,   363,   364,
     365,   366,    -1,   368,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   378,   379,   380,    -1,    -1,   383,    -1,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,    -1,    -1,   399,   400,   401,    -1,   403,    -1,
     405,   406,   407,   408,   409,    -1,   411,   412,   413,    -1,
      -1,   416,    -1,    -1,    -1,   420,   421,   422,   423,   424,
      -1,    -1,   427,   428,   429,   430,   431,    -1,   433,   434,
      -1,   436,   437,   438,    -1,    -1,   441,    -1,   443,    -1,
     445,   446,    -1,   448,   449,    -1,    -1,    -1,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,    -1,   464,
     465,    -1,    -1,    -1,   469,   470,   471,   472,    -1,    -1,
      -1,   476,    -1,    -1,    -1,   480,    -1,   482,   483,   484,
     485,   486,    -1,   488,   489,   490,   491,   492,   493,    -1,
      -1,    -1,    -1,    -1,    -1,   500,   501,    -1,   503,    -1,
      -1,   506,    -1,    -1,   509,   510,   511,    -1,    -1,   514,
     515,    -1,   517,   518,   519,   520,   521,   522,    -1,    -1,
     525,   526,   527,   528,    -1,   530,   531,    -1,   533,    -1,
     535,   536,   537,   538,    -1,    -1,   541,   542,    -1,   544,
     545,   546,   547,    -1,    -1,    -1,    -1,    -1,   553,   554,
     555,    -1,    -1,    -1,   559,   560,   561,   562,    -1,   564,
     565,    -1,   567,   568,    -1,   570,   571,    -1,    -1,   574,
      -1,    -1,   577,    -1,   579,    -1,   581,   582,   583,    -1,
      -1,    -1,    -1,    -1,    -1,   590,    -1,    -1,   593,    -1,
      -1,    -1,   597,   598,   599,   600,   601,   602,    -1,    -1,
      -1,    -1,    -1,    -1,   609,   610,    -1,   612,   613,   614,
      -1,     5,   617,     7,     8,     9,    10,    11,    -1,   624,
      14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    -1,    -1,
      -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,    -1,
      -1,    55,    56,    -1,    58,    59,    -1,    61,    62,    -1,
      64,    65,    66,    67,    68,    69,    70,    -1,    72,    73,
      74,    75,    76,    77,    78,    -1,    80,    81,    82,    83,
      84,    85,    86,    87,    -1,    89,    90,    -1,    92,    93,
      94,    95,    96,    -1,    98,    -1,    -1,   101,    -1,    -1,
     104,    -1,    -1,    -1,   108,    -1,    -1,    -1,   112,   113,
     114,    -1,    -1,   117,    -1,    -1,    -1,    -1,   122,   123,
      -1,    -1,    -1,    -1,   128,    -1,   130,    -1,    -1,    -1,
     134,    -1,   136,   137,   138,   139,    -1,    -1,    -1,   143,
      -1,    -1,   146,   147,   148,    -1,    -1,    -1,   152,    -1,
     154,   155,    -1,   157,   158,   159,    -1,    -1,   162,   163,
      -1,   165,   166,   167,   168,   169,   170,    -1,    -1,   173,
     174,   175,    -1,    -1,   178,   179,    -1,   181,   182,   183,
      -1,    -1,   186,    -1,    -1,    -1,   190,    -1,   192,    -1,
     194,    -1,   196,   197,   198,   199,   200,   201,    -1,   203,
      -1,    -1,    -1,   207,   208,   209,    -1,   211,    -1,    -1,
     214,   215,    -1,    -1,    -1,   219,   220,   221,   222,    -1,
      -1,   225,   226,   227,    -1,   229,    -1,   231,    -1,    -1,
      -1,    -1,   236,   237,    -1,    -1,    -1,   241,    -1,   243,
     244,    -1,   246,   247,    -1,    -1,    -1,   251,    -1,    -1,
     254,   255,   256,    -1,    -1,   259,    -1,    -1,   262,   263,
      -1,    -1,    -1,    -1,    -1,   269,   270,    -1,   272,    -1,
     274,    -1,   276,   277,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,    -1,   301,   302,   303,
      -1,   305,   306,   307,   308,    -1,   310,   311,    -1,    -1,
      -1,    -1,   316,   317,   318,   319,   320,   321,    -1,    -1,
     324,   325,    -1,   327,    -1,   329,    -1,   331,   332,   333,
     334,   335,   336,   337,   338,   339,    -1,    -1,   342,   343,
      -1,    -1,   346,   347,   348,   349,    -1,    -1,    -1,   353,
     354,    -1,    -1,    -1,    -1,   359,   360,   361,    -1,   363,
     364,   365,   366,    -1,   368,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   378,   379,   380,    -1,    -1,   383,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,    -1,    -1,   399,   400,   401,    -1,   403,
      -1,   405,   406,   407,   408,   409,    -1,   411,   412,   413,
      -1,    -1,   416,    -1,    -1,    -1,   420,   421,   422,   423,
     424,    -1,    -1,   427,   428,   429,   430,   431,    -1,   433,
     434,    -1,   436,   437,   438,    -1,    -1,   441,    -1,   443,
      -1,   445,   446,    -1,   448,   449,    -1,    -1,    -1,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,    -1,
     464,   465,    -1,    -1,    -1,   469,   470,   471,   472,    -1,
      -1,    -1,   476,    -1,    -1,    -1,   480,    -1,   482,   483,
     484,   485,   486,    -1,   488,   489,   490,   491,   492,   493,
      -1,    -1,    -1,    -1,    -1,    -1,   500,   501,    -1,   503,
      -1,    -1,   506,    -1,    -1,   509,   510,   511,    -1,    -1,
     514,   515,    -1,   517,   518,   519,   520,   521,   522,    -1,
      -1,   525,   526,   527,   528,    -1,   530,   531,    -1,   533,
      -1,   535,   536,   537,   538,    -1,    -1,   541,   542,    -1,
     544,   545,   546,   547,    -1,    -1,    -1,    -1,    -1,   553,
     554,   555,    -1,    -1,    -1,   559,   560,   561,   562,    -1,
     564,   565,    -1,   567,   568,    -1,   570,   571,    -1,    -1,
     574,    -1,    -1,   577,    -1,   579,    -1,   581,   582,   583,
      -1,    -1,    -1,    -1,    -1,    -1,   590,    -1,    -1,   593,
      -1,    -1,    -1,   597,   598,   599,   600,   601,   602,    -1,
      -1,    -1,    -1,    -1,    -1,   609,   610,    -1,   612,   613,
     614,    -1,     5,   617,     7,     8,     9,    10,    11,    -1,
     624,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    -1,
      -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,
      -1,    -1,    55,    56,    -1,    58,    59,    -1,    61,    62,
      -1,    64,    65,    66,    67,    68,    69,    70,    -1,    72,
      73,    74,    75,    76,    77,    78,    -1,    80,    81,    82,
      83,    84,    85,    86,    87,    -1,    89,    90,    -1,    92,
      93,    94,    95,    96,    -1,    98,    -1,    -1,   101,    -1,
      -1,   104,    -1,    -1,    -1,   108,    -1,    -1,    -1,   112,
     113,   114,    -1,    -1,   117,    -1,    -1,    -1,    -1,   122,
     123,    -1,    -1,    -1,    -1,   128,    -1,   130,    -1,    -1,
      -1,   134,    -1,   136,   137,   138,   139,    -1,    -1,    -1,
     143,    -1,    -1,   146,   147,   148,    -1,    -1,    -1,   152,
      -1,   154,   155,    -1,   157,   158,   159,    -1,    -1,   162,
     163,    -1,   165,   166,   167,   168,   169,   170,    -1,    -1,
     173,   174,   175,    -1,    -1,   178,   179,    -1,   181,   182,
     183,    -1,    -1,   186,    -1,    -1,    -1,   190,    -1,   192,
      -1,   194,    -1,   196,   197,   198,   199,   200,   201,    -1,
     203,    -1,    -1,    -1,   207,   208,   209,    -1,   211,    -1,
      -1,   214,   215,    -1,    -1,    -1,   219,   220,   221,   222,
      -1,    -1,   225,   226,   227,    -1,   229,    -1,   231,    -1,
      -1,    -1,    -1,   236,   237,    -1,    -1,    -1,   241,    -1,
     243,   244,    -1,   246,   247,    -1,    -1,    -1,   251,    -1,
      -1,   254,   255,   256,    -1,    -1,   259,    -1,    -1,   262,
     263,    -1,    -1,    -1,    -1,    -1,   269,   270,    -1,   272,
      -1,   274,    -1,   276,   277,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,    -1,   301,   302,
     303,    -1,   305,   306,   307,   308,    -1,   310,   311,    -1,
      -1,    -1,    -1,   316,   317,   318,   319,   320,   321,    -1,
      -1,   324,   325,    -1,   327,    -1,   329,    -1,   331,   332,
     333,   334,   335,   336,   337,   338,   339,    -1,    -1,   342,
     343,    -1,    -1,   346,   347,   348,   349,    -1,    -1,    -1,
     353,   354,    -1,    -1,    -1,    -1,   359,   360,   361,    -1,
     363,   364,   365,   366,    -1,   368,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   378,   379,   380,    -1,    -1,
     383,    -1,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,    -1,    -1,   399,   400,   401,    -1,
     403,    -1,   405,   406,   407,   408,   409,    -1,   411,   412,
     413,    -1,    -1,   416,    -1,    -1,    -1,   420,   421,   422,
     423,   424,    -1,    -1,   427,   428,   429,   430,   431,    -1,
     433,   434,    -1,   436,   437,   438,    -1,    -1,   441,    -1,
     443,    -1,   445,   446,    -1,   448,   449,    -1,    -1,    -1,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
      -1,   464,   465,    -1,    -1,    -1,   469,   470,   471,   472,
      -1,    -1,    -1,   476,    -1,    -1,    -1,   480,    -1,   482,
     483,   484,   485,   486,    -1,   488,   489,   490,   491,   492,
     493,    -1,    -1,    -1,    -1,    -1,    -1,   500,   501,    -1,
     503,    -1,    -1,   506,    -1,    -1,   509,   510,   511,    -1,
      -1,   514,   515,    -1,   517,   518,   519,   520,   521,   522,
      -1,    -1,   525,   526,   527,   528,    -1,   530,   531,    -1,
     533,    -1,   535,   536,   537,   538,    -1,    -1,   541,   542,
      -1,   544,   545,   546,   547,    -1,    -1,    -1,    -1,    -1,
     553,   554,   555,    -1,    -1,    -1,   559,   560,   561,   562,
      -1,   564,   565,    -1,   567,   568,    -1,   570,   571,    -1,
      -1,   574,    -1,    -1,   577,    -1,   579,    -1,   581,   582,
     583,    -1,    -1,    -1,    -1,    -1,    -1,   590,    -1,    -1,
     593,    -1,    -1,    -1,   597,   598,   599,   600,   601,   602,
      -1,    -1,    -1,    -1,    -1,    -1,   609,   610,    -1,   612,
     613,   614,    -1,     5,   617,     7,     8,     9,    10,    11,
      -1,   624,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,
      -1,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      -1,    -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,
      52,    -1,    -1,    55,    56,    -1,    58,    59,    -1,    61,
      62,    -1,    64,    65,    66,    67,    68,    69,    70,    -1,
      72,    73,    74,    75,    76,    77,    78,    -1,    80,    81,
      82,    83,    84,    85,    86,    87,    -1,    89,    90,    -1,
      92,    93,    94,    95,    96,    -1,    98,    -1,    -1,   101,
      -1,    -1,   104,    -1,    -1,    -1,   108,    -1,    -1,    -1,
     112,   113,   114,    -1,    -1,   117,    -1,    -1,    -1,    -1,
     122,   123,   124,    -1,    -1,    -1,   128,    -1,   130,    -1,
      -1,    -1,   134,    -1,   136,   137,   138,   139,    -1,    -1,
      -1,   143,    -1,    -1,   146,   147,   148,    -1,    -1,    -1,
     152,    -1,   154,   155,    -1,   157,   158,   159,    -1,    -1,
     162,   163,    -1,   165,   166,   167,   168,   169,   170,    -1,
      -1,   173,   174,   175,    -1,    -1,   178,   179,    -1,   181,
     182,   183,   184,    -1,   186,    -1,    -1,    -1,   190,    -1,
     192,    -1,   194,    -1,   196,   197,   198,   199,   200,   201,
      -1,   203,    -1,    -1,    -1,   207,   208,   209,    -1,   211,
     212,    -1,   214,   215,    -1,    -1,    -1,   219,   220,   221,
     222,    -1,    -1,   225,   226,   227,    -1,   229,    -1,   231,
      -1,    -1,    -1,    -1,   236,   237,    -1,    -1,    -1,   241,
      -1,   243,   244,    -1,   246,   247,    -1,    -1,    -1,   251,
      -1,    -1,   254,   255,   256,    -1,    -1,   259,    -1,    -1,
     262,   263,    -1,    -1,    -1,    -1,    -1,   269,   270,    -1,
     272,    -1,   274,    -1,   276,   277,    -1,    -1,   280,    -1,
      -1,    -1,    -1,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,    -1,   301,
     302,   303,    -1,   305,   306,   307,   308,    -1,   310,   311,
      -1,    -1,    -1,    -1,   316,   317,   318,   319,   320,   321,
      -1,    -1,   324,   325,    -1,   327,    -1,   329,    -1,   331,
     332,   333,   334,   335,   336,   337,   338,   339,    -1,    -1,
     342,   343,    -1,    -1,   346,   347,   348,   349,   350,   351,
      -1,   353,   354,    -1,    -1,   357,    -1,   359,   360,   361,
      -1,   363,   364,   365,   366,    -1,   368,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   378,   379,   380,    -1,
      -1,   383,    -1,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,    -1,    -1,   399,   400,   401,
      -1,   403,    -1,   405,   406,   407,   408,   409,    -1,   411,
     412,   413,    -1,    -1,   416,    -1,    -1,    -1,   420,   421,
     422,   423,   424,    -1,    -1,   427,   428,   429,   430,   431,
      -1,   433,   434,    -1,   436,   437,   438,    -1,    -1,   441,
      -1,   443,    -1,   445,   446,    -1,   448,   449,    -1,    -1,
      -1,   453,   454,   455,   456,   457,   458,   459,   460,   461,
     462,    -1,   464,   465,    -1,    -1,    -1,   469,   470,   471,
     472,    -1,    -1,    -1,   476,    -1,    -1,    -1,   480,    -1,
     482,   483,   484,   485,   486,    -1,   488,   489,   490,   491,
     492,   493,    -1,    -1,   496,   497,   498,    -1,   500,   501,
      -1,   503,    -1,    -1,   506,    -1,    -1,   509,   510,   511,
      -1,    -1,   514,   515,    -1,   517,   518,   519,   520,   521,
     522,    -1,    -1,   525,   526,   527,   528,    -1,   530,   531,
      -1,   533,    -1,   535,   536,   537,   538,    -1,    -1,   541,
     542,    -1,   544,   545,   546,   547,    -1,    -1,    -1,    -1,
      -1,   553,   554,   555,    -1,    -1,    -1,   559,   560,   561,
     562,   563,   564,   565,    -1,   567,   568,    -1,   570,   571,
      -1,    -1,   574,    -1,    -1,   577,    -1,   579,    -1,   581,
     582,   583,    -1,    -1,    -1,    -1,    -1,    -1,   590,    -1,
      -1,   593,    -1,    -1,    -1,   597,   598,   599,   600,   601,
     602,    -1,    -1,    -1,    -1,    -1,    -1,   609,   610,    -1,
     612,   613,   614,    -1,     5,   617,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      21,    -1,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    -1,    -1,    -1,    35,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    -1,    48,    49,    -1,
      -1,    52,    -1,    -1,    55,    56,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    66,    67,    68,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    -1,    80,
      81,    82,    83,    84,    85,    86,    87,    -1,    89,    90,
      -1,    92,    93,    94,    95,    96,    -1,    98,    -1,    -1,
     101,    -1,    -1,   104,    -1,    -1,    -1,   108,    -1,    -1,
      -1,   112,   113,   114,    -1,    -1,   117,    -1,    -1,    -1,
      -1,   122,   123,   124,    -1,    -1,   127,   128,    -1,   130,
      -1,    -1,    -1,   134,    -1,   136,   137,   138,   139,    -1,
      -1,    -1,   143,    -1,    -1,   146,   147,   148,    -1,    -1,
      -1,   152,    -1,   154,   155,    -1,   157,   158,   159,    -1,
      -1,   162,   163,    -1,   165,   166,   167,   168,   169,   170,
      -1,    -1,   173,   174,   175,    -1,    -1,   178,   179,    -1,
     181,   182,   183,   184,    -1,   186,    -1,    -1,    -1,   190,
      -1,   192,    -1,   194,    -1,   196,   197,   198,   199,   200,
     201,    -1,   203,    -1,    -1,    -1,   207,   208,   209,    -1,
     211,   212,    -1,   214,   215,    -1,    -1,    -1,   219,   220,
     221,   222,    -1,    -1,   225,   226,   227,    -1,   229,    -1,
     231,    -1,    -1,    -1,    -1,   236,   237,    -1,    -1,    -1,
     241,    -1,   243,   244,    -1,   246,   247,    -1,    -1,    -1,
     251,    -1,    -1,   254,   255,   256,    -1,    -1,   259,    -1,
      -1,   262,   263,    -1,    -1,    -1,    -1,    -1,   269,   270,
      -1,   272,    -1,   274,    -1,   276,   277,    -1,    -1,   280,
      -1,    -1,    -1,    -1,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,    -1,
     301,   302,   303,    -1,   305,   306,   307,   308,    -1,   310,
     311,    -1,    -1,    -1,    -1,   316,   317,   318,   319,   320,
     321,    -1,    -1,   324,   325,    -1,   327,    -1,   329,    -1,
     331,   332,   333,   334,   335,   336,   337,   338,   339,    -1,
      -1,   342,   343,    -1,    -1,   346,   347,   348,   349,    -1,
      -1,    -1,   353,   354,    -1,    -1,   357,    -1,   359,   360,
     361,    -1,   363,   364,   365,   366,    -1,   368,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   378,   379,   380,
      -1,    -1,   383,    -1,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,    -1,    -1,   399,   400,
     401,    -1,   403,    -1,   405,   406,   407,   408,   409,    -1,
     411,   412,   413,    -1,    -1,   416,    -1,    -1,    -1,   420,
     421,   422,   423,   424,    -1,    -1,   427,   428,   429,   430,
     431,    -1,   433,   434,    -1,   436,   437,   438,    -1,    -1,
     441,    -1,   443,    -1,   445,   446,    -1,   448,   449,    -1,
      -1,    -1,   453,   454,   455,   456,   457,   458,   459,   460,
     461,   462,    -1,   464,   465,    -1,    -1,    -1,   469,   470,
     471,   472,    -1,    -1,    -1,   476,    -1,    -1,    -1,   480,
      -1,   482,   483,   484,   485,   486,    -1,   488,   489,   490,
     491,   492,   493,    -1,    -1,    -1,    -1,    -1,    -1,   500,
     501,    -1,   503,    -1,    -1,   506,    -1,    -1,   509,   510,
     511,    -1,    -1,   514,   515,    -1,   517,   518,   519,   520,
     521,   522,    -1,    -1,   525,   526,   527,   528,    -1,   530,
     531,    -1,   533,    -1,   535,   536,   537,   538,    -1,   540,
     541,   542,    -1,   544,   545,   546,   547,    -1,    -1,    -1,
      -1,    -1,   553,   554,   555,    -1,    -1,    -1,   559,   560,
     561,   562,   563,   564,   565,    -1,   567,   568,    -1,   570,
     571,    -1,    -1,   574,    -1,    -1,   577,    -1,   579,    -1,
     581,   582,   583,    -1,    -1,    -1,    -1,    -1,    -1,   590,
      -1,    -1,   593,    -1,    -1,    -1,   597,   598,   599,   600,
     601,   602,    -1,    -1,    -1,    -1,    -1,    -1,   609,   610,
      -1,   612,   613,   614,    -1,     5,   617,     7,     8,     9,
      10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,
      -1,    21,    -1,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,    39,
      -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,    49,
      -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,    59,
      -1,    61,    62,    -1,    64,    65,    66,    67,    68,    69,
      70,    -1,    72,    73,    74,    75,    76,    77,    78,    -1,
      80,    81,    82,    83,    84,    85,    86,    87,    -1,    89,
      90,    -1,    92,    93,    94,    95,    96,    -1,    98,    -1,
      -1,   101,    -1,    -1,   104,    -1,    -1,    -1,   108,    -1,
      -1,    -1,   112,   113,   114,    -1,    -1,   117,    -1,    -1,
      -1,    -1,   122,   123,   124,    -1,    -1,   127,   128,    -1,
     130,    -1,    -1,    -1,   134,    -1,   136,   137,   138,   139,
      -1,    -1,    -1,   143,    -1,    -1,   146,   147,   148,    -1,
      -1,    -1,   152,    -1,   154,   155,    -1,   157,   158,   159,
      -1,    -1,   162,   163,    -1,   165,   166,   167,   168,   169,
     170,    -1,    -1,   173,   174,   175,    -1,    -1,   178,   179,
      -1,   181,   182,   183,   184,    -1,   186,    -1,    -1,    -1,
     190,    -1,   192,    -1,   194,    -1,   196,   197,   198,   199,
     200,   201,    -1,   203,    -1,    -1,    -1,   207,   208,   209,
      -1,   211,   212,    -1,   214,   215,    -1,    -1,    -1,   219,
     220,   221,   222,    -1,    -1,   225,   226,   227,    -1,   229,
      -1,   231,    -1,    -1,    -1,    -1,   236,   237,    -1,    -1,
      -1,   241,    -1,   243,   244,    -1,   246,   247,    -1,    -1,
      -1,   251,    -1,    -1,   254,   255,   256,    -1,    -1,   259,
      -1,    -1,   262,   263,    -1,    -1,    -1,    -1,    -1,   269,
     270,    -1,   272,    -1,   274,    -1,   276,   277,    -1,    -1,
     280,    -1,    -1,    -1,    -1,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
      -1,   301,   302,   303,    -1,   305,   306,   307,   308,    -1,
     310,   311,    -1,    -1,    -1,    -1,   316,   317,   318,   319,
     320,   321,    -1,    -1,   324,   325,    -1,   327,    -1,   329,
      -1,   331,   332,   333,   334,   335,   336,   337,   338,   339,
      -1,    -1,   342,   343,    -1,    -1,   346,   347,   348,   349,
      -1,    -1,    -1,   353,   354,    -1,    -1,   357,    -1,   359,
     360,   361,    -1,   363,   364,   365,   366,    -1,   368,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   378,   379,
     380,    -1,    -1,   383,    -1,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,    -1,    -1,   399,
     400,   401,    -1,   403,    -1,   405,   406,   407,   408,   409,
      -1,   411,   412,   413,    -1,    -1,   416,    -1,    -1,    -1,
     420,   421,   422,   423,   424,    -1,    -1,   427,   428,   429,
     430,   431,    -1,   433,   434,    -1,   436,   437,   438,    -1,
      -1,   441,    -1,   443,    -1,   445,   446,    -1,   448,   449,
      -1,    -1,    -1,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   462,    -1,   464,   465,    -1,    -1,    -1,   469,
     470,   471,   472,    -1,    -1,    -1,   476,    -1,    -1,    -1,
     480,    -1,   482,   483,   484,   485,   486,    -1,   488,   489,
     490,   491,   492,   493,    -1,    -1,    -1,    -1,    -1,    -1,
     500,   501,    -1,   503,    -1,    -1,   506,    -1,    -1,   509,
     510,   511,    -1,    -1,   514,   515,    -1,   517,   518,   519,
     520,   521,   522,    -1,    -1,   525,   526,   527,   528,    -1,
     530,   531,    -1,   533,    -1,   535,   536,   537,   538,    -1,
     540,   541,   542,    -1,   544,   545,   546,   547,    -1,    -1,
      -1,    -1,    -1,   553,   554,   555,    -1,    -1,    -1,   559,
     560,   561,   562,   563,   564,   565,    -1,   567,   568,    -1,
     570,   571,    -1,    -1,   574,    -1,    -1,   577,    -1,   579,
      -1,   581,   582,   583,    -1,    -1,    -1,    -1,    -1,    -1,
     590,    -1,    -1,   593,    -1,    -1,    -1,   597,   598,   599,
     600,   601,   602,    -1,    -1,    -1,    -1,    -1,    -1,   609,
     610,    -1,   612,   613,   614,    -1,     5,   617,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      -1,    -1,    21,    -1,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,
      49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,
      59,    -1,    61,    62,    -1,    64,    65,    66,    67,    68,
      69,    70,    -1,    72,    73,    74,    75,    76,    77,    78,
      -1,    80,    81,    82,    83,    84,    85,    86,    87,    -1,
      89,    90,    -1,    92,    93,    94,    95,    96,    -1,    98,
      -1,    -1,   101,    -1,    -1,   104,    -1,    -1,    -1,   108,
      -1,    -1,    -1,   112,   113,   114,    -1,    -1,   117,    -1,
      -1,    -1,    -1,   122,   123,   124,    -1,    -1,   127,   128,
      -1,   130,    -1,    -1,    -1,   134,    -1,   136,   137,   138,
     139,    -1,    -1,    -1,   143,    -1,    -1,   146,   147,   148,
      -1,    -1,    -1,   152,    -1,   154,   155,    -1,   157,   158,
     159,    -1,    -1,   162,   163,    -1,   165,   166,   167,   168,
     169,   170,    -1,    -1,   173,   174,   175,    -1,    -1,   178,
     179,    -1,   181,   182,   183,   184,    -1,   186,    -1,    -1,
      -1,   190,    -1,   192,    -1,   194,    -1,   196,   197,   198,
     199,   200,   201,    -1,   203,    -1,    -1,    -1,   207,   208,
     209,    -1,   211,   212,    -1,   214,   215,    -1,    -1,    -1,
     219,   220,   221,   222,    -1,    -1,   225,   226,   227,    -1,
     229,    -1,   231,    -1,    -1,    -1,    -1,   236,   237,    -1,
      -1,    -1,   241,    -1,   243,   244,    -1,   246,   247,    -1,
      -1,    -1,   251,    -1,    -1,   254,   255,   256,    -1,    -1,
     259,    -1,    -1,   262,   263,    -1,    -1,    -1,    -1,    -1,
     269,   270,    -1,   272,    -1,   274,    -1,   276,   277,    -1,
      -1,   280,    -1,    -1,    -1,    -1,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,    -1,   301,   302,   303,    -1,   305,   306,   307,   308,
      -1,   310,   311,    -1,    -1,    -1,    -1,   316,   317,   318,
     319,   320,   321,    -1,    -1,   324,   325,    -1,   327,    -1,
     329,    -1,   331,   332,   333,   334,   335,   336,   337,   338,
     339,    -1,    -1,   342,   343,    -1,    -1,   346,   347,   348,
     349,    -1,    -1,    -1,   353,   354,    -1,    -1,   357,    -1,
     359,   360,   361,    -1,   363,   364,   365,   366,    -1,   368,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   378,
     379,   380,    -1,    -1,   383,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,    -1,    -1,
     399,   400,   401,    -1,   403,    -1,   405,   406,   407,   408,
     409,    -1,   411,   412,   413,    -1,    -1,   416,    -1,    -1,
      -1,   420,   421,   422,   423,   424,    -1,    -1,   427,   428,
     429,   430,   431,    -1,   433,   434,    -1,   436,   437,   438,
      -1,    -1,   441,    -1,   443,    -1,   445,   446,    -1,   448,
     449,    -1,    -1,    -1,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,    -1,   464,   465,    -1,    -1,    -1,
     469,   470,   471,   472,    -1,    -1,    -1,   476,    -1,    -1,
      -1,   480,    -1,   482,   483,   484,   485,   486,    -1,   488,
     489,   490,   491,   492,   493,    -1,    -1,    -1,    -1,    -1,
      -1,   500,   501,    -1,   503,    -1,    -1,   506,    -1,    -1,
     509,   510,   511,    -1,    -1,   514,   515,    -1,   517,   518,
     519,   520,   521,   522,    -1,    -1,   525,   526,   527,   528,
      -1,   530,   531,    -1,   533,    -1,   535,   536,   537,   538,
      -1,   540,   541,   542,    -1,   544,   545,   546,   547,    -1,
      -1,    -1,    -1,    -1,   553,   554,   555,    -1,    -1,    -1,
     559,   560,   561,   562,   563,   564,   565,    -1,   567,   568,
      -1,   570,   571,    -1,    -1,   574,    -1,    -1,   577,    -1,
     579,    -1,   581,   582,   583,    -1,    -1,    -1,    -1,    -1,
      -1,   590,    -1,    -1,   593,    -1,    -1,    -1,   597,   598,
     599,   600,   601,   602,    -1,    -1,    -1,    -1,    -1,    -1,
     609,   610,    -1,   612,   613,   614,    -1,     5,   617,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,    -1,    -1,    21,    -1,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    -1,    -1,    34,    35,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,
      48,    49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,
      58,    59,    -1,    61,    62,    -1,    64,    65,    66,    67,
      68,    69,    70,    -1,    72,    73,    74,    75,    76,    77,
      78,    -1,    80,    81,    82,    83,    84,    85,    86,    87,
      -1,    89,    90,    -1,    92,    93,    94,    95,    96,    -1,
      98,    -1,    -1,   101,    -1,    -1,   104,    -1,    -1,    -1,
     108,    -1,    -1,    -1,   112,   113,   114,    -1,    -1,   117,
      -1,    -1,    -1,    -1,   122,   123,    -1,    -1,    -1,   127,
     128,    -1,   130,    -1,    -1,    -1,   134,    -1,   136,   137,
     138,   139,    -1,    -1,    -1,   143,    -1,    -1,   146,   147,
     148,    -1,    -1,    -1,   152,    -1,   154,   155,    -1,   157,
     158,   159,   160,    -1,   162,   163,    -1,   165,   166,   167,
     168,   169,   170,    -1,    -1,   173,   174,   175,    -1,    -1,
     178,   179,    -1,   181,   182,   183,    -1,    -1,   186,    -1,
      -1,    -1,   190,    -1,   192,    -1,   194,    -1,   196,   197,
     198,   199,   200,   201,    -1,   203,    -1,    -1,    -1,   207,
     208,   209,    -1,   211,    -1,    -1,   214,   215,    -1,    -1,
      -1,   219,   220,   221,   222,    -1,    -1,   225,   226,   227,
      -1,   229,    -1,   231,    -1,    -1,    -1,    -1,   236,   237,
      -1,    -1,    -1,   241,    -1,   243,   244,    -1,   246,   247,
      -1,    -1,    -1,   251,    -1,    -1,   254,   255,   256,    -1,
      -1,   259,    -1,    -1,   262,   263,   264,    -1,    -1,    -1,
      -1,   269,   270,    -1,   272,    -1,   274,    -1,   276,   277,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,    -1,   301,   302,   303,    -1,   305,   306,   307,
     308,    -1,   310,   311,    -1,    -1,    -1,    -1,   316,   317,
     318,   319,   320,   321,    -1,    -1,   324,   325,    -1,   327,
      -1,   329,    -1,   331,   332,   333,   334,   335,   336,   337,
     338,   339,    -1,    -1,   342,   343,    -1,    -1,   346,   347,
     348,   349,    -1,    -1,    -1,   353,   354,    -1,    -1,    -1,
      -1,   359,   360,   361,    -1,   363,   364,   365,   366,    -1,
     368,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     378,   379,   380,    -1,    -1,   383,    -1,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,    -1,
      -1,   399,   400,   401,    -1,   403,    -1,   405,   406,   407,
     408,   409,    -1,   411,   412,   413,    -1,    -1,   416,    -1,
      -1,    -1,   420,   421,   422,   423,   424,    -1,    -1,   427,
     428,   429,   430,   431,    -1,   433,   434,    -1,   436,   437,
     438,    -1,    -1,   441,    -1,   443,    -1,   445,   446,    -1,
     448,   449,    -1,    -1,    -1,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   462,    -1,   464,   465,    -1,    -1,
      -1,   469,   470,   471,   472,    -1,    -1,   475,   476,    -1,
      -1,    -1,   480,    -1,   482,   483,   484,   485,   486,    -1,
     488,   489,   490,   491,   492,   493,    -1,    -1,    -1,    -1,
      -1,    -1,   500,   501,    -1,   503,    -1,    -1,   506,    -1,
      -1,   509,   510,   511,    -1,    -1,   514,   515,    -1,   517,
     518,   519,   520,   521,   522,    -1,    -1,   525,   526,   527,
     528,    -1,   530,   531,    -1,   533,    -1,   535,   536,   537,
     538,    -1,   540,   541,   542,    -1,   544,   545,   546,   547,
      -1,    -1,    -1,    -1,    -1,   553,   554,   555,    -1,    -1,
      -1,   559,   560,   561,   562,    -1,   564,   565,    -1,   567,
     568,    -1,   570,   571,    -1,    -1,   574,    -1,    -1,   577,
      -1,   579,    -1,   581,   582,   583,    -1,    -1,    -1,    -1,
      -1,    -1,   590,    -1,    -1,   593,    -1,    -1,    -1,   597,
     598,   599,   600,   601,   602,    -1,    -1,    -1,    -1,    -1,
      -1,   609,   610,    -1,   612,   613,   614,    -1,     5,   617,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    -1,    -1,    34,    35,    -1,
      -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,
      -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,    56,
      -1,    58,    59,    -1,    61,    62,    -1,    64,    65,    66,
      67,    68,    69,    70,    -1,    72,    73,    74,    75,    76,
      77,    78,    -1,    80,    81,    82,    83,    84,    85,    86,
      87,    -1,    89,    90,    -1,    92,    93,    94,    95,    96,
      -1,    98,    -1,    -1,   101,    -1,    -1,   104,    -1,    -1,
      -1,   108,    -1,    -1,    -1,   112,   113,   114,    -1,    -1,
     117,    -1,    -1,    -1,    -1,   122,   123,    -1,    -1,    -1,
     127,   128,    -1,   130,    -1,    -1,    -1,   134,    -1,   136,
     137,   138,   139,    -1,    -1,    -1,   143,    -1,    -1,   146,
     147,   148,    -1,    -1,    -1,   152,    -1,   154,   155,    -1,
     157,   158,   159,    -1,    -1,   162,   163,    -1,   165,   166,
     167,   168,   169,   170,    -1,    -1,   173,   174,   175,    -1,
      -1,   178,   179,    -1,   181,   182,   183,    -1,    -1,   186,
      -1,    -1,    -1,   190,    -1,   192,    -1,   194,    -1,   196,
     197,   198,   199,   200,   201,    -1,   203,    -1,    -1,    -1,
     207,   208,   209,    -1,   211,    -1,    -1,   214,   215,    -1,
      -1,    -1,   219,   220,   221,   222,    -1,    -1,   225,   226,
     227,    -1,   229,    -1,   231,    -1,    -1,    -1,    -1,   236,
     237,    -1,    -1,    -1,   241,    -1,   243,   244,    -1,   246,
     247,    -1,    -1,    -1,   251,    -1,    -1,   254,   255,   256,
      -1,    -1,   259,    -1,    -1,   262,   263,   264,    -1,    -1,
      -1,    -1,   269,   270,    -1,   272,    -1,   274,    -1,   276,
     277,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,    -1,   301,   302,   303,    -1,   305,   306,
     307,   308,    -1,   310,   311,    -1,    -1,    -1,    -1,   316,
     317,   318,   319,   320,   321,    -1,    -1,   324,   325,    -1,
     327,    -1,   329,    -1,   331,   332,   333,   334,   335,   336,
     337,   338,   339,    -1,    -1,   342,   343,    -1,    -1,   346,
     347,   348,   349,    -1,    -1,    -1,   353,   354,    -1,    -1,
      -1,    -1,   359,   360,   361,    -1,   363,   364,   365,   366,
      -1,   368,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   378,   379,   380,    -1,    -1,   383,    -1,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
      -1,    -1,   399,   400,   401,    -1,   403,    -1,   405,   406,
     407,   408,   409,    -1,   411,   412,   413,    -1,    -1,   416,
      -1,    -1,    -1,   420,   421,   422,   423,   424,    -1,    -1,
     427,   428,   429,   430,   431,    -1,   433,   434,    -1,   436,
     437,   438,    -1,    -1,   441,    -1,   443,    -1,   445,   446,
      -1,   448,   449,    -1,    -1,    -1,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,    -1,   464,   465,    -1,
      -1,    -1,   469,   470,   471,   472,    -1,    -1,    -1,   476,
      -1,    -1,    -1,   480,    -1,   482,   483,   484,   485,   486,
      -1,   488,   489,   490,   491,   492,   493,    -1,    -1,    -1,
      -1,    -1,    -1,   500,   501,    -1,   503,    -1,    -1,   506,
      -1,    -1,   509,   510,   511,    -1,    -1,   514,   515,    -1,
     517,   518,   519,   520,   521,   522,    -1,    -1,   525,   526,
     527,   528,    -1,   530,   531,    -1,   533,    -1,   535,   536,
     537,   538,    -1,   540,   541,   542,    -1,   544,   545,   546,
     547,    -1,    -1,    -1,    -1,    -1,   553,   554,   555,    -1,
      -1,    -1,   559,   560,   561,   562,    -1,   564,   565,    -1,
     567,   568,    -1,   570,   571,    -1,    -1,   574,    -1,    -1,
     577,    -1,   579,    -1,   581,   582,   583,    -1,    -1,    -1,
      -1,    -1,    -1,   590,    -1,    -1,   593,    -1,    -1,    -1,
     597,   598,   599,   600,   601,   602,    -1,    -1,    -1,    -1,
      -1,    -1,   609,   610,    -1,   612,   613,   614,    -1,     5,
     617,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    -1,    -1,    -1,    35,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,
      56,    -1,    58,    59,    -1,    61,    62,    -1,    64,    65,
      66,    67,    68,    69,    70,    -1,    72,    73,    74,    75,
      76,    77,    78,    -1,    80,    81,    82,    83,    84,    85,
      86,    87,    -1,    89,    90,    -1,    92,    93,    94,    95,
      96,    -1,    98,    -1,    -1,   101,    -1,    -1,   104,    -1,
      -1,    -1,   108,    -1,    -1,    -1,   112,   113,   114,    -1,
      -1,   117,    -1,    -1,    -1,    -1,   122,   123,    -1,    -1,
      -1,    -1,   128,    -1,   130,    -1,    -1,    -1,   134,    -1,
     136,   137,   138,   139,    -1,    -1,    -1,   143,    -1,    -1,
     146,   147,   148,    -1,    -1,    -1,   152,    -1,   154,   155,
      -1,   157,   158,   159,    -1,    -1,   162,   163,    -1,   165,
     166,   167,   168,   169,   170,    -1,    -1,   173,   174,   175,
      -1,    -1,   178,   179,    -1,   181,   182,   183,    -1,    -1,
     186,    -1,    -1,    -1,   190,    -1,   192,    -1,   194,    -1,
     196,   197,   198,   199,   200,   201,    -1,   203,    -1,    -1,
      -1,   207,   208,   209,    -1,   211,    -1,    -1,   214,   215,
      -1,    -1,    -1,   219,   220,   221,   222,    -1,    -1,   225,
     226,   227,    -1,   229,    -1,   231,    -1,    -1,    -1,    -1,
     236,   237,    -1,    -1,    -1,   241,    -1,   243,   244,    -1,
     246,   247,    -1,    -1,    -1,   251,    -1,    -1,   254,   255,
     256,    -1,    -1,   259,    -1,    -1,   262,   263,    -1,    -1,
      -1,    -1,    -1,   269,   270,    -1,   272,    -1,   274,    -1,
     276,   277,    -1,    -1,   280,    -1,    -1,    -1,    -1,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,    -1,   301,   302,   303,    -1,   305,
     306,   307,   308,    -1,   310,   311,    -1,    -1,    -1,    -1,
     316,   317,   318,   319,   320,   321,    -1,    -1,   324,   325,
      -1,   327,    -1,   329,    -1,   331,   332,   333,   334,   335,
     336,   337,   338,   339,    -1,    -1,   342,   343,    -1,    -1,
     346,   347,   348,   349,    -1,    -1,    -1,   353,   354,    -1,
      -1,   357,    -1,   359,   360,   361,    -1,   363,   364,   365,
     366,    -1,   368,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   378,   379,   380,    -1,   382,   383,    -1,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,    -1,    -1,   399,   400,   401,    -1,   403,    -1,   405,
     406,   407,   408,   409,    -1,   411,   412,   413,    -1,    -1,
     416,    -1,    -1,    -1,   420,   421,   422,   423,   424,    -1,
      -1,   427,   428,   429,   430,   431,    -1,   433,   434,    -1,
     436,   437,   438,    -1,    -1,   441,    -1,   443,    -1,   445,
     446,    -1,   448,   449,    -1,    -1,    -1,   453,   454,   455,
     456,   457,   458,   459,   460,   461,   462,    -1,   464,   465,
      -1,    -1,    -1,   469,   470,   471,   472,    -1,    -1,    -1,
     476,    -1,    -1,    -1,   480,    -1,   482,   483,   484,   485,
     486,    -1,   488,   489,   490,   491,   492,   493,    -1,    -1,
      -1,    -1,    -1,    -1,   500,   501,    -1,   503,    -1,    -1,
     506,    -1,    -1,   509,   510,   511,    -1,    -1,   514,   515,
      -1,   517,   518,   519,   520,   521,   522,    -1,    -1,   525,
     526,   527,   528,    -1,   530,   531,    -1,   533,    -1,   535,
     536,   537,   538,    -1,    -1,   541,   542,    -1,   544,   545,
     546,   547,    -1,    -1,    -1,    -1,    -1,   553,   554,   555,
      -1,    -1,    -1,   559,   560,   561,   562,   563,   564,   565,
      -1,   567,   568,    -1,   570,   571,    -1,    -1,   574,    -1,
      -1,   577,    -1,   579,    -1,   581,   582,   583,    -1,    -1,
      -1,    -1,    -1,    -1,   590,    -1,    -1,   593,    -1,    -1,
      -1,   597,   598,   599,   600,   601,   602,    -1,    -1,    -1,
      -1,    -1,    -1,   609,   610,    -1,   612,   613,   614,    -1,
       5,   617,     7,     8,     9,    10,    11,    -1,    -1,    14,
      -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    -1,    -1,    -1,
      35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,
      -1,    46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,
      55,    56,    -1,    58,    59,    -1,    61,    62,    -1,    64,
      65,    66,    67,    68,    69,    70,    -1,    72,    73,    74,
      75,    76,    77,    78,    -1,    80,    81,    82,    83,    84,
      85,    86,    87,    -1,    89,    90,    -1,    92,    93,    94,
      95,    96,    -1,    98,    -1,    -1,   101,    -1,    -1,   104,
      -1,    -1,    -1,   108,    -1,    -1,    -1,   112,   113,   114,
      -1,    -1,   117,    -1,    -1,    -1,    -1,   122,   123,    -1,
      -1,    -1,    -1,   128,    -1,   130,    -1,    -1,    -1,   134,
      -1,   136,   137,   138,   139,    -1,    -1,    -1,   143,    -1,
      -1,   146,   147,   148,    -1,    -1,    -1,   152,    -1,   154,
     155,    -1,   157,   158,   159,    -1,    -1,   162,   163,    -1,
     165,   166,   167,   168,   169,   170,    -1,    -1,   173,   174,
     175,    -1,    -1,   178,   179,    -1,   181,   182,   183,    -1,
      -1,   186,    -1,    -1,    -1,   190,    -1,   192,    -1,   194,
      -1,   196,   197,   198,   199,   200,   201,    -1,   203,    -1,
      -1,    -1,   207,   208,   209,    -1,   211,    -1,    -1,   214,
     215,    -1,    -1,    -1,   219,   220,   221,   222,    -1,    -1,
     225,   226,   227,    -1,   229,    -1,   231,    -1,    -1,    -1,
      -1,   236,   237,    -1,    -1,    -1,   241,    -1,   243,   244,
      -1,   246,   247,    -1,    -1,    -1,   251,    -1,    -1,   254,
     255,   256,    -1,    -1,   259,    -1,    -1,   262,   263,    -1,
      -1,    -1,    -1,    -1,   269,   270,    -1,   272,    -1,   274,
      -1,   276,   277,    -1,    -1,   280,    -1,    -1,    -1,    -1,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,    -1,   301,   302,   303,    -1,
     305,   306,   307,   308,    -1,   310,   311,    -1,    -1,    -1,
      -1,   316,   317,   318,   319,   320,   321,    -1,    -1,   324,
     325,    -1,   327,    -1,   329,    -1,   331,   332,   333,   334,
     335,   336,   337,   338,   339,    -1,    -1,   342,   343,    -1,
      -1,   346,   347,   348,   349,    -1,    -1,    -1,   353,   354,
      -1,    -1,   357,    -1,   359,   360,   361,    -1,   363,   364,
     365,   366,    -1,   368,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   378,   379,   380,    -1,   382,   383,    -1,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,    -1,    -1,   399,   400,   401,    -1,   403,    -1,
     405,   406,   407,   408,   409,    -1,   411,   412,   413,    -1,
      -1,   416,    -1,    -1,    -1,   420,   421,   422,   423,   424,
      -1,    -1,   427,   428,   429,   430,   431,    -1,   433,   434,
      -1,   436,   437,   438,    -1,    -1,   441,    -1,   443,    -1,
     445,   446,    -1,   448,   449,    -1,    -1,    -1,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,    -1,   464,
     465,    -1,    -1,    -1,   469,   470,   471,   472,    -1,    -1,
      -1,   476,    -1,    -1,    -1,   480,    -1,   482,   483,   484,
     485,   486,    -1,   488,   489,   490,   491,   492,   493,    -1,
      -1,    -1,    -1,    -1,    -1,   500,   501,    -1,   503,    -1,
      -1,   506,    -1,    -1,   509,   510,   511,    -1,    -1,   514,
     515,    -1,   517,   518,   519,   520,   521,   522,    -1,    -1,
     525,   526,   527,   528,    -1,   530,   531,    -1,   533,    -1,
     535,   536,   537,   538,    -1,    -1,   541,   542,    -1,   544,
     545,   546,   547,    -1,    -1,    -1,    -1,    -1,   553,   554,
     555,    -1,    -1,    -1,   559,   560,   561,   562,   563,   564,
     565,    -1,   567,   568,    -1,   570,   571,    -1,    -1,   574,
      -1,    -1,   577,    -1,   579,    -1,   581,   582,   583,    -1,
      -1,    -1,    -1,    -1,    -1,   590,    -1,    -1,   593,    -1,
      -1,    -1,   597,   598,   599,   600,   601,   602,    -1,    -1,
      -1,    -1,    -1,    -1,   609,   610,    -1,   612,   613,   614,
      -1,     5,   617,     7,     8,     9,    10,    11,    -1,    -1,
      14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    -1,    -1,
      34,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,    -1,
      -1,    55,    56,    -1,    58,    59,    -1,    61,    62,    -1,
      64,    65,    66,    67,    68,    69,    70,    -1,    72,    73,
      74,    75,    76,    77,    78,    -1,    80,    81,    82,    83,
      84,    85,    86,    87,    -1,    89,    90,    -1,    92,    93,
      94,    95,    96,    -1,    98,    -1,    -1,   101,    -1,    -1,
     104,    -1,    -1,    -1,   108,    -1,    -1,    -1,   112,   113,
     114,    -1,    -1,   117,    -1,    -1,    -1,    -1,   122,   123,
      -1,    -1,    -1,   127,   128,    -1,   130,    -1,    -1,    -1,
     134,    -1,   136,   137,   138,   139,    -1,    -1,    -1,   143,
      -1,    -1,   146,   147,   148,    -1,    -1,    -1,   152,    -1,
     154,   155,    -1,   157,   158,   159,    -1,    -1,   162,   163,
      -1,   165,   166,   167,   168,   169,   170,    -1,    -1,   173,
     174,   175,    -1,    -1,   178,   179,    -1,   181,   182,   183,
      -1,    -1,   186,    -1,    -1,    -1,   190,    -1,   192,    -1,
     194,    -1,   196,   197,   198,   199,   200,   201,    -1,   203,
      -1,    -1,    -1,   207,   208,   209,    -1,   211,    -1,    -1,
     214,   215,    -1,    -1,    -1,   219,   220,   221,   222,    -1,
      -1,   225,   226,   227,    -1,   229,    -1,   231,    -1,    -1,
      -1,    -1,   236,   237,    -1,    -1,    -1,   241,    -1,   243,
     244,    -1,   246,   247,    -1,    -1,    -1,   251,    -1,    -1,
     254,   255,   256,    -1,    -1,   259,    -1,    -1,   262,   263,
     264,    -1,    -1,    -1,    -1,   269,   270,    -1,   272,    -1,
     274,    -1,   276,   277,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,    -1,   301,   302,   303,
      -1,   305,   306,   307,   308,    -1,   310,   311,    -1,    -1,
      -1,    -1,   316,   317,   318,   319,   320,   321,    -1,    -1,
     324,   325,    -1,   327,    -1,   329,    -1,   331,   332,   333,
     334,   335,   336,   337,   338,   339,    -1,    -1,   342,   343,
      -1,    -1,   346,   347,   348,   349,    -1,    -1,    -1,   353,
     354,    -1,    -1,    -1,    -1,   359,   360,   361,    -1,   363,
     364,   365,   366,    -1,   368,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   378,   379,   380,    -1,    -1,   383,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,    -1,    -1,   399,   400,   401,    -1,   403,
      -1,   405,   406,   407,   408,   409,    -1,   411,   412,   413,
      -1,    -1,   416,    -1,    -1,    -1,   420,   421,   422,   423,
     424,    -1,    -1,   427,   428,   429,   430,   431,    -1,   433,
     434,    -1,   436,   437,   438,    -1,    -1,   441,    -1,   443,
      -1,   445,   446,    -1,   448,   449,    -1,    -1,    -1,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,    -1,
     464,   465,    -1,    -1,    -1,   469,   470,   471,   472,    -1,
      -1,    -1,   476,    -1,    -1,    -1,   480,    -1,   482,   483,
     484,   485,   486,    -1,   488,   489,   490,   491,   492,   493,
      -1,    -1,    -1,    -1,    -1,    -1,   500,   501,    -1,   503,
      -1,    -1,   506,    -1,    -1,   509,   510,   511,    -1,    -1,
     514,   515,    -1,   517,   518,   519,   520,   521,   522,    -1,
      -1,   525,   526,   527,   528,    -1,   530,   531,    -1,   533,
      -1,   535,   536,   537,   538,    -1,   540,   541,   542,    -1,
     544,   545,   546,   547,    -1,    -1,    -1,    -1,    -1,   553,
     554,   555,    -1,    -1,    -1,   559,   560,   561,   562,    -1,
     564,   565,    -1,   567,   568,    -1,   570,   571,    -1,    -1,
     574,    -1,    -1,   577,    -1,   579,    -1,   581,   582,   583,
      -1,    -1,    -1,    -1,    -1,    -1,   590,    -1,    -1,   593,
      -1,    -1,    -1,   597,   598,   599,   600,   601,   602,    -1,
      -1,    -1,    -1,    -1,    -1,   609,   610,    -1,   612,   613,
     614,    -1,     5,   617,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    -1,
      -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,
      -1,    -1,    55,    56,    -1,    58,    59,    -1,    61,    62,
      -1,    64,    65,    66,    67,    68,    69,    70,    -1,    72,
      73,    74,    75,    76,    77,    78,    -1,    80,    81,    82,
      83,    84,    85,    86,    87,    -1,    89,    90,    -1,    92,
      93,    94,    95,    96,    -1,    98,    -1,    -1,   101,    -1,
      -1,   104,    -1,    -1,    -1,   108,    -1,    -1,    -1,   112,
     113,   114,    -1,    -1,   117,    -1,    -1,    -1,    -1,   122,
     123,    -1,    -1,    -1,    -1,   128,    -1,   130,    -1,    -1,
      -1,   134,    -1,   136,   137,   138,   139,    -1,    -1,    -1,
     143,    -1,    -1,   146,   147,   148,    -1,    -1,    -1,   152,
      -1,   154,   155,    -1,   157,   158,   159,    -1,    -1,   162,
     163,    -1,   165,   166,   167,   168,   169,   170,    -1,    -1,
     173,   174,   175,    -1,    -1,   178,   179,    -1,   181,   182,
     183,    -1,    -1,   186,    -1,    -1,    -1,   190,    -1,   192,
      -1,   194,    -1,   196,   197,   198,   199,   200,   201,    -1,
     203,    -1,    -1,    -1,   207,   208,   209,    -1,   211,    -1,
      -1,   214,   215,    -1,    -1,    -1,   219,   220,   221,   222,
      -1,    -1,   225,   226,   227,    -1,   229,    -1,   231,    -1,
      -1,    -1,    -1,   236,   237,    -1,    -1,    -1,   241,    -1,
     243,   244,    -1,   246,   247,    -1,    -1,    -1,   251,    -1,
      -1,   254,   255,   256,    -1,    -1,   259,    -1,    -1,   262,
     263,    -1,    -1,    -1,    -1,    -1,   269,   270,    -1,   272,
      -1,   274,    -1,   276,   277,    -1,    -1,   280,    -1,    -1,
      -1,    -1,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,    -1,   301,   302,
     303,    -1,   305,   306,   307,   308,    -1,   310,   311,    -1,
      -1,    -1,    -1,   316,   317,   318,   319,   320,   321,    -1,
      -1,   324,   325,    -1,   327,    -1,   329,    -1,   331,   332,
     333,   334,   335,   336,   337,   338,   339,    -1,    -1,   342,
     343,    -1,    -1,   346,   347,   348,   349,    -1,    -1,    -1,
     353,   354,    -1,    -1,   357,    -1,   359,   360,   361,    -1,
     363,   364,   365,   366,    -1,   368,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   378,   379,   380,    -1,   382,
     383,    -1,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,    -1,    -1,   399,   400,   401,    -1,
     403,    -1,   405,   406,   407,   408,   409,    -1,   411,   412,
     413,    -1,    -1,   416,    -1,    -1,    -1,   420,   421,   422,
     423,   424,    -1,    -1,   427,   428,   429,   430,   431,    -1,
     433,   434,    -1,   436,   437,   438,    -1,    -1,   441,    -1,
     443,    -1,   445,   446,    -1,   448,   449,    -1,    -1,    -1,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
      -1,   464,   465,    -1,    -1,    -1,   469,   470,   471,   472,
      -1,    -1,    -1,   476,    -1,    -1,    -1,   480,    -1,   482,
     483,   484,   485,   486,    -1,   488,   489,   490,   491,   492,
     493,    -1,    -1,    -1,    -1,    -1,    -1,   500,   501,    -1,
     503,    -1,    -1,   506,    -1,    -1,   509,   510,   511,    -1,
      -1,   514,   515,    -1,   517,   518,   519,   520,   521,   522,
      -1,    -1,   525,   526,   527,   528,    -1,   530,   531,    -1,
     533,    -1,   535,   536,   537,   538,    -1,    -1,   541,   542,
      -1,   544,   545,   546,   547,    -1,    -1,    -1,    -1,    -1,
     553,   554,   555,    -1,    -1,    -1,   559,   560,   561,   562,
     563,   564,   565,    -1,   567,   568,    -1,   570,   571,    -1,
      -1,   574,    -1,    -1,   577,    -1,   579,    -1,   581,   582,
     583,    -1,    -1,    -1,    -1,    -1,    -1,   590,    -1,    -1,
     593,    -1,    -1,    -1,   597,   598,   599,   600,   601,   602,
      -1,    -1,    -1,    -1,    -1,    -1,   609,   610,    -1,   612,
     613,   614,    -1,     5,   617,     7,     8,     9,    10,    11,
      -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,
      -1,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      -1,    -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,
      52,    -1,    -1,    55,    56,    -1,    58,    59,    -1,    61,
      62,    -1,    64,    65,    66,    67,    68,    69,    70,    -1,
      72,    73,    74,    75,    76,    77,    78,    -1,    80,    81,
      82,    83,    84,    85,    86,    87,    -1,    89,    90,    -1,
      92,    93,    94,    95,    96,    -1,    98,    -1,    -1,   101,
      -1,    -1,   104,    -1,   106,    -1,   108,    -1,    -1,    -1,
     112,   113,   114,    -1,    -1,   117,    -1,    -1,    -1,    -1,
     122,   123,    -1,    -1,    -1,    -1,   128,    -1,   130,    -1,
      -1,    -1,   134,    -1,   136,   137,   138,   139,    -1,    -1,
      -1,   143,    -1,    -1,   146,   147,   148,    -1,    -1,    -1,
     152,    -1,   154,   155,    -1,   157,   158,   159,    -1,    -1,
     162,   163,    -1,   165,   166,   167,   168,   169,   170,    -1,
      -1,   173,   174,   175,    -1,    -1,   178,   179,    -1,   181,
     182,   183,    -1,    -1,   186,    -1,    -1,    -1,   190,    -1,
     192,    -1,   194,    -1,   196,   197,   198,   199,   200,   201,
      -1,   203,    -1,    -1,    -1,   207,   208,   209,    -1,   211,
      -1,    -1,   214,   215,    -1,    -1,    -1,   219,   220,   221,
     222,    -1,    -1,   225,   226,   227,    -1,   229,    -1,   231,
      -1,    -1,    -1,    -1,   236,   237,    -1,    -1,    -1,   241,
      -1,   243,   244,    -1,   246,   247,    -1,    -1,    -1,   251,
      -1,    -1,   254,   255,   256,    -1,    -1,   259,    -1,    -1,
     262,   263,   264,    -1,    -1,    -1,    -1,   269,   270,    -1,
     272,    -1,   274,    -1,   276,   277,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,    -1,   301,
     302,   303,    -1,   305,   306,   307,   308,    -1,   310,   311,
      -1,    -1,    -1,    -1,   316,   317,   318,   319,   320,   321,
      -1,    -1,   324,   325,    -1,   327,    -1,   329,    -1,   331,
     332,   333,   334,   335,   336,   337,   338,   339,    -1,    -1,
     342,   343,    -1,    -1,   346,   347,   348,   349,    -1,    -1,
      -1,   353,   354,    -1,    -1,    -1,    -1,   359,   360,   361,
      -1,   363,   364,   365,   366,    -1,   368,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   378,   379,   380,    -1,
      -1,   383,    -1,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,    -1,    -1,   399,   400,   401,
      -1,   403,    -1,   405,   406,   407,   408,   409,    -1,   411,
     412,   413,    -1,    -1,   416,    -1,    -1,    -1,   420,   421,
     422,   423,   424,    -1,    -1,   427,   428,   429,   430,   431,
      -1,   433,   434,    -1,   436,   437,   438,    -1,    -1,   441,
      -1,   443,    -1,   445,   446,    -1,   448,   449,    -1,    -1,
      -1,   453,   454,   455,   456,   457,   458,   459,   460,   461,
     462,    -1,   464,   465,    -1,    -1,    -1,   469,   470,   471,
     472,    -1,    -1,    -1,   476,    -1,    -1,    -1,   480,    -1,
     482,   483,   484,   485,   486,    -1,   488,   489,   490,   491,
     492,   493,    -1,    -1,    -1,    -1,    -1,    -1,   500,   501,
      -1,   503,    -1,    -1,   506,    -1,    -1,   509,   510,   511,
      -1,    -1,   514,   515,    -1,   517,   518,   519,   520,   521,
     522,    -1,    -1,   525,   526,   527,   528,    -1,   530,   531,
      -1,   533,    -1,   535,   536,   537,   538,    -1,   540,   541,
     542,    -1,   544,   545,   546,   547,    -1,    -1,    -1,    -1,
      -1,   553,   554,   555,    -1,    -1,    -1,   559,   560,   561,
     562,    -1,   564,   565,    -1,   567,   568,    -1,   570,   571,
      -1,    -1,   574,    -1,    -1,   577,    -1,   579,    -1,   581,
     582,   583,    -1,    -1,    -1,    -1,    -1,    -1,   590,    -1,
      -1,   593,    -1,    -1,    -1,   597,   598,   599,   600,   601,
     602,    -1,    -1,    -1,    -1,    -1,    -1,   609,   610,    -1,
     612,   613,   614,    -1,     5,   617,     7,     8,     9,    10,
      11,    12,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      21,    -1,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    -1,    -1,    -1,    35,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    -1,    48,    49,    -1,
      -1,    52,    -1,    -1,    55,    56,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    66,    67,    68,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    -1,    80,
      81,    82,    83,    84,    85,    86,    87,    -1,    89,    90,
      -1,    92,    93,    94,    95,    96,    -1,    98,    -1,    -1,
     101,    -1,    -1,   104,    -1,    -1,    -1,   108,    -1,    -1,
      -1,   112,   113,   114,    -1,    -1,   117,    -1,    -1,    -1,
      -1,   122,   123,    -1,    -1,    -1,    -1,   128,    -1,   130,
      -1,    -1,    -1,   134,    -1,   136,   137,   138,   139,    -1,
      -1,    -1,   143,    -1,    -1,   146,   147,   148,    -1,    -1,
      -1,   152,    -1,   154,   155,    -1,   157,   158,   159,    -1,
      -1,   162,   163,    -1,   165,   166,   167,   168,   169,   170,
      -1,    -1,   173,   174,   175,    -1,    -1,   178,   179,    -1,
     181,   182,   183,    -1,    -1,   186,    -1,    -1,    -1,   190,
      -1,   192,    -1,   194,    -1,   196,   197,   198,   199,   200,
     201,    -1,   203,    -1,    -1,    -1,   207,   208,   209,    -1,
     211,    -1,    -1,   214,   215,    -1,    -1,    -1,   219,   220,
     221,   222,    -1,    -1,   225,   226,   227,    -1,   229,    -1,
     231,    -1,    -1,    -1,    -1,   236,   237,    -1,    -1,    -1,
     241,    -1,   243,   244,    -1,   246,   247,    -1,    -1,    -1,
     251,    -1,    -1,   254,   255,   256,    -1,    -1,   259,    -1,
      -1,   262,   263,   264,    -1,    -1,    -1,    -1,   269,   270,
      -1,   272,    -1,   274,    -1,   276,   277,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,    -1,
     301,   302,   303,    -1,   305,   306,   307,   308,    -1,   310,
     311,    -1,    -1,    -1,    -1,   316,   317,   318,   319,   320,
     321,    -1,    -1,   324,   325,    -1,   327,    -1,   329,    -1,
     331,   332,   333,   334,   335,   336,   337,   338,   339,    -1,
      -1,   342,   343,    -1,    -1,   346,   347,   348,   349,    -1,
      -1,    -1,   353,   354,    -1,    -1,    -1,    -1,   359,   360,
     361,    -1,   363,   364,   365,   366,    -1,   368,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   378,   379,   380,
      -1,    -1,   383,    -1,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,    -1,    -1,   399,   400,
     401,    -1,   403,    -1,   405,   406,   407,   408,   409,    -1,
     411,   412,   413,    -1,    -1,   416,    -1,    -1,    -1,   420,
     421,   422,   423,   424,    -1,    -1,   427,   428,   429,   430,
     431,    -1,   433,   434,    -1,   436,   437,   438,    -1,    -1,
     441,    -1,   443,    -1,   445,   446,    -1,   448,   449,    -1,
      -1,    -1,   453,   454,   455,   456,   457,   458,   459,   460,
     461,   462,    -1,   464,   465,    -1,    -1,    -1,   469,   470,
     471,   472,    -1,    -1,    -1,   476,    -1,    -1,    -1,   480,
      -1,   482,   483,   484,   485,   486,    -1,   488,   489,   490,
     491,   492,   493,    -1,    -1,    -1,    -1,    -1,    -1,   500,
     501,    -1,   503,    -1,    -1,   506,    -1,    -1,   509,   510,
     511,    -1,    -1,   514,   515,    -1,   517,   518,   519,   520,
     521,   522,    -1,    -1,   525,   526,   527,   528,    -1,   530,
     531,    -1,   533,    -1,   535,   536,   537,   538,    -1,   540,
     541,   542,    -1,   544,   545,   546,   547,    -1,    -1,    -1,
      -1,    -1,   553,   554,   555,    -1,    -1,    -1,   559,   560,
     561,   562,    -1,   564,   565,    -1,   567,   568,    -1,   570,
     571,    -1,    -1,   574,    -1,    -1,   577,    -1,   579,    -1,
     581,   582,   583,    -1,    -1,    -1,    -1,    -1,    -1,   590,
      -1,    -1,   593,    -1,    -1,    -1,   597,   598,   599,   600,
     601,   602,    -1,    -1,    -1,    -1,    -1,    -1,   609,   610,
      -1,   612,   613,   614,    -1,     5,   617,     7,     8,     9,
      10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,
      -1,    21,    -1,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    -1,    -1,    -1,    35,    36,    -1,    -1,    39,
      -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,    49,
      -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,    59,
      -1,    61,    62,    -1,    64,    65,    66,    67,    68,    69,
      70,    -1,    72,    73,    74,    75,    76,    77,    78,    -1,
      80,    81,    82,    83,    84,    85,    86,    87,    -1,    89,
      90,    -1,    92,    93,    94,    95,    96,    -1,    98,    -1,
      -1,   101,    -1,    -1,   104,    -1,    -1,    -1,   108,    -1,
      -1,    -1,   112,   113,   114,    -1,    -1,   117,    -1,    -1,
      -1,    -1,   122,   123,    -1,    -1,    -1,    -1,   128,    -1,
     130,    -1,    -1,    -1,   134,    -1,   136,   137,   138,   139,
      -1,    -1,    -1,   143,    -1,    -1,   146,   147,   148,    -1,
      -1,    -1,   152,    -1,   154,   155,    -1,   157,   158,   159,
      -1,    -1,   162,   163,    -1,   165,   166,   167,   168,   169,
     170,    -1,    -1,   173,   174,   175,    -1,    -1,   178,   179,
      -1,   181,   182,   183,    -1,    -1,   186,    -1,    -1,    -1,
     190,    -1,   192,    -1,   194,    -1,   196,   197,   198,   199,
     200,   201,    -1,   203,    -1,    -1,    -1,   207,   208,   209,
      -1,   211,   212,    -1,   214,   215,    -1,    -1,    -1,   219,
     220,   221,   222,    -1,    -1,   225,   226,   227,    -1,   229,
      -1,   231,    -1,    -1,    -1,    -1,   236,   237,    -1,    -1,
      -1,   241,    -1,   243,   244,    -1,   246,   247,    -1,    -1,
      -1,   251,    -1,    -1,   254,   255,   256,    -1,    -1,   259,
      -1,    -1,   262,   263,    -1,    -1,    -1,    -1,    -1,   269,
     270,    -1,   272,    -1,   274,    -1,   276,   277,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
      -1,   301,   302,   303,    -1,   305,   306,   307,   308,    -1,
     310,   311,    -1,    -1,    -1,    -1,   316,   317,   318,   319,
     320,   321,    -1,    -1,   324,   325,    -1,   327,    -1,   329,
      -1,   331,   332,   333,   334,   335,   336,   337,   338,   339,
      -1,    -1,   342,   343,    -1,    -1,   346,   347,   348,   349,
      -1,    -1,    -1,   353,   354,    -1,    -1,    -1,    -1,   359,
     360,   361,    -1,   363,   364,   365,   366,    -1,   368,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   378,   379,
     380,    -1,    -1,   383,    -1,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,    -1,    -1,   399,
     400,   401,    -1,   403,    -1,   405,   406,   407,   408,   409,
      -1,   411,   412,   413,    -1,    -1,   416,    -1,    -1,    -1,
     420,   421,   422,   423,   424,    -1,    -1,   427,   428,   429,
     430,   431,    -1,   433,   434,    -1,   436,   437,   438,    -1,
      -1,   441,    -1,   443,    -1,   445,   446,    -1,   448,   449,
      -1,    -1,    -1,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   462,    -1,   464,   465,    -1,    -1,    -1,   469,
     470,   471,   472,    -1,    -1,    -1,   476,    -1,    -1,    -1,
     480,    -1,   482,   483,   484,   485,   486,    -1,   488,   489,
     490,   491,   492,   493,    -1,    -1,    -1,    -1,    -1,    -1,
     500,   501,    -1,   503,    -1,    -1,   506,    -1,    -1,   509,
     510,   511,    -1,    -1,   514,   515,    -1,   517,   518,   519,
     520,   521,   522,    -1,    -1,   525,   526,   527,   528,    -1,
     530,   531,    -1,   533,    -1,   535,   536,   537,   538,    -1,
     540,   541,   542,    -1,   544,   545,   546,   547,    -1,    -1,
      -1,    -1,    -1,   553,   554,   555,    -1,    -1,    -1,   559,
     560,   561,   562,    -1,   564,   565,    -1,   567,   568,    -1,
     570,   571,    -1,    -1,   574,    -1,    -1,   577,    -1,   579,
      -1,   581,   582,   583,    -1,    -1,    -1,    -1,    -1,    -1,
     590,    -1,    -1,   593,    -1,    -1,    -1,   597,   598,   599,
     600,   601,   602,    -1,    -1,    -1,    -1,    -1,    -1,   609,
     610,    -1,   612,   613,   614,    -1,     5,   617,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      -1,    -1,    21,    -1,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,
      49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,
      59,    -1,    61,    62,    -1,    64,    65,    66,    67,    68,
      69,    70,    -1,    72,    73,    74,    75,    76,    77,    78,
      -1,    80,    81,    82,    83,    84,    85,    86,    87,    -1,
      89,    90,    -1,    92,    93,    94,    95,    96,    -1,    98,
      -1,    -1,   101,    -1,    -1,   104,    -1,    -1,    -1,   108,
      -1,    -1,    -1,   112,   113,   114,    -1,    -1,   117,    -1,
      -1,    -1,    -1,   122,   123,    -1,    -1,    -1,   127,   128,
      -1,   130,    -1,    -1,    -1,   134,    -1,   136,   137,   138,
     139,    -1,    -1,    -1,   143,    -1,    -1,   146,   147,   148,
      -1,    -1,    -1,   152,    -1,   154,   155,    -1,   157,   158,
     159,    -1,    -1,   162,   163,    -1,   165,   166,   167,   168,
     169,   170,    -1,    -1,   173,   174,   175,    -1,    -1,   178,
     179,    -1,   181,   182,   183,    -1,    -1,   186,    -1,    -1,
      -1,   190,    -1,   192,    -1,   194,    -1,   196,   197,   198,
     199,   200,   201,    -1,   203,    -1,    -1,    -1,   207,   208,
     209,    -1,   211,    -1,    -1,   214,   215,    -1,    -1,    -1,
     219,   220,   221,   222,    -1,    -1,   225,   226,   227,    -1,
     229,    -1,   231,    -1,    -1,    -1,    -1,   236,   237,    -1,
      -1,    -1,   241,    -1,   243,   244,    -1,   246,   247,    -1,
      -1,    -1,   251,    -1,    -1,   254,   255,   256,    -1,    -1,
     259,    -1,    -1,   262,   263,   264,    -1,    -1,    -1,    -1,
     269,   270,    -1,   272,    -1,   274,    -1,   276,   277,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,    -1,   301,   302,   303,    -1,   305,   306,   307,   308,
      -1,   310,   311,    -1,    -1,    -1,    -1,   316,   317,   318,
     319,   320,   321,    -1,    -1,   324,   325,    -1,   327,    -1,
     329,    -1,   331,   332,   333,   334,   335,   336,   337,   338,
     339,    -1,    -1,   342,   343,    -1,    -1,   346,   347,   348,
     349,    -1,    -1,    -1,   353,   354,    -1,    -1,    -1,    -1,
     359,   360,   361,    -1,   363,   364,   365,   366,    -1,   368,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   378,
     379,   380,    -1,    -1,   383,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,    -1,    -1,
     399,   400,   401,    -1,   403,    -1,   405,   406,   407,   408,
     409,    -1,   411,   412,   413,    -1,    -1,   416,    -1,    -1,
      -1,   420,   421,   422,   423,   424,    -1,    -1,   427,   428,
     429,   430,   431,    -1,   433,   434,    -1,   436,   437,   438,
      -1,    -1,   441,    -1,   443,    -1,   445,   446,    -1,   448,
     449,    -1,    -1,    -1,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,    -1,   464,   465,    -1,    -1,    -1,
     469,   470,   471,   472,    -1,    -1,    -1,   476,    -1,    -1,
      -1,   480,    -1,   482,   483,   484,   485,   486,    -1,   488,
     489,   490,   491,   492,   493,    -1,    -1,    -1,    -1,    -1,
      -1,   500,   501,    -1,   503,    -1,    -1,   506,    -1,    -1,
     509,   510,   511,    -1,    -1,   514,   515,    -1,   517,   518,
     519,   520,   521,   522,    -1,    -1,   525,   526,   527,   528,
      -1,   530,   531,    -1,   533,    -1,   535,   536,   537,   538,
      -1,   540,   541,   542,    -1,   544,   545,   546,   547,    -1,
      -1,    -1,    -1,    -1,   553,   554,   555,    -1,    -1,    -1,
     559,   560,   561,   562,    -1,   564,   565,    -1,   567,   568,
      -1,   570,   571,    -1,    -1,   574,    -1,    -1,   577,    -1,
     579,    -1,   581,   582,   583,    -1,    -1,    -1,    -1,    -1,
      -1,   590,    -1,    -1,   593,    -1,    -1,    -1,   597,   598,
     599,   600,   601,   602,    -1,    -1,    -1,    -1,    -1,    -1,
     609,   610,    -1,   612,   613,   614,    -1,     5,   617,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,    -1,    -1,    21,    -1,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    -1,    -1,    34,    35,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,
      48,    49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,
      58,    59,    -1,    61,    62,    -1,    64,    65,    66,    67,
      68,    69,    70,    -1,    72,    73,    74,    75,    76,    77,
      78,    -1,    80,    81,    82,    83,    84,    85,    86,    87,
      -1,    89,    90,    -1,    92,    93,    94,    95,    96,    -1,
      98,    -1,    -1,   101,    -1,    -1,   104,    -1,    -1,    -1,
     108,    -1,    -1,    -1,   112,   113,   114,    -1,    -1,   117,
      -1,    -1,    -1,    -1,   122,   123,    -1,    -1,    -1,    -1,
     128,    -1,   130,    -1,    -1,    -1,   134,    -1,   136,   137,
     138,   139,    -1,    -1,    -1,   143,    -1,    -1,   146,   147,
     148,    -1,    -1,    -1,   152,    -1,   154,   155,    -1,   157,
     158,   159,    -1,    -1,   162,   163,    -1,   165,   166,   167,
     168,   169,   170,    -1,    -1,   173,   174,   175,    -1,    -1,
     178,   179,    -1,   181,   182,   183,    -1,    -1,   186,    -1,
      -1,    -1,   190,    -1,   192,    -1,   194,    -1,   196,   197,
     198,   199,   200,   201,    -1,   203,    -1,    -1,    -1,   207,
     208,   209,    -1,   211,    -1,    -1,   214,   215,    -1,    -1,
      -1,   219,   220,   221,   222,    -1,    -1,   225,   226,   227,
      -1,   229,    -1,   231,    -1,    -1,    -1,    -1,   236,   237,
      -1,    -1,    -1,   241,    -1,   243,   244,    -1,   246,   247,
      -1,    -1,    -1,   251,    -1,    -1,   254,   255,   256,    -1,
      -1,   259,    -1,    -1,   262,   263,   264,    -1,    -1,    -1,
      -1,   269,   270,    -1,   272,    -1,   274,    -1,   276,   277,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,    -1,   301,   302,   303,    -1,   305,   306,   307,
     308,    -1,   310,   311,    -1,    -1,    -1,    -1,   316,   317,
     318,   319,   320,   321,    -1,    -1,   324,   325,    -1,   327,
      -1,   329,    -1,   331,   332,   333,   334,   335,   336,   337,
     338,   339,    -1,    -1,   342,   343,    -1,    -1,   346,   347,
     348,   349,    -1,    -1,    -1,   353,   354,    -1,    -1,    -1,
      -1,   359,   360,   361,    -1,   363,   364,   365,   366,    -1,
     368,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     378,   379,   380,    -1,    -1,   383,    -1,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,    -1,
      -1,   399,   400,   401,    -1,   403,    -1,   405,   406,   407,
     408,   409,    -1,   411,   412,   413,    -1,    -1,   416,    -1,
      -1,    -1,   420,   421,   422,   423,   424,    -1,    -1,   427,
     428,   429,   430,   431,    -1,   433,   434,    -1,   436,   437,
     438,    -1,    -1,   441,    -1,   443,    -1,   445,   446,    -1,
     448,   449,    -1,    -1,    -1,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   462,    -1,   464,   465,    -1,    -1,
      -1,   469,   470,   471,   472,    -1,    -1,    -1,   476,    -1,
      -1,    -1,   480,    -1,   482,   483,   484,   485,   486,    -1,
     488,   489,   490,   491,   492,   493,    -1,    -1,    -1,    -1,
      -1,    -1,   500,   501,    -1,   503,    -1,    -1,   506,    -1,
      -1,   509,   510,   511,    -1,    -1,   514,   515,    -1,   517,
     518,   519,   520,   521,   522,    -1,    -1,   525,   526,   527,
     528,    -1,   530,   531,    -1,   533,    -1,   535,   536,   537,
     538,    -1,   540,   541,   542,    -1,   544,   545,   546,   547,
      -1,    -1,    -1,    -1,    -1,   553,   554,   555,    -1,    -1,
      -1,   559,   560,   561,   562,    -1,   564,   565,    -1,   567,
     568,    -1,   570,   571,    -1,    -1,   574,    -1,    -1,   577,
      -1,   579,    -1,   581,   582,   583,    -1,    -1,    -1,    -1,
      -1,    -1,   590,    -1,    -1,   593,    -1,    -1,    -1,   597,
     598,   599,   600,   601,   602,    -1,    -1,    -1,    -1,    -1,
      -1,   609,   610,    -1,   612,   613,   614,    -1,     5,   617,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    -1,    -1,    -1,    35,    -1,
      -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,
      -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,    56,
      -1,    58,    59,    -1,    61,    62,    -1,    64,    65,    66,
      67,    68,    69,    70,    -1,    72,    73,    74,    75,    76,
      77,    78,    -1,    80,    81,    82,    83,    84,    85,    86,
      87,    -1,    89,    90,    -1,    92,    93,    94,    95,    96,
      -1,    98,    -1,    -1,   101,    -1,    -1,   104,    -1,    -1,
      -1,   108,    -1,    -1,    -1,   112,   113,   114,    -1,    -1,
     117,    -1,    -1,    -1,    -1,   122,   123,    -1,    -1,    -1,
      -1,   128,    -1,   130,    -1,    -1,    -1,   134,    -1,   136,
     137,   138,   139,    -1,    -1,    -1,   143,    -1,    -1,   146,
     147,   148,    -1,    -1,    -1,   152,    -1,   154,   155,    -1,
     157,   158,   159,    -1,    -1,   162,   163,    -1,   165,   166,
     167,   168,   169,   170,    -1,    -1,   173,   174,   175,    -1,
      -1,   178,   179,    -1,   181,   182,   183,    -1,    -1,   186,
      -1,    -1,    -1,   190,    -1,   192,    -1,   194,    -1,   196,
     197,   198,   199,   200,   201,    -1,   203,    -1,    -1,    -1,
     207,   208,   209,    -1,   211,    -1,    -1,   214,   215,    -1,
      -1,    -1,   219,   220,   221,   222,    -1,    -1,   225,   226,
     227,    -1,   229,    -1,   231,    -1,    -1,    -1,    -1,   236,
     237,    -1,    -1,    -1,   241,    -1,   243,   244,    -1,   246,
     247,    -1,    -1,    -1,   251,    -1,    -1,   254,   255,   256,
      -1,    -1,   259,    -1,    -1,   262,   263,   264,    -1,    -1,
      -1,    -1,   269,   270,    -1,   272,    -1,   274,    -1,   276,
     277,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,    -1,   301,   302,   303,    -1,   305,   306,
     307,   308,    -1,   310,   311,    -1,    -1,    -1,    -1,   316,
     317,   318,   319,   320,   321,    -1,    -1,   324,   325,    -1,
     327,    -1,   329,    -1,   331,   332,   333,   334,   335,   336,
     337,   338,   339,    -1,    -1,   342,   343,    -1,    -1,   346,
     347,   348,   349,    -1,    -1,    -1,   353,   354,    -1,    -1,
      -1,    -1,   359,   360,   361,    -1,   363,   364,   365,   366,
      -1,   368,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   378,   379,   380,    -1,    -1,   383,    -1,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
      -1,    -1,   399,   400,   401,    -1,   403,    -1,   405,   406,
     407,   408,   409,    -1,   411,   412,   413,    -1,    -1,   416,
      -1,    -1,    -1,   420,   421,   422,   423,   424,    -1,    -1,
     427,   428,   429,   430,   431,    -1,   433,   434,    -1,   436,
     437,   438,    -1,    -1,   441,    -1,   443,    -1,   445,   446,
      -1,   448,   449,    -1,    -1,    -1,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,    -1,   464,   465,    -1,
      -1,    -1,   469,   470,   471,   472,    -1,    -1,    -1,   476,
      -1,    -1,    -1,   480,    -1,   482,   483,   484,   485,   486,
      -1,   488,   489,   490,   491,   492,   493,    -1,    -1,    -1,
      -1,    -1,    -1,   500,   501,    -1,   503,    -1,    -1,   506,
      -1,    -1,   509,   510,   511,    -1,    -1,   514,   515,    -1,
     517,   518,   519,   520,   521,   522,    -1,    -1,   525,   526,
     527,   528,    -1,   530,   531,    -1,   533,    -1,   535,   536,
     537,   538,    -1,   540,   541,   542,    -1,   544,   545,   546,
     547,    -1,    -1,    -1,    -1,    -1,   553,   554,   555,    -1,
      -1,    -1,   559,   560,   561,   562,    -1,   564,   565,    -1,
     567,   568,    -1,   570,   571,    -1,    -1,   574,    -1,    -1,
     577,    -1,   579,    -1,   581,   582,   583,    -1,    -1,    -1,
      -1,    -1,    -1,   590,    -1,    -1,   593,    -1,    -1,    -1,
     597,   598,   599,   600,   601,   602,    -1,    -1,    -1,    -1,
      -1,    -1,   609,   610,    -1,   612,   613,   614,    -1,     5,
     617,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    19,    -1,    21,    -1,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    -1,    -1,    -1,    35,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,
      56,    -1,    58,    59,    -1,    61,    62,    -1,    64,    65,
      66,    67,    68,    69,    70,    -1,    72,    73,    74,    75,
      76,    77,    78,    -1,    80,    81,    82,    83,    84,    85,
      86,    87,    -1,    89,    90,    -1,    92,    93,    94,    95,
      96,    -1,    98,    -1,    -1,   101,    -1,    -1,   104,    -1,
      -1,    -1,   108,    -1,    -1,    -1,   112,   113,   114,    -1,
      -1,   117,    -1,    -1,    -1,    -1,   122,   123,    -1,    -1,
      -1,    -1,   128,    -1,   130,    -1,    -1,    -1,   134,    -1,
     136,   137,   138,   139,    -1,    -1,    -1,   143,    -1,    -1,
     146,   147,   148,    -1,    -1,    -1,   152,    -1,   154,   155,
      -1,   157,   158,   159,    -1,    -1,   162,   163,    -1,   165,
     166,   167,   168,   169,   170,    -1,    -1,   173,   174,   175,
      -1,    -1,   178,   179,    -1,   181,   182,   183,    -1,    -1,
     186,    -1,    -1,    -1,   190,    -1,   192,    -1,   194,    -1,
     196,   197,   198,   199,   200,   201,    -1,   203,    -1,    -1,
      -1,   207,   208,   209,    -1,   211,    -1,    -1,   214,   215,
      -1,    -1,    -1,   219,   220,   221,   222,    -1,    -1,   225,
     226,   227,    -1,   229,    -1,   231,    -1,    -1,    -1,    -1,
     236,   237,    -1,    -1,    -1,   241,    -1,   243,   244,    -1,
     246,   247,    -1,    -1,    -1,   251,    -1,    -1,   254,   255,
     256,    -1,    -1,   259,    -1,    -1,   262,   263,    -1,    -1,
      -1,    -1,    -1,   269,   270,    -1,   272,    -1,   274,    -1,
     276,   277,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,    -1,   301,   302,   303,    -1,   305,
     306,   307,   308,    -1,   310,   311,    -1,    -1,    -1,    -1,
     316,   317,   318,   319,   320,   321,    -1,    -1,   324,   325,
      -1,   327,    -1,   329,    -1,   331,   332,   333,   334,   335,
     336,   337,   338,   339,    -1,    -1,   342,   343,    -1,    -1,
     346,   347,   348,   349,    -1,    -1,    -1,   353,   354,    -1,
      -1,    -1,    -1,   359,   360,   361,    -1,   363,   364,   365,
     366,    -1,   368,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   378,   379,   380,    -1,    -1,   383,    -1,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,    -1,    -1,   399,   400,   401,    -1,   403,    -1,   405,
     406,   407,   408,   409,    -1,   411,   412,   413,    -1,    -1,
     416,    -1,    -1,    -1,   420,   421,   422,   423,   424,    -1,
      -1,   427,   428,   429,   430,   431,    -1,   433,   434,    -1,
     436,   437,   438,    -1,    -1,   441,    -1,   443,    -1,   445,
     446,    -1,   448,   449,    -1,    -1,    -1,   453,   454,   455,
     456,   457,   458,   459,   460,   461,   462,    -1,   464,   465,
      -1,    -1,    -1,   469,   470,   471,   472,    -1,    -1,    -1,
     476,    -1,    -1,    -1,   480,    -1,   482,   483,   484,   485,
     486,    -1,   488,   489,   490,   491,   492,   493,    -1,    -1,
      -1,    -1,    -1,    -1,   500,   501,    -1,   503,    -1,    -1,
     506,    -1,    -1,   509,   510,   511,    -1,    -1,   514,   515,
      -1,   517,   518,   519,   520,   521,   522,    -1,    -1,   525,
     526,   527,   528,    -1,   530,   531,    -1,   533,    -1,   535,
     536,   537,   538,    -1,   540,   541,   542,    -1,   544,   545,
     546,   547,    -1,    -1,    -1,    -1,    -1,   553,   554,   555,
      -1,    -1,    -1,   559,   560,   561,   562,    -1,   564,   565,
      -1,   567,   568,    -1,   570,   571,    -1,    -1,   574,    -1,
      -1,   577,    -1,   579,    -1,   581,   582,   583,    -1,    -1,
      -1,    -1,    -1,    -1,   590,    -1,    -1,   593,    -1,    -1,
      -1,   597,   598,   599,   600,   601,   602,    -1,    -1,    -1,
      -1,    -1,    -1,   609,   610,    -1,   612,   613,   614,    -1,
       5,   617,     7,     8,     9,    10,    11,    -1,    -1,    14,
      -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    -1,    -1,    -1,
      35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,
      -1,    46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,
      55,    56,    -1,    58,    59,    -1,    61,    62,    -1,    64,
      65,    66,    67,    68,    69,    70,    -1,    72,    73,    74,
      75,    76,    77,    78,    -1,    80,    81,    82,    83,    84,
      85,    86,    87,    -1,    89,    90,    -1,    92,    93,    94,
      95,    96,    97,    98,    -1,    -1,   101,    -1,    -1,   104,
      -1,    -1,    -1,   108,    -1,    -1,    -1,   112,   113,   114,
      -1,    -1,   117,    -1,    -1,    -1,    -1,   122,   123,    -1,
      -1,    -1,    -1,   128,    -1,   130,    -1,    -1,    -1,   134,
      -1,   136,   137,   138,   139,    -1,    -1,    -1,   143,    -1,
      -1,   146,   147,   148,    -1,    -1,    -1,   152,    -1,   154,
     155,    -1,   157,   158,   159,    -1,    -1,   162,   163,    -1,
     165,   166,   167,   168,   169,   170,    -1,   172,   173,   174,
     175,    -1,    -1,   178,   179,    -1,   181,   182,   183,    -1,
      -1,   186,    -1,    -1,    -1,   190,    -1,   192,    -1,   194,
      -1,   196,   197,   198,   199,   200,   201,    -1,   203,    -1,
      -1,    -1,   207,   208,   209,    -1,   211,    -1,    -1,   214,
     215,    -1,    -1,    -1,   219,   220,   221,   222,    -1,    -1,
     225,   226,   227,    -1,   229,    -1,   231,    -1,    -1,    -1,
      -1,   236,   237,    -1,    -1,    -1,   241,    -1,   243,   244,
      -1,   246,   247,    -1,    -1,    -1,   251,    -1,    -1,   254,
     255,   256,    -1,    -1,   259,    -1,    -1,   262,   263,    -1,
      -1,    -1,    -1,    -1,   269,   270,    -1,   272,    -1,   274,
      -1,   276,   277,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,    -1,   301,   302,   303,    -1,
     305,   306,   307,   308,    -1,   310,   311,    -1,    -1,    -1,
      -1,   316,   317,   318,   319,   320,   321,    -1,    -1,   324,
     325,    -1,   327,    -1,   329,    -1,   331,   332,   333,   334,
     335,   336,   337,   338,   339,    -1,    -1,   342,   343,    -1,
      -1,   346,   347,   348,   349,    -1,    -1,    -1,   353,   354,
      -1,    -1,    -1,    -1,   359,   360,   361,    -1,   363,   364,
     365,   366,    -1,   368,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   378,   379,   380,    -1,    -1,   383,    -1,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,    -1,    -1,   399,   400,   401,    -1,   403,    -1,
     405,   406,   407,   408,   409,    -1,   411,   412,   413,    -1,
      -1,   416,    -1,    -1,    -1,   420,   421,   422,   423,   424,
      -1,    -1,   427,   428,   429,   430,   431,    -1,   433,   434,
      -1,   436,   437,   438,    -1,    -1,   441,    -1,   443,    -1,
     445,   446,    -1,   448,   449,    -1,    -1,    -1,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,    -1,   464,
     465,    -1,    -1,    -1,   469,   470,   471,   472,    -1,    -1,
      -1,   476,    -1,    -1,    -1,   480,    -1,   482,   483,   484,
     485,   486,    -1,   488,   489,   490,   491,   492,   493,    -1,
      -1,    -1,    -1,    -1,    -1,   500,   501,    -1,   503,    -1,
      -1,   506,    -1,    -1,   509,   510,   511,    -1,    -1,   514,
     515,    -1,   517,   518,   519,   520,   521,   522,    -1,    -1,
     525,   526,   527,   528,    -1,   530,   531,    -1,   533,    -1,
     535,   536,   537,   538,    -1,    -1,   541,   542,    -1,   544,
     545,   546,   547,    -1,    -1,    -1,    -1,    -1,   553,   554,
     555,    -1,    -1,    -1,   559,   560,   561,   562,    -1,   564,
     565,    -1,   567,   568,    -1,   570,   571,    -1,    -1,   574,
      -1,    -1,   577,    -1,   579,    -1,   581,   582,   583,    -1,
      -1,    -1,    -1,    -1,    -1,   590,    -1,    -1,   593,    -1,
      -1,    -1,   597,   598,   599,   600,   601,   602,    -1,    -1,
      -1,    -1,    -1,    -1,   609,   610,    -1,   612,   613,   614,
      -1,     5,   617,     7,     8,     9,    10,    11,    -1,    -1,
      14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    -1,    -1,
      -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,    -1,
      -1,    55,    56,    -1,    58,    59,    -1,    61,    62,    -1,
      64,    65,    66,    67,    68,    69,    70,    -1,    72,    73,
      74,    75,    76,    77,    78,    -1,    80,    81,    82,    83,
      84,    85,    86,    87,    -1,    89,    90,    -1,    92,    93,
      94,    95,    96,    -1,    98,    -1,    -1,   101,    -1,    -1,
     104,    -1,    -1,    -1,   108,    -1,    -1,    -1,   112,   113,
     114,    -1,    -1,   117,    -1,    -1,    -1,    -1,   122,   123,
      -1,    -1,    -1,    -1,   128,    -1,   130,    -1,    -1,    -1,
     134,    -1,   136,   137,   138,   139,    -1,    -1,    -1,   143,
      -1,    -1,   146,   147,   148,    -1,    -1,    -1,   152,    -1,
     154,   155,    -1,   157,   158,   159,    -1,    -1,   162,   163,
      -1,   165,   166,   167,   168,   169,   170,    -1,    -1,   173,
     174,   175,    -1,    -1,   178,   179,    -1,   181,   182,   183,
      -1,    -1,   186,    -1,    -1,    -1,   190,    -1,   192,    -1,
     194,    -1,   196,   197,   198,   199,   200,   201,    -1,   203,
      -1,    -1,    -1,   207,   208,   209,    -1,   211,    -1,    -1,
     214,   215,    -1,    -1,    -1,   219,   220,   221,   222,    -1,
      -1,   225,   226,   227,    -1,   229,    -1,   231,    -1,    -1,
      -1,    -1,   236,   237,    -1,    -1,    -1,   241,    -1,   243,
     244,    -1,   246,   247,    -1,    -1,    -1,   251,    -1,    -1,
     254,   255,   256,    -1,    -1,   259,    -1,    -1,   262,   263,
      -1,    -1,    -1,    -1,    -1,   269,   270,    -1,   272,    -1,
     274,    -1,   276,   277,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,    -1,   301,   302,   303,
      -1,   305,   306,   307,   308,    -1,   310,   311,    -1,    -1,
      -1,    -1,   316,   317,   318,   319,   320,   321,    -1,    -1,
     324,   325,    -1,   327,    -1,   329,    -1,   331,   332,   333,
     334,   335,   336,   337,   338,   339,    -1,    -1,   342,   343,
      -1,    -1,   346,   347,   348,   349,    -1,    -1,    -1,   353,
     354,    -1,    -1,    -1,    -1,   359,   360,   361,    -1,   363,
     364,   365,   366,    -1,   368,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   378,   379,   380,    -1,    -1,   383,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,    -1,    -1,   399,   400,   401,    -1,   403,
      -1,   405,   406,   407,   408,   409,    -1,   411,   412,   413,
      -1,    -1,   416,    -1,    -1,    -1,   420,   421,   422,   423,
     424,    -1,    -1,   427,   428,   429,   430,   431,    -1,   433,
     434,    -1,   436,   437,   438,    -1,    -1,   441,    -1,   443,
      -1,   445,   446,    -1,   448,   449,    -1,    -1,    -1,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,    -1,
     464,   465,    -1,    -1,    -1,   469,   470,   471,   472,    -1,
      -1,    -1,   476,    -1,    -1,    -1,   480,    -1,   482,   483,
     484,   485,   486,    -1,   488,   489,   490,   491,   492,   493,
      -1,    -1,    -1,   497,    -1,    -1,   500,   501,    -1,   503,
      -1,    -1,   506,    -1,    -1,   509,   510,   511,    -1,    -1,
     514,   515,    -1,   517,   518,   519,   520,   521,   522,    -1,
      -1,   525,   526,   527,   528,    -1,   530,   531,    -1,   533,
      -1,   535,   536,   537,   538,    -1,    -1,   541,   542,    -1,
     544,   545,   546,   547,    -1,    -1,    -1,    -1,    -1,   553,
     554,   555,    -1,    -1,    -1,   559,   560,   561,   562,    -1,
     564,   565,    -1,   567,   568,    -1,   570,   571,    -1,    -1,
     574,    -1,    -1,   577,    -1,   579,    -1,   581,   582,   583,
      -1,    -1,    -1,    -1,    -1,    -1,   590,    -1,    -1,   593,
      -1,    -1,    -1,   597,   598,   599,   600,   601,   602,    -1,
      -1,    -1,    -1,    -1,    -1,   609,   610,    -1,   612,   613,
     614,    -1,     5,   617,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    -1,
      -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,
      -1,    -1,    55,    56,    -1,    58,    59,    -1,    61,    62,
      -1,    64,    65,    66,    67,    68,    69,    70,    -1,    72,
      73,    74,    75,    76,    77,    78,    -1,    80,    81,    82,
      83,    84,    85,    86,    87,    -1,    89,    90,    -1,    92,
      93,    94,    95,    96,    -1,    98,    -1,    -1,   101,    -1,
      -1,   104,    -1,    -1,    -1,   108,    -1,    -1,    -1,   112,
     113,   114,    -1,    -1,   117,    -1,    -1,    -1,    -1,   122,
     123,    -1,    -1,    -1,    -1,   128,    -1,   130,    -1,    -1,
      -1,   134,    -1,   136,   137,   138,   139,    -1,    -1,    -1,
     143,    -1,    -1,   146,   147,   148,    -1,    -1,    -1,   152,
      -1,   154,   155,    -1,   157,   158,   159,    -1,    -1,   162,
     163,    -1,   165,   166,   167,   168,   169,   170,    -1,    -1,
     173,   174,   175,    -1,    -1,   178,   179,    -1,   181,   182,
     183,    -1,    -1,   186,    -1,    -1,    -1,   190,   191,   192,
      -1,   194,    -1,   196,   197,   198,   199,   200,   201,    -1,
     203,    -1,    -1,    -1,   207,   208,   209,    -1,   211,    -1,
      -1,   214,   215,    -1,    -1,    -1,   219,   220,   221,   222,
      -1,    -1,   225,   226,   227,    -1,   229,    -1,   231,    -1,
      -1,    -1,    -1,   236,   237,    -1,    -1,    -1,   241,    -1,
     243,   244,    -1,   246,   247,    -1,    -1,    -1,   251,    -1,
      -1,   254,   255,   256,    -1,    -1,   259,    -1,    -1,   262,
     263,    -1,    -1,    -1,    -1,    -1,   269,   270,    -1,   272,
      -1,   274,    -1,   276,   277,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,    -1,   301,   302,
     303,    -1,   305,   306,   307,   308,    -1,   310,   311,    -1,
      -1,    -1,    -1,   316,   317,   318,   319,   320,   321,    -1,
      -1,   324,   325,    -1,   327,    -1,   329,    -1,   331,   332,
     333,   334,   335,   336,   337,   338,   339,    -1,    -1,   342,
     343,    -1,    -1,   346,   347,   348,   349,    -1,    -1,    -1,
     353,   354,    -1,    -1,    -1,    -1,   359,   360,   361,    -1,
     363,   364,   365,   366,    -1,   368,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   378,   379,   380,    -1,    -1,
     383,    -1,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,    -1,    -1,   399,   400,   401,    -1,
     403,    -1,   405,   406,   407,   408,   409,    -1,   411,   412,
     413,    -1,    -1,   416,    -1,    -1,    -1,   420,   421,   422,
     423,   424,    -1,    -1,   427,   428,   429,   430,   431,    -1,
     433,   434,    -1,   436,   437,   438,    -1,    -1,   441,    -1,
     443,    -1,   445,   446,    -1,   448,   449,    -1,    -1,    -1,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
      -1,   464,   465,    -1,    -1,    -1,   469,   470,   471,   472,
      -1,    -1,    -1,   476,    -1,    -1,    -1,   480,    -1,   482,
     483,   484,   485,   486,    -1,   488,   489,   490,   491,   492,
     493,    -1,    -1,    -1,    -1,    -1,    -1,   500,   501,    -1,
     503,    -1,    -1,   506,    -1,    -1,   509,   510,   511,    -1,
      -1,   514,   515,    -1,   517,   518,   519,   520,   521,   522,
      -1,    -1,   525,   526,   527,   528,    -1,   530,   531,    -1,
     533,    -1,   535,   536,   537,   538,    -1,    -1,   541,   542,
      -1,   544,   545,   546,   547,    -1,    -1,    -1,    -1,    -1,
     553,   554,   555,    -1,    -1,    -1,   559,   560,   561,   562,
      -1,   564,   565,    -1,   567,   568,    -1,   570,   571,    -1,
      -1,   574,    -1,    -1,   577,    -1,   579,    -1,   581,   582,
     583,    -1,    -1,    -1,    -1,    -1,    -1,   590,    -1,    -1,
     593,    -1,    -1,    -1,   597,   598,   599,   600,   601,   602,
      -1,    -1,    -1,    -1,    -1,    -1,   609,   610,    -1,   612,
     613,   614,    -1,     5,   617,     7,     8,     9,    10,    11,
      -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,
      -1,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      -1,    -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    -1,    48,    49,    -1,    -1,
      52,    -1,    -1,    55,    56,    -1,    58,    59,    -1,    61,
      62,    -1,    64,    65,    66,    67,    68,    69,    70,    -1,
      72,    73,    74,    75,    76,    77,    78,    -1,    80,    81,
      82,    83,    84,    85,    86,    87,    -1,    89,    90,    -1,
      92,    93,    94,    95,    96,    -1,    98,    -1,    -1,   101,
      -1,    -1,   104,    -1,    -1,    -1,   108,    -1,    -1,    -1,
     112,   113,   114,    -1,    -1,   117,    -1,    -1,    -1,    -1,
     122,   123,    -1,    -1,    -1,   127,   128,    -1,   130,    -1,
      -1,    -1,   134,    -1,   136,   137,   138,   139,    -1,    -1,
      -1,   143,    -1,    -1,   146,   147,   148,    -1,    -1,    -1,
     152,    -1,   154,   155,    -1,   157,   158,   159,    -1,    -1,
     162,   163,    -1,   165,   166,   167,   168,   169,   170,    -1,
      -1,   173,   174,   175,    -1,    -1,   178,   179,    -1,   181,
     182,   183,    -1,    -1,   186,    -1,    -1,    -1,   190,    -1,
     192,    -1,   194,    -1,   196,   197,   198,   199,   200,   201,
      -1,   203,    -1,    -1,    -1,   207,   208,   209,    -1,   211,
      -1,    -1,   214,   215,    -1,    -1,    -1,   219,   220,   221,
     222,    -1,    -1,   225,   226,   227,    -1,   229,    -1,   231,
      -1,    -1,    -1,    -1,   236,   237,    -1,    -1,    -1,   241,
      -1,   243,   244,    -1,   246,   247,    -1,    -1,    -1,   251,
      -1,    -1,   254,   255,   256,    -1,    -1,   259,    -1,    -1,
     262,   263,    -1,    -1,    -1,    -1,    -1,   269,   270,    -1,
     272,    -1,   274,    -1,   276,   277,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,    -1,   301,
     302,   303,    -1,   305,   306,   307,   308,    -1,   310,   311,
      -1,    -1,    -1,    -1,   316,   317,   318,   319,   320,   321,
      -1,    -1,   324,   325,    -1,   327,    -1,   329,    -1,   331,
     332,   333,   334,   335,   336,   337,   338,   339,    -1,    -1,
     342,   343,    -1,    -1,   346,   347,   348,   349,    -1,    -1,
      -1,   353,   354,    -1,    -1,    -1,    -1,   359,   360,   361,
      -1,   363,   364,   365,   366,    -1,   368,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   378,   379,   380,    -1,
      -1,   383,    -1,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,    -1,    -1,   399,   400,   401,
      -1,   403,    -1,   405,   406,   407,   408,   409,    -1,   411,
     412,   413,    -1,    -1,   416,    -1,    -1,    -1,   420,   421,
     422,   423,   424,    -1,    -1,   427,   428,   429,   430,   431,
      -1,   433,   434,    -1,   436,   437,   438,    -1,    -1,   441,
      -1,   443,    -1,   445,   446,    -1,   448,   449,    -1,    -1,
      -1,   453,   454,   455,   456,   457,   458,   459,   460,   461,
     462,    -1,   464,   465,    -1,    -1,    -1,   469,   470,   471,
     472,    -1,    -1,    -1,   476,    -1,    -1,    -1,   480,    -1,
     482,   483,   484,   485,   486,    -1,   488,   489,   490,   491,
     492,   493,    -1,    -1,    -1,    -1,    -1,    -1,   500,   501,
      -1,   503,    -1,    -1,   506,    -1,    -1,   509,   510,   511,
      -1,    -1,   514,   515,    -1,   517,   518,   519,   520,   521,
     522,    -1,    -1,   525,   526,   527,   528,    -1,   530,   531,
      -1,   533,    -1,   535,   536,   537,   538,    -1,    -1,   541,
     542,    -1,   544,   545,   546,   547,    -1,    -1,    -1,    -1,
      -1,   553,   554,   555,    -1,    -1,    -1,   559,   560,   561,
     562,    -1,   564,   565,    -1,   567,   568,    -1,   570,   571,
      -1,    -1,   574,    -1,    -1,   577,    -1,   579,    -1,   581,
     582,   583,    -1,    -1,    -1,    -1,    -1,    -1,   590,    -1,
      -1,   593,    -1,    -1,    -1,   597,   598,   599,   600,   601,
     602,    -1,    -1,    -1,    -1,    -1,    -1,   609,   610,    -1,
     612,   613,   614,    -1,     5,   617,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      21,    -1,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    -1,    -1,    -1,    35,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    -1,    48,    49,    -1,
      -1,    52,    -1,    -1,    55,    56,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    66,    67,    68,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    -1,    80,
      81,    82,    83,    84,    85,    86,    87,    -1,    89,    90,
      -1,    92,    93,    94,    95,    96,    -1,    98,    -1,    -1,
     101,    -1,    -1,   104,    -1,    -1,    -1,   108,    -1,    -1,
      -1,   112,   113,   114,    -1,    -1,   117,    -1,    -1,    -1,
      -1,   122,   123,    -1,    -1,    -1,   127,   128,    -1,   130,
      -1,    -1,    -1,   134,    -1,   136,   137,   138,   139,    -1,
      -1,    -1,   143,    -1,    -1,   146,   147,   148,    -1,    -1,
      -1,   152,    -1,   154,   155,    -1,   157,   158,   159,    -1,
      -1,   162,   163,    -1,   165,   166,   167,   168,   169,   170,
      -1,    -1,   173,   174,   175,    -1,    -1,   178,   179,    -1,
     181,   182,   183,    -1,    -1,   186,    -1,    -1,    -1,   190,
      -1,   192,    -1,   194,    -1,   196,   197,   198,   199,   200,
     201,    -1,   203,    -1,    -1,    -1,   207,   208,   209,    -1,
     211,    -1,    -1,   214,   215,    -1,    -1,    -1,   219,   220,
     221,   222,    -1,    -1,   225,   226,   227,    -1,   229,    -1,
     231,    -1,    -1,    -1,    -1,   236,   237,    -1,    -1,    -1,
     241,    -1,   243,   244,    -1,   246,   247,    -1,    -1,    -1,
     251,    -1,    -1,   254,   255,   256,    -1,    -1,   259,    -1,
      -1,   262,   263,    -1,    -1,    -1,    -1,    -1,   269,   270,
      -1,   272,    -1,   274,    -1,   276,   277,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,    -1,
     301,   302,   303,    -1,   305,   306,   307,   308,    -1,   310,
     311,    -1,    -1,    -1,    -1,   316,   317,   318,   319,   320,
     321,    -1,    -1,   324,   325,    -1,   327,    -1,   329,    -1,
     331,   332,   333,   334,   335,   336,   337,   338,   339,    -1,
      -1,   342,   343,    -1,    -1,   346,   347,   348,   349,    -1,
      -1,    -1,   353,   354,    -1,    -1,    -1,    -1,   359,   360,
     361,    -1,   363,   364,   365,   366,    -1,   368,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   378,   379,   380,
      -1,    -1,   383,    -1,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,    -1,    -1,   399,   400,
     401,    -1,   403,    -1,   405,   406,   407,   408,   409,    -1,
     411,   412,   413,    -1,    -1,   416,    -1,    -1,    -1,   420,
     421,   422,   423,   424,    -1,    -1,   427,   428,   429,   430,
     431,    -1,   433,   434,    -1,   436,   437,   438,    -1,    -1,
     441,    -1,   443,    -1,   445,   446,    -1,   448,   449,    -1,
      -1,    -1,   453,   454,   455,   456,   457,   458,   459,   460,
     461,   462,    -1,   464,   465,    -1,    -1,    -1,   469,   470,
     471,   472,    -1,    -1,    -1,   476,    -1,    -1,    -1,   480,
      -1,   482,   483,   484,   485,   486,    -1,   488,   489,   490,
     491,   492,   493,    -1,    -1,    -1,    -1,    -1,    -1,   500,
     501,    -1,   503,    -1,    -1,   506,    -1,    -1,   509,   510,
     511,    -1,    -1,   514,   515,    -1,   517,   518,   519,   520,
     521,   522,    -1,    -1,   525,   526,   527,   528,    -1,   530,
     531,    -1,   533,    -1,   535,   536,   537,   538,    -1,    -1,
     541,   542,    -1,   544,   545,   546,   547,    -1,    -1,    -1,
      -1,    -1,   553,   554,   555,    -1,    -1,    -1,   559,   560,
     561,   562,    -1,   564,   565,    -1,   567,   568,    -1,   570,
     571,    -1,    -1,   574,    -1,    -1,   577,    -1,   579,    -1,
     581,   582,   583,    -1,    -1,    -1,    -1,    -1,    -1,   590,
      -1,    -1,   593,    -1,    -1,    -1,   597,   598,   599,   600,
     601,   602,    -1,    -1,    -1,    -1,    -1,    -1,   609,   610,
      -1,   612,   613,   614,    -1,     5,   617,     7,     8,     9,
      10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,
      -1,    21,    -1,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,    39,
      -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,    49,
      -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,    59,
      -1,    61,    62,    -1,    64,    65,    66,    67,    68,    69,
      70,    -1,    72,    73,    74,    75,    76,    77,    78,    -1,
      80,    81,    82,    83,    84,    85,    86,    87,    -1,    89,
      90,    -1,    92,    93,    94,    95,    96,    -1,    98,    -1,
      -1,   101,    -1,    -1,   104,    -1,    -1,    -1,   108,    -1,
      -1,    -1,   112,   113,   114,    -1,    -1,   117,    -1,    -1,
      -1,    -1,   122,   123,    -1,    -1,    -1,   127,   128,    -1,
     130,    -1,    -1,    -1,   134,    -1,   136,   137,   138,   139,
      -1,    -1,    -1,   143,    -1,    -1,   146,   147,   148,    -1,
      -1,    -1,   152,    -1,   154,   155,    -1,   157,   158,   159,
      -1,    -1,   162,   163,    -1,   165,   166,   167,   168,   169,
     170,    -1,    -1,   173,   174,   175,    -1,    -1,   178,   179,
      -1,   181,   182,   183,    -1,    -1,   186,    -1,    -1,    -1,
     190,    -1,   192,    -1,   194,    -1,   196,   197,   198,   199,
     200,   201,    -1,   203,    -1,    -1,    -1,   207,   208,   209,
      -1,   211,    -1,    -1,   214,   215,    -1,    -1,    -1,   219,
     220,   221,   222,    -1,    -1,   225,   226,   227,    -1,   229,
      -1,   231,    -1,    -1,    -1,    -1,   236,   237,    -1,    -1,
      -1,   241,    -1,   243,   244,    -1,   246,   247,    -1,    -1,
      -1,   251,    -1,    -1,   254,   255,   256,    -1,    -1,   259,
      -1,    -1,   262,   263,    -1,    -1,    -1,    -1,    -1,   269,
     270,    -1,   272,    -1,   274,    -1,   276,   277,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
      -1,   301,   302,   303,    -1,   305,   306,   307,   308,    -1,
     310,   311,    -1,    -1,    -1,    -1,   316,   317,   318,   319,
     320,   321,    -1,    -1,   324,   325,    -1,   327,    -1,   329,
      -1,   331,   332,   333,   334,   335,   336,   337,   338,   339,
      -1,    -1,   342,   343,    -1,    -1,   346,   347,   348,   349,
      -1,    -1,    -1,   353,   354,    -1,    -1,    -1,    -1,   359,
     360,   361,    -1,   363,   364,   365,   366,    -1,   368,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   378,   379,
     380,    -1,    -1,   383,    -1,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,    -1,    -1,   399,
     400,   401,    -1,   403,    -1,   405,   406,   407,   408,   409,
      -1,   411,   412,   413,    -1,    -1,   416,    -1,    -1,    -1,
     420,   421,   422,   423,   424,    -1,    -1,   427,   428,   429,
     430,   431,    -1,   433,   434,    -1,   436,   437,   438,    -1,
      -1,   441,    -1,   443,    -1,   445,   446,    -1,   448,   449,
      -1,    -1,    -1,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   462,    -1,   464,   465,    -1,    -1,    -1,   469,
     470,   471,   472,    -1,    -1,    -1,   476,    -1,    -1,    -1,
     480,    -1,   482,   483,   484,   485,   486,    -1,   488,   489,
     490,   491,   492,   493,    -1,    -1,    -1,    -1,    -1,    -1,
     500,   501,    -1,   503,    -1,    -1,   506,    -1,    -1,   509,
     510,   511,    -1,    -1,   514,   515,    -1,   517,   518,   519,
     520,   521,   522,    -1,    -1,   525,   526,   527,   528,    -1,
     530,   531,    -1,   533,    -1,   535,   536,   537,   538,    -1,
      -1,   541,   542,    -1,   544,   545,   546,   547,    -1,    -1,
      -1,    -1,    -1,   553,   554,   555,    -1,    -1,    -1,   559,
     560,   561,   562,    -1,   564,   565,    -1,   567,   568,    -1,
     570,   571,    -1,    -1,   574,    -1,    -1,   577,    -1,   579,
      -1,   581,   582,   583,    -1,    -1,    -1,    -1,    -1,    -1,
     590,    -1,    -1,   593,    -1,    -1,    -1,   597,   598,   599,
     600,   601,   602,    -1,    -1,    -1,    -1,    -1,    -1,   609,
     610,    -1,   612,   613,   614,    -1,     5,   617,     7,     8,
       9,    10,    11,    12,    -1,    14,    -1,    -1,    -1,    18,
      -1,    -1,    21,    -1,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,    48,
      49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,    58,
      59,    -1,    61,    62,    -1,    64,    65,    66,    67,    68,
      69,    70,    -1,    72,    73,    74,    75,    76,    77,    78,
      -1,    80,    81,    82,    83,    84,    85,    86,    87,    -1,
      89,    90,    -1,    92,    93,    94,    95,    96,    -1,    98,
      -1,    -1,   101,    -1,    -1,   104,    -1,    -1,    -1,   108,
      -1,    -1,    -1,   112,   113,   114,    -1,    -1,   117,    -1,
      -1,    -1,    -1,   122,   123,    -1,    -1,    -1,    -1,   128,
      -1,   130,    -1,    -1,    -1,   134,    -1,   136,   137,   138,
     139,    -1,    -1,    -1,   143,    -1,    -1,   146,   147,   148,
      -1,    -1,    -1,   152,    -1,   154,   155,    -1,   157,   158,
     159,    -1,    -1,   162,   163,    -1,   165,   166,   167,   168,
     169,   170,    -1,    -1,   173,   174,   175,    -1,    -1,   178,
     179,    -1,   181,   182,   183,    -1,    -1,   186,    -1,    -1,
      -1,   190,    -1,   192,    -1,   194,    -1,   196,   197,   198,
     199,   200,   201,    -1,   203,    -1,    -1,    -1,   207,   208,
     209,    -1,   211,    -1,    -1,   214,   215,    -1,    -1,    -1,
     219,   220,   221,   222,    -1,    -1,   225,   226,   227,    -1,
     229,    -1,   231,    -1,    -1,    -1,    -1,   236,   237,    -1,
      -1,    -1,   241,    -1,   243,   244,    -1,   246,   247,    -1,
      -1,    -1,   251,    -1,    -1,   254,   255,   256,    -1,    -1,
     259,    -1,    -1,   262,   263,    -1,    -1,    -1,    -1,    -1,
     269,   270,    -1,   272,    -1,   274,    -1,   276,   277,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,    -1,   301,   302,   303,    -1,   305,   306,   307,   308,
      -1,   310,   311,    -1,    -1,    -1,    -1,   316,   317,   318,
     319,   320,   321,    -1,    -1,   324,   325,    -1,   327,    -1,
     329,    -1,   331,   332,   333,   334,   335,   336,   337,   338,
     339,    -1,    -1,   342,   343,    -1,    -1,   346,   347,   348,
     349,    -1,    -1,    -1,   353,   354,    -1,    -1,    -1,    -1,
     359,   360,   361,    -1,   363,   364,   365,   366,    -1,   368,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   378,
     379,   380,    -1,    -1,   383,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,    -1,    -1,
     399,   400,   401,    -1,   403,    -1,   405,   406,   407,   408,
     409,    -1,   411,   412,   413,    -1,    -1,   416,    -1,    -1,
      -1,   420,   421,   422,   423,   424,    -1,    -1,   427,   428,
     429,   430,   431,    -1,   433,   434,    -1,   436,   437,   438,
      -1,    -1,   441,    -1,   443,    -1,   445,   446,    -1,   448,
     449,    -1,    -1,    -1,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,    -1,   464,   465,    -1,    -1,    -1,
     469,   470,   471,   472,    -1,    -1,    -1,   476,    -1,    -1,
      -1,   480,    -1,   482,   483,   484,   485,   486,    -1,   488,
     489,   490,   491,   492,   493,    -1,    -1,    -1,    -1,    -1,
      -1,   500,   501,    -1,   503,    -1,    -1,   506,    -1,    -1,
     509,   510,   511,    -1,    -1,   514,   515,    -1,   517,   518,
     519,   520,   521,   522,    -1,    -1,   525,   526,   527,   528,
      -1,   530,   531,    -1,   533,    -1,   535,   536,   537,   538,
      -1,    -1,   541,   542,    -1,   544,   545,   546,   547,    -1,
      -1,    -1,    -1,    -1,   553,   554,   555,    -1,    -1,    -1,
     559,   560,   561,   562,    -1,   564,   565,    -1,   567,   568,
      -1,   570,   571,    -1,    -1,   574,    -1,    -1,   577,    -1,
     579,    -1,   581,   582,   583,    -1,    -1,    -1,    -1,    -1,
      -1,   590,    -1,    -1,   593,    -1,    -1,    -1,   597,   598,
     599,   600,   601,   602,    -1,    -1,    -1,    -1,    -1,    -1,
     609,   610,    -1,   612,   613,   614,    -1,     5,   617,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,    -1,    -1,    21,    -1,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,
      48,    49,    -1,    -1,    52,    -1,    -1,    55,    56,    -1,
      58,    59,    -1,    61,    62,    -1,    64,    65,    66,    67,
      68,    69,    70,    -1,    72,    73,    74,    75,    76,    77,
      78,    -1,    80,    81,    82,    83,    84,    85,    86,    87,
      -1,    89,    90,    -1,    92,    93,    94,    95,    96,    -1,
      98,    -1,    -1,   101,    -1,    -1,   104,    -1,    -1,    -1,
     108,    -1,    -1,    -1,   112,   113,   114,    -1,    -1,   117,
      -1,    -1,    -1,    -1,   122,   123,    -1,    -1,    -1,    -1,
     128,    -1,   130,    -1,    -1,    -1,   134,    -1,   136,   137,
     138,   139,    -1,    -1,    -1,   143,    -1,    -1,   146,   147,
     148,    -1,    -1,    -1,   152,    -1,   154,   155,    -1,   157,
     158,   159,    -1,    -1,   162,   163,    -1,   165,   166,   167,
     168,   169,   170,    -1,    -1,   173,   174,   175,    -1,    -1,
     178,   179,    -1,   181,   182,   183,    -1,    -1,   186,    -1,
      -1,    -1,   190,    -1,   192,    -1,   194,    -1,   196,   197,
     198,   199,   200,   201,    -1,   203,    -1,    -1,    -1,   207,
     208,   209,    -1,   211,    -1,    -1,   214,   215,    -1,    -1,
      -1,   219,   220,   221,   222,    -1,    -1,   225,   226,   227,
      -1,   229,    -1,   231,    -1,    -1,    -1,    -1,   236,   237,
      -1,    -1,    -1,   241,    -1,   243,   244,    -1,   246,   247,
      -1,    -1,    -1,   251,    -1,    -1,   254,   255,   256,    -1,
      -1,   259,    -1,    -1,   262,   263,    -1,    -1,    -1,    -1,
      -1,   269,   270,    -1,   272,    -1,   274,    -1,   276,   277,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,    -1,   301,   302,   303,    -1,   305,   306,   307,
     308,    -1,   310,   311,    -1,    -1,    -1,    -1,   316,   317,
     318,   319,   320,   321,    -1,    -1,   324,   325,    -1,   327,
      -1,   329,    -1,   331,   332,   333,   334,   335,   336,   337,
     338,   339,    -1,    -1,   342,   343,    -1,    -1,   346,   347,
     348,   349,    -1,    -1,    -1,   353,   354,    -1,    -1,    -1,
      -1,   359,   360,   361,    -1,   363,   364,   365,   366,    -1,
     368,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     378,   379,   380,    -1,    -1,   383,    -1,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,    -1,
      -1,   399,   400,   401,   402,   403,    -1,   405,   406,   407,
     408,   409,    -1,   411,   412,   413,    -1,    -1,   416,    -1,
      -1,    -1,   420,   421,   422,   423,   424,    -1,    -1,   427,
     428,   429,   430,   431,    -1,   433,   434,    -1,   436,   437,
     438,    -1,    -1,   441,    -1,   443,    -1,   445,   446,    -1,
     448,   449,    -1,    -1,    -1,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   462,    -1,   464,   465,    -1,    -1,
      -1,   469,   470,   471,   472,    -1,    -1,    -1,   476,    -1,
      -1,    -1,   480,    -1,   482,   483,   484,   485,   486,    -1,
     488,   489,   490,   491,   492,   493,    -1,    -1,    -1,    -1,
      -1,    -1,   500,   501,    -1,   503,    -1,    -1,   506,    -1,
      -1,   509,   510,   511,    -1,    -1,   514,   515,    -1,   517,
     518,   519,   520,   521,   522,    -1,    -1,   525,   526,   527,
     528,    -1,   530,   531,    -1,   533,    -1,   535,   536,   537,
     538,    -1,    -1,   541,   542,    -1,   544,   545,   546,   547,
      -1,    -1,    -1,    -1,    -1,   553,   554,   555,    -1,    -1,
      -1,   559,   560,   561,   562,    -1,   564,   565,    -1,   567,
     568,    -1,   570,   571,    -1,    -1,   574,    -1,    -1,   577,
      -1,   579,    -1,   581,   582,   583,    -1,    -1,    -1,    -1,
      -1,    -1,   590,    -1,    -1,   593,    -1,    -1,    -1,   597,
     598,   599,   600,   601,   602,    -1,    -1,    -1,    -1,    -1,
      -1,   609,   610,    -1,   612,   613,   614,    -1,     5,   617,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    -1,    -1,    -1,    35,    -1,
      -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,
      -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,    56,
      -1,    58,    59,    -1,    61,    62,    -1,    64,    65,    66,
      67,    68,    69,    70,    -1,    72,    73,    74,    75,    76,
      77,    78,    -1,    80,    81,    82,    83,    84,    85,    86,
      87,    -1,    89,    90,    -1,    92,    93,    94,    95,    96,
      -1,    98,    -1,    -1,   101,    -1,    -1,   104,    -1,    -1,
      -1,   108,    -1,    -1,    -1,   112,   113,   114,    -1,    -1,
     117,    -1,    -1,    -1,    -1,   122,   123,    -1,    -1,    -1,
      -1,   128,    -1,   130,    -1,    -1,    -1,   134,    -1,   136,
     137,   138,   139,    -1,    -1,    -1,   143,    -1,    -1,   146,
     147,   148,    -1,    -1,    -1,   152,    -1,   154,   155,    -1,
     157,   158,   159,    -1,    -1,   162,   163,    -1,   165,   166,
     167,   168,   169,   170,    -1,    -1,   173,   174,   175,    -1,
      -1,   178,   179,    -1,   181,   182,   183,    -1,    -1,   186,
      -1,    -1,    -1,   190,    -1,   192,    -1,   194,    -1,   196,
     197,   198,   199,   200,   201,    -1,   203,    -1,    -1,    -1,
     207,   208,   209,    -1,   211,    -1,    -1,   214,   215,    -1,
      -1,    -1,   219,   220,   221,   222,    -1,    -1,   225,   226,
     227,    -1,   229,    -1,   231,    -1,    -1,    -1,    -1,   236,
     237,    -1,    -1,    -1,   241,    -1,   243,   244,    -1,   246,
     247,    -1,    -1,    -1,   251,    -1,    -1,   254,   255,   256,
      -1,    -1,   259,    -1,    -1,   262,   263,    -1,    -1,    -1,
      -1,    -1,   269,   270,    -1,   272,    -1,   274,    -1,   276,
     277,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,    -1,   301,   302,   303,    -1,   305,   306,
     307,   308,    -1,   310,   311,    -1,    -1,    -1,    -1,   316,
     317,   318,   319,   320,   321,    -1,    -1,   324,   325,    -1,
     327,    -1,   329,    -1,   331,   332,   333,   334,   335,   336,
     337,   338,   339,    -1,    -1,   342,   343,    -1,    -1,   346,
     347,   348,   349,    -1,    -1,    -1,   353,   354,    -1,    -1,
      -1,    -1,   359,   360,   361,    -1,   363,   364,   365,   366,
      -1,   368,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   378,   379,   380,    -1,    -1,   383,    -1,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
      -1,    -1,   399,   400,   401,    -1,   403,    -1,   405,   406,
     407,   408,   409,    -1,   411,   412,   413,    -1,    -1,   416,
      -1,    -1,    -1,   420,   421,   422,   423,   424,    -1,    -1,
     427,   428,   429,   430,   431,    -1,   433,   434,    -1,   436,
     437,   438,    -1,    -1,   441,    -1,   443,    -1,   445,   446,
      -1,   448,   449,    -1,    -1,    -1,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,    -1,   464,   465,    -1,
      -1,    -1,   469,   470,   471,   472,    -1,    -1,    -1,   476,
      -1,    -1,    -1,   480,    -1,   482,   483,   484,   485,   486,
      -1,   488,   489,   490,   491,   492,   493,    -1,    -1,    -1,
      -1,    -1,    -1,   500,   501,    -1,   503,    -1,    -1,   506,
      -1,    -1,   509,   510,   511,    -1,    -1,   514,   515,    -1,
     517,   518,   519,   520,   521,   522,    -1,    -1,   525,   526,
     527,   528,    -1,   530,   531,    -1,   533,    -1,   535,   536,
     537,   538,    -1,   540,   541,   542,    -1,   544,   545,   546,
     547,    -1,    -1,    -1,    -1,    -1,   553,   554,   555,    -1,
      -1,    -1,   559,   560,   561,   562,    -1,   564,   565,    -1,
     567,   568,    -1,   570,   571,    -1,    -1,   574,    -1,    -1,
     577,    -1,   579,    -1,   581,   582,   583,    -1,    -1,    -1,
      -1,    -1,    -1,   590,    -1,    -1,   593,    -1,    -1,    -1,
     597,   598,   599,   600,   601,   602,    -1,    -1,    -1,    -1,
      -1,    -1,   609,   610,    -1,   612,   613,   614,    -1,     5,
     617,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    -1,    -1,    -1,    35,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,    55,
      56,    -1,    58,    59,    -1,    61,    62,    -1,    64,    65,
      66,    67,    68,    69,    70,    -1,    72,    73,    74,    75,
      76,    77,    78,    -1,    80,    81,    82,    83,    84,    85,
      86,    87,    -1,    89,    90,    -1,    92,    93,    94,    95,
      96,    -1,    98,    -1,    -1,   101,    -1,    -1,   104,    -1,
      -1,    -1,   108,    -1,    -1,    -1,   112,   113,   114,    -1,
      -1,   117,    -1,    -1,    -1,    -1,   122,   123,    -1,    -1,
      -1,    -1,   128,    -1,   130,    -1,    -1,    -1,   134,    -1,
     136,   137,   138,   139,    -1,    -1,    -1,   143,    -1,    -1,
     146,   147,   148,    -1,    -1,    -1,   152,    -1,   154,   155,
      -1,   157,   158,   159,    -1,    -1,   162,   163,    -1,   165,
     166,   167,   168,   169,   170,    -1,    -1,   173,   174,   175,
      -1,    -1,   178,   179,    -1,   181,   182,   183,    -1,    -1,
     186,    -1,    -1,    -1,   190,    -1,   192,    -1,   194,    -1,
     196,   197,   198,   199,   200,   201,    -1,   203,    -1,    -1,
      -1,   207,   208,   209,    -1,   211,    -1,    -1,   214,   215,
      -1,    -1,    -1,   219,   220,   221,   222,    -1,    -1,   225,
     226,   227,    -1,   229,    -1,   231,    -1,    -1,    -1,    -1,
     236,   237,    -1,    -1,    -1,   241,    -1,   243,   244,    -1,
     246,   247,    -1,    -1,    -1,   251,    -1,    -1,   254,   255,
     256,    -1,    -1,   259,    -1,    -1,   262,   263,    -1,    -1,
      -1,    -1,    -1,   269,   270,    -1,   272,    -1,   274,    -1,
     276,   277,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,    -1,   301,   302,   303,    -1,   305,
     306,   307,   308,    -1,   310,   311,    -1,    -1,    -1,    -1,
     316,   317,   318,   319,   320,   321,    -1,    -1,   324,   325,
      -1,   327,    -1,   329,    -1,   331,   332,   333,   334,   335,
     336,   337,   338,   339,    -1,    -1,   342,   343,    -1,    -1,
     346,   347,   348,   349,    -1,    -1,    -1,   353,   354,    -1,
      -1,    -1,    -1,   359,   360,   361,    -1,   363,   364,   365,
     366,    -1,   368,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   378,   379,   380,    -1,    -1,   383,    -1,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,    -1,    -1,   399,   400,   401,   402,   403,    -1,   405,
     406,   407,   408,   409,    -1,   411,   412,   413,    -1,    -1,
     416,    -1,    -1,    -1,   420,   421,   422,   423,   424,    -1,
      -1,   427,   428,   429,   430,   431,    -1,   433,   434,    -1,
     436,   437,   438,    -1,    -1,   441,    -1,   443,    -1,   445,
     446,    -1,   448,   449,    -1,    -1,    -1,   453,   454,   455,
     456,   457,   458,   459,   460,   461,   462,    -1,   464,   465,
      -1,    -1,    -1,   469,   470,   471,   472,    -1,    -1,    -1,
     476,    -1,    -1,    -1,   480,    -1,   482,   483,   484,   485,
     486,    -1,   488,   489,   490,   491,   492,   493,    -1,    -1,
      -1,    -1,    -1,    -1,   500,   501,    -1,   503,    -1,    -1,
     506,    -1,    -1,   509,   510,   511,    -1,    -1,   514,   515,
      -1,   517,   518,   519,   520,   521,   522,    -1,    -1,   525,
     526,   527,   528,    -1,   530,   531,    -1,   533,    -1,   535,
     536,   537,   538,    -1,    -1,   541,   542,    -1,   544,   545,
     546,   547,    -1,    -1,    -1,    -1,    -1,   553,   554,   555,
      -1,    -1,    -1,   559,   560,   561,   562,    -1,   564,   565,
      -1,   567,   568,    -1,   570,   571,    -1,    -1,   574,    -1,
      -1,   577,    -1,   579,    -1,   581,   582,   583,    -1,    -1,
      -1,    -1,    -1,    -1,   590,    -1,    -1,   593,    -1,    -1,
      -1,   597,   598,   599,   600,   601,   602,    -1,    -1,    -1,
      -1,    -1,    -1,   609,   610,    -1,   612,   613,   614,    -1,
       5,   617,     7,     8,     9,    10,    11,    -1,    -1,    14,
      -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    -1,    -1,    -1,
      35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,
      -1,    46,    -1,    48,    49,    -1,    -1,    52,    -1,    -1,
      55,    56,    -1,    58,    59,    -1,    61,    62,    -1,    64,
      65,    66,    67,    68,    69,    70,    -1,    72,    73,    74,
      75,    76,    77,    78,    -1,    80,    81,    82,    83,    84,
      85,    86,    87,    -1,    89,    90,    -1,    92,    93,    94,
      95,    96,    -1,    98,    -1,    -1,   101,    -1,    -1,   104,
      -1,    -1,    -1,   108,    -1,    -1,    -1,   112,   113,   114,
      -1,    -1,   117,    -1,    -1,    -1,    -1,   122,   123,    -1,
      -1,    -1,    -1,   128,    -1,   130,    -1,    -1,    -1,   134,
      -1,   136,   137,   138,   139,    -1,    -1,    -1,   143,    -1,
      -1,   146,   147,   148,    -1,    -1,    -1,   152,    -1,   154,
     155,    -1,   157,   158,   159,    -1,    -1,   162,   163,    -1,
     165,   166,   167,   168,   169,   170,    -1,    -1,   173,   174,
     175,    -1,    -1,   178,   179,    -1,   181,   182,   183,    -1,
      -1,   186,    -1,    -1,    -1,   190,    -1,   192,    -1,   194,
      -1,   196,   197,   198,   199,   200,   201,    -1,   203,    -1,
      -1,    -1,   207,   208,   209,    -1,   211,    -1,    -1,   214,
     215,    -1,    -1,    -1,   219,   220,   221,   222,    -1,    -1,
     225,   226,   227,    -1,   229,    -1,   231,    -1,    -1,    -1,
      -1,   236,   237,    -1,    -1,    -1,   241,    -1,   243,   244,
      -1,   246,   247,    -1,    -1,    -1,   251,    -1,    -1,   254,
     255,   256,    -1,    -1,   259,    -1,    -1,   262,   263,    -1,
      -1,    -1,    -1,    -1,   269,   270,    -1,   272,    -1,   274,
      -1,   276,   277,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,    -1,   301,   302,   303,    -1,
     305,   306,   307,   308,    -1,   310,   311,    -1,    -1,    -1,
      -1,   316,   317,   318,   319,   320,   321,    -1,    -1,   324,
     325,    -1,   327,    -1,   329,    -1,   331,   332,   333,   334,
     335,   336,   337,   338,   339,    -1,    -1,   342,   343,    -1,
      -1,   346,   347,   348,   349,    -1,    -1,    -1,   353,   354,
      -1,    -1,    -1,    -1,   359,   360,   361,    -1,   363,   364,
     365,   366,    -1,   368,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   378,   379,   380,    -1,    -1,   383,    -1,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,    -1,    -1,   399,   400,   401,    -1,   403,    -1,
     405,   406,   407,   408,   409,    -1,   411,   412,   413,    -1,
      -1,   416,    -1,    -1,    -1,   420,   421,   422,   423,   424,
      -1,    -1,   427,   428,   429,   430,   431,    -1,   433,   434,
      -1,   436,   437,   438,    -1,    -1,   441,    -1,   443,    -1,
     445,   446,    -1,   448,   449,    -1,    -1,    -1,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,    -1,   464,
     465,    -1,    -1,    -1,   469,   470,   471,   472,    -1,    -1,
      -1,   476,    -1,    -1,    -1,   480,    -1,   482,   483,   484,
     485,   486,    -1,   488,   489,   490,   491,   492,   493,    -1,
      -1,    -1,    -1,    -1,    -1,   500,   501,    -1,   503,    -1,
      -1,   506,    -1,    -1,   509,   510,   511,    -1,    -1,   514,
     515,    -1,   517,   518,   519,   520,   521,   522,    -1,    -1,
     525,   526,   527,   528,    -1,   530,   531,    -1,   533,    -1,
     535,   536,   537,   538,    -1,    -1,   541,   542,    -1,   544,
     545,   546,   547,    -1,    -1,    -1,    -1,    -1,   553,   554,
     555,    -1,    -1,    -1,   559,   560,   561,   562,    -1,   564,
     565,    -1,   567,   568,    -1,   570,   571,    -1,    -1,   574,
      -1,    -1,   577,    -1,   579,    -1,   581,   582,   583,    -1,
      -1,    -1,    -1,    -1,    -1,   590,    -1,    -1,   593,    -1,
      -1,    -1,   597,   598,   599,   600,   601,   602,    -1,    -1,
      -1,    -1,    -1,    -1,   609,   610,    -1,   612,   613,   614,
      -1,     5,   617,     7,     8,     9,    10,    11,    -1,    -1,
      14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    -1,    -1,
      -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    -1,    48,    49,    -1,    -1,    52,    -1,
      -1,    55,    56,    -1,    58,    59,    -1,    61,    62,    -1,
      64,    65,    66,    67,    68,    69,    70,    -1,    72,    73,
      74,    75,    76,    77,    78,    -1,    80,    81,    82,    83,
      84,    85,    86,    87,    -1,    89,    90,    -1,    92,    93,
      94,    95,    96,    -1,    98,    -1,    -1,   101,    -1,    -1,
     104,    -1,    -1,    -1,   108,    -1,    -1,    -1,   112,   113,
     114,    -1,    -1,   117,    -1,    -1,    -1,    -1,   122,   123,
      -1,    -1,    -1,    -1,   128,    -1,   130,    -1,    -1,    -1,
     134,    -1,   136,   137,   138,   139,    -1,    -1,    -1,   143,
      -1,    -1,   146,   147,   148,    -1,    -1,    -1,   152,    -1,
     154,   155,    -1,   157,   158,   159,    -1,    -1,   162,   163,
      -1,   165,   166,   167,   168,   169,   170,    -1,    -1,   173,
     174,   175,    -1,    -1,   178,   179,    -1,   181,   182,   183,
      -1,    -1,   186,    -1,    -1,    -1,   190,    -1,   192,    -1,
     194,    -1,   196,   197,   198,   199,   200,   201,    -1,   203,
      -1,    -1,    -1,   207,   208,   209,    -1,   211,    -1,    -1,
     214,   215,    -1,    -1,    -1,   219,   220,   221,   222,    -1,
      -1,   225,   226,   227,    -1,   229,    -1,   231,    -1,    -1,
      -1,    -1,   236,   237,    -1,    -1,    -1,   241,    -1,   243,
     244,    -1,   246,   247,    -1,    -1,    -1,   251,    -1,    -1,
     254,   255,   256,    -1,    -1,   259,    -1,    -1,   262,   263,
      -1,    -1,    -1,    -1,    -1,   269,   270,    -1,   272,    -1,
     274,    -1,   276,   277,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,    -1,   301,   302,   303,
      -1,   305,   306,   307,   308,    -1,   310,   311,    -1,    -1,
      -1,    -1,   316,   317,   318,   319,   320,   321,    -1,    -1,
     324,   325,    -1,   327,    -1,   329,    -1,   331,   332,   333,
     334,   335,   336,   337,   338,   339,    -1,    -1,   342,   343,
      -1,    -1,   346,   347,   348,   349,    -1,    -1,    -1,   353,
     354,    -1,    -1,    -1,    -1,   359,   360,   361,    -1,   363,
     364,   365,   366,    -1,   368,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   378,   379,   380,    -1,    -1,   383,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,    -1,    -1,   399,   400,   401,    -1,   403,
      -1,   405,   406,   407,   408,   409,    -1,   411,   412,   413,
      -1,    -1,   416,    -1,    -1,    -1,   420,   421,   422,   423,
     424,    -1,    -1,   427,   428,   429,   430,   431,    -1,   433,
     434,    -1,   436,   437,   438,    -1,    -1,   441,    -1,   443,
      -1,   445,   446,    -1,   448,   449,    -1,    -1,    -1,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,    -1,
     464,   465,    -1,    -1,    -1,   469,   470,   471,   472,    -1,
      -1,    -1,   476,    -1,    -1,    -1,   480,    -1,   482,   483,
     484,   485,   486,    -1,   488,   489,   490,   491,   492,   493,
      -1,    -1,    -1,    -1,    -1,    -1,   500,   501,    -1,   503,
      -1,    -1,   506,    -1,    -1,   509,   510,   511,    -1,    -1,
     514,   515,    -1,   517,   518,   519,   520,   521,   522,    -1,
      -1,   525,   526,   527,   528,    -1,   530,   531,    -1,   533,
      -1,   535,   536,   537,   538,    -1,    -1,   541,   542,    -1,
     544,   545,   546,   547,    -1,    -1,    -1,    -1,    -1,   553,
     554,   555,    -1,    -1,    -1,   559,   560,   561,   562,    -1,
     564,   565,    -1,   567,   568,    -1,   570,   571,    -1,    -1,
     574,    -1,    -1,   577,    -1,   579,    -1,   581,   582,   583,
      -1,    -1,    -1,    -1,    -1,    -1,   590,    -1,    -1,   593,
      -1,    -1,    -1,   597,   598,   599,   600,   601,   602,    -1,
      -1,    -1,    -1,    -1,    -1,   609,   610,    -1,   612,   613,
     614,    -1,     5,   617,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    -1,    -1,
      23,    24,    25,    26,    27,    28,    -1,    -1,    31,    -1,
      -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    -1,    -1,    -1,    -1,    -1,    52,
      53,    -1,    55,    56,    -1,    58,    -1,    -1,    -1,    -1,
      -1,    64,    65,    66,    67,    68,    69,    70,    -1,    72,
      73,    -1,    -1,    -1,    -1,    -1,    -1,    80,    -1,    82,
      -1,    84,    85,    86,    87,    -1,    89,    90,    -1,    92,
      93,    94,    -1,    96,    -1,    98,    -1,    -1,   101,    -1,
      -1,   104,    -1,    -1,    -1,   108,    -1,    -1,    -1,   112,
     113,   114,    -1,    -1,   117,    -1,    -1,    -1,    -1,   122,
      -1,    -1,    -1,    -1,    -1,   128,    -1,   130,    -1,    -1,
      -1,   134,    -1,   136,   137,   138,   139,    -1,    -1,    -1,
      -1,    -1,    -1,   146,   147,   148,    -1,   150,   151,   152,
      -1,   154,   155,    -1,   157,   158,   159,    -1,    -1,   162,
     163,    -1,   165,   166,   167,   168,    -1,    -1,    -1,    -1,
     173,   174,   175,    -1,    -1,   178,   179,   180,   181,   182,
     183,    -1,    -1,    -1,    -1,    -1,    -1,   190,    -1,   192,
      -1,   194,    -1,   196,   197,   198,   199,   200,   201,    -1,
     203,    -1,    -1,    -1,    -1,   208,   209,    -1,    -1,    -1,
      -1,    -1,   215,    -1,    -1,    -1,   219,   220,   221,   222,
     223,    -1,   225,   226,   227,    -1,   229,    -1,   231,    -1,
      -1,    -1,    -1,   236,    -1,    -1,    -1,    -1,   241,    -1,
     243,   244,    -1,   246,   247,   248,    -1,    -1,   251,    -1,
      -1,    -1,   255,   256,    -1,    -1,   259,   260,    -1,   262,
     263,    -1,    -1,    -1,    -1,    -1,   269,   270,    -1,   272,
      -1,   274,    -1,   276,   277,    -1,    -1,    -1,    -1,   282,
      -1,    -1,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,    -1,   301,   302,
     303,    -1,   305,   306,   307,   308,    -1,   310,   311,    -1,
      -1,    -1,    -1,   316,   317,   318,   319,   320,   321,    -1,
      -1,   324,   325,    -1,   327,    -1,   329,    -1,   331,   332,
     333,   334,   335,   336,   337,   338,   339,    -1,    -1,   342,
     343,    -1,    -1,   346,   347,   348,   349,    -1,    -1,    -1,
      -1,   354,    -1,    -1,    -1,    -1,   359,   360,   361,    -1,
     363,   364,   365,   366,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   379,   380,    -1,    -1,
      -1,    -1,   385,   386,   387,    -1,   389,   390,   391,   392,
     393,   394,   395,    -1,    -1,    -1,    -1,   400,   401,    -1,
     403,    -1,   405,   406,   407,   408,   409,    -1,   411,   412,
     413,    -1,    -1,   416,    -1,    -1,    -1,   420,   421,   422,
     423,   424,    -1,    -1,   427,   428,   429,   430,   431,    -1,
     433,    -1,    -1,   436,    -1,   438,   439,    -1,   441,    -1,
      -1,    -1,   445,    -1,    -1,   448,   449,   450,    -1,    -1,
      -1,   454,   455,   456,   457,   458,   459,    -1,   461,   462,
      -1,   464,    -1,    -1,    -1,    -1,   469,   470,   471,    -1,
      -1,    -1,    -1,   476,    -1,    -1,    -1,   480,    -1,    -1,
     483,    -1,    -1,   486,    -1,   488,    -1,   490,    -1,   492,
     493,    -1,    -1,    -1,    -1,    -1,    -1,   500,   501,    -1,
     503,    -1,    -1,   506,    -1,    -1,   509,    -1,   511,    -1,
      -1,    -1,   515,    -1,   517,   518,   519,   520,   521,   522,
      -1,    -1,   525,   526,   527,   528,    -1,   530,   531,    -1,
     533,    -1,   535,   536,   537,   538,    -1,    -1,   541,   542,
      -1,   544,   545,   546,   547,    -1,    -1,    -1,    -1,    -1,
     553,   554,   555,    -1,    -1,    -1,    -1,   560,   561,   562,
      -1,   564,   565,    -1,   567,   568,    -1,    -1,    -1,    -1,
      -1,   574,    -1,    -1,   577,    -1,    -1,    -1,   581,   582,
     583,    -1,    -1,    -1,    -1,    -1,    -1,   590,    -1,    -1,
     593,    -1,    -1,    -1,   597,   598,   599,   600,   601,   602,
      -1,    -1,   605,    -1,    -1,    -1,   609,    -1,    -1,   612,
      -1,   614,    -1,     5,   617,     7,     8,     9,    10,    11,
      -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    -1,
      -1,    23,    24,    25,    26,    27,    28,    -1,    -1,    31,
      -1,    -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    -1,    -1,    -1,    -1,    -1,
      52,    53,    -1,    55,    56,    -1,    58,    -1,    -1,    -1,
      -1,    -1,    64,    65,    66,    67,    68,    69,    70,    -1,
      72,    73,    -1,    -1,    -1,    -1,    -1,    -1,    80,    -1,
      82,    -1,    84,    85,    86,    87,    -1,    89,    90,    -1,
      92,    93,    94,    -1,    96,    -1,    98,    -1,    -1,   101,
      -1,    -1,   104,    -1,    -1,    -1,   108,    -1,    -1,    -1,
     112,   113,   114,    -1,    -1,   117,    -1,    -1,    -1,    -1,
     122,    -1,    -1,    -1,    -1,    -1,   128,    -1,   130,    -1,
      -1,    -1,   134,    -1,   136,   137,   138,   139,    -1,    -1,
      -1,    -1,    -1,    -1,   146,   147,   148,    -1,   150,    -1,
     152,    -1,   154,   155,    -1,   157,   158,   159,    -1,    -1,
     162,   163,    -1,   165,   166,   167,   168,    -1,    -1,    -1,
      -1,   173,   174,   175,    -1,    -1,   178,   179,   180,   181,
     182,   183,    -1,    -1,    -1,    -1,    -1,    -1,   190,    -1,
     192,    -1,   194,    -1,   196,   197,   198,   199,   200,   201,
      -1,   203,    -1,    -1,    -1,    -1,   208,   209,    -1,    -1,
      -1,    -1,    -1,   215,    -1,    -1,    -1,   219,   220,   221,
     222,   223,    -1,   225,   226,   227,    -1,   229,    -1,   231,
      -1,    -1,    -1,    -1,   236,    -1,    -1,    -1,    -1,   241,
      -1,   243,   244,    -1,   246,   247,   248,    -1,    -1,   251,
      -1,    -1,    -1,   255,   256,    -1,    -1,   259,   260,    -1,
     262,   263,    -1,    -1,    -1,    -1,    -1,   269,   270,    -1,
     272,    -1,   274,    -1,   276,   277,    -1,    -1,    -1,    -1,
     282,    -1,    -1,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,    -1,   301,
     302,   303,    -1,   305,   306,   307,   308,    -1,   310,   311,
      -1,    -1,    -1,    -1,   316,   317,   318,   319,   320,   321,
      -1,    -1,   324,   325,    -1,   327,    -1,   329,    -1,   331,
     332,   333,   334,   335,   336,   337,   338,   339,    -1,    -1,
     342,   343,    -1,    -1,   346,   347,   348,   349,    -1,    -1,
      -1,    -1,   354,    -1,    -1,    -1,    -1,   359,   360,   361,
      -1,   363,   364,   365,   366,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   379,   380,    -1,
      -1,    -1,    -1,   385,   386,   387,    -1,   389,   390,   391,
     392,   393,   394,   395,    -1,    -1,    -1,    -1,   400,   401,
      -1,   403,    -1,   405,   406,   407,   408,   409,    -1,   411,
     412,   413,    -1,    -1,   416,    -1,    -1,    -1,   420,   421,
     422,   423,   424,    -1,    -1,   427,   428,   429,   430,   431,
      -1,   433,    -1,    -1,   436,    -1,   438,   439,    -1,   441,
      -1,    -1,    -1,   445,    -1,    -1,   448,   449,   450,    -1,
      -1,    -1,   454,   455,   456,   457,   458,   459,    -1,   461,
     462,    -1,   464,    -1,    -1,    -1,    -1,   469,   470,   471,
      -1,    -1,    -1,    -1,   476,    -1,    -1,    -1,   480,    -1,
      -1,   483,    -1,    -1,   486,    -1,   488,    -1,   490,    -1,
     492,   493,    -1,    -1,    -1,    -1,    -1,    -1,   500,   501,
      -1,   503,    -1,    -1,   506,    -1,    -1,   509,    -1,   511,
      -1,    -1,    -1,   515,    -1,   517,   518,   519,   520,   521,
     522,    -1,    -1,   525,   526,   527,   528,    -1,   530,   531,
      -1,   533,    -1,   535,   536,   537,   538,    -1,    -1,   541,
     542,    -1,   544,   545,   546,   547,    -1,    -1,    -1,    -1,
      -1,   553,   554,   555,    -1,    -1,    -1,    -1,   560,   561,
     562,    -1,   564,   565,    -1,   567,   568,    -1,    -1,    -1,
      -1,    -1,   574,    -1,    -1,   577,    -1,    -1,    -1,   581,
     582,   583,    -1,    -1,    -1,    -1,    -1,    -1,   590,    -1,
      -1,   593,    -1,    -1,    -1,   597,   598,   599,   600,   601,
     602,   603,    -1,   605,    -1,    -1,    -1,   609,    -1,    -1,
     612,    -1,   614,    -1,     5,   617,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      -1,    -1,    23,    24,    25,    26,    27,    28,    -1,    -1,
      31,    -1,    -1,    -1,    35,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    -1,    -1,    -1,    -1,
      -1,    52,    53,    -1,    55,    56,    -1,    58,    -1,    -1,
      -1,    -1,    -1,    64,    65,    66,    67,    68,    69,    70,
      -1,    72,    73,    -1,    -1,    -1,    -1,    -1,    -1,    80,
      -1,    82,    -1,    84,    85,    86,    87,    -1,    89,    90,
      -1,    92,    93,    94,    -1,    96,    -1,    98,    -1,    -1,
     101,    -1,    -1,   104,    -1,    -1,    -1,   108,    -1,    -1,
      -1,   112,   113,   114,    -1,    -1,   117,    -1,    -1,    -1,
      -1,   122,    -1,    -1,    -1,    -1,    -1,   128,    -1,   130,
      -1,    -1,    -1,   134,    -1,   136,   137,   138,   139,    -1,
      -1,    -1,    -1,    -1,    -1,   146,   147,   148,    -1,   150,
      -1,   152,    -1,   154,   155,    -1,   157,   158,   159,    -1,
      -1,   162,   163,    -1,   165,   166,   167,   168,    -1,    -1,
      -1,    -1,   173,   174,   175,    -1,    -1,   178,   179,   180,
     181,   182,   183,    -1,    -1,    -1,    -1,    -1,    -1,   190,
      -1,   192,    -1,   194,    -1,   196,   197,   198,   199,   200,
     201,    -1,   203,    -1,    -1,    -1,    -1,   208,   209,    -1,
      -1,    -1,    -1,    -1,   215,    -1,    -1,    -1,   219,   220,
     221,   222,   223,    -1,   225,   226,   227,    -1,   229,    -1,
     231,    -1,    -1,    -1,    -1,   236,    -1,    -1,    -1,    -1,
     241,    -1,   243,   244,    -1,   246,   247,   248,    -1,    -1,
     251,    -1,    -1,    -1,   255,   256,    -1,    -1,   259,   260,
      -1,   262,   263,    -1,    -1,    -1,    -1,    -1,   269,   270,
      -1,   272,    -1,   274,    -1,   276,   277,    -1,    -1,    -1,
      -1,   282,    -1,    -1,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,    -1,
     301,   302,   303,    -1,   305,   306,   307,   308,    -1,   310,
     311,    -1,    -1,    -1,    -1,   316,   317,   318,   319,   320,
     321,    -1,    -1,   324,   325,    -1,   327,    -1,   329,    -1,
     331,   332,   333,   334,   335,   336,   337,   338,   339,    -1,
      -1,   342,   343,    -1,    -1,   346,   347,   348,   349,    -1,
      -1,    -1,    -1,   354,    -1,    -1,    -1,    -1,   359,   360,
     361,    -1,   363,   364,   365,   366,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   379,   380,
      -1,    -1,    -1,    -1,   385,   386,   387,    -1,   389,   390,
     391,   392,   393,   394,   395,    -1,    -1,    -1,    -1,   400,
     401,    -1,   403,    -1,   405,   406,   407,   408,   409,    -1,
     411,   412,   413,    -1,    -1,   416,    -1,    -1,    -1,   420,
     421,   422,   423,   424,    -1,    -1,   427,   428,   429,   430,
     431,    -1,   433,    -1,    -1,   436,    -1,   438,   439,    -1,
     441,    -1,    -1,    -1,   445,    -1,    -1,   448,   449,   450,
      -1,    -1,    -1,   454,   455,   456,   457,   458,   459,    -1,
     461,   462,    -1,   464,    -1,    -1,    -1,    -1,   469,   470,
     471,    -1,    -1,    -1,    -1,   476,    -1,    -1,    -1,   480,
      -1,    -1,   483,    -1,    -1,   486,    -1,   488,    -1,   490,
      -1,   492,   493,    -1,    -1,    -1,    -1,    -1,    -1,   500,
     501,    -1,   503,    -1,    -1,   506,    -1,    -1,   509,    -1,
     511,    -1,    -1,    -1,   515,    -1,   517,   518,   519,   520,
     521,   522,    -1,    -1,   525,   526,   527,   528,    -1,   530,
     531,    -1,   533,    -1,   535,   536,   537,   538,    -1,    -1,
     541,   542,    -1,   544,   545,   546,   547,    -1,    -1,    -1,
      -1,    -1,   553,   554,   555,    -1,    -1,    -1,    -1,   560,
     561,   562,    -1,   564,   565,    -1,   567,   568,    -1,    -1,
      -1,    -1,    -1,   574,    -1,    -1,   577,    -1,    -1,    -1,
     581,   582,   583,    -1,    -1,    -1,    -1,    -1,    -1,   590,
      -1,    -1,   593,    -1,    -1,    -1,   597,   598,   599,   600,
     601,   602,   603,    -1,   605,    -1,    -1,    -1,   609,    -1,
      -1,   612,    -1,   614,    -1,     5,   617,     7,     8,     9,
      10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,
      -1,    -1,    -1,    23,    24,    25,    26,    27,    28,    -1,
      -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,    39,
      -1,    -1,    42,    43,    44,    -1,    46,    -1,    -1,    -1,
      -1,    -1,    52,    53,    -1,    55,    56,    -1,    58,    -1,
      -1,    -1,    -1,    -1,    64,    65,    66,    67,    68,    69,
      70,    -1,    72,    73,    -1,    -1,    -1,    -1,    -1,    -1,
      80,    -1,    82,    -1,    84,    85,    86,    87,    -1,    89,
      90,    -1,    92,    93,    94,    -1,    96,    -1,    98,    -1,
      -1,   101,    -1,    -1,   104,    -1,    -1,    -1,   108,    -1,
      -1,    -1,   112,   113,   114,    -1,    -1,   117,    -1,    -1,
      -1,    -1,   122,    -1,    -1,    -1,    -1,    -1,   128,    -1,
     130,    -1,    -1,    -1,   134,    -1,   136,   137,   138,   139,
      -1,    -1,    -1,    -1,    -1,    -1,   146,   147,   148,    -1,
      -1,    -1,   152,    -1,   154,   155,    -1,   157,   158,   159,
      -1,    -1,   162,   163,    -1,   165,   166,   167,   168,    -1,
      -1,    -1,    -1,   173,   174,   175,    -1,    -1,   178,   179,
     180,   181,   182,   183,    -1,    -1,    -1,    -1,    -1,    -1,
     190,    -1,   192,    -1,   194,    -1,   196,   197,   198,   199,
     200,   201,    -1,   203,    -1,    -1,    -1,    -1,   208,   209,
      -1,    -1,    -1,    -1,    -1,   215,    -1,    -1,    -1,   219,
     220,   221,   222,   223,    -1,   225,   226,   227,    -1,   229,
      -1,   231,    -1,    -1,    -1,    -1,   236,    -1,    -1,    -1,
      -1,   241,    -1,   243,   244,    -1,   246,   247,   248,    -1,
      -1,   251,    -1,    -1,    -1,   255,   256,    -1,    -1,   259,
     260,    -1,   262,   263,    -1,    -1,    -1,    -1,    -1,   269,
     270,    -1,   272,    -1,   274,    -1,   276,   277,    -1,    -1,
      -1,    -1,   282,    -1,    -1,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
      -1,   301,   302,   303,    -1,   305,   306,   307,   308,    -1,
     310,   311,    -1,    -1,    -1,    -1,   316,   317,   318,   319,
     320,   321,    -1,    -1,   324,   325,    -1,   327,    -1,   329,
      -1,   331,   332,   333,   334,   335,   336,   337,   338,   339,
      -1,    -1,   342,   343,    -1,    -1,   346,   347,   348,   349,
      -1,    -1,    -1,    -1,   354,    -1,    -1,    -1,    -1,   359,
     360,   361,    -1,   363,   364,   365,   366,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   379,
     380,    -1,    -1,    -1,    -1,   385,   386,   387,    -1,   389,
     390,   391,   392,   393,   394,   395,    -1,    -1,    -1,    -1,
     400,   401,    -1,   403,    -1,   405,   406,   407,   408,   409,
      -1,   411,   412,   413,    -1,    -1,   416,    -1,    -1,    -1,
     420,   421,   422,   423,   424,    -1,    -1,   427,   428,   429,
     430,   431,    -1,   433,    -1,    -1,   436,    -1,   438,   439,
      -1,   441,    -1,    -1,    -1,   445,    -1,    -1,   448,   449,
     450,    -1,    -1,    -1,   454,   455,   456,   457,   458,   459,
      -1,   461,   462,    -1,   464,    -1,    -1,    -1,    -1,   469,
     470,   471,    -1,    -1,    -1,    -1,   476,    -1,    -1,    -1,
     480,    -1,    -1,   483,    -1,    -1,   486,    -1,   488,    -1,
     490,    -1,   492,   493,    -1,    -1,    -1,    -1,    -1,    -1,
     500,   501,    -1,   503,    -1,    -1,   506,    -1,    -1,   509,
      -1,   511,    -1,    -1,    -1,   515,    -1,   517,   518,   519,
     520,   521,   522,    -1,    -1,   525,   526,   527,   528,    -1,
     530,   531,    -1,   533,    -1,   535,   536,   537,   538,    -1,
      -1,   541,   542,    -1,   544,   545,   546,   547,    -1,    -1,
      -1,    -1,    -1,   553,   554,   555,    -1,    -1,    -1,    -1,
     560,   561,   562,    -1,   564,   565,    -1,   567,   568,    -1,
      -1,    -1,    -1,    -1,   574,    -1,    -1,   577,    -1,    -1,
      -1,   581,   582,   583,    -1,    -1,    -1,    -1,    -1,    -1,
     590,    -1,    -1,   593,    -1,    -1,    -1,   597,   598,   599,
     600,   601,   602,    -1,    -1,   605,    -1,    -1,    -1,   609,
      -1,    -1,   612,    -1,   614,    -1,     5,   617,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      -1,    -1,    -1,    -1,    23,    24,    25,    26,    27,    28,
      -1,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,    -1,
      -1,    -1,    -1,    52,    53,    -1,    55,    56,    -1,    58,
      -1,    -1,    -1,    -1,    -1,    64,    65,    66,    67,    68,
      69,    70,    -1,    72,    73,    -1,    -1,    -1,    -1,    -1,
      -1,    80,    -1,    82,    -1,    84,    85,    86,    87,    -1,
      89,    90,    -1,    92,    93,    94,    -1,    96,    -1,    98,
      -1,    -1,   101,    -1,    -1,   104,    -1,    -1,    -1,   108,
      -1,    -1,    -1,   112,   113,   114,    -1,    -1,   117,    -1,
      -1,    -1,    -1,   122,    -1,    -1,    -1,    -1,    -1,   128,
      -1,   130,    -1,    -1,    -1,   134,    -1,   136,   137,   138,
     139,    -1,    -1,    -1,    -1,    -1,    -1,   146,   147,   148,
      -1,    -1,    -1,   152,    -1,   154,   155,    -1,   157,   158,
     159,    -1,    -1,   162,   163,    -1,   165,   166,   167,   168,
      -1,    -1,    -1,    -1,   173,   174,   175,    -1,    -1,   178,
     179,   180,   181,   182,   183,    -1,    -1,    -1,    -1,    -1,
      -1,   190,    -1,   192,    -1,   194,    -1,   196,   197,   198,
     199,   200,   201,    -1,   203,    -1,    -1,    -1,    -1,   208,
     209,    -1,    -1,    -1,    -1,    -1,   215,    -1,    -1,    -1,
     219,   220,   221,   222,   223,    -1,   225,   226,   227,    -1,
     229,    -1,   231,    -1,    -1,    -1,    -1,   236,    -1,    -1,
      -1,    -1,   241,    -1,   243,   244,    -1,   246,   247,   248,
      -1,    -1,   251,    -1,    -1,    -1,   255,   256,    -1,    -1,
     259,   260,    -1,   262,   263,    -1,    -1,    -1,    -1,    -1,
     269,   270,    -1,   272,    -1,   274,    -1,   276,   277,    -1,
      -1,    -1,    -1,   282,    -1,    -1,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,    -1,   301,   302,   303,    -1,   305,   306,   307,   308,
      -1,   310,   311,    -1,    -1,    -1,    -1,   316,   317,   318,
     319,   320,   321,    -1,    -1,   324,   325,    -1,   327,    -1,
     329,    -1,   331,   332,   333,   334,   335,   336,   337,   338,
     339,    -1,    -1,   342,   343,    -1,    -1,   346,   347,   348,
     349,    -1,    -1,    -1,    -1,   354,    -1,    -1,    -1,    -1,
     359,   360,   361,    -1,   363,   364,   365,   366,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     379,   380,    -1,    -1,    -1,    -1,   385,   386,   387,    -1,
     389,   390,   391,   392,   393,   394,   395,    -1,    -1,    -1,
      -1,   400,   401,    -1,   403,    -1,   405,   406,   407,   408,
     409,    -1,   411,   412,   413,    -1,    -1,   416,    -1,    -1,
      -1,   420,   421,   422,   423,   424,    -1,    -1,   427,   428,
     429,   430,   431,    -1,   433,    -1,    -1,   436,    -1,   438,
     439,    -1,   441,    -1,    -1,    -1,   445,    -1,    -1,   448,
     449,   450,    -1,    -1,    -1,   454,   455,   456,   457,   458,
     459,    -1,   461,   462,    -1,   464,    -1,    -1,    -1,    -1,
     469,   470,   471,    -1,    -1,    -1,    -1,   476,    -1,    -1,
      -1,   480,    -1,    -1,   483,    -1,    -1,   486,    -1,   488,
      -1,   490,    -1,   492,   493,    -1,    -1,    -1,    -1,    -1,
      -1,   500,   501,    -1,   503,    -1,    -1,   506,    -1,    -1,
     509,    -1,   511,    -1,    -1,    -1,   515,    -1,   517,   518,
     519,   520,   521,   522,    -1,    -1,   525,   526,   527,   528,
      -1,   530,   531,    -1,   533,    -1,   535,   536,   537,   538,
      -1,    -1,   541,   542,    -1,   544,   545,   546,   547,    -1,
      -1,    -1,    -1,    -1,   553,   554,   555,    -1,    -1,    -1,
      -1,   560,   561,   562,    -1,   564,   565,    -1,   567,   568,
      -1,    -1,    -1,    -1,    -1,   574,    -1,    -1,   577,    -1,
      -1,    -1,   581,   582,   583,    -1,    -1,    -1,    -1,    -1,
      -1,   590,    -1,    -1,   593,    -1,    -1,    -1,   597,   598,
     599,   600,   601,   602,    -1,    -1,   605,    -1,    -1,    -1,
     609,    -1,    -1,   612,    -1,   614,    -1,     5,   617,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,    -1,    -1,    -1,    -1,    23,    24,    25,    26,    27,
      28,    -1,    -1,    31,    -1,    -1,    -1,    35,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    -1,
      -1,    -1,    -1,    -1,    52,    53,    -1,    55,    56,    -1,
      58,    -1,    -1,    -1,    -1,    -1,    64,    65,    66,    67,
      68,    69,    70,    -1,    72,    73,    -1,    -1,    -1,    -1,
      -1,    -1,    80,    -1,    82,    -1,    84,    85,    86,    87,
      -1,    89,    90,    -1,    92,    93,    94,    -1,    96,    -1,
      98,    -1,    -1,   101,    -1,    -1,   104,    -1,    -1,    -1,
     108,    -1,    -1,    -1,   112,   113,   114,    -1,    -1,   117,
      -1,    -1,    -1,    -1,   122,    -1,    -1,    -1,    -1,    -1,
     128,    -1,   130,    -1,    -1,    -1,   134,    -1,   136,   137,
     138,   139,    -1,    -1,    -1,    -1,    -1,    -1,   146,   147,
     148,    -1,    -1,    -1,   152,    -1,   154,   155,    -1,   157,
     158,   159,    -1,    -1,   162,   163,    -1,   165,   166,   167,
     168,    -1,    -1,    -1,    -1,   173,   174,   175,    -1,    -1,
     178,   179,   180,   181,   182,   183,    -1,    -1,    -1,    -1,
      -1,    -1,   190,    -1,   192,    -1,   194,    -1,   196,   197,
     198,   199,   200,   201,    -1,   203,    -1,    -1,    -1,    -1,
     208,   209,    -1,    -1,    -1,    -1,    -1,   215,    -1,    -1,
      -1,   219,   220,   221,   222,   223,    -1,   225,   226,   227,
      -1,   229,    -1,   231,    -1,    -1,    -1,    -1,   236,    -1,
      -1,    -1,    -1,   241,    -1,   243,   244,    -1,   246,   247,
     248,    -1,    -1,   251,    -1,    -1,    -1,   255,   256,    -1,
      -1,   259,   260,    -1,   262,   263,    -1,    -1,    -1,    -1,
      -1,   269,   270,    -1,   272,    -1,   274,    -1,   276,   277,
      -1,    -1,    -1,    -1,   282,    -1,    -1,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,    -1,   301,   302,   303,    -1,   305,   306,   307,
     308,    -1,   310,   311,    -1,    -1,    -1,    -1,   316,   317,
     318,   319,   320,   321,    -1,    -1,   324,   325,    -1,   327,
      -1,   329,    -1,   331,   332,   333,   334,   335,   336,   337,
     338,   339,    -1,    -1,   342,   343,    -1,    -1,   346,   347,
     348,   349,    -1,    -1,    -1,    -1,   354,    -1,    -1,    -1,
      -1,   359,   360,   361,    -1,   363,   364,   365,   366,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   379,   380,    -1,    -1,    -1,    -1,   385,   386,   387,
      -1,   389,   390,   391,   392,   393,   394,   395,    -1,    -1,
      -1,    -1,   400,   401,    -1,   403,    -1,   405,   406,   407,
     408,   409,    -1,   411,   412,   413,    -1,    -1,   416,    -1,
      -1,    -1,   420,   421,   422,   423,   424,    -1,    -1,   427,
     428,   429,   430,   431,    -1,   433,    -1,    -1,   436,    -1,
     438,   439,    -1,   441,    -1,    -1,    -1,   445,    -1,    -1,
     448,   449,   450,    -1,    -1,    -1,   454,   455,   456,   457,
     458,   459,    -1,   461,   462,    -1,   464,    -1,    -1,    -1,
      -1,   469,   470,   471,    -1,    -1,    -1,    -1,   476,    -1,
      -1,    -1,   480,    -1,    -1,   483,    -1,    -1,   486,    -1,
     488,    -1,   490,    -1,   492,   493,    -1,    -1,    -1,    -1,
      -1,    -1,   500,   501,    -1,   503,    -1,    -1,   506,    -1,
      -1,   509,    -1,   511,    -1,    -1,    -1,   515,    -1,   517,
     518,   519,   520,   521,   522,    -1,    -1,   525,   526,   527,
     528,    -1,   530,   531,    -1,   533,    -1,   535,   536,   537,
     538,    -1,    -1,   541,   542,    -1,   544,   545,   546,   547,
      -1,    -1,    -1,    -1,    -1,   553,   554,   555,    -1,    -1,
      -1,    -1,   560,   561,   562,    -1,   564,   565,    -1,   567,
     568,    -1,    -1,    -1,    -1,    -1,   574,    -1,    -1,   577,
      -1,    -1,    -1,   581,   582,   583,    -1,    -1,    -1,    -1,
      -1,    -1,   590,    -1,    -1,   593,    -1,    -1,    -1,   597,
     598,   599,   600,   601,   602,    -1,    -1,   605,    -1,    -1,
      -1,   609,    -1,    -1,   612,    -1,   614,    -1,     5,   617,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    -1,    -1,    -1,    -1,    23,    24,    25,    26,
      27,    28,    -1,    -1,    31,    -1,    -1,    -1,    35,    -1,
      -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,
      -1,    -1,    -1,    -1,    -1,    52,    53,    -1,    55,    56,
      -1,    58,    -1,    -1,    -1,    -1,    -1,    64,    65,    66,
      67,    68,    69,    70,    -1,    72,    73,    -1,    -1,    -1,
      -1,    -1,    -1,    80,    -1,    82,    -1,    84,    85,    86,
      87,    -1,    89,    90,    -1,    92,    93,    94,    -1,    96,
      -1,    98,    -1,    -1,   101,    -1,    -1,   104,    -1,    -1,
      -1,   108,    -1,    -1,    -1,   112,   113,   114,    -1,    -1,
     117,    -1,    -1,    -1,    -1,   122,    -1,    -1,    -1,    -1,
      -1,   128,    -1,   130,    -1,    -1,    -1,   134,    -1,   136,
     137,   138,   139,    -1,    -1,    -1,    -1,    -1,    -1,   146,
     147,   148,    -1,    -1,    -1,   152,    -1,   154,   155,    -1,
     157,   158,   159,    -1,    -1,   162,   163,    -1,   165,   166,
     167,   168,    -1,    -1,    -1,    -1,   173,   174,   175,    -1,
      -1,   178,   179,   180,   181,   182,   183,    -1,    -1,    -1,
      -1,    -1,    -1,   190,    -1,   192,    -1,   194,    -1,   196,
     197,   198,   199,   200,   201,    -1,   203,    -1,    -1,    -1,
      -1,   208,   209,    -1,    -1,    -1,    -1,    -1,   215,    -1,
      -1,    -1,   219,   220,   221,   222,   223,    -1,   225,   226,
     227,    -1,   229,    -1,   231,    -1,    -1,    -1,    -1,   236,
      -1,    -1,    -1,    -1,   241,    -1,   243,   244,    -1,   246,
     247,   248,    -1,    -1,   251,    -1,    -1,    -1,   255,   256,
      -1,    -1,   259,   260,    -1,   262,   263,    -1,    -1,    -1,
      -1,    -1,   269,   270,    -1,   272,    -1,   274,    -1,   276,
     277,    -1,    -1,    -1,    -1,   282,    -1,    -1,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,    -1,   301,   302,   303,    -1,   305,   306,
     307,   308,    -1,   310,   311,    -1,    -1,    -1,    -1,   316,
     317,   318,   319,   320,   321,    -1,    -1,   324,   325,    -1,
     327,    -1,   329,    -1,   331,   332,   333,   334,   335,   336,
     337,   338,   339,    -1,    -1,   342,   343,    -1,    -1,   346,
     347,   348,   349,    -1,    -1,    -1,    -1,   354,    -1,    -1,
      -1,    -1,   359,   360,   361,    -1,   363,   364,   365,   366,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   379,   380,    -1,    -1,    -1,    -1,   385,   386,
     387,    -1,   389,   390,   391,   392,   393,   394,   395,    -1,
      -1,    -1,    -1,   400,   401,    -1,   403,    -1,   405,   406,
     407,   408,   409,    -1,   411,   412,   413,    -1,    -1,   416,
      -1,    -1,    -1,   420,   421,   422,   423,   424,    -1,    -1,
     427,   428,   429,   430,   431,    -1,   433,    -1,    -1,   436,
      -1,   438,   439,    -1,   441,    -1,    -1,    -1,   445,    -1,
      -1,   448,   449,   450,    -1,    -1,    -1,   454,   455,   456,
     457,   458,   459,    -1,   461,   462,    -1,   464,    -1,    -1,
      -1,    -1,   469,   470,   471,    -1,    -1,    -1,    -1,   476,
      -1,    -1,    -1,   480,    -1,    -1,   483,    -1,    -1,   486,
      -1,   488,    -1,   490,    -1,   492,   493,    -1,    -1,    -1,
      -1,    -1,    -1,   500,   501,    -1,   503,    -1,    -1,   506,
      -1,    -1,   509,    -1,   511,    -1,    -1,    -1,   515,    -1,
     517,   518,   519,   520,   521,   522,    -1,    -1,   525,   526,
     527,   528,    -1,   530,   531,    -1,   533,    -1,   535,   536,
     537,   538,    -1,    -1,   541,   542,    -1,   544,   545,   546,
     547,    -1,    -1,    -1,    -1,    -1,   553,   554,   555,    -1,
      -1,    -1,    -1,   560,   561,   562,    -1,   564,   565,    -1,
     567,   568,    -1,    -1,    -1,    -1,    -1,   574,    -1,    -1,
     577,    -1,    -1,    -1,   581,   582,   583,    -1,    -1,    -1,
      -1,    -1,    -1,   590,    -1,    -1,   593,    -1,    -1,    -1,
     597,   598,   599,   600,   601,   602,    -1,    -1,   605,    -1,
      -1,    -1,   609,    -1,    -1,   612,    -1,   614,    -1,     5,
     617,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    -1,    -1,    23,    24,    25,
      26,    27,    28,    -1,    -1,    31,    -1,    -1,    -1,    35,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    -1,    -1,    -1,    -1,    -1,    52,    53,    -1,    55,
      56,    -1,    58,    -1,    -1,    -1,    -1,    -1,    64,    65,
      66,    67,    68,    69,    70,    -1,    72,    73,    -1,    -1,
      -1,    -1,    -1,    -1,    80,    -1,    82,    -1,    84,    85,
      86,    87,    -1,    89,    90,    -1,    92,    93,    94,    -1,
      96,    -1,    98,    -1,    -1,   101,    -1,    -1,   104,    -1,
      -1,    -1,   108,    -1,    -1,    -1,   112,   113,   114,    -1,
      -1,   117,    -1,    -1,    -1,    -1,   122,    -1,    -1,    -1,
      -1,    -1,   128,    -1,   130,    -1,    -1,    -1,   134,    -1,
     136,   137,   138,   139,    -1,    -1,    -1,    -1,    -1,    -1,
     146,   147,   148,    -1,    -1,    -1,   152,    -1,   154,   155,
      -1,   157,   158,   159,    -1,    -1,   162,   163,    -1,   165,
     166,   167,   168,    -1,    -1,    -1,    -1,   173,   174,   175,
      -1,    -1,   178,   179,   180,   181,   182,   183,    -1,    -1,
      -1,    -1,    -1,    -1,   190,    -1,   192,    -1,   194,    -1,
     196,   197,   198,   199,   200,   201,    -1,   203,    -1,    -1,
      -1,    -1,   208,   209,    -1,    -1,    -1,    -1,    -1,   215,
      -1,    -1,    -1,   219,   220,   221,   222,   223,    -1,   225,
     226,   227,    -1,   229,    -1,   231,    -1,    -1,    -1,    -1,
     236,    -1,    -1,    -1,    -1,   241,    -1,   243,   244,    -1,
     246,   247,   248,    -1,    -1,   251,    -1,    -1,    -1,   255,
     256,    -1,    -1,   259,   260,    -1,   262,   263,    -1,    -1,
      -1,    -1,    -1,   269,   270,    -1,   272,    -1,   274,    -1,
     276,   277,    -1,    -1,    -1,    -1,   282,    -1,    -1,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,    -1,   301,   302,   303,    -1,   305,
     306,   307,   308,    -1,   310,   311,    -1,    -1,    -1,    -1,
     316,   317,   318,   319,   320,   321,    -1,    -1,   324,   325,
      -1,   327,    -1,   329,    -1,   331,   332,   333,   334,   335,
     336,   337,   338,   339,    -1,    -1,   342,   343,    -1,    -1,
     346,   347,   348,   349,    -1,    -1,    -1,    -1,   354,    -1,
      -1,    -1,    -1,   359,   360,   361,    -1,   363,   364,   365,
     366,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   379,   380,    -1,    -1,    -1,    -1,   385,
     386,   387,    -1,   389,   390,   391,   392,   393,   394,   395,
      -1,    -1,    -1,    -1,   400,   401,    -1,   403,    -1,   405,
     406,   407,   408,   409,    -1,   411,   412,   413,    -1,    -1,
     416,    -1,    -1,    -1,   420,   421,   422,   423,   424,    -1,
      -1,   427,   428,   429,   430,   431,    -1,   433,    -1,    -1,
     436,    -1,   438,   439,    -1,   441,    -1,    -1,    -1,   445,
      -1,    -1,   448,   449,   450,    -1,    -1,    -1,   454,   455,
     456,   457,   458,   459,    -1,   461,   462,    -1,   464,    -1,
      -1,    -1,    -1,   469,   470,   471,    -1,    -1,    -1,    -1,
     476,    -1,    -1,    -1,   480,    -1,    -1,   483,    -1,    -1,
     486,    -1,   488,    -1,   490,    -1,   492,   493,    -1,    -1,
      -1,    -1,    -1,    -1,   500,   501,    -1,   503,    -1,    -1,
     506,    -1,    -1,   509,    -1,   511,    -1,    -1,    -1,   515,
      -1,   517,   518,   519,   520,   521,   522,    -1,    -1,   525,
     526,   527,   528,    -1,   530,   531,    -1,   533,    -1,   535,
     536,   537,   538,    -1,    -1,   541,   542,    -1,   544,   545,
     546,   547,    -1,    -1,    -1,    -1,    -1,   553,   554,   555,
      -1,    -1,    -1,    -1,   560,   561,   562,    -1,   564,   565,
      -1,   567,   568,    -1,    -1,    -1,    -1,    -1,   574,    -1,
      -1,   577,    -1,    -1,    -1,   581,   582,   583,    -1,    -1,
      -1,    -1,    -1,    -1,   590,    -1,    -1,   593,    -1,    -1,
      -1,   597,   598,   599,   600,   601,   602,    -1,    -1,   605,
      -1,    -1,    -1,   609,    -1,    -1,   612,    -1,   614,    -1,
       5,   617,     7,     8,     9,    10,    11,    -1,    -1,    14,
      -1,    -1,    -1,    18,    -1,    -1,    -1,    -1,    23,    24,
      25,    26,    27,    28,    -1,    -1,    31,    -1,    -1,    -1,
      35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,
      -1,    46,    -1,    -1,    -1,    -1,    -1,    52,    53,    -1,
      55,    56,    -1,    58,    -1,    -1,    -1,    -1,    -1,    64,
      65,    66,    67,    68,    69,    70,    -1,    72,    73,    -1,
      -1,    -1,    -1,    -1,    -1,    80,    -1,    82,    -1,    84,
      85,    86,    87,    -1,    89,    90,    -1,    92,    93,    94,
      -1,    96,    -1,    98,    -1,    -1,   101,    -1,    -1,   104,
      -1,    -1,    -1,   108,    -1,    -1,    -1,   112,   113,   114,
      -1,    -1,   117,    -1,    -1,    -1,    -1,   122,    -1,    -1,
      -1,    -1,    -1,   128,    -1,   130,    -1,    -1,    -1,   134,
      -1,   136,   137,   138,   139,    -1,    -1,    -1,    -1,    -1,
      -1,   146,   147,   148,    -1,    -1,    -1,   152,    -1,    -1,
     155,    -1,   157,   158,   159,    -1,    -1,   162,   163,    -1,
     165,   166,   167,   168,    -1,    -1,    -1,    -1,   173,   174,
     175,    -1,    -1,   178,   179,   180,   181,   182,   183,    -1,
      -1,    -1,    -1,    -1,    -1,   190,    -1,   192,    -1,   194,
      -1,   196,   197,   198,   199,   200,   201,    -1,   203,    -1,
      -1,    -1,    -1,   208,   209,    -1,    -1,    -1,    -1,    -1,
     215,    -1,    -1,    -1,   219,   220,   221,   222,   223,    -1,
     225,   226,   227,    -1,   229,    -1,   231,    -1,    -1,    -1,
      -1,   236,    -1,    -1,    -1,    -1,   241,    -1,   243,   244,
      -1,   246,   247,   248,    -1,    -1,   251,    -1,    -1,    -1,
     255,   256,    -1,    -1,   259,   260,    -1,   262,   263,    -1,
      -1,    -1,    -1,    -1,   269,   270,    -1,   272,    -1,   274,
      -1,   276,   277,    -1,    -1,    -1,    -1,   282,    -1,    -1,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,    -1,   301,   302,   303,    -1,
     305,   306,   307,   308,    -1,   310,   311,    -1,    -1,    -1,
      -1,   316,   317,   318,   319,   320,   321,    -1,    -1,   324,
     325,    -1,   327,    -1,   329,    -1,   331,   332,   333,   334,
     335,   336,   337,   338,   339,    -1,    -1,   342,   343,    -1,
      -1,   346,   347,   348,   349,    -1,    -1,    -1,    -1,   354,
      -1,    -1,    -1,    -1,   359,   360,   361,    -1,   363,   364,
     365,   366,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   379,   380,    -1,    -1,    -1,    -1,
     385,   386,   387,    -1,   389,   390,   391,   392,   393,   394,
     395,    -1,    -1,    -1,    -1,   400,   401,    -1,   403,    -1,
     405,   406,   407,   408,   409,    -1,   411,   412,   413,    -1,
      -1,   416,    -1,    -1,    -1,   420,   421,   422,   423,   424,
      -1,    -1,   427,   428,   429,   430,   431,    -1,   433,    -1,
      -1,   436,    -1,   438,   439,    -1,   441,    -1,    -1,    -1,
     445,    -1,    -1,   448,   449,   450,    -1,    -1,    -1,   454,
     455,   456,   457,   458,   459,    -1,   461,   462,    -1,   464,
      -1,    -1,    -1,    -1,   469,   470,   471,    -1,    -1,    -1,
      -1,   476,    -1,    -1,    -1,   480,    -1,    -1,   483,    -1,
      -1,   486,    -1,   488,    -1,   490,    -1,   492,   493,    -1,
      -1,    -1,    -1,    -1,    -1,   500,   501,    -1,   503,    -1,
      -1,   506,    -1,    -1,   509,    -1,   511,    -1,    -1,    -1,
     515,    -1,   517,   518,   519,   520,   521,   522,    -1,    -1,
     525,   526,   527,   528,    -1,   530,   531,    -1,   533,    -1,
     535,   536,   537,   538,    -1,    -1,   541,   542,    -1,   544,
     545,   546,   547,    -1,    -1,    -1,    -1,    -1,   553,   554,
     555,    -1,    -1,    -1,    -1,   560,   561,   562,    -1,   564,
     565,    -1,   567,   568,    -1,    -1,    -1,    -1,    -1,   574,
      -1,    -1,   577,    -1,    -1,    -1,   581,   582,   583,    -1,
      -1,    -1,    -1,    -1,    -1,   590,    -1,    -1,   593,    -1,
      -1,    -1,   597,   598,   599,   600,   601,   602,    -1,    -1,
     605,    -1,    -1,    -1,   609,    -1,    -1,   612,    -1,   614,
      -1,     5,   617,     7,     8,     9,    10,    11,    -1,    -1,
      14,    -1,    -1,    -1,    18,    -1,    -1,    -1,    -1,    23,
      24,    25,    26,    27,    28,    -1,    -1,    31,    -1,    -1,
      -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    -1,    -1,    -1,    -1,    -1,    52,    53,
      -1,    55,    56,    -1,    58,    -1,    -1,    -1,    -1,    -1,
      64,    65,    66,    67,    68,    69,    70,    -1,    72,    73,
      -1,    -1,    -1,    -1,    -1,    -1,    80,    -1,    82,    -1,
      84,    85,    86,    87,    -1,    89,    90,    -1,    92,    93,
      94,    -1,    96,    -1,    98,    -1,    -1,   101,    -1,    -1,
     104,    -1,    -1,    -1,   108,    -1,    -1,    -1,   112,   113,
     114,    -1,    -1,   117,    -1,    -1,    -1,    -1,   122,    -1,
      -1,    -1,    -1,    -1,   128,    -1,   130,    -1,    -1,    -1,
     134,    -1,   136,   137,   138,   139,    -1,    -1,    -1,    -1,
      -1,    -1,   146,   147,   148,    -1,    -1,    -1,   152,    -1,
      -1,   155,    -1,   157,   158,   159,    -1,    -1,   162,   163,
      -1,   165,   166,   167,   168,    -1,    -1,    -1,    -1,   173,
     174,   175,    -1,    -1,   178,   179,   180,   181,   182,   183,
      -1,    -1,    -1,    -1,    -1,    -1,   190,    -1,   192,    -1,
     194,    -1,   196,   197,   198,   199,   200,   201,    -1,   203,
      -1,    -1,    -1,    -1,   208,   209,    -1,    -1,    -1,    -1,
      -1,   215,    -1,    -1,    -1,   219,   220,   221,   222,   223,
      -1,   225,   226,   227,    -1,   229,    -1,   231,    -1,    -1,
      -1,    -1,   236,    -1,    -1,    -1,    -1,   241,    -1,   243,
     244,    -1,   246,   247,   248,    -1,    -1,   251,    -1,    -1,
      -1,   255,   256,    -1,    -1,   259,   260,    -1,   262,   263,
      -1,    -1,    -1,    -1,    -1,   269,   270,    -1,   272,    -1,
     274,    -1,   276,   277,    -1,    -1,    -1,    -1,   282,    -1,
      -1,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,    -1,   301,   302,   303,
      -1,   305,   306,   307,   308,    -1,   310,   311,    -1,    -1,
      -1,    -1,   316,   317,   318,   319,   320,   321,    -1,    -1,
     324,   325,    -1,   327,    -1,   329,    -1,   331,   332,   333,
     334,   335,   336,   337,   338,   339,    -1,    -1,   342,   343,
      -1,    -1,   346,   347,   348,   349,    -1,    -1,    -1,    -1,
     354,    -1,    -1,    -1,    -1,   359,   360,   361,    -1,   363,
     364,   365,   366,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   379,   380,    -1,    -1,    -1,
      -1,   385,   386,   387,    -1,   389,   390,   391,   392,   393,
     394,   395,    -1,    -1,    -1,    -1,   400,   401,    -1,   403,
      -1,   405,   406,   407,   408,   409,    -1,   411,   412,   413,
      -1,    -1,   416,    -1,    -1,    -1,   420,   421,   422,   423,
     424,    -1,    -1,   427,   428,   429,   430,   431,    -1,   433,
      -1,    -1,   436,    -1,   438,   439,    -1,   441,    -1,    -1,
      -1,   445,    -1,    -1,   448,   449,   450,    -1,    -1,    -1,
     454,   455,   456,   457,   458,   459,    -1,   461,   462,    -1,
     464,    -1,    -1,    -1,    -1,   469,   470,   471,    -1,    -1,
      -1,    -1,   476,    -1,    -1,    -1,   480,    -1,    -1,   483,
      -1,    -1,   486,    -1,   488,    -1,   490,    -1,   492,   493,
      -1,    -1,    -1,    -1,    -1,    -1,   500,   501,    -1,   503,
      -1,    -1,   506,    -1,    -1,   509,    -1,   511,    -1,    -1,
      -1,   515,    -1,   517,   518,   519,   520,   521,   522,    -1,
      -1,   525,   526,   527,   528,    -1,   530,   531,    -1,   533,
      -1,   535,   536,   537,   538,    -1,    -1,   541,   542,    -1,
     544,   545,   546,   547,    -1,    -1,    -1,    -1,    -1,   553,
     554,   555,    -1,    -1,    -1,    -1,   560,   561,   562,    -1,
     564,   565,    -1,   567,   568,    -1,    -1,    -1,    -1,    -1,
     574,    -1,    -1,   577,    -1,    -1,    -1,   581,   582,   583,
      -1,    -1,    -1,    -1,    -1,    -1,   590,    -1,    -1,   593,
      -1,    -1,    -1,   597,   598,   599,   600,   601,   602,    -1,
      -1,   605,    -1,    -1,    -1,   609,    -1,    -1,   612,    -1,
     614,    -1,     5,   617,     7,     8,     9,    10,    11,    -1,
      -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    -1,    -1,
      23,    24,    25,    26,    27,    28,    -1,    -1,    -1,    -1,
      -1,    -1,    35,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    -1,    -1,    -1,    -1,    -1,    52,
      -1,    -1,    55,    56,    -1,    58,    -1,    -1,    -1,    -1,
      -1,    64,    65,    66,    67,    -1,    69,    70,    -1,    72,
      73,    -1,    -1,    -1,    -1,    -1,    -1,    80,    -1,    82,
      -1,    84,    85,    86,    87,    -1,    89,    90,    -1,    92,
      93,    94,    -1,    96,    -1,    98,    -1,    -1,   101,    -1,
      -1,   104,    -1,    -1,    -1,   108,    -1,    -1,    -1,   112,
     113,   114,    -1,    -1,   117,    -1,    -1,    -1,    -1,   122,
      -1,    -1,    -1,    -1,    -1,   128,    -1,   130,    -1,    -1,
      -1,   134,    -1,   136,   137,   138,   139,    -1,    -1,    -1,
      -1,    -1,    -1,   146,   147,   148,    -1,    -1,    -1,   152,
      -1,    -1,   155,    -1,   157,   158,   159,    -1,    -1,   162,
     163,    -1,   165,   166,   167,   168,    -1,    -1,    -1,    -1,
     173,   174,   175,    -1,    -1,   178,   179,    -1,   181,   182,
     183,    -1,    -1,    -1,    -1,    -1,    -1,   190,    -1,   192,
      -1,   194,    -1,   196,   197,   198,   199,   200,   201,    -1,
     203,    -1,    -1,    -1,    -1,   208,   209,    -1,    -1,    -1,
      -1,    -1,   215,    -1,    -1,    -1,   219,   220,   221,   222,
      -1,    -1,   225,   226,   227,    -1,   229,    -1,   231,    -1,
      -1,    -1,    -1,   236,    -1,    -1,    -1,    -1,   241,    -1,
     243,   244,    -1,   246,   247,    -1,    -1,    -1,   251,    -1,
      -1,    -1,   255,   256,    -1,    -1,   259,    -1,    -1,   262,
     263,    -1,    -1,    -1,    -1,    -1,   269,   270,    -1,   272,
      -1,   274,    -1,   276,   277,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,    -1,   301,   302,
     303,    -1,   305,   306,   307,   308,    -1,   310,   311,    -1,
      -1,    -1,    -1,   316,   317,   318,   319,   320,   321,    -1,
      -1,   324,   325,    -1,   327,    -1,   329,    -1,   331,   332,
     333,   334,   335,   336,   337,   338,   339,    -1,    -1,   342,
     343,    -1,    -1,   346,   347,   348,   349,    -1,    -1,    -1,
      -1,   354,    -1,    -1,    -1,    -1,   359,   360,   361,    -1,
     363,   364,   365,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   379,   380,    -1,    -1,
      -1,    -1,   385,   386,   387,    -1,   389,   390,   391,   392,
     393,   394,   395,    -1,    -1,    -1,    -1,   400,   401,    -1,
     403,    -1,   405,   406,   407,   408,   409,    -1,   411,   412,
     413,    -1,    -1,   416,    -1,    -1,    -1,   420,   421,   422,
     423,   424,    -1,    -1,   427,   428,   429,   430,   431,    -1,
     433,    -1,    -1,   436,    -1,   438,    -1,    -1,   441,    -1,
      -1,    -1,   445,    -1,    -1,   448,   449,    -1,    -1,    -1,
      -1,   454,   455,   456,   457,   458,   459,    -1,   461,   462,
      -1,   464,    -1,    -1,    -1,    -1,   469,   470,   471,    -1,
      -1,    -1,    -1,   476,    -1,    -1,    -1,   480,    -1,    -1,
     483,    -1,    -1,   486,    -1,   488,    -1,   490,    -1,   492,
     493,    -1,    -1,    -1,    -1,    -1,    -1,   500,   501,    -1,
     503,    -1,    -1,   506,    -1,    -1,   509,    -1,   511,    -1,
      -1,    -1,   515,    -1,   517,   518,   519,   520,   521,   522,
      -1,    -1,   525,   526,   527,   528,    -1,   530,   531,    -1,
     533,    -1,   535,   536,   537,   538,    -1,    -1,   541,   542,
      -1,   544,   545,   546,   547,    -1,    -1,    -1,    -1,    -1,
     553,   554,   555,    -1,    -1,    -1,    -1,   560,   561,   562,
      -1,   564,   565,    -1,   567,   568,    -1,    -1,    -1,    -1,
      -1,   574,    -1,    -1,   577,    -1,    -1,    -1,   581,   582,
     583,    -1,    -1,    -1,    -1,    -1,    -1,   590,    -1,    -1,
     593,    -1,    -1,    -1,   597,   598,   599,   600,   601,   602,
      -1,    -1,    -1,    -1,    -1,    -1,   609,    -1,    -1,   612,
      -1,   614,    -1,    -1,   617
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const yytype_uint16 yystos[] =
{
       0,    13,    15,    31,    35,    49,    50,    57,    62,    63,
      83,   102,   123,   131,   132,   133,   143,   144,   156,   170,
     186,   202,   207,   211,   235,   237,   253,   271,   275,   367,
     384,   388,   399,   410,   432,   435,   437,   440,   443,   444,
     451,   453,   460,   466,   474,   479,   481,   484,   510,   514,
     559,   571,   575,   578,   584,   613,   619,   629,   640,   643,
     644,   645,   646,   647,   649,   654,   656,   665,   695,   723,
     730,   839,   928,  1001,  1044,  1048,  1058,  1061,  1066,  1079,
    1080,  1085,  1088,  1093,  1100,  1112,  1113,  1278,  1280,  1290,
    1293,  1318,  1326,  1337,  1344,  1358,  1361,  1364,  1374,  1380,
    1384,  1389,  1390,  1440,  1467,  1473,  1475,  1482,  1484,  1512,
    1518,  1519,  1520,  1521,  1574,  1582,  1583,  1584,    11,   110,
     128,   194,   276,   404,   472,   531,  1036,  1037,  1543,  1544,
    1545,  1548,   272,   355,  1087,  1513,   540,  1431,   228,     5,
       7,     8,     9,    10,    11,    14,    18,    21,    23,    24,
      25,    26,    27,    28,    29,    31,    35,    39,    42,    43,
      44,    46,    48,    49,    52,    55,    56,    58,    59,    61,
      62,    64,    65,    66,    67,    68,    69,    70,    72,    73,
      74,    75,    76,    77,    78,    80,    81,    82,    83,    84,
      85,    86,    87,    89,    90,    92,    93,    94,    95,    96,
      98,   101,   104,   108,   112,   113,   114,   117,   122,   123,
     128,   130,   134,   136,   137,   138,   139,   143,   146,   147,
     148,   152,   154,   155,   157,   158,   159,   162,   163,   165,
     166,   167,   168,   169,   170,   173,   174,   175,   178,   179,
     181,   182,   183,   186,   190,   192,   194,   196,   197,   198,
     199,   200,   201,   203,   207,   208,   209,   211,   214,   215,
     219,   220,   221,   222,   225,   226,   227,   229,   231,   236,
     237,   241,   243,   244,   246,   247,   251,   254,   255,   256,
     259,   262,   263,   269,   270,   272,   274,   276,   277,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   301,   302,   303,   305,   306,   307,
     308,   310,   311,   316,   317,   318,   319,   320,   321,   324,
     325,   327,   329,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   342,   343,   346,   347,   348,   349,   353,   354,
     359,   360,   361,   363,   364,   365,   366,   368,   378,   379,
     380,   383,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   399,   400,   401,   403,   405,   406,
     407,   408,   409,   411,   412,   413,   416,   420,   421,   422,
     423,   424,   427,   428,   429,   430,   431,   433,   434,   436,
     437,   438,   441,   443,   445,   446,   448,   449,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   464,   465,
     469,   470,   471,   472,   476,   480,   482,   483,   484,   485,
     486,   488,   489,   490,   491,   492,   493,   500,   501,   503,
     506,   509,   510,   511,   514,   515,   517,   518,   519,   520,
     521,   522,   525,   526,   527,   528,   530,   531,   533,   535,
     536,   537,   538,   541,   542,   544,   545,   546,   547,   553,
     554,   555,   559,   560,   561,   562,   564,   565,   567,   568,
     570,   571,   574,   577,   579,   581,   582,   583,   590,   593,
     597,   598,   599,   600,   601,   602,   609,   610,   612,   613,
     614,   617,   689,  1430,  1434,  1438,  1439,   301,   530,   534,
    1469,  1469,   609,  1514,   110,   193,   276,   472,   494,   531,
     537,   573,   581,   671,   672,   890,   891,   892,   979,   980,
     981,  1327,  1279,   110,   167,   194,   228,   276,   404,   472,
     531,   537,   556,   581,   598,  1289,  1434,  1087,   688,   637,
    1427,  1429,  1434,   655,  1291,   393,   491,  1385,   113,   228,
     614,  1395,  1469,  1087,   629,   840,  1434,  1381,   460,   581,
    1469,  1087,  1294,  1375,   497,   720,   724,   725,  1434,   688,
    1514,  1434,  1116,  1118,  1119,  1441,  1345,   724,   663,   664,
    1431,    12,   484,   553,    12,   484,   534,  1339,   393,   491,
    1474,  1319,  1434,    31,    83,   154,   399,   421,   453,   510,
    1576,   466,   629,  1114,     0,   156,   641,   399,   174,   387,
    1362,  1427,  1434,   160,  1012,  1434,   160,   689,   204,   689,
     264,  1431,  1434,  1436,   785,   786,   789,   812,  1434,   534,
     224,   365,  1038,  1039,  1040,   167,  1007,  1543,  1469,  1514,
    1094,   696,   637,   663,  1059,  1081,    17,  1515,   223,   893,
     204,  1436,   787,   812,   688,   374,  1540,  1544,  1545,  1546,
    1547,  1548,   534,   891,   228,   228,   228,   224,   283,   413,
    1335,  1336,     7,    21,    28,    34,    36,    37,    38,    40,
      53,    54,    59,    60,    69,    72,    74,    75,    76,    77,
      78,    95,    99,   100,   105,   106,   109,   110,   115,   116,
     117,   122,   124,   127,   171,   176,   177,   184,   198,   200,
     205,   212,   219,   223,   235,   238,   256,   261,   269,   280,
     304,   309,   320,   324,   326,   330,   331,   332,   333,   334,
     341,   350,   351,   352,   356,   357,   361,   382,   389,   394,
     395,   397,   411,   439,   440,   452,   458,   464,   512,   513,
     519,   523,   524,   529,   540,   544,   545,   546,   547,   557,
     558,   559,   563,   566,   581,   586,   587,   588,   589,   594,
     596,   602,   617,   622,   623,   628,   629,   632,   633,   636,
     637,  1135,  1136,  1137,  1138,  1142,  1149,  1150,  1151,  1152,
    1153,  1154,  1162,  1166,  1177,  1414,  1416,  1418,  1419,  1423,
    1425,  1430,  1434,   223,  1288,  1288,  1288,  1434,   204,  1288,
    1288,   812,  1288,   688,  1288,  1469,   650,  1365,    12,    13,
     102,   131,   144,   167,   170,   181,   202,   228,   235,   275,
     405,   409,   425,   433,   441,   466,   479,   480,   525,   556,
     578,   580,  1485,  1487,  1489,  1490,  1434,   366,    68,   417,
     637,  1436,   129,   213,   283,  1296,  1434,  1431,   208,   490,
    1386,   239,  1391,  1468,  1469,   929,  1129,    47,   841,   191,
      34,   301,  1350,  1382,  1434,   688,  1089,  1469,   129,   283,
    1297,  1325,   301,   412,   484,  1376,  1377,   590,   721,   474,
     726,    12,   409,  1483,  1487,   551,  1515,  1117,    12,   140,
     213,   499,   500,   501,   502,   503,   504,   516,  1123,  1124,
    1125,  1539,    59,    60,   127,   201,   272,   337,   389,   471,
     553,   636,   953,  1434,  1442,  1454,  1458,  1459,    12,    24,
      35,    59,    67,    72,    98,   100,   102,   111,   158,   163,
     166,   192,   194,   201,   203,   227,   228,   229,   250,   272,
     301,   366,   392,   403,   404,   407,   408,   428,   471,   484,
     515,   533,   534,   582,   601,   953,   978,  1346,  1350,  1351,
    1353,  1361,  1455,   726,   510,   514,   485,   663,   417,   606,
    1049,  1050,  1051,   485,   663,  1338,  1434,  1431,  1469,  1325,
      36,   212,   540,  1415,  1432,  1575,  1575,  1575,  1575,  1575,
    1118,  1114,   630,   635,  1434,  1360,  1359,   318,   538,   565,
    1003,   579,   106,  1436,  1437,  1005,   791,   813,  1434,  1004,
     368,     6,    57,   144,   351,   416,   418,   814,  1427,  1040,
     689,   505,  1549,  1550,  1006,  1067,  1095,  1096,  1097,  1098,
    1427,   629,   697,  1434,   551,  1284,  1285,  1427,  1284,    56,
     353,   353,   432,  1516,   350,   351,  1141,  1434,   790,   813,
     188,     6,  1437,  1500,  1503,   440,    10,   404,   556,   675,
    1129,  1542,  1550,  1558,  1562,  1563,  1569,   675,  1129,  1541,
    1550,  1558,  1563,  1569,  1543,  1548,   893,  1434,  1434,  1434,
     191,  1328,  1332,  1333,  1434,  1335,   629,   629,   629,  1149,
     629,   629,   629,  1135,  1180,   629,   629,   629,   629,   629,
     629,   629,   629,   629,   629,   629,   629,   629,   629,  1134,
    1134,   629,  1133,   629,   629,   629,   566,   629,  1414,   629,
     629,   629,   629,   629,   629,   629,   629,   629,   629,   629,
    1135,   629,   629,   629,   629,  1178,  1179,  1423,  1434,   629,
     629,   629,   629,   629,   629,   629,   629,   629,  1135,  1133,
     629,   629,   629,   629,   629,   629,   629,   629,   629,   629,
     629,   629,   629,   629,   629,   629,  1133,   629,  1414,   629,
     629,   629,  1414,   629,   629,    36,   212,   540,   629,  1134,
    1133,  1133,   629,   629,   629,   629,   629,  1149,  1149,  1149,
    1135,  1534,  1535,  1434,  1167,  1434,    16,    17,   371,   374,
     615,  1139,  1140,   160,   161,   195,   206,   245,   257,   284,
     344,  1143,    32,   141,   242,   265,   330,   426,   477,   478,
     492,   620,   621,   622,   623,   624,   625,   626,   627,  1141,
    1149,    71,   373,   631,  1432,   629,   637,   171,  1434,   689,
    1434,   362,   813,   689,  1436,   823,  1351,   689,  1437,  1499,
    1283,  1288,   585,   651,    34,    67,   134,   158,   162,   196,
     215,   229,   277,   301,   403,   412,   427,   445,   484,   486,
     511,   533,   582,  1366,  1370,  1371,  1469,   403,  1488,   455,
     455,   531,   537,   581,   598,   369,  1492,   530,   362,  1494,
      66,   484,  1491,   111,   598,  1493,   362,   631,    19,   160,
    1230,  1231,  1476,  1434,   224,  1035,   491,    89,   412,  1387,
      49,    87,   283,  1397,  1427,  1470,  1471,  1086,   630,  1135,
     267,   270,   414,   842,   844,   636,   648,  1431,   277,  1090,
    1437,  1091,  1092,  1427,  1062,   239,  1285,  1298,  1299,    49,
    1378,   631,  1432,    55,    65,    80,    92,    93,    94,   108,
     319,   336,   462,   518,   536,   727,   729,  1488,   362,   362,
     460,  1517,  1516,   572,  1522,  1523,   624,  1127,  1128,  1129,
    1125,   474,   637,    34,   127,   160,   475,   954,   955,  1309,
    1436,   189,  1309,  1444,   636,  1436,    34,   127,   957,   958,
    1436,   637,  1445,  1443,  1309,   485,   166,   265,   604,  1357,
     629,   110,   167,   194,   404,   534,   556,   598,  1357,    12,
     902,  1436,   266,  1249,  1251,   191,   242,  1352,  1354,    70,
     511,   189,   511,   530,    70,   511,    12,    42,    96,   101,
     244,   317,   380,   493,   527,  1340,  1341,  1342,   663,   215,
     511,   664,   511,  1249,  1357,  1354,   277,   157,    73,   406,
     530,   555,   189,   511,   593,  1052,  1053,  1052,  1052,  1052,
     364,   611,    90,   631,  1052,  1052,  1285,  1035,   631,   363,
    1578,   526,  1579,   249,   448,  1577,   630,  1523,  1525,  1527,
    1528,   156,   642,  1112,  1363,  1415,  1434,   127,   888,   889,
     899,   900,   962,   113,  1134,   636,   690,     6,   792,   690,
     629,   112,   809,   809,   809,     4,  1002,  1008,   465,   598,
    1550,  1068,  1069,  1285,   242,   631,   388,  1106,  1108,  1109,
     698,   699,  1135,   657,   174,   413,   631,  1060,    58,   174,
     178,   189,   316,   413,  1082,  1083,  1084,    56,   432,   171,
     670,   792,   113,   809,   221,   631,  1129,  1129,  1129,   167,
     194,   194,  1550,  1427,   982,   983,   982,   982,  1286,  1287,
    1427,  1428,  1434,   631,  1330,   637,  1334,  1135,  1135,    12,
     140,  1172,  1232,  1172,  1172,  1172,   603,  1182,  1135,  1135,
    1177,  1177,  1135,  1135,  1135,  1135,  1147,  1148,  1135,  1135,
    1135,  1135,   140,  1172,  1232,   630,   124,   184,   212,   280,
     357,   563,   630,  1258,  1261,  1262,   630,  1135,  1135,  1135,
    1135,  1423,  1534,   118,   119,   120,   121,   122,   216,   217,
     218,   219,   320,   322,   323,   324,   331,   411,   463,   464,
     602,   616,   617,  1227,  1228,  1177,   114,   117,   544,   547,
    1229,   140,  1169,  1135,  1135,  1135,  1135,  1227,  1177,  1135,
    1177,  1179,     9,   631,   637,   140,  1172,  1135,  1135,   140,
    1172,  1135,  1135,  1177,  1177,  1177,  1135,  1135,  1135,  1177,
    1138,  1135,  1135,  1135,  1135,  1135,  1135,  1172,  1172,  1135,
    1135,   140,  1172,  1135,  1228,  1228,  1135,    45,   258,   552,
    1135,  1135,   630,  1424,  1425,  1434,  1172,  1172,  1135,  1135,
     630,   631,   630,   466,   629,  1531,  1532,  1135,   636,  1168,
    1436,   637,  1135,  1135,  1135,  1137,   177,   356,   558,   574,
    1141,    12,    18,  1137,  1144,  1138,  1138,   629,  1149,  1138,
    1138,  1138,  1138,   265,  1138,  1138,   238,  1138,   238,  1138,
    1138,  1138,  1138,  1138,    32,   242,   265,   426,  1436,  1149,
    1135,  1155,  1434,   637,  1427,   823,   354,   600,   824,   825,
     158,   631,  1284,  1281,   636,   652,   653,   277,   277,   277,
     277,    49,   277,   663,   277,   631,  1367,   530,   629,  1504,
    1437,  1504,  1504,  1504,   194,   404,   534,  1486,  1490,  1434,
     182,   347,  1434,  1477,  1478,  1298,  1431,   581,  1135,  1388,
    1101,   272,  1396,  1231,   631,  1284,  1130,    73,   629,   848,
     849,   848,   849,   387,   851,   209,   252,  1436,    30,   551,
    1383,   631,   551,   631,   551,  1284,  1299,  1295,   663,  1377,
     631,   160,   631,  1437,   194,   404,  1486,  1434,    12,   140,
    1530,   631,  1120,  1135,  1421,  1434,  1434,    71,   960,  1135,
    1437,   361,   389,   540,  1465,   246,   417,  1460,  1461,  1462,
    1463,   201,   272,   471,  1456,  1309,  1434,   553,  1446,  1457,
    1459,   631,  1448,    12,    34,   127,   362,  1135,  1466,   511,
     242,  1355,  1431,  1135,   624,   893,   689,   689,   689,  1427,
     689,  1427,   277,   335,   511,  1349,  1349,   280,   357,   456,
     563,  1252,  1253,  1416,  1434,  1357,  1434,   689,  1357,  1437,
    1352,   689,  1357,   243,   528,   179,   189,  1343,   631,   166,
     511,  1352,  1427,  1354,  1352,  1352,  1135,  1357,  1357,  1047,
     431,   506,  1054,  1055,  1046,  1045,   488,  1051,   466,   629,
     633,  1183,  1184,  1185,  1186,  1187,  1196,  1197,  1211,  1415,
     391,  1580,   372,  1245,  1251,  1529,   889,    71,   953,   136,
    1436,    81,    95,   254,   328,   353,   415,   505,   692,   694,
     422,   567,   810,   811,   231,   806,   807,   808,   815,   823,
     825,   110,   214,   378,   389,   396,   489,   581,   673,   674,
    1431,    25,   308,   800,   801,   802,   815,   816,   817,   823,
     825,   793,   794,   800,     6,    13,    15,    26,    27,    57,
      62,    63,    69,    81,    89,    99,   113,   130,   137,   138,
     144,   152,   158,   187,   226,   228,   236,   251,   307,   325,
     329,   367,   372,   379,   381,   388,   389,   420,   434,   435,
     436,   437,   457,   515,   531,   535,   554,   559,   572,   836,
     895,   897,   899,   900,  1013,  1017,  1019,  1022,  1028,  1029,
    1030,  1241,  1430,   362,   683,  1009,   128,   241,  1427,   631,
     390,  1070,   127,  1099,  1434,  1097,  1427,   838,  1108,   228,
     252,   976,  1110,   630,   631,   225,   285,   286,   287,   288,
     289,   290,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   302,   303,   429,   430,   658,   659,   662,  1285,   579,
    1083,   887,   888,    81,   348,   423,   568,   803,   804,   805,
     815,   819,   820,   821,   822,   823,   825,   610,   584,   788,
      47,   597,   606,  1501,  1503,   194,   689,   689,   893,   689,
    1434,   666,   561,   585,   990,   362,   362,   362,   631,  1331,
    1329,   637,  1334,  1333,   191,   624,  1434,   631,   630,  1172,
     630,  1173,   630,   630,   630,  1135,   150,   603,  1181,    19,
     630,   585,   630,   630,   630,   631,   630,   631,   630,   631,
     631,   631,   631,   585,   631,  1163,   630,   624,   630,   631,
     631,   630,   630,   630,   630,   191,   630,   631,  1165,   630,
     631,   631,   631,   623,   630,   631,   630,   630,   629,  1423,
    1434,  1172,   630,   630,   630,  1172,   630,   631,   630,   630,
     630,   630,   630,   630,   631,   630,   242,   630,   631,   631,
     631,   631,   630,   630,   630,   631,   191,   631,  1172,   630,
     630,   631,   631,   631,   630,   191,  1135,   191,  1135,   191,
    1135,   191,   630,   631,   630,   630,   630,   630,   631,   630,
    1177,  1201,  1202,  1203,   466,   629,  1115,  1526,  1527,   572,
    1536,   634,  1456,   475,  1434,   177,   356,   558,   574,   629,
      17,  1135,  1534,   165,  1237,  1138,  1135,  1135,  1138,   629,
    1149,  1138,  1129,  1159,  1160,  1161,   629,   637,  1434,  1282,
     824,  1309,  1310,  1437,    51,   447,  1041,  1284,  1436,   631,
     663,  1371,  1284,  1372,  1434,  1505,  1506,   551,   624,  1427,
    1434,  1498,  1498,  1498,   160,   182,   195,   206,   255,   257,
     284,   347,   401,  1479,  1481,   604,  1233,  1292,  1437,  1102,
    1103,  1104,  1105,  1427,   230,   283,   417,   611,  1472,  1471,
     629,  1129,  1258,   522,   852,   843,   629,  1135,  1431,  1437,
    1437,  1092,  1427,   174,   413,   583,  1063,  1064,  1065,   466,
     474,   589,   590,   629,   883,  1300,  1303,    12,  1379,   729,
     117,   544,   547,   728,  1166,  1418,  1423,   202,   191,  1498,
    1498,  1498,  1524,  1128,   191,   239,  1121,  1122,  1244,  1245,
    1273,  1130,  1130,   637,   127,   959,   961,  1436,  1309,   629,
     629,   263,   364,   611,   631,   631,   637,   637,   637,  1459,
    1135,  1460,  1447,  1309,  1449,  1450,  1431,   191,  1356,   630,
    1434,   169,   456,   360,   631,  1357,   412,  1249,  1342,  1355,
    1357,  1352,  1427,  1357,  1357,   577,  1056,   631,  1056,  1210,
    1434,   103,   232,   249,   261,   340,   452,   516,  1195,   474,
     631,  1427,  1210,   631,   189,  1581,    47,  1249,  1310,  1310,
     338,  1431,   505,   505,   505,   505,   505,   465,  1431,  1431,
    1310,   631,   808,  1431,  1431,  1431,  1431,   124,   184,   212,
     280,   357,   563,  1257,  1431,  1431,   630,   631,  1310,  1310,
     631,   802,   795,   796,   815,   816,   817,    79,    91,   388,
     911,   918,   919,   974,   976,   980,   981,  1034,  1034,   388,
    1310,  1310,  1034,  1310,   388,   388,  1310,  1310,   551,   136,
    1310,   250,   531,   188,   388,   402,   976,  1034,   250,  1310,
     531,   136,  1310,  1310,  1310,  1310,  1034,   388,    47,  1310,
    1310,   838,  1310,   388,   386,    19,   160,   551,  1043,   388,
     388,  1310,   139,   317,  1434,  1310,  1310,   388,  1310,   895,
     631,   835,   836,  1017,   629,   637,   910,   920,  1426,  1434,
    1309,    85,   461,   435,  1010,  1551,  1069,   189,  1107,   629,
    1135,   160,   160,   160,   160,   160,   160,   160,   160,   160,
     160,   160,   160,   160,   160,   160,   160,   160,   160,   160,
     160,   631,  1310,  1310,  1310,  1310,   631,   805,  1436,   276,
     175,   797,   798,   799,   815,   816,   817,   818,   821,   822,
     823,   825,   389,   540,  1436,  1434,  1570,     8,    30,   783,
     689,   629,   449,   265,   629,   827,   894,   896,   897,    46,
     209,   459,   995,   995,  1427,  1427,  1427,  1287,  1434,   585,
    1233,  1434,  1184,   637,  1334,   238,  1135,   630,  1135,   543,
    1135,  1135,   154,    34,    60,   114,   117,   125,   142,   240,
     342,   482,   547,   576,  1174,   954,  1148,  1135,  1147,  1177,
    1135,  1135,   954,  1174,  1177,   630,   238,   238,  1135,  1135,
    1177,  1135,  1135,  1135,  1135,  1135,  1138,   630,   630,  1135,
    1135,  1135,  1135,  1135,  1135,  1177,   238,  1135,  1135,  1135,
     630,  1135,  1135,  1135,  1135,   191,  1135,   191,  1135,   191,
    1135,  1135,  1135,   630,  1537,  1538,  1539,  1202,  1115,   630,
    1530,  1436,  1135,  1534,  1137,   630,   631,   630,  1149,  1227,
    1227,    17,  1135,  1534,  1237,  1135,   630,   631,  1176,  1177,
    1434,   901,  1436,  1041,   653,  1368,   630,   631,  1500,   637,
     637,   551,   551,   551,  1480,  1234,  1250,  1251,  1300,   631,
    1106,  1108,   540,  1433,   611,   272,    87,   845,   846,   847,
    1434,   857,  1138,    47,   629,   859,   849,   845,   551,  1064,
     884,  1301,   629,  1306,  1311,  1306,   630,   883,  1302,  1420,
    1421,  1424,  1434,  1304,   160,   369,  1499,   191,   191,   191,
    1113,   145,  1184,  1274,   189,   275,  1126,  1273,  1250,  1122,
      19,  1131,  1431,  1434,   624,  1434,  1465,   540,   540,   417,
     438,   469,  1464,  1462,  1461,  1309,  1448,  1466,   631,  1452,
    1454,  1458,   124,   184,   280,   357,   563,  1259,  1347,   163,
     601,  1253,  1254,   169,  1253,  1253,   357,  1356,  1233,  1352,
     662,  1057,  1055,  1198,  1205,  1210,  1183,   249,   249,   375,
    1212,   249,   261,   452,  1212,  1196,  1183,  1321,  1322,  1424,
    1185,  1231,  1207,  1208,  1257,   321,  1246,   961,   955,   113,
     113,   128,   241,   220,   826,  1258,   808,   674,   826,   826,
     802,   631,   796,   998,  1426,  1087,    63,   188,   402,   573,
     917,   975,   998,   976,   977,   977,  1426,  1087,  1259,  1257,
    1426,  1257,    12,  1018,  1026,  1027,  1434,  1087,  1431,  1431,
     953,  1310,  1257,   252,  1026,   252,  1426,  1426,   901,  1310,
     182,   255,   353,   904,  1257,  1259,  1259,  1426,  1087,  1242,
    1243,  1424,   127,  1257,   127,  1257,  1263,   837,  1431,  1087,
    1427,  1087,  1087,    84,    86,   127,   148,   183,   380,   424,
     903,  1257,  1263,  1018,   898,     6,   144,  1030,   907,   908,
     909,   910,   911,  1434,     8,   182,  1042,   425,   916,   917,
     968,   921,   637,   127,   212,   280,   357,   563,  1260,  1261,
    1431,  1434,   351,   400,    23,   168,   677,   551,   137,   152,
     679,   629,  1552,    12,    73,  1071,   629,   402,  1223,  1224,
    1225,  1434,   629,  1257,  1431,  1431,  1259,  1431,  1257,  1431,
    1431,  1431,  1431,  1431,  1431,  1431,  1257,  1257,  1431,  1419,
    1431,  1257,   659,  1431,  1258,   826,   826,   805,   368,   204,
    1310,   631,   799,   540,    19,   585,  1502,   449,   629,   131,
     235,   578,   784,   676,  1564,   125,   240,   419,   517,   906,
    1427,   265,   388,   828,   834,   835,   907,   834,   631,   896,
     667,   668,   669,   637,  1184,  1244,  1334,  1233,  1135,   630,
    1135,   543,   629,   945,   946,   946,   946,   629,   940,   941,
     945,  1175,   946,   240,   946,   240,   630,   630,   630,    19,
    1145,   630,    19,   630,   630,   630,  1164,  1135,  1135,   630,
     630,  1171,  1245,   631,   631,   630,   631,   630,   242,  1156,
    1157,   630,   630,   630,   630,   631,   630,   630,  1135,   630,
     189,   630,   630,   631,   630,   631,   631,   630,  1135,   630,
    1135,   630,  1135,   630,   630,   630,  1127,  1539,   630,  1533,
     637,   999,   630,  1177,  1137,   630,   631,   630,  1130,  1161,
     630,   606,  1369,  1506,   606,  1509,   624,   624,  1500,  1500,
    1500,   629,  1135,   362,  1316,  1104,  1427,  1108,   224,  1111,
    1392,   630,   631,  1130,   844,   388,   860,   861,   630,  1437,
    1123,  1307,  1308,  1424,  1312,   631,   629,  1303,   630,   630,
     631,   637,  1522,   728,   191,  1499,  1499,  1499,  1233,  1233,
     146,   376,  1269,  1270,  1275,   578,   242,  1431,  1434,   637,
     630,   630,    82,   564,   417,  1466,  1451,  1453,  1249,  1254,
    1348,  1357,   631,   572,   630,  1526,  1206,   634,   249,  1196,
    1212,  1212,   249,   362,   362,   585,   631,  1320,  1309,  1221,
    1222,  1123,  1135,  1247,  1422,   796,  1020,   629,   252,   252,
     977,   998,   983,   998,   998,   144,   474,  1018,  1031,  1015,
     631,  1258,   955,  1431,   998,  1041,  1431,  1032,  1018,   631,
      20,   132,  1248,   841,  1018,  1023,  1018,   629,   630,   631,
    1434,  1427,    33,    34,    39,    41,    43,    44,    60,   114,
     117,   125,   142,   159,   183,   185,   198,   199,   240,   269,
     278,   279,   281,   313,   314,   315,   332,   333,   334,   339,
     342,   358,   359,   394,   395,   419,   470,   474,   487,   541,
     544,   547,   548,   549,   550,   591,   592,   617,   922,   930,
     933,   934,   935,   936,   937,   938,   939,  1434,   400,  1135,
    1135,   362,   683,   689,   362,    81,   684,  1434,  1553,    19,
      12,   629,  1072,  1018,   630,   631,   660,   661,  1257,   629,
    1434,   826,   799,  1431,   906,  1571,   362,   362,   700,   701,
     703,  1434,   491,  1427,   883,   630,   224,   440,   831,  1398,
     896,   629,   629,   629,  1434,  1233,   266,  1255,  1227,  1135,
     124,   280,   357,   563,    21,    34,    48,   570,   953,   963,
     964,   965,   357,   629,   941,   947,   114,   117,   125,   142,
     185,   240,   339,   342,   419,   547,   576,   934,   935,  1146,
    1174,   630,  1227,  1227,   468,  1170,  1135,  1135,  1177,    43,
     340,   630,   606,  1158,  1135,  1227,  1135,  1135,  1135,  1135,
     630,   630,   630,  1204,  1531,  1434,   630,  1177,  1131,   417,
     202,   442,  1507,  1507,  1507,   127,  1135,  1314,  1315,   147,
    1111,   259,  1398,   847,   630,   209,   252,   862,   630,   631,
    1127,   631,  1309,  1313,  1314,  1311,  1305,  1303,  1420,  1434,
    1499,  1250,   204,  1238,  1433,  1433,   636,  1271,  1272,  1436,
     476,   624,  1452,  1457,  1249,   662,  1530,  1231,  1186,  1183,
    1196,   249,   249,  1183,  1196,  1189,  1188,  1190,  1322,  1233,
    1315,  1219,  1220,  1127,   631,  1248,   387,   629,  1021,  1135,
     998,   983,   629,   982,   982,   127,   127,   920,  1082,  1027,
     960,   922,  1014,  1243,  1024,  1026,  1016,  1372,   909,   629,
     969,   945,   945,   946,   946,   940,   398,   931,   940,   940,
     965,    60,   591,   934,   936,   965,   965,    60,   592,   592,
     595,   940,   932,   946,   946,   946,   965,   945,   946,    26,
      71,    81,   127,   197,   356,   362,   402,   470,   573,   923,
     948,   949,   950,   967,  1141,  1430,   595,   945,   965,    34,
     945,   966,   945,   945,   946,   947,   637,  1227,   484,  1431,
     143,  1011,   630,   631,  1554,  1555,  1073,   227,   630,  1224,
     630,   631,   673,   491,   233,   242,   377,   704,   705,   706,
     707,  1129,   461,   630,   631,   702,  1431,   630,   630,   829,
      19,   886,   996,   997,  1434,   996,   996,   456,  1253,   630,
     630,   630,   630,   630,    34,    21,   570,   953,    34,   954,
     631,   357,   946,   940,    60,   946,   240,   965,   630,   630,
     630,  1415,   630,   630,   631,   630,   327,   254,   412,   630,
     630,   630,   630,   630,   630,   905,  1122,  1250,  1526,   630,
     275,   369,    64,   247,   349,   507,   520,   612,  1496,  1497,
     606,  1508,  1508,  1508,   630,   631,  1317,   239,   629,   850,
     629,   863,  1434,   861,   885,  1308,  1315,   630,  1525,    47,
     210,  1235,  1276,  1436,   631,   327,  1199,   362,  1192,  1196,
    1196,   362,  1194,  1135,  1135,   629,  1244,   187,   224,   584,
    1214,  1215,  1218,  1209,  1422,  1258,   860,   630,   629,   629,
     996,   629,   629,   117,   544,   547,   622,   623,  1417,  1418,
    1042,  1033,  1087,  1025,  1063,   630,   970,  1434,   304,   971,
     482,   576,   618,   942,   943,   944,   629,   942,   942,   965,
     595,   942,   629,   965,   942,   959,  1431,   352,   952,  1417,
      14,   578,   127,   252,    19,   950,   252,   356,  1309,   965,
     966,   965,   966,   942,   942,  1434,   678,   685,   686,  1434,
     466,   629,  1556,  1076,  1434,    12,   629,  1074,   661,   630,
    1431,   630,   631,   702,  1559,   677,  1565,   703,   930,   951,
     830,   894,   629,   883,   630,   631,  1248,   629,   630,   630,
     169,   456,   954,   966,   357,  1135,   327,   173,  1126,  1126,
      17,  1373,   540,   540,   540,    17,  1495,   202,   305,   306,
     310,   311,  1510,  1511,  1315,   252,   534,  1129,   853,   855,
     856,  1434,   589,   864,   905,  1239,  1422,  1236,  1244,   953,
     956,  1272,  1531,  1191,   585,  1193,   585,  1226,  1434,  1255,
     976,   976,  1215,   905,  1248,   630,   996,   996,   630,   996,
     996,  1419,  1419,  1042,   239,   630,   631,   192,   385,   483,
     362,   972,   944,  1000,  1415,  1000,   629,  1132,   352,   590,
     629,   127,  1260,  1431,  1434,   509,   680,    53,    68,   180,
     223,   248,   260,   366,   450,   687,   734,   736,   737,   738,
     740,   741,   742,   743,   744,   745,   747,   755,   756,   759,
     770,   773,   775,   776,  1430,  1435,  1439,  1116,  1114,   606,
    1557,   630,   631,  1075,  1572,   706,  1434,  1427,   682,   683,
     449,   960,  1525,   834,   883,   832,    81,   251,   984,   987,
     990,   991,   992,  1430,   997,   357,   606,   985,   989,   991,
     994,   986,   988,   991,   993,   169,   630,   630,   137,  1496,
     369,  1257,  1257,  1257,   357,   622,  1256,  1511,   578,  1427,
     857,   521,   858,   630,   631,   242,   262,    81,    89,   113,
     228,   307,   325,   348,   531,   880,   881,   882,  1351,   607,
     608,   631,  1240,  1248,  1135,  1250,   955,  1277,  1200,  1135,
     629,  1135,   629,   630,   631,   189,  1213,  1213,   630,   630,
     912,   630,   630,   629,  1434,   131,   578,   630,   631,   630,
     630,  1258,  1132,   929,  1135,   155,   681,   757,   760,  1434,
     191,   347,   748,   735,  1435,  1435,  1434,   739,   644,   282,
     439,   605,   779,    31,   777,   638,   630,    52,    63,   272,
    1434,   402,  1077,  1078,  1434,   691,   951,   189,   679,  1566,
     831,   630,  1522,  1431,  1310,   992,  1309,  1248,   630,   383,
     994,   993,    61,   280,   357,  1323,  1324,  1424,  1393,  1130,
    1258,   854,   856,   866,   542,  1310,  1310,   136,   136,  1310,
    1310,  1310,  1310,   629,   875,   882,   158,  1422,   404,  1264,
      73,  1399,  1526,  1226,  1226,  1434,   204,   249,   372,  1217,
    1216,   968,   915,   984,   913,   914,   860,    51,   353,   447,
     474,   973,   973,   965,  1415,   965,   630,   630,  1135,  1135,
     603,   762,   766,   191,  1434,   750,   751,  1135,   709,   733,
     734,   736,   738,   740,   742,   743,   744,   745,   747,   755,
     770,   773,   775,   709,   780,   778,   771,   774,  1525,    63,
     369,    63,   630,   631,   135,   692,   693,  1141,  1573,  1129,
     684,   951,   833,  1257,   127,  1260,  1431,  1434,  1430,   631,
    1309,   956,   630,   858,   629,   868,   870,   865,  1431,  1431,
    1310,  1310,  1260,  1260,  1258,  1436,   522,   876,   877,  1310,
    1248,  1434,   153,   164,   370,   539,  1400,  1401,   268,  1402,
     630,   630,    47,    47,   629,   629,   984,   985,   986,   630,
       5,   127,   356,   362,   362,   390,   599,   924,   758,   767,
     150,   766,   769,   239,   154,  1135,   154,   733,   635,   577,
    1135,   710,   779,   777,   369,   369,  1078,   135,   733,  1560,
     143,  1567,  1525,  1324,  1315,  1394,   629,   869,   870,   871,
     312,   867,   870,  1431,  1431,   878,   630,   631,   901,  1265,
      47,    47,   153,    47,  1401,   508,   539,  1403,  1404,  1223,
    1225,   578,   131,    81,   573,   925,   926,   927,   603,   761,
     763,  1135,   709,   154,   746,   223,   543,   282,   635,   782,
     143,   126,   708,   711,   772,  1435,   772,   149,   685,   691,
     456,  1405,   630,   631,   312,   873,   874,  1138,   879,  1436,
     877,   629,  1415,  1415,    47,  1415,    47,    47,  1404,   630,
     630,   973,   973,  1431,   252,   927,   764,   763,   769,   768,
      53,   749,  1434,   752,  1135,   781,    97,   172,   716,   731,
    1434,   154,   733,   635,   458,  1568,   221,  1399,   870,   631,
     872,   880,  1129,  1266,  1267,  1268,  1415,  1415,  1415,  1135,
     154,   543,   631,   709,   154,   709,   207,   631,   712,    88,
     107,   635,  1561,   733,    47,  1402,   874,   630,  1135,   630,
     631,   765,    53,   709,  1434,   753,   439,   154,   189,  1434,
     951,   189,   189,   733,  1415,   224,  1406,  1130,  1268,   543,
     150,   151,   754,   605,   713,   127,   732,   719,   720,  1257,
     714,   715,   357,   629,  1408,   709,   709,   750,   496,   498,
     717,   718,   719,   722,  1141,  1434,  1135,  1112,   268,   456,
    1407,   630,   636,  1409,  1410,  1424,   474,  1411,   631,   733,
     190,  1436,   630,   631,  1412,  1413,  1424,   718,  1410,   631,
    1309,  1413,  1129,  1315,  1130
};

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		(-2)
#define YYEOF		0

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrorlab


/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */

#define YYFAIL		goto yyerrlab

#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yytoken = YYTRANSLATE (yychar);				\
      YYPOPSTACK (1);						\
      goto yybackup;						\
    }								\
  else								\
    {								\
      yyerror (YY_("syntax error: cannot back up")); \
      YYERROR;							\
    }								\
while (YYID (0))


#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#define YYRHSLOC(Rhs, K) ((Rhs)[K])
#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)				\
    do									\
      if (YYID (N))                                                    \
	{								\
	  (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;	\
	  (Current).first_column = YYRHSLOC (Rhs, 1).first_column;	\
	  (Current).last_line    = YYRHSLOC (Rhs, N).last_line;		\
	  (Current).last_column  = YYRHSLOC (Rhs, N).last_column;	\
	}								\
      else								\
	{								\
	  (Current).first_line   = (Current).last_line   =		\
	    YYRHSLOC (Rhs, 0).last_line;				\
	  (Current).first_column = (Current).last_column =		\
	    YYRHSLOC (Rhs, 0).last_column;				\
	}								\
    while (YYID (0))
#endif


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if YYLTYPE_IS_TRIVIAL
#  define YY_LOCATION_PRINT(File, Loc)			\
     fprintf (File, "%d.%d-%d.%d",			\
	      (Loc).first_line, (Loc).first_column,	\
	      (Loc).last_line,  (Loc).last_column)
# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#ifdef YYLEX_PARAM
# define YYLEX yylex (&yylval, YYLEX_PARAM)
#else
# define YYLEX yylex (&yylval)
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (YYID (0))

# define YY_SYMBOL_PRINT(Title, Type, Value, Location)			  \
do {									  \
  if (yydebug)								  \
    {									  \
      YYFPRINTF (stderr, "%s ", Title);					  \
      yy_symbol_print (stderr,						  \
		  Type, Value); \
      YYFPRINTF (stderr, "\n");						  \
    }									  \
} while (YYID (0))


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)
#else
static void
yy_symbol_value_print (yyoutput, yytype, yyvaluep)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
#endif
{
  if (!yyvaluep)
    return;
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# else
  YYUSE (yyoutput);
# endif
  switch (yytype)
    {
      default:
	break;
    }
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)
#else
static void
yy_symbol_print (yyoutput, yytype, yyvaluep)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
#endif
{
  if (yytype < YYNTOKENS)
    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);

  yy_symbol_value_print (yyoutput, yytype, yyvaluep);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
#else
static void
yy_stack_print (yybottom, yytop)
    yytype_int16 *yybottom;
    yytype_int16 *yytop;
#endif
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)				\
do {								\
  if (yydebug)							\
    yy_stack_print ((Bottom), (Top));				\
} while (YYID (0))


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_reduce_print (YYSTYPE *yyvsp, int yyrule)
#else
static void
yy_reduce_print (yyvsp, yyrule)
    YYSTYPE *yyvsp;
    int yyrule;
#endif
{
  int yynrhs = yyr2[yyrule];
  int yyi;
  unsigned long int yylno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
	     yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
		       &(yyvsp[(yyi + 1) - (yynrhs)])
		       		       );
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug)				\
    yy_reduce_print (yyvsp, Rule); \
} while (YYID (0))

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif



#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static YYSIZE_T
yystrlen (const char *yystr)
#else
static YYSIZE_T
yystrlen (yystr)
    const char *yystr;
#endif
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static char *
yystpcpy (char *yydest, const char *yysrc)
#else
static char *
yystpcpy (yydest, yysrc)
    char *yydest;
    const char *yysrc;
#endif
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
	switch (*++yyp)
	  {
	  case '\'':
	  case ',':
	    goto do_not_strip_quotes;

	  case '\\':
	    if (*++yyp != '\\')
	      goto do_not_strip_quotes;
	    /* Fall through.  */
	  default:
	    if (yyres)
	      yyres[yyn] = *yyp;
	    yyn++;
	    break;

	  case '"':
	    if (yyres)
	      yyres[yyn] = '\0';
	    return yyn;
	  }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into YYRESULT an error message about the unexpected token
   YYCHAR while in state YYSTATE.  Return the number of bytes copied,
   including the terminating null byte.  If YYRESULT is null, do not
   copy anything; just return the number of bytes that would be
   copied.  As a special case, return 0 if an ordinary "syntax error"
   message will do.  Return YYSIZE_MAXIMUM if overflow occurs during
   size calculation.  */
static YYSIZE_T
yysyntax_error (char *yyresult, int yystate, int yychar)
{
  int yyn = yypact[yystate];

  if (! (YYPACT_NINF < yyn && yyn <= YYLAST))
    return 0;
  else
    {
      int yytype = YYTRANSLATE (yychar);
      YYSIZE_T yysize0 = yytnamerr (0, yytname[yytype]);
      YYSIZE_T yysize = yysize0;
      YYSIZE_T yysize1;
      int yysize_overflow = 0;
      enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
      char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
      int yyx;

# if 0
      /* This is so xgettext sees the translatable formats that are
	 constructed on the fly.  */
      YY_("syntax error, unexpected %s");
      YY_("syntax error, unexpected %s, expecting %s");
      YY_("syntax error, unexpected %s, expecting %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s");
# endif
      char *yyfmt;
      char const *yyf;
      static char const yyunexpected[] = "syntax error, unexpected %s";
      static char const yyexpecting[] = ", expecting %s";
      static char const yyor[] = " or %s";
      char yyformat[sizeof yyunexpected
		    + sizeof yyexpecting - 1
		    + ((YYERROR_VERBOSE_ARGS_MAXIMUM - 2)
		       * (sizeof yyor - 1))];
      char const *yyprefix = yyexpecting;

      /* Start YYX at -YYN if negative to avoid negative indexes in
	 YYCHECK.  */
      int yyxbegin = yyn < 0 ? -yyn : 0;

      /* Stay within bounds of both yycheck and yytname.  */
      int yychecklim = YYLAST - yyn + 1;
      int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
      int yycount = 1;

      yyarg[0] = yytname[yytype];
      yyfmt = yystpcpy (yyformat, yyunexpected);

      for (yyx = yyxbegin; yyx < yyxend; ++yyx)
	if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
	  {
	    if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
	      {
		yycount = 1;
		yysize = yysize0;
		yyformat[sizeof yyunexpected - 1] = '\0';
		break;
	      }
	    yyarg[yycount++] = yytname[yyx];
	    yysize1 = yysize + yytnamerr (0, yytname[yyx]);
	    yysize_overflow |= (yysize1 < yysize);
	    yysize = yysize1;
	    yyfmt = yystpcpy (yyfmt, yyprefix);
	    yyprefix = yyor;
	  }

      yyf = YY_(yyformat);
      yysize1 = yysize + yystrlen (yyf);
      yysize_overflow |= (yysize1 < yysize);
      yysize = yysize1;

      if (yysize_overflow)
	return YYSIZE_MAXIMUM;

      if (yyresult)
	{
	  /* Avoid sprintf, as that infringes on the user's name space.
	     Don't have undefined behavior even if the translation
	     produced a string with the wrong number of "%s"s.  */
	  char *yyp = yyresult;
	  int yyi = 0;
	  while ((*yyp = *yyf) != '\0')
	    {
	      if (*yyp == '%' && yyf[1] == 's' && yyi < yycount)
		{
		  yyp += yytnamerr (yyp, yyarg[yyi++]);
		  yyf += 2;
		}
	      else
		{
		  yyp++;
		  yyf++;
		}
	    }
	}
      return yysize;
    }
}
#endif /* YYERROR_VERBOSE */


/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep)
#else
static void
yydestruct (yymsg, yytype, yyvaluep)
    const char *yymsg;
    int yytype;
    YYSTYPE *yyvaluep;
#endif
{
  YYUSE (yyvaluep);

  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  switch (yytype)
    {

      default:
	break;
    }
}

/* Prevent warnings from -Wmissing-prototypes.  */
#ifdef YYPARSE_PARAM
#if defined __STDC__ || defined __cplusplus
int yyparse (void *YYPARSE_PARAM);
#else
int yyparse ();
#endif
#else /* ! YYPARSE_PARAM */
#if defined __STDC__ || defined __cplusplus
int yyparse (void);
#else
int yyparse ();
#endif
#endif /* ! YYPARSE_PARAM */





/*-------------------------.
| yyparse or yypush_parse.  |
`-------------------------*/

#ifdef YYPARSE_PARAM
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void *YYPARSE_PARAM)
#else
int
yyparse (YYPARSE_PARAM)
    void *YYPARSE_PARAM;
#endif
#else /* ! YYPARSE_PARAM */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void)
#else
int
yyparse ()

#endif
#endif
{
/* The lookahead symbol.  */
int yychar;

/* The semantic value of the lookahead symbol.  */
YYSTYPE yylval;

    /* Number of syntax errors so far.  */
    int yynerrs;

    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       `yyss': related to states.
       `yyvs': related to semantic values.

       Refer to the stacks thru separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    YYSIZE_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yytoken = 0;
  yyss = yyssa;
  yyvs = yyvsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */
  yyssp = yyss;
  yyvsp = yyvs;

  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack.  Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	yytype_int16 *yyss1 = yyss;

	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
	yyoverflow (YY_("memory exhausted"),
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yystacksize);

	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
	goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
	yystacksize = YYMAXDEPTH;

      {
	yytype_int16 *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyexhaustedlab;
	YYSTACK_RELOCATE (yyss_alloc, yyss);
	YYSTACK_RELOCATE (yyvs_alloc, yyvs);
#  undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yyn == YYPACT_NINF)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yyn == 0 || yyn == YYTABLE_NINF)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token.  */
  yychar = YYEMPTY;

  yystate = yyn;
  *++yyvsp = yylval;

  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];


  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 2:

/* Line 1455 of yacc.c  */
#line 1827 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            if (!thd->bootstrap &&
              (!(thd->lex->select_lex.options & OPTION_FOUND_COMMENT)))
            {
              my_message(ER_EMPTY_QUERY, ER(ER_EMPTY_QUERY), MYF(0));
              MYSQL_YYABORT;
            }
            thd->lex->sql_command= SQLCOM_EMPTY_QUERY;
            YYLIP->found_semicolon= NULL;
          }
    break;

  case 3:

/* Line 1455 of yacc.c  */
#line 1839 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex_input_stream *lip = YYLIP;

            if ((YYTHD->client_capabilities & CLIENT_MULTI_QUERIES) &&
                lip->multi_statements &&
                ! lip->eof())
            {
              /*
                We found a well formed query, and multi queries are allowed:
                - force the parser to stop after the ';'
                - mark the start of the next query for the next invocation
                  of the parser.
              */
              lip->next_state= MY_LEX_END;
              lip->found_semicolon= lip->get_ptr();
            }
            else
            {
              /* Single query, terminated. */
              lip->found_semicolon= NULL;
            }
          }
    break;

  case 5:

/* Line 1455 of yacc.c  */
#line 1864 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* Single query, not terminated. */
            YYLIP->found_semicolon= NULL;
          }
    break;

  case 63:

/* Line 1455 of yacc.c  */
#line 1939 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_DEALLOCATE_PREPARE;
            lex->prepared_stmt_name= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 66:

/* Line 1455 of yacc.c  */
#line 1954 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_PREPARE;
            lex->prepared_stmt_name= (yyvsp[(2) - (4)].lex_str);
          }
    break;

  case 67:

/* Line 1455 of yacc.c  */
#line 1964 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->prepared_stmt_code= (yyvsp[(1) - (1)].lex_str);
            lex->prepared_stmt_code_is_varref= FALSE;
          }
    break;

  case 68:

/* Line 1455 of yacc.c  */
#line 1971 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->prepared_stmt_code= (yyvsp[(2) - (2)].lex_str);
            lex->prepared_stmt_code_is_varref= TRUE;
          }
    break;

  case 69:

/* Line 1455 of yacc.c  */
#line 1981 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_EXECUTE;
            lex->prepared_stmt_name= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 70:

/* Line 1455 of yacc.c  */
#line 1988 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 75:

/* Line 1455 of yacc.c  */
#line 2003 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            LEX_STRING *lexstr= (LEX_STRING*)sql_memdup(&(yyvsp[(2) - (2)].lex_str), sizeof(LEX_STRING));
            if (!lexstr || lex->prepared_stmt_params.push_back(lexstr))
              MYSQL_YYABORT;
          }
    break;

  case 76:

/* Line 1455 of yacc.c  */
#line 2015 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HELP");
              MYSQL_YYABORT;
            }
          }
    break;

  case 77:

/* Line 1455 of yacc.c  */
#line 2023 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_HELP;
            lex->help_arg= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 78:

/* Line 1455 of yacc.c  */
#line 2034 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_CHANGE_MASTER;
          }
    break;

  case 79:

/* Line 1455 of yacc.c  */
#line 2038 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 82:

/* Line 1455 of yacc.c  */
#line 2048 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.host = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 83:

/* Line 1455 of yacc.c  */
#line 2052 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.user = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 84:

/* Line 1455 of yacc.c  */
#line 2056 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.password = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 85:

/* Line 1455 of yacc.c  */
#line 2060 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.port = (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 86:

/* Line 1455 of yacc.c  */
#line 2064 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.connect_retry = (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 87:

/* Line 1455 of yacc.c  */
#line 2068 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.ssl= (yyvsp[(3) - (3)].ulong_num) ? 
              LEX_MASTER_INFO::LEX_MI_ENABLE : LEX_MASTER_INFO::LEX_MI_DISABLE;
          }
    break;

  case 88:

/* Line 1455 of yacc.c  */
#line 2073 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_ca= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 89:

/* Line 1455 of yacc.c  */
#line 2077 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_capath= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 90:

/* Line 1455 of yacc.c  */
#line 2081 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_cert= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 91:

/* Line 1455 of yacc.c  */
#line 2085 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_cipher= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 92:

/* Line 1455 of yacc.c  */
#line 2089 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_key= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 93:

/* Line 1455 of yacc.c  */
#line 2093 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_verify_server_cert= (yyvsp[(3) - (3)].ulong_num) ?
              LEX_MASTER_INFO::LEX_MI_ENABLE : LEX_MASTER_INFO::LEX_MI_DISABLE;
          }
    break;

  case 94:

/* Line 1455 of yacc.c  */
#line 2098 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_crl= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 95:

/* Line 1455 of yacc.c  */
#line 2102 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_crlpath= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 96:

/* Line 1455 of yacc.c  */
#line 2107 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.heartbeat_period= (float) (yyvsp[(3) - (3)].item_num)->val_real();
            if (Lex->mi.heartbeat_period > SLAVE_MAX_HEARTBEAT_PERIOD ||
                Lex->mi.heartbeat_period < 0.0)
            {
               const char format[]= "%d";
               char buf[4*sizeof(SLAVE_MAX_HEARTBEAT_PERIOD) + sizeof(format)];
               sprintf(buf, format, SLAVE_MAX_HEARTBEAT_PERIOD);
               my_error(ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE, MYF(0), buf);
               MYSQL_YYABORT;
            }
            if (Lex->mi.heartbeat_period > slave_net_timeout)
            {
              push_warning_printf(YYTHD, MYSQL_ERROR::WARN_LEVEL_WARN,
                                  ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MAX,
                                  ER(ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MAX));
            }
            if (Lex->mi.heartbeat_period < 0.001)
            {
              if (Lex->mi.heartbeat_period != 0.0)
              {
                push_warning_printf(YYTHD, MYSQL_ERROR::WARN_LEVEL_WARN,
                                    ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MIN,
                                    ER(ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MIN));
                Lex->mi.heartbeat_period= 0.0;
              }
              Lex->mi.heartbeat_opt=  LEX_MASTER_INFO::LEX_MI_DISABLE;
            }
            Lex->mi.heartbeat_opt=  LEX_MASTER_INFO::LEX_MI_ENABLE;
          }
    break;

  case 97:

/* Line 1455 of yacc.c  */
#line 2138 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.repl_ignore_server_ids_opt= LEX_MASTER_INFO::LEX_MI_ENABLE;
           }
    break;

  case 102:

/* Line 1455 of yacc.c  */
#line 2153 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            insert_dynamic(&Lex->mi.repl_ignore_server_ids, (uchar*) &((yyvsp[(1) - (1)].ulong_num)));
          }
    break;

  case 103:

/* Line 1455 of yacc.c  */
#line 2159 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.log_file_name = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 104:

/* Line 1455 of yacc.c  */
#line 2163 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.pos = (yyvsp[(3) - (3)].ulonglong_number);
            /* 
               If the user specified a value < BIN_LOG_HEADER_SIZE, adjust it
               instead of causing subsequent errors. 
               We need to do it in this file, because only there we know that 
               MASTER_LOG_POS has been explicitely specified. On the contrary
               in change_master() (sql_repl.cc) we cannot distinguish between 0
               (MASTER_LOG_POS explicitely specified as 0) and 0 (unspecified),
               whereas we want to distinguish (specified 0 means "read the binlog
               from 0" (4 in fact), unspecified means "don't change the position
               (keep the preceding value)").
            */
            Lex->mi.pos = max(BIN_LOG_HEADER_SIZE, Lex->mi.pos);
          }
    break;

  case 105:

/* Line 1455 of yacc.c  */
#line 2179 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.relay_log_name = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 106:

/* Line 1455 of yacc.c  */
#line 2183 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.relay_log_pos = (yyvsp[(3) - (3)].ulong_num);
            /* Adjust if < BIN_LOG_HEADER_SIZE (same comment as Lex->mi.pos) */
            Lex->mi.relay_log_pos = max(BIN_LOG_HEADER_SIZE, Lex->mi.relay_log_pos);
          }
    break;

  case 107:

/* Line 1455 of yacc.c  */
#line 2192 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->mi.connection_name= thd->variables.default_master_connection;
          }
    break;

  case 109:

/* Line 1455 of yacc.c  */
#line 2202 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
           Lex->mi.connection_name= (yyvsp[(1) - (1)].lex_str);
#ifdef HAVE_REPLICATION
           if (check_master_connection_name(&(yyvsp[(1) - (1)].lex_str)))
           {
              my_error(ER_WRONG_ARGUMENTS, MYF(0), "MASTER_CONNECTION_NAME");
              MYSQL_YYABORT;
           }
#endif
         }
    break;

  case 110:

/* Line 1455 of yacc.c  */
#line 2217 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_CREATE_TABLE;
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(5) - (5)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_WRITE, MDL_EXCLUSIVE))
              MYSQL_YYABORT;
            /*
              For CREATE TABLE, an non-existing table is not an error.
              Instruct open_tables() to just take an MDL lock if the
              table does not exist.
            */
            lex->query_tables->open_strategy= TABLE_LIST::OPEN_IF_EXISTS;
            lex->alter_info.reset();
            lex->col_list.empty();
            lex->change=NullS;
            bzero((char*) &lex->create_info,sizeof(lex->create_info));
            lex->create_info.options=(yyvsp[(2) - (5)].num) | (yyvsp[(4) - (5)].num);
            lex->create_info.default_table_charset= NULL;
            lex->name.str= 0;
            lex->name.length= 0;
            lex->create_last_non_select_table= lex->last_table();
          }
    break;

  case 111:

/* Line 1455 of yacc.c  */
#line 2242 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= YYTHD->lex;
            lex->current_select= &lex->select_lex; 
            if ((lex->create_info.used_fields & HA_CREATE_USED_ENGINE) &&
                !lex->create_info.db_type)
            {
              lex->create_info.db_type= ha_default_handlerton(YYTHD);
              push_warning_printf(YYTHD, MYSQL_ERROR::WARN_LEVEL_WARN,
                                  ER_WARN_USING_OTHER_HANDLER,
                                  ER(ER_WARN_USING_OTHER_HANDLER),
                                  hton_name(lex->create_info.db_type)->str,
                                  (yyvsp[(5) - (7)].table)->table.str);
            }
            create_table_set_open_action_and_adjust_tables(lex);
          }
    break;

  case 112:

/* Line 1455 of yacc.c  */
#line 2258 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_create_index_prepare(Lex, (yyvsp[(7) - (7)].table)))
              MYSQL_YYABORT;
          }
    break;

  case 113:

/* Line 1455 of yacc.c  */
#line 2263 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_create_index(Lex, (yyvsp[(2) - (12)].key_type), (yyvsp[(4) - (12)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 114:

/* Line 1455 of yacc.c  */
#line 2269 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_create_index_prepare(Lex, (yyvsp[(7) - (7)].table)))
              MYSQL_YYABORT;
          }
    break;

  case 115:

/* Line 1455 of yacc.c  */
#line 2274 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_create_index(Lex, (yyvsp[(2) - (12)].key_type), (yyvsp[(4) - (12)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 116:

/* Line 1455 of yacc.c  */
#line 2280 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_create_index_prepare(Lex, (yyvsp[(7) - (7)].table)))
              MYSQL_YYABORT;
          }
    break;

  case 117:

/* Line 1455 of yacc.c  */
#line 2285 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_create_index(Lex, (yyvsp[(2) - (12)].key_type), (yyvsp[(4) - (12)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 118:

/* Line 1455 of yacc.c  */
#line 2290 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.default_table_charset= NULL;
            Lex->create_info.used_fields= 0;
          }
    break;

  case 119:

/* Line 1455 of yacc.c  */
#line 2295 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_CREATE_DB;
            lex->name= (yyvsp[(4) - (6)].lex_str);
            lex->create_info.options=(yyvsp[(3) - (6)].num);
          }
    break;

  case 120:

/* Line 1455 of yacc.c  */
#line 2302 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_view_mode= VIEW_CREATE_NEW;
            Lex->create_view_algorithm= DTYPE_ALGORITHM_UNDEFINED;
            Lex->create_view_suid= TRUE;
          }
    break;

  case 121:

/* Line 1455 of yacc.c  */
#line 2308 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 122:

/* Line 1455 of yacc.c  */
#line 2310 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_CREATE_USER;
          }
    break;

  case 123:

/* Line 1455 of yacc.c  */
#line 2314 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->alter_tablespace_info->ts_cmd_type= CREATE_LOGFILE_GROUP;
          }
    break;

  case 124:

/* Line 1455 of yacc.c  */
#line 2318 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->alter_tablespace_info->ts_cmd_type= CREATE_TABLESPACE;
          }
    break;

  case 125:

/* Line 1455 of yacc.c  */
#line 2322 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_CREATE_SERVER;
          }
    break;

  case 126:

/* Line 1455 of yacc.c  */
#line 2333 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->server_options.server_name= (yyvsp[(2) - (10)].lex_str).str;
            Lex->server_options.server_name_length= (yyvsp[(2) - (10)].lex_str).length;
            Lex->server_options.scheme= (yyvsp[(6) - (10)].lex_str).str;
          }
    break;

  case 129:

/* Line 1455 of yacc.c  */
#line 2347 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->server_options.username= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 130:

/* Line 1455 of yacc.c  */
#line 2351 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->server_options.host= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 131:

/* Line 1455 of yacc.c  */
#line 2355 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->server_options.db= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 132:

/* Line 1455 of yacc.c  */
#line 2359 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->server_options.owner= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 133:

/* Line 1455 of yacc.c  */
#line 2363 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->server_options.password= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 134:

/* Line 1455 of yacc.c  */
#line 2367 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->server_options.socket= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 135:

/* Line 1455 of yacc.c  */
#line 2371 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->server_options.port= (yyvsp[(2) - (2)].ulong_num);
          }
    break;

  case 136:

/* Line 1455 of yacc.c  */
#line 2378 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex=Lex;

            lex->stmt_definition_begin= (yyvsp[(1) - (4)].simple_string);
            lex->create_info.options= (yyvsp[(3) - (4)].num);
            if (!(lex->event_parse_data= Event_parse_data::new_instance(thd)))
              MYSQL_YYABORT;
            lex->event_parse_data->identifier= (yyvsp[(4) - (4)].spname);
            lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_DROP;

            lex->sql_command= SQLCOM_CREATE_EVENT;
            /* We need that for disallowing subqueries */
          }
    break;

  case 137:

/* Line 1455 of yacc.c  */
#line 2398 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              sql_command is set here because some rules in ev_sql_stmt
              can overwrite it
            */
            Lex->sql_command= SQLCOM_CREATE_EVENT;
          }
    break;

  case 138:

/* Line 1455 of yacc.c  */
#line 2409 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_expression= (yyvsp[(2) - (3)].item);
            Lex->event_parse_data->interval= (yyvsp[(3) - (3)].interval);
          }
    break;

  case 140:

/* Line 1455 of yacc.c  */
#line 2416 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_execute_at= (yyvsp[(2) - (2)].item);
          }
    break;

  case 141:

/* Line 1455 of yacc.c  */
#line 2422 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 142:

/* Line 1455 of yacc.c  */
#line 2424 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::ENABLED;
            Lex->event_parse_data->status_changed= true;
            (yyval.num)= 1;
          }
    break;

  case 143:

/* Line 1455 of yacc.c  */
#line 2430 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::SLAVESIDE_DISABLED;
            Lex->event_parse_data->status_changed= true; 
            (yyval.num)= 1;
          }
    break;

  case 144:

/* Line 1455 of yacc.c  */
#line 2436 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::DISABLED;
            Lex->event_parse_data->status_changed= true;
            (yyval.num)= 1;
          }
    break;

  case 145:

/* Line 1455 of yacc.c  */
#line 2445 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_func_now_local(0);
            if (item == NULL)
              MYSQL_YYABORT;
            Lex->event_parse_data->item_starts= item;
          }
    break;

  case 146:

/* Line 1455 of yacc.c  */
#line 2452 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_starts= (yyvsp[(2) - (2)].item);
          }
    break;

  case 148:

/* Line 1455 of yacc.c  */
#line 2460 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_ends= (yyvsp[(2) - (2)].item);
          }
    break;

  case 149:

/* Line 1455 of yacc.c  */
#line 2466 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 151:

/* Line 1455 of yacc.c  */
#line 2472 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_PRESERVE;
            (yyval.num)= 1;
          }
    break;

  case 152:

/* Line 1455 of yacc.c  */
#line 2478 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_DROP;
            (yyval.num)= 1;
          }
    break;

  case 153:

/* Line 1455 of yacc.c  */
#line 2486 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 154:

/* Line 1455 of yacc.c  */
#line 2488 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->comment= Lex->event_parse_data->comment= (yyvsp[(2) - (2)].lex_str);
            (yyval.num)= 1;
          }
    break;

  case 155:

/* Line 1455 of yacc.c  */
#line 2495 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            /*
              This stops the following :
              - CREATE EVENT ... DO CREATE EVENT ...;
              - ALTER  EVENT ... DO CREATE EVENT ...;
              - CREATE EVENT ... DO ALTER EVENT DO ....;
              - CREATE PROCEDURE ... BEGIN CREATE EVENT ... END|
              This allows:
              - CREATE EVENT ... DO DROP EVENT yyy;
              - CREATE EVENT ... DO ALTER EVENT yyy;
                (the nested ALTER EVENT can have anything but DO clause)
              - ALTER  EVENT ... DO ALTER EVENT yyy;
                (the nested ALTER EVENT can have anything but DO clause)
              - ALTER  EVENT ... DO DROP EVENT yyy;
              - CREATE PROCEDURE ... BEGIN ALTER EVENT ... END|
                (the nested ALTER EVENT can have anything but DO clause)
              - CREATE PROCEDURE ... BEGIN DROP EVENT ... END|
            */
            if (lex->sphead)
            {
              my_error(ER_EVENT_RECURSION_FORBIDDEN, MYF(0));
              MYSQL_YYABORT;
            }
              
            if (!(lex->sphead= new sp_head()))
              MYSQL_YYABORT;

            lex->sphead->reset_thd_mem_root(thd);
            lex->sphead->init(lex);
            lex->sphead->init_sp_name(thd, lex->event_parse_data->identifier);

            lex->sphead->m_type= TYPE_ENUM_PROCEDURE;

            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
            lex->sphead->m_chistics= &lex->sp_chistics;

            lex->sphead->set_body_start(thd, lip->get_cpp_ptr());
          }
    break;

  case 156:

/* Line 1455 of yacc.c  */
#line 2538 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            /* return back to the original memory root ASAP */
            lex->sphead->set_stmt_end(thd);
            lex->sphead->restore_thd_mem_root(thd);

            lex->sp_chistics.suid= SP_IS_SUID;  //always the definer!

            lex->event_parse_data->body_changed= TRUE;
          }
    break;

  case 170:

/* Line 1455 of yacc.c  */
#line 2570 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
           LEX *lex=Lex;
           lex->users_list.empty();
           lex->columns.empty();
           lex->grant= lex->grant_tot_col= 0;
           lex->all_privileges= 0;
           lex->select_lex.db= 0;
           lex->ssl_type= SSL_TYPE_NOT_SPECIFIED;
           lex->ssl_cipher= lex->x509_subject= lex->x509_issuer= 0;
           bzero((char *)&(lex->mqh),sizeof(lex->mqh));
         }
    break;

  case 171:

/* Line 1455 of yacc.c  */
#line 2585 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!(yyvsp[(1) - (3)].lex_str).str || check_db_name(&(yyvsp[(1) - (3)].lex_str)))
            {
              my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[(1) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (check_routine_name(&(yyvsp[(3) - (3)].lex_str)))
            {
              MYSQL_YYABORT;
            }
            (yyval.spname)= new sp_name((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), true);
            if ((yyval.spname) == NULL)
              MYSQL_YYABORT;
            (yyval.spname)->init_qname(YYTHD);
          }
    break;

  case 172:

/* Line 1455 of yacc.c  */
#line 2601 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            LEX_STRING db;
            if (check_routine_name(&(yyvsp[(1) - (1)].lex_str)))
            {
              MYSQL_YYABORT;
            }
            if (lex->copy_db_to(&db.str, &db.length))
              MYSQL_YYABORT;
            (yyval.spname)= new sp_name(db, (yyvsp[(1) - (1)].lex_str), false);
            if ((yyval.spname) == NULL)
              MYSQL_YYABORT;
            (yyval.spname)->init_qname(thd);
          }
    break;

  case 173:

/* Line 1455 of yacc.c  */
#line 2619 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 174:

/* Line 1455 of yacc.c  */
#line 2620 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 175:

/* Line 1455 of yacc.c  */
#line 2624 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 176:

/* Line 1455 of yacc.c  */
#line 2625 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 177:

/* Line 1455 of yacc.c  */
#line 2631 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sp_chistics.comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 178:

/* Line 1455 of yacc.c  */
#line 2633 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* Just parse it, we only have one language for now. */ }
    break;

  case 179:

/* Line 1455 of yacc.c  */
#line 2635 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_NO_SQL; }
    break;

  case 180:

/* Line 1455 of yacc.c  */
#line 2637 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_CONTAINS_SQL; }
    break;

  case 181:

/* Line 1455 of yacc.c  */
#line 2639 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_READS_SQL_DATA; }
    break;

  case 182:

/* Line 1455 of yacc.c  */
#line 2641 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_MODIFIES_SQL_DATA; }
    break;

  case 183:

/* Line 1455 of yacc.c  */
#line 2643 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 184:

/* Line 1455 of yacc.c  */
#line 2648 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { }
    break;

  case 185:

/* Line 1455 of yacc.c  */
#line 2649 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sp_chistics.detistic= TRUE; }
    break;

  case 186:

/* Line 1455 of yacc.c  */
#line 2650 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sp_chistics.detistic= FALSE; }
    break;

  case 187:

/* Line 1455 of yacc.c  */
#line 2655 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sp_chistics.suid= SP_IS_SUID;
          }
    break;

  case 188:

/* Line 1455 of yacc.c  */
#line 2659 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sp_chistics.suid= SP_IS_NOT_SUID;
          }
    break;

  case 189:

/* Line 1455 of yacc.c  */
#line 2666 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex = Lex;

            lex->sql_command= SQLCOM_CALL;
            lex->spname= (yyvsp[(2) - (2)].spname);
            lex->value_list.empty();
            sp_add_used_routine(lex, YYTHD, (yyvsp[(2) - (2)].spname), TYPE_ENUM_PROCEDURE);
          }
    break;

  case 190:

/* Line 1455 of yacc.c  */
#line 2674 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 195:

/* Line 1455 of yacc.c  */
#line 2690 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
           Lex->value_list.push_back((yyvsp[(3) - (3)].item));
          }
    break;

  case 196:

/* Line 1455 of yacc.c  */
#line 2694 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->value_list.push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 201:

/* Line 1455 of yacc.c  */
#line 2712 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->length= 0;
            lex->dec= 0;
            lex->type= 0;

            lex->default_value= 0;
            lex->on_update_value= 0;

            lex->comment= null_lex_str;
            lex->charset= NULL;

            lex->interval_list.empty();
            lex->uint_geom_type= 0;
            lex->vcol_info= 0;
          }
    break;

  case 202:

/* Line 1455 of yacc.c  */
#line 2733 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable(&(yyvsp[(1) - (3)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_PARAM, MYF(0), (yyvsp[(1) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            sp_variable_t *spvar= spc->push_variable(&(yyvsp[(1) - (3)].lex_str),
                                                     (enum enum_field_types)(yyvsp[(3) - (3)].num),
                                                     sp_param_in);

            if (lex->sphead->fill_field_definition(YYTHD, lex,
                                                   (enum enum_field_types) (yyvsp[(3) - (3)].num),
                                                   &spvar->field_def))
            {
              MYSQL_YYABORT;
            }
            spvar->field_def.field_name= spvar->name.str;
            spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;
          }
    break;

  case 207:

/* Line 1455 of yacc.c  */
#line 2770 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable(&(yyvsp[(3) - (4)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_PARAM, MYF(0), (yyvsp[(3) - (4)].lex_str).str);
              MYSQL_YYABORT;
            }
            sp_variable_t *spvar= spc->push_variable(&(yyvsp[(3) - (4)].lex_str),
                                                     (enum enum_field_types)(yyvsp[(4) - (4)].num),
                                                     (sp_param_mode_t)(yyvsp[(1) - (4)].num));

            if (lex->sphead->fill_field_definition(YYTHD, lex,
                                                   (enum enum_field_types) (yyvsp[(4) - (4)].num),
                                                   &spvar->field_def))
            {
              MYSQL_YYABORT;
            }
            spvar->field_def.field_name= spvar->name.str;
            spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;
          }
    break;

  case 208:

/* Line 1455 of yacc.c  */
#line 2795 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= sp_param_in; }
    break;

  case 209:

/* Line 1455 of yacc.c  */
#line 2796 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= sp_param_in; }
    break;

  case 210:

/* Line 1455 of yacc.c  */
#line 2797 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= sp_param_out; }
    break;

  case 211:

/* Line 1455 of yacc.c  */
#line 2798 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= sp_param_inout; }
    break;

  case 212:

/* Line 1455 of yacc.c  */
#line 2802 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 214:

/* Line 1455 of yacc.c  */
#line 2807 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 216:

/* Line 1455 of yacc.c  */
#line 2813 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
          }
    break;

  case 217:

/* Line 1455 of yacc.c  */
#line 2817 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* We check for declarations out of (standard) order this way
              because letting the grammar rules reflect it caused tricky
               shift/reduce conflicts with the wrong result. (And we get
               better error handling this way.) */
            if (((yyvsp[(2) - (3)].spblock).vars || (yyvsp[(2) - (3)].spblock).conds) && ((yyvsp[(1) - (3)].spblock).curs || (yyvsp[(1) - (3)].spblock).hndlrs))
            { /* Variable or condition following cursor or handler */
              my_message(ER_SP_VARCOND_AFTER_CURSHNDLR,
                         ER(ER_SP_VARCOND_AFTER_CURSHNDLR), MYF(0));
              MYSQL_YYABORT;
            }
            if ((yyvsp[(2) - (3)].spblock).curs && (yyvsp[(1) - (3)].spblock).hndlrs)
            { /* Cursor following handler */
              my_message(ER_SP_CURSOR_AFTER_HANDLER,
                         ER(ER_SP_CURSOR_AFTER_HANDLER), MYF(0));
              MYSQL_YYABORT;
            }
            (yyval.spblock).vars= (yyvsp[(1) - (3)].spblock).vars + (yyvsp[(2) - (3)].spblock).vars;
            (yyval.spblock).conds= (yyvsp[(1) - (3)].spblock).conds + (yyvsp[(2) - (3)].spblock).conds;
            (yyval.spblock).hndlrs= (yyvsp[(1) - (3)].spblock).hndlrs + (yyvsp[(2) - (3)].spblock).hndlrs;
            (yyval.spblock).curs= (yyvsp[(1) - (3)].spblock).curs + (yyvsp[(2) - (3)].spblock).curs;
          }
    break;

  case 218:

/* Line 1455 of yacc.c  */
#line 2843 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sphead->reset_lex(YYTHD);
            lex->spcont->declare_var_boundary((yyvsp[(2) - (2)].num));
          }
    break;

  case 219:

/* Line 1455 of yacc.c  */
#line 2851 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_pcontext *pctx= lex->spcont;
            uint num_vars= pctx->context_var_count();
            enum enum_field_types var_type= (enum enum_field_types) (yyvsp[(4) - (5)].num);
            Item *dflt_value_item= (yyvsp[(5) - (5)].item);
            
            if (!dflt_value_item)
            {
              dflt_value_item= new (thd->mem_root) Item_null();
              if (dflt_value_item == NULL)
                MYSQL_YYABORT;
              /* QQ Set to the var_type with null_value? */
            }
            
            for (uint i = num_vars-(yyvsp[(2) - (5)].num) ; i < num_vars ; i++)
            {
              uint var_idx= pctx->var_context2runtime(i);
              sp_variable_t *spvar= pctx->find_variable(var_idx);
            
              if (!spvar)
                MYSQL_YYABORT;
            
              spvar->type= var_type;
              spvar->dflt= dflt_value_item;
            
              if (lex->sphead->fill_field_definition(YYTHD, lex, var_type,
                                                     &spvar->field_def))
              {
                MYSQL_YYABORT;
              }
            
              spvar->field_def.field_name= spvar->name.str;
              spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;
            
              /* The last instruction is responsible for freeing LEX. */

              sp_instr_set *is= new sp_instr_set(lex->sphead->instructions(),
                                                 pctx,
                                                 var_idx,
                                                 dflt_value_item,
                                                 var_type,
                                                 lex,
                                                 (i == num_vars - 1));
              if (is == NULL ||
                  lex->sphead->add_instr(is))
                MYSQL_YYABORT;
            }

            pctx->declare_var_boundary(0);
            if (lex->sphead->restore_lex(YYTHD))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyvsp[(2) - (5)].num);
            (yyval.spblock).conds= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
          }
    break;

  case 220:

/* Line 1455 of yacc.c  */
#line 2908 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_cond(&(yyvsp[(2) - (5)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_COND, MYF(0), (yyvsp[(2) - (5)].lex_str).str);
              MYSQL_YYABORT;
            }
            if(YYTHD->lex->spcont->push_cond(&(yyvsp[(2) - (5)].lex_str), (yyvsp[(5) - (5)].spcondtype)))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
            (yyval.spblock).conds= 1;
          }
    break;

  case 221:

/* Line 1455 of yacc.c  */
#line 2923 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            lex->spcont= lex->spcont->push_context(LABEL_HANDLER_SCOPE);

            sp_pcontext *ctx= lex->spcont;
            sp_instr_hpush_jump *i=
              new sp_instr_hpush_jump(sp->instructions(), ctx, (yyvsp[(2) - (4)].num),
                                      ctx->current_var_count());
            if (i == NULL || sp->add_instr(i))
              MYSQL_YYABORT;

            /* For continue handlers, mark end of handler scope. */
            if ((yyvsp[(2) - (4)].num) == SP_HANDLER_CONTINUE &&
                sp->push_backpatch(i, ctx->last_label()))
              MYSQL_YYABORT;

            if (sp->push_backpatch(i, ctx->push_label(empty_c_string, 0)))
              MYSQL_YYABORT;
          }
    break;

  case 222:

/* Line 1455 of yacc.c  */
#line 2945 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_label_t *hlab= lex->spcont->pop_label(); /* After this hdlr */
            sp_instr_hreturn *i;

            if ((yyvsp[(2) - (7)].num) == SP_HANDLER_CONTINUE)
            {
              i= new sp_instr_hreturn(sp->instructions(), ctx,
                                      ctx->current_var_count());
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
            else
            {  /* EXIT or UNDO handler, just jump to the end of the block */
              i= new sp_instr_hreturn(sp->instructions(), ctx, 0);
              if (i == NULL ||
                  sp->add_instr(i) ||
                  sp->push_backpatch(i, lex->spcont->last_label())) /* Block end */
                MYSQL_YYABORT;
            }
            lex->sphead->backpatch(hlab);

            lex->spcont= ctx->pop_context();

            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).curs= 0;
            (yyval.spblock).hndlrs= (yyvsp[(6) - (7)].num);
            lex->spcont->add_handlers((yyvsp[(6) - (7)].num));
          }
    break;

  case 223:

/* Line 1455 of yacc.c  */
#line 2977 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            uint offp;
            sp_instr_cpush *i;

            if (ctx->find_cursor(&(yyvsp[(2) - (5)].lex_str), &offp, TRUE))
            {
              my_error(ER_SP_DUP_CURS, MYF(0), (yyvsp[(2) - (5)].lex_str).str);
              delete (yyvsp[(5) - (5)].lex);
              MYSQL_YYABORT;
            }
            i= new sp_instr_cpush(sp->instructions(), ctx, (yyvsp[(5) - (5)].lex),
                                  ctx->current_cursor_count());
            if (i == NULL ||
                sp->add_instr(i) ||
                ctx->push_cursor(&(yyvsp[(2) - (5)].lex_str)))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).hndlrs= 0;
            (yyval.spblock).curs= 1;
          }
    break;

  case 224:

/* Line 1455 of yacc.c  */
#line 3002 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sphead->reset_lex(YYTHD);
          }
    break;

  case 225:

/* Line 1455 of yacc.c  */
#line 3006 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            DBUG_ASSERT(lex->sql_command == SQLCOM_SELECT);

            if (lex->result)
            {
              my_message(ER_SP_BAD_CURSOR_SELECT, ER(ER_SP_BAD_CURSOR_SELECT),
                         MYF(0));
              MYSQL_YYABORT;
            }
            lex->sp_lex_in_use= TRUE;
            (yyval.lex)= lex;
            if (lex->sphead->restore_lex(YYTHD))
              MYSQL_YYABORT;
          }
    break;

  case 226:

/* Line 1455 of yacc.c  */
#line 3025 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= SP_HANDLER_EXIT; }
    break;

  case 227:

/* Line 1455 of yacc.c  */
#line 3026 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= SP_HANDLER_CONTINUE; }
    break;

  case 228:

/* Line 1455 of yacc.c  */
#line 3032 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 229:

/* Line 1455 of yacc.c  */
#line 3034 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)+= 1; }
    break;

  case 230:

/* Line 1455 of yacc.c  */
#line 3039 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont->parent_context();

            if (ctx->find_handler((yyvsp[(1) - (1)].spcondtype)))
            {
              my_message(ER_SP_DUP_HANDLER, ER(ER_SP_DUP_HANDLER), MYF(0));
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_hpush_jump *i=
                (sp_instr_hpush_jump *)sp->last_instruction();

              i->add_condition((yyvsp[(1) - (1)].spcondtype));
              ctx->push_handler((yyvsp[(1) - (1)].spcondtype));
            }
          }
    break;

  case 231:

/* Line 1455 of yacc.c  */
#line 3062 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* mysql errno */
            if ((yyvsp[(1) - (1)].ulong_num) == 0)
            {
              my_error(ER_WRONG_VALUE, MYF(0), "CONDITION", "0");
              MYSQL_YYABORT;
            }
            (yyval.spcondtype)= (sp_cond_type_t *)YYTHD->alloc(sizeof(sp_cond_type_t));
            if ((yyval.spcondtype) == NULL)
              MYSQL_YYABORT;
            (yyval.spcondtype)->type= sp_cond_type_t::number;
            (yyval.spcondtype)->mysqlerr= (yyvsp[(1) - (1)].ulong_num);
          }
    break;

  case 233:

/* Line 1455 of yacc.c  */
#line 3079 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* SQLSTATE */
            if (!sp_cond_check(&(yyvsp[(3) - (3)].lex_str)))
            {
              my_error(ER_SP_BAD_SQLSTATE, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.spcondtype)= (sp_cond_type_t *)YYTHD->alloc(sizeof(sp_cond_type_t));
            if ((yyval.spcondtype) == NULL)
              MYSQL_YYABORT;
            (yyval.spcondtype)->type= sp_cond_type_t::state;
            memcpy((yyval.spcondtype)->sqlstate, (yyvsp[(3) - (3)].lex_str).str, SQLSTATE_LENGTH);
            (yyval.spcondtype)->sqlstate[SQLSTATE_LENGTH]= '\0';
          }
    break;

  case 234:

/* Line 1455 of yacc.c  */
#line 3095 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 235:

/* Line 1455 of yacc.c  */
#line 3096 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 236:

/* Line 1455 of yacc.c  */
#line 3101 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.spcondtype)= (yyvsp[(1) - (1)].spcondtype);
          }
    break;

  case 237:

/* Line 1455 of yacc.c  */
#line 3105 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.spcondtype)= Lex->spcont->find_cond(&(yyvsp[(1) - (1)].lex_str));
            if ((yyval.spcondtype) == NULL)
            {
              my_error(ER_SP_COND_MISMATCH, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 238:

/* Line 1455 of yacc.c  */
#line 3114 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.spcondtype)= (sp_cond_type_t *)YYTHD->alloc(sizeof(sp_cond_type_t));
            if ((yyval.spcondtype) == NULL)
              MYSQL_YYABORT;
            (yyval.spcondtype)->type= sp_cond_type_t::warning;
          }
    break;

  case 239:

/* Line 1455 of yacc.c  */
#line 3121 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.spcondtype)= (sp_cond_type_t *)YYTHD->alloc(sizeof(sp_cond_type_t));
            if ((yyval.spcondtype) == NULL)
              MYSQL_YYABORT;
            (yyval.spcondtype)->type= sp_cond_type_t::notfound;
          }
    break;

  case 240:

/* Line 1455 of yacc.c  */
#line 3128 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.spcondtype)= (sp_cond_type_t *)YYTHD->alloc(sizeof(sp_cond_type_t));
            if ((yyval.spcondtype) == NULL)
              MYSQL_YYABORT;
            (yyval.spcondtype)->type= sp_cond_type_t::exception;
          }
    break;

  case 241:

/* Line 1455 of yacc.c  */
#line 3138 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Yacc_state *state= & thd->m_parser_state->m_yacc;

            lex->sql_command= SQLCOM_SIGNAL;
            lex->m_stmt= new (thd->mem_root) Signal_statement(lex, (yyvsp[(2) - (3)].spcondtype),
                                                      state->m_set_signal_info);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 242:

/* Line 1455 of yacc.c  */
#line 3153 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_cond_type_t *cond;
            if (lex->spcont == NULL)
            {
              /* SIGNAL foo cannot be used outside of stored programs */
              my_error(ER_SP_COND_MISMATCH, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            cond= lex->spcont->find_cond(&(yyvsp[(1) - (1)].lex_str));
            if (cond == NULL)
            {
              my_error(ER_SP_COND_MISMATCH, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (cond->type != sp_cond_type_t::state)
            {
              my_error(ER_SIGNAL_BAD_CONDITION_TYPE, MYF(0));
              MYSQL_YYABORT;
            }
            (yyval.spcondtype)= cond;
          }
    break;

  case 243:

/* Line 1455 of yacc.c  */
#line 3176 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.spcondtype)= (yyvsp[(1) - (1)].spcondtype); }
    break;

  case 244:

/* Line 1455 of yacc.c  */
#line 3181 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.spcondtype)= NULL; }
    break;

  case 245:

/* Line 1455 of yacc.c  */
#line 3183 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.spcondtype)= (yyvsp[(1) - (1)].spcondtype); }
    break;

  case 246:

/* Line 1455 of yacc.c  */
#line 3188 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            YYTHD->m_parser_state->m_yacc.m_set_signal_info.clear();
          }
    break;

  case 248:

/* Line 1455 of yacc.c  */
#line 3196 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Set_signal_information *info;
            info= & YYTHD->m_parser_state->m_yacc.m_set_signal_info;
            int index= (int) (yyvsp[(1) - (3)].diag_condition_item_name);
            info->clear();
            info->m_item[index]= (yyvsp[(3) - (3)].item);
          }
    break;

  case 249:

/* Line 1455 of yacc.c  */
#line 3205 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Set_signal_information *info;
            info= & YYTHD->m_parser_state->m_yacc.m_set_signal_info;
            int index= (int) (yyvsp[(3) - (5)].diag_condition_item_name);
            if (info->m_item[index] != NULL)
            {
              my_error(ER_DUP_SIGNAL_SET, MYF(0),
                       Diag_condition_item_names[index].str);
              MYSQL_YYABORT;
            }
            info->m_item[index]= (yyvsp[(5) - (5)].item);
          }
    break;

  case 250:

/* Line 1455 of yacc.c  */
#line 3224 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 251:

/* Line 1455 of yacc.c  */
#line 3226 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if ((yyvsp[(1) - (1)].item)->type() == Item::FUNC_ITEM)
            {
              Item_func *item= (Item_func*) (yyvsp[(1) - (1)].item);
              if (item->functype() == Item_func::SUSERVAR_FUNC)
              {
                /*
                  Don't allow the following syntax:
                    SIGNAL/RESIGNAL ...
                    SET <signal condition item name> = @foo := expr
                */
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
            }
            (yyval.item)= (yyvsp[(1) - (1)].item);
          }
    break;

  case 252:

/* Line 1455 of yacc.c  */
#line 3244 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 253:

/* Line 1455 of yacc.c  */
#line 3250 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CLASS_ORIGIN; }
    break;

  case 254:

/* Line 1455 of yacc.c  */
#line 3252 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_SUBCLASS_ORIGIN; }
    break;

  case 255:

/* Line 1455 of yacc.c  */
#line 3254 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CONSTRAINT_CATALOG; }
    break;

  case 256:

/* Line 1455 of yacc.c  */
#line 3256 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CONSTRAINT_SCHEMA; }
    break;

  case 257:

/* Line 1455 of yacc.c  */
#line 3258 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CONSTRAINT_NAME; }
    break;

  case 258:

/* Line 1455 of yacc.c  */
#line 3260 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CATALOG_NAME; }
    break;

  case 259:

/* Line 1455 of yacc.c  */
#line 3262 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_SCHEMA_NAME; }
    break;

  case 260:

/* Line 1455 of yacc.c  */
#line 3264 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_TABLE_NAME; }
    break;

  case 261:

/* Line 1455 of yacc.c  */
#line 3266 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_COLUMN_NAME; }
    break;

  case 262:

/* Line 1455 of yacc.c  */
#line 3268 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CURSOR_NAME; }
    break;

  case 263:

/* Line 1455 of yacc.c  */
#line 3270 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_MESSAGE_TEXT; }
    break;

  case 264:

/* Line 1455 of yacc.c  */
#line 3272 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_MYSQL_ERRNO; }
    break;

  case 265:

/* Line 1455 of yacc.c  */
#line 3277 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Yacc_state *state= & thd->m_parser_state->m_yacc;

            lex->sql_command= SQLCOM_RESIGNAL;
            lex->m_stmt= new (thd->mem_root) Resignal_statement(lex, (yyvsp[(2) - (3)].spcondtype),
                                                      state->m_set_signal_info);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 266:

/* Line 1455 of yacc.c  */
#line 3292 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* NOTE: field definition is filled in sp_decl section. */

            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable(&(yyvsp[(1) - (1)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            spc->push_variable(&(yyvsp[(1) - (1)].lex_str), (enum_field_types)0, sp_param_in);
            (yyval.num)= 1;
          }
    break;

  case 267:

/* Line 1455 of yacc.c  */
#line 3307 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* NOTE: field definition is filled in sp_decl section. */

            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable(&(yyvsp[(3) - (3)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_VAR, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            spc->push_variable(&(yyvsp[(3) - (3)].lex_str), (enum_field_types)0, sp_param_in);
            (yyval.num)= (yyvsp[(1) - (3)].num) + 1;
          }
    break;

  case 268:

/* Line 1455 of yacc.c  */
#line 3324 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item) = NULL; }
    break;

  case 269:

/* Line 1455 of yacc.c  */
#line 3325 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item); }
    break;

  case 283:

/* Line 1455 of yacc.c  */
#line 3346 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sphead->new_cont_backpatch(NULL); }
    break;

  case 284:

/* Line 1455 of yacc.c  */
#line 3348 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sphead->do_cont_backpatch(); }
    break;

  case 285:

/* Line 1455 of yacc.c  */
#line 3352 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            lex->sphead->reset_lex(thd);
            lex->sphead->m_tmp_query= lip->get_tok_start();
          }
    break;

  case 286:

/* Line 1455 of yacc.c  */
#line 3361 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_head *sp= lex->sphead;

            sp->m_flags|= sp_get_flags_for_command(lex);
            if (lex->sql_command == SQLCOM_CHANGE_DB)
            { /* "USE db" doesn't work in a procedure */
              my_error(ER_SP_BADSTATEMENT, MYF(0), "USE");
              MYSQL_YYABORT;
            }
            /*
              Don't add an instruction for SET statements, since all
              instructions for them were already added during processing
              of "set" rule.
            */
            DBUG_ASSERT(lex->sql_command != SQLCOM_SET_OPTION ||
                        lex->var_list.is_empty());
            if (lex->sql_command != SQLCOM_SET_OPTION)
            {
              sp_instr_stmt *i=new sp_instr_stmt(sp->instructions(),
                                                 lex->spcont, lex);
              if (i == NULL)
                MYSQL_YYABORT;

              /*
                Extract the query statement from the tokenizer.  The
                end is either lex->ptr, if there was no lookahead,
                lex->tok_end otherwise.
              */
              if (yychar == YYEMPTY)
                i->m_query.length= lip->get_ptr() - sp->m_tmp_query;
              else
                i->m_query.length= lip->get_tok_end() - sp->m_tmp_query;
              if (!(i->m_query.str= strmake_root(thd->mem_root,
                                                 sp->m_tmp_query,
                                                 i->m_query.length)) ||
                    sp->add_instr(i))
                MYSQL_YYABORT;
            }
            if (sp->restore_lex(thd))
              MYSQL_YYABORT;
          }
    break;

  case 287:

/* Line 1455 of yacc.c  */
#line 3409 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sphead->reset_lex(YYTHD); }
    break;

  case 288:

/* Line 1455 of yacc.c  */
#line 3411 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            if (sp->m_type != TYPE_ENUM_FUNCTION)
            {
              my_message(ER_SP_BADRETURN, ER(ER_SP_BADRETURN), MYF(0));
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_freturn *i;

              i= new sp_instr_freturn(sp->instructions(), lex->spcont, (yyvsp[(3) - (3)].item),
                                      sp->m_return_field_def.sql_type, lex);
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
              sp->m_flags|= sp_head::HAS_RETURN;
            }
            if (sp->restore_lex(YYTHD))
              MYSQL_YYABORT;
          }
    break;

  case 289:

/* Line 1455 of yacc.c  */
#line 3437 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* Unlabeled controls get a secret label. */
            LEX *lex= Lex;

            lex->spcont->push_label((char *)"", lex->sphead->instructions());
          }
    break;

  case 290:

/* Line 1455 of yacc.c  */
#line 3443 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sphead->backpatch(lex->spcont->pop_label());
          }
    break;

  case 291:

/* Line 1455 of yacc.c  */
#line 3452 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp = lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_label_t *lab= ctx->find_label((yyvsp[(2) - (2)].lex_str).str);

            if (! lab)
            {
              my_error(ER_SP_LILABEL_MISMATCH, MYF(0), "LEAVE", (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_jump *i;
              uint ip= sp->instructions();
              uint n;
              /*
                When jumping to a BEGIN-END block end, the target jump
                points to the block hpop/cpop cleanup instructions,
                so we should exclude the block context here.
                When jumping to something else (i.e., SP_LAB_ITER),
                there are no hpop/cpop at the jump destination,
                so we should include the block context here for cleanup.
              */
              bool exclusive= (lab->type == SP_LAB_BEGIN);

              n= ctx->diff_handlers(lab->ctx, exclusive);
              if (n)
              {
                sp_instr_hpop *hpop= new sp_instr_hpop(ip++, ctx, n);
                if (hpop == NULL)
                  MYSQL_YYABORT;
                sp->add_instr(hpop);
              }
              n= ctx->diff_cursors(lab->ctx, exclusive);
              if (n)
              {
                sp_instr_cpop *cpop= new sp_instr_cpop(ip++, ctx, n);
                if (cpop == NULL)
                  MYSQL_YYABORT;
                sp->add_instr(cpop);
              }
              i= new sp_instr_jump(ip, ctx);
              if (i == NULL)
                MYSQL_YYABORT;
              sp->push_backpatch(i, lab);  /* Jumping forward */
              sp->add_instr(i);
            }
          }
    break;

  case 292:

/* Line 1455 of yacc.c  */
#line 3505 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_label_t *lab= ctx->find_label((yyvsp[(2) - (2)].lex_str).str);

            if (! lab || lab->type != SP_LAB_ITER)
            {
              my_error(ER_SP_LILABEL_MISMATCH, MYF(0), "ITERATE", (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_jump *i;
              uint ip= sp->instructions();
              uint n;

              n= ctx->diff_handlers(lab->ctx, FALSE);  /* Inclusive the dest. */
              if (n)
              {
                sp_instr_hpop *hpop= new sp_instr_hpop(ip++, ctx, n);
                if (hpop == NULL ||
                    sp->add_instr(hpop))
                  MYSQL_YYABORT;
              }
              n= ctx->diff_cursors(lab->ctx, FALSE);  /* Inclusive the dest. */
              if (n)
              {
                sp_instr_cpop *cpop= new sp_instr_cpop(ip++, ctx, n);
                if (cpop == NULL ||
                    sp->add_instr(cpop))
                  MYSQL_YYABORT;
              }
              i= new sp_instr_jump(ip, ctx, lab->ip); /* Jump back */
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
          }
    break;

  case 293:

/* Line 1455 of yacc.c  */
#line 3548 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint offset;
            sp_instr_copen *i;

            if (! lex->spcont->find_cursor(&(yyvsp[(2) - (2)].lex_str), &offset))
            {
              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            i= new sp_instr_copen(sp->instructions(), lex->spcont, offset);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 294:

/* Line 1455 of yacc.c  */
#line 3568 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint offset;
            sp_instr_cfetch *i;

            if (! lex->spcont->find_cursor(&(yyvsp[(3) - (4)].lex_str), &offset))
            {
              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(3) - (4)].lex_str).str);
              MYSQL_YYABORT;
            }
            i= new sp_instr_cfetch(sp->instructions(), lex->spcont, offset);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 295:

/* Line 1455 of yacc.c  */
#line 3585 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 296:

/* Line 1455 of yacc.c  */
#line 3590 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint offset;
            sp_instr_cclose *i;

            if (! lex->spcont->find_cursor(&(yyvsp[(2) - (2)].lex_str), &offset))
            {
              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            i= new sp_instr_cclose(sp->instructions(), lex->spcont,  offset);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 300:

/* Line 1455 of yacc.c  */
#line 3616 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *spc= lex->spcont;
            sp_variable_t *spv;

            if (!spc || !(spv = spc->find_variable(&(yyvsp[(1) - (1)].lex_str))))
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              /* An SP local variable */
              sp_instr_cfetch *i= (sp_instr_cfetch *)sp->last_instruction();

              i->add_to_varlist(spv);
            }
          }
    break;

  case 301:

/* Line 1455 of yacc.c  */
#line 3636 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *spc= lex->spcont;
            sp_variable_t *spv;

            if (!spc || !(spv = spc->find_variable(&(yyvsp[(3) - (3)].lex_str))))
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              /* An SP local variable */
              sp_instr_cfetch *i= (sp_instr_cfetch *)sp->last_instruction();

              i->add_to_varlist(spv);
            }
          }
    break;

  case 302:

/* Line 1455 of yacc.c  */
#line 3658 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sphead->reset_lex(YYTHD); }
    break;

  case 303:

/* Line 1455 of yacc.c  */
#line 3660 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            uint ip= sp->instructions();
            sp_instr_jump_if_not *i = new sp_instr_jump_if_not(ip, ctx,
                                                               (yyvsp[(2) - (3)].item), lex);
            if (i == NULL ||
                sp->push_backpatch(i, ctx->push_label((char *)"", 0)) ||
                sp->add_cont_backpatch(i) ||
                sp->add_instr(i))
              MYSQL_YYABORT;
            if (sp->restore_lex(YYTHD))
              MYSQL_YYABORT;
          }
    break;

  case 304:

/* Line 1455 of yacc.c  */
#line 3676 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            sp_head *sp= Lex->sphead;
            sp_pcontext *ctx= Lex->spcont;
            uint ip= sp->instructions();
            sp_instr_jump *i = new sp_instr_jump(ip, ctx);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
            sp->backpatch(ctx->pop_label());
            sp->push_backpatch(i, ctx->push_label((char *)"", 0));
          }
    break;

  case 305:

/* Line 1455 of yacc.c  */
#line 3688 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sphead->backpatch(lex->spcont->pop_label());
          }
    break;

  case 311:

/* Line 1455 of yacc.c  */
#line 3708 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            case_stmt_action_case(lex);
            lex->sphead->reset_lex(YYTHD); /* For expr $3 */
          }
    break;

  case 312:

/* Line 1455 of yacc.c  */
#line 3714 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (case_stmt_action_expr(lex, (yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;

            /* For expr $3 */
            if (lex->sphead->restore_lex(YYTHD))
              MYSQL_YYABORT;
          }
    break;

  case 313:

/* Line 1455 of yacc.c  */
#line 3727 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            case_stmt_action_end_case(lex, true);
          }
    break;

  case 314:

/* Line 1455 of yacc.c  */
#line 3735 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            case_stmt_action_case(lex);
          }
    break;

  case 315:

/* Line 1455 of yacc.c  */
#line 3743 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            case_stmt_action_end_case(lex, false);
          }
    break;

  case 320:

/* Line 1455 of yacc.c  */
#line 3761 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sphead->reset_lex(YYTHD); /* For expr $3 */
          }
    break;

  case 321:

/* Line 1455 of yacc.c  */
#line 3765 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* Simple case: <caseval> = <whenval> */

            LEX *lex= Lex;
            if (case_stmt_action_when(lex, (yyvsp[(3) - (3)].item), true))
              MYSQL_YYABORT;
            /* For expr $3 */
            if (lex->sphead->restore_lex(YYTHD))
              MYSQL_YYABORT;
          }
    break;

  case 322:

/* Line 1455 of yacc.c  */
#line 3777 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (case_stmt_action_then(lex))
              MYSQL_YYABORT;
          }
    break;

  case 323:

/* Line 1455 of yacc.c  */
#line 3786 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sphead->reset_lex(YYTHD); /* For expr $3 */
          }
    break;

  case 324:

/* Line 1455 of yacc.c  */
#line 3790 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (case_stmt_action_when(lex, (yyvsp[(3) - (3)].item), false))
              MYSQL_YYABORT;
            /* For expr $3 */
            if (lex->sphead->restore_lex(YYTHD))
              MYSQL_YYABORT;
          }
    break;

  case 325:

/* Line 1455 of yacc.c  */
#line 3800 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (case_stmt_action_then(lex))
              MYSQL_YYABORT;
          }
    break;

  case 326:

/* Line 1455 of yacc.c  */
#line 3809 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint ip= sp->instructions();
            sp_instr_error *i= new sp_instr_error(ip, lex->spcont,
                                                  ER_SP_CASE_NOT_FOUND);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 328:

/* Line 1455 of yacc.c  */
#line 3824 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *ctx= lex->spcont;
            sp_label_t *lab= ctx->find_label((yyvsp[(1) - (2)].lex_str).str);

            if (lab)
            {
              my_error(ER_SP_LABEL_REDEFINE, MYF(0), (yyvsp[(1) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              lab= lex->spcont->push_label((yyvsp[(1) - (2)].lex_str).str,
                                           lex->sphead->instructions());
              lab->type= SP_LAB_ITER;
            }
          }
    break;

  case 329:

/* Line 1455 of yacc.c  */
#line 3842 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_label_t *lab= lex->spcont->pop_label();

            if ((yyvsp[(5) - (5)].lex_str).str)
            {
              if (my_strcasecmp(system_charset_info, (yyvsp[(5) - (5)].lex_str).str, lab->name) != 0)
              {
                my_error(ER_SP_LABEL_MISMATCH, MYF(0), (yyvsp[(5) - (5)].lex_str).str);
                MYSQL_YYABORT;
              }
            }
            lex->sphead->backpatch(lab);
          }
    break;

  case 330:

/* Line 1455 of yacc.c  */
#line 3859 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 331:

/* Line 1455 of yacc.c  */
#line 3860 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 332:

/* Line 1455 of yacc.c  */
#line 3865 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *ctx= lex->spcont;
            sp_label_t *lab= ctx->find_label((yyvsp[(1) - (2)].lex_str).str);

            if (lab)
            {
              my_error(ER_SP_LABEL_REDEFINE, MYF(0), (yyvsp[(1) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }

            lab= lex->spcont->push_label((yyvsp[(1) - (2)].lex_str).str,
                                         lex->sphead->instructions());
            lab->type= SP_LAB_BEGIN;
          }
    break;

  case 333:

/* Line 1455 of yacc.c  */
#line 3881 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_label_t *lab= lex->spcont->pop_label();

            if ((yyvsp[(5) - (5)].lex_str).str)
            {
              if (my_strcasecmp(system_charset_info, (yyvsp[(5) - (5)].lex_str).str, lab->name) != 0)
              {
                my_error(ER_SP_LABEL_MISMATCH, MYF(0), (yyvsp[(5) - (5)].lex_str).str);
                MYSQL_YYABORT;
              }
            }
          }
    break;

  case 334:

/* Line 1455 of yacc.c  */
#line 3897 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* Unlabeled blocks get a secret label. */
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label_t *lab= lex->spcont->push_label((char *)"", ip);
            lab->type= SP_LAB_BEGIN;
          }
    break;

  case 335:

/* Line 1455 of yacc.c  */
#line 3904 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->spcont->pop_label();
          }
    break;

  case 336:

/* Line 1455 of yacc.c  */
#line 3912 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* QQ This is just a dummy for grouping declarations and statements
              together. No [[NOT] ATOMIC] yet, and we need to figure out how
              make it coexist with the existing BEGIN COMMIT/ROLLBACK. */
            LEX *lex= Lex;
            lex->spcont= lex->spcont->push_context(LABEL_DEFAULT_SCOPE);
          }
    break;

  case 337:

/* Line 1455 of yacc.c  */
#line 3921 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_instr *i;

            sp->backpatch(ctx->last_label()); /* We always have a label */
            if ((yyvsp[(3) - (5)].spblock).hndlrs)
            {
              i= new sp_instr_hpop(sp->instructions(), ctx, (yyvsp[(3) - (5)].spblock).hndlrs);
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
            if ((yyvsp[(3) - (5)].spblock).curs)
            {
              i= new sp_instr_cpop(sp->instructions(), ctx, (yyvsp[(3) - (5)].spblock).curs);
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
            lex->spcont= ctx->pop_context();
          }
    break;

  case 338:

/* Line 1455 of yacc.c  */
#line 3949 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label_t *lab= lex->spcont->last_label();  /* Jumping back */
            sp_instr_jump *i = new sp_instr_jump(ip, lex->spcont, lab->ip);
            if (i == NULL ||
                lex->sphead->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 339:

/* Line 1455 of yacc.c  */
#line 3959 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sphead->reset_lex(YYTHD); }
    break;

  case 340:

/* Line 1455 of yacc.c  */
#line 3961 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint ip= sp->instructions();
            sp_instr_jump_if_not *i = new sp_instr_jump_if_not(ip, lex->spcont,
                                                               (yyvsp[(3) - (4)].item), lex);
            if (i == NULL ||
                /* Jumping forward */
                sp->push_backpatch(i, lex->spcont->last_label()) ||
                sp->new_cont_backpatch(i) ||
                sp->add_instr(i))
              MYSQL_YYABORT;
            if (sp->restore_lex(YYTHD))
              MYSQL_YYABORT;
          }
    break;

  case 341:

/* Line 1455 of yacc.c  */
#line 3977 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label_t *lab= lex->spcont->last_label();  /* Jumping back */
            sp_instr_jump *i = new sp_instr_jump(ip, lex->spcont, lab->ip);
            if (i == NULL ||
                lex->sphead->add_instr(i))
              MYSQL_YYABORT;
            lex->sphead->do_cont_backpatch();
          }
    break;

  case 342:

/* Line 1455 of yacc.c  */
#line 3988 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sphead->reset_lex(YYTHD); }
    break;

  case 343:

/* Line 1455 of yacc.c  */
#line 3990 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label_t *lab= lex->spcont->last_label();  /* Jumping back */
            sp_instr_jump_if_not *i = new sp_instr_jump_if_not(ip, lex->spcont,
                                                               (yyvsp[(5) - (7)].item), lab->ip,
                                                               lex);
            if (i == NULL ||
                lex->sphead->add_instr(i))
              MYSQL_YYABORT;
            if (lex->sphead->restore_lex(YYTHD))
              MYSQL_YYABORT;
            /* We can shortcut the cont_backpatch here */
            i->m_cont_dest= ip+1;
          }
    break;

  case 344:

/* Line 1455 of yacc.c  */
#line 4009 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->trg_chistics.action_time= TRG_ACTION_BEFORE; }
    break;

  case 345:

/* Line 1455 of yacc.c  */
#line 4011 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->trg_chistics.action_time= TRG_ACTION_AFTER; }
    break;

  case 346:

/* Line 1455 of yacc.c  */
#line 4016 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->trg_chistics.event= TRG_EVENT_INSERT; }
    break;

  case 347:

/* Line 1455 of yacc.c  */
#line 4018 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->trg_chistics.event= TRG_EVENT_UPDATE; }
    break;

  case 348:

/* Line 1455 of yacc.c  */
#line 4020 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->trg_chistics.event= TRG_EVENT_DELETE; }
    break;

  case 352:

/* Line 1455 of yacc.c  */
#line 4054 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 353:

/* Line 1455 of yacc.c  */
#line 4056 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->logfile_group_name= (yyvsp[(4) - (4)].lex_str).str;
          }
    break;

  case 354:

/* Line 1455 of yacc.c  */
#line 4066 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            Lex->alter_tablespace_info->ts_alter_tablespace_type= ALTER_TABLESPACE_ADD_FILE; 
          }
    break;

  case 355:

/* Line 1455 of yacc.c  */
#line 4072 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            Lex->alter_tablespace_info->ts_alter_tablespace_type= ALTER_TABLESPACE_DROP_FILE; 
          }
    break;

  case 360:

/* Line 1455 of yacc.c  */
#line 4095 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 407:

/* Line 1455 of yacc.c  */
#line 4189 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->data_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 408:

/* Line 1455 of yacc.c  */
#line 4197 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->undo_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 409:

/* Line 1455 of yacc.c  */
#line 4205 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->redo_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 410:

/* Line 1455 of yacc.c  */
#line 4213 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info= new st_alter_tablespace();
            if (lex->alter_tablespace_info == NULL)
              MYSQL_YYABORT;
            lex->alter_tablespace_info->tablespace_name= (yyvsp[(1) - (1)].lex_str).str;
            lex->sql_command= SQLCOM_ALTER_TABLESPACE;
          }
    break;

  case 411:

/* Line 1455 of yacc.c  */
#line 4225 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info= new st_alter_tablespace();
            if (lex->alter_tablespace_info == NULL)
              MYSQL_YYABORT;
            lex->alter_tablespace_info->logfile_group_name= (yyvsp[(1) - (1)].lex_str).str;
            lex->sql_command= SQLCOM_ALTER_TABLESPACE;
          }
    break;

  case 412:

/* Line 1455 of yacc.c  */
#line 4237 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_READ_ONLY;
          }
    break;

  case 413:

/* Line 1455 of yacc.c  */
#line 4242 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_READ_WRITE;
          }
    break;

  case 414:

/* Line 1455 of yacc.c  */
#line 4247 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_NOT_ACCESSIBLE;
          }
    break;

  case 415:

/* Line 1455 of yacc.c  */
#line 4255 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->initial_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 416:

/* Line 1455 of yacc.c  */
#line 4263 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->autoextend_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 417:

/* Line 1455 of yacc.c  */
#line 4271 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->max_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 418:

/* Line 1455 of yacc.c  */
#line 4279 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->extent_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 419:

/* Line 1455 of yacc.c  */
#line 4287 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->undo_buffer_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 420:

/* Line 1455 of yacc.c  */
#line 4295 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->redo_buffer_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 421:

/* Line 1455 of yacc.c  */
#line 4303 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->nodegroup_id != UNDEF_NODEGROUP)
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"NODEGROUP");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->nodegroup_id= (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 422:

/* Line 1455 of yacc.c  */
#line 4316 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->ts_comment != NULL)
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"COMMENT");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->ts_comment= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 423:

/* Line 1455 of yacc.c  */
#line 4329 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->storage_engine != NULL)
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),
                       "STORAGE ENGINE");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->storage_engine= (yyvsp[(4) - (4)].db_type);
          }
    break;

  case 426:

/* Line 1455 of yacc.c  */
#line 4348 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->wait_until_completed= TRUE;
          }
    break;

  case 427:

/* Line 1455 of yacc.c  */
#line 4353 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!(lex->alter_tablespace_info->wait_until_completed))
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"NO_WAIT");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->wait_until_completed= FALSE;
          }
    break;

  case 428:

/* Line 1455 of yacc.c  */
#line 4365 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ulonglong_number)= (yyvsp[(1) - (1)].ulong_num);}
    break;

  case 429:

/* Line 1455 of yacc.c  */
#line 4367 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            ulonglong number;
            uint text_shift_number= 0;
            longlong prefix_number;
            char *start_ptr= (yyvsp[(1) - (1)].lex_str).str;
            uint str_len= (yyvsp[(1) - (1)].lex_str).length;
            char *end_ptr= start_ptr + str_len;
            int error;
            prefix_number= my_strtoll10(start_ptr, &end_ptr, &error);
            if ((start_ptr + str_len - 1) == end_ptr)
            {
              switch (end_ptr[0])
              {
                case 'g':
                case 'G':
                  text_shift_number+=10;
                case 'm':
                case 'M':
                  text_shift_number+=10;
                case 'k':
                case 'K':
                  text_shift_number+=10;
                  break;
                default:
                {
                  my_error(ER_WRONG_SIZE_NUMBER, MYF(0));
                  MYSQL_YYABORT;
                }
              }
              if (prefix_number >> 31)
              {
                my_error(ER_SIZE_OVERFLOW_ERROR, MYF(0));
                MYSQL_YYABORT;
              }
              number= prefix_number << text_shift_number;
            }
            else
            {
              my_error(ER_WRONG_SIZE_NUMBER, MYF(0));
              MYSQL_YYABORT;
            }
            (yyval.ulonglong_number)= number;
          }
    break;

  case 430:

/* Line 1455 of yacc.c  */
#line 4417 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 431:

/* Line 1455 of yacc.c  */
#line 4420 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 432:

/* Line 1455 of yacc.c  */
#line 4422 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            TABLE_LIST *src_table;
            LEX *lex= thd->lex;

            lex->create_info.options|= HA_LEX_CREATE_TABLE_LIKE;
            src_table= lex->select_lex.add_table_to_list(thd, (yyvsp[(2) - (2)].table), NULL, 0,
                                                         TL_READ,
                                                         MDL_SHARED_READ);
            if (! src_table)
              MYSQL_YYABORT;
            /* CREATE TABLE ... LIKE is not allowed for views. */
            src_table->required_type= FRMTYPE_TABLE;
          }
    break;

  case 433:

/* Line 1455 of yacc.c  */
#line 4437 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            TABLE_LIST *src_table;
            LEX *lex= thd->lex;

            lex->create_info.options|= HA_LEX_CREATE_TABLE_LIKE;
            src_table= lex->select_lex.add_table_to_list(thd, (yyvsp[(3) - (4)].table), NULL, 0,
                                                         TL_READ,
                                                         MDL_SHARED_READ);
            if (! src_table)
              MYSQL_YYABORT;
            /* CREATE TABLE ... LIKE is not allowed for views. */
            src_table->required_type= FRMTYPE_TABLE;
          }
    break;

  case 434:

/* Line 1455 of yacc.c  */
#line 4455 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.option_list= NULL;
          }
    break;

  case 435:

/* Line 1455 of yacc.c  */
#line 4460 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 436:

/* Line 1455 of yacc.c  */
#line 4463 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 437:

/* Line 1455 of yacc.c  */
#line 4464 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 438:

/* Line 1455 of yacc.c  */
#line 4468 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 439:

/* Line 1455 of yacc.c  */
#line 4470 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->set_braces(0);}
    break;

  case 440:

/* Line 1455 of yacc.c  */
#line 4471 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 441:

/* Line 1455 of yacc.c  */
#line 4473 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 442:

/* Line 1455 of yacc.c  */
#line 4474 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 443:

/* Line 1455 of yacc.c  */
#line 4479 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              Remove all tables used in PARTITION clause from the global table
              list. Partitioning with subqueries is not allowed anyway.
            */
            TABLE_LIST *last_non_sel_table= Lex->create_last_non_select_table;
            last_non_sel_table->next_global= 0;
            Lex->query_tables_last= &last_non_sel_table->next_global;
          }
    break;

  case 444:

/* Line 1455 of yacc.c  */
#line 4515 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 446:

/* Line 1455 of yacc.c  */
#line 4521 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info= new partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            if (lex->sql_command == SQLCOM_ALTER_TABLE)
            {
              lex->alter_info.flags|= ALTER_PARTITION;
            }
          }
    break;

  case 448:

/* Line 1455 of yacc.c  */
#line 4539 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
#ifdef WITH_PARTITION_STORAGE_ENGINE
            LEX_STRING partition_name={C_STRING_WITH_LEN("partition")};
            if (!plugin_is_ready(&partition_name, MYSQL_STORAGE_ENGINE_PLUGIN))
            {
              my_error(ER_OPTION_PREVENTS_STATEMENT, MYF(0),
                      "--skip-partition");
              MYSQL_YYABORT;
            }
#else
            my_error(ER_FEATURE_DISABLED, MYF(0), "partitioning",
                    "--with-plugin-partition");
            MYSQL_YYABORT;
#endif
          }
    break;

  case 449:

/* Line 1455 of yacc.c  */
#line 4558 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!lex->part_info)
            {
              my_parse_error(ER(ER_PARTITION_ENTRY_ERROR));
              MYSQL_YYABORT;
            }
            /*
              We enter here when opening the frm file to translate
              partition info string into part_info data structure.
            */
          }
    break;

  case 450:

/* Line 1455 of yacc.c  */
#line 4570 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 452:

/* Line 1455 of yacc.c  */
#line 4579 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->list_of_part_fields= TRUE;
            part_info->column_list= FALSE;
            part_info->part_type= HASH_PARTITION;
          }
    break;

  case 453:

/* Line 1455 of yacc.c  */
#line 4586 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->part_type= HASH_PARTITION; }
    break;

  case 454:

/* Line 1455 of yacc.c  */
#line 4587 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 455:

/* Line 1455 of yacc.c  */
#line 4589 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->part_type= RANGE_PARTITION; }
    break;

  case 456:

/* Line 1455 of yacc.c  */
#line 4591 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->part_type= RANGE_PARTITION; }
    break;

  case 457:

/* Line 1455 of yacc.c  */
#line 4593 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->part_type= LIST_PARTITION; }
    break;

  case 458:

/* Line 1455 of yacc.c  */
#line 4595 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->part_type= LIST_PARTITION; }
    break;

  case 459:

/* Line 1455 of yacc.c  */
#line 4599 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 460:

/* Line 1455 of yacc.c  */
#line 4601 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->linear_hash_ind= TRUE;}
    break;

  case 461:

/* Line 1455 of yacc.c  */
#line 4605 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 462:

/* Line 1455 of yacc.c  */
#line 4606 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 463:

/* Line 1455 of yacc.c  */
#line 4610 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 464:

/* Line 1455 of yacc.c  */
#line 4611 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 465:

/* Line 1455 of yacc.c  */
#line 4616 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->num_columns++;
            if (part_info->part_field_list.push_back((yyvsp[(1) - (1)].lex_str).str))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
            if (part_info->num_columns > MAX_REF_PARTS)
            {
              my_error(ER_TOO_MANY_PARTITION_FUNC_FIELDS_ERROR, MYF(0),
                       "list of partition fields");
              MYSQL_YYABORT;
            }
          }
    break;

  case 466:

/* Line 1455 of yacc.c  */
#line 4635 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->column_list= TRUE;
            part_info->list_of_part_fields= TRUE;
          }
    break;

  case 467:

/* Line 1455 of yacc.c  */
#line 4645 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->set_part_expr((yyvsp[(2) - (5)].simple_string)+1, (yyvsp[(3) - (5)].item), (yyvsp[(4) - (5)].simple_string), FALSE))
            { MYSQL_YYABORT; }
            part_info->num_columns= 1;
            part_info->column_list= FALSE;
          }
    break;

  case 468:

/* Line 1455 of yacc.c  */
#line 4656 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->part_info->set_part_expr((yyvsp[(2) - (5)].simple_string)+1, (yyvsp[(3) - (5)].item), (yyvsp[(4) - (5)].simple_string), TRUE))
            { MYSQL_YYABORT; }
          }
    break;

  case 469:

/* Line 1455 of yacc.c  */
#line 4664 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 470:

/* Line 1455 of yacc.c  */
#line 4666 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            uint num_parts= (yyvsp[(2) - (2)].ulong_num);
            partition_info *part_info= Lex->part_info;
            if (num_parts == 0)
            {
              my_error(ER_NO_PARTS_ERROR, MYF(0), "partitions");
              MYSQL_YYABORT;
            }

            part_info->num_parts= num_parts;
            part_info->use_default_num_partitions= FALSE;
          }
    break;

  case 471:

/* Line 1455 of yacc.c  */
#line 4681 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 472:

/* Line 1455 of yacc.c  */
#line 4683 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->subpart_type= HASH_PARTITION; }
    break;

  case 473:

/* Line 1455 of yacc.c  */
#line 4684 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 474:

/* Line 1455 of yacc.c  */
#line 4687 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->subpart_type= HASH_PARTITION;
            part_info->list_of_subpart_fields= TRUE;
          }
    break;

  case 475:

/* Line 1455 of yacc.c  */
#line 4692 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 476:

/* Line 1455 of yacc.c  */
#line 4696 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 477:

/* Line 1455 of yacc.c  */
#line 4697 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 478:

/* Line 1455 of yacc.c  */
#line 4702 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->subpart_field_list.push_back((yyvsp[(1) - (1)].lex_str).str))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
            if (part_info->subpart_field_list.elements > MAX_REF_PARTS)
            {
              my_error(ER_TOO_MANY_PARTITION_FUNC_FIELDS_ERROR, MYF(0),
                       "list of subpartition fields");
              MYSQL_YYABORT;
            }
          }
    break;

  case 479:

/* Line 1455 of yacc.c  */
#line 4720 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            bool not_corr_func;
            not_corr_func= !lex->safe_to_cache_query;
            lex->safe_to_cache_query= 1;
            if (not_corr_func)
            {
              my_parse_error(ER(ER_WRONG_EXPR_IN_PARTITION_FUNC_ERROR));
              MYSQL_YYABORT;
            }
            (yyval.item)=(yyvsp[(1) - (1)].item);
          }
    break;

  case 480:

/* Line 1455 of yacc.c  */
#line 4735 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 481:

/* Line 1455 of yacc.c  */
#line 4737 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            uint num_parts= (yyvsp[(2) - (2)].ulong_num);
            LEX *lex= Lex;
            if (num_parts == 0)
            {
              my_error(ER_NO_PARTS_ERROR, MYF(0), "subpartitions");
              MYSQL_YYABORT;
            }
            lex->part_info->num_subparts= num_parts;
            lex->part_info->use_default_num_subpartitions= FALSE;
          }
    break;

  case 482:

/* Line 1455 of yacc.c  */
#line 4752 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->part_type == RANGE_PARTITION)
            {
              my_error(ER_PARTITIONS_MUST_BE_DEFINED_ERROR, MYF(0),
                       "RANGE");
              MYSQL_YYABORT;
            }
            else if (part_info->part_type == LIST_PARTITION)
            {
              my_error(ER_PARTITIONS_MUST_BE_DEFINED_ERROR, MYF(0),
                       "LIST");
              MYSQL_YYABORT;
            }
          }
    break;

  case 483:

/* Line 1455 of yacc.c  */
#line 4768 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            uint count_curr_parts= part_info->partitions.elements;
            if (part_info->num_parts != 0)
            {
              if (part_info->num_parts !=
                  count_curr_parts)
              {
                my_parse_error(ER(ER_PARTITION_WRONG_NO_PART_ERROR));
                MYSQL_YYABORT;
              }
            }
            else if (count_curr_parts > 0)
            {
              part_info->num_parts= count_curr_parts;
            }
            part_info->count_curr_subparts= 0;
          }
    break;

  case 484:

/* Line 1455 of yacc.c  */
#line 4789 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 485:

/* Line 1455 of yacc.c  */
#line 4790 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 486:

/* Line 1455 of yacc.c  */
#line 4795 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            partition_element *p_elem= new partition_element();

            if (!p_elem || part_info->partitions.push_back(p_elem))
            {
              mem_alloc_error(sizeof(partition_element));
              MYSQL_YYABORT;
            }
            p_elem->part_state= PART_NORMAL;
            part_info->curr_part_elem= p_elem;
            part_info->current_partition= p_elem;
            part_info->use_default_partitions= FALSE;
            part_info->use_default_num_partitions= FALSE;
          }
    break;

  case 487:

/* Line 1455 of yacc.c  */
#line 4814 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 488:

/* Line 1455 of yacc.c  */
#line 4819 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            partition_element *p_elem= part_info->curr_part_elem;
            p_elem->partition_name= (yyvsp[(1) - (1)].lex_str).str;
          }
    break;

  case 489:

/* Line 1455 of yacc.c  */
#line 4828 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->part_type == RANGE_PARTITION)
              {
                my_error(ER_PARTITION_REQUIRES_VALUES_ERROR, MYF(0),
                         "RANGE", "LESS THAN");
                MYSQL_YYABORT;
              }
              if (part_info->part_type == LIST_PARTITION)
              {
                my_error(ER_PARTITION_REQUIRES_VALUES_ERROR, MYF(0),
                         "LIST", "IN");
                MYSQL_YYABORT;
              }
            }
            else
              part_info->part_type= HASH_PARTITION;
          }
    break;

  case 490:

/* Line 1455 of yacc.c  */
#line 4850 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->part_type != RANGE_PARTITION)
              {
                my_error(ER_PARTITION_WRONG_VALUES_ERROR, MYF(0),
                         "RANGE", "LESS THAN");
                MYSQL_YYABORT;
              }
            }
            else
              part_info->part_type= RANGE_PARTITION;
          }
    break;

  case 491:

/* Line 1455 of yacc.c  */
#line 4865 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 492:

/* Line 1455 of yacc.c  */
#line 4867 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->part_type != LIST_PARTITION)
              {
                my_error(ER_PARTITION_WRONG_VALUES_ERROR, MYF(0),
                               "LIST", "IN");
                MYSQL_YYABORT;
              }
            }
            else
              part_info->part_type= LIST_PARTITION;
          }
    break;

  case 493:

/* Line 1455 of yacc.c  */
#line 4882 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 494:

/* Line 1455 of yacc.c  */
#line 4887 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;

            if (part_info->num_columns &&
                part_info->num_columns != 1U)
            {
              part_info->print_debug("Kilroy II", NULL);
              my_parse_error(ER(ER_PARTITION_COLUMN_LIST_ERROR));
              MYSQL_YYABORT;
            }
            else
              part_info->num_columns= 1U;
            if (part_info->init_column_part())
            {
              MYSQL_YYABORT;
            }
            if (part_info->add_max_value())
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 495:

/* Line 1455 of yacc.c  */
#line 4908 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 496:

/* Line 1455 of yacc.c  */
#line 4913 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            part_info->print_debug("part_values_in: part_value_item", NULL);

            if (part_info->num_columns != 1U)
            {
              if (!lex->is_partition_management() ||
                  part_info->num_columns == 0 ||
                  part_info->num_columns > MAX_REF_PARTS)
              {
                part_info->print_debug("Kilroy III", NULL);
                my_parse_error(ER(ER_PARTITION_COLUMN_LIST_ERROR));
                MYSQL_YYABORT;
              }
              /*
                Reorganize the current large array into a list of small
                arrays with one entry in each array. This can happen
                in the first partition of an ALTER TABLE statement where
                we ADD or REORGANIZE partitions. Also can only happen
                for LIST partitions.
              */
              if (part_info->reorganize_into_single_field_col_val())
              {
                MYSQL_YYABORT;
              }
            }
          }
    break;

  case 497:

/* Line 1455 of yacc.c  */
#line 4942 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->num_columns < 2U)
            {
              my_parse_error(ER(ER_ROW_SINGLE_PARTITION_FIELD_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 498:

/* Line 1455 of yacc.c  */
#line 4953 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 499:

/* Line 1455 of yacc.c  */
#line 4954 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 500:

/* Line 1455 of yacc.c  */
#line 4959 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->print_debug("( part_value_item", NULL);
            /* Initialisation code needed for each list of value expressions */
            if (!(part_info->part_type == LIST_PARTITION &&
                  part_info->num_columns == 1U) &&
                 part_info->init_column_part())
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 501:

/* Line 1455 of yacc.c  */
#line 4970 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 502:

/* Line 1455 of yacc.c  */
#line 4972 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->print_debug(") part_value_item", NULL);
            if (part_info->num_columns == 0)
              part_info->num_columns= part_info->curr_list_object;
            if (part_info->num_columns != part_info->curr_list_object)
            {
              /*
                All value items lists must be of equal length, in some cases
                which is covered by the above if-statement we don't know yet
                how many columns is in the partition so the assignment above
                ensures that we only report errors when we know we have an
                error.
              */
              part_info->print_debug("Kilroy I", NULL);
              my_parse_error(ER(ER_PARTITION_COLUMN_LIST_ERROR));
              MYSQL_YYABORT;
            }
            part_info->curr_list_object= 0;
          }
    break;

  case 503:

/* Line 1455 of yacc.c  */
#line 4995 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 504:

/* Line 1455 of yacc.c  */
#line 4996 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 505:

/* Line 1455 of yacc.c  */
#line 5001 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->part_type == LIST_PARTITION)
            {
              my_parse_error(ER(ER_MAXVALUE_IN_VALUES_IN));
              MYSQL_YYABORT;
            }
            if (part_info->add_max_value())
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 506:

/* Line 1455 of yacc.c  */
#line 5014 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            Item *part_expr= (yyvsp[(1) - (1)].item);

            if (!lex->safe_to_cache_query)
            {
              my_parse_error(ER(ER_WRONG_EXPR_IN_PARTITION_FUNC_ERROR));
              MYSQL_YYABORT;
            }
            if (part_info->add_column_list_value(YYTHD, part_expr))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 507:

/* Line 1455 of yacc.c  */
#line 5034 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->num_subparts != 0 &&
                !part_info->use_default_subpartitions)
            {
              /*
                We come here when we have defined subpartitions on the first
                partition but not on all the subsequent partitions. 
              */
              my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 508:

/* Line 1455 of yacc.c  */
#line 5048 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->num_subparts != 0)
            {
              if (part_info->num_subparts !=
                  part_info->count_curr_subparts)
              {
                my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
                MYSQL_YYABORT;
              }
            }
            else if (part_info->count_curr_subparts > 0)
            {
              if (part_info->partitions.elements > 1)
              {
                my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
                MYSQL_YYABORT;
              }
              part_info->num_subparts= part_info->count_curr_subparts;
            }
            part_info->count_curr_subparts= 0;
          }
    break;

  case 509:

/* Line 1455 of yacc.c  */
#line 5073 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 510:

/* Line 1455 of yacc.c  */
#line 5074 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 511:

/* Line 1455 of yacc.c  */
#line 5079 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            partition_element *curr_part= part_info->current_partition;
            partition_element *sub_p_elem= new partition_element(curr_part);
            if (part_info->use_default_subpartitions &&
                part_info->partitions.elements >= 2)
            {
              /*
                create table t1 (a int)
                partition by list (a) subpartition by hash (a)
                (partition p0 values in (1),
                 partition p1 values in (2) subpartition sp11);
                causes use to arrive since we are on the second
                partition, but still use_default_subpartitions
                is set. When we come here we're processing at least
                the second partition (the current partition processed
                have already been put into the partitions list.
              */
              my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
              MYSQL_YYABORT;
            }
            if (!sub_p_elem ||
             curr_part->subpartitions.push_back(sub_p_elem))
            {
              mem_alloc_error(sizeof(partition_element));
              MYSQL_YYABORT;
            }
            part_info->curr_part_elem= sub_p_elem;
            part_info->use_default_subpartitions= FALSE;
            part_info->use_default_num_subpartitions= FALSE;
            part_info->count_curr_subparts++;
          }
    break;

  case 512:

/* Line 1455 of yacc.c  */
#line 5111 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 513:

/* Line 1455 of yacc.c  */
#line 5116 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->partition_name= (yyvsp[(1) - (1)].lex_str).str; }
    break;

  case 514:

/* Line 1455 of yacc.c  */
#line 5120 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 515:

/* Line 1455 of yacc.c  */
#line 5121 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 516:

/* Line 1455 of yacc.c  */
#line 5125 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 517:

/* Line 1455 of yacc.c  */
#line 5126 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 518:

/* Line 1455 of yacc.c  */
#line 5131 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->tablespace_name= (yyvsp[(3) - (3)].lex_str).str; }
    break;

  case 519:

/* Line 1455 of yacc.c  */
#line 5133 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->curr_part_elem->engine_type= (yyvsp[(4) - (4)].db_type);
            part_info->default_engine_type= (yyvsp[(4) - (4)].db_type);
          }
    break;

  case 520:

/* Line 1455 of yacc.c  */
#line 5139 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info->curr_part_elem->connect_string.str= (yyvsp[(3) - (3)].lex_str).str;
            lex->part_info->curr_part_elem->connect_string.length= (yyvsp[(3) - (3)].lex_str).length;
          }
    break;

  case 521:

/* Line 1455 of yacc.c  */
#line 5145 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->nodegroup_id= (uint16) (yyvsp[(3) - (3)].ulong_num); }
    break;

  case 522:

/* Line 1455 of yacc.c  */
#line 5147 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_max_rows= (ha_rows) (yyvsp[(3) - (3)].ulonglong_number); }
    break;

  case 523:

/* Line 1455 of yacc.c  */
#line 5149 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_min_rows= (ha_rows) (yyvsp[(3) - (3)].ulonglong_number); }
    break;

  case 524:

/* Line 1455 of yacc.c  */
#line 5151 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->data_file_name= (yyvsp[(4) - (4)].lex_str).str; }
    break;

  case 525:

/* Line 1455 of yacc.c  */
#line 5153 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->index_file_name= (yyvsp[(4) - (4)].lex_str).str; }
    break;

  case 526:

/* Line 1455 of yacc.c  */
#line 5155 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_comment= (yyvsp[(3) - (3)].lex_str).str; }
    break;

  case 527:

/* Line 1455 of yacc.c  */
#line 5164 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->sql_command == SQLCOM_INSERT)
              lex->sql_command= SQLCOM_INSERT_SELECT;
            else if (lex->sql_command == SQLCOM_REPLACE)
              lex->sql_command= SQLCOM_REPLACE_SELECT;
            /*
              The following work only with the local list, the global list
              is created correctly in this case
            */
            lex->current_select->table_list.save_and_clear(&lex->save_list);
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 528:

/* Line 1455 of yacc.c  */
#line 5179 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 529:

/* Line 1455 of yacc.c  */
#line 5183 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              The following work only with the local list, the global list
              is created correctly in this case
            */
            Lex->current_select->table_list.push_front(&Lex->save_list);
          }
    break;

  case 530:

/* Line 1455 of yacc.c  */
#line 5193 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 531:

/* Line 1455 of yacc.c  */
#line 5194 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 532:

/* Line 1455 of yacc.c  */
#line 5198 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 533:

/* Line 1455 of yacc.c  */
#line 5199 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 534:

/* Line 1455 of yacc.c  */
#line 5203 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 535:

/* Line 1455 of yacc.c  */
#line 5204 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 536:

/* Line 1455 of yacc.c  */
#line 5208 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 537:

/* Line 1455 of yacc.c  */
#line 5209 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 538:

/* Line 1455 of yacc.c  */
#line 5213 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 539:

/* Line 1455 of yacc.c  */
#line 5214 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(1) - (1)].num);}
    break;

  case 540:

/* Line 1455 of yacc.c  */
#line 5218 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=(yyvsp[(1) - (1)].num); }
    break;

  case 541:

/* Line 1455 of yacc.c  */
#line 5219 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(1) - (2)].num) | (yyvsp[(2) - (2)].num); }
    break;

  case 542:

/* Line 1455 of yacc.c  */
#line 5223 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=HA_LEX_CREATE_TMP_TABLE; }
    break;

  case 543:

/* Line 1455 of yacc.c  */
#line 5227 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 544:

/* Line 1455 of yacc.c  */
#line 5228 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=HA_LEX_CREATE_IF_NOT_EXISTS; }
    break;

  case 552:

/* Line 1455 of yacc.c  */
#line 5249 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.db_type= (yyvsp[(3) - (3)].db_type);
            Lex->create_info.used_fields|= HA_CREATE_USED_ENGINE;
          }
    break;

  case 553:

/* Line 1455 of yacc.c  */
#line 5254 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.max_rows= (yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_MAX_ROWS;
          }
    break;

  case 554:

/* Line 1455 of yacc.c  */
#line 5259 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.min_rows= (yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_MIN_ROWS;
          }
    break;

  case 555:

/* Line 1455 of yacc.c  */
#line 5264 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.avg_row_length=(yyvsp[(3) - (3)].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_AVG_ROW_LENGTH;
          }
    break;

  case 556:

/* Line 1455 of yacc.c  */
#line 5269 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.password=(yyvsp[(3) - (3)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_PASSWORD;
          }
    break;

  case 557:

/* Line 1455 of yacc.c  */
#line 5274 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.comment=(yyvsp[(3) - (3)].lex_str);
            Lex->create_info.used_fields|= HA_CREATE_USED_COMMENT;
          }
    break;

  case 558:

/* Line 1455 of yacc.c  */
#line 5279 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.auto_increment_value=(yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_AUTO;
          }
    break;

  case 559:

/* Line 1455 of yacc.c  */
#line 5284 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            switch((yyvsp[(3) - (3)].ulong_num)) {
            case 0:
                Lex->create_info.table_options|= HA_OPTION_NO_PACK_KEYS;
                break;
            case 1:
                Lex->create_info.table_options|= HA_OPTION_PACK_KEYS;
                break;
            default:
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
            }
            Lex->create_info.used_fields|= HA_CREATE_USED_PACK_KEYS;
          }
    break;

  case 560:

/* Line 1455 of yacc.c  */
#line 5299 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.table_options&=
              ~(HA_OPTION_PACK_KEYS | HA_OPTION_NO_PACK_KEYS);
            Lex->create_info.used_fields|= HA_CREATE_USED_PACK_KEYS;
          }
    break;

  case 561:

/* Line 1455 of yacc.c  */
#line 5305 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_CHECKSUM : HA_OPTION_NO_CHECKSUM;
            Lex->create_info.used_fields|= HA_CREATE_USED_CHECKSUM;
          }
    break;

  case 562:

/* Line 1455 of yacc.c  */
#line 5310 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
             Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_CHECKSUM : HA_OPTION_NO_CHECKSUM;
             Lex->create_info.used_fields|= HA_CREATE_USED_CHECKSUM;
          }
    break;

  case 563:

/* Line 1455 of yacc.c  */
#line 5315 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.used_fields|= HA_CREATE_USED_PAGE_CHECKSUM;
            Lex->create_info.page_checksum= (yyvsp[(3) - (3)].choice);
          }
    break;

  case 564:

/* Line 1455 of yacc.c  */
#line 5320 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_DELAY_KEY_WRITE : HA_OPTION_NO_DELAY_KEY_WRITE;
            Lex->create_info.used_fields|= HA_CREATE_USED_DELAY_KEY_WRITE;
          }
    break;

  case 565:

/* Line 1455 of yacc.c  */
#line 5325 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.row_type= (yyvsp[(3) - (3)].row_type);
            Lex->create_info.used_fields|= HA_CREATE_USED_ROW_FORMAT;
          }
    break;

  case 566:

/* Line 1455 of yacc.c  */
#line 5330 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->select_lex.table_list.save_and_clear(&Lex->save_list);
          }
    break;

  case 567:

/* Line 1455 of yacc.c  */
#line 5334 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              Move the union list to the merge_list and exclude its tables
              from the global list.
            */
            LEX *lex=Lex;
            lex->create_info.merge_list= lex->select_lex.table_list;
            lex->select_lex.table_list= lex->save_list;
            /*
              When excluding union list from the global list we assume that
              elements of the former immediately follow elements which represent
              table being created/altered and parent tables.
            */
            TABLE_LIST *last_non_sel_table= lex->create_last_non_select_table;
            DBUG_ASSERT(last_non_sel_table->next_global ==
                        lex->create_info.merge_list.first);
            last_non_sel_table->next_global= 0;
            Lex->query_tables_last= &last_non_sel_table->next_global;

            lex->create_info.used_fields|= HA_CREATE_USED_UNION;
          }
    break;

  case 570:

/* Line 1455 of yacc.c  */
#line 5358 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.merge_insert_method= (yyvsp[(3) - (3)].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_INSERT_METHOD;
          }
    break;

  case 571:

/* Line 1455 of yacc.c  */
#line 5363 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.data_file_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_DATADIR;
          }
    break;

  case 572:

/* Line 1455 of yacc.c  */
#line 5368 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.index_file_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_INDEXDIR;
          }
    break;

  case 573:

/* Line 1455 of yacc.c  */
#line 5373 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {Lex->create_info.tablespace= (yyvsp[(2) - (2)].lex_str).str;}
    break;

  case 574:

/* Line 1455 of yacc.c  */
#line 5375 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {Lex->create_info.storage_media= HA_SM_DISK;}
    break;

  case 575:

/* Line 1455 of yacc.c  */
#line 5377 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {Lex->create_info.storage_media= HA_SM_MEMORY;}
    break;

  case 576:

/* Line 1455 of yacc.c  */
#line 5379 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.connect_string.str= (yyvsp[(3) - (3)].lex_str).str;
            Lex->create_info.connect_string.length= (yyvsp[(3) - (3)].lex_str).length;
            Lex->create_info.used_fields|= HA_CREATE_USED_CONNECTION;
          }
    break;

  case 577:

/* Line 1455 of yacc.c  */
#line 5385 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.used_fields|= HA_CREATE_USED_KEY_BLOCK_SIZE;
            Lex->create_info.key_block_size= (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 578:

/* Line 1455 of yacc.c  */
#line 5390 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
	    Lex->create_info.used_fields|= HA_CREATE_USED_TRANSACTIONAL;
            Lex->create_info.transactional= (yyvsp[(3) - (3)].choice);
          }
    break;

  case 579:

/* Line 1455 of yacc.c  */
#line 5395 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            new (YYTHD->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), true, &Lex->create_info.option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 580:

/* Line 1455 of yacc.c  */
#line 5401 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            new (YYTHD->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), false, &Lex->create_info.option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 581:

/* Line 1455 of yacc.c  */
#line 5407 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            new (YYTHD->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].ulonglong_number), &Lex->create_info.option_list,
                                  &Lex->option_list_last, YYTHD->mem_root);
          }
    break;

  case 582:

/* Line 1455 of yacc.c  */
#line 5413 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            new (YYTHD->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), &Lex->create_info.option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 583:

/* Line 1455 of yacc.c  */
#line 5422 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            HA_CREATE_INFO *cinfo= &Lex->create_info;
            if ((cinfo->used_fields & HA_CREATE_USED_DEFAULT_CHARSET) &&
                 cinfo->default_table_charset && (yyvsp[(4) - (4)].charset) &&
                 !my_charset_same(cinfo->default_table_charset,(yyvsp[(4) - (4)].charset)))
            {
              my_error(ER_CONFLICTING_DECLARATIONS, MYF(0),
                       "CHARACTER SET ", cinfo->default_table_charset->csname,
                       "CHARACTER SET ", (yyvsp[(4) - (4)].charset)->csname);
              MYSQL_YYABORT;
            }
            Lex->create_info.default_table_charset= (yyvsp[(4) - (4)].charset);
            Lex->create_info.used_fields|= HA_CREATE_USED_DEFAULT_CHARSET;
          }
    break;

  case 584:

/* Line 1455 of yacc.c  */
#line 5440 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            HA_CREATE_INFO *cinfo= &Lex->create_info;
            if ((cinfo->used_fields & HA_CREATE_USED_DEFAULT_CHARSET) &&
                 cinfo->default_table_charset && (yyvsp[(4) - (4)].charset) &&
                 !((yyvsp[(4) - (4)].charset)= merge_charset_and_collation(cinfo->default_table_charset,
                                                   (yyvsp[(4) - (4)].charset))))
            {
              MYSQL_YYABORT;
            }

            Lex->create_info.default_table_charset= (yyvsp[(4) - (4)].charset);
            Lex->create_info.used_fields|= HA_CREATE_USED_DEFAULT_CHARSET;
          }
    break;

  case 585:

/* Line 1455 of yacc.c  */
#line 5457 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            plugin_ref plugin= ha_resolve_by_name(YYTHD, &(yyvsp[(1) - (1)].lex_str));

            if (plugin)
              (yyval.db_type)= plugin_data(plugin, handlerton*);
            else
            {
              if (YYTHD->variables.sql_mode & MODE_NO_ENGINE_SUBSTITUTION)
              {
                my_error(ER_UNKNOWN_STORAGE_ENGINE, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
                MYSQL_YYABORT;
              }
              (yyval.db_type)= 0;
              push_warning_printf(YYTHD, MYSQL_ERROR::WARN_LEVEL_WARN,
                                  ER_UNKNOWN_STORAGE_ENGINE,
                                  ER(ER_UNKNOWN_STORAGE_ENGINE),
                                  (yyvsp[(1) - (1)].lex_str).str);
            }
          }
    break;

  case 586:

/* Line 1455 of yacc.c  */
#line 5480 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            plugin_ref plugin;
            if ((plugin= ha_resolve_by_name(YYTHD, &(yyvsp[(1) - (1)].lex_str))))
              (yyval.db_type)= plugin_data(plugin, handlerton*);
            else
            {
              my_error(ER_UNKNOWN_STORAGE_ENGINE, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 587:

/* Line 1455 of yacc.c  */
#line 5493 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_DEFAULT; }
    break;

  case 588:

/* Line 1455 of yacc.c  */
#line 5494 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_FIXED; }
    break;

  case 589:

/* Line 1455 of yacc.c  */
#line 5495 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_DYNAMIC; }
    break;

  case 590:

/* Line 1455 of yacc.c  */
#line 5496 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_COMPRESSED; }
    break;

  case 591:

/* Line 1455 of yacc.c  */
#line 5497 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_REDUNDANT; }
    break;

  case 592:

/* Line 1455 of yacc.c  */
#line 5498 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_COMPACT; }
    break;

  case 593:

/* Line 1455 of yacc.c  */
#line 5499 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_PAGE; }
    break;

  case 594:

/* Line 1455 of yacc.c  */
#line 5503 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_DISABLED; }
    break;

  case 595:

/* Line 1455 of yacc.c  */
#line 5504 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_TO_FIRST; }
    break;

  case 596:

/* Line 1455 of yacc.c  */
#line 5505 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_TO_LAST; }
    break;

  case 597:

/* Line 1455 of yacc.c  */
#line 5509 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 599:

/* Line 1455 of yacc.c  */
#line 5514 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {(yyval.num) = (int) STRING_RESULT; }
    break;

  case 600:

/* Line 1455 of yacc.c  */
#line 5515 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {(yyval.num) = (int) REAL_RESULT; }
    break;

  case 601:

/* Line 1455 of yacc.c  */
#line 5516 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {(yyval.num) = (int) DECIMAL_RESULT; }
    break;

  case 602:

/* Line 1455 of yacc.c  */
#line 5517 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {(yyval.num) = (int) INT_RESULT; }
    break;

  case 603:

/* Line 1455 of yacc.c  */
#line 5523 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
          Lex->create_last_non_select_table= Lex->last_table();
        }
    break;

  case 609:

/* Line 1455 of yacc.c  */
#line 5541 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->col_list.empty(); /* Alloced by sql_alloc */
          }
    break;

  case 610:

/* Line 1455 of yacc.c  */
#line 5548 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->option_list= NULL; }
    break;

  case 611:

/* Line 1455 of yacc.c  */
#line 5550 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(1) - (8)].key_type), (yyvsp[(2) - (8)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 612:

/* Line 1455 of yacc.c  */
#line 5556 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->option_list= NULL; }
    break;

  case 613:

/* Line 1455 of yacc.c  */
#line 5558 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(1) - (9)].key_type), (yyvsp[(3) - (9)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 614:

/* Line 1455 of yacc.c  */
#line 5564 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->option_list= NULL; }
    break;

  case 615:

/* Line 1455 of yacc.c  */
#line 5566 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(1) - (9)].key_type), (yyvsp[(3) - (9)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 616:

/* Line 1455 of yacc.c  */
#line 5572 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->option_list= NULL; }
    break;

  case 617:

/* Line 1455 of yacc.c  */
#line 5574 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(2) - (9)].key_type), (yyvsp[(3) - (9)].lex_str).str ? (yyvsp[(3) - (9)].lex_str) : (yyvsp[(1) - (9)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 618:

/* Line 1455 of yacc.c  */
#line 5579 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Key *key= new Foreign_key((yyvsp[(4) - (8)].lex_str).str ? (yyvsp[(4) - (8)].lex_str) : (yyvsp[(1) - (8)].lex_str), lex->col_list,
                                      (yyvsp[(8) - (8)].table),
                                      lex->ref_list,
                                      lex->fk_delete_opt,
                                      lex->fk_update_opt,
                                      lex->fk_match_option);
            if (key == NULL)
              MYSQL_YYABORT;
            lex->alter_info.key_list.push_back(key);
            lex->option_list= NULL;
            if (add_create_index (lex, Key::MULTIPLE, (yyvsp[(1) - (8)].lex_str).str ? (yyvsp[(1) - (8)].lex_str) : (yyvsp[(4) - (8)].lex_str),
                                  &default_key_create_info, 1))
              MYSQL_YYABORT;
            /* Only used for ALTER TABLE. Ignored otherwise. */
            lex->alter_info.flags|= ALTER_FOREIGN_KEY;
          }
    break;

  case 619:

/* Line 1455 of yacc.c  */
#line 5598 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->col_list.empty(); /* Alloced by sql_alloc */
          }
    break;

  case 623:

/* Line 1455 of yacc.c  */
#line 5613 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 624:

/* Line 1455 of yacc.c  */
#line 5614 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 625:

/* Line 1455 of yacc.c  */
#line 5618 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str); }
    break;

  case 626:

/* Line 1455 of yacc.c  */
#line 5623 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->length=lex->dec=0;
            lex->type=0;
            lex->default_value= lex->on_update_value= 0;
            lex->comment=null_lex_str;
            lex->charset=NULL;
	    lex->vcol_info= 0;
            lex->option_list= NULL;
          }
    break;

  case 627:

/* Line 1455 of yacc.c  */
#line 5634 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (add_field_to_list(lex->thd, &(yyvsp[(1) - (3)].lex_str), (enum enum_field_types) (yyvsp[(3) - (3)].num),
                                  lex->length,lex->dec,lex->type,
                                  lex->default_value, lex->on_update_value, 
                                  &lex->comment,
                                  lex->change,&lex->interval_list,lex->charset,
                                  lex->uint_geom_type,
                                  lex->vcol_info, lex->option_list))
              MYSQL_YYABORT;
          }
    break;

  case 628:

/* Line 1455 of yacc.c  */
#line 5648 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 629:

/* Line 1455 of yacc.c  */
#line 5652 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= (enum enum_field_types)MYSQL_TYPE_VIRTUAL;
            Lex->vcol_info->set_field_type((enum enum_field_types) (yyvsp[(1) - (8)].num));
          }
    break;

  case 631:

/* Line 1455 of yacc.c  */
#line 5660 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 632:

/* Line 1455 of yacc.c  */
#line 5665 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->vcol_info->set_stored_in_db_flag(FALSE);
          }
    break;

  case 633:

/* Line 1455 of yacc.c  */
#line 5669 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->vcol_info->set_stored_in_db_flag(FALSE);
          }
    break;

  case 634:

/* Line 1455 of yacc.c  */
#line 5673 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->vcol_info->set_stored_in_db_flag(TRUE);
          }
    break;

  case 635:

/* Line 1455 of yacc.c  */
#line 5679 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 636:

/* Line 1455 of yacc.c  */
#line 5680 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 637:

/* Line 1455 of yacc.c  */
#line 5684 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 639:

/* Line 1455 of yacc.c  */
#line 5690 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= UNIQUE_FLAG;
            lex->alter_info.flags|= ALTER_ADD_INDEX;
          }
    break;

  case 640:

/* Line 1455 of yacc.c  */
#line 5696 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= UNIQUE_KEY_FLAG;
            lex->alter_info.flags|= ALTER_ADD_INDEX;
          }
    break;

  case 641:

/* Line 1455 of yacc.c  */
#line 5701 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 642:

/* Line 1455 of yacc.c  */
#line 5706 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              "PARSE_VCOL_EXPR" can only be used by the SQL server
              when reading a '*.frm' file.
              Prevent the end user from invoking this command.
            */
            if (!Lex->parse_vcol_expr)
            {
              my_message(ER_SYNTAX_ERROR, ER(ER_SYNTAX_ERROR), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 643:

/* Line 1455 of yacc.c  */
#line 5722 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->vcol_info= new Virtual_column_info();
            if (!Lex->vcol_info)
            {
              mem_alloc_error(sizeof(Virtual_column_info));
              MYSQL_YYABORT;
            }
            uint expr_len= (uint)((yyvsp[(3) - (3)].simple_string) - (yyvsp[(1) - (3)].simple_string)) - 1;
            Lex->vcol_info->expr_str.str= (char* ) sql_memdup((yyvsp[(1) - (3)].simple_string) + 1, expr_len);
            Lex->vcol_info->expr_str.length= expr_len;
            Lex->vcol_info->expr_item= (yyvsp[(2) - (3)].item);
          }
    break;

  case 644:

/* Line 1455 of yacc.c  */
#line 5737 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=(yyvsp[(1) - (3)].num); }
    break;

  case 645:

/* Line 1455 of yacc.c  */
#line 5738 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=(yyvsp[(1) - (3)].num); }
    break;

  case 646:

/* Line 1455 of yacc.c  */
#line 5739 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_FLOAT; }
    break;

  case 647:

/* Line 1455 of yacc.c  */
#line 5741 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_BIT;
          }
    break;

  case 648:

/* Line 1455 of yacc.c  */
#line 5746 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_BIT;
          }
    break;

  case 649:

/* Line 1455 of yacc.c  */
#line 5750 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_TINY;
          }
    break;

  case 650:

/* Line 1455 of yacc.c  */
#line 5755 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_TINY;
          }
    break;

  case 651:

/* Line 1455 of yacc.c  */
#line 5760 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 652:

/* Line 1455 of yacc.c  */
#line 5764 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 653:

/* Line 1455 of yacc.c  */
#line 5769 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_STRING;
            Lex->charset=national_charset_info;
          }
    break;

  case 654:

/* Line 1455 of yacc.c  */
#line 5774 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_STRING;
            Lex->charset=national_charset_info;
          }
    break;

  case 655:

/* Line 1455 of yacc.c  */
#line 5780 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 656:

/* Line 1455 of yacc.c  */
#line 5785 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 657:

/* Line 1455 of yacc.c  */
#line 5791 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_TYPE_VARCHAR;
          }
    break;

  case 658:

/* Line 1455 of yacc.c  */
#line 5795 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_TYPE_VARCHAR;
            Lex->charset=national_charset_info;
          }
    break;

  case 659:

/* Line 1455 of yacc.c  */
#line 5800 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)= MYSQL_TYPE_VARCHAR;
          }
    break;

  case 660:

/* Line 1455 of yacc.c  */
#line 5805 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->length)
            {
              errno= 0;
              ulong length= strtoul(Lex->length, NULL, 10);
              if (errno == 0 && length <= MAX_FIELD_BLOBLENGTH && length != 4)
              {
                char buff[sizeof("YEAR()") + MY_INT64_NUM_DECIMAL_DIGITS + 1];
                my_snprintf(buff, sizeof(buff), "YEAR(%lu)", length);
                push_warning_printf(YYTHD, MYSQL_ERROR::WARN_LEVEL_NOTE,
                                    ER_WARN_DEPRECATED_SYNTAX,
                                    ER(ER_WARN_DEPRECATED_SYNTAX),
                                    buff, "YEAR(4)");
              }
            }
            (yyval.num)=MYSQL_TYPE_YEAR;
          }
    break;

  case 661:

/* Line 1455 of yacc.c  */
#line 5823 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DATE; }
    break;

  case 662:

/* Line 1455 of yacc.c  */
#line 5825 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_TIME; }
    break;

  case 663:

/* Line 1455 of yacc.c  */
#line 5827 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (YYTHD->variables.sql_mode & MODE_MAXDB)
              (yyval.num)=MYSQL_TYPE_DATETIME;
            else
            {
              /* 
                Unlike other types TIMESTAMP fields are NOT NULL by default.
              */
              Lex->type|= NOT_NULL_FLAG;
              (yyval.num)=MYSQL_TYPE_TIMESTAMP;
            }
          }
    break;

  case 664:

/* Line 1455 of yacc.c  */
#line 5840 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DATETIME; }
    break;

  case 665:

/* Line 1455 of yacc.c  */
#line 5842 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_TINY_BLOB;
          }
    break;

  case 666:

/* Line 1455 of yacc.c  */
#line 5847 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_BLOB;
          }
    break;

  case 667:

/* Line 1455 of yacc.c  */
#line 5852 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            Lex->charset=&my_charset_bin;
            Lex->uint_geom_type= (uint)(yyvsp[(1) - (1)].num);
            (yyval.num)=MYSQL_TYPE_GEOMETRY;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
    break;

  case 668:

/* Line 1455 of yacc.c  */
#line 5864 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB;
          }
    break;

  case 669:

/* Line 1455 of yacc.c  */
#line 5869 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_LONG_BLOB;
          }
    break;

  case 670:

/* Line 1455 of yacc.c  */
#line 5874 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB;
          }
    break;

  case 671:

/* Line 1455 of yacc.c  */
#line 5879 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB; }
    break;

  case 672:

/* Line 1455 of yacc.c  */
#line 5881 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_TINY_BLOB; }
    break;

  case 673:

/* Line 1455 of yacc.c  */
#line 5883 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_BLOB; }
    break;

  case 674:

/* Line 1455 of yacc.c  */
#line 5885 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB; }
    break;

  case 675:

/* Line 1455 of yacc.c  */
#line 5887 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_LONG_BLOB; }
    break;

  case 676:

/* Line 1455 of yacc.c  */
#line 5889 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_NEWDECIMAL;}
    break;

  case 677:

/* Line 1455 of yacc.c  */
#line 5891 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_NEWDECIMAL;}
    break;

  case 678:

/* Line 1455 of yacc.c  */
#line 5893 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_NEWDECIMAL;}
    break;

  case 679:

/* Line 1455 of yacc.c  */
#line 5895 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {Lex->interval_list.empty();}
    break;

  case 680:

/* Line 1455 of yacc.c  */
#line 5897 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_ENUM; }
    break;

  case 681:

/* Line 1455 of yacc.c  */
#line 5899 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->interval_list.empty();}
    break;

  case 682:

/* Line 1455 of yacc.c  */
#line 5901 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_SET; }
    break;

  case 683:

/* Line 1455 of yacc.c  */
#line 5903 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB; }
    break;

  case 684:

/* Line 1455 of yacc.c  */
#line 5905 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_LONGLONG;
            Lex->type|= (AUTO_INCREMENT_FLAG | NOT_NULL_FLAG | UNSIGNED_FLAG |
              UNIQUE_FLAG);
          }
    break;

  case 685:

/* Line 1455 of yacc.c  */
#line 5913 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_GEOMETRY; }
    break;

  case 686:

/* Line 1455 of yacc.c  */
#line 5914 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_GEOMETRYCOLLECTION; }
    break;

  case 687:

/* Line 1455 of yacc.c  */
#line 5916 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->length= (char*)"25";
            (yyval.num)= Field::GEOM_POINT;
          }
    break;

  case 688:

/* Line 1455 of yacc.c  */
#line 5920 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_MULTIPOINT; }
    break;

  case 689:

/* Line 1455 of yacc.c  */
#line 5921 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_LINESTRING; }
    break;

  case 690:

/* Line 1455 of yacc.c  */
#line 5922 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_MULTILINESTRING; }
    break;

  case 691:

/* Line 1455 of yacc.c  */
#line 5923 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_POLYGON; }
    break;

  case 692:

/* Line 1455 of yacc.c  */
#line 5924 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_MULTIPOLYGON; }
    break;

  case 693:

/* Line 1455 of yacc.c  */
#line 5928 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 694:

/* Line 1455 of yacc.c  */
#line 5932 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 695:

/* Line 1455 of yacc.c  */
#line 5933 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 696:

/* Line 1455 of yacc.c  */
#line 5937 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 697:

/* Line 1455 of yacc.c  */
#line 5938 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 698:

/* Line 1455 of yacc.c  */
#line 5942 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 699:

/* Line 1455 of yacc.c  */
#line 5943 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 700:

/* Line 1455 of yacc.c  */
#line 5944 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 701:

/* Line 1455 of yacc.c  */
#line 5945 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 702:

/* Line 1455 of yacc.c  */
#line 5946 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 703:

/* Line 1455 of yacc.c  */
#line 5950 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_LONG; }
    break;

  case 704:

/* Line 1455 of yacc.c  */
#line 5951 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_TINY; }
    break;

  case 705:

/* Line 1455 of yacc.c  */
#line 5952 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_SHORT; }
    break;

  case 706:

/* Line 1455 of yacc.c  */
#line 5953 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_INT24; }
    break;

  case 707:

/* Line 1455 of yacc.c  */
#line 5954 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_LONGLONG; }
    break;

  case 708:

/* Line 1455 of yacc.c  */
#line 5959 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= YYTHD->variables.sql_mode & MODE_REAL_AS_FLOAT ?
              MYSQL_TYPE_FLOAT : MYSQL_TYPE_DOUBLE;
          }
    break;

  case 709:

/* Line 1455 of yacc.c  */
#line 5964 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DOUBLE; }
    break;

  case 710:

/* Line 1455 of yacc.c  */
#line 5966 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DOUBLE; }
    break;

  case 711:

/* Line 1455 of yacc.c  */
#line 5971 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->dec=Lex->length= (char*)0; }
    break;

  case 712:

/* Line 1455 of yacc.c  */
#line 5973 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->dec= (char*)0; }
    break;

  case 713:

/* Line 1455 of yacc.c  */
#line 5975 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 714:

/* Line 1455 of yacc.c  */
#line 5980 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->length=(yyvsp[(2) - (5)].lex_str).str;
            lex->dec=(yyvsp[(4) - (5)].lex_str).str;
          }
    break;

  case 715:

/* Line 1455 of yacc.c  */
#line 5988 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 716:

/* Line 1455 of yacc.c  */
#line 5989 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 717:

/* Line 1455 of yacc.c  */
#line 5993 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 718:

/* Line 1455 of yacc.c  */
#line 5994 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 719:

/* Line 1455 of yacc.c  */
#line 5998 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 720:

/* Line 1455 of yacc.c  */
#line 5999 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= UNSIGNED_FLAG;}
    break;

  case 721:

/* Line 1455 of yacc.c  */
#line 6000 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= UNSIGNED_FLAG | ZEROFILL_FLAG; }
    break;

  case 722:

/* Line 1455 of yacc.c  */
#line 6004 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 723:

/* Line 1455 of yacc.c  */
#line 6005 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 724:

/* Line 1455 of yacc.c  */
#line 6006 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 725:

/* Line 1455 of yacc.c  */
#line 6007 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 726:

/* Line 1455 of yacc.c  */
#line 6010 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->length=(char*) 0; /* use default length */ }
    break;

  case 727:

/* Line 1455 of yacc.c  */
#line 6011 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { }
    break;

  case 728:

/* Line 1455 of yacc.c  */
#line 6015 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 729:

/* Line 1455 of yacc.c  */
#line 6016 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 730:

/* Line 1455 of yacc.c  */
#line 6020 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 731:

/* Line 1455 of yacc.c  */
#line 6021 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 732:

/* Line 1455 of yacc.c  */
#line 6025 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 734:

/* Line 1455 of yacc.c  */
#line 6030 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type&= ~ NOT_NULL_FLAG; }
    break;

  case 735:

/* Line 1455 of yacc.c  */
#line 6031 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= NOT_NULL_FLAG; }
    break;

  case 736:

/* Line 1455 of yacc.c  */
#line 6032 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->default_value=(yyvsp[(2) - (2)].item); }
    break;

  case 737:

/* Line 1455 of yacc.c  */
#line 6034 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_func_now_local((yyvsp[(4) - (4)].num));
            if (item == NULL)
              MYSQL_YYABORT;
            Lex->on_update_value= item;
          }
    break;

  case 738:

/* Line 1455 of yacc.c  */
#line 6040 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= AUTO_INCREMENT_FLAG | NOT_NULL_FLAG; }
    break;

  case 739:

/* Line 1455 of yacc.c  */
#line 6042 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            LEX *lex=Lex;
            lex->type|= AUTO_INCREMENT_FLAG | NOT_NULL_FLAG | UNIQUE_FLAG;
            lex->alter_info.flags|= ALTER_ADD_INDEX;
          }
    break;

  case 740:

/* Line 1455 of yacc.c  */
#line 6048 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= PRI_KEY_FLAG | NOT_NULL_FLAG;
            lex->alter_info.flags|= ALTER_ADD_INDEX;
          }
    break;

  case 741:

/* Line 1455 of yacc.c  */
#line 6054 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= UNIQUE_FLAG; 
            lex->alter_info.flags|= ALTER_ADD_INDEX;
          }
    break;

  case 742:

/* Line 1455 of yacc.c  */
#line 6060 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= UNIQUE_KEY_FLAG; 
            lex->alter_info.flags|= ALTER_ADD_INDEX; 
          }
    break;

  case 743:

/* Line 1455 of yacc.c  */
#line 6065 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 744:

/* Line 1455 of yacc.c  */
#line 6067 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->charset && !my_charset_same(Lex->charset,(yyvsp[(2) - (2)].charset)))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       (yyvsp[(2) - (2)].charset)->name,Lex->charset->csname);
              MYSQL_YYABORT;
            }
            else
            {
              Lex->charset=(yyvsp[(2) - (2)].charset);
            }
          }
    break;

  case 745:

/* Line 1455 of yacc.c  */
#line 6080 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            new (YYTHD->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), true, &Lex->option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 746:

/* Line 1455 of yacc.c  */
#line 6086 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            new (YYTHD->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), false, &Lex->option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 747:

/* Line 1455 of yacc.c  */
#line 6092 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            new (YYTHD->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].ulonglong_number), &Lex->option_list,
                                  &Lex->option_list_last, YYTHD->mem_root);
          }
    break;

  case 748:

/* Line 1455 of yacc.c  */
#line 6098 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            new (YYTHD->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), &Lex->option_list, &Lex->option_list_last);
          }
    break;

  case 749:

/* Line 1455 of yacc.c  */
#line 6107 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
          (yyval.num)= (yyvsp[(1) - (2)].num);

          if (Lex->charset) /* Lex->charset is scanned in "type" */
          {
            if (!(Lex->charset= merge_charset_and_collation(Lex->charset, (yyvsp[(2) - (2)].charset))))
              MYSQL_YYABORT;
          }
          else if ((yyvsp[(2) - (2)].charset))
          {
            my_error(ER_NOT_SUPPORTED_YET, MYF(0),
                     "COLLATE with no CHARACTER SET "
                     "in SP parameters, RETURNS, DECLARE");
            MYSQL_YYABORT;
          }
        }
    break;

  case 750:

/* Line 1455 of yacc.c  */
#line 6128 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_now_local((yyvsp[(2) - (2)].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 751:

/* Line 1455 of yacc.c  */
#line 6134 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 752:

/* Line 1455 of yacc.c  */
#line 6138 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 753:

/* Line 1455 of yacc.c  */
#line 6139 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 754:

/* Line 1455 of yacc.c  */
#line 6144 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!((yyval.charset)=get_charset_by_csname((yyvsp[(1) - (1)].lex_str).str,MY_CS_PRIMARY,MYF(0))))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 755:

/* Line 1455 of yacc.c  */
#line 6151 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.charset)= &my_charset_bin; }
    break;

  case 756:

/* Line 1455 of yacc.c  */
#line 6155 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset);   }
    break;

  case 757:

/* Line 1455 of yacc.c  */
#line 6156 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 758:

/* Line 1455 of yacc.c  */
#line 6160 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.charset)= NULL; }
    break;

  case 759:

/* Line 1455 of yacc.c  */
#line 6161 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.charset)= (yyvsp[(2) - (2)].charset); }
    break;

  case 760:

/* Line 1455 of yacc.c  */
#line 6166 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!((yyval.charset)=get_charset_by_csname((yyvsp[(1) - (1)].lex_str).str,MY_CS_PRIMARY,MYF(0))) &&
                !((yyval.charset)=get_old_charset_by_name((yyvsp[(1) - (1)].lex_str).str)))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 761:

/* Line 1455 of yacc.c  */
#line 6174 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.charset)= &my_charset_bin; }
    break;

  case 762:

/* Line 1455 of yacc.c  */
#line 6178 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset);   }
    break;

  case 763:

/* Line 1455 of yacc.c  */
#line 6179 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 764:

/* Line 1455 of yacc.c  */
#line 6184 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!((yyval.charset)=get_charset_by_name((yyvsp[(1) - (1)].lex_str).str,MYF(0))))
            {
              my_error(ER_UNKNOWN_COLLATION, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 765:

/* Line 1455 of yacc.c  */
#line 6194 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 766:

/* Line 1455 of yacc.c  */
#line 6195 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(2) - (2)].charset); }
    break;

  case 767:

/* Line 1455 of yacc.c  */
#line 6199 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset); }
    break;

  case 768:

/* Line 1455 of yacc.c  */
#line 6200 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 769:

/* Line 1455 of yacc.c  */
#line 6204 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 770:

/* Line 1455 of yacc.c  */
#line 6205 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 771:

/* Line 1455 of yacc.c  */
#line 6210 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->charset= &my_charset_latin1; }
    break;

  case 772:

/* Line 1455 of yacc.c  */
#line 6212 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->charset= &my_charset_latin1_bin;
          }
    break;

  case 773:

/* Line 1455 of yacc.c  */
#line 6216 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->charset= &my_charset_latin1_bin;
          }
    break;

  case 774:

/* Line 1455 of yacc.c  */
#line 6223 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!(Lex->charset=get_charset_by_csname("ucs2",
                                                     MY_CS_PRIMARY,MYF(0))))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), "ucs2");
              MYSQL_YYABORT;
            }
          }
    break;

  case 775:

/* Line 1455 of yacc.c  */
#line 6232 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!(Lex->charset=get_charset_by_name("ucs2_bin", MYF(0))))
            {
              my_error(ER_UNKNOWN_COLLATION, MYF(0), "ucs2_bin");
              MYSQL_YYABORT;
            }
          }
    break;

  case 776:

/* Line 1455 of yacc.c  */
#line 6240 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!(Lex->charset=get_charset_by_name("ucs2_bin", MYF(0))))
            {
              my_error(ER_UNKNOWN_COLLATION, MYF(0), "ucs2_bin");
              MYSQL_YYABORT;
            }
          }
    break;

  case 777:

/* Line 1455 of yacc.c  */
#line 6250 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->charset=NULL; }
    break;

  case 780:

/* Line 1455 of yacc.c  */
#line 6253 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->charset=&my_charset_bin; }
    break;

  case 781:

/* Line 1455 of yacc.c  */
#line 6254 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->charset=(yyvsp[(2) - (3)].charset); }
    break;

  case 782:

/* Line 1455 of yacc.c  */
#line 6256 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->charset= NULL;
            Lex->type|= BINCMP_FLAG;
          }
    break;

  case 783:

/* Line 1455 of yacc.c  */
#line 6261 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->charset= (yyvsp[(3) - (3)].charset);
            Lex->type|= BINCMP_FLAG;
          }
    break;

  case 784:

/* Line 1455 of yacc.c  */
#line 6268 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { }
    break;

  case 785:

/* Line 1455 of yacc.c  */
#line 6269 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= BINCMP_FLAG; }
    break;

  case 788:

/* Line 1455 of yacc.c  */
#line 6284 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.table)=(yyvsp[(2) - (5)].table);
          }
    break;

  case 789:

/* Line 1455 of yacc.c  */
#line 6291 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ref_list.empty(); }
    break;

  case 791:

/* Line 1455 of yacc.c  */
#line 6297 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Key_part_spec *key= new Key_part_spec((yyvsp[(3) - (3)].lex_str), 0);
            if (key == NULL)
              MYSQL_YYABORT;
            Lex->ref_list.push_back(key);
          }
    break;

  case 792:

/* Line 1455 of yacc.c  */
#line 6304 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Key_part_spec *key= new Key_part_spec((yyvsp[(1) - (1)].lex_str), 0);
            if (key == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->ref_list.empty();
            lex->ref_list.push_back(key);
          }
    break;

  case 793:

/* Line 1455 of yacc.c  */
#line 6316 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_UNDEF; }
    break;

  case 794:

/* Line 1455 of yacc.c  */
#line 6318 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_FULL; }
    break;

  case 795:

/* Line 1455 of yacc.c  */
#line 6320 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_PARTIAL; }
    break;

  case 796:

/* Line 1455 of yacc.c  */
#line 6322 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_SIMPLE; }
    break;

  case 797:

/* Line 1455 of yacc.c  */
#line 6327 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= Foreign_key::FK_OPTION_UNDEF;
            lex->fk_delete_opt= Foreign_key::FK_OPTION_UNDEF;
          }
    break;

  case 798:

/* Line 1455 of yacc.c  */
#line 6333 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= (yyvsp[(3) - (3)].m_fk_option);
            lex->fk_delete_opt= Foreign_key::FK_OPTION_UNDEF;
          }
    break;

  case 799:

/* Line 1455 of yacc.c  */
#line 6339 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= Foreign_key::FK_OPTION_UNDEF;
            lex->fk_delete_opt= (yyvsp[(3) - (3)].m_fk_option);
          }
    break;

  case 800:

/* Line 1455 of yacc.c  */
#line 6346 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= (yyvsp[(3) - (6)].m_fk_option);
            lex->fk_delete_opt= (yyvsp[(6) - (6)].m_fk_option);
          }
    break;

  case 801:

/* Line 1455 of yacc.c  */
#line 6353 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= (yyvsp[(6) - (6)].m_fk_option);
            lex->fk_delete_opt= (yyvsp[(3) - (6)].m_fk_option);
          }
    break;

  case 802:

/* Line 1455 of yacc.c  */
#line 6361 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_RESTRICT; }
    break;

  case 803:

/* Line 1455 of yacc.c  */
#line 6362 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_CASCADE; }
    break;

  case 804:

/* Line 1455 of yacc.c  */
#line 6363 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_SET_NULL; }
    break;

  case 805:

/* Line 1455 of yacc.c  */
#line 6364 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_NO_ACTION; }
    break;

  case 806:

/* Line 1455 of yacc.c  */
#line 6365 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_DEFAULT;  }
    break;

  case 807:

/* Line 1455 of yacc.c  */
#line 6369 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::MULTIPLE; }
    break;

  case 808:

/* Line 1455 of yacc.c  */
#line 6373 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::PRIMARY; }
    break;

  case 809:

/* Line 1455 of yacc.c  */
#line 6374 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::UNIQUE; }
    break;

  case 810:

/* Line 1455 of yacc.c  */
#line 6378 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 811:

/* Line 1455 of yacc.c  */
#line 6379 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 812:

/* Line 1455 of yacc.c  */
#line 6383 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 814:

/* Line 1455 of yacc.c  */
#line 6388 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 815:

/* Line 1455 of yacc.c  */
#line 6389 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 816:

/* Line 1455 of yacc.c  */
#line 6390 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 817:

/* Line 1455 of yacc.c  */
#line 6394 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::MULTIPLE; }
    break;

  case 818:

/* Line 1455 of yacc.c  */
#line 6395 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::UNIQUE; }
    break;

  case 819:

/* Line 1455 of yacc.c  */
#line 6399 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::FULLTEXT;}
    break;

  case 820:

/* Line 1455 of yacc.c  */
#line 6404 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            (yyval.key_type)= Key::SPATIAL;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
    break;

  case 821:

/* Line 1455 of yacc.c  */
#line 6416 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->key_create_info= default_key_create_info;
          }
    break;

  case 824:

/* Line 1455 of yacc.c  */
#line 6433 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 826:

/* Line 1455 of yacc.c  */
#line 6438 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 828:

/* Line 1455 of yacc.c  */
#line 6443 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 836:

/* Line 1455 of yacc.c  */
#line 6463 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->key_create_info.algorithm= (yyvsp[(2) - (2)].key_alg); }
    break;

  case 837:

/* Line 1455 of yacc.c  */
#line 6464 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->key_create_info.algorithm= (yyvsp[(2) - (2)].key_alg); }
    break;

  case 838:

/* Line 1455 of yacc.c  */
#line 6469 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->key_create_info.block_size= (yyvsp[(3) - (3)].ulong_num); }
    break;

  case 839:

/* Line 1455 of yacc.c  */
#line 6470 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->key_create_info.comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 840:

/* Line 1455 of yacc.c  */
#line 6472 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            new (YYTHD->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), true, &Lex->option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 841:

/* Line 1455 of yacc.c  */
#line 6478 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            new (YYTHD->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), false, &Lex->option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 842:

/* Line 1455 of yacc.c  */
#line 6484 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            new (YYTHD->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].ulonglong_number), &Lex->option_list,
                                  &Lex->option_list_last, YYTHD->mem_root);
          }
    break;

  case 843:

/* Line 1455 of yacc.c  */
#line 6490 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            new (YYTHD->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), &Lex->option_list, &Lex->option_list_last);
          }
    break;

  case 848:

/* Line 1455 of yacc.c  */
#line 6508 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (plugin_is_ready(&(yyvsp[(3) - (3)].lex_str), MYSQL_FTPARSER_PLUGIN))
              Lex->key_create_info.parser_name= (yyvsp[(3) - (3)].lex_str);
            else
            {
              my_error(ER_FUNCTION_NOT_DEFINED, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 849:

/* Line 1455 of yacc.c  */
#line 6520 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_BTREE; }
    break;

  case 850:

/* Line 1455 of yacc.c  */
#line 6521 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_RTREE; }
    break;

  case 851:

/* Line 1455 of yacc.c  */
#line 6522 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_HASH; }
    break;

  case 852:

/* Line 1455 of yacc.c  */
#line 6526 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->col_list.push_back((yyvsp[(3) - (4)].key_part)); }
    break;

  case 853:

/* Line 1455 of yacc.c  */
#line 6527 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->col_list.push_back((yyvsp[(1) - (2)].key_part)); }
    break;

  case 854:

/* Line 1455 of yacc.c  */
#line 6532 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.key_part)= new Key_part_spec((yyvsp[(1) - (1)].lex_str), 0);
            if ((yyval.key_part) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 855:

/* Line 1455 of yacc.c  */
#line 6538 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            int key_part_len= atoi((yyvsp[(3) - (4)].lex_str).str);
            if (!key_part_len)
            {
              my_error(ER_KEY_PART_0, MYF(0), (yyvsp[(1) - (4)].lex_str).str);
            }
            (yyval.key_part)= new Key_part_spec((yyvsp[(1) - (4)].lex_str), (uint) key_part_len);
            if ((yyval.key_part) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 856:

/* Line 1455 of yacc.c  */
#line 6551 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 857:

/* Line 1455 of yacc.c  */
#line 6552 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 858:

/* Line 1455 of yacc.c  */
#line 6556 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 859:

/* Line 1455 of yacc.c  */
#line 6557 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 860:

/* Line 1455 of yacc.c  */
#line 6561 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->interval_list.push_back((yyvsp[(1) - (1)].string)); }
    break;

  case 861:

/* Line 1455 of yacc.c  */
#line 6562 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->interval_list.push_back((yyvsp[(3) - (3)].string)); }
    break;

  case 862:

/* Line 1455 of yacc.c  */
#line 6570 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->name.str= 0;
            lex->name.length= 0;
            lex->sql_command= SQLCOM_ALTER_TABLE;
            lex->duplicates= DUP_ERROR; 
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(4) - (4)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_READ_NO_INSERT,
                                                   MDL_SHARED_NO_WRITE))
              MYSQL_YYABORT;
            lex->col_list.empty();
            lex->select_lex.init_order();
            lex->select_lex.db= (lex->select_lex.table_list.first)->db;
            bzero((char*) &lex->create_info,sizeof(lex->create_info));
            lex->create_info.db_type= 0;
            lex->create_info.default_table_charset= NULL;
            lex->create_info.row_type= ROW_TYPE_NOT_USED;
            lex->alter_info.reset();
            lex->no_write_to_binlog= 0;
            lex->create_info.storage_media= HA_SM_DEFAULT;
            lex->create_last_non_select_table= lex->last_table();
            DBUG_ASSERT(!lex->m_stmt);
          }
    break;

  case 863:

/* Line 1455 of yacc.c  */
#line 6596 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            if (!lex->m_stmt)
            {
              /* Create a generic ALTER TABLE statment. */
              lex->m_stmt= new (thd->mem_root) Alter_table_statement(lex);
              if (lex->m_stmt == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 864:

/* Line 1455 of yacc.c  */
#line 6608 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.default_table_charset= NULL;
            Lex->create_info.used_fields= 0;
          }
    break;

  case 865:

/* Line 1455 of yacc.c  */
#line 6613 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_ALTER_DB;
            lex->name= (yyvsp[(3) - (5)].lex_str);
            if (lex->name.str == NULL &&
                lex->copy_db_to(&lex->name.str, &lex->name.length))
              MYSQL_YYABORT;
          }
    break;

  case 866:

/* Line 1455 of yacc.c  */
#line 6622 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "DATABASE");
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_ALTER_DB_UPGRADE;
            lex->name= (yyvsp[(3) - (7)].lex_str);
          }
    break;

  case 867:

/* Line 1455 of yacc.c  */
#line 6633 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }
            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
    break;

  case 868:

/* Line 1455 of yacc.c  */
#line 6644 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->sql_command= SQLCOM_ALTER_PROCEDURE;
            lex->spname= (yyvsp[(3) - (5)].spname);
          }
    break;

  case 869:

/* Line 1455 of yacc.c  */
#line 6651 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
    break;

  case 870:

/* Line 1455 of yacc.c  */
#line 6662 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->sql_command= SQLCOM_ALTER_FUNCTION;
            lex->spname= (yyvsp[(3) - (5)].spname);
          }
    break;

  case 871:

/* Line 1455 of yacc.c  */
#line 6669 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "ALTER VIEW");
              MYSQL_YYABORT;
            }
            lex->create_view_mode= VIEW_ALTER;
          }
    break;

  case 872:

/* Line 1455 of yacc.c  */
#line 6680 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 873:

/* Line 1455 of yacc.c  */
#line 6687 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "ALTER VIEW");
              MYSQL_YYABORT;
            }
            lex->create_view_algorithm= DTYPE_ALGORITHM_UNDEFINED;
            lex->create_view_mode= VIEW_ALTER;
          }
    break;

  case 874:

/* Line 1455 of yacc.c  */
#line 6699 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 875:

/* Line 1455 of yacc.c  */
#line 6701 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* 
              It is safe to use Lex->spname because
              ALTER EVENT xxx RENATE TO yyy DO ALTER EVENT RENAME TO
              is not allowed. Lex->spname is used in the case of RENAME TO
              If it had to be supported spname had to be added to
              Event_parse_data.
            */

            if (!(Lex->event_parse_data= Event_parse_data::new_instance(YYTHD)))
              MYSQL_YYABORT;
            Lex->event_parse_data->identifier= (yyvsp[(4) - (4)].spname);

            Lex->sql_command= SQLCOM_ALTER_EVENT;
          }
    break;

  case 876:

/* Line 1455 of yacc.c  */
#line 6721 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!((yyvsp[(6) - (10)].num) || (yyvsp[(7) - (10)].num) || (yyvsp[(8) - (10)].num) || (yyvsp[(9) - (10)].num) || (yyvsp[(10) - (10)].num)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            /*
              sql_command is set here because some rules in ev_sql_stmt
              can overwrite it
            */
            Lex->sql_command= SQLCOM_ALTER_EVENT;
          }
    break;

  case 877:

/* Line 1455 of yacc.c  */
#line 6734 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_TABLESPACE;
          }
    break;

  case 878:

/* Line 1455 of yacc.c  */
#line 6739 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_LOGFILE_GROUP;
          }
    break;

  case 879:

/* Line 1455 of yacc.c  */
#line 6744 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= CHANGE_FILE_TABLESPACE;
          }
    break;

  case 880:

/* Line 1455 of yacc.c  */
#line 6749 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_ACCESS_MODE_TABLESPACE;
          }
    break;

  case 881:

/* Line 1455 of yacc.c  */
#line 6754 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_ALTER_SERVER;
            lex->server_options.server_name= (yyvsp[(3) - (7)].lex_str).str;
            lex->server_options.server_name_length= (yyvsp[(3) - (7)].lex_str).length;
          }
    break;

  case 882:

/* Line 1455 of yacc.c  */
#line 6763 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 883:

/* Line 1455 of yacc.c  */
#line 6764 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 884:

/* Line 1455 of yacc.c  */
#line 6765 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 885:

/* Line 1455 of yacc.c  */
#line 6766 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 886:

/* Line 1455 of yacc.c  */
#line 6770 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 887:

/* Line 1455 of yacc.c  */
#line 6772 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              Use lex's spname to hold the new name.
              The original name is in the Event_parse_data object
            */
            Lex->spname= (yyvsp[(3) - (3)].spname); 
            (yyval.num)= 1;
          }
    break;

  case 888:

/* Line 1455 of yacc.c  */
#line 6783 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 889:

/* Line 1455 of yacc.c  */
#line 6784 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 890:

/* Line 1455 of yacc.c  */
#line 6788 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str).str= 0; (yyval.lex_str).length= 0; }
    break;

  case 891:

/* Line 1455 of yacc.c  */
#line 6789 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 893:

/* Line 1455 of yacc.c  */
#line 6794 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->alter_info.tablespace_op= DISCARD_TABLESPACE; }
    break;

  case 894:

/* Line 1455 of yacc.c  */
#line 6795 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->alter_info.tablespace_op= IMPORT_TABLESPACE; }
    break;

  case 900:

/* Line 1455 of yacc.c  */
#line 6812 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_DROP_PARTITION;
          }
    break;

  case 901:

/* Line 1455 of yacc.c  */
#line 6817 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_info.flags|= ALTER_REBUILD_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
          }
    break;

  case 902:

/* Line 1455 of yacc.c  */
#line 6824 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root)
                          Alter_table_optimize_partition_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 904:

/* Line 1455 of yacc.c  */
#line 6838 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root)
                          Alter_table_analyze_partition_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 905:

/* Line 1455 of yacc.c  */
#line 6850 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root)
                          Alter_table_check_partition_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 907:

/* Line 1455 of yacc.c  */
#line 6863 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root)
                          Alter_table_repair_partition_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 909:

/* Line 1455 of yacc.c  */
#line 6876 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_info.flags|= ALTER_COALESCE_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->alter_info.num_parts= (yyvsp[(4) - (4)].ulong_num);
          }
    break;

  case 910:

/* Line 1455 of yacc.c  */
#line 6883 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root)
                          Alter_table_truncate_partition_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 912:

/* Line 1455 of yacc.c  */
#line 6898 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_REMOVE_PARTITIONING;
          }
    break;

  case 913:

/* Line 1455 of yacc.c  */
#line 6905 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_ALL_PARTITION;
          }
    break;

  case 915:

/* Line 1455 of yacc.c  */
#line 6913 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info= new partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            lex->alter_info.flags|= ALTER_ADD_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (3)].num);
          }
    break;

  case 916:

/* Line 1455 of yacc.c  */
#line 6925 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 918:

/* Line 1455 of yacc.c  */
#line 6931 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info->num_parts= lex->part_info->partitions.elements;
          }
    break;

  case 919:

/* Line 1455 of yacc.c  */
#line 6936 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->part_info->num_parts= (yyvsp[(2) - (2)].ulong_num);
          }
    break;

  case 920:

/* Line 1455 of yacc.c  */
#line 6943 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info= new partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            lex->no_write_to_binlog= (yyvsp[(3) - (3)].num);
          }
    break;

  case 922:

/* Line 1455 of yacc.c  */
#line 6958 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_TABLE_REORG;
          }
    break;

  case 923:

/* Line 1455 of yacc.c  */
#line 6962 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_REORGANIZE_PARTITION;
          }
    break;

  case 924:

/* Line 1455 of yacc.c  */
#line 6966 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->num_parts= part_info->partitions.elements;
          }
    break;

  case 925:

/* Line 1455 of yacc.c  */
#line 6973 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 926:

/* Line 1455 of yacc.c  */
#line 6974 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 927:

/* Line 1455 of yacc.c  */
#line 6979 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->alter_info.partition_names.push_back((yyvsp[(1) - (1)].lex_str).str))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
          }
    break;

  case 930:

/* Line 1455 of yacc.c  */
#line 6999 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->change=0;
            lex->alter_info.flags|= ALTER_ADD_COLUMN;
          }
    break;

  case 931:

/* Line 1455 of yacc.c  */
#line 7008 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
          }
    break;

  case 932:

/* Line 1455 of yacc.c  */
#line 7012 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
            Lex->alter_info.flags|= ALTER_ADD_INDEX;
          }
    break;

  case 933:

/* Line 1455 of yacc.c  */
#line 7017 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_ADD_COLUMN | ALTER_ADD_INDEX;
          }
    break;

  case 934:

/* Line 1455 of yacc.c  */
#line 7021 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->change= (yyvsp[(3) - (3)].lex_str).str;
            lex->alter_info.flags|= ALTER_CHANGE_COLUMN;
            lex->option_list= NULL;
          }
    break;

  case 935:

/* Line 1455 of yacc.c  */
#line 7028 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
          }
    break;

  case 936:

/* Line 1455 of yacc.c  */
#line 7032 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->length=lex->dec=0; lex->type=0;
            lex->default_value= lex->on_update_value= 0;
            lex->comment=null_lex_str;
            lex->charset= NULL;
            lex->alter_info.flags|= ALTER_CHANGE_COLUMN;
	    lex->vcol_info= 0;
            lex->option_list= NULL;
          }
    break;

  case 937:

/* Line 1455 of yacc.c  */
#line 7043 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (add_field_to_list(lex->thd,&(yyvsp[(3) - (5)].lex_str),
                                  (enum enum_field_types) (yyvsp[(5) - (5)].num),
                                  lex->length,lex->dec,lex->type,
                                  lex->default_value, lex->on_update_value,
                                  &lex->comment,
                                  (yyvsp[(3) - (5)].lex_str).str, &lex->interval_list, lex->charset,
                                  lex->uint_geom_type,
                                  lex->vcol_info, lex->option_list))
              MYSQL_YYABORT;
          }
    break;

  case 938:

/* Line 1455 of yacc.c  */
#line 7056 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
          }
    break;

  case 939:

/* Line 1455 of yacc.c  */
#line 7060 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::COLUMN, (yyvsp[(3) - (4)].lex_str).str);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= ALTER_DROP_COLUMN;
          }
    break;

  case 940:

/* Line 1455 of yacc.c  */
#line 7069 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_DROP_INDEX | ALTER_FOREIGN_KEY;
          }
    break;

  case 941:

/* Line 1455 of yacc.c  */
#line 7073 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, primary_key_name);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= ALTER_DROP_INDEX;
          }
    break;

  case 942:

/* Line 1455 of yacc.c  */
#line 7082 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, (yyvsp[(3) - (3)].lex_str).str);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= ALTER_DROP_INDEX;
          }
    break;

  case 943:

/* Line 1455 of yacc.c  */
#line 7091 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.keys_onoff= DISABLE;
            lex->alter_info.flags|= ALTER_KEYS_ONOFF;
          }
    break;

  case 944:

/* Line 1455 of yacc.c  */
#line 7097 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.keys_onoff= ENABLE;
            lex->alter_info.flags|= ALTER_KEYS_ONOFF;
          }
    break;

  case 945:

/* Line 1455 of yacc.c  */
#line 7103 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_column *ac= new Alter_column((yyvsp[(3) - (6)].lex_str).str,(yyvsp[(6) - (6)].item));
            if (ac == NULL)
              MYSQL_YYABORT;
            lex->alter_info.alter_list.push_back(ac);
            lex->alter_info.flags|= ALTER_CHANGE_COLUMN_DEFAULT;
          }
    break;

  case 946:

/* Line 1455 of yacc.c  */
#line 7112 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_column *ac= new Alter_column((yyvsp[(3) - (5)].lex_str).str, (Item*) 0);
            if (ac == NULL)
              MYSQL_YYABORT;
            lex->alter_info.alter_list.push_back(ac);
            lex->alter_info.flags|= ALTER_CHANGE_COLUMN_DEFAULT;
          }
    break;

  case 947:

/* Line 1455 of yacc.c  */
#line 7121 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            size_t dummy;
            lex->select_lex.db=(yyvsp[(3) - (3)].table)->db.str;
            if (lex->select_lex.db == NULL &&
                lex->copy_db_to(&lex->select_lex.db, &dummy))
            {
              MYSQL_YYABORT;
            }
            if (check_table_name((yyvsp[(3) - (3)].table)->table.str,(yyvsp[(3) - (3)].table)->table.length, FALSE) ||
                ((yyvsp[(3) - (3)].table)->db.str && check_db_name(&(yyvsp[(3) - (3)].table)->db)))
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(3) - (3)].table)->table.str);
              MYSQL_YYABORT;
            }
            lex->name= (yyvsp[(3) - (3)].table)->table;
            lex->alter_info.flags|= ALTER_RENAME;
          }
    break;

  case 948:

/* Line 1455 of yacc.c  */
#line 7140 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!(yyvsp[(4) - (5)].charset))
            {
              THD *thd= YYTHD;
              (yyvsp[(4) - (5)].charset)= thd->variables.collation_database;
            }
            (yyvsp[(5) - (5)].charset)= (yyvsp[(5) - (5)].charset) ? (yyvsp[(5) - (5)].charset) : (yyvsp[(4) - (5)].charset);
            if (!my_charset_same((yyvsp[(4) - (5)].charset),(yyvsp[(5) - (5)].charset)))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       (yyvsp[(5) - (5)].charset)->name, (yyvsp[(4) - (5)].charset)->csname);
              MYSQL_YYABORT;
            }
            LEX *lex= Lex;
            lex->create_info.table_charset=
            lex->create_info.default_table_charset= (yyvsp[(5) - (5)].charset);
            lex->create_info.used_fields|= (HA_CREATE_USED_CHARSET |
              HA_CREATE_USED_DEFAULT_CHARSET);
            lex->alter_info.flags|= ALTER_CONVERT;
          }
    break;

  case 949:

/* Line 1455 of yacc.c  */
#line 7161 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.flags|= ALTER_OPTIONS;
            if ((lex->create_info.used_fields & HA_CREATE_USED_ENGINE) &&
                !lex->create_info.db_type)
            {
              lex->create_info.used_fields&= ~HA_CREATE_USED_ENGINE;
            }
          }
    break;

  case 950:

/* Line 1455 of yacc.c  */
#line 7171 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_RECREATE;
          }
    break;

  case 951:

/* Line 1455 of yacc.c  */
#line 7175 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.flags|= ALTER_ORDER;
          }
    break;

  case 952:

/* Line 1455 of yacc.c  */
#line 7182 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 953:

/* Line 1455 of yacc.c  */
#line 7183 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 954:

/* Line 1455 of yacc.c  */
#line 7187 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ignore= 0;}
    break;

  case 955:

/* Line 1455 of yacc.c  */
#line 7188 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ignore= 1;}
    break;

  case 956:

/* Line 1455 of yacc.c  */
#line 7192 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ignore= Lex->online= 0;}
    break;

  case 962:

/* Line 1455 of yacc.c  */
#line 7206 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ignore= 1;}
    break;

  case 963:

/* Line 1455 of yacc.c  */
#line 7207 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->online= 1;}
    break;

  case 964:

/* Line 1455 of yacc.c  */
#line 7211 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->drop_mode= DROP_DEFAULT; }
    break;

  case 965:

/* Line 1455 of yacc.c  */
#line 7212 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->drop_mode= DROP_RESTRICT; }
    break;

  case 966:

/* Line 1455 of yacc.c  */
#line 7213 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->drop_mode= DROP_CASCADE; }
    break;

  case 967:

/* Line 1455 of yacc.c  */
#line 7217 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 968:

/* Line 1455 of yacc.c  */
#line 7218 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { store_position_for_column((yyvsp[(2) - (2)].lex_str).str); }
    break;

  case 969:

/* Line 1455 of yacc.c  */
#line 7219 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { store_position_for_column(first_keyword); }
    break;

  case 970:

/* Line 1455 of yacc.c  */
#line 7223 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 971:

/* Line 1455 of yacc.c  */
#line 7224 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 972:

/* Line 1455 of yacc.c  */
#line 7225 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 973:

/* Line 1455 of yacc.c  */
#line 7226 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 974:

/* Line 1455 of yacc.c  */
#line 7235 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_START;
            lex->type = 0;
            /* If you change this code don't forget to update SLAVE START too */
          }
    break;

  case 975:

/* Line 1455 of yacc.c  */
#line 7242 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 976:

/* Line 1455 of yacc.c  */
#line 7244 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_ALL_START;
            lex->type = 0;
          }
    break;

  case 977:

/* Line 1455 of yacc.c  */
#line 7249 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 978:

/* Line 1455 of yacc.c  */
#line 7251 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_STOP;
            lex->type = 0;
            /* If you change this code don't forget to update SLAVE STOP too */
          }
    break;

  case 979:

/* Line 1455 of yacc.c  */
#line 7258 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_ALL_STOP;
            lex->type = 0;
            /* If you change this code don't forget to update SLAVE STOP too */
          }
    break;

  case 980:

/* Line 1455 of yacc.c  */
#line 7265 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_START;
            lex->type = 0;
          }
    break;

  case 981:

/* Line 1455 of yacc.c  */
#line 7271 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 982:

/* Line 1455 of yacc.c  */
#line 7273 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_STOP;
            lex->type = 0;
          }
    break;

  case 983:

/* Line 1455 of yacc.c  */
#line 7282 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_BEGIN;
            /* READ ONLY and READ WRITE are mutually exclusive. */
            if (((yyvsp[(3) - (3)].num) & MYSQL_START_TRANS_OPT_READ_WRITE) &&
                ((yyvsp[(3) - (3)].num) & MYSQL_START_TRANS_OPT_READ_ONLY))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->start_transaction_opt= (yyvsp[(3) - (3)].num);
          }
    break;

  case 984:

/* Line 1455 of yacc.c  */
#line 7298 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= 0;
          }
    break;

  case 985:

/* Line 1455 of yacc.c  */
#line 7302 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= (yyvsp[(1) - (1)].num);
          }
    break;

  case 986:

/* Line 1455 of yacc.c  */
#line 7309 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= (yyvsp[(1) - (1)].num);
          }
    break;

  case 987:

/* Line 1455 of yacc.c  */
#line 7313 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= (yyvsp[(1) - (3)].num) | (yyvsp[(3) - (3)].num);
          }
    break;

  case 988:

/* Line 1455 of yacc.c  */
#line 7320 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_START_TRANS_OPT_WITH_CONS_SNAPSHOT;
          }
    break;

  case 989:

/* Line 1455 of yacc.c  */
#line 7324 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_START_TRANS_OPT_READ_ONLY;
          }
    break;

  case 990:

/* Line 1455 of yacc.c  */
#line 7328 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_START_TRANS_OPT_READ_WRITE;
          }
    break;

  case 991:

/* Line 1455 of yacc.c  */
#line 7334 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->slave_thd_opt= 0; }
    break;

  case 992:

/* Line 1455 of yacc.c  */
#line 7336 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 995:

/* Line 1455 of yacc.c  */
#line 7345 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 996:

/* Line 1455 of yacc.c  */
#line 7346 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->slave_thd_opt|=SLAVE_SQL; }
    break;

  case 997:

/* Line 1455 of yacc.c  */
#line 7347 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->slave_thd_opt|=SLAVE_IO; }
    break;

  case 998:

/* Line 1455 of yacc.c  */
#line 7351 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 999:

/* Line 1455 of yacc.c  */
#line 7353 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (((lex->mi.log_file_name || lex->mi.pos) &&
                 (lex->mi.relay_log_name || lex->mi.relay_log_pos)) ||
                !((lex->mi.log_file_name && lex->mi.pos) ||
                  (lex->mi.relay_log_name && lex->mi.relay_log_pos)))
            {
               my_message(ER_BAD_SLAVE_UNTIL_COND,
                          ER(ER_BAD_SLAVE_UNTIL_COND), MYF(0));
               MYSQL_YYABORT;
            }
          }
    break;

  case 1002:

/* Line 1455 of yacc.c  */
#line 7374 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_CHECKSUM;
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1003:

/* Line 1455 of yacc.c  */
#line 7381 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1004:

/* Line 1455 of yacc.c  */
#line 7385 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.flags= 0; }
    break;

  case 1005:

/* Line 1455 of yacc.c  */
#line 7386 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.flags= T_QUICK; }
    break;

  case 1006:

/* Line 1455 of yacc.c  */
#line 7387 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.flags= T_EXTEND; }
    break;

  case 1007:

/* Line 1455 of yacc.c  */
#line 7392 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_REPAIR;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1008:

/* Line 1455 of yacc.c  */
#line 7402 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root) Repair_table_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1009:

/* Line 1455 of yacc.c  */
#line 7413 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.flags = T_MEDIUM; }
    break;

  case 1010:

/* Line 1455 of yacc.c  */
#line 7414 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1011:

/* Line 1455 of yacc.c  */
#line 7418 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1012:

/* Line 1455 of yacc.c  */
#line 7419 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1013:

/* Line 1455 of yacc.c  */
#line 7423 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_QUICK; }
    break;

  case 1014:

/* Line 1455 of yacc.c  */
#line 7424 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_EXTEND; }
    break;

  case 1015:

/* Line 1455 of yacc.c  */
#line 7425 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.sql_flags|= TT_USEFRM; }
    break;

  case 1016:

/* Line 1455 of yacc.c  */
#line 7430 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_ANALYZE;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1017:

/* Line 1455 of yacc.c  */
#line 7440 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root) Analyze_table_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1021:

/* Line 1455 of yacc.c  */
#line 7461 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1022:

/* Line 1455 of yacc.c  */
#line 7463 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            THD *thd= YYTHD;
            thd->lex->with_persistent_for_clause= TRUE;
          }
    break;

  case 1023:

/* Line 1455 of yacc.c  */
#line 7471 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1024:

/* Line 1455 of yacc.c  */
#line 7473 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1025:

/* Line 1455 of yacc.c  */
#line 7476 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1026:

/* Line 1455 of yacc.c  */
#line 7478 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            lex->column_list= new List<LEX_STRING>;
            if (lex->column_list == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1028:

/* Line 1455 of yacc.c  */
#line 7490 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1029:

/* Line 1455 of yacc.c  */
#line 7492 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            lex->index_list= new List<LEX_STRING>;
            if (lex->index_list == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1031:

/* Line 1455 of yacc.c  */
#line 7505 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1032:

/* Line 1455 of yacc.c  */
#line 7507 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->column_list->push_back((LEX_STRING*)
            sql_memdup(&(yyvsp[(1) - (1)].lex_str), sizeof(LEX_STRING)));
          }
    break;

  case 1033:

/* Line 1455 of yacc.c  */
#line 7512 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->column_list->push_back((LEX_STRING*)
            sql_memdup(&(yyvsp[(3) - (3)].lex_str), sizeof(LEX_STRING)));
          }
    break;

  case 1034:

/* Line 1455 of yacc.c  */
#line 7520 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1037:

/* Line 1455 of yacc.c  */
#line 7527 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->index_list->push_back(
              (LEX_STRING*) sql_memdup(&(yyvsp[(1) - (1)].lex_str), sizeof(LEX_STRING)));
          }
    break;

  case 1038:

/* Line 1455 of yacc.c  */
#line 7533 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX_STRING str= {(char*) "PRIMARY", 7};
            Lex->index_list->push_back(
              (LEX_STRING*) sql_memdup(&str, sizeof(LEX_STRING)));
          }
    break;

  case 1039:

/* Line 1455 of yacc.c  */
#line 7542 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_BINLOG_BASE64_EVENT;
            Lex->comment= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 1040:

/* Line 1455 of yacc.c  */
#line 7550 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "CHECK");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_CHECK;
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1041:

/* Line 1455 of yacc.c  */
#line 7565 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root) Check_table_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1042:

/* Line 1455 of yacc.c  */
#line 7576 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.flags = T_MEDIUM; }
    break;

  case 1043:

/* Line 1455 of yacc.c  */
#line 7577 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1044:

/* Line 1455 of yacc.c  */
#line 7581 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1045:

/* Line 1455 of yacc.c  */
#line 7582 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1046:

/* Line 1455 of yacc.c  */
#line 7586 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_QUICK; }
    break;

  case 1047:

/* Line 1455 of yacc.c  */
#line 7587 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_FAST; }
    break;

  case 1048:

/* Line 1455 of yacc.c  */
#line 7588 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_MEDIUM; }
    break;

  case 1049:

/* Line 1455 of yacc.c  */
#line 7589 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_EXTEND; }
    break;

  case 1050:

/* Line 1455 of yacc.c  */
#line 7590 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_CHECK_ONLY_CHANGED; }
    break;

  case 1051:

/* Line 1455 of yacc.c  */
#line 7591 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.sql_flags|= TT_FOR_UPGRADE; }
    break;

  case 1052:

/* Line 1455 of yacc.c  */
#line 7596 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_OPTIMIZE;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1053:

/* Line 1455 of yacc.c  */
#line 7606 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root) Optimize_table_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1054:

/* Line 1455 of yacc.c  */
#line 7617 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1055:

/* Line 1455 of yacc.c  */
#line 7618 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1056:

/* Line 1455 of yacc.c  */
#line 7619 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1057:

/* Line 1455 of yacc.c  */
#line 7624 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_RENAME_TABLE;
          }
    break;

  case 1058:

/* Line 1455 of yacc.c  */
#line 7628 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1059:

/* Line 1455 of yacc.c  */
#line 7630 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_RENAME_USER;
          }
    break;

  case 1060:

/* Line 1455 of yacc.c  */
#line 7637 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (3)].lex_user)) || Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 1061:

/* Line 1455 of yacc.c  */
#line 7642 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (5)].lex_user)) || Lex->users_list.push_back((yyvsp[(5) - (5)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 1064:

/* Line 1455 of yacc.c  */
#line 7655 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            SELECT_LEX *sl= lex->current_select;
            if (!sl->add_table_to_list(lex->thd, (yyvsp[(1) - (3)].table),NULL,TL_OPTION_UPDATING,
                                       TL_IGNORE, MDL_EXCLUSIVE) ||
                !sl->add_table_to_list(lex->thd, (yyvsp[(3) - (3)].table),NULL,TL_OPTION_UPDATING,
                                       TL_IGNORE, MDL_EXCLUSIVE))
              MYSQL_YYABORT;
          }
    break;

  case 1065:

/* Line 1455 of yacc.c  */
#line 7668 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->alter_info.reset();
          }
    break;

  case 1066:

/* Line 1455 of yacc.c  */
#line 7672 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ASSIGN_TO_KEYCACHE;
            lex->ident= (yyvsp[(6) - (6)].lex_str);
          }
    break;

  case 1071:

/* Line 1455 of yacc.c  */
#line 7691 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (2)].table), NULL, 0, TL_READ,
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1072:

/* Line 1455 of yacc.c  */
#line 7701 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (3)].table), NULL, 0, TL_READ, 
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1073:

/* Line 1455 of yacc.c  */
#line 7710 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 1074:

/* Line 1455 of yacc.c  */
#line 7711 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str) = default_key_cache_base; }
    break;

  case 1075:

/* Line 1455 of yacc.c  */
#line 7716 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_PRELOAD_KEYS;
            lex->alter_info.reset();
          }
    break;

  case 1076:

/* Line 1455 of yacc.c  */
#line 7722 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1081:

/* Line 1455 of yacc.c  */
#line 7737 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (3)].table), NULL, (yyvsp[(3) - (3)].num), TL_READ,
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1082:

/* Line 1455 of yacc.c  */
#line 7747 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (4)].table), NULL, (yyvsp[(4) - (4)].num), TL_READ,
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1083:

/* Line 1455 of yacc.c  */
#line 7757 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_ADMIN_PARTITION;
          }
    break;

  case 1085:

/* Line 1455 of yacc.c  */
#line 7764 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->select_lex.alloc_index_hints(YYTHD);
            Select->set_index_hint_type(INDEX_HINT_USE, 
                                        INDEX_HINT_MASK_ALL);
          }
    break;

  case 1087:

/* Line 1455 of yacc.c  */
#line 7773 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { }
    break;

  case 1089:

/* Line 1455 of yacc.c  */
#line 7779 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1090:

/* Line 1455 of yacc.c  */
#line 7780 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= TL_OPTION_IGNORE_LEAVES; }
    break;

  case 1091:

/* Line 1455 of yacc.c  */
#line 7790 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SELECT;
          }
    break;

  case 1094:

/* Line 1455 of yacc.c  */
#line 7804 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (setup_select_in_parentheses(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1096:

/* Line 1455 of yacc.c  */
#line 7814 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (setup_select_in_parentheses(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1098:

/* Line 1455 of yacc.c  */
#line 7823 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX * sel= lex->current_select;
            if (lex->current_select->set_braces(0))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (sel->linkage == UNION_TYPE &&
                sel->master_unit()->first_select()->braces)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1100:

/* Line 1455 of yacc.c  */
#line 7842 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->linkage != UNION_TYPE)
              mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 1101:

/* Line 1455 of yacc.c  */
#line 7850 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1103:

/* Line 1455 of yacc.c  */
#line 7857 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1108:

/* Line 1455 of yacc.c  */
#line 7867 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->context.table_list=
              Select->context.first_name_resolution_table=
                Select->table_list.first;
          }
    break;

  case 1111:

/* Line 1455 of yacc.c  */
#line 7882 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Select->options & SELECT_DISTINCT && Select->options & SELECT_ALL)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "ALL", "DISTINCT");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1115:

/* Line 1455 of yacc.c  */
#line 7899 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* 
              Allow this flag only on the first top-level SELECT statement, if
              SQL_CACHE wasn't specified, and only once per query.
             */
            if (Lex->current_select != &Lex->select_lex)
            {
              my_error(ER_CANT_USE_OPTION_HERE, MYF(0), "SQL_NO_CACHE");
              MYSQL_YYABORT;
            }
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_CACHE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "SQL_CACHE", "SQL_NO_CACHE");
              MYSQL_YYABORT;
            }
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_NO_CACHE)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "SQL_NO_CACHE");
              MYSQL_YYABORT;
            }
            else
            {
              Lex->safe_to_cache_query=0;
              Lex->select_lex.options&= ~OPTION_TO_QUERY_CACHE;
              Lex->select_lex.sql_cache= SELECT_LEX::SQL_NO_CACHE;
            }
          }
    break;

  case 1116:

/* Line 1455 of yacc.c  */
#line 7927 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* 
              Allow this flag only on the first top-level SELECT statement, if
              SQL_NO_CACHE wasn't specified, and only once per query.
             */
            if (Lex->current_select != &Lex->select_lex)
            {
              my_error(ER_CANT_USE_OPTION_HERE, MYF(0), "SQL_CACHE");
              MYSQL_YYABORT;
            }         
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_NO_CACHE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "SQL_NO_CACHE", "SQL_CACHE");
              MYSQL_YYABORT;
            }
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_CACHE)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "SQL_CACHE");
              MYSQL_YYABORT;
            }
            else
            {
              Lex->safe_to_cache_query=1;
              Lex->select_lex.options|= OPTION_TO_QUERY_CACHE;
              Lex->select_lex.sql_cache= SELECT_LEX::SQL_CACHE;
            }
          }
    break;

  case 1118:

/* Line 1455 of yacc.c  */
#line 7959 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->current_select->set_lock_for_tables(TL_WRITE);
            lex->safe_to_cache_query=0;
          }
    break;

  case 1119:

/* Line 1455 of yacc.c  */
#line 7965 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->current_select->
              set_lock_for_tables(TL_READ_WITH_SHARED_LOCKS);
            lex->safe_to_cache_query=0;
          }
    break;

  case 1122:

/* Line 1455 of yacc.c  */
#line 7977 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *item= new (thd->mem_root)
                          Item_field(&thd->lex->current_select->context,
                                     NULL, NULL, "*");
            if (item == NULL)
              MYSQL_YYABORT;
            if (add_item_to_list(thd, item))
              MYSQL_YYABORT;
            (thd->lex->current_select->with_wild)++;
          }
    break;

  case 1123:

/* Line 1455 of yacc.c  */
#line 7992 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (add_item_to_list(thd, (yyvsp[(2) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1124:

/* Line 1455 of yacc.c  */
#line 7999 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            DBUG_ASSERT((yyvsp[(1) - (4)].simple_string) < (yyvsp[(3) - (4)].simple_string));

            if (add_item_to_list(thd, (yyvsp[(2) - (4)].item)))
              MYSQL_YYABORT;
            if ((yyvsp[(4) - (4)].lex_str).str)
            {
              if (Lex->sql_command == SQLCOM_CREATE_VIEW &&
                  check_column_name((yyvsp[(4) - (4)].lex_str).str))
              {
                my_error(ER_WRONG_COLUMN_NAME, MYF(0), (yyvsp[(4) - (4)].lex_str).str);
                MYSQL_YYABORT;
              }
              (yyvsp[(2) - (4)].item)->is_autogenerated_name= FALSE;
              (yyvsp[(2) - (4)].item)->set_name((yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length, system_charset_info);
            }
            else if (!(yyvsp[(2) - (4)].item)->name)
            {
              (yyvsp[(2) - (4)].item)->set_name((yyvsp[(1) - (4)].simple_string), (uint) ((yyvsp[(3) - (4)].simple_string) - (yyvsp[(1) - (4)].simple_string)), thd->charset());
            }
          }
    break;

  case 1125:

/* Line 1455 of yacc.c  */
#line 8024 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.simple_string)= (char*) YYLIP->get_cpp_tok_start();
          }
    break;

  case 1126:

/* Line 1455 of yacc.c  */
#line 8030 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.simple_string)= (char*) YYLIP->get_cpp_tok_end();
          }
    break;

  case 1127:

/* Line 1455 of yacc.c  */
#line 8036 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)=null_lex_str;}
    break;

  case 1128:

/* Line 1455 of yacc.c  */
#line 8037 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str); }
    break;

  case 1129:

/* Line 1455 of yacc.c  */
#line 8038 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str); }
    break;

  case 1130:

/* Line 1455 of yacc.c  */
#line 8039 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1131:

/* Line 1455 of yacc.c  */
#line 8040 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1132:

/* Line 1455 of yacc.c  */
#line 8044 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= NOT_FIXED_DEC;  }
    break;

  case 1133:

/* Line 1455 of yacc.c  */
#line 8045 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= NOT_FIXED_DEC;  }
    break;

  case 1134:

/* Line 1455 of yacc.c  */
#line 8046 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(2) - (3)].ulong_num); }
    break;

  case 1135:

/* Line 1455 of yacc.c  */
#line 8050 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0;  }
    break;

  case 1136:

/* Line 1455 of yacc.c  */
#line 8051 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0;  }
    break;

  case 1137:

/* Line 1455 of yacc.c  */
#line 8052 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(2) - (3)].ulong_num); }
    break;

  case 1138:

/* Line 1455 of yacc.c  */
#line 8056 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1139:

/* Line 1455 of yacc.c  */
#line 8057 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1140:

/* Line 1455 of yacc.c  */
#line 8063 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              Design notes:
              Do not use a manually maintained stack like thd->lex->xxx_list,
              but use the internal bison stack ($$, $1 and $3) instead.
              Using the bison stack is:
              - more robust to changes in the grammar,
              - guaranteed to be in sync with the parser state,
              - better for performances (no memory allocation).
            */
            Item_cond_or *item1;
            Item_cond_or *item3;
            if (is_cond_or((yyvsp[(1) - (3)].item)))
            {
              item1= (Item_cond_or*) (yyvsp[(1) - (3)].item);
              if (is_cond_or((yyvsp[(3) - (3)].item)))
              {
                item3= (Item_cond_or*) (yyvsp[(3) - (3)].item);
                /*
                  (X1 OR X2) OR (Y1 OR Y2) ==> OR (X1, X2, Y1, Y2)
                */
                item3->add_at_head(item1->argument_list());
                (yyval.item) = (yyvsp[(3) - (3)].item);
              }
              else
              {
                /*
                  (X1 OR X2) OR Y ==> OR (X1, X2, Y)
                */
                item1->add((yyvsp[(3) - (3)].item));
                (yyval.item) = (yyvsp[(1) - (3)].item);
              }
            }
            else if (is_cond_or((yyvsp[(3) - (3)].item)))
            {
              item3= (Item_cond_or*) (yyvsp[(3) - (3)].item);
              /*
                X OR (Y1 OR Y2) ==> OR (X, Y1, Y2)
              */
              item3->add_at_head((yyvsp[(1) - (3)].item));
              (yyval.item) = (yyvsp[(3) - (3)].item);
            }
            else
            {
              /* X OR Y */
              (yyval.item) = new (YYTHD->mem_root) Item_cond_or((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1141:

/* Line 1455 of yacc.c  */
#line 8114 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* XOR is a proprietary extension */
            (yyval.item) = new (YYTHD->mem_root) Item_func_xor((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1142:

/* Line 1455 of yacc.c  */
#line 8121 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* See comments in rule expr: expr or expr */
            Item_cond_and *item1;
            Item_cond_and *item3;
            if (is_cond_and((yyvsp[(1) - (3)].item)))
            {
              item1= (Item_cond_and*) (yyvsp[(1) - (3)].item);
              if (is_cond_and((yyvsp[(3) - (3)].item)))
              {
                item3= (Item_cond_and*) (yyvsp[(3) - (3)].item);
                /*
                  (X1 AND X2) AND (Y1 AND Y2) ==> AND (X1, X2, Y1, Y2)
                */
                item3->add_at_head(item1->argument_list());
                (yyval.item) = (yyvsp[(3) - (3)].item);
              }
              else
              {
                /*
                  (X1 AND X2) AND Y ==> AND (X1, X2, Y)
                */
                item1->add((yyvsp[(3) - (3)].item));
                (yyval.item) = (yyvsp[(1) - (3)].item);
              }
            }
            else if (is_cond_and((yyvsp[(3) - (3)].item)))
            {
              item3= (Item_cond_and*) (yyvsp[(3) - (3)].item);
              /*
                X AND (Y1 AND Y2) ==> AND (X, Y1, Y2)
              */
              item3->add_at_head((yyvsp[(1) - (3)].item));
              (yyval.item) = (yyvsp[(3) - (3)].item);
            }
            else
            {
              /* X AND Y */
              (yyval.item) = new (YYTHD->mem_root) Item_cond_and((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1143:

/* Line 1455 of yacc.c  */
#line 8164 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= negate_expression(YYTHD, (yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1144:

/* Line 1455 of yacc.c  */
#line 8170 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_istrue((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1145:

/* Line 1455 of yacc.c  */
#line 8176 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnottrue((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1146:

/* Line 1455 of yacc.c  */
#line 8182 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isfalse((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1147:

/* Line 1455 of yacc.c  */
#line 8188 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnotfalse((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1148:

/* Line 1455 of yacc.c  */
#line 8194 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnull((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1149:

/* Line 1455 of yacc.c  */
#line 8200 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnotnull((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1151:

/* Line 1455 of yacc.c  */
#line 8210 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnull((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1152:

/* Line 1455 of yacc.c  */
#line 8216 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnotnull((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1153:

/* Line 1455 of yacc.c  */
#line 8222 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_equal((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1154:

/* Line 1455 of yacc.c  */
#line 8228 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= (*(yyvsp[(2) - (3)].boolfunc2creator))(0)->create((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1155:

/* Line 1455 of yacc.c  */
#line 8234 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= all_any_subquery_creator((yyvsp[(1) - (6)].item), (yyvsp[(2) - (6)].boolfunc2creator), (yyvsp[(3) - (6)].num), (yyvsp[(5) - (6)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1157:

/* Line 1455 of yacc.c  */
#line 8244 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_in_subselect((yyvsp[(1) - (5)].item), (yyvsp[(4) - (5)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1158:

/* Line 1455 of yacc.c  */
#line 8250 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *item= new (thd->mem_root) Item_in_subselect((yyvsp[(1) - (6)].item), (yyvsp[(5) - (6)].select_lex));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= negate_expression(thd, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1159:

/* Line 1455 of yacc.c  */
#line 8260 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= handle_sql2003_note184_exception(YYTHD, (yyvsp[(1) - (5)].item), true, (yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1160:

/* Line 1455 of yacc.c  */
#line 8266 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            (yyvsp[(6) - (7)].item_list)->push_front((yyvsp[(4) - (7)].item));
            (yyvsp[(6) - (7)].item_list)->push_front((yyvsp[(1) - (7)].item));
            (yyval.item)= new (YYTHD->mem_root) Item_func_in(*(yyvsp[(6) - (7)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1161:

/* Line 1455 of yacc.c  */
#line 8274 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= handle_sql2003_note184_exception(YYTHD, (yyvsp[(1) - (6)].item), false, (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1162:

/* Line 1455 of yacc.c  */
#line 8280 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(5) - (8)].item));
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(1) - (8)].item));
            Item_func_in *item = new (YYTHD->mem_root) Item_func_in(*(yyvsp[(7) - (8)].item_list));
            if (item == NULL)
              MYSQL_YYABORT;
            item->negate();
            (yyval.item)= item;
          }
    break;

  case 1163:

/* Line 1455 of yacc.c  */
#line 8290 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_between((yyvsp[(1) - (5)].item),(yyvsp[(3) - (5)].item),(yyvsp[(5) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1164:

/* Line 1455 of yacc.c  */
#line 8296 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item_func_between *item;
            item= new (YYTHD->mem_root) Item_func_between((yyvsp[(1) - (6)].item),(yyvsp[(4) - (6)].item),(yyvsp[(6) - (6)].item));
            if (item == NULL)
              MYSQL_YYABORT;
            item->negate();
            (yyval.item)= item;
          }
    break;

  case 1165:

/* Line 1455 of yacc.c  */
#line 8305 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item *item1= new (YYTHD->mem_root) Item_func_soundex((yyvsp[(1) - (4)].item));
            Item *item4= new (YYTHD->mem_root) Item_func_soundex((yyvsp[(4) - (4)].item));
            if ((item1 == NULL) || (item4 == NULL))
              MYSQL_YYABORT;
            (yyval.item)= new (YYTHD->mem_root) Item_func_eq(item1, item4);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1166:

/* Line 1455 of yacc.c  */
#line 8315 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_like((yyvsp[(1) - (4)].item),(yyvsp[(3) - (4)].item),(yyvsp[(4) - (4)].item),Lex->escape_used);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1167:

/* Line 1455 of yacc.c  */
#line 8321 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_func_like((yyvsp[(1) - (5)].item),(yyvsp[(4) - (5)].item),(yyvsp[(5) - (5)].item),
                                                             Lex->escape_used);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (YYTHD->mem_root) Item_func_not(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1168:

/* Line 1455 of yacc.c  */
#line 8331 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_regex((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1169:

/* Line 1455 of yacc.c  */
#line 8337 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_func_regex((yyvsp[(1) - (4)].item),(yyvsp[(4) - (4)].item));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= negate_expression(YYTHD, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1171:

/* Line 1455 of yacc.c  */
#line 8350 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_or((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1172:

/* Line 1455 of yacc.c  */
#line 8356 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_and((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1173:

/* Line 1455 of yacc.c  */
#line 8362 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_shift_left((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1174:

/* Line 1455 of yacc.c  */
#line 8368 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_shift_right((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1175:

/* Line 1455 of yacc.c  */
#line 8374 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_plus((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1176:

/* Line 1455 of yacc.c  */
#line 8380 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_minus((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1177:

/* Line 1455 of yacc.c  */
#line 8386 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(1) - (5)].item),(yyvsp[(4) - (5)].item),(yyvsp[(5) - (5)].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1178:

/* Line 1455 of yacc.c  */
#line 8392 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(1) - (5)].item),(yyvsp[(4) - (5)].item),(yyvsp[(5) - (5)].interval),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1179:

/* Line 1455 of yacc.c  */
#line 8398 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_mul((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1180:

/* Line 1455 of yacc.c  */
#line 8404 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_div((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1181:

/* Line 1455 of yacc.c  */
#line 8410 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_mod((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1182:

/* Line 1455 of yacc.c  */
#line 8416 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_int_div((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1183:

/* Line 1455 of yacc.c  */
#line 8422 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_mod((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1184:

/* Line 1455 of yacc.c  */
#line 8428 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_xor((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1194:

/* Line 1455 of yacc.c  */
#line 8457 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_eq_creator; }
    break;

  case 1195:

/* Line 1455 of yacc.c  */
#line 8458 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_ge_creator; }
    break;

  case 1196:

/* Line 1455 of yacc.c  */
#line 8459 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_gt_creator; }
    break;

  case 1197:

/* Line 1455 of yacc.c  */
#line 8460 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_le_creator; }
    break;

  case 1198:

/* Line 1455 of yacc.c  */
#line 8461 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_lt_creator; }
    break;

  case 1199:

/* Line 1455 of yacc.c  */
#line 8462 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_ne_creator; }
    break;

  case 1200:

/* Line 1455 of yacc.c  */
#line 8466 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num) = 1; }
    break;

  case 1201:

/* Line 1455 of yacc.c  */
#line 8467 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1202:

/* Line 1455 of yacc.c  */
#line 8472 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
	    (yyval.num)= DYN_COL_NULL; /* automatic type */
            lex->charset= NULL;
            lex->length= lex->dec= 0;
	  }
    break;

  case 1203:

/* Line 1455 of yacc.c  */
#line 8478 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(2) - (2)].num); }
    break;

  case 1204:

/* Line 1455 of yacc.c  */
#line 8483 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_INT;
            lex->charset= NULL;
            lex->length= lex->dec= 0;
          }
    break;

  case 1205:

/* Line 1455 of yacc.c  */
#line 8490 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_UINT;
            lex->charset= NULL;
            lex->length= lex->dec= 0;
          }
    break;

  case 1206:

/* Line 1455 of yacc.c  */
#line 8497 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_DOUBLE;
            lex->charset= NULL;
            lex->length= lex->dec= 0;
          }
    break;

  case 1207:

/* Line 1455 of yacc.c  */
#line 8504 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_DOUBLE;
            lex->charset= NULL;
            lex->length= lex->dec= 0;
          }
    break;

  case 1208:

/* Line 1455 of yacc.c  */
#line 8511 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_DOUBLE;
            lex->charset= NULL;
            lex->length= lex->dec= 0;
          }
    break;

  case 1209:

/* Line 1455 of yacc.c  */
#line 8518 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= DYN_COL_DECIMAL;
            Lex->charset= NULL;
          }
    break;

  case 1210:

/* Line 1455 of yacc.c  */
#line 8523 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_STRING;
            lex->length= lex->dec= 0;
          }
    break;

  case 1211:

/* Line 1455 of yacc.c  */
#line 8529 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_STRING;
            lex->charset= national_charset_info;
            lex->length= lex->dec= 0;
          }
    break;

  case 1212:

/* Line 1455 of yacc.c  */
#line 8536 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_DATE;
            lex->charset= NULL;
            lex->length= lex->dec= 0;
          }
    break;

  case 1213:

/* Line 1455 of yacc.c  */
#line 8543 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_TIME;
            lex->charset= NULL;
            lex->dec= lex->length;
            lex->length= 0;
          }
    break;

  case 1214:

/* Line 1455 of yacc.c  */
#line 8551 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_DATETIME;
            lex->charset= NULL;
            lex->dec= lex->length;
            lex->length= 0;
          }
    break;

  case 1215:

/* Line 1455 of yacc.c  */
#line 8562 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
     LEX *lex= Lex;
     (yyval.dyncol_def)= (DYNCALL_CREATE_DEF *)
       alloc_root(YYTHD->mem_root, sizeof(DYNCALL_CREATE_DEF));
     if ((yyval.dyncol_def) == NULL)
       MYSQL_YYABORT;
     (yyval.dyncol_def)->key= (yyvsp[(1) - (4)].item);
     (yyval.dyncol_def)->value= (yyvsp[(3) - (4)].item);
     (yyval.dyncol_def)->type= (DYNAMIC_COLUMN_TYPE)(yyvsp[(4) - (4)].num);
     (yyval.dyncol_def)->cs= lex->charset;
     if (lex->length)
       (yyval.dyncol_def)->len= strtoul(lex->length, NULL, 10);
     else
       (yyval.dyncol_def)->len= 0;
     if (lex->dec)
       (yyval.dyncol_def)->frac= strtoul(lex->dec, NULL, 10);
     else
       (yyval.dyncol_def)->len= 0;
   }
    break;

  case 1216:

/* Line 1455 of yacc.c  */
#line 8584 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
         (yyval.dyncol_def_list)= new (YYTHD->mem_root) List<DYNCALL_CREATE_DEF>;
         if ((yyval.dyncol_def_list) == NULL)
           MYSQL_YYABORT;
         (yyval.dyncol_def_list)->push_back((yyvsp[(1) - (1)].dyncol_def));
       }
    break;

  case 1217:

/* Line 1455 of yacc.c  */
#line 8591 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
         (yyvsp[(1) - (3)].dyncol_def_list)->push_back((yyvsp[(3) - (3)].dyncol_def));
         (yyval.dyncol_def_list)= (yyvsp[(1) - (3)].dyncol_def_list);
       }
    break;

  case 1223:

/* Line 1455 of yacc.c  */
#line 8604 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *i1= new (thd->mem_root) Item_string((yyvsp[(3) - (3)].lex_str).str,
                                                      (yyvsp[(3) - (3)].lex_str).length,
                                                      thd->charset());
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_set_collation((yyvsp[(1) - (3)].item), i1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1228:

/* Line 1455 of yacc.c  */
#line 8620 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_concat((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1229:

/* Line 1455 of yacc.c  */
#line 8626 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= (yyvsp[(2) - (2)].item);
          }
    break;

  case 1230:

/* Line 1455 of yacc.c  */
#line 8630 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_neg((yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1231:

/* Line 1455 of yacc.c  */
#line 8636 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_neg((yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1232:

/* Line 1455 of yacc.c  */
#line 8642 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= negate_expression(YYTHD, (yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1233:

/* Line 1455 of yacc.c  */
#line 8648 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            (yyval.item)= new (YYTHD->mem_root) Item_singlerow_subselect((yyvsp[(2) - (3)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1234:

/* Line 1455 of yacc.c  */
#line 8654 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(2) - (3)].item); }
    break;

  case 1235:

/* Line 1455 of yacc.c  */
#line 8656 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyvsp[(4) - (5)].item_list)->push_front((yyvsp[(2) - (5)].item));
            (yyval.item)= new (YYTHD->mem_root) Item_row(*(yyvsp[(4) - (5)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1236:

/* Line 1455 of yacc.c  */
#line 8663 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyvsp[(5) - (6)].item_list)->push_front((yyvsp[(3) - (6)].item));
            (yyval.item)= new (YYTHD->mem_root) Item_row(*(yyvsp[(5) - (6)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1237:

/* Line 1455 of yacc.c  */
#line 8670 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_exists_subselect((yyvsp[(3) - (4)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1238:

/* Line 1455 of yacc.c  */
#line 8676 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(3) - (4)].item); }
    break;

  case 1239:

/* Line 1455 of yacc.c  */
#line 8678 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyvsp[(2) - (7)].item_list)->push_front((yyvsp[(5) - (7)].item));
            Item_func_match *i1= new (YYTHD->mem_root) Item_func_match(*(yyvsp[(2) - (7)].item_list), (yyvsp[(6) - (7)].num));
            if (i1 == NULL)
              MYSQL_YYABORT;
            Select->add_ftfunc_to_list(i1);
            (yyval.item)= i1;
          }
    break;

  case 1240:

/* Line 1455 of yacc.c  */
#line 8687 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= create_func_cast(YYTHD, (yyvsp[(2) - (2)].item), ITEM_CAST_CHAR, NULL, NULL,
                                 &my_charset_bin);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1241:

/* Line 1455 of yacc.c  */
#line 8694 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.item)= create_func_cast(YYTHD, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].cast_type), lex->length, lex->dec,
                                 lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1242:

/* Line 1455 of yacc.c  */
#line 8702 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_case(* (yyvsp[(3) - (5)].item_list), (yyvsp[(2) - (5)].item), (yyvsp[(4) - (5)].item) );
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1243:

/* Line 1455 of yacc.c  */
#line 8708 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= create_func_cast(YYTHD, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].cast_type), Lex->length, Lex->dec,
                                 Lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1244:

/* Line 1455 of yacc.c  */
#line 8715 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_conv_charset((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].charset));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1245:

/* Line 1455 of yacc.c  */
#line 8721 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if ((yyvsp[(3) - (4)].item)->is_splocal())
            {
              Item_splocal *il= static_cast<Item_splocal *>((yyvsp[(3) - (4)].item));

              my_error(ER_WRONG_COLUMN_NAME, MYF(0), il->my_name()->str);
              MYSQL_YYABORT;
            }
            (yyval.item)= new (YYTHD->mem_root) Item_default_value(Lex->current_context(),
                                                         (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1246:

/* Line 1455 of yacc.c  */
#line 8735 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_insert_value(Lex->current_context(),
                                                        (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1247:

/* Line 1455 of yacc.c  */
#line 8743 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(5) - (5)].item),(yyvsp[(2) - (5)].item),(yyvsp[(3) - (5)].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1248:

/* Line 1455 of yacc.c  */
#line 8758 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_char(*(yyvsp[(3) - (4)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1249:

/* Line 1455 of yacc.c  */
#line 8764 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_char(*(yyvsp[(3) - (6)].item_list), (yyvsp[(5) - (6)].charset));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1250:

/* Line 1455 of yacc.c  */
#line 8770 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_current_user(Lex->current_context());
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query= 0;
          }
    break;

  case 1251:

/* Line 1455 of yacc.c  */
#line 8778 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_typecast((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1252:

/* Line 1455 of yacc.c  */
#line 8784 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_dayofmonth((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1253:

/* Line 1455 of yacc.c  */
#line 8790 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_hour((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1254:

/* Line 1455 of yacc.c  */
#line 8796 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_insert((yyvsp[(3) - (10)].item),(yyvsp[(5) - (10)].item),(yyvsp[(7) - (10)].item),(yyvsp[(9) - (10)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1255:

/* Line 1455 of yacc.c  */
#line 8802 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            List<Item> *list= new (thd->mem_root) List<Item>;
            if (list == NULL)
              MYSQL_YYABORT;
            list->push_front((yyvsp[(5) - (6)].item));
            list->push_front((yyvsp[(3) - (6)].item));
            Item_row *item= new (thd->mem_root) Item_row(*list);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_interval(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1256:

/* Line 1455 of yacc.c  */
#line 8817 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(5) - (8)].item));
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(3) - (8)].item));
            Item_row *item= new (thd->mem_root) Item_row(*(yyvsp[(7) - (8)].item_list));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_interval(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1257:

/* Line 1455 of yacc.c  */
#line 8829 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_left((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1258:

/* Line 1455 of yacc.c  */
#line 8835 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_minute((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1259:

/* Line 1455 of yacc.c  */
#line 8841 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_month((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1260:

/* Line 1455 of yacc.c  */
#line 8847 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_right((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1261:

/* Line 1455 of yacc.c  */
#line 8853 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_second((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1262:

/* Line 1455 of yacc.c  */
#line 8859 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_time_typecast((yyvsp[(3) - (4)].item), AUTO_SEC_PART_DIGITS);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1263:

/* Line 1455 of yacc.c  */
#line 8865 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_datetime_typecast((yyvsp[(3) - (4)].item), AUTO_SEC_PART_DIGITS);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1264:

/* Line 1455 of yacc.c  */
#line 8871 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_add_time((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item), 1, 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1265:

/* Line 1455 of yacc.c  */
#line 8877 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1266:

/* Line 1455 of yacc.c  */
#line 8883 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_ltrim((yyvsp[(6) - (7)].item),(yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1267:

/* Line 1455 of yacc.c  */
#line 8889 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_rtrim((yyvsp[(6) - (7)].item),(yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1268:

/* Line 1455 of yacc.c  */
#line 8895 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(6) - (7)].item),(yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1269:

/* Line 1455 of yacc.c  */
#line 8901 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_ltrim((yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1270:

/* Line 1455 of yacc.c  */
#line 8907 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_rtrim((yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1271:

/* Line 1455 of yacc.c  */
#line 8913 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1272:

/* Line 1455 of yacc.c  */
#line 8919 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(5) - (6)].item),(yyvsp[(3) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1273:

/* Line 1455 of yacc.c  */
#line 8925 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_user();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1274:

/* Line 1455 of yacc.c  */
#line 8933 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_year((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1275:

/* Line 1455 of yacc.c  */
#line 8954 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                                             INTERVAL_DAY, 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1276:

/* Line 1455 of yacc.c  */
#line 8961 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item), (yyvsp[(6) - (8)].item), (yyvsp[(7) - (8)].interval), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1277:

/* Line 1455 of yacc.c  */
#line 8967 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curdate_local();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1278:

/* Line 1455 of yacc.c  */
#line 8974 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curtime_local((yyvsp[(2) - (2)].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1279:

/* Line 1455 of yacc.c  */
#line 8982 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item),(yyvsp[(6) - (8)].item),(yyvsp[(7) - (8)].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1280:

/* Line 1455 of yacc.c  */
#line 8989 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item),(yyvsp[(6) - (8)].item),(yyvsp[(7) - (8)].interval),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1281:

/* Line 1455 of yacc.c  */
#line 8995 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_extract( (yyvsp[(3) - (6)].interval), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1282:

/* Line 1455 of yacc.c  */
#line 9001 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_get_format((yyvsp[(3) - (6)].date_time_type), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1283:

/* Line 1455 of yacc.c  */
#line 9007 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_now_local((yyvsp[(2) - (2)].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1284:

/* Line 1455 of yacc.c  */
#line 9014 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_func_locate((yyvsp[(5) - (6)].item),(yyvsp[(3) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1285:

/* Line 1455 of yacc.c  */
#line 9020 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                                             INTERVAL_DAY, 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1286:

/* Line 1455 of yacc.c  */
#line 9027 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item), (yyvsp[(6) - (8)].item), (yyvsp[(7) - (8)].interval), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1287:

/* Line 1455 of yacc.c  */
#line 9033 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1288:

/* Line 1455 of yacc.c  */
#line 9039 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1289:

/* Line 1455 of yacc.c  */
#line 9045 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1290:

/* Line 1455 of yacc.c  */
#line 9051 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1291:

/* Line 1455 of yacc.c  */
#line 9057 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              Unlike other time-related functions, SYSDATE() is
              replication-unsafe because it is not affected by the
              TIMESTAMP variable.  It is unsafe even if
              sysdate_is_now=1, because the slave may have
              sysdate_is_now=0.
            */
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            if (global_system_variables.sysdate_is_now == 0)
              (yyval.item)= new (YYTHD->mem_root) Item_func_sysdate_local((yyvsp[(2) - (2)].num));
            else
              (yyval.item)= new (YYTHD->mem_root) Item_func_now_local((yyvsp[(2) - (2)].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1292:

/* Line 1455 of yacc.c  */
#line 9075 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(7) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(3) - (8)].interval_time_st),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1293:

/* Line 1455 of yacc.c  */
#line 9081 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_timestamp_diff((yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item),(yyvsp[(3) - (8)].interval_time_st));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1294:

/* Line 1455 of yacc.c  */
#line 9087 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curdate_utc();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1295:

/* Line 1455 of yacc.c  */
#line 9094 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curtime_utc((yyvsp[(2) - (2)].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1296:

/* Line 1455 of yacc.c  */
#line 9101 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_now_utc((yyvsp[(2) - (2)].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1297:

/* Line 1455 of yacc.c  */
#line 9109 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= create_func_dyncol_add(YYTHD, (yyvsp[(3) - (6)].item), *(yyvsp[(5) - (6)].dyncol_def_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1298:

/* Line 1455 of yacc.c  */
#line 9116 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= create_func_dyncol_delete(YYTHD, (yyvsp[(3) - (6)].item), *(yyvsp[(5) - (6)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1299:

/* Line 1455 of yacc.c  */
#line 9123 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_dyncol_check((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1300:

/* Line 1455 of yacc.c  */
#line 9130 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= create_func_dyncol_create(YYTHD, *(yyvsp[(3) - (4)].dyncol_def_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1301:

/* Line 1455 of yacc.c  */
#line 9137 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.item)= create_func_dyncol_get(YYTHD, (yyvsp[(3) - (8)].item), (yyvsp[(5) - (8)].item), (yyvsp[(7) - (8)].cast_type),
                                        lex->length, lex->dec,
                                        lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1302:

/* Line 1455 of yacc.c  */
#line 9154 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_ascii((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1303:

/* Line 1455 of yacc.c  */
#line 9160 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_charset((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1304:

/* Line 1455 of yacc.c  */
#line 9166 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_coalesce(* (yyvsp[(3) - (4)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1305:

/* Line 1455 of yacc.c  */
#line 9172 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_collation((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1306:

/* Line 1455 of yacc.c  */
#line 9178 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_database();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1307:

/* Line 1455 of yacc.c  */
#line 9185 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_if((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1308:

/* Line 1455 of yacc.c  */
#line 9191 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_last_value(* (yyvsp[(3) - (4)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1309:

/* Line 1455 of yacc.c  */
#line 9197 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_microsecond((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1310:

/* Line 1455 of yacc.c  */
#line 9203 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_func_mod((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1311:

/* Line 1455 of yacc.c  */
#line 9209 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)=  new (YYTHD->mem_root) Item_func_old_password((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1312:

/* Line 1455 of yacc.c  */
#line 9215 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item* i1;
            if (thd->variables.old_passwords)
              i1= new (thd->mem_root) Item_func_old_password((yyvsp[(3) - (4)].item));
            else
              i1= new (thd->mem_root) Item_func_password((yyvsp[(3) - (4)].item));
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= i1;
          }
    break;

  case 1313:

/* Line 1455 of yacc.c  */
#line 9227 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_func_quarter((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1314:

/* Line 1455 of yacc.c  */
#line 9233 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_repeat((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1315:

/* Line 1455 of yacc.c  */
#line 9239 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_replace((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1316:

/* Line 1455 of yacc.c  */
#line 9245 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_round((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1317:

/* Line 1455 of yacc.c  */
#line 9251 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *i1= new (thd->mem_root) Item_int((char*) "0",
                                           thd->variables.default_week_format,
                                                   1);
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_week((yyvsp[(3) - (4)].item), i1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1318:

/* Line 1455 of yacc.c  */
#line 9263 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_week((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1319:

/* Line 1455 of yacc.c  */
#line 9269 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            (yyval.item)= (yyvsp[(1) - (1)].item);
            /* $1 may be NULL, GEOM_NEW not tested for out of memory */
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
    break;

  case 1320:

/* Line 1455 of yacc.c  */
#line 9285 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_rel((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                               Item_func::SP_CONTAINS_FUNC));
          }
    break;

  case 1321:

/* Line 1455 of yacc.c  */
#line 9291 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_geometrycollection,
                           Geometry::wkb_point));
          }
    break;

  case 1322:

/* Line 1455 of yacc.c  */
#line 9298 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_linestring,
                           Geometry::wkb_point));
          }
    break;

  case 1323:

/* Line 1455 of yacc.c  */
#line 9305 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multilinestring,
                           Geometry::wkb_linestring));
          }
    break;

  case 1324:

/* Line 1455 of yacc.c  */
#line 9312 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multipoint,
                           Geometry::wkb_point));
          }
    break;

  case 1325:

/* Line 1455 of yacc.c  */
#line 9319 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multipolygon,
                           Geometry::wkb_polygon));
          }
    break;

  case 1326:

/* Line 1455 of yacc.c  */
#line 9326 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD, Item_func_point((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item)));
          }
    break;

  case 1327:

/* Line 1455 of yacc.c  */
#line 9330 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_polygon,
                           Geometry::wkb_linestring));
          }
    break;

  case 1328:

/* Line 1455 of yacc.c  */
#line 9349 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
#ifdef HAVE_DLOPEN
            udf_func *udf= 0;
            LEX *lex= Lex;
            if (using_udf_functions &&
                (udf= find_udf((yyvsp[(1) - (2)].lex_str).str, (yyvsp[(1) - (2)].lex_str).length)) &&
                udf->type == UDFTYPE_AGGREGATE)
            {
              if (lex->current_select->inc_in_sum_expr())
              {
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
            }
            /* Temporary placing the result of find_udf in $3 */
            (yyval.udf)= udf;
#endif
          }
    break;

  case 1329:

/* Line 1455 of yacc.c  */
#line 9368 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Create_func *builder;
            Item *item= NULL;

            if (check_routine_name(&(yyvsp[(1) - (5)].lex_str)))
            {
              MYSQL_YYABORT;
            }

            /*
              Implementation note:
              names are resolved with the following order:
              - MySQL native functions,
              - User Defined Functions,
              - Stored Functions (assuming the current <use> database)

              This will be revised with WL#2128 (SQL PATH)
            */
            builder= find_native_function_builder(thd, (yyvsp[(1) - (5)].lex_str));
            if (builder)
            {
              item= builder->create_func(thd, (yyvsp[(1) - (5)].lex_str), (yyvsp[(4) - (5)].item_list));
            }
            else
            {
#ifdef HAVE_DLOPEN
              /* Retrieving the result of find_udf */
              udf_func *udf= (yyvsp[(3) - (5)].udf);

              if (udf)
              {
                if (udf->type == UDFTYPE_AGGREGATE)
                {
                  Select->in_sum_expr--;
                }

                item= Create_udf_func::s_singleton.create(thd, udf, (yyvsp[(4) - (5)].item_list));
              }
              else
#endif
              {
                builder= find_qualified_function_builder(thd);
                DBUG_ASSERT(builder);
                item= builder->create_func(thd, (yyvsp[(1) - (5)].lex_str), (yyvsp[(4) - (5)].item_list));
              }
            }

            if (! ((yyval.item)= item))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1330:

/* Line 1455 of yacc.c  */
#line 9422 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Create_qfunc *builder;
            Item *item= NULL;

            /*
              The following in practice calls:
              <code>Create_sp_func::create()</code>
              and builds a stored function.

              However, it's important to maintain the interface between the
              parser and the implementation in item_create.cc clean,
              since this will change with WL#2128 (SQL PATH):
              - INFORMATION_SCHEMA.version() is the SQL 99 syntax for the native
              function version(),
              - MySQL.version() is the SQL 2003 syntax for the native function
              version() (a vendor can specify any schema).
            */

            if (!(yyvsp[(1) - (6)].lex_str).str || check_db_name(&(yyvsp[(1) - (6)].lex_str)))
            {
              my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[(1) - (6)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (check_routine_name(&(yyvsp[(3) - (6)].lex_str)))
            {
              MYSQL_YYABORT;
            }

            builder= find_qualified_function_builder(thd);
            DBUG_ASSERT(builder);
            item= builder->create_with_db(thd, (yyvsp[(1) - (6)].lex_str), (yyvsp[(3) - (6)].lex_str), true, (yyvsp[(5) - (6)].item_list));

            if (! ((yyval.item)= item))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1331:

/* Line 1455 of yacc.c  */
#line 9464 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(1) - (2)].num) | (yyvsp[(2) - (2)].num); }
    break;

  case 1332:

/* Line 1455 of yacc.c  */
#line 9466 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= FT_BOOL; }
    break;

  case 1333:

/* Line 1455 of yacc.c  */
#line 9470 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= FT_NL; }
    break;

  case 1334:

/* Line 1455 of yacc.c  */
#line 9471 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= FT_NL; }
    break;

  case 1335:

/* Line 1455 of yacc.c  */
#line 9475 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0;         }
    break;

  case 1336:

/* Line 1455 of yacc.c  */
#line 9476 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= FT_EXPAND; }
    break;

  case 1337:

/* Line 1455 of yacc.c  */
#line 9480 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item_list)= NULL; }
    break;

  case 1338:

/* Line 1455 of yacc.c  */
#line 9481 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list); }
    break;

  case 1339:

/* Line 1455 of yacc.c  */
#line 9486 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new (YYTHD->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 1340:

/* Line 1455 of yacc.c  */
#line 9493 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item));
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1341:

/* Line 1455 of yacc.c  */
#line 9501 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
             Use Item::name as a storage for the attribute value of user
             defined function argument. It is safe to use Item::name
             because the syntax will not allow having an explicit name here.
             See WL#1017 re. udf attributes.
            */
            if ((yyvsp[(4) - (4)].lex_str).str)
            {
              (yyvsp[(2) - (4)].item)->is_autogenerated_name= FALSE;
              (yyvsp[(2) - (4)].item)->set_name((yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length, system_charset_info);
            }
            /* 
               A field has to have its proper name in order for name
               resolution to work, something we are only guaranteed if we
               parse it out. If we hijack the input stream with
               remember_name we may get quoted or escaped names.
            */
            else if ((yyvsp[(2) - (4)].item)->type() != Item::FIELD_ITEM)
              (yyvsp[(2) - (4)].item)->set_name((yyvsp[(1) - (4)].simple_string), (uint) ((yyvsp[(3) - (4)].simple_string) - (yyvsp[(1) - (4)].simple_string)), YYTHD->charset());
            (yyval.item)= (yyvsp[(2) - (4)].item);
          }
    break;

  case 1342:

/* Line 1455 of yacc.c  */
#line 9527 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_avg((yyvsp[(3) - (4)].item), FALSE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1343:

/* Line 1455 of yacc.c  */
#line 9533 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_avg((yyvsp[(4) - (5)].item), TRUE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1344:

/* Line 1455 of yacc.c  */
#line 9539 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_and((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1345:

/* Line 1455 of yacc.c  */
#line 9545 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_or((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1346:

/* Line 1455 of yacc.c  */
#line 9551 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_xor((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1347:

/* Line 1455 of yacc.c  */
#line 9557 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_int((int32) 0L,1);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (YYTHD->mem_root) Item_sum_count(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1348:

/* Line 1455 of yacc.c  */
#line 9566 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_count((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1349:

/* Line 1455 of yacc.c  */
#line 9572 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->in_sum_expr++; }
    break;

  case 1350:

/* Line 1455 of yacc.c  */
#line 9574 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->in_sum_expr--; }
    break;

  case 1351:

/* Line 1455 of yacc.c  */
#line 9576 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_count(* (yyvsp[(5) - (7)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1352:

/* Line 1455 of yacc.c  */
#line 9582 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_min((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1353:

/* Line 1455 of yacc.c  */
#line 9593 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_min((yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1354:

/* Line 1455 of yacc.c  */
#line 9599 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_max((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1355:

/* Line 1455 of yacc.c  */
#line 9605 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_max((yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1356:

/* Line 1455 of yacc.c  */
#line 9611 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_std((yyvsp[(3) - (4)].item), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1357:

/* Line 1455 of yacc.c  */
#line 9617 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_variance((yyvsp[(3) - (4)].item), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1358:

/* Line 1455 of yacc.c  */
#line 9623 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_std((yyvsp[(3) - (4)].item), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1359:

/* Line 1455 of yacc.c  */
#line 9629 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_variance((yyvsp[(3) - (4)].item), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1360:

/* Line 1455 of yacc.c  */
#line 9635 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_sum((yyvsp[(3) - (4)].item), FALSE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1361:

/* Line 1455 of yacc.c  */
#line 9641 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_sum((yyvsp[(4) - (5)].item), TRUE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1362:

/* Line 1455 of yacc.c  */
#line 9647 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->in_sum_expr++; }
    break;

  case 1363:

/* Line 1455 of yacc.c  */
#line 9651 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->in_sum_expr--;
            (yyval.item)= new (YYTHD->mem_root)
                  Item_func_group_concat(Lex->current_context(), (yyvsp[(3) - (8)].num), (yyvsp[(5) - (8)].item_list),
                                         sel->gorder_list, (yyvsp[(7) - (8)].string));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            (yyvsp[(5) - (8)].item_list)->empty();
          }
    break;

  case 1364:

/* Line 1455 of yacc.c  */
#line 9665 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (! Lex->parsing_options.allows_variable)
            {
              my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1365:

/* Line 1455 of yacc.c  */
#line 9673 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= (yyvsp[(3) - (3)].item);
          }
    break;

  case 1366:

/* Line 1455 of yacc.c  */
#line 9680 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item_func_set_user_var *item;
            (yyval.item)= item= new (YYTHD->mem_root) Item_func_set_user_var((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_RAND);
            lex->set_var_list.push_back(item);
          }
    break;

  case 1367:

/* Line 1455 of yacc.c  */
#line 9690 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_get_user_var((yyvsp[(1) - (1)].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_RAND);
          }
    break;

  case 1368:

/* Line 1455 of yacc.c  */
#line 9698 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* disallow "SELECT @@global.global.variable" */
            if ((yyvsp[(3) - (4)].lex_str).str && (yyvsp[(4) - (4)].lex_str).str && check_reserved_words(&(yyvsp[(3) - (4)].lex_str)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (!((yyval.item)= get_system_var(YYTHD, (yyvsp[(2) - (4)].var_type), (yyvsp[(3) - (4)].lex_str), (yyvsp[(4) - (4)].lex_str))))
              MYSQL_YYABORT;
            if (!((Item_func_get_system_var*) (yyval.item))->is_written_to_binlog())
              Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_VARIABLE);
          }
    break;

  case 1369:

/* Line 1455 of yacc.c  */
#line 9713 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1370:

/* Line 1455 of yacc.c  */
#line 9714 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num) = 1; }
    break;

  case 1371:

/* Line 1455 of yacc.c  */
#line 9719 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.string)= new (YYTHD->mem_root) String(",", 1, &my_charset_latin1);
            if ((yyval.string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1372:

/* Line 1455 of yacc.c  */
#line 9724 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.string) = (yyvsp[(2) - (2)].string); }
    break;

  case 1373:

/* Line 1455 of yacc.c  */
#line 9729 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->gorder_list = NULL;
          }
    break;

  case 1374:

/* Line 1455 of yacc.c  */
#line 9733 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            SELECT_LEX *select= Select;
            select->gorder_list= new (YYTHD->mem_root)
                                   SQL_I_List<ORDER>(select->order_list);
            if (select->gorder_list == NULL)
              MYSQL_YYABORT;
            select->order_list.empty();
          }
    break;

  case 1375:

/* Line 1455 of yacc.c  */
#line 9745 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->current_select->inc_in_sum_expr())
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1376:

/* Line 1455 of yacc.c  */
#line 9754 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->in_sum_expr--;
            (yyval.item)= (yyvsp[(3) - (3)].item);
          }
    break;

  case 1377:

/* Line 1455 of yacc.c  */
#line 9762 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->charset= &my_charset_bin; Lex->dec= 0; }
    break;

  case 1378:

/* Line 1455 of yacc.c  */
#line 9764 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->dec= 0; }
    break;

  case 1379:

/* Line 1455 of yacc.c  */
#line 9766 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->charset= national_charset_info; Lex->dec=0; }
    break;

  case 1380:

/* Line 1455 of yacc.c  */
#line 9768 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_SIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1381:

/* Line 1455 of yacc.c  */
#line 9770 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_SIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1382:

/* Line 1455 of yacc.c  */
#line 9772 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_SIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1383:

/* Line 1455 of yacc.c  */
#line 9774 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_UNSIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1384:

/* Line 1455 of yacc.c  */
#line 9776 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_UNSIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1385:

/* Line 1455 of yacc.c  */
#line 9778 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_DATE; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1386:

/* Line 1455 of yacc.c  */
#line 9780 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.cast_type)=ITEM_CAST_TIME;
            LEX *lex= Lex;
            lex->charset= NULL; lex->dec= lex->length; lex->length= (char*)0;
           }
    break;

  case 1387:

/* Line 1455 of yacc.c  */
#line 9786 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.cast_type)=ITEM_CAST_DATETIME;
            LEX *lex= Lex;
            lex->charset= NULL; lex->dec= lex->length; lex->length= (char*)0;
           }
    break;

  case 1388:

/* Line 1455 of yacc.c  */
#line 9792 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_DECIMAL; Lex->charset= NULL; }
    break;

  case 1389:

/* Line 1455 of yacc.c  */
#line 9794 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->charset= NULL; Lex->length= Lex->dec= 0;}
    break;

  case 1390:

/* Line 1455 of yacc.c  */
#line 9796 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_DOUBLE; }
    break;

  case 1391:

/* Line 1455 of yacc.c  */
#line 9799 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item_list)= NULL; }
    break;

  case 1392:

/* Line 1455 of yacc.c  */
#line 9800 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list);}
    break;

  case 1393:

/* Line 1455 of yacc.c  */
#line 9805 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new (YYTHD->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 1394:

/* Line 1455 of yacc.c  */
#line 9812 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item));
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1395:

/* Line 1455 of yacc.c  */
#line 9819 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list); }
    break;

  case 1396:

/* Line 1455 of yacc.c  */
#line 9820 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(2) - (3)].item_list); }
    break;

  case 1397:

/* Line 1455 of yacc.c  */
#line 9825 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new (YYTHD->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 1398:

/* Line 1455 of yacc.c  */
#line 9832 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item));
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1399:

/* Line 1455 of yacc.c  */
#line 9839 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)= NULL; }
    break;

  case 1400:

/* Line 1455 of yacc.c  */
#line 9840 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 1401:

/* Line 1455 of yacc.c  */
#line 9844 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)= NULL; }
    break;

  case 1402:

/* Line 1455 of yacc.c  */
#line 9845 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(2) - (2)].item); }
    break;

  case 1403:

/* Line 1455 of yacc.c  */
#line 9850 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(2) - (4)].item));
            (yyval.item_list)->push_back((yyvsp[(4) - (4)].item));
          }
    break;

  case 1404:

/* Line 1455 of yacc.c  */
#line 9858 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (5)].item_list)->push_back((yyvsp[(3) - (5)].item));
            (yyvsp[(1) - (5)].item_list)->push_back((yyvsp[(5) - (5)].item));
            (yyval.item_list)= (yyvsp[(1) - (5)].item_list);
          }
    break;

  case 1405:

/* Line 1455 of yacc.c  */
#line 9868 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1406:

/* Line 1455 of yacc.c  */
#line 9870 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->nest_last_join(lex->thd)))
              MYSQL_YYABORT;
          }
    break;

  case 1407:

/* Line 1455 of yacc.c  */
#line 9878 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { MYSQL_YYABORT_UNLESS((yyval.table_list)=(yyvsp[(1) - (1)].table_list)); }
    break;

  case 1408:

/* Line 1455 of yacc.c  */
#line 9889 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1409:

/* Line 1455 of yacc.c  */
#line 9890 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(3) - (4)].table_list); }
    break;

  case 1410:

/* Line 1455 of yacc.c  */
#line 9896 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1411:

/* Line 1455 of yacc.c  */
#line 9898 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].table_list) && ((yyval.table_list)=(yyvsp[(3) - (3)].table_list)));
          }
    break;

  case 1412:

/* Line 1455 of yacc.c  */
#line 9918 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].table_list) && ((yyval.table_list)=(yyvsp[(3) - (3)].table_list))); }
    break;

  case 1413:

/* Line 1455 of yacc.c  */
#line 9920 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].table_list) && ((yyval.table_list)=(yyvsp[(3) - (3)].table_list))); (yyvsp[(3) - (3)].table_list)->straight=1; }
    break;

  case 1414:

/* Line 1455 of yacc.c  */
#line 9923 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && (yyvsp[(3) - (4)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (4)].table_list), (yyvsp[(3) - (4)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1415:

/* Line 1455 of yacc.c  */
#line 9931 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            add_join_on((yyvsp[(3) - (6)].table_list),(yyvsp[(6) - (6)].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1416:

/* Line 1455 of yacc.c  */
#line 9938 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && (yyvsp[(3) - (4)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (4)].table_list), (yyvsp[(3) - (4)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1417:

/* Line 1455 of yacc.c  */
#line 9946 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyvsp[(3) - (6)].table_list)->straight=1;
            add_join_on((yyvsp[(3) - (6)].table_list),(yyvsp[(6) - (6)].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1418:

/* Line 1455 of yacc.c  */
#line 9954 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && (yyvsp[(3) - (4)].table_list));
          }
    break;

  case 1419:

/* Line 1455 of yacc.c  */
#line 9958 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { add_join_natural((yyvsp[(1) - (8)].table_list),(yyvsp[(3) - (8)].table_list),(yyvsp[(7) - (8)].string_list),Select); (yyval.table_list)=(yyvsp[(3) - (8)].table_list); }
    break;

  case 1420:

/* Line 1455 of yacc.c  */
#line 9960 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && ((yyval.table_list)=(yyvsp[(4) - (4)].table_list)));
            add_join_natural((yyvsp[(1) - (4)].table_list),(yyvsp[(4) - (4)].table_list),NULL,Select);
          }
    break;

  case 1421:

/* Line 1455 of yacc.c  */
#line 9968 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(5) - (6)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (6)].table_list), (yyvsp[(5) - (6)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1422:

/* Line 1455 of yacc.c  */
#line 9976 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            add_join_on((yyvsp[(5) - (8)].table_list),(yyvsp[(8) - (8)].item));
            Lex->pop_context();
            (yyvsp[(5) - (8)].table_list)->outer_join|=JOIN_TYPE_LEFT;
            (yyval.table_list)=(yyvsp[(5) - (8)].table_list);
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1423:

/* Line 1455 of yacc.c  */
#line 9984 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].table_list) && (yyvsp[(5) - (5)].table_list));
          }
    break;

  case 1424:

/* Line 1455 of yacc.c  */
#line 9988 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            add_join_natural((yyvsp[(1) - (10)].table_list),(yyvsp[(5) - (10)].table_list),(yyvsp[(9) - (10)].string_list),Select); 
            (yyvsp[(5) - (10)].table_list)->outer_join|=JOIN_TYPE_LEFT; 
            (yyval.table_list)=(yyvsp[(5) - (10)].table_list); 
          }
    break;

  case 1425:

/* Line 1455 of yacc.c  */
#line 9994 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(6) - (6)].table_list));
            add_join_natural((yyvsp[(1) - (6)].table_list),(yyvsp[(6) - (6)].table_list),NULL,Select);
            (yyvsp[(6) - (6)].table_list)->outer_join|=JOIN_TYPE_LEFT;
            (yyval.table_list)=(yyvsp[(6) - (6)].table_list);
          }
    break;

  case 1426:

/* Line 1455 of yacc.c  */
#line 10004 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(5) - (6)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (6)].table_list), (yyvsp[(5) - (6)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1427:

/* Line 1455 of yacc.c  */
#line 10012 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
            add_join_on((yyval.table_list), (yyvsp[(8) - (8)].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1428:

/* Line 1455 of yacc.c  */
#line 10021 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].table_list) && (yyvsp[(5) - (5)].table_list));
          }
    break;

  case 1429:

/* Line 1455 of yacc.c  */
#line 10025 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
            add_join_natural((yyval.table_list),(yyvsp[(5) - (10)].table_list),(yyvsp[(9) - (10)].string_list),Select);
          }
    break;

  case 1430:

/* Line 1455 of yacc.c  */
#line 10032 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(6) - (6)].table_list));
            add_join_natural((yyvsp[(6) - (6)].table_list),(yyvsp[(1) - (6)].table_list),NULL,Select);
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
          }
    break;

  case 1431:

/* Line 1455 of yacc.c  */
#line 10042 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1432:

/* Line 1455 of yacc.c  */
#line 10043 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1433:

/* Line 1455 of yacc.c  */
#line 10044 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1434:

/* Line 1455 of yacc.c  */
#line 10056 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->table_join_options= 0;
          }
    break;

  case 1435:

/* Line 1455 of yacc.c  */
#line 10061 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!((yyval.table_list)= Select->add_table_to_list(YYTHD, (yyvsp[(2) - (4)].table), (yyvsp[(3) - (4)].lex_str_ptr),
                                                Select->get_table_join_options(),
                                                YYPS->m_lock_type,
                                                YYPS->m_mdl_type,
                                                Select->pop_index_hints())))
              MYSQL_YYABORT;
            Select->add_joined_table((yyval.table_list));
          }
    break;

  case 1436:

/* Line 1455 of yacc.c  */
#line 10071 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if ((yyvsp[(1) - (3)].num))
            {
              if (sel->set_braces(1))
              {
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
              /* select in braces, can't contain global parameters */
              if (sel->master_unit()->fake_select_lex)
                sel->master_unit()->global_parameters=
                   sel->master_unit()->fake_select_lex;
            }
            if ((yyvsp[(2) - (3)].select_lex)->init_nested_join(lex->thd))
              MYSQL_YYABORT;
            (yyval.table_list)= 0;
            /* incomplete derived tables return NULL, we must be
               nested in select_derived rule to be here. */
          }
    break;

  case 1437:

/* Line 1455 of yacc.c  */
#line 10111 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* Use $2 instead of Lex->current_select as derived table will
               alter value of Lex->current_select. */
            if (!((yyvsp[(3) - (5)].table_list) || (yyvsp[(5) - (5)].lex_str_ptr)) && (yyvsp[(2) - (5)].select_lex)->embedding &&
                !(yyvsp[(2) - (5)].select_lex)->embedding->nested_join->join_list.elements)
            {
              /* we have a derived table ($3 == NULL) but no alias,
                 Since we are nested in further parentheses so we
                 can pass NULL to the outer level parentheses
                 Permits parsing of "((((select ...))) as xyz)" */
              (yyval.table_list)= 0;
            }
            else if (!(yyvsp[(3) - (5)].table_list))
            {
              /* Handle case of derived table, alias may be NULL if there
                 are no outer parentheses, add_table_to_list() will throw
                 error in this case */
              LEX *lex=Lex;
              SELECT_LEX *sel= lex->current_select;
              SELECT_LEX_UNIT *unit= sel->master_unit();
              lex->current_select= sel= unit->outer_select();
              Table_ident *ti= new Table_ident(unit);
              if (ti == NULL)
                MYSQL_YYABORT;
              if (!((yyval.table_list)= sel->add_table_to_list(lex->thd,
                                               new Table_ident(unit), (yyvsp[(5) - (5)].lex_str_ptr), 0,
                                               TL_READ, MDL_SHARED_READ)))

                MYSQL_YYABORT;
              sel->add_joined_table((yyval.table_list));
              lex->pop_context();
              lex->nest_level--;
            }
            else if (((yyvsp[(3) - (5)].table_list)->select_lex &&
                      (yyvsp[(3) - (5)].table_list)->select_lex->master_unit()->is_union() &&
                      ((yyvsp[(3) - (5)].table_list)->select_lex->master_unit()->first_select() ==
                       (yyvsp[(3) - (5)].table_list)->select_lex || !(yyvsp[(3) - (5)].table_list)->lifted)) || (yyvsp[(5) - (5)].lex_str_ptr))
            {
              /* simple nested joins cannot have aliases or unions */
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            else
            {
              /* nested join: FROM (t1 JOIN t2 ...),
                 nest_level is the same as in the outer query */
              (yyval.table_list)= (yyvsp[(3) - (5)].table_list);
            }
          }
    break;

  case 1439:

/* Line 1455 of yacc.c  */
#line 10167 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_select_to_union_list(Lex, (bool)(yyvsp[(3) - (3)].num), FALSE))
              MYSQL_YYABORT;
          }
    break;

  case 1440:

/* Line 1455 of yacc.c  */
#line 10172 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              Remove from the name resolution context stack the context of the
              last select in the union.
             */
            Lex->pop_context();
          }
    break;

  case 1442:

/* Line 1455 of yacc.c  */
#line 10185 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX * sel= lex->current_select;
            if (lex->current_select->set_braces(0))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (sel->linkage == UNION_TYPE &&
                sel->master_unit()->first_select()->braces)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1443:

/* Line 1455 of yacc.c  */
#line 10204 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->linkage != UNION_TYPE)
              mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 1444:

/* Line 1455 of yacc.c  */
#line 10212 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1446:

/* Line 1455 of yacc.c  */
#line 10221 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if ((yyvsp[(1) - (1)].select_lex)->init_nested_join(lex->thd))
              MYSQL_YYABORT;
          }
    break;

  case 1447:

/* Line 1455 of yacc.c  */
#line 10227 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            /* for normal joins, $3 != NULL and end_nested_join() != NULL,
               for derived tables, both must equal NULL */

            if (!((yyval.table_list)= (yyvsp[(1) - (3)].select_lex)->end_nested_join(lex->thd)) && (yyvsp[(3) - (3)].table_list))
              MYSQL_YYABORT;
            if (!(yyvsp[(3) - (3)].table_list) && (yyval.table_list))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1448:

/* Line 1455 of yacc.c  */
#line 10243 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->derived_tables|= DERIVED_SUBQUERY;
            if (!lex->expr_allows_subselect ||
                lex->sql_command == (int)SQLCOM_PURGE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE ||
                mysql_new_select(lex, 1))
              MYSQL_YYABORT;
            mysql_init_select(lex);
            lex->current_select->linkage= DERIVED_TABLE_TYPE;
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 1449:

/* Line 1455 of yacc.c  */
#line 10260 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1451:

/* Line 1455 of yacc.c  */
#line 10267 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.select_lex)= Select; }
    break;

  case 1452:

/* Line 1455 of yacc.c  */
#line 10272 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (! lex->parsing_options.allows_derived)
            {
              my_error(ER_VIEW_SELECT_DERIVED, MYF(0));
              MYSQL_YYABORT;
            }

            SELECT_LEX *sel= lex->current_select;
            TABLE_LIST *embedding;
            if (!sel->embedding || sel->end_nested_join(lex->thd))
            {
              /* we are not in parentheses */
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            embedding= Select->embedding;
            (yyval.num)= embedding &&
                !embedding->nested_join->join_list.elements;
            /* return true if we are deeply nested */
          }
    break;

  case 1453:

/* Line 1455 of yacc.c  */
#line 10297 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1454:

/* Line 1455 of yacc.c  */
#line 10298 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1455:

/* Line 1455 of yacc.c  */
#line 10303 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= YYTHD->variables.old_mode ?  INDEX_HINT_MASK_JOIN : INDEX_HINT_MASK_ALL; 
          }
    break;

  case 1456:

/* Line 1455 of yacc.c  */
#line 10306 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_JOIN;  }
    break;

  case 1457:

/* Line 1455 of yacc.c  */
#line 10307 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_ORDER; }
    break;

  case 1458:

/* Line 1455 of yacc.c  */
#line 10308 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_GROUP; }
    break;

  case 1459:

/* Line 1455 of yacc.c  */
#line 10312 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.index_hint)= INDEX_HINT_FORCE; }
    break;

  case 1460:

/* Line 1455 of yacc.c  */
#line 10313 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.index_hint)= INDEX_HINT_IGNORE; }
    break;

  case 1461:

/* Line 1455 of yacc.c  */
#line 10318 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->set_index_hint_type((yyvsp[(1) - (3)].index_hint), (yyvsp[(3) - (3)].num));
          }
    break;

  case 1463:

/* Line 1455 of yacc.c  */
#line 10323 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->set_index_hint_type(INDEX_HINT_USE, (yyvsp[(3) - (3)].num));
          }
    break;

  case 1468:

/* Line 1455 of yacc.c  */
#line 10336 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->alloc_index_hints(YYTHD); }
    break;

  case 1470:

/* Line 1455 of yacc.c  */
#line 10340 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {  Select->clear_index_hints(); }
    break;

  case 1472:

/* Line 1455 of yacc.c  */
#line 10345 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->add_index_hint(YYTHD, NULL, 0); }
    break;

  case 1473:

/* Line 1455 of yacc.c  */
#line 10346 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1474:

/* Line 1455 of yacc.c  */
#line 10351 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->add_index_hint(YYTHD, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length); }
    break;

  case 1475:

/* Line 1455 of yacc.c  */
#line 10353 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->add_index_hint(YYTHD, (char *)"PRIMARY", 7); }
    break;

  case 1478:

/* Line 1455 of yacc.c  */
#line 10363 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!((yyval.string_list)= new List<String>))
              MYSQL_YYABORT;
            String *s= new (YYTHD->mem_root) String((const char *) (yyvsp[(1) - (1)].lex_str).str,
                                                    (yyvsp[(1) - (1)].lex_str).length,
                                                    system_charset_info);
            if (s == NULL)
              MYSQL_YYABORT;
            (yyval.string_list)->push_back(s);
          }
    break;

  case 1479:

/* Line 1455 of yacc.c  */
#line 10374 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            String *s= new (YYTHD->mem_root) String((const char *) (yyvsp[(3) - (3)].lex_str).str,
                                                    (yyvsp[(3) - (3)].lex_str).length,
                                                    system_charset_info);
            if (s == NULL)
              MYSQL_YYABORT;
            (yyvsp[(1) - (3)].string_list)->push_back(s);
            (yyval.string_list)= (yyvsp[(1) - (3)].string_list);
          }
    break;

  case 1480:

/* Line 1455 of yacc.c  */
#line 10386 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1481:

/* Line 1455 of yacc.c  */
#line 10387 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_HOUR; }
    break;

  case 1482:

/* Line 1455 of yacc.c  */
#line 10388 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_MICROSECOND; }
    break;

  case 1483:

/* Line 1455 of yacc.c  */
#line 10389 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_MINUTE; }
    break;

  case 1484:

/* Line 1455 of yacc.c  */
#line 10390 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_SECOND; }
    break;

  case 1485:

/* Line 1455 of yacc.c  */
#line 10391 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_MICROSECOND; }
    break;

  case 1486:

/* Line 1455 of yacc.c  */
#line 10392 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_MINUTE; }
    break;

  case 1487:

/* Line 1455 of yacc.c  */
#line 10393 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_SECOND; }
    break;

  case 1488:

/* Line 1455 of yacc.c  */
#line 10394 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_MINUTE_MICROSECOND; }
    break;

  case 1489:

/* Line 1455 of yacc.c  */
#line 10395 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_MINUTE_SECOND; }
    break;

  case 1490:

/* Line 1455 of yacc.c  */
#line 10396 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_SECOND_MICROSECOND; }
    break;

  case 1491:

/* Line 1455 of yacc.c  */
#line 10397 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_YEAR_MONTH; }
    break;

  case 1492:

/* Line 1455 of yacc.c  */
#line 10401 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_DAY; }
    break;

  case 1493:

/* Line 1455 of yacc.c  */
#line 10402 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_WEEK; }
    break;

  case 1494:

/* Line 1455 of yacc.c  */
#line 10403 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_HOUR; }
    break;

  case 1495:

/* Line 1455 of yacc.c  */
#line 10404 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MINUTE; }
    break;

  case 1496:

/* Line 1455 of yacc.c  */
#line 10405 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MONTH; }
    break;

  case 1497:

/* Line 1455 of yacc.c  */
#line 10406 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_QUARTER; }
    break;

  case 1498:

/* Line 1455 of yacc.c  */
#line 10407 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_SECOND; }
    break;

  case 1499:

/* Line 1455 of yacc.c  */
#line 10408 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MICROSECOND; }
    break;

  case 1500:

/* Line 1455 of yacc.c  */
#line 10409 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_YEAR; }
    break;

  case 1501:

/* Line 1455 of yacc.c  */
#line 10413 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_DATE;}
    break;

  case 1502:

/* Line 1455 of yacc.c  */
#line 10414 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_TIME;}
    break;

  case 1503:

/* Line 1455 of yacc.c  */
#line 10415 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_DATETIME;}
    break;

  case 1504:

/* Line 1455 of yacc.c  */
#line 10416 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_DATETIME;}
    break;

  case 1508:

/* Line 1455 of yacc.c  */
#line 10426 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str_ptr)=0; }
    break;

  case 1509:

/* Line 1455 of yacc.c  */
#line 10428 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.lex_str_ptr)= (LEX_STRING*) sql_memdup(&(yyvsp[(2) - (2)].lex_str),sizeof(LEX_STRING));
            if ((yyval.lex_str_ptr) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1512:

/* Line 1455 of yacc.c  */
#line 10441 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->where= 0; }
    break;

  case 1513:

/* Line 1455 of yacc.c  */
#line 10443 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->parsing_place= IN_WHERE;
          }
    break;

  case 1514:

/* Line 1455 of yacc.c  */
#line 10447 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            SELECT_LEX *select= Select;
            select->where= normalize_cond((yyvsp[(3) - (3)].item));
            select->parsing_place= NO_MATTER;
            if ((yyvsp[(3) - (3)].item))
              (yyvsp[(3) - (3)].item)->top_level_item();
          }
    break;

  case 1516:

/* Line 1455 of yacc.c  */
#line 10459 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->parsing_place= IN_HAVING;
          }
    break;

  case 1517:

/* Line 1455 of yacc.c  */
#line 10463 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->having= normalize_cond((yyvsp[(3) - (3)].item));
            sel->parsing_place= NO_MATTER;
            if ((yyvsp[(3) - (3)].item))
              (yyvsp[(3) - (3)].item)->top_level_item();
          }
    break;

  case 1518:

/* Line 1455 of yacc.c  */
#line 10474 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->escape_used= TRUE;
            (yyval.item)= (yyvsp[(2) - (2)].item);
          }
    break;

  case 1519:

/* Line 1455 of yacc.c  */
#line 10479 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Lex->escape_used= FALSE;
            (yyval.item)= ((thd->variables.sql_mode & MODE_NO_BACKSLASH_ESCAPES) ?
                 new (thd->mem_root) Item_string("", 0, &my_charset_latin1) :
                 new (thd->mem_root) Item_string("\\", 1, &my_charset_latin1));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1522:

/* Line 1455 of yacc.c  */
#line 10501 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { if (add_group_to_list(YYTHD, (yyvsp[(3) - (4)].item),(bool) (yyvsp[(4) - (4)].num))) MYSQL_YYABORT; }
    break;

  case 1523:

/* Line 1455 of yacc.c  */
#line 10503 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { if (add_group_to_list(YYTHD, (yyvsp[(1) - (2)].item),(bool) (yyvsp[(2) - (2)].num))) MYSQL_YYABORT; }
    break;

  case 1524:

/* Line 1455 of yacc.c  */
#line 10507 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1525:

/* Line 1455 of yacc.c  */
#line 10509 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              'WITH CUBE' is reserved in the MySQL syntax, but not implemented,
              and cause LALR(2) conflicts.
              This syntax is not standard.
              MySQL syntax: GROUP BY col1, col2, col3 WITH CUBE
              SQL-2003: GROUP BY ... CUBE(col1, col2, col3)
            */
            LEX *lex=Lex;
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "WITH CUBE",
                       "global union parameters");
              MYSQL_YYABORT;
            }
            lex->current_select->olap= CUBE_TYPE;
            my_error(ER_NOT_SUPPORTED_YET, MYF(0), "CUBE");
            MYSQL_YYABORT;
          }
    break;

  case 1526:

/* Line 1455 of yacc.c  */
#line 10529 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              'WITH ROLLUP' is needed for backward compatibility,
              and cause LALR(2) conflicts.
              This syntax is not standard.
              MySQL syntax: GROUP BY col1, col2, col3 WITH ROLLUP
              SQL-2003: GROUP BY ... ROLLUP(col1, col2, col3)
            */
            LEX *lex= Lex;
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "WITH ROLLUP",
                       "global union parameters");
              MYSQL_YYABORT;
            }
            lex->current_select->olap= ROLLUP_TYPE;
          }
    break;

  case 1530:

/* Line 1455 of yacc.c  */
#line 10563 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            bool ascending= ((yyvsp[(2) - (2)].num) == 1) ? true : false;
            if (add_order_to_list(thd, (yyvsp[(1) - (2)].item), ascending))
              MYSQL_YYABORT;
          }
    break;

  case 1533:

/* Line 1455 of yacc.c  */
#line 10582 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            SELECT_LEX *sel= lex->current_select;
            SELECT_LEX_UNIT *unit= sel-> master_unit();
            if (sel->linkage != GLOBAL_OPTIONS_TYPE &&
                sel->olap != UNSPECIFIED_OLAP_TYPE &&
                (sel->linkage != UNION_TYPE || sel->braces))
            {
              my_error(ER_WRONG_USAGE, MYF(0),
                       "CUBE/ROLLUP", "ORDER BY");
              MYSQL_YYABORT;
            }
            if (lex->sql_command != SQLCOM_ALTER_TABLE && !unit->fake_select_lex)
            {
              /*
                A query of the of the form (SELECT ...) ORDER BY order_list is
                executed in the same way as the query
                SELECT ... ORDER BY order_list
                unless the SELECT construct contains ORDER BY or LIMIT clauses.
                Otherwise we create a fake SELECT_LEX if it has not been created
                yet.
              */
              SELECT_LEX *first_sl= unit->first_select();
              if (!unit->is_union() &&
                  (first_sl->order_list.elements || 
                   first_sl->select_limit) &&            
                  unit->add_fake_select_lex(lex->thd))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1535:

/* Line 1455 of yacc.c  */
#line 10617 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { if (add_order_to_list(YYTHD, (yyvsp[(3) - (4)].item),(bool) (yyvsp[(4) - (4)].num))) MYSQL_YYABORT; }
    break;

  case 1536:

/* Line 1455 of yacc.c  */
#line 10619 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { if (add_order_to_list(YYTHD, (yyvsp[(1) - (2)].item),(bool) (yyvsp[(2) - (2)].num))) MYSQL_YYABORT; }
    break;

  case 1537:

/* Line 1455 of yacc.c  */
#line 10623 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num) =  1; }
    break;

  case 1538:

/* Line 1455 of yacc.c  */
#line 10624 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num) =1; }
    break;

  case 1539:

/* Line 1455 of yacc.c  */
#line 10625 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num) =0; }
    break;

  case 1540:

/* Line 1455 of yacc.c  */
#line 10630 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            sel->offset_limit= 0;
            sel->select_limit= 0;
	    lex->limit_rows_examined= 0;
          }
    break;

  case 1541:

/* Line 1455 of yacc.c  */
#line 10637 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1542:

/* Line 1455 of yacc.c  */
#line 10641 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1543:

/* Line 1455 of yacc.c  */
#line 10642 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1544:

/* Line 1455 of yacc.c  */
#line 10647 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
          }
    break;

  case 1545:

/* Line 1455 of yacc.c  */
#line 10651 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
          }
    break;

  case 1546:

/* Line 1455 of yacc.c  */
#line 10655 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
          }
    break;

  case 1547:

/* Line 1455 of yacc.c  */
#line 10662 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(1) - (1)].item);
            sel->offset_limit= 0;
            sel->explicit_limit= 1;
          }
    break;

  case 1548:

/* Line 1455 of yacc.c  */
#line 10669 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(3) - (3)].item);
            sel->offset_limit= (yyvsp[(1) - (3)].item);
            sel->explicit_limit= 1;
          }
    break;

  case 1549:

/* Line 1455 of yacc.c  */
#line 10676 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(1) - (3)].item);
            sel->offset_limit= (yyvsp[(3) - (3)].item);
            sel->explicit_limit= 1;
          }
    break;

  case 1550:

/* Line 1455 of yacc.c  */
#line 10686 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
          Item_splocal *splocal;
          THD *thd= YYTHD;
          LEX *lex= thd->lex;
          Lex_input_stream *lip= & thd->m_parser_state->m_lip;
          sp_variable_t *spv;
          sp_pcontext *spc = lex->spcont;
          if (spc && (spv = spc->find_variable(&(yyvsp[(1) - (1)].lex_str))))
          {
            splocal= new (thd->mem_root)
              Item_splocal((yyvsp[(1) - (1)].lex_str), spv->offset, spv->type,
                  lip->get_tok_start() - lex->sphead->m_tmp_query,
                  lip->get_ptr() - lip->get_tok_start());
            if (splocal == NULL)
              MYSQL_YYABORT;
#ifndef DBUG_OFF
            splocal->m_sp= lex->sphead;
#endif
            lex->safe_to_cache_query=0;
          }
          else
          {
            my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
            MYSQL_YYABORT;
          }
          if (splocal->type() != Item::INT_ITEM)
          {
            my_error(ER_WRONG_SPVAR_TYPE_IN_LIMIT, MYF(0));
            MYSQL_YYABORT;
          }
          splocal->limit_clause_param= TRUE;
          (yyval.item)= splocal;
        }
    break;

  case 1551:

/* Line 1455 of yacc.c  */
#line 10720 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
          ((Item_param *) (yyvsp[(1) - (1)].item))->limit_clause_param= TRUE;
        }
    break;

  case 1552:

/* Line 1455 of yacc.c  */
#line 10724 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1553:

/* Line 1455 of yacc.c  */
#line 10730 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1554:

/* Line 1455 of yacc.c  */
#line 10736 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1555:

/* Line 1455 of yacc.c  */
#line 10745 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            LEX *lex=Lex;
            lex->limit_rows_examined= (yyvsp[(1) - (1)].item);
          }
    break;

  case 1556:

/* Line 1455 of yacc.c  */
#line 10752 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->current_select->select_limit= 0;
          }
    break;

  case 1557:

/* Line 1455 of yacc.c  */
#line 10757 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(2) - (2)].item);
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
            sel->explicit_limit= 1;
          }
    break;

  case 1558:

/* Line 1455 of yacc.c  */
#line 10763 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { my_parse_error(ER(ER_SYNTAX_ERROR)); MYSQL_YYABORT; }
    break;

  case 1559:

/* Line 1455 of yacc.c  */
#line 10764 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { my_parse_error(ER(ER_SYNTAX_ERROR)); MYSQL_YYABORT; }
    break;

  case 1560:

/* Line 1455 of yacc.c  */
#line 10768 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.num)= (int) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1561:

/* Line 1455 of yacc.c  */
#line 10769 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.num)= -(int) my_strtoll10((yyvsp[(2) - (2)].lex_str).str, (char**) 0, &error); }
    break;

  case 1562:

/* Line 1455 of yacc.c  */
#line 10770 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.num)= -(int) my_strtoll10((yyvsp[(2) - (2)].lex_str).str, (char**) 0, &error); }
    break;

  case 1563:

/* Line 1455 of yacc.c  */
#line 10774 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1564:

/* Line 1455 of yacc.c  */
#line 10775 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (ulong) strtol((yyvsp[(1) - (1)].lex_str).str, (char**) 0, 16); }
    break;

  case 1565:

/* Line 1455 of yacc.c  */
#line 10776 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1566:

/* Line 1455 of yacc.c  */
#line 10777 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1567:

/* Line 1455 of yacc.c  */
#line 10778 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1568:

/* Line 1455 of yacc.c  */
#line 10779 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1569:

/* Line 1455 of yacc.c  */
#line 10783 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1570:

/* Line 1455 of yacc.c  */
#line 10784 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (ulong) strtol((yyvsp[(1) - (1)].lex_str).str, (char**) 0, 16); }
    break;

  case 1571:

/* Line 1455 of yacc.c  */
#line 10785 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1572:

/* Line 1455 of yacc.c  */
#line 10786 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1573:

/* Line 1455 of yacc.c  */
#line 10787 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { MYSQL_YYABORT; }
    break;

  case 1574:

/* Line 1455 of yacc.c  */
#line 10791 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1575:

/* Line 1455 of yacc.c  */
#line 10792 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1576:

/* Line 1455 of yacc.c  */
#line 10793 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1577:

/* Line 1455 of yacc.c  */
#line 10794 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1578:

/* Line 1455 of yacc.c  */
#line 10795 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1579:

/* Line 1455 of yacc.c  */
#line 10799 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1580:

/* Line 1455 of yacc.c  */
#line 10800 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1581:

/* Line 1455 of yacc.c  */
#line 10801 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ulonglong_number)= strtoull((yyvsp[(1) - (1)].lex_str).str, (char**) 0, 16); }
    break;

  case 1582:

/* Line 1455 of yacc.c  */
#line 10802 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1583:

/* Line 1455 of yacc.c  */
#line 10803 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { MYSQL_YYABORT; }
    break;

  case 1584:

/* Line 1455 of yacc.c  */
#line 10808 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { my_parse_error(ER(ER_ONLY_INTEGERS_ALLOWED)); }
    break;

  case 1587:

/* Line 1455 of yacc.c  */
#line 10817 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.choice)= (yyvsp[(1) - (1)].ulong_num) != 0 ? HA_CHOICE_YES : HA_CHOICE_NO; }
    break;

  case 1588:

/* Line 1455 of yacc.c  */
#line 10818 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.choice)= HA_CHOICE_UNDEF; }
    break;

  case 1590:

/* Line 1455 of yacc.c  */
#line 10824 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            if (! lex->parsing_options.allows_select_procedure)
            {
              my_error(ER_VIEW_SELECT_CLAUSE, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }

            if (&lex->select_lex != lex->current_select)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "PROCEDURE", "subquery");
              MYSQL_YYABORT;
            }
            lex->proc_list.elements=0;
            lex->proc_list.first=0;
            lex->proc_list.next= &lex->proc_list.first;
            Item_field *item= new (YYTHD->mem_root)
                                Item_field(&lex->current_select->context,
                                           NULL, NULL, (yyvsp[(2) - (2)].lex_str).str);
            if (item == NULL)
              MYSQL_YYABORT;
            if (add_proc_to_list(lex->thd, item))
              MYSQL_YYABORT;
            Lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
          }
    break;

  case 1592:

/* Line 1455 of yacc.c  */
#line 10854 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1593:

/* Line 1455 of yacc.c  */
#line 10855 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1596:

/* Line 1455 of yacc.c  */
#line 10865 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (add_proc_to_list(thd, (yyvsp[(2) - (3)].item)))
              MYSQL_YYABORT;
            if (!(yyvsp[(2) - (3)].item)->name)
              (yyvsp[(2) - (3)].item)->set_name((yyvsp[(1) - (3)].simple_string), (uint) ((yyvsp[(3) - (3)].simple_string) - (yyvsp[(1) - (3)].simple_string)), thd->charset());
          }
    break;

  case 1597:

/* Line 1455 of yacc.c  */
#line 10876 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->describe && (!(lex->result= new select_dumpvar())))
              MYSQL_YYABORT;
          }
    break;

  case 1598:

/* Line 1455 of yacc.c  */
#line 10882 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1600:

/* Line 1455 of yacc.c  */
#line 10887 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1601:

/* Line 1455 of yacc.c  */
#line 10892 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->result) 
            {
              my_var *var= new my_var((yyvsp[(2) - (2)].lex_str),0,0,(enum_field_types)0);
              if (var == NULL)
                MYSQL_YYABORT;
              ((select_dumpvar *)lex->result)->var_list.push_back(var);
            }
            else
            {
              /*
                The parser won't create select_result instance only
                if it's an EXPLAIN.
              */
              DBUG_ASSERT(lex->describe);
            }
          }
    break;

  case 1602:

/* Line 1455 of yacc.c  */
#line 10911 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            sp_variable_t *t;

            if (!lex->spcont || !(t=lex->spcont->find_variable(&(yyvsp[(1) - (1)].lex_str))))
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (lex->result)
            {
              my_var *var= new my_var((yyvsp[(1) - (1)].lex_str),1,t->offset,t->type);
              if (var == NULL)
                MYSQL_YYABORT;
              ((select_dumpvar *)lex->result)->var_list.push_back(var);
#ifndef DBUG_OFF
              var->sp= lex->sphead;
#endif
            }
            else
            {
              /*
                The parser won't create select_result instance only
                if it's an EXPLAIN.
              */
              DBUG_ASSERT(lex->describe);
            }
          }
    break;

  case 1603:

/* Line 1455 of yacc.c  */
#line 10943 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (! Lex->parsing_options.allows_select_into)
            {
              my_error(ER_VIEW_SELECT_CLAUSE, MYF(0), "INTO");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1605:

/* Line 1455 of yacc.c  */
#line 10955 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
            if (!(lex->exchange= new sql_exchange((yyvsp[(2) - (2)].lex_str).str, 0)) ||
                !(lex->result= new select_export(lex->exchange)))
              MYSQL_YYABORT;
          }
    break;

  case 1606:

/* Line 1455 of yacc.c  */
#line 10963 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->exchange->cs= (yyvsp[(4) - (4)].charset); }
    break;

  case 1608:

/* Line 1455 of yacc.c  */
#line 10966 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->describe)
            {
              lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
              if (!(lex->exchange= new sql_exchange((yyvsp[(2) - (2)].lex_str).str,1)))
                MYSQL_YYABORT;
              if (!(lex->result= new select_dump(lex->exchange)))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1609:

/* Line 1455 of yacc.c  */
#line 10978 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
          }
    break;

  case 1610:

/* Line 1455 of yacc.c  */
#line 10989 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_DO;
            mysql_init_select(lex);
          }
    break;

  case 1611:

/* Line 1455 of yacc.c  */
#line 10995 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->insert_list= (yyvsp[(3) - (3)].item_list);
          }
    break;

  case 1612:

/* Line 1455 of yacc.c  */
#line 11006 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_DROP_TABLE;
            lex->drop_temporary= (yyvsp[(2) - (4)].num);
            lex->drop_if_exists= (yyvsp[(4) - (4)].num);
            YYPS->m_lock_type= TL_UNLOCK;
            YYPS->m_mdl_type= MDL_EXCLUSIVE;
          }
    break;

  case 1613:

/* Line 1455 of yacc.c  */
#line 11015 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1614:

/* Line 1455 of yacc.c  */
#line 11016 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1615:

/* Line 1455 of yacc.c  */
#line 11017 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, (yyvsp[(3) - (6)].lex_str).str);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->sql_command= SQLCOM_DROP_INDEX;
            lex->alter_info.reset();
            lex->alter_info.flags= ALTER_DROP_INDEX;
            lex->alter_info.drop_list.push_back(ad);
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(5) - (6)].table), NULL,
                                                        TL_OPTION_UPDATING,
                                                        TL_READ_NO_INSERT,
                                                        MDL_SHARED_NO_WRITE))
              MYSQL_YYABORT;
          }
    break;

  case 1616:

/* Line 1455 of yacc.c  */
#line 11033 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_DROP_DB;
            lex->drop_if_exists=(yyvsp[(3) - (4)].num);
            lex->name= (yyvsp[(4) - (4)].lex_str);
          }
    break;

  case 1617:

/* Line 1455 of yacc.c  */
#line 11040 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_name *spname;
            if ((yyvsp[(4) - (6)].lex_str).str && check_db_name(&(yyvsp[(4) - (6)].lex_str)))
            {
               my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[(4) - (6)].lex_str).str);
               MYSQL_YYABORT;
            }
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_DROP_FUNCTION;
            lex->drop_if_exists= (yyvsp[(3) - (6)].num);
            spname= new sp_name((yyvsp[(4) - (6)].lex_str), (yyvsp[(6) - (6)].lex_str), true);
            if (spname == NULL)
              MYSQL_YYABORT;
            spname->init_qname(thd);
            lex->spname= spname;
          }
    break;

  case 1618:

/* Line 1455 of yacc.c  */
#line 11063 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            LEX_STRING db= {0, 0};
            sp_name *spname;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            if (thd->db && lex->copy_db_to(&db.str, &db.length))
              MYSQL_YYABORT;
            lex->sql_command = SQLCOM_DROP_FUNCTION;
            lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            spname= new sp_name(db, (yyvsp[(4) - (4)].lex_str), false);
            if (spname == NULL)
              MYSQL_YYABORT;
            spname->init_qname(thd);
            lex->spname= spname;
          }
    break;

  case 1619:

/* Line 1455 of yacc.c  */
#line 11084 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_DROP_PROCEDURE;
            lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            lex->spname= (yyvsp[(4) - (4)].spname);
          }
    break;

  case 1620:

/* Line 1455 of yacc.c  */
#line 11096 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_DROP_USER;
          }
    break;

  case 1621:

/* Line 1455 of yacc.c  */
#line 11100 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DROP_VIEW;
            lex->drop_if_exists= (yyvsp[(3) - (3)].num);
            YYPS->m_lock_type= TL_UNLOCK;
            YYPS->m_mdl_type= MDL_EXCLUSIVE;
          }
    break;

  case 1622:

/* Line 1455 of yacc.c  */
#line 11108 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1623:

/* Line 1455 of yacc.c  */
#line 11110 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            Lex->spname= (yyvsp[(4) - (4)].spname);
            Lex->sql_command = SQLCOM_DROP_EVENT;
          }
    break;

  case 1624:

/* Line 1455 of yacc.c  */
#line 11116 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DROP_TRIGGER;
            lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            lex->spname= (yyvsp[(4) - (4)].spname);
          }
    break;

  case 1625:

/* Line 1455 of yacc.c  */
#line 11123 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= DROP_TABLESPACE;
          }
    break;

  case 1626:

/* Line 1455 of yacc.c  */
#line 11128 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= DROP_LOGFILE_GROUP;
          }
    break;

  case 1627:

/* Line 1455 of yacc.c  */
#line 11133 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_DROP_SERVER;
            Lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            Lex->server_options.server_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->server_options.server_name_length= (yyvsp[(4) - (4)].lex_str).length;
          }
    break;

  case 1630:

/* Line 1455 of yacc.c  */
#line 11148 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (1)].table), NULL,
                                           TL_OPTION_UPDATING,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1633:

/* Line 1455 of yacc.c  */
#line 11164 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (1)].table), NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1634:

/* Line 1455 of yacc.c  */
#line 11174 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1635:

/* Line 1455 of yacc.c  */
#line 11175 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1636:

/* Line 1455 of yacc.c  */
#line 11179 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1637:

/* Line 1455 of yacc.c  */
#line 11180 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1638:

/* Line 1455 of yacc.c  */
#line 11188 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_INSERT;
            lex->duplicates= DUP_ERROR; 
            mysql_init_select(lex);
          }
    break;

  case 1639:

/* Line 1455 of yacc.c  */
#line 11196 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->set_lock_for_tables((yyvsp[(3) - (5)].lock_type));
            Lex->current_select= &Lex->select_lex;
          }
    break;

  case 1640:

/* Line 1455 of yacc.c  */
#line 11201 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1641:

/* Line 1455 of yacc.c  */
#line 11206 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_REPLACE;
            lex->duplicates= DUP_REPLACE;
            mysql_init_select(lex);
          }
    break;

  case 1642:

/* Line 1455 of yacc.c  */
#line 11213 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->set_lock_for_tables((yyvsp[(3) - (4)].lock_type));
            Lex->current_select= &Lex->select_lex;
          }
    break;

  case 1643:

/* Line 1455 of yacc.c  */
#line 11218 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1644:

/* Line 1455 of yacc.c  */
#line 11223 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              If it is SP we do not allow insert optimisation when result of
              insert visible only after the table unlocking but everyone can
              read table.
            */
            (yyval.lock_type)= (Lex->sphead ? TL_WRITE_DEFAULT : TL_WRITE_CONCURRENT_INSERT);
          }
    break;

  case 1645:

/* Line 1455 of yacc.c  */
#line 11231 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1646:

/* Line 1455 of yacc.c  */
#line 11233 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
          Lex->keyword_delayed_begin_offset= (uint)(YYLIP->get_tok_start() -
                                                    YYTHD->query());
          Lex->keyword_delayed_end_offset= Lex->keyword_delayed_begin_offset +
                                           YYLIP->yyLength() + 1;
          (yyval.lock_type)= TL_WRITE_DELAYED;
        }
    break;

  case 1647:

/* Line 1455 of yacc.c  */
#line 11240 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE; }
    break;

  case 1648:

/* Line 1455 of yacc.c  */
#line 11244 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lock_type)= (yyvsp[(1) - (1)].lock_type); }
    break;

  case 1649:

/* Line 1455 of yacc.c  */
#line 11246 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
          Lex->keyword_delayed_begin_offset= (uint)(YYLIP->get_tok_start() -
                                                    YYTHD->query());
          Lex->keyword_delayed_end_offset= Lex->keyword_delayed_begin_offset +
                                           YYLIP->yyLength() + 1;
          (yyval.lock_type)= TL_WRITE_DELAYED;
        }
    break;

  case 1650:

/* Line 1455 of yacc.c  */
#line 11256 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1651:

/* Line 1455 of yacc.c  */
#line 11257 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1652:

/* Line 1455 of yacc.c  */
#line 11262 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->field_list.empty();
            lex->many_values.empty();
            lex->insert_list=0;
          }
    break;

  case 1653:

/* Line 1455 of yacc.c  */
#line 11270 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1654:

/* Line 1455 of yacc.c  */
#line 11271 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1655:

/* Line 1455 of yacc.c  */
#line 11272 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1656:

/* Line 1455 of yacc.c  */
#line 11274 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!(lex->insert_list = new List_item) ||
                lex->many_values.push_back(lex->insert_list))
              MYSQL_YYABORT;
          }
    break;

  case 1658:

/* Line 1455 of yacc.c  */
#line 11284 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(3) - (3)].item)); }
    break;

  case 1659:

/* Line 1455 of yacc.c  */
#line 11285 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(1) - (1)].item)); }
    break;

  case 1660:

/* Line 1455 of yacc.c  */
#line 11289 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1661:

/* Line 1455 of yacc.c  */
#line 11290 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1662:

/* Line 1455 of yacc.c  */
#line 11292 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->set_braces(0);}
    break;

  case 1663:

/* Line 1455 of yacc.c  */
#line 11293 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1664:

/* Line 1455 of yacc.c  */
#line 11295 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 1665:

/* Line 1455 of yacc.c  */
#line 11296 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1670:

/* Line 1455 of yacc.c  */
#line 11311 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->field_list.push_back((yyvsp[(1) - (3)].item)) ||
                lex->insert_list->push_back((yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1671:

/* Line 1455 of yacc.c  */
#line 11320 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1672:

/* Line 1455 of yacc.c  */
#line 11321 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1673:

/* Line 1455 of yacc.c  */
#line 11325 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1674:

/* Line 1455 of yacc.c  */
#line 11326 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1675:

/* Line 1455 of yacc.c  */
#line 11331 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
              if (!(Lex->insert_list = new List_item))
                MYSQL_YYABORT;
          }
    break;

  case 1676:

/* Line 1455 of yacc.c  */
#line 11336 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->many_values.push_back(lex->insert_list))
              MYSQL_YYABORT;
          }
    break;

  case 1677:

/* Line 1455 of yacc.c  */
#line 11344 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1679:

/* Line 1455 of yacc.c  */
#line 11350 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->insert_list->push_back((yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1680:

/* Line 1455 of yacc.c  */
#line 11355 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->insert_list->push_back((yyvsp[(1) - (1)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1681:

/* Line 1455 of yacc.c  */
#line 11362 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item);}
    break;

  case 1682:

/* Line 1455 of yacc.c  */
#line 11364 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_default_value(Lex->current_context());
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1684:

/* Line 1455 of yacc.c  */
#line 11373 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->duplicates= DUP_UPDATE; }
    break;

  case 1686:

/* Line 1455 of yacc.c  */
#line 11381 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            mysql_init_select(lex);
            lex->sql_command= SQLCOM_UPDATE;
            lex->duplicates= DUP_ERROR; 
          }
    break;

  case 1687:

/* Line 1455 of yacc.c  */
#line 11389 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->select_lex.table_list.elements > 1)
              lex->sql_command= SQLCOM_UPDATE_MULTI;
            else if (lex->select_lex.get_table_list()->derived)
            {
              /* it is single table update and it is update of derived table */
              my_error(ER_NON_UPDATABLE_TABLE, MYF(0),
                       lex->select_lex.get_table_list()->alias, "UPDATE");
              MYSQL_YYABORT;
            }
            /*
              In case of multi-update setting write lock for all tables may
              be too pessimistic. We will decrease lock level if possible in
              mysql_multi_update().
            */
            Select->set_lock_for_tables((yyvsp[(3) - (7)].lock_type));
          }
    break;

  case 1688:

/* Line 1455 of yacc.c  */
#line 11407 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1691:

/* Line 1455 of yacc.c  */
#line 11417 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_item_to_list(YYTHD, (yyvsp[(1) - (3)].item)) || add_value_to_list(YYTHD, (yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1694:

/* Line 1455 of yacc.c  */
#line 11430 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
          LEX *lex= Lex;
          if (lex->update_list.push_back((yyvsp[(1) - (3)].item)) || 
              lex->value_list.push_back((yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1695:

/* Line 1455 of yacc.c  */
#line 11439 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_DEFAULT; }
    break;

  case 1696:

/* Line 1455 of yacc.c  */
#line 11440 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1697:

/* Line 1455 of yacc.c  */
#line 11447 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DELETE;
            mysql_init_select(lex);
            YYPS->m_lock_type= TL_WRITE_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_WRITE;

            lex->ignore= 0;
            lex->select_lex.init_order();
          }
    break;

  case 1699:

/* Line 1455 of yacc.c  */
#line 11462 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(2) - (2)].table), NULL, TL_OPTION_UPDATING,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
            YYPS->m_lock_type= TL_READ_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_READ;
          }
    break;

  case 1700:

/* Line 1455 of yacc.c  */
#line 11471 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1701:

/* Line 1455 of yacc.c  */
#line 11473 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            mysql_init_multi_delete(Lex);
            YYPS->m_lock_type= TL_READ_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_READ;
          }
    break;

  case 1702:

/* Line 1455 of yacc.c  */
#line 11479 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (multi_delete_set_locks_and_link_aux_tables(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1703:

/* Line 1455 of yacc.c  */
#line 11484 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            mysql_init_multi_delete(Lex);
            YYPS->m_lock_type= TL_READ_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_READ;
          }
    break;

  case 1704:

/* Line 1455 of yacc.c  */
#line 11490 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (multi_delete_set_locks_and_link_aux_tables(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1707:

/* Line 1455 of yacc.c  */
#line 11503 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Table_ident *ti= new Table_ident((yyvsp[(1) - (2)].lex_str));
            if (ti == NULL)
              MYSQL_YYABORT;
            if (!Select->add_table_to_list(YYTHD,
                                           ti,
                                           NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1708:

/* Line 1455 of yacc.c  */
#line 11516 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Table_ident *ti= new Table_ident(YYTHD, (yyvsp[(1) - (4)].lex_str), (yyvsp[(3) - (4)].lex_str), 0);
            if (ti == NULL)
              MYSQL_YYABORT;
            if (!Select->add_table_to_list(YYTHD,
                                           ti,
                                           NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1709:

/* Line 1455 of yacc.c  */
#line 11531 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1710:

/* Line 1455 of yacc.c  */
#line 11532 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1711:

/* Line 1455 of yacc.c  */
#line 11536 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1712:

/* Line 1455 of yacc.c  */
#line 11537 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1713:

/* Line 1455 of yacc.c  */
#line 11541 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->options|= OPTION_QUICK; }
    break;

  case 1714:

/* Line 1455 of yacc.c  */
#line 11542 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { YYPS->m_lock_type= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1715:

/* Line 1455 of yacc.c  */
#line 11543 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ignore= 1; }
    break;

  case 1716:

/* Line 1455 of yacc.c  */
#line 11548 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX* lex= Lex;
            lex->sql_command= SQLCOM_TRUNCATE;
            lex->alter_info.reset();
            lex->select_lex.options= 0;
            lex->select_lex.sql_cache= SELECT_LEX::SQL_CACHE_UNSPECIFIED;
            lex->select_lex.init_order();
            YYPS->m_lock_type= TL_WRITE;
            YYPS->m_mdl_type= MDL_EXCLUSIVE;
          }
    break;

  case 1717:

/* Line 1455 of yacc.c  */
#line 11559 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root) Truncate_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1724:

/* Line 1455 of yacc.c  */
#line 11584 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_CPU;
    }
    break;

  case 1725:

/* Line 1455 of yacc.c  */
#line 11588 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_MEMORY;
    }
    break;

  case 1726:

/* Line 1455 of yacc.c  */
#line 11592 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_BLOCK_IO;
    }
    break;

  case 1727:

/* Line 1455 of yacc.c  */
#line 11596 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_CONTEXT;
    }
    break;

  case 1728:

/* Line 1455 of yacc.c  */
#line 11600 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_PAGE_FAULTS;
    }
    break;

  case 1729:

/* Line 1455 of yacc.c  */
#line 11604 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_IPC;
    }
    break;

  case 1730:

/* Line 1455 of yacc.c  */
#line 11608 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_SWAPS;
    }
    break;

  case 1731:

/* Line 1455 of yacc.c  */
#line 11612 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_SOURCE;
    }
    break;

  case 1732:

/* Line 1455 of yacc.c  */
#line 11616 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_ALL;
    }
    break;

  case 1733:

/* Line 1455 of yacc.c  */
#line 11623 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
      Lex->profile_query_id= 0;
    }
    break;

  case 1734:

/* Line 1455 of yacc.c  */
#line 11627 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
      Lex->profile_query_id= atoi((yyvsp[(3) - (3)].lex_str).str);
    }
    break;

  case 1735:

/* Line 1455 of yacc.c  */
#line 11636 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->wild=0;
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
            bzero((char*) &lex->create_info,sizeof(lex->create_info));
          }
    break;

  case 1736:

/* Line 1455 of yacc.c  */
#line 11644 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1737:

/* Line 1455 of yacc.c  */
#line 11649 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_DATABASES;
             if (prepare_schema_table(YYTHD, lex, 0, SCH_SCHEMATA))
               MYSQL_YYABORT;
           }
    break;

  case 1738:

/* Line 1455 of yacc.c  */
#line 11656 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TABLES;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_TABLE_NAMES))
               MYSQL_YYABORT;
           }
    break;

  case 1739:

/* Line 1455 of yacc.c  */
#line 11664 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TRIGGERS;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_TRIGGERS))
               MYSQL_YYABORT;
           }
    break;

  case 1740:

/* Line 1455 of yacc.c  */
#line 11672 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_EVENTS;
             lex->select_lex.db= (yyvsp[(2) - (3)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_EVENTS))
               MYSQL_YYABORT;
           }
    break;

  case 1741:

/* Line 1455 of yacc.c  */
#line 11680 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TABLE_STATUS;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_TABLES))
               MYSQL_YYABORT;
           }
    break;

  case 1742:

/* Line 1455 of yacc.c  */
#line 11688 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_OPEN_TABLES;
            lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
            if (prepare_schema_table(YYTHD, lex, 0, SCH_OPEN_TABLES))
              MYSQL_YYABORT;
          }
    break;

  case 1743:

/* Line 1455 of yacc.c  */
#line 11696 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_PLUGINS;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_PLUGINS))
              MYSQL_YYABORT;
          }
    break;

  case 1744:

/* Line 1455 of yacc.c  */
#line 11703 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_info.db_type= (yyvsp[(2) - (3)].db_type); }
    break;

  case 1745:

/* Line 1455 of yacc.c  */
#line 11705 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_info.db_type= NULL; }
    break;

  case 1746:

/* Line 1455 of yacc.c  */
#line 11707 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_FIELDS;
            if ((yyvsp[(5) - (6)].simple_string))
              (yyvsp[(4) - (6)].table)->change_db((yyvsp[(5) - (6)].simple_string));
            if (prepare_schema_table(YYTHD, lex, (yyvsp[(4) - (6)].table), SCH_COLUMNS))
              MYSQL_YYABORT;
          }
    break;

  case 1747:

/* Line 1455 of yacc.c  */
#line 11716 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_BINLOGS;
          }
    break;

  case 1748:

/* Line 1455 of yacc.c  */
#line 11720 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_SLAVE_HOSTS;
          }
    break;

  case 1749:

/* Line 1455 of yacc.c  */
#line 11724 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_BINLOG_EVENTS;
          }
    break;

  case 1751:

/* Line 1455 of yacc.c  */
#line 11729 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_RELAYLOG_EVENTS;
          }
    break;

  case 1753:

/* Line 1455 of yacc.c  */
#line 11734 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_KEYS;
            if ((yyvsp[(4) - (5)].simple_string))
              (yyvsp[(3) - (5)].table)->change_db((yyvsp[(4) - (5)].simple_string));
            if (prepare_schema_table(YYTHD, lex, (yyvsp[(3) - (5)].table), SCH_STATISTICS))
              MYSQL_YYABORT;
          }
    break;

  case 1754:

/* Line 1455 of yacc.c  */
#line 11743 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_STORAGE_ENGINES;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_ENGINES))
              MYSQL_YYABORT;
          }
    break;

  case 1755:

/* Line 1455 of yacc.c  */
#line 11750 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_AUTHORS;
            push_warning_printf(YYTHD, MYSQL_ERROR::WARN_LEVEL_WARN,
                                ER_WARN_DEPRECATED_SYNTAX_NO_REPLACEMENT,
                                ER(ER_WARN_DEPRECATED_SYNTAX_NO_REPLACEMENT),
                                "SHOW AUTHORS");
          }
    break;

  case 1756:

/* Line 1455 of yacc.c  */
#line 11759 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_CONTRIBUTORS;
            push_warning_printf(YYTHD, MYSQL_ERROR::WARN_LEVEL_WARN,
                                ER_WARN_DEPRECATED_SYNTAX_NO_REPLACEMENT,
                                ER(ER_WARN_DEPRECATED_SYNTAX_NO_REPLACEMENT),
                                "SHOW CONTRIBUTORS");
          }
    break;

  case 1757:

/* Line 1455 of yacc.c  */
#line 11768 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_PRIVILEGES;
          }
    break;

  case 1758:

/* Line 1455 of yacc.c  */
#line 11773 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (void) create_select_for_variable("warning_count"); }
    break;

  case 1759:

/* Line 1455 of yacc.c  */
#line 11775 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (void) create_select_for_variable("error_count"); }
    break;

  case 1760:

/* Line 1455 of yacc.c  */
#line 11777 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sql_command = SQLCOM_SHOW_WARNS;}
    break;

  case 1761:

/* Line 1455 of yacc.c  */
#line 11779 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sql_command = SQLCOM_SHOW_ERRORS;}
    break;

  case 1762:

/* Line 1455 of yacc.c  */
#line 11781 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sql_command = SQLCOM_SHOW_PROFILES; }
    break;

  case 1763:

/* Line 1455 of yacc.c  */
#line 11783 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_PROFILE;
            if (prepare_schema_table(YYTHD, lex, NULL, SCH_PROFILES) != 0)
              YYABORT;
          }
    break;

  case 1764:

/* Line 1455 of yacc.c  */
#line 11790 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS;
            lex->option_type= (yyvsp[(1) - (3)].var_type);
            if (prepare_schema_table(YYTHD, lex, 0, SCH_STATUS))
              MYSQL_YYABORT;
          }
    break;

  case 1765:

/* Line 1455 of yacc.c  */
#line 11798 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_PROCESSLIST;}
    break;

  case 1766:

/* Line 1455 of yacc.c  */
#line 11800 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_VARIABLES;
            lex->option_type= (yyvsp[(1) - (3)].var_type);
            if (prepare_schema_table(YYTHD, lex, 0, SCH_VARIABLES))
              MYSQL_YYABORT;
          }
    break;

  case 1767:

/* Line 1455 of yacc.c  */
#line 11808 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_CHARSETS;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_CHARSETS))
              MYSQL_YYABORT;
          }
    break;

  case 1768:

/* Line 1455 of yacc.c  */
#line 11815 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_COLLATIONS;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_COLLATIONS))
              MYSQL_YYABORT;
          }
    break;

  case 1769:

/* Line 1455 of yacc.c  */
#line 11822 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_GRANTS;
            LEX_USER *curr_user;
            if (!(curr_user= (LEX_USER*) lex->thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            bzero(curr_user, sizeof(st_lex_user));
            lex->grant_user= curr_user;
          }
    break;

  case 1770:

/* Line 1455 of yacc.c  */
#line 11832 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_GRANTS;
            lex->grant_user=(yyvsp[(3) - (3)].lex_user);
            lex->grant_user->password=null_lex_str;
          }
    break;

  case 1771:

/* Line 1455 of yacc.c  */
#line 11839 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command=SQLCOM_SHOW_CREATE_DB;
            Lex->create_info.options=(yyvsp[(3) - (4)].num);
            Lex->name= (yyvsp[(4) - (4)].lex_str);
          }
    break;

  case 1772:

/* Line 1455 of yacc.c  */
#line 11845 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_SHOW_CREATE;
            if (!lex->select_lex.add_table_to_list(YYTHD, (yyvsp[(3) - (3)].table), NULL,0))
              MYSQL_YYABORT;
            lex->only_view= 0;
            lex->create_info.storage_media= HA_SM_DEFAULT;
          }
    break;

  case 1773:

/* Line 1455 of yacc.c  */
#line 11854 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_SHOW_CREATE;
            if (!lex->select_lex.add_table_to_list(YYTHD, (yyvsp[(3) - (3)].table), NULL, 0))
              MYSQL_YYABORT;
            lex->only_view= 1;
          }
    break;

  case 1774:

/* Line 1455 of yacc.c  */
#line 11862 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_MASTER_STAT;
          }
    break;

  case 1775:

/* Line 1455 of yacc.c  */
#line 11866 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_SLAVE_STAT;
            Lex->verbose= 1;
          }
    break;

  case 1776:

/* Line 1455 of yacc.c  */
#line 11871 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->mi.connection_name= thd->variables.default_master_connection;
            lex->sql_command = SQLCOM_SHOW_SLAVE_STAT;
            lex->verbose= 0;
          }
    break;

  case 1777:

/* Line 1455 of yacc.c  */
#line 11879 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_SLAVE_STAT;
            Lex->verbose= 0;
          }
    break;

  case 1778:

/* Line 1455 of yacc.c  */
#line 11884 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
           LEX *lex= Lex;
           lex->sql_command= SQLCOM_SHOW_CLIENT_STATS;
           if (prepare_schema_table(YYTHD, lex, 0, SCH_CLIENT_STATS))
             MYSQL_YYABORT;
          }
    break;

  case 1779:

/* Line 1455 of yacc.c  */
#line 11891 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_USER_STATS;
             if (prepare_schema_table(YYTHD, lex, 0, SCH_USER_STATS))
               MYSQL_YYABORT;
          }
    break;

  case 1780:

/* Line 1455 of yacc.c  */
#line 11898 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TABLE_STATS;
             if (prepare_schema_table(YYTHD, lex, 0, SCH_TABLE_STATS))
               MYSQL_YYABORT;
          }
    break;

  case 1781:

/* Line 1455 of yacc.c  */
#line 11905 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_INDEX_STATS;
             if (prepare_schema_table(YYTHD, lex, 0, SCH_INDEX_STATS))
               MYSQL_YYABORT;
          }
    break;

  case 1782:

/* Line 1455 of yacc.c  */
#line 11912 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sql_command = SQLCOM_SHOW_CREATE_PROC;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1783:

/* Line 1455 of yacc.c  */
#line 11919 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sql_command = SQLCOM_SHOW_CREATE_FUNC;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1784:

/* Line 1455 of yacc.c  */
#line 11926 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_CREATE_TRIGGER;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1785:

/* Line 1455 of yacc.c  */
#line 11932 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS_PROC;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_PROCEDURES))
              MYSQL_YYABORT;
          }
    break;

  case 1786:

/* Line 1455 of yacc.c  */
#line 11939 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS_FUNC;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_PROCEDURES))
              MYSQL_YYABORT;
          }
    break;

  case 1787:

/* Line 1455 of yacc.c  */
#line 11946 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_SHOW_PROC_CODE;
            Lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1788:

/* Line 1455 of yacc.c  */
#line 11951 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_SHOW_FUNC_CODE;
            Lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1789:

/* Line 1455 of yacc.c  */
#line 11956 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->spname= (yyvsp[(3) - (3)].spname);
            Lex->sql_command = SQLCOM_SHOW_CREATE_EVENT;
          }
    break;

  case 1790:

/* Line 1455 of yacc.c  */
#line 11961 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Lex->sql_command= SQLCOM_SHOW_EXPLAIN;
            if (prepare_schema_table(thd, Lex, 0, SCH_EXPLAIN))
              MYSQL_YYABORT;
            add_value_to_list(thd, (yyvsp[(3) - (3)].item));
          }
    break;

  case 1791:

/* Line 1455 of yacc.c  */
#line 11972 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_STATUS; }
    break;

  case 1792:

/* Line 1455 of yacc.c  */
#line 11974 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_MUTEX; }
    break;

  case 1793:

/* Line 1455 of yacc.c  */
#line 11976 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_LOGS; }
    break;

  case 1798:

/* Line 1455 of yacc.c  */
#line 11990 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.simple_string)= 0; }
    break;

  case 1799:

/* Line 1455 of yacc.c  */
#line 11991 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.simple_string)= (yyvsp[(2) - (2)].lex_str).str; }
    break;

  case 1800:

/* Line 1455 of yacc.c  */
#line 11995 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->verbose=0; }
    break;

  case 1801:

/* Line 1455 of yacc.c  */
#line 11996 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->verbose=1; }
    break;

  case 1804:

/* Line 1455 of yacc.c  */
#line 12005 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->mi.log_file_name = 0; }
    break;

  case 1805:

/* Line 1455 of yacc.c  */
#line 12006 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->mi.log_file_name = (yyvsp[(2) - (2)].lex_str).str; }
    break;

  case 1806:

/* Line 1455 of yacc.c  */
#line 12010 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->mi.pos = 4; /* skip magic number */ }
    break;

  case 1807:

/* Line 1455 of yacc.c  */
#line 12011 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->mi.pos = (yyvsp[(2) - (2)].ulonglong_number); }
    break;

  case 1809:

/* Line 1455 of yacc.c  */
#line 12017 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->wild= new (YYTHD->mem_root) String((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length,
                                                    system_charset_info);
            if (Lex->wild == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1810:

/* Line 1455 of yacc.c  */
#line 12024 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->where= normalize_cond((yyvsp[(2) - (2)].item));
            if ((yyvsp[(2) - (2)].item))
              (yyvsp[(2) - (2)].item)->top_level_item();
          }
    break;

  case 1811:

/* Line 1455 of yacc.c  */
#line 12034 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
            lex->sql_command= SQLCOM_SHOW_FIELDS;
            lex->select_lex.db= 0;
            lex->verbose= 0;
            if (prepare_schema_table(YYTHD, lex, (yyvsp[(2) - (2)].table), SCH_COLUMNS))
              MYSQL_YYABORT;
          }
    break;

  case 1812:

/* Line 1455 of yacc.c  */
#line 12044 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1813:

/* Line 1455 of yacc.c  */
#line 12046 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->describe|= DESCRIBE_NORMAL; }
    break;

  case 1814:

/* Line 1455 of yacc.c  */
#line 12048 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->select_lex.options|= SELECT_DESCRIBE;
          }
    break;

  case 1817:

/* Line 1455 of yacc.c  */
#line 12060 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1818:

/* Line 1455 of yacc.c  */
#line 12061 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->describe|= DESCRIBE_EXTENDED; }
    break;

  case 1819:

/* Line 1455 of yacc.c  */
#line 12062 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->describe|= DESCRIBE_PARTITIONS; }
    break;

  case 1820:

/* Line 1455 of yacc.c  */
#line 12066 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1821:

/* Line 1455 of yacc.c  */
#line 12067 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->wild= (yyvsp[(1) - (1)].string); }
    break;

  case 1822:

/* Line 1455 of yacc.c  */
#line 12069 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->wild= new (YYTHD->mem_root) String((const char*) (yyvsp[(1) - (1)].lex_str).str,
                                                    (yyvsp[(1) - (1)].lex_str).length,
                                                    system_charset_info);
            if (Lex->wild == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1823:

/* Line 1455 of yacc.c  */
#line 12083 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_FLUSH;
            lex->type= 0;
            lex->no_write_to_binlog= (yyvsp[(2) - (2)].num);
          }
    break;

  case 1824:

/* Line 1455 of yacc.c  */
#line 12090 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1825:

/* Line 1455 of yacc.c  */
#line 12095 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->type|= REFRESH_TABLES;
            /*
              Set type of metadata and table locks for
              FLUSH TABLES table_list [WITH READ LOCK].
            */
            YYPS->m_lock_type= TL_READ_NO_INSERT;
            YYPS->m_mdl_type= MDL_SHARED_HIGH_PRIO;
          }
    break;

  case 1826:

/* Line 1455 of yacc.c  */
#line 12104 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1827:

/* Line 1455 of yacc.c  */
#line 12105 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1829:

/* Line 1455 of yacc.c  */
#line 12110 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1830:

/* Line 1455 of yacc.c  */
#line 12112 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            TABLE_LIST *tables= Lex->query_tables;
            Lex->type|= REFRESH_READ_LOCK | (yyvsp[(4) - (4)].num);
            for (; tables; tables= tables->next_global)
            {
              tables->mdl_request.set_type(MDL_SHARED_NO_WRITE);
              tables->required_type= FRMTYPE_TABLE; /* Don't try to flush views. */
              tables->open_type= OT_BASE_ONLY;      /* Ignore temporary tables. */
            }
          }
    break;

  case 1832:

/* Line 1455 of yacc.c  */
#line 12127 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1833:

/* Line 1455 of yacc.c  */
#line 12132 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_ERROR_LOG; }
    break;

  case 1834:

/* Line 1455 of yacc.c  */
#line 12134 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_ENGINE_LOG; }
    break;

  case 1835:

/* Line 1455 of yacc.c  */
#line 12136 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_GENERAL_LOG; }
    break;

  case 1836:

/* Line 1455 of yacc.c  */
#line 12138 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_SLOW_LOG; }
    break;

  case 1837:

/* Line 1455 of yacc.c  */
#line 12140 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_BINARY_LOG; }
    break;

  case 1838:

/* Line 1455 of yacc.c  */
#line 12142 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->type & REFRESH_RELAY_LOG)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "FLUSH", "RELAY LOGS");
              MYSQL_YYABORT;
	    }
            lex->type|= REFRESH_RELAY_LOG;
            lex->relay_log_connection_name= lex->mi.connection_name;
           }
    break;

  case 1839:

/* Line 1455 of yacc.c  */
#line 12153 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_QUERY_CACHE_FREE; }
    break;

  case 1840:

/* Line 1455 of yacc.c  */
#line 12155 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_HOSTS; }
    break;

  case 1841:

/* Line 1455 of yacc.c  */
#line 12157 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_GRANT; }
    break;

  case 1842:

/* Line 1455 of yacc.c  */
#line 12159 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->type|= REFRESH_LOG;
            Lex->relay_log_connection_name.str= (char*) "";
            Lex->relay_log_connection_name.length= 0;
          }
    break;

  case 1843:

/* Line 1455 of yacc.c  */
#line 12165 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_STATUS; }
    break;

  case 1844:

/* Line 1455 of yacc.c  */
#line 12167 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            LEX *lex= Lex;
            if (lex->type & REFRESH_SLAVE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "FLUSH","SLAVE");
              MYSQL_YYABORT;
	    }
            lex->type|= REFRESH_SLAVE;
            lex->reset_slave_info.all= false;
          }
    break;

  case 1845:

/* Line 1455 of yacc.c  */
#line 12178 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_CLIENT_STATS; }
    break;

  case 1846:

/* Line 1455 of yacc.c  */
#line 12180 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_USER_STATS; }
    break;

  case 1847:

/* Line 1455 of yacc.c  */
#line 12182 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_TABLE_STATS; }
    break;

  case 1848:

/* Line 1455 of yacc.c  */
#line 12184 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_INDEX_STATS; }
    break;

  case 1849:

/* Line 1455 of yacc.c  */
#line 12186 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_MASTER; }
    break;

  case 1850:

/* Line 1455 of yacc.c  */
#line 12188 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_DES_KEY_FILE; }
    break;

  case 1851:

/* Line 1455 of yacc.c  */
#line 12190 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_USER_RESOURCES; }
    break;

  case 1852:

/* Line 1455 of yacc.c  */
#line 12194 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1853:

/* Line 1455 of yacc.c  */
#line 12195 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1854:

/* Line 1455 of yacc.c  */
#line 12199 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {(yyval.num)= 0;}
    break;

  case 1855:

/* Line 1455 of yacc.c  */
#line 12200 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {(yyval.num)= REFRESH_CHECKPOINT; }
    break;

  case 1856:

/* Line 1455 of yacc.c  */
#line 12204 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_RESET; lex->type=0;
          }
    break;

  case 1857:

/* Line 1455 of yacc.c  */
#line 12209 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1860:

/* Line 1455 of yacc.c  */
#line 12218 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_SLAVE; }
    break;

  case 1861:

/* Line 1455 of yacc.c  */
#line 12220 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { }
    break;

  case 1862:

/* Line 1455 of yacc.c  */
#line 12221 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_MASTER; }
    break;

  case 1863:

/* Line 1455 of yacc.c  */
#line 12222 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_QUERY_CACHE;}
    break;

  case 1864:

/* Line 1455 of yacc.c  */
#line 12226 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->reset_slave_info.all= false; }
    break;

  case 1865:

/* Line 1455 of yacc.c  */
#line 12227 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->reset_slave_info.all= true; }
    break;

  case 1866:

/* Line 1455 of yacc.c  */
#line 12232 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type=0;
            lex->sql_command = SQLCOM_PURGE;
          }
    break;

  case 1867:

/* Line 1455 of yacc.c  */
#line 12238 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1869:

/* Line 1455 of yacc.c  */
#line 12247 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->to_log = (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 1870:

/* Line 1455 of yacc.c  */
#line 12251 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->value_list.empty();
            lex->value_list.push_front((yyvsp[(2) - (2)].item));
            lex->sql_command= SQLCOM_PURGE_BEFORE;
          }
    break;

  case 1871:

/* Line 1455 of yacc.c  */
#line 12263 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->value_list.empty();
            lex->users_list.empty();
            lex->sql_command= SQLCOM_KILL;
          }
    break;

  case 1872:

/* Line 1455 of yacc.c  */
#line 12270 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->kill_signal= (killed_state) ((yyvsp[(3) - (5)].num) | (yyvsp[(4) - (5)].num));
          }
    break;

  case 1873:

/* Line 1455 of yacc.c  */
#line 12276 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= (int) KILL_HARD_BIT; }
    break;

  case 1874:

/* Line 1455 of yacc.c  */
#line 12277 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= (int) KILL_HARD_BIT; }
    break;

  case 1875:

/* Line 1455 of yacc.c  */
#line 12278 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1876:

/* Line 1455 of yacc.c  */
#line 12281 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= (int) KILL_CONNECTION; }
    break;

  case 1877:

/* Line 1455 of yacc.c  */
#line 12282 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= (int) KILL_CONNECTION; }
    break;

  case 1878:

/* Line 1455 of yacc.c  */
#line 12283 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= (int) KILL_QUERY; }
    break;

  case 1879:

/* Line 1455 of yacc.c  */
#line 12288 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
          Lex->value_list.push_front((yyval.item));
          Lex->kill_type= KILL_TYPE_ID;
         }
    break;

  case 1880:

/* Line 1455 of yacc.c  */
#line 12293 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->users_list.push_back((yyvsp[(2) - (2)].lex_user));
            Lex->kill_type= KILL_TYPE_USER;
          }
    break;

  case 1881:

/* Line 1455 of yacc.c  */
#line 12303 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_CHANGE_DB;
            lex->select_lex.db= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 1882:

/* Line 1455 of yacc.c  */
#line 12314 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), 
                       (yyvsp[(2) - (2)].filetype) == FILETYPE_CSV ? "LOAD DATA" : "LOAD XML");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1883:

/* Line 1455 of yacc.c  */
#line 12326 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_LOAD;
            lex->local_file=  (yyvsp[(5) - (7)].num);
            lex->duplicates= DUP_ERROR;
            lex->ignore= 0;
            if (!(lex->exchange= new sql_exchange((yyvsp[(7) - (7)].lex_str).str, 0, (yyvsp[(2) - (7)].filetype))))
              MYSQL_YYABORT;
          }
    break;

  case 1884:

/* Line 1455 of yacc.c  */
#line 12336 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(12) - (12)].table), NULL, TL_OPTION_UPDATING,
                                           (yyvsp[(4) - (12)].lock_type), MDL_SHARED_WRITE))
              MYSQL_YYABORT;
            lex->field_list.empty();
            lex->update_list.empty();
            lex->value_list.empty();
          }
    break;

  case 1885:

/* Line 1455 of yacc.c  */
#line 12346 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->exchange->cs= (yyvsp[(14) - (14)].charset); }
    break;

  case 1886:

/* Line 1455 of yacc.c  */
#line 12350 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1887:

/* Line 1455 of yacc.c  */
#line 12354 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.filetype)= FILETYPE_CSV; }
    break;

  case 1888:

/* Line 1455 of yacc.c  */
#line 12355 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.filetype)= FILETYPE_XML; }
    break;

  case 1889:

/* Line 1455 of yacc.c  */
#line 12359 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=0;}
    break;

  case 1890:

/* Line 1455 of yacc.c  */
#line 12360 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=1;}
    break;

  case 1891:

/* Line 1455 of yacc.c  */
#line 12364 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_DEFAULT; }
    break;

  case 1892:

/* Line 1455 of yacc.c  */
#line 12366 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              Ignore this option in SP to avoid problem with query cache and
              triggers with non default priority locks
            */
            (yyval.lock_type)= (Lex->sphead ? TL_WRITE_DEFAULT : TL_WRITE_CONCURRENT_INSERT);
          }
    break;

  case 1893:

/* Line 1455 of yacc.c  */
#line 12373 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1894:

/* Line 1455 of yacc.c  */
#line 12377 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->duplicates=DUP_ERROR; }
    break;

  case 1895:

/* Line 1455 of yacc.c  */
#line 12378 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->duplicates=DUP_REPLACE; }
    break;

  case 1896:

/* Line 1455 of yacc.c  */
#line 12379 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ignore= 1; }
    break;

  case 1901:

/* Line 1455 of yacc.c  */
#line 12394 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->field_term= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1902:

/* Line 1455 of yacc.c  */
#line 12399 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            DBUG_ASSERT(lex->exchange != 0);
            lex->exchange->enclosed= (yyvsp[(4) - (4)].string);
            lex->exchange->opt_enclosed= 1;
          }
    break;

  case 1903:

/* Line 1455 of yacc.c  */
#line 12406 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->enclosed= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1904:

/* Line 1455 of yacc.c  */
#line 12411 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->escaped= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1909:

/* Line 1455 of yacc.c  */
#line 12429 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->line_term= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1910:

/* Line 1455 of yacc.c  */
#line 12434 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->line_start= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1911:

/* Line 1455 of yacc.c  */
#line 12441 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { }
    break;

  case 1912:

/* Line 1455 of yacc.c  */
#line 12443 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->exchange->line_term = (yyvsp[(4) - (4)].string); }
    break;

  case 1914:

/* Line 1455 of yacc.c  */
#line 12448 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->skip_lines= atol((yyvsp[(2) - (3)].lex_str).str);
          }
    break;

  case 1915:

/* Line 1455 of yacc.c  */
#line 12455 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { }
    break;

  case 1916:

/* Line 1455 of yacc.c  */
#line 12457 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { }
    break;

  case 1917:

/* Line 1455 of yacc.c  */
#line 12461 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1918:

/* Line 1455 of yacc.c  */
#line 12462 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1919:

/* Line 1455 of yacc.c  */
#line 12463 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1920:

/* Line 1455 of yacc.c  */
#line 12468 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(3) - (3)].item)); }
    break;

  case 1921:

/* Line 1455 of yacc.c  */
#line 12470 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(1) - (1)].item)); }
    break;

  case 1922:

/* Line 1455 of yacc.c  */
#line 12474 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {(yyval.item)= (yyvsp[(1) - (1)].item);}
    break;

  case 1923:

/* Line 1455 of yacc.c  */
#line 12476 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_user_var_as_out_param((yyvsp[(2) - (2)].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1924:

/* Line 1455 of yacc.c  */
#line 12484 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1925:

/* Line 1455 of yacc.c  */
#line 12485 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1928:

/* Line 1455 of yacc.c  */
#line 12495 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->update_list.push_back((yyvsp[(1) - (5)].item)) || 
                lex->value_list.push_back((yyvsp[(4) - (5)].item)))
                MYSQL_YYABORT;
            (yyvsp[(4) - (5)].item)->set_name_no_truncate((yyvsp[(3) - (5)].simple_string), (uint) ((yyvsp[(5) - (5)].simple_string) - (yyvsp[(3) - (5)].simple_string)), YYTHD->charset());
          }
    break;

  case 1929:

/* Line 1455 of yacc.c  */
#line 12508 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX_STRING tmp;
            THD *thd= YYTHD;
            CHARSET_INFO *cs_con= thd->variables.collation_connection;
            CHARSET_INFO *cs_cli= thd->variables.character_set_client;
            uint repertoire= thd->lex->text_string_is_7bit &&
                             my_charset_is_ascii_based(cs_cli) ?
                             MY_REPERTOIRE_ASCII : MY_REPERTOIRE_UNICODE30;
            if (thd->charset_is_collation_connection ||
                (repertoire == MY_REPERTOIRE_ASCII &&
                 my_charset_is_ascii_based(cs_con)))
              tmp= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&tmp, cs_con, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, cs_cli))
                MYSQL_YYABORT;
            }
            (yyval.item)= new (thd->mem_root) Item_string(tmp.str, tmp.length, cs_con,
                                                DERIVATION_COERCIBLE,
                                                repertoire);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1930:

/* Line 1455 of yacc.c  */
#line 12532 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            uint repertoire= Lex->text_string_is_7bit ?
                             MY_REPERTOIRE_ASCII : MY_REPERTOIRE_UNICODE30;
            DBUG_ASSERT(my_charset_is_ascii_based(national_charset_info));
            (yyval.item)= new (YYTHD->mem_root) Item_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length,
                                                  national_charset_info,
                                                  DERIVATION_COERCIBLE,
                                                  repertoire);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1931:

/* Line 1455 of yacc.c  */
#line 12544 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item_string *str= new (YYTHD->mem_root) Item_string((yyvsp[(2) - (2)].lex_str).str,
                                                                (yyvsp[(2) - (2)].lex_str).length, (yyvsp[(1) - (2)].charset));
            if (str == NULL)
              MYSQL_YYABORT;
            str->set_repertoire_from_value();
            str->set_cs_specified(TRUE);

            (yyval.item)= str;
          }
    break;

  case 1932:

/* Line 1455 of yacc.c  */
#line 12555 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item_string* item= (Item_string*) (yyvsp[(1) - (2)].item);
            item->append((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (!(item->collation.repertoire & MY_REPERTOIRE_EXTENDED))
            {
              /*
                 If the string has been pure ASCII so far,
                 check the new part.
              */
              CHARSET_INFO *cs= YYTHD->variables.collation_connection;
              item->collation.repertoire|= my_string_repertoire(cs,
                                                                (yyvsp[(2) - (2)].lex_str).str,
                                                                (yyvsp[(2) - (2)].lex_str).length);
            }
          }
    break;

  case 1933:

/* Line 1455 of yacc.c  */
#line 12574 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.string)= new (YYTHD->mem_root) String((yyvsp[(1) - (1)].lex_str).str,
                                             (yyvsp[(1) - (1)].lex_str).length,
                                             YYTHD->variables.collation_connection);
            if ((yyval.string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1934:

/* Line 1455 of yacc.c  */
#line 12582 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_hex_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fields, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            (yyval.string)= tmp->val_str((String*) 0);
          }
    break;

  case 1935:

/* Line 1455 of yacc.c  */
#line 12594 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_bin_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fields, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            (yyval.string)= tmp->val_str((String*) 0);
          }
    break;

  case 1936:

/* Line 1455 of yacc.c  */
#line 12609 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            Item_param *item;
            if (! lex->parsing_options.allows_variable)
            {
              my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
              MYSQL_YYABORT;
            }
            item= new (thd->mem_root) Item_param((uint) (lip->get_tok_start() - thd->query()));
            if (!((yyval.item)= item) || lex->param_list.push_back(item))
            {
              my_message(ER_OUT_OF_RESOURCES, ER(ER_OUT_OF_RESOURCES), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1937:

/* Line 1455 of yacc.c  */
#line 12629 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item); }
    break;

  case 1938:

/* Line 1455 of yacc.c  */
#line 12630 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item_num); }
    break;

  case 1939:

/* Line 1455 of yacc.c  */
#line 12632 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyvsp[(2) - (2)].item_num)->max_length++;
            (yyval.item)= (yyvsp[(2) - (2)].item_num)->neg();
          }
    break;

  case 1940:

/* Line 1455 of yacc.c  */
#line 12639 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item); }
    break;

  case 1941:

/* Line 1455 of yacc.c  */
#line 12640 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item_num); }
    break;

  case 1942:

/* Line 1455 of yacc.c  */
#line 12642 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_null();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            YYLIP->next_state= MY_LEX_OPERATOR_OR_IDENT;
          }
    break;

  case 1943:

/* Line 1455 of yacc.c  */
#line 12649 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_int((char*) "FALSE",0,1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1944:

/* Line 1455 of yacc.c  */
#line 12655 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_int((char*) "TRUE",1,1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1945:

/* Line 1455 of yacc.c  */
#line 12661 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_hex_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1946:

/* Line 1455 of yacc.c  */
#line 12667 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_bin_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1947:

/* Line 1455 of yacc.c  */
#line 12673 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_hex_string((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fieds, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            String *str= tmp->val_str((String*) 0);

            Item_string *item_str;
            item_str= new (YYTHD->mem_root)
                        Item_string(NULL, /* name will be set in select_item */
                                    str ? str->ptr() : "",
                                    str ? str->length() : 0,
                                    (yyvsp[(1) - (2)].charset));
            if (!item_str ||
                !item_str->check_well_formed_result(&item_str->str_value, TRUE))
            {
              MYSQL_YYABORT;
            }

            item_str->set_repertoire_from_value();
            item_str->set_cs_specified(TRUE);

            (yyval.item)= item_str;
          }
    break;

  case 1948:

/* Line 1455 of yacc.c  */
#line 12702 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_bin_string((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fieds, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            String *str= tmp->val_str((String*) 0);

            Item_string *item_str;
            item_str= new (YYTHD->mem_root)
                        Item_string(NULL, /* name will be set in select_item */
                                    str ? str->ptr() : "",
                                    str ? str->length() : 0,
                                    (yyvsp[(1) - (2)].charset));
            if (!item_str ||
                !item_str->check_well_formed_result(&item_str->str_value, TRUE))
            {
              MYSQL_YYABORT;
            }

            item_str->set_cs_specified(TRUE);

            (yyval.item)= item_str;
          }
    break;

  case 1949:

/* Line 1455 of yacc.c  */
#line 12729 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item); }
    break;

  case 1950:

/* Line 1455 of yacc.c  */
#line 12730 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item); }
    break;

  case 1951:

/* Line 1455 of yacc.c  */
#line 12731 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item); }
    break;

  case 1952:

/* Line 1455 of yacc.c  */
#line 12736 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            int error;
            (yyval.item_num)= new (YYTHD->mem_root)
                  Item_int((yyvsp[(1) - (1)].lex_str).str,
                           (longlong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, NULL, &error),
                           (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1953:

/* Line 1455 of yacc.c  */
#line 12746 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            int error;
            (yyval.item_num)= new (YYTHD->mem_root)
                  Item_int((yyvsp[(1) - (1)].lex_str).str,
                           (longlong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, NULL, &error),
                           (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1954:

/* Line 1455 of yacc.c  */
#line 12756 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item_num)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1955:

/* Line 1455 of yacc.c  */
#line 12762 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item_num)= new (YYTHD->mem_root) Item_decimal((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length,
                                                   YYTHD->charset());
            if (((yyval.item_num) == NULL) || (YYTHD->is_error()))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1956:

/* Line 1455 of yacc.c  */
#line 12771 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item_num)= new (YYTHD->mem_root) Item_float((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (((yyval.item_num) == NULL) || (YYTHD->is_error()))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1957:

/* Line 1455 of yacc.c  */
#line 12785 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 1958:

/* Line 1455 of yacc.c  */
#line 12786 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 1959:

/* Line 1455 of yacc.c  */
#line 12791 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            (yyval.item)= new (YYTHD->mem_root) Item_field(Lex->current_context(),
                                                 NullS, (yyvsp[(1) - (3)].lex_str).str, "*");
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            sel->with_wild++;
          }
    break;

  case 1960:

/* Line 1455 of yacc.c  */
#line 12800 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            SELECT_LEX *sel= Select;
            const char* schema= thd->client_capabilities & CLIENT_NO_SCHEMA ?
                                  NullS : (yyvsp[(1) - (5)].lex_str).str;
            (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                               schema,
                                               (yyvsp[(3) - (5)].lex_str).str,"*");
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            sel->with_wild++;
          }
    break;

  case 1961:

/* Line 1455 of yacc.c  */
#line 12815 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 1962:

/* Line 1455 of yacc.c  */
#line 12820 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_variable_t *spv;
            sp_pcontext *spc = lex->spcont;
            if (spc && (spv = spc->find_variable(&(yyvsp[(1) - (1)].lex_str))))
            {
              /* We're compiling a stored procedure and found a variable */
              if (! lex->parsing_options.allows_variable)
              {
                my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
                MYSQL_YYABORT;
              }

              Item_splocal *splocal;
              splocal= new (thd->mem_root)
                         Item_splocal((yyvsp[(1) - (1)].lex_str), spv->offset, spv->type,
                                      lip->get_tok_start_prev() - lex->sphead->m_tmp_query,
                                      lip->get_tok_end() - lip->get_tok_start_prev());
              if (splocal == NULL)
                MYSQL_YYABORT;
#ifndef DBUG_OFF
              splocal->m_sp= lex->sphead;
#endif
              (yyval.item)= splocal;
              lex->safe_to_cache_query=0;
            }
            else
            {
              SELECT_LEX *sel=Select;
              if ((sel->parsing_place != IN_HAVING) ||
                  (sel->get_in_sum_expr() > 0))
              {
                (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                   NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
              }
              else
              {
                (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                                 NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
              }
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1963:

/* Line 1455 of yacc.c  */
#line 12866 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 1964:

/* Line 1455 of yacc.c  */
#line 12871 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            SELECT_LEX *sel=Select;
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                               NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1965:

/* Line 1455 of yacc.c  */
#line 12888 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 1966:

/* Line 1455 of yacc.c  */
#line 12893 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            /*
              FIXME This will work ok in simple_ident_nospvar case because
              we can't meet simple_ident_nospvar in trigger now. But it
              should be changed in future.
            */
            if (lex->sphead && lex->sphead->m_type == TYPE_ENUM_TRIGGER &&
                (!my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "NEW") ||
                 !my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "OLD")))
            {
              Item_trigger_field *trg_fld;
              bool new_row= ((yyvsp[(1) - (3)].lex_str).str[0]=='N' || (yyvsp[(1) - (3)].lex_str).str[0]=='n');

              if (lex->trg_chistics.event == TRG_EVENT_INSERT &&
                  !new_row)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0), "OLD", "on INSERT");
                MYSQL_YYABORT;
              }

              if (lex->trg_chistics.event == TRG_EVENT_DELETE &&
                  new_row)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0), "NEW", "on DELETE");
                MYSQL_YYABORT;
              }

              DBUG_ASSERT(!new_row ||
                          (lex->trg_chistics.event == TRG_EVENT_INSERT ||
                           lex->trg_chistics.event == TRG_EVENT_UPDATE));
              const bool read_only=
                !(new_row && lex->trg_chistics.action_time == TRG_ACTION_BEFORE);
              trg_fld= new (thd->mem_root)
                         Item_trigger_field(Lex->current_context(),
                                            new_row ?
                                              Item_trigger_field::NEW_ROW:
                                              Item_trigger_field::OLD_ROW,
                                            (yyvsp[(3) - (3)].lex_str).str,
                                            SELECT_ACL,
                                            read_only);
              if (trg_fld == NULL)
                MYSQL_YYABORT;

              /*
                Let us add this item to list of all Item_trigger_field objects
                in trigger.
              */
              lex->trg_table_fields.link_in_list(trg_fld,
                                                 &trg_fld->next_trg_field);

              (yyval.item)= trg_fld;
            }
            else
            {
              SELECT_LEX *sel= lex->current_select;
              if (sel->no_table_names_allowed)
              {
                my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                         MYF(0), (yyvsp[(1) - (3)].lex_str).str, thd->where);
              }
              if ((sel->parsing_place != IN_HAVING) ||
                  (sel->get_in_sum_expr() > 0))
              {
                (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                   NullS, (yyvsp[(1) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).str);
              }
              else
              {
                (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                                 NullS, (yyvsp[(1) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).str);
              }
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1967:

/* Line 1455 of yacc.c  */
#line 12972 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->no_table_names_allowed)
            {
              my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                       MYF(0), (yyvsp[(2) - (4)].lex_str).str, thd->where);
            }
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 NullS, (yyvsp[(2) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).str);

            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                               NullS, (yyvsp[(2) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1968:

/* Line 1455 of yacc.c  */
#line 12997 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            SELECT_LEX *sel= lex->current_select;
            const char* schema= (thd->client_capabilities & CLIENT_NO_SCHEMA ?
                                 NullS : (yyvsp[(1) - (5)].lex_str).str);
            if (sel->no_table_names_allowed)
            {
              my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                       MYF(0), (yyvsp[(3) - (5)].lex_str).str, thd->where);
            }
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 schema,
                                                 (yyvsp[(3) - (5)].lex_str).str, (yyvsp[(5) - (5)].lex_str).str);
            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                               schema,
                                               (yyvsp[(3) - (5)].lex_str).str, (yyvsp[(5) - (5)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1969:

/* Line 1455 of yacc.c  */
#line 13027 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 1970:

/* Line 1455 of yacc.c  */
#line 13029 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            TABLE_LIST *table= Select->table_list.first;
            if (my_strcasecmp(table_alias_charset, (yyvsp[(1) - (5)].lex_str).str, table->db))
            {
              my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[(1) - (5)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (my_strcasecmp(table_alias_charset, (yyvsp[(3) - (5)].lex_str).str,
                              table->table_name))
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(3) - (5)].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.lex_str)=(yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 1971:

/* Line 1455 of yacc.c  */
#line 13045 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            TABLE_LIST *table= Select->table_list.first;
            if (my_strcasecmp(table_alias_charset, (yyvsp[(1) - (3)].lex_str).str, table->alias))
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(1) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.lex_str)=(yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 1972:

/* Line 1455 of yacc.c  */
#line 13054 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str);}
    break;

  case 1973:

/* Line 1455 of yacc.c  */
#line 13059 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.table)= new Table_ident((yyvsp[(1) - (1)].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1974:

/* Line 1455 of yacc.c  */
#line 13065 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.table)= new Table_ident(YYTHD, (yyvsp[(1) - (3)].lex_str),(yyvsp[(3) - (3)].lex_str),0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1975:

/* Line 1455 of yacc.c  */
#line 13071 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* For Delphi */
            (yyval.table)= new Table_ident((yyvsp[(2) - (2)].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1976:

/* Line 1455 of yacc.c  */
#line 13081 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.table)= new Table_ident((yyvsp[(1) - (2)].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1977:

/* Line 1455 of yacc.c  */
#line 13087 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.table)= new Table_ident(YYTHD, (yyvsp[(1) - (4)].lex_str),(yyvsp[(3) - (4)].lex_str),0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1978:

/* Line 1455 of yacc.c  */
#line 13096 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX_STRING db={(char*) any_db,3};
            (yyval.table)= new Table_ident(YYTHD, db,(yyvsp[(1) - (1)].lex_str),0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1979:

/* Line 1455 of yacc.c  */
#line 13105 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 1980:

/* Line 1455 of yacc.c  */
#line 13107 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_system_charset)
            {
              CHARSET_INFO *cs= system_charset_info;
              int dummy_error;
              uint wlen= cs->cset->well_formed_len(cs, (yyvsp[(1) - (1)].lex_str).str,
                                                   (yyvsp[(1) - (1)].lex_str).str+(yyvsp[(1) - (1)].lex_str).length,
                                                   (yyvsp[(1) - (1)].lex_str).length, &dummy_error);
              if (wlen < (yyvsp[(1) - (1)].lex_str).length)
              {
                ErrConvString err((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, &my_charset_bin);
                my_error(ER_INVALID_CHARACTER_STRING, MYF(0),
                         cs->csname, err.ptr());
                MYSQL_YYABORT;
              }
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            }
            else
            {
              if (thd->convert_string(&(yyval.lex_str), system_charset_info,
                                  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1981:

/* Line 1455 of yacc.c  */
#line 13137 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_system_charset)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str), system_charset_info,
                                  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1982:

/* Line 1455 of yacc.c  */
#line 13153 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_collation_connection)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str), thd->variables.collation_connection,
                                  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            } 
          }
    break;

  case 1983:

/* Line 1455 of yacc.c  */
#line 13169 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_character_set_filesystem)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str),
                                      thd->variables.character_set_filesystem,
                                      (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1984:

/* Line 1455 of yacc.c  */
#line 13185 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1985:

/* Line 1455 of yacc.c  */
#line 13187 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            (yyval.lex_str).str= thd->strmake((yyvsp[(1) - (1)].symbol).str, (yyvsp[(1) - (1)].symbol).length);
            if ((yyval.lex_str).str == NULL)
              MYSQL_YYABORT;
            (yyval.lex_str).length= (yyvsp[(1) - (1)].symbol).length;
          }
    break;

  case 1986:

/* Line 1455 of yacc.c  */
#line 13197 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1987:

/* Line 1455 of yacc.c  */
#line 13199 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            (yyval.lex_str).str= thd->strmake((yyvsp[(1) - (1)].symbol).str, (yyvsp[(1) - (1)].symbol).length);
            if ((yyval.lex_str).str == NULL)
              MYSQL_YYABORT;
            (yyval.lex_str).length= (yyvsp[(1) - (1)].symbol).length;
          }
    break;

  case 1988:

/* Line 1455 of yacc.c  */
#line 13209 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 1989:

/* Line 1455 of yacc.c  */
#line 13210 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 1990:

/* Line 1455 of yacc.c  */
#line 13211 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 1991:

/* Line 1455 of yacc.c  */
#line 13216 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            if (!((yyval.lex_user)=(LEX_USER*) thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user = (yyvsp[(1) - (1)].lex_str);
            (yyval.lex_user)->host.str= (char *) "%";
            (yyval.lex_user)->host.length= 1;
            (yyval.lex_user)->password= null_lex_str; 
            (yyval.lex_user)->plugin= empty_lex_str;
            (yyval.lex_user)->auth= empty_lex_str;

            if (check_string_char_length(&(yyval.lex_user)->user, ER(ER_USERNAME),
                                         USERNAME_CHAR_LENGTH,
                                         system_charset_info, 0))
              MYSQL_YYABORT;
          }
    break;

  case 1992:

/* Line 1455 of yacc.c  */
#line 13233 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            if (!((yyval.lex_user)=(LEX_USER*) thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user = (yyvsp[(1) - (3)].lex_str); (yyval.lex_user)->host=(yyvsp[(3) - (3)].lex_str);
            (yyval.lex_user)->password= null_lex_str; 
            (yyval.lex_user)->plugin= empty_lex_str;
            (yyval.lex_user)->auth= empty_lex_str;

            if (check_string_char_length(&(yyval.lex_user)->user, ER(ER_USERNAME),
                                         USERNAME_CHAR_LENGTH,
                                         system_charset_info, 0) ||
                check_host_name(&(yyval.lex_user)->host))
              MYSQL_YYABORT;
            /*
              Convert hostname part of username to lowercase.
              It's OK to use in-place lowercase as long as
              the character set is utf8.
            */
            my_casedn_str(system_charset_info, (yyval.lex_user)->host.str);
          }
    break;

  case 1993:

/* Line 1455 of yacc.c  */
#line 13255 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!((yyval.lex_user)=(LEX_USER*) YYTHD->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            /* 
              empty LEX_USER means current_user and 
              will be handled in the  get_current_user() function
              later
            */
            bzero((yyval.lex_user), sizeof(LEX_USER));
          }
    break;

  case 1994:

/* Line 1455 of yacc.c  */
#line 13269 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1995:

/* Line 1455 of yacc.c  */
#line 13270 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1996:

/* Line 1455 of yacc.c  */
#line 13271 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1997:

/* Line 1455 of yacc.c  */
#line 13272 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1998:

/* Line 1455 of yacc.c  */
#line 13273 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1999:

/* Line 1455 of yacc.c  */
#line 13274 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2000:

/* Line 1455 of yacc.c  */
#line 13275 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2001:

/* Line 1455 of yacc.c  */
#line 13276 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2002:

/* Line 1455 of yacc.c  */
#line 13277 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2003:

/* Line 1455 of yacc.c  */
#line 13278 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2004:

/* Line 1455 of yacc.c  */
#line 13279 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2005:

/* Line 1455 of yacc.c  */
#line 13280 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2006:

/* Line 1455 of yacc.c  */
#line 13281 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2007:

/* Line 1455 of yacc.c  */
#line 13282 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2008:

/* Line 1455 of yacc.c  */
#line 13283 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2009:

/* Line 1455 of yacc.c  */
#line 13284 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2010:

/* Line 1455 of yacc.c  */
#line 13285 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2011:

/* Line 1455 of yacc.c  */
#line 13286 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2012:

/* Line 1455 of yacc.c  */
#line 13287 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2013:

/* Line 1455 of yacc.c  */
#line 13288 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2014:

/* Line 1455 of yacc.c  */
#line 13289 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2015:

/* Line 1455 of yacc.c  */
#line 13290 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2016:

/* Line 1455 of yacc.c  */
#line 13291 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2017:

/* Line 1455 of yacc.c  */
#line 13292 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2018:

/* Line 1455 of yacc.c  */
#line 13293 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2019:

/* Line 1455 of yacc.c  */
#line 13294 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2020:

/* Line 1455 of yacc.c  */
#line 13295 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2021:

/* Line 1455 of yacc.c  */
#line 13296 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2022:

/* Line 1455 of yacc.c  */
#line 13297 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2023:

/* Line 1455 of yacc.c  */
#line 13298 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2024:

/* Line 1455 of yacc.c  */
#line 13299 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2025:

/* Line 1455 of yacc.c  */
#line 13300 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2026:

/* Line 1455 of yacc.c  */
#line 13301 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2027:

/* Line 1455 of yacc.c  */
#line 13302 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2028:

/* Line 1455 of yacc.c  */
#line 13303 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2029:

/* Line 1455 of yacc.c  */
#line 13304 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2030:

/* Line 1455 of yacc.c  */
#line 13305 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2031:

/* Line 1455 of yacc.c  */
#line 13306 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2032:

/* Line 1455 of yacc.c  */
#line 13307 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2033:

/* Line 1455 of yacc.c  */
#line 13308 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2034:

/* Line 1455 of yacc.c  */
#line 13309 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2035:

/* Line 1455 of yacc.c  */
#line 13310 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2036:

/* Line 1455 of yacc.c  */
#line 13311 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2037:

/* Line 1455 of yacc.c  */
#line 13312 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2038:

/* Line 1455 of yacc.c  */
#line 13313 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2039:

/* Line 1455 of yacc.c  */
#line 13314 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2040:

/* Line 1455 of yacc.c  */
#line 13315 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2041:

/* Line 1455 of yacc.c  */
#line 13316 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2042:

/* Line 1455 of yacc.c  */
#line 13317 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2043:

/* Line 1455 of yacc.c  */
#line 13318 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2044:

/* Line 1455 of yacc.c  */
#line 13319 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2045:

/* Line 1455 of yacc.c  */
#line 13320 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2046:

/* Line 1455 of yacc.c  */
#line 13321 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2047:

/* Line 1455 of yacc.c  */
#line 13322 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2048:

/* Line 1455 of yacc.c  */
#line 13323 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2049:

/* Line 1455 of yacc.c  */
#line 13324 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2050:

/* Line 1455 of yacc.c  */
#line 13325 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2051:

/* Line 1455 of yacc.c  */
#line 13326 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2052:

/* Line 1455 of yacc.c  */
#line 13336 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2053:

/* Line 1455 of yacc.c  */
#line 13337 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2054:

/* Line 1455 of yacc.c  */
#line 13338 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2055:

/* Line 1455 of yacc.c  */
#line 13339 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2056:

/* Line 1455 of yacc.c  */
#line 13340 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2057:

/* Line 1455 of yacc.c  */
#line 13341 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2058:

/* Line 1455 of yacc.c  */
#line 13342 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2059:

/* Line 1455 of yacc.c  */
#line 13343 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2060:

/* Line 1455 of yacc.c  */
#line 13344 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2061:

/* Line 1455 of yacc.c  */
#line 13345 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2062:

/* Line 1455 of yacc.c  */
#line 13346 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2063:

/* Line 1455 of yacc.c  */
#line 13347 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2064:

/* Line 1455 of yacc.c  */
#line 13348 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2065:

/* Line 1455 of yacc.c  */
#line 13349 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2066:

/* Line 1455 of yacc.c  */
#line 13350 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2067:

/* Line 1455 of yacc.c  */
#line 13351 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2068:

/* Line 1455 of yacc.c  */
#line 13352 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2069:

/* Line 1455 of yacc.c  */
#line 13353 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2070:

/* Line 1455 of yacc.c  */
#line 13354 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2071:

/* Line 1455 of yacc.c  */
#line 13355 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2072:

/* Line 1455 of yacc.c  */
#line 13356 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2073:

/* Line 1455 of yacc.c  */
#line 13357 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2074:

/* Line 1455 of yacc.c  */
#line 13358 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2075:

/* Line 1455 of yacc.c  */
#line 13359 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2076:

/* Line 1455 of yacc.c  */
#line 13360 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2077:

/* Line 1455 of yacc.c  */
#line 13361 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2078:

/* Line 1455 of yacc.c  */
#line 13362 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2079:

/* Line 1455 of yacc.c  */
#line 13363 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2080:

/* Line 1455 of yacc.c  */
#line 13364 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2081:

/* Line 1455 of yacc.c  */
#line 13365 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2082:

/* Line 1455 of yacc.c  */
#line 13366 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2083:

/* Line 1455 of yacc.c  */
#line 13367 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2084:

/* Line 1455 of yacc.c  */
#line 13368 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2085:

/* Line 1455 of yacc.c  */
#line 13369 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2086:

/* Line 1455 of yacc.c  */
#line 13370 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2087:

/* Line 1455 of yacc.c  */
#line 13371 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2088:

/* Line 1455 of yacc.c  */
#line 13372 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2089:

/* Line 1455 of yacc.c  */
#line 13373 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2090:

/* Line 1455 of yacc.c  */
#line 13374 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2091:

/* Line 1455 of yacc.c  */
#line 13375 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2092:

/* Line 1455 of yacc.c  */
#line 13376 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2093:

/* Line 1455 of yacc.c  */
#line 13377 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2094:

/* Line 1455 of yacc.c  */
#line 13378 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2095:

/* Line 1455 of yacc.c  */
#line 13379 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2096:

/* Line 1455 of yacc.c  */
#line 13380 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2097:

/* Line 1455 of yacc.c  */
#line 13381 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2098:

/* Line 1455 of yacc.c  */
#line 13382 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2099:

/* Line 1455 of yacc.c  */
#line 13383 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2100:

/* Line 1455 of yacc.c  */
#line 13384 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2101:

/* Line 1455 of yacc.c  */
#line 13385 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2102:

/* Line 1455 of yacc.c  */
#line 13386 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2103:

/* Line 1455 of yacc.c  */
#line 13387 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2104:

/* Line 1455 of yacc.c  */
#line 13388 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2105:

/* Line 1455 of yacc.c  */
#line 13389 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2106:

/* Line 1455 of yacc.c  */
#line 13390 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2107:

/* Line 1455 of yacc.c  */
#line 13391 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2108:

/* Line 1455 of yacc.c  */
#line 13392 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2109:

/* Line 1455 of yacc.c  */
#line 13393 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2110:

/* Line 1455 of yacc.c  */
#line 13394 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2111:

/* Line 1455 of yacc.c  */
#line 13395 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2112:

/* Line 1455 of yacc.c  */
#line 13396 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2113:

/* Line 1455 of yacc.c  */
#line 13397 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2114:

/* Line 1455 of yacc.c  */
#line 13398 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2115:

/* Line 1455 of yacc.c  */
#line 13399 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2116:

/* Line 1455 of yacc.c  */
#line 13400 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2117:

/* Line 1455 of yacc.c  */
#line 13401 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2118:

/* Line 1455 of yacc.c  */
#line 13402 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2119:

/* Line 1455 of yacc.c  */
#line 13403 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2120:

/* Line 1455 of yacc.c  */
#line 13404 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2121:

/* Line 1455 of yacc.c  */
#line 13405 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2122:

/* Line 1455 of yacc.c  */
#line 13406 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2123:

/* Line 1455 of yacc.c  */
#line 13407 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2124:

/* Line 1455 of yacc.c  */
#line 13408 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2125:

/* Line 1455 of yacc.c  */
#line 13409 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2126:

/* Line 1455 of yacc.c  */
#line 13410 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2127:

/* Line 1455 of yacc.c  */
#line 13411 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2128:

/* Line 1455 of yacc.c  */
#line 13412 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2129:

/* Line 1455 of yacc.c  */
#line 13413 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2130:

/* Line 1455 of yacc.c  */
#line 13414 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2131:

/* Line 1455 of yacc.c  */
#line 13415 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2132:

/* Line 1455 of yacc.c  */
#line 13416 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2133:

/* Line 1455 of yacc.c  */
#line 13417 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2134:

/* Line 1455 of yacc.c  */
#line 13418 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2135:

/* Line 1455 of yacc.c  */
#line 13419 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2136:

/* Line 1455 of yacc.c  */
#line 13420 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2137:

/* Line 1455 of yacc.c  */
#line 13421 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2138:

/* Line 1455 of yacc.c  */
#line 13422 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2139:

/* Line 1455 of yacc.c  */
#line 13423 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2140:

/* Line 1455 of yacc.c  */
#line 13424 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2141:

/* Line 1455 of yacc.c  */
#line 13425 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2142:

/* Line 1455 of yacc.c  */
#line 13426 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2143:

/* Line 1455 of yacc.c  */
#line 13427 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2144:

/* Line 1455 of yacc.c  */
#line 13428 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2145:

/* Line 1455 of yacc.c  */
#line 13429 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2146:

/* Line 1455 of yacc.c  */
#line 13430 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2147:

/* Line 1455 of yacc.c  */
#line 13431 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2148:

/* Line 1455 of yacc.c  */
#line 13432 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2149:

/* Line 1455 of yacc.c  */
#line 13433 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2150:

/* Line 1455 of yacc.c  */
#line 13434 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2151:

/* Line 1455 of yacc.c  */
#line 13435 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2152:

/* Line 1455 of yacc.c  */
#line 13436 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2153:

/* Line 1455 of yacc.c  */
#line 13437 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2154:

/* Line 1455 of yacc.c  */
#line 13438 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2155:

/* Line 1455 of yacc.c  */
#line 13439 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2156:

/* Line 1455 of yacc.c  */
#line 13440 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2157:

/* Line 1455 of yacc.c  */
#line 13441 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2158:

/* Line 1455 of yacc.c  */
#line 13442 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2159:

/* Line 1455 of yacc.c  */
#line 13443 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2160:

/* Line 1455 of yacc.c  */
#line 13444 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2161:

/* Line 1455 of yacc.c  */
#line 13445 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2162:

/* Line 1455 of yacc.c  */
#line 13446 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2163:

/* Line 1455 of yacc.c  */
#line 13447 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2164:

/* Line 1455 of yacc.c  */
#line 13448 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2165:

/* Line 1455 of yacc.c  */
#line 13449 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2166:

/* Line 1455 of yacc.c  */
#line 13450 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2167:

/* Line 1455 of yacc.c  */
#line 13451 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2168:

/* Line 1455 of yacc.c  */
#line 13452 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2169:

/* Line 1455 of yacc.c  */
#line 13453 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2170:

/* Line 1455 of yacc.c  */
#line 13454 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2171:

/* Line 1455 of yacc.c  */
#line 13455 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2172:

/* Line 1455 of yacc.c  */
#line 13456 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2173:

/* Line 1455 of yacc.c  */
#line 13457 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2174:

/* Line 1455 of yacc.c  */
#line 13458 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2175:

/* Line 1455 of yacc.c  */
#line 13459 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2176:

/* Line 1455 of yacc.c  */
#line 13460 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2177:

/* Line 1455 of yacc.c  */
#line 13461 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2178:

/* Line 1455 of yacc.c  */
#line 13462 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2179:

/* Line 1455 of yacc.c  */
#line 13463 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2180:

/* Line 1455 of yacc.c  */
#line 13464 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2181:

/* Line 1455 of yacc.c  */
#line 13465 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2182:

/* Line 1455 of yacc.c  */
#line 13466 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2183:

/* Line 1455 of yacc.c  */
#line 13467 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2184:

/* Line 1455 of yacc.c  */
#line 13468 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2185:

/* Line 1455 of yacc.c  */
#line 13469 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2186:

/* Line 1455 of yacc.c  */
#line 13470 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2187:

/* Line 1455 of yacc.c  */
#line 13471 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2188:

/* Line 1455 of yacc.c  */
#line 13472 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2189:

/* Line 1455 of yacc.c  */
#line 13473 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2190:

/* Line 1455 of yacc.c  */
#line 13474 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2191:

/* Line 1455 of yacc.c  */
#line 13475 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2192:

/* Line 1455 of yacc.c  */
#line 13476 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2193:

/* Line 1455 of yacc.c  */
#line 13477 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2194:

/* Line 1455 of yacc.c  */
#line 13478 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2195:

/* Line 1455 of yacc.c  */
#line 13479 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2196:

/* Line 1455 of yacc.c  */
#line 13480 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2197:

/* Line 1455 of yacc.c  */
#line 13481 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2198:

/* Line 1455 of yacc.c  */
#line 13482 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2199:

/* Line 1455 of yacc.c  */
#line 13483 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2200:

/* Line 1455 of yacc.c  */
#line 13484 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2201:

/* Line 1455 of yacc.c  */
#line 13485 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2202:

/* Line 1455 of yacc.c  */
#line 13486 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2203:

/* Line 1455 of yacc.c  */
#line 13487 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2204:

/* Line 1455 of yacc.c  */
#line 13488 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2205:

/* Line 1455 of yacc.c  */
#line 13489 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2206:

/* Line 1455 of yacc.c  */
#line 13490 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2207:

/* Line 1455 of yacc.c  */
#line 13491 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2208:

/* Line 1455 of yacc.c  */
#line 13492 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2209:

/* Line 1455 of yacc.c  */
#line 13493 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2210:

/* Line 1455 of yacc.c  */
#line 13494 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2211:

/* Line 1455 of yacc.c  */
#line 13495 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2212:

/* Line 1455 of yacc.c  */
#line 13496 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2213:

/* Line 1455 of yacc.c  */
#line 13497 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2214:

/* Line 1455 of yacc.c  */
#line 13498 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2215:

/* Line 1455 of yacc.c  */
#line 13499 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2216:

/* Line 1455 of yacc.c  */
#line 13500 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2217:

/* Line 1455 of yacc.c  */
#line 13501 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2218:

/* Line 1455 of yacc.c  */
#line 13502 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2219:

/* Line 1455 of yacc.c  */
#line 13503 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2220:

/* Line 1455 of yacc.c  */
#line 13504 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2221:

/* Line 1455 of yacc.c  */
#line 13505 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2222:

/* Line 1455 of yacc.c  */
#line 13506 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2223:

/* Line 1455 of yacc.c  */
#line 13507 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2224:

/* Line 1455 of yacc.c  */
#line 13508 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2225:

/* Line 1455 of yacc.c  */
#line 13509 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2226:

/* Line 1455 of yacc.c  */
#line 13510 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2227:

/* Line 1455 of yacc.c  */
#line 13511 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2228:

/* Line 1455 of yacc.c  */
#line 13512 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2229:

/* Line 1455 of yacc.c  */
#line 13513 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2230:

/* Line 1455 of yacc.c  */
#line 13514 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2231:

/* Line 1455 of yacc.c  */
#line 13515 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2232:

/* Line 1455 of yacc.c  */
#line 13516 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2233:

/* Line 1455 of yacc.c  */
#line 13517 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2234:

/* Line 1455 of yacc.c  */
#line 13518 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2235:

/* Line 1455 of yacc.c  */
#line 13519 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2236:

/* Line 1455 of yacc.c  */
#line 13520 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2237:

/* Line 1455 of yacc.c  */
#line 13521 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2238:

/* Line 1455 of yacc.c  */
#line 13522 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2239:

/* Line 1455 of yacc.c  */
#line 13523 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2240:

/* Line 1455 of yacc.c  */
#line 13524 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2241:

/* Line 1455 of yacc.c  */
#line 13525 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2242:

/* Line 1455 of yacc.c  */
#line 13526 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2243:

/* Line 1455 of yacc.c  */
#line 13527 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2244:

/* Line 1455 of yacc.c  */
#line 13528 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2245:

/* Line 1455 of yacc.c  */
#line 13529 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2246:

/* Line 1455 of yacc.c  */
#line 13530 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2247:

/* Line 1455 of yacc.c  */
#line 13531 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2248:

/* Line 1455 of yacc.c  */
#line 13532 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2249:

/* Line 1455 of yacc.c  */
#line 13533 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2250:

/* Line 1455 of yacc.c  */
#line 13534 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2251:

/* Line 1455 of yacc.c  */
#line 13535 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2252:

/* Line 1455 of yacc.c  */
#line 13536 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2253:

/* Line 1455 of yacc.c  */
#line 13537 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2254:

/* Line 1455 of yacc.c  */
#line 13538 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2255:

/* Line 1455 of yacc.c  */
#line 13539 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2256:

/* Line 1455 of yacc.c  */
#line 13540 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2257:

/* Line 1455 of yacc.c  */
#line 13541 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2258:

/* Line 1455 of yacc.c  */
#line 13542 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2259:

/* Line 1455 of yacc.c  */
#line 13543 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2260:

/* Line 1455 of yacc.c  */
#line 13544 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2261:

/* Line 1455 of yacc.c  */
#line 13545 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2262:

/* Line 1455 of yacc.c  */
#line 13546 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2263:

/* Line 1455 of yacc.c  */
#line 13547 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2264:

/* Line 1455 of yacc.c  */
#line 13548 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2265:

/* Line 1455 of yacc.c  */
#line 13549 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2266:

/* Line 1455 of yacc.c  */
#line 13550 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2267:

/* Line 1455 of yacc.c  */
#line 13551 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2268:

/* Line 1455 of yacc.c  */
#line 13552 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2269:

/* Line 1455 of yacc.c  */
#line 13553 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2270:

/* Line 1455 of yacc.c  */
#line 13554 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2271:

/* Line 1455 of yacc.c  */
#line 13555 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2272:

/* Line 1455 of yacc.c  */
#line 13556 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2273:

/* Line 1455 of yacc.c  */
#line 13557 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2274:

/* Line 1455 of yacc.c  */
#line 13558 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2275:

/* Line 1455 of yacc.c  */
#line 13559 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2276:

/* Line 1455 of yacc.c  */
#line 13560 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2277:

/* Line 1455 of yacc.c  */
#line 13561 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2278:

/* Line 1455 of yacc.c  */
#line 13562 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2279:

/* Line 1455 of yacc.c  */
#line 13563 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2280:

/* Line 1455 of yacc.c  */
#line 13564 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2281:

/* Line 1455 of yacc.c  */
#line 13565 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2282:

/* Line 1455 of yacc.c  */
#line 13566 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2283:

/* Line 1455 of yacc.c  */
#line 13567 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2284:

/* Line 1455 of yacc.c  */
#line 13568 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2285:

/* Line 1455 of yacc.c  */
#line 13569 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2286:

/* Line 1455 of yacc.c  */
#line 13570 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2287:

/* Line 1455 of yacc.c  */
#line 13571 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2288:

/* Line 1455 of yacc.c  */
#line 13572 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2289:

/* Line 1455 of yacc.c  */
#line 13573 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2290:

/* Line 1455 of yacc.c  */
#line 13574 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2291:

/* Line 1455 of yacc.c  */
#line 13575 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2292:

/* Line 1455 of yacc.c  */
#line 13576 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2293:

/* Line 1455 of yacc.c  */
#line 13577 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2294:

/* Line 1455 of yacc.c  */
#line 13578 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2295:

/* Line 1455 of yacc.c  */
#line 13579 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2296:

/* Line 1455 of yacc.c  */
#line 13580 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2297:

/* Line 1455 of yacc.c  */
#line 13581 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2298:

/* Line 1455 of yacc.c  */
#line 13582 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2299:

/* Line 1455 of yacc.c  */
#line 13583 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2300:

/* Line 1455 of yacc.c  */
#line 13584 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2301:

/* Line 1455 of yacc.c  */
#line 13585 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2302:

/* Line 1455 of yacc.c  */
#line 13586 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2303:

/* Line 1455 of yacc.c  */
#line 13587 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2304:

/* Line 1455 of yacc.c  */
#line 13588 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2305:

/* Line 1455 of yacc.c  */
#line 13589 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2306:

/* Line 1455 of yacc.c  */
#line 13590 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2307:

/* Line 1455 of yacc.c  */
#line 13591 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2308:

/* Line 1455 of yacc.c  */
#line 13592 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2309:

/* Line 1455 of yacc.c  */
#line 13593 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2310:

/* Line 1455 of yacc.c  */
#line 13594 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2311:

/* Line 1455 of yacc.c  */
#line 13595 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2312:

/* Line 1455 of yacc.c  */
#line 13596 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2313:

/* Line 1455 of yacc.c  */
#line 13597 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2314:

/* Line 1455 of yacc.c  */
#line 13598 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2315:

/* Line 1455 of yacc.c  */
#line 13599 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2316:

/* Line 1455 of yacc.c  */
#line 13600 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2317:

/* Line 1455 of yacc.c  */
#line 13601 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2318:

/* Line 1455 of yacc.c  */
#line 13602 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2319:

/* Line 1455 of yacc.c  */
#line 13603 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2320:

/* Line 1455 of yacc.c  */
#line 13604 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2321:

/* Line 1455 of yacc.c  */
#line 13605 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2322:

/* Line 1455 of yacc.c  */
#line 13606 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2323:

/* Line 1455 of yacc.c  */
#line 13607 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2324:

/* Line 1455 of yacc.c  */
#line 13608 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2325:

/* Line 1455 of yacc.c  */
#line 13609 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2326:

/* Line 1455 of yacc.c  */
#line 13610 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2327:

/* Line 1455 of yacc.c  */
#line 13611 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2328:

/* Line 1455 of yacc.c  */
#line 13612 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2329:

/* Line 1455 of yacc.c  */
#line 13613 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2330:

/* Line 1455 of yacc.c  */
#line 13614 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2331:

/* Line 1455 of yacc.c  */
#line 13615 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2332:

/* Line 1455 of yacc.c  */
#line 13616 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2333:

/* Line 1455 of yacc.c  */
#line 13617 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2334:

/* Line 1455 of yacc.c  */
#line 13618 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2335:

/* Line 1455 of yacc.c  */
#line 13619 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2336:

/* Line 1455 of yacc.c  */
#line 13620 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2337:

/* Line 1455 of yacc.c  */
#line 13621 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2338:

/* Line 1455 of yacc.c  */
#line 13622 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2339:

/* Line 1455 of yacc.c  */
#line 13623 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2340:

/* Line 1455 of yacc.c  */
#line 13624 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2341:

/* Line 1455 of yacc.c  */
#line 13625 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2342:

/* Line 1455 of yacc.c  */
#line 13626 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2343:

/* Line 1455 of yacc.c  */
#line 13627 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2344:

/* Line 1455 of yacc.c  */
#line 13628 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2345:

/* Line 1455 of yacc.c  */
#line 13629 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2346:

/* Line 1455 of yacc.c  */
#line 13641 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SET_OPTION;
            mysql_init_select(lex);
            lex->option_type=OPT_SESSION;
            lex->var_list.empty();
            lex->one_shot_set= 0;
            lex->autocommit= 0;
            sp_create_assignment_lex(YYTHD, yychar == YYEMPTY);
          }
    break;

  case 2347:

/* Line 1455 of yacc.c  */
#line 13652 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2348:

/* Line 1455 of yacc.c  */
#line 13659 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(YYTHD, yychar == YYEMPTY))
              MYSQL_YYABORT;
          }
    break;

  case 2350:

/* Line 1455 of yacc.c  */
#line 13665 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->option_type= OPT_DEFAULT;
          }
    break;

  case 2351:

/* Line 1455 of yacc.c  */
#line 13669 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(YYTHD, yychar == YYEMPTY))
              MYSQL_YYABORT;
          }
    break;

  case 2352:

/* Line 1455 of yacc.c  */
#line 13674 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->option_type= (yyvsp[(1) - (1)].var_type);
          }
    break;

  case 2354:

/* Line 1455 of yacc.c  */
#line 13684 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(YYTHD, yychar == YYEMPTY))
              MYSQL_YYABORT; 
          }
    break;

  case 2356:

/* Line 1455 of yacc.c  */
#line 13690 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(YYTHD, yychar == YYEMPTY))
              MYSQL_YYABORT; 
          }
    break;

  case 2359:

/* Line 1455 of yacc.c  */
#line 13704 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            sp_create_assignment_lex(YYTHD, yychar == YYEMPTY);
          }
    break;

  case 2360:

/* Line 1455 of yacc.c  */
#line 13708 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(YYTHD, yychar == YYEMPTY))
              MYSQL_YYABORT; 
          }
    break;

  case 2361:

/* Line 1455 of yacc.c  */
#line 13713 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            sp_create_assignment_lex(YYTHD, yychar == YYEMPTY);
          }
    break;

  case 2362:

/* Line 1455 of yacc.c  */
#line 13717 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(YYTHD, yychar == YYEMPTY))
              MYSQL_YYABORT; 
          }
    break;

  case 2363:

/* Line 1455 of yacc.c  */
#line 13726 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->option_type= (yyvsp[(1) - (1)].var_type);
          }
    break;

  case 2366:

/* Line 1455 of yacc.c  */
#line 13734 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2367:

/* Line 1455 of yacc.c  */
#line 13735 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2368:

/* Line 1455 of yacc.c  */
#line 13736 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2369:

/* Line 1455 of yacc.c  */
#line 13740 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2370:

/* Line 1455 of yacc.c  */
#line 13741 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2371:

/* Line 1455 of yacc.c  */
#line 13742 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2372:

/* Line 1455 of yacc.c  */
#line 13743 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2373:

/* Line 1455 of yacc.c  */
#line 13747 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_DEFAULT; }
    break;

  case 2374:

/* Line 1455 of yacc.c  */
#line 13748 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2375:

/* Line 1455 of yacc.c  */
#line 13749 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2376:

/* Line 1455 of yacc.c  */
#line 13750 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2377:

/* Line 1455 of yacc.c  */
#line 13756 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;

            if ((yyvsp[(1) - (3)].variable).var && (yyvsp[(1) - (3)].variable).var != trg_new_row_fake_var)
            {
              /* It is a system variable. */
              if (set_system_variable(thd, &(yyvsp[(1) - (3)].variable), lex->option_type, (yyvsp[(3) - (3)].item)))
                MYSQL_YYABORT;
            }
            else
            {
              /*
                Not in trigger assigning value to new row,
                and option_type preceeding local variable is illegal.
              */
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2378:

/* Line 1455 of yacc.c  */
#line 13781 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            LEX_STRING *name= &(yyvsp[(1) - (3)].variable).base_name;

            if ((yyvsp[(1) - (3)].variable).var == trg_new_row_fake_var)
            {
              /* We are in trigger and assigning value to field of new row */
              if (set_trigger_new_row(YYTHD, name, (yyvsp[(3) - (3)].item)))
                MYSQL_YYABORT;
            }
            else if ((yyvsp[(1) - (3)].variable).var)
            {
              /* It is a system variable. */
              if (set_system_variable(thd, &(yyvsp[(1) - (3)].variable), lex->option_type, (yyvsp[(3) - (3)].item)))
                MYSQL_YYABORT;
            }
            else
            {
              sp_pcontext *spc= lex->spcont;
              sp_variable *spv= spc->find_variable(name, false);

              /* It is a local variable. */
              if (set_local_variable(thd, spv, (yyvsp[(3) - (3)].item)))
                MYSQL_YYABORT;
            }
          }
    break;

  case 2379:

/* Line 1455 of yacc.c  */
#line 13809 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item_func_set_user_var *item;
            item= new (YYTHD->mem_root) Item_func_set_user_var((yyvsp[(2) - (4)].lex_str), (yyvsp[(4) - (4)].item));
            if (item == NULL)
              MYSQL_YYABORT;
            set_var_user *var= new set_var_user(item);
            if (var == NULL)
              MYSQL_YYABORT;
            Lex->var_list.push_back(var);
          }
    break;

  case 2380:

/* Line 1455 of yacc.c  */
#line 13820 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            struct sys_var_with_base tmp= (yyvsp[(4) - (6)].variable);
            /* Lookup if necessary: must be a system variable. */
            if (tmp.var == NULL)
            {
              if (find_sys_var_null_base(thd, &tmp))
                MYSQL_YYABORT;
            }
            if (set_system_variable(thd, &tmp, (yyvsp[(3) - (6)].var_type), (yyvsp[(6) - (6)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 2381:

/* Line 1455 of yacc.c  */
#line 13833 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            CHARSET_INFO *cs2;
            cs2= (yyvsp[(2) - (2)].charset) ? (yyvsp[(2) - (2)].charset): global_system_variables.character_set_client;
            set_var_collation_client *var;
            var= new set_var_collation_client(cs2,
                                              thd->variables.collation_database,
                                              cs2);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2382:

/* Line 1455 of yacc.c  */
#line 13847 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;
            LEX_STRING names;

            names.str= (char *)"names";
            names.length= 5;
            if (spc && spc->find_variable(&names, false))
              my_error(ER_SP_BAD_VAR_SHADOW, MYF(0), names.str);
            else
              my_parse_error(ER(ER_SYNTAX_ERROR));

            MYSQL_YYABORT;
          }
    break;

  case 2383:

/* Line 1455 of yacc.c  */
#line 13862 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            CHARSET_INFO *cs2;
            CHARSET_INFO *cs3;
            cs2= (yyvsp[(2) - (3)].charset) ? (yyvsp[(2) - (3)].charset) : global_system_variables.character_set_client;
            cs3= (yyvsp[(3) - (3)].charset) ? (yyvsp[(3) - (3)].charset) : cs2;
            if (!my_charset_same(cs2, cs3))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       cs3->name, cs2->csname);
              MYSQL_YYABORT;
            }
            set_var_collation_client *var;
            var= new set_var_collation_client(cs3, cs3, cs3);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2384:

/* Line 1455 of yacc.c  */
#line 13881 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            LEX_USER *user;
            sp_pcontext *spc= lex->spcont;
            LEX_STRING pw;

            pw.str= (char *)"password";
            pw.length= 8;
            if (spc && spc->find_variable(&pw, false))
            {
              my_error(ER_SP_BAD_VAR_SHADOW, MYF(0), pw.str);
              MYSQL_YYABORT;
            }
            if (!(user=(LEX_USER*) thd->alloc(sizeof(LEX_USER))))
              MYSQL_YYABORT;
            user->host=null_lex_str;
            user->user.str=thd->security_ctx->user;
            user->user.length= strlen(thd->security_ctx->user);
            set_var_password *var= new set_var_password(user, (yyvsp[(3) - (3)].simple_string));
            if (var == NULL)
              MYSQL_YYABORT;
            thd->lex->var_list.push_back(var);
            thd->lex->autocommit= TRUE;
            if (lex->sphead)
              lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;
          }
    break;

  case 2385:

/* Line 1455 of yacc.c  */
#line 13909 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            set_var_password *var= new set_var_password((yyvsp[(3) - (5)].lex_user),(yyvsp[(5) - (5)].simple_string));
            if (var == NULL)
              MYSQL_YYABORT;
            Lex->var_list.push_back(var);
            Lex->autocommit= TRUE;
            if (Lex->sphead)
              Lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;
          }
    break;

  case 2386:

/* Line 1455 of yacc.c  */
#line 13922 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            sp_pcontext *spc= thd->lex->spcont;
            sp_variable_t *spv;

            /* Best effort lookup for system variable. */
            if (!spc || !(spv = spc->find_variable(&(yyvsp[(1) - (1)].lex_str))))
            {
              struct sys_var_with_base tmp= {NULL, (yyvsp[(1) - (1)].lex_str)};

              /* Not an SP local variable */
              if (find_sys_var_null_base(thd, &tmp))
                MYSQL_YYABORT;

              (yyval.variable)= tmp;
            }
            else
            {
              /*
                Possibly an SP local variable (or a shadowed sysvar).
                Will depend on the context of the SET statement.
              */
              (yyval.variable).var= NULL;
              (yyval.variable).base_name= (yyvsp[(1) - (1)].lex_str);
            }
          }
    break;

  case 2387:

/* Line 1455 of yacc.c  */
#line 13949 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (check_reserved_words(&(yyvsp[(1) - (3)].lex_str)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (lex->sphead && lex->sphead->m_type == TYPE_ENUM_TRIGGER &&
                (!my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "NEW") || 
                 !my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "OLD")))
            {
              if ((yyvsp[(1) - (3)].lex_str).str[0]=='O' || (yyvsp[(1) - (3)].lex_str).str[0]=='o')
              {
                my_error(ER_TRG_CANT_CHANGE_ROW, MYF(0), "OLD", "");
                MYSQL_YYABORT;
              }
              if (lex->trg_chistics.event == TRG_EVENT_DELETE)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0),
                         "NEW", "on DELETE");
                MYSQL_YYABORT;
              }
              if (lex->trg_chistics.action_time == TRG_ACTION_AFTER)
              {
                my_error(ER_TRG_CANT_CHANGE_ROW, MYF(0), "NEW", "after ");
                MYSQL_YYABORT;
              }
              /* This special combination will denote field of NEW row */
              (yyval.variable).var= trg_new_row_fake_var;
              (yyval.variable).base_name= (yyvsp[(3) - (3)].lex_str);
            }
            else
            {
              sys_var *tmp=find_sys_var(YYTHD, (yyvsp[(3) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).length);
              if (!tmp)
                MYSQL_YYABORT;
              if (!tmp->is_struct())
                my_error(ER_VARIABLE_IS_NOT_STRUCT, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              (yyval.variable).var= tmp;
              (yyval.variable).base_name= (yyvsp[(1) - (3)].lex_str);
            }
          }
    break;

  case 2388:

/* Line 1455 of yacc.c  */
#line 13992 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            sys_var *tmp=find_sys_var(YYTHD, (yyvsp[(3) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).length);
            if (!tmp)
              MYSQL_YYABORT;
            if (!tmp->is_struct())
              my_error(ER_VARIABLE_IS_NOT_STRUCT, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
            (yyval.variable).var= tmp;
            (yyval.variable).base_name.str=    (char*) "default";
            (yyval.variable).base_name.length= 7;
          }
    break;

  case 2393:

/* Line 1455 of yacc.c  */
#line 14013 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex=Lex;
            Item *item= new (thd->mem_root) Item_int((int32) (yyvsp[(1) - (1)].num));
            if (item == NULL)
              MYSQL_YYABORT;
            set_var *var= new set_var(lex->option_type,
                                      find_sys_var(thd, "tx_read_only"),
                                      &null_lex_str,
                                      item);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2394:

/* Line 1455 of yacc.c  */
#line 14031 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex=Lex;
            Item *item= new (thd->mem_root) Item_int((int32) (yyvsp[(3) - (3)].tx_isolation));
            if (item == NULL)
              MYSQL_YYABORT;
            set_var *var= new set_var(lex->option_type,
                                      find_sys_var(thd, "tx_isolation"),
                                      &null_lex_str,
                                      item);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2395:

/* Line 1455 of yacc.c  */
#line 14048 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= true; }
    break;

  case 2396:

/* Line 1455 of yacc.c  */
#line 14049 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= false; }
    break;

  case 2397:

/* Line 1455 of yacc.c  */
#line 14053 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_READ_UNCOMMITTED; }
    break;

  case 2398:

/* Line 1455 of yacc.c  */
#line 14054 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_READ_COMMITTED; }
    break;

  case 2399:

/* Line 1455 of yacc.c  */
#line 14055 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_REPEATABLE_READ; }
    break;

  case 2400:

/* Line 1455 of yacc.c  */
#line 14056 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_SERIALIZABLE; }
    break;

  case 2401:

/* Line 1455 of yacc.c  */
#line 14060 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.simple_string)=(yyvsp[(1) - (1)].lex_str).str;}
    break;

  case 2402:

/* Line 1455 of yacc.c  */
#line 14062 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.simple_string)= (yyvsp[(3) - (4)].lex_str).length ? YYTHD->variables.old_passwords ?
              Item_func_old_password::alloc(YYTHD, (yyvsp[(3) - (4)].lex_str).str, (yyvsp[(3) - (4)].lex_str).length) :
              Item_func_password::alloc(YYTHD, (yyvsp[(3) - (4)].lex_str).str, (yyvsp[(3) - (4)].lex_str).length) :
              (yyvsp[(3) - (4)].lex_str).str;
            if ((yyval.simple_string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2403:

/* Line 1455 of yacc.c  */
#line 14071 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.simple_string)= (yyvsp[(3) - (4)].lex_str).length ? Item_func_old_password::alloc(YYTHD, (yyvsp[(3) - (4)].lex_str).str,
                                                          (yyvsp[(3) - (4)].lex_str).length) :
              (yyvsp[(3) - (4)].lex_str).str;
            if ((yyval.simple_string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2404:

/* Line 1455 of yacc.c  */
#line 14082 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 2405:

/* Line 1455 of yacc.c  */
#line 14083 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)=0; }
    break;

  case 2406:

/* Line 1455 of yacc.c  */
#line 14085 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_string("ON",  2, system_charset_info);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2407:

/* Line 1455 of yacc.c  */
#line 14091 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_string("ALL", 3, system_charset_info);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2408:

/* Line 1455 of yacc.c  */
#line 14097 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_string("binary", 6, system_charset_info);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2409:

/* Line 1455 of yacc.c  */
#line 14108 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "LOCK");
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_LOCK_TABLES;
          }
    break;

  case 2410:

/* Line 1455 of yacc.c  */
#line 14119 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2415:

/* Line 1455 of yacc.c  */
#line 14134 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            thr_lock_type lock_type= (thr_lock_type) (yyvsp[(3) - (3)].num);
            bool lock_for_write= (lock_type >= TL_WRITE_ALLOW_WRITE);
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (3)].table), (yyvsp[(2) - (3)].lex_str_ptr), 0, lock_type,
                                           (lock_for_write ?
                                            lock_type == TL_WRITE_CONCURRENT_INSERT ?
                                            MDL_SHARED_WRITE :
                                            MDL_SHARED_NO_READ_WRITE :
                                            MDL_SHARED_READ)))
              MYSQL_YYABORT;
          }
    break;

  case 2416:

/* Line 1455 of yacc.c  */
#line 14148 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= TL_READ_NO_INSERT; }
    break;

  case 2417:

/* Line 1455 of yacc.c  */
#line 14149 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= TL_WRITE_DEFAULT; }
    break;

  case 2418:

/* Line 1455 of yacc.c  */
#line 14151 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= (Lex->sphead ? TL_WRITE_DEFAULT : TL_WRITE_CONCURRENT_INSERT);
          }
    break;

  case 2419:

/* Line 1455 of yacc.c  */
#line 14155 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 2420:

/* Line 1455 of yacc.c  */
#line 14156 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= TL_READ; }
    break;

  case 2421:

/* Line 1455 of yacc.c  */
#line 14161 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "UNLOCK");
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_UNLOCK_TABLES;
          }
    break;

  case 2422:

/* Line 1455 of yacc.c  */
#line 14172 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2423:

/* Line 1455 of yacc.c  */
#line 14181 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_HA_OPEN;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(2) - (4)].table), (yyvsp[(4) - (4)].lex_str_ptr), 0))
              MYSQL_YYABORT;
          }
    break;

  case 2424:

/* Line 1455 of yacc.c  */
#line 14193 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_HA_CLOSE;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(2) - (3)].table), 0, 0))
              MYSQL_YYABORT;
          }
    break;

  case 2425:

/* Line 1455 of yacc.c  */
#line 14205 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
              MYSQL_YYABORT;
            }
            lex->expr_allows_subselect= FALSE;
            lex->sql_command = SQLCOM_HA_READ;
            lex->ha_rkey_mode= HA_READ_KEY_EXACT; /* Avoid purify warnings */
            Item *one= new (YYTHD->mem_root) Item_int((int32) 1);
            if (one == NULL)
              MYSQL_YYABORT;
            lex->current_select->select_limit= one;
            lex->current_select->offset_limit= 0;
            lex->limit_rows_examined= 0;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(2) - (3)].table), 0, 0))
              MYSQL_YYABORT;
          }
    break;

  case 2426:

/* Line 1455 of yacc.c  */
#line 14225 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->expr_allows_subselect= TRUE;
            /* Stored functions are not supported for HANDLER READ. */
            if (Lex->uses_stored_routines())
            {
              my_error(ER_NOT_SUPPORTED_YET, MYF(0),
                       "stored functions in HANDLER ... READ");
              MYSQL_YYABORT;
            }
          }
    break;

  case 2427:

/* Line 1455 of yacc.c  */
#line 14238 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ident= null_lex_str; }
    break;

  case 2428:

/* Line 1455 of yacc.c  */
#line 14239 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ident= (yyvsp[(1) - (2)].lex_str); }
    break;

  case 2429:

/* Line 1455 of yacc.c  */
#line 14243 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RFIRST; }
    break;

  case 2430:

/* Line 1455 of yacc.c  */
#line 14244 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RNEXT;  }
    break;

  case 2431:

/* Line 1455 of yacc.c  */
#line 14248 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RFIRST; }
    break;

  case 2432:

/* Line 1455 of yacc.c  */
#line 14249 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RNEXT;  }
    break;

  case 2433:

/* Line 1455 of yacc.c  */
#line 14250 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RPREV;  }
    break;

  case 2434:

/* Line 1455 of yacc.c  */
#line 14251 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RLAST;  }
    break;

  case 2435:

/* Line 1455 of yacc.c  */
#line 14253 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->ha_read_mode = RKEY;
            lex->ha_rkey_mode=(yyvsp[(1) - (1)].ha_rkey_mode);
            if (!(lex->insert_list = new List_item))
              MYSQL_YYABORT;
          }
    break;

  case 2436:

/* Line 1455 of yacc.c  */
#line 14261 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2437:

/* Line 1455 of yacc.c  */
#line 14265 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_EXACT;   }
    break;

  case 2438:

/* Line 1455 of yacc.c  */
#line 14266 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_OR_NEXT; }
    break;

  case 2439:

/* Line 1455 of yacc.c  */
#line 14267 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_OR_PREV; }
    break;

  case 2440:

/* Line 1455 of yacc.c  */
#line 14268 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_AFTER_KEY;   }
    break;

  case 2441:

/* Line 1455 of yacc.c  */
#line 14269 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_BEFORE_KEY;  }
    break;

  case 2442:

/* Line 1455 of yacc.c  */
#line 14276 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2443:

/* Line 1455 of yacc.c  */
#line 14281 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= 0;
          }
    break;

  case 2444:

/* Line 1455 of yacc.c  */
#line 14287 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= TYPE_ENUM_FUNCTION;
          }
    break;

  case 2445:

/* Line 1455 of yacc.c  */
#line 14298 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= TYPE_ENUM_PROCEDURE;
          }
    break;

  case 2446:

/* Line 1455 of yacc.c  */
#line 14309 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_REVOKE_ALL;
          }
    break;

  case 2447:

/* Line 1455 of yacc.c  */
#line 14313 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->users_list.push_front ((yyvsp[(3) - (5)].lex_user));
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= TYPE_ENUM_PROXY;
          }
    break;

  case 2448:

/* Line 1455 of yacc.c  */
#line 14323 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2449:

/* Line 1455 of yacc.c  */
#line 14329 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_GRANT;
            lex->type= 0;
          }
    break;

  case 2450:

/* Line 1455 of yacc.c  */
#line 14336 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_GRANT;
            lex->type= TYPE_ENUM_FUNCTION;
          }
    break;

  case 2451:

/* Line 1455 of yacc.c  */
#line 14348 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_GRANT;
            lex->type= TYPE_ENUM_PROCEDURE;
          }
    break;

  case 2452:

/* Line 1455 of yacc.c  */
#line 14359 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->users_list.push_front ((yyvsp[(3) - (6)].lex_user));
            lex->sql_command= SQLCOM_GRANT;
            lex->type= TYPE_ENUM_PROXY;
          }
    break;

  case 2455:

/* Line 1455 of yacc.c  */
#line 14373 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2456:

/* Line 1455 of yacc.c  */
#line 14375 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            Lex->all_privileges= 1; 
            Lex->grant= GLOBAL_ACLS;
          }
    break;

  case 2461:

/* Line 1455 of yacc.c  */
#line 14393 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->which_columns = SELECT_ACL;}
    break;

  case 2462:

/* Line 1455 of yacc.c  */
#line 14394 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2463:

/* Line 1455 of yacc.c  */
#line 14396 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->which_columns = INSERT_ACL;}
    break;

  case 2464:

/* Line 1455 of yacc.c  */
#line 14397 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2465:

/* Line 1455 of yacc.c  */
#line 14399 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->which_columns = UPDATE_ACL; }
    break;

  case 2466:

/* Line 1455 of yacc.c  */
#line 14400 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2467:

/* Line 1455 of yacc.c  */
#line 14402 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->which_columns = REFERENCES_ACL;}
    break;

  case 2468:

/* Line 1455 of yacc.c  */
#line 14403 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2469:

/* Line 1455 of yacc.c  */
#line 14404 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= DELETE_ACL;}
    break;

  case 2470:

/* Line 1455 of yacc.c  */
#line 14405 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2471:

/* Line 1455 of yacc.c  */
#line 14406 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= INDEX_ACL;}
    break;

  case 2472:

/* Line 1455 of yacc.c  */
#line 14407 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= ALTER_ACL;}
    break;

  case 2473:

/* Line 1455 of yacc.c  */
#line 14408 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_ACL;}
    break;

  case 2474:

/* Line 1455 of yacc.c  */
#line 14409 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= DROP_ACL;}
    break;

  case 2475:

/* Line 1455 of yacc.c  */
#line 14410 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= EXECUTE_ACL;}
    break;

  case 2476:

/* Line 1455 of yacc.c  */
#line 14411 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= RELOAD_ACL;}
    break;

  case 2477:

/* Line 1455 of yacc.c  */
#line 14412 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= SHUTDOWN_ACL;}
    break;

  case 2478:

/* Line 1455 of yacc.c  */
#line 14413 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= PROCESS_ACL;}
    break;

  case 2479:

/* Line 1455 of yacc.c  */
#line 14414 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= FILE_ACL;}
    break;

  case 2480:

/* Line 1455 of yacc.c  */
#line 14415 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= GRANT_ACL;}
    break;

  case 2481:

/* Line 1455 of yacc.c  */
#line 14416 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= SHOW_DB_ACL;}
    break;

  case 2482:

/* Line 1455 of yacc.c  */
#line 14417 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= SUPER_ACL;}
    break;

  case 2483:

/* Line 1455 of yacc.c  */
#line 14418 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_TMP_ACL;}
    break;

  case 2484:

/* Line 1455 of yacc.c  */
#line 14419 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= LOCK_TABLES_ACL; }
    break;

  case 2485:

/* Line 1455 of yacc.c  */
#line 14420 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= REPL_SLAVE_ACL; }
    break;

  case 2486:

/* Line 1455 of yacc.c  */
#line 14421 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= REPL_CLIENT_ACL; }
    break;

  case 2487:

/* Line 1455 of yacc.c  */
#line 14422 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_VIEW_ACL; }
    break;

  case 2488:

/* Line 1455 of yacc.c  */
#line 14423 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= SHOW_VIEW_ACL; }
    break;

  case 2489:

/* Line 1455 of yacc.c  */
#line 14424 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_PROC_ACL; }
    break;

  case 2490:

/* Line 1455 of yacc.c  */
#line 14425 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= ALTER_PROC_ACL; }
    break;

  case 2491:

/* Line 1455 of yacc.c  */
#line 14426 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_USER_ACL; }
    break;

  case 2492:

/* Line 1455 of yacc.c  */
#line 14427 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= EVENT_ACL;}
    break;

  case 2493:

/* Line 1455 of yacc.c  */
#line 14428 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= TRIGGER_ACL; }
    break;

  case 2494:

/* Line 1455 of yacc.c  */
#line 14429 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_TABLESPACE_ACL; }
    break;

  case 2495:

/* Line 1455 of yacc.c  */
#line 14433 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2496:

/* Line 1455 of yacc.c  */
#line 14434 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2499:

/* Line 1455 of yacc.c  */
#line 14444 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->x509_subject)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "SUBJECT");
              MYSQL_YYABORT;
            }
            lex->x509_subject=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2500:

/* Line 1455 of yacc.c  */
#line 14454 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->x509_issuer)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "ISSUER");
              MYSQL_YYABORT;
            }
            lex->x509_issuer=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2501:

/* Line 1455 of yacc.c  */
#line 14464 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->ssl_cipher)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "CIPHER");
              MYSQL_YYABORT;
            }
            lex->ssl_cipher=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2502:

/* Line 1455 of yacc.c  */
#line 14477 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            size_t dummy;
            if (lex->copy_db_to(&lex->current_select->db, &dummy))
              MYSQL_YYABORT;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant = DB_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
            {
              my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2503:

/* Line 1455 of yacc.c  */
#line 14492 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->current_select->db = (yyvsp[(1) - (3)].lex_str).str;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant = DB_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
            {
              my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2504:

/* Line 1455 of yacc.c  */
#line 14505 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->current_select->db = NULL;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant= GLOBAL_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
            {
              my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2505:

/* Line 1455 of yacc.c  */
#line 14518 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(1) - (1)].table),NULL,
                                                        TL_OPTION_UPDATING))
              MYSQL_YYABORT;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant =  TABLE_ACLS & ~GRANT_ACL;
          }
    break;

  case 2506:

/* Line 1455 of yacc.c  */
#line 14530 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (1)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2507:

/* Line 1455 of yacc.c  */
#line 14535 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2508:

/* Line 1455 of yacc.c  */
#line 14543 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (1)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2509:

/* Line 1455 of yacc.c  */
#line 14548 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2514:

/* Line 1455 of yacc.c  */
#line 14559 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.lex_user)=(yyvsp[(1) - (4)].lex_user); (yyvsp[(1) - (4)].lex_user)->password=(yyvsp[(4) - (4)].lex_str);
            if ((yyvsp[(4) - (4)].lex_str).length)
            {
              if (YYTHD->variables.old_passwords)
              {
                char *buff= 
                  (char *) YYTHD->alloc(SCRAMBLED_PASSWORD_CHAR_LENGTH_323+1);
                if (buff == NULL)
                  MYSQL_YYABORT;
                my_make_scrambled_password_323(buff, (yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length);
                (yyvsp[(1) - (4)].lex_user)->password.str= buff;
                (yyvsp[(1) - (4)].lex_user)->password.length= SCRAMBLED_PASSWORD_CHAR_LENGTH_323;
              }
              else
              {
                char *buff= 
                  (char *) YYTHD->alloc(SCRAMBLED_PASSWORD_CHAR_LENGTH+1);
                if (buff == NULL)
                  MYSQL_YYABORT;
                my_make_scrambled_password(buff, (yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length);
                (yyvsp[(1) - (4)].lex_user)->password.str= buff;
                (yyvsp[(1) - (4)].lex_user)->password.length= SCRAMBLED_PASSWORD_CHAR_LENGTH;
              }
            }
          }
    break;

  case 2515:

/* Line 1455 of yacc.c  */
#line 14586 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            (yyval.lex_user)= (yyvsp[(1) - (5)].lex_user); 
            (yyvsp[(1) - (5)].lex_user)->password= (yyvsp[(5) - (5)].lex_str); 
          }
    break;

  case 2516:

/* Line 1455 of yacc.c  */
#line 14591 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.lex_user)= (yyvsp[(1) - (4)].lex_user);
            (yyvsp[(1) - (4)].lex_user)->plugin= (yyvsp[(4) - (4)].lex_str);
            (yyvsp[(1) - (4)].lex_user)->auth= empty_lex_str;
          }
    break;

  case 2517:

/* Line 1455 of yacc.c  */
#line 14597 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.lex_user)= (yyvsp[(1) - (6)].lex_user);
            (yyvsp[(1) - (6)].lex_user)->plugin= (yyvsp[(4) - (6)].lex_str);
            (yyvsp[(1) - (6)].lex_user)->auth= (yyvsp[(6) - (6)].lex_str);
          }
    break;

  case 2518:

/* Line 1455 of yacc.c  */
#line 14603 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_user)= (yyvsp[(1) - (1)].lex_user); (yyvsp[(1) - (1)].lex_user)->password= null_lex_str; }
    break;

  case 2519:

/* Line 1455 of yacc.c  */
#line 14608 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->grant |= lex->which_columns;
          }
    break;

  case 2523:

/* Line 1455 of yacc.c  */
#line 14622 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            String *new_str = new (YYTHD->mem_root) String((const char*) (yyvsp[(1) - (1)].lex_str).str,(yyvsp[(1) - (1)].lex_str).length,system_charset_info);
            if (new_str == NULL)
              MYSQL_YYABORT;
            List_iterator <LEX_COLUMN> iter(Lex->columns);
            class LEX_COLUMN *point;
            LEX *lex=Lex;
            while ((point=iter++))
            {
              if (!my_strcasecmp(system_charset_info,
                                 point->column.c_ptr(), new_str->c_ptr()))
                break;
            }
            lex->grant_tot_col|= lex->which_columns;
            if (point)
              point->rights |= lex->which_columns;
            else
            {
              LEX_COLUMN *col= new LEX_COLUMN (*new_str,lex->which_columns);
              if (col == NULL)
                MYSQL_YYABORT;
              lex->columns.push_back(col);
            }
          }
    break;

  case 2525:

/* Line 1455 of yacc.c  */
#line 14651 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_SPECIFIED;
          }
    break;

  case 2526:

/* Line 1455 of yacc.c  */
#line 14655 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_ANY;
          }
    break;

  case 2527:

/* Line 1455 of yacc.c  */
#line 14659 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_X509;
          }
    break;

  case 2528:

/* Line 1455 of yacc.c  */
#line 14663 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_NONE;
          }
    break;

  case 2529:

/* Line 1455 of yacc.c  */
#line 14669 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2531:

/* Line 1455 of yacc.c  */
#line 14674 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2532:

/* Line 1455 of yacc.c  */
#line 14675 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= GRANT_ACL;}
    break;

  case 2533:

/* Line 1455 of yacc.c  */
#line 14679 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2534:

/* Line 1455 of yacc.c  */
#line 14680 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2535:

/* Line 1455 of yacc.c  */
#line 14684 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= GRANT_ACL;}
    break;

  case 2536:

/* Line 1455 of yacc.c  */
#line 14686 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.questions=(yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::QUERIES_PER_HOUR;
          }
    break;

  case 2537:

/* Line 1455 of yacc.c  */
#line 14692 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.updates=(yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::UPDATES_PER_HOUR;
          }
    break;

  case 2538:

/* Line 1455 of yacc.c  */
#line 14698 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.conn_per_hour= (yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::CONNECTIONS_PER_HOUR;
          }
    break;

  case 2539:

/* Line 1455 of yacc.c  */
#line 14704 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.user_conn= (yyvsp[(2) - (2)].num);
            lex->mqh.specified_limits|= USER_RESOURCES::USER_CONNECTIONS;
          }
    break;

  case 2540:

/* Line 1455 of yacc.c  */
#line 14713 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_BEGIN;
            lex->start_transaction_opt= 0;
          }
    break;

  case 2541:

/* Line 1455 of yacc.c  */
#line 14718 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2542:

/* Line 1455 of yacc.c  */
#line 14722 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2543:

/* Line 1455 of yacc.c  */
#line 14723 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2544:

/* Line 1455 of yacc.c  */
#line 14728 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_UNKNOWN; }
    break;

  case 2545:

/* Line 1455 of yacc.c  */
#line 14729 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_NO; }
    break;

  case 2546:

/* Line 1455 of yacc.c  */
#line 14730 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_YES; }
    break;

  case 2547:

/* Line 1455 of yacc.c  */
#line 14735 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_UNKNOWN; }
    break;

  case 2548:

/* Line 1455 of yacc.c  */
#line 14736 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_YES; }
    break;

  case 2549:

/* Line 1455 of yacc.c  */
#line 14737 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_NO; }
    break;

  case 2550:

/* Line 1455 of yacc.c  */
#line 14741 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2551:

/* Line 1455 of yacc.c  */
#line 14742 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2552:

/* Line 1455 of yacc.c  */
#line 14747 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_COMMIT;
            /* Don't allow AND CHAIN RELEASE. */
            MYSQL_YYABORT_UNLESS((yyvsp[(3) - (4)].m_yes_no_unk) != TVL_YES || (yyvsp[(4) - (4)].m_yes_no_unk) != TVL_YES);
            lex->tx_chain= (yyvsp[(3) - (4)].m_yes_no_unk);
            lex->tx_release= (yyvsp[(4) - (4)].m_yes_no_unk);
          }
    break;

  case 2553:

/* Line 1455 of yacc.c  */
#line 14759 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ROLLBACK;
            /* Don't allow AND CHAIN RELEASE. */
            MYSQL_YYABORT_UNLESS((yyvsp[(3) - (4)].m_yes_no_unk) != TVL_YES || (yyvsp[(4) - (4)].m_yes_no_unk) != TVL_YES);
            lex->tx_chain= (yyvsp[(3) - (4)].m_yes_no_unk);
            lex->tx_release= (yyvsp[(4) - (4)].m_yes_no_unk);
          }
    break;

  case 2554:

/* Line 1455 of yacc.c  */
#line 14769 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ROLLBACK_TO_SAVEPOINT;
            lex->ident= (yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 2555:

/* Line 1455 of yacc.c  */
#line 14778 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SAVEPOINT;
            lex->ident= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 2556:

/* Line 1455 of yacc.c  */
#line 14787 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_RELEASE_SAVEPOINT;
            lex->ident= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 2557:

/* Line 1455 of yacc.c  */
#line 14800 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2559:

/* Line 1455 of yacc.c  */
#line 14806 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_select_to_union_list(Lex, (bool)(yyvsp[(2) - (2)].num), TRUE))
              MYSQL_YYABORT;
          }
    break;

  case 2560:

/* Line 1455 of yacc.c  */
#line 14811 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              Remove from the name resolution context stack the context of the
              last select in the union.
            */
            Lex->pop_context();
          }
    break;

  case 2561:

/* Line 1455 of yacc.c  */
#line 14821 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 2562:

/* Line 1455 of yacc.c  */
#line 14822 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 2563:

/* Line 1455 of yacc.c  */
#line 14823 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 2566:

/* Line 1455 of yacc.c  */
#line 14832 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            DBUG_ASSERT(lex->current_select->linkage != GLOBAL_OPTIONS_TYPE);
            SELECT_LEX *sel= lex->current_select;
            SELECT_LEX_UNIT *unit= sel->master_unit();
            SELECT_LEX *fake= unit->fake_select_lex;
            if (fake)
            {
              unit->global_parameters= fake;
              fake->no_table_names_allowed= 1;
              lex->current_select= fake;
            }
            thd->where= "global ORDER clause";
          }
    break;

  case 2567:

/* Line 1455 of yacc.c  */
#line 14848 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            thd->lex->current_select->no_table_names_allowed= 0;
            thd->where= "";
          }
    break;

  case 2570:

/* Line 1455 of yacc.c  */
#line 14861 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=1; }
    break;

  case 2571:

/* Line 1455 of yacc.c  */
#line 14862 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=1; }
    break;

  case 2572:

/* Line 1455 of yacc.c  */
#line 14863 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=0; }
    break;

  case 2573:

/* Line 1455 of yacc.c  */
#line 14868 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            (yyval.select_lex)= Lex->current_select->master_unit()->first_select();
          }
    break;

  case 2574:

/* Line 1455 of yacc.c  */
#line 14872 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.select_lex)= Lex->current_select->master_unit()->first_select();
          }
    break;

  case 2576:

/* Line 1455 of yacc.c  */
#line 14881 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_select_to_union_list(Lex, (bool)(yyvsp[(3) - (3)].num), FALSE))
              MYSQL_YYABORT;
          }
    break;

  case 2577:

/* Line 1455 of yacc.c  */
#line 14887 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->pop_context();
            (yyval.select_lex)= (yyvsp[(1) - (6)].select_lex);
          }
    break;

  case 2578:

/* Line 1455 of yacc.c  */
#line 14896 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            (yyval.select_lex)= (yyvsp[(2) - (3)].select_lex);
          }
    break;

  case 2579:

/* Line 1455 of yacc.c  */
#line 14902 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->expr_allows_subselect ||
               lex->sql_command == (int)SQLCOM_PURGE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            /* 
              we are making a "derived table" for the parenthesis
              as we need to have a lex level to fit the union 
              after the parenthesis, e.g. 
              (SELECT .. ) UNION ...  becomes 
              SELECT * FROM ((SELECT ...) UNION ...)
            */
            if (mysql_new_select(Lex, 1))
              MYSQL_YYABORT;
          }
    break;

  case 2580:

/* Line 1455 of yacc.c  */
#line 14923 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->pop_context();
            SELECT_LEX *child= lex->current_select;
            lex->current_select = lex->current_select->return_after_parsing();
            lex->nest_level--;
            lex->current_select->n_child_sum_items += child->n_sum_items;
            /*
              A subselect can add fields to an outer select. Reserve space for
              them.
            */
            lex->current_select->select_n_where_fields+=
            child->select_n_where_fields;
          }
    break;

  case 2585:

/* Line 1455 of yacc.c  */
#line 14951 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->options|= SELECT_STRAIGHT_JOIN; }
    break;

  case 2586:

/* Line 1455 of yacc.c  */
#line 14953 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            YYPS->m_lock_type= TL_READ_HIGH_PRIORITY;
            YYPS->m_mdl_type= MDL_SHARED_READ;
            Select->options|= SELECT_HIGH_PRIORITY;
          }
    break;

  case 2587:

/* Line 1455 of yacc.c  */
#line 14960 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->options|= SELECT_DISTINCT; }
    break;

  case 2588:

/* Line 1455 of yacc.c  */
#line 14961 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->options|= SELECT_SMALL_RESULT; }
    break;

  case 2589:

/* Line 1455 of yacc.c  */
#line 14962 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->options|= SELECT_BIG_RESULT; }
    break;

  case 2590:

/* Line 1455 of yacc.c  */
#line 14964 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            Select->options|= OPTION_BUFFER_RESULT;
          }
    break;

  case 2591:

/* Line 1455 of yacc.c  */
#line 14970 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            Select->options|= OPTION_FOUND_ROWS;
          }
    break;

  case 2592:

/* Line 1455 of yacc.c  */
#line 14975 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->options|= SELECT_ALL; }
    break;

  case 2593:

/* Line 1455 of yacc.c  */
#line 14986 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2594:

/* Line 1455 of yacc.c  */
#line 14988 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2595:

/* Line 1455 of yacc.c  */
#line 14990 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2609:

/* Line 1455 of yacc.c  */
#line 15023 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              We have to distinguish missing DEFINER-clause from case when
              CURRENT_USER specified as definer explicitly in order to properly
              handle CREATE TRIGGER statements which come to replication thread
              from older master servers (i.e. to create non-suid trigger in this
              case).
            */
            YYTHD->lex->definer= 0;
          }
    break;

  case 2610:

/* Line 1455 of yacc.c  */
#line 15037 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            YYTHD->lex->definer= get_current_user(YYTHD, (yyvsp[(3) - (3)].lex_user));
          }
    break;

  case 2611:

/* Line 1455 of yacc.c  */
#line 15050 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2612:

/* Line 1455 of yacc.c  */
#line 15052 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2613:

/* Line 1455 of yacc.c  */
#line 15054 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2614:

/* Line 1455 of yacc.c  */
#line 15059 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_view_mode= VIEW_CREATE_OR_REPLACE; }
    break;

  case 2615:

/* Line 1455 of yacc.c  */
#line 15064 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_view_algorithm= DTYPE_ALGORITHM_UNDEFINED; }
    break;

  case 2616:

/* Line 1455 of yacc.c  */
#line 15066 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_view_algorithm= VIEW_ALGORITHM_MERGE; }
    break;

  case 2617:

/* Line 1455 of yacc.c  */
#line 15068 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_view_algorithm= VIEW_ALGORITHM_TMPTABLE; }
    break;

  case 2618:

/* Line 1455 of yacc.c  */
#line 15073 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_DEFAULT; }
    break;

  case 2619:

/* Line 1455 of yacc.c  */
#line 15075 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_DEFINER; }
    break;

  case 2620:

/* Line 1455 of yacc.c  */
#line 15077 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_INVOKER; }
    break;

  case 2621:

/* Line 1455 of yacc.c  */
#line 15082 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_CREATE_VIEW;
            /* first table in list is target VIEW name */
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(3) - (3)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_IGNORE,
                                                   MDL_EXCLUSIVE))
              MYSQL_YYABORT;
            lex->query_tables->open_strategy= TABLE_LIST::OPEN_STUB;
          }
    break;

  case 2623:

/* Line 1455 of yacc.c  */
#line 15099 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2625:

/* Line 1455 of yacc.c  */
#line 15105 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
              Lex->view_list.push_back((LEX_STRING*)
              sql_memdup(&(yyvsp[(1) - (1)].lex_str), sizeof(LEX_STRING)));
            }
    break;

  case 2626:

/* Line 1455 of yacc.c  */
#line 15110 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
              Lex->view_list.push_back((LEX_STRING*)
              sql_memdup(&(yyvsp[(3) - (3)].lex_str), sizeof(LEX_STRING)));
            }
    break;

  case 2627:

/* Line 1455 of yacc.c  */
#line 15117 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->parsing_options.allows_variable= FALSE;
            lex->parsing_options.allows_select_into= FALSE;
            lex->parsing_options.allows_select_procedure= FALSE;
            lex->parsing_options.allows_derived= FALSE;
            lex->create_view_select.str= (char *) YYLIP->get_cpp_ptr();
          }
    break;

  case 2628:

/* Line 1455 of yacc.c  */
#line 15126 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            uint len= YYLIP->get_cpp_ptr() - lex->create_view_select.str;
            void *create_view_select= thd->memdup(lex->create_view_select.str, len);
            lex->create_view_select.length= len;
            lex->create_view_select.str= (char *) create_view_select;
            trim_whitespace(thd->charset(), &lex->create_view_select);
            lex->parsing_options.allows_variable= TRUE;
            lex->parsing_options.allows_select_into= TRUE;
            lex->parsing_options.allows_select_procedure= TRUE;
            lex->parsing_options.allows_derived= TRUE;
          }
    break;

  case 2631:

/* Line 1455 of yacc.c  */
#line 15148 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_NONE; }
    break;

  case 2632:

/* Line 1455 of yacc.c  */
#line 15150 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_CASCADED; }
    break;

  case 2633:

/* Line 1455 of yacc.c  */
#line 15152 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_CASCADED; }
    break;

  case 2634:

/* Line 1455 of yacc.c  */
#line 15154 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_LOCAL; }
    break;

  case 2635:

/* Line 1455 of yacc.c  */
#line 15171 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* $8 */
            Lex->raw_trg_on_table_name_begin= YYLIP->get_tok_start();
          }
    break;

  case 2636:

/* Line 1455 of yacc.c  */
#line 15177 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* $12 */
            Lex->raw_trg_on_table_name_end= YYLIP->get_tok_start();
          }
    break;

  case 2637:

/* Line 1455 of yacc.c  */
#line 15182 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* $15 */
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_head *sp;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "TRIGGER");
              MYSQL_YYABORT;
            }

            if (!(sp= new sp_head()))
              MYSQL_YYABORT;
            sp->reset_thd_mem_root(thd);
            sp->init(lex);
            sp->m_type= TYPE_ENUM_TRIGGER;
            sp->init_sp_name(thd, (yyvsp[(3) - (14)].spname));
            lex->stmt_definition_begin= (yyvsp[(2) - (14)].simple_string);
            lex->ident.str= (yyvsp[(7) - (14)].simple_string);
            lex->ident.length= (yyvsp[(11) - (14)].simple_string) - (yyvsp[(7) - (14)].simple_string);

            lex->sphead= sp;
            lex->spname= (yyvsp[(3) - (14)].spname);

            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
            lex->sphead->m_chistics= &lex->sp_chistics;
            lex->sphead->set_body_start(thd, lip->get_cpp_ptr());
          }
    break;

  case 2638:

/* Line 1455 of yacc.c  */
#line 15212 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* $17 */
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            lex->sql_command= SQLCOM_CREATE_TRIGGER;
            sp->set_stmt_end(YYTHD);
            sp->restore_thd_mem_root(YYTHD);

            if (sp->is_not_allowed_in_function("trigger"))
              MYSQL_YYABORT;

            /*
              We have to do it after parsing trigger body, because some of
              sp_proc_stmt alternatives are not saving/restoring LEX, so
              lex->query_tables can be wiped out.
            */
            if (!lex->select_lex.add_table_to_list(YYTHD, (yyvsp[(9) - (16)].table),
                                                   (LEX_STRING*) 0,
                                                   TL_OPTION_UPDATING,
                                                   TL_READ_NO_INSERT,
                                                   MDL_SHARED_NO_WRITE))
              MYSQL_YYABORT;
          }
    break;

  case 2639:

/* Line 1455 of yacc.c  */
#line 15246 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            if (is_native_function(thd, & (yyvsp[(4) - (8)].lex_str)))
            {
              my_error(ER_NATIVE_FCT_NAME_COLLISION, MYF(0),
                       (yyvsp[(4) - (8)].lex_str).str);
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_CREATE_FUNCTION;
            lex->udf.type= UDFTYPE_AGGREGATE;
            lex->stmt_definition_begin= (yyvsp[(2) - (8)].simple_string);
            lex->udf.name = (yyvsp[(4) - (8)].lex_str);
            lex->udf.returns=(Item_result) (yyvsp[(6) - (8)].num);
            lex->udf.dl=(yyvsp[(8) - (8)].lex_str).str;
          }
    break;

  case 2640:

/* Line 1455 of yacc.c  */
#line 15264 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            if (is_native_function(thd, & (yyvsp[(3) - (7)].lex_str)))
            {
              my_error(ER_NATIVE_FCT_NAME_COLLISION, MYF(0),
                       (yyvsp[(3) - (7)].lex_str).str);
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_CREATE_FUNCTION;
            lex->udf.type= UDFTYPE_FUNCTION;
            lex->stmt_definition_begin= (yyvsp[(1) - (7)].simple_string);
            lex->udf.name = (yyvsp[(3) - (7)].lex_str);
            lex->udf.returns=(Item_result) (yyvsp[(5) - (7)].num);
            lex->udf.dl=(yyvsp[(7) - (7)].lex_str).str;
          }
    break;

  case 2641:

/* Line 1455 of yacc.c  */
#line 15287 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* $5 */
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_head *sp;
            const char* tmp_param_begin;

            lex->stmt_definition_begin= (yyvsp[(1) - (4)].simple_string);
            lex->spname= (yyvsp[(3) - (4)].spname);

            if (lex->sphead)
            {
              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            /* Order is important here: new - reset - init */
            sp= new sp_head();
            if (sp == NULL)
              MYSQL_YYABORT;
            sp->reset_thd_mem_root(thd);
            sp->init(lex);
            sp->init_sp_name(thd, lex->spname);

            sp->m_type= TYPE_ENUM_FUNCTION;
            lex->sphead= sp;

            tmp_param_begin= lip->get_cpp_tok_start();
            tmp_param_begin++;
            lex->sphead->m_param_begin= tmp_param_begin;
          }
    break;

  case 2642:

/* Line 1455 of yacc.c  */
#line 15319 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* $8 */
            Lex->sphead->m_param_end= YYLIP->get_cpp_tok_start();
          }
    break;

  case 2643:

/* Line 1455 of yacc.c  */
#line 15323 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* $10 */
            LEX *lex= Lex;
            lex->charset= NULL;
            lex->length= lex->dec= NULL;
            lex->interval_list.empty();
            lex->type= 0;
            lex->vcol_info= 0;
          }
    break;

  case 2644:

/* Line 1455 of yacc.c  */
#line 15332 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* $12 */
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            /*
              This was disabled in 5.1.12. See bug #20701
              When collation support in SP is implemented, then this test
              should be removed.
            */
            if (((yyvsp[(11) - (11)].num) == MYSQL_TYPE_STRING || (yyvsp[(11) - (11)].num) == MYSQL_TYPE_VARCHAR)
                && (lex->type & BINCMP_FLAG))
            {
              my_error(ER_NOT_SUPPORTED_YET, MYF(0), "return value collation");
              MYSQL_YYABORT;
            }

            if (sp->fill_field_definition(YYTHD, lex,
                                          (enum enum_field_types) (yyvsp[(11) - (11)].num),
                                          &sp->m_return_field_def))
              MYSQL_YYABORT;

            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
    break;

  case 2645:

/* Line 1455 of yacc.c  */
#line 15355 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* $14 */
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            lex->sphead->m_chistics= &lex->sp_chistics;
            lex->sphead->set_body_start(thd, lip->get_cpp_tok_start());
          }
    break;

  case 2646:

/* Line 1455 of yacc.c  */
#line 15364 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            if (sp->is_not_allowed_in_function("function"))
              MYSQL_YYABORT;

            lex->sql_command= SQLCOM_CREATE_SPFUNCTION;
            sp->set_stmt_end(thd);
            if (!(sp->m_flags & sp_head::HAS_RETURN))
            {
              my_error(ER_SP_NORETURN, MYF(0), sp->m_qname.str);
              MYSQL_YYABORT;
            }
            if (is_native_function(thd, & sp->m_name))
            {
              /*
                This warning will be printed when
                [1] A client query is parsed,
                [2] A stored function is loaded by db_load_routine.
                Printing the warning for [2] is intentional, to cover the
                following scenario:
                - A user define a SF 'foo' using MySQL 5.N
                - An application uses select foo(), and works.
                - MySQL 5.{N+1} defines a new native function 'foo', as
                part of a new feature.
                - MySQL 5.{N+1} documentation is updated, and should mention
                that there is a potential incompatible change in case of
                existing stored function named 'foo'.
                - The user deploys 5.{N+1}. At this point, 'select foo()'
                means something different, and the user code is most likely
                broken (it's only safe if the code is 'select db.foo()').
                With a warning printed when the SF is loaded (which has to occur
                before the call), the warning will provide a hint explaining
                the root cause of a later failure of 'select foo()'.
                With no warning printed, the user code will fail with no
                apparent reason.
                Printing a warning each time db_load_routine is executed for
                an ambiguous function is annoying, since that can happen a lot,
                but in practice should not happen unless there *are* name
                collisions.
                If a collision exists, it should not be silenced but fixed.
              */
              push_warning_printf(thd,
                                  MYSQL_ERROR::WARN_LEVEL_NOTE,
                                  ER_NATIVE_FCT_NAME_COLLISION,
                                  ER(ER_NATIVE_FCT_NAME_COLLISION),
                                  sp->m_name.str);
            }
            sp->restore_thd_mem_root(thd);
          }
    break;

  case 2647:

/* Line 1455 of yacc.c  */
#line 15420 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }

            lex->stmt_definition_begin= (yyvsp[(2) - (3)].simple_string);

            /* Order is important here: new - reset - init */
            sp= new sp_head();
            if (sp == NULL)
              MYSQL_YYABORT;
            sp->reset_thd_mem_root(YYTHD);
            sp->init(lex);
            sp->m_type= TYPE_ENUM_PROCEDURE;
            sp->init_sp_name(YYTHD, (yyvsp[(3) - (3)].spname));

            lex->sphead= sp;
          }
    break;

  case 2648:

/* Line 1455 of yacc.c  */
#line 15444 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            const char* tmp_param_begin;

            tmp_param_begin= YYLIP->get_cpp_tok_start();
            tmp_param_begin++;
            Lex->sphead->m_param_begin= tmp_param_begin;
          }
    break;

  case 2649:

/* Line 1455 of yacc.c  */
#line 15453 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            lex->sphead->m_param_end= YYLIP->get_cpp_tok_start();
            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
    break;

  case 2650:

/* Line 1455 of yacc.c  */
#line 15461 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            lex->sphead->m_chistics= &lex->sp_chistics;
            lex->sphead->set_body_start(thd, YYLIP->get_cpp_tok_start());
          }
    break;

  case 2651:

/* Line 1455 of yacc.c  */
#line 15469 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            sp->set_stmt_end(YYTHD);
            lex->sql_command= SQLCOM_CREATE_PROCEDURE;
            sp->restore_thd_mem_root(YYTHD);
          }
    break;

  case 2652:

/* Line 1455 of yacc.c  */
#line 15483 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_START;
          }
    break;

  case 2653:

/* Line 1455 of yacc.c  */
#line 15487 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_END;
          }
    break;

  case 2654:

/* Line 1455 of yacc.c  */
#line 15491 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_PREPARE;
          }
    break;

  case 2655:

/* Line 1455 of yacc.c  */
#line 15495 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_COMMIT;
          }
    break;

  case 2656:

/* Line 1455 of yacc.c  */
#line 15499 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_ROLLBACK;
          }
    break;

  case 2657:

/* Line 1455 of yacc.c  */
#line 15503 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_RECOVER;
          }
    break;

  case 2658:

/* Line 1455 of yacc.c  */
#line 15510 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (1)].string)->length() <= MAXGTRIDSIZE);
            if (!(Lex->xid=(XID *)YYTHD->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set(1L, (yyvsp[(1) - (1)].string)->ptr(), (yyvsp[(1) - (1)].string)->length(), 0, 0);
          }
    break;

  case 2659:

/* Line 1455 of yacc.c  */
#line 15517 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].string)->length() <= MAXGTRIDSIZE && (yyvsp[(3) - (3)].string)->length() <= MAXBQUALSIZE);
            if (!(Lex->xid=(XID *)YYTHD->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set(1L, (yyvsp[(1) - (3)].string)->ptr(), (yyvsp[(1) - (3)].string)->length(), (yyvsp[(3) - (3)].string)->ptr(), (yyvsp[(3) - (3)].string)->length());
          }
    break;

  case 2660:

/* Line 1455 of yacc.c  */
#line 15524 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].string)->length() <= MAXGTRIDSIZE && (yyvsp[(3) - (5)].string)->length() <= MAXBQUALSIZE);
            if (!(Lex->xid=(XID *)YYTHD->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set((yyvsp[(5) - (5)].ulong_num), (yyvsp[(1) - (5)].string)->ptr(), (yyvsp[(1) - (5)].string)->length(), (yyvsp[(3) - (5)].string)->ptr(), (yyvsp[(3) - (5)].string)->length());
          }
    break;

  case 2661:

/* Line 1455 of yacc.c  */
#line 15533 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2662:

/* Line 1455 of yacc.c  */
#line 15534 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2663:

/* Line 1455 of yacc.c  */
#line 15538 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2664:

/* Line 1455 of yacc.c  */
#line 15539 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_JOIN;        }
    break;

  case 2665:

/* Line 1455 of yacc.c  */
#line 15540 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_RESUME;      }
    break;

  case 2666:

/* Line 1455 of yacc.c  */
#line 15544 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2667:

/* Line 1455 of yacc.c  */
#line 15545 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_ONE_PHASE;   }
    break;

  case 2668:

/* Line 1455 of yacc.c  */
#line 15550 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2669:

/* Line 1455 of yacc.c  */
#line 15552 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_SUSPEND;     }
    break;

  case 2671:

/* Line 1455 of yacc.c  */
#line 15557 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2672:

/* Line 1455 of yacc.c  */
#line 15558 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_FOR_MIGRATE; }
    break;

  case 2673:

/* Line 1455 of yacc.c  */
#line 15563 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_INSTALL_PLUGIN;
            lex->comment= (yyvsp[(3) - (5)].lex_str);
            lex->ident= (yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 2674:

/* Line 1455 of yacc.c  */
#line 15570 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_INSTALL_PLUGIN;
            lex->comment= null_lex_str;
            lex->ident= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 2675:

/* Line 1455 of yacc.c  */
#line 15580 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_UNINSTALL_PLUGIN;
            lex->comment= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 2676:

/* Line 1455 of yacc.c  */
#line 15586 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_UNINSTALL_PLUGIN;
            lex->comment= null_lex_str;
            lex->ident= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 2677:

/* Line 1455 of yacc.c  */
#line 15597 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
	  YYERROR;
	}
    break;



/* Line 1455 of yacc.c  */
#line 41760 "/home/buildbot/buildbot/build/mkdist/sql/sql_yacc.cc"
      default: break;
    }
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;

  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (YY_("syntax error"));
#else
      {
	YYSIZE_T yysize = yysyntax_error (0, yystate, yychar);
	if (yymsg_alloc < yysize && yymsg_alloc < YYSTACK_ALLOC_MAXIMUM)
	  {
	    YYSIZE_T yyalloc = 2 * yysize;
	    if (! (yysize <= yyalloc && yyalloc <= YYSTACK_ALLOC_MAXIMUM))
	      yyalloc = YYSTACK_ALLOC_MAXIMUM;
	    if (yymsg != yymsgbuf)
	      YYSTACK_FREE (yymsg);
	    yymsg = (char *) YYSTACK_ALLOC (yyalloc);
	    if (yymsg)
	      yymsg_alloc = yyalloc;
	    else
	      {
		yymsg = yymsgbuf;
		yymsg_alloc = sizeof yymsgbuf;
	      }
	  }

	if (0 < yysize && yysize <= yymsg_alloc)
	  {
	    (void) yysyntax_error (yymsg, yystate, yychar);
	    yyerror (yymsg);
	  }
	else
	  {
	    yyerror (YY_("syntax error"));
	    if (yysize != 0)
	      goto yyexhaustedlab;
	  }
      }
#endif
    }



  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */

      if (yychar <= YYEOF)
	{
	  /* Return failure if at end of input.  */
	  if (yychar == YYEOF)
	    YYABORT;
	}
      else
	{
	  yydestruct ("Error: discarding",
		      yytoken, &yylval);
	  yychar = YYEMPTY;
	}
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  /* Do not reclaim the symbols of the rule which action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (yyn != YYPACT_NINF)
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
	YYABORT;


      yydestruct ("Error: popping",
		  yystos[yystate], yyvsp);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  *++yyvsp = yylval;


  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#if !defined(yyoverflow) || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEMPTY)
     yydestruct ("Cleanup: discarding lookahead",
		 yytoken, &yylval);
  /* Do not reclaim the symbols of the rule which action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
		  yystos[*yyssp], yyvsp);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  /* Make sure YYID is used.  */
  return YYID (yyresult);
}



